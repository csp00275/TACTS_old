
STM32F746-ai.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009d80  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000924  08009f50  08009f50  00019f50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a874  0800a874  0002090c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a874  0800a874  0001a874  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a87c  0800a87c  0002090c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a87c  0800a87c  0001a87c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a880  0800a880  0001a880  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000090c  20000000  0800a884  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001cc  2000090c  0800b190  0002090c  2**2
                  ALLOC
 10 ._user_heap_stack 00001000  20000ad8  0800b190  00020ad8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002090c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014c1b  00000000  00000000  0002093c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029d8  00000000  00000000  00035557  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001018  00000000  00000000  00037f30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ef0  00000000  00000000  00038f48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000291a6  00000000  00000000  00039e38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001492f  00000000  00000000  00062fde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001033ef  00000000  00000000  0007790d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000cb  00000000  00000000  0017acfc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005784  00000000  00000000  0017adc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         000000cc  00000000  00000000  0018054c  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      000001b9  00000000  00000000  00180618  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000090c 	.word	0x2000090c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009f38 	.word	0x08009f38

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000910 	.word	0x20000910
 800020c:	08009f38 	.word	0x08009f38

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b9a8 	b.w	8000f50 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f83a 	bl	8000c80 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_f2lz>:
 8000c18:	ee07 0a90 	vmov	s15, r0
 8000c1c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000c20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c24:	d401      	bmi.n	8000c2a <__aeabi_f2lz+0x12>
 8000c26:	f000 b80b 	b.w	8000c40 <__aeabi_f2ulz>
 8000c2a:	eef1 7a67 	vneg.f32	s15, s15
 8000c2e:	b508      	push	{r3, lr}
 8000c30:	ee17 0a90 	vmov	r0, s15
 8000c34:	f000 f804 	bl	8000c40 <__aeabi_f2ulz>
 8000c38:	4240      	negs	r0, r0
 8000c3a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3e:	bd08      	pop	{r3, pc}

08000c40 <__aeabi_f2ulz>:
 8000c40:	b5d0      	push	{r4, r6, r7, lr}
 8000c42:	f7ff fca1 	bl	8000588 <__aeabi_f2d>
 8000c46:	4b0c      	ldr	r3, [pc, #48]	; (8000c78 <__aeabi_f2ulz+0x38>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	4606      	mov	r6, r0
 8000c4c:	460f      	mov	r7, r1
 8000c4e:	f7ff fcf3 	bl	8000638 <__aeabi_dmul>
 8000c52:	f000 f97f 	bl	8000f54 <__aeabi_d2uiz>
 8000c56:	4604      	mov	r4, r0
 8000c58:	f7ff fc74 	bl	8000544 <__aeabi_ui2d>
 8000c5c:	4b07      	ldr	r3, [pc, #28]	; (8000c7c <__aeabi_f2ulz+0x3c>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	f7ff fcea 	bl	8000638 <__aeabi_dmul>
 8000c64:	4602      	mov	r2, r0
 8000c66:	460b      	mov	r3, r1
 8000c68:	4630      	mov	r0, r6
 8000c6a:	4639      	mov	r1, r7
 8000c6c:	f7ff fb2c 	bl	80002c8 <__aeabi_dsub>
 8000c70:	f000 f970 	bl	8000f54 <__aeabi_d2uiz>
 8000c74:	4621      	mov	r1, r4
 8000c76:	bdd0      	pop	{r4, r6, r7, pc}
 8000c78:	3df00000 	.word	0x3df00000
 8000c7c:	41f00000 	.word	0x41f00000

08000c80 <__udivmoddi4>:
 8000c80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c84:	9d08      	ldr	r5, [sp, #32]
 8000c86:	4604      	mov	r4, r0
 8000c88:	468e      	mov	lr, r1
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d14d      	bne.n	8000d2a <__udivmoddi4+0xaa>
 8000c8e:	428a      	cmp	r2, r1
 8000c90:	4694      	mov	ip, r2
 8000c92:	d969      	bls.n	8000d68 <__udivmoddi4+0xe8>
 8000c94:	fab2 f282 	clz	r2, r2
 8000c98:	b152      	cbz	r2, 8000cb0 <__udivmoddi4+0x30>
 8000c9a:	fa01 f302 	lsl.w	r3, r1, r2
 8000c9e:	f1c2 0120 	rsb	r1, r2, #32
 8000ca2:	fa20 f101 	lsr.w	r1, r0, r1
 8000ca6:	fa0c fc02 	lsl.w	ip, ip, r2
 8000caa:	ea41 0e03 	orr.w	lr, r1, r3
 8000cae:	4094      	lsls	r4, r2
 8000cb0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cb4:	0c21      	lsrs	r1, r4, #16
 8000cb6:	fbbe f6f8 	udiv	r6, lr, r8
 8000cba:	fa1f f78c 	uxth.w	r7, ip
 8000cbe:	fb08 e316 	mls	r3, r8, r6, lr
 8000cc2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cc6:	fb06 f107 	mul.w	r1, r6, r7
 8000cca:	4299      	cmp	r1, r3
 8000ccc:	d90a      	bls.n	8000ce4 <__udivmoddi4+0x64>
 8000cce:	eb1c 0303 	adds.w	r3, ip, r3
 8000cd2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cd6:	f080 811f 	bcs.w	8000f18 <__udivmoddi4+0x298>
 8000cda:	4299      	cmp	r1, r3
 8000cdc:	f240 811c 	bls.w	8000f18 <__udivmoddi4+0x298>
 8000ce0:	3e02      	subs	r6, #2
 8000ce2:	4463      	add	r3, ip
 8000ce4:	1a5b      	subs	r3, r3, r1
 8000ce6:	b2a4      	uxth	r4, r4
 8000ce8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cec:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cf4:	fb00 f707 	mul.w	r7, r0, r7
 8000cf8:	42a7      	cmp	r7, r4
 8000cfa:	d90a      	bls.n	8000d12 <__udivmoddi4+0x92>
 8000cfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000d00:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d04:	f080 810a 	bcs.w	8000f1c <__udivmoddi4+0x29c>
 8000d08:	42a7      	cmp	r7, r4
 8000d0a:	f240 8107 	bls.w	8000f1c <__udivmoddi4+0x29c>
 8000d0e:	4464      	add	r4, ip
 8000d10:	3802      	subs	r0, #2
 8000d12:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d16:	1be4      	subs	r4, r4, r7
 8000d18:	2600      	movs	r6, #0
 8000d1a:	b11d      	cbz	r5, 8000d24 <__udivmoddi4+0xa4>
 8000d1c:	40d4      	lsrs	r4, r2
 8000d1e:	2300      	movs	r3, #0
 8000d20:	e9c5 4300 	strd	r4, r3, [r5]
 8000d24:	4631      	mov	r1, r6
 8000d26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2a:	428b      	cmp	r3, r1
 8000d2c:	d909      	bls.n	8000d42 <__udivmoddi4+0xc2>
 8000d2e:	2d00      	cmp	r5, #0
 8000d30:	f000 80ef 	beq.w	8000f12 <__udivmoddi4+0x292>
 8000d34:	2600      	movs	r6, #0
 8000d36:	e9c5 0100 	strd	r0, r1, [r5]
 8000d3a:	4630      	mov	r0, r6
 8000d3c:	4631      	mov	r1, r6
 8000d3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d42:	fab3 f683 	clz	r6, r3
 8000d46:	2e00      	cmp	r6, #0
 8000d48:	d14a      	bne.n	8000de0 <__udivmoddi4+0x160>
 8000d4a:	428b      	cmp	r3, r1
 8000d4c:	d302      	bcc.n	8000d54 <__udivmoddi4+0xd4>
 8000d4e:	4282      	cmp	r2, r0
 8000d50:	f200 80f9 	bhi.w	8000f46 <__udivmoddi4+0x2c6>
 8000d54:	1a84      	subs	r4, r0, r2
 8000d56:	eb61 0303 	sbc.w	r3, r1, r3
 8000d5a:	2001      	movs	r0, #1
 8000d5c:	469e      	mov	lr, r3
 8000d5e:	2d00      	cmp	r5, #0
 8000d60:	d0e0      	beq.n	8000d24 <__udivmoddi4+0xa4>
 8000d62:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d66:	e7dd      	b.n	8000d24 <__udivmoddi4+0xa4>
 8000d68:	b902      	cbnz	r2, 8000d6c <__udivmoddi4+0xec>
 8000d6a:	deff      	udf	#255	; 0xff
 8000d6c:	fab2 f282 	clz	r2, r2
 8000d70:	2a00      	cmp	r2, #0
 8000d72:	f040 8092 	bne.w	8000e9a <__udivmoddi4+0x21a>
 8000d76:	eba1 010c 	sub.w	r1, r1, ip
 8000d7a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d7e:	fa1f fe8c 	uxth.w	lr, ip
 8000d82:	2601      	movs	r6, #1
 8000d84:	0c20      	lsrs	r0, r4, #16
 8000d86:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d8a:	fb07 1113 	mls	r1, r7, r3, r1
 8000d8e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d92:	fb0e f003 	mul.w	r0, lr, r3
 8000d96:	4288      	cmp	r0, r1
 8000d98:	d908      	bls.n	8000dac <__udivmoddi4+0x12c>
 8000d9a:	eb1c 0101 	adds.w	r1, ip, r1
 8000d9e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000da2:	d202      	bcs.n	8000daa <__udivmoddi4+0x12a>
 8000da4:	4288      	cmp	r0, r1
 8000da6:	f200 80cb 	bhi.w	8000f40 <__udivmoddi4+0x2c0>
 8000daa:	4643      	mov	r3, r8
 8000dac:	1a09      	subs	r1, r1, r0
 8000dae:	b2a4      	uxth	r4, r4
 8000db0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000db4:	fb07 1110 	mls	r1, r7, r0, r1
 8000db8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000dbc:	fb0e fe00 	mul.w	lr, lr, r0
 8000dc0:	45a6      	cmp	lr, r4
 8000dc2:	d908      	bls.n	8000dd6 <__udivmoddi4+0x156>
 8000dc4:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dcc:	d202      	bcs.n	8000dd4 <__udivmoddi4+0x154>
 8000dce:	45a6      	cmp	lr, r4
 8000dd0:	f200 80bb 	bhi.w	8000f4a <__udivmoddi4+0x2ca>
 8000dd4:	4608      	mov	r0, r1
 8000dd6:	eba4 040e 	sub.w	r4, r4, lr
 8000dda:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dde:	e79c      	b.n	8000d1a <__udivmoddi4+0x9a>
 8000de0:	f1c6 0720 	rsb	r7, r6, #32
 8000de4:	40b3      	lsls	r3, r6
 8000de6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dea:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dee:	fa20 f407 	lsr.w	r4, r0, r7
 8000df2:	fa01 f306 	lsl.w	r3, r1, r6
 8000df6:	431c      	orrs	r4, r3
 8000df8:	40f9      	lsrs	r1, r7
 8000dfa:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dfe:	fa00 f306 	lsl.w	r3, r0, r6
 8000e02:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e06:	0c20      	lsrs	r0, r4, #16
 8000e08:	fa1f fe8c 	uxth.w	lr, ip
 8000e0c:	fb09 1118 	mls	r1, r9, r8, r1
 8000e10:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e14:	fb08 f00e 	mul.w	r0, r8, lr
 8000e18:	4288      	cmp	r0, r1
 8000e1a:	fa02 f206 	lsl.w	r2, r2, r6
 8000e1e:	d90b      	bls.n	8000e38 <__udivmoddi4+0x1b8>
 8000e20:	eb1c 0101 	adds.w	r1, ip, r1
 8000e24:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e28:	f080 8088 	bcs.w	8000f3c <__udivmoddi4+0x2bc>
 8000e2c:	4288      	cmp	r0, r1
 8000e2e:	f240 8085 	bls.w	8000f3c <__udivmoddi4+0x2bc>
 8000e32:	f1a8 0802 	sub.w	r8, r8, #2
 8000e36:	4461      	add	r1, ip
 8000e38:	1a09      	subs	r1, r1, r0
 8000e3a:	b2a4      	uxth	r4, r4
 8000e3c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e40:	fb09 1110 	mls	r1, r9, r0, r1
 8000e44:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e48:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e4c:	458e      	cmp	lr, r1
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x1e2>
 8000e50:	eb1c 0101 	adds.w	r1, ip, r1
 8000e54:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e58:	d26c      	bcs.n	8000f34 <__udivmoddi4+0x2b4>
 8000e5a:	458e      	cmp	lr, r1
 8000e5c:	d96a      	bls.n	8000f34 <__udivmoddi4+0x2b4>
 8000e5e:	3802      	subs	r0, #2
 8000e60:	4461      	add	r1, ip
 8000e62:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e66:	fba0 9402 	umull	r9, r4, r0, r2
 8000e6a:	eba1 010e 	sub.w	r1, r1, lr
 8000e6e:	42a1      	cmp	r1, r4
 8000e70:	46c8      	mov	r8, r9
 8000e72:	46a6      	mov	lr, r4
 8000e74:	d356      	bcc.n	8000f24 <__udivmoddi4+0x2a4>
 8000e76:	d053      	beq.n	8000f20 <__udivmoddi4+0x2a0>
 8000e78:	b15d      	cbz	r5, 8000e92 <__udivmoddi4+0x212>
 8000e7a:	ebb3 0208 	subs.w	r2, r3, r8
 8000e7e:	eb61 010e 	sbc.w	r1, r1, lr
 8000e82:	fa01 f707 	lsl.w	r7, r1, r7
 8000e86:	fa22 f306 	lsr.w	r3, r2, r6
 8000e8a:	40f1      	lsrs	r1, r6
 8000e8c:	431f      	orrs	r7, r3
 8000e8e:	e9c5 7100 	strd	r7, r1, [r5]
 8000e92:	2600      	movs	r6, #0
 8000e94:	4631      	mov	r1, r6
 8000e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e9a:	f1c2 0320 	rsb	r3, r2, #32
 8000e9e:	40d8      	lsrs	r0, r3
 8000ea0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ea4:	fa21 f303 	lsr.w	r3, r1, r3
 8000ea8:	4091      	lsls	r1, r2
 8000eaa:	4301      	orrs	r1, r0
 8000eac:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb0:	fa1f fe8c 	uxth.w	lr, ip
 8000eb4:	fbb3 f0f7 	udiv	r0, r3, r7
 8000eb8:	fb07 3610 	mls	r6, r7, r0, r3
 8000ebc:	0c0b      	lsrs	r3, r1, #16
 8000ebe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000ec2:	fb00 f60e 	mul.w	r6, r0, lr
 8000ec6:	429e      	cmp	r6, r3
 8000ec8:	fa04 f402 	lsl.w	r4, r4, r2
 8000ecc:	d908      	bls.n	8000ee0 <__udivmoddi4+0x260>
 8000ece:	eb1c 0303 	adds.w	r3, ip, r3
 8000ed2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ed6:	d22f      	bcs.n	8000f38 <__udivmoddi4+0x2b8>
 8000ed8:	429e      	cmp	r6, r3
 8000eda:	d92d      	bls.n	8000f38 <__udivmoddi4+0x2b8>
 8000edc:	3802      	subs	r0, #2
 8000ede:	4463      	add	r3, ip
 8000ee0:	1b9b      	subs	r3, r3, r6
 8000ee2:	b289      	uxth	r1, r1
 8000ee4:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ee8:	fb07 3316 	mls	r3, r7, r6, r3
 8000eec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef0:	fb06 f30e 	mul.w	r3, r6, lr
 8000ef4:	428b      	cmp	r3, r1
 8000ef6:	d908      	bls.n	8000f0a <__udivmoddi4+0x28a>
 8000ef8:	eb1c 0101 	adds.w	r1, ip, r1
 8000efc:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f00:	d216      	bcs.n	8000f30 <__udivmoddi4+0x2b0>
 8000f02:	428b      	cmp	r3, r1
 8000f04:	d914      	bls.n	8000f30 <__udivmoddi4+0x2b0>
 8000f06:	3e02      	subs	r6, #2
 8000f08:	4461      	add	r1, ip
 8000f0a:	1ac9      	subs	r1, r1, r3
 8000f0c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f10:	e738      	b.n	8000d84 <__udivmoddi4+0x104>
 8000f12:	462e      	mov	r6, r5
 8000f14:	4628      	mov	r0, r5
 8000f16:	e705      	b.n	8000d24 <__udivmoddi4+0xa4>
 8000f18:	4606      	mov	r6, r0
 8000f1a:	e6e3      	b.n	8000ce4 <__udivmoddi4+0x64>
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	e6f8      	b.n	8000d12 <__udivmoddi4+0x92>
 8000f20:	454b      	cmp	r3, r9
 8000f22:	d2a9      	bcs.n	8000e78 <__udivmoddi4+0x1f8>
 8000f24:	ebb9 0802 	subs.w	r8, r9, r2
 8000f28:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f2c:	3801      	subs	r0, #1
 8000f2e:	e7a3      	b.n	8000e78 <__udivmoddi4+0x1f8>
 8000f30:	4646      	mov	r6, r8
 8000f32:	e7ea      	b.n	8000f0a <__udivmoddi4+0x28a>
 8000f34:	4620      	mov	r0, r4
 8000f36:	e794      	b.n	8000e62 <__udivmoddi4+0x1e2>
 8000f38:	4640      	mov	r0, r8
 8000f3a:	e7d1      	b.n	8000ee0 <__udivmoddi4+0x260>
 8000f3c:	46d0      	mov	r8, sl
 8000f3e:	e77b      	b.n	8000e38 <__udivmoddi4+0x1b8>
 8000f40:	3b02      	subs	r3, #2
 8000f42:	4461      	add	r1, ip
 8000f44:	e732      	b.n	8000dac <__udivmoddi4+0x12c>
 8000f46:	4630      	mov	r0, r6
 8000f48:	e709      	b.n	8000d5e <__udivmoddi4+0xde>
 8000f4a:	4464      	add	r4, ip
 8000f4c:	3802      	subs	r0, #2
 8000f4e:	e742      	b.n	8000dd6 <__udivmoddi4+0x156>

08000f50 <__aeabi_idiv0>:
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop

08000f54 <__aeabi_d2uiz>:
 8000f54:	004a      	lsls	r2, r1, #1
 8000f56:	d211      	bcs.n	8000f7c <__aeabi_d2uiz+0x28>
 8000f58:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000f5c:	d211      	bcs.n	8000f82 <__aeabi_d2uiz+0x2e>
 8000f5e:	d50d      	bpl.n	8000f7c <__aeabi_d2uiz+0x28>
 8000f60:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000f64:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000f68:	d40e      	bmi.n	8000f88 <__aeabi_d2uiz+0x34>
 8000f6a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000f6e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f72:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000f76:	fa23 f002 	lsr.w	r0, r3, r2
 8000f7a:	4770      	bx	lr
 8000f7c:	f04f 0000 	mov.w	r0, #0
 8000f80:	4770      	bx	lr
 8000f82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000f86:	d102      	bne.n	8000f8e <__aeabi_d2uiz+0x3a>
 8000f88:	f04f 30ff 	mov.w	r0, #4294967295
 8000f8c:	4770      	bx	lr
 8000f8e:	f04f 0000 	mov.w	r0, #0
 8000f92:	4770      	bx	lr

08000f94 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000f98:	f3bf 8f4f 	dsb	sy
}
 8000f9c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f9e:	f3bf 8f6f 	isb	sy
}
 8000fa2:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000fa4:	4b0d      	ldr	r3, [pc, #52]	; (8000fdc <SCB_EnableICache+0x48>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000fac:	f3bf 8f4f 	dsb	sy
}
 8000fb0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000fb2:	f3bf 8f6f 	isb	sy
}
 8000fb6:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000fb8:	4b08      	ldr	r3, [pc, #32]	; (8000fdc <SCB_EnableICache+0x48>)
 8000fba:	695b      	ldr	r3, [r3, #20]
 8000fbc:	4a07      	ldr	r2, [pc, #28]	; (8000fdc <SCB_EnableICache+0x48>)
 8000fbe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fc2:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000fc4:	f3bf 8f4f 	dsb	sy
}
 8000fc8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000fca:	f3bf 8f6f 	isb	sy
}
 8000fce:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000fd0:	bf00      	nop
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	e000ed00 	.word	0xe000ed00

08000fe0 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b085      	sub	sp, #20
 8000fe4:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000fe6:	4b1f      	ldr	r3, [pc, #124]	; (8001064 <SCB_EnableDCache+0x84>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000fee:	f3bf 8f4f 	dsb	sy
}
 8000ff2:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000ff4:	4b1b      	ldr	r3, [pc, #108]	; (8001064 <SCB_EnableDCache+0x84>)
 8000ff6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000ffa:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	0b5b      	lsrs	r3, r3, #13
 8001000:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001004:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	08db      	lsrs	r3, r3, #3
 800100a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800100e:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	015a      	lsls	r2, r3, #5
 8001014:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8001018:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800101a:	68ba      	ldr	r2, [r7, #8]
 800101c:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800101e:	4911      	ldr	r1, [pc, #68]	; (8001064 <SCB_EnableDCache+0x84>)
 8001020:	4313      	orrs	r3, r2
 8001022:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001026:	68bb      	ldr	r3, [r7, #8]
 8001028:	1e5a      	subs	r2, r3, #1
 800102a:	60ba      	str	r2, [r7, #8]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d1ef      	bne.n	8001010 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	1e5a      	subs	r2, r3, #1
 8001034:	60fa      	str	r2, [r7, #12]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d1e5      	bne.n	8001006 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 800103a:	f3bf 8f4f 	dsb	sy
}
 800103e:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8001040:	4b08      	ldr	r3, [pc, #32]	; (8001064 <SCB_EnableDCache+0x84>)
 8001042:	695b      	ldr	r3, [r3, #20]
 8001044:	4a07      	ldr	r2, [pc, #28]	; (8001064 <SCB_EnableDCache+0x84>)
 8001046:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800104a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800104c:	f3bf 8f4f 	dsb	sy
}
 8001050:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001052:	f3bf 8f6f 	isb	sy
}
 8001056:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8001058:	bf00      	nop
 800105a:	3714      	adds	r7, #20
 800105c:	46bd      	mov	sp, r7
 800105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001062:	4770      	bx	lr
 8001064:	e000ed00 	.word	0xe000ed00

08001068 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001068:	b5b0      	push	{r4, r5, r7, lr}
 800106a:	b0b8      	sub	sp, #224	; 0xe0
 800106c:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	  char buf[50];
	  int buf_len = 0;
 800106e:	2300      	movs	r3, #0
 8001070:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	  // Buffers used to store input and output tensors
	  AI_ALIGNED(4) ai_i8 in_data[AI_SINE_MODEL2_IN_1_SIZE_BYTES];
	  AI_ALIGNED(4) ai_i8 out_data[AI_SINE_MODEL2_OUT_1_SIZE_BYTES];

	  // Pointer to our model
	  ai_handle sine_model2 = AI_HANDLE_NULL;
 8001074:	2300      	movs	r3, #0
 8001076:	663b      	str	r3, [r7, #96]	; 0x60

	  // Initialize wrapper structs that hold pointers to data and info about the
	  // data (tensor height, width, channels)
	  ai_buffer ai_input[AI_SINE_MODEL2_IN_NUM] = AI_SINE_MODEL2_IN;
 8001078:	4b8b      	ldr	r3, [pc, #556]	; (80012a8 <main+0x240>)
 800107a:	f107 0448 	add.w	r4, r7, #72	; 0x48
 800107e:	461d      	mov	r5, r3
 8001080:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001082:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001084:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001088:	e884 0003 	stmia.w	r4, {r0, r1}
	  ai_buffer ai_output[AI_SINE_MODEL2_OUT_NUM] = AI_SINE_MODEL2_OUT;
 800108c:	4b86      	ldr	r3, [pc, #536]	; (80012a8 <main+0x240>)
 800108e:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8001092:	461d      	mov	r5, r3
 8001094:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001096:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001098:	e895 0003 	ldmia.w	r5, {r0, r1}
 800109c:	e884 0003 	stmia.w	r4, {r0, r1}

	  // Set working memory and get weights/biases from model
	  ai_network_params ai_params = {
 80010a0:	4b82      	ldr	r3, [pc, #520]	; (80012ac <main+0x244>)
 80010a2:	603b      	str	r3, [r7, #0]
 80010a4:	2301      	movs	r3, #1
 80010a6:	80bb      	strh	r3, [r7, #4]
 80010a8:	2301      	movs	r3, #1
 80010aa:	80fb      	strh	r3, [r7, #6]
 80010ac:	2301      	movs	r3, #1
 80010ae:	813b      	strh	r3, [r7, #8]
 80010b0:	f44f 7339 	mov.w	r3, #740	; 0x2e4
 80010b4:	60fb      	str	r3, [r7, #12]
	    AI_SINE_MODEL2_DATA_WEIGHTS(ai_sine_model2_data_weights_get()),
 80010b6:	f003 fe8d 	bl	8004dd4 <ai_sine_model2_data_weights_get>
 80010ba:	4603      	mov	r3, r0
	  ai_network_params ai_params = {
 80010bc:	613b      	str	r3, [r7, #16]
 80010be:	2300      	movs	r3, #0
 80010c0:	617b      	str	r3, [r7, #20]
 80010c2:	4b7b      	ldr	r3, [pc, #492]	; (80012b0 <main+0x248>)
 80010c4:	61bb      	str	r3, [r7, #24]
 80010c6:	2301      	movs	r3, #1
 80010c8:	83bb      	strh	r3, [r7, #28]
 80010ca:	2301      	movs	r3, #1
 80010cc:	83fb      	strh	r3, [r7, #30]
 80010ce:	2301      	movs	r3, #1
 80010d0:	843b      	strh	r3, [r7, #32]
 80010d2:	2320      	movs	r3, #32
 80010d4:	627b      	str	r3, [r7, #36]	; 0x24
 80010d6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80010da:	62bb      	str	r3, [r7, #40]	; 0x28
 80010dc:	2300      	movs	r3, #0
 80010de:	62fb      	str	r3, [r7, #44]	; 0x2c
	    AI_SINE_MODEL2_DATA_ACTIVATIONS(activations)
	  };

	  // Set pointers wrapper structs to our data buffers
	  ai_input[0].n_batches = 1;
 80010e0:	2301      	movs	r3, #1
 80010e2:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	  ai_input[0].data = AI_HANDLE_PTR(in_data);
 80010e6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80010ea:	65bb      	str	r3, [r7, #88]	; 0x58
	  ai_output[0].n_batches = 1;
 80010ec:	2301      	movs	r3, #1
 80010ee:	86bb      	strh	r3, [r7, #52]	; 0x34
	  ai_output[0].data = AI_HANDLE_PTR(out_data);
 80010f0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80010f4:	643b      	str	r3, [r7, #64]	; 0x40


  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 80010f6:	f7ff ff4d 	bl	8000f94 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 80010fa:	f7ff ff71 	bl	8000fe0 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010fe:	f000 fbda 	bl	80018b6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001102:	f000 f8e9 	bl	80012d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001106:	f000 fa17 	bl	8001538 <MX_GPIO_Init>
  MX_CRC_Init();
 800110a:	f000 f967 	bl	80013dc <MX_CRC_Init>
  MX_TIM6_Init();
 800110e:	f000 f9ad 	bl	800146c <MX_TIM6_Init>
  MX_RTC_Init();
 8001112:	f000 f985 	bl	8001420 <MX_RTC_Init>
  MX_USART2_UART_Init();
 8001116:	f000 f9df 	bl	80014d8 <MX_USART2_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 800111a:	f000 f953 	bl	80013c4 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim6);
 800111e:	4865      	ldr	r0, [pc, #404]	; (80012b4 <main+0x24c>)
 8001120:	f002 fafe 	bl	8003720 <HAL_TIM_Base_Start>

    // Greetings!
    buf_len = sprintf(buf, "\r\n\r\nSTM32 X-Cube-AI test\r\n");
 8001124:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001128:	4963      	ldr	r1, [pc, #396]	; (80012b8 <main+0x250>)
 800112a:	4618      	mov	r0, r3
 800112c:	f006 f980 	bl	8007430 <siprintf>
 8001130:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, 100);
 8001134:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001138:	b29a      	uxth	r2, r3
 800113a:	f107 0190 	add.w	r1, r7, #144	; 0x90
 800113e:	2364      	movs	r3, #100	; 0x64
 8001140:	485e      	ldr	r0, [pc, #376]	; (80012bc <main+0x254>)
 8001142:	f002 fcd9 	bl	8003af8 <HAL_UART_Transmit>

    // Create instance of neural network
    ai_err = ai_sine_model2_create(&sine_model2, AI_SINE_MODEL2_DATA_CONFIG);
 8001146:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800114a:	2100      	movs	r1, #0
 800114c:	4618      	mov	r0, r3
 800114e:	f003 fddb 	bl	8004d08 <ai_sine_model2_create>
 8001152:	4603      	mov	r3, r0
 8001154:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (ai_err.type != AI_ERROR_NONE)
 8001158:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 800115c:	2b00      	cmp	r3, #0
 800115e:	d010      	beq.n	8001182 <main+0x11a>
    {
      buf_len = sprintf(buf, "Error: could not create NN instance\r\n");
 8001160:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001164:	4956      	ldr	r1, [pc, #344]	; (80012c0 <main+0x258>)
 8001166:	4618      	mov	r0, r3
 8001168:	f006 f962 	bl	8007430 <siprintf>
 800116c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
      HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, 100);
 8001170:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001174:	b29a      	uxth	r2, r3
 8001176:	f107 0190 	add.w	r1, r7, #144	; 0x90
 800117a:	2364      	movs	r3, #100	; 0x64
 800117c:	484f      	ldr	r0, [pc, #316]	; (80012bc <main+0x254>)
 800117e:	f002 fcbb 	bl	8003af8 <HAL_UART_Transmit>

      //while(1);
    }

    // Initialize neural network
    if (!ai_sine_model2_init(sine_model2, &ai_params))
 8001182:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001184:	463a      	mov	r2, r7
 8001186:	4611      	mov	r1, r2
 8001188:	4618      	mov	r0, r3
 800118a:	f003 fdd3 	bl	8004d34 <ai_sine_model2_init>
 800118e:	4603      	mov	r3, r0
 8001190:	f083 0301 	eor.w	r3, r3, #1
 8001194:	b2db      	uxtb	r3, r3
 8001196:	2b00      	cmp	r3, #0
 8001198:	d010      	beq.n	80011bc <main+0x154>
    {
      buf_len = sprintf(buf, "Error: could not initialize NN\r\n");
 800119a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800119e:	4949      	ldr	r1, [pc, #292]	; (80012c4 <main+0x25c>)
 80011a0:	4618      	mov	r0, r3
 80011a2:	f006 f945 	bl	8007430 <siprintf>
 80011a6:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
      HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, 100);
 80011aa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80011ae:	b29a      	uxth	r2, r3
 80011b0:	f107 0190 	add.w	r1, r7, #144	; 0x90
 80011b4:	2364      	movs	r3, #100	; 0x64
 80011b6:	4841      	ldr	r0, [pc, #260]	; (80012bc <main+0x254>)
 80011b8:	f002 fc9e 	bl	8003af8 <HAL_UART_Transmit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

      HAL_UART_Transmit(&huart2, (uint8_t *)buf, sprintf(buf, "Hi\r\n"), 100);
 80011bc:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80011c0:	4941      	ldr	r1, [pc, #260]	; (80012c8 <main+0x260>)
 80011c2:	4618      	mov	r0, r3
 80011c4:	f006 f934 	bl	8007430 <siprintf>
 80011c8:	4603      	mov	r3, r0
 80011ca:	b29a      	uxth	r2, r3
 80011cc:	f107 0190 	add.w	r1, r7, #144	; 0x90
 80011d0:	2364      	movs	r3, #100	; 0x64
 80011d2:	483a      	ldr	r0, [pc, #232]	; (80012bc <main+0x254>)
 80011d4:	f002 fc90 	bl	8003af8 <HAL_UART_Transmit>


	  // Fill input buffer (use test value)
	      for (uint32_t i = 0; i < AI_SINE_MODEL2_IN_1_SIZE; i++)
 80011d8:	2300      	movs	r3, #0
 80011da:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80011de:	e00d      	b.n	80011fc <main+0x194>
	      {
	        ((ai_float *)in_data)[i] = (ai_float)2.0f;
 80011e0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80011e4:	009b      	lsls	r3, r3, #2
 80011e6:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80011ea:	4413      	add	r3, r2
 80011ec:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011f0:	601a      	str	r2, [r3, #0]
	      for (uint32_t i = 0; i < AI_SINE_MODEL2_IN_1_SIZE; i++)
 80011f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80011f6:	3301      	adds	r3, #1
 80011f8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80011fc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001200:	2b00      	cmp	r3, #0
 8001202:	d0ed      	beq.n	80011e0 <main+0x178>
	      }

	      // Get current timestamp
	      timestamp = htim6.Instance->CNT;
 8001204:	4b2b      	ldr	r3, [pc, #172]	; (80012b4 <main+0x24c>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800120a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc

	      // Perform inference
	      nbatch = ai_sine_model2_run(sine_model2, &ai_input[0], &ai_output[0]);
 800120e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001210:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001214:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8001218:	4618      	mov	r0, r3
 800121a:	f003 fdca 	bl	8004db2 <ai_sine_model2_run>
 800121e:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
	      if (nbatch != 1) {
 8001222:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001226:	2b01      	cmp	r3, #1
 8001228:	d00d      	beq.n	8001246 <main+0x1de>
	        HAL_UART_Transmit(&huart2, (uint8_t *)buf, sprintf(buf, "Error: could not run inference\r\n"), 100);
 800122a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800122e:	4927      	ldr	r1, [pc, #156]	; (80012cc <main+0x264>)
 8001230:	4618      	mov	r0, r3
 8001232:	f006 f8fd 	bl	8007430 <siprintf>
 8001236:	4603      	mov	r3, r0
 8001238:	b29a      	uxth	r2, r3
 800123a:	f107 0190 	add.w	r1, r7, #144	; 0x90
 800123e:	2364      	movs	r3, #100	; 0x64
 8001240:	481e      	ldr	r0, [pc, #120]	; (80012bc <main+0x254>)
 8001242:	f002 fc59 	bl	8003af8 <HAL_UART_Transmit>


	      }

	      // Read output (predicted y) of neural network
	      y_val = ((float *)out_data)[0];
 8001246:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

	      // Print output of neural network along with inference time (microseconds)
	      buf_len = sprintf(buf,
 8001250:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8001254:	f7ff f998 	bl	8000588 <__aeabi_f2d>
 8001258:	4602      	mov	r2, r0
 800125a:	460b      	mov	r3, r1
	                        "Output: %f | Duration: %lu\r\n",
	                        y_val,
	                        htim6.Instance->CNT - timestamp);
 800125c:	4915      	ldr	r1, [pc, #84]	; (80012b4 <main+0x24c>)
 800125e:	6809      	ldr	r1, [r1, #0]
 8001260:	6a48      	ldr	r0, [r1, #36]	; 0x24
	      buf_len = sprintf(buf,
 8001262:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 8001266:	1a41      	subs	r1, r0, r1
 8001268:	f107 0090 	add.w	r0, r7, #144	; 0x90
 800126c:	9100      	str	r1, [sp, #0]
 800126e:	4918      	ldr	r1, [pc, #96]	; (80012d0 <main+0x268>)
 8001270:	f006 f8de 	bl	8007430 <siprintf>
 8001274:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
	      HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, 100);
 8001278:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800127c:	b29a      	uxth	r2, r3
 800127e:	f107 0190 	add.w	r1, r7, #144	; 0x90
 8001282:	2364      	movs	r3, #100	; 0x64
 8001284:	480d      	ldr	r0, [pc, #52]	; (80012bc <main+0x254>)
 8001286:	f002 fc37 	bl	8003af8 <HAL_UART_Transmit>

	      // Wait before doing it again
	      HAL_Delay(500);
 800128a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800128e:	f000 fb6f 	bl	8001970 <HAL_Delay>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	      HAL_UART_Transmit(&huart2, tx_buffer, 27, 100);
 8001292:	2364      	movs	r3, #100	; 0x64
 8001294:	221b      	movs	r2, #27
 8001296:	490f      	ldr	r1, [pc, #60]	; (80012d4 <main+0x26c>)
 8001298:	4808      	ldr	r0, [pc, #32]	; (80012bc <main+0x254>)
 800129a:	f002 fc2d 	bl	8003af8 <HAL_UART_Transmit>
	      HAL_Delay(500);
 800129e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80012a2:	f000 fb65 	bl	8001970 <HAL_Delay>
      HAL_UART_Transmit(&huart2, (uint8_t *)buf, sprintf(buf, "Hi\r\n"), 100);
 80012a6:	e789      	b.n	80011bc <main+0x154>
 80012a8:	0800a004 	.word	0x0800a004
 80012ac:	40040440 	.word	0x40040440
 80012b0:	00040440 	.word	0x00040440
 80012b4:	2000096c 	.word	0x2000096c
 80012b8:	08009f50 	.word	0x08009f50
 80012bc:	200009b8 	.word	0x200009b8
 80012c0:	08009f6c 	.word	0x08009f6c
 80012c4:	08009f94 	.word	0x08009f94
 80012c8:	08009fb8 	.word	0x08009fb8
 80012cc:	08009fc0 	.word	0x08009fc0
 80012d0:	08009fe4 	.word	0x08009fe4
 80012d4:	20000000 	.word	0x20000000

080012d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b094      	sub	sp, #80	; 0x50
 80012dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012de:	f107 0320 	add.w	r3, r7, #32
 80012e2:	2230      	movs	r2, #48	; 0x30
 80012e4:	2100      	movs	r1, #0
 80012e6:	4618      	mov	r0, r3
 80012e8:	f005 fb40 	bl	800696c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012ec:	f107 030c 	add.w	r3, r7, #12
 80012f0:	2200      	movs	r2, #0
 80012f2:	601a      	str	r2, [r3, #0]
 80012f4:	605a      	str	r2, [r3, #4]
 80012f6:	609a      	str	r2, [r3, #8]
 80012f8:	60da      	str	r2, [r3, #12]
 80012fa:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80012fc:	f000 ff96 	bl	800222c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001300:	4b2e      	ldr	r3, [pc, #184]	; (80013bc <SystemClock_Config+0xe4>)
 8001302:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001304:	4a2d      	ldr	r2, [pc, #180]	; (80013bc <SystemClock_Config+0xe4>)
 8001306:	f023 0318 	bic.w	r3, r3, #24
 800130a:	6713      	str	r3, [r2, #112]	; 0x70

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800130c:	4b2b      	ldr	r3, [pc, #172]	; (80013bc <SystemClock_Config+0xe4>)
 800130e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001310:	4a2a      	ldr	r2, [pc, #168]	; (80013bc <SystemClock_Config+0xe4>)
 8001312:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001316:	6413      	str	r3, [r2, #64]	; 0x40
 8001318:	4b28      	ldr	r3, [pc, #160]	; (80013bc <SystemClock_Config+0xe4>)
 800131a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001320:	60bb      	str	r3, [r7, #8]
 8001322:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001324:	4b26      	ldr	r3, [pc, #152]	; (80013c0 <SystemClock_Config+0xe8>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a25      	ldr	r2, [pc, #148]	; (80013c0 <SystemClock_Config+0xe8>)
 800132a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800132e:	6013      	str	r3, [r2, #0]
 8001330:	4b23      	ldr	r3, [pc, #140]	; (80013c0 <SystemClock_Config+0xe8>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001338:	607b      	str	r3, [r7, #4]
 800133a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 800133c:	2306      	movs	r3, #6
 800133e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001340:	2301      	movs	r3, #1
 8001342:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001344:	2301      	movs	r3, #1
 8001346:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001348:	2310      	movs	r3, #16
 800134a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800134c:	2302      	movs	r3, #2
 800134e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001350:	2300      	movs	r3, #0
 8001352:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001354:	2308      	movs	r3, #8
 8001356:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8001358:	23d8      	movs	r3, #216	; 0xd8
 800135a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800135c:	2302      	movs	r3, #2
 800135e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001360:	2302      	movs	r3, #2
 8001362:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001364:	f107 0320 	add.w	r3, r7, #32
 8001368:	4618      	mov	r0, r3
 800136a:	f000 ffbf 	bl	80022ec <HAL_RCC_OscConfig>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8001374:	f000 f904 	bl	8001580 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001378:	f000 ff68 	bl	800224c <HAL_PWREx_EnableOverDrive>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d001      	beq.n	8001386 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001382:	f000 f8fd 	bl	8001580 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001386:	230f      	movs	r3, #15
 8001388:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800138a:	2302      	movs	r3, #2
 800138c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800138e:	2300      	movs	r3, #0
 8001390:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001392:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001396:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001398:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800139c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800139e:	f107 030c 	add.w	r3, r7, #12
 80013a2:	2107      	movs	r1, #7
 80013a4:	4618      	mov	r0, r3
 80013a6:	f001 fa45 	bl	8002834 <HAL_RCC_ClockConfig>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 80013b0:	f000 f8e6 	bl	8001580 <Error_Handler>
  }
}
 80013b4:	bf00      	nop
 80013b6:	3750      	adds	r7, #80	; 0x50
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	40023800 	.word	0x40023800
 80013c0:	40007000 	.word	0x40007000

080013c4 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80013c8:	2200      	movs	r2, #0
 80013ca:	2100      	movs	r1, #0
 80013cc:	2026      	movs	r0, #38	; 0x26
 80013ce:	f000 fbce 	bl	8001b6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 80013d2:	2026      	movs	r0, #38	; 0x26
 80013d4:	f000 fbe7 	bl	8001ba6 <HAL_NVIC_EnableIRQ>
}
 80013d8:	bf00      	nop
 80013da:	bd80      	pop	{r7, pc}

080013dc <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80013e0:	4b0d      	ldr	r3, [pc, #52]	; (8001418 <MX_CRC_Init+0x3c>)
 80013e2:	4a0e      	ldr	r2, [pc, #56]	; (800141c <MX_CRC_Init+0x40>)
 80013e4:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80013e6:	4b0c      	ldr	r3, [pc, #48]	; (8001418 <MX_CRC_Init+0x3c>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80013ec:	4b0a      	ldr	r3, [pc, #40]	; (8001418 <MX_CRC_Init+0x3c>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80013f2:	4b09      	ldr	r3, [pc, #36]	; (8001418 <MX_CRC_Init+0x3c>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80013f8:	4b07      	ldr	r3, [pc, #28]	; (8001418 <MX_CRC_Init+0x3c>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80013fe:	4b06      	ldr	r3, [pc, #24]	; (8001418 <MX_CRC_Init+0x3c>)
 8001400:	2201      	movs	r2, #1
 8001402:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001404:	4804      	ldr	r0, [pc, #16]	; (8001418 <MX_CRC_Init+0x3c>)
 8001406:	f000 fbe9 	bl	8001bdc <HAL_CRC_Init>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8001410:	f000 f8b6 	bl	8001580 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001414:	bf00      	nop
 8001416:	bd80      	pop	{r7, pc}
 8001418:	20000928 	.word	0x20000928
 800141c:	40023000 	.word	0x40023000

08001420 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001424:	4b0f      	ldr	r3, [pc, #60]	; (8001464 <MX_RTC_Init+0x44>)
 8001426:	4a10      	ldr	r2, [pc, #64]	; (8001468 <MX_RTC_Init+0x48>)
 8001428:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800142a:	4b0e      	ldr	r3, [pc, #56]	; (8001464 <MX_RTC_Init+0x44>)
 800142c:	2200      	movs	r2, #0
 800142e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001430:	4b0c      	ldr	r3, [pc, #48]	; (8001464 <MX_RTC_Init+0x44>)
 8001432:	227f      	movs	r2, #127	; 0x7f
 8001434:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001436:	4b0b      	ldr	r3, [pc, #44]	; (8001464 <MX_RTC_Init+0x44>)
 8001438:	22ff      	movs	r2, #255	; 0xff
 800143a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800143c:	4b09      	ldr	r3, [pc, #36]	; (8001464 <MX_RTC_Init+0x44>)
 800143e:	2200      	movs	r2, #0
 8001440:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001442:	4b08      	ldr	r3, [pc, #32]	; (8001464 <MX_RTC_Init+0x44>)
 8001444:	2200      	movs	r2, #0
 8001446:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001448:	4b06      	ldr	r3, [pc, #24]	; (8001464 <MX_RTC_Init+0x44>)
 800144a:	2200      	movs	r2, #0
 800144c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800144e:	4805      	ldr	r0, [pc, #20]	; (8001464 <MX_RTC_Init+0x44>)
 8001450:	f002 f806 	bl	8003460 <HAL_RTC_Init>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 800145a:	f000 f891 	bl	8001580 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800145e:	bf00      	nop
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	2000094c 	.word	0x2000094c
 8001468:	40002800 	.word	0x40002800

0800146c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b084      	sub	sp, #16
 8001470:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001472:	1d3b      	adds	r3, r7, #4
 8001474:	2200      	movs	r2, #0
 8001476:	601a      	str	r2, [r3, #0]
 8001478:	605a      	str	r2, [r3, #4]
 800147a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800147c:	4b14      	ldr	r3, [pc, #80]	; (80014d0 <MX_TIM6_Init+0x64>)
 800147e:	4a15      	ldr	r2, [pc, #84]	; (80014d4 <MX_TIM6_Init+0x68>)
 8001480:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 216-1;
 8001482:	4b13      	ldr	r3, [pc, #76]	; (80014d0 <MX_TIM6_Init+0x64>)
 8001484:	22d7      	movs	r2, #215	; 0xd7
 8001486:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001488:	4b11      	ldr	r3, [pc, #68]	; (80014d0 <MX_TIM6_Init+0x64>)
 800148a:	2200      	movs	r2, #0
 800148c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 800148e:	4b10      	ldr	r3, [pc, #64]	; (80014d0 <MX_TIM6_Init+0x64>)
 8001490:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001494:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001496:	4b0e      	ldr	r3, [pc, #56]	; (80014d0 <MX_TIM6_Init+0x64>)
 8001498:	2200      	movs	r2, #0
 800149a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800149c:	480c      	ldr	r0, [pc, #48]	; (80014d0 <MX_TIM6_Init+0x64>)
 800149e:	f002 f8e7 	bl	8003670 <HAL_TIM_Base_Init>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d001      	beq.n	80014ac <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80014a8:	f000 f86a 	bl	8001580 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014ac:	2300      	movs	r3, #0
 80014ae:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014b0:	2300      	movs	r3, #0
 80014b2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80014b4:	1d3b      	adds	r3, r7, #4
 80014b6:	4619      	mov	r1, r3
 80014b8:	4805      	ldr	r0, [pc, #20]	; (80014d0 <MX_TIM6_Init+0x64>)
 80014ba:	f002 fa41 	bl	8003940 <HAL_TIMEx_MasterConfigSynchronization>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d001      	beq.n	80014c8 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80014c4:	f000 f85c 	bl	8001580 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80014c8:	bf00      	nop
 80014ca:	3710      	adds	r7, #16
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	2000096c 	.word	0x2000096c
 80014d4:	40001000 	.word	0x40001000

080014d8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80014dc:	4b14      	ldr	r3, [pc, #80]	; (8001530 <MX_USART2_UART_Init+0x58>)
 80014de:	4a15      	ldr	r2, [pc, #84]	; (8001534 <MX_USART2_UART_Init+0x5c>)
 80014e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80014e2:	4b13      	ldr	r3, [pc, #76]	; (8001530 <MX_USART2_UART_Init+0x58>)
 80014e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80014ea:	4b11      	ldr	r3, [pc, #68]	; (8001530 <MX_USART2_UART_Init+0x58>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80014f0:	4b0f      	ldr	r3, [pc, #60]	; (8001530 <MX_USART2_UART_Init+0x58>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80014f6:	4b0e      	ldr	r3, [pc, #56]	; (8001530 <MX_USART2_UART_Init+0x58>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80014fc:	4b0c      	ldr	r3, [pc, #48]	; (8001530 <MX_USART2_UART_Init+0x58>)
 80014fe:	220c      	movs	r2, #12
 8001500:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001502:	4b0b      	ldr	r3, [pc, #44]	; (8001530 <MX_USART2_UART_Init+0x58>)
 8001504:	2200      	movs	r2, #0
 8001506:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001508:	4b09      	ldr	r3, [pc, #36]	; (8001530 <MX_USART2_UART_Init+0x58>)
 800150a:	2200      	movs	r2, #0
 800150c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800150e:	4b08      	ldr	r3, [pc, #32]	; (8001530 <MX_USART2_UART_Init+0x58>)
 8001510:	2200      	movs	r2, #0
 8001512:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001514:	4b06      	ldr	r3, [pc, #24]	; (8001530 <MX_USART2_UART_Init+0x58>)
 8001516:	2200      	movs	r2, #0
 8001518:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800151a:	4805      	ldr	r0, [pc, #20]	; (8001530 <MX_USART2_UART_Init+0x58>)
 800151c:	f002 fa9e 	bl	8003a5c <HAL_UART_Init>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001526:	f000 f82b 	bl	8001580 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800152a:	bf00      	nop
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	200009b8 	.word	0x200009b8
 8001534:	40004400 	.word	0x40004400

08001538 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001538:	b480      	push	{r7}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800153e:	4b0f      	ldr	r3, [pc, #60]	; (800157c <MX_GPIO_Init+0x44>)
 8001540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001542:	4a0e      	ldr	r2, [pc, #56]	; (800157c <MX_GPIO_Init+0x44>)
 8001544:	f043 0308 	orr.w	r3, r3, #8
 8001548:	6313      	str	r3, [r2, #48]	; 0x30
 800154a:	4b0c      	ldr	r3, [pc, #48]	; (800157c <MX_GPIO_Init+0x44>)
 800154c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154e:	f003 0308 	and.w	r3, r3, #8
 8001552:	607b      	str	r3, [r7, #4]
 8001554:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001556:	4b09      	ldr	r3, [pc, #36]	; (800157c <MX_GPIO_Init+0x44>)
 8001558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155a:	4a08      	ldr	r2, [pc, #32]	; (800157c <MX_GPIO_Init+0x44>)
 800155c:	f043 0304 	orr.w	r3, r3, #4
 8001560:	6313      	str	r3, [r2, #48]	; 0x30
 8001562:	4b06      	ldr	r3, [pc, #24]	; (800157c <MX_GPIO_Init+0x44>)
 8001564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001566:	f003 0304 	and.w	r3, r3, #4
 800156a:	603b      	str	r3, [r7, #0]
 800156c:	683b      	ldr	r3, [r7, #0]

}
 800156e:	bf00      	nop
 8001570:	370c      	adds	r7, #12
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr
 800157a:	bf00      	nop
 800157c:	40023800 	.word	0x40023800

08001580 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001584:	b672      	cpsid	i
}
 8001586:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001588:	e7fe      	b.n	8001588 <Error_Handler+0x8>
	...

0800158c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800158c:	b480      	push	{r7}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001592:	4b0f      	ldr	r3, [pc, #60]	; (80015d0 <HAL_MspInit+0x44>)
 8001594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001596:	4a0e      	ldr	r2, [pc, #56]	; (80015d0 <HAL_MspInit+0x44>)
 8001598:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800159c:	6413      	str	r3, [r2, #64]	; 0x40
 800159e:	4b0c      	ldr	r3, [pc, #48]	; (80015d0 <HAL_MspInit+0x44>)
 80015a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015a6:	607b      	str	r3, [r7, #4]
 80015a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015aa:	4b09      	ldr	r3, [pc, #36]	; (80015d0 <HAL_MspInit+0x44>)
 80015ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ae:	4a08      	ldr	r2, [pc, #32]	; (80015d0 <HAL_MspInit+0x44>)
 80015b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015b4:	6453      	str	r3, [r2, #68]	; 0x44
 80015b6:	4b06      	ldr	r3, [pc, #24]	; (80015d0 <HAL_MspInit+0x44>)
 80015b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015be:	603b      	str	r3, [r7, #0]
 80015c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015c2:	bf00      	nop
 80015c4:	370c      	adds	r7, #12
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr
 80015ce:	bf00      	nop
 80015d0:	40023800 	.word	0x40023800

080015d4 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b085      	sub	sp, #20
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a0a      	ldr	r2, [pc, #40]	; (800160c <HAL_CRC_MspInit+0x38>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d10b      	bne.n	80015fe <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80015e6:	4b0a      	ldr	r3, [pc, #40]	; (8001610 <HAL_CRC_MspInit+0x3c>)
 80015e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ea:	4a09      	ldr	r2, [pc, #36]	; (8001610 <HAL_CRC_MspInit+0x3c>)
 80015ec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80015f0:	6313      	str	r3, [r2, #48]	; 0x30
 80015f2:	4b07      	ldr	r3, [pc, #28]	; (8001610 <HAL_CRC_MspInit+0x3c>)
 80015f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015fa:	60fb      	str	r3, [r7, #12]
 80015fc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80015fe:	bf00      	nop
 8001600:	3714      	adds	r7, #20
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr
 800160a:	bf00      	nop
 800160c:	40023000 	.word	0x40023000
 8001610:	40023800 	.word	0x40023800

08001614 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b0a4      	sub	sp, #144	; 0x90
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800161c:	f107 030c 	add.w	r3, r7, #12
 8001620:	2284      	movs	r2, #132	; 0x84
 8001622:	2100      	movs	r1, #0
 8001624:	4618      	mov	r0, r3
 8001626:	f005 f9a1 	bl	800696c <memset>
  if(hrtc->Instance==RTC)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4a0e      	ldr	r2, [pc, #56]	; (8001668 <HAL_RTC_MspInit+0x54>)
 8001630:	4293      	cmp	r3, r2
 8001632:	d114      	bne.n	800165e <HAL_RTC_MspInit+0x4a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001634:	2320      	movs	r3, #32
 8001636:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001638:	f44f 7380 	mov.w	r3, #256	; 0x100
 800163c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800163e:	f107 030c 	add.w	r3, r7, #12
 8001642:	4618      	mov	r0, r3
 8001644:	f001 fb1c 	bl	8002c80 <HAL_RCCEx_PeriphCLKConfig>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d001      	beq.n	8001652 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 800164e:	f7ff ff97 	bl	8001580 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001652:	4b06      	ldr	r3, [pc, #24]	; (800166c <HAL_RTC_MspInit+0x58>)
 8001654:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001656:	4a05      	ldr	r2, [pc, #20]	; (800166c <HAL_RTC_MspInit+0x58>)
 8001658:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800165c:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800165e:	bf00      	nop
 8001660:	3790      	adds	r7, #144	; 0x90
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	40002800 	.word	0x40002800
 800166c:	40023800 	.word	0x40023800

08001670 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001670:	b480      	push	{r7}
 8001672:	b085      	sub	sp, #20
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a0a      	ldr	r2, [pc, #40]	; (80016a8 <HAL_TIM_Base_MspInit+0x38>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d10b      	bne.n	800169a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001682:	4b0a      	ldr	r3, [pc, #40]	; (80016ac <HAL_TIM_Base_MspInit+0x3c>)
 8001684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001686:	4a09      	ldr	r2, [pc, #36]	; (80016ac <HAL_TIM_Base_MspInit+0x3c>)
 8001688:	f043 0310 	orr.w	r3, r3, #16
 800168c:	6413      	str	r3, [r2, #64]	; 0x40
 800168e:	4b07      	ldr	r3, [pc, #28]	; (80016ac <HAL_TIM_Base_MspInit+0x3c>)
 8001690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001692:	f003 0310 	and.w	r3, r3, #16
 8001696:	60fb      	str	r3, [r7, #12]
 8001698:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800169a:	bf00      	nop
 800169c:	3714      	adds	r7, #20
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr
 80016a6:	bf00      	nop
 80016a8:	40001000 	.word	0x40001000
 80016ac:	40023800 	.word	0x40023800

080016b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b0aa      	sub	sp, #168	; 0xa8
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80016bc:	2200      	movs	r2, #0
 80016be:	601a      	str	r2, [r3, #0]
 80016c0:	605a      	str	r2, [r3, #4]
 80016c2:	609a      	str	r2, [r3, #8]
 80016c4:	60da      	str	r2, [r3, #12]
 80016c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016c8:	f107 0310 	add.w	r3, r7, #16
 80016cc:	2284      	movs	r2, #132	; 0x84
 80016ce:	2100      	movs	r1, #0
 80016d0:	4618      	mov	r0, r3
 80016d2:	f005 f94b 	bl	800696c <memset>
  if(huart->Instance==USART2)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4a21      	ldr	r2, [pc, #132]	; (8001760 <HAL_UART_MspInit+0xb0>)
 80016dc:	4293      	cmp	r3, r2
 80016de:	d13a      	bne.n	8001756 <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80016e0:	2380      	movs	r3, #128	; 0x80
 80016e2:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80016e4:	2300      	movs	r3, #0
 80016e6:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016e8:	f107 0310 	add.w	r3, r7, #16
 80016ec:	4618      	mov	r0, r3
 80016ee:	f001 fac7 	bl	8002c80 <HAL_RCCEx_PeriphCLKConfig>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d001      	beq.n	80016fc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80016f8:	f7ff ff42 	bl	8001580 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80016fc:	4b19      	ldr	r3, [pc, #100]	; (8001764 <HAL_UART_MspInit+0xb4>)
 80016fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001700:	4a18      	ldr	r2, [pc, #96]	; (8001764 <HAL_UART_MspInit+0xb4>)
 8001702:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001706:	6413      	str	r3, [r2, #64]	; 0x40
 8001708:	4b16      	ldr	r3, [pc, #88]	; (8001764 <HAL_UART_MspInit+0xb4>)
 800170a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001710:	60fb      	str	r3, [r7, #12]
 8001712:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001714:	4b13      	ldr	r3, [pc, #76]	; (8001764 <HAL_UART_MspInit+0xb4>)
 8001716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001718:	4a12      	ldr	r2, [pc, #72]	; (8001764 <HAL_UART_MspInit+0xb4>)
 800171a:	f043 0308 	orr.w	r3, r3, #8
 800171e:	6313      	str	r3, [r2, #48]	; 0x30
 8001720:	4b10      	ldr	r3, [pc, #64]	; (8001764 <HAL_UART_MspInit+0xb4>)
 8001722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001724:	f003 0308 	and.w	r3, r3, #8
 8001728:	60bb      	str	r3, [r7, #8]
 800172a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PD6     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_5;
 800172c:	2360      	movs	r3, #96	; 0x60
 800172e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001732:	2302      	movs	r3, #2
 8001734:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001738:	2300      	movs	r3, #0
 800173a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800173e:	2303      	movs	r3, #3
 8001740:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001744:	2307      	movs	r3, #7
 8001746:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800174a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800174e:	4619      	mov	r1, r3
 8001750:	4805      	ldr	r0, [pc, #20]	; (8001768 <HAL_UART_MspInit+0xb8>)
 8001752:	f000 fbbf 	bl	8001ed4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001756:	bf00      	nop
 8001758:	37a8      	adds	r7, #168	; 0xa8
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	40004400 	.word	0x40004400
 8001764:	40023800 	.word	0x40023800
 8001768:	40020c00 	.word	0x40020c00

0800176c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001770:	e7fe      	b.n	8001770 <NMI_Handler+0x4>

08001772 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001772:	b480      	push	{r7}
 8001774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001776:	e7fe      	b.n	8001776 <HardFault_Handler+0x4>

08001778 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800177c:	e7fe      	b.n	800177c <MemManage_Handler+0x4>

0800177e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800177e:	b480      	push	{r7}
 8001780:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001782:	e7fe      	b.n	8001782 <BusFault_Handler+0x4>

08001784 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001788:	e7fe      	b.n	8001788 <UsageFault_Handler+0x4>

0800178a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800178a:	b480      	push	{r7}
 800178c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800178e:	bf00      	nop
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr

08001798 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800179c:	bf00      	nop
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr

080017a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017a6:	b480      	push	{r7}
 80017a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017aa:	bf00      	nop
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr

080017b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017b8:	f000 f8ba 	bl	8001930 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017bc:	bf00      	nop
 80017be:	bd80      	pop	{r7, pc}

080017c0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80017c4:	4802      	ldr	r0, [pc, #8]	; (80017d0 <USART2_IRQHandler+0x10>)
 80017c6:	f002 fa1b 	bl	8003c00 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80017ca:	bf00      	nop
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	200009b8 	.word	0x200009b8

080017d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b086      	sub	sp, #24
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017dc:	4a14      	ldr	r2, [pc, #80]	; (8001830 <_sbrk+0x5c>)
 80017de:	4b15      	ldr	r3, [pc, #84]	; (8001834 <_sbrk+0x60>)
 80017e0:	1ad3      	subs	r3, r2, r3
 80017e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017e8:	4b13      	ldr	r3, [pc, #76]	; (8001838 <_sbrk+0x64>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d102      	bne.n	80017f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017f0:	4b11      	ldr	r3, [pc, #68]	; (8001838 <_sbrk+0x64>)
 80017f2:	4a12      	ldr	r2, [pc, #72]	; (800183c <_sbrk+0x68>)
 80017f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017f6:	4b10      	ldr	r3, [pc, #64]	; (8001838 <_sbrk+0x64>)
 80017f8:	681a      	ldr	r2, [r3, #0]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	4413      	add	r3, r2
 80017fe:	693a      	ldr	r2, [r7, #16]
 8001800:	429a      	cmp	r2, r3
 8001802:	d207      	bcs.n	8001814 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001804:	f005 f872 	bl	80068ec <__errno>
 8001808:	4603      	mov	r3, r0
 800180a:	220c      	movs	r2, #12
 800180c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800180e:	f04f 33ff 	mov.w	r3, #4294967295
 8001812:	e009      	b.n	8001828 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001814:	4b08      	ldr	r3, [pc, #32]	; (8001838 <_sbrk+0x64>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800181a:	4b07      	ldr	r3, [pc, #28]	; (8001838 <_sbrk+0x64>)
 800181c:	681a      	ldr	r2, [r3, #0]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	4413      	add	r3, r2
 8001822:	4a05      	ldr	r2, [pc, #20]	; (8001838 <_sbrk+0x64>)
 8001824:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001826:	68fb      	ldr	r3, [r7, #12]
}
 8001828:	4618      	mov	r0, r3
 800182a:	3718      	adds	r7, #24
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	20050000 	.word	0x20050000
 8001834:	00000800 	.word	0x00000800
 8001838:	20000a40 	.word	0x20000a40
 800183c:	20000ad8 	.word	0x20000ad8

08001840 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001844:	4b06      	ldr	r3, [pc, #24]	; (8001860 <SystemInit+0x20>)
 8001846:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800184a:	4a05      	ldr	r2, [pc, #20]	; (8001860 <SystemInit+0x20>)
 800184c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001850:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001854:	bf00      	nop
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop
 8001860:	e000ed00 	.word	0xe000ed00

08001864 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001864:	f8df d034 	ldr.w	sp, [pc, #52]	; 800189c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001868:	480d      	ldr	r0, [pc, #52]	; (80018a0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800186a:	490e      	ldr	r1, [pc, #56]	; (80018a4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800186c:	4a0e      	ldr	r2, [pc, #56]	; (80018a8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800186e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001870:	e002      	b.n	8001878 <LoopCopyDataInit>

08001872 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001872:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001874:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001876:	3304      	adds	r3, #4

08001878 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001878:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800187a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800187c:	d3f9      	bcc.n	8001872 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800187e:	4a0b      	ldr	r2, [pc, #44]	; (80018ac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001880:	4c0b      	ldr	r4, [pc, #44]	; (80018b0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001882:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001884:	e001      	b.n	800188a <LoopFillZerobss>

08001886 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001886:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001888:	3204      	adds	r2, #4

0800188a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800188a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800188c:	d3fb      	bcc.n	8001886 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800188e:	f7ff ffd7 	bl	8001840 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001892:	f005 f831 	bl	80068f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001896:	f7ff fbe7 	bl	8001068 <main>
  bx  lr    
 800189a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800189c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80018a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018a4:	2000090c 	.word	0x2000090c
  ldr r2, =_sidata
 80018a8:	0800a884 	.word	0x0800a884
  ldr r2, =_sbss
 80018ac:	2000090c 	.word	0x2000090c
  ldr r4, =_ebss
 80018b0:	20000ad8 	.word	0x20000ad8

080018b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018b4:	e7fe      	b.n	80018b4 <ADC_IRQHandler>

080018b6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018b6:	b580      	push	{r7, lr}
 80018b8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018ba:	2003      	movs	r0, #3
 80018bc:	f000 f94c 	bl	8001b58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018c0:	200f      	movs	r0, #15
 80018c2:	f000 f805 	bl	80018d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018c6:	f7ff fe61 	bl	800158c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018ca:	2300      	movs	r3, #0
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	bd80      	pop	{r7, pc}

080018d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018d8:	4b12      	ldr	r3, [pc, #72]	; (8001924 <HAL_InitTick+0x54>)
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	4b12      	ldr	r3, [pc, #72]	; (8001928 <HAL_InitTick+0x58>)
 80018de:	781b      	ldrb	r3, [r3, #0]
 80018e0:	4619      	mov	r1, r3
 80018e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80018ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80018ee:	4618      	mov	r0, r3
 80018f0:	f000 f967 	bl	8001bc2 <HAL_SYSTICK_Config>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d001      	beq.n	80018fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
 80018fc:	e00e      	b.n	800191c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2b0f      	cmp	r3, #15
 8001902:	d80a      	bhi.n	800191a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001904:	2200      	movs	r2, #0
 8001906:	6879      	ldr	r1, [r7, #4]
 8001908:	f04f 30ff 	mov.w	r0, #4294967295
 800190c:	f000 f92f 	bl	8001b6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001910:	4a06      	ldr	r2, [pc, #24]	; (800192c <HAL_InitTick+0x5c>)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001916:	2300      	movs	r3, #0
 8001918:	e000      	b.n	800191c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800191a:	2301      	movs	r3, #1
}
 800191c:	4618      	mov	r0, r3
 800191e:	3708      	adds	r7, #8
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}
 8001924:	2000001c 	.word	0x2000001c
 8001928:	20000024 	.word	0x20000024
 800192c:	20000020 	.word	0x20000020

08001930 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001934:	4b06      	ldr	r3, [pc, #24]	; (8001950 <HAL_IncTick+0x20>)
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	461a      	mov	r2, r3
 800193a:	4b06      	ldr	r3, [pc, #24]	; (8001954 <HAL_IncTick+0x24>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4413      	add	r3, r2
 8001940:	4a04      	ldr	r2, [pc, #16]	; (8001954 <HAL_IncTick+0x24>)
 8001942:	6013      	str	r3, [r2, #0]
}
 8001944:	bf00      	nop
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr
 800194e:	bf00      	nop
 8001950:	20000024 	.word	0x20000024
 8001954:	20000a44 	.word	0x20000a44

08001958 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  return uwTick;
 800195c:	4b03      	ldr	r3, [pc, #12]	; (800196c <HAL_GetTick+0x14>)
 800195e:	681b      	ldr	r3, [r3, #0]
}
 8001960:	4618      	mov	r0, r3
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr
 800196a:	bf00      	nop
 800196c:	20000a44 	.word	0x20000a44

08001970 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b084      	sub	sp, #16
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001978:	f7ff ffee 	bl	8001958 <HAL_GetTick>
 800197c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001988:	d005      	beq.n	8001996 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800198a:	4b0a      	ldr	r3, [pc, #40]	; (80019b4 <HAL_Delay+0x44>)
 800198c:	781b      	ldrb	r3, [r3, #0]
 800198e:	461a      	mov	r2, r3
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	4413      	add	r3, r2
 8001994:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001996:	bf00      	nop
 8001998:	f7ff ffde 	bl	8001958 <HAL_GetTick>
 800199c:	4602      	mov	r2, r0
 800199e:	68bb      	ldr	r3, [r7, #8]
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	68fa      	ldr	r2, [r7, #12]
 80019a4:	429a      	cmp	r2, r3
 80019a6:	d8f7      	bhi.n	8001998 <HAL_Delay+0x28>
  {
  }
}
 80019a8:	bf00      	nop
 80019aa:	bf00      	nop
 80019ac:	3710      	adds	r7, #16
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	20000024 	.word	0x20000024

080019b8 <__NVIC_SetPriorityGrouping>:
{
 80019b8:	b480      	push	{r7}
 80019ba:	b085      	sub	sp, #20
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	f003 0307 	and.w	r3, r3, #7
 80019c6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019c8:	4b0b      	ldr	r3, [pc, #44]	; (80019f8 <__NVIC_SetPriorityGrouping+0x40>)
 80019ca:	68db      	ldr	r3, [r3, #12]
 80019cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019ce:	68ba      	ldr	r2, [r7, #8]
 80019d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019d4:	4013      	ands	r3, r2
 80019d6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80019e0:	4b06      	ldr	r3, [pc, #24]	; (80019fc <__NVIC_SetPriorityGrouping+0x44>)
 80019e2:	4313      	orrs	r3, r2
 80019e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019e6:	4a04      	ldr	r2, [pc, #16]	; (80019f8 <__NVIC_SetPriorityGrouping+0x40>)
 80019e8:	68bb      	ldr	r3, [r7, #8]
 80019ea:	60d3      	str	r3, [r2, #12]
}
 80019ec:	bf00      	nop
 80019ee:	3714      	adds	r7, #20
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr
 80019f8:	e000ed00 	.word	0xe000ed00
 80019fc:	05fa0000 	.word	0x05fa0000

08001a00 <__NVIC_GetPriorityGrouping>:
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a04:	4b04      	ldr	r3, [pc, #16]	; (8001a18 <__NVIC_GetPriorityGrouping+0x18>)
 8001a06:	68db      	ldr	r3, [r3, #12]
 8001a08:	0a1b      	lsrs	r3, r3, #8
 8001a0a:	f003 0307 	and.w	r3, r3, #7
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr
 8001a18:	e000ed00 	.word	0xe000ed00

08001a1c <__NVIC_EnableIRQ>:
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b083      	sub	sp, #12
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	4603      	mov	r3, r0
 8001a24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	db0b      	blt.n	8001a46 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a2e:	79fb      	ldrb	r3, [r7, #7]
 8001a30:	f003 021f 	and.w	r2, r3, #31
 8001a34:	4907      	ldr	r1, [pc, #28]	; (8001a54 <__NVIC_EnableIRQ+0x38>)
 8001a36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a3a:	095b      	lsrs	r3, r3, #5
 8001a3c:	2001      	movs	r0, #1
 8001a3e:	fa00 f202 	lsl.w	r2, r0, r2
 8001a42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001a46:	bf00      	nop
 8001a48:	370c      	adds	r7, #12
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr
 8001a52:	bf00      	nop
 8001a54:	e000e100 	.word	0xe000e100

08001a58 <__NVIC_SetPriority>:
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b083      	sub	sp, #12
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	4603      	mov	r3, r0
 8001a60:	6039      	str	r1, [r7, #0]
 8001a62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	db0a      	blt.n	8001a82 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	b2da      	uxtb	r2, r3
 8001a70:	490c      	ldr	r1, [pc, #48]	; (8001aa4 <__NVIC_SetPriority+0x4c>)
 8001a72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a76:	0112      	lsls	r2, r2, #4
 8001a78:	b2d2      	uxtb	r2, r2
 8001a7a:	440b      	add	r3, r1
 8001a7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001a80:	e00a      	b.n	8001a98 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	b2da      	uxtb	r2, r3
 8001a86:	4908      	ldr	r1, [pc, #32]	; (8001aa8 <__NVIC_SetPriority+0x50>)
 8001a88:	79fb      	ldrb	r3, [r7, #7]
 8001a8a:	f003 030f 	and.w	r3, r3, #15
 8001a8e:	3b04      	subs	r3, #4
 8001a90:	0112      	lsls	r2, r2, #4
 8001a92:	b2d2      	uxtb	r2, r2
 8001a94:	440b      	add	r3, r1
 8001a96:	761a      	strb	r2, [r3, #24]
}
 8001a98:	bf00      	nop
 8001a9a:	370c      	adds	r7, #12
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr
 8001aa4:	e000e100 	.word	0xe000e100
 8001aa8:	e000ed00 	.word	0xe000ed00

08001aac <NVIC_EncodePriority>:
{
 8001aac:	b480      	push	{r7}
 8001aae:	b089      	sub	sp, #36	; 0x24
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	60f8      	str	r0, [r7, #12]
 8001ab4:	60b9      	str	r1, [r7, #8]
 8001ab6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	f003 0307 	and.w	r3, r3, #7
 8001abe:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ac0:	69fb      	ldr	r3, [r7, #28]
 8001ac2:	f1c3 0307 	rsb	r3, r3, #7
 8001ac6:	2b04      	cmp	r3, #4
 8001ac8:	bf28      	it	cs
 8001aca:	2304      	movcs	r3, #4
 8001acc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ace:	69fb      	ldr	r3, [r7, #28]
 8001ad0:	3304      	adds	r3, #4
 8001ad2:	2b06      	cmp	r3, #6
 8001ad4:	d902      	bls.n	8001adc <NVIC_EncodePriority+0x30>
 8001ad6:	69fb      	ldr	r3, [r7, #28]
 8001ad8:	3b03      	subs	r3, #3
 8001ada:	e000      	b.n	8001ade <NVIC_EncodePriority+0x32>
 8001adc:	2300      	movs	r3, #0
 8001ade:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ae0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ae4:	69bb      	ldr	r3, [r7, #24]
 8001ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aea:	43da      	mvns	r2, r3
 8001aec:	68bb      	ldr	r3, [r7, #8]
 8001aee:	401a      	ands	r2, r3
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001af4:	f04f 31ff 	mov.w	r1, #4294967295
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	fa01 f303 	lsl.w	r3, r1, r3
 8001afe:	43d9      	mvns	r1, r3
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b04:	4313      	orrs	r3, r2
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	3724      	adds	r7, #36	; 0x24
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr
	...

08001b14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b082      	sub	sp, #8
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	3b01      	subs	r3, #1
 8001b20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b24:	d301      	bcc.n	8001b2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b26:	2301      	movs	r3, #1
 8001b28:	e00f      	b.n	8001b4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b2a:	4a0a      	ldr	r2, [pc, #40]	; (8001b54 <SysTick_Config+0x40>)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	3b01      	subs	r3, #1
 8001b30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b32:	210f      	movs	r1, #15
 8001b34:	f04f 30ff 	mov.w	r0, #4294967295
 8001b38:	f7ff ff8e 	bl	8001a58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b3c:	4b05      	ldr	r3, [pc, #20]	; (8001b54 <SysTick_Config+0x40>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b42:	4b04      	ldr	r3, [pc, #16]	; (8001b54 <SysTick_Config+0x40>)
 8001b44:	2207      	movs	r2, #7
 8001b46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b48:	2300      	movs	r3, #0
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3708      	adds	r7, #8
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	e000e010 	.word	0xe000e010

08001b58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b60:	6878      	ldr	r0, [r7, #4]
 8001b62:	f7ff ff29 	bl	80019b8 <__NVIC_SetPriorityGrouping>
}
 8001b66:	bf00      	nop
 8001b68:	3708      	adds	r7, #8
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}

08001b6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b6e:	b580      	push	{r7, lr}
 8001b70:	b086      	sub	sp, #24
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	4603      	mov	r3, r0
 8001b76:	60b9      	str	r1, [r7, #8]
 8001b78:	607a      	str	r2, [r7, #4]
 8001b7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b80:	f7ff ff3e 	bl	8001a00 <__NVIC_GetPriorityGrouping>
 8001b84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b86:	687a      	ldr	r2, [r7, #4]
 8001b88:	68b9      	ldr	r1, [r7, #8]
 8001b8a:	6978      	ldr	r0, [r7, #20]
 8001b8c:	f7ff ff8e 	bl	8001aac <NVIC_EncodePriority>
 8001b90:	4602      	mov	r2, r0
 8001b92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b96:	4611      	mov	r1, r2
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f7ff ff5d 	bl	8001a58 <__NVIC_SetPriority>
}
 8001b9e:	bf00      	nop
 8001ba0:	3718      	adds	r7, #24
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}

08001ba6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ba6:	b580      	push	{r7, lr}
 8001ba8:	b082      	sub	sp, #8
 8001baa:	af00      	add	r7, sp, #0
 8001bac:	4603      	mov	r3, r0
 8001bae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f7ff ff31 	bl	8001a1c <__NVIC_EnableIRQ>
}
 8001bba:	bf00      	nop
 8001bbc:	3708      	adds	r7, #8
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}

08001bc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bc2:	b580      	push	{r7, lr}
 8001bc4:	b082      	sub	sp, #8
 8001bc6:	af00      	add	r7, sp, #0
 8001bc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bca:	6878      	ldr	r0, [r7, #4]
 8001bcc:	f7ff ffa2 	bl	8001b14 <SysTick_Config>
 8001bd0:	4603      	mov	r3, r0
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	3708      	adds	r7, #8
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
	...

08001bdc <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b082      	sub	sp, #8
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d101      	bne.n	8001bee <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	e054      	b.n	8001c98 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	7f5b      	ldrb	r3, [r3, #29]
 8001bf2:	b2db      	uxtb	r3, r3
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d105      	bne.n	8001c04 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001bfe:	6878      	ldr	r0, [r7, #4]
 8001c00:	f7ff fce8 	bl	80015d4 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2202      	movs	r2, #2
 8001c08:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	791b      	ldrb	r3, [r3, #4]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d10c      	bne.n	8001c2c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a22      	ldr	r2, [pc, #136]	; (8001ca0 <HAL_CRC_Init+0xc4>)
 8001c18:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	689a      	ldr	r2, [r3, #8]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f022 0218 	bic.w	r2, r2, #24
 8001c28:	609a      	str	r2, [r3, #8]
 8001c2a:	e00c      	b.n	8001c46 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6899      	ldr	r1, [r3, #8]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	68db      	ldr	r3, [r3, #12]
 8001c34:	461a      	mov	r2, r3
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f000 f834 	bl	8001ca4 <HAL_CRCEx_Polynomial_Set>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d001      	beq.n	8001c46 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
 8001c44:	e028      	b.n	8001c98 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	795b      	ldrb	r3, [r3, #5]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d105      	bne.n	8001c5a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f04f 32ff 	mov.w	r2, #4294967295
 8001c56:	611a      	str	r2, [r3, #16]
 8001c58:	e004      	b.n	8001c64 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	687a      	ldr	r2, [r7, #4]
 8001c60:	6912      	ldr	r2, [r2, #16]
 8001c62:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	695a      	ldr	r2, [r3, #20]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	430a      	orrs	r2, r1
 8001c78:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	699a      	ldr	r2, [r3, #24]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	430a      	orrs	r2, r1
 8001c8e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2201      	movs	r2, #1
 8001c94:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8001c96:	2300      	movs	r3, #0
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	3708      	adds	r7, #8
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	04c11db7 	.word	0x04c11db7

08001ca4 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b087      	sub	sp, #28
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	60f8      	str	r0, [r7, #12]
 8001cac:	60b9      	str	r1, [r7, #8]
 8001cae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8001cb4:	231f      	movs	r3, #31
 8001cb6:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8001cb8:	bf00      	nop
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	1e5a      	subs	r2, r3, #1
 8001cbe:	613a      	str	r2, [r7, #16]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d009      	beq.n	8001cd8 <HAL_CRCEx_Polynomial_Set+0x34>
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	f003 031f 	and.w	r3, r3, #31
 8001cca:	68ba      	ldr	r2, [r7, #8]
 8001ccc:	fa22 f303 	lsr.w	r3, r2, r3
 8001cd0:	f003 0301 	and.w	r3, r3, #1
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d0f0      	beq.n	8001cba <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2b18      	cmp	r3, #24
 8001cdc:	d846      	bhi.n	8001d6c <HAL_CRCEx_Polynomial_Set+0xc8>
 8001cde:	a201      	add	r2, pc, #4	; (adr r2, 8001ce4 <HAL_CRCEx_Polynomial_Set+0x40>)
 8001ce0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ce4:	08001d73 	.word	0x08001d73
 8001ce8:	08001d6d 	.word	0x08001d6d
 8001cec:	08001d6d 	.word	0x08001d6d
 8001cf0:	08001d6d 	.word	0x08001d6d
 8001cf4:	08001d6d 	.word	0x08001d6d
 8001cf8:	08001d6d 	.word	0x08001d6d
 8001cfc:	08001d6d 	.word	0x08001d6d
 8001d00:	08001d6d 	.word	0x08001d6d
 8001d04:	08001d61 	.word	0x08001d61
 8001d08:	08001d6d 	.word	0x08001d6d
 8001d0c:	08001d6d 	.word	0x08001d6d
 8001d10:	08001d6d 	.word	0x08001d6d
 8001d14:	08001d6d 	.word	0x08001d6d
 8001d18:	08001d6d 	.word	0x08001d6d
 8001d1c:	08001d6d 	.word	0x08001d6d
 8001d20:	08001d6d 	.word	0x08001d6d
 8001d24:	08001d55 	.word	0x08001d55
 8001d28:	08001d6d 	.word	0x08001d6d
 8001d2c:	08001d6d 	.word	0x08001d6d
 8001d30:	08001d6d 	.word	0x08001d6d
 8001d34:	08001d6d 	.word	0x08001d6d
 8001d38:	08001d6d 	.word	0x08001d6d
 8001d3c:	08001d6d 	.word	0x08001d6d
 8001d40:	08001d6d 	.word	0x08001d6d
 8001d44:	08001d49 	.word	0x08001d49
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	2b06      	cmp	r3, #6
 8001d4c:	d913      	bls.n	8001d76 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001d52:	e010      	b.n	8001d76 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	2b07      	cmp	r3, #7
 8001d58:	d90f      	bls.n	8001d7a <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001d5e:	e00c      	b.n	8001d7a <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	2b0f      	cmp	r3, #15
 8001d64:	d90b      	bls.n	8001d7e <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
 8001d68:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001d6a:	e008      	b.n	8001d7e <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	75fb      	strb	r3, [r7, #23]
      break;
 8001d70:	e006      	b.n	8001d80 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001d72:	bf00      	nop
 8001d74:	e004      	b.n	8001d80 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001d76:	bf00      	nop
 8001d78:	e002      	b.n	8001d80 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001d7a:	bf00      	nop
 8001d7c:	e000      	b.n	8001d80 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001d7e:	bf00      	nop
  }
  if (status == HAL_OK)
 8001d80:	7dfb      	ldrb	r3, [r7, #23]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d10d      	bne.n	8001da2 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	68ba      	ldr	r2, [r7, #8]
 8001d8c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	f023 0118 	bic.w	r1, r3, #24
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	687a      	ldr	r2, [r7, #4]
 8001d9e:	430a      	orrs	r2, r1
 8001da0:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8001da2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	371c      	adds	r7, #28
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr

08001db0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b084      	sub	sp, #16
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dbc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001dbe:	f7ff fdcb 	bl	8001958 <HAL_GetTick>
 8001dc2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001dca:	b2db      	uxtb	r3, r3
 8001dcc:	2b02      	cmp	r3, #2
 8001dce:	d008      	beq.n	8001de2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2280      	movs	r2, #128	; 0x80
 8001dd4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2200      	movs	r2, #0
 8001dda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	e052      	b.n	8001e88 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	681a      	ldr	r2, [r3, #0]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f022 0216 	bic.w	r2, r2, #22
 8001df0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	695a      	ldr	r2, [r3, #20]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e00:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d103      	bne.n	8001e12 <HAL_DMA_Abort+0x62>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d007      	beq.n	8001e22 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f022 0208 	bic.w	r2, r2, #8
 8001e20:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f022 0201 	bic.w	r2, r2, #1
 8001e30:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e32:	e013      	b.n	8001e5c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e34:	f7ff fd90 	bl	8001958 <HAL_GetTick>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	68bb      	ldr	r3, [r7, #8]
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	2b05      	cmp	r3, #5
 8001e40:	d90c      	bls.n	8001e5c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2220      	movs	r2, #32
 8001e46:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2203      	movs	r2, #3
 8001e4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2200      	movs	r2, #0
 8001e54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8001e58:	2303      	movs	r3, #3
 8001e5a:	e015      	b.n	8001e88 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 0301 	and.w	r3, r3, #1
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d1e4      	bne.n	8001e34 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e6e:	223f      	movs	r2, #63	; 0x3f
 8001e70:	409a      	lsls	r2, r3
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2201      	movs	r2, #1
 8001e7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2200      	movs	r2, #0
 8001e82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8001e86:	2300      	movs	r3, #0
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	3710      	adds	r7, #16
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}

08001e90 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b083      	sub	sp, #12
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e9e:	b2db      	uxtb	r3, r3
 8001ea0:	2b02      	cmp	r3, #2
 8001ea2:	d004      	beq.n	8001eae <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2280      	movs	r2, #128	; 0x80
 8001ea8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e00c      	b.n	8001ec8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2205      	movs	r2, #5
 8001eb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f022 0201 	bic.w	r2, r2, #1
 8001ec4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001ec6:	2300      	movs	r3, #0
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	370c      	adds	r7, #12
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed2:	4770      	bx	lr

08001ed4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b089      	sub	sp, #36	; 0x24
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
 8001edc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001eea:	2300      	movs	r3, #0
 8001eec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001eee:	2300      	movs	r3, #0
 8001ef0:	61fb      	str	r3, [r7, #28]
 8001ef2:	e175      	b.n	80021e0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	69fb      	ldr	r3, [r7, #28]
 8001ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8001efc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	697a      	ldr	r2, [r7, #20]
 8001f04:	4013      	ands	r3, r2
 8001f06:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f08:	693a      	ldr	r2, [r7, #16]
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	f040 8164 	bne.w	80021da <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	f003 0303 	and.w	r3, r3, #3
 8001f1a:	2b01      	cmp	r3, #1
 8001f1c:	d005      	beq.n	8001f2a <HAL_GPIO_Init+0x56>
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	f003 0303 	and.w	r3, r3, #3
 8001f26:	2b02      	cmp	r3, #2
 8001f28:	d130      	bne.n	8001f8c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001f30:	69fb      	ldr	r3, [r7, #28]
 8001f32:	005b      	lsls	r3, r3, #1
 8001f34:	2203      	movs	r2, #3
 8001f36:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3a:	43db      	mvns	r3, r3
 8001f3c:	69ba      	ldr	r2, [r7, #24]
 8001f3e:	4013      	ands	r3, r2
 8001f40:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	68da      	ldr	r2, [r3, #12]
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	005b      	lsls	r3, r3, #1
 8001f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4e:	69ba      	ldr	r2, [r7, #24]
 8001f50:	4313      	orrs	r3, r2
 8001f52:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	69ba      	ldr	r2, [r7, #24]
 8001f58:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f60:	2201      	movs	r2, #1
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	fa02 f303 	lsl.w	r3, r2, r3
 8001f68:	43db      	mvns	r3, r3
 8001f6a:	69ba      	ldr	r2, [r7, #24]
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	091b      	lsrs	r3, r3, #4
 8001f76:	f003 0201 	and.w	r2, r3, #1
 8001f7a:	69fb      	ldr	r3, [r7, #28]
 8001f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f80:	69ba      	ldr	r2, [r7, #24]
 8001f82:	4313      	orrs	r3, r2
 8001f84:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	69ba      	ldr	r2, [r7, #24]
 8001f8a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	f003 0303 	and.w	r3, r3, #3
 8001f94:	2b03      	cmp	r3, #3
 8001f96:	d017      	beq.n	8001fc8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	68db      	ldr	r3, [r3, #12]
 8001f9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001f9e:	69fb      	ldr	r3, [r7, #28]
 8001fa0:	005b      	lsls	r3, r3, #1
 8001fa2:	2203      	movs	r2, #3
 8001fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa8:	43db      	mvns	r3, r3
 8001faa:	69ba      	ldr	r2, [r7, #24]
 8001fac:	4013      	ands	r3, r2
 8001fae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	689a      	ldr	r2, [r3, #8]
 8001fb4:	69fb      	ldr	r3, [r7, #28]
 8001fb6:	005b      	lsls	r3, r3, #1
 8001fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fbc:	69ba      	ldr	r2, [r7, #24]
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	69ba      	ldr	r2, [r7, #24]
 8001fc6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	f003 0303 	and.w	r3, r3, #3
 8001fd0:	2b02      	cmp	r3, #2
 8001fd2:	d123      	bne.n	800201c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001fd4:	69fb      	ldr	r3, [r7, #28]
 8001fd6:	08da      	lsrs	r2, r3, #3
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	3208      	adds	r2, #8
 8001fdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fe0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001fe2:	69fb      	ldr	r3, [r7, #28]
 8001fe4:	f003 0307 	and.w	r3, r3, #7
 8001fe8:	009b      	lsls	r3, r3, #2
 8001fea:	220f      	movs	r2, #15
 8001fec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff0:	43db      	mvns	r3, r3
 8001ff2:	69ba      	ldr	r2, [r7, #24]
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	691a      	ldr	r2, [r3, #16]
 8001ffc:	69fb      	ldr	r3, [r7, #28]
 8001ffe:	f003 0307 	and.w	r3, r3, #7
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	fa02 f303 	lsl.w	r3, r2, r3
 8002008:	69ba      	ldr	r2, [r7, #24]
 800200a:	4313      	orrs	r3, r2
 800200c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800200e:	69fb      	ldr	r3, [r7, #28]
 8002010:	08da      	lsrs	r2, r3, #3
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	3208      	adds	r2, #8
 8002016:	69b9      	ldr	r1, [r7, #24]
 8002018:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002022:	69fb      	ldr	r3, [r7, #28]
 8002024:	005b      	lsls	r3, r3, #1
 8002026:	2203      	movs	r2, #3
 8002028:	fa02 f303 	lsl.w	r3, r2, r3
 800202c:	43db      	mvns	r3, r3
 800202e:	69ba      	ldr	r2, [r7, #24]
 8002030:	4013      	ands	r3, r2
 8002032:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f003 0203 	and.w	r2, r3, #3
 800203c:	69fb      	ldr	r3, [r7, #28]
 800203e:	005b      	lsls	r3, r3, #1
 8002040:	fa02 f303 	lsl.w	r3, r2, r3
 8002044:	69ba      	ldr	r2, [r7, #24]
 8002046:	4313      	orrs	r3, r2
 8002048:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	69ba      	ldr	r2, [r7, #24]
 800204e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002058:	2b00      	cmp	r3, #0
 800205a:	f000 80be 	beq.w	80021da <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800205e:	4b66      	ldr	r3, [pc, #408]	; (80021f8 <HAL_GPIO_Init+0x324>)
 8002060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002062:	4a65      	ldr	r2, [pc, #404]	; (80021f8 <HAL_GPIO_Init+0x324>)
 8002064:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002068:	6453      	str	r3, [r2, #68]	; 0x44
 800206a:	4b63      	ldr	r3, [pc, #396]	; (80021f8 <HAL_GPIO_Init+0x324>)
 800206c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800206e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002072:	60fb      	str	r3, [r7, #12]
 8002074:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002076:	4a61      	ldr	r2, [pc, #388]	; (80021fc <HAL_GPIO_Init+0x328>)
 8002078:	69fb      	ldr	r3, [r7, #28]
 800207a:	089b      	lsrs	r3, r3, #2
 800207c:	3302      	adds	r3, #2
 800207e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002082:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002084:	69fb      	ldr	r3, [r7, #28]
 8002086:	f003 0303 	and.w	r3, r3, #3
 800208a:	009b      	lsls	r3, r3, #2
 800208c:	220f      	movs	r2, #15
 800208e:	fa02 f303 	lsl.w	r3, r2, r3
 8002092:	43db      	mvns	r3, r3
 8002094:	69ba      	ldr	r2, [r7, #24]
 8002096:	4013      	ands	r3, r2
 8002098:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4a58      	ldr	r2, [pc, #352]	; (8002200 <HAL_GPIO_Init+0x32c>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d037      	beq.n	8002112 <HAL_GPIO_Init+0x23e>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4a57      	ldr	r2, [pc, #348]	; (8002204 <HAL_GPIO_Init+0x330>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d031      	beq.n	800210e <HAL_GPIO_Init+0x23a>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	4a56      	ldr	r2, [pc, #344]	; (8002208 <HAL_GPIO_Init+0x334>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d02b      	beq.n	800210a <HAL_GPIO_Init+0x236>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	4a55      	ldr	r2, [pc, #340]	; (800220c <HAL_GPIO_Init+0x338>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d025      	beq.n	8002106 <HAL_GPIO_Init+0x232>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	4a54      	ldr	r2, [pc, #336]	; (8002210 <HAL_GPIO_Init+0x33c>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d01f      	beq.n	8002102 <HAL_GPIO_Init+0x22e>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	4a53      	ldr	r2, [pc, #332]	; (8002214 <HAL_GPIO_Init+0x340>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d019      	beq.n	80020fe <HAL_GPIO_Init+0x22a>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	4a52      	ldr	r2, [pc, #328]	; (8002218 <HAL_GPIO_Init+0x344>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d013      	beq.n	80020fa <HAL_GPIO_Init+0x226>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	4a51      	ldr	r2, [pc, #324]	; (800221c <HAL_GPIO_Init+0x348>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d00d      	beq.n	80020f6 <HAL_GPIO_Init+0x222>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	4a50      	ldr	r2, [pc, #320]	; (8002220 <HAL_GPIO_Init+0x34c>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d007      	beq.n	80020f2 <HAL_GPIO_Init+0x21e>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	4a4f      	ldr	r2, [pc, #316]	; (8002224 <HAL_GPIO_Init+0x350>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d101      	bne.n	80020ee <HAL_GPIO_Init+0x21a>
 80020ea:	2309      	movs	r3, #9
 80020ec:	e012      	b.n	8002114 <HAL_GPIO_Init+0x240>
 80020ee:	230a      	movs	r3, #10
 80020f0:	e010      	b.n	8002114 <HAL_GPIO_Init+0x240>
 80020f2:	2308      	movs	r3, #8
 80020f4:	e00e      	b.n	8002114 <HAL_GPIO_Init+0x240>
 80020f6:	2307      	movs	r3, #7
 80020f8:	e00c      	b.n	8002114 <HAL_GPIO_Init+0x240>
 80020fa:	2306      	movs	r3, #6
 80020fc:	e00a      	b.n	8002114 <HAL_GPIO_Init+0x240>
 80020fe:	2305      	movs	r3, #5
 8002100:	e008      	b.n	8002114 <HAL_GPIO_Init+0x240>
 8002102:	2304      	movs	r3, #4
 8002104:	e006      	b.n	8002114 <HAL_GPIO_Init+0x240>
 8002106:	2303      	movs	r3, #3
 8002108:	e004      	b.n	8002114 <HAL_GPIO_Init+0x240>
 800210a:	2302      	movs	r3, #2
 800210c:	e002      	b.n	8002114 <HAL_GPIO_Init+0x240>
 800210e:	2301      	movs	r3, #1
 8002110:	e000      	b.n	8002114 <HAL_GPIO_Init+0x240>
 8002112:	2300      	movs	r3, #0
 8002114:	69fa      	ldr	r2, [r7, #28]
 8002116:	f002 0203 	and.w	r2, r2, #3
 800211a:	0092      	lsls	r2, r2, #2
 800211c:	4093      	lsls	r3, r2
 800211e:	69ba      	ldr	r2, [r7, #24]
 8002120:	4313      	orrs	r3, r2
 8002122:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002124:	4935      	ldr	r1, [pc, #212]	; (80021fc <HAL_GPIO_Init+0x328>)
 8002126:	69fb      	ldr	r3, [r7, #28]
 8002128:	089b      	lsrs	r3, r3, #2
 800212a:	3302      	adds	r3, #2
 800212c:	69ba      	ldr	r2, [r7, #24]
 800212e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002132:	4b3d      	ldr	r3, [pc, #244]	; (8002228 <HAL_GPIO_Init+0x354>)
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	43db      	mvns	r3, r3
 800213c:	69ba      	ldr	r2, [r7, #24]
 800213e:	4013      	ands	r3, r2
 8002140:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800214a:	2b00      	cmp	r3, #0
 800214c:	d003      	beq.n	8002156 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800214e:	69ba      	ldr	r2, [r7, #24]
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	4313      	orrs	r3, r2
 8002154:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002156:	4a34      	ldr	r2, [pc, #208]	; (8002228 <HAL_GPIO_Init+0x354>)
 8002158:	69bb      	ldr	r3, [r7, #24]
 800215a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800215c:	4b32      	ldr	r3, [pc, #200]	; (8002228 <HAL_GPIO_Init+0x354>)
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	43db      	mvns	r3, r3
 8002166:	69ba      	ldr	r2, [r7, #24]
 8002168:	4013      	ands	r3, r2
 800216a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002174:	2b00      	cmp	r3, #0
 8002176:	d003      	beq.n	8002180 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002178:	69ba      	ldr	r2, [r7, #24]
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	4313      	orrs	r3, r2
 800217e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002180:	4a29      	ldr	r2, [pc, #164]	; (8002228 <HAL_GPIO_Init+0x354>)
 8002182:	69bb      	ldr	r3, [r7, #24]
 8002184:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002186:	4b28      	ldr	r3, [pc, #160]	; (8002228 <HAL_GPIO_Init+0x354>)
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	43db      	mvns	r3, r3
 8002190:	69ba      	ldr	r2, [r7, #24]
 8002192:	4013      	ands	r3, r2
 8002194:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d003      	beq.n	80021aa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80021a2:	69ba      	ldr	r2, [r7, #24]
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	4313      	orrs	r3, r2
 80021a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80021aa:	4a1f      	ldr	r2, [pc, #124]	; (8002228 <HAL_GPIO_Init+0x354>)
 80021ac:	69bb      	ldr	r3, [r7, #24]
 80021ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80021b0:	4b1d      	ldr	r3, [pc, #116]	; (8002228 <HAL_GPIO_Init+0x354>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	43db      	mvns	r3, r3
 80021ba:	69ba      	ldr	r2, [r7, #24]
 80021bc:	4013      	ands	r3, r2
 80021be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d003      	beq.n	80021d4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80021cc:	69ba      	ldr	r2, [r7, #24]
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	4313      	orrs	r3, r2
 80021d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80021d4:	4a14      	ldr	r2, [pc, #80]	; (8002228 <HAL_GPIO_Init+0x354>)
 80021d6:	69bb      	ldr	r3, [r7, #24]
 80021d8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	3301      	adds	r3, #1
 80021de:	61fb      	str	r3, [r7, #28]
 80021e0:	69fb      	ldr	r3, [r7, #28]
 80021e2:	2b0f      	cmp	r3, #15
 80021e4:	f67f ae86 	bls.w	8001ef4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80021e8:	bf00      	nop
 80021ea:	bf00      	nop
 80021ec:	3724      	adds	r7, #36	; 0x24
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr
 80021f6:	bf00      	nop
 80021f8:	40023800 	.word	0x40023800
 80021fc:	40013800 	.word	0x40013800
 8002200:	40020000 	.word	0x40020000
 8002204:	40020400 	.word	0x40020400
 8002208:	40020800 	.word	0x40020800
 800220c:	40020c00 	.word	0x40020c00
 8002210:	40021000 	.word	0x40021000
 8002214:	40021400 	.word	0x40021400
 8002218:	40021800 	.word	0x40021800
 800221c:	40021c00 	.word	0x40021c00
 8002220:	40022000 	.word	0x40022000
 8002224:	40022400 	.word	0x40022400
 8002228:	40013c00 	.word	0x40013c00

0800222c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800222c:	b480      	push	{r7}
 800222e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002230:	4b05      	ldr	r3, [pc, #20]	; (8002248 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a04      	ldr	r2, [pc, #16]	; (8002248 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002236:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800223a:	6013      	str	r3, [r2, #0]
}
 800223c:	bf00      	nop
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr
 8002246:	bf00      	nop
 8002248:	40007000 	.word	0x40007000

0800224c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b082      	sub	sp, #8
 8002250:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002252:	2300      	movs	r3, #0
 8002254:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002256:	4b23      	ldr	r3, [pc, #140]	; (80022e4 <HAL_PWREx_EnableOverDrive+0x98>)
 8002258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225a:	4a22      	ldr	r2, [pc, #136]	; (80022e4 <HAL_PWREx_EnableOverDrive+0x98>)
 800225c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002260:	6413      	str	r3, [r2, #64]	; 0x40
 8002262:	4b20      	ldr	r3, [pc, #128]	; (80022e4 <HAL_PWREx_EnableOverDrive+0x98>)
 8002264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002266:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800226a:	603b      	str	r3, [r7, #0]
 800226c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800226e:	4b1e      	ldr	r3, [pc, #120]	; (80022e8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a1d      	ldr	r2, [pc, #116]	; (80022e8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002274:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002278:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800227a:	f7ff fb6d 	bl	8001958 <HAL_GetTick>
 800227e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002280:	e009      	b.n	8002296 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002282:	f7ff fb69 	bl	8001958 <HAL_GetTick>
 8002286:	4602      	mov	r2, r0
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	1ad3      	subs	r3, r2, r3
 800228c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002290:	d901      	bls.n	8002296 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002292:	2303      	movs	r3, #3
 8002294:	e022      	b.n	80022dc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002296:	4b14      	ldr	r3, [pc, #80]	; (80022e8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800229e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022a2:	d1ee      	bne.n	8002282 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80022a4:	4b10      	ldr	r3, [pc, #64]	; (80022e8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a0f      	ldr	r2, [pc, #60]	; (80022e8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80022aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022ae:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80022b0:	f7ff fb52 	bl	8001958 <HAL_GetTick>
 80022b4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80022b6:	e009      	b.n	80022cc <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80022b8:	f7ff fb4e 	bl	8001958 <HAL_GetTick>
 80022bc:	4602      	mov	r2, r0
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	1ad3      	subs	r3, r2, r3
 80022c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80022c6:	d901      	bls.n	80022cc <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80022c8:	2303      	movs	r3, #3
 80022ca:	e007      	b.n	80022dc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80022cc:	4b06      	ldr	r3, [pc, #24]	; (80022e8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80022d8:	d1ee      	bne.n	80022b8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80022da:	2300      	movs	r3, #0
}
 80022dc:	4618      	mov	r0, r3
 80022de:	3708      	adds	r7, #8
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}
 80022e4:	40023800 	.word	0x40023800
 80022e8:	40007000 	.word	0x40007000

080022ec <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b086      	sub	sp, #24
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80022f4:	2300      	movs	r3, #0
 80022f6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d101      	bne.n	8002302 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	e291      	b.n	8002826 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 0301 	and.w	r3, r3, #1
 800230a:	2b00      	cmp	r3, #0
 800230c:	f000 8087 	beq.w	800241e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002310:	4b96      	ldr	r3, [pc, #600]	; (800256c <HAL_RCC_OscConfig+0x280>)
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	f003 030c 	and.w	r3, r3, #12
 8002318:	2b04      	cmp	r3, #4
 800231a:	d00c      	beq.n	8002336 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800231c:	4b93      	ldr	r3, [pc, #588]	; (800256c <HAL_RCC_OscConfig+0x280>)
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	f003 030c 	and.w	r3, r3, #12
 8002324:	2b08      	cmp	r3, #8
 8002326:	d112      	bne.n	800234e <HAL_RCC_OscConfig+0x62>
 8002328:	4b90      	ldr	r3, [pc, #576]	; (800256c <HAL_RCC_OscConfig+0x280>)
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002330:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002334:	d10b      	bne.n	800234e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002336:	4b8d      	ldr	r3, [pc, #564]	; (800256c <HAL_RCC_OscConfig+0x280>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800233e:	2b00      	cmp	r3, #0
 8002340:	d06c      	beq.n	800241c <HAL_RCC_OscConfig+0x130>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d168      	bne.n	800241c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e26b      	b.n	8002826 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002356:	d106      	bne.n	8002366 <HAL_RCC_OscConfig+0x7a>
 8002358:	4b84      	ldr	r3, [pc, #528]	; (800256c <HAL_RCC_OscConfig+0x280>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a83      	ldr	r2, [pc, #524]	; (800256c <HAL_RCC_OscConfig+0x280>)
 800235e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002362:	6013      	str	r3, [r2, #0]
 8002364:	e02e      	b.n	80023c4 <HAL_RCC_OscConfig+0xd8>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d10c      	bne.n	8002388 <HAL_RCC_OscConfig+0x9c>
 800236e:	4b7f      	ldr	r3, [pc, #508]	; (800256c <HAL_RCC_OscConfig+0x280>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a7e      	ldr	r2, [pc, #504]	; (800256c <HAL_RCC_OscConfig+0x280>)
 8002374:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002378:	6013      	str	r3, [r2, #0]
 800237a:	4b7c      	ldr	r3, [pc, #496]	; (800256c <HAL_RCC_OscConfig+0x280>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a7b      	ldr	r2, [pc, #492]	; (800256c <HAL_RCC_OscConfig+0x280>)
 8002380:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002384:	6013      	str	r3, [r2, #0]
 8002386:	e01d      	b.n	80023c4 <HAL_RCC_OscConfig+0xd8>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002390:	d10c      	bne.n	80023ac <HAL_RCC_OscConfig+0xc0>
 8002392:	4b76      	ldr	r3, [pc, #472]	; (800256c <HAL_RCC_OscConfig+0x280>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a75      	ldr	r2, [pc, #468]	; (800256c <HAL_RCC_OscConfig+0x280>)
 8002398:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800239c:	6013      	str	r3, [r2, #0]
 800239e:	4b73      	ldr	r3, [pc, #460]	; (800256c <HAL_RCC_OscConfig+0x280>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a72      	ldr	r2, [pc, #456]	; (800256c <HAL_RCC_OscConfig+0x280>)
 80023a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023a8:	6013      	str	r3, [r2, #0]
 80023aa:	e00b      	b.n	80023c4 <HAL_RCC_OscConfig+0xd8>
 80023ac:	4b6f      	ldr	r3, [pc, #444]	; (800256c <HAL_RCC_OscConfig+0x280>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a6e      	ldr	r2, [pc, #440]	; (800256c <HAL_RCC_OscConfig+0x280>)
 80023b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023b6:	6013      	str	r3, [r2, #0]
 80023b8:	4b6c      	ldr	r3, [pc, #432]	; (800256c <HAL_RCC_OscConfig+0x280>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a6b      	ldr	r2, [pc, #428]	; (800256c <HAL_RCC_OscConfig+0x280>)
 80023be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d013      	beq.n	80023f4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023cc:	f7ff fac4 	bl	8001958 <HAL_GetTick>
 80023d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023d2:	e008      	b.n	80023e6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023d4:	f7ff fac0 	bl	8001958 <HAL_GetTick>
 80023d8:	4602      	mov	r2, r0
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	1ad3      	subs	r3, r2, r3
 80023de:	2b64      	cmp	r3, #100	; 0x64
 80023e0:	d901      	bls.n	80023e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80023e2:	2303      	movs	r3, #3
 80023e4:	e21f      	b.n	8002826 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023e6:	4b61      	ldr	r3, [pc, #388]	; (800256c <HAL_RCC_OscConfig+0x280>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d0f0      	beq.n	80023d4 <HAL_RCC_OscConfig+0xe8>
 80023f2:	e014      	b.n	800241e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023f4:	f7ff fab0 	bl	8001958 <HAL_GetTick>
 80023f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023fa:	e008      	b.n	800240e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023fc:	f7ff faac 	bl	8001958 <HAL_GetTick>
 8002400:	4602      	mov	r2, r0
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	2b64      	cmp	r3, #100	; 0x64
 8002408:	d901      	bls.n	800240e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800240a:	2303      	movs	r3, #3
 800240c:	e20b      	b.n	8002826 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800240e:	4b57      	ldr	r3, [pc, #348]	; (800256c <HAL_RCC_OscConfig+0x280>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002416:	2b00      	cmp	r3, #0
 8002418:	d1f0      	bne.n	80023fc <HAL_RCC_OscConfig+0x110>
 800241a:	e000      	b.n	800241e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800241c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 0302 	and.w	r3, r3, #2
 8002426:	2b00      	cmp	r3, #0
 8002428:	d069      	beq.n	80024fe <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800242a:	4b50      	ldr	r3, [pc, #320]	; (800256c <HAL_RCC_OscConfig+0x280>)
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	f003 030c 	and.w	r3, r3, #12
 8002432:	2b00      	cmp	r3, #0
 8002434:	d00b      	beq.n	800244e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002436:	4b4d      	ldr	r3, [pc, #308]	; (800256c <HAL_RCC_OscConfig+0x280>)
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	f003 030c 	and.w	r3, r3, #12
 800243e:	2b08      	cmp	r3, #8
 8002440:	d11c      	bne.n	800247c <HAL_RCC_OscConfig+0x190>
 8002442:	4b4a      	ldr	r3, [pc, #296]	; (800256c <HAL_RCC_OscConfig+0x280>)
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800244a:	2b00      	cmp	r3, #0
 800244c:	d116      	bne.n	800247c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800244e:	4b47      	ldr	r3, [pc, #284]	; (800256c <HAL_RCC_OscConfig+0x280>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 0302 	and.w	r3, r3, #2
 8002456:	2b00      	cmp	r3, #0
 8002458:	d005      	beq.n	8002466 <HAL_RCC_OscConfig+0x17a>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	68db      	ldr	r3, [r3, #12]
 800245e:	2b01      	cmp	r3, #1
 8002460:	d001      	beq.n	8002466 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	e1df      	b.n	8002826 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002466:	4b41      	ldr	r3, [pc, #260]	; (800256c <HAL_RCC_OscConfig+0x280>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	691b      	ldr	r3, [r3, #16]
 8002472:	00db      	lsls	r3, r3, #3
 8002474:	493d      	ldr	r1, [pc, #244]	; (800256c <HAL_RCC_OscConfig+0x280>)
 8002476:	4313      	orrs	r3, r2
 8002478:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800247a:	e040      	b.n	80024fe <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d023      	beq.n	80024cc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002484:	4b39      	ldr	r3, [pc, #228]	; (800256c <HAL_RCC_OscConfig+0x280>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a38      	ldr	r2, [pc, #224]	; (800256c <HAL_RCC_OscConfig+0x280>)
 800248a:	f043 0301 	orr.w	r3, r3, #1
 800248e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002490:	f7ff fa62 	bl	8001958 <HAL_GetTick>
 8002494:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002496:	e008      	b.n	80024aa <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002498:	f7ff fa5e 	bl	8001958 <HAL_GetTick>
 800249c:	4602      	mov	r2, r0
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	1ad3      	subs	r3, r2, r3
 80024a2:	2b02      	cmp	r3, #2
 80024a4:	d901      	bls.n	80024aa <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80024a6:	2303      	movs	r3, #3
 80024a8:	e1bd      	b.n	8002826 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024aa:	4b30      	ldr	r3, [pc, #192]	; (800256c <HAL_RCC_OscConfig+0x280>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 0302 	and.w	r3, r3, #2
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d0f0      	beq.n	8002498 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024b6:	4b2d      	ldr	r3, [pc, #180]	; (800256c <HAL_RCC_OscConfig+0x280>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	691b      	ldr	r3, [r3, #16]
 80024c2:	00db      	lsls	r3, r3, #3
 80024c4:	4929      	ldr	r1, [pc, #164]	; (800256c <HAL_RCC_OscConfig+0x280>)
 80024c6:	4313      	orrs	r3, r2
 80024c8:	600b      	str	r3, [r1, #0]
 80024ca:	e018      	b.n	80024fe <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024cc:	4b27      	ldr	r3, [pc, #156]	; (800256c <HAL_RCC_OscConfig+0x280>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a26      	ldr	r2, [pc, #152]	; (800256c <HAL_RCC_OscConfig+0x280>)
 80024d2:	f023 0301 	bic.w	r3, r3, #1
 80024d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024d8:	f7ff fa3e 	bl	8001958 <HAL_GetTick>
 80024dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024de:	e008      	b.n	80024f2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024e0:	f7ff fa3a 	bl	8001958 <HAL_GetTick>
 80024e4:	4602      	mov	r2, r0
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	2b02      	cmp	r3, #2
 80024ec:	d901      	bls.n	80024f2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80024ee:	2303      	movs	r3, #3
 80024f0:	e199      	b.n	8002826 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024f2:	4b1e      	ldr	r3, [pc, #120]	; (800256c <HAL_RCC_OscConfig+0x280>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 0302 	and.w	r3, r3, #2
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d1f0      	bne.n	80024e0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 0308 	and.w	r3, r3, #8
 8002506:	2b00      	cmp	r3, #0
 8002508:	d038      	beq.n	800257c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	695b      	ldr	r3, [r3, #20]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d019      	beq.n	8002546 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002512:	4b16      	ldr	r3, [pc, #88]	; (800256c <HAL_RCC_OscConfig+0x280>)
 8002514:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002516:	4a15      	ldr	r2, [pc, #84]	; (800256c <HAL_RCC_OscConfig+0x280>)
 8002518:	f043 0301 	orr.w	r3, r3, #1
 800251c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800251e:	f7ff fa1b 	bl	8001958 <HAL_GetTick>
 8002522:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002524:	e008      	b.n	8002538 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002526:	f7ff fa17 	bl	8001958 <HAL_GetTick>
 800252a:	4602      	mov	r2, r0
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	1ad3      	subs	r3, r2, r3
 8002530:	2b02      	cmp	r3, #2
 8002532:	d901      	bls.n	8002538 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002534:	2303      	movs	r3, #3
 8002536:	e176      	b.n	8002826 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002538:	4b0c      	ldr	r3, [pc, #48]	; (800256c <HAL_RCC_OscConfig+0x280>)
 800253a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800253c:	f003 0302 	and.w	r3, r3, #2
 8002540:	2b00      	cmp	r3, #0
 8002542:	d0f0      	beq.n	8002526 <HAL_RCC_OscConfig+0x23a>
 8002544:	e01a      	b.n	800257c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002546:	4b09      	ldr	r3, [pc, #36]	; (800256c <HAL_RCC_OscConfig+0x280>)
 8002548:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800254a:	4a08      	ldr	r2, [pc, #32]	; (800256c <HAL_RCC_OscConfig+0x280>)
 800254c:	f023 0301 	bic.w	r3, r3, #1
 8002550:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002552:	f7ff fa01 	bl	8001958 <HAL_GetTick>
 8002556:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002558:	e00a      	b.n	8002570 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800255a:	f7ff f9fd 	bl	8001958 <HAL_GetTick>
 800255e:	4602      	mov	r2, r0
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	1ad3      	subs	r3, r2, r3
 8002564:	2b02      	cmp	r3, #2
 8002566:	d903      	bls.n	8002570 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002568:	2303      	movs	r3, #3
 800256a:	e15c      	b.n	8002826 <HAL_RCC_OscConfig+0x53a>
 800256c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002570:	4b91      	ldr	r3, [pc, #580]	; (80027b8 <HAL_RCC_OscConfig+0x4cc>)
 8002572:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002574:	f003 0302 	and.w	r3, r3, #2
 8002578:	2b00      	cmp	r3, #0
 800257a:	d1ee      	bne.n	800255a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f003 0304 	and.w	r3, r3, #4
 8002584:	2b00      	cmp	r3, #0
 8002586:	f000 80a4 	beq.w	80026d2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800258a:	4b8b      	ldr	r3, [pc, #556]	; (80027b8 <HAL_RCC_OscConfig+0x4cc>)
 800258c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002592:	2b00      	cmp	r3, #0
 8002594:	d10d      	bne.n	80025b2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002596:	4b88      	ldr	r3, [pc, #544]	; (80027b8 <HAL_RCC_OscConfig+0x4cc>)
 8002598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259a:	4a87      	ldr	r2, [pc, #540]	; (80027b8 <HAL_RCC_OscConfig+0x4cc>)
 800259c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025a0:	6413      	str	r3, [r2, #64]	; 0x40
 80025a2:	4b85      	ldr	r3, [pc, #532]	; (80027b8 <HAL_RCC_OscConfig+0x4cc>)
 80025a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025aa:	60bb      	str	r3, [r7, #8]
 80025ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025ae:	2301      	movs	r3, #1
 80025b0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025b2:	4b82      	ldr	r3, [pc, #520]	; (80027bc <HAL_RCC_OscConfig+0x4d0>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d118      	bne.n	80025f0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80025be:	4b7f      	ldr	r3, [pc, #508]	; (80027bc <HAL_RCC_OscConfig+0x4d0>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a7e      	ldr	r2, [pc, #504]	; (80027bc <HAL_RCC_OscConfig+0x4d0>)
 80025c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025ca:	f7ff f9c5 	bl	8001958 <HAL_GetTick>
 80025ce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025d0:	e008      	b.n	80025e4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025d2:	f7ff f9c1 	bl	8001958 <HAL_GetTick>
 80025d6:	4602      	mov	r2, r0
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	1ad3      	subs	r3, r2, r3
 80025dc:	2b64      	cmp	r3, #100	; 0x64
 80025de:	d901      	bls.n	80025e4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80025e0:	2303      	movs	r3, #3
 80025e2:	e120      	b.n	8002826 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025e4:	4b75      	ldr	r3, [pc, #468]	; (80027bc <HAL_RCC_OscConfig+0x4d0>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d0f0      	beq.n	80025d2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	d106      	bne.n	8002606 <HAL_RCC_OscConfig+0x31a>
 80025f8:	4b6f      	ldr	r3, [pc, #444]	; (80027b8 <HAL_RCC_OscConfig+0x4cc>)
 80025fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025fc:	4a6e      	ldr	r2, [pc, #440]	; (80027b8 <HAL_RCC_OscConfig+0x4cc>)
 80025fe:	f043 0301 	orr.w	r3, r3, #1
 8002602:	6713      	str	r3, [r2, #112]	; 0x70
 8002604:	e02d      	b.n	8002662 <HAL_RCC_OscConfig+0x376>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d10c      	bne.n	8002628 <HAL_RCC_OscConfig+0x33c>
 800260e:	4b6a      	ldr	r3, [pc, #424]	; (80027b8 <HAL_RCC_OscConfig+0x4cc>)
 8002610:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002612:	4a69      	ldr	r2, [pc, #420]	; (80027b8 <HAL_RCC_OscConfig+0x4cc>)
 8002614:	f023 0301 	bic.w	r3, r3, #1
 8002618:	6713      	str	r3, [r2, #112]	; 0x70
 800261a:	4b67      	ldr	r3, [pc, #412]	; (80027b8 <HAL_RCC_OscConfig+0x4cc>)
 800261c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800261e:	4a66      	ldr	r2, [pc, #408]	; (80027b8 <HAL_RCC_OscConfig+0x4cc>)
 8002620:	f023 0304 	bic.w	r3, r3, #4
 8002624:	6713      	str	r3, [r2, #112]	; 0x70
 8002626:	e01c      	b.n	8002662 <HAL_RCC_OscConfig+0x376>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	2b05      	cmp	r3, #5
 800262e:	d10c      	bne.n	800264a <HAL_RCC_OscConfig+0x35e>
 8002630:	4b61      	ldr	r3, [pc, #388]	; (80027b8 <HAL_RCC_OscConfig+0x4cc>)
 8002632:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002634:	4a60      	ldr	r2, [pc, #384]	; (80027b8 <HAL_RCC_OscConfig+0x4cc>)
 8002636:	f043 0304 	orr.w	r3, r3, #4
 800263a:	6713      	str	r3, [r2, #112]	; 0x70
 800263c:	4b5e      	ldr	r3, [pc, #376]	; (80027b8 <HAL_RCC_OscConfig+0x4cc>)
 800263e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002640:	4a5d      	ldr	r2, [pc, #372]	; (80027b8 <HAL_RCC_OscConfig+0x4cc>)
 8002642:	f043 0301 	orr.w	r3, r3, #1
 8002646:	6713      	str	r3, [r2, #112]	; 0x70
 8002648:	e00b      	b.n	8002662 <HAL_RCC_OscConfig+0x376>
 800264a:	4b5b      	ldr	r3, [pc, #364]	; (80027b8 <HAL_RCC_OscConfig+0x4cc>)
 800264c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800264e:	4a5a      	ldr	r2, [pc, #360]	; (80027b8 <HAL_RCC_OscConfig+0x4cc>)
 8002650:	f023 0301 	bic.w	r3, r3, #1
 8002654:	6713      	str	r3, [r2, #112]	; 0x70
 8002656:	4b58      	ldr	r3, [pc, #352]	; (80027b8 <HAL_RCC_OscConfig+0x4cc>)
 8002658:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800265a:	4a57      	ldr	r2, [pc, #348]	; (80027b8 <HAL_RCC_OscConfig+0x4cc>)
 800265c:	f023 0304 	bic.w	r3, r3, #4
 8002660:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d015      	beq.n	8002696 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800266a:	f7ff f975 	bl	8001958 <HAL_GetTick>
 800266e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002670:	e00a      	b.n	8002688 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002672:	f7ff f971 	bl	8001958 <HAL_GetTick>
 8002676:	4602      	mov	r2, r0
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	1ad3      	subs	r3, r2, r3
 800267c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002680:	4293      	cmp	r3, r2
 8002682:	d901      	bls.n	8002688 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002684:	2303      	movs	r3, #3
 8002686:	e0ce      	b.n	8002826 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002688:	4b4b      	ldr	r3, [pc, #300]	; (80027b8 <HAL_RCC_OscConfig+0x4cc>)
 800268a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800268c:	f003 0302 	and.w	r3, r3, #2
 8002690:	2b00      	cmp	r3, #0
 8002692:	d0ee      	beq.n	8002672 <HAL_RCC_OscConfig+0x386>
 8002694:	e014      	b.n	80026c0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002696:	f7ff f95f 	bl	8001958 <HAL_GetTick>
 800269a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800269c:	e00a      	b.n	80026b4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800269e:	f7ff f95b 	bl	8001958 <HAL_GetTick>
 80026a2:	4602      	mov	r2, r0
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	1ad3      	subs	r3, r2, r3
 80026a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d901      	bls.n	80026b4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80026b0:	2303      	movs	r3, #3
 80026b2:	e0b8      	b.n	8002826 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026b4:	4b40      	ldr	r3, [pc, #256]	; (80027b8 <HAL_RCC_OscConfig+0x4cc>)
 80026b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026b8:	f003 0302 	and.w	r3, r3, #2
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d1ee      	bne.n	800269e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80026c0:	7dfb      	ldrb	r3, [r7, #23]
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d105      	bne.n	80026d2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026c6:	4b3c      	ldr	r3, [pc, #240]	; (80027b8 <HAL_RCC_OscConfig+0x4cc>)
 80026c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ca:	4a3b      	ldr	r2, [pc, #236]	; (80027b8 <HAL_RCC_OscConfig+0x4cc>)
 80026cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026d0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	699b      	ldr	r3, [r3, #24]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	f000 80a4 	beq.w	8002824 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026dc:	4b36      	ldr	r3, [pc, #216]	; (80027b8 <HAL_RCC_OscConfig+0x4cc>)
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	f003 030c 	and.w	r3, r3, #12
 80026e4:	2b08      	cmp	r3, #8
 80026e6:	d06b      	beq.n	80027c0 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	699b      	ldr	r3, [r3, #24]
 80026ec:	2b02      	cmp	r3, #2
 80026ee:	d149      	bne.n	8002784 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026f0:	4b31      	ldr	r3, [pc, #196]	; (80027b8 <HAL_RCC_OscConfig+0x4cc>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a30      	ldr	r2, [pc, #192]	; (80027b8 <HAL_RCC_OscConfig+0x4cc>)
 80026f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80026fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026fc:	f7ff f92c 	bl	8001958 <HAL_GetTick>
 8002700:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002702:	e008      	b.n	8002716 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002704:	f7ff f928 	bl	8001958 <HAL_GetTick>
 8002708:	4602      	mov	r2, r0
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	1ad3      	subs	r3, r2, r3
 800270e:	2b02      	cmp	r3, #2
 8002710:	d901      	bls.n	8002716 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002712:	2303      	movs	r3, #3
 8002714:	e087      	b.n	8002826 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002716:	4b28      	ldr	r3, [pc, #160]	; (80027b8 <HAL_RCC_OscConfig+0x4cc>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800271e:	2b00      	cmp	r3, #0
 8002720:	d1f0      	bne.n	8002704 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	69da      	ldr	r2, [r3, #28]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6a1b      	ldr	r3, [r3, #32]
 800272a:	431a      	orrs	r2, r3
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002730:	019b      	lsls	r3, r3, #6
 8002732:	431a      	orrs	r2, r3
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002738:	085b      	lsrs	r3, r3, #1
 800273a:	3b01      	subs	r3, #1
 800273c:	041b      	lsls	r3, r3, #16
 800273e:	431a      	orrs	r2, r3
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002744:	061b      	lsls	r3, r3, #24
 8002746:	4313      	orrs	r3, r2
 8002748:	4a1b      	ldr	r2, [pc, #108]	; (80027b8 <HAL_RCC_OscConfig+0x4cc>)
 800274a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800274e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002750:	4b19      	ldr	r3, [pc, #100]	; (80027b8 <HAL_RCC_OscConfig+0x4cc>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a18      	ldr	r2, [pc, #96]	; (80027b8 <HAL_RCC_OscConfig+0x4cc>)
 8002756:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800275a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800275c:	f7ff f8fc 	bl	8001958 <HAL_GetTick>
 8002760:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002762:	e008      	b.n	8002776 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002764:	f7ff f8f8 	bl	8001958 <HAL_GetTick>
 8002768:	4602      	mov	r2, r0
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	2b02      	cmp	r3, #2
 8002770:	d901      	bls.n	8002776 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002772:	2303      	movs	r3, #3
 8002774:	e057      	b.n	8002826 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002776:	4b10      	ldr	r3, [pc, #64]	; (80027b8 <HAL_RCC_OscConfig+0x4cc>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800277e:	2b00      	cmp	r3, #0
 8002780:	d0f0      	beq.n	8002764 <HAL_RCC_OscConfig+0x478>
 8002782:	e04f      	b.n	8002824 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002784:	4b0c      	ldr	r3, [pc, #48]	; (80027b8 <HAL_RCC_OscConfig+0x4cc>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a0b      	ldr	r2, [pc, #44]	; (80027b8 <HAL_RCC_OscConfig+0x4cc>)
 800278a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800278e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002790:	f7ff f8e2 	bl	8001958 <HAL_GetTick>
 8002794:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002796:	e008      	b.n	80027aa <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002798:	f7ff f8de 	bl	8001958 <HAL_GetTick>
 800279c:	4602      	mov	r2, r0
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	1ad3      	subs	r3, r2, r3
 80027a2:	2b02      	cmp	r3, #2
 80027a4:	d901      	bls.n	80027aa <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80027a6:	2303      	movs	r3, #3
 80027a8:	e03d      	b.n	8002826 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027aa:	4b03      	ldr	r3, [pc, #12]	; (80027b8 <HAL_RCC_OscConfig+0x4cc>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d1f0      	bne.n	8002798 <HAL_RCC_OscConfig+0x4ac>
 80027b6:	e035      	b.n	8002824 <HAL_RCC_OscConfig+0x538>
 80027b8:	40023800 	.word	0x40023800
 80027bc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80027c0:	4b1b      	ldr	r3, [pc, #108]	; (8002830 <HAL_RCC_OscConfig+0x544>)
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	699b      	ldr	r3, [r3, #24]
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	d028      	beq.n	8002820 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027d8:	429a      	cmp	r2, r3
 80027da:	d121      	bne.n	8002820 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027e6:	429a      	cmp	r2, r3
 80027e8:	d11a      	bne.n	8002820 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80027ea:	68fa      	ldr	r2, [r7, #12]
 80027ec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80027f0:	4013      	ands	r3, r2
 80027f2:	687a      	ldr	r2, [r7, #4]
 80027f4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80027f6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d111      	bne.n	8002820 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002806:	085b      	lsrs	r3, r3, #1
 8002808:	3b01      	subs	r3, #1
 800280a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800280c:	429a      	cmp	r2, r3
 800280e:	d107      	bne.n	8002820 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800281a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800281c:	429a      	cmp	r2, r3
 800281e:	d001      	beq.n	8002824 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	e000      	b.n	8002826 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002824:	2300      	movs	r3, #0
}
 8002826:	4618      	mov	r0, r3
 8002828:	3718      	adds	r7, #24
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}
 800282e:	bf00      	nop
 8002830:	40023800 	.word	0x40023800

08002834 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b084      	sub	sp, #16
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
 800283c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800283e:	2300      	movs	r3, #0
 8002840:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d101      	bne.n	800284c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002848:	2301      	movs	r3, #1
 800284a:	e0d0      	b.n	80029ee <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800284c:	4b6a      	ldr	r3, [pc, #424]	; (80029f8 <HAL_RCC_ClockConfig+0x1c4>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f003 030f 	and.w	r3, r3, #15
 8002854:	683a      	ldr	r2, [r7, #0]
 8002856:	429a      	cmp	r2, r3
 8002858:	d910      	bls.n	800287c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800285a:	4b67      	ldr	r3, [pc, #412]	; (80029f8 <HAL_RCC_ClockConfig+0x1c4>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f023 020f 	bic.w	r2, r3, #15
 8002862:	4965      	ldr	r1, [pc, #404]	; (80029f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	4313      	orrs	r3, r2
 8002868:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800286a:	4b63      	ldr	r3, [pc, #396]	; (80029f8 <HAL_RCC_ClockConfig+0x1c4>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 030f 	and.w	r3, r3, #15
 8002872:	683a      	ldr	r2, [r7, #0]
 8002874:	429a      	cmp	r2, r3
 8002876:	d001      	beq.n	800287c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002878:	2301      	movs	r3, #1
 800287a:	e0b8      	b.n	80029ee <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f003 0302 	and.w	r3, r3, #2
 8002884:	2b00      	cmp	r3, #0
 8002886:	d020      	beq.n	80028ca <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 0304 	and.w	r3, r3, #4
 8002890:	2b00      	cmp	r3, #0
 8002892:	d005      	beq.n	80028a0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002894:	4b59      	ldr	r3, [pc, #356]	; (80029fc <HAL_RCC_ClockConfig+0x1c8>)
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	4a58      	ldr	r2, [pc, #352]	; (80029fc <HAL_RCC_ClockConfig+0x1c8>)
 800289a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800289e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 0308 	and.w	r3, r3, #8
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d005      	beq.n	80028b8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80028ac:	4b53      	ldr	r3, [pc, #332]	; (80029fc <HAL_RCC_ClockConfig+0x1c8>)
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	4a52      	ldr	r2, [pc, #328]	; (80029fc <HAL_RCC_ClockConfig+0x1c8>)
 80028b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80028b6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028b8:	4b50      	ldr	r3, [pc, #320]	; (80029fc <HAL_RCC_ClockConfig+0x1c8>)
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	494d      	ldr	r1, [pc, #308]	; (80029fc <HAL_RCC_ClockConfig+0x1c8>)
 80028c6:	4313      	orrs	r3, r2
 80028c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f003 0301 	and.w	r3, r3, #1
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d040      	beq.n	8002958 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	2b01      	cmp	r3, #1
 80028dc:	d107      	bne.n	80028ee <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028de:	4b47      	ldr	r3, [pc, #284]	; (80029fc <HAL_RCC_ClockConfig+0x1c8>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d115      	bne.n	8002916 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	e07f      	b.n	80029ee <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	2b02      	cmp	r3, #2
 80028f4:	d107      	bne.n	8002906 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028f6:	4b41      	ldr	r3, [pc, #260]	; (80029fc <HAL_RCC_ClockConfig+0x1c8>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d109      	bne.n	8002916 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	e073      	b.n	80029ee <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002906:	4b3d      	ldr	r3, [pc, #244]	; (80029fc <HAL_RCC_ClockConfig+0x1c8>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 0302 	and.w	r3, r3, #2
 800290e:	2b00      	cmp	r3, #0
 8002910:	d101      	bne.n	8002916 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	e06b      	b.n	80029ee <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002916:	4b39      	ldr	r3, [pc, #228]	; (80029fc <HAL_RCC_ClockConfig+0x1c8>)
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	f023 0203 	bic.w	r2, r3, #3
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	4936      	ldr	r1, [pc, #216]	; (80029fc <HAL_RCC_ClockConfig+0x1c8>)
 8002924:	4313      	orrs	r3, r2
 8002926:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002928:	f7ff f816 	bl	8001958 <HAL_GetTick>
 800292c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800292e:	e00a      	b.n	8002946 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002930:	f7ff f812 	bl	8001958 <HAL_GetTick>
 8002934:	4602      	mov	r2, r0
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	1ad3      	subs	r3, r2, r3
 800293a:	f241 3288 	movw	r2, #5000	; 0x1388
 800293e:	4293      	cmp	r3, r2
 8002940:	d901      	bls.n	8002946 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002942:	2303      	movs	r3, #3
 8002944:	e053      	b.n	80029ee <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002946:	4b2d      	ldr	r3, [pc, #180]	; (80029fc <HAL_RCC_ClockConfig+0x1c8>)
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	f003 020c 	and.w	r2, r3, #12
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	009b      	lsls	r3, r3, #2
 8002954:	429a      	cmp	r2, r3
 8002956:	d1eb      	bne.n	8002930 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002958:	4b27      	ldr	r3, [pc, #156]	; (80029f8 <HAL_RCC_ClockConfig+0x1c4>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f003 030f 	and.w	r3, r3, #15
 8002960:	683a      	ldr	r2, [r7, #0]
 8002962:	429a      	cmp	r2, r3
 8002964:	d210      	bcs.n	8002988 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002966:	4b24      	ldr	r3, [pc, #144]	; (80029f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f023 020f 	bic.w	r2, r3, #15
 800296e:	4922      	ldr	r1, [pc, #136]	; (80029f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	4313      	orrs	r3, r2
 8002974:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002976:	4b20      	ldr	r3, [pc, #128]	; (80029f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f003 030f 	and.w	r3, r3, #15
 800297e:	683a      	ldr	r2, [r7, #0]
 8002980:	429a      	cmp	r2, r3
 8002982:	d001      	beq.n	8002988 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002984:	2301      	movs	r3, #1
 8002986:	e032      	b.n	80029ee <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 0304 	and.w	r3, r3, #4
 8002990:	2b00      	cmp	r3, #0
 8002992:	d008      	beq.n	80029a6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002994:	4b19      	ldr	r3, [pc, #100]	; (80029fc <HAL_RCC_ClockConfig+0x1c8>)
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	68db      	ldr	r3, [r3, #12]
 80029a0:	4916      	ldr	r1, [pc, #88]	; (80029fc <HAL_RCC_ClockConfig+0x1c8>)
 80029a2:	4313      	orrs	r3, r2
 80029a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 0308 	and.w	r3, r3, #8
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d009      	beq.n	80029c6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80029b2:	4b12      	ldr	r3, [pc, #72]	; (80029fc <HAL_RCC_ClockConfig+0x1c8>)
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	691b      	ldr	r3, [r3, #16]
 80029be:	00db      	lsls	r3, r3, #3
 80029c0:	490e      	ldr	r1, [pc, #56]	; (80029fc <HAL_RCC_ClockConfig+0x1c8>)
 80029c2:	4313      	orrs	r3, r2
 80029c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80029c6:	f000 f821 	bl	8002a0c <HAL_RCC_GetSysClockFreq>
 80029ca:	4602      	mov	r2, r0
 80029cc:	4b0b      	ldr	r3, [pc, #44]	; (80029fc <HAL_RCC_ClockConfig+0x1c8>)
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	091b      	lsrs	r3, r3, #4
 80029d2:	f003 030f 	and.w	r3, r3, #15
 80029d6:	490a      	ldr	r1, [pc, #40]	; (8002a00 <HAL_RCC_ClockConfig+0x1cc>)
 80029d8:	5ccb      	ldrb	r3, [r1, r3]
 80029da:	fa22 f303 	lsr.w	r3, r2, r3
 80029de:	4a09      	ldr	r2, [pc, #36]	; (8002a04 <HAL_RCC_ClockConfig+0x1d0>)
 80029e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80029e2:	4b09      	ldr	r3, [pc, #36]	; (8002a08 <HAL_RCC_ClockConfig+0x1d4>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4618      	mov	r0, r3
 80029e8:	f7fe ff72 	bl	80018d0 <HAL_InitTick>

  return HAL_OK;
 80029ec:	2300      	movs	r3, #0
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	3710      	adds	r7, #16
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop
 80029f8:	40023c00 	.word	0x40023c00
 80029fc:	40023800 	.word	0x40023800
 8002a00:	0800a020 	.word	0x0800a020
 8002a04:	2000001c 	.word	0x2000001c
 8002a08:	20000020 	.word	0x20000020

08002a0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a10:	b094      	sub	sp, #80	; 0x50
 8002a12:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002a14:	2300      	movs	r3, #0
 8002a16:	647b      	str	r3, [r7, #68]	; 0x44
 8002a18:	2300      	movs	r3, #0
 8002a1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8002a20:	2300      	movs	r3, #0
 8002a22:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a24:	4b79      	ldr	r3, [pc, #484]	; (8002c0c <HAL_RCC_GetSysClockFreq+0x200>)
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	f003 030c 	and.w	r3, r3, #12
 8002a2c:	2b08      	cmp	r3, #8
 8002a2e:	d00d      	beq.n	8002a4c <HAL_RCC_GetSysClockFreq+0x40>
 8002a30:	2b08      	cmp	r3, #8
 8002a32:	f200 80e1 	bhi.w	8002bf8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d002      	beq.n	8002a40 <HAL_RCC_GetSysClockFreq+0x34>
 8002a3a:	2b04      	cmp	r3, #4
 8002a3c:	d003      	beq.n	8002a46 <HAL_RCC_GetSysClockFreq+0x3a>
 8002a3e:	e0db      	b.n	8002bf8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a40:	4b73      	ldr	r3, [pc, #460]	; (8002c10 <HAL_RCC_GetSysClockFreq+0x204>)
 8002a42:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002a44:	e0db      	b.n	8002bfe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a46:	4b73      	ldr	r3, [pc, #460]	; (8002c14 <HAL_RCC_GetSysClockFreq+0x208>)
 8002a48:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002a4a:	e0d8      	b.n	8002bfe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a4c:	4b6f      	ldr	r3, [pc, #444]	; (8002c0c <HAL_RCC_GetSysClockFreq+0x200>)
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a54:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002a56:	4b6d      	ldr	r3, [pc, #436]	; (8002c0c <HAL_RCC_GetSysClockFreq+0x200>)
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d063      	beq.n	8002b2a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a62:	4b6a      	ldr	r3, [pc, #424]	; (8002c0c <HAL_RCC_GetSysClockFreq+0x200>)
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	099b      	lsrs	r3, r3, #6
 8002a68:	2200      	movs	r2, #0
 8002a6a:	63bb      	str	r3, [r7, #56]	; 0x38
 8002a6c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002a6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a74:	633b      	str	r3, [r7, #48]	; 0x30
 8002a76:	2300      	movs	r3, #0
 8002a78:	637b      	str	r3, [r7, #52]	; 0x34
 8002a7a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002a7e:	4622      	mov	r2, r4
 8002a80:	462b      	mov	r3, r5
 8002a82:	f04f 0000 	mov.w	r0, #0
 8002a86:	f04f 0100 	mov.w	r1, #0
 8002a8a:	0159      	lsls	r1, r3, #5
 8002a8c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a90:	0150      	lsls	r0, r2, #5
 8002a92:	4602      	mov	r2, r0
 8002a94:	460b      	mov	r3, r1
 8002a96:	4621      	mov	r1, r4
 8002a98:	1a51      	subs	r1, r2, r1
 8002a9a:	6139      	str	r1, [r7, #16]
 8002a9c:	4629      	mov	r1, r5
 8002a9e:	eb63 0301 	sbc.w	r3, r3, r1
 8002aa2:	617b      	str	r3, [r7, #20]
 8002aa4:	f04f 0200 	mov.w	r2, #0
 8002aa8:	f04f 0300 	mov.w	r3, #0
 8002aac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002ab0:	4659      	mov	r1, fp
 8002ab2:	018b      	lsls	r3, r1, #6
 8002ab4:	4651      	mov	r1, sl
 8002ab6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002aba:	4651      	mov	r1, sl
 8002abc:	018a      	lsls	r2, r1, #6
 8002abe:	4651      	mov	r1, sl
 8002ac0:	ebb2 0801 	subs.w	r8, r2, r1
 8002ac4:	4659      	mov	r1, fp
 8002ac6:	eb63 0901 	sbc.w	r9, r3, r1
 8002aca:	f04f 0200 	mov.w	r2, #0
 8002ace:	f04f 0300 	mov.w	r3, #0
 8002ad2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002ad6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002ada:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002ade:	4690      	mov	r8, r2
 8002ae0:	4699      	mov	r9, r3
 8002ae2:	4623      	mov	r3, r4
 8002ae4:	eb18 0303 	adds.w	r3, r8, r3
 8002ae8:	60bb      	str	r3, [r7, #8]
 8002aea:	462b      	mov	r3, r5
 8002aec:	eb49 0303 	adc.w	r3, r9, r3
 8002af0:	60fb      	str	r3, [r7, #12]
 8002af2:	f04f 0200 	mov.w	r2, #0
 8002af6:	f04f 0300 	mov.w	r3, #0
 8002afa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002afe:	4629      	mov	r1, r5
 8002b00:	024b      	lsls	r3, r1, #9
 8002b02:	4621      	mov	r1, r4
 8002b04:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002b08:	4621      	mov	r1, r4
 8002b0a:	024a      	lsls	r2, r1, #9
 8002b0c:	4610      	mov	r0, r2
 8002b0e:	4619      	mov	r1, r3
 8002b10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b12:	2200      	movs	r2, #0
 8002b14:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b16:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002b18:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002b1c:	f7fe f864 	bl	8000be8 <__aeabi_uldivmod>
 8002b20:	4602      	mov	r2, r0
 8002b22:	460b      	mov	r3, r1
 8002b24:	4613      	mov	r3, r2
 8002b26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b28:	e058      	b.n	8002bdc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b2a:	4b38      	ldr	r3, [pc, #224]	; (8002c0c <HAL_RCC_GetSysClockFreq+0x200>)
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	099b      	lsrs	r3, r3, #6
 8002b30:	2200      	movs	r2, #0
 8002b32:	4618      	mov	r0, r3
 8002b34:	4611      	mov	r1, r2
 8002b36:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002b3a:	623b      	str	r3, [r7, #32]
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	627b      	str	r3, [r7, #36]	; 0x24
 8002b40:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002b44:	4642      	mov	r2, r8
 8002b46:	464b      	mov	r3, r9
 8002b48:	f04f 0000 	mov.w	r0, #0
 8002b4c:	f04f 0100 	mov.w	r1, #0
 8002b50:	0159      	lsls	r1, r3, #5
 8002b52:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b56:	0150      	lsls	r0, r2, #5
 8002b58:	4602      	mov	r2, r0
 8002b5a:	460b      	mov	r3, r1
 8002b5c:	4641      	mov	r1, r8
 8002b5e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002b62:	4649      	mov	r1, r9
 8002b64:	eb63 0b01 	sbc.w	fp, r3, r1
 8002b68:	f04f 0200 	mov.w	r2, #0
 8002b6c:	f04f 0300 	mov.w	r3, #0
 8002b70:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002b74:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002b78:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002b7c:	ebb2 040a 	subs.w	r4, r2, sl
 8002b80:	eb63 050b 	sbc.w	r5, r3, fp
 8002b84:	f04f 0200 	mov.w	r2, #0
 8002b88:	f04f 0300 	mov.w	r3, #0
 8002b8c:	00eb      	lsls	r3, r5, #3
 8002b8e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b92:	00e2      	lsls	r2, r4, #3
 8002b94:	4614      	mov	r4, r2
 8002b96:	461d      	mov	r5, r3
 8002b98:	4643      	mov	r3, r8
 8002b9a:	18e3      	adds	r3, r4, r3
 8002b9c:	603b      	str	r3, [r7, #0]
 8002b9e:	464b      	mov	r3, r9
 8002ba0:	eb45 0303 	adc.w	r3, r5, r3
 8002ba4:	607b      	str	r3, [r7, #4]
 8002ba6:	f04f 0200 	mov.w	r2, #0
 8002baa:	f04f 0300 	mov.w	r3, #0
 8002bae:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002bb2:	4629      	mov	r1, r5
 8002bb4:	028b      	lsls	r3, r1, #10
 8002bb6:	4621      	mov	r1, r4
 8002bb8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002bbc:	4621      	mov	r1, r4
 8002bbe:	028a      	lsls	r2, r1, #10
 8002bc0:	4610      	mov	r0, r2
 8002bc2:	4619      	mov	r1, r3
 8002bc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	61bb      	str	r3, [r7, #24]
 8002bca:	61fa      	str	r2, [r7, #28]
 8002bcc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002bd0:	f7fe f80a 	bl	8000be8 <__aeabi_uldivmod>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	460b      	mov	r3, r1
 8002bd8:	4613      	mov	r3, r2
 8002bda:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002bdc:	4b0b      	ldr	r3, [pc, #44]	; (8002c0c <HAL_RCC_GetSysClockFreq+0x200>)
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	0c1b      	lsrs	r3, r3, #16
 8002be2:	f003 0303 	and.w	r3, r3, #3
 8002be6:	3301      	adds	r3, #1
 8002be8:	005b      	lsls	r3, r3, #1
 8002bea:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8002bec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002bee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002bf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bf4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002bf6:	e002      	b.n	8002bfe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002bf8:	4b05      	ldr	r3, [pc, #20]	; (8002c10 <HAL_RCC_GetSysClockFreq+0x204>)
 8002bfa:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002bfc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002bfe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	3750      	adds	r7, #80	; 0x50
 8002c04:	46bd      	mov	sp, r7
 8002c06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c0a:	bf00      	nop
 8002c0c:	40023800 	.word	0x40023800
 8002c10:	00f42400 	.word	0x00f42400
 8002c14:	007a1200 	.word	0x007a1200

08002c18 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c1c:	4b03      	ldr	r3, [pc, #12]	; (8002c2c <HAL_RCC_GetHCLKFreq+0x14>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr
 8002c2a:	bf00      	nop
 8002c2c:	2000001c 	.word	0x2000001c

08002c30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002c34:	f7ff fff0 	bl	8002c18 <HAL_RCC_GetHCLKFreq>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	4b05      	ldr	r3, [pc, #20]	; (8002c50 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c3c:	689b      	ldr	r3, [r3, #8]
 8002c3e:	0a9b      	lsrs	r3, r3, #10
 8002c40:	f003 0307 	and.w	r3, r3, #7
 8002c44:	4903      	ldr	r1, [pc, #12]	; (8002c54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c46:	5ccb      	ldrb	r3, [r1, r3]
 8002c48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	bd80      	pop	{r7, pc}
 8002c50:	40023800 	.word	0x40023800
 8002c54:	0800a030 	.word	0x0800a030

08002c58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002c5c:	f7ff ffdc 	bl	8002c18 <HAL_RCC_GetHCLKFreq>
 8002c60:	4602      	mov	r2, r0
 8002c62:	4b05      	ldr	r3, [pc, #20]	; (8002c78 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	0b5b      	lsrs	r3, r3, #13
 8002c68:	f003 0307 	and.w	r3, r3, #7
 8002c6c:	4903      	ldr	r1, [pc, #12]	; (8002c7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c6e:	5ccb      	ldrb	r3, [r1, r3]
 8002c70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	bd80      	pop	{r7, pc}
 8002c78:	40023800 	.word	0x40023800
 8002c7c:	0800a030 	.word	0x0800a030

08002c80 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b088      	sub	sp, #32
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002c90:	2300      	movs	r3, #0
 8002c92:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002c94:	2300      	movs	r3, #0
 8002c96:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f003 0301 	and.w	r3, r3, #1
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d012      	beq.n	8002cce <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002ca8:	4b69      	ldr	r3, [pc, #420]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	4a68      	ldr	r2, [pc, #416]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cae:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002cb2:	6093      	str	r3, [r2, #8]
 8002cb4:	4b66      	ldr	r3, [pc, #408]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cb6:	689a      	ldr	r2, [r3, #8]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cbc:	4964      	ldr	r1, [pc, #400]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d101      	bne.n	8002cce <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d017      	beq.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002cda:	4b5d      	ldr	r3, [pc, #372]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cdc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ce0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ce8:	4959      	ldr	r1, [pc, #356]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cea:	4313      	orrs	r3, r2
 8002cec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cf4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002cf8:	d101      	bne.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d101      	bne.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002d06:	2301      	movs	r3, #1
 8002d08:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d017      	beq.n	8002d46 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002d16:	4b4e      	ldr	r3, [pc, #312]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d1c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d24:	494a      	ldr	r1, [pc, #296]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d26:	4313      	orrs	r3, r2
 8002d28:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d30:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d34:	d101      	bne.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002d36:	2301      	movs	r3, #1
 8002d38:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d101      	bne.n	8002d46 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002d42:	2301      	movs	r3, #1
 8002d44:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d001      	beq.n	8002d56 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002d52:	2301      	movs	r3, #1
 8002d54:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 0320 	and.w	r3, r3, #32
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	f000 808b 	beq.w	8002e7a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002d64:	4b3a      	ldr	r3, [pc, #232]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d68:	4a39      	ldr	r2, [pc, #228]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d6e:	6413      	str	r3, [r2, #64]	; 0x40
 8002d70:	4b37      	ldr	r3, [pc, #220]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d78:	60bb      	str	r3, [r7, #8]
 8002d7a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002d7c:	4b35      	ldr	r3, [pc, #212]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a34      	ldr	r2, [pc, #208]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002d82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d86:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d88:	f7fe fde6 	bl	8001958 <HAL_GetTick>
 8002d8c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002d8e:	e008      	b.n	8002da2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d90:	f7fe fde2 	bl	8001958 <HAL_GetTick>
 8002d94:	4602      	mov	r2, r0
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	2b64      	cmp	r3, #100	; 0x64
 8002d9c:	d901      	bls.n	8002da2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002d9e:	2303      	movs	r3, #3
 8002da0:	e357      	b.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002da2:	4b2c      	ldr	r3, [pc, #176]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d0f0      	beq.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002dae:	4b28      	ldr	r3, [pc, #160]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002db0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002db2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002db6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d035      	beq.n	8002e2a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dc6:	693a      	ldr	r2, [r7, #16]
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	d02e      	beq.n	8002e2a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002dcc:	4b20      	ldr	r3, [pc, #128]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dd0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002dd4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002dd6:	4b1e      	ldr	r3, [pc, #120]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dda:	4a1d      	ldr	r2, [pc, #116]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ddc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002de0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002de2:	4b1b      	ldr	r3, [pc, #108]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002de4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002de6:	4a1a      	ldr	r2, [pc, #104]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002de8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dec:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002dee:	4a18      	ldr	r2, [pc, #96]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002df4:	4b16      	ldr	r3, [pc, #88]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002df6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002df8:	f003 0301 	and.w	r3, r3, #1
 8002dfc:	2b01      	cmp	r3, #1
 8002dfe:	d114      	bne.n	8002e2a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e00:	f7fe fdaa 	bl	8001958 <HAL_GetTick>
 8002e04:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e06:	e00a      	b.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e08:	f7fe fda6 	bl	8001958 <HAL_GetTick>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	1ad3      	subs	r3, r2, r3
 8002e12:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d901      	bls.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002e1a:	2303      	movs	r3, #3
 8002e1c:	e319      	b.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e1e:	4b0c      	ldr	r3, [pc, #48]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e22:	f003 0302 	and.w	r3, r3, #2
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d0ee      	beq.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e32:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002e36:	d111      	bne.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002e38:	4b05      	ldr	r3, [pc, #20]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002e44:	4b04      	ldr	r3, [pc, #16]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002e46:	400b      	ands	r3, r1
 8002e48:	4901      	ldr	r1, [pc, #4]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	608b      	str	r3, [r1, #8]
 8002e4e:	e00b      	b.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002e50:	40023800 	.word	0x40023800
 8002e54:	40007000 	.word	0x40007000
 8002e58:	0ffffcff 	.word	0x0ffffcff
 8002e5c:	4baa      	ldr	r3, [pc, #680]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	4aa9      	ldr	r2, [pc, #676]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e62:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002e66:	6093      	str	r3, [r2, #8]
 8002e68:	4ba7      	ldr	r3, [pc, #668]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e6a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e74:	49a4      	ldr	r1, [pc, #656]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e76:	4313      	orrs	r3, r2
 8002e78:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 0310 	and.w	r3, r3, #16
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d010      	beq.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002e86:	4ba0      	ldr	r3, [pc, #640]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e8c:	4a9e      	ldr	r2, [pc, #632]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e8e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e92:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002e96:	4b9c      	ldr	r3, [pc, #624]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e98:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ea0:	4999      	ldr	r1, [pc, #612]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d00a      	beq.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002eb4:	4b94      	ldr	r3, [pc, #592]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002eb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eba:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ec2:	4991      	ldr	r1, [pc, #580]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d00a      	beq.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002ed6:	4b8c      	ldr	r3, [pc, #560]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ed8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002edc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ee4:	4988      	ldr	r1, [pc, #544]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d00a      	beq.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002ef8:	4b83      	ldr	r3, [pc, #524]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002efa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002efe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f06:	4980      	ldr	r1, [pc, #512]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d00a      	beq.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002f1a:	4b7b      	ldr	r3, [pc, #492]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f20:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f28:	4977      	ldr	r1, [pc, #476]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d00a      	beq.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f3c:	4b72      	ldr	r3, [pc, #456]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f42:	f023 0203 	bic.w	r2, r3, #3
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f4a:	496f      	ldr	r1, [pc, #444]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d00a      	beq.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002f5e:	4b6a      	ldr	r3, [pc, #424]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f64:	f023 020c 	bic.w	r2, r3, #12
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f6c:	4966      	ldr	r1, [pc, #408]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d00a      	beq.n	8002f96 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002f80:	4b61      	ldr	r3, [pc, #388]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f86:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f8e:	495e      	ldr	r1, [pc, #376]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f90:	4313      	orrs	r3, r2
 8002f92:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d00a      	beq.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002fa2:	4b59      	ldr	r3, [pc, #356]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002fa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fa8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fb0:	4955      	ldr	r1, [pc, #340]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d00a      	beq.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002fc4:	4b50      	ldr	r3, [pc, #320]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002fc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fca:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fd2:	494d      	ldr	r1, [pc, #308]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d00a      	beq.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002fe6:	4b48      	ldr	r3, [pc, #288]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002fe8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fec:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ff4:	4944      	ldr	r1, [pc, #272]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003004:	2b00      	cmp	r3, #0
 8003006:	d00a      	beq.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003008:	4b3f      	ldr	r3, [pc, #252]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800300a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800300e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003016:	493c      	ldr	r1, [pc, #240]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003018:	4313      	orrs	r3, r2
 800301a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003026:	2b00      	cmp	r3, #0
 8003028:	d00a      	beq.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800302a:	4b37      	ldr	r3, [pc, #220]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800302c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003030:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003038:	4933      	ldr	r1, [pc, #204]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800303a:	4313      	orrs	r3, r2
 800303c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003048:	2b00      	cmp	r3, #0
 800304a:	d00a      	beq.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800304c:	4b2e      	ldr	r3, [pc, #184]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800304e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003052:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800305a:	492b      	ldr	r1, [pc, #172]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800305c:	4313      	orrs	r3, r2
 800305e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800306a:	2b00      	cmp	r3, #0
 800306c:	d011      	beq.n	8003092 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800306e:	4b26      	ldr	r3, [pc, #152]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003070:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003074:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800307c:	4922      	ldr	r1, [pc, #136]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800307e:	4313      	orrs	r3, r2
 8003080:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003088:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800308c:	d101      	bne.n	8003092 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800308e:	2301      	movs	r3, #1
 8003090:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 0308 	and.w	r3, r3, #8
 800309a:	2b00      	cmp	r3, #0
 800309c:	d001      	beq.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800309e:	2301      	movs	r3, #1
 80030a0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d00a      	beq.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80030ae:	4b16      	ldr	r3, [pc, #88]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030b4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030bc:	4912      	ldr	r1, [pc, #72]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030be:	4313      	orrs	r3, r2
 80030c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d00b      	beq.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80030d0:	4b0d      	ldr	r3, [pc, #52]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030d6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80030e0:	4909      	ldr	r1, [pc, #36]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030e2:	4313      	orrs	r3, r2
 80030e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80030e8:	69fb      	ldr	r3, [r7, #28]
 80030ea:	2b01      	cmp	r3, #1
 80030ec:	d006      	beq.n	80030fc <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	f000 80d9 	beq.w	80032ae <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80030fc:	4b02      	ldr	r3, [pc, #8]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a01      	ldr	r2, [pc, #4]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003102:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003106:	e001      	b.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8003108:	40023800 	.word	0x40023800
 800310c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800310e:	f7fe fc23 	bl	8001958 <HAL_GetTick>
 8003112:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003114:	e008      	b.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003116:	f7fe fc1f 	bl	8001958 <HAL_GetTick>
 800311a:	4602      	mov	r2, r0
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	1ad3      	subs	r3, r2, r3
 8003120:	2b64      	cmp	r3, #100	; 0x64
 8003122:	d901      	bls.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003124:	2303      	movs	r3, #3
 8003126:	e194      	b.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003128:	4b6c      	ldr	r3, [pc, #432]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003130:	2b00      	cmp	r3, #0
 8003132:	d1f0      	bne.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f003 0301 	and.w	r3, r3, #1
 800313c:	2b00      	cmp	r3, #0
 800313e:	d021      	beq.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003144:	2b00      	cmp	r3, #0
 8003146:	d11d      	bne.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003148:	4b64      	ldr	r3, [pc, #400]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800314a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800314e:	0c1b      	lsrs	r3, r3, #16
 8003150:	f003 0303 	and.w	r3, r3, #3
 8003154:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003156:	4b61      	ldr	r3, [pc, #388]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003158:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800315c:	0e1b      	lsrs	r3, r3, #24
 800315e:	f003 030f 	and.w	r3, r3, #15
 8003162:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	019a      	lsls	r2, r3, #6
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	041b      	lsls	r3, r3, #16
 800316e:	431a      	orrs	r2, r3
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	061b      	lsls	r3, r3, #24
 8003174:	431a      	orrs	r2, r3
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	071b      	lsls	r3, r3, #28
 800317c:	4957      	ldr	r1, [pc, #348]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800317e:	4313      	orrs	r3, r2
 8003180:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800318c:	2b00      	cmp	r3, #0
 800318e:	d004      	beq.n	800319a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003194:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003198:	d00a      	beq.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d02e      	beq.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031ae:	d129      	bne.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80031b0:	4b4a      	ldr	r3, [pc, #296]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80031b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031b6:	0c1b      	lsrs	r3, r3, #16
 80031b8:	f003 0303 	and.w	r3, r3, #3
 80031bc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80031be:	4b47      	ldr	r3, [pc, #284]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80031c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031c4:	0f1b      	lsrs	r3, r3, #28
 80031c6:	f003 0307 	and.w	r3, r3, #7
 80031ca:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	019a      	lsls	r2, r3, #6
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	041b      	lsls	r3, r3, #16
 80031d6:	431a      	orrs	r2, r3
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	68db      	ldr	r3, [r3, #12]
 80031dc:	061b      	lsls	r3, r3, #24
 80031de:	431a      	orrs	r2, r3
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	071b      	lsls	r3, r3, #28
 80031e4:	493d      	ldr	r1, [pc, #244]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80031e6:	4313      	orrs	r3, r2
 80031e8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80031ec:	4b3b      	ldr	r3, [pc, #236]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80031ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80031f2:	f023 021f 	bic.w	r2, r3, #31
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031fa:	3b01      	subs	r3, #1
 80031fc:	4937      	ldr	r1, [pc, #220]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80031fe:	4313      	orrs	r3, r2
 8003200:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800320c:	2b00      	cmp	r3, #0
 800320e:	d01d      	beq.n	800324c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003210:	4b32      	ldr	r3, [pc, #200]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003212:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003216:	0e1b      	lsrs	r3, r3, #24
 8003218:	f003 030f 	and.w	r3, r3, #15
 800321c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800321e:	4b2f      	ldr	r3, [pc, #188]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003220:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003224:	0f1b      	lsrs	r3, r3, #28
 8003226:	f003 0307 	and.w	r3, r3, #7
 800322a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	019a      	lsls	r2, r3, #6
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	691b      	ldr	r3, [r3, #16]
 8003236:	041b      	lsls	r3, r3, #16
 8003238:	431a      	orrs	r2, r3
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	061b      	lsls	r3, r3, #24
 800323e:	431a      	orrs	r2, r3
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	071b      	lsls	r3, r3, #28
 8003244:	4925      	ldr	r1, [pc, #148]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003246:	4313      	orrs	r3, r2
 8003248:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003254:	2b00      	cmp	r3, #0
 8003256:	d011      	beq.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	019a      	lsls	r2, r3, #6
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	691b      	ldr	r3, [r3, #16]
 8003262:	041b      	lsls	r3, r3, #16
 8003264:	431a      	orrs	r2, r3
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	68db      	ldr	r3, [r3, #12]
 800326a:	061b      	lsls	r3, r3, #24
 800326c:	431a      	orrs	r2, r3
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	071b      	lsls	r3, r3, #28
 8003274:	4919      	ldr	r1, [pc, #100]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003276:	4313      	orrs	r3, r2
 8003278:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800327c:	4b17      	ldr	r3, [pc, #92]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a16      	ldr	r2, [pc, #88]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003282:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003286:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003288:	f7fe fb66 	bl	8001958 <HAL_GetTick>
 800328c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800328e:	e008      	b.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003290:	f7fe fb62 	bl	8001958 <HAL_GetTick>
 8003294:	4602      	mov	r2, r0
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	1ad3      	subs	r3, r2, r3
 800329a:	2b64      	cmp	r3, #100	; 0x64
 800329c:	d901      	bls.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800329e:	2303      	movs	r3, #3
 80032a0:	e0d7      	b.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80032a2:	4b0e      	ldr	r3, [pc, #56]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d0f0      	beq.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80032ae:	69bb      	ldr	r3, [r7, #24]
 80032b0:	2b01      	cmp	r3, #1
 80032b2:	f040 80cd 	bne.w	8003450 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80032b6:	4b09      	ldr	r3, [pc, #36]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a08      	ldr	r2, [pc, #32]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80032bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032c2:	f7fe fb49 	bl	8001958 <HAL_GetTick>
 80032c6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80032c8:	e00a      	b.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80032ca:	f7fe fb45 	bl	8001958 <HAL_GetTick>
 80032ce:	4602      	mov	r2, r0
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	1ad3      	subs	r3, r2, r3
 80032d4:	2b64      	cmp	r3, #100	; 0x64
 80032d6:	d903      	bls.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80032d8:	2303      	movs	r3, #3
 80032da:	e0ba      	b.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80032dc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80032e0:	4b5e      	ldr	r3, [pc, #376]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80032e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80032ec:	d0ed      	beq.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d003      	beq.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x682>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d009      	beq.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800330a:	2b00      	cmp	r3, #0
 800330c:	d02e      	beq.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003312:	2b00      	cmp	r3, #0
 8003314:	d12a      	bne.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003316:	4b51      	ldr	r3, [pc, #324]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003318:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800331c:	0c1b      	lsrs	r3, r3, #16
 800331e:	f003 0303 	and.w	r3, r3, #3
 8003322:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003324:	4b4d      	ldr	r3, [pc, #308]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003326:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800332a:	0f1b      	lsrs	r3, r3, #28
 800332c:	f003 0307 	and.w	r3, r3, #7
 8003330:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	695b      	ldr	r3, [r3, #20]
 8003336:	019a      	lsls	r2, r3, #6
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	041b      	lsls	r3, r3, #16
 800333c:	431a      	orrs	r2, r3
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	699b      	ldr	r3, [r3, #24]
 8003342:	061b      	lsls	r3, r3, #24
 8003344:	431a      	orrs	r2, r3
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	071b      	lsls	r3, r3, #28
 800334a:	4944      	ldr	r1, [pc, #272]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800334c:	4313      	orrs	r3, r2
 800334e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003352:	4b42      	ldr	r3, [pc, #264]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003354:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003358:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003360:	3b01      	subs	r3, #1
 8003362:	021b      	lsls	r3, r3, #8
 8003364:	493d      	ldr	r1, [pc, #244]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003366:	4313      	orrs	r3, r2
 8003368:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003374:	2b00      	cmp	r3, #0
 8003376:	d022      	beq.n	80033be <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800337c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003380:	d11d      	bne.n	80033be <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003382:	4b36      	ldr	r3, [pc, #216]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003384:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003388:	0e1b      	lsrs	r3, r3, #24
 800338a:	f003 030f 	and.w	r3, r3, #15
 800338e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003390:	4b32      	ldr	r3, [pc, #200]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003392:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003396:	0f1b      	lsrs	r3, r3, #28
 8003398:	f003 0307 	and.w	r3, r3, #7
 800339c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	695b      	ldr	r3, [r3, #20]
 80033a2:	019a      	lsls	r2, r3, #6
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6a1b      	ldr	r3, [r3, #32]
 80033a8:	041b      	lsls	r3, r3, #16
 80033aa:	431a      	orrs	r2, r3
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	061b      	lsls	r3, r3, #24
 80033b0:	431a      	orrs	r2, r3
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	071b      	lsls	r3, r3, #28
 80033b6:	4929      	ldr	r1, [pc, #164]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80033b8:	4313      	orrs	r3, r2
 80033ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f003 0308 	and.w	r3, r3, #8
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d028      	beq.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80033ca:	4b24      	ldr	r3, [pc, #144]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80033cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033d0:	0e1b      	lsrs	r3, r3, #24
 80033d2:	f003 030f 	and.w	r3, r3, #15
 80033d6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80033d8:	4b20      	ldr	r3, [pc, #128]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80033da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033de:	0c1b      	lsrs	r3, r3, #16
 80033e0:	f003 0303 	and.w	r3, r3, #3
 80033e4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	695b      	ldr	r3, [r3, #20]
 80033ea:	019a      	lsls	r2, r3, #6
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	041b      	lsls	r3, r3, #16
 80033f0:	431a      	orrs	r2, r3
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	061b      	lsls	r3, r3, #24
 80033f6:	431a      	orrs	r2, r3
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	69db      	ldr	r3, [r3, #28]
 80033fc:	071b      	lsls	r3, r3, #28
 80033fe:	4917      	ldr	r1, [pc, #92]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003400:	4313      	orrs	r3, r2
 8003402:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003406:	4b15      	ldr	r3, [pc, #84]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003408:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800340c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003414:	4911      	ldr	r1, [pc, #68]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003416:	4313      	orrs	r3, r2
 8003418:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800341c:	4b0f      	ldr	r3, [pc, #60]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a0e      	ldr	r2, [pc, #56]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003422:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003426:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003428:	f7fe fa96 	bl	8001958 <HAL_GetTick>
 800342c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800342e:	e008      	b.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003430:	f7fe fa92 	bl	8001958 <HAL_GetTick>
 8003434:	4602      	mov	r2, r0
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	1ad3      	subs	r3, r2, r3
 800343a:	2b64      	cmp	r3, #100	; 0x64
 800343c:	d901      	bls.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800343e:	2303      	movs	r3, #3
 8003440:	e007      	b.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003442:	4b06      	ldr	r3, [pc, #24]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800344a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800344e:	d1ef      	bne.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8003450:	2300      	movs	r3, #0
}
 8003452:	4618      	mov	r0, r3
 8003454:	3720      	adds	r7, #32
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}
 800345a:	bf00      	nop
 800345c:	40023800 	.word	0x40023800

08003460 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b084      	sub	sp, #16
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d101      	bne.n	8003476 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	e071      	b.n	800355a <HAL_RTC_Init+0xfa>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	7f5b      	ldrb	r3, [r3, #29]
 800347a:	b2db      	uxtb	r3, r3
 800347c:	2b00      	cmp	r3, #0
 800347e:	d105      	bne.n	800348c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2200      	movs	r2, #0
 8003484:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	f7fe f8c4 	bl	8001614 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2202      	movs	r2, #2
 8003490:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	68db      	ldr	r3, [r3, #12]
 8003498:	f003 0310 	and.w	r3, r3, #16
 800349c:	2b10      	cmp	r3, #16
 800349e:	d053      	beq.n	8003548 <HAL_RTC_Init+0xe8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	22ca      	movs	r2, #202	; 0xca
 80034a6:	625a      	str	r2, [r3, #36]	; 0x24
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	2253      	movs	r2, #83	; 0x53
 80034ae:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80034b0:	6878      	ldr	r0, [r7, #4]
 80034b2:	f000 f881 	bl	80035b8 <RTC_EnterInitMode>
 80034b6:	4603      	mov	r3, r0
 80034b8:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80034ba:	7bfb      	ldrb	r3, [r7, #15]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d12a      	bne.n	8003516 <HAL_RTC_Init+0xb6>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	6899      	ldr	r1, [r3, #8]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	4b26      	ldr	r3, [pc, #152]	; (8003564 <HAL_RTC_Init+0x104>)
 80034cc:	400b      	ands	r3, r1
 80034ce:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	6899      	ldr	r1, [r3, #8]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	685a      	ldr	r2, [r3, #4]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	691b      	ldr	r3, [r3, #16]
 80034de:	431a      	orrs	r2, r3
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	695b      	ldr	r3, [r3, #20]
 80034e4:	431a      	orrs	r2, r3
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	430a      	orrs	r2, r1
 80034ec:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	687a      	ldr	r2, [r7, #4]
 80034f4:	68d2      	ldr	r2, [r2, #12]
 80034f6:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	6919      	ldr	r1, [r3, #16]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	041a      	lsls	r2, r3, #16
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	430a      	orrs	r2, r1
 800350a:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800350c:	6878      	ldr	r0, [r7, #4]
 800350e:	f000 f88a 	bl	8003626 <RTC_ExitInitMode>
 8003512:	4603      	mov	r3, r0
 8003514:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8003516:	7bfb      	ldrb	r3, [r7, #15]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d110      	bne.n	800353e <HAL_RTC_Init+0xde>
    {
      hrtc->Instance->OR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f022 0208 	bic.w	r2, r2, #8
 800352a:	64da      	str	r2, [r3, #76]	; 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	699a      	ldr	r2, [r3, #24]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	430a      	orrs	r2, r1
 800353c:	64da      	str	r2, [r3, #76]	; 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	22ff      	movs	r2, #255	; 0xff
 8003544:	625a      	str	r2, [r3, #36]	; 0x24
 8003546:	e001      	b.n	800354c <HAL_RTC_Init+0xec>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8003548:	2300      	movs	r3, #0
 800354a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800354c:	7bfb      	ldrb	r3, [r7, #15]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d102      	bne.n	8003558 <HAL_RTC_Init+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2201      	movs	r2, #1
 8003556:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8003558:	7bfb      	ldrb	r3, [r7, #15]
}
 800355a:	4618      	mov	r0, r3
 800355c:	3710      	adds	r7, #16
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}
 8003562:	bf00      	nop
 8003564:	ff8fffbf 	.word	0xff8fffbf

08003568 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b084      	sub	sp, #16
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003570:	2300      	movs	r3, #0
 8003572:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	68da      	ldr	r2, [r3, #12]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003582:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003584:	f7fe f9e8 	bl	8001958 <HAL_GetTick>
 8003588:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800358a:	e009      	b.n	80035a0 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800358c:	f7fe f9e4 	bl	8001958 <HAL_GetTick>
 8003590:	4602      	mov	r2, r0
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	1ad3      	subs	r3, r2, r3
 8003596:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800359a:	d901      	bls.n	80035a0 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800359c:	2303      	movs	r3, #3
 800359e:	e007      	b.n	80035b0 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	68db      	ldr	r3, [r3, #12]
 80035a6:	f003 0320 	and.w	r3, r3, #32
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d0ee      	beq.n	800358c <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80035ae:	2300      	movs	r3, #0
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	3710      	adds	r7, #16
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}

080035b8 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b084      	sub	sp, #16
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80035c0:	2300      	movs	r3, #0
 80035c2:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80035c4:	2300      	movs	r3, #0
 80035c6:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	68db      	ldr	r3, [r3, #12]
 80035ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d122      	bne.n	800361c <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	68da      	ldr	r2, [r3, #12]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80035e4:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80035e6:	f7fe f9b7 	bl	8001958 <HAL_GetTick>
 80035ea:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80035ec:	e00c      	b.n	8003608 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80035ee:	f7fe f9b3 	bl	8001958 <HAL_GetTick>
 80035f2:	4602      	mov	r2, r0
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	1ad3      	subs	r3, r2, r3
 80035f8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80035fc:	d904      	bls.n	8003608 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2204      	movs	r2, #4
 8003602:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8003604:	2301      	movs	r3, #1
 8003606:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	68db      	ldr	r3, [r3, #12]
 800360e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003612:	2b00      	cmp	r3, #0
 8003614:	d102      	bne.n	800361c <RTC_EnterInitMode+0x64>
 8003616:	7bfb      	ldrb	r3, [r7, #15]
 8003618:	2b01      	cmp	r3, #1
 800361a:	d1e8      	bne.n	80035ee <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800361c:	7bfb      	ldrb	r3, [r7, #15]
}
 800361e:	4618      	mov	r0, r3
 8003620:	3710      	adds	r7, #16
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}

08003626 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003626:	b580      	push	{r7, lr}
 8003628:	b084      	sub	sp, #16
 800362a:	af00      	add	r7, sp, #0
 800362c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800362e:	2300      	movs	r3, #0
 8003630:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	68da      	ldr	r2, [r3, #12]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003640:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	f003 0320 	and.w	r3, r3, #32
 800364c:	2b00      	cmp	r3, #0
 800364e:	d10a      	bne.n	8003666 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003650:	6878      	ldr	r0, [r7, #4]
 8003652:	f7ff ff89 	bl	8003568 <HAL_RTC_WaitForSynchro>
 8003656:	4603      	mov	r3, r0
 8003658:	2b00      	cmp	r3, #0
 800365a:	d004      	beq.n	8003666 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2204      	movs	r2, #4
 8003660:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003666:	7bfb      	ldrb	r3, [r7, #15]
}
 8003668:	4618      	mov	r0, r3
 800366a:	3710      	adds	r7, #16
 800366c:	46bd      	mov	sp, r7
 800366e:	bd80      	pop	{r7, pc}

08003670 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b082      	sub	sp, #8
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d101      	bne.n	8003682 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	e049      	b.n	8003716 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003688:	b2db      	uxtb	r3, r3
 800368a:	2b00      	cmp	r3, #0
 800368c:	d106      	bne.n	800369c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2200      	movs	r2, #0
 8003692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	f7fd ffea 	bl	8001670 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2202      	movs	r2, #2
 80036a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	3304      	adds	r3, #4
 80036ac:	4619      	mov	r1, r3
 80036ae:	4610      	mov	r0, r2
 80036b0:	f000 f8a6 	bl	8003800 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2201      	movs	r2, #1
 80036b8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2201      	movs	r2, #1
 80036c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2201      	movs	r2, #1
 80036c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2201      	movs	r2, #1
 80036d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2201      	movs	r2, #1
 80036d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2201      	movs	r2, #1
 80036e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2201      	movs	r2, #1
 80036e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2201      	movs	r2, #1
 80036f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2201      	movs	r2, #1
 80036f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2201      	movs	r2, #1
 8003700:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2201      	movs	r2, #1
 8003708:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2201      	movs	r2, #1
 8003710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003714:	2300      	movs	r3, #0
}
 8003716:	4618      	mov	r0, r3
 8003718:	3708      	adds	r7, #8
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}
	...

08003720 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003720:	b480      	push	{r7}
 8003722:	b085      	sub	sp, #20
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800372e:	b2db      	uxtb	r3, r3
 8003730:	2b01      	cmp	r3, #1
 8003732:	d001      	beq.n	8003738 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	e04c      	b.n	80037d2 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2202      	movs	r2, #2
 800373c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a26      	ldr	r2, [pc, #152]	; (80037e0 <HAL_TIM_Base_Start+0xc0>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d022      	beq.n	8003790 <HAL_TIM_Base_Start+0x70>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003752:	d01d      	beq.n	8003790 <HAL_TIM_Base_Start+0x70>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a22      	ldr	r2, [pc, #136]	; (80037e4 <HAL_TIM_Base_Start+0xc4>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d018      	beq.n	8003790 <HAL_TIM_Base_Start+0x70>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a21      	ldr	r2, [pc, #132]	; (80037e8 <HAL_TIM_Base_Start+0xc8>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d013      	beq.n	8003790 <HAL_TIM_Base_Start+0x70>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a1f      	ldr	r2, [pc, #124]	; (80037ec <HAL_TIM_Base_Start+0xcc>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d00e      	beq.n	8003790 <HAL_TIM_Base_Start+0x70>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a1e      	ldr	r2, [pc, #120]	; (80037f0 <HAL_TIM_Base_Start+0xd0>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d009      	beq.n	8003790 <HAL_TIM_Base_Start+0x70>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a1c      	ldr	r2, [pc, #112]	; (80037f4 <HAL_TIM_Base_Start+0xd4>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d004      	beq.n	8003790 <HAL_TIM_Base_Start+0x70>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a1b      	ldr	r2, [pc, #108]	; (80037f8 <HAL_TIM_Base_Start+0xd8>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d115      	bne.n	80037bc <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	689a      	ldr	r2, [r3, #8]
 8003796:	4b19      	ldr	r3, [pc, #100]	; (80037fc <HAL_TIM_Base_Start+0xdc>)
 8003798:	4013      	ands	r3, r2
 800379a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	2b06      	cmp	r3, #6
 80037a0:	d015      	beq.n	80037ce <HAL_TIM_Base_Start+0xae>
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037a8:	d011      	beq.n	80037ce <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f042 0201 	orr.w	r2, r2, #1
 80037b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037ba:	e008      	b.n	80037ce <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	681a      	ldr	r2, [r3, #0]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f042 0201 	orr.w	r2, r2, #1
 80037ca:	601a      	str	r2, [r3, #0]
 80037cc:	e000      	b.n	80037d0 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037ce:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80037d0:	2300      	movs	r3, #0
}
 80037d2:	4618      	mov	r0, r3
 80037d4:	3714      	adds	r7, #20
 80037d6:	46bd      	mov	sp, r7
 80037d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037dc:	4770      	bx	lr
 80037de:	bf00      	nop
 80037e0:	40010000 	.word	0x40010000
 80037e4:	40000400 	.word	0x40000400
 80037e8:	40000800 	.word	0x40000800
 80037ec:	40000c00 	.word	0x40000c00
 80037f0:	40010400 	.word	0x40010400
 80037f4:	40014000 	.word	0x40014000
 80037f8:	40001800 	.word	0x40001800
 80037fc:	00010007 	.word	0x00010007

08003800 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003800:	b480      	push	{r7}
 8003802:	b085      	sub	sp, #20
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
 8003808:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	4a40      	ldr	r2, [pc, #256]	; (8003914 <TIM_Base_SetConfig+0x114>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d013      	beq.n	8003840 <TIM_Base_SetConfig+0x40>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800381e:	d00f      	beq.n	8003840 <TIM_Base_SetConfig+0x40>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	4a3d      	ldr	r2, [pc, #244]	; (8003918 <TIM_Base_SetConfig+0x118>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d00b      	beq.n	8003840 <TIM_Base_SetConfig+0x40>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	4a3c      	ldr	r2, [pc, #240]	; (800391c <TIM_Base_SetConfig+0x11c>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d007      	beq.n	8003840 <TIM_Base_SetConfig+0x40>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	4a3b      	ldr	r2, [pc, #236]	; (8003920 <TIM_Base_SetConfig+0x120>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d003      	beq.n	8003840 <TIM_Base_SetConfig+0x40>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	4a3a      	ldr	r2, [pc, #232]	; (8003924 <TIM_Base_SetConfig+0x124>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d108      	bne.n	8003852 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003846:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	68fa      	ldr	r2, [r7, #12]
 800384e:	4313      	orrs	r3, r2
 8003850:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	4a2f      	ldr	r2, [pc, #188]	; (8003914 <TIM_Base_SetConfig+0x114>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d02b      	beq.n	80038b2 <TIM_Base_SetConfig+0xb2>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003860:	d027      	beq.n	80038b2 <TIM_Base_SetConfig+0xb2>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	4a2c      	ldr	r2, [pc, #176]	; (8003918 <TIM_Base_SetConfig+0x118>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d023      	beq.n	80038b2 <TIM_Base_SetConfig+0xb2>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	4a2b      	ldr	r2, [pc, #172]	; (800391c <TIM_Base_SetConfig+0x11c>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d01f      	beq.n	80038b2 <TIM_Base_SetConfig+0xb2>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	4a2a      	ldr	r2, [pc, #168]	; (8003920 <TIM_Base_SetConfig+0x120>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d01b      	beq.n	80038b2 <TIM_Base_SetConfig+0xb2>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	4a29      	ldr	r2, [pc, #164]	; (8003924 <TIM_Base_SetConfig+0x124>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d017      	beq.n	80038b2 <TIM_Base_SetConfig+0xb2>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	4a28      	ldr	r2, [pc, #160]	; (8003928 <TIM_Base_SetConfig+0x128>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d013      	beq.n	80038b2 <TIM_Base_SetConfig+0xb2>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	4a27      	ldr	r2, [pc, #156]	; (800392c <TIM_Base_SetConfig+0x12c>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d00f      	beq.n	80038b2 <TIM_Base_SetConfig+0xb2>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	4a26      	ldr	r2, [pc, #152]	; (8003930 <TIM_Base_SetConfig+0x130>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d00b      	beq.n	80038b2 <TIM_Base_SetConfig+0xb2>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	4a25      	ldr	r2, [pc, #148]	; (8003934 <TIM_Base_SetConfig+0x134>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d007      	beq.n	80038b2 <TIM_Base_SetConfig+0xb2>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	4a24      	ldr	r2, [pc, #144]	; (8003938 <TIM_Base_SetConfig+0x138>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d003      	beq.n	80038b2 <TIM_Base_SetConfig+0xb2>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	4a23      	ldr	r2, [pc, #140]	; (800393c <TIM_Base_SetConfig+0x13c>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d108      	bne.n	80038c4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	68db      	ldr	r3, [r3, #12]
 80038be:	68fa      	ldr	r2, [r7, #12]
 80038c0:	4313      	orrs	r3, r2
 80038c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	695b      	ldr	r3, [r3, #20]
 80038ce:	4313      	orrs	r3, r2
 80038d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	68fa      	ldr	r2, [r7, #12]
 80038d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	689a      	ldr	r2, [r3, #8]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	681a      	ldr	r2, [r3, #0]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	4a0a      	ldr	r2, [pc, #40]	; (8003914 <TIM_Base_SetConfig+0x114>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d003      	beq.n	80038f8 <TIM_Base_SetConfig+0xf8>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	4a0c      	ldr	r2, [pc, #48]	; (8003924 <TIM_Base_SetConfig+0x124>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d103      	bne.n	8003900 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	691a      	ldr	r2, [r3, #16]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2201      	movs	r2, #1
 8003904:	615a      	str	r2, [r3, #20]
}
 8003906:	bf00      	nop
 8003908:	3714      	adds	r7, #20
 800390a:	46bd      	mov	sp, r7
 800390c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003910:	4770      	bx	lr
 8003912:	bf00      	nop
 8003914:	40010000 	.word	0x40010000
 8003918:	40000400 	.word	0x40000400
 800391c:	40000800 	.word	0x40000800
 8003920:	40000c00 	.word	0x40000c00
 8003924:	40010400 	.word	0x40010400
 8003928:	40014000 	.word	0x40014000
 800392c:	40014400 	.word	0x40014400
 8003930:	40014800 	.word	0x40014800
 8003934:	40001800 	.word	0x40001800
 8003938:	40001c00 	.word	0x40001c00
 800393c:	40002000 	.word	0x40002000

08003940 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003940:	b480      	push	{r7}
 8003942:	b085      	sub	sp, #20
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
 8003948:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003950:	2b01      	cmp	r3, #1
 8003952:	d101      	bne.n	8003958 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003954:	2302      	movs	r3, #2
 8003956:	e06d      	b.n	8003a34 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2201      	movs	r2, #1
 800395c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2202      	movs	r2, #2
 8003964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a30      	ldr	r2, [pc, #192]	; (8003a40 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d004      	beq.n	800398c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a2f      	ldr	r2, [pc, #188]	; (8003a44 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d108      	bne.n	800399e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003992:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	68fa      	ldr	r2, [r7, #12]
 800399a:	4313      	orrs	r3, r2
 800399c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039a4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	68fa      	ldr	r2, [r7, #12]
 80039ac:	4313      	orrs	r3, r2
 80039ae:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	68fa      	ldr	r2, [r7, #12]
 80039b6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a20      	ldr	r2, [pc, #128]	; (8003a40 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d022      	beq.n	8003a08 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039ca:	d01d      	beq.n	8003a08 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a1d      	ldr	r2, [pc, #116]	; (8003a48 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d018      	beq.n	8003a08 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a1c      	ldr	r2, [pc, #112]	; (8003a4c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d013      	beq.n	8003a08 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a1a      	ldr	r2, [pc, #104]	; (8003a50 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d00e      	beq.n	8003a08 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a15      	ldr	r2, [pc, #84]	; (8003a44 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d009      	beq.n	8003a08 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a16      	ldr	r2, [pc, #88]	; (8003a54 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d004      	beq.n	8003a08 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a15      	ldr	r2, [pc, #84]	; (8003a58 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d10c      	bne.n	8003a22 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a0e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	68ba      	ldr	r2, [r7, #8]
 8003a16:	4313      	orrs	r3, r2
 8003a18:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	68ba      	ldr	r2, [r7, #8]
 8003a20:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2201      	movs	r2, #1
 8003a26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a32:	2300      	movs	r3, #0
}
 8003a34:	4618      	mov	r0, r3
 8003a36:	3714      	adds	r7, #20
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3e:	4770      	bx	lr
 8003a40:	40010000 	.word	0x40010000
 8003a44:	40010400 	.word	0x40010400
 8003a48:	40000400 	.word	0x40000400
 8003a4c:	40000800 	.word	0x40000800
 8003a50:	40000c00 	.word	0x40000c00
 8003a54:	40014000 	.word	0x40014000
 8003a58:	40001800 	.word	0x40001800

08003a5c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b082      	sub	sp, #8
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d101      	bne.n	8003a6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e040      	b.n	8003af0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d106      	bne.n	8003a84 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	f7fd fe16 	bl	80016b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2224      	movs	r2, #36	; 0x24
 8003a88:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	681a      	ldr	r2, [r3, #0]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f022 0201 	bic.w	r2, r2, #1
 8003a98:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003a9a:	6878      	ldr	r0, [r7, #4]
 8003a9c:	f000 fba2 	bl	80041e4 <UART_SetConfig>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	d101      	bne.n	8003aaa <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e022      	b.n	8003af0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d002      	beq.n	8003ab8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f000 fdfa 	bl	80046ac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	685a      	ldr	r2, [r3, #4]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003ac6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	689a      	ldr	r2, [r3, #8]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ad6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	681a      	ldr	r2, [r3, #0]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f042 0201 	orr.w	r2, r2, #1
 8003ae6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003ae8:	6878      	ldr	r0, [r7, #4]
 8003aea:	f000 fe81 	bl	80047f0 <UART_CheckIdleState>
 8003aee:	4603      	mov	r3, r0
}
 8003af0:	4618      	mov	r0, r3
 8003af2:	3708      	adds	r7, #8
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}

08003af8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b08a      	sub	sp, #40	; 0x28
 8003afc:	af02      	add	r7, sp, #8
 8003afe:	60f8      	str	r0, [r7, #12]
 8003b00:	60b9      	str	r1, [r7, #8]
 8003b02:	603b      	str	r3, [r7, #0]
 8003b04:	4613      	mov	r3, r2
 8003b06:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b0c:	2b20      	cmp	r3, #32
 8003b0e:	d171      	bne.n	8003bf4 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d002      	beq.n	8003b1c <HAL_UART_Transmit+0x24>
 8003b16:	88fb      	ldrh	r3, [r7, #6]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d101      	bne.n	8003b20 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	e06a      	b.n	8003bf6 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2200      	movs	r2, #0
 8003b24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2221      	movs	r2, #33	; 0x21
 8003b2c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003b2e:	f7fd ff13 	bl	8001958 <HAL_GetTick>
 8003b32:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	88fa      	ldrh	r2, [r7, #6]
 8003b38:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	88fa      	ldrh	r2, [r7, #6]
 8003b40:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b4c:	d108      	bne.n	8003b60 <HAL_UART_Transmit+0x68>
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	691b      	ldr	r3, [r3, #16]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d104      	bne.n	8003b60 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003b56:	2300      	movs	r3, #0
 8003b58:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	61bb      	str	r3, [r7, #24]
 8003b5e:	e003      	b.n	8003b68 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b64:	2300      	movs	r3, #0
 8003b66:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003b68:	e02c      	b.n	8003bc4 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	9300      	str	r3, [sp, #0]
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	2200      	movs	r2, #0
 8003b72:	2180      	movs	r1, #128	; 0x80
 8003b74:	68f8      	ldr	r0, [r7, #12]
 8003b76:	f000 fe72 	bl	800485e <UART_WaitOnFlagUntilTimeout>
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d001      	beq.n	8003b84 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8003b80:	2303      	movs	r3, #3
 8003b82:	e038      	b.n	8003bf6 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003b84:	69fb      	ldr	r3, [r7, #28]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d10b      	bne.n	8003ba2 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b8a:	69bb      	ldr	r3, [r7, #24]
 8003b8c:	881b      	ldrh	r3, [r3, #0]
 8003b8e:	461a      	mov	r2, r3
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b98:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003b9a:	69bb      	ldr	r3, [r7, #24]
 8003b9c:	3302      	adds	r3, #2
 8003b9e:	61bb      	str	r3, [r7, #24]
 8003ba0:	e007      	b.n	8003bb2 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003ba2:	69fb      	ldr	r3, [r7, #28]
 8003ba4:	781a      	ldrb	r2, [r3, #0]
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003bac:	69fb      	ldr	r3, [r7, #28]
 8003bae:	3301      	adds	r3, #1
 8003bb0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003bb8:	b29b      	uxth	r3, r3
 8003bba:	3b01      	subs	r3, #1
 8003bbc:	b29a      	uxth	r2, r3
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003bca:	b29b      	uxth	r3, r3
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d1cc      	bne.n	8003b6a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	9300      	str	r3, [sp, #0]
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	2140      	movs	r1, #64	; 0x40
 8003bda:	68f8      	ldr	r0, [r7, #12]
 8003bdc:	f000 fe3f 	bl	800485e <UART_WaitOnFlagUntilTimeout>
 8003be0:	4603      	mov	r3, r0
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d001      	beq.n	8003bea <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8003be6:	2303      	movs	r3, #3
 8003be8:	e005      	b.n	8003bf6 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	2220      	movs	r2, #32
 8003bee:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	e000      	b.n	8003bf6 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003bf4:	2302      	movs	r3, #2
  }
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3720      	adds	r7, #32
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}
	...

08003c00 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b0ba      	sub	sp, #232	; 0xe8
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	69db      	ldr	r3, [r3, #28]
 8003c0e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003c26:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003c2a:	f640 030f 	movw	r3, #2063	; 0x80f
 8003c2e:	4013      	ands	r3, r2
 8003c30:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003c34:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d115      	bne.n	8003c68 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003c3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c40:	f003 0320 	and.w	r3, r3, #32
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d00f      	beq.n	8003c68 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003c48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c4c:	f003 0320 	and.w	r3, r3, #32
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d009      	beq.n	8003c68 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	f000 8297 	beq.w	800418c <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	4798      	blx	r3
      }
      return;
 8003c66:	e291      	b.n	800418c <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003c68:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	f000 8117 	beq.w	8003ea0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003c72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c76:	f003 0301 	and.w	r3, r3, #1
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d106      	bne.n	8003c8c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003c7e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003c82:	4b85      	ldr	r3, [pc, #532]	; (8003e98 <HAL_UART_IRQHandler+0x298>)
 8003c84:	4013      	ands	r3, r2
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	f000 810a 	beq.w	8003ea0 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003c8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c90:	f003 0301 	and.w	r3, r3, #1
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d011      	beq.n	8003cbc <HAL_UART_IRQHandler+0xbc>
 8003c98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d00b      	beq.n	8003cbc <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	2201      	movs	r2, #1
 8003caa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003cb2:	f043 0201 	orr.w	r2, r3, #1
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003cbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cc0:	f003 0302 	and.w	r3, r3, #2
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d011      	beq.n	8003cec <HAL_UART_IRQHandler+0xec>
 8003cc8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ccc:	f003 0301 	and.w	r3, r3, #1
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d00b      	beq.n	8003cec <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	2202      	movs	r2, #2
 8003cda:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ce2:	f043 0204 	orr.w	r2, r3, #4
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003cec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cf0:	f003 0304 	and.w	r3, r3, #4
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d011      	beq.n	8003d1c <HAL_UART_IRQHandler+0x11c>
 8003cf8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003cfc:	f003 0301 	and.w	r3, r3, #1
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d00b      	beq.n	8003d1c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	2204      	movs	r2, #4
 8003d0a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d12:	f043 0202 	orr.w	r2, r3, #2
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003d1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d20:	f003 0308 	and.w	r3, r3, #8
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d017      	beq.n	8003d58 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003d28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d2c:	f003 0320 	and.w	r3, r3, #32
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d105      	bne.n	8003d40 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003d34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d38:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d00b      	beq.n	8003d58 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	2208      	movs	r2, #8
 8003d46:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d4e:	f043 0208 	orr.w	r2, r3, #8
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003d58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d012      	beq.n	8003d8a <HAL_UART_IRQHandler+0x18a>
 8003d64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d68:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d00c      	beq.n	8003d8a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003d78:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d80:	f043 0220 	orr.w	r2, r3, #32
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	f000 81fd 	beq.w	8004190 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003d96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d9a:	f003 0320 	and.w	r3, r3, #32
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d00d      	beq.n	8003dbe <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003da2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003da6:	f003 0320 	and.w	r3, r3, #32
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d007      	beq.n	8003dbe <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d003      	beq.n	8003dbe <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003dba:	6878      	ldr	r0, [r7, #4]
 8003dbc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003dc4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	689b      	ldr	r3, [r3, #8]
 8003dce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dd2:	2b40      	cmp	r3, #64	; 0x40
 8003dd4:	d005      	beq.n	8003de2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003dd6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003dda:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d04f      	beq.n	8003e82 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003de2:	6878      	ldr	r0, [r7, #4]
 8003de4:	f000 fe01 	bl	80049ea <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	689b      	ldr	r3, [r3, #8]
 8003dee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003df2:	2b40      	cmp	r3, #64	; 0x40
 8003df4:	d141      	bne.n	8003e7a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	3308      	adds	r3, #8
 8003dfc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e00:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003e04:	e853 3f00 	ldrex	r3, [r3]
 8003e08:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003e0c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003e10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e14:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	3308      	adds	r3, #8
 8003e1e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003e22:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003e26:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e2a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003e2e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003e32:	e841 2300 	strex	r3, r2, [r1]
 8003e36:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003e3a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d1d9      	bne.n	8003df6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d013      	beq.n	8003e72 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e4e:	4a13      	ldr	r2, [pc, #76]	; (8003e9c <HAL_UART_IRQHandler+0x29c>)
 8003e50:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e56:	4618      	mov	r0, r3
 8003e58:	f7fe f81a 	bl	8001e90 <HAL_DMA_Abort_IT>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d017      	beq.n	8003e92 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e68:	687a      	ldr	r2, [r7, #4]
 8003e6a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003e6c:	4610      	mov	r0, r2
 8003e6e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e70:	e00f      	b.n	8003e92 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003e72:	6878      	ldr	r0, [r7, #4]
 8003e74:	f000 f9a0 	bl	80041b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e78:	e00b      	b.n	8003e92 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	f000 f99c 	bl	80041b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e80:	e007      	b.n	8003e92 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f000 f998 	bl	80041b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8003e90:	e17e      	b.n	8004190 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e92:	bf00      	nop
    return;
 8003e94:	e17c      	b.n	8004190 <HAL_UART_IRQHandler+0x590>
 8003e96:	bf00      	nop
 8003e98:	04000120 	.word	0x04000120
 8003e9c:	08004ab3 	.word	0x08004ab3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ea4:	2b01      	cmp	r3, #1
 8003ea6:	f040 814c 	bne.w	8004142 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003eaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003eae:	f003 0310 	and.w	r3, r3, #16
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	f000 8145 	beq.w	8004142 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003eb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ebc:	f003 0310 	and.w	r3, r3, #16
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	f000 813e 	beq.w	8004142 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	2210      	movs	r2, #16
 8003ecc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ed8:	2b40      	cmp	r3, #64	; 0x40
 8003eda:	f040 80b6 	bne.w	800404a <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003eea:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	f000 8150 	beq.w	8004194 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003efa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003efe:	429a      	cmp	r2, r3
 8003f00:	f080 8148 	bcs.w	8004194 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003f0a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f12:	69db      	ldr	r3, [r3, #28]
 8003f14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f18:	f000 8086 	beq.w	8004028 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f24:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003f28:	e853 3f00 	ldrex	r3, [r3]
 8003f2c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003f30:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003f34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f38:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	461a      	mov	r2, r3
 8003f42:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003f46:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003f4a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f4e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003f52:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003f56:	e841 2300 	strex	r3, r2, [r1]
 8003f5a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003f5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d1da      	bne.n	8003f1c <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	3308      	adds	r3, #8
 8003f6c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f70:	e853 3f00 	ldrex	r3, [r3]
 8003f74:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003f76:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003f78:	f023 0301 	bic.w	r3, r3, #1
 8003f7c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	3308      	adds	r3, #8
 8003f86:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003f8a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003f8e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f90:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003f92:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003f96:	e841 2300 	strex	r3, r2, [r1]
 8003f9a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003f9c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d1e1      	bne.n	8003f66 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	3308      	adds	r3, #8
 8003fa8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003faa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003fac:	e853 3f00 	ldrex	r3, [r3]
 8003fb0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003fb2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003fb4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003fb8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	3308      	adds	r3, #8
 8003fc2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003fc6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003fc8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fca:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003fcc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003fce:	e841 2300 	strex	r3, r2, [r1]
 8003fd2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003fd4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d1e3      	bne.n	8003fa2 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2220      	movs	r2, #32
 8003fde:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ff0:	e853 3f00 	ldrex	r3, [r3]
 8003ff4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003ff6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ff8:	f023 0310 	bic.w	r3, r3, #16
 8003ffc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	461a      	mov	r2, r3
 8004006:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800400a:	65bb      	str	r3, [r7, #88]	; 0x58
 800400c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800400e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004010:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004012:	e841 2300 	strex	r3, r2, [r1]
 8004016:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004018:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800401a:	2b00      	cmp	r3, #0
 800401c:	d1e4      	bne.n	8003fe8 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004022:	4618      	mov	r0, r3
 8004024:	f7fd fec4 	bl	8001db0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2202      	movs	r2, #2
 800402c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800403a:	b29b      	uxth	r3, r3
 800403c:	1ad3      	subs	r3, r2, r3
 800403e:	b29b      	uxth	r3, r3
 8004040:	4619      	mov	r1, r3
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	f000 f8c2 	bl	80041cc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004048:	e0a4      	b.n	8004194 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004056:	b29b      	uxth	r3, r3
 8004058:	1ad3      	subs	r3, r2, r3
 800405a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004064:	b29b      	uxth	r3, r3
 8004066:	2b00      	cmp	r3, #0
 8004068:	f000 8096 	beq.w	8004198 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 800406c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004070:	2b00      	cmp	r3, #0
 8004072:	f000 8091 	beq.w	8004198 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800407c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800407e:	e853 3f00 	ldrex	r3, [r3]
 8004082:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004084:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004086:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800408a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	461a      	mov	r2, r3
 8004094:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004098:	647b      	str	r3, [r7, #68]	; 0x44
 800409a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800409c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800409e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80040a0:	e841 2300 	strex	r3, r2, [r1]
 80040a4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80040a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d1e4      	bne.n	8004076 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	3308      	adds	r3, #8
 80040b2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b6:	e853 3f00 	ldrex	r3, [r3]
 80040ba:	623b      	str	r3, [r7, #32]
   return(result);
 80040bc:	6a3b      	ldr	r3, [r7, #32]
 80040be:	f023 0301 	bic.w	r3, r3, #1
 80040c2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	3308      	adds	r3, #8
 80040cc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80040d0:	633a      	str	r2, [r7, #48]	; 0x30
 80040d2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040d4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80040d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040d8:	e841 2300 	strex	r3, r2, [r1]
 80040dc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80040de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d1e3      	bne.n	80040ac <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2220      	movs	r2, #32
 80040e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2200      	movs	r2, #0
 80040f0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2200      	movs	r2, #0
 80040f6:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	e853 3f00 	ldrex	r3, [r3]
 8004104:	60fb      	str	r3, [r7, #12]
   return(result);
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	f023 0310 	bic.w	r3, r3, #16
 800410c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	461a      	mov	r2, r3
 8004116:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800411a:	61fb      	str	r3, [r7, #28]
 800411c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800411e:	69b9      	ldr	r1, [r7, #24]
 8004120:	69fa      	ldr	r2, [r7, #28]
 8004122:	e841 2300 	strex	r3, r2, [r1]
 8004126:	617b      	str	r3, [r7, #20]
   return(result);
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d1e4      	bne.n	80040f8 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2202      	movs	r2, #2
 8004132:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004134:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004138:	4619      	mov	r1, r3
 800413a:	6878      	ldr	r0, [r7, #4]
 800413c:	f000 f846 	bl	80041cc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004140:	e02a      	b.n	8004198 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004142:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004146:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800414a:	2b00      	cmp	r3, #0
 800414c:	d00e      	beq.n	800416c <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800414e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004152:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004156:	2b00      	cmp	r3, #0
 8004158:	d008      	beq.n	800416c <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800415e:	2b00      	cmp	r3, #0
 8004160:	d01c      	beq.n	800419c <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004166:	6878      	ldr	r0, [r7, #4]
 8004168:	4798      	blx	r3
    }
    return;
 800416a:	e017      	b.n	800419c <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800416c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004170:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004174:	2b00      	cmp	r3, #0
 8004176:	d012      	beq.n	800419e <HAL_UART_IRQHandler+0x59e>
 8004178:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800417c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004180:	2b00      	cmp	r3, #0
 8004182:	d00c      	beq.n	800419e <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8004184:	6878      	ldr	r0, [r7, #4]
 8004186:	f000 fcaa 	bl	8004ade <UART_EndTransmit_IT>
    return;
 800418a:	e008      	b.n	800419e <HAL_UART_IRQHandler+0x59e>
      return;
 800418c:	bf00      	nop
 800418e:	e006      	b.n	800419e <HAL_UART_IRQHandler+0x59e>
    return;
 8004190:	bf00      	nop
 8004192:	e004      	b.n	800419e <HAL_UART_IRQHandler+0x59e>
      return;
 8004194:	bf00      	nop
 8004196:	e002      	b.n	800419e <HAL_UART_IRQHandler+0x59e>
      return;
 8004198:	bf00      	nop
 800419a:	e000      	b.n	800419e <HAL_UART_IRQHandler+0x59e>
    return;
 800419c:	bf00      	nop
  }

}
 800419e:	37e8      	adds	r7, #232	; 0xe8
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bd80      	pop	{r7, pc}

080041a4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80041a4:	b480      	push	{r7}
 80041a6:	b083      	sub	sp, #12
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80041ac:	bf00      	nop
 80041ae:	370c      	adds	r7, #12
 80041b0:	46bd      	mov	sp, r7
 80041b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b6:	4770      	bx	lr

080041b8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b083      	sub	sp, #12
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80041c0:	bf00      	nop
 80041c2:	370c      	adds	r7, #12
 80041c4:	46bd      	mov	sp, r7
 80041c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ca:	4770      	bx	lr

080041cc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b083      	sub	sp, #12
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
 80041d4:	460b      	mov	r3, r1
 80041d6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80041d8:	bf00      	nop
 80041da:	370c      	adds	r7, #12
 80041dc:	46bd      	mov	sp, r7
 80041de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e2:	4770      	bx	lr

080041e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b088      	sub	sp, #32
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80041ec:	2300      	movs	r3, #0
 80041ee:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	689a      	ldr	r2, [r3, #8]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	691b      	ldr	r3, [r3, #16]
 80041f8:	431a      	orrs	r2, r3
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	695b      	ldr	r3, [r3, #20]
 80041fe:	431a      	orrs	r2, r3
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	69db      	ldr	r3, [r3, #28]
 8004204:	4313      	orrs	r3, r2
 8004206:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	681a      	ldr	r2, [r3, #0]
 800420e:	4ba6      	ldr	r3, [pc, #664]	; (80044a8 <UART_SetConfig+0x2c4>)
 8004210:	4013      	ands	r3, r2
 8004212:	687a      	ldr	r2, [r7, #4]
 8004214:	6812      	ldr	r2, [r2, #0]
 8004216:	6979      	ldr	r1, [r7, #20]
 8004218:	430b      	orrs	r3, r1
 800421a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	68da      	ldr	r2, [r3, #12]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	430a      	orrs	r2, r1
 8004230:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	699b      	ldr	r3, [r3, #24]
 8004236:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6a1b      	ldr	r3, [r3, #32]
 800423c:	697a      	ldr	r2, [r7, #20]
 800423e:	4313      	orrs	r3, r2
 8004240:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	697a      	ldr	r2, [r7, #20]
 8004252:	430a      	orrs	r2, r1
 8004254:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a94      	ldr	r2, [pc, #592]	; (80044ac <UART_SetConfig+0x2c8>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d120      	bne.n	80042a2 <UART_SetConfig+0xbe>
 8004260:	4b93      	ldr	r3, [pc, #588]	; (80044b0 <UART_SetConfig+0x2cc>)
 8004262:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004266:	f003 0303 	and.w	r3, r3, #3
 800426a:	2b03      	cmp	r3, #3
 800426c:	d816      	bhi.n	800429c <UART_SetConfig+0xb8>
 800426e:	a201      	add	r2, pc, #4	; (adr r2, 8004274 <UART_SetConfig+0x90>)
 8004270:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004274:	08004285 	.word	0x08004285
 8004278:	08004291 	.word	0x08004291
 800427c:	0800428b 	.word	0x0800428b
 8004280:	08004297 	.word	0x08004297
 8004284:	2301      	movs	r3, #1
 8004286:	77fb      	strb	r3, [r7, #31]
 8004288:	e150      	b.n	800452c <UART_SetConfig+0x348>
 800428a:	2302      	movs	r3, #2
 800428c:	77fb      	strb	r3, [r7, #31]
 800428e:	e14d      	b.n	800452c <UART_SetConfig+0x348>
 8004290:	2304      	movs	r3, #4
 8004292:	77fb      	strb	r3, [r7, #31]
 8004294:	e14a      	b.n	800452c <UART_SetConfig+0x348>
 8004296:	2308      	movs	r3, #8
 8004298:	77fb      	strb	r3, [r7, #31]
 800429a:	e147      	b.n	800452c <UART_SetConfig+0x348>
 800429c:	2310      	movs	r3, #16
 800429e:	77fb      	strb	r3, [r7, #31]
 80042a0:	e144      	b.n	800452c <UART_SetConfig+0x348>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a83      	ldr	r2, [pc, #524]	; (80044b4 <UART_SetConfig+0x2d0>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d132      	bne.n	8004312 <UART_SetConfig+0x12e>
 80042ac:	4b80      	ldr	r3, [pc, #512]	; (80044b0 <UART_SetConfig+0x2cc>)
 80042ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042b2:	f003 030c 	and.w	r3, r3, #12
 80042b6:	2b0c      	cmp	r3, #12
 80042b8:	d828      	bhi.n	800430c <UART_SetConfig+0x128>
 80042ba:	a201      	add	r2, pc, #4	; (adr r2, 80042c0 <UART_SetConfig+0xdc>)
 80042bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042c0:	080042f5 	.word	0x080042f5
 80042c4:	0800430d 	.word	0x0800430d
 80042c8:	0800430d 	.word	0x0800430d
 80042cc:	0800430d 	.word	0x0800430d
 80042d0:	08004301 	.word	0x08004301
 80042d4:	0800430d 	.word	0x0800430d
 80042d8:	0800430d 	.word	0x0800430d
 80042dc:	0800430d 	.word	0x0800430d
 80042e0:	080042fb 	.word	0x080042fb
 80042e4:	0800430d 	.word	0x0800430d
 80042e8:	0800430d 	.word	0x0800430d
 80042ec:	0800430d 	.word	0x0800430d
 80042f0:	08004307 	.word	0x08004307
 80042f4:	2300      	movs	r3, #0
 80042f6:	77fb      	strb	r3, [r7, #31]
 80042f8:	e118      	b.n	800452c <UART_SetConfig+0x348>
 80042fa:	2302      	movs	r3, #2
 80042fc:	77fb      	strb	r3, [r7, #31]
 80042fe:	e115      	b.n	800452c <UART_SetConfig+0x348>
 8004300:	2304      	movs	r3, #4
 8004302:	77fb      	strb	r3, [r7, #31]
 8004304:	e112      	b.n	800452c <UART_SetConfig+0x348>
 8004306:	2308      	movs	r3, #8
 8004308:	77fb      	strb	r3, [r7, #31]
 800430a:	e10f      	b.n	800452c <UART_SetConfig+0x348>
 800430c:	2310      	movs	r3, #16
 800430e:	77fb      	strb	r3, [r7, #31]
 8004310:	e10c      	b.n	800452c <UART_SetConfig+0x348>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a68      	ldr	r2, [pc, #416]	; (80044b8 <UART_SetConfig+0x2d4>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d120      	bne.n	800435e <UART_SetConfig+0x17a>
 800431c:	4b64      	ldr	r3, [pc, #400]	; (80044b0 <UART_SetConfig+0x2cc>)
 800431e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004322:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004326:	2b30      	cmp	r3, #48	; 0x30
 8004328:	d013      	beq.n	8004352 <UART_SetConfig+0x16e>
 800432a:	2b30      	cmp	r3, #48	; 0x30
 800432c:	d814      	bhi.n	8004358 <UART_SetConfig+0x174>
 800432e:	2b20      	cmp	r3, #32
 8004330:	d009      	beq.n	8004346 <UART_SetConfig+0x162>
 8004332:	2b20      	cmp	r3, #32
 8004334:	d810      	bhi.n	8004358 <UART_SetConfig+0x174>
 8004336:	2b00      	cmp	r3, #0
 8004338:	d002      	beq.n	8004340 <UART_SetConfig+0x15c>
 800433a:	2b10      	cmp	r3, #16
 800433c:	d006      	beq.n	800434c <UART_SetConfig+0x168>
 800433e:	e00b      	b.n	8004358 <UART_SetConfig+0x174>
 8004340:	2300      	movs	r3, #0
 8004342:	77fb      	strb	r3, [r7, #31]
 8004344:	e0f2      	b.n	800452c <UART_SetConfig+0x348>
 8004346:	2302      	movs	r3, #2
 8004348:	77fb      	strb	r3, [r7, #31]
 800434a:	e0ef      	b.n	800452c <UART_SetConfig+0x348>
 800434c:	2304      	movs	r3, #4
 800434e:	77fb      	strb	r3, [r7, #31]
 8004350:	e0ec      	b.n	800452c <UART_SetConfig+0x348>
 8004352:	2308      	movs	r3, #8
 8004354:	77fb      	strb	r3, [r7, #31]
 8004356:	e0e9      	b.n	800452c <UART_SetConfig+0x348>
 8004358:	2310      	movs	r3, #16
 800435a:	77fb      	strb	r3, [r7, #31]
 800435c:	e0e6      	b.n	800452c <UART_SetConfig+0x348>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a56      	ldr	r2, [pc, #344]	; (80044bc <UART_SetConfig+0x2d8>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d120      	bne.n	80043aa <UART_SetConfig+0x1c6>
 8004368:	4b51      	ldr	r3, [pc, #324]	; (80044b0 <UART_SetConfig+0x2cc>)
 800436a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800436e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004372:	2bc0      	cmp	r3, #192	; 0xc0
 8004374:	d013      	beq.n	800439e <UART_SetConfig+0x1ba>
 8004376:	2bc0      	cmp	r3, #192	; 0xc0
 8004378:	d814      	bhi.n	80043a4 <UART_SetConfig+0x1c0>
 800437a:	2b80      	cmp	r3, #128	; 0x80
 800437c:	d009      	beq.n	8004392 <UART_SetConfig+0x1ae>
 800437e:	2b80      	cmp	r3, #128	; 0x80
 8004380:	d810      	bhi.n	80043a4 <UART_SetConfig+0x1c0>
 8004382:	2b00      	cmp	r3, #0
 8004384:	d002      	beq.n	800438c <UART_SetConfig+0x1a8>
 8004386:	2b40      	cmp	r3, #64	; 0x40
 8004388:	d006      	beq.n	8004398 <UART_SetConfig+0x1b4>
 800438a:	e00b      	b.n	80043a4 <UART_SetConfig+0x1c0>
 800438c:	2300      	movs	r3, #0
 800438e:	77fb      	strb	r3, [r7, #31]
 8004390:	e0cc      	b.n	800452c <UART_SetConfig+0x348>
 8004392:	2302      	movs	r3, #2
 8004394:	77fb      	strb	r3, [r7, #31]
 8004396:	e0c9      	b.n	800452c <UART_SetConfig+0x348>
 8004398:	2304      	movs	r3, #4
 800439a:	77fb      	strb	r3, [r7, #31]
 800439c:	e0c6      	b.n	800452c <UART_SetConfig+0x348>
 800439e:	2308      	movs	r3, #8
 80043a0:	77fb      	strb	r3, [r7, #31]
 80043a2:	e0c3      	b.n	800452c <UART_SetConfig+0x348>
 80043a4:	2310      	movs	r3, #16
 80043a6:	77fb      	strb	r3, [r7, #31]
 80043a8:	e0c0      	b.n	800452c <UART_SetConfig+0x348>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a44      	ldr	r2, [pc, #272]	; (80044c0 <UART_SetConfig+0x2dc>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d125      	bne.n	8004400 <UART_SetConfig+0x21c>
 80043b4:	4b3e      	ldr	r3, [pc, #248]	; (80044b0 <UART_SetConfig+0x2cc>)
 80043b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043c2:	d017      	beq.n	80043f4 <UART_SetConfig+0x210>
 80043c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043c8:	d817      	bhi.n	80043fa <UART_SetConfig+0x216>
 80043ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043ce:	d00b      	beq.n	80043e8 <UART_SetConfig+0x204>
 80043d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043d4:	d811      	bhi.n	80043fa <UART_SetConfig+0x216>
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d003      	beq.n	80043e2 <UART_SetConfig+0x1fe>
 80043da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043de:	d006      	beq.n	80043ee <UART_SetConfig+0x20a>
 80043e0:	e00b      	b.n	80043fa <UART_SetConfig+0x216>
 80043e2:	2300      	movs	r3, #0
 80043e4:	77fb      	strb	r3, [r7, #31]
 80043e6:	e0a1      	b.n	800452c <UART_SetConfig+0x348>
 80043e8:	2302      	movs	r3, #2
 80043ea:	77fb      	strb	r3, [r7, #31]
 80043ec:	e09e      	b.n	800452c <UART_SetConfig+0x348>
 80043ee:	2304      	movs	r3, #4
 80043f0:	77fb      	strb	r3, [r7, #31]
 80043f2:	e09b      	b.n	800452c <UART_SetConfig+0x348>
 80043f4:	2308      	movs	r3, #8
 80043f6:	77fb      	strb	r3, [r7, #31]
 80043f8:	e098      	b.n	800452c <UART_SetConfig+0x348>
 80043fa:	2310      	movs	r3, #16
 80043fc:	77fb      	strb	r3, [r7, #31]
 80043fe:	e095      	b.n	800452c <UART_SetConfig+0x348>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a2f      	ldr	r2, [pc, #188]	; (80044c4 <UART_SetConfig+0x2e0>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d125      	bne.n	8004456 <UART_SetConfig+0x272>
 800440a:	4b29      	ldr	r3, [pc, #164]	; (80044b0 <UART_SetConfig+0x2cc>)
 800440c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004410:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004414:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004418:	d017      	beq.n	800444a <UART_SetConfig+0x266>
 800441a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800441e:	d817      	bhi.n	8004450 <UART_SetConfig+0x26c>
 8004420:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004424:	d00b      	beq.n	800443e <UART_SetConfig+0x25a>
 8004426:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800442a:	d811      	bhi.n	8004450 <UART_SetConfig+0x26c>
 800442c:	2b00      	cmp	r3, #0
 800442e:	d003      	beq.n	8004438 <UART_SetConfig+0x254>
 8004430:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004434:	d006      	beq.n	8004444 <UART_SetConfig+0x260>
 8004436:	e00b      	b.n	8004450 <UART_SetConfig+0x26c>
 8004438:	2301      	movs	r3, #1
 800443a:	77fb      	strb	r3, [r7, #31]
 800443c:	e076      	b.n	800452c <UART_SetConfig+0x348>
 800443e:	2302      	movs	r3, #2
 8004440:	77fb      	strb	r3, [r7, #31]
 8004442:	e073      	b.n	800452c <UART_SetConfig+0x348>
 8004444:	2304      	movs	r3, #4
 8004446:	77fb      	strb	r3, [r7, #31]
 8004448:	e070      	b.n	800452c <UART_SetConfig+0x348>
 800444a:	2308      	movs	r3, #8
 800444c:	77fb      	strb	r3, [r7, #31]
 800444e:	e06d      	b.n	800452c <UART_SetConfig+0x348>
 8004450:	2310      	movs	r3, #16
 8004452:	77fb      	strb	r3, [r7, #31]
 8004454:	e06a      	b.n	800452c <UART_SetConfig+0x348>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a1b      	ldr	r2, [pc, #108]	; (80044c8 <UART_SetConfig+0x2e4>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d138      	bne.n	80044d2 <UART_SetConfig+0x2ee>
 8004460:	4b13      	ldr	r3, [pc, #76]	; (80044b0 <UART_SetConfig+0x2cc>)
 8004462:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004466:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800446a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800446e:	d017      	beq.n	80044a0 <UART_SetConfig+0x2bc>
 8004470:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004474:	d82a      	bhi.n	80044cc <UART_SetConfig+0x2e8>
 8004476:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800447a:	d00b      	beq.n	8004494 <UART_SetConfig+0x2b0>
 800447c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004480:	d824      	bhi.n	80044cc <UART_SetConfig+0x2e8>
 8004482:	2b00      	cmp	r3, #0
 8004484:	d003      	beq.n	800448e <UART_SetConfig+0x2aa>
 8004486:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800448a:	d006      	beq.n	800449a <UART_SetConfig+0x2b6>
 800448c:	e01e      	b.n	80044cc <UART_SetConfig+0x2e8>
 800448e:	2300      	movs	r3, #0
 8004490:	77fb      	strb	r3, [r7, #31]
 8004492:	e04b      	b.n	800452c <UART_SetConfig+0x348>
 8004494:	2302      	movs	r3, #2
 8004496:	77fb      	strb	r3, [r7, #31]
 8004498:	e048      	b.n	800452c <UART_SetConfig+0x348>
 800449a:	2304      	movs	r3, #4
 800449c:	77fb      	strb	r3, [r7, #31]
 800449e:	e045      	b.n	800452c <UART_SetConfig+0x348>
 80044a0:	2308      	movs	r3, #8
 80044a2:	77fb      	strb	r3, [r7, #31]
 80044a4:	e042      	b.n	800452c <UART_SetConfig+0x348>
 80044a6:	bf00      	nop
 80044a8:	efff69f3 	.word	0xefff69f3
 80044ac:	40011000 	.word	0x40011000
 80044b0:	40023800 	.word	0x40023800
 80044b4:	40004400 	.word	0x40004400
 80044b8:	40004800 	.word	0x40004800
 80044bc:	40004c00 	.word	0x40004c00
 80044c0:	40005000 	.word	0x40005000
 80044c4:	40011400 	.word	0x40011400
 80044c8:	40007800 	.word	0x40007800
 80044cc:	2310      	movs	r3, #16
 80044ce:	77fb      	strb	r3, [r7, #31]
 80044d0:	e02c      	b.n	800452c <UART_SetConfig+0x348>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a72      	ldr	r2, [pc, #456]	; (80046a0 <UART_SetConfig+0x4bc>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d125      	bne.n	8004528 <UART_SetConfig+0x344>
 80044dc:	4b71      	ldr	r3, [pc, #452]	; (80046a4 <UART_SetConfig+0x4c0>)
 80044de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044e2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80044e6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80044ea:	d017      	beq.n	800451c <UART_SetConfig+0x338>
 80044ec:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80044f0:	d817      	bhi.n	8004522 <UART_SetConfig+0x33e>
 80044f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044f6:	d00b      	beq.n	8004510 <UART_SetConfig+0x32c>
 80044f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044fc:	d811      	bhi.n	8004522 <UART_SetConfig+0x33e>
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d003      	beq.n	800450a <UART_SetConfig+0x326>
 8004502:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004506:	d006      	beq.n	8004516 <UART_SetConfig+0x332>
 8004508:	e00b      	b.n	8004522 <UART_SetConfig+0x33e>
 800450a:	2300      	movs	r3, #0
 800450c:	77fb      	strb	r3, [r7, #31]
 800450e:	e00d      	b.n	800452c <UART_SetConfig+0x348>
 8004510:	2302      	movs	r3, #2
 8004512:	77fb      	strb	r3, [r7, #31]
 8004514:	e00a      	b.n	800452c <UART_SetConfig+0x348>
 8004516:	2304      	movs	r3, #4
 8004518:	77fb      	strb	r3, [r7, #31]
 800451a:	e007      	b.n	800452c <UART_SetConfig+0x348>
 800451c:	2308      	movs	r3, #8
 800451e:	77fb      	strb	r3, [r7, #31]
 8004520:	e004      	b.n	800452c <UART_SetConfig+0x348>
 8004522:	2310      	movs	r3, #16
 8004524:	77fb      	strb	r3, [r7, #31]
 8004526:	e001      	b.n	800452c <UART_SetConfig+0x348>
 8004528:	2310      	movs	r3, #16
 800452a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	69db      	ldr	r3, [r3, #28]
 8004530:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004534:	d15b      	bne.n	80045ee <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004536:	7ffb      	ldrb	r3, [r7, #31]
 8004538:	2b08      	cmp	r3, #8
 800453a:	d828      	bhi.n	800458e <UART_SetConfig+0x3aa>
 800453c:	a201      	add	r2, pc, #4	; (adr r2, 8004544 <UART_SetConfig+0x360>)
 800453e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004542:	bf00      	nop
 8004544:	08004569 	.word	0x08004569
 8004548:	08004571 	.word	0x08004571
 800454c:	08004579 	.word	0x08004579
 8004550:	0800458f 	.word	0x0800458f
 8004554:	0800457f 	.word	0x0800457f
 8004558:	0800458f 	.word	0x0800458f
 800455c:	0800458f 	.word	0x0800458f
 8004560:	0800458f 	.word	0x0800458f
 8004564:	08004587 	.word	0x08004587
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004568:	f7fe fb62 	bl	8002c30 <HAL_RCC_GetPCLK1Freq>
 800456c:	61b8      	str	r0, [r7, #24]
        break;
 800456e:	e013      	b.n	8004598 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004570:	f7fe fb72 	bl	8002c58 <HAL_RCC_GetPCLK2Freq>
 8004574:	61b8      	str	r0, [r7, #24]
        break;
 8004576:	e00f      	b.n	8004598 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004578:	4b4b      	ldr	r3, [pc, #300]	; (80046a8 <UART_SetConfig+0x4c4>)
 800457a:	61bb      	str	r3, [r7, #24]
        break;
 800457c:	e00c      	b.n	8004598 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800457e:	f7fe fa45 	bl	8002a0c <HAL_RCC_GetSysClockFreq>
 8004582:	61b8      	str	r0, [r7, #24]
        break;
 8004584:	e008      	b.n	8004598 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004586:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800458a:	61bb      	str	r3, [r7, #24]
        break;
 800458c:	e004      	b.n	8004598 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800458e:	2300      	movs	r3, #0
 8004590:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	77bb      	strb	r3, [r7, #30]
        break;
 8004596:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004598:	69bb      	ldr	r3, [r7, #24]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d074      	beq.n	8004688 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800459e:	69bb      	ldr	r3, [r7, #24]
 80045a0:	005a      	lsls	r2, r3, #1
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	085b      	lsrs	r3, r3, #1
 80045a8:	441a      	add	r2, r3
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80045b2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80045b4:	693b      	ldr	r3, [r7, #16]
 80045b6:	2b0f      	cmp	r3, #15
 80045b8:	d916      	bls.n	80045e8 <UART_SetConfig+0x404>
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045c0:	d212      	bcs.n	80045e8 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	b29b      	uxth	r3, r3
 80045c6:	f023 030f 	bic.w	r3, r3, #15
 80045ca:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80045cc:	693b      	ldr	r3, [r7, #16]
 80045ce:	085b      	lsrs	r3, r3, #1
 80045d0:	b29b      	uxth	r3, r3
 80045d2:	f003 0307 	and.w	r3, r3, #7
 80045d6:	b29a      	uxth	r2, r3
 80045d8:	89fb      	ldrh	r3, [r7, #14]
 80045da:	4313      	orrs	r3, r2
 80045dc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	89fa      	ldrh	r2, [r7, #14]
 80045e4:	60da      	str	r2, [r3, #12]
 80045e6:	e04f      	b.n	8004688 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80045e8:	2301      	movs	r3, #1
 80045ea:	77bb      	strb	r3, [r7, #30]
 80045ec:	e04c      	b.n	8004688 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80045ee:	7ffb      	ldrb	r3, [r7, #31]
 80045f0:	2b08      	cmp	r3, #8
 80045f2:	d828      	bhi.n	8004646 <UART_SetConfig+0x462>
 80045f4:	a201      	add	r2, pc, #4	; (adr r2, 80045fc <UART_SetConfig+0x418>)
 80045f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045fa:	bf00      	nop
 80045fc:	08004621 	.word	0x08004621
 8004600:	08004629 	.word	0x08004629
 8004604:	08004631 	.word	0x08004631
 8004608:	08004647 	.word	0x08004647
 800460c:	08004637 	.word	0x08004637
 8004610:	08004647 	.word	0x08004647
 8004614:	08004647 	.word	0x08004647
 8004618:	08004647 	.word	0x08004647
 800461c:	0800463f 	.word	0x0800463f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004620:	f7fe fb06 	bl	8002c30 <HAL_RCC_GetPCLK1Freq>
 8004624:	61b8      	str	r0, [r7, #24]
        break;
 8004626:	e013      	b.n	8004650 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004628:	f7fe fb16 	bl	8002c58 <HAL_RCC_GetPCLK2Freq>
 800462c:	61b8      	str	r0, [r7, #24]
        break;
 800462e:	e00f      	b.n	8004650 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004630:	4b1d      	ldr	r3, [pc, #116]	; (80046a8 <UART_SetConfig+0x4c4>)
 8004632:	61bb      	str	r3, [r7, #24]
        break;
 8004634:	e00c      	b.n	8004650 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004636:	f7fe f9e9 	bl	8002a0c <HAL_RCC_GetSysClockFreq>
 800463a:	61b8      	str	r0, [r7, #24]
        break;
 800463c:	e008      	b.n	8004650 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800463e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004642:	61bb      	str	r3, [r7, #24]
        break;
 8004644:	e004      	b.n	8004650 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004646:	2300      	movs	r3, #0
 8004648:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800464a:	2301      	movs	r3, #1
 800464c:	77bb      	strb	r3, [r7, #30]
        break;
 800464e:	bf00      	nop
    }

    if (pclk != 0U)
 8004650:	69bb      	ldr	r3, [r7, #24]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d018      	beq.n	8004688 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	085a      	lsrs	r2, r3, #1
 800465c:	69bb      	ldr	r3, [r7, #24]
 800465e:	441a      	add	r2, r3
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	fbb2 f3f3 	udiv	r3, r2, r3
 8004668:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	2b0f      	cmp	r3, #15
 800466e:	d909      	bls.n	8004684 <UART_SetConfig+0x4a0>
 8004670:	693b      	ldr	r3, [r7, #16]
 8004672:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004676:	d205      	bcs.n	8004684 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	b29a      	uxth	r2, r3
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	60da      	str	r2, [r3, #12]
 8004682:	e001      	b.n	8004688 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004684:	2301      	movs	r3, #1
 8004686:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2200      	movs	r2, #0
 800468c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2200      	movs	r2, #0
 8004692:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004694:	7fbb      	ldrb	r3, [r7, #30]
}
 8004696:	4618      	mov	r0, r3
 8004698:	3720      	adds	r7, #32
 800469a:	46bd      	mov	sp, r7
 800469c:	bd80      	pop	{r7, pc}
 800469e:	bf00      	nop
 80046a0:	40007c00 	.word	0x40007c00
 80046a4:	40023800 	.word	0x40023800
 80046a8:	00f42400 	.word	0x00f42400

080046ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80046ac:	b480      	push	{r7}
 80046ae:	b083      	sub	sp, #12
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b8:	f003 0301 	and.w	r3, r3, #1
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d00a      	beq.n	80046d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	430a      	orrs	r2, r1
 80046d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046da:	f003 0302 	and.w	r3, r3, #2
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d00a      	beq.n	80046f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	430a      	orrs	r2, r1
 80046f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046fc:	f003 0304 	and.w	r3, r3, #4
 8004700:	2b00      	cmp	r3, #0
 8004702:	d00a      	beq.n	800471a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	430a      	orrs	r2, r1
 8004718:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800471e:	f003 0308 	and.w	r3, r3, #8
 8004722:	2b00      	cmp	r3, #0
 8004724:	d00a      	beq.n	800473c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	430a      	orrs	r2, r1
 800473a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004740:	f003 0310 	and.w	r3, r3, #16
 8004744:	2b00      	cmp	r3, #0
 8004746:	d00a      	beq.n	800475e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	689b      	ldr	r3, [r3, #8]
 800474e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	430a      	orrs	r2, r1
 800475c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004762:	f003 0320 	and.w	r3, r3, #32
 8004766:	2b00      	cmp	r3, #0
 8004768:	d00a      	beq.n	8004780 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	430a      	orrs	r2, r1
 800477e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004784:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004788:	2b00      	cmp	r3, #0
 800478a:	d01a      	beq.n	80047c2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	430a      	orrs	r2, r1
 80047a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80047aa:	d10a      	bne.n	80047c2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	430a      	orrs	r2, r1
 80047c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d00a      	beq.n	80047e4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	430a      	orrs	r2, r1
 80047e2:	605a      	str	r2, [r3, #4]
  }
}
 80047e4:	bf00      	nop
 80047e6:	370c      	adds	r7, #12
 80047e8:	46bd      	mov	sp, r7
 80047ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ee:	4770      	bx	lr

080047f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b086      	sub	sp, #24
 80047f4:	af02      	add	r7, sp, #8
 80047f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2200      	movs	r2, #0
 80047fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004800:	f7fd f8aa 	bl	8001958 <HAL_GetTick>
 8004804:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f003 0308 	and.w	r3, r3, #8
 8004810:	2b08      	cmp	r3, #8
 8004812:	d10e      	bne.n	8004832 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004814:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004818:	9300      	str	r3, [sp, #0]
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	2200      	movs	r2, #0
 800481e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004822:	6878      	ldr	r0, [r7, #4]
 8004824:	f000 f81b 	bl	800485e <UART_WaitOnFlagUntilTimeout>
 8004828:	4603      	mov	r3, r0
 800482a:	2b00      	cmp	r3, #0
 800482c:	d001      	beq.n	8004832 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800482e:	2303      	movs	r3, #3
 8004830:	e011      	b.n	8004856 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2220      	movs	r2, #32
 8004836:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2220      	movs	r2, #32
 800483c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2200      	movs	r2, #0
 8004844:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2200      	movs	r2, #0
 800484a:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2200      	movs	r2, #0
 8004850:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004854:	2300      	movs	r3, #0
}
 8004856:	4618      	mov	r0, r3
 8004858:	3710      	adds	r7, #16
 800485a:	46bd      	mov	sp, r7
 800485c:	bd80      	pop	{r7, pc}

0800485e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800485e:	b580      	push	{r7, lr}
 8004860:	b09c      	sub	sp, #112	; 0x70
 8004862:	af00      	add	r7, sp, #0
 8004864:	60f8      	str	r0, [r7, #12]
 8004866:	60b9      	str	r1, [r7, #8]
 8004868:	603b      	str	r3, [r7, #0]
 800486a:	4613      	mov	r3, r2
 800486c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800486e:	e0a7      	b.n	80049c0 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004870:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004872:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004876:	f000 80a3 	beq.w	80049c0 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800487a:	f7fd f86d 	bl	8001958 <HAL_GetTick>
 800487e:	4602      	mov	r2, r0
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	1ad3      	subs	r3, r2, r3
 8004884:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004886:	429a      	cmp	r2, r3
 8004888:	d302      	bcc.n	8004890 <UART_WaitOnFlagUntilTimeout+0x32>
 800488a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800488c:	2b00      	cmp	r3, #0
 800488e:	d13f      	bne.n	8004910 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004896:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004898:	e853 3f00 	ldrex	r3, [r3]
 800489c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800489e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048a0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80048a4:	667b      	str	r3, [r7, #100]	; 0x64
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	461a      	mov	r2, r3
 80048ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80048ae:	65fb      	str	r3, [r7, #92]	; 0x5c
 80048b0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048b2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80048b4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80048b6:	e841 2300 	strex	r3, r2, [r1]
 80048ba:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80048bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d1e6      	bne.n	8004890 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	3308      	adds	r3, #8
 80048c8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048cc:	e853 3f00 	ldrex	r3, [r3]
 80048d0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80048d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048d4:	f023 0301 	bic.w	r3, r3, #1
 80048d8:	663b      	str	r3, [r7, #96]	; 0x60
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	3308      	adds	r3, #8
 80048e0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80048e2:	64ba      	str	r2, [r7, #72]	; 0x48
 80048e4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048e6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80048e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80048ea:	e841 2300 	strex	r3, r2, [r1]
 80048ee:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80048f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d1e5      	bne.n	80048c2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	2220      	movs	r2, #32
 80048fa:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	2220      	movs	r2, #32
 8004900:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	2200      	movs	r2, #0
 8004908:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800490c:	2303      	movs	r3, #3
 800490e:	e068      	b.n	80049e2 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f003 0304 	and.w	r3, r3, #4
 800491a:	2b00      	cmp	r3, #0
 800491c:	d050      	beq.n	80049c0 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	69db      	ldr	r3, [r3, #28]
 8004924:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004928:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800492c:	d148      	bne.n	80049c0 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004936:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800493e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004940:	e853 3f00 	ldrex	r3, [r3]
 8004944:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004948:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800494c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	461a      	mov	r2, r3
 8004954:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004956:	637b      	str	r3, [r7, #52]	; 0x34
 8004958:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800495a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800495c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800495e:	e841 2300 	strex	r3, r2, [r1]
 8004962:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004966:	2b00      	cmp	r3, #0
 8004968:	d1e6      	bne.n	8004938 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	3308      	adds	r3, #8
 8004970:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004972:	697b      	ldr	r3, [r7, #20]
 8004974:	e853 3f00 	ldrex	r3, [r3]
 8004978:	613b      	str	r3, [r7, #16]
   return(result);
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	f023 0301 	bic.w	r3, r3, #1
 8004980:	66bb      	str	r3, [r7, #104]	; 0x68
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	3308      	adds	r3, #8
 8004988:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800498a:	623a      	str	r2, [r7, #32]
 800498c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800498e:	69f9      	ldr	r1, [r7, #28]
 8004990:	6a3a      	ldr	r2, [r7, #32]
 8004992:	e841 2300 	strex	r3, r2, [r1]
 8004996:	61bb      	str	r3, [r7, #24]
   return(result);
 8004998:	69bb      	ldr	r3, [r7, #24]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d1e5      	bne.n	800496a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	2220      	movs	r2, #32
 80049a2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	2220      	movs	r2, #32
 80049a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	2220      	movs	r2, #32
 80049b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	2200      	movs	r2, #0
 80049b8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80049bc:	2303      	movs	r3, #3
 80049be:	e010      	b.n	80049e2 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	69da      	ldr	r2, [r3, #28]
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	4013      	ands	r3, r2
 80049ca:	68ba      	ldr	r2, [r7, #8]
 80049cc:	429a      	cmp	r2, r3
 80049ce:	bf0c      	ite	eq
 80049d0:	2301      	moveq	r3, #1
 80049d2:	2300      	movne	r3, #0
 80049d4:	b2db      	uxtb	r3, r3
 80049d6:	461a      	mov	r2, r3
 80049d8:	79fb      	ldrb	r3, [r7, #7]
 80049da:	429a      	cmp	r2, r3
 80049dc:	f43f af48 	beq.w	8004870 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80049e0:	2300      	movs	r3, #0
}
 80049e2:	4618      	mov	r0, r3
 80049e4:	3770      	adds	r7, #112	; 0x70
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bd80      	pop	{r7, pc}

080049ea <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80049ea:	b480      	push	{r7}
 80049ec:	b095      	sub	sp, #84	; 0x54
 80049ee:	af00      	add	r7, sp, #0
 80049f0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049fa:	e853 3f00 	ldrex	r3, [r3]
 80049fe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a02:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004a06:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	461a      	mov	r2, r3
 8004a0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a10:	643b      	str	r3, [r7, #64]	; 0x40
 8004a12:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a14:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004a16:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004a18:	e841 2300 	strex	r3, r2, [r1]
 8004a1c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004a1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d1e6      	bne.n	80049f2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	3308      	adds	r3, #8
 8004a2a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a2c:	6a3b      	ldr	r3, [r7, #32]
 8004a2e:	e853 3f00 	ldrex	r3, [r3]
 8004a32:	61fb      	str	r3, [r7, #28]
   return(result);
 8004a34:	69fb      	ldr	r3, [r7, #28]
 8004a36:	f023 0301 	bic.w	r3, r3, #1
 8004a3a:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	3308      	adds	r3, #8
 8004a42:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a44:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004a46:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a48:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a4c:	e841 2300 	strex	r3, r2, [r1]
 8004a50:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d1e5      	bne.n	8004a24 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a5c:	2b01      	cmp	r3, #1
 8004a5e:	d118      	bne.n	8004a92 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	e853 3f00 	ldrex	r3, [r3]
 8004a6c:	60bb      	str	r3, [r7, #8]
   return(result);
 8004a6e:	68bb      	ldr	r3, [r7, #8]
 8004a70:	f023 0310 	bic.w	r3, r3, #16
 8004a74:	647b      	str	r3, [r7, #68]	; 0x44
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	461a      	mov	r2, r3
 8004a7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a7e:	61bb      	str	r3, [r7, #24]
 8004a80:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a82:	6979      	ldr	r1, [r7, #20]
 8004a84:	69ba      	ldr	r2, [r7, #24]
 8004a86:	e841 2300 	strex	r3, r2, [r1]
 8004a8a:	613b      	str	r3, [r7, #16]
   return(result);
 8004a8c:	693b      	ldr	r3, [r7, #16]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d1e6      	bne.n	8004a60 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2220      	movs	r2, #32
 8004a96:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004aa6:	bf00      	nop
 8004aa8:	3754      	adds	r7, #84	; 0x54
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab0:	4770      	bx	lr

08004ab2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004ab2:	b580      	push	{r7, lr}
 8004ab4:	b084      	sub	sp, #16
 8004ab6:	af00      	add	r7, sp, #0
 8004ab8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004abe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	2200      	movs	r2, #0
 8004acc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004ad0:	68f8      	ldr	r0, [r7, #12]
 8004ad2:	f7ff fb71 	bl	80041b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004ad6:	bf00      	nop
 8004ad8:	3710      	adds	r7, #16
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bd80      	pop	{r7, pc}

08004ade <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004ade:	b580      	push	{r7, lr}
 8004ae0:	b088      	sub	sp, #32
 8004ae2:	af00      	add	r7, sp, #0
 8004ae4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	e853 3f00 	ldrex	r3, [r3]
 8004af2:	60bb      	str	r3, [r7, #8]
   return(result);
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004afa:	61fb      	str	r3, [r7, #28]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	461a      	mov	r2, r3
 8004b02:	69fb      	ldr	r3, [r7, #28]
 8004b04:	61bb      	str	r3, [r7, #24]
 8004b06:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b08:	6979      	ldr	r1, [r7, #20]
 8004b0a:	69ba      	ldr	r2, [r7, #24]
 8004b0c:	e841 2300 	strex	r3, r2, [r1]
 8004b10:	613b      	str	r3, [r7, #16]
   return(result);
 8004b12:	693b      	ldr	r3, [r7, #16]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d1e6      	bne.n	8004ae6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2220      	movs	r2, #32
 8004b1c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2200      	movs	r2, #0
 8004b22:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004b24:	6878      	ldr	r0, [r7, #4]
 8004b26:	f7ff fb3d 	bl	80041a4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004b2a:	bf00      	nop
 8004b2c:	3720      	adds	r7, #32
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bd80      	pop	{r7, pc}
	...

08004b34 <sine_model2_configure_activations>:


AI_DECLARE_STATIC
ai_bool sine_model2_configure_activations(
  ai_network* net_ctx, const ai_buffer* activation_buffer)
{
 8004b34:	b480      	push	{r7}
 8004b36:	b085      	sub	sp, #20
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
 8004b3c:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx &&  activation_buffer && activation_buffer->data)

  ai_ptr activations = AI_PTR(AI_PTR_ALIGN(activation_buffer->data, 4));
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	691b      	ldr	r3, [r3, #16]
 8004b42:	3303      	adds	r3, #3
 8004b44:	f023 0303 	bic.w	r3, r3, #3
 8004b48:	60fb      	str	r3, [r7, #12]
  AI_ASSERT(activations)
  AI_UNUSED(net_ctx)

  {
    /* Updating activations (byte) offsets */
    serving_default_dense_16_input0_output_array.data = AI_PTR(activations + 12);
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	330c      	adds	r3, #12
 8004b4e:	4a1b      	ldr	r2, [pc, #108]	; (8004bbc <sine_model2_configure_activations+0x88>)
 8004b50:	6093      	str	r3, [r2, #8]
    serving_default_dense_16_input0_output_array.data_start = AI_PTR(activations + 12);
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	330c      	adds	r3, #12
 8004b56:	4a19      	ldr	r2, [pc, #100]	; (8004bbc <sine_model2_configure_activations+0x88>)
 8004b58:	60d3      	str	r3, [r2, #12]
    conversion_0_output_array.data = AI_PTR(activations + 12);
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	330c      	adds	r3, #12
 8004b5e:	4a18      	ldr	r2, [pc, #96]	; (8004bc0 <sine_model2_configure_activations+0x8c>)
 8004b60:	6093      	str	r3, [r2, #8]
    conversion_0_output_array.data_start = AI_PTR(activations + 12);
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	330c      	adds	r3, #12
 8004b66:	4a16      	ldr	r2, [pc, #88]	; (8004bc0 <sine_model2_configure_activations+0x8c>)
 8004b68:	60d3      	str	r3, [r2, #12]
    dense_1_output_array.data = AI_PTR(activations + 16);
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	3310      	adds	r3, #16
 8004b6e:	4a15      	ldr	r2, [pc, #84]	; (8004bc4 <sine_model2_configure_activations+0x90>)
 8004b70:	6093      	str	r3, [r2, #8]
    dense_1_output_array.data_start = AI_PTR(activations + 16);
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	3310      	adds	r3, #16
 8004b76:	4a13      	ldr	r2, [pc, #76]	; (8004bc4 <sine_model2_configure_activations+0x90>)
 8004b78:	60d3      	str	r3, [r2, #12]
    dense_2_output_array.data = AI_PTR(activations + 0);
 8004b7a:	4a13      	ldr	r2, [pc, #76]	; (8004bc8 <sine_model2_configure_activations+0x94>)
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	6093      	str	r3, [r2, #8]
    dense_2_output_array.data_start = AI_PTR(activations + 0);
 8004b80:	4a11      	ldr	r2, [pc, #68]	; (8004bc8 <sine_model2_configure_activations+0x94>)
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	60d3      	str	r3, [r2, #12]
    dense_3_output_array.data = AI_PTR(activations + 16);
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	3310      	adds	r3, #16
 8004b8a:	4a10      	ldr	r2, [pc, #64]	; (8004bcc <sine_model2_configure_activations+0x98>)
 8004b8c:	6093      	str	r3, [r2, #8]
    dense_3_output_array.data_start = AI_PTR(activations + 16);
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	3310      	adds	r3, #16
 8004b92:	4a0e      	ldr	r2, [pc, #56]	; (8004bcc <sine_model2_configure_activations+0x98>)
 8004b94:	60d3      	str	r3, [r2, #12]
    dense_4_output_array.data = AI_PTR(activations + 0);
 8004b96:	4a0e      	ldr	r2, [pc, #56]	; (8004bd0 <sine_model2_configure_activations+0x9c>)
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	6093      	str	r3, [r2, #8]
    dense_4_output_array.data_start = AI_PTR(activations + 0);
 8004b9c:	4a0c      	ldr	r2, [pc, #48]	; (8004bd0 <sine_model2_configure_activations+0x9c>)
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	60d3      	str	r3, [r2, #12]
    conversion_5_output_array.data = AI_PTR(NULL);
 8004ba2:	4b0c      	ldr	r3, [pc, #48]	; (8004bd4 <sine_model2_configure_activations+0xa0>)
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	609a      	str	r2, [r3, #8]
    conversion_5_output_array.data_start = AI_PTR(NULL);
 8004ba8:	4b0a      	ldr	r3, [pc, #40]	; (8004bd4 <sine_model2_configure_activations+0xa0>)
 8004baa:	2200      	movs	r2, #0
 8004bac:	60da      	str	r2, [r3, #12]
    
  }
  return true;
 8004bae:	2301      	movs	r3, #1
}
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	3714      	adds	r7, #20
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bba:	4770      	bx	lr
 8004bbc:	20000108 	.word	0x20000108
 8004bc0:	20000118 	.word	0x20000118
 8004bc4:	20000128 	.word	0x20000128
 8004bc8:	20000138 	.word	0x20000138
 8004bcc:	20000148 	.word	0x20000148
 8004bd0:	20000158 	.word	0x20000158
 8004bd4:	20000168 	.word	0x20000168

08004bd8 <sine_model2_configure_weights>:


AI_DECLARE_STATIC
ai_bool sine_model2_configure_weights(
  ai_network* net_ctx, const ai_buffer* weights_buffer)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b085      	sub	sp, #20
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
 8004be0:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx &&  weights_buffer && weights_buffer->data)

  ai_ptr weights = AI_PTR(weights_buffer->data);
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	691b      	ldr	r3, [r3, #16]
 8004be6:	60fb      	str	r3, [r7, #12]
  AI_UNUSED(net_ctx)

  {
    /* Updating weights (byte) offsets */
    
    dense_4_bias_array.format |= AI_FMT_FLAG_CONST;
 8004be8:	4b3f      	ldr	r3, [pc, #252]	; (8004ce8 <sine_model2_configure_weights+0x110>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004bf0:	4a3d      	ldr	r2, [pc, #244]	; (8004ce8 <sine_model2_configure_weights+0x110>)
 8004bf2:	6013      	str	r3, [r2, #0]
    dense_4_bias_array.data = AI_PTR(weights + 736);
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	f503 7338 	add.w	r3, r3, #736	; 0x2e0
 8004bfa:	4a3b      	ldr	r2, [pc, #236]	; (8004ce8 <sine_model2_configure_weights+0x110>)
 8004bfc:	6093      	str	r3, [r2, #8]
    dense_4_bias_array.data_start = AI_PTR(weights + 736);
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	f503 7338 	add.w	r3, r3, #736	; 0x2e0
 8004c04:	4a38      	ldr	r2, [pc, #224]	; (8004ce8 <sine_model2_configure_weights+0x110>)
 8004c06:	60d3      	str	r3, [r2, #12]
    dense_4_weights_array.format |= AI_FMT_FLAG_CONST;
 8004c08:	4b38      	ldr	r3, [pc, #224]	; (8004cec <sine_model2_configure_weights+0x114>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004c10:	4a36      	ldr	r2, [pc, #216]	; (8004cec <sine_model2_configure_weights+0x114>)
 8004c12:	6013      	str	r3, [r2, #0]
    dense_4_weights_array.data = AI_PTR(weights + 720);
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 8004c1a:	4a34      	ldr	r2, [pc, #208]	; (8004cec <sine_model2_configure_weights+0x114>)
 8004c1c:	6093      	str	r3, [r2, #8]
    dense_4_weights_array.data_start = AI_PTR(weights + 720);
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 8004c24:	4a31      	ldr	r2, [pc, #196]	; (8004cec <sine_model2_configure_weights+0x114>)
 8004c26:	60d3      	str	r3, [r2, #12]
    dense_3_bias_array.format |= AI_FMT_FLAG_CONST;
 8004c28:	4b31      	ldr	r3, [pc, #196]	; (8004cf0 <sine_model2_configure_weights+0x118>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004c30:	4a2f      	ldr	r2, [pc, #188]	; (8004cf0 <sine_model2_configure_weights+0x118>)
 8004c32:	6013      	str	r3, [r2, #0]
    dense_3_bias_array.data = AI_PTR(weights + 656);
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	f503 7324 	add.w	r3, r3, #656	; 0x290
 8004c3a:	4a2d      	ldr	r2, [pc, #180]	; (8004cf0 <sine_model2_configure_weights+0x118>)
 8004c3c:	6093      	str	r3, [r2, #8]
    dense_3_bias_array.data_start = AI_PTR(weights + 656);
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	f503 7324 	add.w	r3, r3, #656	; 0x290
 8004c44:	4a2a      	ldr	r2, [pc, #168]	; (8004cf0 <sine_model2_configure_weights+0x118>)
 8004c46:	60d3      	str	r3, [r2, #12]
    dense_3_weights_array.format |= AI_FMT_FLAG_CONST;
 8004c48:	4b2a      	ldr	r3, [pc, #168]	; (8004cf4 <sine_model2_configure_weights+0x11c>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004c50:	4a28      	ldr	r2, [pc, #160]	; (8004cf4 <sine_model2_configure_weights+0x11c>)
 8004c52:	6013      	str	r3, [r2, #0]
    dense_3_weights_array.data = AI_PTR(weights + 400);
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8004c5a:	4a26      	ldr	r2, [pc, #152]	; (8004cf4 <sine_model2_configure_weights+0x11c>)
 8004c5c:	6093      	str	r3, [r2, #8]
    dense_3_weights_array.data_start = AI_PTR(weights + 400);
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8004c64:	4a23      	ldr	r2, [pc, #140]	; (8004cf4 <sine_model2_configure_weights+0x11c>)
 8004c66:	60d3      	str	r3, [r2, #12]
    dense_2_bias_array.format |= AI_FMT_FLAG_CONST;
 8004c68:	4b23      	ldr	r3, [pc, #140]	; (8004cf8 <sine_model2_configure_weights+0x120>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004c70:	4a21      	ldr	r2, [pc, #132]	; (8004cf8 <sine_model2_configure_weights+0x120>)
 8004c72:	6013      	str	r3, [r2, #0]
    dense_2_bias_array.data = AI_PTR(weights + 336);
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8004c7a:	4a1f      	ldr	r2, [pc, #124]	; (8004cf8 <sine_model2_configure_weights+0x120>)
 8004c7c:	6093      	str	r3, [r2, #8]
    dense_2_bias_array.data_start = AI_PTR(weights + 336);
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8004c84:	4a1c      	ldr	r2, [pc, #112]	; (8004cf8 <sine_model2_configure_weights+0x120>)
 8004c86:	60d3      	str	r3, [r2, #12]
    dense_2_weights_array.format |= AI_FMT_FLAG_CONST;
 8004c88:	4b1c      	ldr	r3, [pc, #112]	; (8004cfc <sine_model2_configure_weights+0x124>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004c90:	4a1a      	ldr	r2, [pc, #104]	; (8004cfc <sine_model2_configure_weights+0x124>)
 8004c92:	6013      	str	r3, [r2, #0]
    dense_2_weights_array.data = AI_PTR(weights + 80);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	3350      	adds	r3, #80	; 0x50
 8004c98:	4a18      	ldr	r2, [pc, #96]	; (8004cfc <sine_model2_configure_weights+0x124>)
 8004c9a:	6093      	str	r3, [r2, #8]
    dense_2_weights_array.data_start = AI_PTR(weights + 80);
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	3350      	adds	r3, #80	; 0x50
 8004ca0:	4a16      	ldr	r2, [pc, #88]	; (8004cfc <sine_model2_configure_weights+0x124>)
 8004ca2:	60d3      	str	r3, [r2, #12]
    dense_1_bias_array.format |= AI_FMT_FLAG_CONST;
 8004ca4:	4b16      	ldr	r3, [pc, #88]	; (8004d00 <sine_model2_configure_weights+0x128>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004cac:	4a14      	ldr	r2, [pc, #80]	; (8004d00 <sine_model2_configure_weights+0x128>)
 8004cae:	6013      	str	r3, [r2, #0]
    dense_1_bias_array.data = AI_PTR(weights + 16);
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	3310      	adds	r3, #16
 8004cb4:	4a12      	ldr	r2, [pc, #72]	; (8004d00 <sine_model2_configure_weights+0x128>)
 8004cb6:	6093      	str	r3, [r2, #8]
    dense_1_bias_array.data_start = AI_PTR(weights + 16);
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	3310      	adds	r3, #16
 8004cbc:	4a10      	ldr	r2, [pc, #64]	; (8004d00 <sine_model2_configure_weights+0x128>)
 8004cbe:	60d3      	str	r3, [r2, #12]
    dense_1_weights_array.format |= AI_FMT_FLAG_CONST;
 8004cc0:	4b10      	ldr	r3, [pc, #64]	; (8004d04 <sine_model2_configure_weights+0x12c>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004cc8:	4a0e      	ldr	r2, [pc, #56]	; (8004d04 <sine_model2_configure_weights+0x12c>)
 8004cca:	6013      	str	r3, [r2, #0]
    dense_1_weights_array.data = AI_PTR(weights + 0);
 8004ccc:	4a0d      	ldr	r2, [pc, #52]	; (8004d04 <sine_model2_configure_weights+0x12c>)
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	6093      	str	r3, [r2, #8]
    dense_1_weights_array.data_start = AI_PTR(weights + 0);
 8004cd2:	4a0c      	ldr	r2, [pc, #48]	; (8004d04 <sine_model2_configure_weights+0x12c>)
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	60d3      	str	r3, [r2, #12]
  }

  return true;
 8004cd8:	2301      	movs	r3, #1
}
 8004cda:	4618      	mov	r0, r3
 8004cdc:	3714      	adds	r7, #20
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce4:	4770      	bx	lr
 8004ce6:	bf00      	nop
 8004ce8:	20000088 	.word	0x20000088
 8004cec:	20000098 	.word	0x20000098
 8004cf0:	200000a8 	.word	0x200000a8
 8004cf4:	200000b8 	.word	0x200000b8
 8004cf8:	200000c8 	.word	0x200000c8
 8004cfc:	200000d8 	.word	0x200000d8
 8004d00:	200000e8 	.word	0x200000e8
 8004d04:	200000f8 	.word	0x200000f8

08004d08 <ai_sine_model2_create>:
}

AI_API_ENTRY
ai_error ai_sine_model2_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b084      	sub	sp, #16
 8004d0c:	af02      	add	r7, sp, #8
 8004d0e:	6078      	str	r0, [r7, #4]
 8004d10:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 8004d12:	2300      	movs	r3, #0
 8004d14:	9301      	str	r3, [sp, #4]
 8004d16:	2303      	movs	r3, #3
 8004d18:	9300      	str	r3, [sp, #0]
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	4a04      	ldr	r2, [pc, #16]	; (8004d30 <ai_sine_model2_create+0x28>)
 8004d1e:	6839      	ldr	r1, [r7, #0]
 8004d20:	6878      	ldr	r0, [r7, #4]
 8004d22:	f000 f861 	bl	8004de8 <ai_platform_network_create>
 8004d26:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8004d28:	4618      	mov	r0, r3
 8004d2a:	3708      	adds	r7, #8
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	bd80      	pop	{r7, pc}
 8004d30:	20000028 	.word	0x20000028

08004d34 <ai_sine_model2_init>:
}

AI_API_ENTRY
ai_bool ai_sine_model2_init(
  ai_handle network, const ai_network_params* params)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b084      	sub	sp, #16
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
 8004d3c:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 8004d3e:	6839      	ldr	r1, [r7, #0]
 8004d40:	6878      	ldr	r0, [r7, #4]
 8004d42:	f000 f8d5 	bl	8004ef0 <ai_platform_network_init>
 8004d46:	60f8      	str	r0, [r7, #12]
  if ( !net_ctx ) return false;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d101      	bne.n	8004d52 <ai_sine_model2_init+0x1e>
 8004d4e:	2300      	movs	r3, #0
 8004d50:	e02b      	b.n	8004daa <ai_sine_model2_init+0x76>

  ai_bool ok = true;
 8004d52:	2301      	movs	r3, #1
 8004d54:	72fb      	strb	r3, [r7, #11]
  ok &= sine_model2_configure_weights(net_ctx, &params->params);
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	4619      	mov	r1, r3
 8004d5a:	68f8      	ldr	r0, [r7, #12]
 8004d5c:	f7ff ff3c 	bl	8004bd8 <sine_model2_configure_weights>
 8004d60:	4603      	mov	r3, r0
 8004d62:	461a      	mov	r2, r3
 8004d64:	7afb      	ldrb	r3, [r7, #11]
 8004d66:	4013      	ands	r3, r2
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	bf14      	ite	ne
 8004d6c:	2301      	movne	r3, #1
 8004d6e:	2300      	moveq	r3, #0
 8004d70:	72fb      	strb	r3, [r7, #11]
  ok &= sine_model2_configure_activations(net_ctx, &params->activations);
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	3318      	adds	r3, #24
 8004d76:	4619      	mov	r1, r3
 8004d78:	68f8      	ldr	r0, [r7, #12]
 8004d7a:	f7ff fedb 	bl	8004b34 <sine_model2_configure_activations>
 8004d7e:	4603      	mov	r3, r0
 8004d80:	461a      	mov	r2, r3
 8004d82:	7afb      	ldrb	r3, [r7, #11]
 8004d84:	4013      	ands	r3, r2
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	bf14      	ite	ne
 8004d8a:	2301      	movne	r3, #1
 8004d8c:	2300      	moveq	r3, #0
 8004d8e:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 8004d90:	6878      	ldr	r0, [r7, #4]
 8004d92:	f000 f995 	bl	80050c0 <ai_platform_network_post_init>
 8004d96:	4603      	mov	r3, r0
 8004d98:	461a      	mov	r2, r3
 8004d9a:	7afb      	ldrb	r3, [r7, #11]
 8004d9c:	4013      	ands	r3, r2
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	bf14      	ite	ne
 8004da2:	2301      	movne	r3, #1
 8004da4:	2300      	moveq	r3, #0
 8004da6:	72fb      	strb	r3, [r7, #11]

  return ok;
 8004da8:	7afb      	ldrb	r3, [r7, #11]
}
 8004daa:	4618      	mov	r0, r3
 8004dac:	3710      	adds	r7, #16
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd80      	pop	{r7, pc}

08004db2 <ai_sine_model2_run>:


AI_API_ENTRY
ai_i32 ai_sine_model2_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 8004db2:	b580      	push	{r7, lr}
 8004db4:	b084      	sub	sp, #16
 8004db6:	af00      	add	r7, sp, #0
 8004db8:	60f8      	str	r0, [r7, #12]
 8004dba:	60b9      	str	r1, [r7, #8]
 8004dbc:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 8004dbe:	687a      	ldr	r2, [r7, #4]
 8004dc0:	68b9      	ldr	r1, [r7, #8]
 8004dc2:	68f8      	ldr	r0, [r7, #12]
 8004dc4:	f000 fa28 	bl	8005218 <ai_platform_network_process>
 8004dc8:	4603      	mov	r3, r0
}
 8004dca:	4618      	mov	r0, r3
 8004dcc:	3710      	adds	r7, #16
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bd80      	pop	{r7, pc}
	...

08004dd4 <ai_sine_model2_data_weights_get>:
#include "sine_model2_data.h"

ai_handle ai_sine_model2_data_weights_get(void)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	af00      	add	r7, sp, #0
    0x00, 0x00, 0x37, 0x0e, 0x00, 0x00, 0x0f, 0xfc, 0xff, 0xff,
    0x2c, 0xd8, 0xcd, 0xc5, 0xd1, 0x42, 0xfd, 0xb8, 0xbb, 0x81,
    0x3b, 0x69, 0x1e, 0xfc, 0x87, 0x2c, 0xbc, 0xdd, 0xff, 0xff
  };

  return AI_HANDLE_PTR(s_sine_model2_weights);
 8004dd8:	4b02      	ldr	r3, [pc, #8]	; (8004de4 <ai_sine_model2_data_weights_get+0x10>)

}
 8004dda:	4618      	mov	r0, r3
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de2:	4770      	bx	lr
 8004de4:	0800a1a0 	.word	0x0800a1a0

08004de8 <ai_platform_network_create>:
 8004de8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004dea:	4d36      	ldr	r5, [pc, #216]	; (8004ec4 <ai_platform_network_create+0xdc>)
 8004dec:	b083      	sub	sp, #12
 8004dee:	4e36      	ldr	r6, [pc, #216]	; (8004ec8 <ai_platform_network_create+0xe0>)
 8004df0:	6829      	ldr	r1, [r5, #0]
 8004df2:	f89d 7020 	ldrb.w	r7, [sp, #32]
 8004df6:	f021 0101 	bic.w	r1, r1, #1
 8004dfa:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
 8004dfe:	6029      	str	r1, [r5, #0]
 8004e00:	f46f 658a 	mvn.w	r5, #1104	; 0x450
 8004e04:	6831      	ldr	r1, [r6, #0]
 8004e06:	f3c1 010a 	ubfx	r1, r1, #0, #11
 8004e0a:	194d      	adds	r5, r1, r5
 8004e0c:	2d01      	cmp	r5, #1
 8004e0e:	d92f      	bls.n	8004e70 <ai_platform_network_create+0x88>
 8004e10:	f240 4549 	movw	r5, #1097	; 0x449
 8004e14:	42a9      	cmp	r1, r5
 8004e16:	d02b      	beq.n	8004e70 <ai_platform_network_create+0x88>
 8004e18:	492c      	ldr	r1, [pc, #176]	; (8004ecc <ai_platform_network_create+0xe4>)
 8004e1a:	6809      	ldr	r1, [r1, #0]
 8004e1c:	f3c1 010a 	ubfx	r1, r1, #0, #11
 8004e20:	f5b1 6f8a 	cmp.w	r1, #1104	; 0x450
 8004e24:	d015      	beq.n	8004e52 <ai_platform_network_create+0x6a>
 8004e26:	2800      	cmp	r0, #0
 8004e28:	d031      	beq.n	8004e8e <ai_platform_network_create+0xa6>
 8004e2a:	461e      	mov	r6, r3
 8004e2c:	4613      	mov	r3, r2
 8004e2e:	4a28      	ldr	r2, [pc, #160]	; (8004ed0 <ai_platform_network_create+0xe8>)
 8004e30:	4605      	mov	r5, r0
 8004e32:	601a      	str	r2, [r3, #0]
 8004e34:	6003      	str	r3, [r0, #0]
 8004e36:	f000 fded 	bl	8005a14 <core_init>
 8004e3a:	2800      	cmp	r0, #0
 8004e3c:	d02b      	beq.n	8004e96 <ai_platform_network_create+0xae>
 8004e3e:	0223      	lsls	r3, r4, #8
 8004e40:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8004e44:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
 8004e48:	f1b3 7f82 	cmp.w	r3, #17039360	; 0x1040000
 8004e4c:	d92e      	bls.n	8004eac <ai_platform_network_create+0xc4>
 8004e4e:	2301      	movs	r3, #1
 8004e50:	e022      	b.n	8004e98 <ai_platform_network_create+0xb0>
 8004e52:	4920      	ldr	r1, [pc, #128]	; (8004ed4 <ai_platform_network_create+0xec>)
 8004e54:	2501      	movs	r5, #1
 8004e56:	460e      	mov	r6, r1
 8004e58:	600d      	str	r5, [r1, #0]
 8004e5a:	6831      	ldr	r1, [r6, #0]
 8004e5c:	2900      	cmp	r1, #0
 8004e5e:	d1fc      	bne.n	8004e5a <ai_platform_network_create+0x72>
 8004e60:	491d      	ldr	r1, [pc, #116]	; (8004ed8 <ai_platform_network_create+0xf0>)
 8004e62:	4e1e      	ldr	r6, [pc, #120]	; (8004edc <ai_platform_network_create+0xf4>)
 8004e64:	4d1e      	ldr	r5, [pc, #120]	; (8004ee0 <ai_platform_network_create+0xf8>)
 8004e66:	600e      	str	r6, [r1, #0]
 8004e68:	6809      	ldr	r1, [r1, #0]
 8004e6a:	42a9      	cmp	r1, r5
 8004e6c:	d0db      	beq.n	8004e26 <ai_platform_network_create+0x3e>
 8004e6e:	e7fe      	b.n	8004e6e <ai_platform_network_create+0x86>
 8004e70:	491c      	ldr	r1, [pc, #112]	; (8004ee4 <ai_platform_network_create+0xfc>)
 8004e72:	2501      	movs	r5, #1
 8004e74:	460e      	mov	r6, r1
 8004e76:	600d      	str	r5, [r1, #0]
 8004e78:	6831      	ldr	r1, [r6, #0]
 8004e7a:	2900      	cmp	r1, #0
 8004e7c:	d1fc      	bne.n	8004e78 <ai_platform_network_create+0x90>
 8004e7e:	491a      	ldr	r1, [pc, #104]	; (8004ee8 <ai_platform_network_create+0x100>)
 8004e80:	4e16      	ldr	r6, [pc, #88]	; (8004edc <ai_platform_network_create+0xf4>)
 8004e82:	4d17      	ldr	r5, [pc, #92]	; (8004ee0 <ai_platform_network_create+0xf8>)
 8004e84:	600e      	str	r6, [r1, #0]
 8004e86:	6809      	ldr	r1, [r1, #0]
 8004e88:	42a9      	cmp	r1, r5
 8004e8a:	d0cc      	beq.n	8004e26 <ai_platform_network_create+0x3e>
 8004e8c:	e7fe      	b.n	8004e8c <ai_platform_network_create+0xa4>
 8004e8e:	f241 0010 	movw	r0, #4112	; 0x1010
 8004e92:	b003      	add	sp, #12
 8004e94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e96:	2330      	movs	r3, #48	; 0x30
 8004e98:	2100      	movs	r1, #0
 8004e9a:	2210      	movs	r2, #16
 8004e9c:	6029      	str	r1, [r5, #0]
 8004e9e:	2000      	movs	r0, #0
 8004ea0:	f363 0007 	bfi	r0, r3, #0, #8
 8004ea4:	f362 201f 	bfi	r0, r2, #8, #24
 8004ea8:	b003      	add	sp, #12
 8004eaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004eac:	4b0f      	ldr	r3, [pc, #60]	; (8004eec <ai_platform_network_create+0x104>)
 8004eae:	a802      	add	r0, sp, #8
 8004eb0:	f840 3d04 	str.w	r3, [r0, #-4]!
 8004eb4:	f000 fed4 	bl	8005c60 <ai_check_custom_types>
 8004eb8:	b110      	cbz	r0, 8004ec0 <ai_platform_network_create+0xd8>
 8004eba:	2200      	movs	r2, #0
 8004ebc:	4613      	mov	r3, r2
 8004ebe:	e7ee      	b.n	8004e9e <ai_platform_network_create+0xb6>
 8004ec0:	2302      	movs	r3, #2
 8004ec2:	e7e9      	b.n	8004e98 <ai_platform_network_create+0xb0>
 8004ec4:	e0002000 	.word	0xe0002000
 8004ec8:	e0042000 	.word	0xe0042000
 8004ecc:	5c001000 	.word	0x5c001000
 8004ed0:	a1c00100 	.word	0xa1c00100
 8004ed4:	58024c08 	.word	0x58024c08
 8004ed8:	58024c00 	.word	0x58024c00
 8004edc:	f407a5c2 	.word	0xf407a5c2
 8004ee0:	b5e8b5cd 	.word	0xb5e8b5cd
 8004ee4:	40023008 	.word	0x40023008
 8004ee8:	40023000 	.word	0x40023000
 8004eec:	84048403 	.word	0x84048403

08004ef0 <ai_platform_network_init>:
 8004ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ef2:	2800      	cmp	r0, #0
 8004ef4:	d05e      	beq.n	8004fb4 <ai_platform_network_init+0xc4>
 8004ef6:	4b68      	ldr	r3, [pc, #416]	; (8005098 <ai_platform_network_init+0x1a8>)
 8004ef8:	6802      	ldr	r2, [r0, #0]
 8004efa:	429a      	cmp	r2, r3
 8004efc:	d15a      	bne.n	8004fb4 <ai_platform_network_init+0xc4>
 8004efe:	4a67      	ldr	r2, [pc, #412]	; (800509c <ai_platform_network_init+0x1ac>)
 8004f00:	4c67      	ldr	r4, [pc, #412]	; (80050a0 <ai_platform_network_init+0x1b0>)
 8004f02:	6813      	ldr	r3, [r2, #0]
 8004f04:	f023 0301 	bic.w	r3, r3, #1
 8004f08:	6013      	str	r3, [r2, #0]
 8004f0a:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8004f0e:	6823      	ldr	r3, [r4, #0]
 8004f10:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004f14:	189a      	adds	r2, r3, r2
 8004f16:	2a01      	cmp	r2, #1
 8004f18:	d93d      	bls.n	8004f96 <ai_platform_network_init+0xa6>
 8004f1a:	f240 4249 	movw	r2, #1097	; 0x449
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d039      	beq.n	8004f96 <ai_platform_network_init+0xa6>
 8004f22:	4b60      	ldr	r3, [pc, #384]	; (80050a4 <ai_platform_network_init+0x1b4>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004f2a:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8004f2e:	d06b      	beq.n	8005008 <ai_platform_network_init+0x118>
 8004f30:	4605      	mov	r5, r0
 8004f32:	460c      	mov	r4, r1
 8004f34:	2900      	cmp	r1, #0
 8004f36:	f000 80a8 	beq.w	800508a <ai_platform_network_init+0x19a>
 8004f3a:	6a8f      	ldr	r7, [r1, #40]	; 0x28
 8004f3c:	690e      	ldr	r6, [r1, #16]
 8004f3e:	2f00      	cmp	r7, #0
 8004f40:	f000 8092 	beq.w	8005068 <ai_platform_network_init+0x178>
 8004f44:	2e00      	cmp	r6, #0
 8004f46:	d07d      	beq.n	8005044 <ai_platform_network_init+0x154>
 8004f48:	f104 0718 	add.w	r7, r4, #24
 8004f4c:	f105 0c18 	add.w	ip, r5, #24
 8004f50:	f105 0630 	add.w	r6, r5, #48	; 0x30
 8004f54:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004f56:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8004f5a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004f5e:	2403      	movs	r4, #3
 8004f60:	e88c 0003 	stmia.w	ip, {r0, r1}
 8004f64:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8004f66:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8004f68:	e897 0003 	ldmia.w	r7, {r0, r1}
 8004f6c:	e886 0003 	stmia.w	r6, {r0, r1}
 8004f70:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 8004f72:	60ec      	str	r4, [r5, #12]
 8004f74:	b16a      	cbz	r2, 8004f92 <ai_platform_network_init+0xa2>
 8004f76:	68d3      	ldr	r3, [r2, #12]
 8004f78:	6095      	str	r5, [r2, #8]
 8004f7a:	b153      	cbz	r3, 8004f92 <ai_platform_network_init+0xa2>
 8004f7c:	429a      	cmp	r2, r3
 8004f7e:	d104      	bne.n	8004f8a <ai_platform_network_init+0x9a>
 8004f80:	e007      	b.n	8004f92 <ai_platform_network_init+0xa2>
 8004f82:	429a      	cmp	r2, r3
 8004f84:	4613      	mov	r3, r2
 8004f86:	d004      	beq.n	8004f92 <ai_platform_network_init+0xa2>
 8004f88:	b11a      	cbz	r2, 8004f92 <ai_platform_network_init+0xa2>
 8004f8a:	68da      	ldr	r2, [r3, #12]
 8004f8c:	609d      	str	r5, [r3, #8]
 8004f8e:	2a00      	cmp	r2, #0
 8004f90:	d1f7      	bne.n	8004f82 <ai_platform_network_init+0x92>
 8004f92:	4628      	mov	r0, r5
 8004f94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f96:	4b44      	ldr	r3, [pc, #272]	; (80050a8 <ai_platform_network_init+0x1b8>)
 8004f98:	2201      	movs	r2, #1
 8004f9a:	461c      	mov	r4, r3
 8004f9c:	601a      	str	r2, [r3, #0]
 8004f9e:	6823      	ldr	r3, [r4, #0]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d1fc      	bne.n	8004f9e <ai_platform_network_init+0xae>
 8004fa4:	4b41      	ldr	r3, [pc, #260]	; (80050ac <ai_platform_network_init+0x1bc>)
 8004fa6:	4c42      	ldr	r4, [pc, #264]	; (80050b0 <ai_platform_network_init+0x1c0>)
 8004fa8:	4a42      	ldr	r2, [pc, #264]	; (80050b4 <ai_platform_network_init+0x1c4>)
 8004faa:	601c      	str	r4, [r3, #0]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d0be      	beq.n	8004f30 <ai_platform_network_init+0x40>
 8004fb2:	e7fe      	b.n	8004fb2 <ai_platform_network_init+0xc2>
 8004fb4:	4a39      	ldr	r2, [pc, #228]	; (800509c <ai_platform_network_init+0x1ac>)
 8004fb6:	493a      	ldr	r1, [pc, #232]	; (80050a0 <ai_platform_network_init+0x1b0>)
 8004fb8:	6813      	ldr	r3, [r2, #0]
 8004fba:	f023 0301 	bic.w	r3, r3, #1
 8004fbe:	6013      	str	r3, [r2, #0]
 8004fc0:	680b      	ldr	r3, [r1, #0]
 8004fc2:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 8004fc6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004fca:	185a      	adds	r2, r3, r1
 8004fcc:	2a01      	cmp	r2, #1
 8004fce:	d90c      	bls.n	8004fea <ai_platform_network_init+0xfa>
 8004fd0:	f240 4249 	movw	r2, #1097	; 0x449
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d008      	beq.n	8004fea <ai_platform_network_init+0xfa>
 8004fd8:	4b32      	ldr	r3, [pc, #200]	; (80050a4 <ai_platform_network_init+0x1b4>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004fe0:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8004fe4:	d01f      	beq.n	8005026 <ai_platform_network_init+0x136>
 8004fe6:	2000      	movs	r0, #0
 8004fe8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004fea:	4b2f      	ldr	r3, [pc, #188]	; (80050a8 <ai_platform_network_init+0x1b8>)
 8004fec:	2201      	movs	r2, #1
 8004fee:	4619      	mov	r1, r3
 8004ff0:	601a      	str	r2, [r3, #0]
 8004ff2:	680b      	ldr	r3, [r1, #0]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d1fc      	bne.n	8004ff2 <ai_platform_network_init+0x102>
 8004ff8:	4b2c      	ldr	r3, [pc, #176]	; (80050ac <ai_platform_network_init+0x1bc>)
 8004ffa:	492d      	ldr	r1, [pc, #180]	; (80050b0 <ai_platform_network_init+0x1c0>)
 8004ffc:	4a2d      	ldr	r2, [pc, #180]	; (80050b4 <ai_platform_network_init+0x1c4>)
 8004ffe:	6019      	str	r1, [r3, #0]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4293      	cmp	r3, r2
 8005004:	d0ef      	beq.n	8004fe6 <ai_platform_network_init+0xf6>
 8005006:	e7fe      	b.n	8005006 <ai_platform_network_init+0x116>
 8005008:	4b2b      	ldr	r3, [pc, #172]	; (80050b8 <ai_platform_network_init+0x1c8>)
 800500a:	2201      	movs	r2, #1
 800500c:	461c      	mov	r4, r3
 800500e:	601a      	str	r2, [r3, #0]
 8005010:	6823      	ldr	r3, [r4, #0]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d1fc      	bne.n	8005010 <ai_platform_network_init+0x120>
 8005016:	4b29      	ldr	r3, [pc, #164]	; (80050bc <ai_platform_network_init+0x1cc>)
 8005018:	4c25      	ldr	r4, [pc, #148]	; (80050b0 <ai_platform_network_init+0x1c0>)
 800501a:	4a26      	ldr	r2, [pc, #152]	; (80050b4 <ai_platform_network_init+0x1c4>)
 800501c:	601c      	str	r4, [r3, #0]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4293      	cmp	r3, r2
 8005022:	d085      	beq.n	8004f30 <ai_platform_network_init+0x40>
 8005024:	e7fe      	b.n	8005024 <ai_platform_network_init+0x134>
 8005026:	4b24      	ldr	r3, [pc, #144]	; (80050b8 <ai_platform_network_init+0x1c8>)
 8005028:	2201      	movs	r2, #1
 800502a:	4619      	mov	r1, r3
 800502c:	601a      	str	r2, [r3, #0]
 800502e:	680b      	ldr	r3, [r1, #0]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d1fc      	bne.n	800502e <ai_platform_network_init+0x13e>
 8005034:	4b21      	ldr	r3, [pc, #132]	; (80050bc <ai_platform_network_init+0x1cc>)
 8005036:	491e      	ldr	r1, [pc, #120]	; (80050b0 <ai_platform_network_init+0x1c0>)
 8005038:	4a1e      	ldr	r2, [pc, #120]	; (80050b4 <ai_platform_network_init+0x1c4>)
 800503a:	6019      	str	r1, [r3, #0]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4293      	cmp	r3, r2
 8005040:	d0d1      	beq.n	8004fe6 <ai_platform_network_init+0xf6>
 8005042:	e7fe      	b.n	8005042 <ai_platform_network_init+0x152>
 8005044:	8921      	ldrh	r1, [r4, #8]
 8005046:	88e2      	ldrh	r2, [r4, #6]
 8005048:	68e3      	ldr	r3, [r4, #12]
 800504a:	fb02 f201 	mul.w	r2, r2, r1
 800504e:	fb03 f302 	mul.w	r3, r3, r2
 8005052:	2b00      	cmp	r3, #0
 8005054:	f43f af78 	beq.w	8004f48 <ai_platform_network_init+0x58>
 8005058:	f105 0010 	add.w	r0, r5, #16
 800505c:	2212      	movs	r2, #18
 800505e:	2110      	movs	r1, #16
 8005060:	f000 fcda 	bl	8005a18 <core_set_error>
 8005064:	4630      	mov	r0, r6
 8005066:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005068:	8c09      	ldrh	r1, [r1, #32]
 800506a:	8be2      	ldrh	r2, [r4, #30]
 800506c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800506e:	fb02 f201 	mul.w	r2, r2, r1
 8005072:	fb03 f302 	mul.w	r3, r3, r2
 8005076:	2b00      	cmp	r3, #0
 8005078:	f43f af64 	beq.w	8004f44 <ai_platform_network_init+0x54>
 800507c:	2213      	movs	r2, #19
 800507e:	2110      	movs	r1, #16
 8005080:	3010      	adds	r0, #16
 8005082:	f000 fcc9 	bl	8005a18 <core_set_error>
 8005086:	4638      	mov	r0, r7
 8005088:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800508a:	2211      	movs	r2, #17
 800508c:	2110      	movs	r1, #16
 800508e:	3010      	adds	r0, #16
 8005090:	f000 fcc2 	bl	8005a18 <core_set_error>
 8005094:	4620      	mov	r0, r4
 8005096:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005098:	a1c00100 	.word	0xa1c00100
 800509c:	e0002000 	.word	0xe0002000
 80050a0:	e0042000 	.word	0xe0042000
 80050a4:	5c001000 	.word	0x5c001000
 80050a8:	40023008 	.word	0x40023008
 80050ac:	40023000 	.word	0x40023000
 80050b0:	f407a5c2 	.word	0xf407a5c2
 80050b4:	b5e8b5cd 	.word	0xb5e8b5cd
 80050b8:	58024c08 	.word	0x58024c08
 80050bc:	58024c00 	.word	0x58024c00

080050c0 <ai_platform_network_post_init>:
 80050c0:	b538      	push	{r3, r4, r5, lr}
 80050c2:	b118      	cbz	r0, 80050cc <ai_platform_network_post_init+0xc>
 80050c4:	4b4a      	ldr	r3, [pc, #296]	; (80051f0 <ai_platform_network_post_init+0x130>)
 80050c6:	6802      	ldr	r2, [r0, #0]
 80050c8:	429a      	cmp	r2, r3
 80050ca:	d029      	beq.n	8005120 <ai_platform_network_post_init+0x60>
 80050cc:	4a49      	ldr	r2, [pc, #292]	; (80051f4 <ai_platform_network_post_init+0x134>)
 80050ce:	494a      	ldr	r1, [pc, #296]	; (80051f8 <ai_platform_network_post_init+0x138>)
 80050d0:	6813      	ldr	r3, [r2, #0]
 80050d2:	f023 0301 	bic.w	r3, r3, #1
 80050d6:	6013      	str	r3, [r2, #0]
 80050d8:	680b      	ldr	r3, [r1, #0]
 80050da:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 80050de:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80050e2:	185a      	adds	r2, r3, r1
 80050e4:	2a01      	cmp	r2, #1
 80050e6:	d90c      	bls.n	8005102 <ai_platform_network_post_init+0x42>
 80050e8:	f240 4249 	movw	r2, #1097	; 0x449
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d008      	beq.n	8005102 <ai_platform_network_post_init+0x42>
 80050f0:	4b42      	ldr	r3, [pc, #264]	; (80051fc <ai_platform_network_post_init+0x13c>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80050f8:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 80050fc:	d044      	beq.n	8005188 <ai_platform_network_post_init+0xc8>
 80050fe:	2000      	movs	r0, #0
 8005100:	bd38      	pop	{r3, r4, r5, pc}
 8005102:	4b3f      	ldr	r3, [pc, #252]	; (8005200 <ai_platform_network_post_init+0x140>)
 8005104:	2201      	movs	r2, #1
 8005106:	4619      	mov	r1, r3
 8005108:	601a      	str	r2, [r3, #0]
 800510a:	680b      	ldr	r3, [r1, #0]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d1fc      	bne.n	800510a <ai_platform_network_post_init+0x4a>
 8005110:	4b3c      	ldr	r3, [pc, #240]	; (8005204 <ai_platform_network_post_init+0x144>)
 8005112:	493d      	ldr	r1, [pc, #244]	; (8005208 <ai_platform_network_post_init+0x148>)
 8005114:	4a3d      	ldr	r2, [pc, #244]	; (800520c <ai_platform_network_post_init+0x14c>)
 8005116:	6019      	str	r1, [r3, #0]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4293      	cmp	r3, r2
 800511c:	d0ef      	beq.n	80050fe <ai_platform_network_post_init+0x3e>
 800511e:	e7fe      	b.n	800511e <ai_platform_network_post_init+0x5e>
 8005120:	4a34      	ldr	r2, [pc, #208]	; (80051f4 <ai_platform_network_post_init+0x134>)
 8005122:	4935      	ldr	r1, [pc, #212]	; (80051f8 <ai_platform_network_post_init+0x138>)
 8005124:	6813      	ldr	r3, [r2, #0]
 8005126:	f023 0301 	bic.w	r3, r3, #1
 800512a:	6013      	str	r3, [r2, #0]
 800512c:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8005130:	680b      	ldr	r3, [r1, #0]
 8005132:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005136:	189a      	adds	r2, r3, r2
 8005138:	2a01      	cmp	r2, #1
 800513a:	d94a      	bls.n	80051d2 <ai_platform_network_post_init+0x112>
 800513c:	f240 4249 	movw	r2, #1097	; 0x449
 8005140:	4293      	cmp	r3, r2
 8005142:	d046      	beq.n	80051d2 <ai_platform_network_post_init+0x112>
 8005144:	4b2d      	ldr	r3, [pc, #180]	; (80051fc <ai_platform_network_post_init+0x13c>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800514c:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8005150:	d030      	beq.n	80051b4 <ai_platform_network_post_init+0xf4>
 8005152:	68c3      	ldr	r3, [r0, #12]
 8005154:	4604      	mov	r4, r0
 8005156:	f013 0502 	ands.w	r5, r3, #2
 800515a:	d024      	beq.n	80051a6 <ai_platform_network_post_init+0xe6>
 800515c:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800515e:	b18b      	cbz	r3, 8005184 <ai_platform_network_post_init+0xc4>
 8005160:	6d05      	ldr	r5, [r0, #80]	; 0x50
 8005162:	b90d      	cbnz	r5, 8005168 <ai_platform_network_post_init+0xa8>
 8005164:	e00e      	b.n	8005184 <ai_platform_network_post_init+0xc4>
 8005166:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005168:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800516a:	4629      	mov	r1, r5
 800516c:	2000      	movs	r0, #0
 800516e:	4798      	blx	r3
 8005170:	68ea      	ldr	r2, [r5, #12]
 8005172:	1b53      	subs	r3, r2, r5
 8005174:	4615      	mov	r5, r2
 8005176:	bf18      	it	ne
 8005178:	2301      	movne	r3, #1
 800517a:	2a00      	cmp	r2, #0
 800517c:	bf08      	it	eq
 800517e:	2300      	moveq	r3, #0
 8005180:	2b00      	cmp	r3, #0
 8005182:	d1f0      	bne.n	8005166 <ai_platform_network_post_init+0xa6>
 8005184:	2001      	movs	r0, #1
 8005186:	bd38      	pop	{r3, r4, r5, pc}
 8005188:	4b21      	ldr	r3, [pc, #132]	; (8005210 <ai_platform_network_post_init+0x150>)
 800518a:	2201      	movs	r2, #1
 800518c:	4619      	mov	r1, r3
 800518e:	601a      	str	r2, [r3, #0]
 8005190:	680b      	ldr	r3, [r1, #0]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d1fc      	bne.n	8005190 <ai_platform_network_post_init+0xd0>
 8005196:	4b1f      	ldr	r3, [pc, #124]	; (8005214 <ai_platform_network_post_init+0x154>)
 8005198:	491b      	ldr	r1, [pc, #108]	; (8005208 <ai_platform_network_post_init+0x148>)
 800519a:	4a1c      	ldr	r2, [pc, #112]	; (800520c <ai_platform_network_post_init+0x14c>)
 800519c:	6019      	str	r1, [r3, #0]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d0ac      	beq.n	80050fe <ai_platform_network_post_init+0x3e>
 80051a4:	e7fe      	b.n	80051a4 <ai_platform_network_post_init+0xe4>
 80051a6:	2210      	movs	r2, #16
 80051a8:	2111      	movs	r1, #17
 80051aa:	3010      	adds	r0, #16
 80051ac:	f000 fc34 	bl	8005a18 <core_set_error>
 80051b0:	4628      	mov	r0, r5
 80051b2:	bd38      	pop	{r3, r4, r5, pc}
 80051b4:	4b16      	ldr	r3, [pc, #88]	; (8005210 <ai_platform_network_post_init+0x150>)
 80051b6:	2201      	movs	r2, #1
 80051b8:	4619      	mov	r1, r3
 80051ba:	601a      	str	r2, [r3, #0]
 80051bc:	680b      	ldr	r3, [r1, #0]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d1fc      	bne.n	80051bc <ai_platform_network_post_init+0xfc>
 80051c2:	4b14      	ldr	r3, [pc, #80]	; (8005214 <ai_platform_network_post_init+0x154>)
 80051c4:	4910      	ldr	r1, [pc, #64]	; (8005208 <ai_platform_network_post_init+0x148>)
 80051c6:	4a11      	ldr	r2, [pc, #68]	; (800520c <ai_platform_network_post_init+0x14c>)
 80051c8:	6019      	str	r1, [r3, #0]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d0c0      	beq.n	8005152 <ai_platform_network_post_init+0x92>
 80051d0:	e7fe      	b.n	80051d0 <ai_platform_network_post_init+0x110>
 80051d2:	4b0b      	ldr	r3, [pc, #44]	; (8005200 <ai_platform_network_post_init+0x140>)
 80051d4:	2201      	movs	r2, #1
 80051d6:	4619      	mov	r1, r3
 80051d8:	601a      	str	r2, [r3, #0]
 80051da:	680b      	ldr	r3, [r1, #0]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d1fc      	bne.n	80051da <ai_platform_network_post_init+0x11a>
 80051e0:	4b08      	ldr	r3, [pc, #32]	; (8005204 <ai_platform_network_post_init+0x144>)
 80051e2:	4909      	ldr	r1, [pc, #36]	; (8005208 <ai_platform_network_post_init+0x148>)
 80051e4:	4a09      	ldr	r2, [pc, #36]	; (800520c <ai_platform_network_post_init+0x14c>)
 80051e6:	6019      	str	r1, [r3, #0]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d0b1      	beq.n	8005152 <ai_platform_network_post_init+0x92>
 80051ee:	e7fe      	b.n	80051ee <ai_platform_network_post_init+0x12e>
 80051f0:	a1c00100 	.word	0xa1c00100
 80051f4:	e0002000 	.word	0xe0002000
 80051f8:	e0042000 	.word	0xe0042000
 80051fc:	5c001000 	.word	0x5c001000
 8005200:	40023008 	.word	0x40023008
 8005204:	40023000 	.word	0x40023000
 8005208:	f407a5c2 	.word	0xf407a5c2
 800520c:	b5e8b5cd 	.word	0xb5e8b5cd
 8005210:	58024c08 	.word	0x58024c08
 8005214:	58024c00 	.word	0x58024c00

08005218 <ai_platform_network_process>:
 8005218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800521c:	4692      	mov	sl, r2
 800521e:	b083      	sub	sp, #12
 8005220:	4604      	mov	r4, r0
 8005222:	b120      	cbz	r0, 800522e <ai_platform_network_process+0x16>
 8005224:	4b86      	ldr	r3, [pc, #536]	; (8005440 <ai_platform_network_process+0x228>)
 8005226:	6802      	ldr	r2, [r0, #0]
 8005228:	429a      	cmp	r2, r3
 800522a:	bf18      	it	ne
 800522c:	2400      	movne	r4, #0
 800522e:	4a85      	ldr	r2, [pc, #532]	; (8005444 <ai_platform_network_process+0x22c>)
 8005230:	4885      	ldr	r0, [pc, #532]	; (8005448 <ai_platform_network_process+0x230>)
 8005232:	6813      	ldr	r3, [r2, #0]
 8005234:	f023 0301 	bic.w	r3, r3, #1
 8005238:	6013      	str	r3, [r2, #0]
 800523a:	6803      	ldr	r3, [r0, #0]
 800523c:	f46f 608a 	mvn.w	r0, #1104	; 0x450
 8005240:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005244:	181a      	adds	r2, r3, r0
 8005246:	2a01      	cmp	r2, #1
 8005248:	f240 80c6 	bls.w	80053d8 <ai_platform_network_process+0x1c0>
 800524c:	f240 4249 	movw	r2, #1097	; 0x449
 8005250:	4293      	cmp	r3, r2
 8005252:	f000 80c1 	beq.w	80053d8 <ai_platform_network_process+0x1c0>
 8005256:	4b7d      	ldr	r3, [pc, #500]	; (800544c <ai_platform_network_process+0x234>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800525e:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8005262:	f000 80a9 	beq.w	80053b8 <ai_platform_network_process+0x1a0>
 8005266:	2c00      	cmp	r4, #0
 8005268:	f000 80db 	beq.w	8005422 <ai_platform_network_process+0x20a>
 800526c:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 8005270:	68e0      	ldr	r0, [r4, #12]
 8005272:	461a      	mov	r2, r3
 8005274:	f000 0003 	and.w	r0, r0, #3
 8005278:	2b00      	cmp	r3, #0
 800527a:	f000 80bd 	beq.w	80053f8 <ai_platform_network_process+0x1e0>
 800527e:	2600      	movs	r6, #0
 8005280:	2803      	cmp	r0, #3
 8005282:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8005284:	6166      	str	r6, [r4, #20]
 8005286:	f040 80c6 	bne.w	8005416 <ai_platform_network_process+0x1fe>
 800528a:	2900      	cmp	r1, #0
 800528c:	f000 80b7 	beq.w	80053fe <ai_platform_network_process+0x1e6>
 8005290:	fab5 f085 	clz	r0, r5
 8005294:	0940      	lsrs	r0, r0, #5
 8005296:	2800      	cmp	r0, #0
 8005298:	f040 80b1 	bne.w	80053fe <ai_platform_network_process+0x1e6>
 800529c:	882e      	ldrh	r6, [r5, #0]
 800529e:	2e00      	cmp	r6, #0
 80052a0:	f000 80ad 	beq.w	80053fe <ai_platform_network_process+0x1e6>
 80052a4:	888f      	ldrh	r7, [r1, #4]
 80052a6:	686e      	ldr	r6, [r5, #4]
 80052a8:	9701      	str	r7, [sp, #4]
 80052aa:	2e00      	cmp	r6, #0
 80052ac:	f000 825f 	beq.w	800576e <ai_platform_network_process+0x556>
 80052b0:	6836      	ldr	r6, [r6, #0]
 80052b2:	2e00      	cmp	r6, #0
 80052b4:	f000 825b 	beq.w	800576e <ai_platform_network_process+0x556>
 80052b8:	68ab      	ldr	r3, [r5, #8]
 80052ba:	f8d3 9000 	ldr.w	r9, [r3]
 80052be:	f1b9 0f00 	cmp.w	r9, #0
 80052c2:	f000 809c 	beq.w	80053fe <ai_platform_network_process+0x1e6>
 80052c6:	460f      	mov	r7, r1
 80052c8:	4680      	mov	r8, r0
 80052ca:	e05e      	b.n	800538a <ai_platform_network_process+0x172>
 80052cc:	68f3      	ldr	r3, [r6, #12]
 80052ce:	68da      	ldr	r2, [r3, #12]
 80052d0:	455a      	cmp	r2, fp
 80052d2:	d168      	bne.n	80053a6 <ai_platform_network_process+0x18e>
 80052d4:	689a      	ldr	r2, [r3, #8]
 80052d6:	4572      	cmp	r2, lr
 80052d8:	d165      	bne.n	80053a6 <ai_platform_network_process+0x18e>
 80052da:	685b      	ldr	r3, [r3, #4]
 80052dc:	459c      	cmp	ip, r3
 80052de:	d162      	bne.n	80053a6 <ai_platform_network_process+0x18e>
 80052e0:	6800      	ldr	r0, [r0, #0]
 80052e2:	f001 fadb 	bl	800689c <ai_array_get_byte_size>
 80052e6:	68f2      	ldr	r2, [r6, #12]
 80052e8:	6973      	ldr	r3, [r6, #20]
 80052ea:	68d2      	ldr	r2, [r2, #12]
 80052ec:	68db      	ldr	r3, [r3, #12]
 80052ee:	fb03 f302 	mul.w	r3, r3, r2
 80052f2:	4298      	cmp	r0, r3
 80052f4:	d357      	bcc.n	80053a6 <ai_platform_network_process+0x18e>
 80052f6:	69b3      	ldr	r3, [r6, #24]
 80052f8:	6818      	ldr	r0, [r3, #0]
 80052fa:	f001 fa83 	bl	8006804 <ai_array_to_buffer_fmt>
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	4043      	eors	r3, r0
 8005302:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 8005306:	f040 8229 	bne.w	800575c <ai_platform_network_process+0x544>
 800530a:	693b      	ldr	r3, [r7, #16]
 800530c:	2b00      	cmp	r3, #0
 800530e:	f000 821d 	beq.w	800574c <ai_platform_network_process+0x534>
 8005312:	88bb      	ldrh	r3, [r7, #4]
 8005314:	2b00      	cmp	r3, #0
 8005316:	f000 808a 	beq.w	800542e <ai_platform_network_process+0x216>
 800531a:	9a01      	ldr	r2, [sp, #4]
 800531c:	68f1      	ldr	r1, [r6, #12]
 800531e:	429a      	cmp	r2, r3
 8005320:	68c9      	ldr	r1, [r1, #12]
 8005322:	bf38      	it	cc
 8005324:	461a      	movcc	r2, r3
 8005326:	9201      	str	r2, [sp, #4]
 8005328:	6972      	ldr	r2, [r6, #20]
 800532a:	68d3      	ldr	r3, [r2, #12]
 800532c:	fb03 f301 	mul.w	r3, r3, r1
 8005330:	f8c9 3008 	str.w	r3, [r9, #8]
 8005334:	88ba      	ldrh	r2, [r7, #4]
 8005336:	fb03 f302 	mul.w	r3, r3, r2
 800533a:	f8c9 300c 	str.w	r3, [r9, #12]
 800533e:	6939      	ldr	r1, [r7, #16]
 8005340:	f8c9 1004 	str.w	r1, [r9, #4]
 8005344:	693a      	ldr	r2, [r7, #16]
 8005346:	4413      	add	r3, r2
 8005348:	f8c9 3000 	str.w	r3, [r9]
 800534c:	69b0      	ldr	r0, [r6, #24]
 800534e:	6803      	ldr	r3, [r0, #0]
 8005350:	009a      	lsls	r2, r3, #2
 8005352:	d408      	bmi.n	8005366 <ai_platform_network_process+0x14e>
 8005354:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8005358:	1a9b      	subs	r3, r3, r2
 800535a:	4419      	add	r1, r3
 800535c:	6081      	str	r1, [r0, #8]
 800535e:	69b3      	ldr	r3, [r6, #24]
 8005360:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8005364:	60da      	str	r2, [r3, #12]
 8005366:	f108 0801 	add.w	r8, r8, #1
 800536a:	882b      	ldrh	r3, [r5, #0]
 800536c:	4598      	cmp	r8, r3
 800536e:	d27b      	bcs.n	8005468 <ai_platform_network_process+0x250>
 8005370:	686b      	ldr	r3, [r5, #4]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d078      	beq.n	8005468 <ai_platform_network_process+0x250>
 8005376:	f853 6028 	ldr.w	r6, [r3, r8, lsl #2]
 800537a:	2e00      	cmp	r6, #0
 800537c:	d074      	beq.n	8005468 <ai_platform_network_process+0x250>
 800537e:	68ab      	ldr	r3, [r5, #8]
 8005380:	3718      	adds	r7, #24
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	eb13 1908 	adds.w	r9, r3, r8, lsl #4
 8005388:	d039      	beq.n	80053fe <ai_platform_network_process+0x1e6>
 800538a:	f8b7 e008 	ldrh.w	lr, [r7, #8]
 800538e:	f8b7 b006 	ldrh.w	fp, [r7, #6]
 8005392:	f8d7 c00c 	ldr.w	ip, [r7, #12]
 8005396:	fb0b f30e 	mul.w	r3, fp, lr
 800539a:	69b0      	ldr	r0, [r6, #24]
 800539c:	fb0c f303 	mul.w	r3, ip, r3
 80053a0:	6841      	ldr	r1, [r0, #4]
 80053a2:	4299      	cmp	r1, r3
 80053a4:	d292      	bcs.n	80052cc <ai_platform_network_process+0xb4>
 80053a6:	f104 0010 	add.w	r0, r4, #16
 80053aa:	2218      	movs	r2, #24
 80053ac:	2112      	movs	r1, #18
 80053ae:	f04f 0b00 	mov.w	fp, #0
 80053b2:	f000 fb31 	bl	8005a18 <core_set_error>
 80053b6:	e02a      	b.n	800540e <ai_platform_network_process+0x1f6>
 80053b8:	4b25      	ldr	r3, [pc, #148]	; (8005450 <ai_platform_network_process+0x238>)
 80053ba:	2201      	movs	r2, #1
 80053bc:	4618      	mov	r0, r3
 80053be:	601a      	str	r2, [r3, #0]
 80053c0:	6803      	ldr	r3, [r0, #0]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d1fc      	bne.n	80053c0 <ai_platform_network_process+0x1a8>
 80053c6:	4b23      	ldr	r3, [pc, #140]	; (8005454 <ai_platform_network_process+0x23c>)
 80053c8:	4823      	ldr	r0, [pc, #140]	; (8005458 <ai_platform_network_process+0x240>)
 80053ca:	4a24      	ldr	r2, [pc, #144]	; (800545c <ai_platform_network_process+0x244>)
 80053cc:	6018      	str	r0, [r3, #0]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4293      	cmp	r3, r2
 80053d2:	f43f af48 	beq.w	8005266 <ai_platform_network_process+0x4e>
 80053d6:	e7fe      	b.n	80053d6 <ai_platform_network_process+0x1be>
 80053d8:	4b21      	ldr	r3, [pc, #132]	; (8005460 <ai_platform_network_process+0x248>)
 80053da:	2201      	movs	r2, #1
 80053dc:	4618      	mov	r0, r3
 80053de:	601a      	str	r2, [r3, #0]
 80053e0:	6803      	ldr	r3, [r0, #0]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d1fc      	bne.n	80053e0 <ai_platform_network_process+0x1c8>
 80053e6:	4b1f      	ldr	r3, [pc, #124]	; (8005464 <ai_platform_network_process+0x24c>)
 80053e8:	481b      	ldr	r0, [pc, #108]	; (8005458 <ai_platform_network_process+0x240>)
 80053ea:	4a1c      	ldr	r2, [pc, #112]	; (800545c <ai_platform_network_process+0x244>)
 80053ec:	6018      	str	r0, [r3, #0]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4293      	cmp	r3, r2
 80053f2:	f43f af38 	beq.w	8005266 <ai_platform_network_process+0x4e>
 80053f6:	e7fe      	b.n	80053f6 <ai_platform_network_process+0x1de>
 80053f8:	2803      	cmp	r0, #3
 80053fa:	6163      	str	r3, [r4, #20]
 80053fc:	d10b      	bne.n	8005416 <ai_platform_network_process+0x1fe>
 80053fe:	f04f 0b00 	mov.w	fp, #0
 8005402:	f104 0010 	add.w	r0, r4, #16
 8005406:	2217      	movs	r2, #23
 8005408:	2112      	movs	r1, #18
 800540a:	f000 fb05 	bl	8005a18 <core_set_error>
 800540e:	4658      	mov	r0, fp
 8005410:	b003      	add	sp, #12
 8005412:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005416:	f104 0010 	add.w	r0, r4, #16
 800541a:	2230      	movs	r2, #48	; 0x30
 800541c:	2111      	movs	r1, #17
 800541e:	f000 fafb 	bl	8005a18 <core_set_error>
 8005422:	f04f 0b00 	mov.w	fp, #0
 8005426:	4658      	mov	r0, fp
 8005428:	b003      	add	sp, #12
 800542a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800542e:	f104 0010 	add.w	r0, r4, #16
 8005432:	2221      	movs	r2, #33	; 0x21
 8005434:	2112      	movs	r1, #18
 8005436:	469b      	mov	fp, r3
 8005438:	f000 faee 	bl	8005a18 <core_set_error>
 800543c:	e7e7      	b.n	800540e <ai_platform_network_process+0x1f6>
 800543e:	bf00      	nop
 8005440:	a1c00100 	.word	0xa1c00100
 8005444:	e0002000 	.word	0xe0002000
 8005448:	e0042000 	.word	0xe0042000
 800544c:	5c001000 	.word	0x5c001000
 8005450:	58024c08 	.word	0x58024c08
 8005454:	58024c00 	.word	0x58024c00
 8005458:	f407a5c2 	.word	0xf407a5c2
 800545c:	b5e8b5cd 	.word	0xb5e8b5cd
 8005460:	40023008 	.word	0x40023008
 8005464:	40023000 	.word	0x40023000
 8005468:	f1ba 0f00 	cmp.w	sl, #0
 800546c:	f000 808c 	beq.w	8005588 <ai_platform_network_process+0x370>
 8005470:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 8005474:	2b01      	cmp	r3, #1
 8005476:	f240 813b 	bls.w	80056f0 <ai_platform_network_process+0x4d8>
 800547a:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 800547c:	f115 0f0c 	cmn.w	r5, #12
 8005480:	f000 8136 	beq.w	80056f0 <ai_platform_network_process+0x4d8>
 8005484:	89ab      	ldrh	r3, [r5, #12]
 8005486:	2b00      	cmp	r3, #0
 8005488:	f000 8132 	beq.w	80056f0 <ai_platform_network_process+0x4d8>
 800548c:	4656      	mov	r6, sl
 800548e:	f04f 0900 	mov.w	r9, #0
 8005492:	9400      	str	r4, [sp, #0]
 8005494:	4599      	cmp	r9, r3
 8005496:	d274      	bcs.n	8005582 <ai_platform_network_process+0x36a>
 8005498:	692b      	ldr	r3, [r5, #16]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d071      	beq.n	8005582 <ai_platform_network_process+0x36a>
 800549e:	f853 7029 	ldr.w	r7, [r3, r9, lsl #2]
 80054a2:	2f00      	cmp	r7, #0
 80054a4:	d06d      	beq.n	8005582 <ai_platform_network_process+0x36a>
 80054a6:	696b      	ldr	r3, [r5, #20]
 80054a8:	ea4f 1409 	mov.w	r4, r9, lsl #4
 80054ac:	f8d3 8000 	ldr.w	r8, [r3]
 80054b0:	eb18 0a04 	adds.w	sl, r8, r4
 80054b4:	f000 8125 	beq.w	8005702 <ai_platform_network_process+0x4ea>
 80054b8:	f8b6 e008 	ldrh.w	lr, [r6, #8]
 80054bc:	f8b6 b006 	ldrh.w	fp, [r6, #6]
 80054c0:	f8d6 c00c 	ldr.w	ip, [r6, #12]
 80054c4:	fb0b f30e 	mul.w	r3, fp, lr
 80054c8:	69b8      	ldr	r0, [r7, #24]
 80054ca:	fb0c f303 	mul.w	r3, ip, r3
 80054ce:	6841      	ldr	r1, [r0, #4]
 80054d0:	4299      	cmp	r1, r3
 80054d2:	f0c0 810c 	bcc.w	80056ee <ai_platform_network_process+0x4d6>
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	68da      	ldr	r2, [r3, #12]
 80054da:	455a      	cmp	r2, fp
 80054dc:	f040 8107 	bne.w	80056ee <ai_platform_network_process+0x4d6>
 80054e0:	689a      	ldr	r2, [r3, #8]
 80054e2:	4572      	cmp	r2, lr
 80054e4:	f040 8103 	bne.w	80056ee <ai_platform_network_process+0x4d6>
 80054e8:	685b      	ldr	r3, [r3, #4]
 80054ea:	459c      	cmp	ip, r3
 80054ec:	f040 80ff 	bne.w	80056ee <ai_platform_network_process+0x4d6>
 80054f0:	6800      	ldr	r0, [r0, #0]
 80054f2:	f001 f9d3 	bl	800689c <ai_array_get_byte_size>
 80054f6:	68fa      	ldr	r2, [r7, #12]
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	68d2      	ldr	r2, [r2, #12]
 80054fc:	68db      	ldr	r3, [r3, #12]
 80054fe:	fb03 f302 	mul.w	r3, r3, r2
 8005502:	4298      	cmp	r0, r3
 8005504:	f0c0 80f3 	bcc.w	80056ee <ai_platform_network_process+0x4d6>
 8005508:	69bb      	ldr	r3, [r7, #24]
 800550a:	6818      	ldr	r0, [r3, #0]
 800550c:	f001 f97a 	bl	8006804 <ai_array_to_buffer_fmt>
 8005510:	6833      	ldr	r3, [r6, #0]
 8005512:	4043      	eors	r3, r0
 8005514:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 8005518:	f040 810e 	bne.w	8005738 <ai_platform_network_process+0x520>
 800551c:	6933      	ldr	r3, [r6, #16]
 800551e:	2b00      	cmp	r3, #0
 8005520:	f000 8101 	beq.w	8005726 <ai_platform_network_process+0x50e>
 8005524:	88b3      	ldrh	r3, [r6, #4]
 8005526:	2b00      	cmp	r3, #0
 8005528:	f000 80f4 	beq.w	8005714 <ai_platform_network_process+0x4fc>
 800552c:	9a01      	ldr	r2, [sp, #4]
 800552e:	68f9      	ldr	r1, [r7, #12]
 8005530:	429a      	cmp	r2, r3
 8005532:	68c9      	ldr	r1, [r1, #12]
 8005534:	bf38      	it	cc
 8005536:	461a      	movcc	r2, r3
 8005538:	9201      	str	r2, [sp, #4]
 800553a:	697a      	ldr	r2, [r7, #20]
 800553c:	68d3      	ldr	r3, [r2, #12]
 800553e:	fb03 f301 	mul.w	r3, r3, r1
 8005542:	f8ca 3008 	str.w	r3, [sl, #8]
 8005546:	88b2      	ldrh	r2, [r6, #4]
 8005548:	fb03 f302 	mul.w	r3, r3, r2
 800554c:	f8ca 300c 	str.w	r3, [sl, #12]
 8005550:	6931      	ldr	r1, [r6, #16]
 8005552:	f8ca 1004 	str.w	r1, [sl, #4]
 8005556:	6932      	ldr	r2, [r6, #16]
 8005558:	4413      	add	r3, r2
 800555a:	f848 3004 	str.w	r3, [r8, r4]
 800555e:	69b8      	ldr	r0, [r7, #24]
 8005560:	6803      	ldr	r3, [r0, #0]
 8005562:	009b      	lsls	r3, r3, #2
 8005564:	d408      	bmi.n	8005578 <ai_platform_network_process+0x360>
 8005566:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 800556a:	1a9b      	subs	r3, r3, r2
 800556c:	4419      	add	r1, r3
 800556e:	6081      	str	r1, [r0, #8]
 8005570:	69bb      	ldr	r3, [r7, #24]
 8005572:	f8da 2004 	ldr.w	r2, [sl, #4]
 8005576:	60da      	str	r2, [r3, #12]
 8005578:	f109 0901 	add.w	r9, r9, #1
 800557c:	3618      	adds	r6, #24
 800557e:	89ab      	ldrh	r3, [r5, #12]
 8005580:	e788      	b.n	8005494 <ai_platform_network_process+0x27c>
 8005582:	e9dd 4300 	ldrd	r4, r3, [sp]
 8005586:	82a3      	strh	r3, [r4, #20]
 8005588:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 800558c:	2a00      	cmp	r2, #0
 800558e:	f000 80a9 	beq.w	80056e4 <ai_platform_network_process+0x4cc>
 8005592:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8005594:	2a01      	cmp	r2, #1
 8005596:	f240 80a8 	bls.w	80056ea <ai_platform_network_process+0x4d2>
 800559a:	f105 060c 	add.w	r6, r5, #12
 800559e:	f8b4 b016 	ldrh.w	fp, [r4, #22]
 80055a2:	8aa3      	ldrh	r3, [r4, #20]
 80055a4:	455b      	cmp	r3, fp
 80055a6:	f67f af32 	bls.w	800540e <ai_platform_network_process+0x1f6>
 80055aa:	9400      	str	r4, [sp, #0]
 80055ac:	2d00      	cmp	r5, #0
 80055ae:	d037      	beq.n	8005620 <ai_platform_network_process+0x408>
 80055b0:	882b      	ldrh	r3, [r5, #0]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d034      	beq.n	8005620 <ai_platform_network_process+0x408>
 80055b6:	686b      	ldr	r3, [r5, #4]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d031      	beq.n	8005620 <ai_platform_network_process+0x408>
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d02e      	beq.n	8005620 <ai_platform_network_process+0x408>
 80055c2:	f04f 0800 	mov.w	r8, #0
 80055c6:	e01a      	b.n	80055fe <ai_platform_network_process+0x3e6>
 80055c8:	68d4      	ldr	r4, [r2, #12]
 80055ca:	1b00      	subs	r0, r0, r4
 80055cc:	4401      	add	r1, r0
 80055ce:	6091      	str	r1, [r2, #8]
 80055d0:	687a      	ldr	r2, [r7, #4]
 80055d2:	699b      	ldr	r3, [r3, #24]
 80055d4:	60da      	str	r2, [r3, #12]
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	f108 0801 	add.w	r8, r8, #1
 80055dc:	68b9      	ldr	r1, [r7, #8]
 80055de:	f85a 2009 	ldr.w	r2, [sl, r9]
 80055e2:	440b      	add	r3, r1
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d301      	bcc.n	80055ec <ai_platform_network_process+0x3d4>
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	1ad3      	subs	r3, r2, r3
 80055ec:	607b      	str	r3, [r7, #4]
 80055ee:	882b      	ldrh	r3, [r5, #0]
 80055f0:	4598      	cmp	r8, r3
 80055f2:	d215      	bcs.n	8005620 <ai_platform_network_process+0x408>
 80055f4:	686b      	ldr	r3, [r5, #4]
 80055f6:	b19b      	cbz	r3, 8005620 <ai_platform_network_process+0x408>
 80055f8:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 80055fc:	b183      	cbz	r3, 8005620 <ai_platform_network_process+0x408>
 80055fe:	68a9      	ldr	r1, [r5, #8]
 8005600:	ea4f 1908 	mov.w	r9, r8, lsl #4
 8005604:	699a      	ldr	r2, [r3, #24]
 8005606:	f8d1 a000 	ldr.w	sl, [r1]
 800560a:	6814      	ldr	r4, [r2, #0]
 800560c:	eb0a 0709 	add.w	r7, sl, r9
 8005610:	6890      	ldr	r0, [r2, #8]
 8005612:	00a4      	lsls	r4, r4, #2
 8005614:	6879      	ldr	r1, [r7, #4]
 8005616:	d5d7      	bpl.n	80055c8 <ai_platform_network_process+0x3b0>
 8005618:	68ba      	ldr	r2, [r7, #8]
 800561a:	f001 f999 	bl	8006950 <memcpy>
 800561e:	e7da      	b.n	80055d6 <ai_platform_network_process+0x3be>
 8005620:	9800      	ldr	r0, [sp, #0]
 8005622:	f000 fb47 	bl	8005cb4 <ai_layers_forward_all>
 8005626:	2e00      	cmp	r6, #0
 8005628:	d04a      	beq.n	80056c0 <ai_platform_network_process+0x4a8>
 800562a:	8833      	ldrh	r3, [r6, #0]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d047      	beq.n	80056c0 <ai_platform_network_process+0x4a8>
 8005630:	6873      	ldr	r3, [r6, #4]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d044      	beq.n	80056c0 <ai_platform_network_process+0x4a8>
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d041      	beq.n	80056c0 <ai_platform_network_process+0x4a8>
 800563c:	f04f 0800 	mov.w	r8, #0
 8005640:	e019      	b.n	8005676 <ai_platform_network_process+0x45e>
 8005642:	f85a 2009 	ldr.w	r2, [sl, r9]
 8005646:	4291      	cmp	r1, r2
 8005648:	d301      	bcc.n	800564e <ai_platform_network_process+0x436>
 800564a:	68f9      	ldr	r1, [r7, #12]
 800564c:	1a51      	subs	r1, r2, r1
 800564e:	6079      	str	r1, [r7, #4]
 8005650:	f108 0801 	add.w	r8, r8, #1
 8005654:	6998      	ldr	r0, [r3, #24]
 8005656:	e9d0 2402 	ldrd	r2, r4, [r0, #8]
 800565a:	1b12      	subs	r2, r2, r4
 800565c:	440a      	add	r2, r1
 800565e:	6082      	str	r2, [r0, #8]
 8005660:	687a      	ldr	r2, [r7, #4]
 8005662:	699b      	ldr	r3, [r3, #24]
 8005664:	60da      	str	r2, [r3, #12]
 8005666:	8833      	ldrh	r3, [r6, #0]
 8005668:	4598      	cmp	r8, r3
 800566a:	d229      	bcs.n	80056c0 <ai_platform_network_process+0x4a8>
 800566c:	6873      	ldr	r3, [r6, #4]
 800566e:	b33b      	cbz	r3, 80056c0 <ai_platform_network_process+0x4a8>
 8005670:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8005674:	b323      	cbz	r3, 80056c0 <ai_platform_network_process+0x4a8>
 8005676:	68b2      	ldr	r2, [r6, #8]
 8005678:	ea4f 1908 	mov.w	r9, r8, lsl #4
 800567c:	f8d3 e018 	ldr.w	lr, [r3, #24]
 8005680:	f8d2 a000 	ldr.w	sl, [r2]
 8005684:	f8de 1000 	ldr.w	r1, [lr]
 8005688:	eb0a 0709 	add.w	r7, sl, r9
 800568c:	f011 5f00 	tst.w	r1, #536870912	; 0x20000000
 8005690:	e9d7 0201 	ldrd	r0, r2, [r7, #4]
 8005694:	eb00 0102 	add.w	r1, r0, r2
 8005698:	d0d3      	beq.n	8005642 <ai_platform_network_process+0x42a>
 800569a:	f8de 1008 	ldr.w	r1, [lr, #8]
 800569e:	f001 f957 	bl	8006950 <memcpy>
 80056a2:	f85a 2009 	ldr.w	r2, [sl, r9]
 80056a6:	e9d7 3101 	ldrd	r3, r1, [r7, #4]
 80056aa:	440b      	add	r3, r1
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d301      	bcc.n	80056b4 <ai_platform_network_process+0x49c>
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	1ad3      	subs	r3, r2, r3
 80056b4:	607b      	str	r3, [r7, #4]
 80056b6:	f108 0801 	add.w	r8, r8, #1
 80056ba:	8833      	ldrh	r3, [r6, #0]
 80056bc:	4598      	cmp	r8, r3
 80056be:	d3d5      	bcc.n	800566c <ai_platform_network_process+0x454>
 80056c0:	9b00      	ldr	r3, [sp, #0]
 80056c2:	f8b3 b016 	ldrh.w	fp, [r3, #22]
 80056c6:	461a      	mov	r2, r3
 80056c8:	8a9b      	ldrh	r3, [r3, #20]
 80056ca:	f10b 0b01 	add.w	fp, fp, #1
 80056ce:	fa1f fb8b 	uxth.w	fp, fp
 80056d2:	455b      	cmp	r3, fp
 80056d4:	f8a2 b016 	strh.w	fp, [r2, #22]
 80056d8:	f63f af68 	bhi.w	80055ac <ai_platform_network_process+0x394>
 80056dc:	4658      	mov	r0, fp
 80056de:	b003      	add	sp, #12
 80056e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056e4:	4615      	mov	r5, r2
 80056e6:	4616      	mov	r6, r2
 80056e8:	e759      	b.n	800559e <ai_platform_network_process+0x386>
 80056ea:	2600      	movs	r6, #0
 80056ec:	e757      	b.n	800559e <ai_platform_network_process+0x386>
 80056ee:	9c00      	ldr	r4, [sp, #0]
 80056f0:	f104 0010 	add.w	r0, r4, #16
 80056f4:	2218      	movs	r2, #24
 80056f6:	2113      	movs	r1, #19
 80056f8:	f04f 0b00 	mov.w	fp, #0
 80056fc:	f000 f98c 	bl	8005a18 <core_set_error>
 8005700:	e685      	b.n	800540e <ai_platform_network_process+0x1f6>
 8005702:	9c00      	ldr	r4, [sp, #0]
 8005704:	2217      	movs	r2, #23
 8005706:	2113      	movs	r1, #19
 8005708:	46d3      	mov	fp, sl
 800570a:	f104 0010 	add.w	r0, r4, #16
 800570e:	f000 f983 	bl	8005a18 <core_set_error>
 8005712:	e67c      	b.n	800540e <ai_platform_network_process+0x1f6>
 8005714:	9c00      	ldr	r4, [sp, #0]
 8005716:	2221      	movs	r2, #33	; 0x21
 8005718:	2113      	movs	r1, #19
 800571a:	469b      	mov	fp, r3
 800571c:	f104 0010 	add.w	r0, r4, #16
 8005720:	f000 f97a 	bl	8005a18 <core_set_error>
 8005724:	e673      	b.n	800540e <ai_platform_network_process+0x1f6>
 8005726:	9c00      	ldr	r4, [sp, #0]
 8005728:	2217      	movs	r2, #23
 800572a:	2113      	movs	r1, #19
 800572c:	469b      	mov	fp, r3
 800572e:	f104 0010 	add.w	r0, r4, #16
 8005732:	f000 f971 	bl	8005a18 <core_set_error>
 8005736:	e66a      	b.n	800540e <ai_platform_network_process+0x1f6>
 8005738:	9c00      	ldr	r4, [sp, #0]
 800573a:	2219      	movs	r2, #25
 800573c:	2113      	movs	r1, #19
 800573e:	f04f 0b00 	mov.w	fp, #0
 8005742:	f104 0010 	add.w	r0, r4, #16
 8005746:	f000 f967 	bl	8005a18 <core_set_error>
 800574a:	e660      	b.n	800540e <ai_platform_network_process+0x1f6>
 800574c:	f104 0010 	add.w	r0, r4, #16
 8005750:	2217      	movs	r2, #23
 8005752:	2112      	movs	r1, #18
 8005754:	469b      	mov	fp, r3
 8005756:	f000 f95f 	bl	8005a18 <core_set_error>
 800575a:	e658      	b.n	800540e <ai_platform_network_process+0x1f6>
 800575c:	f104 0010 	add.w	r0, r4, #16
 8005760:	2219      	movs	r2, #25
 8005762:	2112      	movs	r1, #18
 8005764:	f04f 0b00 	mov.w	fp, #0
 8005768:	f000 f956 	bl	8005a18 <core_set_error>
 800576c:	e64f      	b.n	800540e <ai_platform_network_process+0x1f6>
 800576e:	f1ba 0f00 	cmp.w	sl, #0
 8005772:	f47f ae7f 	bne.w	8005474 <ai_platform_network_process+0x25c>
 8005776:	e70d      	b.n	8005594 <ai_platform_network_process+0x37c>

08005778 <node_convert>:
 8005778:	6942      	ldr	r2, [r0, #20]
 800577a:	8813      	ldrh	r3, [r2, #0]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d04b      	beq.n	8005818 <node_convert+0xa0>
 8005780:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005782:	6852      	ldr	r2, [r2, #4]
 8005784:	b083      	sub	sp, #12
 8005786:	6855      	ldr	r5, [r2, #4]
 8005788:	b105      	cbz	r5, 800578c <node_convert+0x14>
 800578a:	682d      	ldr	r5, [r5, #0]
 800578c:	2b01      	cmp	r3, #1
 800578e:	d940      	bls.n	8005812 <node_convert+0x9a>
 8005790:	6916      	ldr	r6, [r2, #16]
 8005792:	b106      	cbz	r6, 8005796 <node_convert+0x1e>
 8005794:	6836      	ldr	r6, [r6, #0]
 8005796:	68ab      	ldr	r3, [r5, #8]
 8005798:	0a1b      	lsrs	r3, r3, #8
 800579a:	f000 80e1 	beq.w	8005960 <node_convert+0x1e8>
 800579e:	68e9      	ldr	r1, [r5, #12]
 80057a0:	2401      	movs	r4, #1
 80057a2:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80057a6:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80057aa:	428b      	cmp	r3, r1
 80057ac:	fb02 f404 	mul.w	r4, r2, r4
 80057b0:	d1f9      	bne.n	80057a6 <node_convert+0x2e>
 80057b2:	69aa      	ldr	r2, [r5, #24]
 80057b4:	69b7      	ldr	r7, [r6, #24]
 80057b6:	6813      	ldr	r3, [r2, #0]
 80057b8:	6890      	ldr	r0, [r2, #8]
 80057ba:	f3c3 4243 	ubfx	r2, r3, #17, #4
 80057be:	2a01      	cmp	r2, #1
 80057c0:	d055      	beq.n	800586e <node_convert+0xf6>
 80057c2:	6829      	ldr	r1, [r5, #0]
 80057c4:	15da      	asrs	r2, r3, #23
 80057c6:	68bd      	ldr	r5, [r7, #8]
 80057c8:	b341      	cbz	r1, 800581c <node_convert+0xa4>
 80057ca:	684e      	ldr	r6, [r1, #4]
 80057cc:	f002 0201 	and.w	r2, r2, #1
 80057d0:	2e00      	cmp	r6, #0
 80057d2:	f000 80c7 	beq.w	8005964 <node_convert+0x1ec>
 80057d6:	884b      	ldrh	r3, [r1, #2]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	f000 8085 	beq.w	80058e8 <node_convert+0x170>
 80057de:	6833      	ldr	r3, [r6, #0]
 80057e0:	ed93 7a00 	vldr	s14, [r3]
 80057e4:	6873      	ldr	r3, [r6, #4]
 80057e6:	2a00      	cmp	r2, #0
 80057e8:	f000 80d3 	beq.w	8005992 <node_convert+0x21a>
 80057ec:	f993 2000 	ldrsb.w	r2, [r3]
 80057f0:	b16c      	cbz	r4, 800580e <node_convert+0x96>
 80057f2:	4404      	add	r4, r0
 80057f4:	f910 3b01 	ldrsb.w	r3, [r0], #1
 80057f8:	1a9b      	subs	r3, r3, r2
 80057fa:	42a0      	cmp	r0, r4
 80057fc:	ee07 3a90 	vmov	s15, r3
 8005800:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005804:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005808:	ece5 7a01 	vstmia	r5!, {s15}
 800580c:	d1f2      	bne.n	80057f4 <node_convert+0x7c>
 800580e:	b003      	add	sp, #12
 8005810:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005812:	2300      	movs	r3, #0
 8005814:	685b      	ldr	r3, [r3, #4]
 8005816:	deff      	udf	#255	; 0xff
 8005818:	685b      	ldr	r3, [r3, #4]
 800581a:	deff      	udf	#255	; 0xff
 800581c:	f3c3 11c6 	ubfx	r1, r3, #7, #7
 8005820:	f003 067f 	and.w	r6, r3, #127	; 0x7f
 8005824:	f002 0201 	and.w	r2, r2, #1
 8005828:	1b8e      	subs	r6, r1, r6
 800582a:	2908      	cmp	r1, #8
 800582c:	4629      	mov	r1, r5
 800582e:	f106 0640 	add.w	r6, r6, #64	; 0x40
 8005832:	eba6 0602 	sub.w	r6, r6, r2
 8005836:	4622      	mov	r2, r4
 8005838:	d05c      	beq.n	80058f4 <node_convert+0x17c>
 800583a:	f000 fbf7 	bl	800602c <arm_q15_to_float>
 800583e:	2e00      	cmp	r6, #0
 8005840:	d0e5      	beq.n	800580e <node_convert+0x96>
 8005842:	ee07 6a90 	vmov	s15, r6
 8005846:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800584a:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 800584e:	f003 ff5f 	bl	8009710 <powf>
 8005852:	2c00      	cmp	r4, #0
 8005854:	d0db      	beq.n	800580e <node_convert+0x96>
 8005856:	2300      	movs	r3, #0
 8005858:	ecf5 7a01 	vldmia	r5!, {s15}
 800585c:	3301      	adds	r3, #1
 800585e:	ee67 7a80 	vmul.f32	s15, s15, s0
 8005862:	429c      	cmp	r4, r3
 8005864:	ed45 7a01 	vstr	s15, [r5, #-4]
 8005868:	d1f6      	bne.n	8005858 <node_convert+0xe0>
 800586a:	b003      	add	sp, #12
 800586c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	6835      	ldr	r5, [r6, #0]
 8005872:	15da      	asrs	r2, r3, #23
 8005874:	2d00      	cmp	r5, #0
 8005876:	f000 808e 	beq.w	8005996 <node_convert+0x21e>
 800587a:	6869      	ldr	r1, [r5, #4]
 800587c:	f002 0301 	and.w	r3, r2, #1
 8005880:	68ba      	ldr	r2, [r7, #8]
 8005882:	2900      	cmp	r1, #0
 8005884:	d039      	beq.n	80058fa <node_convert+0x182>
 8005886:	886d      	ldrh	r5, [r5, #2]
 8005888:	2d00      	cmp	r5, #0
 800588a:	d03c      	beq.n	8005906 <node_convert+0x18e>
 800588c:	680d      	ldr	r5, [r1, #0]
 800588e:	edd5 7a00 	vldr	s15, [r5]
 8005892:	2b00      	cmp	r3, #0
 8005894:	f000 80b1 	beq.w	80059fa <node_convert+0x282>
 8005898:	684b      	ldr	r3, [r1, #4]
 800589a:	f993 3000 	ldrsb.w	r3, [r3]
 800589e:	ee07 3a10 	vmov	s14, r3
 80058a2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80058a6:	2c00      	cmp	r4, #0
 80058a8:	d0b1      	beq.n	800580e <node_convert+0x96>
 80058aa:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 80058ae:	4414      	add	r4, r2
 80058b0:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80058b4:	eec5 6aa7 	vdiv.f32	s13, s11, s15
 80058b8:	ecf0 7a01 	vldmia	r0!, {s15}
 80058bc:	eef0 5a47 	vmov.f32	s11, s14
 80058c0:	eee7 5aa6 	vfma.f32	s11, s15, s13
 80058c4:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 80058c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058cc:	db3b      	blt.n	8005946 <node_convert+0x1ce>
 80058ce:	ee75 7a86 	vadd.f32	s15, s11, s12
 80058d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80058d6:	ee17 3a90 	vmov	r3, s15
 80058da:	f303 0307 	ssat	r3, #8, r3
 80058de:	f802 3b01 	strb.w	r3, [r2], #1
 80058e2:	42a2      	cmp	r2, r4
 80058e4:	d1e8      	bne.n	80058b8 <node_convert+0x140>
 80058e6:	e792      	b.n	800580e <node_convert+0x96>
 80058e8:	2a00      	cmp	r2, #0
 80058ea:	d03d      	beq.n	8005968 <node_convert+0x1f0>
 80058ec:	461a      	mov	r2, r3
 80058ee:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8005a10 <node_convert+0x298>
 80058f2:	e77d      	b.n	80057f0 <node_convert+0x78>
 80058f4:	f000 fc02 	bl	80060fc <arm_q7_to_float>
 80058f8:	e7a1      	b.n	800583e <node_convert+0xc6>
 80058fa:	b133      	cbz	r3, 800590a <node_convert+0x192>
 80058fc:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8005a10 <node_convert+0x298>
 8005900:	eef0 7a47 	vmov.f32	s15, s14
 8005904:	e7cf      	b.n	80058a6 <node_convert+0x12e>
 8005906:	2b00      	cmp	r3, #0
 8005908:	d1f8      	bne.n	80058fc <node_convert+0x184>
 800590a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800590e:	eddf 7a40 	vldr	s15, [pc, #256]	; 8005a10 <node_convert+0x298>
 8005912:	2c00      	cmp	r4, #0
 8005914:	f43f af7b 	beq.w	800580e <node_convert+0x96>
 8005918:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800591c:	4414      	add	r4, r2
 800591e:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8005922:	ecf0 7a01 	vldmia	r0!, {s15}
 8005926:	eeb0 6a47 	vmov.f32	s12, s14
 800592a:	eea6 6aa7 	vfma.f32	s12, s13, s15
 800592e:	eefd 7ac6 	vcvt.s32.f32	s15, s12
 8005932:	ee17 3a90 	vmov	r3, s15
 8005936:	f383 0308 	usat	r3, #8, r3
 800593a:	f802 3b01 	strb.w	r3, [r2], #1
 800593e:	42a2      	cmp	r2, r4
 8005940:	d1ef      	bne.n	8005922 <node_convert+0x1aa>
 8005942:	b003      	add	sp, #12
 8005944:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005946:	ee75 7ac6 	vsub.f32	s15, s11, s12
 800594a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800594e:	ee17 3a90 	vmov	r3, s15
 8005952:	f303 0307 	ssat	r3, #8, r3
 8005956:	f802 3b01 	strb.w	r3, [r2], #1
 800595a:	4294      	cmp	r4, r2
 800595c:	d1ac      	bne.n	80058b8 <node_convert+0x140>
 800595e:	e756      	b.n	800580e <node_convert+0x96>
 8005960:	2401      	movs	r4, #1
 8005962:	e726      	b.n	80057b2 <node_convert+0x3a>
 8005964:	2a00      	cmp	r2, #0
 8005966:	d13f      	bne.n	80059e8 <node_convert+0x270>
 8005968:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8005a10 <node_convert+0x298>
 800596c:	2c00      	cmp	r4, #0
 800596e:	f43f af4e 	beq.w	800580e <node_convert+0x96>
 8005972:	4404      	add	r4, r0
 8005974:	f810 3b01 	ldrb.w	r3, [r0], #1
 8005978:	1a9b      	subs	r3, r3, r2
 800597a:	42a0      	cmp	r0, r4
 800597c:	ee07 3a90 	vmov	s15, r3
 8005980:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005984:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005988:	ece5 7a01 	vstmia	r5!, {s15}
 800598c:	d1f2      	bne.n	8005974 <node_convert+0x1fc>
 800598e:	b003      	add	sp, #12
 8005990:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005992:	781a      	ldrb	r2, [r3, #0]
 8005994:	e7ea      	b.n	800596c <node_convert+0x1f4>
 8005996:	f3c3 16c6 	ubfx	r6, r3, #7, #7
 800599a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800599e:	f002 0201 	and.w	r2, r2, #1
 80059a2:	1af3      	subs	r3, r6, r3
 80059a4:	3340      	adds	r3, #64	; 0x40
 80059a6:	1a9b      	subs	r3, r3, r2
 80059a8:	d015      	beq.n	80059d6 <node_convert+0x25e>
 80059aa:	425b      	negs	r3, r3
 80059ac:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 80059b0:	9001      	str	r0, [sp, #4]
 80059b2:	ee00 3a90 	vmov	s1, r3
 80059b6:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 80059ba:	f003 fea9 	bl	8009710 <powf>
 80059be:	9801      	ldr	r0, [sp, #4]
 80059c0:	b14c      	cbz	r4, 80059d6 <node_convert+0x25e>
 80059c2:	4603      	mov	r3, r0
 80059c4:	ecf3 7a01 	vldmia	r3!, {s15}
 80059c8:	3501      	adds	r5, #1
 80059ca:	ee67 7a80 	vmul.f32	s15, s15, s0
 80059ce:	42ac      	cmp	r4, r5
 80059d0:	ed43 7a01 	vstr	s15, [r3, #-4]
 80059d4:	d1f6      	bne.n	80059c4 <node_convert+0x24c>
 80059d6:	2e08      	cmp	r6, #8
 80059d8:	68b9      	ldr	r1, [r7, #8]
 80059da:	4622      	mov	r2, r4
 80059dc:	d008      	beq.n	80059f0 <node_convert+0x278>
 80059de:	b003      	add	sp, #12
 80059e0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80059e4:	f000 b9a0 	b.w	8005d28 <arm_float_to_q15>
 80059e8:	4632      	mov	r2, r6
 80059ea:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8005a10 <node_convert+0x298>
 80059ee:	e6ff      	b.n	80057f0 <node_convert+0x78>
 80059f0:	b003      	add	sp, #12
 80059f2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80059f6:	f000 ba51 	b.w	8005e9c <arm_float_to_q7>
 80059fa:	684b      	ldr	r3, [r1, #4]
 80059fc:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8005a00:	781b      	ldrb	r3, [r3, #0]
 8005a02:	ee07 3a10 	vmov	s14, r3
 8005a06:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8005a0a:	ee37 7a26 	vadd.f32	s14, s14, s13
 8005a0e:	e780      	b.n	8005912 <node_convert+0x19a>
 8005a10:	00000000 	.word	0x00000000

08005a14 <core_init>:
 8005a14:	2001      	movs	r0, #1
 8005a16:	4770      	bx	lr

08005a18 <core_set_error>:
 8005a18:	4603      	mov	r3, r0
 8005a1a:	7800      	ldrb	r0, [r0, #0]
 8005a1c:	b930      	cbnz	r0, 8005a2c <core_set_error+0x14>
 8005a1e:	7019      	strb	r1, [r3, #0]
 8005a20:	2001      	movs	r0, #1
 8005a22:	6819      	ldr	r1, [r3, #0]
 8005a24:	f362 211f 	bfi	r1, r2, #8, #24
 8005a28:	6019      	str	r1, [r3, #0]
 8005a2a:	4770      	bx	lr
 8005a2c:	2000      	movs	r0, #0
 8005a2e:	4770      	bx	lr

08005a30 <forward_dense_integer_SSSA>:
 8005a30:	6943      	ldr	r3, [r0, #20]
 8005a32:	8818      	ldrh	r0, [r3, #0]
 8005a34:	2800      	cmp	r0, #0
 8005a36:	f000 80b2 	beq.w	8005b9e <forward_dense_integer_SSSA+0x16e>
 8005a3a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a3e:	685c      	ldr	r4, [r3, #4]
 8005a40:	b093      	sub	sp, #76	; 0x4c
 8005a42:	6863      	ldr	r3, [r4, #4]
 8005a44:	b103      	cbz	r3, 8005a48 <forward_dense_integer_SSSA+0x18>
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	2801      	cmp	r0, #1
 8005a4a:	f240 809f 	bls.w	8005b8c <forward_dense_integer_SSSA+0x15c>
 8005a4e:	6922      	ldr	r2, [r4, #16]
 8005a50:	b102      	cbz	r2, 8005a54 <forward_dense_integer_SSSA+0x24>
 8005a52:	6812      	ldr	r2, [r2, #0]
 8005a54:	2802      	cmp	r0, #2
 8005a56:	f000 809f 	beq.w	8005b98 <forward_dense_integer_SSSA+0x168>
 8005a5a:	69e5      	ldr	r5, [r4, #28]
 8005a5c:	2d00      	cmp	r5, #0
 8005a5e:	f000 80ed 	beq.w	8005c3c <forward_dense_integer_SSSA+0x20c>
 8005a62:	6829      	ldr	r1, [r5, #0]
 8005a64:	f114 0618 	adds.w	r6, r4, #24
 8005a68:	d007      	beq.n	8005a7a <forward_dense_integer_SSSA+0x4a>
 8005a6a:	8b26      	ldrh	r6, [r4, #24]
 8005a6c:	2e01      	cmp	r6, #1
 8005a6e:	f240 80d8 	bls.w	8005c22 <forward_dense_integer_SSSA+0x1f2>
 8005a72:	2d00      	cmp	r5, #0
 8005a74:	f000 80cc 	beq.w	8005c10 <forward_dense_integer_SSSA+0x1e0>
 8005a78:	686e      	ldr	r6, [r5, #4]
 8005a7a:	2803      	cmp	r0, #3
 8005a7c:	f000 8089 	beq.w	8005b92 <forward_dense_integer_SSSA+0x162>
 8005a80:	68d0      	ldr	r0, [r2, #12]
 8005a82:	68dd      	ldr	r5, [r3, #12]
 8005a84:	f8d0 a004 	ldr.w	sl, [r0, #4]
 8005a88:	9509      	str	r5, [sp, #36]	; 0x24
 8005a8a:	fa1f f58a 	uxth.w	r5, sl
 8005a8e:	69b7      	ldr	r7, [r6, #24]
 8005a90:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005a92:	950f      	str	r5, [sp, #60]	; 0x3c
 8005a94:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005a96:	e9d0 0402 	ldrd	r0, r4, [r0, #8]
 8005a9a:	f8d5 b004 	ldr.w	fp, [r5, #4]
 8005a9e:	fb00 f904 	mul.w	r9, r0, r4
 8005aa2:	68bd      	ldr	r5, [r7, #8]
 8005aa4:	fa1f f08b 	uxth.w	r0, fp
 8005aa8:	699c      	ldr	r4, [r3, #24]
 8005aaa:	950e      	str	r5, [sp, #56]	; 0x38
 8005aac:	900d      	str	r0, [sp, #52]	; 0x34
 8005aae:	6990      	ldr	r0, [r2, #24]
 8005ab0:	2e00      	cmp	r6, #0
 8005ab2:	f000 80c5 	beq.w	8005c40 <forward_dense_integer_SSSA+0x210>
 8005ab6:	6835      	ldr	r5, [r6, #0]
 8005ab8:	2d00      	cmp	r5, #0
 8005aba:	f000 809d 	beq.w	8005bf8 <forward_dense_integer_SSSA+0x1c8>
 8005abe:	69ad      	ldr	r5, [r5, #24]
 8005ac0:	68ad      	ldr	r5, [r5, #8]
 8005ac2:	9509      	str	r5, [sp, #36]	; 0x24
 8005ac4:	681f      	ldr	r7, [r3, #0]
 8005ac6:	698b      	ldr	r3, [r1, #24]
 8005ac8:	6812      	ldr	r2, [r2, #0]
 8005aca:	689b      	ldr	r3, [r3, #8]
 8005acc:	68a5      	ldr	r5, [r4, #8]
 8005ace:	6886      	ldr	r6, [r0, #8]
 8005ad0:	930a      	str	r3, [sp, #40]	; 0x28
 8005ad2:	6809      	ldr	r1, [r1, #0]
 8005ad4:	2f00      	cmp	r7, #0
 8005ad6:	d071      	beq.n	8005bbc <forward_dense_integer_SSSA+0x18c>
 8005ad8:	6878      	ldr	r0, [r7, #4]
 8005ada:	4604      	mov	r4, r0
 8005adc:	2800      	cmp	r0, #0
 8005ade:	d060      	beq.n	8005ba2 <forward_dense_integer_SSSA+0x172>
 8005ae0:	f8b7 c002 	ldrh.w	ip, [r7, #2]
 8005ae4:	f1bc 0f00 	cmp.w	ip, #0
 8005ae8:	f000 8088 	beq.w	8005bfc <forward_dense_integer_SSSA+0x1cc>
 8005aec:	6803      	ldr	r3, [r0, #0]
 8005aee:	edd3 7a00 	vldr	s15, [r3]
 8005af2:	2a00      	cmp	r2, #0
 8005af4:	f000 80ac 	beq.w	8005c50 <forward_dense_integer_SSSA+0x220>
 8005af8:	6853      	ldr	r3, [r2, #4]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	f000 8081 	beq.w	8005c02 <forward_dense_integer_SSSA+0x1d2>
 8005b00:	8850      	ldrh	r0, [r2, #2]
 8005b02:	2800      	cmp	r0, #0
 8005b04:	d063      	beq.n	8005bce <forward_dense_integer_SSSA+0x19e>
 8005b06:	681c      	ldr	r4, [r3, #0]
 8005b08:	ed94 0a00 	vldr	s0, [r4]
 8005b0c:	2f00      	cmp	r7, #0
 8005b0e:	f040 808a 	bne.w	8005c26 <forward_dense_integer_SSSA+0x1f6>
 8005b12:	685b      	ldr	r3, [r3, #4]
 8005b14:	f993 3000 	ldrsb.w	r3, [r3]
 8005b18:	930b      	str	r3, [sp, #44]	; 0x2c
 8005b1a:	2900      	cmp	r1, #0
 8005b1c:	d048      	beq.n	8005bb0 <forward_dense_integer_SSSA+0x180>
 8005b1e:	684b      	ldr	r3, [r1, #4]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d045      	beq.n	8005bb0 <forward_dense_integer_SSSA+0x180>
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	2400      	movs	r4, #0
 8005b28:	f10d 0842 	add.w	r8, sp, #66	; 0x42
 8005b2c:	f8ad 4042 	strh.w	r4, [sp, #66]	; 0x42
 8005b30:	9411      	str	r4, [sp, #68]	; 0x44
 8005b32:	4640      	mov	r0, r8
 8005b34:	ed93 7a00 	vldr	s14, [r3]
 8005b38:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005b3c:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8005b40:	f000 fb42 	bl	80061c8 <align_factor>
 8005b44:	9011      	str	r0, [sp, #68]	; 0x44
 8005b46:	f1b9 0f00 	cmp.w	r9, #0
 8005b4a:	d01c      	beq.n	8005b86 <forward_dense_integer_SSSA+0x156>
 8005b4c:	fa1f fb8b 	uxth.w	fp, fp
 8005b50:	970c      	str	r7, [sp, #48]	; 0x30
 8005b52:	fa1f fa8a 	uxth.w	sl, sl
 8005b56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b58:	af11      	add	r7, sp, #68	; 0x44
 8005b5a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005b5c:	3401      	adds	r4, #1
 8005b5e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8005b60:	9103      	str	r1, [sp, #12]
 8005b62:	9002      	str	r0, [sp, #8]
 8005b64:	4628      	mov	r0, r5
 8005b66:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005b68:	445d      	add	r5, fp
 8005b6a:	f8cd 8004 	str.w	r8, [sp, #4]
 8005b6e:	9700      	str	r7, [sp, #0]
 8005b70:	e9cd 6305 	strd	r6, r3, [sp, #20]
 8005b74:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8005b78:	4456      	add	r6, sl
 8005b7a:	9204      	str	r2, [sp, #16]
 8005b7c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005b7e:	f000 fb63 	bl	8006248 <st_sssa8_fully_connected>
 8005b82:	454c      	cmp	r4, r9
 8005b84:	d1e7      	bne.n	8005b56 <forward_dense_integer_SSSA+0x126>
 8005b86:	b013      	add	sp, #76	; 0x4c
 8005b88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	685b      	ldr	r3, [r3, #4]
 8005b90:	deff      	udf	#255	; 0xff
 8005b92:	2300      	movs	r3, #0
 8005b94:	685b      	ldr	r3, [r3, #4]
 8005b96:	deff      	udf	#255	; 0xff
 8005b98:	2300      	movs	r3, #0
 8005b9a:	685b      	ldr	r3, [r3, #4]
 8005b9c:	deff      	udf	#255	; 0xff
 8005b9e:	6843      	ldr	r3, [r0, #4]
 8005ba0:	deff      	udf	#255	; 0xff
 8005ba2:	2a00      	cmp	r2, #0
 8005ba4:	d036      	beq.n	8005c14 <forward_dense_integer_SSSA+0x1e4>
 8005ba6:	6853      	ldr	r3, [r2, #4]
 8005ba8:	b963      	cbnz	r3, 8005bc4 <forward_dense_integer_SSSA+0x194>
 8005baa:	eddf 7a2c 	vldr	s15, [pc, #176]	; 8005c5c <forward_dense_integer_SSSA+0x22c>
 8005bae:	e011      	b.n	8005bd4 <forward_dense_integer_SSSA+0x1a4>
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 8005bb6:	9311      	str	r3, [sp, #68]	; 0x44
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	deff      	udf	#255	; 0xff
 8005bbc:	b352      	cbz	r2, 8005c14 <forward_dense_integer_SSSA+0x1e4>
 8005bbe:	6853      	ldr	r3, [r2, #4]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d03f      	beq.n	8005c44 <forward_dense_integer_SSSA+0x214>
 8005bc4:	8850      	ldrh	r0, [r2, #2]
 8005bc6:	eddf 7a25 	vldr	s15, [pc, #148]	; 8005c5c <forward_dense_integer_SSSA+0x22c>
 8005bca:	2800      	cmp	r0, #0
 8005bcc:	d19b      	bne.n	8005b06 <forward_dense_integer_SSSA+0xd6>
 8005bce:	2f00      	cmp	r7, #0
 8005bd0:	d03b      	beq.n	8005c4a <forward_dense_integer_SSSA+0x21a>
 8005bd2:	6878      	ldr	r0, [r7, #4]
 8005bd4:	4604      	mov	r4, r0
 8005bd6:	b358      	cbz	r0, 8005c30 <forward_dense_integer_SSSA+0x200>
 8005bd8:	ed9f 0a20 	vldr	s0, [pc, #128]	; 8005c5c <forward_dense_integer_SSSA+0x22c>
 8005bdc:	887f      	ldrh	r7, [r7, #2]
 8005bde:	b127      	cbz	r7, 8005bea <forward_dense_integer_SSSA+0x1ba>
 8005be0:	6863      	ldr	r3, [r4, #4]
 8005be2:	f993 7000 	ldrsb.w	r7, [r3]
 8005be6:	b33a      	cbz	r2, 8005c38 <forward_dense_integer_SSSA+0x208>
 8005be8:	6853      	ldr	r3, [r2, #4]
 8005bea:	b11b      	cbz	r3, 8005bf4 <forward_dense_integer_SSSA+0x1c4>
 8005bec:	8850      	ldrh	r0, [r2, #2]
 8005bee:	2800      	cmp	r0, #0
 8005bf0:	d18f      	bne.n	8005b12 <forward_dense_integer_SSSA+0xe2>
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	930b      	str	r3, [sp, #44]	; 0x2c
 8005bf6:	e790      	b.n	8005b1a <forward_dense_integer_SSSA+0xea>
 8005bf8:	9509      	str	r5, [sp, #36]	; 0x24
 8005bfa:	e763      	b.n	8005ac4 <forward_dense_integer_SSSA+0x94>
 8005bfc:	eddf 7a17 	vldr	s15, [pc, #92]	; 8005c5c <forward_dense_integer_SSSA+0x22c>
 8005c00:	e777      	b.n	8005af2 <forward_dense_integer_SSSA+0xc2>
 8005c02:	2f00      	cmp	r7, #0
 8005c04:	d1e6      	bne.n	8005bd4 <forward_dense_integer_SSSA+0x1a4>
 8005c06:	2700      	movs	r7, #0
 8005c08:	ed9f 0a14 	vldr	s0, [pc, #80]	; 8005c5c <forward_dense_integer_SSSA+0x22c>
 8005c0c:	970b      	str	r7, [sp, #44]	; 0x2c
 8005c0e:	e784      	b.n	8005b1a <forward_dense_integer_SSSA+0xea>
 8005c10:	462e      	mov	r6, r5
 8005c12:	e732      	b.n	8005a7a <forward_dense_integer_SSSA+0x4a>
 8005c14:	eddf 7a11 	vldr	s15, [pc, #68]	; 8005c5c <forward_dense_integer_SSSA+0x22c>
 8005c18:	4617      	mov	r7, r2
 8005c1a:	920b      	str	r2, [sp, #44]	; 0x2c
 8005c1c:	eeb0 0a67 	vmov.f32	s0, s15
 8005c20:	e77b      	b.n	8005b1a <forward_dense_integer_SSSA+0xea>
 8005c22:	2600      	movs	r6, #0
 8005c24:	e729      	b.n	8005a7a <forward_dense_integer_SSSA+0x4a>
 8005c26:	687c      	ldr	r4, [r7, #4]
 8005c28:	2c00      	cmp	r4, #0
 8005c2a:	d1d7      	bne.n	8005bdc <forward_dense_integer_SSSA+0x1ac>
 8005c2c:	4627      	mov	r7, r4
 8005c2e:	e7de      	b.n	8005bee <forward_dense_integer_SSSA+0x1be>
 8005c30:	4607      	mov	r7, r0
 8005c32:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8005c5c <forward_dense_integer_SSSA+0x22c>
 8005c36:	e7d8      	b.n	8005bea <forward_dense_integer_SSSA+0x1ba>
 8005c38:	920b      	str	r2, [sp, #44]	; 0x2c
 8005c3a:	e76e      	b.n	8005b1a <forward_dense_integer_SSSA+0xea>
 8005c3c:	4629      	mov	r1, r5
 8005c3e:	e711      	b.n	8005a64 <forward_dense_integer_SSSA+0x34>
 8005c40:	9609      	str	r6, [sp, #36]	; 0x24
 8005c42:	e73f      	b.n	8005ac4 <forward_dense_integer_SSSA+0x94>
 8005c44:	eddf 7a05 	vldr	s15, [pc, #20]	; 8005c5c <forward_dense_integer_SSSA+0x22c>
 8005c48:	e7dd      	b.n	8005c06 <forward_dense_integer_SSSA+0x1d6>
 8005c4a:	ed9f 0a04 	vldr	s0, [pc, #16]	; 8005c5c <forward_dense_integer_SSSA+0x22c>
 8005c4e:	e7d0      	b.n	8005bf2 <forward_dense_integer_SSSA+0x1c2>
 8005c50:	f1bc 0f00 	cmp.w	ip, #0
 8005c54:	d0d7      	beq.n	8005c06 <forward_dense_integer_SSSA+0x1d6>
 8005c56:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8005c5c <forward_dense_integer_SSSA+0x22c>
 8005c5a:	e7c1      	b.n	8005be0 <forward_dense_integer_SSSA+0x1b0>
 8005c5c:	00000000 	.word	0x00000000

08005c60 <ai_check_custom_types>:
 8005c60:	4b13      	ldr	r3, [pc, #76]	; (8005cb0 <ai_check_custom_types+0x50>)
 8005c62:	b082      	sub	sp, #8
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	9301      	str	r3, [sp, #4]
 8005c68:	b118      	cbz	r0, 8005c72 <ai_check_custom_types+0x12>
 8005c6a:	7803      	ldrb	r3, [r0, #0]
 8005c6c:	2b03      	cmp	r3, #3
 8005c6e:	d002      	beq.n	8005c76 <ai_check_custom_types+0x16>
 8005c70:	2000      	movs	r0, #0
 8005c72:	b002      	add	sp, #8
 8005c74:	4770      	bx	lr
 8005c76:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d004      	beq.n	8005c88 <ai_check_custom_types+0x28>
 8005c7e:	2001      	movs	r0, #1
 8005c80:	f080 0001 	eor.w	r0, r0, #1
 8005c84:	b002      	add	sp, #8
 8005c86:	4770      	bx	lr
 8005c88:	7842      	ldrb	r2, [r0, #1]
 8005c8a:	3001      	adds	r0, #1
 8005c8c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8005c90:	429a      	cmp	r2, r3
 8005c92:	d1f4      	bne.n	8005c7e <ai_check_custom_types+0x1e>
 8005c94:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8005c98:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8005c9c:	429a      	cmp	r2, r3
 8005c9e:	d1ee      	bne.n	8005c7e <ai_check_custom_types+0x1e>
 8005ca0:	7842      	ldrb	r2, [r0, #1]
 8005ca2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8005ca6:	429a      	cmp	r2, r3
 8005ca8:	d1e9      	bne.n	8005c7e <ai_check_custom_types+0x1e>
 8005caa:	2000      	movs	r0, #0
 8005cac:	e7e8      	b.n	8005c80 <ai_check_custom_types+0x20>
 8005cae:	bf00      	nop
 8005cb0:	0800a01c 	.word	0x0800a01c

08005cb4 <ai_layers_forward_all>:
 8005cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cb6:	6d86      	ldr	r6, [r0, #88]	; 0x58
 8005cb8:	4604      	mov	r4, r0
 8005cba:	6d05      	ldr	r5, [r0, #80]	; 0x50
 8005cbc:	b316      	cbz	r6, 8005d04 <ai_layers_forward_all+0x50>
 8005cbe:	b1c5      	cbz	r5, 8005cf2 <ai_layers_forward_all+0x3e>
 8005cc0:	6545      	str	r5, [r0, #84]	; 0x54
 8005cc2:	4629      	mov	r1, r5
 8005cc4:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8005cc6:	2001      	movs	r0, #1
 8005cc8:	47b0      	blx	r6
 8005cca:	2700      	movs	r7, #0
 8005ccc:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8005cce:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8005cd0:	2002      	movs	r0, #2
 8005cd2:	47b0      	blx	r6
 8005cd4:	6d65      	ldr	r5, [r4, #84]	; 0x54
 8005cd6:	692b      	ldr	r3, [r5, #16]
 8005cd8:	4628      	mov	r0, r5
 8005cda:	4798      	blx	r3
 8005cdc:	68eb      	ldr	r3, [r5, #12]
 8005cde:	2003      	movs	r0, #3
 8005ce0:	429d      	cmp	r5, r3
 8005ce2:	4619      	mov	r1, r3
 8005ce4:	d006      	beq.n	8005cf4 <ai_layers_forward_all+0x40>
 8005ce6:	6563      	str	r3, [r4, #84]	; 0x54
 8005ce8:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8005cea:	47b0      	blx	r6
 8005cec:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8005cee:	2900      	cmp	r1, #0
 8005cf0:	d1ed      	bne.n	8005cce <ai_layers_forward_all+0x1a>
 8005cf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005cf4:	2100      	movs	r1, #0
 8005cf6:	6567      	str	r7, [r4, #84]	; 0x54
 8005cf8:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8005cfa:	47b0      	blx	r6
 8005cfc:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8005cfe:	2900      	cmp	r1, #0
 8005d00:	d1e5      	bne.n	8005cce <ai_layers_forward_all+0x1a>
 8005d02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005d04:	2d00      	cmp	r5, #0
 8005d06:	d0f4      	beq.n	8005cf2 <ai_layers_forward_all+0x3e>
 8005d08:	6545      	str	r5, [r0, #84]	; 0x54
 8005d0a:	692b      	ldr	r3, [r5, #16]
 8005d0c:	4628      	mov	r0, r5
 8005d0e:	4798      	blx	r3
 8005d10:	68eb      	ldr	r3, [r5, #12]
 8005d12:	42ab      	cmp	r3, r5
 8005d14:	461d      	mov	r5, r3
 8005d16:	d003      	beq.n	8005d20 <ai_layers_forward_all+0x6c>
 8005d18:	6563      	str	r3, [r4, #84]	; 0x54
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d1f5      	bne.n	8005d0a <ai_layers_forward_all+0x56>
 8005d1e:	e7e8      	b.n	8005cf2 <ai_layers_forward_all+0x3e>
 8005d20:	2300      	movs	r3, #0
 8005d22:	6563      	str	r3, [r4, #84]	; 0x54
 8005d24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005d26:	bf00      	nop

08005d28 <arm_float_to_q15>:
 8005d28:	b4f0      	push	{r4, r5, r6, r7}
 8005d2a:	0897      	lsrs	r7, r2, #2
 8005d2c:	d06b      	beq.n	8005e06 <arm_float_to_q15+0xde>
 8005d2e:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8005d32:	f100 0510 	add.w	r5, r0, #16
 8005d36:	eefe 5a00 	vmov.f32	s11, #224	; 0xbf000000 -0.5
 8005d3a:	f101 0408 	add.w	r4, r1, #8
 8005d3e:	463e      	mov	r6, r7
 8005d40:	ed9f 6a55 	vldr	s12, [pc, #340]	; 8005e98 <arm_float_to_q15+0x170>
 8005d44:	e00b      	b.n	8005d5e <arm_float_to_q15+0x36>
 8005d46:	ee17 3a10 	vmov	r3, s14
 8005d4a:	f303 030f 	ssat	r3, #16, r3
 8005d4e:	3e01      	subs	r6, #1
 8005d50:	f824 3c02 	strh.w	r3, [r4, #-2]
 8005d54:	f105 0510 	add.w	r5, r5, #16
 8005d58:	f104 0408 	add.w	r4, r4, #8
 8005d5c:	d04f      	beq.n	8005dfe <arm_float_to_q15+0xd6>
 8005d5e:	ed55 7a04 	vldr	s15, [r5, #-16]
 8005d62:	ee27 7a86 	vmul.f32	s14, s15, s12
 8005d66:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8005d6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d6e:	fe76 7aa5 	vselgt.f32	s15, s13, s11
 8005d72:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005d76:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005d7a:	ee17 3a90 	vmov	r3, s15
 8005d7e:	f303 030f 	ssat	r3, #16, r3
 8005d82:	f824 3c08 	strh.w	r3, [r4, #-8]
 8005d86:	ed55 7a03 	vldr	s15, [r5, #-12]
 8005d8a:	ee27 7a86 	vmul.f32	s14, s15, s12
 8005d8e:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8005d92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d96:	fe76 7aa5 	vselgt.f32	s15, s13, s11
 8005d9a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005d9e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005da2:	ee17 3a90 	vmov	r3, s15
 8005da6:	f303 030f 	ssat	r3, #16, r3
 8005daa:	f824 3c06 	strh.w	r3, [r4, #-6]
 8005dae:	ed55 7a02 	vldr	s15, [r5, #-8]
 8005db2:	ee27 7a86 	vmul.f32	s14, s15, s12
 8005db6:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8005dba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005dbe:	fe76 7aa5 	vselgt.f32	s15, s13, s11
 8005dc2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005dc6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005dca:	ee17 3a90 	vmov	r3, s15
 8005dce:	f303 030f 	ssat	r3, #16, r3
 8005dd2:	f824 3c04 	strh.w	r3, [r4, #-4]
 8005dd6:	ed55 7a01 	vldr	s15, [r5, #-4]
 8005dda:	ee67 7a86 	vmul.f32	s15, s15, s12
 8005dde:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005de2:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8005de6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005dea:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8005dee:	dcaa      	bgt.n	8005d46 <arm_float_to_q15+0x1e>
 8005df0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005df4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005df8:	ee17 3a90 	vmov	r3, s15
 8005dfc:	e7a5      	b.n	8005d4a <arm_float_to_q15+0x22>
 8005dfe:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
 8005e02:	eb00 1007 	add.w	r0, r0, r7, lsl #4
 8005e06:	f012 0203 	ands.w	r2, r2, #3
 8005e0a:	d042      	beq.n	8005e92 <arm_float_to_q15+0x16a>
 8005e0c:	edd0 7a00 	vldr	s15, [r0]
 8005e10:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005e14:	eddf 5a20 	vldr	s11, [pc, #128]	; 8005e98 <arm_float_to_q15+0x170>
 8005e18:	eebe 6a00 	vmov.f32	s12, #224	; 0xbf000000 -0.5
 8005e1c:	ee67 6aa5 	vmul.f32	s13, s15, s11
 8005e20:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8005e24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e28:	fe77 7a06 	vselgt.f32	s15, s14, s12
 8005e2c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e30:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005e34:	ee17 3a90 	vmov	r3, s15
 8005e38:	f303 030f 	ssat	r3, #16, r3
 8005e3c:	2a01      	cmp	r2, #1
 8005e3e:	800b      	strh	r3, [r1, #0]
 8005e40:	d027      	beq.n	8005e92 <arm_float_to_q15+0x16a>
 8005e42:	edd0 7a01 	vldr	s15, [r0, #4]
 8005e46:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8005e4a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005e4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e52:	fe77 6a06 	vselgt.f32	s13, s14, s12
 8005e56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e5a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005e5e:	ee17 3a90 	vmov	r3, s15
 8005e62:	f303 030f 	ssat	r3, #16, r3
 8005e66:	2a02      	cmp	r2, #2
 8005e68:	804b      	strh	r3, [r1, #2]
 8005e6a:	d012      	beq.n	8005e92 <arm_float_to_q15+0x16a>
 8005e6c:	edd0 7a02 	vldr	s15, [r0, #8]
 8005e70:	ee67 5aa5 	vmul.f32	s11, s15, s11
 8005e74:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 8005e78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e7c:	fe37 7a06 	vselgt.f32	s14, s14, s12
 8005e80:	ee37 7a25 	vadd.f32	s14, s14, s11
 8005e84:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8005e88:	ee17 3a10 	vmov	r3, s14
 8005e8c:	f303 030f 	ssat	r3, #16, r3
 8005e90:	808b      	strh	r3, [r1, #4]
 8005e92:	bcf0      	pop	{r4, r5, r6, r7}
 8005e94:	4770      	bx	lr
 8005e96:	bf00      	nop
 8005e98:	47000000 	.word	0x47000000

08005e9c <arm_float_to_q7>:
 8005e9c:	b4f0      	push	{r4, r5, r6, r7}
 8005e9e:	0897      	lsrs	r7, r2, #2
 8005ea0:	d066      	beq.n	8005f70 <arm_float_to_q7+0xd4>
 8005ea2:	1d0c      	adds	r4, r1, #4
 8005ea4:	ea4f 0c87 	mov.w	ip, r7, lsl #2
 8005ea8:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8005eac:	f100 0510 	add.w	r5, r0, #16
 8005eb0:	eefe 5a00 	vmov.f32	s11, #224	; 0xbf000000 -0.5
 8005eb4:	eb04 060c 	add.w	r6, r4, ip
 8005eb8:	ed9f 6a5b 	vldr	s12, [pc, #364]	; 8006028 <arm_float_to_q7+0x18c>
 8005ebc:	ed55 7a04 	vldr	s15, [r5, #-16]
 8005ec0:	ee27 7a86 	vmul.f32	s14, s15, s12
 8005ec4:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8005ec8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ecc:	fe76 7aa5 	vselgt.f32	s15, s13, s11
 8005ed0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005ed4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005ed8:	ee17 3a90 	vmov	r3, s15
 8005edc:	b21b      	sxth	r3, r3
 8005ede:	f303 0307 	ssat	r3, #8, r3
 8005ee2:	f804 3c04 	strb.w	r3, [r4, #-4]
 8005ee6:	ed55 7a03 	vldr	s15, [r5, #-12]
 8005eea:	ee27 7a86 	vmul.f32	s14, s15, s12
 8005eee:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8005ef2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ef6:	fe76 7aa5 	vselgt.f32	s15, s13, s11
 8005efa:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005efe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005f02:	ee17 3a90 	vmov	r3, s15
 8005f06:	b21b      	sxth	r3, r3
 8005f08:	f303 0307 	ssat	r3, #8, r3
 8005f0c:	f804 3c03 	strb.w	r3, [r4, #-3]
 8005f10:	ed55 7a02 	vldr	s15, [r5, #-8]
 8005f14:	ee27 7a86 	vmul.f32	s14, s15, s12
 8005f18:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8005f1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f20:	fe76 7aa5 	vselgt.f32	s15, s13, s11
 8005f24:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005f28:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005f2c:	ee17 3a90 	vmov	r3, s15
 8005f30:	b21b      	sxth	r3, r3
 8005f32:	f303 0307 	ssat	r3, #8, r3
 8005f36:	f804 3c02 	strb.w	r3, [r4, #-2]
 8005f3a:	ed55 7a01 	vldr	s15, [r5, #-4]
 8005f3e:	ee67 7a86 	vmul.f32	s15, s15, s12
 8005f42:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8005f46:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005f4a:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8005f4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f52:	ee17 3a10 	vmov	r3, s14
 8005f56:	b21b      	sxth	r3, r3
 8005f58:	dd55      	ble.n	8006006 <arm_float_to_q7+0x16a>
 8005f5a:	f303 0307 	ssat	r3, #8, r3
 8005f5e:	f804 3c01 	strb.w	r3, [r4, #-1]
 8005f62:	3404      	adds	r4, #4
 8005f64:	3510      	adds	r5, #16
 8005f66:	42a6      	cmp	r6, r4
 8005f68:	d1a8      	bne.n	8005ebc <arm_float_to_q7+0x20>
 8005f6a:	4461      	add	r1, ip
 8005f6c:	eb00 1007 	add.w	r0, r0, r7, lsl #4
 8005f70:	f012 0203 	ands.w	r2, r2, #3
 8005f74:	d045      	beq.n	8006002 <arm_float_to_q7+0x166>
 8005f76:	edd0 7a00 	vldr	s15, [r0]
 8005f7a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005f7e:	ed9f 5a2a 	vldr	s10, [pc, #168]	; 8006028 <arm_float_to_q7+0x18c>
 8005f82:	eefe 5a00 	vmov.f32	s11, #224	; 0xbf000000 -0.5
 8005f86:	ee67 6a85 	vmul.f32	s13, s15, s10
 8005f8a:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8005f8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f92:	fe77 7a25 	vselgt.f32	s15, s14, s11
 8005f96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f9a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005f9e:	ee17 3a90 	vmov	r3, s15
 8005fa2:	b21b      	sxth	r3, r3
 8005fa4:	f303 0307 	ssat	r3, #8, r3
 8005fa8:	2a01      	cmp	r2, #1
 8005faa:	700b      	strb	r3, [r1, #0]
 8005fac:	d029      	beq.n	8006002 <arm_float_to_q7+0x166>
 8005fae:	edd0 6a01 	vldr	s13, [r0, #4]
 8005fb2:	ee26 6a85 	vmul.f32	s12, s13, s10
 8005fb6:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 8005fba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fbe:	fe77 6a25 	vselgt.f32	s13, s14, s11
 8005fc2:	ee76 6a86 	vadd.f32	s13, s13, s12
 8005fc6:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 8005fca:	ee16 3a90 	vmov	r3, s13
 8005fce:	b21b      	sxth	r3, r3
 8005fd0:	f303 0307 	ssat	r3, #8, r3
 8005fd4:	2a02      	cmp	r2, #2
 8005fd6:	704b      	strb	r3, [r1, #1]
 8005fd8:	d013      	beq.n	8006002 <arm_float_to_q7+0x166>
 8005fda:	edd0 7a02 	vldr	s15, [r0, #8]
 8005fde:	ee27 5a85 	vmul.f32	s10, s15, s10
 8005fe2:	eeb5 5ac0 	vcmpe.f32	s10, #0.0
 8005fe6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fea:	fe77 7a25 	vselgt.f32	s15, s14, s11
 8005fee:	ee77 7a85 	vadd.f32	s15, s15, s10
 8005ff2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005ff6:	ee17 3a90 	vmov	r3, s15
 8005ffa:	b21b      	sxth	r3, r3
 8005ffc:	f303 0307 	ssat	r3, #8, r3
 8006000:	708b      	strb	r3, [r1, #2]
 8006002:	bcf0      	pop	{r4, r5, r6, r7}
 8006004:	4770      	bx	lr
 8006006:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800600a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800600e:	ee17 3a90 	vmov	r3, s15
 8006012:	b21b      	sxth	r3, r3
 8006014:	f303 0307 	ssat	r3, #8, r3
 8006018:	f804 3c01 	strb.w	r3, [r4, #-1]
 800601c:	3404      	adds	r4, #4
 800601e:	3510      	adds	r5, #16
 8006020:	42b4      	cmp	r4, r6
 8006022:	f47f af4b 	bne.w	8005ebc <arm_float_to_q7+0x20>
 8006026:	e7a0      	b.n	8005f6a <arm_float_to_q7+0xce>
 8006028:	43000000 	.word	0x43000000

0800602c <arm_q15_to_float>:
 800602c:	b470      	push	{r4, r5, r6}
 800602e:	0896      	lsrs	r6, r2, #2
 8006030:	d038      	beq.n	80060a4 <arm_q15_to_float+0x78>
 8006032:	f100 0408 	add.w	r4, r0, #8
 8006036:	f101 0310 	add.w	r3, r1, #16
 800603a:	4635      	mov	r5, r6
 800603c:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 80060f8 <arm_q15_to_float+0xcc>
 8006040:	f934 cc08 	ldrsh.w	ip, [r4, #-8]
 8006044:	3d01      	subs	r5, #1
 8006046:	f104 0408 	add.w	r4, r4, #8
 800604a:	f103 0310 	add.w	r3, r3, #16
 800604e:	ee07 ca90 	vmov	s15, ip
 8006052:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006056:	ee67 7a87 	vmul.f32	s15, s15, s14
 800605a:	ed43 7a08 	vstr	s15, [r3, #-32]	; 0xffffffe0
 800605e:	f934 cc0e 	ldrsh.w	ip, [r4, #-14]
 8006062:	ee07 ca90 	vmov	s15, ip
 8006066:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800606a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800606e:	ed43 7a07 	vstr	s15, [r3, #-28]	; 0xffffffe4
 8006072:	f934 cc0c 	ldrsh.w	ip, [r4, #-12]
 8006076:	ee07 ca90 	vmov	s15, ip
 800607a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800607e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006082:	ed43 7a06 	vstr	s15, [r3, #-24]	; 0xffffffe8
 8006086:	f934 cc0a 	ldrsh.w	ip, [r4, #-10]
 800608a:	ee07 ca90 	vmov	s15, ip
 800608e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006092:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006096:	ed43 7a05 	vstr	s15, [r3, #-20]	; 0xffffffec
 800609a:	d1d1      	bne.n	8006040 <arm_q15_to_float+0x14>
 800609c:	eb01 1106 	add.w	r1, r1, r6, lsl #4
 80060a0:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
 80060a4:	f012 0203 	ands.w	r2, r2, #3
 80060a8:	d023      	beq.n	80060f2 <arm_q15_to_float+0xc6>
 80060aa:	f9b0 3000 	ldrsh.w	r3, [r0]
 80060ae:	2a01      	cmp	r2, #1
 80060b0:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80060f8 <arm_q15_to_float+0xcc>
 80060b4:	ee07 3a90 	vmov	s15, r3
 80060b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80060bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80060c0:	edc1 7a00 	vstr	s15, [r1]
 80060c4:	d015      	beq.n	80060f2 <arm_q15_to_float+0xc6>
 80060c6:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 80060ca:	2a02      	cmp	r2, #2
 80060cc:	ee07 3a90 	vmov	s15, r3
 80060d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80060d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80060d8:	edc1 7a01 	vstr	s15, [r1, #4]
 80060dc:	d009      	beq.n	80060f2 <arm_q15_to_float+0xc6>
 80060de:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80060e2:	ee07 3a90 	vmov	s15, r3
 80060e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80060ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80060ee:	edc1 7a02 	vstr	s15, [r1, #8]
 80060f2:	bc70      	pop	{r4, r5, r6}
 80060f4:	4770      	bx	lr
 80060f6:	bf00      	nop
 80060f8:	38000000 	.word	0x38000000

080060fc <arm_q7_to_float>:
 80060fc:	b470      	push	{r4, r5, r6}
 80060fe:	0895      	lsrs	r5, r2, #2
 8006100:	d036      	beq.n	8006170 <arm_q7_to_float+0x74>
 8006102:	eb00 0685 	add.w	r6, r0, r5, lsl #2
 8006106:	f101 0310 	add.w	r3, r1, #16
 800610a:	3004      	adds	r0, #4
 800610c:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 80061c4 <arm_q7_to_float+0xc8>
 8006110:	1d34      	adds	r4, r6, #4
 8006112:	f910 cc04 	ldrsb.w	ip, [r0, #-4]
 8006116:	3004      	adds	r0, #4
 8006118:	3310      	adds	r3, #16
 800611a:	ee07 ca90 	vmov	s15, ip
 800611e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006122:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006126:	ed43 7a08 	vstr	s15, [r3, #-32]	; 0xffffffe0
 800612a:	f910 cc07 	ldrsb.w	ip, [r0, #-7]
 800612e:	ee07 ca90 	vmov	s15, ip
 8006132:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006136:	ee67 7a87 	vmul.f32	s15, s15, s14
 800613a:	ed43 7a07 	vstr	s15, [r3, #-28]	; 0xffffffe4
 800613e:	f910 cc06 	ldrsb.w	ip, [r0, #-6]
 8006142:	ee07 ca90 	vmov	s15, ip
 8006146:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800614a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800614e:	ed43 7a06 	vstr	s15, [r3, #-24]	; 0xffffffe8
 8006152:	f910 cc05 	ldrsb.w	ip, [r0, #-5]
 8006156:	42a0      	cmp	r0, r4
 8006158:	ee07 ca90 	vmov	s15, ip
 800615c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006160:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006164:	ed43 7a05 	vstr	s15, [r3, #-20]	; 0xffffffec
 8006168:	d1d3      	bne.n	8006112 <arm_q7_to_float+0x16>
 800616a:	eb01 1105 	add.w	r1, r1, r5, lsl #4
 800616e:	4630      	mov	r0, r6
 8006170:	f012 0203 	ands.w	r2, r2, #3
 8006174:	d023      	beq.n	80061be <arm_q7_to_float+0xc2>
 8006176:	f990 3000 	ldrsb.w	r3, [r0]
 800617a:	2a01      	cmp	r2, #1
 800617c:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80061c4 <arm_q7_to_float+0xc8>
 8006180:	ee07 3a90 	vmov	s15, r3
 8006184:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006188:	ee67 7a87 	vmul.f32	s15, s15, s14
 800618c:	edc1 7a00 	vstr	s15, [r1]
 8006190:	d015      	beq.n	80061be <arm_q7_to_float+0xc2>
 8006192:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8006196:	2a02      	cmp	r2, #2
 8006198:	ee07 3a90 	vmov	s15, r3
 800619c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80061a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80061a4:	edc1 7a01 	vstr	s15, [r1, #4]
 80061a8:	d009      	beq.n	80061be <arm_q7_to_float+0xc2>
 80061aa:	f990 3002 	ldrsb.w	r3, [r0, #2]
 80061ae:	ee07 3a90 	vmov	s15, r3
 80061b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80061b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80061ba:	edc1 7a02 	vstr	s15, [r1, #8]
 80061be:	bc70      	pop	{r4, r5, r6}
 80061c0:	4770      	bx	lr
 80061c2:	bf00      	nop
 80061c4:	3c000000 	.word	0x3c000000

080061c8 <align_factor>:
 80061c8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80061cc:	b508      	push	{r3, lr}
 80061ce:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80061d2:	2300      	movs	r3, #0
 80061d4:	8003      	strh	r3, [r0, #0]
 80061d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061da:	d41f      	bmi.n	800621c <align_factor+0x54>
 80061dc:	dd0e      	ble.n	80061fc <align_factor+0x34>
 80061de:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80061e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80061e6:	ee20 0a07 	vmul.f32	s0, s0, s14
 80061ea:	1e5a      	subs	r2, r3, #1
 80061ec:	b219      	sxth	r1, r3
 80061ee:	b293      	uxth	r3, r2
 80061f0:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80061f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061f8:	dcf5      	bgt.n	80061e6 <align_factor+0x1e>
 80061fa:	8001      	strh	r1, [r0, #0]
 80061fc:	eddf 7a11 	vldr	s15, [pc, #68]	; 8006244 <align_factor+0x7c>
 8006200:	ee60 7a27 	vmul.f32	s15, s0, s15
 8006204:	ee17 0a90 	vmov	r0, s15
 8006208:	f7fa fd06 	bl	8000c18 <__aeabi_f2lz>
 800620c:	ebb1 7fe0 	cmp.w	r1, r0, asr #31
 8006210:	d003      	beq.n	800621a <align_factor+0x52>
 8006212:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8006216:	ea80 70e1 	eor.w	r0, r0, r1, asr #31
 800621a:	bd08      	pop	{r3, pc}
 800621c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8006220:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8006224:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006228:	d5e8      	bpl.n	80061fc <align_factor+0x34>
 800622a:	2301      	movs	r3, #1
 800622c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8006230:	1c5a      	adds	r2, r3, #1
 8006232:	b219      	sxth	r1, r3
 8006234:	b293      	uxth	r3, r2
 8006236:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800623a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800623e:	d4f5      	bmi.n	800622c <align_factor+0x64>
 8006240:	e7db      	b.n	80061fa <align_factor+0x32>
 8006242:	bf00      	nop
 8006244:	4f000000 	.word	0x4f000000

08006248 <st_sssa8_fully_connected>:
 8006248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800624c:	b095      	sub	sp, #84	; 0x54
 800624e:	4688      	mov	r8, r1
 8006250:	e9dd 451e 	ldrd	r4, r5, [sp, #120]	; 0x78
 8006254:	9311      	str	r3, [sp, #68]	; 0x44
 8006256:	f9b5 1000 	ldrsh.w	r1, [r5]
 800625a:	6823      	ldr	r3, [r4, #0]
 800625c:	2900      	cmp	r1, #0
 800625e:	f99d 4084 	ldrsb.w	r4, [sp, #132]	; 0x84
 8006262:	9309      	str	r3, [sp, #36]	; 0x24
 8006264:	9106      	str	r1, [sp, #24]
 8006266:	9204      	str	r2, [sp, #16]
 8006268:	f99d 3080 	ldrsb.w	r3, [sp, #128]	; 0x80
 800626c:	9407      	str	r4, [sp, #28]
 800626e:	dd07      	ble.n	8006280 <st_sssa8_fully_connected+0x38>
 8006270:	4625      	mov	r5, r4
 8006272:	2201      	movs	r2, #1
 8006274:	460c      	mov	r4, r1
 8006276:	408d      	lsls	r5, r1
 8006278:	40a2      	lsls	r2, r4
 800627a:	eb05 0252 	add.w	r2, r5, r2, lsr #1
 800627e:	9207      	str	r2, [sp, #28]
 8006280:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006282:	2a00      	cmp	r2, #0
 8006284:	f000 81b2 	beq.w	80065ec <st_sssa8_fully_connected+0x3a4>
 8006288:	9911      	ldr	r1, [sp, #68]	; 0x44
 800628a:	b29a      	uxth	r2, r3
 800628c:	9d04      	ldr	r5, [sp, #16]
 800628e:	084c      	lsrs	r4, r1, #1
 8006290:	9300      	str	r3, [sp, #0]
 8006292:	9924      	ldr	r1, [sp, #144]	; 0x90
 8006294:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 8006298:	462a      	mov	r2, r5
 800629a:	f000 fa7b 	bl	8006794 <st_int8_reordered_no_shift_zero>
 800629e:	2c00      	cmp	r4, #0
 80062a0:	f000 8138 	beq.w	8006514 <st_sssa8_fully_connected+0x2cc>
 80062a4:	1ee8      	subs	r0, r5, #3
 80062a6:	3c01      	subs	r4, #1
 80062a8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80062aa:	f1a5 0310 	sub.w	r3, r5, #16
 80062ae:	900e      	str	r0, [sp, #56]	; 0x38
 80062b0:	1f29      	subs	r1, r5, #4
 80062b2:	9822      	ldr	r0, [sp, #136]	; 0x88
 80062b4:	3210      	adds	r2, #16
 80062b6:	091b      	lsrs	r3, r3, #4
 80062b8:	9110      	str	r1, [sp, #64]	; 0x40
 80062ba:	3008      	adds	r0, #8
 80062bc:	3301      	adds	r3, #1
 80062be:	9005      	str	r0, [sp, #20]
 80062c0:	b2a0      	uxth	r0, r4
 80062c2:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 80062c4:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80062c8:	9013      	str	r0, [sp, #76]	; 0x4c
 80062ca:	9408      	str	r4, [sp, #32]
 80062cc:	920d      	str	r2, [sp, #52]	; 0x34
 80062ce:	9a06      	ldr	r2, [sp, #24]
 80062d0:	f1c2 0201 	rsb	r2, r2, #1
 80062d4:	9212      	str	r2, [sp, #72]	; 0x48
 80062d6:	011a      	lsls	r2, r3, #4
 80062d8:	920a      	str	r2, [sp, #40]	; 0x28
 80062da:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80062dc:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 80062e0:	930f      	str	r3, [sp, #60]	; 0x3c
 80062e2:	9b05      	ldr	r3, [sp, #20]
 80062e4:	9a04      	ldr	r2, [sp, #16]
 80062e6:	f853 0c08 	ldr.w	r0, [r3, #-8]
 80062ea:	eb08 0702 	add.w	r7, r8, r2
 80062ee:	2a0f      	cmp	r2, #15
 80062f0:	f853 3c04 	ldr.w	r3, [r3, #-4]
 80062f4:	9703      	str	r7, [sp, #12]
 80062f6:	f340 8233 	ble.w	8006760 <st_sssa8_fully_connected+0x518>
 80062fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80062fc:	9e24      	ldr	r6, [sp, #144]	; 0x90
 80062fe:	eb08 0c02 	add.w	ip, r8, r2
 8006302:	f8d8 2000 	ldr.w	r2, [r8]
 8006306:	683d      	ldr	r5, [r7, #0]
 8006308:	ea4f 2132 	mov.w	r1, r2, ror #8
 800630c:	6834      	ldr	r4, [r6, #0]
 800630e:	ea4f 2e35 	mov.w	lr, r5, ror #8
 8006312:	fa2f f181 	sxtb16	r1, r1
 8006316:	fa2f f282 	sxtb16	r2, r2
 800631a:	fa2f f585 	sxtb16	r5, r5
 800631e:	fa2f fe8e 	sxtb16	lr, lr
 8006322:	fb24 0002 	smlad	r0, r4, r2, r0
 8006326:	fb24 3305 	smlad	r3, r4, r5, r3
 800632a:	6872      	ldr	r2, [r6, #4]
 800632c:	fb22 0001 	smlad	r0, r2, r1, r0
 8006330:	fb22 3e0e 	smlad	lr, r2, lr, r3
 8006334:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006338:	687d      	ldr	r5, [r7, #4]
 800633a:	ea4f 2331 	mov.w	r3, r1, ror #8
 800633e:	68b2      	ldr	r2, [r6, #8]
 8006340:	ea4f 2935 	mov.w	r9, r5, ror #8
 8006344:	fa2f f383 	sxtb16	r3, r3
 8006348:	fa2f f181 	sxtb16	r1, r1
 800634c:	fa2f f585 	sxtb16	r5, r5
 8006350:	fa2f f989 	sxtb16	r9, r9
 8006354:	fb22 0101 	smlad	r1, r2, r1, r0
 8006358:	fb22 e205 	smlad	r2, r2, r5, lr
 800635c:	68f4      	ldr	r4, [r6, #12]
 800635e:	fb24 1103 	smlad	r1, r4, r3, r1
 8006362:	fb24 2209 	smlad	r2, r4, r9, r2
 8006366:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800636a:	68bd      	ldr	r5, [r7, #8]
 800636c:	ea4f 2033 	mov.w	r0, r3, ror #8
 8006370:	6934      	ldr	r4, [r6, #16]
 8006372:	ea4f 2e35 	mov.w	lr, r5, ror #8
 8006376:	fa2f f080 	sxtb16	r0, r0
 800637a:	fa2f f383 	sxtb16	r3, r3
 800637e:	fa2f f585 	sxtb16	r5, r5
 8006382:	fa2f fe8e 	sxtb16	lr, lr
 8006386:	fb24 1303 	smlad	r3, r4, r3, r1
 800638a:	fb24 2405 	smlad	r4, r4, r5, r2
 800638e:	6971      	ldr	r1, [r6, #20]
 8006390:	fb21 3300 	smlad	r3, r1, r0, r3
 8006394:	fb21 4e0e 	smlad	lr, r1, lr, r4
 8006398:	f8d8 200c 	ldr.w	r2, [r8, #12]
 800639c:	3710      	adds	r7, #16
 800639e:	f857 4c04 	ldr.w	r4, [r7, #-4]
 80063a2:	f108 0810 	add.w	r8, r8, #16
 80063a6:	ea4f 2032 	mov.w	r0, r2, ror #8
 80063aa:	69b1      	ldr	r1, [r6, #24]
 80063ac:	fa2f f580 	sxtb16	r5, r0
 80063b0:	fa2f f082 	sxtb16	r0, r2
 80063b4:	ea4f 2234 	mov.w	r2, r4, ror #8
 80063b8:	fa2f f484 	sxtb16	r4, r4
 80063bc:	fa2f f282 	sxtb16	r2, r2
 80063c0:	fb21 3000 	smlad	r0, r1, r0, r3
 80063c4:	fb21 e104 	smlad	r1, r1, r4, lr
 80063c8:	69f3      	ldr	r3, [r6, #28]
 80063ca:	3620      	adds	r6, #32
 80063cc:	fb23 0005 	smlad	r0, r3, r5, r0
 80063d0:	fb23 1302 	smlad	r3, r3, r2, r1
 80063d4:	45e0      	cmp	r8, ip
 80063d6:	d194      	bne.n	8006302 <st_sssa8_fully_connected+0xba>
 80063d8:	9903      	ldr	r1, [sp, #12]
 80063da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80063dc:	460c      	mov	r4, r1
 80063de:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
 80063e2:	4696      	mov	lr, r2
 80063e4:	4414      	add	r4, r2
 80063e6:	9403      	str	r4, [sp, #12]
 80063e8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80063ea:	4596      	cmp	lr, r2
 80063ec:	da35      	bge.n	800645a <st_sssa8_fully_connected+0x212>
 80063ee:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80063f0:	4655      	mov	r5, sl
 80063f2:	f8dd c00c 	ldr.w	ip, [sp, #12]
 80063f6:	eba2 020e 	sub.w	r2, r2, lr
 80063fa:	0892      	lsrs	r2, r2, #2
 80063fc:	920c      	str	r2, [sp, #48]	; 0x30
 80063fe:	3201      	adds	r2, #1
 8006400:	ea4f 0b82 	mov.w	fp, r2, lsl #2
 8006404:	920b      	str	r2, [sp, #44]	; 0x2c
 8006406:	eb08 090b 	add.w	r9, r8, fp
 800640a:	f858 7b04 	ldr.w	r7, [r8], #4
 800640e:	f85c 1b04 	ldr.w	r1, [ip], #4
 8006412:	ea4f 2637 	mov.w	r6, r7, ror #8
 8006416:	682a      	ldr	r2, [r5, #0]
 8006418:	ea4f 2431 	mov.w	r4, r1, ror #8
 800641c:	fa2f f686 	sxtb16	r6, r6
 8006420:	fa2f f787 	sxtb16	r7, r7
 8006424:	fa2f f181 	sxtb16	r1, r1
 8006428:	fa2f f484 	sxtb16	r4, r4
 800642c:	fb22 0007 	smlad	r0, r2, r7, r0
 8006430:	fb22 3301 	smlad	r3, r2, r1, r3
 8006434:	686a      	ldr	r2, [r5, #4]
 8006436:	3508      	adds	r5, #8
 8006438:	fb22 0006 	smlad	r0, r2, r6, r0
 800643c:	fb22 3304 	smlad	r3, r2, r4, r3
 8006440:	45c8      	cmp	r8, r9
 8006442:	d1e2      	bne.n	800640a <st_sssa8_fully_connected+0x1c2>
 8006444:	9a03      	ldr	r2, [sp, #12]
 8006446:	f10e 0e04 	add.w	lr, lr, #4
 800644a:	445a      	add	r2, fp
 800644c:	9203      	str	r2, [sp, #12]
 800644e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006450:	eb0a 0ac2 	add.w	sl, sl, r2, lsl #3
 8006454:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006456:	eb0e 0e82 	add.w	lr, lr, r2, lsl #2
 800645a:	9e04      	ldr	r6, [sp, #16]
 800645c:	45b6      	cmp	lr, r6
 800645e:	da2d      	bge.n	80064bc <st_sssa8_fully_connected+0x274>
 8006460:	f10e 0201 	add.w	r2, lr, #1
 8006464:	9c03      	ldr	r4, [sp, #12]
 8006466:	f9ba 1000 	ldrsh.w	r1, [sl]
 800646a:	f998 5000 	ldrsb.w	r5, [r8]
 800646e:	42b2      	cmp	r2, r6
 8006470:	f994 4000 	ldrsb.w	r4, [r4]
 8006474:	fb11 0005 	smlabb	r0, r1, r5, r0
 8006478:	fb11 3304 	smlabb	r3, r1, r4, r3
 800647c:	f280 80b3 	bge.w	80065e6 <st_sssa8_fully_connected+0x39e>
 8006480:	9903      	ldr	r1, [sp, #12]
 8006482:	f10e 0e02 	add.w	lr, lr, #2
 8006486:	f9ba 2002 	ldrsh.w	r2, [sl, #2]
 800648a:	f998 4001 	ldrsb.w	r4, [r8, #1]
 800648e:	f991 1001 	ldrsb.w	r1, [r1, #1]
 8006492:	fb12 0004 	smlabb	r0, r2, r4, r0
 8006496:	fb12 3301 	smlabb	r3, r2, r1, r3
 800649a:	9a04      	ldr	r2, [sp, #16]
 800649c:	4596      	cmp	lr, r2
 800649e:	f280 8164 	bge.w	800676a <st_sssa8_fully_connected+0x522>
 80064a2:	9903      	ldr	r1, [sp, #12]
 80064a4:	f108 0803 	add.w	r8, r8, #3
 80064a8:	f9ba 2004 	ldrsh.w	r2, [sl, #4]
 80064ac:	f991 4002 	ldrsb.w	r4, [r1, #2]
 80064b0:	f918 1c01 	ldrsb.w	r1, [r8, #-1]
 80064b4:	fb12 3304 	smlabb	r3, r2, r4, r3
 80064b8:	fb12 0001 	smlabb	r0, r2, r1, r0
 80064bc:	9a08      	ldr	r2, [sp, #32]
 80064be:	9906      	ldr	r1, [sp, #24]
 80064c0:	3202      	adds	r2, #2
 80064c2:	2900      	cmp	r1, #0
 80064c4:	9208      	str	r2, [sp, #32]
 80064c6:	dd74      	ble.n	80065b2 <st_sssa8_fully_connected+0x36a>
 80064c8:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80064ca:	0040      	lsls	r0, r0, #1
 80064cc:	9e07      	ldr	r6, [sp, #28]
 80064ce:	005b      	lsls	r3, r3, #1
 80064d0:	fb50 6004 	smmla	r0, r0, r4, r6
 80064d4:	fb53 6304 	smmla	r3, r3, r4, r6
 80064d8:	4108      	asrs	r0, r1
 80064da:	460c      	mov	r4, r1
 80064dc:	f300 0007 	ssat	r0, #8, r0
 80064e0:	f802 0c02 	strb.w	r0, [r2, #-2]
 80064e4:	4123      	asrs	r3, r4
 80064e6:	f303 0307 	ssat	r3, #8, r3
 80064ea:	f802 3c01 	strb.w	r3, [r2, #-1]
 80064ee:	9b05      	ldr	r3, [sp, #20]
 80064f0:	9a04      	ldr	r2, [sp, #16]
 80064f2:	3308      	adds	r3, #8
 80064f4:	4490      	add	r8, r2
 80064f6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80064f8:	9305      	str	r3, [sp, #20]
 80064fa:	429a      	cmp	r2, r3
 80064fc:	f47f aef2 	bne.w	80062e4 <st_sssa8_fully_connected+0x9c>
 8006500:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8006502:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006504:	3401      	adds	r4, #1
 8006506:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800650a:	9322      	str	r3, [sp, #136]	; 0x88
 800650c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800650e:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8006512:	9323      	str	r3, [sp, #140]	; 0x8c
 8006514:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006516:	07db      	lsls	r3, r3, #31
 8006518:	d547      	bpl.n	80065aa <st_sssa8_fully_connected+0x362>
 800651a:	9a04      	ldr	r2, [sp, #16]
 800651c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800651e:	0892      	lsrs	r2, r2, #2
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	d01a      	beq.n	800655a <st_sssa8_fully_connected+0x312>
 8006524:	1e54      	subs	r4, r2, #1
 8006526:	9924      	ldr	r1, [sp, #144]	; 0x90
 8006528:	b2a4      	uxth	r4, r4
 800652a:	3401      	adds	r4, #1
 800652c:	eb08 0584 	add.w	r5, r8, r4, lsl #2
 8006530:	f858 2b04 	ldr.w	r2, [r8], #4
 8006534:	680e      	ldr	r6, [r1, #0]
 8006536:	ea4f 2032 	mov.w	r0, r2, ror #8
 800653a:	fa2f f282 	sxtb16	r2, r2
 800653e:	fa2f f080 	sxtb16	r0, r0
 8006542:	fb26 3202 	smlad	r2, r6, r2, r3
 8006546:	684b      	ldr	r3, [r1, #4]
 8006548:	3108      	adds	r1, #8
 800654a:	fb23 2300 	smlad	r3, r3, r0, r2
 800654e:	45a8      	cmp	r8, r5
 8006550:	d1ee      	bne.n	8006530 <st_sssa8_fully_connected+0x2e8>
 8006552:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006554:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8006558:	9224      	str	r2, [sp, #144]	; 0x90
 800655a:	9a04      	ldr	r2, [sp, #16]
 800655c:	f012 0203 	ands.w	r2, r2, #3
 8006560:	d015      	beq.n	800658e <st_sssa8_fully_connected+0x346>
 8006562:	9824      	ldr	r0, [sp, #144]	; 0x90
 8006564:	2a01      	cmp	r2, #1
 8006566:	f998 1000 	ldrsb.w	r1, [r8]
 800656a:	8800      	ldrh	r0, [r0, #0]
 800656c:	fb10 3301 	smlabb	r3, r0, r1, r3
 8006570:	d00d      	beq.n	800658e <st_sssa8_fully_connected+0x346>
 8006572:	9824      	ldr	r0, [sp, #144]	; 0x90
 8006574:	2a02      	cmp	r2, #2
 8006576:	f998 1001 	ldrsb.w	r1, [r8, #1]
 800657a:	8840      	ldrh	r0, [r0, #2]
 800657c:	fb10 3301 	smlabb	r3, r0, r1, r3
 8006580:	d005      	beq.n	800658e <st_sssa8_fully_connected+0x346>
 8006582:	9924      	ldr	r1, [sp, #144]	; 0x90
 8006584:	f998 2002 	ldrsb.w	r2, [r8, #2]
 8006588:	8889      	ldrh	r1, [r1, #4]
 800658a:	fb11 3302 	smlabb	r3, r1, r2, r3
 800658e:	9a06      	ldr	r2, [sp, #24]
 8006590:	2a00      	cmp	r2, #0
 8006592:	f340 80ed 	ble.w	8006770 <st_sssa8_fully_connected+0x528>
 8006596:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006598:	005b      	lsls	r3, r3, #1
 800659a:	9807      	ldr	r0, [sp, #28]
 800659c:	fb53 0301 	smmla	r3, r3, r1, r0
 80065a0:	4113      	asrs	r3, r2
 80065a2:	f303 0307 	ssat	r3, #8, r3
 80065a6:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80065a8:	7013      	strb	r3, [r2, #0]
 80065aa:	2000      	movs	r0, #0
 80065ac:	b015      	add	sp, #84	; 0x54
 80065ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065b2:	9912      	ldr	r1, [sp, #72]	; 0x48
 80065b4:	fa00 f201 	lsl.w	r2, r0, r1
 80065b8:	f302 021f 	ssat	r2, #32, r2
 80065bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80065be:	fb52 f210 	smmulr	r2, r2, r0
 80065c2:	408b      	lsls	r3, r1
 80065c4:	f303 031f 	ssat	r3, #32, r3
 80065c8:	fb53 f310 	smmulr	r3, r3, r0
 80065cc:	9907      	ldr	r1, [sp, #28]
 80065ce:	440a      	add	r2, r1
 80065d0:	f302 0207 	ssat	r2, #8, r2
 80065d4:	9808      	ldr	r0, [sp, #32]
 80065d6:	440b      	add	r3, r1
 80065d8:	f800 2c02 	strb.w	r2, [r0, #-2]
 80065dc:	f303 0307 	ssat	r3, #8, r3
 80065e0:	f800 3c01 	strb.w	r3, [r0, #-1]
 80065e4:	e783      	b.n	80064ee <st_sssa8_fully_connected+0x2a6>
 80065e6:	f108 0801 	add.w	r8, r8, #1
 80065ea:	e767      	b.n	80064bc <st_sssa8_fully_connected+0x274>
 80065ec:	425a      	negs	r2, r3
 80065ee:	9911      	ldr	r1, [sp, #68]	; 0x44
 80065f0:	b296      	uxth	r6, r2
 80065f2:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
 80065f6:	2900      	cmp	r1, #0
 80065f8:	d0d7      	beq.n	80065aa <st_sssa8_fully_connected+0x362>
 80065fa:	9c04      	ldr	r4, [sp, #16]
 80065fc:	fa0f fc83 	sxth.w	ip, r3
 8006600:	9b06      	ldr	r3, [sp, #24]
 8006602:	f1a4 0210 	sub.w	r2, r4, #16
 8006606:	9d23      	ldr	r5, [sp, #140]	; 0x8c
 8006608:	f1c3 0301 	rsb	r3, r3, #1
 800660c:	46a1      	mov	r9, r4
 800660e:	4429      	add	r1, r5
 8006610:	f8dd a088 	ldr.w	sl, [sp, #136]	; 0x88
 8006614:	9308      	str	r3, [sp, #32]
 8006616:	f022 030f 	bic.w	r3, r2, #15
 800661a:	f1b9 0f0f 	cmp.w	r9, #15
 800661e:	9103      	str	r1, [sp, #12]
 8006620:	f103 0310 	add.w	r3, r3, #16
 8006624:	9004      	str	r0, [sp, #16]
 8006626:	46ae      	mov	lr, r5
 8006628:	eb00 0203 	add.w	r2, r0, r3
 800662c:	469b      	mov	fp, r3
 800662e:	f85a 3b04 	ldr.w	r3, [sl], #4
 8006632:	9205      	str	r2, [sp, #20]
 8006634:	f340 8083 	ble.w	800673e <st_sssa8_fully_connected+0x4f6>
 8006638:	eb08 070b 	add.w	r7, r8, fp
 800663c:	9d04      	ldr	r5, [sp, #16]
 800663e:	f8d8 4000 	ldr.w	r4, [r8]
 8006642:	682a      	ldr	r2, [r5, #0]
 8006644:	ea4f 2034 	mov.w	r0, r4, ror #8
 8006648:	ea4f 2132 	mov.w	r1, r2, ror #8
 800664c:	fa2f f484 	sxtb16	r4, r4
 8006650:	fa2f f080 	sxtb16	r0, r0
 8006654:	fa26 f282 	sxtab16	r2, r6, r2
 8006658:	fa26 f181 	sxtab16	r1, r6, r1
 800665c:	fb22 3304 	smlad	r3, r2, r4, r3
 8006660:	fb21 3200 	smlad	r2, r1, r0, r3
 8006664:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8006668:	686b      	ldr	r3, [r5, #4]
 800666a:	ea4f 2034 	mov.w	r0, r4, ror #8
 800666e:	ea4f 2133 	mov.w	r1, r3, ror #8
 8006672:	fa2f f484 	sxtb16	r4, r4
 8006676:	fa2f f080 	sxtb16	r0, r0
 800667a:	fa26 f383 	sxtab16	r3, r6, r3
 800667e:	fa26 f181 	sxtab16	r1, r6, r1
 8006682:	fb23 2204 	smlad	r2, r3, r4, r2
 8006686:	fb21 2300 	smlad	r3, r1, r0, r2
 800668a:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800668e:	68a9      	ldr	r1, [r5, #8]
 8006690:	ea4f 2034 	mov.w	r0, r4, ror #8
 8006694:	ea4f 2231 	mov.w	r2, r1, ror #8
 8006698:	fa2f f484 	sxtb16	r4, r4
 800669c:	fa2f f080 	sxtb16	r0, r0
 80066a0:	fa26 f181 	sxtab16	r1, r6, r1
 80066a4:	fa26 f282 	sxtab16	r2, r6, r2
 80066a8:	fb21 3304 	smlad	r3, r1, r4, r3
 80066ac:	fb22 3100 	smlad	r1, r2, r0, r3
 80066b0:	f8d8 400c 	ldr.w	r4, [r8, #12]
 80066b4:	3510      	adds	r5, #16
 80066b6:	f855 3c04 	ldr.w	r3, [r5, #-4]
 80066ba:	f108 0810 	add.w	r8, r8, #16
 80066be:	ea4f 2034 	mov.w	r0, r4, ror #8
 80066c2:	ea4f 2233 	mov.w	r2, r3, ror #8
 80066c6:	fa2f f484 	sxtb16	r4, r4
 80066ca:	fa2f f080 	sxtb16	r0, r0
 80066ce:	fa26 f383 	sxtab16	r3, r6, r3
 80066d2:	fa26 f282 	sxtab16	r2, r6, r2
 80066d6:	fb23 1304 	smlad	r3, r3, r4, r1
 80066da:	fb22 3300 	smlad	r3, r2, r0, r3
 80066de:	45b8      	cmp	r8, r7
 80066e0:	d1ad      	bne.n	800663e <st_sssa8_fully_connected+0x3f6>
 80066e2:	9805      	ldr	r0, [sp, #20]
 80066e4:	465d      	mov	r5, fp
 80066e6:	454d      	cmp	r5, r9
 80066e8:	da10      	bge.n	800670c <st_sssa8_fully_connected+0x4c4>
 80066ea:	eba9 0505 	sub.w	r5, r9, r5
 80066ee:	4644      	mov	r4, r8
 80066f0:	4445      	add	r5, r8
 80066f2:	7822      	ldrb	r2, [r4, #0]
 80066f4:	f108 0801 	add.w	r8, r8, #1
 80066f8:	f910 1b01 	ldrsb.w	r1, [r0], #1
 80066fc:	b252      	sxtb	r2, r2
 80066fe:	45a8      	cmp	r8, r5
 8006700:	eba1 010c 	sub.w	r1, r1, ip
 8006704:	4644      	mov	r4, r8
 8006706:	fb11 3302 	smlabb	r3, r1, r2, r3
 800670a:	d1f2      	bne.n	80066f2 <st_sssa8_fully_connected+0x4aa>
 800670c:	9a06      	ldr	r2, [sp, #24]
 800670e:	f10e 0e01 	add.w	lr, lr, #1
 8006712:	2a00      	cmp	r2, #0
 8006714:	dd16      	ble.n	8006744 <st_sssa8_fully_connected+0x4fc>
 8006716:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006718:	005b      	lsls	r3, r3, #1
 800671a:	9807      	ldr	r0, [sp, #28]
 800671c:	fb53 0301 	smmla	r3, r3, r1, r0
 8006720:	4113      	asrs	r3, r2
 8006722:	f303 0307 	ssat	r3, #8, r3
 8006726:	f80e 3c01 	strb.w	r3, [lr, #-1]
 800672a:	9b03      	ldr	r3, [sp, #12]
 800672c:	4573      	cmp	r3, lr
 800672e:	f43f af3c 	beq.w	80065aa <st_sssa8_fully_connected+0x362>
 8006732:	f1b9 0f0f 	cmp.w	r9, #15
 8006736:	f85a 3b04 	ldr.w	r3, [sl], #4
 800673a:	f73f af7d 	bgt.w	8006638 <st_sssa8_fully_connected+0x3f0>
 800673e:	9804      	ldr	r0, [sp, #16]
 8006740:	2500      	movs	r5, #0
 8006742:	e7d0      	b.n	80066e6 <st_sssa8_fully_connected+0x49e>
 8006744:	9a08      	ldr	r2, [sp, #32]
 8006746:	4093      	lsls	r3, r2
 8006748:	f303 031f 	ssat	r3, #32, r3
 800674c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800674e:	fb53 f312 	smmulr	r3, r3, r2
 8006752:	9a07      	ldr	r2, [sp, #28]
 8006754:	4413      	add	r3, r2
 8006756:	f303 0307 	ssat	r3, #8, r3
 800675a:	f80e 3c01 	strb.w	r3, [lr, #-1]
 800675e:	e7e4      	b.n	800672a <st_sssa8_fully_connected+0x4e2>
 8006760:	f8dd a090 	ldr.w	sl, [sp, #144]	; 0x90
 8006764:	f04f 0e00 	mov.w	lr, #0
 8006768:	e63e      	b.n	80063e8 <st_sssa8_fully_connected+0x1a0>
 800676a:	f108 0802 	add.w	r8, r8, #2
 800676e:	e6a5      	b.n	80064bc <st_sssa8_fully_connected+0x274>
 8006770:	f1c2 0201 	rsb	r2, r2, #1
 8006774:	4093      	lsls	r3, r2
 8006776:	f303 031f 	ssat	r3, #32, r3
 800677a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800677c:	fb53 f312 	smmulr	r3, r3, r2
 8006780:	9a07      	ldr	r2, [sp, #28]
 8006782:	441a      	add	r2, r3
 8006784:	f302 0307 	ssat	r3, #8, r2
 8006788:	2000      	movs	r0, #0
 800678a:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800678c:	7013      	strb	r3, [r2, #0]
 800678e:	b015      	add	sp, #84	; 0x54
 8006790:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006794 <st_int8_reordered_no_shift_zero>:
 8006794:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006796:	ea5f 0e92 	movs.w	lr, r2, lsr #2
 800679a:	f9bd c014 	ldrsh.w	ip, [sp, #20]
 800679e:	d02e      	beq.n	80067fe <st_int8_reordered_no_shift_zero+0x6a>
 80067a0:	eb00 078e 	add.w	r7, r0, lr, lsl #2
 80067a4:	460e      	mov	r6, r1
 80067a6:	f850 4b04 	ldr.w	r4, [r0], #4
 80067aa:	ea4f 2534 	mov.w	r5, r4, ror #8
 80067ae:	fa2f f585 	sxtb16	r5, r5
 80067b2:	fad5 f503 	ssub16	r5, r5, r3
 80067b6:	fa2f f484 	sxtb16	r4, r4
 80067ba:	fad4 f403 	ssub16	r4, r4, r3
 80067be:	42b8      	cmp	r0, r7
 80067c0:	6034      	str	r4, [r6, #0]
 80067c2:	6075      	str	r5, [r6, #4]
 80067c4:	f106 0608 	add.w	r6, r6, #8
 80067c8:	d1ed      	bne.n	80067a6 <st_int8_reordered_no_shift_zero+0x12>
 80067ca:	eb01 01ce 	add.w	r1, r1, lr, lsl #3
 80067ce:	f012 0203 	ands.w	r2, r2, #3
 80067d2:	d013      	beq.n	80067fc <st_int8_reordered_no_shift_zero+0x68>
 80067d4:	f997 0000 	ldrsb.w	r0, [r7]
 80067d8:	fa4f f38c 	sxtb.w	r3, ip
 80067dc:	2a01      	cmp	r2, #1
 80067de:	eba0 0003 	sub.w	r0, r0, r3
 80067e2:	8008      	strh	r0, [r1, #0]
 80067e4:	d00a      	beq.n	80067fc <st_int8_reordered_no_shift_zero+0x68>
 80067e6:	f997 0001 	ldrsb.w	r0, [r7, #1]
 80067ea:	2a02      	cmp	r2, #2
 80067ec:	eba0 0003 	sub.w	r0, r0, r3
 80067f0:	8048      	strh	r0, [r1, #2]
 80067f2:	d003      	beq.n	80067fc <st_int8_reordered_no_shift_zero+0x68>
 80067f4:	f997 2002 	ldrsb.w	r2, [r7, #2]
 80067f8:	1ad3      	subs	r3, r2, r3
 80067fa:	808b      	strh	r3, [r1, #4]
 80067fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80067fe:	4607      	mov	r7, r0
 8006800:	e7e5      	b.n	80067ce <st_int8_reordered_no_shift_zero+0x3a>
 8006802:	bf00      	nop

08006804 <ai_array_to_buffer_fmt>:
 8006804:	f3c0 4343 	ubfx	r3, r0, #17, #4
 8006808:	2b02      	cmp	r3, #2
 800680a:	d01f      	beq.n	800684c <ai_array_to_buffer_fmt+0x48>
 800680c:	f020 437e 	bic.w	r3, r0, #4261412864	; 0xfe000000
 8006810:	4a1b      	ldr	r2, [pc, #108]	; (8006880 <ai_array_to_buffer_fmt+0x7c>)
 8006812:	4293      	cmp	r3, r2
 8006814:	d00a      	beq.n	800682c <ai_array_to_buffer_fmt+0x28>
 8006816:	dc0d      	bgt.n	8006834 <ai_array_to_buffer_fmt+0x30>
 8006818:	4a1a      	ldr	r2, [pc, #104]	; (8006884 <ai_array_to_buffer_fmt+0x80>)
 800681a:	4293      	cmp	r3, r2
 800681c:	d006      	beq.n	800682c <ai_array_to_buffer_fmt+0x28>
 800681e:	dd1d      	ble.n	800685c <ai_array_to_buffer_fmt+0x58>
 8006820:	4a19      	ldr	r2, [pc, #100]	; (8006888 <ai_array_to_buffer_fmt+0x84>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d002      	beq.n	800682c <ai_array_to_buffer_fmt+0x28>
 8006826:	320f      	adds	r2, #15
 8006828:	4293      	cmp	r3, r2
 800682a:	d10d      	bne.n	8006848 <ai_array_to_buffer_fmt+0x44>
 800682c:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8006830:	4318      	orrs	r0, r3
 8006832:	4770      	bx	lr
 8006834:	4a15      	ldr	r2, [pc, #84]	; (800688c <ai_array_to_buffer_fmt+0x88>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d0f8      	beq.n	800682c <ai_array_to_buffer_fmt+0x28>
 800683a:	dd18      	ble.n	800686e <ai_array_to_buffer_fmt+0x6a>
 800683c:	4a14      	ldr	r2, [pc, #80]	; (8006890 <ai_array_to_buffer_fmt+0x8c>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d0f4      	beq.n	800682c <ai_array_to_buffer_fmt+0x28>
 8006842:	4a14      	ldr	r2, [pc, #80]	; (8006894 <ai_array_to_buffer_fmt+0x90>)
 8006844:	4293      	cmp	r3, r2
 8006846:	d0f1      	beq.n	800682c <ai_array_to_buffer_fmt+0x28>
 8006848:	2340      	movs	r3, #64	; 0x40
 800684a:	e7ef      	b.n	800682c <ai_array_to_buffer_fmt+0x28>
 800684c:	4b12      	ldr	r3, [pc, #72]	; (8006898 <ai_array_to_buffer_fmt+0x94>)
 800684e:	4003      	ands	r3, r0
 8006850:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8006854:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006858:	4318      	orrs	r0, r3
 800685a:	4770      	bx	lr
 800685c:	f2a2 4207 	subw	r2, r2, #1031	; 0x407
 8006860:	4293      	cmp	r3, r2
 8006862:	d0e3      	beq.n	800682c <ai_array_to_buffer_fmt+0x28>
 8006864:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006868:	4293      	cmp	r3, r2
 800686a:	d0df      	beq.n	800682c <ai_array_to_buffer_fmt+0x28>
 800686c:	e7ec      	b.n	8006848 <ai_array_to_buffer_fmt+0x44>
 800686e:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 8006872:	4293      	cmp	r3, r2
 8006874:	d0da      	beq.n	800682c <ai_array_to_buffer_fmt+0x28>
 8006876:	3207      	adds	r2, #7
 8006878:	4293      	cmp	r3, r2
 800687a:	d0d7      	beq.n	800682c <ai_array_to_buffer_fmt+0x28>
 800687c:	e7e4      	b.n	8006848 <ai_array_to_buffer_fmt+0x44>
 800687e:	bf00      	nop
 8006880:	00840040 	.word	0x00840040
 8006884:	00040447 	.word	0x00040447
 8006888:	00040840 	.word	0x00040840
 800688c:	00840840 	.word	0x00840840
 8006890:	0084084f 	.word	0x0084084f
 8006894:	01821040 	.word	0x01821040
 8006898:	00803fff 	.word	0x00803fff

0800689c <ai_array_get_byte_size>:
 800689c:	b1e1      	cbz	r1, 80068d8 <ai_array_get_byte_size+0x3c>
 800689e:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 80068a2:	f3c0 5241 	ubfx	r2, r0, #21, #2
 80068a6:	b410      	push	{r4}
 80068a8:	f3c0 3482 	ubfx	r4, r0, #14, #3
 80068ac:	f3c0 4043 	ubfx	r0, r0, #17, #4
 80068b0:	4423      	add	r3, r4
 80068b2:	2804      	cmp	r0, #4
 80068b4:	fb01 f103 	mul.w	r1, r1, r3
 80068b8:	f101 0107 	add.w	r1, r1, #7
 80068bc:	f021 0107 	bic.w	r1, r1, #7
 80068c0:	fa21 f102 	lsr.w	r1, r1, r2
 80068c4:	d00a      	beq.n	80068dc <ai_array_get_byte_size+0x40>
 80068c6:	2808      	cmp	r0, #8
 80068c8:	d101      	bne.n	80068ce <ai_array_get_byte_size+0x32>
 80068ca:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 80068ce:	3107      	adds	r1, #7
 80068d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80068d4:	08c8      	lsrs	r0, r1, #3
 80068d6:	4770      	bx	lr
 80068d8:	4608      	mov	r0, r1
 80068da:	4770      	bx	lr
 80068dc:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 80068e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80068e4:	3107      	adds	r1, #7
 80068e6:	08c8      	lsrs	r0, r1, #3
 80068e8:	4770      	bx	lr
 80068ea:	bf00      	nop

080068ec <__errno>:
 80068ec:	4b01      	ldr	r3, [pc, #4]	; (80068f4 <__errno+0x8>)
 80068ee:	6818      	ldr	r0, [r3, #0]
 80068f0:	4770      	bx	lr
 80068f2:	bf00      	nop
 80068f4:	2000073c 	.word	0x2000073c

080068f8 <__libc_init_array>:
 80068f8:	b570      	push	{r4, r5, r6, lr}
 80068fa:	4d0d      	ldr	r5, [pc, #52]	; (8006930 <__libc_init_array+0x38>)
 80068fc:	4c0d      	ldr	r4, [pc, #52]	; (8006934 <__libc_init_array+0x3c>)
 80068fe:	1b64      	subs	r4, r4, r5
 8006900:	10a4      	asrs	r4, r4, #2
 8006902:	2600      	movs	r6, #0
 8006904:	42a6      	cmp	r6, r4
 8006906:	d109      	bne.n	800691c <__libc_init_array+0x24>
 8006908:	4d0b      	ldr	r5, [pc, #44]	; (8006938 <__libc_init_array+0x40>)
 800690a:	4c0c      	ldr	r4, [pc, #48]	; (800693c <__libc_init_array+0x44>)
 800690c:	f003 fb14 	bl	8009f38 <_init>
 8006910:	1b64      	subs	r4, r4, r5
 8006912:	10a4      	asrs	r4, r4, #2
 8006914:	2600      	movs	r6, #0
 8006916:	42a6      	cmp	r6, r4
 8006918:	d105      	bne.n	8006926 <__libc_init_array+0x2e>
 800691a:	bd70      	pop	{r4, r5, r6, pc}
 800691c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006920:	4798      	blx	r3
 8006922:	3601      	adds	r6, #1
 8006924:	e7ee      	b.n	8006904 <__libc_init_array+0xc>
 8006926:	f855 3b04 	ldr.w	r3, [r5], #4
 800692a:	4798      	blx	r3
 800692c:	3601      	adds	r6, #1
 800692e:	e7f2      	b.n	8006916 <__libc_init_array+0x1e>
 8006930:	0800a87c 	.word	0x0800a87c
 8006934:	0800a87c 	.word	0x0800a87c
 8006938:	0800a87c 	.word	0x0800a87c
 800693c:	0800a880 	.word	0x0800a880

08006940 <malloc>:
 8006940:	4b02      	ldr	r3, [pc, #8]	; (800694c <malloc+0xc>)
 8006942:	4601      	mov	r1, r0
 8006944:	6818      	ldr	r0, [r3, #0]
 8006946:	f000 b885 	b.w	8006a54 <_malloc_r>
 800694a:	bf00      	nop
 800694c:	2000073c 	.word	0x2000073c

08006950 <memcpy>:
 8006950:	440a      	add	r2, r1
 8006952:	4291      	cmp	r1, r2
 8006954:	f100 33ff 	add.w	r3, r0, #4294967295
 8006958:	d100      	bne.n	800695c <memcpy+0xc>
 800695a:	4770      	bx	lr
 800695c:	b510      	push	{r4, lr}
 800695e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006962:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006966:	4291      	cmp	r1, r2
 8006968:	d1f9      	bne.n	800695e <memcpy+0xe>
 800696a:	bd10      	pop	{r4, pc}

0800696c <memset>:
 800696c:	4402      	add	r2, r0
 800696e:	4603      	mov	r3, r0
 8006970:	4293      	cmp	r3, r2
 8006972:	d100      	bne.n	8006976 <memset+0xa>
 8006974:	4770      	bx	lr
 8006976:	f803 1b01 	strb.w	r1, [r3], #1
 800697a:	e7f9      	b.n	8006970 <memset+0x4>

0800697c <_free_r>:
 800697c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800697e:	2900      	cmp	r1, #0
 8006980:	d044      	beq.n	8006a0c <_free_r+0x90>
 8006982:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006986:	9001      	str	r0, [sp, #4]
 8006988:	2b00      	cmp	r3, #0
 800698a:	f1a1 0404 	sub.w	r4, r1, #4
 800698e:	bfb8      	it	lt
 8006990:	18e4      	addlt	r4, r4, r3
 8006992:	f001 fbeb 	bl	800816c <__malloc_lock>
 8006996:	4a1e      	ldr	r2, [pc, #120]	; (8006a10 <_free_r+0x94>)
 8006998:	9801      	ldr	r0, [sp, #4]
 800699a:	6813      	ldr	r3, [r2, #0]
 800699c:	b933      	cbnz	r3, 80069ac <_free_r+0x30>
 800699e:	6063      	str	r3, [r4, #4]
 80069a0:	6014      	str	r4, [r2, #0]
 80069a2:	b003      	add	sp, #12
 80069a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80069a8:	f001 bbe6 	b.w	8008178 <__malloc_unlock>
 80069ac:	42a3      	cmp	r3, r4
 80069ae:	d908      	bls.n	80069c2 <_free_r+0x46>
 80069b0:	6825      	ldr	r5, [r4, #0]
 80069b2:	1961      	adds	r1, r4, r5
 80069b4:	428b      	cmp	r3, r1
 80069b6:	bf01      	itttt	eq
 80069b8:	6819      	ldreq	r1, [r3, #0]
 80069ba:	685b      	ldreq	r3, [r3, #4]
 80069bc:	1949      	addeq	r1, r1, r5
 80069be:	6021      	streq	r1, [r4, #0]
 80069c0:	e7ed      	b.n	800699e <_free_r+0x22>
 80069c2:	461a      	mov	r2, r3
 80069c4:	685b      	ldr	r3, [r3, #4]
 80069c6:	b10b      	cbz	r3, 80069cc <_free_r+0x50>
 80069c8:	42a3      	cmp	r3, r4
 80069ca:	d9fa      	bls.n	80069c2 <_free_r+0x46>
 80069cc:	6811      	ldr	r1, [r2, #0]
 80069ce:	1855      	adds	r5, r2, r1
 80069d0:	42a5      	cmp	r5, r4
 80069d2:	d10b      	bne.n	80069ec <_free_r+0x70>
 80069d4:	6824      	ldr	r4, [r4, #0]
 80069d6:	4421      	add	r1, r4
 80069d8:	1854      	adds	r4, r2, r1
 80069da:	42a3      	cmp	r3, r4
 80069dc:	6011      	str	r1, [r2, #0]
 80069de:	d1e0      	bne.n	80069a2 <_free_r+0x26>
 80069e0:	681c      	ldr	r4, [r3, #0]
 80069e2:	685b      	ldr	r3, [r3, #4]
 80069e4:	6053      	str	r3, [r2, #4]
 80069e6:	4421      	add	r1, r4
 80069e8:	6011      	str	r1, [r2, #0]
 80069ea:	e7da      	b.n	80069a2 <_free_r+0x26>
 80069ec:	d902      	bls.n	80069f4 <_free_r+0x78>
 80069ee:	230c      	movs	r3, #12
 80069f0:	6003      	str	r3, [r0, #0]
 80069f2:	e7d6      	b.n	80069a2 <_free_r+0x26>
 80069f4:	6825      	ldr	r5, [r4, #0]
 80069f6:	1961      	adds	r1, r4, r5
 80069f8:	428b      	cmp	r3, r1
 80069fa:	bf04      	itt	eq
 80069fc:	6819      	ldreq	r1, [r3, #0]
 80069fe:	685b      	ldreq	r3, [r3, #4]
 8006a00:	6063      	str	r3, [r4, #4]
 8006a02:	bf04      	itt	eq
 8006a04:	1949      	addeq	r1, r1, r5
 8006a06:	6021      	streq	r1, [r4, #0]
 8006a08:	6054      	str	r4, [r2, #4]
 8006a0a:	e7ca      	b.n	80069a2 <_free_r+0x26>
 8006a0c:	b003      	add	sp, #12
 8006a0e:	bd30      	pop	{r4, r5, pc}
 8006a10:	20000ac8 	.word	0x20000ac8

08006a14 <sbrk_aligned>:
 8006a14:	b570      	push	{r4, r5, r6, lr}
 8006a16:	4e0e      	ldr	r6, [pc, #56]	; (8006a50 <sbrk_aligned+0x3c>)
 8006a18:	460c      	mov	r4, r1
 8006a1a:	6831      	ldr	r1, [r6, #0]
 8006a1c:	4605      	mov	r5, r0
 8006a1e:	b911      	cbnz	r1, 8006a26 <sbrk_aligned+0x12>
 8006a20:	f000 fcf6 	bl	8007410 <_sbrk_r>
 8006a24:	6030      	str	r0, [r6, #0]
 8006a26:	4621      	mov	r1, r4
 8006a28:	4628      	mov	r0, r5
 8006a2a:	f000 fcf1 	bl	8007410 <_sbrk_r>
 8006a2e:	1c43      	adds	r3, r0, #1
 8006a30:	d00a      	beq.n	8006a48 <sbrk_aligned+0x34>
 8006a32:	1cc4      	adds	r4, r0, #3
 8006a34:	f024 0403 	bic.w	r4, r4, #3
 8006a38:	42a0      	cmp	r0, r4
 8006a3a:	d007      	beq.n	8006a4c <sbrk_aligned+0x38>
 8006a3c:	1a21      	subs	r1, r4, r0
 8006a3e:	4628      	mov	r0, r5
 8006a40:	f000 fce6 	bl	8007410 <_sbrk_r>
 8006a44:	3001      	adds	r0, #1
 8006a46:	d101      	bne.n	8006a4c <sbrk_aligned+0x38>
 8006a48:	f04f 34ff 	mov.w	r4, #4294967295
 8006a4c:	4620      	mov	r0, r4
 8006a4e:	bd70      	pop	{r4, r5, r6, pc}
 8006a50:	20000acc 	.word	0x20000acc

08006a54 <_malloc_r>:
 8006a54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a58:	1ccd      	adds	r5, r1, #3
 8006a5a:	f025 0503 	bic.w	r5, r5, #3
 8006a5e:	3508      	adds	r5, #8
 8006a60:	2d0c      	cmp	r5, #12
 8006a62:	bf38      	it	cc
 8006a64:	250c      	movcc	r5, #12
 8006a66:	2d00      	cmp	r5, #0
 8006a68:	4607      	mov	r7, r0
 8006a6a:	db01      	blt.n	8006a70 <_malloc_r+0x1c>
 8006a6c:	42a9      	cmp	r1, r5
 8006a6e:	d905      	bls.n	8006a7c <_malloc_r+0x28>
 8006a70:	230c      	movs	r3, #12
 8006a72:	603b      	str	r3, [r7, #0]
 8006a74:	2600      	movs	r6, #0
 8006a76:	4630      	mov	r0, r6
 8006a78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a7c:	4e2e      	ldr	r6, [pc, #184]	; (8006b38 <_malloc_r+0xe4>)
 8006a7e:	f001 fb75 	bl	800816c <__malloc_lock>
 8006a82:	6833      	ldr	r3, [r6, #0]
 8006a84:	461c      	mov	r4, r3
 8006a86:	bb34      	cbnz	r4, 8006ad6 <_malloc_r+0x82>
 8006a88:	4629      	mov	r1, r5
 8006a8a:	4638      	mov	r0, r7
 8006a8c:	f7ff ffc2 	bl	8006a14 <sbrk_aligned>
 8006a90:	1c43      	adds	r3, r0, #1
 8006a92:	4604      	mov	r4, r0
 8006a94:	d14d      	bne.n	8006b32 <_malloc_r+0xde>
 8006a96:	6834      	ldr	r4, [r6, #0]
 8006a98:	4626      	mov	r6, r4
 8006a9a:	2e00      	cmp	r6, #0
 8006a9c:	d140      	bne.n	8006b20 <_malloc_r+0xcc>
 8006a9e:	6823      	ldr	r3, [r4, #0]
 8006aa0:	4631      	mov	r1, r6
 8006aa2:	4638      	mov	r0, r7
 8006aa4:	eb04 0803 	add.w	r8, r4, r3
 8006aa8:	f000 fcb2 	bl	8007410 <_sbrk_r>
 8006aac:	4580      	cmp	r8, r0
 8006aae:	d13a      	bne.n	8006b26 <_malloc_r+0xd2>
 8006ab0:	6821      	ldr	r1, [r4, #0]
 8006ab2:	3503      	adds	r5, #3
 8006ab4:	1a6d      	subs	r5, r5, r1
 8006ab6:	f025 0503 	bic.w	r5, r5, #3
 8006aba:	3508      	adds	r5, #8
 8006abc:	2d0c      	cmp	r5, #12
 8006abe:	bf38      	it	cc
 8006ac0:	250c      	movcc	r5, #12
 8006ac2:	4629      	mov	r1, r5
 8006ac4:	4638      	mov	r0, r7
 8006ac6:	f7ff ffa5 	bl	8006a14 <sbrk_aligned>
 8006aca:	3001      	adds	r0, #1
 8006acc:	d02b      	beq.n	8006b26 <_malloc_r+0xd2>
 8006ace:	6823      	ldr	r3, [r4, #0]
 8006ad0:	442b      	add	r3, r5
 8006ad2:	6023      	str	r3, [r4, #0]
 8006ad4:	e00e      	b.n	8006af4 <_malloc_r+0xa0>
 8006ad6:	6822      	ldr	r2, [r4, #0]
 8006ad8:	1b52      	subs	r2, r2, r5
 8006ada:	d41e      	bmi.n	8006b1a <_malloc_r+0xc6>
 8006adc:	2a0b      	cmp	r2, #11
 8006ade:	d916      	bls.n	8006b0e <_malloc_r+0xba>
 8006ae0:	1961      	adds	r1, r4, r5
 8006ae2:	42a3      	cmp	r3, r4
 8006ae4:	6025      	str	r5, [r4, #0]
 8006ae6:	bf18      	it	ne
 8006ae8:	6059      	strne	r1, [r3, #4]
 8006aea:	6863      	ldr	r3, [r4, #4]
 8006aec:	bf08      	it	eq
 8006aee:	6031      	streq	r1, [r6, #0]
 8006af0:	5162      	str	r2, [r4, r5]
 8006af2:	604b      	str	r3, [r1, #4]
 8006af4:	4638      	mov	r0, r7
 8006af6:	f104 060b 	add.w	r6, r4, #11
 8006afa:	f001 fb3d 	bl	8008178 <__malloc_unlock>
 8006afe:	f026 0607 	bic.w	r6, r6, #7
 8006b02:	1d23      	adds	r3, r4, #4
 8006b04:	1af2      	subs	r2, r6, r3
 8006b06:	d0b6      	beq.n	8006a76 <_malloc_r+0x22>
 8006b08:	1b9b      	subs	r3, r3, r6
 8006b0a:	50a3      	str	r3, [r4, r2]
 8006b0c:	e7b3      	b.n	8006a76 <_malloc_r+0x22>
 8006b0e:	6862      	ldr	r2, [r4, #4]
 8006b10:	42a3      	cmp	r3, r4
 8006b12:	bf0c      	ite	eq
 8006b14:	6032      	streq	r2, [r6, #0]
 8006b16:	605a      	strne	r2, [r3, #4]
 8006b18:	e7ec      	b.n	8006af4 <_malloc_r+0xa0>
 8006b1a:	4623      	mov	r3, r4
 8006b1c:	6864      	ldr	r4, [r4, #4]
 8006b1e:	e7b2      	b.n	8006a86 <_malloc_r+0x32>
 8006b20:	4634      	mov	r4, r6
 8006b22:	6876      	ldr	r6, [r6, #4]
 8006b24:	e7b9      	b.n	8006a9a <_malloc_r+0x46>
 8006b26:	230c      	movs	r3, #12
 8006b28:	603b      	str	r3, [r7, #0]
 8006b2a:	4638      	mov	r0, r7
 8006b2c:	f001 fb24 	bl	8008178 <__malloc_unlock>
 8006b30:	e7a1      	b.n	8006a76 <_malloc_r+0x22>
 8006b32:	6025      	str	r5, [r4, #0]
 8006b34:	e7de      	b.n	8006af4 <_malloc_r+0xa0>
 8006b36:	bf00      	nop
 8006b38:	20000ac8 	.word	0x20000ac8

08006b3c <__cvt>:
 8006b3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006b40:	ec55 4b10 	vmov	r4, r5, d0
 8006b44:	2d00      	cmp	r5, #0
 8006b46:	460e      	mov	r6, r1
 8006b48:	4619      	mov	r1, r3
 8006b4a:	462b      	mov	r3, r5
 8006b4c:	bfbb      	ittet	lt
 8006b4e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006b52:	461d      	movlt	r5, r3
 8006b54:	2300      	movge	r3, #0
 8006b56:	232d      	movlt	r3, #45	; 0x2d
 8006b58:	700b      	strb	r3, [r1, #0]
 8006b5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006b5c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006b60:	4691      	mov	r9, r2
 8006b62:	f023 0820 	bic.w	r8, r3, #32
 8006b66:	bfbc      	itt	lt
 8006b68:	4622      	movlt	r2, r4
 8006b6a:	4614      	movlt	r4, r2
 8006b6c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006b70:	d005      	beq.n	8006b7e <__cvt+0x42>
 8006b72:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006b76:	d100      	bne.n	8006b7a <__cvt+0x3e>
 8006b78:	3601      	adds	r6, #1
 8006b7a:	2102      	movs	r1, #2
 8006b7c:	e000      	b.n	8006b80 <__cvt+0x44>
 8006b7e:	2103      	movs	r1, #3
 8006b80:	ab03      	add	r3, sp, #12
 8006b82:	9301      	str	r3, [sp, #4]
 8006b84:	ab02      	add	r3, sp, #8
 8006b86:	9300      	str	r3, [sp, #0]
 8006b88:	ec45 4b10 	vmov	d0, r4, r5
 8006b8c:	4653      	mov	r3, sl
 8006b8e:	4632      	mov	r2, r6
 8006b90:	f000 fcfa 	bl	8007588 <_dtoa_r>
 8006b94:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006b98:	4607      	mov	r7, r0
 8006b9a:	d102      	bne.n	8006ba2 <__cvt+0x66>
 8006b9c:	f019 0f01 	tst.w	r9, #1
 8006ba0:	d022      	beq.n	8006be8 <__cvt+0xac>
 8006ba2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006ba6:	eb07 0906 	add.w	r9, r7, r6
 8006baa:	d110      	bne.n	8006bce <__cvt+0x92>
 8006bac:	783b      	ldrb	r3, [r7, #0]
 8006bae:	2b30      	cmp	r3, #48	; 0x30
 8006bb0:	d10a      	bne.n	8006bc8 <__cvt+0x8c>
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	4620      	mov	r0, r4
 8006bb8:	4629      	mov	r1, r5
 8006bba:	f7f9 ffa5 	bl	8000b08 <__aeabi_dcmpeq>
 8006bbe:	b918      	cbnz	r0, 8006bc8 <__cvt+0x8c>
 8006bc0:	f1c6 0601 	rsb	r6, r6, #1
 8006bc4:	f8ca 6000 	str.w	r6, [sl]
 8006bc8:	f8da 3000 	ldr.w	r3, [sl]
 8006bcc:	4499      	add	r9, r3
 8006bce:	2200      	movs	r2, #0
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	4620      	mov	r0, r4
 8006bd4:	4629      	mov	r1, r5
 8006bd6:	f7f9 ff97 	bl	8000b08 <__aeabi_dcmpeq>
 8006bda:	b108      	cbz	r0, 8006be0 <__cvt+0xa4>
 8006bdc:	f8cd 900c 	str.w	r9, [sp, #12]
 8006be0:	2230      	movs	r2, #48	; 0x30
 8006be2:	9b03      	ldr	r3, [sp, #12]
 8006be4:	454b      	cmp	r3, r9
 8006be6:	d307      	bcc.n	8006bf8 <__cvt+0xbc>
 8006be8:	9b03      	ldr	r3, [sp, #12]
 8006bea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006bec:	1bdb      	subs	r3, r3, r7
 8006bee:	4638      	mov	r0, r7
 8006bf0:	6013      	str	r3, [r2, #0]
 8006bf2:	b004      	add	sp, #16
 8006bf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bf8:	1c59      	adds	r1, r3, #1
 8006bfa:	9103      	str	r1, [sp, #12]
 8006bfc:	701a      	strb	r2, [r3, #0]
 8006bfe:	e7f0      	b.n	8006be2 <__cvt+0xa6>

08006c00 <__exponent>:
 8006c00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006c02:	4603      	mov	r3, r0
 8006c04:	2900      	cmp	r1, #0
 8006c06:	bfb8      	it	lt
 8006c08:	4249      	neglt	r1, r1
 8006c0a:	f803 2b02 	strb.w	r2, [r3], #2
 8006c0e:	bfb4      	ite	lt
 8006c10:	222d      	movlt	r2, #45	; 0x2d
 8006c12:	222b      	movge	r2, #43	; 0x2b
 8006c14:	2909      	cmp	r1, #9
 8006c16:	7042      	strb	r2, [r0, #1]
 8006c18:	dd2a      	ble.n	8006c70 <__exponent+0x70>
 8006c1a:	f10d 0407 	add.w	r4, sp, #7
 8006c1e:	46a4      	mov	ip, r4
 8006c20:	270a      	movs	r7, #10
 8006c22:	46a6      	mov	lr, r4
 8006c24:	460a      	mov	r2, r1
 8006c26:	fb91 f6f7 	sdiv	r6, r1, r7
 8006c2a:	fb07 1516 	mls	r5, r7, r6, r1
 8006c2e:	3530      	adds	r5, #48	; 0x30
 8006c30:	2a63      	cmp	r2, #99	; 0x63
 8006c32:	f104 34ff 	add.w	r4, r4, #4294967295
 8006c36:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006c3a:	4631      	mov	r1, r6
 8006c3c:	dcf1      	bgt.n	8006c22 <__exponent+0x22>
 8006c3e:	3130      	adds	r1, #48	; 0x30
 8006c40:	f1ae 0502 	sub.w	r5, lr, #2
 8006c44:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006c48:	1c44      	adds	r4, r0, #1
 8006c4a:	4629      	mov	r1, r5
 8006c4c:	4561      	cmp	r1, ip
 8006c4e:	d30a      	bcc.n	8006c66 <__exponent+0x66>
 8006c50:	f10d 0209 	add.w	r2, sp, #9
 8006c54:	eba2 020e 	sub.w	r2, r2, lr
 8006c58:	4565      	cmp	r5, ip
 8006c5a:	bf88      	it	hi
 8006c5c:	2200      	movhi	r2, #0
 8006c5e:	4413      	add	r3, r2
 8006c60:	1a18      	subs	r0, r3, r0
 8006c62:	b003      	add	sp, #12
 8006c64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c66:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006c6a:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006c6e:	e7ed      	b.n	8006c4c <__exponent+0x4c>
 8006c70:	2330      	movs	r3, #48	; 0x30
 8006c72:	3130      	adds	r1, #48	; 0x30
 8006c74:	7083      	strb	r3, [r0, #2]
 8006c76:	70c1      	strb	r1, [r0, #3]
 8006c78:	1d03      	adds	r3, r0, #4
 8006c7a:	e7f1      	b.n	8006c60 <__exponent+0x60>

08006c7c <_printf_float>:
 8006c7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c80:	ed2d 8b02 	vpush	{d8}
 8006c84:	b08d      	sub	sp, #52	; 0x34
 8006c86:	460c      	mov	r4, r1
 8006c88:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006c8c:	4616      	mov	r6, r2
 8006c8e:	461f      	mov	r7, r3
 8006c90:	4605      	mov	r5, r0
 8006c92:	f001 fa67 	bl	8008164 <_localeconv_r>
 8006c96:	f8d0 a000 	ldr.w	sl, [r0]
 8006c9a:	4650      	mov	r0, sl
 8006c9c:	f7f9 fab8 	bl	8000210 <strlen>
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	930a      	str	r3, [sp, #40]	; 0x28
 8006ca4:	6823      	ldr	r3, [r4, #0]
 8006ca6:	9305      	str	r3, [sp, #20]
 8006ca8:	f8d8 3000 	ldr.w	r3, [r8]
 8006cac:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006cb0:	3307      	adds	r3, #7
 8006cb2:	f023 0307 	bic.w	r3, r3, #7
 8006cb6:	f103 0208 	add.w	r2, r3, #8
 8006cba:	f8c8 2000 	str.w	r2, [r8]
 8006cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cc2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006cc6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006cca:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006cce:	9307      	str	r3, [sp, #28]
 8006cd0:	f8cd 8018 	str.w	r8, [sp, #24]
 8006cd4:	ee08 0a10 	vmov	s16, r0
 8006cd8:	4b9f      	ldr	r3, [pc, #636]	; (8006f58 <_printf_float+0x2dc>)
 8006cda:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006cde:	f04f 32ff 	mov.w	r2, #4294967295
 8006ce2:	f7f9 ff43 	bl	8000b6c <__aeabi_dcmpun>
 8006ce6:	bb88      	cbnz	r0, 8006d4c <_printf_float+0xd0>
 8006ce8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006cec:	4b9a      	ldr	r3, [pc, #616]	; (8006f58 <_printf_float+0x2dc>)
 8006cee:	f04f 32ff 	mov.w	r2, #4294967295
 8006cf2:	f7f9 ff1d 	bl	8000b30 <__aeabi_dcmple>
 8006cf6:	bb48      	cbnz	r0, 8006d4c <_printf_float+0xd0>
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	4640      	mov	r0, r8
 8006cfe:	4649      	mov	r1, r9
 8006d00:	f7f9 ff0c 	bl	8000b1c <__aeabi_dcmplt>
 8006d04:	b110      	cbz	r0, 8006d0c <_printf_float+0x90>
 8006d06:	232d      	movs	r3, #45	; 0x2d
 8006d08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d0c:	4b93      	ldr	r3, [pc, #588]	; (8006f5c <_printf_float+0x2e0>)
 8006d0e:	4894      	ldr	r0, [pc, #592]	; (8006f60 <_printf_float+0x2e4>)
 8006d10:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006d14:	bf94      	ite	ls
 8006d16:	4698      	movls	r8, r3
 8006d18:	4680      	movhi	r8, r0
 8006d1a:	2303      	movs	r3, #3
 8006d1c:	6123      	str	r3, [r4, #16]
 8006d1e:	9b05      	ldr	r3, [sp, #20]
 8006d20:	f023 0204 	bic.w	r2, r3, #4
 8006d24:	6022      	str	r2, [r4, #0]
 8006d26:	f04f 0900 	mov.w	r9, #0
 8006d2a:	9700      	str	r7, [sp, #0]
 8006d2c:	4633      	mov	r3, r6
 8006d2e:	aa0b      	add	r2, sp, #44	; 0x2c
 8006d30:	4621      	mov	r1, r4
 8006d32:	4628      	mov	r0, r5
 8006d34:	f000 f9d8 	bl	80070e8 <_printf_common>
 8006d38:	3001      	adds	r0, #1
 8006d3a:	f040 8090 	bne.w	8006e5e <_printf_float+0x1e2>
 8006d3e:	f04f 30ff 	mov.w	r0, #4294967295
 8006d42:	b00d      	add	sp, #52	; 0x34
 8006d44:	ecbd 8b02 	vpop	{d8}
 8006d48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d4c:	4642      	mov	r2, r8
 8006d4e:	464b      	mov	r3, r9
 8006d50:	4640      	mov	r0, r8
 8006d52:	4649      	mov	r1, r9
 8006d54:	f7f9 ff0a 	bl	8000b6c <__aeabi_dcmpun>
 8006d58:	b140      	cbz	r0, 8006d6c <_printf_float+0xf0>
 8006d5a:	464b      	mov	r3, r9
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	bfbc      	itt	lt
 8006d60:	232d      	movlt	r3, #45	; 0x2d
 8006d62:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006d66:	487f      	ldr	r0, [pc, #508]	; (8006f64 <_printf_float+0x2e8>)
 8006d68:	4b7f      	ldr	r3, [pc, #508]	; (8006f68 <_printf_float+0x2ec>)
 8006d6a:	e7d1      	b.n	8006d10 <_printf_float+0x94>
 8006d6c:	6863      	ldr	r3, [r4, #4]
 8006d6e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006d72:	9206      	str	r2, [sp, #24]
 8006d74:	1c5a      	adds	r2, r3, #1
 8006d76:	d13f      	bne.n	8006df8 <_printf_float+0x17c>
 8006d78:	2306      	movs	r3, #6
 8006d7a:	6063      	str	r3, [r4, #4]
 8006d7c:	9b05      	ldr	r3, [sp, #20]
 8006d7e:	6861      	ldr	r1, [r4, #4]
 8006d80:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006d84:	2300      	movs	r3, #0
 8006d86:	9303      	str	r3, [sp, #12]
 8006d88:	ab0a      	add	r3, sp, #40	; 0x28
 8006d8a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006d8e:	ab09      	add	r3, sp, #36	; 0x24
 8006d90:	ec49 8b10 	vmov	d0, r8, r9
 8006d94:	9300      	str	r3, [sp, #0]
 8006d96:	6022      	str	r2, [r4, #0]
 8006d98:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006d9c:	4628      	mov	r0, r5
 8006d9e:	f7ff fecd 	bl	8006b3c <__cvt>
 8006da2:	9b06      	ldr	r3, [sp, #24]
 8006da4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006da6:	2b47      	cmp	r3, #71	; 0x47
 8006da8:	4680      	mov	r8, r0
 8006daa:	d108      	bne.n	8006dbe <_printf_float+0x142>
 8006dac:	1cc8      	adds	r0, r1, #3
 8006dae:	db02      	blt.n	8006db6 <_printf_float+0x13a>
 8006db0:	6863      	ldr	r3, [r4, #4]
 8006db2:	4299      	cmp	r1, r3
 8006db4:	dd41      	ble.n	8006e3a <_printf_float+0x1be>
 8006db6:	f1ab 0b02 	sub.w	fp, fp, #2
 8006dba:	fa5f fb8b 	uxtb.w	fp, fp
 8006dbe:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006dc2:	d820      	bhi.n	8006e06 <_printf_float+0x18a>
 8006dc4:	3901      	subs	r1, #1
 8006dc6:	465a      	mov	r2, fp
 8006dc8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006dcc:	9109      	str	r1, [sp, #36]	; 0x24
 8006dce:	f7ff ff17 	bl	8006c00 <__exponent>
 8006dd2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006dd4:	1813      	adds	r3, r2, r0
 8006dd6:	2a01      	cmp	r2, #1
 8006dd8:	4681      	mov	r9, r0
 8006dda:	6123      	str	r3, [r4, #16]
 8006ddc:	dc02      	bgt.n	8006de4 <_printf_float+0x168>
 8006dde:	6822      	ldr	r2, [r4, #0]
 8006de0:	07d2      	lsls	r2, r2, #31
 8006de2:	d501      	bpl.n	8006de8 <_printf_float+0x16c>
 8006de4:	3301      	adds	r3, #1
 8006de6:	6123      	str	r3, [r4, #16]
 8006de8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d09c      	beq.n	8006d2a <_printf_float+0xae>
 8006df0:	232d      	movs	r3, #45	; 0x2d
 8006df2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006df6:	e798      	b.n	8006d2a <_printf_float+0xae>
 8006df8:	9a06      	ldr	r2, [sp, #24]
 8006dfa:	2a47      	cmp	r2, #71	; 0x47
 8006dfc:	d1be      	bne.n	8006d7c <_printf_float+0x100>
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d1bc      	bne.n	8006d7c <_printf_float+0x100>
 8006e02:	2301      	movs	r3, #1
 8006e04:	e7b9      	b.n	8006d7a <_printf_float+0xfe>
 8006e06:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006e0a:	d118      	bne.n	8006e3e <_printf_float+0x1c2>
 8006e0c:	2900      	cmp	r1, #0
 8006e0e:	6863      	ldr	r3, [r4, #4]
 8006e10:	dd0b      	ble.n	8006e2a <_printf_float+0x1ae>
 8006e12:	6121      	str	r1, [r4, #16]
 8006e14:	b913      	cbnz	r3, 8006e1c <_printf_float+0x1a0>
 8006e16:	6822      	ldr	r2, [r4, #0]
 8006e18:	07d0      	lsls	r0, r2, #31
 8006e1a:	d502      	bpl.n	8006e22 <_printf_float+0x1a6>
 8006e1c:	3301      	adds	r3, #1
 8006e1e:	440b      	add	r3, r1
 8006e20:	6123      	str	r3, [r4, #16]
 8006e22:	65a1      	str	r1, [r4, #88]	; 0x58
 8006e24:	f04f 0900 	mov.w	r9, #0
 8006e28:	e7de      	b.n	8006de8 <_printf_float+0x16c>
 8006e2a:	b913      	cbnz	r3, 8006e32 <_printf_float+0x1b6>
 8006e2c:	6822      	ldr	r2, [r4, #0]
 8006e2e:	07d2      	lsls	r2, r2, #31
 8006e30:	d501      	bpl.n	8006e36 <_printf_float+0x1ba>
 8006e32:	3302      	adds	r3, #2
 8006e34:	e7f4      	b.n	8006e20 <_printf_float+0x1a4>
 8006e36:	2301      	movs	r3, #1
 8006e38:	e7f2      	b.n	8006e20 <_printf_float+0x1a4>
 8006e3a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006e3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e40:	4299      	cmp	r1, r3
 8006e42:	db05      	blt.n	8006e50 <_printf_float+0x1d4>
 8006e44:	6823      	ldr	r3, [r4, #0]
 8006e46:	6121      	str	r1, [r4, #16]
 8006e48:	07d8      	lsls	r0, r3, #31
 8006e4a:	d5ea      	bpl.n	8006e22 <_printf_float+0x1a6>
 8006e4c:	1c4b      	adds	r3, r1, #1
 8006e4e:	e7e7      	b.n	8006e20 <_printf_float+0x1a4>
 8006e50:	2900      	cmp	r1, #0
 8006e52:	bfd4      	ite	le
 8006e54:	f1c1 0202 	rsble	r2, r1, #2
 8006e58:	2201      	movgt	r2, #1
 8006e5a:	4413      	add	r3, r2
 8006e5c:	e7e0      	b.n	8006e20 <_printf_float+0x1a4>
 8006e5e:	6823      	ldr	r3, [r4, #0]
 8006e60:	055a      	lsls	r2, r3, #21
 8006e62:	d407      	bmi.n	8006e74 <_printf_float+0x1f8>
 8006e64:	6923      	ldr	r3, [r4, #16]
 8006e66:	4642      	mov	r2, r8
 8006e68:	4631      	mov	r1, r6
 8006e6a:	4628      	mov	r0, r5
 8006e6c:	47b8      	blx	r7
 8006e6e:	3001      	adds	r0, #1
 8006e70:	d12c      	bne.n	8006ecc <_printf_float+0x250>
 8006e72:	e764      	b.n	8006d3e <_printf_float+0xc2>
 8006e74:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006e78:	f240 80e0 	bls.w	800703c <_printf_float+0x3c0>
 8006e7c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006e80:	2200      	movs	r2, #0
 8006e82:	2300      	movs	r3, #0
 8006e84:	f7f9 fe40 	bl	8000b08 <__aeabi_dcmpeq>
 8006e88:	2800      	cmp	r0, #0
 8006e8a:	d034      	beq.n	8006ef6 <_printf_float+0x27a>
 8006e8c:	4a37      	ldr	r2, [pc, #220]	; (8006f6c <_printf_float+0x2f0>)
 8006e8e:	2301      	movs	r3, #1
 8006e90:	4631      	mov	r1, r6
 8006e92:	4628      	mov	r0, r5
 8006e94:	47b8      	blx	r7
 8006e96:	3001      	adds	r0, #1
 8006e98:	f43f af51 	beq.w	8006d3e <_printf_float+0xc2>
 8006e9c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006ea0:	429a      	cmp	r2, r3
 8006ea2:	db02      	blt.n	8006eaa <_printf_float+0x22e>
 8006ea4:	6823      	ldr	r3, [r4, #0]
 8006ea6:	07d8      	lsls	r0, r3, #31
 8006ea8:	d510      	bpl.n	8006ecc <_printf_float+0x250>
 8006eaa:	ee18 3a10 	vmov	r3, s16
 8006eae:	4652      	mov	r2, sl
 8006eb0:	4631      	mov	r1, r6
 8006eb2:	4628      	mov	r0, r5
 8006eb4:	47b8      	blx	r7
 8006eb6:	3001      	adds	r0, #1
 8006eb8:	f43f af41 	beq.w	8006d3e <_printf_float+0xc2>
 8006ebc:	f04f 0800 	mov.w	r8, #0
 8006ec0:	f104 091a 	add.w	r9, r4, #26
 8006ec4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ec6:	3b01      	subs	r3, #1
 8006ec8:	4543      	cmp	r3, r8
 8006eca:	dc09      	bgt.n	8006ee0 <_printf_float+0x264>
 8006ecc:	6823      	ldr	r3, [r4, #0]
 8006ece:	079b      	lsls	r3, r3, #30
 8006ed0:	f100 8105 	bmi.w	80070de <_printf_float+0x462>
 8006ed4:	68e0      	ldr	r0, [r4, #12]
 8006ed6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006ed8:	4298      	cmp	r0, r3
 8006eda:	bfb8      	it	lt
 8006edc:	4618      	movlt	r0, r3
 8006ede:	e730      	b.n	8006d42 <_printf_float+0xc6>
 8006ee0:	2301      	movs	r3, #1
 8006ee2:	464a      	mov	r2, r9
 8006ee4:	4631      	mov	r1, r6
 8006ee6:	4628      	mov	r0, r5
 8006ee8:	47b8      	blx	r7
 8006eea:	3001      	adds	r0, #1
 8006eec:	f43f af27 	beq.w	8006d3e <_printf_float+0xc2>
 8006ef0:	f108 0801 	add.w	r8, r8, #1
 8006ef4:	e7e6      	b.n	8006ec4 <_printf_float+0x248>
 8006ef6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	dc39      	bgt.n	8006f70 <_printf_float+0x2f4>
 8006efc:	4a1b      	ldr	r2, [pc, #108]	; (8006f6c <_printf_float+0x2f0>)
 8006efe:	2301      	movs	r3, #1
 8006f00:	4631      	mov	r1, r6
 8006f02:	4628      	mov	r0, r5
 8006f04:	47b8      	blx	r7
 8006f06:	3001      	adds	r0, #1
 8006f08:	f43f af19 	beq.w	8006d3e <_printf_float+0xc2>
 8006f0c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006f10:	4313      	orrs	r3, r2
 8006f12:	d102      	bne.n	8006f1a <_printf_float+0x29e>
 8006f14:	6823      	ldr	r3, [r4, #0]
 8006f16:	07d9      	lsls	r1, r3, #31
 8006f18:	d5d8      	bpl.n	8006ecc <_printf_float+0x250>
 8006f1a:	ee18 3a10 	vmov	r3, s16
 8006f1e:	4652      	mov	r2, sl
 8006f20:	4631      	mov	r1, r6
 8006f22:	4628      	mov	r0, r5
 8006f24:	47b8      	blx	r7
 8006f26:	3001      	adds	r0, #1
 8006f28:	f43f af09 	beq.w	8006d3e <_printf_float+0xc2>
 8006f2c:	f04f 0900 	mov.w	r9, #0
 8006f30:	f104 0a1a 	add.w	sl, r4, #26
 8006f34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f36:	425b      	negs	r3, r3
 8006f38:	454b      	cmp	r3, r9
 8006f3a:	dc01      	bgt.n	8006f40 <_printf_float+0x2c4>
 8006f3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f3e:	e792      	b.n	8006e66 <_printf_float+0x1ea>
 8006f40:	2301      	movs	r3, #1
 8006f42:	4652      	mov	r2, sl
 8006f44:	4631      	mov	r1, r6
 8006f46:	4628      	mov	r0, r5
 8006f48:	47b8      	blx	r7
 8006f4a:	3001      	adds	r0, #1
 8006f4c:	f43f aef7 	beq.w	8006d3e <_printf_float+0xc2>
 8006f50:	f109 0901 	add.w	r9, r9, #1
 8006f54:	e7ee      	b.n	8006f34 <_printf_float+0x2b8>
 8006f56:	bf00      	nop
 8006f58:	7fefffff 	.word	0x7fefffff
 8006f5c:	0800a488 	.word	0x0800a488
 8006f60:	0800a48c 	.word	0x0800a48c
 8006f64:	0800a494 	.word	0x0800a494
 8006f68:	0800a490 	.word	0x0800a490
 8006f6c:	0800a498 	.word	0x0800a498
 8006f70:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006f72:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006f74:	429a      	cmp	r2, r3
 8006f76:	bfa8      	it	ge
 8006f78:	461a      	movge	r2, r3
 8006f7a:	2a00      	cmp	r2, #0
 8006f7c:	4691      	mov	r9, r2
 8006f7e:	dc37      	bgt.n	8006ff0 <_printf_float+0x374>
 8006f80:	f04f 0b00 	mov.w	fp, #0
 8006f84:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006f88:	f104 021a 	add.w	r2, r4, #26
 8006f8c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006f8e:	9305      	str	r3, [sp, #20]
 8006f90:	eba3 0309 	sub.w	r3, r3, r9
 8006f94:	455b      	cmp	r3, fp
 8006f96:	dc33      	bgt.n	8007000 <_printf_float+0x384>
 8006f98:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006f9c:	429a      	cmp	r2, r3
 8006f9e:	db3b      	blt.n	8007018 <_printf_float+0x39c>
 8006fa0:	6823      	ldr	r3, [r4, #0]
 8006fa2:	07da      	lsls	r2, r3, #31
 8006fa4:	d438      	bmi.n	8007018 <_printf_float+0x39c>
 8006fa6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006fa8:	9a05      	ldr	r2, [sp, #20]
 8006faa:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006fac:	1a9a      	subs	r2, r3, r2
 8006fae:	eba3 0901 	sub.w	r9, r3, r1
 8006fb2:	4591      	cmp	r9, r2
 8006fb4:	bfa8      	it	ge
 8006fb6:	4691      	movge	r9, r2
 8006fb8:	f1b9 0f00 	cmp.w	r9, #0
 8006fbc:	dc35      	bgt.n	800702a <_printf_float+0x3ae>
 8006fbe:	f04f 0800 	mov.w	r8, #0
 8006fc2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006fc6:	f104 0a1a 	add.w	sl, r4, #26
 8006fca:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006fce:	1a9b      	subs	r3, r3, r2
 8006fd0:	eba3 0309 	sub.w	r3, r3, r9
 8006fd4:	4543      	cmp	r3, r8
 8006fd6:	f77f af79 	ble.w	8006ecc <_printf_float+0x250>
 8006fda:	2301      	movs	r3, #1
 8006fdc:	4652      	mov	r2, sl
 8006fde:	4631      	mov	r1, r6
 8006fe0:	4628      	mov	r0, r5
 8006fe2:	47b8      	blx	r7
 8006fe4:	3001      	adds	r0, #1
 8006fe6:	f43f aeaa 	beq.w	8006d3e <_printf_float+0xc2>
 8006fea:	f108 0801 	add.w	r8, r8, #1
 8006fee:	e7ec      	b.n	8006fca <_printf_float+0x34e>
 8006ff0:	4613      	mov	r3, r2
 8006ff2:	4631      	mov	r1, r6
 8006ff4:	4642      	mov	r2, r8
 8006ff6:	4628      	mov	r0, r5
 8006ff8:	47b8      	blx	r7
 8006ffa:	3001      	adds	r0, #1
 8006ffc:	d1c0      	bne.n	8006f80 <_printf_float+0x304>
 8006ffe:	e69e      	b.n	8006d3e <_printf_float+0xc2>
 8007000:	2301      	movs	r3, #1
 8007002:	4631      	mov	r1, r6
 8007004:	4628      	mov	r0, r5
 8007006:	9205      	str	r2, [sp, #20]
 8007008:	47b8      	blx	r7
 800700a:	3001      	adds	r0, #1
 800700c:	f43f ae97 	beq.w	8006d3e <_printf_float+0xc2>
 8007010:	9a05      	ldr	r2, [sp, #20]
 8007012:	f10b 0b01 	add.w	fp, fp, #1
 8007016:	e7b9      	b.n	8006f8c <_printf_float+0x310>
 8007018:	ee18 3a10 	vmov	r3, s16
 800701c:	4652      	mov	r2, sl
 800701e:	4631      	mov	r1, r6
 8007020:	4628      	mov	r0, r5
 8007022:	47b8      	blx	r7
 8007024:	3001      	adds	r0, #1
 8007026:	d1be      	bne.n	8006fa6 <_printf_float+0x32a>
 8007028:	e689      	b.n	8006d3e <_printf_float+0xc2>
 800702a:	9a05      	ldr	r2, [sp, #20]
 800702c:	464b      	mov	r3, r9
 800702e:	4442      	add	r2, r8
 8007030:	4631      	mov	r1, r6
 8007032:	4628      	mov	r0, r5
 8007034:	47b8      	blx	r7
 8007036:	3001      	adds	r0, #1
 8007038:	d1c1      	bne.n	8006fbe <_printf_float+0x342>
 800703a:	e680      	b.n	8006d3e <_printf_float+0xc2>
 800703c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800703e:	2a01      	cmp	r2, #1
 8007040:	dc01      	bgt.n	8007046 <_printf_float+0x3ca>
 8007042:	07db      	lsls	r3, r3, #31
 8007044:	d538      	bpl.n	80070b8 <_printf_float+0x43c>
 8007046:	2301      	movs	r3, #1
 8007048:	4642      	mov	r2, r8
 800704a:	4631      	mov	r1, r6
 800704c:	4628      	mov	r0, r5
 800704e:	47b8      	blx	r7
 8007050:	3001      	adds	r0, #1
 8007052:	f43f ae74 	beq.w	8006d3e <_printf_float+0xc2>
 8007056:	ee18 3a10 	vmov	r3, s16
 800705a:	4652      	mov	r2, sl
 800705c:	4631      	mov	r1, r6
 800705e:	4628      	mov	r0, r5
 8007060:	47b8      	blx	r7
 8007062:	3001      	adds	r0, #1
 8007064:	f43f ae6b 	beq.w	8006d3e <_printf_float+0xc2>
 8007068:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800706c:	2200      	movs	r2, #0
 800706e:	2300      	movs	r3, #0
 8007070:	f7f9 fd4a 	bl	8000b08 <__aeabi_dcmpeq>
 8007074:	b9d8      	cbnz	r0, 80070ae <_printf_float+0x432>
 8007076:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007078:	f108 0201 	add.w	r2, r8, #1
 800707c:	3b01      	subs	r3, #1
 800707e:	4631      	mov	r1, r6
 8007080:	4628      	mov	r0, r5
 8007082:	47b8      	blx	r7
 8007084:	3001      	adds	r0, #1
 8007086:	d10e      	bne.n	80070a6 <_printf_float+0x42a>
 8007088:	e659      	b.n	8006d3e <_printf_float+0xc2>
 800708a:	2301      	movs	r3, #1
 800708c:	4652      	mov	r2, sl
 800708e:	4631      	mov	r1, r6
 8007090:	4628      	mov	r0, r5
 8007092:	47b8      	blx	r7
 8007094:	3001      	adds	r0, #1
 8007096:	f43f ae52 	beq.w	8006d3e <_printf_float+0xc2>
 800709a:	f108 0801 	add.w	r8, r8, #1
 800709e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80070a0:	3b01      	subs	r3, #1
 80070a2:	4543      	cmp	r3, r8
 80070a4:	dcf1      	bgt.n	800708a <_printf_float+0x40e>
 80070a6:	464b      	mov	r3, r9
 80070a8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80070ac:	e6dc      	b.n	8006e68 <_printf_float+0x1ec>
 80070ae:	f04f 0800 	mov.w	r8, #0
 80070b2:	f104 0a1a 	add.w	sl, r4, #26
 80070b6:	e7f2      	b.n	800709e <_printf_float+0x422>
 80070b8:	2301      	movs	r3, #1
 80070ba:	4642      	mov	r2, r8
 80070bc:	e7df      	b.n	800707e <_printf_float+0x402>
 80070be:	2301      	movs	r3, #1
 80070c0:	464a      	mov	r2, r9
 80070c2:	4631      	mov	r1, r6
 80070c4:	4628      	mov	r0, r5
 80070c6:	47b8      	blx	r7
 80070c8:	3001      	adds	r0, #1
 80070ca:	f43f ae38 	beq.w	8006d3e <_printf_float+0xc2>
 80070ce:	f108 0801 	add.w	r8, r8, #1
 80070d2:	68e3      	ldr	r3, [r4, #12]
 80070d4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80070d6:	1a5b      	subs	r3, r3, r1
 80070d8:	4543      	cmp	r3, r8
 80070da:	dcf0      	bgt.n	80070be <_printf_float+0x442>
 80070dc:	e6fa      	b.n	8006ed4 <_printf_float+0x258>
 80070de:	f04f 0800 	mov.w	r8, #0
 80070e2:	f104 0919 	add.w	r9, r4, #25
 80070e6:	e7f4      	b.n	80070d2 <_printf_float+0x456>

080070e8 <_printf_common>:
 80070e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80070ec:	4616      	mov	r6, r2
 80070ee:	4699      	mov	r9, r3
 80070f0:	688a      	ldr	r2, [r1, #8]
 80070f2:	690b      	ldr	r3, [r1, #16]
 80070f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80070f8:	4293      	cmp	r3, r2
 80070fa:	bfb8      	it	lt
 80070fc:	4613      	movlt	r3, r2
 80070fe:	6033      	str	r3, [r6, #0]
 8007100:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007104:	4607      	mov	r7, r0
 8007106:	460c      	mov	r4, r1
 8007108:	b10a      	cbz	r2, 800710e <_printf_common+0x26>
 800710a:	3301      	adds	r3, #1
 800710c:	6033      	str	r3, [r6, #0]
 800710e:	6823      	ldr	r3, [r4, #0]
 8007110:	0699      	lsls	r1, r3, #26
 8007112:	bf42      	ittt	mi
 8007114:	6833      	ldrmi	r3, [r6, #0]
 8007116:	3302      	addmi	r3, #2
 8007118:	6033      	strmi	r3, [r6, #0]
 800711a:	6825      	ldr	r5, [r4, #0]
 800711c:	f015 0506 	ands.w	r5, r5, #6
 8007120:	d106      	bne.n	8007130 <_printf_common+0x48>
 8007122:	f104 0a19 	add.w	sl, r4, #25
 8007126:	68e3      	ldr	r3, [r4, #12]
 8007128:	6832      	ldr	r2, [r6, #0]
 800712a:	1a9b      	subs	r3, r3, r2
 800712c:	42ab      	cmp	r3, r5
 800712e:	dc26      	bgt.n	800717e <_printf_common+0x96>
 8007130:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007134:	1e13      	subs	r3, r2, #0
 8007136:	6822      	ldr	r2, [r4, #0]
 8007138:	bf18      	it	ne
 800713a:	2301      	movne	r3, #1
 800713c:	0692      	lsls	r2, r2, #26
 800713e:	d42b      	bmi.n	8007198 <_printf_common+0xb0>
 8007140:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007144:	4649      	mov	r1, r9
 8007146:	4638      	mov	r0, r7
 8007148:	47c0      	blx	r8
 800714a:	3001      	adds	r0, #1
 800714c:	d01e      	beq.n	800718c <_printf_common+0xa4>
 800714e:	6823      	ldr	r3, [r4, #0]
 8007150:	68e5      	ldr	r5, [r4, #12]
 8007152:	6832      	ldr	r2, [r6, #0]
 8007154:	f003 0306 	and.w	r3, r3, #6
 8007158:	2b04      	cmp	r3, #4
 800715a:	bf08      	it	eq
 800715c:	1aad      	subeq	r5, r5, r2
 800715e:	68a3      	ldr	r3, [r4, #8]
 8007160:	6922      	ldr	r2, [r4, #16]
 8007162:	bf0c      	ite	eq
 8007164:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007168:	2500      	movne	r5, #0
 800716a:	4293      	cmp	r3, r2
 800716c:	bfc4      	itt	gt
 800716e:	1a9b      	subgt	r3, r3, r2
 8007170:	18ed      	addgt	r5, r5, r3
 8007172:	2600      	movs	r6, #0
 8007174:	341a      	adds	r4, #26
 8007176:	42b5      	cmp	r5, r6
 8007178:	d11a      	bne.n	80071b0 <_printf_common+0xc8>
 800717a:	2000      	movs	r0, #0
 800717c:	e008      	b.n	8007190 <_printf_common+0xa8>
 800717e:	2301      	movs	r3, #1
 8007180:	4652      	mov	r2, sl
 8007182:	4649      	mov	r1, r9
 8007184:	4638      	mov	r0, r7
 8007186:	47c0      	blx	r8
 8007188:	3001      	adds	r0, #1
 800718a:	d103      	bne.n	8007194 <_printf_common+0xac>
 800718c:	f04f 30ff 	mov.w	r0, #4294967295
 8007190:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007194:	3501      	adds	r5, #1
 8007196:	e7c6      	b.n	8007126 <_printf_common+0x3e>
 8007198:	18e1      	adds	r1, r4, r3
 800719a:	1c5a      	adds	r2, r3, #1
 800719c:	2030      	movs	r0, #48	; 0x30
 800719e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80071a2:	4422      	add	r2, r4
 80071a4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80071a8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80071ac:	3302      	adds	r3, #2
 80071ae:	e7c7      	b.n	8007140 <_printf_common+0x58>
 80071b0:	2301      	movs	r3, #1
 80071b2:	4622      	mov	r2, r4
 80071b4:	4649      	mov	r1, r9
 80071b6:	4638      	mov	r0, r7
 80071b8:	47c0      	blx	r8
 80071ba:	3001      	adds	r0, #1
 80071bc:	d0e6      	beq.n	800718c <_printf_common+0xa4>
 80071be:	3601      	adds	r6, #1
 80071c0:	e7d9      	b.n	8007176 <_printf_common+0x8e>
	...

080071c4 <_printf_i>:
 80071c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80071c8:	7e0f      	ldrb	r7, [r1, #24]
 80071ca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80071cc:	2f78      	cmp	r7, #120	; 0x78
 80071ce:	4691      	mov	r9, r2
 80071d0:	4680      	mov	r8, r0
 80071d2:	460c      	mov	r4, r1
 80071d4:	469a      	mov	sl, r3
 80071d6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80071da:	d807      	bhi.n	80071ec <_printf_i+0x28>
 80071dc:	2f62      	cmp	r7, #98	; 0x62
 80071de:	d80a      	bhi.n	80071f6 <_printf_i+0x32>
 80071e0:	2f00      	cmp	r7, #0
 80071e2:	f000 80d8 	beq.w	8007396 <_printf_i+0x1d2>
 80071e6:	2f58      	cmp	r7, #88	; 0x58
 80071e8:	f000 80a3 	beq.w	8007332 <_printf_i+0x16e>
 80071ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80071f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80071f4:	e03a      	b.n	800726c <_printf_i+0xa8>
 80071f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80071fa:	2b15      	cmp	r3, #21
 80071fc:	d8f6      	bhi.n	80071ec <_printf_i+0x28>
 80071fe:	a101      	add	r1, pc, #4	; (adr r1, 8007204 <_printf_i+0x40>)
 8007200:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007204:	0800725d 	.word	0x0800725d
 8007208:	08007271 	.word	0x08007271
 800720c:	080071ed 	.word	0x080071ed
 8007210:	080071ed 	.word	0x080071ed
 8007214:	080071ed 	.word	0x080071ed
 8007218:	080071ed 	.word	0x080071ed
 800721c:	08007271 	.word	0x08007271
 8007220:	080071ed 	.word	0x080071ed
 8007224:	080071ed 	.word	0x080071ed
 8007228:	080071ed 	.word	0x080071ed
 800722c:	080071ed 	.word	0x080071ed
 8007230:	0800737d 	.word	0x0800737d
 8007234:	080072a1 	.word	0x080072a1
 8007238:	0800735f 	.word	0x0800735f
 800723c:	080071ed 	.word	0x080071ed
 8007240:	080071ed 	.word	0x080071ed
 8007244:	0800739f 	.word	0x0800739f
 8007248:	080071ed 	.word	0x080071ed
 800724c:	080072a1 	.word	0x080072a1
 8007250:	080071ed 	.word	0x080071ed
 8007254:	080071ed 	.word	0x080071ed
 8007258:	08007367 	.word	0x08007367
 800725c:	682b      	ldr	r3, [r5, #0]
 800725e:	1d1a      	adds	r2, r3, #4
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	602a      	str	r2, [r5, #0]
 8007264:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007268:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800726c:	2301      	movs	r3, #1
 800726e:	e0a3      	b.n	80073b8 <_printf_i+0x1f4>
 8007270:	6820      	ldr	r0, [r4, #0]
 8007272:	6829      	ldr	r1, [r5, #0]
 8007274:	0606      	lsls	r6, r0, #24
 8007276:	f101 0304 	add.w	r3, r1, #4
 800727a:	d50a      	bpl.n	8007292 <_printf_i+0xce>
 800727c:	680e      	ldr	r6, [r1, #0]
 800727e:	602b      	str	r3, [r5, #0]
 8007280:	2e00      	cmp	r6, #0
 8007282:	da03      	bge.n	800728c <_printf_i+0xc8>
 8007284:	232d      	movs	r3, #45	; 0x2d
 8007286:	4276      	negs	r6, r6
 8007288:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800728c:	485e      	ldr	r0, [pc, #376]	; (8007408 <_printf_i+0x244>)
 800728e:	230a      	movs	r3, #10
 8007290:	e019      	b.n	80072c6 <_printf_i+0x102>
 8007292:	680e      	ldr	r6, [r1, #0]
 8007294:	602b      	str	r3, [r5, #0]
 8007296:	f010 0f40 	tst.w	r0, #64	; 0x40
 800729a:	bf18      	it	ne
 800729c:	b236      	sxthne	r6, r6
 800729e:	e7ef      	b.n	8007280 <_printf_i+0xbc>
 80072a0:	682b      	ldr	r3, [r5, #0]
 80072a2:	6820      	ldr	r0, [r4, #0]
 80072a4:	1d19      	adds	r1, r3, #4
 80072a6:	6029      	str	r1, [r5, #0]
 80072a8:	0601      	lsls	r1, r0, #24
 80072aa:	d501      	bpl.n	80072b0 <_printf_i+0xec>
 80072ac:	681e      	ldr	r6, [r3, #0]
 80072ae:	e002      	b.n	80072b6 <_printf_i+0xf2>
 80072b0:	0646      	lsls	r6, r0, #25
 80072b2:	d5fb      	bpl.n	80072ac <_printf_i+0xe8>
 80072b4:	881e      	ldrh	r6, [r3, #0]
 80072b6:	4854      	ldr	r0, [pc, #336]	; (8007408 <_printf_i+0x244>)
 80072b8:	2f6f      	cmp	r7, #111	; 0x6f
 80072ba:	bf0c      	ite	eq
 80072bc:	2308      	moveq	r3, #8
 80072be:	230a      	movne	r3, #10
 80072c0:	2100      	movs	r1, #0
 80072c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80072c6:	6865      	ldr	r5, [r4, #4]
 80072c8:	60a5      	str	r5, [r4, #8]
 80072ca:	2d00      	cmp	r5, #0
 80072cc:	bfa2      	ittt	ge
 80072ce:	6821      	ldrge	r1, [r4, #0]
 80072d0:	f021 0104 	bicge.w	r1, r1, #4
 80072d4:	6021      	strge	r1, [r4, #0]
 80072d6:	b90e      	cbnz	r6, 80072dc <_printf_i+0x118>
 80072d8:	2d00      	cmp	r5, #0
 80072da:	d04d      	beq.n	8007378 <_printf_i+0x1b4>
 80072dc:	4615      	mov	r5, r2
 80072de:	fbb6 f1f3 	udiv	r1, r6, r3
 80072e2:	fb03 6711 	mls	r7, r3, r1, r6
 80072e6:	5dc7      	ldrb	r7, [r0, r7]
 80072e8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80072ec:	4637      	mov	r7, r6
 80072ee:	42bb      	cmp	r3, r7
 80072f0:	460e      	mov	r6, r1
 80072f2:	d9f4      	bls.n	80072de <_printf_i+0x11a>
 80072f4:	2b08      	cmp	r3, #8
 80072f6:	d10b      	bne.n	8007310 <_printf_i+0x14c>
 80072f8:	6823      	ldr	r3, [r4, #0]
 80072fa:	07de      	lsls	r6, r3, #31
 80072fc:	d508      	bpl.n	8007310 <_printf_i+0x14c>
 80072fe:	6923      	ldr	r3, [r4, #16]
 8007300:	6861      	ldr	r1, [r4, #4]
 8007302:	4299      	cmp	r1, r3
 8007304:	bfde      	ittt	le
 8007306:	2330      	movle	r3, #48	; 0x30
 8007308:	f805 3c01 	strble.w	r3, [r5, #-1]
 800730c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007310:	1b52      	subs	r2, r2, r5
 8007312:	6122      	str	r2, [r4, #16]
 8007314:	f8cd a000 	str.w	sl, [sp]
 8007318:	464b      	mov	r3, r9
 800731a:	aa03      	add	r2, sp, #12
 800731c:	4621      	mov	r1, r4
 800731e:	4640      	mov	r0, r8
 8007320:	f7ff fee2 	bl	80070e8 <_printf_common>
 8007324:	3001      	adds	r0, #1
 8007326:	d14c      	bne.n	80073c2 <_printf_i+0x1fe>
 8007328:	f04f 30ff 	mov.w	r0, #4294967295
 800732c:	b004      	add	sp, #16
 800732e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007332:	4835      	ldr	r0, [pc, #212]	; (8007408 <_printf_i+0x244>)
 8007334:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007338:	6829      	ldr	r1, [r5, #0]
 800733a:	6823      	ldr	r3, [r4, #0]
 800733c:	f851 6b04 	ldr.w	r6, [r1], #4
 8007340:	6029      	str	r1, [r5, #0]
 8007342:	061d      	lsls	r5, r3, #24
 8007344:	d514      	bpl.n	8007370 <_printf_i+0x1ac>
 8007346:	07df      	lsls	r7, r3, #31
 8007348:	bf44      	itt	mi
 800734a:	f043 0320 	orrmi.w	r3, r3, #32
 800734e:	6023      	strmi	r3, [r4, #0]
 8007350:	b91e      	cbnz	r6, 800735a <_printf_i+0x196>
 8007352:	6823      	ldr	r3, [r4, #0]
 8007354:	f023 0320 	bic.w	r3, r3, #32
 8007358:	6023      	str	r3, [r4, #0]
 800735a:	2310      	movs	r3, #16
 800735c:	e7b0      	b.n	80072c0 <_printf_i+0xfc>
 800735e:	6823      	ldr	r3, [r4, #0]
 8007360:	f043 0320 	orr.w	r3, r3, #32
 8007364:	6023      	str	r3, [r4, #0]
 8007366:	2378      	movs	r3, #120	; 0x78
 8007368:	4828      	ldr	r0, [pc, #160]	; (800740c <_printf_i+0x248>)
 800736a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800736e:	e7e3      	b.n	8007338 <_printf_i+0x174>
 8007370:	0659      	lsls	r1, r3, #25
 8007372:	bf48      	it	mi
 8007374:	b2b6      	uxthmi	r6, r6
 8007376:	e7e6      	b.n	8007346 <_printf_i+0x182>
 8007378:	4615      	mov	r5, r2
 800737a:	e7bb      	b.n	80072f4 <_printf_i+0x130>
 800737c:	682b      	ldr	r3, [r5, #0]
 800737e:	6826      	ldr	r6, [r4, #0]
 8007380:	6961      	ldr	r1, [r4, #20]
 8007382:	1d18      	adds	r0, r3, #4
 8007384:	6028      	str	r0, [r5, #0]
 8007386:	0635      	lsls	r5, r6, #24
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	d501      	bpl.n	8007390 <_printf_i+0x1cc>
 800738c:	6019      	str	r1, [r3, #0]
 800738e:	e002      	b.n	8007396 <_printf_i+0x1d2>
 8007390:	0670      	lsls	r0, r6, #25
 8007392:	d5fb      	bpl.n	800738c <_printf_i+0x1c8>
 8007394:	8019      	strh	r1, [r3, #0]
 8007396:	2300      	movs	r3, #0
 8007398:	6123      	str	r3, [r4, #16]
 800739a:	4615      	mov	r5, r2
 800739c:	e7ba      	b.n	8007314 <_printf_i+0x150>
 800739e:	682b      	ldr	r3, [r5, #0]
 80073a0:	1d1a      	adds	r2, r3, #4
 80073a2:	602a      	str	r2, [r5, #0]
 80073a4:	681d      	ldr	r5, [r3, #0]
 80073a6:	6862      	ldr	r2, [r4, #4]
 80073a8:	2100      	movs	r1, #0
 80073aa:	4628      	mov	r0, r5
 80073ac:	f7f8 ff38 	bl	8000220 <memchr>
 80073b0:	b108      	cbz	r0, 80073b6 <_printf_i+0x1f2>
 80073b2:	1b40      	subs	r0, r0, r5
 80073b4:	6060      	str	r0, [r4, #4]
 80073b6:	6863      	ldr	r3, [r4, #4]
 80073b8:	6123      	str	r3, [r4, #16]
 80073ba:	2300      	movs	r3, #0
 80073bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80073c0:	e7a8      	b.n	8007314 <_printf_i+0x150>
 80073c2:	6923      	ldr	r3, [r4, #16]
 80073c4:	462a      	mov	r2, r5
 80073c6:	4649      	mov	r1, r9
 80073c8:	4640      	mov	r0, r8
 80073ca:	47d0      	blx	sl
 80073cc:	3001      	adds	r0, #1
 80073ce:	d0ab      	beq.n	8007328 <_printf_i+0x164>
 80073d0:	6823      	ldr	r3, [r4, #0]
 80073d2:	079b      	lsls	r3, r3, #30
 80073d4:	d413      	bmi.n	80073fe <_printf_i+0x23a>
 80073d6:	68e0      	ldr	r0, [r4, #12]
 80073d8:	9b03      	ldr	r3, [sp, #12]
 80073da:	4298      	cmp	r0, r3
 80073dc:	bfb8      	it	lt
 80073de:	4618      	movlt	r0, r3
 80073e0:	e7a4      	b.n	800732c <_printf_i+0x168>
 80073e2:	2301      	movs	r3, #1
 80073e4:	4632      	mov	r2, r6
 80073e6:	4649      	mov	r1, r9
 80073e8:	4640      	mov	r0, r8
 80073ea:	47d0      	blx	sl
 80073ec:	3001      	adds	r0, #1
 80073ee:	d09b      	beq.n	8007328 <_printf_i+0x164>
 80073f0:	3501      	adds	r5, #1
 80073f2:	68e3      	ldr	r3, [r4, #12]
 80073f4:	9903      	ldr	r1, [sp, #12]
 80073f6:	1a5b      	subs	r3, r3, r1
 80073f8:	42ab      	cmp	r3, r5
 80073fa:	dcf2      	bgt.n	80073e2 <_printf_i+0x21e>
 80073fc:	e7eb      	b.n	80073d6 <_printf_i+0x212>
 80073fe:	2500      	movs	r5, #0
 8007400:	f104 0619 	add.w	r6, r4, #25
 8007404:	e7f5      	b.n	80073f2 <_printf_i+0x22e>
 8007406:	bf00      	nop
 8007408:	0800a49a 	.word	0x0800a49a
 800740c:	0800a4ab 	.word	0x0800a4ab

08007410 <_sbrk_r>:
 8007410:	b538      	push	{r3, r4, r5, lr}
 8007412:	4d06      	ldr	r5, [pc, #24]	; (800742c <_sbrk_r+0x1c>)
 8007414:	2300      	movs	r3, #0
 8007416:	4604      	mov	r4, r0
 8007418:	4608      	mov	r0, r1
 800741a:	602b      	str	r3, [r5, #0]
 800741c:	f7fa f9da 	bl	80017d4 <_sbrk>
 8007420:	1c43      	adds	r3, r0, #1
 8007422:	d102      	bne.n	800742a <_sbrk_r+0x1a>
 8007424:	682b      	ldr	r3, [r5, #0]
 8007426:	b103      	cbz	r3, 800742a <_sbrk_r+0x1a>
 8007428:	6023      	str	r3, [r4, #0]
 800742a:	bd38      	pop	{r3, r4, r5, pc}
 800742c:	20000ad0 	.word	0x20000ad0

08007430 <siprintf>:
 8007430:	b40e      	push	{r1, r2, r3}
 8007432:	b500      	push	{lr}
 8007434:	b09c      	sub	sp, #112	; 0x70
 8007436:	ab1d      	add	r3, sp, #116	; 0x74
 8007438:	9002      	str	r0, [sp, #8]
 800743a:	9006      	str	r0, [sp, #24]
 800743c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007440:	4809      	ldr	r0, [pc, #36]	; (8007468 <siprintf+0x38>)
 8007442:	9107      	str	r1, [sp, #28]
 8007444:	9104      	str	r1, [sp, #16]
 8007446:	4909      	ldr	r1, [pc, #36]	; (800746c <siprintf+0x3c>)
 8007448:	f853 2b04 	ldr.w	r2, [r3], #4
 800744c:	9105      	str	r1, [sp, #20]
 800744e:	6800      	ldr	r0, [r0, #0]
 8007450:	9301      	str	r3, [sp, #4]
 8007452:	a902      	add	r1, sp, #8
 8007454:	f001 faba 	bl	80089cc <_svfiprintf_r>
 8007458:	9b02      	ldr	r3, [sp, #8]
 800745a:	2200      	movs	r2, #0
 800745c:	701a      	strb	r2, [r3, #0]
 800745e:	b01c      	add	sp, #112	; 0x70
 8007460:	f85d eb04 	ldr.w	lr, [sp], #4
 8007464:	b003      	add	sp, #12
 8007466:	4770      	bx	lr
 8007468:	2000073c 	.word	0x2000073c
 800746c:	ffff0208 	.word	0xffff0208

08007470 <quorem>:
 8007470:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007474:	6903      	ldr	r3, [r0, #16]
 8007476:	690c      	ldr	r4, [r1, #16]
 8007478:	42a3      	cmp	r3, r4
 800747a:	4607      	mov	r7, r0
 800747c:	f2c0 8081 	blt.w	8007582 <quorem+0x112>
 8007480:	3c01      	subs	r4, #1
 8007482:	f101 0814 	add.w	r8, r1, #20
 8007486:	f100 0514 	add.w	r5, r0, #20
 800748a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800748e:	9301      	str	r3, [sp, #4]
 8007490:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007494:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007498:	3301      	adds	r3, #1
 800749a:	429a      	cmp	r2, r3
 800749c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80074a0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80074a4:	fbb2 f6f3 	udiv	r6, r2, r3
 80074a8:	d331      	bcc.n	800750e <quorem+0x9e>
 80074aa:	f04f 0e00 	mov.w	lr, #0
 80074ae:	4640      	mov	r0, r8
 80074b0:	46ac      	mov	ip, r5
 80074b2:	46f2      	mov	sl, lr
 80074b4:	f850 2b04 	ldr.w	r2, [r0], #4
 80074b8:	b293      	uxth	r3, r2
 80074ba:	fb06 e303 	mla	r3, r6, r3, lr
 80074be:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80074c2:	b29b      	uxth	r3, r3
 80074c4:	ebaa 0303 	sub.w	r3, sl, r3
 80074c8:	f8dc a000 	ldr.w	sl, [ip]
 80074cc:	0c12      	lsrs	r2, r2, #16
 80074ce:	fa13 f38a 	uxtah	r3, r3, sl
 80074d2:	fb06 e202 	mla	r2, r6, r2, lr
 80074d6:	9300      	str	r3, [sp, #0]
 80074d8:	9b00      	ldr	r3, [sp, #0]
 80074da:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80074de:	b292      	uxth	r2, r2
 80074e0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80074e4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80074e8:	f8bd 3000 	ldrh.w	r3, [sp]
 80074ec:	4581      	cmp	r9, r0
 80074ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80074f2:	f84c 3b04 	str.w	r3, [ip], #4
 80074f6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80074fa:	d2db      	bcs.n	80074b4 <quorem+0x44>
 80074fc:	f855 300b 	ldr.w	r3, [r5, fp]
 8007500:	b92b      	cbnz	r3, 800750e <quorem+0x9e>
 8007502:	9b01      	ldr	r3, [sp, #4]
 8007504:	3b04      	subs	r3, #4
 8007506:	429d      	cmp	r5, r3
 8007508:	461a      	mov	r2, r3
 800750a:	d32e      	bcc.n	800756a <quorem+0xfa>
 800750c:	613c      	str	r4, [r7, #16]
 800750e:	4638      	mov	r0, r7
 8007510:	f001 f8ba 	bl	8008688 <__mcmp>
 8007514:	2800      	cmp	r0, #0
 8007516:	db24      	blt.n	8007562 <quorem+0xf2>
 8007518:	3601      	adds	r6, #1
 800751a:	4628      	mov	r0, r5
 800751c:	f04f 0c00 	mov.w	ip, #0
 8007520:	f858 2b04 	ldr.w	r2, [r8], #4
 8007524:	f8d0 e000 	ldr.w	lr, [r0]
 8007528:	b293      	uxth	r3, r2
 800752a:	ebac 0303 	sub.w	r3, ip, r3
 800752e:	0c12      	lsrs	r2, r2, #16
 8007530:	fa13 f38e 	uxtah	r3, r3, lr
 8007534:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007538:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800753c:	b29b      	uxth	r3, r3
 800753e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007542:	45c1      	cmp	r9, r8
 8007544:	f840 3b04 	str.w	r3, [r0], #4
 8007548:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800754c:	d2e8      	bcs.n	8007520 <quorem+0xb0>
 800754e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007552:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007556:	b922      	cbnz	r2, 8007562 <quorem+0xf2>
 8007558:	3b04      	subs	r3, #4
 800755a:	429d      	cmp	r5, r3
 800755c:	461a      	mov	r2, r3
 800755e:	d30a      	bcc.n	8007576 <quorem+0x106>
 8007560:	613c      	str	r4, [r7, #16]
 8007562:	4630      	mov	r0, r6
 8007564:	b003      	add	sp, #12
 8007566:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800756a:	6812      	ldr	r2, [r2, #0]
 800756c:	3b04      	subs	r3, #4
 800756e:	2a00      	cmp	r2, #0
 8007570:	d1cc      	bne.n	800750c <quorem+0x9c>
 8007572:	3c01      	subs	r4, #1
 8007574:	e7c7      	b.n	8007506 <quorem+0x96>
 8007576:	6812      	ldr	r2, [r2, #0]
 8007578:	3b04      	subs	r3, #4
 800757a:	2a00      	cmp	r2, #0
 800757c:	d1f0      	bne.n	8007560 <quorem+0xf0>
 800757e:	3c01      	subs	r4, #1
 8007580:	e7eb      	b.n	800755a <quorem+0xea>
 8007582:	2000      	movs	r0, #0
 8007584:	e7ee      	b.n	8007564 <quorem+0xf4>
	...

08007588 <_dtoa_r>:
 8007588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800758c:	ed2d 8b04 	vpush	{d8-d9}
 8007590:	ec57 6b10 	vmov	r6, r7, d0
 8007594:	b093      	sub	sp, #76	; 0x4c
 8007596:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007598:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800759c:	9106      	str	r1, [sp, #24]
 800759e:	ee10 aa10 	vmov	sl, s0
 80075a2:	4604      	mov	r4, r0
 80075a4:	9209      	str	r2, [sp, #36]	; 0x24
 80075a6:	930c      	str	r3, [sp, #48]	; 0x30
 80075a8:	46bb      	mov	fp, r7
 80075aa:	b975      	cbnz	r5, 80075ca <_dtoa_r+0x42>
 80075ac:	2010      	movs	r0, #16
 80075ae:	f7ff f9c7 	bl	8006940 <malloc>
 80075b2:	4602      	mov	r2, r0
 80075b4:	6260      	str	r0, [r4, #36]	; 0x24
 80075b6:	b920      	cbnz	r0, 80075c2 <_dtoa_r+0x3a>
 80075b8:	4ba7      	ldr	r3, [pc, #668]	; (8007858 <_dtoa_r+0x2d0>)
 80075ba:	21ea      	movs	r1, #234	; 0xea
 80075bc:	48a7      	ldr	r0, [pc, #668]	; (800785c <_dtoa_r+0x2d4>)
 80075be:	f001 fb05 	bl	8008bcc <__assert_func>
 80075c2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80075c6:	6005      	str	r5, [r0, #0]
 80075c8:	60c5      	str	r5, [r0, #12]
 80075ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80075cc:	6819      	ldr	r1, [r3, #0]
 80075ce:	b151      	cbz	r1, 80075e6 <_dtoa_r+0x5e>
 80075d0:	685a      	ldr	r2, [r3, #4]
 80075d2:	604a      	str	r2, [r1, #4]
 80075d4:	2301      	movs	r3, #1
 80075d6:	4093      	lsls	r3, r2
 80075d8:	608b      	str	r3, [r1, #8]
 80075da:	4620      	mov	r0, r4
 80075dc:	f000 fe12 	bl	8008204 <_Bfree>
 80075e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80075e2:	2200      	movs	r2, #0
 80075e4:	601a      	str	r2, [r3, #0]
 80075e6:	1e3b      	subs	r3, r7, #0
 80075e8:	bfaa      	itet	ge
 80075ea:	2300      	movge	r3, #0
 80075ec:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80075f0:	f8c8 3000 	strge.w	r3, [r8]
 80075f4:	4b9a      	ldr	r3, [pc, #616]	; (8007860 <_dtoa_r+0x2d8>)
 80075f6:	bfbc      	itt	lt
 80075f8:	2201      	movlt	r2, #1
 80075fa:	f8c8 2000 	strlt.w	r2, [r8]
 80075fe:	ea33 030b 	bics.w	r3, r3, fp
 8007602:	d11b      	bne.n	800763c <_dtoa_r+0xb4>
 8007604:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007606:	f242 730f 	movw	r3, #9999	; 0x270f
 800760a:	6013      	str	r3, [r2, #0]
 800760c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007610:	4333      	orrs	r3, r6
 8007612:	f000 8592 	beq.w	800813a <_dtoa_r+0xbb2>
 8007616:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007618:	b963      	cbnz	r3, 8007634 <_dtoa_r+0xac>
 800761a:	4b92      	ldr	r3, [pc, #584]	; (8007864 <_dtoa_r+0x2dc>)
 800761c:	e022      	b.n	8007664 <_dtoa_r+0xdc>
 800761e:	4b92      	ldr	r3, [pc, #584]	; (8007868 <_dtoa_r+0x2e0>)
 8007620:	9301      	str	r3, [sp, #4]
 8007622:	3308      	adds	r3, #8
 8007624:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007626:	6013      	str	r3, [r2, #0]
 8007628:	9801      	ldr	r0, [sp, #4]
 800762a:	b013      	add	sp, #76	; 0x4c
 800762c:	ecbd 8b04 	vpop	{d8-d9}
 8007630:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007634:	4b8b      	ldr	r3, [pc, #556]	; (8007864 <_dtoa_r+0x2dc>)
 8007636:	9301      	str	r3, [sp, #4]
 8007638:	3303      	adds	r3, #3
 800763a:	e7f3      	b.n	8007624 <_dtoa_r+0x9c>
 800763c:	2200      	movs	r2, #0
 800763e:	2300      	movs	r3, #0
 8007640:	4650      	mov	r0, sl
 8007642:	4659      	mov	r1, fp
 8007644:	f7f9 fa60 	bl	8000b08 <__aeabi_dcmpeq>
 8007648:	ec4b ab19 	vmov	d9, sl, fp
 800764c:	4680      	mov	r8, r0
 800764e:	b158      	cbz	r0, 8007668 <_dtoa_r+0xe0>
 8007650:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007652:	2301      	movs	r3, #1
 8007654:	6013      	str	r3, [r2, #0]
 8007656:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007658:	2b00      	cmp	r3, #0
 800765a:	f000 856b 	beq.w	8008134 <_dtoa_r+0xbac>
 800765e:	4883      	ldr	r0, [pc, #524]	; (800786c <_dtoa_r+0x2e4>)
 8007660:	6018      	str	r0, [r3, #0]
 8007662:	1e43      	subs	r3, r0, #1
 8007664:	9301      	str	r3, [sp, #4]
 8007666:	e7df      	b.n	8007628 <_dtoa_r+0xa0>
 8007668:	ec4b ab10 	vmov	d0, sl, fp
 800766c:	aa10      	add	r2, sp, #64	; 0x40
 800766e:	a911      	add	r1, sp, #68	; 0x44
 8007670:	4620      	mov	r0, r4
 8007672:	f001 f8af 	bl	80087d4 <__d2b>
 8007676:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800767a:	ee08 0a10 	vmov	s16, r0
 800767e:	2d00      	cmp	r5, #0
 8007680:	f000 8084 	beq.w	800778c <_dtoa_r+0x204>
 8007684:	ee19 3a90 	vmov	r3, s19
 8007688:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800768c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007690:	4656      	mov	r6, sl
 8007692:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007696:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800769a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800769e:	4b74      	ldr	r3, [pc, #464]	; (8007870 <_dtoa_r+0x2e8>)
 80076a0:	2200      	movs	r2, #0
 80076a2:	4630      	mov	r0, r6
 80076a4:	4639      	mov	r1, r7
 80076a6:	f7f8 fe0f 	bl	80002c8 <__aeabi_dsub>
 80076aa:	a365      	add	r3, pc, #404	; (adr r3, 8007840 <_dtoa_r+0x2b8>)
 80076ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076b0:	f7f8 ffc2 	bl	8000638 <__aeabi_dmul>
 80076b4:	a364      	add	r3, pc, #400	; (adr r3, 8007848 <_dtoa_r+0x2c0>)
 80076b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076ba:	f7f8 fe07 	bl	80002cc <__adddf3>
 80076be:	4606      	mov	r6, r0
 80076c0:	4628      	mov	r0, r5
 80076c2:	460f      	mov	r7, r1
 80076c4:	f7f8 ff4e 	bl	8000564 <__aeabi_i2d>
 80076c8:	a361      	add	r3, pc, #388	; (adr r3, 8007850 <_dtoa_r+0x2c8>)
 80076ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076ce:	f7f8 ffb3 	bl	8000638 <__aeabi_dmul>
 80076d2:	4602      	mov	r2, r0
 80076d4:	460b      	mov	r3, r1
 80076d6:	4630      	mov	r0, r6
 80076d8:	4639      	mov	r1, r7
 80076da:	f7f8 fdf7 	bl	80002cc <__adddf3>
 80076de:	4606      	mov	r6, r0
 80076e0:	460f      	mov	r7, r1
 80076e2:	f7f9 fa59 	bl	8000b98 <__aeabi_d2iz>
 80076e6:	2200      	movs	r2, #0
 80076e8:	9000      	str	r0, [sp, #0]
 80076ea:	2300      	movs	r3, #0
 80076ec:	4630      	mov	r0, r6
 80076ee:	4639      	mov	r1, r7
 80076f0:	f7f9 fa14 	bl	8000b1c <__aeabi_dcmplt>
 80076f4:	b150      	cbz	r0, 800770c <_dtoa_r+0x184>
 80076f6:	9800      	ldr	r0, [sp, #0]
 80076f8:	f7f8 ff34 	bl	8000564 <__aeabi_i2d>
 80076fc:	4632      	mov	r2, r6
 80076fe:	463b      	mov	r3, r7
 8007700:	f7f9 fa02 	bl	8000b08 <__aeabi_dcmpeq>
 8007704:	b910      	cbnz	r0, 800770c <_dtoa_r+0x184>
 8007706:	9b00      	ldr	r3, [sp, #0]
 8007708:	3b01      	subs	r3, #1
 800770a:	9300      	str	r3, [sp, #0]
 800770c:	9b00      	ldr	r3, [sp, #0]
 800770e:	2b16      	cmp	r3, #22
 8007710:	d85a      	bhi.n	80077c8 <_dtoa_r+0x240>
 8007712:	9a00      	ldr	r2, [sp, #0]
 8007714:	4b57      	ldr	r3, [pc, #348]	; (8007874 <_dtoa_r+0x2ec>)
 8007716:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800771a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800771e:	ec51 0b19 	vmov	r0, r1, d9
 8007722:	f7f9 f9fb 	bl	8000b1c <__aeabi_dcmplt>
 8007726:	2800      	cmp	r0, #0
 8007728:	d050      	beq.n	80077cc <_dtoa_r+0x244>
 800772a:	9b00      	ldr	r3, [sp, #0]
 800772c:	3b01      	subs	r3, #1
 800772e:	9300      	str	r3, [sp, #0]
 8007730:	2300      	movs	r3, #0
 8007732:	930b      	str	r3, [sp, #44]	; 0x2c
 8007734:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007736:	1b5d      	subs	r5, r3, r5
 8007738:	1e6b      	subs	r3, r5, #1
 800773a:	9305      	str	r3, [sp, #20]
 800773c:	bf45      	ittet	mi
 800773e:	f1c5 0301 	rsbmi	r3, r5, #1
 8007742:	9304      	strmi	r3, [sp, #16]
 8007744:	2300      	movpl	r3, #0
 8007746:	2300      	movmi	r3, #0
 8007748:	bf4c      	ite	mi
 800774a:	9305      	strmi	r3, [sp, #20]
 800774c:	9304      	strpl	r3, [sp, #16]
 800774e:	9b00      	ldr	r3, [sp, #0]
 8007750:	2b00      	cmp	r3, #0
 8007752:	db3d      	blt.n	80077d0 <_dtoa_r+0x248>
 8007754:	9b05      	ldr	r3, [sp, #20]
 8007756:	9a00      	ldr	r2, [sp, #0]
 8007758:	920a      	str	r2, [sp, #40]	; 0x28
 800775a:	4413      	add	r3, r2
 800775c:	9305      	str	r3, [sp, #20]
 800775e:	2300      	movs	r3, #0
 8007760:	9307      	str	r3, [sp, #28]
 8007762:	9b06      	ldr	r3, [sp, #24]
 8007764:	2b09      	cmp	r3, #9
 8007766:	f200 8089 	bhi.w	800787c <_dtoa_r+0x2f4>
 800776a:	2b05      	cmp	r3, #5
 800776c:	bfc4      	itt	gt
 800776e:	3b04      	subgt	r3, #4
 8007770:	9306      	strgt	r3, [sp, #24]
 8007772:	9b06      	ldr	r3, [sp, #24]
 8007774:	f1a3 0302 	sub.w	r3, r3, #2
 8007778:	bfcc      	ite	gt
 800777a:	2500      	movgt	r5, #0
 800777c:	2501      	movle	r5, #1
 800777e:	2b03      	cmp	r3, #3
 8007780:	f200 8087 	bhi.w	8007892 <_dtoa_r+0x30a>
 8007784:	e8df f003 	tbb	[pc, r3]
 8007788:	59383a2d 	.word	0x59383a2d
 800778c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007790:	441d      	add	r5, r3
 8007792:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007796:	2b20      	cmp	r3, #32
 8007798:	bfc1      	itttt	gt
 800779a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800779e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80077a2:	fa0b f303 	lslgt.w	r3, fp, r3
 80077a6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80077aa:	bfda      	itte	le
 80077ac:	f1c3 0320 	rsble	r3, r3, #32
 80077b0:	fa06 f003 	lslle.w	r0, r6, r3
 80077b4:	4318      	orrgt	r0, r3
 80077b6:	f7f8 fec5 	bl	8000544 <__aeabi_ui2d>
 80077ba:	2301      	movs	r3, #1
 80077bc:	4606      	mov	r6, r0
 80077be:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80077c2:	3d01      	subs	r5, #1
 80077c4:	930e      	str	r3, [sp, #56]	; 0x38
 80077c6:	e76a      	b.n	800769e <_dtoa_r+0x116>
 80077c8:	2301      	movs	r3, #1
 80077ca:	e7b2      	b.n	8007732 <_dtoa_r+0x1aa>
 80077cc:	900b      	str	r0, [sp, #44]	; 0x2c
 80077ce:	e7b1      	b.n	8007734 <_dtoa_r+0x1ac>
 80077d0:	9b04      	ldr	r3, [sp, #16]
 80077d2:	9a00      	ldr	r2, [sp, #0]
 80077d4:	1a9b      	subs	r3, r3, r2
 80077d6:	9304      	str	r3, [sp, #16]
 80077d8:	4253      	negs	r3, r2
 80077da:	9307      	str	r3, [sp, #28]
 80077dc:	2300      	movs	r3, #0
 80077de:	930a      	str	r3, [sp, #40]	; 0x28
 80077e0:	e7bf      	b.n	8007762 <_dtoa_r+0x1da>
 80077e2:	2300      	movs	r3, #0
 80077e4:	9308      	str	r3, [sp, #32]
 80077e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	dc55      	bgt.n	8007898 <_dtoa_r+0x310>
 80077ec:	2301      	movs	r3, #1
 80077ee:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80077f2:	461a      	mov	r2, r3
 80077f4:	9209      	str	r2, [sp, #36]	; 0x24
 80077f6:	e00c      	b.n	8007812 <_dtoa_r+0x28a>
 80077f8:	2301      	movs	r3, #1
 80077fa:	e7f3      	b.n	80077e4 <_dtoa_r+0x25c>
 80077fc:	2300      	movs	r3, #0
 80077fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007800:	9308      	str	r3, [sp, #32]
 8007802:	9b00      	ldr	r3, [sp, #0]
 8007804:	4413      	add	r3, r2
 8007806:	9302      	str	r3, [sp, #8]
 8007808:	3301      	adds	r3, #1
 800780a:	2b01      	cmp	r3, #1
 800780c:	9303      	str	r3, [sp, #12]
 800780e:	bfb8      	it	lt
 8007810:	2301      	movlt	r3, #1
 8007812:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007814:	2200      	movs	r2, #0
 8007816:	6042      	str	r2, [r0, #4]
 8007818:	2204      	movs	r2, #4
 800781a:	f102 0614 	add.w	r6, r2, #20
 800781e:	429e      	cmp	r6, r3
 8007820:	6841      	ldr	r1, [r0, #4]
 8007822:	d93d      	bls.n	80078a0 <_dtoa_r+0x318>
 8007824:	4620      	mov	r0, r4
 8007826:	f000 fcad 	bl	8008184 <_Balloc>
 800782a:	9001      	str	r0, [sp, #4]
 800782c:	2800      	cmp	r0, #0
 800782e:	d13b      	bne.n	80078a8 <_dtoa_r+0x320>
 8007830:	4b11      	ldr	r3, [pc, #68]	; (8007878 <_dtoa_r+0x2f0>)
 8007832:	4602      	mov	r2, r0
 8007834:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007838:	e6c0      	b.n	80075bc <_dtoa_r+0x34>
 800783a:	2301      	movs	r3, #1
 800783c:	e7df      	b.n	80077fe <_dtoa_r+0x276>
 800783e:	bf00      	nop
 8007840:	636f4361 	.word	0x636f4361
 8007844:	3fd287a7 	.word	0x3fd287a7
 8007848:	8b60c8b3 	.word	0x8b60c8b3
 800784c:	3fc68a28 	.word	0x3fc68a28
 8007850:	509f79fb 	.word	0x509f79fb
 8007854:	3fd34413 	.word	0x3fd34413
 8007858:	0800a4c9 	.word	0x0800a4c9
 800785c:	0800a4e0 	.word	0x0800a4e0
 8007860:	7ff00000 	.word	0x7ff00000
 8007864:	0800a4c5 	.word	0x0800a4c5
 8007868:	0800a4bc 	.word	0x0800a4bc
 800786c:	0800a499 	.word	0x0800a499
 8007870:	3ff80000 	.word	0x3ff80000
 8007874:	0800a5d0 	.word	0x0800a5d0
 8007878:	0800a53b 	.word	0x0800a53b
 800787c:	2501      	movs	r5, #1
 800787e:	2300      	movs	r3, #0
 8007880:	9306      	str	r3, [sp, #24]
 8007882:	9508      	str	r5, [sp, #32]
 8007884:	f04f 33ff 	mov.w	r3, #4294967295
 8007888:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800788c:	2200      	movs	r2, #0
 800788e:	2312      	movs	r3, #18
 8007890:	e7b0      	b.n	80077f4 <_dtoa_r+0x26c>
 8007892:	2301      	movs	r3, #1
 8007894:	9308      	str	r3, [sp, #32]
 8007896:	e7f5      	b.n	8007884 <_dtoa_r+0x2fc>
 8007898:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800789a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800789e:	e7b8      	b.n	8007812 <_dtoa_r+0x28a>
 80078a0:	3101      	adds	r1, #1
 80078a2:	6041      	str	r1, [r0, #4]
 80078a4:	0052      	lsls	r2, r2, #1
 80078a6:	e7b8      	b.n	800781a <_dtoa_r+0x292>
 80078a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80078aa:	9a01      	ldr	r2, [sp, #4]
 80078ac:	601a      	str	r2, [r3, #0]
 80078ae:	9b03      	ldr	r3, [sp, #12]
 80078b0:	2b0e      	cmp	r3, #14
 80078b2:	f200 809d 	bhi.w	80079f0 <_dtoa_r+0x468>
 80078b6:	2d00      	cmp	r5, #0
 80078b8:	f000 809a 	beq.w	80079f0 <_dtoa_r+0x468>
 80078bc:	9b00      	ldr	r3, [sp, #0]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	dd32      	ble.n	8007928 <_dtoa_r+0x3a0>
 80078c2:	4ab7      	ldr	r2, [pc, #732]	; (8007ba0 <_dtoa_r+0x618>)
 80078c4:	f003 030f 	and.w	r3, r3, #15
 80078c8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80078cc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80078d0:	9b00      	ldr	r3, [sp, #0]
 80078d2:	05d8      	lsls	r0, r3, #23
 80078d4:	ea4f 1723 	mov.w	r7, r3, asr #4
 80078d8:	d516      	bpl.n	8007908 <_dtoa_r+0x380>
 80078da:	4bb2      	ldr	r3, [pc, #712]	; (8007ba4 <_dtoa_r+0x61c>)
 80078dc:	ec51 0b19 	vmov	r0, r1, d9
 80078e0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80078e4:	f7f8 ffd2 	bl	800088c <__aeabi_ddiv>
 80078e8:	f007 070f 	and.w	r7, r7, #15
 80078ec:	4682      	mov	sl, r0
 80078ee:	468b      	mov	fp, r1
 80078f0:	2503      	movs	r5, #3
 80078f2:	4eac      	ldr	r6, [pc, #688]	; (8007ba4 <_dtoa_r+0x61c>)
 80078f4:	b957      	cbnz	r7, 800790c <_dtoa_r+0x384>
 80078f6:	4642      	mov	r2, r8
 80078f8:	464b      	mov	r3, r9
 80078fa:	4650      	mov	r0, sl
 80078fc:	4659      	mov	r1, fp
 80078fe:	f7f8 ffc5 	bl	800088c <__aeabi_ddiv>
 8007902:	4682      	mov	sl, r0
 8007904:	468b      	mov	fp, r1
 8007906:	e028      	b.n	800795a <_dtoa_r+0x3d2>
 8007908:	2502      	movs	r5, #2
 800790a:	e7f2      	b.n	80078f2 <_dtoa_r+0x36a>
 800790c:	07f9      	lsls	r1, r7, #31
 800790e:	d508      	bpl.n	8007922 <_dtoa_r+0x39a>
 8007910:	4640      	mov	r0, r8
 8007912:	4649      	mov	r1, r9
 8007914:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007918:	f7f8 fe8e 	bl	8000638 <__aeabi_dmul>
 800791c:	3501      	adds	r5, #1
 800791e:	4680      	mov	r8, r0
 8007920:	4689      	mov	r9, r1
 8007922:	107f      	asrs	r7, r7, #1
 8007924:	3608      	adds	r6, #8
 8007926:	e7e5      	b.n	80078f4 <_dtoa_r+0x36c>
 8007928:	f000 809b 	beq.w	8007a62 <_dtoa_r+0x4da>
 800792c:	9b00      	ldr	r3, [sp, #0]
 800792e:	4f9d      	ldr	r7, [pc, #628]	; (8007ba4 <_dtoa_r+0x61c>)
 8007930:	425e      	negs	r6, r3
 8007932:	4b9b      	ldr	r3, [pc, #620]	; (8007ba0 <_dtoa_r+0x618>)
 8007934:	f006 020f 	and.w	r2, r6, #15
 8007938:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800793c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007940:	ec51 0b19 	vmov	r0, r1, d9
 8007944:	f7f8 fe78 	bl	8000638 <__aeabi_dmul>
 8007948:	1136      	asrs	r6, r6, #4
 800794a:	4682      	mov	sl, r0
 800794c:	468b      	mov	fp, r1
 800794e:	2300      	movs	r3, #0
 8007950:	2502      	movs	r5, #2
 8007952:	2e00      	cmp	r6, #0
 8007954:	d17a      	bne.n	8007a4c <_dtoa_r+0x4c4>
 8007956:	2b00      	cmp	r3, #0
 8007958:	d1d3      	bne.n	8007902 <_dtoa_r+0x37a>
 800795a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800795c:	2b00      	cmp	r3, #0
 800795e:	f000 8082 	beq.w	8007a66 <_dtoa_r+0x4de>
 8007962:	4b91      	ldr	r3, [pc, #580]	; (8007ba8 <_dtoa_r+0x620>)
 8007964:	2200      	movs	r2, #0
 8007966:	4650      	mov	r0, sl
 8007968:	4659      	mov	r1, fp
 800796a:	f7f9 f8d7 	bl	8000b1c <__aeabi_dcmplt>
 800796e:	2800      	cmp	r0, #0
 8007970:	d079      	beq.n	8007a66 <_dtoa_r+0x4de>
 8007972:	9b03      	ldr	r3, [sp, #12]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d076      	beq.n	8007a66 <_dtoa_r+0x4de>
 8007978:	9b02      	ldr	r3, [sp, #8]
 800797a:	2b00      	cmp	r3, #0
 800797c:	dd36      	ble.n	80079ec <_dtoa_r+0x464>
 800797e:	9b00      	ldr	r3, [sp, #0]
 8007980:	4650      	mov	r0, sl
 8007982:	4659      	mov	r1, fp
 8007984:	1e5f      	subs	r7, r3, #1
 8007986:	2200      	movs	r2, #0
 8007988:	4b88      	ldr	r3, [pc, #544]	; (8007bac <_dtoa_r+0x624>)
 800798a:	f7f8 fe55 	bl	8000638 <__aeabi_dmul>
 800798e:	9e02      	ldr	r6, [sp, #8]
 8007990:	4682      	mov	sl, r0
 8007992:	468b      	mov	fp, r1
 8007994:	3501      	adds	r5, #1
 8007996:	4628      	mov	r0, r5
 8007998:	f7f8 fde4 	bl	8000564 <__aeabi_i2d>
 800799c:	4652      	mov	r2, sl
 800799e:	465b      	mov	r3, fp
 80079a0:	f7f8 fe4a 	bl	8000638 <__aeabi_dmul>
 80079a4:	4b82      	ldr	r3, [pc, #520]	; (8007bb0 <_dtoa_r+0x628>)
 80079a6:	2200      	movs	r2, #0
 80079a8:	f7f8 fc90 	bl	80002cc <__adddf3>
 80079ac:	46d0      	mov	r8, sl
 80079ae:	46d9      	mov	r9, fp
 80079b0:	4682      	mov	sl, r0
 80079b2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80079b6:	2e00      	cmp	r6, #0
 80079b8:	d158      	bne.n	8007a6c <_dtoa_r+0x4e4>
 80079ba:	4b7e      	ldr	r3, [pc, #504]	; (8007bb4 <_dtoa_r+0x62c>)
 80079bc:	2200      	movs	r2, #0
 80079be:	4640      	mov	r0, r8
 80079c0:	4649      	mov	r1, r9
 80079c2:	f7f8 fc81 	bl	80002c8 <__aeabi_dsub>
 80079c6:	4652      	mov	r2, sl
 80079c8:	465b      	mov	r3, fp
 80079ca:	4680      	mov	r8, r0
 80079cc:	4689      	mov	r9, r1
 80079ce:	f7f9 f8c3 	bl	8000b58 <__aeabi_dcmpgt>
 80079d2:	2800      	cmp	r0, #0
 80079d4:	f040 8295 	bne.w	8007f02 <_dtoa_r+0x97a>
 80079d8:	4652      	mov	r2, sl
 80079da:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80079de:	4640      	mov	r0, r8
 80079e0:	4649      	mov	r1, r9
 80079e2:	f7f9 f89b 	bl	8000b1c <__aeabi_dcmplt>
 80079e6:	2800      	cmp	r0, #0
 80079e8:	f040 8289 	bne.w	8007efe <_dtoa_r+0x976>
 80079ec:	ec5b ab19 	vmov	sl, fp, d9
 80079f0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	f2c0 8148 	blt.w	8007c88 <_dtoa_r+0x700>
 80079f8:	9a00      	ldr	r2, [sp, #0]
 80079fa:	2a0e      	cmp	r2, #14
 80079fc:	f300 8144 	bgt.w	8007c88 <_dtoa_r+0x700>
 8007a00:	4b67      	ldr	r3, [pc, #412]	; (8007ba0 <_dtoa_r+0x618>)
 8007a02:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007a06:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007a0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	f280 80d5 	bge.w	8007bbc <_dtoa_r+0x634>
 8007a12:	9b03      	ldr	r3, [sp, #12]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	f300 80d1 	bgt.w	8007bbc <_dtoa_r+0x634>
 8007a1a:	f040 826f 	bne.w	8007efc <_dtoa_r+0x974>
 8007a1e:	4b65      	ldr	r3, [pc, #404]	; (8007bb4 <_dtoa_r+0x62c>)
 8007a20:	2200      	movs	r2, #0
 8007a22:	4640      	mov	r0, r8
 8007a24:	4649      	mov	r1, r9
 8007a26:	f7f8 fe07 	bl	8000638 <__aeabi_dmul>
 8007a2a:	4652      	mov	r2, sl
 8007a2c:	465b      	mov	r3, fp
 8007a2e:	f7f9 f889 	bl	8000b44 <__aeabi_dcmpge>
 8007a32:	9e03      	ldr	r6, [sp, #12]
 8007a34:	4637      	mov	r7, r6
 8007a36:	2800      	cmp	r0, #0
 8007a38:	f040 8245 	bne.w	8007ec6 <_dtoa_r+0x93e>
 8007a3c:	9d01      	ldr	r5, [sp, #4]
 8007a3e:	2331      	movs	r3, #49	; 0x31
 8007a40:	f805 3b01 	strb.w	r3, [r5], #1
 8007a44:	9b00      	ldr	r3, [sp, #0]
 8007a46:	3301      	adds	r3, #1
 8007a48:	9300      	str	r3, [sp, #0]
 8007a4a:	e240      	b.n	8007ece <_dtoa_r+0x946>
 8007a4c:	07f2      	lsls	r2, r6, #31
 8007a4e:	d505      	bpl.n	8007a5c <_dtoa_r+0x4d4>
 8007a50:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007a54:	f7f8 fdf0 	bl	8000638 <__aeabi_dmul>
 8007a58:	3501      	adds	r5, #1
 8007a5a:	2301      	movs	r3, #1
 8007a5c:	1076      	asrs	r6, r6, #1
 8007a5e:	3708      	adds	r7, #8
 8007a60:	e777      	b.n	8007952 <_dtoa_r+0x3ca>
 8007a62:	2502      	movs	r5, #2
 8007a64:	e779      	b.n	800795a <_dtoa_r+0x3d2>
 8007a66:	9f00      	ldr	r7, [sp, #0]
 8007a68:	9e03      	ldr	r6, [sp, #12]
 8007a6a:	e794      	b.n	8007996 <_dtoa_r+0x40e>
 8007a6c:	9901      	ldr	r1, [sp, #4]
 8007a6e:	4b4c      	ldr	r3, [pc, #304]	; (8007ba0 <_dtoa_r+0x618>)
 8007a70:	4431      	add	r1, r6
 8007a72:	910d      	str	r1, [sp, #52]	; 0x34
 8007a74:	9908      	ldr	r1, [sp, #32]
 8007a76:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007a7a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007a7e:	2900      	cmp	r1, #0
 8007a80:	d043      	beq.n	8007b0a <_dtoa_r+0x582>
 8007a82:	494d      	ldr	r1, [pc, #308]	; (8007bb8 <_dtoa_r+0x630>)
 8007a84:	2000      	movs	r0, #0
 8007a86:	f7f8 ff01 	bl	800088c <__aeabi_ddiv>
 8007a8a:	4652      	mov	r2, sl
 8007a8c:	465b      	mov	r3, fp
 8007a8e:	f7f8 fc1b 	bl	80002c8 <__aeabi_dsub>
 8007a92:	9d01      	ldr	r5, [sp, #4]
 8007a94:	4682      	mov	sl, r0
 8007a96:	468b      	mov	fp, r1
 8007a98:	4649      	mov	r1, r9
 8007a9a:	4640      	mov	r0, r8
 8007a9c:	f7f9 f87c 	bl	8000b98 <__aeabi_d2iz>
 8007aa0:	4606      	mov	r6, r0
 8007aa2:	f7f8 fd5f 	bl	8000564 <__aeabi_i2d>
 8007aa6:	4602      	mov	r2, r0
 8007aa8:	460b      	mov	r3, r1
 8007aaa:	4640      	mov	r0, r8
 8007aac:	4649      	mov	r1, r9
 8007aae:	f7f8 fc0b 	bl	80002c8 <__aeabi_dsub>
 8007ab2:	3630      	adds	r6, #48	; 0x30
 8007ab4:	f805 6b01 	strb.w	r6, [r5], #1
 8007ab8:	4652      	mov	r2, sl
 8007aba:	465b      	mov	r3, fp
 8007abc:	4680      	mov	r8, r0
 8007abe:	4689      	mov	r9, r1
 8007ac0:	f7f9 f82c 	bl	8000b1c <__aeabi_dcmplt>
 8007ac4:	2800      	cmp	r0, #0
 8007ac6:	d163      	bne.n	8007b90 <_dtoa_r+0x608>
 8007ac8:	4642      	mov	r2, r8
 8007aca:	464b      	mov	r3, r9
 8007acc:	4936      	ldr	r1, [pc, #216]	; (8007ba8 <_dtoa_r+0x620>)
 8007ace:	2000      	movs	r0, #0
 8007ad0:	f7f8 fbfa 	bl	80002c8 <__aeabi_dsub>
 8007ad4:	4652      	mov	r2, sl
 8007ad6:	465b      	mov	r3, fp
 8007ad8:	f7f9 f820 	bl	8000b1c <__aeabi_dcmplt>
 8007adc:	2800      	cmp	r0, #0
 8007ade:	f040 80b5 	bne.w	8007c4c <_dtoa_r+0x6c4>
 8007ae2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007ae4:	429d      	cmp	r5, r3
 8007ae6:	d081      	beq.n	80079ec <_dtoa_r+0x464>
 8007ae8:	4b30      	ldr	r3, [pc, #192]	; (8007bac <_dtoa_r+0x624>)
 8007aea:	2200      	movs	r2, #0
 8007aec:	4650      	mov	r0, sl
 8007aee:	4659      	mov	r1, fp
 8007af0:	f7f8 fda2 	bl	8000638 <__aeabi_dmul>
 8007af4:	4b2d      	ldr	r3, [pc, #180]	; (8007bac <_dtoa_r+0x624>)
 8007af6:	4682      	mov	sl, r0
 8007af8:	468b      	mov	fp, r1
 8007afa:	4640      	mov	r0, r8
 8007afc:	4649      	mov	r1, r9
 8007afe:	2200      	movs	r2, #0
 8007b00:	f7f8 fd9a 	bl	8000638 <__aeabi_dmul>
 8007b04:	4680      	mov	r8, r0
 8007b06:	4689      	mov	r9, r1
 8007b08:	e7c6      	b.n	8007a98 <_dtoa_r+0x510>
 8007b0a:	4650      	mov	r0, sl
 8007b0c:	4659      	mov	r1, fp
 8007b0e:	f7f8 fd93 	bl	8000638 <__aeabi_dmul>
 8007b12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007b14:	9d01      	ldr	r5, [sp, #4]
 8007b16:	930f      	str	r3, [sp, #60]	; 0x3c
 8007b18:	4682      	mov	sl, r0
 8007b1a:	468b      	mov	fp, r1
 8007b1c:	4649      	mov	r1, r9
 8007b1e:	4640      	mov	r0, r8
 8007b20:	f7f9 f83a 	bl	8000b98 <__aeabi_d2iz>
 8007b24:	4606      	mov	r6, r0
 8007b26:	f7f8 fd1d 	bl	8000564 <__aeabi_i2d>
 8007b2a:	3630      	adds	r6, #48	; 0x30
 8007b2c:	4602      	mov	r2, r0
 8007b2e:	460b      	mov	r3, r1
 8007b30:	4640      	mov	r0, r8
 8007b32:	4649      	mov	r1, r9
 8007b34:	f7f8 fbc8 	bl	80002c8 <__aeabi_dsub>
 8007b38:	f805 6b01 	strb.w	r6, [r5], #1
 8007b3c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007b3e:	429d      	cmp	r5, r3
 8007b40:	4680      	mov	r8, r0
 8007b42:	4689      	mov	r9, r1
 8007b44:	f04f 0200 	mov.w	r2, #0
 8007b48:	d124      	bne.n	8007b94 <_dtoa_r+0x60c>
 8007b4a:	4b1b      	ldr	r3, [pc, #108]	; (8007bb8 <_dtoa_r+0x630>)
 8007b4c:	4650      	mov	r0, sl
 8007b4e:	4659      	mov	r1, fp
 8007b50:	f7f8 fbbc 	bl	80002cc <__adddf3>
 8007b54:	4602      	mov	r2, r0
 8007b56:	460b      	mov	r3, r1
 8007b58:	4640      	mov	r0, r8
 8007b5a:	4649      	mov	r1, r9
 8007b5c:	f7f8 fffc 	bl	8000b58 <__aeabi_dcmpgt>
 8007b60:	2800      	cmp	r0, #0
 8007b62:	d173      	bne.n	8007c4c <_dtoa_r+0x6c4>
 8007b64:	4652      	mov	r2, sl
 8007b66:	465b      	mov	r3, fp
 8007b68:	4913      	ldr	r1, [pc, #76]	; (8007bb8 <_dtoa_r+0x630>)
 8007b6a:	2000      	movs	r0, #0
 8007b6c:	f7f8 fbac 	bl	80002c8 <__aeabi_dsub>
 8007b70:	4602      	mov	r2, r0
 8007b72:	460b      	mov	r3, r1
 8007b74:	4640      	mov	r0, r8
 8007b76:	4649      	mov	r1, r9
 8007b78:	f7f8 ffd0 	bl	8000b1c <__aeabi_dcmplt>
 8007b7c:	2800      	cmp	r0, #0
 8007b7e:	f43f af35 	beq.w	80079ec <_dtoa_r+0x464>
 8007b82:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007b84:	1e6b      	subs	r3, r5, #1
 8007b86:	930f      	str	r3, [sp, #60]	; 0x3c
 8007b88:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007b8c:	2b30      	cmp	r3, #48	; 0x30
 8007b8e:	d0f8      	beq.n	8007b82 <_dtoa_r+0x5fa>
 8007b90:	9700      	str	r7, [sp, #0]
 8007b92:	e049      	b.n	8007c28 <_dtoa_r+0x6a0>
 8007b94:	4b05      	ldr	r3, [pc, #20]	; (8007bac <_dtoa_r+0x624>)
 8007b96:	f7f8 fd4f 	bl	8000638 <__aeabi_dmul>
 8007b9a:	4680      	mov	r8, r0
 8007b9c:	4689      	mov	r9, r1
 8007b9e:	e7bd      	b.n	8007b1c <_dtoa_r+0x594>
 8007ba0:	0800a5d0 	.word	0x0800a5d0
 8007ba4:	0800a5a8 	.word	0x0800a5a8
 8007ba8:	3ff00000 	.word	0x3ff00000
 8007bac:	40240000 	.word	0x40240000
 8007bb0:	401c0000 	.word	0x401c0000
 8007bb4:	40140000 	.word	0x40140000
 8007bb8:	3fe00000 	.word	0x3fe00000
 8007bbc:	9d01      	ldr	r5, [sp, #4]
 8007bbe:	4656      	mov	r6, sl
 8007bc0:	465f      	mov	r7, fp
 8007bc2:	4642      	mov	r2, r8
 8007bc4:	464b      	mov	r3, r9
 8007bc6:	4630      	mov	r0, r6
 8007bc8:	4639      	mov	r1, r7
 8007bca:	f7f8 fe5f 	bl	800088c <__aeabi_ddiv>
 8007bce:	f7f8 ffe3 	bl	8000b98 <__aeabi_d2iz>
 8007bd2:	4682      	mov	sl, r0
 8007bd4:	f7f8 fcc6 	bl	8000564 <__aeabi_i2d>
 8007bd8:	4642      	mov	r2, r8
 8007bda:	464b      	mov	r3, r9
 8007bdc:	f7f8 fd2c 	bl	8000638 <__aeabi_dmul>
 8007be0:	4602      	mov	r2, r0
 8007be2:	460b      	mov	r3, r1
 8007be4:	4630      	mov	r0, r6
 8007be6:	4639      	mov	r1, r7
 8007be8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8007bec:	f7f8 fb6c 	bl	80002c8 <__aeabi_dsub>
 8007bf0:	f805 6b01 	strb.w	r6, [r5], #1
 8007bf4:	9e01      	ldr	r6, [sp, #4]
 8007bf6:	9f03      	ldr	r7, [sp, #12]
 8007bf8:	1bae      	subs	r6, r5, r6
 8007bfa:	42b7      	cmp	r7, r6
 8007bfc:	4602      	mov	r2, r0
 8007bfe:	460b      	mov	r3, r1
 8007c00:	d135      	bne.n	8007c6e <_dtoa_r+0x6e6>
 8007c02:	f7f8 fb63 	bl	80002cc <__adddf3>
 8007c06:	4642      	mov	r2, r8
 8007c08:	464b      	mov	r3, r9
 8007c0a:	4606      	mov	r6, r0
 8007c0c:	460f      	mov	r7, r1
 8007c0e:	f7f8 ffa3 	bl	8000b58 <__aeabi_dcmpgt>
 8007c12:	b9d0      	cbnz	r0, 8007c4a <_dtoa_r+0x6c2>
 8007c14:	4642      	mov	r2, r8
 8007c16:	464b      	mov	r3, r9
 8007c18:	4630      	mov	r0, r6
 8007c1a:	4639      	mov	r1, r7
 8007c1c:	f7f8 ff74 	bl	8000b08 <__aeabi_dcmpeq>
 8007c20:	b110      	cbz	r0, 8007c28 <_dtoa_r+0x6a0>
 8007c22:	f01a 0f01 	tst.w	sl, #1
 8007c26:	d110      	bne.n	8007c4a <_dtoa_r+0x6c2>
 8007c28:	4620      	mov	r0, r4
 8007c2a:	ee18 1a10 	vmov	r1, s16
 8007c2e:	f000 fae9 	bl	8008204 <_Bfree>
 8007c32:	2300      	movs	r3, #0
 8007c34:	9800      	ldr	r0, [sp, #0]
 8007c36:	702b      	strb	r3, [r5, #0]
 8007c38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007c3a:	3001      	adds	r0, #1
 8007c3c:	6018      	str	r0, [r3, #0]
 8007c3e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	f43f acf1 	beq.w	8007628 <_dtoa_r+0xa0>
 8007c46:	601d      	str	r5, [r3, #0]
 8007c48:	e4ee      	b.n	8007628 <_dtoa_r+0xa0>
 8007c4a:	9f00      	ldr	r7, [sp, #0]
 8007c4c:	462b      	mov	r3, r5
 8007c4e:	461d      	mov	r5, r3
 8007c50:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007c54:	2a39      	cmp	r2, #57	; 0x39
 8007c56:	d106      	bne.n	8007c66 <_dtoa_r+0x6de>
 8007c58:	9a01      	ldr	r2, [sp, #4]
 8007c5a:	429a      	cmp	r2, r3
 8007c5c:	d1f7      	bne.n	8007c4e <_dtoa_r+0x6c6>
 8007c5e:	9901      	ldr	r1, [sp, #4]
 8007c60:	2230      	movs	r2, #48	; 0x30
 8007c62:	3701      	adds	r7, #1
 8007c64:	700a      	strb	r2, [r1, #0]
 8007c66:	781a      	ldrb	r2, [r3, #0]
 8007c68:	3201      	adds	r2, #1
 8007c6a:	701a      	strb	r2, [r3, #0]
 8007c6c:	e790      	b.n	8007b90 <_dtoa_r+0x608>
 8007c6e:	4ba6      	ldr	r3, [pc, #664]	; (8007f08 <_dtoa_r+0x980>)
 8007c70:	2200      	movs	r2, #0
 8007c72:	f7f8 fce1 	bl	8000638 <__aeabi_dmul>
 8007c76:	2200      	movs	r2, #0
 8007c78:	2300      	movs	r3, #0
 8007c7a:	4606      	mov	r6, r0
 8007c7c:	460f      	mov	r7, r1
 8007c7e:	f7f8 ff43 	bl	8000b08 <__aeabi_dcmpeq>
 8007c82:	2800      	cmp	r0, #0
 8007c84:	d09d      	beq.n	8007bc2 <_dtoa_r+0x63a>
 8007c86:	e7cf      	b.n	8007c28 <_dtoa_r+0x6a0>
 8007c88:	9a08      	ldr	r2, [sp, #32]
 8007c8a:	2a00      	cmp	r2, #0
 8007c8c:	f000 80d7 	beq.w	8007e3e <_dtoa_r+0x8b6>
 8007c90:	9a06      	ldr	r2, [sp, #24]
 8007c92:	2a01      	cmp	r2, #1
 8007c94:	f300 80ba 	bgt.w	8007e0c <_dtoa_r+0x884>
 8007c98:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007c9a:	2a00      	cmp	r2, #0
 8007c9c:	f000 80b2 	beq.w	8007e04 <_dtoa_r+0x87c>
 8007ca0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007ca4:	9e07      	ldr	r6, [sp, #28]
 8007ca6:	9d04      	ldr	r5, [sp, #16]
 8007ca8:	9a04      	ldr	r2, [sp, #16]
 8007caa:	441a      	add	r2, r3
 8007cac:	9204      	str	r2, [sp, #16]
 8007cae:	9a05      	ldr	r2, [sp, #20]
 8007cb0:	2101      	movs	r1, #1
 8007cb2:	441a      	add	r2, r3
 8007cb4:	4620      	mov	r0, r4
 8007cb6:	9205      	str	r2, [sp, #20]
 8007cb8:	f000 fb5c 	bl	8008374 <__i2b>
 8007cbc:	4607      	mov	r7, r0
 8007cbe:	2d00      	cmp	r5, #0
 8007cc0:	dd0c      	ble.n	8007cdc <_dtoa_r+0x754>
 8007cc2:	9b05      	ldr	r3, [sp, #20]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	dd09      	ble.n	8007cdc <_dtoa_r+0x754>
 8007cc8:	42ab      	cmp	r3, r5
 8007cca:	9a04      	ldr	r2, [sp, #16]
 8007ccc:	bfa8      	it	ge
 8007cce:	462b      	movge	r3, r5
 8007cd0:	1ad2      	subs	r2, r2, r3
 8007cd2:	9204      	str	r2, [sp, #16]
 8007cd4:	9a05      	ldr	r2, [sp, #20]
 8007cd6:	1aed      	subs	r5, r5, r3
 8007cd8:	1ad3      	subs	r3, r2, r3
 8007cda:	9305      	str	r3, [sp, #20]
 8007cdc:	9b07      	ldr	r3, [sp, #28]
 8007cde:	b31b      	cbz	r3, 8007d28 <_dtoa_r+0x7a0>
 8007ce0:	9b08      	ldr	r3, [sp, #32]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	f000 80af 	beq.w	8007e46 <_dtoa_r+0x8be>
 8007ce8:	2e00      	cmp	r6, #0
 8007cea:	dd13      	ble.n	8007d14 <_dtoa_r+0x78c>
 8007cec:	4639      	mov	r1, r7
 8007cee:	4632      	mov	r2, r6
 8007cf0:	4620      	mov	r0, r4
 8007cf2:	f000 fbff 	bl	80084f4 <__pow5mult>
 8007cf6:	ee18 2a10 	vmov	r2, s16
 8007cfa:	4601      	mov	r1, r0
 8007cfc:	4607      	mov	r7, r0
 8007cfe:	4620      	mov	r0, r4
 8007d00:	f000 fb4e 	bl	80083a0 <__multiply>
 8007d04:	ee18 1a10 	vmov	r1, s16
 8007d08:	4680      	mov	r8, r0
 8007d0a:	4620      	mov	r0, r4
 8007d0c:	f000 fa7a 	bl	8008204 <_Bfree>
 8007d10:	ee08 8a10 	vmov	s16, r8
 8007d14:	9b07      	ldr	r3, [sp, #28]
 8007d16:	1b9a      	subs	r2, r3, r6
 8007d18:	d006      	beq.n	8007d28 <_dtoa_r+0x7a0>
 8007d1a:	ee18 1a10 	vmov	r1, s16
 8007d1e:	4620      	mov	r0, r4
 8007d20:	f000 fbe8 	bl	80084f4 <__pow5mult>
 8007d24:	ee08 0a10 	vmov	s16, r0
 8007d28:	2101      	movs	r1, #1
 8007d2a:	4620      	mov	r0, r4
 8007d2c:	f000 fb22 	bl	8008374 <__i2b>
 8007d30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	4606      	mov	r6, r0
 8007d36:	f340 8088 	ble.w	8007e4a <_dtoa_r+0x8c2>
 8007d3a:	461a      	mov	r2, r3
 8007d3c:	4601      	mov	r1, r0
 8007d3e:	4620      	mov	r0, r4
 8007d40:	f000 fbd8 	bl	80084f4 <__pow5mult>
 8007d44:	9b06      	ldr	r3, [sp, #24]
 8007d46:	2b01      	cmp	r3, #1
 8007d48:	4606      	mov	r6, r0
 8007d4a:	f340 8081 	ble.w	8007e50 <_dtoa_r+0x8c8>
 8007d4e:	f04f 0800 	mov.w	r8, #0
 8007d52:	6933      	ldr	r3, [r6, #16]
 8007d54:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007d58:	6918      	ldr	r0, [r3, #16]
 8007d5a:	f000 fabb 	bl	80082d4 <__hi0bits>
 8007d5e:	f1c0 0020 	rsb	r0, r0, #32
 8007d62:	9b05      	ldr	r3, [sp, #20]
 8007d64:	4418      	add	r0, r3
 8007d66:	f010 001f 	ands.w	r0, r0, #31
 8007d6a:	f000 8092 	beq.w	8007e92 <_dtoa_r+0x90a>
 8007d6e:	f1c0 0320 	rsb	r3, r0, #32
 8007d72:	2b04      	cmp	r3, #4
 8007d74:	f340 808a 	ble.w	8007e8c <_dtoa_r+0x904>
 8007d78:	f1c0 001c 	rsb	r0, r0, #28
 8007d7c:	9b04      	ldr	r3, [sp, #16]
 8007d7e:	4403      	add	r3, r0
 8007d80:	9304      	str	r3, [sp, #16]
 8007d82:	9b05      	ldr	r3, [sp, #20]
 8007d84:	4403      	add	r3, r0
 8007d86:	4405      	add	r5, r0
 8007d88:	9305      	str	r3, [sp, #20]
 8007d8a:	9b04      	ldr	r3, [sp, #16]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	dd07      	ble.n	8007da0 <_dtoa_r+0x818>
 8007d90:	ee18 1a10 	vmov	r1, s16
 8007d94:	461a      	mov	r2, r3
 8007d96:	4620      	mov	r0, r4
 8007d98:	f000 fc06 	bl	80085a8 <__lshift>
 8007d9c:	ee08 0a10 	vmov	s16, r0
 8007da0:	9b05      	ldr	r3, [sp, #20]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	dd05      	ble.n	8007db2 <_dtoa_r+0x82a>
 8007da6:	4631      	mov	r1, r6
 8007da8:	461a      	mov	r2, r3
 8007daa:	4620      	mov	r0, r4
 8007dac:	f000 fbfc 	bl	80085a8 <__lshift>
 8007db0:	4606      	mov	r6, r0
 8007db2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d06e      	beq.n	8007e96 <_dtoa_r+0x90e>
 8007db8:	ee18 0a10 	vmov	r0, s16
 8007dbc:	4631      	mov	r1, r6
 8007dbe:	f000 fc63 	bl	8008688 <__mcmp>
 8007dc2:	2800      	cmp	r0, #0
 8007dc4:	da67      	bge.n	8007e96 <_dtoa_r+0x90e>
 8007dc6:	9b00      	ldr	r3, [sp, #0]
 8007dc8:	3b01      	subs	r3, #1
 8007dca:	ee18 1a10 	vmov	r1, s16
 8007dce:	9300      	str	r3, [sp, #0]
 8007dd0:	220a      	movs	r2, #10
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	4620      	mov	r0, r4
 8007dd6:	f000 fa37 	bl	8008248 <__multadd>
 8007dda:	9b08      	ldr	r3, [sp, #32]
 8007ddc:	ee08 0a10 	vmov	s16, r0
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	f000 81b1 	beq.w	8008148 <_dtoa_r+0xbc0>
 8007de6:	2300      	movs	r3, #0
 8007de8:	4639      	mov	r1, r7
 8007dea:	220a      	movs	r2, #10
 8007dec:	4620      	mov	r0, r4
 8007dee:	f000 fa2b 	bl	8008248 <__multadd>
 8007df2:	9b02      	ldr	r3, [sp, #8]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	4607      	mov	r7, r0
 8007df8:	f300 808e 	bgt.w	8007f18 <_dtoa_r+0x990>
 8007dfc:	9b06      	ldr	r3, [sp, #24]
 8007dfe:	2b02      	cmp	r3, #2
 8007e00:	dc51      	bgt.n	8007ea6 <_dtoa_r+0x91e>
 8007e02:	e089      	b.n	8007f18 <_dtoa_r+0x990>
 8007e04:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007e06:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007e0a:	e74b      	b.n	8007ca4 <_dtoa_r+0x71c>
 8007e0c:	9b03      	ldr	r3, [sp, #12]
 8007e0e:	1e5e      	subs	r6, r3, #1
 8007e10:	9b07      	ldr	r3, [sp, #28]
 8007e12:	42b3      	cmp	r3, r6
 8007e14:	bfbf      	itttt	lt
 8007e16:	9b07      	ldrlt	r3, [sp, #28]
 8007e18:	9607      	strlt	r6, [sp, #28]
 8007e1a:	1af2      	sublt	r2, r6, r3
 8007e1c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007e1e:	bfb6      	itet	lt
 8007e20:	189b      	addlt	r3, r3, r2
 8007e22:	1b9e      	subge	r6, r3, r6
 8007e24:	930a      	strlt	r3, [sp, #40]	; 0x28
 8007e26:	9b03      	ldr	r3, [sp, #12]
 8007e28:	bfb8      	it	lt
 8007e2a:	2600      	movlt	r6, #0
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	bfb7      	itett	lt
 8007e30:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8007e34:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8007e38:	1a9d      	sublt	r5, r3, r2
 8007e3a:	2300      	movlt	r3, #0
 8007e3c:	e734      	b.n	8007ca8 <_dtoa_r+0x720>
 8007e3e:	9e07      	ldr	r6, [sp, #28]
 8007e40:	9d04      	ldr	r5, [sp, #16]
 8007e42:	9f08      	ldr	r7, [sp, #32]
 8007e44:	e73b      	b.n	8007cbe <_dtoa_r+0x736>
 8007e46:	9a07      	ldr	r2, [sp, #28]
 8007e48:	e767      	b.n	8007d1a <_dtoa_r+0x792>
 8007e4a:	9b06      	ldr	r3, [sp, #24]
 8007e4c:	2b01      	cmp	r3, #1
 8007e4e:	dc18      	bgt.n	8007e82 <_dtoa_r+0x8fa>
 8007e50:	f1ba 0f00 	cmp.w	sl, #0
 8007e54:	d115      	bne.n	8007e82 <_dtoa_r+0x8fa>
 8007e56:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007e5a:	b993      	cbnz	r3, 8007e82 <_dtoa_r+0x8fa>
 8007e5c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007e60:	0d1b      	lsrs	r3, r3, #20
 8007e62:	051b      	lsls	r3, r3, #20
 8007e64:	b183      	cbz	r3, 8007e88 <_dtoa_r+0x900>
 8007e66:	9b04      	ldr	r3, [sp, #16]
 8007e68:	3301      	adds	r3, #1
 8007e6a:	9304      	str	r3, [sp, #16]
 8007e6c:	9b05      	ldr	r3, [sp, #20]
 8007e6e:	3301      	adds	r3, #1
 8007e70:	9305      	str	r3, [sp, #20]
 8007e72:	f04f 0801 	mov.w	r8, #1
 8007e76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	f47f af6a 	bne.w	8007d52 <_dtoa_r+0x7ca>
 8007e7e:	2001      	movs	r0, #1
 8007e80:	e76f      	b.n	8007d62 <_dtoa_r+0x7da>
 8007e82:	f04f 0800 	mov.w	r8, #0
 8007e86:	e7f6      	b.n	8007e76 <_dtoa_r+0x8ee>
 8007e88:	4698      	mov	r8, r3
 8007e8a:	e7f4      	b.n	8007e76 <_dtoa_r+0x8ee>
 8007e8c:	f43f af7d 	beq.w	8007d8a <_dtoa_r+0x802>
 8007e90:	4618      	mov	r0, r3
 8007e92:	301c      	adds	r0, #28
 8007e94:	e772      	b.n	8007d7c <_dtoa_r+0x7f4>
 8007e96:	9b03      	ldr	r3, [sp, #12]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	dc37      	bgt.n	8007f0c <_dtoa_r+0x984>
 8007e9c:	9b06      	ldr	r3, [sp, #24]
 8007e9e:	2b02      	cmp	r3, #2
 8007ea0:	dd34      	ble.n	8007f0c <_dtoa_r+0x984>
 8007ea2:	9b03      	ldr	r3, [sp, #12]
 8007ea4:	9302      	str	r3, [sp, #8]
 8007ea6:	9b02      	ldr	r3, [sp, #8]
 8007ea8:	b96b      	cbnz	r3, 8007ec6 <_dtoa_r+0x93e>
 8007eaa:	4631      	mov	r1, r6
 8007eac:	2205      	movs	r2, #5
 8007eae:	4620      	mov	r0, r4
 8007eb0:	f000 f9ca 	bl	8008248 <__multadd>
 8007eb4:	4601      	mov	r1, r0
 8007eb6:	4606      	mov	r6, r0
 8007eb8:	ee18 0a10 	vmov	r0, s16
 8007ebc:	f000 fbe4 	bl	8008688 <__mcmp>
 8007ec0:	2800      	cmp	r0, #0
 8007ec2:	f73f adbb 	bgt.w	8007a3c <_dtoa_r+0x4b4>
 8007ec6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ec8:	9d01      	ldr	r5, [sp, #4]
 8007eca:	43db      	mvns	r3, r3
 8007ecc:	9300      	str	r3, [sp, #0]
 8007ece:	f04f 0800 	mov.w	r8, #0
 8007ed2:	4631      	mov	r1, r6
 8007ed4:	4620      	mov	r0, r4
 8007ed6:	f000 f995 	bl	8008204 <_Bfree>
 8007eda:	2f00      	cmp	r7, #0
 8007edc:	f43f aea4 	beq.w	8007c28 <_dtoa_r+0x6a0>
 8007ee0:	f1b8 0f00 	cmp.w	r8, #0
 8007ee4:	d005      	beq.n	8007ef2 <_dtoa_r+0x96a>
 8007ee6:	45b8      	cmp	r8, r7
 8007ee8:	d003      	beq.n	8007ef2 <_dtoa_r+0x96a>
 8007eea:	4641      	mov	r1, r8
 8007eec:	4620      	mov	r0, r4
 8007eee:	f000 f989 	bl	8008204 <_Bfree>
 8007ef2:	4639      	mov	r1, r7
 8007ef4:	4620      	mov	r0, r4
 8007ef6:	f000 f985 	bl	8008204 <_Bfree>
 8007efa:	e695      	b.n	8007c28 <_dtoa_r+0x6a0>
 8007efc:	2600      	movs	r6, #0
 8007efe:	4637      	mov	r7, r6
 8007f00:	e7e1      	b.n	8007ec6 <_dtoa_r+0x93e>
 8007f02:	9700      	str	r7, [sp, #0]
 8007f04:	4637      	mov	r7, r6
 8007f06:	e599      	b.n	8007a3c <_dtoa_r+0x4b4>
 8007f08:	40240000 	.word	0x40240000
 8007f0c:	9b08      	ldr	r3, [sp, #32]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	f000 80ca 	beq.w	80080a8 <_dtoa_r+0xb20>
 8007f14:	9b03      	ldr	r3, [sp, #12]
 8007f16:	9302      	str	r3, [sp, #8]
 8007f18:	2d00      	cmp	r5, #0
 8007f1a:	dd05      	ble.n	8007f28 <_dtoa_r+0x9a0>
 8007f1c:	4639      	mov	r1, r7
 8007f1e:	462a      	mov	r2, r5
 8007f20:	4620      	mov	r0, r4
 8007f22:	f000 fb41 	bl	80085a8 <__lshift>
 8007f26:	4607      	mov	r7, r0
 8007f28:	f1b8 0f00 	cmp.w	r8, #0
 8007f2c:	d05b      	beq.n	8007fe6 <_dtoa_r+0xa5e>
 8007f2e:	6879      	ldr	r1, [r7, #4]
 8007f30:	4620      	mov	r0, r4
 8007f32:	f000 f927 	bl	8008184 <_Balloc>
 8007f36:	4605      	mov	r5, r0
 8007f38:	b928      	cbnz	r0, 8007f46 <_dtoa_r+0x9be>
 8007f3a:	4b87      	ldr	r3, [pc, #540]	; (8008158 <_dtoa_r+0xbd0>)
 8007f3c:	4602      	mov	r2, r0
 8007f3e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007f42:	f7ff bb3b 	b.w	80075bc <_dtoa_r+0x34>
 8007f46:	693a      	ldr	r2, [r7, #16]
 8007f48:	3202      	adds	r2, #2
 8007f4a:	0092      	lsls	r2, r2, #2
 8007f4c:	f107 010c 	add.w	r1, r7, #12
 8007f50:	300c      	adds	r0, #12
 8007f52:	f7fe fcfd 	bl	8006950 <memcpy>
 8007f56:	2201      	movs	r2, #1
 8007f58:	4629      	mov	r1, r5
 8007f5a:	4620      	mov	r0, r4
 8007f5c:	f000 fb24 	bl	80085a8 <__lshift>
 8007f60:	9b01      	ldr	r3, [sp, #4]
 8007f62:	f103 0901 	add.w	r9, r3, #1
 8007f66:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8007f6a:	4413      	add	r3, r2
 8007f6c:	9305      	str	r3, [sp, #20]
 8007f6e:	f00a 0301 	and.w	r3, sl, #1
 8007f72:	46b8      	mov	r8, r7
 8007f74:	9304      	str	r3, [sp, #16]
 8007f76:	4607      	mov	r7, r0
 8007f78:	4631      	mov	r1, r6
 8007f7a:	ee18 0a10 	vmov	r0, s16
 8007f7e:	f7ff fa77 	bl	8007470 <quorem>
 8007f82:	4641      	mov	r1, r8
 8007f84:	9002      	str	r0, [sp, #8]
 8007f86:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007f8a:	ee18 0a10 	vmov	r0, s16
 8007f8e:	f000 fb7b 	bl	8008688 <__mcmp>
 8007f92:	463a      	mov	r2, r7
 8007f94:	9003      	str	r0, [sp, #12]
 8007f96:	4631      	mov	r1, r6
 8007f98:	4620      	mov	r0, r4
 8007f9a:	f000 fb91 	bl	80086c0 <__mdiff>
 8007f9e:	68c2      	ldr	r2, [r0, #12]
 8007fa0:	f109 3bff 	add.w	fp, r9, #4294967295
 8007fa4:	4605      	mov	r5, r0
 8007fa6:	bb02      	cbnz	r2, 8007fea <_dtoa_r+0xa62>
 8007fa8:	4601      	mov	r1, r0
 8007faa:	ee18 0a10 	vmov	r0, s16
 8007fae:	f000 fb6b 	bl	8008688 <__mcmp>
 8007fb2:	4602      	mov	r2, r0
 8007fb4:	4629      	mov	r1, r5
 8007fb6:	4620      	mov	r0, r4
 8007fb8:	9207      	str	r2, [sp, #28]
 8007fba:	f000 f923 	bl	8008204 <_Bfree>
 8007fbe:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8007fc2:	ea43 0102 	orr.w	r1, r3, r2
 8007fc6:	9b04      	ldr	r3, [sp, #16]
 8007fc8:	430b      	orrs	r3, r1
 8007fca:	464d      	mov	r5, r9
 8007fcc:	d10f      	bne.n	8007fee <_dtoa_r+0xa66>
 8007fce:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007fd2:	d02a      	beq.n	800802a <_dtoa_r+0xaa2>
 8007fd4:	9b03      	ldr	r3, [sp, #12]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	dd02      	ble.n	8007fe0 <_dtoa_r+0xa58>
 8007fda:	9b02      	ldr	r3, [sp, #8]
 8007fdc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8007fe0:	f88b a000 	strb.w	sl, [fp]
 8007fe4:	e775      	b.n	8007ed2 <_dtoa_r+0x94a>
 8007fe6:	4638      	mov	r0, r7
 8007fe8:	e7ba      	b.n	8007f60 <_dtoa_r+0x9d8>
 8007fea:	2201      	movs	r2, #1
 8007fec:	e7e2      	b.n	8007fb4 <_dtoa_r+0xa2c>
 8007fee:	9b03      	ldr	r3, [sp, #12]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	db04      	blt.n	8007ffe <_dtoa_r+0xa76>
 8007ff4:	9906      	ldr	r1, [sp, #24]
 8007ff6:	430b      	orrs	r3, r1
 8007ff8:	9904      	ldr	r1, [sp, #16]
 8007ffa:	430b      	orrs	r3, r1
 8007ffc:	d122      	bne.n	8008044 <_dtoa_r+0xabc>
 8007ffe:	2a00      	cmp	r2, #0
 8008000:	ddee      	ble.n	8007fe0 <_dtoa_r+0xa58>
 8008002:	ee18 1a10 	vmov	r1, s16
 8008006:	2201      	movs	r2, #1
 8008008:	4620      	mov	r0, r4
 800800a:	f000 facd 	bl	80085a8 <__lshift>
 800800e:	4631      	mov	r1, r6
 8008010:	ee08 0a10 	vmov	s16, r0
 8008014:	f000 fb38 	bl	8008688 <__mcmp>
 8008018:	2800      	cmp	r0, #0
 800801a:	dc03      	bgt.n	8008024 <_dtoa_r+0xa9c>
 800801c:	d1e0      	bne.n	8007fe0 <_dtoa_r+0xa58>
 800801e:	f01a 0f01 	tst.w	sl, #1
 8008022:	d0dd      	beq.n	8007fe0 <_dtoa_r+0xa58>
 8008024:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008028:	d1d7      	bne.n	8007fda <_dtoa_r+0xa52>
 800802a:	2339      	movs	r3, #57	; 0x39
 800802c:	f88b 3000 	strb.w	r3, [fp]
 8008030:	462b      	mov	r3, r5
 8008032:	461d      	mov	r5, r3
 8008034:	3b01      	subs	r3, #1
 8008036:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800803a:	2a39      	cmp	r2, #57	; 0x39
 800803c:	d071      	beq.n	8008122 <_dtoa_r+0xb9a>
 800803e:	3201      	adds	r2, #1
 8008040:	701a      	strb	r2, [r3, #0]
 8008042:	e746      	b.n	8007ed2 <_dtoa_r+0x94a>
 8008044:	2a00      	cmp	r2, #0
 8008046:	dd07      	ble.n	8008058 <_dtoa_r+0xad0>
 8008048:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800804c:	d0ed      	beq.n	800802a <_dtoa_r+0xaa2>
 800804e:	f10a 0301 	add.w	r3, sl, #1
 8008052:	f88b 3000 	strb.w	r3, [fp]
 8008056:	e73c      	b.n	8007ed2 <_dtoa_r+0x94a>
 8008058:	9b05      	ldr	r3, [sp, #20]
 800805a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800805e:	4599      	cmp	r9, r3
 8008060:	d047      	beq.n	80080f2 <_dtoa_r+0xb6a>
 8008062:	ee18 1a10 	vmov	r1, s16
 8008066:	2300      	movs	r3, #0
 8008068:	220a      	movs	r2, #10
 800806a:	4620      	mov	r0, r4
 800806c:	f000 f8ec 	bl	8008248 <__multadd>
 8008070:	45b8      	cmp	r8, r7
 8008072:	ee08 0a10 	vmov	s16, r0
 8008076:	f04f 0300 	mov.w	r3, #0
 800807a:	f04f 020a 	mov.w	r2, #10
 800807e:	4641      	mov	r1, r8
 8008080:	4620      	mov	r0, r4
 8008082:	d106      	bne.n	8008092 <_dtoa_r+0xb0a>
 8008084:	f000 f8e0 	bl	8008248 <__multadd>
 8008088:	4680      	mov	r8, r0
 800808a:	4607      	mov	r7, r0
 800808c:	f109 0901 	add.w	r9, r9, #1
 8008090:	e772      	b.n	8007f78 <_dtoa_r+0x9f0>
 8008092:	f000 f8d9 	bl	8008248 <__multadd>
 8008096:	4639      	mov	r1, r7
 8008098:	4680      	mov	r8, r0
 800809a:	2300      	movs	r3, #0
 800809c:	220a      	movs	r2, #10
 800809e:	4620      	mov	r0, r4
 80080a0:	f000 f8d2 	bl	8008248 <__multadd>
 80080a4:	4607      	mov	r7, r0
 80080a6:	e7f1      	b.n	800808c <_dtoa_r+0xb04>
 80080a8:	9b03      	ldr	r3, [sp, #12]
 80080aa:	9302      	str	r3, [sp, #8]
 80080ac:	9d01      	ldr	r5, [sp, #4]
 80080ae:	ee18 0a10 	vmov	r0, s16
 80080b2:	4631      	mov	r1, r6
 80080b4:	f7ff f9dc 	bl	8007470 <quorem>
 80080b8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80080bc:	9b01      	ldr	r3, [sp, #4]
 80080be:	f805 ab01 	strb.w	sl, [r5], #1
 80080c2:	1aea      	subs	r2, r5, r3
 80080c4:	9b02      	ldr	r3, [sp, #8]
 80080c6:	4293      	cmp	r3, r2
 80080c8:	dd09      	ble.n	80080de <_dtoa_r+0xb56>
 80080ca:	ee18 1a10 	vmov	r1, s16
 80080ce:	2300      	movs	r3, #0
 80080d0:	220a      	movs	r2, #10
 80080d2:	4620      	mov	r0, r4
 80080d4:	f000 f8b8 	bl	8008248 <__multadd>
 80080d8:	ee08 0a10 	vmov	s16, r0
 80080dc:	e7e7      	b.n	80080ae <_dtoa_r+0xb26>
 80080de:	9b02      	ldr	r3, [sp, #8]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	bfc8      	it	gt
 80080e4:	461d      	movgt	r5, r3
 80080e6:	9b01      	ldr	r3, [sp, #4]
 80080e8:	bfd8      	it	le
 80080ea:	2501      	movle	r5, #1
 80080ec:	441d      	add	r5, r3
 80080ee:	f04f 0800 	mov.w	r8, #0
 80080f2:	ee18 1a10 	vmov	r1, s16
 80080f6:	2201      	movs	r2, #1
 80080f8:	4620      	mov	r0, r4
 80080fa:	f000 fa55 	bl	80085a8 <__lshift>
 80080fe:	4631      	mov	r1, r6
 8008100:	ee08 0a10 	vmov	s16, r0
 8008104:	f000 fac0 	bl	8008688 <__mcmp>
 8008108:	2800      	cmp	r0, #0
 800810a:	dc91      	bgt.n	8008030 <_dtoa_r+0xaa8>
 800810c:	d102      	bne.n	8008114 <_dtoa_r+0xb8c>
 800810e:	f01a 0f01 	tst.w	sl, #1
 8008112:	d18d      	bne.n	8008030 <_dtoa_r+0xaa8>
 8008114:	462b      	mov	r3, r5
 8008116:	461d      	mov	r5, r3
 8008118:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800811c:	2a30      	cmp	r2, #48	; 0x30
 800811e:	d0fa      	beq.n	8008116 <_dtoa_r+0xb8e>
 8008120:	e6d7      	b.n	8007ed2 <_dtoa_r+0x94a>
 8008122:	9a01      	ldr	r2, [sp, #4]
 8008124:	429a      	cmp	r2, r3
 8008126:	d184      	bne.n	8008032 <_dtoa_r+0xaaa>
 8008128:	9b00      	ldr	r3, [sp, #0]
 800812a:	3301      	adds	r3, #1
 800812c:	9300      	str	r3, [sp, #0]
 800812e:	2331      	movs	r3, #49	; 0x31
 8008130:	7013      	strb	r3, [r2, #0]
 8008132:	e6ce      	b.n	8007ed2 <_dtoa_r+0x94a>
 8008134:	4b09      	ldr	r3, [pc, #36]	; (800815c <_dtoa_r+0xbd4>)
 8008136:	f7ff ba95 	b.w	8007664 <_dtoa_r+0xdc>
 800813a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800813c:	2b00      	cmp	r3, #0
 800813e:	f47f aa6e 	bne.w	800761e <_dtoa_r+0x96>
 8008142:	4b07      	ldr	r3, [pc, #28]	; (8008160 <_dtoa_r+0xbd8>)
 8008144:	f7ff ba8e 	b.w	8007664 <_dtoa_r+0xdc>
 8008148:	9b02      	ldr	r3, [sp, #8]
 800814a:	2b00      	cmp	r3, #0
 800814c:	dcae      	bgt.n	80080ac <_dtoa_r+0xb24>
 800814e:	9b06      	ldr	r3, [sp, #24]
 8008150:	2b02      	cmp	r3, #2
 8008152:	f73f aea8 	bgt.w	8007ea6 <_dtoa_r+0x91e>
 8008156:	e7a9      	b.n	80080ac <_dtoa_r+0xb24>
 8008158:	0800a53b 	.word	0x0800a53b
 800815c:	0800a498 	.word	0x0800a498
 8008160:	0800a4bc 	.word	0x0800a4bc

08008164 <_localeconv_r>:
 8008164:	4800      	ldr	r0, [pc, #0]	; (8008168 <_localeconv_r+0x4>)
 8008166:	4770      	bx	lr
 8008168:	20000890 	.word	0x20000890

0800816c <__malloc_lock>:
 800816c:	4801      	ldr	r0, [pc, #4]	; (8008174 <__malloc_lock+0x8>)
 800816e:	f000 bd5e 	b.w	8008c2e <__retarget_lock_acquire_recursive>
 8008172:	bf00      	nop
 8008174:	20000ad4 	.word	0x20000ad4

08008178 <__malloc_unlock>:
 8008178:	4801      	ldr	r0, [pc, #4]	; (8008180 <__malloc_unlock+0x8>)
 800817a:	f000 bd59 	b.w	8008c30 <__retarget_lock_release_recursive>
 800817e:	bf00      	nop
 8008180:	20000ad4 	.word	0x20000ad4

08008184 <_Balloc>:
 8008184:	b570      	push	{r4, r5, r6, lr}
 8008186:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008188:	4604      	mov	r4, r0
 800818a:	460d      	mov	r5, r1
 800818c:	b976      	cbnz	r6, 80081ac <_Balloc+0x28>
 800818e:	2010      	movs	r0, #16
 8008190:	f7fe fbd6 	bl	8006940 <malloc>
 8008194:	4602      	mov	r2, r0
 8008196:	6260      	str	r0, [r4, #36]	; 0x24
 8008198:	b920      	cbnz	r0, 80081a4 <_Balloc+0x20>
 800819a:	4b18      	ldr	r3, [pc, #96]	; (80081fc <_Balloc+0x78>)
 800819c:	4818      	ldr	r0, [pc, #96]	; (8008200 <_Balloc+0x7c>)
 800819e:	2166      	movs	r1, #102	; 0x66
 80081a0:	f000 fd14 	bl	8008bcc <__assert_func>
 80081a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80081a8:	6006      	str	r6, [r0, #0]
 80081aa:	60c6      	str	r6, [r0, #12]
 80081ac:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80081ae:	68f3      	ldr	r3, [r6, #12]
 80081b0:	b183      	cbz	r3, 80081d4 <_Balloc+0x50>
 80081b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80081b4:	68db      	ldr	r3, [r3, #12]
 80081b6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80081ba:	b9b8      	cbnz	r0, 80081ec <_Balloc+0x68>
 80081bc:	2101      	movs	r1, #1
 80081be:	fa01 f605 	lsl.w	r6, r1, r5
 80081c2:	1d72      	adds	r2, r6, #5
 80081c4:	0092      	lsls	r2, r2, #2
 80081c6:	4620      	mov	r0, r4
 80081c8:	f000 fb60 	bl	800888c <_calloc_r>
 80081cc:	b160      	cbz	r0, 80081e8 <_Balloc+0x64>
 80081ce:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80081d2:	e00e      	b.n	80081f2 <_Balloc+0x6e>
 80081d4:	2221      	movs	r2, #33	; 0x21
 80081d6:	2104      	movs	r1, #4
 80081d8:	4620      	mov	r0, r4
 80081da:	f000 fb57 	bl	800888c <_calloc_r>
 80081de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80081e0:	60f0      	str	r0, [r6, #12]
 80081e2:	68db      	ldr	r3, [r3, #12]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d1e4      	bne.n	80081b2 <_Balloc+0x2e>
 80081e8:	2000      	movs	r0, #0
 80081ea:	bd70      	pop	{r4, r5, r6, pc}
 80081ec:	6802      	ldr	r2, [r0, #0]
 80081ee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80081f2:	2300      	movs	r3, #0
 80081f4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80081f8:	e7f7      	b.n	80081ea <_Balloc+0x66>
 80081fa:	bf00      	nop
 80081fc:	0800a4c9 	.word	0x0800a4c9
 8008200:	0800a54c 	.word	0x0800a54c

08008204 <_Bfree>:
 8008204:	b570      	push	{r4, r5, r6, lr}
 8008206:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008208:	4605      	mov	r5, r0
 800820a:	460c      	mov	r4, r1
 800820c:	b976      	cbnz	r6, 800822c <_Bfree+0x28>
 800820e:	2010      	movs	r0, #16
 8008210:	f7fe fb96 	bl	8006940 <malloc>
 8008214:	4602      	mov	r2, r0
 8008216:	6268      	str	r0, [r5, #36]	; 0x24
 8008218:	b920      	cbnz	r0, 8008224 <_Bfree+0x20>
 800821a:	4b09      	ldr	r3, [pc, #36]	; (8008240 <_Bfree+0x3c>)
 800821c:	4809      	ldr	r0, [pc, #36]	; (8008244 <_Bfree+0x40>)
 800821e:	218a      	movs	r1, #138	; 0x8a
 8008220:	f000 fcd4 	bl	8008bcc <__assert_func>
 8008224:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008228:	6006      	str	r6, [r0, #0]
 800822a:	60c6      	str	r6, [r0, #12]
 800822c:	b13c      	cbz	r4, 800823e <_Bfree+0x3a>
 800822e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008230:	6862      	ldr	r2, [r4, #4]
 8008232:	68db      	ldr	r3, [r3, #12]
 8008234:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008238:	6021      	str	r1, [r4, #0]
 800823a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800823e:	bd70      	pop	{r4, r5, r6, pc}
 8008240:	0800a4c9 	.word	0x0800a4c9
 8008244:	0800a54c 	.word	0x0800a54c

08008248 <__multadd>:
 8008248:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800824c:	690d      	ldr	r5, [r1, #16]
 800824e:	4607      	mov	r7, r0
 8008250:	460c      	mov	r4, r1
 8008252:	461e      	mov	r6, r3
 8008254:	f101 0c14 	add.w	ip, r1, #20
 8008258:	2000      	movs	r0, #0
 800825a:	f8dc 3000 	ldr.w	r3, [ip]
 800825e:	b299      	uxth	r1, r3
 8008260:	fb02 6101 	mla	r1, r2, r1, r6
 8008264:	0c1e      	lsrs	r6, r3, #16
 8008266:	0c0b      	lsrs	r3, r1, #16
 8008268:	fb02 3306 	mla	r3, r2, r6, r3
 800826c:	b289      	uxth	r1, r1
 800826e:	3001      	adds	r0, #1
 8008270:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008274:	4285      	cmp	r5, r0
 8008276:	f84c 1b04 	str.w	r1, [ip], #4
 800827a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800827e:	dcec      	bgt.n	800825a <__multadd+0x12>
 8008280:	b30e      	cbz	r6, 80082c6 <__multadd+0x7e>
 8008282:	68a3      	ldr	r3, [r4, #8]
 8008284:	42ab      	cmp	r3, r5
 8008286:	dc19      	bgt.n	80082bc <__multadd+0x74>
 8008288:	6861      	ldr	r1, [r4, #4]
 800828a:	4638      	mov	r0, r7
 800828c:	3101      	adds	r1, #1
 800828e:	f7ff ff79 	bl	8008184 <_Balloc>
 8008292:	4680      	mov	r8, r0
 8008294:	b928      	cbnz	r0, 80082a2 <__multadd+0x5a>
 8008296:	4602      	mov	r2, r0
 8008298:	4b0c      	ldr	r3, [pc, #48]	; (80082cc <__multadd+0x84>)
 800829a:	480d      	ldr	r0, [pc, #52]	; (80082d0 <__multadd+0x88>)
 800829c:	21b5      	movs	r1, #181	; 0xb5
 800829e:	f000 fc95 	bl	8008bcc <__assert_func>
 80082a2:	6922      	ldr	r2, [r4, #16]
 80082a4:	3202      	adds	r2, #2
 80082a6:	f104 010c 	add.w	r1, r4, #12
 80082aa:	0092      	lsls	r2, r2, #2
 80082ac:	300c      	adds	r0, #12
 80082ae:	f7fe fb4f 	bl	8006950 <memcpy>
 80082b2:	4621      	mov	r1, r4
 80082b4:	4638      	mov	r0, r7
 80082b6:	f7ff ffa5 	bl	8008204 <_Bfree>
 80082ba:	4644      	mov	r4, r8
 80082bc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80082c0:	3501      	adds	r5, #1
 80082c2:	615e      	str	r6, [r3, #20]
 80082c4:	6125      	str	r5, [r4, #16]
 80082c6:	4620      	mov	r0, r4
 80082c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80082cc:	0800a53b 	.word	0x0800a53b
 80082d0:	0800a54c 	.word	0x0800a54c

080082d4 <__hi0bits>:
 80082d4:	0c03      	lsrs	r3, r0, #16
 80082d6:	041b      	lsls	r3, r3, #16
 80082d8:	b9d3      	cbnz	r3, 8008310 <__hi0bits+0x3c>
 80082da:	0400      	lsls	r0, r0, #16
 80082dc:	2310      	movs	r3, #16
 80082de:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80082e2:	bf04      	itt	eq
 80082e4:	0200      	lsleq	r0, r0, #8
 80082e6:	3308      	addeq	r3, #8
 80082e8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80082ec:	bf04      	itt	eq
 80082ee:	0100      	lsleq	r0, r0, #4
 80082f0:	3304      	addeq	r3, #4
 80082f2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80082f6:	bf04      	itt	eq
 80082f8:	0080      	lsleq	r0, r0, #2
 80082fa:	3302      	addeq	r3, #2
 80082fc:	2800      	cmp	r0, #0
 80082fe:	db05      	blt.n	800830c <__hi0bits+0x38>
 8008300:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008304:	f103 0301 	add.w	r3, r3, #1
 8008308:	bf08      	it	eq
 800830a:	2320      	moveq	r3, #32
 800830c:	4618      	mov	r0, r3
 800830e:	4770      	bx	lr
 8008310:	2300      	movs	r3, #0
 8008312:	e7e4      	b.n	80082de <__hi0bits+0xa>

08008314 <__lo0bits>:
 8008314:	6803      	ldr	r3, [r0, #0]
 8008316:	f013 0207 	ands.w	r2, r3, #7
 800831a:	4601      	mov	r1, r0
 800831c:	d00b      	beq.n	8008336 <__lo0bits+0x22>
 800831e:	07da      	lsls	r2, r3, #31
 8008320:	d423      	bmi.n	800836a <__lo0bits+0x56>
 8008322:	0798      	lsls	r0, r3, #30
 8008324:	bf49      	itett	mi
 8008326:	085b      	lsrmi	r3, r3, #1
 8008328:	089b      	lsrpl	r3, r3, #2
 800832a:	2001      	movmi	r0, #1
 800832c:	600b      	strmi	r3, [r1, #0]
 800832e:	bf5c      	itt	pl
 8008330:	600b      	strpl	r3, [r1, #0]
 8008332:	2002      	movpl	r0, #2
 8008334:	4770      	bx	lr
 8008336:	b298      	uxth	r0, r3
 8008338:	b9a8      	cbnz	r0, 8008366 <__lo0bits+0x52>
 800833a:	0c1b      	lsrs	r3, r3, #16
 800833c:	2010      	movs	r0, #16
 800833e:	b2da      	uxtb	r2, r3
 8008340:	b90a      	cbnz	r2, 8008346 <__lo0bits+0x32>
 8008342:	3008      	adds	r0, #8
 8008344:	0a1b      	lsrs	r3, r3, #8
 8008346:	071a      	lsls	r2, r3, #28
 8008348:	bf04      	itt	eq
 800834a:	091b      	lsreq	r3, r3, #4
 800834c:	3004      	addeq	r0, #4
 800834e:	079a      	lsls	r2, r3, #30
 8008350:	bf04      	itt	eq
 8008352:	089b      	lsreq	r3, r3, #2
 8008354:	3002      	addeq	r0, #2
 8008356:	07da      	lsls	r2, r3, #31
 8008358:	d403      	bmi.n	8008362 <__lo0bits+0x4e>
 800835a:	085b      	lsrs	r3, r3, #1
 800835c:	f100 0001 	add.w	r0, r0, #1
 8008360:	d005      	beq.n	800836e <__lo0bits+0x5a>
 8008362:	600b      	str	r3, [r1, #0]
 8008364:	4770      	bx	lr
 8008366:	4610      	mov	r0, r2
 8008368:	e7e9      	b.n	800833e <__lo0bits+0x2a>
 800836a:	2000      	movs	r0, #0
 800836c:	4770      	bx	lr
 800836e:	2020      	movs	r0, #32
 8008370:	4770      	bx	lr
	...

08008374 <__i2b>:
 8008374:	b510      	push	{r4, lr}
 8008376:	460c      	mov	r4, r1
 8008378:	2101      	movs	r1, #1
 800837a:	f7ff ff03 	bl	8008184 <_Balloc>
 800837e:	4602      	mov	r2, r0
 8008380:	b928      	cbnz	r0, 800838e <__i2b+0x1a>
 8008382:	4b05      	ldr	r3, [pc, #20]	; (8008398 <__i2b+0x24>)
 8008384:	4805      	ldr	r0, [pc, #20]	; (800839c <__i2b+0x28>)
 8008386:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800838a:	f000 fc1f 	bl	8008bcc <__assert_func>
 800838e:	2301      	movs	r3, #1
 8008390:	6144      	str	r4, [r0, #20]
 8008392:	6103      	str	r3, [r0, #16]
 8008394:	bd10      	pop	{r4, pc}
 8008396:	bf00      	nop
 8008398:	0800a53b 	.word	0x0800a53b
 800839c:	0800a54c 	.word	0x0800a54c

080083a0 <__multiply>:
 80083a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083a4:	4691      	mov	r9, r2
 80083a6:	690a      	ldr	r2, [r1, #16]
 80083a8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80083ac:	429a      	cmp	r2, r3
 80083ae:	bfb8      	it	lt
 80083b0:	460b      	movlt	r3, r1
 80083b2:	460c      	mov	r4, r1
 80083b4:	bfbc      	itt	lt
 80083b6:	464c      	movlt	r4, r9
 80083b8:	4699      	movlt	r9, r3
 80083ba:	6927      	ldr	r7, [r4, #16]
 80083bc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80083c0:	68a3      	ldr	r3, [r4, #8]
 80083c2:	6861      	ldr	r1, [r4, #4]
 80083c4:	eb07 060a 	add.w	r6, r7, sl
 80083c8:	42b3      	cmp	r3, r6
 80083ca:	b085      	sub	sp, #20
 80083cc:	bfb8      	it	lt
 80083ce:	3101      	addlt	r1, #1
 80083d0:	f7ff fed8 	bl	8008184 <_Balloc>
 80083d4:	b930      	cbnz	r0, 80083e4 <__multiply+0x44>
 80083d6:	4602      	mov	r2, r0
 80083d8:	4b44      	ldr	r3, [pc, #272]	; (80084ec <__multiply+0x14c>)
 80083da:	4845      	ldr	r0, [pc, #276]	; (80084f0 <__multiply+0x150>)
 80083dc:	f240 115d 	movw	r1, #349	; 0x15d
 80083e0:	f000 fbf4 	bl	8008bcc <__assert_func>
 80083e4:	f100 0514 	add.w	r5, r0, #20
 80083e8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80083ec:	462b      	mov	r3, r5
 80083ee:	2200      	movs	r2, #0
 80083f0:	4543      	cmp	r3, r8
 80083f2:	d321      	bcc.n	8008438 <__multiply+0x98>
 80083f4:	f104 0314 	add.w	r3, r4, #20
 80083f8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80083fc:	f109 0314 	add.w	r3, r9, #20
 8008400:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008404:	9202      	str	r2, [sp, #8]
 8008406:	1b3a      	subs	r2, r7, r4
 8008408:	3a15      	subs	r2, #21
 800840a:	f022 0203 	bic.w	r2, r2, #3
 800840e:	3204      	adds	r2, #4
 8008410:	f104 0115 	add.w	r1, r4, #21
 8008414:	428f      	cmp	r7, r1
 8008416:	bf38      	it	cc
 8008418:	2204      	movcc	r2, #4
 800841a:	9201      	str	r2, [sp, #4]
 800841c:	9a02      	ldr	r2, [sp, #8]
 800841e:	9303      	str	r3, [sp, #12]
 8008420:	429a      	cmp	r2, r3
 8008422:	d80c      	bhi.n	800843e <__multiply+0x9e>
 8008424:	2e00      	cmp	r6, #0
 8008426:	dd03      	ble.n	8008430 <__multiply+0x90>
 8008428:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800842c:	2b00      	cmp	r3, #0
 800842e:	d05a      	beq.n	80084e6 <__multiply+0x146>
 8008430:	6106      	str	r6, [r0, #16]
 8008432:	b005      	add	sp, #20
 8008434:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008438:	f843 2b04 	str.w	r2, [r3], #4
 800843c:	e7d8      	b.n	80083f0 <__multiply+0x50>
 800843e:	f8b3 a000 	ldrh.w	sl, [r3]
 8008442:	f1ba 0f00 	cmp.w	sl, #0
 8008446:	d024      	beq.n	8008492 <__multiply+0xf2>
 8008448:	f104 0e14 	add.w	lr, r4, #20
 800844c:	46a9      	mov	r9, r5
 800844e:	f04f 0c00 	mov.w	ip, #0
 8008452:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008456:	f8d9 1000 	ldr.w	r1, [r9]
 800845a:	fa1f fb82 	uxth.w	fp, r2
 800845e:	b289      	uxth	r1, r1
 8008460:	fb0a 110b 	mla	r1, sl, fp, r1
 8008464:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008468:	f8d9 2000 	ldr.w	r2, [r9]
 800846c:	4461      	add	r1, ip
 800846e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008472:	fb0a c20b 	mla	r2, sl, fp, ip
 8008476:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800847a:	b289      	uxth	r1, r1
 800847c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008480:	4577      	cmp	r7, lr
 8008482:	f849 1b04 	str.w	r1, [r9], #4
 8008486:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800848a:	d8e2      	bhi.n	8008452 <__multiply+0xb2>
 800848c:	9a01      	ldr	r2, [sp, #4]
 800848e:	f845 c002 	str.w	ip, [r5, r2]
 8008492:	9a03      	ldr	r2, [sp, #12]
 8008494:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008498:	3304      	adds	r3, #4
 800849a:	f1b9 0f00 	cmp.w	r9, #0
 800849e:	d020      	beq.n	80084e2 <__multiply+0x142>
 80084a0:	6829      	ldr	r1, [r5, #0]
 80084a2:	f104 0c14 	add.w	ip, r4, #20
 80084a6:	46ae      	mov	lr, r5
 80084a8:	f04f 0a00 	mov.w	sl, #0
 80084ac:	f8bc b000 	ldrh.w	fp, [ip]
 80084b0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80084b4:	fb09 220b 	mla	r2, r9, fp, r2
 80084b8:	4492      	add	sl, r2
 80084ba:	b289      	uxth	r1, r1
 80084bc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80084c0:	f84e 1b04 	str.w	r1, [lr], #4
 80084c4:	f85c 2b04 	ldr.w	r2, [ip], #4
 80084c8:	f8be 1000 	ldrh.w	r1, [lr]
 80084cc:	0c12      	lsrs	r2, r2, #16
 80084ce:	fb09 1102 	mla	r1, r9, r2, r1
 80084d2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80084d6:	4567      	cmp	r7, ip
 80084d8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80084dc:	d8e6      	bhi.n	80084ac <__multiply+0x10c>
 80084de:	9a01      	ldr	r2, [sp, #4]
 80084e0:	50a9      	str	r1, [r5, r2]
 80084e2:	3504      	adds	r5, #4
 80084e4:	e79a      	b.n	800841c <__multiply+0x7c>
 80084e6:	3e01      	subs	r6, #1
 80084e8:	e79c      	b.n	8008424 <__multiply+0x84>
 80084ea:	bf00      	nop
 80084ec:	0800a53b 	.word	0x0800a53b
 80084f0:	0800a54c 	.word	0x0800a54c

080084f4 <__pow5mult>:
 80084f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80084f8:	4615      	mov	r5, r2
 80084fa:	f012 0203 	ands.w	r2, r2, #3
 80084fe:	4606      	mov	r6, r0
 8008500:	460f      	mov	r7, r1
 8008502:	d007      	beq.n	8008514 <__pow5mult+0x20>
 8008504:	4c25      	ldr	r4, [pc, #148]	; (800859c <__pow5mult+0xa8>)
 8008506:	3a01      	subs	r2, #1
 8008508:	2300      	movs	r3, #0
 800850a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800850e:	f7ff fe9b 	bl	8008248 <__multadd>
 8008512:	4607      	mov	r7, r0
 8008514:	10ad      	asrs	r5, r5, #2
 8008516:	d03d      	beq.n	8008594 <__pow5mult+0xa0>
 8008518:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800851a:	b97c      	cbnz	r4, 800853c <__pow5mult+0x48>
 800851c:	2010      	movs	r0, #16
 800851e:	f7fe fa0f 	bl	8006940 <malloc>
 8008522:	4602      	mov	r2, r0
 8008524:	6270      	str	r0, [r6, #36]	; 0x24
 8008526:	b928      	cbnz	r0, 8008534 <__pow5mult+0x40>
 8008528:	4b1d      	ldr	r3, [pc, #116]	; (80085a0 <__pow5mult+0xac>)
 800852a:	481e      	ldr	r0, [pc, #120]	; (80085a4 <__pow5mult+0xb0>)
 800852c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008530:	f000 fb4c 	bl	8008bcc <__assert_func>
 8008534:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008538:	6004      	str	r4, [r0, #0]
 800853a:	60c4      	str	r4, [r0, #12]
 800853c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008540:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008544:	b94c      	cbnz	r4, 800855a <__pow5mult+0x66>
 8008546:	f240 2171 	movw	r1, #625	; 0x271
 800854a:	4630      	mov	r0, r6
 800854c:	f7ff ff12 	bl	8008374 <__i2b>
 8008550:	2300      	movs	r3, #0
 8008552:	f8c8 0008 	str.w	r0, [r8, #8]
 8008556:	4604      	mov	r4, r0
 8008558:	6003      	str	r3, [r0, #0]
 800855a:	f04f 0900 	mov.w	r9, #0
 800855e:	07eb      	lsls	r3, r5, #31
 8008560:	d50a      	bpl.n	8008578 <__pow5mult+0x84>
 8008562:	4639      	mov	r1, r7
 8008564:	4622      	mov	r2, r4
 8008566:	4630      	mov	r0, r6
 8008568:	f7ff ff1a 	bl	80083a0 <__multiply>
 800856c:	4639      	mov	r1, r7
 800856e:	4680      	mov	r8, r0
 8008570:	4630      	mov	r0, r6
 8008572:	f7ff fe47 	bl	8008204 <_Bfree>
 8008576:	4647      	mov	r7, r8
 8008578:	106d      	asrs	r5, r5, #1
 800857a:	d00b      	beq.n	8008594 <__pow5mult+0xa0>
 800857c:	6820      	ldr	r0, [r4, #0]
 800857e:	b938      	cbnz	r0, 8008590 <__pow5mult+0x9c>
 8008580:	4622      	mov	r2, r4
 8008582:	4621      	mov	r1, r4
 8008584:	4630      	mov	r0, r6
 8008586:	f7ff ff0b 	bl	80083a0 <__multiply>
 800858a:	6020      	str	r0, [r4, #0]
 800858c:	f8c0 9000 	str.w	r9, [r0]
 8008590:	4604      	mov	r4, r0
 8008592:	e7e4      	b.n	800855e <__pow5mult+0x6a>
 8008594:	4638      	mov	r0, r7
 8008596:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800859a:	bf00      	nop
 800859c:	0800a698 	.word	0x0800a698
 80085a0:	0800a4c9 	.word	0x0800a4c9
 80085a4:	0800a54c 	.word	0x0800a54c

080085a8 <__lshift>:
 80085a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085ac:	460c      	mov	r4, r1
 80085ae:	6849      	ldr	r1, [r1, #4]
 80085b0:	6923      	ldr	r3, [r4, #16]
 80085b2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80085b6:	68a3      	ldr	r3, [r4, #8]
 80085b8:	4607      	mov	r7, r0
 80085ba:	4691      	mov	r9, r2
 80085bc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80085c0:	f108 0601 	add.w	r6, r8, #1
 80085c4:	42b3      	cmp	r3, r6
 80085c6:	db0b      	blt.n	80085e0 <__lshift+0x38>
 80085c8:	4638      	mov	r0, r7
 80085ca:	f7ff fddb 	bl	8008184 <_Balloc>
 80085ce:	4605      	mov	r5, r0
 80085d0:	b948      	cbnz	r0, 80085e6 <__lshift+0x3e>
 80085d2:	4602      	mov	r2, r0
 80085d4:	4b2a      	ldr	r3, [pc, #168]	; (8008680 <__lshift+0xd8>)
 80085d6:	482b      	ldr	r0, [pc, #172]	; (8008684 <__lshift+0xdc>)
 80085d8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80085dc:	f000 faf6 	bl	8008bcc <__assert_func>
 80085e0:	3101      	adds	r1, #1
 80085e2:	005b      	lsls	r3, r3, #1
 80085e4:	e7ee      	b.n	80085c4 <__lshift+0x1c>
 80085e6:	2300      	movs	r3, #0
 80085e8:	f100 0114 	add.w	r1, r0, #20
 80085ec:	f100 0210 	add.w	r2, r0, #16
 80085f0:	4618      	mov	r0, r3
 80085f2:	4553      	cmp	r3, sl
 80085f4:	db37      	blt.n	8008666 <__lshift+0xbe>
 80085f6:	6920      	ldr	r0, [r4, #16]
 80085f8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80085fc:	f104 0314 	add.w	r3, r4, #20
 8008600:	f019 091f 	ands.w	r9, r9, #31
 8008604:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008608:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800860c:	d02f      	beq.n	800866e <__lshift+0xc6>
 800860e:	f1c9 0e20 	rsb	lr, r9, #32
 8008612:	468a      	mov	sl, r1
 8008614:	f04f 0c00 	mov.w	ip, #0
 8008618:	681a      	ldr	r2, [r3, #0]
 800861a:	fa02 f209 	lsl.w	r2, r2, r9
 800861e:	ea42 020c 	orr.w	r2, r2, ip
 8008622:	f84a 2b04 	str.w	r2, [sl], #4
 8008626:	f853 2b04 	ldr.w	r2, [r3], #4
 800862a:	4298      	cmp	r0, r3
 800862c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008630:	d8f2      	bhi.n	8008618 <__lshift+0x70>
 8008632:	1b03      	subs	r3, r0, r4
 8008634:	3b15      	subs	r3, #21
 8008636:	f023 0303 	bic.w	r3, r3, #3
 800863a:	3304      	adds	r3, #4
 800863c:	f104 0215 	add.w	r2, r4, #21
 8008640:	4290      	cmp	r0, r2
 8008642:	bf38      	it	cc
 8008644:	2304      	movcc	r3, #4
 8008646:	f841 c003 	str.w	ip, [r1, r3]
 800864a:	f1bc 0f00 	cmp.w	ip, #0
 800864e:	d001      	beq.n	8008654 <__lshift+0xac>
 8008650:	f108 0602 	add.w	r6, r8, #2
 8008654:	3e01      	subs	r6, #1
 8008656:	4638      	mov	r0, r7
 8008658:	612e      	str	r6, [r5, #16]
 800865a:	4621      	mov	r1, r4
 800865c:	f7ff fdd2 	bl	8008204 <_Bfree>
 8008660:	4628      	mov	r0, r5
 8008662:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008666:	f842 0f04 	str.w	r0, [r2, #4]!
 800866a:	3301      	adds	r3, #1
 800866c:	e7c1      	b.n	80085f2 <__lshift+0x4a>
 800866e:	3904      	subs	r1, #4
 8008670:	f853 2b04 	ldr.w	r2, [r3], #4
 8008674:	f841 2f04 	str.w	r2, [r1, #4]!
 8008678:	4298      	cmp	r0, r3
 800867a:	d8f9      	bhi.n	8008670 <__lshift+0xc8>
 800867c:	e7ea      	b.n	8008654 <__lshift+0xac>
 800867e:	bf00      	nop
 8008680:	0800a53b 	.word	0x0800a53b
 8008684:	0800a54c 	.word	0x0800a54c

08008688 <__mcmp>:
 8008688:	b530      	push	{r4, r5, lr}
 800868a:	6902      	ldr	r2, [r0, #16]
 800868c:	690c      	ldr	r4, [r1, #16]
 800868e:	1b12      	subs	r2, r2, r4
 8008690:	d10e      	bne.n	80086b0 <__mcmp+0x28>
 8008692:	f100 0314 	add.w	r3, r0, #20
 8008696:	3114      	adds	r1, #20
 8008698:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800869c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80086a0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80086a4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80086a8:	42a5      	cmp	r5, r4
 80086aa:	d003      	beq.n	80086b4 <__mcmp+0x2c>
 80086ac:	d305      	bcc.n	80086ba <__mcmp+0x32>
 80086ae:	2201      	movs	r2, #1
 80086b0:	4610      	mov	r0, r2
 80086b2:	bd30      	pop	{r4, r5, pc}
 80086b4:	4283      	cmp	r3, r0
 80086b6:	d3f3      	bcc.n	80086a0 <__mcmp+0x18>
 80086b8:	e7fa      	b.n	80086b0 <__mcmp+0x28>
 80086ba:	f04f 32ff 	mov.w	r2, #4294967295
 80086be:	e7f7      	b.n	80086b0 <__mcmp+0x28>

080086c0 <__mdiff>:
 80086c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086c4:	460c      	mov	r4, r1
 80086c6:	4606      	mov	r6, r0
 80086c8:	4611      	mov	r1, r2
 80086ca:	4620      	mov	r0, r4
 80086cc:	4690      	mov	r8, r2
 80086ce:	f7ff ffdb 	bl	8008688 <__mcmp>
 80086d2:	1e05      	subs	r5, r0, #0
 80086d4:	d110      	bne.n	80086f8 <__mdiff+0x38>
 80086d6:	4629      	mov	r1, r5
 80086d8:	4630      	mov	r0, r6
 80086da:	f7ff fd53 	bl	8008184 <_Balloc>
 80086de:	b930      	cbnz	r0, 80086ee <__mdiff+0x2e>
 80086e0:	4b3a      	ldr	r3, [pc, #232]	; (80087cc <__mdiff+0x10c>)
 80086e2:	4602      	mov	r2, r0
 80086e4:	f240 2132 	movw	r1, #562	; 0x232
 80086e8:	4839      	ldr	r0, [pc, #228]	; (80087d0 <__mdiff+0x110>)
 80086ea:	f000 fa6f 	bl	8008bcc <__assert_func>
 80086ee:	2301      	movs	r3, #1
 80086f0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80086f4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086f8:	bfa4      	itt	ge
 80086fa:	4643      	movge	r3, r8
 80086fc:	46a0      	movge	r8, r4
 80086fe:	4630      	mov	r0, r6
 8008700:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008704:	bfa6      	itte	ge
 8008706:	461c      	movge	r4, r3
 8008708:	2500      	movge	r5, #0
 800870a:	2501      	movlt	r5, #1
 800870c:	f7ff fd3a 	bl	8008184 <_Balloc>
 8008710:	b920      	cbnz	r0, 800871c <__mdiff+0x5c>
 8008712:	4b2e      	ldr	r3, [pc, #184]	; (80087cc <__mdiff+0x10c>)
 8008714:	4602      	mov	r2, r0
 8008716:	f44f 7110 	mov.w	r1, #576	; 0x240
 800871a:	e7e5      	b.n	80086e8 <__mdiff+0x28>
 800871c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008720:	6926      	ldr	r6, [r4, #16]
 8008722:	60c5      	str	r5, [r0, #12]
 8008724:	f104 0914 	add.w	r9, r4, #20
 8008728:	f108 0514 	add.w	r5, r8, #20
 800872c:	f100 0e14 	add.w	lr, r0, #20
 8008730:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008734:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008738:	f108 0210 	add.w	r2, r8, #16
 800873c:	46f2      	mov	sl, lr
 800873e:	2100      	movs	r1, #0
 8008740:	f859 3b04 	ldr.w	r3, [r9], #4
 8008744:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008748:	fa1f f883 	uxth.w	r8, r3
 800874c:	fa11 f18b 	uxtah	r1, r1, fp
 8008750:	0c1b      	lsrs	r3, r3, #16
 8008752:	eba1 0808 	sub.w	r8, r1, r8
 8008756:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800875a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800875e:	fa1f f888 	uxth.w	r8, r8
 8008762:	1419      	asrs	r1, r3, #16
 8008764:	454e      	cmp	r6, r9
 8008766:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800876a:	f84a 3b04 	str.w	r3, [sl], #4
 800876e:	d8e7      	bhi.n	8008740 <__mdiff+0x80>
 8008770:	1b33      	subs	r3, r6, r4
 8008772:	3b15      	subs	r3, #21
 8008774:	f023 0303 	bic.w	r3, r3, #3
 8008778:	3304      	adds	r3, #4
 800877a:	3415      	adds	r4, #21
 800877c:	42a6      	cmp	r6, r4
 800877e:	bf38      	it	cc
 8008780:	2304      	movcc	r3, #4
 8008782:	441d      	add	r5, r3
 8008784:	4473      	add	r3, lr
 8008786:	469e      	mov	lr, r3
 8008788:	462e      	mov	r6, r5
 800878a:	4566      	cmp	r6, ip
 800878c:	d30e      	bcc.n	80087ac <__mdiff+0xec>
 800878e:	f10c 0203 	add.w	r2, ip, #3
 8008792:	1b52      	subs	r2, r2, r5
 8008794:	f022 0203 	bic.w	r2, r2, #3
 8008798:	3d03      	subs	r5, #3
 800879a:	45ac      	cmp	ip, r5
 800879c:	bf38      	it	cc
 800879e:	2200      	movcc	r2, #0
 80087a0:	441a      	add	r2, r3
 80087a2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80087a6:	b17b      	cbz	r3, 80087c8 <__mdiff+0x108>
 80087a8:	6107      	str	r7, [r0, #16]
 80087aa:	e7a3      	b.n	80086f4 <__mdiff+0x34>
 80087ac:	f856 8b04 	ldr.w	r8, [r6], #4
 80087b0:	fa11 f288 	uxtah	r2, r1, r8
 80087b4:	1414      	asrs	r4, r2, #16
 80087b6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80087ba:	b292      	uxth	r2, r2
 80087bc:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80087c0:	f84e 2b04 	str.w	r2, [lr], #4
 80087c4:	1421      	asrs	r1, r4, #16
 80087c6:	e7e0      	b.n	800878a <__mdiff+0xca>
 80087c8:	3f01      	subs	r7, #1
 80087ca:	e7ea      	b.n	80087a2 <__mdiff+0xe2>
 80087cc:	0800a53b 	.word	0x0800a53b
 80087d0:	0800a54c 	.word	0x0800a54c

080087d4 <__d2b>:
 80087d4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80087d8:	4689      	mov	r9, r1
 80087da:	2101      	movs	r1, #1
 80087dc:	ec57 6b10 	vmov	r6, r7, d0
 80087e0:	4690      	mov	r8, r2
 80087e2:	f7ff fccf 	bl	8008184 <_Balloc>
 80087e6:	4604      	mov	r4, r0
 80087e8:	b930      	cbnz	r0, 80087f8 <__d2b+0x24>
 80087ea:	4602      	mov	r2, r0
 80087ec:	4b25      	ldr	r3, [pc, #148]	; (8008884 <__d2b+0xb0>)
 80087ee:	4826      	ldr	r0, [pc, #152]	; (8008888 <__d2b+0xb4>)
 80087f0:	f240 310a 	movw	r1, #778	; 0x30a
 80087f4:	f000 f9ea 	bl	8008bcc <__assert_func>
 80087f8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80087fc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008800:	bb35      	cbnz	r5, 8008850 <__d2b+0x7c>
 8008802:	2e00      	cmp	r6, #0
 8008804:	9301      	str	r3, [sp, #4]
 8008806:	d028      	beq.n	800885a <__d2b+0x86>
 8008808:	4668      	mov	r0, sp
 800880a:	9600      	str	r6, [sp, #0]
 800880c:	f7ff fd82 	bl	8008314 <__lo0bits>
 8008810:	9900      	ldr	r1, [sp, #0]
 8008812:	b300      	cbz	r0, 8008856 <__d2b+0x82>
 8008814:	9a01      	ldr	r2, [sp, #4]
 8008816:	f1c0 0320 	rsb	r3, r0, #32
 800881a:	fa02 f303 	lsl.w	r3, r2, r3
 800881e:	430b      	orrs	r3, r1
 8008820:	40c2      	lsrs	r2, r0
 8008822:	6163      	str	r3, [r4, #20]
 8008824:	9201      	str	r2, [sp, #4]
 8008826:	9b01      	ldr	r3, [sp, #4]
 8008828:	61a3      	str	r3, [r4, #24]
 800882a:	2b00      	cmp	r3, #0
 800882c:	bf14      	ite	ne
 800882e:	2202      	movne	r2, #2
 8008830:	2201      	moveq	r2, #1
 8008832:	6122      	str	r2, [r4, #16]
 8008834:	b1d5      	cbz	r5, 800886c <__d2b+0x98>
 8008836:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800883a:	4405      	add	r5, r0
 800883c:	f8c9 5000 	str.w	r5, [r9]
 8008840:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008844:	f8c8 0000 	str.w	r0, [r8]
 8008848:	4620      	mov	r0, r4
 800884a:	b003      	add	sp, #12
 800884c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008850:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008854:	e7d5      	b.n	8008802 <__d2b+0x2e>
 8008856:	6161      	str	r1, [r4, #20]
 8008858:	e7e5      	b.n	8008826 <__d2b+0x52>
 800885a:	a801      	add	r0, sp, #4
 800885c:	f7ff fd5a 	bl	8008314 <__lo0bits>
 8008860:	9b01      	ldr	r3, [sp, #4]
 8008862:	6163      	str	r3, [r4, #20]
 8008864:	2201      	movs	r2, #1
 8008866:	6122      	str	r2, [r4, #16]
 8008868:	3020      	adds	r0, #32
 800886a:	e7e3      	b.n	8008834 <__d2b+0x60>
 800886c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008870:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008874:	f8c9 0000 	str.w	r0, [r9]
 8008878:	6918      	ldr	r0, [r3, #16]
 800887a:	f7ff fd2b 	bl	80082d4 <__hi0bits>
 800887e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008882:	e7df      	b.n	8008844 <__d2b+0x70>
 8008884:	0800a53b 	.word	0x0800a53b
 8008888:	0800a54c 	.word	0x0800a54c

0800888c <_calloc_r>:
 800888c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800888e:	fba1 2402 	umull	r2, r4, r1, r2
 8008892:	b94c      	cbnz	r4, 80088a8 <_calloc_r+0x1c>
 8008894:	4611      	mov	r1, r2
 8008896:	9201      	str	r2, [sp, #4]
 8008898:	f7fe f8dc 	bl	8006a54 <_malloc_r>
 800889c:	9a01      	ldr	r2, [sp, #4]
 800889e:	4605      	mov	r5, r0
 80088a0:	b930      	cbnz	r0, 80088b0 <_calloc_r+0x24>
 80088a2:	4628      	mov	r0, r5
 80088a4:	b003      	add	sp, #12
 80088a6:	bd30      	pop	{r4, r5, pc}
 80088a8:	220c      	movs	r2, #12
 80088aa:	6002      	str	r2, [r0, #0]
 80088ac:	2500      	movs	r5, #0
 80088ae:	e7f8      	b.n	80088a2 <_calloc_r+0x16>
 80088b0:	4621      	mov	r1, r4
 80088b2:	f7fe f85b 	bl	800696c <memset>
 80088b6:	e7f4      	b.n	80088a2 <_calloc_r+0x16>

080088b8 <_realloc_r>:
 80088b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088bc:	4680      	mov	r8, r0
 80088be:	4614      	mov	r4, r2
 80088c0:	460e      	mov	r6, r1
 80088c2:	b921      	cbnz	r1, 80088ce <_realloc_r+0x16>
 80088c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80088c8:	4611      	mov	r1, r2
 80088ca:	f7fe b8c3 	b.w	8006a54 <_malloc_r>
 80088ce:	b92a      	cbnz	r2, 80088dc <_realloc_r+0x24>
 80088d0:	f7fe f854 	bl	800697c <_free_r>
 80088d4:	4625      	mov	r5, r4
 80088d6:	4628      	mov	r0, r5
 80088d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80088dc:	f000 f9d5 	bl	8008c8a <_malloc_usable_size_r>
 80088e0:	4284      	cmp	r4, r0
 80088e2:	4607      	mov	r7, r0
 80088e4:	d802      	bhi.n	80088ec <_realloc_r+0x34>
 80088e6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80088ea:	d812      	bhi.n	8008912 <_realloc_r+0x5a>
 80088ec:	4621      	mov	r1, r4
 80088ee:	4640      	mov	r0, r8
 80088f0:	f7fe f8b0 	bl	8006a54 <_malloc_r>
 80088f4:	4605      	mov	r5, r0
 80088f6:	2800      	cmp	r0, #0
 80088f8:	d0ed      	beq.n	80088d6 <_realloc_r+0x1e>
 80088fa:	42bc      	cmp	r4, r7
 80088fc:	4622      	mov	r2, r4
 80088fe:	4631      	mov	r1, r6
 8008900:	bf28      	it	cs
 8008902:	463a      	movcs	r2, r7
 8008904:	f7fe f824 	bl	8006950 <memcpy>
 8008908:	4631      	mov	r1, r6
 800890a:	4640      	mov	r0, r8
 800890c:	f7fe f836 	bl	800697c <_free_r>
 8008910:	e7e1      	b.n	80088d6 <_realloc_r+0x1e>
 8008912:	4635      	mov	r5, r6
 8008914:	e7df      	b.n	80088d6 <_realloc_r+0x1e>

08008916 <__ssputs_r>:
 8008916:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800891a:	688e      	ldr	r6, [r1, #8]
 800891c:	429e      	cmp	r6, r3
 800891e:	4682      	mov	sl, r0
 8008920:	460c      	mov	r4, r1
 8008922:	4690      	mov	r8, r2
 8008924:	461f      	mov	r7, r3
 8008926:	d838      	bhi.n	800899a <__ssputs_r+0x84>
 8008928:	898a      	ldrh	r2, [r1, #12]
 800892a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800892e:	d032      	beq.n	8008996 <__ssputs_r+0x80>
 8008930:	6825      	ldr	r5, [r4, #0]
 8008932:	6909      	ldr	r1, [r1, #16]
 8008934:	eba5 0901 	sub.w	r9, r5, r1
 8008938:	6965      	ldr	r5, [r4, #20]
 800893a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800893e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008942:	3301      	adds	r3, #1
 8008944:	444b      	add	r3, r9
 8008946:	106d      	asrs	r5, r5, #1
 8008948:	429d      	cmp	r5, r3
 800894a:	bf38      	it	cc
 800894c:	461d      	movcc	r5, r3
 800894e:	0553      	lsls	r3, r2, #21
 8008950:	d531      	bpl.n	80089b6 <__ssputs_r+0xa0>
 8008952:	4629      	mov	r1, r5
 8008954:	f7fe f87e 	bl	8006a54 <_malloc_r>
 8008958:	4606      	mov	r6, r0
 800895a:	b950      	cbnz	r0, 8008972 <__ssputs_r+0x5c>
 800895c:	230c      	movs	r3, #12
 800895e:	f8ca 3000 	str.w	r3, [sl]
 8008962:	89a3      	ldrh	r3, [r4, #12]
 8008964:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008968:	81a3      	strh	r3, [r4, #12]
 800896a:	f04f 30ff 	mov.w	r0, #4294967295
 800896e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008972:	6921      	ldr	r1, [r4, #16]
 8008974:	464a      	mov	r2, r9
 8008976:	f7fd ffeb 	bl	8006950 <memcpy>
 800897a:	89a3      	ldrh	r3, [r4, #12]
 800897c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008980:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008984:	81a3      	strh	r3, [r4, #12]
 8008986:	6126      	str	r6, [r4, #16]
 8008988:	6165      	str	r5, [r4, #20]
 800898a:	444e      	add	r6, r9
 800898c:	eba5 0509 	sub.w	r5, r5, r9
 8008990:	6026      	str	r6, [r4, #0]
 8008992:	60a5      	str	r5, [r4, #8]
 8008994:	463e      	mov	r6, r7
 8008996:	42be      	cmp	r6, r7
 8008998:	d900      	bls.n	800899c <__ssputs_r+0x86>
 800899a:	463e      	mov	r6, r7
 800899c:	6820      	ldr	r0, [r4, #0]
 800899e:	4632      	mov	r2, r6
 80089a0:	4641      	mov	r1, r8
 80089a2:	f000 f958 	bl	8008c56 <memmove>
 80089a6:	68a3      	ldr	r3, [r4, #8]
 80089a8:	1b9b      	subs	r3, r3, r6
 80089aa:	60a3      	str	r3, [r4, #8]
 80089ac:	6823      	ldr	r3, [r4, #0]
 80089ae:	4433      	add	r3, r6
 80089b0:	6023      	str	r3, [r4, #0]
 80089b2:	2000      	movs	r0, #0
 80089b4:	e7db      	b.n	800896e <__ssputs_r+0x58>
 80089b6:	462a      	mov	r2, r5
 80089b8:	f7ff ff7e 	bl	80088b8 <_realloc_r>
 80089bc:	4606      	mov	r6, r0
 80089be:	2800      	cmp	r0, #0
 80089c0:	d1e1      	bne.n	8008986 <__ssputs_r+0x70>
 80089c2:	6921      	ldr	r1, [r4, #16]
 80089c4:	4650      	mov	r0, sl
 80089c6:	f7fd ffd9 	bl	800697c <_free_r>
 80089ca:	e7c7      	b.n	800895c <__ssputs_r+0x46>

080089cc <_svfiprintf_r>:
 80089cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089d0:	4698      	mov	r8, r3
 80089d2:	898b      	ldrh	r3, [r1, #12]
 80089d4:	061b      	lsls	r3, r3, #24
 80089d6:	b09d      	sub	sp, #116	; 0x74
 80089d8:	4607      	mov	r7, r0
 80089da:	460d      	mov	r5, r1
 80089dc:	4614      	mov	r4, r2
 80089de:	d50e      	bpl.n	80089fe <_svfiprintf_r+0x32>
 80089e0:	690b      	ldr	r3, [r1, #16]
 80089e2:	b963      	cbnz	r3, 80089fe <_svfiprintf_r+0x32>
 80089e4:	2140      	movs	r1, #64	; 0x40
 80089e6:	f7fe f835 	bl	8006a54 <_malloc_r>
 80089ea:	6028      	str	r0, [r5, #0]
 80089ec:	6128      	str	r0, [r5, #16]
 80089ee:	b920      	cbnz	r0, 80089fa <_svfiprintf_r+0x2e>
 80089f0:	230c      	movs	r3, #12
 80089f2:	603b      	str	r3, [r7, #0]
 80089f4:	f04f 30ff 	mov.w	r0, #4294967295
 80089f8:	e0d1      	b.n	8008b9e <_svfiprintf_r+0x1d2>
 80089fa:	2340      	movs	r3, #64	; 0x40
 80089fc:	616b      	str	r3, [r5, #20]
 80089fe:	2300      	movs	r3, #0
 8008a00:	9309      	str	r3, [sp, #36]	; 0x24
 8008a02:	2320      	movs	r3, #32
 8008a04:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008a08:	f8cd 800c 	str.w	r8, [sp, #12]
 8008a0c:	2330      	movs	r3, #48	; 0x30
 8008a0e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008bb8 <_svfiprintf_r+0x1ec>
 8008a12:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008a16:	f04f 0901 	mov.w	r9, #1
 8008a1a:	4623      	mov	r3, r4
 8008a1c:	469a      	mov	sl, r3
 8008a1e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008a22:	b10a      	cbz	r2, 8008a28 <_svfiprintf_r+0x5c>
 8008a24:	2a25      	cmp	r2, #37	; 0x25
 8008a26:	d1f9      	bne.n	8008a1c <_svfiprintf_r+0x50>
 8008a28:	ebba 0b04 	subs.w	fp, sl, r4
 8008a2c:	d00b      	beq.n	8008a46 <_svfiprintf_r+0x7a>
 8008a2e:	465b      	mov	r3, fp
 8008a30:	4622      	mov	r2, r4
 8008a32:	4629      	mov	r1, r5
 8008a34:	4638      	mov	r0, r7
 8008a36:	f7ff ff6e 	bl	8008916 <__ssputs_r>
 8008a3a:	3001      	adds	r0, #1
 8008a3c:	f000 80aa 	beq.w	8008b94 <_svfiprintf_r+0x1c8>
 8008a40:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008a42:	445a      	add	r2, fp
 8008a44:	9209      	str	r2, [sp, #36]	; 0x24
 8008a46:	f89a 3000 	ldrb.w	r3, [sl]
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	f000 80a2 	beq.w	8008b94 <_svfiprintf_r+0x1c8>
 8008a50:	2300      	movs	r3, #0
 8008a52:	f04f 32ff 	mov.w	r2, #4294967295
 8008a56:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008a5a:	f10a 0a01 	add.w	sl, sl, #1
 8008a5e:	9304      	str	r3, [sp, #16]
 8008a60:	9307      	str	r3, [sp, #28]
 8008a62:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008a66:	931a      	str	r3, [sp, #104]	; 0x68
 8008a68:	4654      	mov	r4, sl
 8008a6a:	2205      	movs	r2, #5
 8008a6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a70:	4851      	ldr	r0, [pc, #324]	; (8008bb8 <_svfiprintf_r+0x1ec>)
 8008a72:	f7f7 fbd5 	bl	8000220 <memchr>
 8008a76:	9a04      	ldr	r2, [sp, #16]
 8008a78:	b9d8      	cbnz	r0, 8008ab2 <_svfiprintf_r+0xe6>
 8008a7a:	06d0      	lsls	r0, r2, #27
 8008a7c:	bf44      	itt	mi
 8008a7e:	2320      	movmi	r3, #32
 8008a80:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008a84:	0711      	lsls	r1, r2, #28
 8008a86:	bf44      	itt	mi
 8008a88:	232b      	movmi	r3, #43	; 0x2b
 8008a8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008a8e:	f89a 3000 	ldrb.w	r3, [sl]
 8008a92:	2b2a      	cmp	r3, #42	; 0x2a
 8008a94:	d015      	beq.n	8008ac2 <_svfiprintf_r+0xf6>
 8008a96:	9a07      	ldr	r2, [sp, #28]
 8008a98:	4654      	mov	r4, sl
 8008a9a:	2000      	movs	r0, #0
 8008a9c:	f04f 0c0a 	mov.w	ip, #10
 8008aa0:	4621      	mov	r1, r4
 8008aa2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008aa6:	3b30      	subs	r3, #48	; 0x30
 8008aa8:	2b09      	cmp	r3, #9
 8008aaa:	d94e      	bls.n	8008b4a <_svfiprintf_r+0x17e>
 8008aac:	b1b0      	cbz	r0, 8008adc <_svfiprintf_r+0x110>
 8008aae:	9207      	str	r2, [sp, #28]
 8008ab0:	e014      	b.n	8008adc <_svfiprintf_r+0x110>
 8008ab2:	eba0 0308 	sub.w	r3, r0, r8
 8008ab6:	fa09 f303 	lsl.w	r3, r9, r3
 8008aba:	4313      	orrs	r3, r2
 8008abc:	9304      	str	r3, [sp, #16]
 8008abe:	46a2      	mov	sl, r4
 8008ac0:	e7d2      	b.n	8008a68 <_svfiprintf_r+0x9c>
 8008ac2:	9b03      	ldr	r3, [sp, #12]
 8008ac4:	1d19      	adds	r1, r3, #4
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	9103      	str	r1, [sp, #12]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	bfbb      	ittet	lt
 8008ace:	425b      	neglt	r3, r3
 8008ad0:	f042 0202 	orrlt.w	r2, r2, #2
 8008ad4:	9307      	strge	r3, [sp, #28]
 8008ad6:	9307      	strlt	r3, [sp, #28]
 8008ad8:	bfb8      	it	lt
 8008ada:	9204      	strlt	r2, [sp, #16]
 8008adc:	7823      	ldrb	r3, [r4, #0]
 8008ade:	2b2e      	cmp	r3, #46	; 0x2e
 8008ae0:	d10c      	bne.n	8008afc <_svfiprintf_r+0x130>
 8008ae2:	7863      	ldrb	r3, [r4, #1]
 8008ae4:	2b2a      	cmp	r3, #42	; 0x2a
 8008ae6:	d135      	bne.n	8008b54 <_svfiprintf_r+0x188>
 8008ae8:	9b03      	ldr	r3, [sp, #12]
 8008aea:	1d1a      	adds	r2, r3, #4
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	9203      	str	r2, [sp, #12]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	bfb8      	it	lt
 8008af4:	f04f 33ff 	movlt.w	r3, #4294967295
 8008af8:	3402      	adds	r4, #2
 8008afa:	9305      	str	r3, [sp, #20]
 8008afc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008bc8 <_svfiprintf_r+0x1fc>
 8008b00:	7821      	ldrb	r1, [r4, #0]
 8008b02:	2203      	movs	r2, #3
 8008b04:	4650      	mov	r0, sl
 8008b06:	f7f7 fb8b 	bl	8000220 <memchr>
 8008b0a:	b140      	cbz	r0, 8008b1e <_svfiprintf_r+0x152>
 8008b0c:	2340      	movs	r3, #64	; 0x40
 8008b0e:	eba0 000a 	sub.w	r0, r0, sl
 8008b12:	fa03 f000 	lsl.w	r0, r3, r0
 8008b16:	9b04      	ldr	r3, [sp, #16]
 8008b18:	4303      	orrs	r3, r0
 8008b1a:	3401      	adds	r4, #1
 8008b1c:	9304      	str	r3, [sp, #16]
 8008b1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b22:	4826      	ldr	r0, [pc, #152]	; (8008bbc <_svfiprintf_r+0x1f0>)
 8008b24:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008b28:	2206      	movs	r2, #6
 8008b2a:	f7f7 fb79 	bl	8000220 <memchr>
 8008b2e:	2800      	cmp	r0, #0
 8008b30:	d038      	beq.n	8008ba4 <_svfiprintf_r+0x1d8>
 8008b32:	4b23      	ldr	r3, [pc, #140]	; (8008bc0 <_svfiprintf_r+0x1f4>)
 8008b34:	bb1b      	cbnz	r3, 8008b7e <_svfiprintf_r+0x1b2>
 8008b36:	9b03      	ldr	r3, [sp, #12]
 8008b38:	3307      	adds	r3, #7
 8008b3a:	f023 0307 	bic.w	r3, r3, #7
 8008b3e:	3308      	adds	r3, #8
 8008b40:	9303      	str	r3, [sp, #12]
 8008b42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b44:	4433      	add	r3, r6
 8008b46:	9309      	str	r3, [sp, #36]	; 0x24
 8008b48:	e767      	b.n	8008a1a <_svfiprintf_r+0x4e>
 8008b4a:	fb0c 3202 	mla	r2, ip, r2, r3
 8008b4e:	460c      	mov	r4, r1
 8008b50:	2001      	movs	r0, #1
 8008b52:	e7a5      	b.n	8008aa0 <_svfiprintf_r+0xd4>
 8008b54:	2300      	movs	r3, #0
 8008b56:	3401      	adds	r4, #1
 8008b58:	9305      	str	r3, [sp, #20]
 8008b5a:	4619      	mov	r1, r3
 8008b5c:	f04f 0c0a 	mov.w	ip, #10
 8008b60:	4620      	mov	r0, r4
 8008b62:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008b66:	3a30      	subs	r2, #48	; 0x30
 8008b68:	2a09      	cmp	r2, #9
 8008b6a:	d903      	bls.n	8008b74 <_svfiprintf_r+0x1a8>
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d0c5      	beq.n	8008afc <_svfiprintf_r+0x130>
 8008b70:	9105      	str	r1, [sp, #20]
 8008b72:	e7c3      	b.n	8008afc <_svfiprintf_r+0x130>
 8008b74:	fb0c 2101 	mla	r1, ip, r1, r2
 8008b78:	4604      	mov	r4, r0
 8008b7a:	2301      	movs	r3, #1
 8008b7c:	e7f0      	b.n	8008b60 <_svfiprintf_r+0x194>
 8008b7e:	ab03      	add	r3, sp, #12
 8008b80:	9300      	str	r3, [sp, #0]
 8008b82:	462a      	mov	r2, r5
 8008b84:	4b0f      	ldr	r3, [pc, #60]	; (8008bc4 <_svfiprintf_r+0x1f8>)
 8008b86:	a904      	add	r1, sp, #16
 8008b88:	4638      	mov	r0, r7
 8008b8a:	f7fe f877 	bl	8006c7c <_printf_float>
 8008b8e:	1c42      	adds	r2, r0, #1
 8008b90:	4606      	mov	r6, r0
 8008b92:	d1d6      	bne.n	8008b42 <_svfiprintf_r+0x176>
 8008b94:	89ab      	ldrh	r3, [r5, #12]
 8008b96:	065b      	lsls	r3, r3, #25
 8008b98:	f53f af2c 	bmi.w	80089f4 <_svfiprintf_r+0x28>
 8008b9c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008b9e:	b01d      	add	sp, #116	; 0x74
 8008ba0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ba4:	ab03      	add	r3, sp, #12
 8008ba6:	9300      	str	r3, [sp, #0]
 8008ba8:	462a      	mov	r2, r5
 8008baa:	4b06      	ldr	r3, [pc, #24]	; (8008bc4 <_svfiprintf_r+0x1f8>)
 8008bac:	a904      	add	r1, sp, #16
 8008bae:	4638      	mov	r0, r7
 8008bb0:	f7fe fb08 	bl	80071c4 <_printf_i>
 8008bb4:	e7eb      	b.n	8008b8e <_svfiprintf_r+0x1c2>
 8008bb6:	bf00      	nop
 8008bb8:	0800a6a4 	.word	0x0800a6a4
 8008bbc:	0800a6ae 	.word	0x0800a6ae
 8008bc0:	08006c7d 	.word	0x08006c7d
 8008bc4:	08008917 	.word	0x08008917
 8008bc8:	0800a6aa 	.word	0x0800a6aa

08008bcc <__assert_func>:
 8008bcc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008bce:	4614      	mov	r4, r2
 8008bd0:	461a      	mov	r2, r3
 8008bd2:	4b09      	ldr	r3, [pc, #36]	; (8008bf8 <__assert_func+0x2c>)
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	4605      	mov	r5, r0
 8008bd8:	68d8      	ldr	r0, [r3, #12]
 8008bda:	b14c      	cbz	r4, 8008bf0 <__assert_func+0x24>
 8008bdc:	4b07      	ldr	r3, [pc, #28]	; (8008bfc <__assert_func+0x30>)
 8008bde:	9100      	str	r1, [sp, #0]
 8008be0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008be4:	4906      	ldr	r1, [pc, #24]	; (8008c00 <__assert_func+0x34>)
 8008be6:	462b      	mov	r3, r5
 8008be8:	f000 f80e 	bl	8008c08 <fiprintf>
 8008bec:	f000 fa7c 	bl	80090e8 <abort>
 8008bf0:	4b04      	ldr	r3, [pc, #16]	; (8008c04 <__assert_func+0x38>)
 8008bf2:	461c      	mov	r4, r3
 8008bf4:	e7f3      	b.n	8008bde <__assert_func+0x12>
 8008bf6:	bf00      	nop
 8008bf8:	2000073c 	.word	0x2000073c
 8008bfc:	0800a6b5 	.word	0x0800a6b5
 8008c00:	0800a6c2 	.word	0x0800a6c2
 8008c04:	0800a6f0 	.word	0x0800a6f0

08008c08 <fiprintf>:
 8008c08:	b40e      	push	{r1, r2, r3}
 8008c0a:	b503      	push	{r0, r1, lr}
 8008c0c:	4601      	mov	r1, r0
 8008c0e:	ab03      	add	r3, sp, #12
 8008c10:	4805      	ldr	r0, [pc, #20]	; (8008c28 <fiprintf+0x20>)
 8008c12:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c16:	6800      	ldr	r0, [r0, #0]
 8008c18:	9301      	str	r3, [sp, #4]
 8008c1a:	f000 f867 	bl	8008cec <_vfiprintf_r>
 8008c1e:	b002      	add	sp, #8
 8008c20:	f85d eb04 	ldr.w	lr, [sp], #4
 8008c24:	b003      	add	sp, #12
 8008c26:	4770      	bx	lr
 8008c28:	2000073c 	.word	0x2000073c

08008c2c <__retarget_lock_init_recursive>:
 8008c2c:	4770      	bx	lr

08008c2e <__retarget_lock_acquire_recursive>:
 8008c2e:	4770      	bx	lr

08008c30 <__retarget_lock_release_recursive>:
 8008c30:	4770      	bx	lr

08008c32 <__ascii_mbtowc>:
 8008c32:	b082      	sub	sp, #8
 8008c34:	b901      	cbnz	r1, 8008c38 <__ascii_mbtowc+0x6>
 8008c36:	a901      	add	r1, sp, #4
 8008c38:	b142      	cbz	r2, 8008c4c <__ascii_mbtowc+0x1a>
 8008c3a:	b14b      	cbz	r3, 8008c50 <__ascii_mbtowc+0x1e>
 8008c3c:	7813      	ldrb	r3, [r2, #0]
 8008c3e:	600b      	str	r3, [r1, #0]
 8008c40:	7812      	ldrb	r2, [r2, #0]
 8008c42:	1e10      	subs	r0, r2, #0
 8008c44:	bf18      	it	ne
 8008c46:	2001      	movne	r0, #1
 8008c48:	b002      	add	sp, #8
 8008c4a:	4770      	bx	lr
 8008c4c:	4610      	mov	r0, r2
 8008c4e:	e7fb      	b.n	8008c48 <__ascii_mbtowc+0x16>
 8008c50:	f06f 0001 	mvn.w	r0, #1
 8008c54:	e7f8      	b.n	8008c48 <__ascii_mbtowc+0x16>

08008c56 <memmove>:
 8008c56:	4288      	cmp	r0, r1
 8008c58:	b510      	push	{r4, lr}
 8008c5a:	eb01 0402 	add.w	r4, r1, r2
 8008c5e:	d902      	bls.n	8008c66 <memmove+0x10>
 8008c60:	4284      	cmp	r4, r0
 8008c62:	4623      	mov	r3, r4
 8008c64:	d807      	bhi.n	8008c76 <memmove+0x20>
 8008c66:	1e43      	subs	r3, r0, #1
 8008c68:	42a1      	cmp	r1, r4
 8008c6a:	d008      	beq.n	8008c7e <memmove+0x28>
 8008c6c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008c70:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008c74:	e7f8      	b.n	8008c68 <memmove+0x12>
 8008c76:	4402      	add	r2, r0
 8008c78:	4601      	mov	r1, r0
 8008c7a:	428a      	cmp	r2, r1
 8008c7c:	d100      	bne.n	8008c80 <memmove+0x2a>
 8008c7e:	bd10      	pop	{r4, pc}
 8008c80:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008c84:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008c88:	e7f7      	b.n	8008c7a <memmove+0x24>

08008c8a <_malloc_usable_size_r>:
 8008c8a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c8e:	1f18      	subs	r0, r3, #4
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	bfbc      	itt	lt
 8008c94:	580b      	ldrlt	r3, [r1, r0]
 8008c96:	18c0      	addlt	r0, r0, r3
 8008c98:	4770      	bx	lr

08008c9a <__sfputc_r>:
 8008c9a:	6893      	ldr	r3, [r2, #8]
 8008c9c:	3b01      	subs	r3, #1
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	b410      	push	{r4}
 8008ca2:	6093      	str	r3, [r2, #8]
 8008ca4:	da08      	bge.n	8008cb8 <__sfputc_r+0x1e>
 8008ca6:	6994      	ldr	r4, [r2, #24]
 8008ca8:	42a3      	cmp	r3, r4
 8008caa:	db01      	blt.n	8008cb0 <__sfputc_r+0x16>
 8008cac:	290a      	cmp	r1, #10
 8008cae:	d103      	bne.n	8008cb8 <__sfputc_r+0x1e>
 8008cb0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008cb4:	f000 b94a 	b.w	8008f4c <__swbuf_r>
 8008cb8:	6813      	ldr	r3, [r2, #0]
 8008cba:	1c58      	adds	r0, r3, #1
 8008cbc:	6010      	str	r0, [r2, #0]
 8008cbe:	7019      	strb	r1, [r3, #0]
 8008cc0:	4608      	mov	r0, r1
 8008cc2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008cc6:	4770      	bx	lr

08008cc8 <__sfputs_r>:
 8008cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cca:	4606      	mov	r6, r0
 8008ccc:	460f      	mov	r7, r1
 8008cce:	4614      	mov	r4, r2
 8008cd0:	18d5      	adds	r5, r2, r3
 8008cd2:	42ac      	cmp	r4, r5
 8008cd4:	d101      	bne.n	8008cda <__sfputs_r+0x12>
 8008cd6:	2000      	movs	r0, #0
 8008cd8:	e007      	b.n	8008cea <__sfputs_r+0x22>
 8008cda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008cde:	463a      	mov	r2, r7
 8008ce0:	4630      	mov	r0, r6
 8008ce2:	f7ff ffda 	bl	8008c9a <__sfputc_r>
 8008ce6:	1c43      	adds	r3, r0, #1
 8008ce8:	d1f3      	bne.n	8008cd2 <__sfputs_r+0xa>
 8008cea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008cec <_vfiprintf_r>:
 8008cec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cf0:	460d      	mov	r5, r1
 8008cf2:	b09d      	sub	sp, #116	; 0x74
 8008cf4:	4614      	mov	r4, r2
 8008cf6:	4698      	mov	r8, r3
 8008cf8:	4606      	mov	r6, r0
 8008cfa:	b118      	cbz	r0, 8008d04 <_vfiprintf_r+0x18>
 8008cfc:	6983      	ldr	r3, [r0, #24]
 8008cfe:	b90b      	cbnz	r3, 8008d04 <_vfiprintf_r+0x18>
 8008d00:	f000 fb14 	bl	800932c <__sinit>
 8008d04:	4b89      	ldr	r3, [pc, #548]	; (8008f2c <_vfiprintf_r+0x240>)
 8008d06:	429d      	cmp	r5, r3
 8008d08:	d11b      	bne.n	8008d42 <_vfiprintf_r+0x56>
 8008d0a:	6875      	ldr	r5, [r6, #4]
 8008d0c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008d0e:	07d9      	lsls	r1, r3, #31
 8008d10:	d405      	bmi.n	8008d1e <_vfiprintf_r+0x32>
 8008d12:	89ab      	ldrh	r3, [r5, #12]
 8008d14:	059a      	lsls	r2, r3, #22
 8008d16:	d402      	bmi.n	8008d1e <_vfiprintf_r+0x32>
 8008d18:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008d1a:	f7ff ff88 	bl	8008c2e <__retarget_lock_acquire_recursive>
 8008d1e:	89ab      	ldrh	r3, [r5, #12]
 8008d20:	071b      	lsls	r3, r3, #28
 8008d22:	d501      	bpl.n	8008d28 <_vfiprintf_r+0x3c>
 8008d24:	692b      	ldr	r3, [r5, #16]
 8008d26:	b9eb      	cbnz	r3, 8008d64 <_vfiprintf_r+0x78>
 8008d28:	4629      	mov	r1, r5
 8008d2a:	4630      	mov	r0, r6
 8008d2c:	f000 f96e 	bl	800900c <__swsetup_r>
 8008d30:	b1c0      	cbz	r0, 8008d64 <_vfiprintf_r+0x78>
 8008d32:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008d34:	07dc      	lsls	r4, r3, #31
 8008d36:	d50e      	bpl.n	8008d56 <_vfiprintf_r+0x6a>
 8008d38:	f04f 30ff 	mov.w	r0, #4294967295
 8008d3c:	b01d      	add	sp, #116	; 0x74
 8008d3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d42:	4b7b      	ldr	r3, [pc, #492]	; (8008f30 <_vfiprintf_r+0x244>)
 8008d44:	429d      	cmp	r5, r3
 8008d46:	d101      	bne.n	8008d4c <_vfiprintf_r+0x60>
 8008d48:	68b5      	ldr	r5, [r6, #8]
 8008d4a:	e7df      	b.n	8008d0c <_vfiprintf_r+0x20>
 8008d4c:	4b79      	ldr	r3, [pc, #484]	; (8008f34 <_vfiprintf_r+0x248>)
 8008d4e:	429d      	cmp	r5, r3
 8008d50:	bf08      	it	eq
 8008d52:	68f5      	ldreq	r5, [r6, #12]
 8008d54:	e7da      	b.n	8008d0c <_vfiprintf_r+0x20>
 8008d56:	89ab      	ldrh	r3, [r5, #12]
 8008d58:	0598      	lsls	r0, r3, #22
 8008d5a:	d4ed      	bmi.n	8008d38 <_vfiprintf_r+0x4c>
 8008d5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008d5e:	f7ff ff67 	bl	8008c30 <__retarget_lock_release_recursive>
 8008d62:	e7e9      	b.n	8008d38 <_vfiprintf_r+0x4c>
 8008d64:	2300      	movs	r3, #0
 8008d66:	9309      	str	r3, [sp, #36]	; 0x24
 8008d68:	2320      	movs	r3, #32
 8008d6a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008d6e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008d72:	2330      	movs	r3, #48	; 0x30
 8008d74:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008f38 <_vfiprintf_r+0x24c>
 8008d78:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008d7c:	f04f 0901 	mov.w	r9, #1
 8008d80:	4623      	mov	r3, r4
 8008d82:	469a      	mov	sl, r3
 8008d84:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008d88:	b10a      	cbz	r2, 8008d8e <_vfiprintf_r+0xa2>
 8008d8a:	2a25      	cmp	r2, #37	; 0x25
 8008d8c:	d1f9      	bne.n	8008d82 <_vfiprintf_r+0x96>
 8008d8e:	ebba 0b04 	subs.w	fp, sl, r4
 8008d92:	d00b      	beq.n	8008dac <_vfiprintf_r+0xc0>
 8008d94:	465b      	mov	r3, fp
 8008d96:	4622      	mov	r2, r4
 8008d98:	4629      	mov	r1, r5
 8008d9a:	4630      	mov	r0, r6
 8008d9c:	f7ff ff94 	bl	8008cc8 <__sfputs_r>
 8008da0:	3001      	adds	r0, #1
 8008da2:	f000 80aa 	beq.w	8008efa <_vfiprintf_r+0x20e>
 8008da6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008da8:	445a      	add	r2, fp
 8008daa:	9209      	str	r2, [sp, #36]	; 0x24
 8008dac:	f89a 3000 	ldrb.w	r3, [sl]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	f000 80a2 	beq.w	8008efa <_vfiprintf_r+0x20e>
 8008db6:	2300      	movs	r3, #0
 8008db8:	f04f 32ff 	mov.w	r2, #4294967295
 8008dbc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008dc0:	f10a 0a01 	add.w	sl, sl, #1
 8008dc4:	9304      	str	r3, [sp, #16]
 8008dc6:	9307      	str	r3, [sp, #28]
 8008dc8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008dcc:	931a      	str	r3, [sp, #104]	; 0x68
 8008dce:	4654      	mov	r4, sl
 8008dd0:	2205      	movs	r2, #5
 8008dd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008dd6:	4858      	ldr	r0, [pc, #352]	; (8008f38 <_vfiprintf_r+0x24c>)
 8008dd8:	f7f7 fa22 	bl	8000220 <memchr>
 8008ddc:	9a04      	ldr	r2, [sp, #16]
 8008dde:	b9d8      	cbnz	r0, 8008e18 <_vfiprintf_r+0x12c>
 8008de0:	06d1      	lsls	r1, r2, #27
 8008de2:	bf44      	itt	mi
 8008de4:	2320      	movmi	r3, #32
 8008de6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008dea:	0713      	lsls	r3, r2, #28
 8008dec:	bf44      	itt	mi
 8008dee:	232b      	movmi	r3, #43	; 0x2b
 8008df0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008df4:	f89a 3000 	ldrb.w	r3, [sl]
 8008df8:	2b2a      	cmp	r3, #42	; 0x2a
 8008dfa:	d015      	beq.n	8008e28 <_vfiprintf_r+0x13c>
 8008dfc:	9a07      	ldr	r2, [sp, #28]
 8008dfe:	4654      	mov	r4, sl
 8008e00:	2000      	movs	r0, #0
 8008e02:	f04f 0c0a 	mov.w	ip, #10
 8008e06:	4621      	mov	r1, r4
 8008e08:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008e0c:	3b30      	subs	r3, #48	; 0x30
 8008e0e:	2b09      	cmp	r3, #9
 8008e10:	d94e      	bls.n	8008eb0 <_vfiprintf_r+0x1c4>
 8008e12:	b1b0      	cbz	r0, 8008e42 <_vfiprintf_r+0x156>
 8008e14:	9207      	str	r2, [sp, #28]
 8008e16:	e014      	b.n	8008e42 <_vfiprintf_r+0x156>
 8008e18:	eba0 0308 	sub.w	r3, r0, r8
 8008e1c:	fa09 f303 	lsl.w	r3, r9, r3
 8008e20:	4313      	orrs	r3, r2
 8008e22:	9304      	str	r3, [sp, #16]
 8008e24:	46a2      	mov	sl, r4
 8008e26:	e7d2      	b.n	8008dce <_vfiprintf_r+0xe2>
 8008e28:	9b03      	ldr	r3, [sp, #12]
 8008e2a:	1d19      	adds	r1, r3, #4
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	9103      	str	r1, [sp, #12]
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	bfbb      	ittet	lt
 8008e34:	425b      	neglt	r3, r3
 8008e36:	f042 0202 	orrlt.w	r2, r2, #2
 8008e3a:	9307      	strge	r3, [sp, #28]
 8008e3c:	9307      	strlt	r3, [sp, #28]
 8008e3e:	bfb8      	it	lt
 8008e40:	9204      	strlt	r2, [sp, #16]
 8008e42:	7823      	ldrb	r3, [r4, #0]
 8008e44:	2b2e      	cmp	r3, #46	; 0x2e
 8008e46:	d10c      	bne.n	8008e62 <_vfiprintf_r+0x176>
 8008e48:	7863      	ldrb	r3, [r4, #1]
 8008e4a:	2b2a      	cmp	r3, #42	; 0x2a
 8008e4c:	d135      	bne.n	8008eba <_vfiprintf_r+0x1ce>
 8008e4e:	9b03      	ldr	r3, [sp, #12]
 8008e50:	1d1a      	adds	r2, r3, #4
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	9203      	str	r2, [sp, #12]
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	bfb8      	it	lt
 8008e5a:	f04f 33ff 	movlt.w	r3, #4294967295
 8008e5e:	3402      	adds	r4, #2
 8008e60:	9305      	str	r3, [sp, #20]
 8008e62:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008f48 <_vfiprintf_r+0x25c>
 8008e66:	7821      	ldrb	r1, [r4, #0]
 8008e68:	2203      	movs	r2, #3
 8008e6a:	4650      	mov	r0, sl
 8008e6c:	f7f7 f9d8 	bl	8000220 <memchr>
 8008e70:	b140      	cbz	r0, 8008e84 <_vfiprintf_r+0x198>
 8008e72:	2340      	movs	r3, #64	; 0x40
 8008e74:	eba0 000a 	sub.w	r0, r0, sl
 8008e78:	fa03 f000 	lsl.w	r0, r3, r0
 8008e7c:	9b04      	ldr	r3, [sp, #16]
 8008e7e:	4303      	orrs	r3, r0
 8008e80:	3401      	adds	r4, #1
 8008e82:	9304      	str	r3, [sp, #16]
 8008e84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e88:	482c      	ldr	r0, [pc, #176]	; (8008f3c <_vfiprintf_r+0x250>)
 8008e8a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008e8e:	2206      	movs	r2, #6
 8008e90:	f7f7 f9c6 	bl	8000220 <memchr>
 8008e94:	2800      	cmp	r0, #0
 8008e96:	d03f      	beq.n	8008f18 <_vfiprintf_r+0x22c>
 8008e98:	4b29      	ldr	r3, [pc, #164]	; (8008f40 <_vfiprintf_r+0x254>)
 8008e9a:	bb1b      	cbnz	r3, 8008ee4 <_vfiprintf_r+0x1f8>
 8008e9c:	9b03      	ldr	r3, [sp, #12]
 8008e9e:	3307      	adds	r3, #7
 8008ea0:	f023 0307 	bic.w	r3, r3, #7
 8008ea4:	3308      	adds	r3, #8
 8008ea6:	9303      	str	r3, [sp, #12]
 8008ea8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008eaa:	443b      	add	r3, r7
 8008eac:	9309      	str	r3, [sp, #36]	; 0x24
 8008eae:	e767      	b.n	8008d80 <_vfiprintf_r+0x94>
 8008eb0:	fb0c 3202 	mla	r2, ip, r2, r3
 8008eb4:	460c      	mov	r4, r1
 8008eb6:	2001      	movs	r0, #1
 8008eb8:	e7a5      	b.n	8008e06 <_vfiprintf_r+0x11a>
 8008eba:	2300      	movs	r3, #0
 8008ebc:	3401      	adds	r4, #1
 8008ebe:	9305      	str	r3, [sp, #20]
 8008ec0:	4619      	mov	r1, r3
 8008ec2:	f04f 0c0a 	mov.w	ip, #10
 8008ec6:	4620      	mov	r0, r4
 8008ec8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008ecc:	3a30      	subs	r2, #48	; 0x30
 8008ece:	2a09      	cmp	r2, #9
 8008ed0:	d903      	bls.n	8008eda <_vfiprintf_r+0x1ee>
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d0c5      	beq.n	8008e62 <_vfiprintf_r+0x176>
 8008ed6:	9105      	str	r1, [sp, #20]
 8008ed8:	e7c3      	b.n	8008e62 <_vfiprintf_r+0x176>
 8008eda:	fb0c 2101 	mla	r1, ip, r1, r2
 8008ede:	4604      	mov	r4, r0
 8008ee0:	2301      	movs	r3, #1
 8008ee2:	e7f0      	b.n	8008ec6 <_vfiprintf_r+0x1da>
 8008ee4:	ab03      	add	r3, sp, #12
 8008ee6:	9300      	str	r3, [sp, #0]
 8008ee8:	462a      	mov	r2, r5
 8008eea:	4b16      	ldr	r3, [pc, #88]	; (8008f44 <_vfiprintf_r+0x258>)
 8008eec:	a904      	add	r1, sp, #16
 8008eee:	4630      	mov	r0, r6
 8008ef0:	f7fd fec4 	bl	8006c7c <_printf_float>
 8008ef4:	4607      	mov	r7, r0
 8008ef6:	1c78      	adds	r0, r7, #1
 8008ef8:	d1d6      	bne.n	8008ea8 <_vfiprintf_r+0x1bc>
 8008efa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008efc:	07d9      	lsls	r1, r3, #31
 8008efe:	d405      	bmi.n	8008f0c <_vfiprintf_r+0x220>
 8008f00:	89ab      	ldrh	r3, [r5, #12]
 8008f02:	059a      	lsls	r2, r3, #22
 8008f04:	d402      	bmi.n	8008f0c <_vfiprintf_r+0x220>
 8008f06:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008f08:	f7ff fe92 	bl	8008c30 <__retarget_lock_release_recursive>
 8008f0c:	89ab      	ldrh	r3, [r5, #12]
 8008f0e:	065b      	lsls	r3, r3, #25
 8008f10:	f53f af12 	bmi.w	8008d38 <_vfiprintf_r+0x4c>
 8008f14:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008f16:	e711      	b.n	8008d3c <_vfiprintf_r+0x50>
 8008f18:	ab03      	add	r3, sp, #12
 8008f1a:	9300      	str	r3, [sp, #0]
 8008f1c:	462a      	mov	r2, r5
 8008f1e:	4b09      	ldr	r3, [pc, #36]	; (8008f44 <_vfiprintf_r+0x258>)
 8008f20:	a904      	add	r1, sp, #16
 8008f22:	4630      	mov	r0, r6
 8008f24:	f7fe f94e 	bl	80071c4 <_printf_i>
 8008f28:	e7e4      	b.n	8008ef4 <_vfiprintf_r+0x208>
 8008f2a:	bf00      	nop
 8008f2c:	0800a81c 	.word	0x0800a81c
 8008f30:	0800a83c 	.word	0x0800a83c
 8008f34:	0800a7fc 	.word	0x0800a7fc
 8008f38:	0800a6a4 	.word	0x0800a6a4
 8008f3c:	0800a6ae 	.word	0x0800a6ae
 8008f40:	08006c7d 	.word	0x08006c7d
 8008f44:	08008cc9 	.word	0x08008cc9
 8008f48:	0800a6aa 	.word	0x0800a6aa

08008f4c <__swbuf_r>:
 8008f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f4e:	460e      	mov	r6, r1
 8008f50:	4614      	mov	r4, r2
 8008f52:	4605      	mov	r5, r0
 8008f54:	b118      	cbz	r0, 8008f5e <__swbuf_r+0x12>
 8008f56:	6983      	ldr	r3, [r0, #24]
 8008f58:	b90b      	cbnz	r3, 8008f5e <__swbuf_r+0x12>
 8008f5a:	f000 f9e7 	bl	800932c <__sinit>
 8008f5e:	4b21      	ldr	r3, [pc, #132]	; (8008fe4 <__swbuf_r+0x98>)
 8008f60:	429c      	cmp	r4, r3
 8008f62:	d12b      	bne.n	8008fbc <__swbuf_r+0x70>
 8008f64:	686c      	ldr	r4, [r5, #4]
 8008f66:	69a3      	ldr	r3, [r4, #24]
 8008f68:	60a3      	str	r3, [r4, #8]
 8008f6a:	89a3      	ldrh	r3, [r4, #12]
 8008f6c:	071a      	lsls	r2, r3, #28
 8008f6e:	d52f      	bpl.n	8008fd0 <__swbuf_r+0x84>
 8008f70:	6923      	ldr	r3, [r4, #16]
 8008f72:	b36b      	cbz	r3, 8008fd0 <__swbuf_r+0x84>
 8008f74:	6923      	ldr	r3, [r4, #16]
 8008f76:	6820      	ldr	r0, [r4, #0]
 8008f78:	1ac0      	subs	r0, r0, r3
 8008f7a:	6963      	ldr	r3, [r4, #20]
 8008f7c:	b2f6      	uxtb	r6, r6
 8008f7e:	4283      	cmp	r3, r0
 8008f80:	4637      	mov	r7, r6
 8008f82:	dc04      	bgt.n	8008f8e <__swbuf_r+0x42>
 8008f84:	4621      	mov	r1, r4
 8008f86:	4628      	mov	r0, r5
 8008f88:	f000 f93c 	bl	8009204 <_fflush_r>
 8008f8c:	bb30      	cbnz	r0, 8008fdc <__swbuf_r+0x90>
 8008f8e:	68a3      	ldr	r3, [r4, #8]
 8008f90:	3b01      	subs	r3, #1
 8008f92:	60a3      	str	r3, [r4, #8]
 8008f94:	6823      	ldr	r3, [r4, #0]
 8008f96:	1c5a      	adds	r2, r3, #1
 8008f98:	6022      	str	r2, [r4, #0]
 8008f9a:	701e      	strb	r6, [r3, #0]
 8008f9c:	6963      	ldr	r3, [r4, #20]
 8008f9e:	3001      	adds	r0, #1
 8008fa0:	4283      	cmp	r3, r0
 8008fa2:	d004      	beq.n	8008fae <__swbuf_r+0x62>
 8008fa4:	89a3      	ldrh	r3, [r4, #12]
 8008fa6:	07db      	lsls	r3, r3, #31
 8008fa8:	d506      	bpl.n	8008fb8 <__swbuf_r+0x6c>
 8008faa:	2e0a      	cmp	r6, #10
 8008fac:	d104      	bne.n	8008fb8 <__swbuf_r+0x6c>
 8008fae:	4621      	mov	r1, r4
 8008fb0:	4628      	mov	r0, r5
 8008fb2:	f000 f927 	bl	8009204 <_fflush_r>
 8008fb6:	b988      	cbnz	r0, 8008fdc <__swbuf_r+0x90>
 8008fb8:	4638      	mov	r0, r7
 8008fba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008fbc:	4b0a      	ldr	r3, [pc, #40]	; (8008fe8 <__swbuf_r+0x9c>)
 8008fbe:	429c      	cmp	r4, r3
 8008fc0:	d101      	bne.n	8008fc6 <__swbuf_r+0x7a>
 8008fc2:	68ac      	ldr	r4, [r5, #8]
 8008fc4:	e7cf      	b.n	8008f66 <__swbuf_r+0x1a>
 8008fc6:	4b09      	ldr	r3, [pc, #36]	; (8008fec <__swbuf_r+0xa0>)
 8008fc8:	429c      	cmp	r4, r3
 8008fca:	bf08      	it	eq
 8008fcc:	68ec      	ldreq	r4, [r5, #12]
 8008fce:	e7ca      	b.n	8008f66 <__swbuf_r+0x1a>
 8008fd0:	4621      	mov	r1, r4
 8008fd2:	4628      	mov	r0, r5
 8008fd4:	f000 f81a 	bl	800900c <__swsetup_r>
 8008fd8:	2800      	cmp	r0, #0
 8008fda:	d0cb      	beq.n	8008f74 <__swbuf_r+0x28>
 8008fdc:	f04f 37ff 	mov.w	r7, #4294967295
 8008fe0:	e7ea      	b.n	8008fb8 <__swbuf_r+0x6c>
 8008fe2:	bf00      	nop
 8008fe4:	0800a81c 	.word	0x0800a81c
 8008fe8:	0800a83c 	.word	0x0800a83c
 8008fec:	0800a7fc 	.word	0x0800a7fc

08008ff0 <__ascii_wctomb>:
 8008ff0:	b149      	cbz	r1, 8009006 <__ascii_wctomb+0x16>
 8008ff2:	2aff      	cmp	r2, #255	; 0xff
 8008ff4:	bf85      	ittet	hi
 8008ff6:	238a      	movhi	r3, #138	; 0x8a
 8008ff8:	6003      	strhi	r3, [r0, #0]
 8008ffa:	700a      	strbls	r2, [r1, #0]
 8008ffc:	f04f 30ff 	movhi.w	r0, #4294967295
 8009000:	bf98      	it	ls
 8009002:	2001      	movls	r0, #1
 8009004:	4770      	bx	lr
 8009006:	4608      	mov	r0, r1
 8009008:	4770      	bx	lr
	...

0800900c <__swsetup_r>:
 800900c:	4b32      	ldr	r3, [pc, #200]	; (80090d8 <__swsetup_r+0xcc>)
 800900e:	b570      	push	{r4, r5, r6, lr}
 8009010:	681d      	ldr	r5, [r3, #0]
 8009012:	4606      	mov	r6, r0
 8009014:	460c      	mov	r4, r1
 8009016:	b125      	cbz	r5, 8009022 <__swsetup_r+0x16>
 8009018:	69ab      	ldr	r3, [r5, #24]
 800901a:	b913      	cbnz	r3, 8009022 <__swsetup_r+0x16>
 800901c:	4628      	mov	r0, r5
 800901e:	f000 f985 	bl	800932c <__sinit>
 8009022:	4b2e      	ldr	r3, [pc, #184]	; (80090dc <__swsetup_r+0xd0>)
 8009024:	429c      	cmp	r4, r3
 8009026:	d10f      	bne.n	8009048 <__swsetup_r+0x3c>
 8009028:	686c      	ldr	r4, [r5, #4]
 800902a:	89a3      	ldrh	r3, [r4, #12]
 800902c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009030:	0719      	lsls	r1, r3, #28
 8009032:	d42c      	bmi.n	800908e <__swsetup_r+0x82>
 8009034:	06dd      	lsls	r5, r3, #27
 8009036:	d411      	bmi.n	800905c <__swsetup_r+0x50>
 8009038:	2309      	movs	r3, #9
 800903a:	6033      	str	r3, [r6, #0]
 800903c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009040:	81a3      	strh	r3, [r4, #12]
 8009042:	f04f 30ff 	mov.w	r0, #4294967295
 8009046:	e03e      	b.n	80090c6 <__swsetup_r+0xba>
 8009048:	4b25      	ldr	r3, [pc, #148]	; (80090e0 <__swsetup_r+0xd4>)
 800904a:	429c      	cmp	r4, r3
 800904c:	d101      	bne.n	8009052 <__swsetup_r+0x46>
 800904e:	68ac      	ldr	r4, [r5, #8]
 8009050:	e7eb      	b.n	800902a <__swsetup_r+0x1e>
 8009052:	4b24      	ldr	r3, [pc, #144]	; (80090e4 <__swsetup_r+0xd8>)
 8009054:	429c      	cmp	r4, r3
 8009056:	bf08      	it	eq
 8009058:	68ec      	ldreq	r4, [r5, #12]
 800905a:	e7e6      	b.n	800902a <__swsetup_r+0x1e>
 800905c:	0758      	lsls	r0, r3, #29
 800905e:	d512      	bpl.n	8009086 <__swsetup_r+0x7a>
 8009060:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009062:	b141      	cbz	r1, 8009076 <__swsetup_r+0x6a>
 8009064:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009068:	4299      	cmp	r1, r3
 800906a:	d002      	beq.n	8009072 <__swsetup_r+0x66>
 800906c:	4630      	mov	r0, r6
 800906e:	f7fd fc85 	bl	800697c <_free_r>
 8009072:	2300      	movs	r3, #0
 8009074:	6363      	str	r3, [r4, #52]	; 0x34
 8009076:	89a3      	ldrh	r3, [r4, #12]
 8009078:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800907c:	81a3      	strh	r3, [r4, #12]
 800907e:	2300      	movs	r3, #0
 8009080:	6063      	str	r3, [r4, #4]
 8009082:	6923      	ldr	r3, [r4, #16]
 8009084:	6023      	str	r3, [r4, #0]
 8009086:	89a3      	ldrh	r3, [r4, #12]
 8009088:	f043 0308 	orr.w	r3, r3, #8
 800908c:	81a3      	strh	r3, [r4, #12]
 800908e:	6923      	ldr	r3, [r4, #16]
 8009090:	b94b      	cbnz	r3, 80090a6 <__swsetup_r+0x9a>
 8009092:	89a3      	ldrh	r3, [r4, #12]
 8009094:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009098:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800909c:	d003      	beq.n	80090a6 <__swsetup_r+0x9a>
 800909e:	4621      	mov	r1, r4
 80090a0:	4630      	mov	r0, r6
 80090a2:	f000 fa05 	bl	80094b0 <__smakebuf_r>
 80090a6:	89a0      	ldrh	r0, [r4, #12]
 80090a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80090ac:	f010 0301 	ands.w	r3, r0, #1
 80090b0:	d00a      	beq.n	80090c8 <__swsetup_r+0xbc>
 80090b2:	2300      	movs	r3, #0
 80090b4:	60a3      	str	r3, [r4, #8]
 80090b6:	6963      	ldr	r3, [r4, #20]
 80090b8:	425b      	negs	r3, r3
 80090ba:	61a3      	str	r3, [r4, #24]
 80090bc:	6923      	ldr	r3, [r4, #16]
 80090be:	b943      	cbnz	r3, 80090d2 <__swsetup_r+0xc6>
 80090c0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80090c4:	d1ba      	bne.n	800903c <__swsetup_r+0x30>
 80090c6:	bd70      	pop	{r4, r5, r6, pc}
 80090c8:	0781      	lsls	r1, r0, #30
 80090ca:	bf58      	it	pl
 80090cc:	6963      	ldrpl	r3, [r4, #20]
 80090ce:	60a3      	str	r3, [r4, #8]
 80090d0:	e7f4      	b.n	80090bc <__swsetup_r+0xb0>
 80090d2:	2000      	movs	r0, #0
 80090d4:	e7f7      	b.n	80090c6 <__swsetup_r+0xba>
 80090d6:	bf00      	nop
 80090d8:	2000073c 	.word	0x2000073c
 80090dc:	0800a81c 	.word	0x0800a81c
 80090e0:	0800a83c 	.word	0x0800a83c
 80090e4:	0800a7fc 	.word	0x0800a7fc

080090e8 <abort>:
 80090e8:	b508      	push	{r3, lr}
 80090ea:	2006      	movs	r0, #6
 80090ec:	f000 fa48 	bl	8009580 <raise>
 80090f0:	2001      	movs	r0, #1
 80090f2:	f000 ff1f 	bl	8009f34 <_exit>
	...

080090f8 <__sflush_r>:
 80090f8:	898a      	ldrh	r2, [r1, #12]
 80090fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090fe:	4605      	mov	r5, r0
 8009100:	0710      	lsls	r0, r2, #28
 8009102:	460c      	mov	r4, r1
 8009104:	d458      	bmi.n	80091b8 <__sflush_r+0xc0>
 8009106:	684b      	ldr	r3, [r1, #4]
 8009108:	2b00      	cmp	r3, #0
 800910a:	dc05      	bgt.n	8009118 <__sflush_r+0x20>
 800910c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800910e:	2b00      	cmp	r3, #0
 8009110:	dc02      	bgt.n	8009118 <__sflush_r+0x20>
 8009112:	2000      	movs	r0, #0
 8009114:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009118:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800911a:	2e00      	cmp	r6, #0
 800911c:	d0f9      	beq.n	8009112 <__sflush_r+0x1a>
 800911e:	2300      	movs	r3, #0
 8009120:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009124:	682f      	ldr	r7, [r5, #0]
 8009126:	602b      	str	r3, [r5, #0]
 8009128:	d032      	beq.n	8009190 <__sflush_r+0x98>
 800912a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800912c:	89a3      	ldrh	r3, [r4, #12]
 800912e:	075a      	lsls	r2, r3, #29
 8009130:	d505      	bpl.n	800913e <__sflush_r+0x46>
 8009132:	6863      	ldr	r3, [r4, #4]
 8009134:	1ac0      	subs	r0, r0, r3
 8009136:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009138:	b10b      	cbz	r3, 800913e <__sflush_r+0x46>
 800913a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800913c:	1ac0      	subs	r0, r0, r3
 800913e:	2300      	movs	r3, #0
 8009140:	4602      	mov	r2, r0
 8009142:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009144:	6a21      	ldr	r1, [r4, #32]
 8009146:	4628      	mov	r0, r5
 8009148:	47b0      	blx	r6
 800914a:	1c43      	adds	r3, r0, #1
 800914c:	89a3      	ldrh	r3, [r4, #12]
 800914e:	d106      	bne.n	800915e <__sflush_r+0x66>
 8009150:	6829      	ldr	r1, [r5, #0]
 8009152:	291d      	cmp	r1, #29
 8009154:	d82c      	bhi.n	80091b0 <__sflush_r+0xb8>
 8009156:	4a2a      	ldr	r2, [pc, #168]	; (8009200 <__sflush_r+0x108>)
 8009158:	40ca      	lsrs	r2, r1
 800915a:	07d6      	lsls	r6, r2, #31
 800915c:	d528      	bpl.n	80091b0 <__sflush_r+0xb8>
 800915e:	2200      	movs	r2, #0
 8009160:	6062      	str	r2, [r4, #4]
 8009162:	04d9      	lsls	r1, r3, #19
 8009164:	6922      	ldr	r2, [r4, #16]
 8009166:	6022      	str	r2, [r4, #0]
 8009168:	d504      	bpl.n	8009174 <__sflush_r+0x7c>
 800916a:	1c42      	adds	r2, r0, #1
 800916c:	d101      	bne.n	8009172 <__sflush_r+0x7a>
 800916e:	682b      	ldr	r3, [r5, #0]
 8009170:	b903      	cbnz	r3, 8009174 <__sflush_r+0x7c>
 8009172:	6560      	str	r0, [r4, #84]	; 0x54
 8009174:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009176:	602f      	str	r7, [r5, #0]
 8009178:	2900      	cmp	r1, #0
 800917a:	d0ca      	beq.n	8009112 <__sflush_r+0x1a>
 800917c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009180:	4299      	cmp	r1, r3
 8009182:	d002      	beq.n	800918a <__sflush_r+0x92>
 8009184:	4628      	mov	r0, r5
 8009186:	f7fd fbf9 	bl	800697c <_free_r>
 800918a:	2000      	movs	r0, #0
 800918c:	6360      	str	r0, [r4, #52]	; 0x34
 800918e:	e7c1      	b.n	8009114 <__sflush_r+0x1c>
 8009190:	6a21      	ldr	r1, [r4, #32]
 8009192:	2301      	movs	r3, #1
 8009194:	4628      	mov	r0, r5
 8009196:	47b0      	blx	r6
 8009198:	1c41      	adds	r1, r0, #1
 800919a:	d1c7      	bne.n	800912c <__sflush_r+0x34>
 800919c:	682b      	ldr	r3, [r5, #0]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d0c4      	beq.n	800912c <__sflush_r+0x34>
 80091a2:	2b1d      	cmp	r3, #29
 80091a4:	d001      	beq.n	80091aa <__sflush_r+0xb2>
 80091a6:	2b16      	cmp	r3, #22
 80091a8:	d101      	bne.n	80091ae <__sflush_r+0xb6>
 80091aa:	602f      	str	r7, [r5, #0]
 80091ac:	e7b1      	b.n	8009112 <__sflush_r+0x1a>
 80091ae:	89a3      	ldrh	r3, [r4, #12]
 80091b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80091b4:	81a3      	strh	r3, [r4, #12]
 80091b6:	e7ad      	b.n	8009114 <__sflush_r+0x1c>
 80091b8:	690f      	ldr	r7, [r1, #16]
 80091ba:	2f00      	cmp	r7, #0
 80091bc:	d0a9      	beq.n	8009112 <__sflush_r+0x1a>
 80091be:	0793      	lsls	r3, r2, #30
 80091c0:	680e      	ldr	r6, [r1, #0]
 80091c2:	bf08      	it	eq
 80091c4:	694b      	ldreq	r3, [r1, #20]
 80091c6:	600f      	str	r7, [r1, #0]
 80091c8:	bf18      	it	ne
 80091ca:	2300      	movne	r3, #0
 80091cc:	eba6 0807 	sub.w	r8, r6, r7
 80091d0:	608b      	str	r3, [r1, #8]
 80091d2:	f1b8 0f00 	cmp.w	r8, #0
 80091d6:	dd9c      	ble.n	8009112 <__sflush_r+0x1a>
 80091d8:	6a21      	ldr	r1, [r4, #32]
 80091da:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80091dc:	4643      	mov	r3, r8
 80091de:	463a      	mov	r2, r7
 80091e0:	4628      	mov	r0, r5
 80091e2:	47b0      	blx	r6
 80091e4:	2800      	cmp	r0, #0
 80091e6:	dc06      	bgt.n	80091f6 <__sflush_r+0xfe>
 80091e8:	89a3      	ldrh	r3, [r4, #12]
 80091ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80091ee:	81a3      	strh	r3, [r4, #12]
 80091f0:	f04f 30ff 	mov.w	r0, #4294967295
 80091f4:	e78e      	b.n	8009114 <__sflush_r+0x1c>
 80091f6:	4407      	add	r7, r0
 80091f8:	eba8 0800 	sub.w	r8, r8, r0
 80091fc:	e7e9      	b.n	80091d2 <__sflush_r+0xda>
 80091fe:	bf00      	nop
 8009200:	20400001 	.word	0x20400001

08009204 <_fflush_r>:
 8009204:	b538      	push	{r3, r4, r5, lr}
 8009206:	690b      	ldr	r3, [r1, #16]
 8009208:	4605      	mov	r5, r0
 800920a:	460c      	mov	r4, r1
 800920c:	b913      	cbnz	r3, 8009214 <_fflush_r+0x10>
 800920e:	2500      	movs	r5, #0
 8009210:	4628      	mov	r0, r5
 8009212:	bd38      	pop	{r3, r4, r5, pc}
 8009214:	b118      	cbz	r0, 800921e <_fflush_r+0x1a>
 8009216:	6983      	ldr	r3, [r0, #24]
 8009218:	b90b      	cbnz	r3, 800921e <_fflush_r+0x1a>
 800921a:	f000 f887 	bl	800932c <__sinit>
 800921e:	4b14      	ldr	r3, [pc, #80]	; (8009270 <_fflush_r+0x6c>)
 8009220:	429c      	cmp	r4, r3
 8009222:	d11b      	bne.n	800925c <_fflush_r+0x58>
 8009224:	686c      	ldr	r4, [r5, #4]
 8009226:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800922a:	2b00      	cmp	r3, #0
 800922c:	d0ef      	beq.n	800920e <_fflush_r+0xa>
 800922e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009230:	07d0      	lsls	r0, r2, #31
 8009232:	d404      	bmi.n	800923e <_fflush_r+0x3a>
 8009234:	0599      	lsls	r1, r3, #22
 8009236:	d402      	bmi.n	800923e <_fflush_r+0x3a>
 8009238:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800923a:	f7ff fcf8 	bl	8008c2e <__retarget_lock_acquire_recursive>
 800923e:	4628      	mov	r0, r5
 8009240:	4621      	mov	r1, r4
 8009242:	f7ff ff59 	bl	80090f8 <__sflush_r>
 8009246:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009248:	07da      	lsls	r2, r3, #31
 800924a:	4605      	mov	r5, r0
 800924c:	d4e0      	bmi.n	8009210 <_fflush_r+0xc>
 800924e:	89a3      	ldrh	r3, [r4, #12]
 8009250:	059b      	lsls	r3, r3, #22
 8009252:	d4dd      	bmi.n	8009210 <_fflush_r+0xc>
 8009254:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009256:	f7ff fceb 	bl	8008c30 <__retarget_lock_release_recursive>
 800925a:	e7d9      	b.n	8009210 <_fflush_r+0xc>
 800925c:	4b05      	ldr	r3, [pc, #20]	; (8009274 <_fflush_r+0x70>)
 800925e:	429c      	cmp	r4, r3
 8009260:	d101      	bne.n	8009266 <_fflush_r+0x62>
 8009262:	68ac      	ldr	r4, [r5, #8]
 8009264:	e7df      	b.n	8009226 <_fflush_r+0x22>
 8009266:	4b04      	ldr	r3, [pc, #16]	; (8009278 <_fflush_r+0x74>)
 8009268:	429c      	cmp	r4, r3
 800926a:	bf08      	it	eq
 800926c:	68ec      	ldreq	r4, [r5, #12]
 800926e:	e7da      	b.n	8009226 <_fflush_r+0x22>
 8009270:	0800a81c 	.word	0x0800a81c
 8009274:	0800a83c 	.word	0x0800a83c
 8009278:	0800a7fc 	.word	0x0800a7fc

0800927c <std>:
 800927c:	2300      	movs	r3, #0
 800927e:	b510      	push	{r4, lr}
 8009280:	4604      	mov	r4, r0
 8009282:	e9c0 3300 	strd	r3, r3, [r0]
 8009286:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800928a:	6083      	str	r3, [r0, #8]
 800928c:	8181      	strh	r1, [r0, #12]
 800928e:	6643      	str	r3, [r0, #100]	; 0x64
 8009290:	81c2      	strh	r2, [r0, #14]
 8009292:	6183      	str	r3, [r0, #24]
 8009294:	4619      	mov	r1, r3
 8009296:	2208      	movs	r2, #8
 8009298:	305c      	adds	r0, #92	; 0x5c
 800929a:	f7fd fb67 	bl	800696c <memset>
 800929e:	4b05      	ldr	r3, [pc, #20]	; (80092b4 <std+0x38>)
 80092a0:	6263      	str	r3, [r4, #36]	; 0x24
 80092a2:	4b05      	ldr	r3, [pc, #20]	; (80092b8 <std+0x3c>)
 80092a4:	62a3      	str	r3, [r4, #40]	; 0x28
 80092a6:	4b05      	ldr	r3, [pc, #20]	; (80092bc <std+0x40>)
 80092a8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80092aa:	4b05      	ldr	r3, [pc, #20]	; (80092c0 <std+0x44>)
 80092ac:	6224      	str	r4, [r4, #32]
 80092ae:	6323      	str	r3, [r4, #48]	; 0x30
 80092b0:	bd10      	pop	{r4, pc}
 80092b2:	bf00      	nop
 80092b4:	080095b9 	.word	0x080095b9
 80092b8:	080095db 	.word	0x080095db
 80092bc:	08009613 	.word	0x08009613
 80092c0:	08009637 	.word	0x08009637

080092c4 <_cleanup_r>:
 80092c4:	4901      	ldr	r1, [pc, #4]	; (80092cc <_cleanup_r+0x8>)
 80092c6:	f000 b8af 	b.w	8009428 <_fwalk_reent>
 80092ca:	bf00      	nop
 80092cc:	08009205 	.word	0x08009205

080092d0 <__sfmoreglue>:
 80092d0:	b570      	push	{r4, r5, r6, lr}
 80092d2:	2268      	movs	r2, #104	; 0x68
 80092d4:	1e4d      	subs	r5, r1, #1
 80092d6:	4355      	muls	r5, r2
 80092d8:	460e      	mov	r6, r1
 80092da:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80092de:	f7fd fbb9 	bl	8006a54 <_malloc_r>
 80092e2:	4604      	mov	r4, r0
 80092e4:	b140      	cbz	r0, 80092f8 <__sfmoreglue+0x28>
 80092e6:	2100      	movs	r1, #0
 80092e8:	e9c0 1600 	strd	r1, r6, [r0]
 80092ec:	300c      	adds	r0, #12
 80092ee:	60a0      	str	r0, [r4, #8]
 80092f0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80092f4:	f7fd fb3a 	bl	800696c <memset>
 80092f8:	4620      	mov	r0, r4
 80092fa:	bd70      	pop	{r4, r5, r6, pc}

080092fc <__sfp_lock_acquire>:
 80092fc:	4801      	ldr	r0, [pc, #4]	; (8009304 <__sfp_lock_acquire+0x8>)
 80092fe:	f7ff bc96 	b.w	8008c2e <__retarget_lock_acquire_recursive>
 8009302:	bf00      	nop
 8009304:	20000ad5 	.word	0x20000ad5

08009308 <__sfp_lock_release>:
 8009308:	4801      	ldr	r0, [pc, #4]	; (8009310 <__sfp_lock_release+0x8>)
 800930a:	f7ff bc91 	b.w	8008c30 <__retarget_lock_release_recursive>
 800930e:	bf00      	nop
 8009310:	20000ad5 	.word	0x20000ad5

08009314 <__sinit_lock_acquire>:
 8009314:	4801      	ldr	r0, [pc, #4]	; (800931c <__sinit_lock_acquire+0x8>)
 8009316:	f7ff bc8a 	b.w	8008c2e <__retarget_lock_acquire_recursive>
 800931a:	bf00      	nop
 800931c:	20000ad6 	.word	0x20000ad6

08009320 <__sinit_lock_release>:
 8009320:	4801      	ldr	r0, [pc, #4]	; (8009328 <__sinit_lock_release+0x8>)
 8009322:	f7ff bc85 	b.w	8008c30 <__retarget_lock_release_recursive>
 8009326:	bf00      	nop
 8009328:	20000ad6 	.word	0x20000ad6

0800932c <__sinit>:
 800932c:	b510      	push	{r4, lr}
 800932e:	4604      	mov	r4, r0
 8009330:	f7ff fff0 	bl	8009314 <__sinit_lock_acquire>
 8009334:	69a3      	ldr	r3, [r4, #24]
 8009336:	b11b      	cbz	r3, 8009340 <__sinit+0x14>
 8009338:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800933c:	f7ff bff0 	b.w	8009320 <__sinit_lock_release>
 8009340:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009344:	6523      	str	r3, [r4, #80]	; 0x50
 8009346:	4b13      	ldr	r3, [pc, #76]	; (8009394 <__sinit+0x68>)
 8009348:	4a13      	ldr	r2, [pc, #76]	; (8009398 <__sinit+0x6c>)
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	62a2      	str	r2, [r4, #40]	; 0x28
 800934e:	42a3      	cmp	r3, r4
 8009350:	bf04      	itt	eq
 8009352:	2301      	moveq	r3, #1
 8009354:	61a3      	streq	r3, [r4, #24]
 8009356:	4620      	mov	r0, r4
 8009358:	f000 f820 	bl	800939c <__sfp>
 800935c:	6060      	str	r0, [r4, #4]
 800935e:	4620      	mov	r0, r4
 8009360:	f000 f81c 	bl	800939c <__sfp>
 8009364:	60a0      	str	r0, [r4, #8]
 8009366:	4620      	mov	r0, r4
 8009368:	f000 f818 	bl	800939c <__sfp>
 800936c:	2200      	movs	r2, #0
 800936e:	60e0      	str	r0, [r4, #12]
 8009370:	2104      	movs	r1, #4
 8009372:	6860      	ldr	r0, [r4, #4]
 8009374:	f7ff ff82 	bl	800927c <std>
 8009378:	68a0      	ldr	r0, [r4, #8]
 800937a:	2201      	movs	r2, #1
 800937c:	2109      	movs	r1, #9
 800937e:	f7ff ff7d 	bl	800927c <std>
 8009382:	68e0      	ldr	r0, [r4, #12]
 8009384:	2202      	movs	r2, #2
 8009386:	2112      	movs	r1, #18
 8009388:	f7ff ff78 	bl	800927c <std>
 800938c:	2301      	movs	r3, #1
 800938e:	61a3      	str	r3, [r4, #24]
 8009390:	e7d2      	b.n	8009338 <__sinit+0xc>
 8009392:	bf00      	nop
 8009394:	0800a484 	.word	0x0800a484
 8009398:	080092c5 	.word	0x080092c5

0800939c <__sfp>:
 800939c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800939e:	4607      	mov	r7, r0
 80093a0:	f7ff ffac 	bl	80092fc <__sfp_lock_acquire>
 80093a4:	4b1e      	ldr	r3, [pc, #120]	; (8009420 <__sfp+0x84>)
 80093a6:	681e      	ldr	r6, [r3, #0]
 80093a8:	69b3      	ldr	r3, [r6, #24]
 80093aa:	b913      	cbnz	r3, 80093b2 <__sfp+0x16>
 80093ac:	4630      	mov	r0, r6
 80093ae:	f7ff ffbd 	bl	800932c <__sinit>
 80093b2:	3648      	adds	r6, #72	; 0x48
 80093b4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80093b8:	3b01      	subs	r3, #1
 80093ba:	d503      	bpl.n	80093c4 <__sfp+0x28>
 80093bc:	6833      	ldr	r3, [r6, #0]
 80093be:	b30b      	cbz	r3, 8009404 <__sfp+0x68>
 80093c0:	6836      	ldr	r6, [r6, #0]
 80093c2:	e7f7      	b.n	80093b4 <__sfp+0x18>
 80093c4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80093c8:	b9d5      	cbnz	r5, 8009400 <__sfp+0x64>
 80093ca:	4b16      	ldr	r3, [pc, #88]	; (8009424 <__sfp+0x88>)
 80093cc:	60e3      	str	r3, [r4, #12]
 80093ce:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80093d2:	6665      	str	r5, [r4, #100]	; 0x64
 80093d4:	f7ff fc2a 	bl	8008c2c <__retarget_lock_init_recursive>
 80093d8:	f7ff ff96 	bl	8009308 <__sfp_lock_release>
 80093dc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80093e0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80093e4:	6025      	str	r5, [r4, #0]
 80093e6:	61a5      	str	r5, [r4, #24]
 80093e8:	2208      	movs	r2, #8
 80093ea:	4629      	mov	r1, r5
 80093ec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80093f0:	f7fd fabc 	bl	800696c <memset>
 80093f4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80093f8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80093fc:	4620      	mov	r0, r4
 80093fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009400:	3468      	adds	r4, #104	; 0x68
 8009402:	e7d9      	b.n	80093b8 <__sfp+0x1c>
 8009404:	2104      	movs	r1, #4
 8009406:	4638      	mov	r0, r7
 8009408:	f7ff ff62 	bl	80092d0 <__sfmoreglue>
 800940c:	4604      	mov	r4, r0
 800940e:	6030      	str	r0, [r6, #0]
 8009410:	2800      	cmp	r0, #0
 8009412:	d1d5      	bne.n	80093c0 <__sfp+0x24>
 8009414:	f7ff ff78 	bl	8009308 <__sfp_lock_release>
 8009418:	230c      	movs	r3, #12
 800941a:	603b      	str	r3, [r7, #0]
 800941c:	e7ee      	b.n	80093fc <__sfp+0x60>
 800941e:	bf00      	nop
 8009420:	0800a484 	.word	0x0800a484
 8009424:	ffff0001 	.word	0xffff0001

08009428 <_fwalk_reent>:
 8009428:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800942c:	4606      	mov	r6, r0
 800942e:	4688      	mov	r8, r1
 8009430:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009434:	2700      	movs	r7, #0
 8009436:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800943a:	f1b9 0901 	subs.w	r9, r9, #1
 800943e:	d505      	bpl.n	800944c <_fwalk_reent+0x24>
 8009440:	6824      	ldr	r4, [r4, #0]
 8009442:	2c00      	cmp	r4, #0
 8009444:	d1f7      	bne.n	8009436 <_fwalk_reent+0xe>
 8009446:	4638      	mov	r0, r7
 8009448:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800944c:	89ab      	ldrh	r3, [r5, #12]
 800944e:	2b01      	cmp	r3, #1
 8009450:	d907      	bls.n	8009462 <_fwalk_reent+0x3a>
 8009452:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009456:	3301      	adds	r3, #1
 8009458:	d003      	beq.n	8009462 <_fwalk_reent+0x3a>
 800945a:	4629      	mov	r1, r5
 800945c:	4630      	mov	r0, r6
 800945e:	47c0      	blx	r8
 8009460:	4307      	orrs	r7, r0
 8009462:	3568      	adds	r5, #104	; 0x68
 8009464:	e7e9      	b.n	800943a <_fwalk_reent+0x12>

08009466 <__swhatbuf_r>:
 8009466:	b570      	push	{r4, r5, r6, lr}
 8009468:	460e      	mov	r6, r1
 800946a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800946e:	2900      	cmp	r1, #0
 8009470:	b096      	sub	sp, #88	; 0x58
 8009472:	4614      	mov	r4, r2
 8009474:	461d      	mov	r5, r3
 8009476:	da08      	bge.n	800948a <__swhatbuf_r+0x24>
 8009478:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800947c:	2200      	movs	r2, #0
 800947e:	602a      	str	r2, [r5, #0]
 8009480:	061a      	lsls	r2, r3, #24
 8009482:	d410      	bmi.n	80094a6 <__swhatbuf_r+0x40>
 8009484:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009488:	e00e      	b.n	80094a8 <__swhatbuf_r+0x42>
 800948a:	466a      	mov	r2, sp
 800948c:	f000 f8fa 	bl	8009684 <_fstat_r>
 8009490:	2800      	cmp	r0, #0
 8009492:	dbf1      	blt.n	8009478 <__swhatbuf_r+0x12>
 8009494:	9a01      	ldr	r2, [sp, #4]
 8009496:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800949a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800949e:	425a      	negs	r2, r3
 80094a0:	415a      	adcs	r2, r3
 80094a2:	602a      	str	r2, [r5, #0]
 80094a4:	e7ee      	b.n	8009484 <__swhatbuf_r+0x1e>
 80094a6:	2340      	movs	r3, #64	; 0x40
 80094a8:	2000      	movs	r0, #0
 80094aa:	6023      	str	r3, [r4, #0]
 80094ac:	b016      	add	sp, #88	; 0x58
 80094ae:	bd70      	pop	{r4, r5, r6, pc}

080094b0 <__smakebuf_r>:
 80094b0:	898b      	ldrh	r3, [r1, #12]
 80094b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80094b4:	079d      	lsls	r5, r3, #30
 80094b6:	4606      	mov	r6, r0
 80094b8:	460c      	mov	r4, r1
 80094ba:	d507      	bpl.n	80094cc <__smakebuf_r+0x1c>
 80094bc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80094c0:	6023      	str	r3, [r4, #0]
 80094c2:	6123      	str	r3, [r4, #16]
 80094c4:	2301      	movs	r3, #1
 80094c6:	6163      	str	r3, [r4, #20]
 80094c8:	b002      	add	sp, #8
 80094ca:	bd70      	pop	{r4, r5, r6, pc}
 80094cc:	ab01      	add	r3, sp, #4
 80094ce:	466a      	mov	r2, sp
 80094d0:	f7ff ffc9 	bl	8009466 <__swhatbuf_r>
 80094d4:	9900      	ldr	r1, [sp, #0]
 80094d6:	4605      	mov	r5, r0
 80094d8:	4630      	mov	r0, r6
 80094da:	f7fd fabb 	bl	8006a54 <_malloc_r>
 80094de:	b948      	cbnz	r0, 80094f4 <__smakebuf_r+0x44>
 80094e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80094e4:	059a      	lsls	r2, r3, #22
 80094e6:	d4ef      	bmi.n	80094c8 <__smakebuf_r+0x18>
 80094e8:	f023 0303 	bic.w	r3, r3, #3
 80094ec:	f043 0302 	orr.w	r3, r3, #2
 80094f0:	81a3      	strh	r3, [r4, #12]
 80094f2:	e7e3      	b.n	80094bc <__smakebuf_r+0xc>
 80094f4:	4b0d      	ldr	r3, [pc, #52]	; (800952c <__smakebuf_r+0x7c>)
 80094f6:	62b3      	str	r3, [r6, #40]	; 0x28
 80094f8:	89a3      	ldrh	r3, [r4, #12]
 80094fa:	6020      	str	r0, [r4, #0]
 80094fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009500:	81a3      	strh	r3, [r4, #12]
 8009502:	9b00      	ldr	r3, [sp, #0]
 8009504:	6163      	str	r3, [r4, #20]
 8009506:	9b01      	ldr	r3, [sp, #4]
 8009508:	6120      	str	r0, [r4, #16]
 800950a:	b15b      	cbz	r3, 8009524 <__smakebuf_r+0x74>
 800950c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009510:	4630      	mov	r0, r6
 8009512:	f000 f8c9 	bl	80096a8 <_isatty_r>
 8009516:	b128      	cbz	r0, 8009524 <__smakebuf_r+0x74>
 8009518:	89a3      	ldrh	r3, [r4, #12]
 800951a:	f023 0303 	bic.w	r3, r3, #3
 800951e:	f043 0301 	orr.w	r3, r3, #1
 8009522:	81a3      	strh	r3, [r4, #12]
 8009524:	89a0      	ldrh	r0, [r4, #12]
 8009526:	4305      	orrs	r5, r0
 8009528:	81a5      	strh	r5, [r4, #12]
 800952a:	e7cd      	b.n	80094c8 <__smakebuf_r+0x18>
 800952c:	080092c5 	.word	0x080092c5

08009530 <_raise_r>:
 8009530:	291f      	cmp	r1, #31
 8009532:	b538      	push	{r3, r4, r5, lr}
 8009534:	4604      	mov	r4, r0
 8009536:	460d      	mov	r5, r1
 8009538:	d904      	bls.n	8009544 <_raise_r+0x14>
 800953a:	2316      	movs	r3, #22
 800953c:	6003      	str	r3, [r0, #0]
 800953e:	f04f 30ff 	mov.w	r0, #4294967295
 8009542:	bd38      	pop	{r3, r4, r5, pc}
 8009544:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009546:	b112      	cbz	r2, 800954e <_raise_r+0x1e>
 8009548:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800954c:	b94b      	cbnz	r3, 8009562 <_raise_r+0x32>
 800954e:	4620      	mov	r0, r4
 8009550:	f000 f830 	bl	80095b4 <_getpid_r>
 8009554:	462a      	mov	r2, r5
 8009556:	4601      	mov	r1, r0
 8009558:	4620      	mov	r0, r4
 800955a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800955e:	f000 b817 	b.w	8009590 <_kill_r>
 8009562:	2b01      	cmp	r3, #1
 8009564:	d00a      	beq.n	800957c <_raise_r+0x4c>
 8009566:	1c59      	adds	r1, r3, #1
 8009568:	d103      	bne.n	8009572 <_raise_r+0x42>
 800956a:	2316      	movs	r3, #22
 800956c:	6003      	str	r3, [r0, #0]
 800956e:	2001      	movs	r0, #1
 8009570:	e7e7      	b.n	8009542 <_raise_r+0x12>
 8009572:	2400      	movs	r4, #0
 8009574:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009578:	4628      	mov	r0, r5
 800957a:	4798      	blx	r3
 800957c:	2000      	movs	r0, #0
 800957e:	e7e0      	b.n	8009542 <_raise_r+0x12>

08009580 <raise>:
 8009580:	4b02      	ldr	r3, [pc, #8]	; (800958c <raise+0xc>)
 8009582:	4601      	mov	r1, r0
 8009584:	6818      	ldr	r0, [r3, #0]
 8009586:	f7ff bfd3 	b.w	8009530 <_raise_r>
 800958a:	bf00      	nop
 800958c:	2000073c 	.word	0x2000073c

08009590 <_kill_r>:
 8009590:	b538      	push	{r3, r4, r5, lr}
 8009592:	4d07      	ldr	r5, [pc, #28]	; (80095b0 <_kill_r+0x20>)
 8009594:	2300      	movs	r3, #0
 8009596:	4604      	mov	r4, r0
 8009598:	4608      	mov	r0, r1
 800959a:	4611      	mov	r1, r2
 800959c:	602b      	str	r3, [r5, #0]
 800959e:	f000 fca9 	bl	8009ef4 <_kill>
 80095a2:	1c43      	adds	r3, r0, #1
 80095a4:	d102      	bne.n	80095ac <_kill_r+0x1c>
 80095a6:	682b      	ldr	r3, [r5, #0]
 80095a8:	b103      	cbz	r3, 80095ac <_kill_r+0x1c>
 80095aa:	6023      	str	r3, [r4, #0]
 80095ac:	bd38      	pop	{r3, r4, r5, pc}
 80095ae:	bf00      	nop
 80095b0:	20000ad0 	.word	0x20000ad0

080095b4 <_getpid_r>:
 80095b4:	f000 bc8e 	b.w	8009ed4 <_getpid>

080095b8 <__sread>:
 80095b8:	b510      	push	{r4, lr}
 80095ba:	460c      	mov	r4, r1
 80095bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80095c0:	f000 f894 	bl	80096ec <_read_r>
 80095c4:	2800      	cmp	r0, #0
 80095c6:	bfab      	itete	ge
 80095c8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80095ca:	89a3      	ldrhlt	r3, [r4, #12]
 80095cc:	181b      	addge	r3, r3, r0
 80095ce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80095d2:	bfac      	ite	ge
 80095d4:	6563      	strge	r3, [r4, #84]	; 0x54
 80095d6:	81a3      	strhlt	r3, [r4, #12]
 80095d8:	bd10      	pop	{r4, pc}

080095da <__swrite>:
 80095da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095de:	461f      	mov	r7, r3
 80095e0:	898b      	ldrh	r3, [r1, #12]
 80095e2:	05db      	lsls	r3, r3, #23
 80095e4:	4605      	mov	r5, r0
 80095e6:	460c      	mov	r4, r1
 80095e8:	4616      	mov	r6, r2
 80095ea:	d505      	bpl.n	80095f8 <__swrite+0x1e>
 80095ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80095f0:	2302      	movs	r3, #2
 80095f2:	2200      	movs	r2, #0
 80095f4:	f000 f868 	bl	80096c8 <_lseek_r>
 80095f8:	89a3      	ldrh	r3, [r4, #12]
 80095fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80095fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009602:	81a3      	strh	r3, [r4, #12]
 8009604:	4632      	mov	r2, r6
 8009606:	463b      	mov	r3, r7
 8009608:	4628      	mov	r0, r5
 800960a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800960e:	f000 b817 	b.w	8009640 <_write_r>

08009612 <__sseek>:
 8009612:	b510      	push	{r4, lr}
 8009614:	460c      	mov	r4, r1
 8009616:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800961a:	f000 f855 	bl	80096c8 <_lseek_r>
 800961e:	1c43      	adds	r3, r0, #1
 8009620:	89a3      	ldrh	r3, [r4, #12]
 8009622:	bf15      	itete	ne
 8009624:	6560      	strne	r0, [r4, #84]	; 0x54
 8009626:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800962a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800962e:	81a3      	strheq	r3, [r4, #12]
 8009630:	bf18      	it	ne
 8009632:	81a3      	strhne	r3, [r4, #12]
 8009634:	bd10      	pop	{r4, pc}

08009636 <__sclose>:
 8009636:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800963a:	f000 b813 	b.w	8009664 <_close_r>
	...

08009640 <_write_r>:
 8009640:	b538      	push	{r3, r4, r5, lr}
 8009642:	4d07      	ldr	r5, [pc, #28]	; (8009660 <_write_r+0x20>)
 8009644:	4604      	mov	r4, r0
 8009646:	4608      	mov	r0, r1
 8009648:	4611      	mov	r1, r2
 800964a:	2200      	movs	r2, #0
 800964c:	602a      	str	r2, [r5, #0]
 800964e:	461a      	mov	r2, r3
 8009650:	f000 fc68 	bl	8009f24 <_write>
 8009654:	1c43      	adds	r3, r0, #1
 8009656:	d102      	bne.n	800965e <_write_r+0x1e>
 8009658:	682b      	ldr	r3, [r5, #0]
 800965a:	b103      	cbz	r3, 800965e <_write_r+0x1e>
 800965c:	6023      	str	r3, [r4, #0]
 800965e:	bd38      	pop	{r3, r4, r5, pc}
 8009660:	20000ad0 	.word	0x20000ad0

08009664 <_close_r>:
 8009664:	b538      	push	{r3, r4, r5, lr}
 8009666:	4d06      	ldr	r5, [pc, #24]	; (8009680 <_close_r+0x1c>)
 8009668:	2300      	movs	r3, #0
 800966a:	4604      	mov	r4, r0
 800966c:	4608      	mov	r0, r1
 800966e:	602b      	str	r3, [r5, #0]
 8009670:	f000 fc20 	bl	8009eb4 <_close>
 8009674:	1c43      	adds	r3, r0, #1
 8009676:	d102      	bne.n	800967e <_close_r+0x1a>
 8009678:	682b      	ldr	r3, [r5, #0]
 800967a:	b103      	cbz	r3, 800967e <_close_r+0x1a>
 800967c:	6023      	str	r3, [r4, #0]
 800967e:	bd38      	pop	{r3, r4, r5, pc}
 8009680:	20000ad0 	.word	0x20000ad0

08009684 <_fstat_r>:
 8009684:	b538      	push	{r3, r4, r5, lr}
 8009686:	4d07      	ldr	r5, [pc, #28]	; (80096a4 <_fstat_r+0x20>)
 8009688:	2300      	movs	r3, #0
 800968a:	4604      	mov	r4, r0
 800968c:	4608      	mov	r0, r1
 800968e:	4611      	mov	r1, r2
 8009690:	602b      	str	r3, [r5, #0]
 8009692:	f000 fc17 	bl	8009ec4 <_fstat>
 8009696:	1c43      	adds	r3, r0, #1
 8009698:	d102      	bne.n	80096a0 <_fstat_r+0x1c>
 800969a:	682b      	ldr	r3, [r5, #0]
 800969c:	b103      	cbz	r3, 80096a0 <_fstat_r+0x1c>
 800969e:	6023      	str	r3, [r4, #0]
 80096a0:	bd38      	pop	{r3, r4, r5, pc}
 80096a2:	bf00      	nop
 80096a4:	20000ad0 	.word	0x20000ad0

080096a8 <_isatty_r>:
 80096a8:	b538      	push	{r3, r4, r5, lr}
 80096aa:	4d06      	ldr	r5, [pc, #24]	; (80096c4 <_isatty_r+0x1c>)
 80096ac:	2300      	movs	r3, #0
 80096ae:	4604      	mov	r4, r0
 80096b0:	4608      	mov	r0, r1
 80096b2:	602b      	str	r3, [r5, #0]
 80096b4:	f000 fc16 	bl	8009ee4 <_isatty>
 80096b8:	1c43      	adds	r3, r0, #1
 80096ba:	d102      	bne.n	80096c2 <_isatty_r+0x1a>
 80096bc:	682b      	ldr	r3, [r5, #0]
 80096be:	b103      	cbz	r3, 80096c2 <_isatty_r+0x1a>
 80096c0:	6023      	str	r3, [r4, #0]
 80096c2:	bd38      	pop	{r3, r4, r5, pc}
 80096c4:	20000ad0 	.word	0x20000ad0

080096c8 <_lseek_r>:
 80096c8:	b538      	push	{r3, r4, r5, lr}
 80096ca:	4d07      	ldr	r5, [pc, #28]	; (80096e8 <_lseek_r+0x20>)
 80096cc:	4604      	mov	r4, r0
 80096ce:	4608      	mov	r0, r1
 80096d0:	4611      	mov	r1, r2
 80096d2:	2200      	movs	r2, #0
 80096d4:	602a      	str	r2, [r5, #0]
 80096d6:	461a      	mov	r2, r3
 80096d8:	f000 fc14 	bl	8009f04 <_lseek>
 80096dc:	1c43      	adds	r3, r0, #1
 80096de:	d102      	bne.n	80096e6 <_lseek_r+0x1e>
 80096e0:	682b      	ldr	r3, [r5, #0]
 80096e2:	b103      	cbz	r3, 80096e6 <_lseek_r+0x1e>
 80096e4:	6023      	str	r3, [r4, #0]
 80096e6:	bd38      	pop	{r3, r4, r5, pc}
 80096e8:	20000ad0 	.word	0x20000ad0

080096ec <_read_r>:
 80096ec:	b538      	push	{r3, r4, r5, lr}
 80096ee:	4d07      	ldr	r5, [pc, #28]	; (800970c <_read_r+0x20>)
 80096f0:	4604      	mov	r4, r0
 80096f2:	4608      	mov	r0, r1
 80096f4:	4611      	mov	r1, r2
 80096f6:	2200      	movs	r2, #0
 80096f8:	602a      	str	r2, [r5, #0]
 80096fa:	461a      	mov	r2, r3
 80096fc:	f000 fc0a 	bl	8009f14 <_read>
 8009700:	1c43      	adds	r3, r0, #1
 8009702:	d102      	bne.n	800970a <_read_r+0x1e>
 8009704:	682b      	ldr	r3, [r5, #0]
 8009706:	b103      	cbz	r3, 800970a <_read_r+0x1e>
 8009708:	6023      	str	r3, [r4, #0]
 800970a:	bd38      	pop	{r3, r4, r5, pc}
 800970c:	20000ad0 	.word	0x20000ad0

08009710 <powf>:
 8009710:	b508      	push	{r3, lr}
 8009712:	ed2d 8b04 	vpush	{d8-d9}
 8009716:	eeb0 8a60 	vmov.f32	s16, s1
 800971a:	eeb0 9a40 	vmov.f32	s18, s0
 800971e:	f000 f84f 	bl	80097c0 <__ieee754_powf>
 8009722:	eeb4 8a48 	vcmp.f32	s16, s16
 8009726:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800972a:	eef0 8a40 	vmov.f32	s17, s0
 800972e:	d63e      	bvs.n	80097ae <powf+0x9e>
 8009730:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8009734:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009738:	d112      	bne.n	8009760 <powf+0x50>
 800973a:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800973e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009742:	d039      	beq.n	80097b8 <powf+0xa8>
 8009744:	eeb0 0a48 	vmov.f32	s0, s16
 8009748:	f000 fb35 	bl	8009db6 <finitef>
 800974c:	b378      	cbz	r0, 80097ae <powf+0x9e>
 800974e:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8009752:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009756:	d52a      	bpl.n	80097ae <powf+0x9e>
 8009758:	f7fd f8c8 	bl	80068ec <__errno>
 800975c:	2322      	movs	r3, #34	; 0x22
 800975e:	e014      	b.n	800978a <powf+0x7a>
 8009760:	f000 fb29 	bl	8009db6 <finitef>
 8009764:	b998      	cbnz	r0, 800978e <powf+0x7e>
 8009766:	eeb0 0a49 	vmov.f32	s0, s18
 800976a:	f000 fb24 	bl	8009db6 <finitef>
 800976e:	b170      	cbz	r0, 800978e <powf+0x7e>
 8009770:	eeb0 0a48 	vmov.f32	s0, s16
 8009774:	f000 fb1f 	bl	8009db6 <finitef>
 8009778:	b148      	cbz	r0, 800978e <powf+0x7e>
 800977a:	eef4 8a68 	vcmp.f32	s17, s17
 800977e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009782:	d7e9      	bvc.n	8009758 <powf+0x48>
 8009784:	f7fd f8b2 	bl	80068ec <__errno>
 8009788:	2321      	movs	r3, #33	; 0x21
 800978a:	6003      	str	r3, [r0, #0]
 800978c:	e00f      	b.n	80097ae <powf+0x9e>
 800978e:	eef5 8a40 	vcmp.f32	s17, #0.0
 8009792:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009796:	d10a      	bne.n	80097ae <powf+0x9e>
 8009798:	eeb0 0a49 	vmov.f32	s0, s18
 800979c:	f000 fb0b 	bl	8009db6 <finitef>
 80097a0:	b128      	cbz	r0, 80097ae <powf+0x9e>
 80097a2:	eeb0 0a48 	vmov.f32	s0, s16
 80097a6:	f000 fb06 	bl	8009db6 <finitef>
 80097aa:	2800      	cmp	r0, #0
 80097ac:	d1d4      	bne.n	8009758 <powf+0x48>
 80097ae:	eeb0 0a68 	vmov.f32	s0, s17
 80097b2:	ecbd 8b04 	vpop	{d8-d9}
 80097b6:	bd08      	pop	{r3, pc}
 80097b8:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 80097bc:	e7f7      	b.n	80097ae <powf+0x9e>
	...

080097c0 <__ieee754_powf>:
 80097c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097c4:	ee10 4a90 	vmov	r4, s1
 80097c8:	f034 4800 	bics.w	r8, r4, #2147483648	; 0x80000000
 80097cc:	ed2d 8b02 	vpush	{d8}
 80097d0:	ee10 6a10 	vmov	r6, s0
 80097d4:	eeb0 8a40 	vmov.f32	s16, s0
 80097d8:	eef0 8a60 	vmov.f32	s17, s1
 80097dc:	d10c      	bne.n	80097f8 <__ieee754_powf+0x38>
 80097de:	f486 0680 	eor.w	r6, r6, #4194304	; 0x400000
 80097e2:	0076      	lsls	r6, r6, #1
 80097e4:	f516 0f00 	cmn.w	r6, #8388608	; 0x800000
 80097e8:	f240 8296 	bls.w	8009d18 <__ieee754_powf+0x558>
 80097ec:	ee38 0a28 	vadd.f32	s0, s16, s17
 80097f0:	ecbd 8b02 	vpop	{d8}
 80097f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80097f8:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 80097fc:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8009800:	dcf4      	bgt.n	80097ec <__ieee754_powf+0x2c>
 8009802:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 8009806:	dd08      	ble.n	800981a <__ieee754_powf+0x5a>
 8009808:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
 800980c:	d1ee      	bne.n	80097ec <__ieee754_powf+0x2c>
 800980e:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 8009812:	0064      	lsls	r4, r4, #1
 8009814:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 8009818:	e7e6      	b.n	80097e8 <__ieee754_powf+0x28>
 800981a:	2e00      	cmp	r6, #0
 800981c:	da20      	bge.n	8009860 <__ieee754_powf+0xa0>
 800981e:	f1b8 4f97 	cmp.w	r8, #1266679808	; 0x4b800000
 8009822:	da2d      	bge.n	8009880 <__ieee754_powf+0xc0>
 8009824:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 8009828:	f2c0 827f 	blt.w	8009d2a <__ieee754_powf+0x56a>
 800982c:	ea4f 53e8 	mov.w	r3, r8, asr #23
 8009830:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8009834:	fa48 f703 	asr.w	r7, r8, r3
 8009838:	fa07 f303 	lsl.w	r3, r7, r3
 800983c:	4543      	cmp	r3, r8
 800983e:	f040 8274 	bne.w	8009d2a <__ieee754_powf+0x56a>
 8009842:	f007 0701 	and.w	r7, r7, #1
 8009846:	f1c7 0702 	rsb	r7, r7, #2
 800984a:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 800984e:	d11f      	bne.n	8009890 <__ieee754_powf+0xd0>
 8009850:	2c00      	cmp	r4, #0
 8009852:	f280 8267 	bge.w	8009d24 <__ieee754_powf+0x564>
 8009856:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800985a:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800985e:	e7c7      	b.n	80097f0 <__ieee754_powf+0x30>
 8009860:	2700      	movs	r7, #0
 8009862:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 8009866:	d1f0      	bne.n	800984a <__ieee754_powf+0x8a>
 8009868:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 800986c:	f000 8254 	beq.w	8009d18 <__ieee754_powf+0x558>
 8009870:	dd08      	ble.n	8009884 <__ieee754_powf+0xc4>
 8009872:	ed9f 0ac2 	vldr	s0, [pc, #776]	; 8009b7c <__ieee754_powf+0x3bc>
 8009876:	2c00      	cmp	r4, #0
 8009878:	bfa8      	it	ge
 800987a:	eeb0 0a68 	vmovge.f32	s0, s17
 800987e:	e7b7      	b.n	80097f0 <__ieee754_powf+0x30>
 8009880:	2702      	movs	r7, #2
 8009882:	e7ee      	b.n	8009862 <__ieee754_powf+0xa2>
 8009884:	2c00      	cmp	r4, #0
 8009886:	f280 824a 	bge.w	8009d1e <__ieee754_powf+0x55e>
 800988a:	eeb1 0a68 	vneg.f32	s0, s17
 800988e:	e7af      	b.n	80097f0 <__ieee754_powf+0x30>
 8009890:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 8009894:	d102      	bne.n	800989c <__ieee754_powf+0xdc>
 8009896:	ee28 0a08 	vmul.f32	s0, s16, s16
 800989a:	e7a9      	b.n	80097f0 <__ieee754_powf+0x30>
 800989c:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 80098a0:	eeb0 0a48 	vmov.f32	s0, s16
 80098a4:	d107      	bne.n	80098b6 <__ieee754_powf+0xf6>
 80098a6:	2e00      	cmp	r6, #0
 80098a8:	db05      	blt.n	80098b6 <__ieee754_powf+0xf6>
 80098aa:	ecbd 8b02 	vpop	{d8}
 80098ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80098b2:	f000 ba53 	b.w	8009d5c <__ieee754_sqrtf>
 80098b6:	f000 fa77 	bl	8009da8 <fabsf>
 80098ba:	b125      	cbz	r5, 80098c6 <__ieee754_powf+0x106>
 80098bc:	f026 4340 	bic.w	r3, r6, #3221225472	; 0xc0000000
 80098c0:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 80098c4:	d116      	bne.n	80098f4 <__ieee754_powf+0x134>
 80098c6:	2c00      	cmp	r4, #0
 80098c8:	bfbc      	itt	lt
 80098ca:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 80098ce:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 80098d2:	2e00      	cmp	r6, #0
 80098d4:	da8c      	bge.n	80097f0 <__ieee754_powf+0x30>
 80098d6:	f1a5 557e 	sub.w	r5, r5, #1065353216	; 0x3f800000
 80098da:	ea55 0307 	orrs.w	r3, r5, r7
 80098de:	d104      	bne.n	80098ea <__ieee754_powf+0x12a>
 80098e0:	ee70 7a40 	vsub.f32	s15, s0, s0
 80098e4:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 80098e8:	e782      	b.n	80097f0 <__ieee754_powf+0x30>
 80098ea:	2f01      	cmp	r7, #1
 80098ec:	d180      	bne.n	80097f0 <__ieee754_powf+0x30>
 80098ee:	eeb1 0a40 	vneg.f32	s0, s0
 80098f2:	e77d      	b.n	80097f0 <__ieee754_powf+0x30>
 80098f4:	0ff0      	lsrs	r0, r6, #31
 80098f6:	3801      	subs	r0, #1
 80098f8:	ea57 0300 	orrs.w	r3, r7, r0
 80098fc:	d104      	bne.n	8009908 <__ieee754_powf+0x148>
 80098fe:	ee38 8a48 	vsub.f32	s16, s16, s16
 8009902:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8009906:	e773      	b.n	80097f0 <__ieee754_powf+0x30>
 8009908:	f1b8 4f9a 	cmp.w	r8, #1291845632	; 0x4d000000
 800990c:	dd74      	ble.n	80099f8 <__ieee754_powf+0x238>
 800990e:	4b9c      	ldr	r3, [pc, #624]	; (8009b80 <__ieee754_powf+0x3c0>)
 8009910:	429d      	cmp	r5, r3
 8009912:	dc08      	bgt.n	8009926 <__ieee754_powf+0x166>
 8009914:	2c00      	cmp	r4, #0
 8009916:	da0b      	bge.n	8009930 <__ieee754_powf+0x170>
 8009918:	2000      	movs	r0, #0
 800991a:	ecbd 8b02 	vpop	{d8}
 800991e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009922:	f000 ba3b 	b.w	8009d9c <__math_oflowf>
 8009926:	4b97      	ldr	r3, [pc, #604]	; (8009b84 <__ieee754_powf+0x3c4>)
 8009928:	429d      	cmp	r5, r3
 800992a:	dd08      	ble.n	800993e <__ieee754_powf+0x17e>
 800992c:	2c00      	cmp	r4, #0
 800992e:	dcf3      	bgt.n	8009918 <__ieee754_powf+0x158>
 8009930:	2000      	movs	r0, #0
 8009932:	ecbd 8b02 	vpop	{d8}
 8009936:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800993a:	f000 ba29 	b.w	8009d90 <__math_uflowf>
 800993e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8009942:	ee30 0a67 	vsub.f32	s0, s0, s15
 8009946:	eddf 6a90 	vldr	s13, [pc, #576]	; 8009b88 <__ieee754_powf+0x3c8>
 800994a:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 800994e:	eee0 6a67 	vfms.f32	s13, s0, s15
 8009952:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8009956:	eee6 7ac0 	vfms.f32	s15, s13, s0
 800995a:	ee20 7a00 	vmul.f32	s14, s0, s0
 800995e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009962:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8009b8c <__ieee754_powf+0x3cc>
 8009966:	ee67 7a67 	vnmul.f32	s15, s14, s15
 800996a:	ed9f 7a89 	vldr	s14, [pc, #548]	; 8009b90 <__ieee754_powf+0x3d0>
 800996e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8009972:	ed9f 7a88 	vldr	s14, [pc, #544]	; 8009b94 <__ieee754_powf+0x3d4>
 8009976:	eef0 6a67 	vmov.f32	s13, s15
 800997a:	eee0 6a07 	vfma.f32	s13, s0, s14
 800997e:	ee16 3a90 	vmov	r3, s13
 8009982:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8009986:	f023 030f 	bic.w	r3, r3, #15
 800998a:	ee00 3a90 	vmov	s1, r3
 800998e:	eee0 0a47 	vfms.f32	s1, s0, s14
 8009992:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8009996:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 800999a:	f024 040f 	bic.w	r4, r4, #15
 800999e:	ee07 4a10 	vmov	s14, r4
 80099a2:	ee67 0aa8 	vmul.f32	s1, s15, s17
 80099a6:	ee38 7ac7 	vsub.f32	s14, s17, s14
 80099aa:	ee07 3a90 	vmov	s15, r3
 80099ae:	eee7 0a27 	vfma.f32	s1, s14, s15
 80099b2:	3f01      	subs	r7, #1
 80099b4:	ea57 0200 	orrs.w	r2, r7, r0
 80099b8:	ee07 4a10 	vmov	s14, r4
 80099bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80099c0:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 80099c4:	ee30 7aa7 	vadd.f32	s14, s1, s15
 80099c8:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 80099cc:	ee17 4a10 	vmov	r4, s14
 80099d0:	bf08      	it	eq
 80099d2:	eeb0 8a40 	vmoveq.f32	s16, s0
 80099d6:	2c00      	cmp	r4, #0
 80099d8:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80099dc:	f340 817e 	ble.w	8009cdc <__ieee754_powf+0x51c>
 80099e0:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 80099e4:	f340 80f8 	ble.w	8009bd8 <__ieee754_powf+0x418>
 80099e8:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80099ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80099f0:	bf4c      	ite	mi
 80099f2:	2001      	movmi	r0, #1
 80099f4:	2000      	movpl	r0, #0
 80099f6:	e790      	b.n	800991a <__ieee754_powf+0x15a>
 80099f8:	f016 4fff 	tst.w	r6, #2139095040	; 0x7f800000
 80099fc:	bf01      	itttt	eq
 80099fe:	eddf 7a66 	vldreq	s15, [pc, #408]	; 8009b98 <__ieee754_powf+0x3d8>
 8009a02:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8009a06:	f06f 0217 	mvneq.w	r2, #23
 8009a0a:	ee17 5a90 	vmoveq	r5, s15
 8009a0e:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8009a12:	bf18      	it	ne
 8009a14:	2200      	movne	r2, #0
 8009a16:	3b7f      	subs	r3, #127	; 0x7f
 8009a18:	4413      	add	r3, r2
 8009a1a:	4a60      	ldr	r2, [pc, #384]	; (8009b9c <__ieee754_powf+0x3dc>)
 8009a1c:	f3c5 0516 	ubfx	r5, r5, #0, #23
 8009a20:	4295      	cmp	r5, r2
 8009a22:	f045 517e 	orr.w	r1, r5, #1065353216	; 0x3f800000
 8009a26:	dd06      	ble.n	8009a36 <__ieee754_powf+0x276>
 8009a28:	4a5d      	ldr	r2, [pc, #372]	; (8009ba0 <__ieee754_powf+0x3e0>)
 8009a2a:	4295      	cmp	r5, r2
 8009a2c:	f340 80a4 	ble.w	8009b78 <__ieee754_powf+0x3b8>
 8009a30:	3301      	adds	r3, #1
 8009a32:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8009a36:	2500      	movs	r5, #0
 8009a38:	4a5a      	ldr	r2, [pc, #360]	; (8009ba4 <__ieee754_powf+0x3e4>)
 8009a3a:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 8009a3e:	ee07 1a90 	vmov	s15, r1
 8009a42:	ed92 7a00 	vldr	s14, [r2]
 8009a46:	4a58      	ldr	r2, [pc, #352]	; (8009ba8 <__ieee754_powf+0x3e8>)
 8009a48:	ee37 6a27 	vadd.f32	s12, s14, s15
 8009a4c:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8009a50:	eec5 6a86 	vdiv.f32	s13, s11, s12
 8009a54:	1049      	asrs	r1, r1, #1
 8009a56:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8009a5a:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 8009a5e:	eb01 5145 	add.w	r1, r1, r5, lsl #21
 8009a62:	ee37 5ac7 	vsub.f32	s10, s15, s14
 8009a66:	ee06 1a10 	vmov	s12, r1
 8009a6a:	ee65 4a26 	vmul.f32	s9, s10, s13
 8009a6e:	ee36 7a47 	vsub.f32	s14, s12, s14
 8009a72:	ee14 6a90 	vmov	r6, s9
 8009a76:	4016      	ands	r6, r2
 8009a78:	ee05 6a90 	vmov	s11, r6
 8009a7c:	eea5 5ac6 	vfms.f32	s10, s11, s12
 8009a80:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009a84:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8009bac <__ieee754_powf+0x3ec>
 8009a88:	eea5 5ae7 	vfms.f32	s10, s11, s15
 8009a8c:	ee64 7aa4 	vmul.f32	s15, s9, s9
 8009a90:	ee25 6a26 	vmul.f32	s12, s10, s13
 8009a94:	eddf 6a46 	vldr	s13, [pc, #280]	; 8009bb0 <__ieee754_powf+0x3f0>
 8009a98:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8009a9c:	eddf 6a45 	vldr	s13, [pc, #276]	; 8009bb4 <__ieee754_powf+0x3f4>
 8009aa0:	eee7 6a27 	vfma.f32	s13, s14, s15
 8009aa4:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8009b88 <__ieee754_powf+0x3c8>
 8009aa8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009aac:	eddf 6a42 	vldr	s13, [pc, #264]	; 8009bb8 <__ieee754_powf+0x3f8>
 8009ab0:	eee7 6a27 	vfma.f32	s13, s14, s15
 8009ab4:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8009bbc <__ieee754_powf+0x3fc>
 8009ab8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009abc:	ee74 6aa5 	vadd.f32	s13, s9, s11
 8009ac0:	ee27 5aa7 	vmul.f32	s10, s15, s15
 8009ac4:	ee66 6a86 	vmul.f32	s13, s13, s12
 8009ac8:	eee5 6a07 	vfma.f32	s13, s10, s14
 8009acc:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 8009ad0:	eef0 7a45 	vmov.f32	s15, s10
 8009ad4:	eee5 7aa5 	vfma.f32	s15, s11, s11
 8009ad8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009adc:	ee17 1a90 	vmov	r1, s15
 8009ae0:	4011      	ands	r1, r2
 8009ae2:	ee07 1a90 	vmov	s15, r1
 8009ae6:	ee37 7ac5 	vsub.f32	s14, s15, s10
 8009aea:	eea5 7ae5 	vfms.f32	s14, s11, s11
 8009aee:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8009af2:	ee27 7a24 	vmul.f32	s14, s14, s9
 8009af6:	eea6 7a27 	vfma.f32	s14, s12, s15
 8009afa:	eeb0 6a47 	vmov.f32	s12, s14
 8009afe:	eea5 6aa7 	vfma.f32	s12, s11, s15
 8009b02:	ee16 1a10 	vmov	r1, s12
 8009b06:	4011      	ands	r1, r2
 8009b08:	ee06 1a90 	vmov	s13, r1
 8009b0c:	eee5 6ae7 	vfms.f32	s13, s11, s15
 8009b10:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8009bc0 <__ieee754_powf+0x400>
 8009b14:	eddf 5a2b 	vldr	s11, [pc, #172]	; 8009bc4 <__ieee754_powf+0x404>
 8009b18:	ee37 7a66 	vsub.f32	s14, s14, s13
 8009b1c:	ee06 1a10 	vmov	s12, r1
 8009b20:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009b24:	eddf 7a28 	vldr	s15, [pc, #160]	; 8009bc8 <__ieee754_powf+0x408>
 8009b28:	4928      	ldr	r1, [pc, #160]	; (8009bcc <__ieee754_powf+0x40c>)
 8009b2a:	eea6 7a27 	vfma.f32	s14, s12, s15
 8009b2e:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 8009b32:	edd1 7a00 	vldr	s15, [r1]
 8009b36:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009b3a:	ee07 3a90 	vmov	s15, r3
 8009b3e:	4b24      	ldr	r3, [pc, #144]	; (8009bd0 <__ieee754_powf+0x410>)
 8009b40:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8009b44:	eef0 7a47 	vmov.f32	s15, s14
 8009b48:	eee6 7a25 	vfma.f32	s15, s12, s11
 8009b4c:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8009b50:	edd5 0a00 	vldr	s1, [r5]
 8009b54:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8009b58:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b5c:	ee17 3a90 	vmov	r3, s15
 8009b60:	4013      	ands	r3, r2
 8009b62:	ee07 3a90 	vmov	s15, r3
 8009b66:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8009b6a:	ee76 6ae0 	vsub.f32	s13, s13, s1
 8009b6e:	eee6 6a65 	vfms.f32	s13, s12, s11
 8009b72:	ee77 7a66 	vsub.f32	s15, s14, s13
 8009b76:	e70e      	b.n	8009996 <__ieee754_powf+0x1d6>
 8009b78:	2501      	movs	r5, #1
 8009b7a:	e75d      	b.n	8009a38 <__ieee754_powf+0x278>
 8009b7c:	00000000 	.word	0x00000000
 8009b80:	3f7ffff3 	.word	0x3f7ffff3
 8009b84:	3f800007 	.word	0x3f800007
 8009b88:	3eaaaaab 	.word	0x3eaaaaab
 8009b8c:	3fb8aa3b 	.word	0x3fb8aa3b
 8009b90:	36eca570 	.word	0x36eca570
 8009b94:	3fb8aa00 	.word	0x3fb8aa00
 8009b98:	4b800000 	.word	0x4b800000
 8009b9c:	001cc471 	.word	0x001cc471
 8009ba0:	005db3d6 	.word	0x005db3d6
 8009ba4:	0800a85c 	.word	0x0800a85c
 8009ba8:	fffff000 	.word	0xfffff000
 8009bac:	3e6c3255 	.word	0x3e6c3255
 8009bb0:	3e53f142 	.word	0x3e53f142
 8009bb4:	3e8ba305 	.word	0x3e8ba305
 8009bb8:	3edb6db7 	.word	0x3edb6db7
 8009bbc:	3f19999a 	.word	0x3f19999a
 8009bc0:	3f76384f 	.word	0x3f76384f
 8009bc4:	3f763800 	.word	0x3f763800
 8009bc8:	369dc3a0 	.word	0x369dc3a0
 8009bcc:	0800a86c 	.word	0x0800a86c
 8009bd0:	0800a864 	.word	0x0800a864
 8009bd4:	3338aa3c 	.word	0x3338aa3c
 8009bd8:	f040 8095 	bne.w	8009d06 <__ieee754_powf+0x546>
 8009bdc:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 8009bd4 <__ieee754_powf+0x414>
 8009be0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009be4:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8009be8:	eef4 6ac7 	vcmpe.f32	s13, s14
 8009bec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009bf0:	f73f aefa 	bgt.w	80099e8 <__ieee754_powf+0x228>
 8009bf4:	15db      	asrs	r3, r3, #23
 8009bf6:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 8009bfa:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8009bfe:	4103      	asrs	r3, r0
 8009c00:	4423      	add	r3, r4
 8009c02:	494b      	ldr	r1, [pc, #300]	; (8009d30 <__ieee754_powf+0x570>)
 8009c04:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8009c08:	3a7f      	subs	r2, #127	; 0x7f
 8009c0a:	4111      	asrs	r1, r2
 8009c0c:	ea23 0101 	bic.w	r1, r3, r1
 8009c10:	ee07 1a10 	vmov	s14, r1
 8009c14:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8009c18:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8009c1c:	f1c2 0217 	rsb	r2, r2, #23
 8009c20:	4110      	asrs	r0, r2
 8009c22:	2c00      	cmp	r4, #0
 8009c24:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009c28:	bfb8      	it	lt
 8009c2a:	4240      	neglt	r0, r0
 8009c2c:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8009c30:	ed9f 0a40 	vldr	s0, [pc, #256]	; 8009d34 <__ieee754_powf+0x574>
 8009c34:	eddf 6a40 	vldr	s13, [pc, #256]	; 8009d38 <__ieee754_powf+0x578>
 8009c38:	ee17 3a10 	vmov	r3, s14
 8009c3c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8009c40:	f023 030f 	bic.w	r3, r3, #15
 8009c44:	ee07 3a10 	vmov	s14, r3
 8009c48:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009c4c:	ee27 0a00 	vmul.f32	s0, s14, s0
 8009c50:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8009c54:	eddf 7a39 	vldr	s15, [pc, #228]	; 8009d3c <__ieee754_powf+0x57c>
 8009c58:	eea0 0aa7 	vfma.f32	s0, s1, s15
 8009c5c:	eef0 7a40 	vmov.f32	s15, s0
 8009c60:	eee7 7a26 	vfma.f32	s15, s14, s13
 8009c64:	eeb0 6a67 	vmov.f32	s12, s15
 8009c68:	eea7 6a66 	vfms.f32	s12, s14, s13
 8009c6c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8009c70:	ee30 0a46 	vsub.f32	s0, s0, s12
 8009c74:	eddf 6a32 	vldr	s13, [pc, #200]	; 8009d40 <__ieee754_powf+0x580>
 8009c78:	ed9f 6a32 	vldr	s12, [pc, #200]	; 8009d44 <__ieee754_powf+0x584>
 8009c7c:	eee7 6a06 	vfma.f32	s13, s14, s12
 8009c80:	ed9f 6a31 	vldr	s12, [pc, #196]	; 8009d48 <__ieee754_powf+0x588>
 8009c84:	eea6 6a87 	vfma.f32	s12, s13, s14
 8009c88:	eddf 6a30 	vldr	s13, [pc, #192]	; 8009d4c <__ieee754_powf+0x58c>
 8009c8c:	eee6 6a07 	vfma.f32	s13, s12, s14
 8009c90:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 8009d50 <__ieee754_powf+0x590>
 8009c94:	eea6 6a87 	vfma.f32	s12, s13, s14
 8009c98:	eef0 6a67 	vmov.f32	s13, s15
 8009c9c:	eee6 6a47 	vfms.f32	s13, s12, s14
 8009ca0:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8009ca4:	ee27 6aa6 	vmul.f32	s12, s15, s13
 8009ca8:	ee76 6ac7 	vsub.f32	s13, s13, s14
 8009cac:	eea7 0a80 	vfma.f32	s0, s15, s0
 8009cb0:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8009cb4:	ee37 0a40 	vsub.f32	s0, s14, s0
 8009cb8:	ee70 7a67 	vsub.f32	s15, s0, s15
 8009cbc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8009cc0:	ee30 0a67 	vsub.f32	s0, s0, s15
 8009cc4:	ee10 3a10 	vmov	r3, s0
 8009cc8:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8009ccc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009cd0:	da1f      	bge.n	8009d12 <__ieee754_powf+0x552>
 8009cd2:	f000 f87d 	bl	8009dd0 <scalbnf>
 8009cd6:	ee20 0a08 	vmul.f32	s0, s0, s16
 8009cda:	e589      	b.n	80097f0 <__ieee754_powf+0x30>
 8009cdc:	4a1d      	ldr	r2, [pc, #116]	; (8009d54 <__ieee754_powf+0x594>)
 8009cde:	4293      	cmp	r3, r2
 8009ce0:	dd07      	ble.n	8009cf2 <__ieee754_powf+0x532>
 8009ce2:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8009ce6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009cea:	bf4c      	ite	mi
 8009cec:	2001      	movmi	r0, #1
 8009cee:	2000      	movpl	r0, #0
 8009cf0:	e61f      	b.n	8009932 <__ieee754_powf+0x172>
 8009cf2:	d108      	bne.n	8009d06 <__ieee754_powf+0x546>
 8009cf4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009cf8:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8009cfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d00:	f6ff af78 	blt.w	8009bf4 <__ieee754_powf+0x434>
 8009d04:	e7ed      	b.n	8009ce2 <__ieee754_powf+0x522>
 8009d06:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 8009d0a:	f73f af73 	bgt.w	8009bf4 <__ieee754_powf+0x434>
 8009d0e:	2000      	movs	r0, #0
 8009d10:	e78c      	b.n	8009c2c <__ieee754_powf+0x46c>
 8009d12:	ee00 3a10 	vmov	s0, r3
 8009d16:	e7de      	b.n	8009cd6 <__ieee754_powf+0x516>
 8009d18:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8009d1c:	e568      	b.n	80097f0 <__ieee754_powf+0x30>
 8009d1e:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8009d58 <__ieee754_powf+0x598>
 8009d22:	e565      	b.n	80097f0 <__ieee754_powf+0x30>
 8009d24:	eeb0 0a48 	vmov.f32	s0, s16
 8009d28:	e562      	b.n	80097f0 <__ieee754_powf+0x30>
 8009d2a:	2700      	movs	r7, #0
 8009d2c:	e58d      	b.n	800984a <__ieee754_powf+0x8a>
 8009d2e:	bf00      	nop
 8009d30:	007fffff 	.word	0x007fffff
 8009d34:	35bfbe8c 	.word	0x35bfbe8c
 8009d38:	3f317200 	.word	0x3f317200
 8009d3c:	3f317218 	.word	0x3f317218
 8009d40:	b5ddea0e 	.word	0xb5ddea0e
 8009d44:	3331bb4c 	.word	0x3331bb4c
 8009d48:	388ab355 	.word	0x388ab355
 8009d4c:	bb360b61 	.word	0xbb360b61
 8009d50:	3e2aaaab 	.word	0x3e2aaaab
 8009d54:	43160000 	.word	0x43160000
 8009d58:	00000000 	.word	0x00000000

08009d5c <__ieee754_sqrtf>:
 8009d5c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8009d60:	4770      	bx	lr

08009d62 <with_errnof>:
 8009d62:	b513      	push	{r0, r1, r4, lr}
 8009d64:	4604      	mov	r4, r0
 8009d66:	ed8d 0a01 	vstr	s0, [sp, #4]
 8009d6a:	f7fc fdbf 	bl	80068ec <__errno>
 8009d6e:	ed9d 0a01 	vldr	s0, [sp, #4]
 8009d72:	6004      	str	r4, [r0, #0]
 8009d74:	b002      	add	sp, #8
 8009d76:	bd10      	pop	{r4, pc}

08009d78 <xflowf>:
 8009d78:	b130      	cbz	r0, 8009d88 <xflowf+0x10>
 8009d7a:	eef1 7a40 	vneg.f32	s15, s0
 8009d7e:	ee27 0a80 	vmul.f32	s0, s15, s0
 8009d82:	2022      	movs	r0, #34	; 0x22
 8009d84:	f7ff bfed 	b.w	8009d62 <with_errnof>
 8009d88:	eef0 7a40 	vmov.f32	s15, s0
 8009d8c:	e7f7      	b.n	8009d7e <xflowf+0x6>
	...

08009d90 <__math_uflowf>:
 8009d90:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009d98 <__math_uflowf+0x8>
 8009d94:	f7ff bff0 	b.w	8009d78 <xflowf>
 8009d98:	10000000 	.word	0x10000000

08009d9c <__math_oflowf>:
 8009d9c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009da4 <__math_oflowf+0x8>
 8009da0:	f7ff bfea 	b.w	8009d78 <xflowf>
 8009da4:	70000000 	.word	0x70000000

08009da8 <fabsf>:
 8009da8:	ee10 3a10 	vmov	r3, s0
 8009dac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009db0:	ee00 3a10 	vmov	s0, r3
 8009db4:	4770      	bx	lr

08009db6 <finitef>:
 8009db6:	b082      	sub	sp, #8
 8009db8:	ed8d 0a01 	vstr	s0, [sp, #4]
 8009dbc:	9801      	ldr	r0, [sp, #4]
 8009dbe:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8009dc2:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8009dc6:	bfac      	ite	ge
 8009dc8:	2000      	movge	r0, #0
 8009dca:	2001      	movlt	r0, #1
 8009dcc:	b002      	add	sp, #8
 8009dce:	4770      	bx	lr

08009dd0 <scalbnf>:
 8009dd0:	ee10 3a10 	vmov	r3, s0
 8009dd4:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8009dd8:	d025      	beq.n	8009e26 <scalbnf+0x56>
 8009dda:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8009dde:	d302      	bcc.n	8009de6 <scalbnf+0x16>
 8009de0:	ee30 0a00 	vadd.f32	s0, s0, s0
 8009de4:	4770      	bx	lr
 8009de6:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8009dea:	d122      	bne.n	8009e32 <scalbnf+0x62>
 8009dec:	4b2a      	ldr	r3, [pc, #168]	; (8009e98 <scalbnf+0xc8>)
 8009dee:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8009e9c <scalbnf+0xcc>
 8009df2:	4298      	cmp	r0, r3
 8009df4:	ee20 0a27 	vmul.f32	s0, s0, s15
 8009df8:	db16      	blt.n	8009e28 <scalbnf+0x58>
 8009dfa:	ee10 3a10 	vmov	r3, s0
 8009dfe:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8009e02:	3a19      	subs	r2, #25
 8009e04:	4402      	add	r2, r0
 8009e06:	2afe      	cmp	r2, #254	; 0xfe
 8009e08:	dd15      	ble.n	8009e36 <scalbnf+0x66>
 8009e0a:	ee10 3a10 	vmov	r3, s0
 8009e0e:	eddf 7a24 	vldr	s15, [pc, #144]	; 8009ea0 <scalbnf+0xd0>
 8009e12:	eddf 6a24 	vldr	s13, [pc, #144]	; 8009ea4 <scalbnf+0xd4>
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	eeb0 7a67 	vmov.f32	s14, s15
 8009e1c:	bfb8      	it	lt
 8009e1e:	eef0 7a66 	vmovlt.f32	s15, s13
 8009e22:	ee27 0a27 	vmul.f32	s0, s14, s15
 8009e26:	4770      	bx	lr
 8009e28:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8009ea8 <scalbnf+0xd8>
 8009e2c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8009e30:	4770      	bx	lr
 8009e32:	0dd2      	lsrs	r2, r2, #23
 8009e34:	e7e6      	b.n	8009e04 <scalbnf+0x34>
 8009e36:	2a00      	cmp	r2, #0
 8009e38:	dd06      	ble.n	8009e48 <scalbnf+0x78>
 8009e3a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009e3e:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8009e42:	ee00 3a10 	vmov	s0, r3
 8009e46:	4770      	bx	lr
 8009e48:	f112 0f16 	cmn.w	r2, #22
 8009e4c:	da1a      	bge.n	8009e84 <scalbnf+0xb4>
 8009e4e:	f24c 3350 	movw	r3, #50000	; 0xc350
 8009e52:	4298      	cmp	r0, r3
 8009e54:	ee10 3a10 	vmov	r3, s0
 8009e58:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009e5c:	dd0a      	ble.n	8009e74 <scalbnf+0xa4>
 8009e5e:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8009ea0 <scalbnf+0xd0>
 8009e62:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8009ea4 <scalbnf+0xd4>
 8009e66:	eef0 7a40 	vmov.f32	s15, s0
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	bf18      	it	ne
 8009e6e:	eeb0 0a47 	vmovne.f32	s0, s14
 8009e72:	e7db      	b.n	8009e2c <scalbnf+0x5c>
 8009e74:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8009ea8 <scalbnf+0xd8>
 8009e78:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8009eac <scalbnf+0xdc>
 8009e7c:	eef0 7a40 	vmov.f32	s15, s0
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	e7f3      	b.n	8009e6c <scalbnf+0x9c>
 8009e84:	3219      	adds	r2, #25
 8009e86:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009e8a:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8009e8e:	eddf 7a08 	vldr	s15, [pc, #32]	; 8009eb0 <scalbnf+0xe0>
 8009e92:	ee07 3a10 	vmov	s14, r3
 8009e96:	e7c4      	b.n	8009e22 <scalbnf+0x52>
 8009e98:	ffff3cb0 	.word	0xffff3cb0
 8009e9c:	4c000000 	.word	0x4c000000
 8009ea0:	7149f2ca 	.word	0x7149f2ca
 8009ea4:	f149f2ca 	.word	0xf149f2ca
 8009ea8:	0da24260 	.word	0x0da24260
 8009eac:	8da24260 	.word	0x8da24260
 8009eb0:	33000000 	.word	0x33000000

08009eb4 <_close>:
 8009eb4:	4b02      	ldr	r3, [pc, #8]	; (8009ec0 <_close+0xc>)
 8009eb6:	2258      	movs	r2, #88	; 0x58
 8009eb8:	601a      	str	r2, [r3, #0]
 8009eba:	f04f 30ff 	mov.w	r0, #4294967295
 8009ebe:	4770      	bx	lr
 8009ec0:	20000ad0 	.word	0x20000ad0

08009ec4 <_fstat>:
 8009ec4:	4b02      	ldr	r3, [pc, #8]	; (8009ed0 <_fstat+0xc>)
 8009ec6:	2258      	movs	r2, #88	; 0x58
 8009ec8:	601a      	str	r2, [r3, #0]
 8009eca:	f04f 30ff 	mov.w	r0, #4294967295
 8009ece:	4770      	bx	lr
 8009ed0:	20000ad0 	.word	0x20000ad0

08009ed4 <_getpid>:
 8009ed4:	4b02      	ldr	r3, [pc, #8]	; (8009ee0 <_getpid+0xc>)
 8009ed6:	2258      	movs	r2, #88	; 0x58
 8009ed8:	601a      	str	r2, [r3, #0]
 8009eda:	f04f 30ff 	mov.w	r0, #4294967295
 8009ede:	4770      	bx	lr
 8009ee0:	20000ad0 	.word	0x20000ad0

08009ee4 <_isatty>:
 8009ee4:	4b02      	ldr	r3, [pc, #8]	; (8009ef0 <_isatty+0xc>)
 8009ee6:	2258      	movs	r2, #88	; 0x58
 8009ee8:	601a      	str	r2, [r3, #0]
 8009eea:	2000      	movs	r0, #0
 8009eec:	4770      	bx	lr
 8009eee:	bf00      	nop
 8009ef0:	20000ad0 	.word	0x20000ad0

08009ef4 <_kill>:
 8009ef4:	4b02      	ldr	r3, [pc, #8]	; (8009f00 <_kill+0xc>)
 8009ef6:	2258      	movs	r2, #88	; 0x58
 8009ef8:	601a      	str	r2, [r3, #0]
 8009efa:	f04f 30ff 	mov.w	r0, #4294967295
 8009efe:	4770      	bx	lr
 8009f00:	20000ad0 	.word	0x20000ad0

08009f04 <_lseek>:
 8009f04:	4b02      	ldr	r3, [pc, #8]	; (8009f10 <_lseek+0xc>)
 8009f06:	2258      	movs	r2, #88	; 0x58
 8009f08:	601a      	str	r2, [r3, #0]
 8009f0a:	f04f 30ff 	mov.w	r0, #4294967295
 8009f0e:	4770      	bx	lr
 8009f10:	20000ad0 	.word	0x20000ad0

08009f14 <_read>:
 8009f14:	4b02      	ldr	r3, [pc, #8]	; (8009f20 <_read+0xc>)
 8009f16:	2258      	movs	r2, #88	; 0x58
 8009f18:	601a      	str	r2, [r3, #0]
 8009f1a:	f04f 30ff 	mov.w	r0, #4294967295
 8009f1e:	4770      	bx	lr
 8009f20:	20000ad0 	.word	0x20000ad0

08009f24 <_write>:
 8009f24:	4b02      	ldr	r3, [pc, #8]	; (8009f30 <_write+0xc>)
 8009f26:	2258      	movs	r2, #88	; 0x58
 8009f28:	601a      	str	r2, [r3, #0]
 8009f2a:	f04f 30ff 	mov.w	r0, #4294967295
 8009f2e:	4770      	bx	lr
 8009f30:	20000ad0 	.word	0x20000ad0

08009f34 <_exit>:
 8009f34:	e7fe      	b.n	8009f34 <_exit>
	...

08009f38 <_init>:
 8009f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f3a:	bf00      	nop
 8009f3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f3e:	bc08      	pop	{r3}
 8009f40:	469e      	mov	lr, r3
 8009f42:	4770      	bx	lr

08009f44 <_fini>:
 8009f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f46:	bf00      	nop
 8009f48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f4a:	bc08      	pop	{r3}
 8009f4c:	469e      	mov	lr, r3
 8009f4e:	4770      	bx	lr
