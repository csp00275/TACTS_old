
STM32F746G-DISCO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .AI_RAM       00000680  20000000  20000000  00050000  2**5
                  CONTENTS, ALLOC, LOAD, DATA
  1 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000c4f0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00016688  0800c6c0  0800c6c0  0001c6c0  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  08022d48  08022d48  00050680  2**0
                  CONTENTS
  5 .ARM          00000008  08022d48  08022d48  00032d48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  08022d50  08022d50  00050680  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  08022d50  08022d50  00032d50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  08022d54  08022d54  00032d54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000c8c  20000680  08022d58  00040680  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00000370  20001310  080239e4  00041310  2**3
                  ALLOC
 11 ._user_heap_stack 00001000  20001680  080239e4  00041680  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00050680  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001be12  00000000  00000000  000506b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000471c  00000000  00000000  0006c4c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    0000c4ad  00000000  00000000  00070bde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000ce0  00000000  00000000  0007d090  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001568  00000000  00000000  0007dd70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002c784  00000000  00000000  0007f2d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00019e67  00000000  00000000  000aba5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000fdf0f  00000000  00000000  000c58c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  001c37d2  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00003580  00000000  00000000  001c3824  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20001310 	.word	0x20001310
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800c6a8 	.word	0x0800c6a8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20001314 	.word	0x20001314
 800020c:	0800c6a8 	.word	0x0800c6a8

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b9c6 	b.w	8000f8c <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f858 	bl	8000cbc <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_f2lz>:
 8000c18:	ee07 0a90 	vmov	s15, r0
 8000c1c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000c20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c24:	d401      	bmi.n	8000c2a <__aeabi_f2lz+0x12>
 8000c26:	f000 b80b 	b.w	8000c40 <__aeabi_f2ulz>
 8000c2a:	eef1 7a67 	vneg.f32	s15, s15
 8000c2e:	b508      	push	{r3, lr}
 8000c30:	ee17 0a90 	vmov	r0, s15
 8000c34:	f000 f804 	bl	8000c40 <__aeabi_f2ulz>
 8000c38:	4240      	negs	r0, r0
 8000c3a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3e:	bd08      	pop	{r3, pc}

08000c40 <__aeabi_f2ulz>:
 8000c40:	b5d0      	push	{r4, r6, r7, lr}
 8000c42:	f7ff fca1 	bl	8000588 <__aeabi_f2d>
 8000c46:	4b0c      	ldr	r3, [pc, #48]	; (8000c78 <__aeabi_f2ulz+0x38>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	4606      	mov	r6, r0
 8000c4c:	460f      	mov	r7, r1
 8000c4e:	f7ff fcf3 	bl	8000638 <__aeabi_dmul>
 8000c52:	f000 f99d 	bl	8000f90 <__aeabi_d2uiz>
 8000c56:	4604      	mov	r4, r0
 8000c58:	f7ff fc74 	bl	8000544 <__aeabi_ui2d>
 8000c5c:	4b07      	ldr	r3, [pc, #28]	; (8000c7c <__aeabi_f2ulz+0x3c>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	f7ff fcea 	bl	8000638 <__aeabi_dmul>
 8000c64:	4602      	mov	r2, r0
 8000c66:	460b      	mov	r3, r1
 8000c68:	4630      	mov	r0, r6
 8000c6a:	4639      	mov	r1, r7
 8000c6c:	f7ff fb2c 	bl	80002c8 <__aeabi_dsub>
 8000c70:	f000 f98e 	bl	8000f90 <__aeabi_d2uiz>
 8000c74:	4621      	mov	r1, r4
 8000c76:	bdd0      	pop	{r4, r6, r7, pc}
 8000c78:	3df00000 	.word	0x3df00000
 8000c7c:	41f00000 	.word	0x41f00000

08000c80 <__aeabi_d2ulz>:
 8000c80:	b5d0      	push	{r4, r6, r7, lr}
 8000c82:	4b0c      	ldr	r3, [pc, #48]	; (8000cb4 <__aeabi_d2ulz+0x34>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	4606      	mov	r6, r0
 8000c88:	460f      	mov	r7, r1
 8000c8a:	f7ff fcd5 	bl	8000638 <__aeabi_dmul>
 8000c8e:	f000 f97f 	bl	8000f90 <__aeabi_d2uiz>
 8000c92:	4604      	mov	r4, r0
 8000c94:	f7ff fc56 	bl	8000544 <__aeabi_ui2d>
 8000c98:	4b07      	ldr	r3, [pc, #28]	; (8000cb8 <__aeabi_d2ulz+0x38>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	f7ff fccc 	bl	8000638 <__aeabi_dmul>
 8000ca0:	4602      	mov	r2, r0
 8000ca2:	460b      	mov	r3, r1
 8000ca4:	4630      	mov	r0, r6
 8000ca6:	4639      	mov	r1, r7
 8000ca8:	f7ff fb0e 	bl	80002c8 <__aeabi_dsub>
 8000cac:	f000 f970 	bl	8000f90 <__aeabi_d2uiz>
 8000cb0:	4621      	mov	r1, r4
 8000cb2:	bdd0      	pop	{r4, r6, r7, pc}
 8000cb4:	3df00000 	.word	0x3df00000
 8000cb8:	41f00000 	.word	0x41f00000

08000cbc <__udivmoddi4>:
 8000cbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cc0:	9d08      	ldr	r5, [sp, #32]
 8000cc2:	4604      	mov	r4, r0
 8000cc4:	468e      	mov	lr, r1
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d14d      	bne.n	8000d66 <__udivmoddi4+0xaa>
 8000cca:	428a      	cmp	r2, r1
 8000ccc:	4694      	mov	ip, r2
 8000cce:	d969      	bls.n	8000da4 <__udivmoddi4+0xe8>
 8000cd0:	fab2 f282 	clz	r2, r2
 8000cd4:	b152      	cbz	r2, 8000cec <__udivmoddi4+0x30>
 8000cd6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cda:	f1c2 0120 	rsb	r1, r2, #32
 8000cde:	fa20 f101 	lsr.w	r1, r0, r1
 8000ce2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce6:	ea41 0e03 	orr.w	lr, r1, r3
 8000cea:	4094      	lsls	r4, r2
 8000cec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cf0:	0c21      	lsrs	r1, r4, #16
 8000cf2:	fbbe f6f8 	udiv	r6, lr, r8
 8000cf6:	fa1f f78c 	uxth.w	r7, ip
 8000cfa:	fb08 e316 	mls	r3, r8, r6, lr
 8000cfe:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d02:	fb06 f107 	mul.w	r1, r6, r7
 8000d06:	4299      	cmp	r1, r3
 8000d08:	d90a      	bls.n	8000d20 <__udivmoddi4+0x64>
 8000d0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d12:	f080 811f 	bcs.w	8000f54 <__udivmoddi4+0x298>
 8000d16:	4299      	cmp	r1, r3
 8000d18:	f240 811c 	bls.w	8000f54 <__udivmoddi4+0x298>
 8000d1c:	3e02      	subs	r6, #2
 8000d1e:	4463      	add	r3, ip
 8000d20:	1a5b      	subs	r3, r3, r1
 8000d22:	b2a4      	uxth	r4, r4
 8000d24:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d28:	fb08 3310 	mls	r3, r8, r0, r3
 8000d2c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d30:	fb00 f707 	mul.w	r7, r0, r7
 8000d34:	42a7      	cmp	r7, r4
 8000d36:	d90a      	bls.n	8000d4e <__udivmoddi4+0x92>
 8000d38:	eb1c 0404 	adds.w	r4, ip, r4
 8000d3c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d40:	f080 810a 	bcs.w	8000f58 <__udivmoddi4+0x29c>
 8000d44:	42a7      	cmp	r7, r4
 8000d46:	f240 8107 	bls.w	8000f58 <__udivmoddi4+0x29c>
 8000d4a:	4464      	add	r4, ip
 8000d4c:	3802      	subs	r0, #2
 8000d4e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d52:	1be4      	subs	r4, r4, r7
 8000d54:	2600      	movs	r6, #0
 8000d56:	b11d      	cbz	r5, 8000d60 <__udivmoddi4+0xa4>
 8000d58:	40d4      	lsrs	r4, r2
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	e9c5 4300 	strd	r4, r3, [r5]
 8000d60:	4631      	mov	r1, r6
 8000d62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d66:	428b      	cmp	r3, r1
 8000d68:	d909      	bls.n	8000d7e <__udivmoddi4+0xc2>
 8000d6a:	2d00      	cmp	r5, #0
 8000d6c:	f000 80ef 	beq.w	8000f4e <__udivmoddi4+0x292>
 8000d70:	2600      	movs	r6, #0
 8000d72:	e9c5 0100 	strd	r0, r1, [r5]
 8000d76:	4630      	mov	r0, r6
 8000d78:	4631      	mov	r1, r6
 8000d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7e:	fab3 f683 	clz	r6, r3
 8000d82:	2e00      	cmp	r6, #0
 8000d84:	d14a      	bne.n	8000e1c <__udivmoddi4+0x160>
 8000d86:	428b      	cmp	r3, r1
 8000d88:	d302      	bcc.n	8000d90 <__udivmoddi4+0xd4>
 8000d8a:	4282      	cmp	r2, r0
 8000d8c:	f200 80f9 	bhi.w	8000f82 <__udivmoddi4+0x2c6>
 8000d90:	1a84      	subs	r4, r0, r2
 8000d92:	eb61 0303 	sbc.w	r3, r1, r3
 8000d96:	2001      	movs	r0, #1
 8000d98:	469e      	mov	lr, r3
 8000d9a:	2d00      	cmp	r5, #0
 8000d9c:	d0e0      	beq.n	8000d60 <__udivmoddi4+0xa4>
 8000d9e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000da2:	e7dd      	b.n	8000d60 <__udivmoddi4+0xa4>
 8000da4:	b902      	cbnz	r2, 8000da8 <__udivmoddi4+0xec>
 8000da6:	deff      	udf	#255	; 0xff
 8000da8:	fab2 f282 	clz	r2, r2
 8000dac:	2a00      	cmp	r2, #0
 8000dae:	f040 8092 	bne.w	8000ed6 <__udivmoddi4+0x21a>
 8000db2:	eba1 010c 	sub.w	r1, r1, ip
 8000db6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dba:	fa1f fe8c 	uxth.w	lr, ip
 8000dbe:	2601      	movs	r6, #1
 8000dc0:	0c20      	lsrs	r0, r4, #16
 8000dc2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dc6:	fb07 1113 	mls	r1, r7, r3, r1
 8000dca:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dce:	fb0e f003 	mul.w	r0, lr, r3
 8000dd2:	4288      	cmp	r0, r1
 8000dd4:	d908      	bls.n	8000de8 <__udivmoddi4+0x12c>
 8000dd6:	eb1c 0101 	adds.w	r1, ip, r1
 8000dda:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dde:	d202      	bcs.n	8000de6 <__udivmoddi4+0x12a>
 8000de0:	4288      	cmp	r0, r1
 8000de2:	f200 80cb 	bhi.w	8000f7c <__udivmoddi4+0x2c0>
 8000de6:	4643      	mov	r3, r8
 8000de8:	1a09      	subs	r1, r1, r0
 8000dea:	b2a4      	uxth	r4, r4
 8000dec:	fbb1 f0f7 	udiv	r0, r1, r7
 8000df0:	fb07 1110 	mls	r1, r7, r0, r1
 8000df4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000df8:	fb0e fe00 	mul.w	lr, lr, r0
 8000dfc:	45a6      	cmp	lr, r4
 8000dfe:	d908      	bls.n	8000e12 <__udivmoddi4+0x156>
 8000e00:	eb1c 0404 	adds.w	r4, ip, r4
 8000e04:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e08:	d202      	bcs.n	8000e10 <__udivmoddi4+0x154>
 8000e0a:	45a6      	cmp	lr, r4
 8000e0c:	f200 80bb 	bhi.w	8000f86 <__udivmoddi4+0x2ca>
 8000e10:	4608      	mov	r0, r1
 8000e12:	eba4 040e 	sub.w	r4, r4, lr
 8000e16:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e1a:	e79c      	b.n	8000d56 <__udivmoddi4+0x9a>
 8000e1c:	f1c6 0720 	rsb	r7, r6, #32
 8000e20:	40b3      	lsls	r3, r6
 8000e22:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e26:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e2a:	fa20 f407 	lsr.w	r4, r0, r7
 8000e2e:	fa01 f306 	lsl.w	r3, r1, r6
 8000e32:	431c      	orrs	r4, r3
 8000e34:	40f9      	lsrs	r1, r7
 8000e36:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e3a:	fa00 f306 	lsl.w	r3, r0, r6
 8000e3e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e42:	0c20      	lsrs	r0, r4, #16
 8000e44:	fa1f fe8c 	uxth.w	lr, ip
 8000e48:	fb09 1118 	mls	r1, r9, r8, r1
 8000e4c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e50:	fb08 f00e 	mul.w	r0, r8, lr
 8000e54:	4288      	cmp	r0, r1
 8000e56:	fa02 f206 	lsl.w	r2, r2, r6
 8000e5a:	d90b      	bls.n	8000e74 <__udivmoddi4+0x1b8>
 8000e5c:	eb1c 0101 	adds.w	r1, ip, r1
 8000e60:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e64:	f080 8088 	bcs.w	8000f78 <__udivmoddi4+0x2bc>
 8000e68:	4288      	cmp	r0, r1
 8000e6a:	f240 8085 	bls.w	8000f78 <__udivmoddi4+0x2bc>
 8000e6e:	f1a8 0802 	sub.w	r8, r8, #2
 8000e72:	4461      	add	r1, ip
 8000e74:	1a09      	subs	r1, r1, r0
 8000e76:	b2a4      	uxth	r4, r4
 8000e78:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e7c:	fb09 1110 	mls	r1, r9, r0, r1
 8000e80:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e84:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e88:	458e      	cmp	lr, r1
 8000e8a:	d908      	bls.n	8000e9e <__udivmoddi4+0x1e2>
 8000e8c:	eb1c 0101 	adds.w	r1, ip, r1
 8000e90:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e94:	d26c      	bcs.n	8000f70 <__udivmoddi4+0x2b4>
 8000e96:	458e      	cmp	lr, r1
 8000e98:	d96a      	bls.n	8000f70 <__udivmoddi4+0x2b4>
 8000e9a:	3802      	subs	r0, #2
 8000e9c:	4461      	add	r1, ip
 8000e9e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ea2:	fba0 9402 	umull	r9, r4, r0, r2
 8000ea6:	eba1 010e 	sub.w	r1, r1, lr
 8000eaa:	42a1      	cmp	r1, r4
 8000eac:	46c8      	mov	r8, r9
 8000eae:	46a6      	mov	lr, r4
 8000eb0:	d356      	bcc.n	8000f60 <__udivmoddi4+0x2a4>
 8000eb2:	d053      	beq.n	8000f5c <__udivmoddi4+0x2a0>
 8000eb4:	b15d      	cbz	r5, 8000ece <__udivmoddi4+0x212>
 8000eb6:	ebb3 0208 	subs.w	r2, r3, r8
 8000eba:	eb61 010e 	sbc.w	r1, r1, lr
 8000ebe:	fa01 f707 	lsl.w	r7, r1, r7
 8000ec2:	fa22 f306 	lsr.w	r3, r2, r6
 8000ec6:	40f1      	lsrs	r1, r6
 8000ec8:	431f      	orrs	r7, r3
 8000eca:	e9c5 7100 	strd	r7, r1, [r5]
 8000ece:	2600      	movs	r6, #0
 8000ed0:	4631      	mov	r1, r6
 8000ed2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed6:	f1c2 0320 	rsb	r3, r2, #32
 8000eda:	40d8      	lsrs	r0, r3
 8000edc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ee0:	fa21 f303 	lsr.w	r3, r1, r3
 8000ee4:	4091      	lsls	r1, r2
 8000ee6:	4301      	orrs	r1, r0
 8000ee8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eec:	fa1f fe8c 	uxth.w	lr, ip
 8000ef0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ef4:	fb07 3610 	mls	r6, r7, r0, r3
 8000ef8:	0c0b      	lsrs	r3, r1, #16
 8000efa:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000efe:	fb00 f60e 	mul.w	r6, r0, lr
 8000f02:	429e      	cmp	r6, r3
 8000f04:	fa04 f402 	lsl.w	r4, r4, r2
 8000f08:	d908      	bls.n	8000f1c <__udivmoddi4+0x260>
 8000f0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000f0e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f12:	d22f      	bcs.n	8000f74 <__udivmoddi4+0x2b8>
 8000f14:	429e      	cmp	r6, r3
 8000f16:	d92d      	bls.n	8000f74 <__udivmoddi4+0x2b8>
 8000f18:	3802      	subs	r0, #2
 8000f1a:	4463      	add	r3, ip
 8000f1c:	1b9b      	subs	r3, r3, r6
 8000f1e:	b289      	uxth	r1, r1
 8000f20:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f24:	fb07 3316 	mls	r3, r7, r6, r3
 8000f28:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f2c:	fb06 f30e 	mul.w	r3, r6, lr
 8000f30:	428b      	cmp	r3, r1
 8000f32:	d908      	bls.n	8000f46 <__udivmoddi4+0x28a>
 8000f34:	eb1c 0101 	adds.w	r1, ip, r1
 8000f38:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f3c:	d216      	bcs.n	8000f6c <__udivmoddi4+0x2b0>
 8000f3e:	428b      	cmp	r3, r1
 8000f40:	d914      	bls.n	8000f6c <__udivmoddi4+0x2b0>
 8000f42:	3e02      	subs	r6, #2
 8000f44:	4461      	add	r1, ip
 8000f46:	1ac9      	subs	r1, r1, r3
 8000f48:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f4c:	e738      	b.n	8000dc0 <__udivmoddi4+0x104>
 8000f4e:	462e      	mov	r6, r5
 8000f50:	4628      	mov	r0, r5
 8000f52:	e705      	b.n	8000d60 <__udivmoddi4+0xa4>
 8000f54:	4606      	mov	r6, r0
 8000f56:	e6e3      	b.n	8000d20 <__udivmoddi4+0x64>
 8000f58:	4618      	mov	r0, r3
 8000f5a:	e6f8      	b.n	8000d4e <__udivmoddi4+0x92>
 8000f5c:	454b      	cmp	r3, r9
 8000f5e:	d2a9      	bcs.n	8000eb4 <__udivmoddi4+0x1f8>
 8000f60:	ebb9 0802 	subs.w	r8, r9, r2
 8000f64:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f68:	3801      	subs	r0, #1
 8000f6a:	e7a3      	b.n	8000eb4 <__udivmoddi4+0x1f8>
 8000f6c:	4646      	mov	r6, r8
 8000f6e:	e7ea      	b.n	8000f46 <__udivmoddi4+0x28a>
 8000f70:	4620      	mov	r0, r4
 8000f72:	e794      	b.n	8000e9e <__udivmoddi4+0x1e2>
 8000f74:	4640      	mov	r0, r8
 8000f76:	e7d1      	b.n	8000f1c <__udivmoddi4+0x260>
 8000f78:	46d0      	mov	r8, sl
 8000f7a:	e77b      	b.n	8000e74 <__udivmoddi4+0x1b8>
 8000f7c:	3b02      	subs	r3, #2
 8000f7e:	4461      	add	r1, ip
 8000f80:	e732      	b.n	8000de8 <__udivmoddi4+0x12c>
 8000f82:	4630      	mov	r0, r6
 8000f84:	e709      	b.n	8000d9a <__udivmoddi4+0xde>
 8000f86:	4464      	add	r4, ip
 8000f88:	3802      	subs	r0, #2
 8000f8a:	e742      	b.n	8000e12 <__udivmoddi4+0x156>

08000f8c <__aeabi_idiv0>:
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop

08000f90 <__aeabi_d2uiz>:
 8000f90:	004a      	lsls	r2, r1, #1
 8000f92:	d211      	bcs.n	8000fb8 <__aeabi_d2uiz+0x28>
 8000f94:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000f98:	d211      	bcs.n	8000fbe <__aeabi_d2uiz+0x2e>
 8000f9a:	d50d      	bpl.n	8000fb8 <__aeabi_d2uiz+0x28>
 8000f9c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000fa0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000fa4:	d40e      	bmi.n	8000fc4 <__aeabi_d2uiz+0x34>
 8000fa6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000faa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000fae:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000fb2:	fa23 f002 	lsr.w	r0, r3, r2
 8000fb6:	4770      	bx	lr
 8000fb8:	f04f 0000 	mov.w	r0, #0
 8000fbc:	4770      	bx	lr
 8000fbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000fc2:	d102      	bne.n	8000fca <__aeabi_d2uiz+0x3a>
 8000fc4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fc8:	4770      	bx	lr
 8000fca:	f04f 0000 	mov.w	r0, #0
 8000fce:	4770      	bx	lr

08000fd0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fd0:	b510      	push	{r4, lr}
 8000fd2:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fd4:	2210      	movs	r2, #16
 8000fd6:	2100      	movs	r1, #0
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fd8:	2402      	movs	r4, #2
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fda:	a80a      	add	r0, sp, #40	; 0x28
 8000fdc:	f008 fbc4 	bl	8009768 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fe0:	2214      	movs	r2, #20
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	a803      	add	r0, sp, #12
 8000fe6:	f008 fbbf 	bl	8009768 <memset>
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fea:	4b21      	ldr	r3, [pc, #132]	; (8001070 <SystemClock_Config+0xa0>)
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fec:	2101      	movs	r1, #1
  RCC_OscInitStruct.PLL.PLLM = 25;
  RCC_OscInitStruct.PLL.PLLN = 432;
 8000fee:	2019      	movs	r0, #25
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ff0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ff2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000ff6:	641a      	str	r2, [r3, #64]	; 0x40
 8000ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ffa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ffe:	9301      	str	r3, [sp, #4]
 8001000:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001002:	4b1c      	ldr	r3, [pc, #112]	; (8001074 <SystemClock_Config+0xa4>)
 8001004:	681a      	ldr	r2, [r3, #0]
 8001006:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800100a:	601a      	str	r2, [r3, #0]
 800100c:	681b      	ldr	r3, [r3, #0]
  RCC_OscInitStruct.PLL.PLLP = 2;
 800100e:	9412      	str	r4, [sp, #72]	; 0x48
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001010:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001014:	9302      	str	r3, [sp, #8]
 8001016:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001018:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800101c:	e9cd 1308 	strd	r1, r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001020:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001024:	e9cd 430e 	strd	r4, r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 432;
 8001028:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 800102c:	e9cd 0310 	strd	r0, r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8001030:	2309      	movs	r3, #9
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001032:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8001034:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001036:	f001 f983 	bl	8002340 <HAL_RCC_OscConfig>
 800103a:	b108      	cbz	r0, 8001040 <SystemClock_Config+0x70>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800103c:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800103e:	e7fe      	b.n	800103e <SystemClock_Config+0x6e>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001040:	f001 f946 	bl	80022d0 <HAL_PWREx_EnableOverDrive>
 8001044:	b108      	cbz	r0, 800104a <SystemClock_Config+0x7a>
 8001046:	b672      	cpsid	i
  while (1)
 8001048:	e7fe      	b.n	8001048 <SystemClock_Config+0x78>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800104a:	230f      	movs	r3, #15
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800104c:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001050:	9005      	str	r0, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001052:	2107      	movs	r1, #7
 8001054:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001056:	e9cd 3403 	strd	r3, r4, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800105a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800105e:	e9cd 2306 	strd	r2, r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001062:	f001 fb59 	bl	8002718 <HAL_RCC_ClockConfig>
 8001066:	b108      	cbz	r0, 800106c <SystemClock_Config+0x9c>
 8001068:	b672      	cpsid	i
  while (1)
 800106a:	e7fe      	b.n	800106a <SystemClock_Config+0x9a>
}
 800106c:	b014      	add	sp, #80	; 0x50
 800106e:	bd10      	pop	{r4, pc}
 8001070:	40023800 	.word	0x40023800
 8001074:	40007000 	.word	0x40007000

08001078 <main>:
{
 8001078:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 800107c:	b091      	sub	sp, #68	; 0x44
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800107e:	2210      	movs	r2, #16
 8001080:	2100      	movs	r1, #0
 8001082:	a80b      	add	r0, sp, #44	; 0x2c
 8001084:	f008 fb70 	bl	8009768 <memset>
  HAL_MPU_Disable();
 8001088:	f000 fed0 	bl	8001e2c <HAL_MPU_Disable>
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800108c:	2301      	movs	r3, #1
  MPU_InitStruct.Size = MPU_REGION_SIZE_16MB;
 800108e:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001092:	a80b      	add	r0, sp, #44	; 0x2c
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001094:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
  MPU_InitStruct.Size = MPU_REGION_SIZE_16MB;
 8001098:	4bc4      	ldr	r3, [pc, #784]	; (80013ac <main+0x334>)
 800109a:	e9cd 130c 	strd	r1, r3, [sp, #48]	; 0x30
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 800109e:	4bc4      	ldr	r3, [pc, #784]	; (80013b0 <main+0x338>)
 80010a0:	930e      	str	r3, [sp, #56]	; 0x38
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80010a2:	f000 fee1 	bl	8001e68 <HAL_MPU_ConfigRegion>
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80010a6:	2004      	movs	r0, #4
 80010a8:	f000 fece 	bl	8001e48 <HAL_MPU_Enable>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80010ac:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80010b0:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80010b4:	4abf      	ldr	r2, [pc, #764]	; (80013b4 <main+0x33c>)
 80010b6:	2100      	movs	r1, #0
 80010b8:	f8c2 1250 	str.w	r1, [r2, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80010bc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80010c0:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80010c4:	6953      	ldr	r3, [r2, #20]
 80010c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010ca:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80010cc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80010d0:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80010d4:	f8c2 1084 	str.w	r1, [r2, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80010d8:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 80010dc:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80010e0:	f643 74e0 	movw	r4, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80010e4:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80010e8:	f3c3 334e 	ubfx	r3, r3, #13, #15
 80010ec:	015b      	lsls	r3, r3, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80010ee:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80010f2:	4601      	mov	r1, r0
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80010f4:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80010f8:	3901      	subs	r1, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80010fa:	f8c2 5260 	str.w	r5, [r2, #608]	; 0x260
      } while (ways-- != 0U);
 80010fe:	d2f9      	bcs.n	80010f4 <main+0x7c>
    } while(sets-- != 0U);
 8001100:	3b20      	subs	r3, #32
 8001102:	f113 0f20 	cmn.w	r3, #32
 8001106:	d1f2      	bne.n	80010ee <main+0x76>
 8001108:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800110c:	6953      	ldr	r3, [r2, #20]
 800110e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001112:	6153      	str	r3, [r2, #20]
 8001114:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001118:	f3bf 8f6f 	isb	sy
  HAL_Init();
 800111c:	f000 fdde 	bl	8001cdc <HAL_Init>
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001120:	2400      	movs	r4, #0
  SystemClock_Config();
 8001122:	f7ff ff55 	bl	8000fd0 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001126:	2214      	movs	r2, #20
 8001128:	2100      	movs	r1, #0
 800112a:	a80b      	add	r0, sp, #44	; 0x2c
 800112c:	f008 fb1c 	bl	8009768 <memset>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001130:	4ba1      	ldr	r3, [pc, #644]	; (80013b8 <main+0x340>)
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001132:	2120      	movs	r1, #32
 8001134:	48a1      	ldr	r0, [pc, #644]	; (80013bc <main+0x344>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001136:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001138:	2502      	movs	r5, #2
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800113a:	f04f 0b0e 	mov.w	fp, #14
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 800113e:	f04f 0a08 	mov.w	sl, #8
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001142:	f042 0210 	orr.w	r2, r2, #16
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001146:	2603      	movs	r6, #3
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001148:	f04f 090c 	mov.w	r9, #12
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800114c:	f04f 080a 	mov.w	r8, #10
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001150:	631a      	str	r2, [r3, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001152:	2701      	movs	r7, #1
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001154:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001156:	f002 0210 	and.w	r2, r2, #16
 800115a:	9200      	str	r2, [sp, #0]
 800115c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800115e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001160:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001164:	631a      	str	r2, [r3, #48]	; 0x30
 8001166:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001168:	f002 0240 	and.w	r2, r2, #64	; 0x40
 800116c:	9201      	str	r2, [sp, #4]
 800116e:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001170:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001172:	f042 0202 	orr.w	r2, r2, #2
 8001176:	631a      	str	r2, [r3, #48]	; 0x30
 8001178:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800117a:	f002 0202 	and.w	r2, r2, #2
 800117e:	9202      	str	r2, [sp, #8]
 8001180:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001182:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001184:	f042 0208 	orr.w	r2, r2, #8
 8001188:	631a      	str	r2, [r3, #48]	; 0x30
 800118a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800118c:	f002 0208 	and.w	r2, r2, #8
 8001190:	9203      	str	r2, [sp, #12]
 8001192:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001194:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001196:	f042 0204 	orr.w	r2, r2, #4
 800119a:	631a      	str	r2, [r3, #48]	; 0x30
 800119c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800119e:	f002 0204 	and.w	r2, r2, #4
 80011a2:	9204      	str	r2, [sp, #16]
 80011a4:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80011a8:	f042 0201 	orr.w	r2, r2, #1
 80011ac:	631a      	str	r2, [r3, #48]	; 0x30
 80011ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80011b0:	f002 0201 	and.w	r2, r2, #1
 80011b4:	9205      	str	r2, [sp, #20]
 80011b6:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80011b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80011ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80011be:	631a      	str	r2, [r3, #48]	; 0x30
 80011c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80011c2:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80011c6:	9206      	str	r2, [sp, #24]
 80011c8:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80011ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80011cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80011d0:	631a      	str	r2, [r3, #48]	; 0x30
 80011d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80011d4:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80011d8:	9207      	str	r2, [sp, #28]
 80011da:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80011dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80011de:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80011e2:	631a      	str	r2, [r3, #48]	; 0x30
 80011e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80011e6:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 80011ea:	9208      	str	r2, [sp, #32]
 80011ec:	9a08      	ldr	r2, [sp, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80011ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80011f0:	f042 0220 	orr.w	r2, r2, #32
 80011f4:	631a      	str	r2, [r3, #48]	; 0x30
 80011f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80011f8:	f002 0220 	and.w	r2, r2, #32
 80011fc:	9209      	str	r2, [sp, #36]	; 0x24
 80011fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001200:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001202:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001206:	631a      	str	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001208:	2201      	movs	r2, #1
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800120a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001210:	930a      	str	r3, [sp, #40]	; 0x28
 8001212:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001214:	f001 f856 	bl	80022c4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin, GPIO_PIN_RESET);
 8001218:	2200      	movs	r2, #0
 800121a:	f241 010c 	movw	r1, #4108	; 0x100c
 800121e:	4868      	ldr	r0, [pc, #416]	; (80013c0 <main+0x348>)
 8001220:	f001 f850 	bl	80022c4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 8001224:	2200      	movs	r2, #0
 8001226:	2108      	movs	r1, #8
 8001228:	4866      	ldr	r0, [pc, #408]	; (80013c4 <main+0x34c>)
 800122a:	f001 f84b 	bl	80022c4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 800122e:	2200      	movs	r2, #0
 8001230:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001234:	4864      	ldr	r0, [pc, #400]	; (80013c8 <main+0x350>)
 8001236:	f001 f845 	bl	80022c4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 800123a:	2200      	movs	r2, #0
 800123c:	21c8      	movs	r1, #200	; 0xc8
 800123e:	4863      	ldr	r0, [pc, #396]	; (80013cc <main+0x354>)
 8001240:	f001 f840 	bl	80022c4 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001244:	2310      	movs	r3, #16
  HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8001246:	a90b      	add	r1, sp, #44	; 0x2c
 8001248:	4861      	ldr	r0, [pc, #388]	; (80013d0 <main+0x358>)
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800124a:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800124e:	e9cd 350b 	strd	r3, r5, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001252:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8001256:	f000 ff51 	bl	80020fc <HAL_GPIO_Init>
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800125a:	a90b      	add	r1, sp, #44	; 0x2c
 800125c:	485c      	ldr	r0, [pc, #368]	; (80013d0 <main+0x358>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125e:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001260:	e9cd a40b 	strd	sl, r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001264:	f000 ff4a 	bl	80020fc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8001268:	2304      	movs	r3, #4
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 800126a:	a90b      	add	r1, sp, #44	; 0x2c
 800126c:	4858      	ldr	r0, [pc, #352]	; (80013d0 <main+0x358>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126e:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001270:	e9cd 350b 	strd	r3, r5, [sp, #44]	; 0x2c
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001274:	2309      	movs	r3, #9
 8001276:	e9cd 630e 	strd	r6, r3, [sp, #56]	; 0x38
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 800127a:	f000 ff3f 	bl	80020fc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 800127e:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001282:	a90b      	add	r1, sp, #44	; 0x2c
 8001284:	4851      	ldr	r0, [pc, #324]	; (80013cc <main+0x354>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001286:	e9cd 350b 	strd	r3, r5, [sp, #44]	; 0x2c
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800128a:	230b      	movs	r3, #11
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800128c:	e9cd 460d 	strd	r4, r6, [sp, #52]	; 0x34
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001290:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001292:	f000 ff33 	bl	80020fc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8001296:	f64f 7383 	movw	r3, #65411	; 0xff83
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800129a:	a90b      	add	r1, sp, #44	; 0x2c
 800129c:	484c      	ldr	r0, [pc, #304]	; (80013d0 <main+0x358>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800129e:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a2:	e9cd 350b 	strd	r3, r5, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012a6:	e9cd 460d 	strd	r4, r6, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012aa:	f000 ff27 	bl	80020fc <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012ae:	f44f 7240 	mov.w	r2, #768	; 0x300
 80012b2:	2312      	movs	r3, #18
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012b4:	a90b      	add	r1, sp, #44	; 0x2c
 80012b6:	4847      	ldr	r0, [pc, #284]	; (80013d4 <main+0x35c>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012b8:	e9cd 230b 	strd	r2, r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012bc:	2304      	movs	r3, #4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012be:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012c2:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012c4:	f000 ff1a 	bl	80020fc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 80012c8:	f643 4323 	movw	r3, #15395	; 0x3c23
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012cc:	a90b      	add	r1, sp, #44	; 0x2c
 80012ce:	4841      	ldr	r0, [pc, #260]	; (80013d4 <main+0x35c>)
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80012d0:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d4:	e9cd 350b 	strd	r3, r5, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012d8:	e9cd 460d 	strd	r4, r6, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012dc:	f000 ff0e 	bl	80020fc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 80012e0:	2310      	movs	r3, #16
  HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 80012e2:	a90b      	add	r1, sp, #44	; 0x2c
 80012e4:	483b      	ldr	r0, [pc, #236]	; (80013d4 <main+0x35c>)
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80012e6:	950f      	str	r5, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e8:	e9cd 350b 	strd	r3, r5, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ec:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 80012f0:	f000 ff04 	bl	80020fc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 80012f4:	2380      	movs	r3, #128	; 0x80
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 80012f6:	a90b      	add	r1, sp, #44	; 0x2c
 80012f8:	4830      	ldr	r0, [pc, #192]	; (80013bc <main+0x344>)
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 80012fa:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012fe:	e9cd 350b 	strd	r3, r5, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001302:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8001306:	f000 fef9 	bl	80020fc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 800130a:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800130e:	a90b      	add	r1, sp, #44	; 0x2c
 8001310:	4831      	ldr	r0, [pc, #196]	; (80013d8 <main+0x360>)
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001312:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001316:	e9cd 350b 	strd	r3, r5, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800131a:	e9cd 460d 	strd	r4, r6, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800131e:	f000 feed 	bl	80020fc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8001322:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8001326:	a90b      	add	r1, sp, #44	; 0x2c
 8001328:	482c      	ldr	r0, [pc, #176]	; (80013dc <main+0x364>)
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800132a:	970f      	str	r7, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800132c:	e9cd 350b 	strd	r3, r5, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001330:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8001334:	f000 fee2 	bl	80020fc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8001338:	2360      	movs	r3, #96	; 0x60
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800133a:	a90b      	add	r1, sp, #44	; 0x2c
 800133c:	4824      	ldr	r0, [pc, #144]	; (80013d0 <main+0x358>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800133e:	e9cd 350b 	strd	r3, r5, [sp, #44]	; 0x2c
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001342:	230d      	movs	r3, #13
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001344:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001348:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800134a:	f000 fed7 	bl	80020fc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 800134e:	2340      	movs	r3, #64	; 0x40
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8001350:	a90b      	add	r1, sp, #44	; 0x2c
 8001352:	4820      	ldr	r0, [pc, #128]	; (80013d4 <main+0x35c>)
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001354:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001358:	e9cd 350b 	strd	r3, r5, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800135c:	e9cd 460d 	strd	r4, r6, [sp, #52]	; 0x34
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8001360:	f000 fecc 	bl	80020fc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8001364:	f248 1333 	movw	r3, #33075	; 0x8133
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001368:	a90b      	add	r1, sp, #44	; 0x2c
 800136a:	4818      	ldr	r0, [pc, #96]	; (80013cc <main+0x354>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800136c:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001370:	e9cd 350b 	strd	r3, r5, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001374:	e9cd 460d 	strd	r4, r6, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001378:	f000 fec0 	bl	80020fc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 800137c:	f64e 73ff 	movw	r3, #61439	; 0xefff
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001380:	a90b      	add	r1, sp, #44	; 0x2c
 8001382:	4817      	ldr	r0, [pc, #92]	; (80013e0 <main+0x368>)
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001384:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001388:	e9cd 350b 	strd	r3, r5, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800138c:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001390:	f000 feb4 	bl	80020fc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8001394:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001398:	a90b      	add	r1, sp, #44	; 0x2c
 800139a:	4811      	ldr	r0, [pc, #68]	; (80013e0 <main+0x368>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139c:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800139e:	e9cd 340b 	strd	r3, r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80013a2:	f000 feab 	bl	80020fc <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80013a6:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 80013aa:	e01b      	b.n	80013e4 <main+0x36c>
 80013ac:	03000017 	.word	0x03000017
 80013b0:	01010000 	.word	0x01010000
 80013b4:	e000ed00 	.word	0xe000ed00
 80013b8:	40023800 	.word	0x40023800
 80013bc:	40020c00 	.word	0x40020c00
 80013c0:	40022000 	.word	0x40022000
 80013c4:	40022800 	.word	0x40022800
 80013c8:	40021c00 	.word	0x40021c00
 80013cc:	40021800 	.word	0x40021800
 80013d0:	40021000 	.word	0x40021000
 80013d4:	40020400 	.word	0x40020400
 80013d8:	40020800 	.word	0x40020800
 80013dc:	40020000 	.word	0x40020000
 80013e0:	40022400 	.word	0x40022400
 80013e4:	2340      	movs	r3, #64	; 0x40
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 80013e6:	a90b      	add	r1, sp, #44	; 0x2c
 80013e8:	48cc      	ldr	r0, [pc, #816]	; (800171c <main+0x6a4>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ea:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80013ec:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 80013f0:	f000 fe84 	bl	80020fc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 80013f4:	f24c 7103 	movw	r1, #50947	; 0xc703
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013f8:	48c8      	ldr	r0, [pc, #800]	; (800171c <main+0x6a4>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80013fa:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013fe:	e9cd 150b 	strd	r1, r5, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001402:	a90b      	add	r1, sp, #44	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001404:	e9cd 460d 	strd	r4, r6, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001408:	f000 fe78 	bl	80020fc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 800140c:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001410:	48c3      	ldr	r0, [pc, #780]	; (8001720 <main+0x6a8>)
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001412:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001416:	e9cd 150b 	strd	r1, r5, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800141a:	a90b      	add	r1, sp, #44	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800141c:	e9cd 460d 	strd	r4, r6, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001420:	f000 fe6c 	bl	80020fc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8001424:	21f0      	movs	r1, #240	; 0xf0
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001426:	48bf      	ldr	r0, [pc, #764]	; (8001724 <main+0x6ac>)
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8001428:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800142c:	e9cd 150b 	strd	r1, r5, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001430:	a90b      	add	r1, sp, #44	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001432:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001436:	f000 fe61 	bl	80020fc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 800143a:	21f7      	movs	r1, #247	; 0xf7
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800143c:	48ba      	ldr	r0, [pc, #744]	; (8001728 <main+0x6b0>)
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800143e:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001442:	e9cd 150b 	strd	r1, r5, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001446:	a90b      	add	r1, sp, #44	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001448:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800144c:	f000 fe56 	bl	80020fc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_B4_Pin;
 8001450:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8001454:	a90b      	add	r1, sp, #44	; 0x2c
 8001456:	48b5      	ldr	r0, [pc, #724]	; (800172c <main+0x6b4>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001458:	e9cd 350b 	strd	r3, r5, [sp, #44]	; 0x2c
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800145c:	2309      	movs	r3, #9
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800145e:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001462:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8001464:	f000 fe4a 	bl	80020fc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8001468:	f44f 6380 	mov.w	r3, #1024	; 0x400
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 800146c:	a90b      	add	r1, sp, #44	; 0x2c
 800146e:	48af      	ldr	r0, [pc, #700]	; (800172c <main+0x6b4>)
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8001470:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001474:	e9cd 350b 	strd	r3, r5, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001478:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 800147c:	f000 fe3e 	bl	80020fc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001480:	2320      	movs	r3, #32
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001482:	a90b      	add	r1, sp, #44	; 0x2c
 8001484:	48a5      	ldr	r0, [pc, #660]	; (800171c <main+0x6a4>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001486:	e9cd 370b 	strd	r3, r7, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800148a:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800148e:	f000 fe35 	bl	80020fc <HAL_GPIO_Init>
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001492:	230d      	movs	r3, #13
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8001494:	a90b      	add	r1, sp, #44	; 0x2c
 8001496:	48a1      	ldr	r0, [pc, #644]	; (800171c <main+0x6a4>)
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001498:	930f      	str	r3, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800149a:	e9cd a50b 	strd	sl, r5, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800149e:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 80014a2:	f000 fe2b 	bl	80020fc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 80014a6:	f241 030c 	movw	r3, #4108	; 0x100c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80014aa:	a90b      	add	r1, sp, #44	; 0x2c
 80014ac:	489d      	ldr	r0, [pc, #628]	; (8001724 <main+0x6ac>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ae:	e9cd 370b 	strd	r3, r7, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b2:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80014b6:	f000 fe21 	bl	80020fc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 80014ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 80014be:	a90b      	add	r1, sp, #44	; 0x2c
 80014c0:	489b      	ldr	r0, [pc, #620]	; (8001730 <main+0x6b8>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c2:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014c4:	e9cd 340b 	strd	r3, r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 80014c8:	f000 fe18 	bl	80020fc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 80014cc:	f64f 013f 	movw	r1, #63551	; 0xf83f
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80014d0:	4898      	ldr	r0, [pc, #608]	; (8001734 <main+0x6bc>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80014d2:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d6:	e9cd 150b 	strd	r1, r5, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80014da:	a90b      	add	r1, sp, #44	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014dc:	e9cd 460d 	strd	r4, r6, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80014e0:	f000 fe0c 	bl	80020fc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 80014e4:	f44f 4146 	mov.w	r1, #50688	; 0xc600
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80014e8:	488e      	ldr	r0, [pc, #568]	; (8001724 <main+0x6ac>)
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80014ea:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80014ee:	f04f 0b05 	mov.w	fp, #5
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f2:	e9cd 150b 	strd	r1, r5, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80014f6:	a90b      	add	r1, sp, #44	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f8:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80014fc:	f000 fdfe 	bl	80020fc <HAL_GPIO_Init>
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8001500:	a90b      	add	r1, sp, #44	; 0x2c
 8001502:	4889      	ldr	r0, [pc, #548]	; (8001728 <main+0x6b0>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001504:	e9cd a70b 	strd	sl, r7, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001508:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 800150c:	f000 fdf6 	bl	80020fc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8001510:	f44f 7100 	mov.w	r1, #512	; 0x200
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001514:	230d      	movs	r3, #13
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8001516:	4885      	ldr	r0, [pc, #532]	; (800172c <main+0x6b4>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001518:	e9cd 150b 	strd	r1, r5, [sp, #44]	; 0x2c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 800151c:	a90b      	add	r1, sp, #44	; 0x2c
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800151e:	930f      	str	r3, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001520:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8001524:	f000 fdea 	bl	80020fc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001528:	2310      	movs	r3, #16
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800152a:	a90b      	add	r1, sp, #44	; 0x2c
 800152c:	487b      	ldr	r0, [pc, #492]	; (800171c <main+0x6a4>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152e:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001530:	e9cd 340b 	strd	r3, r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001534:	f000 fde2 	bl	80020fc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SDMMC_D0_Pin;
 8001538:	2304      	movs	r3, #4
  HAL_GPIO_Init(SDMMC_D0_GPIO_Port, &GPIO_InitStruct);
 800153a:	a90b      	add	r1, sp, #44	; 0x2c
 800153c:	4877      	ldr	r0, [pc, #476]	; (800171c <main+0x6a4>)
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800153e:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001542:	e9cd 350b 	strd	r3, r5, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001546:	e9cd 460d 	strd	r4, r6, [sp, #52]	; 0x34
  HAL_GPIO_Init(SDMMC_D0_GPIO_Port, &GPIO_InitStruct);
 800154a:	f000 fdd7 	bl	80020fc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 800154e:	f248 0104 	movw	r1, #32772	; 0x8004
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001552:	4879      	ldr	r0, [pc, #484]	; (8001738 <main+0x6c0>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001554:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001556:	e9cd 140b 	strd	r1, r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800155a:	a90b      	add	r1, sp, #44	; 0x2c
 800155c:	f000 fdce 	bl	80020fc <HAL_GPIO_Init>
  HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8001560:	a90b      	add	r1, sp, #44	; 0x2c
 8001562:	4870      	ldr	r0, [pc, #448]	; (8001724 <main+0x6ac>)
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001564:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001568:	e9cd 550b 	strd	r5, r5, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800156c:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8001570:	f000 fdc4 	bl	80020fc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8001574:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001578:	a90b      	add	r1, sp, #44	; 0x2c
 800157a:	486f      	ldr	r0, [pc, #444]	; (8001738 <main+0x6c0>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800157c:	e9cd 370b 	strd	r3, r7, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001580:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001584:	f000 fdba 	bl	80020fc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8001588:	f44f 41bc 	mov.w	r1, #24064	; 0x5e00
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800158c:	230d      	movs	r3, #13
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800158e:	486a      	ldr	r0, [pc, #424]	; (8001738 <main+0x6c0>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001590:	e9cd 150b 	strd	r1, r5, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001594:	a90b      	add	r1, sp, #44	; 0x2c
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001596:	930f      	str	r3, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001598:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800159c:	f000 fdae 	bl	80020fc <HAL_GPIO_Init>
  HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 80015a0:	a90b      	add	r1, sp, #44	; 0x2c
 80015a2:	4860      	ldr	r0, [pc, #384]	; (8001724 <main+0x6ac>)
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80015a4:	950f      	str	r5, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a6:	e9cd 750b 	strd	r7, r5, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015aa:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 80015ae:	f000 fda5 	bl	80020fc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 80015b2:	f44f 7180 	mov.w	r1, #256	; 0x100
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 80015b6:	485a      	ldr	r0, [pc, #360]	; (8001720 <main+0x6a8>)
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80015b8:	970f      	str	r7, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ba:	e9cd 150b 	strd	r1, r5, [sp, #44]	; 0x2c
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 80015be:	a90b      	add	r1, sp, #44	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c0:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 80015c4:	f000 fd9a 	bl	80020fc <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80015c8:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 80015cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 80015d0:	a90b      	add	r1, sp, #44	; 0x2c
 80015d2:	4854      	ldr	r0, [pc, #336]	; (8001724 <main+0x6ac>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d4:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80015d6:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 80015da:	f000 fd8f 	bl	80020fc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 80015de:	23c0      	movs	r3, #192	; 0xc0
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015e0:	a90b      	add	r1, sp, #44	; 0x2c
 80015e2:	4853      	ldr	r0, [pc, #332]	; (8001730 <main+0x6b8>)
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80015e4:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e8:	e9cd 350b 	strd	r3, r5, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ec:	e9cd 460d 	strd	r4, r6, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015f0:	f000 fd84 	bl	80020fc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 80015f4:	2310      	movs	r3, #16
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 80015f6:	a90b      	add	r1, sp, #44	; 0x2c
 80015f8:	484f      	ldr	r0, [pc, #316]	; (8001738 <main+0x6c0>)
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80015fa:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015fe:	e9cd 350b 	strd	r3, r5, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001602:	e9cd 460d 	strd	r4, r6, [sp, #52]	; 0x34
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8001606:	f000 fd79 	bl	80020fc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 800160a:	2328      	movs	r3, #40	; 0x28
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800160c:	a90b      	add	r1, sp, #44	; 0x2c
 800160e:	484a      	ldr	r0, [pc, #296]	; (8001738 <main+0x6c0>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001610:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001614:	e9cd 350b 	strd	r3, r5, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001618:	e9cd 460d 	strd	r4, r6, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800161c:	f000 fd6e 	bl	80020fc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8001620:	22c8      	movs	r2, #200	; 0xc8
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001622:	a90b      	add	r1, sp, #44	; 0x2c
 8001624:	4841      	ldr	r0, [pc, #260]	; (800172c <main+0x6b4>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001626:	e9cd 270b 	strd	r2, r7, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800162a:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800162e:	f000 fd65 	bl	80020fc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8001632:	f44f 62f8 	mov.w	r2, #1984	; 0x7c0
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001636:	a90b      	add	r1, sp, #44	; 0x2c
 8001638:	483e      	ldr	r0, [pc, #248]	; (8001734 <main+0x6bc>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163a:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800163c:	e9cd 260b 	strd	r2, r6, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001640:	f000 fd5c 	bl	80020fc <HAL_GPIO_Init>
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8001644:	a90b      	add	r1, sp, #44	; 0x2c
 8001646:	483a      	ldr	r0, [pc, #232]	; (8001730 <main+0x6b8>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001648:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800164c:	e9cd a50b 	strd	sl, r5, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001650:	e9cd 460d 	strd	r4, r6, [sp, #52]	; 0x34
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8001654:	f000 fd52 	bl	80020fc <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001658:	a90b      	add	r1, sp, #44	; 0x2c
 800165a:	4835      	ldr	r0, [pc, #212]	; (8001730 <main+0x6b8>)
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800165c:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001660:	e9cd b50b 	strd	fp, r5, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001664:	e9cd 460d 	strd	r4, r6, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001668:	f000 fd48 	bl	80020fc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800166c:	2232      	movs	r2, #50	; 0x32
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800166e:	230b      	movs	r3, #11
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001670:	a90b      	add	r1, sp, #44	; 0x2c
 8001672:	482f      	ldr	r0, [pc, #188]	; (8001730 <main+0x6b8>)
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001674:	930f      	str	r3, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001676:	e9cd 250b 	strd	r2, r5, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800167a:	e9cd 460d 	strd	r4, r6, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800167e:	f000 fd3d 	bl	80020fc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001682:	2304      	movs	r3, #4
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001684:	a90b      	add	r1, sp, #44	; 0x2c
 8001686:	482d      	ldr	r0, [pc, #180]	; (800173c <main+0x6c4>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001688:	e9cd 350b 	strd	r3, r5, [sp, #44]	; 0x2c
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800168c:	2309      	movs	r3, #9
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800168e:	e9cd 460d 	strd	r4, r6, [sp, #52]	; 0x34
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001692:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001694:	f000 fd32 	bl	80020fc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8001698:	f44f 5260 	mov.w	r2, #14336	; 0x3800
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800169c:	2309      	movs	r3, #9
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800169e:	a90b      	add	r1, sp, #44	; 0x2c
 80016a0:	481e      	ldr	r0, [pc, #120]	; (800171c <main+0x6a4>)
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80016a2:	930f      	str	r3, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a4:	e9cd 250b 	strd	r2, r5, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016a8:	e9cd 460d 	strd	r4, r6, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016ac:	f000 fd26 	bl	80020fc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 80016b0:	2304      	movs	r3, #4
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 80016b2:	a90b      	add	r1, sp, #44	; 0x2c
 80016b4:	481d      	ldr	r0, [pc, #116]	; (800172c <main+0x6b4>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b6:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016b8:	e9cd 340b 	strd	r3, r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 80016bc:	f000 fd1e 	bl	80020fc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80016c0:	2286      	movs	r2, #134	; 0x86
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80016c2:	230b      	movs	r3, #11
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016c4:	a90b      	add	r1, sp, #44	; 0x2c
 80016c6:	4816      	ldr	r0, [pc, #88]	; (8001720 <main+0x6a8>)
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80016c8:	930f      	str	r3, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ca:	e9cd 250b 	strd	r2, r5, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ce:	e9cd 460d 	strd	r4, r6, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016d2:	f000 fd13 	bl	80020fc <HAL_GPIO_Init>
  HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 80016d6:	a90b      	add	r1, sp, #44	; 0x2c
 80016d8:	4811      	ldr	r0, [pc, #68]	; (8001720 <main+0x6a8>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016da:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016dc:	e9cd 760b 	strd	r7, r6, [sp, #44]	; 0x2c
  HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 80016e0:	f000 fd0c 	bl	80020fc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 80016e4:	2250      	movs	r2, #80	; 0x50
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80016e6:	230d      	movs	r3, #13
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016e8:	a90b      	add	r1, sp, #44	; 0x2c
 80016ea:	480d      	ldr	r0, [pc, #52]	; (8001720 <main+0x6a8>)
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80016ec:	930f      	str	r3, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ee:	e9cd 250b 	strd	r2, r5, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f2:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016f6:	f000 fd01 	bl	80020fc <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016fa:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80016fe:	2312      	movs	r3, #18
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001700:	a90b      	add	r1, sp, #44	; 0x2c
 8001702:	480d      	ldr	r0, [pc, #52]	; (8001738 <main+0x6c0>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001704:	e9cd 230b 	strd	r2, r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001708:	2304      	movs	r3, #4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800170a:	e9cd 460d 	strd	r4, r6, [sp, #52]	; 0x34
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800170e:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001710:	f000 fcf4 	bl	80020fc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8001714:	2328      	movs	r3, #40	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001716:	a90b      	add	r1, sp, #44	; 0x2c
 8001718:	e012      	b.n	8001740 <main+0x6c8>
 800171a:	bf00      	nop
 800171c:	40020c00 	.word	0x40020c00
 8001720:	40020000 	.word	0x40020000
 8001724:	40022000 	.word	0x40022000
 8001728:	40022800 	.word	0x40022800
 800172c:	40021800 	.word	0x40021800
 8001730:	40020800 	.word	0x40020800
 8001734:	40021400 	.word	0x40021400
 8001738:	40021c00 	.word	0x40021c00
 800173c:	40020400 	.word	0x40020400
 8001740:	4818      	ldr	r0, [pc, #96]	; (80017a4 <main+0x72c>)
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001742:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001746:	e9cd 350b 	strd	r3, r5, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800174a:	e9cd 460d 	strd	r4, r6, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800174e:	f000 fcd5 	bl	80020fc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8001752:	2340      	movs	r3, #64	; 0x40
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8001754:	a90b      	add	r1, sp, #44	; 0x2c
 8001756:	4814      	ldr	r0, [pc, #80]	; (80017a8 <main+0x730>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001758:	e9cd 350b 	strd	r3, r5, [sp, #44]	; 0x2c
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 800175c:	2309      	movs	r3, #9
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800175e:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8001762:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8001764:	f000 fcca 	bl	80020fc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8001768:	f44f 4340 	mov.w	r3, #49152	; 0xc000
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800176c:	480f      	ldr	r0, [pc, #60]	; (80017ac <main+0x734>)
 800176e:	a90b      	add	r1, sp, #44	; 0x2c
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001770:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001774:	e9cd 350b 	strd	r3, r5, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001778:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800177c:	f000 fcbe 	bl	80020fc <HAL_GPIO_Init>
  hcrc.Instance = CRC;
 8001780:	480b      	ldr	r0, [pc, #44]	; (80017b0 <main+0x738>)
 8001782:	4b0c      	ldr	r3, [pc, #48]	; (80017b4 <main+0x73c>)
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8001784:	8084      	strh	r4, [r0, #4]
  hcrc.Instance = CRC;
 8001786:	6003      	str	r3, [r0, #0]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8001788:	6207      	str	r7, [r0, #32]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800178a:	e9c0 4405 	strd	r4, r4, [r0, #20]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800178e:	f000 fb97 	bl	8001ec0 <HAL_CRC_Init>
 8001792:	b108      	cbz	r0, 8001798 <main+0x720>
  __ASM volatile ("cpsid i" : : : "memory");
 8001794:	b672      	cpsid	i
  while (1)
 8001796:	e7fe      	b.n	8001796 <main+0x71e>
  MX_X_CUBE_AI_Init();
 8001798:	f003 f888 	bl	80048ac <MX_X_CUBE_AI_Init>
  MX_X_CUBE_AI_Process();
 800179c:	f003 f88f 	bl	80048be <MX_X_CUBE_AI_Process>
  while (1)
 80017a0:	e7fc      	b.n	800179c <main+0x724>
 80017a2:	bf00      	nop
 80017a4:	40020000 	.word	0x40020000
 80017a8:	40021c00 	.word	0x40021c00
 80017ac:	40020400 	.word	0x40020400
 80017b0:	2000132c 	.word	0x2000132c
 80017b4:	40023000 	.word	0x40023000

080017b8 <MX_USART1_UART_Init>:
{
 80017b8:	b508      	push	{r3, lr}
  huart1.Instance = USART1;
 80017ba:	480b      	ldr	r0, [pc, #44]	; (80017e8 <MX_USART1_UART_Init+0x30>)
  huart1.Init.BaudRate = 115200;
 80017bc:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80017c0:	4a0a      	ldr	r2, [pc, #40]	; (80017ec <MX_USART1_UART_Init+0x34>)
 80017c2:	e9c0 2300 	strd	r2, r3, [r0]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80017c6:	2300      	movs	r3, #0
  huart1.Init.Mode = UART_MODE_TX_RX;
 80017c8:	220c      	movs	r2, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 80017ca:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart1.Init.Parity = UART_PARITY_NONE;
 80017ce:	6103      	str	r3, [r0, #16]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017d0:	6243      	str	r3, [r0, #36]	; 0x24
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017d2:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017d6:	e9c0 3307 	strd	r3, r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80017da:	f001 fe1d 	bl	8003418 <HAL_UART_Init>
 80017de:	b108      	cbz	r0, 80017e4 <MX_USART1_UART_Init+0x2c>
 80017e0:	b672      	cpsid	i
  while (1)
 80017e2:	e7fe      	b.n	80017e2 <MX_USART1_UART_Init+0x2a>
}
 80017e4:	bd08      	pop	{r3, pc}
 80017e6:	bf00      	nop
 80017e8:	20001350 	.word	0x20001350
 80017ec:	40011000 	.word	0x40011000

080017f0 <Error_Handler>:
 80017f0:	b672      	cpsid	i
  while (1)
 80017f2:	e7fe      	b.n	80017f2 <Error_Handler+0x2>

080017f4 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80017f4:	4b0a      	ldr	r3, [pc, #40]	; (8001820 <HAL_MspInit+0x2c>)
{
 80017f6:	b082      	sub	sp, #8
  __HAL_RCC_PWR_CLK_ENABLE();
 80017f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80017fa:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80017fe:	641a      	str	r2, [r3, #64]	; 0x40
 8001800:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001802:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8001806:	9200      	str	r2, [sp, #0]
 8001808:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800180a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800180c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001810:	645a      	str	r2, [r3, #68]	; 0x44
 8001812:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001814:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001818:	9301      	str	r3, [sp, #4]
 800181a:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800181c:	b002      	add	sp, #8
 800181e:	4770      	bx	lr
 8001820:	40023800 	.word	0x40023800

08001824 <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 8001824:	6802      	ldr	r2, [r0, #0]
{
 8001826:	b082      	sub	sp, #8
  if(hcrc->Instance==CRC)
 8001828:	4b08      	ldr	r3, [pc, #32]	; (800184c <HAL_CRC_MspInit+0x28>)
 800182a:	429a      	cmp	r2, r3
 800182c:	d10b      	bne.n	8001846 <HAL_CRC_MspInit+0x22>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800182e:	f8d3 2830 	ldr.w	r2, [r3, #2096]	; 0x830
 8001832:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001836:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800183a:	631a      	str	r2, [r3, #48]	; 0x30
 800183c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001842:	9301      	str	r3, [sp, #4]
 8001844:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001846:	b002      	add	sp, #8
 8001848:	4770      	bx	lr
 800184a:	bf00      	nop
 800184c:	40023000 	.word	0x40023000

08001850 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001850:	b570      	push	{r4, r5, r6, lr}
 8001852:	b0aa      	sub	sp, #168	; 0xa8
 8001854:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001856:	2214      	movs	r2, #20
 8001858:	2100      	movs	r1, #0
 800185a:	a804      	add	r0, sp, #16
 800185c:	f007 ff84 	bl	8009768 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001860:	2284      	movs	r2, #132	; 0x84
 8001862:	2100      	movs	r1, #0
 8001864:	a809      	add	r0, sp, #36	; 0x24
 8001866:	f007 ff7f 	bl	8009768 <memset>
  if(huart->Instance==USART1)
 800186a:	6822      	ldr	r2, [r4, #0]
 800186c:	4b20      	ldr	r3, [pc, #128]	; (80018f0 <HAL_UART_MspInit+0xa0>)
 800186e:	429a      	cmp	r2, r3
 8001870:	d13c      	bne.n	80018ec <HAL_UART_MspInit+0x9c>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001872:	2340      	movs	r3, #64	; 0x40
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001874:	a809      	add	r0, sp, #36	; 0x24
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001876:	9309      	str	r3, [sp, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001878:	f001 f814 	bl	80028a4 <HAL_RCCEx_PeriphCLKConfig>
 800187c:	b108      	cbz	r0, 8001882 <HAL_UART_MspInit+0x32>
    {
      Error_Handler();
 800187e:	f7ff ffb7 	bl	80017f0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001882:	4b1c      	ldr	r3, [pc, #112]	; (80018f4 <HAL_UART_MspInit+0xa4>)
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001884:	2602      	movs	r6, #2
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001886:	2400      	movs	r4, #0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001888:	2507      	movs	r5, #7
    __HAL_RCC_USART1_CLK_ENABLE();
 800188a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800188c:	a904      	add	r1, sp, #16
 800188e:	481a      	ldr	r0, [pc, #104]	; (80018f8 <HAL_UART_MspInit+0xa8>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8001890:	f042 0210 	orr.w	r2, r2, #16
 8001894:	645a      	str	r2, [r3, #68]	; 0x44
 8001896:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001898:	f002 0210 	and.w	r2, r2, #16
 800189c:	9201      	str	r2, [sp, #4]
 800189e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80018a2:	f042 0202 	orr.w	r2, r2, #2
 80018a6:	631a      	str	r2, [r3, #48]	; 0x30
 80018a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80018aa:	f002 0202 	and.w	r2, r2, #2
 80018ae:	9202      	str	r2, [sp, #8]
 80018b0:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80018b4:	f042 0201 	orr.w	r2, r2, #1
 80018b8:	631a      	str	r2, [r3, #48]	; 0x30
 80018ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80018bc:	9508      	str	r5, [sp, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018be:	f003 0301 	and.w	r3, r3, #1
 80018c2:	9303      	str	r3, [sp, #12]
 80018c4:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c6:	2380      	movs	r3, #128	; 0x80
 80018c8:	e9cd 3604 	strd	r3, r6, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018cc:	2301      	movs	r3, #1
 80018ce:	e9cd 3406 	strd	r3, r4, [sp, #24]
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80018d2:	f000 fc13 	bl	80020fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80018d6:	f44f 7300 	mov.w	r3, #512	; 0x200
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80018da:	a904      	add	r1, sp, #16
 80018dc:	4807      	ldr	r0, [pc, #28]	; (80018fc <HAL_UART_MspInit+0xac>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80018de:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e0:	e9cd 3604 	strd	r3, r6, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e4:	e9cd 4406 	strd	r4, r4, [sp, #24]
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80018e8:	f000 fc08 	bl	80020fc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80018ec:	b02a      	add	sp, #168	; 0xa8
 80018ee:	bd70      	pop	{r4, r5, r6, pc}
 80018f0:	40011000 	.word	0x40011000
 80018f4:	40023800 	.word	0x40023800
 80018f8:	40020400 	.word	0x40020400
 80018fc:	40020000 	.word	0x40020000

08001900 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001900:	e7fe      	b.n	8001900 <NMI_Handler>

08001902 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001902:	e7fe      	b.n	8001902 <HardFault_Handler>

08001904 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001904:	e7fe      	b.n	8001904 <MemManage_Handler>

08001906 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001906:	e7fe      	b.n	8001906 <BusFault_Handler>

08001908 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001908:	e7fe      	b.n	8001908 <UsageFault_Handler>

0800190a <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800190a:	4770      	bx	lr

0800190c <DebugMon_Handler>:
 800190c:	4770      	bx	lr

0800190e <PendSV_Handler>:
 800190e:	4770      	bx	lr

08001910 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001910:	f000 b9f0 	b.w	8001cf4 <HAL_IncTick>

08001914 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8001914:	2001      	movs	r0, #1
 8001916:	4770      	bx	lr

08001918 <_kill>:

int _kill(int pid, int sig)
{
 8001918:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800191a:	f007 fd0f 	bl	800933c <__errno>
 800191e:	2316      	movs	r3, #22
 8001920:	6003      	str	r3, [r0, #0]
  return -1;
}
 8001922:	f04f 30ff 	mov.w	r0, #4294967295
 8001926:	bd08      	pop	{r3, pc}

08001928 <_exit>:

void _exit (int status)
{
 8001928:	b508      	push	{r3, lr}
  errno = EINVAL;
 800192a:	f007 fd07 	bl	800933c <__errno>
 800192e:	2316      	movs	r3, #22
 8001930:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 8001932:	e7fe      	b.n	8001932 <_exit+0xa>

08001934 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001934:	b570      	push	{r4, r5, r6, lr}
 8001936:	460d      	mov	r5, r1
 8001938:	4614      	mov	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800193a:	460e      	mov	r6, r1
 800193c:	1b73      	subs	r3, r6, r5
 800193e:	429c      	cmp	r4, r3
 8001940:	dc01      	bgt.n	8001946 <_read+0x12>
  {
    *ptr++ = __io_getchar();
  }

  return len;
}
 8001942:	4620      	mov	r0, r4
 8001944:	bd70      	pop	{r4, r5, r6, pc}
    *ptr++ = __io_getchar();
 8001946:	f3af 8000 	nop.w
 800194a:	f806 0b01 	strb.w	r0, [r6], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800194e:	e7f5      	b.n	800193c <_read+0x8>

08001950 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8001950:	f04f 30ff 	mov.w	r0, #4294967295
 8001954:	4770      	bx	lr

08001956 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8001956:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  return 0;
}
 800195a:	2000      	movs	r0, #0
  st->st_mode = S_IFCHR;
 800195c:	604b      	str	r3, [r1, #4]
}
 800195e:	4770      	bx	lr

08001960 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8001960:	2001      	movs	r0, #1
 8001962:	4770      	bx	lr

08001964 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8001964:	2000      	movs	r0, #0
 8001966:	4770      	bx	lr

08001968 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001968:	4a0b      	ldr	r2, [pc, #44]	; (8001998 <_sbrk+0x30>)
{
 800196a:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 800196c:	6811      	ldr	r1, [r2, #0]
{
 800196e:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8001970:	b909      	cbnz	r1, 8001976 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 8001972:	490a      	ldr	r1, [pc, #40]	; (800199c <_sbrk+0x34>)
 8001974:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001976:	6810      	ldr	r0, [r2, #0]
 8001978:	4909      	ldr	r1, [pc, #36]	; (80019a0 <_sbrk+0x38>)
 800197a:	4c0a      	ldr	r4, [pc, #40]	; (80019a4 <_sbrk+0x3c>)
 800197c:	4403      	add	r3, r0
 800197e:	1b09      	subs	r1, r1, r4
 8001980:	428b      	cmp	r3, r1
 8001982:	d906      	bls.n	8001992 <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8001984:	f007 fcda 	bl	800933c <__errno>
 8001988:	230c      	movs	r3, #12
 800198a:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 800198c:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8001990:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8001992:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8001994:	e7fc      	b.n	8001990 <_sbrk+0x28>
 8001996:	bf00      	nop
 8001998:	200013d8 	.word	0x200013d8
 800199c:	20001680 	.word	0x20001680
 80019a0:	20050000 	.word	0x20050000
 80019a4:	00000800 	.word	0x00000800

080019a8 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019a8:	4a03      	ldr	r2, [pc, #12]	; (80019b8 <SystemInit+0x10>)
 80019aa:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80019ae:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019b2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019b6:	4770      	bx	lr
 80019b8:	e000ed00 	.word	0xe000ed00

080019bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80019bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019f4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80019c0:	480d      	ldr	r0, [pc, #52]	; (80019f8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80019c2:	490e      	ldr	r1, [pc, #56]	; (80019fc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80019c4:	4a0e      	ldr	r2, [pc, #56]	; (8001a00 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80019c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019c8:	e002      	b.n	80019d0 <LoopCopyDataInit>

080019ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019ce:	3304      	adds	r3, #4

080019d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019d4:	d3f9      	bcc.n	80019ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019d6:	4a0b      	ldr	r2, [pc, #44]	; (8001a04 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80019d8:	4c0b      	ldr	r4, [pc, #44]	; (8001a08 <LoopFillZerobss+0x26>)
  movs r3, #0
 80019da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019dc:	e001      	b.n	80019e2 <LoopFillZerobss>

080019de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019e0:	3204      	adds	r2, #4

080019e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019e4:	d3fb      	bcc.n	80019de <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80019e6:	f7ff ffdf 	bl	80019a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019ea:	f007 fe77 	bl	80096dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019ee:	f7ff fb43 	bl	8001078 <main>
  bx  lr    
 80019f2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80019f4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80019f8:	20000680 	.word	0x20000680
  ldr r1, =_edata
 80019fc:	2000130c 	.word	0x2000130c
  ldr r2, =_sidata
 8001a00:	08022d58 	.word	0x08022d58
  ldr r2, =_sbss
 8001a04:	20001310 	.word	0x20001310
  ldr r4, =_ebss
 8001a08:	20001680 	.word	0x20001680

08001a0c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a0c:	e7fe      	b.n	8001a0c <ADC_IRQHandler>
	...

08001a10 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8001a10:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  __IO uint32_t tmpmrd = 0;
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8001a14:	4c21      	ldr	r4, [pc, #132]	; (8001a9c <BSP_SDRAM_Initialization_sequence+0x8c>)
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001a16:	2601      	movs	r6, #1
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8001a18:	4d21      	ldr	r5, [pc, #132]	; (8001aa0 <BSP_SDRAM_Initialization_sequence+0x90>)
  __IO uint32_t tmpmrd = 0;
 8001a1a:	f04f 0800 	mov.w	r8, #0
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001a1e:	2710      	movs	r7, #16
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8001a20:	4621      	mov	r1, r4
{
 8001a22:	4681      	mov	r9, r0
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8001a24:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a28:	4628      	mov	r0, r5
  __IO uint32_t tmpmrd = 0;
 8001a2a:	f8cd 8004 	str.w	r8, [sp, #4]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001a2e:	e9c4 6700 	strd	r6, r7, [r4]
  Command.ModeRegisterDefinition = 0;
 8001a32:	e9c4 6802 	strd	r6, r8, [r4, #8]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8001a36:	f001 f9de 	bl	8002df6 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8001a3a:	4630      	mov	r0, r6
 8001a3c:	f000 f96c 	bl	8001d18 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8001a40:	2302      	movs	r3, #2
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8001a42:	4621      	mov	r1, r4
 8001a44:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a48:	4628      	mov	r0, r5
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001a4a:	e9c4 3700 	strd	r3, r7, [r4]
  Command.ModeRegisterDefinition = 0;
 8001a4e:	e9c4 6802 	strd	r6, r8, [r4, #8]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8001a52:	f001 f9d0 	bl	8002df6 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8001a56:	2303      	movs	r3, #3
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 8;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8001a58:	4621      	mov	r1, r4
 8001a5a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a5e:	4628      	mov	r0, r5
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001a60:	e9c4 3700 	strd	r3, r7, [r4]
  Command.AutoRefreshNumber      = 8;
 8001a64:	2308      	movs	r3, #8
  Command.ModeRegisterDefinition = 0;
 8001a66:	e9c4 3802 	strd	r3, r8, [r4, #8]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8001a6a:	f001 f9c4 	bl	8002df6 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8001a6e:	f44f 7308 	mov.w	r3, #544	; 0x220
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = tmpmrd;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8001a72:	4621      	mov	r1, r4
 8001a74:	f64f 72ff 	movw	r2, #65535	; 0xffff
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8001a78:	9301      	str	r3, [sp, #4]
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8001a7a:	2304      	movs	r3, #4
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8001a7c:	4628      	mov	r0, r5
  Command.AutoRefreshNumber      = 1;
 8001a7e:	60a6      	str	r6, [r4, #8]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001a80:	e9c4 3700 	strd	r3, r7, [r4]
  Command.ModeRegisterDefinition = tmpmrd;
 8001a84:	9b01      	ldr	r3, [sp, #4]
 8001a86:	60e3      	str	r3, [r4, #12]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8001a88:	f001 f9b5 	bl	8002df6 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8001a8c:	4649      	mov	r1, r9
 8001a8e:	4628      	mov	r0, r5
}
 8001a90:	b003      	add	sp, #12
 8001a92:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8001a96:	f001 b9cd 	b.w	8002e34 <HAL_SDRAM_ProgramRefreshRate>
 8001a9a:	bf00      	nop
 8001a9c:	200013dc 	.word	0x200013dc
 8001aa0:	20001468 	.word	0x20001468

08001aa4 <BSP_SDRAM_MspInit>:
{  
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001aa4:	4b54      	ldr	r3, [pc, #336]	; (8001bf8 <BSP_SDRAM_MspInit+0x154>)
 8001aa6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001aa8:	f042 0201 	orr.w	r2, r2, #1
{  
 8001aac:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_FMC_CLK_ENABLE();
 8001aae:	639a      	str	r2, [r3, #56]	; 0x38
{  
 8001ab0:	b08e      	sub	sp, #56	; 0x38
  __HAL_RCC_FMC_CLK_ENABLE();
 8001ab2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
{  
 8001ab4:	4606      	mov	r6, r0
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8001ab6:	a909      	add	r1, sp, #36	; 0x24
 8001ab8:	4850      	ldr	r0, [pc, #320]	; (8001bfc <BSP_SDRAM_MspInit+0x158>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8001aba:	f002 0201 	and.w	r2, r2, #1
  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8001abe:	4c50      	ldr	r4, [pc, #320]	; (8001c00 <BSP_SDRAM_MspInit+0x15c>)
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8001ac0:	2500      	movs	r5, #0
  __HAL_RCC_FMC_CLK_ENABLE();
 8001ac2:	9201      	str	r2, [sp, #4]
 8001ac4:	9a01      	ldr	r2, [sp, #4]
  __DMAx_CLK_ENABLE();
 8001ac6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ac8:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001acc:	631a      	str	r2, [r3, #48]	; 0x30
 8001ace:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ad0:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8001ad4:	9202      	str	r2, [sp, #8]
 8001ad6:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ad8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ada:	f042 0204 	orr.w	r2, r2, #4
 8001ade:	631a      	str	r2, [r3, #48]	; 0x30
 8001ae0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ae2:	f002 0204 	and.w	r2, r2, #4
 8001ae6:	9203      	str	r2, [sp, #12]
 8001ae8:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001aea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001aec:	f042 0208 	orr.w	r2, r2, #8
 8001af0:	631a      	str	r2, [r3, #48]	; 0x30
 8001af2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001af4:	f002 0208 	and.w	r2, r2, #8
 8001af8:	9204      	str	r2, [sp, #16]
 8001afa:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001afc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001afe:	f042 0210 	orr.w	r2, r2, #16
 8001b02:	631a      	str	r2, [r3, #48]	; 0x30
 8001b04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b06:	f002 0210 	and.w	r2, r2, #16
 8001b0a:	9205      	str	r2, [sp, #20]
 8001b0c:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001b0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b10:	f042 0220 	orr.w	r2, r2, #32
 8001b14:	631a      	str	r2, [r3, #48]	; 0x30
 8001b16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b18:	f002 0220 	and.w	r2, r2, #32
 8001b1c:	9206      	str	r2, [sp, #24]
 8001b1e:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001b20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b22:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001b26:	631a      	str	r2, [r3, #48]	; 0x30
 8001b28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b2a:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8001b2e:	9207      	str	r2, [sp, #28]
 8001b30:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b34:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001b38:	631a      	str	r2, [r3, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8001b3a:	2201      	movs	r2, #1
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b42:	9308      	str	r3, [sp, #32]
 8001b44:	9b08      	ldr	r3, [sp, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8001b46:	2302      	movs	r3, #2
 8001b48:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8001b4c:	930c      	str	r3, [sp, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8001b4e:	230c      	movs	r3, #12
 8001b50:	930d      	str	r3, [sp, #52]	; 0x34
  gpio_init_structure.Pin   = GPIO_PIN_3;
 8001b52:	2308      	movs	r3, #8
 8001b54:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8001b56:	f000 fad1 	bl	80020fc <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 8001b5a:	f24c 7303 	movw	r3, #50947	; 0xc703
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8001b5e:	a909      	add	r1, sp, #36	; 0x24
 8001b60:	4828      	ldr	r0, [pc, #160]	; (8001c04 <BSP_SDRAM_MspInit+0x160>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 8001b62:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8001b64:	f000 faca 	bl	80020fc <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8001b68:	f64f 7383 	movw	r3, #65411	; 0xff83
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8001b6c:	a909      	add	r1, sp, #36	; 0x24
 8001b6e:	4826      	ldr	r0, [pc, #152]	; (8001c08 <BSP_SDRAM_MspInit+0x164>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8001b70:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8001b72:	f000 fac3 	bl	80020fc <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8001b76:	f64f 033f 	movw	r3, #63551	; 0xf83f
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8001b7a:	a909      	add	r1, sp, #36	; 0x24
 8001b7c:	4823      	ldr	r0, [pc, #140]	; (8001c0c <BSP_SDRAM_MspInit+0x168>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8001b7e:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8001b80:	f000 fabc 	bl	80020fc <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8001b84:	f248 1333 	movw	r3, #33075	; 0x8133
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8001b88:	a909      	add	r1, sp, #36	; 0x24
 8001b8a:	4821      	ldr	r0, [pc, #132]	; (8001c10 <BSP_SDRAM_MspInit+0x16c>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8001b8c:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8001b8e:	f000 fab5 	bl	80020fc <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 8001b92:	2328      	movs	r3, #40	; 0x28
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8001b94:	a909      	add	r1, sp, #36	; 0x24
 8001b96:	481f      	ldr	r0, [pc, #124]	; (8001c14 <BSP_SDRAM_MspInit+0x170>)
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 8001b98:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8001b9a:	f000 faaf 	bl	80020fc <HAL_GPIO_Init>
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8001b9e:	2380      	movs	r3, #128	; 0x80
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8001ba0:	f44f 7100 	mov.w	r1, #512	; 0x200
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8001ba4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  dma_handle.Init.Mode                = DMA_NORMAL;
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8001ba8:	6325      	str	r5, [r4, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8001baa:	6334      	str	r4, [r6, #48]	; 0x30
  dma_handle.Init.Mode                = DMA_NORMAL;
 8001bac:	61e5      	str	r5, [r4, #28]
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8001bae:	63a6      	str	r6, [r4, #56]	; 0x38
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8001bb0:	e9c4 5301 	strd	r5, r3, [r4, #4]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8001bb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001bb8:	e9c4 1303 	strd	r1, r3, [r4, #12]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8001bbc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001bc0:	e9c4 0305 	strd	r0, r3, [r4, #20]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8001bc4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 8001bc8:	4620      	mov	r0, r4
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8001bca:	e9c4 3508 	strd	r3, r5, [r4, #32]
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8001bce:	2303      	movs	r3, #3
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8001bd0:	e9c4 350a 	strd	r3, r5, [r4, #40]	; 0x28
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8001bd4:	4b10      	ldr	r3, [pc, #64]	; (8001c18 <BSP_SDRAM_MspInit+0x174>)
 8001bd6:	6023      	str	r3, [r4, #0]
  HAL_DMA_DeInit(&dma_handle);
 8001bd8:	f000 fa66 	bl	80020a8 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8001bdc:	4620      	mov	r0, r4
 8001bde:	f000 f9e3 	bl	8001fa8 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8001be2:	462a      	mov	r2, r5
 8001be4:	210f      	movs	r1, #15
 8001be6:	2038      	movs	r0, #56	; 0x38
 8001be8:	f000 f8cc 	bl	8001d84 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8001bec:	2038      	movs	r0, #56	; 0x38
 8001bee:	f000 f8fb 	bl	8001de8 <HAL_NVIC_EnableIRQ>
}
 8001bf2:	b00e      	add	sp, #56	; 0x38
 8001bf4:	bd70      	pop	{r4, r5, r6, pc}
 8001bf6:	bf00      	nop
 8001bf8:	40023800 	.word	0x40023800
 8001bfc:	40020800 	.word	0x40020800
 8001c00:	20001408 	.word	0x20001408
 8001c04:	40020c00 	.word	0x40020c00
 8001c08:	40021000 	.word	0x40021000
 8001c0c:	40021400 	.word	0x40021400
 8001c10:	40021800 	.word	0x40021800
 8001c14:	40021c00 	.word	0x40021c00
 8001c18:	40026410 	.word	0x40026410

08001c1c <BSP_SDRAM_Init>:
{ 
 8001c1c:	b538      	push	{r3, r4, r5, lr}
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8001c1e:	4c19      	ldr	r4, [pc, #100]	; (8001c84 <BSP_SDRAM_Init+0x68>)
  Timing.ExitSelfRefreshDelay = 7;
 8001c20:	2107      	movs	r1, #7
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8001c22:	4b19      	ldr	r3, [pc, #100]	; (8001c88 <BSP_SDRAM_Init+0x6c>)
  Timing.SelfRefreshTime      = 4;
 8001c24:	2204      	movs	r2, #4
  Timing.LoadToActiveDelay    = 2;
 8001c26:	4d19      	ldr	r5, [pc, #100]	; (8001c8c <BSP_SDRAM_Init+0x70>)
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8001c28:	f44f 6000 	mov.w	r0, #2048	; 0x800
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8001c2c:	6023      	str	r3, [r4, #0]
  Timing.ExitSelfRefreshDelay = 7;
 8001c2e:	2302      	movs	r3, #2
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8001c30:	60e2      	str	r2, [r4, #12]
  Timing.RCDDelay             = 2;
 8001c32:	61ab      	str	r3, [r5, #24]
  Timing.ExitSelfRefreshDelay = 7;
 8001c34:	e9c5 3100 	strd	r3, r1, [r5]
  Timing.RowCycleDelay        = 7;
 8001c38:	e9c5 2102 	strd	r2, r1, [r5, #8]
  Timing.RPDelay              = 2;
 8001c3c:	e9c5 3304 	strd	r3, r3, [r5, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001c40:	2210      	movs	r2, #16
 8001c42:	2340      	movs	r3, #64	; 0x40
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8001c44:	2100      	movs	r1, #0
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001c46:	e9c4 2304 	strd	r2, r3, [r4, #16]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 8001c4a:	f44f 7380 	mov.w	r3, #256	; 0x100
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8001c4e:	62a1      	str	r1, [r4, #40]	; 0x28
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001c50:	e9c4 3106 	strd	r3, r1, [r4, #24]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8001c54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c58:	e9c4 0308 	strd	r0, r3, [r4, #32]
  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8001c5c:	4620      	mov	r0, r4
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001c5e:	e9c4 1101 	strd	r1, r1, [r4, #4]
  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8001c62:	f7ff ff1f 	bl	8001aa4 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8001c66:	4629      	mov	r1, r5
 8001c68:	4620      	mov	r0, r4
 8001c6a:	4c09      	ldr	r4, [pc, #36]	; (8001c90 <BSP_SDRAM_Init+0x74>)
 8001c6c:	f001 f8a3 	bl	8002db6 <HAL_SDRAM_Init>
 8001c70:	3800      	subs	r0, #0
 8001c72:	bf18      	it	ne
 8001c74:	2001      	movne	r0, #1
 8001c76:	7020      	strb	r0, [r4, #0]
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8001c78:	f240 6003 	movw	r0, #1539	; 0x603
 8001c7c:	f7ff fec8 	bl	8001a10 <BSP_SDRAM_Initialization_sequence>
}
 8001c80:	7820      	ldrb	r0, [r4, #0]
 8001c82:	bd38      	pop	{r3, r4, r5, pc}
 8001c84:	20001468 	.word	0x20001468
 8001c88:	a0000140 	.word	0xa0000140
 8001c8c:	200013ec 	.word	0x200013ec
 8001c90:	20000684 	.word	0x20000684

08001c94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c94:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c96:	4b0e      	ldr	r3, [pc, #56]	; (8001cd0 <HAL_InitTick+0x3c>)
{
 8001c98:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c9a:	4a0e      	ldr	r2, [pc, #56]	; (8001cd4 <HAL_InitTick+0x40>)
 8001c9c:	7818      	ldrb	r0, [r3, #0]
 8001c9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ca2:	fbb3 f3f0 	udiv	r3, r3, r0
 8001ca6:	6810      	ldr	r0, [r2, #0]
 8001ca8:	fbb0 f0f3 	udiv	r0, r0, r3
 8001cac:	f000 f8aa 	bl	8001e04 <HAL_SYSTICK_Config>
 8001cb0:	4604      	mov	r4, r0
 8001cb2:	b958      	cbnz	r0, 8001ccc <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cb4:	2d0f      	cmp	r5, #15
 8001cb6:	d809      	bhi.n	8001ccc <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cb8:	4602      	mov	r2, r0
 8001cba:	4629      	mov	r1, r5
 8001cbc:	f04f 30ff 	mov.w	r0, #4294967295
 8001cc0:	f000 f860 	bl	8001d84 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001cc4:	4b04      	ldr	r3, [pc, #16]	; (8001cd8 <HAL_InitTick+0x44>)
 8001cc6:	4620      	mov	r0, r4
 8001cc8:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8001cca:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001ccc:	2001      	movs	r0, #1
 8001cce:	e7fc      	b.n	8001cca <HAL_InitTick+0x36>
 8001cd0:	20000685 	.word	0x20000685
 8001cd4:	20000680 	.word	0x20000680
 8001cd8:	20000688 	.word	0x20000688

08001cdc <HAL_Init>:
{
 8001cdc:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cde:	2003      	movs	r0, #3
 8001ce0:	f000 f83e 	bl	8001d60 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ce4:	2000      	movs	r0, #0
 8001ce6:	f7ff ffd5 	bl	8001c94 <HAL_InitTick>
  HAL_MspInit();
 8001cea:	f7ff fd83 	bl	80017f4 <HAL_MspInit>
}
 8001cee:	2000      	movs	r0, #0
 8001cf0:	bd08      	pop	{r3, pc}
	...

08001cf4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001cf4:	4a03      	ldr	r2, [pc, #12]	; (8001d04 <HAL_IncTick+0x10>)
 8001cf6:	4b04      	ldr	r3, [pc, #16]	; (8001d08 <HAL_IncTick+0x14>)
 8001cf8:	6811      	ldr	r1, [r2, #0]
 8001cfa:	781b      	ldrb	r3, [r3, #0]
 8001cfc:	440b      	add	r3, r1
 8001cfe:	6013      	str	r3, [r2, #0]
}
 8001d00:	4770      	bx	lr
 8001d02:	bf00      	nop
 8001d04:	2000149c 	.word	0x2000149c
 8001d08:	20000685 	.word	0x20000685

08001d0c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001d0c:	4b01      	ldr	r3, [pc, #4]	; (8001d14 <HAL_GetTick+0x8>)
 8001d0e:	6818      	ldr	r0, [r3, #0]
}
 8001d10:	4770      	bx	lr
 8001d12:	bf00      	nop
 8001d14:	2000149c 	.word	0x2000149c

08001d18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d18:	b538      	push	{r3, r4, r5, lr}
 8001d1a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001d1c:	f7ff fff6 	bl	8001d0c <HAL_GetTick>
 8001d20:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d22:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8001d24:	bf1e      	ittt	ne
 8001d26:	4b04      	ldrne	r3, [pc, #16]	; (8001d38 <HAL_Delay+0x20>)
 8001d28:	781b      	ldrbne	r3, [r3, #0]
 8001d2a:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d2c:	f7ff ffee 	bl	8001d0c <HAL_GetTick>
 8001d30:	1b43      	subs	r3, r0, r5
 8001d32:	42a3      	cmp	r3, r4
 8001d34:	d3fa      	bcc.n	8001d2c <HAL_Delay+0x14>
  {
  }
}
 8001d36:	bd38      	pop	{r3, r4, r5, pc}
 8001d38:	20000685 	.word	0x20000685

08001d3c <HAL_GetHalVersion>:
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
  return __STM32F7xx_HAL_VERSION;
}
 8001d3c:	4800      	ldr	r0, [pc, #0]	; (8001d40 <HAL_GetHalVersion+0x4>)
 8001d3e:	4770      	bx	lr
 8001d40:	01030000 	.word	0x01030000

08001d44 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16U);
 8001d44:	4b01      	ldr	r3, [pc, #4]	; (8001d4c <HAL_GetREVID+0x8>)
 8001d46:	6818      	ldr	r0, [r3, #0]
}
 8001d48:	0c00      	lsrs	r0, r0, #16
 8001d4a:	4770      	bx	lr
 8001d4c:	e0042000 	.word	0xe0042000

08001d50 <HAL_GetDEVID>:
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
   return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 8001d50:	4b02      	ldr	r3, [pc, #8]	; (8001d5c <HAL_GetDEVID+0xc>)
 8001d52:	6818      	ldr	r0, [r3, #0]
}
 8001d54:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8001d58:	4770      	bx	lr
 8001d5a:	bf00      	nop
 8001d5c:	e0042000 	.word	0xe0042000

08001d60 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d60:	4907      	ldr	r1, [pc, #28]	; (8001d80 <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d62:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d64:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d66:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d6a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001d6e:	0412      	lsls	r2, r2, #16
 8001d70:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8001d7c:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001d7e:	4770      	bx	lr
 8001d80:	e000ed00 	.word	0xe000ed00

08001d84 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d84:	4b16      	ldr	r3, [pc, #88]	; (8001de0 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d86:	b530      	push	{r4, r5, lr}
 8001d88:	68dc      	ldr	r4, [r3, #12]
 8001d8a:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d8e:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d92:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d94:	2d04      	cmp	r5, #4
 8001d96:	bf28      	it	cs
 8001d98:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d9a:	2b06      	cmp	r3, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d9c:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001da0:	bf8c      	ite	hi
 8001da2:	3c03      	subhi	r4, #3
 8001da4:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001da6:	fa03 f505 	lsl.w	r5, r3, r5
  if ((int32_t)(IRQn) >= 0)
 8001daa:	2800      	cmp	r0, #0
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001dac:	fa03 f304 	lsl.w	r3, r3, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001db0:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001db4:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001db8:	fa01 f104 	lsl.w	r1, r1, r4
 8001dbc:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dc0:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8001dc4:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8001dc6:	db06      	blt.n	8001dd6 <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dc8:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8001dcc:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8001dd0:	f880 3300 	strb.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001dd4:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dd6:	f000 000f 	and.w	r0, r0, #15
 8001dda:	4a02      	ldr	r2, [pc, #8]	; (8001de4 <HAL_NVIC_SetPriority+0x60>)
 8001ddc:	5413      	strb	r3, [r2, r0]
 8001dde:	e7f9      	b.n	8001dd4 <HAL_NVIC_SetPriority+0x50>
 8001de0:	e000ed00 	.word	0xe000ed00
 8001de4:	e000ed14 	.word	0xe000ed14

08001de8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001de8:	2800      	cmp	r0, #0
 8001dea:	db08      	blt.n	8001dfe <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dec:	0942      	lsrs	r2, r0, #5
 8001dee:	2301      	movs	r3, #1
 8001df0:	f000 001f 	and.w	r0, r0, #31
 8001df4:	fa03 f000 	lsl.w	r0, r3, r0
 8001df8:	4b01      	ldr	r3, [pc, #4]	; (8001e00 <HAL_NVIC_EnableIRQ+0x18>)
 8001dfa:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001dfe:	4770      	bx	lr
 8001e00:	e000e100 	.word	0xe000e100

08001e04 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e04:	3801      	subs	r0, #1
 8001e06:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001e0a:	d20b      	bcs.n	8001e24 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e0c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e10:	4a05      	ldr	r2, [pc, #20]	; (8001e28 <HAL_SYSTICK_Config+0x24>)
 8001e12:	21f0      	movs	r1, #240	; 0xf0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e14:	6158      	str	r0, [r3, #20]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e16:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e18:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e1c:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e1e:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e20:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e22:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001e24:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001e26:	4770      	bx	lr
 8001e28:	e000ed00 	.word	0xe000ed00

08001e2c <HAL_MPU_Disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001e2c:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001e30:	4b04      	ldr	r3, [pc, #16]	; (8001e44 <HAL_MPU_Disable+0x18>)
 8001e32:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e34:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001e38:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 8001e40:	4770      	bx	lr
 8001e42:	bf00      	nop
 8001e44:	e000ed00 	.word	0xe000ed00

08001e48 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001e48:	4b06      	ldr	r3, [pc, #24]	; (8001e64 <HAL_MPU_Enable+0x1c>)
 8001e4a:	f040 0001 	orr.w	r0, r0, #1
 8001e4e:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001e52:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e54:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001e58:	625a      	str	r2, [r3, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001e5a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001e5e:	f3bf 8f6f 	isb	sy
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001e62:	4770      	bx	lr
 8001e64:	e000ed00 	.word	0xe000ed00

08001e68 <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001e68:	7843      	ldrb	r3, [r0, #1]
 8001e6a:	4a14      	ldr	r2, [pc, #80]	; (8001ebc <HAL_MPU_ConfigRegion+0x54>)
{
 8001e6c:	b510      	push	{r4, lr}
  MPU->RNR = MPU_Init->Number;
 8001e6e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  if ((MPU_Init->Enable) != RESET)
 8001e72:	7801      	ldrb	r1, [r0, #0]
 8001e74:	b1e9      	cbz	r1, 8001eb2 <HAL_MPU_ConfigRegion+0x4a>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 8001e76:	6843      	ldr	r3, [r0, #4]
 8001e78:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001e7c:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001e7e:	7b04      	ldrb	r4, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001e80:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001e82:	ea43 7304 	orr.w	r3, r3, r4, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001e86:	430b      	orrs	r3, r1
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001e88:	7a81      	ldrb	r1, [r0, #10]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001e8a:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001e8e:	7b41      	ldrb	r1, [r0, #13]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001e90:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001e94:	7b81      	ldrb	r1, [r0, #14]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001e96:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001e9a:	7bc1      	ldrb	r1, [r0, #15]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001e9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001ea0:	7a41      	ldrb	r1, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001ea2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001ea6:	7a01      	ldrb	r1, [r0, #8]
 8001ea8:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001eac:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8001eb0:	bd10      	pop	{r4, pc}
    MPU->RBAR = 0x00;
 8001eb2:	f8c2 109c 	str.w	r1, [r2, #156]	; 0x9c
    MPU->RASR = 0x00;
 8001eb6:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
}
 8001eba:	e7f9      	b.n	8001eb0 <HAL_MPU_ConfigRegion+0x48>
 8001ebc:	e000ed00 	.word	0xe000ed00

08001ec0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001ec0:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001ec2:	4604      	mov	r4, r0
 8001ec4:	b908      	cbnz	r0, 8001eca <HAL_CRC_Init+0xa>
  {
    return HAL_ERROR;
 8001ec6:	2001      	movs	r0, #1
  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 8001ec8:	bd10      	pop	{r4, pc}
  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001eca:	7f43      	ldrb	r3, [r0, #29]
 8001ecc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001ed0:	b913      	cbnz	r3, 8001ed8 <HAL_CRC_Init+0x18>
    hcrc->Lock = HAL_UNLOCKED;
 8001ed2:	7702      	strb	r2, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 8001ed4:	f7ff fca6 	bl	8001824 <HAL_CRC_MspInit>
  hcrc->State = HAL_CRC_STATE_BUSY;
 8001ed8:	2302      	movs	r3, #2
 8001eda:	7763      	strb	r3, [r4, #29]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8001edc:	7923      	ldrb	r3, [r4, #4]
 8001ede:	b9e3      	cbnz	r3, 8001f1a <HAL_CRC_Init+0x5a>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8001ee0:	6823      	ldr	r3, [r4, #0]
 8001ee2:	4a13      	ldr	r2, [pc, #76]	; (8001f30 <HAL_CRC_Init+0x70>)
 8001ee4:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8001ee6:	689a      	ldr	r2, [r3, #8]
 8001ee8:	f022 0218 	bic.w	r2, r2, #24
 8001eec:	609a      	str	r2, [r3, #8]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8001eee:	7962      	ldrb	r2, [r4, #5]
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8001ef0:	6823      	ldr	r3, [r4, #0]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8001ef2:	b9d2      	cbnz	r2, 8001f2a <HAL_CRC_Init+0x6a>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8001ef4:	f04f 32ff 	mov.w	r2, #4294967295
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8001ef8:	611a      	str	r2, [r3, #16]
  return HAL_OK;
 8001efa:	2000      	movs	r0, #0
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001efc:	689a      	ldr	r2, [r3, #8]
 8001efe:	6961      	ldr	r1, [r4, #20]
 8001f00:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001f04:	430a      	orrs	r2, r1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8001f06:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001f08:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8001f0a:	689a      	ldr	r2, [r3, #8]
 8001f0c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f10:	430a      	orrs	r2, r1
 8001f12:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 8001f14:	2301      	movs	r3, #1
 8001f16:	7763      	strb	r3, [r4, #29]
  return HAL_OK;
 8001f18:	e7d6      	b.n	8001ec8 <HAL_CRC_Init+0x8>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8001f1a:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8001f1e:	4620      	mov	r0, r4
 8001f20:	f000 f808 	bl	8001f34 <HAL_CRCEx_Polynomial_Set>
 8001f24:	2800      	cmp	r0, #0
 8001f26:	d0e2      	beq.n	8001eee <HAL_CRC_Init+0x2e>
 8001f28:	e7cd      	b.n	8001ec6 <HAL_CRC_Init+0x6>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8001f2a:	6922      	ldr	r2, [r4, #16]
 8001f2c:	e7e4      	b.n	8001ef8 <HAL_CRC_Init+0x38>
 8001f2e:	bf00      	nop
 8001f30:	04c11db7 	.word	0x04c11db7

08001f34 <HAL_CRCEx_Polynomial_Set>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8001f34:	231f      	movs	r3, #31
{
 8001f36:	b510      	push	{r4, lr}
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8001f38:	3b01      	subs	r3, #1
 8001f3a:	d31c      	bcc.n	8001f76 <HAL_CRCEx_Polynomial_Set+0x42>
 8001f3c:	fa21 f403 	lsr.w	r4, r1, r3
 8001f40:	07e4      	lsls	r4, r4, #31
 8001f42:	d5f9      	bpl.n	8001f38 <HAL_CRCEx_Polynomial_Set+0x4>
  {
  }

  switch (PolyLength)
 8001f44:	2a10      	cmp	r2, #16
 8001f46:	d012      	beq.n	8001f6e <HAL_CRCEx_Polynomial_Set+0x3a>
 8001f48:	d804      	bhi.n	8001f54 <HAL_CRCEx_Polynomial_Set+0x20>
 8001f4a:	b13a      	cbz	r2, 8001f5c <HAL_CRCEx_Polynomial_Set+0x28>
 8001f4c:	2a08      	cmp	r2, #8
 8001f4e:	d010      	beq.n	8001f72 <HAL_CRCEx_Polynomial_Set+0x3e>
      }
      break;
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
      {
        status =   HAL_ERROR;
 8001f50:	2001      	movs	r0, #1

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
 8001f52:	e00b      	b.n	8001f6c <HAL_CRCEx_Polynomial_Set+0x38>
  switch (PolyLength)
 8001f54:	2a18      	cmp	r2, #24
 8001f56:	d1fb      	bne.n	8001f50 <HAL_CRCEx_Polynomial_Set+0x1c>
      if (msb >= HAL_CRC_LENGTH_7B)
 8001f58:	2b06      	cmp	r3, #6
      if (msb >= HAL_CRC_LENGTH_16B)
 8001f5a:	d8f9      	bhi.n	8001f50 <HAL_CRCEx_Polynomial_Set+0x1c>
    WRITE_REG(hcrc->Instance->POL, Pol);
 8001f5c:	6800      	ldr	r0, [r0, #0]
 8001f5e:	6141      	str	r1, [r0, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8001f60:	6883      	ldr	r3, [r0, #8]
 8001f62:	f023 0318 	bic.w	r3, r3, #24
 8001f66:	431a      	orrs	r2, r3
 8001f68:	6082      	str	r2, [r0, #8]
 8001f6a:	2000      	movs	r0, #0
}
 8001f6c:	bd10      	pop	{r4, pc}
      if (msb >= HAL_CRC_LENGTH_8B)
 8001f6e:	2b07      	cmp	r3, #7
 8001f70:	e7f3      	b.n	8001f5a <HAL_CRCEx_Polynomial_Set+0x26>
      if (msb >= HAL_CRC_LENGTH_16B)
 8001f72:	2b0f      	cmp	r3, #15
 8001f74:	e7f1      	b.n	8001f5a <HAL_CRCEx_Polynomial_Set+0x26>
  switch (PolyLength)
 8001f76:	2a00      	cmp	r2, #0
 8001f78:	d1ea      	bne.n	8001f50 <HAL_CRCEx_Polynomial_Set+0x1c>
 8001f7a:	e7ef      	b.n	8001f5c <HAL_CRCEx_Polynomial_Set+0x28>

08001f7c <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001f7c:	6803      	ldr	r3, [r0, #0]
{
 8001f7e:	4602      	mov	r2, r0
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001f80:	2018      	movs	r0, #24
 8001f82:	b2d9      	uxtb	r1, r3
 8001f84:	3910      	subs	r1, #16
 8001f86:	fbb1 f0f0 	udiv	r0, r1, r0
{
 8001f8a:	b510      	push	{r4, lr}
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001f8c:	4c05      	ldr	r4, [pc, #20]	; (8001fa4 <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 8001f8e:	295f      	cmp	r1, #95	; 0x5f
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001f90:	5c20      	ldrb	r0, [r4, r0]
 8001f92:	65d0      	str	r0, [r2, #92]	; 0x5c
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001f94:	f423 707f 	bic.w	r0, r3, #1020	; 0x3fc
 8001f98:	f020 0003 	bic.w	r0, r0, #3
 8001f9c:	bf88      	it	hi
 8001f9e:	3004      	addhi	r0, #4
 8001fa0:	6590      	str	r0, [r2, #88]	; 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 8001fa2:	bd10      	pop	{r4, pc}
 8001fa4:	0800d314 	.word	0x0800d314

08001fa8 <HAL_DMA_Init>:
{
 8001fa8:	b570      	push	{r4, r5, r6, lr}
 8001faa:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001fac:	f7ff feae 	bl	8001d0c <HAL_GetTick>
 8001fb0:	4605      	mov	r5, r0
  if(hdma == NULL)
 8001fb2:	2c00      	cmp	r4, #0
 8001fb4:	d073      	beq.n	800209e <HAL_DMA_Init+0xf6>
  hdma->State = HAL_DMA_STATE_BUSY;
 8001fb6:	2302      	movs	r3, #2
  __HAL_DMA_DISABLE(hdma);
 8001fb8:	6822      	ldr	r2, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 8001fba:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_UNLOCK(hdma);
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 8001fc4:	6813      	ldr	r3, [r2, #0]
 8001fc6:	f023 0301 	bic.w	r3, r3, #1
 8001fca:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fcc:	6821      	ldr	r1, [r4, #0]
 8001fce:	680b      	ldr	r3, [r1, #0]
 8001fd0:	07d8      	lsls	r0, r3, #31
 8001fd2:	d42f      	bmi.n	8002034 <HAL_DMA_Init+0x8c>
  tmp = hdma->Instance->CR;
 8001fd4:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001fd6:	4d33      	ldr	r5, [pc, #204]	; (80020a4 <HAL_DMA_Init+0xfc>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fd8:	69a0      	ldr	r0, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001fda:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001fdc:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	68e2      	ldr	r2, [r4, #12]
 8001fe4:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fe6:	6922      	ldr	r2, [r4, #16]
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	6962      	ldr	r2, [r4, #20]
 8001fec:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fee:	69e2      	ldr	r2, [r4, #28]
 8001ff0:	4303      	orrs	r3, r0
 8001ff2:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ff4:	6a22      	ldr	r2, [r4, #32]
 8001ff6:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ff8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001ffa:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ffc:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002000:	bf02      	ittt	eq
 8002002:	e9d4 560b 	ldrdeq	r5, r6, [r4, #44]	; 0x2c
 8002006:	4335      	orreq	r5, r6
 8002008:	432b      	orreq	r3, r5
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800200a:	2a04      	cmp	r2, #4
  hdma->Instance->CR = tmp;  
 800200c:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 800200e:	694b      	ldr	r3, [r1, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002010:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 8002014:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002018:	d133      	bne.n	8002082 <HAL_DMA_Init+0xda>
    tmp |= hdma->Init.FIFOThreshold;
 800201a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800201c:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 800201e:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002020:	b37d      	cbz	r5, 8002082 <HAL_DMA_Init+0xda>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002022:	b990      	cbnz	r0, 800204a <HAL_DMA_Init+0xa2>
  {
    switch (tmp)
 8002024:	2a01      	cmp	r2, #1
 8002026:	d021      	beq.n	800206c <HAL_DMA_Init+0xc4>
 8002028:	f032 0202 	bics.w	r2, r2, #2
 800202c:	d129      	bne.n	8002082 <HAL_DMA_Init+0xda>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800202e:	01ea      	lsls	r2, r5, #7
 8002030:	d527      	bpl.n	8002082 <HAL_DMA_Init+0xda>
 8002032:	e01e      	b.n	8002072 <HAL_DMA_Init+0xca>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002034:	f7ff fe6a 	bl	8001d0c <HAL_GetTick>
 8002038:	1b40      	subs	r0, r0, r5
 800203a:	2805      	cmp	r0, #5
 800203c:	d9c6      	bls.n	8001fcc <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800203e:	2320      	movs	r3, #32
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002040:	2003      	movs	r0, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002042:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8002044:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8002048:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800204a:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 800204e:	d114      	bne.n	800207a <HAL_DMA_Init+0xd2>
    switch (tmp)
 8002050:	2a03      	cmp	r2, #3
 8002052:	d816      	bhi.n	8002082 <HAL_DMA_Init+0xda>
 8002054:	a001      	add	r0, pc, #4	; (adr r0, 800205c <HAL_DMA_Init+0xb4>)
 8002056:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 800205a:	bf00      	nop
 800205c:	08002073 	.word	0x08002073
 8002060:	0800202f 	.word	0x0800202f
 8002064:	08002073 	.word	0x08002073
 8002068:	0800206d 	.word	0x0800206d
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800206c:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8002070:	d107      	bne.n	8002082 <HAL_DMA_Init+0xda>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002072:	2340      	movs	r3, #64	; 0x40
        hdma->State = HAL_DMA_STATE_READY;
 8002074:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002076:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8002078:	e7e4      	b.n	8002044 <HAL_DMA_Init+0x9c>
    switch (tmp)
 800207a:	2a02      	cmp	r2, #2
 800207c:	d9f9      	bls.n	8002072 <HAL_DMA_Init+0xca>
 800207e:	2a03      	cmp	r2, #3
 8002080:	d0d5      	beq.n	800202e <HAL_DMA_Init+0x86>
  hdma->Instance->FCR = tmp;
 8002082:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002084:	4620      	mov	r0, r4
 8002086:	f7ff ff79 	bl	8001f7c <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800208a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800208c:	233f      	movs	r3, #63	; 0x3f
 800208e:	4093      	lsls	r3, r2
 8002090:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002092:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8002094:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002096:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8002098:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 800209c:	e7d4      	b.n	8002048 <HAL_DMA_Init+0xa0>
    return HAL_ERROR;
 800209e:	2001      	movs	r0, #1
 80020a0:	e7d2      	b.n	8002048 <HAL_DMA_Init+0xa0>
 80020a2:	bf00      	nop
 80020a4:	f010803f 	.word	0xf010803f

080020a8 <HAL_DMA_DeInit>:
{
 80020a8:	b538      	push	{r3, r4, r5, lr}
  if(hdma == NULL)
 80020aa:	4605      	mov	r5, r0
 80020ac:	b320      	cbz	r0, 80020f8 <HAL_DMA_DeInit+0x50>
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80020ae:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80020b2:	2b02      	cmp	r3, #2
 80020b4:	b2dc      	uxtb	r4, r3
 80020b6:	d01d      	beq.n	80020f4 <HAL_DMA_DeInit+0x4c>
  __HAL_DMA_DISABLE(hdma);
 80020b8:	6803      	ldr	r3, [r0, #0]
  hdma->Instance->CR   = 0U;
 80020ba:	2400      	movs	r4, #0
  __HAL_DMA_DISABLE(hdma);
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	f022 0201 	bic.w	r2, r2, #1
 80020c2:	601a      	str	r2, [r3, #0]
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 80020c4:	2221      	movs	r2, #33	; 0x21
  hdma->Instance->CR   = 0U;
 80020c6:	601c      	str	r4, [r3, #0]
  hdma->Instance->NDTR = 0U;
 80020c8:	605c      	str	r4, [r3, #4]
  hdma->Instance->PAR  = 0U;
 80020ca:	609c      	str	r4, [r3, #8]
  hdma->Instance->M0AR = 0U;
 80020cc:	60dc      	str	r4, [r3, #12]
  hdma->Instance->M1AR = 0U;
 80020ce:	611c      	str	r4, [r3, #16]
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 80020d0:	615a      	str	r2, [r3, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80020d2:	f7ff ff53 	bl	8001f7c <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020d6:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 80020d8:	233f      	movs	r3, #63	; 0x3f
 80020da:	4093      	lsls	r3, r2
 80020dc:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020de:	656c      	str	r4, [r5, #84]	; 0x54
  __HAL_UNLOCK(hdma);
 80020e0:	f885 4034 	strb.w	r4, [r5, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_RESET;
 80020e4:	f885 4035 	strb.w	r4, [r5, #53]	; 0x35
  hdma->XferHalfCpltCallback = NULL;
 80020e8:	e9c5 440f 	strd	r4, r4, [r5, #60]	; 0x3c
  hdma->XferM1HalfCpltCallback = NULL;
 80020ec:	e9c5 4411 	strd	r4, r4, [r5, #68]	; 0x44
  hdma->XferAbortCallback = NULL;  
 80020f0:	e9c5 4413 	strd	r4, r4, [r5, #76]	; 0x4c
}
 80020f4:	4620      	mov	r0, r4
 80020f6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80020f8:	2401      	movs	r4, #1
 80020fa:	e7fb      	b.n	80020f4 <HAL_DMA_DeInit+0x4c>

080020fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002100:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002102:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 80022c0 <HAL_GPIO_Init+0x1c4>
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002106:	4a6c      	ldr	r2, [pc, #432]	; (80022b8 <HAL_GPIO_Init+0x1bc>)
    ioposition = ((uint32_t)0x01) << position;
 8002108:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800210a:	680d      	ldr	r5, [r1, #0]
    ioposition = ((uint32_t)0x01) << position;
 800210c:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800210e:	ea04 0c05 	and.w	ip, r4, r5
    if(iocurrent == ioposition)
 8002112:	43ac      	bics	r4, r5
 8002114:	f040 80b6 	bne.w	8002284 <HAL_GPIO_Init+0x188>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002118:	684d      	ldr	r5, [r1, #4]
 800211a:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800211e:	2603      	movs	r6, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002120:	f005 0403 	and.w	r4, r5, #3
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002124:	fa06 f608 	lsl.w	r6, r6, r8
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002128:	1e67      	subs	r7, r4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800212a:	43f6      	mvns	r6, r6
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800212c:	2f01      	cmp	r7, #1
 800212e:	d834      	bhi.n	800219a <HAL_GPIO_Init+0x9e>
        temp = GPIOx->OSPEEDR; 
 8002130:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002132:	ea07 0e06 	and.w	lr, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2));
 8002136:	68cf      	ldr	r7, [r1, #12]
 8002138:	fa07 f708 	lsl.w	r7, r7, r8
 800213c:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 8002140:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8002142:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002144:	ea27 0e0c 	bic.w	lr, r7, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002148:	f3c5 1700 	ubfx	r7, r5, #4, #1
 800214c:	409f      	lsls	r7, r3
 800214e:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8002152:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8002154:	68c7      	ldr	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002156:	2c02      	cmp	r4, #2
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002158:	ea07 0e06 	and.w	lr, r7, r6
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800215c:	688f      	ldr	r7, [r1, #8]
 800215e:	fa07 f708 	lsl.w	r7, r7, r8
 8002162:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->PUPDR = temp;
 8002166:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002168:	d119      	bne.n	800219e <HAL_GPIO_Init+0xa2>
        temp = GPIOx->AFR[position >> 3];
 800216a:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800216e:	f003 0b07 	and.w	fp, r3, #7
 8002172:	f04f 0e0f 	mov.w	lr, #15
 8002176:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 800217a:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3];
 800217e:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002182:	fa0e fe0b 	lsl.w	lr, lr, fp
 8002186:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800218a:	690f      	ldr	r7, [r1, #16]
 800218c:	fa07 f70b 	lsl.w	r7, r7, fp
 8002190:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3] = temp;
 8002194:	f8ca 7020 	str.w	r7, [sl, #32]
 8002198:	e001      	b.n	800219e <HAL_GPIO_Init+0xa2>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800219a:	2c03      	cmp	r4, #3
 800219c:	d1da      	bne.n	8002154 <HAL_GPIO_Init+0x58>
      temp = GPIOx->MODER;
 800219e:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80021a0:	fa04 f408 	lsl.w	r4, r4, r8
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80021a4:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80021a8:	ea06 0607 	and.w	r6, r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80021ac:	ea46 0604 	orr.w	r6, r6, r4
      GPIOx->MODER = temp;
 80021b0:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80021b2:	d067      	beq.n	8002284 <HAL_GPIO_Init+0x188>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021b4:	f8d9 4044 	ldr.w	r4, [r9, #68]	; 0x44
 80021b8:	f023 0603 	bic.w	r6, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80021bc:	f003 0703 	and.w	r7, r3, #3
 80021c0:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021c4:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 80021c8:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80021cc:	00bf      	lsls	r7, r7, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021ce:	f8c9 4044 	str.w	r4, [r9, #68]	; 0x44
 80021d2:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
 80021d6:	f8d9 4044 	ldr.w	r4, [r9, #68]	; 0x44
 80021da:	f404 4480 	and.w	r4, r4, #16384	; 0x4000
 80021de:	9401      	str	r4, [sp, #4]
 80021e0:	9c01      	ldr	r4, [sp, #4]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80021e2:	fa0e f407 	lsl.w	r4, lr, r7
        temp = SYSCFG->EXTICR[position >> 2];
 80021e6:	f8d6 8008 	ldr.w	r8, [r6, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80021ea:	ea28 0e04 	bic.w	lr, r8, r4
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80021ee:	4c33      	ldr	r4, [pc, #204]	; (80022bc <HAL_GPIO_Init+0x1c0>)
 80021f0:	42a0      	cmp	r0, r4
 80021f2:	d04e      	beq.n	8002292 <HAL_GPIO_Init+0x196>
 80021f4:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80021f8:	42a0      	cmp	r0, r4
 80021fa:	d04c      	beq.n	8002296 <HAL_GPIO_Init+0x19a>
 80021fc:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002200:	42a0      	cmp	r0, r4
 8002202:	d04a      	beq.n	800229a <HAL_GPIO_Init+0x19e>
 8002204:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002208:	42a0      	cmp	r0, r4
 800220a:	d048      	beq.n	800229e <HAL_GPIO_Init+0x1a2>
 800220c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002210:	42a0      	cmp	r0, r4
 8002212:	d046      	beq.n	80022a2 <HAL_GPIO_Init+0x1a6>
 8002214:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002218:	42a0      	cmp	r0, r4
 800221a:	d044      	beq.n	80022a6 <HAL_GPIO_Init+0x1aa>
 800221c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002220:	42a0      	cmp	r0, r4
 8002222:	d042      	beq.n	80022aa <HAL_GPIO_Init+0x1ae>
 8002224:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002228:	42a0      	cmp	r0, r4
 800222a:	d040      	beq.n	80022ae <HAL_GPIO_Init+0x1b2>
 800222c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002230:	42a0      	cmp	r0, r4
 8002232:	d03e      	beq.n	80022b2 <HAL_GPIO_Init+0x1b6>
 8002234:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002238:	42a0      	cmp	r0, r4
 800223a:	bf0c      	ite	eq
 800223c:	2409      	moveq	r4, #9
 800223e:	240a      	movne	r4, #10
 8002240:	40bc      	lsls	r4, r7
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002242:	02ef      	lsls	r7, r5, #11
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002244:	ea44 040e 	orr.w	r4, r4, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 8002248:	60b4      	str	r4, [r6, #8]
        temp &= ~((uint32_t)iocurrent);
 800224a:	ea6f 060c 	mvn.w	r6, ip
        temp = EXTI->RTSR;
 800224e:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8002250:	bf54      	ite	pl
 8002252:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8002254:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002258:	02af      	lsls	r7, r5, #10
        EXTI->RTSR = temp;
 800225a:	6094      	str	r4, [r2, #8]
        temp = EXTI->FTSR;
 800225c:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 800225e:	bf54      	ite	pl
 8002260:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8002262:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->FTSR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002266:	03af      	lsls	r7, r5, #14
        EXTI->FTSR = temp;
 8002268:	60d4      	str	r4, [r2, #12]
        temp = EXTI->EMR;
 800226a:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 800226c:	bf54      	ite	pl
 800226e:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8002270:	ea4c 0404 	orrmi.w	r4, ip, r4
        EXTI->EMR = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002274:	03ed      	lsls	r5, r5, #15
        EXTI->EMR = temp;
 8002276:	6054      	str	r4, [r2, #4]
        temp = EXTI->IMR;
 8002278:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 800227a:	bf54      	ite	pl
 800227c:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 800227e:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->IMR = temp;
 8002282:	6014      	str	r4, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002284:	3301      	adds	r3, #1
 8002286:	2b10      	cmp	r3, #16
 8002288:	f47f af3e 	bne.w	8002108 <HAL_GPIO_Init+0xc>
      }
    }
  }
}
 800228c:	b003      	add	sp, #12
 800228e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002292:	2400      	movs	r4, #0
 8002294:	e7d4      	b.n	8002240 <HAL_GPIO_Init+0x144>
 8002296:	2401      	movs	r4, #1
 8002298:	e7d2      	b.n	8002240 <HAL_GPIO_Init+0x144>
 800229a:	2402      	movs	r4, #2
 800229c:	e7d0      	b.n	8002240 <HAL_GPIO_Init+0x144>
 800229e:	2403      	movs	r4, #3
 80022a0:	e7ce      	b.n	8002240 <HAL_GPIO_Init+0x144>
 80022a2:	2404      	movs	r4, #4
 80022a4:	e7cc      	b.n	8002240 <HAL_GPIO_Init+0x144>
 80022a6:	2405      	movs	r4, #5
 80022a8:	e7ca      	b.n	8002240 <HAL_GPIO_Init+0x144>
 80022aa:	2406      	movs	r4, #6
 80022ac:	e7c8      	b.n	8002240 <HAL_GPIO_Init+0x144>
 80022ae:	2407      	movs	r4, #7
 80022b0:	e7c6      	b.n	8002240 <HAL_GPIO_Init+0x144>
 80022b2:	2408      	movs	r4, #8
 80022b4:	e7c4      	b.n	8002240 <HAL_GPIO_Init+0x144>
 80022b6:	bf00      	nop
 80022b8:	40013c00 	.word	0x40013c00
 80022bc:	40020000 	.word	0x40020000
 80022c0:	40023800 	.word	0x40023800

080022c4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80022c4:	b10a      	cbz	r2, 80022ca <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80022c6:	6181      	str	r1, [r0, #24]
  }
}
 80022c8:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80022ca:	0409      	lsls	r1, r1, #16
 80022cc:	e7fb      	b.n	80022c6 <HAL_GPIO_WritePin+0x2>
	...

080022d0 <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 80022d0:	4b19      	ldr	r3, [pc, #100]	; (8002338 <HAL_PWREx_EnableOverDrive+0x68>)
{
 80022d2:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 80022d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80022d6:	4c19      	ldr	r4, [pc, #100]	; (800233c <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80022d8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80022dc:	641a      	str	r2, [r3, #64]	; 0x40
 80022de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022e4:	9301      	str	r3, [sp, #4]
 80022e6:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 80022e8:	6823      	ldr	r3, [r4, #0]
 80022ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022ee:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80022f0:	f7ff fd0c 	bl	8001d0c <HAL_GetTick>
 80022f4:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80022f6:	6863      	ldr	r3, [r4, #4]
 80022f8:	03da      	lsls	r2, r3, #15
 80022fa:	d50c      	bpl.n	8002316 <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80022fc:	6823      	ldr	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80022fe:	4d0f      	ldr	r5, [pc, #60]	; (800233c <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002300:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002304:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8002306:	f7ff fd01 	bl	8001d0c <HAL_GetTick>
 800230a:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800230c:	686b      	ldr	r3, [r5, #4]
 800230e:	039b      	lsls	r3, r3, #14
 8002310:	d50a      	bpl.n	8002328 <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8002312:	2000      	movs	r0, #0
 8002314:	e006      	b.n	8002324 <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002316:	f7ff fcf9 	bl	8001d0c <HAL_GetTick>
 800231a:	1b40      	subs	r0, r0, r5
 800231c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002320:	d9e9      	bls.n	80022f6 <HAL_PWREx_EnableOverDrive+0x26>
      return HAL_TIMEOUT;
 8002322:	2003      	movs	r0, #3
}
 8002324:	b003      	add	sp, #12
 8002326:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002328:	f7ff fcf0 	bl	8001d0c <HAL_GetTick>
 800232c:	1b00      	subs	r0, r0, r4
 800232e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002332:	d9eb      	bls.n	800230c <HAL_PWREx_EnableOverDrive+0x3c>
 8002334:	e7f5      	b.n	8002322 <HAL_PWREx_EnableOverDrive+0x52>
 8002336:	bf00      	nop
 8002338:	40023800 	.word	0x40023800
 800233c:	40007000 	.word	0x40007000

08002340 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002340:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002344:	4604      	mov	r4, r0
 8002346:	b340      	cbz	r0, 800239a <HAL_RCC_OscConfig+0x5a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002348:	6803      	ldr	r3, [r0, #0]
 800234a:	07db      	lsls	r3, r3, #31
 800234c:	d410      	bmi.n	8002370 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800234e:	6823      	ldr	r3, [r4, #0]
 8002350:	079f      	lsls	r7, r3, #30
 8002352:	d464      	bmi.n	800241e <HAL_RCC_OscConfig+0xde>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002354:	6823      	ldr	r3, [r4, #0]
 8002356:	0719      	lsls	r1, r3, #28
 8002358:	f100 80aa 	bmi.w	80024b0 <HAL_RCC_OscConfig+0x170>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800235c:	6823      	ldr	r3, [r4, #0]
 800235e:	075a      	lsls	r2, r3, #29
 8002360:	f100 80cb 	bmi.w	80024fa <HAL_RCC_OscConfig+0x1ba>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002364:	69a2      	ldr	r2, [r4, #24]
 8002366:	2a00      	cmp	r2, #0
 8002368:	f040 8134 	bne.w	80025d4 <HAL_RCC_OscConfig+0x294>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 800236c:	2000      	movs	r0, #0
 800236e:	e02b      	b.n	80023c8 <HAL_RCC_OscConfig+0x88>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002370:	4b96      	ldr	r3, [pc, #600]	; (80025cc <HAL_RCC_OscConfig+0x28c>)
 8002372:	689a      	ldr	r2, [r3, #8]
 8002374:	f002 020c 	and.w	r2, r2, #12
 8002378:	2a04      	cmp	r2, #4
 800237a:	d007      	beq.n	800238c <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800237c:	689a      	ldr	r2, [r3, #8]
 800237e:	f002 020c 	and.w	r2, r2, #12
 8002382:	2a08      	cmp	r2, #8
 8002384:	d10b      	bne.n	800239e <HAL_RCC_OscConfig+0x5e>
 8002386:	685a      	ldr	r2, [r3, #4]
 8002388:	0256      	lsls	r6, r2, #9
 800238a:	d508      	bpl.n	800239e <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800238c:	4b8f      	ldr	r3, [pc, #572]	; (80025cc <HAL_RCC_OscConfig+0x28c>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	039d      	lsls	r5, r3, #14
 8002392:	d5dc      	bpl.n	800234e <HAL_RCC_OscConfig+0xe>
 8002394:	6863      	ldr	r3, [r4, #4]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d1d9      	bne.n	800234e <HAL_RCC_OscConfig+0xe>
        return HAL_ERROR;
 800239a:	2001      	movs	r0, #1
 800239c:	e014      	b.n	80023c8 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800239e:	6862      	ldr	r2, [r4, #4]
 80023a0:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80023a4:	d113      	bne.n	80023ce <HAL_RCC_OscConfig+0x8e>
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80023ac:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80023ae:	f7ff fcad 	bl	8001d0c <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023b2:	4e86      	ldr	r6, [pc, #536]	; (80025cc <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 80023b4:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023b6:	6833      	ldr	r3, [r6, #0]
 80023b8:	0398      	lsls	r0, r3, #14
 80023ba:	d4c8      	bmi.n	800234e <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023bc:	f7ff fca6 	bl	8001d0c <HAL_GetTick>
 80023c0:	1b40      	subs	r0, r0, r5
 80023c2:	2864      	cmp	r0, #100	; 0x64
 80023c4:	d9f7      	bls.n	80023b6 <HAL_RCC_OscConfig+0x76>
            return HAL_TIMEOUT;
 80023c6:	2003      	movs	r0, #3
}
 80023c8:	b002      	add	sp, #8
 80023ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023ce:	4d7f      	ldr	r5, [pc, #508]	; (80025cc <HAL_RCC_OscConfig+0x28c>)
 80023d0:	682b      	ldr	r3, [r5, #0]
 80023d2:	b992      	cbnz	r2, 80023fa <HAL_RCC_OscConfig+0xba>
 80023d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023d8:	602b      	str	r3, [r5, #0]
 80023da:	682b      	ldr	r3, [r5, #0]
 80023dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023e0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80023e2:	f7ff fc93 	bl	8001d0c <HAL_GetTick>
 80023e6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023e8:	682b      	ldr	r3, [r5, #0]
 80023ea:	0399      	lsls	r1, r3, #14
 80023ec:	d5af      	bpl.n	800234e <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023ee:	f7ff fc8d 	bl	8001d0c <HAL_GetTick>
 80023f2:	1b80      	subs	r0, r0, r6
 80023f4:	2864      	cmp	r0, #100	; 0x64
 80023f6:	d9f7      	bls.n	80023e8 <HAL_RCC_OscConfig+0xa8>
 80023f8:	e7e5      	b.n	80023c6 <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023fa:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 80023fe:	d107      	bne.n	8002410 <HAL_RCC_OscConfig+0xd0>
 8002400:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002404:	602b      	str	r3, [r5, #0]
 8002406:	682b      	ldr	r3, [r5, #0]
 8002408:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800240c:	602b      	str	r3, [r5, #0]
 800240e:	e7ce      	b.n	80023ae <HAL_RCC_OscConfig+0x6e>
 8002410:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002414:	602b      	str	r3, [r5, #0]
 8002416:	682b      	ldr	r3, [r5, #0]
 8002418:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800241c:	e7f6      	b.n	800240c <HAL_RCC_OscConfig+0xcc>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800241e:	4b6b      	ldr	r3, [pc, #428]	; (80025cc <HAL_RCC_OscConfig+0x28c>)
 8002420:	689a      	ldr	r2, [r3, #8]
 8002422:	f012 0f0c 	tst.w	r2, #12
 8002426:	d007      	beq.n	8002438 <HAL_RCC_OscConfig+0xf8>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002428:	689a      	ldr	r2, [r3, #8]
 800242a:	f002 020c 	and.w	r2, r2, #12
 800242e:	2a08      	cmp	r2, #8
 8002430:	d111      	bne.n	8002456 <HAL_RCC_OscConfig+0x116>
 8002432:	685a      	ldr	r2, [r3, #4]
 8002434:	0252      	lsls	r2, r2, #9
 8002436:	d40e      	bmi.n	8002456 <HAL_RCC_OscConfig+0x116>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002438:	4a64      	ldr	r2, [pc, #400]	; (80025cc <HAL_RCC_OscConfig+0x28c>)
 800243a:	6813      	ldr	r3, [r2, #0]
 800243c:	079b      	lsls	r3, r3, #30
 800243e:	d502      	bpl.n	8002446 <HAL_RCC_OscConfig+0x106>
 8002440:	68e3      	ldr	r3, [r4, #12]
 8002442:	2b01      	cmp	r3, #1
 8002444:	d1a9      	bne.n	800239a <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002446:	6813      	ldr	r3, [r2, #0]
 8002448:	6921      	ldr	r1, [r4, #16]
 800244a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800244e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002452:	6013      	str	r3, [r2, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002454:	e77e      	b.n	8002354 <HAL_RCC_OscConfig+0x14>
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002456:	68e2      	ldr	r2, [r4, #12]
 8002458:	b1c2      	cbz	r2, 800248c <HAL_RCC_OscConfig+0x14c>
        __HAL_RCC_HSI_ENABLE();
 800245a:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800245c:	4d5b      	ldr	r5, [pc, #364]	; (80025cc <HAL_RCC_OscConfig+0x28c>)
        __HAL_RCC_HSI_ENABLE();
 800245e:	f042 0201 	orr.w	r2, r2, #1
 8002462:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002464:	f7ff fc52 	bl	8001d0c <HAL_GetTick>
 8002468:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800246a:	682b      	ldr	r3, [r5, #0]
 800246c:	079f      	lsls	r7, r3, #30
 800246e:	d507      	bpl.n	8002480 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002470:	682b      	ldr	r3, [r5, #0]
 8002472:	6922      	ldr	r2, [r4, #16]
 8002474:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002478:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800247c:	602b      	str	r3, [r5, #0]
 800247e:	e769      	b.n	8002354 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002480:	f7ff fc44 	bl	8001d0c <HAL_GetTick>
 8002484:	1b80      	subs	r0, r0, r6
 8002486:	2802      	cmp	r0, #2
 8002488:	d9ef      	bls.n	800246a <HAL_RCC_OscConfig+0x12a>
 800248a:	e79c      	b.n	80023c6 <HAL_RCC_OscConfig+0x86>
        __HAL_RCC_HSI_DISABLE();
 800248c:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800248e:	4e4f      	ldr	r6, [pc, #316]	; (80025cc <HAL_RCC_OscConfig+0x28c>)
        __HAL_RCC_HSI_DISABLE();
 8002490:	f022 0201 	bic.w	r2, r2, #1
 8002494:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002496:	f7ff fc39 	bl	8001d0c <HAL_GetTick>
 800249a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800249c:	6833      	ldr	r3, [r6, #0]
 800249e:	0798      	lsls	r0, r3, #30
 80024a0:	f57f af58 	bpl.w	8002354 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024a4:	f7ff fc32 	bl	8001d0c <HAL_GetTick>
 80024a8:	1b40      	subs	r0, r0, r5
 80024aa:	2802      	cmp	r0, #2
 80024ac:	d9f6      	bls.n	800249c <HAL_RCC_OscConfig+0x15c>
 80024ae:	e78a      	b.n	80023c6 <HAL_RCC_OscConfig+0x86>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80024b0:	6963      	ldr	r3, [r4, #20]
 80024b2:	4d46      	ldr	r5, [pc, #280]	; (80025cc <HAL_RCC_OscConfig+0x28c>)
 80024b4:	b183      	cbz	r3, 80024d8 <HAL_RCC_OscConfig+0x198>
      __HAL_RCC_LSI_ENABLE();
 80024b6:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80024b8:	f043 0301 	orr.w	r3, r3, #1
 80024bc:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 80024be:	f7ff fc25 	bl	8001d0c <HAL_GetTick>
 80024c2:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024c4:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80024c6:	079b      	lsls	r3, r3, #30
 80024c8:	f53f af48 	bmi.w	800235c <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024cc:	f7ff fc1e 	bl	8001d0c <HAL_GetTick>
 80024d0:	1b80      	subs	r0, r0, r6
 80024d2:	2802      	cmp	r0, #2
 80024d4:	d9f6      	bls.n	80024c4 <HAL_RCC_OscConfig+0x184>
 80024d6:	e776      	b.n	80023c6 <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_LSI_DISABLE();
 80024d8:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80024da:	f023 0301 	bic.w	r3, r3, #1
 80024de:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 80024e0:	f7ff fc14 	bl	8001d0c <HAL_GetTick>
 80024e4:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024e6:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80024e8:	079f      	lsls	r7, r3, #30
 80024ea:	f57f af37 	bpl.w	800235c <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024ee:	f7ff fc0d 	bl	8001d0c <HAL_GetTick>
 80024f2:	1b80      	subs	r0, r0, r6
 80024f4:	2802      	cmp	r0, #2
 80024f6:	d9f6      	bls.n	80024e6 <HAL_RCC_OscConfig+0x1a6>
 80024f8:	e765      	b.n	80023c6 <HAL_RCC_OscConfig+0x86>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024fa:	4b34      	ldr	r3, [pc, #208]	; (80025cc <HAL_RCC_OscConfig+0x28c>)
 80024fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80024fe:	00d0      	lsls	r0, r2, #3
 8002500:	d427      	bmi.n	8002552 <HAL_RCC_OscConfig+0x212>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002502:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 8002504:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8002506:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800250a:	641a      	str	r2, [r3, #64]	; 0x40
 800250c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002512:	9301      	str	r3, [sp, #4]
 8002514:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002516:	4d2e      	ldr	r5, [pc, #184]	; (80025d0 <HAL_RCC_OscConfig+0x290>)
 8002518:	682b      	ldr	r3, [r5, #0]
 800251a:	05d9      	lsls	r1, r3, #23
 800251c:	d51b      	bpl.n	8002556 <HAL_RCC_OscConfig+0x216>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800251e:	68a3      	ldr	r3, [r4, #8]
 8002520:	4d2a      	ldr	r5, [pc, #168]	; (80025cc <HAL_RCC_OscConfig+0x28c>)
 8002522:	2b01      	cmp	r3, #1
 8002524:	d127      	bne.n	8002576 <HAL_RCC_OscConfig+0x236>
 8002526:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002528:	f043 0301 	orr.w	r3, r3, #1
 800252c:	672b      	str	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800252e:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002532:	f7ff fbeb 	bl	8001d0c <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002536:	4e25      	ldr	r6, [pc, #148]	; (80025cc <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 8002538:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800253a:	6f33      	ldr	r3, [r6, #112]	; 0x70
 800253c:	079b      	lsls	r3, r3, #30
 800253e:	d53f      	bpl.n	80025c0 <HAL_RCC_OscConfig+0x280>
    if (pwrclkchanged == SET)
 8002540:	2f00      	cmp	r7, #0
 8002542:	f43f af0f 	beq.w	8002364 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002546:	4a21      	ldr	r2, [pc, #132]	; (80025cc <HAL_RCC_OscConfig+0x28c>)
 8002548:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800254a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800254e:	6413      	str	r3, [r2, #64]	; 0x40
 8002550:	e708      	b.n	8002364 <HAL_RCC_OscConfig+0x24>
  FlagStatus pwrclkchanged = RESET;
 8002552:	2700      	movs	r7, #0
 8002554:	e7df      	b.n	8002516 <HAL_RCC_OscConfig+0x1d6>
      PWR->CR1 |= PWR_CR1_DBP;
 8002556:	682b      	ldr	r3, [r5, #0]
 8002558:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800255c:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800255e:	f7ff fbd5 	bl	8001d0c <HAL_GetTick>
 8002562:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002564:	682b      	ldr	r3, [r5, #0]
 8002566:	05da      	lsls	r2, r3, #23
 8002568:	d4d9      	bmi.n	800251e <HAL_RCC_OscConfig+0x1de>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800256a:	f7ff fbcf 	bl	8001d0c <HAL_GetTick>
 800256e:	1b80      	subs	r0, r0, r6
 8002570:	2864      	cmp	r0, #100	; 0x64
 8002572:	d9f7      	bls.n	8002564 <HAL_RCC_OscConfig+0x224>
 8002574:	e727      	b.n	80023c6 <HAL_RCC_OscConfig+0x86>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002576:	b9ab      	cbnz	r3, 80025a4 <HAL_RCC_OscConfig+0x264>
 8002578:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800257a:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800257e:	f023 0301 	bic.w	r3, r3, #1
 8002582:	672b      	str	r3, [r5, #112]	; 0x70
 8002584:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002586:	f023 0304 	bic.w	r3, r3, #4
 800258a:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 800258c:	f7ff fbbe 	bl	8001d0c <HAL_GetTick>
 8002590:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002592:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002594:	0798      	lsls	r0, r3, #30
 8002596:	d5d3      	bpl.n	8002540 <HAL_RCC_OscConfig+0x200>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002598:	f7ff fbb8 	bl	8001d0c <HAL_GetTick>
 800259c:	1b80      	subs	r0, r0, r6
 800259e:	4540      	cmp	r0, r8
 80025a0:	d9f7      	bls.n	8002592 <HAL_RCC_OscConfig+0x252>
 80025a2:	e710      	b.n	80023c6 <HAL_RCC_OscConfig+0x86>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025a4:	2b05      	cmp	r3, #5
 80025a6:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80025a8:	d103      	bne.n	80025b2 <HAL_RCC_OscConfig+0x272>
 80025aa:	f043 0304 	orr.w	r3, r3, #4
 80025ae:	672b      	str	r3, [r5, #112]	; 0x70
 80025b0:	e7b9      	b.n	8002526 <HAL_RCC_OscConfig+0x1e6>
 80025b2:	f023 0301 	bic.w	r3, r3, #1
 80025b6:	672b      	str	r3, [r5, #112]	; 0x70
 80025b8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80025ba:	f023 0304 	bic.w	r3, r3, #4
 80025be:	e7b5      	b.n	800252c <HAL_RCC_OscConfig+0x1ec>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025c0:	f7ff fba4 	bl	8001d0c <HAL_GetTick>
 80025c4:	1b40      	subs	r0, r0, r5
 80025c6:	4540      	cmp	r0, r8
 80025c8:	d9b7      	bls.n	800253a <HAL_RCC_OscConfig+0x1fa>
 80025ca:	e6fc      	b.n	80023c6 <HAL_RCC_OscConfig+0x86>
 80025cc:	40023800 	.word	0x40023800
 80025d0:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025d4:	4d38      	ldr	r5, [pc, #224]	; (80026b8 <HAL_RCC_OscConfig+0x378>)
 80025d6:	68ab      	ldr	r3, [r5, #8]
 80025d8:	f003 030c 	and.w	r3, r3, #12
 80025dc:	2b08      	cmp	r3, #8
 80025de:	d041      	beq.n	8002664 <HAL_RCC_OscConfig+0x324>
        __HAL_RCC_PLL_DISABLE();
 80025e0:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025e2:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 80025e4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80025e8:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025ea:	d12e      	bne.n	800264a <HAL_RCC_OscConfig+0x30a>
        tickstart = HAL_GetTick();
 80025ec:	f7ff fb8e 	bl	8001d0c <HAL_GetTick>
 80025f0:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025f2:	682b      	ldr	r3, [r5, #0]
 80025f4:	0199      	lsls	r1, r3, #6
 80025f6:	d422      	bmi.n	800263e <HAL_RCC_OscConfig+0x2fe>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025f8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80025fa:	085b      	lsrs	r3, r3, #1
 80025fc:	1e5a      	subs	r2, r3, #1
 80025fe:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
 8002602:	430b      	orrs	r3, r1
 8002604:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002608:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800260a:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800260e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002610:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002614:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002618:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800261a:	682b      	ldr	r3, [r5, #0]
 800261c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002620:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002622:	f7ff fb73 	bl	8001d0c <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002626:	4d24      	ldr	r5, [pc, #144]	; (80026b8 <HAL_RCC_OscConfig+0x378>)
        tickstart = HAL_GetTick();
 8002628:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800262a:	682b      	ldr	r3, [r5, #0]
 800262c:	019a      	lsls	r2, r3, #6
 800262e:	f53f ae9d 	bmi.w	800236c <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002632:	f7ff fb6b 	bl	8001d0c <HAL_GetTick>
 8002636:	1b00      	subs	r0, r0, r4
 8002638:	2802      	cmp	r0, #2
 800263a:	d9f6      	bls.n	800262a <HAL_RCC_OscConfig+0x2ea>
 800263c:	e6c3      	b.n	80023c6 <HAL_RCC_OscConfig+0x86>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800263e:	f7ff fb65 	bl	8001d0c <HAL_GetTick>
 8002642:	1b80      	subs	r0, r0, r6
 8002644:	2802      	cmp	r0, #2
 8002646:	d9d4      	bls.n	80025f2 <HAL_RCC_OscConfig+0x2b2>
 8002648:	e6bd      	b.n	80023c6 <HAL_RCC_OscConfig+0x86>
        tickstart = HAL_GetTick();
 800264a:	f7ff fb5f 	bl	8001d0c <HAL_GetTick>
 800264e:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002650:	682b      	ldr	r3, [r5, #0]
 8002652:	019b      	lsls	r3, r3, #6
 8002654:	f57f ae8a 	bpl.w	800236c <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002658:	f7ff fb58 	bl	8001d0c <HAL_GetTick>
 800265c:	1b00      	subs	r0, r0, r4
 800265e:	2802      	cmp	r0, #2
 8002660:	d9f6      	bls.n	8002650 <HAL_RCC_OscConfig+0x310>
 8002662:	e6b0      	b.n	80023c6 <HAL_RCC_OscConfig+0x86>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002664:	2a01      	cmp	r2, #1
      pll_config = RCC->PLLCFGR;
 8002666:	686b      	ldr	r3, [r5, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002668:	f43f ae97 	beq.w	800239a <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800266c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002670:	69e1      	ldr	r1, [r4, #28]
 8002672:	428a      	cmp	r2, r1
 8002674:	f47f ae91 	bne.w	800239a <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002678:	f003 023f 	and.w	r2, r3, #63	; 0x3f
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800267c:	6a21      	ldr	r1, [r4, #32]
 800267e:	428a      	cmp	r2, r1
 8002680:	f47f ae8b 	bne.w	800239a <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002684:	f647 72c0 	movw	r2, #32704	; 0x7fc0
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002688:	6a61      	ldr	r1, [r4, #36]	; 0x24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800268a:	401a      	ands	r2, r3
 800268c:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8002690:	f47f ae83 	bne.w	800239a <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002694:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002696:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 800269a:	0852      	lsrs	r2, r2, #1
 800269c:	3a01      	subs	r2, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800269e:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 80026a2:	f47f ae7a 	bne.w	800239a <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80026a6:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 80026aa:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80026ac:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 80026b0:	f43f ae5c 	beq.w	800236c <HAL_RCC_OscConfig+0x2c>
 80026b4:	e671      	b.n	800239a <HAL_RCC_OscConfig+0x5a>
 80026b6:	bf00      	nop
 80026b8:	40023800 	.word	0x40023800

080026bc <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80026bc:	4913      	ldr	r1, [pc, #76]	; (800270c <HAL_RCC_GetSysClockFreq+0x50>)
{
 80026be:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80026c0:	688b      	ldr	r3, [r1, #8]
 80026c2:	f003 030c 	and.w	r3, r3, #12
 80026c6:	2b04      	cmp	r3, #4
 80026c8:	d01b      	beq.n	8002702 <HAL_RCC_GetSysClockFreq+0x46>
 80026ca:	2b08      	cmp	r3, #8
 80026cc:	d11b      	bne.n	8002706 <HAL_RCC_GetSysClockFreq+0x4a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80026ce:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80026d0:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026d2:	6849      	ldr	r1, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80026d4:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80026d8:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026dc:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80026e0:	bf1a      	itte	ne
 80026e2:	480b      	ldrne	r0, [pc, #44]	; (8002710 <HAL_RCC_GetSysClockFreq+0x54>)
 80026e4:	2300      	movne	r3, #0
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026e6:	480b      	ldreq	r0, [pc, #44]	; (8002714 <HAL_RCC_GetSysClockFreq+0x58>)
 80026e8:	fba1 0100 	umull	r0, r1, r1, r0
 80026ec:	f7fe fa7c 	bl	8000be8 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80026f0:	4b06      	ldr	r3, [pc, #24]	; (800270c <HAL_RCC_GetSysClockFreq+0x50>)
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80026f8:	3301      	adds	r3, #1
 80026fa:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 80026fc:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002700:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002702:	4803      	ldr	r0, [pc, #12]	; (8002710 <HAL_RCC_GetSysClockFreq+0x54>)
 8002704:	e7fc      	b.n	8002700 <HAL_RCC_GetSysClockFreq+0x44>
      sysclockfreq = HSI_VALUE;
 8002706:	4803      	ldr	r0, [pc, #12]	; (8002714 <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 8002708:	e7fa      	b.n	8002700 <HAL_RCC_GetSysClockFreq+0x44>
 800270a:	bf00      	nop
 800270c:	40023800 	.word	0x40023800
 8002710:	017d7840 	.word	0x017d7840
 8002714:	00f42400 	.word	0x00f42400

08002718 <HAL_RCC_ClockConfig>:
{
 8002718:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800271c:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 800271e:	4604      	mov	r4, r0
 8002720:	b910      	cbnz	r0, 8002728 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8002722:	2001      	movs	r0, #1
}
 8002724:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002728:	4a46      	ldr	r2, [pc, #280]	; (8002844 <HAL_RCC_ClockConfig+0x12c>)
 800272a:	6813      	ldr	r3, [r2, #0]
 800272c:	f003 030f 	and.w	r3, r3, #15
 8002730:	428b      	cmp	r3, r1
 8002732:	d328      	bcc.n	8002786 <HAL_RCC_ClockConfig+0x6e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002734:	6822      	ldr	r2, [r4, #0]
 8002736:	0797      	lsls	r7, r2, #30
 8002738:	d430      	bmi.n	800279c <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800273a:	07d0      	lsls	r0, r2, #31
 800273c:	d444      	bmi.n	80027c8 <HAL_RCC_ClockConfig+0xb0>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800273e:	4a41      	ldr	r2, [pc, #260]	; (8002844 <HAL_RCC_ClockConfig+0x12c>)
 8002740:	6813      	ldr	r3, [r2, #0]
 8002742:	f003 030f 	and.w	r3, r3, #15
 8002746:	42ab      	cmp	r3, r5
 8002748:	d867      	bhi.n	800281a <HAL_RCC_ClockConfig+0x102>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800274a:	6822      	ldr	r2, [r4, #0]
 800274c:	0751      	lsls	r1, r2, #29
 800274e:	d470      	bmi.n	8002832 <HAL_RCC_ClockConfig+0x11a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002750:	0713      	lsls	r3, r2, #28
 8002752:	d507      	bpl.n	8002764 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002754:	4a3c      	ldr	r2, [pc, #240]	; (8002848 <HAL_RCC_ClockConfig+0x130>)
 8002756:	6921      	ldr	r1, [r4, #16]
 8002758:	6893      	ldr	r3, [r2, #8]
 800275a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800275e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002762:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002764:	f7ff ffaa 	bl	80026bc <HAL_RCC_GetSysClockFreq>
 8002768:	4b37      	ldr	r3, [pc, #220]	; (8002848 <HAL_RCC_ClockConfig+0x130>)
 800276a:	4a38      	ldr	r2, [pc, #224]	; (800284c <HAL_RCC_ClockConfig+0x134>)
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002772:	5cd3      	ldrb	r3, [r2, r3]
 8002774:	40d8      	lsrs	r0, r3
 8002776:	4b36      	ldr	r3, [pc, #216]	; (8002850 <HAL_RCC_ClockConfig+0x138>)
 8002778:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 800277a:	4b36      	ldr	r3, [pc, #216]	; (8002854 <HAL_RCC_ClockConfig+0x13c>)
 800277c:	6818      	ldr	r0, [r3, #0]
 800277e:	f7ff fa89 	bl	8001c94 <HAL_InitTick>
  return HAL_OK;
 8002782:	2000      	movs	r0, #0
 8002784:	e7ce      	b.n	8002724 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002786:	6813      	ldr	r3, [r2, #0]
 8002788:	f023 030f 	bic.w	r3, r3, #15
 800278c:	430b      	orrs	r3, r1
 800278e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002790:	6813      	ldr	r3, [r2, #0]
 8002792:	f003 030f 	and.w	r3, r3, #15
 8002796:	428b      	cmp	r3, r1
 8002798:	d1c3      	bne.n	8002722 <HAL_RCC_ClockConfig+0xa>
 800279a:	e7cb      	b.n	8002734 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800279c:	f012 0f04 	tst.w	r2, #4
 80027a0:	4b29      	ldr	r3, [pc, #164]	; (8002848 <HAL_RCC_ClockConfig+0x130>)
 80027a2:	d003      	beq.n	80027ac <HAL_RCC_ClockConfig+0x94>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027a4:	6899      	ldr	r1, [r3, #8]
 80027a6:	f441 51e0 	orr.w	r1, r1, #7168	; 0x1c00
 80027aa:	6099      	str	r1, [r3, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027ac:	0716      	lsls	r6, r2, #28
 80027ae:	d503      	bpl.n	80027b8 <HAL_RCC_ClockConfig+0xa0>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027b0:	6899      	ldr	r1, [r3, #8]
 80027b2:	f441 4160 	orr.w	r1, r1, #57344	; 0xe000
 80027b6:	6099      	str	r1, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027b8:	4923      	ldr	r1, [pc, #140]	; (8002848 <HAL_RCC_ClockConfig+0x130>)
 80027ba:	68a0      	ldr	r0, [r4, #8]
 80027bc:	688b      	ldr	r3, [r1, #8]
 80027be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80027c2:	4303      	orrs	r3, r0
 80027c4:	608b      	str	r3, [r1, #8]
 80027c6:	e7b8      	b.n	800273a <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027c8:	6861      	ldr	r1, [r4, #4]
 80027ca:	4b1f      	ldr	r3, [pc, #124]	; (8002848 <HAL_RCC_ClockConfig+0x130>)
 80027cc:	2901      	cmp	r1, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027ce:	681a      	ldr	r2, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027d0:	d11b      	bne.n	800280a <HAL_RCC_ClockConfig+0xf2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027d2:	f412 3f00 	tst.w	r2, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027d6:	d0a4      	beq.n	8002722 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027d8:	689a      	ldr	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027da:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027de:	4f1a      	ldr	r7, [pc, #104]	; (8002848 <HAL_RCC_ClockConfig+0x130>)
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027e0:	f022 0203 	bic.w	r2, r2, #3
 80027e4:	430a      	orrs	r2, r1
 80027e6:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 80027e8:	f7ff fa90 	bl	8001d0c <HAL_GetTick>
 80027ec:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	6862      	ldr	r2, [r4, #4]
 80027f2:	f003 030c 	and.w	r3, r3, #12
 80027f6:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80027fa:	d0a0      	beq.n	800273e <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027fc:	f7ff fa86 	bl	8001d0c <HAL_GetTick>
 8002800:	1b80      	subs	r0, r0, r6
 8002802:	4540      	cmp	r0, r8
 8002804:	d9f3      	bls.n	80027ee <HAL_RCC_ClockConfig+0xd6>
        return HAL_TIMEOUT;
 8002806:	2003      	movs	r0, #3
 8002808:	e78c      	b.n	8002724 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800280a:	2902      	cmp	r1, #2
 800280c:	d102      	bne.n	8002814 <HAL_RCC_ClockConfig+0xfc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800280e:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8002812:	e7e0      	b.n	80027d6 <HAL_RCC_ClockConfig+0xbe>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002814:	f012 0f02 	tst.w	r2, #2
 8002818:	e7dd      	b.n	80027d6 <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800281a:	6813      	ldr	r3, [r2, #0]
 800281c:	f023 030f 	bic.w	r3, r3, #15
 8002820:	432b      	orrs	r3, r5
 8002822:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002824:	6813      	ldr	r3, [r2, #0]
 8002826:	f003 030f 	and.w	r3, r3, #15
 800282a:	42ab      	cmp	r3, r5
 800282c:	f47f af79 	bne.w	8002722 <HAL_RCC_ClockConfig+0xa>
 8002830:	e78b      	b.n	800274a <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002832:	4905      	ldr	r1, [pc, #20]	; (8002848 <HAL_RCC_ClockConfig+0x130>)
 8002834:	68e0      	ldr	r0, [r4, #12]
 8002836:	688b      	ldr	r3, [r1, #8]
 8002838:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800283c:	4303      	orrs	r3, r0
 800283e:	608b      	str	r3, [r1, #8]
 8002840:	e786      	b.n	8002750 <HAL_RCC_ClockConfig+0x38>
 8002842:	bf00      	nop
 8002844:	40023c00 	.word	0x40023c00
 8002848:	40023800 	.word	0x40023800
 800284c:	0800d2fc 	.word	0x0800d2fc
 8002850:	20000680 	.word	0x20000680
 8002854:	20000688 	.word	0x20000688

08002858 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8002858:	4b01      	ldr	r3, [pc, #4]	; (8002860 <HAL_RCC_GetHCLKFreq+0x8>)
 800285a:	6818      	ldr	r0, [r3, #0]
 800285c:	4770      	bx	lr
 800285e:	bf00      	nop
 8002860:	20000680 	.word	0x20000680

08002864 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002864:	4b04      	ldr	r3, [pc, #16]	; (8002878 <HAL_RCC_GetPCLK1Freq+0x14>)
 8002866:	4a05      	ldr	r2, [pc, #20]	; (800287c <HAL_RCC_GetPCLK1Freq+0x18>)
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800286e:	5cd3      	ldrb	r3, [r2, r3]
 8002870:	4a03      	ldr	r2, [pc, #12]	; (8002880 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002872:	6810      	ldr	r0, [r2, #0]
}
 8002874:	40d8      	lsrs	r0, r3
 8002876:	4770      	bx	lr
 8002878:	40023800 	.word	0x40023800
 800287c:	0800d30c 	.word	0x0800d30c
 8002880:	20000680 	.word	0x20000680

08002884 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002884:	4b04      	ldr	r3, [pc, #16]	; (8002898 <HAL_RCC_GetPCLK2Freq+0x14>)
 8002886:	4a05      	ldr	r2, [pc, #20]	; (800289c <HAL_RCC_GetPCLK2Freq+0x18>)
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800288e:	5cd3      	ldrb	r3, [r2, r3]
 8002890:	4a03      	ldr	r2, [pc, #12]	; (80028a0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002892:	6810      	ldr	r0, [r2, #0]
}
 8002894:	40d8      	lsrs	r0, r3
 8002896:	4770      	bx	lr
 8002898:	40023800 	.word	0x40023800
 800289c:	0800d30c 	.word	0x0800d30c
 80028a0:	20000680 	.word	0x20000680

080028a4 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80028a4:	6803      	ldr	r3, [r0, #0]
{
 80028a6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80028aa:	f013 0601 	ands.w	r6, r3, #1
{
 80028ae:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80028b0:	d00b      	beq.n	80028ca <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80028b2:	4aaa      	ldr	r2, [pc, #680]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80028b4:	6891      	ldr	r1, [r2, #8]
 80028b6:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 80028ba:	6091      	str	r1, [r2, #8]
 80028bc:	6b46      	ldr	r6, [r0, #52]	; 0x34
 80028be:	6891      	ldr	r1, [r2, #8]
 80028c0:	4331      	orrs	r1, r6

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80028c2:	fab6 f686 	clz	r6, r6
 80028c6:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80028c8:	6091      	str	r1, [r2, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80028ca:	f413 2500 	ands.w	r5, r3, #524288	; 0x80000
 80028ce:	d012      	beq.n	80028f6 <HAL_RCCEx_PeriphCLKConfig+0x52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80028d0:	49a2      	ldr	r1, [pc, #648]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80028d2:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 80028d4:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80028d8:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80028dc:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
    {
      plli2sused = 1;
 80028e0:	bf08      	it	eq
 80028e2:	2601      	moveq	r6, #1
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80028e4:	ea42 0205 	orr.w	r2, r2, r5
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80028e8:	bf16      	itet	ne
 80028ea:	fab5 f585 	clzne	r5, r5
  uint32_t pllsaiused = 0;
 80028ee:	2500      	moveq	r5, #0
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80028f0:	096d      	lsrne	r5, r5, #5
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80028f2:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80028f6:	02d8      	lsls	r0, r3, #11
 80028f8:	d510      	bpl.n	800291c <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80028fa:	4898      	ldr	r0, [pc, #608]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80028fc:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80028fe:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002902:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002906:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 800290a:	ea42 0201 	orr.w	r2, r2, r1
 800290e:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002912:	f000 8184 	beq.w	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x37a>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 8002916:	2900      	cmp	r1, #0
 8002918:	bf08      	it	eq
 800291a:	2501      	moveq	r5, #1
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {
      plli2sused = 1;
 800291c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8002920:	bf18      	it	ne
 8002922:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002924:	0699      	lsls	r1, r3, #26
 8002926:	d531      	bpl.n	800298c <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002928:	4b8c      	ldr	r3, [pc, #560]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x2b8>)

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800292a:	4f8d      	ldr	r7, [pc, #564]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
    __HAL_RCC_PWR_CLK_ENABLE();
 800292c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800292e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002932:	641a      	str	r2, [r3, #64]	; 0x40
 8002934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002936:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800293a:	9301      	str	r3, [sp, #4]
 800293c:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002944:	603b      	str	r3, [r7, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002946:	f7ff f9e1 	bl	8001d0c <HAL_GetTick>
 800294a:	4680      	mov	r8, r0

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	05da      	lsls	r2, r3, #23
 8002950:	f140 8167 	bpl.w	8002c22 <HAL_RCCEx_PeriphCLKConfig+0x37e>
        return HAL_TIMEOUT;
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002954:	4f81      	ldr	r7, [pc, #516]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8002956:	6f3b      	ldr	r3, [r7, #112]	; 0x70

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002958:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800295c:	f040 816c 	bne.w	8002c38 <HAL_RCCEx_PeriphCLKConfig+0x394>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002960:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002962:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8002966:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 800296a:	4a7c      	ldr	r2, [pc, #496]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 800296c:	f040 818a 	bne.w	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8002970:	6891      	ldr	r1, [r2, #8]
 8002972:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 8002976:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 800297a:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 800297e:	4301      	orrs	r1, r0
 8002980:	6091      	str	r1, [r2, #8]
 8002982:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002986:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8002988:	430b      	orrs	r3, r1
 800298a:	6713      	str	r3, [r2, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800298c:	6823      	ldr	r3, [r4, #0]
 800298e:	06d9      	lsls	r1, r3, #27
 8002990:	d50c      	bpl.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0x108>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002992:	4a72      	ldr	r2, [pc, #456]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8002994:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8002998:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 800299c:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 80029a0:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 80029a4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80029a6:	4301      	orrs	r1, r0
 80029a8:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80029ac:	045a      	lsls	r2, r3, #17
 80029ae:	d508      	bpl.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80029b0:	496a      	ldr	r1, [pc, #424]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80029b2:	6e60      	ldr	r0, [r4, #100]	; 0x64
 80029b4:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80029b8:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80029bc:	4302      	orrs	r2, r0
 80029be:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80029c2:	041f      	lsls	r7, r3, #16
 80029c4:	d508      	bpl.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80029c6:	4965      	ldr	r1, [pc, #404]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80029c8:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 80029ca:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80029ce:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 80029d2:	4302      	orrs	r2, r0
 80029d4:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80029d8:	03d8      	lsls	r0, r3, #15
 80029da:	d508      	bpl.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80029dc:	495f      	ldr	r1, [pc, #380]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80029de:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80029e0:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80029e4:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80029e8:	4302      	orrs	r2, r0
 80029ea:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80029ee:	0399      	lsls	r1, r3, #14
 80029f0:	d508      	bpl.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80029f2:	495a      	ldr	r1, [pc, #360]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80029f4:	6f20      	ldr	r0, [r4, #112]	; 0x70
 80029f6:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80029fa:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 80029fe:	4302      	orrs	r2, r0
 8002a00:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002a04:	065a      	lsls	r2, r3, #25
 8002a06:	d508      	bpl.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002a08:	4954      	ldr	r1, [pc, #336]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8002a0a:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8002a0c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002a10:	f022 0203 	bic.w	r2, r2, #3
 8002a14:	4302      	orrs	r2, r0
 8002a16:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002a1a:	061f      	lsls	r7, r3, #24
 8002a1c:	d508      	bpl.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002a1e:	494f      	ldr	r1, [pc, #316]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8002a20:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8002a22:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002a26:	f022 020c 	bic.w	r2, r2, #12
 8002a2a:	4302      	orrs	r2, r0
 8002a2c:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002a30:	05d8      	lsls	r0, r3, #23
 8002a32:	d508      	bpl.n	8002a46 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002a34:	4949      	ldr	r1, [pc, #292]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8002a36:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8002a38:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002a3c:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8002a40:	4302      	orrs	r2, r0
 8002a42:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002a46:	0599      	lsls	r1, r3, #22
 8002a48:	d508      	bpl.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002a4a:	4944      	ldr	r1, [pc, #272]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8002a4c:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8002a4e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002a52:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8002a56:	4302      	orrs	r2, r0
 8002a58:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002a5c:	055a      	lsls	r2, r3, #21
 8002a5e:	d508      	bpl.n	8002a72 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002a60:	493e      	ldr	r1, [pc, #248]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8002a62:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002a64:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002a68:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002a6c:	4302      	orrs	r2, r0
 8002a6e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002a72:	051f      	lsls	r7, r3, #20
 8002a74:	d508      	bpl.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002a76:	4939      	ldr	r1, [pc, #228]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8002a78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002a7a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002a7e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002a82:	4302      	orrs	r2, r0
 8002a84:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002a88:	04d8      	lsls	r0, r3, #19
 8002a8a:	d508      	bpl.n	8002a9e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002a8c:	4933      	ldr	r1, [pc, #204]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8002a8e:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8002a90:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002a94:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8002a98:	4302      	orrs	r2, r0
 8002a9a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002a9e:	0499      	lsls	r1, r3, #18
 8002aa0:	d508      	bpl.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x210>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002aa2:	492e      	ldr	r1, [pc, #184]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8002aa4:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8002aa6:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002aaa:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8002aae:	4302      	orrs	r2, r0
 8002ab0:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002ab4:	025a      	lsls	r2, r3, #9
 8002ab6:	d508      	bpl.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002ab8:	4928      	ldr	r1, [pc, #160]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8002aba:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8002abc:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002ac0:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8002ac4:	4302      	orrs	r2, r0
 8002ac6:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002aca:	029f      	lsls	r7, r3, #10
 8002acc:	d50c      	bpl.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002ace:	4823      	ldr	r0, [pc, #140]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8002ad0:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8002ad2:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 8002ad6:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002ada:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
      pllsaiused = 1;
 8002ade:	bf08      	it	eq
 8002ae0:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002ae2:	430a      	orrs	r2, r1
 8002ae4:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1;
 8002ae8:	f013 0f08 	tst.w	r3, #8
 8002aec:	bf18      	it	ne
 8002aee:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002af0:	0358      	lsls	r0, r3, #13
 8002af2:	d508      	bpl.n	8002b06 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002af4:	4919      	ldr	r1, [pc, #100]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8002af6:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8002af8:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002afc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002b00:	4302      	orrs	r2, r0
 8002b02:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002b06:	0219      	lsls	r1, r3, #8
 8002b08:	d509      	bpl.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002b0a:	4914      	ldr	r1, [pc, #80]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8002b0c:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8002b10:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002b14:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8002b18:	4302      	orrs	r2, r0
 8002b1a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002b1e:	2e01      	cmp	r6, #1
 8002b20:	f000 80b4 	beq.w	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8002b24:	019a      	lsls	r2, r3, #6
 8002b26:	f100 80b1 	bmi.w	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002b2a:	2d01      	cmp	r5, #1
 8002b2c:	d175      	bne.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x376>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002b2e:	4d0b      	ldr	r5, [pc, #44]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8002b30:	682b      	ldr	r3, [r5, #0]
 8002b32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b36:	602b      	str	r3, [r5, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b38:	f7ff f8e8 	bl	8001d0c <HAL_GetTick>
 8002b3c:	4606      	mov	r6, r0

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002b3e:	682b      	ldr	r3, [r5, #0]
 8002b40:	009f      	lsls	r7, r3, #2
 8002b42:	f100 8127 	bmi.w	8002d94 <HAL_RCCEx_PeriphCLKConfig+0x4f0>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002b46:	6822      	ldr	r2, [r4, #0]
 8002b48:	0316      	lsls	r6, r2, #12
 8002b4a:	d501      	bpl.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8002b4c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002b4e:	b14b      	cbz	r3, 8002b64 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 8002b50:	02d0      	lsls	r0, r2, #11
 8002b52:	d522      	bpl.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x2f6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002b54:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002b56:	bb03      	cbnz	r3, 8002b9a <HAL_RCCEx_PeriphCLKConfig+0x2f6>
 8002b58:	e004      	b.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 8002b5a:	bf00      	nop
 8002b5c:	40023800 	.word	0x40023800
 8002b60:	40007000 	.word	0x40007000
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002b64:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002b68:	f8d5 1088 	ldr.w	r1, [r5, #136]	; 0x88
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002b6c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b70:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8002b74:	430b      	orrs	r3, r1
 8002b76:	6961      	ldr	r1, [r4, #20]
 8002b78:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8002b7c:	69a1      	ldr	r1, [r4, #24]
 8002b7e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8002b82:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002b86:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 8002b8a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8002b8c:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8002b90:	3901      	subs	r1, #1
 8002b92:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002b96:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002b9a:	0291      	lsls	r1, r2, #10
 8002b9c:	d515      	bpl.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0x326>
 8002b9e:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8002ba0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ba4:	d111      	bne.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0x326>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002ba6:	4982      	ldr	r1, [pc, #520]	; (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002ba8:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002bac:	f8d1 0088 	ldr.w	r0, [r1, #136]	; 0x88

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002bb0:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8002bb4:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8002bb8:	4303      	orrs	r3, r0
 8002bba:	6960      	ldr	r0, [r4, #20]
 8002bbc:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8002bc0:	6a20      	ldr	r0, [r4, #32]
 8002bc2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8002bc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002bca:	0712      	lsls	r2, r2, #28
 8002bcc:	d519      	bpl.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x35e>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002bce:	4a78      	ldr	r2, [pc, #480]	; (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002bd0:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002bd4:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002bd8:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8002bdc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002be0:	430b      	orrs	r3, r1
 8002be2:	6961      	ldr	r1, [r4, #20]
 8002be4:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8002be8:	69e1      	ldr	r1, [r4, #28]
 8002bea:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8002bee:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002bf2:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8002bf6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8002bf8:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002bfc:	430b      	orrs	r3, r1
 8002bfe:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002c02:	4c6b      	ldr	r4, [pc, #428]	; (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002c04:	6823      	ldr	r3, [r4, #0]
 8002c06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c0a:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c0c:	f7ff f87e 	bl	8001d0c <HAL_GetTick>
 8002c10:	4605      	mov	r5, r0

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002c12:	6823      	ldr	r3, [r4, #0]
 8002c14:	009b      	lsls	r3, r3, #2
 8002c16:	f140 80c4 	bpl.w	8002da2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8002c1a:	2000      	movs	r0, #0
 8002c1c:	e009      	b.n	8002c32 <HAL_RCCEx_PeriphCLKConfig+0x38e>
      plli2sused = 1;
 8002c1e:	2601      	movs	r6, #1
 8002c20:	e67c      	b.n	800291c <HAL_RCCEx_PeriphCLKConfig+0x78>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c22:	f7ff f873 	bl	8001d0c <HAL_GetTick>
 8002c26:	eba0 0008 	sub.w	r0, r0, r8
 8002c2a:	2864      	cmp	r0, #100	; 0x64
 8002c2c:	f67f ae8e 	bls.w	800294c <HAL_RCCEx_PeriphCLKConfig+0xa8>
        return HAL_TIMEOUT;
 8002c30:	2003      	movs	r0, #3
}
 8002c32:	b003      	add	sp, #12
 8002c34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002c38:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002c3a:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	f43f ae8e 	beq.w	8002960 <HAL_RCCEx_PeriphCLKConfig+0xbc>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002c44:	6f3b      	ldr	r3, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8002c46:	6f3a      	ldr	r2, [r7, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002c48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8002c4c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002c50:	673a      	str	r2, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002c52:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002c54:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002c58:	673a      	str	r2, [r7, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 8002c5a:	673b      	str	r3, [r7, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002c5c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c5e:	07db      	lsls	r3, r3, #31
 8002c60:	f57f ae7e 	bpl.w	8002960 <HAL_RCCEx_PeriphCLKConfig+0xbc>
        tickstart = HAL_GetTick();
 8002c64:	f7ff f852 	bl	8001d0c <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c68:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8002c6c:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c6e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c70:	0798      	lsls	r0, r3, #30
 8002c72:	f53f ae75 	bmi.w	8002960 <HAL_RCCEx_PeriphCLKConfig+0xbc>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c76:	f7ff f849 	bl	8001d0c <HAL_GetTick>
 8002c7a:	eba0 0008 	sub.w	r0, r0, r8
 8002c7e:	4548      	cmp	r0, r9
 8002c80:	d9f5      	bls.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
 8002c82:	e7d5      	b.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x38c>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c84:	6891      	ldr	r1, [r2, #8]
 8002c86:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8002c8a:	e679      	b.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0xdc>
    __HAL_RCC_PLLI2S_DISABLE();
 8002c8c:	4e48      	ldr	r6, [pc, #288]	; (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002c8e:	6833      	ldr	r3, [r6, #0]
 8002c90:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002c94:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8002c96:	f7ff f839 	bl	8001d0c <HAL_GetTick>
 8002c9a:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002c9c:	6833      	ldr	r3, [r6, #0]
 8002c9e:	011b      	lsls	r3, r3, #4
 8002ca0:	d472      	bmi.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002ca2:	6822      	ldr	r2, [r4, #0]
 8002ca4:	07d7      	lsls	r7, r2, #31
 8002ca6:	d512      	bpl.n	8002cce <HAL_RCCEx_PeriphCLKConfig+0x42a>
 8002ca8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002caa:	b983      	cbnz	r3, 8002cce <HAL_RCCEx_PeriphCLKConfig+0x42a>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002cac:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002cb0:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002cb4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002cb8:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8002cbc:	430b      	orrs	r3, r1
 8002cbe:	6861      	ldr	r1, [r4, #4]
 8002cc0:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8002cc4:	68a1      	ldr	r1, [r4, #8]
 8002cc6:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8002cca:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002cce:	0316      	lsls	r6, r2, #12
 8002cd0:	d503      	bpl.n	8002cda <HAL_RCCEx_PeriphCLKConfig+0x436>
 8002cd2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002cd4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002cd8:	d005      	beq.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x442>
 8002cda:	02d0      	lsls	r0, r2, #11
 8002cdc:	d51e      	bpl.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x478>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002cde:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002ce0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ce4:	d11a      	bne.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x478>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002ce6:	4932      	ldr	r1, [pc, #200]	; (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002ce8:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002cec:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002cf0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002cf4:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8002cf8:	4303      	orrs	r3, r0
 8002cfa:	6860      	ldr	r0, [r4, #4]
 8002cfc:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8002d00:	68e0      	ldr	r0, [r4, #12]
 8002d02:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8002d06:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002d0a:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
 8002d0e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002d10:	f020 001f 	bic.w	r0, r0, #31
 8002d14:	3b01      	subs	r3, #1
 8002d16:	4303      	orrs	r3, r0
 8002d18:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002d1c:	01d1      	lsls	r1, r2, #7
 8002d1e:	d511      	bpl.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002d20:	4923      	ldr	r1, [pc, #140]	; (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002d22:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002d26:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002d2a:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8002d2e:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8002d32:	4303      	orrs	r3, r0
 8002d34:	6860      	ldr	r0, [r4, #4]
 8002d36:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8002d3a:	6920      	ldr	r0, [r4, #16]
 8002d3c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8002d40:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002d44:	0192      	lsls	r2, r2, #6
 8002d46:	d50d      	bpl.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x4c0>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002d48:	6923      	ldr	r3, [r4, #16]
 8002d4a:	6862      	ldr	r2, [r4, #4]
 8002d4c:	041b      	lsls	r3, r3, #16
 8002d4e:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002d52:	68e2      	ldr	r2, [r4, #12]
 8002d54:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002d58:	68a2      	ldr	r2, [r4, #8]
 8002d5a:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8002d5e:	4a14      	ldr	r2, [pc, #80]	; (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002d60:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8002d64:	4e12      	ldr	r6, [pc, #72]	; (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002d66:	6833      	ldr	r3, [r6, #0]
 8002d68:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002d6c:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8002d6e:	f7fe ffcd 	bl	8001d0c <HAL_GetTick>
 8002d72:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002d74:	6833      	ldr	r3, [r6, #0]
 8002d76:	011b      	lsls	r3, r3, #4
 8002d78:	f53f aed7 	bmi.w	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x286>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002d7c:	f7fe ffc6 	bl	8001d0c <HAL_GetTick>
 8002d80:	1bc0      	subs	r0, r0, r7
 8002d82:	2864      	cmp	r0, #100	; 0x64
 8002d84:	d9f6      	bls.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8002d86:	e753      	b.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x38c>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002d88:	f7fe ffc0 	bl	8001d0c <HAL_GetTick>
 8002d8c:	1bc0      	subs	r0, r0, r7
 8002d8e:	2864      	cmp	r0, #100	; 0x64
 8002d90:	d984      	bls.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8002d92:	e74d      	b.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x38c>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002d94:	f7fe ffba 	bl	8001d0c <HAL_GetTick>
 8002d98:	1b80      	subs	r0, r0, r6
 8002d9a:	2864      	cmp	r0, #100	; 0x64
 8002d9c:	f67f aecf 	bls.w	8002b3e <HAL_RCCEx_PeriphCLKConfig+0x29a>
 8002da0:	e746      	b.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x38c>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002da2:	f7fe ffb3 	bl	8001d0c <HAL_GetTick>
 8002da6:	1b40      	subs	r0, r0, r5
 8002da8:	2864      	cmp	r0, #100	; 0x64
 8002daa:	f67f af32 	bls.w	8002c12 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8002dae:	e73f      	b.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x38c>
 8002db0:	40023800 	.word	0x40023800

08002db4 <HAL_SDRAM_MspInit>:
  UNUSED(hsdram);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */
}
 8002db4:	4770      	bx	lr

08002db6 <HAL_SDRAM_Init>:
{
 8002db6:	b538      	push	{r3, r4, r5, lr}
 8002db8:	460d      	mov	r5, r1
  if (hsdram == NULL)
 8002dba:	4604      	mov	r4, r0
 8002dbc:	b1c8      	cbz	r0, 8002df2 <HAL_SDRAM_Init+0x3c>
  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8002dbe:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8002dc2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002dc6:	b91b      	cbnz	r3, 8002dd0 <HAL_SDRAM_Init+0x1a>
    hsdram->Lock = HAL_UNLOCKED;
 8002dc8:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
    HAL_SDRAM_MspInit(hsdram);
 8002dcc:	f7ff fff2 	bl	8002db4 <HAL_SDRAM_MspInit>
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8002dd0:	2302      	movs	r3, #2
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8002dd2:	1d21      	adds	r1, r4, #4
 8002dd4:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8002dd6:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8002dda:	f000 fb4b 	bl	8003474 <FMC_SDRAM_Init>
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8002dde:	6862      	ldr	r2, [r4, #4]
 8002de0:	4629      	mov	r1, r5
 8002de2:	6820      	ldr	r0, [r4, #0]
 8002de4:	f000 fb81 	bl	80034ea <FMC_SDRAM_Timing_Init>
  hsdram->State = HAL_SDRAM_STATE_READY;
 8002de8:	2301      	movs	r3, #1
  return HAL_OK;
 8002dea:	2000      	movs	r0, #0
  hsdram->State = HAL_SDRAM_STATE_READY;
 8002dec:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 8002df0:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8002df2:	2001      	movs	r0, #1
 8002df4:	e7fc      	b.n	8002df0 <HAL_SDRAM_Init+0x3a>

08002df6 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8002df6:	b570      	push	{r4, r5, r6, lr}
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8002df8:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 8002dfc:	4605      	mov	r5, r0
 8002dfe:	460e      	mov	r6, r1

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8002e00:	2b02      	cmp	r3, #2
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8002e02:	b2d8      	uxtb	r0, r3
  if (state == HAL_SDRAM_STATE_BUSY)
 8002e04:	d010      	beq.n	8002e28 <HAL_SDRAM_SendCommand+0x32>
  {
    return HAL_BUSY;
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8002e06:	f000 04fb 	and.w	r4, r0, #251	; 0xfb
 8002e0a:	2c01      	cmp	r4, #1
 8002e0c:	d110      	bne.n	8002e30 <HAL_SDRAM_SendCommand+0x3a>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8002e0e:	2302      	movs	r3, #2

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8002e10:	6828      	ldr	r0, [r5, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8002e12:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8002e16:	f000 fb9e 	bl	8003556 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8002e1a:	6833      	ldr	r3, [r6, #0]
 8002e1c:	2b02      	cmp	r3, #2
 8002e1e:	d104      	bne.n	8002e2a <HAL_SDRAM_SendCommand+0x34>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8002e20:	2305      	movs	r3, #5
 8002e22:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8002e26:	2000      	movs	r0, #0
}
 8002e28:	bd70      	pop	{r4, r5, r6, pc}
      hsdram->State = HAL_SDRAM_STATE_READY;
 8002e2a:	f885 402c 	strb.w	r4, [r5, #44]	; 0x2c
 8002e2e:	e7fa      	b.n	8002e26 <HAL_SDRAM_SendCommand+0x30>
    return HAL_ERROR;
 8002e30:	2001      	movs	r0, #1
 8002e32:	e7f9      	b.n	8002e28 <HAL_SDRAM_SendCommand+0x32>

08002e34 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8002e34:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8002e36:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 8002e3a:	4604      	mov	r4, r0
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8002e3c:	2b02      	cmp	r3, #2
 8002e3e:	b2d8      	uxtb	r0, r3
 8002e40:	d00d      	beq.n	8002e5e <HAL_SDRAM_ProgramRefreshRate+0x2a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8002e42:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8002e46:	2b01      	cmp	r3, #1
 8002e48:	b2dd      	uxtb	r5, r3
 8002e4a:	d109      	bne.n	8002e60 <HAL_SDRAM_ProgramRefreshRate+0x2c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8002e4c:	2302      	movs	r3, #2

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8002e4e:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8002e50:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8002e54:	f000 fb91 	bl	800357a <FMC_SDRAM_ProgramRefreshRate>
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8002e58:	2000      	movs	r0, #0
    hsdram->State = HAL_SDRAM_STATE_READY;
 8002e5a:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
}
 8002e5e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8002e60:	2001      	movs	r0, #1
 8002e62:	e7fc      	b.n	8002e5e <HAL_SDRAM_ProgramRefreshRate+0x2a>

08002e64 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e64:	b538      	push	{r3, r4, r5, lr}
 8002e66:	4604      	mov	r4, r0
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002e68:	69c0      	ldr	r0, [r0, #28]
 8002e6a:	6921      	ldr	r1, [r4, #16]
 8002e6c:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002e6e:	6823      	ldr	r3, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002e70:	430a      	orrs	r2, r1
 8002e72:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002e74:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002e76:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002e78:	498e      	ldr	r1, [pc, #568]	; (80030b4 <UART_SetConfig+0x250>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002e7a:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002e7c:	4029      	ands	r1, r5
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  tmpreg |= huart->Init.OneBitSampling;
 8002e7e:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002e80:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e82:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002e84:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e86:	685a      	ldr	r2, [r3, #4]
 8002e88:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8002e8c:	430a      	orrs	r2, r1
 8002e8e:	605a      	str	r2, [r3, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002e90:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002e92:	6899      	ldr	r1, [r3, #8]
  tmpreg |= huart->Init.OneBitSampling;
 8002e94:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002e96:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 8002e9a:	430a      	orrs	r2, r1
 8002e9c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002e9e:	4a86      	ldr	r2, [pc, #536]	; (80030b8 <UART_SetConfig+0x254>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d117      	bne.n	8002ed4 <UART_SetConfig+0x70>
 8002ea4:	4b85      	ldr	r3, [pc, #532]	; (80030bc <UART_SetConfig+0x258>)
 8002ea6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eaa:	f003 0303 	and.w	r3, r3, #3
 8002eae:	3b01      	subs	r3, #1
 8002eb0:	2b02      	cmp	r3, #2
 8002eb2:	f200 80e2 	bhi.w	800307a <UART_SetConfig+0x216>
 8002eb6:	4a82      	ldr	r2, [pc, #520]	; (80030c0 <UART_SetConfig+0x25c>)

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002eb8:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8002ebc:	5cd3      	ldrb	r3, [r2, r3]
 8002ebe:	f040 80b3 	bne.w	8003028 <UART_SetConfig+0x1c4>
  {
    switch (clocksource)
 8002ec2:	2b08      	cmp	r3, #8
 8002ec4:	d822      	bhi.n	8002f0c <UART_SetConfig+0xa8>
 8002ec6:	e8df f003 	tbb	[pc, r3]
 8002eca:	db90      	.short	0xdb90
 8002ecc:	21d52198 	.word	0x21d52198
 8002ed0:	2121      	.short	0x2121
 8002ed2:	99          	.byte	0x99
 8002ed3:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002ed4:	4a7b      	ldr	r2, [pc, #492]	; (80030c4 <UART_SetConfig+0x260>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d106      	bne.n	8002ee8 <UART_SetConfig+0x84>
 8002eda:	4b78      	ldr	r3, [pc, #480]	; (80030bc <UART_SetConfig+0x258>)
 8002edc:	4a7a      	ldr	r2, [pc, #488]	; (80030c8 <UART_SetConfig+0x264>)
 8002ede:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ee2:	f003 030c 	and.w	r3, r3, #12
 8002ee6:	e7e7      	b.n	8002eb8 <UART_SetConfig+0x54>
 8002ee8:	4a78      	ldr	r2, [pc, #480]	; (80030cc <UART_SetConfig+0x268>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d118      	bne.n	8002f20 <UART_SetConfig+0xbc>
 8002eee:	4b73      	ldr	r3, [pc, #460]	; (80030bc <UART_SetConfig+0x258>)
 8002ef0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ef4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002ef8:	2b20      	cmp	r3, #32
 8002efa:	f000 80b3 	beq.w	8003064 <UART_SetConfig+0x200>
 8002efe:	d807      	bhi.n	8002f10 <UART_SetConfig+0xac>
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	f000 80c0 	beq.w	8003086 <UART_SetConfig+0x222>
 8002f06:	2b10      	cmp	r3, #16
 8002f08:	f000 80b1 	beq.w	800306e <UART_SetConfig+0x20a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002f0c:	2001      	movs	r0, #1
 8002f0e:	e070      	b.n	8002ff2 <UART_SetConfig+0x18e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002f10:	2b30      	cmp	r3, #48	; 0x30
 8002f12:	d1fb      	bne.n	8002f0c <UART_SetConfig+0xa8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f14:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8002f18:	d070      	beq.n	8002ffc <UART_SetConfig+0x198>
        break;
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
        break;
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f1a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002f1e:	e0b9      	b.n	8003094 <UART_SetConfig+0x230>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002f20:	4a6b      	ldr	r2, [pc, #428]	; (80030d0 <UART_SetConfig+0x26c>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d10f      	bne.n	8002f46 <UART_SetConfig+0xe2>
 8002f26:	4b65      	ldr	r3, [pc, #404]	; (80030bc <UART_SetConfig+0x258>)
 8002f28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f2c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002f30:	2b80      	cmp	r3, #128	; 0x80
 8002f32:	f000 8097 	beq.w	8003064 <UART_SetConfig+0x200>
 8002f36:	d804      	bhi.n	8002f42 <UART_SetConfig+0xde>
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	f000 80a4 	beq.w	8003086 <UART_SetConfig+0x222>
 8002f3e:	2b40      	cmp	r3, #64	; 0x40
 8002f40:	e7e2      	b.n	8002f08 <UART_SetConfig+0xa4>
 8002f42:	2bc0      	cmp	r3, #192	; 0xc0
 8002f44:	e7e5      	b.n	8002f12 <UART_SetConfig+0xae>
 8002f46:	4a63      	ldr	r2, [pc, #396]	; (80030d4 <UART_SetConfig+0x270>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d112      	bne.n	8002f72 <UART_SetConfig+0x10e>
 8002f4c:	4b5b      	ldr	r3, [pc, #364]	; (80030bc <UART_SetConfig+0x258>)
 8002f4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f5a:	f000 8083 	beq.w	8003064 <UART_SetConfig+0x200>
 8002f5e:	d805      	bhi.n	8002f6c <UART_SetConfig+0x108>
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	f000 8090 	beq.w	8003086 <UART_SetConfig+0x222>
 8002f66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f6a:	e7cd      	b.n	8002f08 <UART_SetConfig+0xa4>
 8002f6c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f70:	e7cf      	b.n	8002f12 <UART_SetConfig+0xae>
 8002f72:	4a59      	ldr	r2, [pc, #356]	; (80030d8 <UART_SetConfig+0x274>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d110      	bne.n	8002f9a <UART_SetConfig+0x136>
 8002f78:	4b50      	ldr	r3, [pc, #320]	; (80030bc <UART_SetConfig+0x258>)
 8002f7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f7e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002f82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f86:	d06d      	beq.n	8003064 <UART_SetConfig+0x200>
 8002f88:	d804      	bhi.n	8002f94 <UART_SetConfig+0x130>
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d075      	beq.n	800307a <UART_SetConfig+0x216>
 8002f8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f92:	e7b9      	b.n	8002f08 <UART_SetConfig+0xa4>
 8002f94:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002f98:	e7bb      	b.n	8002f12 <UART_SetConfig+0xae>
 8002f9a:	4a50      	ldr	r2, [pc, #320]	; (80030dc <UART_SetConfig+0x278>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d110      	bne.n	8002fc2 <UART_SetConfig+0x15e>
 8002fa0:	4b46      	ldr	r3, [pc, #280]	; (80030bc <UART_SetConfig+0x258>)
 8002fa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fa6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002faa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fae:	d059      	beq.n	8003064 <UART_SetConfig+0x200>
 8002fb0:	d804      	bhi.n	8002fbc <UART_SetConfig+0x158>
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d067      	beq.n	8003086 <UART_SetConfig+0x222>
 8002fb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fba:	e7a5      	b.n	8002f08 <UART_SetConfig+0xa4>
 8002fbc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002fc0:	e7a7      	b.n	8002f12 <UART_SetConfig+0xae>
 8002fc2:	4a47      	ldr	r2, [pc, #284]	; (80030e0 <UART_SetConfig+0x27c>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d1a1      	bne.n	8002f0c <UART_SetConfig+0xa8>
 8002fc8:	4b3c      	ldr	r3, [pc, #240]	; (80030bc <UART_SetConfig+0x258>)
 8002fca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fce:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002fd2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002fd6:	d045      	beq.n	8003064 <UART_SetConfig+0x200>
 8002fd8:	d804      	bhi.n	8002fe4 <UART_SetConfig+0x180>
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d053      	beq.n	8003086 <UART_SetConfig+0x222>
 8002fde:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002fe2:	e791      	b.n	8002f08 <UART_SetConfig+0xa4>
 8002fe4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002fe8:	e793      	b.n	8002f12 <UART_SetConfig+0xae>
        pclk = HAL_RCC_GetPCLK1Freq();
 8002fea:	f7ff fc3b 	bl	8002864 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8002fee:	b928      	cbnz	r0, 8002ffc <UART_SetConfig+0x198>
 8002ff0:	2000      	movs	r0, #0
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002ff2:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 8002ff4:	e9c4 331a 	strd	r3, r3, [r4, #104]	; 0x68

  return ret;
}
 8002ff8:	bd38      	pop	{r3, r4, r5, pc}
        pclk = (uint32_t) HSI_VALUE;
 8002ffa:	483a      	ldr	r0, [pc, #232]	; (80030e4 <UART_SetConfig+0x280>)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002ffc:	6862      	ldr	r2, [r4, #4]
 8002ffe:	0853      	lsrs	r3, r2, #1
 8003000:	eb03 0040 	add.w	r0, r3, r0, lsl #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003004:	f64f 73ef 	movw	r3, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003008:	fbb0 f0f2 	udiv	r0, r0, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800300c:	f1a0 0210 	sub.w	r2, r0, #16
 8003010:	429a      	cmp	r2, r3
 8003012:	f63f af7b 	bhi.w	8002f0c <UART_SetConfig+0xa8>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003016:	f020 030f 	bic.w	r3, r0, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800301a:	f3c0 0042 	ubfx	r0, r0, #1, #3
        huart->Instance->BRR = brrtemp;
 800301e:	6822      	ldr	r2, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003020:	b29b      	uxth	r3, r3
        huart->Instance->BRR = brrtemp;
 8003022:	4318      	orrs	r0, r3
 8003024:	60d0      	str	r0, [r2, #12]
 8003026:	e7e3      	b.n	8002ff0 <UART_SetConfig+0x18c>
    switch (clocksource)
 8003028:	2b08      	cmp	r3, #8
 800302a:	f63f af6f 	bhi.w	8002f0c <UART_SetConfig+0xa8>
 800302e:	a201      	add	r2, pc, #4	; (adr r2, 8003034 <UART_SetConfig+0x1d0>)
 8003030:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003034:	0800308d 	.word	0x0800308d
 8003038:	08003059 	.word	0x08003059
 800303c:	0800306b 	.word	0x0800306b
 8003040:	08002f0d 	.word	0x08002f0d
 8003044:	0800305f 	.word	0x0800305f
 8003048:	08002f0d 	.word	0x08002f0d
 800304c:	08002f0d 	.word	0x08002f0d
 8003050:	08002f0d 	.word	0x08002f0d
 8003054:	08002f1b 	.word	0x08002f1b
        pclk = HAL_RCC_GetPCLK2Freq();
 8003058:	f7ff fc14 	bl	8002884 <HAL_RCC_GetPCLK2Freq>
        break;
 800305c:	e018      	b.n	8003090 <UART_SetConfig+0x22c>
        pclk = HAL_RCC_GetSysClockFreq();
 800305e:	f7ff fb2d 	bl	80026bc <HAL_RCC_GetSysClockFreq>
        break;
 8003062:	e015      	b.n	8003090 <UART_SetConfig+0x22c>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003064:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8003068:	d0c7      	beq.n	8002ffa <UART_SetConfig+0x196>
        pclk = (uint32_t) HSI_VALUE;
 800306a:	481e      	ldr	r0, [pc, #120]	; (80030e4 <UART_SetConfig+0x280>)
 800306c:	e012      	b.n	8003094 <UART_SetConfig+0x230>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800306e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8003072:	d1f4      	bne.n	800305e <UART_SetConfig+0x1fa>
        pclk = HAL_RCC_GetSysClockFreq();
 8003074:	f7ff fb22 	bl	80026bc <HAL_RCC_GetSysClockFreq>
        break;
 8003078:	e7b9      	b.n	8002fee <UART_SetConfig+0x18a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800307a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800307e:	d1eb      	bne.n	8003058 <UART_SetConfig+0x1f4>
        pclk = HAL_RCC_GetPCLK2Freq();
 8003080:	f7ff fc00 	bl	8002884 <HAL_RCC_GetPCLK2Freq>
        break;
 8003084:	e7b3      	b.n	8002fee <UART_SetConfig+0x18a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003086:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800308a:	d0ae      	beq.n	8002fea <UART_SetConfig+0x186>
        pclk = HAL_RCC_GetPCLK1Freq();
 800308c:	f7ff fbea 	bl	8002864 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8003090:	2800      	cmp	r0, #0
 8003092:	d0ad      	beq.n	8002ff0 <UART_SetConfig+0x18c>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003094:	6862      	ldr	r2, [r4, #4]
 8003096:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 800309a:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800309e:	f64f 72ef 	movw	r2, #65519	; 0xffef
 80030a2:	f1a3 0110 	sub.w	r1, r3, #16
 80030a6:	4291      	cmp	r1, r2
 80030a8:	f63f af30 	bhi.w	8002f0c <UART_SetConfig+0xa8>
        huart->Instance->BRR = (uint16_t)usartdiv;
 80030ac:	6822      	ldr	r2, [r4, #0]
 80030ae:	60d3      	str	r3, [r2, #12]
 80030b0:	e79e      	b.n	8002ff0 <UART_SetConfig+0x18c>
 80030b2:	bf00      	nop
 80030b4:	efff69f3 	.word	0xefff69f3
 80030b8:	40011000 	.word	0x40011000
 80030bc:	40023800 	.word	0x40023800
 80030c0:	0800d31c 	.word	0x0800d31c
 80030c4:	40004400 	.word	0x40004400
 80030c8:	0800d31f 	.word	0x0800d31f
 80030cc:	40004800 	.word	0x40004800
 80030d0:	40004c00 	.word	0x40004c00
 80030d4:	40005000 	.word	0x40005000
 80030d8:	40011400 	.word	0x40011400
 80030dc:	40007800 	.word	0x40007800
 80030e0:	40007c00 	.word	0x40007c00
 80030e4:	00f42400 	.word	0x00f42400

080030e8 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80030e8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80030ea:	07da      	lsls	r2, r3, #31
{
 80030ec:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80030ee:	d506      	bpl.n	80030fe <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80030f0:	6801      	ldr	r1, [r0, #0]
 80030f2:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80030f4:	684a      	ldr	r2, [r1, #4]
 80030f6:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80030fa:	4322      	orrs	r2, r4
 80030fc:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80030fe:	079c      	lsls	r4, r3, #30
 8003100:	d506      	bpl.n	8003110 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003102:	6801      	ldr	r1, [r0, #0]
 8003104:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8003106:	684a      	ldr	r2, [r1, #4]
 8003108:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800310c:	4322      	orrs	r2, r4
 800310e:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003110:	0759      	lsls	r1, r3, #29
 8003112:	d506      	bpl.n	8003122 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003114:	6801      	ldr	r1, [r0, #0]
 8003116:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8003118:	684a      	ldr	r2, [r1, #4]
 800311a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800311e:	4322      	orrs	r2, r4
 8003120:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003122:	071a      	lsls	r2, r3, #28
 8003124:	d506      	bpl.n	8003134 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003126:	6801      	ldr	r1, [r0, #0]
 8003128:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800312a:	684a      	ldr	r2, [r1, #4]
 800312c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003130:	4322      	orrs	r2, r4
 8003132:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003134:	06dc      	lsls	r4, r3, #27
 8003136:	d506      	bpl.n	8003146 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003138:	6801      	ldr	r1, [r0, #0]
 800313a:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800313c:	688a      	ldr	r2, [r1, #8]
 800313e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003142:	4322      	orrs	r2, r4
 8003144:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003146:	0699      	lsls	r1, r3, #26
 8003148:	d506      	bpl.n	8003158 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800314a:	6801      	ldr	r1, [r0, #0]
 800314c:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800314e:	688a      	ldr	r2, [r1, #8]
 8003150:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003154:	4322      	orrs	r2, r4
 8003156:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003158:	065a      	lsls	r2, r3, #25
 800315a:	d510      	bpl.n	800317e <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800315c:	6801      	ldr	r1, [r0, #0]
 800315e:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8003160:	684a      	ldr	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003162:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003166:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800316a:	ea42 0204 	orr.w	r2, r2, r4
 800316e:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003170:	d105      	bne.n	800317e <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003172:	684a      	ldr	r2, [r1, #4]
 8003174:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8003176:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 800317a:	4322      	orrs	r2, r4
 800317c:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800317e:	061b      	lsls	r3, r3, #24
 8003180:	d506      	bpl.n	8003190 <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003182:	6802      	ldr	r2, [r0, #0]
 8003184:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8003186:	6853      	ldr	r3, [r2, #4]
 8003188:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800318c:	430b      	orrs	r3, r1
 800318e:	6053      	str	r3, [r2, #4]
  }
}
 8003190:	bd10      	pop	{r4, pc}

08003192 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003192:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003196:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800319a:	4604      	mov	r4, r0
 800319c:	460e      	mov	r6, r1
 800319e:	4615      	mov	r5, r2
 80031a0:	461f      	mov	r7, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031a2:	6822      	ldr	r2, [r4, #0]
 80031a4:	69d3      	ldr	r3, [r2, #28]
 80031a6:	ea36 0303 	bics.w	r3, r6, r3
 80031aa:	bf0c      	ite	eq
 80031ac:	2301      	moveq	r3, #1
 80031ae:	2300      	movne	r3, #0
 80031b0:	42ab      	cmp	r3, r5
 80031b2:	d001      	beq.n	80031b8 <UART_WaitOnFlagUntilTimeout+0x26>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 80031b4:	2000      	movs	r0, #0
 80031b6:	e026      	b.n	8003206 <UART_WaitOnFlagUntilTimeout+0x74>
    if (Timeout != HAL_MAX_DELAY)
 80031b8:	f1b8 3fff 	cmp.w	r8, #4294967295
 80031bc:	d0f2      	beq.n	80031a4 <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031be:	f7fe fda5 	bl	8001d0c <HAL_GetTick>
 80031c2:	1bc0      	subs	r0, r0, r7
 80031c4:	4540      	cmp	r0, r8
 80031c6:	6820      	ldr	r0, [r4, #0]
 80031c8:	d802      	bhi.n	80031d0 <UART_WaitOnFlagUntilTimeout+0x3e>
 80031ca:	f1b8 0f00 	cmp.w	r8, #0
 80031ce:	d11c      	bne.n	800320a <UART_WaitOnFlagUntilTimeout+0x78>
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031d0:	e850 3f00 	ldrex	r3, [r0]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80031d4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031d8:	e840 3200 	strex	r2, r3, [r0]
 80031dc:	2a00      	cmp	r2, #0
 80031de:	d1f7      	bne.n	80031d0 <UART_WaitOnFlagUntilTimeout+0x3e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031e0:	f100 0308 	add.w	r3, r0, #8
 80031e4:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031e8:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031ec:	f100 0108 	add.w	r1, r0, #8
 80031f0:	e841 3200 	strex	r2, r3, [r1]
 80031f4:	2a00      	cmp	r2, #0
 80031f6:	d1f3      	bne.n	80031e0 <UART_WaitOnFlagUntilTimeout+0x4e>
        huart->gState = HAL_UART_STATE_READY;
 80031f8:	2320      	movs	r3, #32
 80031fa:	67e3      	str	r3, [r4, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80031fc:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
          return HAL_TIMEOUT;
 8003200:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 8003202:	f884 2078 	strb.w	r2, [r4, #120]	; 0x78
}
 8003206:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800320a:	6803      	ldr	r3, [r0, #0]
 800320c:	075a      	lsls	r2, r3, #29
 800320e:	d5c8      	bpl.n	80031a2 <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003210:	69c3      	ldr	r3, [r0, #28]
 8003212:	051b      	lsls	r3, r3, #20
 8003214:	d5c5      	bpl.n	80031a2 <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003216:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800321a:	6203      	str	r3, [r0, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800321c:	e850 3f00 	ldrex	r3, [r0]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003220:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003224:	e840 3200 	strex	r2, r3, [r0]
 8003228:	2a00      	cmp	r2, #0
 800322a:	d1f7      	bne.n	800321c <UART_WaitOnFlagUntilTimeout+0x8a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800322c:	f100 0308 	add.w	r3, r0, #8
 8003230:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003234:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003238:	f100 0108 	add.w	r1, r0, #8
 800323c:	e841 3200 	strex	r2, r3, [r1]
 8003240:	2a00      	cmp	r2, #0
 8003242:	d1f3      	bne.n	800322c <UART_WaitOnFlagUntilTimeout+0x9a>
          huart->gState = HAL_UART_STATE_READY;
 8003244:	2320      	movs	r3, #32
 8003246:	67e3      	str	r3, [r4, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8003248:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800324c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 8003250:	e7d6      	b.n	8003200 <UART_WaitOnFlagUntilTimeout+0x6e>

08003252 <HAL_UART_Transmit>:
{
 8003252:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8003256:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8003258:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
{
 800325a:	4604      	mov	r4, r0
 800325c:	460e      	mov	r6, r1
  if (huart->gState == HAL_UART_STATE_READY)
 800325e:	2b20      	cmp	r3, #32
{
 8003260:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8003262:	d142      	bne.n	80032ea <HAL_UART_Transmit+0x98>
    if ((pData == NULL) || (Size == 0U))
 8003264:	2900      	cmp	r1, #0
 8003266:	d042      	beq.n	80032ee <HAL_UART_Transmit+0x9c>
 8003268:	2a00      	cmp	r2, #0
 800326a:	d040      	beq.n	80032ee <HAL_UART_Transmit+0x9c>
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800326c:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800326e:	2500      	movs	r5, #0
 8003270:	f8c0 5084 	str.w	r5, [r0, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003274:	67c3      	str	r3, [r0, #124]	; 0x7c
    tickstart = HAL_GetTick();
 8003276:	f7fe fd49 	bl	8001d0c <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800327a:	68a2      	ldr	r2, [r4, #8]
    tickstart = HAL_GetTick();
 800327c:	4603      	mov	r3, r0
    huart->TxXferSize  = Size;
 800327e:	f8a4 7050 	strh.w	r7, [r4, #80]	; 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003282:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
    huart->TxXferCount = Size;
 8003286:	f8a4 7052 	strh.w	r7, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800328a:	d103      	bne.n	8003294 <HAL_UART_Transmit+0x42>
 800328c:	6922      	ldr	r2, [r4, #16]
 800328e:	b90a      	cbnz	r2, 8003294 <HAL_UART_Transmit+0x42>
 8003290:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 8003292:	4616      	mov	r6, r2
    while (huart->TxXferCount > 0U)
 8003294:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003298:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
 800329c:	b292      	uxth	r2, r2
 800329e:	b93a      	cbnz	r2, 80032b0 <HAL_UART_Transmit+0x5e>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80032a0:	2140      	movs	r1, #64	; 0x40
 80032a2:	4620      	mov	r0, r4
 80032a4:	f7ff ff75 	bl	8003192 <UART_WaitOnFlagUntilTimeout>
 80032a8:	b950      	cbnz	r0, 80032c0 <HAL_UART_Transmit+0x6e>
    huart->gState = HAL_UART_STATE_READY;
 80032aa:	2320      	movs	r3, #32
 80032ac:	67e3      	str	r3, [r4, #124]	; 0x7c
    return HAL_OK;
 80032ae:	e008      	b.n	80032c2 <HAL_UART_Transmit+0x70>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80032b0:	2200      	movs	r2, #0
 80032b2:	2180      	movs	r1, #128	; 0x80
 80032b4:	4620      	mov	r0, r4
 80032b6:	9303      	str	r3, [sp, #12]
 80032b8:	f7ff ff6b 	bl	8003192 <UART_WaitOnFlagUntilTimeout>
 80032bc:	9b03      	ldr	r3, [sp, #12]
 80032be:	b118      	cbz	r0, 80032c8 <HAL_UART_Transmit+0x76>
        return HAL_TIMEOUT;
 80032c0:	2003      	movs	r0, #3
}
 80032c2:	b004      	add	sp, #16
 80032c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80032c8:	6821      	ldr	r1, [r4, #0]
      if (pdata8bits == NULL)
 80032ca:	b95e      	cbnz	r6, 80032e4 <HAL_UART_Transmit+0x92>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80032cc:	f835 2b02 	ldrh.w	r2, [r5], #2
 80032d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80032d4:	628a      	str	r2, [r1, #40]	; 0x28
      huart->TxXferCount--;
 80032d6:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 80032da:	3a01      	subs	r2, #1
 80032dc:	b292      	uxth	r2, r2
 80032de:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 80032e2:	e7d7      	b.n	8003294 <HAL_UART_Transmit+0x42>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80032e4:	f816 2b01 	ldrb.w	r2, [r6], #1
 80032e8:	e7f4      	b.n	80032d4 <HAL_UART_Transmit+0x82>
    return HAL_BUSY;
 80032ea:	2002      	movs	r0, #2
 80032ec:	e7e9      	b.n	80032c2 <HAL_UART_Transmit+0x70>
      return  HAL_ERROR;
 80032ee:	2001      	movs	r0, #1
 80032f0:	e7e7      	b.n	80032c2 <HAL_UART_Transmit+0x70>

080032f2 <HAL_UART_Receive>:
{
 80032f2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80032f6:	461f      	mov	r7, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 80032f8:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
{
 80032fc:	4604      	mov	r4, r0
 80032fe:	460d      	mov	r5, r1
  if (huart->RxState == HAL_UART_STATE_READY)
 8003300:	2b20      	cmp	r3, #32
{
 8003302:	4616      	mov	r6, r2
  if (huart->RxState == HAL_UART_STATE_READY)
 8003304:	d15e      	bne.n	80033c4 <HAL_UART_Receive+0xd2>
    if ((pData == NULL) || (Size == 0U))
 8003306:	2900      	cmp	r1, #0
 8003308:	d05e      	beq.n	80033c8 <HAL_UART_Receive+0xd6>
 800330a:	2a00      	cmp	r2, #0
 800330c:	d05c      	beq.n	80033c8 <HAL_UART_Receive+0xd6>
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800330e:	2322      	movs	r3, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003310:	f04f 0800 	mov.w	r8, #0
 8003314:	f8c0 8084 	str.w	r8, [r0, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003318:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800331c:	f8c0 8060 	str.w	r8, [r0, #96]	; 0x60
    tickstart = HAL_GetTick();
 8003320:	f7fe fcf4 	bl	8001d0c <HAL_GetTick>
    UART_MASK_COMPUTATION(huart);
 8003324:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 8003326:	4681      	mov	r9, r0
    huart->RxXferSize  = Size;
 8003328:	f8a4 6058 	strh.w	r6, [r4, #88]	; 0x58
    UART_MASK_COMPUTATION(huart);
 800332c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->RxXferCount = Size;
 8003330:	f8a4 605a 	strh.w	r6, [r4, #90]	; 0x5a
    UART_MASK_COMPUTATION(huart);
 8003334:	d11a      	bne.n	800336c <HAL_UART_Receive+0x7a>
 8003336:	6922      	ldr	r2, [r4, #16]
 8003338:	b9b2      	cbnz	r2, 8003368 <HAL_UART_Receive+0x76>
 800333a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800333e:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003342:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    uhMask = huart->Mask;
 8003346:	f8b4 805c 	ldrh.w	r8, [r4, #92]	; 0x5c
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800334a:	d120      	bne.n	800338e <HAL_UART_Receive+0x9c>
 800334c:	6923      	ldr	r3, [r4, #16]
 800334e:	b9f3      	cbnz	r3, 800338e <HAL_UART_Receive+0x9c>
 8003350:	462e      	mov	r6, r5
      pdata8bits  = NULL;
 8003352:	461d      	mov	r5, r3
    while (huart->RxXferCount > 0U)
 8003354:	f8b4 205a 	ldrh.w	r2, [r4, #90]	; 0x5a
 8003358:	b290      	uxth	r0, r2
 800335a:	b9d0      	cbnz	r0, 8003392 <HAL_UART_Receive+0xa0>
    huart->RxState = HAL_UART_STATE_READY;
 800335c:	2320      	movs	r3, #32
 800335e:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
}
 8003362:	b003      	add	sp, #12
 8003364:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    UART_MASK_COMPUTATION(huart);
 8003368:	22ff      	movs	r2, #255	; 0xff
 800336a:	e7e8      	b.n	800333e <HAL_UART_Receive+0x4c>
 800336c:	b923      	cbnz	r3, 8003378 <HAL_UART_Receive+0x86>
 800336e:	6922      	ldr	r2, [r4, #16]
 8003370:	2a00      	cmp	r2, #0
 8003372:	d0f9      	beq.n	8003368 <HAL_UART_Receive+0x76>
 8003374:	227f      	movs	r2, #127	; 0x7f
 8003376:	e7e2      	b.n	800333e <HAL_UART_Receive+0x4c>
 8003378:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800337c:	d104      	bne.n	8003388 <HAL_UART_Receive+0x96>
 800337e:	6922      	ldr	r2, [r4, #16]
 8003380:	2a00      	cmp	r2, #0
 8003382:	d0f7      	beq.n	8003374 <HAL_UART_Receive+0x82>
 8003384:	223f      	movs	r2, #63	; 0x3f
 8003386:	e7da      	b.n	800333e <HAL_UART_Receive+0x4c>
 8003388:	f8a4 805c 	strh.w	r8, [r4, #92]	; 0x5c
 800338c:	e7d9      	b.n	8003342 <HAL_UART_Receive+0x50>
      pdata16bits = NULL;
 800338e:	2600      	movs	r6, #0
 8003390:	e7e0      	b.n	8003354 <HAL_UART_Receive+0x62>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003392:	464b      	mov	r3, r9
 8003394:	2200      	movs	r2, #0
 8003396:	2120      	movs	r1, #32
 8003398:	4620      	mov	r0, r4
 800339a:	9700      	str	r7, [sp, #0]
 800339c:	f7ff fef9 	bl	8003192 <UART_WaitOnFlagUntilTimeout>
 80033a0:	b9a0      	cbnz	r0, 80033cc <HAL_UART_Receive+0xda>
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80033a2:	6823      	ldr	r3, [r4, #0]
 80033a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a6:	ea08 0303 	and.w	r3, r8, r3
      if (pdata8bits == NULL)
 80033aa:	b945      	cbnz	r5, 80033be <HAL_UART_Receive+0xcc>
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80033ac:	f826 3b02 	strh.w	r3, [r6], #2
      huart->RxXferCount--;
 80033b0:	f8b4 205a 	ldrh.w	r2, [r4, #90]	; 0x5a
 80033b4:	3a01      	subs	r2, #1
 80033b6:	b292      	uxth	r2, r2
 80033b8:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 80033bc:	e7ca      	b.n	8003354 <HAL_UART_Receive+0x62>
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80033be:	f805 3b01 	strb.w	r3, [r5], #1
        pdata8bits++;
 80033c2:	e7f5      	b.n	80033b0 <HAL_UART_Receive+0xbe>
    return HAL_BUSY;
 80033c4:	2002      	movs	r0, #2
 80033c6:	e7cc      	b.n	8003362 <HAL_UART_Receive+0x70>
      return  HAL_ERROR;
 80033c8:	2001      	movs	r0, #1
 80033ca:	e7ca      	b.n	8003362 <HAL_UART_Receive+0x70>
        return HAL_TIMEOUT;
 80033cc:	2003      	movs	r0, #3
 80033ce:	e7c8      	b.n	8003362 <HAL_UART_Receive+0x70>

080033d0 <UART_CheckIdleState>:
{
 80033d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033d2:	2500      	movs	r5, #0
{
 80033d4:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033d6:	f8c0 5084 	str.w	r5, [r0, #132]	; 0x84
  tickstart = HAL_GetTick();
 80033da:	f7fe fc97 	bl	8001d0c <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80033de:	6822      	ldr	r2, [r4, #0]
  tickstart = HAL_GetTick();
 80033e0:	4603      	mov	r3, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80033e2:	6812      	ldr	r2, [r2, #0]
 80033e4:	0712      	lsls	r2, r2, #28
 80033e6:	d40a      	bmi.n	80033fe <UART_CheckIdleState+0x2e>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033e8:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 80033ea:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 80033ec:	f884 0078 	strb.w	r0, [r4, #120]	; 0x78
  huart->gState = HAL_UART_STATE_READY;
 80033f0:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80033f2:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033f6:	6620      	str	r0, [r4, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80033f8:	6660      	str	r0, [r4, #100]	; 0x64
}
 80033fa:	b003      	add	sp, #12
 80033fc:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80033fe:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8003402:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003406:	4620      	mov	r0, r4
 8003408:	9200      	str	r2, [sp, #0]
 800340a:	462a      	mov	r2, r5
 800340c:	f7ff fec1 	bl	8003192 <UART_WaitOnFlagUntilTimeout>
 8003410:	2800      	cmp	r0, #0
 8003412:	d0e9      	beq.n	80033e8 <UART_CheckIdleState+0x18>
      return HAL_TIMEOUT;
 8003414:	2003      	movs	r0, #3
 8003416:	e7f0      	b.n	80033fa <UART_CheckIdleState+0x2a>

08003418 <HAL_UART_Init>:
{
 8003418:	b510      	push	{r4, lr}
  if (huart == NULL)
 800341a:	4604      	mov	r4, r0
 800341c:	b340      	cbz	r0, 8003470 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 800341e:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8003420:	b91b      	cbnz	r3, 800342a <HAL_UART_Init+0x12>
    huart->Lock = HAL_UNLOCKED;
 8003422:	f880 3078 	strb.w	r3, [r0, #120]	; 0x78
    HAL_UART_MspInit(huart);
 8003426:	f7fe fa13 	bl	8001850 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 800342a:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800342c:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 800342e:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 8003430:	67e3      	str	r3, [r4, #124]	; 0x7c
  __HAL_UART_DISABLE(huart);
 8003432:	6813      	ldr	r3, [r2, #0]
 8003434:	f023 0301 	bic.w	r3, r3, #1
 8003438:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800343a:	f7ff fd13 	bl	8002e64 <UART_SetConfig>
 800343e:	2801      	cmp	r0, #1
 8003440:	d016      	beq.n	8003470 <HAL_UART_Init+0x58>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003442:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003444:	b113      	cbz	r3, 800344c <HAL_UART_Init+0x34>
    UART_AdvFeatureConfig(huart);
 8003446:	4620      	mov	r0, r4
 8003448:	f7ff fe4e 	bl	80030e8 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800344c:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 800344e:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003450:	685a      	ldr	r2, [r3, #4]
 8003452:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003456:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003458:	689a      	ldr	r2, [r3, #8]
 800345a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800345e:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	f042 0201 	orr.w	r2, r2, #1
}
 8003466:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 800346a:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 800346c:	f7ff bfb0 	b.w	80033d0 <UART_CheckIdleState>
}
 8003470:	2001      	movs	r0, #1
 8003472:	bd10      	pop	{r4, pc}

08003474 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8003474:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8003478:	680a      	ldr	r2, [r1, #0]
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800347a:	f8d1 9024 	ldr.w	r9, [r1, #36]	; 0x24
 800347e:	e9d1 4307 	ldrd	r4, r3, [r1, #28]
 8003482:	e9d1 5801 	ldrd	r5, r8, [r1, #4]
 8003486:	e9d1 ec03 	ldrd	lr, ip, [r1, #12]
 800348a:	e9d1 7605 	ldrd	r7, r6, [r1, #20]
 800348e:	4323      	orrs	r3, r4
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8003490:	b9a2      	cbnz	r2, 80034bc <FMC_SDRAM_Init+0x48>
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8003492:	ea43 0209 	orr.w	r2, r3, r9
 8003496:	6801      	ldr	r1, [r0, #0]
 8003498:	432a      	orrs	r2, r5
 800349a:	f421 41ff 	bic.w	r1, r1, #32640	; 0x7f80
 800349e:	ea42 0308 	orr.w	r3, r2, r8
 80034a2:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
 80034a6:	ea43 030e 	orr.w	r3, r3, lr
 80034aa:	ea43 030c 	orr.w	r3, r3, ip
 80034ae:	433b      	orrs	r3, r7
 80034b0:	4333      	orrs	r3, r6
 80034b2:	430b      	orrs	r3, r1
 80034b4:	6003      	str	r3, [r0, #0]
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 80034b6:	2000      	movs	r0, #0
 80034b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80034bc:	6802      	ldr	r2, [r0, #0]
 80034be:	ea43 0309 	orr.w	r3, r3, r9
 80034c2:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80034c6:	4313      	orrs	r3, r2
 80034c8:	6003      	str	r3, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 80034ca:	ea45 0308 	orr.w	r3, r5, r8
 80034ce:	6842      	ldr	r2, [r0, #4]
 80034d0:	ea43 030e 	orr.w	r3, r3, lr
 80034d4:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 80034d8:	ea43 030c 	orr.w	r3, r3, ip
 80034dc:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 80034e0:	433b      	orrs	r3, r7
 80034e2:	4333      	orrs	r3, r6
 80034e4:	4313      	orrs	r3, r2
 80034e6:	6043      	str	r3, [r0, #4]
 80034e8:	e7e5      	b.n	80034b6 <FMC_SDRAM_Init+0x42>

080034ea <FMC_SDRAM_Timing_Init>:
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80034ea:	68cb      	ldr	r3, [r1, #12]
 80034ec:	f103 3cff 	add.w	ip, r3, #4294967295
 80034f0:	694b      	ldr	r3, [r1, #20]
{
 80034f2:	b5f0      	push	{r4, r5, r6, r7, lr}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80034f4:	3b01      	subs	r3, #1
 80034f6:	680f      	ldr	r7, [r1, #0]
 80034f8:	684c      	ldr	r4, [r1, #4]
 80034fa:	688e      	ldr	r6, [r1, #8]
 80034fc:	051b      	lsls	r3, r3, #20
 80034fe:	690d      	ldr	r5, [r1, #16]
 8003500:	3c01      	subs	r4, #1
 8003502:	6989      	ldr	r1, [r1, #24]
 8003504:	3e01      	subs	r6, #1
 8003506:	3d01      	subs	r5, #1
 8003508:	3f01      	subs	r7, #1
 800350a:	3901      	subs	r1, #1
 800350c:	0124      	lsls	r4, r4, #4
 800350e:	0236      	lsls	r6, r6, #8
 8003510:	042d      	lsls	r5, r5, #16
 8003512:	0609      	lsls	r1, r1, #24
 8003514:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
  if (Bank == FMC_SDRAM_BANK1)
 8003518:	b95a      	cbnz	r2, 8003532 <FMC_SDRAM_Timing_Init+0x48>
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800351a:	433b      	orrs	r3, r7
 800351c:	6882      	ldr	r2, [r0, #8]
 800351e:	4323      	orrs	r3, r4
 8003520:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 8003524:	4333      	orrs	r3, r6
 8003526:	432b      	orrs	r3, r5
 8003528:	430b      	orrs	r3, r1
 800352a:	4313      	orrs	r3, r2
 800352c:	6083      	str	r3, [r0, #8]
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
}
 800352e:	2000      	movs	r0, #0
 8003530:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8003532:	6882      	ldr	r2, [r0, #8]
 8003534:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003538:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
 800353c:	431a      	orrs	r2, r3
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800353e:	ea44 0306 	orr.w	r3, r4, r6
 8003542:	433b      	orrs	r3, r7
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8003544:	6082      	str	r2, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8003546:	68c2      	ldr	r2, [r0, #12]
 8003548:	432b      	orrs	r3, r5
 800354a:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 800354e:	430b      	orrs	r3, r1
 8003550:	4313      	orrs	r3, r2
 8003552:	60c3      	str	r3, [r0, #12]
 8003554:	e7eb      	b.n	800352e <FMC_SDRAM_Timing_Init+0x44>

08003556 <FMC_SDRAM_SendCommand>:
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8003556:	6902      	ldr	r2, [r0, #16]
{
 8003558:	b510      	push	{r4, lr}
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800355a:	e9d1 3400 	ldrd	r3, r4, [r1]
 800355e:	0d92      	lsrs	r2, r2, #22
 8003560:	4323      	orrs	r3, r4
 8003562:	68cc      	ldr	r4, [r1, #12]
 8003564:	0592      	lsls	r2, r2, #22
 8003566:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
 800356a:	4313      	orrs	r3, r2
 800356c:	688a      	ldr	r2, [r1, #8]
 800356e:	3a01      	subs	r2, #1
 8003570:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 8003574:	6103      	str	r3, [r0, #16]
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
}
 8003576:	2000      	movs	r0, #0
 8003578:	bd10      	pop	{r4, pc}

0800357a <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800357a:	6943      	ldr	r3, [r0, #20]
 800357c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003580:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 8003584:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
 8003588:	6141      	str	r1, [r0, #20]

  return HAL_OK;
}
 800358a:	2000      	movs	r0, #0
 800358c:	4770      	bx	lr
	...

08003590 <_mon_alloc_reset>:

#include <stdlib.h>

#pragma GCC push_options
#pragma GCC optimize ("O0")
static inline void _mon_alloc_reset(void) {
 8003590:	b580      	push	{r7, lr}
 8003592:	af00      	add	r7, sp, #0
    memset((void *)&io_malloc, 0, sizeof(struct io_malloc));
 8003594:	221c      	movs	r2, #28
 8003596:	2100      	movs	r1, #0
 8003598:	4805      	ldr	r0, [pc, #20]	; (80035b0 <_mon_alloc_reset+0x20>)
 800359a:	f006 f8e5 	bl	8009768 <memset>
    /* force a call of wrap functions */\
    free(malloc(10));
 800359e:	200a      	movs	r0, #10
 80035a0:	f000 ffd0 	bl	8004544 <__wrap_malloc>
 80035a4:	4603      	mov	r3, r0
 80035a6:	4618      	mov	r0, r3
 80035a8:	f000 fff4 	bl	8004594 <__wrap_free>
}
 80035ac:	bf00      	nop
 80035ae:	bd80      	pop	{r7, pc}
 80035b0:	2000156c 	.word	0x2000156c

080035b4 <cyclesCounterEnd>:
#endif
#endif
}

__STATIC_INLINE uint64_t cyclesCounterEnd(void)
{
 80035b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
#if USE_CORE_CLOCK_ONLY == 1
  return (uint64_t)(port_dwt_get_cycles() - cyclesCount.dwt_start);
#else
  uint64_t dwt_e;
  uint64_t tick_e;
  dwt_e = port_dwt_get_cycles() - cyclesCount.dwt_start;
 80035b6:	4b0e      	ldr	r3, [pc, #56]	; (80035f0 <cyclesCounterEnd+0x3c>)
 80035b8:	2100      	movs	r1, #0
 80035ba:	4d0e      	ldr	r5, [pc, #56]	; (80035f4 <cyclesCounterEnd+0x40>)
 80035bc:	685c      	ldr	r4, [r3, #4]
 80035be:	686b      	ldr	r3, [r5, #4]
 80035c0:	9101      	str	r1, [sp, #4]
 80035c2:	1ae4      	subs	r4, r4, r3
  tick_e = port_hal_get_tick() - cyclesCount.tick_start;
 80035c4:	f7fe fba2 	bl	8001d0c <HAL_GetTick>
 80035c8:	68ab      	ldr	r3, [r5, #8]
  if (tick_e > cyclesCount.dwt_max) {
 80035ca:	682a      	ldr	r2, [r5, #0]
  tick_e = port_hal_get_tick() - cyclesCount.tick_start;
 80035cc:	1ac0      	subs	r0, r0, r3
  if (tick_e > cyclesCount.dwt_max) {
 80035ce:	9901      	ldr	r1, [sp, #4]
 80035d0:	4290      	cmp	r0, r2
 80035d2:	d90a      	bls.n	80035ea <cyclesCounterEnd+0x36>
    /* overflow detected */
    dwt_e = ((tick_e/cyclesCount.dwt_max) * (uint64_t)UINT32_MAX + (uint64_t)dwt_e);
 80035d4:	460b      	mov	r3, r1
 80035d6:	f7fd fb07 	bl	8000be8 <__aeabi_uldivmod>
 80035da:	f04f 33ff 	mov.w	r3, #4294967295
 80035de:	fba0 0303 	umull	r0, r3, r0, r3
 80035e2:	1a59      	subs	r1, r3, r1
 80035e4:	1904      	adds	r4, r0, r4
 80035e6:	f141 0100 	adc.w	r1, r1, #0
  }
  return dwt_e;
#endif
#endif
}
 80035ea:	4620      	mov	r0, r4
 80035ec:	b003      	add	sp, #12
 80035ee:	bd30      	pop	{r4, r5, pc}
 80035f0:	e0001000 	.word	0xe0001000
 80035f4:	20001560 	.word	0x20001560

080035f8 <user_observer_cb>:
static struct u_observer_ctx u_observer_ctx;

/* User callback */
static ai_u32 user_observer_cb(const ai_handle cookie,
    const ai_u32 flags,
    const ai_observer_node *node) {
 80035f8:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 80035fc:	4604      	mov	r4, r0
 80035fe:	460e      	mov	r6, r1
 8003600:	4615      	mov	r5, r2

  struct u_observer_ctx *u_obs;

  volatile uint64_t ts = cyclesCounterEnd(); /* time stamp entry */
 8003602:	f7ff ffd7 	bl	80035b4 <cyclesCounterEnd>

  u_obs = (struct u_observer_ctx *)cookie;
  u_obs->n_cb += 1;
 8003606:	e9d4 3200 	ldrd	r3, r2, [r4]
  volatile uint64_t ts = cyclesCounterEnd(); /* time stamp entry */
 800360a:	e9cd 0100 	strd	r0, r1, [sp]
  u_obs->n_cb += 1;
 800360e:	3301      	adds	r3, #1
 8003610:	f142 0200 	adc.w	r2, r2, #0
 8003614:	e9c4 3200 	strd	r3, r2, [r4]

  if (flags & AI_OBSERVER_POST_EVT) {
 8003618:	0773      	lsls	r3, r6, #29
 800361a:	d51f      	bpl.n	800365c <user_observer_cb+0x64>
    const uint64_t end_t = ts - u_obs->start_t;
    u_obs->k_dur_t += end_t;
    u_obs->nodes[node->c_idx].dur += end_t;
 800361c:	6a26      	ldr	r6, [r4, #32]
    const uint64_t end_t = ts - u_obs->start_t;
 800361e:	e9d4 1002 	ldrd	r1, r0, [r4, #8]
 8003622:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003626:	1a51      	subs	r1, r2, r1
 8003628:	eb63 0000 	sbc.w	r0, r3, r0
    u_obs->k_dur_t += end_t;
 800362c:	e9d4 3206 	ldrd	r3, r2, [r4, #24]
 8003630:	185b      	adds	r3, r3, r1
 8003632:	eb40 0202 	adc.w	r2, r0, r2
 8003636:	e9c4 3206 	strd	r3, r2, [r4, #24]
    u_obs->nodes[node->c_idx].dur += end_t;
 800363a:	882b      	ldrh	r3, [r5, #0]
 800363c:	ea4f 1c03 	mov.w	ip, r3, lsl #4
 8003640:	eb06 1303 	add.w	r3, r6, r3, lsl #4
 8003644:	f856 200c 	ldr.w	r2, [r6, ip]
 8003648:	685d      	ldr	r5, [r3, #4]
 800364a:	1852      	adds	r2, r2, r1
 800364c:	f846 200c 	str.w	r2, [r6, ip]
 8003650:	eb40 0005 	adc.w	r0, r0, r5
    u_obs->nodes[node->c_idx].n_runs += 1;
 8003654:	689a      	ldr	r2, [r3, #8]
    u_obs->nodes[node->c_idx].dur += end_t;
 8003656:	6058      	str	r0, [r3, #4]
    u_obs->nodes[node->c_idx].n_runs += 1;
 8003658:	3201      	adds	r2, #1
 800365a:	609a      	str	r2, [r3, #8]
  }

  u_obs->start_t = cyclesCounterEnd();    /* time stamp exit */
 800365c:	f7ff ffaa 	bl	80035b4 <cyclesCounterEnd>
  u_obs->u_dur_t += u_obs->start_t  - ts; /* accumulate cycles used by the CB */
 8003660:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 8003664:	e9dd 8900 	ldrd	r8, r9, [sp]
  u_obs->start_t = cyclesCounterEnd();    /* time stamp exit */
 8003668:	e9c4 0102 	strd	r0, r1, [r4, #8]
  u_obs->u_dur_t += u_obs->start_t  - ts; /* accumulate cycles used by the CB */
 800366c:	ebb3 0308 	subs.w	r3, r3, r8
 8003670:	eb62 0209 	sbc.w	r2, r2, r9
 8003674:	181b      	adds	r3, r3, r0
  return 0;
}
 8003676:	f04f 0000 	mov.w	r0, #0
  u_obs->u_dur_t += u_obs->start_t  - ts; /* accumulate cycles used by the CB */
 800367a:	eb41 0102 	adc.w	r1, r1, r2
 800367e:	e9c4 3104 	strd	r3, r1, [r4, #16]
}
 8003682:	b002      	add	sp, #8
 8003684:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}

08003688 <aiDeInit>:
{
 8003688:	b510      	push	{r4, lr}
    if (net_exec_ctx[idx].handle != AI_HANDLE_NULL) {
 800368a:	4c09      	ldr	r4, [pc, #36]	; (80036b0 <aiDeInit+0x28>)
  LC_PRINT("Releasing the instance(s)...\r\n");
 800368c:	4809      	ldr	r0, [pc, #36]	; (80036b4 <aiDeInit+0x2c>)
 800368e:	f000 ff47 	bl	8004520 <lc_print>
    if (net_exec_ctx[idx].handle != AI_HANDLE_NULL) {
 8003692:	6820      	ldr	r0, [r4, #0]
 8003694:	b150      	cbz	r0, 80036ac <aiDeInit+0x24>
      if (ai_mnetwork_destroy(net_exec_ctx[idx].handle)
 8003696:	f001 f957 	bl	8004948 <ai_mnetwork_destroy>
 800369a:	b128      	cbz	r0, 80036a8 <aiDeInit+0x20>
        err = ai_mnetwork_get_error(net_exec_ctx[idx].handle);
 800369c:	6820      	ldr	r0, [r4, #0]
 800369e:	f001 f974 	bl	800498a <ai_mnetwork_get_error>
        aiLogErr(err, "ai_mnetwork_destroy");
 80036a2:	4905      	ldr	r1, [pc, #20]	; (80036b8 <aiDeInit+0x30>)
 80036a4:	f000 fd2e 	bl	8004104 <aiLogErr>
      net_exec_ctx[idx].handle = AI_HANDLE_NULL;
 80036a8:	2300      	movs	r3, #0
 80036aa:	6023      	str	r3, [r4, #0]
}
 80036ac:	bd10      	pop	{r4, pc}
 80036ae:	bf00      	nop
 80036b0:	200014a0 	.word	0x200014a0
 80036b4:	0800c6c0 	.word	0x0800c6c0
 80036b8:	0800c6df 	.word	0x0800c6df

080036bc <aiTestConsole>:
#define CONS_EVT_HIDE       (6)

#define CONS_EVT_UNDEFINED  (100)

static int aiTestConsole(void)
{
 80036bc:	b513      	push	{r0, r1, r4, lr}
  uint8_t c = 0;
 80036be:	2400      	movs	r4, #0

  if (ioRawGetUint8(&c, 5000) == -1) /* Timeout */
 80036c0:	f241 3188 	movw	r1, #5000	; 0x1388
 80036c4:	f10d 0007 	add.w	r0, sp, #7
  uint8_t c = 0;
 80036c8:	f88d 4007 	strb.w	r4, [sp, #7]
  if (ioRawGetUint8(&c, 5000) == -1) /* Timeout */
 80036cc:	f000 fef8 	bl	80044c0 <ioRawGetUint8>
 80036d0:	1c43      	adds	r3, r0, #1
 80036d2:	d015      	beq.n	8003700 <aiTestConsole+0x44>
    return CONS_EVT_TIMEOUT;

  if ((c == 'q') || (c == 'Q'))
 80036d4:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80036d8:	f002 03df 	and.w	r3, r2, #223	; 0xdf
 80036dc:	2b51      	cmp	r3, #81	; 0x51
 80036de:	d011      	beq.n	8003704 <aiTestConsole+0x48>
    return CONS_EVT_QUIT;

  if ((c == 'd') || (c == 'D'))
 80036e0:	2b44      	cmp	r3, #68	; 0x44
 80036e2:	d011      	beq.n	8003708 <aiTestConsole+0x4c>
    return CONS_EVT_HIDE;

  if ((c == 'r') || (c == 'R'))
 80036e4:	2b52      	cmp	r3, #82	; 0x52
 80036e6:	d011      	beq.n	800370c <aiTestConsole+0x50>
    return CONS_EVT_RESTART;

  if ((c == 'h') || (c == 'H') || (c == '?'))
 80036e8:	2b48      	cmp	r3, #72	; 0x48
 80036ea:	d011      	beq.n	8003710 <aiTestConsole+0x54>
 80036ec:	2a3f      	cmp	r2, #63	; 0x3f
 80036ee:	d00f      	beq.n	8003710 <aiTestConsole+0x54>
    return CONS_EVT_HELP;

  if ((c == 'p') || (c == 'P'))
 80036f0:	2b50      	cmp	r3, #80	; 0x50
 80036f2:	d00f      	beq.n	8003714 <aiTestConsole+0x58>
    return CONS_EVT_PAUSE;

  if ((c == 'x') || (c == 'X'))
    return CONS_EVT_PROF;
 80036f4:	2b58      	cmp	r3, #88	; 0x58
 80036f6:	bf14      	ite	ne
 80036f8:	2064      	movne	r0, #100	; 0x64
 80036fa:	2005      	moveq	r0, #5

  return CONS_EVT_UNDEFINED;
}
 80036fc:	b002      	add	sp, #8
 80036fe:	bd10      	pop	{r4, pc}
    return CONS_EVT_TIMEOUT;
 8003700:	4620      	mov	r0, r4
 8003702:	e7fb      	b.n	80036fc <aiTestConsole+0x40>
    return CONS_EVT_QUIT;
 8003704:	2001      	movs	r0, #1
 8003706:	e7f9      	b.n	80036fc <aiTestConsole+0x40>
    return CONS_EVT_HIDE;
 8003708:	2006      	movs	r0, #6
 800370a:	e7f7      	b.n	80036fc <aiTestConsole+0x40>
    return CONS_EVT_RESTART;
 800370c:	2002      	movs	r0, #2
 800370e:	e7f5      	b.n	80036fc <aiTestConsole+0x40>
    return CONS_EVT_HELP;
 8003710:	2003      	movs	r0, #3
 8003712:	e7f3      	b.n	80036fc <aiTestConsole+0x40>
    return CONS_EVT_PAUSE;
 8003714:	2004      	movs	r0, #4
 8003716:	e7f1      	b.n	80036fc <aiTestConsole+0x40>

08003718 <aiObserverInit>:
{
 8003718:	b530      	push	{r4, r5, lr}
  if (!net_ctx || (net_ctx->handle == AI_HANDLE_NULL) || !net_ctx->report.n_nodes)
 800371a:	4604      	mov	r4, r0
{
 800371c:	b093      	sub	sp, #76	; 0x4c
  if (!net_ctx || (net_ctx->handle == AI_HANDLE_NULL) || !net_ctx->report.n_nodes)
 800371e:	b1e0      	cbz	r0, 800375a <aiObserverInit+0x42>
 8003720:	6800      	ldr	r0, [r0, #0]
 8003722:	b1d0      	cbz	r0, 800375a <aiObserverInit+0x42>
 8003724:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8003728:	b1bb      	cbz	r3, 800375a <aiObserverInit+0x42>
  memset((void *)&u_observer_ctx, 0, sizeof(struct u_observer_ctx));
 800372a:	4d17      	ldr	r5, [pc, #92]	; (8003788 <aiObserverInit+0x70>)
  ai_mnetwork_get_private_handle(net_ctx->handle, &net_hdl, &net_params);
 800372c:	aa04      	add	r2, sp, #16
 800372e:	a903      	add	r1, sp, #12
 8003730:	f001 f968 	bl	8004a04 <ai_mnetwork_get_private_handle>
  memset((void *)&u_observer_ctx, 0, sizeof(struct u_observer_ctx));
 8003734:	2228      	movs	r2, #40	; 0x28
 8003736:	2100      	movs	r1, #0
 8003738:	4628      	mov	r0, r5
 800373a:	f006 f815 	bl	8009768 <memset>
  sz = net_ctx->report.n_nodes * sizeof(struct u_node_stat);
 800373e:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8003742:	0112      	lsls	r2, r2, #4
  u_observer_ctx.nodes = (struct u_node_stat*)malloc(sz);
 8003744:	4610      	mov	r0, r2
 8003746:	9201      	str	r2, [sp, #4]
 8003748:	f000 fefc 	bl	8004544 <__wrap_malloc>
  if (!u_observer_ctx.nodes) {
 800374c:	9a01      	ldr	r2, [sp, #4]
  u_observer_ctx.nodes = (struct u_node_stat*)malloc(sz);
 800374e:	6228      	str	r0, [r5, #32]
  if (!u_observer_ctx.nodes) {
 8003750:	b928      	cbnz	r0, 800375e <aiObserverInit+0x46>
    LC_PRINT("W: enable to allocate the u_node_stats (sz=%d) ..\r\n", sz);
 8003752:	4611      	mov	r1, r2
 8003754:	480d      	ldr	r0, [pc, #52]	; (800378c <aiObserverInit+0x74>)
 8003756:	f000 fee3 	bl	8004520 <lc_print>
}
 800375a:	b013      	add	sp, #76	; 0x4c
 800375c:	bd30      	pop	{r4, r5, pc}
  memset(u_observer_ctx.nodes, 0, sz);
 800375e:	2100      	movs	r1, #0
 8003760:	f006 f802 	bl	8009768 <memset>
  res = ai_platform_observer_register(net_hdl, user_observer_cb,
 8003764:	2306      	movs	r3, #6
 8003766:	462a      	mov	r2, r5
 8003768:	4909      	ldr	r1, [pc, #36]	; (8003790 <aiObserverInit+0x78>)
 800376a:	9803      	ldr	r0, [sp, #12]
 800376c:	f004 f8ba 	bl	80078e4 <ai_platform_observer_register>
  if (!res) {
 8003770:	4604      	mov	r4, r0
 8003772:	2800      	cmp	r0, #0
 8003774:	d1f1      	bne.n	800375a <aiObserverInit+0x42>
    LC_PRINT("W: unable to register the user CB\r\n");
 8003776:	4807      	ldr	r0, [pc, #28]	; (8003794 <aiObserverInit+0x7c>)
 8003778:	f000 fed2 	bl	8004520 <lc_print>
    free(u_observer_ctx.nodes);
 800377c:	6a28      	ldr	r0, [r5, #32]
 800377e:	f000 ff09 	bl	8004594 <__wrap_free>
    u_observer_ctx.nodes = NULL;
 8003782:	622c      	str	r4, [r5, #32]
    return;
 8003784:	e7e9      	b.n	800375a <aiObserverInit+0x42>
 8003786:	bf00      	nop
 8003788:	20001538 	.word	0x20001538
 800378c:	0800c6f3 	.word	0x0800c6f3
 8003790:	080035f9 	.word	0x080035f9
 8003794:	0800c727 	.word	0x0800c727

08003798 <aiObserverDone>:
{
 8003798:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
 800379c:	ed2d 8b02 	vpush	{d8}
 80037a0:	b0a0      	sub	sp, #128	; 0x80
  if (!net_ctx || (net_ctx->handle == AI_HANDLE_NULL) ||
 80037a2:	2800      	cmp	r0, #0
 80037a4:	f000 80de 	beq.w	8003964 <aiObserverDone+0x1cc>
 80037a8:	6803      	ldr	r3, [r0, #0]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	f000 80da 	beq.w	8003964 <aiObserverDone+0x1cc>
 80037b0:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 80037b4:	2a00      	cmp	r2, #0
 80037b6:	f000 80d5 	beq.w	8003964 <aiObserverDone+0x1cc>
      !net_ctx->report.n_nodes || !u_observer_ctx.nodes)
 80037ba:	4d6d      	ldr	r5, [pc, #436]	; (8003970 <aiObserverDone+0x1d8>)
 80037bc:	6a2a      	ldr	r2, [r5, #32]
 80037be:	2a00      	cmp	r2, #0
 80037c0:	f000 80d0 	beq.w	8003964 <aiObserverDone+0x1cc>
  ai_mnetwork_get_private_handle(net_ctx->handle, &net_hdl, &net_params);
 80037c4:	4618      	mov	r0, r3
 80037c6:	aa12      	add	r2, sp, #72	; 0x48
 80037c8:	a909      	add	r1, sp, #36	; 0x24
  dwtCyclesToTime(u_observer_ctx.k_dur_t / u_observer_ctx.nodes[0].n_runs, &t);
 80037ca:	2400      	movs	r4, #0
  ai_mnetwork_get_private_handle(net_ctx->handle, &net_hdl, &net_params);
 80037cc:	f001 f91a 	bl	8004a04 <ai_mnetwork_get_private_handle>
  ai_platform_observer_unregister(net_hdl, user_observer_cb,
 80037d0:	462a      	mov	r2, r5
 80037d2:	4968      	ldr	r1, [pc, #416]	; (8003974 <aiObserverDone+0x1dc>)
  LC_PRINT("  kernel  : %d.%03dms (time passed in the c-kernel fcts)\r\n", t.s * 1000 + t.ms, t.us);
 80037d4:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
  ai_platform_observer_unregister(net_hdl, user_observer_cb,
 80037d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80037da:	f004 f9c9 	bl	8007b70 <ai_platform_observer_unregister>
  LC_PRINT("\r\n Inference time by c-node\r\n");
 80037de:	4866      	ldr	r0, [pc, #408]	; (8003978 <aiObserverDone+0x1e0>)
 80037e0:	f000 fe9e 	bl	8004520 <lc_print>
  dwtCyclesToTime(u_observer_ctx.k_dur_t / u_observer_ctx.nodes[0].n_runs, &t);
 80037e4:	6a2b      	ldr	r3, [r5, #32]
  LC_PRINT("\r\n %-6s%-20s%-7s  %s\r\n", "c_id", "type", "id", "time (ms)");
 80037e6:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8003994 <aiObserverDone+0x1fc>
  dwtCyclesToTime(u_observer_ctx.k_dur_t / u_observer_ctx.nodes[0].n_runs, &t);
 80037ea:	689a      	ldr	r2, [r3, #8]
 80037ec:	4623      	mov	r3, r4
 80037ee:	e9d5 0106 	ldrd	r0, r1, [r5, #24]
 80037f2:	f7fd f9f9 	bl	8000be8 <__aeabi_uldivmod>
 80037f6:	aa0a      	add	r2, sp, #40	; 0x28
 80037f8:	f000 ff20 	bl	800463c <dwtCyclesToTime>
  LC_PRINT("  kernel  : %d.%03dms (time passed in the c-kernel fcts)\r\n", t.s * 1000 + t.ms, t.us);
 80037fc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80037fe:	485f      	ldr	r0, [pc, #380]	; (800397c <aiObserverDone+0x1e4>)
 8003800:	e9dd 130b 	ldrd	r1, r3, [sp, #44]	; 0x2c
 8003804:	fb06 3101 	mla	r1, r6, r1, r3
 8003808:	f000 fe8a 	bl	8004520 <lc_print>
  dwtCyclesToTime(u_observer_ctx.u_dur_t / u_observer_ctx.nodes[0].n_runs, &t);
 800380c:	6a2b      	ldr	r3, [r5, #32]
 800380e:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8003812:	689a      	ldr	r2, [r3, #8]
 8003814:	4623      	mov	r3, r4
 8003816:	f7fd f9e7 	bl	8000be8 <__aeabi_uldivmod>
 800381a:	aa0a      	add	r2, sp, #40	; 0x28
 800381c:	f000 ff0e 	bl	800463c <dwtCyclesToTime>
  LC_PRINT("  user    : %d.%03dms (time passed in the user cb)\r\n", t.s * 1000 + t.ms, t.us);
 8003820:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8003822:	4857      	ldr	r0, [pc, #348]	; (8003980 <aiObserverDone+0x1e8>)
 8003824:	e9dd 130b 	ldrd	r1, r3, [sp, #44]	; 0x2c
 8003828:	fb06 3101 	mla	r1, r6, r1, r3
  cumul = 0;
 800382c:	4626      	mov	r6, r4
  LC_PRINT("  user    : %d.%03dms (time passed in the user cb)\r\n", t.s * 1000 + t.ms, t.us);
 800382e:	f000 fe77 	bl	8004520 <lc_print>
  LC_PRINT("\r\n %-6s%-20s%-7s  %s\r\n", "c_id", "type", "id", "time (ms)");
 8003832:	f1a8 0324 	sub.w	r3, r8, #36	; 0x24
 8003836:	f1a8 0221 	sub.w	r2, r8, #33	; 0x21
 800383a:	f1a8 011c 	sub.w	r1, r8, #28
 800383e:	f1a8 0017 	sub.w	r0, r8, #23
 8003842:	f8cd 8000 	str.w	r8, [sp]
 8003846:	f000 fe6b 	bl	8004520 <lc_print>
  LC_PRINT(" ---------------------------------------------------\r\n");
 800384a:	f108 000a 	add.w	r0, r8, #10
 800384e:	f000 fe67 	bl	8004520 <lc_print>
      fmt = " %-6d%-20s%-5d %6d.%03d %6.02f %c\r\n";
 8003852:	f1a8 03d6 	sub.w	r3, r8, #214	; 0xd6
  node_info.c_idx = 0;
 8003856:	f8ad 4038 	strh.w	r4, [sp, #56]	; 0x38
      fmt = " %-6d%-20s%-5d %6d.%03d %6.02f %c\r\n";
 800385a:	9307      	str	r3, [sp, #28]
  while (ai_platform_observer_node_info(net_hdl, &node_info)) {
 800385c:	a90e      	add	r1, sp, #56	; 0x38
 800385e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003860:	f003 ff6a 	bl	8007738 <ai_platform_observer_node_info>
 8003864:	4680      	mov	r8, r0
 8003866:	bb20      	cbnz	r0, 80038b2 <aiObserverDone+0x11a>
  LC_PRINT(" -------------------------------------------------\r\n");
 8003868:	4846      	ldr	r0, [pc, #280]	; (8003984 <aiObserverDone+0x1ec>)
 800386a:	f000 fe59 	bl	8004520 <lc_print>
  cumul /= u_observer_ctx.nodes[0].n_runs;
 800386e:	6a2b      	ldr	r3, [r5, #32]
 8003870:	4620      	mov	r0, r4
 8003872:	4631      	mov	r1, r6
 8003874:	689a      	ldr	r2, [r3, #8]
 8003876:	4643      	mov	r3, r8
 8003878:	f7fd f9b6 	bl	8000be8 <__aeabi_uldivmod>
  dwtCyclesToTime(cumul, &t);
 800387c:	aa0a      	add	r2, sp, #40	; 0x28
 800387e:	f000 fedd 	bl	800463c <dwtCyclesToTime>
  LC_PRINT(" %31s %6d.%03d ms\r\n", "", t.s * 1000 + t.ms, t.us);
 8003882:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003884:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003886:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800388a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800388c:	fb00 1202 	mla	r2, r0, r2, r1
 8003890:	493d      	ldr	r1, [pc, #244]	; (8003988 <aiObserverDone+0x1f0>)
 8003892:	1c48      	adds	r0, r1, #1
 8003894:	f000 fe44 	bl	8004520 <lc_print>
  free(u_observer_ctx.nodes);
 8003898:	6a28      	ldr	r0, [r5, #32]
 800389a:	f000 fe7b 	bl	8004594 <__wrap_free>
  memset((void *)&u_observer_ctx, 0, sizeof(struct u_observer_ctx));
 800389e:	2228      	movs	r2, #40	; 0x28
 80038a0:	4641      	mov	r1, r8
 80038a2:	4833      	ldr	r0, [pc, #204]	; (8003970 <aiObserverDone+0x1d8>)
}
 80038a4:	b020      	add	sp, #128	; 0x80
 80038a6:	ecbd 8b02 	vpop	{d8}
 80038aa:	e8bd 4f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
  memset((void *)&u_observer_ctx, 0, sizeof(struct u_observer_ctx));
 80038ae:	f005 bf5b 	b.w	8009768 <memset>
    struct u_node_stat *sn = &u_observer_ctx.nodes[node_info.c_idx];
 80038b2:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 80038b6:	6a2a      	ldr	r2, [r5, #32]
 80038b8:	0119      	lsls	r1, r3, #4
 80038ba:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    cumul +=  sn->dur;
 80038be:	5850      	ldr	r0, [r2, r1]
 80038c0:	6859      	ldr	r1, [r3, #4]
 80038c2:	1904      	adds	r4, r0, r4
    dwtCyclesToTime(sn->dur / (uint64_t)sn->n_runs, &t);
 80038c4:	689a      	ldr	r2, [r3, #8]
 80038c6:	f04f 0300 	mov.w	r3, #0
    cumul +=  sn->dur;
 80038ca:	eb41 0606 	adc.w	r6, r1, r6
    dwtCyclesToTime(sn->dur / (uint64_t)sn->n_runs, &t);
 80038ce:	f7fd f98b 	bl	8000be8 <__aeabi_uldivmod>
 80038d2:	aa0a      	add	r2, sp, #40	; 0x28
 80038d4:	f000 feb2 	bl	800463c <dwtCyclesToTime>
    if ((node_info.type & (ai_u16)0x8000) >> 15)
 80038d8:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
      fmt = " %-6d%-20s%-5d %6d.%03d %6.02f %c\r\n";
 80038dc:	9907      	ldr	r1, [sp, #28]
 80038de:	4a2b      	ldr	r2, [pc, #172]	; (800398c <aiObserverDone+0x1f4>)
    if ((node_info.type & (ai_u16)0x8000) >> 15)
 80038e0:	f8bd 003a 	ldrh.w	r0, [sp, #58]	; 0x3a
      fmt = " %-6d%-20s%-5d %6d.%03d %6.02f %c\r\n";
 80038e4:	ea12 0223 	ands.w	r2, r2, r3, asr #32
 80038e8:	bf38      	it	cc
 80038ea:	460a      	movcc	r2, r1
    LC_PRINT(fmt, node_info.c_idx,
 80038ec:	f8bd a038 	ldrh.w	sl, [sp, #56]	; 0x38
 80038f0:	f3c0 000e 	ubfx	r0, r0, #0, #15
      fmt = " %-6d%-20s%-5d %6d.%03d %6.02f %c\r\n";
 80038f4:	4691      	mov	r9, r2
    LC_PRINT(fmt, node_info.c_idx,
 80038f6:	f004 fbf5 	bl	80080e4 <ai_layer_type_name>
 80038fa:	2325      	movs	r3, #37	; 0x25
 80038fc:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 8003900:	4680      	mov	r8, r0
 8003902:	f8bd b03c 	ldrh.w	fp, [sp, #60]	; 0x3c
 8003906:	9304      	str	r3, [sp, #16]
 8003908:	6a2b      	ldr	r3, [r5, #32]
 800390a:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 800390e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003912:	f7fc fe5b 	bl	80005cc <__aeabi_ul2d>
 8003916:	2200      	movs	r2, #0
 8003918:	4b1d      	ldr	r3, [pc, #116]	; (8003990 <aiObserverDone+0x1f8>)
 800391a:	f7fc fe8d 	bl	8000638 <__aeabi_dmul>
 800391e:	ec41 0b18 	vmov	d8, r0, r1
 8003922:	e9d5 0106 	ldrd	r0, r1, [r5, #24]
 8003926:	f7fc fe51 	bl	80005cc <__aeabi_ul2d>
 800392a:	4602      	mov	r2, r0
 800392c:	460b      	mov	r3, r1
 800392e:	ec51 0b18 	vmov	r0, r1, d8
 8003932:	f7fc ffab 	bl	800088c <__aeabi_ddiv>
 8003936:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003938:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800393a:	9301      	str	r3, [sp, #4]
 800393c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800393e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003942:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003946:	4648      	mov	r0, r9
 8003948:	fb01 3302 	mla	r3, r1, r2, r3
 800394c:	4642      	mov	r2, r8
 800394e:	4651      	mov	r1, sl
 8003950:	9300      	str	r3, [sp, #0]
 8003952:	465b      	mov	r3, fp
 8003954:	f000 fde4 	bl	8004520 <lc_print>
    node_info.c_idx++;
 8003958:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 800395c:	3301      	adds	r3, #1
 800395e:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 8003962:	e77b      	b.n	800385c <aiObserverDone+0xc4>
}
 8003964:	b020      	add	sp, #128	; 0x80
 8003966:	ecbd 8b02 	vpop	{d8}
 800396a:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
 800396e:	bf00      	nop
 8003970:	20001538 	.word	0x20001538
 8003974:	080035f9 	.word	0x080035f9
 8003978:	0800c796 	.word	0x0800c796
 800397c:	0800c7b4 	.word	0x0800c7b4
 8003980:	0800c7ef 	.word	0x0800c7ef
 8003984:	0800c889 	.word	0x0800c889
 8003988:	0800c8be 	.word	0x0800c8be
 800398c:	0800c74b 	.word	0x0800c74b
 8003990:	40590000 	.word	0x40590000
 8003994:	0800c848 	.word	0x0800c848

08003998 <aiSystemPerformanceInit>:
 * Exported/Public functions
 * -----------------------------------------------------------------------------
 */

int aiSystemPerformanceInit(void)
{
 8003998:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
  LC_PRINT("\r\n#\r\n");
 800399c:	484e      	ldr	r0, [pc, #312]	; (8003ad8 <aiSystemPerformanceInit+0x140>)
{
 800399e:	b086      	sub	sp, #24
  LC_PRINT("\r\n#\r\n");
 80039a0:	f000 fdbe 	bl	8004520 <lc_print>
  LC_PRINT("# %s %d.%d\r\n", _APP_NAME_ , _APP_VERSION_MAJOR_,
 80039a4:	494d      	ldr	r1, [pc, #308]	; (8003adc <aiSystemPerformanceInit+0x144>)
 80039a6:	2300      	movs	r3, #0
 80039a8:	2207      	movs	r2, #7
 80039aa:	f101 0022 	add.w	r0, r1, #34	; 0x22
  port_dwt_reset();
 80039ae:	4d4c      	ldr	r5, [pc, #304]	; (8003ae0 <aiSystemPerformanceInit+0x148>)
 80039b0:	2400      	movs	r4, #0
 80039b2:	f000 fdb5 	bl	8004520 <lc_print>
      _APP_VERSION_MINOR_ );
  LC_PRINT("#\r\n");
 80039b6:	484b      	ldr	r0, [pc, #300]	; (8003ae4 <aiSystemPerformanceInit+0x14c>)
 80039b8:	f000 fdb2 	bl	8004520 <lc_print>
    net_exec_ctx[idx].handle = AI_HANDLE_NULL;
 80039bc:	4e4a      	ldr	r6, [pc, #296]	; (8003ae8 <aiSystemPerformanceInit+0x150>)

  systemSettingLog();
 80039be:	f000 feb3 	bl	8004728 <systemSettingLog>
      LC_PRINT("\r\nFound network \"%s\"\r\n", nn_name);
 80039c2:	f8df 9140 	ldr.w	r9, [pc, #320]	; 8003b04 <aiSystemPerformanceInit+0x16c>

  crcIpInit();
 80039c6:	f000 ff27 	bl	8004818 <port_hal_crc_ip_init_imp>
  port_dwt_init();
 80039ca:	f000 ff35 	bl	8004838 <port_dwt_init_imp>
  port_hal_delay(100);
 80039ce:	2064      	movs	r0, #100	; 0x64
  port_dwt_reset();
 80039d0:	606c      	str	r4, [r5, #4]
  LC_PRINT("Creating the network \"%s\"..\r\n", nn_name);
 80039d2:	f109 0a17 	add.w	sl, r9, #23
  port_hal_delay(100);
 80039d6:	f7fe f99f 	bl	8001d18 <HAL_Delay>
  st = port_dwt_get_cycles();
 80039da:	6868      	ldr	r0, [r5, #4]
  dwtCyclesToTime(st/100, &t);
 80039dc:	2564      	movs	r5, #100	; 0x64
 80039de:	aa02      	add	r2, sp, #8
 80039e0:	4621      	mov	r1, r4
  LC_PRINT("Initializing the network\r\n");
 80039e2:	f109 0b48 	add.w	fp, r9, #72	; 0x48
 80039e6:	fbb0 f0f5 	udiv	r0, r0, r5
 80039ea:	f000 fe27 	bl	800463c <dwtCyclesToTime>
  LC_PRINT(" Timestamp    : SysTick + DWT (delay(1)=%d.%03d ms)\r\n",
 80039ee:	9a05      	ldr	r2, [sp, #20]
 80039f0:	483e      	ldr	r0, [pc, #248]	; (8003aec <aiSystemPerformanceInit+0x154>)
 80039f2:	e9dd 1303 	ldrd	r1, r3, [sp, #12]
 80039f6:	fb05 3101 	mla	r1, r5, r1, r3
    net_exec_ctx[idx].handle = AI_HANDLE_NULL;
 80039fa:	4635      	mov	r5, r6
 80039fc:	f000 fd90 	bl	8004520 <lc_print>
  dwtCyclesToTime(UINT32_MAX, &t);
 8003a00:	aa02      	add	r2, sp, #8
 8003a02:	2100      	movs	r1, #0
 8003a04:	f04f 30ff 	mov.w	r0, #4294967295
 8003a08:	f000 fe18 	bl	800463c <dwtCyclesToTime>
  cyclesCount.dwt_max = t.s * 1000 + t.ms;
 8003a0c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003a10:	9a03      	ldr	r2, [sp, #12]
 8003a12:	9b04      	ldr	r3, [sp, #16]
 8003a14:	fb01 3302 	mla	r3, r1, r2, r3
 8003a18:	4a35      	ldr	r2, [pc, #212]	; (8003af0 <aiSystemPerformanceInit+0x158>)
 8003a1a:	6013      	str	r3, [r2, #0]
  port_dwt_init();
 8003a1c:	f000 ff0c 	bl	8004838 <port_dwt_init_imp>
  aiPlatformVersion();
 8003a20:	f000 fb5a 	bl	80040d8 <aiPlatformVersion>
  LC_PRINT("Discovering the network(s)...\r\n");
 8003a24:	4833      	ldr	r0, [pc, #204]	; (8003af4 <aiSystemPerformanceInit+0x15c>)
    net_exec_ctx[idx].handle = AI_HANDLE_NULL;
 8003a26:	f845 4b08 	str.w	r4, [r5], #8
  LC_PRINT("Discovering the network(s)...\r\n");
 8003a2a:	f000 fd79 	bl	8004520 <lc_print>
    nn_name = ai_mnetwork_find(NULL, idx);
 8003a2e:	4621      	mov	r1, r4
 8003a30:	2000      	movs	r0, #0
 8003a32:	f000 ff4d 	bl	80048d0 <ai_mnetwork_find>
    if (nn_name) {
 8003a36:	4680      	mov	r8, r0
 8003a38:	b190      	cbz	r0, 8003a60 <aiSystemPerformanceInit+0xc8>
      LC_PRINT("\r\nFound network \"%s\"\r\n", nn_name);
 8003a3a:	4601      	mov	r1, r0
 8003a3c:	4648      	mov	r0, r9
 8003a3e:	f000 fd6f 	bl	8004520 <lc_print>
  LC_PRINT("Creating the network \"%s\"..\r\n", nn_name);
 8003a42:	4641      	mov	r1, r8
 8003a44:	4650      	mov	r0, sl
 8003a46:	f000 fd6b 	bl	8004520 <lc_print>
  err = ai_mnetwork_create(nn_name, &ctx->handle, NULL);
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	f1a5 0108 	sub.w	r1, r5, #8
 8003a50:	4640      	mov	r0, r8
 8003a52:	f000 ff4b 	bl	80048ec <ai_mnetwork_create>
  if (err.type) {
 8003a56:	b2c3      	uxtb	r3, r0
 8003a58:	b14b      	cbz	r3, 8003a6e <aiSystemPerformanceInit+0xd6>
    aiLogErr(err, "ai_mnetwork_create");
 8003a5a:	4927      	ldr	r1, [pc, #156]	; (8003af8 <aiSystemPerformanceInit+0x160>)
 8003a5c:	f000 fb52 	bl	8004104 <aiLogErr>
  cyclesCounterInit();

  aiInit();

  srand(3); /* deterministic outcome */
 8003a60:	2003      	movs	r0, #3
 8003a62:	f006 fbd3 	bl	800a20c <srand>

  return 0;
}
 8003a66:	2000      	movs	r0, #0
 8003a68:	b006      	add	sp, #24
 8003a6a:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
  LC_PRINT("Initializing the network\r\n");
 8003a6e:	4658      	mov	r0, fp
 8003a70:	46a8      	mov	r8, r5
 8003a72:	f000 fd55 	bl	8004520 <lc_print>
  if (!ai_mnetwork_get_report(ctx->handle, &ctx->report)) {
 8003a76:	4629      	mov	r1, r5
 8003a78:	f855 0c08 	ldr.w	r0, [r5, #-8]
 8003a7c:	f000 ff7a 	bl	8004974 <ai_mnetwork_get_report>
 8003a80:	4603      	mov	r3, r0
 8003a82:	b938      	cbnz	r0, 8003a94 <aiSystemPerformanceInit+0xfc>
    err = ai_mnetwork_get_error(ctx->handle);
 8003a84:	2290      	movs	r2, #144	; 0x90
 8003a86:	9301      	str	r3, [sp, #4]
 8003a88:	4354      	muls	r4, r2
 8003a8a:	5930      	ldr	r0, [r6, r4]
 8003a8c:	f000 ff7d 	bl	800498a <ai_mnetwork_get_error>
    aiLogErr(err, "ai_mnetwork_get_info");
 8003a90:	491a      	ldr	r1, [pc, #104]	; (8003afc <aiSystemPerformanceInit+0x164>)
 8003a92:	e00b      	b.n	8003aac <aiSystemPerformanceInit+0x114>
  if (!ai_mnetwork_init(ctx->handle)) {
 8003a94:	f855 0c08 	ldr.w	r0, [r5, #-8]
 8003a98:	f000 ff84 	bl	80049a4 <ai_mnetwork_init>
 8003a9c:	b970      	cbnz	r0, 8003abc <aiSystemPerformanceInit+0x124>
    err = ai_mnetwork_get_error(ctx->handle);
 8003a9e:	2290      	movs	r2, #144	; 0x90
 8003aa0:	9001      	str	r0, [sp, #4]
 8003aa2:	4354      	muls	r4, r2
 8003aa4:	5930      	ldr	r0, [r6, r4]
 8003aa6:	f000 ff70 	bl	800498a <ai_mnetwork_get_error>
    aiLogErr(err, "ai_mnetwork_init");
 8003aaa:	4915      	ldr	r1, [pc, #84]	; (8003b00 <aiSystemPerformanceInit+0x168>)
    aiLogErr(err, "ai_mnetwork_get_info");
 8003aac:	f000 fb2a 	bl	8004104 <aiLogErr>
    ai_mnetwork_destroy(ctx->handle);
 8003ab0:	5930      	ldr	r0, [r6, r4]
 8003ab2:	f000 ff49 	bl	8004948 <ai_mnetwork_destroy>
    ctx->handle = AI_HANDLE_NULL;
 8003ab6:	9b01      	ldr	r3, [sp, #4]
 8003ab8:	5133      	str	r3, [r6, r4]
  } while (nn_name);
 8003aba:	e7d1      	b.n	8003a60 <aiSystemPerformanceInit+0xc8>
  if (ai_mnetwork_get_report(ctx->handle, &ctx->report)) {
 8003abc:	4629      	mov	r1, r5
 8003abe:	f855 0c08 	ldr.w	r0, [r5, #-8]
 8003ac2:	f000 ff57 	bl	8004974 <ai_mnetwork_get_report>
 8003ac6:	3590      	adds	r5, #144	; 0x90
 8003ac8:	4603      	mov	r3, r0
 8003aca:	2800      	cmp	r0, #0
 8003acc:	d0da      	beq.n	8003a84 <aiSystemPerformanceInit+0xec>
    aiPrintNetworkInfo(&ctx->report);
 8003ace:	4640      	mov	r0, r8
    idx++;
 8003ad0:	3401      	adds	r4, #1
    aiPrintNetworkInfo(&ctx->report);
 8003ad2:	f000 fc27 	bl	8004324 <aiPrintNetworkInfo>
  } while (nn_name);
 8003ad6:	e7aa      	b.n	8003a2e <aiSystemPerformanceInit+0x96>
 8003ad8:	0800c8d3 	.word	0x0800c8d3
 8003adc:	0800c8d9 	.word	0x0800c8d9
 8003ae0:	e0001000 	.word	0xe0001000
 8003ae4:	0800c908 	.word	0x0800c908
 8003ae8:	200014a0 	.word	0x200014a0
 8003aec:	0800c90c 	.word	0x0800c90c
 8003af0:	20001560 	.word	0x20001560
 8003af4:	0800c942 	.word	0x0800c942
 8003af8:	0800c997 	.word	0x0800c997
 8003afc:	0800c9c5 	.word	0x0800c9c5
 8003b00:	0800c9da 	.word	0x0800c9da
 8003b04:	0800c962 	.word	0x0800c962

08003b08 <aiSystemPerformanceProcess>:

int aiSystemPerformanceProcess(void)
{
 8003b08:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
 8003b0c:	ed2d 8b02 	vpush	{d8}
        const float v = 2.0f * (ai_float) rand() / (ai_float) RAND_MAX - 1.0f;
 8003b10:	ed9f 8a54 	vldr	s16, [pc, #336]	; 8003c64 <aiSystemPerformanceProcess+0x15c>
{
 8003b14:	b09c      	sub	sp, #112	; 0x70
  if (net_exec_ctx[idx].handle == AI_HANDLE_NULL) {
 8003b16:	4c54      	ldr	r4, [pc, #336]	; (8003c68 <aiSystemPerformanceProcess+0x160>)
 8003b18:	6823      	ldr	r3, [r4, #0]
 8003b1a:	b94b      	cbnz	r3, 8003b30 <aiSystemPerformanceProcess+0x28>
    LC_PRINT("E: network handle is NULL\r\n");
 8003b1c:	4853      	ldr	r0, [pc, #332]	; (8003c6c <aiSystemPerformanceProcess+0x164>)
 8003b1e:	f000 fcff 	bl	8004520 <lc_print>

  do {
    r = aiTestPerformance(idx);
    idx = (idx+1) % AI_MNETWORK_NUMBER;

    if (!r) {
 8003b22:	f04f 30ff 	mov.w	r0, #4294967295
      }
    }
  } while (r==0);

  return r;
}
 8003b26:	b01c      	add	sp, #112	; 0x70
 8003b28:	ecbd 8b02 	vpop	{d8}
 8003b2c:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 8003b30:	f3ef 8014 	mrs	r0, CONTROL
  __ASM volatile ("MRS %0, msp" : "=r" (result) );
 8003b34:	f3ef 8108 	mrs	r1, MSP
  if (profiling_mode)
 8003b38:	f8df 915c 	ldr.w	r9, [pc, #348]	; 8003c98 <aiSystemPerformanceProcess+0x190>
  MON_STACK_INIT();
 8003b3c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003b40:	f000 fd4e 	bl	80045e0 <stackMonInit>
  if (profiling_mode)
 8003b44:	f899 3000 	ldrb.w	r3, [r9]
 8003b48:	b30b      	cbz	r3, 8003b8e <aiSystemPerformanceProcess+0x86>
    niter = _APP_ITER_ * profiling_factor;
 8003b4a:	4b49      	ldr	r3, [pc, #292]	; (8003c70 <aiSystemPerformanceProcess+0x168>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	ea4f 1803 	mov.w	r8, r3, lsl #4
  LC_PRINT("\r\nRunning PerfTest on \"%s\" with random inputs (%d iterations)...\r\n",
 8003b52:	4642      	mov	r2, r8
 8003b54:	68a1      	ldr	r1, [r4, #8]
 8003b56:	4847      	ldr	r0, [pc, #284]	; (8003c74 <aiSystemPerformanceProcess+0x16c>)
 8003b58:	f000 fce2 	bl	8004520 <lc_print>
 8003b5c:	f3ef 8308 	mrs	r3, MSP
  MON_STACK_CHECK0();
 8003b60:	4d45      	ldr	r5, [pc, #276]	; (8003c78 <aiSystemPerformanceProcess+0x170>)
 8003b62:	69aa      	ldr	r2, [r5, #24]
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d004      	beq.n	8003b72 <aiSystemPerformanceProcess+0x6a>
 8003b68:	f3ef 8108 	mrs	r1, MSP
 8003b6c:	4843      	ldr	r0, [pc, #268]	; (8003c7c <aiSystemPerformanceProcess+0x174>)
 8003b6e:	f000 fcd7 	bl	8004520 <lc_print>
  MON_STACK_MARK();
 8003b72:	792b      	ldrb	r3, [r5, #4]
 8003b74:	b973      	cbnz	r3, 8003b94 <aiSystemPerformanceProcess+0x8c>
  if ((net_exec_ctx[idx].report.n_inputs > AI_MNETWORK_IN_NUM) ||
 8003b76:	f8b4 e040 	ldrh.w	lr, [r4, #64]	; 0x40
 8003b7a:	f1be 0f01 	cmp.w	lr, #1
 8003b7e:	d915      	bls.n	8003bac <aiSystemPerformanceProcess+0xa4>
    LC_PRINT("E: AI_MNETWORK_IN/OUT_NUM definition are incoherent\r\n");
 8003b80:	483f      	ldr	r0, [pc, #252]	; (8003c80 <aiSystemPerformanceProcess+0x178>)
 8003b82:	f000 fccd 	bl	8004520 <lc_print>
    port_hal_delay(100);
 8003b86:	2064      	movs	r0, #100	; 0x64
 8003b88:	f7fe f8c6 	bl	8001d18 <HAL_Delay>
 8003b8c:	e7c9      	b.n	8003b22 <aiSystemPerformanceProcess+0x1a>
    niter = _APP_ITER_;
 8003b8e:	f04f 0810 	mov.w	r8, #16
 8003b92:	e7de      	b.n	8003b52 <aiSystemPerformanceProcess+0x4a>
  MON_STACK_MARK();
 8003b94:	69eb      	ldr	r3, [r5, #28]
 8003b96:	f04f 31de 	mov.w	r1, #3739147998	; 0xdededede
 8003b9a:	3303      	adds	r3, #3
 8003b9c:	f023 0303 	bic.w	r3, r3, #3
 8003ba0:	69aa      	ldr	r2, [r5, #24]
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d2e7      	bcs.n	8003b76 <aiSystemPerformanceProcess+0x6e>
 8003ba6:	f843 1b04 	str.w	r1, [r3], #4
 8003baa:	e7f9      	b.n	8003ba0 <aiSystemPerformanceProcess+0x98>
      (net_exec_ctx[idx].report.n_outputs > AI_MNETWORK_OUT_NUM))
 8003bac:	f8b4 c042 	ldrh.w	ip, [r4, #66]	; 0x42
  if ((net_exec_ctx[idx].report.n_inputs > AI_MNETWORK_IN_NUM) ||
 8003bb0:	f1bc 0f01 	cmp.w	ip, #1
 8003bb4:	d8e4      	bhi.n	8003b80 <aiSystemPerformanceProcess+0x78>
  for (int i = 0; i < net_exec_ctx[idx].report.n_inputs; i++) {
 8003bb6:	2300      	movs	r3, #0
      ai_input[i].data = AI_HANDLE_PTR(data_ins[i]);
 8003bb8:	f8df a0e0 	ldr.w	sl, [pc, #224]	; 8003c9c <aiSystemPerformanceProcess+0x194>
 8003bbc:	e010      	b.n	8003be0 <aiSystemPerformanceProcess+0xd8>
    ai_input[i] = net_exec_ctx[idx].report.inputs[i];
 8003bbe:	f8d4 b044 	ldr.w	fp, [r4, #68]	; 0x44
 8003bc2:	ad0e      	add	r5, sp, #56	; 0x38
 8003bc4:	465e      	mov	r6, fp
 8003bc6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8003bc8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003bca:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    if (net_exec_ctx[idx].report.inputs[i].data)
 8003bce:	f8db 3004 	ldr.w	r3, [fp, #4]
    ai_input[i] = net_exec_ctx[idx].report.inputs[i];
 8003bd2:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    if (net_exec_ctx[idx].report.inputs[i].data)
 8003bd6:	b90b      	cbnz	r3, 8003bdc <aiSystemPerformanceProcess+0xd4>
      ai_input[i].data = AI_HANDLE_PTR(data_ins[i]);
 8003bd8:	f8da 3000 	ldr.w	r3, [sl]
 8003bdc:	930f      	str	r3, [sp, #60]	; 0x3c
    niter = _APP_ITER_;
 8003bde:	2301      	movs	r3, #1
  for (int i = 0; i < net_exec_ctx[idx].report.n_inputs; i++) {
 8003be0:	459e      	cmp	lr, r3
 8003be2:	dcec      	bgt.n	8003bbe <aiSystemPerformanceProcess+0xb6>
  for (int i = 0; i < net_exec_ctx[idx].report.n_outputs; i++) {
 8003be4:	2300      	movs	r3, #0
      ai_output[i].data = AI_HANDLE_PTR(data_outs[i]);
 8003be6:	f8df e0b8 	ldr.w	lr, [pc, #184]	; 8003ca0 <aiSystemPerformanceProcess+0x198>
  for (int i = 0; i < net_exec_ctx[idx].report.n_outputs; i++) {
 8003bea:	459c      	cmp	ip, r3
 8003bec:	dc28      	bgt.n	8003c40 <aiSystemPerformanceProcess+0x138>
  if (profiling_mode) {
 8003bee:	f899 3000 	ldrb.w	r3, [r9]
 8003bf2:	b14b      	cbz	r3, 8003c08 <aiSystemPerformanceProcess+0x100>
    LC_PRINT("Profiling mode (%d)...\r\n", profiling_factor);
 8003bf4:	4b1e      	ldr	r3, [pc, #120]	; (8003c70 <aiSystemPerformanceProcess+0x168>)
 8003bf6:	4823      	ldr	r0, [pc, #140]	; (8003c84 <aiSystemPerformanceProcess+0x17c>)
 8003bf8:	6819      	ldr	r1, [r3, #0]
 8003bfa:	f000 fc91 	bl	8004520 <lc_print>
    fflush(stdout);
 8003bfe:	4b22      	ldr	r3, [pc, #136]	; (8003c88 <aiSystemPerformanceProcess+0x180>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	6898      	ldr	r0, [r3, #8]
 8003c04:	f005 fc62 	bl	80094cc <fflush>
  if (observer_mode) {
 8003c08:	4b20      	ldr	r3, [pc, #128]	; (8003c8c <aiSystemPerformanceProcess+0x184>)
 8003c0a:	781b      	ldrb	r3, [r3, #0]
 8003c0c:	b153      	cbz	r3, 8003c24 <aiSystemPerformanceProcess+0x11c>
    MON_ALLOC_ENABLE();
 8003c0e:	4d20      	ldr	r5, [pc, #128]	; (8003c90 <aiSystemPerformanceProcess+0x188>)
    MON_ALLOC_RESET();
 8003c10:	f7ff fcbe 	bl	8003590 <_mon_alloc_reset>
    aiObserverInit(&net_exec_ctx[idx]);
 8003c14:	4814      	ldr	r0, [pc, #80]	; (8003c68 <aiSystemPerformanceProcess+0x160>)
    MON_ALLOC_ENABLE();
 8003c16:	682b      	ldr	r3, [r5, #0]
 8003c18:	f043 0301 	orr.w	r3, r3, #1
 8003c1c:	602b      	str	r3, [r5, #0]
    aiObserverInit(&net_exec_ctx[idx]);
 8003c1e:	f7ff fd7b 	bl	8003718 <aiObserverInit>
    observer_heap_sz = MON_ALLOC_MAX_USED();
 8003c22:	696b      	ldr	r3, [r5, #20]
  tcumul = 0ULL;
 8003c24:	2500      	movs	r5, #0
  int observer_heap_sz = 0UL;
 8003c26:	9306      	str	r3, [sp, #24]
  MON_ALLOC_RESET();
 8003c28:	f7ff fcb2 	bl	8003590 <_mon_alloc_reset>
  tcumul = 0ULL;
 8003c2c:	46aa      	mov	sl, r5
  for (iter = 0; iter < niter; iter++) {
 8003c2e:	462e      	mov	r6, r5
 8003c30:	4546      	cmp	r6, r8
 8003c32:	da74      	bge.n	8003d1e <aiSystemPerformanceProcess+0x216>
 8003c34:	f10d 0b38 	add.w	fp, sp, #56	; 0x38
    for (int i = 0; i < net_exec_ctx[idx].report.n_inputs; i++) {
 8003c38:	2300      	movs	r3, #0
            in_data[j] = (ai_i8)(v * 127);
 8003c3a:	eddf 8a16 	vldr	s17, [pc, #88]	; 8003c94 <aiSystemPerformanceProcess+0x18c>
 8003c3e:	e04b      	b.n	8003cd8 <aiSystemPerformanceProcess+0x1d0>
    ai_output[i] = net_exec_ctx[idx].report.outputs[i];
 8003c40:	f8d4 a048 	ldr.w	sl, [r4, #72]	; 0x48
 8003c44:	ad15      	add	r5, sp, #84	; 0x54
 8003c46:	4656      	mov	r6, sl
 8003c48:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8003c4a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c4c:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    if (net_exec_ctx[idx].report.outputs[i].data)
 8003c50:	f8da 3004 	ldr.w	r3, [sl, #4]
    ai_output[i] = net_exec_ctx[idx].report.outputs[i];
 8003c54:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    if (net_exec_ctx[idx].report.outputs[i].data)
 8003c58:	b90b      	cbnz	r3, 8003c5e <aiSystemPerformanceProcess+0x156>
      ai_output[i].data = AI_HANDLE_PTR(data_outs[i]);
 8003c5a:	f8de 3000 	ldr.w	r3, [lr]
 8003c5e:	9316      	str	r3, [sp, #88]	; 0x58
  for (int i = 0; i < net_exec_ctx[idx].report.n_inputs; i++) {
 8003c60:	2301      	movs	r3, #1
 8003c62:	e7c2      	b.n	8003bea <aiSystemPerformanceProcess+0xe2>
 8003c64:	30000000 	.word	0x30000000
 8003c68:	200014a0 	.word	0x200014a0
 8003c6c:	0800c9eb 	.word	0x0800c9eb
 8003c70:	20000690 	.word	0x20000690
 8003c74:	0800ca07 	.word	0x0800ca07
 8003c78:	20001588 	.word	0x20001588
 8003c7c:	0800ca4a 	.word	0x0800ca4a
 8003c80:	0800ca8e 	.word	0x0800ca8e
 8003c84:	0800cac4 	.word	0x0800cac4
 8003c88:	2000113c 	.word	0x2000113c
 8003c8c:	2000068c 	.word	0x2000068c
 8003c90:	2000156c 	.word	0x2000156c
 8003c94:	42fe0000 	.word	0x42fe0000
 8003c98:	20001530 	.word	0x20001530
 8003c9c:	2000069c 	.word	0x2000069c
 8003ca0:	200006a0 	.word	0x200006a0
      ai_i8 *in_data = (ai_i8 *)ai_input[i].data;
 8003ca4:	e9db 1200 	ldrd	r1, r2, [fp]
      for (ai_size j = 0; j < AI_BUFFER_SIZE(&ai_input[i]); ++j) {
 8003ca8:	f04f 0900 	mov.w	r9, #0
        if  (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_FLOAT) {
 8003cac:	f3c1 4043 	ubfx	r0, r1, #17, #4
          if (AI_BUFFER_FMT_GET_BITS(fmt) >= 8) {
 8003cb0:	f3c1 11d1 	ubfx	r1, r1, #7, #18
 8003cb4:	f001 0178 	and.w	r1, r1, #120	; 0x78
        if  (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_FLOAT) {
 8003cb8:	9005      	str	r0, [sp, #20]
          if (AI_BUFFER_FMT_GET_BITS(fmt) >= 8) {
 8003cba:	9107      	str	r1, [sp, #28]
      for (ai_size j = 0; j < AI_BUFFER_SIZE(&ai_input[i]); ++j) {
 8003cbc:	2101      	movs	r1, #1
 8003cbe:	4658      	mov	r0, fp
 8003cc0:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8003cc4:	f001 fae8 	bl	8005298 <ai_buffer_get_size>
 8003cc8:	4581      	cmp	r9, r0
 8003cca:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
 8003cce:	f0c0 8106 	bcc.w	8003ede <aiSystemPerformanceProcess+0x3d6>
    for (int i = 0; i < net_exec_ctx[idx].report.n_inputs; i++) {
 8003cd2:	3301      	adds	r3, #1
 8003cd4:	f10b 0b1c 	add.w	fp, fp, #28
 8003cd8:	f8b4 2040 	ldrh.w	r2, [r4, #64]	; 0x40
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	dbe1      	blt.n	8003ca4 <aiSystemPerformanceProcess+0x19c>
    MON_ALLOC_ENABLE();
 8003ce0:	f8df 9308 	ldr.w	r9, [pc, #776]	; 8003fec <aiSystemPerformanceProcess+0x4e4>
 8003ce4:	f8d9 3000 	ldr.w	r3, [r9]
 8003ce8:	f043 0301 	orr.w	r3, r3, #1
 8003cec:	f8c9 3000 	str.w	r3, [r9]
  cyclesCount.tick_start = port_hal_get_tick();
 8003cf0:	f7fe f80c 	bl	8001d0c <HAL_GetTick>
 8003cf4:	4bb0      	ldr	r3, [pc, #704]	; (8003fb8 <aiSystemPerformanceProcess+0x4b0>)
  port_dwt_reset();
 8003cf6:	2100      	movs	r1, #0
 8003cf8:	4ab0      	ldr	r2, [pc, #704]	; (8003fbc <aiSystemPerformanceProcess+0x4b4>)
  cyclesCount.tick_start = port_hal_get_tick();
 8003cfa:	6098      	str	r0, [r3, #8]
  port_dwt_reset();
 8003cfc:	6051      	str	r1, [r2, #4]
    batch = ai_mnetwork_run(net_exec_ctx[idx].handle, ai_input, ai_output);
 8003cfe:	a90e      	add	r1, sp, #56	; 0x38
  cyclesCount.dwt_start = port_dwt_get_cycles();
 8003d00:	6852      	ldr	r2, [r2, #4]
 8003d02:	6820      	ldr	r0, [r4, #0]
 8003d04:	605a      	str	r2, [r3, #4]
 8003d06:	aa15      	add	r2, sp, #84	; 0x54
 8003d08:	f000 fe6b 	bl	80049e2 <ai_mnetwork_run>
    if (batch != 1) {
 8003d0c:	2801      	cmp	r0, #1
 8003d0e:	f000 8116 	beq.w	8003f3e <aiSystemPerformanceProcess+0x436>
      aiLogErr(ai_mnetwork_get_error(net_exec_ctx[idx].handle),
 8003d12:	6820      	ldr	r0, [r4, #0]
 8003d14:	f000 fe39 	bl	800498a <ai_mnetwork_get_error>
 8003d18:	49a9      	ldr	r1, [pc, #676]	; (8003fc0 <aiSystemPerformanceProcess+0x4b8>)
 8003d1a:	f000 f9f3 	bl	8004104 <aiLogErr>
  LC_PRINT("\r\n");
 8003d1e:	48a9      	ldr	r0, [pc, #676]	; (8003fc4 <aiSystemPerformanceProcess+0x4bc>)
 8003d20:	f000 fbfe 	bl	8004520 <lc_print>
  MON_STACK_EVALUATE();
 8003d24:	4aa8      	ldr	r2, [pc, #672]	; (8003fc8 <aiSystemPerformanceProcess+0x4c0>)
 8003d26:	2000      	movs	r0, #0
 8003d28:	f892 c004 	ldrb.w	ip, [r2, #4]
 8003d2c:	6090      	str	r0, [r2, #8]
 8003d2e:	f1bc 0f00 	cmp.w	ip, #0
 8003d32:	d023      	beq.n	8003d7c <aiSystemPerformanceProcess+0x274>
 8003d34:	6953      	ldr	r3, [r2, #20]
 8003d36:	68d1      	ldr	r1, [r2, #12]
 8003d38:	eba3 0901 	sub.w	r9, r3, r1
 8003d3c:	69d3      	ldr	r3, [r2, #28]
 8003d3e:	3303      	adds	r3, #3
 8003d40:	f023 0303 	bic.w	r3, r3, #3
 8003d44:	f103 0e20 	add.w	lr, r3, #32
 8003d48:	f853 8b04 	ldr.w	r8, [r3], #4
 8003d4c:	f1b8 3fde 	cmp.w	r8, #3739147998	; 0xdededede
 8003d50:	bf18      	it	ne
 8003d52:	4660      	movne	r0, ip
 8003d54:	4573      	cmp	r3, lr
 8003d56:	d1f7      	bne.n	8003d48 <aiSystemPerformanceProcess+0x240>
 8003d58:	2800      	cmp	r0, #0
 8003d5a:	f040 8113 	bne.w	8003f84 <aiSystemPerformanceProcess+0x47c>
 8003d5e:	2020      	movs	r0, #32
 8003d60:	f8d2 e018 	ldr.w	lr, [r2, #24]
 8003d64:	6090      	str	r0, [r2, #8]
 8003d66:	6819      	ldr	r1, [r3, #0]
 8003d68:	6890      	ldr	r0, [r2, #8]
 8003d6a:	f1b1 3fde 	cmp.w	r1, #3739147998	; 0xdededede
 8003d6e:	d102      	bne.n	8003d76 <aiSystemPerformanceProcess+0x26e>
 8003d70:	4573      	cmp	r3, lr
 8003d72:	f0c0 8103 	bcc.w	8003f7c <aiSystemPerformanceProcess+0x474>
 8003d76:	eba9 0100 	sub.w	r1, r9, r0
 8003d7a:	6091      	str	r1, [r2, #8]
  LC_PRINT("\r\n");
 8003d7c:	4891      	ldr	r0, [pc, #580]	; (8003fc4 <aiSystemPerformanceProcess+0x4bc>)
 8003d7e:	f000 fbcf 	bl	8004520 <lc_print>
  tcumul -= u_observer_ctx.u_dur_t;
 8003d82:	4b92      	ldr	r3, [pc, #584]	; (8003fcc <aiSystemPerformanceProcess+0x4c4>)
  tcumul /= (uint64_t)iter;
 8003d84:	4632      	mov	r2, r6
  tcumul -= u_observer_ctx.u_dur_t;
 8003d86:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
  tcumul /= (uint64_t)iter;
 8003d8a:	17f3      	asrs	r3, r6, #31
  tcumul -= u_observer_ctx.u_dur_t;
 8003d8c:	1a28      	subs	r0, r5, r0
 8003d8e:	eb6a 0101 	sbc.w	r1, sl, r1
  tcumul /= (uint64_t)iter;
 8003d92:	f7fc ff29 	bl	8000be8 <__aeabi_uldivmod>
  dwtCyclesToTime(tcumul, &t);
 8003d96:	aa0a      	add	r2, sp, #40	; 0x28
  tcumul /= (uint64_t)iter;
 8003d98:	460d      	mov	r5, r1
 8003d9a:	4681      	mov	r9, r0
  dwtCyclesToTime(tcumul, &t);
 8003d9c:	f000 fc4e 	bl	800463c <dwtCyclesToTime>
  LC_PRINT("Results for \"%s\", %d inferences @%dMHz/%dMHz (complexity: %" PRIu64 " MACC)\r\n",
 8003da0:	68a1      	ldr	r1, [r4, #8]
 8003da2:	9105      	str	r1, [sp, #20]
 8003da4:	f7fe fd58 	bl	8002858 <HAL_RCC_GetHCLKFreq>
 8003da8:	4683      	mov	fp, r0
 8003daa:	f7fe fd55 	bl	8002858 <HAL_RCC_GetHCLKFreq>
 8003dae:	4b88      	ldr	r3, [pc, #544]	; (8003fd0 <aiSystemPerformanceProcess+0x4c8>)
 8003db0:	4632      	mov	r2, r6
 8003db2:	9905      	ldr	r1, [sp, #20]
  LC_PRINT(" CPU Workload : %d%c (duty cycle = 1s)\r\n", (int)((tcumul * 100) / t.fcpu), '%');
 8003db4:	2664      	movs	r6, #100	; 0x64
  LC_PRINT("Results for \"%s\", %d inferences @%dMHz/%dMHz (complexity: %" PRIu64 " MACC)\r\n",
 8003db6:	fbb0 f0f3 	udiv	r0, r0, r3
 8003dba:	ed94 7b0e 	vldr	d7, [r4, #56]	; 0x38
 8003dbe:	fbbb f3f3 	udiv	r3, fp, r3
 8003dc2:	ed8d 7b02 	vstr	d7, [sp, #8]
 8003dc6:	9000      	str	r0, [sp, #0]
 8003dc8:	4882      	ldr	r0, [pc, #520]	; (8003fd4 <aiSystemPerformanceProcess+0x4cc>)
 8003dca:	f000 fba9 	bl	8004520 <lc_print>
  LC_PRINT(" duration     : %d.%03d ms (average)\r\n", t.s * 1000 + t.ms, t.us);
 8003dce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003dd0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003dd2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003dd6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8003dd8:	fb00 3101 	mla	r1, r0, r1, r3
 8003ddc:	487e      	ldr	r0, [pc, #504]	; (8003fd8 <aiSystemPerformanceProcess+0x4d0>)
 8003dde:	f000 fb9f 	bl	8004520 <lc_print>
  LC_PRINT(" CPU cycles   : %" PRIu64 " (average)\r\n", tcumul);
 8003de2:	462b      	mov	r3, r5
 8003de4:	464a      	mov	r2, r9
 8003de6:	487d      	ldr	r0, [pc, #500]	; (8003fdc <aiSystemPerformanceProcess+0x4d4>)
 8003de8:	f000 fb9a 	bl	8004520 <lc_print>
  LC_PRINT(" CPU Workload : %d%c (duty cycle = 1s)\r\n", (int)((tcumul * 100) / t.fcpu), '%');
 8003dec:	fba9 8206 	umull	r8, r2, r9, r6
 8003df0:	2300      	movs	r3, #0
 8003df2:	fb06 2505 	mla	r5, r6, r5, r2
 8003df6:	4640      	mov	r0, r8
 8003df8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003dfa:	4629      	mov	r1, r5
 8003dfc:	f7fc fef4 	bl	8000be8 <__aeabi_uldivmod>
 8003e00:	2225      	movs	r2, #37	; 0x25
 8003e02:	4601      	mov	r1, r0
 8003e04:	4876      	ldr	r0, [pc, #472]	; (8003fe0 <aiSystemPerformanceProcess+0x4d8>)
 8003e06:	f000 fb8b 	bl	8004520 <lc_print>
  cmacc = (ai_macc)((tcumul * 100)/ net_exec_ctx[idx].report.n_macc);
 8003e0a:	4629      	mov	r1, r5
 8003e0c:	4640      	mov	r0, r8
 8003e0e:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
 8003e12:	f7fc fee9 	bl	8000be8 <__aeabi_uldivmod>
 8003e16:	4605      	mov	r5, r0
  LC_PRINT(" cycles/MACC  : %d.%02d (average for all layers)\r\n",
 8003e18:	2300      	movs	r3, #0
 8003e1a:	2264      	movs	r2, #100	; 0x64
 8003e1c:	f7fc fee4 	bl	8000be8 <__aeabi_uldivmod>
 8003e20:	fb06 5210 	mls	r2, r6, r0, r5
 8003e24:	4601      	mov	r1, r0
 8003e26:	486f      	ldr	r0, [pc, #444]	; (8003fe4 <aiSystemPerformanceProcess+0x4dc>)
 8003e28:	f000 fb7a 	bl	8004520 <lc_print>
  MON_STACK_REPORT();
 8003e2c:	4b66      	ldr	r3, [pc, #408]	; (8003fc8 <aiSystemPerformanceProcess+0x4c0>)
 8003e2e:	791a      	ldrb	r2, [r3, #4]
 8003e30:	2a00      	cmp	r2, #0
 8003e32:	f000 80b2 	beq.w	8003f9a <aiSystemPerformanceProcess+0x492>
 8003e36:	6899      	ldr	r1, [r3, #8]
 8003e38:	486b      	ldr	r0, [pc, #428]	; (8003fe8 <aiSystemPerformanceProcess+0x4e0>)
 8003e3a:	f000 fb71 	bl	8004520 <lc_print>
  MON_ALLOC_REPORT();
 8003e3e:	496b      	ldr	r1, [pc, #428]	; (8003fec <aiSystemPerformanceProcess+0x4e4>)
 8003e40:	486b      	ldr	r0, [pc, #428]	; (8003ff0 <aiSystemPerformanceProcess+0x4e8>)
 8003e42:	680b      	ldr	r3, [r1, #0]
 8003e44:	f3c3 0341 	ubfx	r3, r3, #1, #2
 8003e48:	9303      	str	r3, [sp, #12]
 8003e4a:	698b      	ldr	r3, [r1, #24]
 8003e4c:	9302      	str	r3, [sp, #8]
 8003e4e:	694b      	ldr	r3, [r1, #20]
 8003e50:	9301      	str	r3, [sp, #4]
 8003e52:	688b      	ldr	r3, [r1, #8]
 8003e54:	9300      	str	r3, [sp, #0]
 8003e56:	690b      	ldr	r3, [r1, #16]
 8003e58:	684a      	ldr	r2, [r1, #4]
 8003e5a:	68c9      	ldr	r1, [r1, #12]
 8003e5c:	f000 fb60 	bl	8004520 <lc_print>
  LC_PRINT(" observer res : %d bytes used from the heap (%d c-nodes)\r\n", observer_heap_sz,
 8003e60:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8003e64:	9906      	ldr	r1, [sp, #24]
 8003e66:	4863      	ldr	r0, [pc, #396]	; (8003ff4 <aiSystemPerformanceProcess+0x4ec>)
 8003e68:	f000 fb5a 	bl	8004520 <lc_print>
  aiObserverDone(&net_exec_ctx[idx]);
 8003e6c:	4862      	ldr	r0, [pc, #392]	; (8003ff8 <aiSystemPerformanceProcess+0x4f0>)
 8003e6e:	f7ff fc93 	bl	8003798 <aiObserverDone>
      r = aiTestConsole();
 8003e72:	f7ff fc23 	bl	80036bc <aiTestConsole>
      if (r == CONS_EVT_UNDEFINED) {
 8003e76:	2864      	cmp	r0, #100	; 0x64
 8003e78:	f43f ae4d 	beq.w	8003b16 <aiSystemPerformanceProcess+0xe>
      } else if (r == CONS_EVT_HELP) {
 8003e7c:	2803      	cmp	r0, #3
 8003e7e:	d124      	bne.n	8003eca <aiSystemPerformanceProcess+0x3c2>
        LC_PRINT("\r\n");
 8003e80:	4850      	ldr	r0, [pc, #320]	; (8003fc4 <aiSystemPerformanceProcess+0x4bc>)
 8003e82:	f000 fb4d 	bl	8004520 <lc_print>
        LC_PRINT("Possible key for the interactive console:\r\n");
 8003e86:	485d      	ldr	r0, [pc, #372]	; (8003ffc <aiSystemPerformanceProcess+0x4f4>)
 8003e88:	f000 fb4a 	bl	8004520 <lc_print>
        LC_PRINT("  [q,Q]      quit the application\r\n");
 8003e8c:	485c      	ldr	r0, [pc, #368]	; (8004000 <aiSystemPerformanceProcess+0x4f8>)
 8003e8e:	f000 fb47 	bl	8004520 <lc_print>
        LC_PRINT("  [r,R]      re-start (NN de-init and re-init)\r\n");
 8003e92:	485c      	ldr	r0, [pc, #368]	; (8004004 <aiSystemPerformanceProcess+0x4fc>)
 8003e94:	f000 fb44 	bl	8004520 <lc_print>
        LC_PRINT("  [p,P]      pause\r\n");
 8003e98:	485b      	ldr	r0, [pc, #364]	; (8004008 <aiSystemPerformanceProcess+0x500>)
 8003e9a:	f000 fb41 	bl	8004520 <lc_print>
        LC_PRINT("  [d,D]      hide detailed information ('r' to restore)\r\n");
 8003e9e:	485b      	ldr	r0, [pc, #364]	; (800400c <aiSystemPerformanceProcess+0x504>)
 8003ea0:	f000 fb3e 	bl	8004520 <lc_print>
        LC_PRINT("  [h,H,?]    this information\r\n");
 8003ea4:	485a      	ldr	r0, [pc, #360]	; (8004010 <aiSystemPerformanceProcess+0x508>)
 8003ea6:	f000 fb3b 	bl	8004520 <lc_print>
        LC_PRINT("   xx        continue immediately\r\n");
 8003eaa:	485a      	ldr	r0, [pc, #360]	; (8004014 <aiSystemPerformanceProcess+0x50c>)
 8003eac:	f000 fb38 	bl	8004520 <lc_print>
        LC_PRINT("\r\n");
 8003eb0:	4844      	ldr	r0, [pc, #272]	; (8003fc4 <aiSystemPerformanceProcess+0x4bc>)
 8003eb2:	f000 fb35 	bl	8004520 <lc_print>
        LC_PRINT("Press any key to continue..\r\n");
 8003eb6:	4858      	ldr	r0, [pc, #352]	; (8004018 <aiSystemPerformanceProcess+0x510>)
 8003eb8:	f000 fb32 	bl	8004520 <lc_print>
        while ((r = aiTestConsole()) == CONS_EVT_TIMEOUT) {
 8003ebc:	f7ff fbfe 	bl	80036bc <aiTestConsole>
 8003ec0:	2800      	cmp	r0, #0
 8003ec2:	d06e      	beq.n	8003fa2 <aiSystemPerformanceProcess+0x49a>
        if (r == CONS_EVT_UNDEFINED)
 8003ec4:	2864      	cmp	r0, #100	; 0x64
 8003ec6:	f43f ae26 	beq.w	8003b16 <aiSystemPerformanceProcess+0xe>
      if (r == CONS_EVT_PROF) {
 8003eca:	2805      	cmp	r0, #5
 8003ecc:	d16e      	bne.n	8003fac <aiSystemPerformanceProcess+0x4a4>
        profiling_mode = true;
 8003ece:	4b53      	ldr	r3, [pc, #332]	; (800401c <aiSystemPerformanceProcess+0x514>)
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	701a      	strb	r2, [r3, #0]
        profiling_factor *= 2;
 8003ed4:	4a52      	ldr	r2, [pc, #328]	; (8004020 <aiSystemPerformanceProcess+0x518>)
 8003ed6:	6813      	ldr	r3, [r2, #0]
 8003ed8:	005b      	lsls	r3, r3, #1
 8003eda:	6013      	str	r3, [r2, #0]
  } while (r==0);
 8003edc:	e61b      	b.n	8003b16 <aiSystemPerformanceProcess+0xe>
 8003ede:	e9cd 3208 	strd	r3, r2, [sp, #32]
        const float v = 2.0f * (ai_float) rand() / (ai_float) RAND_MAX - 1.0f;
 8003ee2:	f006 f9c1 	bl	800a268 <rand>
 8003ee6:	ee07 0a90 	vmov	s15, r0
        if  (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_FLOAT) {
 8003eea:	9b05      	ldr	r3, [sp, #20]
        const float v = 2.0f * (ai_float) rand() / (ai_float) RAND_MAX - 1.0f;
 8003eec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        if  (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_FLOAT) {
 8003ef0:	2b01      	cmp	r3, #1
        const float v = 2.0f * (ai_float) rand() / (ai_float) RAND_MAX - 1.0f;
 8003ef2:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8003ef6:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
        if  (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_FLOAT) {
 8003efa:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
        const float v = 2.0f * (ai_float) rand() / (ai_float) RAND_MAX - 1.0f;
 8003efe:	eee7 7a08 	vfma.f32	s15, s14, s16
        if  (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_FLOAT) {
 8003f02:	d106      	bne.n	8003f12 <aiSystemPerformanceProcess+0x40a>
          *(ai_float *)(in_data + j * 4) = v;
 8003f04:	eb02 0189 	add.w	r1, r2, r9, lsl #2
 8003f08:	edc1 7a00 	vstr	s15, [r1]
      for (ai_size j = 0; j < AI_BUFFER_SIZE(&ai_input[i]); ++j) {
 8003f0c:	f109 0901 	add.w	r9, r9, #1
 8003f10:	e6d4      	b.n	8003cbc <aiSystemPerformanceProcess+0x1b4>
          if (AI_BUFFER_FMT_GET_BITS(fmt) >= 8) {
 8003f12:	9907      	ldr	r1, [sp, #28]
 8003f14:	2900      	cmp	r1, #0
 8003f16:	d0f9      	beq.n	8003f0c <aiSystemPerformanceProcess+0x404>
            in_data[j] = (ai_i8)(v * 127);
 8003f18:	ee67 7aa8 	vmul.f32	s15, s15, s17
            if (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_BOOL) {
 8003f1c:	9805      	ldr	r0, [sp, #20]
 8003f1e:	2803      	cmp	r0, #3
            in_data[j] = (ai_i8)(v * 127);
 8003f20:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003f24:	edcd 7a08 	vstr	s15, [sp, #32]
 8003f28:	f99d 1020 	ldrsb.w	r1, [sp, #32]
            if (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_BOOL) {
 8003f2c:	d002      	beq.n	8003f34 <aiSystemPerformanceProcess+0x42c>
              in_data[j] = (in_data[j] > 0)?(ai_i8)1:(ai_i8)0;
 8003f2e:	f802 1009 	strb.w	r1, [r2, r9]
 8003f32:	e7eb      	b.n	8003f0c <aiSystemPerformanceProcess+0x404>
 8003f34:	2900      	cmp	r1, #0
 8003f36:	bfd4      	ite	le
 8003f38:	2100      	movle	r1, #0
 8003f3a:	2101      	movgt	r1, #1
 8003f3c:	e7f7      	b.n	8003f2e <aiSystemPerformanceProcess+0x426>
    tend = cyclesCounterEnd();
 8003f3e:	f7ff fb39 	bl	80035b4 <cyclesCounterEnd>
    MON_ALLOC_DISABLE();
 8003f42:	f8d9 3000 	ldr.w	r3, [r9]
    tcumul += tend;
 8003f46:	1945      	adds	r5, r0, r5
    dwtCyclesToTime(tend, &t);
 8003f48:	aa0a      	add	r2, sp, #40	; 0x28
    MON_ALLOC_DISABLE();
 8003f4a:	f023 0301 	bic.w	r3, r3, #1
    tcumul += tend;
 8003f4e:	eb4a 0a01 	adc.w	sl, sl, r1
    MON_ALLOC_DISABLE();
 8003f52:	f8c9 3000 	str.w	r3, [r9]
    dwtCyclesToTime(tend, &t);
 8003f56:	f000 fb71 	bl	800463c <dwtCyclesToTime>
    if (!profiling_mode) {
 8003f5a:	4b30      	ldr	r3, [pc, #192]	; (800401c <aiSystemPerformanceProcess+0x514>)
 8003f5c:	781b      	ldrb	r3, [r3, #0]
 8003f5e:	b95b      	cbnz	r3, 8003f78 <aiSystemPerformanceProcess+0x470>
      if (t.s > 10)
 8003f60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
      LC_PRINT(".");
 8003f62:	4830      	ldr	r0, [pc, #192]	; (8004024 <aiSystemPerformanceProcess+0x51c>)
      if (t.s > 10)
 8003f64:	2b0a      	cmp	r3, #10
 8003f66:	bfc8      	it	gt
 8003f68:	46b0      	movgt	r8, r6
      LC_PRINT(".");
 8003f6a:	f000 fad9 	bl	8004520 <lc_print>
      fflush(stdout);
 8003f6e:	4b2e      	ldr	r3, [pc, #184]	; (8004028 <aiSystemPerformanceProcess+0x520>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	6898      	ldr	r0, [r3, #8]
 8003f74:	f005 faaa 	bl	80094cc <fflush>
  for (iter = 0; iter < niter; iter++) {
 8003f78:	3601      	adds	r6, #1
 8003f7a:	e659      	b.n	8003c30 <aiSystemPerformanceProcess+0x128>
  MON_STACK_EVALUATE();
 8003f7c:	3004      	adds	r0, #4
 8003f7e:	3304      	adds	r3, #4
 8003f80:	6090      	str	r0, [r2, #8]
 8003f82:	e6f0      	b.n	8003d66 <aiSystemPerformanceProcess+0x25e>
 8003f84:	f04f 33ff 	mov.w	r3, #4294967295
 8003f88:	4649      	mov	r1, r9
 8003f8a:	4828      	ldr	r0, [pc, #160]	; (800402c <aiSystemPerformanceProcess+0x524>)
 8003f8c:	6093      	str	r3, [r2, #8]
 8003f8e:	f000 fac7 	bl	8004520 <lc_print>
 8003f92:	4827      	ldr	r0, [pc, #156]	; (8004030 <aiSystemPerformanceProcess+0x528>)
 8003f94:	f000 fac4 	bl	8004520 <lc_print>
 8003f98:	e6f0      	b.n	8003d7c <aiSystemPerformanceProcess+0x274>
  MON_STACK_REPORT();
 8003f9a:	4826      	ldr	r0, [pc, #152]	; (8004034 <aiSystemPerformanceProcess+0x52c>)
 8003f9c:	f000 fac0 	bl	8004520 <lc_print>
 8003fa0:	e74d      	b.n	8003e3e <aiSystemPerformanceProcess+0x336>
          port_hal_delay(1000);
 8003fa2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003fa6:	f7fd feb7 	bl	8001d18 <HAL_Delay>
 8003faa:	e787      	b.n	8003ebc <aiSystemPerformanceProcess+0x3b4>
      if (r == CONS_EVT_HIDE) {
 8003fac:	2806      	cmp	r0, #6
 8003fae:	d145      	bne.n	800403c <aiSystemPerformanceProcess+0x534>
        observer_mode = false;
 8003fb0:	4b21      	ldr	r3, [pc, #132]	; (8004038 <aiSystemPerformanceProcess+0x530>)
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	701a      	strb	r2, [r3, #0]
  } while (r==0);
 8003fb6:	e5ae      	b.n	8003b16 <aiSystemPerformanceProcess+0xe>
 8003fb8:	20001560 	.word	0x20001560
 8003fbc:	e0001000 	.word	0xe0001000
 8003fc0:	0800cadd 	.word	0x0800cadd
 8003fc4:	0800caef 	.word	0x0800caef
 8003fc8:	20001588 	.word	0x20001588
 8003fcc:	20001538 	.word	0x20001538
 8003fd0:	000f4240 	.word	0x000f4240
 8003fd4:	0800cb6f 	.word	0x0800cb6f
 8003fd8:	0800cbb6 	.word	0x0800cbb6
 8003fdc:	0800cbdd 	.word	0x0800cbdd
 8003fe0:	0800cbfe 	.word	0x0800cbfe
 8003fe4:	0800cc27 	.word	0x0800cc27
 8003fe8:	0800cc5a 	.word	0x0800cc5a
 8003fec:	2000156c 	.word	0x2000156c
 8003ff0:	0800cc97 	.word	0x0800cc97
 8003ff4:	0800ccf0 	.word	0x0800ccf0
 8003ff8:	200014a0 	.word	0x200014a0
 8003ffc:	0800cd2b 	.word	0x0800cd2b
 8004000:	0800cd57 	.word	0x0800cd57
 8004004:	0800cd7b 	.word	0x0800cd7b
 8004008:	0800cdac 	.word	0x0800cdac
 800400c:	0800cdc1 	.word	0x0800cdc1
 8004010:	0800cdfb 	.word	0x0800cdfb
 8004014:	0800ce1b 	.word	0x0800ce1b
 8004018:	0800ce3f 	.word	0x0800ce3f
 800401c:	20001530 	.word	0x20001530
 8004020:	20000690 	.word	0x20000690
 8004024:	0800caed 	.word	0x0800caed
 8004028:	2000113c 	.word	0x2000113c
 800402c:	0800caf2 	.word	0x0800caf2
 8004030:	0800cb16 	.word	0x0800cb16
 8004034:	0800cc76 	.word	0x0800cc76
 8004038:	2000068c 	.word	0x2000068c
      if (r == CONS_EVT_RESTART) {
 800403c:	2802      	cmp	r0, #2
 800403e:	d110      	bne.n	8004062 <aiSystemPerformanceProcess+0x55a>
        profiling_mode = false;
 8004040:	4b1f      	ldr	r3, [pc, #124]	; (80040c0 <aiSystemPerformanceProcess+0x5b8>)
 8004042:	2200      	movs	r2, #0
        LC_PRINT("\r\n");
 8004044:	481f      	ldr	r0, [pc, #124]	; (80040c4 <aiSystemPerformanceProcess+0x5bc>)
        profiling_mode = false;
 8004046:	701a      	strb	r2, [r3, #0]
        observer_mode = true;
 8004048:	2201      	movs	r2, #1
 800404a:	4b1f      	ldr	r3, [pc, #124]	; (80040c8 <aiSystemPerformanceProcess+0x5c0>)
 800404c:	701a      	strb	r2, [r3, #0]
        profiling_factor = 5;
 800404e:	2205      	movs	r2, #5
 8004050:	4b1e      	ldr	r3, [pc, #120]	; (80040cc <aiSystemPerformanceProcess+0x5c4>)
 8004052:	601a      	str	r2, [r3, #0]
        LC_PRINT("\r\n");
 8004054:	f000 fa64 	bl	8004520 <lc_print>
        aiDeInit();
 8004058:	f7ff fb16 	bl	8003688 <aiDeInit>
        aiSystemPerformanceInit();
 800405c:	f7ff fc9c 	bl	8003998 <aiSystemPerformanceInit>
      if (r == CONS_EVT_PAUSE) {
 8004060:	e559      	b.n	8003b16 <aiSystemPerformanceProcess+0xe>
      if (r == CONS_EVT_QUIT) {
 8004062:	2801      	cmp	r0, #1
 8004064:	d115      	bne.n	8004092 <aiSystemPerformanceProcess+0x58a>
        profiling_mode = false;
 8004066:	4b16      	ldr	r3, [pc, #88]	; (80040c0 <aiSystemPerformanceProcess+0x5b8>)
 8004068:	2200      	movs	r2, #0
        LC_PRINT("\r\n");
 800406a:	4816      	ldr	r0, [pc, #88]	; (80040c4 <aiSystemPerformanceProcess+0x5bc>)
        profiling_mode = false;
 800406c:	701a      	strb	r2, [r3, #0]
        LC_PRINT("\r\n");
 800406e:	f000 fa57 	bl	8004520 <lc_print>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004072:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8004076:	b672      	cpsid	i
        aiDeInit();
 8004078:	f7ff fb06 	bl	8003688 <aiDeInit>
        LC_PRINT("\r\n");
 800407c:	4811      	ldr	r0, [pc, #68]	; (80040c4 <aiSystemPerformanceProcess+0x5bc>)
 800407e:	f000 fa4f 	bl	8004520 <lc_print>
        LC_PRINT("Board should be reseted...\r\n");
 8004082:	4813      	ldr	r0, [pc, #76]	; (80040d0 <aiSystemPerformanceProcess+0x5c8>)
 8004084:	f000 fa4c 	bl	8004520 <lc_print>
          port_hal_delay(1000);
 8004088:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800408c:	f7fd fe44 	bl	8001d18 <HAL_Delay>
        while (1) {
 8004090:	e7fa      	b.n	8004088 <aiSystemPerformanceProcess+0x580>
      if (r == CONS_EVT_PAUSE) {
 8004092:	2804      	cmp	r0, #4
 8004094:	d003      	beq.n	800409e <aiSystemPerformanceProcess+0x596>
  } while (r==0);
 8004096:	2800      	cmp	r0, #0
 8004098:	f43f ad3d 	beq.w	8003b16 <aiSystemPerformanceProcess+0xe>
 800409c:	e543      	b.n	8003b26 <aiSystemPerformanceProcess+0x1e>
        LC_PRINT("\r\n");
 800409e:	4809      	ldr	r0, [pc, #36]	; (80040c4 <aiSystemPerformanceProcess+0x5bc>)
 80040a0:	f000 fa3e 	bl	8004520 <lc_print>
        LC_PRINT("Press any key to continue..\r\n");
 80040a4:	480b      	ldr	r0, [pc, #44]	; (80040d4 <aiSystemPerformanceProcess+0x5cc>)
 80040a6:	f000 fa3b 	bl	8004520 <lc_print>
        while ((r = aiTestConsole()) == CONS_EVT_TIMEOUT) {
 80040aa:	f7ff fb07 	bl	80036bc <aiTestConsole>
 80040ae:	2800      	cmp	r0, #0
 80040b0:	f47f ad31 	bne.w	8003b16 <aiSystemPerformanceProcess+0xe>
          port_hal_delay(1000);
 80040b4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80040b8:	f7fd fe2e 	bl	8001d18 <HAL_Delay>
 80040bc:	e7f5      	b.n	80040aa <aiSystemPerformanceProcess+0x5a2>
 80040be:	bf00      	nop
 80040c0:	20001530 	.word	0x20001530
 80040c4:	0800caef 	.word	0x0800caef
 80040c8:	2000068c 	.word	0x2000068c
 80040cc:	20000690 	.word	0x20000690
 80040d0:	0800ce5d 	.word	0x0800ce5d
 80040d4:	0800ce3f 	.word	0x0800ce3f

080040d8 <aiPlatformVersion>:

#include <ai_platform_interface.h>


void aiPlatformVersion(void)
{
 80040d8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  const ai_platform_version rt_ver = ai_platform_runtime_get_version();
 80040da:	f001 fb17 	bl	800570c <ai_platform_runtime_get_version>

  LC_PRINT("\r\nAI platform (API %d.%d.%d - RUNTIME %d.%d.%d)\r\n",
 80040de:	f3c0 4307 	ubfx	r3, r0, #16, #8
 80040e2:	2201      	movs	r2, #1
 80040e4:	9302      	str	r3, [sp, #8]
 80040e6:	f3c0 2307 	ubfx	r3, r0, #8, #8
 80040ea:	b2c0      	uxtb	r0, r0
 80040ec:	4611      	mov	r1, r2
 80040ee:	9301      	str	r3, [sp, #4]
 80040f0:	2300      	movs	r3, #0
 80040f2:	9000      	str	r0, [sp, #0]
 80040f4:	4802      	ldr	r0, [pc, #8]	; (8004100 <aiPlatformVersion+0x28>)
 80040f6:	f000 fa13 	bl	8004520 <lc_print>
      AI_PLATFORM_API_MINOR,
      AI_PLATFORM_API_MICRO,
      rt_ver.major,
      rt_ver.minor,
      rt_ver.micro);
}
 80040fa:	b007      	add	sp, #28
 80040fc:	f85d fb04 	ldr.w	pc, [sp], #4
 8004100:	0800ce88 	.word	0x0800ce88

08004104 <aiLogErr>:

void aiLogErr(const ai_error err, const char *fct)
{
 8004104:	b410      	push	{r4}
  if (fct)
    LC_PRINT("E: AI error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 8004106:	f3c0 2317 	ubfx	r3, r0, #8, #24
 800410a:	b2c4      	uxtb	r4, r0
  if (fct)
 800410c:	b129      	cbz	r1, 800411a <aiLogErr+0x16>
    LC_PRINT("E: AI error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 800410e:	4622      	mov	r2, r4
 8004110:	4805      	ldr	r0, [pc, #20]	; (8004128 <aiLogErr+0x24>)
        err.type, err.code);
  else
    LC_PRINT("E: AI error - type=0x%02x code=0x%02x\r\n", err.type, err.code);
}
 8004112:	f85d 4b04 	ldr.w	r4, [sp], #4
    LC_PRINT("E: AI error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 8004116:	f000 ba03 	b.w	8004520 <lc_print>
    LC_PRINT("E: AI error - type=0x%02x code=0x%02x\r\n", err.type, err.code);
 800411a:	4621      	mov	r1, r4
 800411c:	461a      	mov	r2, r3
 800411e:	4803      	ldr	r0, [pc, #12]	; (800412c <aiLogErr+0x28>)
}
 8004120:	f85d 4b04 	ldr.w	r4, [sp], #4
    LC_PRINT("E: AI error - type=0x%02x code=0x%02x\r\n", err.type, err.code);
 8004124:	f000 b9fc 	b.w	8004520 <lc_print>
 8004128:	0800ceba 	.word	0x0800ceba
 800412c:	0800cee7 	.word	0x0800cee7

08004130 <aiPrintBufferInfo>:
    }
}


void aiPrintBufferInfo(const ai_buffer *buffer)
{
 8004130:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  const ai_buffer_format fmt = buffer->format;

  /* shape + nb elem */
  LC_PRINT("(%d,%d,%d,",
 8004134:	6981      	ldr	r1, [r0, #24]
{
 8004136:	4605      	mov	r5, r0
  const ai_buffer_format fmt = buffer->format;
 8004138:	6807      	ldr	r7, [r0, #0]
  LC_PRINT("(%d,%d,%d,",
 800413a:	486d      	ldr	r0, [pc, #436]	; (80042f0 <aiPrintBufferInfo+0x1c0>)
 800413c:	e9d1 3202 	ldrd	r3, r2, [r1, #8]
 8004140:	6809      	ldr	r1, [r1, #0]
 8004142:	f000 f9ed 	bl	8004520 <lc_print>
     (int)AI_BUFFER_SHAPE_ELEM(buffer, AI_SHAPE_BATCH),
     (int)AI_BUFFER_SHAPE_ELEM(buffer, AI_SHAPE_HEIGHT),
     (int)AI_BUFFER_SHAPE_ELEM(buffer, AI_SHAPE_WIDTH));

  if (AI_BUFFER_SHAPE_SIZE(buffer) == 5)
 8004146:	696a      	ldr	r2, [r5, #20]
 8004148:	69a8      	ldr	r0, [r5, #24]
 800414a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800414e:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
 8004152:	d12b      	bne.n	80041ac <aiPrintBufferInfo+0x7c>
  {
    LC_PRINT("%d,%d)",
 8004154:	6842      	ldr	r2, [r0, #4]
 8004156:	6901      	ldr	r1, [r0, #16]
 8004158:	4866      	ldr	r0, [pc, #408]	; (80042f4 <aiPrintBufferInfo+0x1c4>)
 800415a:	f000 f9e1 	bl	8004520 <lc_print>
  } else
  {
    LC_PRINT("%d)", (int)AI_BUFFER_SHAPE_ELEM(buffer, AI_SHAPE_CHANNEL));
  }

  LC_PRINT("%d/", (int)AI_BUFFER_SIZE(buffer));
 800415e:	2101      	movs	r1, #1
 8004160:	4628      	mov	r0, r5
    if (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_FLOAT)
 8004162:	f3c7 4643 	ubfx	r6, r7, #17, #4
  LC_PRINT("%d/", (int)AI_BUFFER_SIZE(buffer));
 8004166:	f001 f897 	bl	8005298 <ai_buffer_get_size>
 800416a:	4601      	mov	r1, r0
 800416c:	4862      	ldr	r0, [pc, #392]	; (80042f8 <aiPrintBufferInfo+0x1c8>)
 800416e:	f000 f9d7 	bl	8004520 <lc_print>
    if (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_FLOAT)
 8004172:	2e01      	cmp	r6, #1
      LC_PRINT("float%d", (int)AI_BUFFER_FMT_GET_BITS(fmt));
 8004174:	ea4f 19e7 	mov.w	r9, r7, asr #7
 8004178:	f3c7 14c6 	ubfx	r4, r7, #7, #7
    if (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_FLOAT)
 800417c:	d125      	bne.n	80041ca <aiPrintBufferInfo+0x9a>
      LC_PRINT("float%d", (int)AI_BUFFER_FMT_GET_BITS(fmt));
 800417e:	4621      	mov	r1, r4
 8004180:	485e      	ldr	r0, [pc, #376]	; (80042fc <aiPrintBufferInfo+0x1cc>)
      LC_PRINT("bool%d", (int)AI_BUFFER_FMT_GET_BITS(fmt));
 8004182:	f000 f9cd 	bl	8004520 <lc_print>
          AI_BUFFER_FMT_GET_FBITS(fmt)
      );
    }
  }
  /* @ + size in bytes */
  if (buffer->data)
 8004186:	686c      	ldr	r4, [r5, #4]
    LC_PRINT(" @0x%X/%d",
 8004188:	2101      	movs	r1, #1
 800418a:	4628      	mov	r0, r5
  if (buffer->data)
 800418c:	2c00      	cmp	r4, #0
 800418e:	f000 809e 	beq.w	80042ce <aiPrintBufferInfo+0x19e>
    LC_PRINT(" @0x%X/%d",
 8004192:	f001 f881 	bl	8005298 <ai_buffer_get_size>
 8004196:	4639      	mov	r1, r7
 8004198:	f001 f8b2 	bl	8005300 <ai_buffer_get_byte_size>
 800419c:	4621      	mov	r1, r4
 800419e:	4602      	mov	r2, r0
 80041a0:	4857      	ldr	r0, [pc, #348]	; (8004300 <aiPrintBufferInfo+0x1d0>)
    );
  else
    LC_PRINT(" (User Domain)/%d",
        (int)AI_BUFFER_BYTE_SIZE(AI_BUFFER_SIZE(buffer), fmt)
    );
}
 80041a2:	b003      	add	sp, #12
 80041a4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    LC_PRINT(" @0x%X/%d",
 80041a8:	f000 b9ba 	b.w	8004520 <lc_print>
  else if (AI_BUFFER_SHAPE_SIZE(buffer) == 6)
 80041ac:	f5b2 6fc0 	cmp.w	r2, #1536	; 0x600
    LC_PRINT("%d,%d)",
 80041b0:	6843      	ldr	r3, [r0, #4]
  else if (AI_BUFFER_SHAPE_SIZE(buffer) == 6)
 80041b2:	d105      	bne.n	80041c0 <aiPrintBufferInfo+0x90>
    LC_PRINT("%d,%d,%d)",
 80041b4:	e9d0 1204 	ldrd	r1, r2, [r0, #16]
 80041b8:	4852      	ldr	r0, [pc, #328]	; (8004304 <aiPrintBufferInfo+0x1d4>)
 80041ba:	f000 f9b1 	bl	8004520 <lc_print>
 80041be:	e7ce      	b.n	800415e <aiPrintBufferInfo+0x2e>
    LC_PRINT("%d)", (int)AI_BUFFER_SHAPE_ELEM(buffer, AI_SHAPE_CHANNEL));
 80041c0:	4619      	mov	r1, r3
 80041c2:	4851      	ldr	r0, [pc, #324]	; (8004308 <aiPrintBufferInfo+0x1d8>)
 80041c4:	f000 f9ac 	bl	8004520 <lc_print>
 80041c8:	e7c9      	b.n	800415e <aiPrintBufferInfo+0x2e>
    else if (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_BOOL) {
 80041ca:	2e03      	cmp	r6, #3
 80041cc:	d102      	bne.n	80041d4 <aiPrintBufferInfo+0xa4>
      LC_PRINT("bool%d", (int)AI_BUFFER_FMT_GET_BITS(fmt));
 80041ce:	4621      	mov	r1, r4
 80041d0:	484e      	ldr	r0, [pc, #312]	; (800430c <aiPrintBufferInfo+0x1dc>)
 80041d2:	e7d6      	b.n	8004182 <aiPrintBufferInfo+0x52>
      LC_PRINT("%s%d", AI_BUFFER_FMT_GET_SIGN(fmt)?"i":"u",
 80041d4:	f8df 8148 	ldr.w	r8, [pc, #328]	; 8004320 <aiPrintBufferInfo+0x1f0>
 80041d8:	f417 0f00 	tst.w	r7, #8388608	; 0x800000
 80041dc:	4622      	mov	r2, r4
 80041de:	f108 0102 	add.w	r1, r8, #2
 80041e2:	f108 003b 	add.w	r0, r8, #59	; 0x3b
 80041e6:	bf18      	it	ne
 80041e8:	4641      	movne	r1, r8
 80041ea:	f000 f999 	bl	8004520 <lc_print>
  if (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_Q) {
 80041ee:	2e02      	cmp	r6, #2
 80041f0:	d1c9      	bne.n	8004186 <aiPrintBufferInfo+0x56>
    if (AI_BUFFER_META_INFO_INTQ(buffer->meta_info)) {
 80041f2:	68ab      	ldr	r3, [r5, #8]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d059      	beq.n	80042ac <aiPrintBufferInfo+0x17c>
 80041f8:	681a      	ldr	r2, [r3, #0]
 80041fa:	07d2      	lsls	r2, r2, #31
 80041fc:	d556      	bpl.n	80042ac <aiPrintBufferInfo+0x17c>
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d053      	beq.n	80042ac <aiPrintBufferInfo+0x17c>
      ai_u16 s_ = AI_BUFFER_META_INFO_INTQ_GET_SIZE(buffer->meta_info);
 8004204:	f8b3 9002 	ldrh.w	r9, [r3, #2]
      LC_PRINT(" %d:", s_);
 8004208:	f108 0040 	add.w	r0, r8, #64	; 0x40
      for (int idx=0; idx<max_; idx++) {
 800420c:	2600      	movs	r6, #0
        ai_float scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(buffer->meta_info, idx);
 800420e:	f04f 0b00 	mov.w	fp, #0
      const int max_ = s_> 4?4:s_;
 8004212:	f1b9 0f04 	cmp.w	r9, #4
        LC_PRINT("(%f,%d),", (double)scale, zero_point);
 8004216:	f108 0845 	add.w	r8, r8, #69	; 0x45
      LC_PRINT(" %d:", s_);
 800421a:	4649      	mov	r1, r9
      const int max_ = s_> 4?4:s_;
 800421c:	46ca      	mov	sl, r9
 800421e:	bf28      	it	cs
 8004220:	f04f 0a04 	movcs.w	sl, #4
      LC_PRINT(" %d:", s_);
 8004224:	f000 f97c 	bl	8004520 <lc_print>
      for (int idx=0; idx<max_; idx++) {
 8004228:	4556      	cmp	r6, sl
 800422a:	db07      	blt.n	800423c <aiPrintBufferInfo+0x10c>
      LC_PRINT((s_ > max_)?"..":"");
 800422c:	4b38      	ldr	r3, [pc, #224]	; (8004310 <aiPrintBufferInfo+0x1e0>)
 800422e:	1cd8      	adds	r0, r3, #3
 8004230:	45ca      	cmp	sl, r9
 8004232:	bf38      	it	cc
 8004234:	4618      	movcc	r0, r3
 8004236:	f000 f973 	bl	8004520 <lc_print>
    if (AI_BUFFER_META_INFO_INTQ(buffer->meta_info)) {
 800423a:	e7a4      	b.n	8004186 <aiPrintBufferInfo+0x56>
        ai_float scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(buffer->meta_info, idx);
 800423c:	68aa      	ldr	r2, [r5, #8]
 800423e:	2a00      	cmp	r2, #0
 8004240:	d02f      	beq.n	80042a2 <aiPrintBufferInfo+0x172>
 8004242:	6813      	ldr	r3, [r2, #0]
 8004244:	f013 0401 	ands.w	r4, r3, #1
 8004248:	d02e      	beq.n	80042a8 <aiPrintBufferInfo+0x178>
 800424a:	6853      	ldr	r3, [r2, #4]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d04a      	beq.n	80042e6 <aiPrintBufferInfo+0x1b6>
 8004250:	685a      	ldr	r2, [r3, #4]
 8004252:	2a00      	cmp	r2, #0
 8004254:	d04a      	beq.n	80042ec <aiPrintBufferInfo+0x1bc>
 8004256:	8859      	ldrh	r1, [r3, #2]
 8004258:	42b1      	cmp	r1, r6
 800425a:	dd47      	ble.n	80042ec <aiPrintBufferInfo+0x1bc>
 800425c:	6812      	ldr	r2, [r2, #0]
 800425e:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 8004262:	6810      	ldr	r0, [r2, #0]
        int zero_point = AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(buffer->meta_info, idx);
 8004264:	2b00      	cmp	r3, #0
 8004266:	d03f      	beq.n	80042e8 <aiPrintBufferInfo+0x1b8>
 8004268:	881a      	ldrh	r2, [r3, #0]
        ai_float scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(buffer->meta_info, idx);
 800426a:	685c      	ldr	r4, [r3, #4]
        int zero_point = AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(buffer->meta_info, idx);
 800426c:	f012 0202 	ands.w	r2, r2, #2
 8004270:	d00f      	beq.n	8004292 <aiPrintBufferInfo+0x162>
 8004272:	b124      	cbz	r4, 800427e <aiPrintBufferInfo+0x14e>
 8004274:	885b      	ldrh	r3, [r3, #2]
 8004276:	42b3      	cmp	r3, r6
 8004278:	dd36      	ble.n	80042e8 <aiPrintBufferInfo+0x1b8>
 800427a:	6863      	ldr	r3, [r4, #4]
 800427c:	5d9c      	ldrb	r4, [r3, r6]
        LC_PRINT("(%f,%d),", (double)scale, zero_point);
 800427e:	f7fc f983 	bl	8000588 <__aeabi_f2d>
 8004282:	9400      	str	r4, [sp, #0]
 8004284:	4602      	mov	r2, r0
 8004286:	460b      	mov	r3, r1
 8004288:	4640      	mov	r0, r8
      for (int idx=0; idx<max_; idx++) {
 800428a:	3601      	adds	r6, #1
        LC_PRINT("(%f,%d),", (double)scale, zero_point);
 800428c:	f000 f948 	bl	8004520 <lc_print>
      for (int idx=0; idx<max_; idx++) {
 8004290:	e7ca      	b.n	8004228 <aiPrintBufferInfo+0xf8>
        int zero_point = AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(buffer->meta_info, idx);
 8004292:	2c00      	cmp	r4, #0
 8004294:	d0f3      	beq.n	800427e <aiPrintBufferInfo+0x14e>
 8004296:	885b      	ldrh	r3, [r3, #2]
 8004298:	42b3      	cmp	r3, r6
 800429a:	dd03      	ble.n	80042a4 <aiPrintBufferInfo+0x174>
 800429c:	6863      	ldr	r3, [r4, #4]
 800429e:	579c      	ldrsb	r4, [r3, r6]
 80042a0:	e7ed      	b.n	800427e <aiPrintBufferInfo+0x14e>
        ai_float scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(buffer->meta_info, idx);
 80042a2:	4658      	mov	r0, fp
        int zero_point = AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(buffer->meta_info, idx);
 80042a4:	4614      	mov	r4, r2
 80042a6:	e7ea      	b.n	800427e <aiPrintBufferInfo+0x14e>
        ai_float scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(buffer->meta_info, idx);
 80042a8:	4658      	mov	r0, fp
 80042aa:	e7e8      	b.n	800427e <aiPrintBufferInfo+0x14e>
    } else if (AI_BUFFER_FMT_GET_BITS(fmt) < 8) {
 80042ac:	f019 0f78 	tst.w	r9, #120	; 0x78
 80042b0:	d102      	bne.n	80042b8 <aiPrintBufferInfo+0x188>
      LC_PRINT(" int32-%db", (int)AI_BUFFER_FMT_GET_BITS(fmt));
 80042b2:	4621      	mov	r1, r4
 80042b4:	4817      	ldr	r0, [pc, #92]	; (8004314 <aiPrintBufferInfo+0x1e4>)
 80042b6:	e764      	b.n	8004182 <aiPrintBufferInfo+0x52>
      LC_PRINT(" Q%d.%d",
 80042b8:	f007 027f 	and.w	r2, r7, #127	; 0x7f
 80042bc:	f3c7 51c0 	ubfx	r1, r7, #23, #1
 80042c0:	4815      	ldr	r0, [pc, #84]	; (8004318 <aiPrintBufferInfo+0x1e8>)
 80042c2:	3a40      	subs	r2, #64	; 0x40
 80042c4:	4411      	add	r1, r2
 80042c6:	1a61      	subs	r1, r4, r1
 80042c8:	f000 f92a 	bl	8004520 <lc_print>
 80042cc:	e75b      	b.n	8004186 <aiPrintBufferInfo+0x56>
    LC_PRINT(" (User Domain)/%d",
 80042ce:	f000 ffe3 	bl	8005298 <ai_buffer_get_size>
 80042d2:	4639      	mov	r1, r7
 80042d4:	f001 f814 	bl	8005300 <ai_buffer_get_byte_size>
 80042d8:	4601      	mov	r1, r0
 80042da:	4810      	ldr	r0, [pc, #64]	; (800431c <aiPrintBufferInfo+0x1ec>)
}
 80042dc:	b003      	add	sp, #12
 80042de:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    LC_PRINT(" (User Domain)/%d",
 80042e2:	f000 b91d 	b.w	8004520 <lc_print>
        ai_float scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(buffer->meta_info, idx);
 80042e6:	4658      	mov	r0, fp
        int zero_point = AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(buffer->meta_info, idx);
 80042e8:	2400      	movs	r4, #0
 80042ea:	e7c8      	b.n	800427e <aiPrintBufferInfo+0x14e>
        ai_float scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(buffer->meta_info, idx);
 80042ec:	4658      	mov	r0, fp
 80042ee:	e7b9      	b.n	8004264 <aiPrintBufferInfo+0x134>
 80042f0:	0800cf17 	.word	0x0800cf17
 80042f4:	0800cf22 	.word	0x0800cf22
 80042f8:	0800cf37 	.word	0x0800cf37
 80042fc:	0800cf3b 	.word	0x0800cf3b
 8004300:	0800cf70 	.word	0x0800cf70
 8004304:	0800cf29 	.word	0x0800cf29
 8004308:	0800cf33 	.word	0x0800cf33
 800430c:	0800cf43 	.word	0x0800cf43
 8004310:	0800cf13 	.word	0x0800cf13
 8004314:	0800cf5d 	.word	0x0800cf5d
 8004318:	0800cf68 	.word	0x0800cf68
 800431c:	0800cf7a 	.word	0x0800cf7a
 8004320:	0800cf0f 	.word	0x0800cf0f

08004324 <aiPrintNetworkInfo>:

void aiPrintNetworkInfo(const ai_network_report* report)
{
 8004324:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004328:	4604      	mov	r4, r0
  LC_PRINT("Network informations...\r\n");
 800432a:	484b      	ldr	r0, [pc, #300]	; (8004458 <aiPrintNetworkInfo+0x134>)
 800432c:	f000 f8f8 	bl	8004520 <lc_print>
  LC_PRINT(" model name         : %s\r\n", report->model_name);
 8004330:	484a      	ldr	r0, [pc, #296]	; (800445c <aiPrintNetworkInfo+0x138>)
 8004332:	6821      	ldr	r1, [r4, #0]
 8004334:	f000 f8f4 	bl	8004520 <lc_print>
  LC_PRINT(" model signature    : %s\r\n", report->model_signature);
 8004338:	6861      	ldr	r1, [r4, #4]
 800433a:	4849      	ldr	r0, [pc, #292]	; (8004460 <aiPrintNetworkInfo+0x13c>)
 800433c:	f000 f8f0 	bl	8004520 <lc_print>
  LC_PRINT(" model datetime     : %s\r\n", report->model_datetime);
 8004340:	68a1      	ldr	r1, [r4, #8]
 8004342:	4848      	ldr	r0, [pc, #288]	; (8004464 <aiPrintNetworkInfo+0x140>)
 8004344:	f000 f8ec 	bl	8004520 <lc_print>
  LC_PRINT(" compile datetime   : %s\r\n", report->compile_datetime);
 8004348:	68e1      	ldr	r1, [r4, #12]
 800434a:	4847      	ldr	r0, [pc, #284]	; (8004468 <aiPrintNetworkInfo+0x144>)
 800434c:	f000 f8e8 	bl	8004520 <lc_print>
  LC_PRINT(" runtime version    : %d.%d.%d\r\n",
      report->runtime_version.major,
      report->runtime_version.minor,
      report->runtime_version.micro);
#endif
  if (report->tool_revision[0])
 8004350:	69a1      	ldr	r1, [r4, #24]
 8004352:	780b      	ldrb	r3, [r1, #0]
 8004354:	b113      	cbz	r3, 800435c <aiPrintNetworkInfo+0x38>
    LC_PRINT(" Tool revision      : %s\r\n", (report->tool_revision[0])?report->tool_revision:"");
 8004356:	4845      	ldr	r0, [pc, #276]	; (800446c <aiPrintNetworkInfo+0x148>)
 8004358:	f000 f8e2 	bl	8004520 <lc_print>
  LC_PRINT(" tools version      : %d.%d.%d\r\n",
 800435c:	7f21      	ldrb	r1, [r4, #28]
      report->tool_version.micro);
  LC_PRINT(" complexity         : " "%" PRIu64 " MACC\r\n", report->n_macc);
  LC_PRINT(" c-nodes            : %d\r\n", (int)report->n_nodes);

  LC_PRINT(" map_activations    : %d\r\n", report->map_activations.size);
  for (int idx=0; idx<report->map_activations.size;idx++) {
 800435e:	2500      	movs	r5, #0
  LC_PRINT(" tools version      : %d.%d.%d\r\n",
 8004360:	7fa3      	ldrb	r3, [r4, #30]
      const ai_buffer *buffer = &report->map_activations.buffer[idx];
 8004362:	f04f 081c 	mov.w	r8, #28
  LC_PRINT(" tools version      : %d.%d.%d\r\n",
 8004366:	7f62      	ldrb	r2, [r4, #29]
 8004368:	4841      	ldr	r0, [pc, #260]	; (8004470 <aiPrintNetworkInfo+0x14c>)
      LC_PRINT("  [%d] ", idx);
 800436a:	4f42      	ldr	r7, [pc, #264]	; (8004474 <aiPrintNetworkInfo+0x150>)
  LC_PRINT(" tools version      : %d.%d.%d\r\n",
 800436c:	f000 f8d8 	bl	8004520 <lc_print>
  LC_PRINT(" complexity         : " "%" PRIu64 " MACC\r\n", report->n_macc);
 8004370:	4841      	ldr	r0, [pc, #260]	; (8004478 <aiPrintNetworkInfo+0x154>)
      aiPrintBufferInfo(buffer);
      LC_PRINT("\r\n");
 8004372:	f107 0908 	add.w	r9, r7, #8
  LC_PRINT(" complexity         : " "%" PRIu64 " MACC\r\n", report->n_macc);
 8004376:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
 800437a:	f000 f8d1 	bl	8004520 <lc_print>
  LC_PRINT(" c-nodes            : %d\r\n", (int)report->n_nodes);
 800437e:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8004380:	483e      	ldr	r0, [pc, #248]	; (800447c <aiPrintNetworkInfo+0x158>)
 8004382:	f000 f8cd 	bl	8004520 <lc_print>
  LC_PRINT(" map_activations    : %d\r\n", report->map_activations.size);
 8004386:	f8b4 1052 	ldrh.w	r1, [r4, #82]	; 0x52
 800438a:	483d      	ldr	r0, [pc, #244]	; (8004480 <aiPrintNetworkInfo+0x15c>)
 800438c:	f000 f8c8 	bl	8004520 <lc_print>
  for (int idx=0; idx<report->map_activations.size;idx++) {
 8004390:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8004394:	42ab      	cmp	r3, r5
 8004396:	dc25      	bgt.n	80043e4 <aiPrintNetworkInfo+0xc0>
  }

  LC_PRINT(" map_weights        : %d\r\n", report->map_weights.size);
  for (int idx=0; idx<report->map_weights.size;idx++) {
      const ai_buffer *buffer = &report->map_weights.buffer[idx];
      LC_PRINT("  [%d] ", idx);
 8004398:	4f36      	ldr	r7, [pc, #216]	; (8004474 <aiPrintNetworkInfo+0x150>)
  for (int idx=0; idx<report->map_weights.size;idx++) {
 800439a:	2500      	movs	r5, #0
      const ai_buffer *buffer = &report->map_weights.buffer[idx];
 800439c:	f04f 081c 	mov.w	r8, #28
  LC_PRINT(" map_weights        : %d\r\n", report->map_weights.size);
 80043a0:	f8b4 104a 	ldrh.w	r1, [r4, #74]	; 0x4a
      aiPrintBufferInfo(buffer);
      LC_PRINT("\r\n");
 80043a4:	f107 0908 	add.w	r9, r7, #8
  LC_PRINT(" map_weights        : %d\r\n", report->map_weights.size);
 80043a8:	4836      	ldr	r0, [pc, #216]	; (8004484 <aiPrintNetworkInfo+0x160>)
 80043aa:	f000 f8b9 	bl	8004520 <lc_print>
  for (int idx=0; idx<report->map_weights.size;idx++) {
 80043ae:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
 80043b2:	42ab      	cmp	r3, r5
 80043b4:	dc25      	bgt.n	8004402 <aiPrintNetworkInfo+0xde>
  LC_PRINT(" n_inputs/n_outputs : %u/%u\r\n", report->n_inputs,
          report->n_outputs);

  for (int i=0; i<report->n_inputs; i++) {
    // LC_PRINT("  I[%d] %s\r\n", i, aiGetBufferDesc(&report->inputs[i]));
    LC_PRINT("  I[%d] ", i);
 80043b6:	4e34      	ldr	r6, [pc, #208]	; (8004488 <aiPrintNetworkInfo+0x164>)
  for (int i=0; i<report->n_inputs; i++) {
 80043b8:	2500      	movs	r5, #0
    aiPrintBufferInfo(&report->inputs[i]);
 80043ba:	271c      	movs	r7, #28
  LC_PRINT(" n_inputs/n_outputs : %u/%u\r\n", report->n_inputs,
 80043bc:	8f62      	ldrh	r2, [r4, #58]	; 0x3a
    LC_PRINT("\r\n");
 80043be:	f1a6 083c 	sub.w	r8, r6, #60	; 0x3c
  LC_PRINT(" n_inputs/n_outputs : %u/%u\r\n", report->n_inputs,
 80043c2:	8f21      	ldrh	r1, [r4, #56]	; 0x38
 80043c4:	4831      	ldr	r0, [pc, #196]	; (800448c <aiPrintNetworkInfo+0x168>)
 80043c6:	f000 f8ab 	bl	8004520 <lc_print>
  for (int i=0; i<report->n_inputs; i++) {
 80043ca:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 80043cc:	42ab      	cmp	r3, r5
 80043ce:	dc27      	bgt.n	8004420 <aiPrintNetworkInfo+0xfc>
  }

  for (int i=0; i<report->n_outputs; i++) {
    //LC_PRINT("  O[%d] %s\r\n", i, aiGetBufferDesc(&report->outputs[i]));
    LC_PRINT("  O[%d] ", i);
 80043d0:	4e2f      	ldr	r6, [pc, #188]	; (8004490 <aiPrintNetworkInfo+0x16c>)
  for (int i=0; i<report->n_outputs; i++) {
 80043d2:	2500      	movs	r5, #0
    aiPrintBufferInfo(&report->outputs[i]);
 80043d4:	271c      	movs	r7, #28
    LC_PRINT("\r\n");
 80043d6:	f1a6 0845 	sub.w	r8, r6, #69	; 0x45
  for (int i=0; i<report->n_outputs; i++) {
 80043da:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 80043dc:	42ab      	cmp	r3, r5
 80043de:	dc2d      	bgt.n	800443c <aiPrintNetworkInfo+0x118>
  }
}
 80043e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      const ai_buffer *buffer = &report->map_activations.buffer[idx];
 80043e4:	6d60      	ldr	r0, [r4, #84]	; 0x54
      LC_PRINT("  [%d] ", idx);
 80043e6:	4629      	mov	r1, r5
      const ai_buffer *buffer = &report->map_activations.buffer[idx];
 80043e8:	fb08 0605 	mla	r6, r8, r5, r0
      LC_PRINT("  [%d] ", idx);
 80043ec:	4638      	mov	r0, r7
 80043ee:	f000 f897 	bl	8004520 <lc_print>
  for (int idx=0; idx<report->map_activations.size;idx++) {
 80043f2:	3501      	adds	r5, #1
      aiPrintBufferInfo(buffer);
 80043f4:	4630      	mov	r0, r6
 80043f6:	f7ff fe9b 	bl	8004130 <aiPrintBufferInfo>
      LC_PRINT("\r\n");
 80043fa:	4648      	mov	r0, r9
 80043fc:	f000 f890 	bl	8004520 <lc_print>
  for (int idx=0; idx<report->map_activations.size;idx++) {
 8004400:	e7c6      	b.n	8004390 <aiPrintNetworkInfo+0x6c>
      const ai_buffer *buffer = &report->map_weights.buffer[idx];
 8004402:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
      LC_PRINT("  [%d] ", idx);
 8004404:	4629      	mov	r1, r5
      const ai_buffer *buffer = &report->map_weights.buffer[idx];
 8004406:	fb08 0605 	mla	r6, r8, r5, r0
      LC_PRINT("  [%d] ", idx);
 800440a:	4638      	mov	r0, r7
 800440c:	f000 f888 	bl	8004520 <lc_print>
  for (int idx=0; idx<report->map_weights.size;idx++) {
 8004410:	3501      	adds	r5, #1
      aiPrintBufferInfo(buffer);
 8004412:	4630      	mov	r0, r6
 8004414:	f7ff fe8c 	bl	8004130 <aiPrintBufferInfo>
      LC_PRINT("\r\n");
 8004418:	4648      	mov	r0, r9
 800441a:	f000 f881 	bl	8004520 <lc_print>
  for (int idx=0; idx<report->map_weights.size;idx++) {
 800441e:	e7c6      	b.n	80043ae <aiPrintNetworkInfo+0x8a>
    LC_PRINT("  I[%d] ", i);
 8004420:	4629      	mov	r1, r5
 8004422:	4630      	mov	r0, r6
 8004424:	f000 f87c 	bl	8004520 <lc_print>
    aiPrintBufferInfo(&report->inputs[i]);
 8004428:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800442a:	fb07 0005 	mla	r0, r7, r5, r0
  for (int i=0; i<report->n_inputs; i++) {
 800442e:	3501      	adds	r5, #1
    aiPrintBufferInfo(&report->inputs[i]);
 8004430:	f7ff fe7e 	bl	8004130 <aiPrintBufferInfo>
    LC_PRINT("\r\n");
 8004434:	4640      	mov	r0, r8
 8004436:	f000 f873 	bl	8004520 <lc_print>
  for (int i=0; i<report->n_inputs; i++) {
 800443a:	e7c6      	b.n	80043ca <aiPrintNetworkInfo+0xa6>
    LC_PRINT("  O[%d] ", i);
 800443c:	4629      	mov	r1, r5
 800443e:	4630      	mov	r0, r6
 8004440:	f000 f86e 	bl	8004520 <lc_print>
    aiPrintBufferInfo(&report->outputs[i]);
 8004444:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8004446:	fb07 0005 	mla	r0, r7, r5, r0
  for (int i=0; i<report->n_outputs; i++) {
 800444a:	3501      	adds	r5, #1
    aiPrintBufferInfo(&report->outputs[i]);
 800444c:	f7ff fe70 	bl	8004130 <aiPrintBufferInfo>
    LC_PRINT("\r\n");
 8004450:	4640      	mov	r0, r8
 8004452:	f000 f865 	bl	8004520 <lc_print>
  for (int i=0; i<report->n_outputs; i++) {
 8004456:	e7c0      	b.n	80043da <aiPrintNetworkInfo+0xb6>
 8004458:	0800cf8c 	.word	0x0800cf8c
 800445c:	0800cfa6 	.word	0x0800cfa6
 8004460:	0800cfc1 	.word	0x0800cfc1
 8004464:	0800cfdc 	.word	0x0800cfdc
 8004468:	0800cff7 	.word	0x0800cff7
 800446c:	0800d012 	.word	0x0800d012
 8004470:	0800d02d 	.word	0x0800d02d
 8004474:	0800d0a6 	.word	0x0800d0a6
 8004478:	0800d04e 	.word	0x0800d04e
 800447c:	0800d070 	.word	0x0800d070
 8004480:	0800d08b 	.word	0x0800d08b
 8004484:	0800d0b1 	.word	0x0800d0b1
 8004488:	0800d0ea 	.word	0x0800d0ea
 800448c:	0800d0cc 	.word	0x0800d0cc
 8004490:	0800d0f3 	.word	0x0800d0f3

08004494 <_put_c_driver>:
static void _put_c_driver(void *user, const char c)
{
#if defined(HAS_DEDICATED_PRINT_PORT) && HAS_DEDICATED_PRINT_PORT == 1
  port_io_dedicated_putc(c);
#else
  if (_ioWriteAllowed)
 8004494:	4b08      	ldr	r3, [pc, #32]	; (80044b8 <_put_c_driver+0x24>)
 8004496:	781b      	ldrb	r3, [r3, #0]
{
 8004498:	b507      	push	{r0, r1, r2, lr}
 800449a:	f88d 1007 	strb.w	r1, [sp, #7]
  if (_ioWriteAllowed)
 800449e:	b13b      	cbz	r3, 80044b0 <_put_c_driver+0x1c>

__STATIC_INLINE bool port_io_write(uint8_t *buff, int count)
{
  HAL_StatusTypeDef status;

  status = HAL_UART_Transmit(&UartHandle, buff, count, HAL_MAX_DELAY);
 80044a0:	f04f 33ff 	mov.w	r3, #4294967295
 80044a4:	2201      	movs	r2, #1
 80044a6:	f10d 0107 	add.w	r1, sp, #7
 80044aa:	4804      	ldr	r0, [pc, #16]	; (80044bc <_put_c_driver+0x28>)
 80044ac:	f7fe fed1 	bl	8003252 <HAL_UART_Transmit>
  }
#ifdef SWO_OUTPUT
  ITM_SendChar(c);
#endif 
#endif
}
 80044b0:	b003      	add	sp, #12
 80044b2:	f85d fb04 	ldr.w	pc, [sp], #4
 80044b6:	bf00      	nop
 80044b8:	20000694 	.word	0x20000694
 80044bc:	20001350 	.word	0x20001350

080044c0 <ioRawGetUint8>:
 {
 80044c0:	b508      	push	{r3, lr}
 80044c2:	460b      	mov	r3, r1
  if (!c)
 80044c4:	4601      	mov	r1, r0
 80044c6:	b120      	cbz	r0, 80044d2 <ioRawGetUint8+0x12>
  status = HAL_UART_Receive(&UartHandle, (uint8_t *)c, 1, timeout);
 80044c8:	2201      	movs	r2, #1
 80044ca:	4804      	ldr	r0, [pc, #16]	; (80044dc <ioRawGetUint8+0x1c>)
 80044cc:	f7fe ff11 	bl	80032f2 <HAL_UART_Receive>
   return port_io_get(c, timeout) == true?1:-1;
 80044d0:	b110      	cbz	r0, 80044d8 <ioRawGetUint8+0x18>
 80044d2:	f04f 30ff 	mov.w	r0, #4294967295
 }
 80044d6:	bd08      	pop	{r3, pc}
   return port_io_get(c, timeout) == true?1:-1;
 80044d8:	2001      	movs	r0, #1
 80044da:	e7fc      	b.n	80044d6 <ioRawGetUint8+0x16>
 80044dc:	20001350 	.word	0x20001350

080044e0 <_write>:
{
 80044e0:	b510      	push	{r4, lr}
  if ((count < 0) && (fd != STDOUT_FILENO) && (fd != STDERR_FILENO)) {
 80044e2:	1e14      	subs	r4, r2, #0
 80044e4:	da0a      	bge.n	80044fc <_write+0x1c>
 80044e6:	3801      	subs	r0, #1
 80044e8:	2801      	cmp	r0, #1
 80044ea:	d907      	bls.n	80044fc <_write+0x1c>
    errno = EBADF;
 80044ec:	f004 ff26 	bl	800933c <__errno>
    return -1;
 80044f0:	f04f 34ff 	mov.w	r4, #4294967295
    errno = EBADF;
 80044f4:	2309      	movs	r3, #9
 80044f6:	6003      	str	r3, [r0, #0]
}
 80044f8:	4620      	mov	r0, r4
 80044fa:	bd10      	pop	{r4, pc}
  if (_ioWriteAllowed)
 80044fc:	4b06      	ldr	r3, [pc, #24]	; (8004518 <_write+0x38>)
 80044fe:	781b      	ldrb	r3, [r3, #0]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d0f9      	beq.n	80044f8 <_write+0x18>
  status = HAL_UART_Transmit(&UartHandle, buff, count, HAL_MAX_DELAY);
 8004504:	b2a2      	uxth	r2, r4
 8004506:	f04f 33ff 	mov.w	r3, #4294967295
 800450a:	4804      	ldr	r0, [pc, #16]	; (800451c <_write+0x3c>)
 800450c:	f7fe fea1 	bl	8003252 <HAL_UART_Transmit>
  return (status ? count : 0);
 8004510:	2800      	cmp	r0, #0
 8004512:	bf18      	it	ne
 8004514:	2400      	movne	r4, #0
 8004516:	e7ef      	b.n	80044f8 <_write+0x18>
 8004518:	20000694 	.word	0x20000694
 800451c:	20001350 	.word	0x20001350

08004520 <lc_print>:

void lc_print(const char* fmt, ... )
{
 8004520:	b40f      	push	{r0, r1, r2, r3}
 8004522:	b507      	push	{r0, r1, r2, lr}
 8004524:	ab04      	add	r3, sp, #16
  va_list ap;
  va_start(ap, fmt);
  vlc_print(&_put_c_driver, NULL, fmt, ap);
 8004526:	2100      	movs	r1, #0
 8004528:	4805      	ldr	r0, [pc, #20]	; (8004540 <lc_print+0x20>)
{
 800452a:	f853 2b04 	ldr.w	r2, [r3], #4
  va_start(ap, fmt);
 800452e:	9301      	str	r3, [sp, #4]
  vlc_print(&_put_c_driver, NULL, fmt, ap);
 8004530:	f000 fb16 	bl	8004b60 <vlc_print>
  va_end(ap);
}
 8004534:	b003      	add	sp, #12
 8004536:	f85d eb04 	ldr.w	lr, [sp], #4
 800453a:	b004      	add	sp, #16
 800453c:	4770      	bx	lr
 800453e:	bf00      	nop
 8004540:	08004495 	.word	0x08004495

08004544 <__wrap_malloc>:

void* __real_malloc(size_t bytes);
void __real_free(void *ptr);

void* __wrap_malloc(size_t bytes)
{
 8004544:	b538      	push	{r3, r4, r5, lr}
  uint8_t *ptr;

  io_malloc.cfg |= 1 << 1;
 8004546:	4d11      	ldr	r5, [pc, #68]	; (800458c <__wrap_malloc+0x48>)

  /* ensure alignment for magic number */
  bytes = (bytes + 3) & ~3;
 8004548:	3003      	adds	r0, #3
  io_malloc.cfg |= 1 << 1;
 800454a:	682b      	ldr	r3, [r5, #0]
  bytes = (bytes + 3) & ~3;
 800454c:	f020 0403 	bic.w	r4, r0, #3
  io_malloc.cfg |= 1 << 1;
 8004550:	f043 0302 	orr.w	r3, r3, #2

  /* add 2x32-bit for size and magic  number */
  ptr = (uint8_t*)__real_malloc(bytes + 8);
 8004554:	f104 0008 	add.w	r0, r4, #8
  io_malloc.cfg |= 1 << 1;
 8004558:	602b      	str	r3, [r5, #0]
  ptr = (uint8_t*)__real_malloc(bytes + 8);
 800455a:	f005 f8e7 	bl	800972c <malloc>

  /* remember size */
  if (ptr) {
 800455e:	b1a0      	cbz	r0, 800458a <__wrap_malloc+0x46>
    *((uint32_t*)ptr) = bytes;
    *((uint32_t*)(ptr + 4 + bytes)) = MAGIC_MALLOC_NUMBER;
 8004560:	1903      	adds	r3, r0, r4
 8004562:	4a0b      	ldr	r2, [pc, #44]	; (8004590 <__wrap_malloc+0x4c>)
    *((uint32_t*)ptr) = bytes;
 8004564:	6004      	str	r4, [r0, #0]
    *((uint32_t*)(ptr + 4 + bytes)) = MAGIC_MALLOC_NUMBER;
 8004566:	605a      	str	r2, [r3, #4]
  }

  if ((ptr) && (io_malloc.cfg & 1UL)) {
 8004568:	682b      	ldr	r3, [r5, #0]
 800456a:	07db      	lsls	r3, r3, #31
 800456c:	d50c      	bpl.n	8004588 <__wrap_malloc+0x44>
    io_malloc.alloc_req++;
 800456e:	68eb      	ldr	r3, [r5, #12]
 8004570:	3301      	adds	r3, #1
 8004572:	60eb      	str	r3, [r5, #12]
    io_malloc.alloc += bytes;
 8004574:	686b      	ldr	r3, [r5, #4]
 8004576:	4423      	add	r3, r4
 8004578:	606b      	str	r3, [r5, #4]

    io_malloc.used += bytes;
 800457a:	69ab      	ldr	r3, [r5, #24]
 800457c:	441c      	add	r4, r3

    if (io_malloc.used > io_malloc.max) {
 800457e:	696b      	ldr	r3, [r5, #20]
 8004580:	429c      	cmp	r4, r3
    io_malloc.used += bytes;
 8004582:	61ac      	str	r4, [r5, #24]
      io_malloc.max = io_malloc.used;
 8004584:	bf88      	it	hi
 8004586:	616c      	strhi	r4, [r5, #20]

    if (io_malloc.a_idx >= _IO_MALLOC_TRACK_MODE)
      io_malloc.a_idx = 0;
#endif
  }
  return ptr?(ptr + 4):NULL;
 8004588:	3004      	adds	r0, #4
}
 800458a:	bd38      	pop	{r3, r4, r5, pc}
 800458c:	2000156c 	.word	0x2000156c
 8004590:	efdcba98 	.word	0xefdcba98

08004594 <__wrap_free>:
void __wrap_free(void *ptr)
{
  uint8_t* p;
  uint32_t bytes;

  io_malloc.cfg |= 1 << 2;
 8004594:	4b10      	ldr	r3, [pc, #64]	; (80045d8 <__wrap_free+0x44>)
 8004596:	681a      	ldr	r2, [r3, #0]
 8004598:	f042 0204 	orr.w	r2, r2, #4
{
 800459c:	b430      	push	{r4, r5}
  io_malloc.cfg |= 1 << 2;
 800459e:	601a      	str	r2, [r3, #0]

  if (!ptr)
 80045a0:	4602      	mov	r2, r0
 80045a2:	b1b8      	cbz	r0, 80045d4 <__wrap_free+0x40>
    return;

  p = (uint8_t*)ptr - 4;
  bytes = *((uint32_t*)p);
 80045a4:	f852 1c04 	ldr.w	r1, [r2, #-4]
  p = (uint8_t*)ptr - 4;
 80045a8:	3804      	subs	r0, #4

  if (*((uint32_t*)(p + 4 + bytes)) == MAGIC_MALLOC_NUMBER) {
 80045aa:	4c0c      	ldr	r4, [pc, #48]	; (80045dc <__wrap_free+0x48>)
 80045ac:	5855      	ldr	r5, [r2, r1]
 80045ae:	42a5      	cmp	r5, r4
    *((uint32_t*)(p + 4 + bytes)) = 0;
 80045b0:	bf04      	itt	eq
 80045b2:	2400      	moveq	r4, #0
 80045b4:	5054      	streq	r4, [r2, r1]
  }

  if (io_malloc.cfg & 1UL) {
 80045b6:	681a      	ldr	r2, [r3, #0]
 80045b8:	07d2      	lsls	r2, r2, #31
 80045ba:	d508      	bpl.n	80045ce <__wrap_free+0x3a>
    io_malloc.free_req++;
 80045bc:	691a      	ldr	r2, [r3, #16]
 80045be:	3201      	adds	r2, #1
 80045c0:	611a      	str	r2, [r3, #16]
    io_malloc.free += bytes;
 80045c2:	689a      	ldr	r2, [r3, #8]
 80045c4:	440a      	add	r2, r1
 80045c6:	609a      	str	r2, [r3, #8]
    io_malloc.used -= bytes;
 80045c8:	699a      	ldr	r2, [r3, #24]
 80045ca:	1a52      	subs	r2, r2, r1
 80045cc:	619a      	str	r2, [r3, #24]
    if (io_malloc.f_idx >= _IO_MALLOC_TRACK_MODE)
      io_malloc.f_idx = 0;
#endif
  }
  __real_free(p);
}
 80045ce:	bc30      	pop	{r4, r5}
  __real_free(p);
 80045d0:	f005 b8b4 	b.w	800973c <free>
}
 80045d4:	bc30      	pop	{r4, r5}
 80045d6:	4770      	bx	lr
 80045d8:	2000156c 	.word	0x2000156c
 80045dc:	efdcba98 	.word	0xefdcba98

080045e0 <stackMonInit>:
#endif

struct io_stack io_stack;

void stackMonInit(uint32_t ctrl, uint32_t cstack, uint32_t msize)
{
 80045e0:	b538      	push	{r3, r4, r5, lr}
  memset(&io_stack, 0, sizeof(struct io_stack));
 80045e2:	4c12      	ldr	r4, [pc, #72]	; (800462c <stackMonInit+0x4c>)
 80045e4:	2500      	movs	r5, #0
  /* Reading ARM Core registers */
  io_stack.ctrl = ctrl;
  io_stack.cstack = cstack;

#if defined(_IS_GCC_COMPILER) && _IS_GCC_COMPILER
  io_stack.estack = (uint32_t)_estack;
 80045e6:	4b12      	ldr	r3, [pc, #72]	; (8004630 <stackMonInit+0x50>)
  memset(&io_stack, 0, sizeof(struct io_stack));
 80045e8:	60e5      	str	r5, [r4, #12]
  io_stack.estack = (uint32_t)_estack;
 80045ea:	6123      	str	r3, [r4, #16]
  io_stack.bstack = io_stack.estack - msize;
 80045ec:	1a9b      	subs	r3, r3, r2
  io_stack.ctrl = ctrl;
 80045ee:	6020      	str	r0, [r4, #0]
  io_stack.bstack = io_stack.estack - msize;
 80045f0:	61e3      	str	r3, [r4, #28]
  io_stack.bstack = (uint32_t)&CSTACK$$Base;
  io_stack.mstack_size = (uint32_t)&CSTACK$$Limit - (uint32_t)&CSTACK$$Base;
#endif

  /* Check that MSP is the active stack */
  if (io_stack.ctrl & CONTROL_SPSEL_Msk) {
 80045f2:	0783      	lsls	r3, r0, #30
  io_stack.cstack = cstack;
 80045f4:	61a1      	str	r1, [r4, #24]
  io_stack.mstack_size = msize;
 80045f6:	6162      	str	r2, [r4, #20]
  memset(&io_stack, 0, sizeof(struct io_stack));
 80045f8:	e9c4 5501 	strd	r5, r5, [r4, #4]
  if (io_stack.ctrl & CONTROL_SPSEL_Msk) {
 80045fc:	d512      	bpl.n	8004624 <stackMonInit+0x44>
    LC_PRINT("E: MSP is not the active stack (stack monitoring is disabled)\r\n");
 80045fe:	480d      	ldr	r0, [pc, #52]	; (8004634 <stackMonInit+0x54>)
 8004600:	f7ff ff8e 	bl	8004520 <lc_print>
    io_stack.stack_mon = false;
 8004604:	7125      	strb	r5, [r4, #4]
  } else
    io_stack.stack_mon = true;

  /* Calculating used stack before test */
  io_stack.ustack_size = io_stack.estack - io_stack.cstack;
 8004606:	69a3      	ldr	r3, [r4, #24]
 8004608:	6921      	ldr	r1, [r4, #16]
 800460a:	1ac9      	subs	r1, r1, r3

  if ((io_stack.stack_mon) && (io_stack.ustack_size > io_stack.mstack_size)) {
 800460c:	7923      	ldrb	r3, [r4, #4]
  io_stack.ustack_size = io_stack.estack - io_stack.cstack;
 800460e:	60e1      	str	r1, [r4, #12]
  if ((io_stack.stack_mon) && (io_stack.ustack_size > io_stack.mstack_size)) {
 8004610:	b13b      	cbz	r3, 8004622 <stackMonInit+0x42>
 8004612:	6962      	ldr	r2, [r4, #20]
 8004614:	4291      	cmp	r1, r2
 8004616:	d904      	bls.n	8004622 <stackMonInit+0x42>
    LC_PRINT("E: !stack overflow detected %d > %d\r\n", (int)io_stack.ustack_size,
 8004618:	4807      	ldr	r0, [pc, #28]	; (8004638 <stackMonInit+0x58>)
 800461a:	f7ff ff81 	bl	8004520 <lc_print>
        (int)io_stack.mstack_size);
    io_stack.stack_mon = false;
 800461e:	2300      	movs	r3, #0
 8004620:	7123      	strb	r3, [r4, #4]
  }
}
 8004622:	bd38      	pop	{r3, r4, r5, pc}
    io_stack.stack_mon = true;
 8004624:	2301      	movs	r3, #1
 8004626:	7123      	strb	r3, [r4, #4]
 8004628:	e7ed      	b.n	8004606 <stackMonInit+0x26>
 800462a:	bf00      	nop
 800462c:	20001588 	.word	0x20001588
 8004630:	20050000 	.word	0x20050000
 8004634:	0800d0fc 	.word	0x0800d0fc
 8004638:	0800d13c 	.word	0x0800d13c

0800463c <dwtCyclesToTime>:
 */

struct cyclesCount cyclesCount;

int dwtCyclesToTime(uint64_t clks, struct dwtTime *t)
{
 800463c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004640:	4604      	mov	r4, r0
 8004642:	468a      	mov	sl, r1
  if (!t)
 8004644:	4617      	mov	r7, r2
 8004646:	b382      	cbz	r2, 80046aa <dwtCyclesToTime+0x6e>
    return -1;
  uint32_t fcpu = port_hal_get_cpu_freq();
  uint64_t s  = clks / fcpu;
  uint64_t ms = (clks * 1000) / fcpu;
 8004648:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
  uint32_t fcpu = port_hal_get_cpu_freq();
 800464c:	f7fe f904 	bl	8002858 <HAL_RCC_GetHCLKFreq>
  uint64_t s  = clks / fcpu;
 8004650:	2300      	movs	r3, #0
  uint32_t fcpu = port_hal_get_cpu_freq();
 8004652:	4602      	mov	r2, r0
  uint64_t s  = clks / fcpu;
 8004654:	9001      	str	r0, [sp, #4]
 8004656:	4651      	mov	r1, sl
 8004658:	4620      	mov	r0, r4
  uint64_t us = (clks * 1000 * 1000) / fcpu;
 800465a:	f8df 9054 	ldr.w	r9, [pc, #84]	; 80046b0 <dwtCyclesToTime+0x74>
  uint64_t s  = clks / fcpu;
 800465e:	f7fc fac3 	bl	8000be8 <__aeabi_uldivmod>
 8004662:	4683      	mov	fp, r0
  uint64_t ms = (clks * 1000) / fcpu;
 8004664:	fba4 0106 	umull	r0, r1, r4, r6
 8004668:	9a01      	ldr	r2, [sp, #4]
 800466a:	2300      	movs	r3, #0
 800466c:	fb06 110a 	mla	r1, r6, sl, r1
 8004670:	f7fc faba 	bl	8000be8 <__aeabi_uldivmod>
  ms -= (s * 1000);
 8004674:	fbab 3106 	umull	r3, r1, fp, r6
  uint64_t us = (clks * 1000 * 1000) / fcpu;
 8004678:	9a01      	ldr	r2, [sp, #4]
  ms -= (s * 1000);
 800467a:	1ac5      	subs	r5, r0, r3
  uint64_t us = (clks * 1000 * 1000) / fcpu;
 800467c:	fba4 0109 	umull	r0, r1, r4, r9
 8004680:	2300      	movs	r3, #0
 8004682:	fb09 110a 	mla	r1, r9, sl, r1
  us -= (ms * 1000 + s * 1000000);
 8004686:	fbab 8909 	umull	r8, r9, fp, r9
  uint64_t us = (clks * 1000 * 1000) / fcpu;
 800468a:	f7fc faad 	bl	8000be8 <__aeabi_uldivmod>
  t->fcpu = fcpu;
  t->s = s;
  t->ms = ms;
 800468e:	60bd      	str	r5, [r7, #8]
 8004690:	eba0 0008 	sub.w	r0, r0, r8
  us -= (ms * 1000 + s * 1000000);
 8004694:	fba5 5606 	umull	r5, r6, r5, r6
  t->fcpu = fcpu;
 8004698:	9a01      	ldr	r2, [sp, #4]
  us -= (ms * 1000 + s * 1000000);
 800469a:	1b40      	subs	r0, r0, r5
  t->us = us;
 800469c:	60f8      	str	r0, [r7, #12]
  return 0;
 800469e:	2000      	movs	r0, #0
  t->s = s;
 80046a0:	e9c7 2b00 	strd	r2, fp, [r7]
}
 80046a4:	b003      	add	sp, #12
 80046a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return -1;
 80046aa:	f04f 30ff 	mov.w	r0, #4294967295
 80046ae:	e7f9      	b.n	80046a4 <dwtCyclesToTime+0x68>
 80046b0:	000f4240 	.word	0x000f4240

080046b4 <getFlashCacheConf>:

#if defined(STM32F7)

  mconf |= MCONF_F7;

  __I uint32_t acr = FLASH->ACR;
 80046b4:	4b11      	ldr	r3, [pc, #68]	; (80046fc <getFlashCacheConf+0x48>)
{
 80046b6:	b082      	sub	sp, #8
  __I uint32_t acr = FLASH->ACR;
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	9300      	str	r3, [sp, #0]
  __I uint32_t ccr = SCB->CCR;
 80046bc:	4b10      	ldr	r3, [pc, #64]	; (8004700 <getFlashCacheConf+0x4c>)
 80046be:	695b      	ldr	r3, [r3, #20]
 80046c0:	9301      	str	r3, [sp, #4]

  mconf |= ((acr & FLASH_ACR_LATENCY_Msk) >> FLASH_ACR_LATENCY_Pos);
 80046c2:	9800      	ldr	r0, [sp, #0]
  if ((acr & FLASH_ACR_PRFTEN_Msk) >> FLASH_ACR_PRFTEN_Pos)
 80046c4:	9b00      	ldr	r3, [sp, #0]
  mconf |= ((acr & FLASH_ACR_LATENCY_Msk) >> FLASH_ACR_LATENCY_Pos);
 80046c6:	f000 000f 	and.w	r0, r0, #15
  if ((acr & FLASH_ACR_PRFTEN_Msk) >> FLASH_ACR_PRFTEN_Pos)
 80046ca:	05db      	lsls	r3, r3, #23
    mconf |= MCONF_ART_PREF;
  if ((acr & FLASH_ACR_ARTEN_Msk) >> FLASH_ACR_ARTEN_Pos)
 80046cc:	9b00      	ldr	r3, [sp, #0]
    mconf |= MCONF_ART_PREF;
 80046ce:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
 80046d2:	bf48      	it	mi
 80046d4:	f440 7080 	orrmi.w	r0, r0, #256	; 0x100
  if ((acr & FLASH_ACR_ARTEN_Msk) >> FLASH_ACR_ARTEN_Pos)
 80046d8:	0599      	lsls	r1, r3, #22
    mconf |= MCONF_ART_EN;

  if (ccr & SCB_CCR_IC_Msk)
 80046da:	9b01      	ldr	r3, [sp, #4]
    mconf |= MCONF_ART_EN;
 80046dc:	bf48      	it	mi
 80046de:	f440 7000 	orrmi.w	r0, r0, #512	; 0x200
  if (ccr & SCB_CCR_IC_Msk)
 80046e2:	039a      	lsls	r2, r3, #14
    mconf |= MCONF_CORE_ICACHE;
  if (ccr & SCB_CCR_DC_Msk)
 80046e4:	9b01      	ldr	r3, [sp, #4]
    mconf |= MCONF_CORE_ICACHE;
 80046e6:	bf48      	it	mi
 80046e8:	f440 6080 	orrmi.w	r0, r0, #1024	; 0x400
  if (ccr & SCB_CCR_DC_Msk)
 80046ec:	03db      	lsls	r3, r3, #15
    mconf |= MCONF_CORE_DCACHE;
 80046ee:	bf48      	it	mi
 80046f0:	f440 6000 	orrmi.w	r0, r0, #2048	; 0x800
    mconf |= MCONF_CORE_DCACHE;

#endif

  return mconf;
}
 80046f4:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 80046f8:	b002      	add	sp, #8
 80046fa:	4770      	bx	lr
 80046fc:	40023c00 	.word	0x40023c00
 8004700:	e000ed00 	.word	0xe000ed00

08004704 <getSysConf.part.0>:
void getSysConf(struct mcu_conf *conf)
 8004704:	b510      	push	{r4, lr}
 8004706:	4604      	mov	r4, r0
  conf->sclk = port_hal_get_cpu_freq();
 8004708:	f7fe f8a6 	bl	8002858 <HAL_RCC_GetHCLKFreq>
 800470c:	6020      	str	r0, [r4, #0]
  conf->hclk = port_hal_get_sys_freq();
 800470e:	f7fe f8a3 	bl	8002858 <HAL_RCC_GetHCLKFreq>
 8004712:	6060      	str	r0, [r4, #4]
  conf->conf = getFlashCacheConf();
 8004714:	f7ff ffce 	bl	80046b4 <getFlashCacheConf>
 8004718:	60a0      	str	r0, [r4, #8]
  conf->devid = port_hal_get_dev_id();
 800471a:	f7fd fb19 	bl	8001d50 <HAL_GetDEVID>
 800471e:	60e0      	str	r0, [r4, #12]
  conf->revid = port_hal_get_rev_id();
 8004720:	f7fd fb10 	bl	8001d44 <HAL_GetREVID>
 8004724:	6120      	str	r0, [r4, #16]
}
 8004726:	bd10      	pop	{r4, pc}

08004728 <systemSettingLog>:

void systemSettingLog(void)
{
 8004728:	b570      	push	{r4, r5, r6, lr}
 800472a:	b088      	sub	sp, #32
  LC_PRINT("Compiled with GHS-ARM Compiler %d\r\n", __GHS_VERSION_NUMBER);
#elif defined(_IS_HTC_COMPILER) && _IS_HTC_COMPILER
  LC_PRINT("Compiled with HIGHTEC Clang %d.%d.%d\r\n", __clang_major__, __clang_minor__,
      __clang_patchlevel__);
#elif defined(_IS_GCC_COMPILER) && _IS_GCC_COMPILER
  LC_PRINT("Compiled with GCC %d.%d.%d\r\n", __GNUC__, __GNUC_MINOR__,
 800472c:	2203      	movs	r2, #3
 800472e:	2301      	movs	r3, #1
 8004730:	210a      	movs	r1, #10
 8004732:	482c      	ldr	r0, [pc, #176]	; (80047e4 <systemSettingLog+0xbc>)
 8004734:	f7ff fef4 	bl	8004520 <lc_print>
  if (!conf)
 8004738:	a803      	add	r0, sp, #12
 800473a:	f7ff ffe3 	bl	8004704 <getSysConf.part.0>


  /* Display Device configuration */
  getSysConf(&sys_conf);

  LC_PRINT(DEVICE_FAMILY " device configuration...\r\n");
 800473e:	482a      	ldr	r0, [pc, #168]	; (80047e8 <systemSettingLog+0xc0>)
 8004740:	f7ff feee 	bl	8004520 <lc_print>

  LC_PRINT(" Device       : DevID:0x%04x (%s) RevID:0x%04x\r\n",
 8004744:	9906      	ldr	r1, [sp, #24]
  switch (dev_id) {
 8004746:	f46f 6389 	mvn.w	r3, #1096	; 0x448
  LC_PRINT(" Device       : DevID:0x%04x (%s) RevID:0x%04x\r\n",
 800474a:	4828      	ldr	r0, [pc, #160]	; (80047ec <systemSettingLog+0xc4>)
#else
  LC_PRINT(" Core Arch.   : M%d - %s\r\n", __CORTEX_M, "no FPU");
#endif

  LC_PRINT(" HAL version  : 0x%08x\r\n", (int)port_hal_get_hal_version());
  LC_PRINT(" SYSCLK clock : %u MHz\r\n", (int)sys_conf.sclk/1000000);
 800474c:	4c28      	ldr	r4, [pc, #160]	; (80047f0 <systemSettingLog+0xc8>)
 800474e:	18cb      	adds	r3, r1, r3
 8004750:	b29b      	uxth	r3, r3
 8004752:	2b09      	cmp	r3, #9
 8004754:	bf96      	itet	ls
 8004756:	4a27      	ldrls	r2, [pc, #156]	; (80047f4 <systemSettingLog+0xcc>)
  LC_PRINT(" Device       : DevID:0x%04x (%s) RevID:0x%04x\r\n",
 8004758:	4a27      	ldrhi	r2, [pc, #156]	; (80047f8 <systemSettingLog+0xd0>)
 800475a:	f852 2023 	ldrls.w	r2, [r2, r3, lsl #2]
 800475e:	9b07      	ldr	r3, [sp, #28]
 8004760:	f7ff fede 	bl	8004520 <lc_print>
  LC_PRINT(" Core Arch.   : M%d - %s %s\r\n", __CORTEX_M, "FPU ", ((__FPU_USED) ? "used" : "not used!"));
 8004764:	4b25      	ldr	r3, [pc, #148]	; (80047fc <systemSettingLog+0xd4>)
 8004766:	2107      	movs	r1, #7
 8004768:	1d5a      	adds	r2, r3, #5
 800476a:	f103 000a 	add.w	r0, r3, #10
 800476e:	f7ff fed7 	bl	8004520 <lc_print>
  LC_PRINT(" HAL version  : 0x%08x\r\n", (int)port_hal_get_hal_version());
 8004772:	f7fd fae3 	bl	8001d3c <HAL_GetHalVersion>
 8004776:	4601      	mov	r1, r0
 8004778:	4821      	ldr	r0, [pc, #132]	; (8004800 <systemSettingLog+0xd8>)
 800477a:	f7ff fed1 	bl	8004520 <lc_print>
  LC_PRINT(" SYSCLK clock : %u MHz\r\n", (int)sys_conf.sclk/1000000);
 800477e:	9903      	ldr	r1, [sp, #12]
 8004780:	4820      	ldr	r0, [pc, #128]	; (8004804 <systemSettingLog+0xdc>)
 8004782:	fb91 f1f4 	sdiv	r1, r1, r4
 8004786:	f7ff fecb 	bl	8004520 <lc_print>
  LC_PRINT(" HCLK clock   : %u MHz\r\n", (int)sys_conf.hclk/1000000);
 800478a:	9904      	ldr	r1, [sp, #16]
 800478c:	481e      	ldr	r0, [pc, #120]	; (8004808 <systemSettingLog+0xe0>)
 800478e:	fb91 f1f4 	sdiv	r1, r1, r4
 8004792:	f7ff fec5 	bl	8004520 <lc_print>

#if defined(STM32F7)
  uint32_t acr = FLASH->ACR;
 8004796:	4b1d      	ldr	r3, [pc, #116]	; (800480c <systemSettingLog+0xe4>)
    return "False";
 8004798:	4c1d      	ldr	r4, [pc, #116]	; (8004810 <systemSettingLog+0xe8>)
  uint32_t acr = FLASH->ACR;
 800479a:	6819      	ldr	r1, [r3, #0]
    return "False";
 800479c:	1d65      	adds	r5, r4, #5
  uint32_t ccr = SCB->CCR;
 800479e:	4b1d      	ldr	r3, [pc, #116]	; (8004814 <systemSettingLog+0xec>)
    return "False";
 80047a0:	f411 7f80 	tst.w	r1, #256	; 0x100
  LC_PRINT(" FLASH conf.  : ACR=0x%08x - Prefetch=%s ART=%s latency=%d\r\n",
 80047a4:	f104 00ec 	add.w	r0, r4, #236	; 0xec
  uint32_t ccr = SCB->CCR;
 80047a8:	695e      	ldr	r6, [r3, #20]
  LC_PRINT(" FLASH conf.  : ACR=0x%08x - Prefetch=%s ART=%s latency=%d\r\n",
 80047aa:	f001 030f 	and.w	r3, r1, #15
    return "False";
 80047ae:	bf14      	ite	ne
 80047b0:	4622      	movne	r2, r4
 80047b2:	462a      	moveq	r2, r5
 80047b4:	f411 7f00 	tst.w	r1, #512	; 0x200
  LC_PRINT(" FLASH conf.  : ACR=0x%08x - Prefetch=%s ART=%s latency=%d\r\n",
 80047b8:	9300      	str	r3, [sp, #0]
 80047ba:	bf14      	ite	ne
 80047bc:	4623      	movne	r3, r4
 80047be:	462b      	moveq	r3, r5
 80047c0:	f7ff feae 	bl	8004520 <lc_print>
    return "False";
 80047c4:	f416 3f00 	tst.w	r6, #131072	; 0x20000
      (int)acr,
      bitToStr((acr & FLASH_ACR_PRFTEN_Msk) >> FLASH_ACR_PRFTEN_Pos),
      bitToStr((acr & FLASH_ACR_ARTEN_Msk) >> FLASH_ACR_ARTEN_Pos),
      (int)((acr & FLASH_ACR_LATENCY_Msk) >> FLASH_ACR_LATENCY_Pos));
  LC_PRINT(" CACHE conf.  : $I/$D=(%s,%s)\r\n",
 80047c8:	f204 1029 	addw	r0, r4, #297	; 0x129
    return "False";
 80047cc:	bf14      	ite	ne
 80047ce:	4621      	movne	r1, r4
 80047d0:	4629      	moveq	r1, r5
 80047d2:	f416 3f80 	tst.w	r6, #65536	; 0x10000
  LC_PRINT(" CACHE conf.  : $I/$D=(%s,%s)\r\n",
 80047d6:	bf14      	ite	ne
 80047d8:	4622      	movne	r2, r4
 80047da:	462a      	moveq	r2, r5
 80047dc:	f7ff fea0 	bl	8004520 <lc_print>
  LC_PRINT(" CACHE conf.  : $I/$D=(%s,%s)\r\n",
      bitToStr(ccr & SCB_CCR_IC_Msk),
      bitToStr(ccr & SCB_CCR_DC_Msk));
#endif

}
 80047e0:	b008      	add	sp, #32
 80047e2:	bd70      	pop	{r4, r5, r6, pc}
 80047e4:	0800d175 	.word	0x0800d175
 80047e8:	0800d192 	.word	0x0800d192
 80047ec:	0800d1b2 	.word	0x0800d1b2
 80047f0:	000f4240 	.word	0x000f4240
 80047f4:	0800d32c 	.word	0x0800d32c
 80047f8:	0800d162 	.word	0x0800d162
 80047fc:	0800d1e3 	.word	0x0800d1e3
 8004800:	0800d20b 	.word	0x0800d20b
 8004804:	0800d224 	.word	0x0800d224
 8004808:	0800d23d 	.word	0x0800d23d
 800480c:	40023c00 	.word	0x40023c00
 8004810:	0800d16a 	.word	0x0800d16a
 8004814:	e000ed00 	.word	0xe000ed00

08004818 <port_hal_crc_ip_init_imp>:
  __HAL_RCC_CRC_CLK_ENABLE();
#elif defined(STM32MP1)
  __HAL_RCC_CRC2_CLK_ENABLE();
#else
  /* By default the CRC IP clock is enabled */
  __HAL_RCC_CRC_CLK_ENABLE();
 8004818:	4b06      	ldr	r3, [pc, #24]	; (8004834 <port_hal_crc_ip_init_imp+0x1c>)
{
 800481a:	b082      	sub	sp, #8
  __HAL_RCC_CRC_CLK_ENABLE();
 800481c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800481e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004822:	631a      	str	r2, [r3, #48]	; 0x30
 8004824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004826:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800482a:	9301      	str	r3, [sp, #4]
 800482c:	9b01      	ldr	r3, [sp, #4]
#endif
}
 800482e:	b002      	add	sp, #8
 8004830:	4770      	bx	lr
 8004832:	bf00      	nop
 8004834:	40023800 	.word	0x40023800

08004838 <port_dwt_init_imp>:

#if defined(HAS_DWT_CTRL) && HAS_DWT_CTRL == 1

void port_dwt_init_imp()
{
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8004838:	4a08      	ldr	r2, [pc, #32]	; (800485c <port_dwt_init_imp+0x24>)
 800483a:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
 800483e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004842:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
#ifdef STM32F7
  DWT->LAR = 0xC5ACCE55;
 8004846:	4b06      	ldr	r3, [pc, #24]	; (8004860 <port_dwt_init_imp+0x28>)
 8004848:	4a06      	ldr	r2, [pc, #24]	; (8004864 <port_dwt_init_imp+0x2c>)
 800484a:	f8c3 2fb0 	str.w	r2, [r3, #4016]	; 0xfb0
#endif
  DWT->CYCCNT = 0;
 800484e:	2200      	movs	r2, #0
 8004850:	605a      	str	r2, [r3, #4]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8004852:	681a      	ldr	r2, [r3, #0]
 8004854:	f042 0201 	orr.w	r2, r2, #1
 8004858:	601a      	str	r2, [r3, #0]
}
 800485a:	4770      	bx	lr
 800485c:	e000ed00 	.word	0xe000ed00
 8004860:	e0001000 	.word	0xe0001000
 8004864:	c5acce55 	.word	0xc5acce55

08004868 <ai_mnetwork_handle>:

AI_DECLARE_STATIC
struct network_instance *ai_mnetwork_handle(struct network_instance *inst)
{
    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
        if ((inst) && (&gnetworks[i] == inst))
 8004868:	4b05      	ldr	r3, [pc, #20]	; (8004880 <ai_mnetwork_handle+0x18>)
 800486a:	b120      	cbz	r0, 8004876 <ai_mnetwork_handle+0xe>
            return inst;
        else if ((!inst) && (gnetworks[i].entry == NULL))
            return &gnetworks[i];
    }
    return NULL;
 800486c:	4298      	cmp	r0, r3
 800486e:	bf0c      	ite	eq
 8004870:	4618      	moveq	r0, r3
 8004872:	2000      	movne	r0, #0
 8004874:	4770      	bx	lr
        else if ((!inst) && (gnetworks[i].entry == NULL))
 8004876:	681a      	ldr	r2, [r3, #0]
            return inst;
 8004878:	2a00      	cmp	r2, #0
 800487a:	bf08      	it	eq
 800487c:	4618      	moveq	r0, r3
}
 800487e:	4770      	bx	lr
 8004880:	200015b0 	.word	0x200015b0

08004884 <ai_mnetwork_is_valid.constprop.0>:
ai_bool ai_mnetwork_is_valid(const char* name,
 8004884:	b510      	push	{r4, lr}
    if (name && (strlen(entry->name) == strlen(name)) &&
 8004886:	4604      	mov	r4, r0
 8004888:	b160      	cbz	r0, 80048a4 <ai_mnetwork_is_valid.constprop.0+0x20>
 800488a:	f7fb fcc1 	bl	8000210 <strlen>
 800488e:	2807      	cmp	r0, #7
 8004890:	4602      	mov	r2, r0
 8004892:	d107      	bne.n	80048a4 <ai_mnetwork_is_valid.constprop.0+0x20>
            (strncmp(entry->name, name, strlen(entry->name)) == 0))
 8004894:	4621      	mov	r1, r4
 8004896:	4804      	ldr	r0, [pc, #16]	; (80048a8 <ai_mnetwork_is_valid.constprop.0+0x24>)
 8004898:	f005 fd77 	bl	800a38a <strncmp>
    if (name && (strlen(entry->name) == strlen(name)) &&
 800489c:	fab0 f080 	clz	r0, r0
 80048a0:	0940      	lsrs	r0, r0, #5
}
 80048a2:	bd10      	pop	{r4, pc}
    return false;
 80048a4:	2000      	movs	r0, #0
 80048a6:	e7fc      	b.n	80048a2 <ai_mnetwork_is_valid.constprop.0+0x1e>
 80048a8:	0800d354 	.word	0x0800d354

080048ac <MX_X_CUBE_AI_Init>:
{
 80048ac:	b508      	push	{r3, lr}
    MX_UARTx_Init();
 80048ae:	f7fc ff83 	bl	80017b8 <MX_USART1_UART_Init>
    BSP_SDRAM_Init();
 80048b2:	f7fd f9b3 	bl	8001c1c <BSP_SDRAM_Init>
}
 80048b6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    aiSystemPerformanceInit();
 80048ba:	f7ff b86d 	b.w	8003998 <aiSystemPerformanceInit>

080048be <MX_X_CUBE_AI_Process>:
{
 80048be:	b508      	push	{r3, lr}
    aiSystemPerformanceProcess();
 80048c0:	f7ff f922 	bl	8003b08 <aiSystemPerformanceProcess>
    HAL_Delay(1000); /* delay 1s */
 80048c4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
}
 80048c8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_Delay(1000); /* delay 1s */
 80048cc:	f7fd ba24 	b.w	8001d18 <HAL_Delay>

080048d0 <ai_mnetwork_find>:
    }
}

AI_API_ENTRY
const char* ai_mnetwork_find(const char *name, ai_int idx)
{
 80048d0:	b510      	push	{r4, lr}
 80048d2:	460c      	mov	r4, r1
    const ai_network_entry_t *entry;

    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
        entry = &networks[i];
        if (ai_mnetwork_is_valid(name, entry))
 80048d4:	f7ff ffd6 	bl	8004884 <ai_mnetwork_is_valid.constprop.0>
 80048d8:	b920      	cbnz	r0, 80048e4 <ai_mnetwork_find+0x14>
        else {
            if (!idx--)
                return entry->name;
        }
    }
    return NULL;
 80048da:	2c00      	cmp	r4, #0
 80048dc:	4802      	ldr	r0, [pc, #8]	; (80048e8 <ai_mnetwork_find+0x18>)
 80048de:	bf18      	it	ne
 80048e0:	2000      	movne	r0, #0
}
 80048e2:	bd10      	pop	{r4, pc}
            return entry->name;
 80048e4:	4800      	ldr	r0, [pc, #0]	; (80048e8 <ai_mnetwork_find+0x18>)
 80048e6:	e7fc      	b.n	80048e2 <ai_mnetwork_find+0x12>
 80048e8:	0800d354 	.word	0x0800d354

080048ec <ai_mnetwork_create>:

AI_API_ENTRY
ai_error ai_mnetwork_create(const char *name, ai_handle* network,
        const ai_buffer* network_config)
{
 80048ec:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80048ee:	4606      	mov	r6, r0
    const ai_network_entry_t *entry;
    const ai_network_entry_t *found = NULL;
    ai_error err;
    struct network_instance *inst = ai_mnetwork_handle(NULL);
 80048f0:	2000      	movs	r0, #0
{
 80048f2:	460d      	mov	r5, r1
 80048f4:	4611      	mov	r1, r2
    struct network_instance *inst = ai_mnetwork_handle(NULL);
 80048f6:	f7ff ffb7 	bl	8004868 <ai_mnetwork_handle>

    if (!inst) {
 80048fa:	4604      	mov	r4, r0
 80048fc:	b930      	cbnz	r0, 800490c <ai_mnetwork_create+0x20>
        err.type = AI_ERROR_ALLOCATION_FAILED;
        err.code = AI_ERROR_CODE_NETWORK;
        return err;
 80048fe:	f241 0031 	movw	r0, #4145	; 0x1031
        inst->handle = *network;
        *network = (ai_handle*)inst;
    }

    return err;
}
 8004902:	b002      	add	sp, #8
 8004904:	bd70      	pop	{r4, r5, r6, pc}
        return err;
 8004906:	f241 0014 	movw	r0, #4116	; 0x1014
 800490a:	e7fa      	b.n	8004902 <ai_mnetwork_create+0x16>
        if (ai_mnetwork_is_valid(name, entry)) {
 800490c:	4630      	mov	r0, r6
 800490e:	9101      	str	r1, [sp, #4]
 8004910:	f7ff ffb8 	bl	8004884 <ai_mnetwork_is_valid.constprop.0>
 8004914:	9901      	ldr	r1, [sp, #4]
 8004916:	2800      	cmp	r0, #0
 8004918:	d0f5      	beq.n	8004906 <ai_mnetwork_create+0x1a>
        err = found->ai_create(network, network_config);
 800491a:	4628      	mov	r0, r5
 800491c:	f000 fb98 	bl	8005050 <ai_network_create>
 8004920:	f3c0 2317 	ubfx	r3, r0, #8, #24
 8004924:	b2c2      	uxtb	r2, r0
    if ((err.code == AI_ERROR_CODE_NONE) && (err.type == AI_ERROR_NONE)) {
 8004926:	ea52 2103 	orrs.w	r1, r2, r3, lsl #8
 800492a:	d104      	bne.n	8004936 <ai_mnetwork_create+0x4a>
        inst->entry = found;
 800492c:	4905      	ldr	r1, [pc, #20]	; (8004944 <ai_mnetwork_create+0x58>)
 800492e:	6021      	str	r1, [r4, #0]
        inst->handle = *network;
 8004930:	6829      	ldr	r1, [r5, #0]
 8004932:	6061      	str	r1, [r4, #4]
        *network = (ai_handle*)inst;
 8004934:	602c      	str	r4, [r5, #0]
    return err;
 8004936:	2000      	movs	r0, #0
 8004938:	f362 0007 	bfi	r0, r2, #0, #8
 800493c:	f363 201f 	bfi	r0, r3, #8, #24
 8004940:	e7df      	b.n	8004902 <ai_mnetwork_create+0x16>
 8004942:	bf00      	nop
 8004944:	0800d35c 	.word	0x0800d35c

08004948 <ai_mnetwork_destroy>:

AI_API_ENTRY
ai_handle ai_mnetwork_destroy(ai_handle network)
{
 8004948:	b538      	push	{r3, r4, r5, lr}
 800494a:	4604      	mov	r4, r0
    struct network_instance *inn;
    inn =  ai_mnetwork_handle((struct network_instance *)network);
 800494c:	f7ff ff8c 	bl	8004868 <ai_mnetwork_handle>
    if (inn) {
 8004950:	4605      	mov	r5, r0
 8004952:	b158      	cbz	r0, 800496c <ai_mnetwork_destroy+0x24>
        ai_handle hdl = inn->entry->ai_destroy(inn->handle);
 8004954:	6803      	ldr	r3, [r0, #0]
 8004956:	6840      	ldr	r0, [r0, #4]
 8004958:	699b      	ldr	r3, [r3, #24]
 800495a:	4798      	blx	r3
        if (hdl != inn->handle) {
 800495c:	686b      	ldr	r3, [r5, #4]
 800495e:	4283      	cmp	r3, r0
 8004960:	d004      	beq.n	800496c <ai_mnetwork_destroy+0x24>
        if ((inst) && (&gnetworks[i] == inst)) {
 8004962:	4b03      	ldr	r3, [pc, #12]	; (8004970 <ai_mnetwork_destroy+0x28>)
 8004964:	2400      	movs	r4, #0
 8004966:	429d      	cmp	r5, r3
 8004968:	d100      	bne.n	800496c <ai_mnetwork_destroy+0x24>
            gnetworks[i].entry = NULL;
 800496a:	602c      	str	r4, [r5, #0]
            ai_mnetwork_release_handle(inn);
            network = AI_HANDLE_NULL;
        }
    }
    return network;
}
 800496c:	4620      	mov	r0, r4
 800496e:	bd38      	pop	{r3, r4, r5, pc}
 8004970:	200015b0 	.word	0x200015b0

08004974 <ai_mnetwork_get_report>:

AI_API_ENTRY
ai_bool ai_mnetwork_get_report(ai_handle network, ai_network_report* report)
{
 8004974:	b510      	push	{r4, lr}
    struct network_instance *inn;
    inn =  ai_mnetwork_handle((struct network_instance *)network);
 8004976:	f7ff ff77 	bl	8004868 <ai_mnetwork_handle>
    if (inn)
 800497a:	b128      	cbz	r0, 8004988 <ai_mnetwork_get_report+0x14>
        return inn->entry->ai_get_report(inn->handle, report);
 800497c:	6802      	ldr	r2, [r0, #0]
 800497e:	6840      	ldr	r0, [r0, #4]
 8004980:	68d2      	ldr	r2, [r2, #12]
    else
        return false;
}
 8004982:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return inn->entry->ai_get_report(inn->handle, report);
 8004986:	4710      	bx	r2
}
 8004988:	bd10      	pop	{r4, pc}

0800498a <ai_mnetwork_get_error>:

AI_API_ENTRY
ai_error ai_mnetwork_get_error(ai_handle network)
{
 800498a:	b510      	push	{r4, lr}
    struct network_instance *inn;
    ai_error err;
    err.type = AI_ERROR_INVALID_PARAM;
    err.code = AI_ERROR_CODE_NETWORK;

    inn =  ai_mnetwork_handle((struct network_instance *)network);
 800498c:	f7ff ff6c 	bl	8004868 <ai_mnetwork_handle>
    if (inn)
 8004990:	b128      	cbz	r0, 800499e <ai_mnetwork_get_error+0x14>
        return inn->entry->ai_get_error(inn->handle);
 8004992:	6803      	ldr	r3, [r0, #0]
 8004994:	6840      	ldr	r0, [r0, #4]
 8004996:	695b      	ldr	r3, [r3, #20]
    else
        return err;
}
 8004998:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return inn->entry->ai_get_error(inn->handle);
 800499c:	4718      	bx	r3
}
 800499e:	f241 0014 	movw	r0, #4116	; 0x1014
 80049a2:	bd10      	pop	{r4, pc}

080049a4 <ai_mnetwork_init>:

AI_API_ENTRY
ai_bool ai_mnetwork_init(ai_handle network)
{
 80049a4:	b530      	push	{r4, r5, lr}
 80049a6:	b08f      	sub	sp, #60	; 0x3c
    struct network_instance *inn;
    ai_network_params par;

    inn =  ai_mnetwork_handle((struct network_instance *)network);
 80049a8:	f7ff ff5e 	bl	8004868 <ai_mnetwork_handle>
    if (inn) {
 80049ac:	4604      	mov	r4, r0
 80049ae:	b168      	cbz	r0, 80049cc <ai_mnetwork_init+0x28>
        inn->entry->ai_data_params_get(&par);
 80049b0:	6803      	ldr	r3, [r0, #0]
        for (int idx=0; idx < par.map_activations.size; idx++)
 80049b2:	2500      	movs	r5, #0
        inn->entry->ai_data_params_get(&par);
 80049b4:	4668      	mov	r0, sp
 80049b6:	689b      	ldr	r3, [r3, #8]
 80049b8:	4798      	blx	r3
        for (int idx=0; idx < par.map_activations.size; idx++)
 80049ba:	f8bd 200e 	ldrh.w	r2, [sp, #14]
          AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&par.map_activations, idx, inn->entry->activations[idx]);
 80049be:	6823      	ldr	r3, [r4, #0]
        for (int idx=0; idx < par.map_activations.size; idx++)
 80049c0:	42aa      	cmp	r2, r5
 80049c2:	dc05      	bgt.n	80049d0 <ai_mnetwork_init+0x2c>
        return inn->entry->ai_init(inn->handle, &par);
 80049c4:	69db      	ldr	r3, [r3, #28]
 80049c6:	4669      	mov	r1, sp
 80049c8:	6860      	ldr	r0, [r4, #4]
 80049ca:	4798      	blx	r3
    }
    else
        return false;
}
 80049cc:	b00f      	add	sp, #60	; 0x3c
 80049ce:	bd30      	pop	{r4, r5, pc}
          AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&par.map_activations, idx, inn->entry->activations[idx]);
 80049d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049d2:	4629      	mov	r1, r5
 80049d4:	a803      	add	r0, sp, #12
 80049d6:	f853 2025 	ldr.w	r2, [r3, r5, lsl #2]
        for (int idx=0; idx < par.map_activations.size; idx++)
 80049da:	3501      	adds	r5, #1
          AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&par.map_activations, idx, inn->entry->activations[idx]);
 80049dc:	f000 fca2 	bl	8005324 <ai_buffer_array_item_set_address>
        for (int idx=0; idx < par.map_activations.size; idx++)
 80049e0:	e7eb      	b.n	80049ba <ai_mnetwork_init+0x16>

080049e2 <ai_mnetwork_run>:

AI_API_ENTRY
ai_i32 ai_mnetwork_run(ai_handle network, const ai_buffer* input,
        ai_buffer* output)
{
 80049e2:	b513      	push	{r0, r1, r4, lr}
 80049e4:	9201      	str	r2, [sp, #4]
    struct network_instance* inn;
    inn =  ai_mnetwork_handle((struct network_instance *)network);
 80049e6:	f7ff ff3f 	bl	8004868 <ai_mnetwork_handle>
    if (inn)
 80049ea:	4603      	mov	r3, r0
 80049ec:	b140      	cbz	r0, 8004a00 <ai_mnetwork_run+0x1e>
        return inn->entry->ai_run(inn->handle, input, output);
 80049ee:	6800      	ldr	r0, [r0, #0]
 80049f0:	9a01      	ldr	r2, [sp, #4]
 80049f2:	6a04      	ldr	r4, [r0, #32]
 80049f4:	6858      	ldr	r0, [r3, #4]
 80049f6:	4623      	mov	r3, r4
    else
        return 0;
}
 80049f8:	b002      	add	sp, #8
 80049fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return inn->entry->ai_run(inn->handle, input, output);
 80049fe:	4718      	bx	r3
}
 8004a00:	b002      	add	sp, #8
 8004a02:	bd10      	pop	{r4, pc}

08004a04 <ai_mnetwork_get_private_handle>:

AI_API_ENTRY
 int ai_mnetwork_get_private_handle(ai_handle network,
         ai_handle *phandle,
         ai_network_params *pparams)
 {
 8004a04:	b538      	push	{r3, r4, r5, lr}
 8004a06:	4615      	mov	r5, r2
     struct network_instance* inn;
     inn =  ai_mnetwork_handle((struct network_instance *)network);
 8004a08:	f7ff ff2e 	bl	8004868 <ai_mnetwork_handle>
     if (inn && phandle && pparams) {
 8004a0c:	b188      	cbz	r0, 8004a32 <ai_mnetwork_get_private_handle+0x2e>
 8004a0e:	b181      	cbz	r1, 8004a32 <ai_mnetwork_get_private_handle+0x2e>
 8004a10:	b17d      	cbz	r5, 8004a32 <ai_mnetwork_get_private_handle+0x2e>
         *phandle = inn->handle;
 8004a12:	6843      	ldr	r3, [r0, #4]
         *pparams = inn->params;
 8004a14:	f100 0408 	add.w	r4, r0, #8
         *phandle = inn->handle;
 8004a18:	600b      	str	r3, [r1, #0]
         *pparams = inn->params;
 8004a1a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004a1c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004a1e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004a20:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004a22:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004a24:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004a26:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004a2a:	e885 0003 	stmia.w	r5, {r0, r1}
         return 0;
 8004a2e:	2000      	movs	r0, #0
     }
     else
         return -1;
 }
 8004a30:	bd38      	pop	{r3, r4, r5, pc}
         return -1;
 8004a32:	f04f 30ff 	mov.w	r0, #4294967295
 8004a36:	e7fb      	b.n	8004a30 <ai_mnetwork_get_private_handle+0x2c>

08004a38 <_write_number>:

  return count;
}

static int _write_number(uint64_t number, struct specifier *specifier)
{
 8004a38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  char sign_neg = 0;
  char chr;

  buf[idx--] = 0;

  if (specifier->flags & FLAG_IS_SIGNED) {
 8004a3c:	6896      	ldr	r6, [r2, #8]
{
 8004a3e:	b091      	sub	sp, #68	; 0x44
  buf[idx--] = 0;
 8004a40:	2500      	movs	r5, #0
{
 8004a42:	4614      	mov	r4, r2
  if (specifier->flags & FLAG_IS_SIGNED) {
 8004a44:	f016 0304 	ands.w	r3, r6, #4
  buf[idx--] = 0;
 8004a48:	f88d 503f 	strb.w	r5, [sp, #63]	; 0x3f
  if (specifier->flags & FLAG_IS_SIGNED) {
 8004a4c:	d02a      	beq.n	8004aa4 <_write_number+0x6c>
    if ((int64_t)number < 0) {
 8004a4e:	42a9      	cmp	r1, r5
 8004a50:	da08      	bge.n	8004a64 <_write_number+0x2c>
      number = -number;
      sign_neg = '-';
      specifier->width -= 1;
 8004a52:	6813      	ldr	r3, [r2, #0]
      number = -number;
 8004a54:	4240      	negs	r0, r0
      sign_neg = '-';
 8004a56:	f04f 052d 	mov.w	r5, #45	; 0x2d
      specifier->width -= 1;
 8004a5a:	f103 33ff 	add.w	r3, r3, #4294967295
      number = -number;
 8004a5e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
      specifier->width -= 1;
 8004a62:	6013      	str	r3, [r2, #0]
 8004a64:	f016 0f08 	tst.w	r6, #8
 8004a68:	f10d 093e 	add.w	r9, sp, #62	; 0x3e
  do {
    uint64_t t;
    if (specifier->flags & FLAG_HEX) {
      chr = number & 0x0F;
      t = number >> 4;
      chr = (chr >= 10) ? (chr + (specifier->flags & FLAG_CAPS ? 'A' : 'a') - 10) : (chr + '0');
 8004a6c:	f04f 073e 	mov.w	r7, #62	; 0x3e
    if (specifier->flags & FLAG_HEX) {
 8004a70:	f006 0a10 	and.w	sl, r6, #16
 8004a74:	bf14      	ite	ne
 8004a76:	f04f 0841 	movne.w	r8, #65	; 0x41
 8004a7a:	f04f 0861 	moveq.w	r8, #97	; 0x61
      chr = (chr >= 10) ? (chr + (specifier->flags & FLAG_CAPS ? 'A' : 'a') - 10) : (chr + '0');
 8004a7e:	f1a8 080a 	sub.w	r8, r8, #10
      chr = number & 0x0F;
 8004a82:	fa5f fb80 	uxtb.w	fp, r0
    if (specifier->flags & FLAG_HEX) {
 8004a86:	f1ba 0f00 	cmp.w	sl, #0
 8004a8a:	d032      	beq.n	8004af2 <_write_number+0xba>
      chr = number & 0x0F;
 8004a8c:	f00b 030f 	and.w	r3, fp, #15
      t = number >> 4;
 8004a90:	0900      	lsrs	r0, r0, #4
      chr = (chr >= 10) ? (chr + (specifier->flags & FLAG_CAPS ? 'A' : 'a') - 10) : (chr + '0');
 8004a92:	2b09      	cmp	r3, #9
      t = number >> 4;
 8004a94:	ea40 7001 	orr.w	r0, r0, r1, lsl #28
 8004a98:	ea4f 1111 	mov.w	r1, r1, lsr #4
      chr = (chr >= 10) ? (chr + (specifier->flags & FLAG_CAPS ? 'A' : 'a') - 10) : (chr + '0');
 8004a9c:	d906      	bls.n	8004aac <_write_number+0x74>
 8004a9e:	4443      	add	r3, r8
    } else {
      t = number / 10;
      chr = (number - t * 10) + '0';
 8004aa0:	b2db      	uxtb	r3, r3
 8004aa2:	e004      	b.n	8004aae <_write_number+0x76>
  char sign_neg = 0;
 8004aa4:	461d      	mov	r5, r3
 8004aa6:	e7dd      	b.n	8004a64 <_write_number+0x2c>
    }
    number = t;
    buf[idx--] = chr;
 8004aa8:	4617      	mov	r7, r2
 8004aaa:	e7ea      	b.n	8004a82 <_write_number+0x4a>
      chr = (chr >= 10) ? (chr + (specifier->flags & FLAG_CAPS ? 'A' : 'a') - 10) : (chr + '0');
 8004aac:	3330      	adds	r3, #48	; 0x30
    buf[idx--] = chr;
 8004aae:	f809 3901 	strb.w	r3, [r9], #-1
    count++;
  } while (number);
 8004ab2:	ea50 0301 	orrs.w	r3, r0, r1
    buf[idx--] = chr;
 8004ab6:	f107 32ff 	add.w	r2, r7, #4294967295
    count++;
 8004aba:	f1c7 0b3f 	rsb	fp, r7, #63	; 0x3f
  } while (number);
 8004abe:	d1f3      	bne.n	8004aa8 <_write_number+0x70>

  if ((sign_neg) && (!(specifier->flags & FLAG_ZERO_EXTEND))) {
 8004ac0:	f006 0101 	and.w	r1, r6, #1
 8004ac4:	b14d      	cbz	r5, 8004ada <_write_number+0xa2>
 8004ac6:	b941      	cbnz	r1, 8004ada <_write_number+0xa2>
    buf[idx--] = sign_neg;
 8004ac8:	f102 0340 	add.w	r3, r2, #64	; 0x40
    count++;
 8004acc:	f1c7 0b40 	rsb	fp, r7, #64	; 0x40
    buf[idx--] = sign_neg;
 8004ad0:	eb0d 0203 	add.w	r2, sp, r3
 8004ad4:	f802 5c40 	strb.w	r5, [r2, #-64]
 8004ad8:	1eba      	subs	r2, r7, #2
 8004ada:	2900      	cmp	r1, #0
  }

  while ((count < specifier->width) && (!(specifier->flags & FLAG_NEG_PAD))) {
 8004adc:	6823      	ldr	r3, [r4, #0]
 8004ade:	f006 0602 	and.w	r6, r6, #2
 8004ae2:	bf14      	ite	ne
 8004ae4:	2130      	movne	r1, #48	; 0x30
 8004ae6:	2120      	moveq	r1, #32
 8004ae8:	455b      	cmp	r3, fp
 8004aea:	dd13      	ble.n	8004b14 <_write_number+0xdc>
 8004aec:	b166      	cbz	r6, 8004b08 <_write_number+0xd0>
    else
      buf[idx--] = ' ';
    count++;
  }

  if ((sign_neg) && (count < (specifier->width + 1))) {
 8004aee:	b9a5      	cbnz	r5, 8004b1a <_write_number+0xe2>
 8004af0:	e01b      	b.n	8004b2a <_write_number+0xf2>
      t = number / 10;
 8004af2:	2300      	movs	r3, #0
 8004af4:	220a      	movs	r2, #10
      chr = (number - t * 10) + '0';
 8004af6:	f10b 0b30 	add.w	fp, fp, #48	; 0x30
      t = number / 10;
 8004afa:	f7fc f875 	bl	8000be8 <__aeabi_uldivmod>
      chr = (number - t * 10) + '0';
 8004afe:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 8004b02:	ebab 0343 	sub.w	r3, fp, r3, lsl #1
 8004b06:	e7cb      	b.n	8004aa0 <_write_number+0x68>
    if (specifier->flags & FLAG_ZERO_EXTEND)
 8004b08:	f80d 1002 	strb.w	r1, [sp, r2]
    count++;
 8004b0c:	f10b 0b01 	add.w	fp, fp, #1
 8004b10:	3a01      	subs	r2, #1
 8004b12:	e7e9      	b.n	8004ae8 <_write_number+0xb0>
  if ((sign_neg) && (count < (specifier->width + 1))) {
 8004b14:	b14d      	cbz	r5, 8004b2a <_write_number+0xf2>
 8004b16:	455b      	cmp	r3, fp
 8004b18:	d107      	bne.n	8004b2a <_write_number+0xf2>
    buf[idx--] = sign_neg;
 8004b1a:	f102 0340 	add.w	r3, r2, #64	; 0x40
    count++;
 8004b1e:	f10b 0b01 	add.w	fp, fp, #1
    buf[idx--] = sign_neg;
 8004b22:	3a01      	subs	r2, #1
 8004b24:	446b      	add	r3, sp
 8004b26:	f803 5c40 	strb.w	r5, [r3, #-64]
  }

  idx++;


  for(int i = 0; i < count; i++) {
 8004b2a:	eb0d 0602 	add.w	r6, sp, r2
 8004b2e:	2500      	movs	r5, #0
 8004b30:	3501      	adds	r5, #1
    specifier->putc_fct(specifier->user, (buf + idx)[i]);
 8004b32:	68e3      	ldr	r3, [r4, #12]
 8004b34:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004b38:	6920      	ldr	r0, [r4, #16]
 8004b3a:	4798      	blx	r3
  for(int i = 0; i < count; i++) {
 8004b3c:	45ab      	cmp	fp, r5
 8004b3e:	d1f7      	bne.n	8004b30 <_write_number+0xf8>
  }

  if (specifier->flags & FLAG_NEG_PAD) {
 8004b40:	68a3      	ldr	r3, [r4, #8]
 8004b42:	079b      	lsls	r3, r3, #30
 8004b44:	d408      	bmi.n	8004b58 <_write_number+0x120>
      _WRITE_C(' ');
    }
  }

  return count;
}
 8004b46:	4628      	mov	r0, r5
 8004b48:	b011      	add	sp, #68	; 0x44
 8004b4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      _WRITE_C(' ');
 8004b4e:	3501      	adds	r5, #1
 8004b50:	68e3      	ldr	r3, [r4, #12]
 8004b52:	2120      	movs	r1, #32
 8004b54:	6920      	ldr	r0, [r4, #16]
 8004b56:	4798      	blx	r3
    while (count < specifier->width) {
 8004b58:	6823      	ldr	r3, [r4, #0]
 8004b5a:	42ab      	cmp	r3, r5
 8004b5c:	dcf7      	bgt.n	8004b4e <_write_number+0x116>
 8004b5e:	e7f2      	b.n	8004b46 <_write_number+0x10e>

08004b60 <vlc_print>:
{
  return *(*fmtP)++;
}

int vlc_print(void (*putc_fct)(void*, const char), void *user, const char* fmt, va_list vl)
{
 8004b60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b64:	ed2d 8b02 	vpush	{d8}
  double mul = 1.0;
 8004b68:	ed9f 8b97 	vldr	d8, [pc, #604]	; 8004dc8 <vlc_print+0x268>
{
 8004b6c:	b09d      	sub	sp, #116	; 0x74
 8004b6e:	4682      	mov	sl, r0
 8004b70:	468b      	mov	fp, r1
 8004b72:	461c      	mov	r4, r3
  char c, t;
  int count = 0;
 8004b74:	2500      	movs	r5, #0
  return *(*fmtP)++;
 8004b76:	4613      	mov	r3, r2
 8004b78:	f813 1b01 	ldrb.w	r1, [r3], #1
 8004b7c:	9304      	str	r3, [sp, #16]
  bool error = false;

  while (((c = _getChar(&fmt)) != 0) && (!error))
 8004b7e:	b929      	cbnz	r1, 8004b8c <vlc_print+0x2c>
      putc_fct(user, c);
      count++;
    }
  }
  return count;
}
 8004b80:	4628      	mov	r0, r5
 8004b82:	b01d      	add	sp, #116	; 0x74
 8004b84:	ecbd 8b02 	vpop	{d8}
 8004b88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (c == '\n')
 8004b8c:	290a      	cmp	r1, #10
 8004b8e:	d103      	bne.n	8004b98 <vlc_print+0x38>
      putc_fct(user, c);
 8004b90:	4658      	mov	r0, fp
      count++;
 8004b92:	3501      	adds	r5, #1
      putc_fct(user, c);
 8004b94:	47d0      	blx	sl
      count++;
 8004b96:	e0c2      	b.n	8004d1e <vlc_print+0x1be>
    else if (c == '%')
 8004b98:	2925      	cmp	r1, #37	; 0x25
 8004b9a:	d1f9      	bne.n	8004b90 <vlc_print+0x30>
      struct specifier specifier = { 0, 0, 0, putc_fct, user };
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	f04f 090a 	mov.w	r9, #10
 8004ba2:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8004ba6:	461f      	mov	r7, r3
 8004ba8:	4698      	mov	r8, r3
 8004baa:	461a      	mov	r2, r3
 8004bac:	469e      	mov	lr, r3
 8004bae:	4618      	mov	r0, r3
      bool has_precision = false;
 8004bb0:	469c      	mov	ip, r3
      bool long_type = false;
 8004bb2:	9300      	str	r3, [sp, #0]
      struct specifier specifier = { 0, 0, 0, putc_fct, user };
 8004bb4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8004bb8:	e9cd 3a09 	strd	r3, sl, [sp, #36]	; 0x24
  return *(*fmtP)++;
 8004bbc:	9e04      	ldr	r6, [sp, #16]
 8004bbe:	f816 1b01 	ldrb.w	r1, [r6], #1
 8004bc2:	9604      	str	r6, [sp, #16]
        if (!c)
 8004bc4:	2900      	cmp	r1, #0
 8004bc6:	f000 81dc 	beq.w	8004f82 <vlc_print+0x422>
        else if (c == '0')
 8004bca:	2930      	cmp	r1, #48	; 0x30
 8004bcc:	d114      	bne.n	8004bf8 <vlc_print+0x98>
          if (!specifier.width && !specifier.precision) {
 8004bce:	ea50 0102 	orrs.w	r1, r0, r2
 8004bd2:	d105      	bne.n	8004be0 <vlc_print+0x80>
            specifier.flags |= FLAG_ZERO_EXTEND;
 8004bd4:	f047 0701 	orr.w	r7, r7, #1
 8004bd8:	460a      	mov	r2, r1
 8004bda:	4608      	mov	r0, r1
 8004bdc:	2301      	movs	r3, #1
 8004bde:	e7ed      	b.n	8004bbc <vlc_print+0x5c>
          } else if (has_precision) {
 8004be0:	f1bc 0f00 	cmp.w	ip, #0
 8004be4:	d003      	beq.n	8004bee <vlc_print+0x8e>
            specifier.precision = specifier.precision * 10 + (c - '0');
 8004be6:	fb09 f202 	mul.w	r2, r9, r2
 8004bea:	46e0      	mov	r8, ip
 8004bec:	e7e6      	b.n	8004bbc <vlc_print+0x5c>
            specifier.width = specifier.width * 10 + (c - '0');
 8004bee:	fb09 f000 	mul.w	r0, r9, r0
            specifier.width = specifier.width * 10 + (c - '0');
 8004bf2:	f04f 0e01 	mov.w	lr, #1
 8004bf6:	e7e1      	b.n	8004bbc <vlc_print+0x5c>
        else if (c == '-')
 8004bf8:	292d      	cmp	r1, #45	; 0x2d
 8004bfa:	d102      	bne.n	8004c02 <vlc_print+0xa2>
          specifier.flags |= FLAG_NEG_PAD;
 8004bfc:	f047 0702 	orr.w	r7, r7, #2
 8004c00:	e7ec      	b.n	8004bdc <vlc_print+0x7c>
        else if (c == '.')
 8004c02:	292e      	cmp	r1, #46	; 0x2e
 8004c04:	f000 81ca 	beq.w	8004f9c <vlc_print+0x43c>
        else if ((c >= '1') && (c <= '9'))
 8004c08:	f1a1 0631 	sub.w	r6, r1, #49	; 0x31
 8004c0c:	2e08      	cmp	r6, #8
 8004c0e:	d809      	bhi.n	8004c24 <vlc_print+0xc4>
            specifier.precision = specifier.precision * 10 + (c - '0');
 8004c10:	3930      	subs	r1, #48	; 0x30
          if (has_precision) {
 8004c12:	f1bc 0f00 	cmp.w	ip, #0
 8004c16:	d002      	beq.n	8004c1e <vlc_print+0xbe>
            specifier.precision = specifier.precision * 10 + (c - '0');
 8004c18:	fb09 1202 	mla	r2, r9, r2, r1
 8004c1c:	e7e5      	b.n	8004bea <vlc_print+0x8a>
            specifier.width = specifier.width * 10 + (c - '0');
 8004c1e:	fb09 1000 	mla	r0, r9, r0, r1
 8004c22:	e7e6      	b.n	8004bf2 <vlc_print+0x92>
        else if (c == 'l')
 8004c24:	296c      	cmp	r1, #108	; 0x6c
 8004c26:	f000 81bc 	beq.w	8004fa2 <vlc_print+0x442>
 8004c2a:	f1be 0f00 	cmp.w	lr, #0
 8004c2e:	d000      	beq.n	8004c32 <vlc_print+0xd2>
 8004c30:	9007      	str	r0, [sp, #28]
 8004c32:	f1b8 0f00 	cmp.w	r8, #0
 8004c36:	d000      	beq.n	8004c3a <vlc_print+0xda>
 8004c38:	9208      	str	r2, [sp, #32]
 8004c3a:	b103      	cbz	r3, 8004c3e <vlc_print+0xde>
 8004c3c:	9709      	str	r7, [sp, #36]	; 0x24
          switch(c)
 8004c3e:	2978      	cmp	r1, #120	; 0x78
 8004c40:	d809      	bhi.n	8004c56 <vlc_print+0xf6>
 8004c42:	2962      	cmp	r1, #98	; 0x62
 8004c44:	d813      	bhi.n	8004c6e <vlc_print+0x10e>
 8004c46:	2946      	cmp	r1, #70	; 0x46
 8004c48:	f000 80c4 	beq.w	8004dd4 <vlc_print+0x274>
 8004c4c:	2958      	cmp	r1, #88	; 0x58
 8004c4e:	f000 808a 	beq.w	8004d66 <vlc_print+0x206>
 8004c52:	2925      	cmp	r1, #37	; 0x25
 8004c54:	d09c      	beq.n	8004b90 <vlc_print+0x30>
        putc_fct(user, '<');
 8004c56:	213c      	movs	r1, #60	; 0x3c
 8004c58:	4658      	mov	r0, fp
 8004c5a:	47d0      	blx	sl
        putc_fct(user, '!');
 8004c5c:	2121      	movs	r1, #33	; 0x21
 8004c5e:	4658      	mov	r0, fp
        va_arg(vl, signed long);
 8004c60:	3404      	adds	r4, #4
        putc_fct(user, '!');
 8004c62:	47d0      	blx	sl
        putc_fct(user, '>');
 8004c64:	213e      	movs	r1, #62	; 0x3e
 8004c66:	4658      	mov	r0, fp
        count += 3;
 8004c68:	3503      	adds	r5, #3
        putc_fct(user, '>');
 8004c6a:	47d0      	blx	sl
        error = false;
 8004c6c:	e057      	b.n	8004d1e <vlc_print+0x1be>
          switch(c)
 8004c6e:	f1a1 0363 	sub.w	r3, r1, #99	; 0x63
 8004c72:	2b15      	cmp	r3, #21
 8004c74:	d8ef      	bhi.n	8004c56 <vlc_print+0xf6>
 8004c76:	a201      	add	r2, pc, #4	; (adr r2, 8004c7c <vlc_print+0x11c>)
 8004c78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c7c:	08004cd5 	.word	0x08004cd5
 8004c80:	08004d87 	.word	0x08004d87
 8004c84:	08004c57 	.word	0x08004c57
 8004c88:	08004dd5 	.word	0x08004dd5
 8004c8c:	08004c57 	.word	0x08004c57
 8004c90:	08004c57 	.word	0x08004c57
 8004c94:	08004d87 	.word	0x08004d87
 8004c98:	08004c57 	.word	0x08004c57
 8004c9c:	08004c57 	.word	0x08004c57
 8004ca0:	08004c57 	.word	0x08004c57
 8004ca4:	08004c57 	.word	0x08004c57
 8004ca8:	08004c57 	.word	0x08004c57
 8004cac:	08004c57 	.word	0x08004c57
 8004cb0:	08004d5b 	.word	0x08004d5b
 8004cb4:	08004c57 	.word	0x08004c57
 8004cb8:	08004c57 	.word	0x08004c57
 8004cbc:	08004cdd 	.word	0x08004cdd
 8004cc0:	08004c57 	.word	0x08004c57
 8004cc4:	08004d8f 	.word	0x08004d8f
 8004cc8:	08004c57 	.word	0x08004c57
 8004ccc:	08004c57 	.word	0x08004c57
 8004cd0:	08004d6f 	.word	0x08004d6f
            t = (char)va_arg(vl, signed int);
 8004cd4:	f854 1b04 	ldr.w	r1, [r4], #4
            putc_fct(user, t);
 8004cd8:	b2c9      	uxtb	r1, r1
 8004cda:	e759      	b.n	8004b90 <vlc_print+0x30>
            if (!str) str = "(null)";
 8004cdc:	4b3c      	ldr	r3, [pc, #240]	; (8004dd0 <vlc_print+0x270>)
            str = va_arg(vl, char*);
 8004cde:	f854 8b04 	ldr.w	r8, [r4], #4
            if (!str) str = "(null)";
 8004ce2:	f1b8 0f00 	cmp.w	r8, #0
 8004ce6:	bf08      	it	eq
 8004ce8:	4698      	moveq	r8, r3
  int len = strlen(str);
 8004cea:	4640      	mov	r0, r8
 8004cec:	f7fb fa90 	bl	8000210 <strlen>
  if (specifier->precision) {
 8004cf0:	9b08      	ldr	r3, [sp, #32]
  int len = strlen(str);
 8004cf2:	4607      	mov	r7, r0
  if (specifier->precision) {
 8004cf4:	b113      	cbz	r3, 8004cfc <vlc_print+0x19c>
    len = (len > specifier->precision)?specifier->precision:len;
 8004cf6:	4298      	cmp	r0, r3
 8004cf8:	bfa8      	it	ge
 8004cfa:	461f      	movge	r7, r3
  if (!(specifier->flags & FLAG_NEG_PAD)) {
 8004cfc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8004cfe:	f016 0602 	ands.w	r6, r6, #2
 8004d02:	d013      	beq.n	8004d2c <vlc_print+0x1cc>
  int count = 0;
 8004d04:	2600      	movs	r6, #0
 8004d06:	46c1      	mov	r9, r8
  for (int i = 0; i < len; i++) {
 8004d08:	eba9 0308 	sub.w	r3, r9, r8
 8004d0c:	429f      	cmp	r7, r3
 8004d0e:	dc12      	bgt.n	8004d36 <vlc_print+0x1d6>
  if (specifier->flags & FLAG_NEG_PAD) {
 8004d10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d12:	2f00      	cmp	r7, #0
 8004d14:	bfa8      	it	ge
 8004d16:	19f6      	addge	r6, r6, r7
 8004d18:	079b      	lsls	r3, r3, #30
 8004d1a:	d41c      	bmi.n	8004d56 <vlc_print+0x1f6>
            count += _write_string(str, &specifier);
 8004d1c:	4435      	add	r5, r6
  for(int i = 0; i < count; i++) {
 8004d1e:	9a04      	ldr	r2, [sp, #16]
 8004d20:	e729      	b.n	8004b76 <vlc_print+0x16>
      _WRITE_C(' ');
 8004d22:	3601      	adds	r6, #1
 8004d24:	2120      	movs	r1, #32
 8004d26:	e9dd 300a 	ldrd	r3, r0, [sp, #40]	; 0x28
 8004d2a:	4798      	blx	r3
    for(int i = len; i < specifier->width; i++) {
 8004d2c:	19f3      	adds	r3, r6, r7
 8004d2e:	9a07      	ldr	r2, [sp, #28]
 8004d30:	429a      	cmp	r2, r3
 8004d32:	dcf6      	bgt.n	8004d22 <vlc_print+0x1c2>
 8004d34:	e7e7      	b.n	8004d06 <vlc_print+0x1a6>
    _WRITE_C(*str++);
 8004d36:	f819 1b01 	ldrb.w	r1, [r9], #1
 8004d3a:	e9dd 300a 	ldrd	r3, r0, [sp, #40]	; 0x28
 8004d3e:	4798      	blx	r3
  for (int i = 0; i < len; i++) {
 8004d40:	e7e2      	b.n	8004d08 <vlc_print+0x1a8>
      _WRITE_C(' ');
 8004d42:	3601      	adds	r6, #1
 8004d44:	2120      	movs	r1, #32
 8004d46:	e9dd 300a 	ldrd	r3, r0, [sp, #40]	; 0x28
 8004d4a:	4798      	blx	r3
    for(int i = len; i < specifier->width; i++) {
 8004d4c:	19bb      	adds	r3, r7, r6
 8004d4e:	9a07      	ldr	r2, [sp, #28]
 8004d50:	429a      	cmp	r2, r3
 8004d52:	dcf6      	bgt.n	8004d42 <vlc_print+0x1e2>
 8004d54:	e7e2      	b.n	8004d1c <vlc_print+0x1bc>
 8004d56:	1bbf      	subs	r7, r7, r6
 8004d58:	e7f8      	b.n	8004d4c <vlc_print+0x1ec>
            specifier.flags |= FLAG_ZERO_EXTEND;
 8004d5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d5c:	f043 0301 	orr.w	r3, r3, #1
 8004d60:	9309      	str	r3, [sp, #36]	; 0x24
            specifier.width = 8;
 8004d62:	2308      	movs	r3, #8
 8004d64:	9307      	str	r3, [sp, #28]
            specifier.flags |= FLAG_CAPS;
 8004d66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d68:	f043 0308 	orr.w	r3, r3, #8
 8004d6c:	9309      	str	r3, [sp, #36]	; 0x24
            specifier.flags |= FLAG_HEX;
 8004d6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
            count += _write_number(val, &specifier);
 8004d70:	aa07      	add	r2, sp, #28
 8004d72:	f854 0b04 	ldr.w	r0, [r4], #4
 8004d76:	2100      	movs	r1, #0
            specifier.flags |= FLAG_HEX;
 8004d78:	f043 0310 	orr.w	r3, r3, #16
 8004d7c:	9309      	str	r3, [sp, #36]	; 0x24
            count += _write_number(val, &specifier);
 8004d7e:	f7ff fe5b 	bl	8004a38 <_write_number>
 8004d82:	4405      	add	r5, r0
            break;
 8004d84:	e7cb      	b.n	8004d1e <vlc_print+0x1be>
            specifier.flags |= FLAG_IS_SIGNED;
 8004d86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d88:	f043 0304 	orr.w	r3, r3, #4
 8004d8c:	9309      	str	r3, [sp, #36]	; 0x24
            if (c == 'u')
 8004d8e:	2975      	cmp	r1, #117	; 0x75
 8004d90:	d113      	bne.n	8004dba <vlc_print+0x25a>
              if (long_type)
 8004d92:	9b00      	ldr	r3, [sp, #0]
 8004d94:	b163      	cbz	r3, 8004db0 <vlc_print+0x250>
                val = va_arg(vl, uint64_t);
 8004d96:	3407      	adds	r4, #7
 8004d98:	f024 0407 	bic.w	r4, r4, #7
 8004d9c:	4627      	mov	r7, r4
 8004d9e:	6861      	ldr	r1, [r4, #4]
 8004da0:	f857 0b08 	ldr.w	r0, [r7], #8
            count += _write_number(val, &specifier);
 8004da4:	aa07      	add	r2, sp, #28
            break;
 8004da6:	463c      	mov	r4, r7
            count += _write_number(val, &specifier);
 8004da8:	f7ff fe46 	bl	8004a38 <_write_number>
 8004dac:	4405      	add	r5, r0
            break;
 8004dae:	e7b6      	b.n	8004d1e <vlc_print+0x1be>
                val = va_arg(vl, unsigned int);
 8004db0:	4627      	mov	r7, r4
 8004db2:	9900      	ldr	r1, [sp, #0]
 8004db4:	f857 0b04 	ldr.w	r0, [r7], #4
 8004db8:	e7f4      	b.n	8004da4 <vlc_print+0x244>
                val = va_arg(vl, signed long);
 8004dba:	6820      	ldr	r0, [r4, #0]
                val = va_arg(vl, unsigned int);
 8004dbc:	1d27      	adds	r7, r4, #4
                val = va_arg(vl, signed long);
 8004dbe:	17c1      	asrs	r1, r0, #31
 8004dc0:	e7f0      	b.n	8004da4 <vlc_print+0x244>
 8004dc2:	bf00      	nop
 8004dc4:	f3af 8000 	nop.w
 8004dc8:	00000000 	.word	0x00000000
 8004dcc:	3ff00000 	.word	0x3ff00000
 8004dd0:	0800d388 	.word	0x0800d388
            dbl = va_arg(vl, double);
 8004dd4:	3407      	adds	r4, #7
            if (specifier.precision == 0)
 8004dd6:	9b08      	ldr	r3, [sp, #32]
            dbl = va_arg(vl, double);
 8004dd8:	f024 0407 	bic.w	r4, r4, #7
 8004ddc:	ecb4 7b02 	vldmia	r4!, {d7}
 8004de0:	ed8d 7b00 	vstr	d7, [sp]
            if (specifier.precision == 0)
 8004de4:	b90b      	cbnz	r3, 8004dea <vlc_print+0x28a>
              specifier.precision = 6;
 8004de6:	2306      	movs	r3, #6
 8004de8:	9308      	str	r3, [sp, #32]
  for (int i=0;i <specifier->precision; i++)
 8004dea:	9e08      	ldr	r6, [sp, #32]
 8004dec:	2700      	movs	r7, #0
  double mul = 1.0;
 8004dee:	ec59 8b18 	vmov	r8, r9, d8
  for (int i=0;i <specifier->precision; i++)
 8004df2:	42b7      	cmp	r7, r6
    mul *= 10;
 8004df4:	f04f 0200 	mov.w	r2, #0
  for (int i=0;i <specifier->precision; i++)
 8004df8:	f2c0 80ae 	blt.w	8004f58 <vlc_print+0x3f8>
  if (is_signed)
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004e02:	f7fb fe8b 	bl	8000b1c <__aeabi_dcmplt>
 8004e06:	2800      	cmp	r0, #0
 8004e08:	f000 80af 	beq.w	8004f6a <vlc_print+0x40a>
    number = -number;
 8004e0c:	9b00      	ldr	r3, [sp, #0]
 8004e0e:	9302      	str	r3, [sp, #8]
 8004e10:	9b01      	ldr	r3, [sp, #4]
 8004e12:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004e16:	9303      	str	r3, [sp, #12]
  number += (half_ / mul);
 8004e18:	4642      	mov	r2, r8
 8004e1a:	464b      	mov	r3, r9
 8004e1c:	2000      	movs	r0, #0
 8004e1e:	4962      	ldr	r1, [pc, #392]	; (8004fa8 <vlc_print+0x448>)
 8004e20:	f7fb fd34 	bl	800088c <__aeabi_ddiv>
  uint32_t count = 0;
 8004e24:	2700      	movs	r7, #0
  number += (half_ / mul);
 8004e26:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004e2a:	f7fb fa4f 	bl	80002cc <__adddf3>
  val = (uint64_t)(number * mul);
 8004e2e:	4642      	mov	r2, r8
 8004e30:	464b      	mov	r3, r9
  uint32_t idx = sizeof(buf) - 1;
 8004e32:	f04f 083f 	mov.w	r8, #63	; 0x3f
  val = (uint64_t)(number * mul);
 8004e36:	f7fb fbff 	bl	8000638 <__aeabi_dmul>
 8004e3a:	f7fb ff21 	bl	8000c80 <__aeabi_d2ulz>
 8004e3e:	4602      	mov	r2, r0
    uint64_t t = val / 10;
 8004e40:	4691      	mov	r9, r2
 8004e42:	2300      	movs	r3, #0
 8004e44:	220a      	movs	r2, #10
 8004e46:	9105      	str	r1, [sp, #20]
 8004e48:	4648      	mov	r0, r9
 8004e4a:	f7fb fecd 	bl	8000be8 <__aeabi_uldivmod>
    chr = (val - t * 10) + '0';
 8004e4e:	f109 0330 	add.w	r3, r9, #48	; 0x30
    uint64_t t = val / 10;
 8004e52:	4602      	mov	r2, r0
    chr = (val - t * 10) + '0';
 8004e54:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    buf[idx--] = chr;
 8004e58:	f108 3cff 	add.w	ip, r8, #4294967295
    chr = (val - t * 10) + '0';
 8004e5c:	eba3 0040 	sub.w	r0, r3, r0, lsl #1
    buf[idx--] = chr;
 8004e60:	f108 0370 	add.w	r3, r8, #112	; 0x70
 8004e64:	446b      	add	r3, sp
 8004e66:	f803 0c40 	strb.w	r0, [r3, #-64]
    count++;
 8004e6a:	1c7b      	adds	r3, r7, #1
    if (count == specifier->precision) {
 8004e6c:	429e      	cmp	r6, r3
      buf[idx--] = '.';
 8004e6e:	bf09      	itett	eq
 8004e70:	f10c 0370 	addeq.w	r3, ip, #112	; 0x70
    count++;
 8004e74:	461f      	movne	r7, r3
      buf[idx--] = '.';
 8004e76:	f1a8 0802 	subeq.w	r8, r8, #2
      count++;
 8004e7a:	3702      	addeq	r7, #2
      buf[idx--] = '.';
 8004e7c:	bf05      	ittet	eq
 8004e7e:	eb0d 0c03 	addeq.w	ip, sp, r3
 8004e82:	232e      	moveq	r3, #46	; 0x2e
    buf[idx--] = chr;
 8004e84:	46e0      	movne	r8, ip
      buf[idx--] = '.';
 8004e86:	f80c 3c40 	strbeq.w	r3, [ip, #-64]
  } while (val);
 8004e8a:	f1b9 0f0a 	cmp.w	r9, #10
 8004e8e:	9b05      	ldr	r3, [sp, #20]
 8004e90:	f173 0300 	sbcs.w	r3, r3, #0
 8004e94:	d2d4      	bcs.n	8004e40 <vlc_print+0x2e0>
    buf[idx--] = '0';
 8004e96:	42b7      	cmp	r7, r6
 8004e98:	f1c6 0001 	rsb	r0, r6, #1
 8004e9c:	f04f 0130 	mov.w	r1, #48	; 0x30
 8004ea0:	eba6 0907 	sub.w	r9, r6, r7
 8004ea4:	4438      	add	r0, r7
 8004ea6:	bf84      	itt	hi
 8004ea8:	2001      	movhi	r0, #1
 8004eaa:	f04f 0900 	movhi.w	r9, #0
 8004eae:	eb0d 0301 	add.w	r3, sp, r1
 8004eb2:	4440      	add	r0, r8
 8004eb4:	464a      	mov	r2, r9
 8004eb6:	4418      	add	r0, r3
 8004eb8:	f004 fc56 	bl	8009768 <memset>
 8004ebc:	1bbb      	subs	r3, r7, r6
 8004ebe:	42b7      	cmp	r7, r6
 8004ec0:	bf88      	it	hi
 8004ec2:	2300      	movhi	r3, #0
 8004ec4:	444f      	add	r7, r9
  if (count == specifier->precision) {
 8004ec6:	42be      	cmp	r6, r7
 8004ec8:	4498      	add	r8, r3
 8004eca:	f106 0601 	add.w	r6, r6, #1
 8004ece:	d108      	bne.n	8004ee2 <vlc_print+0x382>
    buf[idx--] = '.';
 8004ed0:	f108 0370 	add.w	r3, r8, #112	; 0x70
 8004ed4:	222e      	movs	r2, #46	; 0x2e
    count++;
 8004ed6:	4637      	mov	r7, r6
    buf[idx--] = '.';
 8004ed8:	f108 38ff 	add.w	r8, r8, #4294967295
 8004edc:	446b      	add	r3, sp
 8004ede:	f803 2c40 	strb.w	r2, [r3, #-64]
  if (count == specifier->precision + 1)
 8004ee2:	42be      	cmp	r6, r7
 8004ee4:	d108      	bne.n	8004ef8 <vlc_print+0x398>
    buf[idx--] = '0';
 8004ee6:	f108 0370 	add.w	r3, r8, #112	; 0x70
 8004eea:	2230      	movs	r2, #48	; 0x30
    count++;
 8004eec:	3701      	adds	r7, #1
    buf[idx--] = '0';
 8004eee:	f108 38ff 	add.w	r8, r8, #4294967295
 8004ef2:	446b      	add	r3, sp
 8004ef4:	f803 2c40 	strb.w	r2, [r3, #-64]
  if (is_signed) {
 8004ef8:	2200      	movs	r2, #0
 8004efa:	2300      	movs	r3, #0
 8004efc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004f00:	f7fb fe0c 	bl	8000b1c <__aeabi_dcmplt>
 8004f04:	b140      	cbz	r0, 8004f18 <vlc_print+0x3b8>
    buf[idx--] = '-';
 8004f06:	f108 0370 	add.w	r3, r8, #112	; 0x70
 8004f0a:	222d      	movs	r2, #45	; 0x2d
    count++;
 8004f0c:	3701      	adds	r7, #1
    buf[idx--] = '-';
 8004f0e:	f108 38ff 	add.w	r8, r8, #4294967295
 8004f12:	446b      	add	r3, sp
 8004f14:	f803 2c40 	strb.w	r2, [r3, #-64]
  while (count < specifier->width) {
 8004f18:	f8dd 901c 	ldr.w	r9, [sp, #28]
    buf[idx--] = ' ';
 8004f1c:	ab0c      	add	r3, sp, #48	; 0x30
 8004f1e:	2120      	movs	r1, #32
 8004f20:	454f      	cmp	r7, r9
 8004f22:	f1c9 0001 	rsb	r0, r9, #1
 8004f26:	eba9 0607 	sub.w	r6, r9, r7
 8004f2a:	4438      	add	r0, r7
 8004f2c:	bf84      	itt	hi
 8004f2e:	2001      	movhi	r0, #1
 8004f30:	2600      	movhi	r6, #0
 8004f32:	4440      	add	r0, r8
 8004f34:	4632      	mov	r2, r6
 8004f36:	4418      	add	r0, r3
 8004f38:	f004 fc16 	bl	8009768 <memset>
  for(int i = 0; i < count; i++) {
 8004f3c:	eba7 0309 	sub.w	r3, r7, r9
 8004f40:	454f      	cmp	r7, r9
 8004f42:	bf88      	it	hi
 8004f44:	2300      	movhi	r3, #0
 8004f46:	4437      	add	r7, r6
 8004f48:	2600      	movs	r6, #0
 8004f4a:	4498      	add	r8, r3
 8004f4c:	ab0c      	add	r3, sp, #48	; 0x30
 8004f4e:	4498      	add	r8, r3
 8004f50:	42b7      	cmp	r7, r6
 8004f52:	d10f      	bne.n	8004f74 <vlc_print+0x414>
            count += _write_double(dbl, &specifier);
 8004f54:	443d      	add	r5, r7
            break;
 8004f56:	e6e2      	b.n	8004d1e <vlc_print+0x1be>
    mul *= 10;
 8004f58:	4640      	mov	r0, r8
 8004f5a:	4649      	mov	r1, r9
 8004f5c:	4b13      	ldr	r3, [pc, #76]	; (8004fac <vlc_print+0x44c>)
  for (int i=0;i <specifier->precision; i++)
 8004f5e:	3701      	adds	r7, #1
    mul *= 10;
 8004f60:	f7fb fb6a 	bl	8000638 <__aeabi_dmul>
 8004f64:	4680      	mov	r8, r0
 8004f66:	4689      	mov	r9, r1
  for (int i=0;i <specifier->precision; i++)
 8004f68:	e743      	b.n	8004df2 <vlc_print+0x292>
 8004f6a:	ed9d 7b00 	vldr	d7, [sp]
 8004f6e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004f72:	e751      	b.n	8004e18 <vlc_print+0x2b8>
    specifier->putc_fct(specifier->user, (buf + idx)[i]);
 8004f74:	f818 1f01 	ldrb.w	r1, [r8, #1]!
  for(int i = 0; i < count; i++) {
 8004f78:	3601      	adds	r6, #1
    specifier->putc_fct(specifier->user, (buf + idx)[i]);
 8004f7a:	e9dd 300a 	ldrd	r3, r0, [sp, #40]	; 0x28
 8004f7e:	4798      	blx	r3
  for(int i = 0; i < count; i++) {
 8004f80:	e7e6      	b.n	8004f50 <vlc_print+0x3f0>
 8004f82:	f1be 0f00 	cmp.w	lr, #0
 8004f86:	d000      	beq.n	8004f8a <vlc_print+0x42a>
 8004f88:	9007      	str	r0, [sp, #28]
 8004f8a:	f1b8 0f00 	cmp.w	r8, #0
 8004f8e:	d000      	beq.n	8004f92 <vlc_print+0x432>
 8004f90:	9208      	str	r2, [sp, #32]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	f43f ae5f 	beq.w	8004c56 <vlc_print+0xf6>
 8004f98:	9709      	str	r7, [sp, #36]	; 0x24
 8004f9a:	e65c      	b.n	8004c56 <vlc_print+0xf6>
          has_precision = true;
 8004f9c:	f04f 0c01 	mov.w	ip, #1
 8004fa0:	e60c      	b.n	8004bbc <vlc_print+0x5c>
          long_type = true;
 8004fa2:	2101      	movs	r1, #1
 8004fa4:	9100      	str	r1, [sp, #0]
      while (done == false) {
 8004fa6:	e609      	b.n	8004bbc <vlc_print+0x5c>
 8004fa8:	3fe00000 	.word	0x3fe00000
 8004fac:	40240000 	.word	0x40240000

08004fb0 <ai_network_get_report>:


AI_API_ENTRY
ai_bool ai_network_get_report(
  ai_handle network, ai_network_report* report)
{
 8004fb0:	b570      	push	{r4, r5, r6, lr}
 8004fb2:	460d      	mov	r5, r1
 8004fb4:	b0a2      	sub	sp, #136	; 0x88
 8004fb6:	4606      	mov	r6, r0
  ai_network* net_ctx = AI_NETWORK_ACQUIRE_CTX(network);
 8004fb8:	f000 fd70 	bl	8005a9c <ai_platform_context_acquire>
 8004fbc:	4604      	mov	r4, r0

  if (report && net_ctx)
 8004fbe:	2d00      	cmp	r5, #0
 8004fc0:	d034      	beq.n	800502c <ai_network_get_report+0x7c>
 8004fc2:	2800      	cmp	r0, #0
 8004fc4:	d02f      	beq.n	8005026 <ai_network_get_report+0x76>
  {
    ai_network_report r = {
 8004fc6:	2278      	movs	r2, #120	; 0x78
 8004fc8:	2100      	movs	r1, #0
 8004fca:	a804      	add	r0, sp, #16
 8004fcc:	f004 fbcc 	bl	8009768 <memset>
 8004fd0:	4b17      	ldr	r3, [pc, #92]	; (8005030 <ai_network_get_report+0x80>)
 8004fd2:	9300      	str	r3, [sp, #0]
 8004fd4:	4b17      	ldr	r3, [pc, #92]	; (8005034 <ai_network_get_report+0x84>)
 8004fd6:	9301      	str	r3, [sp, #4]
 8004fd8:	4b17      	ldr	r3, [pc, #92]	; (8005038 <ai_network_get_report+0x88>)
 8004fda:	9302      	str	r3, [sp, #8]
 8004fdc:	4b17      	ldr	r3, [pc, #92]	; (800503c <ai_network_get_report+0x8c>)
 8004fde:	9303      	str	r3, [sp, #12]
      .model_signature   = AI_NETWORK_MODEL_SIGNATURE,
      .model_datetime    = AI_TOOLS_DATE_TIME,
      
      .compile_datetime  = AI_TOOLS_COMPILE_TIME,
      
      .runtime_revision  = ai_platform_runtime_get_revision(),
 8004fe0:	f000 fb10 	bl	8005604 <ai_platform_runtime_get_revision>
    ai_network_report r = {
 8004fe4:	9004      	str	r0, [sp, #16]
      .runtime_version   = ai_platform_runtime_get_version(),
 8004fe6:	f000 fb91 	bl	800570c <ai_platform_runtime_get_version>
    ai_network_report r = {
 8004fea:	4b15      	ldr	r3, [pc, #84]	; (8005040 <ai_network_get_report+0x90>)
      .runtime_version   = ai_platform_runtime_get_version(),
 8004fec:	9005      	str	r0, [sp, #20]
    ai_network_report r = {
 8004fee:	9306      	str	r3, [sp, #24]
 8004ff0:	f44f 7384 	mov.w	r3, #264	; 0x108
 8004ff4:	f8ad 301c 	strh.w	r3, [sp, #28]
      .tool_revision     = AI_TOOLS_REVISION_ID,
      .tool_version      = {AI_TOOLS_VERSION_MAJOR, AI_TOOLS_VERSION_MINOR,
                            AI_TOOLS_VERSION_MICRO, 0x0},
      .tool_api_version  = AI_STRUCT_INIT,

      .api_version            = ai_platform_api_get_version(),
 8004ff8:	f000 fc20 	bl	800583c <ai_platform_api_get_version>
 8004ffc:	9009      	str	r0, [sp, #36]	; 0x24
      .interface_api_version  = ai_platform_interface_api_get_version(),
 8004ffe:	f000 fcb5 	bl	800596c <ai_platform_interface_api_get_version>
    ai_network_report r = {
 8005002:	4a10      	ldr	r2, [pc, #64]	; (8005044 <ai_network_get_report+0x94>)
 8005004:	2300      	movs	r3, #0
      .interface_api_version  = ai_platform_interface_api_get_version(),
 8005006:	900a      	str	r0, [sp, #40]	; 0x28
      .map_activations   = AI_STRUCT_INIT,
      .n_nodes           = 0,
      .signature         = 0x0,
    };

    if (!ai_platform_api_get_network_report(network, &r)) return false;
 8005008:	4669      	mov	r1, sp
 800500a:	4630      	mov	r0, r6
    ai_network_report r = {
 800500c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8005010:	4b0d      	ldr	r3, [pc, #52]	; (8005048 <ai_network_get_report+0x98>)
 8005012:	9311      	str	r3, [sp, #68]	; 0x44
    if (!ai_platform_api_get_network_report(network, &r)) return false;
 8005014:	f000 fee0 	bl	8005dd8 <ai_platform_api_get_network_report>
 8005018:	4604      	mov	r4, r0
 800501a:	b120      	cbz	r0, 8005026 <ai_network_get_report+0x76>

    *report = r;
 800501c:	2288      	movs	r2, #136	; 0x88
 800501e:	4669      	mov	r1, sp
 8005020:	4628      	mov	r0, r5
 8005022:	f004 fb93 	bl	800974c <memcpy>
    return true;
  }
  return false;
}
 8005026:	4620      	mov	r0, r4
 8005028:	b022      	add	sp, #136	; 0x88
 800502a:	bd70      	pop	{r4, r5, r6, pc}
  return false;
 800502c:	462c      	mov	r4, r5
 800502e:	e7fa      	b.n	8005026 <ai_network_get_report+0x76>
 8005030:	0800d354 	.word	0x0800d354
 8005034:	0800d38f 	.word	0x0800d38f
 8005038:	0800d3b0 	.word	0x0800d3b0
 800503c:	0800d3c9 	.word	0x0800d3c9
 8005040:	08022a3b 	.word	0x08022a3b
 8005044:	0001477c 	.word	0x0001477c
 8005048:	a1facade 	.word	0xa1facade

0800504c <ai_network_get_error>:

AI_API_ENTRY
ai_error ai_network_get_error(ai_handle network)
{
  return ai_platform_network_get_error(network);
 800504c:	f000 bdb2 	b.w	8005bb4 <ai_platform_network_get_error>

08005050 <ai_network_create>:
}

AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8005050:	b507      	push	{r0, r1, r2, lr}
  return ai_platform_network_create(
 8005052:	2305      	movs	r3, #5
 8005054:	2200      	movs	r2, #0
 8005056:	e9cd 3200 	strd	r3, r2, [sp]
 800505a:	2301      	movs	r3, #1
 800505c:	4a02      	ldr	r2, [pc, #8]	; (8005068 <ai_network_create+0x18>)
 800505e:	f001 fae7 	bl	8006630 <ai_platform_network_create>
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8005062:	b003      	add	sp, #12
 8005064:	f85d fb04 	ldr.w	pc, [sp], #4
 8005068:	20000c70 	.word	0x20000c70

0800506c <ai_network_destroy>:
}

AI_API_ENTRY
ai_handle ai_network_destroy(ai_handle network)
{
  return ai_platform_network_destroy(network);
 800506c:	f001 bcba 	b.w	80069e4 <ai_platform_network_destroy>

08005070 <ai_network_init>:
}

AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 8005070:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005074:	4606      	mov	r6, r0
 8005076:	460f      	mov	r7, r1
  ai_network* net_ctx = ai_platform_network_init(network, params);
 8005078:	f001 fdbc 	bl	8006bf4 <ai_platform_network_init>
  if (!net_ctx) return false;
 800507c:	4604      	mov	r4, r0
 800507e:	2800      	cmp	r0, #0
 8005080:	f000 80ab 	beq.w	80051da <ai_network_init+0x16a>
  if (ai_platform_get_weights_map(g_network_weights_map, 1, params)) {
 8005084:	f8df 81cc 	ldr.w	r8, [pc, #460]	; 8005254 <ai_network_init+0x1e4>
 8005088:	463a      	mov	r2, r7
 800508a:	2101      	movs	r1, #1
 800508c:	4640      	mov	r0, r8
 800508e:	f000 f9ef 	bl	8005470 <ai_platform_get_weights_map>
 8005092:	4605      	mov	r5, r0
 8005094:	2800      	cmp	r0, #0
 8005096:	f000 80a2 	beq.w	80051de <ai_network_init+0x16e>
    gemm_1_weights_array.format |= AI_FMT_FLAG_CONST;
 800509a:	4a57      	ldr	r2, [pc, #348]	; (80051f8 <ai_network_init+0x188>)
 800509c:	6813      	ldr	r3, [r2, #0]
 800509e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80050a2:	6013      	str	r3, [r2, #0]
    gemm_1_weights_array.data = AI_PTR(g_network_weights_map[0] + 0);
 80050a4:	f8d8 3000 	ldr.w	r3, [r8]
    gemm_1_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 0);
 80050a8:	e9c2 3302 	strd	r3, r3, [r2, #8]
    gemm_1_bias_array.format |= AI_FMT_FLAG_CONST;
 80050ac:	4a53      	ldr	r2, [pc, #332]	; (80051fc <ai_network_init+0x18c>)
    gemm_3_bias_array.data = AI_PTR(g_network_weights_map[0] + 84480);
 80050ae:	f503 30a5 	add.w	r0, r3, #84480	; 0x14a00
    gemm_1_bias_array.format |= AI_FMT_FLAG_CONST;
 80050b2:	6811      	ldr	r1, [r2, #0]
 80050b4:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 80050b8:	6011      	str	r1, [r2, #0]
    gemm_1_bias_array.data = AI_PTR(g_network_weights_map[0] + 12288);
 80050ba:	f503 5140 	add.w	r1, r3, #12288	; 0x3000
    gemm_1_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 12288);
 80050be:	e9c2 1102 	strd	r1, r1, [r2, #8]
    gemm_2_weights_array.format |= AI_FMT_FLAG_CONST;
 80050c2:	4a4f      	ldr	r2, [pc, #316]	; (8005200 <ai_network_init+0x190>)
 80050c4:	6811      	ldr	r1, [r2, #0]
 80050c6:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 80050ca:	6011      	str	r1, [r2, #0]
    gemm_2_weights_array.data = AI_PTR(g_network_weights_map[0] + 14336);
 80050cc:	f503 5160 	add.w	r1, r3, #14336	; 0x3800
    gemm_2_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 14336);
 80050d0:	e9c2 1102 	strd	r1, r1, [r2, #8]
    gemm_2_bias_array.format |= AI_FMT_FLAG_CONST;
 80050d4:	4a4b      	ldr	r2, [pc, #300]	; (8005204 <ai_network_init+0x194>)
 80050d6:	6811      	ldr	r1, [r2, #0]
 80050d8:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 80050dc:	6011      	str	r1, [r2, #0]
    gemm_2_bias_array.data = AI_PTR(g_network_weights_map[0] + 79872);
 80050de:	f503 319c 	add.w	r1, r3, #79872	; 0x13800
    gemm_2_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 79872);
 80050e2:	e9c2 1102 	strd	r1, r1, [r2, #8]
    gemm_3_weights_array.format |= AI_FMT_FLAG_CONST;
 80050e6:	4a48      	ldr	r2, [pc, #288]	; (8005208 <ai_network_init+0x198>)
 80050e8:	6811      	ldr	r1, [r2, #0]
 80050ea:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 80050ee:	6011      	str	r1, [r2, #0]
    gemm_3_weights_array.data = AI_PTR(g_network_weights_map[0] + 80384);
 80050f0:	f503 319d 	add.w	r1, r3, #80384	; 0x13a00
    gemm_4_bias_array.data = AI_PTR(g_network_weights_map[0] + 85632);
 80050f4:	f503 33a7 	add.w	r3, r3, #85504	; 0x14e00
    gemm_3_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 80384);
 80050f8:	e9c2 1102 	strd	r1, r1, [r2, #8]
    gemm_3_bias_array.format |= AI_FMT_FLAG_CONST;
 80050fc:	4a43      	ldr	r2, [pc, #268]	; (800520c <ai_network_init+0x19c>)
 80050fe:	6811      	ldr	r1, [r2, #0]
 8005100:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
    gemm_3_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 84480);
 8005104:	e9c2 0002 	strd	r0, r0, [r2, #8]
    gemm_3_bias_array.format |= AI_FMT_FLAG_CONST;
 8005108:	6011      	str	r1, [r2, #0]
    gemm_4_weights_array.data = AI_PTR(g_network_weights_map[0] + 84608);
 800510a:	3080      	adds	r0, #128	; 0x80
    gemm_4_weights_array.format |= AI_FMT_FLAG_CONST;
 800510c:	4a40      	ldr	r2, [pc, #256]	; (8005210 <ai_network_init+0x1a0>)
 800510e:	6811      	ldr	r1, [r2, #0]
 8005110:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
    gemm_4_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 84608);
 8005114:	e9c2 0002 	strd	r0, r0, [r2, #8]
    gemm_4_weights_array.format |= AI_FMT_FLAG_CONST;
 8005118:	6011      	str	r1, [r2, #0]
    gemm_4_bias_array.format |= AI_FMT_FLAG_CONST;
 800511a:	4a3e      	ldr	r2, [pc, #248]	; (8005214 <ai_network_init+0x1a4>)
 800511c:	6811      	ldr	r1, [r2, #0]
 800511e:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005122:	6011      	str	r1, [r2, #0]
    gemm_4_bias_array.data = AI_PTR(g_network_weights_map[0] + 85632);
 8005124:	f103 0180 	add.w	r1, r3, #128	; 0x80
    gemm_4_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 85632);
 8005128:	e9c2 1102 	strd	r1, r1, [r2, #8]
    gemm_5_weights_array.format |= AI_FMT_FLAG_CONST;
 800512c:	4a3a      	ldr	r2, [pc, #232]	; (8005218 <ai_network_init+0x1a8>)
 800512e:	6811      	ldr	r1, [r2, #0]
 8005130:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005134:	6011      	str	r1, [r2, #0]
    gemm_5_weights_array.data = AI_PTR(g_network_weights_map[0] + 85760);
 8005136:	f503 7180 	add.w	r1, r3, #256	; 0x100
    gemm_5_bias_array.data = AI_PTR(g_network_weights_map[0] + 85888);
 800513a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
    gemm_5_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 85760);
 800513e:	e9c2 1102 	strd	r1, r1, [r2, #8]
    gemm_5_bias_array.format |= AI_FMT_FLAG_CONST;
 8005142:	4a36      	ldr	r2, [pc, #216]	; (800521c <ai_network_init+0x1ac>)
 8005144:	6811      	ldr	r1, [r2, #0]
 8005146:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
    gemm_5_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 85888);
 800514a:	e9c2 3302 	strd	r3, r3, [r2, #8]
    gemm_5_bias_array.format |= AI_FMT_FLAG_CONST;
 800514e:	6011      	str	r1, [r2, #0]
  if (ai_platform_get_activations_map(g_network_activations_map, 1, params)) {
 8005150:	f8df 8104 	ldr.w	r8, [pc, #260]	; 8005258 <ai_network_init+0x1e8>
 8005154:	463a      	mov	r2, r7
 8005156:	2101      	movs	r1, #1
 8005158:	4640      	mov	r0, r8
 800515a:	f000 f9e1 	bl	8005520 <ai_platform_get_activations_map>
 800515e:	4607      	mov	r7, r0
 8005160:	2800      	cmp	r0, #0
 8005162:	d042      	beq.n	80051ea <ai_network_init+0x17a>
    serving_default_dense_35_input0_output_array.data = AI_PTR(g_network_activations_map[0] + 952);
 8005164:	f8d8 3000 	ldr.w	r3, [r8]
 8005168:	492d      	ldr	r1, [pc, #180]	; (8005220 <ai_network_init+0x1b0>)
 800516a:	f503 726e 	add.w	r2, r3, #952	; 0x3b8
    serving_default_dense_35_input0_output_array.data_start = AI_PTR(g_network_activations_map[0] + 952);
 800516e:	e9c1 2202 	strd	r2, r2, [r1, #8]
    conversion_0_output_array.data = AI_PTR(g_network_activations_map[0] + 952);
 8005172:	492c      	ldr	r1, [pc, #176]	; (8005224 <ai_network_init+0x1b4>)
    conversion_0_output_array.data_start = AI_PTR(g_network_activations_map[0] + 952);
 8005174:	e9c1 2202 	strd	r2, r2, [r1, #8]
    gemm_1_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 976);
 8005178:	f503 7174 	add.w	r1, r3, #976	; 0x3d0
 800517c:	4a2a      	ldr	r2, [pc, #168]	; (8005228 <ai_network_init+0x1b8>)
    gemm_1_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 976);
 800517e:	e9c2 1102 	strd	r1, r1, [r2, #8]
    gemm_1_output_array.data = AI_PTR(g_network_activations_map[0] + 1024);
 8005182:	f503 6180 	add.w	r1, r3, #1024	; 0x400
 8005186:	4a29      	ldr	r2, [pc, #164]	; (800522c <ai_network_init+0x1bc>)
    gemm_1_output_array.data_start = AI_PTR(g_network_activations_map[0] + 1024);
 8005188:	e9c2 1102 	strd	r1, r1, [r2, #8]
    gemm_2_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 800518c:	4a28      	ldr	r2, [pc, #160]	; (8005230 <ai_network_init+0x1c0>)
    gemm_3_output_array.data = AI_PTR(g_network_activations_map[0] + 256);
 800518e:	f503 7180 	add.w	r1, r3, #256	; 0x100
    gemm_2_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8005192:	e9c2 3302 	strd	r3, r3, [r2, #8]
    gemm_3_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8005196:	4a27      	ldr	r2, [pc, #156]	; (8005234 <ai_network_init+0x1c4>)
    gemm_3_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8005198:	e9c2 3302 	strd	r3, r3, [r2, #8]
    gemm_3_output_array.data = AI_PTR(g_network_activations_map[0] + 256);
 800519c:	4a26      	ldr	r2, [pc, #152]	; (8005238 <ai_network_init+0x1c8>)
    gemm_3_output_array.data_start = AI_PTR(g_network_activations_map[0] + 256);
 800519e:	e9c2 1102 	strd	r1, r1, [r2, #8]
    gemm_4_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 80051a2:	4a26      	ldr	r2, [pc, #152]	; (800523c <ai_network_init+0x1cc>)
    gemm_2_output_array.data = AI_PTR(g_network_activations_map[0] + 1536);
 80051a4:	4926      	ldr	r1, [pc, #152]	; (8005240 <ai_network_init+0x1d0>)
    gemm_4_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 80051a6:	e9c2 3302 	strd	r3, r3, [r2, #8]
    gemm_5_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 80051aa:	4a26      	ldr	r2, [pc, #152]	; (8005244 <ai_network_init+0x1d4>)
    gemm_5_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 80051ac:	e9c2 3302 	strd	r3, r3, [r2, #8]
    gemm_2_output_array.data = AI_PTR(g_network_activations_map[0] + 1536);
 80051b0:	f503 62c0 	add.w	r2, r3, #1536	; 0x600
    gemm_5_output_array.data = AI_PTR(g_network_activations_map[0] + 1568);
 80051b4:	f503 63c4 	add.w	r3, r3, #1568	; 0x620
    gemm_2_output_array.data_start = AI_PTR(g_network_activations_map[0] + 1536);
 80051b8:	e9c1 2202 	strd	r2, r2, [r1, #8]
    gemm_4_output_array.data = AI_PTR(g_network_activations_map[0] + 1536);
 80051bc:	4922      	ldr	r1, [pc, #136]	; (8005248 <ai_network_init+0x1d8>)
    gemm_4_output_array.data_start = AI_PTR(g_network_activations_map[0] + 1536);
 80051be:	e9c1 2202 	strd	r2, r2, [r1, #8]
    gemm_5_output_array.data = AI_PTR(g_network_activations_map[0] + 1568);
 80051c2:	4922      	ldr	r1, [pc, #136]	; (800524c <ai_network_init+0x1dc>)
    gemm_5_output_array.data_start = AI_PTR(g_network_activations_map[0] + 1568);
 80051c4:	e9c1 3302 	strd	r3, r3, [r1, #8]
    conversion_6_output_array.data = AI_PTR(g_network_activations_map[0] + 1536);
 80051c8:	4b21      	ldr	r3, [pc, #132]	; (8005250 <ai_network_init+0x1e0>)
    conversion_6_output_array.data_start = AI_PTR(g_network_activations_map[0] + 1536);
 80051ca:	e9c3 2202 	strd	r2, r2, [r3, #8]

  ai_bool ok = true;
  ok &= network_configure_weights(net_ctx, params);
  ok &= network_configure_activations(net_ctx, params);

  ok &= ai_platform_network_post_init(network);
 80051ce:	4630      	mov	r0, r6
 80051d0:	f001 feac 	bl	8006f2c <ai_platform_network_post_init>
 80051d4:	4038      	ands	r0, r7
 80051d6:	4028      	ands	r0, r5
 80051d8:	b2c0      	uxtb	r0, r0

  return ok;
}
 80051da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 80051de:	2212      	movs	r2, #18
 80051e0:	2130      	movs	r1, #48	; 0x30
 80051e2:	4620      	mov	r0, r4
 80051e4:	f000 fdf2 	bl	8005dcc <ai_platform_network_set_error>
  return false;
 80051e8:	e7b2      	b.n	8005150 <ai_network_init+0xe0>
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 80051ea:	2213      	movs	r2, #19
 80051ec:	2130      	movs	r1, #48	; 0x30
 80051ee:	4620      	mov	r0, r4
 80051f0:	f000 fdec 	bl	8005dcc <ai_platform_network_set_error>
  return false;
 80051f4:	e7eb      	b.n	80051ce <ai_network_init+0x15e>
 80051f6:	bf00      	nop
 80051f8:	20000d78 	.word	0x20000d78
 80051fc:	20000cd8 	.word	0x20000cd8
 8005200:	20000e44 	.word	0x20000e44
 8005204:	20000da4 	.word	0x20000da4
 8005208:	20000f10 	.word	0x20000f10
 800520c:	20000e70 	.word	0x20000e70
 8005210:	20000fdc 	.word	0x20000fdc
 8005214:	20000f3c 	.word	0x20000f3c
 8005218:	200010a8 	.word	0x200010a8
 800521c:	20001008 	.word	0x20001008
 8005220:	200010d4 	.word	0x200010d4
 8005224:	20000c14 	.word	0x20000c14
 8005228:	20000d4c 	.word	0x20000d4c
 800522c:	20000d20 	.word	0x20000d20
 8005230:	20000e18 	.word	0x20000e18
 8005234:	20000ee4 	.word	0x20000ee4
 8005238:	20000eb8 	.word	0x20000eb8
 800523c:	20000fb0 	.word	0x20000fb0
 8005240:	20000dec 	.word	0x20000dec
 8005244:	2000107c 	.word	0x2000107c
 8005248:	20000f84 	.word	0x20000f84
 800524c:	20001050 	.word	0x20001050
 8005250:	20000c60 	.word	0x20000c60
 8005254:	2000166c 	.word	0x2000166c
 8005258:	20001668 	.word	0x20001668

0800525c <ai_network_run>:

AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
  return ai_platform_network_process(network, input, output);
 800525c:	f001 bf90 	b.w	8007180 <ai_platform_network_process>

08005260 <ai_network_forward>:
}

AI_API_ENTRY
ai_i32 ai_network_forward(ai_handle network, const ai_buffer* input)
{
  return ai_platform_network_process(network, input, NULL);
 8005260:	2200      	movs	r2, #0
 8005262:	f001 bf8d 	b.w	8007180 <ai_platform_network_process>
	...

08005268 <ai_network_data_params_get>:
 * @ingroup network_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_network_data_params_get(ai_network_params* params)
{
 8005268:	b530      	push	{r4, r5, lr}
  if (!params) return false;
 800526a:	4603      	mov	r3, r0
{
 800526c:	b085      	sub	sp, #20
  if (!params) return false;
 800526e:	b170      	cbz	r0, 800528e <ai_network_data_params_get+0x26>
  
  const ai_buffer_array map_activations = 
 8005270:	4c08      	ldr	r4, [pc, #32]	; (8005294 <ai_network_data_params_get+0x2c>)
 8005272:	466a      	mov	r2, sp
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_ACTIVATIONS_COUNT, g_network_data_map_activations);
  
  const ai_buffer_array map_weights = 
 8005274:	ad02      	add	r5, sp, #8
  const ai_buffer_array map_activations = 
 8005276:	e894 0003 	ldmia.w	r4, {r0, r1}
 800527a:	e882 0003 	stmia.w	r2, {r0, r1}
  const ai_buffer_array map_weights = 
 800527e:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 8005282:	e885 0003 	stmia.w	r5, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_WEIGHTS_COUNT, g_network_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 8005286:	4629      	mov	r1, r5
 8005288:	4618      	mov	r0, r3
 800528a:	f000 f9a1 	bl	80055d0 <ai_platform_bind_network_params>
}
 800528e:	b005      	add	sp, #20
 8005290:	bd30      	pop	{r4, r5, pc}
 8005292:	bf00      	nop
 8005294:	0800d2dc 	.word	0x0800d2dc

08005298 <ai_buffer_get_size>:
 8005298:	b368      	cbz	r0, 80052f6 <ai_buffer_get_size+0x5e>
 800529a:	4b17      	ldr	r3, [pc, #92]	; (80052f8 <ai_buffer_get_size+0x60>)
 800529c:	4a17      	ldr	r2, [pc, #92]	; (80052fc <ai_buffer_get_size+0x64>)
 800529e:	b410      	push	{r4}
 80052a0:	6804      	ldr	r4, [r0, #0]
 80052a2:	4023      	ands	r3, r4
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d123      	bne.n	80052f0 <ai_buffer_get_size+0x58>
 80052a8:	b311      	cbz	r1, 80052f0 <ai_buffer_get_size+0x58>
 80052aa:	6984      	ldr	r4, [r0, #24]
 80052ac:	6862      	ldr	r2, [r4, #4]
 80052ae:	321f      	adds	r2, #31
 80052b0:	f022 021f 	bic.w	r2, r2, #31
 80052b4:	7d03      	ldrb	r3, [r0, #20]
 80052b6:	6941      	ldr	r1, [r0, #20]
 80052b8:	f1a3 0301 	sub.w	r3, r3, #1
 80052bc:	f3c1 2017 	ubfx	r0, r1, #8, #24
 80052c0:	fab3 f383 	clz	r3, r3
 80052c4:	095b      	lsrs	r3, r3, #5
 80052c6:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 80052ca:	da0c      	bge.n	80052e6 <ai_buffer_get_size+0x4e>
 80052cc:	2b01      	cmp	r3, #1
 80052ce:	d103      	bne.n	80052d8 <ai_buffer_get_size+0x40>
 80052d0:	2802      	cmp	r0, #2
 80052d2:	f04f 0302 	mov.w	r3, #2
 80052d6:	d006      	beq.n	80052e6 <ai_buffer_get_size+0x4e>
 80052d8:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 80052dc:	3301      	adds	r3, #1
 80052de:	4298      	cmp	r0, r3
 80052e0:	fb01 f202 	mul.w	r2, r1, r2
 80052e4:	d1f2      	bne.n	80052cc <ai_buffer_get_size+0x34>
 80052e6:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 80052ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80052ee:	4770      	bx	lr
 80052f0:	6984      	ldr	r4, [r0, #24]
 80052f2:	6862      	ldr	r2, [r4, #4]
 80052f4:	e7de      	b.n	80052b4 <ai_buffer_get_size+0x1c>
 80052f6:	4770      	bx	lr
 80052f8:	017fffff 	.word	0x017fffff
 80052fc:	000400c0 	.word	0x000400c0

08005300 <ai_buffer_get_byte_size>:
 8005300:	b128      	cbz	r0, 800530e <ai_buffer_get_byte_size+0xe>
 8005302:	f3c1 11c6 	ubfx	r1, r1, #7, #7
 8005306:	fb01 f000 	mul.w	r0, r1, r0
 800530a:	3007      	adds	r0, #7
 800530c:	08c0      	lsrs	r0, r0, #3
 800530e:	4770      	bx	lr

08005310 <ai_buffer_array_sane>:
 8005310:	b138      	cbz	r0, 8005322 <ai_buffer_array_sane+0x12>
 8005312:	6843      	ldr	r3, [r0, #4]
 8005314:	b123      	cbz	r3, 8005320 <ai_buffer_array_sane+0x10>
 8005316:	8840      	ldrh	r0, [r0, #2]
 8005318:	3800      	subs	r0, #0
 800531a:	bf18      	it	ne
 800531c:	2001      	movne	r0, #1
 800531e:	4770      	bx	lr
 8005320:	4618      	mov	r0, r3
 8005322:	4770      	bx	lr

08005324 <ai_buffer_array_item_set_address>:
 8005324:	b150      	cbz	r0, 800533c <ai_buffer_array_item_set_address+0x18>
 8005326:	6843      	ldr	r3, [r0, #4]
 8005328:	b14b      	cbz	r3, 800533e <ai_buffer_array_item_set_address+0x1a>
 800532a:	8840      	ldrh	r0, [r0, #2]
 800532c:	b900      	cbnz	r0, 8005330 <ai_buffer_array_item_set_address+0xc>
 800532e:	4770      	bx	lr
 8005330:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8005334:	2001      	movs	r0, #1
 8005336:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800533a:	604a      	str	r2, [r1, #4]
 800533c:	4770      	bx	lr
 800533e:	4618      	mov	r0, r3
 8005340:	4770      	bx	lr
 8005342:	bf00      	nop

08005344 <_platform_observer_node_exec_cb>:
 8005344:	2a00      	cmp	r2, #0
 8005346:	d06c      	beq.n	8005422 <_platform_observer_node_exec_cb+0xde>
 8005348:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800534c:	6815      	ldr	r5, [r2, #0]
 800534e:	b085      	sub	sp, #20
 8005350:	4614      	mov	r4, r2
 8005352:	2d00      	cmp	r5, #0
 8005354:	d067      	beq.n	8005426 <_platform_observer_node_exec_cb+0xe2>
 8005356:	8993      	ldrh	r3, [r2, #12]
 8005358:	f240 2c02 	movw	ip, #514	; 0x202
 800535c:	89d2      	ldrh	r2, [r2, #14]
 800535e:	460e      	mov	r6, r1
 8005360:	2b00      	cmp	r3, #0
 8005362:	f240 3102 	movw	r1, #770	; 0x302
 8005366:	f102 32ff 	add.w	r2, r2, #4294967295
 800536a:	f240 3e01 	movw	lr, #769	; 0x301
 800536e:	bf18      	it	ne
 8005370:	4667      	movne	r7, ip
 8005372:	f240 2c01 	movw	ip, #513	; 0x201
 8005376:	bf0d      	iteet	eq
 8005378:	460f      	moveq	r7, r1
 800537a:	f44f 7901 	movne.w	r9, #516	; 0x204
 800537e:	46e6      	movne	lr, ip
 8005380:	f44f 7941 	moveq.w	r9, #772	; 0x304
 8005384:	f240 1c01 	movw	ip, #257	; 0x101
 8005388:	bf1b      	ittet	ne
 800538a:	f04f 0804 	movne.w	r8, #4
 800538e:	f04f 0c01 	movne.w	ip, #1
 8005392:	f44f 7882 	moveq.w	r8, #260	; 0x104
 8005396:	2102      	movne	r1, #2
 8005398:	bf08      	it	eq
 800539a:	f44f 7181 	moveq.w	r1, #258	; 0x102
 800539e:	429a      	cmp	r2, r3
 80053a0:	d013      	beq.n	80053ca <_platform_observer_node_exec_cb+0x86>
 80053a2:	b148      	cbz	r0, 80053b8 <_platform_observer_node_exec_cb+0x74>
 80053a4:	2801      	cmp	r0, #1
 80053a6:	d042      	beq.n	800542e <_platform_observer_node_exec_cb+0xea>
 80053a8:	2802      	cmp	r0, #2
 80053aa:	d025      	beq.n	80053f8 <_platform_observer_node_exec_cb+0xb4>
 80053ac:	2803      	cmp	r0, #3
 80053ae:	d045      	beq.n	800543c <_platform_observer_node_exec_cb+0xf8>
 80053b0:	2000      	movs	r0, #0
 80053b2:	b005      	add	sp, #20
 80053b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80053b8:	68a2      	ldr	r2, [r4, #8]
 80053ba:	07d7      	lsls	r7, r2, #31
 80053bc:	d40b      	bmi.n	80053d6 <_platform_observer_node_exec_cb+0x92>
 80053be:	3301      	adds	r3, #1
 80053c0:	2000      	movs	r0, #0
 80053c2:	81a3      	strh	r3, [r4, #12]
 80053c4:	b005      	add	sp, #20
 80053c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80053ca:	46c8      	mov	r8, r9
 80053cc:	4639      	mov	r1, r7
 80053ce:	46f4      	mov	ip, lr
 80053d0:	2800      	cmp	r0, #0
 80053d2:	d1e7      	bne.n	80053a4 <_platform_observer_node_exec_cb+0x60>
 80053d4:	e7f0      	b.n	80053b8 <_platform_observer_node_exec_cb+0x74>
 80053d6:	f8ad 3000 	strh.w	r3, [sp]
 80053da:	466a      	mov	r2, sp
 80053dc:	8873      	ldrh	r3, [r6, #2]
 80053de:	4661      	mov	r1, ip
 80053e0:	9002      	str	r0, [sp, #8]
 80053e2:	f8ad 3004 	strh.w	r3, [sp, #4]
 80053e6:	8833      	ldrh	r3, [r6, #0]
 80053e8:	6860      	ldr	r0, [r4, #4]
 80053ea:	f8ad 3002 	strh.w	r3, [sp, #2]
 80053ee:	69b3      	ldr	r3, [r6, #24]
 80053f0:	9303      	str	r3, [sp, #12]
 80053f2:	47a8      	blx	r5
 80053f4:	89a3      	ldrh	r3, [r4, #12]
 80053f6:	e7e2      	b.n	80053be <_platform_observer_node_exec_cb+0x7a>
 80053f8:	68a2      	ldr	r2, [r4, #8]
 80053fa:	6126      	str	r6, [r4, #16]
 80053fc:	0790      	lsls	r0, r2, #30
 80053fe:	d5d7      	bpl.n	80053b0 <_platform_observer_node_exec_cb+0x6c>
 8005400:	f8ad 3000 	strh.w	r3, [sp]
 8005404:	8873      	ldrh	r3, [r6, #2]
 8005406:	8832      	ldrh	r2, [r6, #0]
 8005408:	6860      	ldr	r0, [r4, #4]
 800540a:	2400      	movs	r4, #0
 800540c:	f8ad 3004 	strh.w	r3, [sp, #4]
 8005410:	69b3      	ldr	r3, [r6, #24]
 8005412:	f8ad 2002 	strh.w	r2, [sp, #2]
 8005416:	466a      	mov	r2, sp
 8005418:	e9cd 4302 	strd	r4, r3, [sp, #8]
 800541c:	47a8      	blx	r5
 800541e:	4620      	mov	r0, r4
 8005420:	e7d0      	b.n	80053c4 <_platform_observer_node_exec_cb+0x80>
 8005422:	2001      	movs	r0, #1
 8005424:	4770      	bx	lr
 8005426:	2001      	movs	r0, #1
 8005428:	b005      	add	sp, #20
 800542a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800542e:	2300      	movs	r3, #0
 8005430:	6126      	str	r6, [r4, #16]
 8005432:	4618      	mov	r0, r3
 8005434:	81a3      	strh	r3, [r4, #12]
 8005436:	b005      	add	sp, #20
 8005438:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800543c:	68a2      	ldr	r2, [r4, #8]
 800543e:	0752      	lsls	r2, r2, #29
 8005440:	d5bd      	bpl.n	80053be <_platform_observer_node_exec_cb+0x7a>
 8005442:	6922      	ldr	r2, [r4, #16]
 8005444:	2000      	movs	r0, #0
 8005446:	f8ad 3000 	strh.w	r3, [sp]
 800544a:	4641      	mov	r1, r8
 800544c:	8853      	ldrh	r3, [r2, #2]
 800544e:	f8ad 3004 	strh.w	r3, [sp, #4]
 8005452:	8813      	ldrh	r3, [r2, #0]
 8005454:	f8ad 3002 	strh.w	r3, [sp, #2]
 8005458:	6993      	ldr	r3, [r2, #24]
 800545a:	466a      	mov	r2, sp
 800545c:	9002      	str	r0, [sp, #8]
 800545e:	9303      	str	r3, [sp, #12]
 8005460:	6860      	ldr	r0, [r4, #4]
 8005462:	47a8      	blx	r5
 8005464:	89a3      	ldrh	r3, [r4, #12]
 8005466:	e7aa      	b.n	80053be <_platform_observer_node_exec_cb+0x7a>

08005468 <_ai_platform_acquire_crc>:
 8005468:	2001      	movs	r0, #1
 800546a:	4770      	bx	lr

0800546c <_ai_platform_release_crc>:
 800546c:	4770      	bx	lr
 800546e:	bf00      	nop

08005470 <ai_platform_get_weights_map>:
 8005470:	2900      	cmp	r1, #0
 8005472:	bf18      	it	ne
 8005474:	2800      	cmpne	r0, #0
 8005476:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005478:	bf0c      	ite	eq
 800547a:	2401      	moveq	r4, #1
 800547c:	2400      	movne	r4, #0
 800547e:	2a00      	cmp	r2, #0
 8005480:	bf08      	it	eq
 8005482:	f044 0401 	orreq.w	r4, r4, #1
 8005486:	b114      	cbz	r4, 800548e <ai_platform_get_weights_map+0x1e>
 8005488:	2400      	movs	r4, #0
 800548a:	4620      	mov	r0, r4
 800548c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800548e:	4616      	mov	r6, r2
 8005490:	4b22      	ldr	r3, [pc, #136]	; (800551c <ai_platform_get_weights_map+0xac>)
 8005492:	6812      	ldr	r2, [r2, #0]
 8005494:	4605      	mov	r5, r0
 8005496:	460f      	mov	r7, r1
 8005498:	429a      	cmp	r2, r3
 800549a:	d022      	beq.n	80054e2 <ai_platform_get_weights_map+0x72>
 800549c:	6870      	ldr	r0, [r6, #4]
 800549e:	2800      	cmp	r0, #0
 80054a0:	d0f2      	beq.n	8005488 <ai_platform_get_weights_map+0x18>
 80054a2:	6806      	ldr	r6, [r0, #0]
 80054a4:	429e      	cmp	r6, r3
 80054a6:	d006      	beq.n	80054b6 <ai_platform_get_weights_map+0x46>
 80054a8:	f1a1 0401 	sub.w	r4, r1, #1
 80054ac:	6028      	str	r0, [r5, #0]
 80054ae:	fab4 f484 	clz	r4, r4
 80054b2:	0964      	lsrs	r4, r4, #5
 80054b4:	e7e9      	b.n	800548a <ai_platform_get_weights_map+0x1a>
 80054b6:	3d04      	subs	r5, #4
 80054b8:	4602      	mov	r2, r0
 80054ba:	4621      	mov	r1, r4
 80054bc:	e000      	b.n	80054c0 <ai_platform_get_weights_map+0x50>
 80054be:	4619      	mov	r1, r3
 80054c0:	f852 3f04 	ldr.w	r3, [r2, #4]!
 80054c4:	42b3      	cmp	r3, r6
 80054c6:	d025      	beq.n	8005514 <ai_platform_get_weights_map+0xa4>
 80054c8:	f845 3f04 	str.w	r3, [r5, #4]!
 80054cc:	1c4b      	adds	r3, r1, #1
 80054ce:	429f      	cmp	r7, r3
 80054d0:	d8f5      	bhi.n	80054be <ai_platform_get_weights_map+0x4e>
 80054d2:	d1da      	bne.n	800548a <ai_platform_get_weights_map+0x1a>
 80054d4:	3102      	adds	r1, #2
 80054d6:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 80054da:	42b3      	cmp	r3, r6
 80054dc:	d1d5      	bne.n	800548a <ai_platform_get_weights_map+0x1a>
 80054de:	2401      	movs	r4, #1
 80054e0:	e7d3      	b.n	800548a <ai_platform_get_weights_map+0x1a>
 80054e2:	1d30      	adds	r0, r6, #4
 80054e4:	f7ff ff14 	bl	8005310 <ai_buffer_array_sane>
 80054e8:	2800      	cmp	r0, #0
 80054ea:	d0cd      	beq.n	8005488 <ai_platform_get_weights_map+0x18>
 80054ec:	88f3      	ldrh	r3, [r6, #6]
 80054ee:	429f      	cmp	r7, r3
 80054f0:	d1ca      	bne.n	8005488 <ai_platform_get_weights_map+0x18>
 80054f2:	3d04      	subs	r5, #4
 80054f4:	4622      	mov	r2, r4
 80054f6:	68b3      	ldr	r3, [r6, #8]
 80054f8:	4423      	add	r3, r4
 80054fa:	341c      	adds	r4, #28
 80054fc:	685b      	ldr	r3, [r3, #4]
 80054fe:	b123      	cbz	r3, 800550a <ai_platform_get_weights_map+0x9a>
 8005500:	3201      	adds	r2, #1
 8005502:	f845 3f04 	str.w	r3, [r5, #4]!
 8005506:	4297      	cmp	r7, r2
 8005508:	d8f5      	bhi.n	80054f6 <ai_platform_get_weights_map+0x86>
 800550a:	1abc      	subs	r4, r7, r2
 800550c:	fab4 f484 	clz	r4, r4
 8005510:	0964      	lsrs	r4, r4, #5
 8005512:	e7ba      	b.n	800548a <ai_platform_get_weights_map+0x1a>
 8005514:	428f      	cmp	r7, r1
 8005516:	d1b8      	bne.n	800548a <ai_platform_get_weights_map+0x1a>
 8005518:	e7e1      	b.n	80054de <ai_platform_get_weights_map+0x6e>
 800551a:	bf00      	nop
 800551c:	a1facade 	.word	0xa1facade

08005520 <ai_platform_get_activations_map>:
 8005520:	2900      	cmp	r1, #0
 8005522:	bf18      	it	ne
 8005524:	2800      	cmpne	r0, #0
 8005526:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005528:	bf0c      	ite	eq
 800552a:	2401      	moveq	r4, #1
 800552c:	2400      	movne	r4, #0
 800552e:	2a00      	cmp	r2, #0
 8005530:	bf08      	it	eq
 8005532:	f044 0401 	orreq.w	r4, r4, #1
 8005536:	b114      	cbz	r4, 800553e <ai_platform_get_activations_map+0x1e>
 8005538:	2400      	movs	r4, #0
 800553a:	4620      	mov	r0, r4
 800553c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800553e:	4616      	mov	r6, r2
 8005540:	4b22      	ldr	r3, [pc, #136]	; (80055cc <ai_platform_get_activations_map+0xac>)
 8005542:	6812      	ldr	r2, [r2, #0]
 8005544:	4605      	mov	r5, r0
 8005546:	460f      	mov	r7, r1
 8005548:	429a      	cmp	r2, r3
 800554a:	d022      	beq.n	8005592 <ai_platform_get_activations_map+0x72>
 800554c:	6a30      	ldr	r0, [r6, #32]
 800554e:	2800      	cmp	r0, #0
 8005550:	d0f2      	beq.n	8005538 <ai_platform_get_activations_map+0x18>
 8005552:	6806      	ldr	r6, [r0, #0]
 8005554:	429e      	cmp	r6, r3
 8005556:	d006      	beq.n	8005566 <ai_platform_get_activations_map+0x46>
 8005558:	f1a1 0401 	sub.w	r4, r1, #1
 800555c:	6028      	str	r0, [r5, #0]
 800555e:	fab4 f484 	clz	r4, r4
 8005562:	0964      	lsrs	r4, r4, #5
 8005564:	e7e9      	b.n	800553a <ai_platform_get_activations_map+0x1a>
 8005566:	3d04      	subs	r5, #4
 8005568:	4602      	mov	r2, r0
 800556a:	4621      	mov	r1, r4
 800556c:	e000      	b.n	8005570 <ai_platform_get_activations_map+0x50>
 800556e:	4619      	mov	r1, r3
 8005570:	f852 3f04 	ldr.w	r3, [r2, #4]!
 8005574:	42b3      	cmp	r3, r6
 8005576:	d026      	beq.n	80055c6 <ai_platform_get_activations_map+0xa6>
 8005578:	f845 3f04 	str.w	r3, [r5, #4]!
 800557c:	1c4b      	adds	r3, r1, #1
 800557e:	429f      	cmp	r7, r3
 8005580:	d8f5      	bhi.n	800556e <ai_platform_get_activations_map+0x4e>
 8005582:	d1da      	bne.n	800553a <ai_platform_get_activations_map+0x1a>
 8005584:	3102      	adds	r1, #2
 8005586:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 800558a:	42b3      	cmp	r3, r6
 800558c:	d1d5      	bne.n	800553a <ai_platform_get_activations_map+0x1a>
 800558e:	2401      	movs	r4, #1
 8005590:	e7d3      	b.n	800553a <ai_platform_get_activations_map+0x1a>
 8005592:	f106 000c 	add.w	r0, r6, #12
 8005596:	f7ff febb 	bl	8005310 <ai_buffer_array_sane>
 800559a:	2800      	cmp	r0, #0
 800559c:	d0cc      	beq.n	8005538 <ai_platform_get_activations_map+0x18>
 800559e:	89f3      	ldrh	r3, [r6, #14]
 80055a0:	429f      	cmp	r7, r3
 80055a2:	d1c9      	bne.n	8005538 <ai_platform_get_activations_map+0x18>
 80055a4:	3d04      	subs	r5, #4
 80055a6:	4622      	mov	r2, r4
 80055a8:	6933      	ldr	r3, [r6, #16]
 80055aa:	4423      	add	r3, r4
 80055ac:	341c      	adds	r4, #28
 80055ae:	685b      	ldr	r3, [r3, #4]
 80055b0:	b123      	cbz	r3, 80055bc <ai_platform_get_activations_map+0x9c>
 80055b2:	3201      	adds	r2, #1
 80055b4:	f845 3f04 	str.w	r3, [r5, #4]!
 80055b8:	4297      	cmp	r7, r2
 80055ba:	d8f5      	bhi.n	80055a8 <ai_platform_get_activations_map+0x88>
 80055bc:	1abc      	subs	r4, r7, r2
 80055be:	fab4 f484 	clz	r4, r4
 80055c2:	0964      	lsrs	r4, r4, #5
 80055c4:	e7b9      	b.n	800553a <ai_platform_get_activations_map+0x1a>
 80055c6:	428f      	cmp	r7, r1
 80055c8:	d1b7      	bne.n	800553a <ai_platform_get_activations_map+0x1a>
 80055ca:	e7e0      	b.n	800558e <ai_platform_get_activations_map+0x6e>
 80055cc:	a1facade 	.word	0xa1facade

080055d0 <ai_platform_bind_network_params>:
 80055d0:	2a00      	cmp	r2, #0
 80055d2:	bf18      	it	ne
 80055d4:	2900      	cmpne	r1, #0
 80055d6:	d010      	beq.n	80055fa <ai_platform_bind_network_params+0x2a>
 80055d8:	b178      	cbz	r0, 80055fa <ai_platform_bind_network_params+0x2a>
 80055da:	4603      	mov	r3, r0
 80055dc:	4808      	ldr	r0, [pc, #32]	; (8005600 <ai_platform_bind_network_params+0x30>)
 80055de:	f103 0c0c 	add.w	ip, r3, #12
 80055e2:	f843 0b04 	str.w	r0, [r3], #4
 80055e6:	c903      	ldmia	r1, {r0, r1}
 80055e8:	e883 0003 	stmia.w	r3, {r0, r1}
 80055ec:	2301      	movs	r3, #1
 80055ee:	e892 0003 	ldmia.w	r2, {r0, r1}
 80055f2:	e88c 0003 	stmia.w	ip, {r0, r1}
 80055f6:	4618      	mov	r0, r3
 80055f8:	4770      	bx	lr
 80055fa:	2300      	movs	r3, #0
 80055fc:	4618      	mov	r0, r3
 80055fe:	4770      	bx	lr
 8005600:	a1facade 	.word	0xa1facade

08005604 <ai_platform_runtime_get_revision>:
 8005604:	b508      	push	{r3, lr}
 8005606:	f7ff ff2f 	bl	8005468 <_ai_platform_acquire_crc>
 800560a:	4b39      	ldr	r3, [pc, #228]	; (80056f0 <ai_platform_runtime_get_revision+0xec>)
 800560c:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005616:	189a      	adds	r2, r3, r2
 8005618:	2a01      	cmp	r2, #1
 800561a:	d929      	bls.n	8005670 <ai_platform_runtime_get_revision+0x6c>
 800561c:	f240 4249 	movw	r2, #1097	; 0x449
 8005620:	4293      	cmp	r3, r2
 8005622:	d025      	beq.n	8005670 <ai_platform_runtime_get_revision+0x6c>
 8005624:	4a33      	ldr	r2, [pc, #204]	; (80056f4 <ai_platform_runtime_get_revision+0xf0>)
 8005626:	6813      	ldr	r3, [r2, #0]
 8005628:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800562c:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8005630:	d02b      	beq.n	800568a <ai_platform_runtime_get_revision+0x86>
 8005632:	6813      	ldr	r3, [r2, #0]
 8005634:	f240 4183 	movw	r1, #1155	; 0x483
 8005638:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800563c:	428b      	cmp	r3, r1
 800563e:	d046      	beq.n	80056ce <ai_platform_runtime_get_revision+0xca>
 8005640:	6813      	ldr	r3, [r2, #0]
 8005642:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005646:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800564a:	d032      	beq.n	80056b2 <ai_platform_runtime_get_revision+0xae>
 800564c:	6813      	ldr	r3, [r2, #0]
 800564e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005652:	2b00      	cmp	r3, #0
 8005654:	d129      	bne.n	80056aa <ai_platform_runtime_get_revision+0xa6>
 8005656:	4a28      	ldr	r2, [pc, #160]	; (80056f8 <ai_platform_runtime_get_revision+0xf4>)
 8005658:	2301      	movs	r3, #1
 800565a:	6093      	str	r3, [r2, #8]
 800565c:	6893      	ldr	r3, [r2, #8]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d1fc      	bne.n	800565c <ai_platform_runtime_get_revision+0x58>
 8005662:	4926      	ldr	r1, [pc, #152]	; (80056fc <ai_platform_runtime_get_revision+0xf8>)
 8005664:	4b26      	ldr	r3, [pc, #152]	; (8005700 <ai_platform_runtime_get_revision+0xfc>)
 8005666:	6011      	str	r1, [r2, #0]
 8005668:	6812      	ldr	r2, [r2, #0]
 800566a:	429a      	cmp	r2, r3
 800566c:	d01d      	beq.n	80056aa <ai_platform_runtime_get_revision+0xa6>
 800566e:	e7fe      	b.n	800566e <ai_platform_runtime_get_revision+0x6a>
 8005670:	4a21      	ldr	r2, [pc, #132]	; (80056f8 <ai_platform_runtime_get_revision+0xf4>)
 8005672:	2301      	movs	r3, #1
 8005674:	6093      	str	r3, [r2, #8]
 8005676:	6893      	ldr	r3, [r2, #8]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d1fc      	bne.n	8005676 <ai_platform_runtime_get_revision+0x72>
 800567c:	491f      	ldr	r1, [pc, #124]	; (80056fc <ai_platform_runtime_get_revision+0xf8>)
 800567e:	4b20      	ldr	r3, [pc, #128]	; (8005700 <ai_platform_runtime_get_revision+0xfc>)
 8005680:	6011      	str	r1, [r2, #0]
 8005682:	6812      	ldr	r2, [r2, #0]
 8005684:	429a      	cmp	r2, r3
 8005686:	d010      	beq.n	80056aa <ai_platform_runtime_get_revision+0xa6>
 8005688:	e7fe      	b.n	8005688 <ai_platform_runtime_get_revision+0x84>
 800568a:	4a1e      	ldr	r2, [pc, #120]	; (8005704 <ai_platform_runtime_get_revision+0x100>)
 800568c:	2301      	movs	r3, #1
 800568e:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8005692:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8005696:	2b00      	cmp	r3, #0
 8005698:	d1fb      	bne.n	8005692 <ai_platform_runtime_get_revision+0x8e>
 800569a:	4918      	ldr	r1, [pc, #96]	; (80056fc <ai_platform_runtime_get_revision+0xf8>)
 800569c:	4b18      	ldr	r3, [pc, #96]	; (8005700 <ai_platform_runtime_get_revision+0xfc>)
 800569e:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 80056a2:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80056a6:	429a      	cmp	r2, r3
 80056a8:	d110      	bne.n	80056cc <ai_platform_runtime_get_revision+0xc8>
 80056aa:	f7ff fedf 	bl	800546c <_ai_platform_release_crc>
 80056ae:	4816      	ldr	r0, [pc, #88]	; (8005708 <ai_platform_runtime_get_revision+0x104>)
 80056b0:	bd08      	pop	{r3, pc}
 80056b2:	4a11      	ldr	r2, [pc, #68]	; (80056f8 <ai_platform_runtime_get_revision+0xf4>)
 80056b4:	2301      	movs	r3, #1
 80056b6:	6093      	str	r3, [r2, #8]
 80056b8:	6893      	ldr	r3, [r2, #8]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d1fc      	bne.n	80056b8 <ai_platform_runtime_get_revision+0xb4>
 80056be:	490f      	ldr	r1, [pc, #60]	; (80056fc <ai_platform_runtime_get_revision+0xf8>)
 80056c0:	4b0f      	ldr	r3, [pc, #60]	; (8005700 <ai_platform_runtime_get_revision+0xfc>)
 80056c2:	6011      	str	r1, [r2, #0]
 80056c4:	6812      	ldr	r2, [r2, #0]
 80056c6:	429a      	cmp	r2, r3
 80056c8:	d0ef      	beq.n	80056aa <ai_platform_runtime_get_revision+0xa6>
 80056ca:	e7fe      	b.n	80056ca <ai_platform_runtime_get_revision+0xc6>
 80056cc:	e7fe      	b.n	80056cc <ai_platform_runtime_get_revision+0xc8>
 80056ce:	4a0d      	ldr	r2, [pc, #52]	; (8005704 <ai_platform_runtime_get_revision+0x100>)
 80056d0:	2301      	movs	r3, #1
 80056d2:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80056d6:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d1fb      	bne.n	80056d6 <ai_platform_runtime_get_revision+0xd2>
 80056de:	4907      	ldr	r1, [pc, #28]	; (80056fc <ai_platform_runtime_get_revision+0xf8>)
 80056e0:	4b07      	ldr	r3, [pc, #28]	; (8005700 <ai_platform_runtime_get_revision+0xfc>)
 80056e2:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 80056e6:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80056ea:	429a      	cmp	r2, r3
 80056ec:	d0dd      	beq.n	80056aa <ai_platform_runtime_get_revision+0xa6>
 80056ee:	e7fe      	b.n	80056ee <ai_platform_runtime_get_revision+0xea>
 80056f0:	e0042000 	.word	0xe0042000
 80056f4:	5c001000 	.word	0x5c001000
 80056f8:	40023000 	.word	0x40023000
 80056fc:	f407a5c2 	.word	0xf407a5c2
 8005700:	b5e8b5cd 	.word	0xb5e8b5cd
 8005704:	58024000 	.word	0x58024000
 8005708:	080224fc 	.word	0x080224fc

0800570c <ai_platform_runtime_get_version>:
 800570c:	b500      	push	{lr}
 800570e:	b083      	sub	sp, #12
 8005710:	f7ff feaa 	bl	8005468 <_ai_platform_acquire_crc>
 8005714:	4b42      	ldr	r3, [pc, #264]	; (8005820 <ai_platform_runtime_get_version+0x114>)
 8005716:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005720:	189a      	adds	r2, r3, r2
 8005722:	2a01      	cmp	r2, #1
 8005724:	d929      	bls.n	800577a <ai_platform_runtime_get_version+0x6e>
 8005726:	f240 4249 	movw	r2, #1097	; 0x449
 800572a:	4293      	cmp	r3, r2
 800572c:	d025      	beq.n	800577a <ai_platform_runtime_get_version+0x6e>
 800572e:	4a3d      	ldr	r2, [pc, #244]	; (8005824 <ai_platform_runtime_get_version+0x118>)
 8005730:	6813      	ldr	r3, [r2, #0]
 8005732:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005736:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800573a:	d02b      	beq.n	8005794 <ai_platform_runtime_get_version+0x88>
 800573c:	6813      	ldr	r3, [r2, #0]
 800573e:	f240 4183 	movw	r1, #1155	; 0x483
 8005742:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005746:	428b      	cmp	r3, r1
 8005748:	d059      	beq.n	80057fe <ai_platform_runtime_get_version+0xf2>
 800574a:	6813      	ldr	r3, [r2, #0]
 800574c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005750:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8005754:	d045      	beq.n	80057e2 <ai_platform_runtime_get_version+0xd6>
 8005756:	6813      	ldr	r3, [r2, #0]
 8005758:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800575c:	2b00      	cmp	r3, #0
 800575e:	d129      	bne.n	80057b4 <ai_platform_runtime_get_version+0xa8>
 8005760:	4a31      	ldr	r2, [pc, #196]	; (8005828 <ai_platform_runtime_get_version+0x11c>)
 8005762:	2301      	movs	r3, #1
 8005764:	6093      	str	r3, [r2, #8]
 8005766:	6893      	ldr	r3, [r2, #8]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d1fc      	bne.n	8005766 <ai_platform_runtime_get_version+0x5a>
 800576c:	492f      	ldr	r1, [pc, #188]	; (800582c <ai_platform_runtime_get_version+0x120>)
 800576e:	4b30      	ldr	r3, [pc, #192]	; (8005830 <ai_platform_runtime_get_version+0x124>)
 8005770:	6011      	str	r1, [r2, #0]
 8005772:	6812      	ldr	r2, [r2, #0]
 8005774:	429a      	cmp	r2, r3
 8005776:	d01d      	beq.n	80057b4 <ai_platform_runtime_get_version+0xa8>
 8005778:	e7fe      	b.n	8005778 <ai_platform_runtime_get_version+0x6c>
 800577a:	4a2b      	ldr	r2, [pc, #172]	; (8005828 <ai_platform_runtime_get_version+0x11c>)
 800577c:	2301      	movs	r3, #1
 800577e:	6093      	str	r3, [r2, #8]
 8005780:	6893      	ldr	r3, [r2, #8]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d1fc      	bne.n	8005780 <ai_platform_runtime_get_version+0x74>
 8005786:	4929      	ldr	r1, [pc, #164]	; (800582c <ai_platform_runtime_get_version+0x120>)
 8005788:	4b29      	ldr	r3, [pc, #164]	; (8005830 <ai_platform_runtime_get_version+0x124>)
 800578a:	6011      	str	r1, [r2, #0]
 800578c:	6812      	ldr	r2, [r2, #0]
 800578e:	429a      	cmp	r2, r3
 8005790:	d010      	beq.n	80057b4 <ai_platform_runtime_get_version+0xa8>
 8005792:	e7fe      	b.n	8005792 <ai_platform_runtime_get_version+0x86>
 8005794:	4a27      	ldr	r2, [pc, #156]	; (8005834 <ai_platform_runtime_get_version+0x128>)
 8005796:	2301      	movs	r3, #1
 8005798:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800579c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d1fb      	bne.n	800579c <ai_platform_runtime_get_version+0x90>
 80057a4:	4921      	ldr	r1, [pc, #132]	; (800582c <ai_platform_runtime_get_version+0x120>)
 80057a6:	4b22      	ldr	r3, [pc, #136]	; (8005830 <ai_platform_runtime_get_version+0x124>)
 80057a8:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 80057ac:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80057b0:	429a      	cmp	r2, r3
 80057b2:	d123      	bne.n	80057fc <ai_platform_runtime_get_version+0xf0>
 80057b4:	f7ff fe5a 	bl	800546c <_ai_platform_release_crc>
 80057b8:	4b1f      	ldr	r3, [pc, #124]	; (8005838 <ai_platform_runtime_get_version+0x12c>)
 80057ba:	2000      	movs	r0, #0
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	fa5f fc83 	uxtb.w	ip, r3
 80057c2:	f3c3 2107 	ubfx	r1, r3, #8, #8
 80057c6:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80057ca:	0e1b      	lsrs	r3, r3, #24
 80057cc:	f36c 0007 	bfi	r0, ip, #0, #8
 80057d0:	f361 200f 	bfi	r0, r1, #8, #8
 80057d4:	f362 4017 	bfi	r0, r2, #16, #8
 80057d8:	f363 601f 	bfi	r0, r3, #24, #8
 80057dc:	b003      	add	sp, #12
 80057de:	f85d fb04 	ldr.w	pc, [sp], #4
 80057e2:	4a11      	ldr	r2, [pc, #68]	; (8005828 <ai_platform_runtime_get_version+0x11c>)
 80057e4:	2301      	movs	r3, #1
 80057e6:	6093      	str	r3, [r2, #8]
 80057e8:	6893      	ldr	r3, [r2, #8]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d1fc      	bne.n	80057e8 <ai_platform_runtime_get_version+0xdc>
 80057ee:	490f      	ldr	r1, [pc, #60]	; (800582c <ai_platform_runtime_get_version+0x120>)
 80057f0:	4b0f      	ldr	r3, [pc, #60]	; (8005830 <ai_platform_runtime_get_version+0x124>)
 80057f2:	6011      	str	r1, [r2, #0]
 80057f4:	6812      	ldr	r2, [r2, #0]
 80057f6:	429a      	cmp	r2, r3
 80057f8:	d0dc      	beq.n	80057b4 <ai_platform_runtime_get_version+0xa8>
 80057fa:	e7fe      	b.n	80057fa <ai_platform_runtime_get_version+0xee>
 80057fc:	e7fe      	b.n	80057fc <ai_platform_runtime_get_version+0xf0>
 80057fe:	4a0d      	ldr	r2, [pc, #52]	; (8005834 <ai_platform_runtime_get_version+0x128>)
 8005800:	2301      	movs	r3, #1
 8005802:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8005806:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800580a:	2b00      	cmp	r3, #0
 800580c:	d1fb      	bne.n	8005806 <ai_platform_runtime_get_version+0xfa>
 800580e:	4907      	ldr	r1, [pc, #28]	; (800582c <ai_platform_runtime_get_version+0x120>)
 8005810:	4b07      	ldr	r3, [pc, #28]	; (8005830 <ai_platform_runtime_get_version+0x124>)
 8005812:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8005816:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800581a:	429a      	cmp	r2, r3
 800581c:	d0ca      	beq.n	80057b4 <ai_platform_runtime_get_version+0xa8>
 800581e:	e7fe      	b.n	800581e <ai_platform_runtime_get_version+0x112>
 8005820:	e0042000 	.word	0xe0042000
 8005824:	5c001000 	.word	0x5c001000
 8005828:	40023000 	.word	0x40023000
 800582c:	f407a5c2 	.word	0xf407a5c2
 8005830:	b5e8b5cd 	.word	0xb5e8b5cd
 8005834:	58024000 	.word	0x58024000
 8005838:	080224b0 	.word	0x080224b0

0800583c <ai_platform_api_get_version>:
 800583c:	b500      	push	{lr}
 800583e:	b083      	sub	sp, #12
 8005840:	f7ff fe12 	bl	8005468 <_ai_platform_acquire_crc>
 8005844:	4b42      	ldr	r3, [pc, #264]	; (8005950 <ai_platform_api_get_version+0x114>)
 8005846:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005850:	189a      	adds	r2, r3, r2
 8005852:	2a01      	cmp	r2, #1
 8005854:	d929      	bls.n	80058aa <ai_platform_api_get_version+0x6e>
 8005856:	f240 4249 	movw	r2, #1097	; 0x449
 800585a:	4293      	cmp	r3, r2
 800585c:	d025      	beq.n	80058aa <ai_platform_api_get_version+0x6e>
 800585e:	4a3d      	ldr	r2, [pc, #244]	; (8005954 <ai_platform_api_get_version+0x118>)
 8005860:	6813      	ldr	r3, [r2, #0]
 8005862:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005866:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800586a:	d02b      	beq.n	80058c4 <ai_platform_api_get_version+0x88>
 800586c:	6813      	ldr	r3, [r2, #0]
 800586e:	f240 4183 	movw	r1, #1155	; 0x483
 8005872:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005876:	428b      	cmp	r3, r1
 8005878:	d059      	beq.n	800592e <ai_platform_api_get_version+0xf2>
 800587a:	6813      	ldr	r3, [r2, #0]
 800587c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005880:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8005884:	d045      	beq.n	8005912 <ai_platform_api_get_version+0xd6>
 8005886:	6813      	ldr	r3, [r2, #0]
 8005888:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800588c:	2b00      	cmp	r3, #0
 800588e:	d129      	bne.n	80058e4 <ai_platform_api_get_version+0xa8>
 8005890:	4a31      	ldr	r2, [pc, #196]	; (8005958 <ai_platform_api_get_version+0x11c>)
 8005892:	2301      	movs	r3, #1
 8005894:	6093      	str	r3, [r2, #8]
 8005896:	6893      	ldr	r3, [r2, #8]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d1fc      	bne.n	8005896 <ai_platform_api_get_version+0x5a>
 800589c:	492f      	ldr	r1, [pc, #188]	; (800595c <ai_platform_api_get_version+0x120>)
 800589e:	4b30      	ldr	r3, [pc, #192]	; (8005960 <ai_platform_api_get_version+0x124>)
 80058a0:	6011      	str	r1, [r2, #0]
 80058a2:	6812      	ldr	r2, [r2, #0]
 80058a4:	429a      	cmp	r2, r3
 80058a6:	d01d      	beq.n	80058e4 <ai_platform_api_get_version+0xa8>
 80058a8:	e7fe      	b.n	80058a8 <ai_platform_api_get_version+0x6c>
 80058aa:	4a2b      	ldr	r2, [pc, #172]	; (8005958 <ai_platform_api_get_version+0x11c>)
 80058ac:	2301      	movs	r3, #1
 80058ae:	6093      	str	r3, [r2, #8]
 80058b0:	6893      	ldr	r3, [r2, #8]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d1fc      	bne.n	80058b0 <ai_platform_api_get_version+0x74>
 80058b6:	4929      	ldr	r1, [pc, #164]	; (800595c <ai_platform_api_get_version+0x120>)
 80058b8:	4b29      	ldr	r3, [pc, #164]	; (8005960 <ai_platform_api_get_version+0x124>)
 80058ba:	6011      	str	r1, [r2, #0]
 80058bc:	6812      	ldr	r2, [r2, #0]
 80058be:	429a      	cmp	r2, r3
 80058c0:	d010      	beq.n	80058e4 <ai_platform_api_get_version+0xa8>
 80058c2:	e7fe      	b.n	80058c2 <ai_platform_api_get_version+0x86>
 80058c4:	4a27      	ldr	r2, [pc, #156]	; (8005964 <ai_platform_api_get_version+0x128>)
 80058c6:	2301      	movs	r3, #1
 80058c8:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80058cc:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d1fb      	bne.n	80058cc <ai_platform_api_get_version+0x90>
 80058d4:	4921      	ldr	r1, [pc, #132]	; (800595c <ai_platform_api_get_version+0x120>)
 80058d6:	4b22      	ldr	r3, [pc, #136]	; (8005960 <ai_platform_api_get_version+0x124>)
 80058d8:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 80058dc:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80058e0:	429a      	cmp	r2, r3
 80058e2:	d123      	bne.n	800592c <ai_platform_api_get_version+0xf0>
 80058e4:	f7ff fdc2 	bl	800546c <_ai_platform_release_crc>
 80058e8:	4b1f      	ldr	r3, [pc, #124]	; (8005968 <ai_platform_api_get_version+0x12c>)
 80058ea:	2000      	movs	r0, #0
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	fa5f fc83 	uxtb.w	ip, r3
 80058f2:	f3c3 2107 	ubfx	r1, r3, #8, #8
 80058f6:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80058fa:	0e1b      	lsrs	r3, r3, #24
 80058fc:	f36c 0007 	bfi	r0, ip, #0, #8
 8005900:	f361 200f 	bfi	r0, r1, #8, #8
 8005904:	f362 4017 	bfi	r0, r2, #16, #8
 8005908:	f363 601f 	bfi	r0, r3, #24, #8
 800590c:	b003      	add	sp, #12
 800590e:	f85d fb04 	ldr.w	pc, [sp], #4
 8005912:	4a11      	ldr	r2, [pc, #68]	; (8005958 <ai_platform_api_get_version+0x11c>)
 8005914:	2301      	movs	r3, #1
 8005916:	6093      	str	r3, [r2, #8]
 8005918:	6893      	ldr	r3, [r2, #8]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d1fc      	bne.n	8005918 <ai_platform_api_get_version+0xdc>
 800591e:	490f      	ldr	r1, [pc, #60]	; (800595c <ai_platform_api_get_version+0x120>)
 8005920:	4b0f      	ldr	r3, [pc, #60]	; (8005960 <ai_platform_api_get_version+0x124>)
 8005922:	6011      	str	r1, [r2, #0]
 8005924:	6812      	ldr	r2, [r2, #0]
 8005926:	429a      	cmp	r2, r3
 8005928:	d0dc      	beq.n	80058e4 <ai_platform_api_get_version+0xa8>
 800592a:	e7fe      	b.n	800592a <ai_platform_api_get_version+0xee>
 800592c:	e7fe      	b.n	800592c <ai_platform_api_get_version+0xf0>
 800592e:	4a0d      	ldr	r2, [pc, #52]	; (8005964 <ai_platform_api_get_version+0x128>)
 8005930:	2301      	movs	r3, #1
 8005932:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8005936:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800593a:	2b00      	cmp	r3, #0
 800593c:	d1fb      	bne.n	8005936 <ai_platform_api_get_version+0xfa>
 800593e:	4907      	ldr	r1, [pc, #28]	; (800595c <ai_platform_api_get_version+0x120>)
 8005940:	4b07      	ldr	r3, [pc, #28]	; (8005960 <ai_platform_api_get_version+0x124>)
 8005942:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8005946:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800594a:	429a      	cmp	r2, r3
 800594c:	d0ca      	beq.n	80058e4 <ai_platform_api_get_version+0xa8>
 800594e:	e7fe      	b.n	800594e <ai_platform_api_get_version+0x112>
 8005950:	e0042000 	.word	0xe0042000
 8005954:	5c001000 	.word	0x5c001000
 8005958:	40023000 	.word	0x40023000
 800595c:	f407a5c2 	.word	0xf407a5c2
 8005960:	b5e8b5cd 	.word	0xb5e8b5cd
 8005964:	58024000 	.word	0x58024000
 8005968:	080224b4 	.word	0x080224b4

0800596c <ai_platform_interface_api_get_version>:
 800596c:	b500      	push	{lr}
 800596e:	b083      	sub	sp, #12
 8005970:	f7ff fd7a 	bl	8005468 <_ai_platform_acquire_crc>
 8005974:	4b42      	ldr	r3, [pc, #264]	; (8005a80 <ai_platform_interface_api_get_version+0x114>)
 8005976:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005980:	189a      	adds	r2, r3, r2
 8005982:	2a01      	cmp	r2, #1
 8005984:	d929      	bls.n	80059da <ai_platform_interface_api_get_version+0x6e>
 8005986:	f240 4249 	movw	r2, #1097	; 0x449
 800598a:	4293      	cmp	r3, r2
 800598c:	d025      	beq.n	80059da <ai_platform_interface_api_get_version+0x6e>
 800598e:	4a3d      	ldr	r2, [pc, #244]	; (8005a84 <ai_platform_interface_api_get_version+0x118>)
 8005990:	6813      	ldr	r3, [r2, #0]
 8005992:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005996:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800599a:	d02b      	beq.n	80059f4 <ai_platform_interface_api_get_version+0x88>
 800599c:	6813      	ldr	r3, [r2, #0]
 800599e:	f240 4183 	movw	r1, #1155	; 0x483
 80059a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80059a6:	428b      	cmp	r3, r1
 80059a8:	d059      	beq.n	8005a5e <ai_platform_interface_api_get_version+0xf2>
 80059aa:	6813      	ldr	r3, [r2, #0]
 80059ac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80059b0:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 80059b4:	d045      	beq.n	8005a42 <ai_platform_interface_api_get_version+0xd6>
 80059b6:	6813      	ldr	r3, [r2, #0]
 80059b8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d129      	bne.n	8005a14 <ai_platform_interface_api_get_version+0xa8>
 80059c0:	4a31      	ldr	r2, [pc, #196]	; (8005a88 <ai_platform_interface_api_get_version+0x11c>)
 80059c2:	2301      	movs	r3, #1
 80059c4:	6093      	str	r3, [r2, #8]
 80059c6:	6893      	ldr	r3, [r2, #8]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d1fc      	bne.n	80059c6 <ai_platform_interface_api_get_version+0x5a>
 80059cc:	492f      	ldr	r1, [pc, #188]	; (8005a8c <ai_platform_interface_api_get_version+0x120>)
 80059ce:	4b30      	ldr	r3, [pc, #192]	; (8005a90 <ai_platform_interface_api_get_version+0x124>)
 80059d0:	6011      	str	r1, [r2, #0]
 80059d2:	6812      	ldr	r2, [r2, #0]
 80059d4:	429a      	cmp	r2, r3
 80059d6:	d01d      	beq.n	8005a14 <ai_platform_interface_api_get_version+0xa8>
 80059d8:	e7fe      	b.n	80059d8 <ai_platform_interface_api_get_version+0x6c>
 80059da:	4a2b      	ldr	r2, [pc, #172]	; (8005a88 <ai_platform_interface_api_get_version+0x11c>)
 80059dc:	2301      	movs	r3, #1
 80059de:	6093      	str	r3, [r2, #8]
 80059e0:	6893      	ldr	r3, [r2, #8]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d1fc      	bne.n	80059e0 <ai_platform_interface_api_get_version+0x74>
 80059e6:	4929      	ldr	r1, [pc, #164]	; (8005a8c <ai_platform_interface_api_get_version+0x120>)
 80059e8:	4b29      	ldr	r3, [pc, #164]	; (8005a90 <ai_platform_interface_api_get_version+0x124>)
 80059ea:	6011      	str	r1, [r2, #0]
 80059ec:	6812      	ldr	r2, [r2, #0]
 80059ee:	429a      	cmp	r2, r3
 80059f0:	d010      	beq.n	8005a14 <ai_platform_interface_api_get_version+0xa8>
 80059f2:	e7fe      	b.n	80059f2 <ai_platform_interface_api_get_version+0x86>
 80059f4:	4a27      	ldr	r2, [pc, #156]	; (8005a94 <ai_platform_interface_api_get_version+0x128>)
 80059f6:	2301      	movs	r3, #1
 80059f8:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80059fc:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d1fb      	bne.n	80059fc <ai_platform_interface_api_get_version+0x90>
 8005a04:	4921      	ldr	r1, [pc, #132]	; (8005a8c <ai_platform_interface_api_get_version+0x120>)
 8005a06:	4b22      	ldr	r3, [pc, #136]	; (8005a90 <ai_platform_interface_api_get_version+0x124>)
 8005a08:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8005a0c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8005a10:	429a      	cmp	r2, r3
 8005a12:	d123      	bne.n	8005a5c <ai_platform_interface_api_get_version+0xf0>
 8005a14:	f7ff fd2a 	bl	800546c <_ai_platform_release_crc>
 8005a18:	4b1f      	ldr	r3, [pc, #124]	; (8005a98 <ai_platform_interface_api_get_version+0x12c>)
 8005a1a:	2000      	movs	r0, #0
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	fa5f fc83 	uxtb.w	ip, r3
 8005a22:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8005a26:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8005a2a:	0e1b      	lsrs	r3, r3, #24
 8005a2c:	f36c 0007 	bfi	r0, ip, #0, #8
 8005a30:	f361 200f 	bfi	r0, r1, #8, #8
 8005a34:	f362 4017 	bfi	r0, r2, #16, #8
 8005a38:	f363 601f 	bfi	r0, r3, #24, #8
 8005a3c:	b003      	add	sp, #12
 8005a3e:	f85d fb04 	ldr.w	pc, [sp], #4
 8005a42:	4a11      	ldr	r2, [pc, #68]	; (8005a88 <ai_platform_interface_api_get_version+0x11c>)
 8005a44:	2301      	movs	r3, #1
 8005a46:	6093      	str	r3, [r2, #8]
 8005a48:	6893      	ldr	r3, [r2, #8]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d1fc      	bne.n	8005a48 <ai_platform_interface_api_get_version+0xdc>
 8005a4e:	490f      	ldr	r1, [pc, #60]	; (8005a8c <ai_platform_interface_api_get_version+0x120>)
 8005a50:	4b0f      	ldr	r3, [pc, #60]	; (8005a90 <ai_platform_interface_api_get_version+0x124>)
 8005a52:	6011      	str	r1, [r2, #0]
 8005a54:	6812      	ldr	r2, [r2, #0]
 8005a56:	429a      	cmp	r2, r3
 8005a58:	d0dc      	beq.n	8005a14 <ai_platform_interface_api_get_version+0xa8>
 8005a5a:	e7fe      	b.n	8005a5a <ai_platform_interface_api_get_version+0xee>
 8005a5c:	e7fe      	b.n	8005a5c <ai_platform_interface_api_get_version+0xf0>
 8005a5e:	4a0d      	ldr	r2, [pc, #52]	; (8005a94 <ai_platform_interface_api_get_version+0x128>)
 8005a60:	2301      	movs	r3, #1
 8005a62:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8005a66:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d1fb      	bne.n	8005a66 <ai_platform_interface_api_get_version+0xfa>
 8005a6e:	4907      	ldr	r1, [pc, #28]	; (8005a8c <ai_platform_interface_api_get_version+0x120>)
 8005a70:	4b07      	ldr	r3, [pc, #28]	; (8005a90 <ai_platform_interface_api_get_version+0x124>)
 8005a72:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8005a76:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8005a7a:	429a      	cmp	r2, r3
 8005a7c:	d0ca      	beq.n	8005a14 <ai_platform_interface_api_get_version+0xa8>
 8005a7e:	e7fe      	b.n	8005a7e <ai_platform_interface_api_get_version+0x112>
 8005a80:	e0042000 	.word	0xe0042000
 8005a84:	5c001000 	.word	0x5c001000
 8005a88:	40023000 	.word	0x40023000
 8005a8c:	f407a5c2 	.word	0xf407a5c2
 8005a90:	b5e8b5cd 	.word	0xb5e8b5cd
 8005a94:	58024000 	.word	0x58024000
 8005a98:	080224b8 	.word	0x080224b8

08005a9c <ai_platform_context_acquire>:
 8005a9c:	b510      	push	{r4, lr}
 8005a9e:	4604      	mov	r4, r0
 8005aa0:	b120      	cbz	r0, 8005aac <ai_platform_context_acquire+0x10>
 8005aa2:	4b3d      	ldr	r3, [pc, #244]	; (8005b98 <ai_platform_context_acquire+0xfc>)
 8005aa4:	6802      	ldr	r2, [r0, #0]
 8005aa6:	429a      	cmp	r2, r3
 8005aa8:	bf18      	it	ne
 8005aaa:	2400      	movne	r4, #0
 8005aac:	f7ff fcdc 	bl	8005468 <_ai_platform_acquire_crc>
 8005ab0:	4b3a      	ldr	r3, [pc, #232]	; (8005b9c <ai_platform_context_acquire+0x100>)
 8005ab2:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005abc:	189a      	adds	r2, r3, r2
 8005abe:	2a01      	cmp	r2, #1
 8005ac0:	d929      	bls.n	8005b16 <ai_platform_context_acquire+0x7a>
 8005ac2:	f240 4249 	movw	r2, #1097	; 0x449
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d025      	beq.n	8005b16 <ai_platform_context_acquire+0x7a>
 8005aca:	4a35      	ldr	r2, [pc, #212]	; (8005ba0 <ai_platform_context_acquire+0x104>)
 8005acc:	6813      	ldr	r3, [r2, #0]
 8005ace:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005ad2:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8005ad6:	d02b      	beq.n	8005b30 <ai_platform_context_acquire+0x94>
 8005ad8:	6813      	ldr	r3, [r2, #0]
 8005ada:	f240 4183 	movw	r1, #1155	; 0x483
 8005ade:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005ae2:	428b      	cmp	r3, r1
 8005ae4:	d046      	beq.n	8005b74 <ai_platform_context_acquire+0xd8>
 8005ae6:	6813      	ldr	r3, [r2, #0]
 8005ae8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005aec:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8005af0:	d033      	beq.n	8005b5a <ai_platform_context_acquire+0xbe>
 8005af2:	6813      	ldr	r3, [r2, #0]
 8005af4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d129      	bne.n	8005b50 <ai_platform_context_acquire+0xb4>
 8005afc:	4a29      	ldr	r2, [pc, #164]	; (8005ba4 <ai_platform_context_acquire+0x108>)
 8005afe:	2301      	movs	r3, #1
 8005b00:	6093      	str	r3, [r2, #8]
 8005b02:	6893      	ldr	r3, [r2, #8]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d1fc      	bne.n	8005b02 <ai_platform_context_acquire+0x66>
 8005b08:	4927      	ldr	r1, [pc, #156]	; (8005ba8 <ai_platform_context_acquire+0x10c>)
 8005b0a:	4b28      	ldr	r3, [pc, #160]	; (8005bac <ai_platform_context_acquire+0x110>)
 8005b0c:	6011      	str	r1, [r2, #0]
 8005b0e:	6812      	ldr	r2, [r2, #0]
 8005b10:	429a      	cmp	r2, r3
 8005b12:	d01d      	beq.n	8005b50 <ai_platform_context_acquire+0xb4>
 8005b14:	e7fe      	b.n	8005b14 <ai_platform_context_acquire+0x78>
 8005b16:	4a23      	ldr	r2, [pc, #140]	; (8005ba4 <ai_platform_context_acquire+0x108>)
 8005b18:	2301      	movs	r3, #1
 8005b1a:	6093      	str	r3, [r2, #8]
 8005b1c:	6893      	ldr	r3, [r2, #8]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d1fc      	bne.n	8005b1c <ai_platform_context_acquire+0x80>
 8005b22:	4921      	ldr	r1, [pc, #132]	; (8005ba8 <ai_platform_context_acquire+0x10c>)
 8005b24:	4b21      	ldr	r3, [pc, #132]	; (8005bac <ai_platform_context_acquire+0x110>)
 8005b26:	6011      	str	r1, [r2, #0]
 8005b28:	6812      	ldr	r2, [r2, #0]
 8005b2a:	429a      	cmp	r2, r3
 8005b2c:	d010      	beq.n	8005b50 <ai_platform_context_acquire+0xb4>
 8005b2e:	e7fe      	b.n	8005b2e <ai_platform_context_acquire+0x92>
 8005b30:	4a1f      	ldr	r2, [pc, #124]	; (8005bb0 <ai_platform_context_acquire+0x114>)
 8005b32:	2301      	movs	r3, #1
 8005b34:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8005b38:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d1fb      	bne.n	8005b38 <ai_platform_context_acquire+0x9c>
 8005b40:	4919      	ldr	r1, [pc, #100]	; (8005ba8 <ai_platform_context_acquire+0x10c>)
 8005b42:	4b1a      	ldr	r3, [pc, #104]	; (8005bac <ai_platform_context_acquire+0x110>)
 8005b44:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8005b48:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8005b4c:	429a      	cmp	r2, r3
 8005b4e:	d103      	bne.n	8005b58 <ai_platform_context_acquire+0xbc>
 8005b50:	f7ff fc8c 	bl	800546c <_ai_platform_release_crc>
 8005b54:	4620      	mov	r0, r4
 8005b56:	bd10      	pop	{r4, pc}
 8005b58:	e7fe      	b.n	8005b58 <ai_platform_context_acquire+0xbc>
 8005b5a:	4a12      	ldr	r2, [pc, #72]	; (8005ba4 <ai_platform_context_acquire+0x108>)
 8005b5c:	2301      	movs	r3, #1
 8005b5e:	6093      	str	r3, [r2, #8]
 8005b60:	6893      	ldr	r3, [r2, #8]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d1fc      	bne.n	8005b60 <ai_platform_context_acquire+0xc4>
 8005b66:	4910      	ldr	r1, [pc, #64]	; (8005ba8 <ai_platform_context_acquire+0x10c>)
 8005b68:	4b10      	ldr	r3, [pc, #64]	; (8005bac <ai_platform_context_acquire+0x110>)
 8005b6a:	6011      	str	r1, [r2, #0]
 8005b6c:	6812      	ldr	r2, [r2, #0]
 8005b6e:	429a      	cmp	r2, r3
 8005b70:	d0ee      	beq.n	8005b50 <ai_platform_context_acquire+0xb4>
 8005b72:	e7fe      	b.n	8005b72 <ai_platform_context_acquire+0xd6>
 8005b74:	4a0e      	ldr	r2, [pc, #56]	; (8005bb0 <ai_platform_context_acquire+0x114>)
 8005b76:	2301      	movs	r3, #1
 8005b78:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8005b7c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d1fb      	bne.n	8005b7c <ai_platform_context_acquire+0xe0>
 8005b84:	4908      	ldr	r1, [pc, #32]	; (8005ba8 <ai_platform_context_acquire+0x10c>)
 8005b86:	4b09      	ldr	r3, [pc, #36]	; (8005bac <ai_platform_context_acquire+0x110>)
 8005b88:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8005b8c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8005b90:	429a      	cmp	r2, r3
 8005b92:	d0dd      	beq.n	8005b50 <ai_platform_context_acquire+0xb4>
 8005b94:	e7fe      	b.n	8005b94 <ai_platform_context_acquire+0xf8>
 8005b96:	bf00      	nop
 8005b98:	a1c00100 	.word	0xa1c00100
 8005b9c:	e0042000 	.word	0xe0042000
 8005ba0:	5c001000 	.word	0x5c001000
 8005ba4:	40023000 	.word	0x40023000
 8005ba8:	f407a5c2 	.word	0xf407a5c2
 8005bac:	b5e8b5cd 	.word	0xb5e8b5cd
 8005bb0:	58024000 	.word	0x58024000

08005bb4 <ai_platform_network_get_error>:
 8005bb4:	b510      	push	{r4, lr}
 8005bb6:	2800      	cmp	r0, #0
 8005bb8:	d03f      	beq.n	8005c3a <ai_platform_network_get_error+0x86>
 8005bba:	4b7d      	ldr	r3, [pc, #500]	; (8005db0 <ai_platform_network_get_error+0x1fc>)
 8005bbc:	4604      	mov	r4, r0
 8005bbe:	6802      	ldr	r2, [r0, #0]
 8005bc0:	429a      	cmp	r2, r3
 8005bc2:	d13a      	bne.n	8005c3a <ai_platform_network_get_error+0x86>
 8005bc4:	f7ff fc50 	bl	8005468 <_ai_platform_acquire_crc>
 8005bc8:	4b7a      	ldr	r3, [pc, #488]	; (8005db4 <ai_platform_network_get_error+0x200>)
 8005bca:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005bd4:	189a      	adds	r2, r3, r2
 8005bd6:	2a01      	cmp	r2, #1
 8005bd8:	f240 8086 	bls.w	8005ce8 <ai_platform_network_get_error+0x134>
 8005bdc:	f240 4249 	movw	r2, #1097	; 0x449
 8005be0:	4293      	cmp	r3, r2
 8005be2:	f000 8081 	beq.w	8005ce8 <ai_platform_network_get_error+0x134>
 8005be6:	4a74      	ldr	r2, [pc, #464]	; (8005db8 <ai_platform_network_get_error+0x204>)
 8005be8:	6813      	ldr	r3, [r2, #0]
 8005bea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005bee:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8005bf2:	f000 8087 	beq.w	8005d04 <ai_platform_network_get_error+0x150>
 8005bf6:	6813      	ldr	r3, [r2, #0]
 8005bf8:	f240 4183 	movw	r1, #1155	; 0x483
 8005bfc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005c00:	428b      	cmp	r3, r1
 8005c02:	f000 80a9 	beq.w	8005d58 <ai_platform_network_get_error+0x1a4>
 8005c06:	6813      	ldr	r3, [r2, #0]
 8005c08:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005c0c:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8005c10:	f000 80c0 	beq.w	8005d94 <ai_platform_network_get_error+0x1e0>
 8005c14:	6813      	ldr	r3, [r2, #0]
 8005c16:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	f040 8082 	bne.w	8005d24 <ai_platform_network_get_error+0x170>
 8005c20:	4a66      	ldr	r2, [pc, #408]	; (8005dbc <ai_platform_network_get_error+0x208>)
 8005c22:	2301      	movs	r3, #1
 8005c24:	6093      	str	r3, [r2, #8]
 8005c26:	6893      	ldr	r3, [r2, #8]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d1fc      	bne.n	8005c26 <ai_platform_network_get_error+0x72>
 8005c2c:	4964      	ldr	r1, [pc, #400]	; (8005dc0 <ai_platform_network_get_error+0x20c>)
 8005c2e:	4b65      	ldr	r3, [pc, #404]	; (8005dc4 <ai_platform_network_get_error+0x210>)
 8005c30:	6011      	str	r1, [r2, #0]
 8005c32:	6812      	ldr	r2, [r2, #0]
 8005c34:	429a      	cmp	r2, r3
 8005c36:	d075      	beq.n	8005d24 <ai_platform_network_get_error+0x170>
 8005c38:	e7fe      	b.n	8005c38 <ai_platform_network_get_error+0x84>
 8005c3a:	f7ff fc15 	bl	8005468 <_ai_platform_acquire_crc>
 8005c3e:	4b5d      	ldr	r3, [pc, #372]	; (8005db4 <ai_platform_network_get_error+0x200>)
 8005c40:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005c4a:	185a      	adds	r2, r3, r1
 8005c4c:	2a01      	cmp	r2, #1
 8005c4e:	d929      	bls.n	8005ca4 <ai_platform_network_get_error+0xf0>
 8005c50:	f240 4249 	movw	r2, #1097	; 0x449
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d025      	beq.n	8005ca4 <ai_platform_network_get_error+0xf0>
 8005c58:	4a57      	ldr	r2, [pc, #348]	; (8005db8 <ai_platform_network_get_error+0x204>)
 8005c5a:	6813      	ldr	r3, [r2, #0]
 8005c5c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005c60:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8005c64:	d02b      	beq.n	8005cbe <ai_platform_network_get_error+0x10a>
 8005c66:	6813      	ldr	r3, [r2, #0]
 8005c68:	f240 4183 	movw	r1, #1155	; 0x483
 8005c6c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005c70:	428b      	cmp	r3, r1
 8005c72:	d060      	beq.n	8005d36 <ai_platform_network_get_error+0x182>
 8005c74:	6813      	ldr	r3, [r2, #0]
 8005c76:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005c7a:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8005c7e:	d07c      	beq.n	8005d7a <ai_platform_network_get_error+0x1c6>
 8005c80:	6813      	ldr	r3, [r2, #0]
 8005c82:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d129      	bne.n	8005cde <ai_platform_network_get_error+0x12a>
 8005c8a:	4a4c      	ldr	r2, [pc, #304]	; (8005dbc <ai_platform_network_get_error+0x208>)
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	6093      	str	r3, [r2, #8]
 8005c90:	6893      	ldr	r3, [r2, #8]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d1fc      	bne.n	8005c90 <ai_platform_network_get_error+0xdc>
 8005c96:	494a      	ldr	r1, [pc, #296]	; (8005dc0 <ai_platform_network_get_error+0x20c>)
 8005c98:	4b4a      	ldr	r3, [pc, #296]	; (8005dc4 <ai_platform_network_get_error+0x210>)
 8005c9a:	6011      	str	r1, [r2, #0]
 8005c9c:	6812      	ldr	r2, [r2, #0]
 8005c9e:	429a      	cmp	r2, r3
 8005ca0:	d01d      	beq.n	8005cde <ai_platform_network_get_error+0x12a>
 8005ca2:	e7fe      	b.n	8005ca2 <ai_platform_network_get_error+0xee>
 8005ca4:	4a45      	ldr	r2, [pc, #276]	; (8005dbc <ai_platform_network_get_error+0x208>)
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	6093      	str	r3, [r2, #8]
 8005caa:	6893      	ldr	r3, [r2, #8]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d1fc      	bne.n	8005caa <ai_platform_network_get_error+0xf6>
 8005cb0:	4943      	ldr	r1, [pc, #268]	; (8005dc0 <ai_platform_network_get_error+0x20c>)
 8005cb2:	4b44      	ldr	r3, [pc, #272]	; (8005dc4 <ai_platform_network_get_error+0x210>)
 8005cb4:	6011      	str	r1, [r2, #0]
 8005cb6:	6812      	ldr	r2, [r2, #0]
 8005cb8:	429a      	cmp	r2, r3
 8005cba:	d010      	beq.n	8005cde <ai_platform_network_get_error+0x12a>
 8005cbc:	e7fe      	b.n	8005cbc <ai_platform_network_get_error+0x108>
 8005cbe:	4a42      	ldr	r2, [pc, #264]	; (8005dc8 <ai_platform_network_get_error+0x214>)
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8005cc6:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d1fb      	bne.n	8005cc6 <ai_platform_network_get_error+0x112>
 8005cce:	493c      	ldr	r1, [pc, #240]	; (8005dc0 <ai_platform_network_get_error+0x20c>)
 8005cd0:	4b3c      	ldr	r3, [pc, #240]	; (8005dc4 <ai_platform_network_get_error+0x210>)
 8005cd2:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8005cd6:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8005cda:	429a      	cmp	r2, r3
 8005cdc:	d111      	bne.n	8005d02 <ai_platform_network_get_error+0x14e>
 8005cde:	f7ff fbc5 	bl	800546c <_ai_platform_release_crc>
 8005ce2:	f241 0010 	movw	r0, #4112	; 0x1010
 8005ce6:	bd10      	pop	{r4, pc}
 8005ce8:	4a34      	ldr	r2, [pc, #208]	; (8005dbc <ai_platform_network_get_error+0x208>)
 8005cea:	2301      	movs	r3, #1
 8005cec:	6093      	str	r3, [r2, #8]
 8005cee:	6893      	ldr	r3, [r2, #8]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d1fc      	bne.n	8005cee <ai_platform_network_get_error+0x13a>
 8005cf4:	4932      	ldr	r1, [pc, #200]	; (8005dc0 <ai_platform_network_get_error+0x20c>)
 8005cf6:	4b33      	ldr	r3, [pc, #204]	; (8005dc4 <ai_platform_network_get_error+0x210>)
 8005cf8:	6011      	str	r1, [r2, #0]
 8005cfa:	6812      	ldr	r2, [r2, #0]
 8005cfc:	429a      	cmp	r2, r3
 8005cfe:	d011      	beq.n	8005d24 <ai_platform_network_get_error+0x170>
 8005d00:	e7fe      	b.n	8005d00 <ai_platform_network_get_error+0x14c>
 8005d02:	e7fe      	b.n	8005d02 <ai_platform_network_get_error+0x14e>
 8005d04:	4a30      	ldr	r2, [pc, #192]	; (8005dc8 <ai_platform_network_get_error+0x214>)
 8005d06:	2301      	movs	r3, #1
 8005d08:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8005d0c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d1fb      	bne.n	8005d0c <ai_platform_network_get_error+0x158>
 8005d14:	492a      	ldr	r1, [pc, #168]	; (8005dc0 <ai_platform_network_get_error+0x20c>)
 8005d16:	4b2b      	ldr	r3, [pc, #172]	; (8005dc4 <ai_platform_network_get_error+0x210>)
 8005d18:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8005d1c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8005d20:	429a      	cmp	r2, r3
 8005d22:	d107      	bne.n	8005d34 <ai_platform_network_get_error+0x180>
 8005d24:	f7ff fba2 	bl	800546c <_ai_platform_release_crc>
 8005d28:	f104 0010 	add.w	r0, r4, #16
 8005d2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d30:	f002 b832 	b.w	8007d98 <core_get_error>
 8005d34:	e7fe      	b.n	8005d34 <ai_platform_network_get_error+0x180>
 8005d36:	4a24      	ldr	r2, [pc, #144]	; (8005dc8 <ai_platform_network_get_error+0x214>)
 8005d38:	2301      	movs	r3, #1
 8005d3a:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8005d3e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d1fb      	bne.n	8005d3e <ai_platform_network_get_error+0x18a>
 8005d46:	491e      	ldr	r1, [pc, #120]	; (8005dc0 <ai_platform_network_get_error+0x20c>)
 8005d48:	4b1e      	ldr	r3, [pc, #120]	; (8005dc4 <ai_platform_network_get_error+0x210>)
 8005d4a:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8005d4e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8005d52:	429a      	cmp	r2, r3
 8005d54:	d0c3      	beq.n	8005cde <ai_platform_network_get_error+0x12a>
 8005d56:	e7fe      	b.n	8005d56 <ai_platform_network_get_error+0x1a2>
 8005d58:	4a1b      	ldr	r2, [pc, #108]	; (8005dc8 <ai_platform_network_get_error+0x214>)
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8005d60:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d1fb      	bne.n	8005d60 <ai_platform_network_get_error+0x1ac>
 8005d68:	4915      	ldr	r1, [pc, #84]	; (8005dc0 <ai_platform_network_get_error+0x20c>)
 8005d6a:	4b16      	ldr	r3, [pc, #88]	; (8005dc4 <ai_platform_network_get_error+0x210>)
 8005d6c:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8005d70:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8005d74:	429a      	cmp	r2, r3
 8005d76:	d0d5      	beq.n	8005d24 <ai_platform_network_get_error+0x170>
 8005d78:	e7fe      	b.n	8005d78 <ai_platform_network_get_error+0x1c4>
 8005d7a:	4a10      	ldr	r2, [pc, #64]	; (8005dbc <ai_platform_network_get_error+0x208>)
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	6093      	str	r3, [r2, #8]
 8005d80:	6893      	ldr	r3, [r2, #8]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d1fc      	bne.n	8005d80 <ai_platform_network_get_error+0x1cc>
 8005d86:	490e      	ldr	r1, [pc, #56]	; (8005dc0 <ai_platform_network_get_error+0x20c>)
 8005d88:	4b0e      	ldr	r3, [pc, #56]	; (8005dc4 <ai_platform_network_get_error+0x210>)
 8005d8a:	6011      	str	r1, [r2, #0]
 8005d8c:	6812      	ldr	r2, [r2, #0]
 8005d8e:	429a      	cmp	r2, r3
 8005d90:	d0a5      	beq.n	8005cde <ai_platform_network_get_error+0x12a>
 8005d92:	e7fe      	b.n	8005d92 <ai_platform_network_get_error+0x1de>
 8005d94:	4a09      	ldr	r2, [pc, #36]	; (8005dbc <ai_platform_network_get_error+0x208>)
 8005d96:	2301      	movs	r3, #1
 8005d98:	6093      	str	r3, [r2, #8]
 8005d9a:	6893      	ldr	r3, [r2, #8]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d1fc      	bne.n	8005d9a <ai_platform_network_get_error+0x1e6>
 8005da0:	4907      	ldr	r1, [pc, #28]	; (8005dc0 <ai_platform_network_get_error+0x20c>)
 8005da2:	4b08      	ldr	r3, [pc, #32]	; (8005dc4 <ai_platform_network_get_error+0x210>)
 8005da4:	6011      	str	r1, [r2, #0]
 8005da6:	6812      	ldr	r2, [r2, #0]
 8005da8:	429a      	cmp	r2, r3
 8005daa:	d0bb      	beq.n	8005d24 <ai_platform_network_get_error+0x170>
 8005dac:	e7fe      	b.n	8005dac <ai_platform_network_get_error+0x1f8>
 8005dae:	bf00      	nop
 8005db0:	a1c00100 	.word	0xa1c00100
 8005db4:	e0042000 	.word	0xe0042000
 8005db8:	5c001000 	.word	0x5c001000
 8005dbc:	40023000 	.word	0x40023000
 8005dc0:	f407a5c2 	.word	0xf407a5c2
 8005dc4:	b5e8b5cd 	.word	0xb5e8b5cd
 8005dc8:	58024000 	.word	0x58024000

08005dcc <ai_platform_network_set_error>:
 8005dcc:	b110      	cbz	r0, 8005dd4 <ai_platform_network_set_error+0x8>
 8005dce:	3010      	adds	r0, #16
 8005dd0:	f001 bfe8 	b.w	8007da4 <core_set_error>
 8005dd4:	4770      	bx	lr
 8005dd6:	bf00      	nop

08005dd8 <ai_platform_api_get_network_report>:
 8005dd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ddc:	b089      	sub	sp, #36	; 0x24
 8005dde:	4607      	mov	r7, r0
 8005de0:	9101      	str	r1, [sp, #4]
 8005de2:	b120      	cbz	r0, 8005dee <ai_platform_api_get_network_report+0x16>
 8005de4:	4b87      	ldr	r3, [pc, #540]	; (8006004 <ai_platform_api_get_network_report+0x22c>)
 8005de6:	6802      	ldr	r2, [r0, #0]
 8005de8:	429a      	cmp	r2, r3
 8005dea:	bf18      	it	ne
 8005dec:	2700      	movne	r7, #0
 8005dee:	f7ff fb3b 	bl	8005468 <_ai_platform_acquire_crc>
 8005df2:	4b85      	ldr	r3, [pc, #532]	; (8006008 <ai_platform_api_get_network_report+0x230>)
 8005df4:	f46f 688a 	mvn.w	r8, #1104	; 0x450
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005dfe:	eb03 0208 	add.w	r2, r3, r8
 8005e02:	2a01      	cmp	r2, #1
 8005e04:	d92b      	bls.n	8005e5e <ai_platform_api_get_network_report+0x86>
 8005e06:	f240 4249 	movw	r2, #1097	; 0x449
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d027      	beq.n	8005e5e <ai_platform_api_get_network_report+0x86>
 8005e0e:	4a7f      	ldr	r2, [pc, #508]	; (800600c <ai_platform_api_get_network_report+0x234>)
 8005e10:	6813      	ldr	r3, [r2, #0]
 8005e12:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005e16:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8005e1a:	d02d      	beq.n	8005e78 <ai_platform_api_get_network_report+0xa0>
 8005e1c:	6813      	ldr	r3, [r2, #0]
 8005e1e:	f240 4183 	movw	r1, #1155	; 0x483
 8005e22:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005e26:	428b      	cmp	r3, r1
 8005e28:	f000 80c6 	beq.w	8005fb8 <ai_platform_api_get_network_report+0x1e0>
 8005e2c:	6813      	ldr	r3, [r2, #0]
 8005e2e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005e32:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8005e36:	f000 80ab 	beq.w	8005f90 <ai_platform_api_get_network_report+0x1b8>
 8005e3a:	6813      	ldr	r3, [r2, #0]
 8005e3c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d129      	bne.n	8005e98 <ai_platform_api_get_network_report+0xc0>
 8005e44:	4a72      	ldr	r2, [pc, #456]	; (8006010 <ai_platform_api_get_network_report+0x238>)
 8005e46:	2301      	movs	r3, #1
 8005e48:	6093      	str	r3, [r2, #8]
 8005e4a:	6893      	ldr	r3, [r2, #8]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d1fc      	bne.n	8005e4a <ai_platform_api_get_network_report+0x72>
 8005e50:	4b70      	ldr	r3, [pc, #448]	; (8006014 <ai_platform_api_get_network_report+0x23c>)
 8005e52:	6013      	str	r3, [r2, #0]
 8005e54:	4b70      	ldr	r3, [pc, #448]	; (8006018 <ai_platform_api_get_network_report+0x240>)
 8005e56:	6812      	ldr	r2, [r2, #0]
 8005e58:	429a      	cmp	r2, r3
 8005e5a:	d01d      	beq.n	8005e98 <ai_platform_api_get_network_report+0xc0>
 8005e5c:	e7fe      	b.n	8005e5c <ai_platform_api_get_network_report+0x84>
 8005e5e:	4a6c      	ldr	r2, [pc, #432]	; (8006010 <ai_platform_api_get_network_report+0x238>)
 8005e60:	2301      	movs	r3, #1
 8005e62:	6093      	str	r3, [r2, #8]
 8005e64:	6893      	ldr	r3, [r2, #8]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d1fc      	bne.n	8005e64 <ai_platform_api_get_network_report+0x8c>
 8005e6a:	4b6a      	ldr	r3, [pc, #424]	; (8006014 <ai_platform_api_get_network_report+0x23c>)
 8005e6c:	6013      	str	r3, [r2, #0]
 8005e6e:	4b6a      	ldr	r3, [pc, #424]	; (8006018 <ai_platform_api_get_network_report+0x240>)
 8005e70:	6812      	ldr	r2, [r2, #0]
 8005e72:	429a      	cmp	r2, r3
 8005e74:	d010      	beq.n	8005e98 <ai_platform_api_get_network_report+0xc0>
 8005e76:	e7fe      	b.n	8005e76 <ai_platform_api_get_network_report+0x9e>
 8005e78:	4a68      	ldr	r2, [pc, #416]	; (800601c <ai_platform_api_get_network_report+0x244>)
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8005e80:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d1fb      	bne.n	8005e80 <ai_platform_api_get_network_report+0xa8>
 8005e88:	4b62      	ldr	r3, [pc, #392]	; (8006014 <ai_platform_api_get_network_report+0x23c>)
 8005e8a:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8005e8e:	4b62      	ldr	r3, [pc, #392]	; (8006018 <ai_platform_api_get_network_report+0x240>)
 8005e90:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8005e94:	429a      	cmp	r2, r3
 8005e96:	d16c      	bne.n	8005f72 <ai_platform_api_get_network_report+0x19a>
 8005e98:	f7ff fae8 	bl	800546c <_ai_platform_release_crc>
 8005e9c:	9801      	ldr	r0, [sp, #4]
 8005e9e:	2800      	cmp	r0, #0
 8005ea0:	bf18      	it	ne
 8005ea2:	2f00      	cmpne	r7, #0
 8005ea4:	bf0c      	ite	eq
 8005ea6:	2301      	moveq	r3, #1
 8005ea8:	2300      	movne	r3, #0
 8005eaa:	9302      	str	r3, [sp, #8]
 8005eac:	d07e      	beq.n	8005fac <ai_platform_api_get_network_report+0x1d4>
 8005eae:	67c3      	str	r3, [r0, #124]	; 0x7c
 8005eb0:	4619      	mov	r1, r3
 8005eb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005eb4:	b13b      	cbz	r3, 8005ec6 <ai_platform_api_get_network_report+0xee>
 8005eb6:	3101      	adds	r1, #1
 8005eb8:	67c1      	str	r1, [r0, #124]	; 0x7c
 8005eba:	691a      	ldr	r2, [r3, #16]
 8005ebc:	b11a      	cbz	r2, 8005ec6 <ai_platform_api_get_network_report+0xee>
 8005ebe:	429a      	cmp	r2, r3
 8005ec0:	d001      	beq.n	8005ec6 <ai_platform_api_get_network_report+0xee>
 8005ec2:	4613      	mov	r3, r2
 8005ec4:	e7f6      	b.n	8005eb4 <ai_platform_api_get_network_report+0xdc>
 8005ec6:	2900      	cmp	r1, #0
 8005ec8:	f000 8166 	beq.w	8006198 <ai_platform_api_get_network_report+0x3c0>
 8005ecc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d050      	beq.n	8005f74 <ai_platform_api_get_network_report+0x19c>
 8005ed2:	f8d7 9030 	ldr.w	r9, [r7, #48]	; 0x30
 8005ed6:	f1b9 0f00 	cmp.w	r9, #0
 8005eda:	d04b      	beq.n	8005f74 <ai_platform_api_get_network_report+0x19c>
 8005edc:	f04f 0a00 	mov.w	sl, #0
 8005ee0:	9703      	str	r7, [sp, #12]
 8005ee2:	4655      	mov	r5, sl
 8005ee4:	e016      	b.n	8005f14 <ai_platform_api_get_network_report+0x13c>
 8005ee6:	2201      	movs	r2, #1
 8005ee8:	f847 200e 	str.w	r2, [r7, lr]
 8005eec:	69b2      	ldr	r2, [r6, #24]
 8005eee:	6852      	ldr	r2, [r2, #4]
 8005ef0:	3501      	adds	r5, #1
 8005ef2:	60a3      	str	r3, [r4, #8]
 8005ef4:	f04f 0301 	mov.w	r3, #1
 8005ef8:	f10a 0a1c 	add.w	sl, sl, #28
 8005efc:	6122      	str	r2, [r4, #16]
 8005efe:	7523      	strb	r3, [r4, #20]
 8005f00:	2300      	movs	r3, #0
 8005f02:	f8c4 8018 	str.w	r8, [r4, #24]
 8005f06:	60e3      	str	r3, [r4, #12]
 8005f08:	6963      	ldr	r3, [r4, #20]
 8005f0a:	f36b 231f 	bfi	r3, fp, #8, #24
 8005f0e:	e9c4 0100 	strd	r0, r1, [r4]
 8005f12:	6163      	str	r3, [r4, #20]
 8005f14:	f8b9 3000 	ldrh.w	r3, [r9]
 8005f18:	b2aa      	uxth	r2, r5
 8005f1a:	42ab      	cmp	r3, r5
 8005f1c:	d95e      	bls.n	8005fdc <ai_platform_api_get_network_report+0x204>
 8005f1e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d05a      	beq.n	8005fdc <ai_platform_api_get_network_report+0x204>
 8005f26:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8005f2a:	2e00      	cmp	r6, #0
 8005f2c:	d056      	beq.n	8005fdc <ai_platform_api_get_network_report+0x204>
 8005f2e:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8005f32:	69b2      	ldr	r2, [r6, #24]
 8005f34:	f8d6 800c 	ldr.w	r8, [r6, #12]
 8005f38:	6810      	ldr	r0, [r2, #0]
 8005f3a:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 8005f3e:	68b3      	ldr	r3, [r6, #8]
 8005f40:	4454      	add	r4, sl
 8005f42:	f3c3 2b17 	ubfx	fp, r3, #8, #24
 8005f46:	f003 f94f 	bl	80091e8 <ai_array_to_buffer_fmt>
 8005f4a:	69b2      	ldr	r2, [r6, #24]
 8005f4c:	eb07 03c5 	add.w	r3, r7, r5, lsl #3
 8005f50:	ea4f 0ec5 	mov.w	lr, r5, lsl #3
 8005f54:	6891      	ldr	r1, [r2, #8]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d0c9      	beq.n	8005eee <ai_platform_api_get_network_report+0x116>
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	f847 2035 	str.w	r2, [r7, r5, lsl #3]
 8005f60:	6832      	ldr	r2, [r6, #0]
 8005f62:	605a      	str	r2, [r3, #4]
 8005f64:	b112      	cbz	r2, 8005f6c <ai_platform_api_get_network_report+0x194>
 8005f66:	8852      	ldrh	r2, [r2, #2]
 8005f68:	2a00      	cmp	r2, #0
 8005f6a:	d1bc      	bne.n	8005ee6 <ai_platform_api_get_network_report+0x10e>
 8005f6c:	69b2      	ldr	r2, [r6, #24]
 8005f6e:	2300      	movs	r3, #0
 8005f70:	e7bd      	b.n	8005eee <ai_platform_api_get_network_report+0x116>
 8005f72:	e7fe      	b.n	8005f72 <ai_platform_api_get_network_report+0x19a>
 8005f74:	9901      	ldr	r1, [sp, #4]
 8005f76:	2300      	movs	r3, #0
 8005f78:	2218      	movs	r2, #24
 8005f7a:	f107 0010 	add.w	r0, r7, #16
 8005f7e:	63cb      	str	r3, [r1, #60]	; 0x3c
 8005f80:	870b      	strh	r3, [r1, #56]	; 0x38
 8005f82:	2112      	movs	r1, #18
 8005f84:	f001 ff0e 	bl	8007da4 <core_set_error>
 8005f88:	9802      	ldr	r0, [sp, #8]
 8005f8a:	b009      	add	sp, #36	; 0x24
 8005f8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f90:	4a1f      	ldr	r2, [pc, #124]	; (8006010 <ai_platform_api_get_network_report+0x238>)
 8005f92:	2301      	movs	r3, #1
 8005f94:	6093      	str	r3, [r2, #8]
 8005f96:	6893      	ldr	r3, [r2, #8]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d1fc      	bne.n	8005f96 <ai_platform_api_get_network_report+0x1be>
 8005f9c:	4b1d      	ldr	r3, [pc, #116]	; (8006014 <ai_platform_api_get_network_report+0x23c>)
 8005f9e:	6013      	str	r3, [r2, #0]
 8005fa0:	4b1d      	ldr	r3, [pc, #116]	; (8006018 <ai_platform_api_get_network_report+0x240>)
 8005fa2:	6812      	ldr	r2, [r2, #0]
 8005fa4:	429a      	cmp	r2, r3
 8005fa6:	f43f af77 	beq.w	8005e98 <ai_platform_api_get_network_report+0xc0>
 8005faa:	e7fe      	b.n	8005faa <ai_platform_api_get_network_report+0x1d2>
 8005fac:	2300      	movs	r3, #0
 8005fae:	9302      	str	r3, [sp, #8]
 8005fb0:	9802      	ldr	r0, [sp, #8]
 8005fb2:	b009      	add	sp, #36	; 0x24
 8005fb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fb8:	4a18      	ldr	r2, [pc, #96]	; (800601c <ai_platform_api_get_network_report+0x244>)
 8005fba:	2301      	movs	r3, #1
 8005fbc:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8005fc0:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d1fb      	bne.n	8005fc0 <ai_platform_api_get_network_report+0x1e8>
 8005fc8:	4b12      	ldr	r3, [pc, #72]	; (8006014 <ai_platform_api_get_network_report+0x23c>)
 8005fca:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8005fce:	4b12      	ldr	r3, [pc, #72]	; (8006018 <ai_platform_api_get_network_report+0x240>)
 8005fd0:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8005fd4:	429a      	cmp	r2, r3
 8005fd6:	f43f af5f 	beq.w	8005e98 <ai_platform_api_get_network_report+0xc0>
 8005fda:	e7fe      	b.n	8005fda <ai_platform_api_get_network_report+0x202>
 8005fdc:	9f03      	ldr	r7, [sp, #12]
 8005fde:	2a00      	cmp	r2, #0
 8005fe0:	d0c8      	beq.n	8005f74 <ai_platform_api_get_network_report+0x19c>
 8005fe2:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8005fe6:	9901      	ldr	r1, [sp, #4]
 8005fe8:	685b      	ldr	r3, [r3, #4]
 8005fea:	870a      	strh	r2, [r1, #56]	; 0x38
 8005fec:	63cb      	str	r3, [r1, #60]	; 0x3c
 8005fee:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005ff0:	2b01      	cmp	r3, #1
 8005ff2:	f240 80c6 	bls.w	8006182 <ai_platform_api_get_network_report+0x3aa>
 8005ff6:	f04f 0a00 	mov.w	sl, #0
 8005ffa:	f8d7 9030 	ldr.w	r9, [r7, #48]	; 0x30
 8005ffe:	9703      	str	r7, [sp, #12]
 8006000:	4655      	mov	r5, sl
 8006002:	e024      	b.n	800604e <ai_platform_api_get_network_report+0x276>
 8006004:	a1c00100 	.word	0xa1c00100
 8006008:	e0042000 	.word	0xe0042000
 800600c:	5c001000 	.word	0x5c001000
 8006010:	40023000 	.word	0x40023000
 8006014:	f407a5c2 	.word	0xf407a5c2
 8006018:	b5e8b5cd 	.word	0xb5e8b5cd
 800601c:	58024000 	.word	0x58024000
 8006020:	2201      	movs	r2, #1
 8006022:	f847 200e 	str.w	r2, [r7, lr]
 8006026:	69b2      	ldr	r2, [r6, #24]
 8006028:	6852      	ldr	r2, [r2, #4]
 800602a:	3501      	adds	r5, #1
 800602c:	60a3      	str	r3, [r4, #8]
 800602e:	f04f 0301 	mov.w	r3, #1
 8006032:	f10a 0a1c 	add.w	sl, sl, #28
 8006036:	6122      	str	r2, [r4, #16]
 8006038:	7523      	strb	r3, [r4, #20]
 800603a:	2300      	movs	r3, #0
 800603c:	f8c4 8018 	str.w	r8, [r4, #24]
 8006040:	60e3      	str	r3, [r4, #12]
 8006042:	6963      	ldr	r3, [r4, #20]
 8006044:	f36b 231f 	bfi	r3, fp, #8, #24
 8006048:	e9c4 0100 	strd	r0, r1, [r4]
 800604c:	6163      	str	r3, [r4, #20]
 800604e:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8006052:	b2aa      	uxth	r2, r5
 8006054:	42ab      	cmp	r3, r5
 8006056:	d927      	bls.n	80060a8 <ai_platform_api_get_network_report+0x2d0>
 8006058:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800605c:	b323      	cbz	r3, 80060a8 <ai_platform_api_get_network_report+0x2d0>
 800605e:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8006062:	b30e      	cbz	r6, 80060a8 <ai_platform_api_get_network_report+0x2d0>
 8006064:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8006068:	69b2      	ldr	r2, [r6, #24]
 800606a:	f8d6 800c 	ldr.w	r8, [r6, #12]
 800606e:	6810      	ldr	r0, [r2, #0]
 8006070:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 8006074:	68b3      	ldr	r3, [r6, #8]
 8006076:	4454      	add	r4, sl
 8006078:	f3c3 2b17 	ubfx	fp, r3, #8, #24
 800607c:	f003 f8b4 	bl	80091e8 <ai_array_to_buffer_fmt>
 8006080:	69b2      	ldr	r2, [r6, #24]
 8006082:	eb07 03c5 	add.w	r3, r7, r5, lsl #3
 8006086:	ea4f 0ec5 	mov.w	lr, r5, lsl #3
 800608a:	6891      	ldr	r1, [r2, #8]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d0cb      	beq.n	8006028 <ai_platform_api_get_network_report+0x250>
 8006090:	2200      	movs	r2, #0
 8006092:	f847 2035 	str.w	r2, [r7, r5, lsl #3]
 8006096:	6832      	ldr	r2, [r6, #0]
 8006098:	605a      	str	r2, [r3, #4]
 800609a:	b112      	cbz	r2, 80060a2 <ai_platform_api_get_network_report+0x2ca>
 800609c:	8852      	ldrh	r2, [r2, #2]
 800609e:	2a00      	cmp	r2, #0
 80060a0:	d1be      	bne.n	8006020 <ai_platform_api_get_network_report+0x248>
 80060a2:	69b2      	ldr	r2, [r6, #24]
 80060a4:	2300      	movs	r3, #0
 80060a6:	e7bf      	b.n	8006028 <ai_platform_api_get_network_report+0x250>
 80060a8:	9f03      	ldr	r7, [sp, #12]
 80060aa:	2a00      	cmp	r2, #0
 80060ac:	d069      	beq.n	8006182 <ai_platform_api_get_network_report+0x3aa>
 80060ae:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80060b2:	f107 0624 	add.w	r6, r7, #36	; 0x24
 80060b6:	9901      	ldr	r1, [sp, #4]
 80060b8:	685b      	ldr	r3, [r3, #4]
 80060ba:	4630      	mov	r0, r6
 80060bc:	874a      	strh	r2, [r1, #58]	; 0x3a
 80060be:	640b      	str	r3, [r1, #64]	; 0x40
 80060c0:	f7ff f926 	bl	8005310 <ai_buffer_array_sane>
 80060c4:	9002      	str	r0, [sp, #8]
 80060c6:	b960      	cbnz	r0, 80060e2 <ai_platform_api_get_network_report+0x30a>
 80060c8:	4630      	mov	r0, r6
 80060ca:	f7ff f921 	bl	8005310 <ai_buffer_array_sane>
 80060ce:	b140      	cbz	r0, 80060e2 <ai_platform_api_get_network_report+0x30a>
 80060d0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80060d2:	b133      	cbz	r3, 80060e2 <ai_platform_api_get_network_report+0x30a>
 80060d4:	2213      	movs	r2, #19
 80060d6:	2111      	movs	r1, #17
 80060d8:	f107 0010 	add.w	r0, r7, #16
 80060dc:	f001 fe62 	bl	8007da4 <core_set_error>
 80060e0:	e752      	b.n	8005f88 <ai_platform_api_get_network_report+0x1b0>
 80060e2:	f107 081c 	add.w	r8, r7, #28
 80060e6:	4640      	mov	r0, r8
 80060e8:	f7ff f912 	bl	8005310 <ai_buffer_array_sane>
 80060ec:	9002      	str	r0, [sp, #8]
 80060ee:	b960      	cbnz	r0, 800610a <ai_platform_api_get_network_report+0x332>
 80060f0:	4640      	mov	r0, r8
 80060f2:	f7ff f90d 	bl	8005310 <ai_buffer_array_sane>
 80060f6:	b140      	cbz	r0, 800610a <ai_platform_api_get_network_report+0x332>
 80060f8:	8bfb      	ldrh	r3, [r7, #30]
 80060fa:	b133      	cbz	r3, 800610a <ai_platform_api_get_network_report+0x332>
 80060fc:	2212      	movs	r2, #18
 80060fe:	2111      	movs	r1, #17
 8006100:	f107 0010 	add.w	r0, r7, #16
 8006104:	f001 fe4e 	bl	8007da4 <core_set_error>
 8006108:	e73e      	b.n	8005f88 <ai_platform_api_get_network_report+0x1b0>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	9a01      	ldr	r2, [sp, #4]
 800610e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8006112:	f7ff f9a9 	bl	8005468 <_ai_platform_acquire_crc>
 8006116:	4b89      	ldr	r3, [pc, #548]	; (800633c <ai_platform_api_get_network_report+0x564>)
 8006118:	f46f 6e8a 	mvn.w	lr, #1104	; 0x450
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006122:	eb03 020e 	add.w	r2, r3, lr
 8006126:	2a01      	cmp	r2, #1
 8006128:	d93d      	bls.n	80061a6 <ai_platform_api_get_network_report+0x3ce>
 800612a:	f240 4249 	movw	r2, #1097	; 0x449
 800612e:	4293      	cmp	r3, r2
 8006130:	d039      	beq.n	80061a6 <ai_platform_api_get_network_report+0x3ce>
 8006132:	4b83      	ldr	r3, [pc, #524]	; (8006340 <ai_platform_api_get_network_report+0x568>)
 8006134:	681a      	ldr	r2, [r3, #0]
 8006136:	f3c2 020a 	ubfx	r2, r2, #0, #11
 800613a:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 800613e:	d03f      	beq.n	80061c0 <ai_platform_api_get_network_report+0x3e8>
 8006140:	681a      	ldr	r2, [r3, #0]
 8006142:	f240 4183 	movw	r1, #1155	; 0x483
 8006146:	f3c2 020a 	ubfx	r2, r2, #0, #11
 800614a:	428a      	cmp	r2, r1
 800614c:	f000 80e3 	beq.w	8006316 <ai_platform_api_get_network_report+0x53e>
 8006150:	681a      	ldr	r2, [r3, #0]
 8006152:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8006156:	f5b2 6f90 	cmp.w	r2, #1152	; 0x480
 800615a:	f000 8149 	beq.w	80063f0 <ai_platform_api_get_network_report+0x618>
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006164:	2b00      	cmp	r3, #0
 8006166:	d13c      	bne.n	80061e2 <ai_platform_api_get_network_report+0x40a>
 8006168:	4b76      	ldr	r3, [pc, #472]	; (8006344 <ai_platform_api_get_network_report+0x56c>)
 800616a:	2201      	movs	r2, #1
 800616c:	609a      	str	r2, [r3, #8]
 800616e:	689a      	ldr	r2, [r3, #8]
 8006170:	2a00      	cmp	r2, #0
 8006172:	d1fc      	bne.n	800616e <ai_platform_api_get_network_report+0x396>
 8006174:	4a74      	ldr	r2, [pc, #464]	; (8006348 <ai_platform_api_get_network_report+0x570>)
 8006176:	601a      	str	r2, [r3, #0]
 8006178:	681a      	ldr	r2, [r3, #0]
 800617a:	4b74      	ldr	r3, [pc, #464]	; (800634c <ai_platform_api_get_network_report+0x574>)
 800617c:	429a      	cmp	r2, r3
 800617e:	d030      	beq.n	80061e2 <ai_platform_api_get_network_report+0x40a>
 8006180:	e7fe      	b.n	8006180 <ai_platform_api_get_network_report+0x3a8>
 8006182:	9901      	ldr	r1, [sp, #4]
 8006184:	2300      	movs	r3, #0
 8006186:	2218      	movs	r2, #24
 8006188:	f107 0010 	add.w	r0, r7, #16
 800618c:	640b      	str	r3, [r1, #64]	; 0x40
 800618e:	874b      	strh	r3, [r1, #58]	; 0x3a
 8006190:	2113      	movs	r1, #19
 8006192:	f001 fe07 	bl	8007da4 <core_set_error>
 8006196:	e6f7      	b.n	8005f88 <ai_platform_api_get_network_report+0x1b0>
 8006198:	2218      	movs	r2, #24
 800619a:	2111      	movs	r1, #17
 800619c:	f107 0010 	add.w	r0, r7, #16
 80061a0:	f001 fe00 	bl	8007da4 <core_set_error>
 80061a4:	e6f0      	b.n	8005f88 <ai_platform_api_get_network_report+0x1b0>
 80061a6:	4a67      	ldr	r2, [pc, #412]	; (8006344 <ai_platform_api_get_network_report+0x56c>)
 80061a8:	2301      	movs	r3, #1
 80061aa:	6093      	str	r3, [r2, #8]
 80061ac:	6893      	ldr	r3, [r2, #8]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d1fc      	bne.n	80061ac <ai_platform_api_get_network_report+0x3d4>
 80061b2:	4b65      	ldr	r3, [pc, #404]	; (8006348 <ai_platform_api_get_network_report+0x570>)
 80061b4:	6013      	str	r3, [r2, #0]
 80061b6:	4b65      	ldr	r3, [pc, #404]	; (800634c <ai_platform_api_get_network_report+0x574>)
 80061b8:	6812      	ldr	r2, [r2, #0]
 80061ba:	429a      	cmp	r2, r3
 80061bc:	d011      	beq.n	80061e2 <ai_platform_api_get_network_report+0x40a>
 80061be:	e7fe      	b.n	80061be <ai_platform_api_get_network_report+0x3e6>
 80061c0:	4b63      	ldr	r3, [pc, #396]	; (8006350 <ai_platform_api_get_network_report+0x578>)
 80061c2:	2201      	movs	r2, #1
 80061c4:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 80061c8:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
 80061cc:	2a00      	cmp	r2, #0
 80061ce:	d1fb      	bne.n	80061c8 <ai_platform_api_get_network_report+0x3f0>
 80061d0:	4a5d      	ldr	r2, [pc, #372]	; (8006348 <ai_platform_api_get_network_report+0x570>)
 80061d2:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 80061d6:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 80061da:	4b5c      	ldr	r3, [pc, #368]	; (800634c <ai_platform_api_get_network_report+0x574>)
 80061dc:	429a      	cmp	r2, r3
 80061de:	f040 8099 	bne.w	8006314 <ai_platform_api_get_network_report+0x53c>
 80061e2:	f7ff f943 	bl	800546c <_ai_platform_release_crc>
 80061e6:	4b5b      	ldr	r3, [pc, #364]	; (8006354 <ai_platform_api_get_network_report+0x57c>)
 80061e8:	9a01      	ldr	r2, [sp, #4]
 80061ea:	6113      	str	r3, [r2, #16]
 80061ec:	f7ff f93c 	bl	8005468 <_ai_platform_acquire_crc>
 80061f0:	4b52      	ldr	r3, [pc, #328]	; (800633c <ai_platform_api_get_network_report+0x564>)
 80061f2:	f46f 6c8a 	mvn.w	ip, #1104	; 0x450
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80061fc:	eb03 020c 	add.w	r2, r3, ip
 8006200:	2a01      	cmp	r2, #1
 8006202:	d92b      	bls.n	800625c <ai_platform_api_get_network_report+0x484>
 8006204:	f240 4249 	movw	r2, #1097	; 0x449
 8006208:	4293      	cmp	r3, r2
 800620a:	d027      	beq.n	800625c <ai_platform_api_get_network_report+0x484>
 800620c:	4b4c      	ldr	r3, [pc, #304]	; (8006340 <ai_platform_api_get_network_report+0x568>)
 800620e:	681a      	ldr	r2, [r3, #0]
 8006210:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8006214:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 8006218:	d02d      	beq.n	8006276 <ai_platform_api_get_network_report+0x49e>
 800621a:	681a      	ldr	r2, [r3, #0]
 800621c:	f240 4183 	movw	r1, #1155	; 0x483
 8006220:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8006224:	428a      	cmp	r2, r1
 8006226:	f000 8110 	beq.w	800644a <ai_platform_api_get_network_report+0x672>
 800622a:	681a      	ldr	r2, [r3, #0]
 800622c:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8006230:	f5b2 6f90 	cmp.w	r2, #1152	; 0x480
 8006234:	f000 80fb 	beq.w	800642e <ai_platform_api_get_network_report+0x656>
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800623e:	2b00      	cmp	r3, #0
 8006240:	d12a      	bne.n	8006298 <ai_platform_api_get_network_report+0x4c0>
 8006242:	4b40      	ldr	r3, [pc, #256]	; (8006344 <ai_platform_api_get_network_report+0x56c>)
 8006244:	2201      	movs	r2, #1
 8006246:	609a      	str	r2, [r3, #8]
 8006248:	689a      	ldr	r2, [r3, #8]
 800624a:	2a00      	cmp	r2, #0
 800624c:	d1fc      	bne.n	8006248 <ai_platform_api_get_network_report+0x470>
 800624e:	4a3e      	ldr	r2, [pc, #248]	; (8006348 <ai_platform_api_get_network_report+0x570>)
 8006250:	601a      	str	r2, [r3, #0]
 8006252:	681a      	ldr	r2, [r3, #0]
 8006254:	4b3d      	ldr	r3, [pc, #244]	; (800634c <ai_platform_api_get_network_report+0x574>)
 8006256:	429a      	cmp	r2, r3
 8006258:	d01e      	beq.n	8006298 <ai_platform_api_get_network_report+0x4c0>
 800625a:	e7fe      	b.n	800625a <ai_platform_api_get_network_report+0x482>
 800625c:	4a39      	ldr	r2, [pc, #228]	; (8006344 <ai_platform_api_get_network_report+0x56c>)
 800625e:	2301      	movs	r3, #1
 8006260:	6093      	str	r3, [r2, #8]
 8006262:	6893      	ldr	r3, [r2, #8]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d1fc      	bne.n	8006262 <ai_platform_api_get_network_report+0x48a>
 8006268:	4b37      	ldr	r3, [pc, #220]	; (8006348 <ai_platform_api_get_network_report+0x570>)
 800626a:	6013      	str	r3, [r2, #0]
 800626c:	4b37      	ldr	r3, [pc, #220]	; (800634c <ai_platform_api_get_network_report+0x574>)
 800626e:	6812      	ldr	r2, [r2, #0]
 8006270:	429a      	cmp	r2, r3
 8006272:	d011      	beq.n	8006298 <ai_platform_api_get_network_report+0x4c0>
 8006274:	e7fe      	b.n	8006274 <ai_platform_api_get_network_report+0x49c>
 8006276:	4b36      	ldr	r3, [pc, #216]	; (8006350 <ai_platform_api_get_network_report+0x578>)
 8006278:	2201      	movs	r2, #1
 800627a:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 800627e:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
 8006282:	2a00      	cmp	r2, #0
 8006284:	d1fb      	bne.n	800627e <ai_platform_api_get_network_report+0x4a6>
 8006286:	4a30      	ldr	r2, [pc, #192]	; (8006348 <ai_platform_api_get_network_report+0x570>)
 8006288:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 800628c:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 8006290:	4b2e      	ldr	r3, [pc, #184]	; (800634c <ai_platform_api_get_network_report+0x574>)
 8006292:	429a      	cmp	r2, r3
 8006294:	f040 80ab 	bne.w	80063ee <ai_platform_api_get_network_report+0x616>
 8006298:	f7ff f8e8 	bl	800546c <_ai_platform_release_crc>
 800629c:	f44f 7384 	mov.w	r3, #264	; 0x108
 80062a0:	9a01      	ldr	r2, [sp, #4]
 80062a2:	f46f 658a 	mvn.w	r5, #1104	; 0x450
 80062a6:	6153      	str	r3, [r2, #20]
 80062a8:	f7ff f8de 	bl	8005468 <_ai_platform_acquire_crc>
 80062ac:	4b23      	ldr	r3, [pc, #140]	; (800633c <ai_platform_api_get_network_report+0x564>)
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80062b4:	195a      	adds	r2, r3, r5
 80062b6:	2a01      	cmp	r2, #1
 80062b8:	d94e      	bls.n	8006358 <ai_platform_api_get_network_report+0x580>
 80062ba:	f240 4249 	movw	r2, #1097	; 0x449
 80062be:	4293      	cmp	r3, r2
 80062c0:	d04a      	beq.n	8006358 <ai_platform_api_get_network_report+0x580>
 80062c2:	4b1f      	ldr	r3, [pc, #124]	; (8006340 <ai_platform_api_get_network_report+0x568>)
 80062c4:	681a      	ldr	r2, [r3, #0]
 80062c6:	f3c2 020a 	ubfx	r2, r2, #0, #11
 80062ca:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 80062ce:	f000 809d 	beq.w	800640c <ai_platform_api_get_network_report+0x634>
 80062d2:	681a      	ldr	r2, [r3, #0]
 80062d4:	f240 4183 	movw	r1, #1155	; 0x483
 80062d8:	f3c2 020a 	ubfx	r2, r2, #0, #11
 80062dc:	428a      	cmp	r2, r1
 80062de:	f000 80fe 	beq.w	80064de <ai_platform_api_get_network_report+0x706>
 80062e2:	681a      	ldr	r2, [r3, #0]
 80062e4:	f3c2 020a 	ubfx	r2, r2, #0, #11
 80062e8:	f5b2 6f90 	cmp.w	r2, #1152	; 0x480
 80062ec:	f000 80e9 	beq.w	80064c2 <ai_platform_api_get_network_report+0x6ea>
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d13a      	bne.n	8006370 <ai_platform_api_get_network_report+0x598>
 80062fa:	4b12      	ldr	r3, [pc, #72]	; (8006344 <ai_platform_api_get_network_report+0x56c>)
 80062fc:	2201      	movs	r2, #1
 80062fe:	609a      	str	r2, [r3, #8]
 8006300:	689a      	ldr	r2, [r3, #8]
 8006302:	2a00      	cmp	r2, #0
 8006304:	d1fc      	bne.n	8006300 <ai_platform_api_get_network_report+0x528>
 8006306:	4a10      	ldr	r2, [pc, #64]	; (8006348 <ai_platform_api_get_network_report+0x570>)
 8006308:	601a      	str	r2, [r3, #0]
 800630a:	681a      	ldr	r2, [r3, #0]
 800630c:	4b0f      	ldr	r3, [pc, #60]	; (800634c <ai_platform_api_get_network_report+0x574>)
 800630e:	429a      	cmp	r2, r3
 8006310:	d02e      	beq.n	8006370 <ai_platform_api_get_network_report+0x598>
 8006312:	e7fe      	b.n	8006312 <ai_platform_api_get_network_report+0x53a>
 8006314:	e7fe      	b.n	8006314 <ai_platform_api_get_network_report+0x53c>
 8006316:	4b0e      	ldr	r3, [pc, #56]	; (8006350 <ai_platform_api_get_network_report+0x578>)
 8006318:	2201      	movs	r2, #1
 800631a:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 800631e:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
 8006322:	2a00      	cmp	r2, #0
 8006324:	d1fb      	bne.n	800631e <ai_platform_api_get_network_report+0x546>
 8006326:	4a08      	ldr	r2, [pc, #32]	; (8006348 <ai_platform_api_get_network_report+0x570>)
 8006328:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 800632c:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 8006330:	4b06      	ldr	r3, [pc, #24]	; (800634c <ai_platform_api_get_network_report+0x574>)
 8006332:	429a      	cmp	r2, r3
 8006334:	f43f af55 	beq.w	80061e2 <ai_platform_api_get_network_report+0x40a>
 8006338:	e7fe      	b.n	8006338 <ai_platform_api_get_network_report+0x560>
 800633a:	bf00      	nop
 800633c:	e0042000 	.word	0xe0042000
 8006340:	5c001000 	.word	0x5c001000
 8006344:	40023000 	.word	0x40023000
 8006348:	f407a5c2 	.word	0xf407a5c2
 800634c:	b5e8b5cd 	.word	0xb5e8b5cd
 8006350:	58024000 	.word	0x58024000
 8006354:	080224fc 	.word	0x080224fc
 8006358:	4ba4      	ldr	r3, [pc, #656]	; (80065ec <ai_platform_api_get_network_report+0x814>)
 800635a:	2201      	movs	r2, #1
 800635c:	609a      	str	r2, [r3, #8]
 800635e:	689a      	ldr	r2, [r3, #8]
 8006360:	2a00      	cmp	r2, #0
 8006362:	d1fc      	bne.n	800635e <ai_platform_api_get_network_report+0x586>
 8006364:	4aa2      	ldr	r2, [pc, #648]	; (80065f0 <ai_platform_api_get_network_report+0x818>)
 8006366:	601a      	str	r2, [r3, #0]
 8006368:	681a      	ldr	r2, [r3, #0]
 800636a:	4ba2      	ldr	r3, [pc, #648]	; (80065f4 <ai_platform_api_get_network_report+0x81c>)
 800636c:	429a      	cmp	r2, r3
 800636e:	d13d      	bne.n	80063ec <ai_platform_api_get_network_report+0x614>
 8006370:	f7ff f87c 	bl	800546c <_ai_platform_release_crc>
 8006374:	f240 2301 	movw	r3, #513	; 0x201
 8006378:	9a01      	ldr	r2, [sp, #4]
 800637a:	f46f 648a 	mvn.w	r4, #1104	; 0x450
 800637e:	6253      	str	r3, [r2, #36]	; 0x24
 8006380:	f7ff f872 	bl	8005468 <_ai_platform_acquire_crc>
 8006384:	4b9c      	ldr	r3, [pc, #624]	; (80065f8 <ai_platform_api_get_network_report+0x820>)
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800638c:	191a      	adds	r2, r3, r4
 800638e:	2a01      	cmp	r2, #1
 8006390:	d96d      	bls.n	800646e <ai_platform_api_get_network_report+0x696>
 8006392:	f240 4249 	movw	r2, #1097	; 0x449
 8006396:	4293      	cmp	r3, r2
 8006398:	d069      	beq.n	800646e <ai_platform_api_get_network_report+0x696>
 800639a:	4b98      	ldr	r3, [pc, #608]	; (80065fc <ai_platform_api_get_network_report+0x824>)
 800639c:	681a      	ldr	r2, [r3, #0]
 800639e:	f3c2 020a 	ubfx	r2, r2, #0, #11
 80063a2:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 80063a6:	f000 80ca 	beq.w	800653e <ai_platform_api_get_network_report+0x766>
 80063aa:	681a      	ldr	r2, [r3, #0]
 80063ac:	f240 4183 	movw	r1, #1155	; 0x483
 80063b0:	f3c2 020a 	ubfx	r2, r2, #0, #11
 80063b4:	428a      	cmp	r2, r1
 80063b6:	f000 80b1 	beq.w	800651c <ai_platform_api_get_network_report+0x744>
 80063ba:	681a      	ldr	r2, [r3, #0]
 80063bc:	f3c2 020a 	ubfx	r2, r2, #0, #11
 80063c0:	f5b2 6f90 	cmp.w	r2, #1152	; 0x480
 80063c4:	f000 809d 	beq.w	8006502 <ai_platform_api_get_network_report+0x72a>
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d159      	bne.n	8006486 <ai_platform_api_get_network_report+0x6ae>
 80063d2:	4b86      	ldr	r3, [pc, #536]	; (80065ec <ai_platform_api_get_network_report+0x814>)
 80063d4:	2201      	movs	r2, #1
 80063d6:	609a      	str	r2, [r3, #8]
 80063d8:	689a      	ldr	r2, [r3, #8]
 80063da:	2a00      	cmp	r2, #0
 80063dc:	d1fc      	bne.n	80063d8 <ai_platform_api_get_network_report+0x600>
 80063de:	4a84      	ldr	r2, [pc, #528]	; (80065f0 <ai_platform_api_get_network_report+0x818>)
 80063e0:	601a      	str	r2, [r3, #0]
 80063e2:	681a      	ldr	r2, [r3, #0]
 80063e4:	4b83      	ldr	r3, [pc, #524]	; (80065f4 <ai_platform_api_get_network_report+0x81c>)
 80063e6:	429a      	cmp	r2, r3
 80063e8:	d04d      	beq.n	8006486 <ai_platform_api_get_network_report+0x6ae>
 80063ea:	e7fe      	b.n	80063ea <ai_platform_api_get_network_report+0x612>
 80063ec:	e7fe      	b.n	80063ec <ai_platform_api_get_network_report+0x614>
 80063ee:	e7fe      	b.n	80063ee <ai_platform_api_get_network_report+0x616>
 80063f0:	4b7e      	ldr	r3, [pc, #504]	; (80065ec <ai_platform_api_get_network_report+0x814>)
 80063f2:	2201      	movs	r2, #1
 80063f4:	609a      	str	r2, [r3, #8]
 80063f6:	689a      	ldr	r2, [r3, #8]
 80063f8:	2a00      	cmp	r2, #0
 80063fa:	d1fc      	bne.n	80063f6 <ai_platform_api_get_network_report+0x61e>
 80063fc:	4a7c      	ldr	r2, [pc, #496]	; (80065f0 <ai_platform_api_get_network_report+0x818>)
 80063fe:	601a      	str	r2, [r3, #0]
 8006400:	681a      	ldr	r2, [r3, #0]
 8006402:	4b7c      	ldr	r3, [pc, #496]	; (80065f4 <ai_platform_api_get_network_report+0x81c>)
 8006404:	429a      	cmp	r2, r3
 8006406:	f43f aeec 	beq.w	80061e2 <ai_platform_api_get_network_report+0x40a>
 800640a:	e7fe      	b.n	800640a <ai_platform_api_get_network_report+0x632>
 800640c:	4b7c      	ldr	r3, [pc, #496]	; (8006600 <ai_platform_api_get_network_report+0x828>)
 800640e:	2201      	movs	r2, #1
 8006410:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 8006414:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
 8006418:	2a00      	cmp	r2, #0
 800641a:	d1fb      	bne.n	8006414 <ai_platform_api_get_network_report+0x63c>
 800641c:	4a74      	ldr	r2, [pc, #464]	; (80065f0 <ai_platform_api_get_network_report+0x818>)
 800641e:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 8006422:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 8006426:	4b73      	ldr	r3, [pc, #460]	; (80065f4 <ai_platform_api_get_network_report+0x81c>)
 8006428:	429a      	cmp	r2, r3
 800642a:	d0a1      	beq.n	8006370 <ai_platform_api_get_network_report+0x598>
 800642c:	e7fe      	b.n	800642c <ai_platform_api_get_network_report+0x654>
 800642e:	4b6f      	ldr	r3, [pc, #444]	; (80065ec <ai_platform_api_get_network_report+0x814>)
 8006430:	2201      	movs	r2, #1
 8006432:	609a      	str	r2, [r3, #8]
 8006434:	689a      	ldr	r2, [r3, #8]
 8006436:	2a00      	cmp	r2, #0
 8006438:	d1fc      	bne.n	8006434 <ai_platform_api_get_network_report+0x65c>
 800643a:	4a6d      	ldr	r2, [pc, #436]	; (80065f0 <ai_platform_api_get_network_report+0x818>)
 800643c:	601a      	str	r2, [r3, #0]
 800643e:	681a      	ldr	r2, [r3, #0]
 8006440:	4b6c      	ldr	r3, [pc, #432]	; (80065f4 <ai_platform_api_get_network_report+0x81c>)
 8006442:	429a      	cmp	r2, r3
 8006444:	f43f af28 	beq.w	8006298 <ai_platform_api_get_network_report+0x4c0>
 8006448:	e7fe      	b.n	8006448 <ai_platform_api_get_network_report+0x670>
 800644a:	4b6d      	ldr	r3, [pc, #436]	; (8006600 <ai_platform_api_get_network_report+0x828>)
 800644c:	2201      	movs	r2, #1
 800644e:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 8006452:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
 8006456:	2a00      	cmp	r2, #0
 8006458:	d1fb      	bne.n	8006452 <ai_platform_api_get_network_report+0x67a>
 800645a:	4a65      	ldr	r2, [pc, #404]	; (80065f0 <ai_platform_api_get_network_report+0x818>)
 800645c:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 8006460:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 8006464:	4b63      	ldr	r3, [pc, #396]	; (80065f4 <ai_platform_api_get_network_report+0x81c>)
 8006466:	429a      	cmp	r2, r3
 8006468:	f43f af16 	beq.w	8006298 <ai_platform_api_get_network_report+0x4c0>
 800646c:	e7fe      	b.n	800646c <ai_platform_api_get_network_report+0x694>
 800646e:	4b5f      	ldr	r3, [pc, #380]	; (80065ec <ai_platform_api_get_network_report+0x814>)
 8006470:	2201      	movs	r2, #1
 8006472:	609a      	str	r2, [r3, #8]
 8006474:	689a      	ldr	r2, [r3, #8]
 8006476:	2a00      	cmp	r2, #0
 8006478:	d1fc      	bne.n	8006474 <ai_platform_api_get_network_report+0x69c>
 800647a:	4a5d      	ldr	r2, [pc, #372]	; (80065f0 <ai_platform_api_get_network_report+0x818>)
 800647c:	601a      	str	r2, [r3, #0]
 800647e:	681a      	ldr	r2, [r3, #0]
 8006480:	4b5c      	ldr	r3, [pc, #368]	; (80065f4 <ai_platform_api_get_network_report+0x81c>)
 8006482:	429a      	cmp	r2, r3
 8006484:	d11c      	bne.n	80064c0 <ai_platform_api_get_network_report+0x6e8>
 8006486:	f7fe fff1 	bl	800546c <_ai_platform_release_crc>
 800648a:	9c01      	ldr	r4, [sp, #4]
 800648c:	f240 5301 	movw	r3, #1281	; 0x501
 8006490:	62a3      	str	r3, [r4, #40]	; 0x28
 8006492:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8006494:	f002 ff2a 	bl	80092ec <ai_platform_version_get>
 8006498:	4b5a      	ldr	r3, [pc, #360]	; (8006604 <ai_platform_api_get_network_report+0x82c>)
 800649a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800649c:	6220      	str	r0, [r4, #32]
 800649e:	429a      	cmp	r2, r3
 80064a0:	d15e      	bne.n	8006560 <ai_platform_api_get_network_report+0x788>
 80064a2:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80064a6:	f104 0348 	add.w	r3, r4, #72	; 0x48
 80064aa:	e896 0003 	ldmia.w	r6, {r0, r1}
 80064ae:	e882 0003 	stmia.w	r2, {r0, r1}
 80064b2:	2201      	movs	r2, #1
 80064b4:	e898 0003 	ldmia.w	r8, {r0, r1}
 80064b8:	9202      	str	r2, [sp, #8]
 80064ba:	e883 0003 	stmia.w	r3, {r0, r1}
 80064be:	e563      	b.n	8005f88 <ai_platform_api_get_network_report+0x1b0>
 80064c0:	e7fe      	b.n	80064c0 <ai_platform_api_get_network_report+0x6e8>
 80064c2:	4b4a      	ldr	r3, [pc, #296]	; (80065ec <ai_platform_api_get_network_report+0x814>)
 80064c4:	2201      	movs	r2, #1
 80064c6:	609a      	str	r2, [r3, #8]
 80064c8:	689a      	ldr	r2, [r3, #8]
 80064ca:	2a00      	cmp	r2, #0
 80064cc:	d1fc      	bne.n	80064c8 <ai_platform_api_get_network_report+0x6f0>
 80064ce:	4a48      	ldr	r2, [pc, #288]	; (80065f0 <ai_platform_api_get_network_report+0x818>)
 80064d0:	601a      	str	r2, [r3, #0]
 80064d2:	681a      	ldr	r2, [r3, #0]
 80064d4:	4b47      	ldr	r3, [pc, #284]	; (80065f4 <ai_platform_api_get_network_report+0x81c>)
 80064d6:	429a      	cmp	r2, r3
 80064d8:	f43f af4a 	beq.w	8006370 <ai_platform_api_get_network_report+0x598>
 80064dc:	e7fe      	b.n	80064dc <ai_platform_api_get_network_report+0x704>
 80064de:	4b48      	ldr	r3, [pc, #288]	; (8006600 <ai_platform_api_get_network_report+0x828>)
 80064e0:	2201      	movs	r2, #1
 80064e2:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 80064e6:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
 80064ea:	2a00      	cmp	r2, #0
 80064ec:	d1fb      	bne.n	80064e6 <ai_platform_api_get_network_report+0x70e>
 80064ee:	4a40      	ldr	r2, [pc, #256]	; (80065f0 <ai_platform_api_get_network_report+0x818>)
 80064f0:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 80064f4:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 80064f8:	4b3e      	ldr	r3, [pc, #248]	; (80065f4 <ai_platform_api_get_network_report+0x81c>)
 80064fa:	429a      	cmp	r2, r3
 80064fc:	f43f af38 	beq.w	8006370 <ai_platform_api_get_network_report+0x598>
 8006500:	e7fe      	b.n	8006500 <ai_platform_api_get_network_report+0x728>
 8006502:	4b3a      	ldr	r3, [pc, #232]	; (80065ec <ai_platform_api_get_network_report+0x814>)
 8006504:	2201      	movs	r2, #1
 8006506:	609a      	str	r2, [r3, #8]
 8006508:	689a      	ldr	r2, [r3, #8]
 800650a:	2a00      	cmp	r2, #0
 800650c:	d1fc      	bne.n	8006508 <ai_platform_api_get_network_report+0x730>
 800650e:	4a38      	ldr	r2, [pc, #224]	; (80065f0 <ai_platform_api_get_network_report+0x818>)
 8006510:	601a      	str	r2, [r3, #0]
 8006512:	681a      	ldr	r2, [r3, #0]
 8006514:	4b37      	ldr	r3, [pc, #220]	; (80065f4 <ai_platform_api_get_network_report+0x81c>)
 8006516:	429a      	cmp	r2, r3
 8006518:	d0b5      	beq.n	8006486 <ai_platform_api_get_network_report+0x6ae>
 800651a:	e7fe      	b.n	800651a <ai_platform_api_get_network_report+0x742>
 800651c:	4b38      	ldr	r3, [pc, #224]	; (8006600 <ai_platform_api_get_network_report+0x828>)
 800651e:	2201      	movs	r2, #1
 8006520:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 8006524:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
 8006528:	2a00      	cmp	r2, #0
 800652a:	d1fb      	bne.n	8006524 <ai_platform_api_get_network_report+0x74c>
 800652c:	4a30      	ldr	r2, [pc, #192]	; (80065f0 <ai_platform_api_get_network_report+0x818>)
 800652e:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 8006532:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 8006536:	4b2f      	ldr	r3, [pc, #188]	; (80065f4 <ai_platform_api_get_network_report+0x81c>)
 8006538:	429a      	cmp	r2, r3
 800653a:	d0a4      	beq.n	8006486 <ai_platform_api_get_network_report+0x6ae>
 800653c:	e7fe      	b.n	800653c <ai_platform_api_get_network_report+0x764>
 800653e:	4b30      	ldr	r3, [pc, #192]	; (8006600 <ai_platform_api_get_network_report+0x828>)
 8006540:	2201      	movs	r2, #1
 8006542:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 8006546:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
 800654a:	2a00      	cmp	r2, #0
 800654c:	d1fb      	bne.n	8006546 <ai_platform_api_get_network_report+0x76e>
 800654e:	4a28      	ldr	r2, [pc, #160]	; (80065f0 <ai_platform_api_get_network_report+0x818>)
 8006550:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 8006554:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 8006558:	4b26      	ldr	r3, [pc, #152]	; (80065f4 <ai_platform_api_get_network_report+0x81c>)
 800655a:	429a      	cmp	r2, r3
 800655c:	d093      	beq.n	8006486 <ai_platform_api_get_network_report+0x6ae>
 800655e:	e7fe      	b.n	800655e <ai_platform_api_get_network_report+0x786>
 8006560:	9901      	ldr	r1, [sp, #4]
 8006562:	f10d 0910 	add.w	r9, sp, #16
 8006566:	4a28      	ldr	r2, [pc, #160]	; (8006608 <ai_platform_api_get_network_report+0x830>)
 8006568:	2000      	movs	r0, #0
 800656a:	f8c1 905c 	str.w	r9, [r1, #92]	; 0x5c
 800656e:	f101 0444 	add.w	r4, r1, #68	; 0x44
 8006572:	644a      	str	r2, [r1, #68]	; 0x44
 8006574:	f240 4201 	movw	r2, #1025	; 0x401
 8006578:	f101 0560 	add.w	r5, r1, #96	; 0x60
 800657c:	4b23      	ldr	r3, [pc, #140]	; (800660c <ai_platform_api_get_network_report+0x834>)
 800657e:	658a      	str	r2, [r1, #88]	; 0x58
 8006580:	460a      	mov	r2, r1
 8006582:	2100      	movs	r1, #0
 8006584:	46a6      	mov	lr, r4
 8006586:	46ac      	mov	ip, r5
 8006588:	e9c2 0112 	strd	r0, r1, [r2, #72]	; 0x48
 800658c:	e9c2 0114 	strd	r0, r1, [r2, #80]	; 0x50
 8006590:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006592:	e889 000f 	stmia.w	r9, {r0, r1, r2, r3}
 8006596:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800659a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800659e:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 80065a2:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 80065a6:	4630      	mov	r0, r6
 80065a8:	f7fe feb2 	bl	8005310 <ai_buffer_array_sane>
 80065ac:	b990      	cbnz	r0, 80065d4 <ai_platform_api_get_network_report+0x7fc>
 80065ae:	4640      	mov	r0, r8
 80065b0:	f7fe feae 	bl	8005310 <ai_buffer_array_sane>
 80065b4:	b910      	cbnz	r0, 80065bc <ai_platform_api_get_network_report+0x7e4>
 80065b6:	2301      	movs	r3, #1
 80065b8:	9302      	str	r3, [sp, #8]
 80065ba:	e4e5      	b.n	8005f88 <ai_platform_api_get_network_report+0x1b0>
 80065bc:	4640      	mov	r0, r8
 80065be:	f7fe fea7 	bl	8005310 <ai_buffer_array_sane>
 80065c2:	b328      	cbz	r0, 8006610 <ai_platform_api_get_network_report+0x838>
 80065c4:	6a3d      	ldr	r5, [r7, #32]
 80065c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80065c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80065ca:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80065ce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80065d2:	e7f0      	b.n	80065b6 <ai_platform_api_get_network_report+0x7de>
 80065d4:	4630      	mov	r0, r6
 80065d6:	f7fe fe9b 	bl	8005310 <ai_buffer_array_sane>
 80065da:	b308      	cbz	r0, 8006620 <ai_platform_api_get_network_report+0x848>
 80065dc:	6abe      	ldr	r6, [r7, #40]	; 0x28
 80065de:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80065e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80065e2:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 80065e6:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80065ea:	e7e0      	b.n	80065ae <ai_platform_api_get_network_report+0x7d6>
 80065ec:	40023000 	.word	0x40023000
 80065f0:	f407a5c2 	.word	0xf407a5c2
 80065f4:	b5e8b5cd 	.word	0xb5e8b5cd
 80065f8:	e0042000 	.word	0xe0042000
 80065fc:	5c001000 	.word	0x5c001000
 8006600:	58024000 	.word	0x58024000
 8006604:	a1facade 	.word	0xa1facade
 8006608:	00040440 	.word	0x00040440
 800660c:	0800d2ec 	.word	0x0800d2ec
 8006610:	4605      	mov	r5, r0
 8006612:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006614:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006616:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800661a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800661e:	deff      	udf	#255	; 0xff
 8006620:	4604      	mov	r4, r0
 8006622:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006624:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006626:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800662a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800662e:	deff      	udf	#255	; 0xff

08006630 <ai_platform_network_create>:
 8006630:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006634:	b083      	sub	sp, #12
 8006636:	4604      	mov	r4, r0
 8006638:	4615      	mov	r5, r2
 800663a:	461e      	mov	r6, r3
 800663c:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 8006640:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
 8006644:	f7fe ff10 	bl	8005468 <_ai_platform_acquire_crc>
 8006648:	2800      	cmp	r0, #0
 800664a:	f000 80bd 	beq.w	80067c8 <ai_platform_network_create+0x198>
 800664e:	4ba5      	ldr	r3, [pc, #660]	; (80068e4 <ai_platform_network_create+0x2b4>)
 8006650:	f46f 6c8a 	mvn.w	ip, #1104	; 0x450
 8006654:	4601      	mov	r1, r0
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800665c:	eb03 020c 	add.w	r2, r3, ip
 8006660:	2a01      	cmp	r2, #1
 8006662:	f240 80a8 	bls.w	80067b6 <ai_platform_network_create+0x186>
 8006666:	f240 4249 	movw	r2, #1097	; 0x449
 800666a:	4293      	cmp	r3, r2
 800666c:	f000 80a3 	beq.w	80067b6 <ai_platform_network_create+0x186>
 8006670:	4a9d      	ldr	r2, [pc, #628]	; (80068e8 <ai_platform_network_create+0x2b8>)
 8006672:	6813      	ldr	r3, [r2, #0]
 8006674:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006678:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800667c:	f000 80b9 	beq.w	80067f2 <ai_platform_network_create+0x1c2>
 8006680:	6813      	ldr	r3, [r2, #0]
 8006682:	f240 4c83 	movw	ip, #1155	; 0x483
 8006686:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800668a:	4563      	cmp	r3, ip
 800668c:	f000 80a1 	beq.w	80067d2 <ai_platform_network_create+0x1a2>
 8006690:	6813      	ldr	r3, [r2, #0]
 8006692:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006696:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800669a:	f000 8153 	beq.w	8006944 <ai_platform_network_create+0x314>
 800669e:	6813      	ldr	r3, [r2, #0]
 80066a0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	f040 808d 	bne.w	80067c4 <ai_platform_network_create+0x194>
 80066aa:	4a90      	ldr	r2, [pc, #576]	; (80068ec <ai_platform_network_create+0x2bc>)
 80066ac:	2318      	movs	r3, #24
 80066ae:	6093      	str	r3, [r2, #8]
 80066b0:	6893      	ldr	r3, [r2, #8]
 80066b2:	2b18      	cmp	r3, #24
 80066b4:	f040 8086 	bne.w	80067c4 <ai_platform_network_create+0x194>
 80066b8:	2301      	movs	r3, #1
 80066ba:	6093      	str	r3, [r2, #8]
 80066bc:	6893      	ldr	r3, [r2, #8]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d1fc      	bne.n	80066bc <ai_platform_network_create+0x8c>
 80066c2:	4608      	mov	r0, r1
 80066c4:	f7fe fed2 	bl	800546c <_ai_platform_release_crc>
 80066c8:	f7fe fece 	bl	8005468 <_ai_platform_acquire_crc>
 80066cc:	4b85      	ldr	r3, [pc, #532]	; (80068e4 <ai_platform_network_create+0x2b4>)
 80066ce:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80066d8:	189a      	adds	r2, r3, r2
 80066da:	2a01      	cmp	r2, #1
 80066dc:	f240 809f 	bls.w	800681e <ai_platform_network_create+0x1ee>
 80066e0:	f240 4249 	movw	r2, #1097	; 0x449
 80066e4:	4293      	cmp	r3, r2
 80066e6:	f000 809a 	beq.w	800681e <ai_platform_network_create+0x1ee>
 80066ea:	4a7f      	ldr	r2, [pc, #508]	; (80068e8 <ai_platform_network_create+0x2b8>)
 80066ec:	6813      	ldr	r3, [r2, #0]
 80066ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80066f2:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 80066f6:	f000 80a0 	beq.w	800683a <ai_platform_network_create+0x20a>
 80066fa:	6813      	ldr	r3, [r2, #0]
 80066fc:	f240 4183 	movw	r1, #1155	; 0x483
 8006700:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006704:	428b      	cmp	r3, r1
 8006706:	f000 80bf 	beq.w	8006888 <ai_platform_network_create+0x258>
 800670a:	6813      	ldr	r3, [r2, #0]
 800670c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006710:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8006714:	f000 8123 	beq.w	800695e <ai_platform_network_create+0x32e>
 8006718:	6813      	ldr	r3, [r2, #0]
 800671a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800671e:	2b00      	cmp	r3, #0
 8006720:	f000 80c4 	beq.w	80068ac <ai_platform_network_create+0x27c>
 8006724:	f7fe fea2 	bl	800546c <_ai_platform_release_crc>
 8006728:	2c00      	cmp	r4, #0
 800672a:	f000 80aa 	beq.w	8006882 <ai_platform_network_create+0x252>
 800672e:	4b70      	ldr	r3, [pc, #448]	; (80068f0 <ai_platform_network_create+0x2c0>)
 8006730:	602b      	str	r3, [r5, #0]
 8006732:	6025      	str	r5, [r4, #0]
 8006734:	f001 fb2e 	bl	8007d94 <core_init>
 8006738:	2800      	cmp	r0, #0
 800673a:	f000 8090 	beq.w	800685e <ai_platform_network_create+0x22e>
 800673e:	f7fe fe93 	bl	8005468 <_ai_platform_acquire_crc>
 8006742:	4b68      	ldr	r3, [pc, #416]	; (80068e4 <ai_platform_network_create+0x2b4>)
 8006744:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800674e:	185a      	adds	r2, r3, r1
 8006750:	2a01      	cmp	r2, #1
 8006752:	f240 80b9 	bls.w	80068c8 <ai_platform_network_create+0x298>
 8006756:	f240 4249 	movw	r2, #1097	; 0x449
 800675a:	4293      	cmp	r3, r2
 800675c:	f000 80b4 	beq.w	80068c8 <ai_platform_network_create+0x298>
 8006760:	4a61      	ldr	r2, [pc, #388]	; (80068e8 <ai_platform_network_create+0x2b8>)
 8006762:	6813      	ldr	r3, [r2, #0]
 8006764:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006768:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800676c:	f000 80c8 	beq.w	8006900 <ai_platform_network_create+0x2d0>
 8006770:	6813      	ldr	r3, [r2, #0]
 8006772:	f240 4183 	movw	r1, #1155	; 0x483
 8006776:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800677a:	428b      	cmp	r3, r1
 800677c:	f000 8107 	beq.w	800698e <ai_platform_network_create+0x35e>
 8006780:	6813      	ldr	r3, [r2, #0]
 8006782:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006786:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800678a:	f000 8111 	beq.w	80069b0 <ai_platform_network_create+0x380>
 800678e:	6813      	ldr	r3, [r2, #0]
 8006790:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006794:	2b00      	cmp	r3, #0
 8006796:	f040 80c3 	bne.w	8006920 <ai_platform_network_create+0x2f0>
 800679a:	4b54      	ldr	r3, [pc, #336]	; (80068ec <ai_platform_network_create+0x2bc>)
 800679c:	2201      	movs	r2, #1
 800679e:	609a      	str	r2, [r3, #8]
 80067a0:	689a      	ldr	r2, [r3, #8]
 80067a2:	2a00      	cmp	r2, #0
 80067a4:	d1fc      	bne.n	80067a0 <ai_platform_network_create+0x170>
 80067a6:	4a53      	ldr	r2, [pc, #332]	; (80068f4 <ai_platform_network_create+0x2c4>)
 80067a8:	601a      	str	r2, [r3, #0]
 80067aa:	681a      	ldr	r2, [r3, #0]
 80067ac:	4b52      	ldr	r3, [pc, #328]	; (80068f8 <ai_platform_network_create+0x2c8>)
 80067ae:	429a      	cmp	r2, r3
 80067b0:	f000 80b6 	beq.w	8006920 <ai_platform_network_create+0x2f0>
 80067b4:	e7fe      	b.n	80067b4 <ai_platform_network_create+0x184>
 80067b6:	4b4d      	ldr	r3, [pc, #308]	; (80068ec <ai_platform_network_create+0x2bc>)
 80067b8:	2218      	movs	r2, #24
 80067ba:	609a      	str	r2, [r3, #8]
 80067bc:	689a      	ldr	r2, [r3, #8]
 80067be:	2a18      	cmp	r2, #24
 80067c0:	d027      	beq.n	8006812 <ai_platform_network_create+0x1e2>
 80067c2:	4608      	mov	r0, r1
 80067c4:	f7fe fe52 	bl	800546c <_ai_platform_release_crc>
 80067c8:	f244 1033 	movw	r0, #16691	; 0x4133
 80067cc:	b003      	add	sp, #12
 80067ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80067d2:	4a4a      	ldr	r2, [pc, #296]	; (80068fc <ai_platform_network_create+0x2cc>)
 80067d4:	2318      	movs	r3, #24
 80067d6:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80067da:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80067de:	2b18      	cmp	r3, #24
 80067e0:	d1f0      	bne.n	80067c4 <ai_platform_network_create+0x194>
 80067e2:	2301      	movs	r3, #1
 80067e4:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80067e8:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d1fb      	bne.n	80067e8 <ai_platform_network_create+0x1b8>
 80067f0:	e767      	b.n	80066c2 <ai_platform_network_create+0x92>
 80067f2:	4a42      	ldr	r2, [pc, #264]	; (80068fc <ai_platform_network_create+0x2cc>)
 80067f4:	2318      	movs	r3, #24
 80067f6:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80067fa:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80067fe:	2b18      	cmp	r3, #24
 8006800:	d1e0      	bne.n	80067c4 <ai_platform_network_create+0x194>
 8006802:	2301      	movs	r3, #1
 8006804:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8006808:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800680c:	2b00      	cmp	r3, #0
 800680e:	d1fb      	bne.n	8006808 <ai_platform_network_create+0x1d8>
 8006810:	e757      	b.n	80066c2 <ai_platform_network_create+0x92>
 8006812:	2201      	movs	r2, #1
 8006814:	609a      	str	r2, [r3, #8]
 8006816:	689a      	ldr	r2, [r3, #8]
 8006818:	2a00      	cmp	r2, #0
 800681a:	d1fc      	bne.n	8006816 <ai_platform_network_create+0x1e6>
 800681c:	e751      	b.n	80066c2 <ai_platform_network_create+0x92>
 800681e:	4a33      	ldr	r2, [pc, #204]	; (80068ec <ai_platform_network_create+0x2bc>)
 8006820:	2301      	movs	r3, #1
 8006822:	6093      	str	r3, [r2, #8]
 8006824:	6891      	ldr	r1, [r2, #8]
 8006826:	2900      	cmp	r1, #0
 8006828:	d1fc      	bne.n	8006824 <ai_platform_network_create+0x1f4>
 800682a:	4b32      	ldr	r3, [pc, #200]	; (80068f4 <ai_platform_network_create+0x2c4>)
 800682c:	6013      	str	r3, [r2, #0]
 800682e:	4b32      	ldr	r3, [pc, #200]	; (80068f8 <ai_platform_network_create+0x2c8>)
 8006830:	6812      	ldr	r2, [r2, #0]
 8006832:	429a      	cmp	r2, r3
 8006834:	f43f af76 	beq.w	8006724 <ai_platform_network_create+0xf4>
 8006838:	e7fe      	b.n	8006838 <ai_platform_network_create+0x208>
 800683a:	4a30      	ldr	r2, [pc, #192]	; (80068fc <ai_platform_network_create+0x2cc>)
 800683c:	2301      	movs	r3, #1
 800683e:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8006842:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8006846:	2b00      	cmp	r3, #0
 8006848:	d1fb      	bne.n	8006842 <ai_platform_network_create+0x212>
 800684a:	4b2a      	ldr	r3, [pc, #168]	; (80068f4 <ai_platform_network_create+0x2c4>)
 800684c:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8006850:	4b29      	ldr	r3, [pc, #164]	; (80068f8 <ai_platform_network_create+0x2c8>)
 8006852:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8006856:	429a      	cmp	r2, r3
 8006858:	f43f af64 	beq.w	8006724 <ai_platform_network_create+0xf4>
 800685c:	e7fe      	b.n	800685c <ai_platform_network_create+0x22c>
 800685e:	f04f 0930 	mov.w	r9, #48	; 0x30
 8006862:	2300      	movs	r3, #0
 8006864:	6023      	str	r3, [r4, #0]
 8006866:	2410      	movs	r4, #16
 8006868:	4642      	mov	r2, r8
 800686a:	4639      	mov	r1, r7
 800686c:	4630      	mov	r0, r6
 800686e:	f002 fd37 	bl	80092e0 <ai_version_get>
 8006872:	4603      	mov	r3, r0
 8006874:	2000      	movs	r0, #0
 8006876:	64ab      	str	r3, [r5, #72]	; 0x48
 8006878:	f369 0007 	bfi	r0, r9, #0, #8
 800687c:	f364 201f 	bfi	r0, r4, #8, #24
 8006880:	e7a4      	b.n	80067cc <ai_platform_network_create+0x19c>
 8006882:	f241 0010 	movw	r0, #4112	; 0x1010
 8006886:	e7a1      	b.n	80067cc <ai_platform_network_create+0x19c>
 8006888:	4a1c      	ldr	r2, [pc, #112]	; (80068fc <ai_platform_network_create+0x2cc>)
 800688a:	2301      	movs	r3, #1
 800688c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8006890:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8006894:	2b00      	cmp	r3, #0
 8006896:	d1fb      	bne.n	8006890 <ai_platform_network_create+0x260>
 8006898:	4b16      	ldr	r3, [pc, #88]	; (80068f4 <ai_platform_network_create+0x2c4>)
 800689a:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800689e:	4b16      	ldr	r3, [pc, #88]	; (80068f8 <ai_platform_network_create+0x2c8>)
 80068a0:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80068a4:	429a      	cmp	r2, r3
 80068a6:	f43f af3d 	beq.w	8006724 <ai_platform_network_create+0xf4>
 80068aa:	e7fe      	b.n	80068aa <ai_platform_network_create+0x27a>
 80068ac:	4a0f      	ldr	r2, [pc, #60]	; (80068ec <ai_platform_network_create+0x2bc>)
 80068ae:	2301      	movs	r3, #1
 80068b0:	6093      	str	r3, [r2, #8]
 80068b2:	6893      	ldr	r3, [r2, #8]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d1fc      	bne.n	80068b2 <ai_platform_network_create+0x282>
 80068b8:	4b0e      	ldr	r3, [pc, #56]	; (80068f4 <ai_platform_network_create+0x2c4>)
 80068ba:	6013      	str	r3, [r2, #0]
 80068bc:	4b0e      	ldr	r3, [pc, #56]	; (80068f8 <ai_platform_network_create+0x2c8>)
 80068be:	6812      	ldr	r2, [r2, #0]
 80068c0:	429a      	cmp	r2, r3
 80068c2:	f43f af2f 	beq.w	8006724 <ai_platform_network_create+0xf4>
 80068c6:	e7fe      	b.n	80068c6 <ai_platform_network_create+0x296>
 80068c8:	4a08      	ldr	r2, [pc, #32]	; (80068ec <ai_platform_network_create+0x2bc>)
 80068ca:	2301      	movs	r3, #1
 80068cc:	6093      	str	r3, [r2, #8]
 80068ce:	6893      	ldr	r3, [r2, #8]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d1fc      	bne.n	80068ce <ai_platform_network_create+0x29e>
 80068d4:	4b07      	ldr	r3, [pc, #28]	; (80068f4 <ai_platform_network_create+0x2c4>)
 80068d6:	6013      	str	r3, [r2, #0]
 80068d8:	4b07      	ldr	r3, [pc, #28]	; (80068f8 <ai_platform_network_create+0x2c8>)
 80068da:	6812      	ldr	r2, [r2, #0]
 80068dc:	429a      	cmp	r2, r3
 80068de:	d01f      	beq.n	8006920 <ai_platform_network_create+0x2f0>
 80068e0:	e7fe      	b.n	80068e0 <ai_platform_network_create+0x2b0>
 80068e2:	bf00      	nop
 80068e4:	e0042000 	.word	0xe0042000
 80068e8:	5c001000 	.word	0x5c001000
 80068ec:	40023000 	.word	0x40023000
 80068f0:	a1c00100 	.word	0xa1c00100
 80068f4:	f407a5c2 	.word	0xf407a5c2
 80068f8:	b5e8b5cd 	.word	0xb5e8b5cd
 80068fc:	58024000 	.word	0x58024000
 8006900:	4a33      	ldr	r2, [pc, #204]	; (80069d0 <ai_platform_network_create+0x3a0>)
 8006902:	2301      	movs	r3, #1
 8006904:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8006908:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800690c:	2b00      	cmp	r3, #0
 800690e:	d1fb      	bne.n	8006908 <ai_platform_network_create+0x2d8>
 8006910:	4b30      	ldr	r3, [pc, #192]	; (80069d4 <ai_platform_network_create+0x3a4>)
 8006912:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8006916:	4b30      	ldr	r3, [pc, #192]	; (80069d8 <ai_platform_network_create+0x3a8>)
 8006918:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800691c:	429a      	cmp	r2, r3
 800691e:	d12c      	bne.n	800697a <ai_platform_network_create+0x34a>
 8006920:	f7fe fda4 	bl	800546c <_ai_platform_release_crc>
 8006924:	2200      	movs	r2, #0
 8006926:	4639      	mov	r1, r7
 8006928:	4630      	mov	r0, r6
 800692a:	f002 fcd9 	bl	80092e0 <ai_version_get>
 800692e:	4681      	mov	r9, r0
 8006930:	2200      	movs	r2, #0
 8006932:	2105      	movs	r1, #5
 8006934:	2001      	movs	r0, #1
 8006936:	f002 fcd3 	bl	80092e0 <ai_version_get>
 800693a:	4581      	cmp	r9, r0
 800693c:	d01e      	beq.n	800697c <ai_platform_network_create+0x34c>
 800693e:	f04f 0901 	mov.w	r9, #1
 8006942:	e78e      	b.n	8006862 <ai_platform_network_create+0x232>
 8006944:	4b25      	ldr	r3, [pc, #148]	; (80069dc <ai_platform_network_create+0x3ac>)
 8006946:	2218      	movs	r2, #24
 8006948:	609a      	str	r2, [r3, #8]
 800694a:	689a      	ldr	r2, [r3, #8]
 800694c:	2a18      	cmp	r2, #24
 800694e:	f47f af39 	bne.w	80067c4 <ai_platform_network_create+0x194>
 8006952:	2201      	movs	r2, #1
 8006954:	609a      	str	r2, [r3, #8]
 8006956:	689a      	ldr	r2, [r3, #8]
 8006958:	2a00      	cmp	r2, #0
 800695a:	d1fc      	bne.n	8006956 <ai_platform_network_create+0x326>
 800695c:	e6b1      	b.n	80066c2 <ai_platform_network_create+0x92>
 800695e:	4a1f      	ldr	r2, [pc, #124]	; (80069dc <ai_platform_network_create+0x3ac>)
 8006960:	2301      	movs	r3, #1
 8006962:	6093      	str	r3, [r2, #8]
 8006964:	6893      	ldr	r3, [r2, #8]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d1fc      	bne.n	8006964 <ai_platform_network_create+0x334>
 800696a:	4b1a      	ldr	r3, [pc, #104]	; (80069d4 <ai_platform_network_create+0x3a4>)
 800696c:	6013      	str	r3, [r2, #0]
 800696e:	4b1a      	ldr	r3, [pc, #104]	; (80069d8 <ai_platform_network_create+0x3a8>)
 8006970:	6812      	ldr	r2, [r2, #0]
 8006972:	429a      	cmp	r2, r3
 8006974:	f43f aed6 	beq.w	8006724 <ai_platform_network_create+0xf4>
 8006978:	e7fe      	b.n	8006978 <ai_platform_network_create+0x348>
 800697a:	e7fe      	b.n	800697a <ai_platform_network_create+0x34a>
 800697c:	4b18      	ldr	r3, [pc, #96]	; (80069e0 <ai_platform_network_create+0x3b0>)
 800697e:	a801      	add	r0, sp, #4
 8006980:	9301      	str	r3, [sp, #4]
 8006982:	f001 fb87 	bl	8008094 <ai_check_custom_types>
 8006986:	b300      	cbz	r0, 80069ca <ai_platform_network_create+0x39a>
 8006988:	2400      	movs	r4, #0
 800698a:	46a1      	mov	r9, r4
 800698c:	e76c      	b.n	8006868 <ai_platform_network_create+0x238>
 800698e:	4b10      	ldr	r3, [pc, #64]	; (80069d0 <ai_platform_network_create+0x3a0>)
 8006990:	2201      	movs	r2, #1
 8006992:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 8006996:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
 800699a:	2a00      	cmp	r2, #0
 800699c:	d1fb      	bne.n	8006996 <ai_platform_network_create+0x366>
 800699e:	4a0d      	ldr	r2, [pc, #52]	; (80069d4 <ai_platform_network_create+0x3a4>)
 80069a0:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 80069a4:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 80069a8:	4b0b      	ldr	r3, [pc, #44]	; (80069d8 <ai_platform_network_create+0x3a8>)
 80069aa:	429a      	cmp	r2, r3
 80069ac:	d0b8      	beq.n	8006920 <ai_platform_network_create+0x2f0>
 80069ae:	e7fe      	b.n	80069ae <ai_platform_network_create+0x37e>
 80069b0:	4b0a      	ldr	r3, [pc, #40]	; (80069dc <ai_platform_network_create+0x3ac>)
 80069b2:	2201      	movs	r2, #1
 80069b4:	609a      	str	r2, [r3, #8]
 80069b6:	689a      	ldr	r2, [r3, #8]
 80069b8:	2a00      	cmp	r2, #0
 80069ba:	d1fc      	bne.n	80069b6 <ai_platform_network_create+0x386>
 80069bc:	4a05      	ldr	r2, [pc, #20]	; (80069d4 <ai_platform_network_create+0x3a4>)
 80069be:	601a      	str	r2, [r3, #0]
 80069c0:	681a      	ldr	r2, [r3, #0]
 80069c2:	4b05      	ldr	r3, [pc, #20]	; (80069d8 <ai_platform_network_create+0x3a8>)
 80069c4:	429a      	cmp	r2, r3
 80069c6:	d0ab      	beq.n	8006920 <ai_platform_network_create+0x2f0>
 80069c8:	e7fe      	b.n	80069c8 <ai_platform_network_create+0x398>
 80069ca:	f04f 0902 	mov.w	r9, #2
 80069ce:	e748      	b.n	8006862 <ai_platform_network_create+0x232>
 80069d0:	58024000 	.word	0x58024000
 80069d4:	f407a5c2 	.word	0xf407a5c2
 80069d8:	b5e8b5cd 	.word	0xb5e8b5cd
 80069dc:	40023000 	.word	0x40023000
 80069e0:	84048403 	.word	0x84048403

080069e4 <ai_platform_network_destroy>:
 80069e4:	b510      	push	{r4, lr}
 80069e6:	4604      	mov	r4, r0
 80069e8:	2800      	cmp	r0, #0
 80069ea:	d03d      	beq.n	8006a68 <ai_platform_network_destroy+0x84>
 80069ec:	4b7a      	ldr	r3, [pc, #488]	; (8006bd8 <ai_platform_network_destroy+0x1f4>)
 80069ee:	6802      	ldr	r2, [r0, #0]
 80069f0:	429a      	cmp	r2, r3
 80069f2:	d139      	bne.n	8006a68 <ai_platform_network_destroy+0x84>
 80069f4:	f7fe fd38 	bl	8005468 <_ai_platform_acquire_crc>
 80069f8:	4b78      	ldr	r3, [pc, #480]	; (8006bdc <ai_platform_network_destroy+0x1f8>)
 80069fa:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006a04:	189a      	adds	r2, r3, r2
 8006a06:	2a01      	cmp	r2, #1
 8006a08:	f240 8084 	bls.w	8006b14 <ai_platform_network_destroy+0x130>
 8006a0c:	f240 4249 	movw	r2, #1097	; 0x449
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d07f      	beq.n	8006b14 <ai_platform_network_destroy+0x130>
 8006a14:	4a72      	ldr	r2, [pc, #456]	; (8006be0 <ai_platform_network_destroy+0x1fc>)
 8006a16:	6813      	ldr	r3, [r2, #0]
 8006a18:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006a1c:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8006a20:	f000 8086 	beq.w	8006b30 <ai_platform_network_destroy+0x14c>
 8006a24:	6813      	ldr	r3, [r2, #0]
 8006a26:	f240 4183 	movw	r1, #1155	; 0x483
 8006a2a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006a2e:	428b      	cmp	r3, r1
 8006a30:	f000 80a7 	beq.w	8006b82 <ai_platform_network_destroy+0x19e>
 8006a34:	6813      	ldr	r3, [r2, #0]
 8006a36:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006a3a:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8006a3e:	f000 80be 	beq.w	8006bbe <ai_platform_network_destroy+0x1da>
 8006a42:	6813      	ldr	r3, [r2, #0]
 8006a44:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	f040 8081 	bne.w	8006b50 <ai_platform_network_destroy+0x16c>
 8006a4e:	4a65      	ldr	r2, [pc, #404]	; (8006be4 <ai_platform_network_destroy+0x200>)
 8006a50:	2301      	movs	r3, #1
 8006a52:	6093      	str	r3, [r2, #8]
 8006a54:	6893      	ldr	r3, [r2, #8]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d1fc      	bne.n	8006a54 <ai_platform_network_destroy+0x70>
 8006a5a:	4963      	ldr	r1, [pc, #396]	; (8006be8 <ai_platform_network_destroy+0x204>)
 8006a5c:	4b63      	ldr	r3, [pc, #396]	; (8006bec <ai_platform_network_destroy+0x208>)
 8006a5e:	6011      	str	r1, [r2, #0]
 8006a60:	6812      	ldr	r2, [r2, #0]
 8006a62:	429a      	cmp	r2, r3
 8006a64:	d074      	beq.n	8006b50 <ai_platform_network_destroy+0x16c>
 8006a66:	e7fe      	b.n	8006a66 <ai_platform_network_destroy+0x82>
 8006a68:	f7fe fcfe 	bl	8005468 <_ai_platform_acquire_crc>
 8006a6c:	4b5b      	ldr	r3, [pc, #364]	; (8006bdc <ai_platform_network_destroy+0x1f8>)
 8006a6e:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006a78:	185a      	adds	r2, r3, r1
 8006a7a:	2a01      	cmp	r2, #1
 8006a7c:	d929      	bls.n	8006ad2 <ai_platform_network_destroy+0xee>
 8006a7e:	f240 4249 	movw	r2, #1097	; 0x449
 8006a82:	4293      	cmp	r3, r2
 8006a84:	d025      	beq.n	8006ad2 <ai_platform_network_destroy+0xee>
 8006a86:	4a56      	ldr	r2, [pc, #344]	; (8006be0 <ai_platform_network_destroy+0x1fc>)
 8006a88:	6813      	ldr	r3, [r2, #0]
 8006a8a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006a8e:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8006a92:	d02b      	beq.n	8006aec <ai_platform_network_destroy+0x108>
 8006a94:	6813      	ldr	r3, [r2, #0]
 8006a96:	f240 4183 	movw	r1, #1155	; 0x483
 8006a9a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006a9e:	428b      	cmp	r3, r1
 8006aa0:	d05e      	beq.n	8006b60 <ai_platform_network_destroy+0x17c>
 8006aa2:	6813      	ldr	r3, [r2, #0]
 8006aa4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006aa8:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8006aac:	d07a      	beq.n	8006ba4 <ai_platform_network_destroy+0x1c0>
 8006aae:	6813      	ldr	r3, [r2, #0]
 8006ab0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d129      	bne.n	8006b0c <ai_platform_network_destroy+0x128>
 8006ab8:	4a4a      	ldr	r2, [pc, #296]	; (8006be4 <ai_platform_network_destroy+0x200>)
 8006aba:	2301      	movs	r3, #1
 8006abc:	6093      	str	r3, [r2, #8]
 8006abe:	6893      	ldr	r3, [r2, #8]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d1fc      	bne.n	8006abe <ai_platform_network_destroy+0xda>
 8006ac4:	4948      	ldr	r1, [pc, #288]	; (8006be8 <ai_platform_network_destroy+0x204>)
 8006ac6:	4b49      	ldr	r3, [pc, #292]	; (8006bec <ai_platform_network_destroy+0x208>)
 8006ac8:	6011      	str	r1, [r2, #0]
 8006aca:	6812      	ldr	r2, [r2, #0]
 8006acc:	429a      	cmp	r2, r3
 8006ace:	d01d      	beq.n	8006b0c <ai_platform_network_destroy+0x128>
 8006ad0:	e7fe      	b.n	8006ad0 <ai_platform_network_destroy+0xec>
 8006ad2:	4a44      	ldr	r2, [pc, #272]	; (8006be4 <ai_platform_network_destroy+0x200>)
 8006ad4:	2301      	movs	r3, #1
 8006ad6:	6093      	str	r3, [r2, #8]
 8006ad8:	6893      	ldr	r3, [r2, #8]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d1fc      	bne.n	8006ad8 <ai_platform_network_destroy+0xf4>
 8006ade:	4942      	ldr	r1, [pc, #264]	; (8006be8 <ai_platform_network_destroy+0x204>)
 8006ae0:	4b42      	ldr	r3, [pc, #264]	; (8006bec <ai_platform_network_destroy+0x208>)
 8006ae2:	6011      	str	r1, [r2, #0]
 8006ae4:	6812      	ldr	r2, [r2, #0]
 8006ae6:	429a      	cmp	r2, r3
 8006ae8:	d010      	beq.n	8006b0c <ai_platform_network_destroy+0x128>
 8006aea:	e7fe      	b.n	8006aea <ai_platform_network_destroy+0x106>
 8006aec:	4a40      	ldr	r2, [pc, #256]	; (8006bf0 <ai_platform_network_destroy+0x20c>)
 8006aee:	2301      	movs	r3, #1
 8006af0:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8006af4:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d1fb      	bne.n	8006af4 <ai_platform_network_destroy+0x110>
 8006afc:	493a      	ldr	r1, [pc, #232]	; (8006be8 <ai_platform_network_destroy+0x204>)
 8006afe:	4b3b      	ldr	r3, [pc, #236]	; (8006bec <ai_platform_network_destroy+0x208>)
 8006b00:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8006b04:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8006b08:	429a      	cmp	r2, r3
 8006b0a:	d110      	bne.n	8006b2e <ai_platform_network_destroy+0x14a>
 8006b0c:	f7fe fcae 	bl	800546c <_ai_platform_release_crc>
 8006b10:	4620      	mov	r0, r4
 8006b12:	bd10      	pop	{r4, pc}
 8006b14:	4a33      	ldr	r2, [pc, #204]	; (8006be4 <ai_platform_network_destroy+0x200>)
 8006b16:	2301      	movs	r3, #1
 8006b18:	6093      	str	r3, [r2, #8]
 8006b1a:	6893      	ldr	r3, [r2, #8]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d1fc      	bne.n	8006b1a <ai_platform_network_destroy+0x136>
 8006b20:	4931      	ldr	r1, [pc, #196]	; (8006be8 <ai_platform_network_destroy+0x204>)
 8006b22:	4b32      	ldr	r3, [pc, #200]	; (8006bec <ai_platform_network_destroy+0x208>)
 8006b24:	6011      	str	r1, [r2, #0]
 8006b26:	6812      	ldr	r2, [r2, #0]
 8006b28:	429a      	cmp	r2, r3
 8006b2a:	d011      	beq.n	8006b50 <ai_platform_network_destroy+0x16c>
 8006b2c:	e7fe      	b.n	8006b2c <ai_platform_network_destroy+0x148>
 8006b2e:	e7fe      	b.n	8006b2e <ai_platform_network_destroy+0x14a>
 8006b30:	4a2f      	ldr	r2, [pc, #188]	; (8006bf0 <ai_platform_network_destroy+0x20c>)
 8006b32:	2301      	movs	r3, #1
 8006b34:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8006b38:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d1fb      	bne.n	8006b38 <ai_platform_network_destroy+0x154>
 8006b40:	4929      	ldr	r1, [pc, #164]	; (8006be8 <ai_platform_network_destroy+0x204>)
 8006b42:	4b2a      	ldr	r3, [pc, #168]	; (8006bec <ai_platform_network_destroy+0x208>)
 8006b44:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8006b48:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8006b4c:	429a      	cmp	r2, r3
 8006b4e:	d106      	bne.n	8006b5e <ai_platform_network_destroy+0x17a>
 8006b50:	f7fe fc8c 	bl	800546c <_ai_platform_release_crc>
 8006b54:	4620      	mov	r0, r4
 8006b56:	f001 fb5f 	bl	8008218 <ai_layers_destroy_all>
 8006b5a:	2000      	movs	r0, #0
 8006b5c:	bd10      	pop	{r4, pc}
 8006b5e:	e7fe      	b.n	8006b5e <ai_platform_network_destroy+0x17a>
 8006b60:	4a23      	ldr	r2, [pc, #140]	; (8006bf0 <ai_platform_network_destroy+0x20c>)
 8006b62:	2301      	movs	r3, #1
 8006b64:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8006b68:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d1fb      	bne.n	8006b68 <ai_platform_network_destroy+0x184>
 8006b70:	491d      	ldr	r1, [pc, #116]	; (8006be8 <ai_platform_network_destroy+0x204>)
 8006b72:	4b1e      	ldr	r3, [pc, #120]	; (8006bec <ai_platform_network_destroy+0x208>)
 8006b74:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8006b78:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8006b7c:	429a      	cmp	r2, r3
 8006b7e:	d0c5      	beq.n	8006b0c <ai_platform_network_destroy+0x128>
 8006b80:	e7fe      	b.n	8006b80 <ai_platform_network_destroy+0x19c>
 8006b82:	4a1b      	ldr	r2, [pc, #108]	; (8006bf0 <ai_platform_network_destroy+0x20c>)
 8006b84:	2301      	movs	r3, #1
 8006b86:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8006b8a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d1fb      	bne.n	8006b8a <ai_platform_network_destroy+0x1a6>
 8006b92:	4915      	ldr	r1, [pc, #84]	; (8006be8 <ai_platform_network_destroy+0x204>)
 8006b94:	4b15      	ldr	r3, [pc, #84]	; (8006bec <ai_platform_network_destroy+0x208>)
 8006b96:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8006b9a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8006b9e:	429a      	cmp	r2, r3
 8006ba0:	d0d6      	beq.n	8006b50 <ai_platform_network_destroy+0x16c>
 8006ba2:	e7fe      	b.n	8006ba2 <ai_platform_network_destroy+0x1be>
 8006ba4:	4a0f      	ldr	r2, [pc, #60]	; (8006be4 <ai_platform_network_destroy+0x200>)
 8006ba6:	2301      	movs	r3, #1
 8006ba8:	6093      	str	r3, [r2, #8]
 8006baa:	6893      	ldr	r3, [r2, #8]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d1fc      	bne.n	8006baa <ai_platform_network_destroy+0x1c6>
 8006bb0:	490d      	ldr	r1, [pc, #52]	; (8006be8 <ai_platform_network_destroy+0x204>)
 8006bb2:	4b0e      	ldr	r3, [pc, #56]	; (8006bec <ai_platform_network_destroy+0x208>)
 8006bb4:	6011      	str	r1, [r2, #0]
 8006bb6:	6812      	ldr	r2, [r2, #0]
 8006bb8:	429a      	cmp	r2, r3
 8006bba:	d0a7      	beq.n	8006b0c <ai_platform_network_destroy+0x128>
 8006bbc:	e7fe      	b.n	8006bbc <ai_platform_network_destroy+0x1d8>
 8006bbe:	4a09      	ldr	r2, [pc, #36]	; (8006be4 <ai_platform_network_destroy+0x200>)
 8006bc0:	2301      	movs	r3, #1
 8006bc2:	6093      	str	r3, [r2, #8]
 8006bc4:	6893      	ldr	r3, [r2, #8]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d1fc      	bne.n	8006bc4 <ai_platform_network_destroy+0x1e0>
 8006bca:	4907      	ldr	r1, [pc, #28]	; (8006be8 <ai_platform_network_destroy+0x204>)
 8006bcc:	4b07      	ldr	r3, [pc, #28]	; (8006bec <ai_platform_network_destroy+0x208>)
 8006bce:	6011      	str	r1, [r2, #0]
 8006bd0:	6812      	ldr	r2, [r2, #0]
 8006bd2:	429a      	cmp	r2, r3
 8006bd4:	d0bc      	beq.n	8006b50 <ai_platform_network_destroy+0x16c>
 8006bd6:	e7fe      	b.n	8006bd6 <ai_platform_network_destroy+0x1f2>
 8006bd8:	a1c00100 	.word	0xa1c00100
 8006bdc:	e0042000 	.word	0xe0042000
 8006be0:	5c001000 	.word	0x5c001000
 8006be4:	40023000 	.word	0x40023000
 8006be8:	f407a5c2 	.word	0xf407a5c2
 8006bec:	b5e8b5cd 	.word	0xb5e8b5cd
 8006bf0:	58024000 	.word	0x58024000

08006bf4 <ai_platform_network_init>:
 8006bf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006bf8:	2800      	cmp	r0, #0
 8006bfa:	d052      	beq.n	8006ca2 <ai_platform_network_init+0xae>
 8006bfc:	4bab      	ldr	r3, [pc, #684]	; (8006eac <ai_platform_network_init+0x2b8>)
 8006bfe:	4604      	mov	r4, r0
 8006c00:	6802      	ldr	r2, [r0, #0]
 8006c02:	429a      	cmp	r2, r3
 8006c04:	d14d      	bne.n	8006ca2 <ai_platform_network_init+0xae>
 8006c06:	460d      	mov	r5, r1
 8006c08:	f7fe fc2e 	bl	8005468 <_ai_platform_acquire_crc>
 8006c0c:	4ba8      	ldr	r3, [pc, #672]	; (8006eb0 <ai_platform_network_init+0x2bc>)
 8006c0e:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006c18:	189a      	adds	r2, r3, r2
 8006c1a:	2a01      	cmp	r2, #1
 8006c1c:	f240 809b 	bls.w	8006d56 <ai_platform_network_init+0x162>
 8006c20:	f240 4249 	movw	r2, #1097	; 0x449
 8006c24:	4293      	cmp	r3, r2
 8006c26:	f000 8096 	beq.w	8006d56 <ai_platform_network_init+0x162>
 8006c2a:	4aa2      	ldr	r2, [pc, #648]	; (8006eb4 <ai_platform_network_init+0x2c0>)
 8006c2c:	6813      	ldr	r3, [r2, #0]
 8006c2e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006c32:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8006c36:	f000 809d 	beq.w	8006d74 <ai_platform_network_init+0x180>
 8006c3a:	6813      	ldr	r3, [r2, #0]
 8006c3c:	f240 4183 	movw	r1, #1155	; 0x483
 8006c40:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006c44:	428b      	cmp	r3, r1
 8006c46:	f000 80e4 	beq.w	8006e12 <ai_platform_network_init+0x21e>
 8006c4a:	6813      	ldr	r3, [r2, #0]
 8006c4c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006c50:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8006c54:	f000 811b 	beq.w	8006e8e <ai_platform_network_init+0x29a>
 8006c58:	6813      	ldr	r3, [r2, #0]
 8006c5a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	f000 80f9 	beq.w	8006e56 <ai_platform_network_init+0x262>
 8006c64:	f7fe fc02 	bl	800546c <_ai_platform_release_crc>
 8006c68:	2d00      	cmp	r5, #0
 8006c6a:	f000 8147 	beq.w	8006efc <ai_platform_network_init+0x308>
 8006c6e:	4b92      	ldr	r3, [pc, #584]	; (8006eb8 <ai_platform_network_init+0x2c4>)
 8006c70:	682a      	ldr	r2, [r5, #0]
 8006c72:	429a      	cmp	r2, r3
 8006c74:	f040 8090 	bne.w	8006d98 <ai_platform_network_init+0x1a4>
 8006c78:	692b      	ldr	r3, [r5, #16]
 8006c7a:	89ae      	ldrh	r6, [r5, #12]
 8006c7c:	f8b5 c00e 	ldrh.w	ip, [r5, #14]
 8006c80:	e9d5 1201 	ldrd	r1, r2, [r5, #4]
 8006c84:	62a3      	str	r3, [r4, #40]	; 0x28
 8006c86:	e9c4 1207 	strd	r1, r2, [r4, #28]
 8006c8a:	2303      	movs	r3, #3
 8006c8c:	84a6      	strh	r6, [r4, #36]	; 0x24
 8006c8e:	4626      	mov	r6, r4
 8006c90:	4620      	mov	r0, r4
 8006c92:	f8a4 c026 	strh.w	ip, [r4, #38]	; 0x26
 8006c96:	60e3      	str	r3, [r4, #12]
 8006c98:	f001 fa54 	bl	8008144 <ai_layers_init_all>
 8006c9c:	4630      	mov	r0, r6
 8006c9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ca2:	f7fe fbe1 	bl	8005468 <_ai_platform_acquire_crc>
 8006ca6:	4b82      	ldr	r3, [pc, #520]	; (8006eb0 <ai_platform_network_init+0x2bc>)
 8006ca8:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006cb2:	185a      	adds	r2, r3, r1
 8006cb4:	2a01      	cmp	r2, #1
 8006cb6:	d92b      	bls.n	8006d10 <ai_platform_network_init+0x11c>
 8006cb8:	f240 4249 	movw	r2, #1097	; 0x449
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d027      	beq.n	8006d10 <ai_platform_network_init+0x11c>
 8006cc0:	4a7c      	ldr	r2, [pc, #496]	; (8006eb4 <ai_platform_network_init+0x2c0>)
 8006cc2:	6813      	ldr	r3, [r2, #0]
 8006cc4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006cc8:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8006ccc:	d02d      	beq.n	8006d2a <ai_platform_network_init+0x136>
 8006cce:	6813      	ldr	r3, [r2, #0]
 8006cd0:	f240 4183 	movw	r1, #1155	; 0x483
 8006cd4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006cd8:	428b      	cmp	r3, r1
 8006cda:	f000 8089 	beq.w	8006df0 <ai_platform_network_init+0x1fc>
 8006cde:	6813      	ldr	r3, [r2, #0]
 8006ce0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006ce4:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8006ce8:	f000 80c3 	beq.w	8006e72 <ai_platform_network_init+0x27e>
 8006cec:	6813      	ldr	r3, [r2, #0]
 8006cee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d129      	bne.n	8006d4a <ai_platform_network_init+0x156>
 8006cf6:	4a71      	ldr	r2, [pc, #452]	; (8006ebc <ai_platform_network_init+0x2c8>)
 8006cf8:	2301      	movs	r3, #1
 8006cfa:	6093      	str	r3, [r2, #8]
 8006cfc:	6893      	ldr	r3, [r2, #8]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d1fc      	bne.n	8006cfc <ai_platform_network_init+0x108>
 8006d02:	496f      	ldr	r1, [pc, #444]	; (8006ec0 <ai_platform_network_init+0x2cc>)
 8006d04:	4b6f      	ldr	r3, [pc, #444]	; (8006ec4 <ai_platform_network_init+0x2d0>)
 8006d06:	6011      	str	r1, [r2, #0]
 8006d08:	6812      	ldr	r2, [r2, #0]
 8006d0a:	429a      	cmp	r2, r3
 8006d0c:	d01d      	beq.n	8006d4a <ai_platform_network_init+0x156>
 8006d0e:	e7fe      	b.n	8006d0e <ai_platform_network_init+0x11a>
 8006d10:	4a6a      	ldr	r2, [pc, #424]	; (8006ebc <ai_platform_network_init+0x2c8>)
 8006d12:	2301      	movs	r3, #1
 8006d14:	6093      	str	r3, [r2, #8]
 8006d16:	6893      	ldr	r3, [r2, #8]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d1fc      	bne.n	8006d16 <ai_platform_network_init+0x122>
 8006d1c:	4968      	ldr	r1, [pc, #416]	; (8006ec0 <ai_platform_network_init+0x2cc>)
 8006d1e:	4b69      	ldr	r3, [pc, #420]	; (8006ec4 <ai_platform_network_init+0x2d0>)
 8006d20:	6011      	str	r1, [r2, #0]
 8006d22:	6812      	ldr	r2, [r2, #0]
 8006d24:	429a      	cmp	r2, r3
 8006d26:	d010      	beq.n	8006d4a <ai_platform_network_init+0x156>
 8006d28:	e7fe      	b.n	8006d28 <ai_platform_network_init+0x134>
 8006d2a:	4a67      	ldr	r2, [pc, #412]	; (8006ec8 <ai_platform_network_init+0x2d4>)
 8006d2c:	2301      	movs	r3, #1
 8006d2e:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8006d32:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d1fb      	bne.n	8006d32 <ai_platform_network_init+0x13e>
 8006d3a:	4961      	ldr	r1, [pc, #388]	; (8006ec0 <ai_platform_network_init+0x2cc>)
 8006d3c:	4b61      	ldr	r3, [pc, #388]	; (8006ec4 <ai_platform_network_init+0x2d0>)
 8006d3e:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8006d42:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8006d46:	429a      	cmp	r2, r3
 8006d48:	d113      	bne.n	8006d72 <ai_platform_network_init+0x17e>
 8006d4a:	2600      	movs	r6, #0
 8006d4c:	f7fe fb8e 	bl	800546c <_ai_platform_release_crc>
 8006d50:	4630      	mov	r0, r6
 8006d52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d56:	4a59      	ldr	r2, [pc, #356]	; (8006ebc <ai_platform_network_init+0x2c8>)
 8006d58:	2301      	movs	r3, #1
 8006d5a:	6093      	str	r3, [r2, #8]
 8006d5c:	6893      	ldr	r3, [r2, #8]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d1fc      	bne.n	8006d5c <ai_platform_network_init+0x168>
 8006d62:	4b57      	ldr	r3, [pc, #348]	; (8006ec0 <ai_platform_network_init+0x2cc>)
 8006d64:	6013      	str	r3, [r2, #0]
 8006d66:	4b57      	ldr	r3, [pc, #348]	; (8006ec4 <ai_platform_network_init+0x2d0>)
 8006d68:	6812      	ldr	r2, [r2, #0]
 8006d6a:	429a      	cmp	r2, r3
 8006d6c:	f43f af7a 	beq.w	8006c64 <ai_platform_network_init+0x70>
 8006d70:	e7fe      	b.n	8006d70 <ai_platform_network_init+0x17c>
 8006d72:	e7fe      	b.n	8006d72 <ai_platform_network_init+0x17e>
 8006d74:	4a54      	ldr	r2, [pc, #336]	; (8006ec8 <ai_platform_network_init+0x2d4>)
 8006d76:	2301      	movs	r3, #1
 8006d78:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8006d7c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d1fb      	bne.n	8006d7c <ai_platform_network_init+0x188>
 8006d84:	4b4e      	ldr	r3, [pc, #312]	; (8006ec0 <ai_platform_network_init+0x2cc>)
 8006d86:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8006d8a:	4b4e      	ldr	r3, [pc, #312]	; (8006ec4 <ai_platform_network_init+0x2d0>)
 8006d8c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8006d90:	429a      	cmp	r2, r3
 8006d92:	f43f af67 	beq.w	8006c64 <ai_platform_network_init+0x70>
 8006d96:	e7fe      	b.n	8006d96 <ai_platform_network_init+0x1a2>
 8006d98:	2101      	movs	r1, #1
 8006d9a:	4628      	mov	r0, r5
 8006d9c:	f105 081c 	add.w	r8, r5, #28
 8006da0:	686e      	ldr	r6, [r5, #4]
 8006da2:	f7fe fa79 	bl	8005298 <ai_buffer_get_size>
 8006da6:	4607      	mov	r7, r0
 8006da8:	2101      	movs	r1, #1
 8006daa:	4640      	mov	r0, r8
 8006dac:	f8d5 9020 	ldr.w	r9, [r5, #32]
 8006db0:	f7fe fa72 	bl	8005298 <ai_buffer_get_size>
 8006db4:	2f00      	cmp	r7, #0
 8006db6:	d13e      	bne.n	8006e36 <ai_platform_network_init+0x242>
 8006db8:	2800      	cmp	r0, #0
 8006dba:	f000 808e 	beq.w	8006eda <ai_platform_network_init+0x2e6>
 8006dbe:	f1b9 0f00 	cmp.w	r9, #0
 8006dc2:	f000 8094 	beq.w	8006eee <ai_platform_network_init+0x2fa>
 8006dc6:	f04f 0c01 	mov.w	ip, #1
 8006dca:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8006dcc:	2600      	movs	r6, #0
 8006dce:	83e7      	strh	r7, [r4, #30]
 8006dd0:	4563      	cmp	r3, ip
 8006dd2:	83a6      	strh	r6, [r4, #28]
 8006dd4:	d37a      	bcc.n	8006ecc <ai_platform_network_init+0x2d8>
 8006dd6:	f1bc 0f00 	cmp.w	ip, #0
 8006dda:	f000 809c 	beq.w	8006f16 <ai_platform_network_init+0x322>
 8006dde:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8006de0:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
 8006de4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006de6:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 8006dea:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8006dee:	e74c      	b.n	8006c8a <ai_platform_network_init+0x96>
 8006df0:	4a35      	ldr	r2, [pc, #212]	; (8006ec8 <ai_platform_network_init+0x2d4>)
 8006df2:	2301      	movs	r3, #1
 8006df4:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8006df8:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d1fb      	bne.n	8006df8 <ai_platform_network_init+0x204>
 8006e00:	492f      	ldr	r1, [pc, #188]	; (8006ec0 <ai_platform_network_init+0x2cc>)
 8006e02:	4b30      	ldr	r3, [pc, #192]	; (8006ec4 <ai_platform_network_init+0x2d0>)
 8006e04:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8006e08:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8006e0c:	429a      	cmp	r2, r3
 8006e0e:	d09c      	beq.n	8006d4a <ai_platform_network_init+0x156>
 8006e10:	e7fe      	b.n	8006e10 <ai_platform_network_init+0x21c>
 8006e12:	4a2d      	ldr	r2, [pc, #180]	; (8006ec8 <ai_platform_network_init+0x2d4>)
 8006e14:	2301      	movs	r3, #1
 8006e16:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8006e1a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d1fb      	bne.n	8006e1a <ai_platform_network_init+0x226>
 8006e22:	4b27      	ldr	r3, [pc, #156]	; (8006ec0 <ai_platform_network_init+0x2cc>)
 8006e24:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8006e28:	4b26      	ldr	r3, [pc, #152]	; (8006ec4 <ai_platform_network_init+0x2d0>)
 8006e2a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8006e2e:	429a      	cmp	r2, r3
 8006e30:	f43f af18 	beq.w	8006c64 <ai_platform_network_init+0x70>
 8006e34:	e7fe      	b.n	8006e34 <ai_platform_network_init+0x240>
 8006e36:	2800      	cmp	r0, #0
 8006e38:	d153      	bne.n	8006ee2 <ai_platform_network_init+0x2ee>
 8006e3a:	4680      	mov	r8, r0
 8006e3c:	4684      	mov	ip, r0
 8006e3e:	2e00      	cmp	r6, #0
 8006e40:	d063      	beq.n	8006f0a <ai_platform_network_init+0x316>
 8006e42:	8be6      	ldrh	r6, [r4, #30]
 8006e44:	2e00      	cmp	r6, #0
 8006e46:	d168      	bne.n	8006f1a <ai_platform_network_init+0x326>
 8006e48:	2212      	movs	r2, #18
 8006e4a:	2116      	movs	r1, #22
 8006e4c:	f104 0010 	add.w	r0, r4, #16
 8006e50:	f000 ffa8 	bl	8007da4 <core_set_error>
 8006e54:	e77c      	b.n	8006d50 <ai_platform_network_init+0x15c>
 8006e56:	4a19      	ldr	r2, [pc, #100]	; (8006ebc <ai_platform_network_init+0x2c8>)
 8006e58:	2301      	movs	r3, #1
 8006e5a:	6093      	str	r3, [r2, #8]
 8006e5c:	6893      	ldr	r3, [r2, #8]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d1fc      	bne.n	8006e5c <ai_platform_network_init+0x268>
 8006e62:	4b17      	ldr	r3, [pc, #92]	; (8006ec0 <ai_platform_network_init+0x2cc>)
 8006e64:	6013      	str	r3, [r2, #0]
 8006e66:	4b17      	ldr	r3, [pc, #92]	; (8006ec4 <ai_platform_network_init+0x2d0>)
 8006e68:	6812      	ldr	r2, [r2, #0]
 8006e6a:	429a      	cmp	r2, r3
 8006e6c:	f43f aefa 	beq.w	8006c64 <ai_platform_network_init+0x70>
 8006e70:	e7fe      	b.n	8006e70 <ai_platform_network_init+0x27c>
 8006e72:	4a12      	ldr	r2, [pc, #72]	; (8006ebc <ai_platform_network_init+0x2c8>)
 8006e74:	2301      	movs	r3, #1
 8006e76:	6093      	str	r3, [r2, #8]
 8006e78:	6893      	ldr	r3, [r2, #8]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d1fc      	bne.n	8006e78 <ai_platform_network_init+0x284>
 8006e7e:	4910      	ldr	r1, [pc, #64]	; (8006ec0 <ai_platform_network_init+0x2cc>)
 8006e80:	4b10      	ldr	r3, [pc, #64]	; (8006ec4 <ai_platform_network_init+0x2d0>)
 8006e82:	6011      	str	r1, [r2, #0]
 8006e84:	6812      	ldr	r2, [r2, #0]
 8006e86:	429a      	cmp	r2, r3
 8006e88:	f43f af5f 	beq.w	8006d4a <ai_platform_network_init+0x156>
 8006e8c:	e7fe      	b.n	8006e8c <ai_platform_network_init+0x298>
 8006e8e:	4a0b      	ldr	r2, [pc, #44]	; (8006ebc <ai_platform_network_init+0x2c8>)
 8006e90:	2301      	movs	r3, #1
 8006e92:	6093      	str	r3, [r2, #8]
 8006e94:	6893      	ldr	r3, [r2, #8]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d1fc      	bne.n	8006e94 <ai_platform_network_init+0x2a0>
 8006e9a:	4b09      	ldr	r3, [pc, #36]	; (8006ec0 <ai_platform_network_init+0x2cc>)
 8006e9c:	6013      	str	r3, [r2, #0]
 8006e9e:	4b09      	ldr	r3, [pc, #36]	; (8006ec4 <ai_platform_network_init+0x2d0>)
 8006ea0:	6812      	ldr	r2, [r2, #0]
 8006ea2:	429a      	cmp	r2, r3
 8006ea4:	f43f aede 	beq.w	8006c64 <ai_platform_network_init+0x70>
 8006ea8:	e7fe      	b.n	8006ea8 <ai_platform_network_init+0x2b4>
 8006eaa:	bf00      	nop
 8006eac:	a1c00100 	.word	0xa1c00100
 8006eb0:	e0042000 	.word	0xe0042000
 8006eb4:	5c001000 	.word	0x5c001000
 8006eb8:	a1facade 	.word	0xa1facade
 8006ebc:	40023000 	.word	0x40023000
 8006ec0:	f407a5c2 	.word	0xf407a5c2
 8006ec4:	b5e8b5cd 	.word	0xb5e8b5cd
 8006ec8:	58024000 	.word	0x58024000
 8006ecc:	2213      	movs	r2, #19
 8006ece:	2116      	movs	r1, #22
 8006ed0:	f104 0010 	add.w	r0, r4, #16
 8006ed4:	f000 ff66 	bl	8007da4 <core_set_error>
 8006ed8:	e73a      	b.n	8006d50 <ai_platform_network_init+0x15c>
 8006eda:	4607      	mov	r7, r0
 8006edc:	4680      	mov	r8, r0
 8006ede:	4684      	mov	ip, r0
 8006ee0:	e773      	b.n	8006dca <ai_platform_network_init+0x1d6>
 8006ee2:	f1b9 0f00 	cmp.w	r9, #0
 8006ee6:	d002      	beq.n	8006eee <ai_platform_network_init+0x2fa>
 8006ee8:	f04f 0c01 	mov.w	ip, #1
 8006eec:	e7a7      	b.n	8006e3e <ai_platform_network_init+0x24a>
 8006eee:	2110      	movs	r1, #16
 8006ef0:	2213      	movs	r2, #19
 8006ef2:	2600      	movs	r6, #0
 8006ef4:	1860      	adds	r0, r4, r1
 8006ef6:	f000 ff55 	bl	8007da4 <core_set_error>
 8006efa:	e729      	b.n	8006d50 <ai_platform_network_init+0x15c>
 8006efc:	2110      	movs	r1, #16
 8006efe:	2211      	movs	r2, #17
 8006f00:	462e      	mov	r6, r5
 8006f02:	1860      	adds	r0, r4, r1
 8006f04:	f000 ff4e 	bl	8007da4 <core_set_error>
 8006f08:	e722      	b.n	8006d50 <ai_platform_network_init+0x15c>
 8006f0a:	2110      	movs	r1, #16
 8006f0c:	2212      	movs	r2, #18
 8006f0e:	1860      	adds	r0, r4, r1
 8006f10:	f000 ff48 	bl	8007da4 <core_set_error>
 8006f14:	e71c      	b.n	8006d50 <ai_platform_network_init+0x15c>
 8006f16:	4666      	mov	r6, ip
 8006f18:	e6b7      	b.n	8006c8a <ai_platform_network_init+0x96>
 8006f1a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006f1c:	6a26      	ldr	r6, [r4, #32]
 8006f1e:	2701      	movs	r7, #1
 8006f20:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8006f22:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8006f26:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 8006f2a:	e74e      	b.n	8006dca <ai_platform_network_init+0x1d6>

08006f2c <ai_platform_network_post_init>:
 8006f2c:	b538      	push	{r3, r4, r5, lr}
 8006f2e:	2800      	cmp	r0, #0
 8006f30:	d04e      	beq.n	8006fd0 <ai_platform_network_post_init+0xa4>
 8006f32:	4b8c      	ldr	r3, [pc, #560]	; (8007164 <ai_platform_network_post_init+0x238>)
 8006f34:	4604      	mov	r4, r0
 8006f36:	6802      	ldr	r2, [r0, #0]
 8006f38:	429a      	cmp	r2, r3
 8006f3a:	d149      	bne.n	8006fd0 <ai_platform_network_post_init+0xa4>
 8006f3c:	f7fe fa94 	bl	8005468 <_ai_platform_acquire_crc>
 8006f40:	4b89      	ldr	r3, [pc, #548]	; (8007168 <ai_platform_network_post_init+0x23c>)
 8006f42:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006f4c:	189a      	adds	r2, r3, r2
 8006f4e:	2a01      	cmp	r2, #1
 8006f50:	f240 8095 	bls.w	800707e <ai_platform_network_post_init+0x152>
 8006f54:	f240 4249 	movw	r2, #1097	; 0x449
 8006f58:	4293      	cmp	r3, r2
 8006f5a:	f000 8090 	beq.w	800707e <ai_platform_network_post_init+0x152>
 8006f5e:	4a83      	ldr	r2, [pc, #524]	; (800716c <ai_platform_network_post_init+0x240>)
 8006f60:	6813      	ldr	r3, [r2, #0]
 8006f62:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006f66:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8006f6a:	f000 8096 	beq.w	800709a <ai_platform_network_post_init+0x16e>
 8006f6e:	6813      	ldr	r3, [r2, #0]
 8006f70:	f240 4183 	movw	r1, #1155	; 0x483
 8006f74:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006f78:	428b      	cmp	r3, r1
 8006f7a:	f000 80b8 	beq.w	80070ee <ai_platform_network_post_init+0x1c2>
 8006f7e:	6813      	ldr	r3, [r2, #0]
 8006f80:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006f84:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8006f88:	f000 80de 	beq.w	8007148 <ai_platform_network_post_init+0x21c>
 8006f8c:	6813      	ldr	r3, [r2, #0]
 8006f8e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	f000 80bd 	beq.w	8007112 <ai_platform_network_post_init+0x1e6>
 8006f98:	f7fe fa68 	bl	800546c <_ai_platform_release_crc>
 8006f9c:	68e3      	ldr	r3, [r4, #12]
 8006f9e:	f013 0502 	ands.w	r5, r3, #2
 8006fa2:	f000 808c 	beq.w	80070be <ai_platform_network_post_init+0x192>
 8006fa6:	4620      	mov	r0, r4
 8006fa8:	f001 f8da 	bl	8008160 <ai_layers_post_init_all>
 8006fac:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006fae:	b16b      	cbz	r3, 8006fcc <ai_platform_network_post_init+0xa0>
 8006fb0:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8006fb2:	e007      	b.n	8006fc4 <ai_platform_network_post_init+0x98>
 8006fb4:	e9d4 320f 	ldrd	r3, r2, [r4, #60]	; 0x3c
 8006fb8:	4798      	blx	r3
 8006fba:	692b      	ldr	r3, [r5, #16]
 8006fbc:	b133      	cbz	r3, 8006fcc <ai_platform_network_post_init+0xa0>
 8006fbe:	42ab      	cmp	r3, r5
 8006fc0:	461d      	mov	r5, r3
 8006fc2:	d003      	beq.n	8006fcc <ai_platform_network_post_init+0xa0>
 8006fc4:	4629      	mov	r1, r5
 8006fc6:	2000      	movs	r0, #0
 8006fc8:	2d00      	cmp	r5, #0
 8006fca:	d1f3      	bne.n	8006fb4 <ai_platform_network_post_init+0x88>
 8006fcc:	2001      	movs	r0, #1
 8006fce:	bd38      	pop	{r3, r4, r5, pc}
 8006fd0:	f7fe fa4a 	bl	8005468 <_ai_platform_acquire_crc>
 8006fd4:	4b64      	ldr	r3, [pc, #400]	; (8007168 <ai_platform_network_post_init+0x23c>)
 8006fd6:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006fe0:	185a      	adds	r2, r3, r1
 8006fe2:	2a01      	cmp	r2, #1
 8006fe4:	d92a      	bls.n	800703c <ai_platform_network_post_init+0x110>
 8006fe6:	f240 4249 	movw	r2, #1097	; 0x449
 8006fea:	4293      	cmp	r3, r2
 8006fec:	d026      	beq.n	800703c <ai_platform_network_post_init+0x110>
 8006fee:	4a5f      	ldr	r2, [pc, #380]	; (800716c <ai_platform_network_post_init+0x240>)
 8006ff0:	6813      	ldr	r3, [r2, #0]
 8006ff2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006ff6:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8006ffa:	d02c      	beq.n	8007056 <ai_platform_network_post_init+0x12a>
 8006ffc:	6813      	ldr	r3, [r2, #0]
 8006ffe:	f240 4183 	movw	r1, #1155	; 0x483
 8007002:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007006:	428b      	cmp	r3, r1
 8007008:	d060      	beq.n	80070cc <ai_platform_network_post_init+0x1a0>
 800700a:	6813      	ldr	r3, [r2, #0]
 800700c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007010:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8007014:	f000 808b 	beq.w	800712e <ai_platform_network_post_init+0x202>
 8007018:	6813      	ldr	r3, [r2, #0]
 800701a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800701e:	2b00      	cmp	r3, #0
 8007020:	d129      	bne.n	8007076 <ai_platform_network_post_init+0x14a>
 8007022:	4a53      	ldr	r2, [pc, #332]	; (8007170 <ai_platform_network_post_init+0x244>)
 8007024:	2301      	movs	r3, #1
 8007026:	6093      	str	r3, [r2, #8]
 8007028:	6893      	ldr	r3, [r2, #8]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d1fc      	bne.n	8007028 <ai_platform_network_post_init+0xfc>
 800702e:	4951      	ldr	r1, [pc, #324]	; (8007174 <ai_platform_network_post_init+0x248>)
 8007030:	4b51      	ldr	r3, [pc, #324]	; (8007178 <ai_platform_network_post_init+0x24c>)
 8007032:	6011      	str	r1, [r2, #0]
 8007034:	6812      	ldr	r2, [r2, #0]
 8007036:	429a      	cmp	r2, r3
 8007038:	d01d      	beq.n	8007076 <ai_platform_network_post_init+0x14a>
 800703a:	e7fe      	b.n	800703a <ai_platform_network_post_init+0x10e>
 800703c:	4a4c      	ldr	r2, [pc, #304]	; (8007170 <ai_platform_network_post_init+0x244>)
 800703e:	2301      	movs	r3, #1
 8007040:	6093      	str	r3, [r2, #8]
 8007042:	6893      	ldr	r3, [r2, #8]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d1fc      	bne.n	8007042 <ai_platform_network_post_init+0x116>
 8007048:	494a      	ldr	r1, [pc, #296]	; (8007174 <ai_platform_network_post_init+0x248>)
 800704a:	4b4b      	ldr	r3, [pc, #300]	; (8007178 <ai_platform_network_post_init+0x24c>)
 800704c:	6011      	str	r1, [r2, #0]
 800704e:	6812      	ldr	r2, [r2, #0]
 8007050:	429a      	cmp	r2, r3
 8007052:	d010      	beq.n	8007076 <ai_platform_network_post_init+0x14a>
 8007054:	e7fe      	b.n	8007054 <ai_platform_network_post_init+0x128>
 8007056:	4a49      	ldr	r2, [pc, #292]	; (800717c <ai_platform_network_post_init+0x250>)
 8007058:	2301      	movs	r3, #1
 800705a:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800705e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8007062:	2b00      	cmp	r3, #0
 8007064:	d1fb      	bne.n	800705e <ai_platform_network_post_init+0x132>
 8007066:	4943      	ldr	r1, [pc, #268]	; (8007174 <ai_platform_network_post_init+0x248>)
 8007068:	4b43      	ldr	r3, [pc, #268]	; (8007178 <ai_platform_network_post_init+0x24c>)
 800706a:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800706e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8007072:	429a      	cmp	r2, r3
 8007074:	d110      	bne.n	8007098 <ai_platform_network_post_init+0x16c>
 8007076:	f7fe f9f9 	bl	800546c <_ai_platform_release_crc>
 800707a:	2000      	movs	r0, #0
 800707c:	bd38      	pop	{r3, r4, r5, pc}
 800707e:	4a3c      	ldr	r2, [pc, #240]	; (8007170 <ai_platform_network_post_init+0x244>)
 8007080:	2301      	movs	r3, #1
 8007082:	6093      	str	r3, [r2, #8]
 8007084:	6893      	ldr	r3, [r2, #8]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d1fc      	bne.n	8007084 <ai_platform_network_post_init+0x158>
 800708a:	493a      	ldr	r1, [pc, #232]	; (8007174 <ai_platform_network_post_init+0x248>)
 800708c:	4b3a      	ldr	r3, [pc, #232]	; (8007178 <ai_platform_network_post_init+0x24c>)
 800708e:	6011      	str	r1, [r2, #0]
 8007090:	6812      	ldr	r2, [r2, #0]
 8007092:	429a      	cmp	r2, r3
 8007094:	d080      	beq.n	8006f98 <ai_platform_network_post_init+0x6c>
 8007096:	e7fe      	b.n	8007096 <ai_platform_network_post_init+0x16a>
 8007098:	e7fe      	b.n	8007098 <ai_platform_network_post_init+0x16c>
 800709a:	4a38      	ldr	r2, [pc, #224]	; (800717c <ai_platform_network_post_init+0x250>)
 800709c:	2301      	movs	r3, #1
 800709e:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80070a2:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d1fb      	bne.n	80070a2 <ai_platform_network_post_init+0x176>
 80070aa:	4932      	ldr	r1, [pc, #200]	; (8007174 <ai_platform_network_post_init+0x248>)
 80070ac:	4b32      	ldr	r3, [pc, #200]	; (8007178 <ai_platform_network_post_init+0x24c>)
 80070ae:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 80070b2:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80070b6:	429a      	cmp	r2, r3
 80070b8:	f43f af6e 	beq.w	8006f98 <ai_platform_network_post_init+0x6c>
 80070bc:	e7fe      	b.n	80070bc <ai_platform_network_post_init+0x190>
 80070be:	2210      	movs	r2, #16
 80070c0:	2111      	movs	r1, #17
 80070c2:	18a0      	adds	r0, r4, r2
 80070c4:	f000 fe6e 	bl	8007da4 <core_set_error>
 80070c8:	4628      	mov	r0, r5
 80070ca:	bd38      	pop	{r3, r4, r5, pc}
 80070cc:	4a2b      	ldr	r2, [pc, #172]	; (800717c <ai_platform_network_post_init+0x250>)
 80070ce:	2301      	movs	r3, #1
 80070d0:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80070d4:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d1fb      	bne.n	80070d4 <ai_platform_network_post_init+0x1a8>
 80070dc:	4925      	ldr	r1, [pc, #148]	; (8007174 <ai_platform_network_post_init+0x248>)
 80070de:	4b26      	ldr	r3, [pc, #152]	; (8007178 <ai_platform_network_post_init+0x24c>)
 80070e0:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 80070e4:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80070e8:	429a      	cmp	r2, r3
 80070ea:	d0c4      	beq.n	8007076 <ai_platform_network_post_init+0x14a>
 80070ec:	e7fe      	b.n	80070ec <ai_platform_network_post_init+0x1c0>
 80070ee:	4a23      	ldr	r2, [pc, #140]	; (800717c <ai_platform_network_post_init+0x250>)
 80070f0:	2301      	movs	r3, #1
 80070f2:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80070f6:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d1fb      	bne.n	80070f6 <ai_platform_network_post_init+0x1ca>
 80070fe:	491d      	ldr	r1, [pc, #116]	; (8007174 <ai_platform_network_post_init+0x248>)
 8007100:	4b1d      	ldr	r3, [pc, #116]	; (8007178 <ai_platform_network_post_init+0x24c>)
 8007102:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8007106:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800710a:	429a      	cmp	r2, r3
 800710c:	f43f af44 	beq.w	8006f98 <ai_platform_network_post_init+0x6c>
 8007110:	e7fe      	b.n	8007110 <ai_platform_network_post_init+0x1e4>
 8007112:	4a17      	ldr	r2, [pc, #92]	; (8007170 <ai_platform_network_post_init+0x244>)
 8007114:	2301      	movs	r3, #1
 8007116:	6093      	str	r3, [r2, #8]
 8007118:	6893      	ldr	r3, [r2, #8]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d1fc      	bne.n	8007118 <ai_platform_network_post_init+0x1ec>
 800711e:	4915      	ldr	r1, [pc, #84]	; (8007174 <ai_platform_network_post_init+0x248>)
 8007120:	4b15      	ldr	r3, [pc, #84]	; (8007178 <ai_platform_network_post_init+0x24c>)
 8007122:	6011      	str	r1, [r2, #0]
 8007124:	6812      	ldr	r2, [r2, #0]
 8007126:	429a      	cmp	r2, r3
 8007128:	f43f af36 	beq.w	8006f98 <ai_platform_network_post_init+0x6c>
 800712c:	e7fe      	b.n	800712c <ai_platform_network_post_init+0x200>
 800712e:	4a10      	ldr	r2, [pc, #64]	; (8007170 <ai_platform_network_post_init+0x244>)
 8007130:	2301      	movs	r3, #1
 8007132:	6093      	str	r3, [r2, #8]
 8007134:	6893      	ldr	r3, [r2, #8]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d1fc      	bne.n	8007134 <ai_platform_network_post_init+0x208>
 800713a:	490e      	ldr	r1, [pc, #56]	; (8007174 <ai_platform_network_post_init+0x248>)
 800713c:	4b0e      	ldr	r3, [pc, #56]	; (8007178 <ai_platform_network_post_init+0x24c>)
 800713e:	6011      	str	r1, [r2, #0]
 8007140:	6812      	ldr	r2, [r2, #0]
 8007142:	429a      	cmp	r2, r3
 8007144:	d097      	beq.n	8007076 <ai_platform_network_post_init+0x14a>
 8007146:	e7fe      	b.n	8007146 <ai_platform_network_post_init+0x21a>
 8007148:	4a09      	ldr	r2, [pc, #36]	; (8007170 <ai_platform_network_post_init+0x244>)
 800714a:	2301      	movs	r3, #1
 800714c:	6093      	str	r3, [r2, #8]
 800714e:	6893      	ldr	r3, [r2, #8]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d1fc      	bne.n	800714e <ai_platform_network_post_init+0x222>
 8007154:	4907      	ldr	r1, [pc, #28]	; (8007174 <ai_platform_network_post_init+0x248>)
 8007156:	4b08      	ldr	r3, [pc, #32]	; (8007178 <ai_platform_network_post_init+0x24c>)
 8007158:	6011      	str	r1, [r2, #0]
 800715a:	6812      	ldr	r2, [r2, #0]
 800715c:	429a      	cmp	r2, r3
 800715e:	f43f af1b 	beq.w	8006f98 <ai_platform_network_post_init+0x6c>
 8007162:	e7fe      	b.n	8007162 <ai_platform_network_post_init+0x236>
 8007164:	a1c00100 	.word	0xa1c00100
 8007168:	e0042000 	.word	0xe0042000
 800716c:	5c001000 	.word	0x5c001000
 8007170:	40023000 	.word	0x40023000
 8007174:	f407a5c2 	.word	0xf407a5c2
 8007178:	b5e8b5cd 	.word	0xb5e8b5cd
 800717c:	58024000 	.word	0x58024000

08007180 <ai_platform_network_process>:
 8007180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007184:	b085      	sub	sp, #20
 8007186:	460e      	mov	r6, r1
 8007188:	4605      	mov	r5, r0
 800718a:	9201      	str	r2, [sp, #4]
 800718c:	b120      	cbz	r0, 8007198 <ai_platform_network_process+0x18>
 800718e:	4b24      	ldr	r3, [pc, #144]	; (8007220 <ai_platform_network_process+0xa0>)
 8007190:	6802      	ldr	r2, [r0, #0]
 8007192:	429a      	cmp	r2, r3
 8007194:	bf18      	it	ne
 8007196:	2500      	movne	r5, #0
 8007198:	f7fe f966 	bl	8005468 <_ai_platform_acquire_crc>
 800719c:	4b21      	ldr	r3, [pc, #132]	; (8007224 <ai_platform_network_process+0xa4>)
 800719e:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80071a8:	185a      	adds	r2, r3, r1
 80071aa:	2a01      	cmp	r2, #1
 80071ac:	d92b      	bls.n	8007206 <ai_platform_network_process+0x86>
 80071ae:	f240 4249 	movw	r2, #1097	; 0x449
 80071b2:	4293      	cmp	r3, r2
 80071b4:	d027      	beq.n	8007206 <ai_platform_network_process+0x86>
 80071b6:	4a1c      	ldr	r2, [pc, #112]	; (8007228 <ai_platform_network_process+0xa8>)
 80071b8:	6813      	ldr	r3, [r2, #0]
 80071ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80071be:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 80071c2:	d039      	beq.n	8007238 <ai_platform_network_process+0xb8>
 80071c4:	6813      	ldr	r3, [r2, #0]
 80071c6:	f240 4183 	movw	r1, #1155	; 0x483
 80071ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80071ce:	428b      	cmp	r3, r1
 80071d0:	f000 819c 	beq.w	800750c <ai_platform_network_process+0x38c>
 80071d4:	6813      	ldr	r3, [r2, #0]
 80071d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80071da:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 80071de:	f000 8179 	beq.w	80074d4 <ai_platform_network_process+0x354>
 80071e2:	6813      	ldr	r3, [r2, #0]
 80071e4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d136      	bne.n	800725a <ai_platform_network_process+0xda>
 80071ec:	4a0f      	ldr	r2, [pc, #60]	; (800722c <ai_platform_network_process+0xac>)
 80071ee:	2301      	movs	r3, #1
 80071f0:	6093      	str	r3, [r2, #8]
 80071f2:	6893      	ldr	r3, [r2, #8]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d1fc      	bne.n	80071f2 <ai_platform_network_process+0x72>
 80071f8:	4b0d      	ldr	r3, [pc, #52]	; (8007230 <ai_platform_network_process+0xb0>)
 80071fa:	6013      	str	r3, [r2, #0]
 80071fc:	4b0d      	ldr	r3, [pc, #52]	; (8007234 <ai_platform_network_process+0xb4>)
 80071fe:	6812      	ldr	r2, [r2, #0]
 8007200:	429a      	cmp	r2, r3
 8007202:	d02a      	beq.n	800725a <ai_platform_network_process+0xda>
 8007204:	e7fe      	b.n	8007204 <ai_platform_network_process+0x84>
 8007206:	4a09      	ldr	r2, [pc, #36]	; (800722c <ai_platform_network_process+0xac>)
 8007208:	2301      	movs	r3, #1
 800720a:	6093      	str	r3, [r2, #8]
 800720c:	6893      	ldr	r3, [r2, #8]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d1fc      	bne.n	800720c <ai_platform_network_process+0x8c>
 8007212:	4b07      	ldr	r3, [pc, #28]	; (8007230 <ai_platform_network_process+0xb0>)
 8007214:	6013      	str	r3, [r2, #0]
 8007216:	4b07      	ldr	r3, [pc, #28]	; (8007234 <ai_platform_network_process+0xb4>)
 8007218:	6812      	ldr	r2, [r2, #0]
 800721a:	429a      	cmp	r2, r3
 800721c:	d01d      	beq.n	800725a <ai_platform_network_process+0xda>
 800721e:	e7fe      	b.n	800721e <ai_platform_network_process+0x9e>
 8007220:	a1c00100 	.word	0xa1c00100
 8007224:	e0042000 	.word	0xe0042000
 8007228:	5c001000 	.word	0x5c001000
 800722c:	40023000 	.word	0x40023000
 8007230:	f407a5c2 	.word	0xf407a5c2
 8007234:	b5e8b5cd 	.word	0xb5e8b5cd
 8007238:	4ab0      	ldr	r2, [pc, #704]	; (80074fc <ai_platform_network_process+0x37c>)
 800723a:	2301      	movs	r3, #1
 800723c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8007240:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8007244:	2b00      	cmp	r3, #0
 8007246:	d1fb      	bne.n	8007240 <ai_platform_network_process+0xc0>
 8007248:	4bad      	ldr	r3, [pc, #692]	; (8007500 <ai_platform_network_process+0x380>)
 800724a:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800724e:	4bad      	ldr	r3, [pc, #692]	; (8007504 <ai_platform_network_process+0x384>)
 8007250:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8007254:	429a      	cmp	r2, r3
 8007256:	f040 812b 	bne.w	80074b0 <ai_platform_network_process+0x330>
 800725a:	f7fe f907 	bl	800546c <_ai_platform_release_crc>
 800725e:	2d00      	cmp	r5, #0
 8007260:	f000 8172 	beq.w	8007548 <ai_platform_network_process+0x3c8>
 8007264:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
 8007266:	2b00      	cmp	r3, #0
 8007268:	f000 8123 	beq.w	80074b2 <ai_platform_network_process+0x332>
 800726c:	68eb      	ldr	r3, [r5, #12]
 800726e:	2200      	movs	r2, #0
 8007270:	f8d5 8030 	ldr.w	r8, [r5, #48]	; 0x30
 8007274:	f003 0303 	and.w	r3, r3, #3
 8007278:	616a      	str	r2, [r5, #20]
 800727a:	2b03      	cmp	r3, #3
 800727c:	f040 811f 	bne.w	80074be <ai_platform_network_process+0x33e>
 8007280:	2e00      	cmp	r6, #0
 8007282:	f000 8156 	beq.w	8007532 <ai_platform_network_process+0x3b2>
 8007286:	fab8 f788 	clz	r7, r8
 800728a:	097f      	lsrs	r7, r7, #5
 800728c:	f1b8 0f00 	cmp.w	r8, #0
 8007290:	f000 814f 	beq.w	8007532 <ai_platform_network_process+0x3b2>
 8007294:	f8b8 3000 	ldrh.w	r3, [r8]
 8007298:	2b00      	cmp	r3, #0
 800729a:	f000 814a 	beq.w	8007532 <ai_platform_network_process+0x3b2>
 800729e:	69b3      	ldr	r3, [r6, #24]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	e9cd 3502 	strd	r3, r5, [sp, #8]
 80072a6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d072      	beq.n	8007394 <ai_platform_network_process+0x214>
 80072ae:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 80072b2:	2c00      	cmp	r4, #0
 80072b4:	d06e      	beq.n	8007394 <ai_platform_network_process+0x214>
 80072b6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80072ba:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 80072be:	f8d3 a000 	ldr.w	sl, [r3]
 80072c2:	eb1a 1907 	adds.w	r9, sl, r7, lsl #4
 80072c6:	f000 8133 	beq.w	8007530 <ai_platform_network_process+0x3b0>
 80072ca:	69a3      	ldr	r3, [r4, #24]
 80072cc:	2101      	movs	r1, #1
 80072ce:	4630      	mov	r0, r6
 80072d0:	685d      	ldr	r5, [r3, #4]
 80072d2:	f7fd ffe1 	bl	8005298 <ai_buffer_get_size>
 80072d6:	4285      	cmp	r5, r0
 80072d8:	f0c0 8138 	bcc.w	800754c <ai_platform_network_process+0x3cc>
 80072dc:	68e0      	ldr	r0, [r4, #12]
 80072de:	69b1      	ldr	r1, [r6, #24]
 80072e0:	68c2      	ldr	r2, [r0, #12]
 80072e2:	68cb      	ldr	r3, [r1, #12]
 80072e4:	429a      	cmp	r2, r3
 80072e6:	f040 8131 	bne.w	800754c <ai_platform_network_process+0x3cc>
 80072ea:	6882      	ldr	r2, [r0, #8]
 80072ec:	688b      	ldr	r3, [r1, #8]
 80072ee:	429a      	cmp	r2, r3
 80072f0:	f040 812c 	bne.w	800754c <ai_platform_network_process+0x3cc>
 80072f4:	6842      	ldr	r2, [r0, #4]
 80072f6:	684b      	ldr	r3, [r1, #4]
 80072f8:	429a      	cmp	r2, r3
 80072fa:	f040 8127 	bne.w	800754c <ai_platform_network_process+0x3cc>
 80072fe:	69a3      	ldr	r3, [r4, #24]
 8007300:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007304:	f001 ffdc 	bl	80092c0 <ai_array_get_data_byte_size>
 8007308:	4605      	mov	r5, r0
 800730a:	4620      	mov	r0, r4
 800730c:	f002 f800 	bl	8009310 <get_tensor_byte_size>
 8007310:	4285      	cmp	r5, r0
 8007312:	f0c0 811b 	bcc.w	800754c <ai_platform_network_process+0x3cc>
 8007316:	69a3      	ldr	r3, [r4, #24]
 8007318:	6818      	ldr	r0, [r3, #0]
 800731a:	f001 ff65 	bl	80091e8 <ai_array_to_buffer_fmt>
 800731e:	6833      	ldr	r3, [r6, #0]
 8007320:	4058      	eors	r0, r3
 8007322:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 8007326:	f040 81c8 	bne.w	80076ba <ai_platform_network_process+0x53a>
 800732a:	6873      	ldr	r3, [r6, #4]
 800732c:	2b00      	cmp	r3, #0
 800732e:	f000 81bb 	beq.w	80076a8 <ai_platform_network_process+0x528>
 8007332:	69b3      	ldr	r3, [r6, #24]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	2b00      	cmp	r3, #0
 8007338:	f000 81c8 	beq.w	80076cc <ai_platform_network_process+0x54c>
 800733c:	9a02      	ldr	r2, [sp, #8]
 800733e:	4620      	mov	r0, r4
 8007340:	3701      	adds	r7, #1
 8007342:	361c      	adds	r6, #28
 8007344:	429a      	cmp	r2, r3
 8007346:	bf38      	it	cc
 8007348:	461a      	movcc	r2, r3
 800734a:	9202      	str	r2, [sp, #8]
 800734c:	f001 ffe0 	bl	8009310 <get_tensor_byte_size>
 8007350:	f8c9 0008 	str.w	r0, [r9, #8]
 8007354:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	fb00 f303 	mul.w	r3, r0, r3
 800735e:	f8c9 300c 	str.w	r3, [r9, #12]
 8007362:	f856 1c18 	ldr.w	r1, [r6, #-24]
 8007366:	440b      	add	r3, r1
 8007368:	f8c9 1004 	str.w	r1, [r9, #4]
 800736c:	f84a 300b 	str.w	r3, [sl, fp]
 8007370:	69a0      	ldr	r0, [r4, #24]
 8007372:	6803      	ldr	r3, [r0, #0]
 8007374:	009a      	lsls	r2, r3, #2
 8007376:	f100 80bb 	bmi.w	80074f0 <ai_platform_network_process+0x370>
 800737a:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 800737e:	1a9b      	subs	r3, r3, r2
 8007380:	4419      	add	r1, r3
 8007382:	6081      	str	r1, [r0, #8]
 8007384:	69a3      	ldr	r3, [r4, #24]
 8007386:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800738a:	60da      	str	r2, [r3, #12]
 800738c:	f8b8 3000 	ldrh.w	r3, [r8]
 8007390:	42bb      	cmp	r3, r7
 8007392:	d888      	bhi.n	80072a6 <ai_platform_network_process+0x126>
 8007394:	9d03      	ldr	r5, [sp, #12]
 8007396:	9b01      	ldr	r3, [sp, #4]
 8007398:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
 800739a:	2b00      	cmp	r3, #0
 800739c:	f000 819f 	beq.w	80076de <ai_platform_network_process+0x55e>
 80073a0:	2a01      	cmp	r2, #1
 80073a2:	f240 8179 	bls.w	8007698 <ai_platform_network_process+0x518>
 80073a6:	f8d5 9030 	ldr.w	r9, [r5, #48]	; 0x30
 80073aa:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	f000 8172 	beq.w	8007698 <ai_platform_network_process+0x518>
 80073b4:	9e01      	ldr	r6, [sp, #4]
 80073b6:	2700      	movs	r7, #0
 80073b8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	f000 80d3 	beq.w	8007568 <ai_platform_network_process+0x3e8>
 80073c2:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 80073c6:	2c00      	cmp	r4, #0
 80073c8:	f000 80ce 	beq.w	8007568 <ai_platform_network_process+0x3e8>
 80073cc:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80073d0:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 80073d4:	f8d3 8000 	ldr.w	r8, [r3]
 80073d8:	eb18 1a07 	adds.w	sl, r8, r7, lsl #4
 80073dc:	f000 819d 	beq.w	800771a <ai_platform_network_process+0x59a>
 80073e0:	69a3      	ldr	r3, [r4, #24]
 80073e2:	2101      	movs	r1, #1
 80073e4:	4630      	mov	r0, r6
 80073e6:	685b      	ldr	r3, [r3, #4]
 80073e8:	9301      	str	r3, [sp, #4]
 80073ea:	f7fd ff55 	bl	8005298 <ai_buffer_get_size>
 80073ee:	9b01      	ldr	r3, [sp, #4]
 80073f0:	4283      	cmp	r3, r0
 80073f2:	f0c0 8151 	bcc.w	8007698 <ai_platform_network_process+0x518>
 80073f6:	68e0      	ldr	r0, [r4, #12]
 80073f8:	69b1      	ldr	r1, [r6, #24]
 80073fa:	68c2      	ldr	r2, [r0, #12]
 80073fc:	68cb      	ldr	r3, [r1, #12]
 80073fe:	429a      	cmp	r2, r3
 8007400:	f040 814a 	bne.w	8007698 <ai_platform_network_process+0x518>
 8007404:	6882      	ldr	r2, [r0, #8]
 8007406:	688b      	ldr	r3, [r1, #8]
 8007408:	429a      	cmp	r2, r3
 800740a:	f040 8145 	bne.w	8007698 <ai_platform_network_process+0x518>
 800740e:	6842      	ldr	r2, [r0, #4]
 8007410:	684b      	ldr	r3, [r1, #4]
 8007412:	429a      	cmp	r2, r3
 8007414:	f040 8140 	bne.w	8007698 <ai_platform_network_process+0x518>
 8007418:	69a3      	ldr	r3, [r4, #24]
 800741a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800741e:	f001 ff4f 	bl	80092c0 <ai_array_get_data_byte_size>
 8007422:	9001      	str	r0, [sp, #4]
 8007424:	4620      	mov	r0, r4
 8007426:	f001 ff73 	bl	8009310 <get_tensor_byte_size>
 800742a:	9b01      	ldr	r3, [sp, #4]
 800742c:	4283      	cmp	r3, r0
 800742e:	f0c0 8133 	bcc.w	8007698 <ai_platform_network_process+0x518>
 8007432:	69a3      	ldr	r3, [r4, #24]
 8007434:	6818      	ldr	r0, [r3, #0]
 8007436:	f001 fed7 	bl	80091e8 <ai_array_to_buffer_fmt>
 800743a:	6833      	ldr	r3, [r6, #0]
 800743c:	4058      	eors	r0, r3
 800743e:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 8007442:	f040 815a 	bne.w	80076fa <ai_platform_network_process+0x57a>
 8007446:	6873      	ldr	r3, [r6, #4]
 8007448:	2b00      	cmp	r3, #0
 800744a:	f000 814e 	beq.w	80076ea <ai_platform_network_process+0x56a>
 800744e:	69b3      	ldr	r3, [r6, #24]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	2b00      	cmp	r3, #0
 8007454:	f000 8159 	beq.w	800770a <ai_platform_network_process+0x58a>
 8007458:	9a02      	ldr	r2, [sp, #8]
 800745a:	4620      	mov	r0, r4
 800745c:	3701      	adds	r7, #1
 800745e:	361c      	adds	r6, #28
 8007460:	429a      	cmp	r2, r3
 8007462:	bf38      	it	cc
 8007464:	461a      	movcc	r2, r3
 8007466:	9202      	str	r2, [sp, #8]
 8007468:	f001 ff52 	bl	8009310 <get_tensor_byte_size>
 800746c:	f8ca 0008 	str.w	r0, [sl, #8]
 8007470:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	fb00 f303 	mul.w	r3, r0, r3
 800747a:	f8ca 300c 	str.w	r3, [sl, #12]
 800747e:	f856 1c18 	ldr.w	r1, [r6, #-24]
 8007482:	440b      	add	r3, r1
 8007484:	f8ca 1004 	str.w	r1, [sl, #4]
 8007488:	f848 300b 	str.w	r3, [r8, fp]
 800748c:	69a0      	ldr	r0, [r4, #24]
 800748e:	6803      	ldr	r3, [r0, #0]
 8007490:	009b      	lsls	r3, r3, #2
 8007492:	d464      	bmi.n	800755e <ai_platform_network_process+0x3de>
 8007494:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8007498:	1a9b      	subs	r3, r3, r2
 800749a:	4419      	add	r1, r3
 800749c:	6081      	str	r1, [r0, #8]
 800749e:	69a3      	ldr	r3, [r4, #24]
 80074a0:	f8da 2004 	ldr.w	r2, [sl, #4]
 80074a4:	60da      	str	r2, [r3, #12]
 80074a6:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 80074aa:	429f      	cmp	r7, r3
 80074ac:	d384      	bcc.n	80073b8 <ai_platform_network_process+0x238>
 80074ae:	e05b      	b.n	8007568 <ai_platform_network_process+0x3e8>
 80074b0:	e7fe      	b.n	80074b0 <ai_platform_network_process+0x330>
 80074b2:	68ea      	ldr	r2, [r5, #12]
 80074b4:	616b      	str	r3, [r5, #20]
 80074b6:	f002 0203 	and.w	r2, r2, #3
 80074ba:	2a03      	cmp	r2, #3
 80074bc:	d039      	beq.n	8007532 <ai_platform_network_process+0x3b2>
 80074be:	2230      	movs	r2, #48	; 0x30
 80074c0:	2111      	movs	r1, #17
 80074c2:	f105 0010 	add.w	r0, r5, #16
 80074c6:	2400      	movs	r4, #0
 80074c8:	f000 fc6c 	bl	8007da4 <core_set_error>
 80074cc:	4620      	mov	r0, r4
 80074ce:	b005      	add	sp, #20
 80074d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074d4:	4a0c      	ldr	r2, [pc, #48]	; (8007508 <ai_platform_network_process+0x388>)
 80074d6:	2301      	movs	r3, #1
 80074d8:	6093      	str	r3, [r2, #8]
 80074da:	6893      	ldr	r3, [r2, #8]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d1fc      	bne.n	80074da <ai_platform_network_process+0x35a>
 80074e0:	4b07      	ldr	r3, [pc, #28]	; (8007500 <ai_platform_network_process+0x380>)
 80074e2:	6013      	str	r3, [r2, #0]
 80074e4:	4b07      	ldr	r3, [pc, #28]	; (8007504 <ai_platform_network_process+0x384>)
 80074e6:	6812      	ldr	r2, [r2, #0]
 80074e8:	429a      	cmp	r2, r3
 80074ea:	f43f aeb6 	beq.w	800725a <ai_platform_network_process+0xda>
 80074ee:	e7fe      	b.n	80074ee <ai_platform_network_process+0x36e>
 80074f0:	f8b8 3000 	ldrh.w	r3, [r8]
 80074f4:	429f      	cmp	r7, r3
 80074f6:	f4ff aed6 	bcc.w	80072a6 <ai_platform_network_process+0x126>
 80074fa:	e74b      	b.n	8007394 <ai_platform_network_process+0x214>
 80074fc:	58024000 	.word	0x58024000
 8007500:	f407a5c2 	.word	0xf407a5c2
 8007504:	b5e8b5cd 	.word	0xb5e8b5cd
 8007508:	40023000 	.word	0x40023000
 800750c:	4a87      	ldr	r2, [pc, #540]	; (800772c <ai_platform_network_process+0x5ac>)
 800750e:	2301      	movs	r3, #1
 8007510:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8007514:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8007518:	2b00      	cmp	r3, #0
 800751a:	d1fb      	bne.n	8007514 <ai_platform_network_process+0x394>
 800751c:	4b84      	ldr	r3, [pc, #528]	; (8007730 <ai_platform_network_process+0x5b0>)
 800751e:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8007522:	4b84      	ldr	r3, [pc, #528]	; (8007734 <ai_platform_network_process+0x5b4>)
 8007524:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8007528:	429a      	cmp	r2, r3
 800752a:	f43f ae96 	beq.w	800725a <ai_platform_network_process+0xda>
 800752e:	e7fe      	b.n	800752e <ai_platform_network_process+0x3ae>
 8007530:	9d03      	ldr	r5, [sp, #12]
 8007532:	2400      	movs	r4, #0
 8007534:	2217      	movs	r2, #23
 8007536:	2112      	movs	r1, #18
 8007538:	f105 0010 	add.w	r0, r5, #16
 800753c:	f000 fc32 	bl	8007da4 <core_set_error>
 8007540:	4620      	mov	r0, r4
 8007542:	b005      	add	sp, #20
 8007544:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007548:	462c      	mov	r4, r5
 800754a:	e7bf      	b.n	80074cc <ai_platform_network_process+0x34c>
 800754c:	9d03      	ldr	r5, [sp, #12]
 800754e:	2218      	movs	r2, #24
 8007550:	2112      	movs	r1, #18
 8007552:	2400      	movs	r4, #0
 8007554:	f105 0010 	add.w	r0, r5, #16
 8007558:	f000 fc24 	bl	8007da4 <core_set_error>
 800755c:	e7b6      	b.n	80074cc <ai_platform_network_process+0x34c>
 800755e:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8007562:	429f      	cmp	r7, r3
 8007564:	f4ff af28 	bcc.w	80073b8 <ai_platform_network_process+0x238>
 8007568:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 800756c:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
 800756e:	82ab      	strh	r3, [r5, #20]
 8007570:	2a00      	cmp	r2, #0
 8007572:	f040 808b 	bne.w	800768c <ai_platform_network_process+0x50c>
 8007576:	4616      	mov	r6, r2
 8007578:	4617      	mov	r7, r2
 800757a:	8aec      	ldrh	r4, [r5, #22]
 800757c:	429c      	cmp	r4, r3
 800757e:	d2a5      	bcs.n	80074cc <ai_platform_network_process+0x34c>
 8007580:	46ab      	mov	fp, r5
 8007582:	2e00      	cmp	r6, #0
 8007584:	d030      	beq.n	80075e8 <ai_platform_network_process+0x468>
 8007586:	f04f 0800 	mov.w	r8, #0
 800758a:	e014      	b.n	80075b6 <ai_platform_network_process+0x436>
 800758c:	6882      	ldr	r2, [r0, #8]
 800758e:	68c5      	ldr	r5, [r0, #12]
 8007590:	6863      	ldr	r3, [r4, #4]
 8007592:	1b52      	subs	r2, r2, r5
 8007594:	4413      	add	r3, r2
 8007596:	6083      	str	r3, [r0, #8]
 8007598:	698b      	ldr	r3, [r1, #24]
 800759a:	6862      	ldr	r2, [r4, #4]
 800759c:	60da      	str	r2, [r3, #12]
 800759e:	f859 200a 	ldr.w	r2, [r9, sl]
 80075a2:	f108 0801 	add.w	r8, r8, #1
 80075a6:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 80075aa:	440b      	add	r3, r1
 80075ac:	4293      	cmp	r3, r2
 80075ae:	d301      	bcc.n	80075b4 <ai_platform_network_process+0x434>
 80075b0:	68e3      	ldr	r3, [r4, #12]
 80075b2:	1ad3      	subs	r3, r2, r3
 80075b4:	6063      	str	r3, [r4, #4]
 80075b6:	8833      	ldrh	r3, [r6, #0]
 80075b8:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 80075bc:	4543      	cmp	r3, r8
 80075be:	d913      	bls.n	80075e8 <ai_platform_network_process+0x468>
 80075c0:	6873      	ldr	r3, [r6, #4]
 80075c2:	b18b      	cbz	r3, 80075e8 <ai_platform_network_process+0x468>
 80075c4:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 80075c8:	b171      	cbz	r1, 80075e8 <ai_platform_network_process+0x468>
 80075ca:	6988      	ldr	r0, [r1, #24]
 80075cc:	68b2      	ldr	r2, [r6, #8]
 80075ce:	6803      	ldr	r3, [r0, #0]
 80075d0:	f8d2 9000 	ldr.w	r9, [r2]
 80075d4:	009d      	lsls	r5, r3, #2
 80075d6:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 80075da:	d5d7      	bpl.n	800758c <ai_platform_network_process+0x40c>
 80075dc:	6881      	ldr	r1, [r0, #8]
 80075de:	68a2      	ldr	r2, [r4, #8]
 80075e0:	6860      	ldr	r0, [r4, #4]
 80075e2:	f001 faf5 	bl	8008bd0 <st_int8_copy>
 80075e6:	e7da      	b.n	800759e <ai_platform_network_process+0x41e>
 80075e8:	4658      	mov	r0, fp
 80075ea:	f000 fdcd 	bl	8008188 <ai_layers_forward_all>
 80075ee:	2f00      	cmp	r7, #0
 80075f0:	d03d      	beq.n	800766e <ai_platform_network_process+0x4ee>
 80075f2:	2400      	movs	r4, #0
 80075f4:	e016      	b.n	8007624 <ai_platform_network_process+0x4a4>
 80075f6:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 80075fa:	f859 100a 	ldr.w	r1, [r9, sl]
 80075fe:	4413      	add	r3, r2
 8007600:	428b      	cmp	r3, r1
 8007602:	d302      	bcc.n	800760a <ai_platform_network_process+0x48a>
 8007604:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007608:	1acb      	subs	r3, r1, r3
 800760a:	f8c8 3004 	str.w	r3, [r8, #4]
 800760e:	6981      	ldr	r1, [r0, #24]
 8007610:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 8007614:	1b52      	subs	r2, r2, r5
 8007616:	4413      	add	r3, r2
 8007618:	608b      	str	r3, [r1, #8]
 800761a:	6983      	ldr	r3, [r0, #24]
 800761c:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8007620:	60da      	str	r2, [r3, #12]
 8007622:	3401      	adds	r4, #1
 8007624:	883b      	ldrh	r3, [r7, #0]
 8007626:	42a3      	cmp	r3, r4
 8007628:	d921      	bls.n	800766e <ai_platform_network_process+0x4ee>
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	b1fb      	cbz	r3, 800766e <ai_platform_network_process+0x4ee>
 800762e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8007632:	b1e0      	cbz	r0, 800766e <ai_platform_network_process+0x4ee>
 8007634:	68ba      	ldr	r2, [r7, #8]
 8007636:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 800763a:	6983      	ldr	r3, [r0, #24]
 800763c:	f8d2 9000 	ldr.w	r9, [r2]
 8007640:	681a      	ldr	r2, [r3, #0]
 8007642:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 8007646:	0092      	lsls	r2, r2, #2
 8007648:	d5d5      	bpl.n	80075f6 <ai_platform_network_process+0x476>
 800764a:	6898      	ldr	r0, [r3, #8]
 800764c:	e9d8 1201 	ldrd	r1, r2, [r8, #4]
 8007650:	f001 fabe 	bl	8008bd0 <st_int8_copy>
 8007654:	f859 200a 	ldr.w	r2, [r9, sl]
 8007658:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 800765c:	440b      	add	r3, r1
 800765e:	4293      	cmp	r3, r2
 8007660:	d302      	bcc.n	8007668 <ai_platform_network_process+0x4e8>
 8007662:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007666:	1ad3      	subs	r3, r2, r3
 8007668:	f8c8 3004 	str.w	r3, [r8, #4]
 800766c:	e7d9      	b.n	8007622 <ai_platform_network_process+0x4a2>
 800766e:	f8bb 4016 	ldrh.w	r4, [fp, #22]
 8007672:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 8007676:	3401      	adds	r4, #1
 8007678:	b2a4      	uxth	r4, r4
 800767a:	42a3      	cmp	r3, r4
 800767c:	f8ab 4016 	strh.w	r4, [fp, #22]
 8007680:	f63f af7f 	bhi.w	8007582 <ai_platform_network_process+0x402>
 8007684:	4620      	mov	r0, r4
 8007686:	b005      	add	sp, #20
 8007688:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800768c:	2a01      	cmp	r2, #1
 800768e:	6b2e      	ldr	r6, [r5, #48]	; 0x30
 8007690:	d029      	beq.n	80076e6 <ai_platform_network_process+0x566>
 8007692:	f106 070c 	add.w	r7, r6, #12
 8007696:	e770      	b.n	800757a <ai_platform_network_process+0x3fa>
 8007698:	2218      	movs	r2, #24
 800769a:	2113      	movs	r1, #19
 800769c:	f105 0010 	add.w	r0, r5, #16
 80076a0:	2400      	movs	r4, #0
 80076a2:	f000 fb7f 	bl	8007da4 <core_set_error>
 80076a6:	e711      	b.n	80074cc <ai_platform_network_process+0x34c>
 80076a8:	9d03      	ldr	r5, [sp, #12]
 80076aa:	4604      	mov	r4, r0
 80076ac:	2217      	movs	r2, #23
 80076ae:	2112      	movs	r1, #18
 80076b0:	f105 0010 	add.w	r0, r5, #16
 80076b4:	f000 fb76 	bl	8007da4 <core_set_error>
 80076b8:	e708      	b.n	80074cc <ai_platform_network_process+0x34c>
 80076ba:	9d03      	ldr	r5, [sp, #12]
 80076bc:	2219      	movs	r2, #25
 80076be:	2112      	movs	r1, #18
 80076c0:	2400      	movs	r4, #0
 80076c2:	f105 0010 	add.w	r0, r5, #16
 80076c6:	f000 fb6d 	bl	8007da4 <core_set_error>
 80076ca:	e6ff      	b.n	80074cc <ai_platform_network_process+0x34c>
 80076cc:	9d03      	ldr	r5, [sp, #12]
 80076ce:	4604      	mov	r4, r0
 80076d0:	2221      	movs	r2, #33	; 0x21
 80076d2:	2112      	movs	r1, #18
 80076d4:	f105 0010 	add.w	r0, r5, #16
 80076d8:	f000 fb64 	bl	8007da4 <core_set_error>
 80076dc:	e6f6      	b.n	80074cc <ai_platform_network_process+0x34c>
 80076de:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 80076e2:	82ab      	strh	r3, [r5, #20]
 80076e4:	e744      	b.n	8007570 <ai_platform_network_process+0x3f0>
 80076e6:	2700      	movs	r7, #0
 80076e8:	e747      	b.n	800757a <ai_platform_network_process+0x3fa>
 80076ea:	4604      	mov	r4, r0
 80076ec:	2217      	movs	r2, #23
 80076ee:	2113      	movs	r1, #19
 80076f0:	f105 0010 	add.w	r0, r5, #16
 80076f4:	f000 fb56 	bl	8007da4 <core_set_error>
 80076f8:	e6e8      	b.n	80074cc <ai_platform_network_process+0x34c>
 80076fa:	2219      	movs	r2, #25
 80076fc:	2113      	movs	r1, #19
 80076fe:	f105 0010 	add.w	r0, r5, #16
 8007702:	2400      	movs	r4, #0
 8007704:	f000 fb4e 	bl	8007da4 <core_set_error>
 8007708:	e6e0      	b.n	80074cc <ai_platform_network_process+0x34c>
 800770a:	4604      	mov	r4, r0
 800770c:	2221      	movs	r2, #33	; 0x21
 800770e:	2113      	movs	r1, #19
 8007710:	f105 0010 	add.w	r0, r5, #16
 8007714:	f000 fb46 	bl	8007da4 <core_set_error>
 8007718:	e6d8      	b.n	80074cc <ai_platform_network_process+0x34c>
 800771a:	2217      	movs	r2, #23
 800771c:	2113      	movs	r1, #19
 800771e:	f105 0010 	add.w	r0, r5, #16
 8007722:	4654      	mov	r4, sl
 8007724:	f000 fb3e 	bl	8007da4 <core_set_error>
 8007728:	e6d0      	b.n	80074cc <ai_platform_network_process+0x34c>
 800772a:	bf00      	nop
 800772c:	58024000 	.word	0x58024000
 8007730:	f407a5c2 	.word	0xf407a5c2
 8007734:	b5e8b5cd 	.word	0xb5e8b5cd

08007738 <ai_platform_observer_node_info>:
 8007738:	b570      	push	{r4, r5, r6, lr}
 800773a:	4604      	mov	r4, r0
 800773c:	460d      	mov	r5, r1
 800773e:	b120      	cbz	r0, 800774a <ai_platform_observer_node_info+0x12>
 8007740:	4b61      	ldr	r3, [pc, #388]	; (80078c8 <ai_platform_observer_node_info+0x190>)
 8007742:	6802      	ldr	r2, [r0, #0]
 8007744:	429a      	cmp	r2, r3
 8007746:	bf18      	it	ne
 8007748:	2400      	movne	r4, #0
 800774a:	f7fd fe8d 	bl	8005468 <_ai_platform_acquire_crc>
 800774e:	4b5f      	ldr	r3, [pc, #380]	; (80078cc <ai_platform_observer_node_info+0x194>)
 8007750:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800775a:	189a      	adds	r2, r3, r2
 800775c:	2a01      	cmp	r2, #1
 800775e:	d929      	bls.n	80077b4 <ai_platform_observer_node_info+0x7c>
 8007760:	f240 4249 	movw	r2, #1097	; 0x449
 8007764:	4293      	cmp	r3, r2
 8007766:	d025      	beq.n	80077b4 <ai_platform_observer_node_info+0x7c>
 8007768:	4a59      	ldr	r2, [pc, #356]	; (80078d0 <ai_platform_observer_node_info+0x198>)
 800776a:	6813      	ldr	r3, [r2, #0]
 800776c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007770:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8007774:	d02b      	beq.n	80077ce <ai_platform_observer_node_info+0x96>
 8007776:	6813      	ldr	r3, [r2, #0]
 8007778:	f240 4183 	movw	r1, #1155	; 0x483
 800777c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007780:	428b      	cmp	r3, r1
 8007782:	d06c      	beq.n	800785e <ai_platform_observer_node_info+0x126>
 8007784:	6813      	ldr	r3, [r2, #0]
 8007786:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800778a:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800778e:	d051      	beq.n	8007834 <ai_platform_observer_node_info+0xfc>
 8007790:	6813      	ldr	r3, [r2, #0]
 8007792:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007796:	2b00      	cmp	r3, #0
 8007798:	d129      	bne.n	80077ee <ai_platform_observer_node_info+0xb6>
 800779a:	4a4e      	ldr	r2, [pc, #312]	; (80078d4 <ai_platform_observer_node_info+0x19c>)
 800779c:	2301      	movs	r3, #1
 800779e:	6093      	str	r3, [r2, #8]
 80077a0:	6893      	ldr	r3, [r2, #8]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d1fc      	bne.n	80077a0 <ai_platform_observer_node_info+0x68>
 80077a6:	4b4c      	ldr	r3, [pc, #304]	; (80078d8 <ai_platform_observer_node_info+0x1a0>)
 80077a8:	6013      	str	r3, [r2, #0]
 80077aa:	4b4c      	ldr	r3, [pc, #304]	; (80078dc <ai_platform_observer_node_info+0x1a4>)
 80077ac:	6812      	ldr	r2, [r2, #0]
 80077ae:	429a      	cmp	r2, r3
 80077b0:	d01d      	beq.n	80077ee <ai_platform_observer_node_info+0xb6>
 80077b2:	e7fe      	b.n	80077b2 <ai_platform_observer_node_info+0x7a>
 80077b4:	4a47      	ldr	r2, [pc, #284]	; (80078d4 <ai_platform_observer_node_info+0x19c>)
 80077b6:	2301      	movs	r3, #1
 80077b8:	6093      	str	r3, [r2, #8]
 80077ba:	6893      	ldr	r3, [r2, #8]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d1fc      	bne.n	80077ba <ai_platform_observer_node_info+0x82>
 80077c0:	4b45      	ldr	r3, [pc, #276]	; (80078d8 <ai_platform_observer_node_info+0x1a0>)
 80077c2:	6013      	str	r3, [r2, #0]
 80077c4:	4b45      	ldr	r3, [pc, #276]	; (80078dc <ai_platform_observer_node_info+0x1a4>)
 80077c6:	6812      	ldr	r2, [r2, #0]
 80077c8:	429a      	cmp	r2, r3
 80077ca:	d010      	beq.n	80077ee <ai_platform_observer_node_info+0xb6>
 80077cc:	e7fe      	b.n	80077cc <ai_platform_observer_node_info+0x94>
 80077ce:	4a44      	ldr	r2, [pc, #272]	; (80078e0 <ai_platform_observer_node_info+0x1a8>)
 80077d0:	2301      	movs	r3, #1
 80077d2:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80077d6:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d1fb      	bne.n	80077d6 <ai_platform_observer_node_info+0x9e>
 80077de:	4b3e      	ldr	r3, [pc, #248]	; (80078d8 <ai_platform_observer_node_info+0x1a0>)
 80077e0:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80077e4:	4b3d      	ldr	r3, [pc, #244]	; (80078dc <ai_platform_observer_node_info+0x1a4>)
 80077e6:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80077ea:	429a      	cmp	r2, r3
 80077ec:	d121      	bne.n	8007832 <ai_platform_observer_node_info+0xfa>
 80077ee:	f7fd fe3d 	bl	800546c <_ai_platform_release_crc>
 80077f2:	2d00      	cmp	r5, #0
 80077f4:	bf18      	it	ne
 80077f6:	2c00      	cmpne	r4, #0
 80077f8:	bf0c      	ite	eq
 80077fa:	2601      	moveq	r6, #1
 80077fc:	2600      	movne	r6, #0
 80077fe:	d026      	beq.n	800784e <ai_platform_observer_node_info+0x116>
 8007800:	68e3      	ldr	r3, [r4, #12]
 8007802:	079b      	lsls	r3, r3, #30
 8007804:	d54b      	bpl.n	800789e <ai_platform_observer_node_info+0x166>
 8007806:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007808:	4631      	mov	r1, r6
 800780a:	e000      	b.n	800780e <ai_platform_observer_node_info+0xd6>
 800780c:	b14a      	cbz	r2, 8007822 <ai_platform_observer_node_info+0xea>
 800780e:	b288      	uxth	r0, r1
 8007810:	3101      	adds	r1, #1
 8007812:	b133      	cbz	r3, 8007822 <ai_platform_observer_node_info+0xea>
 8007814:	882a      	ldrh	r2, [r5, #0]
 8007816:	4282      	cmp	r2, r0
 8007818:	d032      	beq.n	8007880 <ai_platform_observer_node_info+0x148>
 800781a:	691a      	ldr	r2, [r3, #16]
 800781c:	429a      	cmp	r2, r3
 800781e:	4613      	mov	r3, r2
 8007820:	d1f4      	bne.n	800780c <ai_platform_observer_node_info+0xd4>
 8007822:	2214      	movs	r2, #20
 8007824:	f104 0010 	add.w	r0, r4, #16
 8007828:	4611      	mov	r1, r2
 800782a:	f000 fabb 	bl	8007da4 <core_set_error>
 800782e:	4630      	mov	r0, r6
 8007830:	bd70      	pop	{r4, r5, r6, pc}
 8007832:	e7fe      	b.n	8007832 <ai_platform_observer_node_info+0xfa>
 8007834:	4a27      	ldr	r2, [pc, #156]	; (80078d4 <ai_platform_observer_node_info+0x19c>)
 8007836:	2301      	movs	r3, #1
 8007838:	6093      	str	r3, [r2, #8]
 800783a:	6893      	ldr	r3, [r2, #8]
 800783c:	2b00      	cmp	r3, #0
 800783e:	d1fc      	bne.n	800783a <ai_platform_observer_node_info+0x102>
 8007840:	4b25      	ldr	r3, [pc, #148]	; (80078d8 <ai_platform_observer_node_info+0x1a0>)
 8007842:	6013      	str	r3, [r2, #0]
 8007844:	4b25      	ldr	r3, [pc, #148]	; (80078dc <ai_platform_observer_node_info+0x1a4>)
 8007846:	6812      	ldr	r2, [r2, #0]
 8007848:	429a      	cmp	r2, r3
 800784a:	d0d0      	beq.n	80077ee <ai_platform_observer_node_info+0xb6>
 800784c:	e7fe      	b.n	800784c <ai_platform_observer_node_info+0x114>
 800784e:	b364      	cbz	r4, 80078aa <ai_platform_observer_node_info+0x172>
 8007850:	2210      	movs	r2, #16
 8007852:	2600      	movs	r6, #0
 8007854:	18a0      	adds	r0, r4, r2
 8007856:	4611      	mov	r1, r2
 8007858:	f000 faa4 	bl	8007da4 <core_set_error>
 800785c:	e7e7      	b.n	800782e <ai_platform_observer_node_info+0xf6>
 800785e:	4a20      	ldr	r2, [pc, #128]	; (80078e0 <ai_platform_observer_node_info+0x1a8>)
 8007860:	2301      	movs	r3, #1
 8007862:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8007866:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800786a:	2b00      	cmp	r3, #0
 800786c:	d1fb      	bne.n	8007866 <ai_platform_observer_node_info+0x12e>
 800786e:	4b1a      	ldr	r3, [pc, #104]	; (80078d8 <ai_platform_observer_node_info+0x1a0>)
 8007870:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8007874:	4b19      	ldr	r3, [pc, #100]	; (80078dc <ai_platform_observer_node_info+0x1a4>)
 8007876:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800787a:	429a      	cmp	r2, r3
 800787c:	d0b7      	beq.n	80077ee <ai_platform_observer_node_info+0xb6>
 800787e:	e7fe      	b.n	800787e <ai_platform_observer_node_info+0x146>
 8007880:	6999      	ldr	r1, [r3, #24]
 8007882:	f240 120f 	movw	r2, #271	; 0x10f
 8007886:	60e9      	str	r1, [r5, #12]
 8007888:	8819      	ldrh	r1, [r3, #0]
 800788a:	4291      	cmp	r1, r2
 800788c:	d00f      	beq.n	80078ae <ai_platform_observer_node_info+0x176>
 800788e:	8859      	ldrh	r1, [r3, #2]
 8007890:	2200      	movs	r2, #0
 8007892:	2601      	movs	r6, #1
 8007894:	80a9      	strh	r1, [r5, #4]
 8007896:	881b      	ldrh	r3, [r3, #0]
 8007898:	60aa      	str	r2, [r5, #8]
 800789a:	806b      	strh	r3, [r5, #2]
 800789c:	e7c7      	b.n	800782e <ai_platform_observer_node_info+0xf6>
 800789e:	2210      	movs	r2, #16
 80078a0:	2111      	movs	r1, #17
 80078a2:	18a0      	adds	r0, r4, r2
 80078a4:	f000 fa7e 	bl	8007da4 <core_set_error>
 80078a8:	e7c1      	b.n	800782e <ai_platform_observer_node_info+0xf6>
 80078aa:	4626      	mov	r6, r4
 80078ac:	e7bf      	b.n	800782e <ai_platform_observer_node_info+0xf6>
 80078ae:	69da      	ldr	r2, [r3, #28]
 80078b0:	2601      	movs	r6, #1
 80078b2:	8853      	ldrh	r3, [r2, #2]
 80078b4:	80ab      	strh	r3, [r5, #4]
 80078b6:	8813      	ldrh	r3, [r2, #0]
 80078b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078c0:	806b      	strh	r3, [r5, #2]
 80078c2:	6993      	ldr	r3, [r2, #24]
 80078c4:	60ab      	str	r3, [r5, #8]
 80078c6:	e7b2      	b.n	800782e <ai_platform_observer_node_info+0xf6>
 80078c8:	a1c00100 	.word	0xa1c00100
 80078cc:	e0042000 	.word	0xe0042000
 80078d0:	5c001000 	.word	0x5c001000
 80078d4:	40023000 	.word	0x40023000
 80078d8:	f407a5c2 	.word	0xf407a5c2
 80078dc:	b5e8b5cd 	.word	0xb5e8b5cd
 80078e0:	58024000 	.word	0x58024000

080078e4 <ai_platform_observer_register>:
 80078e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80078e8:	2800      	cmp	r0, #0
 80078ea:	d042      	beq.n	8007972 <ai_platform_observer_register+0x8e>
 80078ec:	4690      	mov	r8, r2
 80078ee:	461e      	mov	r6, r3
 80078f0:	6802      	ldr	r2, [r0, #0]
 80078f2:	4604      	mov	r4, r0
 80078f4:	4b96      	ldr	r3, [pc, #600]	; (8007b50 <ai_platform_observer_register+0x26c>)
 80078f6:	429a      	cmp	r2, r3
 80078f8:	d13b      	bne.n	8007972 <ai_platform_observer_register+0x8e>
 80078fa:	460f      	mov	r7, r1
 80078fc:	f7fd fdb4 	bl	8005468 <_ai_platform_acquire_crc>
 8007900:	4b94      	ldr	r3, [pc, #592]	; (8007b54 <ai_platform_observer_register+0x270>)
 8007902:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800790c:	189a      	adds	r2, r3, r2
 800790e:	2a01      	cmp	r2, #1
 8007910:	f240 8088 	bls.w	8007a24 <ai_platform_observer_register+0x140>
 8007914:	f240 4249 	movw	r2, #1097	; 0x449
 8007918:	4293      	cmp	r3, r2
 800791a:	f000 8083 	beq.w	8007a24 <ai_platform_observer_register+0x140>
 800791e:	4a8e      	ldr	r2, [pc, #568]	; (8007b58 <ai_platform_observer_register+0x274>)
 8007920:	6813      	ldr	r3, [r2, #0]
 8007922:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007926:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800792a:	f000 8089 	beq.w	8007a40 <ai_platform_observer_register+0x15c>
 800792e:	6813      	ldr	r3, [r2, #0]
 8007930:	f240 4183 	movw	r1, #1155	; 0x483
 8007934:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007938:	428b      	cmp	r3, r1
 800793a:	f000 80d6 	beq.w	8007aea <ai_platform_observer_register+0x206>
 800793e:	6813      	ldr	r3, [r2, #0]
 8007940:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007944:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8007948:	f000 80ee 	beq.w	8007b28 <ai_platform_observer_register+0x244>
 800794c:	6813      	ldr	r3, [r2, #0]
 800794e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007952:	2b00      	cmp	r3, #0
 8007954:	f040 8084 	bne.w	8007a60 <ai_platform_observer_register+0x17c>
 8007958:	4a80      	ldr	r2, [pc, #512]	; (8007b5c <ai_platform_observer_register+0x278>)
 800795a:	2301      	movs	r3, #1
 800795c:	6093      	str	r3, [r2, #8]
 800795e:	6893      	ldr	r3, [r2, #8]
 8007960:	2b00      	cmp	r3, #0
 8007962:	d1fc      	bne.n	800795e <ai_platform_observer_register+0x7a>
 8007964:	4b7e      	ldr	r3, [pc, #504]	; (8007b60 <ai_platform_observer_register+0x27c>)
 8007966:	6013      	str	r3, [r2, #0]
 8007968:	4b7e      	ldr	r3, [pc, #504]	; (8007b64 <ai_platform_observer_register+0x280>)
 800796a:	6812      	ldr	r2, [r2, #0]
 800796c:	429a      	cmp	r2, r3
 800796e:	d077      	beq.n	8007a60 <ai_platform_observer_register+0x17c>
 8007970:	e7fe      	b.n	8007970 <ai_platform_observer_register+0x8c>
 8007972:	f7fd fd79 	bl	8005468 <_ai_platform_acquire_crc>
 8007976:	4b77      	ldr	r3, [pc, #476]	; (8007b54 <ai_platform_observer_register+0x270>)
 8007978:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007982:	185a      	adds	r2, r3, r1
 8007984:	2a01      	cmp	r2, #1
 8007986:	d92b      	bls.n	80079e0 <ai_platform_observer_register+0xfc>
 8007988:	f240 4249 	movw	r2, #1097	; 0x449
 800798c:	4293      	cmp	r3, r2
 800798e:	d027      	beq.n	80079e0 <ai_platform_observer_register+0xfc>
 8007990:	4a71      	ldr	r2, [pc, #452]	; (8007b58 <ai_platform_observer_register+0x274>)
 8007992:	6813      	ldr	r3, [r2, #0]
 8007994:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007998:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800799c:	d02d      	beq.n	80079fa <ai_platform_observer_register+0x116>
 800799e:	6813      	ldr	r3, [r2, #0]
 80079a0:	f240 4183 	movw	r1, #1155	; 0x483
 80079a4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80079a8:	428b      	cmp	r3, r1
 80079aa:	f000 808d 	beq.w	8007ac8 <ai_platform_observer_register+0x1e4>
 80079ae:	6813      	ldr	r3, [r2, #0]
 80079b0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80079b4:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 80079b8:	f000 80a8 	beq.w	8007b0c <ai_platform_observer_register+0x228>
 80079bc:	6813      	ldr	r3, [r2, #0]
 80079be:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d129      	bne.n	8007a1a <ai_platform_observer_register+0x136>
 80079c6:	4a65      	ldr	r2, [pc, #404]	; (8007b5c <ai_platform_observer_register+0x278>)
 80079c8:	2301      	movs	r3, #1
 80079ca:	6093      	str	r3, [r2, #8]
 80079cc:	6893      	ldr	r3, [r2, #8]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d1fc      	bne.n	80079cc <ai_platform_observer_register+0xe8>
 80079d2:	4963      	ldr	r1, [pc, #396]	; (8007b60 <ai_platform_observer_register+0x27c>)
 80079d4:	4b63      	ldr	r3, [pc, #396]	; (8007b64 <ai_platform_observer_register+0x280>)
 80079d6:	6011      	str	r1, [r2, #0]
 80079d8:	6812      	ldr	r2, [r2, #0]
 80079da:	429a      	cmp	r2, r3
 80079dc:	d01d      	beq.n	8007a1a <ai_platform_observer_register+0x136>
 80079de:	e7fe      	b.n	80079de <ai_platform_observer_register+0xfa>
 80079e0:	4a5e      	ldr	r2, [pc, #376]	; (8007b5c <ai_platform_observer_register+0x278>)
 80079e2:	2301      	movs	r3, #1
 80079e4:	6093      	str	r3, [r2, #8]
 80079e6:	6893      	ldr	r3, [r2, #8]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d1fc      	bne.n	80079e6 <ai_platform_observer_register+0x102>
 80079ec:	495c      	ldr	r1, [pc, #368]	; (8007b60 <ai_platform_observer_register+0x27c>)
 80079ee:	4b5d      	ldr	r3, [pc, #372]	; (8007b64 <ai_platform_observer_register+0x280>)
 80079f0:	6011      	str	r1, [r2, #0]
 80079f2:	6812      	ldr	r2, [r2, #0]
 80079f4:	429a      	cmp	r2, r3
 80079f6:	d010      	beq.n	8007a1a <ai_platform_observer_register+0x136>
 80079f8:	e7fe      	b.n	80079f8 <ai_platform_observer_register+0x114>
 80079fa:	4a5b      	ldr	r2, [pc, #364]	; (8007b68 <ai_platform_observer_register+0x284>)
 80079fc:	2301      	movs	r3, #1
 80079fe:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8007a02:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d1fb      	bne.n	8007a02 <ai_platform_observer_register+0x11e>
 8007a0a:	4955      	ldr	r1, [pc, #340]	; (8007b60 <ai_platform_observer_register+0x27c>)
 8007a0c:	4b55      	ldr	r3, [pc, #340]	; (8007b64 <ai_platform_observer_register+0x280>)
 8007a0e:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8007a12:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8007a16:	429a      	cmp	r2, r3
 8007a18:	d111      	bne.n	8007a3e <ai_platform_observer_register+0x15a>
 8007a1a:	f7fd fd27 	bl	800546c <_ai_platform_release_crc>
 8007a1e:	2000      	movs	r0, #0
 8007a20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a24:	4b4d      	ldr	r3, [pc, #308]	; (8007b5c <ai_platform_observer_register+0x278>)
 8007a26:	2201      	movs	r2, #1
 8007a28:	609a      	str	r2, [r3, #8]
 8007a2a:	689d      	ldr	r5, [r3, #8]
 8007a2c:	2d00      	cmp	r5, #0
 8007a2e:	d1fc      	bne.n	8007a2a <ai_platform_observer_register+0x146>
 8007a30:	4a4b      	ldr	r2, [pc, #300]	; (8007b60 <ai_platform_observer_register+0x27c>)
 8007a32:	601a      	str	r2, [r3, #0]
 8007a34:	681a      	ldr	r2, [r3, #0]
 8007a36:	4b4b      	ldr	r3, [pc, #300]	; (8007b64 <ai_platform_observer_register+0x280>)
 8007a38:	429a      	cmp	r2, r3
 8007a3a:	d011      	beq.n	8007a60 <ai_platform_observer_register+0x17c>
 8007a3c:	e7fe      	b.n	8007a3c <ai_platform_observer_register+0x158>
 8007a3e:	e7fe      	b.n	8007a3e <ai_platform_observer_register+0x15a>
 8007a40:	4a49      	ldr	r2, [pc, #292]	; (8007b68 <ai_platform_observer_register+0x284>)
 8007a42:	2301      	movs	r3, #1
 8007a44:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8007a48:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d1fb      	bne.n	8007a48 <ai_platform_observer_register+0x164>
 8007a50:	4b43      	ldr	r3, [pc, #268]	; (8007b60 <ai_platform_observer_register+0x27c>)
 8007a52:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8007a56:	4b43      	ldr	r3, [pc, #268]	; (8007b64 <ai_platform_observer_register+0x280>)
 8007a58:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8007a5c:	429a      	cmp	r2, r3
 8007a5e:	d10c      	bne.n	8007a7a <ai_platform_observer_register+0x196>
 8007a60:	f7fd fd04 	bl	800546c <_ai_platform_release_crc>
 8007a64:	6c25      	ldr	r5, [r4, #64]	; 0x40
 8007a66:	b14d      	cbz	r5, 8007a7c <ai_platform_observer_register+0x198>
 8007a68:	2240      	movs	r2, #64	; 0x40
 8007a6a:	2111      	movs	r1, #17
 8007a6c:	f104 0010 	add.w	r0, r4, #16
 8007a70:	f000 f998 	bl	8007da4 <core_set_error>
 8007a74:	2000      	movs	r0, #0
 8007a76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a7a:	e7fe      	b.n	8007a7a <ai_platform_observer_register+0x196>
 8007a7c:	2014      	movs	r0, #20
 8007a7e:	f000 faed 	bl	800805c <core_mem_alloc>
 8007a82:	4681      	mov	r9, r0
 8007a84:	2800      	cmp	r0, #0
 8007a86:	d05c      	beq.n	8007b42 <ai_platform_observer_register+0x25e>
 8007a88:	81c5      	strh	r5, [r0, #14]
 8007a8a:	2101      	movs	r1, #1
 8007a8c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007a8e:	e007      	b.n	8007aa0 <ai_platform_observer_register+0x1bc>
 8007a90:	f8a9 100e 	strh.w	r1, [r9, #14]
 8007a94:	b2a9      	uxth	r1, r5
 8007a96:	691a      	ldr	r2, [r3, #16]
 8007a98:	b12a      	cbz	r2, 8007aa6 <ai_platform_observer_register+0x1c2>
 8007a9a:	429a      	cmp	r2, r3
 8007a9c:	4613      	mov	r3, r2
 8007a9e:	d002      	beq.n	8007aa6 <ai_platform_observer_register+0x1c2>
 8007aa0:	1c4d      	adds	r5, r1, #1
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d1f4      	bne.n	8007a90 <ai_platform_observer_register+0x1ac>
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	b2f3      	uxtb	r3, r6
 8007aaa:	f8c9 7000 	str.w	r7, [r9]
 8007aae:	2001      	movs	r0, #1
 8007ab0:	f8a9 200c 	strh.w	r2, [r9, #12]
 8007ab4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007ab8:	4a2c      	ldr	r2, [pc, #176]	; (8007b6c <ai_platform_observer_register+0x288>)
 8007aba:	f8c9 8004 	str.w	r8, [r9, #4]
 8007abe:	f8c9 3008 	str.w	r3, [r9, #8]
 8007ac2:	e9c4 290f 	strd	r2, r9, [r4, #60]	; 0x3c
 8007ac6:	e7ab      	b.n	8007a20 <ai_platform_observer_register+0x13c>
 8007ac8:	4a27      	ldr	r2, [pc, #156]	; (8007b68 <ai_platform_observer_register+0x284>)
 8007aca:	2301      	movs	r3, #1
 8007acc:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8007ad0:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d1fb      	bne.n	8007ad0 <ai_platform_observer_register+0x1ec>
 8007ad8:	4921      	ldr	r1, [pc, #132]	; (8007b60 <ai_platform_observer_register+0x27c>)
 8007ada:	4b22      	ldr	r3, [pc, #136]	; (8007b64 <ai_platform_observer_register+0x280>)
 8007adc:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8007ae0:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8007ae4:	429a      	cmp	r2, r3
 8007ae6:	d098      	beq.n	8007a1a <ai_platform_observer_register+0x136>
 8007ae8:	e7fe      	b.n	8007ae8 <ai_platform_observer_register+0x204>
 8007aea:	4a1f      	ldr	r2, [pc, #124]	; (8007b68 <ai_platform_observer_register+0x284>)
 8007aec:	2301      	movs	r3, #1
 8007aee:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8007af2:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d1fb      	bne.n	8007af2 <ai_platform_observer_register+0x20e>
 8007afa:	4b19      	ldr	r3, [pc, #100]	; (8007b60 <ai_platform_observer_register+0x27c>)
 8007afc:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8007b00:	4b18      	ldr	r3, [pc, #96]	; (8007b64 <ai_platform_observer_register+0x280>)
 8007b02:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8007b06:	429a      	cmp	r2, r3
 8007b08:	d0aa      	beq.n	8007a60 <ai_platform_observer_register+0x17c>
 8007b0a:	e7fe      	b.n	8007b0a <ai_platform_observer_register+0x226>
 8007b0c:	4a13      	ldr	r2, [pc, #76]	; (8007b5c <ai_platform_observer_register+0x278>)
 8007b0e:	2301      	movs	r3, #1
 8007b10:	6093      	str	r3, [r2, #8]
 8007b12:	6893      	ldr	r3, [r2, #8]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d1fc      	bne.n	8007b12 <ai_platform_observer_register+0x22e>
 8007b18:	4911      	ldr	r1, [pc, #68]	; (8007b60 <ai_platform_observer_register+0x27c>)
 8007b1a:	4b12      	ldr	r3, [pc, #72]	; (8007b64 <ai_platform_observer_register+0x280>)
 8007b1c:	6011      	str	r1, [r2, #0]
 8007b1e:	6812      	ldr	r2, [r2, #0]
 8007b20:	429a      	cmp	r2, r3
 8007b22:	f43f af7a 	beq.w	8007a1a <ai_platform_observer_register+0x136>
 8007b26:	e7fe      	b.n	8007b26 <ai_platform_observer_register+0x242>
 8007b28:	4a0c      	ldr	r2, [pc, #48]	; (8007b5c <ai_platform_observer_register+0x278>)
 8007b2a:	2301      	movs	r3, #1
 8007b2c:	6093      	str	r3, [r2, #8]
 8007b2e:	6893      	ldr	r3, [r2, #8]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d1fc      	bne.n	8007b2e <ai_platform_observer_register+0x24a>
 8007b34:	4b0a      	ldr	r3, [pc, #40]	; (8007b60 <ai_platform_observer_register+0x27c>)
 8007b36:	6013      	str	r3, [r2, #0]
 8007b38:	4b0a      	ldr	r3, [pc, #40]	; (8007b64 <ai_platform_observer_register+0x280>)
 8007b3a:	6812      	ldr	r2, [r2, #0]
 8007b3c:	429a      	cmp	r2, r3
 8007b3e:	d08f      	beq.n	8007a60 <ai_platform_observer_register+0x17c>
 8007b40:	e7fe      	b.n	8007b40 <ai_platform_observer_register+0x25c>
 8007b42:	2210      	movs	r2, #16
 8007b44:	2131      	movs	r1, #49	; 0x31
 8007b46:	18a0      	adds	r0, r4, r2
 8007b48:	f000 f92c 	bl	8007da4 <core_set_error>
 8007b4c:	4648      	mov	r0, r9
 8007b4e:	e767      	b.n	8007a20 <ai_platform_observer_register+0x13c>
 8007b50:	a1c00100 	.word	0xa1c00100
 8007b54:	e0042000 	.word	0xe0042000
 8007b58:	5c001000 	.word	0x5c001000
 8007b5c:	40023000 	.word	0x40023000
 8007b60:	f407a5c2 	.word	0xf407a5c2
 8007b64:	b5e8b5cd 	.word	0xb5e8b5cd
 8007b68:	58024000 	.word	0x58024000
 8007b6c:	08005345 	.word	0x08005345

08007b70 <ai_platform_observer_unregister>:
 8007b70:	b510      	push	{r4, lr}
 8007b72:	2800      	cmp	r0, #0
 8007b74:	d03c      	beq.n	8007bf0 <ai_platform_observer_unregister+0x80>
 8007b76:	4b80      	ldr	r3, [pc, #512]	; (8007d78 <ai_platform_observer_unregister+0x208>)
 8007b78:	4604      	mov	r4, r0
 8007b7a:	6802      	ldr	r2, [r0, #0]
 8007b7c:	429a      	cmp	r2, r3
 8007b7e:	d137      	bne.n	8007bf0 <ai_platform_observer_unregister+0x80>
 8007b80:	f7fd fc72 	bl	8005468 <_ai_platform_acquire_crc>
 8007b84:	4b7d      	ldr	r3, [pc, #500]	; (8007d7c <ai_platform_observer_unregister+0x20c>)
 8007b86:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007b90:	189a      	adds	r2, r3, r2
 8007b92:	2a01      	cmp	r2, #1
 8007b94:	f240 8083 	bls.w	8007c9e <ai_platform_observer_unregister+0x12e>
 8007b98:	f240 4249 	movw	r2, #1097	; 0x449
 8007b9c:	4293      	cmp	r3, r2
 8007b9e:	d07e      	beq.n	8007c9e <ai_platform_observer_unregister+0x12e>
 8007ba0:	4a77      	ldr	r2, [pc, #476]	; (8007d80 <ai_platform_observer_unregister+0x210>)
 8007ba2:	6813      	ldr	r3, [r2, #0]
 8007ba4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007ba8:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8007bac:	f000 8085 	beq.w	8007cba <ai_platform_observer_unregister+0x14a>
 8007bb0:	6813      	ldr	r3, [r2, #0]
 8007bb2:	f240 4183 	movw	r1, #1155	; 0x483
 8007bb6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007bba:	428b      	cmp	r3, r1
 8007bbc:	f000 80a0 	beq.w	8007d00 <ai_platform_observer_unregister+0x190>
 8007bc0:	6813      	ldr	r3, [r2, #0]
 8007bc2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007bc6:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8007bca:	f000 80c6 	beq.w	8007d5a <ai_platform_observer_unregister+0x1ea>
 8007bce:	6813      	ldr	r3, [r2, #0]
 8007bd0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	f000 80a5 	beq.w	8007d24 <ai_platform_observer_unregister+0x1b4>
 8007bda:	f7fd fc47 	bl	800546c <_ai_platform_release_crc>
 8007bde:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8007be0:	b108      	cbz	r0, 8007be6 <ai_platform_observer_unregister+0x76>
 8007be2:	f000 fa49 	bl	8008078 <core_mem_free>
 8007be6:	2300      	movs	r3, #0
 8007be8:	2001      	movs	r0, #1
 8007bea:	e9c4 330f 	strd	r3, r3, [r4, #60]	; 0x3c
 8007bee:	bd10      	pop	{r4, pc}
 8007bf0:	f7fd fc3a 	bl	8005468 <_ai_platform_acquire_crc>
 8007bf4:	4b61      	ldr	r3, [pc, #388]	; (8007d7c <ai_platform_observer_unregister+0x20c>)
 8007bf6:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007c00:	185a      	adds	r2, r3, r1
 8007c02:	2a01      	cmp	r2, #1
 8007c04:	d92a      	bls.n	8007c5c <ai_platform_observer_unregister+0xec>
 8007c06:	f240 4249 	movw	r2, #1097	; 0x449
 8007c0a:	4293      	cmp	r3, r2
 8007c0c:	d026      	beq.n	8007c5c <ai_platform_observer_unregister+0xec>
 8007c0e:	4a5c      	ldr	r2, [pc, #368]	; (8007d80 <ai_platform_observer_unregister+0x210>)
 8007c10:	6813      	ldr	r3, [r2, #0]
 8007c12:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007c16:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8007c1a:	d02c      	beq.n	8007c76 <ai_platform_observer_unregister+0x106>
 8007c1c:	6813      	ldr	r3, [r2, #0]
 8007c1e:	f240 4183 	movw	r1, #1155	; 0x483
 8007c22:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007c26:	428b      	cmp	r3, r1
 8007c28:	d059      	beq.n	8007cde <ai_platform_observer_unregister+0x16e>
 8007c2a:	6813      	ldr	r3, [r2, #0]
 8007c2c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007c30:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8007c34:	f000 8084 	beq.w	8007d40 <ai_platform_observer_unregister+0x1d0>
 8007c38:	6813      	ldr	r3, [r2, #0]
 8007c3a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d129      	bne.n	8007c96 <ai_platform_observer_unregister+0x126>
 8007c42:	4a50      	ldr	r2, [pc, #320]	; (8007d84 <ai_platform_observer_unregister+0x214>)
 8007c44:	2301      	movs	r3, #1
 8007c46:	6093      	str	r3, [r2, #8]
 8007c48:	6893      	ldr	r3, [r2, #8]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d1fc      	bne.n	8007c48 <ai_platform_observer_unregister+0xd8>
 8007c4e:	494e      	ldr	r1, [pc, #312]	; (8007d88 <ai_platform_observer_unregister+0x218>)
 8007c50:	4b4e      	ldr	r3, [pc, #312]	; (8007d8c <ai_platform_observer_unregister+0x21c>)
 8007c52:	6011      	str	r1, [r2, #0]
 8007c54:	6812      	ldr	r2, [r2, #0]
 8007c56:	429a      	cmp	r2, r3
 8007c58:	d01d      	beq.n	8007c96 <ai_platform_observer_unregister+0x126>
 8007c5a:	e7fe      	b.n	8007c5a <ai_platform_observer_unregister+0xea>
 8007c5c:	4a49      	ldr	r2, [pc, #292]	; (8007d84 <ai_platform_observer_unregister+0x214>)
 8007c5e:	2301      	movs	r3, #1
 8007c60:	6093      	str	r3, [r2, #8]
 8007c62:	6893      	ldr	r3, [r2, #8]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d1fc      	bne.n	8007c62 <ai_platform_observer_unregister+0xf2>
 8007c68:	4947      	ldr	r1, [pc, #284]	; (8007d88 <ai_platform_observer_unregister+0x218>)
 8007c6a:	4b48      	ldr	r3, [pc, #288]	; (8007d8c <ai_platform_observer_unregister+0x21c>)
 8007c6c:	6011      	str	r1, [r2, #0]
 8007c6e:	6812      	ldr	r2, [r2, #0]
 8007c70:	429a      	cmp	r2, r3
 8007c72:	d010      	beq.n	8007c96 <ai_platform_observer_unregister+0x126>
 8007c74:	e7fe      	b.n	8007c74 <ai_platform_observer_unregister+0x104>
 8007c76:	4a46      	ldr	r2, [pc, #280]	; (8007d90 <ai_platform_observer_unregister+0x220>)
 8007c78:	2301      	movs	r3, #1
 8007c7a:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8007c7e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d1fb      	bne.n	8007c7e <ai_platform_observer_unregister+0x10e>
 8007c86:	4940      	ldr	r1, [pc, #256]	; (8007d88 <ai_platform_observer_unregister+0x218>)
 8007c88:	4b40      	ldr	r3, [pc, #256]	; (8007d8c <ai_platform_observer_unregister+0x21c>)
 8007c8a:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8007c8e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8007c92:	429a      	cmp	r2, r3
 8007c94:	d110      	bne.n	8007cb8 <ai_platform_observer_unregister+0x148>
 8007c96:	f7fd fbe9 	bl	800546c <_ai_platform_release_crc>
 8007c9a:	2000      	movs	r0, #0
 8007c9c:	bd10      	pop	{r4, pc}
 8007c9e:	4a39      	ldr	r2, [pc, #228]	; (8007d84 <ai_platform_observer_unregister+0x214>)
 8007ca0:	2301      	movs	r3, #1
 8007ca2:	6093      	str	r3, [r2, #8]
 8007ca4:	6893      	ldr	r3, [r2, #8]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d1fc      	bne.n	8007ca4 <ai_platform_observer_unregister+0x134>
 8007caa:	4937      	ldr	r1, [pc, #220]	; (8007d88 <ai_platform_observer_unregister+0x218>)
 8007cac:	4b37      	ldr	r3, [pc, #220]	; (8007d8c <ai_platform_observer_unregister+0x21c>)
 8007cae:	6011      	str	r1, [r2, #0]
 8007cb0:	6812      	ldr	r2, [r2, #0]
 8007cb2:	429a      	cmp	r2, r3
 8007cb4:	d091      	beq.n	8007bda <ai_platform_observer_unregister+0x6a>
 8007cb6:	e7fe      	b.n	8007cb6 <ai_platform_observer_unregister+0x146>
 8007cb8:	e7fe      	b.n	8007cb8 <ai_platform_observer_unregister+0x148>
 8007cba:	4a35      	ldr	r2, [pc, #212]	; (8007d90 <ai_platform_observer_unregister+0x220>)
 8007cbc:	2301      	movs	r3, #1
 8007cbe:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8007cc2:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d1fb      	bne.n	8007cc2 <ai_platform_observer_unregister+0x152>
 8007cca:	492f      	ldr	r1, [pc, #188]	; (8007d88 <ai_platform_observer_unregister+0x218>)
 8007ccc:	4b2f      	ldr	r3, [pc, #188]	; (8007d8c <ai_platform_observer_unregister+0x21c>)
 8007cce:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8007cd2:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8007cd6:	429a      	cmp	r2, r3
 8007cd8:	f43f af7f 	beq.w	8007bda <ai_platform_observer_unregister+0x6a>
 8007cdc:	e7fe      	b.n	8007cdc <ai_platform_observer_unregister+0x16c>
 8007cde:	4a2c      	ldr	r2, [pc, #176]	; (8007d90 <ai_platform_observer_unregister+0x220>)
 8007ce0:	2301      	movs	r3, #1
 8007ce2:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8007ce6:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d1fb      	bne.n	8007ce6 <ai_platform_observer_unregister+0x176>
 8007cee:	4926      	ldr	r1, [pc, #152]	; (8007d88 <ai_platform_observer_unregister+0x218>)
 8007cf0:	4b26      	ldr	r3, [pc, #152]	; (8007d8c <ai_platform_observer_unregister+0x21c>)
 8007cf2:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8007cf6:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8007cfa:	429a      	cmp	r2, r3
 8007cfc:	d0cb      	beq.n	8007c96 <ai_platform_observer_unregister+0x126>
 8007cfe:	e7fe      	b.n	8007cfe <ai_platform_observer_unregister+0x18e>
 8007d00:	4a23      	ldr	r2, [pc, #140]	; (8007d90 <ai_platform_observer_unregister+0x220>)
 8007d02:	2301      	movs	r3, #1
 8007d04:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8007d08:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d1fb      	bne.n	8007d08 <ai_platform_observer_unregister+0x198>
 8007d10:	491d      	ldr	r1, [pc, #116]	; (8007d88 <ai_platform_observer_unregister+0x218>)
 8007d12:	4b1e      	ldr	r3, [pc, #120]	; (8007d8c <ai_platform_observer_unregister+0x21c>)
 8007d14:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8007d18:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8007d1c:	429a      	cmp	r2, r3
 8007d1e:	f43f af5c 	beq.w	8007bda <ai_platform_observer_unregister+0x6a>
 8007d22:	e7fe      	b.n	8007d22 <ai_platform_observer_unregister+0x1b2>
 8007d24:	4a17      	ldr	r2, [pc, #92]	; (8007d84 <ai_platform_observer_unregister+0x214>)
 8007d26:	2301      	movs	r3, #1
 8007d28:	6093      	str	r3, [r2, #8]
 8007d2a:	6893      	ldr	r3, [r2, #8]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d1fc      	bne.n	8007d2a <ai_platform_observer_unregister+0x1ba>
 8007d30:	4915      	ldr	r1, [pc, #84]	; (8007d88 <ai_platform_observer_unregister+0x218>)
 8007d32:	4b16      	ldr	r3, [pc, #88]	; (8007d8c <ai_platform_observer_unregister+0x21c>)
 8007d34:	6011      	str	r1, [r2, #0]
 8007d36:	6812      	ldr	r2, [r2, #0]
 8007d38:	429a      	cmp	r2, r3
 8007d3a:	f43f af4e 	beq.w	8007bda <ai_platform_observer_unregister+0x6a>
 8007d3e:	e7fe      	b.n	8007d3e <ai_platform_observer_unregister+0x1ce>
 8007d40:	4a10      	ldr	r2, [pc, #64]	; (8007d84 <ai_platform_observer_unregister+0x214>)
 8007d42:	2301      	movs	r3, #1
 8007d44:	6093      	str	r3, [r2, #8]
 8007d46:	6893      	ldr	r3, [r2, #8]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d1fc      	bne.n	8007d46 <ai_platform_observer_unregister+0x1d6>
 8007d4c:	490e      	ldr	r1, [pc, #56]	; (8007d88 <ai_platform_observer_unregister+0x218>)
 8007d4e:	4b0f      	ldr	r3, [pc, #60]	; (8007d8c <ai_platform_observer_unregister+0x21c>)
 8007d50:	6011      	str	r1, [r2, #0]
 8007d52:	6812      	ldr	r2, [r2, #0]
 8007d54:	429a      	cmp	r2, r3
 8007d56:	d09e      	beq.n	8007c96 <ai_platform_observer_unregister+0x126>
 8007d58:	e7fe      	b.n	8007d58 <ai_platform_observer_unregister+0x1e8>
 8007d5a:	4a0a      	ldr	r2, [pc, #40]	; (8007d84 <ai_platform_observer_unregister+0x214>)
 8007d5c:	2301      	movs	r3, #1
 8007d5e:	6093      	str	r3, [r2, #8]
 8007d60:	6893      	ldr	r3, [r2, #8]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d1fc      	bne.n	8007d60 <ai_platform_observer_unregister+0x1f0>
 8007d66:	4908      	ldr	r1, [pc, #32]	; (8007d88 <ai_platform_observer_unregister+0x218>)
 8007d68:	4b08      	ldr	r3, [pc, #32]	; (8007d8c <ai_platform_observer_unregister+0x21c>)
 8007d6a:	6011      	str	r1, [r2, #0]
 8007d6c:	6812      	ldr	r2, [r2, #0]
 8007d6e:	429a      	cmp	r2, r3
 8007d70:	f43f af33 	beq.w	8007bda <ai_platform_observer_unregister+0x6a>
 8007d74:	e7fe      	b.n	8007d74 <ai_platform_observer_unregister+0x204>
 8007d76:	bf00      	nop
 8007d78:	a1c00100 	.word	0xa1c00100
 8007d7c:	e0042000 	.word	0xe0042000
 8007d80:	5c001000 	.word	0x5c001000
 8007d84:	40023000 	.word	0x40023000
 8007d88:	f407a5c2 	.word	0xf407a5c2
 8007d8c:	b5e8b5cd 	.word	0xb5e8b5cd
 8007d90:	58024000 	.word	0x58024000

08007d94 <core_init>:
 8007d94:	2001      	movs	r0, #1
 8007d96:	4770      	bx	lr

08007d98 <core_get_error>:
 8007d98:	4603      	mov	r3, r0
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	6800      	ldr	r0, [r0, #0]
 8007d9e:	601a      	str	r2, [r3, #0]
 8007da0:	4770      	bx	lr
 8007da2:	bf00      	nop

08007da4 <core_set_error>:
 8007da4:	4603      	mov	r3, r0
 8007da6:	7800      	ldrb	r0, [r0, #0]
 8007da8:	b108      	cbz	r0, 8007dae <core_set_error+0xa>
 8007daa:	2000      	movs	r0, #0
 8007dac:	4770      	bx	lr
 8007dae:	7019      	strb	r1, [r3, #0]
 8007db0:	2001      	movs	r0, #1
 8007db2:	6819      	ldr	r1, [r3, #0]
 8007db4:	f362 211f 	bfi	r1, r2, #8, #24
 8007db8:	6019      	str	r1, [r3, #0]
 8007dba:	4770      	bx	lr

08007dbc <node_convert>:
 8007dbc:	6982      	ldr	r2, [r0, #24]
 8007dbe:	8813      	ldrh	r3, [r2, #0]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d04a      	beq.n	8007e5a <node_convert+0x9e>
 8007dc4:	6852      	ldr	r2, [r2, #4]
 8007dc6:	6850      	ldr	r0, [r2, #4]
 8007dc8:	b100      	cbz	r0, 8007dcc <node_convert+0x10>
 8007dca:	6800      	ldr	r0, [r0, #0]
 8007dcc:	2b01      	cmp	r3, #1
 8007dce:	f000 813d 	beq.w	800804c <node_convert+0x290>
 8007dd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007dd6:	6915      	ldr	r5, [r2, #16]
 8007dd8:	b105      	cbz	r5, 8007ddc <node_convert+0x20>
 8007dda:	682d      	ldr	r5, [r5, #0]
 8007ddc:	6883      	ldr	r3, [r0, #8]
 8007dde:	0a1b      	lsrs	r3, r3, #8
 8007de0:	f000 80ee 	beq.w	8007fc0 <node_convert+0x204>
 8007de4:	68c1      	ldr	r1, [r0, #12]
 8007de6:	2401      	movs	r4, #1
 8007de8:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8007dec:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8007df0:	4299      	cmp	r1, r3
 8007df2:	fb02 f404 	mul.w	r4, r2, r4
 8007df6:	d1f9      	bne.n	8007dec <node_convert+0x30>
 8007df8:	6982      	ldr	r2, [r0, #24]
 8007dfa:	69af      	ldr	r7, [r5, #24]
 8007dfc:	6813      	ldr	r3, [r2, #0]
 8007dfe:	f3c3 4143 	ubfx	r1, r3, #17, #4
 8007e02:	2901      	cmp	r1, #1
 8007e04:	d02b      	beq.n	8007e5e <node_convert+0xa2>
 8007e06:	6801      	ldr	r1, [r0, #0]
 8007e08:	68bd      	ldr	r5, [r7, #8]
 8007e0a:	2900      	cmp	r1, #0
 8007e0c:	d069      	beq.n	8007ee2 <node_convert+0x126>
 8007e0e:	684e      	ldr	r6, [r1, #4]
 8007e10:	f3c3 50c0 	ubfx	r0, r3, #23, #1
 8007e14:	6892      	ldr	r2, [r2, #8]
 8007e16:	2e00      	cmp	r6, #0
 8007e18:	f000 80b8 	beq.w	8007f8c <node_convert+0x1d0>
 8007e1c:	884b      	ldrh	r3, [r1, #2]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	f000 8089 	beq.w	8007f36 <node_convert+0x17a>
 8007e24:	6833      	ldr	r3, [r6, #0]
 8007e26:	ed93 7a00 	vldr	s14, [r3]
 8007e2a:	6873      	ldr	r3, [r6, #4]
 8007e2c:	2800      	cmp	r0, #0
 8007e2e:	f000 80c5 	beq.w	8007fbc <node_convert+0x200>
 8007e32:	f993 0000 	ldrsb.w	r0, [r3]
 8007e36:	b174      	cbz	r4, 8007e56 <node_convert+0x9a>
 8007e38:	4629      	mov	r1, r5
 8007e3a:	4414      	add	r4, r2
 8007e3c:	f912 3b01 	ldrsb.w	r3, [r2], #1
 8007e40:	1a1b      	subs	r3, r3, r0
 8007e42:	42a2      	cmp	r2, r4
 8007e44:	ee07 3a90 	vmov	s15, r3
 8007e48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007e4c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007e50:	ece1 7a01 	vstmia	r1!, {s15}
 8007e54:	d1f2      	bne.n	8007e3c <node_convert+0x80>
 8007e56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e5a:	685b      	ldr	r3, [r3, #4]
 8007e5c:	deff      	udf	#255	; 0xff
 8007e5e:	682e      	ldr	r6, [r5, #0]
 8007e60:	6895      	ldr	r5, [r2, #8]
 8007e62:	2e00      	cmp	r6, #0
 8007e64:	f000 80ae 	beq.w	8007fc4 <node_convert+0x208>
 8007e68:	683b      	ldr	r3, [r7, #0]
 8007e6a:	6871      	ldr	r1, [r6, #4]
 8007e6c:	68ba      	ldr	r2, [r7, #8]
 8007e6e:	f3c3 53c0 	ubfx	r3, r3, #23, #1
 8007e72:	2900      	cmp	r1, #0
 8007e74:	d064      	beq.n	8007f40 <node_convert+0x184>
 8007e76:	8870      	ldrh	r0, [r6, #2]
 8007e78:	2800      	cmp	r0, #0
 8007e7a:	d067      	beq.n	8007f4c <node_convert+0x190>
 8007e7c:	6808      	ldr	r0, [r1, #0]
 8007e7e:	edd0 7a00 	vldr	s15, [r0]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	f000 80d7 	beq.w	8008036 <node_convert+0x27a>
 8007e88:	684b      	ldr	r3, [r1, #4]
 8007e8a:	f993 3000 	ldrsb.w	r3, [r3]
 8007e8e:	ee06 3a90 	vmov	s13, r3
 8007e92:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8007e96:	2c00      	cmp	r4, #0
 8007e98:	d0dd      	beq.n	8007e56 <node_convert+0x9a>
 8007e9a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007e9e:	4414      	add	r4, r2
 8007ea0:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8007ea4:	ed9f 5a6b 	vldr	s10, [pc, #428]	; 8008054 <node_convert+0x298>
 8007ea8:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8007eac:	ecb5 7a01 	vldmia	r5!, {s14}
 8007eb0:	eef0 7a66 	vmov.f32	s15, s13
 8007eb4:	eee7 7a06 	vfma.f32	s15, s14, s12
 8007eb8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007ebc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ec0:	bfac      	ite	ge
 8007ec2:	ee77 7aa5 	vaddge.f32	s15, s15, s11
 8007ec6:	ee77 7ac5 	vsublt.f32	s15, s15, s10
 8007eca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007ece:	ee17 3a90 	vmov	r3, s15
 8007ed2:	f303 0307 	ssat	r3, #8, r3
 8007ed6:	f802 3b01 	strb.w	r3, [r2], #1
 8007eda:	42a2      	cmp	r2, r4
 8007edc:	d1e6      	bne.n	8007eac <node_convert+0xf0>
 8007ede:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ee2:	f3c3 11c6 	ubfx	r1, r3, #7, #7
 8007ee6:	f003 067f 	and.w	r6, r3, #127	; 0x7f
 8007eea:	f3c3 53c0 	ubfx	r3, r3, #23, #1
 8007eee:	6890      	ldr	r0, [r2, #8]
 8007ef0:	1b8e      	subs	r6, r1, r6
 8007ef2:	2908      	cmp	r1, #8
 8007ef4:	4622      	mov	r2, r4
 8007ef6:	4629      	mov	r1, r5
 8007ef8:	f106 0640 	add.w	r6, r6, #64	; 0x40
 8007efc:	eba6 0603 	sub.w	r6, r6, r3
 8007f00:	f000 808b 	beq.w	800801a <node_convert+0x25e>
 8007f04:	f001 f8a6 	bl	8009054 <arm_q15_to_float>
 8007f08:	2e00      	cmp	r6, #0
 8007f0a:	d0a4      	beq.n	8007e56 <node_convert+0x9a>
 8007f0c:	ee07 6a90 	vmov	s15, r6
 8007f10:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8007f14:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 8007f18:	f003 fff4 	bl	800bf04 <powf>
 8007f1c:	2c00      	cmp	r4, #0
 8007f1e:	d09a      	beq.n	8007e56 <node_convert+0x9a>
 8007f20:	2300      	movs	r3, #0
 8007f22:	ecf5 7a01 	vldmia	r5!, {s15}
 8007f26:	3301      	adds	r3, #1
 8007f28:	ee67 7a80 	vmul.f32	s15, s15, s0
 8007f2c:	429c      	cmp	r4, r3
 8007f2e:	ed45 7a01 	vstr	s15, [r5, #-4]
 8007f32:	d1f6      	bne.n	8007f22 <node_convert+0x166>
 8007f34:	e78f      	b.n	8007e56 <node_convert+0x9a>
 8007f36:	b358      	cbz	r0, 8007f90 <node_convert+0x1d4>
 8007f38:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8008058 <node_convert+0x29c>
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	e77a      	b.n	8007e36 <node_convert+0x7a>
 8007f40:	b133      	cbz	r3, 8007f50 <node_convert+0x194>
 8007f42:	eddf 6a45 	vldr	s13, [pc, #276]	; 8008058 <node_convert+0x29c>
 8007f46:	eef0 7a66 	vmov.f32	s15, s13
 8007f4a:	e7a4      	b.n	8007e96 <node_convert+0xda>
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d1f8      	bne.n	8007f42 <node_convert+0x186>
 8007f50:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8007f54:	eddf 7a40 	vldr	s15, [pc, #256]	; 8008058 <node_convert+0x29c>
 8007f58:	2c00      	cmp	r4, #0
 8007f5a:	f43f af7c 	beq.w	8007e56 <node_convert+0x9a>
 8007f5e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007f62:	4414      	add	r4, r2
 8007f64:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8007f68:	ecb5 7a01 	vldmia	r5!, {s14}
 8007f6c:	eef0 7a66 	vmov.f32	s15, s13
 8007f70:	eee7 7a06 	vfma.f32	s15, s14, s12
 8007f74:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007f78:	ee17 3a90 	vmov	r3, s15
 8007f7c:	f383 0308 	usat	r3, #8, r3
 8007f80:	f802 3b01 	strb.w	r3, [r2], #1
 8007f84:	42a2      	cmp	r2, r4
 8007f86:	d1ef      	bne.n	8007f68 <node_convert+0x1ac>
 8007f88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f8c:	2800      	cmp	r0, #0
 8007f8e:	d147      	bne.n	8008020 <node_convert+0x264>
 8007f90:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8008058 <node_convert+0x29c>
 8007f94:	2c00      	cmp	r4, #0
 8007f96:	f43f af5e 	beq.w	8007e56 <node_convert+0x9a>
 8007f9a:	4629      	mov	r1, r5
 8007f9c:	4414      	add	r4, r2
 8007f9e:	f812 3b01 	ldrb.w	r3, [r2], #1
 8007fa2:	1a1b      	subs	r3, r3, r0
 8007fa4:	42a2      	cmp	r2, r4
 8007fa6:	ee07 3a90 	vmov	s15, r3
 8007faa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007fae:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007fb2:	ece1 7a01 	vstmia	r1!, {s15}
 8007fb6:	d1f2      	bne.n	8007f9e <node_convert+0x1e2>
 8007fb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007fbc:	7818      	ldrb	r0, [r3, #0]
 8007fbe:	e7e9      	b.n	8007f94 <node_convert+0x1d8>
 8007fc0:	2401      	movs	r4, #1
 8007fc2:	e719      	b.n	8007df8 <node_convert+0x3c>
 8007fc4:	683a      	ldr	r2, [r7, #0]
 8007fc6:	f3c2 18c6 	ubfx	r8, r2, #7, #7
 8007fca:	f002 037f 	and.w	r3, r2, #127	; 0x7f
 8007fce:	f3c2 52c0 	ubfx	r2, r2, #23, #1
 8007fd2:	eba8 0303 	sub.w	r3, r8, r3
 8007fd6:	3340      	adds	r3, #64	; 0x40
 8007fd8:	1a9b      	subs	r3, r3, r2
 8007fda:	d014      	beq.n	8008006 <node_convert+0x24a>
 8007fdc:	425b      	negs	r3, r3
 8007fde:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8007fe2:	ee00 3a90 	vmov	s1, r3
 8007fe6:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 8007fea:	f003 ff8b 	bl	800bf04 <powf>
 8007fee:	b154      	cbz	r4, 8008006 <node_convert+0x24a>
 8007ff0:	4633      	mov	r3, r6
 8007ff2:	462a      	mov	r2, r5
 8007ff4:	ecf2 7a01 	vldmia	r2!, {s15}
 8007ff8:	3301      	adds	r3, #1
 8007ffa:	ee67 7a80 	vmul.f32	s15, s15, s0
 8007ffe:	42a3      	cmp	r3, r4
 8008000:	ed42 7a01 	vstr	s15, [r2, #-4]
 8008004:	d1f6      	bne.n	8007ff4 <node_convert+0x238>
 8008006:	f1b8 0f08 	cmp.w	r8, #8
 800800a:	d00d      	beq.n	8008028 <node_convert+0x26c>
 800800c:	4622      	mov	r2, r4
 800800e:	68b9      	ldr	r1, [r7, #8]
 8008010:	4628      	mov	r0, r5
 8008012:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008016:	f000 be9b 	b.w	8008d50 <arm_float_to_q15>
 800801a:	f001 f881 	bl	8009120 <arm_q7_to_float>
 800801e:	e773      	b.n	8007f08 <node_convert+0x14c>
 8008020:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8008058 <node_convert+0x29c>
 8008024:	4630      	mov	r0, r6
 8008026:	e706      	b.n	8007e36 <node_convert+0x7a>
 8008028:	4622      	mov	r2, r4
 800802a:	68b9      	ldr	r1, [r7, #8]
 800802c:	4628      	mov	r0, r5
 800802e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008032:	f000 bf43 	b.w	8008ebc <arm_float_to_q7>
 8008036:	684b      	ldr	r3, [r1, #4]
 8008038:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800803c:	781b      	ldrb	r3, [r3, #0]
 800803e:	ee06 3a90 	vmov	s13, r3
 8008042:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8008046:	ee76 6a87 	vadd.f32	s13, s13, s14
 800804a:	e785      	b.n	8007f58 <node_convert+0x19c>
 800804c:	2300      	movs	r3, #0
 800804e:	685b      	ldr	r3, [r3, #4]
 8008050:	deff      	udf	#255	; 0xff
 8008052:	bf00      	nop
 8008054:	3efffffc 	.word	0x3efffffc
 8008058:	00000000 	.word	0x00000000

0800805c <core_mem_alloc>:
 800805c:	b150      	cbz	r0, 8008074 <core_mem_alloc+0x18>
 800805e:	3004      	adds	r0, #4
 8008060:	b508      	push	{r3, lr}
 8008062:	f7fc fa6f 	bl	8004544 <__wrap_malloc>
 8008066:	4603      	mov	r3, r0
 8008068:	b110      	cbz	r0, 8008070 <core_mem_alloc+0x14>
 800806a:	3004      	adds	r0, #4
 800806c:	601b      	str	r3, [r3, #0]
 800806e:	bd08      	pop	{r3, pc}
 8008070:	2000      	movs	r0, #0
 8008072:	bd08      	pop	{r3, pc}
 8008074:	2000      	movs	r0, #0
 8008076:	4770      	bx	lr

08008078 <core_mem_free>:
 8008078:	b150      	cbz	r0, 8008090 <core_mem_free+0x18>
 800807a:	b508      	push	{r3, lr}
 800807c:	1f03      	subs	r3, r0, #4
 800807e:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8008082:	4293      	cmp	r3, r2
 8008084:	d103      	bne.n	800808e <core_mem_free+0x16>
 8008086:	4618      	mov	r0, r3
 8008088:	f7fc fa84 	bl	8004594 <__wrap_free>
 800808c:	2000      	movs	r0, #0
 800808e:	bd08      	pop	{r3, pc}
 8008090:	4770      	bx	lr
 8008092:	bf00      	nop

08008094 <ai_check_custom_types>:
 8008094:	b082      	sub	sp, #8
 8008096:	4b12      	ldr	r3, [pc, #72]	; (80080e0 <ai_check_custom_types+0x4c>)
 8008098:	9301      	str	r3, [sp, #4]
 800809a:	b118      	cbz	r0, 80080a4 <ai_check_custom_types+0x10>
 800809c:	7803      	ldrb	r3, [r0, #0]
 800809e:	2b03      	cmp	r3, #3
 80080a0:	d002      	beq.n	80080a8 <ai_check_custom_types+0x14>
 80080a2:	2000      	movs	r0, #0
 80080a4:	b002      	add	sp, #8
 80080a6:	4770      	bx	lr
 80080a8:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80080ac:	4293      	cmp	r3, r2
 80080ae:	d004      	beq.n	80080ba <ai_check_custom_types+0x26>
 80080b0:	2001      	movs	r0, #1
 80080b2:	f080 0001 	eor.w	r0, r0, #1
 80080b6:	b002      	add	sp, #8
 80080b8:	4770      	bx	lr
 80080ba:	7842      	ldrb	r2, [r0, #1]
 80080bc:	3001      	adds	r0, #1
 80080be:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80080c2:	429a      	cmp	r2, r3
 80080c4:	d1f4      	bne.n	80080b0 <ai_check_custom_types+0x1c>
 80080c6:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 80080ca:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80080ce:	429a      	cmp	r2, r3
 80080d0:	d1ee      	bne.n	80080b0 <ai_check_custom_types+0x1c>
 80080d2:	7842      	ldrb	r2, [r0, #1]
 80080d4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80080d8:	429a      	cmp	r2, r3
 80080da:	d1e9      	bne.n	80080b0 <ai_check_custom_types+0x1c>
 80080dc:	2000      	movs	r0, #0
 80080de:	e7e8      	b.n	80080b2 <ai_check_custom_types+0x1e>
 80080e0:	84048403 	.word	0x84048403

080080e4 <ai_layer_type_name>:
 80080e4:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
 80080e8:	d809      	bhi.n	80080fe <ai_layer_type_name+0x1a>
 80080ea:	f5b0 7f99 	cmp.w	r0, #306	; 0x132
 80080ee:	d217      	bcs.n	8008120 <ai_layer_type_name+0x3c>
 80080f0:	f5b0 7f82 	cmp.w	r0, #260	; 0x104
 80080f4:	d80e      	bhi.n	8008114 <ai_layer_type_name+0x30>
 80080f6:	28ff      	cmp	r0, #255	; 0xff
 80080f8:	d805      	bhi.n	8008106 <ai_layer_type_name+0x22>
 80080fa:	480f      	ldr	r0, [pc, #60]	; (8008138 <ai_layer_type_name+0x54>)
 80080fc:	4770      	bx	lr
 80080fe:	f5a0 73c0 	sub.w	r3, r0, #384	; 0x180
 8008102:	2b03      	cmp	r3, #3
 8008104:	d8f9      	bhi.n	80080fa <ai_layer_type_name+0x16>
 8008106:	f5a0 7080 	sub.w	r0, r0, #256	; 0x100
 800810a:	4b0c      	ldr	r3, [pc, #48]	; (800813c <ai_layer_type_name+0x58>)
 800810c:	b280      	uxth	r0, r0
 800810e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8008112:	4770      	bx	lr
 8008114:	f5a0 7383 	sub.w	r3, r0, #262	; 0x106
 8008118:	2b27      	cmp	r3, #39	; 0x27
 800811a:	d9f4      	bls.n	8008106 <ai_layer_type_name+0x22>
 800811c:	4806      	ldr	r0, [pc, #24]	; (8008138 <ai_layer_type_name+0x54>)
 800811e:	4770      	bx	lr
 8008120:	f5a0 7399 	sub.w	r3, r0, #306	; 0x132
 8008124:	2201      	movs	r2, #1
 8008126:	4906      	ldr	r1, [pc, #24]	; (8008140 <ai_layer_type_name+0x5c>)
 8008128:	b29b      	uxth	r3, r3
 800812a:	fa02 f303 	lsl.w	r3, r2, r3
 800812e:	420b      	tst	r3, r1
 8008130:	d1e9      	bne.n	8008106 <ai_layer_type_name+0x22>
 8008132:	4801      	ldr	r0, [pc, #4]	; (8008138 <ai_layer_type_name+0x54>)
 8008134:	4770      	bx	lr
 8008136:	bf00      	nop
 8008138:	080224fc 	.word	0x080224fc
 800813c:	080226e8 	.word	0x080226e8
 8008140:	00012007 	.word	0x00012007

08008144 <ai_layers_init_all>:
 8008144:	2100      	movs	r1, #0
 8008146:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8008148:	b13b      	cbz	r3, 800815a <ai_layers_init_all+0x16>
 800814a:	691a      	ldr	r2, [r3, #16]
 800814c:	3101      	adds	r1, #1
 800814e:	60d8      	str	r0, [r3, #12]
 8008150:	429a      	cmp	r2, r3
 8008152:	4613      	mov	r3, r2
 8008154:	d001      	beq.n	800815a <ai_layers_init_all+0x16>
 8008156:	2a00      	cmp	r2, #0
 8008158:	d1f6      	bne.n	8008148 <ai_layers_init_all+0x4>
 800815a:	4608      	mov	r0, r1
 800815c:	4770      	bx	lr
 800815e:	bf00      	nop

08008160 <ai_layers_post_init_all>:
 8008160:	b538      	push	{r3, r4, r5, lr}
 8008162:	2500      	movs	r5, #0
 8008164:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8008166:	b16c      	cbz	r4, 8008184 <ai_layers_post_init_all+0x24>
 8008168:	6863      	ldr	r3, [r4, #4]
 800816a:	07db      	lsls	r3, r3, #31
 800816c:	d504      	bpl.n	8008178 <ai_layers_post_init_all+0x18>
 800816e:	6a23      	ldr	r3, [r4, #32]
 8008170:	4620      	mov	r0, r4
 8008172:	b10b      	cbz	r3, 8008178 <ai_layers_post_init_all+0x18>
 8008174:	3501      	adds	r5, #1
 8008176:	4798      	blx	r3
 8008178:	6923      	ldr	r3, [r4, #16]
 800817a:	42a3      	cmp	r3, r4
 800817c:	461c      	mov	r4, r3
 800817e:	d001      	beq.n	8008184 <ai_layers_post_init_all+0x24>
 8008180:	2b00      	cmp	r3, #0
 8008182:	d1f0      	bne.n	8008166 <ai_layers_post_init_all+0x6>
 8008184:	4628      	mov	r0, r5
 8008186:	bd38      	pop	{r3, r4, r5, pc}

08008188 <ai_layers_forward_all>:
 8008188:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800818c:	f8d0 803c 	ldr.w	r8, [r0, #60]	; 0x3c
 8008190:	4604      	mov	r4, r0
 8008192:	f1b8 0f00 	cmp.w	r8, #0
 8008196:	d02a      	beq.n	80081ee <ai_layers_forward_all+0x66>
 8008198:	6b41      	ldr	r1, [r0, #52]	; 0x34
 800819a:	6381      	str	r1, [r0, #56]	; 0x38
 800819c:	b319      	cbz	r1, 80081e6 <ai_layers_forward_all+0x5e>
 800819e:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80081a0:	2001      	movs	r0, #1
 80081a2:	47c0      	blx	r8
 80081a4:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80081a6:	b1f6      	cbz	r6, 80081e6 <ai_layers_forward_all+0x5e>
 80081a8:	2700      	movs	r7, #0
 80081aa:	4631      	mov	r1, r6
 80081ac:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80081ae:	2002      	movs	r0, #2
 80081b0:	47c0      	blx	r8
 80081b2:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 80081b4:	4628      	mov	r0, r5
 80081b6:	696b      	ldr	r3, [r5, #20]
 80081b8:	4798      	blx	r3
 80081ba:	692e      	ldr	r6, [r5, #16]
 80081bc:	2003      	movs	r0, #3
 80081be:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80081c0:	42b5      	cmp	r5, r6
 80081c2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80081c4:	d007      	beq.n	80081d6 <ai_layers_forward_all+0x4e>
 80081c6:	47c0      	blx	r8
 80081c8:	3701      	adds	r7, #1
 80081ca:	63a6      	str	r6, [r4, #56]	; 0x38
 80081cc:	2e00      	cmp	r6, #0
 80081ce:	d1ec      	bne.n	80081aa <ai_layers_forward_all+0x22>
 80081d0:	4638      	mov	r0, r7
 80081d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081d6:	2003      	movs	r0, #3
 80081d8:	3701      	adds	r7, #1
 80081da:	47c0      	blx	r8
 80081dc:	2300      	movs	r3, #0
 80081de:	4638      	mov	r0, r7
 80081e0:	63a3      	str	r3, [r4, #56]	; 0x38
 80081e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081e6:	2700      	movs	r7, #0
 80081e8:	4638      	mov	r0, r7
 80081ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081ee:	6b45      	ldr	r5, [r0, #52]	; 0x34
 80081f0:	6385      	str	r5, [r0, #56]	; 0x38
 80081f2:	2d00      	cmp	r5, #0
 80081f4:	d0f7      	beq.n	80081e6 <ai_layers_forward_all+0x5e>
 80081f6:	4647      	mov	r7, r8
 80081f8:	696b      	ldr	r3, [r5, #20]
 80081fa:	4628      	mov	r0, r5
 80081fc:	4798      	blx	r3
 80081fe:	462b      	mov	r3, r5
 8008200:	692d      	ldr	r5, [r5, #16]
 8008202:	429d      	cmp	r5, r3
 8008204:	d004      	beq.n	8008210 <ai_layers_forward_all+0x88>
 8008206:	3701      	adds	r7, #1
 8008208:	63a5      	str	r5, [r4, #56]	; 0x38
 800820a:	2d00      	cmp	r5, #0
 800820c:	d1f4      	bne.n	80081f8 <ai_layers_forward_all+0x70>
 800820e:	e7df      	b.n	80081d0 <ai_layers_forward_all+0x48>
 8008210:	2300      	movs	r3, #0
 8008212:	3701      	adds	r7, #1
 8008214:	63a3      	str	r3, [r4, #56]	; 0x38
 8008216:	e7db      	b.n	80081d0 <ai_layers_forward_all+0x48>

08008218 <ai_layers_destroy_all>:
 8008218:	b538      	push	{r3, r4, r5, lr}
 800821a:	2500      	movs	r5, #0
 800821c:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800821e:	b16c      	cbz	r4, 800823c <ai_layers_destroy_all+0x24>
 8008220:	6863      	ldr	r3, [r4, #4]
 8008222:	075b      	lsls	r3, r3, #29
 8008224:	d504      	bpl.n	8008230 <ai_layers_destroy_all+0x18>
 8008226:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008228:	4620      	mov	r0, r4
 800822a:	b10b      	cbz	r3, 8008230 <ai_layers_destroy_all+0x18>
 800822c:	3501      	adds	r5, #1
 800822e:	4798      	blx	r3
 8008230:	6923      	ldr	r3, [r4, #16]
 8008232:	42a3      	cmp	r3, r4
 8008234:	461c      	mov	r4, r3
 8008236:	d001      	beq.n	800823c <ai_layers_destroy_all+0x24>
 8008238:	2b00      	cmp	r3, #0
 800823a:	d1f0      	bne.n	800821e <ai_layers_destroy_all+0x6>
 800823c:	4628      	mov	r0, r5
 800823e:	bd38      	pop	{r3, r4, r5, pc}

08008240 <forward_dense_integer_SSSA>:
 8008240:	6982      	ldr	r2, [r0, #24]
 8008242:	8813      	ldrh	r3, [r2, #0]
 8008244:	2b00      	cmp	r3, #0
 8008246:	f000 80c8 	beq.w	80083da <forward_dense_integer_SSSA+0x19a>
 800824a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800824e:	6852      	ldr	r2, [r2, #4]
 8008250:	b093      	sub	sp, #76	; 0x4c
 8008252:	6854      	ldr	r4, [r2, #4]
 8008254:	b104      	cbz	r4, 8008258 <forward_dense_integer_SSSA+0x18>
 8008256:	6824      	ldr	r4, [r4, #0]
 8008258:	2b01      	cmp	r3, #1
 800825a:	f000 8161 	beq.w	8008520 <forward_dense_integer_SSSA+0x2e0>
 800825e:	6911      	ldr	r1, [r2, #16]
 8008260:	b101      	cbz	r1, 8008264 <forward_dense_integer_SSSA+0x24>
 8008262:	6809      	ldr	r1, [r1, #0]
 8008264:	2b02      	cmp	r3, #2
 8008266:	f000 815e 	beq.w	8008526 <forward_dense_integer_SSSA+0x2e6>
 800826a:	69d5      	ldr	r5, [r2, #28]
 800826c:	2d00      	cmp	r5, #0
 800826e:	f000 8108 	beq.w	8008482 <forward_dense_integer_SSSA+0x242>
 8008272:	8b16      	ldrh	r6, [r2, #24]
 8008274:	6828      	ldr	r0, [r5, #0]
 8008276:	2e01      	cmp	r6, #1
 8008278:	f240 812d 	bls.w	80084d6 <forward_dense_integer_SSSA+0x296>
 800827c:	686d      	ldr	r5, [r5, #4]
 800827e:	2b03      	cmp	r3, #3
 8008280:	f000 8154 	beq.w	800852c <forward_dense_integer_SSSA+0x2ec>
 8008284:	f8d2 9028 	ldr.w	r9, [r2, #40]	; 0x28
 8008288:	69ab      	ldr	r3, [r5, #24]
 800828a:	f1b9 0f00 	cmp.w	r9, #0
 800828e:	f000 810f 	beq.w	80084b0 <forward_dense_integer_SSSA+0x270>
 8008292:	689b      	ldr	r3, [r3, #8]
 8008294:	68e2      	ldr	r2, [r4, #12]
 8008296:	930b      	str	r3, [sp, #44]	; 0x2c
 8008298:	68cb      	ldr	r3, [r1, #12]
 800829a:	6856      	ldr	r6, [r2, #4]
 800829c:	f8d9 9000 	ldr.w	r9, [r9]
 80082a0:	f8d4 e018 	ldr.w	lr, [r4, #24]
 80082a4:	698d      	ldr	r5, [r1, #24]
 80082a6:	960f      	str	r6, [sp, #60]	; 0x3c
 80082a8:	e9d3 a201 	ldrd	sl, r2, [r3, #4]
 80082ac:	68db      	ldr	r3, [r3, #12]
 80082ae:	fb03 f302 	mul.w	r3, r3, r2
 80082b2:	b2b2      	uxth	r2, r6
 80082b4:	930c      	str	r3, [sp, #48]	; 0x30
 80082b6:	fa1f f38a 	uxth.w	r3, sl
 80082ba:	f1b9 0f00 	cmp.w	r9, #0
 80082be:	d003      	beq.n	80082c8 <forward_dense_integer_SSSA+0x88>
 80082c0:	f8d9 6018 	ldr.w	r6, [r9, #24]
 80082c4:	f8d6 9008 	ldr.w	r9, [r6, #8]
 80082c8:	6827      	ldr	r7, [r4, #0]
 80082ca:	f8d0 b000 	ldr.w	fp, [r0]
 80082ce:	680c      	ldr	r4, [r1, #0]
 80082d0:	6981      	ldr	r1, [r0, #24]
 80082d2:	2f00      	cmp	r7, #0
 80082d4:	f000 8083 	beq.w	80083de <forward_dense_integer_SSSA+0x19e>
 80082d8:	f8d7 c004 	ldr.w	ip, [r7, #4]
 80082dc:	f1bc 0f00 	cmp.w	ip, #0
 80082e0:	f000 80b1 	beq.w	8008446 <forward_dense_integer_SSSA+0x206>
 80082e4:	8878      	ldrh	r0, [r7, #2]
 80082e6:	2800      	cmp	r0, #0
 80082e8:	f000 809c 	beq.w	8008424 <forward_dense_integer_SSSA+0x1e4>
 80082ec:	f8dc 6000 	ldr.w	r6, [ip]
 80082f0:	edd6 7a00 	vldr	s15, [r6]
 80082f4:	2c00      	cmp	r4, #0
 80082f6:	f000 809a 	beq.w	800842e <forward_dense_integer_SSSA+0x1ee>
 80082fa:	f8d4 8004 	ldr.w	r8, [r4, #4]
 80082fe:	f1b8 0f00 	cmp.w	r8, #0
 8008302:	f000 80a9 	beq.w	8008458 <forward_dense_integer_SSSA+0x218>
 8008306:	8860      	ldrh	r0, [r4, #2]
 8008308:	2800      	cmp	r0, #0
 800830a:	d074      	beq.n	80083f6 <forward_dense_integer_SSSA+0x1b6>
 800830c:	68ae      	ldr	r6, [r5, #8]
 800830e:	f8de 5008 	ldr.w	r5, [lr, #8]
 8008312:	6889      	ldr	r1, [r1, #8]
 8008314:	950d      	str	r5, [sp, #52]	; 0x34
 8008316:	f8d8 5000 	ldr.w	r5, [r8]
 800831a:	ed95 0a00 	vldr	s0, [r5]
 800831e:	f1bc 0f00 	cmp.w	ip, #0
 8008322:	d076      	beq.n	8008412 <forward_dense_integer_SSSA+0x1d2>
 8008324:	8878      	ldrh	r0, [r7, #2]
 8008326:	2800      	cmp	r0, #0
 8008328:	f000 80a3 	beq.w	8008472 <forward_dense_integer_SSSA+0x232>
 800832c:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8008330:	f990 7000 	ldrsb.w	r7, [r0]
 8008334:	2c00      	cmp	r4, #0
 8008336:	f000 80eb 	beq.w	8008510 <forward_dense_integer_SSSA+0x2d0>
 800833a:	f1b8 0f00 	cmp.w	r8, #0
 800833e:	f000 809d 	beq.w	800847c <forward_dense_integer_SSSA+0x23c>
 8008342:	8860      	ldrh	r0, [r4, #2]
 8008344:	2800      	cmp	r0, #0
 8008346:	d167      	bne.n	8008418 <forward_dense_integer_SSSA+0x1d8>
 8008348:	900a      	str	r0, [sp, #40]	; 0x28
 800834a:	910e      	str	r1, [sp, #56]	; 0x38
 800834c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008350:	f1bb 0f00 	cmp.w	fp, #0
 8008354:	f000 80de 	beq.w	8008514 <forward_dense_integer_SSSA+0x2d4>
 8008358:	f8db 0004 	ldr.w	r0, [fp, #4]
 800835c:	2800      	cmp	r0, #0
 800835e:	f000 80d9 	beq.w	8008514 <forward_dense_integer_SSSA+0x2d4>
 8008362:	6800      	ldr	r0, [r0, #0]
 8008364:	2400      	movs	r4, #0
 8008366:	f10d 0842 	add.w	r8, sp, #66	; 0x42
 800836a:	f8ad 4042 	strh.w	r4, [sp, #66]	; 0x42
 800836e:	9411      	str	r4, [sp, #68]	; 0x44
 8008370:	ed90 7a00 	vldr	s14, [r0]
 8008374:	4640      	mov	r0, r8
 8008376:	ee67 7a87 	vmul.f32	s15, s15, s14
 800837a:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800837e:	f000 f8db 	bl	8008538 <align_factor>
 8008382:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008384:	9011      	str	r0, [sp, #68]	; 0x44
 8008386:	b32b      	cbz	r3, 80083d4 <forward_dense_integer_SSSA+0x194>
 8008388:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800838c:	4699      	mov	r9, r3
 800838e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008390:	fa1f fa8a 	uxth.w	sl, sl
 8008394:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8008396:	f8bd b03c 	ldrh.w	fp, [sp, #60]	; 0x3c
 800839a:	970d      	str	r7, [sp, #52]	; 0x34
 800839c:	461f      	mov	r7, r3
 800839e:	9a08      	ldr	r2, [sp, #32]
 80083a0:	990e      	ldr	r1, [sp, #56]	; 0x38
 80083a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80083a4:	3401      	adds	r4, #1
 80083a6:	4628      	mov	r0, r5
 80083a8:	9605      	str	r6, [sp, #20]
 80083aa:	9306      	str	r3, [sp, #24]
 80083ac:	4456      	add	r6, sl
 80083ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80083b0:	445d      	add	r5, fp
 80083b2:	9304      	str	r3, [sp, #16]
 80083b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083b6:	9303      	str	r3, [sp, #12]
 80083b8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80083ba:	e9cd 8301 	strd	r8, r3, [sp, #4]
 80083be:	ab11      	add	r3, sp, #68	; 0x44
 80083c0:	9300      	str	r3, [sp, #0]
 80083c2:	463b      	mov	r3, r7
 80083c4:	e9cd 1208 	strd	r1, r2, [sp, #32]
 80083c8:	f000 f908 	bl	80085dc <st_sssa8_fully_connected>
 80083cc:	454c      	cmp	r4, r9
 80083ce:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 80083d2:	d1e6      	bne.n	80083a2 <forward_dense_integer_SSSA+0x162>
 80083d4:	b013      	add	sp, #76	; 0x4c
 80083d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083da:	685b      	ldr	r3, [r3, #4]
 80083dc:	deff      	udf	#255	; 0xff
 80083de:	2c00      	cmp	r4, #0
 80083e0:	d056      	beq.n	8008490 <forward_dense_integer_SSSA+0x250>
 80083e2:	f8d4 8004 	ldr.w	r8, [r4, #4]
 80083e6:	f1b8 0f00 	cmp.w	r8, #0
 80083ea:	d05d      	beq.n	80084a8 <forward_dense_integer_SSSA+0x268>
 80083ec:	8860      	ldrh	r0, [r4, #2]
 80083ee:	2800      	cmp	r0, #0
 80083f0:	d173      	bne.n	80084da <forward_dense_integer_SSSA+0x29a>
 80083f2:	eddf 7a50 	vldr	s15, [pc, #320]	; 8008534 <forward_dense_integer_SSSA+0x2f4>
 80083f6:	68ae      	ldr	r6, [r5, #8]
 80083f8:	f8de 5008 	ldr.w	r5, [lr, #8]
 80083fc:	6889      	ldr	r1, [r1, #8]
 80083fe:	950d      	str	r5, [sp, #52]	; 0x34
 8008400:	2f00      	cmp	r7, #0
 8008402:	d041      	beq.n	8008488 <forward_dense_integer_SSSA+0x248>
 8008404:	f8d7 c004 	ldr.w	ip, [r7, #4]
 8008408:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 8008534 <forward_dense_integer_SSSA+0x2f4>
 800840c:	f1bc 0f00 	cmp.w	ip, #0
 8008410:	d188      	bne.n	8008324 <forward_dense_integer_SSSA+0xe4>
 8008412:	4667      	mov	r7, ip
 8008414:	2800      	cmp	r0, #0
 8008416:	d097      	beq.n	8008348 <forward_dense_integer_SSSA+0x108>
 8008418:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800841c:	f990 0000 	ldrsb.w	r0, [r0]
 8008420:	900a      	str	r0, [sp, #40]	; 0x28
 8008422:	e792      	b.n	800834a <forward_dense_integer_SSSA+0x10a>
 8008424:	eddf 7a43 	vldr	s15, [pc, #268]	; 8008534 <forward_dense_integer_SSSA+0x2f4>
 8008428:	2c00      	cmp	r4, #0
 800842a:	f47f af66 	bne.w	80082fa <forward_dense_integer_SSSA+0xba>
 800842e:	68ae      	ldr	r6, [r5, #8]
 8008430:	f8de 5008 	ldr.w	r5, [lr, #8]
 8008434:	6889      	ldr	r1, [r1, #8]
 8008436:	950d      	str	r5, [sp, #52]	; 0x34
 8008438:	2800      	cmp	r0, #0
 800843a:	d15a      	bne.n	80084f2 <forward_dense_integer_SSSA+0x2b2>
 800843c:	4607      	mov	r7, r0
 800843e:	ed9f 0a3d 	vldr	s0, [pc, #244]	; 8008534 <forward_dense_integer_SSSA+0x2f4>
 8008442:	900a      	str	r0, [sp, #40]	; 0x28
 8008444:	e781      	b.n	800834a <forward_dense_integer_SSSA+0x10a>
 8008446:	b31c      	cbz	r4, 8008490 <forward_dense_integer_SSSA+0x250>
 8008448:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800844c:	eddf 7a39 	vldr	s15, [pc, #228]	; 8008534 <forward_dense_integer_SSSA+0x2f4>
 8008450:	f1b8 0f00 	cmp.w	r8, #0
 8008454:	f47f af57 	bne.w	8008306 <forward_dense_integer_SSSA+0xc6>
 8008458:	f8de 0008 	ldr.w	r0, [lr, #8]
 800845c:	68ae      	ldr	r6, [r5, #8]
 800845e:	6889      	ldr	r1, [r1, #8]
 8008460:	900d      	str	r0, [sp, #52]	; 0x34
 8008462:	f1bc 0f00 	cmp.w	ip, #0
 8008466:	d00e      	beq.n	8008486 <forward_dense_integer_SSSA+0x246>
 8008468:	8878      	ldrh	r0, [r7, #2]
 800846a:	2800      	cmp	r0, #0
 800846c:	d149      	bne.n	8008502 <forward_dense_integer_SSSA+0x2c2>
 800846e:	ed9f 0a31 	vldr	s0, [pc, #196]	; 8008534 <forward_dense_integer_SSSA+0x2f4>
 8008472:	2700      	movs	r7, #0
 8008474:	f1b8 0f00 	cmp.w	r8, #0
 8008478:	f47f af63 	bne.w	8008342 <forward_dense_integer_SSSA+0x102>
 800847c:	2000      	movs	r0, #0
 800847e:	900a      	str	r0, [sp, #40]	; 0x28
 8008480:	e763      	b.n	800834a <forward_dense_integer_SSSA+0x10a>
 8008482:	4628      	mov	r0, r5
 8008484:	e6fb      	b.n	800827e <forward_dense_integer_SSSA+0x3e>
 8008486:	4667      	mov	r7, ip
 8008488:	ed9f 0a2a 	vldr	s0, [pc, #168]	; 8008534 <forward_dense_integer_SSSA+0x2f4>
 800848c:	970a      	str	r7, [sp, #40]	; 0x28
 800848e:	e75c      	b.n	800834a <forward_dense_integer_SSSA+0x10a>
 8008490:	eddf 7a28 	vldr	s15, [pc, #160]	; 8008534 <forward_dense_integer_SSSA+0x2f4>
 8008494:	4627      	mov	r7, r4
 8008496:	f8de 0008 	ldr.w	r0, [lr, #8]
 800849a:	eeb0 0a67 	vmov.f32	s0, s15
 800849e:	68ae      	ldr	r6, [r5, #8]
 80084a0:	6889      	ldr	r1, [r1, #8]
 80084a2:	900d      	str	r0, [sp, #52]	; 0x34
 80084a4:	970a      	str	r7, [sp, #40]	; 0x28
 80084a6:	e750      	b.n	800834a <forward_dense_integer_SSSA+0x10a>
 80084a8:	eddf 7a22 	vldr	s15, [pc, #136]	; 8008534 <forward_dense_integer_SSSA+0x2f4>
 80084ac:	4647      	mov	r7, r8
 80084ae:	e7f2      	b.n	8008496 <forward_dense_integer_SSSA+0x256>
 80084b0:	689b      	ldr	r3, [r3, #8]
 80084b2:	68e2      	ldr	r2, [r4, #12]
 80084b4:	930b      	str	r3, [sp, #44]	; 0x2c
 80084b6:	68cb      	ldr	r3, [r1, #12]
 80084b8:	6856      	ldr	r6, [r2, #4]
 80084ba:	f8d4 e018 	ldr.w	lr, [r4, #24]
 80084be:	698d      	ldr	r5, [r1, #24]
 80084c0:	960f      	str	r6, [sp, #60]	; 0x3c
 80084c2:	e9d3 a201 	ldrd	sl, r2, [r3, #4]
 80084c6:	68db      	ldr	r3, [r3, #12]
 80084c8:	fb03 f302 	mul.w	r3, r3, r2
 80084cc:	b2b2      	uxth	r2, r6
 80084ce:	930c      	str	r3, [sp, #48]	; 0x30
 80084d0:	fa1f f38a 	uxth.w	r3, sl
 80084d4:	e6f8      	b.n	80082c8 <forward_dense_integer_SSSA+0x88>
 80084d6:	2500      	movs	r5, #0
 80084d8:	e6d1      	b.n	800827e <forward_dense_integer_SSSA+0x3e>
 80084da:	f8de 0008 	ldr.w	r0, [lr, #8]
 80084de:	68ae      	ldr	r6, [r5, #8]
 80084e0:	900d      	str	r0, [sp, #52]	; 0x34
 80084e2:	f8d8 0000 	ldr.w	r0, [r8]
 80084e6:	6889      	ldr	r1, [r1, #8]
 80084e8:	eddf 7a12 	vldr	s15, [pc, #72]	; 8008534 <forward_dense_integer_SSSA+0x2f4>
 80084ec:	ed90 0a00 	vldr	s0, [r0]
 80084f0:	e792      	b.n	8008418 <forward_dense_integer_SSSA+0x1d8>
 80084f2:	f8dc 0004 	ldr.w	r0, [ip, #4]
 80084f6:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 8008534 <forward_dense_integer_SSSA+0x2f4>
 80084fa:	f990 7000 	ldrsb.w	r7, [r0]
 80084fe:	940a      	str	r4, [sp, #40]	; 0x28
 8008500:	e723      	b.n	800834a <forward_dense_integer_SSSA+0x10a>
 8008502:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8008506:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 8008534 <forward_dense_integer_SSSA+0x2f4>
 800850a:	f990 7000 	ldrsb.w	r7, [r0]
 800850e:	e7b5      	b.n	800847c <forward_dense_integer_SSSA+0x23c>
 8008510:	940a      	str	r4, [sp, #40]	; 0x28
 8008512:	e71a      	b.n	800834a <forward_dense_integer_SSSA+0x10a>
 8008514:	2300      	movs	r3, #0
 8008516:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 800851a:	9311      	str	r3, [sp, #68]	; 0x44
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	deff      	udf	#255	; 0xff
 8008520:	2300      	movs	r3, #0
 8008522:	685b      	ldr	r3, [r3, #4]
 8008524:	deff      	udf	#255	; 0xff
 8008526:	2300      	movs	r3, #0
 8008528:	685b      	ldr	r3, [r3, #4]
 800852a:	deff      	udf	#255	; 0xff
 800852c:	2300      	movs	r3, #0
 800852e:	685b      	ldr	r3, [r3, #4]
 8008530:	deff      	udf	#255	; 0xff
 8008532:	bf00      	nop
 8008534:	00000000 	.word	0x00000000

08008538 <align_factor>:
 8008538:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800853c:	4602      	mov	r2, r0
 800853e:	b508      	push	{r3, lr}
 8008540:	eeb4 0a67 	vcmp.f32	s0, s15
 8008544:	2300      	movs	r3, #0
 8008546:	8003      	strh	r3, [r0, #0]
 8008548:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800854c:	d524      	bpl.n	8008598 <align_factor+0x60>
 800854e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8008552:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008556:	dd1f      	ble.n	8008598 <align_factor+0x60>
 8008558:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800855c:	2301      	movs	r3, #1
 800855e:	e005      	b.n	800856c <align_factor+0x34>
 8008560:	8013      	strh	r3, [r2, #0]
 8008562:	b28b      	uxth	r3, r1
 8008564:	ee30 0a00 	vadd.f32	s0, s0, s0
 8008568:	2b21      	cmp	r3, #33	; 0x21
 800856a:	d02b      	beq.n	80085c4 <align_factor+0x8c>
 800856c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8008570:	1c59      	adds	r1, r3, #1
 8008572:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008576:	d4f3      	bmi.n	8008560 <align_factor+0x28>
 8008578:	eddf 7a17 	vldr	s15, [pc, #92]	; 80085d8 <align_factor+0xa0>
 800857c:	ee60 7a27 	vmul.f32	s15, s0, s15
 8008580:	ee17 0a90 	vmov	r0, s15
 8008584:	f7f8 fb48 	bl	8000c18 <__aeabi_f2lz>
 8008588:	ebb1 7fe0 	cmp.w	r1, r0, asr #31
 800858c:	d003      	beq.n	8008596 <align_factor+0x5e>
 800858e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8008592:	ea80 70e1 	eor.w	r0, r0, r1, asr #31
 8008596:	bd08      	pop	{r3, pc}
 8008598:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800859c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80085a0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80085a4:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 80085a8:	e005      	b.n	80085b6 <align_factor+0x7e>
 80085aa:	8013      	strh	r3, [r2, #0]
 80085ac:	b28b      	uxth	r3, r1
 80085ae:	ee20 0a07 	vmul.f32	s0, s0, s14
 80085b2:	4283      	cmp	r3, r0
 80085b4:	d00a      	beq.n	80085cc <align_factor+0x94>
 80085b6:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80085ba:	1e59      	subs	r1, r3, #1
 80085bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80085c0:	dcf3      	bgt.n	80085aa <align_factor+0x72>
 80085c2:	e7d9      	b.n	8008578 <align_factor+0x40>
 80085c4:	2300      	movs	r3, #0
 80085c6:	4618      	mov	r0, r3
 80085c8:	8013      	strh	r3, [r2, #0]
 80085ca:	bd08      	pop	{r3, pc}
 80085cc:	f64f 73e2 	movw	r3, #65506	; 0xffe2
 80085d0:	ee30 0a00 	vadd.f32	s0, s0, s0
 80085d4:	8013      	strh	r3, [r2, #0]
 80085d6:	e7cf      	b.n	8008578 <align_factor+0x40>
 80085d8:	4f000000 	.word	0x4f000000

080085dc <st_sssa8_fully_connected>:
 80085dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085e0:	b097      	sub	sp, #92	; 0x5c
 80085e2:	460d      	mov	r5, r1
 80085e4:	4683      	mov	fp, r0
 80085e6:	9c20      	ldr	r4, [sp, #128]	; 0x80
 80085e8:	9313      	str	r3, [sp, #76]	; 0x4c
 80085ea:	6823      	ldr	r3, [r4, #0]
 80085ec:	9203      	str	r2, [sp, #12]
 80085ee:	9307      	str	r3, [sp, #28]
 80085f0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80085f2:	f99d 6088 	ldrsb.w	r6, [sp, #136]	; 0x88
 80085f6:	f9b3 1000 	ldrsh.w	r1, [r3]
 80085fa:	f99d 308c 	ldrsb.w	r3, [sp, #140]	; 0x8c
 80085fe:	1e4a      	subs	r2, r1, #1
 8008600:	9104      	str	r1, [sp, #16]
 8008602:	920d      	str	r2, [sp, #52]	; 0x34
 8008604:	b292      	uxth	r2, r2
 8008606:	2a14      	cmp	r2, #20
 8008608:	f200 81b3 	bhi.w	8008972 <st_sssa8_fully_connected+0x396>
 800860c:	2201      	movs	r2, #1
 800860e:	408b      	lsls	r3, r1
 8008610:	408a      	lsls	r2, r1
 8008612:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8008616:	9308      	str	r3, [sp, #32]
 8008618:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800861a:	2b00      	cmp	r3, #0
 800861c:	f000 81ae 	beq.w	800897c <st_sssa8_fully_connected+0x3a0>
 8008620:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008622:	b2b3      	uxth	r3, r6
 8008624:	9600      	str	r6, [sp, #0]
 8008626:	4658      	mov	r0, fp
 8008628:	0851      	lsrs	r1, r2, #1
 800862a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800862e:	9e03      	ldr	r6, [sp, #12]
 8008630:	460c      	mov	r4, r1
 8008632:	9115      	str	r1, [sp, #84]	; 0x54
 8008634:	4632      	mov	r2, r6
 8008636:	9926      	ldr	r1, [sp, #152]	; 0x98
 8008638:	f000 fb52 	bl	8008ce0 <st_int8_reordered_no_shift_zero>
 800863c:	4621      	mov	r1, r4
 800863e:	2c00      	cmp	r4, #0
 8008640:	f000 8145 	beq.w	80088ce <st_sssa8_fully_connected+0x2f2>
 8008644:	4634      	mov	r4, r6
 8008646:	f1a6 0310 	sub.w	r3, r6, #16
 800864a:	9e04      	ldr	r6, [sp, #16]
 800864c:	1e4a      	subs	r2, r1, #1
 800864e:	2001      	movs	r0, #1
 8008650:	091b      	lsrs	r3, r3, #4
 8008652:	1eb1      	subs	r1, r6, #2
 8008654:	b292      	uxth	r2, r2
 8008656:	3301      	adds	r3, #1
 8008658:	fa00 f101 	lsl.w	r1, r0, r1
 800865c:	9112      	str	r1, [sp, #72]	; 0x48
 800865e:	9924      	ldr	r1, [sp, #144]	; 0x90
 8008660:	3110      	adds	r1, #16
 8008662:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8008666:	920e      	str	r2, [sp, #56]	; 0x38
 8008668:	1ee2      	subs	r2, r4, #3
 800866a:	920f      	str	r2, [sp, #60]	; 0x3c
 800866c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800866e:	3208      	adds	r2, #8
 8008670:	9205      	str	r2, [sp, #20]
 8008672:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8008674:	3202      	adds	r2, #2
 8008676:	9206      	str	r2, [sp, #24]
 8008678:	011a      	lsls	r2, r3, #4
 800867a:	9209      	str	r2, [sp, #36]	; 0x24
 800867c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800867e:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 8008682:	9310      	str	r3, [sp, #64]	; 0x40
 8008684:	1f23      	subs	r3, r4, #4
 8008686:	9311      	str	r3, [sp, #68]	; 0x44
 8008688:	1b83      	subs	r3, r0, r6
 800868a:	9314      	str	r3, [sp, #80]	; 0x50
 800868c:	9a03      	ldr	r2, [sp, #12]
 800868e:	9b05      	ldr	r3, [sp, #20]
 8008690:	2a0f      	cmp	r2, #15
 8008692:	eb05 0b02 	add.w	fp, r5, r2
 8008696:	e953 1302 	ldrd	r1, r3, [r3, #-8]
 800869a:	f340 8260 	ble.w	8008b5e <st_sssa8_fully_connected+0x582>
 800869e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80086a0:	465c      	mov	r4, fp
 80086a2:	18ae      	adds	r6, r5, r2
 80086a4:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80086a6:	682f      	ldr	r7, [r5, #0]
 80086a8:	f8d4 a000 	ldr.w	sl, [r4]
 80086ac:	ea4f 2037 	mov.w	r0, r7, ror #8
 80086b0:	f8d2 9000 	ldr.w	r9, [r2]
 80086b4:	ea4f 2e3a 	mov.w	lr, sl, ror #8
 80086b8:	fa2f f080 	sxtb16	r0, r0
 80086bc:	fa2f fc8e 	sxtb16	ip, lr
 80086c0:	fa2f f787 	sxtb16	r7, r7
 80086c4:	fa2f fe8a 	sxtb16	lr, sl
 80086c8:	fb29 1107 	smlad	r1, r9, r7, r1
 80086cc:	fb29 390e 	smlad	r9, r9, lr, r3
 80086d0:	f8d2 8004 	ldr.w	r8, [r2, #4]
 80086d4:	fb28 1100 	smlad	r1, r8, r0, r1
 80086d8:	fb28 9e0c 	smlad	lr, r8, ip, r9
 80086dc:	6868      	ldr	r0, [r5, #4]
 80086de:	f8d4 9004 	ldr.w	r9, [r4, #4]
 80086e2:	ea4f 2330 	mov.w	r3, r0, ror #8
 80086e6:	f8d2 8008 	ldr.w	r8, [r2, #8]
 80086ea:	ea4f 2a39 	mov.w	sl, r9, ror #8
 80086ee:	fa2f f383 	sxtb16	r3, r3
 80086f2:	fa2f f78a 	sxtb16	r7, sl
 80086f6:	fa2f f080 	sxtb16	r0, r0
 80086fa:	fa2f fa89 	sxtb16	sl, r9
 80086fe:	fb28 1000 	smlad	r0, r8, r0, r1
 8008702:	fb28 e80a 	smlad	r8, r8, sl, lr
 8008706:	f8d2 c00c 	ldr.w	ip, [r2, #12]
 800870a:	fb2c 0003 	smlad	r0, ip, r3, r0
 800870e:	fb2c 8a07 	smlad	sl, ip, r7, r8
 8008712:	68ab      	ldr	r3, [r5, #8]
 8008714:	f8d4 8008 	ldr.w	r8, [r4, #8]
 8008718:	ea4f 2133 	mov.w	r1, r3, ror #8
 800871c:	f8d2 c010 	ldr.w	ip, [r2, #16]
 8008720:	ea4f 2e38 	mov.w	lr, r8, ror #8
 8008724:	fa2f f181 	sxtb16	r1, r1
 8008728:	fa2f f98e 	sxtb16	r9, lr
 800872c:	fa2f f383 	sxtb16	r3, r3
 8008730:	fa2f fe88 	sxtb16	lr, r8
 8008734:	fb2c 0303 	smlad	r3, ip, r3, r0
 8008738:	fb2c ac0e 	smlad	ip, ip, lr, sl
 800873c:	6957      	ldr	r7, [r2, #20]
 800873e:	fb27 3301 	smlad	r3, r7, r1, r3
 8008742:	fb27 ce09 	smlad	lr, r7, r9, ip
 8008746:	68e8      	ldr	r0, [r5, #12]
 8008748:	3410      	adds	r4, #16
 800874a:	f854 cc04 	ldr.w	ip, [r4, #-4]
 800874e:	3510      	adds	r5, #16
 8008750:	ea4f 2130 	mov.w	r1, r0, ror #8
 8008754:	6997      	ldr	r7, [r2, #24]
 8008756:	fa2f f881 	sxtb16	r8, r1
 800875a:	fa2f f180 	sxtb16	r1, r0
 800875e:	ea4f 203c 	mov.w	r0, ip, ror #8
 8008762:	fa2f fc8c 	sxtb16	ip, ip
 8008766:	fa2f f080 	sxtb16	r0, r0
 800876a:	fb27 3101 	smlad	r1, r7, r1, r3
 800876e:	fb27 e70c 	smlad	r7, r7, ip, lr
 8008772:	69d3      	ldr	r3, [r2, #28]
 8008774:	3220      	adds	r2, #32
 8008776:	fb23 1108 	smlad	r1, r3, r8, r1
 800877a:	fb23 7300 	smlad	r3, r3, r0, r7
 800877e:	42b5      	cmp	r5, r6
 8008780:	d191      	bne.n	80086a6 <st_sssa8_fully_connected+0xca>
 8008782:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008784:	f8dd a040 	ldr.w	sl, [sp, #64]	; 0x40
 8008788:	4493      	add	fp, r2
 800878a:	4691      	mov	r9, r2
 800878c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800878e:	4591      	cmp	r9, r2
 8008790:	f280 81e3 	bge.w	8008b5a <st_sssa8_fully_connected+0x57e>
 8008794:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008796:	4657      	mov	r7, sl
 8008798:	46d8      	mov	r8, fp
 800879a:	eba2 0209 	sub.w	r2, r2, r9
 800879e:	0892      	lsrs	r2, r2, #2
 80087a0:	920c      	str	r2, [sp, #48]	; 0x30
 80087a2:	3201      	adds	r2, #1
 80087a4:	0090      	lsls	r0, r2, #2
 80087a6:	920b      	str	r2, [sp, #44]	; 0x2c
 80087a8:	eb06 0482 	add.w	r4, r6, r2, lsl #2
 80087ac:	900a      	str	r0, [sp, #40]	; 0x28
 80087ae:	f856 eb04 	ldr.w	lr, [r6], #4
 80087b2:	f858 0b04 	ldr.w	r0, [r8], #4
 80087b6:	ea4f 2c3e 	mov.w	ip, lr, ror #8
 80087ba:	683a      	ldr	r2, [r7, #0]
 80087bc:	ea4f 2530 	mov.w	r5, r0, ror #8
 80087c0:	fa2f fc8c 	sxtb16	ip, ip
 80087c4:	fa2f fe8e 	sxtb16	lr, lr
 80087c8:	fa2f f585 	sxtb16	r5, r5
 80087cc:	fa2f f080 	sxtb16	r0, r0
 80087d0:	fb22 110e 	smlad	r1, r2, lr, r1
 80087d4:	fb22 3300 	smlad	r3, r2, r0, r3
 80087d8:	687a      	ldr	r2, [r7, #4]
 80087da:	3708      	adds	r7, #8
 80087dc:	fb22 110c 	smlad	r1, r2, ip, r1
 80087e0:	fb22 3305 	smlad	r3, r2, r5, r3
 80087e4:	42a6      	cmp	r6, r4
 80087e6:	d1e2      	bne.n	80087ae <st_sssa8_fully_connected+0x1d2>
 80087e8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80087ea:	f109 0904 	add.w	r9, r9, #4
 80087ee:	eb0a 0ac2 	add.w	sl, sl, r2, lsl #3
 80087f2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80087f4:	4493      	add	fp, r2
 80087f6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80087f8:	eb09 0982 	add.w	r9, r9, r2, lsl #2
 80087fc:	9d03      	ldr	r5, [sp, #12]
 80087fe:	454d      	cmp	r5, r9
 8008800:	dd37      	ble.n	8008872 <st_sssa8_fully_connected+0x296>
 8008802:	f9ba 2000 	ldrsh.w	r2, [sl]
 8008806:	f994 0000 	ldrsb.w	r0, [r4]
 800880a:	fb12 1100 	smlabb	r1, r2, r0, r1
 800880e:	f99b 0000 	ldrsb.w	r0, [fp]
 8008812:	fb12 3300 	smlabb	r3, r2, r0, r3
 8008816:	f109 0201 	add.w	r2, r9, #1
 800881a:	42aa      	cmp	r2, r5
 800881c:	da25      	bge.n	800886a <st_sssa8_fully_connected+0x28e>
 800881e:	f9ba 2002 	ldrsh.w	r2, [sl, #2]
 8008822:	f994 0001 	ldrsb.w	r0, [r4, #1]
 8008826:	fb12 1100 	smlabb	r1, r2, r0, r1
 800882a:	f99b 0001 	ldrsb.w	r0, [fp, #1]
 800882e:	fb12 3300 	smlabb	r3, r2, r0, r3
 8008832:	f109 0202 	add.w	r2, r9, #2
 8008836:	42aa      	cmp	r2, r5
 8008838:	da17      	bge.n	800886a <st_sssa8_fully_connected+0x28e>
 800883a:	f9ba 2004 	ldrsh.w	r2, [sl, #4]
 800883e:	f994 0002 	ldrsb.w	r0, [r4, #2]
 8008842:	fb12 1100 	smlabb	r1, r2, r0, r1
 8008846:	f99b 0002 	ldrsb.w	r0, [fp, #2]
 800884a:	fb12 3300 	smlabb	r3, r2, r0, r3
 800884e:	f109 0203 	add.w	r2, r9, #3
 8008852:	4295      	cmp	r5, r2
 8008854:	dd09      	ble.n	800886a <st_sssa8_fully_connected+0x28e>
 8008856:	f9ba 2006 	ldrsh.w	r2, [sl, #6]
 800885a:	f99b 0003 	ldrsb.w	r0, [fp, #3]
 800885e:	fb12 3300 	smlabb	r3, r2, r0, r3
 8008862:	f994 0003 	ldrsb.w	r0, [r4, #3]
 8008866:	fb12 1100 	smlabb	r1, r2, r0, r1
 800886a:	9a03      	ldr	r2, [sp, #12]
 800886c:	eba2 0909 	sub.w	r9, r2, r9
 8008870:	444c      	add	r4, r9
 8008872:	9a04      	ldr	r2, [sp, #16]
 8008874:	2a15      	cmp	r2, #21
 8008876:	f340 8140 	ble.w	8008afa <st_sssa8_fully_connected+0x51e>
 800887a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800887c:	9a07      	ldr	r2, [sp, #28]
 800887e:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008880:	fb51 0102 	smmla	r1, r1, r2, r0
 8008884:	fb53 0302 	smmla	r3, r3, r2, r0
 8008888:	4129      	asrs	r1, r5
 800888a:	9a08      	ldr	r2, [sp, #32]
 800888c:	4411      	add	r1, r2
 800888e:	f301 0107 	ssat	r1, #8, r1
 8008892:	9806      	ldr	r0, [sp, #24]
 8008894:	412b      	asrs	r3, r5
 8008896:	f800 1c02 	strb.w	r1, [r0, #-2]
 800889a:	4413      	add	r3, r2
 800889c:	f303 0307 	ssat	r3, #8, r3
 80088a0:	f800 3c01 	strb.w	r3, [r0, #-1]
 80088a4:	9a03      	ldr	r2, [sp, #12]
 80088a6:	9b05      	ldr	r3, [sp, #20]
 80088a8:	18a5      	adds	r5, r4, r2
 80088aa:	9a06      	ldr	r2, [sp, #24]
 80088ac:	3308      	adds	r3, #8
 80088ae:	3202      	adds	r2, #2
 80088b0:	9305      	str	r3, [sp, #20]
 80088b2:	9206      	str	r2, [sp, #24]
 80088b4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80088b6:	4293      	cmp	r3, r2
 80088b8:	f47f aee8 	bne.w	800868c <st_sssa8_fully_connected+0xb0>
 80088bc:	9a25      	ldr	r2, [sp, #148]	; 0x94
 80088be:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80088c0:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 80088c4:	9225      	str	r2, [sp, #148]	; 0x94
 80088c6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80088c8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80088cc:	9324      	str	r3, [sp, #144]	; 0x90
 80088ce:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80088d0:	07db      	lsls	r3, r3, #31
 80088d2:	d54a      	bpl.n	800896a <st_sssa8_fully_connected+0x38e>
 80088d4:	9a03      	ldr	r2, [sp, #12]
 80088d6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80088d8:	0897      	lsrs	r7, r2, #2
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	f000 8175 	beq.w	8008bca <st_sssa8_fully_connected+0x5ee>
 80088e0:	eb05 0687 	add.w	r6, r5, r7, lsl #2
 80088e4:	9826      	ldr	r0, [sp, #152]	; 0x98
 80088e6:	f855 2b04 	ldr.w	r2, [r5], #4
 80088ea:	6801      	ldr	r1, [r0, #0]
 80088ec:	fa2f f482 	sxtb16	r4, r2
 80088f0:	ea4f 2232 	mov.w	r2, r2, ror #8
 80088f4:	fa2f f282 	sxtb16	r2, r2
 80088f8:	fb21 3304 	smlad	r3, r1, r4, r3
 80088fc:	6841      	ldr	r1, [r0, #4]
 80088fe:	3008      	adds	r0, #8
 8008900:	fb21 3302 	smlad	r3, r1, r2, r3
 8008904:	42b5      	cmp	r5, r6
 8008906:	d1ee      	bne.n	80088e6 <st_sssa8_fully_connected+0x30a>
 8008908:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800890a:	eb02 02c7 	add.w	r2, r2, r7, lsl #3
 800890e:	9226      	str	r2, [sp, #152]	; 0x98
 8008910:	9a03      	ldr	r2, [sp, #12]
 8008912:	f012 0203 	ands.w	r2, r2, #3
 8008916:	d016      	beq.n	8008946 <st_sssa8_fully_connected+0x36a>
 8008918:	3a01      	subs	r2, #1
 800891a:	9826      	ldr	r0, [sp, #152]	; 0x98
 800891c:	f996 1000 	ldrsb.w	r1, [r6]
 8008920:	8800      	ldrh	r0, [r0, #0]
 8008922:	b292      	uxth	r2, r2
 8008924:	fb10 3301 	smlabb	r3, r0, r1, r3
 8008928:	b16a      	cbz	r2, 8008946 <st_sssa8_fully_connected+0x36a>
 800892a:	9826      	ldr	r0, [sp, #152]	; 0x98
 800892c:	2a01      	cmp	r2, #1
 800892e:	f996 1001 	ldrsb.w	r1, [r6, #1]
 8008932:	8840      	ldrh	r0, [r0, #2]
 8008934:	fb10 3301 	smlabb	r3, r0, r1, r3
 8008938:	d005      	beq.n	8008946 <st_sssa8_fully_connected+0x36a>
 800893a:	9926      	ldr	r1, [sp, #152]	; 0x98
 800893c:	f996 2002 	ldrsb.w	r2, [r6, #2]
 8008940:	8889      	ldrh	r1, [r1, #4]
 8008942:	fb11 3302 	smlabb	r3, r1, r2, r3
 8008946:	9a04      	ldr	r2, [sp, #16]
 8008948:	2a15      	cmp	r2, #21
 800894a:	f340 811c 	ble.w	8008b86 <st_sssa8_fully_connected+0x5aa>
 800894e:	1e91      	subs	r1, r2, #2
 8008950:	2201      	movs	r2, #1
 8008952:	408a      	lsls	r2, r1
 8008954:	9907      	ldr	r1, [sp, #28]
 8008956:	fb53 2301 	smmla	r3, r3, r1, r2
 800895a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800895c:	4113      	asrs	r3, r2
 800895e:	9a08      	ldr	r2, [sp, #32]
 8008960:	4413      	add	r3, r2
 8008962:	f303 0307 	ssat	r3, #8, r3
 8008966:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8008968:	7013      	strb	r3, [r2, #0]
 800896a:	2000      	movs	r0, #0
 800896c:	b017      	add	sp, #92	; 0x5c
 800896e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008972:	9308      	str	r3, [sp, #32]
 8008974:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008976:	2b00      	cmp	r3, #0
 8008978:	f47f ae52 	bne.w	8008620 <st_sssa8_fully_connected+0x44>
 800897c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800897e:	4270      	negs	r0, r6
 8008980:	eac0 4000 	pkhbt	r0, r0, r0, lsl #16
 8008984:	2b00      	cmp	r3, #0
 8008986:	d0f0      	beq.n	800896a <st_sssa8_fully_connected+0x38e>
 8008988:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800898a:	3301      	adds	r3, #1
 800898c:	9903      	ldr	r1, [sp, #12]
 800898e:	b236      	sxth	r6, r6
 8008990:	18d3      	adds	r3, r2, r3
 8008992:	9c04      	ldr	r4, [sp, #16]
 8008994:	f1a1 0810 	sub.w	r8, r1, #16
 8008998:	f102 0e01 	add.w	lr, r2, #1
 800899c:	9305      	str	r3, [sp, #20]
 800899e:	2201      	movs	r2, #1
 80089a0:	f028 080f 	bic.w	r8, r8, #15
 80089a4:	1ea3      	subs	r3, r4, #2
 80089a6:	468c      	mov	ip, r1
 80089a8:	f8dd 9090 	ldr.w	r9, [sp, #144]	; 0x90
 80089ac:	fa02 f303 	lsl.w	r3, r2, r3
 80089b0:	f108 0810 	add.w	r8, r8, #16
 80089b4:	f1bc 0f0f 	cmp.w	ip, #15
 80089b8:	f8cd b00c 	str.w	fp, [sp, #12]
 80089bc:	9309      	str	r3, [sp, #36]	; 0x24
 80089be:	eb0b 0308 	add.w	r3, fp, r8
 80089c2:	9306      	str	r3, [sp, #24]
 80089c4:	eba2 0304 	sub.w	r3, r2, r4
 80089c8:	930a      	str	r3, [sp, #40]	; 0x28
 80089ca:	f859 3b04 	ldr.w	r3, [r9], #4
 80089ce:	dd7e      	ble.n	8008ace <st_sssa8_fully_connected+0x4f2>
 80089d0:	eb05 0708 	add.w	r7, r5, r8
 80089d4:	462a      	mov	r2, r5
 80089d6:	9d03      	ldr	r5, [sp, #12]
 80089d8:	6811      	ldr	r1, [r2, #0]
 80089da:	682c      	ldr	r4, [r5, #0]
 80089dc:	fa2f fb81 	sxtb16	fp, r1
 80089e0:	ea4f 2a34 	mov.w	sl, r4, ror #8
 80089e4:	ea4f 2131 	mov.w	r1, r1, ror #8
 80089e8:	fa20 fa8a 	sxtab16	sl, r0, sl
 80089ec:	fa2f f181 	sxtb16	r1, r1
 80089f0:	fa20 f484 	sxtab16	r4, r0, r4
 80089f4:	fb24 340b 	smlad	r4, r4, fp, r3
 80089f8:	fb2a 4b01 	smlad	fp, sl, r1, r4
 80089fc:	6851      	ldr	r1, [r2, #4]
 80089fe:	f8d5 a004 	ldr.w	sl, [r5, #4]
 8008a02:	fa2f f481 	sxtb16	r4, r1
 8008a06:	ea4f 233a 	mov.w	r3, sl, ror #8
 8008a0a:	ea4f 2131 	mov.w	r1, r1, ror #8
 8008a0e:	fa20 f383 	sxtab16	r3, r0, r3
 8008a12:	fa2f f181 	sxtb16	r1, r1
 8008a16:	fa20 fa8a 	sxtab16	sl, r0, sl
 8008a1a:	fb2a ba04 	smlad	sl, sl, r4, fp
 8008a1e:	fb23 a401 	smlad	r4, r3, r1, sl
 8008a22:	6891      	ldr	r1, [r2, #8]
 8008a24:	68ab      	ldr	r3, [r5, #8]
 8008a26:	fa2f fb81 	sxtb16	fp, r1
 8008a2a:	ea4f 2a33 	mov.w	sl, r3, ror #8
 8008a2e:	ea4f 2131 	mov.w	r1, r1, ror #8
 8008a32:	fa20 fa8a 	sxtab16	sl, r0, sl
 8008a36:	fa2f f181 	sxtb16	r1, r1
 8008a3a:	fa20 f383 	sxtab16	r3, r0, r3
 8008a3e:	fb23 430b 	smlad	r3, r3, fp, r4
 8008a42:	fb2a 3301 	smlad	r3, sl, r1, r3
 8008a46:	f8d2 a00c 	ldr.w	sl, [r2, #12]
 8008a4a:	3510      	adds	r5, #16
 8008a4c:	f855 1c04 	ldr.w	r1, [r5, #-4]
 8008a50:	3210      	adds	r2, #16
 8008a52:	ea4f 2b3a 	mov.w	fp, sl, ror #8
 8008a56:	ea4f 2431 	mov.w	r4, r1, ror #8
 8008a5a:	fa2f fa8a 	sxtb16	sl, sl
 8008a5e:	fa2f fb8b 	sxtb16	fp, fp
 8008a62:	fa20 f181 	sxtab16	r1, r0, r1
 8008a66:	fa20 f484 	sxtab16	r4, r0, r4
 8008a6a:	fb21 330a 	smlad	r3, r1, sl, r3
 8008a6e:	fb24 330b 	smlad	r3, r4, fp, r3
 8008a72:	4297      	cmp	r7, r2
 8008a74:	d1b0      	bne.n	80089d8 <st_sssa8_fully_connected+0x3fc>
 8008a76:	4645      	mov	r5, r8
 8008a78:	9f06      	ldr	r7, [sp, #24]
 8008a7a:	45ac      	cmp	ip, r5
 8008a7c:	dd2c      	ble.n	8008ad8 <st_sssa8_fully_connected+0x4fc>
 8008a7e:	ebac 0505 	sub.w	r5, ip, r5
 8008a82:	4415      	add	r5, r2
 8008a84:	4611      	mov	r1, r2
 8008a86:	f917 4b01 	ldrsb.w	r4, [r7], #1
 8008a8a:	3201      	adds	r2, #1
 8008a8c:	7809      	ldrb	r1, [r1, #0]
 8008a8e:	1ba4      	subs	r4, r4, r6
 8008a90:	42aa      	cmp	r2, r5
 8008a92:	b249      	sxtb	r1, r1
 8008a94:	fb14 3301 	smlabb	r3, r4, r1, r3
 8008a98:	d1f4      	bne.n	8008a84 <st_sssa8_fully_connected+0x4a8>
 8008a9a:	9a04      	ldr	r2, [sp, #16]
 8008a9c:	2a15      	cmp	r2, #21
 8008a9e:	dd1f      	ble.n	8008ae0 <st_sssa8_fully_connected+0x504>
 8008aa0:	9a07      	ldr	r2, [sp, #28]
 8008aa2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008aa4:	fb53 1302 	smmla	r3, r3, r2, r1
 8008aa8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008aaa:	4113      	asrs	r3, r2
 8008aac:	9a08      	ldr	r2, [sp, #32]
 8008aae:	4413      	add	r3, r2
 8008ab0:	f303 0307 	ssat	r3, #8, r3
 8008ab4:	f80e 3c01 	strb.w	r3, [lr, #-1]
 8008ab8:	f10e 0e01 	add.w	lr, lr, #1
 8008abc:	9b05      	ldr	r3, [sp, #20]
 8008abe:	459e      	cmp	lr, r3
 8008ac0:	f43f af53 	beq.w	800896a <st_sssa8_fully_connected+0x38e>
 8008ac4:	f1bc 0f0f 	cmp.w	ip, #15
 8008ac8:	f859 3b04 	ldr.w	r3, [r9], #4
 8008acc:	dc80      	bgt.n	80089d0 <st_sssa8_fully_connected+0x3f4>
 8008ace:	462a      	mov	r2, r5
 8008ad0:	2500      	movs	r5, #0
 8008ad2:	9f03      	ldr	r7, [sp, #12]
 8008ad4:	45ac      	cmp	ip, r5
 8008ad6:	dcd2      	bgt.n	8008a7e <st_sssa8_fully_connected+0x4a2>
 8008ad8:	4615      	mov	r5, r2
 8008ada:	9a04      	ldr	r2, [sp, #16]
 8008adc:	2a15      	cmp	r2, #21
 8008ade:	dcdf      	bgt.n	8008aa0 <st_sssa8_fully_connected+0x4c4>
 8008ae0:	2a00      	cmp	r2, #0
 8008ae2:	dd42      	ble.n	8008b6a <st_sssa8_fully_connected+0x58e>
 8008ae4:	005b      	lsls	r3, r3, #1
 8008ae6:	e9dd 1407 	ldrd	r1, r4, [sp, #28]
 8008aea:	fb53 4301 	smmla	r3, r3, r1, r4
 8008aee:	4113      	asrs	r3, r2
 8008af0:	f303 0307 	ssat	r3, #8, r3
 8008af4:	f80e 3c01 	strb.w	r3, [lr, #-1]
 8008af8:	e7de      	b.n	8008ab8 <st_sssa8_fully_connected+0x4dc>
 8008afa:	2a00      	cmp	r2, #0
 8008afc:	dd13      	ble.n	8008b26 <st_sssa8_fully_connected+0x54a>
 8008afe:	0049      	lsls	r1, r1, #1
 8008b00:	005b      	lsls	r3, r3, #1
 8008b02:	e9dd 0507 	ldrd	r0, r5, [sp, #28]
 8008b06:	fb51 5100 	smmla	r1, r1, r0, r5
 8008b0a:	fb53 5300 	smmla	r3, r3, r0, r5
 8008b0e:	4111      	asrs	r1, r2
 8008b10:	f301 0107 	ssat	r1, #8, r1
 8008b14:	9806      	ldr	r0, [sp, #24]
 8008b16:	4113      	asrs	r3, r2
 8008b18:	f800 1c02 	strb.w	r1, [r0, #-2]
 8008b1c:	f303 0307 	ssat	r3, #8, r3
 8008b20:	f800 3c01 	strb.w	r3, [r0, #-1]
 8008b24:	e6be      	b.n	80088a4 <st_sssa8_fully_connected+0x2c8>
 8008b26:	9814      	ldr	r0, [sp, #80]	; 0x50
 8008b28:	fa01 f200 	lsl.w	r2, r1, r0
 8008b2c:	f302 021f 	ssat	r2, #32, r2
 8008b30:	9907      	ldr	r1, [sp, #28]
 8008b32:	fb52 f211 	smmulr	r2, r2, r1
 8008b36:	4083      	lsls	r3, r0
 8008b38:	f303 031f 	ssat	r3, #32, r3
 8008b3c:	fb53 f311 	smmulr	r3, r3, r1
 8008b40:	9908      	ldr	r1, [sp, #32]
 8008b42:	440a      	add	r2, r1
 8008b44:	f302 0207 	ssat	r2, #8, r2
 8008b48:	9806      	ldr	r0, [sp, #24]
 8008b4a:	440b      	add	r3, r1
 8008b4c:	f800 2c02 	strb.w	r2, [r0, #-2]
 8008b50:	f303 0307 	ssat	r3, #8, r3
 8008b54:	f800 3c01 	strb.w	r3, [r0, #-1]
 8008b58:	e6a4      	b.n	80088a4 <st_sssa8_fully_connected+0x2c8>
 8008b5a:	4634      	mov	r4, r6
 8008b5c:	e64e      	b.n	80087fc <st_sssa8_fully_connected+0x220>
 8008b5e:	462e      	mov	r6, r5
 8008b60:	f8dd a098 	ldr.w	sl, [sp, #152]	; 0x98
 8008b64:	f04f 0900 	mov.w	r9, #0
 8008b68:	e610      	b.n	800878c <st_sssa8_fully_connected+0x1b0>
 8008b6a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008b6c:	4093      	lsls	r3, r2
 8008b6e:	f303 031f 	ssat	r3, #32, r3
 8008b72:	9a07      	ldr	r2, [sp, #28]
 8008b74:	fb53 f312 	smmulr	r3, r3, r2
 8008b78:	9a08      	ldr	r2, [sp, #32]
 8008b7a:	4413      	add	r3, r2
 8008b7c:	f303 0307 	ssat	r3, #8, r3
 8008b80:	f80e 3c01 	strb.w	r3, [lr, #-1]
 8008b84:	e798      	b.n	8008ab8 <st_sssa8_fully_connected+0x4dc>
 8008b86:	2a00      	cmp	r2, #0
 8008b88:	dd0d      	ble.n	8008ba6 <st_sssa8_fully_connected+0x5ca>
 8008b8a:	005b      	lsls	r3, r3, #1
 8008b8c:	e9dd 1007 	ldrd	r1, r0, [sp, #28]
 8008b90:	fb53 0301 	smmla	r3, r3, r1, r0
 8008b94:	4113      	asrs	r3, r2
 8008b96:	f303 0307 	ssat	r3, #8, r3
 8008b9a:	2000      	movs	r0, #0
 8008b9c:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8008b9e:	7013      	strb	r3, [r2, #0]
 8008ba0:	b017      	add	sp, #92	; 0x5c
 8008ba2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ba6:	f1c2 0201 	rsb	r2, r2, #1
 8008baa:	4093      	lsls	r3, r2
 8008bac:	f303 031f 	ssat	r3, #32, r3
 8008bb0:	9a07      	ldr	r2, [sp, #28]
 8008bb2:	fb53 f312 	smmulr	r3, r3, r2
 8008bb6:	9a08      	ldr	r2, [sp, #32]
 8008bb8:	441a      	add	r2, r3
 8008bba:	f302 0307 	ssat	r3, #8, r2
 8008bbe:	2000      	movs	r0, #0
 8008bc0:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8008bc2:	7013      	strb	r3, [r2, #0]
 8008bc4:	b017      	add	sp, #92	; 0x5c
 8008bc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bca:	462e      	mov	r6, r5
 8008bcc:	e6a0      	b.n	8008910 <st_sssa8_fully_connected+0x334>
 8008bce:	bf00      	nop

08008bd0 <st_int8_copy>:
 8008bd0:	4288      	cmp	r0, r1
 8008bd2:	d010      	beq.n	8008bf6 <st_int8_copy+0x26>
 8008bd4:	b17a      	cbz	r2, 8008bf6 <st_int8_copy+0x26>
 8008bd6:	4288      	cmp	r0, r1
 8008bd8:	eb00 0302 	add.w	r3, r0, r2
 8008bdc:	d20c      	bcs.n	8008bf8 <st_int8_copy+0x28>
 8008bde:	428b      	cmp	r3, r1
 8008be0:	d90a      	bls.n	8008bf8 <st_int8_copy+0x28>
 8008be2:	4283      	cmp	r3, r0
 8008be4:	440a      	add	r2, r1
 8008be6:	d906      	bls.n	8008bf6 <st_int8_copy+0x26>
 8008be8:	f913 1d01 	ldrsb.w	r1, [r3, #-1]!
 8008bec:	4283      	cmp	r3, r0
 8008bee:	f802 1d01 	strb.w	r1, [r2, #-1]!
 8008bf2:	d1f9      	bne.n	8008be8 <st_int8_copy+0x18>
 8008bf4:	4770      	bx	lr
 8008bf6:	4770      	bx	lr
 8008bf8:	078b      	lsls	r3, r1, #30
 8008bfa:	d102      	bne.n	8008c02 <st_int8_copy+0x32>
 8008bfc:	e008      	b.n	8008c10 <st_int8_copy+0x40>
 8008bfe:	2a00      	cmp	r2, #0
 8008c00:	d04d      	beq.n	8008c9e <st_int8_copy+0xce>
 8008c02:	f910 3b01 	ldrsb.w	r3, [r0], #1
 8008c06:	3a01      	subs	r2, #1
 8008c08:	f801 3b01 	strb.w	r3, [r1], #1
 8008c0c:	078b      	lsls	r3, r1, #30
 8008c0e:	d1f6      	bne.n	8008bfe <st_int8_copy+0x2e>
 8008c10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c14:	ea5f 1e12 	movs.w	lr, r2, lsr #4
 8008c18:	d05e      	beq.n	8008cd8 <st_int8_copy+0x108>
 8008c1a:	ea40 0301 	orr.w	r3, r0, r1
 8008c1e:	075b      	lsls	r3, r3, #29
 8008c20:	d13e      	bne.n	8008ca0 <st_int8_copy+0xd0>
 8008c22:	f10e 33ff 	add.w	r3, lr, #4294967295
 8008c26:	2b01      	cmp	r3, #1
 8008c28:	d93a      	bls.n	8008ca0 <st_int8_copy+0xd0>
 8008c2a:	f100 0310 	add.w	r3, r0, #16
 8008c2e:	ea4f 140e 	mov.w	r4, lr, lsl #4
 8008c32:	f101 0c10 	add.w	ip, r1, #16
 8008c36:	eb03 1e0e 	add.w	lr, r3, lr, lsl #4
 8008c3a:	3310      	adds	r3, #16
 8008c3c:	f10c 0c10 	add.w	ip, ip, #16
 8008c40:	ed13 6b08 	vldr	d6, [r3, #-32]	; 0xffffffe0
 8008c44:	ed13 7b06 	vldr	d7, [r3, #-24]	; 0xffffffe8
 8008c48:	4573      	cmp	r3, lr
 8008c4a:	ed0c 6b08 	vstr	d6, [ip, #-32]	; 0xffffffe0
 8008c4e:	ed0c 7b06 	vstr	d7, [ip, #-24]	; 0xffffffe8
 8008c52:	d1f2      	bne.n	8008c3a <st_int8_copy+0x6a>
 8008c54:	f3c2 0381 	ubfx	r3, r2, #2, #2
 8008c58:	4421      	add	r1, r4
 8008c5a:	4420      	add	r0, r4
 8008c5c:	f002 0203 	and.w	r2, r2, #3
 8008c60:	b16b      	cbz	r3, 8008c7e <st_int8_copy+0xae>
 8008c62:	6804      	ldr	r4, [r0, #0]
 8008c64:	600c      	str	r4, [r1, #0]
 8008c66:	1e5c      	subs	r4, r3, #1
 8008c68:	d005      	beq.n	8008c76 <st_int8_copy+0xa6>
 8008c6a:	6845      	ldr	r5, [r0, #4]
 8008c6c:	2c01      	cmp	r4, #1
 8008c6e:	604d      	str	r5, [r1, #4]
 8008c70:	d001      	beq.n	8008c76 <st_int8_copy+0xa6>
 8008c72:	6884      	ldr	r4, [r0, #8]
 8008c74:	608c      	str	r4, [r1, #8]
 8008c76:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8008c7a:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8008c7e:	b162      	cbz	r2, 8008c9a <st_int8_copy+0xca>
 8008c80:	f990 3000 	ldrsb.w	r3, [r0]
 8008c84:	3a01      	subs	r2, #1
 8008c86:	700b      	strb	r3, [r1, #0]
 8008c88:	d007      	beq.n	8008c9a <st_int8_copy+0xca>
 8008c8a:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8008c8e:	2a01      	cmp	r2, #1
 8008c90:	704b      	strb	r3, [r1, #1]
 8008c92:	d002      	beq.n	8008c9a <st_int8_copy+0xca>
 8008c94:	f990 3002 	ldrsb.w	r3, [r0, #2]
 8008c98:	708b      	strb	r3, [r1, #2]
 8008c9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c9e:	4770      	bx	lr
 8008ca0:	ea4f 140e 	mov.w	r4, lr, lsl #4
 8008ca4:	460b      	mov	r3, r1
 8008ca6:	eb01 1e0e 	add.w	lr, r1, lr, lsl #4
 8008caa:	4684      	mov	ip, r0
 8008cac:	f8dc 8000 	ldr.w	r8, [ip]
 8008cb0:	3310      	adds	r3, #16
 8008cb2:	f8dc 7004 	ldr.w	r7, [ip, #4]
 8008cb6:	f10c 0c10 	add.w	ip, ip, #16
 8008cba:	f85c 6c08 	ldr.w	r6, [ip, #-8]
 8008cbe:	f85c 5c04 	ldr.w	r5, [ip, #-4]
 8008cc2:	f843 8c10 	str.w	r8, [r3, #-16]
 8008cc6:	f843 7c0c 	str.w	r7, [r3, #-12]
 8008cca:	f843 6c08 	str.w	r6, [r3, #-8]
 8008cce:	f843 5c04 	str.w	r5, [r3, #-4]
 8008cd2:	459e      	cmp	lr, r3
 8008cd4:	d1ea      	bne.n	8008cac <st_int8_copy+0xdc>
 8008cd6:	e7bd      	b.n	8008c54 <st_int8_copy+0x84>
 8008cd8:	0893      	lsrs	r3, r2, #2
 8008cda:	f002 0203 	and.w	r2, r2, #3
 8008cde:	e7bf      	b.n	8008c60 <st_int8_copy+0x90>

08008ce0 <st_int8_reordered_no_shift_zero>:
 8008ce0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008ce2:	0897      	lsrs	r7, r2, #2
 8008ce4:	f9bd 6014 	ldrsh.w	r6, [sp, #20]
 8008ce8:	d02f      	beq.n	8008d4a <st_int8_reordered_no_shift_zero+0x6a>
 8008cea:	eb00 0587 	add.w	r5, r0, r7, lsl #2
 8008cee:	460c      	mov	r4, r1
 8008cf0:	f850 cb04 	ldr.w	ip, [r0], #4
 8008cf4:	ea4f 2e3c 	mov.w	lr, ip, ror #8
 8008cf8:	fa2f fe8e 	sxtb16	lr, lr
 8008cfc:	fade fe03 	ssub16	lr, lr, r3
 8008d00:	fa2f fc8c 	sxtb16	ip, ip
 8008d04:	fadc fc03 	ssub16	ip, ip, r3
 8008d08:	42a8      	cmp	r0, r5
 8008d0a:	f8c4 c000 	str.w	ip, [r4]
 8008d0e:	f8c4 e004 	str.w	lr, [r4, #4]
 8008d12:	f104 0408 	add.w	r4, r4, #8
 8008d16:	d1eb      	bne.n	8008cf0 <st_int8_reordered_no_shift_zero+0x10>
 8008d18:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
 8008d1c:	f012 0203 	ands.w	r2, r2, #3
 8008d20:	d012      	beq.n	8008d48 <st_int8_reordered_no_shift_zero+0x68>
 8008d22:	f995 0000 	ldrsb.w	r0, [r5]
 8008d26:	b273      	sxtb	r3, r6
 8008d28:	3a01      	subs	r2, #1
 8008d2a:	eba0 0003 	sub.w	r0, r0, r3
 8008d2e:	8008      	strh	r0, [r1, #0]
 8008d30:	d00a      	beq.n	8008d48 <st_int8_reordered_no_shift_zero+0x68>
 8008d32:	f995 0001 	ldrsb.w	r0, [r5, #1]
 8008d36:	2a01      	cmp	r2, #1
 8008d38:	eba0 0003 	sub.w	r0, r0, r3
 8008d3c:	8048      	strh	r0, [r1, #2]
 8008d3e:	d003      	beq.n	8008d48 <st_int8_reordered_no_shift_zero+0x68>
 8008d40:	f995 2002 	ldrsb.w	r2, [r5, #2]
 8008d44:	1ad3      	subs	r3, r2, r3
 8008d46:	808b      	strh	r3, [r1, #4]
 8008d48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d4a:	4605      	mov	r5, r0
 8008d4c:	e7e6      	b.n	8008d1c <st_int8_reordered_no_shift_zero+0x3c>
 8008d4e:	bf00      	nop

08008d50 <arm_float_to_q15>:
 8008d50:	b530      	push	{r4, r5, lr}
 8008d52:	0895      	lsrs	r5, r2, #2
 8008d54:	d069      	beq.n	8008e2a <arm_float_to_q15+0xda>
 8008d56:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8008d5a:	f100 0c10 	add.w	ip, r0, #16
 8008d5e:	eefe 5a00 	vmov.f32	s11, #224	; 0xbf000000 -0.5
 8008d62:	ed9f 6a55 	vldr	s12, [pc, #340]	; 8008eb8 <arm_float_to_q15+0x168>
 8008d66:	f101 0e08 	add.w	lr, r1, #8
 8008d6a:	462c      	mov	r4, r5
 8008d6c:	ed5c 7a04 	vldr	s15, [ip, #-16]
 8008d70:	ee67 6a86 	vmul.f32	s13, s15, s12
 8008d74:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8008d78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d7c:	fe77 7a25 	vselgt.f32	s15, s14, s11
 8008d80:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d84:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008d88:	ee17 3a90 	vmov	r3, s15
 8008d8c:	f303 030f 	ssat	r3, #16, r3
 8008d90:	f82e 3c08 	strh.w	r3, [lr, #-8]
 8008d94:	ed5c 7a03 	vldr	s15, [ip, #-12]
 8008d98:	ee67 6a86 	vmul.f32	s13, s15, s12
 8008d9c:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8008da0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008da4:	fe77 7a25 	vselgt.f32	s15, s14, s11
 8008da8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008dac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008db0:	ee17 3a90 	vmov	r3, s15
 8008db4:	f303 030f 	ssat	r3, #16, r3
 8008db8:	f82e 3c06 	strh.w	r3, [lr, #-6]
 8008dbc:	ed5c 7a02 	vldr	s15, [ip, #-8]
 8008dc0:	ee67 6a86 	vmul.f32	s13, s15, s12
 8008dc4:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8008dc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008dcc:	fe77 7a25 	vselgt.f32	s15, s14, s11
 8008dd0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008dd4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008dd8:	ee17 3a90 	vmov	r3, s15
 8008ddc:	f303 030f 	ssat	r3, #16, r3
 8008de0:	f82e 3c04 	strh.w	r3, [lr, #-4]
 8008de4:	ed5c 7a01 	vldr	s15, [ip, #-4]
 8008de8:	ee67 7a86 	vmul.f32	s15, s15, s12
 8008dec:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008df0:	ee77 6a87 	vadd.f32	s13, s15, s14
 8008df4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008df8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008dfc:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 8008e00:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008e04:	bfcc      	ite	gt
 8008e06:	ee16 3a90 	vmovgt	r3, s13
 8008e0a:	ee17 3a90 	vmovle	r3, s15
 8008e0e:	f303 030f 	ssat	r3, #16, r3
 8008e12:	3c01      	subs	r4, #1
 8008e14:	f82e 3c02 	strh.w	r3, [lr, #-2]
 8008e18:	f10c 0c10 	add.w	ip, ip, #16
 8008e1c:	f10e 0e08 	add.w	lr, lr, #8
 8008e20:	d1a4      	bne.n	8008d6c <arm_float_to_q15+0x1c>
 8008e22:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8008e26:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 8008e2a:	f012 0203 	ands.w	r2, r2, #3
 8008e2e:	d042      	beq.n	8008eb6 <arm_float_to_q15+0x166>
 8008e30:	edd0 7a00 	vldr	s15, [r0]
 8008e34:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8008e38:	eddf 5a1f 	vldr	s11, [pc, #124]	; 8008eb8 <arm_float_to_q15+0x168>
 8008e3c:	eebe 6a00 	vmov.f32	s12, #224	; 0xbf000000 -0.5
 8008e40:	ee67 6aa5 	vmul.f32	s13, s15, s11
 8008e44:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8008e48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e4c:	fe77 7a06 	vselgt.f32	s15, s14, s12
 8008e50:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e54:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008e58:	ee17 3a90 	vmov	r3, s15
 8008e5c:	f303 030f 	ssat	r3, #16, r3
 8008e60:	3a01      	subs	r2, #1
 8008e62:	800b      	strh	r3, [r1, #0]
 8008e64:	d027      	beq.n	8008eb6 <arm_float_to_q15+0x166>
 8008e66:	edd0 7a01 	vldr	s15, [r0, #4]
 8008e6a:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8008e6e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008e72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e76:	fe77 6a06 	vselgt.f32	s13, s14, s12
 8008e7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e7e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008e82:	ee17 3a90 	vmov	r3, s15
 8008e86:	f303 030f 	ssat	r3, #16, r3
 8008e8a:	2a01      	cmp	r2, #1
 8008e8c:	804b      	strh	r3, [r1, #2]
 8008e8e:	d012      	beq.n	8008eb6 <arm_float_to_q15+0x166>
 8008e90:	edd0 7a02 	vldr	s15, [r0, #8]
 8008e94:	ee67 5aa5 	vmul.f32	s11, s15, s11
 8008e98:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 8008e9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ea0:	fe37 7a06 	vselgt.f32	s14, s14, s12
 8008ea4:	ee37 7a25 	vadd.f32	s14, s14, s11
 8008ea8:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8008eac:	ee17 3a10 	vmov	r3, s14
 8008eb0:	f303 030f 	ssat	r3, #16, r3
 8008eb4:	808b      	strh	r3, [r1, #4]
 8008eb6:	bd30      	pop	{r4, r5, pc}
 8008eb8:	47000000 	.word	0x47000000

08008ebc <arm_float_to_q7>:
 8008ebc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008ebe:	0895      	lsrs	r5, r2, #2
 8008ec0:	d06f      	beq.n	8008fa2 <arm_float_to_q7+0xe6>
 8008ec2:	f101 0c04 	add.w	ip, r1, #4
 8008ec6:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8008eca:	eebe 5a00 	vmov.f32	s10, #224	; 0xbf000000 -0.5
 8008ece:	f100 0e10 	add.w	lr, r0, #16
 8008ed2:	eddf 5a5f 	vldr	s11, [pc, #380]	; 8009050 <arm_float_to_q7+0x194>
 8008ed6:	00ae      	lsls	r6, r5, #2
 8008ed8:	eb0c 0485 	add.w	r4, ip, r5, lsl #2
 8008edc:	ed5e 7a04 	vldr	s15, [lr, #-16]
 8008ee0:	ee27 7aa5 	vmul.f32	s14, s15, s11
 8008ee4:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8008ee8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008eec:	fe76 7a05 	vselgt.f32	s15, s12, s10
 8008ef0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008ef4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008ef8:	ee17 3a90 	vmov	r3, s15
 8008efc:	b21b      	sxth	r3, r3
 8008efe:	f303 0307 	ssat	r3, #8, r3
 8008f02:	f80c 3c04 	strb.w	r3, [ip, #-4]
 8008f06:	ed5e 7a03 	vldr	s15, [lr, #-12]
 8008f0a:	ee27 7aa5 	vmul.f32	s14, s15, s11
 8008f0e:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8008f12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f16:	fe76 7a05 	vselgt.f32	s15, s12, s10
 8008f1a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008f1e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008f22:	ee17 3a90 	vmov	r3, s15
 8008f26:	b21b      	sxth	r3, r3
 8008f28:	f303 0307 	ssat	r3, #8, r3
 8008f2c:	f80c 3c03 	strb.w	r3, [ip, #-3]
 8008f30:	ed5e 7a02 	vldr	s15, [lr, #-8]
 8008f34:	ee27 7aa5 	vmul.f32	s14, s15, s11
 8008f38:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8008f3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f40:	fe76 7a05 	vselgt.f32	s15, s12, s10
 8008f44:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008f48:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008f4c:	ee17 3a90 	vmov	r3, s15
 8008f50:	b21b      	sxth	r3, r3
 8008f52:	f303 0307 	ssat	r3, #8, r3
 8008f56:	f80c 3c02 	strb.w	r3, [ip, #-2]
 8008f5a:	ed5e 6a01 	vldr	s13, [lr, #-4]
 8008f5e:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8008f62:	ee76 7a86 	vadd.f32	s15, s13, s12
 8008f66:	ee36 7ac6 	vsub.f32	s14, s13, s12
 8008f6a:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8008f6e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008f72:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8008f76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f7a:	ee17 3a90 	vmov	r3, s15
 8008f7e:	ee17 7a10 	vmov	r7, s14
 8008f82:	b21b      	sxth	r3, r3
 8008f84:	b23f      	sxth	r7, r7
 8008f86:	dd56      	ble.n	8009036 <arm_float_to_q7+0x17a>
 8008f88:	f303 0307 	ssat	r3, #8, r3
 8008f8c:	f80c 3c01 	strb.w	r3, [ip, #-1]
 8008f90:	f10c 0c04 	add.w	ip, ip, #4
 8008f94:	f10e 0e10 	add.w	lr, lr, #16
 8008f98:	4564      	cmp	r4, ip
 8008f9a:	d19f      	bne.n	8008edc <arm_float_to_q7+0x20>
 8008f9c:	4431      	add	r1, r6
 8008f9e:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 8008fa2:	f012 0203 	ands.w	r2, r2, #3
 8008fa6:	d045      	beq.n	8009034 <arm_float_to_q7+0x178>
 8008fa8:	edd0 7a00 	vldr	s15, [r0]
 8008fac:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8008fb0:	ed9f 5a27 	vldr	s10, [pc, #156]	; 8009050 <arm_float_to_q7+0x194>
 8008fb4:	eefe 5a00 	vmov.f32	s11, #224	; 0xbf000000 -0.5
 8008fb8:	ee67 6a85 	vmul.f32	s13, s15, s10
 8008fbc:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8008fc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fc4:	fe77 7a25 	vselgt.f32	s15, s14, s11
 8008fc8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008fcc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008fd0:	ee17 3a90 	vmov	r3, s15
 8008fd4:	b21b      	sxth	r3, r3
 8008fd6:	f303 0307 	ssat	r3, #8, r3
 8008fda:	3a01      	subs	r2, #1
 8008fdc:	700b      	strb	r3, [r1, #0]
 8008fde:	d029      	beq.n	8009034 <arm_float_to_q7+0x178>
 8008fe0:	edd0 6a01 	vldr	s13, [r0, #4]
 8008fe4:	ee26 6a85 	vmul.f32	s12, s13, s10
 8008fe8:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 8008fec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ff0:	fe77 6a25 	vselgt.f32	s13, s14, s11
 8008ff4:	ee76 6a86 	vadd.f32	s13, s13, s12
 8008ff8:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 8008ffc:	ee16 3a90 	vmov	r3, s13
 8009000:	b21b      	sxth	r3, r3
 8009002:	f303 0307 	ssat	r3, #8, r3
 8009006:	2a01      	cmp	r2, #1
 8009008:	704b      	strb	r3, [r1, #1]
 800900a:	d013      	beq.n	8009034 <arm_float_to_q7+0x178>
 800900c:	edd0 7a02 	vldr	s15, [r0, #8]
 8009010:	ee27 5a85 	vmul.f32	s10, s15, s10
 8009014:	eeb5 5ac0 	vcmpe.f32	s10, #0.0
 8009018:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800901c:	fe77 7a25 	vselgt.f32	s15, s14, s11
 8009020:	ee77 7a85 	vadd.f32	s15, s15, s10
 8009024:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009028:	ee17 3a90 	vmov	r3, s15
 800902c:	b21b      	sxth	r3, r3
 800902e:	f303 0307 	ssat	r3, #8, r3
 8009032:	708b      	strb	r3, [r1, #2]
 8009034:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009036:	f307 0707 	ssat	r7, #8, r7
 800903a:	f80c 7c01 	strb.w	r7, [ip, #-1]
 800903e:	f10c 0c04 	add.w	ip, ip, #4
 8009042:	f10e 0e10 	add.w	lr, lr, #16
 8009046:	45a4      	cmp	ip, r4
 8009048:	f47f af48 	bne.w	8008edc <arm_float_to_q7+0x20>
 800904c:	e7a6      	b.n	8008f9c <arm_float_to_q7+0xe0>
 800904e:	bf00      	nop
 8009050:	43000000 	.word	0x43000000

08009054 <arm_q15_to_float>:
 8009054:	b530      	push	{r4, r5, lr}
 8009056:	0894      	lsrs	r4, r2, #2
 8009058:	d038      	beq.n	80090cc <arm_q15_to_float+0x78>
 800905a:	f100 0c08 	add.w	ip, r0, #8
 800905e:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800911c <arm_q15_to_float+0xc8>
 8009062:	f101 0310 	add.w	r3, r1, #16
 8009066:	46a6      	mov	lr, r4
 8009068:	f93c 5c08 	ldrsh.w	r5, [ip, #-8]
 800906c:	3310      	adds	r3, #16
 800906e:	f10c 0c08 	add.w	ip, ip, #8
 8009072:	f1be 0e01 	subs.w	lr, lr, #1
 8009076:	ee07 5a90 	vmov	s15, r5
 800907a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800907e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009082:	ed43 7a08 	vstr	s15, [r3, #-32]	; 0xffffffe0
 8009086:	f93c 5c0e 	ldrsh.w	r5, [ip, #-14]
 800908a:	ee07 5a90 	vmov	s15, r5
 800908e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009092:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009096:	ed43 7a07 	vstr	s15, [r3, #-28]	; 0xffffffe4
 800909a:	f93c 5c0c 	ldrsh.w	r5, [ip, #-12]
 800909e:	ee07 5a90 	vmov	s15, r5
 80090a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80090a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80090aa:	ed43 7a06 	vstr	s15, [r3, #-24]	; 0xffffffe8
 80090ae:	f93c 5c0a 	ldrsh.w	r5, [ip, #-10]
 80090b2:	ee07 5a90 	vmov	s15, r5
 80090b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80090ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80090be:	ed43 7a05 	vstr	s15, [r3, #-20]	; 0xffffffec
 80090c2:	d1d1      	bne.n	8009068 <arm_q15_to_float+0x14>
 80090c4:	eb01 1104 	add.w	r1, r1, r4, lsl #4
 80090c8:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 80090cc:	f012 0203 	ands.w	r2, r2, #3
 80090d0:	d023      	beq.n	800911a <arm_q15_to_float+0xc6>
 80090d2:	f9b0 3000 	ldrsh.w	r3, [r0]
 80090d6:	3a01      	subs	r2, #1
 80090d8:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800911c <arm_q15_to_float+0xc8>
 80090dc:	ee07 3a90 	vmov	s15, r3
 80090e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80090e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80090e8:	edc1 7a00 	vstr	s15, [r1]
 80090ec:	d015      	beq.n	800911a <arm_q15_to_float+0xc6>
 80090ee:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 80090f2:	2a01      	cmp	r2, #1
 80090f4:	ee07 3a90 	vmov	s15, r3
 80090f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80090fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009100:	edc1 7a01 	vstr	s15, [r1, #4]
 8009104:	d009      	beq.n	800911a <arm_q15_to_float+0xc6>
 8009106:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800910a:	ee07 3a90 	vmov	s15, r3
 800910e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009112:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009116:	edc1 7a02 	vstr	s15, [r1, #8]
 800911a:	bd30      	pop	{r4, r5, pc}
 800911c:	38000000 	.word	0x38000000

08009120 <arm_q7_to_float>:
 8009120:	b530      	push	{r4, r5, lr}
 8009122:	0894      	lsrs	r4, r2, #2
 8009124:	d036      	beq.n	8009194 <arm_q7_to_float+0x74>
 8009126:	1d03      	adds	r3, r0, #4
 8009128:	eb00 0c84 	add.w	ip, r0, r4, lsl #2
 800912c:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 80091e4 <arm_q7_to_float+0xc4>
 8009130:	f101 0010 	add.w	r0, r1, #16
 8009134:	f913 ec04 	ldrsb.w	lr, [r3, #-4]
 8009138:	3010      	adds	r0, #16
 800913a:	ee07 ea90 	vmov	s15, lr
 800913e:	469e      	mov	lr, r3
 8009140:	3304      	adds	r3, #4
 8009142:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009146:	45e6      	cmp	lr, ip
 8009148:	ee67 7a87 	vmul.f32	s15, s15, s14
 800914c:	ed40 7a08 	vstr	s15, [r0, #-32]	; 0xffffffe0
 8009150:	f913 5c07 	ldrsb.w	r5, [r3, #-7]
 8009154:	ee07 5a90 	vmov	s15, r5
 8009158:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800915c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009160:	ed40 7a07 	vstr	s15, [r0, #-28]	; 0xffffffe4
 8009164:	f913 5c06 	ldrsb.w	r5, [r3, #-6]
 8009168:	ee07 5a90 	vmov	s15, r5
 800916c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009170:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009174:	ed40 7a06 	vstr	s15, [r0, #-24]	; 0xffffffe8
 8009178:	f913 5c05 	ldrsb.w	r5, [r3, #-5]
 800917c:	ee07 5a90 	vmov	s15, r5
 8009180:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009184:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009188:	ed40 7a05 	vstr	s15, [r0, #-20]	; 0xffffffec
 800918c:	d1d2      	bne.n	8009134 <arm_q7_to_float+0x14>
 800918e:	eb01 1104 	add.w	r1, r1, r4, lsl #4
 8009192:	4660      	mov	r0, ip
 8009194:	f012 0203 	ands.w	r2, r2, #3
 8009198:	d023      	beq.n	80091e2 <arm_q7_to_float+0xc2>
 800919a:	f990 3000 	ldrsb.w	r3, [r0]
 800919e:	3a01      	subs	r2, #1
 80091a0:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80091e4 <arm_q7_to_float+0xc4>
 80091a4:	ee07 3a90 	vmov	s15, r3
 80091a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80091ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80091b0:	edc1 7a00 	vstr	s15, [r1]
 80091b4:	d015      	beq.n	80091e2 <arm_q7_to_float+0xc2>
 80091b6:	f990 3001 	ldrsb.w	r3, [r0, #1]
 80091ba:	2a01      	cmp	r2, #1
 80091bc:	ee07 3a90 	vmov	s15, r3
 80091c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80091c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80091c8:	edc1 7a01 	vstr	s15, [r1, #4]
 80091cc:	d009      	beq.n	80091e2 <arm_q7_to_float+0xc2>
 80091ce:	f990 3002 	ldrsb.w	r3, [r0, #2]
 80091d2:	ee07 3a90 	vmov	s15, r3
 80091d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80091da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80091de:	edc1 7a02 	vstr	s15, [r1, #8]
 80091e2:	bd30      	pop	{r4, r5, pc}
 80091e4:	3c000000 	.word	0x3c000000

080091e8 <ai_array_to_buffer_fmt>:
 80091e8:	f3c0 4343 	ubfx	r3, r0, #17, #4
 80091ec:	2b02      	cmp	r3, #2
 80091ee:	d050      	beq.n	8009292 <ai_array_to_buffer_fmt+0xaa>
 80091f0:	f020 427e 	bic.w	r2, r0, #4261412864	; 0xfe000000
 80091f4:	4b29      	ldr	r3, [pc, #164]	; (800929c <ai_array_to_buffer_fmt+0xb4>)
 80091f6:	429a      	cmp	r2, r3
 80091f8:	d00b      	beq.n	8009212 <ai_array_to_buffer_fmt+0x2a>
 80091fa:	dc1c      	bgt.n	8009236 <ai_array_to_buffer_fmt+0x4e>
 80091fc:	4b28      	ldr	r3, [pc, #160]	; (80092a0 <ai_array_to_buffer_fmt+0xb8>)
 80091fe:	429a      	cmp	r2, r3
 8009200:	d007      	beq.n	8009212 <ai_array_to_buffer_fmt+0x2a>
 8009202:	dd0b      	ble.n	800921c <ai_array_to_buffer_fmt+0x34>
 8009204:	4b27      	ldr	r3, [pc, #156]	; (80092a4 <ai_array_to_buffer_fmt+0xbc>)
 8009206:	429a      	cmp	r2, r3
 8009208:	d003      	beq.n	8009212 <ai_array_to_buffer_fmt+0x2a>
 800920a:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 800920e:	429a      	cmp	r2, r3
 8009210:	d131      	bne.n	8009276 <ai_array_to_buffer_fmt+0x8e>
 8009212:	4613      	mov	r3, r2
 8009214:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8009218:	4318      	orrs	r0, r3
 800921a:	4770      	bx	lr
 800921c:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8009220:	429a      	cmp	r2, r3
 8009222:	d0f6      	beq.n	8009212 <ai_array_to_buffer_fmt+0x2a>
 8009224:	dd2c      	ble.n	8009280 <ai_array_to_buffer_fmt+0x98>
 8009226:	4b20      	ldr	r3, [pc, #128]	; (80092a8 <ai_array_to_buffer_fmt+0xc0>)
 8009228:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800922c:	429a      	cmp	r2, r3
 800922e:	bf18      	it	ne
 8009230:	2340      	movne	r3, #64	; 0x40
 8009232:	4318      	orrs	r0, r3
 8009234:	4770      	bx	lr
 8009236:	4b1d      	ldr	r3, [pc, #116]	; (80092ac <ai_array_to_buffer_fmt+0xc4>)
 8009238:	429a      	cmp	r2, r3
 800923a:	d0ea      	beq.n	8009212 <ai_array_to_buffer_fmt+0x2a>
 800923c:	dd0e      	ble.n	800925c <ai_array_to_buffer_fmt+0x74>
 800923e:	4b1c      	ldr	r3, [pc, #112]	; (80092b0 <ai_array_to_buffer_fmt+0xc8>)
 8009240:	429a      	cmp	r2, r3
 8009242:	d0e6      	beq.n	8009212 <ai_array_to_buffer_fmt+0x2a>
 8009244:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 8009248:	429a      	cmp	r2, r3
 800924a:	d0e2      	beq.n	8009212 <ai_array_to_buffer_fmt+0x2a>
 800924c:	4b19      	ldr	r3, [pc, #100]	; (80092b4 <ai_array_to_buffer_fmt+0xcc>)
 800924e:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8009252:	429a      	cmp	r2, r3
 8009254:	bf18      	it	ne
 8009256:	2340      	movne	r3, #64	; 0x40
 8009258:	4318      	orrs	r0, r3
 800925a:	4770      	bx	lr
 800925c:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8009260:	429a      	cmp	r2, r3
 8009262:	d0d6      	beq.n	8009212 <ai_array_to_buffer_fmt+0x2a>
 8009264:	3307      	adds	r3, #7
 8009266:	429a      	cmp	r2, r3
 8009268:	d0d3      	beq.n	8009212 <ai_array_to_buffer_fmt+0x2a>
 800926a:	f2a3 3387 	subw	r3, r3, #903	; 0x387
 800926e:	429a      	cmp	r2, r3
 8009270:	bf18      	it	ne
 8009272:	2340      	movne	r3, #64	; 0x40
 8009274:	e7ce      	b.n	8009214 <ai_array_to_buffer_fmt+0x2c>
 8009276:	4b10      	ldr	r3, [pc, #64]	; (80092b8 <ai_array_to_buffer_fmt+0xd0>)
 8009278:	429a      	cmp	r2, r3
 800927a:	bf18      	it	ne
 800927c:	2340      	movne	r3, #64	; 0x40
 800927e:	e7c9      	b.n	8009214 <ai_array_to_buffer_fmt+0x2c>
 8009280:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8009284:	429a      	cmp	r2, r3
 8009286:	d0c4      	beq.n	8009212 <ai_array_to_buffer_fmt+0x2a>
 8009288:	3380      	adds	r3, #128	; 0x80
 800928a:	429a      	cmp	r2, r3
 800928c:	bf18      	it	ne
 800928e:	2340      	movne	r3, #64	; 0x40
 8009290:	e7c0      	b.n	8009214 <ai_array_to_buffer_fmt+0x2c>
 8009292:	4b0a      	ldr	r3, [pc, #40]	; (80092bc <ai_array_to_buffer_fmt+0xd4>)
 8009294:	4003      	ands	r3, r0
 8009296:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800929a:	e7bb      	b.n	8009214 <ai_array_to_buffer_fmt+0x2c>
 800929c:	00840040 	.word	0x00840040
 80092a0:	00040840 	.word	0x00040840
 80092a4:	00041040 	.word	0x00041040
 80092a8:	00040447 	.word	0x00040447
 80092ac:	00840840 	.word	0x00840840
 80092b0:	00841040 	.word	0x00841040
 80092b4:	0084084f 	.word	0x0084084f
 80092b8:	0004084f 	.word	0x0004084f
 80092bc:	00803fff 	.word	0x00803fff

080092c0 <ai_array_get_data_byte_size>:
 80092c0:	b161      	cbz	r1, 80092dc <ai_array_get_data_byte_size+0x1c>
 80092c2:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 80092c6:	f3c0 5241 	ubfx	r2, r0, #21, #2
 80092ca:	fb03 f101 	mul.w	r1, r3, r1
 80092ce:	1dc8      	adds	r0, r1, #7
 80092d0:	f020 0007 	bic.w	r0, r0, #7
 80092d4:	40d0      	lsrs	r0, r2
 80092d6:	3007      	adds	r0, #7
 80092d8:	08c0      	lsrs	r0, r0, #3
 80092da:	4770      	bx	lr
 80092dc:	4608      	mov	r0, r1
 80092de:	4770      	bx	lr

080092e0 <ai_version_get>:
 80092e0:	0212      	lsls	r2, r2, #8
 80092e2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80092e6:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 80092ea:	4770      	bx	lr

080092ec <ai_platform_version_get>:
 80092ec:	0e01      	lsrs	r1, r0, #24
 80092ee:	2300      	movs	r3, #0
 80092f0:	f3c0 4207 	ubfx	r2, r0, #16, #8
 80092f4:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80092f8:	f361 0307 	bfi	r3, r1, #0, #8
 80092fc:	b082      	sub	sp, #8
 80092fe:	f362 230f 	bfi	r3, r2, #8, #8
 8009302:	f360 4317 	bfi	r3, r0, #16, #8
 8009306:	f023 407f 	bic.w	r0, r3, #4278190080	; 0xff000000
 800930a:	b002      	add	sp, #8
 800930c:	4770      	bx	lr
 800930e:	bf00      	nop

08009310 <get_tensor_byte_size>:
 8009310:	b430      	push	{r4, r5}
 8009312:	6985      	ldr	r5, [r0, #24]
 8009314:	68c4      	ldr	r4, [r0, #12]
 8009316:	6941      	ldr	r1, [r0, #20]
 8009318:	4b06      	ldr	r3, [pc, #24]	; (8009334 <get_tensor_byte_size+0x24>)
 800931a:	6828      	ldr	r0, [r5, #0]
 800931c:	4a06      	ldr	r2, [pc, #24]	; (8009338 <get_tensor_byte_size+0x28>)
 800931e:	4003      	ands	r3, r0
 8009320:	68c9      	ldr	r1, [r1, #12]
 8009322:	68e0      	ldr	r0, [r4, #12]
 8009324:	4293      	cmp	r3, r2
 8009326:	fb01 f000 	mul.w	r0, r1, r0
 800932a:	d101      	bne.n	8009330 <get_tensor_byte_size+0x20>
 800932c:	3007      	adds	r0, #7
 800932e:	08c0      	lsrs	r0, r0, #3
 8009330:	bc30      	pop	{r4, r5}
 8009332:	4770      	bx	lr
 8009334:	017fffff 	.word	0x017fffff
 8009338:	000400c0 	.word	0x000400c0

0800933c <__errno>:
 800933c:	4b01      	ldr	r3, [pc, #4]	; (8009344 <__errno+0x8>)
 800933e:	6818      	ldr	r0, [r3, #0]
 8009340:	4770      	bx	lr
 8009342:	bf00      	nop
 8009344:	2000113c 	.word	0x2000113c

08009348 <__sflush_r>:
 8009348:	898a      	ldrh	r2, [r1, #12]
 800934a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800934e:	4605      	mov	r5, r0
 8009350:	0710      	lsls	r0, r2, #28
 8009352:	460c      	mov	r4, r1
 8009354:	d458      	bmi.n	8009408 <__sflush_r+0xc0>
 8009356:	684b      	ldr	r3, [r1, #4]
 8009358:	2b00      	cmp	r3, #0
 800935a:	dc05      	bgt.n	8009368 <__sflush_r+0x20>
 800935c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800935e:	2b00      	cmp	r3, #0
 8009360:	dc02      	bgt.n	8009368 <__sflush_r+0x20>
 8009362:	2000      	movs	r0, #0
 8009364:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009368:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800936a:	2e00      	cmp	r6, #0
 800936c:	d0f9      	beq.n	8009362 <__sflush_r+0x1a>
 800936e:	2300      	movs	r3, #0
 8009370:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009374:	682f      	ldr	r7, [r5, #0]
 8009376:	602b      	str	r3, [r5, #0]
 8009378:	d032      	beq.n	80093e0 <__sflush_r+0x98>
 800937a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800937c:	89a3      	ldrh	r3, [r4, #12]
 800937e:	075a      	lsls	r2, r3, #29
 8009380:	d505      	bpl.n	800938e <__sflush_r+0x46>
 8009382:	6863      	ldr	r3, [r4, #4]
 8009384:	1ac0      	subs	r0, r0, r3
 8009386:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009388:	b10b      	cbz	r3, 800938e <__sflush_r+0x46>
 800938a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800938c:	1ac0      	subs	r0, r0, r3
 800938e:	2300      	movs	r3, #0
 8009390:	4602      	mov	r2, r0
 8009392:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009394:	6a21      	ldr	r1, [r4, #32]
 8009396:	4628      	mov	r0, r5
 8009398:	47b0      	blx	r6
 800939a:	1c43      	adds	r3, r0, #1
 800939c:	89a3      	ldrh	r3, [r4, #12]
 800939e:	d106      	bne.n	80093ae <__sflush_r+0x66>
 80093a0:	6829      	ldr	r1, [r5, #0]
 80093a2:	291d      	cmp	r1, #29
 80093a4:	d82c      	bhi.n	8009400 <__sflush_r+0xb8>
 80093a6:	4a2a      	ldr	r2, [pc, #168]	; (8009450 <__sflush_r+0x108>)
 80093a8:	40ca      	lsrs	r2, r1
 80093aa:	07d6      	lsls	r6, r2, #31
 80093ac:	d528      	bpl.n	8009400 <__sflush_r+0xb8>
 80093ae:	2200      	movs	r2, #0
 80093b0:	6062      	str	r2, [r4, #4]
 80093b2:	04d9      	lsls	r1, r3, #19
 80093b4:	6922      	ldr	r2, [r4, #16]
 80093b6:	6022      	str	r2, [r4, #0]
 80093b8:	d504      	bpl.n	80093c4 <__sflush_r+0x7c>
 80093ba:	1c42      	adds	r2, r0, #1
 80093bc:	d101      	bne.n	80093c2 <__sflush_r+0x7a>
 80093be:	682b      	ldr	r3, [r5, #0]
 80093c0:	b903      	cbnz	r3, 80093c4 <__sflush_r+0x7c>
 80093c2:	6560      	str	r0, [r4, #84]	; 0x54
 80093c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80093c6:	602f      	str	r7, [r5, #0]
 80093c8:	2900      	cmp	r1, #0
 80093ca:	d0ca      	beq.n	8009362 <__sflush_r+0x1a>
 80093cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80093d0:	4299      	cmp	r1, r3
 80093d2:	d002      	beq.n	80093da <__sflush_r+0x92>
 80093d4:	4628      	mov	r0, r5
 80093d6:	f000 f9cf 	bl	8009778 <_free_r>
 80093da:	2000      	movs	r0, #0
 80093dc:	6360      	str	r0, [r4, #52]	; 0x34
 80093de:	e7c1      	b.n	8009364 <__sflush_r+0x1c>
 80093e0:	6a21      	ldr	r1, [r4, #32]
 80093e2:	2301      	movs	r3, #1
 80093e4:	4628      	mov	r0, r5
 80093e6:	47b0      	blx	r6
 80093e8:	1c41      	adds	r1, r0, #1
 80093ea:	d1c7      	bne.n	800937c <__sflush_r+0x34>
 80093ec:	682b      	ldr	r3, [r5, #0]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d0c4      	beq.n	800937c <__sflush_r+0x34>
 80093f2:	2b1d      	cmp	r3, #29
 80093f4:	d001      	beq.n	80093fa <__sflush_r+0xb2>
 80093f6:	2b16      	cmp	r3, #22
 80093f8:	d101      	bne.n	80093fe <__sflush_r+0xb6>
 80093fa:	602f      	str	r7, [r5, #0]
 80093fc:	e7b1      	b.n	8009362 <__sflush_r+0x1a>
 80093fe:	89a3      	ldrh	r3, [r4, #12]
 8009400:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009404:	81a3      	strh	r3, [r4, #12]
 8009406:	e7ad      	b.n	8009364 <__sflush_r+0x1c>
 8009408:	690f      	ldr	r7, [r1, #16]
 800940a:	2f00      	cmp	r7, #0
 800940c:	d0a9      	beq.n	8009362 <__sflush_r+0x1a>
 800940e:	0793      	lsls	r3, r2, #30
 8009410:	680e      	ldr	r6, [r1, #0]
 8009412:	bf08      	it	eq
 8009414:	694b      	ldreq	r3, [r1, #20]
 8009416:	600f      	str	r7, [r1, #0]
 8009418:	bf18      	it	ne
 800941a:	2300      	movne	r3, #0
 800941c:	eba6 0807 	sub.w	r8, r6, r7
 8009420:	608b      	str	r3, [r1, #8]
 8009422:	f1b8 0f00 	cmp.w	r8, #0
 8009426:	dd9c      	ble.n	8009362 <__sflush_r+0x1a>
 8009428:	6a21      	ldr	r1, [r4, #32]
 800942a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800942c:	4643      	mov	r3, r8
 800942e:	463a      	mov	r2, r7
 8009430:	4628      	mov	r0, r5
 8009432:	47b0      	blx	r6
 8009434:	2800      	cmp	r0, #0
 8009436:	dc06      	bgt.n	8009446 <__sflush_r+0xfe>
 8009438:	89a3      	ldrh	r3, [r4, #12]
 800943a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800943e:	81a3      	strh	r3, [r4, #12]
 8009440:	f04f 30ff 	mov.w	r0, #4294967295
 8009444:	e78e      	b.n	8009364 <__sflush_r+0x1c>
 8009446:	4407      	add	r7, r0
 8009448:	eba8 0800 	sub.w	r8, r8, r0
 800944c:	e7e9      	b.n	8009422 <__sflush_r+0xda>
 800944e:	bf00      	nop
 8009450:	20400001 	.word	0x20400001

08009454 <_fflush_r>:
 8009454:	b538      	push	{r3, r4, r5, lr}
 8009456:	690b      	ldr	r3, [r1, #16]
 8009458:	4605      	mov	r5, r0
 800945a:	460c      	mov	r4, r1
 800945c:	b913      	cbnz	r3, 8009464 <_fflush_r+0x10>
 800945e:	2500      	movs	r5, #0
 8009460:	4628      	mov	r0, r5
 8009462:	bd38      	pop	{r3, r4, r5, pc}
 8009464:	b118      	cbz	r0, 800946e <_fflush_r+0x1a>
 8009466:	6983      	ldr	r3, [r0, #24]
 8009468:	b90b      	cbnz	r3, 800946e <_fflush_r+0x1a>
 800946a:	f000 f899 	bl	80095a0 <__sinit>
 800946e:	4b14      	ldr	r3, [pc, #80]	; (80094c0 <_fflush_r+0x6c>)
 8009470:	429c      	cmp	r4, r3
 8009472:	d11b      	bne.n	80094ac <_fflush_r+0x58>
 8009474:	686c      	ldr	r4, [r5, #4]
 8009476:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800947a:	2b00      	cmp	r3, #0
 800947c:	d0ef      	beq.n	800945e <_fflush_r+0xa>
 800947e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009480:	07d0      	lsls	r0, r2, #31
 8009482:	d404      	bmi.n	800948e <_fflush_r+0x3a>
 8009484:	0599      	lsls	r1, r3, #22
 8009486:	d402      	bmi.n	800948e <_fflush_r+0x3a>
 8009488:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800948a:	f000 f94c 	bl	8009726 <__retarget_lock_acquire_recursive>
 800948e:	4628      	mov	r0, r5
 8009490:	4621      	mov	r1, r4
 8009492:	f7ff ff59 	bl	8009348 <__sflush_r>
 8009496:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009498:	07da      	lsls	r2, r3, #31
 800949a:	4605      	mov	r5, r0
 800949c:	d4e0      	bmi.n	8009460 <_fflush_r+0xc>
 800949e:	89a3      	ldrh	r3, [r4, #12]
 80094a0:	059b      	lsls	r3, r3, #22
 80094a2:	d4dd      	bmi.n	8009460 <_fflush_r+0xc>
 80094a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80094a6:	f000 f93f 	bl	8009728 <__retarget_lock_release_recursive>
 80094aa:	e7d9      	b.n	8009460 <_fflush_r+0xc>
 80094ac:	4b05      	ldr	r3, [pc, #20]	; (80094c4 <_fflush_r+0x70>)
 80094ae:	429c      	cmp	r4, r3
 80094b0:	d101      	bne.n	80094b6 <_fflush_r+0x62>
 80094b2:	68ac      	ldr	r4, [r5, #8]
 80094b4:	e7df      	b.n	8009476 <_fflush_r+0x22>
 80094b6:	4b04      	ldr	r3, [pc, #16]	; (80094c8 <_fflush_r+0x74>)
 80094b8:	429c      	cmp	r4, r3
 80094ba:	bf08      	it	eq
 80094bc:	68ec      	ldreq	r4, [r5, #12]
 80094be:	e7da      	b.n	8009476 <_fflush_r+0x22>
 80094c0:	08022918 	.word	0x08022918
 80094c4:	08022938 	.word	0x08022938
 80094c8:	080228f8 	.word	0x080228f8

080094cc <fflush>:
 80094cc:	4601      	mov	r1, r0
 80094ce:	b920      	cbnz	r0, 80094da <fflush+0xe>
 80094d0:	4b04      	ldr	r3, [pc, #16]	; (80094e4 <fflush+0x18>)
 80094d2:	4905      	ldr	r1, [pc, #20]	; (80094e8 <fflush+0x1c>)
 80094d4:	6818      	ldr	r0, [r3, #0]
 80094d6:	f000 b8e1 	b.w	800969c <_fwalk_reent>
 80094da:	4b04      	ldr	r3, [pc, #16]	; (80094ec <fflush+0x20>)
 80094dc:	6818      	ldr	r0, [r3, #0]
 80094de:	f7ff bfb9 	b.w	8009454 <_fflush_r>
 80094e2:	bf00      	nop
 80094e4:	08022958 	.word	0x08022958
 80094e8:	08009455 	.word	0x08009455
 80094ec:	2000113c 	.word	0x2000113c

080094f0 <std>:
 80094f0:	2300      	movs	r3, #0
 80094f2:	b510      	push	{r4, lr}
 80094f4:	4604      	mov	r4, r0
 80094f6:	e9c0 3300 	strd	r3, r3, [r0]
 80094fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80094fe:	6083      	str	r3, [r0, #8]
 8009500:	8181      	strh	r1, [r0, #12]
 8009502:	6643      	str	r3, [r0, #100]	; 0x64
 8009504:	81c2      	strh	r2, [r0, #14]
 8009506:	6183      	str	r3, [r0, #24]
 8009508:	4619      	mov	r1, r3
 800950a:	2208      	movs	r2, #8
 800950c:	305c      	adds	r0, #92	; 0x5c
 800950e:	f000 f92b 	bl	8009768 <memset>
 8009512:	4b05      	ldr	r3, [pc, #20]	; (8009528 <std+0x38>)
 8009514:	6263      	str	r3, [r4, #36]	; 0x24
 8009516:	4b05      	ldr	r3, [pc, #20]	; (800952c <std+0x3c>)
 8009518:	62a3      	str	r3, [r4, #40]	; 0x28
 800951a:	4b05      	ldr	r3, [pc, #20]	; (8009530 <std+0x40>)
 800951c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800951e:	4b05      	ldr	r3, [pc, #20]	; (8009534 <std+0x44>)
 8009520:	6224      	str	r4, [r4, #32]
 8009522:	6323      	str	r3, [r4, #48]	; 0x30
 8009524:	bd10      	pop	{r4, pc}
 8009526:	bf00      	nop
 8009528:	0800a305 	.word	0x0800a305
 800952c:	0800a327 	.word	0x0800a327
 8009530:	0800a35f 	.word	0x0800a35f
 8009534:	0800a383 	.word	0x0800a383

08009538 <_cleanup_r>:
 8009538:	4901      	ldr	r1, [pc, #4]	; (8009540 <_cleanup_r+0x8>)
 800953a:	f000 b8af 	b.w	800969c <_fwalk_reent>
 800953e:	bf00      	nop
 8009540:	08009455 	.word	0x08009455

08009544 <__sfmoreglue>:
 8009544:	b570      	push	{r4, r5, r6, lr}
 8009546:	2268      	movs	r2, #104	; 0x68
 8009548:	1e4d      	subs	r5, r1, #1
 800954a:	4355      	muls	r5, r2
 800954c:	460e      	mov	r6, r1
 800954e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009552:	f000 f97d 	bl	8009850 <_malloc_r>
 8009556:	4604      	mov	r4, r0
 8009558:	b140      	cbz	r0, 800956c <__sfmoreglue+0x28>
 800955a:	2100      	movs	r1, #0
 800955c:	e9c0 1600 	strd	r1, r6, [r0]
 8009560:	300c      	adds	r0, #12
 8009562:	60a0      	str	r0, [r4, #8]
 8009564:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009568:	f000 f8fe 	bl	8009768 <memset>
 800956c:	4620      	mov	r0, r4
 800956e:	bd70      	pop	{r4, r5, r6, pc}

08009570 <__sfp_lock_acquire>:
 8009570:	4801      	ldr	r0, [pc, #4]	; (8009578 <__sfp_lock_acquire+0x8>)
 8009572:	f000 b8d8 	b.w	8009726 <__retarget_lock_acquire_recursive>
 8009576:	bf00      	nop
 8009578:	20001671 	.word	0x20001671

0800957c <__sfp_lock_release>:
 800957c:	4801      	ldr	r0, [pc, #4]	; (8009584 <__sfp_lock_release+0x8>)
 800957e:	f000 b8d3 	b.w	8009728 <__retarget_lock_release_recursive>
 8009582:	bf00      	nop
 8009584:	20001671 	.word	0x20001671

08009588 <__sinit_lock_acquire>:
 8009588:	4801      	ldr	r0, [pc, #4]	; (8009590 <__sinit_lock_acquire+0x8>)
 800958a:	f000 b8cc 	b.w	8009726 <__retarget_lock_acquire_recursive>
 800958e:	bf00      	nop
 8009590:	20001672 	.word	0x20001672

08009594 <__sinit_lock_release>:
 8009594:	4801      	ldr	r0, [pc, #4]	; (800959c <__sinit_lock_release+0x8>)
 8009596:	f000 b8c7 	b.w	8009728 <__retarget_lock_release_recursive>
 800959a:	bf00      	nop
 800959c:	20001672 	.word	0x20001672

080095a0 <__sinit>:
 80095a0:	b510      	push	{r4, lr}
 80095a2:	4604      	mov	r4, r0
 80095a4:	f7ff fff0 	bl	8009588 <__sinit_lock_acquire>
 80095a8:	69a3      	ldr	r3, [r4, #24]
 80095aa:	b11b      	cbz	r3, 80095b4 <__sinit+0x14>
 80095ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80095b0:	f7ff bff0 	b.w	8009594 <__sinit_lock_release>
 80095b4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80095b8:	6523      	str	r3, [r4, #80]	; 0x50
 80095ba:	4b13      	ldr	r3, [pc, #76]	; (8009608 <__sinit+0x68>)
 80095bc:	4a13      	ldr	r2, [pc, #76]	; (800960c <__sinit+0x6c>)
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	62a2      	str	r2, [r4, #40]	; 0x28
 80095c2:	42a3      	cmp	r3, r4
 80095c4:	bf04      	itt	eq
 80095c6:	2301      	moveq	r3, #1
 80095c8:	61a3      	streq	r3, [r4, #24]
 80095ca:	4620      	mov	r0, r4
 80095cc:	f000 f820 	bl	8009610 <__sfp>
 80095d0:	6060      	str	r0, [r4, #4]
 80095d2:	4620      	mov	r0, r4
 80095d4:	f000 f81c 	bl	8009610 <__sfp>
 80095d8:	60a0      	str	r0, [r4, #8]
 80095da:	4620      	mov	r0, r4
 80095dc:	f000 f818 	bl	8009610 <__sfp>
 80095e0:	2200      	movs	r2, #0
 80095e2:	60e0      	str	r0, [r4, #12]
 80095e4:	2104      	movs	r1, #4
 80095e6:	6860      	ldr	r0, [r4, #4]
 80095e8:	f7ff ff82 	bl	80094f0 <std>
 80095ec:	68a0      	ldr	r0, [r4, #8]
 80095ee:	2201      	movs	r2, #1
 80095f0:	2109      	movs	r1, #9
 80095f2:	f7ff ff7d 	bl	80094f0 <std>
 80095f6:	68e0      	ldr	r0, [r4, #12]
 80095f8:	2202      	movs	r2, #2
 80095fa:	2112      	movs	r1, #18
 80095fc:	f7ff ff78 	bl	80094f0 <std>
 8009600:	2301      	movs	r3, #1
 8009602:	61a3      	str	r3, [r4, #24]
 8009604:	e7d2      	b.n	80095ac <__sinit+0xc>
 8009606:	bf00      	nop
 8009608:	08022958 	.word	0x08022958
 800960c:	08009539 	.word	0x08009539

08009610 <__sfp>:
 8009610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009612:	4607      	mov	r7, r0
 8009614:	f7ff ffac 	bl	8009570 <__sfp_lock_acquire>
 8009618:	4b1e      	ldr	r3, [pc, #120]	; (8009694 <__sfp+0x84>)
 800961a:	681e      	ldr	r6, [r3, #0]
 800961c:	69b3      	ldr	r3, [r6, #24]
 800961e:	b913      	cbnz	r3, 8009626 <__sfp+0x16>
 8009620:	4630      	mov	r0, r6
 8009622:	f7ff ffbd 	bl	80095a0 <__sinit>
 8009626:	3648      	adds	r6, #72	; 0x48
 8009628:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800962c:	3b01      	subs	r3, #1
 800962e:	d503      	bpl.n	8009638 <__sfp+0x28>
 8009630:	6833      	ldr	r3, [r6, #0]
 8009632:	b30b      	cbz	r3, 8009678 <__sfp+0x68>
 8009634:	6836      	ldr	r6, [r6, #0]
 8009636:	e7f7      	b.n	8009628 <__sfp+0x18>
 8009638:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800963c:	b9d5      	cbnz	r5, 8009674 <__sfp+0x64>
 800963e:	4b16      	ldr	r3, [pc, #88]	; (8009698 <__sfp+0x88>)
 8009640:	60e3      	str	r3, [r4, #12]
 8009642:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009646:	6665      	str	r5, [r4, #100]	; 0x64
 8009648:	f000 f86c 	bl	8009724 <__retarget_lock_init_recursive>
 800964c:	f7ff ff96 	bl	800957c <__sfp_lock_release>
 8009650:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009654:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009658:	6025      	str	r5, [r4, #0]
 800965a:	61a5      	str	r5, [r4, #24]
 800965c:	2208      	movs	r2, #8
 800965e:	4629      	mov	r1, r5
 8009660:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009664:	f000 f880 	bl	8009768 <memset>
 8009668:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800966c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009670:	4620      	mov	r0, r4
 8009672:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009674:	3468      	adds	r4, #104	; 0x68
 8009676:	e7d9      	b.n	800962c <__sfp+0x1c>
 8009678:	2104      	movs	r1, #4
 800967a:	4638      	mov	r0, r7
 800967c:	f7ff ff62 	bl	8009544 <__sfmoreglue>
 8009680:	4604      	mov	r4, r0
 8009682:	6030      	str	r0, [r6, #0]
 8009684:	2800      	cmp	r0, #0
 8009686:	d1d5      	bne.n	8009634 <__sfp+0x24>
 8009688:	f7ff ff78 	bl	800957c <__sfp_lock_release>
 800968c:	230c      	movs	r3, #12
 800968e:	603b      	str	r3, [r7, #0]
 8009690:	e7ee      	b.n	8009670 <__sfp+0x60>
 8009692:	bf00      	nop
 8009694:	08022958 	.word	0x08022958
 8009698:	ffff0001 	.word	0xffff0001

0800969c <_fwalk_reent>:
 800969c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80096a0:	4606      	mov	r6, r0
 80096a2:	4688      	mov	r8, r1
 80096a4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80096a8:	2700      	movs	r7, #0
 80096aa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80096ae:	f1b9 0901 	subs.w	r9, r9, #1
 80096b2:	d505      	bpl.n	80096c0 <_fwalk_reent+0x24>
 80096b4:	6824      	ldr	r4, [r4, #0]
 80096b6:	2c00      	cmp	r4, #0
 80096b8:	d1f7      	bne.n	80096aa <_fwalk_reent+0xe>
 80096ba:	4638      	mov	r0, r7
 80096bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80096c0:	89ab      	ldrh	r3, [r5, #12]
 80096c2:	2b01      	cmp	r3, #1
 80096c4:	d907      	bls.n	80096d6 <_fwalk_reent+0x3a>
 80096c6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80096ca:	3301      	adds	r3, #1
 80096cc:	d003      	beq.n	80096d6 <_fwalk_reent+0x3a>
 80096ce:	4629      	mov	r1, r5
 80096d0:	4630      	mov	r0, r6
 80096d2:	47c0      	blx	r8
 80096d4:	4307      	orrs	r7, r0
 80096d6:	3568      	adds	r5, #104	; 0x68
 80096d8:	e7e9      	b.n	80096ae <_fwalk_reent+0x12>
	...

080096dc <__libc_init_array>:
 80096dc:	b570      	push	{r4, r5, r6, lr}
 80096de:	4d0d      	ldr	r5, [pc, #52]	; (8009714 <__libc_init_array+0x38>)
 80096e0:	4c0d      	ldr	r4, [pc, #52]	; (8009718 <__libc_init_array+0x3c>)
 80096e2:	1b64      	subs	r4, r4, r5
 80096e4:	10a4      	asrs	r4, r4, #2
 80096e6:	2600      	movs	r6, #0
 80096e8:	42a6      	cmp	r6, r4
 80096ea:	d109      	bne.n	8009700 <__libc_init_array+0x24>
 80096ec:	4d0b      	ldr	r5, [pc, #44]	; (800971c <__libc_init_array+0x40>)
 80096ee:	4c0c      	ldr	r4, [pc, #48]	; (8009720 <__libc_init_array+0x44>)
 80096f0:	f002 ffda 	bl	800c6a8 <_init>
 80096f4:	1b64      	subs	r4, r4, r5
 80096f6:	10a4      	asrs	r4, r4, #2
 80096f8:	2600      	movs	r6, #0
 80096fa:	42a6      	cmp	r6, r4
 80096fc:	d105      	bne.n	800970a <__libc_init_array+0x2e>
 80096fe:	bd70      	pop	{r4, r5, r6, pc}
 8009700:	f855 3b04 	ldr.w	r3, [r5], #4
 8009704:	4798      	blx	r3
 8009706:	3601      	adds	r6, #1
 8009708:	e7ee      	b.n	80096e8 <__libc_init_array+0xc>
 800970a:	f855 3b04 	ldr.w	r3, [r5], #4
 800970e:	4798      	blx	r3
 8009710:	3601      	adds	r6, #1
 8009712:	e7f2      	b.n	80096fa <__libc_init_array+0x1e>
 8009714:	08022d50 	.word	0x08022d50
 8009718:	08022d50 	.word	0x08022d50
 800971c:	08022d50 	.word	0x08022d50
 8009720:	08022d54 	.word	0x08022d54

08009724 <__retarget_lock_init_recursive>:
 8009724:	4770      	bx	lr

08009726 <__retarget_lock_acquire_recursive>:
 8009726:	4770      	bx	lr

08009728 <__retarget_lock_release_recursive>:
 8009728:	4770      	bx	lr
	...

0800972c <malloc>:
 800972c:	4b02      	ldr	r3, [pc, #8]	; (8009738 <malloc+0xc>)
 800972e:	4601      	mov	r1, r0
 8009730:	6818      	ldr	r0, [r3, #0]
 8009732:	f000 b88d 	b.w	8009850 <_malloc_r>
 8009736:	bf00      	nop
 8009738:	2000113c 	.word	0x2000113c

0800973c <free>:
 800973c:	4b02      	ldr	r3, [pc, #8]	; (8009748 <free+0xc>)
 800973e:	4601      	mov	r1, r0
 8009740:	6818      	ldr	r0, [r3, #0]
 8009742:	f000 b819 	b.w	8009778 <_free_r>
 8009746:	bf00      	nop
 8009748:	2000113c 	.word	0x2000113c

0800974c <memcpy>:
 800974c:	440a      	add	r2, r1
 800974e:	4291      	cmp	r1, r2
 8009750:	f100 33ff 	add.w	r3, r0, #4294967295
 8009754:	d100      	bne.n	8009758 <memcpy+0xc>
 8009756:	4770      	bx	lr
 8009758:	b510      	push	{r4, lr}
 800975a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800975e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009762:	4291      	cmp	r1, r2
 8009764:	d1f9      	bne.n	800975a <memcpy+0xe>
 8009766:	bd10      	pop	{r4, pc}

08009768 <memset>:
 8009768:	4402      	add	r2, r0
 800976a:	4603      	mov	r3, r0
 800976c:	4293      	cmp	r3, r2
 800976e:	d100      	bne.n	8009772 <memset+0xa>
 8009770:	4770      	bx	lr
 8009772:	f803 1b01 	strb.w	r1, [r3], #1
 8009776:	e7f9      	b.n	800976c <memset+0x4>

08009778 <_free_r>:
 8009778:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800977a:	2900      	cmp	r1, #0
 800977c:	d044      	beq.n	8009808 <_free_r+0x90>
 800977e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009782:	9001      	str	r0, [sp, #4]
 8009784:	2b00      	cmp	r3, #0
 8009786:	f1a1 0404 	sub.w	r4, r1, #4
 800978a:	bfb8      	it	lt
 800978c:	18e4      	addlt	r4, r4, r3
 800978e:	f001 fcf5 	bl	800b17c <__malloc_lock>
 8009792:	4a1e      	ldr	r2, [pc, #120]	; (800980c <_free_r+0x94>)
 8009794:	9801      	ldr	r0, [sp, #4]
 8009796:	6813      	ldr	r3, [r2, #0]
 8009798:	b933      	cbnz	r3, 80097a8 <_free_r+0x30>
 800979a:	6063      	str	r3, [r4, #4]
 800979c:	6014      	str	r4, [r2, #0]
 800979e:	b003      	add	sp, #12
 80097a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80097a4:	f001 bcf0 	b.w	800b188 <__malloc_unlock>
 80097a8:	42a3      	cmp	r3, r4
 80097aa:	d908      	bls.n	80097be <_free_r+0x46>
 80097ac:	6825      	ldr	r5, [r4, #0]
 80097ae:	1961      	adds	r1, r4, r5
 80097b0:	428b      	cmp	r3, r1
 80097b2:	bf01      	itttt	eq
 80097b4:	6819      	ldreq	r1, [r3, #0]
 80097b6:	685b      	ldreq	r3, [r3, #4]
 80097b8:	1949      	addeq	r1, r1, r5
 80097ba:	6021      	streq	r1, [r4, #0]
 80097bc:	e7ed      	b.n	800979a <_free_r+0x22>
 80097be:	461a      	mov	r2, r3
 80097c0:	685b      	ldr	r3, [r3, #4]
 80097c2:	b10b      	cbz	r3, 80097c8 <_free_r+0x50>
 80097c4:	42a3      	cmp	r3, r4
 80097c6:	d9fa      	bls.n	80097be <_free_r+0x46>
 80097c8:	6811      	ldr	r1, [r2, #0]
 80097ca:	1855      	adds	r5, r2, r1
 80097cc:	42a5      	cmp	r5, r4
 80097ce:	d10b      	bne.n	80097e8 <_free_r+0x70>
 80097d0:	6824      	ldr	r4, [r4, #0]
 80097d2:	4421      	add	r1, r4
 80097d4:	1854      	adds	r4, r2, r1
 80097d6:	42a3      	cmp	r3, r4
 80097d8:	6011      	str	r1, [r2, #0]
 80097da:	d1e0      	bne.n	800979e <_free_r+0x26>
 80097dc:	681c      	ldr	r4, [r3, #0]
 80097de:	685b      	ldr	r3, [r3, #4]
 80097e0:	6053      	str	r3, [r2, #4]
 80097e2:	4421      	add	r1, r4
 80097e4:	6011      	str	r1, [r2, #0]
 80097e6:	e7da      	b.n	800979e <_free_r+0x26>
 80097e8:	d902      	bls.n	80097f0 <_free_r+0x78>
 80097ea:	230c      	movs	r3, #12
 80097ec:	6003      	str	r3, [r0, #0]
 80097ee:	e7d6      	b.n	800979e <_free_r+0x26>
 80097f0:	6825      	ldr	r5, [r4, #0]
 80097f2:	1961      	adds	r1, r4, r5
 80097f4:	428b      	cmp	r3, r1
 80097f6:	bf04      	itt	eq
 80097f8:	6819      	ldreq	r1, [r3, #0]
 80097fa:	685b      	ldreq	r3, [r3, #4]
 80097fc:	6063      	str	r3, [r4, #4]
 80097fe:	bf04      	itt	eq
 8009800:	1949      	addeq	r1, r1, r5
 8009802:	6021      	streq	r1, [r4, #0]
 8009804:	6054      	str	r4, [r2, #4]
 8009806:	e7ca      	b.n	800979e <_free_r+0x26>
 8009808:	b003      	add	sp, #12
 800980a:	bd30      	pop	{r4, r5, pc}
 800980c:	20001674 	.word	0x20001674

08009810 <sbrk_aligned>:
 8009810:	b570      	push	{r4, r5, r6, lr}
 8009812:	4e0e      	ldr	r6, [pc, #56]	; (800984c <sbrk_aligned+0x3c>)
 8009814:	460c      	mov	r4, r1
 8009816:	6831      	ldr	r1, [r6, #0]
 8009818:	4605      	mov	r5, r0
 800981a:	b911      	cbnz	r1, 8009822 <sbrk_aligned+0x12>
 800981c:	f000 fd62 	bl	800a2e4 <_sbrk_r>
 8009820:	6030      	str	r0, [r6, #0]
 8009822:	4621      	mov	r1, r4
 8009824:	4628      	mov	r0, r5
 8009826:	f000 fd5d 	bl	800a2e4 <_sbrk_r>
 800982a:	1c43      	adds	r3, r0, #1
 800982c:	d00a      	beq.n	8009844 <sbrk_aligned+0x34>
 800982e:	1cc4      	adds	r4, r0, #3
 8009830:	f024 0403 	bic.w	r4, r4, #3
 8009834:	42a0      	cmp	r0, r4
 8009836:	d007      	beq.n	8009848 <sbrk_aligned+0x38>
 8009838:	1a21      	subs	r1, r4, r0
 800983a:	4628      	mov	r0, r5
 800983c:	f000 fd52 	bl	800a2e4 <_sbrk_r>
 8009840:	3001      	adds	r0, #1
 8009842:	d101      	bne.n	8009848 <sbrk_aligned+0x38>
 8009844:	f04f 34ff 	mov.w	r4, #4294967295
 8009848:	4620      	mov	r0, r4
 800984a:	bd70      	pop	{r4, r5, r6, pc}
 800984c:	20001678 	.word	0x20001678

08009850 <_malloc_r>:
 8009850:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009854:	1ccd      	adds	r5, r1, #3
 8009856:	f025 0503 	bic.w	r5, r5, #3
 800985a:	3508      	adds	r5, #8
 800985c:	2d0c      	cmp	r5, #12
 800985e:	bf38      	it	cc
 8009860:	250c      	movcc	r5, #12
 8009862:	2d00      	cmp	r5, #0
 8009864:	4607      	mov	r7, r0
 8009866:	db01      	blt.n	800986c <_malloc_r+0x1c>
 8009868:	42a9      	cmp	r1, r5
 800986a:	d905      	bls.n	8009878 <_malloc_r+0x28>
 800986c:	230c      	movs	r3, #12
 800986e:	603b      	str	r3, [r7, #0]
 8009870:	2600      	movs	r6, #0
 8009872:	4630      	mov	r0, r6
 8009874:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009878:	4e2e      	ldr	r6, [pc, #184]	; (8009934 <_malloc_r+0xe4>)
 800987a:	f001 fc7f 	bl	800b17c <__malloc_lock>
 800987e:	6833      	ldr	r3, [r6, #0]
 8009880:	461c      	mov	r4, r3
 8009882:	bb34      	cbnz	r4, 80098d2 <_malloc_r+0x82>
 8009884:	4629      	mov	r1, r5
 8009886:	4638      	mov	r0, r7
 8009888:	f7ff ffc2 	bl	8009810 <sbrk_aligned>
 800988c:	1c43      	adds	r3, r0, #1
 800988e:	4604      	mov	r4, r0
 8009890:	d14d      	bne.n	800992e <_malloc_r+0xde>
 8009892:	6834      	ldr	r4, [r6, #0]
 8009894:	4626      	mov	r6, r4
 8009896:	2e00      	cmp	r6, #0
 8009898:	d140      	bne.n	800991c <_malloc_r+0xcc>
 800989a:	6823      	ldr	r3, [r4, #0]
 800989c:	4631      	mov	r1, r6
 800989e:	4638      	mov	r0, r7
 80098a0:	eb04 0803 	add.w	r8, r4, r3
 80098a4:	f000 fd1e 	bl	800a2e4 <_sbrk_r>
 80098a8:	4580      	cmp	r8, r0
 80098aa:	d13a      	bne.n	8009922 <_malloc_r+0xd2>
 80098ac:	6821      	ldr	r1, [r4, #0]
 80098ae:	3503      	adds	r5, #3
 80098b0:	1a6d      	subs	r5, r5, r1
 80098b2:	f025 0503 	bic.w	r5, r5, #3
 80098b6:	3508      	adds	r5, #8
 80098b8:	2d0c      	cmp	r5, #12
 80098ba:	bf38      	it	cc
 80098bc:	250c      	movcc	r5, #12
 80098be:	4629      	mov	r1, r5
 80098c0:	4638      	mov	r0, r7
 80098c2:	f7ff ffa5 	bl	8009810 <sbrk_aligned>
 80098c6:	3001      	adds	r0, #1
 80098c8:	d02b      	beq.n	8009922 <_malloc_r+0xd2>
 80098ca:	6823      	ldr	r3, [r4, #0]
 80098cc:	442b      	add	r3, r5
 80098ce:	6023      	str	r3, [r4, #0]
 80098d0:	e00e      	b.n	80098f0 <_malloc_r+0xa0>
 80098d2:	6822      	ldr	r2, [r4, #0]
 80098d4:	1b52      	subs	r2, r2, r5
 80098d6:	d41e      	bmi.n	8009916 <_malloc_r+0xc6>
 80098d8:	2a0b      	cmp	r2, #11
 80098da:	d916      	bls.n	800990a <_malloc_r+0xba>
 80098dc:	1961      	adds	r1, r4, r5
 80098de:	42a3      	cmp	r3, r4
 80098e0:	6025      	str	r5, [r4, #0]
 80098e2:	bf18      	it	ne
 80098e4:	6059      	strne	r1, [r3, #4]
 80098e6:	6863      	ldr	r3, [r4, #4]
 80098e8:	bf08      	it	eq
 80098ea:	6031      	streq	r1, [r6, #0]
 80098ec:	5162      	str	r2, [r4, r5]
 80098ee:	604b      	str	r3, [r1, #4]
 80098f0:	4638      	mov	r0, r7
 80098f2:	f104 060b 	add.w	r6, r4, #11
 80098f6:	f001 fc47 	bl	800b188 <__malloc_unlock>
 80098fa:	f026 0607 	bic.w	r6, r6, #7
 80098fe:	1d23      	adds	r3, r4, #4
 8009900:	1af2      	subs	r2, r6, r3
 8009902:	d0b6      	beq.n	8009872 <_malloc_r+0x22>
 8009904:	1b9b      	subs	r3, r3, r6
 8009906:	50a3      	str	r3, [r4, r2]
 8009908:	e7b3      	b.n	8009872 <_malloc_r+0x22>
 800990a:	6862      	ldr	r2, [r4, #4]
 800990c:	42a3      	cmp	r3, r4
 800990e:	bf0c      	ite	eq
 8009910:	6032      	streq	r2, [r6, #0]
 8009912:	605a      	strne	r2, [r3, #4]
 8009914:	e7ec      	b.n	80098f0 <_malloc_r+0xa0>
 8009916:	4623      	mov	r3, r4
 8009918:	6864      	ldr	r4, [r4, #4]
 800991a:	e7b2      	b.n	8009882 <_malloc_r+0x32>
 800991c:	4634      	mov	r4, r6
 800991e:	6876      	ldr	r6, [r6, #4]
 8009920:	e7b9      	b.n	8009896 <_malloc_r+0x46>
 8009922:	230c      	movs	r3, #12
 8009924:	603b      	str	r3, [r7, #0]
 8009926:	4638      	mov	r0, r7
 8009928:	f001 fc2e 	bl	800b188 <__malloc_unlock>
 800992c:	e7a1      	b.n	8009872 <_malloc_r+0x22>
 800992e:	6025      	str	r5, [r4, #0]
 8009930:	e7de      	b.n	80098f0 <_malloc_r+0xa0>
 8009932:	bf00      	nop
 8009934:	20001674 	.word	0x20001674

08009938 <__cvt>:
 8009938:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800993c:	ec55 4b10 	vmov	r4, r5, d0
 8009940:	2d00      	cmp	r5, #0
 8009942:	460e      	mov	r6, r1
 8009944:	4619      	mov	r1, r3
 8009946:	462b      	mov	r3, r5
 8009948:	bfbb      	ittet	lt
 800994a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800994e:	461d      	movlt	r5, r3
 8009950:	2300      	movge	r3, #0
 8009952:	232d      	movlt	r3, #45	; 0x2d
 8009954:	700b      	strb	r3, [r1, #0]
 8009956:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009958:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800995c:	4691      	mov	r9, r2
 800995e:	f023 0820 	bic.w	r8, r3, #32
 8009962:	bfbc      	itt	lt
 8009964:	4622      	movlt	r2, r4
 8009966:	4614      	movlt	r4, r2
 8009968:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800996c:	d005      	beq.n	800997a <__cvt+0x42>
 800996e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009972:	d100      	bne.n	8009976 <__cvt+0x3e>
 8009974:	3601      	adds	r6, #1
 8009976:	2102      	movs	r1, #2
 8009978:	e000      	b.n	800997c <__cvt+0x44>
 800997a:	2103      	movs	r1, #3
 800997c:	ab03      	add	r3, sp, #12
 800997e:	9301      	str	r3, [sp, #4]
 8009980:	ab02      	add	r3, sp, #8
 8009982:	9300      	str	r3, [sp, #0]
 8009984:	ec45 4b10 	vmov	d0, r4, r5
 8009988:	4653      	mov	r3, sl
 800998a:	4632      	mov	r2, r6
 800998c:	f000 fde0 	bl	800a550 <_dtoa_r>
 8009990:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009994:	4607      	mov	r7, r0
 8009996:	d102      	bne.n	800999e <__cvt+0x66>
 8009998:	f019 0f01 	tst.w	r9, #1
 800999c:	d022      	beq.n	80099e4 <__cvt+0xac>
 800999e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80099a2:	eb07 0906 	add.w	r9, r7, r6
 80099a6:	d110      	bne.n	80099ca <__cvt+0x92>
 80099a8:	783b      	ldrb	r3, [r7, #0]
 80099aa:	2b30      	cmp	r3, #48	; 0x30
 80099ac:	d10a      	bne.n	80099c4 <__cvt+0x8c>
 80099ae:	2200      	movs	r2, #0
 80099b0:	2300      	movs	r3, #0
 80099b2:	4620      	mov	r0, r4
 80099b4:	4629      	mov	r1, r5
 80099b6:	f7f7 f8a7 	bl	8000b08 <__aeabi_dcmpeq>
 80099ba:	b918      	cbnz	r0, 80099c4 <__cvt+0x8c>
 80099bc:	f1c6 0601 	rsb	r6, r6, #1
 80099c0:	f8ca 6000 	str.w	r6, [sl]
 80099c4:	f8da 3000 	ldr.w	r3, [sl]
 80099c8:	4499      	add	r9, r3
 80099ca:	2200      	movs	r2, #0
 80099cc:	2300      	movs	r3, #0
 80099ce:	4620      	mov	r0, r4
 80099d0:	4629      	mov	r1, r5
 80099d2:	f7f7 f899 	bl	8000b08 <__aeabi_dcmpeq>
 80099d6:	b108      	cbz	r0, 80099dc <__cvt+0xa4>
 80099d8:	f8cd 900c 	str.w	r9, [sp, #12]
 80099dc:	2230      	movs	r2, #48	; 0x30
 80099de:	9b03      	ldr	r3, [sp, #12]
 80099e0:	454b      	cmp	r3, r9
 80099e2:	d307      	bcc.n	80099f4 <__cvt+0xbc>
 80099e4:	9b03      	ldr	r3, [sp, #12]
 80099e6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80099e8:	1bdb      	subs	r3, r3, r7
 80099ea:	4638      	mov	r0, r7
 80099ec:	6013      	str	r3, [r2, #0]
 80099ee:	b004      	add	sp, #16
 80099f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099f4:	1c59      	adds	r1, r3, #1
 80099f6:	9103      	str	r1, [sp, #12]
 80099f8:	701a      	strb	r2, [r3, #0]
 80099fa:	e7f0      	b.n	80099de <__cvt+0xa6>

080099fc <__exponent>:
 80099fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80099fe:	4603      	mov	r3, r0
 8009a00:	2900      	cmp	r1, #0
 8009a02:	bfb8      	it	lt
 8009a04:	4249      	neglt	r1, r1
 8009a06:	f803 2b02 	strb.w	r2, [r3], #2
 8009a0a:	bfb4      	ite	lt
 8009a0c:	222d      	movlt	r2, #45	; 0x2d
 8009a0e:	222b      	movge	r2, #43	; 0x2b
 8009a10:	2909      	cmp	r1, #9
 8009a12:	7042      	strb	r2, [r0, #1]
 8009a14:	dd2a      	ble.n	8009a6c <__exponent+0x70>
 8009a16:	f10d 0407 	add.w	r4, sp, #7
 8009a1a:	46a4      	mov	ip, r4
 8009a1c:	270a      	movs	r7, #10
 8009a1e:	46a6      	mov	lr, r4
 8009a20:	460a      	mov	r2, r1
 8009a22:	fb91 f6f7 	sdiv	r6, r1, r7
 8009a26:	fb07 1516 	mls	r5, r7, r6, r1
 8009a2a:	3530      	adds	r5, #48	; 0x30
 8009a2c:	2a63      	cmp	r2, #99	; 0x63
 8009a2e:	f104 34ff 	add.w	r4, r4, #4294967295
 8009a32:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009a36:	4631      	mov	r1, r6
 8009a38:	dcf1      	bgt.n	8009a1e <__exponent+0x22>
 8009a3a:	3130      	adds	r1, #48	; 0x30
 8009a3c:	f1ae 0502 	sub.w	r5, lr, #2
 8009a40:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009a44:	1c44      	adds	r4, r0, #1
 8009a46:	4629      	mov	r1, r5
 8009a48:	4561      	cmp	r1, ip
 8009a4a:	d30a      	bcc.n	8009a62 <__exponent+0x66>
 8009a4c:	f10d 0209 	add.w	r2, sp, #9
 8009a50:	eba2 020e 	sub.w	r2, r2, lr
 8009a54:	4565      	cmp	r5, ip
 8009a56:	bf88      	it	hi
 8009a58:	2200      	movhi	r2, #0
 8009a5a:	4413      	add	r3, r2
 8009a5c:	1a18      	subs	r0, r3, r0
 8009a5e:	b003      	add	sp, #12
 8009a60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a62:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009a66:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009a6a:	e7ed      	b.n	8009a48 <__exponent+0x4c>
 8009a6c:	2330      	movs	r3, #48	; 0x30
 8009a6e:	3130      	adds	r1, #48	; 0x30
 8009a70:	7083      	strb	r3, [r0, #2]
 8009a72:	70c1      	strb	r1, [r0, #3]
 8009a74:	1d03      	adds	r3, r0, #4
 8009a76:	e7f1      	b.n	8009a5c <__exponent+0x60>

08009a78 <_printf_float>:
 8009a78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a7c:	ed2d 8b02 	vpush	{d8}
 8009a80:	b08d      	sub	sp, #52	; 0x34
 8009a82:	460c      	mov	r4, r1
 8009a84:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009a88:	4616      	mov	r6, r2
 8009a8a:	461f      	mov	r7, r3
 8009a8c:	4605      	mov	r5, r0
 8009a8e:	f001 fb5f 	bl	800b150 <_localeconv_r>
 8009a92:	f8d0 a000 	ldr.w	sl, [r0]
 8009a96:	4650      	mov	r0, sl
 8009a98:	f7f6 fbba 	bl	8000210 <strlen>
 8009a9c:	2300      	movs	r3, #0
 8009a9e:	930a      	str	r3, [sp, #40]	; 0x28
 8009aa0:	6823      	ldr	r3, [r4, #0]
 8009aa2:	9305      	str	r3, [sp, #20]
 8009aa4:	f8d8 3000 	ldr.w	r3, [r8]
 8009aa8:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009aac:	3307      	adds	r3, #7
 8009aae:	f023 0307 	bic.w	r3, r3, #7
 8009ab2:	f103 0208 	add.w	r2, r3, #8
 8009ab6:	f8c8 2000 	str.w	r2, [r8]
 8009aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009abe:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009ac2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009ac6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009aca:	9307      	str	r3, [sp, #28]
 8009acc:	f8cd 8018 	str.w	r8, [sp, #24]
 8009ad0:	ee08 0a10 	vmov	s16, r0
 8009ad4:	4b9f      	ldr	r3, [pc, #636]	; (8009d54 <_printf_float+0x2dc>)
 8009ad6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009ada:	f04f 32ff 	mov.w	r2, #4294967295
 8009ade:	f7f7 f845 	bl	8000b6c <__aeabi_dcmpun>
 8009ae2:	bb88      	cbnz	r0, 8009b48 <_printf_float+0xd0>
 8009ae4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009ae8:	4b9a      	ldr	r3, [pc, #616]	; (8009d54 <_printf_float+0x2dc>)
 8009aea:	f04f 32ff 	mov.w	r2, #4294967295
 8009aee:	f7f7 f81f 	bl	8000b30 <__aeabi_dcmple>
 8009af2:	bb48      	cbnz	r0, 8009b48 <_printf_float+0xd0>
 8009af4:	2200      	movs	r2, #0
 8009af6:	2300      	movs	r3, #0
 8009af8:	4640      	mov	r0, r8
 8009afa:	4649      	mov	r1, r9
 8009afc:	f7f7 f80e 	bl	8000b1c <__aeabi_dcmplt>
 8009b00:	b110      	cbz	r0, 8009b08 <_printf_float+0x90>
 8009b02:	232d      	movs	r3, #45	; 0x2d
 8009b04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009b08:	4b93      	ldr	r3, [pc, #588]	; (8009d58 <_printf_float+0x2e0>)
 8009b0a:	4894      	ldr	r0, [pc, #592]	; (8009d5c <_printf_float+0x2e4>)
 8009b0c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009b10:	bf94      	ite	ls
 8009b12:	4698      	movls	r8, r3
 8009b14:	4680      	movhi	r8, r0
 8009b16:	2303      	movs	r3, #3
 8009b18:	6123      	str	r3, [r4, #16]
 8009b1a:	9b05      	ldr	r3, [sp, #20]
 8009b1c:	f023 0204 	bic.w	r2, r3, #4
 8009b20:	6022      	str	r2, [r4, #0]
 8009b22:	f04f 0900 	mov.w	r9, #0
 8009b26:	9700      	str	r7, [sp, #0]
 8009b28:	4633      	mov	r3, r6
 8009b2a:	aa0b      	add	r2, sp, #44	; 0x2c
 8009b2c:	4621      	mov	r1, r4
 8009b2e:	4628      	mov	r0, r5
 8009b30:	f000 f9d8 	bl	8009ee4 <_printf_common>
 8009b34:	3001      	adds	r0, #1
 8009b36:	f040 8090 	bne.w	8009c5a <_printf_float+0x1e2>
 8009b3a:	f04f 30ff 	mov.w	r0, #4294967295
 8009b3e:	b00d      	add	sp, #52	; 0x34
 8009b40:	ecbd 8b02 	vpop	{d8}
 8009b44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b48:	4642      	mov	r2, r8
 8009b4a:	464b      	mov	r3, r9
 8009b4c:	4640      	mov	r0, r8
 8009b4e:	4649      	mov	r1, r9
 8009b50:	f7f7 f80c 	bl	8000b6c <__aeabi_dcmpun>
 8009b54:	b140      	cbz	r0, 8009b68 <_printf_float+0xf0>
 8009b56:	464b      	mov	r3, r9
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	bfbc      	itt	lt
 8009b5c:	232d      	movlt	r3, #45	; 0x2d
 8009b5e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009b62:	487f      	ldr	r0, [pc, #508]	; (8009d60 <_printf_float+0x2e8>)
 8009b64:	4b7f      	ldr	r3, [pc, #508]	; (8009d64 <_printf_float+0x2ec>)
 8009b66:	e7d1      	b.n	8009b0c <_printf_float+0x94>
 8009b68:	6863      	ldr	r3, [r4, #4]
 8009b6a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009b6e:	9206      	str	r2, [sp, #24]
 8009b70:	1c5a      	adds	r2, r3, #1
 8009b72:	d13f      	bne.n	8009bf4 <_printf_float+0x17c>
 8009b74:	2306      	movs	r3, #6
 8009b76:	6063      	str	r3, [r4, #4]
 8009b78:	9b05      	ldr	r3, [sp, #20]
 8009b7a:	6861      	ldr	r1, [r4, #4]
 8009b7c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009b80:	2300      	movs	r3, #0
 8009b82:	9303      	str	r3, [sp, #12]
 8009b84:	ab0a      	add	r3, sp, #40	; 0x28
 8009b86:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009b8a:	ab09      	add	r3, sp, #36	; 0x24
 8009b8c:	ec49 8b10 	vmov	d0, r8, r9
 8009b90:	9300      	str	r3, [sp, #0]
 8009b92:	6022      	str	r2, [r4, #0]
 8009b94:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009b98:	4628      	mov	r0, r5
 8009b9a:	f7ff fecd 	bl	8009938 <__cvt>
 8009b9e:	9b06      	ldr	r3, [sp, #24]
 8009ba0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009ba2:	2b47      	cmp	r3, #71	; 0x47
 8009ba4:	4680      	mov	r8, r0
 8009ba6:	d108      	bne.n	8009bba <_printf_float+0x142>
 8009ba8:	1cc8      	adds	r0, r1, #3
 8009baa:	db02      	blt.n	8009bb2 <_printf_float+0x13a>
 8009bac:	6863      	ldr	r3, [r4, #4]
 8009bae:	4299      	cmp	r1, r3
 8009bb0:	dd41      	ble.n	8009c36 <_printf_float+0x1be>
 8009bb2:	f1ab 0b02 	sub.w	fp, fp, #2
 8009bb6:	fa5f fb8b 	uxtb.w	fp, fp
 8009bba:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009bbe:	d820      	bhi.n	8009c02 <_printf_float+0x18a>
 8009bc0:	3901      	subs	r1, #1
 8009bc2:	465a      	mov	r2, fp
 8009bc4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009bc8:	9109      	str	r1, [sp, #36]	; 0x24
 8009bca:	f7ff ff17 	bl	80099fc <__exponent>
 8009bce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009bd0:	1813      	adds	r3, r2, r0
 8009bd2:	2a01      	cmp	r2, #1
 8009bd4:	4681      	mov	r9, r0
 8009bd6:	6123      	str	r3, [r4, #16]
 8009bd8:	dc02      	bgt.n	8009be0 <_printf_float+0x168>
 8009bda:	6822      	ldr	r2, [r4, #0]
 8009bdc:	07d2      	lsls	r2, r2, #31
 8009bde:	d501      	bpl.n	8009be4 <_printf_float+0x16c>
 8009be0:	3301      	adds	r3, #1
 8009be2:	6123      	str	r3, [r4, #16]
 8009be4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d09c      	beq.n	8009b26 <_printf_float+0xae>
 8009bec:	232d      	movs	r3, #45	; 0x2d
 8009bee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009bf2:	e798      	b.n	8009b26 <_printf_float+0xae>
 8009bf4:	9a06      	ldr	r2, [sp, #24]
 8009bf6:	2a47      	cmp	r2, #71	; 0x47
 8009bf8:	d1be      	bne.n	8009b78 <_printf_float+0x100>
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d1bc      	bne.n	8009b78 <_printf_float+0x100>
 8009bfe:	2301      	movs	r3, #1
 8009c00:	e7b9      	b.n	8009b76 <_printf_float+0xfe>
 8009c02:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009c06:	d118      	bne.n	8009c3a <_printf_float+0x1c2>
 8009c08:	2900      	cmp	r1, #0
 8009c0a:	6863      	ldr	r3, [r4, #4]
 8009c0c:	dd0b      	ble.n	8009c26 <_printf_float+0x1ae>
 8009c0e:	6121      	str	r1, [r4, #16]
 8009c10:	b913      	cbnz	r3, 8009c18 <_printf_float+0x1a0>
 8009c12:	6822      	ldr	r2, [r4, #0]
 8009c14:	07d0      	lsls	r0, r2, #31
 8009c16:	d502      	bpl.n	8009c1e <_printf_float+0x1a6>
 8009c18:	3301      	adds	r3, #1
 8009c1a:	440b      	add	r3, r1
 8009c1c:	6123      	str	r3, [r4, #16]
 8009c1e:	65a1      	str	r1, [r4, #88]	; 0x58
 8009c20:	f04f 0900 	mov.w	r9, #0
 8009c24:	e7de      	b.n	8009be4 <_printf_float+0x16c>
 8009c26:	b913      	cbnz	r3, 8009c2e <_printf_float+0x1b6>
 8009c28:	6822      	ldr	r2, [r4, #0]
 8009c2a:	07d2      	lsls	r2, r2, #31
 8009c2c:	d501      	bpl.n	8009c32 <_printf_float+0x1ba>
 8009c2e:	3302      	adds	r3, #2
 8009c30:	e7f4      	b.n	8009c1c <_printf_float+0x1a4>
 8009c32:	2301      	movs	r3, #1
 8009c34:	e7f2      	b.n	8009c1c <_printf_float+0x1a4>
 8009c36:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009c3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c3c:	4299      	cmp	r1, r3
 8009c3e:	db05      	blt.n	8009c4c <_printf_float+0x1d4>
 8009c40:	6823      	ldr	r3, [r4, #0]
 8009c42:	6121      	str	r1, [r4, #16]
 8009c44:	07d8      	lsls	r0, r3, #31
 8009c46:	d5ea      	bpl.n	8009c1e <_printf_float+0x1a6>
 8009c48:	1c4b      	adds	r3, r1, #1
 8009c4a:	e7e7      	b.n	8009c1c <_printf_float+0x1a4>
 8009c4c:	2900      	cmp	r1, #0
 8009c4e:	bfd4      	ite	le
 8009c50:	f1c1 0202 	rsble	r2, r1, #2
 8009c54:	2201      	movgt	r2, #1
 8009c56:	4413      	add	r3, r2
 8009c58:	e7e0      	b.n	8009c1c <_printf_float+0x1a4>
 8009c5a:	6823      	ldr	r3, [r4, #0]
 8009c5c:	055a      	lsls	r2, r3, #21
 8009c5e:	d407      	bmi.n	8009c70 <_printf_float+0x1f8>
 8009c60:	6923      	ldr	r3, [r4, #16]
 8009c62:	4642      	mov	r2, r8
 8009c64:	4631      	mov	r1, r6
 8009c66:	4628      	mov	r0, r5
 8009c68:	47b8      	blx	r7
 8009c6a:	3001      	adds	r0, #1
 8009c6c:	d12c      	bne.n	8009cc8 <_printf_float+0x250>
 8009c6e:	e764      	b.n	8009b3a <_printf_float+0xc2>
 8009c70:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009c74:	f240 80e0 	bls.w	8009e38 <_printf_float+0x3c0>
 8009c78:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009c7c:	2200      	movs	r2, #0
 8009c7e:	2300      	movs	r3, #0
 8009c80:	f7f6 ff42 	bl	8000b08 <__aeabi_dcmpeq>
 8009c84:	2800      	cmp	r0, #0
 8009c86:	d034      	beq.n	8009cf2 <_printf_float+0x27a>
 8009c88:	4a37      	ldr	r2, [pc, #220]	; (8009d68 <_printf_float+0x2f0>)
 8009c8a:	2301      	movs	r3, #1
 8009c8c:	4631      	mov	r1, r6
 8009c8e:	4628      	mov	r0, r5
 8009c90:	47b8      	blx	r7
 8009c92:	3001      	adds	r0, #1
 8009c94:	f43f af51 	beq.w	8009b3a <_printf_float+0xc2>
 8009c98:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009c9c:	429a      	cmp	r2, r3
 8009c9e:	db02      	blt.n	8009ca6 <_printf_float+0x22e>
 8009ca0:	6823      	ldr	r3, [r4, #0]
 8009ca2:	07d8      	lsls	r0, r3, #31
 8009ca4:	d510      	bpl.n	8009cc8 <_printf_float+0x250>
 8009ca6:	ee18 3a10 	vmov	r3, s16
 8009caa:	4652      	mov	r2, sl
 8009cac:	4631      	mov	r1, r6
 8009cae:	4628      	mov	r0, r5
 8009cb0:	47b8      	blx	r7
 8009cb2:	3001      	adds	r0, #1
 8009cb4:	f43f af41 	beq.w	8009b3a <_printf_float+0xc2>
 8009cb8:	f04f 0800 	mov.w	r8, #0
 8009cbc:	f104 091a 	add.w	r9, r4, #26
 8009cc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009cc2:	3b01      	subs	r3, #1
 8009cc4:	4543      	cmp	r3, r8
 8009cc6:	dc09      	bgt.n	8009cdc <_printf_float+0x264>
 8009cc8:	6823      	ldr	r3, [r4, #0]
 8009cca:	079b      	lsls	r3, r3, #30
 8009ccc:	f100 8105 	bmi.w	8009eda <_printf_float+0x462>
 8009cd0:	68e0      	ldr	r0, [r4, #12]
 8009cd2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009cd4:	4298      	cmp	r0, r3
 8009cd6:	bfb8      	it	lt
 8009cd8:	4618      	movlt	r0, r3
 8009cda:	e730      	b.n	8009b3e <_printf_float+0xc6>
 8009cdc:	2301      	movs	r3, #1
 8009cde:	464a      	mov	r2, r9
 8009ce0:	4631      	mov	r1, r6
 8009ce2:	4628      	mov	r0, r5
 8009ce4:	47b8      	blx	r7
 8009ce6:	3001      	adds	r0, #1
 8009ce8:	f43f af27 	beq.w	8009b3a <_printf_float+0xc2>
 8009cec:	f108 0801 	add.w	r8, r8, #1
 8009cf0:	e7e6      	b.n	8009cc0 <_printf_float+0x248>
 8009cf2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	dc39      	bgt.n	8009d6c <_printf_float+0x2f4>
 8009cf8:	4a1b      	ldr	r2, [pc, #108]	; (8009d68 <_printf_float+0x2f0>)
 8009cfa:	2301      	movs	r3, #1
 8009cfc:	4631      	mov	r1, r6
 8009cfe:	4628      	mov	r0, r5
 8009d00:	47b8      	blx	r7
 8009d02:	3001      	adds	r0, #1
 8009d04:	f43f af19 	beq.w	8009b3a <_printf_float+0xc2>
 8009d08:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009d0c:	4313      	orrs	r3, r2
 8009d0e:	d102      	bne.n	8009d16 <_printf_float+0x29e>
 8009d10:	6823      	ldr	r3, [r4, #0]
 8009d12:	07d9      	lsls	r1, r3, #31
 8009d14:	d5d8      	bpl.n	8009cc8 <_printf_float+0x250>
 8009d16:	ee18 3a10 	vmov	r3, s16
 8009d1a:	4652      	mov	r2, sl
 8009d1c:	4631      	mov	r1, r6
 8009d1e:	4628      	mov	r0, r5
 8009d20:	47b8      	blx	r7
 8009d22:	3001      	adds	r0, #1
 8009d24:	f43f af09 	beq.w	8009b3a <_printf_float+0xc2>
 8009d28:	f04f 0900 	mov.w	r9, #0
 8009d2c:	f104 0a1a 	add.w	sl, r4, #26
 8009d30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d32:	425b      	negs	r3, r3
 8009d34:	454b      	cmp	r3, r9
 8009d36:	dc01      	bgt.n	8009d3c <_printf_float+0x2c4>
 8009d38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d3a:	e792      	b.n	8009c62 <_printf_float+0x1ea>
 8009d3c:	2301      	movs	r3, #1
 8009d3e:	4652      	mov	r2, sl
 8009d40:	4631      	mov	r1, r6
 8009d42:	4628      	mov	r0, r5
 8009d44:	47b8      	blx	r7
 8009d46:	3001      	adds	r0, #1
 8009d48:	f43f aef7 	beq.w	8009b3a <_printf_float+0xc2>
 8009d4c:	f109 0901 	add.w	r9, r9, #1
 8009d50:	e7ee      	b.n	8009d30 <_printf_float+0x2b8>
 8009d52:	bf00      	nop
 8009d54:	7fefffff 	.word	0x7fefffff
 8009d58:	0802295c 	.word	0x0802295c
 8009d5c:	08022960 	.word	0x08022960
 8009d60:	08022968 	.word	0x08022968
 8009d64:	08022964 	.word	0x08022964
 8009d68:	0800d3dc 	.word	0x0800d3dc
 8009d6c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009d6e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009d70:	429a      	cmp	r2, r3
 8009d72:	bfa8      	it	ge
 8009d74:	461a      	movge	r2, r3
 8009d76:	2a00      	cmp	r2, #0
 8009d78:	4691      	mov	r9, r2
 8009d7a:	dc37      	bgt.n	8009dec <_printf_float+0x374>
 8009d7c:	f04f 0b00 	mov.w	fp, #0
 8009d80:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009d84:	f104 021a 	add.w	r2, r4, #26
 8009d88:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009d8a:	9305      	str	r3, [sp, #20]
 8009d8c:	eba3 0309 	sub.w	r3, r3, r9
 8009d90:	455b      	cmp	r3, fp
 8009d92:	dc33      	bgt.n	8009dfc <_printf_float+0x384>
 8009d94:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009d98:	429a      	cmp	r2, r3
 8009d9a:	db3b      	blt.n	8009e14 <_printf_float+0x39c>
 8009d9c:	6823      	ldr	r3, [r4, #0]
 8009d9e:	07da      	lsls	r2, r3, #31
 8009da0:	d438      	bmi.n	8009e14 <_printf_float+0x39c>
 8009da2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009da4:	9a05      	ldr	r2, [sp, #20]
 8009da6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009da8:	1a9a      	subs	r2, r3, r2
 8009daa:	eba3 0901 	sub.w	r9, r3, r1
 8009dae:	4591      	cmp	r9, r2
 8009db0:	bfa8      	it	ge
 8009db2:	4691      	movge	r9, r2
 8009db4:	f1b9 0f00 	cmp.w	r9, #0
 8009db8:	dc35      	bgt.n	8009e26 <_printf_float+0x3ae>
 8009dba:	f04f 0800 	mov.w	r8, #0
 8009dbe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009dc2:	f104 0a1a 	add.w	sl, r4, #26
 8009dc6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009dca:	1a9b      	subs	r3, r3, r2
 8009dcc:	eba3 0309 	sub.w	r3, r3, r9
 8009dd0:	4543      	cmp	r3, r8
 8009dd2:	f77f af79 	ble.w	8009cc8 <_printf_float+0x250>
 8009dd6:	2301      	movs	r3, #1
 8009dd8:	4652      	mov	r2, sl
 8009dda:	4631      	mov	r1, r6
 8009ddc:	4628      	mov	r0, r5
 8009dde:	47b8      	blx	r7
 8009de0:	3001      	adds	r0, #1
 8009de2:	f43f aeaa 	beq.w	8009b3a <_printf_float+0xc2>
 8009de6:	f108 0801 	add.w	r8, r8, #1
 8009dea:	e7ec      	b.n	8009dc6 <_printf_float+0x34e>
 8009dec:	4613      	mov	r3, r2
 8009dee:	4631      	mov	r1, r6
 8009df0:	4642      	mov	r2, r8
 8009df2:	4628      	mov	r0, r5
 8009df4:	47b8      	blx	r7
 8009df6:	3001      	adds	r0, #1
 8009df8:	d1c0      	bne.n	8009d7c <_printf_float+0x304>
 8009dfa:	e69e      	b.n	8009b3a <_printf_float+0xc2>
 8009dfc:	2301      	movs	r3, #1
 8009dfe:	4631      	mov	r1, r6
 8009e00:	4628      	mov	r0, r5
 8009e02:	9205      	str	r2, [sp, #20]
 8009e04:	47b8      	blx	r7
 8009e06:	3001      	adds	r0, #1
 8009e08:	f43f ae97 	beq.w	8009b3a <_printf_float+0xc2>
 8009e0c:	9a05      	ldr	r2, [sp, #20]
 8009e0e:	f10b 0b01 	add.w	fp, fp, #1
 8009e12:	e7b9      	b.n	8009d88 <_printf_float+0x310>
 8009e14:	ee18 3a10 	vmov	r3, s16
 8009e18:	4652      	mov	r2, sl
 8009e1a:	4631      	mov	r1, r6
 8009e1c:	4628      	mov	r0, r5
 8009e1e:	47b8      	blx	r7
 8009e20:	3001      	adds	r0, #1
 8009e22:	d1be      	bne.n	8009da2 <_printf_float+0x32a>
 8009e24:	e689      	b.n	8009b3a <_printf_float+0xc2>
 8009e26:	9a05      	ldr	r2, [sp, #20]
 8009e28:	464b      	mov	r3, r9
 8009e2a:	4442      	add	r2, r8
 8009e2c:	4631      	mov	r1, r6
 8009e2e:	4628      	mov	r0, r5
 8009e30:	47b8      	blx	r7
 8009e32:	3001      	adds	r0, #1
 8009e34:	d1c1      	bne.n	8009dba <_printf_float+0x342>
 8009e36:	e680      	b.n	8009b3a <_printf_float+0xc2>
 8009e38:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009e3a:	2a01      	cmp	r2, #1
 8009e3c:	dc01      	bgt.n	8009e42 <_printf_float+0x3ca>
 8009e3e:	07db      	lsls	r3, r3, #31
 8009e40:	d538      	bpl.n	8009eb4 <_printf_float+0x43c>
 8009e42:	2301      	movs	r3, #1
 8009e44:	4642      	mov	r2, r8
 8009e46:	4631      	mov	r1, r6
 8009e48:	4628      	mov	r0, r5
 8009e4a:	47b8      	blx	r7
 8009e4c:	3001      	adds	r0, #1
 8009e4e:	f43f ae74 	beq.w	8009b3a <_printf_float+0xc2>
 8009e52:	ee18 3a10 	vmov	r3, s16
 8009e56:	4652      	mov	r2, sl
 8009e58:	4631      	mov	r1, r6
 8009e5a:	4628      	mov	r0, r5
 8009e5c:	47b8      	blx	r7
 8009e5e:	3001      	adds	r0, #1
 8009e60:	f43f ae6b 	beq.w	8009b3a <_printf_float+0xc2>
 8009e64:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009e68:	2200      	movs	r2, #0
 8009e6a:	2300      	movs	r3, #0
 8009e6c:	f7f6 fe4c 	bl	8000b08 <__aeabi_dcmpeq>
 8009e70:	b9d8      	cbnz	r0, 8009eaa <_printf_float+0x432>
 8009e72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e74:	f108 0201 	add.w	r2, r8, #1
 8009e78:	3b01      	subs	r3, #1
 8009e7a:	4631      	mov	r1, r6
 8009e7c:	4628      	mov	r0, r5
 8009e7e:	47b8      	blx	r7
 8009e80:	3001      	adds	r0, #1
 8009e82:	d10e      	bne.n	8009ea2 <_printf_float+0x42a>
 8009e84:	e659      	b.n	8009b3a <_printf_float+0xc2>
 8009e86:	2301      	movs	r3, #1
 8009e88:	4652      	mov	r2, sl
 8009e8a:	4631      	mov	r1, r6
 8009e8c:	4628      	mov	r0, r5
 8009e8e:	47b8      	blx	r7
 8009e90:	3001      	adds	r0, #1
 8009e92:	f43f ae52 	beq.w	8009b3a <_printf_float+0xc2>
 8009e96:	f108 0801 	add.w	r8, r8, #1
 8009e9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e9c:	3b01      	subs	r3, #1
 8009e9e:	4543      	cmp	r3, r8
 8009ea0:	dcf1      	bgt.n	8009e86 <_printf_float+0x40e>
 8009ea2:	464b      	mov	r3, r9
 8009ea4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009ea8:	e6dc      	b.n	8009c64 <_printf_float+0x1ec>
 8009eaa:	f04f 0800 	mov.w	r8, #0
 8009eae:	f104 0a1a 	add.w	sl, r4, #26
 8009eb2:	e7f2      	b.n	8009e9a <_printf_float+0x422>
 8009eb4:	2301      	movs	r3, #1
 8009eb6:	4642      	mov	r2, r8
 8009eb8:	e7df      	b.n	8009e7a <_printf_float+0x402>
 8009eba:	2301      	movs	r3, #1
 8009ebc:	464a      	mov	r2, r9
 8009ebe:	4631      	mov	r1, r6
 8009ec0:	4628      	mov	r0, r5
 8009ec2:	47b8      	blx	r7
 8009ec4:	3001      	adds	r0, #1
 8009ec6:	f43f ae38 	beq.w	8009b3a <_printf_float+0xc2>
 8009eca:	f108 0801 	add.w	r8, r8, #1
 8009ece:	68e3      	ldr	r3, [r4, #12]
 8009ed0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009ed2:	1a5b      	subs	r3, r3, r1
 8009ed4:	4543      	cmp	r3, r8
 8009ed6:	dcf0      	bgt.n	8009eba <_printf_float+0x442>
 8009ed8:	e6fa      	b.n	8009cd0 <_printf_float+0x258>
 8009eda:	f04f 0800 	mov.w	r8, #0
 8009ede:	f104 0919 	add.w	r9, r4, #25
 8009ee2:	e7f4      	b.n	8009ece <_printf_float+0x456>

08009ee4 <_printf_common>:
 8009ee4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ee8:	4616      	mov	r6, r2
 8009eea:	4699      	mov	r9, r3
 8009eec:	688a      	ldr	r2, [r1, #8]
 8009eee:	690b      	ldr	r3, [r1, #16]
 8009ef0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009ef4:	4293      	cmp	r3, r2
 8009ef6:	bfb8      	it	lt
 8009ef8:	4613      	movlt	r3, r2
 8009efa:	6033      	str	r3, [r6, #0]
 8009efc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009f00:	4607      	mov	r7, r0
 8009f02:	460c      	mov	r4, r1
 8009f04:	b10a      	cbz	r2, 8009f0a <_printf_common+0x26>
 8009f06:	3301      	adds	r3, #1
 8009f08:	6033      	str	r3, [r6, #0]
 8009f0a:	6823      	ldr	r3, [r4, #0]
 8009f0c:	0699      	lsls	r1, r3, #26
 8009f0e:	bf42      	ittt	mi
 8009f10:	6833      	ldrmi	r3, [r6, #0]
 8009f12:	3302      	addmi	r3, #2
 8009f14:	6033      	strmi	r3, [r6, #0]
 8009f16:	6825      	ldr	r5, [r4, #0]
 8009f18:	f015 0506 	ands.w	r5, r5, #6
 8009f1c:	d106      	bne.n	8009f2c <_printf_common+0x48>
 8009f1e:	f104 0a19 	add.w	sl, r4, #25
 8009f22:	68e3      	ldr	r3, [r4, #12]
 8009f24:	6832      	ldr	r2, [r6, #0]
 8009f26:	1a9b      	subs	r3, r3, r2
 8009f28:	42ab      	cmp	r3, r5
 8009f2a:	dc26      	bgt.n	8009f7a <_printf_common+0x96>
 8009f2c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009f30:	1e13      	subs	r3, r2, #0
 8009f32:	6822      	ldr	r2, [r4, #0]
 8009f34:	bf18      	it	ne
 8009f36:	2301      	movne	r3, #1
 8009f38:	0692      	lsls	r2, r2, #26
 8009f3a:	d42b      	bmi.n	8009f94 <_printf_common+0xb0>
 8009f3c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009f40:	4649      	mov	r1, r9
 8009f42:	4638      	mov	r0, r7
 8009f44:	47c0      	blx	r8
 8009f46:	3001      	adds	r0, #1
 8009f48:	d01e      	beq.n	8009f88 <_printf_common+0xa4>
 8009f4a:	6823      	ldr	r3, [r4, #0]
 8009f4c:	68e5      	ldr	r5, [r4, #12]
 8009f4e:	6832      	ldr	r2, [r6, #0]
 8009f50:	f003 0306 	and.w	r3, r3, #6
 8009f54:	2b04      	cmp	r3, #4
 8009f56:	bf08      	it	eq
 8009f58:	1aad      	subeq	r5, r5, r2
 8009f5a:	68a3      	ldr	r3, [r4, #8]
 8009f5c:	6922      	ldr	r2, [r4, #16]
 8009f5e:	bf0c      	ite	eq
 8009f60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009f64:	2500      	movne	r5, #0
 8009f66:	4293      	cmp	r3, r2
 8009f68:	bfc4      	itt	gt
 8009f6a:	1a9b      	subgt	r3, r3, r2
 8009f6c:	18ed      	addgt	r5, r5, r3
 8009f6e:	2600      	movs	r6, #0
 8009f70:	341a      	adds	r4, #26
 8009f72:	42b5      	cmp	r5, r6
 8009f74:	d11a      	bne.n	8009fac <_printf_common+0xc8>
 8009f76:	2000      	movs	r0, #0
 8009f78:	e008      	b.n	8009f8c <_printf_common+0xa8>
 8009f7a:	2301      	movs	r3, #1
 8009f7c:	4652      	mov	r2, sl
 8009f7e:	4649      	mov	r1, r9
 8009f80:	4638      	mov	r0, r7
 8009f82:	47c0      	blx	r8
 8009f84:	3001      	adds	r0, #1
 8009f86:	d103      	bne.n	8009f90 <_printf_common+0xac>
 8009f88:	f04f 30ff 	mov.w	r0, #4294967295
 8009f8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f90:	3501      	adds	r5, #1
 8009f92:	e7c6      	b.n	8009f22 <_printf_common+0x3e>
 8009f94:	18e1      	adds	r1, r4, r3
 8009f96:	1c5a      	adds	r2, r3, #1
 8009f98:	2030      	movs	r0, #48	; 0x30
 8009f9a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009f9e:	4422      	add	r2, r4
 8009fa0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009fa4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009fa8:	3302      	adds	r3, #2
 8009faa:	e7c7      	b.n	8009f3c <_printf_common+0x58>
 8009fac:	2301      	movs	r3, #1
 8009fae:	4622      	mov	r2, r4
 8009fb0:	4649      	mov	r1, r9
 8009fb2:	4638      	mov	r0, r7
 8009fb4:	47c0      	blx	r8
 8009fb6:	3001      	adds	r0, #1
 8009fb8:	d0e6      	beq.n	8009f88 <_printf_common+0xa4>
 8009fba:	3601      	adds	r6, #1
 8009fbc:	e7d9      	b.n	8009f72 <_printf_common+0x8e>
	...

08009fc0 <_printf_i>:
 8009fc0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009fc4:	7e0f      	ldrb	r7, [r1, #24]
 8009fc6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009fc8:	2f78      	cmp	r7, #120	; 0x78
 8009fca:	4691      	mov	r9, r2
 8009fcc:	4680      	mov	r8, r0
 8009fce:	460c      	mov	r4, r1
 8009fd0:	469a      	mov	sl, r3
 8009fd2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009fd6:	d807      	bhi.n	8009fe8 <_printf_i+0x28>
 8009fd8:	2f62      	cmp	r7, #98	; 0x62
 8009fda:	d80a      	bhi.n	8009ff2 <_printf_i+0x32>
 8009fdc:	2f00      	cmp	r7, #0
 8009fde:	f000 80d8 	beq.w	800a192 <_printf_i+0x1d2>
 8009fe2:	2f58      	cmp	r7, #88	; 0x58
 8009fe4:	f000 80a3 	beq.w	800a12e <_printf_i+0x16e>
 8009fe8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009fec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009ff0:	e03a      	b.n	800a068 <_printf_i+0xa8>
 8009ff2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009ff6:	2b15      	cmp	r3, #21
 8009ff8:	d8f6      	bhi.n	8009fe8 <_printf_i+0x28>
 8009ffa:	a101      	add	r1, pc, #4	; (adr r1, 800a000 <_printf_i+0x40>)
 8009ffc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a000:	0800a059 	.word	0x0800a059
 800a004:	0800a06d 	.word	0x0800a06d
 800a008:	08009fe9 	.word	0x08009fe9
 800a00c:	08009fe9 	.word	0x08009fe9
 800a010:	08009fe9 	.word	0x08009fe9
 800a014:	08009fe9 	.word	0x08009fe9
 800a018:	0800a06d 	.word	0x0800a06d
 800a01c:	08009fe9 	.word	0x08009fe9
 800a020:	08009fe9 	.word	0x08009fe9
 800a024:	08009fe9 	.word	0x08009fe9
 800a028:	08009fe9 	.word	0x08009fe9
 800a02c:	0800a179 	.word	0x0800a179
 800a030:	0800a09d 	.word	0x0800a09d
 800a034:	0800a15b 	.word	0x0800a15b
 800a038:	08009fe9 	.word	0x08009fe9
 800a03c:	08009fe9 	.word	0x08009fe9
 800a040:	0800a19b 	.word	0x0800a19b
 800a044:	08009fe9 	.word	0x08009fe9
 800a048:	0800a09d 	.word	0x0800a09d
 800a04c:	08009fe9 	.word	0x08009fe9
 800a050:	08009fe9 	.word	0x08009fe9
 800a054:	0800a163 	.word	0x0800a163
 800a058:	682b      	ldr	r3, [r5, #0]
 800a05a:	1d1a      	adds	r2, r3, #4
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	602a      	str	r2, [r5, #0]
 800a060:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a064:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a068:	2301      	movs	r3, #1
 800a06a:	e0a3      	b.n	800a1b4 <_printf_i+0x1f4>
 800a06c:	6820      	ldr	r0, [r4, #0]
 800a06e:	6829      	ldr	r1, [r5, #0]
 800a070:	0606      	lsls	r6, r0, #24
 800a072:	f101 0304 	add.w	r3, r1, #4
 800a076:	d50a      	bpl.n	800a08e <_printf_i+0xce>
 800a078:	680e      	ldr	r6, [r1, #0]
 800a07a:	602b      	str	r3, [r5, #0]
 800a07c:	2e00      	cmp	r6, #0
 800a07e:	da03      	bge.n	800a088 <_printf_i+0xc8>
 800a080:	232d      	movs	r3, #45	; 0x2d
 800a082:	4276      	negs	r6, r6
 800a084:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a088:	485e      	ldr	r0, [pc, #376]	; (800a204 <_printf_i+0x244>)
 800a08a:	230a      	movs	r3, #10
 800a08c:	e019      	b.n	800a0c2 <_printf_i+0x102>
 800a08e:	680e      	ldr	r6, [r1, #0]
 800a090:	602b      	str	r3, [r5, #0]
 800a092:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a096:	bf18      	it	ne
 800a098:	b236      	sxthne	r6, r6
 800a09a:	e7ef      	b.n	800a07c <_printf_i+0xbc>
 800a09c:	682b      	ldr	r3, [r5, #0]
 800a09e:	6820      	ldr	r0, [r4, #0]
 800a0a0:	1d19      	adds	r1, r3, #4
 800a0a2:	6029      	str	r1, [r5, #0]
 800a0a4:	0601      	lsls	r1, r0, #24
 800a0a6:	d501      	bpl.n	800a0ac <_printf_i+0xec>
 800a0a8:	681e      	ldr	r6, [r3, #0]
 800a0aa:	e002      	b.n	800a0b2 <_printf_i+0xf2>
 800a0ac:	0646      	lsls	r6, r0, #25
 800a0ae:	d5fb      	bpl.n	800a0a8 <_printf_i+0xe8>
 800a0b0:	881e      	ldrh	r6, [r3, #0]
 800a0b2:	4854      	ldr	r0, [pc, #336]	; (800a204 <_printf_i+0x244>)
 800a0b4:	2f6f      	cmp	r7, #111	; 0x6f
 800a0b6:	bf0c      	ite	eq
 800a0b8:	2308      	moveq	r3, #8
 800a0ba:	230a      	movne	r3, #10
 800a0bc:	2100      	movs	r1, #0
 800a0be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a0c2:	6865      	ldr	r5, [r4, #4]
 800a0c4:	60a5      	str	r5, [r4, #8]
 800a0c6:	2d00      	cmp	r5, #0
 800a0c8:	bfa2      	ittt	ge
 800a0ca:	6821      	ldrge	r1, [r4, #0]
 800a0cc:	f021 0104 	bicge.w	r1, r1, #4
 800a0d0:	6021      	strge	r1, [r4, #0]
 800a0d2:	b90e      	cbnz	r6, 800a0d8 <_printf_i+0x118>
 800a0d4:	2d00      	cmp	r5, #0
 800a0d6:	d04d      	beq.n	800a174 <_printf_i+0x1b4>
 800a0d8:	4615      	mov	r5, r2
 800a0da:	fbb6 f1f3 	udiv	r1, r6, r3
 800a0de:	fb03 6711 	mls	r7, r3, r1, r6
 800a0e2:	5dc7      	ldrb	r7, [r0, r7]
 800a0e4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a0e8:	4637      	mov	r7, r6
 800a0ea:	42bb      	cmp	r3, r7
 800a0ec:	460e      	mov	r6, r1
 800a0ee:	d9f4      	bls.n	800a0da <_printf_i+0x11a>
 800a0f0:	2b08      	cmp	r3, #8
 800a0f2:	d10b      	bne.n	800a10c <_printf_i+0x14c>
 800a0f4:	6823      	ldr	r3, [r4, #0]
 800a0f6:	07de      	lsls	r6, r3, #31
 800a0f8:	d508      	bpl.n	800a10c <_printf_i+0x14c>
 800a0fa:	6923      	ldr	r3, [r4, #16]
 800a0fc:	6861      	ldr	r1, [r4, #4]
 800a0fe:	4299      	cmp	r1, r3
 800a100:	bfde      	ittt	le
 800a102:	2330      	movle	r3, #48	; 0x30
 800a104:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a108:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a10c:	1b52      	subs	r2, r2, r5
 800a10e:	6122      	str	r2, [r4, #16]
 800a110:	f8cd a000 	str.w	sl, [sp]
 800a114:	464b      	mov	r3, r9
 800a116:	aa03      	add	r2, sp, #12
 800a118:	4621      	mov	r1, r4
 800a11a:	4640      	mov	r0, r8
 800a11c:	f7ff fee2 	bl	8009ee4 <_printf_common>
 800a120:	3001      	adds	r0, #1
 800a122:	d14c      	bne.n	800a1be <_printf_i+0x1fe>
 800a124:	f04f 30ff 	mov.w	r0, #4294967295
 800a128:	b004      	add	sp, #16
 800a12a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a12e:	4835      	ldr	r0, [pc, #212]	; (800a204 <_printf_i+0x244>)
 800a130:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a134:	6829      	ldr	r1, [r5, #0]
 800a136:	6823      	ldr	r3, [r4, #0]
 800a138:	f851 6b04 	ldr.w	r6, [r1], #4
 800a13c:	6029      	str	r1, [r5, #0]
 800a13e:	061d      	lsls	r5, r3, #24
 800a140:	d514      	bpl.n	800a16c <_printf_i+0x1ac>
 800a142:	07df      	lsls	r7, r3, #31
 800a144:	bf44      	itt	mi
 800a146:	f043 0320 	orrmi.w	r3, r3, #32
 800a14a:	6023      	strmi	r3, [r4, #0]
 800a14c:	b91e      	cbnz	r6, 800a156 <_printf_i+0x196>
 800a14e:	6823      	ldr	r3, [r4, #0]
 800a150:	f023 0320 	bic.w	r3, r3, #32
 800a154:	6023      	str	r3, [r4, #0]
 800a156:	2310      	movs	r3, #16
 800a158:	e7b0      	b.n	800a0bc <_printf_i+0xfc>
 800a15a:	6823      	ldr	r3, [r4, #0]
 800a15c:	f043 0320 	orr.w	r3, r3, #32
 800a160:	6023      	str	r3, [r4, #0]
 800a162:	2378      	movs	r3, #120	; 0x78
 800a164:	4828      	ldr	r0, [pc, #160]	; (800a208 <_printf_i+0x248>)
 800a166:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a16a:	e7e3      	b.n	800a134 <_printf_i+0x174>
 800a16c:	0659      	lsls	r1, r3, #25
 800a16e:	bf48      	it	mi
 800a170:	b2b6      	uxthmi	r6, r6
 800a172:	e7e6      	b.n	800a142 <_printf_i+0x182>
 800a174:	4615      	mov	r5, r2
 800a176:	e7bb      	b.n	800a0f0 <_printf_i+0x130>
 800a178:	682b      	ldr	r3, [r5, #0]
 800a17a:	6826      	ldr	r6, [r4, #0]
 800a17c:	6961      	ldr	r1, [r4, #20]
 800a17e:	1d18      	adds	r0, r3, #4
 800a180:	6028      	str	r0, [r5, #0]
 800a182:	0635      	lsls	r5, r6, #24
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	d501      	bpl.n	800a18c <_printf_i+0x1cc>
 800a188:	6019      	str	r1, [r3, #0]
 800a18a:	e002      	b.n	800a192 <_printf_i+0x1d2>
 800a18c:	0670      	lsls	r0, r6, #25
 800a18e:	d5fb      	bpl.n	800a188 <_printf_i+0x1c8>
 800a190:	8019      	strh	r1, [r3, #0]
 800a192:	2300      	movs	r3, #0
 800a194:	6123      	str	r3, [r4, #16]
 800a196:	4615      	mov	r5, r2
 800a198:	e7ba      	b.n	800a110 <_printf_i+0x150>
 800a19a:	682b      	ldr	r3, [r5, #0]
 800a19c:	1d1a      	adds	r2, r3, #4
 800a19e:	602a      	str	r2, [r5, #0]
 800a1a0:	681d      	ldr	r5, [r3, #0]
 800a1a2:	6862      	ldr	r2, [r4, #4]
 800a1a4:	2100      	movs	r1, #0
 800a1a6:	4628      	mov	r0, r5
 800a1a8:	f7f6 f83a 	bl	8000220 <memchr>
 800a1ac:	b108      	cbz	r0, 800a1b2 <_printf_i+0x1f2>
 800a1ae:	1b40      	subs	r0, r0, r5
 800a1b0:	6060      	str	r0, [r4, #4]
 800a1b2:	6863      	ldr	r3, [r4, #4]
 800a1b4:	6123      	str	r3, [r4, #16]
 800a1b6:	2300      	movs	r3, #0
 800a1b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a1bc:	e7a8      	b.n	800a110 <_printf_i+0x150>
 800a1be:	6923      	ldr	r3, [r4, #16]
 800a1c0:	462a      	mov	r2, r5
 800a1c2:	4649      	mov	r1, r9
 800a1c4:	4640      	mov	r0, r8
 800a1c6:	47d0      	blx	sl
 800a1c8:	3001      	adds	r0, #1
 800a1ca:	d0ab      	beq.n	800a124 <_printf_i+0x164>
 800a1cc:	6823      	ldr	r3, [r4, #0]
 800a1ce:	079b      	lsls	r3, r3, #30
 800a1d0:	d413      	bmi.n	800a1fa <_printf_i+0x23a>
 800a1d2:	68e0      	ldr	r0, [r4, #12]
 800a1d4:	9b03      	ldr	r3, [sp, #12]
 800a1d6:	4298      	cmp	r0, r3
 800a1d8:	bfb8      	it	lt
 800a1da:	4618      	movlt	r0, r3
 800a1dc:	e7a4      	b.n	800a128 <_printf_i+0x168>
 800a1de:	2301      	movs	r3, #1
 800a1e0:	4632      	mov	r2, r6
 800a1e2:	4649      	mov	r1, r9
 800a1e4:	4640      	mov	r0, r8
 800a1e6:	47d0      	blx	sl
 800a1e8:	3001      	adds	r0, #1
 800a1ea:	d09b      	beq.n	800a124 <_printf_i+0x164>
 800a1ec:	3501      	adds	r5, #1
 800a1ee:	68e3      	ldr	r3, [r4, #12]
 800a1f0:	9903      	ldr	r1, [sp, #12]
 800a1f2:	1a5b      	subs	r3, r3, r1
 800a1f4:	42ab      	cmp	r3, r5
 800a1f6:	dcf2      	bgt.n	800a1de <_printf_i+0x21e>
 800a1f8:	e7eb      	b.n	800a1d2 <_printf_i+0x212>
 800a1fa:	2500      	movs	r5, #0
 800a1fc:	f104 0619 	add.w	r6, r4, #25
 800a200:	e7f5      	b.n	800a1ee <_printf_i+0x22e>
 800a202:	bf00      	nop
 800a204:	0802296c 	.word	0x0802296c
 800a208:	0802297d 	.word	0x0802297d

0800a20c <srand>:
 800a20c:	b538      	push	{r3, r4, r5, lr}
 800a20e:	4b10      	ldr	r3, [pc, #64]	; (800a250 <srand+0x44>)
 800a210:	681d      	ldr	r5, [r3, #0]
 800a212:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800a214:	4604      	mov	r4, r0
 800a216:	b9b3      	cbnz	r3, 800a246 <srand+0x3a>
 800a218:	2018      	movs	r0, #24
 800a21a:	f7fa f993 	bl	8004544 <__wrap_malloc>
 800a21e:	4602      	mov	r2, r0
 800a220:	63a8      	str	r0, [r5, #56]	; 0x38
 800a222:	b920      	cbnz	r0, 800a22e <srand+0x22>
 800a224:	4b0b      	ldr	r3, [pc, #44]	; (800a254 <srand+0x48>)
 800a226:	480c      	ldr	r0, [pc, #48]	; (800a258 <srand+0x4c>)
 800a228:	2142      	movs	r1, #66	; 0x42
 800a22a:	f000 f8d5 	bl	800a3d8 <__assert_func>
 800a22e:	490b      	ldr	r1, [pc, #44]	; (800a25c <srand+0x50>)
 800a230:	4b0b      	ldr	r3, [pc, #44]	; (800a260 <srand+0x54>)
 800a232:	e9c0 1300 	strd	r1, r3, [r0]
 800a236:	4b0b      	ldr	r3, [pc, #44]	; (800a264 <srand+0x58>)
 800a238:	6083      	str	r3, [r0, #8]
 800a23a:	230b      	movs	r3, #11
 800a23c:	8183      	strh	r3, [r0, #12]
 800a23e:	2100      	movs	r1, #0
 800a240:	2001      	movs	r0, #1
 800a242:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800a246:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800a248:	2200      	movs	r2, #0
 800a24a:	611c      	str	r4, [r3, #16]
 800a24c:	615a      	str	r2, [r3, #20]
 800a24e:	bd38      	pop	{r3, r4, r5, pc}
 800a250:	2000113c 	.word	0x2000113c
 800a254:	0802298e 	.word	0x0802298e
 800a258:	080229a5 	.word	0x080229a5
 800a25c:	abcd330e 	.word	0xabcd330e
 800a260:	e66d1234 	.word	0xe66d1234
 800a264:	0005deec 	.word	0x0005deec

0800a268 <rand>:
 800a268:	4b16      	ldr	r3, [pc, #88]	; (800a2c4 <rand+0x5c>)
 800a26a:	b510      	push	{r4, lr}
 800a26c:	681c      	ldr	r4, [r3, #0]
 800a26e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a270:	b9b3      	cbnz	r3, 800a2a0 <rand+0x38>
 800a272:	2018      	movs	r0, #24
 800a274:	f7fa f966 	bl	8004544 <__wrap_malloc>
 800a278:	63a0      	str	r0, [r4, #56]	; 0x38
 800a27a:	b928      	cbnz	r0, 800a288 <rand+0x20>
 800a27c:	4602      	mov	r2, r0
 800a27e:	4b12      	ldr	r3, [pc, #72]	; (800a2c8 <rand+0x60>)
 800a280:	4812      	ldr	r0, [pc, #72]	; (800a2cc <rand+0x64>)
 800a282:	214e      	movs	r1, #78	; 0x4e
 800a284:	f000 f8a8 	bl	800a3d8 <__assert_func>
 800a288:	4a11      	ldr	r2, [pc, #68]	; (800a2d0 <rand+0x68>)
 800a28a:	4b12      	ldr	r3, [pc, #72]	; (800a2d4 <rand+0x6c>)
 800a28c:	e9c0 2300 	strd	r2, r3, [r0]
 800a290:	4b11      	ldr	r3, [pc, #68]	; (800a2d8 <rand+0x70>)
 800a292:	6083      	str	r3, [r0, #8]
 800a294:	230b      	movs	r3, #11
 800a296:	8183      	strh	r3, [r0, #12]
 800a298:	2201      	movs	r2, #1
 800a29a:	2300      	movs	r3, #0
 800a29c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800a2a0:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800a2a2:	4a0e      	ldr	r2, [pc, #56]	; (800a2dc <rand+0x74>)
 800a2a4:	6920      	ldr	r0, [r4, #16]
 800a2a6:	6963      	ldr	r3, [r4, #20]
 800a2a8:	490d      	ldr	r1, [pc, #52]	; (800a2e0 <rand+0x78>)
 800a2aa:	4342      	muls	r2, r0
 800a2ac:	fb01 2203 	mla	r2, r1, r3, r2
 800a2b0:	fba0 0101 	umull	r0, r1, r0, r1
 800a2b4:	1c43      	adds	r3, r0, #1
 800a2b6:	eb42 0001 	adc.w	r0, r2, r1
 800a2ba:	e9c4 3004 	strd	r3, r0, [r4, #16]
 800a2be:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800a2c2:	bd10      	pop	{r4, pc}
 800a2c4:	2000113c 	.word	0x2000113c
 800a2c8:	0802298e 	.word	0x0802298e
 800a2cc:	080229a5 	.word	0x080229a5
 800a2d0:	abcd330e 	.word	0xabcd330e
 800a2d4:	e66d1234 	.word	0xe66d1234
 800a2d8:	0005deec 	.word	0x0005deec
 800a2dc:	5851f42d 	.word	0x5851f42d
 800a2e0:	4c957f2d 	.word	0x4c957f2d

0800a2e4 <_sbrk_r>:
 800a2e4:	b538      	push	{r3, r4, r5, lr}
 800a2e6:	4d06      	ldr	r5, [pc, #24]	; (800a300 <_sbrk_r+0x1c>)
 800a2e8:	2300      	movs	r3, #0
 800a2ea:	4604      	mov	r4, r0
 800a2ec:	4608      	mov	r0, r1
 800a2ee:	602b      	str	r3, [r5, #0]
 800a2f0:	f7f7 fb3a 	bl	8001968 <_sbrk>
 800a2f4:	1c43      	adds	r3, r0, #1
 800a2f6:	d102      	bne.n	800a2fe <_sbrk_r+0x1a>
 800a2f8:	682b      	ldr	r3, [r5, #0]
 800a2fa:	b103      	cbz	r3, 800a2fe <_sbrk_r+0x1a>
 800a2fc:	6023      	str	r3, [r4, #0]
 800a2fe:	bd38      	pop	{r3, r4, r5, pc}
 800a300:	2000167c 	.word	0x2000167c

0800a304 <__sread>:
 800a304:	b510      	push	{r4, lr}
 800a306:	460c      	mov	r4, r1
 800a308:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a30c:	f001 fc36 	bl	800bb7c <_read_r>
 800a310:	2800      	cmp	r0, #0
 800a312:	bfab      	itete	ge
 800a314:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a316:	89a3      	ldrhlt	r3, [r4, #12]
 800a318:	181b      	addge	r3, r3, r0
 800a31a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a31e:	bfac      	ite	ge
 800a320:	6563      	strge	r3, [r4, #84]	; 0x54
 800a322:	81a3      	strhlt	r3, [r4, #12]
 800a324:	bd10      	pop	{r4, pc}

0800a326 <__swrite>:
 800a326:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a32a:	461f      	mov	r7, r3
 800a32c:	898b      	ldrh	r3, [r1, #12]
 800a32e:	05db      	lsls	r3, r3, #23
 800a330:	4605      	mov	r5, r0
 800a332:	460c      	mov	r4, r1
 800a334:	4616      	mov	r6, r2
 800a336:	d505      	bpl.n	800a344 <__swrite+0x1e>
 800a338:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a33c:	2302      	movs	r3, #2
 800a33e:	2200      	movs	r2, #0
 800a340:	f000 ff0a 	bl	800b158 <_lseek_r>
 800a344:	89a3      	ldrh	r3, [r4, #12]
 800a346:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a34a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a34e:	81a3      	strh	r3, [r4, #12]
 800a350:	4632      	mov	r2, r6
 800a352:	463b      	mov	r3, r7
 800a354:	4628      	mov	r0, r5
 800a356:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a35a:	f000 b82b 	b.w	800a3b4 <_write_r>

0800a35e <__sseek>:
 800a35e:	b510      	push	{r4, lr}
 800a360:	460c      	mov	r4, r1
 800a362:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a366:	f000 fef7 	bl	800b158 <_lseek_r>
 800a36a:	1c43      	adds	r3, r0, #1
 800a36c:	89a3      	ldrh	r3, [r4, #12]
 800a36e:	bf15      	itete	ne
 800a370:	6560      	strne	r0, [r4, #84]	; 0x54
 800a372:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a376:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a37a:	81a3      	strheq	r3, [r4, #12]
 800a37c:	bf18      	it	ne
 800a37e:	81a3      	strhne	r3, [r4, #12]
 800a380:	bd10      	pop	{r4, pc}

0800a382 <__sclose>:
 800a382:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a386:	f000 b845 	b.w	800a414 <_close_r>

0800a38a <strncmp>:
 800a38a:	b510      	push	{r4, lr}
 800a38c:	b17a      	cbz	r2, 800a3ae <strncmp+0x24>
 800a38e:	4603      	mov	r3, r0
 800a390:	3901      	subs	r1, #1
 800a392:	1884      	adds	r4, r0, r2
 800a394:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a398:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a39c:	4290      	cmp	r0, r2
 800a39e:	d101      	bne.n	800a3a4 <strncmp+0x1a>
 800a3a0:	42a3      	cmp	r3, r4
 800a3a2:	d101      	bne.n	800a3a8 <strncmp+0x1e>
 800a3a4:	1a80      	subs	r0, r0, r2
 800a3a6:	bd10      	pop	{r4, pc}
 800a3a8:	2800      	cmp	r0, #0
 800a3aa:	d1f3      	bne.n	800a394 <strncmp+0xa>
 800a3ac:	e7fa      	b.n	800a3a4 <strncmp+0x1a>
 800a3ae:	4610      	mov	r0, r2
 800a3b0:	e7f9      	b.n	800a3a6 <strncmp+0x1c>
	...

0800a3b4 <_write_r>:
 800a3b4:	b538      	push	{r3, r4, r5, lr}
 800a3b6:	4d07      	ldr	r5, [pc, #28]	; (800a3d4 <_write_r+0x20>)
 800a3b8:	4604      	mov	r4, r0
 800a3ba:	4608      	mov	r0, r1
 800a3bc:	4611      	mov	r1, r2
 800a3be:	2200      	movs	r2, #0
 800a3c0:	602a      	str	r2, [r5, #0]
 800a3c2:	461a      	mov	r2, r3
 800a3c4:	f7fa f88c 	bl	80044e0 <_write>
 800a3c8:	1c43      	adds	r3, r0, #1
 800a3ca:	d102      	bne.n	800a3d2 <_write_r+0x1e>
 800a3cc:	682b      	ldr	r3, [r5, #0]
 800a3ce:	b103      	cbz	r3, 800a3d2 <_write_r+0x1e>
 800a3d0:	6023      	str	r3, [r4, #0]
 800a3d2:	bd38      	pop	{r3, r4, r5, pc}
 800a3d4:	2000167c 	.word	0x2000167c

0800a3d8 <__assert_func>:
 800a3d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a3da:	4614      	mov	r4, r2
 800a3dc:	461a      	mov	r2, r3
 800a3de:	4b09      	ldr	r3, [pc, #36]	; (800a404 <__assert_func+0x2c>)
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	4605      	mov	r5, r0
 800a3e4:	68d8      	ldr	r0, [r3, #12]
 800a3e6:	b14c      	cbz	r4, 800a3fc <__assert_func+0x24>
 800a3e8:	4b07      	ldr	r3, [pc, #28]	; (800a408 <__assert_func+0x30>)
 800a3ea:	9100      	str	r1, [sp, #0]
 800a3ec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a3f0:	4906      	ldr	r1, [pc, #24]	; (800a40c <__assert_func+0x34>)
 800a3f2:	462b      	mov	r3, r5
 800a3f4:	f000 fe9a 	bl	800b12c <fiprintf>
 800a3f8:	f001 fc92 	bl	800bd20 <abort>
 800a3fc:	4b04      	ldr	r3, [pc, #16]	; (800a410 <__assert_func+0x38>)
 800a3fe:	461c      	mov	r4, r3
 800a400:	e7f3      	b.n	800a3ea <__assert_func+0x12>
 800a402:	bf00      	nop
 800a404:	2000113c 	.word	0x2000113c
 800a408:	08022a00 	.word	0x08022a00
 800a40c:	08022a0d 	.word	0x08022a0d
 800a410:	08022a3b 	.word	0x08022a3b

0800a414 <_close_r>:
 800a414:	b538      	push	{r3, r4, r5, lr}
 800a416:	4d06      	ldr	r5, [pc, #24]	; (800a430 <_close_r+0x1c>)
 800a418:	2300      	movs	r3, #0
 800a41a:	4604      	mov	r4, r0
 800a41c:	4608      	mov	r0, r1
 800a41e:	602b      	str	r3, [r5, #0]
 800a420:	f7f7 fa96 	bl	8001950 <_close>
 800a424:	1c43      	adds	r3, r0, #1
 800a426:	d102      	bne.n	800a42e <_close_r+0x1a>
 800a428:	682b      	ldr	r3, [r5, #0]
 800a42a:	b103      	cbz	r3, 800a42e <_close_r+0x1a>
 800a42c:	6023      	str	r3, [r4, #0]
 800a42e:	bd38      	pop	{r3, r4, r5, pc}
 800a430:	2000167c 	.word	0x2000167c

0800a434 <quorem>:
 800a434:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a438:	6903      	ldr	r3, [r0, #16]
 800a43a:	690c      	ldr	r4, [r1, #16]
 800a43c:	42a3      	cmp	r3, r4
 800a43e:	4607      	mov	r7, r0
 800a440:	f2c0 8081 	blt.w	800a546 <quorem+0x112>
 800a444:	3c01      	subs	r4, #1
 800a446:	f101 0814 	add.w	r8, r1, #20
 800a44a:	f100 0514 	add.w	r5, r0, #20
 800a44e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a452:	9301      	str	r3, [sp, #4]
 800a454:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a458:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a45c:	3301      	adds	r3, #1
 800a45e:	429a      	cmp	r2, r3
 800a460:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a464:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a468:	fbb2 f6f3 	udiv	r6, r2, r3
 800a46c:	d331      	bcc.n	800a4d2 <quorem+0x9e>
 800a46e:	f04f 0e00 	mov.w	lr, #0
 800a472:	4640      	mov	r0, r8
 800a474:	46ac      	mov	ip, r5
 800a476:	46f2      	mov	sl, lr
 800a478:	f850 2b04 	ldr.w	r2, [r0], #4
 800a47c:	b293      	uxth	r3, r2
 800a47e:	fb06 e303 	mla	r3, r6, r3, lr
 800a482:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a486:	b29b      	uxth	r3, r3
 800a488:	ebaa 0303 	sub.w	r3, sl, r3
 800a48c:	f8dc a000 	ldr.w	sl, [ip]
 800a490:	0c12      	lsrs	r2, r2, #16
 800a492:	fa13 f38a 	uxtah	r3, r3, sl
 800a496:	fb06 e202 	mla	r2, r6, r2, lr
 800a49a:	9300      	str	r3, [sp, #0]
 800a49c:	9b00      	ldr	r3, [sp, #0]
 800a49e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a4a2:	b292      	uxth	r2, r2
 800a4a4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a4a8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a4ac:	f8bd 3000 	ldrh.w	r3, [sp]
 800a4b0:	4581      	cmp	r9, r0
 800a4b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a4b6:	f84c 3b04 	str.w	r3, [ip], #4
 800a4ba:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a4be:	d2db      	bcs.n	800a478 <quorem+0x44>
 800a4c0:	f855 300b 	ldr.w	r3, [r5, fp]
 800a4c4:	b92b      	cbnz	r3, 800a4d2 <quorem+0x9e>
 800a4c6:	9b01      	ldr	r3, [sp, #4]
 800a4c8:	3b04      	subs	r3, #4
 800a4ca:	429d      	cmp	r5, r3
 800a4cc:	461a      	mov	r2, r3
 800a4ce:	d32e      	bcc.n	800a52e <quorem+0xfa>
 800a4d0:	613c      	str	r4, [r7, #16]
 800a4d2:	4638      	mov	r0, r7
 800a4d4:	f001 f8e0 	bl	800b698 <__mcmp>
 800a4d8:	2800      	cmp	r0, #0
 800a4da:	db24      	blt.n	800a526 <quorem+0xf2>
 800a4dc:	3601      	adds	r6, #1
 800a4de:	4628      	mov	r0, r5
 800a4e0:	f04f 0c00 	mov.w	ip, #0
 800a4e4:	f858 2b04 	ldr.w	r2, [r8], #4
 800a4e8:	f8d0 e000 	ldr.w	lr, [r0]
 800a4ec:	b293      	uxth	r3, r2
 800a4ee:	ebac 0303 	sub.w	r3, ip, r3
 800a4f2:	0c12      	lsrs	r2, r2, #16
 800a4f4:	fa13 f38e 	uxtah	r3, r3, lr
 800a4f8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a4fc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a500:	b29b      	uxth	r3, r3
 800a502:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a506:	45c1      	cmp	r9, r8
 800a508:	f840 3b04 	str.w	r3, [r0], #4
 800a50c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a510:	d2e8      	bcs.n	800a4e4 <quorem+0xb0>
 800a512:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a516:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a51a:	b922      	cbnz	r2, 800a526 <quorem+0xf2>
 800a51c:	3b04      	subs	r3, #4
 800a51e:	429d      	cmp	r5, r3
 800a520:	461a      	mov	r2, r3
 800a522:	d30a      	bcc.n	800a53a <quorem+0x106>
 800a524:	613c      	str	r4, [r7, #16]
 800a526:	4630      	mov	r0, r6
 800a528:	b003      	add	sp, #12
 800a52a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a52e:	6812      	ldr	r2, [r2, #0]
 800a530:	3b04      	subs	r3, #4
 800a532:	2a00      	cmp	r2, #0
 800a534:	d1cc      	bne.n	800a4d0 <quorem+0x9c>
 800a536:	3c01      	subs	r4, #1
 800a538:	e7c7      	b.n	800a4ca <quorem+0x96>
 800a53a:	6812      	ldr	r2, [r2, #0]
 800a53c:	3b04      	subs	r3, #4
 800a53e:	2a00      	cmp	r2, #0
 800a540:	d1f0      	bne.n	800a524 <quorem+0xf0>
 800a542:	3c01      	subs	r4, #1
 800a544:	e7eb      	b.n	800a51e <quorem+0xea>
 800a546:	2000      	movs	r0, #0
 800a548:	e7ee      	b.n	800a528 <quorem+0xf4>
 800a54a:	0000      	movs	r0, r0
 800a54c:	0000      	movs	r0, r0
	...

0800a550 <_dtoa_r>:
 800a550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a554:	ed2d 8b04 	vpush	{d8-d9}
 800a558:	ec57 6b10 	vmov	r6, r7, d0
 800a55c:	b093      	sub	sp, #76	; 0x4c
 800a55e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a560:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a564:	9106      	str	r1, [sp, #24]
 800a566:	ee10 aa10 	vmov	sl, s0
 800a56a:	4604      	mov	r4, r0
 800a56c:	9209      	str	r2, [sp, #36]	; 0x24
 800a56e:	930c      	str	r3, [sp, #48]	; 0x30
 800a570:	46bb      	mov	fp, r7
 800a572:	b975      	cbnz	r5, 800a592 <_dtoa_r+0x42>
 800a574:	2010      	movs	r0, #16
 800a576:	f7f9 ffe5 	bl	8004544 <__wrap_malloc>
 800a57a:	4602      	mov	r2, r0
 800a57c:	6260      	str	r0, [r4, #36]	; 0x24
 800a57e:	b920      	cbnz	r0, 800a58a <_dtoa_r+0x3a>
 800a580:	4ba7      	ldr	r3, [pc, #668]	; (800a820 <_dtoa_r+0x2d0>)
 800a582:	21ea      	movs	r1, #234	; 0xea
 800a584:	48a7      	ldr	r0, [pc, #668]	; (800a824 <_dtoa_r+0x2d4>)
 800a586:	f7ff ff27 	bl	800a3d8 <__assert_func>
 800a58a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a58e:	6005      	str	r5, [r0, #0]
 800a590:	60c5      	str	r5, [r0, #12]
 800a592:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a594:	6819      	ldr	r1, [r3, #0]
 800a596:	b151      	cbz	r1, 800a5ae <_dtoa_r+0x5e>
 800a598:	685a      	ldr	r2, [r3, #4]
 800a59a:	604a      	str	r2, [r1, #4]
 800a59c:	2301      	movs	r3, #1
 800a59e:	4093      	lsls	r3, r2
 800a5a0:	608b      	str	r3, [r1, #8]
 800a5a2:	4620      	mov	r0, r4
 800a5a4:	f000 fe36 	bl	800b214 <_Bfree>
 800a5a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a5aa:	2200      	movs	r2, #0
 800a5ac:	601a      	str	r2, [r3, #0]
 800a5ae:	1e3b      	subs	r3, r7, #0
 800a5b0:	bfaa      	itet	ge
 800a5b2:	2300      	movge	r3, #0
 800a5b4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800a5b8:	f8c8 3000 	strge.w	r3, [r8]
 800a5bc:	4b9a      	ldr	r3, [pc, #616]	; (800a828 <_dtoa_r+0x2d8>)
 800a5be:	bfbc      	itt	lt
 800a5c0:	2201      	movlt	r2, #1
 800a5c2:	f8c8 2000 	strlt.w	r2, [r8]
 800a5c6:	ea33 030b 	bics.w	r3, r3, fp
 800a5ca:	d11b      	bne.n	800a604 <_dtoa_r+0xb4>
 800a5cc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a5ce:	f242 730f 	movw	r3, #9999	; 0x270f
 800a5d2:	6013      	str	r3, [r2, #0]
 800a5d4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a5d8:	4333      	orrs	r3, r6
 800a5da:	f000 8592 	beq.w	800b102 <_dtoa_r+0xbb2>
 800a5de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a5e0:	b963      	cbnz	r3, 800a5fc <_dtoa_r+0xac>
 800a5e2:	4b92      	ldr	r3, [pc, #584]	; (800a82c <_dtoa_r+0x2dc>)
 800a5e4:	e022      	b.n	800a62c <_dtoa_r+0xdc>
 800a5e6:	4b92      	ldr	r3, [pc, #584]	; (800a830 <_dtoa_r+0x2e0>)
 800a5e8:	9301      	str	r3, [sp, #4]
 800a5ea:	3308      	adds	r3, #8
 800a5ec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a5ee:	6013      	str	r3, [r2, #0]
 800a5f0:	9801      	ldr	r0, [sp, #4]
 800a5f2:	b013      	add	sp, #76	; 0x4c
 800a5f4:	ecbd 8b04 	vpop	{d8-d9}
 800a5f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5fc:	4b8b      	ldr	r3, [pc, #556]	; (800a82c <_dtoa_r+0x2dc>)
 800a5fe:	9301      	str	r3, [sp, #4]
 800a600:	3303      	adds	r3, #3
 800a602:	e7f3      	b.n	800a5ec <_dtoa_r+0x9c>
 800a604:	2200      	movs	r2, #0
 800a606:	2300      	movs	r3, #0
 800a608:	4650      	mov	r0, sl
 800a60a:	4659      	mov	r1, fp
 800a60c:	f7f6 fa7c 	bl	8000b08 <__aeabi_dcmpeq>
 800a610:	ec4b ab19 	vmov	d9, sl, fp
 800a614:	4680      	mov	r8, r0
 800a616:	b158      	cbz	r0, 800a630 <_dtoa_r+0xe0>
 800a618:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a61a:	2301      	movs	r3, #1
 800a61c:	6013      	str	r3, [r2, #0]
 800a61e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a620:	2b00      	cmp	r3, #0
 800a622:	f000 856b 	beq.w	800b0fc <_dtoa_r+0xbac>
 800a626:	4883      	ldr	r0, [pc, #524]	; (800a834 <_dtoa_r+0x2e4>)
 800a628:	6018      	str	r0, [r3, #0]
 800a62a:	1e43      	subs	r3, r0, #1
 800a62c:	9301      	str	r3, [sp, #4]
 800a62e:	e7df      	b.n	800a5f0 <_dtoa_r+0xa0>
 800a630:	ec4b ab10 	vmov	d0, sl, fp
 800a634:	aa10      	add	r2, sp, #64	; 0x40
 800a636:	a911      	add	r1, sp, #68	; 0x44
 800a638:	4620      	mov	r0, r4
 800a63a:	f001 f8d3 	bl	800b7e4 <__d2b>
 800a63e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800a642:	ee08 0a10 	vmov	s16, r0
 800a646:	2d00      	cmp	r5, #0
 800a648:	f000 8084 	beq.w	800a754 <_dtoa_r+0x204>
 800a64c:	ee19 3a90 	vmov	r3, s19
 800a650:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a654:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a658:	4656      	mov	r6, sl
 800a65a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a65e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a662:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800a666:	4b74      	ldr	r3, [pc, #464]	; (800a838 <_dtoa_r+0x2e8>)
 800a668:	2200      	movs	r2, #0
 800a66a:	4630      	mov	r0, r6
 800a66c:	4639      	mov	r1, r7
 800a66e:	f7f5 fe2b 	bl	80002c8 <__aeabi_dsub>
 800a672:	a365      	add	r3, pc, #404	; (adr r3, 800a808 <_dtoa_r+0x2b8>)
 800a674:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a678:	f7f5 ffde 	bl	8000638 <__aeabi_dmul>
 800a67c:	a364      	add	r3, pc, #400	; (adr r3, 800a810 <_dtoa_r+0x2c0>)
 800a67e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a682:	f7f5 fe23 	bl	80002cc <__adddf3>
 800a686:	4606      	mov	r6, r0
 800a688:	4628      	mov	r0, r5
 800a68a:	460f      	mov	r7, r1
 800a68c:	f7f5 ff6a 	bl	8000564 <__aeabi_i2d>
 800a690:	a361      	add	r3, pc, #388	; (adr r3, 800a818 <_dtoa_r+0x2c8>)
 800a692:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a696:	f7f5 ffcf 	bl	8000638 <__aeabi_dmul>
 800a69a:	4602      	mov	r2, r0
 800a69c:	460b      	mov	r3, r1
 800a69e:	4630      	mov	r0, r6
 800a6a0:	4639      	mov	r1, r7
 800a6a2:	f7f5 fe13 	bl	80002cc <__adddf3>
 800a6a6:	4606      	mov	r6, r0
 800a6a8:	460f      	mov	r7, r1
 800a6aa:	f7f6 fa75 	bl	8000b98 <__aeabi_d2iz>
 800a6ae:	2200      	movs	r2, #0
 800a6b0:	9000      	str	r0, [sp, #0]
 800a6b2:	2300      	movs	r3, #0
 800a6b4:	4630      	mov	r0, r6
 800a6b6:	4639      	mov	r1, r7
 800a6b8:	f7f6 fa30 	bl	8000b1c <__aeabi_dcmplt>
 800a6bc:	b150      	cbz	r0, 800a6d4 <_dtoa_r+0x184>
 800a6be:	9800      	ldr	r0, [sp, #0]
 800a6c0:	f7f5 ff50 	bl	8000564 <__aeabi_i2d>
 800a6c4:	4632      	mov	r2, r6
 800a6c6:	463b      	mov	r3, r7
 800a6c8:	f7f6 fa1e 	bl	8000b08 <__aeabi_dcmpeq>
 800a6cc:	b910      	cbnz	r0, 800a6d4 <_dtoa_r+0x184>
 800a6ce:	9b00      	ldr	r3, [sp, #0]
 800a6d0:	3b01      	subs	r3, #1
 800a6d2:	9300      	str	r3, [sp, #0]
 800a6d4:	9b00      	ldr	r3, [sp, #0]
 800a6d6:	2b16      	cmp	r3, #22
 800a6d8:	d85a      	bhi.n	800a790 <_dtoa_r+0x240>
 800a6da:	9a00      	ldr	r2, [sp, #0]
 800a6dc:	4b57      	ldr	r3, [pc, #348]	; (800a83c <_dtoa_r+0x2ec>)
 800a6de:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a6e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6e6:	ec51 0b19 	vmov	r0, r1, d9
 800a6ea:	f7f6 fa17 	bl	8000b1c <__aeabi_dcmplt>
 800a6ee:	2800      	cmp	r0, #0
 800a6f0:	d050      	beq.n	800a794 <_dtoa_r+0x244>
 800a6f2:	9b00      	ldr	r3, [sp, #0]
 800a6f4:	3b01      	subs	r3, #1
 800a6f6:	9300      	str	r3, [sp, #0]
 800a6f8:	2300      	movs	r3, #0
 800a6fa:	930b      	str	r3, [sp, #44]	; 0x2c
 800a6fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a6fe:	1b5d      	subs	r5, r3, r5
 800a700:	1e6b      	subs	r3, r5, #1
 800a702:	9305      	str	r3, [sp, #20]
 800a704:	bf45      	ittet	mi
 800a706:	f1c5 0301 	rsbmi	r3, r5, #1
 800a70a:	9304      	strmi	r3, [sp, #16]
 800a70c:	2300      	movpl	r3, #0
 800a70e:	2300      	movmi	r3, #0
 800a710:	bf4c      	ite	mi
 800a712:	9305      	strmi	r3, [sp, #20]
 800a714:	9304      	strpl	r3, [sp, #16]
 800a716:	9b00      	ldr	r3, [sp, #0]
 800a718:	2b00      	cmp	r3, #0
 800a71a:	db3d      	blt.n	800a798 <_dtoa_r+0x248>
 800a71c:	9b05      	ldr	r3, [sp, #20]
 800a71e:	9a00      	ldr	r2, [sp, #0]
 800a720:	920a      	str	r2, [sp, #40]	; 0x28
 800a722:	4413      	add	r3, r2
 800a724:	9305      	str	r3, [sp, #20]
 800a726:	2300      	movs	r3, #0
 800a728:	9307      	str	r3, [sp, #28]
 800a72a:	9b06      	ldr	r3, [sp, #24]
 800a72c:	2b09      	cmp	r3, #9
 800a72e:	f200 8089 	bhi.w	800a844 <_dtoa_r+0x2f4>
 800a732:	2b05      	cmp	r3, #5
 800a734:	bfc4      	itt	gt
 800a736:	3b04      	subgt	r3, #4
 800a738:	9306      	strgt	r3, [sp, #24]
 800a73a:	9b06      	ldr	r3, [sp, #24]
 800a73c:	f1a3 0302 	sub.w	r3, r3, #2
 800a740:	bfcc      	ite	gt
 800a742:	2500      	movgt	r5, #0
 800a744:	2501      	movle	r5, #1
 800a746:	2b03      	cmp	r3, #3
 800a748:	f200 8087 	bhi.w	800a85a <_dtoa_r+0x30a>
 800a74c:	e8df f003 	tbb	[pc, r3]
 800a750:	59383a2d 	.word	0x59383a2d
 800a754:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a758:	441d      	add	r5, r3
 800a75a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a75e:	2b20      	cmp	r3, #32
 800a760:	bfc1      	itttt	gt
 800a762:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a766:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a76a:	fa0b f303 	lslgt.w	r3, fp, r3
 800a76e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a772:	bfda      	itte	le
 800a774:	f1c3 0320 	rsble	r3, r3, #32
 800a778:	fa06 f003 	lslle.w	r0, r6, r3
 800a77c:	4318      	orrgt	r0, r3
 800a77e:	f7f5 fee1 	bl	8000544 <__aeabi_ui2d>
 800a782:	2301      	movs	r3, #1
 800a784:	4606      	mov	r6, r0
 800a786:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a78a:	3d01      	subs	r5, #1
 800a78c:	930e      	str	r3, [sp, #56]	; 0x38
 800a78e:	e76a      	b.n	800a666 <_dtoa_r+0x116>
 800a790:	2301      	movs	r3, #1
 800a792:	e7b2      	b.n	800a6fa <_dtoa_r+0x1aa>
 800a794:	900b      	str	r0, [sp, #44]	; 0x2c
 800a796:	e7b1      	b.n	800a6fc <_dtoa_r+0x1ac>
 800a798:	9b04      	ldr	r3, [sp, #16]
 800a79a:	9a00      	ldr	r2, [sp, #0]
 800a79c:	1a9b      	subs	r3, r3, r2
 800a79e:	9304      	str	r3, [sp, #16]
 800a7a0:	4253      	negs	r3, r2
 800a7a2:	9307      	str	r3, [sp, #28]
 800a7a4:	2300      	movs	r3, #0
 800a7a6:	930a      	str	r3, [sp, #40]	; 0x28
 800a7a8:	e7bf      	b.n	800a72a <_dtoa_r+0x1da>
 800a7aa:	2300      	movs	r3, #0
 800a7ac:	9308      	str	r3, [sp, #32]
 800a7ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	dc55      	bgt.n	800a860 <_dtoa_r+0x310>
 800a7b4:	2301      	movs	r3, #1
 800a7b6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a7ba:	461a      	mov	r2, r3
 800a7bc:	9209      	str	r2, [sp, #36]	; 0x24
 800a7be:	e00c      	b.n	800a7da <_dtoa_r+0x28a>
 800a7c0:	2301      	movs	r3, #1
 800a7c2:	e7f3      	b.n	800a7ac <_dtoa_r+0x25c>
 800a7c4:	2300      	movs	r3, #0
 800a7c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a7c8:	9308      	str	r3, [sp, #32]
 800a7ca:	9b00      	ldr	r3, [sp, #0]
 800a7cc:	4413      	add	r3, r2
 800a7ce:	9302      	str	r3, [sp, #8]
 800a7d0:	3301      	adds	r3, #1
 800a7d2:	2b01      	cmp	r3, #1
 800a7d4:	9303      	str	r3, [sp, #12]
 800a7d6:	bfb8      	it	lt
 800a7d8:	2301      	movlt	r3, #1
 800a7da:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a7dc:	2200      	movs	r2, #0
 800a7de:	6042      	str	r2, [r0, #4]
 800a7e0:	2204      	movs	r2, #4
 800a7e2:	f102 0614 	add.w	r6, r2, #20
 800a7e6:	429e      	cmp	r6, r3
 800a7e8:	6841      	ldr	r1, [r0, #4]
 800a7ea:	d93d      	bls.n	800a868 <_dtoa_r+0x318>
 800a7ec:	4620      	mov	r0, r4
 800a7ee:	f000 fcd1 	bl	800b194 <_Balloc>
 800a7f2:	9001      	str	r0, [sp, #4]
 800a7f4:	2800      	cmp	r0, #0
 800a7f6:	d13b      	bne.n	800a870 <_dtoa_r+0x320>
 800a7f8:	4b11      	ldr	r3, [pc, #68]	; (800a840 <_dtoa_r+0x2f0>)
 800a7fa:	4602      	mov	r2, r0
 800a7fc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a800:	e6c0      	b.n	800a584 <_dtoa_r+0x34>
 800a802:	2301      	movs	r3, #1
 800a804:	e7df      	b.n	800a7c6 <_dtoa_r+0x276>
 800a806:	bf00      	nop
 800a808:	636f4361 	.word	0x636f4361
 800a80c:	3fd287a7 	.word	0x3fd287a7
 800a810:	8b60c8b3 	.word	0x8b60c8b3
 800a814:	3fc68a28 	.word	0x3fc68a28
 800a818:	509f79fb 	.word	0x509f79fb
 800a81c:	3fd34413 	.word	0x3fd34413
 800a820:	0802298e 	.word	0x0802298e
 800a824:	08022a49 	.word	0x08022a49
 800a828:	7ff00000 	.word	0x7ff00000
 800a82c:	08022a45 	.word	0x08022a45
 800a830:	08022a3c 	.word	0x08022a3c
 800a834:	0800d3dd 	.word	0x0800d3dd
 800a838:	3ff80000 	.word	0x3ff80000
 800a83c:	08022b40 	.word	0x08022b40
 800a840:	08022aa4 	.word	0x08022aa4
 800a844:	2501      	movs	r5, #1
 800a846:	2300      	movs	r3, #0
 800a848:	9306      	str	r3, [sp, #24]
 800a84a:	9508      	str	r5, [sp, #32]
 800a84c:	f04f 33ff 	mov.w	r3, #4294967295
 800a850:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a854:	2200      	movs	r2, #0
 800a856:	2312      	movs	r3, #18
 800a858:	e7b0      	b.n	800a7bc <_dtoa_r+0x26c>
 800a85a:	2301      	movs	r3, #1
 800a85c:	9308      	str	r3, [sp, #32]
 800a85e:	e7f5      	b.n	800a84c <_dtoa_r+0x2fc>
 800a860:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a862:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a866:	e7b8      	b.n	800a7da <_dtoa_r+0x28a>
 800a868:	3101      	adds	r1, #1
 800a86a:	6041      	str	r1, [r0, #4]
 800a86c:	0052      	lsls	r2, r2, #1
 800a86e:	e7b8      	b.n	800a7e2 <_dtoa_r+0x292>
 800a870:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a872:	9a01      	ldr	r2, [sp, #4]
 800a874:	601a      	str	r2, [r3, #0]
 800a876:	9b03      	ldr	r3, [sp, #12]
 800a878:	2b0e      	cmp	r3, #14
 800a87a:	f200 809d 	bhi.w	800a9b8 <_dtoa_r+0x468>
 800a87e:	2d00      	cmp	r5, #0
 800a880:	f000 809a 	beq.w	800a9b8 <_dtoa_r+0x468>
 800a884:	9b00      	ldr	r3, [sp, #0]
 800a886:	2b00      	cmp	r3, #0
 800a888:	dd32      	ble.n	800a8f0 <_dtoa_r+0x3a0>
 800a88a:	4ab7      	ldr	r2, [pc, #732]	; (800ab68 <_dtoa_r+0x618>)
 800a88c:	f003 030f 	and.w	r3, r3, #15
 800a890:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a894:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a898:	9b00      	ldr	r3, [sp, #0]
 800a89a:	05d8      	lsls	r0, r3, #23
 800a89c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800a8a0:	d516      	bpl.n	800a8d0 <_dtoa_r+0x380>
 800a8a2:	4bb2      	ldr	r3, [pc, #712]	; (800ab6c <_dtoa_r+0x61c>)
 800a8a4:	ec51 0b19 	vmov	r0, r1, d9
 800a8a8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a8ac:	f7f5 ffee 	bl	800088c <__aeabi_ddiv>
 800a8b0:	f007 070f 	and.w	r7, r7, #15
 800a8b4:	4682      	mov	sl, r0
 800a8b6:	468b      	mov	fp, r1
 800a8b8:	2503      	movs	r5, #3
 800a8ba:	4eac      	ldr	r6, [pc, #688]	; (800ab6c <_dtoa_r+0x61c>)
 800a8bc:	b957      	cbnz	r7, 800a8d4 <_dtoa_r+0x384>
 800a8be:	4642      	mov	r2, r8
 800a8c0:	464b      	mov	r3, r9
 800a8c2:	4650      	mov	r0, sl
 800a8c4:	4659      	mov	r1, fp
 800a8c6:	f7f5 ffe1 	bl	800088c <__aeabi_ddiv>
 800a8ca:	4682      	mov	sl, r0
 800a8cc:	468b      	mov	fp, r1
 800a8ce:	e028      	b.n	800a922 <_dtoa_r+0x3d2>
 800a8d0:	2502      	movs	r5, #2
 800a8d2:	e7f2      	b.n	800a8ba <_dtoa_r+0x36a>
 800a8d4:	07f9      	lsls	r1, r7, #31
 800a8d6:	d508      	bpl.n	800a8ea <_dtoa_r+0x39a>
 800a8d8:	4640      	mov	r0, r8
 800a8da:	4649      	mov	r1, r9
 800a8dc:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a8e0:	f7f5 feaa 	bl	8000638 <__aeabi_dmul>
 800a8e4:	3501      	adds	r5, #1
 800a8e6:	4680      	mov	r8, r0
 800a8e8:	4689      	mov	r9, r1
 800a8ea:	107f      	asrs	r7, r7, #1
 800a8ec:	3608      	adds	r6, #8
 800a8ee:	e7e5      	b.n	800a8bc <_dtoa_r+0x36c>
 800a8f0:	f000 809b 	beq.w	800aa2a <_dtoa_r+0x4da>
 800a8f4:	9b00      	ldr	r3, [sp, #0]
 800a8f6:	4f9d      	ldr	r7, [pc, #628]	; (800ab6c <_dtoa_r+0x61c>)
 800a8f8:	425e      	negs	r6, r3
 800a8fa:	4b9b      	ldr	r3, [pc, #620]	; (800ab68 <_dtoa_r+0x618>)
 800a8fc:	f006 020f 	and.w	r2, r6, #15
 800a900:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a904:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a908:	ec51 0b19 	vmov	r0, r1, d9
 800a90c:	f7f5 fe94 	bl	8000638 <__aeabi_dmul>
 800a910:	1136      	asrs	r6, r6, #4
 800a912:	4682      	mov	sl, r0
 800a914:	468b      	mov	fp, r1
 800a916:	2300      	movs	r3, #0
 800a918:	2502      	movs	r5, #2
 800a91a:	2e00      	cmp	r6, #0
 800a91c:	d17a      	bne.n	800aa14 <_dtoa_r+0x4c4>
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d1d3      	bne.n	800a8ca <_dtoa_r+0x37a>
 800a922:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a924:	2b00      	cmp	r3, #0
 800a926:	f000 8082 	beq.w	800aa2e <_dtoa_r+0x4de>
 800a92a:	4b91      	ldr	r3, [pc, #580]	; (800ab70 <_dtoa_r+0x620>)
 800a92c:	2200      	movs	r2, #0
 800a92e:	4650      	mov	r0, sl
 800a930:	4659      	mov	r1, fp
 800a932:	f7f6 f8f3 	bl	8000b1c <__aeabi_dcmplt>
 800a936:	2800      	cmp	r0, #0
 800a938:	d079      	beq.n	800aa2e <_dtoa_r+0x4de>
 800a93a:	9b03      	ldr	r3, [sp, #12]
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d076      	beq.n	800aa2e <_dtoa_r+0x4de>
 800a940:	9b02      	ldr	r3, [sp, #8]
 800a942:	2b00      	cmp	r3, #0
 800a944:	dd36      	ble.n	800a9b4 <_dtoa_r+0x464>
 800a946:	9b00      	ldr	r3, [sp, #0]
 800a948:	4650      	mov	r0, sl
 800a94a:	4659      	mov	r1, fp
 800a94c:	1e5f      	subs	r7, r3, #1
 800a94e:	2200      	movs	r2, #0
 800a950:	4b88      	ldr	r3, [pc, #544]	; (800ab74 <_dtoa_r+0x624>)
 800a952:	f7f5 fe71 	bl	8000638 <__aeabi_dmul>
 800a956:	9e02      	ldr	r6, [sp, #8]
 800a958:	4682      	mov	sl, r0
 800a95a:	468b      	mov	fp, r1
 800a95c:	3501      	adds	r5, #1
 800a95e:	4628      	mov	r0, r5
 800a960:	f7f5 fe00 	bl	8000564 <__aeabi_i2d>
 800a964:	4652      	mov	r2, sl
 800a966:	465b      	mov	r3, fp
 800a968:	f7f5 fe66 	bl	8000638 <__aeabi_dmul>
 800a96c:	4b82      	ldr	r3, [pc, #520]	; (800ab78 <_dtoa_r+0x628>)
 800a96e:	2200      	movs	r2, #0
 800a970:	f7f5 fcac 	bl	80002cc <__adddf3>
 800a974:	46d0      	mov	r8, sl
 800a976:	46d9      	mov	r9, fp
 800a978:	4682      	mov	sl, r0
 800a97a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800a97e:	2e00      	cmp	r6, #0
 800a980:	d158      	bne.n	800aa34 <_dtoa_r+0x4e4>
 800a982:	4b7e      	ldr	r3, [pc, #504]	; (800ab7c <_dtoa_r+0x62c>)
 800a984:	2200      	movs	r2, #0
 800a986:	4640      	mov	r0, r8
 800a988:	4649      	mov	r1, r9
 800a98a:	f7f5 fc9d 	bl	80002c8 <__aeabi_dsub>
 800a98e:	4652      	mov	r2, sl
 800a990:	465b      	mov	r3, fp
 800a992:	4680      	mov	r8, r0
 800a994:	4689      	mov	r9, r1
 800a996:	f7f6 f8df 	bl	8000b58 <__aeabi_dcmpgt>
 800a99a:	2800      	cmp	r0, #0
 800a99c:	f040 8295 	bne.w	800aeca <_dtoa_r+0x97a>
 800a9a0:	4652      	mov	r2, sl
 800a9a2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a9a6:	4640      	mov	r0, r8
 800a9a8:	4649      	mov	r1, r9
 800a9aa:	f7f6 f8b7 	bl	8000b1c <__aeabi_dcmplt>
 800a9ae:	2800      	cmp	r0, #0
 800a9b0:	f040 8289 	bne.w	800aec6 <_dtoa_r+0x976>
 800a9b4:	ec5b ab19 	vmov	sl, fp, d9
 800a9b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	f2c0 8148 	blt.w	800ac50 <_dtoa_r+0x700>
 800a9c0:	9a00      	ldr	r2, [sp, #0]
 800a9c2:	2a0e      	cmp	r2, #14
 800a9c4:	f300 8144 	bgt.w	800ac50 <_dtoa_r+0x700>
 800a9c8:	4b67      	ldr	r3, [pc, #412]	; (800ab68 <_dtoa_r+0x618>)
 800a9ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a9ce:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a9d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	f280 80d5 	bge.w	800ab84 <_dtoa_r+0x634>
 800a9da:	9b03      	ldr	r3, [sp, #12]
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	f300 80d1 	bgt.w	800ab84 <_dtoa_r+0x634>
 800a9e2:	f040 826f 	bne.w	800aec4 <_dtoa_r+0x974>
 800a9e6:	4b65      	ldr	r3, [pc, #404]	; (800ab7c <_dtoa_r+0x62c>)
 800a9e8:	2200      	movs	r2, #0
 800a9ea:	4640      	mov	r0, r8
 800a9ec:	4649      	mov	r1, r9
 800a9ee:	f7f5 fe23 	bl	8000638 <__aeabi_dmul>
 800a9f2:	4652      	mov	r2, sl
 800a9f4:	465b      	mov	r3, fp
 800a9f6:	f7f6 f8a5 	bl	8000b44 <__aeabi_dcmpge>
 800a9fa:	9e03      	ldr	r6, [sp, #12]
 800a9fc:	4637      	mov	r7, r6
 800a9fe:	2800      	cmp	r0, #0
 800aa00:	f040 8245 	bne.w	800ae8e <_dtoa_r+0x93e>
 800aa04:	9d01      	ldr	r5, [sp, #4]
 800aa06:	2331      	movs	r3, #49	; 0x31
 800aa08:	f805 3b01 	strb.w	r3, [r5], #1
 800aa0c:	9b00      	ldr	r3, [sp, #0]
 800aa0e:	3301      	adds	r3, #1
 800aa10:	9300      	str	r3, [sp, #0]
 800aa12:	e240      	b.n	800ae96 <_dtoa_r+0x946>
 800aa14:	07f2      	lsls	r2, r6, #31
 800aa16:	d505      	bpl.n	800aa24 <_dtoa_r+0x4d4>
 800aa18:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aa1c:	f7f5 fe0c 	bl	8000638 <__aeabi_dmul>
 800aa20:	3501      	adds	r5, #1
 800aa22:	2301      	movs	r3, #1
 800aa24:	1076      	asrs	r6, r6, #1
 800aa26:	3708      	adds	r7, #8
 800aa28:	e777      	b.n	800a91a <_dtoa_r+0x3ca>
 800aa2a:	2502      	movs	r5, #2
 800aa2c:	e779      	b.n	800a922 <_dtoa_r+0x3d2>
 800aa2e:	9f00      	ldr	r7, [sp, #0]
 800aa30:	9e03      	ldr	r6, [sp, #12]
 800aa32:	e794      	b.n	800a95e <_dtoa_r+0x40e>
 800aa34:	9901      	ldr	r1, [sp, #4]
 800aa36:	4b4c      	ldr	r3, [pc, #304]	; (800ab68 <_dtoa_r+0x618>)
 800aa38:	4431      	add	r1, r6
 800aa3a:	910d      	str	r1, [sp, #52]	; 0x34
 800aa3c:	9908      	ldr	r1, [sp, #32]
 800aa3e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800aa42:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800aa46:	2900      	cmp	r1, #0
 800aa48:	d043      	beq.n	800aad2 <_dtoa_r+0x582>
 800aa4a:	494d      	ldr	r1, [pc, #308]	; (800ab80 <_dtoa_r+0x630>)
 800aa4c:	2000      	movs	r0, #0
 800aa4e:	f7f5 ff1d 	bl	800088c <__aeabi_ddiv>
 800aa52:	4652      	mov	r2, sl
 800aa54:	465b      	mov	r3, fp
 800aa56:	f7f5 fc37 	bl	80002c8 <__aeabi_dsub>
 800aa5a:	9d01      	ldr	r5, [sp, #4]
 800aa5c:	4682      	mov	sl, r0
 800aa5e:	468b      	mov	fp, r1
 800aa60:	4649      	mov	r1, r9
 800aa62:	4640      	mov	r0, r8
 800aa64:	f7f6 f898 	bl	8000b98 <__aeabi_d2iz>
 800aa68:	4606      	mov	r6, r0
 800aa6a:	f7f5 fd7b 	bl	8000564 <__aeabi_i2d>
 800aa6e:	4602      	mov	r2, r0
 800aa70:	460b      	mov	r3, r1
 800aa72:	4640      	mov	r0, r8
 800aa74:	4649      	mov	r1, r9
 800aa76:	f7f5 fc27 	bl	80002c8 <__aeabi_dsub>
 800aa7a:	3630      	adds	r6, #48	; 0x30
 800aa7c:	f805 6b01 	strb.w	r6, [r5], #1
 800aa80:	4652      	mov	r2, sl
 800aa82:	465b      	mov	r3, fp
 800aa84:	4680      	mov	r8, r0
 800aa86:	4689      	mov	r9, r1
 800aa88:	f7f6 f848 	bl	8000b1c <__aeabi_dcmplt>
 800aa8c:	2800      	cmp	r0, #0
 800aa8e:	d163      	bne.n	800ab58 <_dtoa_r+0x608>
 800aa90:	4642      	mov	r2, r8
 800aa92:	464b      	mov	r3, r9
 800aa94:	4936      	ldr	r1, [pc, #216]	; (800ab70 <_dtoa_r+0x620>)
 800aa96:	2000      	movs	r0, #0
 800aa98:	f7f5 fc16 	bl	80002c8 <__aeabi_dsub>
 800aa9c:	4652      	mov	r2, sl
 800aa9e:	465b      	mov	r3, fp
 800aaa0:	f7f6 f83c 	bl	8000b1c <__aeabi_dcmplt>
 800aaa4:	2800      	cmp	r0, #0
 800aaa6:	f040 80b5 	bne.w	800ac14 <_dtoa_r+0x6c4>
 800aaaa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aaac:	429d      	cmp	r5, r3
 800aaae:	d081      	beq.n	800a9b4 <_dtoa_r+0x464>
 800aab0:	4b30      	ldr	r3, [pc, #192]	; (800ab74 <_dtoa_r+0x624>)
 800aab2:	2200      	movs	r2, #0
 800aab4:	4650      	mov	r0, sl
 800aab6:	4659      	mov	r1, fp
 800aab8:	f7f5 fdbe 	bl	8000638 <__aeabi_dmul>
 800aabc:	4b2d      	ldr	r3, [pc, #180]	; (800ab74 <_dtoa_r+0x624>)
 800aabe:	4682      	mov	sl, r0
 800aac0:	468b      	mov	fp, r1
 800aac2:	4640      	mov	r0, r8
 800aac4:	4649      	mov	r1, r9
 800aac6:	2200      	movs	r2, #0
 800aac8:	f7f5 fdb6 	bl	8000638 <__aeabi_dmul>
 800aacc:	4680      	mov	r8, r0
 800aace:	4689      	mov	r9, r1
 800aad0:	e7c6      	b.n	800aa60 <_dtoa_r+0x510>
 800aad2:	4650      	mov	r0, sl
 800aad4:	4659      	mov	r1, fp
 800aad6:	f7f5 fdaf 	bl	8000638 <__aeabi_dmul>
 800aada:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aadc:	9d01      	ldr	r5, [sp, #4]
 800aade:	930f      	str	r3, [sp, #60]	; 0x3c
 800aae0:	4682      	mov	sl, r0
 800aae2:	468b      	mov	fp, r1
 800aae4:	4649      	mov	r1, r9
 800aae6:	4640      	mov	r0, r8
 800aae8:	f7f6 f856 	bl	8000b98 <__aeabi_d2iz>
 800aaec:	4606      	mov	r6, r0
 800aaee:	f7f5 fd39 	bl	8000564 <__aeabi_i2d>
 800aaf2:	3630      	adds	r6, #48	; 0x30
 800aaf4:	4602      	mov	r2, r0
 800aaf6:	460b      	mov	r3, r1
 800aaf8:	4640      	mov	r0, r8
 800aafa:	4649      	mov	r1, r9
 800aafc:	f7f5 fbe4 	bl	80002c8 <__aeabi_dsub>
 800ab00:	f805 6b01 	strb.w	r6, [r5], #1
 800ab04:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ab06:	429d      	cmp	r5, r3
 800ab08:	4680      	mov	r8, r0
 800ab0a:	4689      	mov	r9, r1
 800ab0c:	f04f 0200 	mov.w	r2, #0
 800ab10:	d124      	bne.n	800ab5c <_dtoa_r+0x60c>
 800ab12:	4b1b      	ldr	r3, [pc, #108]	; (800ab80 <_dtoa_r+0x630>)
 800ab14:	4650      	mov	r0, sl
 800ab16:	4659      	mov	r1, fp
 800ab18:	f7f5 fbd8 	bl	80002cc <__adddf3>
 800ab1c:	4602      	mov	r2, r0
 800ab1e:	460b      	mov	r3, r1
 800ab20:	4640      	mov	r0, r8
 800ab22:	4649      	mov	r1, r9
 800ab24:	f7f6 f818 	bl	8000b58 <__aeabi_dcmpgt>
 800ab28:	2800      	cmp	r0, #0
 800ab2a:	d173      	bne.n	800ac14 <_dtoa_r+0x6c4>
 800ab2c:	4652      	mov	r2, sl
 800ab2e:	465b      	mov	r3, fp
 800ab30:	4913      	ldr	r1, [pc, #76]	; (800ab80 <_dtoa_r+0x630>)
 800ab32:	2000      	movs	r0, #0
 800ab34:	f7f5 fbc8 	bl	80002c8 <__aeabi_dsub>
 800ab38:	4602      	mov	r2, r0
 800ab3a:	460b      	mov	r3, r1
 800ab3c:	4640      	mov	r0, r8
 800ab3e:	4649      	mov	r1, r9
 800ab40:	f7f5 ffec 	bl	8000b1c <__aeabi_dcmplt>
 800ab44:	2800      	cmp	r0, #0
 800ab46:	f43f af35 	beq.w	800a9b4 <_dtoa_r+0x464>
 800ab4a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800ab4c:	1e6b      	subs	r3, r5, #1
 800ab4e:	930f      	str	r3, [sp, #60]	; 0x3c
 800ab50:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ab54:	2b30      	cmp	r3, #48	; 0x30
 800ab56:	d0f8      	beq.n	800ab4a <_dtoa_r+0x5fa>
 800ab58:	9700      	str	r7, [sp, #0]
 800ab5a:	e049      	b.n	800abf0 <_dtoa_r+0x6a0>
 800ab5c:	4b05      	ldr	r3, [pc, #20]	; (800ab74 <_dtoa_r+0x624>)
 800ab5e:	f7f5 fd6b 	bl	8000638 <__aeabi_dmul>
 800ab62:	4680      	mov	r8, r0
 800ab64:	4689      	mov	r9, r1
 800ab66:	e7bd      	b.n	800aae4 <_dtoa_r+0x594>
 800ab68:	08022b40 	.word	0x08022b40
 800ab6c:	08022b18 	.word	0x08022b18
 800ab70:	3ff00000 	.word	0x3ff00000
 800ab74:	40240000 	.word	0x40240000
 800ab78:	401c0000 	.word	0x401c0000
 800ab7c:	40140000 	.word	0x40140000
 800ab80:	3fe00000 	.word	0x3fe00000
 800ab84:	9d01      	ldr	r5, [sp, #4]
 800ab86:	4656      	mov	r6, sl
 800ab88:	465f      	mov	r7, fp
 800ab8a:	4642      	mov	r2, r8
 800ab8c:	464b      	mov	r3, r9
 800ab8e:	4630      	mov	r0, r6
 800ab90:	4639      	mov	r1, r7
 800ab92:	f7f5 fe7b 	bl	800088c <__aeabi_ddiv>
 800ab96:	f7f5 ffff 	bl	8000b98 <__aeabi_d2iz>
 800ab9a:	4682      	mov	sl, r0
 800ab9c:	f7f5 fce2 	bl	8000564 <__aeabi_i2d>
 800aba0:	4642      	mov	r2, r8
 800aba2:	464b      	mov	r3, r9
 800aba4:	f7f5 fd48 	bl	8000638 <__aeabi_dmul>
 800aba8:	4602      	mov	r2, r0
 800abaa:	460b      	mov	r3, r1
 800abac:	4630      	mov	r0, r6
 800abae:	4639      	mov	r1, r7
 800abb0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800abb4:	f7f5 fb88 	bl	80002c8 <__aeabi_dsub>
 800abb8:	f805 6b01 	strb.w	r6, [r5], #1
 800abbc:	9e01      	ldr	r6, [sp, #4]
 800abbe:	9f03      	ldr	r7, [sp, #12]
 800abc0:	1bae      	subs	r6, r5, r6
 800abc2:	42b7      	cmp	r7, r6
 800abc4:	4602      	mov	r2, r0
 800abc6:	460b      	mov	r3, r1
 800abc8:	d135      	bne.n	800ac36 <_dtoa_r+0x6e6>
 800abca:	f7f5 fb7f 	bl	80002cc <__adddf3>
 800abce:	4642      	mov	r2, r8
 800abd0:	464b      	mov	r3, r9
 800abd2:	4606      	mov	r6, r0
 800abd4:	460f      	mov	r7, r1
 800abd6:	f7f5 ffbf 	bl	8000b58 <__aeabi_dcmpgt>
 800abda:	b9d0      	cbnz	r0, 800ac12 <_dtoa_r+0x6c2>
 800abdc:	4642      	mov	r2, r8
 800abde:	464b      	mov	r3, r9
 800abe0:	4630      	mov	r0, r6
 800abe2:	4639      	mov	r1, r7
 800abe4:	f7f5 ff90 	bl	8000b08 <__aeabi_dcmpeq>
 800abe8:	b110      	cbz	r0, 800abf0 <_dtoa_r+0x6a0>
 800abea:	f01a 0f01 	tst.w	sl, #1
 800abee:	d110      	bne.n	800ac12 <_dtoa_r+0x6c2>
 800abf0:	4620      	mov	r0, r4
 800abf2:	ee18 1a10 	vmov	r1, s16
 800abf6:	f000 fb0d 	bl	800b214 <_Bfree>
 800abfa:	2300      	movs	r3, #0
 800abfc:	9800      	ldr	r0, [sp, #0]
 800abfe:	702b      	strb	r3, [r5, #0]
 800ac00:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ac02:	3001      	adds	r0, #1
 800ac04:	6018      	str	r0, [r3, #0]
 800ac06:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	f43f acf1 	beq.w	800a5f0 <_dtoa_r+0xa0>
 800ac0e:	601d      	str	r5, [r3, #0]
 800ac10:	e4ee      	b.n	800a5f0 <_dtoa_r+0xa0>
 800ac12:	9f00      	ldr	r7, [sp, #0]
 800ac14:	462b      	mov	r3, r5
 800ac16:	461d      	mov	r5, r3
 800ac18:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ac1c:	2a39      	cmp	r2, #57	; 0x39
 800ac1e:	d106      	bne.n	800ac2e <_dtoa_r+0x6de>
 800ac20:	9a01      	ldr	r2, [sp, #4]
 800ac22:	429a      	cmp	r2, r3
 800ac24:	d1f7      	bne.n	800ac16 <_dtoa_r+0x6c6>
 800ac26:	9901      	ldr	r1, [sp, #4]
 800ac28:	2230      	movs	r2, #48	; 0x30
 800ac2a:	3701      	adds	r7, #1
 800ac2c:	700a      	strb	r2, [r1, #0]
 800ac2e:	781a      	ldrb	r2, [r3, #0]
 800ac30:	3201      	adds	r2, #1
 800ac32:	701a      	strb	r2, [r3, #0]
 800ac34:	e790      	b.n	800ab58 <_dtoa_r+0x608>
 800ac36:	4ba6      	ldr	r3, [pc, #664]	; (800aed0 <_dtoa_r+0x980>)
 800ac38:	2200      	movs	r2, #0
 800ac3a:	f7f5 fcfd 	bl	8000638 <__aeabi_dmul>
 800ac3e:	2200      	movs	r2, #0
 800ac40:	2300      	movs	r3, #0
 800ac42:	4606      	mov	r6, r0
 800ac44:	460f      	mov	r7, r1
 800ac46:	f7f5 ff5f 	bl	8000b08 <__aeabi_dcmpeq>
 800ac4a:	2800      	cmp	r0, #0
 800ac4c:	d09d      	beq.n	800ab8a <_dtoa_r+0x63a>
 800ac4e:	e7cf      	b.n	800abf0 <_dtoa_r+0x6a0>
 800ac50:	9a08      	ldr	r2, [sp, #32]
 800ac52:	2a00      	cmp	r2, #0
 800ac54:	f000 80d7 	beq.w	800ae06 <_dtoa_r+0x8b6>
 800ac58:	9a06      	ldr	r2, [sp, #24]
 800ac5a:	2a01      	cmp	r2, #1
 800ac5c:	f300 80ba 	bgt.w	800add4 <_dtoa_r+0x884>
 800ac60:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ac62:	2a00      	cmp	r2, #0
 800ac64:	f000 80b2 	beq.w	800adcc <_dtoa_r+0x87c>
 800ac68:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ac6c:	9e07      	ldr	r6, [sp, #28]
 800ac6e:	9d04      	ldr	r5, [sp, #16]
 800ac70:	9a04      	ldr	r2, [sp, #16]
 800ac72:	441a      	add	r2, r3
 800ac74:	9204      	str	r2, [sp, #16]
 800ac76:	9a05      	ldr	r2, [sp, #20]
 800ac78:	2101      	movs	r1, #1
 800ac7a:	441a      	add	r2, r3
 800ac7c:	4620      	mov	r0, r4
 800ac7e:	9205      	str	r2, [sp, #20]
 800ac80:	f000 fb80 	bl	800b384 <__i2b>
 800ac84:	4607      	mov	r7, r0
 800ac86:	2d00      	cmp	r5, #0
 800ac88:	dd0c      	ble.n	800aca4 <_dtoa_r+0x754>
 800ac8a:	9b05      	ldr	r3, [sp, #20]
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	dd09      	ble.n	800aca4 <_dtoa_r+0x754>
 800ac90:	42ab      	cmp	r3, r5
 800ac92:	9a04      	ldr	r2, [sp, #16]
 800ac94:	bfa8      	it	ge
 800ac96:	462b      	movge	r3, r5
 800ac98:	1ad2      	subs	r2, r2, r3
 800ac9a:	9204      	str	r2, [sp, #16]
 800ac9c:	9a05      	ldr	r2, [sp, #20]
 800ac9e:	1aed      	subs	r5, r5, r3
 800aca0:	1ad3      	subs	r3, r2, r3
 800aca2:	9305      	str	r3, [sp, #20]
 800aca4:	9b07      	ldr	r3, [sp, #28]
 800aca6:	b31b      	cbz	r3, 800acf0 <_dtoa_r+0x7a0>
 800aca8:	9b08      	ldr	r3, [sp, #32]
 800acaa:	2b00      	cmp	r3, #0
 800acac:	f000 80af 	beq.w	800ae0e <_dtoa_r+0x8be>
 800acb0:	2e00      	cmp	r6, #0
 800acb2:	dd13      	ble.n	800acdc <_dtoa_r+0x78c>
 800acb4:	4639      	mov	r1, r7
 800acb6:	4632      	mov	r2, r6
 800acb8:	4620      	mov	r0, r4
 800acba:	f000 fc23 	bl	800b504 <__pow5mult>
 800acbe:	ee18 2a10 	vmov	r2, s16
 800acc2:	4601      	mov	r1, r0
 800acc4:	4607      	mov	r7, r0
 800acc6:	4620      	mov	r0, r4
 800acc8:	f000 fb72 	bl	800b3b0 <__multiply>
 800accc:	ee18 1a10 	vmov	r1, s16
 800acd0:	4680      	mov	r8, r0
 800acd2:	4620      	mov	r0, r4
 800acd4:	f000 fa9e 	bl	800b214 <_Bfree>
 800acd8:	ee08 8a10 	vmov	s16, r8
 800acdc:	9b07      	ldr	r3, [sp, #28]
 800acde:	1b9a      	subs	r2, r3, r6
 800ace0:	d006      	beq.n	800acf0 <_dtoa_r+0x7a0>
 800ace2:	ee18 1a10 	vmov	r1, s16
 800ace6:	4620      	mov	r0, r4
 800ace8:	f000 fc0c 	bl	800b504 <__pow5mult>
 800acec:	ee08 0a10 	vmov	s16, r0
 800acf0:	2101      	movs	r1, #1
 800acf2:	4620      	mov	r0, r4
 800acf4:	f000 fb46 	bl	800b384 <__i2b>
 800acf8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	4606      	mov	r6, r0
 800acfe:	f340 8088 	ble.w	800ae12 <_dtoa_r+0x8c2>
 800ad02:	461a      	mov	r2, r3
 800ad04:	4601      	mov	r1, r0
 800ad06:	4620      	mov	r0, r4
 800ad08:	f000 fbfc 	bl	800b504 <__pow5mult>
 800ad0c:	9b06      	ldr	r3, [sp, #24]
 800ad0e:	2b01      	cmp	r3, #1
 800ad10:	4606      	mov	r6, r0
 800ad12:	f340 8081 	ble.w	800ae18 <_dtoa_r+0x8c8>
 800ad16:	f04f 0800 	mov.w	r8, #0
 800ad1a:	6933      	ldr	r3, [r6, #16]
 800ad1c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800ad20:	6918      	ldr	r0, [r3, #16]
 800ad22:	f000 fadf 	bl	800b2e4 <__hi0bits>
 800ad26:	f1c0 0020 	rsb	r0, r0, #32
 800ad2a:	9b05      	ldr	r3, [sp, #20]
 800ad2c:	4418      	add	r0, r3
 800ad2e:	f010 001f 	ands.w	r0, r0, #31
 800ad32:	f000 8092 	beq.w	800ae5a <_dtoa_r+0x90a>
 800ad36:	f1c0 0320 	rsb	r3, r0, #32
 800ad3a:	2b04      	cmp	r3, #4
 800ad3c:	f340 808a 	ble.w	800ae54 <_dtoa_r+0x904>
 800ad40:	f1c0 001c 	rsb	r0, r0, #28
 800ad44:	9b04      	ldr	r3, [sp, #16]
 800ad46:	4403      	add	r3, r0
 800ad48:	9304      	str	r3, [sp, #16]
 800ad4a:	9b05      	ldr	r3, [sp, #20]
 800ad4c:	4403      	add	r3, r0
 800ad4e:	4405      	add	r5, r0
 800ad50:	9305      	str	r3, [sp, #20]
 800ad52:	9b04      	ldr	r3, [sp, #16]
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	dd07      	ble.n	800ad68 <_dtoa_r+0x818>
 800ad58:	ee18 1a10 	vmov	r1, s16
 800ad5c:	461a      	mov	r2, r3
 800ad5e:	4620      	mov	r0, r4
 800ad60:	f000 fc2a 	bl	800b5b8 <__lshift>
 800ad64:	ee08 0a10 	vmov	s16, r0
 800ad68:	9b05      	ldr	r3, [sp, #20]
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	dd05      	ble.n	800ad7a <_dtoa_r+0x82a>
 800ad6e:	4631      	mov	r1, r6
 800ad70:	461a      	mov	r2, r3
 800ad72:	4620      	mov	r0, r4
 800ad74:	f000 fc20 	bl	800b5b8 <__lshift>
 800ad78:	4606      	mov	r6, r0
 800ad7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d06e      	beq.n	800ae5e <_dtoa_r+0x90e>
 800ad80:	ee18 0a10 	vmov	r0, s16
 800ad84:	4631      	mov	r1, r6
 800ad86:	f000 fc87 	bl	800b698 <__mcmp>
 800ad8a:	2800      	cmp	r0, #0
 800ad8c:	da67      	bge.n	800ae5e <_dtoa_r+0x90e>
 800ad8e:	9b00      	ldr	r3, [sp, #0]
 800ad90:	3b01      	subs	r3, #1
 800ad92:	ee18 1a10 	vmov	r1, s16
 800ad96:	9300      	str	r3, [sp, #0]
 800ad98:	220a      	movs	r2, #10
 800ad9a:	2300      	movs	r3, #0
 800ad9c:	4620      	mov	r0, r4
 800ad9e:	f000 fa5b 	bl	800b258 <__multadd>
 800ada2:	9b08      	ldr	r3, [sp, #32]
 800ada4:	ee08 0a10 	vmov	s16, r0
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	f000 81b1 	beq.w	800b110 <_dtoa_r+0xbc0>
 800adae:	2300      	movs	r3, #0
 800adb0:	4639      	mov	r1, r7
 800adb2:	220a      	movs	r2, #10
 800adb4:	4620      	mov	r0, r4
 800adb6:	f000 fa4f 	bl	800b258 <__multadd>
 800adba:	9b02      	ldr	r3, [sp, #8]
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	4607      	mov	r7, r0
 800adc0:	f300 808e 	bgt.w	800aee0 <_dtoa_r+0x990>
 800adc4:	9b06      	ldr	r3, [sp, #24]
 800adc6:	2b02      	cmp	r3, #2
 800adc8:	dc51      	bgt.n	800ae6e <_dtoa_r+0x91e>
 800adca:	e089      	b.n	800aee0 <_dtoa_r+0x990>
 800adcc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800adce:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800add2:	e74b      	b.n	800ac6c <_dtoa_r+0x71c>
 800add4:	9b03      	ldr	r3, [sp, #12]
 800add6:	1e5e      	subs	r6, r3, #1
 800add8:	9b07      	ldr	r3, [sp, #28]
 800adda:	42b3      	cmp	r3, r6
 800addc:	bfbf      	itttt	lt
 800adde:	9b07      	ldrlt	r3, [sp, #28]
 800ade0:	9607      	strlt	r6, [sp, #28]
 800ade2:	1af2      	sublt	r2, r6, r3
 800ade4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800ade6:	bfb6      	itet	lt
 800ade8:	189b      	addlt	r3, r3, r2
 800adea:	1b9e      	subge	r6, r3, r6
 800adec:	930a      	strlt	r3, [sp, #40]	; 0x28
 800adee:	9b03      	ldr	r3, [sp, #12]
 800adf0:	bfb8      	it	lt
 800adf2:	2600      	movlt	r6, #0
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	bfb7      	itett	lt
 800adf8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800adfc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800ae00:	1a9d      	sublt	r5, r3, r2
 800ae02:	2300      	movlt	r3, #0
 800ae04:	e734      	b.n	800ac70 <_dtoa_r+0x720>
 800ae06:	9e07      	ldr	r6, [sp, #28]
 800ae08:	9d04      	ldr	r5, [sp, #16]
 800ae0a:	9f08      	ldr	r7, [sp, #32]
 800ae0c:	e73b      	b.n	800ac86 <_dtoa_r+0x736>
 800ae0e:	9a07      	ldr	r2, [sp, #28]
 800ae10:	e767      	b.n	800ace2 <_dtoa_r+0x792>
 800ae12:	9b06      	ldr	r3, [sp, #24]
 800ae14:	2b01      	cmp	r3, #1
 800ae16:	dc18      	bgt.n	800ae4a <_dtoa_r+0x8fa>
 800ae18:	f1ba 0f00 	cmp.w	sl, #0
 800ae1c:	d115      	bne.n	800ae4a <_dtoa_r+0x8fa>
 800ae1e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ae22:	b993      	cbnz	r3, 800ae4a <_dtoa_r+0x8fa>
 800ae24:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ae28:	0d1b      	lsrs	r3, r3, #20
 800ae2a:	051b      	lsls	r3, r3, #20
 800ae2c:	b183      	cbz	r3, 800ae50 <_dtoa_r+0x900>
 800ae2e:	9b04      	ldr	r3, [sp, #16]
 800ae30:	3301      	adds	r3, #1
 800ae32:	9304      	str	r3, [sp, #16]
 800ae34:	9b05      	ldr	r3, [sp, #20]
 800ae36:	3301      	adds	r3, #1
 800ae38:	9305      	str	r3, [sp, #20]
 800ae3a:	f04f 0801 	mov.w	r8, #1
 800ae3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	f47f af6a 	bne.w	800ad1a <_dtoa_r+0x7ca>
 800ae46:	2001      	movs	r0, #1
 800ae48:	e76f      	b.n	800ad2a <_dtoa_r+0x7da>
 800ae4a:	f04f 0800 	mov.w	r8, #0
 800ae4e:	e7f6      	b.n	800ae3e <_dtoa_r+0x8ee>
 800ae50:	4698      	mov	r8, r3
 800ae52:	e7f4      	b.n	800ae3e <_dtoa_r+0x8ee>
 800ae54:	f43f af7d 	beq.w	800ad52 <_dtoa_r+0x802>
 800ae58:	4618      	mov	r0, r3
 800ae5a:	301c      	adds	r0, #28
 800ae5c:	e772      	b.n	800ad44 <_dtoa_r+0x7f4>
 800ae5e:	9b03      	ldr	r3, [sp, #12]
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	dc37      	bgt.n	800aed4 <_dtoa_r+0x984>
 800ae64:	9b06      	ldr	r3, [sp, #24]
 800ae66:	2b02      	cmp	r3, #2
 800ae68:	dd34      	ble.n	800aed4 <_dtoa_r+0x984>
 800ae6a:	9b03      	ldr	r3, [sp, #12]
 800ae6c:	9302      	str	r3, [sp, #8]
 800ae6e:	9b02      	ldr	r3, [sp, #8]
 800ae70:	b96b      	cbnz	r3, 800ae8e <_dtoa_r+0x93e>
 800ae72:	4631      	mov	r1, r6
 800ae74:	2205      	movs	r2, #5
 800ae76:	4620      	mov	r0, r4
 800ae78:	f000 f9ee 	bl	800b258 <__multadd>
 800ae7c:	4601      	mov	r1, r0
 800ae7e:	4606      	mov	r6, r0
 800ae80:	ee18 0a10 	vmov	r0, s16
 800ae84:	f000 fc08 	bl	800b698 <__mcmp>
 800ae88:	2800      	cmp	r0, #0
 800ae8a:	f73f adbb 	bgt.w	800aa04 <_dtoa_r+0x4b4>
 800ae8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae90:	9d01      	ldr	r5, [sp, #4]
 800ae92:	43db      	mvns	r3, r3
 800ae94:	9300      	str	r3, [sp, #0]
 800ae96:	f04f 0800 	mov.w	r8, #0
 800ae9a:	4631      	mov	r1, r6
 800ae9c:	4620      	mov	r0, r4
 800ae9e:	f000 f9b9 	bl	800b214 <_Bfree>
 800aea2:	2f00      	cmp	r7, #0
 800aea4:	f43f aea4 	beq.w	800abf0 <_dtoa_r+0x6a0>
 800aea8:	f1b8 0f00 	cmp.w	r8, #0
 800aeac:	d005      	beq.n	800aeba <_dtoa_r+0x96a>
 800aeae:	45b8      	cmp	r8, r7
 800aeb0:	d003      	beq.n	800aeba <_dtoa_r+0x96a>
 800aeb2:	4641      	mov	r1, r8
 800aeb4:	4620      	mov	r0, r4
 800aeb6:	f000 f9ad 	bl	800b214 <_Bfree>
 800aeba:	4639      	mov	r1, r7
 800aebc:	4620      	mov	r0, r4
 800aebe:	f000 f9a9 	bl	800b214 <_Bfree>
 800aec2:	e695      	b.n	800abf0 <_dtoa_r+0x6a0>
 800aec4:	2600      	movs	r6, #0
 800aec6:	4637      	mov	r7, r6
 800aec8:	e7e1      	b.n	800ae8e <_dtoa_r+0x93e>
 800aeca:	9700      	str	r7, [sp, #0]
 800aecc:	4637      	mov	r7, r6
 800aece:	e599      	b.n	800aa04 <_dtoa_r+0x4b4>
 800aed0:	40240000 	.word	0x40240000
 800aed4:	9b08      	ldr	r3, [sp, #32]
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	f000 80ca 	beq.w	800b070 <_dtoa_r+0xb20>
 800aedc:	9b03      	ldr	r3, [sp, #12]
 800aede:	9302      	str	r3, [sp, #8]
 800aee0:	2d00      	cmp	r5, #0
 800aee2:	dd05      	ble.n	800aef0 <_dtoa_r+0x9a0>
 800aee4:	4639      	mov	r1, r7
 800aee6:	462a      	mov	r2, r5
 800aee8:	4620      	mov	r0, r4
 800aeea:	f000 fb65 	bl	800b5b8 <__lshift>
 800aeee:	4607      	mov	r7, r0
 800aef0:	f1b8 0f00 	cmp.w	r8, #0
 800aef4:	d05b      	beq.n	800afae <_dtoa_r+0xa5e>
 800aef6:	6879      	ldr	r1, [r7, #4]
 800aef8:	4620      	mov	r0, r4
 800aefa:	f000 f94b 	bl	800b194 <_Balloc>
 800aefe:	4605      	mov	r5, r0
 800af00:	b928      	cbnz	r0, 800af0e <_dtoa_r+0x9be>
 800af02:	4b87      	ldr	r3, [pc, #540]	; (800b120 <_dtoa_r+0xbd0>)
 800af04:	4602      	mov	r2, r0
 800af06:	f240 21ea 	movw	r1, #746	; 0x2ea
 800af0a:	f7ff bb3b 	b.w	800a584 <_dtoa_r+0x34>
 800af0e:	693a      	ldr	r2, [r7, #16]
 800af10:	3202      	adds	r2, #2
 800af12:	0092      	lsls	r2, r2, #2
 800af14:	f107 010c 	add.w	r1, r7, #12
 800af18:	300c      	adds	r0, #12
 800af1a:	f7fe fc17 	bl	800974c <memcpy>
 800af1e:	2201      	movs	r2, #1
 800af20:	4629      	mov	r1, r5
 800af22:	4620      	mov	r0, r4
 800af24:	f000 fb48 	bl	800b5b8 <__lshift>
 800af28:	9b01      	ldr	r3, [sp, #4]
 800af2a:	f103 0901 	add.w	r9, r3, #1
 800af2e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800af32:	4413      	add	r3, r2
 800af34:	9305      	str	r3, [sp, #20]
 800af36:	f00a 0301 	and.w	r3, sl, #1
 800af3a:	46b8      	mov	r8, r7
 800af3c:	9304      	str	r3, [sp, #16]
 800af3e:	4607      	mov	r7, r0
 800af40:	4631      	mov	r1, r6
 800af42:	ee18 0a10 	vmov	r0, s16
 800af46:	f7ff fa75 	bl	800a434 <quorem>
 800af4a:	4641      	mov	r1, r8
 800af4c:	9002      	str	r0, [sp, #8]
 800af4e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800af52:	ee18 0a10 	vmov	r0, s16
 800af56:	f000 fb9f 	bl	800b698 <__mcmp>
 800af5a:	463a      	mov	r2, r7
 800af5c:	9003      	str	r0, [sp, #12]
 800af5e:	4631      	mov	r1, r6
 800af60:	4620      	mov	r0, r4
 800af62:	f000 fbb5 	bl	800b6d0 <__mdiff>
 800af66:	68c2      	ldr	r2, [r0, #12]
 800af68:	f109 3bff 	add.w	fp, r9, #4294967295
 800af6c:	4605      	mov	r5, r0
 800af6e:	bb02      	cbnz	r2, 800afb2 <_dtoa_r+0xa62>
 800af70:	4601      	mov	r1, r0
 800af72:	ee18 0a10 	vmov	r0, s16
 800af76:	f000 fb8f 	bl	800b698 <__mcmp>
 800af7a:	4602      	mov	r2, r0
 800af7c:	4629      	mov	r1, r5
 800af7e:	4620      	mov	r0, r4
 800af80:	9207      	str	r2, [sp, #28]
 800af82:	f000 f947 	bl	800b214 <_Bfree>
 800af86:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800af8a:	ea43 0102 	orr.w	r1, r3, r2
 800af8e:	9b04      	ldr	r3, [sp, #16]
 800af90:	430b      	orrs	r3, r1
 800af92:	464d      	mov	r5, r9
 800af94:	d10f      	bne.n	800afb6 <_dtoa_r+0xa66>
 800af96:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800af9a:	d02a      	beq.n	800aff2 <_dtoa_r+0xaa2>
 800af9c:	9b03      	ldr	r3, [sp, #12]
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	dd02      	ble.n	800afa8 <_dtoa_r+0xa58>
 800afa2:	9b02      	ldr	r3, [sp, #8]
 800afa4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800afa8:	f88b a000 	strb.w	sl, [fp]
 800afac:	e775      	b.n	800ae9a <_dtoa_r+0x94a>
 800afae:	4638      	mov	r0, r7
 800afb0:	e7ba      	b.n	800af28 <_dtoa_r+0x9d8>
 800afb2:	2201      	movs	r2, #1
 800afb4:	e7e2      	b.n	800af7c <_dtoa_r+0xa2c>
 800afb6:	9b03      	ldr	r3, [sp, #12]
 800afb8:	2b00      	cmp	r3, #0
 800afba:	db04      	blt.n	800afc6 <_dtoa_r+0xa76>
 800afbc:	9906      	ldr	r1, [sp, #24]
 800afbe:	430b      	orrs	r3, r1
 800afc0:	9904      	ldr	r1, [sp, #16]
 800afc2:	430b      	orrs	r3, r1
 800afc4:	d122      	bne.n	800b00c <_dtoa_r+0xabc>
 800afc6:	2a00      	cmp	r2, #0
 800afc8:	ddee      	ble.n	800afa8 <_dtoa_r+0xa58>
 800afca:	ee18 1a10 	vmov	r1, s16
 800afce:	2201      	movs	r2, #1
 800afd0:	4620      	mov	r0, r4
 800afd2:	f000 faf1 	bl	800b5b8 <__lshift>
 800afd6:	4631      	mov	r1, r6
 800afd8:	ee08 0a10 	vmov	s16, r0
 800afdc:	f000 fb5c 	bl	800b698 <__mcmp>
 800afe0:	2800      	cmp	r0, #0
 800afe2:	dc03      	bgt.n	800afec <_dtoa_r+0xa9c>
 800afe4:	d1e0      	bne.n	800afa8 <_dtoa_r+0xa58>
 800afe6:	f01a 0f01 	tst.w	sl, #1
 800afea:	d0dd      	beq.n	800afa8 <_dtoa_r+0xa58>
 800afec:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800aff0:	d1d7      	bne.n	800afa2 <_dtoa_r+0xa52>
 800aff2:	2339      	movs	r3, #57	; 0x39
 800aff4:	f88b 3000 	strb.w	r3, [fp]
 800aff8:	462b      	mov	r3, r5
 800affa:	461d      	mov	r5, r3
 800affc:	3b01      	subs	r3, #1
 800affe:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b002:	2a39      	cmp	r2, #57	; 0x39
 800b004:	d071      	beq.n	800b0ea <_dtoa_r+0xb9a>
 800b006:	3201      	adds	r2, #1
 800b008:	701a      	strb	r2, [r3, #0]
 800b00a:	e746      	b.n	800ae9a <_dtoa_r+0x94a>
 800b00c:	2a00      	cmp	r2, #0
 800b00e:	dd07      	ble.n	800b020 <_dtoa_r+0xad0>
 800b010:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b014:	d0ed      	beq.n	800aff2 <_dtoa_r+0xaa2>
 800b016:	f10a 0301 	add.w	r3, sl, #1
 800b01a:	f88b 3000 	strb.w	r3, [fp]
 800b01e:	e73c      	b.n	800ae9a <_dtoa_r+0x94a>
 800b020:	9b05      	ldr	r3, [sp, #20]
 800b022:	f809 ac01 	strb.w	sl, [r9, #-1]
 800b026:	4599      	cmp	r9, r3
 800b028:	d047      	beq.n	800b0ba <_dtoa_r+0xb6a>
 800b02a:	ee18 1a10 	vmov	r1, s16
 800b02e:	2300      	movs	r3, #0
 800b030:	220a      	movs	r2, #10
 800b032:	4620      	mov	r0, r4
 800b034:	f000 f910 	bl	800b258 <__multadd>
 800b038:	45b8      	cmp	r8, r7
 800b03a:	ee08 0a10 	vmov	s16, r0
 800b03e:	f04f 0300 	mov.w	r3, #0
 800b042:	f04f 020a 	mov.w	r2, #10
 800b046:	4641      	mov	r1, r8
 800b048:	4620      	mov	r0, r4
 800b04a:	d106      	bne.n	800b05a <_dtoa_r+0xb0a>
 800b04c:	f000 f904 	bl	800b258 <__multadd>
 800b050:	4680      	mov	r8, r0
 800b052:	4607      	mov	r7, r0
 800b054:	f109 0901 	add.w	r9, r9, #1
 800b058:	e772      	b.n	800af40 <_dtoa_r+0x9f0>
 800b05a:	f000 f8fd 	bl	800b258 <__multadd>
 800b05e:	4639      	mov	r1, r7
 800b060:	4680      	mov	r8, r0
 800b062:	2300      	movs	r3, #0
 800b064:	220a      	movs	r2, #10
 800b066:	4620      	mov	r0, r4
 800b068:	f000 f8f6 	bl	800b258 <__multadd>
 800b06c:	4607      	mov	r7, r0
 800b06e:	e7f1      	b.n	800b054 <_dtoa_r+0xb04>
 800b070:	9b03      	ldr	r3, [sp, #12]
 800b072:	9302      	str	r3, [sp, #8]
 800b074:	9d01      	ldr	r5, [sp, #4]
 800b076:	ee18 0a10 	vmov	r0, s16
 800b07a:	4631      	mov	r1, r6
 800b07c:	f7ff f9da 	bl	800a434 <quorem>
 800b080:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b084:	9b01      	ldr	r3, [sp, #4]
 800b086:	f805 ab01 	strb.w	sl, [r5], #1
 800b08a:	1aea      	subs	r2, r5, r3
 800b08c:	9b02      	ldr	r3, [sp, #8]
 800b08e:	4293      	cmp	r3, r2
 800b090:	dd09      	ble.n	800b0a6 <_dtoa_r+0xb56>
 800b092:	ee18 1a10 	vmov	r1, s16
 800b096:	2300      	movs	r3, #0
 800b098:	220a      	movs	r2, #10
 800b09a:	4620      	mov	r0, r4
 800b09c:	f000 f8dc 	bl	800b258 <__multadd>
 800b0a0:	ee08 0a10 	vmov	s16, r0
 800b0a4:	e7e7      	b.n	800b076 <_dtoa_r+0xb26>
 800b0a6:	9b02      	ldr	r3, [sp, #8]
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	bfc8      	it	gt
 800b0ac:	461d      	movgt	r5, r3
 800b0ae:	9b01      	ldr	r3, [sp, #4]
 800b0b0:	bfd8      	it	le
 800b0b2:	2501      	movle	r5, #1
 800b0b4:	441d      	add	r5, r3
 800b0b6:	f04f 0800 	mov.w	r8, #0
 800b0ba:	ee18 1a10 	vmov	r1, s16
 800b0be:	2201      	movs	r2, #1
 800b0c0:	4620      	mov	r0, r4
 800b0c2:	f000 fa79 	bl	800b5b8 <__lshift>
 800b0c6:	4631      	mov	r1, r6
 800b0c8:	ee08 0a10 	vmov	s16, r0
 800b0cc:	f000 fae4 	bl	800b698 <__mcmp>
 800b0d0:	2800      	cmp	r0, #0
 800b0d2:	dc91      	bgt.n	800aff8 <_dtoa_r+0xaa8>
 800b0d4:	d102      	bne.n	800b0dc <_dtoa_r+0xb8c>
 800b0d6:	f01a 0f01 	tst.w	sl, #1
 800b0da:	d18d      	bne.n	800aff8 <_dtoa_r+0xaa8>
 800b0dc:	462b      	mov	r3, r5
 800b0de:	461d      	mov	r5, r3
 800b0e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b0e4:	2a30      	cmp	r2, #48	; 0x30
 800b0e6:	d0fa      	beq.n	800b0de <_dtoa_r+0xb8e>
 800b0e8:	e6d7      	b.n	800ae9a <_dtoa_r+0x94a>
 800b0ea:	9a01      	ldr	r2, [sp, #4]
 800b0ec:	429a      	cmp	r2, r3
 800b0ee:	d184      	bne.n	800affa <_dtoa_r+0xaaa>
 800b0f0:	9b00      	ldr	r3, [sp, #0]
 800b0f2:	3301      	adds	r3, #1
 800b0f4:	9300      	str	r3, [sp, #0]
 800b0f6:	2331      	movs	r3, #49	; 0x31
 800b0f8:	7013      	strb	r3, [r2, #0]
 800b0fa:	e6ce      	b.n	800ae9a <_dtoa_r+0x94a>
 800b0fc:	4b09      	ldr	r3, [pc, #36]	; (800b124 <_dtoa_r+0xbd4>)
 800b0fe:	f7ff ba95 	b.w	800a62c <_dtoa_r+0xdc>
 800b102:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b104:	2b00      	cmp	r3, #0
 800b106:	f47f aa6e 	bne.w	800a5e6 <_dtoa_r+0x96>
 800b10a:	4b07      	ldr	r3, [pc, #28]	; (800b128 <_dtoa_r+0xbd8>)
 800b10c:	f7ff ba8e 	b.w	800a62c <_dtoa_r+0xdc>
 800b110:	9b02      	ldr	r3, [sp, #8]
 800b112:	2b00      	cmp	r3, #0
 800b114:	dcae      	bgt.n	800b074 <_dtoa_r+0xb24>
 800b116:	9b06      	ldr	r3, [sp, #24]
 800b118:	2b02      	cmp	r3, #2
 800b11a:	f73f aea8 	bgt.w	800ae6e <_dtoa_r+0x91e>
 800b11e:	e7a9      	b.n	800b074 <_dtoa_r+0xb24>
 800b120:	08022aa4 	.word	0x08022aa4
 800b124:	0800d3dc 	.word	0x0800d3dc
 800b128:	08022a3c 	.word	0x08022a3c

0800b12c <fiprintf>:
 800b12c:	b40e      	push	{r1, r2, r3}
 800b12e:	b503      	push	{r0, r1, lr}
 800b130:	4601      	mov	r1, r0
 800b132:	ab03      	add	r3, sp, #12
 800b134:	4805      	ldr	r0, [pc, #20]	; (800b14c <fiprintf+0x20>)
 800b136:	f853 2b04 	ldr.w	r2, [r3], #4
 800b13a:	6800      	ldr	r0, [r0, #0]
 800b13c:	9301      	str	r3, [sp, #4]
 800b13e:	f000 fbed 	bl	800b91c <_vfiprintf_r>
 800b142:	b002      	add	sp, #8
 800b144:	f85d eb04 	ldr.w	lr, [sp], #4
 800b148:	b003      	add	sp, #12
 800b14a:	4770      	bx	lr
 800b14c:	2000113c 	.word	0x2000113c

0800b150 <_localeconv_r>:
 800b150:	4800      	ldr	r0, [pc, #0]	; (800b154 <_localeconv_r+0x4>)
 800b152:	4770      	bx	lr
 800b154:	20001290 	.word	0x20001290

0800b158 <_lseek_r>:
 800b158:	b538      	push	{r3, r4, r5, lr}
 800b15a:	4d07      	ldr	r5, [pc, #28]	; (800b178 <_lseek_r+0x20>)
 800b15c:	4604      	mov	r4, r0
 800b15e:	4608      	mov	r0, r1
 800b160:	4611      	mov	r1, r2
 800b162:	2200      	movs	r2, #0
 800b164:	602a      	str	r2, [r5, #0]
 800b166:	461a      	mov	r2, r3
 800b168:	f7f6 fbfc 	bl	8001964 <_lseek>
 800b16c:	1c43      	adds	r3, r0, #1
 800b16e:	d102      	bne.n	800b176 <_lseek_r+0x1e>
 800b170:	682b      	ldr	r3, [r5, #0]
 800b172:	b103      	cbz	r3, 800b176 <_lseek_r+0x1e>
 800b174:	6023      	str	r3, [r4, #0]
 800b176:	bd38      	pop	{r3, r4, r5, pc}
 800b178:	2000167c 	.word	0x2000167c

0800b17c <__malloc_lock>:
 800b17c:	4801      	ldr	r0, [pc, #4]	; (800b184 <__malloc_lock+0x8>)
 800b17e:	f7fe bad2 	b.w	8009726 <__retarget_lock_acquire_recursive>
 800b182:	bf00      	nop
 800b184:	20001670 	.word	0x20001670

0800b188 <__malloc_unlock>:
 800b188:	4801      	ldr	r0, [pc, #4]	; (800b190 <__malloc_unlock+0x8>)
 800b18a:	f7fe bacd 	b.w	8009728 <__retarget_lock_release_recursive>
 800b18e:	bf00      	nop
 800b190:	20001670 	.word	0x20001670

0800b194 <_Balloc>:
 800b194:	b570      	push	{r4, r5, r6, lr}
 800b196:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b198:	4604      	mov	r4, r0
 800b19a:	460d      	mov	r5, r1
 800b19c:	b976      	cbnz	r6, 800b1bc <_Balloc+0x28>
 800b19e:	2010      	movs	r0, #16
 800b1a0:	f7f9 f9d0 	bl	8004544 <__wrap_malloc>
 800b1a4:	4602      	mov	r2, r0
 800b1a6:	6260      	str	r0, [r4, #36]	; 0x24
 800b1a8:	b920      	cbnz	r0, 800b1b4 <_Balloc+0x20>
 800b1aa:	4b18      	ldr	r3, [pc, #96]	; (800b20c <_Balloc+0x78>)
 800b1ac:	4818      	ldr	r0, [pc, #96]	; (800b210 <_Balloc+0x7c>)
 800b1ae:	2166      	movs	r1, #102	; 0x66
 800b1b0:	f7ff f912 	bl	800a3d8 <__assert_func>
 800b1b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b1b8:	6006      	str	r6, [r0, #0]
 800b1ba:	60c6      	str	r6, [r0, #12]
 800b1bc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b1be:	68f3      	ldr	r3, [r6, #12]
 800b1c0:	b183      	cbz	r3, 800b1e4 <_Balloc+0x50>
 800b1c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b1c4:	68db      	ldr	r3, [r3, #12]
 800b1c6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b1ca:	b9b8      	cbnz	r0, 800b1fc <_Balloc+0x68>
 800b1cc:	2101      	movs	r1, #1
 800b1ce:	fa01 f605 	lsl.w	r6, r1, r5
 800b1d2:	1d72      	adds	r2, r6, #5
 800b1d4:	0092      	lsls	r2, r2, #2
 800b1d6:	4620      	mov	r0, r4
 800b1d8:	f000 fb60 	bl	800b89c <_calloc_r>
 800b1dc:	b160      	cbz	r0, 800b1f8 <_Balloc+0x64>
 800b1de:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b1e2:	e00e      	b.n	800b202 <_Balloc+0x6e>
 800b1e4:	2221      	movs	r2, #33	; 0x21
 800b1e6:	2104      	movs	r1, #4
 800b1e8:	4620      	mov	r0, r4
 800b1ea:	f000 fb57 	bl	800b89c <_calloc_r>
 800b1ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b1f0:	60f0      	str	r0, [r6, #12]
 800b1f2:	68db      	ldr	r3, [r3, #12]
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d1e4      	bne.n	800b1c2 <_Balloc+0x2e>
 800b1f8:	2000      	movs	r0, #0
 800b1fa:	bd70      	pop	{r4, r5, r6, pc}
 800b1fc:	6802      	ldr	r2, [r0, #0]
 800b1fe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b202:	2300      	movs	r3, #0
 800b204:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b208:	e7f7      	b.n	800b1fa <_Balloc+0x66>
 800b20a:	bf00      	nop
 800b20c:	0802298e 	.word	0x0802298e
 800b210:	08022ab5 	.word	0x08022ab5

0800b214 <_Bfree>:
 800b214:	b570      	push	{r4, r5, r6, lr}
 800b216:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b218:	4605      	mov	r5, r0
 800b21a:	460c      	mov	r4, r1
 800b21c:	b976      	cbnz	r6, 800b23c <_Bfree+0x28>
 800b21e:	2010      	movs	r0, #16
 800b220:	f7f9 f990 	bl	8004544 <__wrap_malloc>
 800b224:	4602      	mov	r2, r0
 800b226:	6268      	str	r0, [r5, #36]	; 0x24
 800b228:	b920      	cbnz	r0, 800b234 <_Bfree+0x20>
 800b22a:	4b09      	ldr	r3, [pc, #36]	; (800b250 <_Bfree+0x3c>)
 800b22c:	4809      	ldr	r0, [pc, #36]	; (800b254 <_Bfree+0x40>)
 800b22e:	218a      	movs	r1, #138	; 0x8a
 800b230:	f7ff f8d2 	bl	800a3d8 <__assert_func>
 800b234:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b238:	6006      	str	r6, [r0, #0]
 800b23a:	60c6      	str	r6, [r0, #12]
 800b23c:	b13c      	cbz	r4, 800b24e <_Bfree+0x3a>
 800b23e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b240:	6862      	ldr	r2, [r4, #4]
 800b242:	68db      	ldr	r3, [r3, #12]
 800b244:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b248:	6021      	str	r1, [r4, #0]
 800b24a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b24e:	bd70      	pop	{r4, r5, r6, pc}
 800b250:	0802298e 	.word	0x0802298e
 800b254:	08022ab5 	.word	0x08022ab5

0800b258 <__multadd>:
 800b258:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b25c:	690d      	ldr	r5, [r1, #16]
 800b25e:	4607      	mov	r7, r0
 800b260:	460c      	mov	r4, r1
 800b262:	461e      	mov	r6, r3
 800b264:	f101 0c14 	add.w	ip, r1, #20
 800b268:	2000      	movs	r0, #0
 800b26a:	f8dc 3000 	ldr.w	r3, [ip]
 800b26e:	b299      	uxth	r1, r3
 800b270:	fb02 6101 	mla	r1, r2, r1, r6
 800b274:	0c1e      	lsrs	r6, r3, #16
 800b276:	0c0b      	lsrs	r3, r1, #16
 800b278:	fb02 3306 	mla	r3, r2, r6, r3
 800b27c:	b289      	uxth	r1, r1
 800b27e:	3001      	adds	r0, #1
 800b280:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b284:	4285      	cmp	r5, r0
 800b286:	f84c 1b04 	str.w	r1, [ip], #4
 800b28a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b28e:	dcec      	bgt.n	800b26a <__multadd+0x12>
 800b290:	b30e      	cbz	r6, 800b2d6 <__multadd+0x7e>
 800b292:	68a3      	ldr	r3, [r4, #8]
 800b294:	42ab      	cmp	r3, r5
 800b296:	dc19      	bgt.n	800b2cc <__multadd+0x74>
 800b298:	6861      	ldr	r1, [r4, #4]
 800b29a:	4638      	mov	r0, r7
 800b29c:	3101      	adds	r1, #1
 800b29e:	f7ff ff79 	bl	800b194 <_Balloc>
 800b2a2:	4680      	mov	r8, r0
 800b2a4:	b928      	cbnz	r0, 800b2b2 <__multadd+0x5a>
 800b2a6:	4602      	mov	r2, r0
 800b2a8:	4b0c      	ldr	r3, [pc, #48]	; (800b2dc <__multadd+0x84>)
 800b2aa:	480d      	ldr	r0, [pc, #52]	; (800b2e0 <__multadd+0x88>)
 800b2ac:	21b5      	movs	r1, #181	; 0xb5
 800b2ae:	f7ff f893 	bl	800a3d8 <__assert_func>
 800b2b2:	6922      	ldr	r2, [r4, #16]
 800b2b4:	3202      	adds	r2, #2
 800b2b6:	f104 010c 	add.w	r1, r4, #12
 800b2ba:	0092      	lsls	r2, r2, #2
 800b2bc:	300c      	adds	r0, #12
 800b2be:	f7fe fa45 	bl	800974c <memcpy>
 800b2c2:	4621      	mov	r1, r4
 800b2c4:	4638      	mov	r0, r7
 800b2c6:	f7ff ffa5 	bl	800b214 <_Bfree>
 800b2ca:	4644      	mov	r4, r8
 800b2cc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b2d0:	3501      	adds	r5, #1
 800b2d2:	615e      	str	r6, [r3, #20]
 800b2d4:	6125      	str	r5, [r4, #16]
 800b2d6:	4620      	mov	r0, r4
 800b2d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b2dc:	08022aa4 	.word	0x08022aa4
 800b2e0:	08022ab5 	.word	0x08022ab5

0800b2e4 <__hi0bits>:
 800b2e4:	0c03      	lsrs	r3, r0, #16
 800b2e6:	041b      	lsls	r3, r3, #16
 800b2e8:	b9d3      	cbnz	r3, 800b320 <__hi0bits+0x3c>
 800b2ea:	0400      	lsls	r0, r0, #16
 800b2ec:	2310      	movs	r3, #16
 800b2ee:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b2f2:	bf04      	itt	eq
 800b2f4:	0200      	lsleq	r0, r0, #8
 800b2f6:	3308      	addeq	r3, #8
 800b2f8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b2fc:	bf04      	itt	eq
 800b2fe:	0100      	lsleq	r0, r0, #4
 800b300:	3304      	addeq	r3, #4
 800b302:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b306:	bf04      	itt	eq
 800b308:	0080      	lsleq	r0, r0, #2
 800b30a:	3302      	addeq	r3, #2
 800b30c:	2800      	cmp	r0, #0
 800b30e:	db05      	blt.n	800b31c <__hi0bits+0x38>
 800b310:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b314:	f103 0301 	add.w	r3, r3, #1
 800b318:	bf08      	it	eq
 800b31a:	2320      	moveq	r3, #32
 800b31c:	4618      	mov	r0, r3
 800b31e:	4770      	bx	lr
 800b320:	2300      	movs	r3, #0
 800b322:	e7e4      	b.n	800b2ee <__hi0bits+0xa>

0800b324 <__lo0bits>:
 800b324:	6803      	ldr	r3, [r0, #0]
 800b326:	f013 0207 	ands.w	r2, r3, #7
 800b32a:	4601      	mov	r1, r0
 800b32c:	d00b      	beq.n	800b346 <__lo0bits+0x22>
 800b32e:	07da      	lsls	r2, r3, #31
 800b330:	d423      	bmi.n	800b37a <__lo0bits+0x56>
 800b332:	0798      	lsls	r0, r3, #30
 800b334:	bf49      	itett	mi
 800b336:	085b      	lsrmi	r3, r3, #1
 800b338:	089b      	lsrpl	r3, r3, #2
 800b33a:	2001      	movmi	r0, #1
 800b33c:	600b      	strmi	r3, [r1, #0]
 800b33e:	bf5c      	itt	pl
 800b340:	600b      	strpl	r3, [r1, #0]
 800b342:	2002      	movpl	r0, #2
 800b344:	4770      	bx	lr
 800b346:	b298      	uxth	r0, r3
 800b348:	b9a8      	cbnz	r0, 800b376 <__lo0bits+0x52>
 800b34a:	0c1b      	lsrs	r3, r3, #16
 800b34c:	2010      	movs	r0, #16
 800b34e:	b2da      	uxtb	r2, r3
 800b350:	b90a      	cbnz	r2, 800b356 <__lo0bits+0x32>
 800b352:	3008      	adds	r0, #8
 800b354:	0a1b      	lsrs	r3, r3, #8
 800b356:	071a      	lsls	r2, r3, #28
 800b358:	bf04      	itt	eq
 800b35a:	091b      	lsreq	r3, r3, #4
 800b35c:	3004      	addeq	r0, #4
 800b35e:	079a      	lsls	r2, r3, #30
 800b360:	bf04      	itt	eq
 800b362:	089b      	lsreq	r3, r3, #2
 800b364:	3002      	addeq	r0, #2
 800b366:	07da      	lsls	r2, r3, #31
 800b368:	d403      	bmi.n	800b372 <__lo0bits+0x4e>
 800b36a:	085b      	lsrs	r3, r3, #1
 800b36c:	f100 0001 	add.w	r0, r0, #1
 800b370:	d005      	beq.n	800b37e <__lo0bits+0x5a>
 800b372:	600b      	str	r3, [r1, #0]
 800b374:	4770      	bx	lr
 800b376:	4610      	mov	r0, r2
 800b378:	e7e9      	b.n	800b34e <__lo0bits+0x2a>
 800b37a:	2000      	movs	r0, #0
 800b37c:	4770      	bx	lr
 800b37e:	2020      	movs	r0, #32
 800b380:	4770      	bx	lr
	...

0800b384 <__i2b>:
 800b384:	b510      	push	{r4, lr}
 800b386:	460c      	mov	r4, r1
 800b388:	2101      	movs	r1, #1
 800b38a:	f7ff ff03 	bl	800b194 <_Balloc>
 800b38e:	4602      	mov	r2, r0
 800b390:	b928      	cbnz	r0, 800b39e <__i2b+0x1a>
 800b392:	4b05      	ldr	r3, [pc, #20]	; (800b3a8 <__i2b+0x24>)
 800b394:	4805      	ldr	r0, [pc, #20]	; (800b3ac <__i2b+0x28>)
 800b396:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b39a:	f7ff f81d 	bl	800a3d8 <__assert_func>
 800b39e:	2301      	movs	r3, #1
 800b3a0:	6144      	str	r4, [r0, #20]
 800b3a2:	6103      	str	r3, [r0, #16]
 800b3a4:	bd10      	pop	{r4, pc}
 800b3a6:	bf00      	nop
 800b3a8:	08022aa4 	.word	0x08022aa4
 800b3ac:	08022ab5 	.word	0x08022ab5

0800b3b0 <__multiply>:
 800b3b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3b4:	4691      	mov	r9, r2
 800b3b6:	690a      	ldr	r2, [r1, #16]
 800b3b8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b3bc:	429a      	cmp	r2, r3
 800b3be:	bfb8      	it	lt
 800b3c0:	460b      	movlt	r3, r1
 800b3c2:	460c      	mov	r4, r1
 800b3c4:	bfbc      	itt	lt
 800b3c6:	464c      	movlt	r4, r9
 800b3c8:	4699      	movlt	r9, r3
 800b3ca:	6927      	ldr	r7, [r4, #16]
 800b3cc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b3d0:	68a3      	ldr	r3, [r4, #8]
 800b3d2:	6861      	ldr	r1, [r4, #4]
 800b3d4:	eb07 060a 	add.w	r6, r7, sl
 800b3d8:	42b3      	cmp	r3, r6
 800b3da:	b085      	sub	sp, #20
 800b3dc:	bfb8      	it	lt
 800b3de:	3101      	addlt	r1, #1
 800b3e0:	f7ff fed8 	bl	800b194 <_Balloc>
 800b3e4:	b930      	cbnz	r0, 800b3f4 <__multiply+0x44>
 800b3e6:	4602      	mov	r2, r0
 800b3e8:	4b44      	ldr	r3, [pc, #272]	; (800b4fc <__multiply+0x14c>)
 800b3ea:	4845      	ldr	r0, [pc, #276]	; (800b500 <__multiply+0x150>)
 800b3ec:	f240 115d 	movw	r1, #349	; 0x15d
 800b3f0:	f7fe fff2 	bl	800a3d8 <__assert_func>
 800b3f4:	f100 0514 	add.w	r5, r0, #20
 800b3f8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b3fc:	462b      	mov	r3, r5
 800b3fe:	2200      	movs	r2, #0
 800b400:	4543      	cmp	r3, r8
 800b402:	d321      	bcc.n	800b448 <__multiply+0x98>
 800b404:	f104 0314 	add.w	r3, r4, #20
 800b408:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b40c:	f109 0314 	add.w	r3, r9, #20
 800b410:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b414:	9202      	str	r2, [sp, #8]
 800b416:	1b3a      	subs	r2, r7, r4
 800b418:	3a15      	subs	r2, #21
 800b41a:	f022 0203 	bic.w	r2, r2, #3
 800b41e:	3204      	adds	r2, #4
 800b420:	f104 0115 	add.w	r1, r4, #21
 800b424:	428f      	cmp	r7, r1
 800b426:	bf38      	it	cc
 800b428:	2204      	movcc	r2, #4
 800b42a:	9201      	str	r2, [sp, #4]
 800b42c:	9a02      	ldr	r2, [sp, #8]
 800b42e:	9303      	str	r3, [sp, #12]
 800b430:	429a      	cmp	r2, r3
 800b432:	d80c      	bhi.n	800b44e <__multiply+0x9e>
 800b434:	2e00      	cmp	r6, #0
 800b436:	dd03      	ble.n	800b440 <__multiply+0x90>
 800b438:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d05a      	beq.n	800b4f6 <__multiply+0x146>
 800b440:	6106      	str	r6, [r0, #16]
 800b442:	b005      	add	sp, #20
 800b444:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b448:	f843 2b04 	str.w	r2, [r3], #4
 800b44c:	e7d8      	b.n	800b400 <__multiply+0x50>
 800b44e:	f8b3 a000 	ldrh.w	sl, [r3]
 800b452:	f1ba 0f00 	cmp.w	sl, #0
 800b456:	d024      	beq.n	800b4a2 <__multiply+0xf2>
 800b458:	f104 0e14 	add.w	lr, r4, #20
 800b45c:	46a9      	mov	r9, r5
 800b45e:	f04f 0c00 	mov.w	ip, #0
 800b462:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b466:	f8d9 1000 	ldr.w	r1, [r9]
 800b46a:	fa1f fb82 	uxth.w	fp, r2
 800b46e:	b289      	uxth	r1, r1
 800b470:	fb0a 110b 	mla	r1, sl, fp, r1
 800b474:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b478:	f8d9 2000 	ldr.w	r2, [r9]
 800b47c:	4461      	add	r1, ip
 800b47e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b482:	fb0a c20b 	mla	r2, sl, fp, ip
 800b486:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b48a:	b289      	uxth	r1, r1
 800b48c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b490:	4577      	cmp	r7, lr
 800b492:	f849 1b04 	str.w	r1, [r9], #4
 800b496:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b49a:	d8e2      	bhi.n	800b462 <__multiply+0xb2>
 800b49c:	9a01      	ldr	r2, [sp, #4]
 800b49e:	f845 c002 	str.w	ip, [r5, r2]
 800b4a2:	9a03      	ldr	r2, [sp, #12]
 800b4a4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b4a8:	3304      	adds	r3, #4
 800b4aa:	f1b9 0f00 	cmp.w	r9, #0
 800b4ae:	d020      	beq.n	800b4f2 <__multiply+0x142>
 800b4b0:	6829      	ldr	r1, [r5, #0]
 800b4b2:	f104 0c14 	add.w	ip, r4, #20
 800b4b6:	46ae      	mov	lr, r5
 800b4b8:	f04f 0a00 	mov.w	sl, #0
 800b4bc:	f8bc b000 	ldrh.w	fp, [ip]
 800b4c0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b4c4:	fb09 220b 	mla	r2, r9, fp, r2
 800b4c8:	4492      	add	sl, r2
 800b4ca:	b289      	uxth	r1, r1
 800b4cc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800b4d0:	f84e 1b04 	str.w	r1, [lr], #4
 800b4d4:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b4d8:	f8be 1000 	ldrh.w	r1, [lr]
 800b4dc:	0c12      	lsrs	r2, r2, #16
 800b4de:	fb09 1102 	mla	r1, r9, r2, r1
 800b4e2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800b4e6:	4567      	cmp	r7, ip
 800b4e8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b4ec:	d8e6      	bhi.n	800b4bc <__multiply+0x10c>
 800b4ee:	9a01      	ldr	r2, [sp, #4]
 800b4f0:	50a9      	str	r1, [r5, r2]
 800b4f2:	3504      	adds	r5, #4
 800b4f4:	e79a      	b.n	800b42c <__multiply+0x7c>
 800b4f6:	3e01      	subs	r6, #1
 800b4f8:	e79c      	b.n	800b434 <__multiply+0x84>
 800b4fa:	bf00      	nop
 800b4fc:	08022aa4 	.word	0x08022aa4
 800b500:	08022ab5 	.word	0x08022ab5

0800b504 <__pow5mult>:
 800b504:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b508:	4615      	mov	r5, r2
 800b50a:	f012 0203 	ands.w	r2, r2, #3
 800b50e:	4606      	mov	r6, r0
 800b510:	460f      	mov	r7, r1
 800b512:	d007      	beq.n	800b524 <__pow5mult+0x20>
 800b514:	4c25      	ldr	r4, [pc, #148]	; (800b5ac <__pow5mult+0xa8>)
 800b516:	3a01      	subs	r2, #1
 800b518:	2300      	movs	r3, #0
 800b51a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b51e:	f7ff fe9b 	bl	800b258 <__multadd>
 800b522:	4607      	mov	r7, r0
 800b524:	10ad      	asrs	r5, r5, #2
 800b526:	d03d      	beq.n	800b5a4 <__pow5mult+0xa0>
 800b528:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b52a:	b97c      	cbnz	r4, 800b54c <__pow5mult+0x48>
 800b52c:	2010      	movs	r0, #16
 800b52e:	f7f9 f809 	bl	8004544 <__wrap_malloc>
 800b532:	4602      	mov	r2, r0
 800b534:	6270      	str	r0, [r6, #36]	; 0x24
 800b536:	b928      	cbnz	r0, 800b544 <__pow5mult+0x40>
 800b538:	4b1d      	ldr	r3, [pc, #116]	; (800b5b0 <__pow5mult+0xac>)
 800b53a:	481e      	ldr	r0, [pc, #120]	; (800b5b4 <__pow5mult+0xb0>)
 800b53c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b540:	f7fe ff4a 	bl	800a3d8 <__assert_func>
 800b544:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b548:	6004      	str	r4, [r0, #0]
 800b54a:	60c4      	str	r4, [r0, #12]
 800b54c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b550:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b554:	b94c      	cbnz	r4, 800b56a <__pow5mult+0x66>
 800b556:	f240 2171 	movw	r1, #625	; 0x271
 800b55a:	4630      	mov	r0, r6
 800b55c:	f7ff ff12 	bl	800b384 <__i2b>
 800b560:	2300      	movs	r3, #0
 800b562:	f8c8 0008 	str.w	r0, [r8, #8]
 800b566:	4604      	mov	r4, r0
 800b568:	6003      	str	r3, [r0, #0]
 800b56a:	f04f 0900 	mov.w	r9, #0
 800b56e:	07eb      	lsls	r3, r5, #31
 800b570:	d50a      	bpl.n	800b588 <__pow5mult+0x84>
 800b572:	4639      	mov	r1, r7
 800b574:	4622      	mov	r2, r4
 800b576:	4630      	mov	r0, r6
 800b578:	f7ff ff1a 	bl	800b3b0 <__multiply>
 800b57c:	4639      	mov	r1, r7
 800b57e:	4680      	mov	r8, r0
 800b580:	4630      	mov	r0, r6
 800b582:	f7ff fe47 	bl	800b214 <_Bfree>
 800b586:	4647      	mov	r7, r8
 800b588:	106d      	asrs	r5, r5, #1
 800b58a:	d00b      	beq.n	800b5a4 <__pow5mult+0xa0>
 800b58c:	6820      	ldr	r0, [r4, #0]
 800b58e:	b938      	cbnz	r0, 800b5a0 <__pow5mult+0x9c>
 800b590:	4622      	mov	r2, r4
 800b592:	4621      	mov	r1, r4
 800b594:	4630      	mov	r0, r6
 800b596:	f7ff ff0b 	bl	800b3b0 <__multiply>
 800b59a:	6020      	str	r0, [r4, #0]
 800b59c:	f8c0 9000 	str.w	r9, [r0]
 800b5a0:	4604      	mov	r4, r0
 800b5a2:	e7e4      	b.n	800b56e <__pow5mult+0x6a>
 800b5a4:	4638      	mov	r0, r7
 800b5a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b5aa:	bf00      	nop
 800b5ac:	08022c08 	.word	0x08022c08
 800b5b0:	0802298e 	.word	0x0802298e
 800b5b4:	08022ab5 	.word	0x08022ab5

0800b5b8 <__lshift>:
 800b5b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b5bc:	460c      	mov	r4, r1
 800b5be:	6849      	ldr	r1, [r1, #4]
 800b5c0:	6923      	ldr	r3, [r4, #16]
 800b5c2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b5c6:	68a3      	ldr	r3, [r4, #8]
 800b5c8:	4607      	mov	r7, r0
 800b5ca:	4691      	mov	r9, r2
 800b5cc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b5d0:	f108 0601 	add.w	r6, r8, #1
 800b5d4:	42b3      	cmp	r3, r6
 800b5d6:	db0b      	blt.n	800b5f0 <__lshift+0x38>
 800b5d8:	4638      	mov	r0, r7
 800b5da:	f7ff fddb 	bl	800b194 <_Balloc>
 800b5de:	4605      	mov	r5, r0
 800b5e0:	b948      	cbnz	r0, 800b5f6 <__lshift+0x3e>
 800b5e2:	4602      	mov	r2, r0
 800b5e4:	4b2a      	ldr	r3, [pc, #168]	; (800b690 <__lshift+0xd8>)
 800b5e6:	482b      	ldr	r0, [pc, #172]	; (800b694 <__lshift+0xdc>)
 800b5e8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b5ec:	f7fe fef4 	bl	800a3d8 <__assert_func>
 800b5f0:	3101      	adds	r1, #1
 800b5f2:	005b      	lsls	r3, r3, #1
 800b5f4:	e7ee      	b.n	800b5d4 <__lshift+0x1c>
 800b5f6:	2300      	movs	r3, #0
 800b5f8:	f100 0114 	add.w	r1, r0, #20
 800b5fc:	f100 0210 	add.w	r2, r0, #16
 800b600:	4618      	mov	r0, r3
 800b602:	4553      	cmp	r3, sl
 800b604:	db37      	blt.n	800b676 <__lshift+0xbe>
 800b606:	6920      	ldr	r0, [r4, #16]
 800b608:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b60c:	f104 0314 	add.w	r3, r4, #20
 800b610:	f019 091f 	ands.w	r9, r9, #31
 800b614:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b618:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b61c:	d02f      	beq.n	800b67e <__lshift+0xc6>
 800b61e:	f1c9 0e20 	rsb	lr, r9, #32
 800b622:	468a      	mov	sl, r1
 800b624:	f04f 0c00 	mov.w	ip, #0
 800b628:	681a      	ldr	r2, [r3, #0]
 800b62a:	fa02 f209 	lsl.w	r2, r2, r9
 800b62e:	ea42 020c 	orr.w	r2, r2, ip
 800b632:	f84a 2b04 	str.w	r2, [sl], #4
 800b636:	f853 2b04 	ldr.w	r2, [r3], #4
 800b63a:	4298      	cmp	r0, r3
 800b63c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800b640:	d8f2      	bhi.n	800b628 <__lshift+0x70>
 800b642:	1b03      	subs	r3, r0, r4
 800b644:	3b15      	subs	r3, #21
 800b646:	f023 0303 	bic.w	r3, r3, #3
 800b64a:	3304      	adds	r3, #4
 800b64c:	f104 0215 	add.w	r2, r4, #21
 800b650:	4290      	cmp	r0, r2
 800b652:	bf38      	it	cc
 800b654:	2304      	movcc	r3, #4
 800b656:	f841 c003 	str.w	ip, [r1, r3]
 800b65a:	f1bc 0f00 	cmp.w	ip, #0
 800b65e:	d001      	beq.n	800b664 <__lshift+0xac>
 800b660:	f108 0602 	add.w	r6, r8, #2
 800b664:	3e01      	subs	r6, #1
 800b666:	4638      	mov	r0, r7
 800b668:	612e      	str	r6, [r5, #16]
 800b66a:	4621      	mov	r1, r4
 800b66c:	f7ff fdd2 	bl	800b214 <_Bfree>
 800b670:	4628      	mov	r0, r5
 800b672:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b676:	f842 0f04 	str.w	r0, [r2, #4]!
 800b67a:	3301      	adds	r3, #1
 800b67c:	e7c1      	b.n	800b602 <__lshift+0x4a>
 800b67e:	3904      	subs	r1, #4
 800b680:	f853 2b04 	ldr.w	r2, [r3], #4
 800b684:	f841 2f04 	str.w	r2, [r1, #4]!
 800b688:	4298      	cmp	r0, r3
 800b68a:	d8f9      	bhi.n	800b680 <__lshift+0xc8>
 800b68c:	e7ea      	b.n	800b664 <__lshift+0xac>
 800b68e:	bf00      	nop
 800b690:	08022aa4 	.word	0x08022aa4
 800b694:	08022ab5 	.word	0x08022ab5

0800b698 <__mcmp>:
 800b698:	b530      	push	{r4, r5, lr}
 800b69a:	6902      	ldr	r2, [r0, #16]
 800b69c:	690c      	ldr	r4, [r1, #16]
 800b69e:	1b12      	subs	r2, r2, r4
 800b6a0:	d10e      	bne.n	800b6c0 <__mcmp+0x28>
 800b6a2:	f100 0314 	add.w	r3, r0, #20
 800b6a6:	3114      	adds	r1, #20
 800b6a8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b6ac:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b6b0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b6b4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b6b8:	42a5      	cmp	r5, r4
 800b6ba:	d003      	beq.n	800b6c4 <__mcmp+0x2c>
 800b6bc:	d305      	bcc.n	800b6ca <__mcmp+0x32>
 800b6be:	2201      	movs	r2, #1
 800b6c0:	4610      	mov	r0, r2
 800b6c2:	bd30      	pop	{r4, r5, pc}
 800b6c4:	4283      	cmp	r3, r0
 800b6c6:	d3f3      	bcc.n	800b6b0 <__mcmp+0x18>
 800b6c8:	e7fa      	b.n	800b6c0 <__mcmp+0x28>
 800b6ca:	f04f 32ff 	mov.w	r2, #4294967295
 800b6ce:	e7f7      	b.n	800b6c0 <__mcmp+0x28>

0800b6d0 <__mdiff>:
 800b6d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6d4:	460c      	mov	r4, r1
 800b6d6:	4606      	mov	r6, r0
 800b6d8:	4611      	mov	r1, r2
 800b6da:	4620      	mov	r0, r4
 800b6dc:	4690      	mov	r8, r2
 800b6de:	f7ff ffdb 	bl	800b698 <__mcmp>
 800b6e2:	1e05      	subs	r5, r0, #0
 800b6e4:	d110      	bne.n	800b708 <__mdiff+0x38>
 800b6e6:	4629      	mov	r1, r5
 800b6e8:	4630      	mov	r0, r6
 800b6ea:	f7ff fd53 	bl	800b194 <_Balloc>
 800b6ee:	b930      	cbnz	r0, 800b6fe <__mdiff+0x2e>
 800b6f0:	4b3a      	ldr	r3, [pc, #232]	; (800b7dc <__mdiff+0x10c>)
 800b6f2:	4602      	mov	r2, r0
 800b6f4:	f240 2132 	movw	r1, #562	; 0x232
 800b6f8:	4839      	ldr	r0, [pc, #228]	; (800b7e0 <__mdiff+0x110>)
 800b6fa:	f7fe fe6d 	bl	800a3d8 <__assert_func>
 800b6fe:	2301      	movs	r3, #1
 800b700:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b704:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b708:	bfa4      	itt	ge
 800b70a:	4643      	movge	r3, r8
 800b70c:	46a0      	movge	r8, r4
 800b70e:	4630      	mov	r0, r6
 800b710:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b714:	bfa6      	itte	ge
 800b716:	461c      	movge	r4, r3
 800b718:	2500      	movge	r5, #0
 800b71a:	2501      	movlt	r5, #1
 800b71c:	f7ff fd3a 	bl	800b194 <_Balloc>
 800b720:	b920      	cbnz	r0, 800b72c <__mdiff+0x5c>
 800b722:	4b2e      	ldr	r3, [pc, #184]	; (800b7dc <__mdiff+0x10c>)
 800b724:	4602      	mov	r2, r0
 800b726:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b72a:	e7e5      	b.n	800b6f8 <__mdiff+0x28>
 800b72c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b730:	6926      	ldr	r6, [r4, #16]
 800b732:	60c5      	str	r5, [r0, #12]
 800b734:	f104 0914 	add.w	r9, r4, #20
 800b738:	f108 0514 	add.w	r5, r8, #20
 800b73c:	f100 0e14 	add.w	lr, r0, #20
 800b740:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b744:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b748:	f108 0210 	add.w	r2, r8, #16
 800b74c:	46f2      	mov	sl, lr
 800b74e:	2100      	movs	r1, #0
 800b750:	f859 3b04 	ldr.w	r3, [r9], #4
 800b754:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b758:	fa1f f883 	uxth.w	r8, r3
 800b75c:	fa11 f18b 	uxtah	r1, r1, fp
 800b760:	0c1b      	lsrs	r3, r3, #16
 800b762:	eba1 0808 	sub.w	r8, r1, r8
 800b766:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b76a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b76e:	fa1f f888 	uxth.w	r8, r8
 800b772:	1419      	asrs	r1, r3, #16
 800b774:	454e      	cmp	r6, r9
 800b776:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b77a:	f84a 3b04 	str.w	r3, [sl], #4
 800b77e:	d8e7      	bhi.n	800b750 <__mdiff+0x80>
 800b780:	1b33      	subs	r3, r6, r4
 800b782:	3b15      	subs	r3, #21
 800b784:	f023 0303 	bic.w	r3, r3, #3
 800b788:	3304      	adds	r3, #4
 800b78a:	3415      	adds	r4, #21
 800b78c:	42a6      	cmp	r6, r4
 800b78e:	bf38      	it	cc
 800b790:	2304      	movcc	r3, #4
 800b792:	441d      	add	r5, r3
 800b794:	4473      	add	r3, lr
 800b796:	469e      	mov	lr, r3
 800b798:	462e      	mov	r6, r5
 800b79a:	4566      	cmp	r6, ip
 800b79c:	d30e      	bcc.n	800b7bc <__mdiff+0xec>
 800b79e:	f10c 0203 	add.w	r2, ip, #3
 800b7a2:	1b52      	subs	r2, r2, r5
 800b7a4:	f022 0203 	bic.w	r2, r2, #3
 800b7a8:	3d03      	subs	r5, #3
 800b7aa:	45ac      	cmp	ip, r5
 800b7ac:	bf38      	it	cc
 800b7ae:	2200      	movcc	r2, #0
 800b7b0:	441a      	add	r2, r3
 800b7b2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b7b6:	b17b      	cbz	r3, 800b7d8 <__mdiff+0x108>
 800b7b8:	6107      	str	r7, [r0, #16]
 800b7ba:	e7a3      	b.n	800b704 <__mdiff+0x34>
 800b7bc:	f856 8b04 	ldr.w	r8, [r6], #4
 800b7c0:	fa11 f288 	uxtah	r2, r1, r8
 800b7c4:	1414      	asrs	r4, r2, #16
 800b7c6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b7ca:	b292      	uxth	r2, r2
 800b7cc:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b7d0:	f84e 2b04 	str.w	r2, [lr], #4
 800b7d4:	1421      	asrs	r1, r4, #16
 800b7d6:	e7e0      	b.n	800b79a <__mdiff+0xca>
 800b7d8:	3f01      	subs	r7, #1
 800b7da:	e7ea      	b.n	800b7b2 <__mdiff+0xe2>
 800b7dc:	08022aa4 	.word	0x08022aa4
 800b7e0:	08022ab5 	.word	0x08022ab5

0800b7e4 <__d2b>:
 800b7e4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b7e8:	4689      	mov	r9, r1
 800b7ea:	2101      	movs	r1, #1
 800b7ec:	ec57 6b10 	vmov	r6, r7, d0
 800b7f0:	4690      	mov	r8, r2
 800b7f2:	f7ff fccf 	bl	800b194 <_Balloc>
 800b7f6:	4604      	mov	r4, r0
 800b7f8:	b930      	cbnz	r0, 800b808 <__d2b+0x24>
 800b7fa:	4602      	mov	r2, r0
 800b7fc:	4b25      	ldr	r3, [pc, #148]	; (800b894 <__d2b+0xb0>)
 800b7fe:	4826      	ldr	r0, [pc, #152]	; (800b898 <__d2b+0xb4>)
 800b800:	f240 310a 	movw	r1, #778	; 0x30a
 800b804:	f7fe fde8 	bl	800a3d8 <__assert_func>
 800b808:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b80c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b810:	bb35      	cbnz	r5, 800b860 <__d2b+0x7c>
 800b812:	2e00      	cmp	r6, #0
 800b814:	9301      	str	r3, [sp, #4]
 800b816:	d028      	beq.n	800b86a <__d2b+0x86>
 800b818:	4668      	mov	r0, sp
 800b81a:	9600      	str	r6, [sp, #0]
 800b81c:	f7ff fd82 	bl	800b324 <__lo0bits>
 800b820:	9900      	ldr	r1, [sp, #0]
 800b822:	b300      	cbz	r0, 800b866 <__d2b+0x82>
 800b824:	9a01      	ldr	r2, [sp, #4]
 800b826:	f1c0 0320 	rsb	r3, r0, #32
 800b82a:	fa02 f303 	lsl.w	r3, r2, r3
 800b82e:	430b      	orrs	r3, r1
 800b830:	40c2      	lsrs	r2, r0
 800b832:	6163      	str	r3, [r4, #20]
 800b834:	9201      	str	r2, [sp, #4]
 800b836:	9b01      	ldr	r3, [sp, #4]
 800b838:	61a3      	str	r3, [r4, #24]
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	bf14      	ite	ne
 800b83e:	2202      	movne	r2, #2
 800b840:	2201      	moveq	r2, #1
 800b842:	6122      	str	r2, [r4, #16]
 800b844:	b1d5      	cbz	r5, 800b87c <__d2b+0x98>
 800b846:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b84a:	4405      	add	r5, r0
 800b84c:	f8c9 5000 	str.w	r5, [r9]
 800b850:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b854:	f8c8 0000 	str.w	r0, [r8]
 800b858:	4620      	mov	r0, r4
 800b85a:	b003      	add	sp, #12
 800b85c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b860:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b864:	e7d5      	b.n	800b812 <__d2b+0x2e>
 800b866:	6161      	str	r1, [r4, #20]
 800b868:	e7e5      	b.n	800b836 <__d2b+0x52>
 800b86a:	a801      	add	r0, sp, #4
 800b86c:	f7ff fd5a 	bl	800b324 <__lo0bits>
 800b870:	9b01      	ldr	r3, [sp, #4]
 800b872:	6163      	str	r3, [r4, #20]
 800b874:	2201      	movs	r2, #1
 800b876:	6122      	str	r2, [r4, #16]
 800b878:	3020      	adds	r0, #32
 800b87a:	e7e3      	b.n	800b844 <__d2b+0x60>
 800b87c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b880:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b884:	f8c9 0000 	str.w	r0, [r9]
 800b888:	6918      	ldr	r0, [r3, #16]
 800b88a:	f7ff fd2b 	bl	800b2e4 <__hi0bits>
 800b88e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b892:	e7df      	b.n	800b854 <__d2b+0x70>
 800b894:	08022aa4 	.word	0x08022aa4
 800b898:	08022ab5 	.word	0x08022ab5

0800b89c <_calloc_r>:
 800b89c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b89e:	fba1 2402 	umull	r2, r4, r1, r2
 800b8a2:	b94c      	cbnz	r4, 800b8b8 <_calloc_r+0x1c>
 800b8a4:	4611      	mov	r1, r2
 800b8a6:	9201      	str	r2, [sp, #4]
 800b8a8:	f7fd ffd2 	bl	8009850 <_malloc_r>
 800b8ac:	9a01      	ldr	r2, [sp, #4]
 800b8ae:	4605      	mov	r5, r0
 800b8b0:	b930      	cbnz	r0, 800b8c0 <_calloc_r+0x24>
 800b8b2:	4628      	mov	r0, r5
 800b8b4:	b003      	add	sp, #12
 800b8b6:	bd30      	pop	{r4, r5, pc}
 800b8b8:	220c      	movs	r2, #12
 800b8ba:	6002      	str	r2, [r0, #0]
 800b8bc:	2500      	movs	r5, #0
 800b8be:	e7f8      	b.n	800b8b2 <_calloc_r+0x16>
 800b8c0:	4621      	mov	r1, r4
 800b8c2:	f7fd ff51 	bl	8009768 <memset>
 800b8c6:	e7f4      	b.n	800b8b2 <_calloc_r+0x16>

0800b8c8 <__sfputc_r>:
 800b8c8:	6893      	ldr	r3, [r2, #8]
 800b8ca:	3b01      	subs	r3, #1
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	b410      	push	{r4}
 800b8d0:	6093      	str	r3, [r2, #8]
 800b8d2:	da08      	bge.n	800b8e6 <__sfputc_r+0x1e>
 800b8d4:	6994      	ldr	r4, [r2, #24]
 800b8d6:	42a3      	cmp	r3, r4
 800b8d8:	db01      	blt.n	800b8de <__sfputc_r+0x16>
 800b8da:	290a      	cmp	r1, #10
 800b8dc:	d103      	bne.n	800b8e6 <__sfputc_r+0x1e>
 800b8de:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b8e2:	f000 b95d 	b.w	800bba0 <__swbuf_r>
 800b8e6:	6813      	ldr	r3, [r2, #0]
 800b8e8:	1c58      	adds	r0, r3, #1
 800b8ea:	6010      	str	r0, [r2, #0]
 800b8ec:	7019      	strb	r1, [r3, #0]
 800b8ee:	4608      	mov	r0, r1
 800b8f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b8f4:	4770      	bx	lr

0800b8f6 <__sfputs_r>:
 800b8f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8f8:	4606      	mov	r6, r0
 800b8fa:	460f      	mov	r7, r1
 800b8fc:	4614      	mov	r4, r2
 800b8fe:	18d5      	adds	r5, r2, r3
 800b900:	42ac      	cmp	r4, r5
 800b902:	d101      	bne.n	800b908 <__sfputs_r+0x12>
 800b904:	2000      	movs	r0, #0
 800b906:	e007      	b.n	800b918 <__sfputs_r+0x22>
 800b908:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b90c:	463a      	mov	r2, r7
 800b90e:	4630      	mov	r0, r6
 800b910:	f7ff ffda 	bl	800b8c8 <__sfputc_r>
 800b914:	1c43      	adds	r3, r0, #1
 800b916:	d1f3      	bne.n	800b900 <__sfputs_r+0xa>
 800b918:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b91c <_vfiprintf_r>:
 800b91c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b920:	460d      	mov	r5, r1
 800b922:	b09d      	sub	sp, #116	; 0x74
 800b924:	4614      	mov	r4, r2
 800b926:	4698      	mov	r8, r3
 800b928:	4606      	mov	r6, r0
 800b92a:	b118      	cbz	r0, 800b934 <_vfiprintf_r+0x18>
 800b92c:	6983      	ldr	r3, [r0, #24]
 800b92e:	b90b      	cbnz	r3, 800b934 <_vfiprintf_r+0x18>
 800b930:	f7fd fe36 	bl	80095a0 <__sinit>
 800b934:	4b89      	ldr	r3, [pc, #548]	; (800bb5c <_vfiprintf_r+0x240>)
 800b936:	429d      	cmp	r5, r3
 800b938:	d11b      	bne.n	800b972 <_vfiprintf_r+0x56>
 800b93a:	6875      	ldr	r5, [r6, #4]
 800b93c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b93e:	07d9      	lsls	r1, r3, #31
 800b940:	d405      	bmi.n	800b94e <_vfiprintf_r+0x32>
 800b942:	89ab      	ldrh	r3, [r5, #12]
 800b944:	059a      	lsls	r2, r3, #22
 800b946:	d402      	bmi.n	800b94e <_vfiprintf_r+0x32>
 800b948:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b94a:	f7fd feec 	bl	8009726 <__retarget_lock_acquire_recursive>
 800b94e:	89ab      	ldrh	r3, [r5, #12]
 800b950:	071b      	lsls	r3, r3, #28
 800b952:	d501      	bpl.n	800b958 <_vfiprintf_r+0x3c>
 800b954:	692b      	ldr	r3, [r5, #16]
 800b956:	b9eb      	cbnz	r3, 800b994 <_vfiprintf_r+0x78>
 800b958:	4629      	mov	r1, r5
 800b95a:	4630      	mov	r0, r6
 800b95c:	f000 f972 	bl	800bc44 <__swsetup_r>
 800b960:	b1c0      	cbz	r0, 800b994 <_vfiprintf_r+0x78>
 800b962:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b964:	07dc      	lsls	r4, r3, #31
 800b966:	d50e      	bpl.n	800b986 <_vfiprintf_r+0x6a>
 800b968:	f04f 30ff 	mov.w	r0, #4294967295
 800b96c:	b01d      	add	sp, #116	; 0x74
 800b96e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b972:	4b7b      	ldr	r3, [pc, #492]	; (800bb60 <_vfiprintf_r+0x244>)
 800b974:	429d      	cmp	r5, r3
 800b976:	d101      	bne.n	800b97c <_vfiprintf_r+0x60>
 800b978:	68b5      	ldr	r5, [r6, #8]
 800b97a:	e7df      	b.n	800b93c <_vfiprintf_r+0x20>
 800b97c:	4b79      	ldr	r3, [pc, #484]	; (800bb64 <_vfiprintf_r+0x248>)
 800b97e:	429d      	cmp	r5, r3
 800b980:	bf08      	it	eq
 800b982:	68f5      	ldreq	r5, [r6, #12]
 800b984:	e7da      	b.n	800b93c <_vfiprintf_r+0x20>
 800b986:	89ab      	ldrh	r3, [r5, #12]
 800b988:	0598      	lsls	r0, r3, #22
 800b98a:	d4ed      	bmi.n	800b968 <_vfiprintf_r+0x4c>
 800b98c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b98e:	f7fd fecb 	bl	8009728 <__retarget_lock_release_recursive>
 800b992:	e7e9      	b.n	800b968 <_vfiprintf_r+0x4c>
 800b994:	2300      	movs	r3, #0
 800b996:	9309      	str	r3, [sp, #36]	; 0x24
 800b998:	2320      	movs	r3, #32
 800b99a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b99e:	f8cd 800c 	str.w	r8, [sp, #12]
 800b9a2:	2330      	movs	r3, #48	; 0x30
 800b9a4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800bb68 <_vfiprintf_r+0x24c>
 800b9a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b9ac:	f04f 0901 	mov.w	r9, #1
 800b9b0:	4623      	mov	r3, r4
 800b9b2:	469a      	mov	sl, r3
 800b9b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b9b8:	b10a      	cbz	r2, 800b9be <_vfiprintf_r+0xa2>
 800b9ba:	2a25      	cmp	r2, #37	; 0x25
 800b9bc:	d1f9      	bne.n	800b9b2 <_vfiprintf_r+0x96>
 800b9be:	ebba 0b04 	subs.w	fp, sl, r4
 800b9c2:	d00b      	beq.n	800b9dc <_vfiprintf_r+0xc0>
 800b9c4:	465b      	mov	r3, fp
 800b9c6:	4622      	mov	r2, r4
 800b9c8:	4629      	mov	r1, r5
 800b9ca:	4630      	mov	r0, r6
 800b9cc:	f7ff ff93 	bl	800b8f6 <__sfputs_r>
 800b9d0:	3001      	adds	r0, #1
 800b9d2:	f000 80aa 	beq.w	800bb2a <_vfiprintf_r+0x20e>
 800b9d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b9d8:	445a      	add	r2, fp
 800b9da:	9209      	str	r2, [sp, #36]	; 0x24
 800b9dc:	f89a 3000 	ldrb.w	r3, [sl]
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	f000 80a2 	beq.w	800bb2a <_vfiprintf_r+0x20e>
 800b9e6:	2300      	movs	r3, #0
 800b9e8:	f04f 32ff 	mov.w	r2, #4294967295
 800b9ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b9f0:	f10a 0a01 	add.w	sl, sl, #1
 800b9f4:	9304      	str	r3, [sp, #16]
 800b9f6:	9307      	str	r3, [sp, #28]
 800b9f8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b9fc:	931a      	str	r3, [sp, #104]	; 0x68
 800b9fe:	4654      	mov	r4, sl
 800ba00:	2205      	movs	r2, #5
 800ba02:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba06:	4858      	ldr	r0, [pc, #352]	; (800bb68 <_vfiprintf_r+0x24c>)
 800ba08:	f7f4 fc0a 	bl	8000220 <memchr>
 800ba0c:	9a04      	ldr	r2, [sp, #16]
 800ba0e:	b9d8      	cbnz	r0, 800ba48 <_vfiprintf_r+0x12c>
 800ba10:	06d1      	lsls	r1, r2, #27
 800ba12:	bf44      	itt	mi
 800ba14:	2320      	movmi	r3, #32
 800ba16:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ba1a:	0713      	lsls	r3, r2, #28
 800ba1c:	bf44      	itt	mi
 800ba1e:	232b      	movmi	r3, #43	; 0x2b
 800ba20:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ba24:	f89a 3000 	ldrb.w	r3, [sl]
 800ba28:	2b2a      	cmp	r3, #42	; 0x2a
 800ba2a:	d015      	beq.n	800ba58 <_vfiprintf_r+0x13c>
 800ba2c:	9a07      	ldr	r2, [sp, #28]
 800ba2e:	4654      	mov	r4, sl
 800ba30:	2000      	movs	r0, #0
 800ba32:	f04f 0c0a 	mov.w	ip, #10
 800ba36:	4621      	mov	r1, r4
 800ba38:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ba3c:	3b30      	subs	r3, #48	; 0x30
 800ba3e:	2b09      	cmp	r3, #9
 800ba40:	d94e      	bls.n	800bae0 <_vfiprintf_r+0x1c4>
 800ba42:	b1b0      	cbz	r0, 800ba72 <_vfiprintf_r+0x156>
 800ba44:	9207      	str	r2, [sp, #28]
 800ba46:	e014      	b.n	800ba72 <_vfiprintf_r+0x156>
 800ba48:	eba0 0308 	sub.w	r3, r0, r8
 800ba4c:	fa09 f303 	lsl.w	r3, r9, r3
 800ba50:	4313      	orrs	r3, r2
 800ba52:	9304      	str	r3, [sp, #16]
 800ba54:	46a2      	mov	sl, r4
 800ba56:	e7d2      	b.n	800b9fe <_vfiprintf_r+0xe2>
 800ba58:	9b03      	ldr	r3, [sp, #12]
 800ba5a:	1d19      	adds	r1, r3, #4
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	9103      	str	r1, [sp, #12]
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	bfbb      	ittet	lt
 800ba64:	425b      	neglt	r3, r3
 800ba66:	f042 0202 	orrlt.w	r2, r2, #2
 800ba6a:	9307      	strge	r3, [sp, #28]
 800ba6c:	9307      	strlt	r3, [sp, #28]
 800ba6e:	bfb8      	it	lt
 800ba70:	9204      	strlt	r2, [sp, #16]
 800ba72:	7823      	ldrb	r3, [r4, #0]
 800ba74:	2b2e      	cmp	r3, #46	; 0x2e
 800ba76:	d10c      	bne.n	800ba92 <_vfiprintf_r+0x176>
 800ba78:	7863      	ldrb	r3, [r4, #1]
 800ba7a:	2b2a      	cmp	r3, #42	; 0x2a
 800ba7c:	d135      	bne.n	800baea <_vfiprintf_r+0x1ce>
 800ba7e:	9b03      	ldr	r3, [sp, #12]
 800ba80:	1d1a      	adds	r2, r3, #4
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	9203      	str	r2, [sp, #12]
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	bfb8      	it	lt
 800ba8a:	f04f 33ff 	movlt.w	r3, #4294967295
 800ba8e:	3402      	adds	r4, #2
 800ba90:	9305      	str	r3, [sp, #20]
 800ba92:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800bb78 <_vfiprintf_r+0x25c>
 800ba96:	7821      	ldrb	r1, [r4, #0]
 800ba98:	2203      	movs	r2, #3
 800ba9a:	4650      	mov	r0, sl
 800ba9c:	f7f4 fbc0 	bl	8000220 <memchr>
 800baa0:	b140      	cbz	r0, 800bab4 <_vfiprintf_r+0x198>
 800baa2:	2340      	movs	r3, #64	; 0x40
 800baa4:	eba0 000a 	sub.w	r0, r0, sl
 800baa8:	fa03 f000 	lsl.w	r0, r3, r0
 800baac:	9b04      	ldr	r3, [sp, #16]
 800baae:	4303      	orrs	r3, r0
 800bab0:	3401      	adds	r4, #1
 800bab2:	9304      	str	r3, [sp, #16]
 800bab4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bab8:	482c      	ldr	r0, [pc, #176]	; (800bb6c <_vfiprintf_r+0x250>)
 800baba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800babe:	2206      	movs	r2, #6
 800bac0:	f7f4 fbae 	bl	8000220 <memchr>
 800bac4:	2800      	cmp	r0, #0
 800bac6:	d03f      	beq.n	800bb48 <_vfiprintf_r+0x22c>
 800bac8:	4b29      	ldr	r3, [pc, #164]	; (800bb70 <_vfiprintf_r+0x254>)
 800baca:	bb1b      	cbnz	r3, 800bb14 <_vfiprintf_r+0x1f8>
 800bacc:	9b03      	ldr	r3, [sp, #12]
 800bace:	3307      	adds	r3, #7
 800bad0:	f023 0307 	bic.w	r3, r3, #7
 800bad4:	3308      	adds	r3, #8
 800bad6:	9303      	str	r3, [sp, #12]
 800bad8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bada:	443b      	add	r3, r7
 800badc:	9309      	str	r3, [sp, #36]	; 0x24
 800bade:	e767      	b.n	800b9b0 <_vfiprintf_r+0x94>
 800bae0:	fb0c 3202 	mla	r2, ip, r2, r3
 800bae4:	460c      	mov	r4, r1
 800bae6:	2001      	movs	r0, #1
 800bae8:	e7a5      	b.n	800ba36 <_vfiprintf_r+0x11a>
 800baea:	2300      	movs	r3, #0
 800baec:	3401      	adds	r4, #1
 800baee:	9305      	str	r3, [sp, #20]
 800baf0:	4619      	mov	r1, r3
 800baf2:	f04f 0c0a 	mov.w	ip, #10
 800baf6:	4620      	mov	r0, r4
 800baf8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bafc:	3a30      	subs	r2, #48	; 0x30
 800bafe:	2a09      	cmp	r2, #9
 800bb00:	d903      	bls.n	800bb0a <_vfiprintf_r+0x1ee>
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d0c5      	beq.n	800ba92 <_vfiprintf_r+0x176>
 800bb06:	9105      	str	r1, [sp, #20]
 800bb08:	e7c3      	b.n	800ba92 <_vfiprintf_r+0x176>
 800bb0a:	fb0c 2101 	mla	r1, ip, r1, r2
 800bb0e:	4604      	mov	r4, r0
 800bb10:	2301      	movs	r3, #1
 800bb12:	e7f0      	b.n	800baf6 <_vfiprintf_r+0x1da>
 800bb14:	ab03      	add	r3, sp, #12
 800bb16:	9300      	str	r3, [sp, #0]
 800bb18:	462a      	mov	r2, r5
 800bb1a:	4b16      	ldr	r3, [pc, #88]	; (800bb74 <_vfiprintf_r+0x258>)
 800bb1c:	a904      	add	r1, sp, #16
 800bb1e:	4630      	mov	r0, r6
 800bb20:	f7fd ffaa 	bl	8009a78 <_printf_float>
 800bb24:	4607      	mov	r7, r0
 800bb26:	1c78      	adds	r0, r7, #1
 800bb28:	d1d6      	bne.n	800bad8 <_vfiprintf_r+0x1bc>
 800bb2a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bb2c:	07d9      	lsls	r1, r3, #31
 800bb2e:	d405      	bmi.n	800bb3c <_vfiprintf_r+0x220>
 800bb30:	89ab      	ldrh	r3, [r5, #12]
 800bb32:	059a      	lsls	r2, r3, #22
 800bb34:	d402      	bmi.n	800bb3c <_vfiprintf_r+0x220>
 800bb36:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bb38:	f7fd fdf6 	bl	8009728 <__retarget_lock_release_recursive>
 800bb3c:	89ab      	ldrh	r3, [r5, #12]
 800bb3e:	065b      	lsls	r3, r3, #25
 800bb40:	f53f af12 	bmi.w	800b968 <_vfiprintf_r+0x4c>
 800bb44:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bb46:	e711      	b.n	800b96c <_vfiprintf_r+0x50>
 800bb48:	ab03      	add	r3, sp, #12
 800bb4a:	9300      	str	r3, [sp, #0]
 800bb4c:	462a      	mov	r2, r5
 800bb4e:	4b09      	ldr	r3, [pc, #36]	; (800bb74 <_vfiprintf_r+0x258>)
 800bb50:	a904      	add	r1, sp, #16
 800bb52:	4630      	mov	r0, r6
 800bb54:	f7fe fa34 	bl	8009fc0 <_printf_i>
 800bb58:	e7e4      	b.n	800bb24 <_vfiprintf_r+0x208>
 800bb5a:	bf00      	nop
 800bb5c:	08022918 	.word	0x08022918
 800bb60:	08022938 	.word	0x08022938
 800bb64:	080228f8 	.word	0x080228f8
 800bb68:	08022c14 	.word	0x08022c14
 800bb6c:	08022c1e 	.word	0x08022c1e
 800bb70:	08009a79 	.word	0x08009a79
 800bb74:	0800b8f7 	.word	0x0800b8f7
 800bb78:	08022c1a 	.word	0x08022c1a

0800bb7c <_read_r>:
 800bb7c:	b538      	push	{r3, r4, r5, lr}
 800bb7e:	4d07      	ldr	r5, [pc, #28]	; (800bb9c <_read_r+0x20>)
 800bb80:	4604      	mov	r4, r0
 800bb82:	4608      	mov	r0, r1
 800bb84:	4611      	mov	r1, r2
 800bb86:	2200      	movs	r2, #0
 800bb88:	602a      	str	r2, [r5, #0]
 800bb8a:	461a      	mov	r2, r3
 800bb8c:	f7f5 fed2 	bl	8001934 <_read>
 800bb90:	1c43      	adds	r3, r0, #1
 800bb92:	d102      	bne.n	800bb9a <_read_r+0x1e>
 800bb94:	682b      	ldr	r3, [r5, #0]
 800bb96:	b103      	cbz	r3, 800bb9a <_read_r+0x1e>
 800bb98:	6023      	str	r3, [r4, #0]
 800bb9a:	bd38      	pop	{r3, r4, r5, pc}
 800bb9c:	2000167c 	.word	0x2000167c

0800bba0 <__swbuf_r>:
 800bba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bba2:	460e      	mov	r6, r1
 800bba4:	4614      	mov	r4, r2
 800bba6:	4605      	mov	r5, r0
 800bba8:	b118      	cbz	r0, 800bbb2 <__swbuf_r+0x12>
 800bbaa:	6983      	ldr	r3, [r0, #24]
 800bbac:	b90b      	cbnz	r3, 800bbb2 <__swbuf_r+0x12>
 800bbae:	f7fd fcf7 	bl	80095a0 <__sinit>
 800bbb2:	4b21      	ldr	r3, [pc, #132]	; (800bc38 <__swbuf_r+0x98>)
 800bbb4:	429c      	cmp	r4, r3
 800bbb6:	d12b      	bne.n	800bc10 <__swbuf_r+0x70>
 800bbb8:	686c      	ldr	r4, [r5, #4]
 800bbba:	69a3      	ldr	r3, [r4, #24]
 800bbbc:	60a3      	str	r3, [r4, #8]
 800bbbe:	89a3      	ldrh	r3, [r4, #12]
 800bbc0:	071a      	lsls	r2, r3, #28
 800bbc2:	d52f      	bpl.n	800bc24 <__swbuf_r+0x84>
 800bbc4:	6923      	ldr	r3, [r4, #16]
 800bbc6:	b36b      	cbz	r3, 800bc24 <__swbuf_r+0x84>
 800bbc8:	6923      	ldr	r3, [r4, #16]
 800bbca:	6820      	ldr	r0, [r4, #0]
 800bbcc:	1ac0      	subs	r0, r0, r3
 800bbce:	6963      	ldr	r3, [r4, #20]
 800bbd0:	b2f6      	uxtb	r6, r6
 800bbd2:	4283      	cmp	r3, r0
 800bbd4:	4637      	mov	r7, r6
 800bbd6:	dc04      	bgt.n	800bbe2 <__swbuf_r+0x42>
 800bbd8:	4621      	mov	r1, r4
 800bbda:	4628      	mov	r0, r5
 800bbdc:	f7fd fc3a 	bl	8009454 <_fflush_r>
 800bbe0:	bb30      	cbnz	r0, 800bc30 <__swbuf_r+0x90>
 800bbe2:	68a3      	ldr	r3, [r4, #8]
 800bbe4:	3b01      	subs	r3, #1
 800bbe6:	60a3      	str	r3, [r4, #8]
 800bbe8:	6823      	ldr	r3, [r4, #0]
 800bbea:	1c5a      	adds	r2, r3, #1
 800bbec:	6022      	str	r2, [r4, #0]
 800bbee:	701e      	strb	r6, [r3, #0]
 800bbf0:	6963      	ldr	r3, [r4, #20]
 800bbf2:	3001      	adds	r0, #1
 800bbf4:	4283      	cmp	r3, r0
 800bbf6:	d004      	beq.n	800bc02 <__swbuf_r+0x62>
 800bbf8:	89a3      	ldrh	r3, [r4, #12]
 800bbfa:	07db      	lsls	r3, r3, #31
 800bbfc:	d506      	bpl.n	800bc0c <__swbuf_r+0x6c>
 800bbfe:	2e0a      	cmp	r6, #10
 800bc00:	d104      	bne.n	800bc0c <__swbuf_r+0x6c>
 800bc02:	4621      	mov	r1, r4
 800bc04:	4628      	mov	r0, r5
 800bc06:	f7fd fc25 	bl	8009454 <_fflush_r>
 800bc0a:	b988      	cbnz	r0, 800bc30 <__swbuf_r+0x90>
 800bc0c:	4638      	mov	r0, r7
 800bc0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bc10:	4b0a      	ldr	r3, [pc, #40]	; (800bc3c <__swbuf_r+0x9c>)
 800bc12:	429c      	cmp	r4, r3
 800bc14:	d101      	bne.n	800bc1a <__swbuf_r+0x7a>
 800bc16:	68ac      	ldr	r4, [r5, #8]
 800bc18:	e7cf      	b.n	800bbba <__swbuf_r+0x1a>
 800bc1a:	4b09      	ldr	r3, [pc, #36]	; (800bc40 <__swbuf_r+0xa0>)
 800bc1c:	429c      	cmp	r4, r3
 800bc1e:	bf08      	it	eq
 800bc20:	68ec      	ldreq	r4, [r5, #12]
 800bc22:	e7ca      	b.n	800bbba <__swbuf_r+0x1a>
 800bc24:	4621      	mov	r1, r4
 800bc26:	4628      	mov	r0, r5
 800bc28:	f000 f80c 	bl	800bc44 <__swsetup_r>
 800bc2c:	2800      	cmp	r0, #0
 800bc2e:	d0cb      	beq.n	800bbc8 <__swbuf_r+0x28>
 800bc30:	f04f 37ff 	mov.w	r7, #4294967295
 800bc34:	e7ea      	b.n	800bc0c <__swbuf_r+0x6c>
 800bc36:	bf00      	nop
 800bc38:	08022918 	.word	0x08022918
 800bc3c:	08022938 	.word	0x08022938
 800bc40:	080228f8 	.word	0x080228f8

0800bc44 <__swsetup_r>:
 800bc44:	4b32      	ldr	r3, [pc, #200]	; (800bd10 <__swsetup_r+0xcc>)
 800bc46:	b570      	push	{r4, r5, r6, lr}
 800bc48:	681d      	ldr	r5, [r3, #0]
 800bc4a:	4606      	mov	r6, r0
 800bc4c:	460c      	mov	r4, r1
 800bc4e:	b125      	cbz	r5, 800bc5a <__swsetup_r+0x16>
 800bc50:	69ab      	ldr	r3, [r5, #24]
 800bc52:	b913      	cbnz	r3, 800bc5a <__swsetup_r+0x16>
 800bc54:	4628      	mov	r0, r5
 800bc56:	f7fd fca3 	bl	80095a0 <__sinit>
 800bc5a:	4b2e      	ldr	r3, [pc, #184]	; (800bd14 <__swsetup_r+0xd0>)
 800bc5c:	429c      	cmp	r4, r3
 800bc5e:	d10f      	bne.n	800bc80 <__swsetup_r+0x3c>
 800bc60:	686c      	ldr	r4, [r5, #4]
 800bc62:	89a3      	ldrh	r3, [r4, #12]
 800bc64:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bc68:	0719      	lsls	r1, r3, #28
 800bc6a:	d42c      	bmi.n	800bcc6 <__swsetup_r+0x82>
 800bc6c:	06dd      	lsls	r5, r3, #27
 800bc6e:	d411      	bmi.n	800bc94 <__swsetup_r+0x50>
 800bc70:	2309      	movs	r3, #9
 800bc72:	6033      	str	r3, [r6, #0]
 800bc74:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bc78:	81a3      	strh	r3, [r4, #12]
 800bc7a:	f04f 30ff 	mov.w	r0, #4294967295
 800bc7e:	e03e      	b.n	800bcfe <__swsetup_r+0xba>
 800bc80:	4b25      	ldr	r3, [pc, #148]	; (800bd18 <__swsetup_r+0xd4>)
 800bc82:	429c      	cmp	r4, r3
 800bc84:	d101      	bne.n	800bc8a <__swsetup_r+0x46>
 800bc86:	68ac      	ldr	r4, [r5, #8]
 800bc88:	e7eb      	b.n	800bc62 <__swsetup_r+0x1e>
 800bc8a:	4b24      	ldr	r3, [pc, #144]	; (800bd1c <__swsetup_r+0xd8>)
 800bc8c:	429c      	cmp	r4, r3
 800bc8e:	bf08      	it	eq
 800bc90:	68ec      	ldreq	r4, [r5, #12]
 800bc92:	e7e6      	b.n	800bc62 <__swsetup_r+0x1e>
 800bc94:	0758      	lsls	r0, r3, #29
 800bc96:	d512      	bpl.n	800bcbe <__swsetup_r+0x7a>
 800bc98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bc9a:	b141      	cbz	r1, 800bcae <__swsetup_r+0x6a>
 800bc9c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bca0:	4299      	cmp	r1, r3
 800bca2:	d002      	beq.n	800bcaa <__swsetup_r+0x66>
 800bca4:	4630      	mov	r0, r6
 800bca6:	f7fd fd67 	bl	8009778 <_free_r>
 800bcaa:	2300      	movs	r3, #0
 800bcac:	6363      	str	r3, [r4, #52]	; 0x34
 800bcae:	89a3      	ldrh	r3, [r4, #12]
 800bcb0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bcb4:	81a3      	strh	r3, [r4, #12]
 800bcb6:	2300      	movs	r3, #0
 800bcb8:	6063      	str	r3, [r4, #4]
 800bcba:	6923      	ldr	r3, [r4, #16]
 800bcbc:	6023      	str	r3, [r4, #0]
 800bcbe:	89a3      	ldrh	r3, [r4, #12]
 800bcc0:	f043 0308 	orr.w	r3, r3, #8
 800bcc4:	81a3      	strh	r3, [r4, #12]
 800bcc6:	6923      	ldr	r3, [r4, #16]
 800bcc8:	b94b      	cbnz	r3, 800bcde <__swsetup_r+0x9a>
 800bcca:	89a3      	ldrh	r3, [r4, #12]
 800bccc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bcd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bcd4:	d003      	beq.n	800bcde <__swsetup_r+0x9a>
 800bcd6:	4621      	mov	r1, r4
 800bcd8:	4630      	mov	r0, r6
 800bcda:	f000 f84d 	bl	800bd78 <__smakebuf_r>
 800bcde:	89a0      	ldrh	r0, [r4, #12]
 800bce0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bce4:	f010 0301 	ands.w	r3, r0, #1
 800bce8:	d00a      	beq.n	800bd00 <__swsetup_r+0xbc>
 800bcea:	2300      	movs	r3, #0
 800bcec:	60a3      	str	r3, [r4, #8]
 800bcee:	6963      	ldr	r3, [r4, #20]
 800bcf0:	425b      	negs	r3, r3
 800bcf2:	61a3      	str	r3, [r4, #24]
 800bcf4:	6923      	ldr	r3, [r4, #16]
 800bcf6:	b943      	cbnz	r3, 800bd0a <__swsetup_r+0xc6>
 800bcf8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bcfc:	d1ba      	bne.n	800bc74 <__swsetup_r+0x30>
 800bcfe:	bd70      	pop	{r4, r5, r6, pc}
 800bd00:	0781      	lsls	r1, r0, #30
 800bd02:	bf58      	it	pl
 800bd04:	6963      	ldrpl	r3, [r4, #20]
 800bd06:	60a3      	str	r3, [r4, #8]
 800bd08:	e7f4      	b.n	800bcf4 <__swsetup_r+0xb0>
 800bd0a:	2000      	movs	r0, #0
 800bd0c:	e7f7      	b.n	800bcfe <__swsetup_r+0xba>
 800bd0e:	bf00      	nop
 800bd10:	2000113c 	.word	0x2000113c
 800bd14:	08022918 	.word	0x08022918
 800bd18:	08022938 	.word	0x08022938
 800bd1c:	080228f8 	.word	0x080228f8

0800bd20 <abort>:
 800bd20:	b508      	push	{r3, lr}
 800bd22:	2006      	movs	r0, #6
 800bd24:	f000 f8a2 	bl	800be6c <raise>
 800bd28:	2001      	movs	r0, #1
 800bd2a:	f7f5 fdfd 	bl	8001928 <_exit>

0800bd2e <__swhatbuf_r>:
 800bd2e:	b570      	push	{r4, r5, r6, lr}
 800bd30:	460e      	mov	r6, r1
 800bd32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd36:	2900      	cmp	r1, #0
 800bd38:	b096      	sub	sp, #88	; 0x58
 800bd3a:	4614      	mov	r4, r2
 800bd3c:	461d      	mov	r5, r3
 800bd3e:	da08      	bge.n	800bd52 <__swhatbuf_r+0x24>
 800bd40:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800bd44:	2200      	movs	r2, #0
 800bd46:	602a      	str	r2, [r5, #0]
 800bd48:	061a      	lsls	r2, r3, #24
 800bd4a:	d410      	bmi.n	800bd6e <__swhatbuf_r+0x40>
 800bd4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bd50:	e00e      	b.n	800bd70 <__swhatbuf_r+0x42>
 800bd52:	466a      	mov	r2, sp
 800bd54:	f000 f8b4 	bl	800bec0 <_fstat_r>
 800bd58:	2800      	cmp	r0, #0
 800bd5a:	dbf1      	blt.n	800bd40 <__swhatbuf_r+0x12>
 800bd5c:	9a01      	ldr	r2, [sp, #4]
 800bd5e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800bd62:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800bd66:	425a      	negs	r2, r3
 800bd68:	415a      	adcs	r2, r3
 800bd6a:	602a      	str	r2, [r5, #0]
 800bd6c:	e7ee      	b.n	800bd4c <__swhatbuf_r+0x1e>
 800bd6e:	2340      	movs	r3, #64	; 0x40
 800bd70:	2000      	movs	r0, #0
 800bd72:	6023      	str	r3, [r4, #0]
 800bd74:	b016      	add	sp, #88	; 0x58
 800bd76:	bd70      	pop	{r4, r5, r6, pc}

0800bd78 <__smakebuf_r>:
 800bd78:	898b      	ldrh	r3, [r1, #12]
 800bd7a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bd7c:	079d      	lsls	r5, r3, #30
 800bd7e:	4606      	mov	r6, r0
 800bd80:	460c      	mov	r4, r1
 800bd82:	d507      	bpl.n	800bd94 <__smakebuf_r+0x1c>
 800bd84:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bd88:	6023      	str	r3, [r4, #0]
 800bd8a:	6123      	str	r3, [r4, #16]
 800bd8c:	2301      	movs	r3, #1
 800bd8e:	6163      	str	r3, [r4, #20]
 800bd90:	b002      	add	sp, #8
 800bd92:	bd70      	pop	{r4, r5, r6, pc}
 800bd94:	ab01      	add	r3, sp, #4
 800bd96:	466a      	mov	r2, sp
 800bd98:	f7ff ffc9 	bl	800bd2e <__swhatbuf_r>
 800bd9c:	9900      	ldr	r1, [sp, #0]
 800bd9e:	4605      	mov	r5, r0
 800bda0:	4630      	mov	r0, r6
 800bda2:	f7fd fd55 	bl	8009850 <_malloc_r>
 800bda6:	b948      	cbnz	r0, 800bdbc <__smakebuf_r+0x44>
 800bda8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bdac:	059a      	lsls	r2, r3, #22
 800bdae:	d4ef      	bmi.n	800bd90 <__smakebuf_r+0x18>
 800bdb0:	f023 0303 	bic.w	r3, r3, #3
 800bdb4:	f043 0302 	orr.w	r3, r3, #2
 800bdb8:	81a3      	strh	r3, [r4, #12]
 800bdba:	e7e3      	b.n	800bd84 <__smakebuf_r+0xc>
 800bdbc:	4b0d      	ldr	r3, [pc, #52]	; (800bdf4 <__smakebuf_r+0x7c>)
 800bdbe:	62b3      	str	r3, [r6, #40]	; 0x28
 800bdc0:	89a3      	ldrh	r3, [r4, #12]
 800bdc2:	6020      	str	r0, [r4, #0]
 800bdc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bdc8:	81a3      	strh	r3, [r4, #12]
 800bdca:	9b00      	ldr	r3, [sp, #0]
 800bdcc:	6163      	str	r3, [r4, #20]
 800bdce:	9b01      	ldr	r3, [sp, #4]
 800bdd0:	6120      	str	r0, [r4, #16]
 800bdd2:	b15b      	cbz	r3, 800bdec <__smakebuf_r+0x74>
 800bdd4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bdd8:	4630      	mov	r0, r6
 800bdda:	f000 f883 	bl	800bee4 <_isatty_r>
 800bdde:	b128      	cbz	r0, 800bdec <__smakebuf_r+0x74>
 800bde0:	89a3      	ldrh	r3, [r4, #12]
 800bde2:	f023 0303 	bic.w	r3, r3, #3
 800bde6:	f043 0301 	orr.w	r3, r3, #1
 800bdea:	81a3      	strh	r3, [r4, #12]
 800bdec:	89a0      	ldrh	r0, [r4, #12]
 800bdee:	4305      	orrs	r5, r0
 800bdf0:	81a5      	strh	r5, [r4, #12]
 800bdf2:	e7cd      	b.n	800bd90 <__smakebuf_r+0x18>
 800bdf4:	08009539 	.word	0x08009539

0800bdf8 <__ascii_mbtowc>:
 800bdf8:	b082      	sub	sp, #8
 800bdfa:	b901      	cbnz	r1, 800bdfe <__ascii_mbtowc+0x6>
 800bdfc:	a901      	add	r1, sp, #4
 800bdfe:	b142      	cbz	r2, 800be12 <__ascii_mbtowc+0x1a>
 800be00:	b14b      	cbz	r3, 800be16 <__ascii_mbtowc+0x1e>
 800be02:	7813      	ldrb	r3, [r2, #0]
 800be04:	600b      	str	r3, [r1, #0]
 800be06:	7812      	ldrb	r2, [r2, #0]
 800be08:	1e10      	subs	r0, r2, #0
 800be0a:	bf18      	it	ne
 800be0c:	2001      	movne	r0, #1
 800be0e:	b002      	add	sp, #8
 800be10:	4770      	bx	lr
 800be12:	4610      	mov	r0, r2
 800be14:	e7fb      	b.n	800be0e <__ascii_mbtowc+0x16>
 800be16:	f06f 0001 	mvn.w	r0, #1
 800be1a:	e7f8      	b.n	800be0e <__ascii_mbtowc+0x16>

0800be1c <_raise_r>:
 800be1c:	291f      	cmp	r1, #31
 800be1e:	b538      	push	{r3, r4, r5, lr}
 800be20:	4604      	mov	r4, r0
 800be22:	460d      	mov	r5, r1
 800be24:	d904      	bls.n	800be30 <_raise_r+0x14>
 800be26:	2316      	movs	r3, #22
 800be28:	6003      	str	r3, [r0, #0]
 800be2a:	f04f 30ff 	mov.w	r0, #4294967295
 800be2e:	bd38      	pop	{r3, r4, r5, pc}
 800be30:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800be32:	b112      	cbz	r2, 800be3a <_raise_r+0x1e>
 800be34:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800be38:	b94b      	cbnz	r3, 800be4e <_raise_r+0x32>
 800be3a:	4620      	mov	r0, r4
 800be3c:	f000 f830 	bl	800bea0 <_getpid_r>
 800be40:	462a      	mov	r2, r5
 800be42:	4601      	mov	r1, r0
 800be44:	4620      	mov	r0, r4
 800be46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800be4a:	f000 b817 	b.w	800be7c <_kill_r>
 800be4e:	2b01      	cmp	r3, #1
 800be50:	d00a      	beq.n	800be68 <_raise_r+0x4c>
 800be52:	1c59      	adds	r1, r3, #1
 800be54:	d103      	bne.n	800be5e <_raise_r+0x42>
 800be56:	2316      	movs	r3, #22
 800be58:	6003      	str	r3, [r0, #0]
 800be5a:	2001      	movs	r0, #1
 800be5c:	e7e7      	b.n	800be2e <_raise_r+0x12>
 800be5e:	2400      	movs	r4, #0
 800be60:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800be64:	4628      	mov	r0, r5
 800be66:	4798      	blx	r3
 800be68:	2000      	movs	r0, #0
 800be6a:	e7e0      	b.n	800be2e <_raise_r+0x12>

0800be6c <raise>:
 800be6c:	4b02      	ldr	r3, [pc, #8]	; (800be78 <raise+0xc>)
 800be6e:	4601      	mov	r1, r0
 800be70:	6818      	ldr	r0, [r3, #0]
 800be72:	f7ff bfd3 	b.w	800be1c <_raise_r>
 800be76:	bf00      	nop
 800be78:	2000113c 	.word	0x2000113c

0800be7c <_kill_r>:
 800be7c:	b538      	push	{r3, r4, r5, lr}
 800be7e:	4d07      	ldr	r5, [pc, #28]	; (800be9c <_kill_r+0x20>)
 800be80:	2300      	movs	r3, #0
 800be82:	4604      	mov	r4, r0
 800be84:	4608      	mov	r0, r1
 800be86:	4611      	mov	r1, r2
 800be88:	602b      	str	r3, [r5, #0]
 800be8a:	f7f5 fd45 	bl	8001918 <_kill>
 800be8e:	1c43      	adds	r3, r0, #1
 800be90:	d102      	bne.n	800be98 <_kill_r+0x1c>
 800be92:	682b      	ldr	r3, [r5, #0]
 800be94:	b103      	cbz	r3, 800be98 <_kill_r+0x1c>
 800be96:	6023      	str	r3, [r4, #0]
 800be98:	bd38      	pop	{r3, r4, r5, pc}
 800be9a:	bf00      	nop
 800be9c:	2000167c 	.word	0x2000167c

0800bea0 <_getpid_r>:
 800bea0:	f7f5 bd38 	b.w	8001914 <_getpid>

0800bea4 <__ascii_wctomb>:
 800bea4:	b149      	cbz	r1, 800beba <__ascii_wctomb+0x16>
 800bea6:	2aff      	cmp	r2, #255	; 0xff
 800bea8:	bf85      	ittet	hi
 800beaa:	238a      	movhi	r3, #138	; 0x8a
 800beac:	6003      	strhi	r3, [r0, #0]
 800beae:	700a      	strbls	r2, [r1, #0]
 800beb0:	f04f 30ff 	movhi.w	r0, #4294967295
 800beb4:	bf98      	it	ls
 800beb6:	2001      	movls	r0, #1
 800beb8:	4770      	bx	lr
 800beba:	4608      	mov	r0, r1
 800bebc:	4770      	bx	lr
	...

0800bec0 <_fstat_r>:
 800bec0:	b538      	push	{r3, r4, r5, lr}
 800bec2:	4d07      	ldr	r5, [pc, #28]	; (800bee0 <_fstat_r+0x20>)
 800bec4:	2300      	movs	r3, #0
 800bec6:	4604      	mov	r4, r0
 800bec8:	4608      	mov	r0, r1
 800beca:	4611      	mov	r1, r2
 800becc:	602b      	str	r3, [r5, #0]
 800bece:	f7f5 fd42 	bl	8001956 <_fstat>
 800bed2:	1c43      	adds	r3, r0, #1
 800bed4:	d102      	bne.n	800bedc <_fstat_r+0x1c>
 800bed6:	682b      	ldr	r3, [r5, #0]
 800bed8:	b103      	cbz	r3, 800bedc <_fstat_r+0x1c>
 800beda:	6023      	str	r3, [r4, #0]
 800bedc:	bd38      	pop	{r3, r4, r5, pc}
 800bede:	bf00      	nop
 800bee0:	2000167c 	.word	0x2000167c

0800bee4 <_isatty_r>:
 800bee4:	b538      	push	{r3, r4, r5, lr}
 800bee6:	4d06      	ldr	r5, [pc, #24]	; (800bf00 <_isatty_r+0x1c>)
 800bee8:	2300      	movs	r3, #0
 800beea:	4604      	mov	r4, r0
 800beec:	4608      	mov	r0, r1
 800beee:	602b      	str	r3, [r5, #0]
 800bef0:	f7f5 fd36 	bl	8001960 <_isatty>
 800bef4:	1c43      	adds	r3, r0, #1
 800bef6:	d102      	bne.n	800befe <_isatty_r+0x1a>
 800bef8:	682b      	ldr	r3, [r5, #0]
 800befa:	b103      	cbz	r3, 800befe <_isatty_r+0x1a>
 800befc:	6023      	str	r3, [r4, #0]
 800befe:	bd38      	pop	{r3, r4, r5, pc}
 800bf00:	2000167c 	.word	0x2000167c

0800bf04 <powf>:
 800bf04:	b508      	push	{r3, lr}
 800bf06:	ed2d 8b04 	vpush	{d8-d9}
 800bf0a:	eeb0 8a60 	vmov.f32	s16, s1
 800bf0e:	eeb0 9a40 	vmov.f32	s18, s0
 800bf12:	f000 f84f 	bl	800bfb4 <__ieee754_powf>
 800bf16:	eeb4 8a48 	vcmp.f32	s16, s16
 800bf1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf1e:	eef0 8a40 	vmov.f32	s17, s0
 800bf22:	d63e      	bvs.n	800bfa2 <powf+0x9e>
 800bf24:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800bf28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf2c:	d112      	bne.n	800bf54 <powf+0x50>
 800bf2e:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800bf32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf36:	d039      	beq.n	800bfac <powf+0xa8>
 800bf38:	eeb0 0a48 	vmov.f32	s0, s16
 800bf3c:	f000 fb35 	bl	800c5aa <finitef>
 800bf40:	b378      	cbz	r0, 800bfa2 <powf+0x9e>
 800bf42:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800bf46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf4a:	d52a      	bpl.n	800bfa2 <powf+0x9e>
 800bf4c:	f7fd f9f6 	bl	800933c <__errno>
 800bf50:	2322      	movs	r3, #34	; 0x22
 800bf52:	e014      	b.n	800bf7e <powf+0x7a>
 800bf54:	f000 fb29 	bl	800c5aa <finitef>
 800bf58:	b998      	cbnz	r0, 800bf82 <powf+0x7e>
 800bf5a:	eeb0 0a49 	vmov.f32	s0, s18
 800bf5e:	f000 fb24 	bl	800c5aa <finitef>
 800bf62:	b170      	cbz	r0, 800bf82 <powf+0x7e>
 800bf64:	eeb0 0a48 	vmov.f32	s0, s16
 800bf68:	f000 fb1f 	bl	800c5aa <finitef>
 800bf6c:	b148      	cbz	r0, 800bf82 <powf+0x7e>
 800bf6e:	eef4 8a68 	vcmp.f32	s17, s17
 800bf72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf76:	d7e9      	bvc.n	800bf4c <powf+0x48>
 800bf78:	f7fd f9e0 	bl	800933c <__errno>
 800bf7c:	2321      	movs	r3, #33	; 0x21
 800bf7e:	6003      	str	r3, [r0, #0]
 800bf80:	e00f      	b.n	800bfa2 <powf+0x9e>
 800bf82:	eef5 8a40 	vcmp.f32	s17, #0.0
 800bf86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf8a:	d10a      	bne.n	800bfa2 <powf+0x9e>
 800bf8c:	eeb0 0a49 	vmov.f32	s0, s18
 800bf90:	f000 fb0b 	bl	800c5aa <finitef>
 800bf94:	b128      	cbz	r0, 800bfa2 <powf+0x9e>
 800bf96:	eeb0 0a48 	vmov.f32	s0, s16
 800bf9a:	f000 fb06 	bl	800c5aa <finitef>
 800bf9e:	2800      	cmp	r0, #0
 800bfa0:	d1d4      	bne.n	800bf4c <powf+0x48>
 800bfa2:	eeb0 0a68 	vmov.f32	s0, s17
 800bfa6:	ecbd 8b04 	vpop	{d8-d9}
 800bfaa:	bd08      	pop	{r3, pc}
 800bfac:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800bfb0:	e7f7      	b.n	800bfa2 <powf+0x9e>
	...

0800bfb4 <__ieee754_powf>:
 800bfb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bfb8:	ee10 4a90 	vmov	r4, s1
 800bfbc:	f034 4800 	bics.w	r8, r4, #2147483648	; 0x80000000
 800bfc0:	ed2d 8b02 	vpush	{d8}
 800bfc4:	ee10 6a10 	vmov	r6, s0
 800bfc8:	eeb0 8a40 	vmov.f32	s16, s0
 800bfcc:	eef0 8a60 	vmov.f32	s17, s1
 800bfd0:	d10c      	bne.n	800bfec <__ieee754_powf+0x38>
 800bfd2:	f486 0680 	eor.w	r6, r6, #4194304	; 0x400000
 800bfd6:	0076      	lsls	r6, r6, #1
 800bfd8:	f516 0f00 	cmn.w	r6, #8388608	; 0x800000
 800bfdc:	f240 8296 	bls.w	800c50c <__ieee754_powf+0x558>
 800bfe0:	ee38 0a28 	vadd.f32	s0, s16, s17
 800bfe4:	ecbd 8b02 	vpop	{d8}
 800bfe8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bfec:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800bff0:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800bff4:	dcf4      	bgt.n	800bfe0 <__ieee754_powf+0x2c>
 800bff6:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 800bffa:	dd08      	ble.n	800c00e <__ieee754_powf+0x5a>
 800bffc:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
 800c000:	d1ee      	bne.n	800bfe0 <__ieee754_powf+0x2c>
 800c002:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 800c006:	0064      	lsls	r4, r4, #1
 800c008:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 800c00c:	e7e6      	b.n	800bfdc <__ieee754_powf+0x28>
 800c00e:	2e00      	cmp	r6, #0
 800c010:	da20      	bge.n	800c054 <__ieee754_powf+0xa0>
 800c012:	f1b8 4f97 	cmp.w	r8, #1266679808	; 0x4b800000
 800c016:	da2d      	bge.n	800c074 <__ieee754_powf+0xc0>
 800c018:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 800c01c:	f2c0 827f 	blt.w	800c51e <__ieee754_powf+0x56a>
 800c020:	ea4f 53e8 	mov.w	r3, r8, asr #23
 800c024:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800c028:	fa48 f703 	asr.w	r7, r8, r3
 800c02c:	fa07 f303 	lsl.w	r3, r7, r3
 800c030:	4543      	cmp	r3, r8
 800c032:	f040 8274 	bne.w	800c51e <__ieee754_powf+0x56a>
 800c036:	f007 0701 	and.w	r7, r7, #1
 800c03a:	f1c7 0702 	rsb	r7, r7, #2
 800c03e:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 800c042:	d11f      	bne.n	800c084 <__ieee754_powf+0xd0>
 800c044:	2c00      	cmp	r4, #0
 800c046:	f280 8267 	bge.w	800c518 <__ieee754_powf+0x564>
 800c04a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800c04e:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800c052:	e7c7      	b.n	800bfe4 <__ieee754_powf+0x30>
 800c054:	2700      	movs	r7, #0
 800c056:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 800c05a:	d1f0      	bne.n	800c03e <__ieee754_powf+0x8a>
 800c05c:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 800c060:	f000 8254 	beq.w	800c50c <__ieee754_powf+0x558>
 800c064:	dd08      	ble.n	800c078 <__ieee754_powf+0xc4>
 800c066:	ed9f 0ac2 	vldr	s0, [pc, #776]	; 800c370 <__ieee754_powf+0x3bc>
 800c06a:	2c00      	cmp	r4, #0
 800c06c:	bfa8      	it	ge
 800c06e:	eeb0 0a68 	vmovge.f32	s0, s17
 800c072:	e7b7      	b.n	800bfe4 <__ieee754_powf+0x30>
 800c074:	2702      	movs	r7, #2
 800c076:	e7ee      	b.n	800c056 <__ieee754_powf+0xa2>
 800c078:	2c00      	cmp	r4, #0
 800c07a:	f280 824a 	bge.w	800c512 <__ieee754_powf+0x55e>
 800c07e:	eeb1 0a68 	vneg.f32	s0, s17
 800c082:	e7af      	b.n	800bfe4 <__ieee754_powf+0x30>
 800c084:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 800c088:	d102      	bne.n	800c090 <__ieee754_powf+0xdc>
 800c08a:	ee28 0a08 	vmul.f32	s0, s16, s16
 800c08e:	e7a9      	b.n	800bfe4 <__ieee754_powf+0x30>
 800c090:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 800c094:	eeb0 0a48 	vmov.f32	s0, s16
 800c098:	d107      	bne.n	800c0aa <__ieee754_powf+0xf6>
 800c09a:	2e00      	cmp	r6, #0
 800c09c:	db05      	blt.n	800c0aa <__ieee754_powf+0xf6>
 800c09e:	ecbd 8b02 	vpop	{d8}
 800c0a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c0a6:	f000 ba53 	b.w	800c550 <__ieee754_sqrtf>
 800c0aa:	f000 fa77 	bl	800c59c <fabsf>
 800c0ae:	b125      	cbz	r5, 800c0ba <__ieee754_powf+0x106>
 800c0b0:	f026 4340 	bic.w	r3, r6, #3221225472	; 0xc0000000
 800c0b4:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800c0b8:	d116      	bne.n	800c0e8 <__ieee754_powf+0x134>
 800c0ba:	2c00      	cmp	r4, #0
 800c0bc:	bfbc      	itt	lt
 800c0be:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 800c0c2:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800c0c6:	2e00      	cmp	r6, #0
 800c0c8:	da8c      	bge.n	800bfe4 <__ieee754_powf+0x30>
 800c0ca:	f1a5 557e 	sub.w	r5, r5, #1065353216	; 0x3f800000
 800c0ce:	ea55 0307 	orrs.w	r3, r5, r7
 800c0d2:	d104      	bne.n	800c0de <__ieee754_powf+0x12a>
 800c0d4:	ee70 7a40 	vsub.f32	s15, s0, s0
 800c0d8:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800c0dc:	e782      	b.n	800bfe4 <__ieee754_powf+0x30>
 800c0de:	2f01      	cmp	r7, #1
 800c0e0:	d180      	bne.n	800bfe4 <__ieee754_powf+0x30>
 800c0e2:	eeb1 0a40 	vneg.f32	s0, s0
 800c0e6:	e77d      	b.n	800bfe4 <__ieee754_powf+0x30>
 800c0e8:	0ff0      	lsrs	r0, r6, #31
 800c0ea:	3801      	subs	r0, #1
 800c0ec:	ea57 0300 	orrs.w	r3, r7, r0
 800c0f0:	d104      	bne.n	800c0fc <__ieee754_powf+0x148>
 800c0f2:	ee38 8a48 	vsub.f32	s16, s16, s16
 800c0f6:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800c0fa:	e773      	b.n	800bfe4 <__ieee754_powf+0x30>
 800c0fc:	f1b8 4f9a 	cmp.w	r8, #1291845632	; 0x4d000000
 800c100:	dd74      	ble.n	800c1ec <__ieee754_powf+0x238>
 800c102:	4b9c      	ldr	r3, [pc, #624]	; (800c374 <__ieee754_powf+0x3c0>)
 800c104:	429d      	cmp	r5, r3
 800c106:	dc08      	bgt.n	800c11a <__ieee754_powf+0x166>
 800c108:	2c00      	cmp	r4, #0
 800c10a:	da0b      	bge.n	800c124 <__ieee754_powf+0x170>
 800c10c:	2000      	movs	r0, #0
 800c10e:	ecbd 8b02 	vpop	{d8}
 800c112:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c116:	f000 ba3b 	b.w	800c590 <__math_oflowf>
 800c11a:	4b97      	ldr	r3, [pc, #604]	; (800c378 <__ieee754_powf+0x3c4>)
 800c11c:	429d      	cmp	r5, r3
 800c11e:	dd08      	ble.n	800c132 <__ieee754_powf+0x17e>
 800c120:	2c00      	cmp	r4, #0
 800c122:	dcf3      	bgt.n	800c10c <__ieee754_powf+0x158>
 800c124:	2000      	movs	r0, #0
 800c126:	ecbd 8b02 	vpop	{d8}
 800c12a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c12e:	f000 ba29 	b.w	800c584 <__math_uflowf>
 800c132:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800c136:	ee30 0a67 	vsub.f32	s0, s0, s15
 800c13a:	eddf 6a90 	vldr	s13, [pc, #576]	; 800c37c <__ieee754_powf+0x3c8>
 800c13e:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 800c142:	eee0 6a67 	vfms.f32	s13, s0, s15
 800c146:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800c14a:	eee6 7ac0 	vfms.f32	s15, s13, s0
 800c14e:	ee20 7a00 	vmul.f32	s14, s0, s0
 800c152:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c156:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 800c380 <__ieee754_powf+0x3cc>
 800c15a:	ee67 7a67 	vnmul.f32	s15, s14, s15
 800c15e:	ed9f 7a89 	vldr	s14, [pc, #548]	; 800c384 <__ieee754_powf+0x3d0>
 800c162:	eee0 7a07 	vfma.f32	s15, s0, s14
 800c166:	ed9f 7a88 	vldr	s14, [pc, #544]	; 800c388 <__ieee754_powf+0x3d4>
 800c16a:	eef0 6a67 	vmov.f32	s13, s15
 800c16e:	eee0 6a07 	vfma.f32	s13, s0, s14
 800c172:	ee16 3a90 	vmov	r3, s13
 800c176:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800c17a:	f023 030f 	bic.w	r3, r3, #15
 800c17e:	ee00 3a90 	vmov	s1, r3
 800c182:	eee0 0a47 	vfms.f32	s1, s0, s14
 800c186:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800c18a:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 800c18e:	f024 040f 	bic.w	r4, r4, #15
 800c192:	ee07 4a10 	vmov	s14, r4
 800c196:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800c19a:	ee38 7ac7 	vsub.f32	s14, s17, s14
 800c19e:	ee07 3a90 	vmov	s15, r3
 800c1a2:	eee7 0a27 	vfma.f32	s1, s14, s15
 800c1a6:	3f01      	subs	r7, #1
 800c1a8:	ea57 0200 	orrs.w	r2, r7, r0
 800c1ac:	ee07 4a10 	vmov	s14, r4
 800c1b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c1b4:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800c1b8:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800c1bc:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800c1c0:	ee17 4a10 	vmov	r4, s14
 800c1c4:	bf08      	it	eq
 800c1c6:	eeb0 8a40 	vmoveq.f32	s16, s0
 800c1ca:	2c00      	cmp	r4, #0
 800c1cc:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800c1d0:	f340 817e 	ble.w	800c4d0 <__ieee754_powf+0x51c>
 800c1d4:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 800c1d8:	f340 80f8 	ble.w	800c3cc <__ieee754_powf+0x418>
 800c1dc:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800c1e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c1e4:	bf4c      	ite	mi
 800c1e6:	2001      	movmi	r0, #1
 800c1e8:	2000      	movpl	r0, #0
 800c1ea:	e790      	b.n	800c10e <__ieee754_powf+0x15a>
 800c1ec:	f016 4fff 	tst.w	r6, #2139095040	; 0x7f800000
 800c1f0:	bf01      	itttt	eq
 800c1f2:	eddf 7a66 	vldreq	s15, [pc, #408]	; 800c38c <__ieee754_powf+0x3d8>
 800c1f6:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 800c1fa:	f06f 0217 	mvneq.w	r2, #23
 800c1fe:	ee17 5a90 	vmoveq	r5, s15
 800c202:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800c206:	bf18      	it	ne
 800c208:	2200      	movne	r2, #0
 800c20a:	3b7f      	subs	r3, #127	; 0x7f
 800c20c:	4413      	add	r3, r2
 800c20e:	4a60      	ldr	r2, [pc, #384]	; (800c390 <__ieee754_powf+0x3dc>)
 800c210:	f3c5 0516 	ubfx	r5, r5, #0, #23
 800c214:	4295      	cmp	r5, r2
 800c216:	f045 517e 	orr.w	r1, r5, #1065353216	; 0x3f800000
 800c21a:	dd06      	ble.n	800c22a <__ieee754_powf+0x276>
 800c21c:	4a5d      	ldr	r2, [pc, #372]	; (800c394 <__ieee754_powf+0x3e0>)
 800c21e:	4295      	cmp	r5, r2
 800c220:	f340 80a4 	ble.w	800c36c <__ieee754_powf+0x3b8>
 800c224:	3301      	adds	r3, #1
 800c226:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800c22a:	2500      	movs	r5, #0
 800c22c:	4a5a      	ldr	r2, [pc, #360]	; (800c398 <__ieee754_powf+0x3e4>)
 800c22e:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 800c232:	ee07 1a90 	vmov	s15, r1
 800c236:	ed92 7a00 	vldr	s14, [r2]
 800c23a:	4a58      	ldr	r2, [pc, #352]	; (800c39c <__ieee754_powf+0x3e8>)
 800c23c:	ee37 6a27 	vadd.f32	s12, s14, s15
 800c240:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800c244:	eec5 6a86 	vdiv.f32	s13, s11, s12
 800c248:	1049      	asrs	r1, r1, #1
 800c24a:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 800c24e:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 800c252:	eb01 5145 	add.w	r1, r1, r5, lsl #21
 800c256:	ee37 5ac7 	vsub.f32	s10, s15, s14
 800c25a:	ee06 1a10 	vmov	s12, r1
 800c25e:	ee65 4a26 	vmul.f32	s9, s10, s13
 800c262:	ee36 7a47 	vsub.f32	s14, s12, s14
 800c266:	ee14 6a90 	vmov	r6, s9
 800c26a:	4016      	ands	r6, r2
 800c26c:	ee05 6a90 	vmov	s11, r6
 800c270:	eea5 5ac6 	vfms.f32	s10, s11, s12
 800c274:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c278:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800c3a0 <__ieee754_powf+0x3ec>
 800c27c:	eea5 5ae7 	vfms.f32	s10, s11, s15
 800c280:	ee64 7aa4 	vmul.f32	s15, s9, s9
 800c284:	ee25 6a26 	vmul.f32	s12, s10, s13
 800c288:	eddf 6a46 	vldr	s13, [pc, #280]	; 800c3a4 <__ieee754_powf+0x3f0>
 800c28c:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800c290:	eddf 6a45 	vldr	s13, [pc, #276]	; 800c3a8 <__ieee754_powf+0x3f4>
 800c294:	eee7 6a27 	vfma.f32	s13, s14, s15
 800c298:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800c37c <__ieee754_powf+0x3c8>
 800c29c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800c2a0:	eddf 6a42 	vldr	s13, [pc, #264]	; 800c3ac <__ieee754_powf+0x3f8>
 800c2a4:	eee7 6a27 	vfma.f32	s13, s14, s15
 800c2a8:	ed9f 7a41 	vldr	s14, [pc, #260]	; 800c3b0 <__ieee754_powf+0x3fc>
 800c2ac:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800c2b0:	ee74 6aa5 	vadd.f32	s13, s9, s11
 800c2b4:	ee27 5aa7 	vmul.f32	s10, s15, s15
 800c2b8:	ee66 6a86 	vmul.f32	s13, s13, s12
 800c2bc:	eee5 6a07 	vfma.f32	s13, s10, s14
 800c2c0:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 800c2c4:	eef0 7a45 	vmov.f32	s15, s10
 800c2c8:	eee5 7aa5 	vfma.f32	s15, s11, s11
 800c2cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c2d0:	ee17 1a90 	vmov	r1, s15
 800c2d4:	4011      	ands	r1, r2
 800c2d6:	ee07 1a90 	vmov	s15, r1
 800c2da:	ee37 7ac5 	vsub.f32	s14, s15, s10
 800c2de:	eea5 7ae5 	vfms.f32	s14, s11, s11
 800c2e2:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800c2e6:	ee27 7a24 	vmul.f32	s14, s14, s9
 800c2ea:	eea6 7a27 	vfma.f32	s14, s12, s15
 800c2ee:	eeb0 6a47 	vmov.f32	s12, s14
 800c2f2:	eea5 6aa7 	vfma.f32	s12, s11, s15
 800c2f6:	ee16 1a10 	vmov	r1, s12
 800c2fa:	4011      	ands	r1, r2
 800c2fc:	ee06 1a90 	vmov	s13, r1
 800c300:	eee5 6ae7 	vfms.f32	s13, s11, s15
 800c304:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800c3b4 <__ieee754_powf+0x400>
 800c308:	eddf 5a2b 	vldr	s11, [pc, #172]	; 800c3b8 <__ieee754_powf+0x404>
 800c30c:	ee37 7a66 	vsub.f32	s14, s14, s13
 800c310:	ee06 1a10 	vmov	s12, r1
 800c314:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c318:	eddf 7a28 	vldr	s15, [pc, #160]	; 800c3bc <__ieee754_powf+0x408>
 800c31c:	4928      	ldr	r1, [pc, #160]	; (800c3c0 <__ieee754_powf+0x40c>)
 800c31e:	eea6 7a27 	vfma.f32	s14, s12, s15
 800c322:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 800c326:	edd1 7a00 	vldr	s15, [r1]
 800c32a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c32e:	ee07 3a90 	vmov	s15, r3
 800c332:	4b24      	ldr	r3, [pc, #144]	; (800c3c4 <__ieee754_powf+0x410>)
 800c334:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800c338:	eef0 7a47 	vmov.f32	s15, s14
 800c33c:	eee6 7a25 	vfma.f32	s15, s12, s11
 800c340:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800c344:	edd5 0a00 	vldr	s1, [r5]
 800c348:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800c34c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c350:	ee17 3a90 	vmov	r3, s15
 800c354:	4013      	ands	r3, r2
 800c356:	ee07 3a90 	vmov	s15, r3
 800c35a:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800c35e:	ee76 6ae0 	vsub.f32	s13, s13, s1
 800c362:	eee6 6a65 	vfms.f32	s13, s12, s11
 800c366:	ee77 7a66 	vsub.f32	s15, s14, s13
 800c36a:	e70e      	b.n	800c18a <__ieee754_powf+0x1d6>
 800c36c:	2501      	movs	r5, #1
 800c36e:	e75d      	b.n	800c22c <__ieee754_powf+0x278>
 800c370:	00000000 	.word	0x00000000
 800c374:	3f7ffff3 	.word	0x3f7ffff3
 800c378:	3f800007 	.word	0x3f800007
 800c37c:	3eaaaaab 	.word	0x3eaaaaab
 800c380:	3fb8aa3b 	.word	0x3fb8aa3b
 800c384:	36eca570 	.word	0x36eca570
 800c388:	3fb8aa00 	.word	0x3fb8aa00
 800c38c:	4b800000 	.word	0x4b800000
 800c390:	001cc471 	.word	0x001cc471
 800c394:	005db3d6 	.word	0x005db3d6
 800c398:	08022d30 	.word	0x08022d30
 800c39c:	fffff000 	.word	0xfffff000
 800c3a0:	3e6c3255 	.word	0x3e6c3255
 800c3a4:	3e53f142 	.word	0x3e53f142
 800c3a8:	3e8ba305 	.word	0x3e8ba305
 800c3ac:	3edb6db7 	.word	0x3edb6db7
 800c3b0:	3f19999a 	.word	0x3f19999a
 800c3b4:	3f76384f 	.word	0x3f76384f
 800c3b8:	3f763800 	.word	0x3f763800
 800c3bc:	369dc3a0 	.word	0x369dc3a0
 800c3c0:	08022d40 	.word	0x08022d40
 800c3c4:	08022d38 	.word	0x08022d38
 800c3c8:	3338aa3c 	.word	0x3338aa3c
 800c3cc:	f040 8095 	bne.w	800c4fa <__ieee754_powf+0x546>
 800c3d0:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 800c3c8 <__ieee754_powf+0x414>
 800c3d4:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c3d8:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800c3dc:	eef4 6ac7 	vcmpe.f32	s13, s14
 800c3e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c3e4:	f73f aefa 	bgt.w	800c1dc <__ieee754_powf+0x228>
 800c3e8:	15db      	asrs	r3, r3, #23
 800c3ea:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 800c3ee:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800c3f2:	4103      	asrs	r3, r0
 800c3f4:	4423      	add	r3, r4
 800c3f6:	494b      	ldr	r1, [pc, #300]	; (800c524 <__ieee754_powf+0x570>)
 800c3f8:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800c3fc:	3a7f      	subs	r2, #127	; 0x7f
 800c3fe:	4111      	asrs	r1, r2
 800c400:	ea23 0101 	bic.w	r1, r3, r1
 800c404:	ee07 1a10 	vmov	s14, r1
 800c408:	f3c3 0016 	ubfx	r0, r3, #0, #23
 800c40c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800c410:	f1c2 0217 	rsb	r2, r2, #23
 800c414:	4110      	asrs	r0, r2
 800c416:	2c00      	cmp	r4, #0
 800c418:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c41c:	bfb8      	it	lt
 800c41e:	4240      	neglt	r0, r0
 800c420:	ee37 7aa0 	vadd.f32	s14, s15, s1
 800c424:	ed9f 0a40 	vldr	s0, [pc, #256]	; 800c528 <__ieee754_powf+0x574>
 800c428:	eddf 6a40 	vldr	s13, [pc, #256]	; 800c52c <__ieee754_powf+0x578>
 800c42c:	ee17 3a10 	vmov	r3, s14
 800c430:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800c434:	f023 030f 	bic.w	r3, r3, #15
 800c438:	ee07 3a10 	vmov	s14, r3
 800c43c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c440:	ee27 0a00 	vmul.f32	s0, s14, s0
 800c444:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800c448:	eddf 7a39 	vldr	s15, [pc, #228]	; 800c530 <__ieee754_powf+0x57c>
 800c44c:	eea0 0aa7 	vfma.f32	s0, s1, s15
 800c450:	eef0 7a40 	vmov.f32	s15, s0
 800c454:	eee7 7a26 	vfma.f32	s15, s14, s13
 800c458:	eeb0 6a67 	vmov.f32	s12, s15
 800c45c:	eea7 6a66 	vfms.f32	s12, s14, s13
 800c460:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800c464:	ee30 0a46 	vsub.f32	s0, s0, s12
 800c468:	eddf 6a32 	vldr	s13, [pc, #200]	; 800c534 <__ieee754_powf+0x580>
 800c46c:	ed9f 6a32 	vldr	s12, [pc, #200]	; 800c538 <__ieee754_powf+0x584>
 800c470:	eee7 6a06 	vfma.f32	s13, s14, s12
 800c474:	ed9f 6a31 	vldr	s12, [pc, #196]	; 800c53c <__ieee754_powf+0x588>
 800c478:	eea6 6a87 	vfma.f32	s12, s13, s14
 800c47c:	eddf 6a30 	vldr	s13, [pc, #192]	; 800c540 <__ieee754_powf+0x58c>
 800c480:	eee6 6a07 	vfma.f32	s13, s12, s14
 800c484:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 800c544 <__ieee754_powf+0x590>
 800c488:	eea6 6a87 	vfma.f32	s12, s13, s14
 800c48c:	eef0 6a67 	vmov.f32	s13, s15
 800c490:	eee6 6a47 	vfms.f32	s13, s12, s14
 800c494:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800c498:	ee27 6aa6 	vmul.f32	s12, s15, s13
 800c49c:	ee76 6ac7 	vsub.f32	s13, s13, s14
 800c4a0:	eea7 0a80 	vfma.f32	s0, s15, s0
 800c4a4:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800c4a8:	ee37 0a40 	vsub.f32	s0, s14, s0
 800c4ac:	ee70 7a67 	vsub.f32	s15, s0, s15
 800c4b0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800c4b4:	ee30 0a67 	vsub.f32	s0, s0, s15
 800c4b8:	ee10 3a10 	vmov	r3, s0
 800c4bc:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800c4c0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c4c4:	da1f      	bge.n	800c506 <__ieee754_powf+0x552>
 800c4c6:	f000 f87d 	bl	800c5c4 <scalbnf>
 800c4ca:	ee20 0a08 	vmul.f32	s0, s0, s16
 800c4ce:	e589      	b.n	800bfe4 <__ieee754_powf+0x30>
 800c4d0:	4a1d      	ldr	r2, [pc, #116]	; (800c548 <__ieee754_powf+0x594>)
 800c4d2:	4293      	cmp	r3, r2
 800c4d4:	dd07      	ble.n	800c4e6 <__ieee754_powf+0x532>
 800c4d6:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800c4da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c4de:	bf4c      	ite	mi
 800c4e0:	2001      	movmi	r0, #1
 800c4e2:	2000      	movpl	r0, #0
 800c4e4:	e61f      	b.n	800c126 <__ieee754_powf+0x172>
 800c4e6:	d108      	bne.n	800c4fa <__ieee754_powf+0x546>
 800c4e8:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c4ec:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800c4f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c4f4:	f6ff af78 	blt.w	800c3e8 <__ieee754_powf+0x434>
 800c4f8:	e7ed      	b.n	800c4d6 <__ieee754_powf+0x522>
 800c4fa:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 800c4fe:	f73f af73 	bgt.w	800c3e8 <__ieee754_powf+0x434>
 800c502:	2000      	movs	r0, #0
 800c504:	e78c      	b.n	800c420 <__ieee754_powf+0x46c>
 800c506:	ee00 3a10 	vmov	s0, r3
 800c50a:	e7de      	b.n	800c4ca <__ieee754_powf+0x516>
 800c50c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800c510:	e568      	b.n	800bfe4 <__ieee754_powf+0x30>
 800c512:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800c54c <__ieee754_powf+0x598>
 800c516:	e565      	b.n	800bfe4 <__ieee754_powf+0x30>
 800c518:	eeb0 0a48 	vmov.f32	s0, s16
 800c51c:	e562      	b.n	800bfe4 <__ieee754_powf+0x30>
 800c51e:	2700      	movs	r7, #0
 800c520:	e58d      	b.n	800c03e <__ieee754_powf+0x8a>
 800c522:	bf00      	nop
 800c524:	007fffff 	.word	0x007fffff
 800c528:	35bfbe8c 	.word	0x35bfbe8c
 800c52c:	3f317200 	.word	0x3f317200
 800c530:	3f317218 	.word	0x3f317218
 800c534:	b5ddea0e 	.word	0xb5ddea0e
 800c538:	3331bb4c 	.word	0x3331bb4c
 800c53c:	388ab355 	.word	0x388ab355
 800c540:	bb360b61 	.word	0xbb360b61
 800c544:	3e2aaaab 	.word	0x3e2aaaab
 800c548:	43160000 	.word	0x43160000
 800c54c:	00000000 	.word	0x00000000

0800c550 <__ieee754_sqrtf>:
 800c550:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800c554:	4770      	bx	lr

0800c556 <with_errnof>:
 800c556:	b513      	push	{r0, r1, r4, lr}
 800c558:	4604      	mov	r4, r0
 800c55a:	ed8d 0a01 	vstr	s0, [sp, #4]
 800c55e:	f7fc feed 	bl	800933c <__errno>
 800c562:	ed9d 0a01 	vldr	s0, [sp, #4]
 800c566:	6004      	str	r4, [r0, #0]
 800c568:	b002      	add	sp, #8
 800c56a:	bd10      	pop	{r4, pc}

0800c56c <xflowf>:
 800c56c:	b130      	cbz	r0, 800c57c <xflowf+0x10>
 800c56e:	eef1 7a40 	vneg.f32	s15, s0
 800c572:	ee27 0a80 	vmul.f32	s0, s15, s0
 800c576:	2022      	movs	r0, #34	; 0x22
 800c578:	f7ff bfed 	b.w	800c556 <with_errnof>
 800c57c:	eef0 7a40 	vmov.f32	s15, s0
 800c580:	e7f7      	b.n	800c572 <xflowf+0x6>
	...

0800c584 <__math_uflowf>:
 800c584:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800c58c <__math_uflowf+0x8>
 800c588:	f7ff bff0 	b.w	800c56c <xflowf>
 800c58c:	10000000 	.word	0x10000000

0800c590 <__math_oflowf>:
 800c590:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800c598 <__math_oflowf+0x8>
 800c594:	f7ff bfea 	b.w	800c56c <xflowf>
 800c598:	70000000 	.word	0x70000000

0800c59c <fabsf>:
 800c59c:	ee10 3a10 	vmov	r3, s0
 800c5a0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c5a4:	ee00 3a10 	vmov	s0, r3
 800c5a8:	4770      	bx	lr

0800c5aa <finitef>:
 800c5aa:	b082      	sub	sp, #8
 800c5ac:	ed8d 0a01 	vstr	s0, [sp, #4]
 800c5b0:	9801      	ldr	r0, [sp, #4]
 800c5b2:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800c5b6:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800c5ba:	bfac      	ite	ge
 800c5bc:	2000      	movge	r0, #0
 800c5be:	2001      	movlt	r0, #1
 800c5c0:	b002      	add	sp, #8
 800c5c2:	4770      	bx	lr

0800c5c4 <scalbnf>:
 800c5c4:	ee10 3a10 	vmov	r3, s0
 800c5c8:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800c5cc:	d025      	beq.n	800c61a <scalbnf+0x56>
 800c5ce:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800c5d2:	d302      	bcc.n	800c5da <scalbnf+0x16>
 800c5d4:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c5d8:	4770      	bx	lr
 800c5da:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800c5de:	d122      	bne.n	800c626 <scalbnf+0x62>
 800c5e0:	4b2a      	ldr	r3, [pc, #168]	; (800c68c <scalbnf+0xc8>)
 800c5e2:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800c690 <scalbnf+0xcc>
 800c5e6:	4298      	cmp	r0, r3
 800c5e8:	ee20 0a27 	vmul.f32	s0, s0, s15
 800c5ec:	db16      	blt.n	800c61c <scalbnf+0x58>
 800c5ee:	ee10 3a10 	vmov	r3, s0
 800c5f2:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800c5f6:	3a19      	subs	r2, #25
 800c5f8:	4402      	add	r2, r0
 800c5fa:	2afe      	cmp	r2, #254	; 0xfe
 800c5fc:	dd15      	ble.n	800c62a <scalbnf+0x66>
 800c5fe:	ee10 3a10 	vmov	r3, s0
 800c602:	eddf 7a24 	vldr	s15, [pc, #144]	; 800c694 <scalbnf+0xd0>
 800c606:	eddf 6a24 	vldr	s13, [pc, #144]	; 800c698 <scalbnf+0xd4>
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	eeb0 7a67 	vmov.f32	s14, s15
 800c610:	bfb8      	it	lt
 800c612:	eef0 7a66 	vmovlt.f32	s15, s13
 800c616:	ee27 0a27 	vmul.f32	s0, s14, s15
 800c61a:	4770      	bx	lr
 800c61c:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800c69c <scalbnf+0xd8>
 800c620:	ee20 0a27 	vmul.f32	s0, s0, s15
 800c624:	4770      	bx	lr
 800c626:	0dd2      	lsrs	r2, r2, #23
 800c628:	e7e6      	b.n	800c5f8 <scalbnf+0x34>
 800c62a:	2a00      	cmp	r2, #0
 800c62c:	dd06      	ble.n	800c63c <scalbnf+0x78>
 800c62e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c632:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800c636:	ee00 3a10 	vmov	s0, r3
 800c63a:	4770      	bx	lr
 800c63c:	f112 0f16 	cmn.w	r2, #22
 800c640:	da1a      	bge.n	800c678 <scalbnf+0xb4>
 800c642:	f24c 3350 	movw	r3, #50000	; 0xc350
 800c646:	4298      	cmp	r0, r3
 800c648:	ee10 3a10 	vmov	r3, s0
 800c64c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c650:	dd0a      	ble.n	800c668 <scalbnf+0xa4>
 800c652:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800c694 <scalbnf+0xd0>
 800c656:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800c698 <scalbnf+0xd4>
 800c65a:	eef0 7a40 	vmov.f32	s15, s0
 800c65e:	2b00      	cmp	r3, #0
 800c660:	bf18      	it	ne
 800c662:	eeb0 0a47 	vmovne.f32	s0, s14
 800c666:	e7db      	b.n	800c620 <scalbnf+0x5c>
 800c668:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800c69c <scalbnf+0xd8>
 800c66c:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800c6a0 <scalbnf+0xdc>
 800c670:	eef0 7a40 	vmov.f32	s15, s0
 800c674:	2b00      	cmp	r3, #0
 800c676:	e7f3      	b.n	800c660 <scalbnf+0x9c>
 800c678:	3219      	adds	r2, #25
 800c67a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c67e:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800c682:	eddf 7a08 	vldr	s15, [pc, #32]	; 800c6a4 <scalbnf+0xe0>
 800c686:	ee07 3a10 	vmov	s14, r3
 800c68a:	e7c4      	b.n	800c616 <scalbnf+0x52>
 800c68c:	ffff3cb0 	.word	0xffff3cb0
 800c690:	4c000000 	.word	0x4c000000
 800c694:	7149f2ca 	.word	0x7149f2ca
 800c698:	f149f2ca 	.word	0xf149f2ca
 800c69c:	0da24260 	.word	0x0da24260
 800c6a0:	8da24260 	.word	0x8da24260
 800c6a4:	33000000 	.word	0x33000000

0800c6a8 <_init>:
 800c6a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6aa:	bf00      	nop
 800c6ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c6ae:	bc08      	pop	{r3}
 800c6b0:	469e      	mov	lr, r3
 800c6b2:	4770      	bx	lr

0800c6b4 <_fini>:
 800c6b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6b6:	bf00      	nop
 800c6b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c6ba:	bc08      	pop	{r3}
 800c6bc:	469e      	mov	lr, r3
 800c6be:	4770      	bx	lr
