
TACTS_NN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000640c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000dc4  080065e0  080065e0  000165e0  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080073a4  080073a4  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  080073a4  080073a4  000173a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080073ac  080073ac  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080073ac  080073ac  000173ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080073b0  080073b0  000173b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  080073b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000012c  200001e8  0800759c  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00001004  20000314  0800759c  00020314  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017f91  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000309a  00000000  00000000  000381a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0000d8d4  00000000  00000000  0003b243  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c08  00000000  00000000  00048b18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001058  00000000  00000000  00049720  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028670  00000000  00000000  0004a778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000176d8  00000000  00000000  00072de8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fcec1  00000000  00000000  0008a4c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00187381  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000035f4  00000000  00000000  001873d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stab         000000cc  00000000  00000000  0018a9c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .stabstr      000001b9  00000000  00000000  0018aa94  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e8 	.word	0x200001e8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080065c4 	.word	0x080065c4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001ec 	.word	0x200001ec
 800020c:	080065c4 	.word	0x080065c4

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b974 	b.w	8000ee8 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	468e      	mov	lr, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d14d      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c26:	428a      	cmp	r2, r1
 8000c28:	4694      	mov	ip, r2
 8000c2a:	d969      	bls.n	8000d00 <__udivmoddi4+0xe8>
 8000c2c:	fab2 f282 	clz	r2, r2
 8000c30:	b152      	cbz	r2, 8000c48 <__udivmoddi4+0x30>
 8000c32:	fa01 f302 	lsl.w	r3, r1, r2
 8000c36:	f1c2 0120 	rsb	r1, r2, #32
 8000c3a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c3e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c42:	ea41 0e03 	orr.w	lr, r1, r3
 8000c46:	4094      	lsls	r4, r2
 8000c48:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c4c:	0c21      	lsrs	r1, r4, #16
 8000c4e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c52:	fa1f f78c 	uxth.w	r7, ip
 8000c56:	fb08 e316 	mls	r3, r8, r6, lr
 8000c5a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c5e:	fb06 f107 	mul.w	r1, r6, r7
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c6e:	f080 811f 	bcs.w	8000eb0 <__udivmoddi4+0x298>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 811c 	bls.w	8000eb0 <__udivmoddi4+0x298>
 8000c78:	3e02      	subs	r6, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a5b      	subs	r3, r3, r1
 8000c7e:	b2a4      	uxth	r4, r4
 8000c80:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c84:	fb08 3310 	mls	r3, r8, r0, r3
 8000c88:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c8c:	fb00 f707 	mul.w	r7, r0, r7
 8000c90:	42a7      	cmp	r7, r4
 8000c92:	d90a      	bls.n	8000caa <__udivmoddi4+0x92>
 8000c94:	eb1c 0404 	adds.w	r4, ip, r4
 8000c98:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c9c:	f080 810a 	bcs.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca0:	42a7      	cmp	r7, r4
 8000ca2:	f240 8107 	bls.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca6:	4464      	add	r4, ip
 8000ca8:	3802      	subs	r0, #2
 8000caa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cae:	1be4      	subs	r4, r4, r7
 8000cb0:	2600      	movs	r6, #0
 8000cb2:	b11d      	cbz	r5, 8000cbc <__udivmoddi4+0xa4>
 8000cb4:	40d4      	lsrs	r4, r2
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cbc:	4631      	mov	r1, r6
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d909      	bls.n	8000cda <__udivmoddi4+0xc2>
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	f000 80ef 	beq.w	8000eaa <__udivmoddi4+0x292>
 8000ccc:	2600      	movs	r6, #0
 8000cce:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd2:	4630      	mov	r0, r6
 8000cd4:	4631      	mov	r1, r6
 8000cd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cda:	fab3 f683 	clz	r6, r3
 8000cde:	2e00      	cmp	r6, #0
 8000ce0:	d14a      	bne.n	8000d78 <__udivmoddi4+0x160>
 8000ce2:	428b      	cmp	r3, r1
 8000ce4:	d302      	bcc.n	8000cec <__udivmoddi4+0xd4>
 8000ce6:	4282      	cmp	r2, r0
 8000ce8:	f200 80f9 	bhi.w	8000ede <__udivmoddi4+0x2c6>
 8000cec:	1a84      	subs	r4, r0, r2
 8000cee:	eb61 0303 	sbc.w	r3, r1, r3
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	469e      	mov	lr, r3
 8000cf6:	2d00      	cmp	r5, #0
 8000cf8:	d0e0      	beq.n	8000cbc <__udivmoddi4+0xa4>
 8000cfa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cfe:	e7dd      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000d00:	b902      	cbnz	r2, 8000d04 <__udivmoddi4+0xec>
 8000d02:	deff      	udf	#255	; 0xff
 8000d04:	fab2 f282 	clz	r2, r2
 8000d08:	2a00      	cmp	r2, #0
 8000d0a:	f040 8092 	bne.w	8000e32 <__udivmoddi4+0x21a>
 8000d0e:	eba1 010c 	sub.w	r1, r1, ip
 8000d12:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d16:	fa1f fe8c 	uxth.w	lr, ip
 8000d1a:	2601      	movs	r6, #1
 8000d1c:	0c20      	lsrs	r0, r4, #16
 8000d1e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d22:	fb07 1113 	mls	r1, r7, r3, r1
 8000d26:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d2a:	fb0e f003 	mul.w	r0, lr, r3
 8000d2e:	4288      	cmp	r0, r1
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0x12c>
 8000d32:	eb1c 0101 	adds.w	r1, ip, r1
 8000d36:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x12a>
 8000d3c:	4288      	cmp	r0, r1
 8000d3e:	f200 80cb 	bhi.w	8000ed8 <__udivmoddi4+0x2c0>
 8000d42:	4643      	mov	r3, r8
 8000d44:	1a09      	subs	r1, r1, r0
 8000d46:	b2a4      	uxth	r4, r4
 8000d48:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d4c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d50:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d54:	fb0e fe00 	mul.w	lr, lr, r0
 8000d58:	45a6      	cmp	lr, r4
 8000d5a:	d908      	bls.n	8000d6e <__udivmoddi4+0x156>
 8000d5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d64:	d202      	bcs.n	8000d6c <__udivmoddi4+0x154>
 8000d66:	45a6      	cmp	lr, r4
 8000d68:	f200 80bb 	bhi.w	8000ee2 <__udivmoddi4+0x2ca>
 8000d6c:	4608      	mov	r0, r1
 8000d6e:	eba4 040e 	sub.w	r4, r4, lr
 8000d72:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d76:	e79c      	b.n	8000cb2 <__udivmoddi4+0x9a>
 8000d78:	f1c6 0720 	rsb	r7, r6, #32
 8000d7c:	40b3      	lsls	r3, r6
 8000d7e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d82:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d86:	fa20 f407 	lsr.w	r4, r0, r7
 8000d8a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d8e:	431c      	orrs	r4, r3
 8000d90:	40f9      	lsrs	r1, r7
 8000d92:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d96:	fa00 f306 	lsl.w	r3, r0, r6
 8000d9a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d9e:	0c20      	lsrs	r0, r4, #16
 8000da0:	fa1f fe8c 	uxth.w	lr, ip
 8000da4:	fb09 1118 	mls	r1, r9, r8, r1
 8000da8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dac:	fb08 f00e 	mul.w	r0, r8, lr
 8000db0:	4288      	cmp	r0, r1
 8000db2:	fa02 f206 	lsl.w	r2, r2, r6
 8000db6:	d90b      	bls.n	8000dd0 <__udivmoddi4+0x1b8>
 8000db8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dc0:	f080 8088 	bcs.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dc4:	4288      	cmp	r0, r1
 8000dc6:	f240 8085 	bls.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dca:	f1a8 0802 	sub.w	r8, r8, #2
 8000dce:	4461      	add	r1, ip
 8000dd0:	1a09      	subs	r1, r1, r0
 8000dd2:	b2a4      	uxth	r4, r4
 8000dd4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dd8:	fb09 1110 	mls	r1, r9, r0, r1
 8000ddc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000de0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000de4:	458e      	cmp	lr, r1
 8000de6:	d908      	bls.n	8000dfa <__udivmoddi4+0x1e2>
 8000de8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dec:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df0:	d26c      	bcs.n	8000ecc <__udivmoddi4+0x2b4>
 8000df2:	458e      	cmp	lr, r1
 8000df4:	d96a      	bls.n	8000ecc <__udivmoddi4+0x2b4>
 8000df6:	3802      	subs	r0, #2
 8000df8:	4461      	add	r1, ip
 8000dfa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dfe:	fba0 9402 	umull	r9, r4, r0, r2
 8000e02:	eba1 010e 	sub.w	r1, r1, lr
 8000e06:	42a1      	cmp	r1, r4
 8000e08:	46c8      	mov	r8, r9
 8000e0a:	46a6      	mov	lr, r4
 8000e0c:	d356      	bcc.n	8000ebc <__udivmoddi4+0x2a4>
 8000e0e:	d053      	beq.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e10:	b15d      	cbz	r5, 8000e2a <__udivmoddi4+0x212>
 8000e12:	ebb3 0208 	subs.w	r2, r3, r8
 8000e16:	eb61 010e 	sbc.w	r1, r1, lr
 8000e1a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e1e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e22:	40f1      	lsrs	r1, r6
 8000e24:	431f      	orrs	r7, r3
 8000e26:	e9c5 7100 	strd	r7, r1, [r5]
 8000e2a:	2600      	movs	r6, #0
 8000e2c:	4631      	mov	r1, r6
 8000e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e32:	f1c2 0320 	rsb	r3, r2, #32
 8000e36:	40d8      	lsrs	r0, r3
 8000e38:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e3c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e40:	4091      	lsls	r1, r2
 8000e42:	4301      	orrs	r1, r0
 8000e44:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e48:	fa1f fe8c 	uxth.w	lr, ip
 8000e4c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e50:	fb07 3610 	mls	r6, r7, r0, r3
 8000e54:	0c0b      	lsrs	r3, r1, #16
 8000e56:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e5a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e5e:	429e      	cmp	r6, r3
 8000e60:	fa04 f402 	lsl.w	r4, r4, r2
 8000e64:	d908      	bls.n	8000e78 <__udivmoddi4+0x260>
 8000e66:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e6e:	d22f      	bcs.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e70:	429e      	cmp	r6, r3
 8000e72:	d92d      	bls.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e74:	3802      	subs	r0, #2
 8000e76:	4463      	add	r3, ip
 8000e78:	1b9b      	subs	r3, r3, r6
 8000e7a:	b289      	uxth	r1, r1
 8000e7c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e80:	fb07 3316 	mls	r3, r7, r6, r3
 8000e84:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e88:	fb06 f30e 	mul.w	r3, r6, lr
 8000e8c:	428b      	cmp	r3, r1
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x28a>
 8000e90:	eb1c 0101 	adds.w	r1, ip, r1
 8000e94:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e98:	d216      	bcs.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d914      	bls.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9e:	3e02      	subs	r6, #2
 8000ea0:	4461      	add	r1, ip
 8000ea2:	1ac9      	subs	r1, r1, r3
 8000ea4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ea8:	e738      	b.n	8000d1c <__udivmoddi4+0x104>
 8000eaa:	462e      	mov	r6, r5
 8000eac:	4628      	mov	r0, r5
 8000eae:	e705      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000eb0:	4606      	mov	r6, r0
 8000eb2:	e6e3      	b.n	8000c7c <__udivmoddi4+0x64>
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	e6f8      	b.n	8000caa <__udivmoddi4+0x92>
 8000eb8:	454b      	cmp	r3, r9
 8000eba:	d2a9      	bcs.n	8000e10 <__udivmoddi4+0x1f8>
 8000ebc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ec0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ec4:	3801      	subs	r0, #1
 8000ec6:	e7a3      	b.n	8000e10 <__udivmoddi4+0x1f8>
 8000ec8:	4646      	mov	r6, r8
 8000eca:	e7ea      	b.n	8000ea2 <__udivmoddi4+0x28a>
 8000ecc:	4620      	mov	r0, r4
 8000ece:	e794      	b.n	8000dfa <__udivmoddi4+0x1e2>
 8000ed0:	4640      	mov	r0, r8
 8000ed2:	e7d1      	b.n	8000e78 <__udivmoddi4+0x260>
 8000ed4:	46d0      	mov	r8, sl
 8000ed6:	e77b      	b.n	8000dd0 <__udivmoddi4+0x1b8>
 8000ed8:	3b02      	subs	r3, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	e732      	b.n	8000d44 <__udivmoddi4+0x12c>
 8000ede:	4630      	mov	r0, r6
 8000ee0:	e709      	b.n	8000cf6 <__udivmoddi4+0xde>
 8000ee2:	4464      	add	r4, ip
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	e742      	b.n	8000d6e <__udivmoddi4+0x156>

08000ee8 <__aeabi_idiv0>:
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop

08000eec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000eec:	b510      	push	{r4, lr}
 8000eee:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ef0:	2210      	movs	r2, #16
 8000ef2:	2100      	movs	r1, #0
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ef4:	2402      	movs	r4, #2
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ef6:	a80a      	add	r0, sp, #40	; 0x28
 8000ef8:	f002 fc48 	bl	800378c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000efc:	2214      	movs	r2, #20
 8000efe:	2100      	movs	r1, #0
 8000f00:	a803      	add	r0, sp, #12
 8000f02:	f002 fc43 	bl	800378c <memset>
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f06:	4b20      	ldr	r3, [pc, #128]	; (8000f88 <SystemClock_Config+0x9c>)
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000f08:	2101      	movs	r1, #1
  RCC_OscInitStruct.PLL.PLLM = 4;
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000f0a:	2004      	movs	r0, #4
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f0c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f0e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000f12:	641a      	str	r2, [r3, #64]	; 0x40
 8000f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f1a:	9301      	str	r3, [sp, #4]
 8000f1c:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f1e:	4b1b      	ldr	r3, [pc, #108]	; (8000f8c <SystemClock_Config+0xa0>)
 8000f20:	681a      	ldr	r2, [r3, #0]
 8000f22:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8000f26:	601a      	str	r2, [r3, #0]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f2e:	9302      	str	r3, [sp, #8]
 8000f30:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000f32:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000f36:	e9cd 1308 	strd	r1, r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f3a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f3e:	e9cd 430e 	strd	r4, r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000f42:	23d8      	movs	r3, #216	; 0xd8
 8000f44:	e9cd 0310 	strd	r0, r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f48:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000f4a:	e9cd 4412 	strd	r4, r4, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f4e:	f000 fc9b 	bl	8001888 <HAL_RCC_OscConfig>
 8000f52:	b108      	cbz	r0, 8000f58 <SystemClock_Config+0x6c>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f54:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f56:	e7fe      	b.n	8000f56 <SystemClock_Config+0x6a>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000f58:	f000 fc5e 	bl	8001818 <HAL_PWREx_EnableOverDrive>
 8000f5c:	b108      	cbz	r0, 8000f62 <SystemClock_Config+0x76>
 8000f5e:	b672      	cpsid	i
  while (1)
 8000f60:	e7fe      	b.n	8000f60 <SystemClock_Config+0x74>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f62:	230f      	movs	r3, #15
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000f64:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f68:	9005      	str	r0, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000f6a:	2107      	movs	r1, #7
 8000f6c:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f6e:	e9cd 3403 	strd	r3, r4, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000f72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f76:	e9cd 2306 	strd	r2, r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000f7a:	f000 fe71 	bl	8001c60 <HAL_RCC_ClockConfig>
 8000f7e:	b108      	cbz	r0, 8000f84 <SystemClock_Config+0x98>
 8000f80:	b672      	cpsid	i
  while (1)
 8000f82:	e7fe      	b.n	8000f82 <SystemClock_Config+0x96>
}
 8000f84:	b014      	add	sp, #80	; 0x50
 8000f86:	bd10      	pop	{r4, pc}
 8000f88:	40023800 	.word	0x40023800
 8000f8c:	40007000 	.word	0x40007000

08000f90 <main>:
{
 8000f90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f92:	b0d3      	sub	sp, #332	; 0x14c
	AI_SINE_MODEL_DATA_WEIGHTS(ai_sine_model_data_weights_get()),
 8000f94:	f001 ffba 	bl	8002f0c <ai_sine_model_data_weights_get>
 8000f98:	4601      	mov	r1, r0
 8000f9a:	a824      	add	r0, sp, #144	; 0x90
 8000f9c:	f001 ffa2 	bl	8002ee4 <ai_sine_model_data_weights_buffer_get>
	AI_SINE_MODEL_DATA_ACTIVATIONS(activations)
 8000fa0:	a932      	add	r1, sp, #200	; 0xc8
 8000fa2:	a82b      	add	r0, sp, #172	; 0xac
 8000fa4:	f001 ff8c 	bl	8002ec0 <ai_sine_model_data_activations_buffer_get>
	ai_input[0].data = AI_HANDLE_PTR(in_data);
 8000fa8:	ab05      	add	r3, sp, #20
 8000faa:	930a      	str	r3, [sp, #40]	; 0x28
	ai_output[0].data = AI_HANDLE_PTR(out_data);
 8000fac:	ab06      	add	r3, sp, #24
 8000fae:	9311      	str	r3, [sp, #68]	; 0x44
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000fb0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000fb4:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000fb8:	4a6a      	ldr	r2, [pc, #424]	; (8001164 <main+0x1d4>)
 8000fba:	2100      	movs	r1, #0
 8000fbc:	f8c2 1250 	str.w	r1, [r2, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000fc0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000fc4:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000fc8:	6953      	ldr	r3, [r2, #20]
 8000fca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fce:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000fd0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000fd4:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000fd8:	f8c2 1084 	str.w	r1, [r2, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000fdc:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000fe0:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000fe4:	f643 74e0 	movw	r4, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000fe8:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000fec:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8000ff0:	015b      	lsls	r3, r3, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000ff2:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000ff6:	4601      	mov	r1, r0
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000ff8:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000ffc:	3901      	subs	r1, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000ffe:	f8c2 5260 	str.w	r5, [r2, #608]	; 0x260
      } while (ways-- != 0U);
 8001002:	d2f9      	bcs.n	8000ff8 <main+0x68>
    } while(sets-- != 0U);
 8001004:	3b20      	subs	r3, #32
 8001006:	f113 0f20 	cmn.w	r3, #32
 800100a:	d1f2      	bne.n	8000ff2 <main+0x62>
 800100c:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8001010:	6953      	ldr	r3, [r2, #20]
 8001012:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001016:	6153      	str	r3, [r2, #20]
 8001018:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800101c:	f3bf 8f6f 	isb	sy
  HAL_Init();
 8001020:	f000 f9cc 	bl	80013bc <HAL_Init>
  SystemClock_Config();
 8001024:	f7ff ff62 	bl	8000eec <SystemClock_Config>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001028:	4b4f      	ldr	r3, [pc, #316]	; (8001168 <main+0x1d8>)
  hcrc.Instance = CRC;
 800102a:	4850      	ldr	r0, [pc, #320]	; (800116c <main+0x1dc>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800102c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800102e:	f042 0202 	orr.w	r2, r2, #2
 8001032:	631a      	str	r2, [r3, #48]	; 0x30
 8001034:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001036:	f002 0202 	and.w	r2, r2, #2
 800103a:	9207      	str	r2, [sp, #28]
 800103c:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800103e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001040:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001044:	631a      	str	r2, [r3, #48]	; 0x30
 8001046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001048:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800104c:	9308      	str	r3, [sp, #32]
 800104e:	9b08      	ldr	r3, [sp, #32]
  hcrc.Instance = CRC;
 8001050:	4b47      	ldr	r3, [pc, #284]	; (8001170 <main+0x1e0>)
 8001052:	6003      	str	r3, [r0, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8001054:	2300      	movs	r3, #0
 8001056:	8083      	strh	r3, [r0, #4]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001058:	e9c0 3305 	strd	r3, r3, [r0, #20]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800105c:	2301      	movs	r3, #1
 800105e:	6203      	str	r3, [r0, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001060:	f000 fa42 	bl	80014e8 <HAL_CRC_Init>
 8001064:	b108      	cbz	r0, 800106a <main+0xda>
  __ASM volatile ("cpsid i" : : : "memory");
 8001066:	b672      	cpsid	i
  while (1)
 8001068:	e7fe      	b.n	8001068 <main+0xd8>
  htim7.Instance = TIM7;
 800106a:	4d42      	ldr	r5, [pc, #264]	; (8001174 <main+0x1e4>)
  htim7.Init.Prescaler = 216-1;
 800106c:	23d7      	movs	r3, #215	; 0xd7
 800106e:	4942      	ldr	r1, [pc, #264]	; (8001178 <main+0x1e8>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001070:	9019      	str	r0, [sp, #100]	; 0x64
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001072:	60a8      	str	r0, [r5, #8]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001074:	61a8      	str	r0, [r5, #24]
  htim7.Init.Prescaler = 216-1;
 8001076:	e9c5 1300 	strd	r1, r3, [r5]
  htim7.Init.Period = 65535;
 800107a:	f64f 73ff 	movw	r3, #65535	; 0xffff
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800107e:	e9cd 0017 	strd	r0, r0, [sp, #92]	; 0x5c
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001082:	4628      	mov	r0, r5
  htim7.Init.Period = 65535;
 8001084:	60eb      	str	r3, [r5, #12]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001086:	f001 fa89 	bl	800259c <HAL_TIM_Base_Init>
 800108a:	b108      	cbz	r0, 8001090 <main+0x100>
 800108c:	b672      	cpsid	i
  while (1)
 800108e:	e7fe      	b.n	800108e <main+0xfe>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001090:	9017      	str	r0, [sp, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001092:	a917      	add	r1, sp, #92	; 0x5c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001094:	9019      	str	r0, [sp, #100]	; 0x64
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001096:	4628      	mov	r0, r5
 8001098:	f001 fab0 	bl	80025fc <HAL_TIMEx_MasterConfigSynchronization>
 800109c:	b108      	cbz	r0, 80010a2 <main+0x112>
 800109e:	b672      	cpsid	i
  while (1)
 80010a0:	e7fe      	b.n	80010a0 <main+0x110>
  huart1.Instance = USART1;
 80010a2:	4c36      	ldr	r4, [pc, #216]	; (800117c <main+0x1ec>)
  huart1.Init.BaudRate = 115200;
 80010a4:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80010a8:	4a35      	ldr	r2, [pc, #212]	; (8001180 <main+0x1f0>)
  huart1.Init.Parity = UART_PARITY_NONE;
 80010aa:	6120      	str	r0, [r4, #16]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010ac:	6260      	str	r0, [r4, #36]	; 0x24
  huart1.Init.BaudRate = 115200;
 80010ae:	e9c4 2300 	strd	r2, r3, [r4]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80010b2:	230c      	movs	r3, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 80010b4:	e9c4 0002 	strd	r0, r0, [r4, #8]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010b8:	e9c4 3005 	strd	r3, r0, [r4, #20]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010bc:	e9c4 0007 	strd	r0, r0, [r4, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80010c0:	4620      	mov	r0, r4
 80010c2:	f001 fecc 	bl	8002e5e <HAL_UART_Init>
 80010c6:	4602      	mov	r2, r0
 80010c8:	b108      	cbz	r0, 80010ce <main+0x13e>
 80010ca:	b672      	cpsid	i
  while (1)
 80010cc:	e7fe      	b.n	80010cc <main+0x13c>
  HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80010ce:	4601      	mov	r1, r0
 80010d0:	9003      	str	r0, [sp, #12]
 80010d2:	2037      	movs	r0, #55	; 0x37
	       HAL_UART_Transmit(&huart1, (uint8_t *)buf, sprintf(buf,"Output: %f | Duration: %lu\r\n", output, htim7.Instance->CNT - timestamp), 100);
 80010d4:	2600      	movs	r6, #0
  HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80010d6:	f000 f9b3 	bl	8001440 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80010da:	2037      	movs	r0, #55	; 0x37
 80010dc:	f000 f9e2 	bl	80014a4 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80010e0:	9a03      	ldr	r2, [sp, #12]
 80010e2:	2025      	movs	r0, #37	; 0x25
	       HAL_UART_Transmit(&huart1, (uint8_t *)buf, sprintf(buf,"Output: %f | Duration: %lu\r\n", output, htim7.Instance->CNT - timestamp), 100);
 80010e4:	2700      	movs	r7, #0
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80010e6:	4611      	mov	r1, r2
 80010e8:	f000 f9aa 	bl	8001440 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 80010ec:	2025      	movs	r0, #37	; 0x25
 80010ee:	f000 f9d9 	bl	80014a4 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80010f2:	9a03      	ldr	r2, [sp, #12]
 80010f4:	2005      	movs	r0, #5
 80010f6:	4611      	mov	r1, r2
 80010f8:	f000 f9a2 	bl	8001440 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80010fc:	2005      	movs	r0, #5
 80010fe:	f000 f9d1 	bl	80014a4 <HAL_NVIC_EnableIRQ>
  buf_len = sprintf(buf, "\r\n\r\nSTM32 X-Cube-AI test!!!!!!!!!!\r\n");
 8001102:	4920      	ldr	r1, [pc, #128]	; (8001184 <main+0x1f4>)
 8001104:	a817      	add	r0, sp, #92	; 0x5c
 8001106:	f003 f8c3 	bl	8004290 <strcpy>
  HAL_UART_Transmit(&huart1, (uint8_t *)buf, buf_len, 100);
 800110a:	2364      	movs	r3, #100	; 0x64
 800110c:	2224      	movs	r2, #36	; 0x24
 800110e:	a917      	add	r1, sp, #92	; 0x5c
 8001110:	4620      	mov	r0, r4
 8001112:	f001 fe30 	bl	8002d76 <HAL_UART_Transmit>
  HAL_TIM_Base_Start(&htim7);
 8001116:	4628      	mov	r0, r5
 8001118:	f001 f8ea 	bl	80022f0 <HAL_TIM_Base_Start>
  buf_len = sprintf(buf, "\r\n\r\nSTM32 X-Cube-AI test\r\n");
 800111c:	491a      	ldr	r1, [pc, #104]	; (8001188 <main+0x1f8>)
 800111e:	a817      	add	r0, sp, #92	; 0x5c
 8001120:	f003 f8b6 	bl	8004290 <strcpy>
  HAL_UART_Transmit(&huart1, (uint8_t *)buf, buf_len, 100);
 8001124:	4620      	mov	r0, r4
	       HAL_UART_Transmit(&huart1, (uint8_t *)buf, sprintf(buf,"Output: %f | Duration: %lu\r\n", output, htim7.Instance->CNT - timestamp), 100);
 8001126:	4c19      	ldr	r4, [pc, #100]	; (800118c <main+0x1fc>)
  HAL_UART_Transmit(&huart1, (uint8_t *)buf, buf_len, 100);
 8001128:	2364      	movs	r3, #100	; 0x64
 800112a:	221a      	movs	r2, #26
 800112c:	a917      	add	r1, sp, #92	; 0x5c
 800112e:	f001 fe22 	bl	8002d76 <HAL_UART_Transmit>
	       ai_sine_model_run(sine_model, &ai_input[0], &ai_output[0]);
 8001132:	aa10      	add	r2, sp, #64	; 0x40
 8001134:	a909      	add	r1, sp, #36	; 0x24
 8001136:	2000      	movs	r0, #0
 8001138:	f001 febf 	bl	8002eba <ai_sine_model_run>
	       HAL_UART_Transmit(&huart1, (uint8_t *)buf, sprintf(buf,"Output: %f | Duration: %lu\r\n", output, htim7.Instance->CNT - timestamp), 100);
 800113c:	682b      	ldr	r3, [r5, #0]
 800113e:	4632      	mov	r2, r6
 8001140:	4621      	mov	r1, r4
 8001142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001144:	a817      	add	r0, sp, #92	; 0x5c
 8001146:	9300      	str	r3, [sp, #0]
 8001148:	463b      	mov	r3, r7
 800114a:	f003 f881 	bl	8004250 <siprintf>
 800114e:	2364      	movs	r3, #100	; 0x64
 8001150:	b282      	uxth	r2, r0
 8001152:	a917      	add	r1, sp, #92	; 0x5c
 8001154:	4809      	ldr	r0, [pc, #36]	; (800117c <main+0x1ec>)
 8001156:	f001 fe0e 	bl	8002d76 <HAL_UART_Transmit>
	       HAL_Delay(100);
 800115a:	2064      	movs	r0, #100	; 0x64
 800115c:	f000 f94c 	bl	80013f8 <HAL_Delay>
  while (1)
 8001160:	e7e7      	b.n	8001132 <main+0x1a2>
 8001162:	bf00      	nop
 8001164:	e000ed00 	.word	0xe000ed00
 8001168:	40023800 	.word	0x40023800
 800116c:	20000204 	.word	0x20000204
 8001170:	40023000 	.word	0x40023000
 8001174:	20000228 	.word	0x20000228
 8001178:	40001400 	.word	0x40001400
 800117c:	20000274 	.word	0x20000274
 8001180:	40011000 	.word	0x40011000
 8001184:	080065e0 	.word	0x080065e0
 8001188:	08006605 	.word	0x08006605
 800118c:	08006620 	.word	0x08006620

08001190 <Error_Handler>:
 8001190:	b672      	cpsid	i
  while (1)
 8001192:	e7fe      	b.n	8001192 <Error_Handler+0x2>

08001194 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001194:	4b0a      	ldr	r3, [pc, #40]	; (80011c0 <HAL_MspInit+0x2c>)
{
 8001196:	b082      	sub	sp, #8
  __HAL_RCC_PWR_CLK_ENABLE();
 8001198:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800119a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800119e:	641a      	str	r2, [r3, #64]	; 0x40
 80011a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011a2:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 80011a6:	9200      	str	r2, [sp, #0]
 80011a8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011aa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80011ac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80011b0:	645a      	str	r2, [r3, #68]	; 0x44
 80011b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011b8:	9301      	str	r3, [sp, #4]
 80011ba:	9b01      	ldr	r3, [sp, #4]
  /* Peripheral interrupt init */

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011bc:	b002      	add	sp, #8
 80011be:	4770      	bx	lr
 80011c0:	40023800 	.word	0x40023800

080011c4 <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 80011c4:	6802      	ldr	r2, [r0, #0]
{
 80011c6:	b082      	sub	sp, #8
  if(hcrc->Instance==CRC)
 80011c8:	4b08      	ldr	r3, [pc, #32]	; (80011ec <HAL_CRC_MspInit+0x28>)
 80011ca:	429a      	cmp	r2, r3
 80011cc:	d10b      	bne.n	80011e6 <HAL_CRC_MspInit+0x22>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80011ce:	f8d3 2830 	ldr.w	r2, [r3, #2096]	; 0x830
 80011d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80011d6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80011da:	631a      	str	r2, [r3, #48]	; 0x30
 80011dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011e2:	9301      	str	r3, [sp, #4]
 80011e4:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80011e6:	b002      	add	sp, #8
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop
 80011ec:	40023000 	.word	0x40023000

080011f0 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM7)
 80011f0:	6802      	ldr	r2, [r0, #0]
{
 80011f2:	b082      	sub	sp, #8
  if(htim_base->Instance==TIM7)
 80011f4:	4b07      	ldr	r3, [pc, #28]	; (8001214 <HAL_TIM_Base_MspInit+0x24>)
 80011f6:	429a      	cmp	r2, r3
 80011f8:	d10a      	bne.n	8001210 <HAL_TIM_Base_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 80011fa:	f503 3309 	add.w	r3, r3, #140288	; 0x22400
 80011fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001200:	f042 0220 	orr.w	r2, r2, #32
 8001204:	641a      	str	r2, [r3, #64]	; 0x40
 8001206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001208:	f003 0320 	and.w	r3, r3, #32
 800120c:	9301      	str	r3, [sp, #4]
 800120e:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8001210:	b002      	add	sp, #8
 8001212:	4770      	bx	lr
 8001214:	40001400 	.word	0x40001400

08001218 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001218:	b510      	push	{r4, lr}
 800121a:	b0a8      	sub	sp, #160	; 0xa0
 800121c:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800121e:	2214      	movs	r2, #20
 8001220:	2100      	movs	r1, #0
 8001222:	a802      	add	r0, sp, #8
 8001224:	f002 fab2 	bl	800378c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001228:	2284      	movs	r2, #132	; 0x84
 800122a:	2100      	movs	r1, #0
 800122c:	a807      	add	r0, sp, #28
 800122e:	f002 faad 	bl	800378c <memset>
  if(huart->Instance==USART1)
 8001232:	6822      	ldr	r2, [r4, #0]
 8001234:	4b16      	ldr	r3, [pc, #88]	; (8001290 <HAL_UART_MspInit+0x78>)
 8001236:	429a      	cmp	r2, r3
 8001238:	d128      	bne.n	800128c <HAL_UART_MspInit+0x74>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800123a:	2340      	movs	r3, #64	; 0x40
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800123c:	a807      	add	r0, sp, #28
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800123e:	9307      	str	r3, [sp, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001240:	f000 fdce 	bl	8001de0 <HAL_RCCEx_PeriphCLKConfig>
 8001244:	b108      	cbz	r0, 800124a <HAL_UART_MspInit+0x32>
    {
      Error_Handler();
 8001246:	f7ff ffa3 	bl	8001190 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800124a:	4b12      	ldr	r3, [pc, #72]	; (8001294 <HAL_UART_MspInit+0x7c>)
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800124c:	2100      	movs	r1, #0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800124e:	4812      	ldr	r0, [pc, #72]	; (8001298 <HAL_UART_MspInit+0x80>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8001250:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001252:	f042 0210 	orr.w	r2, r2, #16
 8001256:	645a      	str	r2, [r3, #68]	; 0x44
 8001258:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800125a:	f002 0210 	and.w	r2, r2, #16
 800125e:	9200      	str	r2, [sp, #0]
 8001260:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001262:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001264:	f042 0202 	orr.w	r2, r2, #2
 8001268:	631a      	str	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800126a:	22c0      	movs	r2, #192	; 0xc0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800126c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126e:	f003 0302 	and.w	r3, r3, #2
 8001272:	9301      	str	r3, [sp, #4]
 8001274:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001276:	2302      	movs	r3, #2
 8001278:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800127c:	2303      	movs	r3, #3
 800127e:	e9cd 1304 	strd	r1, r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001282:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001284:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001286:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001288:	f000 f9e2 	bl	8001650 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800128c:	b028      	add	sp, #160	; 0xa0
 800128e:	bd10      	pop	{r4, pc}
 8001290:	40011000 	.word	0x40011000
 8001294:	40023800 	.word	0x40023800
 8001298:	40020400 	.word	0x40020400

0800129c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800129c:	e7fe      	b.n	800129c <NMI_Handler>

0800129e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800129e:	e7fe      	b.n	800129e <HardFault_Handler>

080012a0 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012a0:	e7fe      	b.n	80012a0 <MemManage_Handler>

080012a2 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012a2:	e7fe      	b.n	80012a2 <BusFault_Handler>

080012a4 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012a4:	e7fe      	b.n	80012a4 <UsageFault_Handler>

080012a6 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012a6:	4770      	bx	lr

080012a8 <DebugMon_Handler>:
 80012a8:	4770      	bx	lr

080012aa <PendSV_Handler>:
 80012aa:	4770      	bx	lr

080012ac <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012ac:	f000 b892 	b.w	80013d4 <HAL_IncTick>

080012b0 <RCC_IRQHandler>:
 80012b0:	4770      	bx	lr
	...

080012b4 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80012b4:	4801      	ldr	r0, [pc, #4]	; (80012bc <USART1_IRQHandler+0x8>)
 80012b6:	f001 ba23 	b.w	8002700 <HAL_UART_IRQHandler>
 80012ba:	bf00      	nop
 80012bc:	20000274 	.word	0x20000274

080012c0 <TIM7_IRQHandler>:
void TIM7_IRQHandler(void)
{
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80012c0:	4801      	ldr	r0, [pc, #4]	; (80012c8 <TIM7_IRQHandler+0x8>)
 80012c2:	f001 b854 	b.w	800236e <HAL_TIM_IRQHandler>
 80012c6:	bf00      	nop
 80012c8:	20000228 	.word	0x20000228

080012cc <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012cc:	4a0b      	ldr	r2, [pc, #44]	; (80012fc <_sbrk+0x30>)
{
 80012ce:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 80012d0:	6811      	ldr	r1, [r2, #0]
{
 80012d2:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 80012d4:	b909      	cbnz	r1, 80012da <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 80012d6:	490a      	ldr	r1, [pc, #40]	; (8001300 <_sbrk+0x34>)
 80012d8:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012da:	6810      	ldr	r0, [r2, #0]
 80012dc:	4909      	ldr	r1, [pc, #36]	; (8001304 <_sbrk+0x38>)
 80012de:	4c0a      	ldr	r4, [pc, #40]	; (8001308 <_sbrk+0x3c>)
 80012e0:	4403      	add	r3, r0
 80012e2:	1b09      	subs	r1, r1, r4
 80012e4:	428b      	cmp	r3, r1
 80012e6:	d906      	bls.n	80012f6 <_sbrk+0x2a>
  {
    errno = ENOMEM;
 80012e8:	f002 fa10 	bl	800370c <__errno>
 80012ec:	230c      	movs	r3, #12
 80012ee:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80012f0:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 80012f4:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 80012f6:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 80012f8:	e7fc      	b.n	80012f4 <_sbrk+0x28>
 80012fa:	bf00      	nop
 80012fc:	200002fc 	.word	0x200002fc
 8001300:	20000318 	.word	0x20000318
 8001304:	20050000 	.word	0x20050000
 8001308:	00000800 	.word	0x00000800

0800130c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800130c:	4a03      	ldr	r2, [pc, #12]	; (800131c <SystemInit+0x10>)
 800130e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001312:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001316:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800131a:	4770      	bx	lr
 800131c:	e000ed00 	.word	0xe000ed00

08001320 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001320:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001358 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001324:	480d      	ldr	r0, [pc, #52]	; (800135c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001326:	490e      	ldr	r1, [pc, #56]	; (8001360 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001328:	4a0e      	ldr	r2, [pc, #56]	; (8001364 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800132a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800132c:	e002      	b.n	8001334 <LoopCopyDataInit>

0800132e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800132e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001330:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001332:	3304      	adds	r3, #4

08001334 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001334:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001336:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001338:	d3f9      	bcc.n	800132e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800133a:	4a0b      	ldr	r2, [pc, #44]	; (8001368 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800133c:	4c0b      	ldr	r4, [pc, #44]	; (800136c <LoopFillZerobss+0x26>)
  movs r3, #0
 800133e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001340:	e001      	b.n	8001346 <LoopFillZerobss>

08001342 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001342:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001344:	3204      	adds	r2, #4

08001346 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001346:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001348:	d3fb      	bcc.n	8001342 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800134a:	f7ff ffdf 	bl	800130c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800134e:	f002 f9e3 	bl	8003718 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001352:	f7ff fe1d 	bl	8000f90 <main>
  bx  lr    
 8001356:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001358:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800135c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001360:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8001364:	080073b4 	.word	0x080073b4
  ldr r2, =_sbss
 8001368:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 800136c:	20000314 	.word	0x20000314

08001370 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001370:	e7fe      	b.n	8001370 <ADC_IRQHandler>
	...

08001374 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001374:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001376:	4b0e      	ldr	r3, [pc, #56]	; (80013b0 <HAL_InitTick+0x3c>)
{
 8001378:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800137a:	4a0e      	ldr	r2, [pc, #56]	; (80013b4 <HAL_InitTick+0x40>)
 800137c:	7818      	ldrb	r0, [r3, #0]
 800137e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001382:	fbb3 f3f0 	udiv	r3, r3, r0
 8001386:	6810      	ldr	r0, [r2, #0]
 8001388:	fbb0 f0f3 	udiv	r0, r0, r3
 800138c:	f000 f898 	bl	80014c0 <HAL_SYSTICK_Config>
 8001390:	4604      	mov	r4, r0
 8001392:	b958      	cbnz	r0, 80013ac <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001394:	2d0f      	cmp	r5, #15
 8001396:	d809      	bhi.n	80013ac <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001398:	4602      	mov	r2, r0
 800139a:	4629      	mov	r1, r5
 800139c:	f04f 30ff 	mov.w	r0, #4294967295
 80013a0:	f000 f84e 	bl	8001440 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013a4:	4b04      	ldr	r3, [pc, #16]	; (80013b8 <HAL_InitTick+0x44>)
 80013a6:	4620      	mov	r0, r4
 80013a8:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80013aa:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80013ac:	2001      	movs	r0, #1
 80013ae:	e7fc      	b.n	80013aa <HAL_InitTick+0x36>
 80013b0:	20000004 	.word	0x20000004
 80013b4:	20000000 	.word	0x20000000
 80013b8:	20000008 	.word	0x20000008

080013bc <HAL_Init>:
{
 80013bc:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013be:	2003      	movs	r0, #3
 80013c0:	f000 f82c 	bl	800141c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80013c4:	200f      	movs	r0, #15
 80013c6:	f7ff ffd5 	bl	8001374 <HAL_InitTick>
  HAL_MspInit();
 80013ca:	f7ff fee3 	bl	8001194 <HAL_MspInit>
}
 80013ce:	2000      	movs	r0, #0
 80013d0:	bd08      	pop	{r3, pc}
	...

080013d4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80013d4:	4a03      	ldr	r2, [pc, #12]	; (80013e4 <HAL_IncTick+0x10>)
 80013d6:	4b04      	ldr	r3, [pc, #16]	; (80013e8 <HAL_IncTick+0x14>)
 80013d8:	6811      	ldr	r1, [r2, #0]
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	440b      	add	r3, r1
 80013de:	6013      	str	r3, [r2, #0]
}
 80013e0:	4770      	bx	lr
 80013e2:	bf00      	nop
 80013e4:	20000300 	.word	0x20000300
 80013e8:	20000004 	.word	0x20000004

080013ec <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80013ec:	4b01      	ldr	r3, [pc, #4]	; (80013f4 <HAL_GetTick+0x8>)
 80013ee:	6818      	ldr	r0, [r3, #0]
}
 80013f0:	4770      	bx	lr
 80013f2:	bf00      	nop
 80013f4:	20000300 	.word	0x20000300

080013f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013f8:	b538      	push	{r3, r4, r5, lr}
 80013fa:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80013fc:	f7ff fff6 	bl	80013ec <HAL_GetTick>
 8001400:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001402:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8001404:	bf1e      	ittt	ne
 8001406:	4b04      	ldrne	r3, [pc, #16]	; (8001418 <HAL_Delay+0x20>)
 8001408:	781b      	ldrbne	r3, [r3, #0]
 800140a:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800140c:	f7ff ffee 	bl	80013ec <HAL_GetTick>
 8001410:	1b43      	subs	r3, r0, r5
 8001412:	42a3      	cmp	r3, r4
 8001414:	d3fa      	bcc.n	800140c <HAL_Delay+0x14>
  {
  }
}
 8001416:	bd38      	pop	{r3, r4, r5, pc}
 8001418:	20000004 	.word	0x20000004

0800141c <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800141c:	4907      	ldr	r1, [pc, #28]	; (800143c <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800141e:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001420:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001422:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001426:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800142a:	0412      	lsls	r2, r2, #16
 800142c:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800142e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001430:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001434:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8001438:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800143a:	4770      	bx	lr
 800143c:	e000ed00 	.word	0xe000ed00

08001440 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001440:	4b16      	ldr	r3, [pc, #88]	; (800149c <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001442:	b530      	push	{r4, r5, lr}
 8001444:	68dc      	ldr	r4, [r3, #12]
 8001446:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800144a:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800144e:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001450:	2d04      	cmp	r5, #4
 8001452:	bf28      	it	cs
 8001454:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001456:	2b06      	cmp	r3, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001458:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800145c:	bf8c      	ite	hi
 800145e:	3c03      	subhi	r4, #3
 8001460:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001462:	fa03 f505 	lsl.w	r5, r3, r5
  if ((int32_t)(IRQn) >= 0)
 8001466:	2800      	cmp	r0, #0
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001468:	fa03 f304 	lsl.w	r3, r3, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800146c:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001470:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001474:	fa01 f104 	lsl.w	r1, r1, r4
 8001478:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800147c:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8001480:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8001482:	db06      	blt.n	8001492 <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001484:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8001488:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 800148c:	f880 3300 	strb.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001490:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001492:	f000 000f 	and.w	r0, r0, #15
 8001496:	4a02      	ldr	r2, [pc, #8]	; (80014a0 <HAL_NVIC_SetPriority+0x60>)
 8001498:	5413      	strb	r3, [r2, r0]
 800149a:	e7f9      	b.n	8001490 <HAL_NVIC_SetPriority+0x50>
 800149c:	e000ed00 	.word	0xe000ed00
 80014a0:	e000ed14 	.word	0xe000ed14

080014a4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80014a4:	2800      	cmp	r0, #0
 80014a6:	db08      	blt.n	80014ba <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014a8:	0942      	lsrs	r2, r0, #5
 80014aa:	2301      	movs	r3, #1
 80014ac:	f000 001f 	and.w	r0, r0, #31
 80014b0:	fa03 f000 	lsl.w	r0, r3, r0
 80014b4:	4b01      	ldr	r3, [pc, #4]	; (80014bc <HAL_NVIC_EnableIRQ+0x18>)
 80014b6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80014ba:	4770      	bx	lr
 80014bc:	e000e100 	.word	0xe000e100

080014c0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014c0:	3801      	subs	r0, #1
 80014c2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80014c6:	d20b      	bcs.n	80014e0 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014c8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014cc:	4a05      	ldr	r2, [pc, #20]	; (80014e4 <HAL_SYSTICK_Config+0x24>)
 80014ce:	21f0      	movs	r1, #240	; 0xf0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014d0:	6158      	str	r0, [r3, #20]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014d2:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014d4:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014d8:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014da:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014dc:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014de:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80014e0:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80014e2:	4770      	bx	lr
 80014e4:	e000ed00 	.word	0xe000ed00

080014e8 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80014e8:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80014ea:	4604      	mov	r4, r0
 80014ec:	b908      	cbnz	r0, 80014f2 <HAL_CRC_Init+0xa>
  {
    return HAL_ERROR;
 80014ee:	2001      	movs	r0, #1
  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 80014f0:	bd10      	pop	{r4, pc}
  if (hcrc->State == HAL_CRC_STATE_RESET)
 80014f2:	7f43      	ldrb	r3, [r0, #29]
 80014f4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80014f8:	b913      	cbnz	r3, 8001500 <HAL_CRC_Init+0x18>
    hcrc->Lock = HAL_UNLOCKED;
 80014fa:	7702      	strb	r2, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 80014fc:	f7ff fe62 	bl	80011c4 <HAL_CRC_MspInit>
  hcrc->State = HAL_CRC_STATE_BUSY;
 8001500:	2302      	movs	r3, #2
 8001502:	7763      	strb	r3, [r4, #29]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8001504:	7923      	ldrb	r3, [r4, #4]
 8001506:	b9e3      	cbnz	r3, 8001542 <HAL_CRC_Init+0x5a>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8001508:	6823      	ldr	r3, [r4, #0]
 800150a:	4a13      	ldr	r2, [pc, #76]	; (8001558 <HAL_CRC_Init+0x70>)
 800150c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800150e:	689a      	ldr	r2, [r3, #8]
 8001510:	f022 0218 	bic.w	r2, r2, #24
 8001514:	609a      	str	r2, [r3, #8]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8001516:	7962      	ldrb	r2, [r4, #5]
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8001518:	6823      	ldr	r3, [r4, #0]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800151a:	b9d2      	cbnz	r2, 8001552 <HAL_CRC_Init+0x6a>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800151c:	f04f 32ff 	mov.w	r2, #4294967295
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8001520:	611a      	str	r2, [r3, #16]
  return HAL_OK;
 8001522:	2000      	movs	r0, #0
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001524:	689a      	ldr	r2, [r3, #8]
 8001526:	6961      	ldr	r1, [r4, #20]
 8001528:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800152c:	430a      	orrs	r2, r1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800152e:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001530:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8001532:	689a      	ldr	r2, [r3, #8]
 8001534:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001538:	430a      	orrs	r2, r1
 800153a:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 800153c:	2301      	movs	r3, #1
 800153e:	7763      	strb	r3, [r4, #29]
  return HAL_OK;
 8001540:	e7d6      	b.n	80014f0 <HAL_CRC_Init+0x8>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8001542:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8001546:	4620      	mov	r0, r4
 8001548:	f000 f808 	bl	800155c <HAL_CRCEx_Polynomial_Set>
 800154c:	2800      	cmp	r0, #0
 800154e:	d0e2      	beq.n	8001516 <HAL_CRC_Init+0x2e>
 8001550:	e7cd      	b.n	80014ee <HAL_CRC_Init+0x6>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8001552:	6922      	ldr	r2, [r4, #16]
 8001554:	e7e4      	b.n	8001520 <HAL_CRC_Init+0x38>
 8001556:	bf00      	nop
 8001558:	04c11db7 	.word	0x04c11db7

0800155c <HAL_CRCEx_Polynomial_Set>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800155c:	231f      	movs	r3, #31
{
 800155e:	b510      	push	{r4, lr}
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8001560:	3b01      	subs	r3, #1
 8001562:	d31c      	bcc.n	800159e <HAL_CRCEx_Polynomial_Set+0x42>
 8001564:	fa21 f403 	lsr.w	r4, r1, r3
 8001568:	07e4      	lsls	r4, r4, #31
 800156a:	d5f9      	bpl.n	8001560 <HAL_CRCEx_Polynomial_Set+0x4>
  {
  }

  switch (PolyLength)
 800156c:	2a10      	cmp	r2, #16
 800156e:	d012      	beq.n	8001596 <HAL_CRCEx_Polynomial_Set+0x3a>
 8001570:	d804      	bhi.n	800157c <HAL_CRCEx_Polynomial_Set+0x20>
 8001572:	b13a      	cbz	r2, 8001584 <HAL_CRCEx_Polynomial_Set+0x28>
 8001574:	2a08      	cmp	r2, #8
 8001576:	d010      	beq.n	800159a <HAL_CRCEx_Polynomial_Set+0x3e>
      }
      break;
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
      {
        status =   HAL_ERROR;
 8001578:	2001      	movs	r0, #1

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
 800157a:	e00b      	b.n	8001594 <HAL_CRCEx_Polynomial_Set+0x38>
  switch (PolyLength)
 800157c:	2a18      	cmp	r2, #24
 800157e:	d1fb      	bne.n	8001578 <HAL_CRCEx_Polynomial_Set+0x1c>
      if (msb >= HAL_CRC_LENGTH_7B)
 8001580:	2b06      	cmp	r3, #6
      if (msb >= HAL_CRC_LENGTH_16B)
 8001582:	d8f9      	bhi.n	8001578 <HAL_CRCEx_Polynomial_Set+0x1c>
    WRITE_REG(hcrc->Instance->POL, Pol);
 8001584:	6800      	ldr	r0, [r0, #0]
 8001586:	6141      	str	r1, [r0, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8001588:	6883      	ldr	r3, [r0, #8]
 800158a:	f023 0318 	bic.w	r3, r3, #24
 800158e:	431a      	orrs	r2, r3
 8001590:	6082      	str	r2, [r0, #8]
 8001592:	2000      	movs	r0, #0
}
 8001594:	bd10      	pop	{r4, pc}
      if (msb >= HAL_CRC_LENGTH_8B)
 8001596:	2b07      	cmp	r3, #7
 8001598:	e7f3      	b.n	8001582 <HAL_CRCEx_Polynomial_Set+0x26>
      if (msb >= HAL_CRC_LENGTH_16B)
 800159a:	2b0f      	cmp	r3, #15
 800159c:	e7f1      	b.n	8001582 <HAL_CRCEx_Polynomial_Set+0x26>
  switch (PolyLength)
 800159e:	2a00      	cmp	r2, #0
 80015a0:	d1ea      	bne.n	8001578 <HAL_CRCEx_Polynomial_Set+0x1c>
 80015a2:	e7ef      	b.n	8001584 <HAL_CRCEx_Polynomial_Set+0x28>

080015a4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80015a4:	b570      	push	{r4, r5, r6, lr}
 80015a6:	4604      	mov	r4, r0
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80015a8:	6d86      	ldr	r6, [r0, #88]	; 0x58
  
  uint32_t tickstart = HAL_GetTick();
 80015aa:	f7ff ff1f 	bl	80013ec <HAL_GetTick>
 80015ae:	4605      	mov	r5, r0
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015b0:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 80015b4:	2b02      	cmp	r3, #2
 80015b6:	d006      	beq.n	80015c6 <HAL_DMA_Abort+0x22>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015b8:	2380      	movs	r3, #128	; 0x80
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
    
    return HAL_ERROR;
 80015ba:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015bc:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 80015be:	2300      	movs	r3, #0
 80015c0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
    
  }
  return HAL_OK;
}
 80015c4:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80015c6:	6823      	ldr	r3, [r4, #0]
 80015c8:	681a      	ldr	r2, [r3, #0]
 80015ca:	f022 0216 	bic.w	r2, r2, #22
 80015ce:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80015d0:	695a      	ldr	r2, [r3, #20]
 80015d2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80015d6:	615a      	str	r2, [r3, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80015d8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80015da:	b90a      	cbnz	r2, 80015e0 <HAL_DMA_Abort+0x3c>
 80015dc:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80015de:	b11a      	cbz	r2, 80015e8 <HAL_DMA_Abort+0x44>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80015e0:	681a      	ldr	r2, [r3, #0]
 80015e2:	f022 0208 	bic.w	r2, r2, #8
 80015e6:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 80015e8:	681a      	ldr	r2, [r3, #0]
 80015ea:	f022 0201 	bic.w	r2, r2, #1
 80015ee:	601a      	str	r2, [r3, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80015f0:	6823      	ldr	r3, [r4, #0]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f013 0301 	ands.w	r3, r3, #1
 80015f8:	d10a      	bne.n	8001610 <HAL_DMA_Abort+0x6c>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80015fa:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80015fc:	223f      	movs	r2, #63	; 0x3f
  return HAL_OK;
 80015fe:	4618      	mov	r0, r3
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001600:	408a      	lsls	r2, r1
 8001602:	60b2      	str	r2, [r6, #8]
    hdma->State = HAL_DMA_STATE_READY;
 8001604:	2201      	movs	r2, #1
    __HAL_UNLOCK(hdma);
 8001606:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_READY;
 800160a:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
  return HAL_OK;
 800160e:	e7d9      	b.n	80015c4 <HAL_DMA_Abort+0x20>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001610:	f7ff feec 	bl	80013ec <HAL_GetTick>
 8001614:	1b40      	subs	r0, r0, r5
 8001616:	2805      	cmp	r0, #5
 8001618:	d9ea      	bls.n	80015f0 <HAL_DMA_Abort+0x4c>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800161a:	2320      	movs	r3, #32
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800161c:	2003      	movs	r0, #3
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800161e:	6563      	str	r3, [r4, #84]	; 0x54
        __HAL_UNLOCK(hdma);
 8001620:	2300      	movs	r3, #0
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001622:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 8001626:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        return HAL_TIMEOUT;
 800162a:	e7cb      	b.n	80015c4 <HAL_DMA_Abort+0x20>

0800162c <HAL_DMA_Abort_IT>:
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800162c:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8001630:	2b02      	cmp	r3, #2
 8001632:	d003      	beq.n	800163c <HAL_DMA_Abort_IT+0x10>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001634:	2380      	movs	r3, #128	; 0x80
 8001636:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8001638:	2001      	movs	r0, #1
 800163a:	4770      	bx	lr
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800163c:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 800163e:	2305      	movs	r3, #5
 8001640:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
  }

  return HAL_OK;
 8001644:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE(hdma);
 8001646:	6813      	ldr	r3, [r2, #0]
 8001648:	f023 0301 	bic.w	r3, r3, #1
 800164c:	6013      	str	r3, [r2, #0]
}
 800164e:	4770      	bx	lr

08001650 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001650:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001654:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001656:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 8001814 <HAL_GPIO_Init+0x1c4>
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800165a:	4a6c      	ldr	r2, [pc, #432]	; (800180c <HAL_GPIO_Init+0x1bc>)
    ioposition = ((uint32_t)0x01) << position;
 800165c:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800165e:	680d      	ldr	r5, [r1, #0]
    ioposition = ((uint32_t)0x01) << position;
 8001660:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001662:	ea04 0c05 	and.w	ip, r4, r5
    if(iocurrent == ioposition)
 8001666:	43ac      	bics	r4, r5
 8001668:	f040 80b6 	bne.w	80017d8 <HAL_GPIO_Init+0x188>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800166c:	684d      	ldr	r5, [r1, #4]
 800166e:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001672:	2603      	movs	r6, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001674:	f005 0403 	and.w	r4, r5, #3
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001678:	fa06 f608 	lsl.w	r6, r6, r8
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800167c:	1e67      	subs	r7, r4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800167e:	43f6      	mvns	r6, r6
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001680:	2f01      	cmp	r7, #1
 8001682:	d834      	bhi.n	80016ee <HAL_GPIO_Init+0x9e>
        temp = GPIOx->OSPEEDR; 
 8001684:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001686:	ea07 0e06 	and.w	lr, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2));
 800168a:	68cf      	ldr	r7, [r1, #12]
 800168c:	fa07 f708 	lsl.w	r7, r7, r8
 8001690:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 8001694:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8001696:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001698:	ea27 0e0c 	bic.w	lr, r7, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800169c:	f3c5 1700 	ubfx	r7, r5, #4, #1
 80016a0:	409f      	lsls	r7, r3
 80016a2:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 80016a6:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 80016a8:	68c7      	ldr	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016aa:	2c02      	cmp	r4, #2
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80016ac:	ea07 0e06 	and.w	lr, r7, r6
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80016b0:	688f      	ldr	r7, [r1, #8]
 80016b2:	fa07 f708 	lsl.w	r7, r7, r8
 80016b6:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->PUPDR = temp;
 80016ba:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016bc:	d119      	bne.n	80016f2 <HAL_GPIO_Init+0xa2>
        temp = GPIOx->AFR[position >> 3];
 80016be:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80016c2:	f003 0b07 	and.w	fp, r3, #7
 80016c6:	f04f 0e0f 	mov.w	lr, #15
 80016ca:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 80016ce:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3];
 80016d2:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80016d6:	fa0e fe0b 	lsl.w	lr, lr, fp
 80016da:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80016de:	690f      	ldr	r7, [r1, #16]
 80016e0:	fa07 f70b 	lsl.w	r7, r7, fp
 80016e4:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3] = temp;
 80016e8:	f8ca 7020 	str.w	r7, [sl, #32]
 80016ec:	e001      	b.n	80016f2 <HAL_GPIO_Init+0xa2>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016ee:	2c03      	cmp	r4, #3
 80016f0:	d1da      	bne.n	80016a8 <HAL_GPIO_Init+0x58>
      temp = GPIOx->MODER;
 80016f2:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80016f4:	fa04 f408 	lsl.w	r4, r4, r8
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80016f8:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80016fc:	ea06 0607 	and.w	r6, r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001700:	ea46 0604 	orr.w	r6, r6, r4
      GPIOx->MODER = temp;
 8001704:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001706:	d067      	beq.n	80017d8 <HAL_GPIO_Init+0x188>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001708:	f8d9 4044 	ldr.w	r4, [r9, #68]	; 0x44
 800170c:	f023 0603 	bic.w	r6, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001710:	f003 0703 	and.w	r7, r3, #3
 8001714:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001718:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 800171c:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001720:	00bf      	lsls	r7, r7, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001722:	f8c9 4044 	str.w	r4, [r9, #68]	; 0x44
 8001726:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
 800172a:	f8d9 4044 	ldr.w	r4, [r9, #68]	; 0x44
 800172e:	f404 4480 	and.w	r4, r4, #16384	; 0x4000
 8001732:	9401      	str	r4, [sp, #4]
 8001734:	9c01      	ldr	r4, [sp, #4]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001736:	fa0e f407 	lsl.w	r4, lr, r7
        temp = SYSCFG->EXTICR[position >> 2];
 800173a:	f8d6 8008 	ldr.w	r8, [r6, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800173e:	ea28 0e04 	bic.w	lr, r8, r4
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001742:	4c33      	ldr	r4, [pc, #204]	; (8001810 <HAL_GPIO_Init+0x1c0>)
 8001744:	42a0      	cmp	r0, r4
 8001746:	d04e      	beq.n	80017e6 <HAL_GPIO_Init+0x196>
 8001748:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800174c:	42a0      	cmp	r0, r4
 800174e:	d04c      	beq.n	80017ea <HAL_GPIO_Init+0x19a>
 8001750:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001754:	42a0      	cmp	r0, r4
 8001756:	d04a      	beq.n	80017ee <HAL_GPIO_Init+0x19e>
 8001758:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800175c:	42a0      	cmp	r0, r4
 800175e:	d048      	beq.n	80017f2 <HAL_GPIO_Init+0x1a2>
 8001760:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001764:	42a0      	cmp	r0, r4
 8001766:	d046      	beq.n	80017f6 <HAL_GPIO_Init+0x1a6>
 8001768:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800176c:	42a0      	cmp	r0, r4
 800176e:	d044      	beq.n	80017fa <HAL_GPIO_Init+0x1aa>
 8001770:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001774:	42a0      	cmp	r0, r4
 8001776:	d042      	beq.n	80017fe <HAL_GPIO_Init+0x1ae>
 8001778:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800177c:	42a0      	cmp	r0, r4
 800177e:	d040      	beq.n	8001802 <HAL_GPIO_Init+0x1b2>
 8001780:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001784:	42a0      	cmp	r0, r4
 8001786:	d03e      	beq.n	8001806 <HAL_GPIO_Init+0x1b6>
 8001788:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800178c:	42a0      	cmp	r0, r4
 800178e:	bf0c      	ite	eq
 8001790:	2409      	moveq	r4, #9
 8001792:	240a      	movne	r4, #10
 8001794:	40bc      	lsls	r4, r7
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001796:	02ef      	lsls	r7, r5, #11
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001798:	ea44 040e 	orr.w	r4, r4, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 800179c:	60b4      	str	r4, [r6, #8]
        temp &= ~((uint32_t)iocurrent);
 800179e:	ea6f 060c 	mvn.w	r6, ip
        temp = EXTI->RTSR;
 80017a2:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 80017a4:	bf54      	ite	pl
 80017a6:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 80017a8:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80017ac:	02af      	lsls	r7, r5, #10
        EXTI->RTSR = temp;
 80017ae:	6094      	str	r4, [r2, #8]
        temp = EXTI->FTSR;
 80017b0:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 80017b2:	bf54      	ite	pl
 80017b4:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 80017b6:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->FTSR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80017ba:	03af      	lsls	r7, r5, #14
        EXTI->FTSR = temp;
 80017bc:	60d4      	str	r4, [r2, #12]
        temp = EXTI->EMR;
 80017be:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 80017c0:	bf54      	ite	pl
 80017c2:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 80017c4:	ea4c 0404 	orrmi.w	r4, ip, r4
        EXTI->EMR = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80017c8:	03ed      	lsls	r5, r5, #15
        EXTI->EMR = temp;
 80017ca:	6054      	str	r4, [r2, #4]
        temp = EXTI->IMR;
 80017cc:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80017ce:	bf54      	ite	pl
 80017d0:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 80017d2:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->IMR = temp;
 80017d6:	6014      	str	r4, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80017d8:	3301      	adds	r3, #1
 80017da:	2b10      	cmp	r3, #16
 80017dc:	f47f af3e 	bne.w	800165c <HAL_GPIO_Init+0xc>
      }
    }
  }
}
 80017e0:	b003      	add	sp, #12
 80017e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80017e6:	2400      	movs	r4, #0
 80017e8:	e7d4      	b.n	8001794 <HAL_GPIO_Init+0x144>
 80017ea:	2401      	movs	r4, #1
 80017ec:	e7d2      	b.n	8001794 <HAL_GPIO_Init+0x144>
 80017ee:	2402      	movs	r4, #2
 80017f0:	e7d0      	b.n	8001794 <HAL_GPIO_Init+0x144>
 80017f2:	2403      	movs	r4, #3
 80017f4:	e7ce      	b.n	8001794 <HAL_GPIO_Init+0x144>
 80017f6:	2404      	movs	r4, #4
 80017f8:	e7cc      	b.n	8001794 <HAL_GPIO_Init+0x144>
 80017fa:	2405      	movs	r4, #5
 80017fc:	e7ca      	b.n	8001794 <HAL_GPIO_Init+0x144>
 80017fe:	2406      	movs	r4, #6
 8001800:	e7c8      	b.n	8001794 <HAL_GPIO_Init+0x144>
 8001802:	2407      	movs	r4, #7
 8001804:	e7c6      	b.n	8001794 <HAL_GPIO_Init+0x144>
 8001806:	2408      	movs	r4, #8
 8001808:	e7c4      	b.n	8001794 <HAL_GPIO_Init+0x144>
 800180a:	bf00      	nop
 800180c:	40013c00 	.word	0x40013c00
 8001810:	40020000 	.word	0x40020000
 8001814:	40023800 	.word	0x40023800

08001818 <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8001818:	4b19      	ldr	r3, [pc, #100]	; (8001880 <HAL_PWREx_EnableOverDrive+0x68>)
{
 800181a:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 800181c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800181e:	4c19      	ldr	r4, [pc, #100]	; (8001884 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8001820:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001824:	641a      	str	r2, [r3, #64]	; 0x40
 8001826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001828:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800182c:	9301      	str	r3, [sp, #4]
 800182e:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001830:	6823      	ldr	r3, [r4, #0]
 8001832:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001836:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001838:	f7ff fdd8 	bl	80013ec <HAL_GetTick>
 800183c:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800183e:	6863      	ldr	r3, [r4, #4]
 8001840:	03da      	lsls	r2, r3, #15
 8001842:	d50c      	bpl.n	800185e <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001844:	6823      	ldr	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001846:	4d0f      	ldr	r5, [pc, #60]	; (8001884 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001848:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800184c:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800184e:	f7ff fdcd 	bl	80013ec <HAL_GetTick>
 8001852:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001854:	686b      	ldr	r3, [r5, #4]
 8001856:	039b      	lsls	r3, r3, #14
 8001858:	d50a      	bpl.n	8001870 <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 800185a:	2000      	movs	r0, #0
 800185c:	e006      	b.n	800186c <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800185e:	f7ff fdc5 	bl	80013ec <HAL_GetTick>
 8001862:	1b40      	subs	r0, r0, r5
 8001864:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001868:	d9e9      	bls.n	800183e <HAL_PWREx_EnableOverDrive+0x26>
      return HAL_TIMEOUT;
 800186a:	2003      	movs	r0, #3
}
 800186c:	b003      	add	sp, #12
 800186e:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001870:	f7ff fdbc 	bl	80013ec <HAL_GetTick>
 8001874:	1b00      	subs	r0, r0, r4
 8001876:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800187a:	d9eb      	bls.n	8001854 <HAL_PWREx_EnableOverDrive+0x3c>
 800187c:	e7f5      	b.n	800186a <HAL_PWREx_EnableOverDrive+0x52>
 800187e:	bf00      	nop
 8001880:	40023800 	.word	0x40023800
 8001884:	40007000 	.word	0x40007000

08001888 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001888:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800188c:	4604      	mov	r4, r0
 800188e:	b340      	cbz	r0, 80018e2 <HAL_RCC_OscConfig+0x5a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001890:	6803      	ldr	r3, [r0, #0]
 8001892:	07db      	lsls	r3, r3, #31
 8001894:	d410      	bmi.n	80018b8 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001896:	6823      	ldr	r3, [r4, #0]
 8001898:	079f      	lsls	r7, r3, #30
 800189a:	d464      	bmi.n	8001966 <HAL_RCC_OscConfig+0xde>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800189c:	6823      	ldr	r3, [r4, #0]
 800189e:	0719      	lsls	r1, r3, #28
 80018a0:	f100 80aa 	bmi.w	80019f8 <HAL_RCC_OscConfig+0x170>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018a4:	6823      	ldr	r3, [r4, #0]
 80018a6:	075a      	lsls	r2, r3, #29
 80018a8:	f100 80cb 	bmi.w	8001a42 <HAL_RCC_OscConfig+0x1ba>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018ac:	69a2      	ldr	r2, [r4, #24]
 80018ae:	2a00      	cmp	r2, #0
 80018b0:	f040 8134 	bne.w	8001b1c <HAL_RCC_OscConfig+0x294>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 80018b4:	2000      	movs	r0, #0
 80018b6:	e02b      	b.n	8001910 <HAL_RCC_OscConfig+0x88>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80018b8:	4b96      	ldr	r3, [pc, #600]	; (8001b14 <HAL_RCC_OscConfig+0x28c>)
 80018ba:	689a      	ldr	r2, [r3, #8]
 80018bc:	f002 020c 	and.w	r2, r2, #12
 80018c0:	2a04      	cmp	r2, #4
 80018c2:	d007      	beq.n	80018d4 <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018c4:	689a      	ldr	r2, [r3, #8]
 80018c6:	f002 020c 	and.w	r2, r2, #12
 80018ca:	2a08      	cmp	r2, #8
 80018cc:	d10b      	bne.n	80018e6 <HAL_RCC_OscConfig+0x5e>
 80018ce:	685a      	ldr	r2, [r3, #4]
 80018d0:	0256      	lsls	r6, r2, #9
 80018d2:	d508      	bpl.n	80018e6 <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018d4:	4b8f      	ldr	r3, [pc, #572]	; (8001b14 <HAL_RCC_OscConfig+0x28c>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	039d      	lsls	r5, r3, #14
 80018da:	d5dc      	bpl.n	8001896 <HAL_RCC_OscConfig+0xe>
 80018dc:	6863      	ldr	r3, [r4, #4]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d1d9      	bne.n	8001896 <HAL_RCC_OscConfig+0xe>
        return HAL_ERROR;
 80018e2:	2001      	movs	r0, #1
 80018e4:	e014      	b.n	8001910 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018e6:	6862      	ldr	r2, [r4, #4]
 80018e8:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80018ec:	d113      	bne.n	8001916 <HAL_RCC_OscConfig+0x8e>
 80018ee:	681a      	ldr	r2, [r3, #0]
 80018f0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80018f4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80018f6:	f7ff fd79 	bl	80013ec <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018fa:	4e86      	ldr	r6, [pc, #536]	; (8001b14 <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 80018fc:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018fe:	6833      	ldr	r3, [r6, #0]
 8001900:	0398      	lsls	r0, r3, #14
 8001902:	d4c8      	bmi.n	8001896 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001904:	f7ff fd72 	bl	80013ec <HAL_GetTick>
 8001908:	1b40      	subs	r0, r0, r5
 800190a:	2864      	cmp	r0, #100	; 0x64
 800190c:	d9f7      	bls.n	80018fe <HAL_RCC_OscConfig+0x76>
            return HAL_TIMEOUT;
 800190e:	2003      	movs	r0, #3
}
 8001910:	b002      	add	sp, #8
 8001912:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001916:	4d7f      	ldr	r5, [pc, #508]	; (8001b14 <HAL_RCC_OscConfig+0x28c>)
 8001918:	682b      	ldr	r3, [r5, #0]
 800191a:	b992      	cbnz	r2, 8001942 <HAL_RCC_OscConfig+0xba>
 800191c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001920:	602b      	str	r3, [r5, #0]
 8001922:	682b      	ldr	r3, [r5, #0]
 8001924:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001928:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800192a:	f7ff fd5f 	bl	80013ec <HAL_GetTick>
 800192e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001930:	682b      	ldr	r3, [r5, #0]
 8001932:	0399      	lsls	r1, r3, #14
 8001934:	d5af      	bpl.n	8001896 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001936:	f7ff fd59 	bl	80013ec <HAL_GetTick>
 800193a:	1b80      	subs	r0, r0, r6
 800193c:	2864      	cmp	r0, #100	; 0x64
 800193e:	d9f7      	bls.n	8001930 <HAL_RCC_OscConfig+0xa8>
 8001940:	e7e5      	b.n	800190e <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001942:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8001946:	d107      	bne.n	8001958 <HAL_RCC_OscConfig+0xd0>
 8001948:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800194c:	602b      	str	r3, [r5, #0]
 800194e:	682b      	ldr	r3, [r5, #0]
 8001950:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001954:	602b      	str	r3, [r5, #0]
 8001956:	e7ce      	b.n	80018f6 <HAL_RCC_OscConfig+0x6e>
 8001958:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800195c:	602b      	str	r3, [r5, #0]
 800195e:	682b      	ldr	r3, [r5, #0]
 8001960:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001964:	e7f6      	b.n	8001954 <HAL_RCC_OscConfig+0xcc>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001966:	4b6b      	ldr	r3, [pc, #428]	; (8001b14 <HAL_RCC_OscConfig+0x28c>)
 8001968:	689a      	ldr	r2, [r3, #8]
 800196a:	f012 0f0c 	tst.w	r2, #12
 800196e:	d007      	beq.n	8001980 <HAL_RCC_OscConfig+0xf8>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001970:	689a      	ldr	r2, [r3, #8]
 8001972:	f002 020c 	and.w	r2, r2, #12
 8001976:	2a08      	cmp	r2, #8
 8001978:	d111      	bne.n	800199e <HAL_RCC_OscConfig+0x116>
 800197a:	685a      	ldr	r2, [r3, #4]
 800197c:	0252      	lsls	r2, r2, #9
 800197e:	d40e      	bmi.n	800199e <HAL_RCC_OscConfig+0x116>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001980:	4a64      	ldr	r2, [pc, #400]	; (8001b14 <HAL_RCC_OscConfig+0x28c>)
 8001982:	6813      	ldr	r3, [r2, #0]
 8001984:	079b      	lsls	r3, r3, #30
 8001986:	d502      	bpl.n	800198e <HAL_RCC_OscConfig+0x106>
 8001988:	68e3      	ldr	r3, [r4, #12]
 800198a:	2b01      	cmp	r3, #1
 800198c:	d1a9      	bne.n	80018e2 <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800198e:	6813      	ldr	r3, [r2, #0]
 8001990:	6921      	ldr	r1, [r4, #16]
 8001992:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001996:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800199a:	6013      	str	r3, [r2, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800199c:	e77e      	b.n	800189c <HAL_RCC_OscConfig+0x14>
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800199e:	68e2      	ldr	r2, [r4, #12]
 80019a0:	b1c2      	cbz	r2, 80019d4 <HAL_RCC_OscConfig+0x14c>
        __HAL_RCC_HSI_ENABLE();
 80019a2:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019a4:	4d5b      	ldr	r5, [pc, #364]	; (8001b14 <HAL_RCC_OscConfig+0x28c>)
        __HAL_RCC_HSI_ENABLE();
 80019a6:	f042 0201 	orr.w	r2, r2, #1
 80019aa:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80019ac:	f7ff fd1e 	bl	80013ec <HAL_GetTick>
 80019b0:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019b2:	682b      	ldr	r3, [r5, #0]
 80019b4:	079f      	lsls	r7, r3, #30
 80019b6:	d507      	bpl.n	80019c8 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019b8:	682b      	ldr	r3, [r5, #0]
 80019ba:	6922      	ldr	r2, [r4, #16]
 80019bc:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80019c0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80019c4:	602b      	str	r3, [r5, #0]
 80019c6:	e769      	b.n	800189c <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019c8:	f7ff fd10 	bl	80013ec <HAL_GetTick>
 80019cc:	1b80      	subs	r0, r0, r6
 80019ce:	2802      	cmp	r0, #2
 80019d0:	d9ef      	bls.n	80019b2 <HAL_RCC_OscConfig+0x12a>
 80019d2:	e79c      	b.n	800190e <HAL_RCC_OscConfig+0x86>
        __HAL_RCC_HSI_DISABLE();
 80019d4:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019d6:	4e4f      	ldr	r6, [pc, #316]	; (8001b14 <HAL_RCC_OscConfig+0x28c>)
        __HAL_RCC_HSI_DISABLE();
 80019d8:	f022 0201 	bic.w	r2, r2, #1
 80019dc:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80019de:	f7ff fd05 	bl	80013ec <HAL_GetTick>
 80019e2:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019e4:	6833      	ldr	r3, [r6, #0]
 80019e6:	0798      	lsls	r0, r3, #30
 80019e8:	f57f af58 	bpl.w	800189c <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019ec:	f7ff fcfe 	bl	80013ec <HAL_GetTick>
 80019f0:	1b40      	subs	r0, r0, r5
 80019f2:	2802      	cmp	r0, #2
 80019f4:	d9f6      	bls.n	80019e4 <HAL_RCC_OscConfig+0x15c>
 80019f6:	e78a      	b.n	800190e <HAL_RCC_OscConfig+0x86>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80019f8:	6963      	ldr	r3, [r4, #20]
 80019fa:	4d46      	ldr	r5, [pc, #280]	; (8001b14 <HAL_RCC_OscConfig+0x28c>)
 80019fc:	b183      	cbz	r3, 8001a20 <HAL_RCC_OscConfig+0x198>
      __HAL_RCC_LSI_ENABLE();
 80019fe:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001a00:	f043 0301 	orr.w	r3, r3, #1
 8001a04:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8001a06:	f7ff fcf1 	bl	80013ec <HAL_GetTick>
 8001a0a:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a0c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001a0e:	079b      	lsls	r3, r3, #30
 8001a10:	f53f af48 	bmi.w	80018a4 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a14:	f7ff fcea 	bl	80013ec <HAL_GetTick>
 8001a18:	1b80      	subs	r0, r0, r6
 8001a1a:	2802      	cmp	r0, #2
 8001a1c:	d9f6      	bls.n	8001a0c <HAL_RCC_OscConfig+0x184>
 8001a1e:	e776      	b.n	800190e <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_LSI_DISABLE();
 8001a20:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001a22:	f023 0301 	bic.w	r3, r3, #1
 8001a26:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8001a28:	f7ff fce0 	bl	80013ec <HAL_GetTick>
 8001a2c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a2e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001a30:	079f      	lsls	r7, r3, #30
 8001a32:	f57f af37 	bpl.w	80018a4 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a36:	f7ff fcd9 	bl	80013ec <HAL_GetTick>
 8001a3a:	1b80      	subs	r0, r0, r6
 8001a3c:	2802      	cmp	r0, #2
 8001a3e:	d9f6      	bls.n	8001a2e <HAL_RCC_OscConfig+0x1a6>
 8001a40:	e765      	b.n	800190e <HAL_RCC_OscConfig+0x86>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a42:	4b34      	ldr	r3, [pc, #208]	; (8001b14 <HAL_RCC_OscConfig+0x28c>)
 8001a44:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a46:	00d0      	lsls	r0, r2, #3
 8001a48:	d427      	bmi.n	8001a9a <HAL_RCC_OscConfig+0x212>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a4a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 8001a4c:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a4e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001a52:	641a      	str	r2, [r3, #64]	; 0x40
 8001a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a5a:	9301      	str	r3, [sp, #4]
 8001a5c:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a5e:	4d2e      	ldr	r5, [pc, #184]	; (8001b18 <HAL_RCC_OscConfig+0x290>)
 8001a60:	682b      	ldr	r3, [r5, #0]
 8001a62:	05d9      	lsls	r1, r3, #23
 8001a64:	d51b      	bpl.n	8001a9e <HAL_RCC_OscConfig+0x216>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a66:	68a3      	ldr	r3, [r4, #8]
 8001a68:	4d2a      	ldr	r5, [pc, #168]	; (8001b14 <HAL_RCC_OscConfig+0x28c>)
 8001a6a:	2b01      	cmp	r3, #1
 8001a6c:	d127      	bne.n	8001abe <HAL_RCC_OscConfig+0x236>
 8001a6e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001a70:	f043 0301 	orr.w	r3, r3, #1
 8001a74:	672b      	str	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a76:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001a7a:	f7ff fcb7 	bl	80013ec <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a7e:	4e25      	ldr	r6, [pc, #148]	; (8001b14 <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 8001a80:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a82:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8001a84:	079b      	lsls	r3, r3, #30
 8001a86:	d53f      	bpl.n	8001b08 <HAL_RCC_OscConfig+0x280>
    if (pwrclkchanged == SET)
 8001a88:	2f00      	cmp	r7, #0
 8001a8a:	f43f af0f 	beq.w	80018ac <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a8e:	4a21      	ldr	r2, [pc, #132]	; (8001b14 <HAL_RCC_OscConfig+0x28c>)
 8001a90:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001a92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a96:	6413      	str	r3, [r2, #64]	; 0x40
 8001a98:	e708      	b.n	80018ac <HAL_RCC_OscConfig+0x24>
  FlagStatus pwrclkchanged = RESET;
 8001a9a:	2700      	movs	r7, #0
 8001a9c:	e7df      	b.n	8001a5e <HAL_RCC_OscConfig+0x1d6>
      PWR->CR1 |= PWR_CR1_DBP;
 8001a9e:	682b      	ldr	r3, [r5, #0]
 8001aa0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001aa4:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8001aa6:	f7ff fca1 	bl	80013ec <HAL_GetTick>
 8001aaa:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001aac:	682b      	ldr	r3, [r5, #0]
 8001aae:	05da      	lsls	r2, r3, #23
 8001ab0:	d4d9      	bmi.n	8001a66 <HAL_RCC_OscConfig+0x1de>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ab2:	f7ff fc9b 	bl	80013ec <HAL_GetTick>
 8001ab6:	1b80      	subs	r0, r0, r6
 8001ab8:	2864      	cmp	r0, #100	; 0x64
 8001aba:	d9f7      	bls.n	8001aac <HAL_RCC_OscConfig+0x224>
 8001abc:	e727      	b.n	800190e <HAL_RCC_OscConfig+0x86>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001abe:	b9ab      	cbnz	r3, 8001aec <HAL_RCC_OscConfig+0x264>
 8001ac0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ac2:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ac6:	f023 0301 	bic.w	r3, r3, #1
 8001aca:	672b      	str	r3, [r5, #112]	; 0x70
 8001acc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001ace:	f023 0304 	bic.w	r3, r3, #4
 8001ad2:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8001ad4:	f7ff fc8a 	bl	80013ec <HAL_GetTick>
 8001ad8:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ada:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001adc:	0798      	lsls	r0, r3, #30
 8001ade:	d5d3      	bpl.n	8001a88 <HAL_RCC_OscConfig+0x200>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ae0:	f7ff fc84 	bl	80013ec <HAL_GetTick>
 8001ae4:	1b80      	subs	r0, r0, r6
 8001ae6:	4540      	cmp	r0, r8
 8001ae8:	d9f7      	bls.n	8001ada <HAL_RCC_OscConfig+0x252>
 8001aea:	e710      	b.n	800190e <HAL_RCC_OscConfig+0x86>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001aec:	2b05      	cmp	r3, #5
 8001aee:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001af0:	d103      	bne.n	8001afa <HAL_RCC_OscConfig+0x272>
 8001af2:	f043 0304 	orr.w	r3, r3, #4
 8001af6:	672b      	str	r3, [r5, #112]	; 0x70
 8001af8:	e7b9      	b.n	8001a6e <HAL_RCC_OscConfig+0x1e6>
 8001afa:	f023 0301 	bic.w	r3, r3, #1
 8001afe:	672b      	str	r3, [r5, #112]	; 0x70
 8001b00:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001b02:	f023 0304 	bic.w	r3, r3, #4
 8001b06:	e7b5      	b.n	8001a74 <HAL_RCC_OscConfig+0x1ec>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b08:	f7ff fc70 	bl	80013ec <HAL_GetTick>
 8001b0c:	1b40      	subs	r0, r0, r5
 8001b0e:	4540      	cmp	r0, r8
 8001b10:	d9b7      	bls.n	8001a82 <HAL_RCC_OscConfig+0x1fa>
 8001b12:	e6fc      	b.n	800190e <HAL_RCC_OscConfig+0x86>
 8001b14:	40023800 	.word	0x40023800
 8001b18:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b1c:	4d38      	ldr	r5, [pc, #224]	; (8001c00 <HAL_RCC_OscConfig+0x378>)
 8001b1e:	68ab      	ldr	r3, [r5, #8]
 8001b20:	f003 030c 	and.w	r3, r3, #12
 8001b24:	2b08      	cmp	r3, #8
 8001b26:	d041      	beq.n	8001bac <HAL_RCC_OscConfig+0x324>
        __HAL_RCC_PLL_DISABLE();
 8001b28:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b2a:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8001b2c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b30:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b32:	d12e      	bne.n	8001b92 <HAL_RCC_OscConfig+0x30a>
        tickstart = HAL_GetTick();
 8001b34:	f7ff fc5a 	bl	80013ec <HAL_GetTick>
 8001b38:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b3a:	682b      	ldr	r3, [r5, #0]
 8001b3c:	0199      	lsls	r1, r3, #6
 8001b3e:	d422      	bmi.n	8001b86 <HAL_RCC_OscConfig+0x2fe>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b40:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001b42:	085b      	lsrs	r3, r3, #1
 8001b44:	1e5a      	subs	r2, r3, #1
 8001b46:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
 8001b4a:	430b      	orrs	r3, r1
 8001b4c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001b50:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001b52:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001b56:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001b58:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001b5c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001b60:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001b62:	682b      	ldr	r3, [r5, #0]
 8001b64:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b68:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001b6a:	f7ff fc3f 	bl	80013ec <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b6e:	4d24      	ldr	r5, [pc, #144]	; (8001c00 <HAL_RCC_OscConfig+0x378>)
        tickstart = HAL_GetTick();
 8001b70:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b72:	682b      	ldr	r3, [r5, #0]
 8001b74:	019a      	lsls	r2, r3, #6
 8001b76:	f53f ae9d 	bmi.w	80018b4 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b7a:	f7ff fc37 	bl	80013ec <HAL_GetTick>
 8001b7e:	1b00      	subs	r0, r0, r4
 8001b80:	2802      	cmp	r0, #2
 8001b82:	d9f6      	bls.n	8001b72 <HAL_RCC_OscConfig+0x2ea>
 8001b84:	e6c3      	b.n	800190e <HAL_RCC_OscConfig+0x86>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b86:	f7ff fc31 	bl	80013ec <HAL_GetTick>
 8001b8a:	1b80      	subs	r0, r0, r6
 8001b8c:	2802      	cmp	r0, #2
 8001b8e:	d9d4      	bls.n	8001b3a <HAL_RCC_OscConfig+0x2b2>
 8001b90:	e6bd      	b.n	800190e <HAL_RCC_OscConfig+0x86>
        tickstart = HAL_GetTick();
 8001b92:	f7ff fc2b 	bl	80013ec <HAL_GetTick>
 8001b96:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b98:	682b      	ldr	r3, [r5, #0]
 8001b9a:	019b      	lsls	r3, r3, #6
 8001b9c:	f57f ae8a 	bpl.w	80018b4 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ba0:	f7ff fc24 	bl	80013ec <HAL_GetTick>
 8001ba4:	1b00      	subs	r0, r0, r4
 8001ba6:	2802      	cmp	r0, #2
 8001ba8:	d9f6      	bls.n	8001b98 <HAL_RCC_OscConfig+0x310>
 8001baa:	e6b0      	b.n	800190e <HAL_RCC_OscConfig+0x86>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001bac:	2a01      	cmp	r2, #1
      pll_config = RCC->PLLCFGR;
 8001bae:	686b      	ldr	r3, [r5, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001bb0:	f43f ae97 	beq.w	80018e2 <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bb4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001bb8:	69e1      	ldr	r1, [r4, #28]
 8001bba:	428a      	cmp	r2, r1
 8001bbc:	f47f ae91 	bne.w	80018e2 <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001bc0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bc4:	6a21      	ldr	r1, [r4, #32]
 8001bc6:	428a      	cmp	r2, r1
 8001bc8:	f47f ae8b 	bne.w	80018e2 <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001bcc:	f647 72c0 	movw	r2, #32704	; 0x7fc0
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001bd0:	6a61      	ldr	r1, [r4, #36]	; 0x24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001bd2:	401a      	ands	r2, r3
 8001bd4:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8001bd8:	f47f ae83 	bne.w	80018e2 <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001bdc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001bde:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8001be2:	0852      	lsrs	r2, r2, #1
 8001be4:	3a01      	subs	r2, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001be6:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8001bea:	f47f ae7a 	bne.w	80018e2 <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001bee:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8001bf2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001bf4:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8001bf8:	f43f ae5c 	beq.w	80018b4 <HAL_RCC_OscConfig+0x2c>
 8001bfc:	e671      	b.n	80018e2 <HAL_RCC_OscConfig+0x5a>
 8001bfe:	bf00      	nop
 8001c00:	40023800 	.word	0x40023800

08001c04 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c04:	4913      	ldr	r1, [pc, #76]	; (8001c54 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8001c06:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c08:	688b      	ldr	r3, [r1, #8]
 8001c0a:	f003 030c 	and.w	r3, r3, #12
 8001c0e:	2b04      	cmp	r3, #4
 8001c10:	d01b      	beq.n	8001c4a <HAL_RCC_GetSysClockFreq+0x46>
 8001c12:	2b08      	cmp	r3, #8
 8001c14:	d11b      	bne.n	8001c4e <HAL_RCC_GetSysClockFreq+0x4a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c16:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001c18:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c1a:	6849      	ldr	r1, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c1c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001c20:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c24:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001c28:	bf1a      	itte	ne
 8001c2a:	480b      	ldrne	r0, [pc, #44]	; (8001c58 <HAL_RCC_GetSysClockFreq+0x54>)
 8001c2c:	2300      	movne	r3, #0
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c2e:	480b      	ldreq	r0, [pc, #44]	; (8001c5c <HAL_RCC_GetSysClockFreq+0x58>)
 8001c30:	fba1 0100 	umull	r0, r1, r1, r0
 8001c34:	f7fe ffd8 	bl	8000be8 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001c38:	4b06      	ldr	r3, [pc, #24]	; (8001c54 <HAL_RCC_GetSysClockFreq+0x50>)
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001c40:	3301      	adds	r3, #1
 8001c42:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 8001c44:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001c48:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c4a:	4803      	ldr	r0, [pc, #12]	; (8001c58 <HAL_RCC_GetSysClockFreq+0x54>)
 8001c4c:	e7fc      	b.n	8001c48 <HAL_RCC_GetSysClockFreq+0x44>
      sysclockfreq = HSI_VALUE;
 8001c4e:	4803      	ldr	r0, [pc, #12]	; (8001c5c <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 8001c50:	e7fa      	b.n	8001c48 <HAL_RCC_GetSysClockFreq+0x44>
 8001c52:	bf00      	nop
 8001c54:	40023800 	.word	0x40023800
 8001c58:	007a1200 	.word	0x007a1200
 8001c5c:	00f42400 	.word	0x00f42400

08001c60 <HAL_RCC_ClockConfig>:
{
 8001c60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c64:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8001c66:	4604      	mov	r4, r0
 8001c68:	b910      	cbnz	r0, 8001c70 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001c6a:	2001      	movs	r0, #1
}
 8001c6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c70:	4a46      	ldr	r2, [pc, #280]	; (8001d8c <HAL_RCC_ClockConfig+0x12c>)
 8001c72:	6813      	ldr	r3, [r2, #0]
 8001c74:	f003 030f 	and.w	r3, r3, #15
 8001c78:	428b      	cmp	r3, r1
 8001c7a:	d328      	bcc.n	8001cce <HAL_RCC_ClockConfig+0x6e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c7c:	6822      	ldr	r2, [r4, #0]
 8001c7e:	0797      	lsls	r7, r2, #30
 8001c80:	d430      	bmi.n	8001ce4 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c82:	07d0      	lsls	r0, r2, #31
 8001c84:	d444      	bmi.n	8001d10 <HAL_RCC_ClockConfig+0xb0>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c86:	4a41      	ldr	r2, [pc, #260]	; (8001d8c <HAL_RCC_ClockConfig+0x12c>)
 8001c88:	6813      	ldr	r3, [r2, #0]
 8001c8a:	f003 030f 	and.w	r3, r3, #15
 8001c8e:	42ab      	cmp	r3, r5
 8001c90:	d867      	bhi.n	8001d62 <HAL_RCC_ClockConfig+0x102>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c92:	6822      	ldr	r2, [r4, #0]
 8001c94:	0751      	lsls	r1, r2, #29
 8001c96:	d470      	bmi.n	8001d7a <HAL_RCC_ClockConfig+0x11a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c98:	0713      	lsls	r3, r2, #28
 8001c9a:	d507      	bpl.n	8001cac <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001c9c:	4a3c      	ldr	r2, [pc, #240]	; (8001d90 <HAL_RCC_ClockConfig+0x130>)
 8001c9e:	6921      	ldr	r1, [r4, #16]
 8001ca0:	6893      	ldr	r3, [r2, #8]
 8001ca2:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001ca6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001caa:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001cac:	f7ff ffaa 	bl	8001c04 <HAL_RCC_GetSysClockFreq>
 8001cb0:	4b37      	ldr	r3, [pc, #220]	; (8001d90 <HAL_RCC_ClockConfig+0x130>)
 8001cb2:	4a38      	ldr	r2, [pc, #224]	; (8001d94 <HAL_RCC_ClockConfig+0x134>)
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001cba:	5cd3      	ldrb	r3, [r2, r3]
 8001cbc:	40d8      	lsrs	r0, r3
 8001cbe:	4b36      	ldr	r3, [pc, #216]	; (8001d98 <HAL_RCC_ClockConfig+0x138>)
 8001cc0:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8001cc2:	4b36      	ldr	r3, [pc, #216]	; (8001d9c <HAL_RCC_ClockConfig+0x13c>)
 8001cc4:	6818      	ldr	r0, [r3, #0]
 8001cc6:	f7ff fb55 	bl	8001374 <HAL_InitTick>
  return HAL_OK;
 8001cca:	2000      	movs	r0, #0
 8001ccc:	e7ce      	b.n	8001c6c <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cce:	6813      	ldr	r3, [r2, #0]
 8001cd0:	f023 030f 	bic.w	r3, r3, #15
 8001cd4:	430b      	orrs	r3, r1
 8001cd6:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cd8:	6813      	ldr	r3, [r2, #0]
 8001cda:	f003 030f 	and.w	r3, r3, #15
 8001cde:	428b      	cmp	r3, r1
 8001ce0:	d1c3      	bne.n	8001c6a <HAL_RCC_ClockConfig+0xa>
 8001ce2:	e7cb      	b.n	8001c7c <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ce4:	f012 0f04 	tst.w	r2, #4
 8001ce8:	4b29      	ldr	r3, [pc, #164]	; (8001d90 <HAL_RCC_ClockConfig+0x130>)
 8001cea:	d003      	beq.n	8001cf4 <HAL_RCC_ClockConfig+0x94>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001cec:	6899      	ldr	r1, [r3, #8]
 8001cee:	f441 51e0 	orr.w	r1, r1, #7168	; 0x1c00
 8001cf2:	6099      	str	r1, [r3, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cf4:	0716      	lsls	r6, r2, #28
 8001cf6:	d503      	bpl.n	8001d00 <HAL_RCC_ClockConfig+0xa0>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001cf8:	6899      	ldr	r1, [r3, #8]
 8001cfa:	f441 4160 	orr.w	r1, r1, #57344	; 0xe000
 8001cfe:	6099      	str	r1, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d00:	4923      	ldr	r1, [pc, #140]	; (8001d90 <HAL_RCC_ClockConfig+0x130>)
 8001d02:	68a0      	ldr	r0, [r4, #8]
 8001d04:	688b      	ldr	r3, [r1, #8]
 8001d06:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001d0a:	4303      	orrs	r3, r0
 8001d0c:	608b      	str	r3, [r1, #8]
 8001d0e:	e7b8      	b.n	8001c82 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d10:	6861      	ldr	r1, [r4, #4]
 8001d12:	4b1f      	ldr	r3, [pc, #124]	; (8001d90 <HAL_RCC_ClockConfig+0x130>)
 8001d14:	2901      	cmp	r1, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d16:	681a      	ldr	r2, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d18:	d11b      	bne.n	8001d52 <HAL_RCC_ClockConfig+0xf2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d1a:	f412 3f00 	tst.w	r2, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d1e:	d0a4      	beq.n	8001c6a <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d20:	689a      	ldr	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d22:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d26:	4f1a      	ldr	r7, [pc, #104]	; (8001d90 <HAL_RCC_ClockConfig+0x130>)
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d28:	f022 0203 	bic.w	r2, r2, #3
 8001d2c:	430a      	orrs	r2, r1
 8001d2e:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8001d30:	f7ff fb5c 	bl	80013ec <HAL_GetTick>
 8001d34:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d36:	68bb      	ldr	r3, [r7, #8]
 8001d38:	6862      	ldr	r2, [r4, #4]
 8001d3a:	f003 030c 	and.w	r3, r3, #12
 8001d3e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001d42:	d0a0      	beq.n	8001c86 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d44:	f7ff fb52 	bl	80013ec <HAL_GetTick>
 8001d48:	1b80      	subs	r0, r0, r6
 8001d4a:	4540      	cmp	r0, r8
 8001d4c:	d9f3      	bls.n	8001d36 <HAL_RCC_ClockConfig+0xd6>
        return HAL_TIMEOUT;
 8001d4e:	2003      	movs	r0, #3
 8001d50:	e78c      	b.n	8001c6c <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d52:	2902      	cmp	r1, #2
 8001d54:	d102      	bne.n	8001d5c <HAL_RCC_ClockConfig+0xfc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d56:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8001d5a:	e7e0      	b.n	8001d1e <HAL_RCC_ClockConfig+0xbe>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d5c:	f012 0f02 	tst.w	r2, #2
 8001d60:	e7dd      	b.n	8001d1e <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d62:	6813      	ldr	r3, [r2, #0]
 8001d64:	f023 030f 	bic.w	r3, r3, #15
 8001d68:	432b      	orrs	r3, r5
 8001d6a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d6c:	6813      	ldr	r3, [r2, #0]
 8001d6e:	f003 030f 	and.w	r3, r3, #15
 8001d72:	42ab      	cmp	r3, r5
 8001d74:	f47f af79 	bne.w	8001c6a <HAL_RCC_ClockConfig+0xa>
 8001d78:	e78b      	b.n	8001c92 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d7a:	4905      	ldr	r1, [pc, #20]	; (8001d90 <HAL_RCC_ClockConfig+0x130>)
 8001d7c:	68e0      	ldr	r0, [r4, #12]
 8001d7e:	688b      	ldr	r3, [r1, #8]
 8001d80:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001d84:	4303      	orrs	r3, r0
 8001d86:	608b      	str	r3, [r1, #8]
 8001d88:	e786      	b.n	8001c98 <HAL_RCC_ClockConfig+0x38>
 8001d8a:	bf00      	nop
 8001d8c:	40023c00 	.word	0x40023c00
 8001d90:	40023800 	.word	0x40023800
 8001d94:	0800663d 	.word	0x0800663d
 8001d98:	20000000 	.word	0x20000000
 8001d9c:	20000008 	.word	0x20000008

08001da0 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001da0:	4b04      	ldr	r3, [pc, #16]	; (8001db4 <HAL_RCC_GetPCLK1Freq+0x14>)
 8001da2:	4a05      	ldr	r2, [pc, #20]	; (8001db8 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001da4:	689b      	ldr	r3, [r3, #8]
 8001da6:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001daa:	5cd3      	ldrb	r3, [r2, r3]
 8001dac:	4a03      	ldr	r2, [pc, #12]	; (8001dbc <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001dae:	6810      	ldr	r0, [r2, #0]
}
 8001db0:	40d8      	lsrs	r0, r3
 8001db2:	4770      	bx	lr
 8001db4:	40023800 	.word	0x40023800
 8001db8:	0800664d 	.word	0x0800664d
 8001dbc:	20000000 	.word	0x20000000

08001dc0 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001dc0:	4b04      	ldr	r3, [pc, #16]	; (8001dd4 <HAL_RCC_GetPCLK2Freq+0x14>)
 8001dc2:	4a05      	ldr	r2, [pc, #20]	; (8001dd8 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001dc4:	689b      	ldr	r3, [r3, #8]
 8001dc6:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001dca:	5cd3      	ldrb	r3, [r2, r3]
 8001dcc:	4a03      	ldr	r2, [pc, #12]	; (8001ddc <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001dce:	6810      	ldr	r0, [r2, #0]
}
 8001dd0:	40d8      	lsrs	r0, r3
 8001dd2:	4770      	bx	lr
 8001dd4:	40023800 	.word	0x40023800
 8001dd8:	0800664d 	.word	0x0800664d
 8001ddc:	20000000 	.word	0x20000000

08001de0 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001de0:	6803      	ldr	r3, [r0, #0]
{
 8001de2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001de6:	f013 0601 	ands.w	r6, r3, #1
{
 8001dea:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001dec:	d00b      	beq.n	8001e06 <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001dee:	4aaa      	ldr	r2, [pc, #680]	; (8002098 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8001df0:	6891      	ldr	r1, [r2, #8]
 8001df2:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 8001df6:	6091      	str	r1, [r2, #8]
 8001df8:	6b46      	ldr	r6, [r0, #52]	; 0x34
 8001dfa:	6891      	ldr	r1, [r2, #8]
 8001dfc:	4331      	orrs	r1, r6

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001dfe:	fab6 f686 	clz	r6, r6
 8001e02:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001e04:	6091      	str	r1, [r2, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001e06:	f413 2500 	ands.w	r5, r3, #524288	; 0x80000
 8001e0a:	d012      	beq.n	8001e32 <HAL_RCCEx_PeriphCLKConfig+0x52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001e0c:	49a2      	ldr	r1, [pc, #648]	; (8002098 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8001e0e:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8001e10:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001e14:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001e18:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
    {
      plli2sused = 1;
 8001e1c:	bf08      	it	eq
 8001e1e:	2601      	moveq	r6, #1
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001e20:	ea42 0205 	orr.w	r2, r2, r5
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001e24:	bf16      	itet	ne
 8001e26:	fab5 f585 	clzne	r5, r5
  uint32_t pllsaiused = 0;
 8001e2a:	2500      	moveq	r5, #0
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001e2c:	096d      	lsrne	r5, r5, #5
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001e2e:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001e32:	02d8      	lsls	r0, r3, #11
 8001e34:	d510      	bpl.n	8001e58 <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001e36:	4898      	ldr	r0, [pc, #608]	; (8002098 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8001e38:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8001e3a:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001e3e:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001e42:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8001e46:	ea42 0201 	orr.w	r2, r2, r1
 8001e4a:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001e4e:	f000 8184 	beq.w	800215a <HAL_RCCEx_PeriphCLKConfig+0x37a>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 8001e52:	2900      	cmp	r1, #0
 8001e54:	bf08      	it	eq
 8001e56:	2501      	moveq	r5, #1
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {
      plli2sused = 1;
 8001e58:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8001e5c:	bf18      	it	ne
 8001e5e:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001e60:	0699      	lsls	r1, r3, #26
 8001e62:	d531      	bpl.n	8001ec8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e64:	4b8c      	ldr	r3, [pc, #560]	; (8002098 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001e66:	4f8d      	ldr	r7, [pc, #564]	; (800209c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e68:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e6a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001e6e:	641a      	str	r2, [r3, #64]	; 0x40
 8001e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e76:	9301      	str	r3, [sp, #4]
 8001e78:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e80:	603b      	str	r3, [r7, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e82:	f7ff fab3 	bl	80013ec <HAL_GetTick>
 8001e86:	4680      	mov	r8, r0

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	05da      	lsls	r2, r3, #23
 8001e8c:	f140 8167 	bpl.w	800215e <HAL_RCCEx_PeriphCLKConfig+0x37e>
        return HAL_TIMEOUT;
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001e90:	4f81      	ldr	r7, [pc, #516]	; (8002098 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8001e92:	6f3b      	ldr	r3, [r7, #112]	; 0x70

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001e94:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001e98:	f040 816c 	bne.w	8002174 <HAL_RCCEx_PeriphCLKConfig+0x394>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e9c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001e9e:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8001ea2:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8001ea6:	4a7c      	ldr	r2, [pc, #496]	; (8002098 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8001ea8:	f040 818a 	bne.w	80021c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8001eac:	6891      	ldr	r1, [r2, #8]
 8001eae:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 8001eb2:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8001eb6:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 8001eba:	4301      	orrs	r1, r0
 8001ebc:	6091      	str	r1, [r2, #8]
 8001ebe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ec2:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8001ec4:	430b      	orrs	r3, r1
 8001ec6:	6713      	str	r3, [r2, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001ec8:	6823      	ldr	r3, [r4, #0]
 8001eca:	06d9      	lsls	r1, r3, #27
 8001ecc:	d50c      	bpl.n	8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x108>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001ece:	4a72      	ldr	r2, [pc, #456]	; (8002098 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8001ed0:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8001ed4:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8001ed8:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 8001edc:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8001ee0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001ee2:	4301      	orrs	r1, r0
 8001ee4:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001ee8:	045a      	lsls	r2, r3, #17
 8001eea:	d508      	bpl.n	8001efe <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001eec:	496a      	ldr	r1, [pc, #424]	; (8002098 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8001eee:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8001ef0:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001ef4:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8001ef8:	4302      	orrs	r2, r0
 8001efa:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001efe:	041f      	lsls	r7, r3, #16
 8001f00:	d508      	bpl.n	8001f14 <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001f02:	4965      	ldr	r1, [pc, #404]	; (8002098 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8001f04:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8001f06:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001f0a:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8001f0e:	4302      	orrs	r2, r0
 8001f10:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001f14:	03d8      	lsls	r0, r3, #15
 8001f16:	d508      	bpl.n	8001f2a <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001f18:	495f      	ldr	r1, [pc, #380]	; (8002098 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8001f1a:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8001f1c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001f20:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8001f24:	4302      	orrs	r2, r0
 8001f26:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001f2a:	0399      	lsls	r1, r3, #14
 8001f2c:	d508      	bpl.n	8001f40 <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001f2e:	495a      	ldr	r1, [pc, #360]	; (8002098 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8001f30:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8001f32:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001f36:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8001f3a:	4302      	orrs	r2, r0
 8001f3c:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001f40:	065a      	lsls	r2, r3, #25
 8001f42:	d508      	bpl.n	8001f56 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001f44:	4954      	ldr	r1, [pc, #336]	; (8002098 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8001f46:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8001f48:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001f4c:	f022 0203 	bic.w	r2, r2, #3
 8001f50:	4302      	orrs	r2, r0
 8001f52:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001f56:	061f      	lsls	r7, r3, #24
 8001f58:	d508      	bpl.n	8001f6c <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001f5a:	494f      	ldr	r1, [pc, #316]	; (8002098 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8001f5c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8001f5e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001f62:	f022 020c 	bic.w	r2, r2, #12
 8001f66:	4302      	orrs	r2, r0
 8001f68:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001f6c:	05d8      	lsls	r0, r3, #23
 8001f6e:	d508      	bpl.n	8001f82 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001f70:	4949      	ldr	r1, [pc, #292]	; (8002098 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8001f72:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8001f74:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001f78:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8001f7c:	4302      	orrs	r2, r0
 8001f7e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001f82:	0599      	lsls	r1, r3, #22
 8001f84:	d508      	bpl.n	8001f98 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001f86:	4944      	ldr	r1, [pc, #272]	; (8002098 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8001f88:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8001f8a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001f8e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8001f92:	4302      	orrs	r2, r0
 8001f94:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001f98:	055a      	lsls	r2, r3, #21
 8001f9a:	d508      	bpl.n	8001fae <HAL_RCCEx_PeriphCLKConfig+0x1ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001f9c:	493e      	ldr	r1, [pc, #248]	; (8002098 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8001f9e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001fa0:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001fa4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001fa8:	4302      	orrs	r2, r0
 8001faa:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8001fae:	051f      	lsls	r7, r3, #20
 8001fb0:	d508      	bpl.n	8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8001fb2:	4939      	ldr	r1, [pc, #228]	; (8002098 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8001fb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001fb6:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001fba:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8001fbe:	4302      	orrs	r2, r0
 8001fc0:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8001fc4:	04d8      	lsls	r0, r3, #19
 8001fc6:	d508      	bpl.n	8001fda <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8001fc8:	4933      	ldr	r1, [pc, #204]	; (8002098 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8001fca:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8001fcc:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001fd0:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001fd4:	4302      	orrs	r2, r0
 8001fd6:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8001fda:	0499      	lsls	r1, r3, #18
 8001fdc:	d508      	bpl.n	8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x210>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8001fde:	492e      	ldr	r1, [pc, #184]	; (8002098 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8001fe0:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8001fe2:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001fe6:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8001fea:	4302      	orrs	r2, r0
 8001fec:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001ff0:	025a      	lsls	r2, r3, #9
 8001ff2:	d508      	bpl.n	8002006 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001ff4:	4928      	ldr	r1, [pc, #160]	; (8002098 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8001ff6:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8001ff8:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001ffc:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8002000:	4302      	orrs	r2, r0
 8002002:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002006:	029f      	lsls	r7, r3, #10
 8002008:	d50c      	bpl.n	8002024 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800200a:	4823      	ldr	r0, [pc, #140]	; (8002098 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 800200c:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 800200e:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 8002012:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002016:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
      pllsaiused = 1;
 800201a:	bf08      	it	eq
 800201c:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800201e:	430a      	orrs	r2, r1
 8002020:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1;
 8002024:	f013 0f08 	tst.w	r3, #8
 8002028:	bf18      	it	ne
 800202a:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800202c:	0358      	lsls	r0, r3, #13
 800202e:	d508      	bpl.n	8002042 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002030:	4919      	ldr	r1, [pc, #100]	; (8002098 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8002032:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8002034:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002038:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800203c:	4302      	orrs	r2, r0
 800203e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002042:	0219      	lsls	r1, r3, #8
 8002044:	d509      	bpl.n	800205a <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002046:	4914      	ldr	r1, [pc, #80]	; (8002098 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8002048:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 800204c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002050:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8002054:	4302      	orrs	r2, r0
 8002056:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800205a:	2e01      	cmp	r6, #1
 800205c:	f000 80b4 	beq.w	80021c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8002060:	019a      	lsls	r2, r3, #6
 8002062:	f100 80b1 	bmi.w	80021c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002066:	2d01      	cmp	r5, #1
 8002068:	d175      	bne.n	8002156 <HAL_RCCEx_PeriphCLKConfig+0x376>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800206a:	4d0b      	ldr	r5, [pc, #44]	; (8002098 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 800206c:	682b      	ldr	r3, [r5, #0]
 800206e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002072:	602b      	str	r3, [r5, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002074:	f7ff f9ba 	bl	80013ec <HAL_GetTick>
 8002078:	4606      	mov	r6, r0

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800207a:	682b      	ldr	r3, [r5, #0]
 800207c:	009f      	lsls	r7, r3, #2
 800207e:	f100 8127 	bmi.w	80022d0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002082:	6822      	ldr	r2, [r4, #0]
 8002084:	0316      	lsls	r6, r2, #12
 8002086:	d501      	bpl.n	800208c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8002088:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800208a:	b14b      	cbz	r3, 80020a0 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 800208c:	02d0      	lsls	r0, r2, #11
 800208e:	d522      	bpl.n	80020d6 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002090:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002092:	bb03      	cbnz	r3, 80020d6 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
 8002094:	e004      	b.n	80020a0 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 8002096:	bf00      	nop
 8002098:	40023800 	.word	0x40023800
 800209c:	40007000 	.word	0x40007000
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80020a0:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80020a4:	f8d5 1088 	ldr.w	r1, [r5, #136]	; 0x88
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80020a8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80020ac:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 80020b0:	430b      	orrs	r3, r1
 80020b2:	6961      	ldr	r1, [r4, #20]
 80020b4:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 80020b8:	69a1      	ldr	r1, [r4, #24]
 80020ba:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80020be:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80020c2:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 80020c6:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80020c8:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 80020cc:	3901      	subs	r1, #1
 80020ce:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80020d2:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80020d6:	0291      	lsls	r1, r2, #10
 80020d8:	d515      	bpl.n	8002106 <HAL_RCCEx_PeriphCLKConfig+0x326>
 80020da:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80020dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80020e0:	d111      	bne.n	8002106 <HAL_RCCEx_PeriphCLKConfig+0x326>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80020e2:	4982      	ldr	r1, [pc, #520]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80020e4:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80020e8:	f8d1 0088 	ldr.w	r0, [r1, #136]	; 0x88

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80020ec:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 80020f0:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 80020f4:	4303      	orrs	r3, r0
 80020f6:	6960      	ldr	r0, [r4, #20]
 80020f8:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80020fc:	6a20      	ldr	r0, [r4, #32]
 80020fe:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8002102:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002106:	0712      	lsls	r2, r2, #28
 8002108:	d519      	bpl.n	800213e <HAL_RCCEx_PeriphCLKConfig+0x35e>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800210a:	4a78      	ldr	r2, [pc, #480]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800210c:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002110:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002114:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8002118:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800211c:	430b      	orrs	r3, r1
 800211e:	6961      	ldr	r1, [r4, #20]
 8002120:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8002124:	69e1      	ldr	r1, [r4, #28]
 8002126:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 800212a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800212e:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8002132:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8002134:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002138:	430b      	orrs	r3, r1
 800213a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800213e:	4c6b      	ldr	r4, [pc, #428]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002140:	6823      	ldr	r3, [r4, #0]
 8002142:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002146:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002148:	f7ff f950 	bl	80013ec <HAL_GetTick>
 800214c:	4605      	mov	r5, r0

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800214e:	6823      	ldr	r3, [r4, #0]
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	f140 80c4 	bpl.w	80022de <HAL_RCCEx_PeriphCLKConfig+0x4fe>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8002156:	2000      	movs	r0, #0
 8002158:	e009      	b.n	800216e <HAL_RCCEx_PeriphCLKConfig+0x38e>
      plli2sused = 1;
 800215a:	2601      	movs	r6, #1
 800215c:	e67c      	b.n	8001e58 <HAL_RCCEx_PeriphCLKConfig+0x78>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800215e:	f7ff f945 	bl	80013ec <HAL_GetTick>
 8002162:	eba0 0008 	sub.w	r0, r0, r8
 8002166:	2864      	cmp	r0, #100	; 0x64
 8002168:	f67f ae8e 	bls.w	8001e88 <HAL_RCCEx_PeriphCLKConfig+0xa8>
        return HAL_TIMEOUT;
 800216c:	2003      	movs	r0, #3
}
 800216e:	b003      	add	sp, #12
 8002170:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002174:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002176:	f402 7240 	and.w	r2, r2, #768	; 0x300
 800217a:	4293      	cmp	r3, r2
 800217c:	f43f ae8e 	beq.w	8001e9c <HAL_RCCEx_PeriphCLKConfig+0xbc>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002180:	6f3b      	ldr	r3, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8002182:	6f3a      	ldr	r2, [r7, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002184:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8002188:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800218c:	673a      	str	r2, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800218e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002190:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002194:	673a      	str	r2, [r7, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 8002196:	673b      	str	r3, [r7, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002198:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800219a:	07db      	lsls	r3, r3, #31
 800219c:	f57f ae7e 	bpl.w	8001e9c <HAL_RCCEx_PeriphCLKConfig+0xbc>
        tickstart = HAL_GetTick();
 80021a0:	f7ff f924 	bl	80013ec <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021a4:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80021a8:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80021ac:	0798      	lsls	r0, r3, #30
 80021ae:	f53f ae75 	bmi.w	8001e9c <HAL_RCCEx_PeriphCLKConfig+0xbc>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021b2:	f7ff f91b 	bl	80013ec <HAL_GetTick>
 80021b6:	eba0 0008 	sub.w	r0, r0, r8
 80021ba:	4548      	cmp	r0, r9
 80021bc:	d9f5      	bls.n	80021aa <HAL_RCCEx_PeriphCLKConfig+0x3ca>
 80021be:	e7d5      	b.n	800216c <HAL_RCCEx_PeriphCLKConfig+0x38c>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80021c0:	6891      	ldr	r1, [r2, #8]
 80021c2:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 80021c6:	e679      	b.n	8001ebc <HAL_RCCEx_PeriphCLKConfig+0xdc>
    __HAL_RCC_PLLI2S_DISABLE();
 80021c8:	4e48      	ldr	r6, [pc, #288]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80021ca:	6833      	ldr	r3, [r6, #0]
 80021cc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80021d0:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 80021d2:	f7ff f90b 	bl	80013ec <HAL_GetTick>
 80021d6:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80021d8:	6833      	ldr	r3, [r6, #0]
 80021da:	011b      	lsls	r3, r3, #4
 80021dc:	d472      	bmi.n	80022c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80021de:	6822      	ldr	r2, [r4, #0]
 80021e0:	07d7      	lsls	r7, r2, #31
 80021e2:	d512      	bpl.n	800220a <HAL_RCCEx_PeriphCLKConfig+0x42a>
 80021e4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80021e6:	b983      	cbnz	r3, 800220a <HAL_RCCEx_PeriphCLKConfig+0x42a>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80021e8:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80021ec:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80021f0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80021f4:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 80021f8:	430b      	orrs	r3, r1
 80021fa:	6861      	ldr	r1, [r4, #4]
 80021fc:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8002200:	68a1      	ldr	r1, [r4, #8]
 8002202:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8002206:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800220a:	0316      	lsls	r6, r2, #12
 800220c:	d503      	bpl.n	8002216 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800220e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002210:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002214:	d005      	beq.n	8002222 <HAL_RCCEx_PeriphCLKConfig+0x442>
 8002216:	02d0      	lsls	r0, r2, #11
 8002218:	d51e      	bpl.n	8002258 <HAL_RCCEx_PeriphCLKConfig+0x478>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800221a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800221c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002220:	d11a      	bne.n	8002258 <HAL_RCCEx_PeriphCLKConfig+0x478>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002222:	4932      	ldr	r1, [pc, #200]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002224:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002228:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800222c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002230:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8002234:	4303      	orrs	r3, r0
 8002236:	6860      	ldr	r0, [r4, #4]
 8002238:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800223c:	68e0      	ldr	r0, [r4, #12]
 800223e:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8002242:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002246:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
 800224a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800224c:	f020 001f 	bic.w	r0, r0, #31
 8002250:	3b01      	subs	r3, #1
 8002252:	4303      	orrs	r3, r0
 8002254:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002258:	01d1      	lsls	r1, r2, #7
 800225a:	d511      	bpl.n	8002280 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800225c:	4923      	ldr	r1, [pc, #140]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800225e:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002262:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002266:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 800226a:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 800226e:	4303      	orrs	r3, r0
 8002270:	6860      	ldr	r0, [r4, #4]
 8002272:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8002276:	6920      	ldr	r0, [r4, #16]
 8002278:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800227c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002280:	0192      	lsls	r2, r2, #6
 8002282:	d50d      	bpl.n	80022a0 <HAL_RCCEx_PeriphCLKConfig+0x4c0>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002284:	6923      	ldr	r3, [r4, #16]
 8002286:	6862      	ldr	r2, [r4, #4]
 8002288:	041b      	lsls	r3, r3, #16
 800228a:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800228e:	68e2      	ldr	r2, [r4, #12]
 8002290:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002294:	68a2      	ldr	r2, [r4, #8]
 8002296:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 800229a:	4a14      	ldr	r2, [pc, #80]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800229c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 80022a0:	4e12      	ldr	r6, [pc, #72]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80022a2:	6833      	ldr	r3, [r6, #0]
 80022a4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80022a8:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 80022aa:	f7ff f89f 	bl	80013ec <HAL_GetTick>
 80022ae:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80022b0:	6833      	ldr	r3, [r6, #0]
 80022b2:	011b      	lsls	r3, r3, #4
 80022b4:	f53f aed7 	bmi.w	8002066 <HAL_RCCEx_PeriphCLKConfig+0x286>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80022b8:	f7ff f898 	bl	80013ec <HAL_GetTick>
 80022bc:	1bc0      	subs	r0, r0, r7
 80022be:	2864      	cmp	r0, #100	; 0x64
 80022c0:	d9f6      	bls.n	80022b0 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 80022c2:	e753      	b.n	800216c <HAL_RCCEx_PeriphCLKConfig+0x38c>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80022c4:	f7ff f892 	bl	80013ec <HAL_GetTick>
 80022c8:	1bc0      	subs	r0, r0, r7
 80022ca:	2864      	cmp	r0, #100	; 0x64
 80022cc:	d984      	bls.n	80021d8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80022ce:	e74d      	b.n	800216c <HAL_RCCEx_PeriphCLKConfig+0x38c>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80022d0:	f7ff f88c 	bl	80013ec <HAL_GetTick>
 80022d4:	1b80      	subs	r0, r0, r6
 80022d6:	2864      	cmp	r0, #100	; 0x64
 80022d8:	f67f aecf 	bls.w	800207a <HAL_RCCEx_PeriphCLKConfig+0x29a>
 80022dc:	e746      	b.n	800216c <HAL_RCCEx_PeriphCLKConfig+0x38c>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80022de:	f7ff f885 	bl	80013ec <HAL_GetTick>
 80022e2:	1b40      	subs	r0, r0, r5
 80022e4:	2864      	cmp	r0, #100	; 0x64
 80022e6:	f67f af32 	bls.w	800214e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80022ea:	e73f      	b.n	800216c <HAL_RCCEx_PeriphCLKConfig+0x38c>
 80022ec:	40023800 	.word	0x40023800

080022f0 <HAL_TIM_Base_Start>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80022f0:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d12f      	bne.n	8002358 <HAL_TIM_Base_Start+0x68>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022f8:	2302      	movs	r3, #2

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80022fa:	4a18      	ldr	r2, [pc, #96]	; (800235c <HAL_TIM_Base_Start+0x6c>)
  htim->State = HAL_TIM_STATE_BUSY;
 80022fc:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002300:	6803      	ldr	r3, [r0, #0]
 8002302:	4293      	cmp	r3, r2
 8002304:	d01a      	beq.n	800233c <HAL_TIM_Base_Start+0x4c>
 8002306:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800230a:	d017      	beq.n	800233c <HAL_TIM_Base_Start+0x4c>
 800230c:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8002310:	4293      	cmp	r3, r2
 8002312:	d013      	beq.n	800233c <HAL_TIM_Base_Start+0x4c>
 8002314:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002318:	4293      	cmp	r3, r2
 800231a:	d00f      	beq.n	800233c <HAL_TIM_Base_Start+0x4c>
 800231c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002320:	4293      	cmp	r3, r2
 8002322:	d00b      	beq.n	800233c <HAL_TIM_Base_Start+0x4c>
 8002324:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8002328:	4293      	cmp	r3, r2
 800232a:	d007      	beq.n	800233c <HAL_TIM_Base_Start+0x4c>
 800232c:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8002330:	4293      	cmp	r3, r2
 8002332:	d003      	beq.n	800233c <HAL_TIM_Base_Start+0x4c>
 8002334:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002338:	4293      	cmp	r3, r2
 800233a:	d107      	bne.n	800234c <HAL_TIM_Base_Start+0x5c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800233c:	6899      	ldr	r1, [r3, #8]
 800233e:	4a08      	ldr	r2, [pc, #32]	; (8002360 <HAL_TIM_Base_Start+0x70>)
 8002340:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002342:	2a06      	cmp	r2, #6
 8002344:	d006      	beq.n	8002354 <HAL_TIM_Base_Start+0x64>
 8002346:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800234a:	d003      	beq.n	8002354 <HAL_TIM_Base_Start+0x64>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800234c:	681a      	ldr	r2, [r3, #0]
 800234e:	f042 0201 	orr.w	r2, r2, #1
 8002352:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002354:	2000      	movs	r0, #0
}
 8002356:	4770      	bx	lr
    return HAL_ERROR;
 8002358:	2001      	movs	r0, #1
 800235a:	4770      	bx	lr
 800235c:	40010000 	.word	0x40010000
 8002360:	00010007 	.word	0x00010007

08002364 <HAL_TIM_PeriodElapsedCallback>:
 8002364:	4770      	bx	lr

08002366 <HAL_TIM_OC_DelayElapsedCallback>:
 8002366:	4770      	bx	lr

08002368 <HAL_TIM_IC_CaptureCallback>:
 8002368:	4770      	bx	lr

0800236a <HAL_TIM_PWM_PulseFinishedCallback>:
 800236a:	4770      	bx	lr

0800236c <HAL_TIM_TriggerCallback>:
 800236c:	4770      	bx	lr

0800236e <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800236e:	6803      	ldr	r3, [r0, #0]
 8002370:	691a      	ldr	r2, [r3, #16]
 8002372:	0791      	lsls	r1, r2, #30
{
 8002374:	b510      	push	{r4, lr}
 8002376:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002378:	d50f      	bpl.n	800239a <HAL_TIM_IRQHandler+0x2c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800237a:	68da      	ldr	r2, [r3, #12]
 800237c:	0792      	lsls	r2, r2, #30
 800237e:	d50c      	bpl.n	800239a <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002380:	f06f 0202 	mvn.w	r2, #2
 8002384:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002386:	2201      	movs	r2, #1
 8002388:	7702      	strb	r2, [r0, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800238a:	699b      	ldr	r3, [r3, #24]
 800238c:	0799      	lsls	r1, r3, #30
 800238e:	f000 8085 	beq.w	800249c <HAL_TIM_IRQHandler+0x12e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002392:	f7ff ffe9 	bl	8002368 <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002396:	2300      	movs	r3, #0
 8002398:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800239a:	6823      	ldr	r3, [r4, #0]
 800239c:	691a      	ldr	r2, [r3, #16]
 800239e:	0752      	lsls	r2, r2, #29
 80023a0:	d510      	bpl.n	80023c4 <HAL_TIM_IRQHandler+0x56>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80023a2:	68da      	ldr	r2, [r3, #12]
 80023a4:	0750      	lsls	r0, r2, #29
 80023a6:	d50d      	bpl.n	80023c4 <HAL_TIM_IRQHandler+0x56>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80023a8:	f06f 0204 	mvn.w	r2, #4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023ac:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80023ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80023b0:	2202      	movs	r2, #2
 80023b2:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80023b4:	699b      	ldr	r3, [r3, #24]
 80023b6:	f413 7f40 	tst.w	r3, #768	; 0x300
 80023ba:	d075      	beq.n	80024a8 <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 80023bc:	f7ff ffd4 	bl	8002368 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023c0:	2300      	movs	r3, #0
 80023c2:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80023c4:	6823      	ldr	r3, [r4, #0]
 80023c6:	691a      	ldr	r2, [r3, #16]
 80023c8:	0711      	lsls	r1, r2, #28
 80023ca:	d50f      	bpl.n	80023ec <HAL_TIM_IRQHandler+0x7e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80023cc:	68da      	ldr	r2, [r3, #12]
 80023ce:	0712      	lsls	r2, r2, #28
 80023d0:	d50c      	bpl.n	80023ec <HAL_TIM_IRQHandler+0x7e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80023d2:	f06f 0208 	mvn.w	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023d6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80023d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80023da:	2204      	movs	r2, #4
 80023dc:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80023de:	69db      	ldr	r3, [r3, #28]
 80023e0:	079b      	lsls	r3, r3, #30
 80023e2:	d067      	beq.n	80024b4 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 80023e4:	f7ff ffc0 	bl	8002368 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023e8:	2300      	movs	r3, #0
 80023ea:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80023ec:	6823      	ldr	r3, [r4, #0]
 80023ee:	691a      	ldr	r2, [r3, #16]
 80023f0:	06d0      	lsls	r0, r2, #27
 80023f2:	d510      	bpl.n	8002416 <HAL_TIM_IRQHandler+0xa8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80023f4:	68da      	ldr	r2, [r3, #12]
 80023f6:	06d1      	lsls	r1, r2, #27
 80023f8:	d50d      	bpl.n	8002416 <HAL_TIM_IRQHandler+0xa8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80023fa:	f06f 0210 	mvn.w	r2, #16
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023fe:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002400:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002402:	2208      	movs	r2, #8
 8002404:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002406:	69db      	ldr	r3, [r3, #28]
 8002408:	f413 7f40 	tst.w	r3, #768	; 0x300
 800240c:	d058      	beq.n	80024c0 <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 800240e:	f7ff ffab 	bl	8002368 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002412:	2300      	movs	r3, #0
 8002414:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002416:	6823      	ldr	r3, [r4, #0]
 8002418:	691a      	ldr	r2, [r3, #16]
 800241a:	07d2      	lsls	r2, r2, #31
 800241c:	d508      	bpl.n	8002430 <HAL_TIM_IRQHandler+0xc2>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800241e:	68da      	ldr	r2, [r3, #12]
 8002420:	07d0      	lsls	r0, r2, #31
 8002422:	d505      	bpl.n	8002430 <HAL_TIM_IRQHandler+0xc2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002424:	f06f 0201 	mvn.w	r2, #1
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002428:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800242a:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800242c:	f7ff ff9a 	bl	8002364 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002430:	6823      	ldr	r3, [r4, #0]
 8002432:	691a      	ldr	r2, [r3, #16]
 8002434:	0611      	lsls	r1, r2, #24
 8002436:	d508      	bpl.n	800244a <HAL_TIM_IRQHandler+0xdc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002438:	68da      	ldr	r2, [r3, #12]
 800243a:	0612      	lsls	r2, r2, #24
 800243c:	d505      	bpl.n	800244a <HAL_TIM_IRQHandler+0xdc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800243e:	f06f 0280 	mvn.w	r2, #128	; 0x80
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002442:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002444:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002446:	f000 f924 	bl	8002692 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800244a:	6823      	ldr	r3, [r4, #0]
 800244c:	691a      	ldr	r2, [r3, #16]
 800244e:	05d0      	lsls	r0, r2, #23
 8002450:	d508      	bpl.n	8002464 <HAL_TIM_IRQHandler+0xf6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002452:	68da      	ldr	r2, [r3, #12]
 8002454:	0611      	lsls	r1, r2, #24
 8002456:	d505      	bpl.n	8002464 <HAL_TIM_IRQHandler+0xf6>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002458:	f46f 7280 	mvn.w	r2, #256	; 0x100
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800245c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800245e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8002460:	f000 f918 	bl	8002694 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002464:	6823      	ldr	r3, [r4, #0]
 8002466:	691a      	ldr	r2, [r3, #16]
 8002468:	0652      	lsls	r2, r2, #25
 800246a:	d508      	bpl.n	800247e <HAL_TIM_IRQHandler+0x110>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800246c:	68da      	ldr	r2, [r3, #12]
 800246e:	0650      	lsls	r0, r2, #25
 8002470:	d505      	bpl.n	800247e <HAL_TIM_IRQHandler+0x110>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002472:	f06f 0240 	mvn.w	r2, #64	; 0x40
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002476:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002478:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800247a:	f7ff ff77 	bl	800236c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800247e:	6823      	ldr	r3, [r4, #0]
 8002480:	691a      	ldr	r2, [r3, #16]
 8002482:	0691      	lsls	r1, r2, #26
 8002484:	d522      	bpl.n	80024cc <HAL_TIM_IRQHandler+0x15e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002486:	68da      	ldr	r2, [r3, #12]
 8002488:	0692      	lsls	r2, r2, #26
 800248a:	d51f      	bpl.n	80024cc <HAL_TIM_IRQHandler+0x15e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800248c:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002490:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002492:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002494:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8002498:	f000 b8fa 	b.w	8002690 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800249c:	f7ff ff63 	bl	8002366 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024a0:	4620      	mov	r0, r4
 80024a2:	f7ff ff62 	bl	800236a <HAL_TIM_PWM_PulseFinishedCallback>
 80024a6:	e776      	b.n	8002396 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024a8:	f7ff ff5d 	bl	8002366 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024ac:	4620      	mov	r0, r4
 80024ae:	f7ff ff5c 	bl	800236a <HAL_TIM_PWM_PulseFinishedCallback>
 80024b2:	e785      	b.n	80023c0 <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024b4:	f7ff ff57 	bl	8002366 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024b8:	4620      	mov	r0, r4
 80024ba:	f7ff ff56 	bl	800236a <HAL_TIM_PWM_PulseFinishedCallback>
 80024be:	e793      	b.n	80023e8 <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024c0:	f7ff ff51 	bl	8002366 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024c4:	4620      	mov	r0, r4
 80024c6:	f7ff ff50 	bl	800236a <HAL_TIM_PWM_PulseFinishedCallback>
 80024ca:	e7a2      	b.n	8002412 <HAL_TIM_IRQHandler+0xa4>
}
 80024cc:	bd10      	pop	{r4, pc}
	...

080024d0 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80024d0:	4a30      	ldr	r2, [pc, #192]	; (8002594 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 80024d2:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80024d4:	4290      	cmp	r0, r2
 80024d6:	d012      	beq.n	80024fe <TIM_Base_SetConfig+0x2e>
 80024d8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80024dc:	d00f      	beq.n	80024fe <TIM_Base_SetConfig+0x2e>
 80024de:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80024e2:	4290      	cmp	r0, r2
 80024e4:	d00b      	beq.n	80024fe <TIM_Base_SetConfig+0x2e>
 80024e6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80024ea:	4290      	cmp	r0, r2
 80024ec:	d007      	beq.n	80024fe <TIM_Base_SetConfig+0x2e>
 80024ee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80024f2:	4290      	cmp	r0, r2
 80024f4:	d003      	beq.n	80024fe <TIM_Base_SetConfig+0x2e>
 80024f6:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80024fa:	4290      	cmp	r0, r2
 80024fc:	d119      	bne.n	8002532 <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 80024fe:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002500:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002504:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002506:	4a23      	ldr	r2, [pc, #140]	; (8002594 <TIM_Base_SetConfig+0xc4>)
 8002508:	4290      	cmp	r0, r2
 800250a:	d029      	beq.n	8002560 <TIM_Base_SetConfig+0x90>
 800250c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002510:	d026      	beq.n	8002560 <TIM_Base_SetConfig+0x90>
 8002512:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8002516:	4290      	cmp	r0, r2
 8002518:	d022      	beq.n	8002560 <TIM_Base_SetConfig+0x90>
 800251a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800251e:	4290      	cmp	r0, r2
 8002520:	d01e      	beq.n	8002560 <TIM_Base_SetConfig+0x90>
 8002522:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002526:	4290      	cmp	r0, r2
 8002528:	d01a      	beq.n	8002560 <TIM_Base_SetConfig+0x90>
 800252a:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800252e:	4290      	cmp	r0, r2
 8002530:	d016      	beq.n	8002560 <TIM_Base_SetConfig+0x90>
 8002532:	4a19      	ldr	r2, [pc, #100]	; (8002598 <TIM_Base_SetConfig+0xc8>)
 8002534:	4290      	cmp	r0, r2
 8002536:	d013      	beq.n	8002560 <TIM_Base_SetConfig+0x90>
 8002538:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800253c:	4290      	cmp	r0, r2
 800253e:	d00f      	beq.n	8002560 <TIM_Base_SetConfig+0x90>
 8002540:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002544:	4290      	cmp	r0, r2
 8002546:	d00b      	beq.n	8002560 <TIM_Base_SetConfig+0x90>
 8002548:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 800254c:	4290      	cmp	r0, r2
 800254e:	d007      	beq.n	8002560 <TIM_Base_SetConfig+0x90>
 8002550:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002554:	4290      	cmp	r0, r2
 8002556:	d003      	beq.n	8002560 <TIM_Base_SetConfig+0x90>
 8002558:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800255c:	4290      	cmp	r0, r2
 800255e:	d103      	bne.n	8002568 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002560:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002564:	68ca      	ldr	r2, [r1, #12]
 8002566:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002568:	694a      	ldr	r2, [r1, #20]
 800256a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800256e:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8002570:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002572:	688b      	ldr	r3, [r1, #8]
 8002574:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002576:	680b      	ldr	r3, [r1, #0]
 8002578:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800257a:	4b06      	ldr	r3, [pc, #24]	; (8002594 <TIM_Base_SetConfig+0xc4>)
 800257c:	4298      	cmp	r0, r3
 800257e:	d003      	beq.n	8002588 <TIM_Base_SetConfig+0xb8>
 8002580:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002584:	4298      	cmp	r0, r3
 8002586:	d101      	bne.n	800258c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002588:	690b      	ldr	r3, [r1, #16]
 800258a:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800258c:	2301      	movs	r3, #1
 800258e:	6143      	str	r3, [r0, #20]
}
 8002590:	4770      	bx	lr
 8002592:	bf00      	nop
 8002594:	40010000 	.word	0x40010000
 8002598:	40014000 	.word	0x40014000

0800259c <HAL_TIM_Base_Init>:
{
 800259c:	b510      	push	{r4, lr}
  if (htim == NULL)
 800259e:	4604      	mov	r4, r0
 80025a0:	b350      	cbz	r0, 80025f8 <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 80025a2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80025a6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80025aa:	b91b      	cbnz	r3, 80025b4 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80025ac:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80025b0:	f7fe fe1e 	bl	80011f0 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80025b4:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025b6:	6820      	ldr	r0, [r4, #0]
 80025b8:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 80025ba:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025be:	f7ff ff87 	bl	80024d0 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80025c2:	2301      	movs	r3, #1
  return HAL_OK;
 80025c4:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80025c6:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025ca:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80025ce:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80025d2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80025d6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 80025da:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80025de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025e2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80025e6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80025ea:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 80025ee:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 80025f2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 80025f6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80025f8:	2001      	movs	r0, #1
 80025fa:	e7fc      	b.n	80025f6 <HAL_TIM_Base_Init+0x5a>

080025fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80025fc:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80025fe:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002602:	2b01      	cmp	r3, #1
 8002604:	f04f 0302 	mov.w	r3, #2
 8002608:	d03d      	beq.n	8002686 <HAL_TIMEx_MasterConfigSynchronization+0x8a>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800260a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800260e:	4d1f      	ldr	r5, [pc, #124]	; (800268c <HAL_TIMEx_MasterConfigSynchronization+0x90>)
  tmpcr2 = htim->Instance->CR2;
 8002610:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002612:	42ab      	cmp	r3, r5
  tmpcr2 = htim->Instance->CR2;
 8002614:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 8002616:	689c      	ldr	r4, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002618:	d003      	beq.n	8002622 <HAL_TIMEx_MasterConfigSynchronization+0x26>
 800261a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800261e:	42ab      	cmp	r3, r5
 8002620:	d103      	bne.n	800262a <HAL_TIMEx_MasterConfigSynchronization+0x2e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002622:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002626:	684d      	ldr	r5, [r1, #4]
 8002628:	432a      	orrs	r2, r5
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800262a:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 800262c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002630:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002632:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002634:	4a15      	ldr	r2, [pc, #84]	; (800268c <HAL_TIMEx_MasterConfigSynchronization+0x90>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d01a      	beq.n	8002670 <HAL_TIMEx_MasterConfigSynchronization+0x74>
 800263a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800263e:	d017      	beq.n	8002670 <HAL_TIMEx_MasterConfigSynchronization+0x74>
 8002640:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8002644:	4293      	cmp	r3, r2
 8002646:	d013      	beq.n	8002670 <HAL_TIMEx_MasterConfigSynchronization+0x74>
 8002648:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800264c:	4293      	cmp	r3, r2
 800264e:	d00f      	beq.n	8002670 <HAL_TIMEx_MasterConfigSynchronization+0x74>
 8002650:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002654:	4293      	cmp	r3, r2
 8002656:	d00b      	beq.n	8002670 <HAL_TIMEx_MasterConfigSynchronization+0x74>
 8002658:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800265c:	4293      	cmp	r3, r2
 800265e:	d007      	beq.n	8002670 <HAL_TIMEx_MasterConfigSynchronization+0x74>
 8002660:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8002664:	4293      	cmp	r3, r2
 8002666:	d003      	beq.n	8002670 <HAL_TIMEx_MasterConfigSynchronization+0x74>
 8002668:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800266c:	4293      	cmp	r3, r2
 800266e:	d104      	bne.n	800267a <HAL_TIMEx_MasterConfigSynchronization+0x7e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002670:	6889      	ldr	r1, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002672:	f024 0280 	bic.w	r2, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002676:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002678:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800267a:	2301      	movs	r3, #1
 800267c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002680:	2300      	movs	r3, #0
 8002682:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8002686:	4618      	mov	r0, r3

  return HAL_OK;
}
 8002688:	bd30      	pop	{r4, r5, pc}
 800268a:	bf00      	nop
 800268c:	40010000 	.word	0x40010000

08002690 <HAL_TIMEx_CommutCallback>:
 8002690:	4770      	bx	lr

08002692 <HAL_TIMEx_BreakCallback>:
 8002692:	4770      	bx	lr

08002694 <HAL_TIMEx_Break2Callback>:
 8002694:	4770      	bx	lr

08002696 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002696:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002698:	e852 3f00 	ldrex	r3, [r2]
 800269c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026a0:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 80026a4:	6802      	ldr	r2, [r0, #0]
 80026a6:	2900      	cmp	r1, #0
 80026a8:	d1f5      	bne.n	8002696 <UART_EndRxTransfer>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026aa:	f102 0308 	add.w	r3, r2, #8
 80026ae:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026b2:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026b6:	f102 0c08 	add.w	ip, r2, #8
 80026ba:	e84c 3100 	strex	r1, r3, [ip]
 80026be:	2900      	cmp	r1, #0
 80026c0:	d1f3      	bne.n	80026aa <UART_EndRxTransfer+0x14>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80026c2:	6e03      	ldr	r3, [r0, #96]	; 0x60
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	d107      	bne.n	80026d8 <UART_EndRxTransfer+0x42>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026c8:	e852 3f00 	ldrex	r3, [r2]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80026cc:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026d0:	e842 3100 	strex	r1, r3, [r2]
 80026d4:	2900      	cmp	r1, #0
 80026d6:	d1f7      	bne.n	80026c8 <UART_EndRxTransfer+0x32>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80026d8:	2320      	movs	r3, #32
 80026da:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80026de:	2300      	movs	r3, #0
 80026e0:	6603      	str	r3, [r0, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80026e2:	6683      	str	r3, [r0, #104]	; 0x68
}
 80026e4:	4770      	bx	lr

080026e6 <HAL_UART_TxCpltCallback>:
 80026e6:	4770      	bx	lr

080026e8 <HAL_UART_ErrorCallback>:
 80026e8:	4770      	bx	lr

080026ea <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80026ea:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80026ec:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 80026ee:	2300      	movs	r3, #0
 80026f0:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80026f4:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80026f8:	f7ff fff6 	bl	80026e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80026fc:	bd08      	pop	{r3, pc}

080026fe <HAL_UARTEx_RxEventCallback>:
}
 80026fe:	4770      	bx	lr

08002700 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002700:	6803      	ldr	r3, [r0, #0]
{
 8002702:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002704:	69da      	ldr	r2, [r3, #28]
  if (errorflags == 0U)
 8002706:	f640 060f 	movw	r6, #2063	; 0x80f
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800270a:	6819      	ldr	r1, [r3, #0]
{
 800270c:	4604      	mov	r4, r0
  if (errorflags == 0U)
 800270e:	4232      	tst	r2, r6
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002710:	689d      	ldr	r5, [r3, #8]
  if (errorflags == 0U)
 8002712:	d10b      	bne.n	800272c <HAL_UART_IRQHandler+0x2c>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002714:	0696      	lsls	r6, r2, #26
 8002716:	f140 8088 	bpl.w	800282a <HAL_UART_IRQHandler+0x12a>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800271a:	068d      	lsls	r5, r1, #26
 800271c:	f140 8085 	bpl.w	800282a <HAL_UART_IRQHandler+0x12a>
      if (huart->RxISR != NULL)
 8002720:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8002722:	2b00      	cmp	r3, #0
 8002724:	d07b      	beq.n	800281e <HAL_UART_IRQHandler+0x11e>
}
 8002726:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      huart->TxISR(huart);
 800272a:	4718      	bx	r3
      && (((cr3its & USART_CR3_EIE) != 0U)
 800272c:	f005 0001 	and.w	r0, r5, #1
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002730:	4d93      	ldr	r5, [pc, #588]	; (8002980 <HAL_UART_IRQHandler+0x280>)
 8002732:	400d      	ands	r5, r1
 8002734:	4305      	orrs	r5, r0
 8002736:	d078      	beq.n	800282a <HAL_UART_IRQHandler+0x12a>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002738:	07d6      	lsls	r6, r2, #31
 800273a:	d509      	bpl.n	8002750 <HAL_UART_IRQHandler+0x50>
 800273c:	05cd      	lsls	r5, r1, #23
 800273e:	d507      	bpl.n	8002750 <HAL_UART_IRQHandler+0x50>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002740:	2501      	movs	r5, #1
 8002742:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002744:	f8d4 5084 	ldr.w	r5, [r4, #132]	; 0x84
 8002748:	f045 0501 	orr.w	r5, r5, #1
 800274c:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002750:	0796      	lsls	r6, r2, #30
 8002752:	d508      	bpl.n	8002766 <HAL_UART_IRQHandler+0x66>
 8002754:	b138      	cbz	r0, 8002766 <HAL_UART_IRQHandler+0x66>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002756:	2502      	movs	r5, #2
 8002758:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800275a:	f8d4 5084 	ldr.w	r5, [r4, #132]	; 0x84
 800275e:	f045 0504 	orr.w	r5, r5, #4
 8002762:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002766:	0755      	lsls	r5, r2, #29
 8002768:	d508      	bpl.n	800277c <HAL_UART_IRQHandler+0x7c>
 800276a:	b138      	cbz	r0, 800277c <HAL_UART_IRQHandler+0x7c>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800276c:	2504      	movs	r5, #4
 800276e:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002770:	f8d4 5084 	ldr.w	r5, [r4, #132]	; 0x84
 8002774:	f045 0502 	orr.w	r5, r5, #2
 8002778:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
    if (((isrflags & USART_ISR_ORE) != 0U)
 800277c:	0716      	lsls	r6, r2, #28
 800277e:	d50b      	bpl.n	8002798 <HAL_UART_IRQHandler+0x98>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002780:	f001 0520 	and.w	r5, r1, #32
 8002784:	4328      	orrs	r0, r5
 8002786:	d007      	beq.n	8002798 <HAL_UART_IRQHandler+0x98>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002788:	2008      	movs	r0, #8
 800278a:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800278c:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8002790:	f040 0008 	orr.w	r0, r0, #8
 8002794:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002798:	0515      	lsls	r5, r2, #20
 800279a:	d50a      	bpl.n	80027b2 <HAL_UART_IRQHandler+0xb2>
 800279c:	0148      	lsls	r0, r1, #5
 800279e:	d508      	bpl.n	80027b2 <HAL_UART_IRQHandler+0xb2>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80027a0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80027a4:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80027a6:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 80027aa:	f043 0320 	orr.w	r3, r3, #32
 80027ae:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80027b2:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d031      	beq.n	800281e <HAL_UART_IRQHandler+0x11e>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80027ba:	0692      	lsls	r2, r2, #26
 80027bc:	d505      	bpl.n	80027ca <HAL_UART_IRQHandler+0xca>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80027be:	068b      	lsls	r3, r1, #26
 80027c0:	d503      	bpl.n	80027ca <HAL_UART_IRQHandler+0xca>
        if (huart->RxISR != NULL)
 80027c2:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80027c4:	b10b      	cbz	r3, 80027ca <HAL_UART_IRQHandler+0xca>
          huart->RxISR(huart);
 80027c6:	4620      	mov	r0, r4
 80027c8:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80027ca:	6823      	ldr	r3, [r4, #0]
        UART_EndRxTransfer(huart);
 80027cc:	4620      	mov	r0, r4
      errorcode = huart->ErrorCode;
 80027ce:	f8d4 5084 	ldr.w	r5, [r4, #132]	; 0x84
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80027d2:	689b      	ldr	r3, [r3, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80027d4:	f005 0528 	and.w	r5, r5, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80027d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027dc:	431d      	orrs	r5, r3
 80027de:	d01f      	beq.n	8002820 <HAL_UART_IRQHandler+0x120>
        UART_EndRxTransfer(huart);
 80027e0:	f7ff ff59 	bl	8002696 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027e4:	6822      	ldr	r2, [r4, #0]
 80027e6:	6893      	ldr	r3, [r2, #8]
 80027e8:	065e      	lsls	r6, r3, #25
 80027ea:	d515      	bpl.n	8002818 <HAL_UART_IRQHandler+0x118>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027ec:	f102 0308 	add.w	r3, r2, #8
 80027f0:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80027f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027f8:	f102 0008 	add.w	r0, r2, #8
 80027fc:	e840 3100 	strex	r1, r3, [r0]
 8002800:	2900      	cmp	r1, #0
 8002802:	d1f3      	bne.n	80027ec <HAL_UART_IRQHandler+0xec>
          if (huart->hdmarx != NULL)
 8002804:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8002806:	b138      	cbz	r0, 8002818 <HAL_UART_IRQHandler+0x118>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002808:	4b5e      	ldr	r3, [pc, #376]	; (8002984 <HAL_UART_IRQHandler+0x284>)
 800280a:	6503      	str	r3, [r0, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800280c:	f7fe ff0e 	bl	800162c <HAL_DMA_Abort_IT>
 8002810:	b128      	cbz	r0, 800281e <HAL_UART_IRQHandler+0x11e>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002812:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8002814:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8002816:	e786      	b.n	8002726 <HAL_UART_IRQHandler+0x26>
            HAL_UART_ErrorCallback(huart);
 8002818:	4620      	mov	r0, r4
 800281a:	f7ff ff65 	bl	80026e8 <HAL_UART_ErrorCallback>
}
 800281e:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8002820:	f7ff ff62 	bl	80026e8 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002824:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
 8002828:	e7f9      	b.n	800281e <HAL_UART_IRQHandler+0x11e>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800282a:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800282c:	2801      	cmp	r0, #1
 800282e:	f040 8088 	bne.w	8002942 <HAL_UART_IRQHandler+0x242>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002832:	06d5      	lsls	r5, r2, #27
 8002834:	f140 8085 	bpl.w	8002942 <HAL_UART_IRQHandler+0x242>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002838:	06c8      	lsls	r0, r1, #27
 800283a:	f140 8082 	bpl.w	8002942 <HAL_UART_IRQHandler+0x242>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800283e:	2210      	movs	r2, #16
 8002840:	621a      	str	r2, [r3, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002842:	689a      	ldr	r2, [r3, #8]
 8002844:	0652      	lsls	r2, r2, #25
 8002846:	d54a      	bpl.n	80028de <HAL_UART_IRQHandler+0x1de>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002848:	6f61      	ldr	r1, [r4, #116]	; 0x74
 800284a:	680a      	ldr	r2, [r1, #0]
 800284c:	6852      	ldr	r2, [r2, #4]
 800284e:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 8002850:	2a00      	cmp	r2, #0
 8002852:	d0e4      	beq.n	800281e <HAL_UART_IRQHandler+0x11e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002854:	f8b4 0058 	ldrh.w	r0, [r4, #88]	; 0x58
 8002858:	4290      	cmp	r0, r2
 800285a:	d9e0      	bls.n	800281e <HAL_UART_IRQHandler+0x11e>
        huart->RxXferCount = nb_remaining_rx_data;
 800285c:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002860:	69ca      	ldr	r2, [r1, #28]
 8002862:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8002866:	d02e      	beq.n	80028c6 <HAL_UART_IRQHandler+0x1c6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002868:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800286c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002870:	e843 2100 	strex	r1, r2, [r3]
 8002874:	2900      	cmp	r1, #0
 8002876:	d1f7      	bne.n	8002868 <HAL_UART_IRQHandler+0x168>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002878:	f103 0208 	add.w	r2, r3, #8
 800287c:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002880:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002884:	f103 0008 	add.w	r0, r3, #8
 8002888:	e840 2100 	strex	r1, r2, [r0]
 800288c:	2900      	cmp	r1, #0
 800288e:	d1f3      	bne.n	8002878 <HAL_UART_IRQHandler+0x178>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002890:	f103 0208 	add.w	r2, r3, #8
 8002894:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002898:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800289c:	f103 0008 	add.w	r0, r3, #8
 80028a0:	e840 2100 	strex	r1, r2, [r0]
 80028a4:	2900      	cmp	r1, #0
 80028a6:	d1f3      	bne.n	8002890 <HAL_UART_IRQHandler+0x190>
          huart->RxState = HAL_UART_STATE_READY;
 80028a8:	2220      	movs	r2, #32
 80028aa:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028ae:	6621      	str	r1, [r4, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028b0:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80028b4:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028b8:	e843 2100 	strex	r1, r2, [r3]
 80028bc:	2900      	cmp	r1, #0
 80028be:	d1f7      	bne.n	80028b0 <HAL_UART_IRQHandler+0x1b0>
          (void)HAL_DMA_Abort(huart->hdmarx);
 80028c0:	6f60      	ldr	r0, [r4, #116]	; 0x74
 80028c2:	f7fe fe6f 	bl	80015a4 <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80028c6:	2302      	movs	r3, #2
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80028c8:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80028cc:	6663      	str	r3, [r4, #100]	; 0x64
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80028ce:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 80028d2:	1ac9      	subs	r1, r1, r3
 80028d4:	b289      	uxth	r1, r1
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80028d6:	4620      	mov	r0, r4
 80028d8:	f7ff ff11 	bl	80026fe <HAL_UARTEx_RxEventCallback>
 80028dc:	e79f      	b.n	800281e <HAL_UART_IRQHandler+0x11e>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80028de:	f8b4 105a 	ldrh.w	r1, [r4, #90]	; 0x5a
 80028e2:	b28a      	uxth	r2, r1
      if ((huart->RxXferCount > 0U)
 80028e4:	f8b4 105a 	ldrh.w	r1, [r4, #90]	; 0x5a
 80028e8:	b289      	uxth	r1, r1
 80028ea:	2900      	cmp	r1, #0
 80028ec:	d097      	beq.n	800281e <HAL_UART_IRQHandler+0x11e>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80028ee:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
 80028f2:	1a89      	subs	r1, r1, r2
 80028f4:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 80028f6:	2900      	cmp	r1, #0
 80028f8:	d091      	beq.n	800281e <HAL_UART_IRQHandler+0x11e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028fa:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80028fe:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002902:	e843 2000 	strex	r0, r2, [r3]
 8002906:	2800      	cmp	r0, #0
 8002908:	d1f7      	bne.n	80028fa <HAL_UART_IRQHandler+0x1fa>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800290a:	f103 0208 	add.w	r2, r3, #8
 800290e:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002912:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002916:	f103 0508 	add.w	r5, r3, #8
 800291a:	e845 2000 	strex	r0, r2, [r5]
 800291e:	2800      	cmp	r0, #0
 8002920:	d1f3      	bne.n	800290a <HAL_UART_IRQHandler+0x20a>
        huart->RxState = HAL_UART_STATE_READY;
 8002922:	2220      	movs	r2, #32
        huart->RxISR = NULL;
 8002924:	66a0      	str	r0, [r4, #104]	; 0x68
        huart->RxState = HAL_UART_STATE_READY;
 8002926:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800292a:	6620      	str	r0, [r4, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800292c:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002930:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002934:	e843 2000 	strex	r0, r2, [r3]
 8002938:	2800      	cmp	r0, #0
 800293a:	d1f7      	bne.n	800292c <HAL_UART_IRQHandler+0x22c>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800293c:	2302      	movs	r3, #2
 800293e:	6663      	str	r3, [r4, #100]	; 0x64
 8002940:	e7c9      	b.n	80028d6 <HAL_UART_IRQHandler+0x1d6>
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002942:	0616      	lsls	r6, r2, #24
 8002944:	d507      	bpl.n	8002956 <HAL_UART_IRQHandler+0x256>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002946:	060d      	lsls	r5, r1, #24
 8002948:	d505      	bpl.n	8002956 <HAL_UART_IRQHandler+0x256>
    if (huart->TxISR != NULL)
 800294a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800294c:	2b00      	cmp	r3, #0
 800294e:	f43f af66 	beq.w	800281e <HAL_UART_IRQHandler+0x11e>
      huart->TxISR(huart);
 8002952:	4620      	mov	r0, r4
 8002954:	e6e7      	b.n	8002726 <HAL_UART_IRQHandler+0x26>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002956:	0650      	lsls	r0, r2, #25
 8002958:	f57f af61 	bpl.w	800281e <HAL_UART_IRQHandler+0x11e>
 800295c:	064a      	lsls	r2, r1, #25
 800295e:	f57f af5e 	bpl.w	800281e <HAL_UART_IRQHandler+0x11e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002962:	e853 2f00 	ldrex	r2, [r3]
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002966:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800296a:	e843 2100 	strex	r1, r2, [r3]
 800296e:	2900      	cmp	r1, #0
 8002970:	d1f7      	bne.n	8002962 <HAL_UART_IRQHandler+0x262>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002972:	2320      	movs	r3, #32
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002974:	4620      	mov	r0, r4
  huart->TxISR = NULL;
 8002976:	66e1      	str	r1, [r4, #108]	; 0x6c
  huart->gState = HAL_UART_STATE_READY;
 8002978:	67e3      	str	r3, [r4, #124]	; 0x7c
  HAL_UART_TxCpltCallback(huart);
 800297a:	f7ff feb4 	bl	80026e6 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800297e:	e74e      	b.n	800281e <HAL_UART_IRQHandler+0x11e>
 8002980:	04000120 	.word	0x04000120
 8002984:	080026eb 	.word	0x080026eb

08002988 <UART_SetConfig>:
{
 8002988:	b538      	push	{r3, r4, r5, lr}
 800298a:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800298c:	69c0      	ldr	r0, [r0, #28]
 800298e:	6921      	ldr	r1, [r4, #16]
 8002990:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002992:	6823      	ldr	r3, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002994:	430a      	orrs	r2, r1
 8002996:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002998:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800299a:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800299c:	498e      	ldr	r1, [pc, #568]	; (8002bd8 <UART_SetConfig+0x250>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800299e:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80029a0:	4029      	ands	r1, r5
  tmpreg |= huart->Init.OneBitSampling;
 80029a2:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80029a4:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80029a6:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80029a8:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80029aa:	685a      	ldr	r2, [r3, #4]
 80029ac:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80029b0:	430a      	orrs	r2, r1
 80029b2:	605a      	str	r2, [r3, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80029b4:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80029b6:	6899      	ldr	r1, [r3, #8]
  tmpreg |= huart->Init.OneBitSampling;
 80029b8:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80029ba:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 80029be:	430a      	orrs	r2, r1
 80029c0:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 80029c2:	4a86      	ldr	r2, [pc, #536]	; (8002bdc <UART_SetConfig+0x254>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d117      	bne.n	80029f8 <UART_SetConfig+0x70>
 80029c8:	4b85      	ldr	r3, [pc, #532]	; (8002be0 <UART_SetConfig+0x258>)
 80029ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029ce:	f003 0303 	and.w	r3, r3, #3
 80029d2:	3b01      	subs	r3, #1
 80029d4:	2b02      	cmp	r3, #2
 80029d6:	f200 80e2 	bhi.w	8002b9e <UART_SetConfig+0x216>
 80029da:	4a82      	ldr	r2, [pc, #520]	; (8002be4 <UART_SetConfig+0x25c>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80029dc:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80029e0:	5cd3      	ldrb	r3, [r2, r3]
 80029e2:	f040 80b3 	bne.w	8002b4c <UART_SetConfig+0x1c4>
    switch (clocksource)
 80029e6:	2b08      	cmp	r3, #8
 80029e8:	d822      	bhi.n	8002a30 <UART_SetConfig+0xa8>
 80029ea:	e8df f003 	tbb	[pc, r3]
 80029ee:	db90      	.short	0xdb90
 80029f0:	21d52198 	.word	0x21d52198
 80029f4:	2121      	.short	0x2121
 80029f6:	99          	.byte	0x99
 80029f7:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 80029f8:	4a7b      	ldr	r2, [pc, #492]	; (8002be8 <UART_SetConfig+0x260>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d106      	bne.n	8002a0c <UART_SetConfig+0x84>
 80029fe:	4b78      	ldr	r3, [pc, #480]	; (8002be0 <UART_SetConfig+0x258>)
 8002a00:	4a7a      	ldr	r2, [pc, #488]	; (8002bec <UART_SetConfig+0x264>)
 8002a02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a06:	f003 030c 	and.w	r3, r3, #12
 8002a0a:	e7e7      	b.n	80029dc <UART_SetConfig+0x54>
 8002a0c:	4a78      	ldr	r2, [pc, #480]	; (8002bf0 <UART_SetConfig+0x268>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d118      	bne.n	8002a44 <UART_SetConfig+0xbc>
 8002a12:	4b73      	ldr	r3, [pc, #460]	; (8002be0 <UART_SetConfig+0x258>)
 8002a14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a18:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002a1c:	2b20      	cmp	r3, #32
 8002a1e:	f000 80b3 	beq.w	8002b88 <UART_SetConfig+0x200>
 8002a22:	d807      	bhi.n	8002a34 <UART_SetConfig+0xac>
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	f000 80c0 	beq.w	8002baa <UART_SetConfig+0x222>
 8002a2a:	2b10      	cmp	r3, #16
 8002a2c:	f000 80b1 	beq.w	8002b92 <UART_SetConfig+0x20a>
    switch (clocksource)
 8002a30:	2001      	movs	r0, #1
 8002a32:	e070      	b.n	8002b16 <UART_SetConfig+0x18e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002a34:	2b30      	cmp	r3, #48	; 0x30
 8002a36:	d1fb      	bne.n	8002a30 <UART_SetConfig+0xa8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a38:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8002a3c:	d070      	beq.n	8002b20 <UART_SetConfig+0x198>
        pclk = (uint32_t) LSE_VALUE;
 8002a3e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002a42:	e0b9      	b.n	8002bb8 <UART_SetConfig+0x230>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002a44:	4a6b      	ldr	r2, [pc, #428]	; (8002bf4 <UART_SetConfig+0x26c>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d10f      	bne.n	8002a6a <UART_SetConfig+0xe2>
 8002a4a:	4b65      	ldr	r3, [pc, #404]	; (8002be0 <UART_SetConfig+0x258>)
 8002a4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a50:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002a54:	2b80      	cmp	r3, #128	; 0x80
 8002a56:	f000 8097 	beq.w	8002b88 <UART_SetConfig+0x200>
 8002a5a:	d804      	bhi.n	8002a66 <UART_SetConfig+0xde>
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	f000 80a4 	beq.w	8002baa <UART_SetConfig+0x222>
 8002a62:	2b40      	cmp	r3, #64	; 0x40
 8002a64:	e7e2      	b.n	8002a2c <UART_SetConfig+0xa4>
 8002a66:	2bc0      	cmp	r3, #192	; 0xc0
 8002a68:	e7e5      	b.n	8002a36 <UART_SetConfig+0xae>
 8002a6a:	4a63      	ldr	r2, [pc, #396]	; (8002bf8 <UART_SetConfig+0x270>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d112      	bne.n	8002a96 <UART_SetConfig+0x10e>
 8002a70:	4b5b      	ldr	r3, [pc, #364]	; (8002be0 <UART_SetConfig+0x258>)
 8002a72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a7a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a7e:	f000 8083 	beq.w	8002b88 <UART_SetConfig+0x200>
 8002a82:	d805      	bhi.n	8002a90 <UART_SetConfig+0x108>
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	f000 8090 	beq.w	8002baa <UART_SetConfig+0x222>
 8002a8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a8e:	e7cd      	b.n	8002a2c <UART_SetConfig+0xa4>
 8002a90:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002a94:	e7cf      	b.n	8002a36 <UART_SetConfig+0xae>
 8002a96:	4a59      	ldr	r2, [pc, #356]	; (8002bfc <UART_SetConfig+0x274>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d110      	bne.n	8002abe <UART_SetConfig+0x136>
 8002a9c:	4b50      	ldr	r3, [pc, #320]	; (8002be0 <UART_SetConfig+0x258>)
 8002a9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aa2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002aa6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002aaa:	d06d      	beq.n	8002b88 <UART_SetConfig+0x200>
 8002aac:	d804      	bhi.n	8002ab8 <UART_SetConfig+0x130>
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d075      	beq.n	8002b9e <UART_SetConfig+0x216>
 8002ab2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ab6:	e7b9      	b.n	8002a2c <UART_SetConfig+0xa4>
 8002ab8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002abc:	e7bb      	b.n	8002a36 <UART_SetConfig+0xae>
 8002abe:	4a50      	ldr	r2, [pc, #320]	; (8002c00 <UART_SetConfig+0x278>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d110      	bne.n	8002ae6 <UART_SetConfig+0x15e>
 8002ac4:	4b46      	ldr	r3, [pc, #280]	; (8002be0 <UART_SetConfig+0x258>)
 8002ac6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aca:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002ace:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ad2:	d059      	beq.n	8002b88 <UART_SetConfig+0x200>
 8002ad4:	d804      	bhi.n	8002ae0 <UART_SetConfig+0x158>
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d067      	beq.n	8002baa <UART_SetConfig+0x222>
 8002ada:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ade:	e7a5      	b.n	8002a2c <UART_SetConfig+0xa4>
 8002ae0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002ae4:	e7a7      	b.n	8002a36 <UART_SetConfig+0xae>
 8002ae6:	4a47      	ldr	r2, [pc, #284]	; (8002c04 <UART_SetConfig+0x27c>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d1a1      	bne.n	8002a30 <UART_SetConfig+0xa8>
 8002aec:	4b3c      	ldr	r3, [pc, #240]	; (8002be0 <UART_SetConfig+0x258>)
 8002aee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002af2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002af6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002afa:	d045      	beq.n	8002b88 <UART_SetConfig+0x200>
 8002afc:	d804      	bhi.n	8002b08 <UART_SetConfig+0x180>
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d053      	beq.n	8002baa <UART_SetConfig+0x222>
 8002b02:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002b06:	e791      	b.n	8002a2c <UART_SetConfig+0xa4>
 8002b08:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002b0c:	e793      	b.n	8002a36 <UART_SetConfig+0xae>
        pclk = HAL_RCC_GetPCLK1Freq();
 8002b0e:	f7ff f947 	bl	8001da0 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8002b12:	b928      	cbnz	r0, 8002b20 <UART_SetConfig+0x198>
 8002b14:	2000      	movs	r0, #0
  huart->RxISR = NULL;
 8002b16:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 8002b18:	e9c4 331a 	strd	r3, r3, [r4, #104]	; 0x68
}
 8002b1c:	bd38      	pop	{r3, r4, r5, pc}
        pclk = (uint32_t) HSI_VALUE;
 8002b1e:	483a      	ldr	r0, [pc, #232]	; (8002c08 <UART_SetConfig+0x280>)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002b20:	6862      	ldr	r2, [r4, #4]
 8002b22:	0853      	lsrs	r3, r2, #1
 8002b24:	eb03 0040 	add.w	r0, r3, r0, lsl #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002b28:	f64f 73ef 	movw	r3, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002b2c:	fbb0 f0f2 	udiv	r0, r0, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002b30:	f1a0 0210 	sub.w	r2, r0, #16
 8002b34:	429a      	cmp	r2, r3
 8002b36:	f63f af7b 	bhi.w	8002a30 <UART_SetConfig+0xa8>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002b3a:	f020 030f 	bic.w	r3, r0, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002b3e:	f3c0 0042 	ubfx	r0, r0, #1, #3
        huart->Instance->BRR = brrtemp;
 8002b42:	6822      	ldr	r2, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002b44:	b29b      	uxth	r3, r3
        huart->Instance->BRR = brrtemp;
 8002b46:	4318      	orrs	r0, r3
 8002b48:	60d0      	str	r0, [r2, #12]
 8002b4a:	e7e3      	b.n	8002b14 <UART_SetConfig+0x18c>
    switch (clocksource)
 8002b4c:	2b08      	cmp	r3, #8
 8002b4e:	f63f af6f 	bhi.w	8002a30 <UART_SetConfig+0xa8>
 8002b52:	a201      	add	r2, pc, #4	; (adr r2, 8002b58 <UART_SetConfig+0x1d0>)
 8002b54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b58:	08002bb1 	.word	0x08002bb1
 8002b5c:	08002b7d 	.word	0x08002b7d
 8002b60:	08002b8f 	.word	0x08002b8f
 8002b64:	08002a31 	.word	0x08002a31
 8002b68:	08002b83 	.word	0x08002b83
 8002b6c:	08002a31 	.word	0x08002a31
 8002b70:	08002a31 	.word	0x08002a31
 8002b74:	08002a31 	.word	0x08002a31
 8002b78:	08002a3f 	.word	0x08002a3f
        pclk = HAL_RCC_GetPCLK2Freq();
 8002b7c:	f7ff f920 	bl	8001dc0 <HAL_RCC_GetPCLK2Freq>
        break;
 8002b80:	e018      	b.n	8002bb4 <UART_SetConfig+0x22c>
        pclk = HAL_RCC_GetSysClockFreq();
 8002b82:	f7ff f83f 	bl	8001c04 <HAL_RCC_GetSysClockFreq>
        break;
 8002b86:	e015      	b.n	8002bb4 <UART_SetConfig+0x22c>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b88:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8002b8c:	d0c7      	beq.n	8002b1e <UART_SetConfig+0x196>
        pclk = (uint32_t) HSI_VALUE;
 8002b8e:	481e      	ldr	r0, [pc, #120]	; (8002c08 <UART_SetConfig+0x280>)
 8002b90:	e012      	b.n	8002bb8 <UART_SetConfig+0x230>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b92:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8002b96:	d1f4      	bne.n	8002b82 <UART_SetConfig+0x1fa>
        pclk = HAL_RCC_GetSysClockFreq();
 8002b98:	f7ff f834 	bl	8001c04 <HAL_RCC_GetSysClockFreq>
        break;
 8002b9c:	e7b9      	b.n	8002b12 <UART_SetConfig+0x18a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b9e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8002ba2:	d1eb      	bne.n	8002b7c <UART_SetConfig+0x1f4>
        pclk = HAL_RCC_GetPCLK2Freq();
 8002ba4:	f7ff f90c 	bl	8001dc0 <HAL_RCC_GetPCLK2Freq>
        break;
 8002ba8:	e7b3      	b.n	8002b12 <UART_SetConfig+0x18a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002baa:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8002bae:	d0ae      	beq.n	8002b0e <UART_SetConfig+0x186>
        pclk = HAL_RCC_GetPCLK1Freq();
 8002bb0:	f7ff f8f6 	bl	8001da0 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8002bb4:	2800      	cmp	r0, #0
 8002bb6:	d0ad      	beq.n	8002b14 <UART_SetConfig+0x18c>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002bb8:	6862      	ldr	r2, [r4, #4]
 8002bba:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8002bbe:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002bc2:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8002bc6:	f1a3 0110 	sub.w	r1, r3, #16
 8002bca:	4291      	cmp	r1, r2
 8002bcc:	f63f af30 	bhi.w	8002a30 <UART_SetConfig+0xa8>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002bd0:	6822      	ldr	r2, [r4, #0]
 8002bd2:	60d3      	str	r3, [r2, #12]
 8002bd4:	e79e      	b.n	8002b14 <UART_SetConfig+0x18c>
 8002bd6:	bf00      	nop
 8002bd8:	efff69f3 	.word	0xefff69f3
 8002bdc:	40011000 	.word	0x40011000
 8002be0:	40023800 	.word	0x40023800
 8002be4:	08006655 	.word	0x08006655
 8002be8:	40004400 	.word	0x40004400
 8002bec:	08006658 	.word	0x08006658
 8002bf0:	40004800 	.word	0x40004800
 8002bf4:	40004c00 	.word	0x40004c00
 8002bf8:	40005000 	.word	0x40005000
 8002bfc:	40011400 	.word	0x40011400
 8002c00:	40007800 	.word	0x40007800
 8002c04:	40007c00 	.word	0x40007c00
 8002c08:	00f42400 	.word	0x00f42400

08002c0c <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002c0c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002c0e:	07da      	lsls	r2, r3, #31
{
 8002c10:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002c12:	d506      	bpl.n	8002c22 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002c14:	6801      	ldr	r1, [r0, #0]
 8002c16:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8002c18:	684a      	ldr	r2, [r1, #4]
 8002c1a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8002c1e:	4322      	orrs	r2, r4
 8002c20:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002c22:	079c      	lsls	r4, r3, #30
 8002c24:	d506      	bpl.n	8002c34 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002c26:	6801      	ldr	r1, [r0, #0]
 8002c28:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8002c2a:	684a      	ldr	r2, [r1, #4]
 8002c2c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002c30:	4322      	orrs	r2, r4
 8002c32:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002c34:	0759      	lsls	r1, r3, #29
 8002c36:	d506      	bpl.n	8002c46 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002c38:	6801      	ldr	r1, [r0, #0]
 8002c3a:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8002c3c:	684a      	ldr	r2, [r1, #4]
 8002c3e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002c42:	4322      	orrs	r2, r4
 8002c44:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002c46:	071a      	lsls	r2, r3, #28
 8002c48:	d506      	bpl.n	8002c58 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002c4a:	6801      	ldr	r1, [r0, #0]
 8002c4c:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8002c4e:	684a      	ldr	r2, [r1, #4]
 8002c50:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c54:	4322      	orrs	r2, r4
 8002c56:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002c58:	06dc      	lsls	r4, r3, #27
 8002c5a:	d506      	bpl.n	8002c6a <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002c5c:	6801      	ldr	r1, [r0, #0]
 8002c5e:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8002c60:	688a      	ldr	r2, [r1, #8]
 8002c62:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002c66:	4322      	orrs	r2, r4
 8002c68:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002c6a:	0699      	lsls	r1, r3, #26
 8002c6c:	d506      	bpl.n	8002c7c <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002c6e:	6801      	ldr	r1, [r0, #0]
 8002c70:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8002c72:	688a      	ldr	r2, [r1, #8]
 8002c74:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002c78:	4322      	orrs	r2, r4
 8002c7a:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002c7c:	065a      	lsls	r2, r3, #25
 8002c7e:	d510      	bpl.n	8002ca2 <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002c80:	6801      	ldr	r1, [r0, #0]
 8002c82:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8002c84:	684a      	ldr	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002c86:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002c8a:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8002c8e:	ea42 0204 	orr.w	r2, r2, r4
 8002c92:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002c94:	d105      	bne.n	8002ca2 <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002c96:	684a      	ldr	r2, [r1, #4]
 8002c98:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8002c9a:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8002c9e:	4322      	orrs	r2, r4
 8002ca0:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002ca2:	061b      	lsls	r3, r3, #24
 8002ca4:	d506      	bpl.n	8002cb4 <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002ca6:	6802      	ldr	r2, [r0, #0]
 8002ca8:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8002caa:	6853      	ldr	r3, [r2, #4]
 8002cac:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8002cb0:	430b      	orrs	r3, r1
 8002cb2:	6053      	str	r3, [r2, #4]
}
 8002cb4:	bd10      	pop	{r4, pc}

08002cb6 <UART_WaitOnFlagUntilTimeout>:
{
 8002cb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002cba:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8002cbe:	4604      	mov	r4, r0
 8002cc0:	460e      	mov	r6, r1
 8002cc2:	4615      	mov	r5, r2
 8002cc4:	461f      	mov	r7, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002cc6:	6822      	ldr	r2, [r4, #0]
 8002cc8:	69d3      	ldr	r3, [r2, #28]
 8002cca:	ea36 0303 	bics.w	r3, r6, r3
 8002cce:	bf0c      	ite	eq
 8002cd0:	2301      	moveq	r3, #1
 8002cd2:	2300      	movne	r3, #0
 8002cd4:	42ab      	cmp	r3, r5
 8002cd6:	d001      	beq.n	8002cdc <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 8002cd8:	2000      	movs	r0, #0
 8002cda:	e026      	b.n	8002d2a <UART_WaitOnFlagUntilTimeout+0x74>
    if (Timeout != HAL_MAX_DELAY)
 8002cdc:	f1b8 3fff 	cmp.w	r8, #4294967295
 8002ce0:	d0f2      	beq.n	8002cc8 <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ce2:	f7fe fb83 	bl	80013ec <HAL_GetTick>
 8002ce6:	1bc0      	subs	r0, r0, r7
 8002ce8:	4540      	cmp	r0, r8
 8002cea:	6820      	ldr	r0, [r4, #0]
 8002cec:	d802      	bhi.n	8002cf4 <UART_WaitOnFlagUntilTimeout+0x3e>
 8002cee:	f1b8 0f00 	cmp.w	r8, #0
 8002cf2:	d11c      	bne.n	8002d2e <UART_WaitOnFlagUntilTimeout+0x78>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cf4:	e850 3f00 	ldrex	r3, [r0]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002cf8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cfc:	e840 3200 	strex	r2, r3, [r0]
 8002d00:	2a00      	cmp	r2, #0
 8002d02:	d1f7      	bne.n	8002cf4 <UART_WaitOnFlagUntilTimeout+0x3e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d04:	f100 0308 	add.w	r3, r0, #8
 8002d08:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d0c:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d10:	f100 0108 	add.w	r1, r0, #8
 8002d14:	e841 3200 	strex	r2, r3, [r1]
 8002d18:	2a00      	cmp	r2, #0
 8002d1a:	d1f3      	bne.n	8002d04 <UART_WaitOnFlagUntilTimeout+0x4e>
        huart->gState = HAL_UART_STATE_READY;
 8002d1c:	2320      	movs	r3, #32
 8002d1e:	67e3      	str	r3, [r4, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8002d20:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
          return HAL_TIMEOUT;
 8002d24:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 8002d26:	f884 2078 	strb.w	r2, [r4, #120]	; 0x78
}
 8002d2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002d2e:	6803      	ldr	r3, [r0, #0]
 8002d30:	075a      	lsls	r2, r3, #29
 8002d32:	d5c8      	bpl.n	8002cc6 <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002d34:	69c3      	ldr	r3, [r0, #28]
 8002d36:	051b      	lsls	r3, r3, #20
 8002d38:	d5c5      	bpl.n	8002cc6 <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002d3a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002d3e:	6203      	str	r3, [r0, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d40:	e850 3f00 	ldrex	r3, [r0]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002d44:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d48:	e840 3200 	strex	r2, r3, [r0]
 8002d4c:	2a00      	cmp	r2, #0
 8002d4e:	d1f7      	bne.n	8002d40 <UART_WaitOnFlagUntilTimeout+0x8a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d50:	f100 0308 	add.w	r3, r0, #8
 8002d54:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d58:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d5c:	f100 0108 	add.w	r1, r0, #8
 8002d60:	e841 3200 	strex	r2, r3, [r1]
 8002d64:	2a00      	cmp	r2, #0
 8002d66:	d1f3      	bne.n	8002d50 <UART_WaitOnFlagUntilTimeout+0x9a>
          huart->gState = HAL_UART_STATE_READY;
 8002d68:	2320      	movs	r3, #32
 8002d6a:	67e3      	str	r3, [r4, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8002d6c:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002d70:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 8002d74:	e7d6      	b.n	8002d24 <UART_WaitOnFlagUntilTimeout+0x6e>

08002d76 <HAL_UART_Transmit>:
{
 8002d76:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8002d7a:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8002d7c:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
{
 8002d7e:	4604      	mov	r4, r0
 8002d80:	460e      	mov	r6, r1
  if (huart->gState == HAL_UART_STATE_READY)
 8002d82:	2b20      	cmp	r3, #32
{
 8002d84:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8002d86:	d142      	bne.n	8002e0e <HAL_UART_Transmit+0x98>
    if ((pData == NULL) || (Size == 0U))
 8002d88:	2900      	cmp	r1, #0
 8002d8a:	d042      	beq.n	8002e12 <HAL_UART_Transmit+0x9c>
 8002d8c:	2a00      	cmp	r2, #0
 8002d8e:	d040      	beq.n	8002e12 <HAL_UART_Transmit+0x9c>
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d90:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d92:	2500      	movs	r5, #0
 8002d94:	f8c0 5084 	str.w	r5, [r0, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d98:	67c3      	str	r3, [r0, #124]	; 0x7c
    tickstart = HAL_GetTick();
 8002d9a:	f7fe fb27 	bl	80013ec <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d9e:	68a2      	ldr	r2, [r4, #8]
    tickstart = HAL_GetTick();
 8002da0:	4603      	mov	r3, r0
    huart->TxXferSize  = Size;
 8002da2:	f8a4 7050 	strh.w	r7, [r4, #80]	; 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002da6:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
    huart->TxXferCount = Size;
 8002daa:	f8a4 7052 	strh.w	r7, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002dae:	d103      	bne.n	8002db8 <HAL_UART_Transmit+0x42>
 8002db0:	6922      	ldr	r2, [r4, #16]
 8002db2:	b90a      	cbnz	r2, 8002db8 <HAL_UART_Transmit+0x42>
 8002db4:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 8002db6:	4616      	mov	r6, r2
    while (huart->TxXferCount > 0U)
 8002db8:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002dbc:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
 8002dc0:	b292      	uxth	r2, r2
 8002dc2:	b93a      	cbnz	r2, 8002dd4 <HAL_UART_Transmit+0x5e>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002dc4:	2140      	movs	r1, #64	; 0x40
 8002dc6:	4620      	mov	r0, r4
 8002dc8:	f7ff ff75 	bl	8002cb6 <UART_WaitOnFlagUntilTimeout>
 8002dcc:	b950      	cbnz	r0, 8002de4 <HAL_UART_Transmit+0x6e>
    huart->gState = HAL_UART_STATE_READY;
 8002dce:	2320      	movs	r3, #32
 8002dd0:	67e3      	str	r3, [r4, #124]	; 0x7c
    return HAL_OK;
 8002dd2:	e008      	b.n	8002de6 <HAL_UART_Transmit+0x70>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	2180      	movs	r1, #128	; 0x80
 8002dd8:	4620      	mov	r0, r4
 8002dda:	9303      	str	r3, [sp, #12]
 8002ddc:	f7ff ff6b 	bl	8002cb6 <UART_WaitOnFlagUntilTimeout>
 8002de0:	9b03      	ldr	r3, [sp, #12]
 8002de2:	b118      	cbz	r0, 8002dec <HAL_UART_Transmit+0x76>
        return HAL_TIMEOUT;
 8002de4:	2003      	movs	r0, #3
}
 8002de6:	b004      	add	sp, #16
 8002de8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002dec:	6821      	ldr	r1, [r4, #0]
      if (pdata8bits == NULL)
 8002dee:	b95e      	cbnz	r6, 8002e08 <HAL_UART_Transmit+0x92>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002df0:	f835 2b02 	ldrh.w	r2, [r5], #2
 8002df4:	f3c2 0208 	ubfx	r2, r2, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002df8:	628a      	str	r2, [r1, #40]	; 0x28
      huart->TxXferCount--;
 8002dfa:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 8002dfe:	3a01      	subs	r2, #1
 8002e00:	b292      	uxth	r2, r2
 8002e02:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 8002e06:	e7d7      	b.n	8002db8 <HAL_UART_Transmit+0x42>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002e08:	f816 2b01 	ldrb.w	r2, [r6], #1
 8002e0c:	e7f4      	b.n	8002df8 <HAL_UART_Transmit+0x82>
    return HAL_BUSY;
 8002e0e:	2002      	movs	r0, #2
 8002e10:	e7e9      	b.n	8002de6 <HAL_UART_Transmit+0x70>
      return  HAL_ERROR;
 8002e12:	2001      	movs	r0, #1
 8002e14:	e7e7      	b.n	8002de6 <HAL_UART_Transmit+0x70>

08002e16 <UART_CheckIdleState>:
{
 8002e16:	b537      	push	{r0, r1, r2, r4, r5, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e18:	2500      	movs	r5, #0
{
 8002e1a:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e1c:	f8c0 5084 	str.w	r5, [r0, #132]	; 0x84
  tickstart = HAL_GetTick();
 8002e20:	f7fe fae4 	bl	80013ec <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002e24:	6822      	ldr	r2, [r4, #0]
  tickstart = HAL_GetTick();
 8002e26:	4603      	mov	r3, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002e28:	6812      	ldr	r2, [r2, #0]
 8002e2a:	0712      	lsls	r2, r2, #28
 8002e2c:	d40a      	bmi.n	8002e44 <UART_CheckIdleState+0x2e>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e2e:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8002e30:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8002e32:	f884 0078 	strb.w	r0, [r4, #120]	; 0x78
  huart->gState = HAL_UART_STATE_READY;
 8002e36:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002e38:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e3c:	6620      	str	r0, [r4, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002e3e:	6660      	str	r0, [r4, #100]	; 0x64
}
 8002e40:	b003      	add	sp, #12
 8002e42:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002e44:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8002e48:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002e4c:	4620      	mov	r0, r4
 8002e4e:	9200      	str	r2, [sp, #0]
 8002e50:	462a      	mov	r2, r5
 8002e52:	f7ff ff30 	bl	8002cb6 <UART_WaitOnFlagUntilTimeout>
 8002e56:	2800      	cmp	r0, #0
 8002e58:	d0e9      	beq.n	8002e2e <UART_CheckIdleState+0x18>
      return HAL_TIMEOUT;
 8002e5a:	2003      	movs	r0, #3
 8002e5c:	e7f0      	b.n	8002e40 <UART_CheckIdleState+0x2a>

08002e5e <HAL_UART_Init>:
{
 8002e5e:	b510      	push	{r4, lr}
  if (huart == NULL)
 8002e60:	4604      	mov	r4, r0
 8002e62:	b340      	cbz	r0, 8002eb6 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8002e64:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8002e66:	b91b      	cbnz	r3, 8002e70 <HAL_UART_Init+0x12>
    huart->Lock = HAL_UNLOCKED;
 8002e68:	f880 3078 	strb.w	r3, [r0, #120]	; 0x78
    HAL_UART_MspInit(huart);
 8002e6c:	f7fe f9d4 	bl	8001218 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8002e70:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002e72:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002e74:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 8002e76:	67e3      	str	r3, [r4, #124]	; 0x7c
  __HAL_UART_DISABLE(huart);
 8002e78:	6813      	ldr	r3, [r2, #0]
 8002e7a:	f023 0301 	bic.w	r3, r3, #1
 8002e7e:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002e80:	f7ff fd82 	bl	8002988 <UART_SetConfig>
 8002e84:	2801      	cmp	r0, #1
 8002e86:	d016      	beq.n	8002eb6 <HAL_UART_Init+0x58>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002e88:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002e8a:	b113      	cbz	r3, 8002e92 <HAL_UART_Init+0x34>
    UART_AdvFeatureConfig(huart);
 8002e8c:	4620      	mov	r0, r4
 8002e8e:	f7ff febd 	bl	8002c0c <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e92:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 8002e94:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e96:	685a      	ldr	r2, [r3, #4]
 8002e98:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e9c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e9e:	689a      	ldr	r2, [r3, #8]
 8002ea0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002ea4:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8002ea6:	681a      	ldr	r2, [r3, #0]
 8002ea8:	f042 0201 	orr.w	r2, r2, #1
}
 8002eac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 8002eb0:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8002eb2:	f7ff bfb0 	b.w	8002e16 <UART_CheckIdleState>
}
 8002eb6:	2001      	movs	r0, #1
 8002eb8:	bd10      	pop	{r4, pc}

08002eba <ai_sine_model_run>:

AI_API_ENTRY
ai_i32 ai_sine_model_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
  return ai_platform_network_process(network, input, output);
 8002eba:	f000 b863 	b.w	8002f84 <ai_platform_network_process>
	...

08002ec0 <ai_sine_model_data_activations_buffer_get>:
  ai_buffer buf = AI_BUFFER_INIT(
    AI_FLAG_NONE, AI_BUFFER_FORMAT_U8,
    AI_BUFFER_SHAPE_INIT(AI_SHAPE_BCWH, 4, 1, AI_SINE_MODEL_DATA_ACTIVATIONS_SIZE, 1, AI_SINE_MODEL_DATA_ACTIVATIONS_COUNT),
    AI_SINE_MODEL_DATA_ACTIVATIONS_SIZE,
    NULL, ptr);
  return buf;
 8002ec0:	4a07      	ldr	r2, [pc, #28]	; (8002ee0 <ai_sine_model_data_activations_buffer_get+0x20>)
{
 8002ec2:	b084      	sub	sp, #16
  return buf;
 8002ec4:	e9c0 2100 	strd	r2, r1, [r0]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	2180      	movs	r1, #128	; 0x80
 8002ecc:	f8c0 d018 	str.w	sp, [r0, #24]
 8002ed0:	e9c0 2202 	strd	r2, r2, [r0, #8]
 8002ed4:	f240 4201 	movw	r2, #1025	; 0x401
 8002ed8:	e9c0 1204 	strd	r1, r2, [r0, #16]
}
 8002edc:	b004      	add	sp, #16
 8002ede:	4770      	bx	lr
 8002ee0:	00040440 	.word	0x00040440

08002ee4 <ai_sine_model_data_weights_buffer_get>:
  ai_buffer buf = AI_BUFFER_INIT(
    AI_FLAG_NONE, AI_BUFFER_FORMAT_U8|AI_BUFFER_FMT_FLAG_CONST,
    AI_BUFFER_SHAPE_INIT(AI_SHAPE_BCWH, 4, 1, AI_SINE_MODEL_DATA_WEIGHTS_SIZE, 1, AI_SINE_MODEL_DATA_WEIGHTS_COUNT),
    AI_SINE_MODEL_DATA_WEIGHTS_SIZE,
    NULL, ptr);
  return buf;
 8002ee4:	4a08      	ldr	r2, [pc, #32]	; (8002f08 <ai_sine_model_data_weights_buffer_get+0x24>)
{
 8002ee6:	b084      	sub	sp, #16
  return buf;
 8002ee8:	e9c0 2100 	strd	r2, r1, [r0]
 8002eec:	2200      	movs	r2, #0
 8002eee:	f640 1144 	movw	r1, #2372	; 0x944
 8002ef2:	f8c0 d018 	str.w	sp, [r0, #24]
 8002ef6:	e9c0 2202 	strd	r2, r2, [r0, #8]
 8002efa:	f240 4201 	movw	r2, #1025	; 0x401
 8002efe:	e9c0 1204 	strd	r1, r2, [r0, #16]
}
 8002f02:	b004      	add	sp, #16
 8002f04:	4770      	bx	lr
 8002f06:	bf00      	nop
 8002f08:	40040440 	.word	0x40040440

08002f0c <ai_sine_model_data_weights_get>:
AI_API_ENTRY
ai_handle ai_sine_model_data_weights_get(void)
{
  return AI_HANDLE_PTR(g_sine_model_weights_table);

}
 8002f0c:	4800      	ldr	r0, [pc, #0]	; (8002f10 <ai_sine_model_data_weights_get+0x4>)
 8002f0e:	4770      	bx	lr
 8002f10:	2000000c 	.word	0x2000000c

08002f14 <ai_buffer_get_size>:
 8002f14:	b368      	cbz	r0, 8002f72 <ai_buffer_get_size+0x5e>
 8002f16:	4b17      	ldr	r3, [pc, #92]	; (8002f74 <ai_buffer_get_size+0x60>)
 8002f18:	4a17      	ldr	r2, [pc, #92]	; (8002f78 <ai_buffer_get_size+0x64>)
 8002f1a:	b410      	push	{r4}
 8002f1c:	6804      	ldr	r4, [r0, #0]
 8002f1e:	4023      	ands	r3, r4
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d123      	bne.n	8002f6c <ai_buffer_get_size+0x58>
 8002f24:	b311      	cbz	r1, 8002f6c <ai_buffer_get_size+0x58>
 8002f26:	6984      	ldr	r4, [r0, #24]
 8002f28:	6862      	ldr	r2, [r4, #4]
 8002f2a:	321f      	adds	r2, #31
 8002f2c:	f022 021f 	bic.w	r2, r2, #31
 8002f30:	7d03      	ldrb	r3, [r0, #20]
 8002f32:	6941      	ldr	r1, [r0, #20]
 8002f34:	f1a3 0301 	sub.w	r3, r3, #1
 8002f38:	f3c1 2017 	ubfx	r0, r1, #8, #24
 8002f3c:	fab3 f383 	clz	r3, r3
 8002f40:	095b      	lsrs	r3, r3, #5
 8002f42:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 8002f46:	da0c      	bge.n	8002f62 <ai_buffer_get_size+0x4e>
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	d103      	bne.n	8002f54 <ai_buffer_get_size+0x40>
 8002f4c:	2802      	cmp	r0, #2
 8002f4e:	f04f 0302 	mov.w	r3, #2
 8002f52:	d006      	beq.n	8002f62 <ai_buffer_get_size+0x4e>
 8002f54:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 8002f58:	3301      	adds	r3, #1
 8002f5a:	4298      	cmp	r0, r3
 8002f5c:	fb01 f202 	mul.w	r2, r1, r2
 8002f60:	d1f2      	bne.n	8002f48 <ai_buffer_get_size+0x34>
 8002f62:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 8002f66:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002f6a:	4770      	bx	lr
 8002f6c:	6984      	ldr	r4, [r0, #24]
 8002f6e:	6862      	ldr	r2, [r4, #4]
 8002f70:	e7de      	b.n	8002f30 <ai_buffer_get_size+0x1c>
 8002f72:	4770      	bx	lr
 8002f74:	017fffff 	.word	0x017fffff
 8002f78:	000400c0 	.word	0x000400c0

08002f7c <_ai_platform_acquire_crc>:
 8002f7c:	2001      	movs	r0, #1
 8002f7e:	4770      	bx	lr

08002f80 <_ai_platform_release_crc>:
 8002f80:	4770      	bx	lr
 8002f82:	bf00      	nop

08002f84 <ai_platform_network_process>:
 8002f84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f88:	b085      	sub	sp, #20
 8002f8a:	460e      	mov	r6, r1
 8002f8c:	4605      	mov	r5, r0
 8002f8e:	9201      	str	r2, [sp, #4]
 8002f90:	b120      	cbz	r0, 8002f9c <ai_platform_network_process+0x18>
 8002f92:	4b24      	ldr	r3, [pc, #144]	; (8003024 <ai_platform_network_process+0xa0>)
 8002f94:	6802      	ldr	r2, [r0, #0]
 8002f96:	429a      	cmp	r2, r3
 8002f98:	bf18      	it	ne
 8002f9a:	2500      	movne	r5, #0
 8002f9c:	f7ff ffee 	bl	8002f7c <_ai_platform_acquire_crc>
 8002fa0:	4b21      	ldr	r3, [pc, #132]	; (8003028 <ai_platform_network_process+0xa4>)
 8002fa2:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002fac:	185a      	adds	r2, r3, r1
 8002fae:	2a01      	cmp	r2, #1
 8002fb0:	d92b      	bls.n	800300a <ai_platform_network_process+0x86>
 8002fb2:	f240 4249 	movw	r2, #1097	; 0x449
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d027      	beq.n	800300a <ai_platform_network_process+0x86>
 8002fba:	4a1c      	ldr	r2, [pc, #112]	; (800302c <ai_platform_network_process+0xa8>)
 8002fbc:	6813      	ldr	r3, [r2, #0]
 8002fbe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002fc2:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8002fc6:	d039      	beq.n	800303c <ai_platform_network_process+0xb8>
 8002fc8:	6813      	ldr	r3, [r2, #0]
 8002fca:	f240 4183 	movw	r1, #1155	; 0x483
 8002fce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002fd2:	428b      	cmp	r3, r1
 8002fd4:	f000 819c 	beq.w	8003310 <ai_platform_network_process+0x38c>
 8002fd8:	6813      	ldr	r3, [r2, #0]
 8002fda:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002fde:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8002fe2:	f000 8179 	beq.w	80032d8 <ai_platform_network_process+0x354>
 8002fe6:	6813      	ldr	r3, [r2, #0]
 8002fe8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d136      	bne.n	800305e <ai_platform_network_process+0xda>
 8002ff0:	4a0f      	ldr	r2, [pc, #60]	; (8003030 <ai_platform_network_process+0xac>)
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	6093      	str	r3, [r2, #8]
 8002ff6:	6893      	ldr	r3, [r2, #8]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d1fc      	bne.n	8002ff6 <ai_platform_network_process+0x72>
 8002ffc:	4b0d      	ldr	r3, [pc, #52]	; (8003034 <ai_platform_network_process+0xb0>)
 8002ffe:	6013      	str	r3, [r2, #0]
 8003000:	4b0d      	ldr	r3, [pc, #52]	; (8003038 <ai_platform_network_process+0xb4>)
 8003002:	6812      	ldr	r2, [r2, #0]
 8003004:	429a      	cmp	r2, r3
 8003006:	d02a      	beq.n	800305e <ai_platform_network_process+0xda>
 8003008:	e7fe      	b.n	8003008 <ai_platform_network_process+0x84>
 800300a:	4a09      	ldr	r2, [pc, #36]	; (8003030 <ai_platform_network_process+0xac>)
 800300c:	2301      	movs	r3, #1
 800300e:	6093      	str	r3, [r2, #8]
 8003010:	6893      	ldr	r3, [r2, #8]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d1fc      	bne.n	8003010 <ai_platform_network_process+0x8c>
 8003016:	4b07      	ldr	r3, [pc, #28]	; (8003034 <ai_platform_network_process+0xb0>)
 8003018:	6013      	str	r3, [r2, #0]
 800301a:	4b07      	ldr	r3, [pc, #28]	; (8003038 <ai_platform_network_process+0xb4>)
 800301c:	6812      	ldr	r2, [r2, #0]
 800301e:	429a      	cmp	r2, r3
 8003020:	d01d      	beq.n	800305e <ai_platform_network_process+0xda>
 8003022:	e7fe      	b.n	8003022 <ai_platform_network_process+0x9e>
 8003024:	a1c00100 	.word	0xa1c00100
 8003028:	e0042000 	.word	0xe0042000
 800302c:	5c001000 	.word	0x5c001000
 8003030:	40023000 	.word	0x40023000
 8003034:	f407a5c2 	.word	0xf407a5c2
 8003038:	b5e8b5cd 	.word	0xb5e8b5cd
 800303c:	4ab0      	ldr	r2, [pc, #704]	; (8003300 <ai_platform_network_process+0x37c>)
 800303e:	2301      	movs	r3, #1
 8003040:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8003044:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8003048:	2b00      	cmp	r3, #0
 800304a:	d1fb      	bne.n	8003044 <ai_platform_network_process+0xc0>
 800304c:	4bad      	ldr	r3, [pc, #692]	; (8003304 <ai_platform_network_process+0x380>)
 800304e:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8003052:	4bad      	ldr	r3, [pc, #692]	; (8003308 <ai_platform_network_process+0x384>)
 8003054:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8003058:	429a      	cmp	r2, r3
 800305a:	f040 812b 	bne.w	80032b4 <ai_platform_network_process+0x330>
 800305e:	f7ff ff8f 	bl	8002f80 <_ai_platform_release_crc>
 8003062:	2d00      	cmp	r5, #0
 8003064:	f000 8172 	beq.w	800334c <ai_platform_network_process+0x3c8>
 8003068:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
 800306a:	2b00      	cmp	r3, #0
 800306c:	f000 8123 	beq.w	80032b6 <ai_platform_network_process+0x332>
 8003070:	68eb      	ldr	r3, [r5, #12]
 8003072:	2200      	movs	r2, #0
 8003074:	f8d5 8030 	ldr.w	r8, [r5, #48]	; 0x30
 8003078:	f003 0303 	and.w	r3, r3, #3
 800307c:	616a      	str	r2, [r5, #20]
 800307e:	2b03      	cmp	r3, #3
 8003080:	f040 811f 	bne.w	80032c2 <ai_platform_network_process+0x33e>
 8003084:	2e00      	cmp	r6, #0
 8003086:	f000 8156 	beq.w	8003336 <ai_platform_network_process+0x3b2>
 800308a:	fab8 f788 	clz	r7, r8
 800308e:	097f      	lsrs	r7, r7, #5
 8003090:	f1b8 0f00 	cmp.w	r8, #0
 8003094:	f000 814f 	beq.w	8003336 <ai_platform_network_process+0x3b2>
 8003098:	f8b8 3000 	ldrh.w	r3, [r8]
 800309c:	2b00      	cmp	r3, #0
 800309e:	f000 814a 	beq.w	8003336 <ai_platform_network_process+0x3b2>
 80030a2:	69b3      	ldr	r3, [r6, #24]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	e9cd 3502 	strd	r3, r5, [sp, #8]
 80030aa:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d072      	beq.n	8003198 <ai_platform_network_process+0x214>
 80030b2:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 80030b6:	2c00      	cmp	r4, #0
 80030b8:	d06e      	beq.n	8003198 <ai_platform_network_process+0x214>
 80030ba:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80030be:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 80030c2:	f8d3 a000 	ldr.w	sl, [r3]
 80030c6:	eb1a 1907 	adds.w	r9, sl, r7, lsl #4
 80030ca:	f000 8133 	beq.w	8003334 <ai_platform_network_process+0x3b0>
 80030ce:	69a3      	ldr	r3, [r4, #24]
 80030d0:	2101      	movs	r1, #1
 80030d2:	4630      	mov	r0, r6
 80030d4:	685d      	ldr	r5, [r3, #4]
 80030d6:	f7ff ff1d 	bl	8002f14 <ai_buffer_get_size>
 80030da:	4285      	cmp	r5, r0
 80030dc:	f0c0 8138 	bcc.w	8003350 <ai_platform_network_process+0x3cc>
 80030e0:	68e0      	ldr	r0, [r4, #12]
 80030e2:	69b1      	ldr	r1, [r6, #24]
 80030e4:	68c2      	ldr	r2, [r0, #12]
 80030e6:	68cb      	ldr	r3, [r1, #12]
 80030e8:	429a      	cmp	r2, r3
 80030ea:	f040 8131 	bne.w	8003350 <ai_platform_network_process+0x3cc>
 80030ee:	6882      	ldr	r2, [r0, #8]
 80030f0:	688b      	ldr	r3, [r1, #8]
 80030f2:	429a      	cmp	r2, r3
 80030f4:	f040 812c 	bne.w	8003350 <ai_platform_network_process+0x3cc>
 80030f8:	6842      	ldr	r2, [r0, #4]
 80030fa:	684b      	ldr	r3, [r1, #4]
 80030fc:	429a      	cmp	r2, r3
 80030fe:	f040 8127 	bne.w	8003350 <ai_platform_network_process+0x3cc>
 8003102:	69a3      	ldr	r3, [r4, #24]
 8003104:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003108:	f000 faf0 	bl	80036ec <ai_array_get_data_byte_size>
 800310c:	4605      	mov	r5, r0
 800310e:	4620      	mov	r0, r4
 8003110:	f000 fa6a 	bl	80035e8 <get_tensor_byte_size>
 8003114:	4285      	cmp	r5, r0
 8003116:	f0c0 811b 	bcc.w	8003350 <ai_platform_network_process+0x3cc>
 800311a:	69a3      	ldr	r3, [r4, #24]
 800311c:	6818      	ldr	r0, [r3, #0]
 800311e:	f000 fa79 	bl	8003614 <ai_array_to_buffer_fmt>
 8003122:	6833      	ldr	r3, [r6, #0]
 8003124:	4058      	eors	r0, r3
 8003126:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 800312a:	f040 81ca 	bne.w	80034c2 <ai_platform_network_process+0x53e>
 800312e:	6873      	ldr	r3, [r6, #4]
 8003130:	2b00      	cmp	r3, #0
 8003132:	f000 81bd 	beq.w	80034b0 <ai_platform_network_process+0x52c>
 8003136:	69b3      	ldr	r3, [r6, #24]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	2b00      	cmp	r3, #0
 800313c:	f000 81ca 	beq.w	80034d4 <ai_platform_network_process+0x550>
 8003140:	9a02      	ldr	r2, [sp, #8]
 8003142:	4620      	mov	r0, r4
 8003144:	3701      	adds	r7, #1
 8003146:	361c      	adds	r6, #28
 8003148:	429a      	cmp	r2, r3
 800314a:	bf38      	it	cc
 800314c:	461a      	movcc	r2, r3
 800314e:	9202      	str	r2, [sp, #8]
 8003150:	f000 fa4a 	bl	80035e8 <get_tensor_byte_size>
 8003154:	f8c9 0008 	str.w	r0, [r9, #8]
 8003158:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	fb00 f303 	mul.w	r3, r0, r3
 8003162:	f8c9 300c 	str.w	r3, [r9, #12]
 8003166:	f856 1c18 	ldr.w	r1, [r6, #-24]
 800316a:	440b      	add	r3, r1
 800316c:	f8c9 1004 	str.w	r1, [r9, #4]
 8003170:	f84a 300b 	str.w	r3, [sl, fp]
 8003174:	69a0      	ldr	r0, [r4, #24]
 8003176:	6803      	ldr	r3, [r0, #0]
 8003178:	009a      	lsls	r2, r3, #2
 800317a:	f100 80bb 	bmi.w	80032f4 <ai_platform_network_process+0x370>
 800317e:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8003182:	1a9b      	subs	r3, r3, r2
 8003184:	4419      	add	r1, r3
 8003186:	6081      	str	r1, [r0, #8]
 8003188:	69a3      	ldr	r3, [r4, #24]
 800318a:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800318e:	60da      	str	r2, [r3, #12]
 8003190:	f8b8 3000 	ldrh.w	r3, [r8]
 8003194:	42bb      	cmp	r3, r7
 8003196:	d888      	bhi.n	80030aa <ai_platform_network_process+0x126>
 8003198:	9d03      	ldr	r5, [sp, #12]
 800319a:	9b01      	ldr	r3, [sp, #4]
 800319c:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
 800319e:	2b00      	cmp	r3, #0
 80031a0:	f000 81a1 	beq.w	80034e6 <ai_platform_network_process+0x562>
 80031a4:	2a01      	cmp	r2, #1
 80031a6:	f240 817b 	bls.w	80034a0 <ai_platform_network_process+0x51c>
 80031aa:	f8d5 9030 	ldr.w	r9, [r5, #48]	; 0x30
 80031ae:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	f000 8174 	beq.w	80034a0 <ai_platform_network_process+0x51c>
 80031b8:	9e01      	ldr	r6, [sp, #4]
 80031ba:	2700      	movs	r7, #0
 80031bc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	f000 80d3 	beq.w	800336c <ai_platform_network_process+0x3e8>
 80031c6:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 80031ca:	2c00      	cmp	r4, #0
 80031cc:	f000 80ce 	beq.w	800336c <ai_platform_network_process+0x3e8>
 80031d0:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80031d4:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 80031d8:	f8d3 8000 	ldr.w	r8, [r3]
 80031dc:	eb18 1a07 	adds.w	sl, r8, r7, lsl #4
 80031e0:	f000 819f 	beq.w	8003522 <ai_platform_network_process+0x59e>
 80031e4:	69a3      	ldr	r3, [r4, #24]
 80031e6:	2101      	movs	r1, #1
 80031e8:	4630      	mov	r0, r6
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	9301      	str	r3, [sp, #4]
 80031ee:	f7ff fe91 	bl	8002f14 <ai_buffer_get_size>
 80031f2:	9b01      	ldr	r3, [sp, #4]
 80031f4:	4283      	cmp	r3, r0
 80031f6:	f0c0 8153 	bcc.w	80034a0 <ai_platform_network_process+0x51c>
 80031fa:	68e0      	ldr	r0, [r4, #12]
 80031fc:	69b1      	ldr	r1, [r6, #24]
 80031fe:	68c2      	ldr	r2, [r0, #12]
 8003200:	68cb      	ldr	r3, [r1, #12]
 8003202:	429a      	cmp	r2, r3
 8003204:	f040 814c 	bne.w	80034a0 <ai_platform_network_process+0x51c>
 8003208:	6882      	ldr	r2, [r0, #8]
 800320a:	688b      	ldr	r3, [r1, #8]
 800320c:	429a      	cmp	r2, r3
 800320e:	f040 8147 	bne.w	80034a0 <ai_platform_network_process+0x51c>
 8003212:	6842      	ldr	r2, [r0, #4]
 8003214:	684b      	ldr	r3, [r1, #4]
 8003216:	429a      	cmp	r2, r3
 8003218:	f040 8142 	bne.w	80034a0 <ai_platform_network_process+0x51c>
 800321c:	69a3      	ldr	r3, [r4, #24]
 800321e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003222:	f000 fa63 	bl	80036ec <ai_array_get_data_byte_size>
 8003226:	9001      	str	r0, [sp, #4]
 8003228:	4620      	mov	r0, r4
 800322a:	f000 f9dd 	bl	80035e8 <get_tensor_byte_size>
 800322e:	9b01      	ldr	r3, [sp, #4]
 8003230:	4283      	cmp	r3, r0
 8003232:	f0c0 8135 	bcc.w	80034a0 <ai_platform_network_process+0x51c>
 8003236:	69a3      	ldr	r3, [r4, #24]
 8003238:	6818      	ldr	r0, [r3, #0]
 800323a:	f000 f9eb 	bl	8003614 <ai_array_to_buffer_fmt>
 800323e:	6833      	ldr	r3, [r6, #0]
 8003240:	4058      	eors	r0, r3
 8003242:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 8003246:	f040 815c 	bne.w	8003502 <ai_platform_network_process+0x57e>
 800324a:	6873      	ldr	r3, [r6, #4]
 800324c:	2b00      	cmp	r3, #0
 800324e:	f000 8150 	beq.w	80034f2 <ai_platform_network_process+0x56e>
 8003252:	69b3      	ldr	r3, [r6, #24]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	2b00      	cmp	r3, #0
 8003258:	f000 815b 	beq.w	8003512 <ai_platform_network_process+0x58e>
 800325c:	9a02      	ldr	r2, [sp, #8]
 800325e:	4620      	mov	r0, r4
 8003260:	3701      	adds	r7, #1
 8003262:	361c      	adds	r6, #28
 8003264:	429a      	cmp	r2, r3
 8003266:	bf38      	it	cc
 8003268:	461a      	movcc	r2, r3
 800326a:	9202      	str	r2, [sp, #8]
 800326c:	f000 f9bc 	bl	80035e8 <get_tensor_byte_size>
 8003270:	f8ca 0008 	str.w	r0, [sl, #8]
 8003274:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	fb00 f303 	mul.w	r3, r0, r3
 800327e:	f8ca 300c 	str.w	r3, [sl, #12]
 8003282:	f856 1c18 	ldr.w	r1, [r6, #-24]
 8003286:	440b      	add	r3, r1
 8003288:	f8ca 1004 	str.w	r1, [sl, #4]
 800328c:	f848 300b 	str.w	r3, [r8, fp]
 8003290:	69a0      	ldr	r0, [r4, #24]
 8003292:	6803      	ldr	r3, [r0, #0]
 8003294:	009b      	lsls	r3, r3, #2
 8003296:	d464      	bmi.n	8003362 <ai_platform_network_process+0x3de>
 8003298:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 800329c:	1a9b      	subs	r3, r3, r2
 800329e:	4419      	add	r1, r3
 80032a0:	6081      	str	r1, [r0, #8]
 80032a2:	69a3      	ldr	r3, [r4, #24]
 80032a4:	f8da 2004 	ldr.w	r2, [sl, #4]
 80032a8:	60da      	str	r2, [r3, #12]
 80032aa:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 80032ae:	429f      	cmp	r7, r3
 80032b0:	d384      	bcc.n	80031bc <ai_platform_network_process+0x238>
 80032b2:	e05b      	b.n	800336c <ai_platform_network_process+0x3e8>
 80032b4:	e7fe      	b.n	80032b4 <ai_platform_network_process+0x330>
 80032b6:	68ea      	ldr	r2, [r5, #12]
 80032b8:	616b      	str	r3, [r5, #20]
 80032ba:	f002 0203 	and.w	r2, r2, #3
 80032be:	2a03      	cmp	r2, #3
 80032c0:	d039      	beq.n	8003336 <ai_platform_network_process+0x3b2>
 80032c2:	2230      	movs	r2, #48	; 0x30
 80032c4:	2111      	movs	r1, #17
 80032c6:	f105 0010 	add.w	r0, r5, #16
 80032ca:	2400      	movs	r4, #0
 80032cc:	f000 f938 	bl	8003540 <core_set_error>
 80032d0:	4620      	mov	r0, r4
 80032d2:	b005      	add	sp, #20
 80032d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80032d8:	4a0c      	ldr	r2, [pc, #48]	; (800330c <ai_platform_network_process+0x388>)
 80032da:	2301      	movs	r3, #1
 80032dc:	6093      	str	r3, [r2, #8]
 80032de:	6893      	ldr	r3, [r2, #8]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d1fc      	bne.n	80032de <ai_platform_network_process+0x35a>
 80032e4:	4b07      	ldr	r3, [pc, #28]	; (8003304 <ai_platform_network_process+0x380>)
 80032e6:	6013      	str	r3, [r2, #0]
 80032e8:	4b07      	ldr	r3, [pc, #28]	; (8003308 <ai_platform_network_process+0x384>)
 80032ea:	6812      	ldr	r2, [r2, #0]
 80032ec:	429a      	cmp	r2, r3
 80032ee:	f43f aeb6 	beq.w	800305e <ai_platform_network_process+0xda>
 80032f2:	e7fe      	b.n	80032f2 <ai_platform_network_process+0x36e>
 80032f4:	f8b8 3000 	ldrh.w	r3, [r8]
 80032f8:	429f      	cmp	r7, r3
 80032fa:	f4ff aed6 	bcc.w	80030aa <ai_platform_network_process+0x126>
 80032fe:	e74b      	b.n	8003198 <ai_platform_network_process+0x214>
 8003300:	58024000 	.word	0x58024000
 8003304:	f407a5c2 	.word	0xf407a5c2
 8003308:	b5e8b5cd 	.word	0xb5e8b5cd
 800330c:	40023000 	.word	0x40023000
 8003310:	4a88      	ldr	r2, [pc, #544]	; (8003534 <ai_platform_network_process+0x5b0>)
 8003312:	2301      	movs	r3, #1
 8003314:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8003318:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800331c:	2b00      	cmp	r3, #0
 800331e:	d1fb      	bne.n	8003318 <ai_platform_network_process+0x394>
 8003320:	4b85      	ldr	r3, [pc, #532]	; (8003538 <ai_platform_network_process+0x5b4>)
 8003322:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8003326:	4b85      	ldr	r3, [pc, #532]	; (800353c <ai_platform_network_process+0x5b8>)
 8003328:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800332c:	429a      	cmp	r2, r3
 800332e:	f43f ae96 	beq.w	800305e <ai_platform_network_process+0xda>
 8003332:	e7fe      	b.n	8003332 <ai_platform_network_process+0x3ae>
 8003334:	9d03      	ldr	r5, [sp, #12]
 8003336:	2400      	movs	r4, #0
 8003338:	2217      	movs	r2, #23
 800333a:	2112      	movs	r1, #18
 800333c:	f105 0010 	add.w	r0, r5, #16
 8003340:	f000 f8fe 	bl	8003540 <core_set_error>
 8003344:	4620      	mov	r0, r4
 8003346:	b005      	add	sp, #20
 8003348:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800334c:	462c      	mov	r4, r5
 800334e:	e7bf      	b.n	80032d0 <ai_platform_network_process+0x34c>
 8003350:	9d03      	ldr	r5, [sp, #12]
 8003352:	2218      	movs	r2, #24
 8003354:	2112      	movs	r1, #18
 8003356:	2400      	movs	r4, #0
 8003358:	f105 0010 	add.w	r0, r5, #16
 800335c:	f000 f8f0 	bl	8003540 <core_set_error>
 8003360:	e7b6      	b.n	80032d0 <ai_platform_network_process+0x34c>
 8003362:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8003366:	429f      	cmp	r7, r3
 8003368:	f4ff af28 	bcc.w	80031bc <ai_platform_network_process+0x238>
 800336c:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8003370:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
 8003372:	82ab      	strh	r3, [r5, #20]
 8003374:	2a00      	cmp	r2, #0
 8003376:	f040 808d 	bne.w	8003494 <ai_platform_network_process+0x510>
 800337a:	4616      	mov	r6, r2
 800337c:	4617      	mov	r7, r2
 800337e:	8aec      	ldrh	r4, [r5, #22]
 8003380:	429c      	cmp	r4, r3
 8003382:	d2a5      	bcs.n	80032d0 <ai_platform_network_process+0x34c>
 8003384:	46ab      	mov	fp, r5
 8003386:	2e00      	cmp	r6, #0
 8003388:	d030      	beq.n	80033ec <ai_platform_network_process+0x468>
 800338a:	f04f 0800 	mov.w	r8, #0
 800338e:	e014      	b.n	80033ba <ai_platform_network_process+0x436>
 8003390:	6882      	ldr	r2, [r0, #8]
 8003392:	68c5      	ldr	r5, [r0, #12]
 8003394:	6863      	ldr	r3, [r4, #4]
 8003396:	1b52      	subs	r2, r2, r5
 8003398:	4413      	add	r3, r2
 800339a:	6083      	str	r3, [r0, #8]
 800339c:	698b      	ldr	r3, [r1, #24]
 800339e:	6862      	ldr	r2, [r4, #4]
 80033a0:	60da      	str	r2, [r3, #12]
 80033a2:	f859 200a 	ldr.w	r2, [r9, sl]
 80033a6:	f108 0801 	add.w	r8, r8, #1
 80033aa:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 80033ae:	440b      	add	r3, r1
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d301      	bcc.n	80033b8 <ai_platform_network_process+0x434>
 80033b4:	68e3      	ldr	r3, [r4, #12]
 80033b6:	1ad3      	subs	r3, r2, r3
 80033b8:	6063      	str	r3, [r4, #4]
 80033ba:	8833      	ldrh	r3, [r6, #0]
 80033bc:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 80033c0:	4543      	cmp	r3, r8
 80033c2:	d913      	bls.n	80033ec <ai_platform_network_process+0x468>
 80033c4:	6873      	ldr	r3, [r6, #4]
 80033c6:	b18b      	cbz	r3, 80033ec <ai_platform_network_process+0x468>
 80033c8:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 80033cc:	b171      	cbz	r1, 80033ec <ai_platform_network_process+0x468>
 80033ce:	6988      	ldr	r0, [r1, #24]
 80033d0:	68b2      	ldr	r2, [r6, #8]
 80033d2:	6803      	ldr	r3, [r0, #0]
 80033d4:	f8d2 9000 	ldr.w	r9, [r2]
 80033d8:	009d      	lsls	r5, r3, #2
 80033da:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 80033de:	d5d7      	bpl.n	8003390 <ai_platform_network_process+0x40c>
 80033e0:	6880      	ldr	r0, [r0, #8]
 80033e2:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 80033e6:	f000 f9c3 	bl	8003770 <memcpy>
 80033ea:	e7da      	b.n	80033a2 <ai_platform_network_process+0x41e>
 80033ec:	4658      	mov	r0, fp
 80033ee:	f000 f8b3 	bl	8003558 <ai_layers_forward_all>
 80033f2:	2f00      	cmp	r7, #0
 80033f4:	d03f      	beq.n	8003476 <ai_platform_network_process+0x4f2>
 80033f6:	2400      	movs	r4, #0
 80033f8:	e016      	b.n	8003428 <ai_platform_network_process+0x4a4>
 80033fa:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 80033fe:	f859 100a 	ldr.w	r1, [r9, sl]
 8003402:	4413      	add	r3, r2
 8003404:	428b      	cmp	r3, r1
 8003406:	d302      	bcc.n	800340e <ai_platform_network_process+0x48a>
 8003408:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800340c:	1acb      	subs	r3, r1, r3
 800340e:	f8c8 3004 	str.w	r3, [r8, #4]
 8003412:	6981      	ldr	r1, [r0, #24]
 8003414:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 8003418:	1b52      	subs	r2, r2, r5
 800341a:	4413      	add	r3, r2
 800341c:	608b      	str	r3, [r1, #8]
 800341e:	6983      	ldr	r3, [r0, #24]
 8003420:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8003424:	60da      	str	r2, [r3, #12]
 8003426:	3401      	adds	r4, #1
 8003428:	883b      	ldrh	r3, [r7, #0]
 800342a:	42a3      	cmp	r3, r4
 800342c:	d923      	bls.n	8003476 <ai_platform_network_process+0x4f2>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	b30b      	cbz	r3, 8003476 <ai_platform_network_process+0x4f2>
 8003432:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8003436:	b1f0      	cbz	r0, 8003476 <ai_platform_network_process+0x4f2>
 8003438:	68ba      	ldr	r2, [r7, #8]
 800343a:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 800343e:	6983      	ldr	r3, [r0, #24]
 8003440:	f8d2 9000 	ldr.w	r9, [r2]
 8003444:	681a      	ldr	r2, [r3, #0]
 8003446:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 800344a:	0092      	lsls	r2, r2, #2
 800344c:	d5d5      	bpl.n	80033fa <ai_platform_network_process+0x476>
 800344e:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8003452:	6899      	ldr	r1, [r3, #8]
 8003454:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8003458:	f000 f98a 	bl	8003770 <memcpy>
 800345c:	f859 200a 	ldr.w	r2, [r9, sl]
 8003460:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 8003464:	440b      	add	r3, r1
 8003466:	4293      	cmp	r3, r2
 8003468:	d302      	bcc.n	8003470 <ai_platform_network_process+0x4ec>
 800346a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800346e:	1ad3      	subs	r3, r2, r3
 8003470:	f8c8 3004 	str.w	r3, [r8, #4]
 8003474:	e7d7      	b.n	8003426 <ai_platform_network_process+0x4a2>
 8003476:	f8bb 4016 	ldrh.w	r4, [fp, #22]
 800347a:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 800347e:	3401      	adds	r4, #1
 8003480:	b2a4      	uxth	r4, r4
 8003482:	42a3      	cmp	r3, r4
 8003484:	f8ab 4016 	strh.w	r4, [fp, #22]
 8003488:	f63f af7d 	bhi.w	8003386 <ai_platform_network_process+0x402>
 800348c:	4620      	mov	r0, r4
 800348e:	b005      	add	sp, #20
 8003490:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003494:	2a01      	cmp	r2, #1
 8003496:	6b2e      	ldr	r6, [r5, #48]	; 0x30
 8003498:	d029      	beq.n	80034ee <ai_platform_network_process+0x56a>
 800349a:	f106 070c 	add.w	r7, r6, #12
 800349e:	e76e      	b.n	800337e <ai_platform_network_process+0x3fa>
 80034a0:	2218      	movs	r2, #24
 80034a2:	2113      	movs	r1, #19
 80034a4:	f105 0010 	add.w	r0, r5, #16
 80034a8:	2400      	movs	r4, #0
 80034aa:	f000 f849 	bl	8003540 <core_set_error>
 80034ae:	e70f      	b.n	80032d0 <ai_platform_network_process+0x34c>
 80034b0:	9d03      	ldr	r5, [sp, #12]
 80034b2:	4604      	mov	r4, r0
 80034b4:	2217      	movs	r2, #23
 80034b6:	2112      	movs	r1, #18
 80034b8:	f105 0010 	add.w	r0, r5, #16
 80034bc:	f000 f840 	bl	8003540 <core_set_error>
 80034c0:	e706      	b.n	80032d0 <ai_platform_network_process+0x34c>
 80034c2:	9d03      	ldr	r5, [sp, #12]
 80034c4:	2219      	movs	r2, #25
 80034c6:	2112      	movs	r1, #18
 80034c8:	2400      	movs	r4, #0
 80034ca:	f105 0010 	add.w	r0, r5, #16
 80034ce:	f000 f837 	bl	8003540 <core_set_error>
 80034d2:	e6fd      	b.n	80032d0 <ai_platform_network_process+0x34c>
 80034d4:	9d03      	ldr	r5, [sp, #12]
 80034d6:	4604      	mov	r4, r0
 80034d8:	2221      	movs	r2, #33	; 0x21
 80034da:	2112      	movs	r1, #18
 80034dc:	f105 0010 	add.w	r0, r5, #16
 80034e0:	f000 f82e 	bl	8003540 <core_set_error>
 80034e4:	e6f4      	b.n	80032d0 <ai_platform_network_process+0x34c>
 80034e6:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 80034ea:	82ab      	strh	r3, [r5, #20]
 80034ec:	e742      	b.n	8003374 <ai_platform_network_process+0x3f0>
 80034ee:	2700      	movs	r7, #0
 80034f0:	e745      	b.n	800337e <ai_platform_network_process+0x3fa>
 80034f2:	4604      	mov	r4, r0
 80034f4:	2217      	movs	r2, #23
 80034f6:	2113      	movs	r1, #19
 80034f8:	f105 0010 	add.w	r0, r5, #16
 80034fc:	f000 f820 	bl	8003540 <core_set_error>
 8003500:	e6e6      	b.n	80032d0 <ai_platform_network_process+0x34c>
 8003502:	2219      	movs	r2, #25
 8003504:	2113      	movs	r1, #19
 8003506:	f105 0010 	add.w	r0, r5, #16
 800350a:	2400      	movs	r4, #0
 800350c:	f000 f818 	bl	8003540 <core_set_error>
 8003510:	e6de      	b.n	80032d0 <ai_platform_network_process+0x34c>
 8003512:	4604      	mov	r4, r0
 8003514:	2221      	movs	r2, #33	; 0x21
 8003516:	2113      	movs	r1, #19
 8003518:	f105 0010 	add.w	r0, r5, #16
 800351c:	f000 f810 	bl	8003540 <core_set_error>
 8003520:	e6d6      	b.n	80032d0 <ai_platform_network_process+0x34c>
 8003522:	2217      	movs	r2, #23
 8003524:	2113      	movs	r1, #19
 8003526:	f105 0010 	add.w	r0, r5, #16
 800352a:	4654      	mov	r4, sl
 800352c:	f000 f808 	bl	8003540 <core_set_error>
 8003530:	e6ce      	b.n	80032d0 <ai_platform_network_process+0x34c>
 8003532:	bf00      	nop
 8003534:	58024000 	.word	0x58024000
 8003538:	f407a5c2 	.word	0xf407a5c2
 800353c:	b5e8b5cd 	.word	0xb5e8b5cd

08003540 <core_set_error>:
 8003540:	4603      	mov	r3, r0
 8003542:	7800      	ldrb	r0, [r0, #0]
 8003544:	b108      	cbz	r0, 800354a <core_set_error+0xa>
 8003546:	2000      	movs	r0, #0
 8003548:	4770      	bx	lr
 800354a:	7019      	strb	r1, [r3, #0]
 800354c:	2001      	movs	r0, #1
 800354e:	6819      	ldr	r1, [r3, #0]
 8003550:	f362 211f 	bfi	r1, r2, #8, #24
 8003554:	6019      	str	r1, [r3, #0]
 8003556:	4770      	bx	lr

08003558 <ai_layers_forward_all>:
 8003558:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800355c:	f8d0 803c 	ldr.w	r8, [r0, #60]	; 0x3c
 8003560:	4604      	mov	r4, r0
 8003562:	f1b8 0f00 	cmp.w	r8, #0
 8003566:	d02a      	beq.n	80035be <ai_layers_forward_all+0x66>
 8003568:	6b41      	ldr	r1, [r0, #52]	; 0x34
 800356a:	6381      	str	r1, [r0, #56]	; 0x38
 800356c:	b319      	cbz	r1, 80035b6 <ai_layers_forward_all+0x5e>
 800356e:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8003570:	2001      	movs	r0, #1
 8003572:	47c0      	blx	r8
 8003574:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8003576:	b1f6      	cbz	r6, 80035b6 <ai_layers_forward_all+0x5e>
 8003578:	2700      	movs	r7, #0
 800357a:	4631      	mov	r1, r6
 800357c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800357e:	2002      	movs	r0, #2
 8003580:	47c0      	blx	r8
 8003582:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8003584:	4628      	mov	r0, r5
 8003586:	696b      	ldr	r3, [r5, #20]
 8003588:	4798      	blx	r3
 800358a:	692e      	ldr	r6, [r5, #16]
 800358c:	2003      	movs	r0, #3
 800358e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003590:	42b5      	cmp	r5, r6
 8003592:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8003594:	d007      	beq.n	80035a6 <ai_layers_forward_all+0x4e>
 8003596:	47c0      	blx	r8
 8003598:	3701      	adds	r7, #1
 800359a:	63a6      	str	r6, [r4, #56]	; 0x38
 800359c:	2e00      	cmp	r6, #0
 800359e:	d1ec      	bne.n	800357a <ai_layers_forward_all+0x22>
 80035a0:	4638      	mov	r0, r7
 80035a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80035a6:	2003      	movs	r0, #3
 80035a8:	3701      	adds	r7, #1
 80035aa:	47c0      	blx	r8
 80035ac:	2300      	movs	r3, #0
 80035ae:	4638      	mov	r0, r7
 80035b0:	63a3      	str	r3, [r4, #56]	; 0x38
 80035b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80035b6:	2700      	movs	r7, #0
 80035b8:	4638      	mov	r0, r7
 80035ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80035be:	6b45      	ldr	r5, [r0, #52]	; 0x34
 80035c0:	6385      	str	r5, [r0, #56]	; 0x38
 80035c2:	2d00      	cmp	r5, #0
 80035c4:	d0f7      	beq.n	80035b6 <ai_layers_forward_all+0x5e>
 80035c6:	4647      	mov	r7, r8
 80035c8:	696b      	ldr	r3, [r5, #20]
 80035ca:	4628      	mov	r0, r5
 80035cc:	4798      	blx	r3
 80035ce:	462b      	mov	r3, r5
 80035d0:	692d      	ldr	r5, [r5, #16]
 80035d2:	429d      	cmp	r5, r3
 80035d4:	d004      	beq.n	80035e0 <ai_layers_forward_all+0x88>
 80035d6:	3701      	adds	r7, #1
 80035d8:	63a5      	str	r5, [r4, #56]	; 0x38
 80035da:	2d00      	cmp	r5, #0
 80035dc:	d1f4      	bne.n	80035c8 <ai_layers_forward_all+0x70>
 80035de:	e7df      	b.n	80035a0 <ai_layers_forward_all+0x48>
 80035e0:	2300      	movs	r3, #0
 80035e2:	3701      	adds	r7, #1
 80035e4:	63a3      	str	r3, [r4, #56]	; 0x38
 80035e6:	e7db      	b.n	80035a0 <ai_layers_forward_all+0x48>

080035e8 <get_tensor_byte_size>:
 80035e8:	b430      	push	{r4, r5}
 80035ea:	6985      	ldr	r5, [r0, #24]
 80035ec:	68c4      	ldr	r4, [r0, #12]
 80035ee:	6941      	ldr	r1, [r0, #20]
 80035f0:	4b06      	ldr	r3, [pc, #24]	; (800360c <get_tensor_byte_size+0x24>)
 80035f2:	6828      	ldr	r0, [r5, #0]
 80035f4:	4a06      	ldr	r2, [pc, #24]	; (8003610 <get_tensor_byte_size+0x28>)
 80035f6:	4003      	ands	r3, r0
 80035f8:	68c9      	ldr	r1, [r1, #12]
 80035fa:	68e0      	ldr	r0, [r4, #12]
 80035fc:	4293      	cmp	r3, r2
 80035fe:	fb01 f000 	mul.w	r0, r1, r0
 8003602:	d101      	bne.n	8003608 <get_tensor_byte_size+0x20>
 8003604:	3007      	adds	r0, #7
 8003606:	08c0      	lsrs	r0, r0, #3
 8003608:	bc30      	pop	{r4, r5}
 800360a:	4770      	bx	lr
 800360c:	017fffff 	.word	0x017fffff
 8003610:	000400c0 	.word	0x000400c0

08003614 <ai_array_to_buffer_fmt>:
 8003614:	f3c0 4343 	ubfx	r3, r0, #17, #4
 8003618:	2b02      	cmp	r3, #2
 800361a:	d050      	beq.n	80036be <ai_array_to_buffer_fmt+0xaa>
 800361c:	f020 427e 	bic.w	r2, r0, #4261412864	; 0xfe000000
 8003620:	4b29      	ldr	r3, [pc, #164]	; (80036c8 <ai_array_to_buffer_fmt+0xb4>)
 8003622:	429a      	cmp	r2, r3
 8003624:	d00b      	beq.n	800363e <ai_array_to_buffer_fmt+0x2a>
 8003626:	dc1c      	bgt.n	8003662 <ai_array_to_buffer_fmt+0x4e>
 8003628:	4b28      	ldr	r3, [pc, #160]	; (80036cc <ai_array_to_buffer_fmt+0xb8>)
 800362a:	429a      	cmp	r2, r3
 800362c:	d007      	beq.n	800363e <ai_array_to_buffer_fmt+0x2a>
 800362e:	dd0b      	ble.n	8003648 <ai_array_to_buffer_fmt+0x34>
 8003630:	4b27      	ldr	r3, [pc, #156]	; (80036d0 <ai_array_to_buffer_fmt+0xbc>)
 8003632:	429a      	cmp	r2, r3
 8003634:	d003      	beq.n	800363e <ai_array_to_buffer_fmt+0x2a>
 8003636:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 800363a:	429a      	cmp	r2, r3
 800363c:	d131      	bne.n	80036a2 <ai_array_to_buffer_fmt+0x8e>
 800363e:	4613      	mov	r3, r2
 8003640:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8003644:	4318      	orrs	r0, r3
 8003646:	4770      	bx	lr
 8003648:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800364c:	429a      	cmp	r2, r3
 800364e:	d0f6      	beq.n	800363e <ai_array_to_buffer_fmt+0x2a>
 8003650:	dd2c      	ble.n	80036ac <ai_array_to_buffer_fmt+0x98>
 8003652:	4b20      	ldr	r3, [pc, #128]	; (80036d4 <ai_array_to_buffer_fmt+0xc0>)
 8003654:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8003658:	429a      	cmp	r2, r3
 800365a:	bf18      	it	ne
 800365c:	2340      	movne	r3, #64	; 0x40
 800365e:	4318      	orrs	r0, r3
 8003660:	4770      	bx	lr
 8003662:	4b1d      	ldr	r3, [pc, #116]	; (80036d8 <ai_array_to_buffer_fmt+0xc4>)
 8003664:	429a      	cmp	r2, r3
 8003666:	d0ea      	beq.n	800363e <ai_array_to_buffer_fmt+0x2a>
 8003668:	dd0e      	ble.n	8003688 <ai_array_to_buffer_fmt+0x74>
 800366a:	4b1c      	ldr	r3, [pc, #112]	; (80036dc <ai_array_to_buffer_fmt+0xc8>)
 800366c:	429a      	cmp	r2, r3
 800366e:	d0e6      	beq.n	800363e <ai_array_to_buffer_fmt+0x2a>
 8003670:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 8003674:	429a      	cmp	r2, r3
 8003676:	d0e2      	beq.n	800363e <ai_array_to_buffer_fmt+0x2a>
 8003678:	4b19      	ldr	r3, [pc, #100]	; (80036e0 <ai_array_to_buffer_fmt+0xcc>)
 800367a:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800367e:	429a      	cmp	r2, r3
 8003680:	bf18      	it	ne
 8003682:	2340      	movne	r3, #64	; 0x40
 8003684:	4318      	orrs	r0, r3
 8003686:	4770      	bx	lr
 8003688:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800368c:	429a      	cmp	r2, r3
 800368e:	d0d6      	beq.n	800363e <ai_array_to_buffer_fmt+0x2a>
 8003690:	3307      	adds	r3, #7
 8003692:	429a      	cmp	r2, r3
 8003694:	d0d3      	beq.n	800363e <ai_array_to_buffer_fmt+0x2a>
 8003696:	f2a3 3387 	subw	r3, r3, #903	; 0x387
 800369a:	429a      	cmp	r2, r3
 800369c:	bf18      	it	ne
 800369e:	2340      	movne	r3, #64	; 0x40
 80036a0:	e7ce      	b.n	8003640 <ai_array_to_buffer_fmt+0x2c>
 80036a2:	4b10      	ldr	r3, [pc, #64]	; (80036e4 <ai_array_to_buffer_fmt+0xd0>)
 80036a4:	429a      	cmp	r2, r3
 80036a6:	bf18      	it	ne
 80036a8:	2340      	movne	r3, #64	; 0x40
 80036aa:	e7c9      	b.n	8003640 <ai_array_to_buffer_fmt+0x2c>
 80036ac:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80036b0:	429a      	cmp	r2, r3
 80036b2:	d0c4      	beq.n	800363e <ai_array_to_buffer_fmt+0x2a>
 80036b4:	3380      	adds	r3, #128	; 0x80
 80036b6:	429a      	cmp	r2, r3
 80036b8:	bf18      	it	ne
 80036ba:	2340      	movne	r3, #64	; 0x40
 80036bc:	e7c0      	b.n	8003640 <ai_array_to_buffer_fmt+0x2c>
 80036be:	4b0a      	ldr	r3, [pc, #40]	; (80036e8 <ai_array_to_buffer_fmt+0xd4>)
 80036c0:	4003      	ands	r3, r0
 80036c2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80036c6:	e7bb      	b.n	8003640 <ai_array_to_buffer_fmt+0x2c>
 80036c8:	00840040 	.word	0x00840040
 80036cc:	00040840 	.word	0x00040840
 80036d0:	00041040 	.word	0x00041040
 80036d4:	00040447 	.word	0x00040447
 80036d8:	00840840 	.word	0x00840840
 80036dc:	00841040 	.word	0x00841040
 80036e0:	0084084f 	.word	0x0084084f
 80036e4:	0004084f 	.word	0x0004084f
 80036e8:	00803fff 	.word	0x00803fff

080036ec <ai_array_get_data_byte_size>:
 80036ec:	b161      	cbz	r1, 8003708 <ai_array_get_data_byte_size+0x1c>
 80036ee:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 80036f2:	f3c0 5241 	ubfx	r2, r0, #21, #2
 80036f6:	fb03 f101 	mul.w	r1, r3, r1
 80036fa:	1dc8      	adds	r0, r1, #7
 80036fc:	f020 0007 	bic.w	r0, r0, #7
 8003700:	40d0      	lsrs	r0, r2
 8003702:	3007      	adds	r0, #7
 8003704:	08c0      	lsrs	r0, r0, #3
 8003706:	4770      	bx	lr
 8003708:	4608      	mov	r0, r1
 800370a:	4770      	bx	lr

0800370c <__errno>:
 800370c:	4b01      	ldr	r3, [pc, #4]	; (8003714 <__errno+0x8>)
 800370e:	6818      	ldr	r0, [r3, #0]
 8003710:	4770      	bx	lr
 8003712:	bf00      	nop
 8003714:	20000018 	.word	0x20000018

08003718 <__libc_init_array>:
 8003718:	b570      	push	{r4, r5, r6, lr}
 800371a:	4d0d      	ldr	r5, [pc, #52]	; (8003750 <__libc_init_array+0x38>)
 800371c:	4c0d      	ldr	r4, [pc, #52]	; (8003754 <__libc_init_array+0x3c>)
 800371e:	1b64      	subs	r4, r4, r5
 8003720:	10a4      	asrs	r4, r4, #2
 8003722:	2600      	movs	r6, #0
 8003724:	42a6      	cmp	r6, r4
 8003726:	d109      	bne.n	800373c <__libc_init_array+0x24>
 8003728:	4d0b      	ldr	r5, [pc, #44]	; (8003758 <__libc_init_array+0x40>)
 800372a:	4c0c      	ldr	r4, [pc, #48]	; (800375c <__libc_init_array+0x44>)
 800372c:	f002 ff4a 	bl	80065c4 <_init>
 8003730:	1b64      	subs	r4, r4, r5
 8003732:	10a4      	asrs	r4, r4, #2
 8003734:	2600      	movs	r6, #0
 8003736:	42a6      	cmp	r6, r4
 8003738:	d105      	bne.n	8003746 <__libc_init_array+0x2e>
 800373a:	bd70      	pop	{r4, r5, r6, pc}
 800373c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003740:	4798      	blx	r3
 8003742:	3601      	adds	r6, #1
 8003744:	e7ee      	b.n	8003724 <__libc_init_array+0xc>
 8003746:	f855 3b04 	ldr.w	r3, [r5], #4
 800374a:	4798      	blx	r3
 800374c:	3601      	adds	r6, #1
 800374e:	e7f2      	b.n	8003736 <__libc_init_array+0x1e>
 8003750:	080073ac 	.word	0x080073ac
 8003754:	080073ac 	.word	0x080073ac
 8003758:	080073ac 	.word	0x080073ac
 800375c:	080073b0 	.word	0x080073b0

08003760 <malloc>:
 8003760:	4b02      	ldr	r3, [pc, #8]	; (800376c <malloc+0xc>)
 8003762:	4601      	mov	r1, r0
 8003764:	6818      	ldr	r0, [r3, #0]
 8003766:	f000 b885 	b.w	8003874 <_malloc_r>
 800376a:	bf00      	nop
 800376c:	20000018 	.word	0x20000018

08003770 <memcpy>:
 8003770:	440a      	add	r2, r1
 8003772:	4291      	cmp	r1, r2
 8003774:	f100 33ff 	add.w	r3, r0, #4294967295
 8003778:	d100      	bne.n	800377c <memcpy+0xc>
 800377a:	4770      	bx	lr
 800377c:	b510      	push	{r4, lr}
 800377e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003782:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003786:	4291      	cmp	r1, r2
 8003788:	d1f9      	bne.n	800377e <memcpy+0xe>
 800378a:	bd10      	pop	{r4, pc}

0800378c <memset>:
 800378c:	4402      	add	r2, r0
 800378e:	4603      	mov	r3, r0
 8003790:	4293      	cmp	r3, r2
 8003792:	d100      	bne.n	8003796 <memset+0xa>
 8003794:	4770      	bx	lr
 8003796:	f803 1b01 	strb.w	r1, [r3], #1
 800379a:	e7f9      	b.n	8003790 <memset+0x4>

0800379c <_free_r>:
 800379c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800379e:	2900      	cmp	r1, #0
 80037a0:	d044      	beq.n	800382c <_free_r+0x90>
 80037a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80037a6:	9001      	str	r0, [sp, #4]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	f1a1 0404 	sub.w	r4, r1, #4
 80037ae:	bfb8      	it	lt
 80037b0:	18e4      	addlt	r4, r4, r3
 80037b2:	f001 fbf3 	bl	8004f9c <__malloc_lock>
 80037b6:	4a1e      	ldr	r2, [pc, #120]	; (8003830 <_free_r+0x94>)
 80037b8:	9801      	ldr	r0, [sp, #4]
 80037ba:	6813      	ldr	r3, [r2, #0]
 80037bc:	b933      	cbnz	r3, 80037cc <_free_r+0x30>
 80037be:	6063      	str	r3, [r4, #4]
 80037c0:	6014      	str	r4, [r2, #0]
 80037c2:	b003      	add	sp, #12
 80037c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80037c8:	f001 bbee 	b.w	8004fa8 <__malloc_unlock>
 80037cc:	42a3      	cmp	r3, r4
 80037ce:	d908      	bls.n	80037e2 <_free_r+0x46>
 80037d0:	6825      	ldr	r5, [r4, #0]
 80037d2:	1961      	adds	r1, r4, r5
 80037d4:	428b      	cmp	r3, r1
 80037d6:	bf01      	itttt	eq
 80037d8:	6819      	ldreq	r1, [r3, #0]
 80037da:	685b      	ldreq	r3, [r3, #4]
 80037dc:	1949      	addeq	r1, r1, r5
 80037de:	6021      	streq	r1, [r4, #0]
 80037e0:	e7ed      	b.n	80037be <_free_r+0x22>
 80037e2:	461a      	mov	r2, r3
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	b10b      	cbz	r3, 80037ec <_free_r+0x50>
 80037e8:	42a3      	cmp	r3, r4
 80037ea:	d9fa      	bls.n	80037e2 <_free_r+0x46>
 80037ec:	6811      	ldr	r1, [r2, #0]
 80037ee:	1855      	adds	r5, r2, r1
 80037f0:	42a5      	cmp	r5, r4
 80037f2:	d10b      	bne.n	800380c <_free_r+0x70>
 80037f4:	6824      	ldr	r4, [r4, #0]
 80037f6:	4421      	add	r1, r4
 80037f8:	1854      	adds	r4, r2, r1
 80037fa:	42a3      	cmp	r3, r4
 80037fc:	6011      	str	r1, [r2, #0]
 80037fe:	d1e0      	bne.n	80037c2 <_free_r+0x26>
 8003800:	681c      	ldr	r4, [r3, #0]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	6053      	str	r3, [r2, #4]
 8003806:	4421      	add	r1, r4
 8003808:	6011      	str	r1, [r2, #0]
 800380a:	e7da      	b.n	80037c2 <_free_r+0x26>
 800380c:	d902      	bls.n	8003814 <_free_r+0x78>
 800380e:	230c      	movs	r3, #12
 8003810:	6003      	str	r3, [r0, #0]
 8003812:	e7d6      	b.n	80037c2 <_free_r+0x26>
 8003814:	6825      	ldr	r5, [r4, #0]
 8003816:	1961      	adds	r1, r4, r5
 8003818:	428b      	cmp	r3, r1
 800381a:	bf04      	itt	eq
 800381c:	6819      	ldreq	r1, [r3, #0]
 800381e:	685b      	ldreq	r3, [r3, #4]
 8003820:	6063      	str	r3, [r4, #4]
 8003822:	bf04      	itt	eq
 8003824:	1949      	addeq	r1, r1, r5
 8003826:	6021      	streq	r1, [r4, #0]
 8003828:	6054      	str	r4, [r2, #4]
 800382a:	e7ca      	b.n	80037c2 <_free_r+0x26>
 800382c:	b003      	add	sp, #12
 800382e:	bd30      	pop	{r4, r5, pc}
 8003830:	20000304 	.word	0x20000304

08003834 <sbrk_aligned>:
 8003834:	b570      	push	{r4, r5, r6, lr}
 8003836:	4e0e      	ldr	r6, [pc, #56]	; (8003870 <sbrk_aligned+0x3c>)
 8003838:	460c      	mov	r4, r1
 800383a:	6831      	ldr	r1, [r6, #0]
 800383c:	4605      	mov	r5, r0
 800383e:	b911      	cbnz	r1, 8003846 <sbrk_aligned+0x12>
 8003840:	f000 fcf6 	bl	8004230 <_sbrk_r>
 8003844:	6030      	str	r0, [r6, #0]
 8003846:	4621      	mov	r1, r4
 8003848:	4628      	mov	r0, r5
 800384a:	f000 fcf1 	bl	8004230 <_sbrk_r>
 800384e:	1c43      	adds	r3, r0, #1
 8003850:	d00a      	beq.n	8003868 <sbrk_aligned+0x34>
 8003852:	1cc4      	adds	r4, r0, #3
 8003854:	f024 0403 	bic.w	r4, r4, #3
 8003858:	42a0      	cmp	r0, r4
 800385a:	d007      	beq.n	800386c <sbrk_aligned+0x38>
 800385c:	1a21      	subs	r1, r4, r0
 800385e:	4628      	mov	r0, r5
 8003860:	f000 fce6 	bl	8004230 <_sbrk_r>
 8003864:	3001      	adds	r0, #1
 8003866:	d101      	bne.n	800386c <sbrk_aligned+0x38>
 8003868:	f04f 34ff 	mov.w	r4, #4294967295
 800386c:	4620      	mov	r0, r4
 800386e:	bd70      	pop	{r4, r5, r6, pc}
 8003870:	20000308 	.word	0x20000308

08003874 <_malloc_r>:
 8003874:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003878:	1ccd      	adds	r5, r1, #3
 800387a:	f025 0503 	bic.w	r5, r5, #3
 800387e:	3508      	adds	r5, #8
 8003880:	2d0c      	cmp	r5, #12
 8003882:	bf38      	it	cc
 8003884:	250c      	movcc	r5, #12
 8003886:	2d00      	cmp	r5, #0
 8003888:	4607      	mov	r7, r0
 800388a:	db01      	blt.n	8003890 <_malloc_r+0x1c>
 800388c:	42a9      	cmp	r1, r5
 800388e:	d905      	bls.n	800389c <_malloc_r+0x28>
 8003890:	230c      	movs	r3, #12
 8003892:	603b      	str	r3, [r7, #0]
 8003894:	2600      	movs	r6, #0
 8003896:	4630      	mov	r0, r6
 8003898:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800389c:	4e2e      	ldr	r6, [pc, #184]	; (8003958 <_malloc_r+0xe4>)
 800389e:	f001 fb7d 	bl	8004f9c <__malloc_lock>
 80038a2:	6833      	ldr	r3, [r6, #0]
 80038a4:	461c      	mov	r4, r3
 80038a6:	bb34      	cbnz	r4, 80038f6 <_malloc_r+0x82>
 80038a8:	4629      	mov	r1, r5
 80038aa:	4638      	mov	r0, r7
 80038ac:	f7ff ffc2 	bl	8003834 <sbrk_aligned>
 80038b0:	1c43      	adds	r3, r0, #1
 80038b2:	4604      	mov	r4, r0
 80038b4:	d14d      	bne.n	8003952 <_malloc_r+0xde>
 80038b6:	6834      	ldr	r4, [r6, #0]
 80038b8:	4626      	mov	r6, r4
 80038ba:	2e00      	cmp	r6, #0
 80038bc:	d140      	bne.n	8003940 <_malloc_r+0xcc>
 80038be:	6823      	ldr	r3, [r4, #0]
 80038c0:	4631      	mov	r1, r6
 80038c2:	4638      	mov	r0, r7
 80038c4:	eb04 0803 	add.w	r8, r4, r3
 80038c8:	f000 fcb2 	bl	8004230 <_sbrk_r>
 80038cc:	4580      	cmp	r8, r0
 80038ce:	d13a      	bne.n	8003946 <_malloc_r+0xd2>
 80038d0:	6821      	ldr	r1, [r4, #0]
 80038d2:	3503      	adds	r5, #3
 80038d4:	1a6d      	subs	r5, r5, r1
 80038d6:	f025 0503 	bic.w	r5, r5, #3
 80038da:	3508      	adds	r5, #8
 80038dc:	2d0c      	cmp	r5, #12
 80038de:	bf38      	it	cc
 80038e0:	250c      	movcc	r5, #12
 80038e2:	4629      	mov	r1, r5
 80038e4:	4638      	mov	r0, r7
 80038e6:	f7ff ffa5 	bl	8003834 <sbrk_aligned>
 80038ea:	3001      	adds	r0, #1
 80038ec:	d02b      	beq.n	8003946 <_malloc_r+0xd2>
 80038ee:	6823      	ldr	r3, [r4, #0]
 80038f0:	442b      	add	r3, r5
 80038f2:	6023      	str	r3, [r4, #0]
 80038f4:	e00e      	b.n	8003914 <_malloc_r+0xa0>
 80038f6:	6822      	ldr	r2, [r4, #0]
 80038f8:	1b52      	subs	r2, r2, r5
 80038fa:	d41e      	bmi.n	800393a <_malloc_r+0xc6>
 80038fc:	2a0b      	cmp	r2, #11
 80038fe:	d916      	bls.n	800392e <_malloc_r+0xba>
 8003900:	1961      	adds	r1, r4, r5
 8003902:	42a3      	cmp	r3, r4
 8003904:	6025      	str	r5, [r4, #0]
 8003906:	bf18      	it	ne
 8003908:	6059      	strne	r1, [r3, #4]
 800390a:	6863      	ldr	r3, [r4, #4]
 800390c:	bf08      	it	eq
 800390e:	6031      	streq	r1, [r6, #0]
 8003910:	5162      	str	r2, [r4, r5]
 8003912:	604b      	str	r3, [r1, #4]
 8003914:	4638      	mov	r0, r7
 8003916:	f104 060b 	add.w	r6, r4, #11
 800391a:	f001 fb45 	bl	8004fa8 <__malloc_unlock>
 800391e:	f026 0607 	bic.w	r6, r6, #7
 8003922:	1d23      	adds	r3, r4, #4
 8003924:	1af2      	subs	r2, r6, r3
 8003926:	d0b6      	beq.n	8003896 <_malloc_r+0x22>
 8003928:	1b9b      	subs	r3, r3, r6
 800392a:	50a3      	str	r3, [r4, r2]
 800392c:	e7b3      	b.n	8003896 <_malloc_r+0x22>
 800392e:	6862      	ldr	r2, [r4, #4]
 8003930:	42a3      	cmp	r3, r4
 8003932:	bf0c      	ite	eq
 8003934:	6032      	streq	r2, [r6, #0]
 8003936:	605a      	strne	r2, [r3, #4]
 8003938:	e7ec      	b.n	8003914 <_malloc_r+0xa0>
 800393a:	4623      	mov	r3, r4
 800393c:	6864      	ldr	r4, [r4, #4]
 800393e:	e7b2      	b.n	80038a6 <_malloc_r+0x32>
 8003940:	4634      	mov	r4, r6
 8003942:	6876      	ldr	r6, [r6, #4]
 8003944:	e7b9      	b.n	80038ba <_malloc_r+0x46>
 8003946:	230c      	movs	r3, #12
 8003948:	603b      	str	r3, [r7, #0]
 800394a:	4638      	mov	r0, r7
 800394c:	f001 fb2c 	bl	8004fa8 <__malloc_unlock>
 8003950:	e7a1      	b.n	8003896 <_malloc_r+0x22>
 8003952:	6025      	str	r5, [r4, #0]
 8003954:	e7de      	b.n	8003914 <_malloc_r+0xa0>
 8003956:	bf00      	nop
 8003958:	20000304 	.word	0x20000304

0800395c <__cvt>:
 800395c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003960:	ec55 4b10 	vmov	r4, r5, d0
 8003964:	2d00      	cmp	r5, #0
 8003966:	460e      	mov	r6, r1
 8003968:	4619      	mov	r1, r3
 800396a:	462b      	mov	r3, r5
 800396c:	bfbb      	ittet	lt
 800396e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8003972:	461d      	movlt	r5, r3
 8003974:	2300      	movge	r3, #0
 8003976:	232d      	movlt	r3, #45	; 0x2d
 8003978:	700b      	strb	r3, [r1, #0]
 800397a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800397c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8003980:	4691      	mov	r9, r2
 8003982:	f023 0820 	bic.w	r8, r3, #32
 8003986:	bfbc      	itt	lt
 8003988:	4622      	movlt	r2, r4
 800398a:	4614      	movlt	r4, r2
 800398c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003990:	d005      	beq.n	800399e <__cvt+0x42>
 8003992:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003996:	d100      	bne.n	800399a <__cvt+0x3e>
 8003998:	3601      	adds	r6, #1
 800399a:	2102      	movs	r1, #2
 800399c:	e000      	b.n	80039a0 <__cvt+0x44>
 800399e:	2103      	movs	r1, #3
 80039a0:	ab03      	add	r3, sp, #12
 80039a2:	9301      	str	r3, [sp, #4]
 80039a4:	ab02      	add	r3, sp, #8
 80039a6:	9300      	str	r3, [sp, #0]
 80039a8:	ec45 4b10 	vmov	d0, r4, r5
 80039ac:	4653      	mov	r3, sl
 80039ae:	4632      	mov	r2, r6
 80039b0:	f000 fd02 	bl	80043b8 <_dtoa_r>
 80039b4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80039b8:	4607      	mov	r7, r0
 80039ba:	d102      	bne.n	80039c2 <__cvt+0x66>
 80039bc:	f019 0f01 	tst.w	r9, #1
 80039c0:	d022      	beq.n	8003a08 <__cvt+0xac>
 80039c2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80039c6:	eb07 0906 	add.w	r9, r7, r6
 80039ca:	d110      	bne.n	80039ee <__cvt+0x92>
 80039cc:	783b      	ldrb	r3, [r7, #0]
 80039ce:	2b30      	cmp	r3, #48	; 0x30
 80039d0:	d10a      	bne.n	80039e8 <__cvt+0x8c>
 80039d2:	2200      	movs	r2, #0
 80039d4:	2300      	movs	r3, #0
 80039d6:	4620      	mov	r0, r4
 80039d8:	4629      	mov	r1, r5
 80039da:	f7fd f895 	bl	8000b08 <__aeabi_dcmpeq>
 80039de:	b918      	cbnz	r0, 80039e8 <__cvt+0x8c>
 80039e0:	f1c6 0601 	rsb	r6, r6, #1
 80039e4:	f8ca 6000 	str.w	r6, [sl]
 80039e8:	f8da 3000 	ldr.w	r3, [sl]
 80039ec:	4499      	add	r9, r3
 80039ee:	2200      	movs	r2, #0
 80039f0:	2300      	movs	r3, #0
 80039f2:	4620      	mov	r0, r4
 80039f4:	4629      	mov	r1, r5
 80039f6:	f7fd f887 	bl	8000b08 <__aeabi_dcmpeq>
 80039fa:	b108      	cbz	r0, 8003a00 <__cvt+0xa4>
 80039fc:	f8cd 900c 	str.w	r9, [sp, #12]
 8003a00:	2230      	movs	r2, #48	; 0x30
 8003a02:	9b03      	ldr	r3, [sp, #12]
 8003a04:	454b      	cmp	r3, r9
 8003a06:	d307      	bcc.n	8003a18 <__cvt+0xbc>
 8003a08:	9b03      	ldr	r3, [sp, #12]
 8003a0a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003a0c:	1bdb      	subs	r3, r3, r7
 8003a0e:	4638      	mov	r0, r7
 8003a10:	6013      	str	r3, [r2, #0]
 8003a12:	b004      	add	sp, #16
 8003a14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a18:	1c59      	adds	r1, r3, #1
 8003a1a:	9103      	str	r1, [sp, #12]
 8003a1c:	701a      	strb	r2, [r3, #0]
 8003a1e:	e7f0      	b.n	8003a02 <__cvt+0xa6>

08003a20 <__exponent>:
 8003a20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003a22:	4603      	mov	r3, r0
 8003a24:	2900      	cmp	r1, #0
 8003a26:	bfb8      	it	lt
 8003a28:	4249      	neglt	r1, r1
 8003a2a:	f803 2b02 	strb.w	r2, [r3], #2
 8003a2e:	bfb4      	ite	lt
 8003a30:	222d      	movlt	r2, #45	; 0x2d
 8003a32:	222b      	movge	r2, #43	; 0x2b
 8003a34:	2909      	cmp	r1, #9
 8003a36:	7042      	strb	r2, [r0, #1]
 8003a38:	dd2a      	ble.n	8003a90 <__exponent+0x70>
 8003a3a:	f10d 0407 	add.w	r4, sp, #7
 8003a3e:	46a4      	mov	ip, r4
 8003a40:	270a      	movs	r7, #10
 8003a42:	46a6      	mov	lr, r4
 8003a44:	460a      	mov	r2, r1
 8003a46:	fb91 f6f7 	sdiv	r6, r1, r7
 8003a4a:	fb07 1516 	mls	r5, r7, r6, r1
 8003a4e:	3530      	adds	r5, #48	; 0x30
 8003a50:	2a63      	cmp	r2, #99	; 0x63
 8003a52:	f104 34ff 	add.w	r4, r4, #4294967295
 8003a56:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8003a5a:	4631      	mov	r1, r6
 8003a5c:	dcf1      	bgt.n	8003a42 <__exponent+0x22>
 8003a5e:	3130      	adds	r1, #48	; 0x30
 8003a60:	f1ae 0502 	sub.w	r5, lr, #2
 8003a64:	f804 1c01 	strb.w	r1, [r4, #-1]
 8003a68:	1c44      	adds	r4, r0, #1
 8003a6a:	4629      	mov	r1, r5
 8003a6c:	4561      	cmp	r1, ip
 8003a6e:	d30a      	bcc.n	8003a86 <__exponent+0x66>
 8003a70:	f10d 0209 	add.w	r2, sp, #9
 8003a74:	eba2 020e 	sub.w	r2, r2, lr
 8003a78:	4565      	cmp	r5, ip
 8003a7a:	bf88      	it	hi
 8003a7c:	2200      	movhi	r2, #0
 8003a7e:	4413      	add	r3, r2
 8003a80:	1a18      	subs	r0, r3, r0
 8003a82:	b003      	add	sp, #12
 8003a84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a86:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003a8a:	f804 2f01 	strb.w	r2, [r4, #1]!
 8003a8e:	e7ed      	b.n	8003a6c <__exponent+0x4c>
 8003a90:	2330      	movs	r3, #48	; 0x30
 8003a92:	3130      	adds	r1, #48	; 0x30
 8003a94:	7083      	strb	r3, [r0, #2]
 8003a96:	70c1      	strb	r1, [r0, #3]
 8003a98:	1d03      	adds	r3, r0, #4
 8003a9a:	e7f1      	b.n	8003a80 <__exponent+0x60>

08003a9c <_printf_float>:
 8003a9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003aa0:	ed2d 8b02 	vpush	{d8}
 8003aa4:	b08d      	sub	sp, #52	; 0x34
 8003aa6:	460c      	mov	r4, r1
 8003aa8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8003aac:	4616      	mov	r6, r2
 8003aae:	461f      	mov	r7, r3
 8003ab0:	4605      	mov	r5, r0
 8003ab2:	f001 fa6f 	bl	8004f94 <_localeconv_r>
 8003ab6:	f8d0 a000 	ldr.w	sl, [r0]
 8003aba:	4650      	mov	r0, sl
 8003abc:	f7fc fba8 	bl	8000210 <strlen>
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	930a      	str	r3, [sp, #40]	; 0x28
 8003ac4:	6823      	ldr	r3, [r4, #0]
 8003ac6:	9305      	str	r3, [sp, #20]
 8003ac8:	f8d8 3000 	ldr.w	r3, [r8]
 8003acc:	f894 b018 	ldrb.w	fp, [r4, #24]
 8003ad0:	3307      	adds	r3, #7
 8003ad2:	f023 0307 	bic.w	r3, r3, #7
 8003ad6:	f103 0208 	add.w	r2, r3, #8
 8003ada:	f8c8 2000 	str.w	r2, [r8]
 8003ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ae2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003ae6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8003aea:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8003aee:	9307      	str	r3, [sp, #28]
 8003af0:	f8cd 8018 	str.w	r8, [sp, #24]
 8003af4:	ee08 0a10 	vmov	s16, r0
 8003af8:	4b9f      	ldr	r3, [pc, #636]	; (8003d78 <_printf_float+0x2dc>)
 8003afa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003afe:	f04f 32ff 	mov.w	r2, #4294967295
 8003b02:	f7fd f833 	bl	8000b6c <__aeabi_dcmpun>
 8003b06:	bb88      	cbnz	r0, 8003b6c <_printf_float+0xd0>
 8003b08:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003b0c:	4b9a      	ldr	r3, [pc, #616]	; (8003d78 <_printf_float+0x2dc>)
 8003b0e:	f04f 32ff 	mov.w	r2, #4294967295
 8003b12:	f7fd f80d 	bl	8000b30 <__aeabi_dcmple>
 8003b16:	bb48      	cbnz	r0, 8003b6c <_printf_float+0xd0>
 8003b18:	2200      	movs	r2, #0
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	4640      	mov	r0, r8
 8003b1e:	4649      	mov	r1, r9
 8003b20:	f7fc fffc 	bl	8000b1c <__aeabi_dcmplt>
 8003b24:	b110      	cbz	r0, 8003b2c <_printf_float+0x90>
 8003b26:	232d      	movs	r3, #45	; 0x2d
 8003b28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003b2c:	4b93      	ldr	r3, [pc, #588]	; (8003d7c <_printf_float+0x2e0>)
 8003b2e:	4894      	ldr	r0, [pc, #592]	; (8003d80 <_printf_float+0x2e4>)
 8003b30:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8003b34:	bf94      	ite	ls
 8003b36:	4698      	movls	r8, r3
 8003b38:	4680      	movhi	r8, r0
 8003b3a:	2303      	movs	r3, #3
 8003b3c:	6123      	str	r3, [r4, #16]
 8003b3e:	9b05      	ldr	r3, [sp, #20]
 8003b40:	f023 0204 	bic.w	r2, r3, #4
 8003b44:	6022      	str	r2, [r4, #0]
 8003b46:	f04f 0900 	mov.w	r9, #0
 8003b4a:	9700      	str	r7, [sp, #0]
 8003b4c:	4633      	mov	r3, r6
 8003b4e:	aa0b      	add	r2, sp, #44	; 0x2c
 8003b50:	4621      	mov	r1, r4
 8003b52:	4628      	mov	r0, r5
 8003b54:	f000 f9d8 	bl	8003f08 <_printf_common>
 8003b58:	3001      	adds	r0, #1
 8003b5a:	f040 8090 	bne.w	8003c7e <_printf_float+0x1e2>
 8003b5e:	f04f 30ff 	mov.w	r0, #4294967295
 8003b62:	b00d      	add	sp, #52	; 0x34
 8003b64:	ecbd 8b02 	vpop	{d8}
 8003b68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b6c:	4642      	mov	r2, r8
 8003b6e:	464b      	mov	r3, r9
 8003b70:	4640      	mov	r0, r8
 8003b72:	4649      	mov	r1, r9
 8003b74:	f7fc fffa 	bl	8000b6c <__aeabi_dcmpun>
 8003b78:	b140      	cbz	r0, 8003b8c <_printf_float+0xf0>
 8003b7a:	464b      	mov	r3, r9
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	bfbc      	itt	lt
 8003b80:	232d      	movlt	r3, #45	; 0x2d
 8003b82:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003b86:	487f      	ldr	r0, [pc, #508]	; (8003d84 <_printf_float+0x2e8>)
 8003b88:	4b7f      	ldr	r3, [pc, #508]	; (8003d88 <_printf_float+0x2ec>)
 8003b8a:	e7d1      	b.n	8003b30 <_printf_float+0x94>
 8003b8c:	6863      	ldr	r3, [r4, #4]
 8003b8e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8003b92:	9206      	str	r2, [sp, #24]
 8003b94:	1c5a      	adds	r2, r3, #1
 8003b96:	d13f      	bne.n	8003c18 <_printf_float+0x17c>
 8003b98:	2306      	movs	r3, #6
 8003b9a:	6063      	str	r3, [r4, #4]
 8003b9c:	9b05      	ldr	r3, [sp, #20]
 8003b9e:	6861      	ldr	r1, [r4, #4]
 8003ba0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	9303      	str	r3, [sp, #12]
 8003ba8:	ab0a      	add	r3, sp, #40	; 0x28
 8003baa:	e9cd b301 	strd	fp, r3, [sp, #4]
 8003bae:	ab09      	add	r3, sp, #36	; 0x24
 8003bb0:	ec49 8b10 	vmov	d0, r8, r9
 8003bb4:	9300      	str	r3, [sp, #0]
 8003bb6:	6022      	str	r2, [r4, #0]
 8003bb8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8003bbc:	4628      	mov	r0, r5
 8003bbe:	f7ff fecd 	bl	800395c <__cvt>
 8003bc2:	9b06      	ldr	r3, [sp, #24]
 8003bc4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003bc6:	2b47      	cmp	r3, #71	; 0x47
 8003bc8:	4680      	mov	r8, r0
 8003bca:	d108      	bne.n	8003bde <_printf_float+0x142>
 8003bcc:	1cc8      	adds	r0, r1, #3
 8003bce:	db02      	blt.n	8003bd6 <_printf_float+0x13a>
 8003bd0:	6863      	ldr	r3, [r4, #4]
 8003bd2:	4299      	cmp	r1, r3
 8003bd4:	dd41      	ble.n	8003c5a <_printf_float+0x1be>
 8003bd6:	f1ab 0b02 	sub.w	fp, fp, #2
 8003bda:	fa5f fb8b 	uxtb.w	fp, fp
 8003bde:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003be2:	d820      	bhi.n	8003c26 <_printf_float+0x18a>
 8003be4:	3901      	subs	r1, #1
 8003be6:	465a      	mov	r2, fp
 8003be8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003bec:	9109      	str	r1, [sp, #36]	; 0x24
 8003bee:	f7ff ff17 	bl	8003a20 <__exponent>
 8003bf2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003bf4:	1813      	adds	r3, r2, r0
 8003bf6:	2a01      	cmp	r2, #1
 8003bf8:	4681      	mov	r9, r0
 8003bfa:	6123      	str	r3, [r4, #16]
 8003bfc:	dc02      	bgt.n	8003c04 <_printf_float+0x168>
 8003bfe:	6822      	ldr	r2, [r4, #0]
 8003c00:	07d2      	lsls	r2, r2, #31
 8003c02:	d501      	bpl.n	8003c08 <_printf_float+0x16c>
 8003c04:	3301      	adds	r3, #1
 8003c06:	6123      	str	r3, [r4, #16]
 8003c08:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d09c      	beq.n	8003b4a <_printf_float+0xae>
 8003c10:	232d      	movs	r3, #45	; 0x2d
 8003c12:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003c16:	e798      	b.n	8003b4a <_printf_float+0xae>
 8003c18:	9a06      	ldr	r2, [sp, #24]
 8003c1a:	2a47      	cmp	r2, #71	; 0x47
 8003c1c:	d1be      	bne.n	8003b9c <_printf_float+0x100>
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d1bc      	bne.n	8003b9c <_printf_float+0x100>
 8003c22:	2301      	movs	r3, #1
 8003c24:	e7b9      	b.n	8003b9a <_printf_float+0xfe>
 8003c26:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8003c2a:	d118      	bne.n	8003c5e <_printf_float+0x1c2>
 8003c2c:	2900      	cmp	r1, #0
 8003c2e:	6863      	ldr	r3, [r4, #4]
 8003c30:	dd0b      	ble.n	8003c4a <_printf_float+0x1ae>
 8003c32:	6121      	str	r1, [r4, #16]
 8003c34:	b913      	cbnz	r3, 8003c3c <_printf_float+0x1a0>
 8003c36:	6822      	ldr	r2, [r4, #0]
 8003c38:	07d0      	lsls	r0, r2, #31
 8003c3a:	d502      	bpl.n	8003c42 <_printf_float+0x1a6>
 8003c3c:	3301      	adds	r3, #1
 8003c3e:	440b      	add	r3, r1
 8003c40:	6123      	str	r3, [r4, #16]
 8003c42:	65a1      	str	r1, [r4, #88]	; 0x58
 8003c44:	f04f 0900 	mov.w	r9, #0
 8003c48:	e7de      	b.n	8003c08 <_printf_float+0x16c>
 8003c4a:	b913      	cbnz	r3, 8003c52 <_printf_float+0x1b6>
 8003c4c:	6822      	ldr	r2, [r4, #0]
 8003c4e:	07d2      	lsls	r2, r2, #31
 8003c50:	d501      	bpl.n	8003c56 <_printf_float+0x1ba>
 8003c52:	3302      	adds	r3, #2
 8003c54:	e7f4      	b.n	8003c40 <_printf_float+0x1a4>
 8003c56:	2301      	movs	r3, #1
 8003c58:	e7f2      	b.n	8003c40 <_printf_float+0x1a4>
 8003c5a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8003c5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003c60:	4299      	cmp	r1, r3
 8003c62:	db05      	blt.n	8003c70 <_printf_float+0x1d4>
 8003c64:	6823      	ldr	r3, [r4, #0]
 8003c66:	6121      	str	r1, [r4, #16]
 8003c68:	07d8      	lsls	r0, r3, #31
 8003c6a:	d5ea      	bpl.n	8003c42 <_printf_float+0x1a6>
 8003c6c:	1c4b      	adds	r3, r1, #1
 8003c6e:	e7e7      	b.n	8003c40 <_printf_float+0x1a4>
 8003c70:	2900      	cmp	r1, #0
 8003c72:	bfd4      	ite	le
 8003c74:	f1c1 0202 	rsble	r2, r1, #2
 8003c78:	2201      	movgt	r2, #1
 8003c7a:	4413      	add	r3, r2
 8003c7c:	e7e0      	b.n	8003c40 <_printf_float+0x1a4>
 8003c7e:	6823      	ldr	r3, [r4, #0]
 8003c80:	055a      	lsls	r2, r3, #21
 8003c82:	d407      	bmi.n	8003c94 <_printf_float+0x1f8>
 8003c84:	6923      	ldr	r3, [r4, #16]
 8003c86:	4642      	mov	r2, r8
 8003c88:	4631      	mov	r1, r6
 8003c8a:	4628      	mov	r0, r5
 8003c8c:	47b8      	blx	r7
 8003c8e:	3001      	adds	r0, #1
 8003c90:	d12c      	bne.n	8003cec <_printf_float+0x250>
 8003c92:	e764      	b.n	8003b5e <_printf_float+0xc2>
 8003c94:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003c98:	f240 80e0 	bls.w	8003e5c <_printf_float+0x3c0>
 8003c9c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	f7fc ff30 	bl	8000b08 <__aeabi_dcmpeq>
 8003ca8:	2800      	cmp	r0, #0
 8003caa:	d034      	beq.n	8003d16 <_printf_float+0x27a>
 8003cac:	4a37      	ldr	r2, [pc, #220]	; (8003d8c <_printf_float+0x2f0>)
 8003cae:	2301      	movs	r3, #1
 8003cb0:	4631      	mov	r1, r6
 8003cb2:	4628      	mov	r0, r5
 8003cb4:	47b8      	blx	r7
 8003cb6:	3001      	adds	r0, #1
 8003cb8:	f43f af51 	beq.w	8003b5e <_printf_float+0xc2>
 8003cbc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003cc0:	429a      	cmp	r2, r3
 8003cc2:	db02      	blt.n	8003cca <_printf_float+0x22e>
 8003cc4:	6823      	ldr	r3, [r4, #0]
 8003cc6:	07d8      	lsls	r0, r3, #31
 8003cc8:	d510      	bpl.n	8003cec <_printf_float+0x250>
 8003cca:	ee18 3a10 	vmov	r3, s16
 8003cce:	4652      	mov	r2, sl
 8003cd0:	4631      	mov	r1, r6
 8003cd2:	4628      	mov	r0, r5
 8003cd4:	47b8      	blx	r7
 8003cd6:	3001      	adds	r0, #1
 8003cd8:	f43f af41 	beq.w	8003b5e <_printf_float+0xc2>
 8003cdc:	f04f 0800 	mov.w	r8, #0
 8003ce0:	f104 091a 	add.w	r9, r4, #26
 8003ce4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003ce6:	3b01      	subs	r3, #1
 8003ce8:	4543      	cmp	r3, r8
 8003cea:	dc09      	bgt.n	8003d00 <_printf_float+0x264>
 8003cec:	6823      	ldr	r3, [r4, #0]
 8003cee:	079b      	lsls	r3, r3, #30
 8003cf0:	f100 8105 	bmi.w	8003efe <_printf_float+0x462>
 8003cf4:	68e0      	ldr	r0, [r4, #12]
 8003cf6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003cf8:	4298      	cmp	r0, r3
 8003cfa:	bfb8      	it	lt
 8003cfc:	4618      	movlt	r0, r3
 8003cfe:	e730      	b.n	8003b62 <_printf_float+0xc6>
 8003d00:	2301      	movs	r3, #1
 8003d02:	464a      	mov	r2, r9
 8003d04:	4631      	mov	r1, r6
 8003d06:	4628      	mov	r0, r5
 8003d08:	47b8      	blx	r7
 8003d0a:	3001      	adds	r0, #1
 8003d0c:	f43f af27 	beq.w	8003b5e <_printf_float+0xc2>
 8003d10:	f108 0801 	add.w	r8, r8, #1
 8003d14:	e7e6      	b.n	8003ce4 <_printf_float+0x248>
 8003d16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	dc39      	bgt.n	8003d90 <_printf_float+0x2f4>
 8003d1c:	4a1b      	ldr	r2, [pc, #108]	; (8003d8c <_printf_float+0x2f0>)
 8003d1e:	2301      	movs	r3, #1
 8003d20:	4631      	mov	r1, r6
 8003d22:	4628      	mov	r0, r5
 8003d24:	47b8      	blx	r7
 8003d26:	3001      	adds	r0, #1
 8003d28:	f43f af19 	beq.w	8003b5e <_printf_float+0xc2>
 8003d2c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003d30:	4313      	orrs	r3, r2
 8003d32:	d102      	bne.n	8003d3a <_printf_float+0x29e>
 8003d34:	6823      	ldr	r3, [r4, #0]
 8003d36:	07d9      	lsls	r1, r3, #31
 8003d38:	d5d8      	bpl.n	8003cec <_printf_float+0x250>
 8003d3a:	ee18 3a10 	vmov	r3, s16
 8003d3e:	4652      	mov	r2, sl
 8003d40:	4631      	mov	r1, r6
 8003d42:	4628      	mov	r0, r5
 8003d44:	47b8      	blx	r7
 8003d46:	3001      	adds	r0, #1
 8003d48:	f43f af09 	beq.w	8003b5e <_printf_float+0xc2>
 8003d4c:	f04f 0900 	mov.w	r9, #0
 8003d50:	f104 0a1a 	add.w	sl, r4, #26
 8003d54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003d56:	425b      	negs	r3, r3
 8003d58:	454b      	cmp	r3, r9
 8003d5a:	dc01      	bgt.n	8003d60 <_printf_float+0x2c4>
 8003d5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003d5e:	e792      	b.n	8003c86 <_printf_float+0x1ea>
 8003d60:	2301      	movs	r3, #1
 8003d62:	4652      	mov	r2, sl
 8003d64:	4631      	mov	r1, r6
 8003d66:	4628      	mov	r0, r5
 8003d68:	47b8      	blx	r7
 8003d6a:	3001      	adds	r0, #1
 8003d6c:	f43f aef7 	beq.w	8003b5e <_printf_float+0xc2>
 8003d70:	f109 0901 	add.w	r9, r9, #1
 8003d74:	e7ee      	b.n	8003d54 <_printf_float+0x2b8>
 8003d76:	bf00      	nop
 8003d78:	7fefffff 	.word	0x7fefffff
 8003d7c:	08006fcc 	.word	0x08006fcc
 8003d80:	08006fd0 	.word	0x08006fd0
 8003d84:	08006fd8 	.word	0x08006fd8
 8003d88:	08006fd4 	.word	0x08006fd4
 8003d8c:	08006fdc 	.word	0x08006fdc
 8003d90:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003d92:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003d94:	429a      	cmp	r2, r3
 8003d96:	bfa8      	it	ge
 8003d98:	461a      	movge	r2, r3
 8003d9a:	2a00      	cmp	r2, #0
 8003d9c:	4691      	mov	r9, r2
 8003d9e:	dc37      	bgt.n	8003e10 <_printf_float+0x374>
 8003da0:	f04f 0b00 	mov.w	fp, #0
 8003da4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003da8:	f104 021a 	add.w	r2, r4, #26
 8003dac:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003dae:	9305      	str	r3, [sp, #20]
 8003db0:	eba3 0309 	sub.w	r3, r3, r9
 8003db4:	455b      	cmp	r3, fp
 8003db6:	dc33      	bgt.n	8003e20 <_printf_float+0x384>
 8003db8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003dbc:	429a      	cmp	r2, r3
 8003dbe:	db3b      	blt.n	8003e38 <_printf_float+0x39c>
 8003dc0:	6823      	ldr	r3, [r4, #0]
 8003dc2:	07da      	lsls	r2, r3, #31
 8003dc4:	d438      	bmi.n	8003e38 <_printf_float+0x39c>
 8003dc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003dc8:	9a05      	ldr	r2, [sp, #20]
 8003dca:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003dcc:	1a9a      	subs	r2, r3, r2
 8003dce:	eba3 0901 	sub.w	r9, r3, r1
 8003dd2:	4591      	cmp	r9, r2
 8003dd4:	bfa8      	it	ge
 8003dd6:	4691      	movge	r9, r2
 8003dd8:	f1b9 0f00 	cmp.w	r9, #0
 8003ddc:	dc35      	bgt.n	8003e4a <_printf_float+0x3ae>
 8003dde:	f04f 0800 	mov.w	r8, #0
 8003de2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003de6:	f104 0a1a 	add.w	sl, r4, #26
 8003dea:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003dee:	1a9b      	subs	r3, r3, r2
 8003df0:	eba3 0309 	sub.w	r3, r3, r9
 8003df4:	4543      	cmp	r3, r8
 8003df6:	f77f af79 	ble.w	8003cec <_printf_float+0x250>
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	4652      	mov	r2, sl
 8003dfe:	4631      	mov	r1, r6
 8003e00:	4628      	mov	r0, r5
 8003e02:	47b8      	blx	r7
 8003e04:	3001      	adds	r0, #1
 8003e06:	f43f aeaa 	beq.w	8003b5e <_printf_float+0xc2>
 8003e0a:	f108 0801 	add.w	r8, r8, #1
 8003e0e:	e7ec      	b.n	8003dea <_printf_float+0x34e>
 8003e10:	4613      	mov	r3, r2
 8003e12:	4631      	mov	r1, r6
 8003e14:	4642      	mov	r2, r8
 8003e16:	4628      	mov	r0, r5
 8003e18:	47b8      	blx	r7
 8003e1a:	3001      	adds	r0, #1
 8003e1c:	d1c0      	bne.n	8003da0 <_printf_float+0x304>
 8003e1e:	e69e      	b.n	8003b5e <_printf_float+0xc2>
 8003e20:	2301      	movs	r3, #1
 8003e22:	4631      	mov	r1, r6
 8003e24:	4628      	mov	r0, r5
 8003e26:	9205      	str	r2, [sp, #20]
 8003e28:	47b8      	blx	r7
 8003e2a:	3001      	adds	r0, #1
 8003e2c:	f43f ae97 	beq.w	8003b5e <_printf_float+0xc2>
 8003e30:	9a05      	ldr	r2, [sp, #20]
 8003e32:	f10b 0b01 	add.w	fp, fp, #1
 8003e36:	e7b9      	b.n	8003dac <_printf_float+0x310>
 8003e38:	ee18 3a10 	vmov	r3, s16
 8003e3c:	4652      	mov	r2, sl
 8003e3e:	4631      	mov	r1, r6
 8003e40:	4628      	mov	r0, r5
 8003e42:	47b8      	blx	r7
 8003e44:	3001      	adds	r0, #1
 8003e46:	d1be      	bne.n	8003dc6 <_printf_float+0x32a>
 8003e48:	e689      	b.n	8003b5e <_printf_float+0xc2>
 8003e4a:	9a05      	ldr	r2, [sp, #20]
 8003e4c:	464b      	mov	r3, r9
 8003e4e:	4442      	add	r2, r8
 8003e50:	4631      	mov	r1, r6
 8003e52:	4628      	mov	r0, r5
 8003e54:	47b8      	blx	r7
 8003e56:	3001      	adds	r0, #1
 8003e58:	d1c1      	bne.n	8003dde <_printf_float+0x342>
 8003e5a:	e680      	b.n	8003b5e <_printf_float+0xc2>
 8003e5c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003e5e:	2a01      	cmp	r2, #1
 8003e60:	dc01      	bgt.n	8003e66 <_printf_float+0x3ca>
 8003e62:	07db      	lsls	r3, r3, #31
 8003e64:	d538      	bpl.n	8003ed8 <_printf_float+0x43c>
 8003e66:	2301      	movs	r3, #1
 8003e68:	4642      	mov	r2, r8
 8003e6a:	4631      	mov	r1, r6
 8003e6c:	4628      	mov	r0, r5
 8003e6e:	47b8      	blx	r7
 8003e70:	3001      	adds	r0, #1
 8003e72:	f43f ae74 	beq.w	8003b5e <_printf_float+0xc2>
 8003e76:	ee18 3a10 	vmov	r3, s16
 8003e7a:	4652      	mov	r2, sl
 8003e7c:	4631      	mov	r1, r6
 8003e7e:	4628      	mov	r0, r5
 8003e80:	47b8      	blx	r7
 8003e82:	3001      	adds	r0, #1
 8003e84:	f43f ae6b 	beq.w	8003b5e <_printf_float+0xc2>
 8003e88:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	2300      	movs	r3, #0
 8003e90:	f7fc fe3a 	bl	8000b08 <__aeabi_dcmpeq>
 8003e94:	b9d8      	cbnz	r0, 8003ece <_printf_float+0x432>
 8003e96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003e98:	f108 0201 	add.w	r2, r8, #1
 8003e9c:	3b01      	subs	r3, #1
 8003e9e:	4631      	mov	r1, r6
 8003ea0:	4628      	mov	r0, r5
 8003ea2:	47b8      	blx	r7
 8003ea4:	3001      	adds	r0, #1
 8003ea6:	d10e      	bne.n	8003ec6 <_printf_float+0x42a>
 8003ea8:	e659      	b.n	8003b5e <_printf_float+0xc2>
 8003eaa:	2301      	movs	r3, #1
 8003eac:	4652      	mov	r2, sl
 8003eae:	4631      	mov	r1, r6
 8003eb0:	4628      	mov	r0, r5
 8003eb2:	47b8      	blx	r7
 8003eb4:	3001      	adds	r0, #1
 8003eb6:	f43f ae52 	beq.w	8003b5e <_printf_float+0xc2>
 8003eba:	f108 0801 	add.w	r8, r8, #1
 8003ebe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003ec0:	3b01      	subs	r3, #1
 8003ec2:	4543      	cmp	r3, r8
 8003ec4:	dcf1      	bgt.n	8003eaa <_printf_float+0x40e>
 8003ec6:	464b      	mov	r3, r9
 8003ec8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003ecc:	e6dc      	b.n	8003c88 <_printf_float+0x1ec>
 8003ece:	f04f 0800 	mov.w	r8, #0
 8003ed2:	f104 0a1a 	add.w	sl, r4, #26
 8003ed6:	e7f2      	b.n	8003ebe <_printf_float+0x422>
 8003ed8:	2301      	movs	r3, #1
 8003eda:	4642      	mov	r2, r8
 8003edc:	e7df      	b.n	8003e9e <_printf_float+0x402>
 8003ede:	2301      	movs	r3, #1
 8003ee0:	464a      	mov	r2, r9
 8003ee2:	4631      	mov	r1, r6
 8003ee4:	4628      	mov	r0, r5
 8003ee6:	47b8      	blx	r7
 8003ee8:	3001      	adds	r0, #1
 8003eea:	f43f ae38 	beq.w	8003b5e <_printf_float+0xc2>
 8003eee:	f108 0801 	add.w	r8, r8, #1
 8003ef2:	68e3      	ldr	r3, [r4, #12]
 8003ef4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003ef6:	1a5b      	subs	r3, r3, r1
 8003ef8:	4543      	cmp	r3, r8
 8003efa:	dcf0      	bgt.n	8003ede <_printf_float+0x442>
 8003efc:	e6fa      	b.n	8003cf4 <_printf_float+0x258>
 8003efe:	f04f 0800 	mov.w	r8, #0
 8003f02:	f104 0919 	add.w	r9, r4, #25
 8003f06:	e7f4      	b.n	8003ef2 <_printf_float+0x456>

08003f08 <_printf_common>:
 8003f08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f0c:	4616      	mov	r6, r2
 8003f0e:	4699      	mov	r9, r3
 8003f10:	688a      	ldr	r2, [r1, #8]
 8003f12:	690b      	ldr	r3, [r1, #16]
 8003f14:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	bfb8      	it	lt
 8003f1c:	4613      	movlt	r3, r2
 8003f1e:	6033      	str	r3, [r6, #0]
 8003f20:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003f24:	4607      	mov	r7, r0
 8003f26:	460c      	mov	r4, r1
 8003f28:	b10a      	cbz	r2, 8003f2e <_printf_common+0x26>
 8003f2a:	3301      	adds	r3, #1
 8003f2c:	6033      	str	r3, [r6, #0]
 8003f2e:	6823      	ldr	r3, [r4, #0]
 8003f30:	0699      	lsls	r1, r3, #26
 8003f32:	bf42      	ittt	mi
 8003f34:	6833      	ldrmi	r3, [r6, #0]
 8003f36:	3302      	addmi	r3, #2
 8003f38:	6033      	strmi	r3, [r6, #0]
 8003f3a:	6825      	ldr	r5, [r4, #0]
 8003f3c:	f015 0506 	ands.w	r5, r5, #6
 8003f40:	d106      	bne.n	8003f50 <_printf_common+0x48>
 8003f42:	f104 0a19 	add.w	sl, r4, #25
 8003f46:	68e3      	ldr	r3, [r4, #12]
 8003f48:	6832      	ldr	r2, [r6, #0]
 8003f4a:	1a9b      	subs	r3, r3, r2
 8003f4c:	42ab      	cmp	r3, r5
 8003f4e:	dc26      	bgt.n	8003f9e <_printf_common+0x96>
 8003f50:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003f54:	1e13      	subs	r3, r2, #0
 8003f56:	6822      	ldr	r2, [r4, #0]
 8003f58:	bf18      	it	ne
 8003f5a:	2301      	movne	r3, #1
 8003f5c:	0692      	lsls	r2, r2, #26
 8003f5e:	d42b      	bmi.n	8003fb8 <_printf_common+0xb0>
 8003f60:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003f64:	4649      	mov	r1, r9
 8003f66:	4638      	mov	r0, r7
 8003f68:	47c0      	blx	r8
 8003f6a:	3001      	adds	r0, #1
 8003f6c:	d01e      	beq.n	8003fac <_printf_common+0xa4>
 8003f6e:	6823      	ldr	r3, [r4, #0]
 8003f70:	68e5      	ldr	r5, [r4, #12]
 8003f72:	6832      	ldr	r2, [r6, #0]
 8003f74:	f003 0306 	and.w	r3, r3, #6
 8003f78:	2b04      	cmp	r3, #4
 8003f7a:	bf08      	it	eq
 8003f7c:	1aad      	subeq	r5, r5, r2
 8003f7e:	68a3      	ldr	r3, [r4, #8]
 8003f80:	6922      	ldr	r2, [r4, #16]
 8003f82:	bf0c      	ite	eq
 8003f84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003f88:	2500      	movne	r5, #0
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	bfc4      	itt	gt
 8003f8e:	1a9b      	subgt	r3, r3, r2
 8003f90:	18ed      	addgt	r5, r5, r3
 8003f92:	2600      	movs	r6, #0
 8003f94:	341a      	adds	r4, #26
 8003f96:	42b5      	cmp	r5, r6
 8003f98:	d11a      	bne.n	8003fd0 <_printf_common+0xc8>
 8003f9a:	2000      	movs	r0, #0
 8003f9c:	e008      	b.n	8003fb0 <_printf_common+0xa8>
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	4652      	mov	r2, sl
 8003fa2:	4649      	mov	r1, r9
 8003fa4:	4638      	mov	r0, r7
 8003fa6:	47c0      	blx	r8
 8003fa8:	3001      	adds	r0, #1
 8003faa:	d103      	bne.n	8003fb4 <_printf_common+0xac>
 8003fac:	f04f 30ff 	mov.w	r0, #4294967295
 8003fb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fb4:	3501      	adds	r5, #1
 8003fb6:	e7c6      	b.n	8003f46 <_printf_common+0x3e>
 8003fb8:	18e1      	adds	r1, r4, r3
 8003fba:	1c5a      	adds	r2, r3, #1
 8003fbc:	2030      	movs	r0, #48	; 0x30
 8003fbe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003fc2:	4422      	add	r2, r4
 8003fc4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003fc8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003fcc:	3302      	adds	r3, #2
 8003fce:	e7c7      	b.n	8003f60 <_printf_common+0x58>
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	4622      	mov	r2, r4
 8003fd4:	4649      	mov	r1, r9
 8003fd6:	4638      	mov	r0, r7
 8003fd8:	47c0      	blx	r8
 8003fda:	3001      	adds	r0, #1
 8003fdc:	d0e6      	beq.n	8003fac <_printf_common+0xa4>
 8003fde:	3601      	adds	r6, #1
 8003fe0:	e7d9      	b.n	8003f96 <_printf_common+0x8e>
	...

08003fe4 <_printf_i>:
 8003fe4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003fe8:	7e0f      	ldrb	r7, [r1, #24]
 8003fea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003fec:	2f78      	cmp	r7, #120	; 0x78
 8003fee:	4691      	mov	r9, r2
 8003ff0:	4680      	mov	r8, r0
 8003ff2:	460c      	mov	r4, r1
 8003ff4:	469a      	mov	sl, r3
 8003ff6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003ffa:	d807      	bhi.n	800400c <_printf_i+0x28>
 8003ffc:	2f62      	cmp	r7, #98	; 0x62
 8003ffe:	d80a      	bhi.n	8004016 <_printf_i+0x32>
 8004000:	2f00      	cmp	r7, #0
 8004002:	f000 80d8 	beq.w	80041b6 <_printf_i+0x1d2>
 8004006:	2f58      	cmp	r7, #88	; 0x58
 8004008:	f000 80a3 	beq.w	8004152 <_printf_i+0x16e>
 800400c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004010:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004014:	e03a      	b.n	800408c <_printf_i+0xa8>
 8004016:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800401a:	2b15      	cmp	r3, #21
 800401c:	d8f6      	bhi.n	800400c <_printf_i+0x28>
 800401e:	a101      	add	r1, pc, #4	; (adr r1, 8004024 <_printf_i+0x40>)
 8004020:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004024:	0800407d 	.word	0x0800407d
 8004028:	08004091 	.word	0x08004091
 800402c:	0800400d 	.word	0x0800400d
 8004030:	0800400d 	.word	0x0800400d
 8004034:	0800400d 	.word	0x0800400d
 8004038:	0800400d 	.word	0x0800400d
 800403c:	08004091 	.word	0x08004091
 8004040:	0800400d 	.word	0x0800400d
 8004044:	0800400d 	.word	0x0800400d
 8004048:	0800400d 	.word	0x0800400d
 800404c:	0800400d 	.word	0x0800400d
 8004050:	0800419d 	.word	0x0800419d
 8004054:	080040c1 	.word	0x080040c1
 8004058:	0800417f 	.word	0x0800417f
 800405c:	0800400d 	.word	0x0800400d
 8004060:	0800400d 	.word	0x0800400d
 8004064:	080041bf 	.word	0x080041bf
 8004068:	0800400d 	.word	0x0800400d
 800406c:	080040c1 	.word	0x080040c1
 8004070:	0800400d 	.word	0x0800400d
 8004074:	0800400d 	.word	0x0800400d
 8004078:	08004187 	.word	0x08004187
 800407c:	682b      	ldr	r3, [r5, #0]
 800407e:	1d1a      	adds	r2, r3, #4
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	602a      	str	r2, [r5, #0]
 8004084:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004088:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800408c:	2301      	movs	r3, #1
 800408e:	e0a3      	b.n	80041d8 <_printf_i+0x1f4>
 8004090:	6820      	ldr	r0, [r4, #0]
 8004092:	6829      	ldr	r1, [r5, #0]
 8004094:	0606      	lsls	r6, r0, #24
 8004096:	f101 0304 	add.w	r3, r1, #4
 800409a:	d50a      	bpl.n	80040b2 <_printf_i+0xce>
 800409c:	680e      	ldr	r6, [r1, #0]
 800409e:	602b      	str	r3, [r5, #0]
 80040a0:	2e00      	cmp	r6, #0
 80040a2:	da03      	bge.n	80040ac <_printf_i+0xc8>
 80040a4:	232d      	movs	r3, #45	; 0x2d
 80040a6:	4276      	negs	r6, r6
 80040a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80040ac:	485e      	ldr	r0, [pc, #376]	; (8004228 <_printf_i+0x244>)
 80040ae:	230a      	movs	r3, #10
 80040b0:	e019      	b.n	80040e6 <_printf_i+0x102>
 80040b2:	680e      	ldr	r6, [r1, #0]
 80040b4:	602b      	str	r3, [r5, #0]
 80040b6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80040ba:	bf18      	it	ne
 80040bc:	b236      	sxthne	r6, r6
 80040be:	e7ef      	b.n	80040a0 <_printf_i+0xbc>
 80040c0:	682b      	ldr	r3, [r5, #0]
 80040c2:	6820      	ldr	r0, [r4, #0]
 80040c4:	1d19      	adds	r1, r3, #4
 80040c6:	6029      	str	r1, [r5, #0]
 80040c8:	0601      	lsls	r1, r0, #24
 80040ca:	d501      	bpl.n	80040d0 <_printf_i+0xec>
 80040cc:	681e      	ldr	r6, [r3, #0]
 80040ce:	e002      	b.n	80040d6 <_printf_i+0xf2>
 80040d0:	0646      	lsls	r6, r0, #25
 80040d2:	d5fb      	bpl.n	80040cc <_printf_i+0xe8>
 80040d4:	881e      	ldrh	r6, [r3, #0]
 80040d6:	4854      	ldr	r0, [pc, #336]	; (8004228 <_printf_i+0x244>)
 80040d8:	2f6f      	cmp	r7, #111	; 0x6f
 80040da:	bf0c      	ite	eq
 80040dc:	2308      	moveq	r3, #8
 80040de:	230a      	movne	r3, #10
 80040e0:	2100      	movs	r1, #0
 80040e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80040e6:	6865      	ldr	r5, [r4, #4]
 80040e8:	60a5      	str	r5, [r4, #8]
 80040ea:	2d00      	cmp	r5, #0
 80040ec:	bfa2      	ittt	ge
 80040ee:	6821      	ldrge	r1, [r4, #0]
 80040f0:	f021 0104 	bicge.w	r1, r1, #4
 80040f4:	6021      	strge	r1, [r4, #0]
 80040f6:	b90e      	cbnz	r6, 80040fc <_printf_i+0x118>
 80040f8:	2d00      	cmp	r5, #0
 80040fa:	d04d      	beq.n	8004198 <_printf_i+0x1b4>
 80040fc:	4615      	mov	r5, r2
 80040fe:	fbb6 f1f3 	udiv	r1, r6, r3
 8004102:	fb03 6711 	mls	r7, r3, r1, r6
 8004106:	5dc7      	ldrb	r7, [r0, r7]
 8004108:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800410c:	4637      	mov	r7, r6
 800410e:	42bb      	cmp	r3, r7
 8004110:	460e      	mov	r6, r1
 8004112:	d9f4      	bls.n	80040fe <_printf_i+0x11a>
 8004114:	2b08      	cmp	r3, #8
 8004116:	d10b      	bne.n	8004130 <_printf_i+0x14c>
 8004118:	6823      	ldr	r3, [r4, #0]
 800411a:	07de      	lsls	r6, r3, #31
 800411c:	d508      	bpl.n	8004130 <_printf_i+0x14c>
 800411e:	6923      	ldr	r3, [r4, #16]
 8004120:	6861      	ldr	r1, [r4, #4]
 8004122:	4299      	cmp	r1, r3
 8004124:	bfde      	ittt	le
 8004126:	2330      	movle	r3, #48	; 0x30
 8004128:	f805 3c01 	strble.w	r3, [r5, #-1]
 800412c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004130:	1b52      	subs	r2, r2, r5
 8004132:	6122      	str	r2, [r4, #16]
 8004134:	f8cd a000 	str.w	sl, [sp]
 8004138:	464b      	mov	r3, r9
 800413a:	aa03      	add	r2, sp, #12
 800413c:	4621      	mov	r1, r4
 800413e:	4640      	mov	r0, r8
 8004140:	f7ff fee2 	bl	8003f08 <_printf_common>
 8004144:	3001      	adds	r0, #1
 8004146:	d14c      	bne.n	80041e2 <_printf_i+0x1fe>
 8004148:	f04f 30ff 	mov.w	r0, #4294967295
 800414c:	b004      	add	sp, #16
 800414e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004152:	4835      	ldr	r0, [pc, #212]	; (8004228 <_printf_i+0x244>)
 8004154:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004158:	6829      	ldr	r1, [r5, #0]
 800415a:	6823      	ldr	r3, [r4, #0]
 800415c:	f851 6b04 	ldr.w	r6, [r1], #4
 8004160:	6029      	str	r1, [r5, #0]
 8004162:	061d      	lsls	r5, r3, #24
 8004164:	d514      	bpl.n	8004190 <_printf_i+0x1ac>
 8004166:	07df      	lsls	r7, r3, #31
 8004168:	bf44      	itt	mi
 800416a:	f043 0320 	orrmi.w	r3, r3, #32
 800416e:	6023      	strmi	r3, [r4, #0]
 8004170:	b91e      	cbnz	r6, 800417a <_printf_i+0x196>
 8004172:	6823      	ldr	r3, [r4, #0]
 8004174:	f023 0320 	bic.w	r3, r3, #32
 8004178:	6023      	str	r3, [r4, #0]
 800417a:	2310      	movs	r3, #16
 800417c:	e7b0      	b.n	80040e0 <_printf_i+0xfc>
 800417e:	6823      	ldr	r3, [r4, #0]
 8004180:	f043 0320 	orr.w	r3, r3, #32
 8004184:	6023      	str	r3, [r4, #0]
 8004186:	2378      	movs	r3, #120	; 0x78
 8004188:	4828      	ldr	r0, [pc, #160]	; (800422c <_printf_i+0x248>)
 800418a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800418e:	e7e3      	b.n	8004158 <_printf_i+0x174>
 8004190:	0659      	lsls	r1, r3, #25
 8004192:	bf48      	it	mi
 8004194:	b2b6      	uxthmi	r6, r6
 8004196:	e7e6      	b.n	8004166 <_printf_i+0x182>
 8004198:	4615      	mov	r5, r2
 800419a:	e7bb      	b.n	8004114 <_printf_i+0x130>
 800419c:	682b      	ldr	r3, [r5, #0]
 800419e:	6826      	ldr	r6, [r4, #0]
 80041a0:	6961      	ldr	r1, [r4, #20]
 80041a2:	1d18      	adds	r0, r3, #4
 80041a4:	6028      	str	r0, [r5, #0]
 80041a6:	0635      	lsls	r5, r6, #24
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	d501      	bpl.n	80041b0 <_printf_i+0x1cc>
 80041ac:	6019      	str	r1, [r3, #0]
 80041ae:	e002      	b.n	80041b6 <_printf_i+0x1d2>
 80041b0:	0670      	lsls	r0, r6, #25
 80041b2:	d5fb      	bpl.n	80041ac <_printf_i+0x1c8>
 80041b4:	8019      	strh	r1, [r3, #0]
 80041b6:	2300      	movs	r3, #0
 80041b8:	6123      	str	r3, [r4, #16]
 80041ba:	4615      	mov	r5, r2
 80041bc:	e7ba      	b.n	8004134 <_printf_i+0x150>
 80041be:	682b      	ldr	r3, [r5, #0]
 80041c0:	1d1a      	adds	r2, r3, #4
 80041c2:	602a      	str	r2, [r5, #0]
 80041c4:	681d      	ldr	r5, [r3, #0]
 80041c6:	6862      	ldr	r2, [r4, #4]
 80041c8:	2100      	movs	r1, #0
 80041ca:	4628      	mov	r0, r5
 80041cc:	f7fc f828 	bl	8000220 <memchr>
 80041d0:	b108      	cbz	r0, 80041d6 <_printf_i+0x1f2>
 80041d2:	1b40      	subs	r0, r0, r5
 80041d4:	6060      	str	r0, [r4, #4]
 80041d6:	6863      	ldr	r3, [r4, #4]
 80041d8:	6123      	str	r3, [r4, #16]
 80041da:	2300      	movs	r3, #0
 80041dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80041e0:	e7a8      	b.n	8004134 <_printf_i+0x150>
 80041e2:	6923      	ldr	r3, [r4, #16]
 80041e4:	462a      	mov	r2, r5
 80041e6:	4649      	mov	r1, r9
 80041e8:	4640      	mov	r0, r8
 80041ea:	47d0      	blx	sl
 80041ec:	3001      	adds	r0, #1
 80041ee:	d0ab      	beq.n	8004148 <_printf_i+0x164>
 80041f0:	6823      	ldr	r3, [r4, #0]
 80041f2:	079b      	lsls	r3, r3, #30
 80041f4:	d413      	bmi.n	800421e <_printf_i+0x23a>
 80041f6:	68e0      	ldr	r0, [r4, #12]
 80041f8:	9b03      	ldr	r3, [sp, #12]
 80041fa:	4298      	cmp	r0, r3
 80041fc:	bfb8      	it	lt
 80041fe:	4618      	movlt	r0, r3
 8004200:	e7a4      	b.n	800414c <_printf_i+0x168>
 8004202:	2301      	movs	r3, #1
 8004204:	4632      	mov	r2, r6
 8004206:	4649      	mov	r1, r9
 8004208:	4640      	mov	r0, r8
 800420a:	47d0      	blx	sl
 800420c:	3001      	adds	r0, #1
 800420e:	d09b      	beq.n	8004148 <_printf_i+0x164>
 8004210:	3501      	adds	r5, #1
 8004212:	68e3      	ldr	r3, [r4, #12]
 8004214:	9903      	ldr	r1, [sp, #12]
 8004216:	1a5b      	subs	r3, r3, r1
 8004218:	42ab      	cmp	r3, r5
 800421a:	dcf2      	bgt.n	8004202 <_printf_i+0x21e>
 800421c:	e7eb      	b.n	80041f6 <_printf_i+0x212>
 800421e:	2500      	movs	r5, #0
 8004220:	f104 0619 	add.w	r6, r4, #25
 8004224:	e7f5      	b.n	8004212 <_printf_i+0x22e>
 8004226:	bf00      	nop
 8004228:	08006fde 	.word	0x08006fde
 800422c:	08006fef 	.word	0x08006fef

08004230 <_sbrk_r>:
 8004230:	b538      	push	{r3, r4, r5, lr}
 8004232:	4d06      	ldr	r5, [pc, #24]	; (800424c <_sbrk_r+0x1c>)
 8004234:	2300      	movs	r3, #0
 8004236:	4604      	mov	r4, r0
 8004238:	4608      	mov	r0, r1
 800423a:	602b      	str	r3, [r5, #0]
 800423c:	f7fd f846 	bl	80012cc <_sbrk>
 8004240:	1c43      	adds	r3, r0, #1
 8004242:	d102      	bne.n	800424a <_sbrk_r+0x1a>
 8004244:	682b      	ldr	r3, [r5, #0]
 8004246:	b103      	cbz	r3, 800424a <_sbrk_r+0x1a>
 8004248:	6023      	str	r3, [r4, #0]
 800424a:	bd38      	pop	{r3, r4, r5, pc}
 800424c:	2000030c 	.word	0x2000030c

08004250 <siprintf>:
 8004250:	b40e      	push	{r1, r2, r3}
 8004252:	b500      	push	{lr}
 8004254:	b09c      	sub	sp, #112	; 0x70
 8004256:	ab1d      	add	r3, sp, #116	; 0x74
 8004258:	9002      	str	r0, [sp, #8]
 800425a:	9006      	str	r0, [sp, #24]
 800425c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004260:	4809      	ldr	r0, [pc, #36]	; (8004288 <siprintf+0x38>)
 8004262:	9107      	str	r1, [sp, #28]
 8004264:	9104      	str	r1, [sp, #16]
 8004266:	4909      	ldr	r1, [pc, #36]	; (800428c <siprintf+0x3c>)
 8004268:	f853 2b04 	ldr.w	r2, [r3], #4
 800426c:	9105      	str	r1, [sp, #20]
 800426e:	6800      	ldr	r0, [r0, #0]
 8004270:	9301      	str	r3, [sp, #4]
 8004272:	a902      	add	r1, sp, #8
 8004274:	f001 fac2 	bl	80057fc <_svfiprintf_r>
 8004278:	9b02      	ldr	r3, [sp, #8]
 800427a:	2200      	movs	r2, #0
 800427c:	701a      	strb	r2, [r3, #0]
 800427e:	b01c      	add	sp, #112	; 0x70
 8004280:	f85d eb04 	ldr.w	lr, [sp], #4
 8004284:	b003      	add	sp, #12
 8004286:	4770      	bx	lr
 8004288:	20000018 	.word	0x20000018
 800428c:	ffff0208 	.word	0xffff0208

08004290 <strcpy>:
 8004290:	4603      	mov	r3, r0
 8004292:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004296:	f803 2b01 	strb.w	r2, [r3], #1
 800429a:	2a00      	cmp	r2, #0
 800429c:	d1f9      	bne.n	8004292 <strcpy+0x2>
 800429e:	4770      	bx	lr

080042a0 <quorem>:
 80042a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042a4:	6903      	ldr	r3, [r0, #16]
 80042a6:	690c      	ldr	r4, [r1, #16]
 80042a8:	42a3      	cmp	r3, r4
 80042aa:	4607      	mov	r7, r0
 80042ac:	f2c0 8081 	blt.w	80043b2 <quorem+0x112>
 80042b0:	3c01      	subs	r4, #1
 80042b2:	f101 0814 	add.w	r8, r1, #20
 80042b6:	f100 0514 	add.w	r5, r0, #20
 80042ba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80042be:	9301      	str	r3, [sp, #4]
 80042c0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80042c4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80042c8:	3301      	adds	r3, #1
 80042ca:	429a      	cmp	r2, r3
 80042cc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80042d0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80042d4:	fbb2 f6f3 	udiv	r6, r2, r3
 80042d8:	d331      	bcc.n	800433e <quorem+0x9e>
 80042da:	f04f 0e00 	mov.w	lr, #0
 80042de:	4640      	mov	r0, r8
 80042e0:	46ac      	mov	ip, r5
 80042e2:	46f2      	mov	sl, lr
 80042e4:	f850 2b04 	ldr.w	r2, [r0], #4
 80042e8:	b293      	uxth	r3, r2
 80042ea:	fb06 e303 	mla	r3, r6, r3, lr
 80042ee:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80042f2:	b29b      	uxth	r3, r3
 80042f4:	ebaa 0303 	sub.w	r3, sl, r3
 80042f8:	f8dc a000 	ldr.w	sl, [ip]
 80042fc:	0c12      	lsrs	r2, r2, #16
 80042fe:	fa13 f38a 	uxtah	r3, r3, sl
 8004302:	fb06 e202 	mla	r2, r6, r2, lr
 8004306:	9300      	str	r3, [sp, #0]
 8004308:	9b00      	ldr	r3, [sp, #0]
 800430a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800430e:	b292      	uxth	r2, r2
 8004310:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8004314:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004318:	f8bd 3000 	ldrh.w	r3, [sp]
 800431c:	4581      	cmp	r9, r0
 800431e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004322:	f84c 3b04 	str.w	r3, [ip], #4
 8004326:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800432a:	d2db      	bcs.n	80042e4 <quorem+0x44>
 800432c:	f855 300b 	ldr.w	r3, [r5, fp]
 8004330:	b92b      	cbnz	r3, 800433e <quorem+0x9e>
 8004332:	9b01      	ldr	r3, [sp, #4]
 8004334:	3b04      	subs	r3, #4
 8004336:	429d      	cmp	r5, r3
 8004338:	461a      	mov	r2, r3
 800433a:	d32e      	bcc.n	800439a <quorem+0xfa>
 800433c:	613c      	str	r4, [r7, #16]
 800433e:	4638      	mov	r0, r7
 8004340:	f001 f8ba 	bl	80054b8 <__mcmp>
 8004344:	2800      	cmp	r0, #0
 8004346:	db24      	blt.n	8004392 <quorem+0xf2>
 8004348:	3601      	adds	r6, #1
 800434a:	4628      	mov	r0, r5
 800434c:	f04f 0c00 	mov.w	ip, #0
 8004350:	f858 2b04 	ldr.w	r2, [r8], #4
 8004354:	f8d0 e000 	ldr.w	lr, [r0]
 8004358:	b293      	uxth	r3, r2
 800435a:	ebac 0303 	sub.w	r3, ip, r3
 800435e:	0c12      	lsrs	r2, r2, #16
 8004360:	fa13 f38e 	uxtah	r3, r3, lr
 8004364:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004368:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800436c:	b29b      	uxth	r3, r3
 800436e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004372:	45c1      	cmp	r9, r8
 8004374:	f840 3b04 	str.w	r3, [r0], #4
 8004378:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800437c:	d2e8      	bcs.n	8004350 <quorem+0xb0>
 800437e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004382:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004386:	b922      	cbnz	r2, 8004392 <quorem+0xf2>
 8004388:	3b04      	subs	r3, #4
 800438a:	429d      	cmp	r5, r3
 800438c:	461a      	mov	r2, r3
 800438e:	d30a      	bcc.n	80043a6 <quorem+0x106>
 8004390:	613c      	str	r4, [r7, #16]
 8004392:	4630      	mov	r0, r6
 8004394:	b003      	add	sp, #12
 8004396:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800439a:	6812      	ldr	r2, [r2, #0]
 800439c:	3b04      	subs	r3, #4
 800439e:	2a00      	cmp	r2, #0
 80043a0:	d1cc      	bne.n	800433c <quorem+0x9c>
 80043a2:	3c01      	subs	r4, #1
 80043a4:	e7c7      	b.n	8004336 <quorem+0x96>
 80043a6:	6812      	ldr	r2, [r2, #0]
 80043a8:	3b04      	subs	r3, #4
 80043aa:	2a00      	cmp	r2, #0
 80043ac:	d1f0      	bne.n	8004390 <quorem+0xf0>
 80043ae:	3c01      	subs	r4, #1
 80043b0:	e7eb      	b.n	800438a <quorem+0xea>
 80043b2:	2000      	movs	r0, #0
 80043b4:	e7ee      	b.n	8004394 <quorem+0xf4>
	...

080043b8 <_dtoa_r>:
 80043b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043bc:	ed2d 8b04 	vpush	{d8-d9}
 80043c0:	ec57 6b10 	vmov	r6, r7, d0
 80043c4:	b093      	sub	sp, #76	; 0x4c
 80043c6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80043c8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80043cc:	9106      	str	r1, [sp, #24]
 80043ce:	ee10 aa10 	vmov	sl, s0
 80043d2:	4604      	mov	r4, r0
 80043d4:	9209      	str	r2, [sp, #36]	; 0x24
 80043d6:	930c      	str	r3, [sp, #48]	; 0x30
 80043d8:	46bb      	mov	fp, r7
 80043da:	b975      	cbnz	r5, 80043fa <_dtoa_r+0x42>
 80043dc:	2010      	movs	r0, #16
 80043de:	f7ff f9bf 	bl	8003760 <malloc>
 80043e2:	4602      	mov	r2, r0
 80043e4:	6260      	str	r0, [r4, #36]	; 0x24
 80043e6:	b920      	cbnz	r0, 80043f2 <_dtoa_r+0x3a>
 80043e8:	4ba7      	ldr	r3, [pc, #668]	; (8004688 <_dtoa_r+0x2d0>)
 80043ea:	21ea      	movs	r1, #234	; 0xea
 80043ec:	48a7      	ldr	r0, [pc, #668]	; (800468c <_dtoa_r+0x2d4>)
 80043ee:	f001 fb05 	bl	80059fc <__assert_func>
 80043f2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80043f6:	6005      	str	r5, [r0, #0]
 80043f8:	60c5      	str	r5, [r0, #12]
 80043fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80043fc:	6819      	ldr	r1, [r3, #0]
 80043fe:	b151      	cbz	r1, 8004416 <_dtoa_r+0x5e>
 8004400:	685a      	ldr	r2, [r3, #4]
 8004402:	604a      	str	r2, [r1, #4]
 8004404:	2301      	movs	r3, #1
 8004406:	4093      	lsls	r3, r2
 8004408:	608b      	str	r3, [r1, #8]
 800440a:	4620      	mov	r0, r4
 800440c:	f000 fe12 	bl	8005034 <_Bfree>
 8004410:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004412:	2200      	movs	r2, #0
 8004414:	601a      	str	r2, [r3, #0]
 8004416:	1e3b      	subs	r3, r7, #0
 8004418:	bfaa      	itet	ge
 800441a:	2300      	movge	r3, #0
 800441c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8004420:	f8c8 3000 	strge.w	r3, [r8]
 8004424:	4b9a      	ldr	r3, [pc, #616]	; (8004690 <_dtoa_r+0x2d8>)
 8004426:	bfbc      	itt	lt
 8004428:	2201      	movlt	r2, #1
 800442a:	f8c8 2000 	strlt.w	r2, [r8]
 800442e:	ea33 030b 	bics.w	r3, r3, fp
 8004432:	d11b      	bne.n	800446c <_dtoa_r+0xb4>
 8004434:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004436:	f242 730f 	movw	r3, #9999	; 0x270f
 800443a:	6013      	str	r3, [r2, #0]
 800443c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004440:	4333      	orrs	r3, r6
 8004442:	f000 8592 	beq.w	8004f6a <_dtoa_r+0xbb2>
 8004446:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004448:	b963      	cbnz	r3, 8004464 <_dtoa_r+0xac>
 800444a:	4b92      	ldr	r3, [pc, #584]	; (8004694 <_dtoa_r+0x2dc>)
 800444c:	e022      	b.n	8004494 <_dtoa_r+0xdc>
 800444e:	4b92      	ldr	r3, [pc, #584]	; (8004698 <_dtoa_r+0x2e0>)
 8004450:	9301      	str	r3, [sp, #4]
 8004452:	3308      	adds	r3, #8
 8004454:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004456:	6013      	str	r3, [r2, #0]
 8004458:	9801      	ldr	r0, [sp, #4]
 800445a:	b013      	add	sp, #76	; 0x4c
 800445c:	ecbd 8b04 	vpop	{d8-d9}
 8004460:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004464:	4b8b      	ldr	r3, [pc, #556]	; (8004694 <_dtoa_r+0x2dc>)
 8004466:	9301      	str	r3, [sp, #4]
 8004468:	3303      	adds	r3, #3
 800446a:	e7f3      	b.n	8004454 <_dtoa_r+0x9c>
 800446c:	2200      	movs	r2, #0
 800446e:	2300      	movs	r3, #0
 8004470:	4650      	mov	r0, sl
 8004472:	4659      	mov	r1, fp
 8004474:	f7fc fb48 	bl	8000b08 <__aeabi_dcmpeq>
 8004478:	ec4b ab19 	vmov	d9, sl, fp
 800447c:	4680      	mov	r8, r0
 800447e:	b158      	cbz	r0, 8004498 <_dtoa_r+0xe0>
 8004480:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004482:	2301      	movs	r3, #1
 8004484:	6013      	str	r3, [r2, #0]
 8004486:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004488:	2b00      	cmp	r3, #0
 800448a:	f000 856b 	beq.w	8004f64 <_dtoa_r+0xbac>
 800448e:	4883      	ldr	r0, [pc, #524]	; (800469c <_dtoa_r+0x2e4>)
 8004490:	6018      	str	r0, [r3, #0]
 8004492:	1e43      	subs	r3, r0, #1
 8004494:	9301      	str	r3, [sp, #4]
 8004496:	e7df      	b.n	8004458 <_dtoa_r+0xa0>
 8004498:	ec4b ab10 	vmov	d0, sl, fp
 800449c:	aa10      	add	r2, sp, #64	; 0x40
 800449e:	a911      	add	r1, sp, #68	; 0x44
 80044a0:	4620      	mov	r0, r4
 80044a2:	f001 f8af 	bl	8005604 <__d2b>
 80044a6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80044aa:	ee08 0a10 	vmov	s16, r0
 80044ae:	2d00      	cmp	r5, #0
 80044b0:	f000 8084 	beq.w	80045bc <_dtoa_r+0x204>
 80044b4:	ee19 3a90 	vmov	r3, s19
 80044b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80044bc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80044c0:	4656      	mov	r6, sl
 80044c2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80044c6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80044ca:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80044ce:	4b74      	ldr	r3, [pc, #464]	; (80046a0 <_dtoa_r+0x2e8>)
 80044d0:	2200      	movs	r2, #0
 80044d2:	4630      	mov	r0, r6
 80044d4:	4639      	mov	r1, r7
 80044d6:	f7fb fef7 	bl	80002c8 <__aeabi_dsub>
 80044da:	a365      	add	r3, pc, #404	; (adr r3, 8004670 <_dtoa_r+0x2b8>)
 80044dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044e0:	f7fc f8aa 	bl	8000638 <__aeabi_dmul>
 80044e4:	a364      	add	r3, pc, #400	; (adr r3, 8004678 <_dtoa_r+0x2c0>)
 80044e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044ea:	f7fb feef 	bl	80002cc <__adddf3>
 80044ee:	4606      	mov	r6, r0
 80044f0:	4628      	mov	r0, r5
 80044f2:	460f      	mov	r7, r1
 80044f4:	f7fc f836 	bl	8000564 <__aeabi_i2d>
 80044f8:	a361      	add	r3, pc, #388	; (adr r3, 8004680 <_dtoa_r+0x2c8>)
 80044fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044fe:	f7fc f89b 	bl	8000638 <__aeabi_dmul>
 8004502:	4602      	mov	r2, r0
 8004504:	460b      	mov	r3, r1
 8004506:	4630      	mov	r0, r6
 8004508:	4639      	mov	r1, r7
 800450a:	f7fb fedf 	bl	80002cc <__adddf3>
 800450e:	4606      	mov	r6, r0
 8004510:	460f      	mov	r7, r1
 8004512:	f7fc fb41 	bl	8000b98 <__aeabi_d2iz>
 8004516:	2200      	movs	r2, #0
 8004518:	9000      	str	r0, [sp, #0]
 800451a:	2300      	movs	r3, #0
 800451c:	4630      	mov	r0, r6
 800451e:	4639      	mov	r1, r7
 8004520:	f7fc fafc 	bl	8000b1c <__aeabi_dcmplt>
 8004524:	b150      	cbz	r0, 800453c <_dtoa_r+0x184>
 8004526:	9800      	ldr	r0, [sp, #0]
 8004528:	f7fc f81c 	bl	8000564 <__aeabi_i2d>
 800452c:	4632      	mov	r2, r6
 800452e:	463b      	mov	r3, r7
 8004530:	f7fc faea 	bl	8000b08 <__aeabi_dcmpeq>
 8004534:	b910      	cbnz	r0, 800453c <_dtoa_r+0x184>
 8004536:	9b00      	ldr	r3, [sp, #0]
 8004538:	3b01      	subs	r3, #1
 800453a:	9300      	str	r3, [sp, #0]
 800453c:	9b00      	ldr	r3, [sp, #0]
 800453e:	2b16      	cmp	r3, #22
 8004540:	d85a      	bhi.n	80045f8 <_dtoa_r+0x240>
 8004542:	9a00      	ldr	r2, [sp, #0]
 8004544:	4b57      	ldr	r3, [pc, #348]	; (80046a4 <_dtoa_r+0x2ec>)
 8004546:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800454a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800454e:	ec51 0b19 	vmov	r0, r1, d9
 8004552:	f7fc fae3 	bl	8000b1c <__aeabi_dcmplt>
 8004556:	2800      	cmp	r0, #0
 8004558:	d050      	beq.n	80045fc <_dtoa_r+0x244>
 800455a:	9b00      	ldr	r3, [sp, #0]
 800455c:	3b01      	subs	r3, #1
 800455e:	9300      	str	r3, [sp, #0]
 8004560:	2300      	movs	r3, #0
 8004562:	930b      	str	r3, [sp, #44]	; 0x2c
 8004564:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004566:	1b5d      	subs	r5, r3, r5
 8004568:	1e6b      	subs	r3, r5, #1
 800456a:	9305      	str	r3, [sp, #20]
 800456c:	bf45      	ittet	mi
 800456e:	f1c5 0301 	rsbmi	r3, r5, #1
 8004572:	9304      	strmi	r3, [sp, #16]
 8004574:	2300      	movpl	r3, #0
 8004576:	2300      	movmi	r3, #0
 8004578:	bf4c      	ite	mi
 800457a:	9305      	strmi	r3, [sp, #20]
 800457c:	9304      	strpl	r3, [sp, #16]
 800457e:	9b00      	ldr	r3, [sp, #0]
 8004580:	2b00      	cmp	r3, #0
 8004582:	db3d      	blt.n	8004600 <_dtoa_r+0x248>
 8004584:	9b05      	ldr	r3, [sp, #20]
 8004586:	9a00      	ldr	r2, [sp, #0]
 8004588:	920a      	str	r2, [sp, #40]	; 0x28
 800458a:	4413      	add	r3, r2
 800458c:	9305      	str	r3, [sp, #20]
 800458e:	2300      	movs	r3, #0
 8004590:	9307      	str	r3, [sp, #28]
 8004592:	9b06      	ldr	r3, [sp, #24]
 8004594:	2b09      	cmp	r3, #9
 8004596:	f200 8089 	bhi.w	80046ac <_dtoa_r+0x2f4>
 800459a:	2b05      	cmp	r3, #5
 800459c:	bfc4      	itt	gt
 800459e:	3b04      	subgt	r3, #4
 80045a0:	9306      	strgt	r3, [sp, #24]
 80045a2:	9b06      	ldr	r3, [sp, #24]
 80045a4:	f1a3 0302 	sub.w	r3, r3, #2
 80045a8:	bfcc      	ite	gt
 80045aa:	2500      	movgt	r5, #0
 80045ac:	2501      	movle	r5, #1
 80045ae:	2b03      	cmp	r3, #3
 80045b0:	f200 8087 	bhi.w	80046c2 <_dtoa_r+0x30a>
 80045b4:	e8df f003 	tbb	[pc, r3]
 80045b8:	59383a2d 	.word	0x59383a2d
 80045bc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80045c0:	441d      	add	r5, r3
 80045c2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80045c6:	2b20      	cmp	r3, #32
 80045c8:	bfc1      	itttt	gt
 80045ca:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80045ce:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80045d2:	fa0b f303 	lslgt.w	r3, fp, r3
 80045d6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80045da:	bfda      	itte	le
 80045dc:	f1c3 0320 	rsble	r3, r3, #32
 80045e0:	fa06 f003 	lslle.w	r0, r6, r3
 80045e4:	4318      	orrgt	r0, r3
 80045e6:	f7fb ffad 	bl	8000544 <__aeabi_ui2d>
 80045ea:	2301      	movs	r3, #1
 80045ec:	4606      	mov	r6, r0
 80045ee:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80045f2:	3d01      	subs	r5, #1
 80045f4:	930e      	str	r3, [sp, #56]	; 0x38
 80045f6:	e76a      	b.n	80044ce <_dtoa_r+0x116>
 80045f8:	2301      	movs	r3, #1
 80045fa:	e7b2      	b.n	8004562 <_dtoa_r+0x1aa>
 80045fc:	900b      	str	r0, [sp, #44]	; 0x2c
 80045fe:	e7b1      	b.n	8004564 <_dtoa_r+0x1ac>
 8004600:	9b04      	ldr	r3, [sp, #16]
 8004602:	9a00      	ldr	r2, [sp, #0]
 8004604:	1a9b      	subs	r3, r3, r2
 8004606:	9304      	str	r3, [sp, #16]
 8004608:	4253      	negs	r3, r2
 800460a:	9307      	str	r3, [sp, #28]
 800460c:	2300      	movs	r3, #0
 800460e:	930a      	str	r3, [sp, #40]	; 0x28
 8004610:	e7bf      	b.n	8004592 <_dtoa_r+0x1da>
 8004612:	2300      	movs	r3, #0
 8004614:	9308      	str	r3, [sp, #32]
 8004616:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004618:	2b00      	cmp	r3, #0
 800461a:	dc55      	bgt.n	80046c8 <_dtoa_r+0x310>
 800461c:	2301      	movs	r3, #1
 800461e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8004622:	461a      	mov	r2, r3
 8004624:	9209      	str	r2, [sp, #36]	; 0x24
 8004626:	e00c      	b.n	8004642 <_dtoa_r+0x28a>
 8004628:	2301      	movs	r3, #1
 800462a:	e7f3      	b.n	8004614 <_dtoa_r+0x25c>
 800462c:	2300      	movs	r3, #0
 800462e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004630:	9308      	str	r3, [sp, #32]
 8004632:	9b00      	ldr	r3, [sp, #0]
 8004634:	4413      	add	r3, r2
 8004636:	9302      	str	r3, [sp, #8]
 8004638:	3301      	adds	r3, #1
 800463a:	2b01      	cmp	r3, #1
 800463c:	9303      	str	r3, [sp, #12]
 800463e:	bfb8      	it	lt
 8004640:	2301      	movlt	r3, #1
 8004642:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004644:	2200      	movs	r2, #0
 8004646:	6042      	str	r2, [r0, #4]
 8004648:	2204      	movs	r2, #4
 800464a:	f102 0614 	add.w	r6, r2, #20
 800464e:	429e      	cmp	r6, r3
 8004650:	6841      	ldr	r1, [r0, #4]
 8004652:	d93d      	bls.n	80046d0 <_dtoa_r+0x318>
 8004654:	4620      	mov	r0, r4
 8004656:	f000 fcad 	bl	8004fb4 <_Balloc>
 800465a:	9001      	str	r0, [sp, #4]
 800465c:	2800      	cmp	r0, #0
 800465e:	d13b      	bne.n	80046d8 <_dtoa_r+0x320>
 8004660:	4b11      	ldr	r3, [pc, #68]	; (80046a8 <_dtoa_r+0x2f0>)
 8004662:	4602      	mov	r2, r0
 8004664:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004668:	e6c0      	b.n	80043ec <_dtoa_r+0x34>
 800466a:	2301      	movs	r3, #1
 800466c:	e7df      	b.n	800462e <_dtoa_r+0x276>
 800466e:	bf00      	nop
 8004670:	636f4361 	.word	0x636f4361
 8004674:	3fd287a7 	.word	0x3fd287a7
 8004678:	8b60c8b3 	.word	0x8b60c8b3
 800467c:	3fc68a28 	.word	0x3fc68a28
 8004680:	509f79fb 	.word	0x509f79fb
 8004684:	3fd34413 	.word	0x3fd34413
 8004688:	0800700d 	.word	0x0800700d
 800468c:	08007024 	.word	0x08007024
 8004690:	7ff00000 	.word	0x7ff00000
 8004694:	08007009 	.word	0x08007009
 8004698:	08007000 	.word	0x08007000
 800469c:	08006fdd 	.word	0x08006fdd
 80046a0:	3ff80000 	.word	0x3ff80000
 80046a4:	08007118 	.word	0x08007118
 80046a8:	0800707f 	.word	0x0800707f
 80046ac:	2501      	movs	r5, #1
 80046ae:	2300      	movs	r3, #0
 80046b0:	9306      	str	r3, [sp, #24]
 80046b2:	9508      	str	r5, [sp, #32]
 80046b4:	f04f 33ff 	mov.w	r3, #4294967295
 80046b8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80046bc:	2200      	movs	r2, #0
 80046be:	2312      	movs	r3, #18
 80046c0:	e7b0      	b.n	8004624 <_dtoa_r+0x26c>
 80046c2:	2301      	movs	r3, #1
 80046c4:	9308      	str	r3, [sp, #32]
 80046c6:	e7f5      	b.n	80046b4 <_dtoa_r+0x2fc>
 80046c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80046ca:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80046ce:	e7b8      	b.n	8004642 <_dtoa_r+0x28a>
 80046d0:	3101      	adds	r1, #1
 80046d2:	6041      	str	r1, [r0, #4]
 80046d4:	0052      	lsls	r2, r2, #1
 80046d6:	e7b8      	b.n	800464a <_dtoa_r+0x292>
 80046d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80046da:	9a01      	ldr	r2, [sp, #4]
 80046dc:	601a      	str	r2, [r3, #0]
 80046de:	9b03      	ldr	r3, [sp, #12]
 80046e0:	2b0e      	cmp	r3, #14
 80046e2:	f200 809d 	bhi.w	8004820 <_dtoa_r+0x468>
 80046e6:	2d00      	cmp	r5, #0
 80046e8:	f000 809a 	beq.w	8004820 <_dtoa_r+0x468>
 80046ec:	9b00      	ldr	r3, [sp, #0]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	dd32      	ble.n	8004758 <_dtoa_r+0x3a0>
 80046f2:	4ab7      	ldr	r2, [pc, #732]	; (80049d0 <_dtoa_r+0x618>)
 80046f4:	f003 030f 	and.w	r3, r3, #15
 80046f8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80046fc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004700:	9b00      	ldr	r3, [sp, #0]
 8004702:	05d8      	lsls	r0, r3, #23
 8004704:	ea4f 1723 	mov.w	r7, r3, asr #4
 8004708:	d516      	bpl.n	8004738 <_dtoa_r+0x380>
 800470a:	4bb2      	ldr	r3, [pc, #712]	; (80049d4 <_dtoa_r+0x61c>)
 800470c:	ec51 0b19 	vmov	r0, r1, d9
 8004710:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004714:	f7fc f8ba 	bl	800088c <__aeabi_ddiv>
 8004718:	f007 070f 	and.w	r7, r7, #15
 800471c:	4682      	mov	sl, r0
 800471e:	468b      	mov	fp, r1
 8004720:	2503      	movs	r5, #3
 8004722:	4eac      	ldr	r6, [pc, #688]	; (80049d4 <_dtoa_r+0x61c>)
 8004724:	b957      	cbnz	r7, 800473c <_dtoa_r+0x384>
 8004726:	4642      	mov	r2, r8
 8004728:	464b      	mov	r3, r9
 800472a:	4650      	mov	r0, sl
 800472c:	4659      	mov	r1, fp
 800472e:	f7fc f8ad 	bl	800088c <__aeabi_ddiv>
 8004732:	4682      	mov	sl, r0
 8004734:	468b      	mov	fp, r1
 8004736:	e028      	b.n	800478a <_dtoa_r+0x3d2>
 8004738:	2502      	movs	r5, #2
 800473a:	e7f2      	b.n	8004722 <_dtoa_r+0x36a>
 800473c:	07f9      	lsls	r1, r7, #31
 800473e:	d508      	bpl.n	8004752 <_dtoa_r+0x39a>
 8004740:	4640      	mov	r0, r8
 8004742:	4649      	mov	r1, r9
 8004744:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004748:	f7fb ff76 	bl	8000638 <__aeabi_dmul>
 800474c:	3501      	adds	r5, #1
 800474e:	4680      	mov	r8, r0
 8004750:	4689      	mov	r9, r1
 8004752:	107f      	asrs	r7, r7, #1
 8004754:	3608      	adds	r6, #8
 8004756:	e7e5      	b.n	8004724 <_dtoa_r+0x36c>
 8004758:	f000 809b 	beq.w	8004892 <_dtoa_r+0x4da>
 800475c:	9b00      	ldr	r3, [sp, #0]
 800475e:	4f9d      	ldr	r7, [pc, #628]	; (80049d4 <_dtoa_r+0x61c>)
 8004760:	425e      	negs	r6, r3
 8004762:	4b9b      	ldr	r3, [pc, #620]	; (80049d0 <_dtoa_r+0x618>)
 8004764:	f006 020f 	and.w	r2, r6, #15
 8004768:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800476c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004770:	ec51 0b19 	vmov	r0, r1, d9
 8004774:	f7fb ff60 	bl	8000638 <__aeabi_dmul>
 8004778:	1136      	asrs	r6, r6, #4
 800477a:	4682      	mov	sl, r0
 800477c:	468b      	mov	fp, r1
 800477e:	2300      	movs	r3, #0
 8004780:	2502      	movs	r5, #2
 8004782:	2e00      	cmp	r6, #0
 8004784:	d17a      	bne.n	800487c <_dtoa_r+0x4c4>
 8004786:	2b00      	cmp	r3, #0
 8004788:	d1d3      	bne.n	8004732 <_dtoa_r+0x37a>
 800478a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800478c:	2b00      	cmp	r3, #0
 800478e:	f000 8082 	beq.w	8004896 <_dtoa_r+0x4de>
 8004792:	4b91      	ldr	r3, [pc, #580]	; (80049d8 <_dtoa_r+0x620>)
 8004794:	2200      	movs	r2, #0
 8004796:	4650      	mov	r0, sl
 8004798:	4659      	mov	r1, fp
 800479a:	f7fc f9bf 	bl	8000b1c <__aeabi_dcmplt>
 800479e:	2800      	cmp	r0, #0
 80047a0:	d079      	beq.n	8004896 <_dtoa_r+0x4de>
 80047a2:	9b03      	ldr	r3, [sp, #12]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d076      	beq.n	8004896 <_dtoa_r+0x4de>
 80047a8:	9b02      	ldr	r3, [sp, #8]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	dd36      	ble.n	800481c <_dtoa_r+0x464>
 80047ae:	9b00      	ldr	r3, [sp, #0]
 80047b0:	4650      	mov	r0, sl
 80047b2:	4659      	mov	r1, fp
 80047b4:	1e5f      	subs	r7, r3, #1
 80047b6:	2200      	movs	r2, #0
 80047b8:	4b88      	ldr	r3, [pc, #544]	; (80049dc <_dtoa_r+0x624>)
 80047ba:	f7fb ff3d 	bl	8000638 <__aeabi_dmul>
 80047be:	9e02      	ldr	r6, [sp, #8]
 80047c0:	4682      	mov	sl, r0
 80047c2:	468b      	mov	fp, r1
 80047c4:	3501      	adds	r5, #1
 80047c6:	4628      	mov	r0, r5
 80047c8:	f7fb fecc 	bl	8000564 <__aeabi_i2d>
 80047cc:	4652      	mov	r2, sl
 80047ce:	465b      	mov	r3, fp
 80047d0:	f7fb ff32 	bl	8000638 <__aeabi_dmul>
 80047d4:	4b82      	ldr	r3, [pc, #520]	; (80049e0 <_dtoa_r+0x628>)
 80047d6:	2200      	movs	r2, #0
 80047d8:	f7fb fd78 	bl	80002cc <__adddf3>
 80047dc:	46d0      	mov	r8, sl
 80047de:	46d9      	mov	r9, fp
 80047e0:	4682      	mov	sl, r0
 80047e2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80047e6:	2e00      	cmp	r6, #0
 80047e8:	d158      	bne.n	800489c <_dtoa_r+0x4e4>
 80047ea:	4b7e      	ldr	r3, [pc, #504]	; (80049e4 <_dtoa_r+0x62c>)
 80047ec:	2200      	movs	r2, #0
 80047ee:	4640      	mov	r0, r8
 80047f0:	4649      	mov	r1, r9
 80047f2:	f7fb fd69 	bl	80002c8 <__aeabi_dsub>
 80047f6:	4652      	mov	r2, sl
 80047f8:	465b      	mov	r3, fp
 80047fa:	4680      	mov	r8, r0
 80047fc:	4689      	mov	r9, r1
 80047fe:	f7fc f9ab 	bl	8000b58 <__aeabi_dcmpgt>
 8004802:	2800      	cmp	r0, #0
 8004804:	f040 8295 	bne.w	8004d32 <_dtoa_r+0x97a>
 8004808:	4652      	mov	r2, sl
 800480a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800480e:	4640      	mov	r0, r8
 8004810:	4649      	mov	r1, r9
 8004812:	f7fc f983 	bl	8000b1c <__aeabi_dcmplt>
 8004816:	2800      	cmp	r0, #0
 8004818:	f040 8289 	bne.w	8004d2e <_dtoa_r+0x976>
 800481c:	ec5b ab19 	vmov	sl, fp, d9
 8004820:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004822:	2b00      	cmp	r3, #0
 8004824:	f2c0 8148 	blt.w	8004ab8 <_dtoa_r+0x700>
 8004828:	9a00      	ldr	r2, [sp, #0]
 800482a:	2a0e      	cmp	r2, #14
 800482c:	f300 8144 	bgt.w	8004ab8 <_dtoa_r+0x700>
 8004830:	4b67      	ldr	r3, [pc, #412]	; (80049d0 <_dtoa_r+0x618>)
 8004832:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004836:	e9d3 8900 	ldrd	r8, r9, [r3]
 800483a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800483c:	2b00      	cmp	r3, #0
 800483e:	f280 80d5 	bge.w	80049ec <_dtoa_r+0x634>
 8004842:	9b03      	ldr	r3, [sp, #12]
 8004844:	2b00      	cmp	r3, #0
 8004846:	f300 80d1 	bgt.w	80049ec <_dtoa_r+0x634>
 800484a:	f040 826f 	bne.w	8004d2c <_dtoa_r+0x974>
 800484e:	4b65      	ldr	r3, [pc, #404]	; (80049e4 <_dtoa_r+0x62c>)
 8004850:	2200      	movs	r2, #0
 8004852:	4640      	mov	r0, r8
 8004854:	4649      	mov	r1, r9
 8004856:	f7fb feef 	bl	8000638 <__aeabi_dmul>
 800485a:	4652      	mov	r2, sl
 800485c:	465b      	mov	r3, fp
 800485e:	f7fc f971 	bl	8000b44 <__aeabi_dcmpge>
 8004862:	9e03      	ldr	r6, [sp, #12]
 8004864:	4637      	mov	r7, r6
 8004866:	2800      	cmp	r0, #0
 8004868:	f040 8245 	bne.w	8004cf6 <_dtoa_r+0x93e>
 800486c:	9d01      	ldr	r5, [sp, #4]
 800486e:	2331      	movs	r3, #49	; 0x31
 8004870:	f805 3b01 	strb.w	r3, [r5], #1
 8004874:	9b00      	ldr	r3, [sp, #0]
 8004876:	3301      	adds	r3, #1
 8004878:	9300      	str	r3, [sp, #0]
 800487a:	e240      	b.n	8004cfe <_dtoa_r+0x946>
 800487c:	07f2      	lsls	r2, r6, #31
 800487e:	d505      	bpl.n	800488c <_dtoa_r+0x4d4>
 8004880:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004884:	f7fb fed8 	bl	8000638 <__aeabi_dmul>
 8004888:	3501      	adds	r5, #1
 800488a:	2301      	movs	r3, #1
 800488c:	1076      	asrs	r6, r6, #1
 800488e:	3708      	adds	r7, #8
 8004890:	e777      	b.n	8004782 <_dtoa_r+0x3ca>
 8004892:	2502      	movs	r5, #2
 8004894:	e779      	b.n	800478a <_dtoa_r+0x3d2>
 8004896:	9f00      	ldr	r7, [sp, #0]
 8004898:	9e03      	ldr	r6, [sp, #12]
 800489a:	e794      	b.n	80047c6 <_dtoa_r+0x40e>
 800489c:	9901      	ldr	r1, [sp, #4]
 800489e:	4b4c      	ldr	r3, [pc, #304]	; (80049d0 <_dtoa_r+0x618>)
 80048a0:	4431      	add	r1, r6
 80048a2:	910d      	str	r1, [sp, #52]	; 0x34
 80048a4:	9908      	ldr	r1, [sp, #32]
 80048a6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80048aa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80048ae:	2900      	cmp	r1, #0
 80048b0:	d043      	beq.n	800493a <_dtoa_r+0x582>
 80048b2:	494d      	ldr	r1, [pc, #308]	; (80049e8 <_dtoa_r+0x630>)
 80048b4:	2000      	movs	r0, #0
 80048b6:	f7fb ffe9 	bl	800088c <__aeabi_ddiv>
 80048ba:	4652      	mov	r2, sl
 80048bc:	465b      	mov	r3, fp
 80048be:	f7fb fd03 	bl	80002c8 <__aeabi_dsub>
 80048c2:	9d01      	ldr	r5, [sp, #4]
 80048c4:	4682      	mov	sl, r0
 80048c6:	468b      	mov	fp, r1
 80048c8:	4649      	mov	r1, r9
 80048ca:	4640      	mov	r0, r8
 80048cc:	f7fc f964 	bl	8000b98 <__aeabi_d2iz>
 80048d0:	4606      	mov	r6, r0
 80048d2:	f7fb fe47 	bl	8000564 <__aeabi_i2d>
 80048d6:	4602      	mov	r2, r0
 80048d8:	460b      	mov	r3, r1
 80048da:	4640      	mov	r0, r8
 80048dc:	4649      	mov	r1, r9
 80048de:	f7fb fcf3 	bl	80002c8 <__aeabi_dsub>
 80048e2:	3630      	adds	r6, #48	; 0x30
 80048e4:	f805 6b01 	strb.w	r6, [r5], #1
 80048e8:	4652      	mov	r2, sl
 80048ea:	465b      	mov	r3, fp
 80048ec:	4680      	mov	r8, r0
 80048ee:	4689      	mov	r9, r1
 80048f0:	f7fc f914 	bl	8000b1c <__aeabi_dcmplt>
 80048f4:	2800      	cmp	r0, #0
 80048f6:	d163      	bne.n	80049c0 <_dtoa_r+0x608>
 80048f8:	4642      	mov	r2, r8
 80048fa:	464b      	mov	r3, r9
 80048fc:	4936      	ldr	r1, [pc, #216]	; (80049d8 <_dtoa_r+0x620>)
 80048fe:	2000      	movs	r0, #0
 8004900:	f7fb fce2 	bl	80002c8 <__aeabi_dsub>
 8004904:	4652      	mov	r2, sl
 8004906:	465b      	mov	r3, fp
 8004908:	f7fc f908 	bl	8000b1c <__aeabi_dcmplt>
 800490c:	2800      	cmp	r0, #0
 800490e:	f040 80b5 	bne.w	8004a7c <_dtoa_r+0x6c4>
 8004912:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004914:	429d      	cmp	r5, r3
 8004916:	d081      	beq.n	800481c <_dtoa_r+0x464>
 8004918:	4b30      	ldr	r3, [pc, #192]	; (80049dc <_dtoa_r+0x624>)
 800491a:	2200      	movs	r2, #0
 800491c:	4650      	mov	r0, sl
 800491e:	4659      	mov	r1, fp
 8004920:	f7fb fe8a 	bl	8000638 <__aeabi_dmul>
 8004924:	4b2d      	ldr	r3, [pc, #180]	; (80049dc <_dtoa_r+0x624>)
 8004926:	4682      	mov	sl, r0
 8004928:	468b      	mov	fp, r1
 800492a:	4640      	mov	r0, r8
 800492c:	4649      	mov	r1, r9
 800492e:	2200      	movs	r2, #0
 8004930:	f7fb fe82 	bl	8000638 <__aeabi_dmul>
 8004934:	4680      	mov	r8, r0
 8004936:	4689      	mov	r9, r1
 8004938:	e7c6      	b.n	80048c8 <_dtoa_r+0x510>
 800493a:	4650      	mov	r0, sl
 800493c:	4659      	mov	r1, fp
 800493e:	f7fb fe7b 	bl	8000638 <__aeabi_dmul>
 8004942:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004944:	9d01      	ldr	r5, [sp, #4]
 8004946:	930f      	str	r3, [sp, #60]	; 0x3c
 8004948:	4682      	mov	sl, r0
 800494a:	468b      	mov	fp, r1
 800494c:	4649      	mov	r1, r9
 800494e:	4640      	mov	r0, r8
 8004950:	f7fc f922 	bl	8000b98 <__aeabi_d2iz>
 8004954:	4606      	mov	r6, r0
 8004956:	f7fb fe05 	bl	8000564 <__aeabi_i2d>
 800495a:	3630      	adds	r6, #48	; 0x30
 800495c:	4602      	mov	r2, r0
 800495e:	460b      	mov	r3, r1
 8004960:	4640      	mov	r0, r8
 8004962:	4649      	mov	r1, r9
 8004964:	f7fb fcb0 	bl	80002c8 <__aeabi_dsub>
 8004968:	f805 6b01 	strb.w	r6, [r5], #1
 800496c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800496e:	429d      	cmp	r5, r3
 8004970:	4680      	mov	r8, r0
 8004972:	4689      	mov	r9, r1
 8004974:	f04f 0200 	mov.w	r2, #0
 8004978:	d124      	bne.n	80049c4 <_dtoa_r+0x60c>
 800497a:	4b1b      	ldr	r3, [pc, #108]	; (80049e8 <_dtoa_r+0x630>)
 800497c:	4650      	mov	r0, sl
 800497e:	4659      	mov	r1, fp
 8004980:	f7fb fca4 	bl	80002cc <__adddf3>
 8004984:	4602      	mov	r2, r0
 8004986:	460b      	mov	r3, r1
 8004988:	4640      	mov	r0, r8
 800498a:	4649      	mov	r1, r9
 800498c:	f7fc f8e4 	bl	8000b58 <__aeabi_dcmpgt>
 8004990:	2800      	cmp	r0, #0
 8004992:	d173      	bne.n	8004a7c <_dtoa_r+0x6c4>
 8004994:	4652      	mov	r2, sl
 8004996:	465b      	mov	r3, fp
 8004998:	4913      	ldr	r1, [pc, #76]	; (80049e8 <_dtoa_r+0x630>)
 800499a:	2000      	movs	r0, #0
 800499c:	f7fb fc94 	bl	80002c8 <__aeabi_dsub>
 80049a0:	4602      	mov	r2, r0
 80049a2:	460b      	mov	r3, r1
 80049a4:	4640      	mov	r0, r8
 80049a6:	4649      	mov	r1, r9
 80049a8:	f7fc f8b8 	bl	8000b1c <__aeabi_dcmplt>
 80049ac:	2800      	cmp	r0, #0
 80049ae:	f43f af35 	beq.w	800481c <_dtoa_r+0x464>
 80049b2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80049b4:	1e6b      	subs	r3, r5, #1
 80049b6:	930f      	str	r3, [sp, #60]	; 0x3c
 80049b8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80049bc:	2b30      	cmp	r3, #48	; 0x30
 80049be:	d0f8      	beq.n	80049b2 <_dtoa_r+0x5fa>
 80049c0:	9700      	str	r7, [sp, #0]
 80049c2:	e049      	b.n	8004a58 <_dtoa_r+0x6a0>
 80049c4:	4b05      	ldr	r3, [pc, #20]	; (80049dc <_dtoa_r+0x624>)
 80049c6:	f7fb fe37 	bl	8000638 <__aeabi_dmul>
 80049ca:	4680      	mov	r8, r0
 80049cc:	4689      	mov	r9, r1
 80049ce:	e7bd      	b.n	800494c <_dtoa_r+0x594>
 80049d0:	08007118 	.word	0x08007118
 80049d4:	080070f0 	.word	0x080070f0
 80049d8:	3ff00000 	.word	0x3ff00000
 80049dc:	40240000 	.word	0x40240000
 80049e0:	401c0000 	.word	0x401c0000
 80049e4:	40140000 	.word	0x40140000
 80049e8:	3fe00000 	.word	0x3fe00000
 80049ec:	9d01      	ldr	r5, [sp, #4]
 80049ee:	4656      	mov	r6, sl
 80049f0:	465f      	mov	r7, fp
 80049f2:	4642      	mov	r2, r8
 80049f4:	464b      	mov	r3, r9
 80049f6:	4630      	mov	r0, r6
 80049f8:	4639      	mov	r1, r7
 80049fa:	f7fb ff47 	bl	800088c <__aeabi_ddiv>
 80049fe:	f7fc f8cb 	bl	8000b98 <__aeabi_d2iz>
 8004a02:	4682      	mov	sl, r0
 8004a04:	f7fb fdae 	bl	8000564 <__aeabi_i2d>
 8004a08:	4642      	mov	r2, r8
 8004a0a:	464b      	mov	r3, r9
 8004a0c:	f7fb fe14 	bl	8000638 <__aeabi_dmul>
 8004a10:	4602      	mov	r2, r0
 8004a12:	460b      	mov	r3, r1
 8004a14:	4630      	mov	r0, r6
 8004a16:	4639      	mov	r1, r7
 8004a18:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8004a1c:	f7fb fc54 	bl	80002c8 <__aeabi_dsub>
 8004a20:	f805 6b01 	strb.w	r6, [r5], #1
 8004a24:	9e01      	ldr	r6, [sp, #4]
 8004a26:	9f03      	ldr	r7, [sp, #12]
 8004a28:	1bae      	subs	r6, r5, r6
 8004a2a:	42b7      	cmp	r7, r6
 8004a2c:	4602      	mov	r2, r0
 8004a2e:	460b      	mov	r3, r1
 8004a30:	d135      	bne.n	8004a9e <_dtoa_r+0x6e6>
 8004a32:	f7fb fc4b 	bl	80002cc <__adddf3>
 8004a36:	4642      	mov	r2, r8
 8004a38:	464b      	mov	r3, r9
 8004a3a:	4606      	mov	r6, r0
 8004a3c:	460f      	mov	r7, r1
 8004a3e:	f7fc f88b 	bl	8000b58 <__aeabi_dcmpgt>
 8004a42:	b9d0      	cbnz	r0, 8004a7a <_dtoa_r+0x6c2>
 8004a44:	4642      	mov	r2, r8
 8004a46:	464b      	mov	r3, r9
 8004a48:	4630      	mov	r0, r6
 8004a4a:	4639      	mov	r1, r7
 8004a4c:	f7fc f85c 	bl	8000b08 <__aeabi_dcmpeq>
 8004a50:	b110      	cbz	r0, 8004a58 <_dtoa_r+0x6a0>
 8004a52:	f01a 0f01 	tst.w	sl, #1
 8004a56:	d110      	bne.n	8004a7a <_dtoa_r+0x6c2>
 8004a58:	4620      	mov	r0, r4
 8004a5a:	ee18 1a10 	vmov	r1, s16
 8004a5e:	f000 fae9 	bl	8005034 <_Bfree>
 8004a62:	2300      	movs	r3, #0
 8004a64:	9800      	ldr	r0, [sp, #0]
 8004a66:	702b      	strb	r3, [r5, #0]
 8004a68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004a6a:	3001      	adds	r0, #1
 8004a6c:	6018      	str	r0, [r3, #0]
 8004a6e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	f43f acf1 	beq.w	8004458 <_dtoa_r+0xa0>
 8004a76:	601d      	str	r5, [r3, #0]
 8004a78:	e4ee      	b.n	8004458 <_dtoa_r+0xa0>
 8004a7a:	9f00      	ldr	r7, [sp, #0]
 8004a7c:	462b      	mov	r3, r5
 8004a7e:	461d      	mov	r5, r3
 8004a80:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004a84:	2a39      	cmp	r2, #57	; 0x39
 8004a86:	d106      	bne.n	8004a96 <_dtoa_r+0x6de>
 8004a88:	9a01      	ldr	r2, [sp, #4]
 8004a8a:	429a      	cmp	r2, r3
 8004a8c:	d1f7      	bne.n	8004a7e <_dtoa_r+0x6c6>
 8004a8e:	9901      	ldr	r1, [sp, #4]
 8004a90:	2230      	movs	r2, #48	; 0x30
 8004a92:	3701      	adds	r7, #1
 8004a94:	700a      	strb	r2, [r1, #0]
 8004a96:	781a      	ldrb	r2, [r3, #0]
 8004a98:	3201      	adds	r2, #1
 8004a9a:	701a      	strb	r2, [r3, #0]
 8004a9c:	e790      	b.n	80049c0 <_dtoa_r+0x608>
 8004a9e:	4ba6      	ldr	r3, [pc, #664]	; (8004d38 <_dtoa_r+0x980>)
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	f7fb fdc9 	bl	8000638 <__aeabi_dmul>
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	4606      	mov	r6, r0
 8004aac:	460f      	mov	r7, r1
 8004aae:	f7fc f82b 	bl	8000b08 <__aeabi_dcmpeq>
 8004ab2:	2800      	cmp	r0, #0
 8004ab4:	d09d      	beq.n	80049f2 <_dtoa_r+0x63a>
 8004ab6:	e7cf      	b.n	8004a58 <_dtoa_r+0x6a0>
 8004ab8:	9a08      	ldr	r2, [sp, #32]
 8004aba:	2a00      	cmp	r2, #0
 8004abc:	f000 80d7 	beq.w	8004c6e <_dtoa_r+0x8b6>
 8004ac0:	9a06      	ldr	r2, [sp, #24]
 8004ac2:	2a01      	cmp	r2, #1
 8004ac4:	f300 80ba 	bgt.w	8004c3c <_dtoa_r+0x884>
 8004ac8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004aca:	2a00      	cmp	r2, #0
 8004acc:	f000 80b2 	beq.w	8004c34 <_dtoa_r+0x87c>
 8004ad0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004ad4:	9e07      	ldr	r6, [sp, #28]
 8004ad6:	9d04      	ldr	r5, [sp, #16]
 8004ad8:	9a04      	ldr	r2, [sp, #16]
 8004ada:	441a      	add	r2, r3
 8004adc:	9204      	str	r2, [sp, #16]
 8004ade:	9a05      	ldr	r2, [sp, #20]
 8004ae0:	2101      	movs	r1, #1
 8004ae2:	441a      	add	r2, r3
 8004ae4:	4620      	mov	r0, r4
 8004ae6:	9205      	str	r2, [sp, #20]
 8004ae8:	f000 fb5c 	bl	80051a4 <__i2b>
 8004aec:	4607      	mov	r7, r0
 8004aee:	2d00      	cmp	r5, #0
 8004af0:	dd0c      	ble.n	8004b0c <_dtoa_r+0x754>
 8004af2:	9b05      	ldr	r3, [sp, #20]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	dd09      	ble.n	8004b0c <_dtoa_r+0x754>
 8004af8:	42ab      	cmp	r3, r5
 8004afa:	9a04      	ldr	r2, [sp, #16]
 8004afc:	bfa8      	it	ge
 8004afe:	462b      	movge	r3, r5
 8004b00:	1ad2      	subs	r2, r2, r3
 8004b02:	9204      	str	r2, [sp, #16]
 8004b04:	9a05      	ldr	r2, [sp, #20]
 8004b06:	1aed      	subs	r5, r5, r3
 8004b08:	1ad3      	subs	r3, r2, r3
 8004b0a:	9305      	str	r3, [sp, #20]
 8004b0c:	9b07      	ldr	r3, [sp, #28]
 8004b0e:	b31b      	cbz	r3, 8004b58 <_dtoa_r+0x7a0>
 8004b10:	9b08      	ldr	r3, [sp, #32]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	f000 80af 	beq.w	8004c76 <_dtoa_r+0x8be>
 8004b18:	2e00      	cmp	r6, #0
 8004b1a:	dd13      	ble.n	8004b44 <_dtoa_r+0x78c>
 8004b1c:	4639      	mov	r1, r7
 8004b1e:	4632      	mov	r2, r6
 8004b20:	4620      	mov	r0, r4
 8004b22:	f000 fbff 	bl	8005324 <__pow5mult>
 8004b26:	ee18 2a10 	vmov	r2, s16
 8004b2a:	4601      	mov	r1, r0
 8004b2c:	4607      	mov	r7, r0
 8004b2e:	4620      	mov	r0, r4
 8004b30:	f000 fb4e 	bl	80051d0 <__multiply>
 8004b34:	ee18 1a10 	vmov	r1, s16
 8004b38:	4680      	mov	r8, r0
 8004b3a:	4620      	mov	r0, r4
 8004b3c:	f000 fa7a 	bl	8005034 <_Bfree>
 8004b40:	ee08 8a10 	vmov	s16, r8
 8004b44:	9b07      	ldr	r3, [sp, #28]
 8004b46:	1b9a      	subs	r2, r3, r6
 8004b48:	d006      	beq.n	8004b58 <_dtoa_r+0x7a0>
 8004b4a:	ee18 1a10 	vmov	r1, s16
 8004b4e:	4620      	mov	r0, r4
 8004b50:	f000 fbe8 	bl	8005324 <__pow5mult>
 8004b54:	ee08 0a10 	vmov	s16, r0
 8004b58:	2101      	movs	r1, #1
 8004b5a:	4620      	mov	r0, r4
 8004b5c:	f000 fb22 	bl	80051a4 <__i2b>
 8004b60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	4606      	mov	r6, r0
 8004b66:	f340 8088 	ble.w	8004c7a <_dtoa_r+0x8c2>
 8004b6a:	461a      	mov	r2, r3
 8004b6c:	4601      	mov	r1, r0
 8004b6e:	4620      	mov	r0, r4
 8004b70:	f000 fbd8 	bl	8005324 <__pow5mult>
 8004b74:	9b06      	ldr	r3, [sp, #24]
 8004b76:	2b01      	cmp	r3, #1
 8004b78:	4606      	mov	r6, r0
 8004b7a:	f340 8081 	ble.w	8004c80 <_dtoa_r+0x8c8>
 8004b7e:	f04f 0800 	mov.w	r8, #0
 8004b82:	6933      	ldr	r3, [r6, #16]
 8004b84:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8004b88:	6918      	ldr	r0, [r3, #16]
 8004b8a:	f000 fabb 	bl	8005104 <__hi0bits>
 8004b8e:	f1c0 0020 	rsb	r0, r0, #32
 8004b92:	9b05      	ldr	r3, [sp, #20]
 8004b94:	4418      	add	r0, r3
 8004b96:	f010 001f 	ands.w	r0, r0, #31
 8004b9a:	f000 8092 	beq.w	8004cc2 <_dtoa_r+0x90a>
 8004b9e:	f1c0 0320 	rsb	r3, r0, #32
 8004ba2:	2b04      	cmp	r3, #4
 8004ba4:	f340 808a 	ble.w	8004cbc <_dtoa_r+0x904>
 8004ba8:	f1c0 001c 	rsb	r0, r0, #28
 8004bac:	9b04      	ldr	r3, [sp, #16]
 8004bae:	4403      	add	r3, r0
 8004bb0:	9304      	str	r3, [sp, #16]
 8004bb2:	9b05      	ldr	r3, [sp, #20]
 8004bb4:	4403      	add	r3, r0
 8004bb6:	4405      	add	r5, r0
 8004bb8:	9305      	str	r3, [sp, #20]
 8004bba:	9b04      	ldr	r3, [sp, #16]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	dd07      	ble.n	8004bd0 <_dtoa_r+0x818>
 8004bc0:	ee18 1a10 	vmov	r1, s16
 8004bc4:	461a      	mov	r2, r3
 8004bc6:	4620      	mov	r0, r4
 8004bc8:	f000 fc06 	bl	80053d8 <__lshift>
 8004bcc:	ee08 0a10 	vmov	s16, r0
 8004bd0:	9b05      	ldr	r3, [sp, #20]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	dd05      	ble.n	8004be2 <_dtoa_r+0x82a>
 8004bd6:	4631      	mov	r1, r6
 8004bd8:	461a      	mov	r2, r3
 8004bda:	4620      	mov	r0, r4
 8004bdc:	f000 fbfc 	bl	80053d8 <__lshift>
 8004be0:	4606      	mov	r6, r0
 8004be2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d06e      	beq.n	8004cc6 <_dtoa_r+0x90e>
 8004be8:	ee18 0a10 	vmov	r0, s16
 8004bec:	4631      	mov	r1, r6
 8004bee:	f000 fc63 	bl	80054b8 <__mcmp>
 8004bf2:	2800      	cmp	r0, #0
 8004bf4:	da67      	bge.n	8004cc6 <_dtoa_r+0x90e>
 8004bf6:	9b00      	ldr	r3, [sp, #0]
 8004bf8:	3b01      	subs	r3, #1
 8004bfa:	ee18 1a10 	vmov	r1, s16
 8004bfe:	9300      	str	r3, [sp, #0]
 8004c00:	220a      	movs	r2, #10
 8004c02:	2300      	movs	r3, #0
 8004c04:	4620      	mov	r0, r4
 8004c06:	f000 fa37 	bl	8005078 <__multadd>
 8004c0a:	9b08      	ldr	r3, [sp, #32]
 8004c0c:	ee08 0a10 	vmov	s16, r0
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	f000 81b1 	beq.w	8004f78 <_dtoa_r+0xbc0>
 8004c16:	2300      	movs	r3, #0
 8004c18:	4639      	mov	r1, r7
 8004c1a:	220a      	movs	r2, #10
 8004c1c:	4620      	mov	r0, r4
 8004c1e:	f000 fa2b 	bl	8005078 <__multadd>
 8004c22:	9b02      	ldr	r3, [sp, #8]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	4607      	mov	r7, r0
 8004c28:	f300 808e 	bgt.w	8004d48 <_dtoa_r+0x990>
 8004c2c:	9b06      	ldr	r3, [sp, #24]
 8004c2e:	2b02      	cmp	r3, #2
 8004c30:	dc51      	bgt.n	8004cd6 <_dtoa_r+0x91e>
 8004c32:	e089      	b.n	8004d48 <_dtoa_r+0x990>
 8004c34:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004c36:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004c3a:	e74b      	b.n	8004ad4 <_dtoa_r+0x71c>
 8004c3c:	9b03      	ldr	r3, [sp, #12]
 8004c3e:	1e5e      	subs	r6, r3, #1
 8004c40:	9b07      	ldr	r3, [sp, #28]
 8004c42:	42b3      	cmp	r3, r6
 8004c44:	bfbf      	itttt	lt
 8004c46:	9b07      	ldrlt	r3, [sp, #28]
 8004c48:	9607      	strlt	r6, [sp, #28]
 8004c4a:	1af2      	sublt	r2, r6, r3
 8004c4c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8004c4e:	bfb6      	itet	lt
 8004c50:	189b      	addlt	r3, r3, r2
 8004c52:	1b9e      	subge	r6, r3, r6
 8004c54:	930a      	strlt	r3, [sp, #40]	; 0x28
 8004c56:	9b03      	ldr	r3, [sp, #12]
 8004c58:	bfb8      	it	lt
 8004c5a:	2600      	movlt	r6, #0
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	bfb7      	itett	lt
 8004c60:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8004c64:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8004c68:	1a9d      	sublt	r5, r3, r2
 8004c6a:	2300      	movlt	r3, #0
 8004c6c:	e734      	b.n	8004ad8 <_dtoa_r+0x720>
 8004c6e:	9e07      	ldr	r6, [sp, #28]
 8004c70:	9d04      	ldr	r5, [sp, #16]
 8004c72:	9f08      	ldr	r7, [sp, #32]
 8004c74:	e73b      	b.n	8004aee <_dtoa_r+0x736>
 8004c76:	9a07      	ldr	r2, [sp, #28]
 8004c78:	e767      	b.n	8004b4a <_dtoa_r+0x792>
 8004c7a:	9b06      	ldr	r3, [sp, #24]
 8004c7c:	2b01      	cmp	r3, #1
 8004c7e:	dc18      	bgt.n	8004cb2 <_dtoa_r+0x8fa>
 8004c80:	f1ba 0f00 	cmp.w	sl, #0
 8004c84:	d115      	bne.n	8004cb2 <_dtoa_r+0x8fa>
 8004c86:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004c8a:	b993      	cbnz	r3, 8004cb2 <_dtoa_r+0x8fa>
 8004c8c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8004c90:	0d1b      	lsrs	r3, r3, #20
 8004c92:	051b      	lsls	r3, r3, #20
 8004c94:	b183      	cbz	r3, 8004cb8 <_dtoa_r+0x900>
 8004c96:	9b04      	ldr	r3, [sp, #16]
 8004c98:	3301      	adds	r3, #1
 8004c9a:	9304      	str	r3, [sp, #16]
 8004c9c:	9b05      	ldr	r3, [sp, #20]
 8004c9e:	3301      	adds	r3, #1
 8004ca0:	9305      	str	r3, [sp, #20]
 8004ca2:	f04f 0801 	mov.w	r8, #1
 8004ca6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	f47f af6a 	bne.w	8004b82 <_dtoa_r+0x7ca>
 8004cae:	2001      	movs	r0, #1
 8004cb0:	e76f      	b.n	8004b92 <_dtoa_r+0x7da>
 8004cb2:	f04f 0800 	mov.w	r8, #0
 8004cb6:	e7f6      	b.n	8004ca6 <_dtoa_r+0x8ee>
 8004cb8:	4698      	mov	r8, r3
 8004cba:	e7f4      	b.n	8004ca6 <_dtoa_r+0x8ee>
 8004cbc:	f43f af7d 	beq.w	8004bba <_dtoa_r+0x802>
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	301c      	adds	r0, #28
 8004cc4:	e772      	b.n	8004bac <_dtoa_r+0x7f4>
 8004cc6:	9b03      	ldr	r3, [sp, #12]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	dc37      	bgt.n	8004d3c <_dtoa_r+0x984>
 8004ccc:	9b06      	ldr	r3, [sp, #24]
 8004cce:	2b02      	cmp	r3, #2
 8004cd0:	dd34      	ble.n	8004d3c <_dtoa_r+0x984>
 8004cd2:	9b03      	ldr	r3, [sp, #12]
 8004cd4:	9302      	str	r3, [sp, #8]
 8004cd6:	9b02      	ldr	r3, [sp, #8]
 8004cd8:	b96b      	cbnz	r3, 8004cf6 <_dtoa_r+0x93e>
 8004cda:	4631      	mov	r1, r6
 8004cdc:	2205      	movs	r2, #5
 8004cde:	4620      	mov	r0, r4
 8004ce0:	f000 f9ca 	bl	8005078 <__multadd>
 8004ce4:	4601      	mov	r1, r0
 8004ce6:	4606      	mov	r6, r0
 8004ce8:	ee18 0a10 	vmov	r0, s16
 8004cec:	f000 fbe4 	bl	80054b8 <__mcmp>
 8004cf0:	2800      	cmp	r0, #0
 8004cf2:	f73f adbb 	bgt.w	800486c <_dtoa_r+0x4b4>
 8004cf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004cf8:	9d01      	ldr	r5, [sp, #4]
 8004cfa:	43db      	mvns	r3, r3
 8004cfc:	9300      	str	r3, [sp, #0]
 8004cfe:	f04f 0800 	mov.w	r8, #0
 8004d02:	4631      	mov	r1, r6
 8004d04:	4620      	mov	r0, r4
 8004d06:	f000 f995 	bl	8005034 <_Bfree>
 8004d0a:	2f00      	cmp	r7, #0
 8004d0c:	f43f aea4 	beq.w	8004a58 <_dtoa_r+0x6a0>
 8004d10:	f1b8 0f00 	cmp.w	r8, #0
 8004d14:	d005      	beq.n	8004d22 <_dtoa_r+0x96a>
 8004d16:	45b8      	cmp	r8, r7
 8004d18:	d003      	beq.n	8004d22 <_dtoa_r+0x96a>
 8004d1a:	4641      	mov	r1, r8
 8004d1c:	4620      	mov	r0, r4
 8004d1e:	f000 f989 	bl	8005034 <_Bfree>
 8004d22:	4639      	mov	r1, r7
 8004d24:	4620      	mov	r0, r4
 8004d26:	f000 f985 	bl	8005034 <_Bfree>
 8004d2a:	e695      	b.n	8004a58 <_dtoa_r+0x6a0>
 8004d2c:	2600      	movs	r6, #0
 8004d2e:	4637      	mov	r7, r6
 8004d30:	e7e1      	b.n	8004cf6 <_dtoa_r+0x93e>
 8004d32:	9700      	str	r7, [sp, #0]
 8004d34:	4637      	mov	r7, r6
 8004d36:	e599      	b.n	800486c <_dtoa_r+0x4b4>
 8004d38:	40240000 	.word	0x40240000
 8004d3c:	9b08      	ldr	r3, [sp, #32]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	f000 80ca 	beq.w	8004ed8 <_dtoa_r+0xb20>
 8004d44:	9b03      	ldr	r3, [sp, #12]
 8004d46:	9302      	str	r3, [sp, #8]
 8004d48:	2d00      	cmp	r5, #0
 8004d4a:	dd05      	ble.n	8004d58 <_dtoa_r+0x9a0>
 8004d4c:	4639      	mov	r1, r7
 8004d4e:	462a      	mov	r2, r5
 8004d50:	4620      	mov	r0, r4
 8004d52:	f000 fb41 	bl	80053d8 <__lshift>
 8004d56:	4607      	mov	r7, r0
 8004d58:	f1b8 0f00 	cmp.w	r8, #0
 8004d5c:	d05b      	beq.n	8004e16 <_dtoa_r+0xa5e>
 8004d5e:	6879      	ldr	r1, [r7, #4]
 8004d60:	4620      	mov	r0, r4
 8004d62:	f000 f927 	bl	8004fb4 <_Balloc>
 8004d66:	4605      	mov	r5, r0
 8004d68:	b928      	cbnz	r0, 8004d76 <_dtoa_r+0x9be>
 8004d6a:	4b87      	ldr	r3, [pc, #540]	; (8004f88 <_dtoa_r+0xbd0>)
 8004d6c:	4602      	mov	r2, r0
 8004d6e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8004d72:	f7ff bb3b 	b.w	80043ec <_dtoa_r+0x34>
 8004d76:	693a      	ldr	r2, [r7, #16]
 8004d78:	3202      	adds	r2, #2
 8004d7a:	0092      	lsls	r2, r2, #2
 8004d7c:	f107 010c 	add.w	r1, r7, #12
 8004d80:	300c      	adds	r0, #12
 8004d82:	f7fe fcf5 	bl	8003770 <memcpy>
 8004d86:	2201      	movs	r2, #1
 8004d88:	4629      	mov	r1, r5
 8004d8a:	4620      	mov	r0, r4
 8004d8c:	f000 fb24 	bl	80053d8 <__lshift>
 8004d90:	9b01      	ldr	r3, [sp, #4]
 8004d92:	f103 0901 	add.w	r9, r3, #1
 8004d96:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8004d9a:	4413      	add	r3, r2
 8004d9c:	9305      	str	r3, [sp, #20]
 8004d9e:	f00a 0301 	and.w	r3, sl, #1
 8004da2:	46b8      	mov	r8, r7
 8004da4:	9304      	str	r3, [sp, #16]
 8004da6:	4607      	mov	r7, r0
 8004da8:	4631      	mov	r1, r6
 8004daa:	ee18 0a10 	vmov	r0, s16
 8004dae:	f7ff fa77 	bl	80042a0 <quorem>
 8004db2:	4641      	mov	r1, r8
 8004db4:	9002      	str	r0, [sp, #8]
 8004db6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8004dba:	ee18 0a10 	vmov	r0, s16
 8004dbe:	f000 fb7b 	bl	80054b8 <__mcmp>
 8004dc2:	463a      	mov	r2, r7
 8004dc4:	9003      	str	r0, [sp, #12]
 8004dc6:	4631      	mov	r1, r6
 8004dc8:	4620      	mov	r0, r4
 8004dca:	f000 fb91 	bl	80054f0 <__mdiff>
 8004dce:	68c2      	ldr	r2, [r0, #12]
 8004dd0:	f109 3bff 	add.w	fp, r9, #4294967295
 8004dd4:	4605      	mov	r5, r0
 8004dd6:	bb02      	cbnz	r2, 8004e1a <_dtoa_r+0xa62>
 8004dd8:	4601      	mov	r1, r0
 8004dda:	ee18 0a10 	vmov	r0, s16
 8004dde:	f000 fb6b 	bl	80054b8 <__mcmp>
 8004de2:	4602      	mov	r2, r0
 8004de4:	4629      	mov	r1, r5
 8004de6:	4620      	mov	r0, r4
 8004de8:	9207      	str	r2, [sp, #28]
 8004dea:	f000 f923 	bl	8005034 <_Bfree>
 8004dee:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8004df2:	ea43 0102 	orr.w	r1, r3, r2
 8004df6:	9b04      	ldr	r3, [sp, #16]
 8004df8:	430b      	orrs	r3, r1
 8004dfa:	464d      	mov	r5, r9
 8004dfc:	d10f      	bne.n	8004e1e <_dtoa_r+0xa66>
 8004dfe:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8004e02:	d02a      	beq.n	8004e5a <_dtoa_r+0xaa2>
 8004e04:	9b03      	ldr	r3, [sp, #12]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	dd02      	ble.n	8004e10 <_dtoa_r+0xa58>
 8004e0a:	9b02      	ldr	r3, [sp, #8]
 8004e0c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8004e10:	f88b a000 	strb.w	sl, [fp]
 8004e14:	e775      	b.n	8004d02 <_dtoa_r+0x94a>
 8004e16:	4638      	mov	r0, r7
 8004e18:	e7ba      	b.n	8004d90 <_dtoa_r+0x9d8>
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	e7e2      	b.n	8004de4 <_dtoa_r+0xa2c>
 8004e1e:	9b03      	ldr	r3, [sp, #12]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	db04      	blt.n	8004e2e <_dtoa_r+0xa76>
 8004e24:	9906      	ldr	r1, [sp, #24]
 8004e26:	430b      	orrs	r3, r1
 8004e28:	9904      	ldr	r1, [sp, #16]
 8004e2a:	430b      	orrs	r3, r1
 8004e2c:	d122      	bne.n	8004e74 <_dtoa_r+0xabc>
 8004e2e:	2a00      	cmp	r2, #0
 8004e30:	ddee      	ble.n	8004e10 <_dtoa_r+0xa58>
 8004e32:	ee18 1a10 	vmov	r1, s16
 8004e36:	2201      	movs	r2, #1
 8004e38:	4620      	mov	r0, r4
 8004e3a:	f000 facd 	bl	80053d8 <__lshift>
 8004e3e:	4631      	mov	r1, r6
 8004e40:	ee08 0a10 	vmov	s16, r0
 8004e44:	f000 fb38 	bl	80054b8 <__mcmp>
 8004e48:	2800      	cmp	r0, #0
 8004e4a:	dc03      	bgt.n	8004e54 <_dtoa_r+0xa9c>
 8004e4c:	d1e0      	bne.n	8004e10 <_dtoa_r+0xa58>
 8004e4e:	f01a 0f01 	tst.w	sl, #1
 8004e52:	d0dd      	beq.n	8004e10 <_dtoa_r+0xa58>
 8004e54:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8004e58:	d1d7      	bne.n	8004e0a <_dtoa_r+0xa52>
 8004e5a:	2339      	movs	r3, #57	; 0x39
 8004e5c:	f88b 3000 	strb.w	r3, [fp]
 8004e60:	462b      	mov	r3, r5
 8004e62:	461d      	mov	r5, r3
 8004e64:	3b01      	subs	r3, #1
 8004e66:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8004e6a:	2a39      	cmp	r2, #57	; 0x39
 8004e6c:	d071      	beq.n	8004f52 <_dtoa_r+0xb9a>
 8004e6e:	3201      	adds	r2, #1
 8004e70:	701a      	strb	r2, [r3, #0]
 8004e72:	e746      	b.n	8004d02 <_dtoa_r+0x94a>
 8004e74:	2a00      	cmp	r2, #0
 8004e76:	dd07      	ble.n	8004e88 <_dtoa_r+0xad0>
 8004e78:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8004e7c:	d0ed      	beq.n	8004e5a <_dtoa_r+0xaa2>
 8004e7e:	f10a 0301 	add.w	r3, sl, #1
 8004e82:	f88b 3000 	strb.w	r3, [fp]
 8004e86:	e73c      	b.n	8004d02 <_dtoa_r+0x94a>
 8004e88:	9b05      	ldr	r3, [sp, #20]
 8004e8a:	f809 ac01 	strb.w	sl, [r9, #-1]
 8004e8e:	4599      	cmp	r9, r3
 8004e90:	d047      	beq.n	8004f22 <_dtoa_r+0xb6a>
 8004e92:	ee18 1a10 	vmov	r1, s16
 8004e96:	2300      	movs	r3, #0
 8004e98:	220a      	movs	r2, #10
 8004e9a:	4620      	mov	r0, r4
 8004e9c:	f000 f8ec 	bl	8005078 <__multadd>
 8004ea0:	45b8      	cmp	r8, r7
 8004ea2:	ee08 0a10 	vmov	s16, r0
 8004ea6:	f04f 0300 	mov.w	r3, #0
 8004eaa:	f04f 020a 	mov.w	r2, #10
 8004eae:	4641      	mov	r1, r8
 8004eb0:	4620      	mov	r0, r4
 8004eb2:	d106      	bne.n	8004ec2 <_dtoa_r+0xb0a>
 8004eb4:	f000 f8e0 	bl	8005078 <__multadd>
 8004eb8:	4680      	mov	r8, r0
 8004eba:	4607      	mov	r7, r0
 8004ebc:	f109 0901 	add.w	r9, r9, #1
 8004ec0:	e772      	b.n	8004da8 <_dtoa_r+0x9f0>
 8004ec2:	f000 f8d9 	bl	8005078 <__multadd>
 8004ec6:	4639      	mov	r1, r7
 8004ec8:	4680      	mov	r8, r0
 8004eca:	2300      	movs	r3, #0
 8004ecc:	220a      	movs	r2, #10
 8004ece:	4620      	mov	r0, r4
 8004ed0:	f000 f8d2 	bl	8005078 <__multadd>
 8004ed4:	4607      	mov	r7, r0
 8004ed6:	e7f1      	b.n	8004ebc <_dtoa_r+0xb04>
 8004ed8:	9b03      	ldr	r3, [sp, #12]
 8004eda:	9302      	str	r3, [sp, #8]
 8004edc:	9d01      	ldr	r5, [sp, #4]
 8004ede:	ee18 0a10 	vmov	r0, s16
 8004ee2:	4631      	mov	r1, r6
 8004ee4:	f7ff f9dc 	bl	80042a0 <quorem>
 8004ee8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8004eec:	9b01      	ldr	r3, [sp, #4]
 8004eee:	f805 ab01 	strb.w	sl, [r5], #1
 8004ef2:	1aea      	subs	r2, r5, r3
 8004ef4:	9b02      	ldr	r3, [sp, #8]
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	dd09      	ble.n	8004f0e <_dtoa_r+0xb56>
 8004efa:	ee18 1a10 	vmov	r1, s16
 8004efe:	2300      	movs	r3, #0
 8004f00:	220a      	movs	r2, #10
 8004f02:	4620      	mov	r0, r4
 8004f04:	f000 f8b8 	bl	8005078 <__multadd>
 8004f08:	ee08 0a10 	vmov	s16, r0
 8004f0c:	e7e7      	b.n	8004ede <_dtoa_r+0xb26>
 8004f0e:	9b02      	ldr	r3, [sp, #8]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	bfc8      	it	gt
 8004f14:	461d      	movgt	r5, r3
 8004f16:	9b01      	ldr	r3, [sp, #4]
 8004f18:	bfd8      	it	le
 8004f1a:	2501      	movle	r5, #1
 8004f1c:	441d      	add	r5, r3
 8004f1e:	f04f 0800 	mov.w	r8, #0
 8004f22:	ee18 1a10 	vmov	r1, s16
 8004f26:	2201      	movs	r2, #1
 8004f28:	4620      	mov	r0, r4
 8004f2a:	f000 fa55 	bl	80053d8 <__lshift>
 8004f2e:	4631      	mov	r1, r6
 8004f30:	ee08 0a10 	vmov	s16, r0
 8004f34:	f000 fac0 	bl	80054b8 <__mcmp>
 8004f38:	2800      	cmp	r0, #0
 8004f3a:	dc91      	bgt.n	8004e60 <_dtoa_r+0xaa8>
 8004f3c:	d102      	bne.n	8004f44 <_dtoa_r+0xb8c>
 8004f3e:	f01a 0f01 	tst.w	sl, #1
 8004f42:	d18d      	bne.n	8004e60 <_dtoa_r+0xaa8>
 8004f44:	462b      	mov	r3, r5
 8004f46:	461d      	mov	r5, r3
 8004f48:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004f4c:	2a30      	cmp	r2, #48	; 0x30
 8004f4e:	d0fa      	beq.n	8004f46 <_dtoa_r+0xb8e>
 8004f50:	e6d7      	b.n	8004d02 <_dtoa_r+0x94a>
 8004f52:	9a01      	ldr	r2, [sp, #4]
 8004f54:	429a      	cmp	r2, r3
 8004f56:	d184      	bne.n	8004e62 <_dtoa_r+0xaaa>
 8004f58:	9b00      	ldr	r3, [sp, #0]
 8004f5a:	3301      	adds	r3, #1
 8004f5c:	9300      	str	r3, [sp, #0]
 8004f5e:	2331      	movs	r3, #49	; 0x31
 8004f60:	7013      	strb	r3, [r2, #0]
 8004f62:	e6ce      	b.n	8004d02 <_dtoa_r+0x94a>
 8004f64:	4b09      	ldr	r3, [pc, #36]	; (8004f8c <_dtoa_r+0xbd4>)
 8004f66:	f7ff ba95 	b.w	8004494 <_dtoa_r+0xdc>
 8004f6a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	f47f aa6e 	bne.w	800444e <_dtoa_r+0x96>
 8004f72:	4b07      	ldr	r3, [pc, #28]	; (8004f90 <_dtoa_r+0xbd8>)
 8004f74:	f7ff ba8e 	b.w	8004494 <_dtoa_r+0xdc>
 8004f78:	9b02      	ldr	r3, [sp, #8]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	dcae      	bgt.n	8004edc <_dtoa_r+0xb24>
 8004f7e:	9b06      	ldr	r3, [sp, #24]
 8004f80:	2b02      	cmp	r3, #2
 8004f82:	f73f aea8 	bgt.w	8004cd6 <_dtoa_r+0x91e>
 8004f86:	e7a9      	b.n	8004edc <_dtoa_r+0xb24>
 8004f88:	0800707f 	.word	0x0800707f
 8004f8c:	08006fdc 	.word	0x08006fdc
 8004f90:	08007000 	.word	0x08007000

08004f94 <_localeconv_r>:
 8004f94:	4800      	ldr	r0, [pc, #0]	; (8004f98 <_localeconv_r+0x4>)
 8004f96:	4770      	bx	lr
 8004f98:	2000016c 	.word	0x2000016c

08004f9c <__malloc_lock>:
 8004f9c:	4801      	ldr	r0, [pc, #4]	; (8004fa4 <__malloc_lock+0x8>)
 8004f9e:	f000 bd5e 	b.w	8005a5e <__retarget_lock_acquire_recursive>
 8004fa2:	bf00      	nop
 8004fa4:	20000310 	.word	0x20000310

08004fa8 <__malloc_unlock>:
 8004fa8:	4801      	ldr	r0, [pc, #4]	; (8004fb0 <__malloc_unlock+0x8>)
 8004faa:	f000 bd59 	b.w	8005a60 <__retarget_lock_release_recursive>
 8004fae:	bf00      	nop
 8004fb0:	20000310 	.word	0x20000310

08004fb4 <_Balloc>:
 8004fb4:	b570      	push	{r4, r5, r6, lr}
 8004fb6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004fb8:	4604      	mov	r4, r0
 8004fba:	460d      	mov	r5, r1
 8004fbc:	b976      	cbnz	r6, 8004fdc <_Balloc+0x28>
 8004fbe:	2010      	movs	r0, #16
 8004fc0:	f7fe fbce 	bl	8003760 <malloc>
 8004fc4:	4602      	mov	r2, r0
 8004fc6:	6260      	str	r0, [r4, #36]	; 0x24
 8004fc8:	b920      	cbnz	r0, 8004fd4 <_Balloc+0x20>
 8004fca:	4b18      	ldr	r3, [pc, #96]	; (800502c <_Balloc+0x78>)
 8004fcc:	4818      	ldr	r0, [pc, #96]	; (8005030 <_Balloc+0x7c>)
 8004fce:	2166      	movs	r1, #102	; 0x66
 8004fd0:	f000 fd14 	bl	80059fc <__assert_func>
 8004fd4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004fd8:	6006      	str	r6, [r0, #0]
 8004fda:	60c6      	str	r6, [r0, #12]
 8004fdc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004fde:	68f3      	ldr	r3, [r6, #12]
 8004fe0:	b183      	cbz	r3, 8005004 <_Balloc+0x50>
 8004fe2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004fe4:	68db      	ldr	r3, [r3, #12]
 8004fe6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004fea:	b9b8      	cbnz	r0, 800501c <_Balloc+0x68>
 8004fec:	2101      	movs	r1, #1
 8004fee:	fa01 f605 	lsl.w	r6, r1, r5
 8004ff2:	1d72      	adds	r2, r6, #5
 8004ff4:	0092      	lsls	r2, r2, #2
 8004ff6:	4620      	mov	r0, r4
 8004ff8:	f000 fb60 	bl	80056bc <_calloc_r>
 8004ffc:	b160      	cbz	r0, 8005018 <_Balloc+0x64>
 8004ffe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005002:	e00e      	b.n	8005022 <_Balloc+0x6e>
 8005004:	2221      	movs	r2, #33	; 0x21
 8005006:	2104      	movs	r1, #4
 8005008:	4620      	mov	r0, r4
 800500a:	f000 fb57 	bl	80056bc <_calloc_r>
 800500e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005010:	60f0      	str	r0, [r6, #12]
 8005012:	68db      	ldr	r3, [r3, #12]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d1e4      	bne.n	8004fe2 <_Balloc+0x2e>
 8005018:	2000      	movs	r0, #0
 800501a:	bd70      	pop	{r4, r5, r6, pc}
 800501c:	6802      	ldr	r2, [r0, #0]
 800501e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005022:	2300      	movs	r3, #0
 8005024:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005028:	e7f7      	b.n	800501a <_Balloc+0x66>
 800502a:	bf00      	nop
 800502c:	0800700d 	.word	0x0800700d
 8005030:	08007090 	.word	0x08007090

08005034 <_Bfree>:
 8005034:	b570      	push	{r4, r5, r6, lr}
 8005036:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005038:	4605      	mov	r5, r0
 800503a:	460c      	mov	r4, r1
 800503c:	b976      	cbnz	r6, 800505c <_Bfree+0x28>
 800503e:	2010      	movs	r0, #16
 8005040:	f7fe fb8e 	bl	8003760 <malloc>
 8005044:	4602      	mov	r2, r0
 8005046:	6268      	str	r0, [r5, #36]	; 0x24
 8005048:	b920      	cbnz	r0, 8005054 <_Bfree+0x20>
 800504a:	4b09      	ldr	r3, [pc, #36]	; (8005070 <_Bfree+0x3c>)
 800504c:	4809      	ldr	r0, [pc, #36]	; (8005074 <_Bfree+0x40>)
 800504e:	218a      	movs	r1, #138	; 0x8a
 8005050:	f000 fcd4 	bl	80059fc <__assert_func>
 8005054:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005058:	6006      	str	r6, [r0, #0]
 800505a:	60c6      	str	r6, [r0, #12]
 800505c:	b13c      	cbz	r4, 800506e <_Bfree+0x3a>
 800505e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005060:	6862      	ldr	r2, [r4, #4]
 8005062:	68db      	ldr	r3, [r3, #12]
 8005064:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005068:	6021      	str	r1, [r4, #0]
 800506a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800506e:	bd70      	pop	{r4, r5, r6, pc}
 8005070:	0800700d 	.word	0x0800700d
 8005074:	08007090 	.word	0x08007090

08005078 <__multadd>:
 8005078:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800507c:	690d      	ldr	r5, [r1, #16]
 800507e:	4607      	mov	r7, r0
 8005080:	460c      	mov	r4, r1
 8005082:	461e      	mov	r6, r3
 8005084:	f101 0c14 	add.w	ip, r1, #20
 8005088:	2000      	movs	r0, #0
 800508a:	f8dc 3000 	ldr.w	r3, [ip]
 800508e:	b299      	uxth	r1, r3
 8005090:	fb02 6101 	mla	r1, r2, r1, r6
 8005094:	0c1e      	lsrs	r6, r3, #16
 8005096:	0c0b      	lsrs	r3, r1, #16
 8005098:	fb02 3306 	mla	r3, r2, r6, r3
 800509c:	b289      	uxth	r1, r1
 800509e:	3001      	adds	r0, #1
 80050a0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80050a4:	4285      	cmp	r5, r0
 80050a6:	f84c 1b04 	str.w	r1, [ip], #4
 80050aa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80050ae:	dcec      	bgt.n	800508a <__multadd+0x12>
 80050b0:	b30e      	cbz	r6, 80050f6 <__multadd+0x7e>
 80050b2:	68a3      	ldr	r3, [r4, #8]
 80050b4:	42ab      	cmp	r3, r5
 80050b6:	dc19      	bgt.n	80050ec <__multadd+0x74>
 80050b8:	6861      	ldr	r1, [r4, #4]
 80050ba:	4638      	mov	r0, r7
 80050bc:	3101      	adds	r1, #1
 80050be:	f7ff ff79 	bl	8004fb4 <_Balloc>
 80050c2:	4680      	mov	r8, r0
 80050c4:	b928      	cbnz	r0, 80050d2 <__multadd+0x5a>
 80050c6:	4602      	mov	r2, r0
 80050c8:	4b0c      	ldr	r3, [pc, #48]	; (80050fc <__multadd+0x84>)
 80050ca:	480d      	ldr	r0, [pc, #52]	; (8005100 <__multadd+0x88>)
 80050cc:	21b5      	movs	r1, #181	; 0xb5
 80050ce:	f000 fc95 	bl	80059fc <__assert_func>
 80050d2:	6922      	ldr	r2, [r4, #16]
 80050d4:	3202      	adds	r2, #2
 80050d6:	f104 010c 	add.w	r1, r4, #12
 80050da:	0092      	lsls	r2, r2, #2
 80050dc:	300c      	adds	r0, #12
 80050de:	f7fe fb47 	bl	8003770 <memcpy>
 80050e2:	4621      	mov	r1, r4
 80050e4:	4638      	mov	r0, r7
 80050e6:	f7ff ffa5 	bl	8005034 <_Bfree>
 80050ea:	4644      	mov	r4, r8
 80050ec:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80050f0:	3501      	adds	r5, #1
 80050f2:	615e      	str	r6, [r3, #20]
 80050f4:	6125      	str	r5, [r4, #16]
 80050f6:	4620      	mov	r0, r4
 80050f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80050fc:	0800707f 	.word	0x0800707f
 8005100:	08007090 	.word	0x08007090

08005104 <__hi0bits>:
 8005104:	0c03      	lsrs	r3, r0, #16
 8005106:	041b      	lsls	r3, r3, #16
 8005108:	b9d3      	cbnz	r3, 8005140 <__hi0bits+0x3c>
 800510a:	0400      	lsls	r0, r0, #16
 800510c:	2310      	movs	r3, #16
 800510e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8005112:	bf04      	itt	eq
 8005114:	0200      	lsleq	r0, r0, #8
 8005116:	3308      	addeq	r3, #8
 8005118:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800511c:	bf04      	itt	eq
 800511e:	0100      	lsleq	r0, r0, #4
 8005120:	3304      	addeq	r3, #4
 8005122:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8005126:	bf04      	itt	eq
 8005128:	0080      	lsleq	r0, r0, #2
 800512a:	3302      	addeq	r3, #2
 800512c:	2800      	cmp	r0, #0
 800512e:	db05      	blt.n	800513c <__hi0bits+0x38>
 8005130:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005134:	f103 0301 	add.w	r3, r3, #1
 8005138:	bf08      	it	eq
 800513a:	2320      	moveq	r3, #32
 800513c:	4618      	mov	r0, r3
 800513e:	4770      	bx	lr
 8005140:	2300      	movs	r3, #0
 8005142:	e7e4      	b.n	800510e <__hi0bits+0xa>

08005144 <__lo0bits>:
 8005144:	6803      	ldr	r3, [r0, #0]
 8005146:	f013 0207 	ands.w	r2, r3, #7
 800514a:	4601      	mov	r1, r0
 800514c:	d00b      	beq.n	8005166 <__lo0bits+0x22>
 800514e:	07da      	lsls	r2, r3, #31
 8005150:	d423      	bmi.n	800519a <__lo0bits+0x56>
 8005152:	0798      	lsls	r0, r3, #30
 8005154:	bf49      	itett	mi
 8005156:	085b      	lsrmi	r3, r3, #1
 8005158:	089b      	lsrpl	r3, r3, #2
 800515a:	2001      	movmi	r0, #1
 800515c:	600b      	strmi	r3, [r1, #0]
 800515e:	bf5c      	itt	pl
 8005160:	600b      	strpl	r3, [r1, #0]
 8005162:	2002      	movpl	r0, #2
 8005164:	4770      	bx	lr
 8005166:	b298      	uxth	r0, r3
 8005168:	b9a8      	cbnz	r0, 8005196 <__lo0bits+0x52>
 800516a:	0c1b      	lsrs	r3, r3, #16
 800516c:	2010      	movs	r0, #16
 800516e:	b2da      	uxtb	r2, r3
 8005170:	b90a      	cbnz	r2, 8005176 <__lo0bits+0x32>
 8005172:	3008      	adds	r0, #8
 8005174:	0a1b      	lsrs	r3, r3, #8
 8005176:	071a      	lsls	r2, r3, #28
 8005178:	bf04      	itt	eq
 800517a:	091b      	lsreq	r3, r3, #4
 800517c:	3004      	addeq	r0, #4
 800517e:	079a      	lsls	r2, r3, #30
 8005180:	bf04      	itt	eq
 8005182:	089b      	lsreq	r3, r3, #2
 8005184:	3002      	addeq	r0, #2
 8005186:	07da      	lsls	r2, r3, #31
 8005188:	d403      	bmi.n	8005192 <__lo0bits+0x4e>
 800518a:	085b      	lsrs	r3, r3, #1
 800518c:	f100 0001 	add.w	r0, r0, #1
 8005190:	d005      	beq.n	800519e <__lo0bits+0x5a>
 8005192:	600b      	str	r3, [r1, #0]
 8005194:	4770      	bx	lr
 8005196:	4610      	mov	r0, r2
 8005198:	e7e9      	b.n	800516e <__lo0bits+0x2a>
 800519a:	2000      	movs	r0, #0
 800519c:	4770      	bx	lr
 800519e:	2020      	movs	r0, #32
 80051a0:	4770      	bx	lr
	...

080051a4 <__i2b>:
 80051a4:	b510      	push	{r4, lr}
 80051a6:	460c      	mov	r4, r1
 80051a8:	2101      	movs	r1, #1
 80051aa:	f7ff ff03 	bl	8004fb4 <_Balloc>
 80051ae:	4602      	mov	r2, r0
 80051b0:	b928      	cbnz	r0, 80051be <__i2b+0x1a>
 80051b2:	4b05      	ldr	r3, [pc, #20]	; (80051c8 <__i2b+0x24>)
 80051b4:	4805      	ldr	r0, [pc, #20]	; (80051cc <__i2b+0x28>)
 80051b6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80051ba:	f000 fc1f 	bl	80059fc <__assert_func>
 80051be:	2301      	movs	r3, #1
 80051c0:	6144      	str	r4, [r0, #20]
 80051c2:	6103      	str	r3, [r0, #16]
 80051c4:	bd10      	pop	{r4, pc}
 80051c6:	bf00      	nop
 80051c8:	0800707f 	.word	0x0800707f
 80051cc:	08007090 	.word	0x08007090

080051d0 <__multiply>:
 80051d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051d4:	4691      	mov	r9, r2
 80051d6:	690a      	ldr	r2, [r1, #16]
 80051d8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80051dc:	429a      	cmp	r2, r3
 80051de:	bfb8      	it	lt
 80051e0:	460b      	movlt	r3, r1
 80051e2:	460c      	mov	r4, r1
 80051e4:	bfbc      	itt	lt
 80051e6:	464c      	movlt	r4, r9
 80051e8:	4699      	movlt	r9, r3
 80051ea:	6927      	ldr	r7, [r4, #16]
 80051ec:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80051f0:	68a3      	ldr	r3, [r4, #8]
 80051f2:	6861      	ldr	r1, [r4, #4]
 80051f4:	eb07 060a 	add.w	r6, r7, sl
 80051f8:	42b3      	cmp	r3, r6
 80051fa:	b085      	sub	sp, #20
 80051fc:	bfb8      	it	lt
 80051fe:	3101      	addlt	r1, #1
 8005200:	f7ff fed8 	bl	8004fb4 <_Balloc>
 8005204:	b930      	cbnz	r0, 8005214 <__multiply+0x44>
 8005206:	4602      	mov	r2, r0
 8005208:	4b44      	ldr	r3, [pc, #272]	; (800531c <__multiply+0x14c>)
 800520a:	4845      	ldr	r0, [pc, #276]	; (8005320 <__multiply+0x150>)
 800520c:	f240 115d 	movw	r1, #349	; 0x15d
 8005210:	f000 fbf4 	bl	80059fc <__assert_func>
 8005214:	f100 0514 	add.w	r5, r0, #20
 8005218:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800521c:	462b      	mov	r3, r5
 800521e:	2200      	movs	r2, #0
 8005220:	4543      	cmp	r3, r8
 8005222:	d321      	bcc.n	8005268 <__multiply+0x98>
 8005224:	f104 0314 	add.w	r3, r4, #20
 8005228:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800522c:	f109 0314 	add.w	r3, r9, #20
 8005230:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005234:	9202      	str	r2, [sp, #8]
 8005236:	1b3a      	subs	r2, r7, r4
 8005238:	3a15      	subs	r2, #21
 800523a:	f022 0203 	bic.w	r2, r2, #3
 800523e:	3204      	adds	r2, #4
 8005240:	f104 0115 	add.w	r1, r4, #21
 8005244:	428f      	cmp	r7, r1
 8005246:	bf38      	it	cc
 8005248:	2204      	movcc	r2, #4
 800524a:	9201      	str	r2, [sp, #4]
 800524c:	9a02      	ldr	r2, [sp, #8]
 800524e:	9303      	str	r3, [sp, #12]
 8005250:	429a      	cmp	r2, r3
 8005252:	d80c      	bhi.n	800526e <__multiply+0x9e>
 8005254:	2e00      	cmp	r6, #0
 8005256:	dd03      	ble.n	8005260 <__multiply+0x90>
 8005258:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800525c:	2b00      	cmp	r3, #0
 800525e:	d05a      	beq.n	8005316 <__multiply+0x146>
 8005260:	6106      	str	r6, [r0, #16]
 8005262:	b005      	add	sp, #20
 8005264:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005268:	f843 2b04 	str.w	r2, [r3], #4
 800526c:	e7d8      	b.n	8005220 <__multiply+0x50>
 800526e:	f8b3 a000 	ldrh.w	sl, [r3]
 8005272:	f1ba 0f00 	cmp.w	sl, #0
 8005276:	d024      	beq.n	80052c2 <__multiply+0xf2>
 8005278:	f104 0e14 	add.w	lr, r4, #20
 800527c:	46a9      	mov	r9, r5
 800527e:	f04f 0c00 	mov.w	ip, #0
 8005282:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005286:	f8d9 1000 	ldr.w	r1, [r9]
 800528a:	fa1f fb82 	uxth.w	fp, r2
 800528e:	b289      	uxth	r1, r1
 8005290:	fb0a 110b 	mla	r1, sl, fp, r1
 8005294:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8005298:	f8d9 2000 	ldr.w	r2, [r9]
 800529c:	4461      	add	r1, ip
 800529e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80052a2:	fb0a c20b 	mla	r2, sl, fp, ip
 80052a6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80052aa:	b289      	uxth	r1, r1
 80052ac:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80052b0:	4577      	cmp	r7, lr
 80052b2:	f849 1b04 	str.w	r1, [r9], #4
 80052b6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80052ba:	d8e2      	bhi.n	8005282 <__multiply+0xb2>
 80052bc:	9a01      	ldr	r2, [sp, #4]
 80052be:	f845 c002 	str.w	ip, [r5, r2]
 80052c2:	9a03      	ldr	r2, [sp, #12]
 80052c4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80052c8:	3304      	adds	r3, #4
 80052ca:	f1b9 0f00 	cmp.w	r9, #0
 80052ce:	d020      	beq.n	8005312 <__multiply+0x142>
 80052d0:	6829      	ldr	r1, [r5, #0]
 80052d2:	f104 0c14 	add.w	ip, r4, #20
 80052d6:	46ae      	mov	lr, r5
 80052d8:	f04f 0a00 	mov.w	sl, #0
 80052dc:	f8bc b000 	ldrh.w	fp, [ip]
 80052e0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80052e4:	fb09 220b 	mla	r2, r9, fp, r2
 80052e8:	4492      	add	sl, r2
 80052ea:	b289      	uxth	r1, r1
 80052ec:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80052f0:	f84e 1b04 	str.w	r1, [lr], #4
 80052f4:	f85c 2b04 	ldr.w	r2, [ip], #4
 80052f8:	f8be 1000 	ldrh.w	r1, [lr]
 80052fc:	0c12      	lsrs	r2, r2, #16
 80052fe:	fb09 1102 	mla	r1, r9, r2, r1
 8005302:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8005306:	4567      	cmp	r7, ip
 8005308:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800530c:	d8e6      	bhi.n	80052dc <__multiply+0x10c>
 800530e:	9a01      	ldr	r2, [sp, #4]
 8005310:	50a9      	str	r1, [r5, r2]
 8005312:	3504      	adds	r5, #4
 8005314:	e79a      	b.n	800524c <__multiply+0x7c>
 8005316:	3e01      	subs	r6, #1
 8005318:	e79c      	b.n	8005254 <__multiply+0x84>
 800531a:	bf00      	nop
 800531c:	0800707f 	.word	0x0800707f
 8005320:	08007090 	.word	0x08007090

08005324 <__pow5mult>:
 8005324:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005328:	4615      	mov	r5, r2
 800532a:	f012 0203 	ands.w	r2, r2, #3
 800532e:	4606      	mov	r6, r0
 8005330:	460f      	mov	r7, r1
 8005332:	d007      	beq.n	8005344 <__pow5mult+0x20>
 8005334:	4c25      	ldr	r4, [pc, #148]	; (80053cc <__pow5mult+0xa8>)
 8005336:	3a01      	subs	r2, #1
 8005338:	2300      	movs	r3, #0
 800533a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800533e:	f7ff fe9b 	bl	8005078 <__multadd>
 8005342:	4607      	mov	r7, r0
 8005344:	10ad      	asrs	r5, r5, #2
 8005346:	d03d      	beq.n	80053c4 <__pow5mult+0xa0>
 8005348:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800534a:	b97c      	cbnz	r4, 800536c <__pow5mult+0x48>
 800534c:	2010      	movs	r0, #16
 800534e:	f7fe fa07 	bl	8003760 <malloc>
 8005352:	4602      	mov	r2, r0
 8005354:	6270      	str	r0, [r6, #36]	; 0x24
 8005356:	b928      	cbnz	r0, 8005364 <__pow5mult+0x40>
 8005358:	4b1d      	ldr	r3, [pc, #116]	; (80053d0 <__pow5mult+0xac>)
 800535a:	481e      	ldr	r0, [pc, #120]	; (80053d4 <__pow5mult+0xb0>)
 800535c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005360:	f000 fb4c 	bl	80059fc <__assert_func>
 8005364:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005368:	6004      	str	r4, [r0, #0]
 800536a:	60c4      	str	r4, [r0, #12]
 800536c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005370:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005374:	b94c      	cbnz	r4, 800538a <__pow5mult+0x66>
 8005376:	f240 2171 	movw	r1, #625	; 0x271
 800537a:	4630      	mov	r0, r6
 800537c:	f7ff ff12 	bl	80051a4 <__i2b>
 8005380:	2300      	movs	r3, #0
 8005382:	f8c8 0008 	str.w	r0, [r8, #8]
 8005386:	4604      	mov	r4, r0
 8005388:	6003      	str	r3, [r0, #0]
 800538a:	f04f 0900 	mov.w	r9, #0
 800538e:	07eb      	lsls	r3, r5, #31
 8005390:	d50a      	bpl.n	80053a8 <__pow5mult+0x84>
 8005392:	4639      	mov	r1, r7
 8005394:	4622      	mov	r2, r4
 8005396:	4630      	mov	r0, r6
 8005398:	f7ff ff1a 	bl	80051d0 <__multiply>
 800539c:	4639      	mov	r1, r7
 800539e:	4680      	mov	r8, r0
 80053a0:	4630      	mov	r0, r6
 80053a2:	f7ff fe47 	bl	8005034 <_Bfree>
 80053a6:	4647      	mov	r7, r8
 80053a8:	106d      	asrs	r5, r5, #1
 80053aa:	d00b      	beq.n	80053c4 <__pow5mult+0xa0>
 80053ac:	6820      	ldr	r0, [r4, #0]
 80053ae:	b938      	cbnz	r0, 80053c0 <__pow5mult+0x9c>
 80053b0:	4622      	mov	r2, r4
 80053b2:	4621      	mov	r1, r4
 80053b4:	4630      	mov	r0, r6
 80053b6:	f7ff ff0b 	bl	80051d0 <__multiply>
 80053ba:	6020      	str	r0, [r4, #0]
 80053bc:	f8c0 9000 	str.w	r9, [r0]
 80053c0:	4604      	mov	r4, r0
 80053c2:	e7e4      	b.n	800538e <__pow5mult+0x6a>
 80053c4:	4638      	mov	r0, r7
 80053c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80053ca:	bf00      	nop
 80053cc:	080071e0 	.word	0x080071e0
 80053d0:	0800700d 	.word	0x0800700d
 80053d4:	08007090 	.word	0x08007090

080053d8 <__lshift>:
 80053d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80053dc:	460c      	mov	r4, r1
 80053de:	6849      	ldr	r1, [r1, #4]
 80053e0:	6923      	ldr	r3, [r4, #16]
 80053e2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80053e6:	68a3      	ldr	r3, [r4, #8]
 80053e8:	4607      	mov	r7, r0
 80053ea:	4691      	mov	r9, r2
 80053ec:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80053f0:	f108 0601 	add.w	r6, r8, #1
 80053f4:	42b3      	cmp	r3, r6
 80053f6:	db0b      	blt.n	8005410 <__lshift+0x38>
 80053f8:	4638      	mov	r0, r7
 80053fa:	f7ff fddb 	bl	8004fb4 <_Balloc>
 80053fe:	4605      	mov	r5, r0
 8005400:	b948      	cbnz	r0, 8005416 <__lshift+0x3e>
 8005402:	4602      	mov	r2, r0
 8005404:	4b2a      	ldr	r3, [pc, #168]	; (80054b0 <__lshift+0xd8>)
 8005406:	482b      	ldr	r0, [pc, #172]	; (80054b4 <__lshift+0xdc>)
 8005408:	f240 11d9 	movw	r1, #473	; 0x1d9
 800540c:	f000 faf6 	bl	80059fc <__assert_func>
 8005410:	3101      	adds	r1, #1
 8005412:	005b      	lsls	r3, r3, #1
 8005414:	e7ee      	b.n	80053f4 <__lshift+0x1c>
 8005416:	2300      	movs	r3, #0
 8005418:	f100 0114 	add.w	r1, r0, #20
 800541c:	f100 0210 	add.w	r2, r0, #16
 8005420:	4618      	mov	r0, r3
 8005422:	4553      	cmp	r3, sl
 8005424:	db37      	blt.n	8005496 <__lshift+0xbe>
 8005426:	6920      	ldr	r0, [r4, #16]
 8005428:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800542c:	f104 0314 	add.w	r3, r4, #20
 8005430:	f019 091f 	ands.w	r9, r9, #31
 8005434:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005438:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800543c:	d02f      	beq.n	800549e <__lshift+0xc6>
 800543e:	f1c9 0e20 	rsb	lr, r9, #32
 8005442:	468a      	mov	sl, r1
 8005444:	f04f 0c00 	mov.w	ip, #0
 8005448:	681a      	ldr	r2, [r3, #0]
 800544a:	fa02 f209 	lsl.w	r2, r2, r9
 800544e:	ea42 020c 	orr.w	r2, r2, ip
 8005452:	f84a 2b04 	str.w	r2, [sl], #4
 8005456:	f853 2b04 	ldr.w	r2, [r3], #4
 800545a:	4298      	cmp	r0, r3
 800545c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8005460:	d8f2      	bhi.n	8005448 <__lshift+0x70>
 8005462:	1b03      	subs	r3, r0, r4
 8005464:	3b15      	subs	r3, #21
 8005466:	f023 0303 	bic.w	r3, r3, #3
 800546a:	3304      	adds	r3, #4
 800546c:	f104 0215 	add.w	r2, r4, #21
 8005470:	4290      	cmp	r0, r2
 8005472:	bf38      	it	cc
 8005474:	2304      	movcc	r3, #4
 8005476:	f841 c003 	str.w	ip, [r1, r3]
 800547a:	f1bc 0f00 	cmp.w	ip, #0
 800547e:	d001      	beq.n	8005484 <__lshift+0xac>
 8005480:	f108 0602 	add.w	r6, r8, #2
 8005484:	3e01      	subs	r6, #1
 8005486:	4638      	mov	r0, r7
 8005488:	612e      	str	r6, [r5, #16]
 800548a:	4621      	mov	r1, r4
 800548c:	f7ff fdd2 	bl	8005034 <_Bfree>
 8005490:	4628      	mov	r0, r5
 8005492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005496:	f842 0f04 	str.w	r0, [r2, #4]!
 800549a:	3301      	adds	r3, #1
 800549c:	e7c1      	b.n	8005422 <__lshift+0x4a>
 800549e:	3904      	subs	r1, #4
 80054a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80054a4:	f841 2f04 	str.w	r2, [r1, #4]!
 80054a8:	4298      	cmp	r0, r3
 80054aa:	d8f9      	bhi.n	80054a0 <__lshift+0xc8>
 80054ac:	e7ea      	b.n	8005484 <__lshift+0xac>
 80054ae:	bf00      	nop
 80054b0:	0800707f 	.word	0x0800707f
 80054b4:	08007090 	.word	0x08007090

080054b8 <__mcmp>:
 80054b8:	b530      	push	{r4, r5, lr}
 80054ba:	6902      	ldr	r2, [r0, #16]
 80054bc:	690c      	ldr	r4, [r1, #16]
 80054be:	1b12      	subs	r2, r2, r4
 80054c0:	d10e      	bne.n	80054e0 <__mcmp+0x28>
 80054c2:	f100 0314 	add.w	r3, r0, #20
 80054c6:	3114      	adds	r1, #20
 80054c8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80054cc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80054d0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80054d4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80054d8:	42a5      	cmp	r5, r4
 80054da:	d003      	beq.n	80054e4 <__mcmp+0x2c>
 80054dc:	d305      	bcc.n	80054ea <__mcmp+0x32>
 80054de:	2201      	movs	r2, #1
 80054e0:	4610      	mov	r0, r2
 80054e2:	bd30      	pop	{r4, r5, pc}
 80054e4:	4283      	cmp	r3, r0
 80054e6:	d3f3      	bcc.n	80054d0 <__mcmp+0x18>
 80054e8:	e7fa      	b.n	80054e0 <__mcmp+0x28>
 80054ea:	f04f 32ff 	mov.w	r2, #4294967295
 80054ee:	e7f7      	b.n	80054e0 <__mcmp+0x28>

080054f0 <__mdiff>:
 80054f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054f4:	460c      	mov	r4, r1
 80054f6:	4606      	mov	r6, r0
 80054f8:	4611      	mov	r1, r2
 80054fa:	4620      	mov	r0, r4
 80054fc:	4690      	mov	r8, r2
 80054fe:	f7ff ffdb 	bl	80054b8 <__mcmp>
 8005502:	1e05      	subs	r5, r0, #0
 8005504:	d110      	bne.n	8005528 <__mdiff+0x38>
 8005506:	4629      	mov	r1, r5
 8005508:	4630      	mov	r0, r6
 800550a:	f7ff fd53 	bl	8004fb4 <_Balloc>
 800550e:	b930      	cbnz	r0, 800551e <__mdiff+0x2e>
 8005510:	4b3a      	ldr	r3, [pc, #232]	; (80055fc <__mdiff+0x10c>)
 8005512:	4602      	mov	r2, r0
 8005514:	f240 2132 	movw	r1, #562	; 0x232
 8005518:	4839      	ldr	r0, [pc, #228]	; (8005600 <__mdiff+0x110>)
 800551a:	f000 fa6f 	bl	80059fc <__assert_func>
 800551e:	2301      	movs	r3, #1
 8005520:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005524:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005528:	bfa4      	itt	ge
 800552a:	4643      	movge	r3, r8
 800552c:	46a0      	movge	r8, r4
 800552e:	4630      	mov	r0, r6
 8005530:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005534:	bfa6      	itte	ge
 8005536:	461c      	movge	r4, r3
 8005538:	2500      	movge	r5, #0
 800553a:	2501      	movlt	r5, #1
 800553c:	f7ff fd3a 	bl	8004fb4 <_Balloc>
 8005540:	b920      	cbnz	r0, 800554c <__mdiff+0x5c>
 8005542:	4b2e      	ldr	r3, [pc, #184]	; (80055fc <__mdiff+0x10c>)
 8005544:	4602      	mov	r2, r0
 8005546:	f44f 7110 	mov.w	r1, #576	; 0x240
 800554a:	e7e5      	b.n	8005518 <__mdiff+0x28>
 800554c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8005550:	6926      	ldr	r6, [r4, #16]
 8005552:	60c5      	str	r5, [r0, #12]
 8005554:	f104 0914 	add.w	r9, r4, #20
 8005558:	f108 0514 	add.w	r5, r8, #20
 800555c:	f100 0e14 	add.w	lr, r0, #20
 8005560:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8005564:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005568:	f108 0210 	add.w	r2, r8, #16
 800556c:	46f2      	mov	sl, lr
 800556e:	2100      	movs	r1, #0
 8005570:	f859 3b04 	ldr.w	r3, [r9], #4
 8005574:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8005578:	fa1f f883 	uxth.w	r8, r3
 800557c:	fa11 f18b 	uxtah	r1, r1, fp
 8005580:	0c1b      	lsrs	r3, r3, #16
 8005582:	eba1 0808 	sub.w	r8, r1, r8
 8005586:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800558a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800558e:	fa1f f888 	uxth.w	r8, r8
 8005592:	1419      	asrs	r1, r3, #16
 8005594:	454e      	cmp	r6, r9
 8005596:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800559a:	f84a 3b04 	str.w	r3, [sl], #4
 800559e:	d8e7      	bhi.n	8005570 <__mdiff+0x80>
 80055a0:	1b33      	subs	r3, r6, r4
 80055a2:	3b15      	subs	r3, #21
 80055a4:	f023 0303 	bic.w	r3, r3, #3
 80055a8:	3304      	adds	r3, #4
 80055aa:	3415      	adds	r4, #21
 80055ac:	42a6      	cmp	r6, r4
 80055ae:	bf38      	it	cc
 80055b0:	2304      	movcc	r3, #4
 80055b2:	441d      	add	r5, r3
 80055b4:	4473      	add	r3, lr
 80055b6:	469e      	mov	lr, r3
 80055b8:	462e      	mov	r6, r5
 80055ba:	4566      	cmp	r6, ip
 80055bc:	d30e      	bcc.n	80055dc <__mdiff+0xec>
 80055be:	f10c 0203 	add.w	r2, ip, #3
 80055c2:	1b52      	subs	r2, r2, r5
 80055c4:	f022 0203 	bic.w	r2, r2, #3
 80055c8:	3d03      	subs	r5, #3
 80055ca:	45ac      	cmp	ip, r5
 80055cc:	bf38      	it	cc
 80055ce:	2200      	movcc	r2, #0
 80055d0:	441a      	add	r2, r3
 80055d2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80055d6:	b17b      	cbz	r3, 80055f8 <__mdiff+0x108>
 80055d8:	6107      	str	r7, [r0, #16]
 80055da:	e7a3      	b.n	8005524 <__mdiff+0x34>
 80055dc:	f856 8b04 	ldr.w	r8, [r6], #4
 80055e0:	fa11 f288 	uxtah	r2, r1, r8
 80055e4:	1414      	asrs	r4, r2, #16
 80055e6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80055ea:	b292      	uxth	r2, r2
 80055ec:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80055f0:	f84e 2b04 	str.w	r2, [lr], #4
 80055f4:	1421      	asrs	r1, r4, #16
 80055f6:	e7e0      	b.n	80055ba <__mdiff+0xca>
 80055f8:	3f01      	subs	r7, #1
 80055fa:	e7ea      	b.n	80055d2 <__mdiff+0xe2>
 80055fc:	0800707f 	.word	0x0800707f
 8005600:	08007090 	.word	0x08007090

08005604 <__d2b>:
 8005604:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005608:	4689      	mov	r9, r1
 800560a:	2101      	movs	r1, #1
 800560c:	ec57 6b10 	vmov	r6, r7, d0
 8005610:	4690      	mov	r8, r2
 8005612:	f7ff fccf 	bl	8004fb4 <_Balloc>
 8005616:	4604      	mov	r4, r0
 8005618:	b930      	cbnz	r0, 8005628 <__d2b+0x24>
 800561a:	4602      	mov	r2, r0
 800561c:	4b25      	ldr	r3, [pc, #148]	; (80056b4 <__d2b+0xb0>)
 800561e:	4826      	ldr	r0, [pc, #152]	; (80056b8 <__d2b+0xb4>)
 8005620:	f240 310a 	movw	r1, #778	; 0x30a
 8005624:	f000 f9ea 	bl	80059fc <__assert_func>
 8005628:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800562c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005630:	bb35      	cbnz	r5, 8005680 <__d2b+0x7c>
 8005632:	2e00      	cmp	r6, #0
 8005634:	9301      	str	r3, [sp, #4]
 8005636:	d028      	beq.n	800568a <__d2b+0x86>
 8005638:	4668      	mov	r0, sp
 800563a:	9600      	str	r6, [sp, #0]
 800563c:	f7ff fd82 	bl	8005144 <__lo0bits>
 8005640:	9900      	ldr	r1, [sp, #0]
 8005642:	b300      	cbz	r0, 8005686 <__d2b+0x82>
 8005644:	9a01      	ldr	r2, [sp, #4]
 8005646:	f1c0 0320 	rsb	r3, r0, #32
 800564a:	fa02 f303 	lsl.w	r3, r2, r3
 800564e:	430b      	orrs	r3, r1
 8005650:	40c2      	lsrs	r2, r0
 8005652:	6163      	str	r3, [r4, #20]
 8005654:	9201      	str	r2, [sp, #4]
 8005656:	9b01      	ldr	r3, [sp, #4]
 8005658:	61a3      	str	r3, [r4, #24]
 800565a:	2b00      	cmp	r3, #0
 800565c:	bf14      	ite	ne
 800565e:	2202      	movne	r2, #2
 8005660:	2201      	moveq	r2, #1
 8005662:	6122      	str	r2, [r4, #16]
 8005664:	b1d5      	cbz	r5, 800569c <__d2b+0x98>
 8005666:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800566a:	4405      	add	r5, r0
 800566c:	f8c9 5000 	str.w	r5, [r9]
 8005670:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005674:	f8c8 0000 	str.w	r0, [r8]
 8005678:	4620      	mov	r0, r4
 800567a:	b003      	add	sp, #12
 800567c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005680:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005684:	e7d5      	b.n	8005632 <__d2b+0x2e>
 8005686:	6161      	str	r1, [r4, #20]
 8005688:	e7e5      	b.n	8005656 <__d2b+0x52>
 800568a:	a801      	add	r0, sp, #4
 800568c:	f7ff fd5a 	bl	8005144 <__lo0bits>
 8005690:	9b01      	ldr	r3, [sp, #4]
 8005692:	6163      	str	r3, [r4, #20]
 8005694:	2201      	movs	r2, #1
 8005696:	6122      	str	r2, [r4, #16]
 8005698:	3020      	adds	r0, #32
 800569a:	e7e3      	b.n	8005664 <__d2b+0x60>
 800569c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80056a0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80056a4:	f8c9 0000 	str.w	r0, [r9]
 80056a8:	6918      	ldr	r0, [r3, #16]
 80056aa:	f7ff fd2b 	bl	8005104 <__hi0bits>
 80056ae:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80056b2:	e7df      	b.n	8005674 <__d2b+0x70>
 80056b4:	0800707f 	.word	0x0800707f
 80056b8:	08007090 	.word	0x08007090

080056bc <_calloc_r>:
 80056bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80056be:	fba1 2402 	umull	r2, r4, r1, r2
 80056c2:	b94c      	cbnz	r4, 80056d8 <_calloc_r+0x1c>
 80056c4:	4611      	mov	r1, r2
 80056c6:	9201      	str	r2, [sp, #4]
 80056c8:	f7fe f8d4 	bl	8003874 <_malloc_r>
 80056cc:	9a01      	ldr	r2, [sp, #4]
 80056ce:	4605      	mov	r5, r0
 80056d0:	b930      	cbnz	r0, 80056e0 <_calloc_r+0x24>
 80056d2:	4628      	mov	r0, r5
 80056d4:	b003      	add	sp, #12
 80056d6:	bd30      	pop	{r4, r5, pc}
 80056d8:	220c      	movs	r2, #12
 80056da:	6002      	str	r2, [r0, #0]
 80056dc:	2500      	movs	r5, #0
 80056de:	e7f8      	b.n	80056d2 <_calloc_r+0x16>
 80056e0:	4621      	mov	r1, r4
 80056e2:	f7fe f853 	bl	800378c <memset>
 80056e6:	e7f4      	b.n	80056d2 <_calloc_r+0x16>

080056e8 <_realloc_r>:
 80056e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056ec:	4680      	mov	r8, r0
 80056ee:	4614      	mov	r4, r2
 80056f0:	460e      	mov	r6, r1
 80056f2:	b921      	cbnz	r1, 80056fe <_realloc_r+0x16>
 80056f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80056f8:	4611      	mov	r1, r2
 80056fa:	f7fe b8bb 	b.w	8003874 <_malloc_r>
 80056fe:	b92a      	cbnz	r2, 800570c <_realloc_r+0x24>
 8005700:	f7fe f84c 	bl	800379c <_free_r>
 8005704:	4625      	mov	r5, r4
 8005706:	4628      	mov	r0, r5
 8005708:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800570c:	f000 f9d5 	bl	8005aba <_malloc_usable_size_r>
 8005710:	4284      	cmp	r4, r0
 8005712:	4607      	mov	r7, r0
 8005714:	d802      	bhi.n	800571c <_realloc_r+0x34>
 8005716:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800571a:	d812      	bhi.n	8005742 <_realloc_r+0x5a>
 800571c:	4621      	mov	r1, r4
 800571e:	4640      	mov	r0, r8
 8005720:	f7fe f8a8 	bl	8003874 <_malloc_r>
 8005724:	4605      	mov	r5, r0
 8005726:	2800      	cmp	r0, #0
 8005728:	d0ed      	beq.n	8005706 <_realloc_r+0x1e>
 800572a:	42bc      	cmp	r4, r7
 800572c:	4622      	mov	r2, r4
 800572e:	4631      	mov	r1, r6
 8005730:	bf28      	it	cs
 8005732:	463a      	movcs	r2, r7
 8005734:	f7fe f81c 	bl	8003770 <memcpy>
 8005738:	4631      	mov	r1, r6
 800573a:	4640      	mov	r0, r8
 800573c:	f7fe f82e 	bl	800379c <_free_r>
 8005740:	e7e1      	b.n	8005706 <_realloc_r+0x1e>
 8005742:	4635      	mov	r5, r6
 8005744:	e7df      	b.n	8005706 <_realloc_r+0x1e>

08005746 <__ssputs_r>:
 8005746:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800574a:	688e      	ldr	r6, [r1, #8]
 800574c:	429e      	cmp	r6, r3
 800574e:	4682      	mov	sl, r0
 8005750:	460c      	mov	r4, r1
 8005752:	4690      	mov	r8, r2
 8005754:	461f      	mov	r7, r3
 8005756:	d838      	bhi.n	80057ca <__ssputs_r+0x84>
 8005758:	898a      	ldrh	r2, [r1, #12]
 800575a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800575e:	d032      	beq.n	80057c6 <__ssputs_r+0x80>
 8005760:	6825      	ldr	r5, [r4, #0]
 8005762:	6909      	ldr	r1, [r1, #16]
 8005764:	eba5 0901 	sub.w	r9, r5, r1
 8005768:	6965      	ldr	r5, [r4, #20]
 800576a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800576e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005772:	3301      	adds	r3, #1
 8005774:	444b      	add	r3, r9
 8005776:	106d      	asrs	r5, r5, #1
 8005778:	429d      	cmp	r5, r3
 800577a:	bf38      	it	cc
 800577c:	461d      	movcc	r5, r3
 800577e:	0553      	lsls	r3, r2, #21
 8005780:	d531      	bpl.n	80057e6 <__ssputs_r+0xa0>
 8005782:	4629      	mov	r1, r5
 8005784:	f7fe f876 	bl	8003874 <_malloc_r>
 8005788:	4606      	mov	r6, r0
 800578a:	b950      	cbnz	r0, 80057a2 <__ssputs_r+0x5c>
 800578c:	230c      	movs	r3, #12
 800578e:	f8ca 3000 	str.w	r3, [sl]
 8005792:	89a3      	ldrh	r3, [r4, #12]
 8005794:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005798:	81a3      	strh	r3, [r4, #12]
 800579a:	f04f 30ff 	mov.w	r0, #4294967295
 800579e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057a2:	6921      	ldr	r1, [r4, #16]
 80057a4:	464a      	mov	r2, r9
 80057a6:	f7fd ffe3 	bl	8003770 <memcpy>
 80057aa:	89a3      	ldrh	r3, [r4, #12]
 80057ac:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80057b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057b4:	81a3      	strh	r3, [r4, #12]
 80057b6:	6126      	str	r6, [r4, #16]
 80057b8:	6165      	str	r5, [r4, #20]
 80057ba:	444e      	add	r6, r9
 80057bc:	eba5 0509 	sub.w	r5, r5, r9
 80057c0:	6026      	str	r6, [r4, #0]
 80057c2:	60a5      	str	r5, [r4, #8]
 80057c4:	463e      	mov	r6, r7
 80057c6:	42be      	cmp	r6, r7
 80057c8:	d900      	bls.n	80057cc <__ssputs_r+0x86>
 80057ca:	463e      	mov	r6, r7
 80057cc:	6820      	ldr	r0, [r4, #0]
 80057ce:	4632      	mov	r2, r6
 80057d0:	4641      	mov	r1, r8
 80057d2:	f000 f958 	bl	8005a86 <memmove>
 80057d6:	68a3      	ldr	r3, [r4, #8]
 80057d8:	1b9b      	subs	r3, r3, r6
 80057da:	60a3      	str	r3, [r4, #8]
 80057dc:	6823      	ldr	r3, [r4, #0]
 80057de:	4433      	add	r3, r6
 80057e0:	6023      	str	r3, [r4, #0]
 80057e2:	2000      	movs	r0, #0
 80057e4:	e7db      	b.n	800579e <__ssputs_r+0x58>
 80057e6:	462a      	mov	r2, r5
 80057e8:	f7ff ff7e 	bl	80056e8 <_realloc_r>
 80057ec:	4606      	mov	r6, r0
 80057ee:	2800      	cmp	r0, #0
 80057f0:	d1e1      	bne.n	80057b6 <__ssputs_r+0x70>
 80057f2:	6921      	ldr	r1, [r4, #16]
 80057f4:	4650      	mov	r0, sl
 80057f6:	f7fd ffd1 	bl	800379c <_free_r>
 80057fa:	e7c7      	b.n	800578c <__ssputs_r+0x46>

080057fc <_svfiprintf_r>:
 80057fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005800:	4698      	mov	r8, r3
 8005802:	898b      	ldrh	r3, [r1, #12]
 8005804:	061b      	lsls	r3, r3, #24
 8005806:	b09d      	sub	sp, #116	; 0x74
 8005808:	4607      	mov	r7, r0
 800580a:	460d      	mov	r5, r1
 800580c:	4614      	mov	r4, r2
 800580e:	d50e      	bpl.n	800582e <_svfiprintf_r+0x32>
 8005810:	690b      	ldr	r3, [r1, #16]
 8005812:	b963      	cbnz	r3, 800582e <_svfiprintf_r+0x32>
 8005814:	2140      	movs	r1, #64	; 0x40
 8005816:	f7fe f82d 	bl	8003874 <_malloc_r>
 800581a:	6028      	str	r0, [r5, #0]
 800581c:	6128      	str	r0, [r5, #16]
 800581e:	b920      	cbnz	r0, 800582a <_svfiprintf_r+0x2e>
 8005820:	230c      	movs	r3, #12
 8005822:	603b      	str	r3, [r7, #0]
 8005824:	f04f 30ff 	mov.w	r0, #4294967295
 8005828:	e0d1      	b.n	80059ce <_svfiprintf_r+0x1d2>
 800582a:	2340      	movs	r3, #64	; 0x40
 800582c:	616b      	str	r3, [r5, #20]
 800582e:	2300      	movs	r3, #0
 8005830:	9309      	str	r3, [sp, #36]	; 0x24
 8005832:	2320      	movs	r3, #32
 8005834:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005838:	f8cd 800c 	str.w	r8, [sp, #12]
 800583c:	2330      	movs	r3, #48	; 0x30
 800583e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80059e8 <_svfiprintf_r+0x1ec>
 8005842:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005846:	f04f 0901 	mov.w	r9, #1
 800584a:	4623      	mov	r3, r4
 800584c:	469a      	mov	sl, r3
 800584e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005852:	b10a      	cbz	r2, 8005858 <_svfiprintf_r+0x5c>
 8005854:	2a25      	cmp	r2, #37	; 0x25
 8005856:	d1f9      	bne.n	800584c <_svfiprintf_r+0x50>
 8005858:	ebba 0b04 	subs.w	fp, sl, r4
 800585c:	d00b      	beq.n	8005876 <_svfiprintf_r+0x7a>
 800585e:	465b      	mov	r3, fp
 8005860:	4622      	mov	r2, r4
 8005862:	4629      	mov	r1, r5
 8005864:	4638      	mov	r0, r7
 8005866:	f7ff ff6e 	bl	8005746 <__ssputs_r>
 800586a:	3001      	adds	r0, #1
 800586c:	f000 80aa 	beq.w	80059c4 <_svfiprintf_r+0x1c8>
 8005870:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005872:	445a      	add	r2, fp
 8005874:	9209      	str	r2, [sp, #36]	; 0x24
 8005876:	f89a 3000 	ldrb.w	r3, [sl]
 800587a:	2b00      	cmp	r3, #0
 800587c:	f000 80a2 	beq.w	80059c4 <_svfiprintf_r+0x1c8>
 8005880:	2300      	movs	r3, #0
 8005882:	f04f 32ff 	mov.w	r2, #4294967295
 8005886:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800588a:	f10a 0a01 	add.w	sl, sl, #1
 800588e:	9304      	str	r3, [sp, #16]
 8005890:	9307      	str	r3, [sp, #28]
 8005892:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005896:	931a      	str	r3, [sp, #104]	; 0x68
 8005898:	4654      	mov	r4, sl
 800589a:	2205      	movs	r2, #5
 800589c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80058a0:	4851      	ldr	r0, [pc, #324]	; (80059e8 <_svfiprintf_r+0x1ec>)
 80058a2:	f7fa fcbd 	bl	8000220 <memchr>
 80058a6:	9a04      	ldr	r2, [sp, #16]
 80058a8:	b9d8      	cbnz	r0, 80058e2 <_svfiprintf_r+0xe6>
 80058aa:	06d0      	lsls	r0, r2, #27
 80058ac:	bf44      	itt	mi
 80058ae:	2320      	movmi	r3, #32
 80058b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80058b4:	0711      	lsls	r1, r2, #28
 80058b6:	bf44      	itt	mi
 80058b8:	232b      	movmi	r3, #43	; 0x2b
 80058ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80058be:	f89a 3000 	ldrb.w	r3, [sl]
 80058c2:	2b2a      	cmp	r3, #42	; 0x2a
 80058c4:	d015      	beq.n	80058f2 <_svfiprintf_r+0xf6>
 80058c6:	9a07      	ldr	r2, [sp, #28]
 80058c8:	4654      	mov	r4, sl
 80058ca:	2000      	movs	r0, #0
 80058cc:	f04f 0c0a 	mov.w	ip, #10
 80058d0:	4621      	mov	r1, r4
 80058d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80058d6:	3b30      	subs	r3, #48	; 0x30
 80058d8:	2b09      	cmp	r3, #9
 80058da:	d94e      	bls.n	800597a <_svfiprintf_r+0x17e>
 80058dc:	b1b0      	cbz	r0, 800590c <_svfiprintf_r+0x110>
 80058de:	9207      	str	r2, [sp, #28]
 80058e0:	e014      	b.n	800590c <_svfiprintf_r+0x110>
 80058e2:	eba0 0308 	sub.w	r3, r0, r8
 80058e6:	fa09 f303 	lsl.w	r3, r9, r3
 80058ea:	4313      	orrs	r3, r2
 80058ec:	9304      	str	r3, [sp, #16]
 80058ee:	46a2      	mov	sl, r4
 80058f0:	e7d2      	b.n	8005898 <_svfiprintf_r+0x9c>
 80058f2:	9b03      	ldr	r3, [sp, #12]
 80058f4:	1d19      	adds	r1, r3, #4
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	9103      	str	r1, [sp, #12]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	bfbb      	ittet	lt
 80058fe:	425b      	neglt	r3, r3
 8005900:	f042 0202 	orrlt.w	r2, r2, #2
 8005904:	9307      	strge	r3, [sp, #28]
 8005906:	9307      	strlt	r3, [sp, #28]
 8005908:	bfb8      	it	lt
 800590a:	9204      	strlt	r2, [sp, #16]
 800590c:	7823      	ldrb	r3, [r4, #0]
 800590e:	2b2e      	cmp	r3, #46	; 0x2e
 8005910:	d10c      	bne.n	800592c <_svfiprintf_r+0x130>
 8005912:	7863      	ldrb	r3, [r4, #1]
 8005914:	2b2a      	cmp	r3, #42	; 0x2a
 8005916:	d135      	bne.n	8005984 <_svfiprintf_r+0x188>
 8005918:	9b03      	ldr	r3, [sp, #12]
 800591a:	1d1a      	adds	r2, r3, #4
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	9203      	str	r2, [sp, #12]
 8005920:	2b00      	cmp	r3, #0
 8005922:	bfb8      	it	lt
 8005924:	f04f 33ff 	movlt.w	r3, #4294967295
 8005928:	3402      	adds	r4, #2
 800592a:	9305      	str	r3, [sp, #20]
 800592c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80059f8 <_svfiprintf_r+0x1fc>
 8005930:	7821      	ldrb	r1, [r4, #0]
 8005932:	2203      	movs	r2, #3
 8005934:	4650      	mov	r0, sl
 8005936:	f7fa fc73 	bl	8000220 <memchr>
 800593a:	b140      	cbz	r0, 800594e <_svfiprintf_r+0x152>
 800593c:	2340      	movs	r3, #64	; 0x40
 800593e:	eba0 000a 	sub.w	r0, r0, sl
 8005942:	fa03 f000 	lsl.w	r0, r3, r0
 8005946:	9b04      	ldr	r3, [sp, #16]
 8005948:	4303      	orrs	r3, r0
 800594a:	3401      	adds	r4, #1
 800594c:	9304      	str	r3, [sp, #16]
 800594e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005952:	4826      	ldr	r0, [pc, #152]	; (80059ec <_svfiprintf_r+0x1f0>)
 8005954:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005958:	2206      	movs	r2, #6
 800595a:	f7fa fc61 	bl	8000220 <memchr>
 800595e:	2800      	cmp	r0, #0
 8005960:	d038      	beq.n	80059d4 <_svfiprintf_r+0x1d8>
 8005962:	4b23      	ldr	r3, [pc, #140]	; (80059f0 <_svfiprintf_r+0x1f4>)
 8005964:	bb1b      	cbnz	r3, 80059ae <_svfiprintf_r+0x1b2>
 8005966:	9b03      	ldr	r3, [sp, #12]
 8005968:	3307      	adds	r3, #7
 800596a:	f023 0307 	bic.w	r3, r3, #7
 800596e:	3308      	adds	r3, #8
 8005970:	9303      	str	r3, [sp, #12]
 8005972:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005974:	4433      	add	r3, r6
 8005976:	9309      	str	r3, [sp, #36]	; 0x24
 8005978:	e767      	b.n	800584a <_svfiprintf_r+0x4e>
 800597a:	fb0c 3202 	mla	r2, ip, r2, r3
 800597e:	460c      	mov	r4, r1
 8005980:	2001      	movs	r0, #1
 8005982:	e7a5      	b.n	80058d0 <_svfiprintf_r+0xd4>
 8005984:	2300      	movs	r3, #0
 8005986:	3401      	adds	r4, #1
 8005988:	9305      	str	r3, [sp, #20]
 800598a:	4619      	mov	r1, r3
 800598c:	f04f 0c0a 	mov.w	ip, #10
 8005990:	4620      	mov	r0, r4
 8005992:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005996:	3a30      	subs	r2, #48	; 0x30
 8005998:	2a09      	cmp	r2, #9
 800599a:	d903      	bls.n	80059a4 <_svfiprintf_r+0x1a8>
 800599c:	2b00      	cmp	r3, #0
 800599e:	d0c5      	beq.n	800592c <_svfiprintf_r+0x130>
 80059a0:	9105      	str	r1, [sp, #20]
 80059a2:	e7c3      	b.n	800592c <_svfiprintf_r+0x130>
 80059a4:	fb0c 2101 	mla	r1, ip, r1, r2
 80059a8:	4604      	mov	r4, r0
 80059aa:	2301      	movs	r3, #1
 80059ac:	e7f0      	b.n	8005990 <_svfiprintf_r+0x194>
 80059ae:	ab03      	add	r3, sp, #12
 80059b0:	9300      	str	r3, [sp, #0]
 80059b2:	462a      	mov	r2, r5
 80059b4:	4b0f      	ldr	r3, [pc, #60]	; (80059f4 <_svfiprintf_r+0x1f8>)
 80059b6:	a904      	add	r1, sp, #16
 80059b8:	4638      	mov	r0, r7
 80059ba:	f7fe f86f 	bl	8003a9c <_printf_float>
 80059be:	1c42      	adds	r2, r0, #1
 80059c0:	4606      	mov	r6, r0
 80059c2:	d1d6      	bne.n	8005972 <_svfiprintf_r+0x176>
 80059c4:	89ab      	ldrh	r3, [r5, #12]
 80059c6:	065b      	lsls	r3, r3, #25
 80059c8:	f53f af2c 	bmi.w	8005824 <_svfiprintf_r+0x28>
 80059cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80059ce:	b01d      	add	sp, #116	; 0x74
 80059d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059d4:	ab03      	add	r3, sp, #12
 80059d6:	9300      	str	r3, [sp, #0]
 80059d8:	462a      	mov	r2, r5
 80059da:	4b06      	ldr	r3, [pc, #24]	; (80059f4 <_svfiprintf_r+0x1f8>)
 80059dc:	a904      	add	r1, sp, #16
 80059de:	4638      	mov	r0, r7
 80059e0:	f7fe fb00 	bl	8003fe4 <_printf_i>
 80059e4:	e7eb      	b.n	80059be <_svfiprintf_r+0x1c2>
 80059e6:	bf00      	nop
 80059e8:	080071ec 	.word	0x080071ec
 80059ec:	080071f6 	.word	0x080071f6
 80059f0:	08003a9d 	.word	0x08003a9d
 80059f4:	08005747 	.word	0x08005747
 80059f8:	080071f2 	.word	0x080071f2

080059fc <__assert_func>:
 80059fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80059fe:	4614      	mov	r4, r2
 8005a00:	461a      	mov	r2, r3
 8005a02:	4b09      	ldr	r3, [pc, #36]	; (8005a28 <__assert_func+0x2c>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4605      	mov	r5, r0
 8005a08:	68d8      	ldr	r0, [r3, #12]
 8005a0a:	b14c      	cbz	r4, 8005a20 <__assert_func+0x24>
 8005a0c:	4b07      	ldr	r3, [pc, #28]	; (8005a2c <__assert_func+0x30>)
 8005a0e:	9100      	str	r1, [sp, #0]
 8005a10:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005a14:	4906      	ldr	r1, [pc, #24]	; (8005a30 <__assert_func+0x34>)
 8005a16:	462b      	mov	r3, r5
 8005a18:	f000 f80e 	bl	8005a38 <fiprintf>
 8005a1c:	f000 fa7c 	bl	8005f18 <abort>
 8005a20:	4b04      	ldr	r3, [pc, #16]	; (8005a34 <__assert_func+0x38>)
 8005a22:	461c      	mov	r4, r3
 8005a24:	e7f3      	b.n	8005a0e <__assert_func+0x12>
 8005a26:	bf00      	nop
 8005a28:	20000018 	.word	0x20000018
 8005a2c:	080071fd 	.word	0x080071fd
 8005a30:	0800720a 	.word	0x0800720a
 8005a34:	08006604 	.word	0x08006604

08005a38 <fiprintf>:
 8005a38:	b40e      	push	{r1, r2, r3}
 8005a3a:	b503      	push	{r0, r1, lr}
 8005a3c:	4601      	mov	r1, r0
 8005a3e:	ab03      	add	r3, sp, #12
 8005a40:	4805      	ldr	r0, [pc, #20]	; (8005a58 <fiprintf+0x20>)
 8005a42:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a46:	6800      	ldr	r0, [r0, #0]
 8005a48:	9301      	str	r3, [sp, #4]
 8005a4a:	f000 f867 	bl	8005b1c <_vfiprintf_r>
 8005a4e:	b002      	add	sp, #8
 8005a50:	f85d eb04 	ldr.w	lr, [sp], #4
 8005a54:	b003      	add	sp, #12
 8005a56:	4770      	bx	lr
 8005a58:	20000018 	.word	0x20000018

08005a5c <__retarget_lock_init_recursive>:
 8005a5c:	4770      	bx	lr

08005a5e <__retarget_lock_acquire_recursive>:
 8005a5e:	4770      	bx	lr

08005a60 <__retarget_lock_release_recursive>:
 8005a60:	4770      	bx	lr

08005a62 <__ascii_mbtowc>:
 8005a62:	b082      	sub	sp, #8
 8005a64:	b901      	cbnz	r1, 8005a68 <__ascii_mbtowc+0x6>
 8005a66:	a901      	add	r1, sp, #4
 8005a68:	b142      	cbz	r2, 8005a7c <__ascii_mbtowc+0x1a>
 8005a6a:	b14b      	cbz	r3, 8005a80 <__ascii_mbtowc+0x1e>
 8005a6c:	7813      	ldrb	r3, [r2, #0]
 8005a6e:	600b      	str	r3, [r1, #0]
 8005a70:	7812      	ldrb	r2, [r2, #0]
 8005a72:	1e10      	subs	r0, r2, #0
 8005a74:	bf18      	it	ne
 8005a76:	2001      	movne	r0, #1
 8005a78:	b002      	add	sp, #8
 8005a7a:	4770      	bx	lr
 8005a7c:	4610      	mov	r0, r2
 8005a7e:	e7fb      	b.n	8005a78 <__ascii_mbtowc+0x16>
 8005a80:	f06f 0001 	mvn.w	r0, #1
 8005a84:	e7f8      	b.n	8005a78 <__ascii_mbtowc+0x16>

08005a86 <memmove>:
 8005a86:	4288      	cmp	r0, r1
 8005a88:	b510      	push	{r4, lr}
 8005a8a:	eb01 0402 	add.w	r4, r1, r2
 8005a8e:	d902      	bls.n	8005a96 <memmove+0x10>
 8005a90:	4284      	cmp	r4, r0
 8005a92:	4623      	mov	r3, r4
 8005a94:	d807      	bhi.n	8005aa6 <memmove+0x20>
 8005a96:	1e43      	subs	r3, r0, #1
 8005a98:	42a1      	cmp	r1, r4
 8005a9a:	d008      	beq.n	8005aae <memmove+0x28>
 8005a9c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005aa0:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005aa4:	e7f8      	b.n	8005a98 <memmove+0x12>
 8005aa6:	4402      	add	r2, r0
 8005aa8:	4601      	mov	r1, r0
 8005aaa:	428a      	cmp	r2, r1
 8005aac:	d100      	bne.n	8005ab0 <memmove+0x2a>
 8005aae:	bd10      	pop	{r4, pc}
 8005ab0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005ab4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005ab8:	e7f7      	b.n	8005aaa <memmove+0x24>

08005aba <_malloc_usable_size_r>:
 8005aba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005abe:	1f18      	subs	r0, r3, #4
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	bfbc      	itt	lt
 8005ac4:	580b      	ldrlt	r3, [r1, r0]
 8005ac6:	18c0      	addlt	r0, r0, r3
 8005ac8:	4770      	bx	lr

08005aca <__sfputc_r>:
 8005aca:	6893      	ldr	r3, [r2, #8]
 8005acc:	3b01      	subs	r3, #1
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	b410      	push	{r4}
 8005ad2:	6093      	str	r3, [r2, #8]
 8005ad4:	da08      	bge.n	8005ae8 <__sfputc_r+0x1e>
 8005ad6:	6994      	ldr	r4, [r2, #24]
 8005ad8:	42a3      	cmp	r3, r4
 8005ada:	db01      	blt.n	8005ae0 <__sfputc_r+0x16>
 8005adc:	290a      	cmp	r1, #10
 8005ade:	d103      	bne.n	8005ae8 <__sfputc_r+0x1e>
 8005ae0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005ae4:	f000 b94a 	b.w	8005d7c <__swbuf_r>
 8005ae8:	6813      	ldr	r3, [r2, #0]
 8005aea:	1c58      	adds	r0, r3, #1
 8005aec:	6010      	str	r0, [r2, #0]
 8005aee:	7019      	strb	r1, [r3, #0]
 8005af0:	4608      	mov	r0, r1
 8005af2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005af6:	4770      	bx	lr

08005af8 <__sfputs_r>:
 8005af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005afa:	4606      	mov	r6, r0
 8005afc:	460f      	mov	r7, r1
 8005afe:	4614      	mov	r4, r2
 8005b00:	18d5      	adds	r5, r2, r3
 8005b02:	42ac      	cmp	r4, r5
 8005b04:	d101      	bne.n	8005b0a <__sfputs_r+0x12>
 8005b06:	2000      	movs	r0, #0
 8005b08:	e007      	b.n	8005b1a <__sfputs_r+0x22>
 8005b0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b0e:	463a      	mov	r2, r7
 8005b10:	4630      	mov	r0, r6
 8005b12:	f7ff ffda 	bl	8005aca <__sfputc_r>
 8005b16:	1c43      	adds	r3, r0, #1
 8005b18:	d1f3      	bne.n	8005b02 <__sfputs_r+0xa>
 8005b1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005b1c <_vfiprintf_r>:
 8005b1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b20:	460d      	mov	r5, r1
 8005b22:	b09d      	sub	sp, #116	; 0x74
 8005b24:	4614      	mov	r4, r2
 8005b26:	4698      	mov	r8, r3
 8005b28:	4606      	mov	r6, r0
 8005b2a:	b118      	cbz	r0, 8005b34 <_vfiprintf_r+0x18>
 8005b2c:	6983      	ldr	r3, [r0, #24]
 8005b2e:	b90b      	cbnz	r3, 8005b34 <_vfiprintf_r+0x18>
 8005b30:	f000 fb14 	bl	800615c <__sinit>
 8005b34:	4b89      	ldr	r3, [pc, #548]	; (8005d5c <_vfiprintf_r+0x240>)
 8005b36:	429d      	cmp	r5, r3
 8005b38:	d11b      	bne.n	8005b72 <_vfiprintf_r+0x56>
 8005b3a:	6875      	ldr	r5, [r6, #4]
 8005b3c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005b3e:	07d9      	lsls	r1, r3, #31
 8005b40:	d405      	bmi.n	8005b4e <_vfiprintf_r+0x32>
 8005b42:	89ab      	ldrh	r3, [r5, #12]
 8005b44:	059a      	lsls	r2, r3, #22
 8005b46:	d402      	bmi.n	8005b4e <_vfiprintf_r+0x32>
 8005b48:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005b4a:	f7ff ff88 	bl	8005a5e <__retarget_lock_acquire_recursive>
 8005b4e:	89ab      	ldrh	r3, [r5, #12]
 8005b50:	071b      	lsls	r3, r3, #28
 8005b52:	d501      	bpl.n	8005b58 <_vfiprintf_r+0x3c>
 8005b54:	692b      	ldr	r3, [r5, #16]
 8005b56:	b9eb      	cbnz	r3, 8005b94 <_vfiprintf_r+0x78>
 8005b58:	4629      	mov	r1, r5
 8005b5a:	4630      	mov	r0, r6
 8005b5c:	f000 f96e 	bl	8005e3c <__swsetup_r>
 8005b60:	b1c0      	cbz	r0, 8005b94 <_vfiprintf_r+0x78>
 8005b62:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005b64:	07dc      	lsls	r4, r3, #31
 8005b66:	d50e      	bpl.n	8005b86 <_vfiprintf_r+0x6a>
 8005b68:	f04f 30ff 	mov.w	r0, #4294967295
 8005b6c:	b01d      	add	sp, #116	; 0x74
 8005b6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b72:	4b7b      	ldr	r3, [pc, #492]	; (8005d60 <_vfiprintf_r+0x244>)
 8005b74:	429d      	cmp	r5, r3
 8005b76:	d101      	bne.n	8005b7c <_vfiprintf_r+0x60>
 8005b78:	68b5      	ldr	r5, [r6, #8]
 8005b7a:	e7df      	b.n	8005b3c <_vfiprintf_r+0x20>
 8005b7c:	4b79      	ldr	r3, [pc, #484]	; (8005d64 <_vfiprintf_r+0x248>)
 8005b7e:	429d      	cmp	r5, r3
 8005b80:	bf08      	it	eq
 8005b82:	68f5      	ldreq	r5, [r6, #12]
 8005b84:	e7da      	b.n	8005b3c <_vfiprintf_r+0x20>
 8005b86:	89ab      	ldrh	r3, [r5, #12]
 8005b88:	0598      	lsls	r0, r3, #22
 8005b8a:	d4ed      	bmi.n	8005b68 <_vfiprintf_r+0x4c>
 8005b8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005b8e:	f7ff ff67 	bl	8005a60 <__retarget_lock_release_recursive>
 8005b92:	e7e9      	b.n	8005b68 <_vfiprintf_r+0x4c>
 8005b94:	2300      	movs	r3, #0
 8005b96:	9309      	str	r3, [sp, #36]	; 0x24
 8005b98:	2320      	movs	r3, #32
 8005b9a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005b9e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005ba2:	2330      	movs	r3, #48	; 0x30
 8005ba4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005d68 <_vfiprintf_r+0x24c>
 8005ba8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005bac:	f04f 0901 	mov.w	r9, #1
 8005bb0:	4623      	mov	r3, r4
 8005bb2:	469a      	mov	sl, r3
 8005bb4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005bb8:	b10a      	cbz	r2, 8005bbe <_vfiprintf_r+0xa2>
 8005bba:	2a25      	cmp	r2, #37	; 0x25
 8005bbc:	d1f9      	bne.n	8005bb2 <_vfiprintf_r+0x96>
 8005bbe:	ebba 0b04 	subs.w	fp, sl, r4
 8005bc2:	d00b      	beq.n	8005bdc <_vfiprintf_r+0xc0>
 8005bc4:	465b      	mov	r3, fp
 8005bc6:	4622      	mov	r2, r4
 8005bc8:	4629      	mov	r1, r5
 8005bca:	4630      	mov	r0, r6
 8005bcc:	f7ff ff94 	bl	8005af8 <__sfputs_r>
 8005bd0:	3001      	adds	r0, #1
 8005bd2:	f000 80aa 	beq.w	8005d2a <_vfiprintf_r+0x20e>
 8005bd6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005bd8:	445a      	add	r2, fp
 8005bda:	9209      	str	r2, [sp, #36]	; 0x24
 8005bdc:	f89a 3000 	ldrb.w	r3, [sl]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	f000 80a2 	beq.w	8005d2a <_vfiprintf_r+0x20e>
 8005be6:	2300      	movs	r3, #0
 8005be8:	f04f 32ff 	mov.w	r2, #4294967295
 8005bec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005bf0:	f10a 0a01 	add.w	sl, sl, #1
 8005bf4:	9304      	str	r3, [sp, #16]
 8005bf6:	9307      	str	r3, [sp, #28]
 8005bf8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005bfc:	931a      	str	r3, [sp, #104]	; 0x68
 8005bfe:	4654      	mov	r4, sl
 8005c00:	2205      	movs	r2, #5
 8005c02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c06:	4858      	ldr	r0, [pc, #352]	; (8005d68 <_vfiprintf_r+0x24c>)
 8005c08:	f7fa fb0a 	bl	8000220 <memchr>
 8005c0c:	9a04      	ldr	r2, [sp, #16]
 8005c0e:	b9d8      	cbnz	r0, 8005c48 <_vfiprintf_r+0x12c>
 8005c10:	06d1      	lsls	r1, r2, #27
 8005c12:	bf44      	itt	mi
 8005c14:	2320      	movmi	r3, #32
 8005c16:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005c1a:	0713      	lsls	r3, r2, #28
 8005c1c:	bf44      	itt	mi
 8005c1e:	232b      	movmi	r3, #43	; 0x2b
 8005c20:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005c24:	f89a 3000 	ldrb.w	r3, [sl]
 8005c28:	2b2a      	cmp	r3, #42	; 0x2a
 8005c2a:	d015      	beq.n	8005c58 <_vfiprintf_r+0x13c>
 8005c2c:	9a07      	ldr	r2, [sp, #28]
 8005c2e:	4654      	mov	r4, sl
 8005c30:	2000      	movs	r0, #0
 8005c32:	f04f 0c0a 	mov.w	ip, #10
 8005c36:	4621      	mov	r1, r4
 8005c38:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005c3c:	3b30      	subs	r3, #48	; 0x30
 8005c3e:	2b09      	cmp	r3, #9
 8005c40:	d94e      	bls.n	8005ce0 <_vfiprintf_r+0x1c4>
 8005c42:	b1b0      	cbz	r0, 8005c72 <_vfiprintf_r+0x156>
 8005c44:	9207      	str	r2, [sp, #28]
 8005c46:	e014      	b.n	8005c72 <_vfiprintf_r+0x156>
 8005c48:	eba0 0308 	sub.w	r3, r0, r8
 8005c4c:	fa09 f303 	lsl.w	r3, r9, r3
 8005c50:	4313      	orrs	r3, r2
 8005c52:	9304      	str	r3, [sp, #16]
 8005c54:	46a2      	mov	sl, r4
 8005c56:	e7d2      	b.n	8005bfe <_vfiprintf_r+0xe2>
 8005c58:	9b03      	ldr	r3, [sp, #12]
 8005c5a:	1d19      	adds	r1, r3, #4
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	9103      	str	r1, [sp, #12]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	bfbb      	ittet	lt
 8005c64:	425b      	neglt	r3, r3
 8005c66:	f042 0202 	orrlt.w	r2, r2, #2
 8005c6a:	9307      	strge	r3, [sp, #28]
 8005c6c:	9307      	strlt	r3, [sp, #28]
 8005c6e:	bfb8      	it	lt
 8005c70:	9204      	strlt	r2, [sp, #16]
 8005c72:	7823      	ldrb	r3, [r4, #0]
 8005c74:	2b2e      	cmp	r3, #46	; 0x2e
 8005c76:	d10c      	bne.n	8005c92 <_vfiprintf_r+0x176>
 8005c78:	7863      	ldrb	r3, [r4, #1]
 8005c7a:	2b2a      	cmp	r3, #42	; 0x2a
 8005c7c:	d135      	bne.n	8005cea <_vfiprintf_r+0x1ce>
 8005c7e:	9b03      	ldr	r3, [sp, #12]
 8005c80:	1d1a      	adds	r2, r3, #4
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	9203      	str	r2, [sp, #12]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	bfb8      	it	lt
 8005c8a:	f04f 33ff 	movlt.w	r3, #4294967295
 8005c8e:	3402      	adds	r4, #2
 8005c90:	9305      	str	r3, [sp, #20]
 8005c92:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005d78 <_vfiprintf_r+0x25c>
 8005c96:	7821      	ldrb	r1, [r4, #0]
 8005c98:	2203      	movs	r2, #3
 8005c9a:	4650      	mov	r0, sl
 8005c9c:	f7fa fac0 	bl	8000220 <memchr>
 8005ca0:	b140      	cbz	r0, 8005cb4 <_vfiprintf_r+0x198>
 8005ca2:	2340      	movs	r3, #64	; 0x40
 8005ca4:	eba0 000a 	sub.w	r0, r0, sl
 8005ca8:	fa03 f000 	lsl.w	r0, r3, r0
 8005cac:	9b04      	ldr	r3, [sp, #16]
 8005cae:	4303      	orrs	r3, r0
 8005cb0:	3401      	adds	r4, #1
 8005cb2:	9304      	str	r3, [sp, #16]
 8005cb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005cb8:	482c      	ldr	r0, [pc, #176]	; (8005d6c <_vfiprintf_r+0x250>)
 8005cba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005cbe:	2206      	movs	r2, #6
 8005cc0:	f7fa faae 	bl	8000220 <memchr>
 8005cc4:	2800      	cmp	r0, #0
 8005cc6:	d03f      	beq.n	8005d48 <_vfiprintf_r+0x22c>
 8005cc8:	4b29      	ldr	r3, [pc, #164]	; (8005d70 <_vfiprintf_r+0x254>)
 8005cca:	bb1b      	cbnz	r3, 8005d14 <_vfiprintf_r+0x1f8>
 8005ccc:	9b03      	ldr	r3, [sp, #12]
 8005cce:	3307      	adds	r3, #7
 8005cd0:	f023 0307 	bic.w	r3, r3, #7
 8005cd4:	3308      	adds	r3, #8
 8005cd6:	9303      	str	r3, [sp, #12]
 8005cd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005cda:	443b      	add	r3, r7
 8005cdc:	9309      	str	r3, [sp, #36]	; 0x24
 8005cde:	e767      	b.n	8005bb0 <_vfiprintf_r+0x94>
 8005ce0:	fb0c 3202 	mla	r2, ip, r2, r3
 8005ce4:	460c      	mov	r4, r1
 8005ce6:	2001      	movs	r0, #1
 8005ce8:	e7a5      	b.n	8005c36 <_vfiprintf_r+0x11a>
 8005cea:	2300      	movs	r3, #0
 8005cec:	3401      	adds	r4, #1
 8005cee:	9305      	str	r3, [sp, #20]
 8005cf0:	4619      	mov	r1, r3
 8005cf2:	f04f 0c0a 	mov.w	ip, #10
 8005cf6:	4620      	mov	r0, r4
 8005cf8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005cfc:	3a30      	subs	r2, #48	; 0x30
 8005cfe:	2a09      	cmp	r2, #9
 8005d00:	d903      	bls.n	8005d0a <_vfiprintf_r+0x1ee>
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d0c5      	beq.n	8005c92 <_vfiprintf_r+0x176>
 8005d06:	9105      	str	r1, [sp, #20]
 8005d08:	e7c3      	b.n	8005c92 <_vfiprintf_r+0x176>
 8005d0a:	fb0c 2101 	mla	r1, ip, r1, r2
 8005d0e:	4604      	mov	r4, r0
 8005d10:	2301      	movs	r3, #1
 8005d12:	e7f0      	b.n	8005cf6 <_vfiprintf_r+0x1da>
 8005d14:	ab03      	add	r3, sp, #12
 8005d16:	9300      	str	r3, [sp, #0]
 8005d18:	462a      	mov	r2, r5
 8005d1a:	4b16      	ldr	r3, [pc, #88]	; (8005d74 <_vfiprintf_r+0x258>)
 8005d1c:	a904      	add	r1, sp, #16
 8005d1e:	4630      	mov	r0, r6
 8005d20:	f7fd febc 	bl	8003a9c <_printf_float>
 8005d24:	4607      	mov	r7, r0
 8005d26:	1c78      	adds	r0, r7, #1
 8005d28:	d1d6      	bne.n	8005cd8 <_vfiprintf_r+0x1bc>
 8005d2a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005d2c:	07d9      	lsls	r1, r3, #31
 8005d2e:	d405      	bmi.n	8005d3c <_vfiprintf_r+0x220>
 8005d30:	89ab      	ldrh	r3, [r5, #12]
 8005d32:	059a      	lsls	r2, r3, #22
 8005d34:	d402      	bmi.n	8005d3c <_vfiprintf_r+0x220>
 8005d36:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005d38:	f7ff fe92 	bl	8005a60 <__retarget_lock_release_recursive>
 8005d3c:	89ab      	ldrh	r3, [r5, #12]
 8005d3e:	065b      	lsls	r3, r3, #25
 8005d40:	f53f af12 	bmi.w	8005b68 <_vfiprintf_r+0x4c>
 8005d44:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005d46:	e711      	b.n	8005b6c <_vfiprintf_r+0x50>
 8005d48:	ab03      	add	r3, sp, #12
 8005d4a:	9300      	str	r3, [sp, #0]
 8005d4c:	462a      	mov	r2, r5
 8005d4e:	4b09      	ldr	r3, [pc, #36]	; (8005d74 <_vfiprintf_r+0x258>)
 8005d50:	a904      	add	r1, sp, #16
 8005d52:	4630      	mov	r0, r6
 8005d54:	f7fe f946 	bl	8003fe4 <_printf_i>
 8005d58:	e7e4      	b.n	8005d24 <_vfiprintf_r+0x208>
 8005d5a:	bf00      	nop
 8005d5c:	08007364 	.word	0x08007364
 8005d60:	08007384 	.word	0x08007384
 8005d64:	08007344 	.word	0x08007344
 8005d68:	080071ec 	.word	0x080071ec
 8005d6c:	080071f6 	.word	0x080071f6
 8005d70:	08003a9d 	.word	0x08003a9d
 8005d74:	08005af9 	.word	0x08005af9
 8005d78:	080071f2 	.word	0x080071f2

08005d7c <__swbuf_r>:
 8005d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d7e:	460e      	mov	r6, r1
 8005d80:	4614      	mov	r4, r2
 8005d82:	4605      	mov	r5, r0
 8005d84:	b118      	cbz	r0, 8005d8e <__swbuf_r+0x12>
 8005d86:	6983      	ldr	r3, [r0, #24]
 8005d88:	b90b      	cbnz	r3, 8005d8e <__swbuf_r+0x12>
 8005d8a:	f000 f9e7 	bl	800615c <__sinit>
 8005d8e:	4b21      	ldr	r3, [pc, #132]	; (8005e14 <__swbuf_r+0x98>)
 8005d90:	429c      	cmp	r4, r3
 8005d92:	d12b      	bne.n	8005dec <__swbuf_r+0x70>
 8005d94:	686c      	ldr	r4, [r5, #4]
 8005d96:	69a3      	ldr	r3, [r4, #24]
 8005d98:	60a3      	str	r3, [r4, #8]
 8005d9a:	89a3      	ldrh	r3, [r4, #12]
 8005d9c:	071a      	lsls	r2, r3, #28
 8005d9e:	d52f      	bpl.n	8005e00 <__swbuf_r+0x84>
 8005da0:	6923      	ldr	r3, [r4, #16]
 8005da2:	b36b      	cbz	r3, 8005e00 <__swbuf_r+0x84>
 8005da4:	6923      	ldr	r3, [r4, #16]
 8005da6:	6820      	ldr	r0, [r4, #0]
 8005da8:	1ac0      	subs	r0, r0, r3
 8005daa:	6963      	ldr	r3, [r4, #20]
 8005dac:	b2f6      	uxtb	r6, r6
 8005dae:	4283      	cmp	r3, r0
 8005db0:	4637      	mov	r7, r6
 8005db2:	dc04      	bgt.n	8005dbe <__swbuf_r+0x42>
 8005db4:	4621      	mov	r1, r4
 8005db6:	4628      	mov	r0, r5
 8005db8:	f000 f93c 	bl	8006034 <_fflush_r>
 8005dbc:	bb30      	cbnz	r0, 8005e0c <__swbuf_r+0x90>
 8005dbe:	68a3      	ldr	r3, [r4, #8]
 8005dc0:	3b01      	subs	r3, #1
 8005dc2:	60a3      	str	r3, [r4, #8]
 8005dc4:	6823      	ldr	r3, [r4, #0]
 8005dc6:	1c5a      	adds	r2, r3, #1
 8005dc8:	6022      	str	r2, [r4, #0]
 8005dca:	701e      	strb	r6, [r3, #0]
 8005dcc:	6963      	ldr	r3, [r4, #20]
 8005dce:	3001      	adds	r0, #1
 8005dd0:	4283      	cmp	r3, r0
 8005dd2:	d004      	beq.n	8005dde <__swbuf_r+0x62>
 8005dd4:	89a3      	ldrh	r3, [r4, #12]
 8005dd6:	07db      	lsls	r3, r3, #31
 8005dd8:	d506      	bpl.n	8005de8 <__swbuf_r+0x6c>
 8005dda:	2e0a      	cmp	r6, #10
 8005ddc:	d104      	bne.n	8005de8 <__swbuf_r+0x6c>
 8005dde:	4621      	mov	r1, r4
 8005de0:	4628      	mov	r0, r5
 8005de2:	f000 f927 	bl	8006034 <_fflush_r>
 8005de6:	b988      	cbnz	r0, 8005e0c <__swbuf_r+0x90>
 8005de8:	4638      	mov	r0, r7
 8005dea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005dec:	4b0a      	ldr	r3, [pc, #40]	; (8005e18 <__swbuf_r+0x9c>)
 8005dee:	429c      	cmp	r4, r3
 8005df0:	d101      	bne.n	8005df6 <__swbuf_r+0x7a>
 8005df2:	68ac      	ldr	r4, [r5, #8]
 8005df4:	e7cf      	b.n	8005d96 <__swbuf_r+0x1a>
 8005df6:	4b09      	ldr	r3, [pc, #36]	; (8005e1c <__swbuf_r+0xa0>)
 8005df8:	429c      	cmp	r4, r3
 8005dfa:	bf08      	it	eq
 8005dfc:	68ec      	ldreq	r4, [r5, #12]
 8005dfe:	e7ca      	b.n	8005d96 <__swbuf_r+0x1a>
 8005e00:	4621      	mov	r1, r4
 8005e02:	4628      	mov	r0, r5
 8005e04:	f000 f81a 	bl	8005e3c <__swsetup_r>
 8005e08:	2800      	cmp	r0, #0
 8005e0a:	d0cb      	beq.n	8005da4 <__swbuf_r+0x28>
 8005e0c:	f04f 37ff 	mov.w	r7, #4294967295
 8005e10:	e7ea      	b.n	8005de8 <__swbuf_r+0x6c>
 8005e12:	bf00      	nop
 8005e14:	08007364 	.word	0x08007364
 8005e18:	08007384 	.word	0x08007384
 8005e1c:	08007344 	.word	0x08007344

08005e20 <__ascii_wctomb>:
 8005e20:	b149      	cbz	r1, 8005e36 <__ascii_wctomb+0x16>
 8005e22:	2aff      	cmp	r2, #255	; 0xff
 8005e24:	bf85      	ittet	hi
 8005e26:	238a      	movhi	r3, #138	; 0x8a
 8005e28:	6003      	strhi	r3, [r0, #0]
 8005e2a:	700a      	strbls	r2, [r1, #0]
 8005e2c:	f04f 30ff 	movhi.w	r0, #4294967295
 8005e30:	bf98      	it	ls
 8005e32:	2001      	movls	r0, #1
 8005e34:	4770      	bx	lr
 8005e36:	4608      	mov	r0, r1
 8005e38:	4770      	bx	lr
	...

08005e3c <__swsetup_r>:
 8005e3c:	4b32      	ldr	r3, [pc, #200]	; (8005f08 <__swsetup_r+0xcc>)
 8005e3e:	b570      	push	{r4, r5, r6, lr}
 8005e40:	681d      	ldr	r5, [r3, #0]
 8005e42:	4606      	mov	r6, r0
 8005e44:	460c      	mov	r4, r1
 8005e46:	b125      	cbz	r5, 8005e52 <__swsetup_r+0x16>
 8005e48:	69ab      	ldr	r3, [r5, #24]
 8005e4a:	b913      	cbnz	r3, 8005e52 <__swsetup_r+0x16>
 8005e4c:	4628      	mov	r0, r5
 8005e4e:	f000 f985 	bl	800615c <__sinit>
 8005e52:	4b2e      	ldr	r3, [pc, #184]	; (8005f0c <__swsetup_r+0xd0>)
 8005e54:	429c      	cmp	r4, r3
 8005e56:	d10f      	bne.n	8005e78 <__swsetup_r+0x3c>
 8005e58:	686c      	ldr	r4, [r5, #4]
 8005e5a:	89a3      	ldrh	r3, [r4, #12]
 8005e5c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005e60:	0719      	lsls	r1, r3, #28
 8005e62:	d42c      	bmi.n	8005ebe <__swsetup_r+0x82>
 8005e64:	06dd      	lsls	r5, r3, #27
 8005e66:	d411      	bmi.n	8005e8c <__swsetup_r+0x50>
 8005e68:	2309      	movs	r3, #9
 8005e6a:	6033      	str	r3, [r6, #0]
 8005e6c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005e70:	81a3      	strh	r3, [r4, #12]
 8005e72:	f04f 30ff 	mov.w	r0, #4294967295
 8005e76:	e03e      	b.n	8005ef6 <__swsetup_r+0xba>
 8005e78:	4b25      	ldr	r3, [pc, #148]	; (8005f10 <__swsetup_r+0xd4>)
 8005e7a:	429c      	cmp	r4, r3
 8005e7c:	d101      	bne.n	8005e82 <__swsetup_r+0x46>
 8005e7e:	68ac      	ldr	r4, [r5, #8]
 8005e80:	e7eb      	b.n	8005e5a <__swsetup_r+0x1e>
 8005e82:	4b24      	ldr	r3, [pc, #144]	; (8005f14 <__swsetup_r+0xd8>)
 8005e84:	429c      	cmp	r4, r3
 8005e86:	bf08      	it	eq
 8005e88:	68ec      	ldreq	r4, [r5, #12]
 8005e8a:	e7e6      	b.n	8005e5a <__swsetup_r+0x1e>
 8005e8c:	0758      	lsls	r0, r3, #29
 8005e8e:	d512      	bpl.n	8005eb6 <__swsetup_r+0x7a>
 8005e90:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005e92:	b141      	cbz	r1, 8005ea6 <__swsetup_r+0x6a>
 8005e94:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005e98:	4299      	cmp	r1, r3
 8005e9a:	d002      	beq.n	8005ea2 <__swsetup_r+0x66>
 8005e9c:	4630      	mov	r0, r6
 8005e9e:	f7fd fc7d 	bl	800379c <_free_r>
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	6363      	str	r3, [r4, #52]	; 0x34
 8005ea6:	89a3      	ldrh	r3, [r4, #12]
 8005ea8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005eac:	81a3      	strh	r3, [r4, #12]
 8005eae:	2300      	movs	r3, #0
 8005eb0:	6063      	str	r3, [r4, #4]
 8005eb2:	6923      	ldr	r3, [r4, #16]
 8005eb4:	6023      	str	r3, [r4, #0]
 8005eb6:	89a3      	ldrh	r3, [r4, #12]
 8005eb8:	f043 0308 	orr.w	r3, r3, #8
 8005ebc:	81a3      	strh	r3, [r4, #12]
 8005ebe:	6923      	ldr	r3, [r4, #16]
 8005ec0:	b94b      	cbnz	r3, 8005ed6 <__swsetup_r+0x9a>
 8005ec2:	89a3      	ldrh	r3, [r4, #12]
 8005ec4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005ec8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ecc:	d003      	beq.n	8005ed6 <__swsetup_r+0x9a>
 8005ece:	4621      	mov	r1, r4
 8005ed0:	4630      	mov	r0, r6
 8005ed2:	f000 fa05 	bl	80062e0 <__smakebuf_r>
 8005ed6:	89a0      	ldrh	r0, [r4, #12]
 8005ed8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005edc:	f010 0301 	ands.w	r3, r0, #1
 8005ee0:	d00a      	beq.n	8005ef8 <__swsetup_r+0xbc>
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	60a3      	str	r3, [r4, #8]
 8005ee6:	6963      	ldr	r3, [r4, #20]
 8005ee8:	425b      	negs	r3, r3
 8005eea:	61a3      	str	r3, [r4, #24]
 8005eec:	6923      	ldr	r3, [r4, #16]
 8005eee:	b943      	cbnz	r3, 8005f02 <__swsetup_r+0xc6>
 8005ef0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005ef4:	d1ba      	bne.n	8005e6c <__swsetup_r+0x30>
 8005ef6:	bd70      	pop	{r4, r5, r6, pc}
 8005ef8:	0781      	lsls	r1, r0, #30
 8005efa:	bf58      	it	pl
 8005efc:	6963      	ldrpl	r3, [r4, #20]
 8005efe:	60a3      	str	r3, [r4, #8]
 8005f00:	e7f4      	b.n	8005eec <__swsetup_r+0xb0>
 8005f02:	2000      	movs	r0, #0
 8005f04:	e7f7      	b.n	8005ef6 <__swsetup_r+0xba>
 8005f06:	bf00      	nop
 8005f08:	20000018 	.word	0x20000018
 8005f0c:	08007364 	.word	0x08007364
 8005f10:	08007384 	.word	0x08007384
 8005f14:	08007344 	.word	0x08007344

08005f18 <abort>:
 8005f18:	b508      	push	{r3, lr}
 8005f1a:	2006      	movs	r0, #6
 8005f1c:	f000 fa48 	bl	80063b0 <raise>
 8005f20:	2001      	movs	r0, #1
 8005f22:	f000 fb4d 	bl	80065c0 <_exit>
	...

08005f28 <__sflush_r>:
 8005f28:	898a      	ldrh	r2, [r1, #12]
 8005f2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f2e:	4605      	mov	r5, r0
 8005f30:	0710      	lsls	r0, r2, #28
 8005f32:	460c      	mov	r4, r1
 8005f34:	d458      	bmi.n	8005fe8 <__sflush_r+0xc0>
 8005f36:	684b      	ldr	r3, [r1, #4]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	dc05      	bgt.n	8005f48 <__sflush_r+0x20>
 8005f3c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	dc02      	bgt.n	8005f48 <__sflush_r+0x20>
 8005f42:	2000      	movs	r0, #0
 8005f44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f48:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005f4a:	2e00      	cmp	r6, #0
 8005f4c:	d0f9      	beq.n	8005f42 <__sflush_r+0x1a>
 8005f4e:	2300      	movs	r3, #0
 8005f50:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005f54:	682f      	ldr	r7, [r5, #0]
 8005f56:	602b      	str	r3, [r5, #0]
 8005f58:	d032      	beq.n	8005fc0 <__sflush_r+0x98>
 8005f5a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005f5c:	89a3      	ldrh	r3, [r4, #12]
 8005f5e:	075a      	lsls	r2, r3, #29
 8005f60:	d505      	bpl.n	8005f6e <__sflush_r+0x46>
 8005f62:	6863      	ldr	r3, [r4, #4]
 8005f64:	1ac0      	subs	r0, r0, r3
 8005f66:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005f68:	b10b      	cbz	r3, 8005f6e <__sflush_r+0x46>
 8005f6a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005f6c:	1ac0      	subs	r0, r0, r3
 8005f6e:	2300      	movs	r3, #0
 8005f70:	4602      	mov	r2, r0
 8005f72:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005f74:	6a21      	ldr	r1, [r4, #32]
 8005f76:	4628      	mov	r0, r5
 8005f78:	47b0      	blx	r6
 8005f7a:	1c43      	adds	r3, r0, #1
 8005f7c:	89a3      	ldrh	r3, [r4, #12]
 8005f7e:	d106      	bne.n	8005f8e <__sflush_r+0x66>
 8005f80:	6829      	ldr	r1, [r5, #0]
 8005f82:	291d      	cmp	r1, #29
 8005f84:	d82c      	bhi.n	8005fe0 <__sflush_r+0xb8>
 8005f86:	4a2a      	ldr	r2, [pc, #168]	; (8006030 <__sflush_r+0x108>)
 8005f88:	40ca      	lsrs	r2, r1
 8005f8a:	07d6      	lsls	r6, r2, #31
 8005f8c:	d528      	bpl.n	8005fe0 <__sflush_r+0xb8>
 8005f8e:	2200      	movs	r2, #0
 8005f90:	6062      	str	r2, [r4, #4]
 8005f92:	04d9      	lsls	r1, r3, #19
 8005f94:	6922      	ldr	r2, [r4, #16]
 8005f96:	6022      	str	r2, [r4, #0]
 8005f98:	d504      	bpl.n	8005fa4 <__sflush_r+0x7c>
 8005f9a:	1c42      	adds	r2, r0, #1
 8005f9c:	d101      	bne.n	8005fa2 <__sflush_r+0x7a>
 8005f9e:	682b      	ldr	r3, [r5, #0]
 8005fa0:	b903      	cbnz	r3, 8005fa4 <__sflush_r+0x7c>
 8005fa2:	6560      	str	r0, [r4, #84]	; 0x54
 8005fa4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005fa6:	602f      	str	r7, [r5, #0]
 8005fa8:	2900      	cmp	r1, #0
 8005faa:	d0ca      	beq.n	8005f42 <__sflush_r+0x1a>
 8005fac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005fb0:	4299      	cmp	r1, r3
 8005fb2:	d002      	beq.n	8005fba <__sflush_r+0x92>
 8005fb4:	4628      	mov	r0, r5
 8005fb6:	f7fd fbf1 	bl	800379c <_free_r>
 8005fba:	2000      	movs	r0, #0
 8005fbc:	6360      	str	r0, [r4, #52]	; 0x34
 8005fbe:	e7c1      	b.n	8005f44 <__sflush_r+0x1c>
 8005fc0:	6a21      	ldr	r1, [r4, #32]
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	4628      	mov	r0, r5
 8005fc6:	47b0      	blx	r6
 8005fc8:	1c41      	adds	r1, r0, #1
 8005fca:	d1c7      	bne.n	8005f5c <__sflush_r+0x34>
 8005fcc:	682b      	ldr	r3, [r5, #0]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d0c4      	beq.n	8005f5c <__sflush_r+0x34>
 8005fd2:	2b1d      	cmp	r3, #29
 8005fd4:	d001      	beq.n	8005fda <__sflush_r+0xb2>
 8005fd6:	2b16      	cmp	r3, #22
 8005fd8:	d101      	bne.n	8005fde <__sflush_r+0xb6>
 8005fda:	602f      	str	r7, [r5, #0]
 8005fdc:	e7b1      	b.n	8005f42 <__sflush_r+0x1a>
 8005fde:	89a3      	ldrh	r3, [r4, #12]
 8005fe0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005fe4:	81a3      	strh	r3, [r4, #12]
 8005fe6:	e7ad      	b.n	8005f44 <__sflush_r+0x1c>
 8005fe8:	690f      	ldr	r7, [r1, #16]
 8005fea:	2f00      	cmp	r7, #0
 8005fec:	d0a9      	beq.n	8005f42 <__sflush_r+0x1a>
 8005fee:	0793      	lsls	r3, r2, #30
 8005ff0:	680e      	ldr	r6, [r1, #0]
 8005ff2:	bf08      	it	eq
 8005ff4:	694b      	ldreq	r3, [r1, #20]
 8005ff6:	600f      	str	r7, [r1, #0]
 8005ff8:	bf18      	it	ne
 8005ffa:	2300      	movne	r3, #0
 8005ffc:	eba6 0807 	sub.w	r8, r6, r7
 8006000:	608b      	str	r3, [r1, #8]
 8006002:	f1b8 0f00 	cmp.w	r8, #0
 8006006:	dd9c      	ble.n	8005f42 <__sflush_r+0x1a>
 8006008:	6a21      	ldr	r1, [r4, #32]
 800600a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800600c:	4643      	mov	r3, r8
 800600e:	463a      	mov	r2, r7
 8006010:	4628      	mov	r0, r5
 8006012:	47b0      	blx	r6
 8006014:	2800      	cmp	r0, #0
 8006016:	dc06      	bgt.n	8006026 <__sflush_r+0xfe>
 8006018:	89a3      	ldrh	r3, [r4, #12]
 800601a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800601e:	81a3      	strh	r3, [r4, #12]
 8006020:	f04f 30ff 	mov.w	r0, #4294967295
 8006024:	e78e      	b.n	8005f44 <__sflush_r+0x1c>
 8006026:	4407      	add	r7, r0
 8006028:	eba8 0800 	sub.w	r8, r8, r0
 800602c:	e7e9      	b.n	8006002 <__sflush_r+0xda>
 800602e:	bf00      	nop
 8006030:	20400001 	.word	0x20400001

08006034 <_fflush_r>:
 8006034:	b538      	push	{r3, r4, r5, lr}
 8006036:	690b      	ldr	r3, [r1, #16]
 8006038:	4605      	mov	r5, r0
 800603a:	460c      	mov	r4, r1
 800603c:	b913      	cbnz	r3, 8006044 <_fflush_r+0x10>
 800603e:	2500      	movs	r5, #0
 8006040:	4628      	mov	r0, r5
 8006042:	bd38      	pop	{r3, r4, r5, pc}
 8006044:	b118      	cbz	r0, 800604e <_fflush_r+0x1a>
 8006046:	6983      	ldr	r3, [r0, #24]
 8006048:	b90b      	cbnz	r3, 800604e <_fflush_r+0x1a>
 800604a:	f000 f887 	bl	800615c <__sinit>
 800604e:	4b14      	ldr	r3, [pc, #80]	; (80060a0 <_fflush_r+0x6c>)
 8006050:	429c      	cmp	r4, r3
 8006052:	d11b      	bne.n	800608c <_fflush_r+0x58>
 8006054:	686c      	ldr	r4, [r5, #4]
 8006056:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d0ef      	beq.n	800603e <_fflush_r+0xa>
 800605e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006060:	07d0      	lsls	r0, r2, #31
 8006062:	d404      	bmi.n	800606e <_fflush_r+0x3a>
 8006064:	0599      	lsls	r1, r3, #22
 8006066:	d402      	bmi.n	800606e <_fflush_r+0x3a>
 8006068:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800606a:	f7ff fcf8 	bl	8005a5e <__retarget_lock_acquire_recursive>
 800606e:	4628      	mov	r0, r5
 8006070:	4621      	mov	r1, r4
 8006072:	f7ff ff59 	bl	8005f28 <__sflush_r>
 8006076:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006078:	07da      	lsls	r2, r3, #31
 800607a:	4605      	mov	r5, r0
 800607c:	d4e0      	bmi.n	8006040 <_fflush_r+0xc>
 800607e:	89a3      	ldrh	r3, [r4, #12]
 8006080:	059b      	lsls	r3, r3, #22
 8006082:	d4dd      	bmi.n	8006040 <_fflush_r+0xc>
 8006084:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006086:	f7ff fceb 	bl	8005a60 <__retarget_lock_release_recursive>
 800608a:	e7d9      	b.n	8006040 <_fflush_r+0xc>
 800608c:	4b05      	ldr	r3, [pc, #20]	; (80060a4 <_fflush_r+0x70>)
 800608e:	429c      	cmp	r4, r3
 8006090:	d101      	bne.n	8006096 <_fflush_r+0x62>
 8006092:	68ac      	ldr	r4, [r5, #8]
 8006094:	e7df      	b.n	8006056 <_fflush_r+0x22>
 8006096:	4b04      	ldr	r3, [pc, #16]	; (80060a8 <_fflush_r+0x74>)
 8006098:	429c      	cmp	r4, r3
 800609a:	bf08      	it	eq
 800609c:	68ec      	ldreq	r4, [r5, #12]
 800609e:	e7da      	b.n	8006056 <_fflush_r+0x22>
 80060a0:	08007364 	.word	0x08007364
 80060a4:	08007384 	.word	0x08007384
 80060a8:	08007344 	.word	0x08007344

080060ac <std>:
 80060ac:	2300      	movs	r3, #0
 80060ae:	b510      	push	{r4, lr}
 80060b0:	4604      	mov	r4, r0
 80060b2:	e9c0 3300 	strd	r3, r3, [r0]
 80060b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80060ba:	6083      	str	r3, [r0, #8]
 80060bc:	8181      	strh	r1, [r0, #12]
 80060be:	6643      	str	r3, [r0, #100]	; 0x64
 80060c0:	81c2      	strh	r2, [r0, #14]
 80060c2:	6183      	str	r3, [r0, #24]
 80060c4:	4619      	mov	r1, r3
 80060c6:	2208      	movs	r2, #8
 80060c8:	305c      	adds	r0, #92	; 0x5c
 80060ca:	f7fd fb5f 	bl	800378c <memset>
 80060ce:	4b05      	ldr	r3, [pc, #20]	; (80060e4 <std+0x38>)
 80060d0:	6263      	str	r3, [r4, #36]	; 0x24
 80060d2:	4b05      	ldr	r3, [pc, #20]	; (80060e8 <std+0x3c>)
 80060d4:	62a3      	str	r3, [r4, #40]	; 0x28
 80060d6:	4b05      	ldr	r3, [pc, #20]	; (80060ec <std+0x40>)
 80060d8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80060da:	4b05      	ldr	r3, [pc, #20]	; (80060f0 <std+0x44>)
 80060dc:	6224      	str	r4, [r4, #32]
 80060de:	6323      	str	r3, [r4, #48]	; 0x30
 80060e0:	bd10      	pop	{r4, pc}
 80060e2:	bf00      	nop
 80060e4:	080063e9 	.word	0x080063e9
 80060e8:	0800640b 	.word	0x0800640b
 80060ec:	08006443 	.word	0x08006443
 80060f0:	08006467 	.word	0x08006467

080060f4 <_cleanup_r>:
 80060f4:	4901      	ldr	r1, [pc, #4]	; (80060fc <_cleanup_r+0x8>)
 80060f6:	f000 b8af 	b.w	8006258 <_fwalk_reent>
 80060fa:	bf00      	nop
 80060fc:	08006035 	.word	0x08006035

08006100 <__sfmoreglue>:
 8006100:	b570      	push	{r4, r5, r6, lr}
 8006102:	2268      	movs	r2, #104	; 0x68
 8006104:	1e4d      	subs	r5, r1, #1
 8006106:	4355      	muls	r5, r2
 8006108:	460e      	mov	r6, r1
 800610a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800610e:	f7fd fbb1 	bl	8003874 <_malloc_r>
 8006112:	4604      	mov	r4, r0
 8006114:	b140      	cbz	r0, 8006128 <__sfmoreglue+0x28>
 8006116:	2100      	movs	r1, #0
 8006118:	e9c0 1600 	strd	r1, r6, [r0]
 800611c:	300c      	adds	r0, #12
 800611e:	60a0      	str	r0, [r4, #8]
 8006120:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006124:	f7fd fb32 	bl	800378c <memset>
 8006128:	4620      	mov	r0, r4
 800612a:	bd70      	pop	{r4, r5, r6, pc}

0800612c <__sfp_lock_acquire>:
 800612c:	4801      	ldr	r0, [pc, #4]	; (8006134 <__sfp_lock_acquire+0x8>)
 800612e:	f7ff bc96 	b.w	8005a5e <__retarget_lock_acquire_recursive>
 8006132:	bf00      	nop
 8006134:	20000311 	.word	0x20000311

08006138 <__sfp_lock_release>:
 8006138:	4801      	ldr	r0, [pc, #4]	; (8006140 <__sfp_lock_release+0x8>)
 800613a:	f7ff bc91 	b.w	8005a60 <__retarget_lock_release_recursive>
 800613e:	bf00      	nop
 8006140:	20000311 	.word	0x20000311

08006144 <__sinit_lock_acquire>:
 8006144:	4801      	ldr	r0, [pc, #4]	; (800614c <__sinit_lock_acquire+0x8>)
 8006146:	f7ff bc8a 	b.w	8005a5e <__retarget_lock_acquire_recursive>
 800614a:	bf00      	nop
 800614c:	20000312 	.word	0x20000312

08006150 <__sinit_lock_release>:
 8006150:	4801      	ldr	r0, [pc, #4]	; (8006158 <__sinit_lock_release+0x8>)
 8006152:	f7ff bc85 	b.w	8005a60 <__retarget_lock_release_recursive>
 8006156:	bf00      	nop
 8006158:	20000312 	.word	0x20000312

0800615c <__sinit>:
 800615c:	b510      	push	{r4, lr}
 800615e:	4604      	mov	r4, r0
 8006160:	f7ff fff0 	bl	8006144 <__sinit_lock_acquire>
 8006164:	69a3      	ldr	r3, [r4, #24]
 8006166:	b11b      	cbz	r3, 8006170 <__sinit+0x14>
 8006168:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800616c:	f7ff bff0 	b.w	8006150 <__sinit_lock_release>
 8006170:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006174:	6523      	str	r3, [r4, #80]	; 0x50
 8006176:	4b13      	ldr	r3, [pc, #76]	; (80061c4 <__sinit+0x68>)
 8006178:	4a13      	ldr	r2, [pc, #76]	; (80061c8 <__sinit+0x6c>)
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	62a2      	str	r2, [r4, #40]	; 0x28
 800617e:	42a3      	cmp	r3, r4
 8006180:	bf04      	itt	eq
 8006182:	2301      	moveq	r3, #1
 8006184:	61a3      	streq	r3, [r4, #24]
 8006186:	4620      	mov	r0, r4
 8006188:	f000 f820 	bl	80061cc <__sfp>
 800618c:	6060      	str	r0, [r4, #4]
 800618e:	4620      	mov	r0, r4
 8006190:	f000 f81c 	bl	80061cc <__sfp>
 8006194:	60a0      	str	r0, [r4, #8]
 8006196:	4620      	mov	r0, r4
 8006198:	f000 f818 	bl	80061cc <__sfp>
 800619c:	2200      	movs	r2, #0
 800619e:	60e0      	str	r0, [r4, #12]
 80061a0:	2104      	movs	r1, #4
 80061a2:	6860      	ldr	r0, [r4, #4]
 80061a4:	f7ff ff82 	bl	80060ac <std>
 80061a8:	68a0      	ldr	r0, [r4, #8]
 80061aa:	2201      	movs	r2, #1
 80061ac:	2109      	movs	r1, #9
 80061ae:	f7ff ff7d 	bl	80060ac <std>
 80061b2:	68e0      	ldr	r0, [r4, #12]
 80061b4:	2202      	movs	r2, #2
 80061b6:	2112      	movs	r1, #18
 80061b8:	f7ff ff78 	bl	80060ac <std>
 80061bc:	2301      	movs	r3, #1
 80061be:	61a3      	str	r3, [r4, #24]
 80061c0:	e7d2      	b.n	8006168 <__sinit+0xc>
 80061c2:	bf00      	nop
 80061c4:	08006fc8 	.word	0x08006fc8
 80061c8:	080060f5 	.word	0x080060f5

080061cc <__sfp>:
 80061cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061ce:	4607      	mov	r7, r0
 80061d0:	f7ff ffac 	bl	800612c <__sfp_lock_acquire>
 80061d4:	4b1e      	ldr	r3, [pc, #120]	; (8006250 <__sfp+0x84>)
 80061d6:	681e      	ldr	r6, [r3, #0]
 80061d8:	69b3      	ldr	r3, [r6, #24]
 80061da:	b913      	cbnz	r3, 80061e2 <__sfp+0x16>
 80061dc:	4630      	mov	r0, r6
 80061de:	f7ff ffbd 	bl	800615c <__sinit>
 80061e2:	3648      	adds	r6, #72	; 0x48
 80061e4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80061e8:	3b01      	subs	r3, #1
 80061ea:	d503      	bpl.n	80061f4 <__sfp+0x28>
 80061ec:	6833      	ldr	r3, [r6, #0]
 80061ee:	b30b      	cbz	r3, 8006234 <__sfp+0x68>
 80061f0:	6836      	ldr	r6, [r6, #0]
 80061f2:	e7f7      	b.n	80061e4 <__sfp+0x18>
 80061f4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80061f8:	b9d5      	cbnz	r5, 8006230 <__sfp+0x64>
 80061fa:	4b16      	ldr	r3, [pc, #88]	; (8006254 <__sfp+0x88>)
 80061fc:	60e3      	str	r3, [r4, #12]
 80061fe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006202:	6665      	str	r5, [r4, #100]	; 0x64
 8006204:	f7ff fc2a 	bl	8005a5c <__retarget_lock_init_recursive>
 8006208:	f7ff ff96 	bl	8006138 <__sfp_lock_release>
 800620c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006210:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006214:	6025      	str	r5, [r4, #0]
 8006216:	61a5      	str	r5, [r4, #24]
 8006218:	2208      	movs	r2, #8
 800621a:	4629      	mov	r1, r5
 800621c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006220:	f7fd fab4 	bl	800378c <memset>
 8006224:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006228:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800622c:	4620      	mov	r0, r4
 800622e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006230:	3468      	adds	r4, #104	; 0x68
 8006232:	e7d9      	b.n	80061e8 <__sfp+0x1c>
 8006234:	2104      	movs	r1, #4
 8006236:	4638      	mov	r0, r7
 8006238:	f7ff ff62 	bl	8006100 <__sfmoreglue>
 800623c:	4604      	mov	r4, r0
 800623e:	6030      	str	r0, [r6, #0]
 8006240:	2800      	cmp	r0, #0
 8006242:	d1d5      	bne.n	80061f0 <__sfp+0x24>
 8006244:	f7ff ff78 	bl	8006138 <__sfp_lock_release>
 8006248:	230c      	movs	r3, #12
 800624a:	603b      	str	r3, [r7, #0]
 800624c:	e7ee      	b.n	800622c <__sfp+0x60>
 800624e:	bf00      	nop
 8006250:	08006fc8 	.word	0x08006fc8
 8006254:	ffff0001 	.word	0xffff0001

08006258 <_fwalk_reent>:
 8006258:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800625c:	4606      	mov	r6, r0
 800625e:	4688      	mov	r8, r1
 8006260:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006264:	2700      	movs	r7, #0
 8006266:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800626a:	f1b9 0901 	subs.w	r9, r9, #1
 800626e:	d505      	bpl.n	800627c <_fwalk_reent+0x24>
 8006270:	6824      	ldr	r4, [r4, #0]
 8006272:	2c00      	cmp	r4, #0
 8006274:	d1f7      	bne.n	8006266 <_fwalk_reent+0xe>
 8006276:	4638      	mov	r0, r7
 8006278:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800627c:	89ab      	ldrh	r3, [r5, #12]
 800627e:	2b01      	cmp	r3, #1
 8006280:	d907      	bls.n	8006292 <_fwalk_reent+0x3a>
 8006282:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006286:	3301      	adds	r3, #1
 8006288:	d003      	beq.n	8006292 <_fwalk_reent+0x3a>
 800628a:	4629      	mov	r1, r5
 800628c:	4630      	mov	r0, r6
 800628e:	47c0      	blx	r8
 8006290:	4307      	orrs	r7, r0
 8006292:	3568      	adds	r5, #104	; 0x68
 8006294:	e7e9      	b.n	800626a <_fwalk_reent+0x12>

08006296 <__swhatbuf_r>:
 8006296:	b570      	push	{r4, r5, r6, lr}
 8006298:	460e      	mov	r6, r1
 800629a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800629e:	2900      	cmp	r1, #0
 80062a0:	b096      	sub	sp, #88	; 0x58
 80062a2:	4614      	mov	r4, r2
 80062a4:	461d      	mov	r5, r3
 80062a6:	da08      	bge.n	80062ba <__swhatbuf_r+0x24>
 80062a8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80062ac:	2200      	movs	r2, #0
 80062ae:	602a      	str	r2, [r5, #0]
 80062b0:	061a      	lsls	r2, r3, #24
 80062b2:	d410      	bmi.n	80062d6 <__swhatbuf_r+0x40>
 80062b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80062b8:	e00e      	b.n	80062d8 <__swhatbuf_r+0x42>
 80062ba:	466a      	mov	r2, sp
 80062bc:	f000 f8fa 	bl	80064b4 <_fstat_r>
 80062c0:	2800      	cmp	r0, #0
 80062c2:	dbf1      	blt.n	80062a8 <__swhatbuf_r+0x12>
 80062c4:	9a01      	ldr	r2, [sp, #4]
 80062c6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80062ca:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80062ce:	425a      	negs	r2, r3
 80062d0:	415a      	adcs	r2, r3
 80062d2:	602a      	str	r2, [r5, #0]
 80062d4:	e7ee      	b.n	80062b4 <__swhatbuf_r+0x1e>
 80062d6:	2340      	movs	r3, #64	; 0x40
 80062d8:	2000      	movs	r0, #0
 80062da:	6023      	str	r3, [r4, #0]
 80062dc:	b016      	add	sp, #88	; 0x58
 80062de:	bd70      	pop	{r4, r5, r6, pc}

080062e0 <__smakebuf_r>:
 80062e0:	898b      	ldrh	r3, [r1, #12]
 80062e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80062e4:	079d      	lsls	r5, r3, #30
 80062e6:	4606      	mov	r6, r0
 80062e8:	460c      	mov	r4, r1
 80062ea:	d507      	bpl.n	80062fc <__smakebuf_r+0x1c>
 80062ec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80062f0:	6023      	str	r3, [r4, #0]
 80062f2:	6123      	str	r3, [r4, #16]
 80062f4:	2301      	movs	r3, #1
 80062f6:	6163      	str	r3, [r4, #20]
 80062f8:	b002      	add	sp, #8
 80062fa:	bd70      	pop	{r4, r5, r6, pc}
 80062fc:	ab01      	add	r3, sp, #4
 80062fe:	466a      	mov	r2, sp
 8006300:	f7ff ffc9 	bl	8006296 <__swhatbuf_r>
 8006304:	9900      	ldr	r1, [sp, #0]
 8006306:	4605      	mov	r5, r0
 8006308:	4630      	mov	r0, r6
 800630a:	f7fd fab3 	bl	8003874 <_malloc_r>
 800630e:	b948      	cbnz	r0, 8006324 <__smakebuf_r+0x44>
 8006310:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006314:	059a      	lsls	r2, r3, #22
 8006316:	d4ef      	bmi.n	80062f8 <__smakebuf_r+0x18>
 8006318:	f023 0303 	bic.w	r3, r3, #3
 800631c:	f043 0302 	orr.w	r3, r3, #2
 8006320:	81a3      	strh	r3, [r4, #12]
 8006322:	e7e3      	b.n	80062ec <__smakebuf_r+0xc>
 8006324:	4b0d      	ldr	r3, [pc, #52]	; (800635c <__smakebuf_r+0x7c>)
 8006326:	62b3      	str	r3, [r6, #40]	; 0x28
 8006328:	89a3      	ldrh	r3, [r4, #12]
 800632a:	6020      	str	r0, [r4, #0]
 800632c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006330:	81a3      	strh	r3, [r4, #12]
 8006332:	9b00      	ldr	r3, [sp, #0]
 8006334:	6163      	str	r3, [r4, #20]
 8006336:	9b01      	ldr	r3, [sp, #4]
 8006338:	6120      	str	r0, [r4, #16]
 800633a:	b15b      	cbz	r3, 8006354 <__smakebuf_r+0x74>
 800633c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006340:	4630      	mov	r0, r6
 8006342:	f000 f8c9 	bl	80064d8 <_isatty_r>
 8006346:	b128      	cbz	r0, 8006354 <__smakebuf_r+0x74>
 8006348:	89a3      	ldrh	r3, [r4, #12]
 800634a:	f023 0303 	bic.w	r3, r3, #3
 800634e:	f043 0301 	orr.w	r3, r3, #1
 8006352:	81a3      	strh	r3, [r4, #12]
 8006354:	89a0      	ldrh	r0, [r4, #12]
 8006356:	4305      	orrs	r5, r0
 8006358:	81a5      	strh	r5, [r4, #12]
 800635a:	e7cd      	b.n	80062f8 <__smakebuf_r+0x18>
 800635c:	080060f5 	.word	0x080060f5

08006360 <_raise_r>:
 8006360:	291f      	cmp	r1, #31
 8006362:	b538      	push	{r3, r4, r5, lr}
 8006364:	4604      	mov	r4, r0
 8006366:	460d      	mov	r5, r1
 8006368:	d904      	bls.n	8006374 <_raise_r+0x14>
 800636a:	2316      	movs	r3, #22
 800636c:	6003      	str	r3, [r0, #0]
 800636e:	f04f 30ff 	mov.w	r0, #4294967295
 8006372:	bd38      	pop	{r3, r4, r5, pc}
 8006374:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006376:	b112      	cbz	r2, 800637e <_raise_r+0x1e>
 8006378:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800637c:	b94b      	cbnz	r3, 8006392 <_raise_r+0x32>
 800637e:	4620      	mov	r0, r4
 8006380:	f000 f830 	bl	80063e4 <_getpid_r>
 8006384:	462a      	mov	r2, r5
 8006386:	4601      	mov	r1, r0
 8006388:	4620      	mov	r0, r4
 800638a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800638e:	f000 b817 	b.w	80063c0 <_kill_r>
 8006392:	2b01      	cmp	r3, #1
 8006394:	d00a      	beq.n	80063ac <_raise_r+0x4c>
 8006396:	1c59      	adds	r1, r3, #1
 8006398:	d103      	bne.n	80063a2 <_raise_r+0x42>
 800639a:	2316      	movs	r3, #22
 800639c:	6003      	str	r3, [r0, #0]
 800639e:	2001      	movs	r0, #1
 80063a0:	e7e7      	b.n	8006372 <_raise_r+0x12>
 80063a2:	2400      	movs	r4, #0
 80063a4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80063a8:	4628      	mov	r0, r5
 80063aa:	4798      	blx	r3
 80063ac:	2000      	movs	r0, #0
 80063ae:	e7e0      	b.n	8006372 <_raise_r+0x12>

080063b0 <raise>:
 80063b0:	4b02      	ldr	r3, [pc, #8]	; (80063bc <raise+0xc>)
 80063b2:	4601      	mov	r1, r0
 80063b4:	6818      	ldr	r0, [r3, #0]
 80063b6:	f7ff bfd3 	b.w	8006360 <_raise_r>
 80063ba:	bf00      	nop
 80063bc:	20000018 	.word	0x20000018

080063c0 <_kill_r>:
 80063c0:	b538      	push	{r3, r4, r5, lr}
 80063c2:	4d07      	ldr	r5, [pc, #28]	; (80063e0 <_kill_r+0x20>)
 80063c4:	2300      	movs	r3, #0
 80063c6:	4604      	mov	r4, r0
 80063c8:	4608      	mov	r0, r1
 80063ca:	4611      	mov	r1, r2
 80063cc:	602b      	str	r3, [r5, #0]
 80063ce:	f000 f8d7 	bl	8006580 <_kill>
 80063d2:	1c43      	adds	r3, r0, #1
 80063d4:	d102      	bne.n	80063dc <_kill_r+0x1c>
 80063d6:	682b      	ldr	r3, [r5, #0]
 80063d8:	b103      	cbz	r3, 80063dc <_kill_r+0x1c>
 80063da:	6023      	str	r3, [r4, #0]
 80063dc:	bd38      	pop	{r3, r4, r5, pc}
 80063de:	bf00      	nop
 80063e0:	2000030c 	.word	0x2000030c

080063e4 <_getpid_r>:
 80063e4:	f000 b8bc 	b.w	8006560 <_getpid>

080063e8 <__sread>:
 80063e8:	b510      	push	{r4, lr}
 80063ea:	460c      	mov	r4, r1
 80063ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063f0:	f000 f894 	bl	800651c <_read_r>
 80063f4:	2800      	cmp	r0, #0
 80063f6:	bfab      	itete	ge
 80063f8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80063fa:	89a3      	ldrhlt	r3, [r4, #12]
 80063fc:	181b      	addge	r3, r3, r0
 80063fe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006402:	bfac      	ite	ge
 8006404:	6563      	strge	r3, [r4, #84]	; 0x54
 8006406:	81a3      	strhlt	r3, [r4, #12]
 8006408:	bd10      	pop	{r4, pc}

0800640a <__swrite>:
 800640a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800640e:	461f      	mov	r7, r3
 8006410:	898b      	ldrh	r3, [r1, #12]
 8006412:	05db      	lsls	r3, r3, #23
 8006414:	4605      	mov	r5, r0
 8006416:	460c      	mov	r4, r1
 8006418:	4616      	mov	r6, r2
 800641a:	d505      	bpl.n	8006428 <__swrite+0x1e>
 800641c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006420:	2302      	movs	r3, #2
 8006422:	2200      	movs	r2, #0
 8006424:	f000 f868 	bl	80064f8 <_lseek_r>
 8006428:	89a3      	ldrh	r3, [r4, #12]
 800642a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800642e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006432:	81a3      	strh	r3, [r4, #12]
 8006434:	4632      	mov	r2, r6
 8006436:	463b      	mov	r3, r7
 8006438:	4628      	mov	r0, r5
 800643a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800643e:	f000 b817 	b.w	8006470 <_write_r>

08006442 <__sseek>:
 8006442:	b510      	push	{r4, lr}
 8006444:	460c      	mov	r4, r1
 8006446:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800644a:	f000 f855 	bl	80064f8 <_lseek_r>
 800644e:	1c43      	adds	r3, r0, #1
 8006450:	89a3      	ldrh	r3, [r4, #12]
 8006452:	bf15      	itete	ne
 8006454:	6560      	strne	r0, [r4, #84]	; 0x54
 8006456:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800645a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800645e:	81a3      	strheq	r3, [r4, #12]
 8006460:	bf18      	it	ne
 8006462:	81a3      	strhne	r3, [r4, #12]
 8006464:	bd10      	pop	{r4, pc}

08006466 <__sclose>:
 8006466:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800646a:	f000 b813 	b.w	8006494 <_close_r>
	...

08006470 <_write_r>:
 8006470:	b538      	push	{r3, r4, r5, lr}
 8006472:	4d07      	ldr	r5, [pc, #28]	; (8006490 <_write_r+0x20>)
 8006474:	4604      	mov	r4, r0
 8006476:	4608      	mov	r0, r1
 8006478:	4611      	mov	r1, r2
 800647a:	2200      	movs	r2, #0
 800647c:	602a      	str	r2, [r5, #0]
 800647e:	461a      	mov	r2, r3
 8006480:	f000 f896 	bl	80065b0 <_write>
 8006484:	1c43      	adds	r3, r0, #1
 8006486:	d102      	bne.n	800648e <_write_r+0x1e>
 8006488:	682b      	ldr	r3, [r5, #0]
 800648a:	b103      	cbz	r3, 800648e <_write_r+0x1e>
 800648c:	6023      	str	r3, [r4, #0]
 800648e:	bd38      	pop	{r3, r4, r5, pc}
 8006490:	2000030c 	.word	0x2000030c

08006494 <_close_r>:
 8006494:	b538      	push	{r3, r4, r5, lr}
 8006496:	4d06      	ldr	r5, [pc, #24]	; (80064b0 <_close_r+0x1c>)
 8006498:	2300      	movs	r3, #0
 800649a:	4604      	mov	r4, r0
 800649c:	4608      	mov	r0, r1
 800649e:	602b      	str	r3, [r5, #0]
 80064a0:	f000 f84e 	bl	8006540 <_close>
 80064a4:	1c43      	adds	r3, r0, #1
 80064a6:	d102      	bne.n	80064ae <_close_r+0x1a>
 80064a8:	682b      	ldr	r3, [r5, #0]
 80064aa:	b103      	cbz	r3, 80064ae <_close_r+0x1a>
 80064ac:	6023      	str	r3, [r4, #0]
 80064ae:	bd38      	pop	{r3, r4, r5, pc}
 80064b0:	2000030c 	.word	0x2000030c

080064b4 <_fstat_r>:
 80064b4:	b538      	push	{r3, r4, r5, lr}
 80064b6:	4d07      	ldr	r5, [pc, #28]	; (80064d4 <_fstat_r+0x20>)
 80064b8:	2300      	movs	r3, #0
 80064ba:	4604      	mov	r4, r0
 80064bc:	4608      	mov	r0, r1
 80064be:	4611      	mov	r1, r2
 80064c0:	602b      	str	r3, [r5, #0]
 80064c2:	f000 f845 	bl	8006550 <_fstat>
 80064c6:	1c43      	adds	r3, r0, #1
 80064c8:	d102      	bne.n	80064d0 <_fstat_r+0x1c>
 80064ca:	682b      	ldr	r3, [r5, #0]
 80064cc:	b103      	cbz	r3, 80064d0 <_fstat_r+0x1c>
 80064ce:	6023      	str	r3, [r4, #0]
 80064d0:	bd38      	pop	{r3, r4, r5, pc}
 80064d2:	bf00      	nop
 80064d4:	2000030c 	.word	0x2000030c

080064d8 <_isatty_r>:
 80064d8:	b538      	push	{r3, r4, r5, lr}
 80064da:	4d06      	ldr	r5, [pc, #24]	; (80064f4 <_isatty_r+0x1c>)
 80064dc:	2300      	movs	r3, #0
 80064de:	4604      	mov	r4, r0
 80064e0:	4608      	mov	r0, r1
 80064e2:	602b      	str	r3, [r5, #0]
 80064e4:	f000 f844 	bl	8006570 <_isatty>
 80064e8:	1c43      	adds	r3, r0, #1
 80064ea:	d102      	bne.n	80064f2 <_isatty_r+0x1a>
 80064ec:	682b      	ldr	r3, [r5, #0]
 80064ee:	b103      	cbz	r3, 80064f2 <_isatty_r+0x1a>
 80064f0:	6023      	str	r3, [r4, #0]
 80064f2:	bd38      	pop	{r3, r4, r5, pc}
 80064f4:	2000030c 	.word	0x2000030c

080064f8 <_lseek_r>:
 80064f8:	b538      	push	{r3, r4, r5, lr}
 80064fa:	4d07      	ldr	r5, [pc, #28]	; (8006518 <_lseek_r+0x20>)
 80064fc:	4604      	mov	r4, r0
 80064fe:	4608      	mov	r0, r1
 8006500:	4611      	mov	r1, r2
 8006502:	2200      	movs	r2, #0
 8006504:	602a      	str	r2, [r5, #0]
 8006506:	461a      	mov	r2, r3
 8006508:	f000 f842 	bl	8006590 <_lseek>
 800650c:	1c43      	adds	r3, r0, #1
 800650e:	d102      	bne.n	8006516 <_lseek_r+0x1e>
 8006510:	682b      	ldr	r3, [r5, #0]
 8006512:	b103      	cbz	r3, 8006516 <_lseek_r+0x1e>
 8006514:	6023      	str	r3, [r4, #0]
 8006516:	bd38      	pop	{r3, r4, r5, pc}
 8006518:	2000030c 	.word	0x2000030c

0800651c <_read_r>:
 800651c:	b538      	push	{r3, r4, r5, lr}
 800651e:	4d07      	ldr	r5, [pc, #28]	; (800653c <_read_r+0x20>)
 8006520:	4604      	mov	r4, r0
 8006522:	4608      	mov	r0, r1
 8006524:	4611      	mov	r1, r2
 8006526:	2200      	movs	r2, #0
 8006528:	602a      	str	r2, [r5, #0]
 800652a:	461a      	mov	r2, r3
 800652c:	f000 f838 	bl	80065a0 <_read>
 8006530:	1c43      	adds	r3, r0, #1
 8006532:	d102      	bne.n	800653a <_read_r+0x1e>
 8006534:	682b      	ldr	r3, [r5, #0]
 8006536:	b103      	cbz	r3, 800653a <_read_r+0x1e>
 8006538:	6023      	str	r3, [r4, #0]
 800653a:	bd38      	pop	{r3, r4, r5, pc}
 800653c:	2000030c 	.word	0x2000030c

08006540 <_close>:
 8006540:	4b02      	ldr	r3, [pc, #8]	; (800654c <_close+0xc>)
 8006542:	2258      	movs	r2, #88	; 0x58
 8006544:	601a      	str	r2, [r3, #0]
 8006546:	f04f 30ff 	mov.w	r0, #4294967295
 800654a:	4770      	bx	lr
 800654c:	2000030c 	.word	0x2000030c

08006550 <_fstat>:
 8006550:	4b02      	ldr	r3, [pc, #8]	; (800655c <_fstat+0xc>)
 8006552:	2258      	movs	r2, #88	; 0x58
 8006554:	601a      	str	r2, [r3, #0]
 8006556:	f04f 30ff 	mov.w	r0, #4294967295
 800655a:	4770      	bx	lr
 800655c:	2000030c 	.word	0x2000030c

08006560 <_getpid>:
 8006560:	4b02      	ldr	r3, [pc, #8]	; (800656c <_getpid+0xc>)
 8006562:	2258      	movs	r2, #88	; 0x58
 8006564:	601a      	str	r2, [r3, #0]
 8006566:	f04f 30ff 	mov.w	r0, #4294967295
 800656a:	4770      	bx	lr
 800656c:	2000030c 	.word	0x2000030c

08006570 <_isatty>:
 8006570:	4b02      	ldr	r3, [pc, #8]	; (800657c <_isatty+0xc>)
 8006572:	2258      	movs	r2, #88	; 0x58
 8006574:	601a      	str	r2, [r3, #0]
 8006576:	2000      	movs	r0, #0
 8006578:	4770      	bx	lr
 800657a:	bf00      	nop
 800657c:	2000030c 	.word	0x2000030c

08006580 <_kill>:
 8006580:	4b02      	ldr	r3, [pc, #8]	; (800658c <_kill+0xc>)
 8006582:	2258      	movs	r2, #88	; 0x58
 8006584:	601a      	str	r2, [r3, #0]
 8006586:	f04f 30ff 	mov.w	r0, #4294967295
 800658a:	4770      	bx	lr
 800658c:	2000030c 	.word	0x2000030c

08006590 <_lseek>:
 8006590:	4b02      	ldr	r3, [pc, #8]	; (800659c <_lseek+0xc>)
 8006592:	2258      	movs	r2, #88	; 0x58
 8006594:	601a      	str	r2, [r3, #0]
 8006596:	f04f 30ff 	mov.w	r0, #4294967295
 800659a:	4770      	bx	lr
 800659c:	2000030c 	.word	0x2000030c

080065a0 <_read>:
 80065a0:	4b02      	ldr	r3, [pc, #8]	; (80065ac <_read+0xc>)
 80065a2:	2258      	movs	r2, #88	; 0x58
 80065a4:	601a      	str	r2, [r3, #0]
 80065a6:	f04f 30ff 	mov.w	r0, #4294967295
 80065aa:	4770      	bx	lr
 80065ac:	2000030c 	.word	0x2000030c

080065b0 <_write>:
 80065b0:	4b02      	ldr	r3, [pc, #8]	; (80065bc <_write+0xc>)
 80065b2:	2258      	movs	r2, #88	; 0x58
 80065b4:	601a      	str	r2, [r3, #0]
 80065b6:	f04f 30ff 	mov.w	r0, #4294967295
 80065ba:	4770      	bx	lr
 80065bc:	2000030c 	.word	0x2000030c

080065c0 <_exit>:
 80065c0:	e7fe      	b.n	80065c0 <_exit>
	...

080065c4 <_init>:
 80065c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065c6:	bf00      	nop
 80065c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065ca:	bc08      	pop	{r3}
 80065cc:	469e      	mov	lr, r3
 80065ce:	4770      	bx	lr

080065d0 <_fini>:
 80065d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065d2:	bf00      	nop
 80065d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065d6:	bc08      	pop	{r3}
 80065d8:	469e      	mov	lr, r3
 80065da:	4770      	bx	lr
