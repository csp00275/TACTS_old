
TACTS_testbed.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012960  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000704  08012b30  08012b30  00022b30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013234  08013234  0003049c  2**0
                  CONTENTS
  4 .ARM          00000008  08013234  08013234  00023234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801323c  0801323c  0003049c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801323c  0801323c  0002323c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013240  08013240  00023240  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000049c  20000000  08013244  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d0  2000049c  080136e0  0003049c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000076c  080136e0  0003076c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003049c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002026d  00000000  00000000  000304cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000038e7  00000000  00000000  00050739  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001720  00000000  00000000  00054020  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001598  00000000  00000000  00055740  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029607  00000000  00000000  00056cd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000214d2  00000000  00000000  000802df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f962d  00000000  00000000  000a17b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0019adde  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007710  00000000  00000000  0019ae30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000049c 	.word	0x2000049c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08012b18 	.word	0x08012b18

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200004a0 	.word	0x200004a0
 800020c:	08012b18 	.word	0x08012b18

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9aa 	b.w	8001034 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	468e      	mov	lr, r1
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d14d      	bne.n	8000e0e <__udivmoddi4+0xaa>
 8000d72:	428a      	cmp	r2, r1
 8000d74:	4694      	mov	ip, r2
 8000d76:	d969      	bls.n	8000e4c <__udivmoddi4+0xe8>
 8000d78:	fab2 f282 	clz	r2, r2
 8000d7c:	b152      	cbz	r2, 8000d94 <__udivmoddi4+0x30>
 8000d7e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d82:	f1c2 0120 	rsb	r1, r2, #32
 8000d86:	fa20 f101 	lsr.w	r1, r0, r1
 8000d8a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d8e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d92:	4094      	lsls	r4, r2
 8000d94:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d98:	0c21      	lsrs	r1, r4, #16
 8000d9a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d9e:	fa1f f78c 	uxth.w	r7, ip
 8000da2:	fb08 e316 	mls	r3, r8, r6, lr
 8000da6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000daa:	fb06 f107 	mul.w	r1, r6, r7
 8000dae:	4299      	cmp	r1, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x64>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dba:	f080 811f 	bcs.w	8000ffc <__udivmoddi4+0x298>
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	f240 811c 	bls.w	8000ffc <__udivmoddi4+0x298>
 8000dc4:	3e02      	subs	r6, #2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	1a5b      	subs	r3, r3, r1
 8000dca:	b2a4      	uxth	r4, r4
 8000dcc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dd0:	fb08 3310 	mls	r3, r8, r0, r3
 8000dd4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dd8:	fb00 f707 	mul.w	r7, r0, r7
 8000ddc:	42a7      	cmp	r7, r4
 8000dde:	d90a      	bls.n	8000df6 <__udivmoddi4+0x92>
 8000de0:	eb1c 0404 	adds.w	r4, ip, r4
 8000de4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000de8:	f080 810a 	bcs.w	8001000 <__udivmoddi4+0x29c>
 8000dec:	42a7      	cmp	r7, r4
 8000dee:	f240 8107 	bls.w	8001000 <__udivmoddi4+0x29c>
 8000df2:	4464      	add	r4, ip
 8000df4:	3802      	subs	r0, #2
 8000df6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dfa:	1be4      	subs	r4, r4, r7
 8000dfc:	2600      	movs	r6, #0
 8000dfe:	b11d      	cbz	r5, 8000e08 <__udivmoddi4+0xa4>
 8000e00:	40d4      	lsrs	r4, r2
 8000e02:	2300      	movs	r3, #0
 8000e04:	e9c5 4300 	strd	r4, r3, [r5]
 8000e08:	4631      	mov	r1, r6
 8000e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d909      	bls.n	8000e26 <__udivmoddi4+0xc2>
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	f000 80ef 	beq.w	8000ff6 <__udivmoddi4+0x292>
 8000e18:	2600      	movs	r6, #0
 8000e1a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e1e:	4630      	mov	r0, r6
 8000e20:	4631      	mov	r1, r6
 8000e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e26:	fab3 f683 	clz	r6, r3
 8000e2a:	2e00      	cmp	r6, #0
 8000e2c:	d14a      	bne.n	8000ec4 <__udivmoddi4+0x160>
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d302      	bcc.n	8000e38 <__udivmoddi4+0xd4>
 8000e32:	4282      	cmp	r2, r0
 8000e34:	f200 80f9 	bhi.w	800102a <__udivmoddi4+0x2c6>
 8000e38:	1a84      	subs	r4, r0, r2
 8000e3a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e3e:	2001      	movs	r0, #1
 8000e40:	469e      	mov	lr, r3
 8000e42:	2d00      	cmp	r5, #0
 8000e44:	d0e0      	beq.n	8000e08 <__udivmoddi4+0xa4>
 8000e46:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e4a:	e7dd      	b.n	8000e08 <__udivmoddi4+0xa4>
 8000e4c:	b902      	cbnz	r2, 8000e50 <__udivmoddi4+0xec>
 8000e4e:	deff      	udf	#255	; 0xff
 8000e50:	fab2 f282 	clz	r2, r2
 8000e54:	2a00      	cmp	r2, #0
 8000e56:	f040 8092 	bne.w	8000f7e <__udivmoddi4+0x21a>
 8000e5a:	eba1 010c 	sub.w	r1, r1, ip
 8000e5e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e62:	fa1f fe8c 	uxth.w	lr, ip
 8000e66:	2601      	movs	r6, #1
 8000e68:	0c20      	lsrs	r0, r4, #16
 8000e6a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e6e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e72:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e76:	fb0e f003 	mul.w	r0, lr, r3
 8000e7a:	4288      	cmp	r0, r1
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x12c>
 8000e7e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e82:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x12a>
 8000e88:	4288      	cmp	r0, r1
 8000e8a:	f200 80cb 	bhi.w	8001024 <__udivmoddi4+0x2c0>
 8000e8e:	4643      	mov	r3, r8
 8000e90:	1a09      	subs	r1, r1, r0
 8000e92:	b2a4      	uxth	r4, r4
 8000e94:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e98:	fb07 1110 	mls	r1, r7, r0, r1
 8000e9c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ea0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ea4:	45a6      	cmp	lr, r4
 8000ea6:	d908      	bls.n	8000eba <__udivmoddi4+0x156>
 8000ea8:	eb1c 0404 	adds.w	r4, ip, r4
 8000eac:	f100 31ff 	add.w	r1, r0, #4294967295
 8000eb0:	d202      	bcs.n	8000eb8 <__udivmoddi4+0x154>
 8000eb2:	45a6      	cmp	lr, r4
 8000eb4:	f200 80bb 	bhi.w	800102e <__udivmoddi4+0x2ca>
 8000eb8:	4608      	mov	r0, r1
 8000eba:	eba4 040e 	sub.w	r4, r4, lr
 8000ebe:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ec2:	e79c      	b.n	8000dfe <__udivmoddi4+0x9a>
 8000ec4:	f1c6 0720 	rsb	r7, r6, #32
 8000ec8:	40b3      	lsls	r3, r6
 8000eca:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ece:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ed2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ed6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eda:	431c      	orrs	r4, r3
 8000edc:	40f9      	lsrs	r1, r7
 8000ede:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ee2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ee6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eea:	0c20      	lsrs	r0, r4, #16
 8000eec:	fa1f fe8c 	uxth.w	lr, ip
 8000ef0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ef4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ef8:	fb08 f00e 	mul.w	r0, r8, lr
 8000efc:	4288      	cmp	r0, r1
 8000efe:	fa02 f206 	lsl.w	r2, r2, r6
 8000f02:	d90b      	bls.n	8000f1c <__udivmoddi4+0x1b8>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f0c:	f080 8088 	bcs.w	8001020 <__udivmoddi4+0x2bc>
 8000f10:	4288      	cmp	r0, r1
 8000f12:	f240 8085 	bls.w	8001020 <__udivmoddi4+0x2bc>
 8000f16:	f1a8 0802 	sub.w	r8, r8, #2
 8000f1a:	4461      	add	r1, ip
 8000f1c:	1a09      	subs	r1, r1, r0
 8000f1e:	b2a4      	uxth	r4, r4
 8000f20:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f24:	fb09 1110 	mls	r1, r9, r0, r1
 8000f28:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f2c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f30:	458e      	cmp	lr, r1
 8000f32:	d908      	bls.n	8000f46 <__udivmoddi4+0x1e2>
 8000f34:	eb1c 0101 	adds.w	r1, ip, r1
 8000f38:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f3c:	d26c      	bcs.n	8001018 <__udivmoddi4+0x2b4>
 8000f3e:	458e      	cmp	lr, r1
 8000f40:	d96a      	bls.n	8001018 <__udivmoddi4+0x2b4>
 8000f42:	3802      	subs	r0, #2
 8000f44:	4461      	add	r1, ip
 8000f46:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f4a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f4e:	eba1 010e 	sub.w	r1, r1, lr
 8000f52:	42a1      	cmp	r1, r4
 8000f54:	46c8      	mov	r8, r9
 8000f56:	46a6      	mov	lr, r4
 8000f58:	d356      	bcc.n	8001008 <__udivmoddi4+0x2a4>
 8000f5a:	d053      	beq.n	8001004 <__udivmoddi4+0x2a0>
 8000f5c:	b15d      	cbz	r5, 8000f76 <__udivmoddi4+0x212>
 8000f5e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f62:	eb61 010e 	sbc.w	r1, r1, lr
 8000f66:	fa01 f707 	lsl.w	r7, r1, r7
 8000f6a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f6e:	40f1      	lsrs	r1, r6
 8000f70:	431f      	orrs	r7, r3
 8000f72:	e9c5 7100 	strd	r7, r1, [r5]
 8000f76:	2600      	movs	r6, #0
 8000f78:	4631      	mov	r1, r6
 8000f7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f7e:	f1c2 0320 	rsb	r3, r2, #32
 8000f82:	40d8      	lsrs	r0, r3
 8000f84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f88:	fa21 f303 	lsr.w	r3, r1, r3
 8000f8c:	4091      	lsls	r1, r2
 8000f8e:	4301      	orrs	r1, r0
 8000f90:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f94:	fa1f fe8c 	uxth.w	lr, ip
 8000f98:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f9c:	fb07 3610 	mls	r6, r7, r0, r3
 8000fa0:	0c0b      	lsrs	r3, r1, #16
 8000fa2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fa6:	fb00 f60e 	mul.w	r6, r0, lr
 8000faa:	429e      	cmp	r6, r3
 8000fac:	fa04 f402 	lsl.w	r4, r4, r2
 8000fb0:	d908      	bls.n	8000fc4 <__udivmoddi4+0x260>
 8000fb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fba:	d22f      	bcs.n	800101c <__udivmoddi4+0x2b8>
 8000fbc:	429e      	cmp	r6, r3
 8000fbe:	d92d      	bls.n	800101c <__udivmoddi4+0x2b8>
 8000fc0:	3802      	subs	r0, #2
 8000fc2:	4463      	add	r3, ip
 8000fc4:	1b9b      	subs	r3, r3, r6
 8000fc6:	b289      	uxth	r1, r1
 8000fc8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fcc:	fb07 3316 	mls	r3, r7, r6, r3
 8000fd0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fd4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fd8:	428b      	cmp	r3, r1
 8000fda:	d908      	bls.n	8000fee <__udivmoddi4+0x28a>
 8000fdc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fe0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fe4:	d216      	bcs.n	8001014 <__udivmoddi4+0x2b0>
 8000fe6:	428b      	cmp	r3, r1
 8000fe8:	d914      	bls.n	8001014 <__udivmoddi4+0x2b0>
 8000fea:	3e02      	subs	r6, #2
 8000fec:	4461      	add	r1, ip
 8000fee:	1ac9      	subs	r1, r1, r3
 8000ff0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ff4:	e738      	b.n	8000e68 <__udivmoddi4+0x104>
 8000ff6:	462e      	mov	r6, r5
 8000ff8:	4628      	mov	r0, r5
 8000ffa:	e705      	b.n	8000e08 <__udivmoddi4+0xa4>
 8000ffc:	4606      	mov	r6, r0
 8000ffe:	e6e3      	b.n	8000dc8 <__udivmoddi4+0x64>
 8001000:	4618      	mov	r0, r3
 8001002:	e6f8      	b.n	8000df6 <__udivmoddi4+0x92>
 8001004:	454b      	cmp	r3, r9
 8001006:	d2a9      	bcs.n	8000f5c <__udivmoddi4+0x1f8>
 8001008:	ebb9 0802 	subs.w	r8, r9, r2
 800100c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001010:	3801      	subs	r0, #1
 8001012:	e7a3      	b.n	8000f5c <__udivmoddi4+0x1f8>
 8001014:	4646      	mov	r6, r8
 8001016:	e7ea      	b.n	8000fee <__udivmoddi4+0x28a>
 8001018:	4620      	mov	r0, r4
 800101a:	e794      	b.n	8000f46 <__udivmoddi4+0x1e2>
 800101c:	4640      	mov	r0, r8
 800101e:	e7d1      	b.n	8000fc4 <__udivmoddi4+0x260>
 8001020:	46d0      	mov	r8, sl
 8001022:	e77b      	b.n	8000f1c <__udivmoddi4+0x1b8>
 8001024:	3b02      	subs	r3, #2
 8001026:	4461      	add	r1, ip
 8001028:	e732      	b.n	8000e90 <__udivmoddi4+0x12c>
 800102a:	4630      	mov	r0, r6
 800102c:	e709      	b.n	8000e42 <__udivmoddi4+0xde>
 800102e:	4464      	add	r4, ip
 8001030:	3802      	subs	r0, #2
 8001032:	e742      	b.n	8000eba <__udivmoddi4+0x156>

08001034 <__aeabi_idiv0>:
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop

08001038 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b08a      	sub	sp, #40	; 0x28
 800103c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800103e:	f107 0314 	add.w	r3, r7, #20
 8001042:	2200      	movs	r2, #0
 8001044:	601a      	str	r2, [r3, #0]
 8001046:	605a      	str	r2, [r3, #4]
 8001048:	609a      	str	r2, [r3, #8]
 800104a:	60da      	str	r2, [r3, #12]
 800104c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800104e:	4b59      	ldr	r3, [pc, #356]	; (80011b4 <MX_GPIO_Init+0x17c>)
 8001050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001052:	4a58      	ldr	r2, [pc, #352]	; (80011b4 <MX_GPIO_Init+0x17c>)
 8001054:	f043 0302 	orr.w	r3, r3, #2
 8001058:	6313      	str	r3, [r2, #48]	; 0x30
 800105a:	4b56      	ldr	r3, [pc, #344]	; (80011b4 <MX_GPIO_Init+0x17c>)
 800105c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105e:	f003 0302 	and.w	r3, r3, #2
 8001062:	613b      	str	r3, [r7, #16]
 8001064:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001066:	4b53      	ldr	r3, [pc, #332]	; (80011b4 <MX_GPIO_Init+0x17c>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106a:	4a52      	ldr	r2, [pc, #328]	; (80011b4 <MX_GPIO_Init+0x17c>)
 800106c:	f043 0301 	orr.w	r3, r3, #1
 8001070:	6313      	str	r3, [r2, #48]	; 0x30
 8001072:	4b50      	ldr	r3, [pc, #320]	; (80011b4 <MX_GPIO_Init+0x17c>)
 8001074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001076:	f003 0301 	and.w	r3, r3, #1
 800107a:	60fb      	str	r3, [r7, #12]
 800107c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800107e:	4b4d      	ldr	r3, [pc, #308]	; (80011b4 <MX_GPIO_Init+0x17c>)
 8001080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001082:	4a4c      	ldr	r2, [pc, #304]	; (80011b4 <MX_GPIO_Init+0x17c>)
 8001084:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001088:	6313      	str	r3, [r2, #48]	; 0x30
 800108a:	4b4a      	ldr	r3, [pc, #296]	; (80011b4 <MX_GPIO_Init+0x17c>)
 800108c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001092:	60bb      	str	r3, [r7, #8]
 8001094:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001096:	4b47      	ldr	r3, [pc, #284]	; (80011b4 <MX_GPIO_Init+0x17c>)
 8001098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109a:	4a46      	ldr	r2, [pc, #280]	; (80011b4 <MX_GPIO_Init+0x17c>)
 800109c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010a0:	6313      	str	r3, [r2, #48]	; 0x30
 80010a2:	4b44      	ldr	r3, [pc, #272]	; (80011b4 <MX_GPIO_Init+0x17c>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010aa:	607b      	str	r3, [r7, #4]
 80010ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80010ae:	4b41      	ldr	r3, [pc, #260]	; (80011b4 <MX_GPIO_Init+0x17c>)
 80010b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b2:	4a40      	ldr	r2, [pc, #256]	; (80011b4 <MX_GPIO_Init+0x17c>)
 80010b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010b8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ba:	4b3e      	ldr	r3, [pc, #248]	; (80011b4 <MX_GPIO_Init+0x17c>)
 80010bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010c2:	603b      	str	r3, [r7, #0]
 80010c4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 80010c6:	2200      	movs	r2, #0
 80010c8:	2110      	movs	r1, #16
 80010ca:	483b      	ldr	r0, [pc, #236]	; (80011b8 <MX_GPIO_Init+0x180>)
 80010cc:	f001 fd56 	bl	8002b7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0, GPIO_PIN_RESET);
 80010d0:	2200      	movs	r2, #0
 80010d2:	210f      	movs	r1, #15
 80010d4:	4839      	ldr	r0, [pc, #228]	; (80011bc <MX_GPIO_Init+0x184>)
 80010d6:	f001 fd51 	bl	8002b7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7|GPIO_PIN_6, GPIO_PIN_RESET);
 80010da:	2200      	movs	r2, #0
 80010dc:	21c0      	movs	r1, #192	; 0xc0
 80010de:	4838      	ldr	r0, [pc, #224]	; (80011c0 <MX_GPIO_Init+0x188>)
 80010e0:	f001 fd4c 	bl	8002b7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80010e4:	2310      	movs	r3, #16
 80010e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010e8:	2301      	movs	r3, #1
 80010ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ec:	2300      	movs	r3, #0
 80010ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f0:	2300      	movs	r3, #0
 80010f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010f4:	f107 0314 	add.w	r3, r7, #20
 80010f8:	4619      	mov	r1, r3
 80010fa:	482f      	ldr	r0, [pc, #188]	; (80011b8 <MX_GPIO_Init+0x180>)
 80010fc:	f001 f9ae 	bl	800245c <HAL_GPIO_Init>

  /*Configure GPIO pins : PI3 PI2 PI1 PI0 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0;
 8001100:	230f      	movs	r3, #15
 8001102:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001104:	2301      	movs	r3, #1
 8001106:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001108:	2300      	movs	r3, #0
 800110a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800110c:	2300      	movs	r3, #0
 800110e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001110:	f107 0314 	add.w	r3, r7, #20
 8001114:	4619      	mov	r1, r3
 8001116:	4829      	ldr	r0, [pc, #164]	; (80011bc <MX_GPIO_Init+0x184>)
 8001118:	f001 f9a0 	bl	800245c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800111c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001120:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001122:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001126:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001128:	2300      	movs	r3, #0
 800112a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800112c:	f107 0314 	add.w	r3, r7, #20
 8001130:	4619      	mov	r1, r3
 8001132:	4824      	ldr	r0, [pc, #144]	; (80011c4 <MX_GPIO_Init+0x18c>)
 8001134:	f001 f992 	bl	800245c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG7 PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8001138:	23c0      	movs	r3, #192	; 0xc0
 800113a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800113c:	2301      	movs	r3, #1
 800113e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001140:	2300      	movs	r3, #0
 8001142:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001144:	2300      	movs	r3, #0
 8001146:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001148:	f107 0314 	add.w	r3, r7, #20
 800114c:	4619      	mov	r1, r3
 800114e:	481c      	ldr	r0, [pc, #112]	; (80011c0 <MX_GPIO_Init+0x188>)
 8001150:	f001 f984 	bl	800245c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001154:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001158:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800115a:	2300      	movs	r3, #0
 800115c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115e:	2300      	movs	r3, #0
 8001160:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001162:	f107 0314 	add.w	r3, r7, #20
 8001166:	4619      	mov	r1, r3
 8001168:	4813      	ldr	r0, [pc, #76]	; (80011b8 <MX_GPIO_Init+0x180>)
 800116a:	f001 f977 	bl	800245c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800116e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001172:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001174:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001178:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117a:	2300      	movs	r3, #0
 800117c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800117e:	f107 0314 	add.w	r3, r7, #20
 8001182:	4619      	mov	r1, r3
 8001184:	480c      	ldr	r0, [pc, #48]	; (80011b8 <MX_GPIO_Init+0x180>)
 8001186:	f001 f969 	bl	800245c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800118a:	2200      	movs	r2, #0
 800118c:	2100      	movs	r1, #0
 800118e:	2017      	movs	r0, #23
 8001190:	f001 f882 	bl	8002298 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001194:	2017      	movs	r0, #23
 8001196:	f001 f8ab 	bl	80022f0 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800119a:	2200      	movs	r2, #0
 800119c:	2100      	movs	r1, #0
 800119e:	2028      	movs	r0, #40	; 0x28
 80011a0:	f001 f87a 	bl	8002298 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80011a4:	2028      	movs	r0, #40	; 0x28
 80011a6:	f001 f8a3 	bl	80022f0 <HAL_NVIC_EnableIRQ>

}
 80011aa:	bf00      	nop
 80011ac:	3728      	adds	r7, #40	; 0x28
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	40023800 	.word	0x40023800
 80011b8:	40020400 	.word	0x40020400
 80011bc:	40022000 	.word	0x40022000
 80011c0:	40021800 	.word	0x40021800
 80011c4:	40020000 	.word	0x40020000

080011c8 <HX711_Init>:




void HX711_Init(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
  // Set the SCK pin to low
  HAL_GPIO_WritePin(HX711_SCK_GPIO_Port, HX711_SCK_Pin, GPIO_PIN_RESET);
 80011cc:	2200      	movs	r2, #0
 80011ce:	2102      	movs	r1, #2
 80011d0:	4802      	ldr	r0, [pc, #8]	; (80011dc <HX711_Init+0x14>)
 80011d2:	f001 fcd3 	bl	8002b7c <HAL_GPIO_WritePin>
}
 80011d6:	bf00      	nop
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	40022000 	.word	0x40022000

080011e0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011e4:	4b1b      	ldr	r3, [pc, #108]	; (8001254 <MX_I2C1_Init+0x74>)
 80011e6:	4a1c      	ldr	r2, [pc, #112]	; (8001258 <MX_I2C1_Init+0x78>)
 80011e8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x6000030D;
 80011ea:	4b1a      	ldr	r3, [pc, #104]	; (8001254 <MX_I2C1_Init+0x74>)
 80011ec:	4a1b      	ldr	r2, [pc, #108]	; (800125c <MX_I2C1_Init+0x7c>)
 80011ee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80011f0:	4b18      	ldr	r3, [pc, #96]	; (8001254 <MX_I2C1_Init+0x74>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011f6:	4b17      	ldr	r3, [pc, #92]	; (8001254 <MX_I2C1_Init+0x74>)
 80011f8:	2201      	movs	r2, #1
 80011fa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011fc:	4b15      	ldr	r3, [pc, #84]	; (8001254 <MX_I2C1_Init+0x74>)
 80011fe:	2200      	movs	r2, #0
 8001200:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001202:	4b14      	ldr	r3, [pc, #80]	; (8001254 <MX_I2C1_Init+0x74>)
 8001204:	2200      	movs	r2, #0
 8001206:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001208:	4b12      	ldr	r3, [pc, #72]	; (8001254 <MX_I2C1_Init+0x74>)
 800120a:	2200      	movs	r2, #0
 800120c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800120e:	4b11      	ldr	r3, [pc, #68]	; (8001254 <MX_I2C1_Init+0x74>)
 8001210:	2200      	movs	r2, #0
 8001212:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001214:	4b0f      	ldr	r3, [pc, #60]	; (8001254 <MX_I2C1_Init+0x74>)
 8001216:	2200      	movs	r2, #0
 8001218:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800121a:	480e      	ldr	r0, [pc, #56]	; (8001254 <MX_I2C1_Init+0x74>)
 800121c:	f001 fcf2 	bl	8002c04 <HAL_I2C_Init>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001226:	f000 fb7d 	bl	8001924 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800122a:	2100      	movs	r1, #0
 800122c:	4809      	ldr	r0, [pc, #36]	; (8001254 <MX_I2C1_Init+0x74>)
 800122e:	f002 faab 	bl	8003788 <HAL_I2CEx_ConfigAnalogFilter>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001238:	f000 fb74 	bl	8001924 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800123c:	2100      	movs	r1, #0
 800123e:	4805      	ldr	r0, [pc, #20]	; (8001254 <MX_I2C1_Init+0x74>)
 8001240:	f002 fb18 	bl	8003874 <HAL_I2CEx_ConfigDigitalFilter>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800124a:	f000 fb6b 	bl	8001924 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800124e:	bf00      	nop
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	200004b8 	.word	0x200004b8
 8001258:	40005400 	.word	0x40005400
 800125c:	6000030d 	.word	0x6000030d

08001260 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b0aa      	sub	sp, #168	; 0xa8
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001268:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800126c:	2200      	movs	r2, #0
 800126e:	601a      	str	r2, [r3, #0]
 8001270:	605a      	str	r2, [r3, #4]
 8001272:	609a      	str	r2, [r3, #8]
 8001274:	60da      	str	r2, [r3, #12]
 8001276:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001278:	f107 0310 	add.w	r3, r7, #16
 800127c:	2284      	movs	r2, #132	; 0x84
 800127e:	2100      	movs	r1, #0
 8001280:	4618      	mov	r0, r3
 8001282:	f00c ffd9 	bl	800e238 <memset>
  if(i2cHandle->Instance==I2C1)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4a22      	ldr	r2, [pc, #136]	; (8001314 <HAL_I2C_MspInit+0xb4>)
 800128c:	4293      	cmp	r3, r2
 800128e:	d13c      	bne.n	800130a <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001290:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001294:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001296:	2300      	movs	r3, #0
 8001298:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800129a:	f107 0310 	add.w	r3, r7, #16
 800129e:	4618      	mov	r0, r3
 80012a0:	f003 f9a8 	bl	80045f4 <HAL_RCCEx_PeriphCLKConfig>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80012aa:	f000 fb3b 	bl	8001924 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ae:	4b1a      	ldr	r3, [pc, #104]	; (8001318 <HAL_I2C_MspInit+0xb8>)
 80012b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b2:	4a19      	ldr	r2, [pc, #100]	; (8001318 <HAL_I2C_MspInit+0xb8>)
 80012b4:	f043 0302 	orr.w	r3, r3, #2
 80012b8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ba:	4b17      	ldr	r3, [pc, #92]	; (8001318 <HAL_I2C_MspInit+0xb8>)
 80012bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012be:	f003 0302 	and.w	r3, r3, #2
 80012c2:	60fb      	str	r3, [r7, #12]
 80012c4:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80012c6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80012ca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012ce:	2312      	movs	r3, #18
 80012d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d4:	2300      	movs	r3, #0
 80012d6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012da:	2303      	movs	r3, #3
 80012dc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012e0:	2304      	movs	r3, #4
 80012e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012e6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80012ea:	4619      	mov	r1, r3
 80012ec:	480b      	ldr	r0, [pc, #44]	; (800131c <HAL_I2C_MspInit+0xbc>)
 80012ee:	f001 f8b5 	bl	800245c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012f2:	4b09      	ldr	r3, [pc, #36]	; (8001318 <HAL_I2C_MspInit+0xb8>)
 80012f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f6:	4a08      	ldr	r2, [pc, #32]	; (8001318 <HAL_I2C_MspInit+0xb8>)
 80012f8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012fc:	6413      	str	r3, [r2, #64]	; 0x40
 80012fe:	4b06      	ldr	r3, [pc, #24]	; (8001318 <HAL_I2C_MspInit+0xb8>)
 8001300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001302:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001306:	60bb      	str	r3, [r7, #8]
 8001308:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800130a:	bf00      	nop
 800130c:	37a8      	adds	r7, #168	; 0xa8
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	40005400 	.word	0x40005400
 8001318:	40023800 	.word	0x40023800
 800131c:	40020400 	.word	0x40020400

08001320 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	f6ad 3d48 	subw	sp, sp, #2888	; 0xb48
 8001326:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001328:	f000 fe45 	bl	8001fb6 <HAL_Init>

  /* USER CODE BEGIN Init */

	// VL53L0X initialization stuff
	//
	uint32_t refSpadCount = 0;
 800132c:	2300      	movs	r3, #0
 800132e:	f8c7 3b14 	str.w	r3, [r7, #2836]	; 0xb14
	uint8_t isApertureSpads = 0;
 8001332:	2300      	movs	r3, #0
 8001334:	f887 3b13 	strb.w	r3, [r7, #2835]	; 0xb13
	uint8_t VhvSettings = 0;
 8001338:	2300      	movs	r3, #0
 800133a:	f887 3b12 	strb.w	r3, [r7, #2834]	; 0xb12
	uint8_t PhaseCal = 0;
 800133e:	2300      	movs	r3, #0
 8001340:	f887 3b11 	strb.w	r3, [r7, #2833]	; 0xb11
	VL53L0X_Dev_t vl53l0x_s[NUM_SENSOR];
//	VL53L0X_Dev_t vl53l0x_s;

	VL53L0X_DEV Dev;
	//KalmanFilter kalman_filters[NUM_SENSOR];
	uint16_t distance[NUM_SENSOR] = {0,};
 8001344:	f507 6334 	add.w	r3, r7, #2880	; 0xb40
 8001348:	f5a3 6333 	sub.w	r3, r3, #2864	; 0xb30
 800134c:	2200      	movs	r2, #0
 800134e:	601a      	str	r2, [r3, #0]
 8001350:	605a      	str	r2, [r3, #4]
 8001352:	609a      	str	r2, [r3, #8]
 8001354:	819a      	strh	r2, [r3, #12]
//	float filtered_distance[NUM_SENSOR] = {0,};

	uint8_t tca_ch[8] = {0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80}; // control register of TCA9548A
 8001356:	f507 6334 	add.w	r3, r7, #2880	; 0xb40
 800135a:	f6a3 3338 	subw	r3, r3, #2872	; 0xb38
 800135e:	4ac3      	ldr	r2, [pc, #780]	; (800166c <main+0x34c>)
 8001360:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001364:	e883 0003 	stmia.w	r3, {r0, r1}
	//uint8_t tca_ch[8] = {0b00000001, 0b00000010, 0b00000100, 0b00001000, 0b00010000, 0b00100000, 0b01000000, 0b10000000};
	uint8_t tca_ch_reset = 0x00;
 8001368:	f507 6334 	add.w	r3, r7, #2880	; 0xb40
 800136c:	f6a3 3339 	subw	r3, r3, #2873	; 0xb39
 8001370:	2200      	movs	r2, #0
 8001372:	701a      	strb	r2, [r3, #0]
	//uint8_t tca_ch_reset = 0b00000000;
    uint8_t tca_addr[] = {0x70};
 8001374:	f507 6334 	add.w	r3, r7, #2880	; 0xb40
 8001378:	f6a3 333c 	subw	r3, r3, #2876	; 0xb3c
 800137c:	2270      	movs	r2, #112	; 0x70
 800137e:	701a      	strb	r2, [r3, #0]


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001380:	f000 f9d2 	bl	8001728 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001384:	f7ff fe58 	bl	8001038 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001388:	f7ff ff2a 	bl	80011e0 <MX_I2C1_Init>
  MX_TIM7_Init();
 800138c:	f000 fc9a 	bl	8001cc4 <MX_TIM7_Init>
  MX_USART1_UART_Init();
 8001390:	f000 fd36 	bl	8001e00 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8001394:	f000 fc20 	bl	8001bd8 <MX_TIM2_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8001398:	f000 fa34 	bl	8001804 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */


  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 800139c:	2100      	movs	r1, #0
 800139e:	48b4      	ldr	r0, [pc, #720]	; (8001670 <main+0x350>)
 80013a0:	f004 fb56 	bl	8005a50 <HAL_TIM_PWM_Start>
  HAL_UART_Receive_IT(&huart1, &rxData, 1);
 80013a4:	2201      	movs	r2, #1
 80013a6:	49b3      	ldr	r1, [pc, #716]	; (8001674 <main+0x354>)
 80013a8:	48b3      	ldr	r0, [pc, #716]	; (8001678 <main+0x358>)
 80013aa:	f006 fb8c 	bl	8007ac6 <HAL_UART_Receive_IT>

  // Initialize the HX711
  HX711_Init();
 80013ae:	f7ff ff0b 	bl	80011c8 <HX711_Init>

  /* UART interrupt initialization */
  MessageLen = sprintf((char*)Message, "JH VL53L0X test\n\r");
 80013b2:	49b2      	ldr	r1, [pc, #712]	; (800167c <main+0x35c>)
 80013b4:	48b2      	ldr	r0, [pc, #712]	; (8001680 <main+0x360>)
 80013b6:	f00d fdc7 	bl	800ef48 <siprintf>
 80013ba:	4603      	mov	r3, r0
 80013bc:	b2da      	uxtb	r2, r3
 80013be:	4bb1      	ldr	r3, [pc, #708]	; (8001684 <main+0x364>)
 80013c0:	701a      	strb	r2, [r3, #0]
  HAL_UART_Transmit(&huart1, Message, MessageLen, 100);
 80013c2:	4bb0      	ldr	r3, [pc, #704]	; (8001684 <main+0x364>)
 80013c4:	781b      	ldrb	r3, [r3, #0]
 80013c6:	b29a      	uxth	r2, r3
 80013c8:	2364      	movs	r3, #100	; 0x64
 80013ca:	49ad      	ldr	r1, [pc, #692]	; (8001680 <main+0x360>)
 80013cc:	48aa      	ldr	r0, [pc, #680]	; (8001678 <main+0x358>)
 80013ce:	f006 faf7 	bl	80079c0 <HAL_UART_Transmit>



		for (int i = 0; i < sizeof(tca_addr); i++) {
 80013d2:	2300      	movs	r3, #0
 80013d4:	f8c7 3b3c 	str.w	r3, [r7, #2876]	; 0xb3c
 80013d8:	e017      	b.n	800140a <main+0xea>
		    HAL_I2C_Master_Transmit(&hi2c1, tca_addr[i] << 1, &tca_ch_reset, 1, 1000);
 80013da:	f507 6334 	add.w	r3, r7, #2880	; 0xb40
 80013de:	f6a3 323c 	subw	r2, r3, #2876	; 0xb3c
 80013e2:	f8d7 3b3c 	ldr.w	r3, [r7, #2876]	; 0xb3c
 80013e6:	4413      	add	r3, r2
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	b29b      	uxth	r3, r3
 80013ec:	005b      	lsls	r3, r3, #1
 80013ee:	b299      	uxth	r1, r3
 80013f0:	1dfa      	adds	r2, r7, #7
 80013f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013f6:	9300      	str	r3, [sp, #0]
 80013f8:	2301      	movs	r3, #1
 80013fa:	48a3      	ldr	r0, [pc, #652]	; (8001688 <main+0x368>)
 80013fc:	f001 fd24 	bl	8002e48 <HAL_I2C_Master_Transmit>
		for (int i = 0; i < sizeof(tca_addr); i++) {
 8001400:	f8d7 3b3c 	ldr.w	r3, [r7, #2876]	; 0xb3c
 8001404:	3301      	adds	r3, #1
 8001406:	f8c7 3b3c 	str.w	r3, [r7, #2876]	; 0xb3c
 800140a:	f8d7 3b3c 	ldr.w	r3, [r7, #2876]	; 0xb3c
 800140e:	2b00      	cmp	r3, #0
 8001410:	d0e3      	beq.n	80013da <main+0xba>
		}

		for (int i = 0; i < NUM_SENSOR; i++) {
 8001412:	2300      	movs	r3, #0
 8001414:	f8c7 3b38 	str.w	r3, [r7, #2872]	; 0xb38
 8001418:	e0bd      	b.n	8001596 <main+0x276>

			uint8_t q = i / 8;
 800141a:	f8d7 3b38 	ldr.w	r3, [r7, #2872]	; 0xb38
 800141e:	2b00      	cmp	r3, #0
 8001420:	da00      	bge.n	8001424 <main+0x104>
 8001422:	3307      	adds	r3, #7
 8001424:	10db      	asrs	r3, r3, #3
 8001426:	f887 3b1f 	strb.w	r3, [r7, #2847]	; 0xb1f
			uint8_t r = i % 8;
 800142a:	f8d7 3b38 	ldr.w	r3, [r7, #2872]	; 0xb38
 800142e:	425a      	negs	r2, r3
 8001430:	f003 0307 	and.w	r3, r3, #7
 8001434:	f002 0207 	and.w	r2, r2, #7
 8001438:	bf58      	it	pl
 800143a:	4253      	negpl	r3, r2
 800143c:	f887 3b1e 	strb.w	r3, [r7, #2846]	; 0xb1e

		    for (int j = 0; j < sizeof(tca_addr); j++) {
 8001440:	2300      	movs	r3, #0
 8001442:	f8c7 3b34 	str.w	r3, [r7, #2868]	; 0xb34
 8001446:	e027      	b.n	8001498 <main+0x178>
		        uint8_t *channel = (j == q) ? &tca_ch[r] : &tca_ch_reset;
 8001448:	f897 3b1f 	ldrb.w	r3, [r7, #2847]	; 0xb1f
 800144c:	f8d7 2b34 	ldr.w	r2, [r7, #2868]	; 0xb34
 8001450:	429a      	cmp	r2, r3
 8001452:	d105      	bne.n	8001460 <main+0x140>
 8001454:	f897 3b1e 	ldrb.w	r3, [r7, #2846]	; 0xb1e
 8001458:	f107 0208 	add.w	r2, r7, #8
 800145c:	4413      	add	r3, r2
 800145e:	e000      	b.n	8001462 <main+0x142>
 8001460:	1dfb      	adds	r3, r7, #7
 8001462:	f8c7 3b18 	str.w	r3, [r7, #2840]	; 0xb18
		        HAL_I2C_Master_Transmit(&hi2c1, tca_addr[j] << 1, channel, 1, 1000);
 8001466:	f507 6334 	add.w	r3, r7, #2880	; 0xb40
 800146a:	f6a3 323c 	subw	r2, r3, #2876	; 0xb3c
 800146e:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	; 0xb34
 8001472:	4413      	add	r3, r2
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	b29b      	uxth	r3, r3
 8001478:	005b      	lsls	r3, r3, #1
 800147a:	b299      	uxth	r1, r3
 800147c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001480:	9300      	str	r3, [sp, #0]
 8001482:	2301      	movs	r3, #1
 8001484:	f8d7 2b18 	ldr.w	r2, [r7, #2840]	; 0xb18
 8001488:	487f      	ldr	r0, [pc, #508]	; (8001688 <main+0x368>)
 800148a:	f001 fcdd 	bl	8002e48 <HAL_I2C_Master_Transmit>
		    for (int j = 0; j < sizeof(tca_addr); j++) {
 800148e:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	; 0xb34
 8001492:	3301      	adds	r3, #1
 8001494:	f8c7 3b34 	str.w	r3, [r7, #2868]	; 0xb34
 8001498:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	; 0xb34
 800149c:	2b00      	cmp	r3, #0
 800149e:	d0d3      	beq.n	8001448 <main+0x128>
		    }

			Dev = &vl53l0x_s[i];
 80014a0:	f107 0220 	add.w	r2, r7, #32
 80014a4:	f8d7 3b38 	ldr.w	r3, [r7, #2872]	; 0xb38
 80014a8:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80014ac:	fb01 f303 	mul.w	r3, r1, r3
 80014b0:	4413      	add	r3, r2
 80014b2:	f8c7 3b24 	str.w	r3, [r7, #2852]	; 0xb24
			Dev->I2cHandle = &hi2c1;
 80014b6:	f8d7 3b24 	ldr.w	r3, [r7, #2852]	; 0xb24
 80014ba:	4a73      	ldr	r2, [pc, #460]	; (8001688 <main+0x368>)
 80014bc:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
			Dev->I2cDevAddr = VL53L0X_ADDR;
 80014c0:	f8d7 3b24 	ldr.w	r3, [r7, #2852]	; 0xb24
 80014c4:	2252      	movs	r2, #82	; 0x52
 80014c6:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160

			VL53L0X_WaitDeviceBooted( Dev );
 80014ca:	f8d7 0b24 	ldr.w	r0, [r7, #2852]	; 0xb24
 80014ce:	f008 f947 	bl	8009760 <VL53L0X_WaitDeviceBooted>
			VL53L0X_DataInit( Dev );
 80014d2:	f8d7 0b24 	ldr.w	r0, [r7, #2852]	; 0xb24
 80014d6:	f007 fe5d 	bl	8009194 <VL53L0X_DataInit>
			VL53L0X_StaticInit( Dev );
 80014da:	f8d7 0b24 	ldr.w	r0, [r7, #2852]	; 0xb24
 80014de:	f007 ffbd 	bl	800945c <VL53L0X_StaticInit>
			VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_CONTINUOUS_RANGING);
 80014e2:	2101      	movs	r1, #1
 80014e4:	f8d7 0b24 	ldr.w	r0, [r7, #2852]	; 0xb24
 80014e8:	f008 f9d8 	bl	800989c <VL53L0X_SetDeviceMode>
			VL53L0X_PerformRefCalibration( Dev, &VhvSettings, &PhaseCal);
 80014ec:	f607 3211 	addw	r2, r7, #2833	; 0xb11
 80014f0:	f607 3312 	addw	r3, r7, #2834	; 0xb12
 80014f4:	4619      	mov	r1, r3
 80014f6:	f8d7 0b24 	ldr.w	r0, [r7, #2852]	; 0xb24
 80014fa:	f008 fe51 	bl	800a1a0 <VL53L0X_PerformRefCalibration>
			VL53L0X_PerformRefSpadManagement( Dev, &refSpadCount, &isApertureSpads);
 80014fe:	f607 3213 	addw	r2, r7, #2835	; 0xb13
 8001502:	f607 3314 	addw	r3, r7, #2836	; 0xb14
 8001506:	4619      	mov	r1, r3
 8001508:	f8d7 0b24 	ldr.w	r0, [r7, #2852]	; 0xb24
 800150c:	f009 fad6 	bl	800aabc <VL53L0X_PerformRefSpadManagement>
			VL53L0X_SetLimitCheckEnable( Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, 1);
 8001510:	2201      	movs	r2, #1
 8001512:	2100      	movs	r1, #0
 8001514:	f8d7 0b24 	ldr.w	r0, [r7, #2852]	; 0xb24
 8001518:	f008 fc3c 	bl	8009d94 <VL53L0X_SetLimitCheckEnable>
			VL53L0X_SetLimitCheckEnable( Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, 1);
 800151c:	2201      	movs	r2, #1
 800151e:	2101      	movs	r1, #1
 8001520:	f8d7 0b24 	ldr.w	r0, [r7, #2852]	; 0xb24
 8001524:	f008 fc36 	bl	8009d94 <VL53L0X_SetLimitCheckEnable>
			VL53L0X_SetLimitCheckValue( Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, (FixPoint1616_t)(0.1*65536));
 8001528:	f641 1299 	movw	r2, #6553	; 0x1999
 800152c:	2101      	movs	r1, #1
 800152e:	f8d7 0b24 	ldr.w	r0, [r7, #2852]	; 0xb24
 8001532:	f008 fcdf 	bl	8009ef4 <VL53L0X_SetLimitCheckValue>
			VL53L0X_SetLimitCheckValue( Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, (FixPoint1616_t)(60*65536));
 8001536:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800153a:	2100      	movs	r1, #0
 800153c:	f8d7 0b24 	ldr.w	r0, [r7, #2852]	; 0xb24
 8001540:	f008 fcd8 	bl	8009ef4 <VL53L0X_SetLimitCheckValue>
			VL53L0X_SetMeasurementTimingBudgetMicroSeconds( Dev, 33000);
 8001544:	f248 01e8 	movw	r1, #33000	; 0x80e8
 8001548:	f8d7 0b24 	ldr.w	r0, [r7, #2852]	; 0xb24
 800154c:	f008 fa04 	bl	8009958 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
			VL53L0X_SetVcselPulsePeriod( Dev, VL53L0X_VCSEL_PERIOD_PRE_RANGE, 18);
 8001550:	2212      	movs	r2, #18
 8001552:	2100      	movs	r1, #0
 8001554:	f8d7 0b24 	ldr.w	r0, [r7, #2852]	; 0xb24
 8001558:	f008 fa24 	bl	80099a4 <VL53L0X_SetVcselPulsePeriod>
			VL53L0X_SetVcselPulsePeriod( Dev, VL53L0X_VCSEL_PERIOD_FINAL_RANGE, 14);
 800155c:	220e      	movs	r2, #14
 800155e:	2101      	movs	r1, #1
 8001560:	f8d7 0b24 	ldr.w	r0, [r7, #2852]	; 0xb24
 8001564:	f008 fa1e 	bl	80099a4 <VL53L0X_SetVcselPulsePeriod>
			float R = 1.0f;   // Measurement noise covariance
			KalmanFilter_Init(&kalman_filters[i], Q, R);
			// KalmanFilter initializer END //			 */


			MessageLen = sprintf((char*)Message, "%d complete \n\r",i);
 8001568:	f8d7 2b38 	ldr.w	r2, [r7, #2872]	; 0xb38
 800156c:	4947      	ldr	r1, [pc, #284]	; (800168c <main+0x36c>)
 800156e:	4844      	ldr	r0, [pc, #272]	; (8001680 <main+0x360>)
 8001570:	f00d fcea 	bl	800ef48 <siprintf>
 8001574:	4603      	mov	r3, r0
 8001576:	b2da      	uxtb	r2, r3
 8001578:	4b42      	ldr	r3, [pc, #264]	; (8001684 <main+0x364>)
 800157a:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart1, Message, MessageLen, 100);
 800157c:	4b41      	ldr	r3, [pc, #260]	; (8001684 <main+0x364>)
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	b29a      	uxth	r2, r3
 8001582:	2364      	movs	r3, #100	; 0x64
 8001584:	493e      	ldr	r1, [pc, #248]	; (8001680 <main+0x360>)
 8001586:	483c      	ldr	r0, [pc, #240]	; (8001678 <main+0x358>)
 8001588:	f006 fa1a 	bl	80079c0 <HAL_UART_Transmit>
		for (int i = 0; i < NUM_SENSOR; i++) {
 800158c:	f8d7 3b38 	ldr.w	r3, [r7, #2872]	; 0xb38
 8001590:	3301      	adds	r3, #1
 8001592:	f8c7 3b38 	str.w	r3, [r7, #2872]	; 0xb38
 8001596:	f8d7 3b38 	ldr.w	r3, [r7, #2872]	; 0xb38
 800159a:	2b06      	cmp	r3, #6
 800159c:	f77f af3d 	ble.w	800141a <main+0xfa>
  {

//  	  uint32_t start = HAL_GetTick();


		   for (int i = 0; i < NUM_SENSOR; i++) {
 80015a0:	2300      	movs	r3, #0
 80015a2:	f8c7 3b30 	str.w	r3, [r7, #2864]	; 0xb30
 80015a6:	e09e      	b.n	80016e6 <main+0x3c6>

				uint8_t q = i / 8;
 80015a8:	f8d7 3b30 	ldr.w	r3, [r7, #2864]	; 0xb30
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	da00      	bge.n	80015b2 <main+0x292>
 80015b0:	3307      	adds	r3, #7
 80015b2:	10db      	asrs	r3, r3, #3
 80015b4:	f887 3b2b 	strb.w	r3, [r7, #2859]	; 0xb2b
				uint8_t r = i % 8;
 80015b8:	f8d7 3b30 	ldr.w	r3, [r7, #2864]	; 0xb30
 80015bc:	425a      	negs	r2, r3
 80015be:	f003 0307 	and.w	r3, r3, #7
 80015c2:	f002 0207 	and.w	r2, r2, #7
 80015c6:	bf58      	it	pl
 80015c8:	4253      	negpl	r3, r2
 80015ca:	f887 3b2a 	strb.w	r3, [r7, #2858]	; 0xb2a

			    for (int j = 0; j < sizeof(tca_addr); j++) {
 80015ce:	2300      	movs	r3, #0
 80015d0:	f8c7 3b2c 	str.w	r3, [r7, #2860]	; 0xb2c
 80015d4:	e027      	b.n	8001626 <main+0x306>
			        uint8_t *channel = (j == q) ? &tca_ch[r] : &tca_ch_reset;
 80015d6:	f897 3b2b 	ldrb.w	r3, [r7, #2859]	; 0xb2b
 80015da:	f8d7 2b2c 	ldr.w	r2, [r7, #2860]	; 0xb2c
 80015de:	429a      	cmp	r2, r3
 80015e0:	d105      	bne.n	80015ee <main+0x2ce>
 80015e2:	f897 3b2a 	ldrb.w	r3, [r7, #2858]	; 0xb2a
 80015e6:	f107 0208 	add.w	r2, r7, #8
 80015ea:	4413      	add	r3, r2
 80015ec:	e000      	b.n	80015f0 <main+0x2d0>
 80015ee:	1dfb      	adds	r3, r7, #7
 80015f0:	f8c7 3b20 	str.w	r3, [r7, #2848]	; 0xb20
			        HAL_I2C_Master_Transmit(&hi2c1, tca_addr[j] << 1, channel, 1, 1000);
 80015f4:	f507 6334 	add.w	r3, r7, #2880	; 0xb40
 80015f8:	f6a3 323c 	subw	r2, r3, #2876	; 0xb3c
 80015fc:	f8d7 3b2c 	ldr.w	r3, [r7, #2860]	; 0xb2c
 8001600:	4413      	add	r3, r2
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	b29b      	uxth	r3, r3
 8001606:	005b      	lsls	r3, r3, #1
 8001608:	b299      	uxth	r1, r3
 800160a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800160e:	9300      	str	r3, [sp, #0]
 8001610:	2301      	movs	r3, #1
 8001612:	f8d7 2b20 	ldr.w	r2, [r7, #2848]	; 0xb20
 8001616:	481c      	ldr	r0, [pc, #112]	; (8001688 <main+0x368>)
 8001618:	f001 fc16 	bl	8002e48 <HAL_I2C_Master_Transmit>
			    for (int j = 0; j < sizeof(tca_addr); j++) {
 800161c:	f8d7 3b2c 	ldr.w	r3, [r7, #2860]	; 0xb2c
 8001620:	3301      	adds	r3, #1
 8001622:	f8c7 3b2c 	str.w	r3, [r7, #2860]	; 0xb2c
 8001626:	f8d7 3b2c 	ldr.w	r3, [r7, #2860]	; 0xb2c
 800162a:	2b00      	cmp	r3, #0
 800162c:	d0d3      	beq.n	80015d6 <main+0x2b6>
			    }

		       Dev = &vl53l0x_s[i];
 800162e:	f107 0220 	add.w	r2, r7, #32
 8001632:	f8d7 3b30 	ldr.w	r3, [r7, #2864]	; 0xb30
 8001636:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800163a:	fb01 f303 	mul.w	r3, r1, r3
 800163e:	4413      	add	r3, r2
 8001640:	f8c7 3b24 	str.w	r3, [r7, #2852]	; 0xb24

		       VL53L0X_PerformContinuousRangingMeasurement(Dev, &RangingData); // 1500us
 8001644:	4912      	ldr	r1, [pc, #72]	; (8001690 <main+0x370>)
 8001646:	f8d7 0b24 	ldr.w	r0, [r7, #2852]	; 0xb24
 800164a:	f009 fa4c 	bl	800aae6 <VL53L0X_PerformContinuousRangingMeasurement>
		       if (RangingData.RangeStatus == 0) {
 800164e:	4b10      	ldr	r3, [pc, #64]	; (8001690 <main+0x370>)
 8001650:	7e1b      	ldrb	r3, [r3, #24]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d11e      	bne.n	8001694 <main+0x374>
		    	   distance[i] = RangingData.RangeMilliMeter;
 8001656:	4b0e      	ldr	r3, [pc, #56]	; (8001690 <main+0x370>)
 8001658:	8919      	ldrh	r1, [r3, #8]
 800165a:	f507 6334 	add.w	r3, r7, #2880	; 0xb40
 800165e:	f5a3 6333 	sub.w	r3, r3, #2864	; 0xb30
 8001662:	f8d7 2b30 	ldr.w	r2, [r7, #2864]	; 0xb30
 8001666:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 800166a:	e01d      	b.n	80016a8 <main+0x388>
 800166c:	08012b5c 	.word	0x08012b5c
 8001670:	200005f8 	.word	0x200005f8
 8001674:	2000058e 	.word	0x2000058e
 8001678:	20000690 	.word	0x20000690
 800167c:	08012b30 	.word	0x08012b30
 8001680:	20000590 	.word	0x20000590
 8001684:	200005d0 	.word	0x200005d0
 8001688:	200004b8 	.word	0x200004b8
 800168c:	08012b44 	.word	0x08012b44
 8001690:	200005d4 	.word	0x200005d4
		       }else{
		    	   distance[i] = 555;
 8001694:	f507 6334 	add.w	r3, r7, #2880	; 0xb40
 8001698:	f5a3 6333 	sub.w	r3, r3, #2864	; 0xb30
 800169c:	f8d7 2b30 	ldr.w	r2, [r7, #2864]	; 0xb30
 80016a0:	f240 212b 	movw	r1, #555	; 0x22b
 80016a4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		       }

	           MessageLen = sprintf((char*)Message, "%d ",distance[i]);
 80016a8:	f507 6334 	add.w	r3, r7, #2880	; 0xb40
 80016ac:	f5a3 6333 	sub.w	r3, r3, #2864	; 0xb30
 80016b0:	f8d7 2b30 	ldr.w	r2, [r7, #2864]	; 0xb30
 80016b4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80016b8:	461a      	mov	r2, r3
 80016ba:	4916      	ldr	r1, [pc, #88]	; (8001714 <main+0x3f4>)
 80016bc:	4816      	ldr	r0, [pc, #88]	; (8001718 <main+0x3f8>)
 80016be:	f00d fc43 	bl	800ef48 <siprintf>
 80016c2:	4603      	mov	r3, r0
 80016c4:	b2da      	uxtb	r2, r3
 80016c6:	4b15      	ldr	r3, [pc, #84]	; (800171c <main+0x3fc>)
 80016c8:	701a      	strb	r2, [r3, #0]
	           HAL_UART_Transmit(&huart1, Message, MessageLen, 1000);
 80016ca:	4b14      	ldr	r3, [pc, #80]	; (800171c <main+0x3fc>)
 80016cc:	781b      	ldrb	r3, [r3, #0]
 80016ce:	b29a      	uxth	r2, r3
 80016d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016d4:	4910      	ldr	r1, [pc, #64]	; (8001718 <main+0x3f8>)
 80016d6:	4812      	ldr	r0, [pc, #72]	; (8001720 <main+0x400>)
 80016d8:	f006 f972 	bl	80079c0 <HAL_UART_Transmit>
		   for (int i = 0; i < NUM_SENSOR; i++) {
 80016dc:	f8d7 3b30 	ldr.w	r3, [r7, #2864]	; 0xb30
 80016e0:	3301      	adds	r3, #1
 80016e2:	f8c7 3b30 	str.w	r3, [r7, #2864]	; 0xb30
 80016e6:	f8d7 3b30 	ldr.w	r3, [r7, #2864]	; 0xb30
 80016ea:	2b06      	cmp	r3, #6
 80016ec:	f77f af5c 	ble.w	80015a8 <main+0x288>
//		for(int i=0; i<3; i++){
//			MessageLen = sprintf((char*)Message, "%.8f ",r5[i][0]);
//			HAL_UART_Transmit(&huart1, Message, MessageLen, 1000);
//		}

		MessageLen = sprintf((char*)Message, "\n");
 80016f0:	490c      	ldr	r1, [pc, #48]	; (8001724 <main+0x404>)
 80016f2:	4809      	ldr	r0, [pc, #36]	; (8001718 <main+0x3f8>)
 80016f4:	f00d fc28 	bl	800ef48 <siprintf>
 80016f8:	4603      	mov	r3, r0
 80016fa:	b2da      	uxtb	r2, r3
 80016fc:	4b07      	ldr	r3, [pc, #28]	; (800171c <main+0x3fc>)
 80016fe:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart1, Message, MessageLen, 1000);
 8001700:	4b06      	ldr	r3, [pc, #24]	; (800171c <main+0x3fc>)
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	b29a      	uxth	r2, r3
 8001706:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800170a:	4903      	ldr	r1, [pc, #12]	; (8001718 <main+0x3f8>)
 800170c:	4804      	ldr	r0, [pc, #16]	; (8001720 <main+0x400>)
 800170e:	f006 f957 	bl	80079c0 <HAL_UART_Transmit>
		   for (int i = 0; i < NUM_SENSOR; i++) {
 8001712:	e745      	b.n	80015a0 <main+0x280>
 8001714:	08012b54 	.word	0x08012b54
 8001718:	20000590 	.word	0x20000590
 800171c:	200005d0 	.word	0x200005d0
 8001720:	20000690 	.word	0x20000690
 8001724:	08012b58 	.word	0x08012b58

08001728 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b094      	sub	sp, #80	; 0x50
 800172c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800172e:	f107 0320 	add.w	r3, r7, #32
 8001732:	2230      	movs	r2, #48	; 0x30
 8001734:	2100      	movs	r1, #0
 8001736:	4618      	mov	r0, r3
 8001738:	f00c fd7e 	bl	800e238 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800173c:	f107 030c 	add.w	r3, r7, #12
 8001740:	2200      	movs	r2, #0
 8001742:	601a      	str	r2, [r3, #0]
 8001744:	605a      	str	r2, [r3, #4]
 8001746:	609a      	str	r2, [r3, #8]
 8001748:	60da      	str	r2, [r3, #12]
 800174a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800174c:	4b2b      	ldr	r3, [pc, #172]	; (80017fc <SystemClock_Config+0xd4>)
 800174e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001750:	4a2a      	ldr	r2, [pc, #168]	; (80017fc <SystemClock_Config+0xd4>)
 8001752:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001756:	6413      	str	r3, [r2, #64]	; 0x40
 8001758:	4b28      	ldr	r3, [pc, #160]	; (80017fc <SystemClock_Config+0xd4>)
 800175a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800175c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001760:	60bb      	str	r3, [r7, #8]
 8001762:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001764:	4b26      	ldr	r3, [pc, #152]	; (8001800 <SystemClock_Config+0xd8>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a25      	ldr	r2, [pc, #148]	; (8001800 <SystemClock_Config+0xd8>)
 800176a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800176e:	6013      	str	r3, [r2, #0]
 8001770:	4b23      	ldr	r3, [pc, #140]	; (8001800 <SystemClock_Config+0xd8>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001778:	607b      	str	r3, [r7, #4]
 800177a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800177c:	2301      	movs	r3, #1
 800177e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001780:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001784:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001786:	2302      	movs	r3, #2
 8001788:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800178a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800178e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001790:	2319      	movs	r3, #25
 8001792:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 432;
 8001794:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8001798:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800179a:	2302      	movs	r3, #2
 800179c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800179e:	2302      	movs	r3, #2
 80017a0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017a2:	f107 0320 	add.w	r3, r7, #32
 80017a6:	4618      	mov	r0, r3
 80017a8:	f002 f928 	bl	80039fc <HAL_RCC_OscConfig>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d001      	beq.n	80017b6 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80017b2:	f000 f8b7 	bl	8001924 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80017b6:	f002 f8d1 	bl	800395c <HAL_PWREx_EnableOverDrive>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d001      	beq.n	80017c4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80017c0:	f000 f8b0 	bl	8001924 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017c4:	230f      	movs	r3, #15
 80017c6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017c8:	2302      	movs	r3, #2
 80017ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017cc:	2300      	movs	r3, #0
 80017ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80017d0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80017d4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80017d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017da:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80017dc:	f107 030c 	add.w	r3, r7, #12
 80017e0:	2107      	movs	r1, #7
 80017e2:	4618      	mov	r0, r3
 80017e4:	f002 fc64 	bl	80040b0 <HAL_RCC_ClockConfig>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d001      	beq.n	80017f2 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80017ee:	f000 f899 	bl	8001924 <Error_Handler>
  }
}
 80017f2:	bf00      	nop
 80017f4:	3750      	adds	r7, #80	; 0x50
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	40023800 	.word	0x40023800
 8001800:	40007000 	.word	0x40007000

08001804 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0
  /* USART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001808:	2200      	movs	r2, #0
 800180a:	2100      	movs	r1, #0
 800180c:	2025      	movs	r0, #37	; 0x25
 800180e:	f000 fd43 	bl	8002298 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001812:	2025      	movs	r0, #37	; 0x25
 8001814:	f000 fd6c 	bl	80022f0 <HAL_NVIC_EnableIRQ>
  /* TIM7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM7_IRQn, 1, 0);
 8001818:	2200      	movs	r2, #0
 800181a:	2101      	movs	r1, #1
 800181c:	2037      	movs	r0, #55	; 0x37
 800181e:	f000 fd3b 	bl	8002298 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001822:	2037      	movs	r0, #55	; 0x37
 8001824:	f000 fd64 	bl	80022f0 <HAL_NVIC_EnableIRQ>
}
 8001828:	bf00      	nop
 800182a:	bd80      	pop	{r7, pc}

0800182c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART1)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a15      	ldr	r2, [pc, #84]	; (8001890 <HAL_UART_RxCpltCallback+0x64>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d124      	bne.n	8001888 <HAL_UART_RxCpltCallback+0x5c>
  {
    if (rxData != '\n' && rxBufferIndex < RX_BUFFER_SIZE - 1)
 800183e:	4b15      	ldr	r3, [pc, #84]	; (8001894 <HAL_UART_RxCpltCallback+0x68>)
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	2b0a      	cmp	r3, #10
 8001844:	d00f      	beq.n	8001866 <HAL_UART_RxCpltCallback+0x3a>
 8001846:	4b14      	ldr	r3, [pc, #80]	; (8001898 <HAL_UART_RxCpltCallback+0x6c>)
 8001848:	881b      	ldrh	r3, [r3, #0]
 800184a:	2b7e      	cmp	r3, #126	; 0x7e
 800184c:	d80b      	bhi.n	8001866 <HAL_UART_RxCpltCallback+0x3a>
    {
      rxBuffer[rxBufferIndex++] = rxData;
 800184e:	4b12      	ldr	r3, [pc, #72]	; (8001898 <HAL_UART_RxCpltCallback+0x6c>)
 8001850:	881b      	ldrh	r3, [r3, #0]
 8001852:	1c5a      	adds	r2, r3, #1
 8001854:	b291      	uxth	r1, r2
 8001856:	4a10      	ldr	r2, [pc, #64]	; (8001898 <HAL_UART_RxCpltCallback+0x6c>)
 8001858:	8011      	strh	r1, [r2, #0]
 800185a:	461a      	mov	r2, r3
 800185c:	4b0d      	ldr	r3, [pc, #52]	; (8001894 <HAL_UART_RxCpltCallback+0x68>)
 800185e:	7819      	ldrb	r1, [r3, #0]
 8001860:	4b0e      	ldr	r3, [pc, #56]	; (800189c <HAL_UART_RxCpltCallback+0x70>)
 8001862:	5499      	strb	r1, [r3, r2]
 8001864:	e00b      	b.n	800187e <HAL_UART_RxCpltCallback+0x52>
    }
    else
    {
      rxBuffer[rxBufferIndex] = '\0';
 8001866:	4b0c      	ldr	r3, [pc, #48]	; (8001898 <HAL_UART_RxCpltCallback+0x6c>)
 8001868:	881b      	ldrh	r3, [r3, #0]
 800186a:	461a      	mov	r2, r3
 800186c:	4b0b      	ldr	r3, [pc, #44]	; (800189c <HAL_UART_RxCpltCallback+0x70>)
 800186e:	2100      	movs	r1, #0
 8001870:	5499      	strb	r1, [r3, r2]
      rxBufferIndex = 0;
 8001872:	4b09      	ldr	r3, [pc, #36]	; (8001898 <HAL_UART_RxCpltCallback+0x6c>)
 8001874:	2200      	movs	r2, #0
 8001876:	801a      	strh	r2, [r3, #0]
      receivedFlag = 1; // 문자?��?�� ?��?��?��?��?��?�� ?��리는 ?��?��그�?? ?��?��?��?��?��.
 8001878:	4b09      	ldr	r3, [pc, #36]	; (80018a0 <HAL_UART_RxCpltCallback+0x74>)
 800187a:	2201      	movs	r2, #1
 800187c:	701a      	strb	r2, [r3, #0]
    }
    HAL_UART_Receive_IT(&huart1, &rxData, 1);
 800187e:	2201      	movs	r2, #1
 8001880:	4904      	ldr	r1, [pc, #16]	; (8001894 <HAL_UART_RxCpltCallback+0x68>)
 8001882:	4808      	ldr	r0, [pc, #32]	; (80018a4 <HAL_UART_RxCpltCallback+0x78>)
 8001884:	f006 f91f 	bl	8007ac6 <HAL_UART_Receive_IT>
  }
}
 8001888:	bf00      	nop
 800188a:	3708      	adds	r7, #8
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}
 8001890:	40011000 	.word	0x40011000
 8001894:	2000058e 	.word	0x2000058e
 8001898:	2000058c 	.word	0x2000058c
 800189c:	2000050c 	.word	0x2000050c
 80018a0:	2000058f 	.word	0x2000058f
 80018a4:	20000690 	.word	0x20000690

080018a8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	4603      	mov	r3, r0
 80018b0:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == GPIO_PIN_8) // A?��?�� ???�� ?��?��?��?��
 80018b2:	88fb      	ldrh	r3, [r7, #6]
 80018b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80018b8:	d113      	bne.n	80018e2 <HAL_GPIO_EXTI_Callback+0x3a>
  {
    if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15)) // B?�� 값을 ?��?��
 80018ba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80018be:	4816      	ldr	r0, [pc, #88]	; (8001918 <HAL_GPIO_EXTI_Callback+0x70>)
 80018c0:	f001 f93c 	bl	8002b3c <HAL_GPIO_ReadPin>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d005      	beq.n	80018d6 <HAL_GPIO_EXTI_Callback+0x2e>
    {
      encoderCount++;
 80018ca:	4b14      	ldr	r3, [pc, #80]	; (800191c <HAL_GPIO_EXTI_Callback+0x74>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	3301      	adds	r3, #1
 80018d0:	4a12      	ldr	r2, [pc, #72]	; (800191c <HAL_GPIO_EXTI_Callback+0x74>)
 80018d2:	6013      	str	r3, [r2, #0]
    else
    {
      encoderCount++;
    }
  }
}
 80018d4:	e01c      	b.n	8001910 <HAL_GPIO_EXTI_Callback+0x68>
      encoderCount--;
 80018d6:	4b11      	ldr	r3, [pc, #68]	; (800191c <HAL_GPIO_EXTI_Callback+0x74>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	3b01      	subs	r3, #1
 80018dc:	4a0f      	ldr	r2, [pc, #60]	; (800191c <HAL_GPIO_EXTI_Callback+0x74>)
 80018de:	6013      	str	r3, [r2, #0]
}
 80018e0:	e016      	b.n	8001910 <HAL_GPIO_EXTI_Callback+0x68>
  else if (GPIO_Pin == GPIO_PIN_15) // B?��?�� ???�� ?��?��?��?��
 80018e2:	88fb      	ldrh	r3, [r7, #6]
 80018e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80018e8:	d112      	bne.n	8001910 <HAL_GPIO_EXTI_Callback+0x68>
    if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8)) // A?�� 값을 ?��?��
 80018ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018ee:	480c      	ldr	r0, [pc, #48]	; (8001920 <HAL_GPIO_EXTI_Callback+0x78>)
 80018f0:	f001 f924 	bl	8002b3c <HAL_GPIO_ReadPin>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d005      	beq.n	8001906 <HAL_GPIO_EXTI_Callback+0x5e>
      encoderCount--;
 80018fa:	4b08      	ldr	r3, [pc, #32]	; (800191c <HAL_GPIO_EXTI_Callback+0x74>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	3b01      	subs	r3, #1
 8001900:	4a06      	ldr	r2, [pc, #24]	; (800191c <HAL_GPIO_EXTI_Callback+0x74>)
 8001902:	6013      	str	r3, [r2, #0]
}
 8001904:	e004      	b.n	8001910 <HAL_GPIO_EXTI_Callback+0x68>
      encoderCount++;
 8001906:	4b05      	ldr	r3, [pc, #20]	; (800191c <HAL_GPIO_EXTI_Callback+0x74>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	3301      	adds	r3, #1
 800190c:	4a03      	ldr	r2, [pc, #12]	; (800191c <HAL_GPIO_EXTI_Callback+0x74>)
 800190e:	6013      	str	r3, [r2, #0]
}
 8001910:	bf00      	nop
 8001912:	3708      	adds	r7, #8
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}
 8001918:	40020400 	.word	0x40020400
 800191c:	200005f0 	.word	0x200005f0
 8001920:	40020000 	.word	0x40020000

08001924 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001928:	b672      	cpsid	i
}
 800192a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800192c:	e7fe      	b.n	800192c <Error_Handler+0x8>

0800192e <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 800192e:	b480      	push	{r7}
 8001930:	b083      	sub	sp, #12
 8001932:	af00      	add	r7, sp, #0
 8001934:	6078      	str	r0, [r7, #4]
 8001936:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8001938:	bf00      	nop
 800193a:	370c      	adds	r7, #12
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr

08001944 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001944:	b480      	push	{r7}
 8001946:	b083      	sub	sp, #12
 8001948:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800194a:	4b0f      	ldr	r3, [pc, #60]	; (8001988 <HAL_MspInit+0x44>)
 800194c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194e:	4a0e      	ldr	r2, [pc, #56]	; (8001988 <HAL_MspInit+0x44>)
 8001950:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001954:	6413      	str	r3, [r2, #64]	; 0x40
 8001956:	4b0c      	ldr	r3, [pc, #48]	; (8001988 <HAL_MspInit+0x44>)
 8001958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800195a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800195e:	607b      	str	r3, [r7, #4]
 8001960:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001962:	4b09      	ldr	r3, [pc, #36]	; (8001988 <HAL_MspInit+0x44>)
 8001964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001966:	4a08      	ldr	r2, [pc, #32]	; (8001988 <HAL_MspInit+0x44>)
 8001968:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800196c:	6453      	str	r3, [r2, #68]	; 0x44
 800196e:	4b06      	ldr	r3, [pc, #24]	; (8001988 <HAL_MspInit+0x44>)
 8001970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001972:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001976:	603b      	str	r3, [r7, #0]
 8001978:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800197a:	bf00      	nop
 800197c:	370c      	adds	r7, #12
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr
 8001986:	bf00      	nop
 8001988:	40023800 	.word	0x40023800

0800198c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001990:	e7fe      	b.n	8001990 <NMI_Handler+0x4>

08001992 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001992:	b480      	push	{r7}
 8001994:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001996:	e7fe      	b.n	8001996 <HardFault_Handler+0x4>

08001998 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800199c:	e7fe      	b.n	800199c <MemManage_Handler+0x4>

0800199e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800199e:	b480      	push	{r7}
 80019a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019a2:	e7fe      	b.n	80019a2 <BusFault_Handler+0x4>

080019a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019a8:	e7fe      	b.n	80019a8 <UsageFault_Handler+0x4>

080019aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019aa:	b480      	push	{r7}
 80019ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019ae:	bf00      	nop
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr

080019b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019bc:	bf00      	nop
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr

080019c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019c6:	b480      	push	{r7}
 80019c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019ca:	bf00      	nop
 80019cc:	46bd      	mov	sp, r7
 80019ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d2:	4770      	bx	lr

080019d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019d8:	f000 fb2a 	bl	8002030 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019dc:	bf00      	nop
 80019de:	bd80      	pop	{r7, pc}

080019e0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80019e4:	f44f 7080 	mov.w	r0, #256	; 0x100
 80019e8:	f001 f8f4 	bl	8002bd4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80019ec:	bf00      	nop
 80019ee:	bd80      	pop	{r7, pc}

080019f0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80019f4:	4802      	ldr	r0, [pc, #8]	; (8001a00 <USART1_IRQHandler+0x10>)
 80019f6:	f006 f8ab 	bl	8007b50 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80019fa:	bf00      	nop
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	20000690 	.word	0x20000690

08001a04 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8001a08:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001a0c:	f001 f8e2 	bl	8002bd4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001a10:	bf00      	nop
 8001a12:	bd80      	pop	{r7, pc}

08001a14 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001a18:	4802      	ldr	r0, [pc, #8]	; (8001a24 <TIM7_IRQHandler+0x10>)
 8001a1a:	f004 f9e3 	bl	8005de4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001a1e:	bf00      	nop
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	20000644 	.word	0x20000644

08001a28 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
  return 1;
 8001a2c:	2301      	movs	r3, #1
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr

08001a38 <_kill>:

int _kill(int pid, int sig)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
 8001a40:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001a42:	f00c fbc1 	bl	800e1c8 <__errno>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2216      	movs	r2, #22
 8001a4a:	601a      	str	r2, [r3, #0]
  return -1;
 8001a4c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	3708      	adds	r7, #8
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}

08001a58 <_exit>:

void _exit (int status)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b082      	sub	sp, #8
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001a60:	f04f 31ff 	mov.w	r1, #4294967295
 8001a64:	6878      	ldr	r0, [r7, #4]
 8001a66:	f7ff ffe7 	bl	8001a38 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001a6a:	e7fe      	b.n	8001a6a <_exit+0x12>

08001a6c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b086      	sub	sp, #24
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	60f8      	str	r0, [r7, #12]
 8001a74:	60b9      	str	r1, [r7, #8]
 8001a76:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a78:	2300      	movs	r3, #0
 8001a7a:	617b      	str	r3, [r7, #20]
 8001a7c:	e00a      	b.n	8001a94 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a7e:	f3af 8000 	nop.w
 8001a82:	4601      	mov	r1, r0
 8001a84:	68bb      	ldr	r3, [r7, #8]
 8001a86:	1c5a      	adds	r2, r3, #1
 8001a88:	60ba      	str	r2, [r7, #8]
 8001a8a:	b2ca      	uxtb	r2, r1
 8001a8c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a8e:	697b      	ldr	r3, [r7, #20]
 8001a90:	3301      	adds	r3, #1
 8001a92:	617b      	str	r3, [r7, #20]
 8001a94:	697a      	ldr	r2, [r7, #20]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	dbf0      	blt.n	8001a7e <_read+0x12>
  }

  return len;
 8001a9c:	687b      	ldr	r3, [r7, #4]
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3718      	adds	r7, #24
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}

08001aa6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001aa6:	b580      	push	{r7, lr}
 8001aa8:	b086      	sub	sp, #24
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	60f8      	str	r0, [r7, #12]
 8001aae:	60b9      	str	r1, [r7, #8]
 8001ab0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	617b      	str	r3, [r7, #20]
 8001ab6:	e009      	b.n	8001acc <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001ab8:	68bb      	ldr	r3, [r7, #8]
 8001aba:	1c5a      	adds	r2, r3, #1
 8001abc:	60ba      	str	r2, [r7, #8]
 8001abe:	781b      	ldrb	r3, [r3, #0]
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	3301      	adds	r3, #1
 8001aca:	617b      	str	r3, [r7, #20]
 8001acc:	697a      	ldr	r2, [r7, #20]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	dbf1      	blt.n	8001ab8 <_write+0x12>
  }
  return len;
 8001ad4:	687b      	ldr	r3, [r7, #4]
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3718      	adds	r7, #24
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}

08001ade <_close>:

int _close(int file)
{
 8001ade:	b480      	push	{r7}
 8001ae0:	b083      	sub	sp, #12
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ae6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	370c      	adds	r7, #12
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr

08001af6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001af6:	b480      	push	{r7}
 8001af8:	b083      	sub	sp, #12
 8001afa:	af00      	add	r7, sp, #0
 8001afc:	6078      	str	r0, [r7, #4]
 8001afe:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b06:	605a      	str	r2, [r3, #4]
  return 0;
 8001b08:	2300      	movs	r3, #0
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	370c      	adds	r7, #12
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr

08001b16 <_isatty>:

int _isatty(int file)
{
 8001b16:	b480      	push	{r7}
 8001b18:	b083      	sub	sp, #12
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b1e:	2301      	movs	r3, #1
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	370c      	adds	r7, #12
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr

08001b2c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b085      	sub	sp, #20
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	60f8      	str	r0, [r7, #12]
 8001b34:	60b9      	str	r1, [r7, #8]
 8001b36:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b38:	2300      	movs	r3, #0
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	3714      	adds	r7, #20
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr
	...

08001b48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b086      	sub	sp, #24
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b50:	4a14      	ldr	r2, [pc, #80]	; (8001ba4 <_sbrk+0x5c>)
 8001b52:	4b15      	ldr	r3, [pc, #84]	; (8001ba8 <_sbrk+0x60>)
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b5c:	4b13      	ldr	r3, [pc, #76]	; (8001bac <_sbrk+0x64>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d102      	bne.n	8001b6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b64:	4b11      	ldr	r3, [pc, #68]	; (8001bac <_sbrk+0x64>)
 8001b66:	4a12      	ldr	r2, [pc, #72]	; (8001bb0 <_sbrk+0x68>)
 8001b68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b6a:	4b10      	ldr	r3, [pc, #64]	; (8001bac <_sbrk+0x64>)
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	4413      	add	r3, r2
 8001b72:	693a      	ldr	r2, [r7, #16]
 8001b74:	429a      	cmp	r2, r3
 8001b76:	d207      	bcs.n	8001b88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b78:	f00c fb26 	bl	800e1c8 <__errno>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	220c      	movs	r2, #12
 8001b80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b82:	f04f 33ff 	mov.w	r3, #4294967295
 8001b86:	e009      	b.n	8001b9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b88:	4b08      	ldr	r3, [pc, #32]	; (8001bac <_sbrk+0x64>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b8e:	4b07      	ldr	r3, [pc, #28]	; (8001bac <_sbrk+0x64>)
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	4413      	add	r3, r2
 8001b96:	4a05      	ldr	r2, [pc, #20]	; (8001bac <_sbrk+0x64>)
 8001b98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	3718      	adds	r7, #24
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	20050000 	.word	0x20050000
 8001ba8:	00000400 	.word	0x00000400
 8001bac:	200005f4 	.word	0x200005f4
 8001bb0:	20000770 	.word	0x20000770

08001bb4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001bb8:	4b06      	ldr	r3, [pc, #24]	; (8001bd4 <SystemInit+0x20>)
 8001bba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bbe:	4a05      	ldr	r2, [pc, #20]	; (8001bd4 <SystemInit+0x20>)
 8001bc0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001bc4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bc8:	bf00      	nop
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr
 8001bd2:	bf00      	nop
 8001bd4:	e000ed00 	.word	0xe000ed00

08001bd8 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim7;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b08e      	sub	sp, #56	; 0x38
 8001bdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bde:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001be2:	2200      	movs	r2, #0
 8001be4:	601a      	str	r2, [r3, #0]
 8001be6:	605a      	str	r2, [r3, #4]
 8001be8:	609a      	str	r2, [r3, #8]
 8001bea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bec:	f107 031c 	add.w	r3, r7, #28
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	601a      	str	r2, [r3, #0]
 8001bf4:	605a      	str	r2, [r3, #4]
 8001bf6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bf8:	463b      	mov	r3, r7
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	601a      	str	r2, [r3, #0]
 8001bfe:	605a      	str	r2, [r3, #4]
 8001c00:	609a      	str	r2, [r3, #8]
 8001c02:	60da      	str	r2, [r3, #12]
 8001c04:	611a      	str	r2, [r3, #16]
 8001c06:	615a      	str	r2, [r3, #20]
 8001c08:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001c0a:	4b2d      	ldr	r3, [pc, #180]	; (8001cc0 <MX_TIM2_Init+0xe8>)
 8001c0c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c10:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10800-1;
 8001c12:	4b2b      	ldr	r3, [pc, #172]	; (8001cc0 <MX_TIM2_Init+0xe8>)
 8001c14:	f642 222f 	movw	r2, #10799	; 0x2a2f
 8001c18:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c1a:	4b29      	ldr	r3, [pc, #164]	; (8001cc0 <MX_TIM2_Init+0xe8>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 50-1;
 8001c20:	4b27      	ldr	r3, [pc, #156]	; (8001cc0 <MX_TIM2_Init+0xe8>)
 8001c22:	2231      	movs	r2, #49	; 0x31
 8001c24:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c26:	4b26      	ldr	r3, [pc, #152]	; (8001cc0 <MX_TIM2_Init+0xe8>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c2c:	4b24      	ldr	r3, [pc, #144]	; (8001cc0 <MX_TIM2_Init+0xe8>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001c32:	4823      	ldr	r0, [pc, #140]	; (8001cc0 <MX_TIM2_Init+0xe8>)
 8001c34:	f003 fcc2 	bl	80055bc <HAL_TIM_Base_Init>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d001      	beq.n	8001c42 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001c3e:	f7ff fe71 	bl	8001924 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c46:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001c48:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	481c      	ldr	r0, [pc, #112]	; (8001cc0 <MX_TIM2_Init+0xe8>)
 8001c50:	f004 fc50 	bl	80064f4 <HAL_TIM_ConfigClockSource>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d001      	beq.n	8001c5e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001c5a:	f7ff fe63 	bl	8001924 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001c5e:	4818      	ldr	r0, [pc, #96]	; (8001cc0 <MX_TIM2_Init+0xe8>)
 8001c60:	f003 fdcc 	bl	80057fc <HAL_TIM_PWM_Init>
 8001c64:	4603      	mov	r3, r0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d001      	beq.n	8001c6e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001c6a:	f7ff fe5b 	bl	8001924 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c72:	2300      	movs	r3, #0
 8001c74:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c76:	f107 031c 	add.w	r3, r7, #28
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	4810      	ldr	r0, [pc, #64]	; (8001cc0 <MX_TIM2_Init+0xe8>)
 8001c7e:	f005 fc69 	bl	8007554 <HAL_TIMEx_MasterConfigSynchronization>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d001      	beq.n	8001c8c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001c88:	f7ff fe4c 	bl	8001924 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c8c:	2360      	movs	r3, #96	; 0x60
 8001c8e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001c90:	2300      	movs	r3, #0
 8001c92:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c94:	2300      	movs	r3, #0
 8001c96:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c9c:	463b      	mov	r3, r7
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	4807      	ldr	r0, [pc, #28]	; (8001cc0 <MX_TIM2_Init+0xe8>)
 8001ca4:	f004 f9be 	bl	8006024 <HAL_TIM_PWM_ConfigChannel>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d001      	beq.n	8001cb2 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001cae:	f7ff fe39 	bl	8001924 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001cb2:	4803      	ldr	r0, [pc, #12]	; (8001cc0 <MX_TIM2_Init+0xe8>)
 8001cb4:	f000 f86e 	bl	8001d94 <HAL_TIM_MspPostInit>

}
 8001cb8:	bf00      	nop
 8001cba:	3738      	adds	r7, #56	; 0x38
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	200005f8 	.word	0x200005f8

08001cc4 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b084      	sub	sp, #16
 8001cc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cca:	1d3b      	adds	r3, r7, #4
 8001ccc:	2200      	movs	r2, #0
 8001cce:	601a      	str	r2, [r3, #0]
 8001cd0:	605a      	str	r2, [r3, #4]
 8001cd2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001cd4:	4b14      	ldr	r3, [pc, #80]	; (8001d28 <MX_TIM7_Init+0x64>)
 8001cd6:	4a15      	ldr	r2, [pc, #84]	; (8001d2c <MX_TIM7_Init+0x68>)
 8001cd8:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 10800-1;
 8001cda:	4b13      	ldr	r3, [pc, #76]	; (8001d28 <MX_TIM7_Init+0x64>)
 8001cdc:	f642 222f 	movw	r2, #10799	; 0x2a2f
 8001ce0:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ce2:	4b11      	ldr	r3, [pc, #68]	; (8001d28 <MX_TIM7_Init+0x64>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 50-1;
 8001ce8:	4b0f      	ldr	r3, [pc, #60]	; (8001d28 <MX_TIM7_Init+0x64>)
 8001cea:	2231      	movs	r2, #49	; 0x31
 8001cec:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cee:	4b0e      	ldr	r3, [pc, #56]	; (8001d28 <MX_TIM7_Init+0x64>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001cf4:	480c      	ldr	r0, [pc, #48]	; (8001d28 <MX_TIM7_Init+0x64>)
 8001cf6:	f003 fc61 	bl	80055bc <HAL_TIM_Base_Init>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d001      	beq.n	8001d04 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8001d00:	f7ff fe10 	bl	8001924 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d04:	2300      	movs	r3, #0
 8001d06:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001d0c:	1d3b      	adds	r3, r7, #4
 8001d0e:	4619      	mov	r1, r3
 8001d10:	4805      	ldr	r0, [pc, #20]	; (8001d28 <MX_TIM7_Init+0x64>)
 8001d12:	f005 fc1f 	bl	8007554 <HAL_TIMEx_MasterConfigSynchronization>
 8001d16:	4603      	mov	r3, r0
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d001      	beq.n	8001d20 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8001d1c:	f7ff fe02 	bl	8001924 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001d20:	bf00      	nop
 8001d22:	3710      	adds	r7, #16
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	20000644 	.word	0x20000644
 8001d2c:	40001400 	.word	0x40001400

08001d30 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b085      	sub	sp, #20
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d40:	d10c      	bne.n	8001d5c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d42:	4b12      	ldr	r3, [pc, #72]	; (8001d8c <HAL_TIM_Base_MspInit+0x5c>)
 8001d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d46:	4a11      	ldr	r2, [pc, #68]	; (8001d8c <HAL_TIM_Base_MspInit+0x5c>)
 8001d48:	f043 0301 	orr.w	r3, r3, #1
 8001d4c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d4e:	4b0f      	ldr	r3, [pc, #60]	; (8001d8c <HAL_TIM_Base_MspInit+0x5c>)
 8001d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d52:	f003 0301 	and.w	r3, r3, #1
 8001d56:	60fb      	str	r3, [r7, #12]
 8001d58:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM7_CLK_ENABLE();
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8001d5a:	e010      	b.n	8001d7e <HAL_TIM_Base_MspInit+0x4e>
  else if(tim_baseHandle->Instance==TIM7)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a0b      	ldr	r2, [pc, #44]	; (8001d90 <HAL_TIM_Base_MspInit+0x60>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d10b      	bne.n	8001d7e <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001d66:	4b09      	ldr	r3, [pc, #36]	; (8001d8c <HAL_TIM_Base_MspInit+0x5c>)
 8001d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6a:	4a08      	ldr	r2, [pc, #32]	; (8001d8c <HAL_TIM_Base_MspInit+0x5c>)
 8001d6c:	f043 0320 	orr.w	r3, r3, #32
 8001d70:	6413      	str	r3, [r2, #64]	; 0x40
 8001d72:	4b06      	ldr	r3, [pc, #24]	; (8001d8c <HAL_TIM_Base_MspInit+0x5c>)
 8001d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d76:	f003 0320 	and.w	r3, r3, #32
 8001d7a:	60bb      	str	r3, [r7, #8]
 8001d7c:	68bb      	ldr	r3, [r7, #8]
}
 8001d7e:	bf00      	nop
 8001d80:	3714      	adds	r7, #20
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr
 8001d8a:	bf00      	nop
 8001d8c:	40023800 	.word	0x40023800
 8001d90:	40001400 	.word	0x40001400

08001d94 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b088      	sub	sp, #32
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d9c:	f107 030c 	add.w	r3, r7, #12
 8001da0:	2200      	movs	r2, #0
 8001da2:	601a      	str	r2, [r3, #0]
 8001da4:	605a      	str	r2, [r3, #4]
 8001da6:	609a      	str	r2, [r3, #8]
 8001da8:	60da      	str	r2, [r3, #12]
 8001daa:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001db4:	d11c      	bne.n	8001df0 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001db6:	4b10      	ldr	r3, [pc, #64]	; (8001df8 <HAL_TIM_MspPostInit+0x64>)
 8001db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dba:	4a0f      	ldr	r2, [pc, #60]	; (8001df8 <HAL_TIM_MspPostInit+0x64>)
 8001dbc:	f043 0301 	orr.w	r3, r3, #1
 8001dc0:	6313      	str	r3, [r2, #48]	; 0x30
 8001dc2:	4b0d      	ldr	r3, [pc, #52]	; (8001df8 <HAL_TIM_MspPostInit+0x64>)
 8001dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc6:	f003 0301 	and.w	r3, r3, #1
 8001dca:	60bb      	str	r3, [r7, #8]
 8001dcc:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001dce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001dd2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dd4:	2302      	movs	r3, #2
 8001dd6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001de0:	2301      	movs	r3, #1
 8001de2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001de4:	f107 030c 	add.w	r3, r7, #12
 8001de8:	4619      	mov	r1, r3
 8001dea:	4804      	ldr	r0, [pc, #16]	; (8001dfc <HAL_TIM_MspPostInit+0x68>)
 8001dec:	f000 fb36 	bl	800245c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001df0:	bf00      	nop
 8001df2:	3720      	adds	r7, #32
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	40023800 	.word	0x40023800
 8001dfc:	40020000 	.word	0x40020000

08001e00 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001e04:	4b14      	ldr	r3, [pc, #80]	; (8001e58 <MX_USART1_UART_Init+0x58>)
 8001e06:	4a15      	ldr	r2, [pc, #84]	; (8001e5c <MX_USART1_UART_Init+0x5c>)
 8001e08:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001e0a:	4b13      	ldr	r3, [pc, #76]	; (8001e58 <MX_USART1_UART_Init+0x58>)
 8001e0c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e10:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001e12:	4b11      	ldr	r3, [pc, #68]	; (8001e58 <MX_USART1_UART_Init+0x58>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001e18:	4b0f      	ldr	r3, [pc, #60]	; (8001e58 <MX_USART1_UART_Init+0x58>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001e1e:	4b0e      	ldr	r3, [pc, #56]	; (8001e58 <MX_USART1_UART_Init+0x58>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001e24:	4b0c      	ldr	r3, [pc, #48]	; (8001e58 <MX_USART1_UART_Init+0x58>)
 8001e26:	220c      	movs	r2, #12
 8001e28:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e2a:	4b0b      	ldr	r3, [pc, #44]	; (8001e58 <MX_USART1_UART_Init+0x58>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e30:	4b09      	ldr	r3, [pc, #36]	; (8001e58 <MX_USART1_UART_Init+0x58>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e36:	4b08      	ldr	r3, [pc, #32]	; (8001e58 <MX_USART1_UART_Init+0x58>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e3c:	4b06      	ldr	r3, [pc, #24]	; (8001e58 <MX_USART1_UART_Init+0x58>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001e42:	4805      	ldr	r0, [pc, #20]	; (8001e58 <MX_USART1_UART_Init+0x58>)
 8001e44:	f005 fcfc 	bl	8007840 <HAL_UART_Init>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d001      	beq.n	8001e52 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001e4e:	f7ff fd69 	bl	8001924 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001e52:	bf00      	nop
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	20000690 	.word	0x20000690
 8001e5c:	40011000 	.word	0x40011000

08001e60 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b0ac      	sub	sp, #176	; 0xb0
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e68:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	601a      	str	r2, [r3, #0]
 8001e70:	605a      	str	r2, [r3, #4]
 8001e72:	609a      	str	r2, [r3, #8]
 8001e74:	60da      	str	r2, [r3, #12]
 8001e76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e78:	f107 0318 	add.w	r3, r7, #24
 8001e7c:	2284      	movs	r2, #132	; 0x84
 8001e7e:	2100      	movs	r1, #0
 8001e80:	4618      	mov	r0, r3
 8001e82:	f00c f9d9 	bl	800e238 <memset>
  if(uartHandle->Instance==USART1)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a32      	ldr	r2, [pc, #200]	; (8001f54 <HAL_UART_MspInit+0xf4>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d15c      	bne.n	8001f4a <HAL_UART_MspInit+0xea>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001e90:	2340      	movs	r3, #64	; 0x40
 8001e92:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001e94:	2300      	movs	r3, #0
 8001e96:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e98:	f107 0318 	add.w	r3, r7, #24
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f002 fba9 	bl	80045f4 <HAL_RCCEx_PeriphCLKConfig>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d001      	beq.n	8001eac <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001ea8:	f7ff fd3c 	bl	8001924 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001eac:	4b2a      	ldr	r3, [pc, #168]	; (8001f58 <HAL_UART_MspInit+0xf8>)
 8001eae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eb0:	4a29      	ldr	r2, [pc, #164]	; (8001f58 <HAL_UART_MspInit+0xf8>)
 8001eb2:	f043 0310 	orr.w	r3, r3, #16
 8001eb6:	6453      	str	r3, [r2, #68]	; 0x44
 8001eb8:	4b27      	ldr	r3, [pc, #156]	; (8001f58 <HAL_UART_MspInit+0xf8>)
 8001eba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ebc:	f003 0310 	and.w	r3, r3, #16
 8001ec0:	617b      	str	r3, [r7, #20]
 8001ec2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ec4:	4b24      	ldr	r3, [pc, #144]	; (8001f58 <HAL_UART_MspInit+0xf8>)
 8001ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec8:	4a23      	ldr	r2, [pc, #140]	; (8001f58 <HAL_UART_MspInit+0xf8>)
 8001eca:	f043 0302 	orr.w	r3, r3, #2
 8001ece:	6313      	str	r3, [r2, #48]	; 0x30
 8001ed0:	4b21      	ldr	r3, [pc, #132]	; (8001f58 <HAL_UART_MspInit+0xf8>)
 8001ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed4:	f003 0302 	and.w	r3, r3, #2
 8001ed8:	613b      	str	r3, [r7, #16]
 8001eda:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001edc:	4b1e      	ldr	r3, [pc, #120]	; (8001f58 <HAL_UART_MspInit+0xf8>)
 8001ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee0:	4a1d      	ldr	r2, [pc, #116]	; (8001f58 <HAL_UART_MspInit+0xf8>)
 8001ee2:	f043 0301 	orr.w	r3, r3, #1
 8001ee6:	6313      	str	r3, [r2, #48]	; 0x30
 8001ee8:	4b1b      	ldr	r3, [pc, #108]	; (8001f58 <HAL_UART_MspInit+0xf8>)
 8001eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eec:	f003 0301 	and.w	r3, r3, #1
 8001ef0:	60fb      	str	r3, [r7, #12]
 8001ef2:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001ef4:	2380      	movs	r3, #128	; 0x80
 8001ef6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001efa:	2302      	movs	r3, #2
 8001efc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f00:	2300      	movs	r3, #0
 8001f02:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f06:	2303      	movs	r3, #3
 8001f08:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001f0c:	2307      	movs	r3, #7
 8001f0e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f12:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001f16:	4619      	mov	r1, r3
 8001f18:	4810      	ldr	r0, [pc, #64]	; (8001f5c <HAL_UART_MspInit+0xfc>)
 8001f1a:	f000 fa9f 	bl	800245c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001f1e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f22:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f26:	2302      	movs	r3, #2
 8001f28:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f32:	2303      	movs	r3, #3
 8001f34:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001f38:	2307      	movs	r3, #7
 8001f3a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f3e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001f42:	4619      	mov	r1, r3
 8001f44:	4806      	ldr	r0, [pc, #24]	; (8001f60 <HAL_UART_MspInit+0x100>)
 8001f46:	f000 fa89 	bl	800245c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001f4a:	bf00      	nop
 8001f4c:	37b0      	adds	r7, #176	; 0xb0
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	40011000 	.word	0x40011000
 8001f58:	40023800 	.word	0x40023800
 8001f5c:	40020400 	.word	0x40020400
 8001f60:	40020000 	.word	0x40020000

08001f64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001f64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f9c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f68:	480d      	ldr	r0, [pc, #52]	; (8001fa0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001f6a:	490e      	ldr	r1, [pc, #56]	; (8001fa4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001f6c:	4a0e      	ldr	r2, [pc, #56]	; (8001fa8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001f6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f70:	e002      	b.n	8001f78 <LoopCopyDataInit>

08001f72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f76:	3304      	adds	r3, #4

08001f78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f7c:	d3f9      	bcc.n	8001f72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f7e:	4a0b      	ldr	r2, [pc, #44]	; (8001fac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001f80:	4c0b      	ldr	r4, [pc, #44]	; (8001fb0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001f82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f84:	e001      	b.n	8001f8a <LoopFillZerobss>

08001f86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f88:	3204      	adds	r2, #4

08001f8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f8c:	d3fb      	bcc.n	8001f86 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001f8e:	f7ff fe11 	bl	8001bb4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f92:	f00c f91f 	bl	800e1d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f96:	f7ff f9c3 	bl	8001320 <main>
  bx  lr    
 8001f9a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001f9c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001fa0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fa4:	2000049c 	.word	0x2000049c
  ldr r2, =_sidata
 8001fa8:	08013244 	.word	0x08013244
  ldr r2, =_sbss
 8001fac:	2000049c 	.word	0x2000049c
  ldr r4, =_ebss
 8001fb0:	2000076c 	.word	0x2000076c

08001fb4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001fb4:	e7fe      	b.n	8001fb4 <ADC_IRQHandler>

08001fb6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fb6:	b580      	push	{r7, lr}
 8001fb8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fba:	2003      	movs	r0, #3
 8001fbc:	f000 f94c 	bl	8002258 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001fc0:	200f      	movs	r0, #15
 8001fc2:	f000 f805 	bl	8001fd0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001fc6:	f7ff fcbd 	bl	8001944 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fca:	2300      	movs	r3, #0
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	bd80      	pop	{r7, pc}

08001fd0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b082      	sub	sp, #8
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001fd8:	4b12      	ldr	r3, [pc, #72]	; (8002024 <HAL_InitTick+0x54>)
 8001fda:	681a      	ldr	r2, [r3, #0]
 8001fdc:	4b12      	ldr	r3, [pc, #72]	; (8002028 <HAL_InitTick+0x58>)
 8001fde:	781b      	ldrb	r3, [r3, #0]
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fe6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fea:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f000 f996 	bl	8002320 <HAL_SYSTICK_Config>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d001      	beq.n	8001ffe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e00e      	b.n	800201c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2b0f      	cmp	r3, #15
 8002002:	d80a      	bhi.n	800201a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002004:	2200      	movs	r2, #0
 8002006:	6879      	ldr	r1, [r7, #4]
 8002008:	f04f 30ff 	mov.w	r0, #4294967295
 800200c:	f000 f944 	bl	8002298 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002010:	4a06      	ldr	r2, [pc, #24]	; (800202c <HAL_InitTick+0x5c>)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002016:	2300      	movs	r3, #0
 8002018:	e000      	b.n	800201c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
}
 800201c:	4618      	mov	r0, r3
 800201e:	3708      	adds	r7, #8
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}
 8002024:	20000000 	.word	0x20000000
 8002028:	20000008 	.word	0x20000008
 800202c:	20000004 	.word	0x20000004

08002030 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002030:	b480      	push	{r7}
 8002032:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002034:	4b06      	ldr	r3, [pc, #24]	; (8002050 <HAL_IncTick+0x20>)
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	461a      	mov	r2, r3
 800203a:	4b06      	ldr	r3, [pc, #24]	; (8002054 <HAL_IncTick+0x24>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4413      	add	r3, r2
 8002040:	4a04      	ldr	r2, [pc, #16]	; (8002054 <HAL_IncTick+0x24>)
 8002042:	6013      	str	r3, [r2, #0]
}
 8002044:	bf00      	nop
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr
 800204e:	bf00      	nop
 8002050:	20000008 	.word	0x20000008
 8002054:	20000718 	.word	0x20000718

08002058 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002058:	b480      	push	{r7}
 800205a:	af00      	add	r7, sp, #0
  return uwTick;
 800205c:	4b03      	ldr	r3, [pc, #12]	; (800206c <HAL_GetTick+0x14>)
 800205e:	681b      	ldr	r3, [r3, #0]
}
 8002060:	4618      	mov	r0, r3
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr
 800206a:	bf00      	nop
 800206c:	20000718 	.word	0x20000718

08002070 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b084      	sub	sp, #16
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002078:	f7ff ffee 	bl	8002058 <HAL_GetTick>
 800207c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002088:	d005      	beq.n	8002096 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800208a:	4b0a      	ldr	r3, [pc, #40]	; (80020b4 <HAL_Delay+0x44>)
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	461a      	mov	r2, r3
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	4413      	add	r3, r2
 8002094:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002096:	bf00      	nop
 8002098:	f7ff ffde 	bl	8002058 <HAL_GetTick>
 800209c:	4602      	mov	r2, r0
 800209e:	68bb      	ldr	r3, [r7, #8]
 80020a0:	1ad3      	subs	r3, r2, r3
 80020a2:	68fa      	ldr	r2, [r7, #12]
 80020a4:	429a      	cmp	r2, r3
 80020a6:	d8f7      	bhi.n	8002098 <HAL_Delay+0x28>
  {
  }
}
 80020a8:	bf00      	nop
 80020aa:	bf00      	nop
 80020ac:	3710      	adds	r7, #16
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	20000008 	.word	0x20000008

080020b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b085      	sub	sp, #20
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	f003 0307 	and.w	r3, r3, #7
 80020c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020c8:	4b0b      	ldr	r3, [pc, #44]	; (80020f8 <__NVIC_SetPriorityGrouping+0x40>)
 80020ca:	68db      	ldr	r3, [r3, #12]
 80020cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020ce:	68ba      	ldr	r2, [r7, #8]
 80020d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020d4:	4013      	ands	r3, r2
 80020d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80020e0:	4b06      	ldr	r3, [pc, #24]	; (80020fc <__NVIC_SetPriorityGrouping+0x44>)
 80020e2:	4313      	orrs	r3, r2
 80020e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020e6:	4a04      	ldr	r2, [pc, #16]	; (80020f8 <__NVIC_SetPriorityGrouping+0x40>)
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	60d3      	str	r3, [r2, #12]
}
 80020ec:	bf00      	nop
 80020ee:	3714      	adds	r7, #20
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr
 80020f8:	e000ed00 	.word	0xe000ed00
 80020fc:	05fa0000 	.word	0x05fa0000

08002100 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002100:	b480      	push	{r7}
 8002102:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002104:	4b04      	ldr	r3, [pc, #16]	; (8002118 <__NVIC_GetPriorityGrouping+0x18>)
 8002106:	68db      	ldr	r3, [r3, #12]
 8002108:	0a1b      	lsrs	r3, r3, #8
 800210a:	f003 0307 	and.w	r3, r3, #7
}
 800210e:	4618      	mov	r0, r3
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr
 8002118:	e000ed00 	.word	0xe000ed00

0800211c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800211c:	b480      	push	{r7}
 800211e:	b083      	sub	sp, #12
 8002120:	af00      	add	r7, sp, #0
 8002122:	4603      	mov	r3, r0
 8002124:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002126:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800212a:	2b00      	cmp	r3, #0
 800212c:	db0b      	blt.n	8002146 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800212e:	79fb      	ldrb	r3, [r7, #7]
 8002130:	f003 021f 	and.w	r2, r3, #31
 8002134:	4907      	ldr	r1, [pc, #28]	; (8002154 <__NVIC_EnableIRQ+0x38>)
 8002136:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800213a:	095b      	lsrs	r3, r3, #5
 800213c:	2001      	movs	r0, #1
 800213e:	fa00 f202 	lsl.w	r2, r0, r2
 8002142:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002146:	bf00      	nop
 8002148:	370c      	adds	r7, #12
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr
 8002152:	bf00      	nop
 8002154:	e000e100 	.word	0xe000e100

08002158 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
 800215e:	4603      	mov	r3, r0
 8002160:	6039      	str	r1, [r7, #0]
 8002162:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002164:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002168:	2b00      	cmp	r3, #0
 800216a:	db0a      	blt.n	8002182 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	b2da      	uxtb	r2, r3
 8002170:	490c      	ldr	r1, [pc, #48]	; (80021a4 <__NVIC_SetPriority+0x4c>)
 8002172:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002176:	0112      	lsls	r2, r2, #4
 8002178:	b2d2      	uxtb	r2, r2
 800217a:	440b      	add	r3, r1
 800217c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002180:	e00a      	b.n	8002198 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	b2da      	uxtb	r2, r3
 8002186:	4908      	ldr	r1, [pc, #32]	; (80021a8 <__NVIC_SetPriority+0x50>)
 8002188:	79fb      	ldrb	r3, [r7, #7]
 800218a:	f003 030f 	and.w	r3, r3, #15
 800218e:	3b04      	subs	r3, #4
 8002190:	0112      	lsls	r2, r2, #4
 8002192:	b2d2      	uxtb	r2, r2
 8002194:	440b      	add	r3, r1
 8002196:	761a      	strb	r2, [r3, #24]
}
 8002198:	bf00      	nop
 800219a:	370c      	adds	r7, #12
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr
 80021a4:	e000e100 	.word	0xe000e100
 80021a8:	e000ed00 	.word	0xe000ed00

080021ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b089      	sub	sp, #36	; 0x24
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	60f8      	str	r0, [r7, #12]
 80021b4:	60b9      	str	r1, [r7, #8]
 80021b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	f003 0307 	and.w	r3, r3, #7
 80021be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021c0:	69fb      	ldr	r3, [r7, #28]
 80021c2:	f1c3 0307 	rsb	r3, r3, #7
 80021c6:	2b04      	cmp	r3, #4
 80021c8:	bf28      	it	cs
 80021ca:	2304      	movcs	r3, #4
 80021cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	3304      	adds	r3, #4
 80021d2:	2b06      	cmp	r3, #6
 80021d4:	d902      	bls.n	80021dc <NVIC_EncodePriority+0x30>
 80021d6:	69fb      	ldr	r3, [r7, #28]
 80021d8:	3b03      	subs	r3, #3
 80021da:	e000      	b.n	80021de <NVIC_EncodePriority+0x32>
 80021dc:	2300      	movs	r3, #0
 80021de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021e0:	f04f 32ff 	mov.w	r2, #4294967295
 80021e4:	69bb      	ldr	r3, [r7, #24]
 80021e6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ea:	43da      	mvns	r2, r3
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	401a      	ands	r2, r3
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021f4:	f04f 31ff 	mov.w	r1, #4294967295
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	fa01 f303 	lsl.w	r3, r1, r3
 80021fe:	43d9      	mvns	r1, r3
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002204:	4313      	orrs	r3, r2
         );
}
 8002206:	4618      	mov	r0, r3
 8002208:	3724      	adds	r7, #36	; 0x24
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr
	...

08002214 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b082      	sub	sp, #8
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	3b01      	subs	r3, #1
 8002220:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002224:	d301      	bcc.n	800222a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002226:	2301      	movs	r3, #1
 8002228:	e00f      	b.n	800224a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800222a:	4a0a      	ldr	r2, [pc, #40]	; (8002254 <SysTick_Config+0x40>)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	3b01      	subs	r3, #1
 8002230:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002232:	210f      	movs	r1, #15
 8002234:	f04f 30ff 	mov.w	r0, #4294967295
 8002238:	f7ff ff8e 	bl	8002158 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800223c:	4b05      	ldr	r3, [pc, #20]	; (8002254 <SysTick_Config+0x40>)
 800223e:	2200      	movs	r2, #0
 8002240:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002242:	4b04      	ldr	r3, [pc, #16]	; (8002254 <SysTick_Config+0x40>)
 8002244:	2207      	movs	r2, #7
 8002246:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002248:	2300      	movs	r3, #0
}
 800224a:	4618      	mov	r0, r3
 800224c:	3708      	adds	r7, #8
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	e000e010 	.word	0xe000e010

08002258 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b082      	sub	sp, #8
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2b07      	cmp	r3, #7
 8002264:	d00f      	beq.n	8002286 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2b06      	cmp	r3, #6
 800226a:	d00c      	beq.n	8002286 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2b05      	cmp	r3, #5
 8002270:	d009      	beq.n	8002286 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2b04      	cmp	r3, #4
 8002276:	d006      	beq.n	8002286 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2b03      	cmp	r3, #3
 800227c:	d003      	beq.n	8002286 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800227e:	2191      	movs	r1, #145	; 0x91
 8002280:	4804      	ldr	r0, [pc, #16]	; (8002294 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8002282:	f7ff fb54 	bl	800192e <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002286:	6878      	ldr	r0, [r7, #4]
 8002288:	f7ff ff16 	bl	80020b8 <__NVIC_SetPriorityGrouping>
}
 800228c:	bf00      	nop
 800228e:	3708      	adds	r7, #8
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}
 8002294:	08012b64 	.word	0x08012b64

08002298 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002298:	b580      	push	{r7, lr}
 800229a:	b086      	sub	sp, #24
 800229c:	af00      	add	r7, sp, #0
 800229e:	4603      	mov	r3, r0
 80022a0:	60b9      	str	r1, [r7, #8]
 80022a2:	607a      	str	r2, [r7, #4]
 80022a4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80022a6:	2300      	movs	r3, #0
 80022a8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2b0f      	cmp	r3, #15
 80022ae:	d903      	bls.n	80022b8 <HAL_NVIC_SetPriority+0x20>
 80022b0:	21a9      	movs	r1, #169	; 0xa9
 80022b2:	480e      	ldr	r0, [pc, #56]	; (80022ec <HAL_NVIC_SetPriority+0x54>)
 80022b4:	f7ff fb3b 	bl	800192e <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	2b0f      	cmp	r3, #15
 80022bc:	d903      	bls.n	80022c6 <HAL_NVIC_SetPriority+0x2e>
 80022be:	21aa      	movs	r1, #170	; 0xaa
 80022c0:	480a      	ldr	r0, [pc, #40]	; (80022ec <HAL_NVIC_SetPriority+0x54>)
 80022c2:	f7ff fb34 	bl	800192e <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022c6:	f7ff ff1b 	bl	8002100 <__NVIC_GetPriorityGrouping>
 80022ca:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022cc:	687a      	ldr	r2, [r7, #4]
 80022ce:	68b9      	ldr	r1, [r7, #8]
 80022d0:	6978      	ldr	r0, [r7, #20]
 80022d2:	f7ff ff6b 	bl	80021ac <NVIC_EncodePriority>
 80022d6:	4602      	mov	r2, r0
 80022d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022dc:	4611      	mov	r1, r2
 80022de:	4618      	mov	r0, r3
 80022e0:	f7ff ff3a 	bl	8002158 <__NVIC_SetPriority>
}
 80022e4:	bf00      	nop
 80022e6:	3718      	adds	r7, #24
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}
 80022ec:	08012b64 	.word	0x08012b64

080022f0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b082      	sub	sp, #8
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	4603      	mov	r3, r0
 80022f8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 80022fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	da03      	bge.n	800230a <HAL_NVIC_EnableIRQ+0x1a>
 8002302:	21bd      	movs	r1, #189	; 0xbd
 8002304:	4805      	ldr	r0, [pc, #20]	; (800231c <HAL_NVIC_EnableIRQ+0x2c>)
 8002306:	f7ff fb12 	bl	800192e <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800230a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800230e:	4618      	mov	r0, r3
 8002310:	f7ff ff04 	bl	800211c <__NVIC_EnableIRQ>
}
 8002314:	bf00      	nop
 8002316:	3708      	adds	r7, #8
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}
 800231c:	08012b64 	.word	0x08012b64

08002320 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b082      	sub	sp, #8
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002328:	6878      	ldr	r0, [r7, #4]
 800232a:	f7ff ff73 	bl	8002214 <SysTick_Config>
 800232e:	4603      	mov	r3, r0
}
 8002330:	4618      	mov	r0, r3
 8002332:	3708      	adds	r7, #8
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}

08002338 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b084      	sub	sp, #16
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002344:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002346:	f7ff fe87 	bl	8002058 <HAL_GetTick>
 800234a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002352:	b2db      	uxtb	r3, r3
 8002354:	2b02      	cmp	r3, #2
 8002356:	d008      	beq.n	800236a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2280      	movs	r2, #128	; 0x80
 800235c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2200      	movs	r2, #0
 8002362:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e052      	b.n	8002410 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f022 0216 	bic.w	r2, r2, #22
 8002378:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	695a      	ldr	r2, [r3, #20]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002388:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238e:	2b00      	cmp	r3, #0
 8002390:	d103      	bne.n	800239a <HAL_DMA_Abort+0x62>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002396:	2b00      	cmp	r3, #0
 8002398:	d007      	beq.n	80023aa <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	681a      	ldr	r2, [r3, #0]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f022 0208 	bic.w	r2, r2, #8
 80023a8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f022 0201 	bic.w	r2, r2, #1
 80023b8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023ba:	e013      	b.n	80023e4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80023bc:	f7ff fe4c 	bl	8002058 <HAL_GetTick>
 80023c0:	4602      	mov	r2, r0
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	1ad3      	subs	r3, r2, r3
 80023c6:	2b05      	cmp	r3, #5
 80023c8:	d90c      	bls.n	80023e4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2220      	movs	r2, #32
 80023ce:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2203      	movs	r2, #3
 80023d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2200      	movs	r2, #0
 80023dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80023e0:	2303      	movs	r3, #3
 80023e2:	e015      	b.n	8002410 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 0301 	and.w	r3, r3, #1
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d1e4      	bne.n	80023bc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023f6:	223f      	movs	r2, #63	; 0x3f
 80023f8:	409a      	lsls	r2, r3
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2201      	movs	r2, #1
 8002402:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2200      	movs	r2, #0
 800240a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 800240e:	2300      	movs	r3, #0
}
 8002410:	4618      	mov	r0, r3
 8002412:	3710      	adds	r7, #16
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}

08002418 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002418:	b480      	push	{r7}
 800241a:	b083      	sub	sp, #12
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002426:	b2db      	uxtb	r3, r3
 8002428:	2b02      	cmp	r3, #2
 800242a:	d004      	beq.n	8002436 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2280      	movs	r2, #128	; 0x80
 8002430:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e00c      	b.n	8002450 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2205      	movs	r2, #5
 800243a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f022 0201 	bic.w	r2, r2, #1
 800244c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800244e:	2300      	movs	r3, #0
}
 8002450:	4618      	mov	r0, r3
 8002452:	370c      	adds	r7, #12
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr

0800245c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b088      	sub	sp, #32
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
 8002464:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002466:	2300      	movs	r3, #0
 8002468:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800246a:	2300      	movs	r3, #0
 800246c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800246e:	2300      	movs	r3, #0
 8002470:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002472:	2300      	movs	r3, #0
 8002474:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	4a3a      	ldr	r2, [pc, #232]	; (8002564 <HAL_GPIO_Init+0x108>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d02b      	beq.n	80024d6 <HAL_GPIO_Init+0x7a>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	4a39      	ldr	r2, [pc, #228]	; (8002568 <HAL_GPIO_Init+0x10c>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d027      	beq.n	80024d6 <HAL_GPIO_Init+0x7a>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	4a38      	ldr	r2, [pc, #224]	; (800256c <HAL_GPIO_Init+0x110>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d023      	beq.n	80024d6 <HAL_GPIO_Init+0x7a>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	4a37      	ldr	r2, [pc, #220]	; (8002570 <HAL_GPIO_Init+0x114>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d01f      	beq.n	80024d6 <HAL_GPIO_Init+0x7a>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	4a36      	ldr	r2, [pc, #216]	; (8002574 <HAL_GPIO_Init+0x118>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d01b      	beq.n	80024d6 <HAL_GPIO_Init+0x7a>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	4a35      	ldr	r2, [pc, #212]	; (8002578 <HAL_GPIO_Init+0x11c>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d017      	beq.n	80024d6 <HAL_GPIO_Init+0x7a>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	4a34      	ldr	r2, [pc, #208]	; (800257c <HAL_GPIO_Init+0x120>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d013      	beq.n	80024d6 <HAL_GPIO_Init+0x7a>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	4a33      	ldr	r2, [pc, #204]	; (8002580 <HAL_GPIO_Init+0x124>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d00f      	beq.n	80024d6 <HAL_GPIO_Init+0x7a>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	4a32      	ldr	r2, [pc, #200]	; (8002584 <HAL_GPIO_Init+0x128>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d00b      	beq.n	80024d6 <HAL_GPIO_Init+0x7a>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	4a31      	ldr	r2, [pc, #196]	; (8002588 <HAL_GPIO_Init+0x12c>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d007      	beq.n	80024d6 <HAL_GPIO_Init+0x7a>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	4a30      	ldr	r2, [pc, #192]	; (800258c <HAL_GPIO_Init+0x130>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d003      	beq.n	80024d6 <HAL_GPIO_Init+0x7a>
 80024ce:	21aa      	movs	r1, #170	; 0xaa
 80024d0:	482f      	ldr	r0, [pc, #188]	; (8002590 <HAL_GPIO_Init+0x134>)
 80024d2:	f7ff fa2c 	bl	800192e <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	b29b      	uxth	r3, r3
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d103      	bne.n	80024e8 <HAL_GPIO_Init+0x8c>
 80024e0:	21ab      	movs	r1, #171	; 0xab
 80024e2:	482b      	ldr	r0, [pc, #172]	; (8002590 <HAL_GPIO_Init+0x134>)
 80024e4:	f7ff fa23 	bl	800192e <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d035      	beq.n	800255c <HAL_GPIO_Init+0x100>
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	2b01      	cmp	r3, #1
 80024f6:	d031      	beq.n	800255c <HAL_GPIO_Init+0x100>
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	2b11      	cmp	r3, #17
 80024fe:	d02d      	beq.n	800255c <HAL_GPIO_Init+0x100>
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	2b02      	cmp	r3, #2
 8002506:	d029      	beq.n	800255c <HAL_GPIO_Init+0x100>
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	2b12      	cmp	r3, #18
 800250e:	d025      	beq.n	800255c <HAL_GPIO_Init+0x100>
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8002518:	d020      	beq.n	800255c <HAL_GPIO_Init+0x100>
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8002522:	d01b      	beq.n	800255c <HAL_GPIO_Init+0x100>
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 800252c:	d016      	beq.n	800255c <HAL_GPIO_Init+0x100>
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 8002536:	d011      	beq.n	800255c <HAL_GPIO_Init+0x100>
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 8002540:	d00c      	beq.n	800255c <HAL_GPIO_Init+0x100>
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 800254a:	d007      	beq.n	800255c <HAL_GPIO_Init+0x100>
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	2b03      	cmp	r3, #3
 8002552:	d003      	beq.n	800255c <HAL_GPIO_Init+0x100>
 8002554:	21ac      	movs	r1, #172	; 0xac
 8002556:	480e      	ldr	r0, [pc, #56]	; (8002590 <HAL_GPIO_Init+0x134>)
 8002558:	f7ff f9e9 	bl	800192e <assert_failed>

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800255c:	2300      	movs	r3, #0
 800255e:	61fb      	str	r3, [r7, #28]
 8002560:	e2c7      	b.n	8002af2 <HAL_GPIO_Init+0x696>
 8002562:	bf00      	nop
 8002564:	40020000 	.word	0x40020000
 8002568:	40020400 	.word	0x40020400
 800256c:	40020800 	.word	0x40020800
 8002570:	40020c00 	.word	0x40020c00
 8002574:	40021000 	.word	0x40021000
 8002578:	40021400 	.word	0x40021400
 800257c:	40021800 	.word	0x40021800
 8002580:	40021c00 	.word	0x40021c00
 8002584:	40022000 	.word	0x40022000
 8002588:	40022400 	.word	0x40022400
 800258c:	40022800 	.word	0x40022800
 8002590:	08012ba0 	.word	0x08012ba0
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002594:	2201      	movs	r2, #1
 8002596:	69fb      	ldr	r3, [r7, #28]
 8002598:	fa02 f303 	lsl.w	r3, r2, r3
 800259c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	697a      	ldr	r2, [r7, #20]
 80025a4:	4013      	ands	r3, r2
 80025a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80025a8:	693a      	ldr	r2, [r7, #16]
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	429a      	cmp	r2, r3
 80025ae:	f040 829d 	bne.w	8002aec <HAL_GPIO_Init+0x690>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	f003 0303 	and.w	r3, r3, #3
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	d005      	beq.n	80025ca <HAL_GPIO_Init+0x16e>
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	f003 0303 	and.w	r3, r3, #3
 80025c6:	2b02      	cmp	r3, #2
 80025c8:	d144      	bne.n	8002654 <HAL_GPIO_Init+0x1f8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	68db      	ldr	r3, [r3, #12]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d00f      	beq.n	80025f2 <HAL_GPIO_Init+0x196>
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	68db      	ldr	r3, [r3, #12]
 80025d6:	2b01      	cmp	r3, #1
 80025d8:	d00b      	beq.n	80025f2 <HAL_GPIO_Init+0x196>
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	68db      	ldr	r3, [r3, #12]
 80025de:	2b02      	cmp	r3, #2
 80025e0:	d007      	beq.n	80025f2 <HAL_GPIO_Init+0x196>
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	68db      	ldr	r3, [r3, #12]
 80025e6:	2b03      	cmp	r3, #3
 80025e8:	d003      	beq.n	80025f2 <HAL_GPIO_Init+0x196>
 80025ea:	21bd      	movs	r1, #189	; 0xbd
 80025ec:	4831      	ldr	r0, [pc, #196]	; (80026b4 <HAL_GPIO_Init+0x258>)
 80025ee:	f7ff f99e 	bl	800192e <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80025f8:	69fb      	ldr	r3, [r7, #28]
 80025fa:	005b      	lsls	r3, r3, #1
 80025fc:	2203      	movs	r2, #3
 80025fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002602:	43db      	mvns	r3, r3
 8002604:	69ba      	ldr	r2, [r7, #24]
 8002606:	4013      	ands	r3, r2
 8002608:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	68da      	ldr	r2, [r3, #12]
 800260e:	69fb      	ldr	r3, [r7, #28]
 8002610:	005b      	lsls	r3, r3, #1
 8002612:	fa02 f303 	lsl.w	r3, r2, r3
 8002616:	69ba      	ldr	r2, [r7, #24]
 8002618:	4313      	orrs	r3, r2
 800261a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	69ba      	ldr	r2, [r7, #24]
 8002620:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002628:	2201      	movs	r2, #1
 800262a:	69fb      	ldr	r3, [r7, #28]
 800262c:	fa02 f303 	lsl.w	r3, r2, r3
 8002630:	43db      	mvns	r3, r3
 8002632:	69ba      	ldr	r2, [r7, #24]
 8002634:	4013      	ands	r3, r2
 8002636:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	091b      	lsrs	r3, r3, #4
 800263e:	f003 0201 	and.w	r2, r3, #1
 8002642:	69fb      	ldr	r3, [r7, #28]
 8002644:	fa02 f303 	lsl.w	r3, r2, r3
 8002648:	69ba      	ldr	r2, [r7, #24]
 800264a:	4313      	orrs	r3, r2
 800264c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	69ba      	ldr	r2, [r7, #24]
 8002652:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	f003 0303 	and.w	r3, r3, #3
 800265c:	2b03      	cmp	r3, #3
 800265e:	d02b      	beq.n	80026b8 <HAL_GPIO_Init+0x25c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d00b      	beq.n	8002680 <HAL_GPIO_Init+0x224>
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	2b01      	cmp	r3, #1
 800266e:	d007      	beq.n	8002680 <HAL_GPIO_Init+0x224>
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	2b02      	cmp	r3, #2
 8002676:	d003      	beq.n	8002680 <HAL_GPIO_Init+0x224>
 8002678:	21ce      	movs	r1, #206	; 0xce
 800267a:	480e      	ldr	r0, [pc, #56]	; (80026b4 <HAL_GPIO_Init+0x258>)
 800267c:	f7ff f957 	bl	800192e <assert_failed>

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	68db      	ldr	r3, [r3, #12]
 8002684:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002686:	69fb      	ldr	r3, [r7, #28]
 8002688:	005b      	lsls	r3, r3, #1
 800268a:	2203      	movs	r2, #3
 800268c:	fa02 f303 	lsl.w	r3, r2, r3
 8002690:	43db      	mvns	r3, r3
 8002692:	69ba      	ldr	r2, [r7, #24]
 8002694:	4013      	ands	r3, r2
 8002696:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	689a      	ldr	r2, [r3, #8]
 800269c:	69fb      	ldr	r3, [r7, #28]
 800269e:	005b      	lsls	r3, r3, #1
 80026a0:	fa02 f303 	lsl.w	r3, r2, r3
 80026a4:	69ba      	ldr	r2, [r7, #24]
 80026a6:	4313      	orrs	r3, r2
 80026a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	69ba      	ldr	r2, [r7, #24]
 80026ae:	60da      	str	r2, [r3, #12]
 80026b0:	e002      	b.n	80026b8 <HAL_GPIO_Init+0x25c>
 80026b2:	bf00      	nop
 80026b4:	08012ba0 	.word	0x08012ba0
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	f003 0303 	and.w	r3, r3, #3
 80026c0:	2b02      	cmp	r3, #2
 80026c2:	f040 8134 	bne.w	800292e <HAL_GPIO_Init+0x4d2>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	691b      	ldr	r3, [r3, #16]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	f000 810b 	beq.w	80028e6 <HAL_GPIO_Init+0x48a>
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	691b      	ldr	r3, [r3, #16]
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	f000 8106 	beq.w	80028e6 <HAL_GPIO_Init+0x48a>
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	691b      	ldr	r3, [r3, #16]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	f000 8101 	beq.w	80028e6 <HAL_GPIO_Init+0x48a>
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	691b      	ldr	r3, [r3, #16]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	f000 80fc 	beq.w	80028e6 <HAL_GPIO_Init+0x48a>
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	691b      	ldr	r3, [r3, #16]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	f000 80f7 	beq.w	80028e6 <HAL_GPIO_Init+0x48a>
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	691b      	ldr	r3, [r3, #16]
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	f000 80f2 	beq.w	80028e6 <HAL_GPIO_Init+0x48a>
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	691b      	ldr	r3, [r3, #16]
 8002706:	2b02      	cmp	r3, #2
 8002708:	f000 80ed 	beq.w	80028e6 <HAL_GPIO_Init+0x48a>
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	691b      	ldr	r3, [r3, #16]
 8002710:	2b02      	cmp	r3, #2
 8002712:	f000 80e8 	beq.w	80028e6 <HAL_GPIO_Init+0x48a>
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	691b      	ldr	r3, [r3, #16]
 800271a:	2b02      	cmp	r3, #2
 800271c:	f000 80e3 	beq.w	80028e6 <HAL_GPIO_Init+0x48a>
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	691b      	ldr	r3, [r3, #16]
 8002724:	2b03      	cmp	r3, #3
 8002726:	f000 80de 	beq.w	80028e6 <HAL_GPIO_Init+0x48a>
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	691b      	ldr	r3, [r3, #16]
 800272e:	2b03      	cmp	r3, #3
 8002730:	f000 80d9 	beq.w	80028e6 <HAL_GPIO_Init+0x48a>
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	691b      	ldr	r3, [r3, #16]
 8002738:	2b03      	cmp	r3, #3
 800273a:	f000 80d4 	beq.w	80028e6 <HAL_GPIO_Init+0x48a>
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	691b      	ldr	r3, [r3, #16]
 8002742:	2b03      	cmp	r3, #3
 8002744:	f000 80cf 	beq.w	80028e6 <HAL_GPIO_Init+0x48a>
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	691b      	ldr	r3, [r3, #16]
 800274c:	2b03      	cmp	r3, #3
 800274e:	f000 80ca 	beq.w	80028e6 <HAL_GPIO_Init+0x48a>
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	691b      	ldr	r3, [r3, #16]
 8002756:	2b03      	cmp	r3, #3
 8002758:	f000 80c5 	beq.w	80028e6 <HAL_GPIO_Init+0x48a>
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	691b      	ldr	r3, [r3, #16]
 8002760:	2b04      	cmp	r3, #4
 8002762:	f000 80c0 	beq.w	80028e6 <HAL_GPIO_Init+0x48a>
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	691b      	ldr	r3, [r3, #16]
 800276a:	2b04      	cmp	r3, #4
 800276c:	f000 80bb 	beq.w	80028e6 <HAL_GPIO_Init+0x48a>
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	691b      	ldr	r3, [r3, #16]
 8002774:	2b04      	cmp	r3, #4
 8002776:	f000 80b6 	beq.w	80028e6 <HAL_GPIO_Init+0x48a>
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	691b      	ldr	r3, [r3, #16]
 800277e:	2b04      	cmp	r3, #4
 8002780:	f000 80b1 	beq.w	80028e6 <HAL_GPIO_Init+0x48a>
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	691b      	ldr	r3, [r3, #16]
 8002788:	2b04      	cmp	r3, #4
 800278a:	f000 80ac 	beq.w	80028e6 <HAL_GPIO_Init+0x48a>
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	691b      	ldr	r3, [r3, #16]
 8002792:	2b05      	cmp	r3, #5
 8002794:	f000 80a7 	beq.w	80028e6 <HAL_GPIO_Init+0x48a>
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	691b      	ldr	r3, [r3, #16]
 800279c:	2b05      	cmp	r3, #5
 800279e:	f000 80a2 	beq.w	80028e6 <HAL_GPIO_Init+0x48a>
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	691b      	ldr	r3, [r3, #16]
 80027a6:	2b05      	cmp	r3, #5
 80027a8:	f000 809d 	beq.w	80028e6 <HAL_GPIO_Init+0x48a>
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	691b      	ldr	r3, [r3, #16]
 80027b0:	2b05      	cmp	r3, #5
 80027b2:	f000 8098 	beq.w	80028e6 <HAL_GPIO_Init+0x48a>
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	691b      	ldr	r3, [r3, #16]
 80027ba:	2b05      	cmp	r3, #5
 80027bc:	f000 8093 	beq.w	80028e6 <HAL_GPIO_Init+0x48a>
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	691b      	ldr	r3, [r3, #16]
 80027c4:	2b05      	cmp	r3, #5
 80027c6:	f000 808e 	beq.w	80028e6 <HAL_GPIO_Init+0x48a>
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	691b      	ldr	r3, [r3, #16]
 80027ce:	2b06      	cmp	r3, #6
 80027d0:	f000 8089 	beq.w	80028e6 <HAL_GPIO_Init+0x48a>
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	691b      	ldr	r3, [r3, #16]
 80027d8:	2b06      	cmp	r3, #6
 80027da:	f000 8084 	beq.w	80028e6 <HAL_GPIO_Init+0x48a>
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	691b      	ldr	r3, [r3, #16]
 80027e2:	2b07      	cmp	r3, #7
 80027e4:	d07f      	beq.n	80028e6 <HAL_GPIO_Init+0x48a>
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	691b      	ldr	r3, [r3, #16]
 80027ea:	2b07      	cmp	r3, #7
 80027ec:	d07b      	beq.n	80028e6 <HAL_GPIO_Init+0x48a>
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	691b      	ldr	r3, [r3, #16]
 80027f2:	2b07      	cmp	r3, #7
 80027f4:	d077      	beq.n	80028e6 <HAL_GPIO_Init+0x48a>
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	691b      	ldr	r3, [r3, #16]
 80027fa:	2b07      	cmp	r3, #7
 80027fc:	d073      	beq.n	80028e6 <HAL_GPIO_Init+0x48a>
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	691b      	ldr	r3, [r3, #16]
 8002802:	2b07      	cmp	r3, #7
 8002804:	d06f      	beq.n	80028e6 <HAL_GPIO_Init+0x48a>
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	691b      	ldr	r3, [r3, #16]
 800280a:	2b07      	cmp	r3, #7
 800280c:	d06b      	beq.n	80028e6 <HAL_GPIO_Init+0x48a>
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	691b      	ldr	r3, [r3, #16]
 8002812:	2b07      	cmp	r3, #7
 8002814:	d067      	beq.n	80028e6 <HAL_GPIO_Init+0x48a>
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	691b      	ldr	r3, [r3, #16]
 800281a:	2b08      	cmp	r3, #8
 800281c:	d063      	beq.n	80028e6 <HAL_GPIO_Init+0x48a>
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	691b      	ldr	r3, [r3, #16]
 8002822:	2b08      	cmp	r3, #8
 8002824:	d05f      	beq.n	80028e6 <HAL_GPIO_Init+0x48a>
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	691b      	ldr	r3, [r3, #16]
 800282a:	2b08      	cmp	r3, #8
 800282c:	d05b      	beq.n	80028e6 <HAL_GPIO_Init+0x48a>
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	691b      	ldr	r3, [r3, #16]
 8002832:	2b08      	cmp	r3, #8
 8002834:	d057      	beq.n	80028e6 <HAL_GPIO_Init+0x48a>
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	691b      	ldr	r3, [r3, #16]
 800283a:	2b08      	cmp	r3, #8
 800283c:	d053      	beq.n	80028e6 <HAL_GPIO_Init+0x48a>
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	691b      	ldr	r3, [r3, #16]
 8002842:	2b08      	cmp	r3, #8
 8002844:	d04f      	beq.n	80028e6 <HAL_GPIO_Init+0x48a>
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	691b      	ldr	r3, [r3, #16]
 800284a:	2b08      	cmp	r3, #8
 800284c:	d04b      	beq.n	80028e6 <HAL_GPIO_Init+0x48a>
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	691b      	ldr	r3, [r3, #16]
 8002852:	2b09      	cmp	r3, #9
 8002854:	d047      	beq.n	80028e6 <HAL_GPIO_Init+0x48a>
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	691b      	ldr	r3, [r3, #16]
 800285a:	2b09      	cmp	r3, #9
 800285c:	d043      	beq.n	80028e6 <HAL_GPIO_Init+0x48a>
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	691b      	ldr	r3, [r3, #16]
 8002862:	2b09      	cmp	r3, #9
 8002864:	d03f      	beq.n	80028e6 <HAL_GPIO_Init+0x48a>
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	691b      	ldr	r3, [r3, #16]
 800286a:	2b09      	cmp	r3, #9
 800286c:	d03b      	beq.n	80028e6 <HAL_GPIO_Init+0x48a>
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	691b      	ldr	r3, [r3, #16]
 8002872:	2b09      	cmp	r3, #9
 8002874:	d037      	beq.n	80028e6 <HAL_GPIO_Init+0x48a>
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	691b      	ldr	r3, [r3, #16]
 800287a:	2b09      	cmp	r3, #9
 800287c:	d033      	beq.n	80028e6 <HAL_GPIO_Init+0x48a>
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	691b      	ldr	r3, [r3, #16]
 8002882:	2b09      	cmp	r3, #9
 8002884:	d02f      	beq.n	80028e6 <HAL_GPIO_Init+0x48a>
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	691b      	ldr	r3, [r3, #16]
 800288a:	2b0a      	cmp	r3, #10
 800288c:	d02b      	beq.n	80028e6 <HAL_GPIO_Init+0x48a>
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	691b      	ldr	r3, [r3, #16]
 8002892:	2b0a      	cmp	r3, #10
 8002894:	d027      	beq.n	80028e6 <HAL_GPIO_Init+0x48a>
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	691b      	ldr	r3, [r3, #16]
 800289a:	2b0a      	cmp	r3, #10
 800289c:	d023      	beq.n	80028e6 <HAL_GPIO_Init+0x48a>
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	691b      	ldr	r3, [r3, #16]
 80028a2:	2b0a      	cmp	r3, #10
 80028a4:	d01f      	beq.n	80028e6 <HAL_GPIO_Init+0x48a>
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	691b      	ldr	r3, [r3, #16]
 80028aa:	2b0b      	cmp	r3, #11
 80028ac:	d01b      	beq.n	80028e6 <HAL_GPIO_Init+0x48a>
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	691b      	ldr	r3, [r3, #16]
 80028b2:	2b0c      	cmp	r3, #12
 80028b4:	d017      	beq.n	80028e6 <HAL_GPIO_Init+0x48a>
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	691b      	ldr	r3, [r3, #16]
 80028ba:	2b0c      	cmp	r3, #12
 80028bc:	d013      	beq.n	80028e6 <HAL_GPIO_Init+0x48a>
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	691b      	ldr	r3, [r3, #16]
 80028c2:	2b0c      	cmp	r3, #12
 80028c4:	d00f      	beq.n	80028e6 <HAL_GPIO_Init+0x48a>
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	691b      	ldr	r3, [r3, #16]
 80028ca:	2b0f      	cmp	r3, #15
 80028cc:	d00b      	beq.n	80028e6 <HAL_GPIO_Init+0x48a>
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	691b      	ldr	r3, [r3, #16]
 80028d2:	2b0d      	cmp	r3, #13
 80028d4:	d007      	beq.n	80028e6 <HAL_GPIO_Init+0x48a>
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	691b      	ldr	r3, [r3, #16]
 80028da:	2b0e      	cmp	r3, #14
 80028dc:	d003      	beq.n	80028e6 <HAL_GPIO_Init+0x48a>
 80028de:	21db      	movs	r1, #219	; 0xdb
 80028e0:	4888      	ldr	r0, [pc, #544]	; (8002b04 <HAL_GPIO_Init+0x6a8>)
 80028e2:	f7ff f824 	bl	800192e <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80028e6:	69fb      	ldr	r3, [r7, #28]
 80028e8:	08da      	lsrs	r2, r3, #3
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	3208      	adds	r2, #8
 80028ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80028f4:	69fb      	ldr	r3, [r7, #28]
 80028f6:	f003 0307 	and.w	r3, r3, #7
 80028fa:	009b      	lsls	r3, r3, #2
 80028fc:	220f      	movs	r2, #15
 80028fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002902:	43db      	mvns	r3, r3
 8002904:	69ba      	ldr	r2, [r7, #24]
 8002906:	4013      	ands	r3, r2
 8002908:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	691a      	ldr	r2, [r3, #16]
 800290e:	69fb      	ldr	r3, [r7, #28]
 8002910:	f003 0307 	and.w	r3, r3, #7
 8002914:	009b      	lsls	r3, r3, #2
 8002916:	fa02 f303 	lsl.w	r3, r2, r3
 800291a:	69ba      	ldr	r2, [r7, #24]
 800291c:	4313      	orrs	r3, r2
 800291e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002920:	69fb      	ldr	r3, [r7, #28]
 8002922:	08da      	lsrs	r2, r3, #3
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	3208      	adds	r2, #8
 8002928:	69b9      	ldr	r1, [r7, #24]
 800292a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002934:	69fb      	ldr	r3, [r7, #28]
 8002936:	005b      	lsls	r3, r3, #1
 8002938:	2203      	movs	r2, #3
 800293a:	fa02 f303 	lsl.w	r3, r2, r3
 800293e:	43db      	mvns	r3, r3
 8002940:	69ba      	ldr	r2, [r7, #24]
 8002942:	4013      	ands	r3, r2
 8002944:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	f003 0203 	and.w	r2, r3, #3
 800294e:	69fb      	ldr	r3, [r7, #28]
 8002950:	005b      	lsls	r3, r3, #1
 8002952:	fa02 f303 	lsl.w	r3, r2, r3
 8002956:	69ba      	ldr	r2, [r7, #24]
 8002958:	4313      	orrs	r3, r2
 800295a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	69ba      	ldr	r2, [r7, #24]
 8002960:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800296a:	2b00      	cmp	r3, #0
 800296c:	f000 80be 	beq.w	8002aec <HAL_GPIO_Init+0x690>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002970:	4b65      	ldr	r3, [pc, #404]	; (8002b08 <HAL_GPIO_Init+0x6ac>)
 8002972:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002974:	4a64      	ldr	r2, [pc, #400]	; (8002b08 <HAL_GPIO_Init+0x6ac>)
 8002976:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800297a:	6453      	str	r3, [r2, #68]	; 0x44
 800297c:	4b62      	ldr	r3, [pc, #392]	; (8002b08 <HAL_GPIO_Init+0x6ac>)
 800297e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002980:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002984:	60fb      	str	r3, [r7, #12]
 8002986:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002988:	4a60      	ldr	r2, [pc, #384]	; (8002b0c <HAL_GPIO_Init+0x6b0>)
 800298a:	69fb      	ldr	r3, [r7, #28]
 800298c:	089b      	lsrs	r3, r3, #2
 800298e:	3302      	adds	r3, #2
 8002990:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002994:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002996:	69fb      	ldr	r3, [r7, #28]
 8002998:	f003 0303 	and.w	r3, r3, #3
 800299c:	009b      	lsls	r3, r3, #2
 800299e:	220f      	movs	r2, #15
 80029a0:	fa02 f303 	lsl.w	r3, r2, r3
 80029a4:	43db      	mvns	r3, r3
 80029a6:	69ba      	ldr	r2, [r7, #24]
 80029a8:	4013      	ands	r3, r2
 80029aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	4a58      	ldr	r2, [pc, #352]	; (8002b10 <HAL_GPIO_Init+0x6b4>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d037      	beq.n	8002a24 <HAL_GPIO_Init+0x5c8>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	4a57      	ldr	r2, [pc, #348]	; (8002b14 <HAL_GPIO_Init+0x6b8>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d031      	beq.n	8002a20 <HAL_GPIO_Init+0x5c4>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	4a56      	ldr	r2, [pc, #344]	; (8002b18 <HAL_GPIO_Init+0x6bc>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d02b      	beq.n	8002a1c <HAL_GPIO_Init+0x5c0>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	4a55      	ldr	r2, [pc, #340]	; (8002b1c <HAL_GPIO_Init+0x6c0>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d025      	beq.n	8002a18 <HAL_GPIO_Init+0x5bc>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	4a54      	ldr	r2, [pc, #336]	; (8002b20 <HAL_GPIO_Init+0x6c4>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d01f      	beq.n	8002a14 <HAL_GPIO_Init+0x5b8>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	4a53      	ldr	r2, [pc, #332]	; (8002b24 <HAL_GPIO_Init+0x6c8>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d019      	beq.n	8002a10 <HAL_GPIO_Init+0x5b4>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	4a52      	ldr	r2, [pc, #328]	; (8002b28 <HAL_GPIO_Init+0x6cc>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d013      	beq.n	8002a0c <HAL_GPIO_Init+0x5b0>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	4a51      	ldr	r2, [pc, #324]	; (8002b2c <HAL_GPIO_Init+0x6d0>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d00d      	beq.n	8002a08 <HAL_GPIO_Init+0x5ac>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	4a50      	ldr	r2, [pc, #320]	; (8002b30 <HAL_GPIO_Init+0x6d4>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d007      	beq.n	8002a04 <HAL_GPIO_Init+0x5a8>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	4a4f      	ldr	r2, [pc, #316]	; (8002b34 <HAL_GPIO_Init+0x6d8>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d101      	bne.n	8002a00 <HAL_GPIO_Init+0x5a4>
 80029fc:	2309      	movs	r3, #9
 80029fe:	e012      	b.n	8002a26 <HAL_GPIO_Init+0x5ca>
 8002a00:	230a      	movs	r3, #10
 8002a02:	e010      	b.n	8002a26 <HAL_GPIO_Init+0x5ca>
 8002a04:	2308      	movs	r3, #8
 8002a06:	e00e      	b.n	8002a26 <HAL_GPIO_Init+0x5ca>
 8002a08:	2307      	movs	r3, #7
 8002a0a:	e00c      	b.n	8002a26 <HAL_GPIO_Init+0x5ca>
 8002a0c:	2306      	movs	r3, #6
 8002a0e:	e00a      	b.n	8002a26 <HAL_GPIO_Init+0x5ca>
 8002a10:	2305      	movs	r3, #5
 8002a12:	e008      	b.n	8002a26 <HAL_GPIO_Init+0x5ca>
 8002a14:	2304      	movs	r3, #4
 8002a16:	e006      	b.n	8002a26 <HAL_GPIO_Init+0x5ca>
 8002a18:	2303      	movs	r3, #3
 8002a1a:	e004      	b.n	8002a26 <HAL_GPIO_Init+0x5ca>
 8002a1c:	2302      	movs	r3, #2
 8002a1e:	e002      	b.n	8002a26 <HAL_GPIO_Init+0x5ca>
 8002a20:	2301      	movs	r3, #1
 8002a22:	e000      	b.n	8002a26 <HAL_GPIO_Init+0x5ca>
 8002a24:	2300      	movs	r3, #0
 8002a26:	69fa      	ldr	r2, [r7, #28]
 8002a28:	f002 0203 	and.w	r2, r2, #3
 8002a2c:	0092      	lsls	r2, r2, #2
 8002a2e:	4093      	lsls	r3, r2
 8002a30:	69ba      	ldr	r2, [r7, #24]
 8002a32:	4313      	orrs	r3, r2
 8002a34:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002a36:	4935      	ldr	r1, [pc, #212]	; (8002b0c <HAL_GPIO_Init+0x6b0>)
 8002a38:	69fb      	ldr	r3, [r7, #28]
 8002a3a:	089b      	lsrs	r3, r3, #2
 8002a3c:	3302      	adds	r3, #2
 8002a3e:	69ba      	ldr	r2, [r7, #24]
 8002a40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a44:	4b3c      	ldr	r3, [pc, #240]	; (8002b38 <HAL_GPIO_Init+0x6dc>)
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	43db      	mvns	r3, r3
 8002a4e:	69ba      	ldr	r2, [r7, #24]
 8002a50:	4013      	ands	r3, r2
 8002a52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d003      	beq.n	8002a68 <HAL_GPIO_Init+0x60c>
        {
          temp |= iocurrent;
 8002a60:	69ba      	ldr	r2, [r7, #24]
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	4313      	orrs	r3, r2
 8002a66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a68:	4a33      	ldr	r2, [pc, #204]	; (8002b38 <HAL_GPIO_Init+0x6dc>)
 8002a6a:	69bb      	ldr	r3, [r7, #24]
 8002a6c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a6e:	4b32      	ldr	r3, [pc, #200]	; (8002b38 <HAL_GPIO_Init+0x6dc>)
 8002a70:	68db      	ldr	r3, [r3, #12]
 8002a72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	43db      	mvns	r3, r3
 8002a78:	69ba      	ldr	r2, [r7, #24]
 8002a7a:	4013      	ands	r3, r2
 8002a7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d003      	beq.n	8002a92 <HAL_GPIO_Init+0x636>
        {
          temp |= iocurrent;
 8002a8a:	69ba      	ldr	r2, [r7, #24]
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a92:	4a29      	ldr	r2, [pc, #164]	; (8002b38 <HAL_GPIO_Init+0x6dc>)
 8002a94:	69bb      	ldr	r3, [r7, #24]
 8002a96:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a98:	4b27      	ldr	r3, [pc, #156]	; (8002b38 <HAL_GPIO_Init+0x6dc>)
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	43db      	mvns	r3, r3
 8002aa2:	69ba      	ldr	r2, [r7, #24]
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d003      	beq.n	8002abc <HAL_GPIO_Init+0x660>
        {
          temp |= iocurrent;
 8002ab4:	69ba      	ldr	r2, [r7, #24]
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002abc:	4a1e      	ldr	r2, [pc, #120]	; (8002b38 <HAL_GPIO_Init+0x6dc>)
 8002abe:	69bb      	ldr	r3, [r7, #24]
 8002ac0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ac2:	4b1d      	ldr	r3, [pc, #116]	; (8002b38 <HAL_GPIO_Init+0x6dc>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	43db      	mvns	r3, r3
 8002acc:	69ba      	ldr	r2, [r7, #24]
 8002ace:	4013      	ands	r3, r2
 8002ad0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d003      	beq.n	8002ae6 <HAL_GPIO_Init+0x68a>
        {
          temp |= iocurrent;
 8002ade:	69ba      	ldr	r2, [r7, #24]
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ae6:	4a14      	ldr	r2, [pc, #80]	; (8002b38 <HAL_GPIO_Init+0x6dc>)
 8002ae8:	69bb      	ldr	r3, [r7, #24]
 8002aea:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002aec:	69fb      	ldr	r3, [r7, #28]
 8002aee:	3301      	adds	r3, #1
 8002af0:	61fb      	str	r3, [r7, #28]
 8002af2:	69fb      	ldr	r3, [r7, #28]
 8002af4:	2b0f      	cmp	r3, #15
 8002af6:	f67f ad4d 	bls.w	8002594 <HAL_GPIO_Init+0x138>
      }
    }
  }
}
 8002afa:	bf00      	nop
 8002afc:	bf00      	nop
 8002afe:	3720      	adds	r7, #32
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}
 8002b04:	08012ba0 	.word	0x08012ba0
 8002b08:	40023800 	.word	0x40023800
 8002b0c:	40013800 	.word	0x40013800
 8002b10:	40020000 	.word	0x40020000
 8002b14:	40020400 	.word	0x40020400
 8002b18:	40020800 	.word	0x40020800
 8002b1c:	40020c00 	.word	0x40020c00
 8002b20:	40021000 	.word	0x40021000
 8002b24:	40021400 	.word	0x40021400
 8002b28:	40021800 	.word	0x40021800
 8002b2c:	40021c00 	.word	0x40021c00
 8002b30:	40022000 	.word	0x40022000
 8002b34:	40022400 	.word	0x40022400
 8002b38:	40013c00 	.word	0x40013c00

08002b3c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b084      	sub	sp, #16
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
 8002b44:	460b      	mov	r3, r1
 8002b46:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8002b48:	887b      	ldrh	r3, [r7, #2]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d104      	bne.n	8002b58 <HAL_GPIO_ReadPin+0x1c>
 8002b4e:	f240 1177 	movw	r1, #375	; 0x177
 8002b52:	4809      	ldr	r0, [pc, #36]	; (8002b78 <HAL_GPIO_ReadPin+0x3c>)
 8002b54:	f7fe feeb 	bl	800192e <assert_failed>

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	691a      	ldr	r2, [r3, #16]
 8002b5c:	887b      	ldrh	r3, [r7, #2]
 8002b5e:	4013      	ands	r3, r2
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d002      	beq.n	8002b6a <HAL_GPIO_ReadPin+0x2e>
  {
    bitstatus = GPIO_PIN_SET;
 8002b64:	2301      	movs	r3, #1
 8002b66:	73fb      	strb	r3, [r7, #15]
 8002b68:	e001      	b.n	8002b6e <HAL_GPIO_ReadPin+0x32>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002b6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	3710      	adds	r7, #16
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}
 8002b78:	08012ba0 	.word	0x08012ba0

08002b7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b082      	sub	sp, #8
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
 8002b84:	460b      	mov	r3, r1
 8002b86:	807b      	strh	r3, [r7, #2]
 8002b88:	4613      	mov	r3, r2
 8002b8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8002b8c:	887b      	ldrh	r3, [r7, #2]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d104      	bne.n	8002b9c <HAL_GPIO_WritePin+0x20>
 8002b92:	f240 1197 	movw	r1, #407	; 0x197
 8002b96:	480e      	ldr	r0, [pc, #56]	; (8002bd0 <HAL_GPIO_WritePin+0x54>)
 8002b98:	f7fe fec9 	bl	800192e <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8002b9c:	787b      	ldrb	r3, [r7, #1]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d007      	beq.n	8002bb2 <HAL_GPIO_WritePin+0x36>
 8002ba2:	787b      	ldrb	r3, [r7, #1]
 8002ba4:	2b01      	cmp	r3, #1
 8002ba6:	d004      	beq.n	8002bb2 <HAL_GPIO_WritePin+0x36>
 8002ba8:	f44f 71cc 	mov.w	r1, #408	; 0x198
 8002bac:	4808      	ldr	r0, [pc, #32]	; (8002bd0 <HAL_GPIO_WritePin+0x54>)
 8002bae:	f7fe febe 	bl	800192e <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8002bb2:	787b      	ldrb	r3, [r7, #1]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d003      	beq.n	8002bc0 <HAL_GPIO_WritePin+0x44>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002bb8:	887a      	ldrh	r2, [r7, #2]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002bbe:	e003      	b.n	8002bc8 <HAL_GPIO_WritePin+0x4c>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002bc0:	887b      	ldrh	r3, [r7, #2]
 8002bc2:	041a      	lsls	r2, r3, #16
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	619a      	str	r2, [r3, #24]
}
 8002bc8:	bf00      	nop
 8002bca:	3708      	adds	r7, #8
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}
 8002bd0:	08012ba0 	.word	0x08012ba0

08002bd4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b082      	sub	sp, #8
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	4603      	mov	r3, r0
 8002bdc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002bde:	4b08      	ldr	r3, [pc, #32]	; (8002c00 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002be0:	695a      	ldr	r2, [r3, #20]
 8002be2:	88fb      	ldrh	r3, [r7, #6]
 8002be4:	4013      	ands	r3, r2
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d006      	beq.n	8002bf8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002bea:	4a05      	ldr	r2, [pc, #20]	; (8002c00 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002bec:	88fb      	ldrh	r3, [r7, #6]
 8002bee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002bf0:	88fb      	ldrh	r3, [r7, #6]
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f7fe fe58 	bl	80018a8 <HAL_GPIO_EXTI_Callback>
  }
}
 8002bf8:	bf00      	nop
 8002bfa:	3708      	adds	r7, #8
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}
 8002c00:	40013c00 	.word	0x40013c00

08002c04 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b082      	sub	sp, #8
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d101      	bne.n	8002c16 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e107      	b.n	8002e26 <HAL_I2C_Init+0x222>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a85      	ldr	r2, [pc, #532]	; (8002e30 <HAL_I2C_Init+0x22c>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d013      	beq.n	8002c48 <HAL_I2C_Init+0x44>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a83      	ldr	r2, [pc, #524]	; (8002e34 <HAL_I2C_Init+0x230>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d00e      	beq.n	8002c48 <HAL_I2C_Init+0x44>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a82      	ldr	r2, [pc, #520]	; (8002e38 <HAL_I2C_Init+0x234>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d009      	beq.n	8002c48 <HAL_I2C_Init+0x44>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a80      	ldr	r2, [pc, #512]	; (8002e3c <HAL_I2C_Init+0x238>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d004      	beq.n	8002c48 <HAL_I2C_Init+0x44>
 8002c3e:	f240 2119 	movw	r1, #537	; 0x219
 8002c42:	487f      	ldr	r0, [pc, #508]	; (8002e40 <HAL_I2C_Init+0x23c>)
 8002c44:	f7fe fe73 	bl	800192e <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c50:	d304      	bcc.n	8002c5c <HAL_I2C_Init+0x58>
 8002c52:	f240 211a 	movw	r1, #538	; 0x21a
 8002c56:	487a      	ldr	r0, [pc, #488]	; (8002e40 <HAL_I2C_Init+0x23c>)
 8002c58:	f7fe fe69 	bl	800192e <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	d008      	beq.n	8002c76 <HAL_I2C_Init+0x72>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	68db      	ldr	r3, [r3, #12]
 8002c68:	2b02      	cmp	r3, #2
 8002c6a:	d004      	beq.n	8002c76 <HAL_I2C_Init+0x72>
 8002c6c:	f240 211b 	movw	r1, #539	; 0x21b
 8002c70:	4873      	ldr	r0, [pc, #460]	; (8002e40 <HAL_I2C_Init+0x23c>)
 8002c72:	f7fe fe5c 	bl	800192e <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	691b      	ldr	r3, [r3, #16]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d009      	beq.n	8002c92 <HAL_I2C_Init+0x8e>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	691b      	ldr	r3, [r3, #16]
 8002c82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c86:	d004      	beq.n	8002c92 <HAL_I2C_Init+0x8e>
 8002c88:	f44f 7107 	mov.w	r1, #540	; 0x21c
 8002c8c:	486c      	ldr	r0, [pc, #432]	; (8002e40 <HAL_I2C_Init+0x23c>)
 8002c8e:	f7fe fe4e 	bl	800192e <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	695b      	ldr	r3, [r3, #20]
 8002c96:	2bff      	cmp	r3, #255	; 0xff
 8002c98:	d904      	bls.n	8002ca4 <HAL_I2C_Init+0xa0>
 8002c9a:	f240 211d 	movw	r1, #541	; 0x21d
 8002c9e:	4868      	ldr	r0, [pc, #416]	; (8002e40 <HAL_I2C_Init+0x23c>)
 8002ca0:	f7fe fe45 	bl	800192e <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	699b      	ldr	r3, [r3, #24]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d020      	beq.n	8002cee <HAL_I2C_Init+0xea>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	699b      	ldr	r3, [r3, #24]
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	d01c      	beq.n	8002cee <HAL_I2C_Init+0xea>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	699b      	ldr	r3, [r3, #24]
 8002cb8:	2b02      	cmp	r3, #2
 8002cba:	d018      	beq.n	8002cee <HAL_I2C_Init+0xea>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	699b      	ldr	r3, [r3, #24]
 8002cc0:	2b03      	cmp	r3, #3
 8002cc2:	d014      	beq.n	8002cee <HAL_I2C_Init+0xea>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	699b      	ldr	r3, [r3, #24]
 8002cc8:	2b04      	cmp	r3, #4
 8002cca:	d010      	beq.n	8002cee <HAL_I2C_Init+0xea>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	699b      	ldr	r3, [r3, #24]
 8002cd0:	2b05      	cmp	r3, #5
 8002cd2:	d00c      	beq.n	8002cee <HAL_I2C_Init+0xea>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	699b      	ldr	r3, [r3, #24]
 8002cd8:	2b06      	cmp	r3, #6
 8002cda:	d008      	beq.n	8002cee <HAL_I2C_Init+0xea>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	699b      	ldr	r3, [r3, #24]
 8002ce0:	2b07      	cmp	r3, #7
 8002ce2:	d004      	beq.n	8002cee <HAL_I2C_Init+0xea>
 8002ce4:	f240 211e 	movw	r1, #542	; 0x21e
 8002ce8:	4855      	ldr	r0, [pc, #340]	; (8002e40 <HAL_I2C_Init+0x23c>)
 8002cea:	f7fe fe20 	bl	800192e <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	69db      	ldr	r3, [r3, #28]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d009      	beq.n	8002d0a <HAL_I2C_Init+0x106>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	69db      	ldr	r3, [r3, #28]
 8002cfa:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002cfe:	d004      	beq.n	8002d0a <HAL_I2C_Init+0x106>
 8002d00:	f240 211f 	movw	r1, #543	; 0x21f
 8002d04:	484e      	ldr	r0, [pc, #312]	; (8002e40 <HAL_I2C_Init+0x23c>)
 8002d06:	f7fe fe12 	bl	800192e <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6a1b      	ldr	r3, [r3, #32]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d009      	beq.n	8002d26 <HAL_I2C_Init+0x122>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6a1b      	ldr	r3, [r3, #32]
 8002d16:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002d1a:	d004      	beq.n	8002d26 <HAL_I2C_Init+0x122>
 8002d1c:	f44f 7108 	mov.w	r1, #544	; 0x220
 8002d20:	4847      	ldr	r0, [pc, #284]	; (8002e40 <HAL_I2C_Init+0x23c>)
 8002d22:	f7fe fe04 	bl	800192e <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d2c:	b2db      	uxtb	r3, r3
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d106      	bne.n	8002d40 <HAL_I2C_Init+0x13c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2200      	movs	r2, #0
 8002d36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	f7fe fa90 	bl	8001260 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2224      	movs	r2, #36	; 0x24
 8002d44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f022 0201 	bic.w	r2, r2, #1
 8002d56:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	685a      	ldr	r2, [r3, #4]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002d64:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	689a      	ldr	r2, [r3, #8]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002d74:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	68db      	ldr	r3, [r3, #12]
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	d107      	bne.n	8002d8e <HAL_I2C_Init+0x18a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	689a      	ldr	r2, [r3, #8]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d8a:	609a      	str	r2, [r3, #8]
 8002d8c:	e006      	b.n	8002d9c <HAL_I2C_Init+0x198>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	689a      	ldr	r2, [r3, #8]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002d9a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	68db      	ldr	r3, [r3, #12]
 8002da0:	2b02      	cmp	r3, #2
 8002da2:	d104      	bne.n	8002dae <HAL_I2C_Init+0x1aa>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002dac:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	6859      	ldr	r1, [r3, #4]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	4b22      	ldr	r3, [pc, #136]	; (8002e44 <HAL_I2C_Init+0x240>)
 8002dba:	430b      	orrs	r3, r1
 8002dbc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	68da      	ldr	r2, [r3, #12]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002dcc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	691a      	ldr	r2, [r3, #16]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	695b      	ldr	r3, [r3, #20]
 8002dd6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	699b      	ldr	r3, [r3, #24]
 8002dde:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	430a      	orrs	r2, r1
 8002de6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	69d9      	ldr	r1, [r3, #28]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6a1a      	ldr	r2, [r3, #32]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	430a      	orrs	r2, r1
 8002df6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f042 0201 	orr.w	r2, r2, #1
 8002e06:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2220      	movs	r2, #32
 8002e12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002e24:	2300      	movs	r3, #0
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	3708      	adds	r7, #8
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}
 8002e2e:	bf00      	nop
 8002e30:	40005400 	.word	0x40005400
 8002e34:	40005800 	.word	0x40005800
 8002e38:	40005c00 	.word	0x40005c00
 8002e3c:	40006000 	.word	0x40006000
 8002e40:	08012bdc 	.word	0x08012bdc
 8002e44:	02008000 	.word	0x02008000

08002e48 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b088      	sub	sp, #32
 8002e4c:	af02      	add	r7, sp, #8
 8002e4e:	60f8      	str	r0, [r7, #12]
 8002e50:	607a      	str	r2, [r7, #4]
 8002e52:	461a      	mov	r2, r3
 8002e54:	460b      	mov	r3, r1
 8002e56:	817b      	strh	r3, [r7, #10]
 8002e58:	4613      	mov	r3, r2
 8002e5a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e62:	b2db      	uxtb	r3, r3
 8002e64:	2b20      	cmp	r3, #32
 8002e66:	f040 80da 	bne.w	800301e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d101      	bne.n	8002e78 <HAL_I2C_Master_Transmit+0x30>
 8002e74:	2302      	movs	r3, #2
 8002e76:	e0d3      	b.n	8003020 <HAL_I2C_Master_Transmit+0x1d8>
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002e80:	f7ff f8ea 	bl	8002058 <HAL_GetTick>
 8002e84:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	9300      	str	r3, [sp, #0]
 8002e8a:	2319      	movs	r3, #25
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002e92:	68f8      	ldr	r0, [r7, #12]
 8002e94:	f000 f9e6 	bl	8003264 <I2C_WaitOnFlagUntilTimeout>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d001      	beq.n	8002ea2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e0be      	b.n	8003020 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	2221      	movs	r2, #33	; 0x21
 8002ea6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	2210      	movs	r2, #16
 8002eae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	687a      	ldr	r2, [r7, #4]
 8002ebc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	893a      	ldrh	r2, [r7, #8]
 8002ec2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ece:	b29b      	uxth	r3, r3
 8002ed0:	2bff      	cmp	r3, #255	; 0xff
 8002ed2:	d90e      	bls.n	8002ef2 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	22ff      	movs	r2, #255	; 0xff
 8002ed8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ede:	b2da      	uxtb	r2, r3
 8002ee0:	8979      	ldrh	r1, [r7, #10]
 8002ee2:	4b51      	ldr	r3, [pc, #324]	; (8003028 <HAL_I2C_Master_Transmit+0x1e0>)
 8002ee4:	9300      	str	r3, [sp, #0]
 8002ee6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002eea:	68f8      	ldr	r0, [r7, #12]
 8002eec:	f000 fbd0 	bl	8003690 <I2C_TransferConfig>
 8002ef0:	e06c      	b.n	8002fcc <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ef6:	b29a      	uxth	r2, r3
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f00:	b2da      	uxtb	r2, r3
 8002f02:	8979      	ldrh	r1, [r7, #10]
 8002f04:	4b48      	ldr	r3, [pc, #288]	; (8003028 <HAL_I2C_Master_Transmit+0x1e0>)
 8002f06:	9300      	str	r3, [sp, #0]
 8002f08:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f0c:	68f8      	ldr	r0, [r7, #12]
 8002f0e:	f000 fbbf 	bl	8003690 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002f12:	e05b      	b.n	8002fcc <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f14:	697a      	ldr	r2, [r7, #20]
 8002f16:	6a39      	ldr	r1, [r7, #32]
 8002f18:	68f8      	ldr	r0, [r7, #12]
 8002f1a:	f000 f9e3 	bl	80032e4 <I2C_WaitOnTXISFlagUntilTimeout>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d001      	beq.n	8002f28 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002f24:	2301      	movs	r3, #1
 8002f26:	e07b      	b.n	8003020 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f2c:	781a      	ldrb	r2, [r3, #0]
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f38:	1c5a      	adds	r2, r3, #1
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f42:	b29b      	uxth	r3, r3
 8002f44:	3b01      	subs	r3, #1
 8002f46:	b29a      	uxth	r2, r3
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f50:	3b01      	subs	r3, #1
 8002f52:	b29a      	uxth	r2, r3
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f5c:	b29b      	uxth	r3, r3
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d034      	beq.n	8002fcc <HAL_I2C_Master_Transmit+0x184>
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d130      	bne.n	8002fcc <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	9300      	str	r3, [sp, #0]
 8002f6e:	6a3b      	ldr	r3, [r7, #32]
 8002f70:	2200      	movs	r2, #0
 8002f72:	2180      	movs	r1, #128	; 0x80
 8002f74:	68f8      	ldr	r0, [r7, #12]
 8002f76:	f000 f975 	bl	8003264 <I2C_WaitOnFlagUntilTimeout>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d001      	beq.n	8002f84 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	e04d      	b.n	8003020 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f88:	b29b      	uxth	r3, r3
 8002f8a:	2bff      	cmp	r3, #255	; 0xff
 8002f8c:	d90e      	bls.n	8002fac <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	22ff      	movs	r2, #255	; 0xff
 8002f92:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f98:	b2da      	uxtb	r2, r3
 8002f9a:	8979      	ldrh	r1, [r7, #10]
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	9300      	str	r3, [sp, #0]
 8002fa0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002fa4:	68f8      	ldr	r0, [r7, #12]
 8002fa6:	f000 fb73 	bl	8003690 <I2C_TransferConfig>
 8002faa:	e00f      	b.n	8002fcc <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fb0:	b29a      	uxth	r2, r3
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fba:	b2da      	uxtb	r2, r3
 8002fbc:	8979      	ldrh	r1, [r7, #10]
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	9300      	str	r3, [sp, #0]
 8002fc2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002fc6:	68f8      	ldr	r0, [r7, #12]
 8002fc8:	f000 fb62 	bl	8003690 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fd0:	b29b      	uxth	r3, r3
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d19e      	bne.n	8002f14 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fd6:	697a      	ldr	r2, [r7, #20]
 8002fd8:	6a39      	ldr	r1, [r7, #32]
 8002fda:	68f8      	ldr	r0, [r7, #12]
 8002fdc:	f000 f9c2 	bl	8003364 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d001      	beq.n	8002fea <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e01a      	b.n	8003020 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	2220      	movs	r2, #32
 8002ff0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	6859      	ldr	r1, [r3, #4]
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681a      	ldr	r2, [r3, #0]
 8002ffc:	4b0b      	ldr	r3, [pc, #44]	; (800302c <HAL_I2C_Master_Transmit+0x1e4>)
 8002ffe:	400b      	ands	r3, r1
 8003000:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2220      	movs	r2, #32
 8003006:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2200      	movs	r2, #0
 800300e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	2200      	movs	r2, #0
 8003016:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800301a:	2300      	movs	r3, #0
 800301c:	e000      	b.n	8003020 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800301e:	2302      	movs	r3, #2
  }
}
 8003020:	4618      	mov	r0, r3
 8003022:	3718      	adds	r7, #24
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}
 8003028:	80002000 	.word	0x80002000
 800302c:	fe00e800 	.word	0xfe00e800

08003030 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b088      	sub	sp, #32
 8003034:	af02      	add	r7, sp, #8
 8003036:	60f8      	str	r0, [r7, #12]
 8003038:	607a      	str	r2, [r7, #4]
 800303a:	461a      	mov	r2, r3
 800303c:	460b      	mov	r3, r1
 800303e:	817b      	strh	r3, [r7, #10]
 8003040:	4613      	mov	r3, r2
 8003042:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800304a:	b2db      	uxtb	r3, r3
 800304c:	2b20      	cmp	r3, #32
 800304e:	f040 80db 	bne.w	8003208 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003058:	2b01      	cmp	r3, #1
 800305a:	d101      	bne.n	8003060 <HAL_I2C_Master_Receive+0x30>
 800305c:	2302      	movs	r3, #2
 800305e:	e0d4      	b.n	800320a <HAL_I2C_Master_Receive+0x1da>
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2201      	movs	r2, #1
 8003064:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003068:	f7fe fff6 	bl	8002058 <HAL_GetTick>
 800306c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	9300      	str	r3, [sp, #0]
 8003072:	2319      	movs	r3, #25
 8003074:	2201      	movs	r2, #1
 8003076:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800307a:	68f8      	ldr	r0, [r7, #12]
 800307c:	f000 f8f2 	bl	8003264 <I2C_WaitOnFlagUntilTimeout>
 8003080:	4603      	mov	r3, r0
 8003082:	2b00      	cmp	r3, #0
 8003084:	d001      	beq.n	800308a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	e0bf      	b.n	800320a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2222      	movs	r2, #34	; 0x22
 800308e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2210      	movs	r2, #16
 8003096:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2200      	movs	r2, #0
 800309e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	687a      	ldr	r2, [r7, #4]
 80030a4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	893a      	ldrh	r2, [r7, #8]
 80030aa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	2200      	movs	r2, #0
 80030b0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030b6:	b29b      	uxth	r3, r3
 80030b8:	2bff      	cmp	r3, #255	; 0xff
 80030ba:	d90e      	bls.n	80030da <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	22ff      	movs	r2, #255	; 0xff
 80030c0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030c6:	b2da      	uxtb	r2, r3
 80030c8:	8979      	ldrh	r1, [r7, #10]
 80030ca:	4b52      	ldr	r3, [pc, #328]	; (8003214 <HAL_I2C_Master_Receive+0x1e4>)
 80030cc:	9300      	str	r3, [sp, #0]
 80030ce:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80030d2:	68f8      	ldr	r0, [r7, #12]
 80030d4:	f000 fadc 	bl	8003690 <I2C_TransferConfig>
 80030d8:	e06d      	b.n	80031b6 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030de:	b29a      	uxth	r2, r3
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030e8:	b2da      	uxtb	r2, r3
 80030ea:	8979      	ldrh	r1, [r7, #10]
 80030ec:	4b49      	ldr	r3, [pc, #292]	; (8003214 <HAL_I2C_Master_Receive+0x1e4>)
 80030ee:	9300      	str	r3, [sp, #0]
 80030f0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80030f4:	68f8      	ldr	r0, [r7, #12]
 80030f6:	f000 facb 	bl	8003690 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80030fa:	e05c      	b.n	80031b6 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030fc:	697a      	ldr	r2, [r7, #20]
 80030fe:	6a39      	ldr	r1, [r7, #32]
 8003100:	68f8      	ldr	r0, [r7, #12]
 8003102:	f000 f96b 	bl	80033dc <I2C_WaitOnRXNEFlagUntilTimeout>
 8003106:	4603      	mov	r3, r0
 8003108:	2b00      	cmp	r3, #0
 800310a:	d001      	beq.n	8003110 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	e07c      	b.n	800320a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800311a:	b2d2      	uxtb	r2, r2
 800311c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003122:	1c5a      	adds	r2, r3, #1
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800312c:	3b01      	subs	r3, #1
 800312e:	b29a      	uxth	r2, r3
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003138:	b29b      	uxth	r3, r3
 800313a:	3b01      	subs	r3, #1
 800313c:	b29a      	uxth	r2, r3
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003146:	b29b      	uxth	r3, r3
 8003148:	2b00      	cmp	r3, #0
 800314a:	d034      	beq.n	80031b6 <HAL_I2C_Master_Receive+0x186>
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003150:	2b00      	cmp	r3, #0
 8003152:	d130      	bne.n	80031b6 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	9300      	str	r3, [sp, #0]
 8003158:	6a3b      	ldr	r3, [r7, #32]
 800315a:	2200      	movs	r2, #0
 800315c:	2180      	movs	r1, #128	; 0x80
 800315e:	68f8      	ldr	r0, [r7, #12]
 8003160:	f000 f880 	bl	8003264 <I2C_WaitOnFlagUntilTimeout>
 8003164:	4603      	mov	r3, r0
 8003166:	2b00      	cmp	r3, #0
 8003168:	d001      	beq.n	800316e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e04d      	b.n	800320a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003172:	b29b      	uxth	r3, r3
 8003174:	2bff      	cmp	r3, #255	; 0xff
 8003176:	d90e      	bls.n	8003196 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	22ff      	movs	r2, #255	; 0xff
 800317c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003182:	b2da      	uxtb	r2, r3
 8003184:	8979      	ldrh	r1, [r7, #10]
 8003186:	2300      	movs	r3, #0
 8003188:	9300      	str	r3, [sp, #0]
 800318a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800318e:	68f8      	ldr	r0, [r7, #12]
 8003190:	f000 fa7e 	bl	8003690 <I2C_TransferConfig>
 8003194:	e00f      	b.n	80031b6 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800319a:	b29a      	uxth	r2, r3
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031a4:	b2da      	uxtb	r2, r3
 80031a6:	8979      	ldrh	r1, [r7, #10]
 80031a8:	2300      	movs	r3, #0
 80031aa:	9300      	str	r3, [sp, #0]
 80031ac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80031b0:	68f8      	ldr	r0, [r7, #12]
 80031b2:	f000 fa6d 	bl	8003690 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031ba:	b29b      	uxth	r3, r3
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d19d      	bne.n	80030fc <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031c0:	697a      	ldr	r2, [r7, #20]
 80031c2:	6a39      	ldr	r1, [r7, #32]
 80031c4:	68f8      	ldr	r0, [r7, #12]
 80031c6:	f000 f8cd 	bl	8003364 <I2C_WaitOnSTOPFlagUntilTimeout>
 80031ca:	4603      	mov	r3, r0
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d001      	beq.n	80031d4 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	e01a      	b.n	800320a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	2220      	movs	r2, #32
 80031da:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	6859      	ldr	r1, [r3, #4]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	4b0c      	ldr	r3, [pc, #48]	; (8003218 <HAL_I2C_Master_Receive+0x1e8>)
 80031e8:	400b      	ands	r3, r1
 80031ea:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2220      	movs	r2, #32
 80031f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	2200      	movs	r2, #0
 80031f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	2200      	movs	r2, #0
 8003200:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003204:	2300      	movs	r3, #0
 8003206:	e000      	b.n	800320a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8003208:	2302      	movs	r3, #2
  }
}
 800320a:	4618      	mov	r0, r3
 800320c:	3718      	adds	r7, #24
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}
 8003212:	bf00      	nop
 8003214:	80002400 	.word	0x80002400
 8003218:	fe00e800 	.word	0xfe00e800

0800321c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800321c:	b480      	push	{r7}
 800321e:	b083      	sub	sp, #12
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	699b      	ldr	r3, [r3, #24]
 800322a:	f003 0302 	and.w	r3, r3, #2
 800322e:	2b02      	cmp	r3, #2
 8003230:	d103      	bne.n	800323a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	2200      	movs	r2, #0
 8003238:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	699b      	ldr	r3, [r3, #24]
 8003240:	f003 0301 	and.w	r3, r3, #1
 8003244:	2b01      	cmp	r3, #1
 8003246:	d007      	beq.n	8003258 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	699a      	ldr	r2, [r3, #24]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f042 0201 	orr.w	r2, r2, #1
 8003256:	619a      	str	r2, [r3, #24]
  }
}
 8003258:	bf00      	nop
 800325a:	370c      	adds	r7, #12
 800325c:	46bd      	mov	sp, r7
 800325e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003262:	4770      	bx	lr

08003264 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b084      	sub	sp, #16
 8003268:	af00      	add	r7, sp, #0
 800326a:	60f8      	str	r0, [r7, #12]
 800326c:	60b9      	str	r1, [r7, #8]
 800326e:	603b      	str	r3, [r7, #0]
 8003270:	4613      	mov	r3, r2
 8003272:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003274:	e022      	b.n	80032bc <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	f1b3 3fff 	cmp.w	r3, #4294967295
 800327c:	d01e      	beq.n	80032bc <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800327e:	f7fe feeb 	bl	8002058 <HAL_GetTick>
 8003282:	4602      	mov	r2, r0
 8003284:	69bb      	ldr	r3, [r7, #24]
 8003286:	1ad3      	subs	r3, r2, r3
 8003288:	683a      	ldr	r2, [r7, #0]
 800328a:	429a      	cmp	r2, r3
 800328c:	d302      	bcc.n	8003294 <I2C_WaitOnFlagUntilTimeout+0x30>
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d113      	bne.n	80032bc <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003298:	f043 0220 	orr.w	r2, r3, #32
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	2220      	movs	r2, #32
 80032a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	2200      	movs	r2, #0
 80032ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2200      	movs	r2, #0
 80032b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80032b8:	2301      	movs	r3, #1
 80032ba:	e00f      	b.n	80032dc <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	699a      	ldr	r2, [r3, #24]
 80032c2:	68bb      	ldr	r3, [r7, #8]
 80032c4:	4013      	ands	r3, r2
 80032c6:	68ba      	ldr	r2, [r7, #8]
 80032c8:	429a      	cmp	r2, r3
 80032ca:	bf0c      	ite	eq
 80032cc:	2301      	moveq	r3, #1
 80032ce:	2300      	movne	r3, #0
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	461a      	mov	r2, r3
 80032d4:	79fb      	ldrb	r3, [r7, #7]
 80032d6:	429a      	cmp	r2, r3
 80032d8:	d0cd      	beq.n	8003276 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80032da:	2300      	movs	r3, #0
}
 80032dc:	4618      	mov	r0, r3
 80032de:	3710      	adds	r7, #16
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}

080032e4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b084      	sub	sp, #16
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	60f8      	str	r0, [r7, #12]
 80032ec:	60b9      	str	r1, [r7, #8]
 80032ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80032f0:	e02c      	b.n	800334c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80032f2:	687a      	ldr	r2, [r7, #4]
 80032f4:	68b9      	ldr	r1, [r7, #8]
 80032f6:	68f8      	ldr	r0, [r7, #12]
 80032f8:	f000 f8ea 	bl	80034d0 <I2C_IsErrorOccurred>
 80032fc:	4603      	mov	r3, r0
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d001      	beq.n	8003306 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	e02a      	b.n	800335c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	f1b3 3fff 	cmp.w	r3, #4294967295
 800330c:	d01e      	beq.n	800334c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800330e:	f7fe fea3 	bl	8002058 <HAL_GetTick>
 8003312:	4602      	mov	r2, r0
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	1ad3      	subs	r3, r2, r3
 8003318:	68ba      	ldr	r2, [r7, #8]
 800331a:	429a      	cmp	r2, r3
 800331c:	d302      	bcc.n	8003324 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d113      	bne.n	800334c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003328:	f043 0220 	orr.w	r2, r3, #32
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	2220      	movs	r2, #32
 8003334:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	2200      	movs	r2, #0
 800333c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2200      	movs	r2, #0
 8003344:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003348:	2301      	movs	r3, #1
 800334a:	e007      	b.n	800335c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	699b      	ldr	r3, [r3, #24]
 8003352:	f003 0302 	and.w	r3, r3, #2
 8003356:	2b02      	cmp	r3, #2
 8003358:	d1cb      	bne.n	80032f2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800335a:	2300      	movs	r3, #0
}
 800335c:	4618      	mov	r0, r3
 800335e:	3710      	adds	r7, #16
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}

08003364 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b084      	sub	sp, #16
 8003368:	af00      	add	r7, sp, #0
 800336a:	60f8      	str	r0, [r7, #12]
 800336c:	60b9      	str	r1, [r7, #8]
 800336e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003370:	e028      	b.n	80033c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003372:	687a      	ldr	r2, [r7, #4]
 8003374:	68b9      	ldr	r1, [r7, #8]
 8003376:	68f8      	ldr	r0, [r7, #12]
 8003378:	f000 f8aa 	bl	80034d0 <I2C_IsErrorOccurred>
 800337c:	4603      	mov	r3, r0
 800337e:	2b00      	cmp	r3, #0
 8003380:	d001      	beq.n	8003386 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	e026      	b.n	80033d4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003386:	f7fe fe67 	bl	8002058 <HAL_GetTick>
 800338a:	4602      	mov	r2, r0
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	1ad3      	subs	r3, r2, r3
 8003390:	68ba      	ldr	r2, [r7, #8]
 8003392:	429a      	cmp	r2, r3
 8003394:	d302      	bcc.n	800339c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d113      	bne.n	80033c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033a0:	f043 0220 	orr.w	r2, r3, #32
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	2220      	movs	r2, #32
 80033ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	2200      	movs	r2, #0
 80033b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2200      	movs	r2, #0
 80033bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80033c0:	2301      	movs	r3, #1
 80033c2:	e007      	b.n	80033d4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	699b      	ldr	r3, [r3, #24]
 80033ca:	f003 0320 	and.w	r3, r3, #32
 80033ce:	2b20      	cmp	r3, #32
 80033d0:	d1cf      	bne.n	8003372 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80033d2:	2300      	movs	r3, #0
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	3710      	adds	r7, #16
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}

080033dc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b084      	sub	sp, #16
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	60f8      	str	r0, [r7, #12]
 80033e4:	60b9      	str	r1, [r7, #8]
 80033e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80033e8:	e064      	b.n	80034b4 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80033ea:	687a      	ldr	r2, [r7, #4]
 80033ec:	68b9      	ldr	r1, [r7, #8]
 80033ee:	68f8      	ldr	r0, [r7, #12]
 80033f0:	f000 f86e 	bl	80034d0 <I2C_IsErrorOccurred>
 80033f4:	4603      	mov	r3, r0
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d001      	beq.n	80033fe <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	e062      	b.n	80034c4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	699b      	ldr	r3, [r3, #24]
 8003404:	f003 0320 	and.w	r3, r3, #32
 8003408:	2b20      	cmp	r3, #32
 800340a:	d138      	bne.n	800347e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	699b      	ldr	r3, [r3, #24]
 8003412:	f003 0304 	and.w	r3, r3, #4
 8003416:	2b04      	cmp	r3, #4
 8003418:	d105      	bne.n	8003426 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800341e:	2b00      	cmp	r3, #0
 8003420:	d001      	beq.n	8003426 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8003422:	2300      	movs	r3, #0
 8003424:	e04e      	b.n	80034c4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	699b      	ldr	r3, [r3, #24]
 800342c:	f003 0310 	and.w	r3, r3, #16
 8003430:	2b10      	cmp	r3, #16
 8003432:	d107      	bne.n	8003444 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	2210      	movs	r2, #16
 800343a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	2204      	movs	r2, #4
 8003440:	645a      	str	r2, [r3, #68]	; 0x44
 8003442:	e002      	b.n	800344a <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	2200      	movs	r2, #0
 8003448:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	2220      	movs	r2, #32
 8003450:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	6859      	ldr	r1, [r3, #4]
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681a      	ldr	r2, [r3, #0]
 800345c:	4b1b      	ldr	r3, [pc, #108]	; (80034cc <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 800345e:	400b      	ands	r3, r1
 8003460:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	2220      	movs	r2, #32
 8003466:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2200      	movs	r2, #0
 800346e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2200      	movs	r2, #0
 8003476:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	e022      	b.n	80034c4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800347e:	f7fe fdeb 	bl	8002058 <HAL_GetTick>
 8003482:	4602      	mov	r2, r0
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	1ad3      	subs	r3, r2, r3
 8003488:	68ba      	ldr	r2, [r7, #8]
 800348a:	429a      	cmp	r2, r3
 800348c:	d302      	bcc.n	8003494 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d10f      	bne.n	80034b4 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003498:	f043 0220 	orr.w	r2, r3, #32
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	2220      	movs	r2, #32
 80034a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	2200      	movs	r2, #0
 80034ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	e007      	b.n	80034c4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	699b      	ldr	r3, [r3, #24]
 80034ba:	f003 0304 	and.w	r3, r3, #4
 80034be:	2b04      	cmp	r3, #4
 80034c0:	d193      	bne.n	80033ea <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80034c2:	2300      	movs	r3, #0
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	3710      	adds	r7, #16
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}
 80034cc:	fe00e800 	.word	0xfe00e800

080034d0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b08a      	sub	sp, #40	; 0x28
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	60f8      	str	r0, [r7, #12]
 80034d8:	60b9      	str	r1, [r7, #8]
 80034da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034dc:	2300      	movs	r3, #0
 80034de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	699b      	ldr	r3, [r3, #24]
 80034e8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80034ea:	2300      	movs	r3, #0
 80034ec:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80034f2:	69bb      	ldr	r3, [r7, #24]
 80034f4:	f003 0310 	and.w	r3, r3, #16
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d068      	beq.n	80035ce <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	2210      	movs	r2, #16
 8003502:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003504:	e049      	b.n	800359a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	f1b3 3fff 	cmp.w	r3, #4294967295
 800350c:	d045      	beq.n	800359a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800350e:	f7fe fda3 	bl	8002058 <HAL_GetTick>
 8003512:	4602      	mov	r2, r0
 8003514:	69fb      	ldr	r3, [r7, #28]
 8003516:	1ad3      	subs	r3, r2, r3
 8003518:	68ba      	ldr	r2, [r7, #8]
 800351a:	429a      	cmp	r2, r3
 800351c:	d302      	bcc.n	8003524 <I2C_IsErrorOccurred+0x54>
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d13a      	bne.n	800359a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800352e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003536:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	699b      	ldr	r3, [r3, #24]
 800353e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003542:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003546:	d121      	bne.n	800358c <I2C_IsErrorOccurred+0xbc>
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800354e:	d01d      	beq.n	800358c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003550:	7cfb      	ldrb	r3, [r7, #19]
 8003552:	2b20      	cmp	r3, #32
 8003554:	d01a      	beq.n	800358c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	685a      	ldr	r2, [r3, #4]
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003564:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003566:	f7fe fd77 	bl	8002058 <HAL_GetTick>
 800356a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800356c:	e00e      	b.n	800358c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800356e:	f7fe fd73 	bl	8002058 <HAL_GetTick>
 8003572:	4602      	mov	r2, r0
 8003574:	69fb      	ldr	r3, [r7, #28]
 8003576:	1ad3      	subs	r3, r2, r3
 8003578:	2b19      	cmp	r3, #25
 800357a:	d907      	bls.n	800358c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 800357c:	6a3b      	ldr	r3, [r7, #32]
 800357e:	f043 0320 	orr.w	r3, r3, #32
 8003582:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800358a:	e006      	b.n	800359a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	699b      	ldr	r3, [r3, #24]
 8003592:	f003 0320 	and.w	r3, r3, #32
 8003596:	2b20      	cmp	r3, #32
 8003598:	d1e9      	bne.n	800356e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	699b      	ldr	r3, [r3, #24]
 80035a0:	f003 0320 	and.w	r3, r3, #32
 80035a4:	2b20      	cmp	r3, #32
 80035a6:	d003      	beq.n	80035b0 <I2C_IsErrorOccurred+0xe0>
 80035a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d0aa      	beq.n	8003506 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80035b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d103      	bne.n	80035c0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	2220      	movs	r2, #32
 80035be:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80035c0:	6a3b      	ldr	r3, [r7, #32]
 80035c2:	f043 0304 	orr.w	r3, r3, #4
 80035c6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	699b      	ldr	r3, [r3, #24]
 80035d4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80035d6:	69bb      	ldr	r3, [r7, #24]
 80035d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d00b      	beq.n	80035f8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80035e0:	6a3b      	ldr	r3, [r7, #32]
 80035e2:	f043 0301 	orr.w	r3, r3, #1
 80035e6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80035f0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80035f8:	69bb      	ldr	r3, [r7, #24]
 80035fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d00b      	beq.n	800361a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003602:	6a3b      	ldr	r3, [r7, #32]
 8003604:	f043 0308 	orr.w	r3, r3, #8
 8003608:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003612:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003614:	2301      	movs	r3, #1
 8003616:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800361a:	69bb      	ldr	r3, [r7, #24]
 800361c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003620:	2b00      	cmp	r3, #0
 8003622:	d00b      	beq.n	800363c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003624:	6a3b      	ldr	r3, [r7, #32]
 8003626:	f043 0302 	orr.w	r3, r3, #2
 800362a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003634:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800363c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003640:	2b00      	cmp	r3, #0
 8003642:	d01c      	beq.n	800367e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003644:	68f8      	ldr	r0, [r7, #12]
 8003646:	f7ff fde9 	bl	800321c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	6859      	ldr	r1, [r3, #4]
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	4b0d      	ldr	r3, [pc, #52]	; (800368c <I2C_IsErrorOccurred+0x1bc>)
 8003656:	400b      	ands	r3, r1
 8003658:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800365e:	6a3b      	ldr	r3, [r7, #32]
 8003660:	431a      	orrs	r2, r3
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	2220      	movs	r2, #32
 800366a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2200      	movs	r2, #0
 8003672:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	2200      	movs	r2, #0
 800367a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800367e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003682:	4618      	mov	r0, r3
 8003684:	3728      	adds	r7, #40	; 0x28
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}
 800368a:	bf00      	nop
 800368c:	fe00e800 	.word	0xfe00e800

08003690 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b086      	sub	sp, #24
 8003694:	af00      	add	r7, sp, #0
 8003696:	60f8      	str	r0, [r7, #12]
 8003698:	607b      	str	r3, [r7, #4]
 800369a:	460b      	mov	r3, r1
 800369c:	817b      	strh	r3, [r7, #10]
 800369e:	4613      	mov	r3, r2
 80036a0:	727b      	strb	r3, [r7, #9]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a2f      	ldr	r2, [pc, #188]	; (8003764 <I2C_TransferConfig+0xd4>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d013      	beq.n	80036d4 <I2C_TransferConfig+0x44>
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a2d      	ldr	r2, [pc, #180]	; (8003768 <I2C_TransferConfig+0xd8>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d00e      	beq.n	80036d4 <I2C_TransferConfig+0x44>
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a2c      	ldr	r2, [pc, #176]	; (800376c <I2C_TransferConfig+0xdc>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d009      	beq.n	80036d4 <I2C_TransferConfig+0x44>
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a2a      	ldr	r2, [pc, #168]	; (8003770 <I2C_TransferConfig+0xe0>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d004      	beq.n	80036d4 <I2C_TransferConfig+0x44>
 80036ca:	f641 3147 	movw	r1, #6983	; 0x1b47
 80036ce:	4829      	ldr	r0, [pc, #164]	; (8003774 <I2C_TransferConfig+0xe4>)
 80036d0:	f7fe f92d 	bl	800192e <assert_failed>
  assert_param(IS_TRANSFER_MODE(Mode));
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80036da:	d00b      	beq.n	80036f4 <I2C_TransferConfig+0x64>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80036e2:	d007      	beq.n	80036f4 <I2C_TransferConfig+0x64>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d004      	beq.n	80036f4 <I2C_TransferConfig+0x64>
 80036ea:	f641 3148 	movw	r1, #6984	; 0x1b48
 80036ee:	4821      	ldr	r0, [pc, #132]	; (8003774 <I2C_TransferConfig+0xe4>)
 80036f0:	f7fe f91d 	bl	800192e <assert_failed>
  assert_param(IS_TRANSFER_REQUEST(Request));
 80036f4:	6a3b      	ldr	r3, [r7, #32]
 80036f6:	4a20      	ldr	r2, [pc, #128]	; (8003778 <I2C_TransferConfig+0xe8>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d00f      	beq.n	800371c <I2C_TransferConfig+0x8c>
 80036fc:	6a3b      	ldr	r3, [r7, #32]
 80036fe:	4a1f      	ldr	r2, [pc, #124]	; (800377c <I2C_TransferConfig+0xec>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d00b      	beq.n	800371c <I2C_TransferConfig+0x8c>
 8003704:	6a3b      	ldr	r3, [r7, #32]
 8003706:	4a1e      	ldr	r2, [pc, #120]	; (8003780 <I2C_TransferConfig+0xf0>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d007      	beq.n	800371c <I2C_TransferConfig+0x8c>
 800370c:	6a3b      	ldr	r3, [r7, #32]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d004      	beq.n	800371c <I2C_TransferConfig+0x8c>
 8003712:	f641 3149 	movw	r1, #6985	; 0x1b49
 8003716:	4817      	ldr	r0, [pc, #92]	; (8003774 <I2C_TransferConfig+0xe4>)
 8003718:	f7fe f909 	bl	800192e <assert_failed>

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800371c:	897b      	ldrh	r3, [r7, #10]
 800371e:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003722:	7a7b      	ldrb	r3, [r7, #9]
 8003724:	041b      	lsls	r3, r3, #16
 8003726:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800372a:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003730:	6a3b      	ldr	r3, [r7, #32]
 8003732:	4313      	orrs	r3, r2
 8003734:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003738:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	685a      	ldr	r2, [r3, #4]
 8003740:	6a3b      	ldr	r3, [r7, #32]
 8003742:	0d5b      	lsrs	r3, r3, #21
 8003744:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003748:	4b0e      	ldr	r3, [pc, #56]	; (8003784 <I2C_TransferConfig+0xf4>)
 800374a:	430b      	orrs	r3, r1
 800374c:	43db      	mvns	r3, r3
 800374e:	ea02 0103 	and.w	r1, r2, r3
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	697a      	ldr	r2, [r7, #20]
 8003758:	430a      	orrs	r2, r1
 800375a:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800375c:	bf00      	nop
 800375e:	3718      	adds	r7, #24
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}
 8003764:	40005400 	.word	0x40005400
 8003768:	40005800 	.word	0x40005800
 800376c:	40005c00 	.word	0x40005c00
 8003770:	40006000 	.word	0x40006000
 8003774:	08012bdc 	.word	0x08012bdc
 8003778:	80004000 	.word	0x80004000
 800377c:	80002400 	.word	0x80002400
 8003780:	80002000 	.word	0x80002000
 8003784:	03ff63ff 	.word	0x03ff63ff

08003788 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b082      	sub	sp, #8
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
 8003790:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a32      	ldr	r2, [pc, #200]	; (8003860 <HAL_I2CEx_ConfigAnalogFilter+0xd8>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d012      	beq.n	80037c2 <HAL_I2CEx_ConfigAnalogFilter+0x3a>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a30      	ldr	r2, [pc, #192]	; (8003864 <HAL_I2CEx_ConfigAnalogFilter+0xdc>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d00d      	beq.n	80037c2 <HAL_I2CEx_ConfigAnalogFilter+0x3a>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a2f      	ldr	r2, [pc, #188]	; (8003868 <HAL_I2CEx_ConfigAnalogFilter+0xe0>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d008      	beq.n	80037c2 <HAL_I2CEx_ConfigAnalogFilter+0x3a>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a2d      	ldr	r2, [pc, #180]	; (800386c <HAL_I2CEx_ConfigAnalogFilter+0xe4>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d003      	beq.n	80037c2 <HAL_I2CEx_ConfigAnalogFilter+0x3a>
 80037ba:	215e      	movs	r1, #94	; 0x5e
 80037bc:	482c      	ldr	r0, [pc, #176]	; (8003870 <HAL_I2CEx_ConfigAnalogFilter+0xe8>)
 80037be:	f7fe f8b6 	bl	800192e <assert_failed>
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d007      	beq.n	80037d8 <HAL_I2CEx_ConfigAnalogFilter+0x50>
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037ce:	d003      	beq.n	80037d8 <HAL_I2CEx_ConfigAnalogFilter+0x50>
 80037d0:	215f      	movs	r1, #95	; 0x5f
 80037d2:	4827      	ldr	r0, [pc, #156]	; (8003870 <HAL_I2CEx_ConfigAnalogFilter+0xe8>)
 80037d4:	f7fe f8ab 	bl	800192e <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037de:	b2db      	uxtb	r3, r3
 80037e0:	2b20      	cmp	r3, #32
 80037e2:	d138      	bne.n	8003856 <HAL_I2CEx_ConfigAnalogFilter+0xce>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80037ea:	2b01      	cmp	r3, #1
 80037ec:	d101      	bne.n	80037f2 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
 80037ee:	2302      	movs	r3, #2
 80037f0:	e032      	b.n	8003858 <HAL_I2CEx_ConfigAnalogFilter+0xd0>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2201      	movs	r2, #1
 80037f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2224      	movs	r2, #36	; 0x24
 80037fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	681a      	ldr	r2, [r3, #0]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f022 0201 	bic.w	r2, r2, #1
 8003810:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	681a      	ldr	r2, [r3, #0]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003820:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	6819      	ldr	r1, [r3, #0]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	683a      	ldr	r2, [r7, #0]
 800382e:	430a      	orrs	r2, r1
 8003830:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	681a      	ldr	r2, [r3, #0]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f042 0201 	orr.w	r2, r2, #1
 8003840:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2220      	movs	r2, #32
 8003846:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2200      	movs	r2, #0
 800384e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003852:	2300      	movs	r3, #0
 8003854:	e000      	b.n	8003858 <HAL_I2CEx_ConfigAnalogFilter+0xd0>
  }
  else
  {
    return HAL_BUSY;
 8003856:	2302      	movs	r3, #2
  }
}
 8003858:	4618      	mov	r0, r3
 800385a:	3708      	adds	r7, #8
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}
 8003860:	40005400 	.word	0x40005400
 8003864:	40005800 	.word	0x40005800
 8003868:	40005c00 	.word	0x40005c00
 800386c:	40006000 	.word	0x40006000
 8003870:	08012c14 	.word	0x08012c14

08003874 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b084      	sub	sp, #16
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
 800387c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg;

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a31      	ldr	r2, [pc, #196]	; (8003948 <HAL_I2CEx_ConfigDigitalFilter+0xd4>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d012      	beq.n	80038ae <HAL_I2CEx_ConfigDigitalFilter+0x3a>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a2f      	ldr	r2, [pc, #188]	; (800394c <HAL_I2CEx_ConfigDigitalFilter+0xd8>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d00d      	beq.n	80038ae <HAL_I2CEx_ConfigDigitalFilter+0x3a>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a2e      	ldr	r2, [pc, #184]	; (8003950 <HAL_I2CEx_ConfigDigitalFilter+0xdc>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d008      	beq.n	80038ae <HAL_I2CEx_ConfigDigitalFilter+0x3a>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a2c      	ldr	r2, [pc, #176]	; (8003954 <HAL_I2CEx_ConfigDigitalFilter+0xe0>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d003      	beq.n	80038ae <HAL_I2CEx_ConfigDigitalFilter+0x3a>
 80038a6:	218c      	movs	r1, #140	; 0x8c
 80038a8:	482b      	ldr	r0, [pc, #172]	; (8003958 <HAL_I2CEx_ConfigDigitalFilter+0xe4>)
 80038aa:	f7fe f840 	bl	800192e <assert_failed>
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	2b0f      	cmp	r3, #15
 80038b2:	d903      	bls.n	80038bc <HAL_I2CEx_ConfigDigitalFilter+0x48>
 80038b4:	218d      	movs	r1, #141	; 0x8d
 80038b6:	4828      	ldr	r0, [pc, #160]	; (8003958 <HAL_I2CEx_ConfigDigitalFilter+0xe4>)
 80038b8:	f7fe f839 	bl	800192e <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038c2:	b2db      	uxtb	r3, r3
 80038c4:	2b20      	cmp	r3, #32
 80038c6:	d139      	bne.n	800393c <HAL_I2CEx_ConfigDigitalFilter+0xc8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80038ce:	2b01      	cmp	r3, #1
 80038d0:	d101      	bne.n	80038d6 <HAL_I2CEx_ConfigDigitalFilter+0x62>
 80038d2:	2302      	movs	r3, #2
 80038d4:	e033      	b.n	800393e <HAL_I2CEx_ConfigDigitalFilter+0xca>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2201      	movs	r2, #1
 80038da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2224      	movs	r2, #36	; 0x24
 80038e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	681a      	ldr	r2, [r3, #0]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f022 0201 	bic.w	r2, r2, #1
 80038f4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003904:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	021b      	lsls	r3, r3, #8
 800390a:	68fa      	ldr	r2, [r7, #12]
 800390c:	4313      	orrs	r3, r2
 800390e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	68fa      	ldr	r2, [r7, #12]
 8003916:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f042 0201 	orr.w	r2, r2, #1
 8003926:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2220      	movs	r2, #32
 800392c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2200      	movs	r2, #0
 8003934:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003938:	2300      	movs	r3, #0
 800393a:	e000      	b.n	800393e <HAL_I2CEx_ConfigDigitalFilter+0xca>
  }
  else
  {
    return HAL_BUSY;
 800393c:	2302      	movs	r3, #2
  }
}
 800393e:	4618      	mov	r0, r3
 8003940:	3710      	adds	r7, #16
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}
 8003946:	bf00      	nop
 8003948:	40005400 	.word	0x40005400
 800394c:	40005800 	.word	0x40005800
 8003950:	40005c00 	.word	0x40005c00
 8003954:	40006000 	.word	0x40006000
 8003958:	08012c14 	.word	0x08012c14

0800395c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b082      	sub	sp, #8
 8003960:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003962:	2300      	movs	r3, #0
 8003964:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003966:	4b23      	ldr	r3, [pc, #140]	; (80039f4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800396a:	4a22      	ldr	r2, [pc, #136]	; (80039f4 <HAL_PWREx_EnableOverDrive+0x98>)
 800396c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003970:	6413      	str	r3, [r2, #64]	; 0x40
 8003972:	4b20      	ldr	r3, [pc, #128]	; (80039f4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003976:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800397a:	603b      	str	r3, [r7, #0]
 800397c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800397e:	4b1e      	ldr	r3, [pc, #120]	; (80039f8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a1d      	ldr	r2, [pc, #116]	; (80039f8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003984:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003988:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800398a:	f7fe fb65 	bl	8002058 <HAL_GetTick>
 800398e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003990:	e009      	b.n	80039a6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003992:	f7fe fb61 	bl	8002058 <HAL_GetTick>
 8003996:	4602      	mov	r2, r0
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	1ad3      	subs	r3, r2, r3
 800399c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80039a0:	d901      	bls.n	80039a6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80039a2:	2303      	movs	r3, #3
 80039a4:	e022      	b.n	80039ec <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80039a6:	4b14      	ldr	r3, [pc, #80]	; (80039f8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039b2:	d1ee      	bne.n	8003992 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80039b4:	4b10      	ldr	r3, [pc, #64]	; (80039f8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a0f      	ldr	r2, [pc, #60]	; (80039f8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80039ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039be:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80039c0:	f7fe fb4a 	bl	8002058 <HAL_GetTick>
 80039c4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80039c6:	e009      	b.n	80039dc <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80039c8:	f7fe fb46 	bl	8002058 <HAL_GetTick>
 80039cc:	4602      	mov	r2, r0
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	1ad3      	subs	r3, r2, r3
 80039d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80039d6:	d901      	bls.n	80039dc <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80039d8:	2303      	movs	r3, #3
 80039da:	e007      	b.n	80039ec <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80039dc:	4b06      	ldr	r3, [pc, #24]	; (80039f8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80039e8:	d1ee      	bne.n	80039c8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80039ea:	2300      	movs	r3, #0
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	3708      	adds	r7, #8
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}
 80039f4:	40023800 	.word	0x40023800
 80039f8:	40007000 	.word	0x40007000

080039fc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b086      	sub	sp, #24
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003a04:	2300      	movs	r3, #0
 8003a06:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d101      	bne.n	8003a12 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e345      	b.n	800409e <HAL_RCC_OscConfig+0x6a2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	2b0f      	cmp	r3, #15
 8003a18:	d904      	bls.n	8003a24 <HAL_RCC_OscConfig+0x28>
 8003a1a:	f240 1163 	movw	r1, #355	; 0x163
 8003a1e:	4892      	ldr	r0, [pc, #584]	; (8003c68 <HAL_RCC_OscConfig+0x26c>)
 8003a20:	f7fd ff85 	bl	800192e <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f003 0301 	and.w	r3, r3, #1
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	f000 809a 	beq.w	8003b66 <HAL_RCC_OscConfig+0x16a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d00e      	beq.n	8003a58 <HAL_RCC_OscConfig+0x5c>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a42:	d009      	beq.n	8003a58 <HAL_RCC_OscConfig+0x5c>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a4c:	d004      	beq.n	8003a58 <HAL_RCC_OscConfig+0x5c>
 8003a4e:	f240 1169 	movw	r1, #361	; 0x169
 8003a52:	4885      	ldr	r0, [pc, #532]	; (8003c68 <HAL_RCC_OscConfig+0x26c>)
 8003a54:	f7fd ff6b 	bl	800192e <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003a58:	4b84      	ldr	r3, [pc, #528]	; (8003c6c <HAL_RCC_OscConfig+0x270>)
 8003a5a:	689b      	ldr	r3, [r3, #8]
 8003a5c:	f003 030c 	and.w	r3, r3, #12
 8003a60:	2b04      	cmp	r3, #4
 8003a62:	d00c      	beq.n	8003a7e <HAL_RCC_OscConfig+0x82>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a64:	4b81      	ldr	r3, [pc, #516]	; (8003c6c <HAL_RCC_OscConfig+0x270>)
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	f003 030c 	and.w	r3, r3, #12
 8003a6c:	2b08      	cmp	r3, #8
 8003a6e:	d112      	bne.n	8003a96 <HAL_RCC_OscConfig+0x9a>
 8003a70:	4b7e      	ldr	r3, [pc, #504]	; (8003c6c <HAL_RCC_OscConfig+0x270>)
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a78:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a7c:	d10b      	bne.n	8003a96 <HAL_RCC_OscConfig+0x9a>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a7e:	4b7b      	ldr	r3, [pc, #492]	; (8003c6c <HAL_RCC_OscConfig+0x270>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d06c      	beq.n	8003b64 <HAL_RCC_OscConfig+0x168>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d168      	bne.n	8003b64 <HAL_RCC_OscConfig+0x168>
      {
        return HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	e303      	b.n	800409e <HAL_RCC_OscConfig+0x6a2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a9e:	d106      	bne.n	8003aae <HAL_RCC_OscConfig+0xb2>
 8003aa0:	4b72      	ldr	r3, [pc, #456]	; (8003c6c <HAL_RCC_OscConfig+0x270>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a71      	ldr	r2, [pc, #452]	; (8003c6c <HAL_RCC_OscConfig+0x270>)
 8003aa6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003aaa:	6013      	str	r3, [r2, #0]
 8003aac:	e02e      	b.n	8003b0c <HAL_RCC_OscConfig+0x110>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d10c      	bne.n	8003ad0 <HAL_RCC_OscConfig+0xd4>
 8003ab6:	4b6d      	ldr	r3, [pc, #436]	; (8003c6c <HAL_RCC_OscConfig+0x270>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a6c      	ldr	r2, [pc, #432]	; (8003c6c <HAL_RCC_OscConfig+0x270>)
 8003abc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ac0:	6013      	str	r3, [r2, #0]
 8003ac2:	4b6a      	ldr	r3, [pc, #424]	; (8003c6c <HAL_RCC_OscConfig+0x270>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a69      	ldr	r2, [pc, #420]	; (8003c6c <HAL_RCC_OscConfig+0x270>)
 8003ac8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003acc:	6013      	str	r3, [r2, #0]
 8003ace:	e01d      	b.n	8003b0c <HAL_RCC_OscConfig+0x110>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ad8:	d10c      	bne.n	8003af4 <HAL_RCC_OscConfig+0xf8>
 8003ada:	4b64      	ldr	r3, [pc, #400]	; (8003c6c <HAL_RCC_OscConfig+0x270>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a63      	ldr	r2, [pc, #396]	; (8003c6c <HAL_RCC_OscConfig+0x270>)
 8003ae0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ae4:	6013      	str	r3, [r2, #0]
 8003ae6:	4b61      	ldr	r3, [pc, #388]	; (8003c6c <HAL_RCC_OscConfig+0x270>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a60      	ldr	r2, [pc, #384]	; (8003c6c <HAL_RCC_OscConfig+0x270>)
 8003aec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003af0:	6013      	str	r3, [r2, #0]
 8003af2:	e00b      	b.n	8003b0c <HAL_RCC_OscConfig+0x110>
 8003af4:	4b5d      	ldr	r3, [pc, #372]	; (8003c6c <HAL_RCC_OscConfig+0x270>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a5c      	ldr	r2, [pc, #368]	; (8003c6c <HAL_RCC_OscConfig+0x270>)
 8003afa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003afe:	6013      	str	r3, [r2, #0]
 8003b00:	4b5a      	ldr	r3, [pc, #360]	; (8003c6c <HAL_RCC_OscConfig+0x270>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a59      	ldr	r2, [pc, #356]	; (8003c6c <HAL_RCC_OscConfig+0x270>)
 8003b06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d013      	beq.n	8003b3c <HAL_RCC_OscConfig+0x140>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b14:	f7fe faa0 	bl	8002058 <HAL_GetTick>
 8003b18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b1a:	e008      	b.n	8003b2e <HAL_RCC_OscConfig+0x132>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b1c:	f7fe fa9c 	bl	8002058 <HAL_GetTick>
 8003b20:	4602      	mov	r2, r0
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	1ad3      	subs	r3, r2, r3
 8003b26:	2b64      	cmp	r3, #100	; 0x64
 8003b28:	d901      	bls.n	8003b2e <HAL_RCC_OscConfig+0x132>
          {
            return HAL_TIMEOUT;
 8003b2a:	2303      	movs	r3, #3
 8003b2c:	e2b7      	b.n	800409e <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b2e:	4b4f      	ldr	r3, [pc, #316]	; (8003c6c <HAL_RCC_OscConfig+0x270>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d0f0      	beq.n	8003b1c <HAL_RCC_OscConfig+0x120>
 8003b3a:	e014      	b.n	8003b66 <HAL_RCC_OscConfig+0x16a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b3c:	f7fe fa8c 	bl	8002058 <HAL_GetTick>
 8003b40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b42:	e008      	b.n	8003b56 <HAL_RCC_OscConfig+0x15a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b44:	f7fe fa88 	bl	8002058 <HAL_GetTick>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	1ad3      	subs	r3, r2, r3
 8003b4e:	2b64      	cmp	r3, #100	; 0x64
 8003b50:	d901      	bls.n	8003b56 <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8003b52:	2303      	movs	r3, #3
 8003b54:	e2a3      	b.n	800409e <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b56:	4b45      	ldr	r3, [pc, #276]	; (8003c6c <HAL_RCC_OscConfig+0x270>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d1f0      	bne.n	8003b44 <HAL_RCC_OscConfig+0x148>
 8003b62:	e000      	b.n	8003b66 <HAL_RCC_OscConfig+0x16a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f003 0302 	and.w	r3, r3, #2
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	f000 8084 	beq.w	8003c7c <HAL_RCC_OscConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	68db      	ldr	r3, [r3, #12]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d008      	beq.n	8003b8e <HAL_RCC_OscConfig+0x192>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	68db      	ldr	r3, [r3, #12]
 8003b80:	2b01      	cmp	r3, #1
 8003b82:	d004      	beq.n	8003b8e <HAL_RCC_OscConfig+0x192>
 8003b84:	f240 119b 	movw	r1, #411	; 0x19b
 8003b88:	4837      	ldr	r0, [pc, #220]	; (8003c68 <HAL_RCC_OscConfig+0x26c>)
 8003b8a:	f7fd fed0 	bl	800192e <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	691b      	ldr	r3, [r3, #16]
 8003b92:	2b1f      	cmp	r3, #31
 8003b94:	d904      	bls.n	8003ba0 <HAL_RCC_OscConfig+0x1a4>
 8003b96:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 8003b9a:	4833      	ldr	r0, [pc, #204]	; (8003c68 <HAL_RCC_OscConfig+0x26c>)
 8003b9c:	f7fd fec7 	bl	800192e <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003ba0:	4b32      	ldr	r3, [pc, #200]	; (8003c6c <HAL_RCC_OscConfig+0x270>)
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	f003 030c 	and.w	r3, r3, #12
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d00b      	beq.n	8003bc4 <HAL_RCC_OscConfig+0x1c8>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003bac:	4b2f      	ldr	r3, [pc, #188]	; (8003c6c <HAL_RCC_OscConfig+0x270>)
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	f003 030c 	and.w	r3, r3, #12
 8003bb4:	2b08      	cmp	r3, #8
 8003bb6:	d11c      	bne.n	8003bf2 <HAL_RCC_OscConfig+0x1f6>
 8003bb8:	4b2c      	ldr	r3, [pc, #176]	; (8003c6c <HAL_RCC_OscConfig+0x270>)
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d116      	bne.n	8003bf2 <HAL_RCC_OscConfig+0x1f6>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bc4:	4b29      	ldr	r3, [pc, #164]	; (8003c6c <HAL_RCC_OscConfig+0x270>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f003 0302 	and.w	r3, r3, #2
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d005      	beq.n	8003bdc <HAL_RCC_OscConfig+0x1e0>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	68db      	ldr	r3, [r3, #12]
 8003bd4:	2b01      	cmp	r3, #1
 8003bd6:	d001      	beq.n	8003bdc <HAL_RCC_OscConfig+0x1e0>
      {
        return HAL_ERROR;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	e260      	b.n	800409e <HAL_RCC_OscConfig+0x6a2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bdc:	4b23      	ldr	r3, [pc, #140]	; (8003c6c <HAL_RCC_OscConfig+0x270>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	691b      	ldr	r3, [r3, #16]
 8003be8:	00db      	lsls	r3, r3, #3
 8003bea:	4920      	ldr	r1, [pc, #128]	; (8003c6c <HAL_RCC_OscConfig+0x270>)
 8003bec:	4313      	orrs	r3, r2
 8003bee:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bf0:	e044      	b.n	8003c7c <HAL_RCC_OscConfig+0x280>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	68db      	ldr	r3, [r3, #12]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d023      	beq.n	8003c42 <HAL_RCC_OscConfig+0x246>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003bfa:	4b1c      	ldr	r3, [pc, #112]	; (8003c6c <HAL_RCC_OscConfig+0x270>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a1b      	ldr	r2, [pc, #108]	; (8003c6c <HAL_RCC_OscConfig+0x270>)
 8003c00:	f043 0301 	orr.w	r3, r3, #1
 8003c04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c06:	f7fe fa27 	bl	8002058 <HAL_GetTick>
 8003c0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c0c:	e008      	b.n	8003c20 <HAL_RCC_OscConfig+0x224>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c0e:	f7fe fa23 	bl	8002058 <HAL_GetTick>
 8003c12:	4602      	mov	r2, r0
 8003c14:	693b      	ldr	r3, [r7, #16]
 8003c16:	1ad3      	subs	r3, r2, r3
 8003c18:	2b02      	cmp	r3, #2
 8003c1a:	d901      	bls.n	8003c20 <HAL_RCC_OscConfig+0x224>
          {
            return HAL_TIMEOUT;
 8003c1c:	2303      	movs	r3, #3
 8003c1e:	e23e      	b.n	800409e <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c20:	4b12      	ldr	r3, [pc, #72]	; (8003c6c <HAL_RCC_OscConfig+0x270>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f003 0302 	and.w	r3, r3, #2
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d0f0      	beq.n	8003c0e <HAL_RCC_OscConfig+0x212>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c2c:	4b0f      	ldr	r3, [pc, #60]	; (8003c6c <HAL_RCC_OscConfig+0x270>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	691b      	ldr	r3, [r3, #16]
 8003c38:	00db      	lsls	r3, r3, #3
 8003c3a:	490c      	ldr	r1, [pc, #48]	; (8003c6c <HAL_RCC_OscConfig+0x270>)
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	600b      	str	r3, [r1, #0]
 8003c40:	e01c      	b.n	8003c7c <HAL_RCC_OscConfig+0x280>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c42:	4b0a      	ldr	r3, [pc, #40]	; (8003c6c <HAL_RCC_OscConfig+0x270>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a09      	ldr	r2, [pc, #36]	; (8003c6c <HAL_RCC_OscConfig+0x270>)
 8003c48:	f023 0301 	bic.w	r3, r3, #1
 8003c4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c4e:	f7fe fa03 	bl	8002058 <HAL_GetTick>
 8003c52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c54:	e00c      	b.n	8003c70 <HAL_RCC_OscConfig+0x274>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c56:	f7fe f9ff 	bl	8002058 <HAL_GetTick>
 8003c5a:	4602      	mov	r2, r0
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	1ad3      	subs	r3, r2, r3
 8003c60:	2b02      	cmp	r3, #2
 8003c62:	d905      	bls.n	8003c70 <HAL_RCC_OscConfig+0x274>
          {
            return HAL_TIMEOUT;
 8003c64:	2303      	movs	r3, #3
 8003c66:	e21a      	b.n	800409e <HAL_RCC_OscConfig+0x6a2>
 8003c68:	08012c50 	.word	0x08012c50
 8003c6c:	40023800 	.word	0x40023800
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c70:	4b7e      	ldr	r3, [pc, #504]	; (8003e6c <HAL_RCC_OscConfig+0x470>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f003 0302 	and.w	r3, r3, #2
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d1ec      	bne.n	8003c56 <HAL_RCC_OscConfig+0x25a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f003 0308 	and.w	r3, r3, #8
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d043      	beq.n	8003d10 <HAL_RCC_OscConfig+0x314>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	695b      	ldr	r3, [r3, #20]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d008      	beq.n	8003ca2 <HAL_RCC_OscConfig+0x2a6>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	695b      	ldr	r3, [r3, #20]
 8003c94:	2b01      	cmp	r3, #1
 8003c96:	d004      	beq.n	8003ca2 <HAL_RCC_OscConfig+0x2a6>
 8003c98:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 8003c9c:	4874      	ldr	r0, [pc, #464]	; (8003e70 <HAL_RCC_OscConfig+0x474>)
 8003c9e:	f7fd fe46 	bl	800192e <assert_failed>

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	695b      	ldr	r3, [r3, #20]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d019      	beq.n	8003cde <HAL_RCC_OscConfig+0x2e2>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003caa:	4b70      	ldr	r3, [pc, #448]	; (8003e6c <HAL_RCC_OscConfig+0x470>)
 8003cac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cae:	4a6f      	ldr	r2, [pc, #444]	; (8003e6c <HAL_RCC_OscConfig+0x470>)
 8003cb0:	f043 0301 	orr.w	r3, r3, #1
 8003cb4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cb6:	f7fe f9cf 	bl	8002058 <HAL_GetTick>
 8003cba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cbc:	e008      	b.n	8003cd0 <HAL_RCC_OscConfig+0x2d4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cbe:	f7fe f9cb 	bl	8002058 <HAL_GetTick>
 8003cc2:	4602      	mov	r2, r0
 8003cc4:	693b      	ldr	r3, [r7, #16]
 8003cc6:	1ad3      	subs	r3, r2, r3
 8003cc8:	2b02      	cmp	r3, #2
 8003cca:	d901      	bls.n	8003cd0 <HAL_RCC_OscConfig+0x2d4>
        {
          return HAL_TIMEOUT;
 8003ccc:	2303      	movs	r3, #3
 8003cce:	e1e6      	b.n	800409e <HAL_RCC_OscConfig+0x6a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cd0:	4b66      	ldr	r3, [pc, #408]	; (8003e6c <HAL_RCC_OscConfig+0x470>)
 8003cd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cd4:	f003 0302 	and.w	r3, r3, #2
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d0f0      	beq.n	8003cbe <HAL_RCC_OscConfig+0x2c2>
 8003cdc:	e018      	b.n	8003d10 <HAL_RCC_OscConfig+0x314>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003cde:	4b63      	ldr	r3, [pc, #396]	; (8003e6c <HAL_RCC_OscConfig+0x470>)
 8003ce0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ce2:	4a62      	ldr	r2, [pc, #392]	; (8003e6c <HAL_RCC_OscConfig+0x470>)
 8003ce4:	f023 0301 	bic.w	r3, r3, #1
 8003ce8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cea:	f7fe f9b5 	bl	8002058 <HAL_GetTick>
 8003cee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cf0:	e008      	b.n	8003d04 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cf2:	f7fe f9b1 	bl	8002058 <HAL_GetTick>
 8003cf6:	4602      	mov	r2, r0
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	1ad3      	subs	r3, r2, r3
 8003cfc:	2b02      	cmp	r3, #2
 8003cfe:	d901      	bls.n	8003d04 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003d00:	2303      	movs	r3, #3
 8003d02:	e1cc      	b.n	800409e <HAL_RCC_OscConfig+0x6a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d04:	4b59      	ldr	r3, [pc, #356]	; (8003e6c <HAL_RCC_OscConfig+0x470>)
 8003d06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d08:	f003 0302 	and.w	r3, r3, #2
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d1f0      	bne.n	8003cf2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f003 0304 	and.w	r3, r3, #4
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	f000 80bc 	beq.w	8003e96 <HAL_RCC_OscConfig+0x49a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d00c      	beq.n	8003d40 <HAL_RCC_OscConfig+0x344>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	2b01      	cmp	r3, #1
 8003d2c:	d008      	beq.n	8003d40 <HAL_RCC_OscConfig+0x344>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	689b      	ldr	r3, [r3, #8]
 8003d32:	2b05      	cmp	r3, #5
 8003d34:	d004      	beq.n	8003d40 <HAL_RCC_OscConfig+0x344>
 8003d36:	f240 2106 	movw	r1, #518	; 0x206
 8003d3a:	484d      	ldr	r0, [pc, #308]	; (8003e70 <HAL_RCC_OscConfig+0x474>)
 8003d3c:	f7fd fdf7 	bl	800192e <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d40:	4b4a      	ldr	r3, [pc, #296]	; (8003e6c <HAL_RCC_OscConfig+0x470>)
 8003d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d10d      	bne.n	8003d68 <HAL_RCC_OscConfig+0x36c>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d4c:	4b47      	ldr	r3, [pc, #284]	; (8003e6c <HAL_RCC_OscConfig+0x470>)
 8003d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d50:	4a46      	ldr	r2, [pc, #280]	; (8003e6c <HAL_RCC_OscConfig+0x470>)
 8003d52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d56:	6413      	str	r3, [r2, #64]	; 0x40
 8003d58:	4b44      	ldr	r3, [pc, #272]	; (8003e6c <HAL_RCC_OscConfig+0x470>)
 8003d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d60:	60bb      	str	r3, [r7, #8]
 8003d62:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d64:	2301      	movs	r3, #1
 8003d66:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d68:	4b42      	ldr	r3, [pc, #264]	; (8003e74 <HAL_RCC_OscConfig+0x478>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d118      	bne.n	8003da6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003d74:	4b3f      	ldr	r3, [pc, #252]	; (8003e74 <HAL_RCC_OscConfig+0x478>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a3e      	ldr	r2, [pc, #248]	; (8003e74 <HAL_RCC_OscConfig+0x478>)
 8003d7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d7e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d80:	f7fe f96a 	bl	8002058 <HAL_GetTick>
 8003d84:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d86:	e008      	b.n	8003d9a <HAL_RCC_OscConfig+0x39e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d88:	f7fe f966 	bl	8002058 <HAL_GetTick>
 8003d8c:	4602      	mov	r2, r0
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	1ad3      	subs	r3, r2, r3
 8003d92:	2b64      	cmp	r3, #100	; 0x64
 8003d94:	d901      	bls.n	8003d9a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003d96:	2303      	movs	r3, #3
 8003d98:	e181      	b.n	800409e <HAL_RCC_OscConfig+0x6a2>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d9a:	4b36      	ldr	r3, [pc, #216]	; (8003e74 <HAL_RCC_OscConfig+0x478>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d0f0      	beq.n	8003d88 <HAL_RCC_OscConfig+0x38c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	2b01      	cmp	r3, #1
 8003dac:	d106      	bne.n	8003dbc <HAL_RCC_OscConfig+0x3c0>
 8003dae:	4b2f      	ldr	r3, [pc, #188]	; (8003e6c <HAL_RCC_OscConfig+0x470>)
 8003db0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003db2:	4a2e      	ldr	r2, [pc, #184]	; (8003e6c <HAL_RCC_OscConfig+0x470>)
 8003db4:	f043 0301 	orr.w	r3, r3, #1
 8003db8:	6713      	str	r3, [r2, #112]	; 0x70
 8003dba:	e02d      	b.n	8003e18 <HAL_RCC_OscConfig+0x41c>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d10c      	bne.n	8003dde <HAL_RCC_OscConfig+0x3e2>
 8003dc4:	4b29      	ldr	r3, [pc, #164]	; (8003e6c <HAL_RCC_OscConfig+0x470>)
 8003dc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dc8:	4a28      	ldr	r2, [pc, #160]	; (8003e6c <HAL_RCC_OscConfig+0x470>)
 8003dca:	f023 0301 	bic.w	r3, r3, #1
 8003dce:	6713      	str	r3, [r2, #112]	; 0x70
 8003dd0:	4b26      	ldr	r3, [pc, #152]	; (8003e6c <HAL_RCC_OscConfig+0x470>)
 8003dd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dd4:	4a25      	ldr	r2, [pc, #148]	; (8003e6c <HAL_RCC_OscConfig+0x470>)
 8003dd6:	f023 0304 	bic.w	r3, r3, #4
 8003dda:	6713      	str	r3, [r2, #112]	; 0x70
 8003ddc:	e01c      	b.n	8003e18 <HAL_RCC_OscConfig+0x41c>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	2b05      	cmp	r3, #5
 8003de4:	d10c      	bne.n	8003e00 <HAL_RCC_OscConfig+0x404>
 8003de6:	4b21      	ldr	r3, [pc, #132]	; (8003e6c <HAL_RCC_OscConfig+0x470>)
 8003de8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dea:	4a20      	ldr	r2, [pc, #128]	; (8003e6c <HAL_RCC_OscConfig+0x470>)
 8003dec:	f043 0304 	orr.w	r3, r3, #4
 8003df0:	6713      	str	r3, [r2, #112]	; 0x70
 8003df2:	4b1e      	ldr	r3, [pc, #120]	; (8003e6c <HAL_RCC_OscConfig+0x470>)
 8003df4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003df6:	4a1d      	ldr	r2, [pc, #116]	; (8003e6c <HAL_RCC_OscConfig+0x470>)
 8003df8:	f043 0301 	orr.w	r3, r3, #1
 8003dfc:	6713      	str	r3, [r2, #112]	; 0x70
 8003dfe:	e00b      	b.n	8003e18 <HAL_RCC_OscConfig+0x41c>
 8003e00:	4b1a      	ldr	r3, [pc, #104]	; (8003e6c <HAL_RCC_OscConfig+0x470>)
 8003e02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e04:	4a19      	ldr	r2, [pc, #100]	; (8003e6c <HAL_RCC_OscConfig+0x470>)
 8003e06:	f023 0301 	bic.w	r3, r3, #1
 8003e0a:	6713      	str	r3, [r2, #112]	; 0x70
 8003e0c:	4b17      	ldr	r3, [pc, #92]	; (8003e6c <HAL_RCC_OscConfig+0x470>)
 8003e0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e10:	4a16      	ldr	r2, [pc, #88]	; (8003e6c <HAL_RCC_OscConfig+0x470>)
 8003e12:	f023 0304 	bic.w	r3, r3, #4
 8003e16:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d015      	beq.n	8003e4c <HAL_RCC_OscConfig+0x450>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e20:	f7fe f91a 	bl	8002058 <HAL_GetTick>
 8003e24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e26:	e00a      	b.n	8003e3e <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e28:	f7fe f916 	bl	8002058 <HAL_GetTick>
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	1ad3      	subs	r3, r2, r3
 8003e32:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d901      	bls.n	8003e3e <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8003e3a:	2303      	movs	r3, #3
 8003e3c:	e12f      	b.n	800409e <HAL_RCC_OscConfig+0x6a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e3e:	4b0b      	ldr	r3, [pc, #44]	; (8003e6c <HAL_RCC_OscConfig+0x470>)
 8003e40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e42:	f003 0302 	and.w	r3, r3, #2
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d0ee      	beq.n	8003e28 <HAL_RCC_OscConfig+0x42c>
 8003e4a:	e01b      	b.n	8003e84 <HAL_RCC_OscConfig+0x488>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e4c:	f7fe f904 	bl	8002058 <HAL_GetTick>
 8003e50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e52:	e011      	b.n	8003e78 <HAL_RCC_OscConfig+0x47c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e54:	f7fe f900 	bl	8002058 <HAL_GetTick>
 8003e58:	4602      	mov	r2, r0
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	1ad3      	subs	r3, r2, r3
 8003e5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d908      	bls.n	8003e78 <HAL_RCC_OscConfig+0x47c>
        {
          return HAL_TIMEOUT;
 8003e66:	2303      	movs	r3, #3
 8003e68:	e119      	b.n	800409e <HAL_RCC_OscConfig+0x6a2>
 8003e6a:	bf00      	nop
 8003e6c:	40023800 	.word	0x40023800
 8003e70:	08012c50 	.word	0x08012c50
 8003e74:	40007000 	.word	0x40007000
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e78:	4b8b      	ldr	r3, [pc, #556]	; (80040a8 <HAL_RCC_OscConfig+0x6ac>)
 8003e7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e7c:	f003 0302 	and.w	r3, r3, #2
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d1e7      	bne.n	8003e54 <HAL_RCC_OscConfig+0x458>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003e84:	7dfb      	ldrb	r3, [r7, #23]
 8003e86:	2b01      	cmp	r3, #1
 8003e88:	d105      	bne.n	8003e96 <HAL_RCC_OscConfig+0x49a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e8a:	4b87      	ldr	r3, [pc, #540]	; (80040a8 <HAL_RCC_OscConfig+0x6ac>)
 8003e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e8e:	4a86      	ldr	r2, [pc, #536]	; (80040a8 <HAL_RCC_OscConfig+0x6ac>)
 8003e90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e94:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	699b      	ldr	r3, [r3, #24]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d00c      	beq.n	8003eb8 <HAL_RCC_OscConfig+0x4bc>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	699b      	ldr	r3, [r3, #24]
 8003ea2:	2b01      	cmp	r3, #1
 8003ea4:	d008      	beq.n	8003eb8 <HAL_RCC_OscConfig+0x4bc>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	699b      	ldr	r3, [r3, #24]
 8003eaa:	2b02      	cmp	r3, #2
 8003eac:	d004      	beq.n	8003eb8 <HAL_RCC_OscConfig+0x4bc>
 8003eae:	f240 214a 	movw	r1, #586	; 0x24a
 8003eb2:	487e      	ldr	r0, [pc, #504]	; (80040ac <HAL_RCC_OscConfig+0x6b0>)
 8003eb4:	f7fd fd3b 	bl	800192e <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	699b      	ldr	r3, [r3, #24]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	f000 80ed 	beq.w	800409c <HAL_RCC_OscConfig+0x6a0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ec2:	4b79      	ldr	r3, [pc, #484]	; (80040a8 <HAL_RCC_OscConfig+0x6ac>)
 8003ec4:	689b      	ldr	r3, [r3, #8]
 8003ec6:	f003 030c 	and.w	r3, r3, #12
 8003eca:	2b08      	cmp	r3, #8
 8003ecc:	f000 80b4 	beq.w	8004038 <HAL_RCC_OscConfig+0x63c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	699b      	ldr	r3, [r3, #24]
 8003ed4:	2b02      	cmp	r3, #2
 8003ed6:	f040 8095 	bne.w	8004004 <HAL_RCC_OscConfig+0x608>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	69db      	ldr	r3, [r3, #28]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d009      	beq.n	8003ef6 <HAL_RCC_OscConfig+0x4fa>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	69db      	ldr	r3, [r3, #28]
 8003ee6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003eea:	d004      	beq.n	8003ef6 <HAL_RCC_OscConfig+0x4fa>
 8003eec:	f240 2153 	movw	r1, #595	; 0x253
 8003ef0:	486e      	ldr	r0, [pc, #440]	; (80040ac <HAL_RCC_OscConfig+0x6b0>)
 8003ef2:	f7fd fd1c 	bl	800192e <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6a1b      	ldr	r3, [r3, #32]
 8003efa:	2b01      	cmp	r3, #1
 8003efc:	d903      	bls.n	8003f06 <HAL_RCC_OscConfig+0x50a>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6a1b      	ldr	r3, [r3, #32]
 8003f02:	2b3f      	cmp	r3, #63	; 0x3f
 8003f04:	d904      	bls.n	8003f10 <HAL_RCC_OscConfig+0x514>
 8003f06:	f44f 7115 	mov.w	r1, #596	; 0x254
 8003f0a:	4868      	ldr	r0, [pc, #416]	; (80040ac <HAL_RCC_OscConfig+0x6b0>)
 8003f0c:	f7fd fd0f 	bl	800192e <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f14:	2b31      	cmp	r3, #49	; 0x31
 8003f16:	d904      	bls.n	8003f22 <HAL_RCC_OscConfig+0x526>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f1c:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8003f20:	d904      	bls.n	8003f2c <HAL_RCC_OscConfig+0x530>
 8003f22:	f240 2155 	movw	r1, #597	; 0x255
 8003f26:	4861      	ldr	r0, [pc, #388]	; (80040ac <HAL_RCC_OscConfig+0x6b0>)
 8003f28:	f7fd fd01 	bl	800192e <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f30:	2b02      	cmp	r3, #2
 8003f32:	d010      	beq.n	8003f56 <HAL_RCC_OscConfig+0x55a>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f38:	2b04      	cmp	r3, #4
 8003f3a:	d00c      	beq.n	8003f56 <HAL_RCC_OscConfig+0x55a>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f40:	2b06      	cmp	r3, #6
 8003f42:	d008      	beq.n	8003f56 <HAL_RCC_OscConfig+0x55a>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f48:	2b08      	cmp	r3, #8
 8003f4a:	d004      	beq.n	8003f56 <HAL_RCC_OscConfig+0x55a>
 8003f4c:	f240 2156 	movw	r1, #598	; 0x256
 8003f50:	4856      	ldr	r0, [pc, #344]	; (80040ac <HAL_RCC_OscConfig+0x6b0>)
 8003f52:	f7fd fcec 	bl	800192e <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f5a:	2b01      	cmp	r3, #1
 8003f5c:	d903      	bls.n	8003f66 <HAL_RCC_OscConfig+0x56a>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f62:	2b0f      	cmp	r3, #15
 8003f64:	d904      	bls.n	8003f70 <HAL_RCC_OscConfig+0x574>
 8003f66:	f240 2157 	movw	r1, #599	; 0x257
 8003f6a:	4850      	ldr	r0, [pc, #320]	; (80040ac <HAL_RCC_OscConfig+0x6b0>)
 8003f6c:	f7fd fcdf 	bl	800192e <assert_failed>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f70:	4b4d      	ldr	r3, [pc, #308]	; (80040a8 <HAL_RCC_OscConfig+0x6ac>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a4c      	ldr	r2, [pc, #304]	; (80040a8 <HAL_RCC_OscConfig+0x6ac>)
 8003f76:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f7c:	f7fe f86c 	bl	8002058 <HAL_GetTick>
 8003f80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f82:	e008      	b.n	8003f96 <HAL_RCC_OscConfig+0x59a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f84:	f7fe f868 	bl	8002058 <HAL_GetTick>
 8003f88:	4602      	mov	r2, r0
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	1ad3      	subs	r3, r2, r3
 8003f8e:	2b02      	cmp	r3, #2
 8003f90:	d901      	bls.n	8003f96 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8003f92:	2303      	movs	r3, #3
 8003f94:	e083      	b.n	800409e <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f96:	4b44      	ldr	r3, [pc, #272]	; (80040a8 <HAL_RCC_OscConfig+0x6ac>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d1f0      	bne.n	8003f84 <HAL_RCC_OscConfig+0x588>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	69da      	ldr	r2, [r3, #28]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6a1b      	ldr	r3, [r3, #32]
 8003faa:	431a      	orrs	r2, r3
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb0:	019b      	lsls	r3, r3, #6
 8003fb2:	431a      	orrs	r2, r3
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fb8:	085b      	lsrs	r3, r3, #1
 8003fba:	3b01      	subs	r3, #1
 8003fbc:	041b      	lsls	r3, r3, #16
 8003fbe:	431a      	orrs	r2, r3
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fc4:	061b      	lsls	r3, r3, #24
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	4a37      	ldr	r2, [pc, #220]	; (80040a8 <HAL_RCC_OscConfig+0x6ac>)
 8003fca:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003fce:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003fd0:	4b35      	ldr	r3, [pc, #212]	; (80040a8 <HAL_RCC_OscConfig+0x6ac>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a34      	ldr	r2, [pc, #208]	; (80040a8 <HAL_RCC_OscConfig+0x6ac>)
 8003fd6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003fda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fdc:	f7fe f83c 	bl	8002058 <HAL_GetTick>
 8003fe0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fe2:	e008      	b.n	8003ff6 <HAL_RCC_OscConfig+0x5fa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fe4:	f7fe f838 	bl	8002058 <HAL_GetTick>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	1ad3      	subs	r3, r2, r3
 8003fee:	2b02      	cmp	r3, #2
 8003ff0:	d901      	bls.n	8003ff6 <HAL_RCC_OscConfig+0x5fa>
          {
            return HAL_TIMEOUT;
 8003ff2:	2303      	movs	r3, #3
 8003ff4:	e053      	b.n	800409e <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ff6:	4b2c      	ldr	r3, [pc, #176]	; (80040a8 <HAL_RCC_OscConfig+0x6ac>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d0f0      	beq.n	8003fe4 <HAL_RCC_OscConfig+0x5e8>
 8004002:	e04b      	b.n	800409c <HAL_RCC_OscConfig+0x6a0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004004:	4b28      	ldr	r3, [pc, #160]	; (80040a8 <HAL_RCC_OscConfig+0x6ac>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a27      	ldr	r2, [pc, #156]	; (80040a8 <HAL_RCC_OscConfig+0x6ac>)
 800400a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800400e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004010:	f7fe f822 	bl	8002058 <HAL_GetTick>
 8004014:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004016:	e008      	b.n	800402a <HAL_RCC_OscConfig+0x62e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004018:	f7fe f81e 	bl	8002058 <HAL_GetTick>
 800401c:	4602      	mov	r2, r0
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	1ad3      	subs	r3, r2, r3
 8004022:	2b02      	cmp	r3, #2
 8004024:	d901      	bls.n	800402a <HAL_RCC_OscConfig+0x62e>
          {
            return HAL_TIMEOUT;
 8004026:	2303      	movs	r3, #3
 8004028:	e039      	b.n	800409e <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800402a:	4b1f      	ldr	r3, [pc, #124]	; (80040a8 <HAL_RCC_OscConfig+0x6ac>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004032:	2b00      	cmp	r3, #0
 8004034:	d1f0      	bne.n	8004018 <HAL_RCC_OscConfig+0x61c>
 8004036:	e031      	b.n	800409c <HAL_RCC_OscConfig+0x6a0>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004038:	4b1b      	ldr	r3, [pc, #108]	; (80040a8 <HAL_RCC_OscConfig+0x6ac>)
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	699b      	ldr	r3, [r3, #24]
 8004042:	2b01      	cmp	r3, #1
 8004044:	d028      	beq.n	8004098 <HAL_RCC_OscConfig+0x69c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004050:	429a      	cmp	r2, r3
 8004052:	d121      	bne.n	8004098 <HAL_RCC_OscConfig+0x69c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800405e:	429a      	cmp	r2, r3
 8004060:	d11a      	bne.n	8004098 <HAL_RCC_OscConfig+0x69c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004062:	68fa      	ldr	r2, [r7, #12]
 8004064:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004068:	4013      	ands	r3, r2
 800406a:	687a      	ldr	r2, [r7, #4]
 800406c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800406e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004070:	4293      	cmp	r3, r2
 8004072:	d111      	bne.n	8004098 <HAL_RCC_OscConfig+0x69c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800407e:	085b      	lsrs	r3, r3, #1
 8004080:	3b01      	subs	r3, #1
 8004082:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004084:	429a      	cmp	r2, r3
 8004086:	d107      	bne.n	8004098 <HAL_RCC_OscConfig+0x69c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004092:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004094:	429a      	cmp	r2, r3
 8004096:	d001      	beq.n	800409c <HAL_RCC_OscConfig+0x6a0>
#endif
      {
        return HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	e000      	b.n	800409e <HAL_RCC_OscConfig+0x6a2>
      }
    }
  }
  return HAL_OK;
 800409c:	2300      	movs	r3, #0
}
 800409e:	4618      	mov	r0, r3
 80040a0:	3718      	adds	r7, #24
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}
 80040a6:	bf00      	nop
 80040a8:	40023800 	.word	0x40023800
 80040ac:	08012c50 	.word	0x08012c50

080040b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b084      	sub	sp, #16
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
 80040b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80040ba:	2300      	movs	r3, #0
 80040bc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d101      	bne.n	80040c8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80040c4:	2301      	movs	r3, #1
 80040c6:	e18c      	b.n	80043e2 <HAL_RCC_ClockConfig+0x332>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d003      	beq.n	80040d8 <HAL_RCC_ClockConfig+0x28>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	2b0f      	cmp	r3, #15
 80040d6:	d904      	bls.n	80040e2 <HAL_RCC_ClockConfig+0x32>
 80040d8:	f240 21dd 	movw	r1, #733	; 0x2dd
 80040dc:	4887      	ldr	r0, [pc, #540]	; (80042fc <HAL_RCC_ClockConfig+0x24c>)
 80040de:	f7fd fc26 	bl	800192e <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d031      	beq.n	800414c <HAL_RCC_ClockConfig+0x9c>
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	2b01      	cmp	r3, #1
 80040ec:	d02e      	beq.n	800414c <HAL_RCC_ClockConfig+0x9c>
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	2b02      	cmp	r3, #2
 80040f2:	d02b      	beq.n	800414c <HAL_RCC_ClockConfig+0x9c>
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	2b03      	cmp	r3, #3
 80040f8:	d028      	beq.n	800414c <HAL_RCC_ClockConfig+0x9c>
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	2b04      	cmp	r3, #4
 80040fe:	d025      	beq.n	800414c <HAL_RCC_ClockConfig+0x9c>
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	2b05      	cmp	r3, #5
 8004104:	d022      	beq.n	800414c <HAL_RCC_ClockConfig+0x9c>
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	2b06      	cmp	r3, #6
 800410a:	d01f      	beq.n	800414c <HAL_RCC_ClockConfig+0x9c>
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	2b07      	cmp	r3, #7
 8004110:	d01c      	beq.n	800414c <HAL_RCC_ClockConfig+0x9c>
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	2b08      	cmp	r3, #8
 8004116:	d019      	beq.n	800414c <HAL_RCC_ClockConfig+0x9c>
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	2b09      	cmp	r3, #9
 800411c:	d016      	beq.n	800414c <HAL_RCC_ClockConfig+0x9c>
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	2b0a      	cmp	r3, #10
 8004122:	d013      	beq.n	800414c <HAL_RCC_ClockConfig+0x9c>
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	2b0b      	cmp	r3, #11
 8004128:	d010      	beq.n	800414c <HAL_RCC_ClockConfig+0x9c>
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	2b0c      	cmp	r3, #12
 800412e:	d00d      	beq.n	800414c <HAL_RCC_ClockConfig+0x9c>
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	2b0d      	cmp	r3, #13
 8004134:	d00a      	beq.n	800414c <HAL_RCC_ClockConfig+0x9c>
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	2b0e      	cmp	r3, #14
 800413a:	d007      	beq.n	800414c <HAL_RCC_ClockConfig+0x9c>
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	2b0f      	cmp	r3, #15
 8004140:	d004      	beq.n	800414c <HAL_RCC_ClockConfig+0x9c>
 8004142:	f240 21de 	movw	r1, #734	; 0x2de
 8004146:	486d      	ldr	r0, [pc, #436]	; (80042fc <HAL_RCC_ClockConfig+0x24c>)
 8004148:	f7fd fbf1 	bl	800192e <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800414c:	4b6c      	ldr	r3, [pc, #432]	; (8004300 <HAL_RCC_ClockConfig+0x250>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f003 030f 	and.w	r3, r3, #15
 8004154:	683a      	ldr	r2, [r7, #0]
 8004156:	429a      	cmp	r2, r3
 8004158:	d910      	bls.n	800417c <HAL_RCC_ClockConfig+0xcc>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800415a:	4b69      	ldr	r3, [pc, #420]	; (8004300 <HAL_RCC_ClockConfig+0x250>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f023 020f 	bic.w	r2, r3, #15
 8004162:	4967      	ldr	r1, [pc, #412]	; (8004300 <HAL_RCC_ClockConfig+0x250>)
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	4313      	orrs	r3, r2
 8004168:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800416a:	4b65      	ldr	r3, [pc, #404]	; (8004300 <HAL_RCC_ClockConfig+0x250>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f003 030f 	and.w	r3, r3, #15
 8004172:	683a      	ldr	r2, [r7, #0]
 8004174:	429a      	cmp	r2, r3
 8004176:	d001      	beq.n	800417c <HAL_RCC_ClockConfig+0xcc>
    {
      return HAL_ERROR;
 8004178:	2301      	movs	r3, #1
 800417a:	e132      	b.n	80043e2 <HAL_RCC_ClockConfig+0x332>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f003 0302 	and.w	r3, r3, #2
 8004184:	2b00      	cmp	r3, #0
 8004186:	d049      	beq.n	800421c <HAL_RCC_ClockConfig+0x16c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f003 0304 	and.w	r3, r3, #4
 8004190:	2b00      	cmp	r3, #0
 8004192:	d005      	beq.n	80041a0 <HAL_RCC_ClockConfig+0xf0>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004194:	4b5b      	ldr	r3, [pc, #364]	; (8004304 <HAL_RCC_ClockConfig+0x254>)
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	4a5a      	ldr	r2, [pc, #360]	; (8004304 <HAL_RCC_ClockConfig+0x254>)
 800419a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800419e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f003 0308 	and.w	r3, r3, #8
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d005      	beq.n	80041b8 <HAL_RCC_ClockConfig+0x108>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80041ac:	4b55      	ldr	r3, [pc, #340]	; (8004304 <HAL_RCC_ClockConfig+0x254>)
 80041ae:	689b      	ldr	r3, [r3, #8]
 80041b0:	4a54      	ldr	r2, [pc, #336]	; (8004304 <HAL_RCC_ClockConfig+0x254>)
 80041b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80041b6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d024      	beq.n	800420a <HAL_RCC_ClockConfig+0x15a>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	689b      	ldr	r3, [r3, #8]
 80041c4:	2b80      	cmp	r3, #128	; 0x80
 80041c6:	d020      	beq.n	800420a <HAL_RCC_ClockConfig+0x15a>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	689b      	ldr	r3, [r3, #8]
 80041cc:	2b90      	cmp	r3, #144	; 0x90
 80041ce:	d01c      	beq.n	800420a <HAL_RCC_ClockConfig+0x15a>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	2ba0      	cmp	r3, #160	; 0xa0
 80041d6:	d018      	beq.n	800420a <HAL_RCC_ClockConfig+0x15a>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	2bb0      	cmp	r3, #176	; 0xb0
 80041de:	d014      	beq.n	800420a <HAL_RCC_ClockConfig+0x15a>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	689b      	ldr	r3, [r3, #8]
 80041e4:	2bc0      	cmp	r3, #192	; 0xc0
 80041e6:	d010      	beq.n	800420a <HAL_RCC_ClockConfig+0x15a>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	689b      	ldr	r3, [r3, #8]
 80041ec:	2bd0      	cmp	r3, #208	; 0xd0
 80041ee:	d00c      	beq.n	800420a <HAL_RCC_ClockConfig+0x15a>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	689b      	ldr	r3, [r3, #8]
 80041f4:	2be0      	cmp	r3, #224	; 0xe0
 80041f6:	d008      	beq.n	800420a <HAL_RCC_ClockConfig+0x15a>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	689b      	ldr	r3, [r3, #8]
 80041fc:	2bf0      	cmp	r3, #240	; 0xf0
 80041fe:	d004      	beq.n	800420a <HAL_RCC_ClockConfig+0x15a>
 8004200:	f240 3102 	movw	r1, #770	; 0x302
 8004204:	483d      	ldr	r0, [pc, #244]	; (80042fc <HAL_RCC_ClockConfig+0x24c>)
 8004206:	f7fd fb92 	bl	800192e <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800420a:	4b3e      	ldr	r3, [pc, #248]	; (8004304 <HAL_RCC_ClockConfig+0x254>)
 800420c:	689b      	ldr	r3, [r3, #8]
 800420e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	689b      	ldr	r3, [r3, #8]
 8004216:	493b      	ldr	r1, [pc, #236]	; (8004304 <HAL_RCC_ClockConfig+0x254>)
 8004218:	4313      	orrs	r3, r2
 800421a:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f003 0301 	and.w	r3, r3, #1
 8004224:	2b00      	cmp	r3, #0
 8004226:	d051      	beq.n	80042cc <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d00c      	beq.n	800424a <HAL_RCC_ClockConfig+0x19a>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	2b01      	cmp	r3, #1
 8004236:	d008      	beq.n	800424a <HAL_RCC_ClockConfig+0x19a>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	2b02      	cmp	r3, #2
 800423e:	d004      	beq.n	800424a <HAL_RCC_ClockConfig+0x19a>
 8004240:	f240 3109 	movw	r1, #777	; 0x309
 8004244:	482d      	ldr	r0, [pc, #180]	; (80042fc <HAL_RCC_ClockConfig+0x24c>)
 8004246:	f7fd fb72 	bl	800192e <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	2b01      	cmp	r3, #1
 8004250:	d107      	bne.n	8004262 <HAL_RCC_ClockConfig+0x1b2>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004252:	4b2c      	ldr	r3, [pc, #176]	; (8004304 <HAL_RCC_ClockConfig+0x254>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800425a:	2b00      	cmp	r3, #0
 800425c:	d115      	bne.n	800428a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	e0bf      	b.n	80043e2 <HAL_RCC_ClockConfig+0x332>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	2b02      	cmp	r3, #2
 8004268:	d107      	bne.n	800427a <HAL_RCC_ClockConfig+0x1ca>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800426a:	4b26      	ldr	r3, [pc, #152]	; (8004304 <HAL_RCC_ClockConfig+0x254>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004272:	2b00      	cmp	r3, #0
 8004274:	d109      	bne.n	800428a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	e0b3      	b.n	80043e2 <HAL_RCC_ClockConfig+0x332>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800427a:	4b22      	ldr	r3, [pc, #136]	; (8004304 <HAL_RCC_ClockConfig+0x254>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f003 0302 	and.w	r3, r3, #2
 8004282:	2b00      	cmp	r3, #0
 8004284:	d101      	bne.n	800428a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004286:	2301      	movs	r3, #1
 8004288:	e0ab      	b.n	80043e2 <HAL_RCC_ClockConfig+0x332>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800428a:	4b1e      	ldr	r3, [pc, #120]	; (8004304 <HAL_RCC_ClockConfig+0x254>)
 800428c:	689b      	ldr	r3, [r3, #8]
 800428e:	f023 0203 	bic.w	r2, r3, #3
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	491b      	ldr	r1, [pc, #108]	; (8004304 <HAL_RCC_ClockConfig+0x254>)
 8004298:	4313      	orrs	r3, r2
 800429a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800429c:	f7fd fedc 	bl	8002058 <HAL_GetTick>
 80042a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042a2:	e00a      	b.n	80042ba <HAL_RCC_ClockConfig+0x20a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042a4:	f7fd fed8 	bl	8002058 <HAL_GetTick>
 80042a8:	4602      	mov	r2, r0
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	1ad3      	subs	r3, r2, r3
 80042ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d901      	bls.n	80042ba <HAL_RCC_ClockConfig+0x20a>
      {
        return HAL_TIMEOUT;
 80042b6:	2303      	movs	r3, #3
 80042b8:	e093      	b.n	80043e2 <HAL_RCC_ClockConfig+0x332>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042ba:	4b12      	ldr	r3, [pc, #72]	; (8004304 <HAL_RCC_ClockConfig+0x254>)
 80042bc:	689b      	ldr	r3, [r3, #8]
 80042be:	f003 020c 	and.w	r2, r3, #12
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	009b      	lsls	r3, r3, #2
 80042c8:	429a      	cmp	r2, r3
 80042ca:	d1eb      	bne.n	80042a4 <HAL_RCC_ClockConfig+0x1f4>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80042cc:	4b0c      	ldr	r3, [pc, #48]	; (8004300 <HAL_RCC_ClockConfig+0x250>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f003 030f 	and.w	r3, r3, #15
 80042d4:	683a      	ldr	r2, [r7, #0]
 80042d6:	429a      	cmp	r2, r3
 80042d8:	d216      	bcs.n	8004308 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042da:	4b09      	ldr	r3, [pc, #36]	; (8004300 <HAL_RCC_ClockConfig+0x250>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f023 020f 	bic.w	r2, r3, #15
 80042e2:	4907      	ldr	r1, [pc, #28]	; (8004300 <HAL_RCC_ClockConfig+0x250>)
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	4313      	orrs	r3, r2
 80042e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80042ea:	4b05      	ldr	r3, [pc, #20]	; (8004300 <HAL_RCC_ClockConfig+0x250>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f003 030f 	and.w	r3, r3, #15
 80042f2:	683a      	ldr	r2, [r7, #0]
 80042f4:	429a      	cmp	r2, r3
 80042f6:	d007      	beq.n	8004308 <HAL_RCC_ClockConfig+0x258>
    {
      return HAL_ERROR;
 80042f8:	2301      	movs	r3, #1
 80042fa:	e072      	b.n	80043e2 <HAL_RCC_ClockConfig+0x332>
 80042fc:	08012c50 	.word	0x08012c50
 8004300:	40023c00 	.word	0x40023c00
 8004304:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f003 0304 	and.w	r3, r3, #4
 8004310:	2b00      	cmp	r3, #0
 8004312:	d025      	beq.n	8004360 <HAL_RCC_ClockConfig+0x2b0>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	68db      	ldr	r3, [r3, #12]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d018      	beq.n	800434e <HAL_RCC_ClockConfig+0x29e>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	68db      	ldr	r3, [r3, #12]
 8004320:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004324:	d013      	beq.n	800434e <HAL_RCC_ClockConfig+0x29e>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	68db      	ldr	r3, [r3, #12]
 800432a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800432e:	d00e      	beq.n	800434e <HAL_RCC_ClockConfig+0x29e>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	68db      	ldr	r3, [r3, #12]
 8004334:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8004338:	d009      	beq.n	800434e <HAL_RCC_ClockConfig+0x29e>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	68db      	ldr	r3, [r3, #12]
 800433e:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8004342:	d004      	beq.n	800434e <HAL_RCC_ClockConfig+0x29e>
 8004344:	f240 3146 	movw	r1, #838	; 0x346
 8004348:	4828      	ldr	r0, [pc, #160]	; (80043ec <HAL_RCC_ClockConfig+0x33c>)
 800434a:	f7fd faf0 	bl	800192e <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800434e:	4b28      	ldr	r3, [pc, #160]	; (80043f0 <HAL_RCC_ClockConfig+0x340>)
 8004350:	689b      	ldr	r3, [r3, #8]
 8004352:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	68db      	ldr	r3, [r3, #12]
 800435a:	4925      	ldr	r1, [pc, #148]	; (80043f0 <HAL_RCC_ClockConfig+0x340>)
 800435c:	4313      	orrs	r3, r2
 800435e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f003 0308 	and.w	r3, r3, #8
 8004368:	2b00      	cmp	r3, #0
 800436a:	d026      	beq.n	80043ba <HAL_RCC_ClockConfig+0x30a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	691b      	ldr	r3, [r3, #16]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d018      	beq.n	80043a6 <HAL_RCC_ClockConfig+0x2f6>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	691b      	ldr	r3, [r3, #16]
 8004378:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800437c:	d013      	beq.n	80043a6 <HAL_RCC_ClockConfig+0x2f6>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	691b      	ldr	r3, [r3, #16]
 8004382:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004386:	d00e      	beq.n	80043a6 <HAL_RCC_ClockConfig+0x2f6>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	691b      	ldr	r3, [r3, #16]
 800438c:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8004390:	d009      	beq.n	80043a6 <HAL_RCC_ClockConfig+0x2f6>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	691b      	ldr	r3, [r3, #16]
 8004396:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 800439a:	d004      	beq.n	80043a6 <HAL_RCC_ClockConfig+0x2f6>
 800439c:	f240 314d 	movw	r1, #845	; 0x34d
 80043a0:	4812      	ldr	r0, [pc, #72]	; (80043ec <HAL_RCC_ClockConfig+0x33c>)
 80043a2:	f7fd fac4 	bl	800192e <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80043a6:	4b12      	ldr	r3, [pc, #72]	; (80043f0 <HAL_RCC_ClockConfig+0x340>)
 80043a8:	689b      	ldr	r3, [r3, #8]
 80043aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	691b      	ldr	r3, [r3, #16]
 80043b2:	00db      	lsls	r3, r3, #3
 80043b4:	490e      	ldr	r1, [pc, #56]	; (80043f0 <HAL_RCC_ClockConfig+0x340>)
 80043b6:	4313      	orrs	r3, r2
 80043b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80043ba:	f000 f821 	bl	8004400 <HAL_RCC_GetSysClockFreq>
 80043be:	4602      	mov	r2, r0
 80043c0:	4b0b      	ldr	r3, [pc, #44]	; (80043f0 <HAL_RCC_ClockConfig+0x340>)
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	091b      	lsrs	r3, r3, #4
 80043c6:	f003 030f 	and.w	r3, r3, #15
 80043ca:	490a      	ldr	r1, [pc, #40]	; (80043f4 <HAL_RCC_ClockConfig+0x344>)
 80043cc:	5ccb      	ldrb	r3, [r1, r3]
 80043ce:	fa22 f303 	lsr.w	r3, r2, r3
 80043d2:	4a09      	ldr	r2, [pc, #36]	; (80043f8 <HAL_RCC_ClockConfig+0x348>)
 80043d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80043d6:	4b09      	ldr	r3, [pc, #36]	; (80043fc <HAL_RCC_ClockConfig+0x34c>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4618      	mov	r0, r3
 80043dc:	f7fd fdf8 	bl	8001fd0 <HAL_InitTick>

  return HAL_OK;
 80043e0:	2300      	movs	r3, #0
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	3710      	adds	r7, #16
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}
 80043ea:	bf00      	nop
 80043ec:	08012c50 	.word	0x08012c50
 80043f0:	40023800 	.word	0x40023800
 80043f4:	08012d74 	.word	0x08012d74
 80043f8:	20000000 	.word	0x20000000
 80043fc:	20000004 	.word	0x20000004

08004400 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004400:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004404:	b090      	sub	sp, #64	; 0x40
 8004406:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004408:	2300      	movs	r3, #0
 800440a:	637b      	str	r3, [r7, #52]	; 0x34
 800440c:	2300      	movs	r3, #0
 800440e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004410:	2300      	movs	r3, #0
 8004412:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8004414:	2300      	movs	r3, #0
 8004416:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004418:	4b59      	ldr	r3, [pc, #356]	; (8004580 <HAL_RCC_GetSysClockFreq+0x180>)
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	f003 030c 	and.w	r3, r3, #12
 8004420:	2b08      	cmp	r3, #8
 8004422:	d00d      	beq.n	8004440 <HAL_RCC_GetSysClockFreq+0x40>
 8004424:	2b08      	cmp	r3, #8
 8004426:	f200 80a1 	bhi.w	800456c <HAL_RCC_GetSysClockFreq+0x16c>
 800442a:	2b00      	cmp	r3, #0
 800442c:	d002      	beq.n	8004434 <HAL_RCC_GetSysClockFreq+0x34>
 800442e:	2b04      	cmp	r3, #4
 8004430:	d003      	beq.n	800443a <HAL_RCC_GetSysClockFreq+0x3a>
 8004432:	e09b      	b.n	800456c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004434:	4b53      	ldr	r3, [pc, #332]	; (8004584 <HAL_RCC_GetSysClockFreq+0x184>)
 8004436:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004438:	e09b      	b.n	8004572 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800443a:	4b53      	ldr	r3, [pc, #332]	; (8004588 <HAL_RCC_GetSysClockFreq+0x188>)
 800443c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800443e:	e098      	b.n	8004572 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004440:	4b4f      	ldr	r3, [pc, #316]	; (8004580 <HAL_RCC_GetSysClockFreq+0x180>)
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004448:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800444a:	4b4d      	ldr	r3, [pc, #308]	; (8004580 <HAL_RCC_GetSysClockFreq+0x180>)
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004452:	2b00      	cmp	r3, #0
 8004454:	d028      	beq.n	80044a8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004456:	4b4a      	ldr	r3, [pc, #296]	; (8004580 <HAL_RCC_GetSysClockFreq+0x180>)
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	099b      	lsrs	r3, r3, #6
 800445c:	2200      	movs	r2, #0
 800445e:	623b      	str	r3, [r7, #32]
 8004460:	627a      	str	r2, [r7, #36]	; 0x24
 8004462:	6a3b      	ldr	r3, [r7, #32]
 8004464:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004468:	2100      	movs	r1, #0
 800446a:	4b47      	ldr	r3, [pc, #284]	; (8004588 <HAL_RCC_GetSysClockFreq+0x188>)
 800446c:	fb03 f201 	mul.w	r2, r3, r1
 8004470:	2300      	movs	r3, #0
 8004472:	fb00 f303 	mul.w	r3, r0, r3
 8004476:	4413      	add	r3, r2
 8004478:	4a43      	ldr	r2, [pc, #268]	; (8004588 <HAL_RCC_GetSysClockFreq+0x188>)
 800447a:	fba0 1202 	umull	r1, r2, r0, r2
 800447e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004480:	460a      	mov	r2, r1
 8004482:	62ba      	str	r2, [r7, #40]	; 0x28
 8004484:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004486:	4413      	add	r3, r2
 8004488:	62fb      	str	r3, [r7, #44]	; 0x2c
 800448a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800448c:	2200      	movs	r2, #0
 800448e:	61bb      	str	r3, [r7, #24]
 8004490:	61fa      	str	r2, [r7, #28]
 8004492:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004496:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800449a:	f7fc fc15 	bl	8000cc8 <__aeabi_uldivmod>
 800449e:	4602      	mov	r2, r0
 80044a0:	460b      	mov	r3, r1
 80044a2:	4613      	mov	r3, r2
 80044a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80044a6:	e053      	b.n	8004550 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044a8:	4b35      	ldr	r3, [pc, #212]	; (8004580 <HAL_RCC_GetSysClockFreq+0x180>)
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	099b      	lsrs	r3, r3, #6
 80044ae:	2200      	movs	r2, #0
 80044b0:	613b      	str	r3, [r7, #16]
 80044b2:	617a      	str	r2, [r7, #20]
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80044ba:	f04f 0b00 	mov.w	fp, #0
 80044be:	4652      	mov	r2, sl
 80044c0:	465b      	mov	r3, fp
 80044c2:	f04f 0000 	mov.w	r0, #0
 80044c6:	f04f 0100 	mov.w	r1, #0
 80044ca:	0159      	lsls	r1, r3, #5
 80044cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80044d0:	0150      	lsls	r0, r2, #5
 80044d2:	4602      	mov	r2, r0
 80044d4:	460b      	mov	r3, r1
 80044d6:	ebb2 080a 	subs.w	r8, r2, sl
 80044da:	eb63 090b 	sbc.w	r9, r3, fp
 80044de:	f04f 0200 	mov.w	r2, #0
 80044e2:	f04f 0300 	mov.w	r3, #0
 80044e6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80044ea:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80044ee:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80044f2:	ebb2 0408 	subs.w	r4, r2, r8
 80044f6:	eb63 0509 	sbc.w	r5, r3, r9
 80044fa:	f04f 0200 	mov.w	r2, #0
 80044fe:	f04f 0300 	mov.w	r3, #0
 8004502:	00eb      	lsls	r3, r5, #3
 8004504:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004508:	00e2      	lsls	r2, r4, #3
 800450a:	4614      	mov	r4, r2
 800450c:	461d      	mov	r5, r3
 800450e:	eb14 030a 	adds.w	r3, r4, sl
 8004512:	603b      	str	r3, [r7, #0]
 8004514:	eb45 030b 	adc.w	r3, r5, fp
 8004518:	607b      	str	r3, [r7, #4]
 800451a:	f04f 0200 	mov.w	r2, #0
 800451e:	f04f 0300 	mov.w	r3, #0
 8004522:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004526:	4629      	mov	r1, r5
 8004528:	028b      	lsls	r3, r1, #10
 800452a:	4621      	mov	r1, r4
 800452c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004530:	4621      	mov	r1, r4
 8004532:	028a      	lsls	r2, r1, #10
 8004534:	4610      	mov	r0, r2
 8004536:	4619      	mov	r1, r3
 8004538:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800453a:	2200      	movs	r2, #0
 800453c:	60bb      	str	r3, [r7, #8]
 800453e:	60fa      	str	r2, [r7, #12]
 8004540:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004544:	f7fc fbc0 	bl	8000cc8 <__aeabi_uldivmod>
 8004548:	4602      	mov	r2, r0
 800454a:	460b      	mov	r3, r1
 800454c:	4613      	mov	r3, r2
 800454e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004550:	4b0b      	ldr	r3, [pc, #44]	; (8004580 <HAL_RCC_GetSysClockFreq+0x180>)
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	0c1b      	lsrs	r3, r3, #16
 8004556:	f003 0303 	and.w	r3, r3, #3
 800455a:	3301      	adds	r3, #1
 800455c:	005b      	lsls	r3, r3, #1
 800455e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8004560:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004564:	fbb2 f3f3 	udiv	r3, r2, r3
 8004568:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800456a:	e002      	b.n	8004572 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800456c:	4b05      	ldr	r3, [pc, #20]	; (8004584 <HAL_RCC_GetSysClockFreq+0x184>)
 800456e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004570:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004574:	4618      	mov	r0, r3
 8004576:	3740      	adds	r7, #64	; 0x40
 8004578:	46bd      	mov	sp, r7
 800457a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800457e:	bf00      	nop
 8004580:	40023800 	.word	0x40023800
 8004584:	00f42400 	.word	0x00f42400
 8004588:	017d7840 	.word	0x017d7840

0800458c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800458c:	b480      	push	{r7}
 800458e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004590:	4b03      	ldr	r3, [pc, #12]	; (80045a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004592:	681b      	ldr	r3, [r3, #0]
}
 8004594:	4618      	mov	r0, r3
 8004596:	46bd      	mov	sp, r7
 8004598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459c:	4770      	bx	lr
 800459e:	bf00      	nop
 80045a0:	20000000 	.word	0x20000000

080045a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80045a8:	f7ff fff0 	bl	800458c <HAL_RCC_GetHCLKFreq>
 80045ac:	4602      	mov	r2, r0
 80045ae:	4b05      	ldr	r3, [pc, #20]	; (80045c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80045b0:	689b      	ldr	r3, [r3, #8]
 80045b2:	0a9b      	lsrs	r3, r3, #10
 80045b4:	f003 0307 	and.w	r3, r3, #7
 80045b8:	4903      	ldr	r1, [pc, #12]	; (80045c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80045ba:	5ccb      	ldrb	r3, [r1, r3]
 80045bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045c0:	4618      	mov	r0, r3
 80045c2:	bd80      	pop	{r7, pc}
 80045c4:	40023800 	.word	0x40023800
 80045c8:	08012d84 	.word	0x08012d84

080045cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80045d0:	f7ff ffdc 	bl	800458c <HAL_RCC_GetHCLKFreq>
 80045d4:	4602      	mov	r2, r0
 80045d6:	4b05      	ldr	r3, [pc, #20]	; (80045ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80045d8:	689b      	ldr	r3, [r3, #8]
 80045da:	0b5b      	lsrs	r3, r3, #13
 80045dc:	f003 0307 	and.w	r3, r3, #7
 80045e0:	4903      	ldr	r1, [pc, #12]	; (80045f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80045e2:	5ccb      	ldrb	r3, [r1, r3]
 80045e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	bd80      	pop	{r7, pc}
 80045ec:	40023800 	.word	0x40023800
 80045f0:	08012d84 	.word	0x08012d84

080045f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b088      	sub	sp, #32
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80045fc:	2300      	movs	r3, #0
 80045fe:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004600:	2300      	movs	r3, #0
 8004602:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004604:	2300      	movs	r3, #0
 8004606:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004608:	2300      	movs	r3, #0
 800460a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800460c:	2300      	movs	r3, #0
 800460e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f003 0301 	and.w	r3, r3, #1
 8004618:	2b00      	cmp	r3, #0
 800461a:	f040 8089 	bne.w	8004730 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f003 0308 	and.w	r3, r3, #8
 8004626:	2b00      	cmp	r3, #0
 8004628:	f040 8082 	bne.w	8004730 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f003 0310 	and.w	r3, r3, #16
 8004634:	2b00      	cmp	r3, #0
 8004636:	d17b      	bne.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004640:	2b00      	cmp	r3, #0
 8004642:	d175      	bne.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800464c:	2b00      	cmp	r3, #0
 800464e:	d16f      	bne.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004658:	2b00      	cmp	r3, #0
 800465a:	d169      	bne.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004664:	2b00      	cmp	r3, #0
 8004666:	d163      	bne.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004670:	2b00      	cmp	r3, #0
 8004672:	d15d      	bne.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800467c:	2b00      	cmp	r3, #0
 800467e:	d157      	bne.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004688:	2b00      	cmp	r3, #0
 800468a:	d151      	bne.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004694:	2b00      	cmp	r3, #0
 8004696:	d14b      	bne.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d145      	bne.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d13f      	bne.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d139      	bne.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d133      	bne.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d12d      	bne.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d127      	bne.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d121      	bne.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d11b      	bne.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004700:	2b00      	cmp	r3, #0
 8004702:	d115      	bne.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800470c:	2b00      	cmp	r3, #0
 800470e:	d10f      	bne.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004718:	2b00      	cmp	r3, #0
 800471a:	d109      	bne.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f003 0320 	and.w	r3, r3, #32
 8004724:	2b00      	cmp	r3, #0
 8004726:	d103      	bne.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004728:	2172      	movs	r1, #114	; 0x72
 800472a:	4895      	ldr	r0, [pc, #596]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 800472c:	f7fd f8ff 	bl	800192e <assert_failed>

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f003 0301 	and.w	r3, r3, #1
 8004738:	2b00      	cmp	r3, #0
 800473a:	d01f      	beq.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004740:	2b00      	cmp	r3, #0
 8004742:	d008      	beq.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0x162>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004748:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800474c:	d003      	beq.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0x162>
 800474e:	2178      	movs	r1, #120	; 0x78
 8004750:	488b      	ldr	r0, [pc, #556]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8004752:	f7fd f8ec 	bl	800192e <assert_failed>

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004756:	4b8b      	ldr	r3, [pc, #556]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	4a8a      	ldr	r2, [pc, #552]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 800475c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004760:	6093      	str	r3, [r2, #8]
 8004762:	4b88      	ldr	r3, [pc, #544]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8004764:	689a      	ldr	r2, [r3, #8]
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800476a:	4986      	ldr	r1, [pc, #536]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 800476c:	4313      	orrs	r3, r2
 800476e:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004774:	2b00      	cmp	r3, #0
 8004776:	d101      	bne.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x188>
    {
      plli2sused = 1;
 8004778:	2301      	movs	r3, #1
 800477a:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004784:	2b00      	cmp	r3, #0
 8004786:	d029      	beq.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800478c:	2b00      	cmp	r3, #0
 800478e:	d00d      	beq.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004794:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004798:	d008      	beq.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800479e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80047a2:	d003      	beq.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80047a4:	2188      	movs	r1, #136	; 0x88
 80047a6:	4876      	ldr	r0, [pc, #472]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 80047a8:	f7fd f8c1 	bl	800192e <assert_failed>

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80047ac:	4b75      	ldr	r3, [pc, #468]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80047ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80047b2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047ba:	4972      	ldr	r1, [pc, #456]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80047bc:	4313      	orrs	r3, r2
 80047be:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80047ca:	d101      	bne.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      plli2sused = 1;
 80047cc:	2301      	movs	r3, #1
 80047ce:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d101      	bne.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
    {
      pllsaiused = 1;
 80047d8:	2301      	movs	r3, #1
 80047da:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d029      	beq.n	800483c <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d00d      	beq.n	800480c <HAL_RCCEx_PeriphCLKConfig+0x218>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80047f8:	d008      	beq.n	800480c <HAL_RCCEx_PeriphCLKConfig+0x218>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047fe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004802:	d003      	beq.n	800480c <HAL_RCCEx_PeriphCLKConfig+0x218>
 8004804:	219c      	movs	r1, #156	; 0x9c
 8004806:	485e      	ldr	r0, [pc, #376]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8004808:	f7fd f891 	bl	800192e <assert_failed>

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800480c:	4b5d      	ldr	r3, [pc, #372]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 800480e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004812:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800481a:	495a      	ldr	r1, [pc, #360]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 800481c:	4313      	orrs	r3, r2
 800481e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004826:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800482a:	d101      	bne.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      plli2sused = 1;
 800482c:	2301      	movs	r3, #1
 800482e:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004834:	2b00      	cmp	r3, #0
 8004836:	d101      	bne.n	800483c <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      pllsaiused = 1;
 8004838:	2301      	movs	r3, #1
 800483a:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004844:	2b00      	cmp	r3, #0
 8004846:	d001      	beq.n	800484c <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
      plli2sused = 1;
 8004848:	2301      	movs	r3, #1
 800484a:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f003 0320 	and.w	r3, r3, #32
 8004854:	2b00      	cmp	r3, #0
 8004856:	f000 8186 	beq.w	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x572>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800485e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004862:	f000 80e4 	beq.w	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800486a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800486e:	f000 80de 	beq.w	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004876:	4a44      	ldr	r2, [pc, #272]	; (8004988 <HAL_RCCEx_PeriphCLKConfig+0x394>)
 8004878:	4293      	cmp	r3, r2
 800487a:	f000 80d8 	beq.w	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x43a>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004882:	4a42      	ldr	r2, [pc, #264]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x398>)
 8004884:	4293      	cmp	r3, r2
 8004886:	f000 80d2 	beq.w	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x43a>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800488e:	4a40      	ldr	r2, [pc, #256]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8004890:	4293      	cmp	r3, r2
 8004892:	f000 80cc 	beq.w	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800489a:	4a3e      	ldr	r2, [pc, #248]	; (8004994 <HAL_RCCEx_PeriphCLKConfig+0x3a0>)
 800489c:	4293      	cmp	r3, r2
 800489e:	f000 80c6 	beq.w	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048a6:	4a3c      	ldr	r2, [pc, #240]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x3a4>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	f000 80c0 	beq.w	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048b2:	4a3a      	ldr	r2, [pc, #232]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	f000 80ba 	beq.w	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048be:	4a38      	ldr	r2, [pc, #224]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	f000 80b4 	beq.w	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ca:	4a36      	ldr	r2, [pc, #216]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	f000 80ae 	beq.w	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048d6:	4a34      	ldr	r2, [pc, #208]	; (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x3b4>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	f000 80a8 	beq.w	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048e2:	4a32      	ldr	r2, [pc, #200]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0x3b8>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	f000 80a2 	beq.w	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ee:	4a30      	ldr	r2, [pc, #192]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x3bc>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	f000 809c 	beq.w	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048fa:	4a2e      	ldr	r2, [pc, #184]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	f000 8096 	beq.w	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004906:	4a2c      	ldr	r2, [pc, #176]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x3c4>)
 8004908:	4293      	cmp	r3, r2
 800490a:	f000 8090 	beq.w	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x43a>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004912:	4a2a      	ldr	r2, [pc, #168]	; (80049bc <HAL_RCCEx_PeriphCLKConfig+0x3c8>)
 8004914:	4293      	cmp	r3, r2
 8004916:	f000 808a 	beq.w	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x43a>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800491e:	4a28      	ldr	r2, [pc, #160]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8004920:	4293      	cmp	r3, r2
 8004922:	f000 8084 	beq.w	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800492a:	4a26      	ldr	r2, [pc, #152]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d07e      	beq.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004934:	4a24      	ldr	r2, [pc, #144]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d079      	beq.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x43a>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800493e:	4a23      	ldr	r2, [pc, #140]	; (80049cc <HAL_RCCEx_PeriphCLKConfig+0x3d8>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d074      	beq.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004948:	4a21      	ldr	r2, [pc, #132]	; (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d06f      	beq.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x43a>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004952:	4a20      	ldr	r2, [pc, #128]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d06a      	beq.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800495c:	4a1e      	ldr	r2, [pc, #120]	; (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d065      	beq.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004966:	4a1d      	ldr	r2, [pc, #116]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d060      	beq.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x43a>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004970:	4a1b      	ldr	r2, [pc, #108]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d05b      	beq.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800497a:	4a1a      	ldr	r2, [pc, #104]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 800497c:	4293      	cmp	r3, r2
 800497e:	e033      	b.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8004980:	08012c88 	.word	0x08012c88
 8004984:	40023800 	.word	0x40023800
 8004988:	00020300 	.word	0x00020300
 800498c:	00030300 	.word	0x00030300
 8004990:	00040300 	.word	0x00040300
 8004994:	00050300 	.word	0x00050300
 8004998:	00060300 	.word	0x00060300
 800499c:	00070300 	.word	0x00070300
 80049a0:	00080300 	.word	0x00080300
 80049a4:	00090300 	.word	0x00090300
 80049a8:	000a0300 	.word	0x000a0300
 80049ac:	000b0300 	.word	0x000b0300
 80049b0:	000c0300 	.word	0x000c0300
 80049b4:	000d0300 	.word	0x000d0300
 80049b8:	000e0300 	.word	0x000e0300
 80049bc:	000f0300 	.word	0x000f0300
 80049c0:	00100300 	.word	0x00100300
 80049c4:	00110300 	.word	0x00110300
 80049c8:	00120300 	.word	0x00120300
 80049cc:	00130300 	.word	0x00130300
 80049d0:	00140300 	.word	0x00140300
 80049d4:	00150300 	.word	0x00150300
 80049d8:	00160300 	.word	0x00160300
 80049dc:	00170300 	.word	0x00170300
 80049e0:	00180300 	.word	0x00180300
 80049e4:	00190300 	.word	0x00190300
 80049e8:	d021      	beq.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ee:	4a4c      	ldr	r2, [pc, #304]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x52c>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d01c      	beq.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049f8:	4a4a      	ldr	r2, [pc, #296]	; (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d017      	beq.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a02:	4a49      	ldr	r2, [pc, #292]	; (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x534>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d012      	beq.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a0c:	4a47      	ldr	r2, [pc, #284]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d00d      	beq.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a16:	4a46      	ldr	r2, [pc, #280]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d008      	beq.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a20:	4a44      	ldr	r2, [pc, #272]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d003      	beq.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004a26:	21b7      	movs	r1, #183	; 0xb7
 8004a28:	4843      	ldr	r0, [pc, #268]	; (8004b38 <HAL_RCCEx_PeriphCLKConfig+0x544>)
 8004a2a:	f7fc ff80 	bl	800192e <assert_failed>

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004a2e:	4b43      	ldr	r3, [pc, #268]	; (8004b3c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a32:	4a42      	ldr	r2, [pc, #264]	; (8004b3c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004a34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a38:	6413      	str	r3, [r2, #64]	; 0x40
 8004a3a:	4b40      	ldr	r3, [pc, #256]	; (8004b3c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a42:	60bb      	str	r3, [r7, #8]
 8004a44:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004a46:	4b3e      	ldr	r3, [pc, #248]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a3d      	ldr	r2, [pc, #244]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 8004a4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a50:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a52:	f7fd fb01 	bl	8002058 <HAL_GetTick>
 8004a56:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004a58:	e009      	b.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0x47a>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a5a:	f7fd fafd 	bl	8002058 <HAL_GetTick>
 8004a5e:	4602      	mov	r2, r0
 8004a60:	697b      	ldr	r3, [r7, #20]
 8004a62:	1ad3      	subs	r3, r2, r3
 8004a64:	2b64      	cmp	r3, #100	; 0x64
 8004a66:	d902      	bls.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0x47a>
      {
        return HAL_TIMEOUT;
 8004a68:	2303      	movs	r3, #3
 8004a6a:	f000 bd9f 	b.w	80055ac <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004a6e:	4b34      	ldr	r3, [pc, #208]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d0ef      	beq.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0x466>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004a7a:	4b30      	ldr	r3, [pc, #192]	; (8004b3c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004a7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a82:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004a84:	693b      	ldr	r3, [r7, #16]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d036      	beq.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a92:	693a      	ldr	r2, [r7, #16]
 8004a94:	429a      	cmp	r2, r3
 8004a96:	d02f      	beq.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004a98:	4b28      	ldr	r3, [pc, #160]	; (8004b3c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004a9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004aa0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004aa2:	4b26      	ldr	r3, [pc, #152]	; (8004b3c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004aa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aa6:	4a25      	ldr	r2, [pc, #148]	; (8004b3c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004aa8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004aac:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004aae:	4b23      	ldr	r3, [pc, #140]	; (8004b3c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004ab0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ab2:	4a22      	ldr	r2, [pc, #136]	; (8004b3c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004ab4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ab8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004aba:	4a20      	ldr	r2, [pc, #128]	; (8004b3c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004abc:	693b      	ldr	r3, [r7, #16]
 8004abe:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004ac0:	4b1e      	ldr	r3, [pc, #120]	; (8004b3c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004ac2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ac4:	f003 0301 	and.w	r3, r3, #1
 8004ac8:	2b01      	cmp	r3, #1
 8004aca:	d115      	bne.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0x504>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004acc:	f7fd fac4 	bl	8002058 <HAL_GetTick>
 8004ad0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ad2:	e00b      	b.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x4f8>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ad4:	f7fd fac0 	bl	8002058 <HAL_GetTick>
 8004ad8:	4602      	mov	r2, r0
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	1ad3      	subs	r3, r2, r3
 8004ade:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d902      	bls.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8004ae6:	2303      	movs	r3, #3
 8004ae8:	f000 bd60 	b.w	80055ac <HAL_RCCEx_PeriphCLKConfig+0xfb8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004aec:	4b13      	ldr	r3, [pc, #76]	; (8004b3c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004aee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004af0:	f003 0302 	and.w	r3, r3, #2
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d0ed      	beq.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004afc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b00:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b04:	d120      	bne.n	8004b48 <HAL_RCCEx_PeriphCLKConfig+0x554>
 8004b06:	4b0d      	ldr	r3, [pc, #52]	; (8004b3c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004b08:	689b      	ldr	r3, [r3, #8]
 8004b0a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004b12:	4b0c      	ldr	r3, [pc, #48]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8004b14:	400b      	ands	r3, r1
 8004b16:	4909      	ldr	r1, [pc, #36]	; (8004b3c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	608b      	str	r3, [r1, #8]
 8004b1c:	e01a      	b.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0x560>
 8004b1e:	bf00      	nop
 8004b20:	001a0300 	.word	0x001a0300
 8004b24:	001b0300 	.word	0x001b0300
 8004b28:	001c0300 	.word	0x001c0300
 8004b2c:	001d0300 	.word	0x001d0300
 8004b30:	001e0300 	.word	0x001e0300
 8004b34:	001f0300 	.word	0x001f0300
 8004b38:	08012c88 	.word	0x08012c88
 8004b3c:	40023800 	.word	0x40023800
 8004b40:	40007000 	.word	0x40007000
 8004b44:	0ffffcff 	.word	0x0ffffcff
 8004b48:	4b9a      	ldr	r3, [pc, #616]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004b4a:	689b      	ldr	r3, [r3, #8]
 8004b4c:	4a99      	ldr	r2, [pc, #612]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004b4e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004b52:	6093      	str	r3, [r2, #8]
 8004b54:	4b97      	ldr	r3, [pc, #604]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004b56:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b60:	4994      	ldr	r1, [pc, #592]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004b62:	4313      	orrs	r3, r2
 8004b64:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f003 0310 	and.w	r3, r3, #16
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d01d      	beq.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d008      	beq.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x598>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b7e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004b82:	d003      	beq.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x598>
 8004b84:	21f1      	movs	r1, #241	; 0xf1
 8004b86:	488c      	ldr	r0, [pc, #560]	; (8004db8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8004b88:	f7fc fed1 	bl	800192e <assert_failed>

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004b8c:	4b89      	ldr	r3, [pc, #548]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004b8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b92:	4a88      	ldr	r2, [pc, #544]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004b94:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b98:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004b9c:	4b85      	ldr	r3, [pc, #532]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004b9e:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ba6:	4983      	ldr	r1, [pc, #524]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d01c      	beq.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x600>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d00d      	beq.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0x5ea>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004bc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bca:	d008      	beq.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0x5ea>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004bd0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004bd4:	d003      	beq.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0x5ea>
 8004bd6:	21fb      	movs	r1, #251	; 0xfb
 8004bd8:	4877      	ldr	r0, [pc, #476]	; (8004db8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8004bda:	f7fc fea8 	bl	800192e <assert_failed>

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004bde:	4b75      	ldr	r3, [pc, #468]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004be0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004be4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004bec:	4971      	ldr	r1, [pc, #452]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d01d      	beq.n	8004c3c <HAL_RCCEx_PeriphCLKConfig+0x648>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d00e      	beq.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x632>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004c0c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004c10:	d009      	beq.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x632>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004c16:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004c1a:	d004      	beq.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x632>
 8004c1c:	f240 1105 	movw	r1, #261	; 0x105
 8004c20:	4865      	ldr	r0, [pc, #404]	; (8004db8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8004c22:	f7fc fe84 	bl	800192e <assert_failed>

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004c26:	4b63      	ldr	r3, [pc, #396]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004c28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c2c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004c34:	495f      	ldr	r1, [pc, #380]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004c36:	4313      	orrs	r3, r2
 8004c38:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d01d      	beq.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0x690>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d00e      	beq.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x67a>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c54:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c58:	d009      	beq.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x67a>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c5e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004c62:	d004      	beq.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x67a>
 8004c64:	f240 110f 	movw	r1, #271	; 0x10f
 8004c68:	4853      	ldr	r0, [pc, #332]	; (8004db8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8004c6a:	f7fc fe60 	bl	800192e <assert_failed>

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004c6e:	4b51      	ldr	r3, [pc, #324]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004c70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c74:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c7c:	494d      	ldr	r1, [pc, #308]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d01d      	beq.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d00e      	beq.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0x6c2>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c9c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ca0:	d009      	beq.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0x6c2>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ca6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004caa:	d004      	beq.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0x6c2>
 8004cac:	f240 1119 	movw	r1, #281	; 0x119
 8004cb0:	4841      	ldr	r0, [pc, #260]	; (8004db8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8004cb2:	f7fc fe3c 	bl	800192e <assert_failed>

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004cb6:	4b3f      	ldr	r3, [pc, #252]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004cb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cbc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cc4:	493b      	ldr	r1, [pc, #236]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d01f      	beq.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x724>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d010      	beq.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0x70e>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ce4:	2b01      	cmp	r3, #1
 8004ce6:	d00c      	beq.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0x70e>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cec:	2b03      	cmp	r3, #3
 8004cee:	d008      	beq.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0x70e>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cf4:	2b02      	cmp	r3, #2
 8004cf6:	d004      	beq.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0x70e>
 8004cf8:	f240 1123 	movw	r1, #291	; 0x123
 8004cfc:	482e      	ldr	r0, [pc, #184]	; (8004db8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8004cfe:	f7fc fe16 	bl	800192e <assert_failed>

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004d02:	4b2c      	ldr	r3, [pc, #176]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004d04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d08:	f023 0203 	bic.w	r2, r3, #3
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d10:	4928      	ldr	r1, [pc, #160]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004d12:	4313      	orrs	r3, r2
 8004d14:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d01f      	beq.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x770>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d010      	beq.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x75a>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d30:	2b04      	cmp	r3, #4
 8004d32:	d00c      	beq.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x75a>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d38:	2b0c      	cmp	r3, #12
 8004d3a:	d008      	beq.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x75a>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d40:	2b08      	cmp	r3, #8
 8004d42:	d004      	beq.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x75a>
 8004d44:	f240 112d 	movw	r1, #301	; 0x12d
 8004d48:	481b      	ldr	r0, [pc, #108]	; (8004db8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8004d4a:	f7fc fdf0 	bl	800192e <assert_failed>

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004d4e:	4b19      	ldr	r3, [pc, #100]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004d50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d54:	f023 020c 	bic.w	r2, r3, #12
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d5c:	4915      	ldr	r1, [pc, #84]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d025      	beq.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0x7c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d010      	beq.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0x7a6>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d7c:	2b10      	cmp	r3, #16
 8004d7e:	d00c      	beq.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0x7a6>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d84:	2b30      	cmp	r3, #48	; 0x30
 8004d86:	d008      	beq.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0x7a6>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d8c:	2b20      	cmp	r3, #32
 8004d8e:	d004      	beq.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0x7a6>
 8004d90:	f240 1137 	movw	r1, #311	; 0x137
 8004d94:	4808      	ldr	r0, [pc, #32]	; (8004db8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8004d96:	f7fc fdca 	bl	800192e <assert_failed>

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004d9a:	4b06      	ldr	r3, [pc, #24]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004d9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004da0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004da8:	4902      	ldr	r1, [pc, #8]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004daa:	4313      	orrs	r3, r2
 8004dac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004db0:	e004      	b.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0x7c8>
 8004db2:	bf00      	nop
 8004db4:	40023800 	.word	0x40023800
 8004db8:	08012c88 	.word	0x08012c88
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d01f      	beq.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x814>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d010      	beq.n	8004df2 <HAL_RCCEx_PeriphCLKConfig+0x7fe>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dd4:	2b40      	cmp	r3, #64	; 0x40
 8004dd6:	d00c      	beq.n	8004df2 <HAL_RCCEx_PeriphCLKConfig+0x7fe>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ddc:	2bc0      	cmp	r3, #192	; 0xc0
 8004dde:	d008      	beq.n	8004df2 <HAL_RCCEx_PeriphCLKConfig+0x7fe>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004de4:	2b80      	cmp	r3, #128	; 0x80
 8004de6:	d004      	beq.n	8004df2 <HAL_RCCEx_PeriphCLKConfig+0x7fe>
 8004de8:	f240 1141 	movw	r1, #321	; 0x141
 8004dec:	48a0      	ldr	r0, [pc, #640]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8004dee:	f7fc fd9e 	bl	800192e <assert_failed>

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004df2:	4ba0      	ldr	r3, [pc, #640]	; (8005074 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8004df4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004df8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e00:	499c      	ldr	r1, [pc, #624]	; (8005074 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8004e02:	4313      	orrs	r3, r2
 8004e04:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d022      	beq.n	8004e5a <HAL_RCCEx_PeriphCLKConfig+0x866>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d013      	beq.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x850>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e24:	d00e      	beq.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x850>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e2a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e2e:	d009      	beq.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x850>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e38:	d004      	beq.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x850>
 8004e3a:	f240 114b 	movw	r1, #331	; 0x14b
 8004e3e:	488c      	ldr	r0, [pc, #560]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8004e40:	f7fc fd75 	bl	800192e <assert_failed>

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004e44:	4b8b      	ldr	r3, [pc, #556]	; (8005074 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8004e46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e4a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e52:	4988      	ldr	r1, [pc, #544]	; (8005074 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8004e54:	4313      	orrs	r3, r2
 8004e56:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d022      	beq.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x8b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d013      	beq.n	8004e96 <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e76:	d00e      	beq.n	8004e96 <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e7c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004e80:	d009      	beq.n	8004e96 <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e8a:	d004      	beq.n	8004e96 <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 8004e8c:	f240 1155 	movw	r1, #341	; 0x155
 8004e90:	4877      	ldr	r0, [pc, #476]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8004e92:	f7fc fd4c 	bl	800192e <assert_failed>

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004e96:	4b77      	ldr	r3, [pc, #476]	; (8005074 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8004e98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e9c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ea4:	4973      	ldr	r1, [pc, #460]	; (8005074 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d022      	beq.n	8004efe <HAL_RCCEx_PeriphCLKConfig+0x90a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d013      	beq.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ec4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ec8:	d00e      	beq.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ece:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004ed2:	d009      	beq.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ed8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004edc:	d004      	beq.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
 8004ede:	f240 115f 	movw	r1, #351	; 0x15f
 8004ee2:	4863      	ldr	r0, [pc, #396]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8004ee4:	f7fc fd23 	bl	800192e <assert_failed>

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004ee8:	4b62      	ldr	r3, [pc, #392]	; (8005074 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8004eea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004eee:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ef6:	495f      	ldr	r1, [pc, #380]	; (8005074 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d022      	beq.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d013      	beq.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x946>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f16:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004f1a:	d00e      	beq.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x946>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f20:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004f24:	d009      	beq.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x946>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f2e:	d004      	beq.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x946>
 8004f30:	f240 1169 	movw	r1, #361	; 0x169
 8004f34:	484e      	ldr	r0, [pc, #312]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8004f36:	f7fc fcfa 	bl	800192e <assert_failed>

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004f3a:	4b4e      	ldr	r3, [pc, #312]	; (8005074 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8004f3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f40:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f48:	494a      	ldr	r1, [pc, #296]	; (8005074 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d018      	beq.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0x99a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f60:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004f64:	d008      	beq.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d004      	beq.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8004f6e:	f240 1173 	movw	r1, #371	; 0x173
 8004f72:	483f      	ldr	r0, [pc, #252]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8004f74:	f7fc fcdb 	bl	800192e <assert_failed>

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004f78:	4b3e      	ldr	r3, [pc, #248]	; (8005074 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8004f7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f7e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f86:	493b      	ldr	r1, [pc, #236]	; (8005074 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d01f      	beq.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0x9e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f9e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004fa2:	d008      	beq.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0x9c2>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d004      	beq.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0x9c2>
 8004fac:	f240 117d 	movw	r1, #381	; 0x17d
 8004fb0:	482f      	ldr	r0, [pc, #188]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8004fb2:	f7fc fcbc 	bl	800192e <assert_failed>

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004fb6:	4b2f      	ldr	r3, [pc, #188]	; (8005074 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8004fb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fbc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004fc4:	492b      	ldr	r1, [pc, #172]	; (8005074 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004fd0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004fd4:	d101      	bne.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0x9e6>
    {
      pllsaiused = 1;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f003 0308 	and.w	r3, r3, #8
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d001      	beq.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0x9f6>
  {
    pllsaiused = 1;
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d022      	beq.n	800503c <HAL_RCCEx_PeriphCLKConfig+0xa48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d013      	beq.n	8005026 <HAL_RCCEx_PeriphCLKConfig+0xa32>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005002:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005006:	d00e      	beq.n	8005026 <HAL_RCCEx_PeriphCLKConfig+0xa32>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800500c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005010:	d009      	beq.n	8005026 <HAL_RCCEx_PeriphCLKConfig+0xa32>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005016:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800501a:	d004      	beq.n	8005026 <HAL_RCCEx_PeriphCLKConfig+0xa32>
 800501c:	f240 1195 	movw	r1, #405	; 0x195
 8005020:	4813      	ldr	r0, [pc, #76]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8005022:	f7fc fc84 	bl	800192e <assert_failed>

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005026:	4b13      	ldr	r3, [pc, #76]	; (8005074 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8005028:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800502c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005034:	490f      	ldr	r1, [pc, #60]	; (8005074 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8005036:	4313      	orrs	r3, r2
 8005038:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005044:	2b00      	cmp	r3, #0
 8005046:	d020      	beq.n	800508a <HAL_RCCEx_PeriphCLKConfig+0xa96>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800504e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005052:	d009      	beq.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800505a:	2b00      	cmp	r3, #0
 800505c:	d004      	beq.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800505e:	f240 119f 	movw	r1, #415	; 0x19f
 8005062:	4803      	ldr	r0, [pc, #12]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8005064:	f7fc fc63 	bl	800192e <assert_failed>

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005068:	4b02      	ldr	r3, [pc, #8]	; (8005074 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 800506a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800506e:	e003      	b.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0xa84>
 8005070:	08012c88 	.word	0x08012c88
 8005074:	40023800 	.word	0x40023800
 8005078:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005082:	4910      	ldr	r1, [pc, #64]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0xad0>)
 8005084:	4313      	orrs	r3, r2
 8005086:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800508a:	69fb      	ldr	r3, [r7, #28]
 800508c:	2b01      	cmp	r3, #1
 800508e:	d006      	beq.n	800509e <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005098:	2b00      	cmp	r3, #0
 800509a:	f000 8155 	beq.w	8005348 <HAL_RCCEx_PeriphCLKConfig+0xd54>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800509e:	4b09      	ldr	r3, [pc, #36]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0xad0>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a08      	ldr	r2, [pc, #32]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0xad0>)
 80050a4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80050a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050aa:	f7fc ffd5 	bl	8002058 <HAL_GetTick>
 80050ae:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80050b0:	e00a      	b.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0xad4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80050b2:	f7fc ffd1 	bl	8002058 <HAL_GetTick>
 80050b6:	4602      	mov	r2, r0
 80050b8:	697b      	ldr	r3, [r7, #20]
 80050ba:	1ad3      	subs	r3, r2, r3
 80050bc:	2b64      	cmp	r3, #100	; 0x64
 80050be:	d903      	bls.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0xad4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80050c0:	2303      	movs	r3, #3
 80050c2:	e273      	b.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0xfb8>
 80050c4:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80050c8:	4b9a      	ldr	r3, [pc, #616]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d1ee      	bne.n	80050b2 <HAL_RCCEx_PeriphCLKConfig+0xabe>
      }
    }

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	685b      	ldr	r3, [r3, #4]
 80050d8:	2b31      	cmp	r3, #49	; 0x31
 80050da:	d904      	bls.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 80050e4:	d904      	bls.n	80050f0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
 80050e6:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 80050ea:	4893      	ldr	r0, [pc, #588]	; (8005338 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 80050ec:	f7fc fc1f 	bl	800192e <assert_failed>

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f003 0301 	and.w	r3, r3, #1
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d02e      	beq.n	800515a <HAL_RCCEx_PeriphCLKConfig+0xb66>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005100:	2b00      	cmp	r3, #0
 8005102:	d12a      	bne.n	800515a <HAL_RCCEx_PeriphCLKConfig+0xb66>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	689b      	ldr	r3, [r3, #8]
 8005108:	2b01      	cmp	r3, #1
 800510a:	d903      	bls.n	8005114 <HAL_RCCEx_PeriphCLKConfig+0xb20>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	689b      	ldr	r3, [r3, #8]
 8005110:	2b07      	cmp	r3, #7
 8005112:	d904      	bls.n	800511e <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8005114:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8005118:	4887      	ldr	r0, [pc, #540]	; (8005338 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 800511a:	f7fc fc08 	bl	800192e <assert_failed>

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800511e:	4b85      	ldr	r3, [pc, #532]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8005120:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005124:	0c1b      	lsrs	r3, r3, #16
 8005126:	f003 0303 	and.w	r3, r3, #3
 800512a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800512c:	4b81      	ldr	r3, [pc, #516]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 800512e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005132:	0e1b      	lsrs	r3, r3, #24
 8005134:	f003 030f 	and.w	r3, r3, #15
 8005138:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	019a      	lsls	r2, r3, #6
 8005140:	693b      	ldr	r3, [r7, #16]
 8005142:	041b      	lsls	r3, r3, #16
 8005144:	431a      	orrs	r2, r3
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	061b      	lsls	r3, r3, #24
 800514a:	431a      	orrs	r2, r3
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	689b      	ldr	r3, [r3, #8]
 8005150:	071b      	lsls	r3, r3, #28
 8005152:	4978      	ldr	r1, [pc, #480]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8005154:	4313      	orrs	r3, r2
 8005156:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005162:	2b00      	cmp	r3, #0
 8005164:	d004      	beq.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800516a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800516e:	d00a      	beq.n	8005186 <HAL_RCCEx_PeriphCLKConfig+0xb92>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005178:	2b00      	cmp	r3, #0
 800517a:	d048      	beq.n	800520e <HAL_RCCEx_PeriphCLKConfig+0xc1a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005180:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005184:	d143      	bne.n	800520e <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {
      /* Check for PLLI2S Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	68db      	ldr	r3, [r3, #12]
 800518a:	2b01      	cmp	r3, #1
 800518c:	d903      	bls.n	8005196 <HAL_RCCEx_PeriphCLKConfig+0xba2>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	68db      	ldr	r3, [r3, #12]
 8005192:	2b0f      	cmp	r3, #15
 8005194:	d904      	bls.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8005196:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
 800519a:	4867      	ldr	r0, [pc, #412]	; (8005338 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 800519c:	f7fc fbc7 	bl	800192e <assert_failed>
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d003      	beq.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0xbbc>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ac:	2b20      	cmp	r3, #32
 80051ae:	d904      	bls.n	80051ba <HAL_RCCEx_PeriphCLKConfig+0xbc6>
 80051b0:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
 80051b4:	4860      	ldr	r0, [pc, #384]	; (8005338 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 80051b6:	f7fc fbba 	bl	800192e <assert_failed>

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80051ba:	4b5e      	ldr	r3, [pc, #376]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 80051bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051c0:	0c1b      	lsrs	r3, r3, #16
 80051c2:	f003 0303 	and.w	r3, r3, #3
 80051c6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80051c8:	4b5a      	ldr	r3, [pc, #360]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 80051ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051ce:	0f1b      	lsrs	r3, r3, #28
 80051d0:	f003 0307 	and.w	r3, r3, #7
 80051d4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	685b      	ldr	r3, [r3, #4]
 80051da:	019a      	lsls	r2, r3, #6
 80051dc:	693b      	ldr	r3, [r7, #16]
 80051de:	041b      	lsls	r3, r3, #16
 80051e0:	431a      	orrs	r2, r3
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	68db      	ldr	r3, [r3, #12]
 80051e6:	061b      	lsls	r3, r3, #24
 80051e8:	431a      	orrs	r2, r3
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	071b      	lsls	r3, r3, #28
 80051ee:	4951      	ldr	r1, [pc, #324]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 80051f0:	4313      	orrs	r3, r2
 80051f2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80051f6:	4b4f      	ldr	r3, [pc, #316]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 80051f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80051fc:	f023 021f 	bic.w	r2, r3, #31
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005204:	3b01      	subs	r3, #1
 8005206:	494b      	ldr	r1, [pc, #300]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8005208:	4313      	orrs	r3, r2
 800520a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005216:	2b00      	cmp	r3, #0
 8005218:	d032      	beq.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0xc8c>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	691b      	ldr	r3, [r3, #16]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d010      	beq.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0xc50>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	691b      	ldr	r3, [r3, #16]
 8005226:	2b01      	cmp	r3, #1
 8005228:	d00c      	beq.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0xc50>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	691b      	ldr	r3, [r3, #16]
 800522e:	2b02      	cmp	r3, #2
 8005230:	d008      	beq.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0xc50>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	691b      	ldr	r3, [r3, #16]
 8005236:	2b03      	cmp	r3, #3
 8005238:	d004      	beq.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0xc50>
 800523a:	f240 2105 	movw	r1, #517	; 0x205
 800523e:	483e      	ldr	r0, [pc, #248]	; (8005338 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 8005240:	f7fc fb75 	bl	800192e <assert_failed>

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005244:	4b3b      	ldr	r3, [pc, #236]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8005246:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800524a:	0e1b      	lsrs	r3, r3, #24
 800524c:	f003 030f 	and.w	r3, r3, #15
 8005250:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005252:	4b38      	ldr	r3, [pc, #224]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8005254:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005258:	0f1b      	lsrs	r3, r3, #28
 800525a:	f003 0307 	and.w	r3, r3, #7
 800525e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	019a      	lsls	r2, r3, #6
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	691b      	ldr	r3, [r3, #16]
 800526a:	041b      	lsls	r3, r3, #16
 800526c:	431a      	orrs	r2, r3
 800526e:	693b      	ldr	r3, [r7, #16]
 8005270:	061b      	lsls	r3, r3, #24
 8005272:	431a      	orrs	r2, r3
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	071b      	lsls	r3, r3, #28
 8005278:	492e      	ldr	r1, [pc, #184]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 800527a:	4313      	orrs	r3, r2
 800527c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005288:	2b00      	cmp	r3, #0
 800528a:	d040      	beq.n	800530e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	691b      	ldr	r3, [r3, #16]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d010      	beq.n	80052b6 <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	691b      	ldr	r3, [r3, #16]
 8005298:	2b01      	cmp	r3, #1
 800529a:	d00c      	beq.n	80052b6 <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	691b      	ldr	r3, [r3, #16]
 80052a0:	2b02      	cmp	r3, #2
 80052a2:	d008      	beq.n	80052b6 <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	691b      	ldr	r3, [r3, #16]
 80052a8:	2b03      	cmp	r3, #3
 80052aa:	d004      	beq.n	80052b6 <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 80052ac:	f44f 7105 	mov.w	r1, #532	; 0x214
 80052b0:	4821      	ldr	r0, [pc, #132]	; (8005338 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 80052b2:	f7fc fb3c 	bl	800192e <assert_failed>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	689b      	ldr	r3, [r3, #8]
 80052ba:	2b01      	cmp	r3, #1
 80052bc:	d903      	bls.n	80052c6 <HAL_RCCEx_PeriphCLKConfig+0xcd2>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	689b      	ldr	r3, [r3, #8]
 80052c2:	2b07      	cmp	r3, #7
 80052c4:	d904      	bls.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 80052c6:	f240 2115 	movw	r1, #533	; 0x215
 80052ca:	481b      	ldr	r0, [pc, #108]	; (8005338 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 80052cc:	f7fc fb2f 	bl	800192e <assert_failed>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	68db      	ldr	r3, [r3, #12]
 80052d4:	2b01      	cmp	r3, #1
 80052d6:	d903      	bls.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0xcec>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	68db      	ldr	r3, [r3, #12]
 80052dc:	2b0f      	cmp	r3, #15
 80052de:	d904      	bls.n	80052ea <HAL_RCCEx_PeriphCLKConfig+0xcf6>
 80052e0:	f240 2116 	movw	r1, #534	; 0x216
 80052e4:	4814      	ldr	r0, [pc, #80]	; (8005338 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 80052e6:	f7fc fb22 	bl	800192e <assert_failed>

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	019a      	lsls	r2, r3, #6
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	691b      	ldr	r3, [r3, #16]
 80052f4:	041b      	lsls	r3, r3, #16
 80052f6:	431a      	orrs	r2, r3
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	68db      	ldr	r3, [r3, #12]
 80052fc:	061b      	lsls	r3, r3, #24
 80052fe:	431a      	orrs	r2, r3
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	689b      	ldr	r3, [r3, #8]
 8005304:	071b      	lsls	r3, r3, #28
 8005306:	490b      	ldr	r1, [pc, #44]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8005308:	4313      	orrs	r3, r2
 800530a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800530e:	4b09      	ldr	r3, [pc, #36]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	4a08      	ldr	r2, [pc, #32]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8005314:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005318:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800531a:	f7fc fe9d 	bl	8002058 <HAL_GetTick>
 800531e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005320:	e00c      	b.n	800533c <HAL_RCCEx_PeriphCLKConfig+0xd48>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005322:	f7fc fe99 	bl	8002058 <HAL_GetTick>
 8005326:	4602      	mov	r2, r0
 8005328:	697b      	ldr	r3, [r7, #20]
 800532a:	1ad3      	subs	r3, r2, r3
 800532c:	2b64      	cmp	r3, #100	; 0x64
 800532e:	d905      	bls.n	800533c <HAL_RCCEx_PeriphCLKConfig+0xd48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005330:	2303      	movs	r3, #3
 8005332:	e13b      	b.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0xfb8>
 8005334:	40023800 	.word	0x40023800
 8005338:	08012c88 	.word	0x08012c88
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800533c:	4b9d      	ldr	r3, [pc, #628]	; (80055b4 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005344:	2b00      	cmp	r3, #0
 8005346:	d0ec      	beq.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0xd2e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005348:	69bb      	ldr	r3, [r7, #24]
 800534a:	2b01      	cmp	r3, #1
 800534c:	f040 812d 	bne.w	80055aa <HAL_RCCEx_PeriphCLKConfig+0xfb6>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005350:	4b98      	ldr	r3, [pc, #608]	; (80055b4 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a97      	ldr	r2, [pc, #604]	; (80055b4 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8005356:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800535a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800535c:	f7fc fe7c 	bl	8002058 <HAL_GetTick>
 8005360:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005362:	e008      	b.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0xd82>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005364:	f7fc fe78 	bl	8002058 <HAL_GetTick>
 8005368:	4602      	mov	r2, r0
 800536a:	697b      	ldr	r3, [r7, #20]
 800536c:	1ad3      	subs	r3, r2, r3
 800536e:	2b64      	cmp	r3, #100	; 0x64
 8005370:	d901      	bls.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0xd82>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005372:	2303      	movs	r3, #3
 8005374:	e11a      	b.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005376:	4b8f      	ldr	r3, [pc, #572]	; (80055b4 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800537e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005382:	d0ef      	beq.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0xd70>
      }
    }

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	695b      	ldr	r3, [r3, #20]
 8005388:	2b31      	cmp	r3, #49	; 0x31
 800538a:	d904      	bls.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0xda2>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	695b      	ldr	r3, [r3, #20]
 8005390:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8005394:	d904      	bls.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0xdac>
 8005396:	f44f 7111 	mov.w	r1, #580	; 0x244
 800539a:	4887      	ldr	r0, [pc, #540]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 800539c:	f7fc fac7 	bl	800192e <assert_failed>

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d003      	beq.n	80053b4 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d009      	beq.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0xdd4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d048      	beq.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0xe5e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d144      	bne.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0xe5e>
    {
      /* check for PLLSAIQ Parameter */
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	699b      	ldr	r3, [r3, #24]
 80053cc:	2b01      	cmp	r3, #1
 80053ce:	d903      	bls.n	80053d8 <HAL_RCCEx_PeriphCLKConfig+0xde4>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	699b      	ldr	r3, [r3, #24]
 80053d4:	2b0f      	cmp	r3, #15
 80053d6:	d904      	bls.n	80053e2 <HAL_RCCEx_PeriphCLKConfig+0xdee>
 80053d8:	f240 214b 	movw	r1, #587	; 0x24b
 80053dc:	4876      	ldr	r0, [pc, #472]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 80053de:	f7fc faa6 	bl	800192e <assert_failed>
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d003      	beq.n	80053f2 <HAL_RCCEx_PeriphCLKConfig+0xdfe>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053ee:	2b20      	cmp	r3, #32
 80053f0:	d904      	bls.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0xe08>
 80053f2:	f240 214d 	movw	r1, #589	; 0x24d
 80053f6:	4870      	ldr	r0, [pc, #448]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 80053f8:	f7fc fa99 	bl	800192e <assert_failed>

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80053fc:	4b6d      	ldr	r3, [pc, #436]	; (80055b4 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 80053fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005402:	0c1b      	lsrs	r3, r3, #16
 8005404:	f003 0303 	and.w	r3, r3, #3
 8005408:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800540a:	4b6a      	ldr	r3, [pc, #424]	; (80055b4 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 800540c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005410:	0f1b      	lsrs	r3, r3, #28
 8005412:	f003 0307 	and.w	r3, r3, #7
 8005416:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	695b      	ldr	r3, [r3, #20]
 800541c:	019a      	lsls	r2, r3, #6
 800541e:	693b      	ldr	r3, [r7, #16]
 8005420:	041b      	lsls	r3, r3, #16
 8005422:	431a      	orrs	r2, r3
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	699b      	ldr	r3, [r3, #24]
 8005428:	061b      	lsls	r3, r3, #24
 800542a:	431a      	orrs	r2, r3
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	071b      	lsls	r3, r3, #28
 8005430:	4960      	ldr	r1, [pc, #384]	; (80055b4 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8005432:	4313      	orrs	r3, r2
 8005434:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005438:	4b5e      	ldr	r3, [pc, #376]	; (80055b4 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 800543a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800543e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005446:	3b01      	subs	r3, #1
 8005448:	021b      	lsls	r3, r3, #8
 800544a:	495a      	ldr	r1, [pc, #360]	; (80055b4 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 800544c:	4313      	orrs	r3, r2
 800544e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800545a:	2b00      	cmp	r3, #0
 800545c:	d037      	beq.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0xeda>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005462:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005466:	d132      	bne.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0xeda>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6a1b      	ldr	r3, [r3, #32]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d010      	beq.n	8005492 <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6a1b      	ldr	r3, [r3, #32]
 8005474:	2b01      	cmp	r3, #1
 8005476:	d00c      	beq.n	8005492 <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6a1b      	ldr	r3, [r3, #32]
 800547c:	2b02      	cmp	r3, #2
 800547e:	d008      	beq.n	8005492 <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6a1b      	ldr	r3, [r3, #32]
 8005484:	2b03      	cmp	r3, #3
 8005486:	d004      	beq.n	8005492 <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 8005488:	f44f 7118 	mov.w	r1, #608	; 0x260
 800548c:	484a      	ldr	r0, [pc, #296]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 800548e:	f7fc fa4e 	bl	800192e <assert_failed>
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005492:	4b48      	ldr	r3, [pc, #288]	; (80055b4 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8005494:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005498:	0e1b      	lsrs	r3, r3, #24
 800549a:	f003 030f 	and.w	r3, r3, #15
 800549e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80054a0:	4b44      	ldr	r3, [pc, #272]	; (80055b4 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 80054a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054a6:	0f1b      	lsrs	r3, r3, #28
 80054a8:	f003 0307 	and.w	r3, r3, #7
 80054ac:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	695b      	ldr	r3, [r3, #20]
 80054b2:	019a      	lsls	r2, r3, #6
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6a1b      	ldr	r3, [r3, #32]
 80054b8:	041b      	lsls	r3, r3, #16
 80054ba:	431a      	orrs	r2, r3
 80054bc:	693b      	ldr	r3, [r7, #16]
 80054be:	061b      	lsls	r3, r3, #24
 80054c0:	431a      	orrs	r2, r3
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	071b      	lsls	r3, r3, #28
 80054c6:	493b      	ldr	r1, [pc, #236]	; (80055b4 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 80054c8:	4313      	orrs	r3, r2
 80054ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f003 0308 	and.w	r3, r3, #8
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d04d      	beq.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0xf82>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	69db      	ldr	r3, [r3, #28]
 80054de:	2b01      	cmp	r3, #1
 80054e0:	d903      	bls.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0xef6>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	69db      	ldr	r3, [r3, #28]
 80054e6:	2b07      	cmp	r3, #7
 80054e8:	d904      	bls.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0xf00>
 80054ea:	f240 216f 	movw	r1, #623	; 0x26f
 80054ee:	4832      	ldr	r0, [pc, #200]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 80054f0:	f7fc fa1d 	bl	800192e <assert_failed>
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d013      	beq.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0xf30>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005500:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005504:	d00e      	beq.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0xf30>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800550a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800550e:	d009      	beq.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0xf30>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005514:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005518:	d004      	beq.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0xf30>
 800551a:	f44f 711c 	mov.w	r1, #624	; 0x270
 800551e:	4826      	ldr	r0, [pc, #152]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 8005520:	f7fc fa05 	bl	800192e <assert_failed>

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005524:	4b23      	ldr	r3, [pc, #140]	; (80055b4 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8005526:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800552a:	0e1b      	lsrs	r3, r3, #24
 800552c:	f003 030f 	and.w	r3, r3, #15
 8005530:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005532:	4b20      	ldr	r3, [pc, #128]	; (80055b4 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8005534:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005538:	0c1b      	lsrs	r3, r3, #16
 800553a:	f003 0303 	and.w	r3, r3, #3
 800553e:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	695b      	ldr	r3, [r3, #20]
 8005544:	019a      	lsls	r2, r3, #6
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	041b      	lsls	r3, r3, #16
 800554a:	431a      	orrs	r2, r3
 800554c:	693b      	ldr	r3, [r7, #16]
 800554e:	061b      	lsls	r3, r3, #24
 8005550:	431a      	orrs	r2, r3
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	69db      	ldr	r3, [r3, #28]
 8005556:	071b      	lsls	r3, r3, #28
 8005558:	4916      	ldr	r1, [pc, #88]	; (80055b4 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 800555a:	4313      	orrs	r3, r2
 800555c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005560:	4b14      	ldr	r3, [pc, #80]	; (80055b4 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8005562:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005566:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800556e:	4911      	ldr	r1, [pc, #68]	; (80055b4 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8005570:	4313      	orrs	r3, r2
 8005572:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005576:	4b0f      	ldr	r3, [pc, #60]	; (80055b4 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4a0e      	ldr	r2, [pc, #56]	; (80055b4 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 800557c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005580:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005582:	f7fc fd69 	bl	8002058 <HAL_GetTick>
 8005586:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005588:	e008      	b.n	800559c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800558a:	f7fc fd65 	bl	8002058 <HAL_GetTick>
 800558e:	4602      	mov	r2, r0
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	1ad3      	subs	r3, r2, r3
 8005594:	2b64      	cmp	r3, #100	; 0x64
 8005596:	d901      	bls.n	800559c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005598:	2303      	movs	r3, #3
 800559a:	e007      	b.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800559c:	4b05      	ldr	r3, [pc, #20]	; (80055b4 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80055a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80055a8:	d1ef      	bne.n	800558a <HAL_RCCEx_PeriphCLKConfig+0xf96>
      }
    }
  }
  return HAL_OK;
 80055aa:	2300      	movs	r3, #0
}
 80055ac:	4618      	mov	r0, r3
 80055ae:	3720      	adds	r7, #32
 80055b0:	46bd      	mov	sp, r7
 80055b2:	bd80      	pop	{r7, pc}
 80055b4:	40023800 	.word	0x40023800
 80055b8:	08012c88 	.word	0x08012c88

080055bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b082      	sub	sp, #8
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d101      	bne.n	80055ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80055ca:	2301      	movs	r3, #1
 80055cc:	e0f5      	b.n	80057ba <HAL_TIM_Base_Init+0x1fe>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4a7c      	ldr	r2, [pc, #496]	; (80057c4 <HAL_TIM_Base_Init+0x208>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d045      	beq.n	8005664 <HAL_TIM_Base_Init+0xa8>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055e0:	d040      	beq.n	8005664 <HAL_TIM_Base_Init+0xa8>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	4a78      	ldr	r2, [pc, #480]	; (80057c8 <HAL_TIM_Base_Init+0x20c>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d03b      	beq.n	8005664 <HAL_TIM_Base_Init+0xa8>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4a76      	ldr	r2, [pc, #472]	; (80057cc <HAL_TIM_Base_Init+0x210>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d036      	beq.n	8005664 <HAL_TIM_Base_Init+0xa8>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	4a75      	ldr	r2, [pc, #468]	; (80057d0 <HAL_TIM_Base_Init+0x214>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d031      	beq.n	8005664 <HAL_TIM_Base_Init+0xa8>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4a73      	ldr	r2, [pc, #460]	; (80057d4 <HAL_TIM_Base_Init+0x218>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d02c      	beq.n	8005664 <HAL_TIM_Base_Init+0xa8>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4a72      	ldr	r2, [pc, #456]	; (80057d8 <HAL_TIM_Base_Init+0x21c>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d027      	beq.n	8005664 <HAL_TIM_Base_Init+0xa8>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	4a70      	ldr	r2, [pc, #448]	; (80057dc <HAL_TIM_Base_Init+0x220>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d022      	beq.n	8005664 <HAL_TIM_Base_Init+0xa8>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4a6f      	ldr	r2, [pc, #444]	; (80057e0 <HAL_TIM_Base_Init+0x224>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d01d      	beq.n	8005664 <HAL_TIM_Base_Init+0xa8>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4a6d      	ldr	r2, [pc, #436]	; (80057e4 <HAL_TIM_Base_Init+0x228>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d018      	beq.n	8005664 <HAL_TIM_Base_Init+0xa8>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	4a6c      	ldr	r2, [pc, #432]	; (80057e8 <HAL_TIM_Base_Init+0x22c>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d013      	beq.n	8005664 <HAL_TIM_Base_Init+0xa8>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	4a6a      	ldr	r2, [pc, #424]	; (80057ec <HAL_TIM_Base_Init+0x230>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d00e      	beq.n	8005664 <HAL_TIM_Base_Init+0xa8>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4a69      	ldr	r2, [pc, #420]	; (80057f0 <HAL_TIM_Base_Init+0x234>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d009      	beq.n	8005664 <HAL_TIM_Base_Init+0xa8>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4a67      	ldr	r2, [pc, #412]	; (80057f4 <HAL_TIM_Base_Init+0x238>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d004      	beq.n	8005664 <HAL_TIM_Base_Init+0xa8>
 800565a:	f44f 718b 	mov.w	r1, #278	; 0x116
 800565e:	4866      	ldr	r0, [pc, #408]	; (80057f8 <HAL_TIM_Base_Init+0x23c>)
 8005660:	f7fc f965 	bl	800192e <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	689b      	ldr	r3, [r3, #8]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d014      	beq.n	8005696 <HAL_TIM_Base_Init+0xda>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	689b      	ldr	r3, [r3, #8]
 8005670:	2b10      	cmp	r3, #16
 8005672:	d010      	beq.n	8005696 <HAL_TIM_Base_Init+0xda>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	689b      	ldr	r3, [r3, #8]
 8005678:	2b20      	cmp	r3, #32
 800567a:	d00c      	beq.n	8005696 <HAL_TIM_Base_Init+0xda>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	689b      	ldr	r3, [r3, #8]
 8005680:	2b40      	cmp	r3, #64	; 0x40
 8005682:	d008      	beq.n	8005696 <HAL_TIM_Base_Init+0xda>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	689b      	ldr	r3, [r3, #8]
 8005688:	2b60      	cmp	r3, #96	; 0x60
 800568a:	d004      	beq.n	8005696 <HAL_TIM_Base_Init+0xda>
 800568c:	f240 1117 	movw	r1, #279	; 0x117
 8005690:	4859      	ldr	r0, [pc, #356]	; (80057f8 <HAL_TIM_Base_Init+0x23c>)
 8005692:	f7fc f94c 	bl	800192e <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	691b      	ldr	r3, [r3, #16]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d00e      	beq.n	80056bc <HAL_TIM_Base_Init+0x100>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	691b      	ldr	r3, [r3, #16]
 80056a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056a6:	d009      	beq.n	80056bc <HAL_TIM_Base_Init+0x100>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	691b      	ldr	r3, [r3, #16]
 80056ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80056b0:	d004      	beq.n	80056bc <HAL_TIM_Base_Init+0x100>
 80056b2:	f44f 718c 	mov.w	r1, #280	; 0x118
 80056b6:	4850      	ldr	r0, [pc, #320]	; (80057f8 <HAL_TIM_Base_Init+0x23c>)
 80056b8:	f7fc f939 	bl	800192e <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056c4:	d004      	beq.n	80056d0 <HAL_TIM_Base_Init+0x114>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a41      	ldr	r2, [pc, #260]	; (80057d0 <HAL_TIM_Base_Init+0x214>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d107      	bne.n	80056e0 <HAL_TIM_Base_Init+0x124>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	68db      	ldr	r3, [r3, #12]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	bf14      	ite	ne
 80056d8:	2301      	movne	r3, #1
 80056da:	2300      	moveq	r3, #0
 80056dc:	b2db      	uxtb	r3, r3
 80056de:	e00e      	b.n	80056fe <HAL_TIM_Base_Init+0x142>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	68db      	ldr	r3, [r3, #12]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d006      	beq.n	80056f6 <HAL_TIM_Base_Init+0x13a>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	68db      	ldr	r3, [r3, #12]
 80056ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056f0:	d201      	bcs.n	80056f6 <HAL_TIM_Base_Init+0x13a>
 80056f2:	2301      	movs	r3, #1
 80056f4:	e000      	b.n	80056f8 <HAL_TIM_Base_Init+0x13c>
 80056f6:	2300      	movs	r3, #0
 80056f8:	f003 0301 	and.w	r3, r3, #1
 80056fc:	b2db      	uxtb	r3, r3
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d104      	bne.n	800570c <HAL_TIM_Base_Init+0x150>
 8005702:	f240 1119 	movw	r1, #281	; 0x119
 8005706:	483c      	ldr	r0, [pc, #240]	; (80057f8 <HAL_TIM_Base_Init+0x23c>)
 8005708:	f7fc f911 	bl	800192e <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	699b      	ldr	r3, [r3, #24]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d008      	beq.n	8005726 <HAL_TIM_Base_Init+0x16a>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	699b      	ldr	r3, [r3, #24]
 8005718:	2b80      	cmp	r3, #128	; 0x80
 800571a:	d004      	beq.n	8005726 <HAL_TIM_Base_Init+0x16a>
 800571c:	f44f 718d 	mov.w	r1, #282	; 0x11a
 8005720:	4835      	ldr	r0, [pc, #212]	; (80057f8 <HAL_TIM_Base_Init+0x23c>)
 8005722:	f7fc f904 	bl	800192e <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800572c:	b2db      	uxtb	r3, r3
 800572e:	2b00      	cmp	r3, #0
 8005730:	d106      	bne.n	8005740 <HAL_TIM_Base_Init+0x184>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2200      	movs	r2, #0
 8005736:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800573a:	6878      	ldr	r0, [r7, #4]
 800573c:	f7fc faf8 	bl	8001d30 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2202      	movs	r2, #2
 8005744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681a      	ldr	r2, [r3, #0]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	3304      	adds	r3, #4
 8005750:	4619      	mov	r1, r3
 8005752:	4610      	mov	r0, r2
 8005754:	f001 fa52 	bl	8006bfc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2201      	movs	r2, #1
 800575c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2201      	movs	r2, #1
 8005764:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2201      	movs	r2, #1
 800576c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2201      	movs	r2, #1
 8005774:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2201      	movs	r2, #1
 800577c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2201      	movs	r2, #1
 8005784:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2201      	movs	r2, #1
 800578c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2201      	movs	r2, #1
 8005794:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2201      	movs	r2, #1
 800579c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2201      	movs	r2, #1
 80057a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2201      	movs	r2, #1
 80057ac:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2201      	movs	r2, #1
 80057b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80057b8:	2300      	movs	r3, #0
}
 80057ba:	4618      	mov	r0, r3
 80057bc:	3708      	adds	r7, #8
 80057be:	46bd      	mov	sp, r7
 80057c0:	bd80      	pop	{r7, pc}
 80057c2:	bf00      	nop
 80057c4:	40010000 	.word	0x40010000
 80057c8:	40000400 	.word	0x40000400
 80057cc:	40000800 	.word	0x40000800
 80057d0:	40000c00 	.word	0x40000c00
 80057d4:	40001000 	.word	0x40001000
 80057d8:	40001400 	.word	0x40001400
 80057dc:	40010400 	.word	0x40010400
 80057e0:	40014000 	.word	0x40014000
 80057e4:	40014400 	.word	0x40014400
 80057e8:	40014800 	.word	0x40014800
 80057ec:	40001800 	.word	0x40001800
 80057f0:	40001c00 	.word	0x40001c00
 80057f4:	40002000 	.word	0x40002000
 80057f8:	08012cc4 	.word	0x08012cc4

080057fc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b082      	sub	sp, #8
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d101      	bne.n	800580e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800580a:	2301      	movs	r3, #1
 800580c:	e0f5      	b.n	80059fa <HAL_TIM_PWM_Init+0x1fe>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4a7c      	ldr	r2, [pc, #496]	; (8005a04 <HAL_TIM_PWM_Init+0x208>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d045      	beq.n	80058a4 <HAL_TIM_PWM_Init+0xa8>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005820:	d040      	beq.n	80058a4 <HAL_TIM_PWM_Init+0xa8>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4a78      	ldr	r2, [pc, #480]	; (8005a08 <HAL_TIM_PWM_Init+0x20c>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d03b      	beq.n	80058a4 <HAL_TIM_PWM_Init+0xa8>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a76      	ldr	r2, [pc, #472]	; (8005a0c <HAL_TIM_PWM_Init+0x210>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d036      	beq.n	80058a4 <HAL_TIM_PWM_Init+0xa8>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4a75      	ldr	r2, [pc, #468]	; (8005a10 <HAL_TIM_PWM_Init+0x214>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d031      	beq.n	80058a4 <HAL_TIM_PWM_Init+0xa8>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	4a73      	ldr	r2, [pc, #460]	; (8005a14 <HAL_TIM_PWM_Init+0x218>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d02c      	beq.n	80058a4 <HAL_TIM_PWM_Init+0xa8>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4a72      	ldr	r2, [pc, #456]	; (8005a18 <HAL_TIM_PWM_Init+0x21c>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d027      	beq.n	80058a4 <HAL_TIM_PWM_Init+0xa8>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4a70      	ldr	r2, [pc, #448]	; (8005a1c <HAL_TIM_PWM_Init+0x220>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d022      	beq.n	80058a4 <HAL_TIM_PWM_Init+0xa8>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4a6f      	ldr	r2, [pc, #444]	; (8005a20 <HAL_TIM_PWM_Init+0x224>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d01d      	beq.n	80058a4 <HAL_TIM_PWM_Init+0xa8>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4a6d      	ldr	r2, [pc, #436]	; (8005a24 <HAL_TIM_PWM_Init+0x228>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d018      	beq.n	80058a4 <HAL_TIM_PWM_Init+0xa8>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4a6c      	ldr	r2, [pc, #432]	; (8005a28 <HAL_TIM_PWM_Init+0x22c>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d013      	beq.n	80058a4 <HAL_TIM_PWM_Init+0xa8>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4a6a      	ldr	r2, [pc, #424]	; (8005a2c <HAL_TIM_PWM_Init+0x230>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d00e      	beq.n	80058a4 <HAL_TIM_PWM_Init+0xa8>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4a69      	ldr	r2, [pc, #420]	; (8005a30 <HAL_TIM_PWM_Init+0x234>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d009      	beq.n	80058a4 <HAL_TIM_PWM_Init+0xa8>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4a67      	ldr	r2, [pc, #412]	; (8005a34 <HAL_TIM_PWM_Init+0x238>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d004      	beq.n	80058a4 <HAL_TIM_PWM_Init+0xa8>
 800589a:	f240 5133 	movw	r1, #1331	; 0x533
 800589e:	4866      	ldr	r0, [pc, #408]	; (8005a38 <HAL_TIM_PWM_Init+0x23c>)
 80058a0:	f7fc f845 	bl	800192e <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	689b      	ldr	r3, [r3, #8]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d014      	beq.n	80058d6 <HAL_TIM_PWM_Init+0xda>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	689b      	ldr	r3, [r3, #8]
 80058b0:	2b10      	cmp	r3, #16
 80058b2:	d010      	beq.n	80058d6 <HAL_TIM_PWM_Init+0xda>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	689b      	ldr	r3, [r3, #8]
 80058b8:	2b20      	cmp	r3, #32
 80058ba:	d00c      	beq.n	80058d6 <HAL_TIM_PWM_Init+0xda>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	689b      	ldr	r3, [r3, #8]
 80058c0:	2b40      	cmp	r3, #64	; 0x40
 80058c2:	d008      	beq.n	80058d6 <HAL_TIM_PWM_Init+0xda>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	689b      	ldr	r3, [r3, #8]
 80058c8:	2b60      	cmp	r3, #96	; 0x60
 80058ca:	d004      	beq.n	80058d6 <HAL_TIM_PWM_Init+0xda>
 80058cc:	f240 5134 	movw	r1, #1332	; 0x534
 80058d0:	4859      	ldr	r0, [pc, #356]	; (8005a38 <HAL_TIM_PWM_Init+0x23c>)
 80058d2:	f7fc f82c 	bl	800192e <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	691b      	ldr	r3, [r3, #16]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d00e      	beq.n	80058fc <HAL_TIM_PWM_Init+0x100>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	691b      	ldr	r3, [r3, #16]
 80058e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058e6:	d009      	beq.n	80058fc <HAL_TIM_PWM_Init+0x100>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	691b      	ldr	r3, [r3, #16]
 80058ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80058f0:	d004      	beq.n	80058fc <HAL_TIM_PWM_Init+0x100>
 80058f2:	f240 5135 	movw	r1, #1333	; 0x535
 80058f6:	4850      	ldr	r0, [pc, #320]	; (8005a38 <HAL_TIM_PWM_Init+0x23c>)
 80058f8:	f7fc f819 	bl	800192e <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005904:	d004      	beq.n	8005910 <HAL_TIM_PWM_Init+0x114>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4a41      	ldr	r2, [pc, #260]	; (8005a10 <HAL_TIM_PWM_Init+0x214>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d107      	bne.n	8005920 <HAL_TIM_PWM_Init+0x124>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	68db      	ldr	r3, [r3, #12]
 8005914:	2b00      	cmp	r3, #0
 8005916:	bf14      	ite	ne
 8005918:	2301      	movne	r3, #1
 800591a:	2300      	moveq	r3, #0
 800591c:	b2db      	uxtb	r3, r3
 800591e:	e00e      	b.n	800593e <HAL_TIM_PWM_Init+0x142>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	68db      	ldr	r3, [r3, #12]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d006      	beq.n	8005936 <HAL_TIM_PWM_Init+0x13a>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	68db      	ldr	r3, [r3, #12]
 800592c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005930:	d201      	bcs.n	8005936 <HAL_TIM_PWM_Init+0x13a>
 8005932:	2301      	movs	r3, #1
 8005934:	e000      	b.n	8005938 <HAL_TIM_PWM_Init+0x13c>
 8005936:	2300      	movs	r3, #0
 8005938:	f003 0301 	and.w	r3, r3, #1
 800593c:	b2db      	uxtb	r3, r3
 800593e:	2b00      	cmp	r3, #0
 8005940:	d104      	bne.n	800594c <HAL_TIM_PWM_Init+0x150>
 8005942:	f240 5136 	movw	r1, #1334	; 0x536
 8005946:	483c      	ldr	r0, [pc, #240]	; (8005a38 <HAL_TIM_PWM_Init+0x23c>)
 8005948:	f7fb fff1 	bl	800192e <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	699b      	ldr	r3, [r3, #24]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d008      	beq.n	8005966 <HAL_TIM_PWM_Init+0x16a>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	699b      	ldr	r3, [r3, #24]
 8005958:	2b80      	cmp	r3, #128	; 0x80
 800595a:	d004      	beq.n	8005966 <HAL_TIM_PWM_Init+0x16a>
 800595c:	f240 5137 	movw	r1, #1335	; 0x537
 8005960:	4835      	ldr	r0, [pc, #212]	; (8005a38 <HAL_TIM_PWM_Init+0x23c>)
 8005962:	f7fb ffe4 	bl	800192e <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800596c:	b2db      	uxtb	r3, r3
 800596e:	2b00      	cmp	r3, #0
 8005970:	d106      	bne.n	8005980 <HAL_TIM_PWM_Init+0x184>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2200      	movs	r2, #0
 8005976:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800597a:	6878      	ldr	r0, [r7, #4]
 800597c:	f000 f85e 	bl	8005a3c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2202      	movs	r2, #2
 8005984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681a      	ldr	r2, [r3, #0]
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	3304      	adds	r3, #4
 8005990:	4619      	mov	r1, r3
 8005992:	4610      	mov	r0, r2
 8005994:	f001 f932 	bl	8006bfc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2201      	movs	r2, #1
 800599c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2201      	movs	r2, #1
 80059a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2201      	movs	r2, #1
 80059ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2201      	movs	r2, #1
 80059b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2201      	movs	r2, #1
 80059bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2201      	movs	r2, #1
 80059c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2201      	movs	r2, #1
 80059cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2201      	movs	r2, #1
 80059d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2201      	movs	r2, #1
 80059dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2201      	movs	r2, #1
 80059e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2201      	movs	r2, #1
 80059ec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2201      	movs	r2, #1
 80059f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80059f8:	2300      	movs	r3, #0
}
 80059fa:	4618      	mov	r0, r3
 80059fc:	3708      	adds	r7, #8
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bd80      	pop	{r7, pc}
 8005a02:	bf00      	nop
 8005a04:	40010000 	.word	0x40010000
 8005a08:	40000400 	.word	0x40000400
 8005a0c:	40000800 	.word	0x40000800
 8005a10:	40000c00 	.word	0x40000c00
 8005a14:	40001000 	.word	0x40001000
 8005a18:	40001400 	.word	0x40001400
 8005a1c:	40010400 	.word	0x40010400
 8005a20:	40014000 	.word	0x40014000
 8005a24:	40014400 	.word	0x40014400
 8005a28:	40014800 	.word	0x40014800
 8005a2c:	40001800 	.word	0x40001800
 8005a30:	40001c00 	.word	0x40001c00
 8005a34:	40002000 	.word	0x40002000
 8005a38:	08012cc4 	.word	0x08012cc4

08005a3c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	b083      	sub	sp, #12
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005a44:	bf00      	nop
 8005a46:	370c      	adds	r7, #12
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4e:	4770      	bx	lr

08005a50 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b084      	sub	sp, #16
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
 8005a58:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4a89      	ldr	r2, [pc, #548]	; (8005c84 <HAL_TIM_PWM_Start+0x234>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d117      	bne.n	8005a94 <HAL_TIM_PWM_Start+0x44>
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	f000 80ae 	beq.w	8005bc8 <HAL_TIM_PWM_Start+0x178>
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	2b04      	cmp	r3, #4
 8005a70:	f000 80aa 	beq.w	8005bc8 <HAL_TIM_PWM_Start+0x178>
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	2b08      	cmp	r3, #8
 8005a78:	f000 80a6 	beq.w	8005bc8 <HAL_TIM_PWM_Start+0x178>
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	2b0c      	cmp	r3, #12
 8005a80:	f000 80a2 	beq.w	8005bc8 <HAL_TIM_PWM_Start+0x178>
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	2b10      	cmp	r3, #16
 8005a88:	f000 809e 	beq.w	8005bc8 <HAL_TIM_PWM_Start+0x178>
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	2b14      	cmp	r3, #20
 8005a90:	f000 809a 	beq.w	8005bc8 <HAL_TIM_PWM_Start+0x178>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a9c:	d10f      	bne.n	8005abe <HAL_TIM_PWM_Start+0x6e>
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	f000 8091 	beq.w	8005bc8 <HAL_TIM_PWM_Start+0x178>
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	2b04      	cmp	r3, #4
 8005aaa:	f000 808d 	beq.w	8005bc8 <HAL_TIM_PWM_Start+0x178>
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	2b08      	cmp	r3, #8
 8005ab2:	f000 8089 	beq.w	8005bc8 <HAL_TIM_PWM_Start+0x178>
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	2b0c      	cmp	r3, #12
 8005aba:	f000 8085 	beq.w	8005bc8 <HAL_TIM_PWM_Start+0x178>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4a71      	ldr	r2, [pc, #452]	; (8005c88 <HAL_TIM_PWM_Start+0x238>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d10b      	bne.n	8005ae0 <HAL_TIM_PWM_Start+0x90>
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d07c      	beq.n	8005bc8 <HAL_TIM_PWM_Start+0x178>
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	2b04      	cmp	r3, #4
 8005ad2:	d079      	beq.n	8005bc8 <HAL_TIM_PWM_Start+0x178>
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	2b08      	cmp	r3, #8
 8005ad8:	d076      	beq.n	8005bc8 <HAL_TIM_PWM_Start+0x178>
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	2b0c      	cmp	r3, #12
 8005ade:	d073      	beq.n	8005bc8 <HAL_TIM_PWM_Start+0x178>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	4a69      	ldr	r2, [pc, #420]	; (8005c8c <HAL_TIM_PWM_Start+0x23c>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d10b      	bne.n	8005b02 <HAL_TIM_PWM_Start+0xb2>
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d06b      	beq.n	8005bc8 <HAL_TIM_PWM_Start+0x178>
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	2b04      	cmp	r3, #4
 8005af4:	d068      	beq.n	8005bc8 <HAL_TIM_PWM_Start+0x178>
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	2b08      	cmp	r3, #8
 8005afa:	d065      	beq.n	8005bc8 <HAL_TIM_PWM_Start+0x178>
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	2b0c      	cmp	r3, #12
 8005b00:	d062      	beq.n	8005bc8 <HAL_TIM_PWM_Start+0x178>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	4a62      	ldr	r2, [pc, #392]	; (8005c90 <HAL_TIM_PWM_Start+0x240>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d10b      	bne.n	8005b24 <HAL_TIM_PWM_Start+0xd4>
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d05a      	beq.n	8005bc8 <HAL_TIM_PWM_Start+0x178>
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	2b04      	cmp	r3, #4
 8005b16:	d057      	beq.n	8005bc8 <HAL_TIM_PWM_Start+0x178>
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	2b08      	cmp	r3, #8
 8005b1c:	d054      	beq.n	8005bc8 <HAL_TIM_PWM_Start+0x178>
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	2b0c      	cmp	r3, #12
 8005b22:	d051      	beq.n	8005bc8 <HAL_TIM_PWM_Start+0x178>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	4a5a      	ldr	r2, [pc, #360]	; (8005c94 <HAL_TIM_PWM_Start+0x244>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d111      	bne.n	8005b52 <HAL_TIM_PWM_Start+0x102>
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d049      	beq.n	8005bc8 <HAL_TIM_PWM_Start+0x178>
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	2b04      	cmp	r3, #4
 8005b38:	d046      	beq.n	8005bc8 <HAL_TIM_PWM_Start+0x178>
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	2b08      	cmp	r3, #8
 8005b3e:	d043      	beq.n	8005bc8 <HAL_TIM_PWM_Start+0x178>
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	2b0c      	cmp	r3, #12
 8005b44:	d040      	beq.n	8005bc8 <HAL_TIM_PWM_Start+0x178>
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	2b10      	cmp	r3, #16
 8005b4a:	d03d      	beq.n	8005bc8 <HAL_TIM_PWM_Start+0x178>
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	2b14      	cmp	r3, #20
 8005b50:	d03a      	beq.n	8005bc8 <HAL_TIM_PWM_Start+0x178>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	4a50      	ldr	r2, [pc, #320]	; (8005c98 <HAL_TIM_PWM_Start+0x248>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d105      	bne.n	8005b68 <HAL_TIM_PWM_Start+0x118>
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d032      	beq.n	8005bc8 <HAL_TIM_PWM_Start+0x178>
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	2b04      	cmp	r3, #4
 8005b66:	d02f      	beq.n	8005bc8 <HAL_TIM_PWM_Start+0x178>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4a4b      	ldr	r2, [pc, #300]	; (8005c9c <HAL_TIM_PWM_Start+0x24c>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d102      	bne.n	8005b78 <HAL_TIM_PWM_Start+0x128>
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d027      	beq.n	8005bc8 <HAL_TIM_PWM_Start+0x178>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4a48      	ldr	r2, [pc, #288]	; (8005ca0 <HAL_TIM_PWM_Start+0x250>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d102      	bne.n	8005b88 <HAL_TIM_PWM_Start+0x138>
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d01f      	beq.n	8005bc8 <HAL_TIM_PWM_Start+0x178>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4a45      	ldr	r2, [pc, #276]	; (8005ca4 <HAL_TIM_PWM_Start+0x254>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d105      	bne.n	8005b9e <HAL_TIM_PWM_Start+0x14e>
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d017      	beq.n	8005bc8 <HAL_TIM_PWM_Start+0x178>
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	2b04      	cmp	r3, #4
 8005b9c:	d014      	beq.n	8005bc8 <HAL_TIM_PWM_Start+0x178>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	4a41      	ldr	r2, [pc, #260]	; (8005ca8 <HAL_TIM_PWM_Start+0x258>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d102      	bne.n	8005bae <HAL_TIM_PWM_Start+0x15e>
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d00c      	beq.n	8005bc8 <HAL_TIM_PWM_Start+0x178>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	4a3e      	ldr	r2, [pc, #248]	; (8005cac <HAL_TIM_PWM_Start+0x25c>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d102      	bne.n	8005bbe <HAL_TIM_PWM_Start+0x16e>
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d004      	beq.n	8005bc8 <HAL_TIM_PWM_Start+0x178>
 8005bbe:	f240 51bc 	movw	r1, #1468	; 0x5bc
 8005bc2:	483b      	ldr	r0, [pc, #236]	; (8005cb0 <HAL_TIM_PWM_Start+0x260>)
 8005bc4:	f7fb feb3 	bl	800192e <assert_failed>

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d109      	bne.n	8005be2 <HAL_TIM_PWM_Start+0x192>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005bd4:	b2db      	uxtb	r3, r3
 8005bd6:	2b01      	cmp	r3, #1
 8005bd8:	bf14      	ite	ne
 8005bda:	2301      	movne	r3, #1
 8005bdc:	2300      	moveq	r3, #0
 8005bde:	b2db      	uxtb	r3, r3
 8005be0:	e03c      	b.n	8005c5c <HAL_TIM_PWM_Start+0x20c>
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	2b04      	cmp	r3, #4
 8005be6:	d109      	bne.n	8005bfc <HAL_TIM_PWM_Start+0x1ac>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005bee:	b2db      	uxtb	r3, r3
 8005bf0:	2b01      	cmp	r3, #1
 8005bf2:	bf14      	ite	ne
 8005bf4:	2301      	movne	r3, #1
 8005bf6:	2300      	moveq	r3, #0
 8005bf8:	b2db      	uxtb	r3, r3
 8005bfa:	e02f      	b.n	8005c5c <HAL_TIM_PWM_Start+0x20c>
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	2b08      	cmp	r3, #8
 8005c00:	d109      	bne.n	8005c16 <HAL_TIM_PWM_Start+0x1c6>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005c08:	b2db      	uxtb	r3, r3
 8005c0a:	2b01      	cmp	r3, #1
 8005c0c:	bf14      	ite	ne
 8005c0e:	2301      	movne	r3, #1
 8005c10:	2300      	moveq	r3, #0
 8005c12:	b2db      	uxtb	r3, r3
 8005c14:	e022      	b.n	8005c5c <HAL_TIM_PWM_Start+0x20c>
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	2b0c      	cmp	r3, #12
 8005c1a:	d109      	bne.n	8005c30 <HAL_TIM_PWM_Start+0x1e0>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c22:	b2db      	uxtb	r3, r3
 8005c24:	2b01      	cmp	r3, #1
 8005c26:	bf14      	ite	ne
 8005c28:	2301      	movne	r3, #1
 8005c2a:	2300      	moveq	r3, #0
 8005c2c:	b2db      	uxtb	r3, r3
 8005c2e:	e015      	b.n	8005c5c <HAL_TIM_PWM_Start+0x20c>
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	2b10      	cmp	r3, #16
 8005c34:	d109      	bne.n	8005c4a <HAL_TIM_PWM_Start+0x1fa>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005c3c:	b2db      	uxtb	r3, r3
 8005c3e:	2b01      	cmp	r3, #1
 8005c40:	bf14      	ite	ne
 8005c42:	2301      	movne	r3, #1
 8005c44:	2300      	moveq	r3, #0
 8005c46:	b2db      	uxtb	r3, r3
 8005c48:	e008      	b.n	8005c5c <HAL_TIM_PWM_Start+0x20c>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005c50:	b2db      	uxtb	r3, r3
 8005c52:	2b01      	cmp	r3, #1
 8005c54:	bf14      	ite	ne
 8005c56:	2301      	movne	r3, #1
 8005c58:	2300      	moveq	r3, #0
 8005c5a:	b2db      	uxtb	r3, r3
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d001      	beq.n	8005c64 <HAL_TIM_PWM_Start+0x214>
  {
    return HAL_ERROR;
 8005c60:	2301      	movs	r3, #1
 8005c62:	e0aa      	b.n	8005dba <HAL_TIM_PWM_Start+0x36a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d104      	bne.n	8005c74 <HAL_TIM_PWM_Start+0x224>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2202      	movs	r2, #2
 8005c6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c72:	e03b      	b.n	8005cec <HAL_TIM_PWM_Start+0x29c>
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	2b04      	cmp	r3, #4
 8005c78:	d11c      	bne.n	8005cb4 <HAL_TIM_PWM_Start+0x264>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2202      	movs	r2, #2
 8005c7e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c82:	e033      	b.n	8005cec <HAL_TIM_PWM_Start+0x29c>
 8005c84:	40010000 	.word	0x40010000
 8005c88:	40000400 	.word	0x40000400
 8005c8c:	40000800 	.word	0x40000800
 8005c90:	40000c00 	.word	0x40000c00
 8005c94:	40010400 	.word	0x40010400
 8005c98:	40014000 	.word	0x40014000
 8005c9c:	40014400 	.word	0x40014400
 8005ca0:	40014800 	.word	0x40014800
 8005ca4:	40001800 	.word	0x40001800
 8005ca8:	40001c00 	.word	0x40001c00
 8005cac:	40002000 	.word	0x40002000
 8005cb0:	08012cc4 	.word	0x08012cc4
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	2b08      	cmp	r3, #8
 8005cb8:	d104      	bne.n	8005cc4 <HAL_TIM_PWM_Start+0x274>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2202      	movs	r2, #2
 8005cbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005cc2:	e013      	b.n	8005cec <HAL_TIM_PWM_Start+0x29c>
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	2b0c      	cmp	r3, #12
 8005cc8:	d104      	bne.n	8005cd4 <HAL_TIM_PWM_Start+0x284>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2202      	movs	r2, #2
 8005cce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005cd2:	e00b      	b.n	8005cec <HAL_TIM_PWM_Start+0x29c>
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	2b10      	cmp	r3, #16
 8005cd8:	d104      	bne.n	8005ce4 <HAL_TIM_PWM_Start+0x294>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2202      	movs	r2, #2
 8005cde:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005ce2:	e003      	b.n	8005cec <HAL_TIM_PWM_Start+0x29c>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2202      	movs	r2, #2
 8005ce8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	2201      	movs	r2, #1
 8005cf2:	6839      	ldr	r1, [r7, #0]
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	f001 fba3 	bl	8007440 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	4a31      	ldr	r2, [pc, #196]	; (8005dc4 <HAL_TIM_PWM_Start+0x374>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d004      	beq.n	8005d0e <HAL_TIM_PWM_Start+0x2be>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	4a2f      	ldr	r2, [pc, #188]	; (8005dc8 <HAL_TIM_PWM_Start+0x378>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d101      	bne.n	8005d12 <HAL_TIM_PWM_Start+0x2c2>
 8005d0e:	2301      	movs	r3, #1
 8005d10:	e000      	b.n	8005d14 <HAL_TIM_PWM_Start+0x2c4>
 8005d12:	2300      	movs	r3, #0
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d007      	beq.n	8005d28 <HAL_TIM_PWM_Start+0x2d8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005d26:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	4a25      	ldr	r2, [pc, #148]	; (8005dc4 <HAL_TIM_PWM_Start+0x374>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d022      	beq.n	8005d78 <HAL_TIM_PWM_Start+0x328>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d3a:	d01d      	beq.n	8005d78 <HAL_TIM_PWM_Start+0x328>
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	4a22      	ldr	r2, [pc, #136]	; (8005dcc <HAL_TIM_PWM_Start+0x37c>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d018      	beq.n	8005d78 <HAL_TIM_PWM_Start+0x328>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4a21      	ldr	r2, [pc, #132]	; (8005dd0 <HAL_TIM_PWM_Start+0x380>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d013      	beq.n	8005d78 <HAL_TIM_PWM_Start+0x328>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4a1f      	ldr	r2, [pc, #124]	; (8005dd4 <HAL_TIM_PWM_Start+0x384>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d00e      	beq.n	8005d78 <HAL_TIM_PWM_Start+0x328>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	4a1a      	ldr	r2, [pc, #104]	; (8005dc8 <HAL_TIM_PWM_Start+0x378>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d009      	beq.n	8005d78 <HAL_TIM_PWM_Start+0x328>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4a1b      	ldr	r2, [pc, #108]	; (8005dd8 <HAL_TIM_PWM_Start+0x388>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d004      	beq.n	8005d78 <HAL_TIM_PWM_Start+0x328>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4a1a      	ldr	r2, [pc, #104]	; (8005ddc <HAL_TIM_PWM_Start+0x38c>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d115      	bne.n	8005da4 <HAL_TIM_PWM_Start+0x354>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	689a      	ldr	r2, [r3, #8]
 8005d7e:	4b18      	ldr	r3, [pc, #96]	; (8005de0 <HAL_TIM_PWM_Start+0x390>)
 8005d80:	4013      	ands	r3, r2
 8005d82:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	2b06      	cmp	r3, #6
 8005d88:	d015      	beq.n	8005db6 <HAL_TIM_PWM_Start+0x366>
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d90:	d011      	beq.n	8005db6 <HAL_TIM_PWM_Start+0x366>
    {
      __HAL_TIM_ENABLE(htim);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	681a      	ldr	r2, [r3, #0]
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f042 0201 	orr.w	r2, r2, #1
 8005da0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005da2:	e008      	b.n	8005db6 <HAL_TIM_PWM_Start+0x366>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	681a      	ldr	r2, [r3, #0]
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f042 0201 	orr.w	r2, r2, #1
 8005db2:	601a      	str	r2, [r3, #0]
 8005db4:	e000      	b.n	8005db8 <HAL_TIM_PWM_Start+0x368>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005db6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005db8:	2300      	movs	r3, #0
}
 8005dba:	4618      	mov	r0, r3
 8005dbc:	3710      	adds	r7, #16
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	bd80      	pop	{r7, pc}
 8005dc2:	bf00      	nop
 8005dc4:	40010000 	.word	0x40010000
 8005dc8:	40010400 	.word	0x40010400
 8005dcc:	40000400 	.word	0x40000400
 8005dd0:	40000800 	.word	0x40000800
 8005dd4:	40000c00 	.word	0x40000c00
 8005dd8:	40014000 	.word	0x40014000
 8005ddc:	40001800 	.word	0x40001800
 8005de0:	00010007 	.word	0x00010007

08005de4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b082      	sub	sp, #8
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	691b      	ldr	r3, [r3, #16]
 8005df2:	f003 0302 	and.w	r3, r3, #2
 8005df6:	2b02      	cmp	r3, #2
 8005df8:	d122      	bne.n	8005e40 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	68db      	ldr	r3, [r3, #12]
 8005e00:	f003 0302 	and.w	r3, r3, #2
 8005e04:	2b02      	cmp	r3, #2
 8005e06:	d11b      	bne.n	8005e40 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f06f 0202 	mvn.w	r2, #2
 8005e10:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2201      	movs	r2, #1
 8005e16:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	699b      	ldr	r3, [r3, #24]
 8005e1e:	f003 0303 	and.w	r3, r3, #3
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d003      	beq.n	8005e2e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005e26:	6878      	ldr	r0, [r7, #4]
 8005e28:	f000 feca 	bl	8006bc0 <HAL_TIM_IC_CaptureCallback>
 8005e2c:	e005      	b.n	8005e3a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e2e:	6878      	ldr	r0, [r7, #4]
 8005e30:	f000 febc 	bl	8006bac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e34:	6878      	ldr	r0, [r7, #4]
 8005e36:	f000 fecd 	bl	8006bd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	691b      	ldr	r3, [r3, #16]
 8005e46:	f003 0304 	and.w	r3, r3, #4
 8005e4a:	2b04      	cmp	r3, #4
 8005e4c:	d122      	bne.n	8005e94 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	68db      	ldr	r3, [r3, #12]
 8005e54:	f003 0304 	and.w	r3, r3, #4
 8005e58:	2b04      	cmp	r3, #4
 8005e5a:	d11b      	bne.n	8005e94 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f06f 0204 	mvn.w	r2, #4
 8005e64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2202      	movs	r2, #2
 8005e6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	699b      	ldr	r3, [r3, #24]
 8005e72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d003      	beq.n	8005e82 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e7a:	6878      	ldr	r0, [r7, #4]
 8005e7c:	f000 fea0 	bl	8006bc0 <HAL_TIM_IC_CaptureCallback>
 8005e80:	e005      	b.n	8005e8e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e82:	6878      	ldr	r0, [r7, #4]
 8005e84:	f000 fe92 	bl	8006bac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e88:	6878      	ldr	r0, [r7, #4]
 8005e8a:	f000 fea3 	bl	8006bd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2200      	movs	r2, #0
 8005e92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	691b      	ldr	r3, [r3, #16]
 8005e9a:	f003 0308 	and.w	r3, r3, #8
 8005e9e:	2b08      	cmp	r3, #8
 8005ea0:	d122      	bne.n	8005ee8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	68db      	ldr	r3, [r3, #12]
 8005ea8:	f003 0308 	and.w	r3, r3, #8
 8005eac:	2b08      	cmp	r3, #8
 8005eae:	d11b      	bne.n	8005ee8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f06f 0208 	mvn.w	r2, #8
 8005eb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2204      	movs	r2, #4
 8005ebe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	69db      	ldr	r3, [r3, #28]
 8005ec6:	f003 0303 	and.w	r3, r3, #3
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d003      	beq.n	8005ed6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ece:	6878      	ldr	r0, [r7, #4]
 8005ed0:	f000 fe76 	bl	8006bc0 <HAL_TIM_IC_CaptureCallback>
 8005ed4:	e005      	b.n	8005ee2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ed6:	6878      	ldr	r0, [r7, #4]
 8005ed8:	f000 fe68 	bl	8006bac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005edc:	6878      	ldr	r0, [r7, #4]
 8005ede:	f000 fe79 	bl	8006bd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	691b      	ldr	r3, [r3, #16]
 8005eee:	f003 0310 	and.w	r3, r3, #16
 8005ef2:	2b10      	cmp	r3, #16
 8005ef4:	d122      	bne.n	8005f3c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	68db      	ldr	r3, [r3, #12]
 8005efc:	f003 0310 	and.w	r3, r3, #16
 8005f00:	2b10      	cmp	r3, #16
 8005f02:	d11b      	bne.n	8005f3c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f06f 0210 	mvn.w	r2, #16
 8005f0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2208      	movs	r2, #8
 8005f12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	69db      	ldr	r3, [r3, #28]
 8005f1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d003      	beq.n	8005f2a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f22:	6878      	ldr	r0, [r7, #4]
 8005f24:	f000 fe4c 	bl	8006bc0 <HAL_TIM_IC_CaptureCallback>
 8005f28:	e005      	b.n	8005f36 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f2a:	6878      	ldr	r0, [r7, #4]
 8005f2c:	f000 fe3e 	bl	8006bac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f30:	6878      	ldr	r0, [r7, #4]
 8005f32:	f000 fe4f 	bl	8006bd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2200      	movs	r2, #0
 8005f3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	691b      	ldr	r3, [r3, #16]
 8005f42:	f003 0301 	and.w	r3, r3, #1
 8005f46:	2b01      	cmp	r3, #1
 8005f48:	d10e      	bne.n	8005f68 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	68db      	ldr	r3, [r3, #12]
 8005f50:	f003 0301 	and.w	r3, r3, #1
 8005f54:	2b01      	cmp	r3, #1
 8005f56:	d107      	bne.n	8005f68 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f06f 0201 	mvn.w	r2, #1
 8005f60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005f62:	6878      	ldr	r0, [r7, #4]
 8005f64:	f000 fe18 	bl	8006b98 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	691b      	ldr	r3, [r3, #16]
 8005f6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f72:	2b80      	cmp	r3, #128	; 0x80
 8005f74:	d10e      	bne.n	8005f94 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	68db      	ldr	r3, [r3, #12]
 8005f7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f80:	2b80      	cmp	r3, #128	; 0x80
 8005f82:	d107      	bne.n	8005f94 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005f8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005f8e:	6878      	ldr	r0, [r7, #4]
 8005f90:	f001 fc42 	bl	8007818 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	691b      	ldr	r3, [r3, #16]
 8005f9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005fa2:	d10e      	bne.n	8005fc2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	68db      	ldr	r3, [r3, #12]
 8005faa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fae:	2b80      	cmp	r3, #128	; 0x80
 8005fb0:	d107      	bne.n	8005fc2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005fba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005fbc:	6878      	ldr	r0, [r7, #4]
 8005fbe:	f001 fc35 	bl	800782c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	691b      	ldr	r3, [r3, #16]
 8005fc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fcc:	2b40      	cmp	r3, #64	; 0x40
 8005fce:	d10e      	bne.n	8005fee <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	68db      	ldr	r3, [r3, #12]
 8005fd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fda:	2b40      	cmp	r3, #64	; 0x40
 8005fdc:	d107      	bne.n	8005fee <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005fe6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005fe8:	6878      	ldr	r0, [r7, #4]
 8005fea:	f000 fdfd 	bl	8006be8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	691b      	ldr	r3, [r3, #16]
 8005ff4:	f003 0320 	and.w	r3, r3, #32
 8005ff8:	2b20      	cmp	r3, #32
 8005ffa:	d10e      	bne.n	800601a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	68db      	ldr	r3, [r3, #12]
 8006002:	f003 0320 	and.w	r3, r3, #32
 8006006:	2b20      	cmp	r3, #32
 8006008:	d107      	bne.n	800601a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f06f 0220 	mvn.w	r2, #32
 8006012:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006014:	6878      	ldr	r0, [r7, #4]
 8006016:	f001 fbf5 	bl	8007804 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800601a:	bf00      	nop
 800601c:	3708      	adds	r7, #8
 800601e:	46bd      	mov	sp, r7
 8006020:	bd80      	pop	{r7, pc}
	...

08006024 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b086      	sub	sp, #24
 8006028:	af00      	add	r7, sp, #0
 800602a:	60f8      	str	r0, [r7, #12]
 800602c:	60b9      	str	r1, [r7, #8]
 800602e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006030:	2300      	movs	r3, #0
 8006032:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d016      	beq.n	8006068 <HAL_TIM_PWM_ConfigChannel+0x44>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2b04      	cmp	r3, #4
 800603e:	d013      	beq.n	8006068 <HAL_TIM_PWM_ConfigChannel+0x44>
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2b08      	cmp	r3, #8
 8006044:	d010      	beq.n	8006068 <HAL_TIM_PWM_ConfigChannel+0x44>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2b0c      	cmp	r3, #12
 800604a:	d00d      	beq.n	8006068 <HAL_TIM_PWM_ConfigChannel+0x44>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2b10      	cmp	r3, #16
 8006050:	d00a      	beq.n	8006068 <HAL_TIM_PWM_ConfigChannel+0x44>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2b14      	cmp	r3, #20
 8006056:	d007      	beq.n	8006068 <HAL_TIM_PWM_ConfigChannel+0x44>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2b3c      	cmp	r3, #60	; 0x3c
 800605c:	d004      	beq.n	8006068 <HAL_TIM_PWM_ConfigChannel+0x44>
 800605e:	f241 01af 	movw	r1, #4271	; 0x10af
 8006062:	4895      	ldr	r0, [pc, #596]	; (80062b8 <HAL_TIM_PWM_ConfigChannel+0x294>)
 8006064:	f7fb fc63 	bl	800192e <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	2b60      	cmp	r3, #96	; 0x60
 800606e:	d01c      	beq.n	80060aa <HAL_TIM_PWM_ConfigChannel+0x86>
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	2b70      	cmp	r3, #112	; 0x70
 8006076:	d018      	beq.n	80060aa <HAL_TIM_PWM_ConfigChannel+0x86>
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4a8f      	ldr	r2, [pc, #572]	; (80062bc <HAL_TIM_PWM_ConfigChannel+0x298>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d013      	beq.n	80060aa <HAL_TIM_PWM_ConfigChannel+0x86>
 8006082:	68bb      	ldr	r3, [r7, #8]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4a8e      	ldr	r2, [pc, #568]	; (80062c0 <HAL_TIM_PWM_ConfigChannel+0x29c>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d00e      	beq.n	80060aa <HAL_TIM_PWM_ConfigChannel+0x86>
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4a8c      	ldr	r2, [pc, #560]	; (80062c4 <HAL_TIM_PWM_ConfigChannel+0x2a0>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d009      	beq.n	80060aa <HAL_TIM_PWM_ConfigChannel+0x86>
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	4a8b      	ldr	r2, [pc, #556]	; (80062c8 <HAL_TIM_PWM_ConfigChannel+0x2a4>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d004      	beq.n	80060aa <HAL_TIM_PWM_ConfigChannel+0x86>
 80060a0:	f241 01b0 	movw	r1, #4272	; 0x10b0
 80060a4:	4884      	ldr	r0, [pc, #528]	; (80062b8 <HAL_TIM_PWM_ConfigChannel+0x294>)
 80060a6:	f7fb fc42 	bl	800192e <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	689b      	ldr	r3, [r3, #8]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d008      	beq.n	80060c4 <HAL_TIM_PWM_ConfigChannel+0xa0>
 80060b2:	68bb      	ldr	r3, [r7, #8]
 80060b4:	689b      	ldr	r3, [r3, #8]
 80060b6:	2b02      	cmp	r3, #2
 80060b8:	d004      	beq.n	80060c4 <HAL_TIM_PWM_ConfigChannel+0xa0>
 80060ba:	f241 01b1 	movw	r1, #4273	; 0x10b1
 80060be:	487e      	ldr	r0, [pc, #504]	; (80062b8 <HAL_TIM_PWM_ConfigChannel+0x294>)
 80060c0:	f7fb fc35 	bl	800192e <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	691b      	ldr	r3, [r3, #16]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d008      	beq.n	80060de <HAL_TIM_PWM_ConfigChannel+0xba>
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	691b      	ldr	r3, [r3, #16]
 80060d0:	2b04      	cmp	r3, #4
 80060d2:	d004      	beq.n	80060de <HAL_TIM_PWM_ConfigChannel+0xba>
 80060d4:	f241 01b2 	movw	r1, #4274	; 0x10b2
 80060d8:	4877      	ldr	r0, [pc, #476]	; (80062b8 <HAL_TIM_PWM_ConfigChannel+0x294>)
 80060da:	f7fb fc28 	bl	800192e <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060e4:	2b01      	cmp	r3, #1
 80060e6:	d101      	bne.n	80060ec <HAL_TIM_PWM_ConfigChannel+0xc8>
 80060e8:	2302      	movs	r3, #2
 80060ea:	e1f3      	b.n	80064d4 <HAL_TIM_PWM_ConfigChannel+0x4b0>
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	2201      	movs	r2, #1
 80060f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2b14      	cmp	r3, #20
 80060f8:	f200 81e4 	bhi.w	80064c4 <HAL_TIM_PWM_ConfigChannel+0x4a0>
 80060fc:	a201      	add	r2, pc, #4	; (adr r2, 8006104 <HAL_TIM_PWM_ConfigChannel+0xe0>)
 80060fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006102:	bf00      	nop
 8006104:	08006159 	.word	0x08006159
 8006108:	080064c5 	.word	0x080064c5
 800610c:	080064c5 	.word	0x080064c5
 8006110:	080064c5 	.word	0x080064c5
 8006114:	0800621b 	.word	0x0800621b
 8006118:	080064c5 	.word	0x080064c5
 800611c:	080064c5 	.word	0x080064c5
 8006120:	080064c5 	.word	0x080064c5
 8006124:	080062f9 	.word	0x080062f9
 8006128:	080064c5 	.word	0x080064c5
 800612c:	080064c5 	.word	0x080064c5
 8006130:	080064c5 	.word	0x080064c5
 8006134:	0800637f 	.word	0x0800637f
 8006138:	080064c5 	.word	0x080064c5
 800613c:	080064c5 	.word	0x080064c5
 8006140:	080064c5 	.word	0x080064c5
 8006144:	08006407 	.word	0x08006407
 8006148:	080064c5 	.word	0x080064c5
 800614c:	080064c5 	.word	0x080064c5
 8006150:	080064c5 	.word	0x080064c5
 8006154:	08006465 	.word	0x08006465
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	4a5b      	ldr	r2, [pc, #364]	; (80062cc <HAL_TIM_PWM_ConfigChannel+0x2a8>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d03b      	beq.n	80061da <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800616a:	d036      	beq.n	80061da <HAL_TIM_PWM_ConfigChannel+0x1b6>
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	4a57      	ldr	r2, [pc, #348]	; (80062d0 <HAL_TIM_PWM_ConfigChannel+0x2ac>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d031      	beq.n	80061da <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	4a56      	ldr	r2, [pc, #344]	; (80062d4 <HAL_TIM_PWM_ConfigChannel+0x2b0>)
 800617c:	4293      	cmp	r3, r2
 800617e:	d02c      	beq.n	80061da <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	4a54      	ldr	r2, [pc, #336]	; (80062d8 <HAL_TIM_PWM_ConfigChannel+0x2b4>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d027      	beq.n	80061da <HAL_TIM_PWM_ConfigChannel+0x1b6>
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	4a53      	ldr	r2, [pc, #332]	; (80062dc <HAL_TIM_PWM_ConfigChannel+0x2b8>)
 8006190:	4293      	cmp	r3, r2
 8006192:	d022      	beq.n	80061da <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	4a51      	ldr	r2, [pc, #324]	; (80062e0 <HAL_TIM_PWM_ConfigChannel+0x2bc>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d01d      	beq.n	80061da <HAL_TIM_PWM_ConfigChannel+0x1b6>
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	4a50      	ldr	r2, [pc, #320]	; (80062e4 <HAL_TIM_PWM_ConfigChannel+0x2c0>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d018      	beq.n	80061da <HAL_TIM_PWM_ConfigChannel+0x1b6>
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	4a4e      	ldr	r2, [pc, #312]	; (80062e8 <HAL_TIM_PWM_ConfigChannel+0x2c4>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d013      	beq.n	80061da <HAL_TIM_PWM_ConfigChannel+0x1b6>
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	4a4d      	ldr	r2, [pc, #308]	; (80062ec <HAL_TIM_PWM_ConfigChannel+0x2c8>)
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d00e      	beq.n	80061da <HAL_TIM_PWM_ConfigChannel+0x1b6>
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4a4b      	ldr	r2, [pc, #300]	; (80062f0 <HAL_TIM_PWM_ConfigChannel+0x2cc>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d009      	beq.n	80061da <HAL_TIM_PWM_ConfigChannel+0x1b6>
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	4a4a      	ldr	r2, [pc, #296]	; (80062f4 <HAL_TIM_PWM_ConfigChannel+0x2d0>)
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d004      	beq.n	80061da <HAL_TIM_PWM_ConfigChannel+0x1b6>
 80061d0:	f241 01bc 	movw	r1, #4284	; 0x10bc
 80061d4:	4838      	ldr	r0, [pc, #224]	; (80062b8 <HAL_TIM_PWM_ConfigChannel+0x294>)
 80061d6:	f7fb fbaa 	bl	800192e <assert_failed>

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	68b9      	ldr	r1, [r7, #8]
 80061e0:	4618      	mov	r0, r3
 80061e2:	f000 fdab 	bl	8006d3c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	699a      	ldr	r2, [r3, #24]
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f042 0208 	orr.w	r2, r2, #8
 80061f4:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	699a      	ldr	r2, [r3, #24]
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f022 0204 	bic.w	r2, r2, #4
 8006204:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	6999      	ldr	r1, [r3, #24]
 800620c:	68bb      	ldr	r3, [r7, #8]
 800620e:	691a      	ldr	r2, [r3, #16]
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	430a      	orrs	r2, r1
 8006216:	619a      	str	r2, [r3, #24]
      break;
 8006218:	e157      	b.n	80064ca <HAL_TIM_PWM_ConfigChannel+0x4a6>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	4a2b      	ldr	r2, [pc, #172]	; (80062cc <HAL_TIM_PWM_ConfigChannel+0x2a8>)
 8006220:	4293      	cmp	r3, r2
 8006222:	d027      	beq.n	8006274 <HAL_TIM_PWM_ConfigChannel+0x250>
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800622c:	d022      	beq.n	8006274 <HAL_TIM_PWM_ConfigChannel+0x250>
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	4a27      	ldr	r2, [pc, #156]	; (80062d0 <HAL_TIM_PWM_ConfigChannel+0x2ac>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d01d      	beq.n	8006274 <HAL_TIM_PWM_ConfigChannel+0x250>
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	4a25      	ldr	r2, [pc, #148]	; (80062d4 <HAL_TIM_PWM_ConfigChannel+0x2b0>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d018      	beq.n	8006274 <HAL_TIM_PWM_ConfigChannel+0x250>
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4a24      	ldr	r2, [pc, #144]	; (80062d8 <HAL_TIM_PWM_ConfigChannel+0x2b4>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d013      	beq.n	8006274 <HAL_TIM_PWM_ConfigChannel+0x250>
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4a22      	ldr	r2, [pc, #136]	; (80062dc <HAL_TIM_PWM_ConfigChannel+0x2b8>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d00e      	beq.n	8006274 <HAL_TIM_PWM_ConfigChannel+0x250>
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4a21      	ldr	r2, [pc, #132]	; (80062e0 <HAL_TIM_PWM_ConfigChannel+0x2bc>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d009      	beq.n	8006274 <HAL_TIM_PWM_ConfigChannel+0x250>
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4a21      	ldr	r2, [pc, #132]	; (80062ec <HAL_TIM_PWM_ConfigChannel+0x2c8>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d004      	beq.n	8006274 <HAL_TIM_PWM_ConfigChannel+0x250>
 800626a:	f241 01cd 	movw	r1, #4301	; 0x10cd
 800626e:	4812      	ldr	r0, [pc, #72]	; (80062b8 <HAL_TIM_PWM_ConfigChannel+0x294>)
 8006270:	f7fb fb5d 	bl	800192e <assert_failed>

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	68b9      	ldr	r1, [r7, #8]
 800627a:	4618      	mov	r0, r3
 800627c:	f000 fdfa 	bl	8006e74 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	699a      	ldr	r2, [r3, #24]
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800628e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	699a      	ldr	r2, [r3, #24]
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800629e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	6999      	ldr	r1, [r3, #24]
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	691b      	ldr	r3, [r3, #16]
 80062aa:	021a      	lsls	r2, r3, #8
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	430a      	orrs	r2, r1
 80062b2:	619a      	str	r2, [r3, #24]
      break;
 80062b4:	e109      	b.n	80064ca <HAL_TIM_PWM_ConfigChannel+0x4a6>
 80062b6:	bf00      	nop
 80062b8:	08012cc4 	.word	0x08012cc4
 80062bc:	00010040 	.word	0x00010040
 80062c0:	00010050 	.word	0x00010050
 80062c4:	00010060 	.word	0x00010060
 80062c8:	00010070 	.word	0x00010070
 80062cc:	40010000 	.word	0x40010000
 80062d0:	40000400 	.word	0x40000400
 80062d4:	40000800 	.word	0x40000800
 80062d8:	40000c00 	.word	0x40000c00
 80062dc:	40010400 	.word	0x40010400
 80062e0:	40014000 	.word	0x40014000
 80062e4:	40014400 	.word	0x40014400
 80062e8:	40014800 	.word	0x40014800
 80062ec:	40001800 	.word	0x40001800
 80062f0:	40001c00 	.word	0x40001c00
 80062f4:	40002000 	.word	0x40002000
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	4a77      	ldr	r2, [pc, #476]	; (80064dc <HAL_TIM_PWM_ConfigChannel+0x4b8>)
 80062fe:	4293      	cmp	r3, r2
 8006300:	d01d      	beq.n	800633e <HAL_TIM_PWM_ConfigChannel+0x31a>
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800630a:	d018      	beq.n	800633e <HAL_TIM_PWM_ConfigChannel+0x31a>
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	4a73      	ldr	r2, [pc, #460]	; (80064e0 <HAL_TIM_PWM_ConfigChannel+0x4bc>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d013      	beq.n	800633e <HAL_TIM_PWM_ConfigChannel+0x31a>
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	4a72      	ldr	r2, [pc, #456]	; (80064e4 <HAL_TIM_PWM_ConfigChannel+0x4c0>)
 800631c:	4293      	cmp	r3, r2
 800631e:	d00e      	beq.n	800633e <HAL_TIM_PWM_ConfigChannel+0x31a>
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	4a70      	ldr	r2, [pc, #448]	; (80064e8 <HAL_TIM_PWM_ConfigChannel+0x4c4>)
 8006326:	4293      	cmp	r3, r2
 8006328:	d009      	beq.n	800633e <HAL_TIM_PWM_ConfigChannel+0x31a>
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	4a6f      	ldr	r2, [pc, #444]	; (80064ec <HAL_TIM_PWM_ConfigChannel+0x4c8>)
 8006330:	4293      	cmp	r3, r2
 8006332:	d004      	beq.n	800633e <HAL_TIM_PWM_ConfigChannel+0x31a>
 8006334:	f241 01de 	movw	r1, #4318	; 0x10de
 8006338:	486d      	ldr	r0, [pc, #436]	; (80064f0 <HAL_TIM_PWM_ConfigChannel+0x4cc>)
 800633a:	f7fb faf8 	bl	800192e <assert_failed>

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	68b9      	ldr	r1, [r7, #8]
 8006344:	4618      	mov	r0, r3
 8006346:	f000 fe35 	bl	8006fb4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	69da      	ldr	r2, [r3, #28]
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f042 0208 	orr.w	r2, r2, #8
 8006358:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	69da      	ldr	r2, [r3, #28]
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f022 0204 	bic.w	r2, r2, #4
 8006368:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	69d9      	ldr	r1, [r3, #28]
 8006370:	68bb      	ldr	r3, [r7, #8]
 8006372:	691a      	ldr	r2, [r3, #16]
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	430a      	orrs	r2, r1
 800637a:	61da      	str	r2, [r3, #28]
      break;
 800637c:	e0a5      	b.n	80064ca <HAL_TIM_PWM_ConfigChannel+0x4a6>
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	4a56      	ldr	r2, [pc, #344]	; (80064dc <HAL_TIM_PWM_ConfigChannel+0x4b8>)
 8006384:	4293      	cmp	r3, r2
 8006386:	d01d      	beq.n	80063c4 <HAL_TIM_PWM_ConfigChannel+0x3a0>
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006390:	d018      	beq.n	80063c4 <HAL_TIM_PWM_ConfigChannel+0x3a0>
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	4a52      	ldr	r2, [pc, #328]	; (80064e0 <HAL_TIM_PWM_ConfigChannel+0x4bc>)
 8006398:	4293      	cmp	r3, r2
 800639a:	d013      	beq.n	80063c4 <HAL_TIM_PWM_ConfigChannel+0x3a0>
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	4a50      	ldr	r2, [pc, #320]	; (80064e4 <HAL_TIM_PWM_ConfigChannel+0x4c0>)
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d00e      	beq.n	80063c4 <HAL_TIM_PWM_ConfigChannel+0x3a0>
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	4a4f      	ldr	r2, [pc, #316]	; (80064e8 <HAL_TIM_PWM_ConfigChannel+0x4c4>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d009      	beq.n	80063c4 <HAL_TIM_PWM_ConfigChannel+0x3a0>
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	4a4d      	ldr	r2, [pc, #308]	; (80064ec <HAL_TIM_PWM_ConfigChannel+0x4c8>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d004      	beq.n	80063c4 <HAL_TIM_PWM_ConfigChannel+0x3a0>
 80063ba:	f241 01ef 	movw	r1, #4335	; 0x10ef
 80063be:	484c      	ldr	r0, [pc, #304]	; (80064f0 <HAL_TIM_PWM_ConfigChannel+0x4cc>)
 80063c0:	f7fb fab5 	bl	800192e <assert_failed>

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	68b9      	ldr	r1, [r7, #8]
 80063ca:	4618      	mov	r0, r3
 80063cc:	f000 fe92 	bl	80070f4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	69da      	ldr	r2, [r3, #28]
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80063de:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	69da      	ldr	r2, [r3, #28]
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80063ee:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	69d9      	ldr	r1, [r3, #28]
 80063f6:	68bb      	ldr	r3, [r7, #8]
 80063f8:	691b      	ldr	r3, [r3, #16]
 80063fa:	021a      	lsls	r2, r3, #8
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	430a      	orrs	r2, r1
 8006402:	61da      	str	r2, [r3, #28]
      break;
 8006404:	e061      	b.n	80064ca <HAL_TIM_PWM_ConfigChannel+0x4a6>
    }

    case TIM_CHANNEL_5:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	4a34      	ldr	r2, [pc, #208]	; (80064dc <HAL_TIM_PWM_ConfigChannel+0x4b8>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d009      	beq.n	8006424 <HAL_TIM_PWM_ConfigChannel+0x400>
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4a35      	ldr	r2, [pc, #212]	; (80064ec <HAL_TIM_PWM_ConfigChannel+0x4c8>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d004      	beq.n	8006424 <HAL_TIM_PWM_ConfigChannel+0x400>
 800641a:	f44f 5188 	mov.w	r1, #4352	; 0x1100
 800641e:	4834      	ldr	r0, [pc, #208]	; (80064f0 <HAL_TIM_PWM_ConfigChannel+0x4cc>)
 8006420:	f7fb fa85 	bl	800192e <assert_failed>

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	68b9      	ldr	r1, [r7, #8]
 800642a:	4618      	mov	r0, r3
 800642c:	f000 fec8 	bl	80071c0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f042 0208 	orr.w	r2, r2, #8
 800643e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f022 0204 	bic.w	r2, r2, #4
 800644e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006456:	68bb      	ldr	r3, [r7, #8]
 8006458:	691a      	ldr	r2, [r3, #16]
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	430a      	orrs	r2, r1
 8006460:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006462:	e032      	b.n	80064ca <HAL_TIM_PWM_ConfigChannel+0x4a6>
    }

    case TIM_CHANNEL_6:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4a1c      	ldr	r2, [pc, #112]	; (80064dc <HAL_TIM_PWM_ConfigChannel+0x4b8>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d009      	beq.n	8006482 <HAL_TIM_PWM_ConfigChannel+0x45e>
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	4a1e      	ldr	r2, [pc, #120]	; (80064ec <HAL_TIM_PWM_ConfigChannel+0x4c8>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d004      	beq.n	8006482 <HAL_TIM_PWM_ConfigChannel+0x45e>
 8006478:	f241 1111 	movw	r1, #4369	; 0x1111
 800647c:	481c      	ldr	r0, [pc, #112]	; (80064f0 <HAL_TIM_PWM_ConfigChannel+0x4cc>)
 800647e:	f7fb fa56 	bl	800192e <assert_failed>

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	68b9      	ldr	r1, [r7, #8]
 8006488:	4618      	mov	r0, r3
 800648a:	f000 feeb 	bl	8007264 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800649c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064ac:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	691b      	ldr	r3, [r3, #16]
 80064b8:	021a      	lsls	r2, r3, #8
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	430a      	orrs	r2, r1
 80064c0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80064c2:	e002      	b.n	80064ca <HAL_TIM_PWM_ConfigChannel+0x4a6>
    }

    default:
      status = HAL_ERROR;
 80064c4:	2301      	movs	r3, #1
 80064c6:	75fb      	strb	r3, [r7, #23]
      break;
 80064c8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	2200      	movs	r2, #0
 80064ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80064d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80064d4:	4618      	mov	r0, r3
 80064d6:	3718      	adds	r7, #24
 80064d8:	46bd      	mov	sp, r7
 80064da:	bd80      	pop	{r7, pc}
 80064dc:	40010000 	.word	0x40010000
 80064e0:	40000400 	.word	0x40000400
 80064e4:	40000800 	.word	0x40000800
 80064e8:	40000c00 	.word	0x40000c00
 80064ec:	40010400 	.word	0x40010400
 80064f0:	08012cc4 	.word	0x08012cc4

080064f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b084      	sub	sp, #16
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
 80064fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80064fe:	2300      	movs	r3, #0
 8006500:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006508:	2b01      	cmp	r3, #1
 800650a:	d101      	bne.n	8006510 <HAL_TIM_ConfigClockSource+0x1c>
 800650c:	2302      	movs	r3, #2
 800650e:	e332      	b.n	8006b76 <HAL_TIM_ConfigClockSource+0x682>
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2201      	movs	r2, #1
 8006514:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2202      	movs	r2, #2
 800651c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006528:	d029      	beq.n	800657e <HAL_TIM_ConfigClockSource+0x8a>
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	2b70      	cmp	r3, #112	; 0x70
 8006530:	d025      	beq.n	800657e <HAL_TIM_ConfigClockSource+0x8a>
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800653a:	d020      	beq.n	800657e <HAL_TIM_ConfigClockSource+0x8a>
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	2b40      	cmp	r3, #64	; 0x40
 8006542:	d01c      	beq.n	800657e <HAL_TIM_ConfigClockSource+0x8a>
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	2b50      	cmp	r3, #80	; 0x50
 800654a:	d018      	beq.n	800657e <HAL_TIM_ConfigClockSource+0x8a>
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	2b60      	cmp	r3, #96	; 0x60
 8006552:	d014      	beq.n	800657e <HAL_TIM_ConfigClockSource+0x8a>
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d010      	beq.n	800657e <HAL_TIM_ConfigClockSource+0x8a>
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	2b10      	cmp	r3, #16
 8006562:	d00c      	beq.n	800657e <HAL_TIM_ConfigClockSource+0x8a>
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	2b20      	cmp	r3, #32
 800656a:	d008      	beq.n	800657e <HAL_TIM_ConfigClockSource+0x8a>
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	2b30      	cmp	r3, #48	; 0x30
 8006572:	d004      	beq.n	800657e <HAL_TIM_ConfigClockSource+0x8a>
 8006574:	f241 514c 	movw	r1, #5452	; 0x154c
 8006578:	4893      	ldr	r0, [pc, #588]	; (80067c8 <HAL_TIM_ConfigClockSource+0x2d4>)
 800657a:	f7fb f9d8 	bl	800192e <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	689b      	ldr	r3, [r3, #8]
 8006584:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006586:	68ba      	ldr	r2, [r7, #8]
 8006588:	4b90      	ldr	r3, [pc, #576]	; (80067cc <HAL_TIM_ConfigClockSource+0x2d8>)
 800658a:	4013      	ands	r3, r2
 800658c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800658e:	68bb      	ldr	r3, [r7, #8]
 8006590:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006594:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	68ba      	ldr	r2, [r7, #8]
 800659c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065a6:	f000 812d 	beq.w	8006804 <HAL_TIM_ConfigClockSource+0x310>
 80065aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065ae:	f200 82d5 	bhi.w	8006b5c <HAL_TIM_ConfigClockSource+0x668>
 80065b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065b6:	d02e      	beq.n	8006616 <HAL_TIM_ConfigClockSource+0x122>
 80065b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065bc:	f200 82ce 	bhi.w	8006b5c <HAL_TIM_ConfigClockSource+0x668>
 80065c0:	2b70      	cmp	r3, #112	; 0x70
 80065c2:	f000 8082 	beq.w	80066ca <HAL_TIM_ConfigClockSource+0x1d6>
 80065c6:	2b70      	cmp	r3, #112	; 0x70
 80065c8:	f200 82c8 	bhi.w	8006b5c <HAL_TIM_ConfigClockSource+0x668>
 80065cc:	2b60      	cmp	r3, #96	; 0x60
 80065ce:	f000 81e0 	beq.w	8006992 <HAL_TIM_ConfigClockSource+0x49e>
 80065d2:	2b60      	cmp	r3, #96	; 0x60
 80065d4:	f200 82c2 	bhi.w	8006b5c <HAL_TIM_ConfigClockSource+0x668>
 80065d8:	2b50      	cmp	r3, #80	; 0x50
 80065da:	f000 8184 	beq.w	80068e6 <HAL_TIM_ConfigClockSource+0x3f2>
 80065de:	2b50      	cmp	r3, #80	; 0x50
 80065e0:	f200 82bc 	bhi.w	8006b5c <HAL_TIM_ConfigClockSource+0x668>
 80065e4:	2b40      	cmp	r3, #64	; 0x40
 80065e6:	f000 8237 	beq.w	8006a58 <HAL_TIM_ConfigClockSource+0x564>
 80065ea:	2b40      	cmp	r3, #64	; 0x40
 80065ec:	f200 82b6 	bhi.w	8006b5c <HAL_TIM_ConfigClockSource+0x668>
 80065f0:	2b30      	cmp	r3, #48	; 0x30
 80065f2:	f000 8287 	beq.w	8006b04 <HAL_TIM_ConfigClockSource+0x610>
 80065f6:	2b30      	cmp	r3, #48	; 0x30
 80065f8:	f200 82b0 	bhi.w	8006b5c <HAL_TIM_ConfigClockSource+0x668>
 80065fc:	2b20      	cmp	r3, #32
 80065fe:	f000 8281 	beq.w	8006b04 <HAL_TIM_ConfigClockSource+0x610>
 8006602:	2b20      	cmp	r3, #32
 8006604:	f200 82aa 	bhi.w	8006b5c <HAL_TIM_ConfigClockSource+0x668>
 8006608:	2b00      	cmp	r3, #0
 800660a:	f000 827b 	beq.w	8006b04 <HAL_TIM_ConfigClockSource+0x610>
 800660e:	2b10      	cmp	r3, #16
 8006610:	f000 8278 	beq.w	8006b04 <HAL_TIM_ConfigClockSource+0x610>
 8006614:	e2a2      	b.n	8006b5c <HAL_TIM_ConfigClockSource+0x668>
  {
    case TIM_CLOCKSOURCE_INTERNAL:
    {
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	4a6d      	ldr	r2, [pc, #436]	; (80067d0 <HAL_TIM_ConfigClockSource+0x2dc>)
 800661c:	4293      	cmp	r3, r2
 800661e:	f000 82a0 	beq.w	8006b62 <HAL_TIM_ConfigClockSource+0x66e>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800662a:	f000 829a 	beq.w	8006b62 <HAL_TIM_ConfigClockSource+0x66e>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	4a68      	ldr	r2, [pc, #416]	; (80067d4 <HAL_TIM_ConfigClockSource+0x2e0>)
 8006634:	4293      	cmp	r3, r2
 8006636:	f000 8294 	beq.w	8006b62 <HAL_TIM_ConfigClockSource+0x66e>
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	4a66      	ldr	r2, [pc, #408]	; (80067d8 <HAL_TIM_ConfigClockSource+0x2e4>)
 8006640:	4293      	cmp	r3, r2
 8006642:	f000 828e 	beq.w	8006b62 <HAL_TIM_ConfigClockSource+0x66e>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	4a64      	ldr	r2, [pc, #400]	; (80067dc <HAL_TIM_ConfigClockSource+0x2e8>)
 800664c:	4293      	cmp	r3, r2
 800664e:	f000 8288 	beq.w	8006b62 <HAL_TIM_ConfigClockSource+0x66e>
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	4a62      	ldr	r2, [pc, #392]	; (80067e0 <HAL_TIM_ConfigClockSource+0x2ec>)
 8006658:	4293      	cmp	r3, r2
 800665a:	f000 8282 	beq.w	8006b62 <HAL_TIM_ConfigClockSource+0x66e>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	4a60      	ldr	r2, [pc, #384]	; (80067e4 <HAL_TIM_ConfigClockSource+0x2f0>)
 8006664:	4293      	cmp	r3, r2
 8006666:	f000 827c 	beq.w	8006b62 <HAL_TIM_ConfigClockSource+0x66e>
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	4a5e      	ldr	r2, [pc, #376]	; (80067e8 <HAL_TIM_ConfigClockSource+0x2f4>)
 8006670:	4293      	cmp	r3, r2
 8006672:	f000 8276 	beq.w	8006b62 <HAL_TIM_ConfigClockSource+0x66e>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	4a5c      	ldr	r2, [pc, #368]	; (80067ec <HAL_TIM_ConfigClockSource+0x2f8>)
 800667c:	4293      	cmp	r3, r2
 800667e:	f000 8270 	beq.w	8006b62 <HAL_TIM_ConfigClockSource+0x66e>
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	4a5a      	ldr	r2, [pc, #360]	; (80067f0 <HAL_TIM_ConfigClockSource+0x2fc>)
 8006688:	4293      	cmp	r3, r2
 800668a:	f000 826a 	beq.w	8006b62 <HAL_TIM_ConfigClockSource+0x66e>
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	4a58      	ldr	r2, [pc, #352]	; (80067f4 <HAL_TIM_ConfigClockSource+0x300>)
 8006694:	4293      	cmp	r3, r2
 8006696:	f000 8264 	beq.w	8006b62 <HAL_TIM_ConfigClockSource+0x66e>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	4a56      	ldr	r2, [pc, #344]	; (80067f8 <HAL_TIM_ConfigClockSource+0x304>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	f000 825e 	beq.w	8006b62 <HAL_TIM_ConfigClockSource+0x66e>
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	4a54      	ldr	r2, [pc, #336]	; (80067fc <HAL_TIM_ConfigClockSource+0x308>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	f000 8258 	beq.w	8006b62 <HAL_TIM_ConfigClockSource+0x66e>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	4a52      	ldr	r2, [pc, #328]	; (8006800 <HAL_TIM_ConfigClockSource+0x30c>)
 80066b8:	4293      	cmp	r3, r2
 80066ba:	f000 8252 	beq.w	8006b62 <HAL_TIM_ConfigClockSource+0x66e>
 80066be:	f241 5158 	movw	r1, #5464	; 0x1558
 80066c2:	4841      	ldr	r0, [pc, #260]	; (80067c8 <HAL_TIM_ConfigClockSource+0x2d4>)
 80066c4:	f7fb f933 	bl	800192e <assert_failed>
      break;
 80066c8:	e24b      	b.n	8006b62 <HAL_TIM_ConfigClockSource+0x66e>
    }

    case TIM_CLOCKSOURCE_ETRMODE1:
    {
      /* Check whether or not the timer instance supports external trigger input mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	4a40      	ldr	r2, [pc, #256]	; (80067d0 <HAL_TIM_ConfigClockSource+0x2dc>)
 80066d0:	4293      	cmp	r3, r2
 80066d2:	d027      	beq.n	8006724 <HAL_TIM_ConfigClockSource+0x230>
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066dc:	d022      	beq.n	8006724 <HAL_TIM_ConfigClockSource+0x230>
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	4a3c      	ldr	r2, [pc, #240]	; (80067d4 <HAL_TIM_ConfigClockSource+0x2e0>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d01d      	beq.n	8006724 <HAL_TIM_ConfigClockSource+0x230>
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	4a3a      	ldr	r2, [pc, #232]	; (80067d8 <HAL_TIM_ConfigClockSource+0x2e4>)
 80066ee:	4293      	cmp	r3, r2
 80066f0:	d018      	beq.n	8006724 <HAL_TIM_ConfigClockSource+0x230>
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	4a39      	ldr	r2, [pc, #228]	; (80067dc <HAL_TIM_ConfigClockSource+0x2e8>)
 80066f8:	4293      	cmp	r3, r2
 80066fa:	d013      	beq.n	8006724 <HAL_TIM_ConfigClockSource+0x230>
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	4a39      	ldr	r2, [pc, #228]	; (80067e8 <HAL_TIM_ConfigClockSource+0x2f4>)
 8006702:	4293      	cmp	r3, r2
 8006704:	d00e      	beq.n	8006724 <HAL_TIM_ConfigClockSource+0x230>
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	4a38      	ldr	r2, [pc, #224]	; (80067ec <HAL_TIM_ConfigClockSource+0x2f8>)
 800670c:	4293      	cmp	r3, r2
 800670e:	d009      	beq.n	8006724 <HAL_TIM_ConfigClockSource+0x230>
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	4a38      	ldr	r2, [pc, #224]	; (80067f8 <HAL_TIM_ConfigClockSource+0x304>)
 8006716:	4293      	cmp	r3, r2
 8006718:	d004      	beq.n	8006724 <HAL_TIM_ConfigClockSource+0x230>
 800671a:	f241 515f 	movw	r1, #5471	; 0x155f
 800671e:	482a      	ldr	r0, [pc, #168]	; (80067c8 <HAL_TIM_ConfigClockSource+0x2d4>)
 8006720:	f7fb f905 	bl	800192e <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	689b      	ldr	r3, [r3, #8]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d013      	beq.n	8006754 <HAL_TIM_ConfigClockSource+0x260>
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	689b      	ldr	r3, [r3, #8]
 8006730:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006734:	d00e      	beq.n	8006754 <HAL_TIM_ConfigClockSource+0x260>
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	689b      	ldr	r3, [r3, #8]
 800673a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800673e:	d009      	beq.n	8006754 <HAL_TIM_ConfigClockSource+0x260>
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	689b      	ldr	r3, [r3, #8]
 8006744:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006748:	d004      	beq.n	8006754 <HAL_TIM_ConfigClockSource+0x260>
 800674a:	f241 5162 	movw	r1, #5474	; 0x1562
 800674e:	481e      	ldr	r0, [pc, #120]	; (80067c8 <HAL_TIM_ConfigClockSource+0x2d4>)
 8006750:	f7fb f8ed 	bl	800192e <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	685b      	ldr	r3, [r3, #4]
 8006758:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800675c:	d014      	beq.n	8006788 <HAL_TIM_ConfigClockSource+0x294>
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	685b      	ldr	r3, [r3, #4]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d010      	beq.n	8006788 <HAL_TIM_ConfigClockSource+0x294>
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	685b      	ldr	r3, [r3, #4]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d00c      	beq.n	8006788 <HAL_TIM_ConfigClockSource+0x294>
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	685b      	ldr	r3, [r3, #4]
 8006772:	2b02      	cmp	r3, #2
 8006774:	d008      	beq.n	8006788 <HAL_TIM_ConfigClockSource+0x294>
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	685b      	ldr	r3, [r3, #4]
 800677a:	2b0a      	cmp	r3, #10
 800677c:	d004      	beq.n	8006788 <HAL_TIM_ConfigClockSource+0x294>
 800677e:	f241 5163 	movw	r1, #5475	; 0x1563
 8006782:	4811      	ldr	r0, [pc, #68]	; (80067c8 <HAL_TIM_ConfigClockSource+0x2d4>)
 8006784:	f7fb f8d3 	bl	800192e <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	68db      	ldr	r3, [r3, #12]
 800678c:	2b0f      	cmp	r3, #15
 800678e:	d904      	bls.n	800679a <HAL_TIM_ConfigClockSource+0x2a6>
 8006790:	f241 5164 	movw	r1, #5476	; 0x1564
 8006794:	480c      	ldr	r0, [pc, #48]	; (80067c8 <HAL_TIM_ConfigClockSource+0x2d4>)
 8006796:	f7fb f8ca 	bl	800192e <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6818      	ldr	r0, [r3, #0]
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	6899      	ldr	r1, [r3, #8]
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	685a      	ldr	r2, [r3, #4]
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	68db      	ldr	r3, [r3, #12]
 80067aa:	f000 fe29 	bl	8007400 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	689b      	ldr	r3, [r3, #8]
 80067b4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80067b6:	68bb      	ldr	r3, [r7, #8]
 80067b8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80067bc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	68ba      	ldr	r2, [r7, #8]
 80067c4:	609a      	str	r2, [r3, #8]
      break;
 80067c6:	e1cd      	b.n	8006b64 <HAL_TIM_ConfigClockSource+0x670>
 80067c8:	08012cc4 	.word	0x08012cc4
 80067cc:	fffeff88 	.word	0xfffeff88
 80067d0:	40010000 	.word	0x40010000
 80067d4:	40000400 	.word	0x40000400
 80067d8:	40000800 	.word	0x40000800
 80067dc:	40000c00 	.word	0x40000c00
 80067e0:	40001000 	.word	0x40001000
 80067e4:	40001400 	.word	0x40001400
 80067e8:	40010400 	.word	0x40010400
 80067ec:	40014000 	.word	0x40014000
 80067f0:	40014400 	.word	0x40014400
 80067f4:	40014800 	.word	0x40014800
 80067f8:	40001800 	.word	0x40001800
 80067fc:	40001c00 	.word	0x40001c00
 8006800:	40002000 	.word	0x40002000
    }

    case TIM_CLOCKSOURCE_ETRMODE2:
    {
      /* Check whether or not the timer instance supports external trigger input mode 2 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	4a8d      	ldr	r2, [pc, #564]	; (8006a40 <HAL_TIM_ConfigClockSource+0x54c>)
 800680a:	4293      	cmp	r3, r2
 800680c:	d01d      	beq.n	800684a <HAL_TIM_ConfigClockSource+0x356>
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006816:	d018      	beq.n	800684a <HAL_TIM_ConfigClockSource+0x356>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	4a89      	ldr	r2, [pc, #548]	; (8006a44 <HAL_TIM_ConfigClockSource+0x550>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d013      	beq.n	800684a <HAL_TIM_ConfigClockSource+0x356>
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	4a88      	ldr	r2, [pc, #544]	; (8006a48 <HAL_TIM_ConfigClockSource+0x554>)
 8006828:	4293      	cmp	r3, r2
 800682a:	d00e      	beq.n	800684a <HAL_TIM_ConfigClockSource+0x356>
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	4a86      	ldr	r2, [pc, #536]	; (8006a4c <HAL_TIM_ConfigClockSource+0x558>)
 8006832:	4293      	cmp	r3, r2
 8006834:	d009      	beq.n	800684a <HAL_TIM_ConfigClockSource+0x356>
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	4a85      	ldr	r2, [pc, #532]	; (8006a50 <HAL_TIM_ConfigClockSource+0x55c>)
 800683c:	4293      	cmp	r3, r2
 800683e:	d004      	beq.n	800684a <HAL_TIM_ConfigClockSource+0x356>
 8006840:	f241 5177 	movw	r1, #5495	; 0x1577
 8006844:	4883      	ldr	r0, [pc, #524]	; (8006a54 <HAL_TIM_ConfigClockSource+0x560>)
 8006846:	f7fb f872 	bl	800192e <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	689b      	ldr	r3, [r3, #8]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d013      	beq.n	800687a <HAL_TIM_ConfigClockSource+0x386>
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	689b      	ldr	r3, [r3, #8]
 8006856:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800685a:	d00e      	beq.n	800687a <HAL_TIM_ConfigClockSource+0x386>
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	689b      	ldr	r3, [r3, #8]
 8006860:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006864:	d009      	beq.n	800687a <HAL_TIM_ConfigClockSource+0x386>
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	689b      	ldr	r3, [r3, #8]
 800686a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800686e:	d004      	beq.n	800687a <HAL_TIM_ConfigClockSource+0x386>
 8006870:	f241 517a 	movw	r1, #5498	; 0x157a
 8006874:	4877      	ldr	r0, [pc, #476]	; (8006a54 <HAL_TIM_ConfigClockSource+0x560>)
 8006876:	f7fb f85a 	bl	800192e <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	685b      	ldr	r3, [r3, #4]
 800687e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006882:	d014      	beq.n	80068ae <HAL_TIM_ConfigClockSource+0x3ba>
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	685b      	ldr	r3, [r3, #4]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d010      	beq.n	80068ae <HAL_TIM_ConfigClockSource+0x3ba>
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	685b      	ldr	r3, [r3, #4]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d00c      	beq.n	80068ae <HAL_TIM_ConfigClockSource+0x3ba>
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	685b      	ldr	r3, [r3, #4]
 8006898:	2b02      	cmp	r3, #2
 800689a:	d008      	beq.n	80068ae <HAL_TIM_ConfigClockSource+0x3ba>
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	685b      	ldr	r3, [r3, #4]
 80068a0:	2b0a      	cmp	r3, #10
 80068a2:	d004      	beq.n	80068ae <HAL_TIM_ConfigClockSource+0x3ba>
 80068a4:	f241 517b 	movw	r1, #5499	; 0x157b
 80068a8:	486a      	ldr	r0, [pc, #424]	; (8006a54 <HAL_TIM_ConfigClockSource+0x560>)
 80068aa:	f7fb f840 	bl	800192e <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	68db      	ldr	r3, [r3, #12]
 80068b2:	2b0f      	cmp	r3, #15
 80068b4:	d904      	bls.n	80068c0 <HAL_TIM_ConfigClockSource+0x3cc>
 80068b6:	f241 517c 	movw	r1, #5500	; 0x157c
 80068ba:	4866      	ldr	r0, [pc, #408]	; (8006a54 <HAL_TIM_ConfigClockSource+0x560>)
 80068bc:	f7fb f837 	bl	800192e <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	6818      	ldr	r0, [r3, #0]
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	6899      	ldr	r1, [r3, #8]
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	685a      	ldr	r2, [r3, #4]
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	68db      	ldr	r3, [r3, #12]
 80068d0:	f000 fd96 	bl	8007400 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	689a      	ldr	r2, [r3, #8]
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80068e2:	609a      	str	r2, [r3, #8]
      break;
 80068e4:	e13e      	b.n	8006b64 <HAL_TIM_ConfigClockSource+0x670>
    }

    case TIM_CLOCKSOURCE_TI1:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	4a55      	ldr	r2, [pc, #340]	; (8006a40 <HAL_TIM_ConfigClockSource+0x54c>)
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d01d      	beq.n	800692c <HAL_TIM_ConfigClockSource+0x438>
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068f8:	d018      	beq.n	800692c <HAL_TIM_ConfigClockSource+0x438>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	4a51      	ldr	r2, [pc, #324]	; (8006a44 <HAL_TIM_ConfigClockSource+0x550>)
 8006900:	4293      	cmp	r3, r2
 8006902:	d013      	beq.n	800692c <HAL_TIM_ConfigClockSource+0x438>
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	4a4f      	ldr	r2, [pc, #316]	; (8006a48 <HAL_TIM_ConfigClockSource+0x554>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d00e      	beq.n	800692c <HAL_TIM_ConfigClockSource+0x438>
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	4a4e      	ldr	r2, [pc, #312]	; (8006a4c <HAL_TIM_ConfigClockSource+0x558>)
 8006914:	4293      	cmp	r3, r2
 8006916:	d009      	beq.n	800692c <HAL_TIM_ConfigClockSource+0x438>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	4a4c      	ldr	r2, [pc, #304]	; (8006a50 <HAL_TIM_ConfigClockSource+0x55c>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d004      	beq.n	800692c <HAL_TIM_ConfigClockSource+0x438>
 8006922:	f241 518b 	movw	r1, #5515	; 0x158b
 8006926:	484b      	ldr	r0, [pc, #300]	; (8006a54 <HAL_TIM_ConfigClockSource+0x560>)
 8006928:	f7fb f801 	bl	800192e <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	685b      	ldr	r3, [r3, #4]
 8006930:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006934:	d014      	beq.n	8006960 <HAL_TIM_ConfigClockSource+0x46c>
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	685b      	ldr	r3, [r3, #4]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d010      	beq.n	8006960 <HAL_TIM_ConfigClockSource+0x46c>
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	685b      	ldr	r3, [r3, #4]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d00c      	beq.n	8006960 <HAL_TIM_ConfigClockSource+0x46c>
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	685b      	ldr	r3, [r3, #4]
 800694a:	2b02      	cmp	r3, #2
 800694c:	d008      	beq.n	8006960 <HAL_TIM_ConfigClockSource+0x46c>
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	685b      	ldr	r3, [r3, #4]
 8006952:	2b0a      	cmp	r3, #10
 8006954:	d004      	beq.n	8006960 <HAL_TIM_ConfigClockSource+0x46c>
 8006956:	f241 518e 	movw	r1, #5518	; 0x158e
 800695a:	483e      	ldr	r0, [pc, #248]	; (8006a54 <HAL_TIM_ConfigClockSource+0x560>)
 800695c:	f7fa ffe7 	bl	800192e <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	68db      	ldr	r3, [r3, #12]
 8006964:	2b0f      	cmp	r3, #15
 8006966:	d904      	bls.n	8006972 <HAL_TIM_ConfigClockSource+0x47e>
 8006968:	f241 518f 	movw	r1, #5519	; 0x158f
 800696c:	4839      	ldr	r0, [pc, #228]	; (8006a54 <HAL_TIM_ConfigClockSource+0x560>)
 800696e:	f7fa ffde 	bl	800192e <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6818      	ldr	r0, [r3, #0]
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	6859      	ldr	r1, [r3, #4]
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	68db      	ldr	r3, [r3, #12]
 800697e:	461a      	mov	r2, r3
 8006980:	f000 fcc4 	bl	800730c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	2150      	movs	r1, #80	; 0x50
 800698a:	4618      	mov	r0, r3
 800698c:	f000 fd1d 	bl	80073ca <TIM_ITRx_SetConfig>
      break;
 8006990:	e0e8      	b.n	8006b64 <HAL_TIM_ConfigClockSource+0x670>
    }

    case TIM_CLOCKSOURCE_TI2:
    {
      /* Check whether or not the timer instance supports external clock mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	4a2a      	ldr	r2, [pc, #168]	; (8006a40 <HAL_TIM_ConfigClockSource+0x54c>)
 8006998:	4293      	cmp	r3, r2
 800699a:	d01d      	beq.n	80069d8 <HAL_TIM_ConfigClockSource+0x4e4>
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069a4:	d018      	beq.n	80069d8 <HAL_TIM_ConfigClockSource+0x4e4>
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	4a26      	ldr	r2, [pc, #152]	; (8006a44 <HAL_TIM_ConfigClockSource+0x550>)
 80069ac:	4293      	cmp	r3, r2
 80069ae:	d013      	beq.n	80069d8 <HAL_TIM_ConfigClockSource+0x4e4>
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	4a24      	ldr	r2, [pc, #144]	; (8006a48 <HAL_TIM_ConfigClockSource+0x554>)
 80069b6:	4293      	cmp	r3, r2
 80069b8:	d00e      	beq.n	80069d8 <HAL_TIM_ConfigClockSource+0x4e4>
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	4a23      	ldr	r2, [pc, #140]	; (8006a4c <HAL_TIM_ConfigClockSource+0x558>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d009      	beq.n	80069d8 <HAL_TIM_ConfigClockSource+0x4e4>
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	4a21      	ldr	r2, [pc, #132]	; (8006a50 <HAL_TIM_ConfigClockSource+0x55c>)
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d004      	beq.n	80069d8 <HAL_TIM_ConfigClockSource+0x4e4>
 80069ce:	f241 519b 	movw	r1, #5531	; 0x159b
 80069d2:	4820      	ldr	r0, [pc, #128]	; (8006a54 <HAL_TIM_ConfigClockSource+0x560>)
 80069d4:	f7fa ffab 	bl	800192e <assert_failed>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	685b      	ldr	r3, [r3, #4]
 80069dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80069e0:	d014      	beq.n	8006a0c <HAL_TIM_ConfigClockSource+0x518>
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	685b      	ldr	r3, [r3, #4]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d010      	beq.n	8006a0c <HAL_TIM_ConfigClockSource+0x518>
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	685b      	ldr	r3, [r3, #4]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d00c      	beq.n	8006a0c <HAL_TIM_ConfigClockSource+0x518>
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	685b      	ldr	r3, [r3, #4]
 80069f6:	2b02      	cmp	r3, #2
 80069f8:	d008      	beq.n	8006a0c <HAL_TIM_ConfigClockSource+0x518>
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	685b      	ldr	r3, [r3, #4]
 80069fe:	2b0a      	cmp	r3, #10
 8006a00:	d004      	beq.n	8006a0c <HAL_TIM_ConfigClockSource+0x518>
 8006a02:	f241 519e 	movw	r1, #5534	; 0x159e
 8006a06:	4813      	ldr	r0, [pc, #76]	; (8006a54 <HAL_TIM_ConfigClockSource+0x560>)
 8006a08:	f7fa ff91 	bl	800192e <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	68db      	ldr	r3, [r3, #12]
 8006a10:	2b0f      	cmp	r3, #15
 8006a12:	d904      	bls.n	8006a1e <HAL_TIM_ConfigClockSource+0x52a>
 8006a14:	f241 519f 	movw	r1, #5535	; 0x159f
 8006a18:	480e      	ldr	r0, [pc, #56]	; (8006a54 <HAL_TIM_ConfigClockSource+0x560>)
 8006a1a:	f7fa ff88 	bl	800192e <assert_failed>

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6818      	ldr	r0, [r3, #0]
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	6859      	ldr	r1, [r3, #4]
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	68db      	ldr	r3, [r3, #12]
 8006a2a:	461a      	mov	r2, r3
 8006a2c:	f000 fc9d 	bl	800736a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	2160      	movs	r1, #96	; 0x60
 8006a36:	4618      	mov	r0, r3
 8006a38:	f000 fcc7 	bl	80073ca <TIM_ITRx_SetConfig>
      break;
 8006a3c:	e092      	b.n	8006b64 <HAL_TIM_ConfigClockSource+0x670>
 8006a3e:	bf00      	nop
 8006a40:	40010000 	.word	0x40010000
 8006a44:	40000400 	.word	0x40000400
 8006a48:	40000800 	.word	0x40000800
 8006a4c:	40000c00 	.word	0x40000c00
 8006a50:	40010400 	.word	0x40010400
 8006a54:	08012cc4 	.word	0x08012cc4
    }

    case TIM_CLOCKSOURCE_TI1ED:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	4a48      	ldr	r2, [pc, #288]	; (8006b80 <HAL_TIM_ConfigClockSource+0x68c>)
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d01d      	beq.n	8006a9e <HAL_TIM_ConfigClockSource+0x5aa>
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a6a:	d018      	beq.n	8006a9e <HAL_TIM_ConfigClockSource+0x5aa>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	4a44      	ldr	r2, [pc, #272]	; (8006b84 <HAL_TIM_ConfigClockSource+0x690>)
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d013      	beq.n	8006a9e <HAL_TIM_ConfigClockSource+0x5aa>
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	4a43      	ldr	r2, [pc, #268]	; (8006b88 <HAL_TIM_ConfigClockSource+0x694>)
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d00e      	beq.n	8006a9e <HAL_TIM_ConfigClockSource+0x5aa>
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	4a41      	ldr	r2, [pc, #260]	; (8006b8c <HAL_TIM_ConfigClockSource+0x698>)
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d009      	beq.n	8006a9e <HAL_TIM_ConfigClockSource+0x5aa>
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	4a40      	ldr	r2, [pc, #256]	; (8006b90 <HAL_TIM_ConfigClockSource+0x69c>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d004      	beq.n	8006a9e <HAL_TIM_ConfigClockSource+0x5aa>
 8006a94:	f241 51ab 	movw	r1, #5547	; 0x15ab
 8006a98:	483e      	ldr	r0, [pc, #248]	; (8006b94 <HAL_TIM_ConfigClockSource+0x6a0>)
 8006a9a:	f7fa ff48 	bl	800192e <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	685b      	ldr	r3, [r3, #4]
 8006aa2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006aa6:	d014      	beq.n	8006ad2 <HAL_TIM_ConfigClockSource+0x5de>
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	685b      	ldr	r3, [r3, #4]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d010      	beq.n	8006ad2 <HAL_TIM_ConfigClockSource+0x5de>
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	685b      	ldr	r3, [r3, #4]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d00c      	beq.n	8006ad2 <HAL_TIM_ConfigClockSource+0x5de>
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	685b      	ldr	r3, [r3, #4]
 8006abc:	2b02      	cmp	r3, #2
 8006abe:	d008      	beq.n	8006ad2 <HAL_TIM_ConfigClockSource+0x5de>
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	685b      	ldr	r3, [r3, #4]
 8006ac4:	2b0a      	cmp	r3, #10
 8006ac6:	d004      	beq.n	8006ad2 <HAL_TIM_ConfigClockSource+0x5de>
 8006ac8:	f241 51ae 	movw	r1, #5550	; 0x15ae
 8006acc:	4831      	ldr	r0, [pc, #196]	; (8006b94 <HAL_TIM_ConfigClockSource+0x6a0>)
 8006ace:	f7fa ff2e 	bl	800192e <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	68db      	ldr	r3, [r3, #12]
 8006ad6:	2b0f      	cmp	r3, #15
 8006ad8:	d904      	bls.n	8006ae4 <HAL_TIM_ConfigClockSource+0x5f0>
 8006ada:	f241 51af 	movw	r1, #5551	; 0x15af
 8006ade:	482d      	ldr	r0, [pc, #180]	; (8006b94 <HAL_TIM_ConfigClockSource+0x6a0>)
 8006ae0:	f7fa ff25 	bl	800192e <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	6818      	ldr	r0, [r3, #0]
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	6859      	ldr	r1, [r3, #4]
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	68db      	ldr	r3, [r3, #12]
 8006af0:	461a      	mov	r2, r3
 8006af2:	f000 fc0b 	bl	800730c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	2140      	movs	r1, #64	; 0x40
 8006afc:	4618      	mov	r0, r3
 8006afe:	f000 fc64 	bl	80073ca <TIM_ITRx_SetConfig>
      break;
 8006b02:	e02f      	b.n	8006b64 <HAL_TIM_ConfigClockSource+0x670>
    case TIM_CLOCKSOURCE_ITR1:
    case TIM_CLOCKSOURCE_ITR2:
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	4a1d      	ldr	r2, [pc, #116]	; (8006b80 <HAL_TIM_ConfigClockSource+0x68c>)
 8006b0a:	4293      	cmp	r3, r2
 8006b0c:	d01d      	beq.n	8006b4a <HAL_TIM_ConfigClockSource+0x656>
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b16:	d018      	beq.n	8006b4a <HAL_TIM_ConfigClockSource+0x656>
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	4a19      	ldr	r2, [pc, #100]	; (8006b84 <HAL_TIM_ConfigClockSource+0x690>)
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d013      	beq.n	8006b4a <HAL_TIM_ConfigClockSource+0x656>
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	4a18      	ldr	r2, [pc, #96]	; (8006b88 <HAL_TIM_ConfigClockSource+0x694>)
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	d00e      	beq.n	8006b4a <HAL_TIM_ConfigClockSource+0x656>
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	4a16      	ldr	r2, [pc, #88]	; (8006b8c <HAL_TIM_ConfigClockSource+0x698>)
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d009      	beq.n	8006b4a <HAL_TIM_ConfigClockSource+0x656>
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	4a15      	ldr	r2, [pc, #84]	; (8006b90 <HAL_TIM_ConfigClockSource+0x69c>)
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d004      	beq.n	8006b4a <HAL_TIM_ConfigClockSource+0x656>
 8006b40:	f241 51be 	movw	r1, #5566	; 0x15be
 8006b44:	4813      	ldr	r0, [pc, #76]	; (8006b94 <HAL_TIM_ConfigClockSource+0x6a0>)
 8006b46:	f7fa fef2 	bl	800192e <assert_failed>

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681a      	ldr	r2, [r3, #0]
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	4619      	mov	r1, r3
 8006b54:	4610      	mov	r0, r2
 8006b56:	f000 fc38 	bl	80073ca <TIM_ITRx_SetConfig>
      break;
 8006b5a:	e003      	b.n	8006b64 <HAL_TIM_ConfigClockSource+0x670>
    }

    default:
      status = HAL_ERROR;
 8006b5c:	2301      	movs	r3, #1
 8006b5e:	73fb      	strb	r3, [r7, #15]
      break;
 8006b60:	e000      	b.n	8006b64 <HAL_TIM_ConfigClockSource+0x670>
      break;
 8006b62:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2201      	movs	r2, #1
 8006b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2200      	movs	r2, #0
 8006b70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006b74:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b76:	4618      	mov	r0, r3
 8006b78:	3710      	adds	r7, #16
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	bd80      	pop	{r7, pc}
 8006b7e:	bf00      	nop
 8006b80:	40010000 	.word	0x40010000
 8006b84:	40000400 	.word	0x40000400
 8006b88:	40000800 	.word	0x40000800
 8006b8c:	40000c00 	.word	0x40000c00
 8006b90:	40010400 	.word	0x40010400
 8006b94:	08012cc4 	.word	0x08012cc4

08006b98 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006b98:	b480      	push	{r7}
 8006b9a:	b083      	sub	sp, #12
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006ba0:	bf00      	nop
 8006ba2:	370c      	adds	r7, #12
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006baa:	4770      	bx	lr

08006bac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006bac:	b480      	push	{r7}
 8006bae:	b083      	sub	sp, #12
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006bb4:	bf00      	nop
 8006bb6:	370c      	adds	r7, #12
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbe:	4770      	bx	lr

08006bc0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006bc0:	b480      	push	{r7}
 8006bc2:	b083      	sub	sp, #12
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006bc8:	bf00      	nop
 8006bca:	370c      	adds	r7, #12
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd2:	4770      	bx	lr

08006bd4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006bd4:	b480      	push	{r7}
 8006bd6:	b083      	sub	sp, #12
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006bdc:	bf00      	nop
 8006bde:	370c      	adds	r7, #12
 8006be0:	46bd      	mov	sp, r7
 8006be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be6:	4770      	bx	lr

08006be8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006be8:	b480      	push	{r7}
 8006bea:	b083      	sub	sp, #12
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006bf0:	bf00      	nop
 8006bf2:	370c      	adds	r7, #12
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfa:	4770      	bx	lr

08006bfc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006bfc:	b480      	push	{r7}
 8006bfe:	b085      	sub	sp, #20
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
 8006c04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	4a40      	ldr	r2, [pc, #256]	; (8006d10 <TIM_Base_SetConfig+0x114>)
 8006c10:	4293      	cmp	r3, r2
 8006c12:	d013      	beq.n	8006c3c <TIM_Base_SetConfig+0x40>
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c1a:	d00f      	beq.n	8006c3c <TIM_Base_SetConfig+0x40>
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	4a3d      	ldr	r2, [pc, #244]	; (8006d14 <TIM_Base_SetConfig+0x118>)
 8006c20:	4293      	cmp	r3, r2
 8006c22:	d00b      	beq.n	8006c3c <TIM_Base_SetConfig+0x40>
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	4a3c      	ldr	r2, [pc, #240]	; (8006d18 <TIM_Base_SetConfig+0x11c>)
 8006c28:	4293      	cmp	r3, r2
 8006c2a:	d007      	beq.n	8006c3c <TIM_Base_SetConfig+0x40>
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	4a3b      	ldr	r2, [pc, #236]	; (8006d1c <TIM_Base_SetConfig+0x120>)
 8006c30:	4293      	cmp	r3, r2
 8006c32:	d003      	beq.n	8006c3c <TIM_Base_SetConfig+0x40>
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	4a3a      	ldr	r2, [pc, #232]	; (8006d20 <TIM_Base_SetConfig+0x124>)
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d108      	bne.n	8006c4e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	685b      	ldr	r3, [r3, #4]
 8006c48:	68fa      	ldr	r2, [r7, #12]
 8006c4a:	4313      	orrs	r3, r2
 8006c4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	4a2f      	ldr	r2, [pc, #188]	; (8006d10 <TIM_Base_SetConfig+0x114>)
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d02b      	beq.n	8006cae <TIM_Base_SetConfig+0xb2>
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c5c:	d027      	beq.n	8006cae <TIM_Base_SetConfig+0xb2>
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	4a2c      	ldr	r2, [pc, #176]	; (8006d14 <TIM_Base_SetConfig+0x118>)
 8006c62:	4293      	cmp	r3, r2
 8006c64:	d023      	beq.n	8006cae <TIM_Base_SetConfig+0xb2>
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	4a2b      	ldr	r2, [pc, #172]	; (8006d18 <TIM_Base_SetConfig+0x11c>)
 8006c6a:	4293      	cmp	r3, r2
 8006c6c:	d01f      	beq.n	8006cae <TIM_Base_SetConfig+0xb2>
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	4a2a      	ldr	r2, [pc, #168]	; (8006d1c <TIM_Base_SetConfig+0x120>)
 8006c72:	4293      	cmp	r3, r2
 8006c74:	d01b      	beq.n	8006cae <TIM_Base_SetConfig+0xb2>
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	4a29      	ldr	r2, [pc, #164]	; (8006d20 <TIM_Base_SetConfig+0x124>)
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	d017      	beq.n	8006cae <TIM_Base_SetConfig+0xb2>
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	4a28      	ldr	r2, [pc, #160]	; (8006d24 <TIM_Base_SetConfig+0x128>)
 8006c82:	4293      	cmp	r3, r2
 8006c84:	d013      	beq.n	8006cae <TIM_Base_SetConfig+0xb2>
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	4a27      	ldr	r2, [pc, #156]	; (8006d28 <TIM_Base_SetConfig+0x12c>)
 8006c8a:	4293      	cmp	r3, r2
 8006c8c:	d00f      	beq.n	8006cae <TIM_Base_SetConfig+0xb2>
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	4a26      	ldr	r2, [pc, #152]	; (8006d2c <TIM_Base_SetConfig+0x130>)
 8006c92:	4293      	cmp	r3, r2
 8006c94:	d00b      	beq.n	8006cae <TIM_Base_SetConfig+0xb2>
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	4a25      	ldr	r2, [pc, #148]	; (8006d30 <TIM_Base_SetConfig+0x134>)
 8006c9a:	4293      	cmp	r3, r2
 8006c9c:	d007      	beq.n	8006cae <TIM_Base_SetConfig+0xb2>
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	4a24      	ldr	r2, [pc, #144]	; (8006d34 <TIM_Base_SetConfig+0x138>)
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d003      	beq.n	8006cae <TIM_Base_SetConfig+0xb2>
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	4a23      	ldr	r2, [pc, #140]	; (8006d38 <TIM_Base_SetConfig+0x13c>)
 8006caa:	4293      	cmp	r3, r2
 8006cac:	d108      	bne.n	8006cc0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006cb4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006cb6:	683b      	ldr	r3, [r7, #0]
 8006cb8:	68db      	ldr	r3, [r3, #12]
 8006cba:	68fa      	ldr	r2, [r7, #12]
 8006cbc:	4313      	orrs	r3, r2
 8006cbe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	695b      	ldr	r3, [r3, #20]
 8006cca:	4313      	orrs	r3, r2
 8006ccc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	68fa      	ldr	r2, [r7, #12]
 8006cd2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	689a      	ldr	r2, [r3, #8]
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	681a      	ldr	r2, [r3, #0]
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	4a0a      	ldr	r2, [pc, #40]	; (8006d10 <TIM_Base_SetConfig+0x114>)
 8006ce8:	4293      	cmp	r3, r2
 8006cea:	d003      	beq.n	8006cf4 <TIM_Base_SetConfig+0xf8>
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	4a0c      	ldr	r2, [pc, #48]	; (8006d20 <TIM_Base_SetConfig+0x124>)
 8006cf0:	4293      	cmp	r3, r2
 8006cf2:	d103      	bne.n	8006cfc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	691a      	ldr	r2, [r3, #16]
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2201      	movs	r2, #1
 8006d00:	615a      	str	r2, [r3, #20]
}
 8006d02:	bf00      	nop
 8006d04:	3714      	adds	r7, #20
 8006d06:	46bd      	mov	sp, r7
 8006d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0c:	4770      	bx	lr
 8006d0e:	bf00      	nop
 8006d10:	40010000 	.word	0x40010000
 8006d14:	40000400 	.word	0x40000400
 8006d18:	40000800 	.word	0x40000800
 8006d1c:	40000c00 	.word	0x40000c00
 8006d20:	40010400 	.word	0x40010400
 8006d24:	40014000 	.word	0x40014000
 8006d28:	40014400 	.word	0x40014400
 8006d2c:	40014800 	.word	0x40014800
 8006d30:	40001800 	.word	0x40001800
 8006d34:	40001c00 	.word	0x40001c00
 8006d38:	40002000 	.word	0x40002000

08006d3c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b086      	sub	sp, #24
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
 8006d44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6a1b      	ldr	r3, [r3, #32]
 8006d4a:	f023 0201 	bic.w	r2, r3, #1
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6a1b      	ldr	r3, [r3, #32]
 8006d56:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	685b      	ldr	r3, [r3, #4]
 8006d5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	699b      	ldr	r3, [r3, #24]
 8006d62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006d64:	68fa      	ldr	r2, [r7, #12]
 8006d66:	4b3f      	ldr	r3, [pc, #252]	; (8006e64 <TIM_OC1_SetConfig+0x128>)
 8006d68:	4013      	ands	r3, r2
 8006d6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	f023 0303 	bic.w	r3, r3, #3
 8006d72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	68fa      	ldr	r2, [r7, #12]
 8006d7a:	4313      	orrs	r3, r2
 8006d7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006d7e:	697b      	ldr	r3, [r7, #20]
 8006d80:	f023 0302 	bic.w	r3, r3, #2
 8006d84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	689b      	ldr	r3, [r3, #8]
 8006d8a:	697a      	ldr	r2, [r7, #20]
 8006d8c:	4313      	orrs	r3, r2
 8006d8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	4a35      	ldr	r2, [pc, #212]	; (8006e68 <TIM_OC1_SetConfig+0x12c>)
 8006d94:	4293      	cmp	r3, r2
 8006d96:	d003      	beq.n	8006da0 <TIM_OC1_SetConfig+0x64>
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	4a34      	ldr	r2, [pc, #208]	; (8006e6c <TIM_OC1_SetConfig+0x130>)
 8006d9c:	4293      	cmp	r3, r2
 8006d9e:	d119      	bne.n	8006dd4 <TIM_OC1_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	68db      	ldr	r3, [r3, #12]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d008      	beq.n	8006dba <TIM_OC1_SetConfig+0x7e>
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	68db      	ldr	r3, [r3, #12]
 8006dac:	2b08      	cmp	r3, #8
 8006dae:	d004      	beq.n	8006dba <TIM_OC1_SetConfig+0x7e>
 8006db0:	f641 3167 	movw	r1, #7015	; 0x1b67
 8006db4:	482e      	ldr	r0, [pc, #184]	; (8006e70 <TIM_OC1_SetConfig+0x134>)
 8006db6:	f7fa fdba 	bl	800192e <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006dba:	697b      	ldr	r3, [r7, #20]
 8006dbc:	f023 0308 	bic.w	r3, r3, #8
 8006dc0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	68db      	ldr	r3, [r3, #12]
 8006dc6:	697a      	ldr	r2, [r7, #20]
 8006dc8:	4313      	orrs	r3, r2
 8006dca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006dcc:	697b      	ldr	r3, [r7, #20]
 8006dce:	f023 0304 	bic.w	r3, r3, #4
 8006dd2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	4a24      	ldr	r2, [pc, #144]	; (8006e68 <TIM_OC1_SetConfig+0x12c>)
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d003      	beq.n	8006de4 <TIM_OC1_SetConfig+0xa8>
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	4a23      	ldr	r2, [pc, #140]	; (8006e6c <TIM_OC1_SetConfig+0x130>)
 8006de0:	4293      	cmp	r3, r2
 8006de2:	d12d      	bne.n	8006e40 <TIM_OC1_SetConfig+0x104>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	699b      	ldr	r3, [r3, #24]
 8006de8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006dec:	d008      	beq.n	8006e00 <TIM_OC1_SetConfig+0xc4>
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	699b      	ldr	r3, [r3, #24]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d004      	beq.n	8006e00 <TIM_OC1_SetConfig+0xc4>
 8006df6:	f641 3174 	movw	r1, #7028	; 0x1b74
 8006dfa:	481d      	ldr	r0, [pc, #116]	; (8006e70 <TIM_OC1_SetConfig+0x134>)
 8006dfc:	f7fa fd97 	bl	800192e <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	695b      	ldr	r3, [r3, #20]
 8006e04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e08:	d008      	beq.n	8006e1c <TIM_OC1_SetConfig+0xe0>
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	695b      	ldr	r3, [r3, #20]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d004      	beq.n	8006e1c <TIM_OC1_SetConfig+0xe0>
 8006e12:	f641 3175 	movw	r1, #7029	; 0x1b75
 8006e16:	4816      	ldr	r0, [pc, #88]	; (8006e70 <TIM_OC1_SetConfig+0x134>)
 8006e18:	f7fa fd89 	bl	800192e <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006e1c:	693b      	ldr	r3, [r7, #16]
 8006e1e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e22:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006e24:	693b      	ldr	r3, [r7, #16]
 8006e26:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006e2a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	695b      	ldr	r3, [r3, #20]
 8006e30:	693a      	ldr	r2, [r7, #16]
 8006e32:	4313      	orrs	r3, r2
 8006e34:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	699b      	ldr	r3, [r3, #24]
 8006e3a:	693a      	ldr	r2, [r7, #16]
 8006e3c:	4313      	orrs	r3, r2
 8006e3e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	693a      	ldr	r2, [r7, #16]
 8006e44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	68fa      	ldr	r2, [r7, #12]
 8006e4a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	685a      	ldr	r2, [r3, #4]
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	697a      	ldr	r2, [r7, #20]
 8006e58:	621a      	str	r2, [r3, #32]
}
 8006e5a:	bf00      	nop
 8006e5c:	3718      	adds	r7, #24
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	bd80      	pop	{r7, pc}
 8006e62:	bf00      	nop
 8006e64:	fffeff8f 	.word	0xfffeff8f
 8006e68:	40010000 	.word	0x40010000
 8006e6c:	40010400 	.word	0x40010400
 8006e70:	08012cc4 	.word	0x08012cc4

08006e74 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b086      	sub	sp, #24
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
 8006e7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6a1b      	ldr	r3, [r3, #32]
 8006e82:	f023 0210 	bic.w	r2, r3, #16
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6a1b      	ldr	r3, [r3, #32]
 8006e8e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	685b      	ldr	r3, [r3, #4]
 8006e94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	699b      	ldr	r3, [r3, #24]
 8006e9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006e9c:	68fa      	ldr	r2, [r7, #12]
 8006e9e:	4b41      	ldr	r3, [pc, #260]	; (8006fa4 <TIM_OC2_SetConfig+0x130>)
 8006ea0:	4013      	ands	r3, r2
 8006ea2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006eaa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	021b      	lsls	r3, r3, #8
 8006eb2:	68fa      	ldr	r2, [r7, #12]
 8006eb4:	4313      	orrs	r3, r2
 8006eb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006eb8:	697b      	ldr	r3, [r7, #20]
 8006eba:	f023 0320 	bic.w	r3, r3, #32
 8006ebe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	689b      	ldr	r3, [r3, #8]
 8006ec4:	011b      	lsls	r3, r3, #4
 8006ec6:	697a      	ldr	r2, [r7, #20]
 8006ec8:	4313      	orrs	r3, r2
 8006eca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	4a36      	ldr	r2, [pc, #216]	; (8006fa8 <TIM_OC2_SetConfig+0x134>)
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	d003      	beq.n	8006edc <TIM_OC2_SetConfig+0x68>
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	4a35      	ldr	r2, [pc, #212]	; (8006fac <TIM_OC2_SetConfig+0x138>)
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d11a      	bne.n	8006f12 <TIM_OC2_SetConfig+0x9e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	68db      	ldr	r3, [r3, #12]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d008      	beq.n	8006ef6 <TIM_OC2_SetConfig+0x82>
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	68db      	ldr	r3, [r3, #12]
 8006ee8:	2b08      	cmp	r3, #8
 8006eea:	d004      	beq.n	8006ef6 <TIM_OC2_SetConfig+0x82>
 8006eec:	f641 31b2 	movw	r1, #7090	; 0x1bb2
 8006ef0:	482f      	ldr	r0, [pc, #188]	; (8006fb0 <TIM_OC2_SetConfig+0x13c>)
 8006ef2:	f7fa fd1c 	bl	800192e <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006ef6:	697b      	ldr	r3, [r7, #20]
 8006ef8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006efc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	68db      	ldr	r3, [r3, #12]
 8006f02:	011b      	lsls	r3, r3, #4
 8006f04:	697a      	ldr	r2, [r7, #20]
 8006f06:	4313      	orrs	r3, r2
 8006f08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006f0a:	697b      	ldr	r3, [r7, #20]
 8006f0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f10:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	4a24      	ldr	r2, [pc, #144]	; (8006fa8 <TIM_OC2_SetConfig+0x134>)
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d003      	beq.n	8006f22 <TIM_OC2_SetConfig+0xae>
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	4a23      	ldr	r2, [pc, #140]	; (8006fac <TIM_OC2_SetConfig+0x138>)
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d12f      	bne.n	8006f82 <TIM_OC2_SetConfig+0x10e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	699b      	ldr	r3, [r3, #24]
 8006f26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f2a:	d008      	beq.n	8006f3e <TIM_OC2_SetConfig+0xca>
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	699b      	ldr	r3, [r3, #24]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d004      	beq.n	8006f3e <TIM_OC2_SetConfig+0xca>
 8006f34:	f44f 51de 	mov.w	r1, #7104	; 0x1bc0
 8006f38:	481d      	ldr	r0, [pc, #116]	; (8006fb0 <TIM_OC2_SetConfig+0x13c>)
 8006f3a:	f7fa fcf8 	bl	800192e <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	695b      	ldr	r3, [r3, #20]
 8006f42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f46:	d008      	beq.n	8006f5a <TIM_OC2_SetConfig+0xe6>
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	695b      	ldr	r3, [r3, #20]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d004      	beq.n	8006f5a <TIM_OC2_SetConfig+0xe6>
 8006f50:	f641 31c1 	movw	r1, #7105	; 0x1bc1
 8006f54:	4816      	ldr	r0, [pc, #88]	; (8006fb0 <TIM_OC2_SetConfig+0x13c>)
 8006f56:	f7fa fcea 	bl	800192e <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006f5a:	693b      	ldr	r3, [r7, #16]
 8006f5c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006f60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006f62:	693b      	ldr	r3, [r7, #16]
 8006f64:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006f68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	695b      	ldr	r3, [r3, #20]
 8006f6e:	009b      	lsls	r3, r3, #2
 8006f70:	693a      	ldr	r2, [r7, #16]
 8006f72:	4313      	orrs	r3, r2
 8006f74:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	699b      	ldr	r3, [r3, #24]
 8006f7a:	009b      	lsls	r3, r3, #2
 8006f7c:	693a      	ldr	r2, [r7, #16]
 8006f7e:	4313      	orrs	r3, r2
 8006f80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	693a      	ldr	r2, [r7, #16]
 8006f86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	68fa      	ldr	r2, [r7, #12]
 8006f8c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	685a      	ldr	r2, [r3, #4]
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	697a      	ldr	r2, [r7, #20]
 8006f9a:	621a      	str	r2, [r3, #32]
}
 8006f9c:	bf00      	nop
 8006f9e:	3718      	adds	r7, #24
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	bd80      	pop	{r7, pc}
 8006fa4:	feff8fff 	.word	0xfeff8fff
 8006fa8:	40010000 	.word	0x40010000
 8006fac:	40010400 	.word	0x40010400
 8006fb0:	08012cc4 	.word	0x08012cc4

08006fb4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b086      	sub	sp, #24
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
 8006fbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	6a1b      	ldr	r3, [r3, #32]
 8006fc2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	6a1b      	ldr	r3, [r3, #32]
 8006fce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	685b      	ldr	r3, [r3, #4]
 8006fd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	69db      	ldr	r3, [r3, #28]
 8006fda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006fdc:	68fa      	ldr	r2, [r7, #12]
 8006fde:	4b41      	ldr	r3, [pc, #260]	; (80070e4 <TIM_OC3_SetConfig+0x130>)
 8006fe0:	4013      	ands	r3, r2
 8006fe2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	f023 0303 	bic.w	r3, r3, #3
 8006fea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	68fa      	ldr	r2, [r7, #12]
 8006ff2:	4313      	orrs	r3, r2
 8006ff4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006ff6:	697b      	ldr	r3, [r7, #20]
 8006ff8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006ffc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	689b      	ldr	r3, [r3, #8]
 8007002:	021b      	lsls	r3, r3, #8
 8007004:	697a      	ldr	r2, [r7, #20]
 8007006:	4313      	orrs	r3, r2
 8007008:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	4a36      	ldr	r2, [pc, #216]	; (80070e8 <TIM_OC3_SetConfig+0x134>)
 800700e:	4293      	cmp	r3, r2
 8007010:	d003      	beq.n	800701a <TIM_OC3_SetConfig+0x66>
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	4a35      	ldr	r2, [pc, #212]	; (80070ec <TIM_OC3_SetConfig+0x138>)
 8007016:	4293      	cmp	r3, r2
 8007018:	d11a      	bne.n	8007050 <TIM_OC3_SetConfig+0x9c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	68db      	ldr	r3, [r3, #12]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d008      	beq.n	8007034 <TIM_OC3_SetConfig+0x80>
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	68db      	ldr	r3, [r3, #12]
 8007026:	2b08      	cmp	r3, #8
 8007028:	d004      	beq.n	8007034 <TIM_OC3_SetConfig+0x80>
 800702a:	f641 31fd 	movw	r1, #7165	; 0x1bfd
 800702e:	4830      	ldr	r0, [pc, #192]	; (80070f0 <TIM_OC3_SetConfig+0x13c>)
 8007030:	f7fa fc7d 	bl	800192e <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007034:	697b      	ldr	r3, [r7, #20]
 8007036:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800703a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	68db      	ldr	r3, [r3, #12]
 8007040:	021b      	lsls	r3, r3, #8
 8007042:	697a      	ldr	r2, [r7, #20]
 8007044:	4313      	orrs	r3, r2
 8007046:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007048:	697b      	ldr	r3, [r7, #20]
 800704a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800704e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	4a25      	ldr	r2, [pc, #148]	; (80070e8 <TIM_OC3_SetConfig+0x134>)
 8007054:	4293      	cmp	r3, r2
 8007056:	d003      	beq.n	8007060 <TIM_OC3_SetConfig+0xac>
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	4a24      	ldr	r2, [pc, #144]	; (80070ec <TIM_OC3_SetConfig+0x138>)
 800705c:	4293      	cmp	r3, r2
 800705e:	d12f      	bne.n	80070c0 <TIM_OC3_SetConfig+0x10c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	699b      	ldr	r3, [r3, #24]
 8007064:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007068:	d008      	beq.n	800707c <TIM_OC3_SetConfig+0xc8>
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	699b      	ldr	r3, [r3, #24]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d004      	beq.n	800707c <TIM_OC3_SetConfig+0xc8>
 8007072:	f641 410a 	movw	r1, #7178	; 0x1c0a
 8007076:	481e      	ldr	r0, [pc, #120]	; (80070f0 <TIM_OC3_SetConfig+0x13c>)
 8007078:	f7fa fc59 	bl	800192e <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	695b      	ldr	r3, [r3, #20]
 8007080:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007084:	d008      	beq.n	8007098 <TIM_OC3_SetConfig+0xe4>
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	695b      	ldr	r3, [r3, #20]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d004      	beq.n	8007098 <TIM_OC3_SetConfig+0xe4>
 800708e:	f641 410b 	movw	r1, #7179	; 0x1c0b
 8007092:	4817      	ldr	r0, [pc, #92]	; (80070f0 <TIM_OC3_SetConfig+0x13c>)
 8007094:	f7fa fc4b 	bl	800192e <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007098:	693b      	ldr	r3, [r7, #16]
 800709a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800709e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80070a0:	693b      	ldr	r3, [r7, #16]
 80070a2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80070a6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	695b      	ldr	r3, [r3, #20]
 80070ac:	011b      	lsls	r3, r3, #4
 80070ae:	693a      	ldr	r2, [r7, #16]
 80070b0:	4313      	orrs	r3, r2
 80070b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	699b      	ldr	r3, [r3, #24]
 80070b8:	011b      	lsls	r3, r3, #4
 80070ba:	693a      	ldr	r2, [r7, #16]
 80070bc:	4313      	orrs	r3, r2
 80070be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	693a      	ldr	r2, [r7, #16]
 80070c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	68fa      	ldr	r2, [r7, #12]
 80070ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	685a      	ldr	r2, [r3, #4]
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	697a      	ldr	r2, [r7, #20]
 80070d8:	621a      	str	r2, [r3, #32]
}
 80070da:	bf00      	nop
 80070dc:	3718      	adds	r7, #24
 80070de:	46bd      	mov	sp, r7
 80070e0:	bd80      	pop	{r7, pc}
 80070e2:	bf00      	nop
 80070e4:	fffeff8f 	.word	0xfffeff8f
 80070e8:	40010000 	.word	0x40010000
 80070ec:	40010400 	.word	0x40010400
 80070f0:	08012cc4 	.word	0x08012cc4

080070f4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b086      	sub	sp, #24
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
 80070fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	6a1b      	ldr	r3, [r3, #32]
 8007102:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6a1b      	ldr	r3, [r3, #32]
 800710e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	685b      	ldr	r3, [r3, #4]
 8007114:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	69db      	ldr	r3, [r3, #28]
 800711a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800711c:	68fa      	ldr	r2, [r7, #12]
 800711e:	4b24      	ldr	r3, [pc, #144]	; (80071b0 <TIM_OC4_SetConfig+0xbc>)
 8007120:	4013      	ands	r3, r2
 8007122:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800712a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	021b      	lsls	r3, r3, #8
 8007132:	68fa      	ldr	r2, [r7, #12]
 8007134:	4313      	orrs	r3, r2
 8007136:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007138:	693b      	ldr	r3, [r7, #16]
 800713a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800713e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	689b      	ldr	r3, [r3, #8]
 8007144:	031b      	lsls	r3, r3, #12
 8007146:	693a      	ldr	r2, [r7, #16]
 8007148:	4313      	orrs	r3, r2
 800714a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	4a19      	ldr	r2, [pc, #100]	; (80071b4 <TIM_OC4_SetConfig+0xc0>)
 8007150:	4293      	cmp	r3, r2
 8007152:	d003      	beq.n	800715c <TIM_OC4_SetConfig+0x68>
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	4a18      	ldr	r2, [pc, #96]	; (80071b8 <TIM_OC4_SetConfig+0xc4>)
 8007158:	4293      	cmp	r3, r2
 800715a:	d117      	bne.n	800718c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	695b      	ldr	r3, [r3, #20]
 8007160:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007164:	d008      	beq.n	8007178 <TIM_OC4_SetConfig+0x84>
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	695b      	ldr	r3, [r3, #20]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d004      	beq.n	8007178 <TIM_OC4_SetConfig+0x84>
 800716e:	f641 4149 	movw	r1, #7241	; 0x1c49
 8007172:	4812      	ldr	r0, [pc, #72]	; (80071bc <TIM_OC4_SetConfig+0xc8>)
 8007174:	f7fa fbdb 	bl	800192e <assert_failed>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007178:	697b      	ldr	r3, [r7, #20]
 800717a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800717e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007180:	683b      	ldr	r3, [r7, #0]
 8007182:	695b      	ldr	r3, [r3, #20]
 8007184:	019b      	lsls	r3, r3, #6
 8007186:	697a      	ldr	r2, [r7, #20]
 8007188:	4313      	orrs	r3, r2
 800718a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	697a      	ldr	r2, [r7, #20]
 8007190:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	68fa      	ldr	r2, [r7, #12]
 8007196:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	685a      	ldr	r2, [r3, #4]
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	693a      	ldr	r2, [r7, #16]
 80071a4:	621a      	str	r2, [r3, #32]
}
 80071a6:	bf00      	nop
 80071a8:	3718      	adds	r7, #24
 80071aa:	46bd      	mov	sp, r7
 80071ac:	bd80      	pop	{r7, pc}
 80071ae:	bf00      	nop
 80071b0:	feff8fff 	.word	0xfeff8fff
 80071b4:	40010000 	.word	0x40010000
 80071b8:	40010400 	.word	0x40010400
 80071bc:	08012cc4 	.word	0x08012cc4

080071c0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80071c0:	b480      	push	{r7}
 80071c2:	b087      	sub	sp, #28
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
 80071c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6a1b      	ldr	r3, [r3, #32]
 80071ce:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6a1b      	ldr	r3, [r3, #32]
 80071da:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	685b      	ldr	r3, [r3, #4]
 80071e0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80071e8:	68fa      	ldr	r2, [r7, #12]
 80071ea:	4b1b      	ldr	r3, [pc, #108]	; (8007258 <TIM_OC5_SetConfig+0x98>)
 80071ec:	4013      	ands	r3, r2
 80071ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	68fa      	ldr	r2, [r7, #12]
 80071f6:	4313      	orrs	r3, r2
 80071f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80071fa:	693b      	ldr	r3, [r7, #16]
 80071fc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007200:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	689b      	ldr	r3, [r3, #8]
 8007206:	041b      	lsls	r3, r3, #16
 8007208:	693a      	ldr	r2, [r7, #16]
 800720a:	4313      	orrs	r3, r2
 800720c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	4a12      	ldr	r2, [pc, #72]	; (800725c <TIM_OC5_SetConfig+0x9c>)
 8007212:	4293      	cmp	r3, r2
 8007214:	d003      	beq.n	800721e <TIM_OC5_SetConfig+0x5e>
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	4a11      	ldr	r2, [pc, #68]	; (8007260 <TIM_OC5_SetConfig+0xa0>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d109      	bne.n	8007232 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800721e:	697b      	ldr	r3, [r7, #20]
 8007220:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007224:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	695b      	ldr	r3, [r3, #20]
 800722a:	021b      	lsls	r3, r3, #8
 800722c:	697a      	ldr	r2, [r7, #20]
 800722e:	4313      	orrs	r3, r2
 8007230:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	697a      	ldr	r2, [r7, #20]
 8007236:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	68fa      	ldr	r2, [r7, #12]
 800723c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	685a      	ldr	r2, [r3, #4]
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	693a      	ldr	r2, [r7, #16]
 800724a:	621a      	str	r2, [r3, #32]
}
 800724c:	bf00      	nop
 800724e:	371c      	adds	r7, #28
 8007250:	46bd      	mov	sp, r7
 8007252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007256:	4770      	bx	lr
 8007258:	fffeff8f 	.word	0xfffeff8f
 800725c:	40010000 	.word	0x40010000
 8007260:	40010400 	.word	0x40010400

08007264 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007264:	b480      	push	{r7}
 8007266:	b087      	sub	sp, #28
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
 800726c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	6a1b      	ldr	r3, [r3, #32]
 8007272:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	6a1b      	ldr	r3, [r3, #32]
 800727e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	685b      	ldr	r3, [r3, #4]
 8007284:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800728a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800728c:	68fa      	ldr	r2, [r7, #12]
 800728e:	4b1c      	ldr	r3, [pc, #112]	; (8007300 <TIM_OC6_SetConfig+0x9c>)
 8007290:	4013      	ands	r3, r2
 8007292:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	021b      	lsls	r3, r3, #8
 800729a:	68fa      	ldr	r2, [r7, #12]
 800729c:	4313      	orrs	r3, r2
 800729e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80072a0:	693b      	ldr	r3, [r7, #16]
 80072a2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80072a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	689b      	ldr	r3, [r3, #8]
 80072ac:	051b      	lsls	r3, r3, #20
 80072ae:	693a      	ldr	r2, [r7, #16]
 80072b0:	4313      	orrs	r3, r2
 80072b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	4a13      	ldr	r2, [pc, #76]	; (8007304 <TIM_OC6_SetConfig+0xa0>)
 80072b8:	4293      	cmp	r3, r2
 80072ba:	d003      	beq.n	80072c4 <TIM_OC6_SetConfig+0x60>
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	4a12      	ldr	r2, [pc, #72]	; (8007308 <TIM_OC6_SetConfig+0xa4>)
 80072c0:	4293      	cmp	r3, r2
 80072c2:	d109      	bne.n	80072d8 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80072c4:	697b      	ldr	r3, [r7, #20]
 80072c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80072ca:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	695b      	ldr	r3, [r3, #20]
 80072d0:	029b      	lsls	r3, r3, #10
 80072d2:	697a      	ldr	r2, [r7, #20]
 80072d4:	4313      	orrs	r3, r2
 80072d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	697a      	ldr	r2, [r7, #20]
 80072dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	68fa      	ldr	r2, [r7, #12]
 80072e2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80072e4:	683b      	ldr	r3, [r7, #0]
 80072e6:	685a      	ldr	r2, [r3, #4]
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	693a      	ldr	r2, [r7, #16]
 80072f0:	621a      	str	r2, [r3, #32]
}
 80072f2:	bf00      	nop
 80072f4:	371c      	adds	r7, #28
 80072f6:	46bd      	mov	sp, r7
 80072f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fc:	4770      	bx	lr
 80072fe:	bf00      	nop
 8007300:	feff8fff 	.word	0xfeff8fff
 8007304:	40010000 	.word	0x40010000
 8007308:	40010400 	.word	0x40010400

0800730c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800730c:	b480      	push	{r7}
 800730e:	b087      	sub	sp, #28
 8007310:	af00      	add	r7, sp, #0
 8007312:	60f8      	str	r0, [r7, #12]
 8007314:	60b9      	str	r1, [r7, #8]
 8007316:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	6a1b      	ldr	r3, [r3, #32]
 800731c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	6a1b      	ldr	r3, [r3, #32]
 8007322:	f023 0201 	bic.w	r2, r3, #1
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	699b      	ldr	r3, [r3, #24]
 800732e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007330:	693b      	ldr	r3, [r7, #16]
 8007332:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007336:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	011b      	lsls	r3, r3, #4
 800733c:	693a      	ldr	r2, [r7, #16]
 800733e:	4313      	orrs	r3, r2
 8007340:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007342:	697b      	ldr	r3, [r7, #20]
 8007344:	f023 030a 	bic.w	r3, r3, #10
 8007348:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800734a:	697a      	ldr	r2, [r7, #20]
 800734c:	68bb      	ldr	r3, [r7, #8]
 800734e:	4313      	orrs	r3, r2
 8007350:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	693a      	ldr	r2, [r7, #16]
 8007356:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	697a      	ldr	r2, [r7, #20]
 800735c:	621a      	str	r2, [r3, #32]
}
 800735e:	bf00      	nop
 8007360:	371c      	adds	r7, #28
 8007362:	46bd      	mov	sp, r7
 8007364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007368:	4770      	bx	lr

0800736a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800736a:	b480      	push	{r7}
 800736c:	b087      	sub	sp, #28
 800736e:	af00      	add	r7, sp, #0
 8007370:	60f8      	str	r0, [r7, #12]
 8007372:	60b9      	str	r1, [r7, #8]
 8007374:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	6a1b      	ldr	r3, [r3, #32]
 800737a:	f023 0210 	bic.w	r2, r3, #16
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	699b      	ldr	r3, [r3, #24]
 8007386:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	6a1b      	ldr	r3, [r3, #32]
 800738c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800738e:	697b      	ldr	r3, [r7, #20]
 8007390:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007394:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	031b      	lsls	r3, r3, #12
 800739a:	697a      	ldr	r2, [r7, #20]
 800739c:	4313      	orrs	r3, r2
 800739e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80073a0:	693b      	ldr	r3, [r7, #16]
 80073a2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80073a6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80073a8:	68bb      	ldr	r3, [r7, #8]
 80073aa:	011b      	lsls	r3, r3, #4
 80073ac:	693a      	ldr	r2, [r7, #16]
 80073ae:	4313      	orrs	r3, r2
 80073b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	697a      	ldr	r2, [r7, #20]
 80073b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	693a      	ldr	r2, [r7, #16]
 80073bc:	621a      	str	r2, [r3, #32]
}
 80073be:	bf00      	nop
 80073c0:	371c      	adds	r7, #28
 80073c2:	46bd      	mov	sp, r7
 80073c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c8:	4770      	bx	lr

080073ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80073ca:	b480      	push	{r7}
 80073cc:	b085      	sub	sp, #20
 80073ce:	af00      	add	r7, sp, #0
 80073d0:	6078      	str	r0, [r7, #4]
 80073d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	689b      	ldr	r3, [r3, #8]
 80073d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80073e2:	683a      	ldr	r2, [r7, #0]
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	4313      	orrs	r3, r2
 80073e8:	f043 0307 	orr.w	r3, r3, #7
 80073ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	68fa      	ldr	r2, [r7, #12]
 80073f2:	609a      	str	r2, [r3, #8]
}
 80073f4:	bf00      	nop
 80073f6:	3714      	adds	r7, #20
 80073f8:	46bd      	mov	sp, r7
 80073fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fe:	4770      	bx	lr

08007400 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007400:	b480      	push	{r7}
 8007402:	b087      	sub	sp, #28
 8007404:	af00      	add	r7, sp, #0
 8007406:	60f8      	str	r0, [r7, #12]
 8007408:	60b9      	str	r1, [r7, #8]
 800740a:	607a      	str	r2, [r7, #4]
 800740c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	689b      	ldr	r3, [r3, #8]
 8007412:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007414:	697b      	ldr	r3, [r7, #20]
 8007416:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800741a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	021a      	lsls	r2, r3, #8
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	431a      	orrs	r2, r3
 8007424:	68bb      	ldr	r3, [r7, #8]
 8007426:	4313      	orrs	r3, r2
 8007428:	697a      	ldr	r2, [r7, #20]
 800742a:	4313      	orrs	r3, r2
 800742c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	697a      	ldr	r2, [r7, #20]
 8007432:	609a      	str	r2, [r3, #8]
}
 8007434:	bf00      	nop
 8007436:	371c      	adds	r7, #28
 8007438:	46bd      	mov	sp, r7
 800743a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743e:	4770      	bx	lr

08007440 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007440:	b580      	push	{r7, lr}
 8007442:	b086      	sub	sp, #24
 8007444:	af00      	add	r7, sp, #0
 8007446:	60f8      	str	r0, [r7, #12]
 8007448:	60b9      	str	r1, [r7, #8]
 800744a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	4a35      	ldr	r2, [pc, #212]	; (8007524 <TIM_CCxChannelCmd+0xe4>)
 8007450:	4293      	cmp	r3, r2
 8007452:	d030      	beq.n	80074b6 <TIM_CCxChannelCmd+0x76>
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800745a:	d02c      	beq.n	80074b6 <TIM_CCxChannelCmd+0x76>
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	4a32      	ldr	r2, [pc, #200]	; (8007528 <TIM_CCxChannelCmd+0xe8>)
 8007460:	4293      	cmp	r3, r2
 8007462:	d028      	beq.n	80074b6 <TIM_CCxChannelCmd+0x76>
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	4a31      	ldr	r2, [pc, #196]	; (800752c <TIM_CCxChannelCmd+0xec>)
 8007468:	4293      	cmp	r3, r2
 800746a:	d024      	beq.n	80074b6 <TIM_CCxChannelCmd+0x76>
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	4a30      	ldr	r2, [pc, #192]	; (8007530 <TIM_CCxChannelCmd+0xf0>)
 8007470:	4293      	cmp	r3, r2
 8007472:	d020      	beq.n	80074b6 <TIM_CCxChannelCmd+0x76>
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	4a2f      	ldr	r2, [pc, #188]	; (8007534 <TIM_CCxChannelCmd+0xf4>)
 8007478:	4293      	cmp	r3, r2
 800747a:	d01c      	beq.n	80074b6 <TIM_CCxChannelCmd+0x76>
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	4a2e      	ldr	r2, [pc, #184]	; (8007538 <TIM_CCxChannelCmd+0xf8>)
 8007480:	4293      	cmp	r3, r2
 8007482:	d018      	beq.n	80074b6 <TIM_CCxChannelCmd+0x76>
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	4a2d      	ldr	r2, [pc, #180]	; (800753c <TIM_CCxChannelCmd+0xfc>)
 8007488:	4293      	cmp	r3, r2
 800748a:	d014      	beq.n	80074b6 <TIM_CCxChannelCmd+0x76>
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	4a2c      	ldr	r2, [pc, #176]	; (8007540 <TIM_CCxChannelCmd+0x100>)
 8007490:	4293      	cmp	r3, r2
 8007492:	d010      	beq.n	80074b6 <TIM_CCxChannelCmd+0x76>
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	4a2b      	ldr	r2, [pc, #172]	; (8007544 <TIM_CCxChannelCmd+0x104>)
 8007498:	4293      	cmp	r3, r2
 800749a:	d00c      	beq.n	80074b6 <TIM_CCxChannelCmd+0x76>
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	4a2a      	ldr	r2, [pc, #168]	; (8007548 <TIM_CCxChannelCmd+0x108>)
 80074a0:	4293      	cmp	r3, r2
 80074a2:	d008      	beq.n	80074b6 <TIM_CCxChannelCmd+0x76>
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	4a29      	ldr	r2, [pc, #164]	; (800754c <TIM_CCxChannelCmd+0x10c>)
 80074a8:	4293      	cmp	r3, r2
 80074aa:	d004      	beq.n	80074b6 <TIM_CCxChannelCmd+0x76>
 80074ac:	f641 61a1 	movw	r1, #7841	; 0x1ea1
 80074b0:	4827      	ldr	r0, [pc, #156]	; (8007550 <TIM_CCxChannelCmd+0x110>)
 80074b2:	f7fa fa3c 	bl	800192e <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 80074b6:	68bb      	ldr	r3, [r7, #8]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d016      	beq.n	80074ea <TIM_CCxChannelCmd+0xaa>
 80074bc:	68bb      	ldr	r3, [r7, #8]
 80074be:	2b04      	cmp	r3, #4
 80074c0:	d013      	beq.n	80074ea <TIM_CCxChannelCmd+0xaa>
 80074c2:	68bb      	ldr	r3, [r7, #8]
 80074c4:	2b08      	cmp	r3, #8
 80074c6:	d010      	beq.n	80074ea <TIM_CCxChannelCmd+0xaa>
 80074c8:	68bb      	ldr	r3, [r7, #8]
 80074ca:	2b0c      	cmp	r3, #12
 80074cc:	d00d      	beq.n	80074ea <TIM_CCxChannelCmd+0xaa>
 80074ce:	68bb      	ldr	r3, [r7, #8]
 80074d0:	2b10      	cmp	r3, #16
 80074d2:	d00a      	beq.n	80074ea <TIM_CCxChannelCmd+0xaa>
 80074d4:	68bb      	ldr	r3, [r7, #8]
 80074d6:	2b14      	cmp	r3, #20
 80074d8:	d007      	beq.n	80074ea <TIM_CCxChannelCmd+0xaa>
 80074da:	68bb      	ldr	r3, [r7, #8]
 80074dc:	2b3c      	cmp	r3, #60	; 0x3c
 80074de:	d004      	beq.n	80074ea <TIM_CCxChannelCmd+0xaa>
 80074e0:	f641 61a2 	movw	r1, #7842	; 0x1ea2
 80074e4:	481a      	ldr	r0, [pc, #104]	; (8007550 <TIM_CCxChannelCmd+0x110>)
 80074e6:	f7fa fa22 	bl	800192e <assert_failed>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80074ea:	68bb      	ldr	r3, [r7, #8]
 80074ec:	f003 031f 	and.w	r3, r3, #31
 80074f0:	2201      	movs	r2, #1
 80074f2:	fa02 f303 	lsl.w	r3, r2, r3
 80074f6:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	6a1a      	ldr	r2, [r3, #32]
 80074fc:	697b      	ldr	r3, [r7, #20]
 80074fe:	43db      	mvns	r3, r3
 8007500:	401a      	ands	r2, r3
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	6a1a      	ldr	r2, [r3, #32]
 800750a:	68bb      	ldr	r3, [r7, #8]
 800750c:	f003 031f 	and.w	r3, r3, #31
 8007510:	6879      	ldr	r1, [r7, #4]
 8007512:	fa01 f303 	lsl.w	r3, r1, r3
 8007516:	431a      	orrs	r2, r3
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	621a      	str	r2, [r3, #32]
}
 800751c:	bf00      	nop
 800751e:	3718      	adds	r7, #24
 8007520:	46bd      	mov	sp, r7
 8007522:	bd80      	pop	{r7, pc}
 8007524:	40010000 	.word	0x40010000
 8007528:	40000400 	.word	0x40000400
 800752c:	40000800 	.word	0x40000800
 8007530:	40000c00 	.word	0x40000c00
 8007534:	40010400 	.word	0x40010400
 8007538:	40014000 	.word	0x40014000
 800753c:	40014400 	.word	0x40014400
 8007540:	40014800 	.word	0x40014800
 8007544:	40001800 	.word	0x40001800
 8007548:	40001c00 	.word	0x40001c00
 800754c:	40002000 	.word	0x40002000
 8007550:	08012cc4 	.word	0x08012cc4

08007554 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b084      	sub	sp, #16
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
 800755c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	4a32      	ldr	r2, [pc, #200]	; (800762c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007564:	4293      	cmp	r3, r2
 8007566:	d027      	beq.n	80075b8 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007570:	d022      	beq.n	80075b8 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	4a2e      	ldr	r2, [pc, #184]	; (8007630 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007578:	4293      	cmp	r3, r2
 800757a:	d01d      	beq.n	80075b8 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	4a2c      	ldr	r2, [pc, #176]	; (8007634 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007582:	4293      	cmp	r3, r2
 8007584:	d018      	beq.n	80075b8 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	4a2b      	ldr	r2, [pc, #172]	; (8007638 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800758c:	4293      	cmp	r3, r2
 800758e:	d013      	beq.n	80075b8 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	4a29      	ldr	r2, [pc, #164]	; (800763c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007596:	4293      	cmp	r3, r2
 8007598:	d00e      	beq.n	80075b8 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	4a28      	ldr	r2, [pc, #160]	; (8007640 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80075a0:	4293      	cmp	r3, r2
 80075a2:	d009      	beq.n	80075b8 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	4a26      	ldr	r2, [pc, #152]	; (8007644 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80075aa:	4293      	cmp	r3, r2
 80075ac:	d004      	beq.n	80075b8 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80075ae:	f240 71b6 	movw	r1, #1974	; 0x7b6
 80075b2:	4825      	ldr	r0, [pc, #148]	; (8007648 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80075b4:	f7fa f9bb 	bl	800192e <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d020      	beq.n	8007602 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	2b10      	cmp	r3, #16
 80075c6:	d01c      	beq.n	8007602 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	2b20      	cmp	r3, #32
 80075ce:	d018      	beq.n	8007602 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	2b30      	cmp	r3, #48	; 0x30
 80075d6:	d014      	beq.n	8007602 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	2b40      	cmp	r3, #64	; 0x40
 80075de:	d010      	beq.n	8007602 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	2b50      	cmp	r3, #80	; 0x50
 80075e6:	d00c      	beq.n	8007602 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80075e8:	683b      	ldr	r3, [r7, #0]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	2b60      	cmp	r3, #96	; 0x60
 80075ee:	d008      	beq.n	8007602 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80075f0:	683b      	ldr	r3, [r7, #0]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	2b70      	cmp	r3, #112	; 0x70
 80075f6:	d004      	beq.n	8007602 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80075f8:	f240 71b7 	movw	r1, #1975	; 0x7b7
 80075fc:	4812      	ldr	r0, [pc, #72]	; (8007648 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80075fe:	f7fa f996 	bl	800192e <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	689b      	ldr	r3, [r3, #8]
 8007606:	2b80      	cmp	r3, #128	; 0x80
 8007608:	d008      	beq.n	800761c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	689b      	ldr	r3, [r3, #8]
 800760e:	2b00      	cmp	r3, #0
 8007610:	d004      	beq.n	800761c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007612:	f44f 61f7 	mov.w	r1, #1976	; 0x7b8
 8007616:	480c      	ldr	r0, [pc, #48]	; (8007648 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007618:	f7fa f989 	bl	800192e <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007622:	2b01      	cmp	r3, #1
 8007624:	d112      	bne.n	800764c <HAL_TIMEx_MasterConfigSynchronization+0xf8>
 8007626:	2302      	movs	r3, #2
 8007628:	e0d7      	b.n	80077da <HAL_TIMEx_MasterConfigSynchronization+0x286>
 800762a:	bf00      	nop
 800762c:	40010000 	.word	0x40010000
 8007630:	40000400 	.word	0x40000400
 8007634:	40000800 	.word	0x40000800
 8007638:	40000c00 	.word	0x40000c00
 800763c:	40001000 	.word	0x40001000
 8007640:	40001400 	.word	0x40001400
 8007644:	40010400 	.word	0x40010400
 8007648:	08012cfc 	.word	0x08012cfc
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2201      	movs	r2, #1
 8007650:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2202      	movs	r2, #2
 8007658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	685b      	ldr	r3, [r3, #4]
 8007662:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	689b      	ldr	r3, [r3, #8]
 800766a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	4a5c      	ldr	r2, [pc, #368]	; (80077e4 <HAL_TIMEx_MasterConfigSynchronization+0x290>)
 8007672:	4293      	cmp	r3, r2
 8007674:	d004      	beq.n	8007680 <HAL_TIMEx_MasterConfigSynchronization+0x12c>
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	4a5b      	ldr	r2, [pc, #364]	; (80077e8 <HAL_TIMEx_MasterConfigSynchronization+0x294>)
 800767c:	4293      	cmp	r3, r2
 800767e:	d161      	bne.n	8007744 <HAL_TIMEx_MasterConfigSynchronization+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	685b      	ldr	r3, [r3, #4]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d054      	beq.n	8007732 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	685b      	ldr	r3, [r3, #4]
 800768c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007690:	d04f      	beq.n	8007732 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	685b      	ldr	r3, [r3, #4]
 8007696:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800769a:	d04a      	beq.n	8007732 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	685b      	ldr	r3, [r3, #4]
 80076a0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80076a4:	d045      	beq.n	8007732 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	685b      	ldr	r3, [r3, #4]
 80076aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80076ae:	d040      	beq.n	8007732 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	685b      	ldr	r3, [r3, #4]
 80076b4:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 80076b8:	d03b      	beq.n	8007732 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 80076ba:	683b      	ldr	r3, [r7, #0]
 80076bc:	685b      	ldr	r3, [r3, #4]
 80076be:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80076c2:	d036      	beq.n	8007732 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	685b      	ldr	r3, [r3, #4]
 80076c8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80076cc:	d031      	beq.n	8007732 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	685b      	ldr	r3, [r3, #4]
 80076d2:	f5b3 0fe0 	cmp.w	r3, #7340032	; 0x700000
 80076d6:	d02c      	beq.n	8007732 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	685b      	ldr	r3, [r3, #4]
 80076dc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80076e0:	d027      	beq.n	8007732 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	685b      	ldr	r3, [r3, #4]
 80076e6:	f5b3 0f10 	cmp.w	r3, #9437184	; 0x900000
 80076ea:	d022      	beq.n	8007732 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	685b      	ldr	r3, [r3, #4]
 80076f0:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80076f4:	d01d      	beq.n	8007732 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	685b      	ldr	r3, [r3, #4]
 80076fa:	f5b3 0f30 	cmp.w	r3, #11534336	; 0xb00000
 80076fe:	d018      	beq.n	8007732 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	685b      	ldr	r3, [r3, #4]
 8007704:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007708:	d013      	beq.n	8007732 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	685b      	ldr	r3, [r3, #4]
 800770e:	f5b3 0f50 	cmp.w	r3, #13631488	; 0xd00000
 8007712:	d00e      	beq.n	8007732 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8007714:	683b      	ldr	r3, [r7, #0]
 8007716:	685b      	ldr	r3, [r3, #4]
 8007718:	f5b3 0f60 	cmp.w	r3, #14680064	; 0xe00000
 800771c:	d009      	beq.n	8007732 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	685b      	ldr	r3, [r3, #4]
 8007722:	f5b3 0f70 	cmp.w	r3, #15728640	; 0xf00000
 8007726:	d004      	beq.n	8007732 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8007728:	f240 71ca 	movw	r1, #1994	; 0x7ca
 800772c:	482f      	ldr	r0, [pc, #188]	; (80077ec <HAL_TIMEx_MasterConfigSynchronization+0x298>)
 800772e:	f7fa f8fe 	bl	800192e <assert_failed>

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007738:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	685b      	ldr	r3, [r3, #4]
 800773e:	68fa      	ldr	r2, [r7, #12]
 8007740:	4313      	orrs	r3, r2
 8007742:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800774a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800774c:	683b      	ldr	r3, [r7, #0]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	68fa      	ldr	r2, [r7, #12]
 8007752:	4313      	orrs	r3, r2
 8007754:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	68fa      	ldr	r2, [r7, #12]
 800775c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	4a20      	ldr	r2, [pc, #128]	; (80077e4 <HAL_TIMEx_MasterConfigSynchronization+0x290>)
 8007764:	4293      	cmp	r3, r2
 8007766:	d022      	beq.n	80077ae <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007770:	d01d      	beq.n	80077ae <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	4a1e      	ldr	r2, [pc, #120]	; (80077f0 <HAL_TIMEx_MasterConfigSynchronization+0x29c>)
 8007778:	4293      	cmp	r3, r2
 800777a:	d018      	beq.n	80077ae <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	4a1c      	ldr	r2, [pc, #112]	; (80077f4 <HAL_TIMEx_MasterConfigSynchronization+0x2a0>)
 8007782:	4293      	cmp	r3, r2
 8007784:	d013      	beq.n	80077ae <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	4a1b      	ldr	r2, [pc, #108]	; (80077f8 <HAL_TIMEx_MasterConfigSynchronization+0x2a4>)
 800778c:	4293      	cmp	r3, r2
 800778e:	d00e      	beq.n	80077ae <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	4a14      	ldr	r2, [pc, #80]	; (80077e8 <HAL_TIMEx_MasterConfigSynchronization+0x294>)
 8007796:	4293      	cmp	r3, r2
 8007798:	d009      	beq.n	80077ae <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	4a17      	ldr	r2, [pc, #92]	; (80077fc <HAL_TIMEx_MasterConfigSynchronization+0x2a8>)
 80077a0:	4293      	cmp	r3, r2
 80077a2:	d004      	beq.n	80077ae <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	4a15      	ldr	r2, [pc, #84]	; (8007800 <HAL_TIMEx_MasterConfigSynchronization+0x2ac>)
 80077aa:	4293      	cmp	r3, r2
 80077ac:	d10c      	bne.n	80077c8 <HAL_TIMEx_MasterConfigSynchronization+0x274>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80077ae:	68bb      	ldr	r3, [r7, #8]
 80077b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80077b4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80077b6:	683b      	ldr	r3, [r7, #0]
 80077b8:	689b      	ldr	r3, [r3, #8]
 80077ba:	68ba      	ldr	r2, [r7, #8]
 80077bc:	4313      	orrs	r3, r2
 80077be:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	68ba      	ldr	r2, [r7, #8]
 80077c6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2201      	movs	r2, #1
 80077cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2200      	movs	r2, #0
 80077d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80077d8:	2300      	movs	r3, #0
}
 80077da:	4618      	mov	r0, r3
 80077dc:	3710      	adds	r7, #16
 80077de:	46bd      	mov	sp, r7
 80077e0:	bd80      	pop	{r7, pc}
 80077e2:	bf00      	nop
 80077e4:	40010000 	.word	0x40010000
 80077e8:	40010400 	.word	0x40010400
 80077ec:	08012cfc 	.word	0x08012cfc
 80077f0:	40000400 	.word	0x40000400
 80077f4:	40000800 	.word	0x40000800
 80077f8:	40000c00 	.word	0x40000c00
 80077fc:	40014000 	.word	0x40014000
 8007800:	40001800 	.word	0x40001800

08007804 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007804:	b480      	push	{r7}
 8007806:	b083      	sub	sp, #12
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800780c:	bf00      	nop
 800780e:	370c      	adds	r7, #12
 8007810:	46bd      	mov	sp, r7
 8007812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007816:	4770      	bx	lr

08007818 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007818:	b480      	push	{r7}
 800781a:	b083      	sub	sp, #12
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007820:	bf00      	nop
 8007822:	370c      	adds	r7, #12
 8007824:	46bd      	mov	sp, r7
 8007826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782a:	4770      	bx	lr

0800782c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800782c:	b480      	push	{r7}
 800782e:	b083      	sub	sp, #12
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007834:	bf00      	nop
 8007836:	370c      	adds	r7, #12
 8007838:	46bd      	mov	sp, r7
 800783a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783e:	4770      	bx	lr

08007840 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b082      	sub	sp, #8
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d101      	bne.n	8007852 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800784e:	2301      	movs	r3, #1
 8007850:	e09f      	b.n	8007992 <HAL_UART_Init+0x152>
  }

  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	699b      	ldr	r3, [r3, #24]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d02d      	beq.n	80078b6 <HAL_UART_Init+0x76>
  {
    /* Check the parameters */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	4a4f      	ldr	r2, [pc, #316]	; (800799c <HAL_UART_Init+0x15c>)
 8007860:	4293      	cmp	r3, r2
 8007862:	d055      	beq.n	8007910 <HAL_UART_Init+0xd0>
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	4a4d      	ldr	r2, [pc, #308]	; (80079a0 <HAL_UART_Init+0x160>)
 800786a:	4293      	cmp	r3, r2
 800786c:	d050      	beq.n	8007910 <HAL_UART_Init+0xd0>
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	4a4c      	ldr	r2, [pc, #304]	; (80079a4 <HAL_UART_Init+0x164>)
 8007874:	4293      	cmp	r3, r2
 8007876:	d04b      	beq.n	8007910 <HAL_UART_Init+0xd0>
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	4a4a      	ldr	r2, [pc, #296]	; (80079a8 <HAL_UART_Init+0x168>)
 800787e:	4293      	cmp	r3, r2
 8007880:	d046      	beq.n	8007910 <HAL_UART_Init+0xd0>
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	4a49      	ldr	r2, [pc, #292]	; (80079ac <HAL_UART_Init+0x16c>)
 8007888:	4293      	cmp	r3, r2
 800788a:	d041      	beq.n	8007910 <HAL_UART_Init+0xd0>
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	4a47      	ldr	r2, [pc, #284]	; (80079b0 <HAL_UART_Init+0x170>)
 8007892:	4293      	cmp	r3, r2
 8007894:	d03c      	beq.n	8007910 <HAL_UART_Init+0xd0>
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	4a46      	ldr	r2, [pc, #280]	; (80079b4 <HAL_UART_Init+0x174>)
 800789c:	4293      	cmp	r3, r2
 800789e:	d037      	beq.n	8007910 <HAL_UART_Init+0xd0>
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	4a44      	ldr	r2, [pc, #272]	; (80079b8 <HAL_UART_Init+0x178>)
 80078a6:	4293      	cmp	r3, r2
 80078a8:	d032      	beq.n	8007910 <HAL_UART_Init+0xd0>
 80078aa:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80078ae:	4843      	ldr	r0, [pc, #268]	; (80079bc <HAL_UART_Init+0x17c>)
 80078b0:	f7fa f83d 	bl	800192e <assert_failed>
 80078b4:	e02c      	b.n	8007910 <HAL_UART_Init+0xd0>
  }
  else
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	4a38      	ldr	r2, [pc, #224]	; (800799c <HAL_UART_Init+0x15c>)
 80078bc:	4293      	cmp	r3, r2
 80078be:	d027      	beq.n	8007910 <HAL_UART_Init+0xd0>
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	4a36      	ldr	r2, [pc, #216]	; (80079a0 <HAL_UART_Init+0x160>)
 80078c6:	4293      	cmp	r3, r2
 80078c8:	d022      	beq.n	8007910 <HAL_UART_Init+0xd0>
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	4a35      	ldr	r2, [pc, #212]	; (80079a4 <HAL_UART_Init+0x164>)
 80078d0:	4293      	cmp	r3, r2
 80078d2:	d01d      	beq.n	8007910 <HAL_UART_Init+0xd0>
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	4a33      	ldr	r2, [pc, #204]	; (80079a8 <HAL_UART_Init+0x168>)
 80078da:	4293      	cmp	r3, r2
 80078dc:	d018      	beq.n	8007910 <HAL_UART_Init+0xd0>
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	4a32      	ldr	r2, [pc, #200]	; (80079ac <HAL_UART_Init+0x16c>)
 80078e4:	4293      	cmp	r3, r2
 80078e6:	d013      	beq.n	8007910 <HAL_UART_Init+0xd0>
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	4a30      	ldr	r2, [pc, #192]	; (80079b0 <HAL_UART_Init+0x170>)
 80078ee:	4293      	cmp	r3, r2
 80078f0:	d00e      	beq.n	8007910 <HAL_UART_Init+0xd0>
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	4a2f      	ldr	r2, [pc, #188]	; (80079b4 <HAL_UART_Init+0x174>)
 80078f8:	4293      	cmp	r3, r2
 80078fa:	d009      	beq.n	8007910 <HAL_UART_Init+0xd0>
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	4a2d      	ldr	r2, [pc, #180]	; (80079b8 <HAL_UART_Init+0x178>)
 8007902:	4293      	cmp	r3, r2
 8007904:	d004      	beq.n	8007910 <HAL_UART_Init+0xd0>
 8007906:	f240 1131 	movw	r1, #305	; 0x131
 800790a:	482c      	ldr	r0, [pc, #176]	; (80079bc <HAL_UART_Init+0x17c>)
 800790c:	f7fa f80f 	bl	800192e <assert_failed>
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007914:	2b00      	cmp	r3, #0
 8007916:	d106      	bne.n	8007926 <HAL_UART_Init+0xe6>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2200      	movs	r2, #0
 800791c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007920:	6878      	ldr	r0, [r7, #4]
 8007922:	f7fa fa9d 	bl	8001e60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	2224      	movs	r2, #36	; 0x24
 800792a:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	681a      	ldr	r2, [r3, #0]
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	f022 0201 	bic.w	r2, r2, #1
 800793a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800793c:	6878      	ldr	r0, [r7, #4]
 800793e:	f000 fbf9 	bl	8008134 <UART_SetConfig>
 8007942:	4603      	mov	r3, r0
 8007944:	2b01      	cmp	r3, #1
 8007946:	d101      	bne.n	800794c <HAL_UART_Init+0x10c>
  {
    return HAL_ERROR;
 8007948:	2301      	movs	r3, #1
 800794a:	e022      	b.n	8007992 <HAL_UART_Init+0x152>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007950:	2b00      	cmp	r3, #0
 8007952:	d002      	beq.n	800795a <HAL_UART_Init+0x11a>
  {
    UART_AdvFeatureConfig(huart);
 8007954:	6878      	ldr	r0, [r7, #4]
 8007956:	f000 fee3 	bl	8008720 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	685a      	ldr	r2, [r3, #4]
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007968:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	689a      	ldr	r2, [r3, #8]
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007978:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	681a      	ldr	r2, [r3, #0]
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	f042 0201 	orr.w	r2, r2, #1
 8007988:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800798a:	6878      	ldr	r0, [r7, #4]
 800798c:	f001 f820 	bl	80089d0 <UART_CheckIdleState>
 8007990:	4603      	mov	r3, r0
}
 8007992:	4618      	mov	r0, r3
 8007994:	3708      	adds	r7, #8
 8007996:	46bd      	mov	sp, r7
 8007998:	bd80      	pop	{r7, pc}
 800799a:	bf00      	nop
 800799c:	40011000 	.word	0x40011000
 80079a0:	40004400 	.word	0x40004400
 80079a4:	40004800 	.word	0x40004800
 80079a8:	40004c00 	.word	0x40004c00
 80079ac:	40005000 	.word	0x40005000
 80079b0:	40011400 	.word	0x40011400
 80079b4:	40007800 	.word	0x40007800
 80079b8:	40007c00 	.word	0x40007c00
 80079bc:	08012d38 	.word	0x08012d38

080079c0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b08a      	sub	sp, #40	; 0x28
 80079c4:	af02      	add	r7, sp, #8
 80079c6:	60f8      	str	r0, [r7, #12]
 80079c8:	60b9      	str	r1, [r7, #8]
 80079ca:	603b      	str	r3, [r7, #0]
 80079cc:	4613      	mov	r3, r2
 80079ce:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80079d4:	2b20      	cmp	r3, #32
 80079d6:	d171      	bne.n	8007abc <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80079d8:	68bb      	ldr	r3, [r7, #8]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d002      	beq.n	80079e4 <HAL_UART_Transmit+0x24>
 80079de:	88fb      	ldrh	r3, [r7, #6]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d101      	bne.n	80079e8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80079e4:	2301      	movs	r3, #1
 80079e6:	e06a      	b.n	8007abe <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	2200      	movs	r2, #0
 80079ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	2221      	movs	r2, #33	; 0x21
 80079f4:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80079f6:	f7fa fb2f 	bl	8002058 <HAL_GetTick>
 80079fa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	88fa      	ldrh	r2, [r7, #6]
 8007a00:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	88fa      	ldrh	r2, [r7, #6]
 8007a08:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	689b      	ldr	r3, [r3, #8]
 8007a10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a14:	d108      	bne.n	8007a28 <HAL_UART_Transmit+0x68>
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	691b      	ldr	r3, [r3, #16]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d104      	bne.n	8007a28 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8007a1e:	2300      	movs	r3, #0
 8007a20:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007a22:	68bb      	ldr	r3, [r7, #8]
 8007a24:	61bb      	str	r3, [r7, #24]
 8007a26:	e003      	b.n	8007a30 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8007a28:	68bb      	ldr	r3, [r7, #8]
 8007a2a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007a30:	e02c      	b.n	8007a8c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007a32:	683b      	ldr	r3, [r7, #0]
 8007a34:	9300      	str	r3, [sp, #0]
 8007a36:	697b      	ldr	r3, [r7, #20]
 8007a38:	2200      	movs	r2, #0
 8007a3a:	2180      	movs	r1, #128	; 0x80
 8007a3c:	68f8      	ldr	r0, [r7, #12]
 8007a3e:	f000 fffe 	bl	8008a3e <UART_WaitOnFlagUntilTimeout>
 8007a42:	4603      	mov	r3, r0
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d001      	beq.n	8007a4c <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8007a48:	2303      	movs	r3, #3
 8007a4a:	e038      	b.n	8007abe <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8007a4c:	69fb      	ldr	r3, [r7, #28]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d10b      	bne.n	8007a6a <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007a52:	69bb      	ldr	r3, [r7, #24]
 8007a54:	881b      	ldrh	r3, [r3, #0]
 8007a56:	461a      	mov	r2, r3
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007a60:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007a62:	69bb      	ldr	r3, [r7, #24]
 8007a64:	3302      	adds	r3, #2
 8007a66:	61bb      	str	r3, [r7, #24]
 8007a68:	e007      	b.n	8007a7a <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007a6a:	69fb      	ldr	r3, [r7, #28]
 8007a6c:	781a      	ldrb	r2, [r3, #0]
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007a74:	69fb      	ldr	r3, [r7, #28]
 8007a76:	3301      	adds	r3, #1
 8007a78:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007a80:	b29b      	uxth	r3, r3
 8007a82:	3b01      	subs	r3, #1
 8007a84:	b29a      	uxth	r2, r3
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007a92:	b29b      	uxth	r3, r3
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d1cc      	bne.n	8007a32 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	9300      	str	r3, [sp, #0]
 8007a9c:	697b      	ldr	r3, [r7, #20]
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	2140      	movs	r1, #64	; 0x40
 8007aa2:	68f8      	ldr	r0, [r7, #12]
 8007aa4:	f000 ffcb 	bl	8008a3e <UART_WaitOnFlagUntilTimeout>
 8007aa8:	4603      	mov	r3, r0
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d001      	beq.n	8007ab2 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8007aae:	2303      	movs	r3, #3
 8007ab0:	e005      	b.n	8007abe <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	2220      	movs	r2, #32
 8007ab6:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8007ab8:	2300      	movs	r3, #0
 8007aba:	e000      	b.n	8007abe <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8007abc:	2302      	movs	r3, #2
  }
}
 8007abe:	4618      	mov	r0, r3
 8007ac0:	3720      	adds	r7, #32
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	bd80      	pop	{r7, pc}

08007ac6 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007ac6:	b580      	push	{r7, lr}
 8007ac8:	b08a      	sub	sp, #40	; 0x28
 8007aca:	af00      	add	r7, sp, #0
 8007acc:	60f8      	str	r0, [r7, #12]
 8007ace:	60b9      	str	r1, [r7, #8]
 8007ad0:	4613      	mov	r3, r2
 8007ad2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007ada:	2b20      	cmp	r3, #32
 8007adc:	d132      	bne.n	8007b44 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007ade:	68bb      	ldr	r3, [r7, #8]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d002      	beq.n	8007aea <HAL_UART_Receive_IT+0x24>
 8007ae4:	88fb      	ldrh	r3, [r7, #6]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d101      	bne.n	8007aee <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007aea:	2301      	movs	r3, #1
 8007aec:	e02b      	b.n	8007b46 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	2200      	movs	r2, #0
 8007af2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	685b      	ldr	r3, [r3, #4]
 8007afa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d018      	beq.n	8007b34 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b08:	697b      	ldr	r3, [r7, #20]
 8007b0a:	e853 3f00 	ldrex	r3, [r3]
 8007b0e:	613b      	str	r3, [r7, #16]
   return(result);
 8007b10:	693b      	ldr	r3, [r7, #16]
 8007b12:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007b16:	627b      	str	r3, [r7, #36]	; 0x24
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	461a      	mov	r2, r3
 8007b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b20:	623b      	str	r3, [r7, #32]
 8007b22:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b24:	69f9      	ldr	r1, [r7, #28]
 8007b26:	6a3a      	ldr	r2, [r7, #32]
 8007b28:	e841 2300 	strex	r3, r2, [r1]
 8007b2c:	61bb      	str	r3, [r7, #24]
   return(result);
 8007b2e:	69bb      	ldr	r3, [r7, #24]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d1e6      	bne.n	8007b02 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007b34:	88fb      	ldrh	r3, [r7, #6]
 8007b36:	461a      	mov	r2, r3
 8007b38:	68b9      	ldr	r1, [r7, #8]
 8007b3a:	68f8      	ldr	r0, [r7, #12]
 8007b3c:	f001 f846 	bl	8008bcc <UART_Start_Receive_IT>
 8007b40:	4603      	mov	r3, r0
 8007b42:	e000      	b.n	8007b46 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8007b44:	2302      	movs	r3, #2
  }
}
 8007b46:	4618      	mov	r0, r3
 8007b48:	3728      	adds	r7, #40	; 0x28
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	bd80      	pop	{r7, pc}
	...

08007b50 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b0ba      	sub	sp, #232	; 0xe8
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	69db      	ldr	r3, [r3, #28]
 8007b5e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	689b      	ldr	r3, [r3, #8]
 8007b72:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007b76:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007b7a:	f640 030f 	movw	r3, #2063	; 0x80f
 8007b7e:	4013      	ands	r3, r2
 8007b80:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007b84:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d115      	bne.n	8007bb8 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007b8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b90:	f003 0320 	and.w	r3, r3, #32
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d00f      	beq.n	8007bb8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007b98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b9c:	f003 0320 	and.w	r3, r3, #32
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d009      	beq.n	8007bb8 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	f000 8297 	beq.w	80080dc <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007bb2:	6878      	ldr	r0, [r7, #4]
 8007bb4:	4798      	blx	r3
      }
      return;
 8007bb6:	e291      	b.n	80080dc <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007bb8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	f000 8117 	beq.w	8007df0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007bc2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007bc6:	f003 0301 	and.w	r3, r3, #1
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d106      	bne.n	8007bdc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8007bce:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007bd2:	4b85      	ldr	r3, [pc, #532]	; (8007de8 <HAL_UART_IRQHandler+0x298>)
 8007bd4:	4013      	ands	r3, r2
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	f000 810a 	beq.w	8007df0 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007bdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007be0:	f003 0301 	and.w	r3, r3, #1
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d011      	beq.n	8007c0c <HAL_UART_IRQHandler+0xbc>
 8007be8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007bec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d00b      	beq.n	8007c0c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	2201      	movs	r2, #1
 8007bfa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c02:	f043 0201 	orr.w	r2, r3, #1
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007c0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c10:	f003 0302 	and.w	r3, r3, #2
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d011      	beq.n	8007c3c <HAL_UART_IRQHandler+0xec>
 8007c18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007c1c:	f003 0301 	and.w	r3, r3, #1
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d00b      	beq.n	8007c3c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	2202      	movs	r2, #2
 8007c2a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c32:	f043 0204 	orr.w	r2, r3, #4
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007c3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c40:	f003 0304 	and.w	r3, r3, #4
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d011      	beq.n	8007c6c <HAL_UART_IRQHandler+0x11c>
 8007c48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007c4c:	f003 0301 	and.w	r3, r3, #1
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d00b      	beq.n	8007c6c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	2204      	movs	r2, #4
 8007c5a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c62:	f043 0202 	orr.w	r2, r3, #2
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007c6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c70:	f003 0308 	and.w	r3, r3, #8
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d017      	beq.n	8007ca8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007c78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c7c:	f003 0320 	and.w	r3, r3, #32
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d105      	bne.n	8007c90 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007c84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007c88:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d00b      	beq.n	8007ca8 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	2208      	movs	r2, #8
 8007c96:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c9e:	f043 0208 	orr.w	r2, r3, #8
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007ca8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007cac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d012      	beq.n	8007cda <HAL_UART_IRQHandler+0x18a>
 8007cb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007cb8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d00c      	beq.n	8007cda <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007cc8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007cd0:	f043 0220 	orr.w	r2, r3, #32
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	f000 81fd 	beq.w	80080e0 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007ce6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007cea:	f003 0320 	and.w	r3, r3, #32
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d00d      	beq.n	8007d0e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007cf2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007cf6:	f003 0320 	and.w	r3, r3, #32
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d007      	beq.n	8007d0e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d003      	beq.n	8007d0e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007d0a:	6878      	ldr	r0, [r7, #4]
 8007d0c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d14:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	689b      	ldr	r3, [r3, #8]
 8007d1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d22:	2b40      	cmp	r3, #64	; 0x40
 8007d24:	d005      	beq.n	8007d32 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007d26:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007d2a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d04f      	beq.n	8007dd2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007d32:	6878      	ldr	r0, [r7, #4]
 8007d34:	f001 f810 	bl	8008d58 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	689b      	ldr	r3, [r3, #8]
 8007d3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d42:	2b40      	cmp	r3, #64	; 0x40
 8007d44:	d141      	bne.n	8007dca <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	3308      	adds	r3, #8
 8007d4c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d50:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007d54:	e853 3f00 	ldrex	r3, [r3]
 8007d58:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007d5c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007d60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d64:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	3308      	adds	r3, #8
 8007d6e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007d72:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007d76:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d7a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007d7e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007d82:	e841 2300 	strex	r3, r2, [r1]
 8007d86:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007d8a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d1d9      	bne.n	8007d46 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d013      	beq.n	8007dc2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d9e:	4a13      	ldr	r2, [pc, #76]	; (8007dec <HAL_UART_IRQHandler+0x29c>)
 8007da0:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007da6:	4618      	mov	r0, r3
 8007da8:	f7fa fb36 	bl	8002418 <HAL_DMA_Abort_IT>
 8007dac:	4603      	mov	r3, r0
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d017      	beq.n	8007de2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007db6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007db8:	687a      	ldr	r2, [r7, #4]
 8007dba:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007dbc:	4610      	mov	r0, r2
 8007dbe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007dc0:	e00f      	b.n	8007de2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007dc2:	6878      	ldr	r0, [r7, #4]
 8007dc4:	f000 f9a0 	bl	8008108 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007dc8:	e00b      	b.n	8007de2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007dca:	6878      	ldr	r0, [r7, #4]
 8007dcc:	f000 f99c 	bl	8008108 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007dd0:	e007      	b.n	8007de2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007dd2:	6878      	ldr	r0, [r7, #4]
 8007dd4:	f000 f998 	bl	8008108 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	2200      	movs	r2, #0
 8007ddc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8007de0:	e17e      	b.n	80080e0 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007de2:	bf00      	nop
    return;
 8007de4:	e17c      	b.n	80080e0 <HAL_UART_IRQHandler+0x590>
 8007de6:	bf00      	nop
 8007de8:	04000120 	.word	0x04000120
 8007dec:	08008e21 	.word	0x08008e21

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007df4:	2b01      	cmp	r3, #1
 8007df6:	f040 814c 	bne.w	8008092 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007dfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007dfe:	f003 0310 	and.w	r3, r3, #16
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	f000 8145 	beq.w	8008092 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007e08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e0c:	f003 0310 	and.w	r3, r3, #16
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	f000 813e 	beq.w	8008092 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	2210      	movs	r2, #16
 8007e1c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	689b      	ldr	r3, [r3, #8]
 8007e24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e28:	2b40      	cmp	r3, #64	; 0x40
 8007e2a:	f040 80b6 	bne.w	8007f9a <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	685b      	ldr	r3, [r3, #4]
 8007e36:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007e3a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	f000 8150 	beq.w	80080e4 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007e4a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007e4e:	429a      	cmp	r2, r3
 8007e50:	f080 8148 	bcs.w	80080e4 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007e5a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e62:	69db      	ldr	r3, [r3, #28]
 8007e64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e68:	f000 8086 	beq.w	8007f78 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e74:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007e78:	e853 3f00 	ldrex	r3, [r3]
 8007e7c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007e80:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007e84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007e88:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	461a      	mov	r2, r3
 8007e92:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007e96:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007e9a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e9e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007ea2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007ea6:	e841 2300 	strex	r3, r2, [r1]
 8007eaa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007eae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d1da      	bne.n	8007e6c <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	3308      	adds	r3, #8
 8007ebc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ebe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007ec0:	e853 3f00 	ldrex	r3, [r3]
 8007ec4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007ec6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007ec8:	f023 0301 	bic.w	r3, r3, #1
 8007ecc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	3308      	adds	r3, #8
 8007ed6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007eda:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007ede:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ee0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007ee2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007ee6:	e841 2300 	strex	r3, r2, [r1]
 8007eea:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007eec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d1e1      	bne.n	8007eb6 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	3308      	adds	r3, #8
 8007ef8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007efa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007efc:	e853 3f00 	ldrex	r3, [r3]
 8007f00:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007f02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007f04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f08:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	3308      	adds	r3, #8
 8007f12:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007f16:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007f18:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f1a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007f1c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007f1e:	e841 2300 	strex	r3, r2, [r1]
 8007f22:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007f24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d1e3      	bne.n	8007ef2 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	2220      	movs	r2, #32
 8007f2e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	2200      	movs	r2, #0
 8007f36:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f40:	e853 3f00 	ldrex	r3, [r3]
 8007f44:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007f46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007f48:	f023 0310 	bic.w	r3, r3, #16
 8007f4c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	461a      	mov	r2, r3
 8007f56:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007f5a:	65bb      	str	r3, [r7, #88]	; 0x58
 8007f5c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f5e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007f60:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007f62:	e841 2300 	strex	r3, r2, [r1]
 8007f66:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007f68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d1e4      	bne.n	8007f38 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f72:	4618      	mov	r0, r3
 8007f74:	f7fa f9e0 	bl	8002338 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2202      	movs	r2, #2
 8007f7c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007f8a:	b29b      	uxth	r3, r3
 8007f8c:	1ad3      	subs	r3, r2, r3
 8007f8e:	b29b      	uxth	r3, r3
 8007f90:	4619      	mov	r1, r3
 8007f92:	6878      	ldr	r0, [r7, #4]
 8007f94:	f000 f8c2 	bl	800811c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007f98:	e0a4      	b.n	80080e4 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007fa6:	b29b      	uxth	r3, r3
 8007fa8:	1ad3      	subs	r3, r2, r3
 8007faa:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007fb4:	b29b      	uxth	r3, r3
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	f000 8096 	beq.w	80080e8 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8007fbc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	f000 8091 	beq.w	80080e8 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fce:	e853 3f00 	ldrex	r3, [r3]
 8007fd2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007fd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fd6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007fda:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	461a      	mov	r2, r3
 8007fe4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007fe8:	647b      	str	r3, [r7, #68]	; 0x44
 8007fea:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fec:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007fee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007ff0:	e841 2300 	strex	r3, r2, [r1]
 8007ff4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007ff6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d1e4      	bne.n	8007fc6 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	3308      	adds	r3, #8
 8008002:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008006:	e853 3f00 	ldrex	r3, [r3]
 800800a:	623b      	str	r3, [r7, #32]
   return(result);
 800800c:	6a3b      	ldr	r3, [r7, #32]
 800800e:	f023 0301 	bic.w	r3, r3, #1
 8008012:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	3308      	adds	r3, #8
 800801c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008020:	633a      	str	r2, [r7, #48]	; 0x30
 8008022:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008024:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008026:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008028:	e841 2300 	strex	r3, r2, [r1]
 800802c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800802e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008030:	2b00      	cmp	r3, #0
 8008032:	d1e3      	bne.n	8007ffc <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2220      	movs	r2, #32
 8008038:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2200      	movs	r2, #0
 8008040:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	2200      	movs	r2, #0
 8008046:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800804e:	693b      	ldr	r3, [r7, #16]
 8008050:	e853 3f00 	ldrex	r3, [r3]
 8008054:	60fb      	str	r3, [r7, #12]
   return(result);
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	f023 0310 	bic.w	r3, r3, #16
 800805c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	461a      	mov	r2, r3
 8008066:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800806a:	61fb      	str	r3, [r7, #28]
 800806c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800806e:	69b9      	ldr	r1, [r7, #24]
 8008070:	69fa      	ldr	r2, [r7, #28]
 8008072:	e841 2300 	strex	r3, r2, [r1]
 8008076:	617b      	str	r3, [r7, #20]
   return(result);
 8008078:	697b      	ldr	r3, [r7, #20]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d1e4      	bne.n	8008048 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	2202      	movs	r2, #2
 8008082:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008084:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008088:	4619      	mov	r1, r3
 800808a:	6878      	ldr	r0, [r7, #4]
 800808c:	f000 f846 	bl	800811c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008090:	e02a      	b.n	80080e8 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8008092:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008096:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800809a:	2b00      	cmp	r3, #0
 800809c:	d00e      	beq.n	80080bc <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800809e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80080a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d008      	beq.n	80080bc <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d01c      	beq.n	80080ec <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80080b6:	6878      	ldr	r0, [r7, #4]
 80080b8:	4798      	blx	r3
    }
    return;
 80080ba:	e017      	b.n	80080ec <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80080bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d012      	beq.n	80080ee <HAL_UART_IRQHandler+0x59e>
 80080c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80080cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d00c      	beq.n	80080ee <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 80080d4:	6878      	ldr	r0, [r7, #4]
 80080d6:	f000 feb9 	bl	8008e4c <UART_EndTransmit_IT>
    return;
 80080da:	e008      	b.n	80080ee <HAL_UART_IRQHandler+0x59e>
      return;
 80080dc:	bf00      	nop
 80080de:	e006      	b.n	80080ee <HAL_UART_IRQHandler+0x59e>
    return;
 80080e0:	bf00      	nop
 80080e2:	e004      	b.n	80080ee <HAL_UART_IRQHandler+0x59e>
      return;
 80080e4:	bf00      	nop
 80080e6:	e002      	b.n	80080ee <HAL_UART_IRQHandler+0x59e>
      return;
 80080e8:	bf00      	nop
 80080ea:	e000      	b.n	80080ee <HAL_UART_IRQHandler+0x59e>
    return;
 80080ec:	bf00      	nop
  }

}
 80080ee:	37e8      	adds	r7, #232	; 0xe8
 80080f0:	46bd      	mov	sp, r7
 80080f2:	bd80      	pop	{r7, pc}

080080f4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80080f4:	b480      	push	{r7}
 80080f6:	b083      	sub	sp, #12
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80080fc:	bf00      	nop
 80080fe:	370c      	adds	r7, #12
 8008100:	46bd      	mov	sp, r7
 8008102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008106:	4770      	bx	lr

08008108 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008108:	b480      	push	{r7}
 800810a:	b083      	sub	sp, #12
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008110:	bf00      	nop
 8008112:	370c      	adds	r7, #12
 8008114:	46bd      	mov	sp, r7
 8008116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811a:	4770      	bx	lr

0800811c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800811c:	b480      	push	{r7}
 800811e:	b083      	sub	sp, #12
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
 8008124:	460b      	mov	r3, r1
 8008126:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008128:	bf00      	nop
 800812a:	370c      	adds	r7, #12
 800812c:	46bd      	mov	sp, r7
 800812e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008132:	4770      	bx	lr

08008134 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008134:	b580      	push	{r7, lr}
 8008136:	b088      	sub	sp, #32
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800813c:	2300      	movs	r3, #0
 800813e:	77bb      	strb	r3, [r7, #30]
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	685b      	ldr	r3, [r3, #4]
 8008144:	4aa0      	ldr	r2, [pc, #640]	; (80083c8 <UART_SetConfig+0x294>)
 8008146:	4293      	cmp	r3, r2
 8008148:	d904      	bls.n	8008154 <UART_SetConfig+0x20>
 800814a:	f640 315d 	movw	r1, #2909	; 0xb5d
 800814e:	489f      	ldr	r0, [pc, #636]	; (80083cc <UART_SetConfig+0x298>)
 8008150:	f7f9 fbed 	bl	800192e <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	689b      	ldr	r3, [r3, #8]
 8008158:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800815c:	d00d      	beq.n	800817a <UART_SetConfig+0x46>
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	689b      	ldr	r3, [r3, #8]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d009      	beq.n	800817a <UART_SetConfig+0x46>
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	689b      	ldr	r3, [r3, #8]
 800816a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800816e:	d004      	beq.n	800817a <UART_SetConfig+0x46>
 8008170:	f640 315e 	movw	r1, #2910	; 0xb5e
 8008174:	4895      	ldr	r0, [pc, #596]	; (80083cc <UART_SetConfig+0x298>)
 8008176:	f7f9 fbda 	bl	800192e <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	68db      	ldr	r3, [r3, #12]
 800817e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008182:	d012      	beq.n	80081aa <UART_SetConfig+0x76>
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	68db      	ldr	r3, [r3, #12]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d00e      	beq.n	80081aa <UART_SetConfig+0x76>
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	68db      	ldr	r3, [r3, #12]
 8008190:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008194:	d009      	beq.n	80081aa <UART_SetConfig+0x76>
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	68db      	ldr	r3, [r3, #12]
 800819a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800819e:	d004      	beq.n	80081aa <UART_SetConfig+0x76>
 80081a0:	f640 315f 	movw	r1, #2911	; 0xb5f
 80081a4:	4889      	ldr	r0, [pc, #548]	; (80083cc <UART_SetConfig+0x298>)
 80081a6:	f7f9 fbc2 	bl	800192e <assert_failed>
  assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	6a1b      	ldr	r3, [r3, #32]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d009      	beq.n	80081c6 <UART_SetConfig+0x92>
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	6a1b      	ldr	r3, [r3, #32]
 80081b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80081ba:	d004      	beq.n	80081c6 <UART_SetConfig+0x92>
 80081bc:	f44f 6136 	mov.w	r1, #2912	; 0xb60
 80081c0:	4882      	ldr	r0, [pc, #520]	; (80083cc <UART_SetConfig+0x298>)
 80081c2:	f7f9 fbb4 	bl	800192e <assert_failed>

  assert_param(IS_UART_PARITY(huart->Init.Parity));
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	691b      	ldr	r3, [r3, #16]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d00e      	beq.n	80081ec <UART_SetConfig+0xb8>
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	691b      	ldr	r3, [r3, #16]
 80081d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80081d6:	d009      	beq.n	80081ec <UART_SetConfig+0xb8>
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	691b      	ldr	r3, [r3, #16]
 80081dc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80081e0:	d004      	beq.n	80081ec <UART_SetConfig+0xb8>
 80081e2:	f640 3162 	movw	r1, #2914	; 0xb62
 80081e6:	4879      	ldr	r0, [pc, #484]	; (80083cc <UART_SetConfig+0x298>)
 80081e8:	f7f9 fba1 	bl	800192e <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	695b      	ldr	r3, [r3, #20]
 80081f0:	f023 030c 	bic.w	r3, r3, #12
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d103      	bne.n	8008200 <UART_SetConfig+0xcc>
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	695b      	ldr	r3, [r3, #20]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d104      	bne.n	800820a <UART_SetConfig+0xd6>
 8008200:	f640 3163 	movw	r1, #2915	; 0xb63
 8008204:	4871      	ldr	r0, [pc, #452]	; (80083cc <UART_SetConfig+0x298>)
 8008206:	f7f9 fb92 	bl	800192e <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	699b      	ldr	r3, [r3, #24]
 800820e:	2b00      	cmp	r3, #0
 8008210:	d013      	beq.n	800823a <UART_SetConfig+0x106>
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	699b      	ldr	r3, [r3, #24]
 8008216:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800821a:	d00e      	beq.n	800823a <UART_SetConfig+0x106>
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	699b      	ldr	r3, [r3, #24]
 8008220:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008224:	d009      	beq.n	800823a <UART_SetConfig+0x106>
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	699b      	ldr	r3, [r3, #24]
 800822a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800822e:	d004      	beq.n	800823a <UART_SetConfig+0x106>
 8008230:	f640 3164 	movw	r1, #2916	; 0xb64
 8008234:	4865      	ldr	r0, [pc, #404]	; (80083cc <UART_SetConfig+0x298>)
 8008236:	f7f9 fb7a 	bl	800192e <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	69db      	ldr	r3, [r3, #28]
 800823e:	2b00      	cmp	r3, #0
 8008240:	d009      	beq.n	8008256 <UART_SetConfig+0x122>
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	69db      	ldr	r3, [r3, #28]
 8008246:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800824a:	d004      	beq.n	8008256 <UART_SetConfig+0x122>
 800824c:	f640 3165 	movw	r1, #2917	; 0xb65
 8008250:	485e      	ldr	r0, [pc, #376]	; (80083cc <UART_SetConfig+0x298>)
 8008252:	f7f9 fb6c 	bl	800192e <assert_failed>
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	689a      	ldr	r2, [r3, #8]
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	691b      	ldr	r3, [r3, #16]
 800825e:	431a      	orrs	r2, r3
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	695b      	ldr	r3, [r3, #20]
 8008264:	431a      	orrs	r2, r3
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	69db      	ldr	r3, [r3, #28]
 800826a:	4313      	orrs	r3, r2
 800826c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	681a      	ldr	r2, [r3, #0]
 8008274:	4b56      	ldr	r3, [pc, #344]	; (80083d0 <UART_SetConfig+0x29c>)
 8008276:	4013      	ands	r3, r2
 8008278:	687a      	ldr	r2, [r7, #4]
 800827a:	6812      	ldr	r2, [r2, #0]
 800827c:	6979      	ldr	r1, [r7, #20]
 800827e:	430b      	orrs	r3, r1
 8008280:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	685b      	ldr	r3, [r3, #4]
 8008288:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	68da      	ldr	r2, [r3, #12]
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	430a      	orrs	r2, r1
 8008296:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	699b      	ldr	r3, [r3, #24]
 800829c:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	6a1b      	ldr	r3, [r3, #32]
 80082a2:	697a      	ldr	r2, [r7, #20]
 80082a4:	4313      	orrs	r3, r2
 80082a6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	689b      	ldr	r3, [r3, #8]
 80082ae:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	697a      	ldr	r2, [r7, #20]
 80082b8:	430a      	orrs	r2, r1
 80082ba:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	4a44      	ldr	r2, [pc, #272]	; (80083d4 <UART_SetConfig+0x2a0>)
 80082c2:	4293      	cmp	r3, r2
 80082c4:	d121      	bne.n	800830a <UART_SetConfig+0x1d6>
 80082c6:	4b44      	ldr	r3, [pc, #272]	; (80083d8 <UART_SetConfig+0x2a4>)
 80082c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082cc:	f003 0303 	and.w	r3, r3, #3
 80082d0:	2b03      	cmp	r3, #3
 80082d2:	d817      	bhi.n	8008304 <UART_SetConfig+0x1d0>
 80082d4:	a201      	add	r2, pc, #4	; (adr r2, 80082dc <UART_SetConfig+0x1a8>)
 80082d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082da:	bf00      	nop
 80082dc:	080082ed 	.word	0x080082ed
 80082e0:	080082f9 	.word	0x080082f9
 80082e4:	080082f3 	.word	0x080082f3
 80082e8:	080082ff 	.word	0x080082ff
 80082ec:	2301      	movs	r3, #1
 80082ee:	77fb      	strb	r3, [r7, #31]
 80082f0:	e14c      	b.n	800858c <UART_SetConfig+0x458>
 80082f2:	2302      	movs	r3, #2
 80082f4:	77fb      	strb	r3, [r7, #31]
 80082f6:	e149      	b.n	800858c <UART_SetConfig+0x458>
 80082f8:	2304      	movs	r3, #4
 80082fa:	77fb      	strb	r3, [r7, #31]
 80082fc:	e146      	b.n	800858c <UART_SetConfig+0x458>
 80082fe:	2308      	movs	r3, #8
 8008300:	77fb      	strb	r3, [r7, #31]
 8008302:	e143      	b.n	800858c <UART_SetConfig+0x458>
 8008304:	2310      	movs	r3, #16
 8008306:	77fb      	strb	r3, [r7, #31]
 8008308:	e140      	b.n	800858c <UART_SetConfig+0x458>
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	4a33      	ldr	r2, [pc, #204]	; (80083dc <UART_SetConfig+0x2a8>)
 8008310:	4293      	cmp	r3, r2
 8008312:	d132      	bne.n	800837a <UART_SetConfig+0x246>
 8008314:	4b30      	ldr	r3, [pc, #192]	; (80083d8 <UART_SetConfig+0x2a4>)
 8008316:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800831a:	f003 030c 	and.w	r3, r3, #12
 800831e:	2b0c      	cmp	r3, #12
 8008320:	d828      	bhi.n	8008374 <UART_SetConfig+0x240>
 8008322:	a201      	add	r2, pc, #4	; (adr r2, 8008328 <UART_SetConfig+0x1f4>)
 8008324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008328:	0800835d 	.word	0x0800835d
 800832c:	08008375 	.word	0x08008375
 8008330:	08008375 	.word	0x08008375
 8008334:	08008375 	.word	0x08008375
 8008338:	08008369 	.word	0x08008369
 800833c:	08008375 	.word	0x08008375
 8008340:	08008375 	.word	0x08008375
 8008344:	08008375 	.word	0x08008375
 8008348:	08008363 	.word	0x08008363
 800834c:	08008375 	.word	0x08008375
 8008350:	08008375 	.word	0x08008375
 8008354:	08008375 	.word	0x08008375
 8008358:	0800836f 	.word	0x0800836f
 800835c:	2300      	movs	r3, #0
 800835e:	77fb      	strb	r3, [r7, #31]
 8008360:	e114      	b.n	800858c <UART_SetConfig+0x458>
 8008362:	2302      	movs	r3, #2
 8008364:	77fb      	strb	r3, [r7, #31]
 8008366:	e111      	b.n	800858c <UART_SetConfig+0x458>
 8008368:	2304      	movs	r3, #4
 800836a:	77fb      	strb	r3, [r7, #31]
 800836c:	e10e      	b.n	800858c <UART_SetConfig+0x458>
 800836e:	2308      	movs	r3, #8
 8008370:	77fb      	strb	r3, [r7, #31]
 8008372:	e10b      	b.n	800858c <UART_SetConfig+0x458>
 8008374:	2310      	movs	r3, #16
 8008376:	77fb      	strb	r3, [r7, #31]
 8008378:	e108      	b.n	800858c <UART_SetConfig+0x458>
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	4a18      	ldr	r2, [pc, #96]	; (80083e0 <UART_SetConfig+0x2ac>)
 8008380:	4293      	cmp	r3, r2
 8008382:	d12f      	bne.n	80083e4 <UART_SetConfig+0x2b0>
 8008384:	4b14      	ldr	r3, [pc, #80]	; (80083d8 <UART_SetConfig+0x2a4>)
 8008386:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800838a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800838e:	2b30      	cmp	r3, #48	; 0x30
 8008390:	d013      	beq.n	80083ba <UART_SetConfig+0x286>
 8008392:	2b30      	cmp	r3, #48	; 0x30
 8008394:	d814      	bhi.n	80083c0 <UART_SetConfig+0x28c>
 8008396:	2b20      	cmp	r3, #32
 8008398:	d009      	beq.n	80083ae <UART_SetConfig+0x27a>
 800839a:	2b20      	cmp	r3, #32
 800839c:	d810      	bhi.n	80083c0 <UART_SetConfig+0x28c>
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d002      	beq.n	80083a8 <UART_SetConfig+0x274>
 80083a2:	2b10      	cmp	r3, #16
 80083a4:	d006      	beq.n	80083b4 <UART_SetConfig+0x280>
 80083a6:	e00b      	b.n	80083c0 <UART_SetConfig+0x28c>
 80083a8:	2300      	movs	r3, #0
 80083aa:	77fb      	strb	r3, [r7, #31]
 80083ac:	e0ee      	b.n	800858c <UART_SetConfig+0x458>
 80083ae:	2302      	movs	r3, #2
 80083b0:	77fb      	strb	r3, [r7, #31]
 80083b2:	e0eb      	b.n	800858c <UART_SetConfig+0x458>
 80083b4:	2304      	movs	r3, #4
 80083b6:	77fb      	strb	r3, [r7, #31]
 80083b8:	e0e8      	b.n	800858c <UART_SetConfig+0x458>
 80083ba:	2308      	movs	r3, #8
 80083bc:	77fb      	strb	r3, [r7, #31]
 80083be:	e0e5      	b.n	800858c <UART_SetConfig+0x458>
 80083c0:	2310      	movs	r3, #16
 80083c2:	77fb      	strb	r3, [r7, #31]
 80083c4:	e0e2      	b.n	800858c <UART_SetConfig+0x458>
 80083c6:	bf00      	nop
 80083c8:	019bfcc0 	.word	0x019bfcc0
 80083cc:	08012d38 	.word	0x08012d38
 80083d0:	efff69f3 	.word	0xefff69f3
 80083d4:	40011000 	.word	0x40011000
 80083d8:	40023800 	.word	0x40023800
 80083dc:	40004400 	.word	0x40004400
 80083e0:	40004800 	.word	0x40004800
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	4aa5      	ldr	r2, [pc, #660]	; (8008680 <UART_SetConfig+0x54c>)
 80083ea:	4293      	cmp	r3, r2
 80083ec:	d120      	bne.n	8008430 <UART_SetConfig+0x2fc>
 80083ee:	4ba5      	ldr	r3, [pc, #660]	; (8008684 <UART_SetConfig+0x550>)
 80083f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80083f4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80083f8:	2bc0      	cmp	r3, #192	; 0xc0
 80083fa:	d013      	beq.n	8008424 <UART_SetConfig+0x2f0>
 80083fc:	2bc0      	cmp	r3, #192	; 0xc0
 80083fe:	d814      	bhi.n	800842a <UART_SetConfig+0x2f6>
 8008400:	2b80      	cmp	r3, #128	; 0x80
 8008402:	d009      	beq.n	8008418 <UART_SetConfig+0x2e4>
 8008404:	2b80      	cmp	r3, #128	; 0x80
 8008406:	d810      	bhi.n	800842a <UART_SetConfig+0x2f6>
 8008408:	2b00      	cmp	r3, #0
 800840a:	d002      	beq.n	8008412 <UART_SetConfig+0x2de>
 800840c:	2b40      	cmp	r3, #64	; 0x40
 800840e:	d006      	beq.n	800841e <UART_SetConfig+0x2ea>
 8008410:	e00b      	b.n	800842a <UART_SetConfig+0x2f6>
 8008412:	2300      	movs	r3, #0
 8008414:	77fb      	strb	r3, [r7, #31]
 8008416:	e0b9      	b.n	800858c <UART_SetConfig+0x458>
 8008418:	2302      	movs	r3, #2
 800841a:	77fb      	strb	r3, [r7, #31]
 800841c:	e0b6      	b.n	800858c <UART_SetConfig+0x458>
 800841e:	2304      	movs	r3, #4
 8008420:	77fb      	strb	r3, [r7, #31]
 8008422:	e0b3      	b.n	800858c <UART_SetConfig+0x458>
 8008424:	2308      	movs	r3, #8
 8008426:	77fb      	strb	r3, [r7, #31]
 8008428:	e0b0      	b.n	800858c <UART_SetConfig+0x458>
 800842a:	2310      	movs	r3, #16
 800842c:	77fb      	strb	r3, [r7, #31]
 800842e:	e0ad      	b.n	800858c <UART_SetConfig+0x458>
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	4a94      	ldr	r2, [pc, #592]	; (8008688 <UART_SetConfig+0x554>)
 8008436:	4293      	cmp	r3, r2
 8008438:	d125      	bne.n	8008486 <UART_SetConfig+0x352>
 800843a:	4b92      	ldr	r3, [pc, #584]	; (8008684 <UART_SetConfig+0x550>)
 800843c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008440:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008444:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008448:	d017      	beq.n	800847a <UART_SetConfig+0x346>
 800844a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800844e:	d817      	bhi.n	8008480 <UART_SetConfig+0x34c>
 8008450:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008454:	d00b      	beq.n	800846e <UART_SetConfig+0x33a>
 8008456:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800845a:	d811      	bhi.n	8008480 <UART_SetConfig+0x34c>
 800845c:	2b00      	cmp	r3, #0
 800845e:	d003      	beq.n	8008468 <UART_SetConfig+0x334>
 8008460:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008464:	d006      	beq.n	8008474 <UART_SetConfig+0x340>
 8008466:	e00b      	b.n	8008480 <UART_SetConfig+0x34c>
 8008468:	2300      	movs	r3, #0
 800846a:	77fb      	strb	r3, [r7, #31]
 800846c:	e08e      	b.n	800858c <UART_SetConfig+0x458>
 800846e:	2302      	movs	r3, #2
 8008470:	77fb      	strb	r3, [r7, #31]
 8008472:	e08b      	b.n	800858c <UART_SetConfig+0x458>
 8008474:	2304      	movs	r3, #4
 8008476:	77fb      	strb	r3, [r7, #31]
 8008478:	e088      	b.n	800858c <UART_SetConfig+0x458>
 800847a:	2308      	movs	r3, #8
 800847c:	77fb      	strb	r3, [r7, #31]
 800847e:	e085      	b.n	800858c <UART_SetConfig+0x458>
 8008480:	2310      	movs	r3, #16
 8008482:	77fb      	strb	r3, [r7, #31]
 8008484:	e082      	b.n	800858c <UART_SetConfig+0x458>
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	4a80      	ldr	r2, [pc, #512]	; (800868c <UART_SetConfig+0x558>)
 800848c:	4293      	cmp	r3, r2
 800848e:	d125      	bne.n	80084dc <UART_SetConfig+0x3a8>
 8008490:	4b7c      	ldr	r3, [pc, #496]	; (8008684 <UART_SetConfig+0x550>)
 8008492:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008496:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800849a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800849e:	d017      	beq.n	80084d0 <UART_SetConfig+0x39c>
 80084a0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80084a4:	d817      	bhi.n	80084d6 <UART_SetConfig+0x3a2>
 80084a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80084aa:	d00b      	beq.n	80084c4 <UART_SetConfig+0x390>
 80084ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80084b0:	d811      	bhi.n	80084d6 <UART_SetConfig+0x3a2>
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d003      	beq.n	80084be <UART_SetConfig+0x38a>
 80084b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80084ba:	d006      	beq.n	80084ca <UART_SetConfig+0x396>
 80084bc:	e00b      	b.n	80084d6 <UART_SetConfig+0x3a2>
 80084be:	2301      	movs	r3, #1
 80084c0:	77fb      	strb	r3, [r7, #31]
 80084c2:	e063      	b.n	800858c <UART_SetConfig+0x458>
 80084c4:	2302      	movs	r3, #2
 80084c6:	77fb      	strb	r3, [r7, #31]
 80084c8:	e060      	b.n	800858c <UART_SetConfig+0x458>
 80084ca:	2304      	movs	r3, #4
 80084cc:	77fb      	strb	r3, [r7, #31]
 80084ce:	e05d      	b.n	800858c <UART_SetConfig+0x458>
 80084d0:	2308      	movs	r3, #8
 80084d2:	77fb      	strb	r3, [r7, #31]
 80084d4:	e05a      	b.n	800858c <UART_SetConfig+0x458>
 80084d6:	2310      	movs	r3, #16
 80084d8:	77fb      	strb	r3, [r7, #31]
 80084da:	e057      	b.n	800858c <UART_SetConfig+0x458>
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	4a6b      	ldr	r2, [pc, #428]	; (8008690 <UART_SetConfig+0x55c>)
 80084e2:	4293      	cmp	r3, r2
 80084e4:	d125      	bne.n	8008532 <UART_SetConfig+0x3fe>
 80084e6:	4b67      	ldr	r3, [pc, #412]	; (8008684 <UART_SetConfig+0x550>)
 80084e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80084ec:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80084f0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80084f4:	d017      	beq.n	8008526 <UART_SetConfig+0x3f2>
 80084f6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80084fa:	d817      	bhi.n	800852c <UART_SetConfig+0x3f8>
 80084fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008500:	d00b      	beq.n	800851a <UART_SetConfig+0x3e6>
 8008502:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008506:	d811      	bhi.n	800852c <UART_SetConfig+0x3f8>
 8008508:	2b00      	cmp	r3, #0
 800850a:	d003      	beq.n	8008514 <UART_SetConfig+0x3e0>
 800850c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008510:	d006      	beq.n	8008520 <UART_SetConfig+0x3ec>
 8008512:	e00b      	b.n	800852c <UART_SetConfig+0x3f8>
 8008514:	2300      	movs	r3, #0
 8008516:	77fb      	strb	r3, [r7, #31]
 8008518:	e038      	b.n	800858c <UART_SetConfig+0x458>
 800851a:	2302      	movs	r3, #2
 800851c:	77fb      	strb	r3, [r7, #31]
 800851e:	e035      	b.n	800858c <UART_SetConfig+0x458>
 8008520:	2304      	movs	r3, #4
 8008522:	77fb      	strb	r3, [r7, #31]
 8008524:	e032      	b.n	800858c <UART_SetConfig+0x458>
 8008526:	2308      	movs	r3, #8
 8008528:	77fb      	strb	r3, [r7, #31]
 800852a:	e02f      	b.n	800858c <UART_SetConfig+0x458>
 800852c:	2310      	movs	r3, #16
 800852e:	77fb      	strb	r3, [r7, #31]
 8008530:	e02c      	b.n	800858c <UART_SetConfig+0x458>
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	4a57      	ldr	r2, [pc, #348]	; (8008694 <UART_SetConfig+0x560>)
 8008538:	4293      	cmp	r3, r2
 800853a:	d125      	bne.n	8008588 <UART_SetConfig+0x454>
 800853c:	4b51      	ldr	r3, [pc, #324]	; (8008684 <UART_SetConfig+0x550>)
 800853e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008542:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008546:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800854a:	d017      	beq.n	800857c <UART_SetConfig+0x448>
 800854c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8008550:	d817      	bhi.n	8008582 <UART_SetConfig+0x44e>
 8008552:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008556:	d00b      	beq.n	8008570 <UART_SetConfig+0x43c>
 8008558:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800855c:	d811      	bhi.n	8008582 <UART_SetConfig+0x44e>
 800855e:	2b00      	cmp	r3, #0
 8008560:	d003      	beq.n	800856a <UART_SetConfig+0x436>
 8008562:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008566:	d006      	beq.n	8008576 <UART_SetConfig+0x442>
 8008568:	e00b      	b.n	8008582 <UART_SetConfig+0x44e>
 800856a:	2300      	movs	r3, #0
 800856c:	77fb      	strb	r3, [r7, #31]
 800856e:	e00d      	b.n	800858c <UART_SetConfig+0x458>
 8008570:	2302      	movs	r3, #2
 8008572:	77fb      	strb	r3, [r7, #31]
 8008574:	e00a      	b.n	800858c <UART_SetConfig+0x458>
 8008576:	2304      	movs	r3, #4
 8008578:	77fb      	strb	r3, [r7, #31]
 800857a:	e007      	b.n	800858c <UART_SetConfig+0x458>
 800857c:	2308      	movs	r3, #8
 800857e:	77fb      	strb	r3, [r7, #31]
 8008580:	e004      	b.n	800858c <UART_SetConfig+0x458>
 8008582:	2310      	movs	r3, #16
 8008584:	77fb      	strb	r3, [r7, #31]
 8008586:	e001      	b.n	800858c <UART_SetConfig+0x458>
 8008588:	2310      	movs	r3, #16
 800858a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	69db      	ldr	r3, [r3, #28]
 8008590:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008594:	d15c      	bne.n	8008650 <UART_SetConfig+0x51c>
  {
    switch (clocksource)
 8008596:	7ffb      	ldrb	r3, [r7, #31]
 8008598:	2b08      	cmp	r3, #8
 800859a:	d828      	bhi.n	80085ee <UART_SetConfig+0x4ba>
 800859c:	a201      	add	r2, pc, #4	; (adr r2, 80085a4 <UART_SetConfig+0x470>)
 800859e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085a2:	bf00      	nop
 80085a4:	080085c9 	.word	0x080085c9
 80085a8:	080085d1 	.word	0x080085d1
 80085ac:	080085d9 	.word	0x080085d9
 80085b0:	080085ef 	.word	0x080085ef
 80085b4:	080085df 	.word	0x080085df
 80085b8:	080085ef 	.word	0x080085ef
 80085bc:	080085ef 	.word	0x080085ef
 80085c0:	080085ef 	.word	0x080085ef
 80085c4:	080085e7 	.word	0x080085e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80085c8:	f7fb ffec 	bl	80045a4 <HAL_RCC_GetPCLK1Freq>
 80085cc:	61b8      	str	r0, [r7, #24]
        break;
 80085ce:	e013      	b.n	80085f8 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80085d0:	f7fb fffc 	bl	80045cc <HAL_RCC_GetPCLK2Freq>
 80085d4:	61b8      	str	r0, [r7, #24]
        break;
 80085d6:	e00f      	b.n	80085f8 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80085d8:	4b2f      	ldr	r3, [pc, #188]	; (8008698 <UART_SetConfig+0x564>)
 80085da:	61bb      	str	r3, [r7, #24]
        break;
 80085dc:	e00c      	b.n	80085f8 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80085de:	f7fb ff0f 	bl	8004400 <HAL_RCC_GetSysClockFreq>
 80085e2:	61b8      	str	r0, [r7, #24]
        break;
 80085e4:	e008      	b.n	80085f8 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80085e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80085ea:	61bb      	str	r3, [r7, #24]
        break;
 80085ec:	e004      	b.n	80085f8 <UART_SetConfig+0x4c4>
      default:
        pclk = 0U;
 80085ee:	2300      	movs	r3, #0
 80085f0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80085f2:	2301      	movs	r3, #1
 80085f4:	77bb      	strb	r3, [r7, #30]
        break;
 80085f6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80085f8:	69bb      	ldr	r3, [r7, #24]
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	f000 8082 	beq.w	8008704 <UART_SetConfig+0x5d0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008600:	69bb      	ldr	r3, [r7, #24]
 8008602:	005a      	lsls	r2, r3, #1
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	685b      	ldr	r3, [r3, #4]
 8008608:	085b      	lsrs	r3, r3, #1
 800860a:	441a      	add	r2, r3
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	685b      	ldr	r3, [r3, #4]
 8008610:	fbb2 f3f3 	udiv	r3, r2, r3
 8008614:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008616:	693b      	ldr	r3, [r7, #16]
 8008618:	2b0f      	cmp	r3, #15
 800861a:	d916      	bls.n	800864a <UART_SetConfig+0x516>
 800861c:	693b      	ldr	r3, [r7, #16]
 800861e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008622:	d212      	bcs.n	800864a <UART_SetConfig+0x516>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008624:	693b      	ldr	r3, [r7, #16]
 8008626:	b29b      	uxth	r3, r3
 8008628:	f023 030f 	bic.w	r3, r3, #15
 800862c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800862e:	693b      	ldr	r3, [r7, #16]
 8008630:	085b      	lsrs	r3, r3, #1
 8008632:	b29b      	uxth	r3, r3
 8008634:	f003 0307 	and.w	r3, r3, #7
 8008638:	b29a      	uxth	r2, r3
 800863a:	89fb      	ldrh	r3, [r7, #14]
 800863c:	4313      	orrs	r3, r2
 800863e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	89fa      	ldrh	r2, [r7, #14]
 8008646:	60da      	str	r2, [r3, #12]
 8008648:	e05c      	b.n	8008704 <UART_SetConfig+0x5d0>
      }
      else
      {
        ret = HAL_ERROR;
 800864a:	2301      	movs	r3, #1
 800864c:	77bb      	strb	r3, [r7, #30]
 800864e:	e059      	b.n	8008704 <UART_SetConfig+0x5d0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008650:	7ffb      	ldrb	r3, [r7, #31]
 8008652:	2b08      	cmp	r3, #8
 8008654:	d835      	bhi.n	80086c2 <UART_SetConfig+0x58e>
 8008656:	a201      	add	r2, pc, #4	; (adr r2, 800865c <UART_SetConfig+0x528>)
 8008658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800865c:	0800869d 	.word	0x0800869d
 8008660:	080086a5 	.word	0x080086a5
 8008664:	080086ad 	.word	0x080086ad
 8008668:	080086c3 	.word	0x080086c3
 800866c:	080086b3 	.word	0x080086b3
 8008670:	080086c3 	.word	0x080086c3
 8008674:	080086c3 	.word	0x080086c3
 8008678:	080086c3 	.word	0x080086c3
 800867c:	080086bb 	.word	0x080086bb
 8008680:	40004c00 	.word	0x40004c00
 8008684:	40023800 	.word	0x40023800
 8008688:	40005000 	.word	0x40005000
 800868c:	40011400 	.word	0x40011400
 8008690:	40007800 	.word	0x40007800
 8008694:	40007c00 	.word	0x40007c00
 8008698:	00f42400 	.word	0x00f42400
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800869c:	f7fb ff82 	bl	80045a4 <HAL_RCC_GetPCLK1Freq>
 80086a0:	61b8      	str	r0, [r7, #24]
        break;
 80086a2:	e013      	b.n	80086cc <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80086a4:	f7fb ff92 	bl	80045cc <HAL_RCC_GetPCLK2Freq>
 80086a8:	61b8      	str	r0, [r7, #24]
        break;
 80086aa:	e00f      	b.n	80086cc <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80086ac:	4b1b      	ldr	r3, [pc, #108]	; (800871c <UART_SetConfig+0x5e8>)
 80086ae:	61bb      	str	r3, [r7, #24]
        break;
 80086b0:	e00c      	b.n	80086cc <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80086b2:	f7fb fea5 	bl	8004400 <HAL_RCC_GetSysClockFreq>
 80086b6:	61b8      	str	r0, [r7, #24]
        break;
 80086b8:	e008      	b.n	80086cc <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80086ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80086be:	61bb      	str	r3, [r7, #24]
        break;
 80086c0:	e004      	b.n	80086cc <UART_SetConfig+0x598>
      default:
        pclk = 0U;
 80086c2:	2300      	movs	r3, #0
 80086c4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80086c6:	2301      	movs	r3, #1
 80086c8:	77bb      	strb	r3, [r7, #30]
        break;
 80086ca:	bf00      	nop
    }

    if (pclk != 0U)
 80086cc:	69bb      	ldr	r3, [r7, #24]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d018      	beq.n	8008704 <UART_SetConfig+0x5d0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	685b      	ldr	r3, [r3, #4]
 80086d6:	085a      	lsrs	r2, r3, #1
 80086d8:	69bb      	ldr	r3, [r7, #24]
 80086da:	441a      	add	r2, r3
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	685b      	ldr	r3, [r3, #4]
 80086e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80086e4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80086e6:	693b      	ldr	r3, [r7, #16]
 80086e8:	2b0f      	cmp	r3, #15
 80086ea:	d909      	bls.n	8008700 <UART_SetConfig+0x5cc>
 80086ec:	693b      	ldr	r3, [r7, #16]
 80086ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80086f2:	d205      	bcs.n	8008700 <UART_SetConfig+0x5cc>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80086f4:	693b      	ldr	r3, [r7, #16]
 80086f6:	b29a      	uxth	r2, r3
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	60da      	str	r2, [r3, #12]
 80086fe:	e001      	b.n	8008704 <UART_SetConfig+0x5d0>
      }
      else
      {
        ret = HAL_ERROR;
 8008700:	2301      	movs	r3, #1
 8008702:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	2200      	movs	r2, #0
 8008708:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	2200      	movs	r2, #0
 800870e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8008710:	7fbb      	ldrb	r3, [r7, #30]
}
 8008712:	4618      	mov	r0, r3
 8008714:	3720      	adds	r7, #32
 8008716:	46bd      	mov	sp, r7
 8008718:	bd80      	pop	{r7, pc}
 800871a:	bf00      	nop
 800871c:	00f42400 	.word	0x00f42400

08008720 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008720:	b580      	push	{r7, lr}
 8008722:	b082      	sub	sp, #8
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800872c:	2bff      	cmp	r3, #255	; 0xff
 800872e:	d904      	bls.n	800873a <UART_AdvFeatureConfig+0x1a>
 8008730:	f640 31e6 	movw	r1, #3046	; 0xbe6
 8008734:	488e      	ldr	r0, [pc, #568]	; (8008970 <UART_AdvFeatureConfig+0x250>)
 8008736:	f7f9 f8fa 	bl	800192e <assert_failed>

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800873e:	f003 0301 	and.w	r3, r3, #1
 8008742:	2b00      	cmp	r3, #0
 8008744:	d018      	beq.n	8008778 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800874a:	2b00      	cmp	r3, #0
 800874c:	d009      	beq.n	8008762 <UART_AdvFeatureConfig+0x42>
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008752:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008756:	d004      	beq.n	8008762 <UART_AdvFeatureConfig+0x42>
 8008758:	f640 31eb 	movw	r1, #3051	; 0xbeb
 800875c:	4884      	ldr	r0, [pc, #528]	; (8008970 <UART_AdvFeatureConfig+0x250>)
 800875e:	f7f9 f8e6 	bl	800192e <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	685b      	ldr	r3, [r3, #4]
 8008768:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	430a      	orrs	r2, r1
 8008776:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800877c:	f003 0302 	and.w	r3, r3, #2
 8008780:	2b00      	cmp	r3, #0
 8008782:	d018      	beq.n	80087b6 <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008788:	2b00      	cmp	r3, #0
 800878a:	d009      	beq.n	80087a0 <UART_AdvFeatureConfig+0x80>
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008790:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008794:	d004      	beq.n	80087a0 <UART_AdvFeatureConfig+0x80>
 8008796:	f640 31f2 	movw	r1, #3058	; 0xbf2
 800879a:	4875      	ldr	r0, [pc, #468]	; (8008970 <UART_AdvFeatureConfig+0x250>)
 800879c:	f7f9 f8c7 	bl	800192e <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	685b      	ldr	r3, [r3, #4]
 80087a6:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	430a      	orrs	r2, r1
 80087b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087ba:	f003 0304 	and.w	r3, r3, #4
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d018      	beq.n	80087f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d009      	beq.n	80087de <UART_AdvFeatureConfig+0xbe>
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087ce:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80087d2:	d004      	beq.n	80087de <UART_AdvFeatureConfig+0xbe>
 80087d4:	f640 31f9 	movw	r1, #3065	; 0xbf9
 80087d8:	4865      	ldr	r0, [pc, #404]	; (8008970 <UART_AdvFeatureConfig+0x250>)
 80087da:	f7f9 f8a8 	bl	800192e <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	685b      	ldr	r3, [r3, #4]
 80087e4:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	430a      	orrs	r2, r1
 80087f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087f8:	f003 0308 	and.w	r3, r3, #8
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d018      	beq.n	8008832 <UART_AdvFeatureConfig+0x112>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008804:	2b00      	cmp	r3, #0
 8008806:	d009      	beq.n	800881c <UART_AdvFeatureConfig+0xfc>
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800880c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008810:	d004      	beq.n	800881c <UART_AdvFeatureConfig+0xfc>
 8008812:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8008816:	4856      	ldr	r0, [pc, #344]	; (8008970 <UART_AdvFeatureConfig+0x250>)
 8008818:	f7f9 f889 	bl	800192e <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	685b      	ldr	r3, [r3, #4]
 8008822:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	430a      	orrs	r2, r1
 8008830:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008836:	f003 0310 	and.w	r3, r3, #16
 800883a:	2b00      	cmp	r3, #0
 800883c:	d018      	beq.n	8008870 <UART_AdvFeatureConfig+0x150>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008842:	2b00      	cmp	r3, #0
 8008844:	d009      	beq.n	800885a <UART_AdvFeatureConfig+0x13a>
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800884a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800884e:	d004      	beq.n	800885a <UART_AdvFeatureConfig+0x13a>
 8008850:	f640 4107 	movw	r1, #3079	; 0xc07
 8008854:	4846      	ldr	r0, [pc, #280]	; (8008970 <UART_AdvFeatureConfig+0x250>)
 8008856:	f7f9 f86a 	bl	800192e <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	689b      	ldr	r3, [r3, #8]
 8008860:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	430a      	orrs	r2, r1
 800886e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008874:	f003 0320 	and.w	r3, r3, #32
 8008878:	2b00      	cmp	r3, #0
 800887a:	d018      	beq.n	80088ae <UART_AdvFeatureConfig+0x18e>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008880:	2b00      	cmp	r3, #0
 8008882:	d009      	beq.n	8008898 <UART_AdvFeatureConfig+0x178>
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008888:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800888c:	d004      	beq.n	8008898 <UART_AdvFeatureConfig+0x178>
 800888e:	f640 410e 	movw	r1, #3086	; 0xc0e
 8008892:	4837      	ldr	r0, [pc, #220]	; (8008970 <UART_AdvFeatureConfig+0x250>)
 8008894:	f7f9 f84b 	bl	800192e <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	689b      	ldr	r3, [r3, #8]
 800889e:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	430a      	orrs	r2, r1
 80088ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d064      	beq.n	8008984 <UART_AdvFeatureConfig+0x264>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	4a2d      	ldr	r2, [pc, #180]	; (8008974 <UART_AdvFeatureConfig+0x254>)
 80088c0:	4293      	cmp	r3, r2
 80088c2:	d013      	beq.n	80088ec <UART_AdvFeatureConfig+0x1cc>
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	4a2b      	ldr	r2, [pc, #172]	; (8008978 <UART_AdvFeatureConfig+0x258>)
 80088ca:	4293      	cmp	r3, r2
 80088cc:	d00e      	beq.n	80088ec <UART_AdvFeatureConfig+0x1cc>
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	4a2a      	ldr	r2, [pc, #168]	; (800897c <UART_AdvFeatureConfig+0x25c>)
 80088d4:	4293      	cmp	r3, r2
 80088d6:	d009      	beq.n	80088ec <UART_AdvFeatureConfig+0x1cc>
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	4a28      	ldr	r2, [pc, #160]	; (8008980 <UART_AdvFeatureConfig+0x260>)
 80088de:	4293      	cmp	r3, r2
 80088e0:	d004      	beq.n	80088ec <UART_AdvFeatureConfig+0x1cc>
 80088e2:	f640 4115 	movw	r1, #3093	; 0xc15
 80088e6:	4822      	ldr	r0, [pc, #136]	; (8008970 <UART_AdvFeatureConfig+0x250>)
 80088e8:	f7f9 f821 	bl	800192e <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d009      	beq.n	8008908 <UART_AdvFeatureConfig+0x1e8>
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80088fc:	d004      	beq.n	8008908 <UART_AdvFeatureConfig+0x1e8>
 80088fe:	f640 4116 	movw	r1, #3094	; 0xc16
 8008902:	481b      	ldr	r0, [pc, #108]	; (8008970 <UART_AdvFeatureConfig+0x250>)
 8008904:	f7f9 f813 	bl	800192e <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	685b      	ldr	r3, [r3, #4]
 800890e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	430a      	orrs	r2, r1
 800891c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008922:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008926:	d12d      	bne.n	8008984 <UART_AdvFeatureConfig+0x264>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800892c:	2b00      	cmp	r3, #0
 800892e:	d013      	beq.n	8008958 <UART_AdvFeatureConfig+0x238>
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008934:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008938:	d00e      	beq.n	8008958 <UART_AdvFeatureConfig+0x238>
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800893e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008942:	d009      	beq.n	8008958 <UART_AdvFeatureConfig+0x238>
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008948:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800894c:	d004      	beq.n	8008958 <UART_AdvFeatureConfig+0x238>
 800894e:	f640 411b 	movw	r1, #3099	; 0xc1b
 8008952:	4807      	ldr	r0, [pc, #28]	; (8008970 <UART_AdvFeatureConfig+0x250>)
 8008954:	f7f8 ffeb 	bl	800192e <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	685b      	ldr	r3, [r3, #4]
 800895e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	430a      	orrs	r2, r1
 800896c:	605a      	str	r2, [r3, #4]
 800896e:	e009      	b.n	8008984 <UART_AdvFeatureConfig+0x264>
 8008970:	08012d38 	.word	0x08012d38
 8008974:	40011000 	.word	0x40011000
 8008978:	40004400 	.word	0x40004400
 800897c:	40004800 	.word	0x40004800
 8008980:	40011400 	.word	0x40011400
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008988:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800898c:	2b00      	cmp	r3, #0
 800898e:	d018      	beq.n	80089c2 <UART_AdvFeatureConfig+0x2a2>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008994:	2b00      	cmp	r3, #0
 8008996:	d009      	beq.n	80089ac <UART_AdvFeatureConfig+0x28c>
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800899c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80089a0:	d004      	beq.n	80089ac <UART_AdvFeatureConfig+0x28c>
 80089a2:	f640 4123 	movw	r1, #3107	; 0xc23
 80089a6:	4809      	ldr	r0, [pc, #36]	; (80089cc <UART_AdvFeatureConfig+0x2ac>)
 80089a8:	f7f8 ffc1 	bl	800192e <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	685b      	ldr	r3, [r3, #4]
 80089b2:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	430a      	orrs	r2, r1
 80089c0:	605a      	str	r2, [r3, #4]
  }
}
 80089c2:	bf00      	nop
 80089c4:	3708      	adds	r7, #8
 80089c6:	46bd      	mov	sp, r7
 80089c8:	bd80      	pop	{r7, pc}
 80089ca:	bf00      	nop
 80089cc:	08012d38 	.word	0x08012d38

080089d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80089d0:	b580      	push	{r7, lr}
 80089d2:	b086      	sub	sp, #24
 80089d4:	af02      	add	r7, sp, #8
 80089d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	2200      	movs	r2, #0
 80089dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80089e0:	f7f9 fb3a 	bl	8002058 <HAL_GetTick>
 80089e4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	f003 0308 	and.w	r3, r3, #8
 80089f0:	2b08      	cmp	r3, #8
 80089f2:	d10e      	bne.n	8008a12 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80089f4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80089f8:	9300      	str	r3, [sp, #0]
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	2200      	movs	r2, #0
 80089fe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008a02:	6878      	ldr	r0, [r7, #4]
 8008a04:	f000 f81b 	bl	8008a3e <UART_WaitOnFlagUntilTimeout>
 8008a08:	4603      	mov	r3, r0
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d001      	beq.n	8008a12 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008a0e:	2303      	movs	r3, #3
 8008a10:	e011      	b.n	8008a36 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	2220      	movs	r2, #32
 8008a16:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	2220      	movs	r2, #32
 8008a1c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	2200      	movs	r2, #0
 8008a24:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	2200      	movs	r2, #0
 8008a2a:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2200      	movs	r2, #0
 8008a30:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8008a34:	2300      	movs	r3, #0
}
 8008a36:	4618      	mov	r0, r3
 8008a38:	3710      	adds	r7, #16
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	bd80      	pop	{r7, pc}

08008a3e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008a3e:	b580      	push	{r7, lr}
 8008a40:	b09c      	sub	sp, #112	; 0x70
 8008a42:	af00      	add	r7, sp, #0
 8008a44:	60f8      	str	r0, [r7, #12]
 8008a46:	60b9      	str	r1, [r7, #8]
 8008a48:	603b      	str	r3, [r7, #0]
 8008a4a:	4613      	mov	r3, r2
 8008a4c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008a4e:	e0a7      	b.n	8008ba0 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008a50:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008a52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a56:	f000 80a3 	beq.w	8008ba0 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a5a:	f7f9 fafd 	bl	8002058 <HAL_GetTick>
 8008a5e:	4602      	mov	r2, r0
 8008a60:	683b      	ldr	r3, [r7, #0]
 8008a62:	1ad3      	subs	r3, r2, r3
 8008a64:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008a66:	429a      	cmp	r2, r3
 8008a68:	d302      	bcc.n	8008a70 <UART_WaitOnFlagUntilTimeout+0x32>
 8008a6a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d13f      	bne.n	8008af0 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008a78:	e853 3f00 	ldrex	r3, [r3]
 8008a7c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008a7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a80:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008a84:	667b      	str	r3, [r7, #100]	; 0x64
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	461a      	mov	r2, r3
 8008a8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008a8e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008a90:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a92:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008a94:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008a96:	e841 2300 	strex	r3, r2, [r1]
 8008a9a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008a9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d1e6      	bne.n	8008a70 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	3308      	adds	r3, #8
 8008aa8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008aaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008aac:	e853 3f00 	ldrex	r3, [r3]
 8008ab0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008ab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ab4:	f023 0301 	bic.w	r3, r3, #1
 8008ab8:	663b      	str	r3, [r7, #96]	; 0x60
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	3308      	adds	r3, #8
 8008ac0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008ac2:	64ba      	str	r2, [r7, #72]	; 0x48
 8008ac4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ac6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008ac8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008aca:	e841 2300 	strex	r3, r2, [r1]
 8008ace:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008ad0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d1e5      	bne.n	8008aa2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	2220      	movs	r2, #32
 8008ada:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	2220      	movs	r2, #32
 8008ae0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8008aec:	2303      	movs	r3, #3
 8008aee:	e068      	b.n	8008bc2 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	f003 0304 	and.w	r3, r3, #4
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d050      	beq.n	8008ba0 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	69db      	ldr	r3, [r3, #28]
 8008b04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008b08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008b0c:	d148      	bne.n	8008ba0 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008b16:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b20:	e853 3f00 	ldrex	r3, [r3]
 8008b24:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b28:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008b2c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	461a      	mov	r2, r3
 8008b34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b36:	637b      	str	r3, [r7, #52]	; 0x34
 8008b38:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b3a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008b3c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008b3e:	e841 2300 	strex	r3, r2, [r1]
 8008b42:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008b44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d1e6      	bne.n	8008b18 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	3308      	adds	r3, #8
 8008b50:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b52:	697b      	ldr	r3, [r7, #20]
 8008b54:	e853 3f00 	ldrex	r3, [r3]
 8008b58:	613b      	str	r3, [r7, #16]
   return(result);
 8008b5a:	693b      	ldr	r3, [r7, #16]
 8008b5c:	f023 0301 	bic.w	r3, r3, #1
 8008b60:	66bb      	str	r3, [r7, #104]	; 0x68
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	3308      	adds	r3, #8
 8008b68:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008b6a:	623a      	str	r2, [r7, #32]
 8008b6c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b6e:	69f9      	ldr	r1, [r7, #28]
 8008b70:	6a3a      	ldr	r2, [r7, #32]
 8008b72:	e841 2300 	strex	r3, r2, [r1]
 8008b76:	61bb      	str	r3, [r7, #24]
   return(result);
 8008b78:	69bb      	ldr	r3, [r7, #24]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d1e5      	bne.n	8008b4a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	2220      	movs	r2, #32
 8008b82:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	2220      	movs	r2, #32
 8008b88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	2220      	movs	r2, #32
 8008b90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	2200      	movs	r2, #0
 8008b98:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8008b9c:	2303      	movs	r3, #3
 8008b9e:	e010      	b.n	8008bc2 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	69da      	ldr	r2, [r3, #28]
 8008ba6:	68bb      	ldr	r3, [r7, #8]
 8008ba8:	4013      	ands	r3, r2
 8008baa:	68ba      	ldr	r2, [r7, #8]
 8008bac:	429a      	cmp	r2, r3
 8008bae:	bf0c      	ite	eq
 8008bb0:	2301      	moveq	r3, #1
 8008bb2:	2300      	movne	r3, #0
 8008bb4:	b2db      	uxtb	r3, r3
 8008bb6:	461a      	mov	r2, r3
 8008bb8:	79fb      	ldrb	r3, [r7, #7]
 8008bba:	429a      	cmp	r2, r3
 8008bbc:	f43f af48 	beq.w	8008a50 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008bc0:	2300      	movs	r3, #0
}
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	3770      	adds	r7, #112	; 0x70
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	bd80      	pop	{r7, pc}
	...

08008bcc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008bcc:	b480      	push	{r7}
 8008bce:	b097      	sub	sp, #92	; 0x5c
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	60f8      	str	r0, [r7, #12]
 8008bd4:	60b9      	str	r1, [r7, #8]
 8008bd6:	4613      	mov	r3, r2
 8008bd8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	68ba      	ldr	r2, [r7, #8]
 8008bde:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	88fa      	ldrh	r2, [r7, #6]
 8008be4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	88fa      	ldrh	r2, [r7, #6]
 8008bec:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	2200      	movs	r2, #0
 8008bf4:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	689b      	ldr	r3, [r3, #8]
 8008bfa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008bfe:	d10e      	bne.n	8008c1e <UART_Start_Receive_IT+0x52>
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	691b      	ldr	r3, [r3, #16]
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d105      	bne.n	8008c14 <UART_Start_Receive_IT+0x48>
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008c0e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008c12:	e02d      	b.n	8008c70 <UART_Start_Receive_IT+0xa4>
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	22ff      	movs	r2, #255	; 0xff
 8008c18:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008c1c:	e028      	b.n	8008c70 <UART_Start_Receive_IT+0xa4>
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	689b      	ldr	r3, [r3, #8]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d10d      	bne.n	8008c42 <UART_Start_Receive_IT+0x76>
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	691b      	ldr	r3, [r3, #16]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d104      	bne.n	8008c38 <UART_Start_Receive_IT+0x6c>
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	22ff      	movs	r2, #255	; 0xff
 8008c32:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008c36:	e01b      	b.n	8008c70 <UART_Start_Receive_IT+0xa4>
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	227f      	movs	r2, #127	; 0x7f
 8008c3c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008c40:	e016      	b.n	8008c70 <UART_Start_Receive_IT+0xa4>
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	689b      	ldr	r3, [r3, #8]
 8008c46:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008c4a:	d10d      	bne.n	8008c68 <UART_Start_Receive_IT+0x9c>
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	691b      	ldr	r3, [r3, #16]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d104      	bne.n	8008c5e <UART_Start_Receive_IT+0x92>
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	227f      	movs	r2, #127	; 0x7f
 8008c58:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008c5c:	e008      	b.n	8008c70 <UART_Start_Receive_IT+0xa4>
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	223f      	movs	r2, #63	; 0x3f
 8008c62:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008c66:	e003      	b.n	8008c70 <UART_Start_Receive_IT+0xa4>
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	2200      	movs	r2, #0
 8008c74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	2222      	movs	r2, #34	; 0x22
 8008c7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	3308      	adds	r3, #8
 8008c86:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c8a:	e853 3f00 	ldrex	r3, [r3]
 8008c8e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008c90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c92:	f043 0301 	orr.w	r3, r3, #1
 8008c96:	657b      	str	r3, [r7, #84]	; 0x54
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	3308      	adds	r3, #8
 8008c9e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008ca0:	64ba      	str	r2, [r7, #72]	; 0x48
 8008ca2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ca4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008ca6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008ca8:	e841 2300 	strex	r3, r2, [r1]
 8008cac:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008cae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d1e5      	bne.n	8008c80 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	689b      	ldr	r3, [r3, #8]
 8008cb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008cbc:	d107      	bne.n	8008cce <UART_Start_Receive_IT+0x102>
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	691b      	ldr	r3, [r3, #16]
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d103      	bne.n	8008cce <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	4a21      	ldr	r2, [pc, #132]	; (8008d50 <UART_Start_Receive_IT+0x184>)
 8008cca:	669a      	str	r2, [r3, #104]	; 0x68
 8008ccc:	e002      	b.n	8008cd4 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	4a20      	ldr	r2, [pc, #128]	; (8008d54 <UART_Start_Receive_IT+0x188>)
 8008cd2:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	691b      	ldr	r3, [r3, #16]
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d019      	beq.n	8008d10 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ce4:	e853 3f00 	ldrex	r3, [r3]
 8008ce8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cec:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8008cf0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	461a      	mov	r2, r3
 8008cf8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008cfa:	637b      	str	r3, [r7, #52]	; 0x34
 8008cfc:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cfe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008d00:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008d02:	e841 2300 	strex	r3, r2, [r1]
 8008d06:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008d08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d1e6      	bne.n	8008cdc <UART_Start_Receive_IT+0x110>
 8008d0e:	e018      	b.n	8008d42 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d16:	697b      	ldr	r3, [r7, #20]
 8008d18:	e853 3f00 	ldrex	r3, [r3]
 8008d1c:	613b      	str	r3, [r7, #16]
   return(result);
 8008d1e:	693b      	ldr	r3, [r7, #16]
 8008d20:	f043 0320 	orr.w	r3, r3, #32
 8008d24:	653b      	str	r3, [r7, #80]	; 0x50
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	461a      	mov	r2, r3
 8008d2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008d2e:	623b      	str	r3, [r7, #32]
 8008d30:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d32:	69f9      	ldr	r1, [r7, #28]
 8008d34:	6a3a      	ldr	r2, [r7, #32]
 8008d36:	e841 2300 	strex	r3, r2, [r1]
 8008d3a:	61bb      	str	r3, [r7, #24]
   return(result);
 8008d3c:	69bb      	ldr	r3, [r7, #24]
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d1e6      	bne.n	8008d10 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8008d42:	2300      	movs	r3, #0
}
 8008d44:	4618      	mov	r0, r3
 8008d46:	375c      	adds	r7, #92	; 0x5c
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4e:	4770      	bx	lr
 8008d50:	08009007 	.word	0x08009007
 8008d54:	08008ea1 	.word	0x08008ea1

08008d58 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008d58:	b480      	push	{r7}
 8008d5a:	b095      	sub	sp, #84	; 0x54
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d68:	e853 3f00 	ldrex	r3, [r3]
 8008d6c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d70:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008d74:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	461a      	mov	r2, r3
 8008d7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d7e:	643b      	str	r3, [r7, #64]	; 0x40
 8008d80:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d82:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008d84:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008d86:	e841 2300 	strex	r3, r2, [r1]
 8008d8a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008d8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d1e6      	bne.n	8008d60 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	3308      	adds	r3, #8
 8008d98:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d9a:	6a3b      	ldr	r3, [r7, #32]
 8008d9c:	e853 3f00 	ldrex	r3, [r3]
 8008da0:	61fb      	str	r3, [r7, #28]
   return(result);
 8008da2:	69fb      	ldr	r3, [r7, #28]
 8008da4:	f023 0301 	bic.w	r3, r3, #1
 8008da8:	64bb      	str	r3, [r7, #72]	; 0x48
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	3308      	adds	r3, #8
 8008db0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008db2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008db4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008db6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008db8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008dba:	e841 2300 	strex	r3, r2, [r1]
 8008dbe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d1e5      	bne.n	8008d92 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008dca:	2b01      	cmp	r3, #1
 8008dcc:	d118      	bne.n	8008e00 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	e853 3f00 	ldrex	r3, [r3]
 8008dda:	60bb      	str	r3, [r7, #8]
   return(result);
 8008ddc:	68bb      	ldr	r3, [r7, #8]
 8008dde:	f023 0310 	bic.w	r3, r3, #16
 8008de2:	647b      	str	r3, [r7, #68]	; 0x44
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	461a      	mov	r2, r3
 8008dea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008dec:	61bb      	str	r3, [r7, #24]
 8008dee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008df0:	6979      	ldr	r1, [r7, #20]
 8008df2:	69ba      	ldr	r2, [r7, #24]
 8008df4:	e841 2300 	strex	r3, r2, [r1]
 8008df8:	613b      	str	r3, [r7, #16]
   return(result);
 8008dfa:	693b      	ldr	r3, [r7, #16]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d1e6      	bne.n	8008dce <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	2220      	movs	r2, #32
 8008e04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	2200      	movs	r2, #0
 8008e12:	669a      	str	r2, [r3, #104]	; 0x68
}
 8008e14:	bf00      	nop
 8008e16:	3754      	adds	r7, #84	; 0x54
 8008e18:	46bd      	mov	sp, r7
 8008e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1e:	4770      	bx	lr

08008e20 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b084      	sub	sp, #16
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e2c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	2200      	movs	r2, #0
 8008e32:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	2200      	movs	r2, #0
 8008e3a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008e3e:	68f8      	ldr	r0, [r7, #12]
 8008e40:	f7ff f962 	bl	8008108 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008e44:	bf00      	nop
 8008e46:	3710      	adds	r7, #16
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	bd80      	pop	{r7, pc}

08008e4c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008e4c:	b580      	push	{r7, lr}
 8008e4e:	b088      	sub	sp, #32
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	e853 3f00 	ldrex	r3, [r3]
 8008e60:	60bb      	str	r3, [r7, #8]
   return(result);
 8008e62:	68bb      	ldr	r3, [r7, #8]
 8008e64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008e68:	61fb      	str	r3, [r7, #28]
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	461a      	mov	r2, r3
 8008e70:	69fb      	ldr	r3, [r7, #28]
 8008e72:	61bb      	str	r3, [r7, #24]
 8008e74:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e76:	6979      	ldr	r1, [r7, #20]
 8008e78:	69ba      	ldr	r2, [r7, #24]
 8008e7a:	e841 2300 	strex	r3, r2, [r1]
 8008e7e:	613b      	str	r3, [r7, #16]
   return(result);
 8008e80:	693b      	ldr	r3, [r7, #16]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d1e6      	bne.n	8008e54 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	2220      	movs	r2, #32
 8008e8a:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	2200      	movs	r2, #0
 8008e90:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008e92:	6878      	ldr	r0, [r7, #4]
 8008e94:	f7ff f92e 	bl	80080f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008e98:	bf00      	nop
 8008e9a:	3720      	adds	r7, #32
 8008e9c:	46bd      	mov	sp, r7
 8008e9e:	bd80      	pop	{r7, pc}

08008ea0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	b096      	sub	sp, #88	; 0x58
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008eae:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008eb8:	2b22      	cmp	r3, #34	; 0x22
 8008eba:	f040 8098 	bne.w	8008fee <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ec4:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008ec8:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8008ecc:	b2d9      	uxtb	r1, r3
 8008ece:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008ed2:	b2da      	uxtb	r2, r3
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ed8:	400a      	ands	r2, r1
 8008eda:	b2d2      	uxtb	r2, r2
 8008edc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ee2:	1c5a      	adds	r2, r3, #1
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008eee:	b29b      	uxth	r3, r3
 8008ef0:	3b01      	subs	r3, #1
 8008ef2:	b29a      	uxth	r2, r3
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008f00:	b29b      	uxth	r3, r3
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d17b      	bne.n	8008ffe <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f0e:	e853 3f00 	ldrex	r3, [r3]
 8008f12:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008f14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f16:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008f1a:	653b      	str	r3, [r7, #80]	; 0x50
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	461a      	mov	r2, r3
 8008f22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008f24:	647b      	str	r3, [r7, #68]	; 0x44
 8008f26:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f28:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008f2a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008f2c:	e841 2300 	strex	r3, r2, [r1]
 8008f30:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008f32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d1e6      	bne.n	8008f06 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	3308      	adds	r3, #8
 8008f3e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f42:	e853 3f00 	ldrex	r3, [r3]
 8008f46:	623b      	str	r3, [r7, #32]
   return(result);
 8008f48:	6a3b      	ldr	r3, [r7, #32]
 8008f4a:	f023 0301 	bic.w	r3, r3, #1
 8008f4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	3308      	adds	r3, #8
 8008f56:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008f58:	633a      	str	r2, [r7, #48]	; 0x30
 8008f5a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f5c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008f5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f60:	e841 2300 	strex	r3, r2, [r1]
 8008f64:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d1e5      	bne.n	8008f38 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	2220      	movs	r2, #32
 8008f70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	2200      	movs	r2, #0
 8008f78:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	2200      	movs	r2, #0
 8008f7e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008f84:	2b01      	cmp	r3, #1
 8008f86:	d12e      	bne.n	8008fe6 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f94:	693b      	ldr	r3, [r7, #16]
 8008f96:	e853 3f00 	ldrex	r3, [r3]
 8008f9a:	60fb      	str	r3, [r7, #12]
   return(result);
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	f023 0310 	bic.w	r3, r3, #16
 8008fa2:	64bb      	str	r3, [r7, #72]	; 0x48
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	461a      	mov	r2, r3
 8008faa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008fac:	61fb      	str	r3, [r7, #28]
 8008fae:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fb0:	69b9      	ldr	r1, [r7, #24]
 8008fb2:	69fa      	ldr	r2, [r7, #28]
 8008fb4:	e841 2300 	strex	r3, r2, [r1]
 8008fb8:	617b      	str	r3, [r7, #20]
   return(result);
 8008fba:	697b      	ldr	r3, [r7, #20]
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d1e6      	bne.n	8008f8e <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	69db      	ldr	r3, [r3, #28]
 8008fc6:	f003 0310 	and.w	r3, r3, #16
 8008fca:	2b10      	cmp	r3, #16
 8008fcc:	d103      	bne.n	8008fd6 <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	2210      	movs	r2, #16
 8008fd4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008fdc:	4619      	mov	r1, r3
 8008fde:	6878      	ldr	r0, [r7, #4]
 8008fe0:	f7ff f89c 	bl	800811c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008fe4:	e00b      	b.n	8008ffe <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8008fe6:	6878      	ldr	r0, [r7, #4]
 8008fe8:	f7f8 fc20 	bl	800182c <HAL_UART_RxCpltCallback>
}
 8008fec:	e007      	b.n	8008ffe <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	699a      	ldr	r2, [r3, #24]
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	f042 0208 	orr.w	r2, r2, #8
 8008ffc:	619a      	str	r2, [r3, #24]
}
 8008ffe:	bf00      	nop
 8009000:	3758      	adds	r7, #88	; 0x58
 8009002:	46bd      	mov	sp, r7
 8009004:	bd80      	pop	{r7, pc}

08009006 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009006:	b580      	push	{r7, lr}
 8009008:	b096      	sub	sp, #88	; 0x58
 800900a:	af00      	add	r7, sp, #0
 800900c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009014:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800901e:	2b22      	cmp	r3, #34	; 0x22
 8009020:	f040 8098 	bne.w	8009154 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800902a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009032:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8009034:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8009038:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800903c:	4013      	ands	r3, r2
 800903e:	b29a      	uxth	r2, r3
 8009040:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009042:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009048:	1c9a      	adds	r2, r3, #2
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009054:	b29b      	uxth	r3, r3
 8009056:	3b01      	subs	r3, #1
 8009058:	b29a      	uxth	r2, r3
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009066:	b29b      	uxth	r3, r3
 8009068:	2b00      	cmp	r3, #0
 800906a:	d17b      	bne.n	8009164 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009072:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009074:	e853 3f00 	ldrex	r3, [r3]
 8009078:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800907a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800907c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009080:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	461a      	mov	r2, r3
 8009088:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800908a:	643b      	str	r3, [r7, #64]	; 0x40
 800908c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800908e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009090:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009092:	e841 2300 	strex	r3, r2, [r1]
 8009096:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800909a:	2b00      	cmp	r3, #0
 800909c:	d1e6      	bne.n	800906c <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	3308      	adds	r3, #8
 80090a4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090a6:	6a3b      	ldr	r3, [r7, #32]
 80090a8:	e853 3f00 	ldrex	r3, [r3]
 80090ac:	61fb      	str	r3, [r7, #28]
   return(result);
 80090ae:	69fb      	ldr	r3, [r7, #28]
 80090b0:	f023 0301 	bic.w	r3, r3, #1
 80090b4:	64bb      	str	r3, [r7, #72]	; 0x48
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	3308      	adds	r3, #8
 80090bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80090be:	62fa      	str	r2, [r7, #44]	; 0x2c
 80090c0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090c2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80090c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80090c6:	e841 2300 	strex	r3, r2, [r1]
 80090ca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80090cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d1e5      	bne.n	800909e <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	2220      	movs	r2, #32
 80090d6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	2200      	movs	r2, #0
 80090de:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	2200      	movs	r2, #0
 80090e4:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80090ea:	2b01      	cmp	r3, #1
 80090ec:	d12e      	bne.n	800914c <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	2200      	movs	r2, #0
 80090f2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	e853 3f00 	ldrex	r3, [r3]
 8009100:	60bb      	str	r3, [r7, #8]
   return(result);
 8009102:	68bb      	ldr	r3, [r7, #8]
 8009104:	f023 0310 	bic.w	r3, r3, #16
 8009108:	647b      	str	r3, [r7, #68]	; 0x44
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	461a      	mov	r2, r3
 8009110:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009112:	61bb      	str	r3, [r7, #24]
 8009114:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009116:	6979      	ldr	r1, [r7, #20]
 8009118:	69ba      	ldr	r2, [r7, #24]
 800911a:	e841 2300 	strex	r3, r2, [r1]
 800911e:	613b      	str	r3, [r7, #16]
   return(result);
 8009120:	693b      	ldr	r3, [r7, #16]
 8009122:	2b00      	cmp	r3, #0
 8009124:	d1e6      	bne.n	80090f4 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	69db      	ldr	r3, [r3, #28]
 800912c:	f003 0310 	and.w	r3, r3, #16
 8009130:	2b10      	cmp	r3, #16
 8009132:	d103      	bne.n	800913c <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	2210      	movs	r2, #16
 800913a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009142:	4619      	mov	r1, r3
 8009144:	6878      	ldr	r0, [r7, #4]
 8009146:	f7fe ffe9 	bl	800811c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800914a:	e00b      	b.n	8009164 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 800914c:	6878      	ldr	r0, [r7, #4]
 800914e:	f7f8 fb6d 	bl	800182c <HAL_UART_RxCpltCallback>
}
 8009152:	e007      	b.n	8009164 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	699a      	ldr	r2, [r3, #24]
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	f042 0208 	orr.w	r2, r2, #8
 8009162:	619a      	str	r2, [r3, #24]
}
 8009164:	bf00      	nop
 8009166:	3758      	adds	r7, #88	; 0x58
 8009168:	46bd      	mov	sp, r7
 800916a:	bd80      	pop	{r7, pc}

0800916c <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 800916c:	b580      	push	{r7, lr}
 800916e:	b084      	sub	sp, #16
 8009170:	af00      	add	r7, sp, #0
 8009172:	6078      	str	r0, [r7, #4]
 8009174:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009176:	2300      	movs	r3, #0
 8009178:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 800917a:	6839      	ldr	r1, [r7, #0]
 800917c:	6878      	ldr	r0, [r7, #4]
 800917e:	f001 fce2 	bl	800ab46 <VL53L0X_get_offset_calibration_data_micro_meter>
 8009182:	4603      	mov	r3, r0
 8009184:	73fb      	strb	r3, [r7, #15]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
 8009186:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800918a:	4618      	mov	r0, r3
 800918c:	3710      	adds	r7, #16
 800918e:	46bd      	mov	sp, r7
 8009190:	bd80      	pop	{r7, pc}
	...

08009194 <VL53L0X_DataInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 8009194:	b5b0      	push	{r4, r5, r7, lr}
 8009196:	b096      	sub	sp, #88	; 0x58
 8009198:	af00      	add	r7, sp, #0
 800919a:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800919c:	2300      	movs	r3, #0
 800919e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 80091a2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d107      	bne.n	80091ba <VL53L0X_DataInit+0x26>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 80091aa:	2200      	movs	r2, #0
 80091ac:	2188      	movs	r1, #136	; 0x88
 80091ae:	6878      	ldr	r0, [r7, #4]
 80091b0:	f004 feda 	bl	800df68 <VL53L0X_WrByte>
 80091b4:	4603      	mov	r3, r0
 80091b6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	2200      	movs	r2, #0
 80091be:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80091c8:	f8a3 2152 	strh.w	r2, [r3, #338]	; 0x152

	/* Dmax default Parameter */
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80091d2:	f8a3 2154 	strh.w	r2, [r3, #340]	; 0x154
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	4a9e      	ldr	r2, [pc, #632]	; (8009454 <VL53L0X_DataInit+0x2c0>)
 80091da:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
		(FixPoint1616_t)((0x00016B85))); /* 1.42 No Cover Glass*/

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	4a9d      	ldr	r2, [pc, #628]	; (8009458 <VL53L0X_DataInit+0x2c4>)
 80091e2:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	2200      	movs	r2, #0
 80091ea:	621a      	str	r2, [r3, #32]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 80091ec:	f107 0310 	add.w	r3, r7, #16
 80091f0:	4619      	mov	r1, r3
 80091f2:	6878      	ldr	r0, [r7, #4]
 80091f4:	f000 fac2 	bl	800977c <VL53L0X_GetDeviceParameters>
 80091f8:	4603      	mov	r3, r0
 80091fa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (Status == VL53L0X_ERROR_NONE) {
 80091fe:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009202:	2b00      	cmp	r3, #0
 8009204:	d112      	bne.n	800922c <VL53L0X_DataInit+0x98>
		/* initialize PAL values */
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 8009206:	2300      	movs	r3, #0
 8009208:	743b      	strb	r3, [r7, #16]
		CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 800920a:	2300      	movs	r3, #0
 800920c:	747b      	strb	r3, [r7, #17]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	f103 0410 	add.w	r4, r3, #16
 8009214:	f107 0510 	add.w	r5, r7, #16
 8009218:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800921a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800921c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800921e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009220:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009222:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009224:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8009228:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	2264      	movs	r2, #100	; 0x64
 8009230:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	f44f 7261 	mov.w	r2, #900	; 0x384
 800923a:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8009244:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800924e:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	2201      	movs	r2, #1
 8009256:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150

	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800925a:	2201      	movs	r2, #1
 800925c:	2180      	movs	r1, #128	; 0x80
 800925e:	6878      	ldr	r0, [r7, #4]
 8009260:	f004 fe82 	bl	800df68 <VL53L0X_WrByte>
 8009264:	4603      	mov	r3, r0
 8009266:	461a      	mov	r2, r3
 8009268:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800926c:	4313      	orrs	r3, r2
 800926e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8009272:	2201      	movs	r2, #1
 8009274:	21ff      	movs	r1, #255	; 0xff
 8009276:	6878      	ldr	r0, [r7, #4]
 8009278:	f004 fe76 	bl	800df68 <VL53L0X_WrByte>
 800927c:	4603      	mov	r3, r0
 800927e:	461a      	mov	r2, r3
 8009280:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009284:	4313      	orrs	r3, r2
 8009286:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800928a:	2200      	movs	r2, #0
 800928c:	2100      	movs	r1, #0
 800928e:	6878      	ldr	r0, [r7, #4]
 8009290:	f004 fe6a 	bl	800df68 <VL53L0X_WrByte>
 8009294:	4603      	mov	r3, r0
 8009296:	461a      	mov	r2, r3
 8009298:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800929c:	4313      	orrs	r3, r2
 800929e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 80092a2:	f107 030f 	add.w	r3, r7, #15
 80092a6:	461a      	mov	r2, r3
 80092a8:	2191      	movs	r1, #145	; 0x91
 80092aa:	6878      	ldr	r0, [r7, #4]
 80092ac:	f004 fede 	bl	800e06c <VL53L0X_RdByte>
 80092b0:	4603      	mov	r3, r0
 80092b2:	461a      	mov	r2, r3
 80092b4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80092b8:	4313      	orrs	r3, r2
 80092ba:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	PALDevDataSet(Dev, StopVariable, StopVariable);
 80092be:	7bfa      	ldrb	r2, [r7, #15]
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 80092c6:	2201      	movs	r2, #1
 80092c8:	2100      	movs	r1, #0
 80092ca:	6878      	ldr	r0, [r7, #4]
 80092cc:	f004 fe4c 	bl	800df68 <VL53L0X_WrByte>
 80092d0:	4603      	mov	r3, r0
 80092d2:	461a      	mov	r2, r3
 80092d4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80092d8:	4313      	orrs	r3, r2
 80092da:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80092de:	2200      	movs	r2, #0
 80092e0:	21ff      	movs	r1, #255	; 0xff
 80092e2:	6878      	ldr	r0, [r7, #4]
 80092e4:	f004 fe40 	bl	800df68 <VL53L0X_WrByte>
 80092e8:	4603      	mov	r3, r0
 80092ea:	461a      	mov	r2, r3
 80092ec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80092f0:	4313      	orrs	r3, r2
 80092f2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 80092f6:	2200      	movs	r2, #0
 80092f8:	2180      	movs	r1, #128	; 0x80
 80092fa:	6878      	ldr	r0, [r7, #4]
 80092fc:	f004 fe34 	bl	800df68 <VL53L0X_WrByte>
 8009300:	4603      	mov	r3, r0
 8009302:	461a      	mov	r2, r3
 8009304:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009308:	4313      	orrs	r3, r2
 800930a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800930e:	2300      	movs	r3, #0
 8009310:	653b      	str	r3, [r7, #80]	; 0x50
 8009312:	e014      	b.n	800933e <VL53L0X_DataInit+0x1aa>
		if (Status == VL53L0X_ERROR_NONE)
 8009314:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009318:	2b00      	cmp	r3, #0
 800931a:	d114      	bne.n	8009346 <VL53L0X_DataInit+0x1b2>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 800931c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800931e:	b29b      	uxth	r3, r3
 8009320:	2201      	movs	r2, #1
 8009322:	4619      	mov	r1, r3
 8009324:	6878      	ldr	r0, [r7, #4]
 8009326:	f000 fd35 	bl	8009d94 <VL53L0X_SetLimitCheckEnable>
 800932a:	4603      	mov	r3, r0
 800932c:	461a      	mov	r2, r3
 800932e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009332:	4313      	orrs	r3, r2
 8009334:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8009338:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800933a:	3301      	adds	r3, #1
 800933c:	653b      	str	r3, [r7, #80]	; 0x50
 800933e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009340:	2b05      	cmp	r3, #5
 8009342:	dde7      	ble.n	8009314 <VL53L0X_DataInit+0x180>
 8009344:	e000      	b.n	8009348 <VL53L0X_DataInit+0x1b4>
		else
			break;
 8009346:	bf00      	nop

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 8009348:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800934c:	2b00      	cmp	r3, #0
 800934e:	d107      	bne.n	8009360 <VL53L0X_DataInit+0x1cc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8009350:	2200      	movs	r2, #0
 8009352:	2102      	movs	r1, #2
 8009354:	6878      	ldr	r0, [r7, #4]
 8009356:	f000 fd1d 	bl	8009d94 <VL53L0X_SetLimitCheckEnable>
 800935a:	4603      	mov	r3, r0
 800935c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8009360:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009364:	2b00      	cmp	r3, #0
 8009366:	d107      	bne.n	8009378 <VL53L0X_DataInit+0x1e4>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8009368:	2200      	movs	r2, #0
 800936a:	2103      	movs	r1, #3
 800936c:	6878      	ldr	r0, [r7, #4]
 800936e:	f000 fd11 	bl	8009d94 <VL53L0X_SetLimitCheckEnable>
 8009372:	4603      	mov	r3, r0
 8009374:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8009378:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800937c:	2b00      	cmp	r3, #0
 800937e:	d107      	bne.n	8009390 <VL53L0X_DataInit+0x1fc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8009380:	2200      	movs	r2, #0
 8009382:	2104      	movs	r1, #4
 8009384:	6878      	ldr	r0, [r7, #4]
 8009386:	f000 fd05 	bl	8009d94 <VL53L0X_SetLimitCheckEnable>
 800938a:	4603      	mov	r3, r0
 800938c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8009390:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009394:	2b00      	cmp	r3, #0
 8009396:	d107      	bne.n	80093a8 <VL53L0X_DataInit+0x214>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8009398:	2200      	movs	r2, #0
 800939a:	2105      	movs	r1, #5
 800939c:	6878      	ldr	r0, [r7, #4]
 800939e:	f000 fcf9 	bl	8009d94 <VL53L0X_SetLimitCheckEnable>
 80093a2:	4603      	mov	r3, r0
 80093a4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 80093a8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d108      	bne.n	80093c2 <VL53L0X_DataInit+0x22e>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 80093b0:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 80093b4:	2100      	movs	r1, #0
 80093b6:	6878      	ldr	r0, [r7, #4]
 80093b8:	f000 fd9c 	bl	8009ef4 <VL53L0X_SetLimitCheckValue>
 80093bc:	4603      	mov	r3, r0
 80093be:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80093c2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d108      	bne.n	80093dc <VL53L0X_DataInit+0x248>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 80093ca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80093ce:	2101      	movs	r1, #1
 80093d0:	6878      	ldr	r0, [r7, #4]
 80093d2:	f000 fd8f 	bl	8009ef4 <VL53L0X_SetLimitCheckValue>
 80093d6:	4603      	mov	r3, r0
 80093d8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80093dc:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d108      	bne.n	80093f6 <VL53L0X_DataInit+0x262>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 80093e4:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 80093e8:	2102      	movs	r1, #2
 80093ea:	6878      	ldr	r0, [r7, #4]
 80093ec:	f000 fd82 	bl	8009ef4 <VL53L0X_SetLimitCheckValue>
 80093f0:	4603      	mov	r3, r0
 80093f2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80093f6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d107      	bne.n	800940e <VL53L0X_DataInit+0x27a>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 80093fe:	2200      	movs	r2, #0
 8009400:	2103      	movs	r1, #3
 8009402:	6878      	ldr	r0, [r7, #4]
 8009404:	f000 fd76 	bl	8009ef4 <VL53L0X_SetLimitCheckValue>
 8009408:	4603      	mov	r3, r0
 800940a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800940e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009412:	2b00      	cmp	r3, #0
 8009414:	d10f      	bne.n	8009436 <VL53L0X_DataInit+0x2a2>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	22ff      	movs	r2, #255	; 0xff
 800941a:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800941e:	22ff      	movs	r2, #255	; 0xff
 8009420:	2101      	movs	r1, #1
 8009422:	6878      	ldr	r0, [r7, #4]
 8009424:	f004 fda0 	bl	800df68 <VL53L0X_WrByte>
 8009428:	4603      	mov	r3, r0
 800942a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	2201      	movs	r2, #1
 8009432:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
	}

	if (Status == VL53L0X_ERROR_NONE)
 8009436:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800943a:	2b00      	cmp	r3, #0
 800943c:	d103      	bne.n	8009446 <VL53L0X_DataInit+0x2b2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	2200      	movs	r2, #0
 8009442:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115


	LOG_FUNCTION_END(Status);
	return Status;
 8009446:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 800944a:	4618      	mov	r0, r3
 800944c:	3758      	adds	r7, #88	; 0x58
 800944e:	46bd      	mov	sp, r7
 8009450:	bdb0      	pop	{r4, r5, r7, pc}
 8009452:	bf00      	nop
 8009454:	00016b85 	.word	0x00016b85
 8009458:	000970a4 	.word	0x000970a4

0800945c <VL53L0X_StaticInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev)
{
 800945c:	b5b0      	push	{r4, r5, r7, lr}
 800945e:	b09e      	sub	sp, #120	; 0x78
 8009460:	af02      	add	r7, sp, #8
 8009462:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009464:	2300      	movs	r3, #0
 8009466:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 800946a:	f107 031c 	add.w	r3, r7, #28
 800946e:	2240      	movs	r2, #64	; 0x40
 8009470:	2100      	movs	r1, #0
 8009472:	4618      	mov	r0, r3
 8009474:	f004 fee0 	bl	800e238 <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 8009478:	2300      	movs	r3, #0
 800947a:	837b      	strh	r3, [r7, #26]
	uint8_t tempbyte = 0;
 800947c:	2300      	movs	r3, #0
 800947e:	767b      	strb	r3, [r7, #25]
	uint8_t UseInternalTuningSettings = 0;
 8009480:	2300      	movs	r3, #0
 8009482:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint32_t count = 0;
 8009486:	2300      	movs	r3, #0
 8009488:	663b      	str	r3, [r7, #96]	; 0x60
	uint8_t isApertureSpads = 0;
 800948a:	2300      	movs	r3, #0
 800948c:	763b      	strb	r3, [r7, #24]
	uint32_t refSpadCount = 0;
 800948e:	2300      	movs	r3, #0
 8009490:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 8009492:	2300      	movs	r3, #0
 8009494:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t vcselPulsePeriodPCLK;
	uint32_t seqTimeoutMicroSecs;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 1);
 8009498:	2101      	movs	r1, #1
 800949a:	6878      	ldr	r0, [r7, #4]
 800949c:	f002 faa9 	bl	800b9f2 <VL53L0X_get_info_from_device>
 80094a0:	4603      	mov	r3, r0
 80094a2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 80094ac:	663b      	str	r3, [r7, #96]	; 0x60
		ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 80094b4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		ReferenceSpadType);

	/* NVM value invalid */
	if ((ApertureSpads > 1) ||
 80094b8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80094bc:	2b01      	cmp	r3, #1
 80094be:	d80d      	bhi.n	80094dc <VL53L0X_StaticInit+0x80>
 80094c0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80094c4:	2b01      	cmp	r3, #1
 80094c6:	d102      	bne.n	80094ce <VL53L0X_StaticInit+0x72>
		((ApertureSpads == 1) && (count > 32)) ||
 80094c8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80094ca:	2b20      	cmp	r3, #32
 80094cc:	d806      	bhi.n	80094dc <VL53L0X_StaticInit+0x80>
 80094ce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d10e      	bne.n	80094f4 <VL53L0X_StaticInit+0x98>
		((ApertureSpads == 0) && (count > 12)))
 80094d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80094d8:	2b0c      	cmp	r3, #12
 80094da:	d90b      	bls.n	80094f4 <VL53L0X_StaticInit+0x98>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 80094dc:	f107 0218 	add.w	r2, r7, #24
 80094e0:	f107 0314 	add.w	r3, r7, #20
 80094e4:	4619      	mov	r1, r3
 80094e6:	6878      	ldr	r0, [r7, #4]
 80094e8:	f001 fd28 	bl	800af3c <VL53L0X_perform_ref_spad_management>
 80094ec:	4603      	mov	r3, r0
 80094ee:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 80094f2:	e009      	b.n	8009508 <VL53L0X_StaticInit+0xac>
			&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 80094f4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80094f8:	461a      	mov	r2, r3
 80094fa:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80094fc:	6878      	ldr	r0, [r7, #4]
 80094fe:	f001 ff29 	bl	800b354 <VL53L0X_set_reference_spads>
 8009502:	4603      	mov	r3, r0
 8009504:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 8009508:	4b94      	ldr	r3, [pc, #592]	; (800975c <VL53L0X_StaticInit+0x300>)
 800950a:	66bb      	str	r3, [r7, #104]	; 0x68

	if (Status == VL53L0X_ERROR_NONE) {
 800950c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009510:	2b00      	cmp	r3, #0
 8009512:	d10f      	bne.n	8009534 <VL53L0X_StaticInit+0xd8>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 800951a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 800951e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009522:	2b00      	cmp	r3, #0
 8009524:	d104      	bne.n	8009530 <VL53L0X_StaticInit+0xd4>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 800952c:	66bb      	str	r3, [r7, #104]	; 0x68
 800952e:	e001      	b.n	8009534 <VL53L0X_StaticInit+0xd8>
				pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 8009530:	4b8a      	ldr	r3, [pc, #552]	; (800975c <VL53L0X_StaticInit+0x300>)
 8009532:	66bb      	str	r3, [r7, #104]	; 0x68

	}

	if (Status == VL53L0X_ERROR_NONE)
 8009534:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009538:	2b00      	cmp	r3, #0
 800953a:	d106      	bne.n	800954a <VL53L0X_StaticInit+0xee>
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 800953c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800953e:	6878      	ldr	r0, [r7, #4]
 8009540:	f003 fdfc 	bl	800d13c <VL53L0X_load_tuning_settings>
 8009544:	4603      	mov	r3, r0
 8009546:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 800954a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800954e:	2b00      	cmp	r3, #0
 8009550:	d10a      	bne.n	8009568 <VL53L0X_StaticInit+0x10c>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 8009552:	2300      	movs	r3, #0
 8009554:	9300      	str	r3, [sp, #0]
 8009556:	2304      	movs	r3, #4
 8009558:	2200      	movs	r2, #0
 800955a:	2100      	movs	r1, #0
 800955c:	6878      	ldr	r0, [r7, #4]
 800955e:	f001 f8f1 	bl	800a744 <VL53L0X_SetGpioConfig>
 8009562:	4603      	mov	r3, r0
 8009564:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009568:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800956c:	2b00      	cmp	r3, #0
 800956e:	d121      	bne.n	80095b4 <VL53L0X_StaticInit+0x158>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8009570:	2201      	movs	r2, #1
 8009572:	21ff      	movs	r1, #255	; 0xff
 8009574:	6878      	ldr	r0, [r7, #4]
 8009576:	f004 fcf7 	bl	800df68 <VL53L0X_WrByte>
 800957a:	4603      	mov	r3, r0
 800957c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 8009580:	f107 031a 	add.w	r3, r7, #26
 8009584:	461a      	mov	r2, r3
 8009586:	2184      	movs	r1, #132	; 0x84
 8009588:	6878      	ldr	r0, [r7, #4]
 800958a:	f004 fd99 	bl	800e0c0 <VL53L0X_RdWord>
 800958e:	4603      	mov	r3, r0
 8009590:	461a      	mov	r2, r3
 8009592:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8009596:	4313      	orrs	r3, r2
 8009598:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800959c:	2200      	movs	r2, #0
 800959e:	21ff      	movs	r1, #255	; 0xff
 80095a0:	6878      	ldr	r0, [r7, #4]
 80095a2:	f004 fce1 	bl	800df68 <VL53L0X_WrByte>
 80095a6:	4603      	mov	r3, r0
 80095a8:	461a      	mov	r2, r3
 80095aa:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80095ae:	4313      	orrs	r3, r2
 80095b0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80095b4:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d105      	bne.n	80095c8 <VL53L0X_StaticInit+0x16c>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 80095bc:	8b7b      	ldrh	r3, [r7, #26]
 80095be:	011b      	lsls	r3, r3, #4
 80095c0:	461a      	mov	r2, r3
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
			VL53L0X_FIXPOINT412TOFIXPOINT1616(tempword));
	}

	/* After static init, some device parameters may be changed,
	 * so update them */
	if (Status == VL53L0X_ERROR_NONE)
 80095c8:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d108      	bne.n	80095e2 <VL53L0X_StaticInit+0x186>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 80095d0:	f107 031c 	add.w	r3, r7, #28
 80095d4:	4619      	mov	r1, r3
 80095d6:	6878      	ldr	r0, [r7, #4]
 80095d8:	f000 f8d0 	bl	800977c <VL53L0X_GetDeviceParameters>
 80095dc:	4603      	mov	r3, r0
 80095de:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	if (Status == VL53L0X_ERROR_NONE) {
 80095e2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d110      	bne.n	800960c <VL53L0X_StaticInit+0x1b0>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 80095ea:	f107 0319 	add.w	r3, r7, #25
 80095ee:	4619      	mov	r1, r3
 80095f0:	6878      	ldr	r0, [r7, #4]
 80095f2:	f000 f992 	bl	800991a <VL53L0X_GetFractionEnable>
 80095f6:	4603      	mov	r3, r0
 80095f8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (Status == VL53L0X_ERROR_NONE)
 80095fc:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009600:	2b00      	cmp	r3, #0
 8009602:	d103      	bne.n	800960c <VL53L0X_StaticInit+0x1b0>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 8009604:	7e7a      	ldrb	r2, [r7, #25]
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131

	}

	if (Status == VL53L0X_ERROR_NONE)
 800960c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009610:	2b00      	cmp	r3, #0
 8009612:	d10e      	bne.n	8009632 <VL53L0X_StaticInit+0x1d6>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	f103 0410 	add.w	r4, r3, #16
 800961a:	f107 051c 	add.w	r5, r7, #28
 800961e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009620:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009622:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009624:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009626:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009628:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800962a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800962e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 8009632:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009636:	2b00      	cmp	r3, #0
 8009638:	d111      	bne.n	800965e <VL53L0X_StaticInit+0x202>
		Status = VL53L0X_RdByte(Dev,
 800963a:	f107 0319 	add.w	r3, r7, #25
 800963e:	461a      	mov	r2, r3
 8009640:	2101      	movs	r1, #1
 8009642:	6878      	ldr	r0, [r7, #4]
 8009644:	f004 fd12 	bl	800e06c <VL53L0X_RdByte>
 8009648:	4603      	mov	r3, r0
 800964a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 800964e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009652:	2b00      	cmp	r3, #0
 8009654:	d103      	bne.n	800965e <VL53L0X_StaticInit+0x202>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 8009656:	7e7a      	ldrb	r2, [r7, #25]
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 800965e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009662:	2b00      	cmp	r3, #0
 8009664:	d107      	bne.n	8009676 <VL53L0X_StaticInit+0x21a>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8009666:	2200      	movs	r2, #0
 8009668:	2100      	movs	r1, #0
 800966a:	6878      	ldr	r0, [r7, #4]
 800966c:	f000 f9ca 	bl	8009a04 <VL53L0X_SetSequenceStepEnable>
 8009670:	4603      	mov	r3, r0
 8009672:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					VL53L0X_SEQUENCESTEP_TCC, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8009676:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800967a:	2b00      	cmp	r3, #0
 800967c:	d107      	bne.n	800968e <VL53L0X_StaticInit+0x232>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 800967e:	2200      	movs	r2, #0
 8009680:	2102      	movs	r1, #2
 8009682:	6878      	ldr	r0, [r7, #4]
 8009684:	f000 f9be 	bl	8009a04 <VL53L0X_SetSequenceStepEnable>
 8009688:	4603      	mov	r3, r0
 800968a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_SEQUENCESTEP_MSRC, 0);


	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 800968e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009692:	2b00      	cmp	r3, #0
 8009694:	d103      	bne.n	800969e <VL53L0X_StaticInit+0x242>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	2203      	movs	r2, #3
 800969a:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132



	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 800969e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d109      	bne.n	80096ba <VL53L0X_StaticInit+0x25e>
		Status = VL53L0X_GetVcselPulsePeriod(
 80096a6:	f107 0313 	add.w	r3, r7, #19
 80096aa:	461a      	mov	r2, r3
 80096ac:	2100      	movs	r1, #0
 80096ae:	6878      	ldr	r0, [r7, #4]
 80096b0:	f000 f990 	bl	80099d4 <VL53L0X_GetVcselPulsePeriod>
 80096b4:	4603      	mov	r3, r0
 80096b6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_PRE_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80096ba:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d103      	bne.n	80096ca <VL53L0X_StaticInit+0x26e>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 80096c2:	7cfa      	ldrb	r2, [r7, #19]
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				PreRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 80096ca:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d109      	bne.n	80096e6 <VL53L0X_StaticInit+0x28a>
		Status = VL53L0X_GetVcselPulsePeriod(
 80096d2:	f107 0313 	add.w	r3, r7, #19
 80096d6:	461a      	mov	r2, r3
 80096d8:	2101      	movs	r1, #1
 80096da:	6878      	ldr	r0, [r7, #4]
 80096dc:	f000 f97a 	bl	80099d4 <VL53L0X_GetVcselPulsePeriod>
 80096e0:	4603      	mov	r3, r0
 80096e2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80096e6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d103      	bne.n	80096f6 <VL53L0X_StaticInit+0x29a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 80096ee:	7cfa      	ldrb	r2, [r7, #19]
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				FinalRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 80096f6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d109      	bne.n	8009712 <VL53L0X_StaticInit+0x2b6>
		Status = get_sequence_step_timeout(
 80096fe:	f107 030c 	add.w	r3, r7, #12
 8009702:	461a      	mov	r2, r3
 8009704:	2103      	movs	r1, #3
 8009706:	6878      	ldr	r0, [r7, #4]
 8009708:	f002 fef4 	bl	800c4f4 <get_sequence_step_timeout>
 800970c:	4603      	mov	r3, r0
 800970e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_PRE_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009712:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009716:	2b00      	cmp	r3, #0
 8009718:	d103      	bne.n	8009722 <VL53L0X_StaticInit+0x2c6>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 800971a:	68fa      	ldr	r2, [r7, #12]
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
			PreRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 8009722:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009726:	2b00      	cmp	r3, #0
 8009728:	d109      	bne.n	800973e <VL53L0X_StaticInit+0x2e2>
		Status = get_sequence_step_timeout(
 800972a:	f107 030c 	add.w	r3, r7, #12
 800972e:	461a      	mov	r2, r3
 8009730:	2104      	movs	r1, #4
 8009732:	6878      	ldr	r0, [r7, #4]
 8009734:	f002 fede 	bl	800c4f4 <get_sequence_step_timeout>
 8009738:	4603      	mov	r3, r0
 800973a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800973e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009742:	2b00      	cmp	r3, #0
 8009744:	d103      	bne.n	800974e <VL53L0X_StaticInit+0x2f2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8009746:	68fa      	ldr	r2, [r7, #12]
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
			FinalRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800974e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 8009752:	4618      	mov	r0, r3
 8009754:	3770      	adds	r7, #112	; 0x70
 8009756:	46bd      	mov	sp, r7
 8009758:	bdb0      	pop	{r4, r5, r7, pc}
 800975a:	bf00      	nop
 800975c:	2000000c 	.word	0x2000000c

08009760 <VL53L0X_WaitDeviceBooted>:

VL53L0X_Error VL53L0X_WaitDeviceBooted(VL53L0X_DEV Dev)
{
 8009760:	b480      	push	{r7}
 8009762:	b085      	sub	sp, #20
 8009764:	af00      	add	r7, sp, #0
 8009766:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NOT_IMPLEMENTED;
 8009768:	239d      	movs	r3, #157	; 0x9d
 800976a:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	/* not implemented on VL53L0X */

	LOG_FUNCTION_END(Status);
	return Status;
 800976c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009770:	4618      	mov	r0, r3
 8009772:	3714      	adds	r7, #20
 8009774:	46bd      	mov	sp, r7
 8009776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977a:	4770      	bx	lr

0800977c <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 800977c:	b580      	push	{r7, lr}
 800977e:	b084      	sub	sp, #16
 8009780:	af00      	add	r7, sp, #0
 8009782:	6078      	str	r0, [r7, #4]
 8009784:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009786:	2300      	movs	r3, #0
 8009788:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 800978a:	683b      	ldr	r3, [r7, #0]
 800978c:	4619      	mov	r1, r3
 800978e:	6878      	ldr	r0, [r7, #4]
 8009790:	f000 f8b0 	bl	80098f4 <VL53L0X_GetDeviceMode>
 8009794:	4603      	mov	r3, r0
 8009796:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8009798:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800979c:	2b00      	cmp	r3, #0
 800979e:	d107      	bne.n	80097b0 <VL53L0X_GetDeviceParameters+0x34>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 80097a0:	683b      	ldr	r3, [r7, #0]
 80097a2:	3308      	adds	r3, #8
 80097a4:	4619      	mov	r1, r3
 80097a6:	6878      	ldr	r0, [r7, #4]
 80097a8:	f000 fa78 	bl	8009c9c <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 80097ac:	4603      	mov	r3, r0
 80097ae:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 80097b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d102      	bne.n	80097be <VL53L0X_GetDeviceParameters+0x42>
		pDeviceParameters->XTalkCompensationEnable = 0;
 80097b8:	683b      	ldr	r3, [r7, #0]
 80097ba:	2200      	movs	r2, #0
 80097bc:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 80097be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d107      	bne.n	80097d6 <VL53L0X_GetDeviceParameters+0x5a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 80097c6:	683b      	ldr	r3, [r7, #0]
 80097c8:	3310      	adds	r3, #16
 80097ca:	4619      	mov	r1, r3
 80097cc:	6878      	ldr	r0, [r7, #4]
 80097ce:	f000 faae 	bl	8009d2e <VL53L0X_GetXTalkCompensationRateMegaCps>
 80097d2:	4603      	mov	r3, r0
 80097d4:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 80097d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d107      	bne.n	80097ee <VL53L0X_GetDeviceParameters+0x72>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 80097de:	683b      	ldr	r3, [r7, #0]
 80097e0:	3314      	adds	r3, #20
 80097e2:	4619      	mov	r1, r3
 80097e4:	6878      	ldr	r0, [r7, #4]
 80097e6:	f7ff fcc1 	bl	800916c <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 80097ea:	4603      	mov	r3, r0
 80097ec:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 80097ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d134      	bne.n	8009860 <VL53L0X_GetDeviceParameters+0xe4>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80097f6:	2300      	movs	r3, #0
 80097f8:	60bb      	str	r3, [r7, #8]
 80097fa:	e02a      	b.n	8009852 <VL53L0X_GetDeviceParameters+0xd6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 80097fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009800:	2b00      	cmp	r3, #0
 8009802:	d12a      	bne.n	800985a <VL53L0X_GetDeviceParameters+0xde>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 8009804:	68bb      	ldr	r3, [r7, #8]
 8009806:	b299      	uxth	r1, r3
 8009808:	68bb      	ldr	r3, [r7, #8]
 800980a:	3308      	adds	r3, #8
 800980c:	009b      	lsls	r3, r3, #2
 800980e:	683a      	ldr	r2, [r7, #0]
 8009810:	4413      	add	r3, r2
 8009812:	3304      	adds	r3, #4
 8009814:	461a      	mov	r2, r3
 8009816:	6878      	ldr	r0, [r7, #4]
 8009818:	f000 fbce 	bl	8009fb8 <VL53L0X_GetLimitCheckValue>
 800981c:	4603      	mov	r3, r0
 800981e:	461a      	mov	r2, r3
 8009820:	7bfb      	ldrb	r3, [r7, #15]
 8009822:	4313      	orrs	r3, r2
 8009824:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 8009826:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800982a:	2b00      	cmp	r3, #0
 800982c:	d117      	bne.n	800985e <VL53L0X_GetDeviceParameters+0xe2>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 800982e:	68bb      	ldr	r3, [r7, #8]
 8009830:	b299      	uxth	r1, r3
 8009832:	68bb      	ldr	r3, [r7, #8]
 8009834:	3318      	adds	r3, #24
 8009836:	683a      	ldr	r2, [r7, #0]
 8009838:	4413      	add	r3, r2
 800983a:	461a      	mov	r2, r3
 800983c:	6878      	ldr	r0, [r7, #4]
 800983e:	f000 fb35 	bl	8009eac <VL53L0X_GetLimitCheckEnable>
 8009842:	4603      	mov	r3, r0
 8009844:	461a      	mov	r2, r3
 8009846:	7bfb      	ldrb	r3, [r7, #15]
 8009848:	4313      	orrs	r3, r2
 800984a:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800984c:	68bb      	ldr	r3, [r7, #8]
 800984e:	3301      	adds	r3, #1
 8009850:	60bb      	str	r3, [r7, #8]
 8009852:	68bb      	ldr	r3, [r7, #8]
 8009854:	2b05      	cmp	r3, #5
 8009856:	ddd1      	ble.n	80097fc <VL53L0X_GetDeviceParameters+0x80>
 8009858:	e002      	b.n	8009860 <VL53L0X_GetDeviceParameters+0xe4>
				break;
 800985a:	bf00      	nop
 800985c:	e000      	b.n	8009860 <VL53L0X_GetDeviceParameters+0xe4>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 800985e:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009860:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009864:	2b00      	cmp	r3, #0
 8009866:	d107      	bne.n	8009878 <VL53L0X_GetDeviceParameters+0xfc>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 8009868:	683b      	ldr	r3, [r7, #0]
 800986a:	333c      	adds	r3, #60	; 0x3c
 800986c:	4619      	mov	r1, r3
 800986e:	6878      	ldr	r0, [r7, #4]
 8009870:	f000 fc30 	bl	800a0d4 <VL53L0X_GetWrapAroundCheckEnable>
 8009874:	4603      	mov	r3, r0
 8009876:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 8009878:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800987c:	2b00      	cmp	r3, #0
 800987e:	d107      	bne.n	8009890 <VL53L0X_GetDeviceParameters+0x114>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 8009880:	683b      	ldr	r3, [r7, #0]
 8009882:	3304      	adds	r3, #4
 8009884:	4619      	mov	r1, r3
 8009886:	6878      	ldr	r0, [r7, #4]
 8009888:	f000 f879 	bl	800997e <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 800988c:	4603      	mov	r3, r0
 800988e:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009890:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009894:	4618      	mov	r0, r3
 8009896:	3710      	adds	r7, #16
 8009898:	46bd      	mov	sp, r7
 800989a:	bd80      	pop	{r7, pc}

0800989c <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode)
{
 800989c:	b480      	push	{r7}
 800989e:	b085      	sub	sp, #20
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	6078      	str	r0, [r7, #4]
 80098a4:	460b      	mov	r3, r1
 80098a6:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80098a8:	2300      	movs	r3, #0
 80098aa:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 80098ac:	78fb      	ldrb	r3, [r7, #3]
 80098ae:	2b15      	cmp	r3, #21
 80098b0:	bf8c      	ite	hi
 80098b2:	2201      	movhi	r2, #1
 80098b4:	2200      	movls	r2, #0
 80098b6:	b2d2      	uxtb	r2, r2
 80098b8:	2a00      	cmp	r2, #0
 80098ba:	d10e      	bne.n	80098da <VL53L0X_SetDeviceMode+0x3e>
 80098bc:	2201      	movs	r2, #1
 80098be:	409a      	lsls	r2, r3
 80098c0:	4b0b      	ldr	r3, [pc, #44]	; (80098f0 <VL53L0X_SetDeviceMode+0x54>)
 80098c2:	4013      	ands	r3, r2
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	bf14      	ite	ne
 80098c8:	2301      	movne	r3, #1
 80098ca:	2300      	moveq	r3, #0
 80098cc:	b2db      	uxtb	r3, r3
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d003      	beq.n	80098da <VL53L0X_SetDeviceMode+0x3e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	78fa      	ldrb	r2, [r7, #3]
 80098d6:	741a      	strb	r2, [r3, #16]
		break;
 80098d8:	e001      	b.n	80098de <VL53L0X_SetDeviceMode+0x42>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 80098da:	23f8      	movs	r3, #248	; 0xf8
 80098dc:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80098de:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80098e2:	4618      	mov	r0, r3
 80098e4:	3714      	adds	r7, #20
 80098e6:	46bd      	mov	sp, r7
 80098e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ec:	4770      	bx	lr
 80098ee:	bf00      	nop
 80098f0:	0030000b 	.word	0x0030000b

080098f4 <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 80098f4:	b480      	push	{r7}
 80098f6:	b085      	sub	sp, #20
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	6078      	str	r0, [r7, #4]
 80098fc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80098fe:	2300      	movs	r3, #0
 8009900:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	7c1a      	ldrb	r2, [r3, #16]
 8009906:	683b      	ldr	r3, [r7, #0]
 8009908:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800990a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800990e:	4618      	mov	r0, r3
 8009910:	3714      	adds	r7, #20
 8009912:	46bd      	mov	sp, r7
 8009914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009918:	4770      	bx	lr

0800991a <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 800991a:	b580      	push	{r7, lr}
 800991c:	b084      	sub	sp, #16
 800991e:	af00      	add	r7, sp, #0
 8009920:	6078      	str	r0, [r7, #4]
 8009922:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009924:	2300      	movs	r3, #0
 8009926:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 8009928:	683a      	ldr	r2, [r7, #0]
 800992a:	2109      	movs	r1, #9
 800992c:	6878      	ldr	r0, [r7, #4]
 800992e:	f004 fb9d 	bl	800e06c <VL53L0X_RdByte>
 8009932:	4603      	mov	r3, r0
 8009934:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8009936:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800993a:	2b00      	cmp	r3, #0
 800993c:	d106      	bne.n	800994c <VL53L0X_GetFractionEnable+0x32>
		*pEnabled = (*pEnabled & 1);
 800993e:	683b      	ldr	r3, [r7, #0]
 8009940:	781b      	ldrb	r3, [r3, #0]
 8009942:	f003 0301 	and.w	r3, r3, #1
 8009946:	b2da      	uxtb	r2, r3
 8009948:	683b      	ldr	r3, [r7, #0]
 800994a:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800994c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009950:	4618      	mov	r0, r3
 8009952:	3710      	adds	r7, #16
 8009954:	46bd      	mov	sp, r7
 8009956:	bd80      	pop	{r7, pc}

08009958 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8009958:	b580      	push	{r7, lr}
 800995a:	b084      	sub	sp, #16
 800995c:	af00      	add	r7, sp, #0
 800995e:	6078      	str	r0, [r7, #4]
 8009960:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009962:	2300      	movs	r3, #0
 8009964:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 8009966:	6839      	ldr	r1, [r7, #0]
 8009968:	6878      	ldr	r0, [r7, #4]
 800996a:	f003 fa56 	bl	800ce1a <VL53L0X_set_measurement_timing_budget_micro_seconds>
 800996e:	4603      	mov	r3, r0
 8009970:	73fb      	strb	r3, [r7, #15]
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);

	return Status;
 8009972:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009976:	4618      	mov	r0, r3
 8009978:	3710      	adds	r7, #16
 800997a:	46bd      	mov	sp, r7
 800997c:	bd80      	pop	{r7, pc}

0800997e <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800997e:	b580      	push	{r7, lr}
 8009980:	b084      	sub	sp, #16
 8009982:	af00      	add	r7, sp, #0
 8009984:	6078      	str	r0, [r7, #4]
 8009986:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009988:	2300      	movs	r3, #0
 800998a:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 800998c:	6839      	ldr	r1, [r7, #0]
 800998e:	6878      	ldr	r0, [r7, #4]
 8009990:	f003 fb23 	bl	800cfda <VL53L0X_get_measurement_timing_budget_micro_seconds>
 8009994:	4603      	mov	r3, r0
 8009996:	73fb      	strb	r3, [r7, #15]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 8009998:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800999c:	4618      	mov	r0, r3
 800999e:	3710      	adds	r7, #16
 80099a0:	46bd      	mov	sp, r7
 80099a2:	bd80      	pop	{r7, pc}

080099a4 <VL53L0X_SetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_SetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 80099a4:	b580      	push	{r7, lr}
 80099a6:	b084      	sub	sp, #16
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	6078      	str	r0, [r7, #4]
 80099ac:	460b      	mov	r3, r1
 80099ae:	70fb      	strb	r3, [r7, #3]
 80099b0:	4613      	mov	r3, r2
 80099b2:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80099b4:	2300      	movs	r3, #0
 80099b6:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_vcsel_pulse_period(Dev, VcselPeriodType,
 80099b8:	78ba      	ldrb	r2, [r7, #2]
 80099ba:	78fb      	ldrb	r3, [r7, #3]
 80099bc:	4619      	mov	r1, r3
 80099be:	6878      	ldr	r0, [r7, #4]
 80099c0:	f002 ff6b 	bl	800c89a <VL53L0X_set_vcsel_pulse_period>
 80099c4:	4603      	mov	r3, r0
 80099c6:	73fb      	strb	r3, [r7, #15]
		VCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 80099c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80099cc:	4618      	mov	r0, r3
 80099ce:	3710      	adds	r7, #16
 80099d0:	46bd      	mov	sp, r7
 80099d2:	bd80      	pop	{r7, pc}

080099d4 <VL53L0X_GetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 80099d4:	b580      	push	{r7, lr}
 80099d6:	b086      	sub	sp, #24
 80099d8:	af00      	add	r7, sp, #0
 80099da:	60f8      	str	r0, [r7, #12]
 80099dc:	460b      	mov	r3, r1
 80099de:	607a      	str	r2, [r7, #4]
 80099e0:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80099e2:	2300      	movs	r3, #0
 80099e4:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 80099e6:	7afb      	ldrb	r3, [r7, #11]
 80099e8:	687a      	ldr	r2, [r7, #4]
 80099ea:	4619      	mov	r1, r3
 80099ec:	68f8      	ldr	r0, [r7, #12]
 80099ee:	f003 f9dd 	bl	800cdac <VL53L0X_get_vcsel_pulse_period>
 80099f2:	4603      	mov	r3, r0
 80099f4:	75fb      	strb	r3, [r7, #23]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 80099f6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80099fa:	4618      	mov	r0, r3
 80099fc:	3718      	adds	r7, #24
 80099fe:	46bd      	mov	sp, r7
 8009a00:	bd80      	pop	{r7, pc}
	...

08009a04 <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 8009a04:	b580      	push	{r7, lr}
 8009a06:	b086      	sub	sp, #24
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	6078      	str	r0, [r7, #4]
 8009a0c:	460b      	mov	r3, r1
 8009a0e:	70fb      	strb	r3, [r7, #3]
 8009a10:	4613      	mov	r3, r2
 8009a12:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009a14:	2300      	movs	r3, #0
 8009a16:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8009a18:	2300      	movs	r3, #0
 8009a1a:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfigNew = 0;
 8009a1c:	2300      	movs	r3, #0
 8009a1e:	75bb      	strb	r3, [r7, #22]
	uint32_t MeasurementTimingBudgetMicroSeconds;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8009a20:	f107 030f 	add.w	r3, r7, #15
 8009a24:	461a      	mov	r2, r3
 8009a26:	2101      	movs	r1, #1
 8009a28:	6878      	ldr	r0, [r7, #4]
 8009a2a:	f004 fb1f 	bl	800e06c <VL53L0X_RdByte>
 8009a2e:	4603      	mov	r3, r0
 8009a30:	75fb      	strb	r3, [r7, #23]
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 8009a32:	7bfb      	ldrb	r3, [r7, #15]
 8009a34:	75bb      	strb	r3, [r7, #22]

	if (Status == VL53L0X_ERROR_NONE) {
 8009a36:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d15a      	bne.n	8009af4 <VL53L0X_SetSequenceStepEnable+0xf0>
		if (SequenceStepEnabled == 1) {
 8009a3e:	78bb      	ldrb	r3, [r7, #2]
 8009a40:	2b01      	cmp	r3, #1
 8009a42:	d12b      	bne.n	8009a9c <VL53L0X_SetSequenceStepEnable+0x98>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 8009a44:	78fb      	ldrb	r3, [r7, #3]
 8009a46:	2b04      	cmp	r3, #4
 8009a48:	d825      	bhi.n	8009a96 <VL53L0X_SetSequenceStepEnable+0x92>
 8009a4a:	a201      	add	r2, pc, #4	; (adr r2, 8009a50 <VL53L0X_SetSequenceStepEnable+0x4c>)
 8009a4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a50:	08009a65 	.word	0x08009a65
 8009a54:	08009a6f 	.word	0x08009a6f
 8009a58:	08009a79 	.word	0x08009a79
 8009a5c:	08009a83 	.word	0x08009a83
 8009a60:	08009a8d 	.word	0x08009a8d
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 8009a64:	7dbb      	ldrb	r3, [r7, #22]
 8009a66:	f043 0310 	orr.w	r3, r3, #16
 8009a6a:	75bb      	strb	r3, [r7, #22]
				break;
 8009a6c:	e043      	b.n	8009af6 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 8009a6e:	7dbb      	ldrb	r3, [r7, #22]
 8009a70:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8009a74:	75bb      	strb	r3, [r7, #22]
				break;
 8009a76:	e03e      	b.n	8009af6 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 8009a78:	7dbb      	ldrb	r3, [r7, #22]
 8009a7a:	f043 0304 	orr.w	r3, r3, #4
 8009a7e:	75bb      	strb	r3, [r7, #22]
				break;
 8009a80:	e039      	b.n	8009af6 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 8009a82:	7dbb      	ldrb	r3, [r7, #22]
 8009a84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a88:	75bb      	strb	r3, [r7, #22]
				break;
 8009a8a:	e034      	b.n	8009af6 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 8009a8c:	7dbb      	ldrb	r3, [r7, #22]
 8009a8e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009a92:	75bb      	strb	r3, [r7, #22]
				break;
 8009a94:	e02f      	b.n	8009af6 <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009a96:	23fc      	movs	r3, #252	; 0xfc
 8009a98:	75fb      	strb	r3, [r7, #23]
 8009a9a:	e02c      	b.n	8009af6 <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 8009a9c:	78fb      	ldrb	r3, [r7, #3]
 8009a9e:	2b04      	cmp	r3, #4
 8009aa0:	d825      	bhi.n	8009aee <VL53L0X_SetSequenceStepEnable+0xea>
 8009aa2:	a201      	add	r2, pc, #4	; (adr r2, 8009aa8 <VL53L0X_SetSequenceStepEnable+0xa4>)
 8009aa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009aa8:	08009abd 	.word	0x08009abd
 8009aac:	08009ac7 	.word	0x08009ac7
 8009ab0:	08009ad1 	.word	0x08009ad1
 8009ab4:	08009adb 	.word	0x08009adb
 8009ab8:	08009ae5 	.word	0x08009ae5
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 8009abc:	7dbb      	ldrb	r3, [r7, #22]
 8009abe:	f023 0310 	bic.w	r3, r3, #16
 8009ac2:	75bb      	strb	r3, [r7, #22]
				break;
 8009ac4:	e017      	b.n	8009af6 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 8009ac6:	7dbb      	ldrb	r3, [r7, #22]
 8009ac8:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8009acc:	75bb      	strb	r3, [r7, #22]
				break;
 8009ace:	e012      	b.n	8009af6 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 8009ad0:	7dbb      	ldrb	r3, [r7, #22]
 8009ad2:	f023 0304 	bic.w	r3, r3, #4
 8009ad6:	75bb      	strb	r3, [r7, #22]
				break;
 8009ad8:	e00d      	b.n	8009af6 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 8009ada:	7dbb      	ldrb	r3, [r7, #22]
 8009adc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009ae0:	75bb      	strb	r3, [r7, #22]
				break;
 8009ae2:	e008      	b.n	8009af6 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 8009ae4:	7dbb      	ldrb	r3, [r7, #22]
 8009ae6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009aea:	75bb      	strb	r3, [r7, #22]
				break;
 8009aec:	e003      	b.n	8009af6 <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009aee:	23fc      	movs	r3, #252	; 0xfc
 8009af0:	75fb      	strb	r3, [r7, #23]
 8009af2:	e000      	b.n	8009af6 <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		}
 8009af4:	bf00      	nop
	}

	if (SequenceConfigNew != SequenceConfig) {
 8009af6:	7bfb      	ldrb	r3, [r7, #15]
 8009af8:	7dba      	ldrb	r2, [r7, #22]
 8009afa:	429a      	cmp	r2, r3
 8009afc:	d01e      	beq.n	8009b3c <VL53L0X_SetSequenceStepEnable+0x138>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 8009afe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d107      	bne.n	8009b16 <VL53L0X_SetSequenceStepEnable+0x112>
			Status = VL53L0X_WrByte(Dev,
 8009b06:	7dbb      	ldrb	r3, [r7, #22]
 8009b08:	461a      	mov	r2, r3
 8009b0a:	2101      	movs	r1, #1
 8009b0c:	6878      	ldr	r0, [r7, #4]
 8009b0e:	f004 fa2b 	bl	800df68 <VL53L0X_WrByte>
 8009b12:	4603      	mov	r3, r0
 8009b14:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 8009b16:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d103      	bne.n	8009b26 <VL53L0X_SetSequenceStepEnable+0x122>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	7dba      	ldrb	r2, [r7, #22]
 8009b22:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130


		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 8009b26:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d106      	bne.n	8009b3c <VL53L0X_SetSequenceStepEnable+0x138>
			VL53L0X_GETPARAMETERFIELD(Dev,
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	695b      	ldr	r3, [r3, #20]
 8009b32:	613b      	str	r3, [r7, #16]
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 8009b34:	6939      	ldr	r1, [r7, #16]
 8009b36:	6878      	ldr	r0, [r7, #4]
 8009b38:	f7ff ff0e 	bl	8009958 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		}
	}

	LOG_FUNCTION_END(Status);

	return Status;
 8009b3c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009b40:	4618      	mov	r0, r3
 8009b42:	3718      	adds	r7, #24
 8009b44:	46bd      	mov	sp, r7
 8009b46:	bd80      	pop	{r7, pc}

08009b48 <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 8009b48:	b480      	push	{r7}
 8009b4a:	b087      	sub	sp, #28
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	60f8      	str	r0, [r7, #12]
 8009b50:	607b      	str	r3, [r7, #4]
 8009b52:	460b      	mov	r3, r1
 8009b54:	72fb      	strb	r3, [r7, #11]
 8009b56:	4613      	mov	r3, r2
 8009b58:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009b5a:	2300      	movs	r3, #0
 8009b5c:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	2200      	movs	r2, #0
 8009b62:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 8009b64:	7afb      	ldrb	r3, [r7, #11]
 8009b66:	2b04      	cmp	r3, #4
 8009b68:	d836      	bhi.n	8009bd8 <sequence_step_enabled+0x90>
 8009b6a:	a201      	add	r2, pc, #4	; (adr r2, 8009b70 <sequence_step_enabled+0x28>)
 8009b6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b70:	08009b85 	.word	0x08009b85
 8009b74:	08009b97 	.word	0x08009b97
 8009b78:	08009ba9 	.word	0x08009ba9
 8009b7c:	08009bbb 	.word	0x08009bbb
 8009b80:	08009bcd 	.word	0x08009bcd
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 8009b84:	7abb      	ldrb	r3, [r7, #10]
 8009b86:	111b      	asrs	r3, r3, #4
 8009b88:	b2db      	uxtb	r3, r3
 8009b8a:	f003 0301 	and.w	r3, r3, #1
 8009b8e:	b2da      	uxtb	r2, r3
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	701a      	strb	r2, [r3, #0]
		break;
 8009b94:	e022      	b.n	8009bdc <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 8009b96:	7abb      	ldrb	r3, [r7, #10]
 8009b98:	10db      	asrs	r3, r3, #3
 8009b9a:	b2db      	uxtb	r3, r3
 8009b9c:	f003 0301 	and.w	r3, r3, #1
 8009ba0:	b2da      	uxtb	r2, r3
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	701a      	strb	r2, [r3, #0]
		break;
 8009ba6:	e019      	b.n	8009bdc <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 8009ba8:	7abb      	ldrb	r3, [r7, #10]
 8009baa:	109b      	asrs	r3, r3, #2
 8009bac:	b2db      	uxtb	r3, r3
 8009bae:	f003 0301 	and.w	r3, r3, #1
 8009bb2:	b2da      	uxtb	r2, r3
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	701a      	strb	r2, [r3, #0]
		break;
 8009bb8:	e010      	b.n	8009bdc <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 8009bba:	7abb      	ldrb	r3, [r7, #10]
 8009bbc:	119b      	asrs	r3, r3, #6
 8009bbe:	b2db      	uxtb	r3, r3
 8009bc0:	f003 0301 	and.w	r3, r3, #1
 8009bc4:	b2da      	uxtb	r2, r3
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	701a      	strb	r2, [r3, #0]
		break;
 8009bca:	e007      	b.n	8009bdc <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 8009bcc:	7abb      	ldrb	r3, [r7, #10]
 8009bce:	09db      	lsrs	r3, r3, #7
 8009bd0:	b2da      	uxtb	r2, r3
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	701a      	strb	r2, [r3, #0]
		break;
 8009bd6:	e001      	b.n	8009bdc <sequence_step_enabled+0x94>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009bd8:	23fc      	movs	r3, #252	; 0xfc
 8009bda:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009bdc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009be0:	4618      	mov	r0, r3
 8009be2:	371c      	adds	r7, #28
 8009be4:	46bd      	mov	sp, r7
 8009be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bea:	4770      	bx	lr

08009bec <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 8009bec:	b580      	push	{r7, lr}
 8009bee:	b084      	sub	sp, #16
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	6078      	str	r0, [r7, #4]
 8009bf4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009bf6:	2300      	movs	r3, #0
 8009bf8:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	73bb      	strb	r3, [r7, #14]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8009bfe:	f107 030e 	add.w	r3, r7, #14
 8009c02:	461a      	mov	r2, r3
 8009c04:	2101      	movs	r1, #1
 8009c06:	6878      	ldr	r0, [r7, #4]
 8009c08:	f004 fa30 	bl	800e06c <VL53L0X_RdByte>
 8009c0c:	4603      	mov	r3, r0
 8009c0e:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 8009c10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d107      	bne.n	8009c28 <VL53L0X_GetSequenceStepEnables+0x3c>
		Status = sequence_step_enabled(Dev,
 8009c18:	7bba      	ldrb	r2, [r7, #14]
 8009c1a:	683b      	ldr	r3, [r7, #0]
 8009c1c:	2100      	movs	r1, #0
 8009c1e:	6878      	ldr	r0, [r7, #4]
 8009c20:	f7ff ff92 	bl	8009b48 <sequence_step_enabled>
 8009c24:	4603      	mov	r3, r0
 8009c26:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8009c28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d108      	bne.n	8009c42 <VL53L0X_GetSequenceStepEnables+0x56>
		Status = sequence_step_enabled(Dev,
 8009c30:	7bba      	ldrb	r2, [r7, #14]
 8009c32:	683b      	ldr	r3, [r7, #0]
 8009c34:	3302      	adds	r3, #2
 8009c36:	2101      	movs	r1, #1
 8009c38:	6878      	ldr	r0, [r7, #4]
 8009c3a:	f7ff ff85 	bl	8009b48 <sequence_step_enabled>
 8009c3e:	4603      	mov	r3, r0
 8009c40:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8009c42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d108      	bne.n	8009c5c <VL53L0X_GetSequenceStepEnables+0x70>
		Status = sequence_step_enabled(Dev,
 8009c4a:	7bba      	ldrb	r2, [r7, #14]
 8009c4c:	683b      	ldr	r3, [r7, #0]
 8009c4e:	3301      	adds	r3, #1
 8009c50:	2102      	movs	r1, #2
 8009c52:	6878      	ldr	r0, [r7, #4]
 8009c54:	f7ff ff78 	bl	8009b48 <sequence_step_enabled>
 8009c58:	4603      	mov	r3, r0
 8009c5a:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8009c5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d108      	bne.n	8009c76 <VL53L0X_GetSequenceStepEnables+0x8a>
		Status = sequence_step_enabled(Dev,
 8009c64:	7bba      	ldrb	r2, [r7, #14]
 8009c66:	683b      	ldr	r3, [r7, #0]
 8009c68:	3303      	adds	r3, #3
 8009c6a:	2103      	movs	r1, #3
 8009c6c:	6878      	ldr	r0, [r7, #4]
 8009c6e:	f7ff ff6b 	bl	8009b48 <sequence_step_enabled>
 8009c72:	4603      	mov	r3, r0
 8009c74:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8009c76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d108      	bne.n	8009c90 <VL53L0X_GetSequenceStepEnables+0xa4>
		Status = sequence_step_enabled(Dev,
 8009c7e:	7bba      	ldrb	r2, [r7, #14]
 8009c80:	683b      	ldr	r3, [r7, #0]
 8009c82:	3304      	adds	r3, #4
 8009c84:	2104      	movs	r1, #4
 8009c86:	6878      	ldr	r0, [r7, #4]
 8009c88:	f7ff ff5e 	bl	8009b48 <sequence_step_enabled>
 8009c8c:	4603      	mov	r3, r0
 8009c8e:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009c90:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009c94:	4618      	mov	r0, r3
 8009c96:	3710      	adds	r7, #16
 8009c98:	46bd      	mov	sp, r7
 8009c9a:	bd80      	pop	{r7, pc}

08009c9c <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 8009c9c:	b580      	push	{r7, lr}
 8009c9e:	b084      	sub	sp, #16
 8009ca0:	af00      	add	r7, sp, #0
 8009ca2:	6078      	str	r0, [r7, #4]
 8009ca4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009ca6:	2300      	movs	r3, #0
 8009ca8:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 8009caa:	f107 030c 	add.w	r3, r7, #12
 8009cae:	461a      	mov	r2, r3
 8009cb0:	21f8      	movs	r1, #248	; 0xf8
 8009cb2:	6878      	ldr	r0, [r7, #4]
 8009cb4:	f004 fa04 	bl	800e0c0 <VL53L0X_RdWord>
 8009cb8:	4603      	mov	r3, r0
 8009cba:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 8009cbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d108      	bne.n	8009cd6 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
		Status = VL53L0X_RdDWord(Dev,
 8009cc4:	f107 0308 	add.w	r3, r7, #8
 8009cc8:	461a      	mov	r2, r3
 8009cca:	2104      	movs	r1, #4
 8009ccc:	6878      	ldr	r0, [r7, #4]
 8009cce:	f004 fa2f 	bl	800e130 <VL53L0X_RdDWord>
 8009cd2:	4603      	mov	r3, r0
 8009cd4:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009cd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d10c      	bne.n	8009cf8 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
		if (osc_calibrate_val != 0) {
 8009cde:	89bb      	ldrh	r3, [r7, #12]
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d005      	beq.n	8009cf0 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 8009ce4:	68bb      	ldr	r3, [r7, #8]
 8009ce6:	89ba      	ldrh	r2, [r7, #12]
 8009ce8:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 8009cec:	683b      	ldr	r3, [r7, #0]
 8009cee:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 8009cf0:	683b      	ldr	r3, [r7, #0]
 8009cf2:	681a      	ldr	r2, [r3, #0]
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009cf8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009cfc:	4618      	mov	r0, r3
 8009cfe:	3710      	adds	r7, #16
 8009d00:	46bd      	mov	sp, r7
 8009d02:	bd80      	pop	{r7, pc}

08009d04 <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 8009d04:	b480      	push	{r7}
 8009d06:	b085      	sub	sp, #20
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	6078      	str	r0, [r7, #4]
 8009d0c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009d0e:	2300      	movs	r3, #0
 8009d10:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	7f1b      	ldrb	r3, [r3, #28]
 8009d16:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 8009d18:	683b      	ldr	r3, [r7, #0]
 8009d1a:	7bba      	ldrb	r2, [r7, #14]
 8009d1c:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8009d1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009d22:	4618      	mov	r0, r3
 8009d24:	3714      	adds	r7, #20
 8009d26:	46bd      	mov	sp, r7
 8009d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d2c:	4770      	bx	lr

08009d2e <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 8009d2e:	b580      	push	{r7, lr}
 8009d30:	b086      	sub	sp, #24
 8009d32:	af00      	add	r7, sp, #0
 8009d34:	6078      	str	r0, [r7, #4]
 8009d36:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009d38:	2300      	movs	r3, #0
 8009d3a:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 8009d3c:	f107 030e 	add.w	r3, r7, #14
 8009d40:	461a      	mov	r2, r3
 8009d42:	2120      	movs	r1, #32
 8009d44:	6878      	ldr	r0, [r7, #4]
 8009d46:	f004 f9bb 	bl	800e0c0 <VL53L0X_RdWord>
 8009d4a:	4603      	mov	r3, r0
 8009d4c:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 8009d4e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d118      	bne.n	8009d88 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		if (Value == 0) {
 8009d56:	89fb      	ldrh	r3, [r7, #14]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d109      	bne.n	8009d70 <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	6a1b      	ldr	r3, [r3, #32]
 8009d60:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8009d62:	683b      	ldr	r3, [r7, #0]
 8009d64:	693a      	ldr	r2, [r7, #16]
 8009d66:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	2200      	movs	r2, #0
 8009d6c:	771a      	strb	r2, [r3, #28]
 8009d6e:	e00b      	b.n	8009d88 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 8009d70:	89fb      	ldrh	r3, [r7, #14]
 8009d72:	00db      	lsls	r3, r3, #3
 8009d74:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8009d76:	683b      	ldr	r3, [r7, #0]
 8009d78:	693a      	ldr	r2, [r7, #16]
 8009d7a:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	693a      	ldr	r2, [r7, #16]
 8009d80:	621a      	str	r2, [r3, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	2201      	movs	r2, #1
 8009d86:	771a      	strb	r2, [r3, #28]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009d88:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009d8c:	4618      	mov	r0, r3
 8009d8e:	3718      	adds	r7, #24
 8009d90:	46bd      	mov	sp, r7
 8009d92:	bd80      	pop	{r7, pc}

08009d94 <VL53L0X_SetLimitCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 8009d94:	b580      	push	{r7, lr}
 8009d96:	b086      	sub	sp, #24
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	6078      	str	r0, [r7, #4]
 8009d9c:	460b      	mov	r3, r1
 8009d9e:	807b      	strh	r3, [r7, #2]
 8009da0:	4613      	mov	r3, r2
 8009da2:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009da4:	2300      	movs	r3, #0
 8009da6:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 8009da8:	2300      	movs	r3, #0
 8009daa:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 8009dac:	2300      	movs	r3, #0
 8009dae:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 8009db0:	2300      	movs	r3, #0
 8009db2:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8009db4:	887b      	ldrh	r3, [r7, #2]
 8009db6:	2b05      	cmp	r3, #5
 8009db8:	d902      	bls.n	8009dc0 <VL53L0X_SetLimitCheckEnable+0x2c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009dba:	23fc      	movs	r3, #252	; 0xfc
 8009dbc:	75fb      	strb	r3, [r7, #23]
 8009dbe:	e05b      	b.n	8009e78 <VL53L0X_SetLimitCheckEnable+0xe4>
	} else {
		if (LimitCheckEnable == 0) {
 8009dc0:	787b      	ldrb	r3, [r7, #1]
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d106      	bne.n	8009dd4 <VL53L0X_SetLimitCheckEnable+0x40>
			TempFix1616 = 0;
 8009dc6:	2300      	movs	r3, #0
 8009dc8:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 8009dca:	2300      	movs	r3, #0
 8009dcc:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 8009dce:	2301      	movs	r3, #1
 8009dd0:	73bb      	strb	r3, [r7, #14]
 8009dd2:	e00a      	b.n	8009dea <VL53L0X_SetLimitCheckEnable+0x56>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8009dd4:	887b      	ldrh	r3, [r7, #2]
 8009dd6:	687a      	ldr	r2, [r7, #4]
 8009dd8:	330c      	adds	r3, #12
 8009dda:	009b      	lsls	r3, r3, #2
 8009ddc:	4413      	add	r3, r2
 8009dde:	685b      	ldr	r3, [r3, #4]
 8009de0:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 8009de2:	2300      	movs	r3, #0
 8009de4:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 8009de6:	2301      	movs	r3, #1
 8009de8:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 8009dea:	887b      	ldrh	r3, [r7, #2]
 8009dec:	2b05      	cmp	r3, #5
 8009dee:	d841      	bhi.n	8009e74 <VL53L0X_SetLimitCheckEnable+0xe0>
 8009df0:	a201      	add	r2, pc, #4	; (adr r2, 8009df8 <VL53L0X_SetLimitCheckEnable+0x64>)
 8009df2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009df6:	bf00      	nop
 8009df8:	08009e11 	.word	0x08009e11
 8009dfc:	08009e1b 	.word	0x08009e1b
 8009e00:	08009e31 	.word	0x08009e31
 8009e04:	08009e3b 	.word	0x08009e3b
 8009e08:	08009e45 	.word	0x08009e45
 8009e0c:	08009e5d 	.word	0x08009e5d

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	7bfa      	ldrb	r2, [r7, #15]
 8009e14:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 8009e18:	e02e      	b.n	8009e78 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 8009e1a:	693b      	ldr	r3, [r7, #16]
 8009e1c:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8009e1e:	b29b      	uxth	r3, r3
 8009e20:	461a      	mov	r2, r3
 8009e22:	2144      	movs	r1, #68	; 0x44
 8009e24:	6878      	ldr	r0, [r7, #4]
 8009e26:	f004 f8c3 	bl	800dfb0 <VL53L0X_WrWord>
 8009e2a:	4603      	mov	r3, r0
 8009e2c:	75fb      	strb	r3, [r7, #23]

			break;
 8009e2e:	e023      	b.n	8009e78 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	7bfa      	ldrb	r2, [r7, #15]
 8009e34:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 8009e38:	e01e      	b.n	8009e78 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	7bfa      	ldrb	r2, [r7, #15]
 8009e3e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 8009e42:	e019      	b.n	8009e78 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 8009e44:	7bbb      	ldrb	r3, [r7, #14]
 8009e46:	005b      	lsls	r3, r3, #1
 8009e48:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8009e4a:	7b7b      	ldrb	r3, [r7, #13]
 8009e4c:	22fe      	movs	r2, #254	; 0xfe
 8009e4e:	2160      	movs	r1, #96	; 0x60
 8009e50:	6878      	ldr	r0, [r7, #4]
 8009e52:	f004 f8d7 	bl	800e004 <VL53L0X_UpdateByte>
 8009e56:	4603      	mov	r3, r0
 8009e58:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 8009e5a:	e00d      	b.n	8009e78 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 8009e5c:	7bbb      	ldrb	r3, [r7, #14]
 8009e5e:	011b      	lsls	r3, r3, #4
 8009e60:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8009e62:	7b7b      	ldrb	r3, [r7, #13]
 8009e64:	22ef      	movs	r2, #239	; 0xef
 8009e66:	2160      	movs	r1, #96	; 0x60
 8009e68:	6878      	ldr	r0, [r7, #4]
 8009e6a:	f004 f8cb 	bl	800e004 <VL53L0X_UpdateByte>
 8009e6e:	4603      	mov	r3, r0
 8009e70:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 8009e72:	e001      	b.n	8009e78 <VL53L0X_SetLimitCheckEnable+0xe4>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009e74:	23fc      	movs	r3, #252	; 0xfc
 8009e76:	75fb      	strb	r3, [r7, #23]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009e78:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d10f      	bne.n	8009ea0 <VL53L0X_SetLimitCheckEnable+0x10c>
		if (LimitCheckEnable == 0) {
 8009e80:	787b      	ldrb	r3, [r7, #1]
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d106      	bne.n	8009e94 <VL53L0X_SetLimitCheckEnable+0x100>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8009e86:	887b      	ldrh	r3, [r7, #2]
 8009e88:	687a      	ldr	r2, [r7, #4]
 8009e8a:	4413      	add	r3, r2
 8009e8c:	2200      	movs	r2, #0
 8009e8e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8009e92:	e005      	b.n	8009ea0 <VL53L0X_SetLimitCheckEnable+0x10c>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8009e94:	887b      	ldrh	r3, [r7, #2]
 8009e96:	687a      	ldr	r2, [r7, #4]
 8009e98:	4413      	add	r3, r2
 8009e9a:	2201      	movs	r2, #1
 8009e9c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009ea0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009ea4:	4618      	mov	r0, r3
 8009ea6:	3718      	adds	r7, #24
 8009ea8:	46bd      	mov	sp, r7
 8009eaa:	bd80      	pop	{r7, pc}

08009eac <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 8009eac:	b480      	push	{r7}
 8009eae:	b087      	sub	sp, #28
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	60f8      	str	r0, [r7, #12]
 8009eb4:	460b      	mov	r3, r1
 8009eb6:	607a      	str	r2, [r7, #4]
 8009eb8:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009eba:	2300      	movs	r3, #0
 8009ebc:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8009ebe:	897b      	ldrh	r3, [r7, #10]
 8009ec0:	2b05      	cmp	r3, #5
 8009ec2:	d905      	bls.n	8009ed0 <VL53L0X_GetLimitCheckEnable+0x24>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009ec4:	23fc      	movs	r3, #252	; 0xfc
 8009ec6:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	2200      	movs	r2, #0
 8009ecc:	701a      	strb	r2, [r3, #0]
 8009ece:	e008      	b.n	8009ee2 <VL53L0X_GetLimitCheckEnable+0x36>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8009ed0:	897b      	ldrh	r3, [r7, #10]
 8009ed2:	68fa      	ldr	r2, [r7, #12]
 8009ed4:	4413      	add	r3, r2
 8009ed6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009eda:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	7dba      	ldrb	r2, [r7, #22]
 8009ee0:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009ee2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	371c      	adds	r7, #28
 8009eea:	46bd      	mov	sp, r7
 8009eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef0:	4770      	bx	lr
	...

08009ef4 <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 8009ef4:	b580      	push	{r7, lr}
 8009ef6:	b086      	sub	sp, #24
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	60f8      	str	r0, [r7, #12]
 8009efc:	460b      	mov	r3, r1
 8009efe:	607a      	str	r2, [r7, #4]
 8009f00:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009f02:	2300      	movs	r3, #0
 8009f04:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 8009f06:	897b      	ldrh	r3, [r7, #10]
 8009f08:	68fa      	ldr	r2, [r7, #12]
 8009f0a:	4413      	add	r3, r2
 8009f0c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009f10:	75bb      	strb	r3, [r7, #22]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 8009f12:	7dbb      	ldrb	r3, [r7, #22]
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d107      	bne.n	8009f28 <VL53L0X_SetLimitCheckValue+0x34>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8009f18:	897b      	ldrh	r3, [r7, #10]
 8009f1a:	68fa      	ldr	r2, [r7, #12]
 8009f1c:	330c      	adds	r3, #12
 8009f1e:	009b      	lsls	r3, r3, #2
 8009f20:	4413      	add	r3, r2
 8009f22:	687a      	ldr	r2, [r7, #4]
 8009f24:	605a      	str	r2, [r3, #4]
 8009f26:	e040      	b.n	8009faa <VL53L0X_SetLimitCheckValue+0xb6>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 8009f28:	897b      	ldrh	r3, [r7, #10]
 8009f2a:	2b05      	cmp	r3, #5
 8009f2c:	d830      	bhi.n	8009f90 <VL53L0X_SetLimitCheckValue+0x9c>
 8009f2e:	a201      	add	r2, pc, #4	; (adr r2, 8009f34 <VL53L0X_SetLimitCheckValue+0x40>)
 8009f30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f34:	08009f4d 	.word	0x08009f4d
 8009f38:	08009f55 	.word	0x08009f55
 8009f3c:	08009f6b 	.word	0x08009f6b
 8009f40:	08009f73 	.word	0x08009f73
 8009f44:	08009f7b 	.word	0x08009f7b
 8009f48:	08009f7b 	.word	0x08009f7b

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	687a      	ldr	r2, [r7, #4]
 8009f50:	635a      	str	r2, [r3, #52]	; 0x34
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 8009f52:	e01f      	b.n	8009f94 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8009f58:	b29b      	uxth	r3, r3
 8009f5a:	461a      	mov	r2, r3
 8009f5c:	2144      	movs	r1, #68	; 0x44
 8009f5e:	68f8      	ldr	r0, [r7, #12]
 8009f60:	f004 f826 	bl	800dfb0 <VL53L0X_WrWord>
 8009f64:	4603      	mov	r3, r0
 8009f66:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8009f68:	e014      	b.n	8009f94 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	687a      	ldr	r2, [r7, #4]
 8009f6e:	63da      	str	r2, [r3, #60]	; 0x3c
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 8009f70:	e010      	b.n	8009f94 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	687a      	ldr	r2, [r7, #4]
 8009f76:	641a      	str	r2, [r3, #64]	; 0x40
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 8009f78:	e00c      	b.n	8009f94 <VL53L0X_SetLimitCheckValue+0xa0>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8009f7e:	b29b      	uxth	r3, r3
 8009f80:	461a      	mov	r2, r3
 8009f82:	2164      	movs	r1, #100	; 0x64
 8009f84:	68f8      	ldr	r0, [r7, #12]
 8009f86:	f004 f813 	bl	800dfb0 <VL53L0X_WrWord>
 8009f8a:	4603      	mov	r3, r0
 8009f8c:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8009f8e:	e001      	b.n	8009f94 <VL53L0X_SetLimitCheckValue+0xa0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009f90:	23fc      	movs	r3, #252	; 0xfc
 8009f92:	75fb      	strb	r3, [r7, #23]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 8009f94:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d106      	bne.n	8009faa <VL53L0X_SetLimitCheckValue+0xb6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8009f9c:	897b      	ldrh	r3, [r7, #10]
 8009f9e:	68fa      	ldr	r2, [r7, #12]
 8009fa0:	330c      	adds	r3, #12
 8009fa2:	009b      	lsls	r3, r3, #2
 8009fa4:	4413      	add	r3, r2
 8009fa6:	687a      	ldr	r2, [r7, #4]
 8009fa8:	605a      	str	r2, [r3, #4]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009faa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009fae:	4618      	mov	r0, r3
 8009fb0:	3718      	adds	r7, #24
 8009fb2:	46bd      	mov	sp, r7
 8009fb4:	bd80      	pop	{r7, pc}
 8009fb6:	bf00      	nop

08009fb8 <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 8009fb8:	b580      	push	{r7, lr}
 8009fba:	b088      	sub	sp, #32
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	60f8      	str	r0, [r7, #12]
 8009fc0:	460b      	mov	r3, r1
 8009fc2:	607a      	str	r2, [r7, #4]
 8009fc4:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009fc6:	2300      	movs	r3, #0
 8009fc8:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 8009fca:	2300      	movs	r3, #0
 8009fcc:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 8009fce:	897b      	ldrh	r3, [r7, #10]
 8009fd0:	2b05      	cmp	r3, #5
 8009fd2:	d847      	bhi.n	800a064 <VL53L0X_GetLimitCheckValue+0xac>
 8009fd4:	a201      	add	r2, pc, #4	; (adr r2, 8009fdc <VL53L0X_GetLimitCheckValue+0x24>)
 8009fd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fda:	bf00      	nop
 8009fdc:	08009ff5 	.word	0x08009ff5
 8009fe0:	0800a001 	.word	0x0800a001
 8009fe4:	0800a027 	.word	0x0800a027
 8009fe8:	0800a033 	.word	0x0800a033
 8009fec:	0800a03f 	.word	0x0800a03f
 8009ff0:	0800a03f 	.word	0x0800a03f

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ff8:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 8009ffa:	2300      	movs	r3, #0
 8009ffc:	77bb      	strb	r3, [r7, #30]
		break;
 8009ffe:	e033      	b.n	800a068 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 800a000:	f107 0316 	add.w	r3, r7, #22
 800a004:	461a      	mov	r2, r3
 800a006:	2144      	movs	r1, #68	; 0x44
 800a008:	68f8      	ldr	r0, [r7, #12]
 800a00a:	f004 f859 	bl	800e0c0 <VL53L0X_RdWord>
 800a00e:	4603      	mov	r3, r0
 800a010:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 800a012:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a016:	2b00      	cmp	r3, #0
 800a018:	d102      	bne.n	800a020 <VL53L0X_GetLimitCheckValue+0x68>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 800a01a:	8afb      	ldrh	r3, [r7, #22]
 800a01c:	025b      	lsls	r3, r3, #9
 800a01e:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 800a020:	2301      	movs	r3, #1
 800a022:	77bb      	strb	r3, [r7, #30]
		break;
 800a024:	e020      	b.n	800a068 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a02a:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 800a02c:	2300      	movs	r3, #0
 800a02e:	77bb      	strb	r3, [r7, #30]
		break;
 800a030:	e01a      	b.n	800a068 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a036:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, TempFix1616);
		EnableZeroValue = 0;
 800a038:	2300      	movs	r3, #0
 800a03a:	77bb      	strb	r3, [r7, #30]
		break;
 800a03c:	e014      	b.n	800a068 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 800a03e:	f107 0316 	add.w	r3, r7, #22
 800a042:	461a      	mov	r2, r3
 800a044:	2164      	movs	r1, #100	; 0x64
 800a046:	68f8      	ldr	r0, [r7, #12]
 800a048:	f004 f83a 	bl	800e0c0 <VL53L0X_RdWord>
 800a04c:	4603      	mov	r3, r0
 800a04e:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 800a050:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a054:	2b00      	cmp	r3, #0
 800a056:	d102      	bne.n	800a05e <VL53L0X_GetLimitCheckValue+0xa6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 800a058:	8afb      	ldrh	r3, [r7, #22]
 800a05a:	025b      	lsls	r3, r3, #9
 800a05c:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 800a05e:	2300      	movs	r3, #0
 800a060:	77bb      	strb	r3, [r7, #30]
		break;
 800a062:	e001      	b.n	800a068 <VL53L0X_GetLimitCheckValue+0xb0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a064:	23fc      	movs	r3, #252	; 0xfc
 800a066:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a068:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d12a      	bne.n	800a0c6 <VL53L0X_GetLimitCheckValue+0x10e>

		if (EnableZeroValue == 1) {
 800a070:	7fbb      	ldrb	r3, [r7, #30]
 800a072:	2b01      	cmp	r3, #1
 800a074:	d124      	bne.n	800a0c0 <VL53L0X_GetLimitCheckValue+0x108>

			if (TempFix1616 == 0) {
 800a076:	69bb      	ldr	r3, [r7, #24]
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d110      	bne.n	800a09e <VL53L0X_GetLimitCheckValue+0xe6>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 800a07c:	897b      	ldrh	r3, [r7, #10]
 800a07e:	68fa      	ldr	r2, [r7, #12]
 800a080:	330c      	adds	r3, #12
 800a082:	009b      	lsls	r3, r3, #2
 800a084:	4413      	add	r3, r2
 800a086:	685b      	ldr	r3, [r3, #4]
 800a088:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	69ba      	ldr	r2, [r7, #24]
 800a08e:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 800a090:	897b      	ldrh	r3, [r7, #10]
 800a092:	68fa      	ldr	r2, [r7, #12]
 800a094:	4413      	add	r3, r2
 800a096:	2200      	movs	r2, #0
 800a098:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800a09c:	e013      	b.n	800a0c6 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	69ba      	ldr	r2, [r7, #24]
 800a0a2:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 800a0a4:	897b      	ldrh	r3, [r7, #10]
 800a0a6:	68fa      	ldr	r2, [r7, #12]
 800a0a8:	330c      	adds	r3, #12
 800a0aa:	009b      	lsls	r3, r3, #2
 800a0ac:	4413      	add	r3, r2
 800a0ae:	69ba      	ldr	r2, [r7, #24]
 800a0b0:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 800a0b2:	897b      	ldrh	r3, [r7, #10]
 800a0b4:	68fa      	ldr	r2, [r7, #12]
 800a0b6:	4413      	add	r3, r2
 800a0b8:	2201      	movs	r2, #1
 800a0ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800a0be:	e002      	b.n	800a0c6 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	69ba      	ldr	r2, [r7, #24]
 800a0c4:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a0c6:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 800a0ca:	4618      	mov	r0, r3
 800a0cc:	3720      	adds	r7, #32
 800a0ce:	46bd      	mov	sp, r7
 800a0d0:	bd80      	pop	{r7, pc}
 800a0d2:	bf00      	nop

0800a0d4 <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 800a0d4:	b580      	push	{r7, lr}
 800a0d6:	b084      	sub	sp, #16
 800a0d8:	af00      	add	r7, sp, #0
 800a0da:	6078      	str	r0, [r7, #4]
 800a0dc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a0de:	2300      	movs	r3, #0
 800a0e0:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 800a0e2:	f107 030e 	add.w	r3, r7, #14
 800a0e6:	461a      	mov	r2, r3
 800a0e8:	2101      	movs	r1, #1
 800a0ea:	6878      	ldr	r0, [r7, #4]
 800a0ec:	f003 ffbe 	bl	800e06c <VL53L0X_RdByte>
 800a0f0:	4603      	mov	r3, r0
 800a0f2:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 800a0f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d10e      	bne.n	800a11a <VL53L0X_GetWrapAroundCheckEnable+0x46>
		PALDevDataSet(Dev, SequenceConfig, data);
 800a0fc:	7bba      	ldrb	r2, [r7, #14]
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		if (data & (0x01 << 7))
 800a104:	7bbb      	ldrb	r3, [r7, #14]
 800a106:	b25b      	sxtb	r3, r3
 800a108:	2b00      	cmp	r3, #0
 800a10a:	da03      	bge.n	800a114 <VL53L0X_GetWrapAroundCheckEnable+0x40>
			*pWrapAroundCheckEnable = 0x01;
 800a10c:	683b      	ldr	r3, [r7, #0]
 800a10e:	2201      	movs	r2, #1
 800a110:	701a      	strb	r2, [r3, #0]
 800a112:	e002      	b.n	800a11a <VL53L0X_GetWrapAroundCheckEnable+0x46>
		else
			*pWrapAroundCheckEnable = 0x00;
 800a114:	683b      	ldr	r3, [r7, #0]
 800a116:	2200      	movs	r2, #0
 800a118:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800a11a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d104      	bne.n	800a12c <VL53L0X_GetWrapAroundCheckEnable+0x58>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 800a122:	683b      	ldr	r3, [r7, #0]
 800a124:	781a      	ldrb	r2, [r3, #0]
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a12c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a130:	4618      	mov	r0, r3
 800a132:	3710      	adds	r7, #16
 800a134:	46bd      	mov	sp, r7
 800a136:	bd80      	pop	{r7, pc}

0800a138 <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 800a138:	b580      	push	{r7, lr}
 800a13a:	b084      	sub	sp, #16
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a140:	2300      	movs	r3, #0
 800a142:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 800a144:	f107 030e 	add.w	r3, r7, #14
 800a148:	4619      	mov	r1, r3
 800a14a:	6878      	ldr	r0, [r7, #4]
 800a14c:	f7ff fbd2 	bl	80098f4 <VL53L0X_GetDeviceMode>
 800a150:	4603      	mov	r3, r0
 800a152:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 800a154:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d107      	bne.n	800a16c <VL53L0X_PerformSingleMeasurement+0x34>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 800a15c:	7bbb      	ldrb	r3, [r7, #14]
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d104      	bne.n	800a16c <VL53L0X_PerformSingleMeasurement+0x34>
		Status = VL53L0X_StartMeasurement(Dev);
 800a162:	6878      	ldr	r0, [r7, #4]
 800a164:	f000 f898 	bl	800a298 <VL53L0X_StartMeasurement>
 800a168:	4603      	mov	r3, r0
 800a16a:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 800a16c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a170:	2b00      	cmp	r3, #0
 800a172:	d104      	bne.n	800a17e <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 800a174:	6878      	ldr	r0, [r7, #4]
 800a176:	f001 fb6f 	bl	800b858 <VL53L0X_measurement_poll_for_completion>
 800a17a:	4603      	mov	r3, r0
 800a17c:	73fb      	strb	r3, [r7, #15]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 800a17e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a182:	2b00      	cmp	r3, #0
 800a184:	d106      	bne.n	800a194 <VL53L0X_PerformSingleMeasurement+0x5c>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 800a186:	7bbb      	ldrb	r3, [r7, #14]
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d103      	bne.n	800a194 <VL53L0X_PerformSingleMeasurement+0x5c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	2203      	movs	r2, #3
 800a190:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132


	LOG_FUNCTION_END(Status);
	return Status;
 800a194:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a198:	4618      	mov	r0, r3
 800a19a:	3710      	adds	r7, #16
 800a19c:	46bd      	mov	sp, r7
 800a19e:	bd80      	pop	{r7, pc}

0800a1a0 <VL53L0X_PerformRefCalibration>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev, uint8_t *pVhvSettings,
	uint8_t *pPhaseCal)
{
 800a1a0:	b580      	push	{r7, lr}
 800a1a2:	b086      	sub	sp, #24
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	60f8      	str	r0, [r7, #12]
 800a1a8:	60b9      	str	r1, [r7, #8]
 800a1aa:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a1ac:	2300      	movs	r3, #0
 800a1ae:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 800a1b0:	2301      	movs	r3, #1
 800a1b2:	687a      	ldr	r2, [r7, #4]
 800a1b4:	68b9      	ldr	r1, [r7, #8]
 800a1b6:	68f8      	ldr	r0, [r7, #12]
 800a1b8:	f001 fb11 	bl	800b7de <VL53L0X_perform_ref_calibration>
 800a1bc:	4603      	mov	r3, r0
 800a1be:	75fb      	strb	r3, [r7, #23]
		pPhaseCal, 1);

	LOG_FUNCTION_END(Status);
	return Status;
 800a1c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a1c4:	4618      	mov	r0, r3
 800a1c6:	3718      	adds	r7, #24
 800a1c8:	46bd      	mov	sp, r7
 800a1ca:	bd80      	pop	{r7, pc}

0800a1cc <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 800a1cc:	b580      	push	{r7, lr}
 800a1ce:	b086      	sub	sp, #24
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	6078      	str	r0, [r7, #4]
 800a1d4:	460b      	mov	r3, r1
 800a1d6:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a1d8:	2300      	movs	r3, #0
 800a1da:	75fb      	strb	r3, [r7, #23]

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 800a1e2:	75bb      	strb	r3, [r7, #22]
		Pin0GpioFunctionality);

	if ((InterruptConfig ==
 800a1e4:	7dbb      	ldrb	r3, [r7, #22]
 800a1e6:	2b01      	cmp	r3, #1
 800a1e8:	d005      	beq.n	800a1f6 <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW) ||
 800a1ea:	7dbb      	ldrb	r3, [r7, #22]
 800a1ec:	2b02      	cmp	r3, #2
 800a1ee:	d002      	beq.n	800a1f6 <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 800a1f0:	7dbb      	ldrb	r3, [r7, #22]
 800a1f2:	2b03      	cmp	r3, #3
 800a1f4:	d147      	bne.n	800a286 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT)) {

		Status = VL53L0X_GetInterruptThresholds(Dev,
 800a1f6:	f107 030c 	add.w	r3, r7, #12
 800a1fa:	f107 0210 	add.w	r2, r7, #16
 800a1fe:	2101      	movs	r1, #1
 800a200:	6878      	ldr	r0, [r7, #4]
 800a202:	f000 fbc3 	bl	800a98c <VL53L0X_GetInterruptThresholds>
 800a206:	4603      	mov	r3, r0
 800a208:	75fb      	strb	r3, [r7, #23]
			VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
			&ThresholdLow, &ThresholdHigh);

		if (((ThresholdLow > 255*65536) ||
 800a20a:	693b      	ldr	r3, [r7, #16]
 800a20c:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 800a210:	d803      	bhi.n	800a21a <VL53L0X_CheckAndLoadInterruptSettings+0x4e>
			(ThresholdHigh > 255*65536)) &&
 800a212:	68fb      	ldr	r3, [r7, #12]
		if (((ThresholdLow > 255*65536) ||
 800a214:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 800a218:	d935      	bls.n	800a286 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(ThresholdHigh > 255*65536)) &&
 800a21a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d131      	bne.n	800a286 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 800a222:	78fb      	ldrb	r3, [r7, #3]
 800a224:	2b00      	cmp	r3, #0
 800a226:	d006      	beq.n	800a236 <VL53L0X_CheckAndLoadInterruptSettings+0x6a>
				Status = VL53L0X_load_tuning_settings(Dev,
 800a228:	491a      	ldr	r1, [pc, #104]	; (800a294 <VL53L0X_CheckAndLoadInterruptSettings+0xc8>)
 800a22a:	6878      	ldr	r0, [r7, #4]
 800a22c:	f002 ff86 	bl	800d13c <VL53L0X_load_tuning_settings>
 800a230:	4603      	mov	r3, r0
 800a232:	75fb      	strb	r3, [r7, #23]
 800a234:	e027      	b.n	800a286 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
					InterruptThresholdSettings);
			} else {
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 800a236:	2204      	movs	r2, #4
 800a238:	21ff      	movs	r1, #255	; 0xff
 800a23a:	6878      	ldr	r0, [r7, #4]
 800a23c:	f003 fe94 	bl	800df68 <VL53L0X_WrByte>
 800a240:	4603      	mov	r3, r0
 800a242:	461a      	mov	r2, r3
 800a244:	7dfb      	ldrb	r3, [r7, #23]
 800a246:	4313      	orrs	r3, r2
 800a248:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 800a24a:	2200      	movs	r2, #0
 800a24c:	2170      	movs	r1, #112	; 0x70
 800a24e:	6878      	ldr	r0, [r7, #4]
 800a250:	f003 fe8a 	bl	800df68 <VL53L0X_WrByte>
 800a254:	4603      	mov	r3, r0
 800a256:	461a      	mov	r2, r3
 800a258:	7dfb      	ldrb	r3, [r7, #23]
 800a25a:	4313      	orrs	r3, r2
 800a25c:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800a25e:	2200      	movs	r2, #0
 800a260:	21ff      	movs	r1, #255	; 0xff
 800a262:	6878      	ldr	r0, [r7, #4]
 800a264:	f003 fe80 	bl	800df68 <VL53L0X_WrByte>
 800a268:	4603      	mov	r3, r0
 800a26a:	461a      	mov	r2, r3
 800a26c:	7dfb      	ldrb	r3, [r7, #23]
 800a26e:	4313      	orrs	r3, r2
 800a270:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800a272:	2200      	movs	r2, #0
 800a274:	2180      	movs	r1, #128	; 0x80
 800a276:	6878      	ldr	r0, [r7, #4]
 800a278:	f003 fe76 	bl	800df68 <VL53L0X_WrByte>
 800a27c:	4603      	mov	r3, r0
 800a27e:	461a      	mov	r2, r3
 800a280:	7dfb      	ldrb	r3, [r7, #23]
 800a282:	4313      	orrs	r3, r2
 800a284:	75fb      	strb	r3, [r7, #23]
		}


	}

	return Status;
 800a286:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 800a28a:	4618      	mov	r0, r3
 800a28c:	3718      	adds	r7, #24
 800a28e:	46bd      	mov	sp, r7
 800a290:	bd80      	pop	{r7, pc}
 800a292:	bf00      	nop
 800a294:	20000100 	.word	0x20000100

0800a298 <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 800a298:	b580      	push	{r7, lr}
 800a29a:	b086      	sub	sp, #24
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a2a0:	2300      	movs	r3, #0
 800a2a2:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 800a2a4:	2301      	movs	r3, #1
 800a2a6:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 800a2a8:	f107 030e 	add.w	r3, r7, #14
 800a2ac:	4619      	mov	r1, r3
 800a2ae:	6878      	ldr	r0, [r7, #4]
 800a2b0:	f7ff fb20 	bl	80098f4 <VL53L0X_GetDeviceMode>

	Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 800a2b4:	2201      	movs	r2, #1
 800a2b6:	2180      	movs	r1, #128	; 0x80
 800a2b8:	6878      	ldr	r0, [r7, #4]
 800a2ba:	f003 fe55 	bl	800df68 <VL53L0X_WrByte>
 800a2be:	4603      	mov	r3, r0
 800a2c0:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800a2c2:	2201      	movs	r2, #1
 800a2c4:	21ff      	movs	r1, #255	; 0xff
 800a2c6:	6878      	ldr	r0, [r7, #4]
 800a2c8:	f003 fe4e 	bl	800df68 <VL53L0X_WrByte>
 800a2cc:	4603      	mov	r3, r0
 800a2ce:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 800a2d0:	2200      	movs	r2, #0
 800a2d2:	2100      	movs	r1, #0
 800a2d4:	6878      	ldr	r0, [r7, #4]
 800a2d6:	f003 fe47 	bl	800df68 <VL53L0X_WrByte>
 800a2da:	4603      	mov	r3, r0
 800a2dc:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x91, PALDevDataGet(Dev, StopVariable));
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 800a2e4:	461a      	mov	r2, r3
 800a2e6:	2191      	movs	r1, #145	; 0x91
 800a2e8:	6878      	ldr	r0, [r7, #4]
 800a2ea:	f003 fe3d 	bl	800df68 <VL53L0X_WrByte>
 800a2ee:	4603      	mov	r3, r0
 800a2f0:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 800a2f2:	2201      	movs	r2, #1
 800a2f4:	2100      	movs	r1, #0
 800a2f6:	6878      	ldr	r0, [r7, #4]
 800a2f8:	f003 fe36 	bl	800df68 <VL53L0X_WrByte>
 800a2fc:	4603      	mov	r3, r0
 800a2fe:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800a300:	2200      	movs	r2, #0
 800a302:	21ff      	movs	r1, #255	; 0xff
 800a304:	6878      	ldr	r0, [r7, #4]
 800a306:	f003 fe2f 	bl	800df68 <VL53L0X_WrByte>
 800a30a:	4603      	mov	r3, r0
 800a30c:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 800a30e:	2200      	movs	r2, #0
 800a310:	2180      	movs	r1, #128	; 0x80
 800a312:	6878      	ldr	r0, [r7, #4]
 800a314:	f003 fe28 	bl	800df68 <VL53L0X_WrByte>
 800a318:	4603      	mov	r3, r0
 800a31a:	75fb      	strb	r3, [r7, #23]

	switch (DeviceMode) {
 800a31c:	7bbb      	ldrb	r3, [r7, #14]
 800a31e:	2b03      	cmp	r3, #3
 800a320:	d054      	beq.n	800a3cc <VL53L0X_StartMeasurement+0x134>
 800a322:	2b03      	cmp	r3, #3
 800a324:	dc6c      	bgt.n	800a400 <VL53L0X_StartMeasurement+0x168>
 800a326:	2b00      	cmp	r3, #0
 800a328:	d002      	beq.n	800a330 <VL53L0X_StartMeasurement+0x98>
 800a32a:	2b01      	cmp	r3, #1
 800a32c:	d034      	beq.n	800a398 <VL53L0X_StartMeasurement+0x100>
 800a32e:	e067      	b.n	800a400 <VL53L0X_StartMeasurement+0x168>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 800a330:	2201      	movs	r2, #1
 800a332:	2100      	movs	r1, #0
 800a334:	6878      	ldr	r0, [r7, #4]
 800a336:	f003 fe17 	bl	800df68 <VL53L0X_WrByte>
 800a33a:	4603      	mov	r3, r0
 800a33c:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 800a33e:	7bfb      	ldrb	r3, [r7, #15]
 800a340:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 800a342:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a346:	2b00      	cmp	r3, #0
 800a348:	d15d      	bne.n	800a406 <VL53L0X_StartMeasurement+0x16e>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 800a34a:	2300      	movs	r3, #0
 800a34c:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 800a34e:	693b      	ldr	r3, [r7, #16]
 800a350:	2b00      	cmp	r3, #0
 800a352:	d008      	beq.n	800a366 <VL53L0X_StartMeasurement+0xce>
					Status = VL53L0X_RdByte(Dev,
 800a354:	f107 030d 	add.w	r3, r7, #13
 800a358:	461a      	mov	r2, r3
 800a35a:	2100      	movs	r1, #0
 800a35c:	6878      	ldr	r0, [r7, #4]
 800a35e:	f003 fe85 	bl	800e06c <VL53L0X_RdByte>
 800a362:	4603      	mov	r3, r0
 800a364:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 800a366:	693b      	ldr	r3, [r7, #16]
 800a368:	3301      	adds	r3, #1
 800a36a:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 800a36c:	7b7a      	ldrb	r2, [r7, #13]
 800a36e:	7bfb      	ldrb	r3, [r7, #15]
 800a370:	4013      	ands	r3, r2
 800a372:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 800a374:	7bfa      	ldrb	r2, [r7, #15]
 800a376:	429a      	cmp	r2, r3
 800a378:	d107      	bne.n	800a38a <VL53L0X_StartMeasurement+0xf2>
				&& (Status == VL53L0X_ERROR_NONE)
 800a37a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d103      	bne.n	800a38a <VL53L0X_StartMeasurement+0xf2>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 800a382:	693b      	ldr	r3, [r7, #16]
 800a384:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800a388:	d3e1      	bcc.n	800a34e <VL53L0X_StartMeasurement+0xb6>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 800a38a:	693b      	ldr	r3, [r7, #16]
 800a38c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800a390:	d339      	bcc.n	800a406 <VL53L0X_StartMeasurement+0x16e>
				Status = VL53L0X_ERROR_TIME_OUT;
 800a392:	23f9      	movs	r3, #249	; 0xf9
 800a394:	75fb      	strb	r3, [r7, #23]

		}

		break;
 800a396:	e036      	b.n	800a406 <VL53L0X_StartMeasurement+0x16e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 800a398:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d105      	bne.n	800a3ac <VL53L0X_StartMeasurement+0x114>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 800a3a0:	2101      	movs	r1, #1
 800a3a2:	6878      	ldr	r0, [r7, #4]
 800a3a4:	f7ff ff12 	bl	800a1cc <VL53L0X_CheckAndLoadInterruptSettings>
 800a3a8:	4603      	mov	r3, r0
 800a3aa:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 800a3ac:	2202      	movs	r2, #2
 800a3ae:	2100      	movs	r1, #0
 800a3b0:	6878      	ldr	r0, [r7, #4]
 800a3b2:	f003 fdd9 	bl	800df68 <VL53L0X_WrByte>
 800a3b6:	4603      	mov	r3, r0
 800a3b8:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 800a3ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d123      	bne.n	800a40a <VL53L0X_StartMeasurement+0x172>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	2204      	movs	r2, #4
 800a3c6:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 800a3ca:	e01e      	b.n	800a40a <VL53L0X_StartMeasurement+0x172>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 800a3cc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d105      	bne.n	800a3e0 <VL53L0X_StartMeasurement+0x148>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 800a3d4:	2101      	movs	r1, #1
 800a3d6:	6878      	ldr	r0, [r7, #4]
 800a3d8:	f7ff fef8 	bl	800a1cc <VL53L0X_CheckAndLoadInterruptSettings>
 800a3dc:	4603      	mov	r3, r0
 800a3de:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 800a3e0:	2204      	movs	r2, #4
 800a3e2:	2100      	movs	r1, #0
 800a3e4:	6878      	ldr	r0, [r7, #4]
 800a3e6:	f003 fdbf 	bl	800df68 <VL53L0X_WrByte>
 800a3ea:	4603      	mov	r3, r0
 800a3ec:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 800a3ee:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d10b      	bne.n	800a40e <VL53L0X_StartMeasurement+0x176>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	2204      	movs	r2, #4
 800a3fa:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 800a3fe:	e006      	b.n	800a40e <VL53L0X_StartMeasurement+0x176>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 800a400:	23f8      	movs	r3, #248	; 0xf8
 800a402:	75fb      	strb	r3, [r7, #23]
 800a404:	e004      	b.n	800a410 <VL53L0X_StartMeasurement+0x178>
		break;
 800a406:	bf00      	nop
 800a408:	e002      	b.n	800a410 <VL53L0X_StartMeasurement+0x178>
		break;
 800a40a:	bf00      	nop
 800a40c:	e000      	b.n	800a410 <VL53L0X_StartMeasurement+0x178>
		break;
 800a40e:	bf00      	nop
	}


	LOG_FUNCTION_END(Status);
	return Status;
 800a410:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a414:	4618      	mov	r0, r3
 800a416:	3718      	adds	r7, #24
 800a418:	46bd      	mov	sp, r7
 800a41a:	bd80      	pop	{r7, pc}

0800a41c <VL53L0X_GetMeasurementDataReady>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 800a41c:	b580      	push	{r7, lr}
 800a41e:	b084      	sub	sp, #16
 800a420:	af00      	add	r7, sp, #0
 800a422:	6078      	str	r0, [r7, #4]
 800a424:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a426:	2300      	movs	r3, #0
 800a428:	73fb      	strb	r3, [r7, #15]
	uint8_t SysRangeStatusRegister;
	uint8_t InterruptConfig;
	uint32_t InterruptMask;
	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 800a430:	73bb      	strb	r3, [r7, #14]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 800a432:	7bbb      	ldrb	r3, [r7, #14]
 800a434:	2b04      	cmp	r3, #4
 800a436:	d112      	bne.n	800a45e <VL53L0X_GetMeasurementDataReady+0x42>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 800a438:	f107 0308 	add.w	r3, r7, #8
 800a43c:	4619      	mov	r1, r3
 800a43e:	6878      	ldr	r0, [r7, #4]
 800a440:	f000 fb1a 	bl	800aa78 <VL53L0X_GetInterruptMaskStatus>
 800a444:	4603      	mov	r3, r0
 800a446:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 800a448:	68bb      	ldr	r3, [r7, #8]
 800a44a:	2b04      	cmp	r3, #4
 800a44c:	d103      	bne.n	800a456 <VL53L0X_GetMeasurementDataReady+0x3a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 800a44e:	683b      	ldr	r3, [r7, #0]
 800a450:	2201      	movs	r2, #1
 800a452:	701a      	strb	r2, [r3, #0]
 800a454:	e01c      	b.n	800a490 <VL53L0X_GetMeasurementDataReady+0x74>
		else
			*pMeasurementDataReady = 0;
 800a456:	683b      	ldr	r3, [r7, #0]
 800a458:	2200      	movs	r2, #0
 800a45a:	701a      	strb	r2, [r3, #0]
 800a45c:	e018      	b.n	800a490 <VL53L0X_GetMeasurementDataReady+0x74>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 800a45e:	f107 030d 	add.w	r3, r7, #13
 800a462:	461a      	mov	r2, r3
 800a464:	2114      	movs	r1, #20
 800a466:	6878      	ldr	r0, [r7, #4]
 800a468:	f003 fe00 	bl	800e06c <VL53L0X_RdByte>
 800a46c:	4603      	mov	r3, r0
 800a46e:	73fb      	strb	r3, [r7, #15]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 800a470:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a474:	2b00      	cmp	r3, #0
 800a476:	d10b      	bne.n	800a490 <VL53L0X_GetMeasurementDataReady+0x74>
			if (SysRangeStatusRegister & 0x01)
 800a478:	7b7b      	ldrb	r3, [r7, #13]
 800a47a:	f003 0301 	and.w	r3, r3, #1
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d003      	beq.n	800a48a <VL53L0X_GetMeasurementDataReady+0x6e>
				*pMeasurementDataReady = 1;
 800a482:	683b      	ldr	r3, [r7, #0]
 800a484:	2201      	movs	r2, #1
 800a486:	701a      	strb	r2, [r3, #0]
 800a488:	e002      	b.n	800a490 <VL53L0X_GetMeasurementDataReady+0x74>
			else
				*pMeasurementDataReady = 0;
 800a48a:	683b      	ldr	r3, [r7, #0]
 800a48c:	2200      	movs	r2, #0
 800a48e:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a490:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a494:	4618      	mov	r0, r3
 800a496:	3710      	adds	r7, #16
 800a498:	46bd      	mov	sp, r7
 800a49a:	bd80      	pop	{r7, pc}

0800a49c <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 800a49c:	b5b0      	push	{r4, r5, r7, lr}
 800a49e:	b096      	sub	sp, #88	; 0x58
 800a4a0:	af02      	add	r7, sp, #8
 800a4a2:	6078      	str	r0, [r7, #4]
 800a4a4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a4a6:	2300      	movs	r3, #0
 800a4a8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 800a4ac:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800a4b0:	230c      	movs	r3, #12
 800a4b2:	2114      	movs	r1, #20
 800a4b4:	6878      	ldr	r0, [r7, #4]
 800a4b6:	f003 fd2b 	bl	800df10 <VL53L0X_ReadMulti>
 800a4ba:	4603      	mov	r3, r0
 800a4bc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 800a4c0:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	f040 80d1 	bne.w	800a66c <VL53L0X_GetRangingMeasurementData+0x1d0>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 800a4ca:	683b      	ldr	r3, [r7, #0]
 800a4cc:	2200      	movs	r2, #0
 800a4ce:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 800a4d0:	683b      	ldr	r3, [r7, #0]
 800a4d2:	2200      	movs	r2, #0
 800a4d4:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 800a4d6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a4da:	b29b      	uxth	r3, r3
 800a4dc:	021b      	lsls	r3, r3, #8
 800a4de:	b29a      	uxth	r2, r3
 800a4e0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a4e4:	b29b      	uxth	r3, r3
 800a4e6:	4413      	add	r3, r2
 800a4e8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 800a4ec:	683b      	ldr	r3, [r7, #0]
 800a4ee:	2200      	movs	r2, #0
 800a4f0:	605a      	str	r2, [r3, #4]

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 800a4f2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800a4f6:	b29b      	uxth	r3, r3
 800a4f8:	021b      	lsls	r3, r3, #8
 800a4fa:	b29a      	uxth	r2, r3
 800a4fc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a500:	b29b      	uxth	r3, r3
 800a502:	4413      	add	r3, r2
 800a504:	b29b      	uxth	r3, r3
 800a506:	025b      	lsls	r3, r3, #9
 800a508:	647b      	str	r3, [r7, #68]	; 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 800a50a:	683b      	ldr	r3, [r7, #0]
 800a50c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a50e:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 800a510:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800a514:	b29b      	uxth	r3, r3
 800a516:	021b      	lsls	r3, r3, #8
 800a518:	b29a      	uxth	r2, r3
 800a51a:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800a51e:	b29b      	uxth	r3, r3
 800a520:	4413      	add	r3, r2
 800a522:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 800a526:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a52a:	025b      	lsls	r3, r3, #9
 800a52c:	461a      	mov	r2, r3
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 800a52e:	683b      	ldr	r3, [r7, #0]
 800a530:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 800a532:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800a536:	b29b      	uxth	r3, r3
 800a538:	021b      	lsls	r3, r3, #8
 800a53a:	b29a      	uxth	r2, r3
 800a53c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a540:	b29b      	uxth	r3, r3
 800a542:	4413      	add	r3, r2
 800a544:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 800a548:	683b      	ldr	r3, [r7, #0]
 800a54a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800a54e:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 800a550:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a554:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	f8b3 3152 	ldrh.w	r3, [r3, #338]	; 0x152
 800a55e:	87bb      	strh	r3, [r7, #60]	; 0x3c
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 800a566:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 800a56a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800a56c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a570:	d046      	beq.n	800a600 <VL53L0X_GetRangingMeasurementData+0x164>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 800a572:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800a574:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 800a578:	fb02 f303 	mul.w	r3, r2, r3
 800a57c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800a580:	4a57      	ldr	r2, [pc, #348]	; (800a6e0 <VL53L0X_GetRangingMeasurementData+0x244>)
 800a582:	fb82 1203 	smull	r1, r2, r2, r3
 800a586:	1192      	asrs	r2, r2, #6
 800a588:	17db      	asrs	r3, r3, #31
 800a58a:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 800a58c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	6a1b      	ldr	r3, [r3, #32]
 800a594:	873b      	strh	r3, [r7, #56]	; 0x38
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	7f1b      	ldrb	r3, [r3, #28]
 800a59a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 800a59e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d02c      	beq.n	800a600 <VL53L0X_GetRangingMeasurementData+0x164>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 800a5a6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800a5a8:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800a5ac:	fb02 f303 	mul.w	r3, r2, r3
 800a5b0:	121a      	asrs	r2, r3, #8
					<= 0) {
 800a5b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
				if ((SignalRate
 800a5b4:	429a      	cmp	r2, r3
 800a5b6:	d10d      	bne.n	800a5d4 <VL53L0X_GetRangingMeasurementData+0x138>
					if (RangeFractionalEnable)
 800a5b8:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d004      	beq.n	800a5ca <VL53L0X_GetRangingMeasurementData+0x12e>
						XtalkRangeMilliMeter = 8888;
 800a5c0:	f242 23b8 	movw	r3, #8888	; 0x22b8
 800a5c4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800a5c8:	e016      	b.n	800a5f8 <VL53L0X_GetRangingMeasurementData+0x15c>
					else
						XtalkRangeMilliMeter = 8888
 800a5ca:	f648 23e0 	movw	r3, #35552	; 0x8ae0
 800a5ce:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800a5d2:	e011      	b.n	800a5f8 <VL53L0X_GetRangingMeasurementData+0x15c>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 800a5d4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800a5d8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a5da:	fb03 f202 	mul.w	r2, r3, r2
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 800a5de:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800a5e0:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 800a5e4:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 800a5e8:	121b      	asrs	r3, r3, #8
 800a5ea:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 800a5ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a5ee:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 800a5f0:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 800a5f4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 800a5f8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800a5fc:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			}

		}

		if (RangeFractionalEnable) {
 800a600:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a604:	2b00      	cmp	r3, #0
 800a606:	d00d      	beq.n	800a624 <VL53L0X_GetRangingMeasurementData+0x188>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 800a608:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800a60c:	089b      	lsrs	r3, r3, #2
 800a60e:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 800a610:	683b      	ldr	r3, [r7, #0]
 800a612:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 800a614:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800a618:	b2db      	uxtb	r3, r3
 800a61a:	019b      	lsls	r3, r3, #6
 800a61c:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 800a61e:	683b      	ldr	r3, [r7, #0]
 800a620:	75da      	strb	r2, [r3, #23]
 800a622:	e006      	b.n	800a632 <VL53L0X_GetRangingMeasurementData+0x196>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 800a624:	683b      	ldr	r3, [r7, #0]
 800a626:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 800a62a:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 800a62c:	683b      	ldr	r3, [r7, #0]
 800a62e:	2200      	movs	r2, #0
 800a630:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 800a632:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800a636:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 800a63a:	f107 0336 	add.w	r3, r7, #54	; 0x36
 800a63e:	9301      	str	r3, [sp, #4]
 800a640:	683b      	ldr	r3, [r7, #0]
 800a642:	9300      	str	r3, [sp, #0]
 800a644:	4613      	mov	r3, r2
 800a646:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a648:	6878      	ldr	r0, [r7, #4]
 800a64a:	f003 fa15 	bl	800da78 <VL53L0X_get_pal_range_status>
 800a64e:	4603      	mov	r3, r0
 800a650:	461a      	mov	r2, r3
 800a652:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800a656:	4313      	orrs	r3, r2
 800a658:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 800a65c:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800a660:	2b00      	cmp	r3, #0
 800a662:	d103      	bne.n	800a66c <VL53L0X_GetRangingMeasurementData+0x1d0>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 800a664:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800a668:	683b      	ldr	r3, [r7, #0]
 800a66a:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a66c:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800a670:	2b00      	cmp	r3, #0
 800a672:	d12f      	bne.n	800a6d4 <VL53L0X_GetRangingMeasurementData+0x238>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	f107 040c 	add.w	r4, r7, #12
 800a67a:	f103 0550 	add.w	r5, r3, #80	; 0x50
 800a67e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a680:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a682:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a686:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 800a68a:	683b      	ldr	r3, [r7, #0]
 800a68c:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 800a68e:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 800a690:	683b      	ldr	r3, [r7, #0]
 800a692:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 800a694:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 800a698:	683b      	ldr	r3, [r7, #0]
 800a69a:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 800a69c:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 800a69e:	683b      	ldr	r3, [r7, #0]
 800a6a0:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 800a6a2:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 800a6a4:	683b      	ldr	r3, [r7, #0]
 800a6a6:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 800a6a8:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 800a6aa:	683b      	ldr	r3, [r7, #0]
 800a6ac:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 800a6ae:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 800a6b0:	683b      	ldr	r3, [r7, #0]
 800a6b2:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 800a6b4:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 800a6b6:	683b      	ldr	r3, [r7, #0]
 800a6b8:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 800a6ba:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	f103 0450 	add.w	r4, r3, #80	; 0x50
 800a6c4:	f107 050c 	add.w	r5, r7, #12
 800a6c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a6ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a6cc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a6d0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a6d4:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 800a6d8:	4618      	mov	r0, r3
 800a6da:	3750      	adds	r7, #80	; 0x50
 800a6dc:	46bd      	mov	sp, r7
 800a6de:	bdb0      	pop	{r4, r5, r7, pc}
 800a6e0:	10624dd3 	.word	0x10624dd3

0800a6e4 <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 800a6e4:	b580      	push	{r7, lr}
 800a6e6:	b084      	sub	sp, #16
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	6078      	str	r0, [r7, #4]
 800a6ec:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a6ee:	2300      	movs	r3, #0
 800a6f0:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* This function will do a complete single ranging
	 * Here we fix the mode! */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 800a6f2:	2100      	movs	r1, #0
 800a6f4:	6878      	ldr	r0, [r7, #4]
 800a6f6:	f7ff f8d1 	bl	800989c <VL53L0X_SetDeviceMode>
 800a6fa:	4603      	mov	r3, r0
 800a6fc:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800a6fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a702:	2b00      	cmp	r3, #0
 800a704:	d104      	bne.n	800a710 <VL53L0X_PerformSingleRangingMeasurement+0x2c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 800a706:	6878      	ldr	r0, [r7, #4]
 800a708:	f7ff fd16 	bl	800a138 <VL53L0X_PerformSingleMeasurement>
 800a70c:	4603      	mov	r3, r0
 800a70e:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 800a710:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a714:	2b00      	cmp	r3, #0
 800a716:	d105      	bne.n	800a724 <VL53L0X_PerformSingleRangingMeasurement+0x40>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 800a718:	6839      	ldr	r1, [r7, #0]
 800a71a:	6878      	ldr	r0, [r7, #4]
 800a71c:	f7ff febe 	bl	800a49c <VL53L0X_GetRangingMeasurementData>
 800a720:	4603      	mov	r3, r0
 800a722:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 800a724:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d105      	bne.n	800a738 <VL53L0X_PerformSingleRangingMeasurement+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800a72c:	2100      	movs	r1, #0
 800a72e:	6878      	ldr	r0, [r7, #4]
 800a730:	f000 f962 	bl	800a9f8 <VL53L0X_ClearInterruptMask>
 800a734:	4603      	mov	r3, r0
 800a736:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(Status);
	return Status;
 800a738:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a73c:	4618      	mov	r0, r3
 800a73e:	3710      	adds	r7, #16
 800a740:	46bd      	mov	sp, r7
 800a742:	bd80      	pop	{r7, pc}

0800a744 <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
	VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
	VL53L0X_InterruptPolarity Polarity)
{
 800a744:	b580      	push	{r7, lr}
 800a746:	b084      	sub	sp, #16
 800a748:	af00      	add	r7, sp, #0
 800a74a:	6078      	str	r0, [r7, #4]
 800a74c:	4608      	mov	r0, r1
 800a74e:	4611      	mov	r1, r2
 800a750:	461a      	mov	r2, r3
 800a752:	4603      	mov	r3, r0
 800a754:	70fb      	strb	r3, [r7, #3]
 800a756:	460b      	mov	r3, r1
 800a758:	70bb      	strb	r3, [r7, #2]
 800a75a:	4613      	mov	r3, r2
 800a75c:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a75e:	2300      	movs	r3, #0
 800a760:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	if (Pin != 0) {
 800a762:	78fb      	ldrb	r3, [r7, #3]
 800a764:	2b00      	cmp	r3, #0
 800a766:	d002      	beq.n	800a76e <VL53L0X_SetGpioConfig+0x2a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 800a768:	23f6      	movs	r3, #246	; 0xf6
 800a76a:	73fb      	strb	r3, [r7, #15]
 800a76c:	e107      	b.n	800a97e <VL53L0X_SetGpioConfig+0x23a>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 800a76e:	78bb      	ldrb	r3, [r7, #2]
 800a770:	2b14      	cmp	r3, #20
 800a772:	d110      	bne.n	800a796 <VL53L0X_SetGpioConfig+0x52>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 800a774:	7e3b      	ldrb	r3, [r7, #24]
 800a776:	2b00      	cmp	r3, #0
 800a778:	d102      	bne.n	800a780 <VL53L0X_SetGpioConfig+0x3c>
			data = 0x10;
 800a77a:	2310      	movs	r3, #16
 800a77c:	73bb      	strb	r3, [r7, #14]
 800a77e:	e001      	b.n	800a784 <VL53L0X_SetGpioConfig+0x40>
		else
			data = 1;
 800a780:	2301      	movs	r3, #1
 800a782:	73bb      	strb	r3, [r7, #14]

		Status = VL53L0X_WrByte(Dev,
 800a784:	7bbb      	ldrb	r3, [r7, #14]
 800a786:	461a      	mov	r2, r3
 800a788:	2184      	movs	r1, #132	; 0x84
 800a78a:	6878      	ldr	r0, [r7, #4]
 800a78c:	f003 fbec 	bl	800df68 <VL53L0X_WrByte>
 800a790:	4603      	mov	r3, r0
 800a792:	73fb      	strb	r3, [r7, #15]
 800a794:	e0f3      	b.n	800a97e <VL53L0X_SetGpioConfig+0x23a>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 800a796:	78bb      	ldrb	r3, [r7, #2]
 800a798:	2b15      	cmp	r3, #21
 800a79a:	f040 8097 	bne.w	800a8cc <VL53L0X_SetGpioConfig+0x188>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800a79e:	2201      	movs	r2, #1
 800a7a0:	21ff      	movs	r1, #255	; 0xff
 800a7a2:	6878      	ldr	r0, [r7, #4]
 800a7a4:	f003 fbe0 	bl	800df68 <VL53L0X_WrByte>
 800a7a8:	4603      	mov	r3, r0
 800a7aa:	461a      	mov	r2, r3
 800a7ac:	7bfb      	ldrb	r3, [r7, #15]
 800a7ae:	4313      	orrs	r3, r2
 800a7b0:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800a7b2:	2200      	movs	r2, #0
 800a7b4:	2100      	movs	r1, #0
 800a7b6:	6878      	ldr	r0, [r7, #4]
 800a7b8:	f003 fbd6 	bl	800df68 <VL53L0X_WrByte>
 800a7bc:	4603      	mov	r3, r0
 800a7be:	461a      	mov	r2, r3
 800a7c0:	7bfb      	ldrb	r3, [r7, #15]
 800a7c2:	4313      	orrs	r3, r2
 800a7c4:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800a7c6:	2200      	movs	r2, #0
 800a7c8:	21ff      	movs	r1, #255	; 0xff
 800a7ca:	6878      	ldr	r0, [r7, #4]
 800a7cc:	f003 fbcc 	bl	800df68 <VL53L0X_WrByte>
 800a7d0:	4603      	mov	r3, r0
 800a7d2:	461a      	mov	r2, r3
 800a7d4:	7bfb      	ldrb	r3, [r7, #15]
 800a7d6:	4313      	orrs	r3, r2
 800a7d8:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800a7da:	2201      	movs	r2, #1
 800a7dc:	2180      	movs	r1, #128	; 0x80
 800a7de:	6878      	ldr	r0, [r7, #4]
 800a7e0:	f003 fbc2 	bl	800df68 <VL53L0X_WrByte>
 800a7e4:	4603      	mov	r3, r0
 800a7e6:	461a      	mov	r2, r3
 800a7e8:	7bfb      	ldrb	r3, [r7, #15]
 800a7ea:	4313      	orrs	r3, r2
 800a7ec:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 800a7ee:	2202      	movs	r2, #2
 800a7f0:	2185      	movs	r1, #133	; 0x85
 800a7f2:	6878      	ldr	r0, [r7, #4]
 800a7f4:	f003 fbb8 	bl	800df68 <VL53L0X_WrByte>
 800a7f8:	4603      	mov	r3, r0
 800a7fa:	461a      	mov	r2, r3
 800a7fc:	7bfb      	ldrb	r3, [r7, #15]
 800a7fe:	4313      	orrs	r3, r2
 800a800:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 800a802:	2204      	movs	r2, #4
 800a804:	21ff      	movs	r1, #255	; 0xff
 800a806:	6878      	ldr	r0, [r7, #4]
 800a808:	f003 fbae 	bl	800df68 <VL53L0X_WrByte>
 800a80c:	4603      	mov	r3, r0
 800a80e:	461a      	mov	r2, r3
 800a810:	7bfb      	ldrb	r3, [r7, #15]
 800a812:	4313      	orrs	r3, r2
 800a814:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 800a816:	2200      	movs	r2, #0
 800a818:	21cd      	movs	r1, #205	; 0xcd
 800a81a:	6878      	ldr	r0, [r7, #4]
 800a81c:	f003 fba4 	bl	800df68 <VL53L0X_WrByte>
 800a820:	4603      	mov	r3, r0
 800a822:	461a      	mov	r2, r3
 800a824:	7bfb      	ldrb	r3, [r7, #15]
 800a826:	4313      	orrs	r3, r2
 800a828:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 800a82a:	2211      	movs	r2, #17
 800a82c:	21cc      	movs	r1, #204	; 0xcc
 800a82e:	6878      	ldr	r0, [r7, #4]
 800a830:	f003 fb9a 	bl	800df68 <VL53L0X_WrByte>
 800a834:	4603      	mov	r3, r0
 800a836:	461a      	mov	r2, r3
 800a838:	7bfb      	ldrb	r3, [r7, #15]
 800a83a:	4313      	orrs	r3, r2
 800a83c:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 800a83e:	2207      	movs	r2, #7
 800a840:	21ff      	movs	r1, #255	; 0xff
 800a842:	6878      	ldr	r0, [r7, #4]
 800a844:	f003 fb90 	bl	800df68 <VL53L0X_WrByte>
 800a848:	4603      	mov	r3, r0
 800a84a:	461a      	mov	r2, r3
 800a84c:	7bfb      	ldrb	r3, [r7, #15]
 800a84e:	4313      	orrs	r3, r2
 800a850:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 800a852:	2200      	movs	r2, #0
 800a854:	21be      	movs	r1, #190	; 0xbe
 800a856:	6878      	ldr	r0, [r7, #4]
 800a858:	f003 fb86 	bl	800df68 <VL53L0X_WrByte>
 800a85c:	4603      	mov	r3, r0
 800a85e:	461a      	mov	r2, r3
 800a860:	7bfb      	ldrb	r3, [r7, #15]
 800a862:	4313      	orrs	r3, r2
 800a864:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 800a866:	2206      	movs	r2, #6
 800a868:	21ff      	movs	r1, #255	; 0xff
 800a86a:	6878      	ldr	r0, [r7, #4]
 800a86c:	f003 fb7c 	bl	800df68 <VL53L0X_WrByte>
 800a870:	4603      	mov	r3, r0
 800a872:	461a      	mov	r2, r3
 800a874:	7bfb      	ldrb	r3, [r7, #15]
 800a876:	4313      	orrs	r3, r2
 800a878:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 800a87a:	2209      	movs	r2, #9
 800a87c:	21cc      	movs	r1, #204	; 0xcc
 800a87e:	6878      	ldr	r0, [r7, #4]
 800a880:	f003 fb72 	bl	800df68 <VL53L0X_WrByte>
 800a884:	4603      	mov	r3, r0
 800a886:	461a      	mov	r2, r3
 800a888:	7bfb      	ldrb	r3, [r7, #15]
 800a88a:	4313      	orrs	r3, r2
 800a88c:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800a88e:	2200      	movs	r2, #0
 800a890:	21ff      	movs	r1, #255	; 0xff
 800a892:	6878      	ldr	r0, [r7, #4]
 800a894:	f003 fb68 	bl	800df68 <VL53L0X_WrByte>
 800a898:	4603      	mov	r3, r0
 800a89a:	461a      	mov	r2, r3
 800a89c:	7bfb      	ldrb	r3, [r7, #15]
 800a89e:	4313      	orrs	r3, r2
 800a8a0:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800a8a2:	2201      	movs	r2, #1
 800a8a4:	21ff      	movs	r1, #255	; 0xff
 800a8a6:	6878      	ldr	r0, [r7, #4]
 800a8a8:	f003 fb5e 	bl	800df68 <VL53L0X_WrByte>
 800a8ac:	4603      	mov	r3, r0
 800a8ae:	461a      	mov	r2, r3
 800a8b0:	7bfb      	ldrb	r3, [r7, #15]
 800a8b2:	4313      	orrs	r3, r2
 800a8b4:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800a8b6:	2200      	movs	r2, #0
 800a8b8:	2100      	movs	r1, #0
 800a8ba:	6878      	ldr	r0, [r7, #4]
 800a8bc:	f003 fb54 	bl	800df68 <VL53L0X_WrByte>
 800a8c0:	4603      	mov	r3, r0
 800a8c2:	461a      	mov	r2, r3
 800a8c4:	7bfb      	ldrb	r3, [r7, #15]
 800a8c6:	4313      	orrs	r3, r2
 800a8c8:	73fb      	strb	r3, [r7, #15]
 800a8ca:	e058      	b.n	800a97e <VL53L0X_SetGpioConfig+0x23a>

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
 800a8cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d121      	bne.n	800a918 <VL53L0X_SetGpioConfig+0x1d4>
			switch (Functionality) {
 800a8d4:	787b      	ldrb	r3, [r7, #1]
 800a8d6:	2b04      	cmp	r3, #4
 800a8d8:	d81b      	bhi.n	800a912 <VL53L0X_SetGpioConfig+0x1ce>
 800a8da:	a201      	add	r2, pc, #4	; (adr r2, 800a8e0 <VL53L0X_SetGpioConfig+0x19c>)
 800a8dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8e0:	0800a8f5 	.word	0x0800a8f5
 800a8e4:	0800a8fb 	.word	0x0800a8fb
 800a8e8:	0800a901 	.word	0x0800a901
 800a8ec:	0800a907 	.word	0x0800a907
 800a8f0:	0800a90d 	.word	0x0800a90d
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 800a8f4:	2300      	movs	r3, #0
 800a8f6:	73bb      	strb	r3, [r7, #14]
				break;
 800a8f8:	e00f      	b.n	800a91a <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 800a8fa:	2301      	movs	r3, #1
 800a8fc:	73bb      	strb	r3, [r7, #14]
				break;
 800a8fe:	e00c      	b.n	800a91a <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 800a900:	2302      	movs	r3, #2
 800a902:	73bb      	strb	r3, [r7, #14]
				break;
 800a904:	e009      	b.n	800a91a <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 800a906:	2303      	movs	r3, #3
 800a908:	73bb      	strb	r3, [r7, #14]
				break;
 800a90a:	e006      	b.n	800a91a <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 800a90c:	2304      	movs	r3, #4
 800a90e:	73bb      	strb	r3, [r7, #14]
				break;
 800a910:	e003      	b.n	800a91a <VL53L0X_SetGpioConfig+0x1d6>
			default:
				Status =
 800a912:	23f5      	movs	r3, #245	; 0xf5
 800a914:	73fb      	strb	r3, [r7, #15]
 800a916:	e000      	b.n	800a91a <VL53L0X_SetGpioConfig+0x1d6>
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}
 800a918:	bf00      	nop

		if (Status == VL53L0X_ERROR_NONE)
 800a91a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d107      	bne.n	800a932 <VL53L0X_SetGpioConfig+0x1ee>
			Status = VL53L0X_WrByte(Dev,
 800a922:	7bbb      	ldrb	r3, [r7, #14]
 800a924:	461a      	mov	r2, r3
 800a926:	210a      	movs	r1, #10
 800a928:	6878      	ldr	r0, [r7, #4]
 800a92a:	f003 fb1d 	bl	800df68 <VL53L0X_WrByte>
 800a92e:	4603      	mov	r3, r0
 800a930:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 800a932:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a936:	2b00      	cmp	r3, #0
 800a938:	d10f      	bne.n	800a95a <VL53L0X_SetGpioConfig+0x216>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 800a93a:	7e3b      	ldrb	r3, [r7, #24]
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d102      	bne.n	800a946 <VL53L0X_SetGpioConfig+0x202>
				data = 0;
 800a940:	2300      	movs	r3, #0
 800a942:	73bb      	strb	r3, [r7, #14]
 800a944:	e001      	b.n	800a94a <VL53L0X_SetGpioConfig+0x206>
			else
				data = (uint8_t)(1 << 4);
 800a946:	2310      	movs	r3, #16
 800a948:	73bb      	strb	r3, [r7, #14]

			Status = VL53L0X_UpdateByte(Dev,
 800a94a:	7bbb      	ldrb	r3, [r7, #14]
 800a94c:	22ef      	movs	r2, #239	; 0xef
 800a94e:	2184      	movs	r1, #132	; 0x84
 800a950:	6878      	ldr	r0, [r7, #4]
 800a952:	f003 fb57 	bl	800e004 <VL53L0X_UpdateByte>
 800a956:	4603      	mov	r3, r0
 800a958:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 800a95a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d103      	bne.n	800a96a <VL53L0X_SetGpioConfig+0x226>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	787a      	ldrb	r2, [r7, #1]
 800a966:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
				Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 800a96a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d105      	bne.n	800a97e <VL53L0X_SetGpioConfig+0x23a>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800a972:	2100      	movs	r1, #0
 800a974:	6878      	ldr	r0, [r7, #4]
 800a976:	f000 f83f 	bl	800a9f8 <VL53L0X_ClearInterruptMask>
 800a97a:	4603      	mov	r3, r0
 800a97c:	73fb      	strb	r3, [r7, #15]

	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a97e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a982:	4618      	mov	r0, r3
 800a984:	3710      	adds	r7, #16
 800a986:	46bd      	mov	sp, r7
 800a988:	bd80      	pop	{r7, pc}
 800a98a:	bf00      	nop

0800a98c <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 800a98c:	b580      	push	{r7, lr}
 800a98e:	b086      	sub	sp, #24
 800a990:	af00      	add	r7, sp, #0
 800a992:	60f8      	str	r0, [r7, #12]
 800a994:	607a      	str	r2, [r7, #4]
 800a996:	603b      	str	r3, [r7, #0]
 800a998:	460b      	mov	r3, r1
 800a99a:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a99c:	2300      	movs	r3, #0
 800a99e:	75fb      	strb	r3, [r7, #23]
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 800a9a0:	f107 0314 	add.w	r3, r7, #20
 800a9a4:	461a      	mov	r2, r3
 800a9a6:	210e      	movs	r1, #14
 800a9a8:	68f8      	ldr	r0, [r7, #12]
 800a9aa:	f003 fb89 	bl	800e0c0 <VL53L0X_RdWord>
 800a9ae:	4603      	mov	r3, r0
 800a9b0:	75fb      	strb	r3, [r7, #23]
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 800a9b2:	8abb      	ldrh	r3, [r7, #20]
 800a9b4:	045b      	lsls	r3, r3, #17
 800a9b6:	461a      	mov	r2, r3
 800a9b8:	4b0e      	ldr	r3, [pc, #56]	; (800a9f4 <VL53L0X_GetInterruptThresholds+0x68>)
 800a9ba:	4013      	ands	r3, r2
 800a9bc:	687a      	ldr	r2, [r7, #4]
 800a9be:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 800a9c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d10f      	bne.n	800a9e8 <VL53L0X_GetInterruptThresholds+0x5c>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 800a9c8:	f107 0314 	add.w	r3, r7, #20
 800a9cc:	461a      	mov	r2, r3
 800a9ce:	210c      	movs	r1, #12
 800a9d0:	68f8      	ldr	r0, [r7, #12]
 800a9d2:	f003 fb75 	bl	800e0c0 <VL53L0X_RdWord>
 800a9d6:	4603      	mov	r3, r0
 800a9d8:	75fb      	strb	r3, [r7, #23]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 800a9da:	8abb      	ldrh	r3, [r7, #20]
 800a9dc:	045b      	lsls	r3, r3, #17
 800a9de:	461a      	mov	r2, r3
 800a9e0:	4b04      	ldr	r3, [pc, #16]	; (800a9f4 <VL53L0X_GetInterruptThresholds+0x68>)
 800a9e2:	4013      	ands	r3, r2
		*pThresholdHigh =
 800a9e4:	683a      	ldr	r2, [r7, #0]
 800a9e6:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a9e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a9ec:	4618      	mov	r0, r3
 800a9ee:	3718      	adds	r7, #24
 800a9f0:	46bd      	mov	sp, r7
 800a9f2:	bd80      	pop	{r7, pc}
 800a9f4:	1ffe0000 	.word	0x1ffe0000

0800a9f8 <VL53L0X_ClearInterruptMask>:
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 800a9f8:	b580      	push	{r7, lr}
 800a9fa:	b084      	sub	sp, #16
 800a9fc:	af00      	add	r7, sp, #0
 800a9fe:	6078      	str	r0, [r7, #4]
 800aa00:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800aa02:	2300      	movs	r3, #0
 800aa04:	73fb      	strb	r3, [r7, #15]
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 800aa06:	2300      	movs	r3, #0
 800aa08:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 800aa0a:	2201      	movs	r2, #1
 800aa0c:	210b      	movs	r1, #11
 800aa0e:	6878      	ldr	r0, [r7, #4]
 800aa10:	f003 faaa 	bl	800df68 <VL53L0X_WrByte>
 800aa14:	4603      	mov	r3, r0
 800aa16:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 800aa18:	2200      	movs	r2, #0
 800aa1a:	210b      	movs	r1, #11
 800aa1c:	6878      	ldr	r0, [r7, #4]
 800aa1e:	f003 faa3 	bl	800df68 <VL53L0X_WrByte>
 800aa22:	4603      	mov	r3, r0
 800aa24:	461a      	mov	r2, r3
 800aa26:	7bfb      	ldrb	r3, [r7, #15]
 800aa28:	4313      	orrs	r3, r2
 800aa2a:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 800aa2c:	f107 030d 	add.w	r3, r7, #13
 800aa30:	461a      	mov	r2, r3
 800aa32:	2113      	movs	r1, #19
 800aa34:	6878      	ldr	r0, [r7, #4]
 800aa36:	f003 fb19 	bl	800e06c <VL53L0X_RdByte>
 800aa3a:	4603      	mov	r3, r0
 800aa3c:	461a      	mov	r2, r3
 800aa3e:	7bfb      	ldrb	r3, [r7, #15]
 800aa40:	4313      	orrs	r3, r2
 800aa42:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 800aa44:	7bbb      	ldrb	r3, [r7, #14]
 800aa46:	3301      	adds	r3, #1
 800aa48:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 800aa4a:	7b7b      	ldrb	r3, [r7, #13]
 800aa4c:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d006      	beq.n	800aa62 <VL53L0X_ClearInterruptMask+0x6a>
			&& (LoopCount < 3)
 800aa54:	7bbb      	ldrb	r3, [r7, #14]
 800aa56:	2b02      	cmp	r3, #2
 800aa58:	d803      	bhi.n	800aa62 <VL53L0X_ClearInterruptMask+0x6a>
			&& (Status == VL53L0X_ERROR_NONE));
 800aa5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d0d3      	beq.n	800aa0a <VL53L0X_ClearInterruptMask+0x12>


	if (LoopCount >= 3)
 800aa62:	7bbb      	ldrb	r3, [r7, #14]
 800aa64:	2b02      	cmp	r3, #2
 800aa66:	d901      	bls.n	800aa6c <VL53L0X_ClearInterruptMask+0x74>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 800aa68:	23f4      	movs	r3, #244	; 0xf4
 800aa6a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 800aa6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800aa70:	4618      	mov	r0, r3
 800aa72:	3710      	adds	r7, #16
 800aa74:	46bd      	mov	sp, r7
 800aa76:	bd80      	pop	{r7, pc}

0800aa78 <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 800aa78:	b580      	push	{r7, lr}
 800aa7a:	b084      	sub	sp, #16
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	6078      	str	r0, [r7, #4]
 800aa80:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800aa82:	2300      	movs	r3, #0
 800aa84:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 800aa86:	f107 030e 	add.w	r3, r7, #14
 800aa8a:	461a      	mov	r2, r3
 800aa8c:	2113      	movs	r1, #19
 800aa8e:	6878      	ldr	r0, [r7, #4]
 800aa90:	f003 faec 	bl	800e06c <VL53L0X_RdByte>
 800aa94:	4603      	mov	r3, r0
 800aa96:	73fb      	strb	r3, [r7, #15]
	*pInterruptMaskStatus = Byte & 0x07;
 800aa98:	7bbb      	ldrb	r3, [r7, #14]
 800aa9a:	f003 0207 	and.w	r2, r3, #7
 800aa9e:	683b      	ldr	r3, [r7, #0]
 800aaa0:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 800aaa2:	7bbb      	ldrb	r3, [r7, #14]
 800aaa4:	f003 0318 	and.w	r3, r3, #24
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d001      	beq.n	800aab0 <VL53L0X_GetInterruptMaskStatus+0x38>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 800aaac:	23fa      	movs	r3, #250	; 0xfa
 800aaae:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 800aab0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800aab4:	4618      	mov	r0, r3
 800aab6:	3710      	adds	r7, #16
 800aab8:	46bd      	mov	sp, r7
 800aaba:	bd80      	pop	{r7, pc}

0800aabc <VL53L0X_PerformRefSpadManagement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
 800aabc:	b580      	push	{r7, lr}
 800aabe:	b086      	sub	sp, #24
 800aac0:	af00      	add	r7, sp, #0
 800aac2:	60f8      	str	r0, [r7, #12]
 800aac4:	60b9      	str	r1, [r7, #8]
 800aac6:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800aac8:	2300      	movs	r3, #0
 800aaca:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 800aacc:	687a      	ldr	r2, [r7, #4]
 800aace:	68b9      	ldr	r1, [r7, #8]
 800aad0:	68f8      	ldr	r0, [r7, #12]
 800aad2:	f000 fa33 	bl	800af3c <VL53L0X_perform_ref_spad_management>
 800aad6:	4603      	mov	r3, r0
 800aad8:	75fb      	strb	r3, [r7, #23]
		isApertureSpads);

	LOG_FUNCTION_END(Status);

	return Status;
 800aada:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800aade:	4618      	mov	r0, r3
 800aae0:	3718      	adds	r7, #24
 800aae2:	46bd      	mov	sp, r7
 800aae4:	bd80      	pop	{r7, pc}

0800aae6 <VL53L0X_PerformContinuousRangingMeasurement>:


VL53L0X_Error VL53L0X_PerformContinuousRangingMeasurement(VL53L0X_Dev_t *device, VL53L0X_RangingMeasurementData_t *ranging_data) {
 800aae6:	b580      	push	{r7, lr}
 800aae8:	b084      	sub	sp, #16
 800aaea:	af00      	add	r7, sp, #0
 800aaec:	6078      	str	r0, [r7, #4]
 800aaee:	6039      	str	r1, [r7, #0]
    VL53L0X_Error status;

    // Set the device to high accuracy mode
    status = VL53L0X_SetDeviceMode(device, VL53L0X_DEVICEMODE_CONTINUOUS_RANGING);
 800aaf0:	2101      	movs	r1, #1
 800aaf2:	6878      	ldr	r0, [r7, #4]
 800aaf4:	f7fe fed2 	bl	800989c <VL53L0X_SetDeviceMode>
 800aaf8:	4603      	mov	r3, r0
 800aafa:	73fb      	strb	r3, [r7, #15]
    if (status != VL53L0X_ERROR_NONE) {
 800aafc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d002      	beq.n	800ab0a <VL53L0X_PerformContinuousRangingMeasurement+0x24>
        return status;
 800ab04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ab08:	e019      	b.n	800ab3e <VL53L0X_PerformContinuousRangingMeasurement+0x58>
    }

    // Start continuous ranging measurement
    status = VL53L0X_StartMeasurement(device);
 800ab0a:	6878      	ldr	r0, [r7, #4]
 800ab0c:	f7ff fbc4 	bl	800a298 <VL53L0X_StartMeasurement>
 800ab10:	4603      	mov	r3, r0
 800ab12:	73fb      	strb	r3, [r7, #15]
    if (status != VL53L0X_ERROR_NONE) {
 800ab14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d002      	beq.n	800ab22 <VL53L0X_PerformContinuousRangingMeasurement+0x3c>
        return status;
 800ab1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ab20:	e00d      	b.n	800ab3e <VL53L0X_PerformContinuousRangingMeasurement+0x58>
    }

    // Get ranging measurement data
    status = VL53L0X_GetRangingMeasurementData(device, ranging_data);
 800ab22:	6839      	ldr	r1, [r7, #0]
 800ab24:	6878      	ldr	r0, [r7, #4]
 800ab26:	f7ff fcb9 	bl	800a49c <VL53L0X_GetRangingMeasurementData>
 800ab2a:	4603      	mov	r3, r0
 800ab2c:	73fb      	strb	r3, [r7, #15]
    if (status != VL53L0X_ERROR_NONE) {
 800ab2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d002      	beq.n	800ab3c <VL53L0X_PerformContinuousRangingMeasurement+0x56>
        return status;
 800ab36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ab3a:	e000      	b.n	800ab3e <VL53L0X_PerformContinuousRangingMeasurement+0x58>
    }

    return VL53L0X_ERROR_NONE;
 800ab3c:	2300      	movs	r3, #0
}
 800ab3e:	4618      	mov	r0, r3
 800ab40:	3710      	adds	r7, #16
 800ab42:	46bd      	mov	sp, r7
 800ab44:	bd80      	pop	{r7, pc}

0800ab46 <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 800ab46:	b580      	push	{r7, lr}
 800ab48:	b084      	sub	sp, #16
 800ab4a:	af00      	add	r7, sp, #0
 800ab4c:	6078      	str	r0, [r7, #4]
 800ab4e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ab50:	2300      	movs	r3, #0
 800ab52:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 800ab54:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800ab58:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 800ab5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ab5e:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 800ab60:	f107 0308 	add.w	r3, r7, #8
 800ab64:	461a      	mov	r2, r3
 800ab66:	2128      	movs	r1, #40	; 0x28
 800ab68:	6878      	ldr	r0, [r7, #4]
 800ab6a:	f003 faa9 	bl	800e0c0 <VL53L0X_RdWord>
 800ab6e:	4603      	mov	r3, r0
 800ab70:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 800ab72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d11e      	bne.n	800abb8 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 800ab7a:	893b      	ldrh	r3, [r7, #8]
 800ab7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ab80:	b29b      	uxth	r3, r3
 800ab82:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 800ab84:	893b      	ldrh	r3, [r7, #8]
 800ab86:	461a      	mov	r2, r3
 800ab88:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800ab8c:	429a      	cmp	r2, r3
 800ab8e:	dd0b      	ble.n	800aba8 <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 800ab90:	893a      	ldrh	r2, [r7, #8]
 800ab92:	897b      	ldrh	r3, [r7, #10]
 800ab94:	1ad3      	subs	r3, r2, r3
 800ab96:	b29b      	uxth	r3, r3
 800ab98:	b21b      	sxth	r3, r3
 800ab9a:	461a      	mov	r2, r3
					* 250;
 800ab9c:	23fa      	movs	r3, #250	; 0xfa
 800ab9e:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 800aba2:	683b      	ldr	r3, [r7, #0]
 800aba4:	601a      	str	r2, [r3, #0]
 800aba6:	e007      	b.n	800abb8 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 800aba8:	893b      	ldrh	r3, [r7, #8]
 800abaa:	b21b      	sxth	r3, r3
 800abac:	461a      	mov	r2, r3
 800abae:	23fa      	movs	r3, #250	; 0xfa
 800abb0:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 800abb4:	683b      	ldr	r3, [r7, #0]
 800abb6:	601a      	str	r2, [r3, #0]

	}

	return Status;
 800abb8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800abbc:	4618      	mov	r0, r3
 800abbe:	3710      	adds	r7, #16
 800abc0:	46bd      	mov	sp, r7
 800abc2:	bd80      	pop	{r7, pc}

0800abc4 <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 800abc4:	b480      	push	{r7}
 800abc6:	b08b      	sub	sp, #44	; 0x2c
 800abc8:	af00      	add	r7, sp, #0
 800abca:	60f8      	str	r0, [r7, #12]
 800abcc:	60b9      	str	r1, [r7, #8]
 800abce:	607a      	str	r2, [r7, #4]
 800abd0:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 800abd2:	2308      	movs	r3, #8
 800abd4:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 800abd6:	2300      	movs	r3, #0
 800abd8:	77bb      	strb	r3, [r7, #30]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 800abda:	683b      	ldr	r3, [r7, #0]
 800abdc:	f04f 32ff 	mov.w	r2, #4294967295
 800abe0:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 800abe2:	687a      	ldr	r2, [r7, #4]
 800abe4:	69bb      	ldr	r3, [r7, #24]
 800abe6:	fbb2 f3f3 	udiv	r3, r2, r3
 800abea:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	69ba      	ldr	r2, [r7, #24]
 800abf0:	fbb3 f2f2 	udiv	r2, r3, r2
 800abf4:	69b9      	ldr	r1, [r7, #24]
 800abf6:	fb01 f202 	mul.w	r2, r1, r2
 800abfa:	1a9b      	subs	r3, r3, r2
 800abfc:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 800abfe:	697b      	ldr	r3, [r7, #20]
 800ac00:	627b      	str	r3, [r7, #36]	; 0x24
 800ac02:	e030      	b.n	800ac66 <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 800ac04:	2300      	movs	r3, #0
 800ac06:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 800ac08:	68fa      	ldr	r2, [r7, #12]
 800ac0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac0c:	4413      	add	r3, r2
 800ac0e:	781b      	ldrb	r3, [r3, #0]
 800ac10:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 800ac12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac14:	697b      	ldr	r3, [r7, #20]
 800ac16:	429a      	cmp	r2, r3
 800ac18:	d11e      	bne.n	800ac58 <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating */
			dataByte >>= fineOffset;
 800ac1a:	7ffa      	ldrb	r2, [r7, #31]
 800ac1c:	693b      	ldr	r3, [r7, #16]
 800ac1e:	fa42 f303 	asr.w	r3, r2, r3
 800ac22:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 800ac24:	693b      	ldr	r3, [r7, #16]
 800ac26:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 800ac28:	e016      	b.n	800ac58 <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 800ac2a:	7ffb      	ldrb	r3, [r7, #31]
 800ac2c:	f003 0301 	and.w	r3, r3, #1
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d00b      	beq.n	800ac4c <get_next_good_spad+0x88>
				success = 1;
 800ac34:	2301      	movs	r3, #1
 800ac36:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 800ac38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac3a:	69ba      	ldr	r2, [r7, #24]
 800ac3c:	fb03 f202 	mul.w	r2, r3, r2
 800ac40:	6a3b      	ldr	r3, [r7, #32]
 800ac42:	4413      	add	r3, r2
 800ac44:	461a      	mov	r2, r3
 800ac46:	683b      	ldr	r3, [r7, #0]
 800ac48:	601a      	str	r2, [r3, #0]
				break;
 800ac4a:	e009      	b.n	800ac60 <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 800ac4c:	7ffb      	ldrb	r3, [r7, #31]
 800ac4e:	085b      	lsrs	r3, r3, #1
 800ac50:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 800ac52:	6a3b      	ldr	r3, [r7, #32]
 800ac54:	3301      	adds	r3, #1
 800ac56:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 800ac58:	6a3a      	ldr	r2, [r7, #32]
 800ac5a:	69bb      	ldr	r3, [r7, #24]
 800ac5c:	429a      	cmp	r2, r3
 800ac5e:	d3e4      	bcc.n	800ac2a <get_next_good_spad+0x66>
				coarseIndex++) {
 800ac60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac62:	3301      	adds	r3, #1
 800ac64:	627b      	str	r3, [r7, #36]	; 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 800ac66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac68:	68bb      	ldr	r3, [r7, #8]
 800ac6a:	429a      	cmp	r2, r3
 800ac6c:	d202      	bcs.n	800ac74 <get_next_good_spad+0xb0>
 800ac6e:	7fbb      	ldrb	r3, [r7, #30]
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d0c7      	beq.n	800ac04 <get_next_good_spad+0x40>
		}
	}
}
 800ac74:	bf00      	nop
 800ac76:	372c      	adds	r7, #44	; 0x2c
 800ac78:	46bd      	mov	sp, r7
 800ac7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac7e:	4770      	bx	lr

0800ac80 <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 800ac80:	b480      	push	{r7}
 800ac82:	b085      	sub	sp, #20
 800ac84:	af00      	add	r7, sp, #0
 800ac86:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 800ac88:	2301      	movs	r3, #1
 800ac8a:	73fb      	strb	r3, [r7, #15]
	quadrant = spadIndex >> 6;
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	099b      	lsrs	r3, r3, #6
 800ac90:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 800ac92:	4a07      	ldr	r2, [pc, #28]	; (800acb0 <is_aperture+0x30>)
 800ac94:	68bb      	ldr	r3, [r7, #8]
 800ac96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d101      	bne.n	800aca2 <is_aperture+0x22>
		isAperture = 0;
 800ac9e:	2300      	movs	r3, #0
 800aca0:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 800aca2:	7bfb      	ldrb	r3, [r7, #15]
}
 800aca4:	4618      	mov	r0, r3
 800aca6:	3714      	adds	r7, #20
 800aca8:	46bd      	mov	sp, r7
 800acaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acae:	4770      	bx	lr
 800acb0:	200002b8 	.word	0x200002b8

0800acb4 <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 800acb4:	b480      	push	{r7}
 800acb6:	b089      	sub	sp, #36	; 0x24
 800acb8:	af00      	add	r7, sp, #0
 800acba:	60f8      	str	r0, [r7, #12]
 800acbc:	60b9      	str	r1, [r7, #8]
 800acbe:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800acc0:	2300      	movs	r3, #0
 800acc2:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 800acc4:	2308      	movs	r3, #8
 800acc6:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 800acc8:	687a      	ldr	r2, [r7, #4]
 800acca:	69bb      	ldr	r3, [r7, #24]
 800accc:	fbb2 f3f3 	udiv	r3, r2, r3
 800acd0:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	69ba      	ldr	r2, [r7, #24]
 800acd6:	fbb3 f2f2 	udiv	r2, r3, r2
 800acda:	69b9      	ldr	r1, [r7, #24]
 800acdc:	fb01 f202 	mul.w	r2, r1, r2
 800ace0:	1a9b      	subs	r3, r3, r2
 800ace2:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 800ace4:	697a      	ldr	r2, [r7, #20]
 800ace6:	68bb      	ldr	r3, [r7, #8]
 800ace8:	429a      	cmp	r2, r3
 800acea:	d302      	bcc.n	800acf2 <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 800acec:	23ce      	movs	r3, #206	; 0xce
 800acee:	77fb      	strb	r3, [r7, #31]
 800acf0:	e010      	b.n	800ad14 <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 800acf2:	68fa      	ldr	r2, [r7, #12]
 800acf4:	697b      	ldr	r3, [r7, #20]
 800acf6:	4413      	add	r3, r2
 800acf8:	781b      	ldrb	r3, [r3, #0]
 800acfa:	b25a      	sxtb	r2, r3
 800acfc:	2101      	movs	r1, #1
 800acfe:	693b      	ldr	r3, [r7, #16]
 800ad00:	fa01 f303 	lsl.w	r3, r1, r3
 800ad04:	b25b      	sxtb	r3, r3
 800ad06:	4313      	orrs	r3, r2
 800ad08:	b259      	sxtb	r1, r3
 800ad0a:	68fa      	ldr	r2, [r7, #12]
 800ad0c:	697b      	ldr	r3, [r7, #20]
 800ad0e:	4413      	add	r3, r2
 800ad10:	b2ca      	uxtb	r2, r1
 800ad12:	701a      	strb	r2, [r3, #0]

	return status;
 800ad14:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800ad18:	4618      	mov	r0, r3
 800ad1a:	3724      	adds	r7, #36	; 0x24
 800ad1c:	46bd      	mov	sp, r7
 800ad1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad22:	4770      	bx	lr

0800ad24 <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 800ad24:	b580      	push	{r7, lr}
 800ad26:	b084      	sub	sp, #16
 800ad28:	af00      	add	r7, sp, #0
 800ad2a:	6078      	str	r0, [r7, #4]
 800ad2c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 800ad2e:	2306      	movs	r3, #6
 800ad30:	683a      	ldr	r2, [r7, #0]
 800ad32:	21b0      	movs	r1, #176	; 0xb0
 800ad34:	6878      	ldr	r0, [r7, #4]
 800ad36:	f003 f8bb 	bl	800deb0 <VL53L0X_WriteMulti>
 800ad3a:	4603      	mov	r3, r0
 800ad3c:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 800ad3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ad42:	4618      	mov	r0, r3
 800ad44:	3710      	adds	r7, #16
 800ad46:	46bd      	mov	sp, r7
 800ad48:	bd80      	pop	{r7, pc}

0800ad4a <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 800ad4a:	b580      	push	{r7, lr}
 800ad4c:	b084      	sub	sp, #16
 800ad4e:	af00      	add	r7, sp, #0
 800ad50:	6078      	str	r0, [r7, #4]
 800ad52:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 800ad54:	2306      	movs	r3, #6
 800ad56:	683a      	ldr	r2, [r7, #0]
 800ad58:	21b0      	movs	r1, #176	; 0xb0
 800ad5a:	6878      	ldr	r0, [r7, #4]
 800ad5c:	f003 f8d8 	bl	800df10 <VL53L0X_ReadMulti>
 800ad60:	4603      	mov	r3, r0
 800ad62:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 800ad64:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ad68:	4618      	mov	r0, r3
 800ad6a:	3710      	adds	r7, #16
 800ad6c:	46bd      	mov	sp, r7
 800ad6e:	bd80      	pop	{r7, pc}

0800ad70 <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 800ad70:	b580      	push	{r7, lr}
 800ad72:	b08c      	sub	sp, #48	; 0x30
 800ad74:	af00      	add	r7, sp, #0
 800ad76:	60f8      	str	r0, [r7, #12]
 800ad78:	607a      	str	r2, [r7, #4]
 800ad7a:	603b      	str	r3, [r7, #0]
 800ad7c:	460b      	mov	r3, r1
 800ad7e:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800ad80:	2300      	movs	r3, #0
 800ad82:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 800ad86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ad88:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 800ad8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ad8c:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 800ad8e:	2300      	movs	r3, #0
 800ad90:	62bb      	str	r3, [r7, #40]	; 0x28
 800ad92:	e02b      	b.n	800adec <enable_ref_spads+0x7c>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 800ad94:	f107 031c 	add.w	r3, r7, #28
 800ad98:	6a3a      	ldr	r2, [r7, #32]
 800ad9a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ad9c:	6878      	ldr	r0, [r7, #4]
 800ad9e:	f7ff ff11 	bl	800abc4 <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 800ada2:	69fb      	ldr	r3, [r7, #28]
 800ada4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ada8:	d103      	bne.n	800adb2 <enable_ref_spads+0x42>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 800adaa:	23ce      	movs	r3, #206	; 0xce
 800adac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 800adb0:	e020      	b.n	800adf4 <enable_ref_spads+0x84>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 800adb2:	69fb      	ldr	r3, [r7, #28]
 800adb4:	461a      	mov	r2, r3
 800adb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800adb8:	4413      	add	r3, r2
 800adba:	4618      	mov	r0, r3
 800adbc:	f7ff ff60 	bl	800ac80 <is_aperture>
 800adc0:	4603      	mov	r3, r0
 800adc2:	461a      	mov	r2, r3
 800adc4:	7afb      	ldrb	r3, [r7, #11]
 800adc6:	4293      	cmp	r3, r2
 800adc8:	d003      	beq.n	800add2 <enable_ref_spads+0x62>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 800adca:	23ce      	movs	r3, #206	; 0xce
 800adcc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 800add0:	e010      	b.n	800adf4 <enable_ref_spads+0x84>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 800add2:	69fb      	ldr	r3, [r7, #28]
 800add4:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 800add6:	6a3a      	ldr	r2, [r7, #32]
 800add8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800adda:	6838      	ldr	r0, [r7, #0]
 800addc:	f7ff ff6a 	bl	800acb4 <enable_spad_bit>
		currentSpad++;
 800ade0:	6a3b      	ldr	r3, [r7, #32]
 800ade2:	3301      	adds	r3, #1
 800ade4:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 800ade6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ade8:	3301      	adds	r3, #1
 800adea:	62bb      	str	r3, [r7, #40]	; 0x28
 800adec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800adee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800adf0:	429a      	cmp	r2, r3
 800adf2:	d3cf      	bcc.n	800ad94 <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 800adf4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800adf6:	6a3a      	ldr	r2, [r7, #32]
 800adf8:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 800adfa:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d106      	bne.n	800ae10 <enable_ref_spads+0xa0>
		status = set_ref_spad_map(Dev, spadArray);
 800ae02:	6839      	ldr	r1, [r7, #0]
 800ae04:	68f8      	ldr	r0, [r7, #12]
 800ae06:	f7ff ff8d 	bl	800ad24 <set_ref_spad_map>
 800ae0a:	4603      	mov	r3, r0
 800ae0c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 800ae10:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d121      	bne.n	800ae5c <enable_ref_spads+0xec>
		status = get_ref_spad_map(Dev, checkSpadArray);
 800ae18:	f107 0314 	add.w	r3, r7, #20
 800ae1c:	4619      	mov	r1, r3
 800ae1e:	68f8      	ldr	r0, [r7, #12]
 800ae20:	f7ff ff93 	bl	800ad4a <get_ref_spad_map>
 800ae24:	4603      	mov	r3, r0
 800ae26:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		i = 0;
 800ae2a:	2300      	movs	r3, #0
 800ae2c:	627b      	str	r3, [r7, #36]	; 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 800ae2e:	e011      	b.n	800ae54 <enable_ref_spads+0xe4>
			if (spadArray[i] != checkSpadArray[i]) {
 800ae30:	683a      	ldr	r2, [r7, #0]
 800ae32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae34:	4413      	add	r3, r2
 800ae36:	781a      	ldrb	r2, [r3, #0]
 800ae38:	f107 0114 	add.w	r1, r7, #20
 800ae3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae3e:	440b      	add	r3, r1
 800ae40:	781b      	ldrb	r3, [r3, #0]
 800ae42:	429a      	cmp	r2, r3
 800ae44:	d003      	beq.n	800ae4e <enable_ref_spads+0xde>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 800ae46:	23ce      	movs	r3, #206	; 0xce
 800ae48:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 800ae4c:	e006      	b.n	800ae5c <enable_ref_spads+0xec>
			}
			i++;
 800ae4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae50:	3301      	adds	r3, #1
 800ae52:	627b      	str	r3, [r7, #36]	; 0x24
		while (i < size) {
 800ae54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae58:	429a      	cmp	r2, r3
 800ae5a:	d3e9      	bcc.n	800ae30 <enable_ref_spads+0xc0>
		}
	}
	return status;
 800ae5c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800ae60:	4618      	mov	r0, r3
 800ae62:	3730      	adds	r7, #48	; 0x30
 800ae64:	46bd      	mov	sp, r7
 800ae66:	bd80      	pop	{r7, pc}

0800ae68 <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 800ae68:	b580      	push	{r7, lr}
 800ae6a:	b08a      	sub	sp, #40	; 0x28
 800ae6c:	af00      	add	r7, sp, #0
 800ae6e:	6078      	str	r0, [r7, #4]
 800ae70:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800ae72:	2300      	movs	r3, #0
 800ae74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 800ae78:	2300      	movs	r3, #0
 800ae7a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800ae84:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 800ae88:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d107      	bne.n	800aea0 <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 800ae90:	22c0      	movs	r2, #192	; 0xc0
 800ae92:	2101      	movs	r1, #1
 800ae94:	6878      	ldr	r0, [r7, #4]
 800ae96:	f003 f867 	bl	800df68 <VL53L0X_WrByte>
 800ae9a:	4603      	mov	r3, r0
 800ae9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 800aea0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d108      	bne.n	800aeba <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 800aea8:	f107 0308 	add.w	r3, r7, #8
 800aeac:	4619      	mov	r1, r3
 800aeae:	6878      	ldr	r0, [r7, #4]
 800aeb0:	f7ff fc18 	bl	800a6e4 <VL53L0X_PerformSingleRangingMeasurement>
 800aeb4:	4603      	mov	r3, r0
 800aeb6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 800aeba:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d107      	bne.n	800aed2 <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800aec2:	2201      	movs	r2, #1
 800aec4:	21ff      	movs	r1, #255	; 0xff
 800aec6:	6878      	ldr	r0, [r7, #4]
 800aec8:	f003 f84e 	bl	800df68 <VL53L0X_WrByte>
 800aecc:	4603      	mov	r3, r0
 800aece:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE)
 800aed2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d107      	bne.n	800aeea <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 800aeda:	683a      	ldr	r2, [r7, #0]
 800aedc:	21b6      	movs	r1, #182	; 0xb6
 800aede:	6878      	ldr	r0, [r7, #4]
 800aee0:	f003 f8ee 	bl	800e0c0 <VL53L0X_RdWord>
 800aee4:	4603      	mov	r3, r0
 800aee6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 800aeea:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d107      	bne.n	800af02 <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800aef2:	2200      	movs	r2, #0
 800aef4:	21ff      	movs	r1, #255	; 0xff
 800aef6:	6878      	ldr	r0, [r7, #4]
 800aef8:	f003 f836 	bl	800df68 <VL53L0X_WrByte>
 800aefc:	4603      	mov	r3, r0
 800aefe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE) {
 800af02:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800af06:	2b00      	cmp	r3, #0
 800af08:	d112      	bne.n	800af30 <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800af0a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800af0e:	461a      	mov	r2, r3
 800af10:	2101      	movs	r1, #1
 800af12:	6878      	ldr	r0, [r7, #4]
 800af14:	f003 f828 	bl	800df68 <VL53L0X_WrByte>
 800af18:	4603      	mov	r3, r0
 800af1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 800af1e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800af22:	2b00      	cmp	r3, #0
 800af24:	d104      	bne.n	800af30 <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800af2c:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
	}

	return status;
 800af30:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800af34:	4618      	mov	r0, r3
 800af36:	3728      	adds	r7, #40	; 0x28
 800af38:	46bd      	mov	sp, r7
 800af3a:	bd80      	pop	{r7, pc}

0800af3c <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 800af3c:	b590      	push	{r4, r7, lr}
 800af3e:	b09d      	sub	sp, #116	; 0x74
 800af40:	af06      	add	r7, sp, #24
 800af42:	60f8      	str	r0, [r7, #12]
 800af44:	60b9      	str	r1, [r7, #8]
 800af46:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800af48:	2300      	movs	r3, #0
 800af4a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 800af4e:	23b4      	movs	r3, #180	; 0xb4
 800af50:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	uint32_t minimumSpadCount = 3;
 800af54:	2303      	movs	r3, #3
 800af56:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t maxSpadCount = 44;
 800af58:	232c      	movs	r3, #44	; 0x2c
 800af5a:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t currentSpadIndex = 0;
 800af5c:	2300      	movs	r3, #0
 800af5e:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t lastSpadIndex = 0;
 800af60:	2300      	movs	r3, #0
 800af62:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 800af64:	2300      	movs	r3, #0
 800af66:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 800af68:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 800af6c:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 800af6e:	2300      	movs	r3, #0
 800af70:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t index = 0;
 800af72:	2300      	movs	r3, #0
 800af74:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t spadArraySize = 6;
 800af76:	2306      	movs	r3, #6
 800af78:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t signalRateDiff = 0;
 800af7a:	2300      	movs	r3, #0
 800af7c:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t lastSignalRateDiff = 0;
 800af7e:	2300      	movs	r3, #0
 800af80:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t complete = 0;
 800af82:	2300      	movs	r3, #0
 800af84:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t VhvSettings = 0;
 800af88:	2300      	movs	r3, #0
 800af8a:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 800af8c:	2300      	movs	r3, #0
 800af8e:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 800af90:	2300      	movs	r3, #0
 800af92:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t	 isApertureSpads_int = 0;
 800af94:	2300      	movs	r3, #0
 800af96:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	f8b3 313c 	ldrh.w	r3, [r3, #316]	; 0x13c
 800afa0:	85fb      	strh	r3, [r7, #46]	; 0x2e
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 800afa2:	2300      	movs	r3, #0
 800afa4:	64bb      	str	r3, [r7, #72]	; 0x48
 800afa6:	e009      	b.n	800afbc <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800afa8:	68fa      	ldr	r2, [r7, #12]
 800afaa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800afac:	4413      	add	r3, r2
 800afae:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800afb2:	2200      	movs	r2, #0
 800afb4:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 800afb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800afb8:	3301      	adds	r3, #1
 800afba:	64bb      	str	r3, [r7, #72]	; 0x48
 800afbc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800afbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afc0:	429a      	cmp	r2, r3
 800afc2:	d3f1      	bcc.n	800afa8 <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800afc4:	2201      	movs	r2, #1
 800afc6:	21ff      	movs	r1, #255	; 0xff
 800afc8:	68f8      	ldr	r0, [r7, #12]
 800afca:	f002 ffcd 	bl	800df68 <VL53L0X_WrByte>
 800afce:	4603      	mov	r3, r0
 800afd0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 800afd4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d107      	bne.n	800afec <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 800afdc:	2200      	movs	r2, #0
 800afde:	214f      	movs	r1, #79	; 0x4f
 800afe0:	68f8      	ldr	r0, [r7, #12]
 800afe2:	f002 ffc1 	bl	800df68 <VL53L0X_WrByte>
 800afe6:	4603      	mov	r3, r0
 800afe8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 800afec:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d107      	bne.n	800b004 <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 800aff4:	222c      	movs	r2, #44	; 0x2c
 800aff6:	214e      	movs	r1, #78	; 0x4e
 800aff8:	68f8      	ldr	r0, [r7, #12]
 800affa:	f002 ffb5 	bl	800df68 <VL53L0X_WrByte>
 800affe:	4603      	mov	r3, r0
 800b000:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 800b004:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d107      	bne.n	800b01c <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800b00c:	2200      	movs	r2, #0
 800b00e:	21ff      	movs	r1, #255	; 0xff
 800b010:	68f8      	ldr	r0, [r7, #12]
 800b012:	f002 ffa9 	bl	800df68 <VL53L0X_WrByte>
 800b016:	4603      	mov	r3, r0
 800b018:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 800b01c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b020:	2b00      	cmp	r3, #0
 800b022:	d109      	bne.n	800b038 <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 800b024:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800b028:	461a      	mov	r2, r3
 800b02a:	21b6      	movs	r1, #182	; 0xb6
 800b02c:	68f8      	ldr	r0, [r7, #12]
 800b02e:	f002 ff9b 	bl	800df68 <VL53L0X_WrByte>
 800b032:	4603      	mov	r3, r0
 800b034:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 800b038:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d107      	bne.n	800b050 <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 800b040:	2200      	movs	r2, #0
 800b042:	2180      	movs	r1, #128	; 0x80
 800b044:	68f8      	ldr	r0, [r7, #12]
 800b046:	f002 ff8f 	bl	800df68 <VL53L0X_WrByte>
 800b04a:	4603      	mov	r3, r0
 800b04c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 800b050:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b054:	2b00      	cmp	r3, #0
 800b056:	d10a      	bne.n	800b06e <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 800b058:	f107 0210 	add.w	r2, r7, #16
 800b05c:	f107 0111 	add.w	r1, r7, #17
 800b060:	2300      	movs	r3, #0
 800b062:	68f8      	ldr	r0, [r7, #12]
 800b064:	f000 fbbb 	bl	800b7de <VL53L0X_perform_ref_calibration>
 800b068:	4603      	mov	r3, r0
 800b06a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 800b06e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b072:	2b00      	cmp	r3, #0
 800b074:	d121      	bne.n	800b0ba <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 800b076:	2300      	movs	r3, #0
 800b078:	653b      	str	r3, [r7, #80]	; 0x50
		lastSpadIndex = currentSpadIndex;
 800b07a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b07c:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 800b07e:	2300      	movs	r3, #0
 800b080:	64fb      	str	r3, [r7, #76]	; 0x4c
		Status = enable_ref_spads(Dev,
 800b082:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b084:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	f503 7492 	add.w	r4, r3, #292	; 0x124
		Status = enable_ref_spads(Dev,
 800b092:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800b096:	f107 0218 	add.w	r2, r7, #24
 800b09a:	9204      	str	r2, [sp, #16]
 800b09c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b09e:	9203      	str	r2, [sp, #12]
 800b0a0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b0a2:	9202      	str	r2, [sp, #8]
 800b0a4:	9301      	str	r3, [sp, #4]
 800b0a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0a8:	9300      	str	r3, [sp, #0]
 800b0aa:	4623      	mov	r3, r4
 800b0ac:	4602      	mov	r2, r0
 800b0ae:	68f8      	ldr	r0, [r7, #12]
 800b0b0:	f7ff fe5e 	bl	800ad70 <enable_ref_spads>
 800b0b4:	4603      	mov	r3, r0
 800b0b6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800b0ba:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d174      	bne.n	800b1ac <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 800b0c2:	69bb      	ldr	r3, [r7, #24]
 800b0c4:	653b      	str	r3, [r7, #80]	; 0x50

		Status = perform_ref_signal_measurement(Dev,
 800b0c6:	f107 0312 	add.w	r3, r7, #18
 800b0ca:	4619      	mov	r1, r3
 800b0cc:	68f8      	ldr	r0, [r7, #12]
 800b0ce:	f7ff fecb 	bl	800ae68 <perform_ref_signal_measurement>
 800b0d2:	4603      	mov	r3, r0
 800b0d4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 800b0d8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d161      	bne.n	800b1a4 <VL53L0X_perform_ref_spad_management+0x268>
			(peakSignalRateRef > targetRefRate)) {
 800b0e0:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 800b0e2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b0e4:	429a      	cmp	r2, r3
 800b0e6:	d25d      	bcs.n	800b1a4 <VL53L0X_perform_ref_spad_management+0x268>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs */

			for (index = 0; index < spadArraySize; index++)
 800b0e8:	2300      	movs	r3, #0
 800b0ea:	64bb      	str	r3, [r7, #72]	; 0x48
 800b0ec:	e009      	b.n	800b102 <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800b0ee:	68fa      	ldr	r2, [r7, #12]
 800b0f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b0f2:	4413      	add	r3, r2
 800b0f4:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800b0f8:	2200      	movs	r2, #0
 800b0fa:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 800b0fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b0fe:	3301      	adds	r3, #1
 800b100:	64bb      	str	r3, [r7, #72]	; 0x48
 800b102:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b106:	429a      	cmp	r2, r3
 800b108:	d3f1      	bcc.n	800b0ee <VL53L0X_perform_ref_spad_management+0x1b2>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 800b10a:	e002      	b.n	800b112 <VL53L0X_perform_ref_spad_management+0x1d6>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 800b10c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b10e:	3301      	adds	r3, #1
 800b110:	653b      	str	r3, [r7, #80]	; 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 800b112:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 800b116:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b118:	4413      	add	r3, r2
 800b11a:	4618      	mov	r0, r3
 800b11c:	f7ff fdb0 	bl	800ac80 <is_aperture>
 800b120:	4603      	mov	r3, r0
 800b122:	2b00      	cmp	r3, #0
 800b124:	d103      	bne.n	800b12e <VL53L0X_perform_ref_spad_management+0x1f2>
				== 0) && (currentSpadIndex < maxSpadCount)) {
 800b126:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b12a:	429a      	cmp	r2, r3
 800b12c:	d3ee      	bcc.n	800b10c <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 800b12e:	2301      	movs	r3, #1
 800b130:	64fb      	str	r3, [r7, #76]	; 0x4c

			Status = enable_ref_spads(Dev,
 800b132:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b134:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	f503 7492 	add.w	r4, r3, #292	; 0x124
			Status = enable_ref_spads(Dev,
 800b142:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800b146:	f107 0218 	add.w	r2, r7, #24
 800b14a:	9204      	str	r2, [sp, #16]
 800b14c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b14e:	9203      	str	r2, [sp, #12]
 800b150:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b152:	9202      	str	r2, [sp, #8]
 800b154:	9301      	str	r3, [sp, #4]
 800b156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b158:	9300      	str	r3, [sp, #0]
 800b15a:	4623      	mov	r3, r4
 800b15c:	4602      	mov	r2, r0
 800b15e:	68f8      	ldr	r0, [r7, #12]
 800b160:	f7ff fe06 	bl	800ad70 <enable_ref_spads>
 800b164:	4603      	mov	r3, r0
 800b166:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 800b16a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d11b      	bne.n	800b1aa <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 800b172:	69bb      	ldr	r3, [r7, #24]
 800b174:	653b      	str	r3, [r7, #80]	; 0x50
				Status = perform_ref_signal_measurement(Dev,
 800b176:	f107 0312 	add.w	r3, r7, #18
 800b17a:	4619      	mov	r1, r3
 800b17c:	68f8      	ldr	r0, [r7, #12]
 800b17e:	f7ff fe73 	bl	800ae68 <perform_ref_signal_measurement>
 800b182:	4603      	mov	r3, r0
 800b184:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 800b188:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d10c      	bne.n	800b1aa <VL53L0X_perform_ref_spad_management+0x26e>
					(peakSignalRateRef > targetRefRate)) {
 800b190:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 800b192:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b194:	429a      	cmp	r2, r3
 800b196:	d208      	bcs.n	800b1aa <VL53L0X_perform_ref_spad_management+0x26e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 800b198:	2301      	movs	r3, #1
 800b19a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					refSpadCount_int = minimumSpadCount;
 800b19e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1a0:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 800b1a2:	e002      	b.n	800b1aa <VL53L0X_perform_ref_spad_management+0x26e>
				}
			}
		} else {
			needAptSpads = 0;
 800b1a4:	2300      	movs	r3, #0
 800b1a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b1a8:	e000      	b.n	800b1ac <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 800b1aa:	bf00      	nop
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 800b1ac:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	f040 80af 	bne.w	800b314 <VL53L0X_perform_ref_spad_management+0x3d8>
		(peakSignalRateRef < targetRefRate)) {
 800b1b6:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 800b1b8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b1ba:	429a      	cmp	r2, r3
 800b1bc:	f240 80aa 	bls.w	800b314 <VL53L0X_perform_ref_spad_management+0x3d8>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 800b1c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b1c2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		refSpadCount_int	= minimumSpadCount;
 800b1c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1c8:	63fb      	str	r3, [r7, #60]	; 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	f503 7192 	add.w	r1, r3, #292	; 0x124
 800b1d0:	f107 031c 	add.w	r3, r7, #28
 800b1d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b1d6:	4618      	mov	r0, r3
 800b1d8:	f003 f820 	bl	800e21c <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 800b1dc:	8a7b      	ldrh	r3, [r7, #18]
 800b1de:	461a      	mov	r2, r3
 800b1e0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b1e2:	1ad3      	subs	r3, r2, r3
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	bfb8      	it	lt
 800b1e8:	425b      	neglt	r3, r3
 800b1ea:	647b      	str	r3, [r7, #68]	; 0x44
			targetRefRate);
		complete = 0;
 800b1ec:	2300      	movs	r3, #0
 800b1ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

		while (!complete) {
 800b1f2:	e086      	b.n	800b302 <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	f503 7095 	add.w	r0, r3, #298	; 0x12a
			get_next_good_spad(
 800b1fa:	f107 0314 	add.w	r3, r7, #20
 800b1fe:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b200:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b202:	f7ff fcdf 	bl	800abc4 <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 800b206:	697b      	ldr	r3, [r7, #20]
 800b208:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b20c:	d103      	bne.n	800b216 <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 800b20e:	23ce      	movs	r3, #206	; 0xce
 800b210:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 800b214:	e07e      	b.n	800b314 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 800b216:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800b21a:	697a      	ldr	r2, [r7, #20]
 800b21c:	4413      	add	r3, r2
 800b21e:	4618      	mov	r0, r3
 800b220:	f7ff fd2e 	bl	800ac80 <is_aperture>
 800b224:	4603      	mov	r3, r0
 800b226:	461a      	mov	r2, r3
 800b228:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b22a:	4293      	cmp	r3, r2
 800b22c:	d003      	beq.n	800b236 <VL53L0X_perform_ref_spad_management+0x2fa>
					needAptSpads) {
				/* At this point we have enabled the maximum
				 * number of Aperture spads.
				 */
				complete = 1;
 800b22e:	2301      	movs	r3, #1
 800b230:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
				break;
 800b234:	e06e      	b.n	800b314 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 800b236:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b238:	3301      	adds	r3, #1
 800b23a:	63fb      	str	r3, [r7, #60]	; 0x3c

			currentSpadIndex = nextGoodSpad;
 800b23c:	697b      	ldr	r3, [r7, #20]
 800b23e:	653b      	str	r3, [r7, #80]	; 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	f503 7392 	add.w	r3, r3, #292	; 0x124
			Status = enable_spad_bit(
 800b246:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b248:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b24a:	4618      	mov	r0, r3
 800b24c:	f7ff fd32 	bl	800acb4 <enable_spad_bit>
 800b250:	4603      	mov	r3, r0
 800b252:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 800b256:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d10c      	bne.n	800b278 <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 800b25e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b260:	3301      	adds	r3, #1
 800b262:	653b      	str	r3, [r7, #80]	; 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement. */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	f503 7392 	add.w	r3, r3, #292	; 0x124
				Status = set_ref_spad_map(Dev,
 800b26a:	4619      	mov	r1, r3
 800b26c:	68f8      	ldr	r0, [r7, #12]
 800b26e:	f7ff fd59 	bl	800ad24 <set_ref_spad_map>
 800b272:	4603      	mov	r3, r0
 800b274:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 800b278:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d146      	bne.n	800b30e <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 800b280:	f107 0312 	add.w	r3, r7, #18
 800b284:	4619      	mov	r1, r3
 800b286:	68f8      	ldr	r0, [r7, #12]
 800b288:	f7ff fdee 	bl	800ae68 <perform_ref_signal_measurement>
 800b28c:	4603      	mov	r3, r0
 800b28e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 800b292:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b296:	2b00      	cmp	r3, #0
 800b298:	d13b      	bne.n	800b312 <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 800b29a:	8a7b      	ldrh	r3, [r7, #18]
 800b29c:	461a      	mov	r2, r3
 800b29e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b2a0:	1ad3      	subs	r3, r2, r3
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	bfb8      	it	lt
 800b2a6:	425b      	neglt	r3, r3
 800b2a8:	627b      	str	r3, [r7, #36]	; 0x24

			if (peakSignalRateRef > targetRefRate) {
 800b2aa:	8a7b      	ldrh	r3, [r7, #18]
 800b2ac:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b2ae:	429a      	cmp	r2, r3
 800b2b0:	d21c      	bcs.n	800b2ec <VL53L0X_perform_ref_spad_management+0x3b0>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 800b2b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b2b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b2b6:	429a      	cmp	r2, r3
 800b2b8:	d914      	bls.n	800b2e4 <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this. */
					Status = set_ref_spad_map(Dev,
 800b2ba:	f107 031c 	add.w	r3, r7, #28
 800b2be:	4619      	mov	r1, r3
 800b2c0:	68f8      	ldr	r0, [r7, #12]
 800b2c2:	f7ff fd2f 	bl	800ad24 <set_ref_spad_map>
 800b2c6:	4603      	mov	r3, r0
 800b2c8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	f503 7392 	add.w	r3, r3, #292	; 0x124
					memcpy(
 800b2d2:	f107 011c 	add.w	r1, r7, #28
 800b2d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b2d8:	4618      	mov	r0, r3
 800b2da:	f002 ff9f 	bl	800e21c <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 800b2de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b2e0:	3b01      	subs	r3, #1
 800b2e2:	63fb      	str	r3, [r7, #60]	; 0x3c
				}
				complete = 1;
 800b2e4:	2301      	movs	r3, #1
 800b2e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b2ea:	e00a      	b.n	800b302 <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 800b2ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2ee:	647b      	str	r3, [r7, #68]	; 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	f503 7192 	add.w	r1, r3, #292	; 0x124
				memcpy(lastSpadArray,
 800b2f6:	f107 031c 	add.w	r3, r7, #28
 800b2fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b2fc:	4618      	mov	r0, r3
 800b2fe:	f002 ff8d 	bl	800e21c <memcpy>
		while (!complete) {
 800b302:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b306:	2b00      	cmp	r3, #0
 800b308:	f43f af74 	beq.w	800b1f4 <VL53L0X_perform_ref_spad_management+0x2b8>
 800b30c:	e002      	b.n	800b314 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 800b30e:	bf00      	nop
 800b310:	e000      	b.n	800b314 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 800b312:	bf00      	nop
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800b314:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d115      	bne.n	800b348 <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 800b31c:	68bb      	ldr	r3, [r7, #8]
 800b31e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b320:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 800b328:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	2201      	movs	r2, #1
 800b32e:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800b332:	68bb      	ldr	r3, [r7, #8]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	b2da      	uxtb	r2, r3
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	781a      	ldrb	r2, [r3, #0]
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 800b348:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 800b34c:	4618      	mov	r0, r3
 800b34e:	375c      	adds	r7, #92	; 0x5c
 800b350:	46bd      	mov	sp, r7
 800b352:	bd90      	pop	{r4, r7, pc}

0800b354 <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 800b354:	b590      	push	{r4, r7, lr}
 800b356:	b093      	sub	sp, #76	; 0x4c
 800b358:	af06      	add	r7, sp, #24
 800b35a:	60f8      	str	r0, [r7, #12]
 800b35c:	60b9      	str	r1, [r7, #8]
 800b35e:	4613      	mov	r3, r2
 800b360:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b362:	2300      	movs	r3, #0
 800b364:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t currentSpadIndex = 0;
 800b368:	2300      	movs	r3, #0
 800b36a:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t startSelect = 0xB4;
 800b36c:	23b4      	movs	r3, #180	; 0xb4
 800b36e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t spadArraySize = 6;
 800b372:	2306      	movs	r3, #6
 800b374:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 800b376:	232c      	movs	r3, #44	; 0x2c
 800b378:	61bb      	str	r3, [r7, #24]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800b37a:	2201      	movs	r2, #1
 800b37c:	21ff      	movs	r1, #255	; 0xff
 800b37e:	68f8      	ldr	r0, [r7, #12]
 800b380:	f002 fdf2 	bl	800df68 <VL53L0X_WrByte>
 800b384:	4603      	mov	r3, r0
 800b386:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 800b38a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d107      	bne.n	800b3a2 <VL53L0X_set_reference_spads+0x4e>
		Status = VL53L0X_WrByte(Dev,
 800b392:	2200      	movs	r2, #0
 800b394:	214f      	movs	r1, #79	; 0x4f
 800b396:	68f8      	ldr	r0, [r7, #12]
 800b398:	f002 fde6 	bl	800df68 <VL53L0X_WrByte>
 800b39c:	4603      	mov	r3, r0
 800b39e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 800b3a2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d107      	bne.n	800b3ba <VL53L0X_set_reference_spads+0x66>
		Status = VL53L0X_WrByte(Dev,
 800b3aa:	222c      	movs	r2, #44	; 0x2c
 800b3ac:	214e      	movs	r1, #78	; 0x4e
 800b3ae:	68f8      	ldr	r0, [r7, #12]
 800b3b0:	f002 fdda 	bl	800df68 <VL53L0X_WrByte>
 800b3b4:	4603      	mov	r3, r0
 800b3b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 800b3ba:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d107      	bne.n	800b3d2 <VL53L0X_set_reference_spads+0x7e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800b3c2:	2200      	movs	r2, #0
 800b3c4:	21ff      	movs	r1, #255	; 0xff
 800b3c6:	68f8      	ldr	r0, [r7, #12]
 800b3c8:	f002 fdce 	bl	800df68 <VL53L0X_WrByte>
 800b3cc:	4603      	mov	r3, r0
 800b3ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 800b3d2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d109      	bne.n	800b3ee <VL53L0X_set_reference_spads+0x9a>
		Status = VL53L0X_WrByte(Dev,
 800b3da:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b3de:	461a      	mov	r2, r3
 800b3e0:	21b6      	movs	r1, #182	; 0xb6
 800b3e2:	68f8      	ldr	r0, [r7, #12]
 800b3e4:	f002 fdc0 	bl	800df68 <VL53L0X_WrByte>
 800b3e8:	4603      	mov	r3, r0
 800b3ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
 800b3ee:	2300      	movs	r3, #0
 800b3f0:	627b      	str	r3, [r7, #36]	; 0x24
 800b3f2:	e009      	b.n	800b408 <VL53L0X_set_reference_spads+0xb4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800b3f4:	68fa      	ldr	r2, [r7, #12]
 800b3f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3f8:	4413      	add	r3, r2
 800b3fa:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800b3fe:	2200      	movs	r2, #0
 800b400:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 800b402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b404:	3301      	adds	r3, #1
 800b406:	627b      	str	r3, [r7, #36]	; 0x24
 800b408:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b40a:	69fb      	ldr	r3, [r7, #28]
 800b40c:	429a      	cmp	r2, r3
 800b40e:	d3f1      	bcc.n	800b3f4 <VL53L0X_set_reference_spads+0xa0>

	if (isApertureSpads) {
 800b410:	79fb      	ldrb	r3, [r7, #7]
 800b412:	2b00      	cmp	r3, #0
 800b414:	d011      	beq.n	800b43a <VL53L0X_set_reference_spads+0xe6>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 800b416:	e002      	b.n	800b41e <VL53L0X_set_reference_spads+0xca>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 800b418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b41a:	3301      	adds	r3, #1
 800b41c:	62bb      	str	r3, [r7, #40]	; 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 800b41e:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800b422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b424:	4413      	add	r3, r2
 800b426:	4618      	mov	r0, r3
 800b428:	f7ff fc2a 	bl	800ac80 <is_aperture>
 800b42c:	4603      	mov	r3, r0
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d103      	bne.n	800b43a <VL53L0X_set_reference_spads+0xe6>
 800b432:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b434:	69bb      	ldr	r3, [r7, #24]
 800b436:	429a      	cmp	r2, r3
 800b438:	d3ee      	bcc.n	800b418 <VL53L0X_set_reference_spads+0xc4>
		}
	}
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	f503 7095 	add.w	r0, r3, #298	; 0x12a
				Dev->Data.SpadData.RefSpadEnables,
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	f503 7492 	add.w	r4, r3, #292	; 0x124
	Status = enable_ref_spads(Dev,
 800b446:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b44a:	79f9      	ldrb	r1, [r7, #7]
 800b44c:	f107 0214 	add.w	r2, r7, #20
 800b450:	9204      	str	r2, [sp, #16]
 800b452:	68ba      	ldr	r2, [r7, #8]
 800b454:	9203      	str	r2, [sp, #12]
 800b456:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b458:	9202      	str	r2, [sp, #8]
 800b45a:	9301      	str	r3, [sp, #4]
 800b45c:	69fb      	ldr	r3, [r7, #28]
 800b45e:	9300      	str	r3, [sp, #0]
 800b460:	4623      	mov	r3, r4
 800b462:	4602      	mov	r2, r0
 800b464:	68f8      	ldr	r0, [r7, #12]
 800b466:	f7ff fc83 	bl	800ad70 <enable_ref_spads>
 800b46a:	4603      	mov	r3, r0
 800b46c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 800b470:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800b474:	2b00      	cmp	r3, #0
 800b476:	d10c      	bne.n	800b492 <VL53L0X_set_reference_spads+0x13e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	2201      	movs	r2, #1
 800b47c:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800b480:	68bb      	ldr	r3, [r7, #8]
 800b482:	b2da      	uxtb	r2, r3
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	79fa      	ldrb	r2, [r7, #7]
 800b48e:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
 800b492:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800b496:	4618      	mov	r0, r3
 800b498:	3734      	adds	r7, #52	; 0x34
 800b49a:	46bd      	mov	sp, r7
 800b49c:	bd90      	pop	{r4, r7, pc}

0800b49e <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 800b49e:	b580      	push	{r7, lr}
 800b4a0:	b084      	sub	sp, #16
 800b4a2:	af00      	add	r7, sp, #0
 800b4a4:	6078      	str	r0, [r7, #4]
 800b4a6:	460b      	mov	r3, r1
 800b4a8:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b4aa:	2300      	movs	r3, #0
 800b4ac:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800b4ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d10a      	bne.n	800b4cc <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 800b4b6:	78fb      	ldrb	r3, [r7, #3]
 800b4b8:	f043 0301 	orr.w	r3, r3, #1
 800b4bc:	b2db      	uxtb	r3, r3
 800b4be:	461a      	mov	r2, r3
 800b4c0:	2100      	movs	r1, #0
 800b4c2:	6878      	ldr	r0, [r7, #4]
 800b4c4:	f002 fd50 	bl	800df68 <VL53L0X_WrByte>
 800b4c8:	4603      	mov	r3, r0
 800b4ca:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 800b4cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d104      	bne.n	800b4de <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 800b4d4:	6878      	ldr	r0, [r7, #4]
 800b4d6:	f000 f9bf 	bl	800b858 <VL53L0X_measurement_poll_for_completion>
 800b4da:	4603      	mov	r3, r0
 800b4dc:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800b4de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d105      	bne.n	800b4f2 <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800b4e6:	2100      	movs	r1, #0
 800b4e8:	6878      	ldr	r0, [r7, #4]
 800b4ea:	f7ff fa85 	bl	800a9f8 <VL53L0X_ClearInterruptMask>
 800b4ee:	4603      	mov	r3, r0
 800b4f0:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800b4f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d106      	bne.n	800b508 <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 800b4fa:	2200      	movs	r2, #0
 800b4fc:	2100      	movs	r1, #0
 800b4fe:	6878      	ldr	r0, [r7, #4]
 800b500:	f002 fd32 	bl	800df68 <VL53L0X_WrByte>
 800b504:	4603      	mov	r3, r0
 800b506:	73fb      	strb	r3, [r7, #15]

	return Status;
 800b508:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b50c:	4618      	mov	r0, r3
 800b50e:	3710      	adds	r7, #16
 800b510:	46bd      	mov	sp, r7
 800b512:	bd80      	pop	{r7, pc}

0800b514 <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 800b514:	b580      	push	{r7, lr}
 800b516:	b084      	sub	sp, #16
 800b518:	af00      	add	r7, sp, #0
 800b51a:	6078      	str	r0, [r7, #4]
 800b51c:	4608      	mov	r0, r1
 800b51e:	4611      	mov	r1, r2
 800b520:	461a      	mov	r2, r3
 800b522:	4603      	mov	r3, r0
 800b524:	70fb      	strb	r3, [r7, #3]
 800b526:	460b      	mov	r3, r1
 800b528:	70bb      	strb	r3, [r7, #2]
 800b52a:	4613      	mov	r3, r2
 800b52c:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b52e:	2300      	movs	r3, #0
 800b530:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 800b532:	2300      	movs	r3, #0
 800b534:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800b536:	2201      	movs	r2, #1
 800b538:	21ff      	movs	r1, #255	; 0xff
 800b53a:	6878      	ldr	r0, [r7, #4]
 800b53c:	f002 fd14 	bl	800df68 <VL53L0X_WrByte>
 800b540:	4603      	mov	r3, r0
 800b542:	461a      	mov	r2, r3
 800b544:	7bfb      	ldrb	r3, [r7, #15]
 800b546:	4313      	orrs	r3, r2
 800b548:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800b54a:	2200      	movs	r2, #0
 800b54c:	2100      	movs	r1, #0
 800b54e:	6878      	ldr	r0, [r7, #4]
 800b550:	f002 fd0a 	bl	800df68 <VL53L0X_WrByte>
 800b554:	4603      	mov	r3, r0
 800b556:	461a      	mov	r2, r3
 800b558:	7bfb      	ldrb	r3, [r7, #15]
 800b55a:	4313      	orrs	r3, r2
 800b55c:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800b55e:	2200      	movs	r2, #0
 800b560:	21ff      	movs	r1, #255	; 0xff
 800b562:	6878      	ldr	r0, [r7, #4]
 800b564:	f002 fd00 	bl	800df68 <VL53L0X_WrByte>
 800b568:	4603      	mov	r3, r0
 800b56a:	461a      	mov	r2, r3
 800b56c:	7bfb      	ldrb	r3, [r7, #15]
 800b56e:	4313      	orrs	r3, r2
 800b570:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 800b572:	78fb      	ldrb	r3, [r7, #3]
 800b574:	2b00      	cmp	r3, #0
 800b576:	d01e      	beq.n	800b5b6 <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 800b578:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d009      	beq.n	800b594 <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 800b580:	69ba      	ldr	r2, [r7, #24]
 800b582:	21cb      	movs	r1, #203	; 0xcb
 800b584:	6878      	ldr	r0, [r7, #4]
 800b586:	f002 fd71 	bl	800e06c <VL53L0X_RdByte>
 800b58a:	4603      	mov	r3, r0
 800b58c:	461a      	mov	r2, r3
 800b58e:	7bfb      	ldrb	r3, [r7, #15]
 800b590:	4313      	orrs	r3, r2
 800b592:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 800b594:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d02a      	beq.n	800b5f2 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 800b59c:	f107 030e 	add.w	r3, r7, #14
 800b5a0:	461a      	mov	r2, r3
 800b5a2:	21ee      	movs	r1, #238	; 0xee
 800b5a4:	6878      	ldr	r0, [r7, #4]
 800b5a6:	f002 fd61 	bl	800e06c <VL53L0X_RdByte>
 800b5aa:	4603      	mov	r3, r0
 800b5ac:	461a      	mov	r2, r3
 800b5ae:	7bfb      	ldrb	r3, [r7, #15]
 800b5b0:	4313      	orrs	r3, r2
 800b5b2:	73fb      	strb	r3, [r7, #15]
 800b5b4:	e01d      	b.n	800b5f2 <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 800b5b6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d00a      	beq.n	800b5d4 <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 800b5be:	78bb      	ldrb	r3, [r7, #2]
 800b5c0:	461a      	mov	r2, r3
 800b5c2:	21cb      	movs	r1, #203	; 0xcb
 800b5c4:	6878      	ldr	r0, [r7, #4]
 800b5c6:	f002 fccf 	bl	800df68 <VL53L0X_WrByte>
 800b5ca:	4603      	mov	r3, r0
 800b5cc:	461a      	mov	r2, r3
 800b5ce:	7bfb      	ldrb	r3, [r7, #15]
 800b5d0:	4313      	orrs	r3, r2
 800b5d2:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 800b5d4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d00a      	beq.n	800b5f2 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 800b5dc:	787b      	ldrb	r3, [r7, #1]
 800b5de:	2280      	movs	r2, #128	; 0x80
 800b5e0:	21ee      	movs	r1, #238	; 0xee
 800b5e2:	6878      	ldr	r0, [r7, #4]
 800b5e4:	f002 fd0e 	bl	800e004 <VL53L0X_UpdateByte>
 800b5e8:	4603      	mov	r3, r0
 800b5ea:	461a      	mov	r2, r3
 800b5ec:	7bfb      	ldrb	r3, [r7, #15]
 800b5ee:	4313      	orrs	r3, r2
 800b5f0:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800b5f2:	2201      	movs	r2, #1
 800b5f4:	21ff      	movs	r1, #255	; 0xff
 800b5f6:	6878      	ldr	r0, [r7, #4]
 800b5f8:	f002 fcb6 	bl	800df68 <VL53L0X_WrByte>
 800b5fc:	4603      	mov	r3, r0
 800b5fe:	461a      	mov	r2, r3
 800b600:	7bfb      	ldrb	r3, [r7, #15]
 800b602:	4313      	orrs	r3, r2
 800b604:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800b606:	2201      	movs	r2, #1
 800b608:	2100      	movs	r1, #0
 800b60a:	6878      	ldr	r0, [r7, #4]
 800b60c:	f002 fcac 	bl	800df68 <VL53L0X_WrByte>
 800b610:	4603      	mov	r3, r0
 800b612:	461a      	mov	r2, r3
 800b614:	7bfb      	ldrb	r3, [r7, #15]
 800b616:	4313      	orrs	r3, r2
 800b618:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800b61a:	2200      	movs	r2, #0
 800b61c:	21ff      	movs	r1, #255	; 0xff
 800b61e:	6878      	ldr	r0, [r7, #4]
 800b620:	f002 fca2 	bl	800df68 <VL53L0X_WrByte>
 800b624:	4603      	mov	r3, r0
 800b626:	461a      	mov	r2, r3
 800b628:	7bfb      	ldrb	r3, [r7, #15]
 800b62a:	4313      	orrs	r3, r2
 800b62c:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 800b62e:	7bbb      	ldrb	r3, [r7, #14]
 800b630:	f023 0310 	bic.w	r3, r3, #16
 800b634:	b2da      	uxtb	r2, r3
 800b636:	69fb      	ldr	r3, [r7, #28]
 800b638:	701a      	strb	r2, [r3, #0]

	return Status;
 800b63a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b63e:	4618      	mov	r0, r3
 800b640:	3710      	adds	r7, #16
 800b642:	46bd      	mov	sp, r7
 800b644:	bd80      	pop	{r7, pc}

0800b646 <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 800b646:	b580      	push	{r7, lr}
 800b648:	b08a      	sub	sp, #40	; 0x28
 800b64a:	af04      	add	r7, sp, #16
 800b64c:	60f8      	str	r0, [r7, #12]
 800b64e:	60b9      	str	r1, [r7, #8]
 800b650:	4611      	mov	r1, r2
 800b652:	461a      	mov	r2, r3
 800b654:	460b      	mov	r3, r1
 800b656:	71fb      	strb	r3, [r7, #7]
 800b658:	4613      	mov	r3, r2
 800b65a:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b65c:	2300      	movs	r3, #0
 800b65e:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800b660:	2300      	movs	r3, #0
 800b662:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 800b664:	2300      	movs	r3, #0
 800b666:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 800b668:	2300      	movs	r3, #0
 800b66a:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 800b66c:	2300      	movs	r3, #0
 800b66e:	74fb      	strb	r3, [r7, #19]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 800b670:	79bb      	ldrb	r3, [r7, #6]
 800b672:	2b00      	cmp	r3, #0
 800b674:	d003      	beq.n	800b67e <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800b67c:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 800b67e:	2201      	movs	r2, #1
 800b680:	2101      	movs	r1, #1
 800b682:	68f8      	ldr	r0, [r7, #12]
 800b684:	f002 fc70 	bl	800df68 <VL53L0X_WrByte>
 800b688:	4603      	mov	r3, r0
 800b68a:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 800b68c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b690:	2b00      	cmp	r3, #0
 800b692:	d105      	bne.n	800b6a0 <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 800b694:	2140      	movs	r1, #64	; 0x40
 800b696:	68f8      	ldr	r0, [r7, #12]
 800b698:	f7ff ff01 	bl	800b49e <VL53L0X_perform_single_ref_calibration>
 800b69c:	4603      	mov	r3, r0
 800b69e:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 800b6a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d115      	bne.n	800b6d4 <VL53L0X_perform_vhv_calibration+0x8e>
 800b6a8:	79fb      	ldrb	r3, [r7, #7]
 800b6aa:	2b01      	cmp	r3, #1
 800b6ac:	d112      	bne.n	800b6d4 <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 800b6ae:	7d39      	ldrb	r1, [r7, #20]
 800b6b0:	7d7a      	ldrb	r2, [r7, #21]
 800b6b2:	2300      	movs	r3, #0
 800b6b4:	9303      	str	r3, [sp, #12]
 800b6b6:	2301      	movs	r3, #1
 800b6b8:	9302      	str	r3, [sp, #8]
 800b6ba:	f107 0313 	add.w	r3, r7, #19
 800b6be:	9301      	str	r3, [sp, #4]
 800b6c0:	68bb      	ldr	r3, [r7, #8]
 800b6c2:	9300      	str	r3, [sp, #0]
 800b6c4:	460b      	mov	r3, r1
 800b6c6:	2101      	movs	r1, #1
 800b6c8:	68f8      	ldr	r0, [r7, #12]
 800b6ca:	f7ff ff23 	bl	800b514 <VL53L0X_ref_calibration_io>
 800b6ce:	4603      	mov	r3, r0
 800b6d0:	75fb      	strb	r3, [r7, #23]
 800b6d2:	e002      	b.n	800b6da <VL53L0X_perform_vhv_calibration+0x94>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 800b6d4:	68bb      	ldr	r3, [r7, #8]
 800b6d6:	2200      	movs	r2, #0
 800b6d8:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 800b6da:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d112      	bne.n	800b708 <VL53L0X_perform_vhv_calibration+0xc2>
 800b6e2:	79bb      	ldrb	r3, [r7, #6]
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d00f      	beq.n	800b708 <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800b6e8:	7dbb      	ldrb	r3, [r7, #22]
 800b6ea:	461a      	mov	r2, r3
 800b6ec:	2101      	movs	r1, #1
 800b6ee:	68f8      	ldr	r0, [r7, #12]
 800b6f0:	f002 fc3a 	bl	800df68 <VL53L0X_WrByte>
 800b6f4:	4603      	mov	r3, r0
 800b6f6:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800b6f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d103      	bne.n	800b708 <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	7dba      	ldrb	r2, [r7, #22]
 800b704:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 800b708:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b70c:	4618      	mov	r0, r3
 800b70e:	3718      	adds	r7, #24
 800b710:	46bd      	mov	sp, r7
 800b712:	bd80      	pop	{r7, pc}

0800b714 <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 800b714:	b580      	push	{r7, lr}
 800b716:	b08a      	sub	sp, #40	; 0x28
 800b718:	af04      	add	r7, sp, #16
 800b71a:	60f8      	str	r0, [r7, #12]
 800b71c:	60b9      	str	r1, [r7, #8]
 800b71e:	4611      	mov	r1, r2
 800b720:	461a      	mov	r2, r3
 800b722:	460b      	mov	r3, r1
 800b724:	71fb      	strb	r3, [r7, #7]
 800b726:	4613      	mov	r3, r2
 800b728:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b72a:	2300      	movs	r3, #0
 800b72c:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800b72e:	2300      	movs	r3, #0
 800b730:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 800b732:	2300      	movs	r3, #0
 800b734:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 800b736:	2300      	movs	r3, #0
 800b738:	753b      	strb	r3, [r7, #20]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 800b73a:	79bb      	ldrb	r3, [r7, #6]
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d003      	beq.n	800b748 <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800b746:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 800b748:	2202      	movs	r2, #2
 800b74a:	2101      	movs	r1, #1
 800b74c:	68f8      	ldr	r0, [r7, #12]
 800b74e:	f002 fc0b 	bl	800df68 <VL53L0X_WrByte>
 800b752:	4603      	mov	r3, r0
 800b754:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 800b756:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d105      	bne.n	800b76a <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 800b75e:	2100      	movs	r1, #0
 800b760:	68f8      	ldr	r0, [r7, #12]
 800b762:	f7ff fe9c 	bl	800b49e <VL53L0X_perform_single_ref_calibration>
 800b766:	4603      	mov	r3, r0
 800b768:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 800b76a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d115      	bne.n	800b79e <VL53L0X_perform_phase_calibration+0x8a>
 800b772:	79fb      	ldrb	r3, [r7, #7]
 800b774:	2b01      	cmp	r3, #1
 800b776:	d112      	bne.n	800b79e <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 800b778:	7d39      	ldrb	r1, [r7, #20]
 800b77a:	7d7a      	ldrb	r2, [r7, #21]
 800b77c:	2301      	movs	r3, #1
 800b77e:	9303      	str	r3, [sp, #12]
 800b780:	2300      	movs	r3, #0
 800b782:	9302      	str	r3, [sp, #8]
 800b784:	68bb      	ldr	r3, [r7, #8]
 800b786:	9301      	str	r3, [sp, #4]
 800b788:	f107 0313 	add.w	r3, r7, #19
 800b78c:	9300      	str	r3, [sp, #0]
 800b78e:	460b      	mov	r3, r1
 800b790:	2101      	movs	r1, #1
 800b792:	68f8      	ldr	r0, [r7, #12]
 800b794:	f7ff febe 	bl	800b514 <VL53L0X_ref_calibration_io>
 800b798:	4603      	mov	r3, r0
 800b79a:	75fb      	strb	r3, [r7, #23]
 800b79c:	e002      	b.n	800b7a4 <VL53L0X_perform_phase_calibration+0x90>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 800b79e:	68bb      	ldr	r3, [r7, #8]
 800b7a0:	2200      	movs	r2, #0
 800b7a2:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 800b7a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d112      	bne.n	800b7d2 <VL53L0X_perform_phase_calibration+0xbe>
 800b7ac:	79bb      	ldrb	r3, [r7, #6]
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d00f      	beq.n	800b7d2 <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800b7b2:	7dbb      	ldrb	r3, [r7, #22]
 800b7b4:	461a      	mov	r2, r3
 800b7b6:	2101      	movs	r1, #1
 800b7b8:	68f8      	ldr	r0, [r7, #12]
 800b7ba:	f002 fbd5 	bl	800df68 <VL53L0X_WrByte>
 800b7be:	4603      	mov	r3, r0
 800b7c0:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800b7c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d103      	bne.n	800b7d2 <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	7dba      	ldrb	r2, [r7, #22]
 800b7ce:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 800b7d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b7d6:	4618      	mov	r0, r3
 800b7d8:	3718      	adds	r7, #24
 800b7da:	46bd      	mov	sp, r7
 800b7dc:	bd80      	pop	{r7, pc}

0800b7de <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 800b7de:	b580      	push	{r7, lr}
 800b7e0:	b086      	sub	sp, #24
 800b7e2:	af00      	add	r7, sp, #0
 800b7e4:	60f8      	str	r0, [r7, #12]
 800b7e6:	60b9      	str	r1, [r7, #8]
 800b7e8:	607a      	str	r2, [r7, #4]
 800b7ea:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b7ec:	2300      	movs	r3, #0
 800b7ee:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800b7f0:	2300      	movs	r3, #0
 800b7f2:	75bb      	strb	r3, [r7, #22]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800b7fa:	75bb      	strb	r3, [r7, #22]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 800b7fc:	78fa      	ldrb	r2, [r7, #3]
 800b7fe:	2300      	movs	r3, #0
 800b800:	68b9      	ldr	r1, [r7, #8]
 800b802:	68f8      	ldr	r0, [r7, #12]
 800b804:	f7ff ff1f 	bl	800b646 <VL53L0X_perform_vhv_calibration>
 800b808:	4603      	mov	r3, r0
 800b80a:	75fb      	strb	r3, [r7, #23]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 800b80c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b810:	2b00      	cmp	r3, #0
 800b812:	d107      	bne.n	800b824 <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 800b814:	78fa      	ldrb	r2, [r7, #3]
 800b816:	2300      	movs	r3, #0
 800b818:	6879      	ldr	r1, [r7, #4]
 800b81a:	68f8      	ldr	r0, [r7, #12]
 800b81c:	f7ff ff7a 	bl	800b714 <VL53L0X_perform_phase_calibration>
 800b820:	4603      	mov	r3, r0
 800b822:	75fb      	strb	r3, [r7, #23]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 800b824:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d10f      	bne.n	800b84c <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800b82c:	7dbb      	ldrb	r3, [r7, #22]
 800b82e:	461a      	mov	r2, r3
 800b830:	2101      	movs	r1, #1
 800b832:	68f8      	ldr	r0, [r7, #12]
 800b834:	f002 fb98 	bl	800df68 <VL53L0X_WrByte>
 800b838:	4603      	mov	r3, r0
 800b83a:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800b83c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b840:	2b00      	cmp	r3, #0
 800b842:	d103      	bne.n	800b84c <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	7dba      	ldrb	r2, [r7, #22]
 800b848:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 800b84c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b850:	4618      	mov	r0, r3
 800b852:	3718      	adds	r7, #24
 800b854:	46bd      	mov	sp, r7
 800b856:	bd80      	pop	{r7, pc}

0800b858 <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 800b858:	b580      	push	{r7, lr}
 800b85a:	b086      	sub	sp, #24
 800b85c:	af00      	add	r7, sp, #0
 800b85e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b860:	2300      	movs	r3, #0
 800b862:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 800b864:	2300      	movs	r3, #0
 800b866:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	LoopNb = 0;
 800b868:	2300      	movs	r3, #0
 800b86a:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 800b86c:	f107 030f 	add.w	r3, r7, #15
 800b870:	4619      	mov	r1, r3
 800b872:	6878      	ldr	r0, [r7, #4]
 800b874:	f7fe fdd2 	bl	800a41c <VL53L0X_GetMeasurementDataReady>
 800b878:	4603      	mov	r3, r0
 800b87a:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 800b87c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b880:	2b00      	cmp	r3, #0
 800b882:	d110      	bne.n	800b8a6 <VL53L0X_measurement_poll_for_completion+0x4e>
			break; /* the error is set */

		if (NewDataReady == 1)
 800b884:	7bfb      	ldrb	r3, [r7, #15]
 800b886:	2b01      	cmp	r3, #1
 800b888:	d00f      	beq.n	800b8aa <VL53L0X_measurement_poll_for_completion+0x52>
			break; /* done note that status == 0 */

		LoopNb++;
 800b88a:	693b      	ldr	r3, [r7, #16]
 800b88c:	3301      	adds	r3, #1
 800b88e:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 800b890:	693b      	ldr	r3, [r7, #16]
 800b892:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800b896:	d302      	bcc.n	800b89e <VL53L0X_measurement_poll_for_completion+0x46>
			Status = VL53L0X_ERROR_TIME_OUT;
 800b898:	23f9      	movs	r3, #249	; 0xf9
 800b89a:	75fb      	strb	r3, [r7, #23]
			break;
 800b89c:	e006      	b.n	800b8ac <VL53L0X_measurement_poll_for_completion+0x54>
		}

		VL53L0X_PollingDelay(Dev);
 800b89e:	6878      	ldr	r0, [r7, #4]
 800b8a0:	f002 fc82 	bl	800e1a8 <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 800b8a4:	e7e2      	b.n	800b86c <VL53L0X_measurement_poll_for_completion+0x14>
			break; /* the error is set */
 800b8a6:	bf00      	nop
 800b8a8:	e000      	b.n	800b8ac <VL53L0X_measurement_poll_for_completion+0x54>
			break; /* done note that status == 0 */
 800b8aa:	bf00      	nop
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
 800b8ac:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b8b0:	4618      	mov	r0, r3
 800b8b2:	3718      	adds	r7, #24
 800b8b4:	46bd      	mov	sp, r7
 800b8b6:	bd80      	pop	{r7, pc}

0800b8b8 <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 800b8b8:	b480      	push	{r7}
 800b8ba:	b085      	sub	sp, #20
 800b8bc:	af00      	add	r7, sp, #0
 800b8be:	4603      	mov	r3, r0
 800b8c0:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 800b8c2:	2300      	movs	r3, #0
 800b8c4:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 800b8c6:	79fb      	ldrb	r3, [r7, #7]
 800b8c8:	3301      	adds	r3, #1
 800b8ca:	b2db      	uxtb	r3, r3
 800b8cc:	005b      	lsls	r3, r3, #1
 800b8ce:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 800b8d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8d2:	4618      	mov	r0, r3
 800b8d4:	3714      	adds	r7, #20
 800b8d6:	46bd      	mov	sp, r7
 800b8d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8dc:	4770      	bx	lr

0800b8de <VL53L0X_encode_vcsel_period>:

uint8_t VL53L0X_encode_vcsel_period(uint8_t vcsel_period_pclks)
{
 800b8de:	b480      	push	{r7}
 800b8e0:	b085      	sub	sp, #20
 800b8e2:	af00      	add	r7, sp, #0
 800b8e4:	4603      	mov	r3, r0
 800b8e6:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real period
	 * in PLL clocks
	 */

	uint8_t vcsel_period_reg = 0;
 800b8e8:	2300      	movs	r3, #0
 800b8ea:	73fb      	strb	r3, [r7, #15]

	vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;
 800b8ec:	79fb      	ldrb	r3, [r7, #7]
 800b8ee:	085b      	lsrs	r3, r3, #1
 800b8f0:	b2db      	uxtb	r3, r3
 800b8f2:	3b01      	subs	r3, #1
 800b8f4:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_reg;
 800b8f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8f8:	4618      	mov	r0, r3
 800b8fa:	3714      	adds	r7, #20
 800b8fc:	46bd      	mov	sp, r7
 800b8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b902:	4770      	bx	lr

0800b904 <VL53L0X_isqrt>:


uint32_t VL53L0X_isqrt(uint32_t num)
{
 800b904:	b480      	push	{r7}
 800b906:	b085      	sub	sp, #20
 800b908:	af00      	add	r7, sp, #0
 800b90a:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 800b90c:	2300      	movs	r3, #0
 800b90e:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 800b910:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b914:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 800b916:	e002      	b.n	800b91e <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 800b918:	68bb      	ldr	r3, [r7, #8]
 800b91a:	089b      	lsrs	r3, r3, #2
 800b91c:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 800b91e:	68ba      	ldr	r2, [r7, #8]
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	429a      	cmp	r2, r3
 800b924:	d8f8      	bhi.n	800b918 <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 800b926:	e017      	b.n	800b958 <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 800b928:	68fa      	ldr	r2, [r7, #12]
 800b92a:	68bb      	ldr	r3, [r7, #8]
 800b92c:	4413      	add	r3, r2
 800b92e:	687a      	ldr	r2, [r7, #4]
 800b930:	429a      	cmp	r2, r3
 800b932:	d30b      	bcc.n	800b94c <VL53L0X_isqrt+0x48>
			num -= res + bit;
 800b934:	68fa      	ldr	r2, [r7, #12]
 800b936:	68bb      	ldr	r3, [r7, #8]
 800b938:	4413      	add	r3, r2
 800b93a:	687a      	ldr	r2, [r7, #4]
 800b93c:	1ad3      	subs	r3, r2, r3
 800b93e:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	085b      	lsrs	r3, r3, #1
 800b944:	68ba      	ldr	r2, [r7, #8]
 800b946:	4413      	add	r3, r2
 800b948:	60fb      	str	r3, [r7, #12]
 800b94a:	e002      	b.n	800b952 <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	085b      	lsrs	r3, r3, #1
 800b950:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 800b952:	68bb      	ldr	r3, [r7, #8]
 800b954:	089b      	lsrs	r3, r3, #2
 800b956:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 800b958:	68bb      	ldr	r3, [r7, #8]
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d1e4      	bne.n	800b928 <VL53L0X_isqrt+0x24>
	}

	return res;
 800b95e:	68fb      	ldr	r3, [r7, #12]
}
 800b960:	4618      	mov	r0, r3
 800b962:	3714      	adds	r7, #20
 800b964:	46bd      	mov	sp, r7
 800b966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b96a:	4770      	bx	lr

0800b96c <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 800b96c:	b580      	push	{r7, lr}
 800b96e:	b086      	sub	sp, #24
 800b970:	af00      	add	r7, sp, #0
 800b972:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b974:	2300      	movs	r3, #0
 800b976:	75fb      	strb	r3, [r7, #23]
	uint8_t strobe;
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 800b978:	2200      	movs	r2, #0
 800b97a:	2183      	movs	r1, #131	; 0x83
 800b97c:	6878      	ldr	r0, [r7, #4]
 800b97e:	f002 faf3 	bl	800df68 <VL53L0X_WrByte>
 800b982:	4603      	mov	r3, r0
 800b984:	461a      	mov	r2, r3
 800b986:	7dfb      	ldrb	r3, [r7, #23]
 800b988:	4313      	orrs	r3, r2
 800b98a:	75fb      	strb	r3, [r7, #23]

	/* polling
	 * use timeout to avoid deadlock*/
	if (Status == VL53L0X_ERROR_NONE) {
 800b98c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b990:	2b00      	cmp	r3, #0
 800b992:	d11e      	bne.n	800b9d2 <VL53L0X_device_read_strobe+0x66>
		LoopNb = 0;
 800b994:	2300      	movs	r3, #0
 800b996:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 800b998:	f107 030f 	add.w	r3, r7, #15
 800b99c:	461a      	mov	r2, r3
 800b99e:	2183      	movs	r1, #131	; 0x83
 800b9a0:	6878      	ldr	r0, [r7, #4]
 800b9a2:	f002 fb63 	bl	800e06c <VL53L0X_RdByte>
 800b9a6:	4603      	mov	r3, r0
 800b9a8:	75fb      	strb	r3, [r7, #23]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 800b9aa:	7bfb      	ldrb	r3, [r7, #15]
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d10a      	bne.n	800b9c6 <VL53L0X_device_read_strobe+0x5a>
 800b9b0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d106      	bne.n	800b9c6 <VL53L0X_device_read_strobe+0x5a>
					break;

			LoopNb = LoopNb + 1;
 800b9b8:	693b      	ldr	r3, [r7, #16]
 800b9ba:	3301      	adds	r3, #1
 800b9bc:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 800b9be:	693b      	ldr	r3, [r7, #16]
 800b9c0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800b9c4:	d3e8      	bcc.n	800b998 <VL53L0X_device_read_strobe+0x2c>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 800b9c6:	693b      	ldr	r3, [r7, #16]
 800b9c8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800b9cc:	d301      	bcc.n	800b9d2 <VL53L0X_device_read_strobe+0x66>
			Status = VL53L0X_ERROR_TIME_OUT;
 800b9ce:	23f9      	movs	r3, #249	; 0xf9
 800b9d0:	75fb      	strb	r3, [r7, #23]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 800b9d2:	2201      	movs	r2, #1
 800b9d4:	2183      	movs	r1, #131	; 0x83
 800b9d6:	6878      	ldr	r0, [r7, #4]
 800b9d8:	f002 fac6 	bl	800df68 <VL53L0X_WrByte>
 800b9dc:	4603      	mov	r3, r0
 800b9de:	461a      	mov	r2, r3
 800b9e0:	7dfb      	ldrb	r3, [r7, #23]
 800b9e2:	4313      	orrs	r3, r2
 800b9e4:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
	return Status;
 800b9e6:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 800b9ea:	4618      	mov	r0, r3
 800b9ec:	3718      	adds	r7, #24
 800b9ee:	46bd      	mov	sp, r7
 800b9f0:	bd80      	pop	{r7, pc}

0800b9f2 <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 800b9f2:	b580      	push	{r7, lr}
 800b9f4:	b098      	sub	sp, #96	; 0x60
 800b9f6:	af00      	add	r7, sp, #0
 800b9f8:	6078      	str	r0, [r7, #4]
 800b9fa:	460b      	mov	r3, r1
 800b9fc:	70fb      	strb	r3, [r7, #3]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b9fe:	2300      	movs	r3, #0
 800ba00:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 800ba04:	2300      	movs	r3, #0
 800ba06:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t ReferenceSpadType = 0;
 800ba0a:	2300      	movs	r3, #0
 800ba0c:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	uint32_t PartUIDUpper = 0;
 800ba10:	2300      	movs	r3, #0
 800ba12:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PartUIDLower = 0;
 800ba14:	2300      	movs	r3, #0
 800ba16:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t OffsetFixed1104_mm = 0;
 800ba18:	2300      	movs	r3, #0
 800ba1a:	64bb      	str	r3, [r7, #72]	; 0x48
	int16_t OffsetMicroMeters = 0;
 800ba1c:	2300      	movs	r3, #0
 800ba1e:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 800ba22:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800ba26:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 800ba28:	2300      	movs	r3, #0
 800ba2a:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 800ba2c:	2300      	movs	r3, #0
 800ba2e:	653b      	str	r3, [r7, #80]	; 0x50
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 800ba30:	2300      	movs	r3, #0
 800ba32:	643b      	str	r3, [r7, #64]	; 0x40
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800ba3a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done*/
	if (ReadDataFromDeviceDone != 7) {
 800ba3e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ba42:	2b07      	cmp	r3, #7
 800ba44:	f000 8408 	beq.w	800c258 <VL53L0X_get_info_from_device+0x866>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800ba48:	2201      	movs	r2, #1
 800ba4a:	2180      	movs	r1, #128	; 0x80
 800ba4c:	6878      	ldr	r0, [r7, #4]
 800ba4e:	f002 fa8b 	bl	800df68 <VL53L0X_WrByte>
 800ba52:	4603      	mov	r3, r0
 800ba54:	461a      	mov	r2, r3
 800ba56:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ba5a:	4313      	orrs	r3, r2
 800ba5c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800ba60:	2201      	movs	r2, #1
 800ba62:	21ff      	movs	r1, #255	; 0xff
 800ba64:	6878      	ldr	r0, [r7, #4]
 800ba66:	f002 fa7f 	bl	800df68 <VL53L0X_WrByte>
 800ba6a:	4603      	mov	r3, r0
 800ba6c:	461a      	mov	r2, r3
 800ba6e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ba72:	4313      	orrs	r3, r2
 800ba74:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800ba78:	2200      	movs	r2, #0
 800ba7a:	2100      	movs	r1, #0
 800ba7c:	6878      	ldr	r0, [r7, #4]
 800ba7e:	f002 fa73 	bl	800df68 <VL53L0X_WrByte>
 800ba82:	4603      	mov	r3, r0
 800ba84:	461a      	mov	r2, r3
 800ba86:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ba8a:	4313      	orrs	r3, r2
 800ba8c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 800ba90:	2206      	movs	r2, #6
 800ba92:	21ff      	movs	r1, #255	; 0xff
 800ba94:	6878      	ldr	r0, [r7, #4]
 800ba96:	f002 fa67 	bl	800df68 <VL53L0X_WrByte>
 800ba9a:	4603      	mov	r3, r0
 800ba9c:	461a      	mov	r2, r3
 800ba9e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800baa2:	4313      	orrs	r3, r2
 800baa4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 800baa8:	f107 0337 	add.w	r3, r7, #55	; 0x37
 800baac:	461a      	mov	r2, r3
 800baae:	2183      	movs	r1, #131	; 0x83
 800bab0:	6878      	ldr	r0, [r7, #4]
 800bab2:	f002 fadb 	bl	800e06c <VL53L0X_RdByte>
 800bab6:	4603      	mov	r3, r0
 800bab8:	461a      	mov	r2, r3
 800baba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800babe:	4313      	orrs	r3, r2
 800bac0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 800bac4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bac8:	f043 0304 	orr.w	r3, r3, #4
 800bacc:	b2db      	uxtb	r3, r3
 800bace:	461a      	mov	r2, r3
 800bad0:	2183      	movs	r1, #131	; 0x83
 800bad2:	6878      	ldr	r0, [r7, #4]
 800bad4:	f002 fa48 	bl	800df68 <VL53L0X_WrByte>
 800bad8:	4603      	mov	r3, r0
 800bada:	461a      	mov	r2, r3
 800badc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bae0:	4313      	orrs	r3, r2
 800bae2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 800bae6:	2207      	movs	r2, #7
 800bae8:	21ff      	movs	r1, #255	; 0xff
 800baea:	6878      	ldr	r0, [r7, #4]
 800baec:	f002 fa3c 	bl	800df68 <VL53L0X_WrByte>
 800baf0:	4603      	mov	r3, r0
 800baf2:	461a      	mov	r2, r3
 800baf4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800baf8:	4313      	orrs	r3, r2
 800bafa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 800bafe:	2201      	movs	r2, #1
 800bb00:	2181      	movs	r1, #129	; 0x81
 800bb02:	6878      	ldr	r0, [r7, #4]
 800bb04:	f002 fa30 	bl	800df68 <VL53L0X_WrByte>
 800bb08:	4603      	mov	r3, r0
 800bb0a:	461a      	mov	r2, r3
 800bb0c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bb10:	4313      	orrs	r3, r2
 800bb12:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_PollingDelay(Dev);
 800bb16:	6878      	ldr	r0, [r7, #4]
 800bb18:	f002 fb46 	bl	800e1a8 <VL53L0X_PollingDelay>
 800bb1c:	4603      	mov	r3, r0
 800bb1e:	461a      	mov	r2, r3
 800bb20:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bb24:	4313      	orrs	r3, r2
 800bb26:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800bb2a:	2201      	movs	r2, #1
 800bb2c:	2180      	movs	r1, #128	; 0x80
 800bb2e:	6878      	ldr	r0, [r7, #4]
 800bb30:	f002 fa1a 	bl	800df68 <VL53L0X_WrByte>
 800bb34:	4603      	mov	r3, r0
 800bb36:	461a      	mov	r2, r3
 800bb38:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bb3c:	4313      	orrs	r3, r2
 800bb3e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		if (((option & 1) == 1) &&
 800bb42:	78fb      	ldrb	r3, [r7, #3]
 800bb44:	f003 0301 	and.w	r3, r3, #1
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	f000 8098 	beq.w	800bc7e <VL53L0X_get_info_from_device+0x28c>
			((ReadDataFromDeviceDone & 1) == 0)) {
 800bb4e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800bb52:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	f040 8091 	bne.w	800bc7e <VL53L0X_get_info_from_device+0x28c>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 800bb5c:	226b      	movs	r2, #107	; 0x6b
 800bb5e:	2194      	movs	r1, #148	; 0x94
 800bb60:	6878      	ldr	r0, [r7, #4]
 800bb62:	f002 fa01 	bl	800df68 <VL53L0X_WrByte>
 800bb66:	4603      	mov	r3, r0
 800bb68:	461a      	mov	r2, r3
 800bb6a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bb6e:	4313      	orrs	r3, r2
 800bb70:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800bb74:	6878      	ldr	r0, [r7, #4]
 800bb76:	f7ff fef9 	bl	800b96c <VL53L0X_device_read_strobe>
 800bb7a:	4603      	mov	r3, r0
 800bb7c:	461a      	mov	r2, r3
 800bb7e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bb82:	4313      	orrs	r3, r2
 800bb84:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800bb88:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800bb8c:	461a      	mov	r2, r3
 800bb8e:	2190      	movs	r1, #144	; 0x90
 800bb90:	6878      	ldr	r0, [r7, #4]
 800bb92:	f002 facd 	bl	800e130 <VL53L0X_RdDWord>
 800bb96:	4603      	mov	r3, r0
 800bb98:	461a      	mov	r2, r3
 800bb9a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bb9e:	4313      	orrs	r3, r2
 800bba0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 800bba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bba6:	0a1b      	lsrs	r3, r3, #8
 800bba8:	b2db      	uxtb	r3, r3
 800bbaa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bbae:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 800bbb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbb4:	0bdb      	lsrs	r3, r3, #15
 800bbb6:	b2db      	uxtb	r3, r3
 800bbb8:	f003 0301 	and.w	r3, r3, #1
 800bbbc:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 800bbc0:	2224      	movs	r2, #36	; 0x24
 800bbc2:	2194      	movs	r1, #148	; 0x94
 800bbc4:	6878      	ldr	r0, [r7, #4]
 800bbc6:	f002 f9cf 	bl	800df68 <VL53L0X_WrByte>
 800bbca:	4603      	mov	r3, r0
 800bbcc:	461a      	mov	r2, r3
 800bbce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bbd2:	4313      	orrs	r3, r2
 800bbd4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800bbd8:	6878      	ldr	r0, [r7, #4]
 800bbda:	f7ff fec7 	bl	800b96c <VL53L0X_device_read_strobe>
 800bbde:	4603      	mov	r3, r0
 800bbe0:	461a      	mov	r2, r3
 800bbe2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bbe6:	4313      	orrs	r3, r2
 800bbe8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800bbec:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800bbf0:	461a      	mov	r2, r3
 800bbf2:	2190      	movs	r1, #144	; 0x90
 800bbf4:	6878      	ldr	r0, [r7, #4]
 800bbf6:	f002 fa9b 	bl	800e130 <VL53L0X_RdDWord>
 800bbfa:	4603      	mov	r3, r0
 800bbfc:	461a      	mov	r2, r3
 800bbfe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bc02:	4313      	orrs	r3, r2
 800bc04:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 800bc08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc0a:	0e1b      	lsrs	r3, r3, #24
 800bc0c:	b2db      	uxtb	r3, r3
 800bc0e:	723b      	strb	r3, [r7, #8]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 800bc10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc12:	0c1b      	lsrs	r3, r3, #16
 800bc14:	b2db      	uxtb	r3, r3
 800bc16:	727b      	strb	r3, [r7, #9]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 800bc18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc1a:	0a1b      	lsrs	r3, r3, #8
 800bc1c:	b2db      	uxtb	r3, r3
 800bc1e:	72bb      	strb	r3, [r7, #10]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 800bc20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc22:	b2db      	uxtb	r3, r3
 800bc24:	72fb      	strb	r3, [r7, #11]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 800bc26:	2225      	movs	r2, #37	; 0x25
 800bc28:	2194      	movs	r1, #148	; 0x94
 800bc2a:	6878      	ldr	r0, [r7, #4]
 800bc2c:	f002 f99c 	bl	800df68 <VL53L0X_WrByte>
 800bc30:	4603      	mov	r3, r0
 800bc32:	461a      	mov	r2, r3
 800bc34:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bc38:	4313      	orrs	r3, r2
 800bc3a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800bc3e:	6878      	ldr	r0, [r7, #4]
 800bc40:	f7ff fe94 	bl	800b96c <VL53L0X_device_read_strobe>
 800bc44:	4603      	mov	r3, r0
 800bc46:	461a      	mov	r2, r3
 800bc48:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bc4c:	4313      	orrs	r3, r2
 800bc4e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800bc52:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800bc56:	461a      	mov	r2, r3
 800bc58:	2190      	movs	r1, #144	; 0x90
 800bc5a:	6878      	ldr	r0, [r7, #4]
 800bc5c:	f002 fa68 	bl	800e130 <VL53L0X_RdDWord>
 800bc60:	4603      	mov	r3, r0
 800bc62:	461a      	mov	r2, r3
 800bc64:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bc68:	4313      	orrs	r3, r2
 800bc6a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 800bc6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc70:	0e1b      	lsrs	r3, r3, #24
 800bc72:	b2db      	uxtb	r3, r3
 800bc74:	733b      	strb	r3, [r7, #12]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 800bc76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc78:	0c1b      	lsrs	r3, r3, #16
 800bc7a:	b2db      	uxtb	r3, r3
 800bc7c:	737b      	strb	r3, [r7, #13]
				& 0xff);
		}

		if (((option & 2) == 2) &&
 800bc7e:	78fb      	ldrb	r3, [r7, #3]
 800bc80:	f003 0302 	and.w	r3, r3, #2
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	f000 8189 	beq.w	800bf9c <VL53L0X_get_info_from_device+0x5aa>
			((ReadDataFromDeviceDone & 2) == 0)) {
 800bc8a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800bc8e:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	f040 8182 	bne.w	800bf9c <VL53L0X_get_info_from_device+0x5aa>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 800bc98:	2202      	movs	r2, #2
 800bc9a:	2194      	movs	r1, #148	; 0x94
 800bc9c:	6878      	ldr	r0, [r7, #4]
 800bc9e:	f002 f963 	bl	800df68 <VL53L0X_WrByte>
 800bca2:	4603      	mov	r3, r0
 800bca4:	461a      	mov	r2, r3
 800bca6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bcaa:	4313      	orrs	r3, r2
 800bcac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800bcb0:	6878      	ldr	r0, [r7, #4]
 800bcb2:	f7ff fe5b 	bl	800b96c <VL53L0X_device_read_strobe>
 800bcb6:	4603      	mov	r3, r0
 800bcb8:	461a      	mov	r2, r3
 800bcba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bcbe:	4313      	orrs	r3, r2
 800bcc0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 800bcc4:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 800bcc8:	461a      	mov	r2, r3
 800bcca:	2190      	movs	r1, #144	; 0x90
 800bccc:	6878      	ldr	r0, [r7, #4]
 800bcce:	f002 f9cd 	bl	800e06c <VL53L0X_RdByte>
 800bcd2:	4603      	mov	r3, r0
 800bcd4:	461a      	mov	r2, r3
 800bcd6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bcda:	4313      	orrs	r3, r2
 800bcdc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 800bce0:	227b      	movs	r2, #123	; 0x7b
 800bce2:	2194      	movs	r1, #148	; 0x94
 800bce4:	6878      	ldr	r0, [r7, #4]
 800bce6:	f002 f93f 	bl	800df68 <VL53L0X_WrByte>
 800bcea:	4603      	mov	r3, r0
 800bcec:	461a      	mov	r2, r3
 800bcee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bcf2:	4313      	orrs	r3, r2
 800bcf4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800bcf8:	6878      	ldr	r0, [r7, #4]
 800bcfa:	f7ff fe37 	bl	800b96c <VL53L0X_device_read_strobe>
 800bcfe:	4603      	mov	r3, r0
 800bd00:	461a      	mov	r2, r3
 800bd02:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bd06:	4313      	orrs	r3, r2
 800bd08:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 800bd0c:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 800bd10:	461a      	mov	r2, r3
 800bd12:	2190      	movs	r1, #144	; 0x90
 800bd14:	6878      	ldr	r0, [r7, #4]
 800bd16:	f002 f9a9 	bl	800e06c <VL53L0X_RdByte>
 800bd1a:	4603      	mov	r3, r0
 800bd1c:	461a      	mov	r2, r3
 800bd1e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bd22:	4313      	orrs	r3, r2
 800bd24:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 800bd28:	2277      	movs	r2, #119	; 0x77
 800bd2a:	2194      	movs	r1, #148	; 0x94
 800bd2c:	6878      	ldr	r0, [r7, #4]
 800bd2e:	f002 f91b 	bl	800df68 <VL53L0X_WrByte>
 800bd32:	4603      	mov	r3, r0
 800bd34:	461a      	mov	r2, r3
 800bd36:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bd3a:	4313      	orrs	r3, r2
 800bd3c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800bd40:	6878      	ldr	r0, [r7, #4]
 800bd42:	f7ff fe13 	bl	800b96c <VL53L0X_device_read_strobe>
 800bd46:	4603      	mov	r3, r0
 800bd48:	461a      	mov	r2, r3
 800bd4a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bd4e:	4313      	orrs	r3, r2
 800bd50:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800bd54:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800bd58:	461a      	mov	r2, r3
 800bd5a:	2190      	movs	r1, #144	; 0x90
 800bd5c:	6878      	ldr	r0, [r7, #4]
 800bd5e:	f002 f9e7 	bl	800e130 <VL53L0X_RdDWord>
 800bd62:	4603      	mov	r3, r0
 800bd64:	461a      	mov	r2, r3
 800bd66:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bd6a:	4313      	orrs	r3, r2
 800bd6c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 800bd70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd72:	0e5b      	lsrs	r3, r3, #25
 800bd74:	b2db      	uxtb	r3, r3
 800bd76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bd7a:	b2db      	uxtb	r3, r3
 800bd7c:	743b      	strb	r3, [r7, #16]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 800bd7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd80:	0c9b      	lsrs	r3, r3, #18
 800bd82:	b2db      	uxtb	r3, r3
 800bd84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bd88:	b2db      	uxtb	r3, r3
 800bd8a:	747b      	strb	r3, [r7, #17]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 800bd8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd8e:	0adb      	lsrs	r3, r3, #11
 800bd90:	b2db      	uxtb	r3, r3
 800bd92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bd96:	b2db      	uxtb	r3, r3
 800bd98:	74bb      	strb	r3, [r7, #18]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 800bd9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd9c:	091b      	lsrs	r3, r3, #4
 800bd9e:	b2db      	uxtb	r3, r3
 800bda0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bda4:	b2db      	uxtb	r3, r3
 800bda6:	74fb      	strb	r3, [r7, #19]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 800bda8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdaa:	b2db      	uxtb	r3, r3
 800bdac:	00db      	lsls	r3, r3, #3
 800bdae:	b2db      	uxtb	r3, r3
 800bdb0:	f003 0378 	and.w	r3, r3, #120	; 0x78
 800bdb4:	b2db      	uxtb	r3, r3
 800bdb6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 800bdba:	2278      	movs	r2, #120	; 0x78
 800bdbc:	2194      	movs	r1, #148	; 0x94
 800bdbe:	6878      	ldr	r0, [r7, #4]
 800bdc0:	f002 f8d2 	bl	800df68 <VL53L0X_WrByte>
 800bdc4:	4603      	mov	r3, r0
 800bdc6:	461a      	mov	r2, r3
 800bdc8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bdcc:	4313      	orrs	r3, r2
 800bdce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800bdd2:	6878      	ldr	r0, [r7, #4]
 800bdd4:	f7ff fdca 	bl	800b96c <VL53L0X_device_read_strobe>
 800bdd8:	4603      	mov	r3, r0
 800bdda:	461a      	mov	r2, r3
 800bddc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bde0:	4313      	orrs	r3, r2
 800bde2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800bde6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800bdea:	461a      	mov	r2, r3
 800bdec:	2190      	movs	r1, #144	; 0x90
 800bdee:	6878      	ldr	r0, [r7, #4]
 800bdf0:	f002 f99e 	bl	800e130 <VL53L0X_RdDWord>
 800bdf4:	4603      	mov	r3, r0
 800bdf6:	461a      	mov	r2, r3
 800bdf8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bdfc:	4313      	orrs	r3, r2
 800bdfe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 800be02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be04:	0f5b      	lsrs	r3, r3, #29
 800be06:	b2db      	uxtb	r3, r3
 800be08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800be0c:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 800be0e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800be12:	4413      	add	r3, r2
 800be14:	b2db      	uxtb	r3, r3
 800be16:	753b      	strb	r3, [r7, #20]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 800be18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be1a:	0d9b      	lsrs	r3, r3, #22
 800be1c:	b2db      	uxtb	r3, r3
 800be1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800be22:	b2db      	uxtb	r3, r3
 800be24:	757b      	strb	r3, [r7, #21]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 800be26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be28:	0bdb      	lsrs	r3, r3, #15
 800be2a:	b2db      	uxtb	r3, r3
 800be2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800be30:	b2db      	uxtb	r3, r3
 800be32:	75bb      	strb	r3, [r7, #22]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 800be34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be36:	0a1b      	lsrs	r3, r3, #8
 800be38:	b2db      	uxtb	r3, r3
 800be3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800be3e:	b2db      	uxtb	r3, r3
 800be40:	75fb      	strb	r3, [r7, #23]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 800be42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be44:	085b      	lsrs	r3, r3, #1
 800be46:	b2db      	uxtb	r3, r3
 800be48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800be4c:	b2db      	uxtb	r3, r3
 800be4e:	763b      	strb	r3, [r7, #24]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 800be50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be52:	b2db      	uxtb	r3, r3
 800be54:	019b      	lsls	r3, r3, #6
 800be56:	b2db      	uxtb	r3, r3
 800be58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be5c:	b2db      	uxtb	r3, r3
 800be5e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 800be62:	2279      	movs	r2, #121	; 0x79
 800be64:	2194      	movs	r1, #148	; 0x94
 800be66:	6878      	ldr	r0, [r7, #4]
 800be68:	f002 f87e 	bl	800df68 <VL53L0X_WrByte>
 800be6c:	4603      	mov	r3, r0
 800be6e:	461a      	mov	r2, r3
 800be70:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800be74:	4313      	orrs	r3, r2
 800be76:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 800be7a:	6878      	ldr	r0, [r7, #4]
 800be7c:	f7ff fd76 	bl	800b96c <VL53L0X_device_read_strobe>
 800be80:	4603      	mov	r3, r0
 800be82:	461a      	mov	r2, r3
 800be84:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800be88:	4313      	orrs	r3, r2
 800be8a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800be8e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800be92:	461a      	mov	r2, r3
 800be94:	2190      	movs	r1, #144	; 0x90
 800be96:	6878      	ldr	r0, [r7, #4]
 800be98:	f002 f94a 	bl	800e130 <VL53L0X_RdDWord>
 800be9c:	4603      	mov	r3, r0
 800be9e:	461a      	mov	r2, r3
 800bea0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bea4:	4313      	orrs	r3, r2
 800bea6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 800beaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800beac:	0e9b      	lsrs	r3, r3, #26
 800beae:	b2db      	uxtb	r3, r3
 800beb0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800beb4:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 800beb6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800beba:	4413      	add	r3, r2
 800bebc:	b2db      	uxtb	r3, r3
 800bebe:	767b      	strb	r3, [r7, #25]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 800bec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bec2:	0cdb      	lsrs	r3, r3, #19
 800bec4:	b2db      	uxtb	r3, r3
 800bec6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800beca:	b2db      	uxtb	r3, r3
 800becc:	76bb      	strb	r3, [r7, #26]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 800bece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bed0:	0b1b      	lsrs	r3, r3, #12
 800bed2:	b2db      	uxtb	r3, r3
 800bed4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bed8:	b2db      	uxtb	r3, r3
 800beda:	76fb      	strb	r3, [r7, #27]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 800bedc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bede:	095b      	lsrs	r3, r3, #5
 800bee0:	b2db      	uxtb	r3, r3
 800bee2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bee6:	b2db      	uxtb	r3, r3
 800bee8:	773b      	strb	r3, [r7, #28]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 800beea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800beec:	b2db      	uxtb	r3, r3
 800beee:	009b      	lsls	r3, r3, #2
 800bef0:	b2db      	uxtb	r3, r3
 800bef2:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 800bef6:	b2db      	uxtb	r3, r3
 800bef8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 800befc:	227a      	movs	r2, #122	; 0x7a
 800befe:	2194      	movs	r1, #148	; 0x94
 800bf00:	6878      	ldr	r0, [r7, #4]
 800bf02:	f002 f831 	bl	800df68 <VL53L0X_WrByte>
 800bf06:	4603      	mov	r3, r0
 800bf08:	461a      	mov	r2, r3
 800bf0a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bf0e:	4313      	orrs	r3, r2
 800bf10:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 800bf14:	6878      	ldr	r0, [r7, #4]
 800bf16:	f7ff fd29 	bl	800b96c <VL53L0X_device_read_strobe>
 800bf1a:	4603      	mov	r3, r0
 800bf1c:	461a      	mov	r2, r3
 800bf1e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bf22:	4313      	orrs	r3, r2
 800bf24:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800bf28:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800bf2c:	461a      	mov	r2, r3
 800bf2e:	2190      	movs	r1, #144	; 0x90
 800bf30:	6878      	ldr	r0, [r7, #4]
 800bf32:	f002 f8fd 	bl	800e130 <VL53L0X_RdDWord>
 800bf36:	4603      	mov	r3, r0
 800bf38:	461a      	mov	r2, r3
 800bf3a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bf3e:	4313      	orrs	r3, r2
 800bf40:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 800bf44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf46:	0f9b      	lsrs	r3, r3, #30
 800bf48:	b2db      	uxtb	r3, r3
 800bf4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bf4e:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 800bf50:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bf54:	4413      	add	r3, r2
 800bf56:	b2db      	uxtb	r3, r3
 800bf58:	777b      	strb	r3, [r7, #29]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 800bf5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf5c:	0ddb      	lsrs	r3, r3, #23
 800bf5e:	b2db      	uxtb	r3, r3
 800bf60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bf64:	b2db      	uxtb	r3, r3
 800bf66:	77bb      	strb	r3, [r7, #30]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 800bf68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf6a:	0c1b      	lsrs	r3, r3, #16
 800bf6c:	b2db      	uxtb	r3, r3
 800bf6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bf72:	b2db      	uxtb	r3, r3
 800bf74:	77fb      	strb	r3, [r7, #31]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 800bf76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf78:	0a5b      	lsrs	r3, r3, #9
 800bf7a:	b2db      	uxtb	r3, r3
 800bf7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bf80:	b2db      	uxtb	r3, r3
 800bf82:	f887 3020 	strb.w	r3, [r7, #32]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 800bf86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf88:	089b      	lsrs	r3, r3, #2
 800bf8a:	b2db      	uxtb	r3, r3
 800bf8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bf90:	b2db      	uxtb	r3, r3
 800bf92:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			ProductId[18] = '\0';
 800bf96:	2300      	movs	r3, #0
 800bf98:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		}

		if (((option & 4) == 4) &&
 800bf9c:	78fb      	ldrb	r3, [r7, #3]
 800bf9e:	f003 0304 	and.w	r3, r3, #4
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	f000 80f1 	beq.w	800c18a <VL53L0X_get_info_from_device+0x798>
			((ReadDataFromDeviceDone & 4) == 0)) {
 800bfa8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800bfac:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	f040 80ea 	bne.w	800c18a <VL53L0X_get_info_from_device+0x798>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 800bfb6:	227b      	movs	r2, #123	; 0x7b
 800bfb8:	2194      	movs	r1, #148	; 0x94
 800bfba:	6878      	ldr	r0, [r7, #4]
 800bfbc:	f001 ffd4 	bl	800df68 <VL53L0X_WrByte>
 800bfc0:	4603      	mov	r3, r0
 800bfc2:	461a      	mov	r2, r3
 800bfc4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bfc8:	4313      	orrs	r3, r2
 800bfca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800bfce:	6878      	ldr	r0, [r7, #4]
 800bfd0:	f7ff fccc 	bl	800b96c <VL53L0X_device_read_strobe>
 800bfd4:	4603      	mov	r3, r0
 800bfd6:	461a      	mov	r2, r3
 800bfd8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bfdc:	4313      	orrs	r3, r2
 800bfde:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 800bfe2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800bfe6:	461a      	mov	r2, r3
 800bfe8:	2190      	movs	r1, #144	; 0x90
 800bfea:	6878      	ldr	r0, [r7, #4]
 800bfec:	f002 f8a0 	bl	800e130 <VL53L0X_RdDWord>
 800bff0:	4603      	mov	r3, r0
 800bff2:	461a      	mov	r2, r3
 800bff4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bff8:	4313      	orrs	r3, r2
 800bffa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 800bffe:	227c      	movs	r2, #124	; 0x7c
 800c000:	2194      	movs	r1, #148	; 0x94
 800c002:	6878      	ldr	r0, [r7, #4]
 800c004:	f001 ffb0 	bl	800df68 <VL53L0X_WrByte>
 800c008:	4603      	mov	r3, r0
 800c00a:	461a      	mov	r2, r3
 800c00c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c010:	4313      	orrs	r3, r2
 800c012:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800c016:	6878      	ldr	r0, [r7, #4]
 800c018:	f7ff fca8 	bl	800b96c <VL53L0X_device_read_strobe>
 800c01c:	4603      	mov	r3, r0
 800c01e:	461a      	mov	r2, r3
 800c020:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c024:	4313      	orrs	r3, r2
 800c026:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 800c02a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c02e:	461a      	mov	r2, r3
 800c030:	2190      	movs	r1, #144	; 0x90
 800c032:	6878      	ldr	r0, [r7, #4]
 800c034:	f002 f87c 	bl	800e130 <VL53L0X_RdDWord>
 800c038:	4603      	mov	r3, r0
 800c03a:	461a      	mov	r2, r3
 800c03c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c040:	4313      	orrs	r3, r2
 800c042:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 800c046:	2273      	movs	r2, #115	; 0x73
 800c048:	2194      	movs	r1, #148	; 0x94
 800c04a:	6878      	ldr	r0, [r7, #4]
 800c04c:	f001 ff8c 	bl	800df68 <VL53L0X_WrByte>
 800c050:	4603      	mov	r3, r0
 800c052:	461a      	mov	r2, r3
 800c054:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c058:	4313      	orrs	r3, r2
 800c05a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800c05e:	6878      	ldr	r0, [r7, #4]
 800c060:	f7ff fc84 	bl	800b96c <VL53L0X_device_read_strobe>
 800c064:	4603      	mov	r3, r0
 800c066:	461a      	mov	r2, r3
 800c068:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c06c:	4313      	orrs	r3, r2
 800c06e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800c072:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c076:	461a      	mov	r2, r3
 800c078:	2190      	movs	r1, #144	; 0x90
 800c07a:	6878      	ldr	r0, [r7, #4]
 800c07c:	f002 f858 	bl	800e130 <VL53L0X_RdDWord>
 800c080:	4603      	mov	r3, r0
 800c082:	461a      	mov	r2, r3
 800c084:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c088:	4313      	orrs	r3, r2
 800c08a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x0000000ff) << 8;
 800c08e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c090:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 800c092:	b29b      	uxth	r3, r3
 800c094:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 800c096:	2274      	movs	r2, #116	; 0x74
 800c098:	2194      	movs	r1, #148	; 0x94
 800c09a:	6878      	ldr	r0, [r7, #4]
 800c09c:	f001 ff64 	bl	800df68 <VL53L0X_WrByte>
 800c0a0:	4603      	mov	r3, r0
 800c0a2:	461a      	mov	r2, r3
 800c0a4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c0a8:	4313      	orrs	r3, r2
 800c0aa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800c0ae:	6878      	ldr	r0, [r7, #4]
 800c0b0:	f7ff fc5c 	bl	800b96c <VL53L0X_device_read_strobe>
 800c0b4:	4603      	mov	r3, r0
 800c0b6:	461a      	mov	r2, r3
 800c0b8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c0bc:	4313      	orrs	r3, r2
 800c0be:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800c0c2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c0c6:	461a      	mov	r2, r3
 800c0c8:	2190      	movs	r1, #144	; 0x90
 800c0ca:	6878      	ldr	r0, [r7, #4]
 800c0cc:	f002 f830 	bl	800e130 <VL53L0X_RdDWord>
 800c0d0:	4603      	mov	r3, r0
 800c0d2:	461a      	mov	r2, r3
 800c0d4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c0d8:	4313      	orrs	r3, r2
 800c0da:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 800c0de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0e0:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 800c0e2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c0e4:	4313      	orrs	r3, r2
 800c0e6:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 800c0e8:	2275      	movs	r2, #117	; 0x75
 800c0ea:	2194      	movs	r1, #148	; 0x94
 800c0ec:	6878      	ldr	r0, [r7, #4]
 800c0ee:	f001 ff3b 	bl	800df68 <VL53L0X_WrByte>
 800c0f2:	4603      	mov	r3, r0
 800c0f4:	461a      	mov	r2, r3
 800c0f6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c0fa:	4313      	orrs	r3, r2
 800c0fc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800c100:	6878      	ldr	r0, [r7, #4]
 800c102:	f7ff fc33 	bl	800b96c <VL53L0X_device_read_strobe>
 800c106:	4603      	mov	r3, r0
 800c108:	461a      	mov	r2, r3
 800c10a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c10e:	4313      	orrs	r3, r2
 800c110:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800c114:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c118:	461a      	mov	r2, r3
 800c11a:	2190      	movs	r1, #144	; 0x90
 800c11c:	6878      	ldr	r0, [r7, #4]
 800c11e:	f002 f807 	bl	800e130 <VL53L0X_RdDWord>
 800c122:	4603      	mov	r3, r0
 800c124:	461a      	mov	r2, r3
 800c126:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c12a:	4313      	orrs	r3, r2
 800c12c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
							<< 8;
 800c130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c132:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
 800c134:	b29b      	uxth	r3, r3
 800c136:	657b      	str	r3, [r7, #84]	; 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 800c138:	2276      	movs	r2, #118	; 0x76
 800c13a:	2194      	movs	r1, #148	; 0x94
 800c13c:	6878      	ldr	r0, [r7, #4]
 800c13e:	f001 ff13 	bl	800df68 <VL53L0X_WrByte>
 800c142:	4603      	mov	r3, r0
 800c144:	461a      	mov	r2, r3
 800c146:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c14a:	4313      	orrs	r3, r2
 800c14c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800c150:	6878      	ldr	r0, [r7, #4]
 800c152:	f7ff fc0b 	bl	800b96c <VL53L0X_device_read_strobe>
 800c156:	4603      	mov	r3, r0
 800c158:	461a      	mov	r2, r3
 800c15a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c15e:	4313      	orrs	r3, r2
 800c160:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800c164:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c168:	461a      	mov	r2, r3
 800c16a:	2190      	movs	r1, #144	; 0x90
 800c16c:	6878      	ldr	r0, [r7, #4]
 800c16e:	f001 ffdf 	bl	800e130 <VL53L0X_RdDWord>
 800c172:	4603      	mov	r3, r0
 800c174:	461a      	mov	r2, r3
 800c176:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c17a:	4313      	orrs	r3, r2
 800c17c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 800c180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c182:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 800c184:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c186:	4313      	orrs	r3, r2
 800c188:	657b      	str	r3, [r7, #84]	; 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 800c18a:	2200      	movs	r2, #0
 800c18c:	2181      	movs	r1, #129	; 0x81
 800c18e:	6878      	ldr	r0, [r7, #4]
 800c190:	f001 feea 	bl	800df68 <VL53L0X_WrByte>
 800c194:	4603      	mov	r3, r0
 800c196:	461a      	mov	r2, r3
 800c198:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c19c:	4313      	orrs	r3, r2
 800c19e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 800c1a2:	2206      	movs	r2, #6
 800c1a4:	21ff      	movs	r1, #255	; 0xff
 800c1a6:	6878      	ldr	r0, [r7, #4]
 800c1a8:	f001 fede 	bl	800df68 <VL53L0X_WrByte>
 800c1ac:	4603      	mov	r3, r0
 800c1ae:	461a      	mov	r2, r3
 800c1b0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c1b4:	4313      	orrs	r3, r2
 800c1b6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 800c1ba:	f107 0337 	add.w	r3, r7, #55	; 0x37
 800c1be:	461a      	mov	r2, r3
 800c1c0:	2183      	movs	r1, #131	; 0x83
 800c1c2:	6878      	ldr	r0, [r7, #4]
 800c1c4:	f001 ff52 	bl	800e06c <VL53L0X_RdByte>
 800c1c8:	4603      	mov	r3, r0
 800c1ca:	461a      	mov	r2, r3
 800c1cc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c1d0:	4313      	orrs	r3, r2
 800c1d2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 800c1d6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c1da:	f023 0304 	bic.w	r3, r3, #4
 800c1de:	b2db      	uxtb	r3, r3
 800c1e0:	461a      	mov	r2, r3
 800c1e2:	2183      	movs	r1, #131	; 0x83
 800c1e4:	6878      	ldr	r0, [r7, #4]
 800c1e6:	f001 febf 	bl	800df68 <VL53L0X_WrByte>
 800c1ea:	4603      	mov	r3, r0
 800c1ec:	461a      	mov	r2, r3
 800c1ee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c1f2:	4313      	orrs	r3, r2
 800c1f4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800c1f8:	2201      	movs	r2, #1
 800c1fa:	21ff      	movs	r1, #255	; 0xff
 800c1fc:	6878      	ldr	r0, [r7, #4]
 800c1fe:	f001 feb3 	bl	800df68 <VL53L0X_WrByte>
 800c202:	4603      	mov	r3, r0
 800c204:	461a      	mov	r2, r3
 800c206:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c20a:	4313      	orrs	r3, r2
 800c20c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800c210:	2201      	movs	r2, #1
 800c212:	2100      	movs	r1, #0
 800c214:	6878      	ldr	r0, [r7, #4]
 800c216:	f001 fea7 	bl	800df68 <VL53L0X_WrByte>
 800c21a:	4603      	mov	r3, r0
 800c21c:	461a      	mov	r2, r3
 800c21e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c222:	4313      	orrs	r3, r2
 800c224:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800c228:	2200      	movs	r2, #0
 800c22a:	21ff      	movs	r1, #255	; 0xff
 800c22c:	6878      	ldr	r0, [r7, #4]
 800c22e:	f001 fe9b 	bl	800df68 <VL53L0X_WrByte>
 800c232:	4603      	mov	r3, r0
 800c234:	461a      	mov	r2, r3
 800c236:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c23a:	4313      	orrs	r3, r2
 800c23c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800c240:	2200      	movs	r2, #0
 800c242:	2180      	movs	r1, #128	; 0x80
 800c244:	6878      	ldr	r0, [r7, #4]
 800c246:	f001 fe8f 	bl	800df68 <VL53L0X_WrByte>
 800c24a:	4603      	mov	r3, r0
 800c24c:	461a      	mov	r2, r3
 800c24e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c252:	4313      	orrs	r3, r2
 800c254:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 800c258:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	f040 808f 	bne.w	800c380 <VL53L0X_get_info_from_device+0x98e>
 800c262:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c266:	2b07      	cmp	r3, #7
 800c268:	f000 808a 	beq.w	800c380 <VL53L0X_get_info_from_device+0x98e>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 800c26c:	78fb      	ldrb	r3, [r7, #3]
 800c26e:	f003 0301 	and.w	r3, r3, #1
 800c272:	2b00      	cmp	r3, #0
 800c274:	d024      	beq.n	800c2c0 <VL53L0X_get_info_from_device+0x8ce>
			((ReadDataFromDeviceDone & 1) == 0)) {
 800c276:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c27a:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d11e      	bne.n	800c2c0 <VL53L0X_get_info_from_device+0x8ce>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 800c288:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 800c292:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 800c296:	2300      	movs	r3, #0
 800c298:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c29a:	e00e      	b.n	800c2ba <VL53L0X_get_info_from_device+0x8c8>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 800c29c:	f107 0208 	add.w	r2, r7, #8
 800c2a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c2a2:	4413      	add	r3, r2
 800c2a4:	7819      	ldrb	r1, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 800c2a6:	687a      	ldr	r2, [r7, #4]
 800c2a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c2aa:	4413      	add	r3, r2
 800c2ac:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 800c2b0:	460a      	mov	r2, r1
 800c2b2:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 800c2b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c2b6:	3301      	adds	r3, #1
 800c2b8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c2ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c2bc:	2b05      	cmp	r3, #5
 800c2be:	dded      	ble.n	800c29c <VL53L0X_get_info_from_device+0x8aa>
			}
		}

		if (((option & 2) == 2) &&
 800c2c0:	78fb      	ldrb	r3, [r7, #3]
 800c2c2:	f003 0302 	and.w	r3, r3, #2
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d018      	beq.n	800c2fc <VL53L0X_get_info_from_device+0x90a>
			((ReadDataFromDeviceDone & 2) == 0)) {
 800c2ca:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c2ce:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d112      	bne.n	800c2fc <VL53L0X_get_info_from_device+0x90a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800c2d6:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800c2e0:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	33f3      	adds	r3, #243	; 0xf3
 800c2ee:	63bb      	str	r3, [r7, #56]	; 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 800c2f0:	f107 0310 	add.w	r3, r7, #16
 800c2f4:	4619      	mov	r1, r3
 800c2f6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c2f8:	f002 fe46 	bl	800ef88 <strcpy>

		}

		if (((option & 4) == 4) &&
 800c2fc:	78fb      	ldrb	r3, [r7, #3]
 800c2fe:	f003 0304 	and.w	r3, r3, #4
 800c302:	2b00      	cmp	r3, #0
 800c304:	d030      	beq.n	800c368 <VL53L0X_get_info_from_device+0x976>
			((ReadDataFromDeviceDone & 4) == 0)) {
 800c306:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c30a:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d12a      	bne.n	800c368 <VL53L0X_get_info_from_device+0x976>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800c312:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800c31a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 800c322:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c324:	025b      	lsls	r3, r3, #9
 800c326:	643b      	str	r3, [r7, #64]	; 0x40
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c32c:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 800c330:	2300      	movs	r3, #0
 800c332:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			if (DistMeasFixed1104_400_mm != 0) {
 800c336:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d011      	beq.n	800c360 <VL53L0X_get_info_from_device+0x96e>
					OffsetFixed1104_mm =
 800c33c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c33e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c340:	1ad3      	subs	r3, r2, r3
 800c342:	64bb      	str	r3, [r7, #72]	; 0x48
						DistMeasFixed1104_400_mm -
						DistMeasTgtFixed1104_mm;
					OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 800c344:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c346:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c34a:	fb02 f303 	mul.w	r3, r2, r3
 800c34e:	091b      	lsrs	r3, r3, #4
					OffsetMicroMeters = (OffsetFixed1104_mm
 800c350:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
					OffsetMicroMeters *= -1;
 800c354:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800c358:	425b      	negs	r3, r3
 800c35a:	b29b      	uxth	r3, r3
 800c35c:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			}

			PALDevDataSet(Dev,
 800c360:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	60da      	str	r2, [r3, #12]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 800c368:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800c36c:	78fb      	ldrb	r3, [r7, #3]
 800c36e:	4313      	orrs	r3, r2
 800c370:	b2db      	uxtb	r3, r3
 800c372:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 800c376:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800c380:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 800c384:	4618      	mov	r0, r3
 800c386:	3760      	adds	r7, #96	; 0x60
 800c388:	46bd      	mov	sp, r7
 800c38a:	bd80      	pop	{r7, pc}

0800c38c <VL53L0X_calc_macro_period_ps>:


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev, uint8_t vcsel_period_pclks)
{
 800c38c:	b480      	push	{r7}
 800c38e:	b087      	sub	sp, #28
 800c390:	af00      	add	r7, sp, #0
 800c392:	6078      	str	r0, [r7, #4]
 800c394:	460b      	mov	r3, r1
 800c396:	70fb      	strb	r3, [r7, #3]
	LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	   therefore set fixed value
	*/
	PLL_period_ps = 1655;
 800c398:	f240 6277 	movw	r2, #1655	; 0x677
 800c39c:	f04f 0300 	mov.w	r3, #0
 800c3a0:	e9c7 2304 	strd	r2, r3, [r7, #16]

	macro_period_vclks = 2304;
 800c3a4:	f44f 6310 	mov.w	r3, #2304	; 0x900
 800c3a8:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 800c3aa:	78fb      	ldrb	r3, [r7, #3]
 800c3ac:	68fa      	ldr	r2, [r7, #12]
 800c3ae:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 800c3b2:	693a      	ldr	r2, [r7, #16]
 800c3b4:	fb02 f303 	mul.w	r3, r2, r3
 800c3b8:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 800c3ba:	68bb      	ldr	r3, [r7, #8]
}
 800c3bc:	4618      	mov	r0, r3
 800c3be:	371c      	adds	r7, #28
 800c3c0:	46bd      	mov	sp, r7
 800c3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3c6:	4770      	bx	lr

0800c3c8 <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 800c3c8:	b480      	push	{r7}
 800c3ca:	b087      	sub	sp, #28
 800c3cc:	af00      	add	r7, sp, #0
 800c3ce:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 800c3d0:	2300      	movs	r3, #0
 800c3d2:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 800c3d4:	2300      	movs	r3, #0
 800c3d6:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 800c3d8:	2300      	movs	r3, #0
 800c3da:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d017      	beq.n	800c412 <VL53L0X_encode_timeout+0x4a>
		ls_byte = timeout_macro_clks - 1;
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	3b01      	subs	r3, #1
 800c3e6:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 800c3e8:	e005      	b.n	800c3f6 <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 800c3ea:	693b      	ldr	r3, [r7, #16]
 800c3ec:	085b      	lsrs	r3, r3, #1
 800c3ee:	613b      	str	r3, [r7, #16]
			ms_byte++;
 800c3f0:	89fb      	ldrh	r3, [r7, #14]
 800c3f2:	3301      	adds	r3, #1
 800c3f4:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 800c3f6:	693b      	ldr	r3, [r7, #16]
 800c3f8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d1f4      	bne.n	800c3ea <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 800c400:	89fb      	ldrh	r3, [r7, #14]
 800c402:	021b      	lsls	r3, r3, #8
 800c404:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 800c406:	693b      	ldr	r3, [r7, #16]
 800c408:	b29b      	uxth	r3, r3
 800c40a:	b2db      	uxtb	r3, r3
 800c40c:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 800c40e:	4413      	add	r3, r2
 800c410:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 800c412:	8afb      	ldrh	r3, [r7, #22]

}
 800c414:	4618      	mov	r0, r3
 800c416:	371c      	adds	r7, #28
 800c418:	46bd      	mov	sp, r7
 800c41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c41e:	4770      	bx	lr

0800c420 <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 800c420:	b480      	push	{r7}
 800c422:	b085      	sub	sp, #20
 800c424:	af00      	add	r7, sp, #0
 800c426:	4603      	mov	r3, r0
 800c428:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 800c42a:	2300      	movs	r3, #0
 800c42c:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800c42e:	88fb      	ldrh	r3, [r7, #6]
 800c430:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 800c432:	88fa      	ldrh	r2, [r7, #6]
 800c434:	0a12      	lsrs	r2, r2, #8
 800c436:	b292      	uxth	r2, r2
 800c438:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800c43a:	3301      	adds	r3, #1
 800c43c:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 800c43e:	68fb      	ldr	r3, [r7, #12]
}
 800c440:	4618      	mov	r0, r3
 800c442:	3714      	adds	r7, #20
 800c444:	46bd      	mov	sp, r7
 800c446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c44a:	4770      	bx	lr

0800c44c <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 800c44c:	b580      	push	{r7, lr}
 800c44e:	b088      	sub	sp, #32
 800c450:	af00      	add	r7, sp, #0
 800c452:	60f8      	str	r0, [r7, #12]
 800c454:	60b9      	str	r1, [r7, #8]
 800c456:	4613      	mov	r3, r2
 800c458:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 800c45a:	2300      	movs	r3, #0
 800c45c:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 800c45e:	79fb      	ldrb	r3, [r7, #7]
 800c460:	4619      	mov	r1, r3
 800c462:	68f8      	ldr	r0, [r7, #12]
 800c464:	f7ff ff92 	bl	800c38c <VL53L0X_calc_macro_period_ps>
 800c468:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 800c46a:	69bb      	ldr	r3, [r7, #24]
 800c46c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800c470:	4a0a      	ldr	r2, [pc, #40]	; (800c49c <VL53L0X_calc_timeout_mclks+0x50>)
 800c472:	fba2 2303 	umull	r2, r3, r2, r3
 800c476:	099b      	lsrs	r3, r3, #6
 800c478:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 800c47a:	68bb      	ldr	r3, [r7, #8]
 800c47c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c480:	fb03 f202 	mul.w	r2, r3, r2
		+ (macro_period_ns / 2)) / macro_period_ns);
 800c484:	697b      	ldr	r3, [r7, #20]
 800c486:	085b      	lsrs	r3, r3, #1
 800c488:	441a      	add	r2, r3
	timeout_period_mclks =
 800c48a:	697b      	ldr	r3, [r7, #20]
 800c48c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c490:	61fb      	str	r3, [r7, #28]

    return timeout_period_mclks;
 800c492:	69fb      	ldr	r3, [r7, #28]
}
 800c494:	4618      	mov	r0, r3
 800c496:	3720      	adds	r7, #32
 800c498:	46bd      	mov	sp, r7
 800c49a:	bd80      	pop	{r7, pc}
 800c49c:	10624dd3 	.word	0x10624dd3

0800c4a0 <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 800c4a0:	b580      	push	{r7, lr}
 800c4a2:	b086      	sub	sp, #24
 800c4a4:	af00      	add	r7, sp, #0
 800c4a6:	6078      	str	r0, [r7, #4]
 800c4a8:	460b      	mov	r3, r1
 800c4aa:	807b      	strh	r3, [r7, #2]
 800c4ac:	4613      	mov	r3, r2
 800c4ae:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 800c4b0:	2300      	movs	r3, #0
 800c4b2:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 800c4b4:	787b      	ldrb	r3, [r7, #1]
 800c4b6:	4619      	mov	r1, r3
 800c4b8:	6878      	ldr	r0, [r7, #4]
 800c4ba:	f7ff ff67 	bl	800c38c <VL53L0X_calc_macro_period_ps>
 800c4be:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 800c4c0:	693b      	ldr	r3, [r7, #16]
 800c4c2:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800c4c6:	4a0a      	ldr	r2, [pc, #40]	; (800c4f0 <VL53L0X_calc_timeout_us+0x50>)
 800c4c8:	fba2 2303 	umull	r2, r3, r2, r3
 800c4cc:	099b      	lsrs	r3, r3, #6
 800c4ce:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 800c4d0:	887b      	ldrh	r3, [r7, #2]
 800c4d2:	68fa      	ldr	r2, [r7, #12]
 800c4d4:	fb02 f303 	mul.w	r3, r2, r3
 800c4d8:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
	actual_timeout_period_us =
 800c4dc:	4a04      	ldr	r2, [pc, #16]	; (800c4f0 <VL53L0X_calc_timeout_us+0x50>)
 800c4de:	fba2 2303 	umull	r2, r3, r2, r3
 800c4e2:	099b      	lsrs	r3, r3, #6
 800c4e4:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 800c4e6:	697b      	ldr	r3, [r7, #20]
}
 800c4e8:	4618      	mov	r0, r3
 800c4ea:	3718      	adds	r7, #24
 800c4ec:	46bd      	mov	sp, r7
 800c4ee:	bd80      	pop	{r7, pc}
 800c4f0:	10624dd3 	.word	0x10624dd3

0800c4f4 <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 800c4f4:	b580      	push	{r7, lr}
 800c4f6:	b08c      	sub	sp, #48	; 0x30
 800c4f8:	af00      	add	r7, sp, #0
 800c4fa:	60f8      	str	r0, [r7, #12]
 800c4fc:	460b      	mov	r3, r1
 800c4fe:	607a      	str	r2, [r7, #4]
 800c500:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c502:	2300      	movs	r3, #0
 800c504:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 800c508:	2300      	movs	r3, #0
 800c50a:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 800c50e:	2300      	movs	r3, #0
 800c510:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 800c512:	2300      	movs	r3, #0
 800c514:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 800c516:	2300      	movs	r3, #0
 800c518:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800c51a:	7afb      	ldrb	r3, [r7, #11]
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d005      	beq.n	800c52c <get_sequence_step_timeout+0x38>
 800c520:	7afb      	ldrb	r3, [r7, #11]
 800c522:	2b01      	cmp	r3, #1
 800c524:	d002      	beq.n	800c52c <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 800c526:	7afb      	ldrb	r3, [r7, #11]
 800c528:	2b02      	cmp	r3, #2
 800c52a:	d128      	bne.n	800c57e <get_sequence_step_timeout+0x8a>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800c52c:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800c530:	461a      	mov	r2, r3
 800c532:	2100      	movs	r1, #0
 800c534:	68f8      	ldr	r0, [r7, #12]
 800c536:	f7fd fa4d 	bl	80099d4 <VL53L0X_GetVcselPulsePeriod>
 800c53a:	4603      	mov	r3, r0
 800c53c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 800c540:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800c544:	2b00      	cmp	r3, #0
 800c546:	d109      	bne.n	800c55c <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 800c548:	f107 0320 	add.w	r3, r7, #32
 800c54c:	461a      	mov	r2, r3
 800c54e:	2146      	movs	r1, #70	; 0x46
 800c550:	68f8      	ldr	r0, [r7, #12]
 800c552:	f001 fd8b 	bl	800e06c <VL53L0X_RdByte>
 800c556:	4603      	mov	r3, r0
 800c558:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 800c55c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c560:	b29b      	uxth	r3, r3
 800c562:	4618      	mov	r0, r3
 800c564:	f7ff ff5c 	bl	800c420 <VL53L0X_decode_timeout>
 800c568:	4603      	mov	r3, r0
 800c56a:	847b      	strh	r3, [r7, #34]	; 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800c56c:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800c570:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c572:	4619      	mov	r1, r3
 800c574:	68f8      	ldr	r0, [r7, #12]
 800c576:	f7ff ff93 	bl	800c4a0 <VL53L0X_calc_timeout_us>
 800c57a:	62b8      	str	r0, [r7, #40]	; 0x28
 800c57c:	e092      	b.n	800c6a4 <get_sequence_step_timeout+0x1b0>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800c57e:	7afb      	ldrb	r3, [r7, #11]
 800c580:	2b03      	cmp	r3, #3
 800c582:	d135      	bne.n	800c5f0 <get_sequence_step_timeout+0xfc>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800c584:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800c588:	461a      	mov	r2, r3
 800c58a:	2100      	movs	r1, #0
 800c58c:	68f8      	ldr	r0, [r7, #12]
 800c58e:	f7fd fa21 	bl	80099d4 <VL53L0X_GetVcselPulsePeriod>
 800c592:	4603      	mov	r3, r0
 800c594:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 800c598:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	f040 8081 	bne.w	800c6a4 <get_sequence_step_timeout+0x1b0>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800c5a2:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800c5a6:	461a      	mov	r2, r3
 800c5a8:	2100      	movs	r1, #0
 800c5aa:	68f8      	ldr	r0, [r7, #12]
 800c5ac:	f7fd fa12 	bl	80099d4 <VL53L0X_GetVcselPulsePeriod>
 800c5b0:	4603      	mov	r3, r0
 800c5b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 800c5b6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d109      	bne.n	800c5d2 <get_sequence_step_timeout+0xde>
				Status = VL53L0X_RdWord(Dev,
 800c5be:	f107 031e 	add.w	r3, r7, #30
 800c5c2:	461a      	mov	r2, r3
 800c5c4:	2151      	movs	r1, #81	; 0x51
 800c5c6:	68f8      	ldr	r0, [r7, #12]
 800c5c8:	f001 fd7a 	bl	800e0c0 <VL53L0X_RdWord>
 800c5cc:	4603      	mov	r3, r0
 800c5ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 800c5d2:	8bfb      	ldrh	r3, [r7, #30]
 800c5d4:	4618      	mov	r0, r3
 800c5d6:	f7ff ff23 	bl	800c420 <VL53L0X_decode_timeout>
 800c5da:	4603      	mov	r3, r0
 800c5dc:	84fb      	strh	r3, [r7, #38]	; 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800c5de:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800c5e2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c5e4:	4619      	mov	r1, r3
 800c5e6:	68f8      	ldr	r0, [r7, #12]
 800c5e8:	f7ff ff5a 	bl	800c4a0 <VL53L0X_calc_timeout_us>
 800c5ec:	62b8      	str	r0, [r7, #40]	; 0x28
 800c5ee:	e059      	b.n	800c6a4 <get_sequence_step_timeout+0x1b0>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 800c5f0:	7afb      	ldrb	r3, [r7, #11]
 800c5f2:	2b04      	cmp	r3, #4
 800c5f4:	d156      	bne.n	800c6a4 <get_sequence_step_timeout+0x1b0>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800c5f6:	f107 0314 	add.w	r3, r7, #20
 800c5fa:	4619      	mov	r1, r3
 800c5fc:	68f8      	ldr	r0, [r7, #12]
 800c5fe:	f7fd faf5 	bl	8009bec <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 800c602:	2300      	movs	r3, #0
 800c604:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 800c606:	7dfb      	ldrb	r3, [r7, #23]
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d01d      	beq.n	800c648 <get_sequence_step_timeout+0x154>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800c60c:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800c610:	461a      	mov	r2, r3
 800c612:	2100      	movs	r1, #0
 800c614:	68f8      	ldr	r0, [r7, #12]
 800c616:	f7fd f9dd 	bl	80099d4 <VL53L0X_GetVcselPulsePeriod>
 800c61a:	4603      	mov	r3, r0
 800c61c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_VCSEL_PERIOD_PRE_RANGE,
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS) */
			if (Status == VL53L0X_ERROR_NONE) {
 800c620:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800c624:	2b00      	cmp	r3, #0
 800c626:	d10f      	bne.n	800c648 <get_sequence_step_timeout+0x154>
				Status = VL53L0X_RdWord(Dev,
 800c628:	f107 031e 	add.w	r3, r7, #30
 800c62c:	461a      	mov	r2, r3
 800c62e:	2151      	movs	r1, #81	; 0x51
 800c630:	68f8      	ldr	r0, [r7, #12]
 800c632:	f001 fd45 	bl	800e0c0 <VL53L0X_RdWord>
 800c636:	4603      	mov	r3, r0
 800c638:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 800c63c:	8bfb      	ldrh	r3, [r7, #30]
 800c63e:	4618      	mov	r0, r3
 800c640:	f7ff feee 	bl	800c420 <VL53L0X_decode_timeout>
 800c644:	4603      	mov	r3, r0
 800c646:	84fb      	strh	r3, [r7, #38]	; 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 800c648:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d109      	bne.n	800c664 <get_sequence_step_timeout+0x170>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800c650:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800c654:	461a      	mov	r2, r3
 800c656:	2101      	movs	r1, #1
 800c658:	68f8      	ldr	r0, [r7, #12]
 800c65a:	f7fd f9bb 	bl	80099d4 <VL53L0X_GetVcselPulsePeriod>
 800c65e:	4603      	mov	r3, r0
 800c660:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 800c664:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d10f      	bne.n	800c68c <get_sequence_step_timeout+0x198>
			Status = VL53L0X_RdWord(Dev,
 800c66c:	f107 031c 	add.w	r3, r7, #28
 800c670:	461a      	mov	r2, r3
 800c672:	2171      	movs	r1, #113	; 0x71
 800c674:	68f8      	ldr	r0, [r7, #12]
 800c676:	f001 fd23 	bl	800e0c0 <VL53L0X_RdWord>
 800c67a:	4603      	mov	r3, r0
 800c67c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 800c680:	8bbb      	ldrh	r3, [r7, #28]
 800c682:	4618      	mov	r0, r3
 800c684:	f7ff fecc 	bl	800c420 <VL53L0X_decode_timeout>
 800c688:	4603      	mov	r3, r0
 800c68a:	84bb      	strh	r3, [r7, #36]	; 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 800c68c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c68e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c690:	1ad3      	subs	r3, r2, r3
 800c692:	84bb      	strh	r3, [r7, #36]	; 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800c694:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800c698:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c69a:	4619      	mov	r1, r3
 800c69c:	68f8      	ldr	r0, [r7, #12]
 800c69e:	f7ff feff 	bl	800c4a0 <VL53L0X_calc_timeout_us>
 800c6a2:	62b8      	str	r0, [r7, #40]	; 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c6a8:	601a      	str	r2, [r3, #0]

	return Status;
 800c6aa:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800c6ae:	4618      	mov	r0, r3
 800c6b0:	3730      	adds	r7, #48	; 0x30
 800c6b2:	46bd      	mov	sp, r7
 800c6b4:	bd80      	pop	{r7, pc}

0800c6b6 <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 800c6b6:	b580      	push	{r7, lr}
 800c6b8:	b08a      	sub	sp, #40	; 0x28
 800c6ba:	af00      	add	r7, sp, #0
 800c6bc:	60f8      	str	r0, [r7, #12]
 800c6be:	460b      	mov	r3, r1
 800c6c0:	607a      	str	r2, [r7, #4]
 800c6c2:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c6c4:	2300      	movs	r3, #0
 800c6c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t MsrcRangeTimeOutMClks;
	uint32_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800c6ca:	7afb      	ldrb	r3, [r7, #11]
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d005      	beq.n	800c6dc <set_sequence_step_timeout+0x26>
 800c6d0:	7afb      	ldrb	r3, [r7, #11]
 800c6d2:	2b01      	cmp	r3, #1
 800c6d4:	d002      	beq.n	800c6dc <set_sequence_step_timeout+0x26>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 800c6d6:	7afb      	ldrb	r3, [r7, #11]
 800c6d8:	2b02      	cmp	r3, #2
 800c6da:	d138      	bne.n	800c74e <set_sequence_step_timeout+0x98>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800c6dc:	f107 031b 	add.w	r3, r7, #27
 800c6e0:	461a      	mov	r2, r3
 800c6e2:	2100      	movs	r1, #0
 800c6e4:	68f8      	ldr	r0, [r7, #12]
 800c6e6:	f7fd f975 	bl	80099d4 <VL53L0X_GetVcselPulsePeriod>
 800c6ea:	4603      	mov	r3, r0
 800c6ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 800c6f0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d11a      	bne.n	800c72e <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 800c6f8:	7efb      	ldrb	r3, [r7, #27]
 800c6fa:	461a      	mov	r2, r3
 800c6fc:	6879      	ldr	r1, [r7, #4]
 800c6fe:	68f8      	ldr	r0, [r7, #12]
 800c700:	f7ff fea4 	bl	800c44c <VL53L0X_calc_timeout_mclks>
 800c704:	4603      	mov	r3, r0
 800c706:	83bb      	strh	r3, [r7, #28]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 800c708:	8bbb      	ldrh	r3, [r7, #28]
 800c70a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c70e:	d903      	bls.n	800c718 <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 800c710:	23ff      	movs	r3, #255	; 0xff
 800c712:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c716:	e004      	b.n	800c722 <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 800c718:	8bbb      	ldrh	r3, [r7, #28]
 800c71a:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 800c71c:	3b01      	subs	r3, #1
 800c71e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800c722:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c726:	b29a      	uxth	r2, r3
 800c728:	68fb      	ldr	r3, [r7, #12]
 800c72a:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 800c72e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c732:	2b00      	cmp	r3, #0
 800c734:	f040 80ab 	bne.w	800c88e <set_sequence_step_timeout+0x1d8>
			Status = VL53L0X_WrByte(Dev,
 800c738:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c73c:	461a      	mov	r2, r3
 800c73e:	2146      	movs	r1, #70	; 0x46
 800c740:	68f8      	ldr	r0, [r7, #12]
 800c742:	f001 fc11 	bl	800df68 <VL53L0X_WrByte>
 800c746:	4603      	mov	r3, r0
 800c748:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 800c74c:	e09f      	b.n	800c88e <set_sequence_step_timeout+0x1d8>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800c74e:	7afb      	ldrb	r3, [r7, #11]
 800c750:	2b03      	cmp	r3, #3
 800c752:	d135      	bne.n	800c7c0 <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 800c754:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d11b      	bne.n	800c794 <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800c75c:	f107 031b 	add.w	r3, r7, #27
 800c760:	461a      	mov	r2, r3
 800c762:	2100      	movs	r1, #0
 800c764:	68f8      	ldr	r0, [r7, #12]
 800c766:	f7fd f935 	bl	80099d4 <VL53L0X_GetVcselPulsePeriod>
 800c76a:	4603      	mov	r3, r0
 800c76c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 800c770:	7efb      	ldrb	r3, [r7, #27]
 800c772:	461a      	mov	r2, r3
 800c774:	6879      	ldr	r1, [r7, #4]
 800c776:	68f8      	ldr	r0, [r7, #12]
 800c778:	f7ff fe68 	bl	800c44c <VL53L0X_calc_timeout_mclks>
 800c77c:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 800c77e:	84bb      	strh	r3, [r7, #36]	; 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 800c780:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c782:	4618      	mov	r0, r3
 800c784:	f7ff fe20 	bl	800c3c8 <VL53L0X_encode_timeout>
 800c788:	4603      	mov	r3, r0
 800c78a:	833b      	strh	r3, [r7, #24]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800c78c:	8b3a      	ldrh	r2, [r7, #24]
 800c78e:	68fb      	ldr	r3, [r7, #12]
 800c790:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800c794:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d108      	bne.n	800c7ae <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 800c79c:	8b3b      	ldrh	r3, [r7, #24]
 800c79e:	461a      	mov	r2, r3
 800c7a0:	2151      	movs	r1, #81	; 0x51
 800c7a2:	68f8      	ldr	r0, [r7, #12]
 800c7a4:	f001 fc04 	bl	800dfb0 <VL53L0X_WrWord>
 800c7a8:	4603      	mov	r3, r0
 800c7aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800c7ae:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d16b      	bne.n	800c88e <set_sequence_step_timeout+0x1d8>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	687a      	ldr	r2, [r7, #4]
 800c7ba:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 800c7be:	e066      	b.n	800c88e <set_sequence_step_timeout+0x1d8>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 800c7c0:	7afb      	ldrb	r3, [r7, #11]
 800c7c2:	2b04      	cmp	r3, #4
 800c7c4:	d160      	bne.n	800c888 <set_sequence_step_timeout+0x1d2>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 800c7c6:	f107 0310 	add.w	r3, r7, #16
 800c7ca:	4619      	mov	r1, r3
 800c7cc:	68f8      	ldr	r0, [r7, #12]
 800c7ce:	f7fd fa0d 	bl	8009bec <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 800c7d2:	2300      	movs	r3, #0
 800c7d4:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 800c7d6:	7cfb      	ldrb	r3, [r7, #19]
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d01d      	beq.n	800c818 <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800c7dc:	f107 031b 	add.w	r3, r7, #27
 800c7e0:	461a      	mov	r2, r3
 800c7e2:	2100      	movs	r1, #0
 800c7e4:	68f8      	ldr	r0, [r7, #12]
 800c7e6:	f7fd f8f5 	bl	80099d4 <VL53L0X_GetVcselPulsePeriod>
 800c7ea:	4603      	mov	r3, r0
 800c7ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS) */
				if (Status == VL53L0X_ERROR_NONE) {
 800c7f0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d10f      	bne.n	800c818 <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 800c7f8:	f107 0318 	add.w	r3, r7, #24
 800c7fc:	461a      	mov	r2, r3
 800c7fe:	2151      	movs	r1, #81	; 0x51
 800c800:	68f8      	ldr	r0, [r7, #12]
 800c802:	f001 fc5d 	bl	800e0c0 <VL53L0X_RdWord>
 800c806:	4603      	mov	r3, r0
 800c808:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 800c80c:	8b3b      	ldrh	r3, [r7, #24]
 800c80e:	4618      	mov	r0, r3
 800c810:	f7ff fe06 	bl	800c420 <VL53L0X_decode_timeout>
 800c814:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 800c816:	84bb      	strh	r3, [r7, #36]	; 0x24
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 800c818:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d109      	bne.n	800c834 <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800c820:	f107 031b 	add.w	r3, r7, #27
 800c824:	461a      	mov	r2, r3
 800c826:	2101      	movs	r1, #1
 800c828:	68f8      	ldr	r0, [r7, #12]
 800c82a:	f7fd f8d3 	bl	80099d4 <VL53L0X_GetVcselPulsePeriod>
 800c82e:	4603      	mov	r3, r0
 800c830:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
						&CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 800c834:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c838:	2b00      	cmp	r3, #0
 800c83a:	d128      	bne.n	800c88e <set_sequence_step_timeout+0x1d8>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 800c83c:	7efb      	ldrb	r3, [r7, #27]
 800c83e:	461a      	mov	r2, r3
 800c840:	6879      	ldr	r1, [r7, #4]
 800c842:	68f8      	ldr	r0, [r7, #12]
 800c844:	f7ff fe02 	bl	800c44c <VL53L0X_calc_timeout_mclks>
 800c848:	6238      	str	r0, [r7, #32]
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 800c84a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c84c:	6a3a      	ldr	r2, [r7, #32]
 800c84e:	4413      	add	r3, r2
 800c850:	623b      	str	r3, [r7, #32]

				FinalRangeEncodedTimeOut =
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);
 800c852:	6a38      	ldr	r0, [r7, #32]
 800c854:	f7ff fdb8 	bl	800c3c8 <VL53L0X_encode_timeout>
 800c858:	4603      	mov	r3, r0
 800c85a:	83fb      	strh	r3, [r7, #30]

				if (Status == VL53L0X_ERROR_NONE) {
 800c85c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c860:	2b00      	cmp	r3, #0
 800c862:	d108      	bne.n	800c876 <set_sequence_step_timeout+0x1c0>
					Status = VL53L0X_WrWord(Dev, 0x71,
 800c864:	8bfb      	ldrh	r3, [r7, #30]
 800c866:	461a      	mov	r2, r3
 800c868:	2171      	movs	r1, #113	; 0x71
 800c86a:	68f8      	ldr	r0, [r7, #12]
 800c86c:	f001 fba0 	bl	800dfb0 <VL53L0X_WrWord>
 800c870:	4603      	mov	r3, r0
 800c872:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 800c876:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d107      	bne.n	800c88e <set_sequence_step_timeout+0x1d8>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	687a      	ldr	r2, [r7, #4]
 800c882:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 800c886:	e002      	b.n	800c88e <set_sequence_step_timeout+0x1d8>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800c888:	23fc      	movs	r3, #252	; 0xfc
 800c88a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	}
	return Status;
 800c88e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800c892:	4618      	mov	r0, r3
 800c894:	3728      	adds	r7, #40	; 0x28
 800c896:	46bd      	mov	sp, r7
 800c898:	bd80      	pop	{r7, pc}

0800c89a <VL53L0X_set_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_set_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 800c89a:	b580      	push	{r7, lr}
 800c89c:	b08a      	sub	sp, #40	; 0x28
 800c89e:	af00      	add	r7, sp, #0
 800c8a0:	6078      	str	r0, [r7, #4]
 800c8a2:	460b      	mov	r3, r1
 800c8a4:	70fb      	strb	r3, [r7, #3]
 800c8a6:	4613      	mov	r3, r2
 800c8a8:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c8aa:	2300      	movs	r3, #0
 800c8ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t vcsel_period_reg;
	uint8_t MinPreVcselPeriodPCLK = 12;
 800c8b0:	230c      	movs	r3, #12
 800c8b2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t MaxPreVcselPeriodPCLK = 18;
 800c8b6:	2312      	movs	r3, #18
 800c8b8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t MinFinalVcselPeriodPCLK = 8;
 800c8bc:	2308      	movs	r3, #8
 800c8be:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t MaxFinalVcselPeriodPCLK = 14;
 800c8c2:	230e      	movs	r3, #14
 800c8c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t MeasurementTimingBudgetMicroSeconds;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t PreRangeTimeoutMicroSeconds;
	uint32_t MsrcTimeoutMicroSeconds;
	uint8_t PhaseCalInt = 0;
 800c8c8:	2300      	movs	r3, #0
 800c8ca:	73fb      	strb	r3, [r7, #15]

	/* Check if valid clock period requested */

	if ((VCSELPulsePeriodPCLK % 2) != 0) {
 800c8cc:	78bb      	ldrb	r3, [r7, #2]
 800c8ce:	f003 0301 	and.w	r3, r3, #1
 800c8d2:	b2db      	uxtb	r3, r3
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d003      	beq.n	800c8e0 <VL53L0X_set_vcsel_pulse_period+0x46>
		/* Value must be an even number */
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800c8d8:	23fc      	movs	r3, #252	; 0xfc
 800c8da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c8de:	e020      	b.n	800c922 <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE &&
 800c8e0:	78fb      	ldrb	r3, [r7, #3]
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d10d      	bne.n	800c902 <VL53L0X_set_vcsel_pulse_period+0x68>
 800c8e6:	78ba      	ldrb	r2, [r7, #2]
 800c8e8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c8ec:	429a      	cmp	r2, r3
 800c8ee:	d304      	bcc.n	800c8fa <VL53L0X_set_vcsel_pulse_period+0x60>
		(VCSELPulsePeriodPCLK < MinPreVcselPeriodPCLK ||
 800c8f0:	78ba      	ldrb	r2, [r7, #2]
 800c8f2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800c8f6:	429a      	cmp	r2, r3
 800c8f8:	d903      	bls.n	800c902 <VL53L0X_set_vcsel_pulse_period+0x68>
		VCSELPulsePeriodPCLK > MaxPreVcselPeriodPCLK)) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800c8fa:	23fc      	movs	r3, #252	; 0xfc
 800c8fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c900:	e00f      	b.n	800c922 <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE &&
 800c902:	78fb      	ldrb	r3, [r7, #3]
 800c904:	2b01      	cmp	r3, #1
 800c906:	d10c      	bne.n	800c922 <VL53L0X_set_vcsel_pulse_period+0x88>
 800c908:	78ba      	ldrb	r2, [r7, #2]
 800c90a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c90e:	429a      	cmp	r2, r3
 800c910:	d304      	bcc.n	800c91c <VL53L0X_set_vcsel_pulse_period+0x82>
		(VCSELPulsePeriodPCLK < MinFinalVcselPeriodPCLK ||
 800c912:	78ba      	ldrb	r2, [r7, #2]
 800c914:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c918:	429a      	cmp	r2, r3
 800c91a:	d902      	bls.n	800c922 <VL53L0X_set_vcsel_pulse_period+0x88>
		 VCSELPulsePeriodPCLK > MaxFinalVcselPeriodPCLK)) {

		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800c91c:	23fc      	movs	r3, #252	; 0xfc
 800c91e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Apply specific settings for the requested clock period */

	if (Status != VL53L0X_ERROR_NONE)
 800c922:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c926:	2b00      	cmp	r3, #0
 800c928:	d002      	beq.n	800c930 <VL53L0X_set_vcsel_pulse_period+0x96>
		return Status;
 800c92a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c92e:	e239      	b.n	800cda4 <VL53L0X_set_vcsel_pulse_period+0x50a>


	if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE) {
 800c930:	78fb      	ldrb	r3, [r7, #3]
 800c932:	2b00      	cmp	r3, #0
 800c934:	d150      	bne.n	800c9d8 <VL53L0X_set_vcsel_pulse_period+0x13e>

		/* Set phase check limits */
		if (VCSELPulsePeriodPCLK == 12) {
 800c936:	78bb      	ldrb	r3, [r7, #2]
 800c938:	2b0c      	cmp	r3, #12
 800c93a:	d110      	bne.n	800c95e <VL53L0X_set_vcsel_pulse_period+0xc4>

			Status = VL53L0X_WrByte(Dev,
 800c93c:	2218      	movs	r2, #24
 800c93e:	2157      	movs	r1, #87	; 0x57
 800c940:	6878      	ldr	r0, [r7, #4]
 800c942:	f001 fb11 	bl	800df68 <VL53L0X_WrByte>
 800c946:	4603      	mov	r3, r0
 800c948:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x18);
			Status = VL53L0X_WrByte(Dev,
 800c94c:	2208      	movs	r2, #8
 800c94e:	2156      	movs	r1, #86	; 0x56
 800c950:	6878      	ldr	r0, [r7, #4]
 800c952:	f001 fb09 	bl	800df68 <VL53L0X_WrByte>
 800c956:	4603      	mov	r3, r0
 800c958:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c95c:	e17f      	b.n	800cc5e <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 14) {
 800c95e:	78bb      	ldrb	r3, [r7, #2]
 800c960:	2b0e      	cmp	r3, #14
 800c962:	d110      	bne.n	800c986 <VL53L0X_set_vcsel_pulse_period+0xec>

			Status = VL53L0X_WrByte(Dev,
 800c964:	2230      	movs	r2, #48	; 0x30
 800c966:	2157      	movs	r1, #87	; 0x57
 800c968:	6878      	ldr	r0, [r7, #4]
 800c96a:	f001 fafd 	bl	800df68 <VL53L0X_WrByte>
 800c96e:	4603      	mov	r3, r0
 800c970:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x30);
			Status = VL53L0X_WrByte(Dev,
 800c974:	2208      	movs	r2, #8
 800c976:	2156      	movs	r1, #86	; 0x56
 800c978:	6878      	ldr	r0, [r7, #4]
 800c97a:	f001 faf5 	bl	800df68 <VL53L0X_WrByte>
 800c97e:	4603      	mov	r3, r0
 800c980:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c984:	e16b      	b.n	800cc5e <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 16) {
 800c986:	78bb      	ldrb	r3, [r7, #2]
 800c988:	2b10      	cmp	r3, #16
 800c98a:	d110      	bne.n	800c9ae <VL53L0X_set_vcsel_pulse_period+0x114>

			Status = VL53L0X_WrByte(Dev,
 800c98c:	2240      	movs	r2, #64	; 0x40
 800c98e:	2157      	movs	r1, #87	; 0x57
 800c990:	6878      	ldr	r0, [r7, #4]
 800c992:	f001 fae9 	bl	800df68 <VL53L0X_WrByte>
 800c996:	4603      	mov	r3, r0
 800c998:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x40);
			Status = VL53L0X_WrByte(Dev,
 800c99c:	2208      	movs	r2, #8
 800c99e:	2156      	movs	r1, #86	; 0x56
 800c9a0:	6878      	ldr	r0, [r7, #4]
 800c9a2:	f001 fae1 	bl	800df68 <VL53L0X_WrByte>
 800c9a6:	4603      	mov	r3, r0
 800c9a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c9ac:	e157      	b.n	800cc5e <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 18) {
 800c9ae:	78bb      	ldrb	r3, [r7, #2]
 800c9b0:	2b12      	cmp	r3, #18
 800c9b2:	f040 8154 	bne.w	800cc5e <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 800c9b6:	2250      	movs	r2, #80	; 0x50
 800c9b8:	2157      	movs	r1, #87	; 0x57
 800c9ba:	6878      	ldr	r0, [r7, #4]
 800c9bc:	f001 fad4 	bl	800df68 <VL53L0X_WrByte>
 800c9c0:	4603      	mov	r3, r0
 800c9c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x50);
			Status = VL53L0X_WrByte(Dev,
 800c9c6:	2208      	movs	r2, #8
 800c9c8:	2156      	movs	r1, #86	; 0x56
 800c9ca:	6878      	ldr	r0, [r7, #4]
 800c9cc:	f001 facc 	bl	800df68 <VL53L0X_WrByte>
 800c9d0:	4603      	mov	r3, r0
 800c9d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c9d6:	e142      	b.n	800cc5e <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		}
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE) {
 800c9d8:	78fb      	ldrb	r3, [r7, #3]
 800c9da:	2b01      	cmp	r3, #1
 800c9dc:	f040 813f 	bne.w	800cc5e <VL53L0X_set_vcsel_pulse_period+0x3c4>

		if (VCSELPulsePeriodPCLK == 8) {
 800c9e0:	78bb      	ldrb	r3, [r7, #2]
 800c9e2:	2b08      	cmp	r3, #8
 800c9e4:	d14c      	bne.n	800ca80 <VL53L0X_set_vcsel_pulse_period+0x1e6>

			Status = VL53L0X_WrByte(Dev,
 800c9e6:	2210      	movs	r2, #16
 800c9e8:	2148      	movs	r1, #72	; 0x48
 800c9ea:	6878      	ldr	r0, [r7, #4]
 800c9ec:	f001 fabc 	bl	800df68 <VL53L0X_WrByte>
 800c9f0:	4603      	mov	r3, r0
 800c9f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x10);
			Status = VL53L0X_WrByte(Dev,
 800c9f6:	2208      	movs	r2, #8
 800c9f8:	2147      	movs	r1, #71	; 0x47
 800c9fa:	6878      	ldr	r0, [r7, #4]
 800c9fc:	f001 fab4 	bl	800df68 <VL53L0X_WrByte>
 800ca00:	4603      	mov	r3, r0
 800ca02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800ca06:	2202      	movs	r2, #2
 800ca08:	2132      	movs	r1, #50	; 0x32
 800ca0a:	6878      	ldr	r0, [r7, #4]
 800ca0c:	f001 faac 	bl	800df68 <VL53L0X_WrByte>
 800ca10:	4603      	mov	r3, r0
 800ca12:	461a      	mov	r2, r3
 800ca14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ca18:	4313      	orrs	r3, r2
 800ca1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x02);
			Status |= VL53L0X_WrByte(Dev,
 800ca1e:	220c      	movs	r2, #12
 800ca20:	2130      	movs	r1, #48	; 0x30
 800ca22:	6878      	ldr	r0, [r7, #4]
 800ca24:	f001 faa0 	bl	800df68 <VL53L0X_WrByte>
 800ca28:	4603      	mov	r3, r0
 800ca2a:	461a      	mov	r2, r3
 800ca2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ca30:	4313      	orrs	r3, r2
 800ca32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x0C);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800ca36:	2201      	movs	r2, #1
 800ca38:	21ff      	movs	r1, #255	; 0xff
 800ca3a:	6878      	ldr	r0, [r7, #4]
 800ca3c:	f001 fa94 	bl	800df68 <VL53L0X_WrByte>
 800ca40:	4603      	mov	r3, r0
 800ca42:	461a      	mov	r2, r3
 800ca44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ca48:	4313      	orrs	r3, r2
 800ca4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800ca4e:	2230      	movs	r2, #48	; 0x30
 800ca50:	2130      	movs	r1, #48	; 0x30
 800ca52:	6878      	ldr	r0, [r7, #4]
 800ca54:	f001 fa88 	bl	800df68 <VL53L0X_WrByte>
 800ca58:	4603      	mov	r3, r0
 800ca5a:	461a      	mov	r2, r3
 800ca5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ca60:	4313      	orrs	r3, r2
 800ca62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x30);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800ca66:	2200      	movs	r2, #0
 800ca68:	21ff      	movs	r1, #255	; 0xff
 800ca6a:	6878      	ldr	r0, [r7, #4]
 800ca6c:	f001 fa7c 	bl	800df68 <VL53L0X_WrByte>
 800ca70:	4603      	mov	r3, r0
 800ca72:	461a      	mov	r2, r3
 800ca74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ca78:	4313      	orrs	r3, r2
 800ca7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ca7e:	e0ee      	b.n	800cc5e <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 10) {
 800ca80:	78bb      	ldrb	r3, [r7, #2]
 800ca82:	2b0a      	cmp	r3, #10
 800ca84:	d14c      	bne.n	800cb20 <VL53L0X_set_vcsel_pulse_period+0x286>

			Status = VL53L0X_WrByte(Dev,
 800ca86:	2228      	movs	r2, #40	; 0x28
 800ca88:	2148      	movs	r1, #72	; 0x48
 800ca8a:	6878      	ldr	r0, [r7, #4]
 800ca8c:	f001 fa6c 	bl	800df68 <VL53L0X_WrByte>
 800ca90:	4603      	mov	r3, r0
 800ca92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x28);
			Status = VL53L0X_WrByte(Dev,
 800ca96:	2208      	movs	r2, #8
 800ca98:	2147      	movs	r1, #71	; 0x47
 800ca9a:	6878      	ldr	r0, [r7, #4]
 800ca9c:	f001 fa64 	bl	800df68 <VL53L0X_WrByte>
 800caa0:	4603      	mov	r3, r0
 800caa2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800caa6:	2203      	movs	r2, #3
 800caa8:	2132      	movs	r1, #50	; 0x32
 800caaa:	6878      	ldr	r0, [r7, #4]
 800caac:	f001 fa5c 	bl	800df68 <VL53L0X_WrByte>
 800cab0:	4603      	mov	r3, r0
 800cab2:	461a      	mov	r2, r3
 800cab4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cab8:	4313      	orrs	r3, r2
 800caba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800cabe:	2209      	movs	r2, #9
 800cac0:	2130      	movs	r1, #48	; 0x30
 800cac2:	6878      	ldr	r0, [r7, #4]
 800cac4:	f001 fa50 	bl	800df68 <VL53L0X_WrByte>
 800cac8:	4603      	mov	r3, r0
 800caca:	461a      	mov	r2, r3
 800cacc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cad0:	4313      	orrs	r3, r2
 800cad2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x09);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800cad6:	2201      	movs	r2, #1
 800cad8:	21ff      	movs	r1, #255	; 0xff
 800cada:	6878      	ldr	r0, [r7, #4]
 800cadc:	f001 fa44 	bl	800df68 <VL53L0X_WrByte>
 800cae0:	4603      	mov	r3, r0
 800cae2:	461a      	mov	r2, r3
 800cae4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cae8:	4313      	orrs	r3, r2
 800caea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800caee:	2220      	movs	r2, #32
 800caf0:	2130      	movs	r1, #48	; 0x30
 800caf2:	6878      	ldr	r0, [r7, #4]
 800caf4:	f001 fa38 	bl	800df68 <VL53L0X_WrByte>
 800caf8:	4603      	mov	r3, r0
 800cafa:	461a      	mov	r2, r3
 800cafc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cb00:	4313      	orrs	r3, r2
 800cb02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800cb06:	2200      	movs	r2, #0
 800cb08:	21ff      	movs	r1, #255	; 0xff
 800cb0a:	6878      	ldr	r0, [r7, #4]
 800cb0c:	f001 fa2c 	bl	800df68 <VL53L0X_WrByte>
 800cb10:	4603      	mov	r3, r0
 800cb12:	461a      	mov	r2, r3
 800cb14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cb18:	4313      	orrs	r3, r2
 800cb1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cb1e:	e09e      	b.n	800cc5e <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 12) {
 800cb20:	78bb      	ldrb	r3, [r7, #2]
 800cb22:	2b0c      	cmp	r3, #12
 800cb24:	d14c      	bne.n	800cbc0 <VL53L0X_set_vcsel_pulse_period+0x326>

			Status = VL53L0X_WrByte(Dev,
 800cb26:	2238      	movs	r2, #56	; 0x38
 800cb28:	2148      	movs	r1, #72	; 0x48
 800cb2a:	6878      	ldr	r0, [r7, #4]
 800cb2c:	f001 fa1c 	bl	800df68 <VL53L0X_WrByte>
 800cb30:	4603      	mov	r3, r0
 800cb32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x38);
			Status = VL53L0X_WrByte(Dev,
 800cb36:	2208      	movs	r2, #8
 800cb38:	2147      	movs	r1, #71	; 0x47
 800cb3a:	6878      	ldr	r0, [r7, #4]
 800cb3c:	f001 fa14 	bl	800df68 <VL53L0X_WrByte>
 800cb40:	4603      	mov	r3, r0
 800cb42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800cb46:	2203      	movs	r2, #3
 800cb48:	2132      	movs	r1, #50	; 0x32
 800cb4a:	6878      	ldr	r0, [r7, #4]
 800cb4c:	f001 fa0c 	bl	800df68 <VL53L0X_WrByte>
 800cb50:	4603      	mov	r3, r0
 800cb52:	461a      	mov	r2, r3
 800cb54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cb58:	4313      	orrs	r3, r2
 800cb5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800cb5e:	2208      	movs	r2, #8
 800cb60:	2130      	movs	r1, #48	; 0x30
 800cb62:	6878      	ldr	r0, [r7, #4]
 800cb64:	f001 fa00 	bl	800df68 <VL53L0X_WrByte>
 800cb68:	4603      	mov	r3, r0
 800cb6a:	461a      	mov	r2, r3
 800cb6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cb70:	4313      	orrs	r3, r2
 800cb72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x08);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800cb76:	2201      	movs	r2, #1
 800cb78:	21ff      	movs	r1, #255	; 0xff
 800cb7a:	6878      	ldr	r0, [r7, #4]
 800cb7c:	f001 f9f4 	bl	800df68 <VL53L0X_WrByte>
 800cb80:	4603      	mov	r3, r0
 800cb82:	461a      	mov	r2, r3
 800cb84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cb88:	4313      	orrs	r3, r2
 800cb8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800cb8e:	2220      	movs	r2, #32
 800cb90:	2130      	movs	r1, #48	; 0x30
 800cb92:	6878      	ldr	r0, [r7, #4]
 800cb94:	f001 f9e8 	bl	800df68 <VL53L0X_WrByte>
 800cb98:	4603      	mov	r3, r0
 800cb9a:	461a      	mov	r2, r3
 800cb9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cba0:	4313      	orrs	r3, r2
 800cba2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800cba6:	2200      	movs	r2, #0
 800cba8:	21ff      	movs	r1, #255	; 0xff
 800cbaa:	6878      	ldr	r0, [r7, #4]
 800cbac:	f001 f9dc 	bl	800df68 <VL53L0X_WrByte>
 800cbb0:	4603      	mov	r3, r0
 800cbb2:	461a      	mov	r2, r3
 800cbb4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cbb8:	4313      	orrs	r3, r2
 800cbba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cbbe:	e04e      	b.n	800cc5e <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 14) {
 800cbc0:	78bb      	ldrb	r3, [r7, #2]
 800cbc2:	2b0e      	cmp	r3, #14
 800cbc4:	d14b      	bne.n	800cc5e <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 800cbc6:	2248      	movs	r2, #72	; 0x48
 800cbc8:	2148      	movs	r1, #72	; 0x48
 800cbca:	6878      	ldr	r0, [r7, #4]
 800cbcc:	f001 f9cc 	bl	800df68 <VL53L0X_WrByte>
 800cbd0:	4603      	mov	r3, r0
 800cbd2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x048);
			Status = VL53L0X_WrByte(Dev,
 800cbd6:	2208      	movs	r2, #8
 800cbd8:	2147      	movs	r1, #71	; 0x47
 800cbda:	6878      	ldr	r0, [r7, #4]
 800cbdc:	f001 f9c4 	bl	800df68 <VL53L0X_WrByte>
 800cbe0:	4603      	mov	r3, r0
 800cbe2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800cbe6:	2203      	movs	r2, #3
 800cbe8:	2132      	movs	r1, #50	; 0x32
 800cbea:	6878      	ldr	r0, [r7, #4]
 800cbec:	f001 f9bc 	bl	800df68 <VL53L0X_WrByte>
 800cbf0:	4603      	mov	r3, r0
 800cbf2:	461a      	mov	r2, r3
 800cbf4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cbf8:	4313      	orrs	r3, r2
 800cbfa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800cbfe:	2207      	movs	r2, #7
 800cc00:	2130      	movs	r1, #48	; 0x30
 800cc02:	6878      	ldr	r0, [r7, #4]
 800cc04:	f001 f9b0 	bl	800df68 <VL53L0X_WrByte>
 800cc08:	4603      	mov	r3, r0
 800cc0a:	461a      	mov	r2, r3
 800cc0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cc10:	4313      	orrs	r3, r2
 800cc12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x07);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800cc16:	2201      	movs	r2, #1
 800cc18:	21ff      	movs	r1, #255	; 0xff
 800cc1a:	6878      	ldr	r0, [r7, #4]
 800cc1c:	f001 f9a4 	bl	800df68 <VL53L0X_WrByte>
 800cc20:	4603      	mov	r3, r0
 800cc22:	461a      	mov	r2, r3
 800cc24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cc28:	4313      	orrs	r3, r2
 800cc2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800cc2e:	2220      	movs	r2, #32
 800cc30:	2130      	movs	r1, #48	; 0x30
 800cc32:	6878      	ldr	r0, [r7, #4]
 800cc34:	f001 f998 	bl	800df68 <VL53L0X_WrByte>
 800cc38:	4603      	mov	r3, r0
 800cc3a:	461a      	mov	r2, r3
 800cc3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cc40:	4313      	orrs	r3, r2
 800cc42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800cc46:	2200      	movs	r2, #0
 800cc48:	21ff      	movs	r1, #255	; 0xff
 800cc4a:	6878      	ldr	r0, [r7, #4]
 800cc4c:	f001 f98c 	bl	800df68 <VL53L0X_WrByte>
 800cc50:	4603      	mov	r3, r0
 800cc52:	461a      	mov	r2, r3
 800cc54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cc58:	4313      	orrs	r3, r2
 800cc5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}


	/* Re-calculate and apply timeouts, in macro periods */

	if (Status == VL53L0X_ERROR_NONE) {
 800cc5e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d17f      	bne.n	800cd66 <VL53L0X_set_vcsel_pulse_period+0x4cc>
		vcsel_period_reg = VL53L0X_encode_vcsel_period((uint8_t)
 800cc66:	78bb      	ldrb	r3, [r7, #2]
 800cc68:	4618      	mov	r0, r3
 800cc6a:	f7fe fe38 	bl	800b8de <VL53L0X_encode_vcsel_period>
 800cc6e:	4603      	mov	r3, r0
 800cc70:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		* using the new VCSEL period.
		*
		* For the MSRC timeout, the same applies - this timeout being
		* dependant on the pre-range vcsel period.
		*/
		switch (VcselPeriodType) {
 800cc74:	78fb      	ldrb	r3, [r7, #3]
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d002      	beq.n	800cc80 <VL53L0X_set_vcsel_pulse_period+0x3e6>
 800cc7a:	2b01      	cmp	r3, #1
 800cc7c:	d045      	beq.n	800cd0a <VL53L0X_set_vcsel_pulse_period+0x470>
 800cc7e:	e06e      	b.n	800cd5e <VL53L0X_set_vcsel_pulse_period+0x4c4>
		case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
			Status = get_sequence_step_timeout(Dev,
 800cc80:	f107 0314 	add.w	r3, r7, #20
 800cc84:	461a      	mov	r2, r3
 800cc86:	2103      	movs	r1, #3
 800cc88:	6878      	ldr	r0, [r7, #4]
 800cc8a:	f7ff fc33 	bl	800c4f4 <get_sequence_step_timeout>
 800cc8e:	4603      	mov	r3, r0
 800cc90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800cc94:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d109      	bne.n	800ccb0 <VL53L0X_set_vcsel_pulse_period+0x416>
				Status = get_sequence_step_timeout(Dev,
 800cc9c:	f107 0310 	add.w	r3, r7, #16
 800cca0:	461a      	mov	r2, r3
 800cca2:	2102      	movs	r1, #2
 800cca4:	6878      	ldr	r0, [r7, #4]
 800cca6:	f7ff fc25 	bl	800c4f4 <get_sequence_step_timeout>
 800ccaa:	4603      	mov	r3, r0
 800ccac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					&MsrcTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800ccb0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d109      	bne.n	800cccc <VL53L0X_set_vcsel_pulse_period+0x432>
				Status = VL53L0X_WrByte(Dev,
 800ccb8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800ccbc:	461a      	mov	r2, r3
 800ccbe:	2150      	movs	r1, #80	; 0x50
 800ccc0:	6878      	ldr	r0, [r7, #4]
 800ccc2:	f001 f951 	bl	800df68 <VL53L0X_WrByte>
 800ccc6:	4603      	mov	r3, r0
 800ccc8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 800cccc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d108      	bne.n	800cce6 <VL53L0X_set_vcsel_pulse_period+0x44c>
				Status = set_sequence_step_timeout(Dev,
 800ccd4:	697b      	ldr	r3, [r7, #20]
 800ccd6:	461a      	mov	r2, r3
 800ccd8:	2103      	movs	r1, #3
 800ccda:	6878      	ldr	r0, [r7, #4]
 800ccdc:	f7ff fceb 	bl	800c6b6 <set_sequence_step_timeout>
 800cce0:	4603      	mov	r3, r0
 800cce2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_PRE_RANGE,
					PreRangeTimeoutMicroSeconds);


			if (Status == VL53L0X_ERROR_NONE)
 800cce6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d108      	bne.n	800cd00 <VL53L0X_set_vcsel_pulse_period+0x466>
				Status = set_sequence_step_timeout(Dev,
 800ccee:	693b      	ldr	r3, [r7, #16]
 800ccf0:	461a      	mov	r2, r3
 800ccf2:	2102      	movs	r1, #2
 800ccf4:	6878      	ldr	r0, [r7, #4]
 800ccf6:	f7ff fcde 	bl	800c6b6 <set_sequence_step_timeout>
 800ccfa:	4603      	mov	r3, r0
 800ccfc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					MsrcTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	78ba      	ldrb	r2, [r7, #2]
 800cd04:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				Dev,
				PreRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 800cd08:	e02e      	b.n	800cd68 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
			Status = get_sequence_step_timeout(Dev,
 800cd0a:	f107 0318 	add.w	r3, r7, #24
 800cd0e:	461a      	mov	r2, r3
 800cd10:	2104      	movs	r1, #4
 800cd12:	6878      	ldr	r0, [r7, #4]
 800cd14:	f7ff fbee 	bl	800c4f4 <get_sequence_step_timeout>
 800cd18:	4603      	mov	r3, r0
 800cd1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_FINAL_RANGE,
				&FinalRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800cd1e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	d109      	bne.n	800cd3a <VL53L0X_set_vcsel_pulse_period+0x4a0>
				Status = VL53L0X_WrByte(Dev,
 800cd26:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800cd2a:	461a      	mov	r2, r3
 800cd2c:	2170      	movs	r1, #112	; 0x70
 800cd2e:	6878      	ldr	r0, [r7, #4]
 800cd30:	f001 f91a 	bl	800df68 <VL53L0X_WrByte>
 800cd34:	4603      	mov	r3, r0
 800cd36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 800cd3a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d108      	bne.n	800cd54 <VL53L0X_set_vcsel_pulse_period+0x4ba>
				Status = set_sequence_step_timeout(Dev,
 800cd42:	69bb      	ldr	r3, [r7, #24]
 800cd44:	461a      	mov	r2, r3
 800cd46:	2104      	movs	r1, #4
 800cd48:	6878      	ldr	r0, [r7, #4]
 800cd4a:	f7ff fcb4 	bl	800c6b6 <set_sequence_step_timeout>
 800cd4e:	4603      	mov	r3, r0
 800cd50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					FinalRangeTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	78ba      	ldrb	r2, [r7, #2]
 800cd58:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				Dev,
				FinalRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 800cd5c:	e004      	b.n	800cd68 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800cd5e:	23fc      	movs	r3, #252	; 0xfc
 800cd60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cd64:	e000      	b.n	800cd68 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		}
	}
 800cd66:	bf00      	nop

	/* Finally, the timing budget must be re-applied */
	if (Status == VL53L0X_ERROR_NONE) {
 800cd68:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d109      	bne.n	800cd84 <VL53L0X_set_vcsel_pulse_period+0x4ea>
		VL53L0X_GETPARAMETERFIELD(Dev,
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	695b      	ldr	r3, [r3, #20]
 800cd74:	61fb      	str	r3, [r7, #28]
			MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);

		Status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 800cd76:	69f9      	ldr	r1, [r7, #28]
 800cd78:	6878      	ldr	r0, [r7, #4]
 800cd7a:	f7fc fded 	bl	8009958 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 800cd7e:	4603      	mov	r3, r0
 800cd80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Perform the phase calibration. This is needed after changing on
	 * vcsel period.
	 * get_data_enable = 0, restore_config = 1 */
	if (Status == VL53L0X_ERROR_NONE)
 800cd84:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d109      	bne.n	800cda0 <VL53L0X_set_vcsel_pulse_period+0x506>
		Status = VL53L0X_perform_phase_calibration(
 800cd8c:	f107 010f 	add.w	r1, r7, #15
 800cd90:	2301      	movs	r3, #1
 800cd92:	2200      	movs	r2, #0
 800cd94:	6878      	ldr	r0, [r7, #4]
 800cd96:	f7fe fcbd 	bl	800b714 <VL53L0X_perform_phase_calibration>
 800cd9a:	4603      	mov	r3, r0
 800cd9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Dev, &PhaseCalInt, 0, 1);

	return Status;
 800cda0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800cda4:	4618      	mov	r0, r3
 800cda6:	3728      	adds	r7, #40	; 0x28
 800cda8:	46bd      	mov	sp, r7
 800cdaa:	bd80      	pop	{r7, pc}

0800cdac <VL53L0X_get_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 800cdac:	b580      	push	{r7, lr}
 800cdae:	b086      	sub	sp, #24
 800cdb0:	af00      	add	r7, sp, #0
 800cdb2:	60f8      	str	r0, [r7, #12]
 800cdb4:	460b      	mov	r3, r1
 800cdb6:	607a      	str	r2, [r7, #4]
 800cdb8:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800cdba:	2300      	movs	r3, #0
 800cdbc:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 800cdbe:	7afb      	ldrb	r3, [r7, #11]
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d002      	beq.n	800cdca <VL53L0X_get_vcsel_pulse_period+0x1e>
 800cdc4:	2b01      	cmp	r3, #1
 800cdc6:	d00a      	beq.n	800cdde <VL53L0X_get_vcsel_pulse_period+0x32>
 800cdc8:	e013      	b.n	800cdf2 <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800cdca:	f107 0316 	add.w	r3, r7, #22
 800cdce:	461a      	mov	r2, r3
 800cdd0:	2150      	movs	r1, #80	; 0x50
 800cdd2:	68f8      	ldr	r0, [r7, #12]
 800cdd4:	f001 f94a 	bl	800e06c <VL53L0X_RdByte>
 800cdd8:	4603      	mov	r3, r0
 800cdda:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800cddc:	e00b      	b.n	800cdf6 <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800cdde:	f107 0316 	add.w	r3, r7, #22
 800cde2:	461a      	mov	r2, r3
 800cde4:	2170      	movs	r1, #112	; 0x70
 800cde6:	68f8      	ldr	r0, [r7, #12]
 800cde8:	f001 f940 	bl	800e06c <VL53L0X_RdByte>
 800cdec:	4603      	mov	r3, r0
 800cdee:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800cdf0:	e001      	b.n	800cdf6 <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800cdf2:	23fc      	movs	r3, #252	; 0xfc
 800cdf4:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 800cdf6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d107      	bne.n	800ce0e <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 800cdfe:	7dbb      	ldrb	r3, [r7, #22]
 800ce00:	4618      	mov	r0, r3
 800ce02:	f7fe fd59 	bl	800b8b8 <VL53L0X_decode_vcsel_period>
 800ce06:	4603      	mov	r3, r0
 800ce08:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	701a      	strb	r2, [r3, #0]

	return Status;
 800ce0e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ce12:	4618      	mov	r0, r3
 800ce14:	3718      	adds	r7, #24
 800ce16:	46bd      	mov	sp, r7
 800ce18:	bd80      	pop	{r7, pc}

0800ce1a <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 800ce1a:	b580      	push	{r7, lr}
 800ce1c:	b092      	sub	sp, #72	; 0x48
 800ce1e:	af00      	add	r7, sp, #0
 800ce20:	6078      	str	r0, [r7, #4]
 800ce22:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ce24:	2300      	movs	r3, #0
 800ce26:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800ce2a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800ce2e:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800ce30:	f240 7376 	movw	r3, #1910	; 0x776
 800ce34:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t EndOverheadMicroSeconds		= 960;
 800ce36:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800ce3a:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800ce3c:	f44f 7325 	mov.w	r3, #660	; 0x294
 800ce40:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t TccOverheadMicroSeconds		= 590;
 800ce42:	f240 234e 	movw	r3, #590	; 0x24e
 800ce46:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t DssOverheadMicroSeconds		= 690;
 800ce48:	f240 23b2 	movw	r3, #690	; 0x2b2
 800ce4c:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800ce4e:	f44f 7325 	mov.w	r3, #660	; 0x294
 800ce52:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800ce54:	f240 2326 	movw	r3, #550	; 0x226
 800ce58:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800ce5a:	2300      	movs	r3, #0
 800ce5c:	60fb      	str	r3, [r7, #12]
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
 800ce5e:	f644 6320 	movw	r3, #20000	; 0x4e20
 800ce62:	623b      	str	r3, [r7, #32]
	uint32_t SubTimeout = 0;
 800ce64:	2300      	movs	r3, #0
 800ce66:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
 800ce68:	683a      	ldr	r2, [r7, #0]
 800ce6a:	6a3b      	ldr	r3, [r7, #32]
 800ce6c:	429a      	cmp	r2, r3
 800ce6e:	d205      	bcs.n	800ce7c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x62>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ce70:	23fc      	movs	r3, #252	; 0xfc
 800ce72:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		return Status;
 800ce76:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800ce7a:	e0aa      	b.n	800cfd2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 800ce7c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ce7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce80:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 800ce82:	683a      	ldr	r2, [r7, #0]
 800ce84:	1ad3      	subs	r3, r2, r3
 800ce86:	643b      	str	r3, [r7, #64]	; 0x40

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800ce88:	f107 0314 	add.w	r3, r7, #20
 800ce8c:	4619      	mov	r1, r3
 800ce8e:	6878      	ldr	r0, [r7, #4]
 800ce90:	f7fc feac 	bl	8009bec <VL53L0X_GetSequenceStepEnables>
 800ce94:	4603      	mov	r3, r0
 800ce96:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	if (Status == VL53L0X_ERROR_NONE &&
 800ce9a:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d15b      	bne.n	800cf5a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
		(SchedulerSequenceSteps.TccOn  ||
 800cea2:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d105      	bne.n	800ceb4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.MsrcOn ||
 800cea8:	7d7b      	ldrb	r3, [r7, #21]
		(SchedulerSequenceSteps.TccOn  ||
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d102      	bne.n	800ceb4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.DssOn)) {
 800ceae:	7dbb      	ldrb	r3, [r7, #22]
		SchedulerSequenceSteps.MsrcOn ||
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d052      	beq.n	800cf5a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 800ceb4:	f107 0310 	add.w	r3, r7, #16
 800ceb8:	461a      	mov	r2, r3
 800ceba:	2102      	movs	r1, #2
 800cebc:	6878      	ldr	r0, [r7, #4]
 800cebe:	f7ff fb19 	bl	800c4f4 <get_sequence_step_timeout>
 800cec2:	4603      	mov	r3, r0
 800cec4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					&MsrcDccTccTimeoutMicroSeconds);

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled. */

		if (Status != VL53L0X_ERROR_NONE)
 800cec8:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d002      	beq.n	800ced6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbc>
			return Status;
 800ced0:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800ced4:	e07d      	b.n	800cfd2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 800ced6:	7d3b      	ldrb	r3, [r7, #20]
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d00f      	beq.n	800cefc <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 800cedc:	693b      	ldr	r3, [r7, #16]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 800cede:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cee0:	4413      	add	r3, r2
 800cee2:	61fb      	str	r3, [r7, #28]

			if (SubTimeout <
 800cee4:	69fa      	ldr	r2, [r7, #28]
 800cee6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cee8:	429a      	cmp	r2, r3
 800ceea:	d204      	bcs.n	800cef6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xdc>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 800ceec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ceee:	69fb      	ldr	r3, [r7, #28]
 800cef0:	1ad3      	subs	r3, r2, r3
 800cef2:	643b      	str	r3, [r7, #64]	; 0x40
 800cef4:	e002      	b.n	800cefc <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800cef6:	23fc      	movs	r3, #252	; 0xfc
 800cef8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 800cefc:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d002      	beq.n	800cf0a <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf0>
			LOG_FUNCTION_END(Status);
			return Status;
 800cf04:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800cf08:	e063      	b.n	800cfd2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 800cf0a:	7dbb      	ldrb	r3, [r7, #22]
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d011      	beq.n	800cf34 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x11a>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 800cf10:	693a      	ldr	r2, [r7, #16]
 800cf12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf14:	4413      	add	r3, r2
 800cf16:	005b      	lsls	r3, r3, #1
 800cf18:	61fb      	str	r3, [r7, #28]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800cf1a:	69fa      	ldr	r2, [r7, #28]
 800cf1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cf1e:	429a      	cmp	r2, r3
 800cf20:	d204      	bcs.n	800cf2c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x112>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800cf22:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cf24:	69fb      	ldr	r3, [r7, #28]
 800cf26:	1ad3      	subs	r3, r2, r3
 800cf28:	643b      	str	r3, [r7, #64]	; 0x40
 800cf2a:	e016      	b.n	800cf5a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800cf2c:	23fc      	movs	r3, #252	; 0xfc
 800cf2e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800cf32:	e012      	b.n	800cf5a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 800cf34:	7d7b      	ldrb	r3, [r7, #21]
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d00f      	beq.n	800cf5a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 800cf3a:	693b      	ldr	r3, [r7, #16]
 800cf3c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cf3e:	4413      	add	r3, r2
 800cf40:	61fb      	str	r3, [r7, #28]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800cf42:	69fa      	ldr	r2, [r7, #28]
 800cf44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cf46:	429a      	cmp	r2, r3
 800cf48:	d204      	bcs.n	800cf54 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x13a>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800cf4a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cf4c:	69fb      	ldr	r3, [r7, #28]
 800cf4e:	1ad3      	subs	r3, r2, r3
 800cf50:	643b      	str	r3, [r7, #64]	; 0x40
 800cf52:	e002      	b.n	800cf5a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800cf54:	23fc      	movs	r3, #252	; 0xfc
 800cf56:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 800cf5a:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d002      	beq.n	800cf68 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x14e>
		LOG_FUNCTION_END(Status);
		return Status;
 800cf62:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800cf66:	e034      	b.n	800cfd2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 800cf68:	7dfb      	ldrb	r3, [r7, #23]
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d019      	beq.n	800cfa2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 800cf6e:	f107 030c 	add.w	r3, r7, #12
 800cf72:	461a      	mov	r2, r3
 800cf74:	2103      	movs	r1, #3
 800cf76:	6878      	ldr	r0, [r7, #4]
 800cf78:	f7ff fabc 	bl	800c4f4 <get_sequence_step_timeout>
 800cf7c:	4603      	mov	r3, r0
 800cf7e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 800cf82:	68fb      	ldr	r3, [r7, #12]
 800cf84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cf86:	4413      	add	r3, r2
 800cf88:	61fb      	str	r3, [r7, #28]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800cf8a:	69fa      	ldr	r2, [r7, #28]
 800cf8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cf8e:	429a      	cmp	r2, r3
 800cf90:	d204      	bcs.n	800cf9c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x182>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 800cf92:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cf94:	69fb      	ldr	r3, [r7, #28]
 800cf96:	1ad3      	subs	r3, r2, r3
 800cf98:	643b      	str	r3, [r7, #64]	; 0x40
 800cf9a:	e002      	b.n	800cfa2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800cf9c:	23fc      	movs	r3, #252	; 0xfc
 800cf9e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 800cfa2:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d111      	bne.n	800cfce <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>
		SchedulerSequenceSteps.FinalRangeOn) {
 800cfaa:	7e3b      	ldrb	r3, [r7, #24]
	if (Status == VL53L0X_ERROR_NONE &&
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d00e      	beq.n	800cfce <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>

		FinalRangeTimingBudgetMicroSeconds -=
 800cfb0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cfb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfb4:	1ad3      	subs	r3, r2, r3
 800cfb6:	643b      	str	r3, [r7, #64]	; 0x40
		 * budget and the sum of all other timeouts within the sequence.
		 * If there is no room for the final range timeout, then an error
		 * will be set. Otherwise the remaining time will be applied to
		 * the final range.
		 */
		Status = set_sequence_step_timeout(Dev,
 800cfb8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cfba:	2104      	movs	r1, #4
 800cfbc:	6878      	ldr	r0, [r7, #4]
 800cfbe:	f7ff fb7a 	bl	800c6b6 <set_sequence_step_timeout>
 800cfc2:	4603      	mov	r3, r0
 800cfc4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	683a      	ldr	r2, [r7, #0]
 800cfcc:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);

	return Status;
 800cfce:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 800cfd2:	4618      	mov	r0, r3
 800cfd4:	3748      	adds	r7, #72	; 0x48
 800cfd6:	46bd      	mov	sp, r7
 800cfd8:	bd80      	pop	{r7, pc}

0800cfda <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800cfda:	b580      	push	{r7, lr}
 800cfdc:	b090      	sub	sp, #64	; 0x40
 800cfde:	af00      	add	r7, sp, #0
 800cfe0:	6078      	str	r0, [r7, #4]
 800cfe2:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800cfe4:	2300      	movs	r3, #0
 800cfe6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800cfea:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800cfee:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800cff0:	f240 7376 	movw	r3, #1910	; 0x776
 800cff4:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 800cff6:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800cffa:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800cffc:	f44f 7325 	mov.w	r3, #660	; 0x294
 800d000:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 800d002:	f240 234e 	movw	r3, #590	; 0x24e
 800d006:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 800d008:	f240 23b2 	movw	r3, #690	; 0x2b2
 800d00c:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800d00e:	f44f 7325 	mov.w	r3, #660	; 0x294
 800d012:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800d014:	f240 2326 	movw	r3, #550	; 0x226
 800d018:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800d01a:	2300      	movs	r3, #0
 800d01c:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 800d01e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d020:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d022:	441a      	add	r2, r3
 800d024:	683b      	ldr	r3, [r7, #0]
 800d026:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800d028:	f107 0318 	add.w	r3, r7, #24
 800d02c:	4619      	mov	r1, r3
 800d02e:	6878      	ldr	r0, [r7, #4]
 800d030:	f7fc fddc 	bl	8009bec <VL53L0X_GetSequenceStepEnables>
 800d034:	4603      	mov	r3, r0
 800d036:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 800d03a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d002      	beq.n	800d048 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
		LOG_FUNCTION_END(Status);
		return Status;
 800d042:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d046:	e075      	b.n	800d134 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 800d048:	7e3b      	ldrb	r3, [r7, #24]
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d105      	bne.n	800d05a <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 800d04e:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 800d050:	2b00      	cmp	r3, #0
 800d052:	d102      	bne.n	800d05a <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn) {
 800d054:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 800d056:	2b00      	cmp	r3, #0
 800d058:	d030      	beq.n	800d0bc <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

		Status = get_sequence_step_timeout(Dev,
 800d05a:	f107 0310 	add.w	r3, r7, #16
 800d05e:	461a      	mov	r2, r3
 800d060:	2102      	movs	r1, #2
 800d062:	6878      	ldr	r0, [r7, #4]
 800d064:	f7ff fa46 	bl	800c4f4 <get_sequence_step_timeout>
 800d068:	4603      	mov	r3, r0
 800d06a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 800d06e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d072:	2b00      	cmp	r3, #0
 800d074:	d122      	bne.n	800d0bc <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
			if (SchedulerSequenceSteps.TccOn) {
 800d076:	7e3b      	ldrb	r3, [r7, #24]
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d007      	beq.n	800d08c <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800d07c:	683b      	ldr	r3, [r7, #0]
 800d07e:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800d080:	6939      	ldr	r1, [r7, #16]
 800d082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d084:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800d086:	441a      	add	r2, r3
 800d088:	683b      	ldr	r3, [r7, #0]
 800d08a:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 800d08c:	7ebb      	ldrb	r3, [r7, #26]
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d009      	beq.n	800d0a6 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
				*pMeasurementTimingBudgetMicroSeconds +=
 800d092:	683b      	ldr	r3, [r7, #0]
 800d094:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 800d096:	6939      	ldr	r1, [r7, #16]
 800d098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d09a:	440b      	add	r3, r1
 800d09c:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 800d09e:	441a      	add	r2, r3
 800d0a0:	683b      	ldr	r3, [r7, #0]
 800d0a2:	601a      	str	r2, [r3, #0]
 800d0a4:	e00a      	b.n	800d0bc <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 800d0a6:	7e7b      	ldrb	r3, [r7, #25]
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	d007      	beq.n	800d0bc <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800d0ac:	683b      	ldr	r3, [r7, #0]
 800d0ae:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800d0b0:	6939      	ldr	r1, [r7, #16]
 800d0b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0b4:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800d0b6:	441a      	add	r2, r3
 800d0b8:	683b      	ldr	r3, [r7, #0]
 800d0ba:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800d0bc:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d114      	bne.n	800d0ee <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
		if (SchedulerSequenceSteps.PreRangeOn) {
 800d0c4:	7efb      	ldrb	r3, [r7, #27]
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d011      	beq.n	800d0ee <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
			Status = get_sequence_step_timeout(Dev,
 800d0ca:	f107 030c 	add.w	r3, r7, #12
 800d0ce:	461a      	mov	r2, r3
 800d0d0:	2103      	movs	r1, #3
 800d0d2:	6878      	ldr	r0, [r7, #4]
 800d0d4:	f7ff fa0e 	bl	800c4f4 <get_sequence_step_timeout>
 800d0d8:	4603      	mov	r3, r0
 800d0da:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800d0de:	683b      	ldr	r3, [r7, #0]
 800d0e0:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 800d0e2:	68f9      	ldr	r1, [r7, #12]
 800d0e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0e6:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800d0e8:	441a      	add	r2, r3
 800d0ea:	683b      	ldr	r3, [r7, #0]
 800d0ec:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800d0ee:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	d114      	bne.n	800d120 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 800d0f6:	7f3b      	ldrb	r3, [r7, #28]
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d011      	beq.n	800d120 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
			Status = get_sequence_step_timeout(Dev,
 800d0fc:	f107 0314 	add.w	r3, r7, #20
 800d100:	461a      	mov	r2, r3
 800d102:	2104      	movs	r1, #4
 800d104:	6878      	ldr	r0, [r7, #4]
 800d106:	f7ff f9f5 	bl	800c4f4 <get_sequence_step_timeout>
 800d10a:	4603      	mov	r3, r0
 800d10c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800d110:	683b      	ldr	r3, [r7, #0]
 800d112:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 800d114:	6979      	ldr	r1, [r7, #20]
 800d116:	6a3b      	ldr	r3, [r7, #32]
 800d118:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800d11a:	441a      	add	r2, r3
 800d11c:	683b      	ldr	r3, [r7, #0]
 800d11e:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800d120:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d124:	2b00      	cmp	r3, #0
 800d126:	d103      	bne.n	800d130 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
		VL53L0X_SETPARAMETERFIELD(Dev,
 800d128:	683b      	ldr	r3, [r7, #0]
 800d12a:	681a      	ldr	r2, [r3, #0]
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800d130:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800d134:	4618      	mov	r0, r3
 800d136:	3740      	adds	r7, #64	; 0x40
 800d138:	46bd      	mov	sp, r7
 800d13a:	bd80      	pop	{r7, pc}

0800d13c <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 800d13c:	b580      	push	{r7, lr}
 800d13e:	b088      	sub	sp, #32
 800d140:	af00      	add	r7, sp, #0
 800d142:	6078      	str	r0, [r7, #4]
 800d144:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d146:	2300      	movs	r3, #0
 800d148:	77fb      	strb	r3, [r7, #31]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 800d14a:	2300      	movs	r3, #0
 800d14c:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800d14e:	e0c6      	b.n	800d2de <VL53L0X_load_tuning_settings+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 800d150:	697b      	ldr	r3, [r7, #20]
 800d152:	683a      	ldr	r2, [r7, #0]
 800d154:	4413      	add	r3, r2
 800d156:	781b      	ldrb	r3, [r3, #0]
 800d158:	74fb      	strb	r3, [r7, #19]
		Index++;
 800d15a:	697b      	ldr	r3, [r7, #20]
 800d15c:	3301      	adds	r3, #1
 800d15e:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 800d160:	7cfb      	ldrb	r3, [r7, #19]
 800d162:	2bff      	cmp	r3, #255	; 0xff
 800d164:	f040 808d 	bne.w	800d282 <VL53L0X_load_tuning_settings+0x146>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 800d168:	697b      	ldr	r3, [r7, #20]
 800d16a:	683a      	ldr	r2, [r7, #0]
 800d16c:	4413      	add	r3, r2
 800d16e:	781b      	ldrb	r3, [r3, #0]
 800d170:	747b      	strb	r3, [r7, #17]
			Index++;
 800d172:	697b      	ldr	r3, [r7, #20]
 800d174:	3301      	adds	r3, #1
 800d176:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 800d178:	7c7b      	ldrb	r3, [r7, #17]
 800d17a:	2b03      	cmp	r3, #3
 800d17c:	d87e      	bhi.n	800d27c <VL53L0X_load_tuning_settings+0x140>
 800d17e:	a201      	add	r2, pc, #4	; (adr r2, 800d184 <VL53L0X_load_tuning_settings+0x48>)
 800d180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d184:	0800d195 	.word	0x0800d195
 800d188:	0800d1cf 	.word	0x0800d1cf
 800d18c:	0800d209 	.word	0x0800d209
 800d190:	0800d243 	.word	0x0800d243
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800d194:	697b      	ldr	r3, [r7, #20]
 800d196:	683a      	ldr	r2, [r7, #0]
 800d198:	4413      	add	r3, r2
 800d19a:	781b      	ldrb	r3, [r3, #0]
 800d19c:	743b      	strb	r3, [r7, #16]
				Index++;
 800d19e:	697b      	ldr	r3, [r7, #20]
 800d1a0:	3301      	adds	r3, #1
 800d1a2:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800d1a4:	697b      	ldr	r3, [r7, #20]
 800d1a6:	683a      	ldr	r2, [r7, #0]
 800d1a8:	4413      	add	r3, r2
 800d1aa:	781b      	ldrb	r3, [r3, #0]
 800d1ac:	73fb      	strb	r3, [r7, #15]
				Index++;
 800d1ae:	697b      	ldr	r3, [r7, #20]
 800d1b0:	3301      	adds	r3, #1
 800d1b2:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800d1b4:	7c3b      	ldrb	r3, [r7, #16]
 800d1b6:	b29b      	uxth	r3, r3
 800d1b8:	021b      	lsls	r3, r3, #8
 800d1ba:	b29a      	uxth	r2, r3
 800d1bc:	7bfb      	ldrb	r3, [r7, #15]
 800d1be:	b29b      	uxth	r3, r3
 800d1c0:	4413      	add	r3, r2
 800d1c2:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	89ba      	ldrh	r2, [r7, #12]
 800d1c8:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
				break;
 800d1cc:	e087      	b.n	800d2de <VL53L0X_load_tuning_settings+0x1a2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800d1ce:	697b      	ldr	r3, [r7, #20]
 800d1d0:	683a      	ldr	r2, [r7, #0]
 800d1d2:	4413      	add	r3, r2
 800d1d4:	781b      	ldrb	r3, [r3, #0]
 800d1d6:	743b      	strb	r3, [r7, #16]
				Index++;
 800d1d8:	697b      	ldr	r3, [r7, #20]
 800d1da:	3301      	adds	r3, #1
 800d1dc:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800d1de:	697b      	ldr	r3, [r7, #20]
 800d1e0:	683a      	ldr	r2, [r7, #0]
 800d1e2:	4413      	add	r3, r2
 800d1e4:	781b      	ldrb	r3, [r3, #0]
 800d1e6:	73fb      	strb	r3, [r7, #15]
				Index++;
 800d1e8:	697b      	ldr	r3, [r7, #20]
 800d1ea:	3301      	adds	r3, #1
 800d1ec:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800d1ee:	7c3b      	ldrb	r3, [r7, #16]
 800d1f0:	b29b      	uxth	r3, r3
 800d1f2:	021b      	lsls	r3, r3, #8
 800d1f4:	b29a      	uxth	r2, r3
 800d1f6:	7bfb      	ldrb	r3, [r7, #15]
 800d1f8:	b29b      	uxth	r3, r3
 800d1fa:	4413      	add	r3, r2
 800d1fc:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	89ba      	ldrh	r2, [r7, #12]
 800d202:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
					Temp16);
				break;
 800d206:	e06a      	b.n	800d2de <VL53L0X_load_tuning_settings+0x1a2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800d208:	697b      	ldr	r3, [r7, #20]
 800d20a:	683a      	ldr	r2, [r7, #0]
 800d20c:	4413      	add	r3, r2
 800d20e:	781b      	ldrb	r3, [r3, #0]
 800d210:	743b      	strb	r3, [r7, #16]
				Index++;
 800d212:	697b      	ldr	r3, [r7, #20]
 800d214:	3301      	adds	r3, #1
 800d216:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800d218:	697b      	ldr	r3, [r7, #20]
 800d21a:	683a      	ldr	r2, [r7, #0]
 800d21c:	4413      	add	r3, r2
 800d21e:	781b      	ldrb	r3, [r3, #0]
 800d220:	73fb      	strb	r3, [r7, #15]
				Index++;
 800d222:	697b      	ldr	r3, [r7, #20]
 800d224:	3301      	adds	r3, #1
 800d226:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800d228:	7c3b      	ldrb	r3, [r7, #16]
 800d22a:	b29b      	uxth	r3, r3
 800d22c:	021b      	lsls	r3, r3, #8
 800d22e:	b29a      	uxth	r2, r3
 800d230:	7bfb      	ldrb	r3, [r7, #15]
 800d232:	b29b      	uxth	r3, r3
 800d234:	4413      	add	r3, r2
 800d236:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	89ba      	ldrh	r2, [r7, #12]
 800d23c:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
				break;
 800d240:	e04d      	b.n	800d2de <VL53L0X_load_tuning_settings+0x1a2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800d242:	697b      	ldr	r3, [r7, #20]
 800d244:	683a      	ldr	r2, [r7, #0]
 800d246:	4413      	add	r3, r2
 800d248:	781b      	ldrb	r3, [r3, #0]
 800d24a:	743b      	strb	r3, [r7, #16]
				Index++;
 800d24c:	697b      	ldr	r3, [r7, #20]
 800d24e:	3301      	adds	r3, #1
 800d250:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800d252:	697b      	ldr	r3, [r7, #20]
 800d254:	683a      	ldr	r2, [r7, #0]
 800d256:	4413      	add	r3, r2
 800d258:	781b      	ldrb	r3, [r3, #0]
 800d25a:	73fb      	strb	r3, [r7, #15]
				Index++;
 800d25c:	697b      	ldr	r3, [r7, #20]
 800d25e:	3301      	adds	r3, #1
 800d260:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800d262:	7c3b      	ldrb	r3, [r7, #16]
 800d264:	b29b      	uxth	r3, r3
 800d266:	021b      	lsls	r3, r3, #8
 800d268:	b29a      	uxth	r2, r3
 800d26a:	7bfb      	ldrb	r3, [r7, #15]
 800d26c:	b29b      	uxth	r3, r3
 800d26e:	4413      	add	r3, r2
 800d270:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	89ba      	ldrh	r2, [r7, #12]
 800d276:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c
				break;
 800d27a:	e030      	b.n	800d2de <VL53L0X_load_tuning_settings+0x1a2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800d27c:	23fc      	movs	r3, #252	; 0xfc
 800d27e:	77fb      	strb	r3, [r7, #31]
 800d280:	e02d      	b.n	800d2de <VL53L0X_load_tuning_settings+0x1a2>
			}

		} else if (NumberOfWrites <= 4) {
 800d282:	7cfb      	ldrb	r3, [r7, #19]
 800d284:	2b04      	cmp	r3, #4
 800d286:	d828      	bhi.n	800d2da <VL53L0X_load_tuning_settings+0x19e>
			Address = *(pTuningSettingBuffer + Index);
 800d288:	697b      	ldr	r3, [r7, #20]
 800d28a:	683a      	ldr	r2, [r7, #0]
 800d28c:	4413      	add	r3, r2
 800d28e:	781b      	ldrb	r3, [r3, #0]
 800d290:	74bb      	strb	r3, [r7, #18]
			Index++;
 800d292:	697b      	ldr	r3, [r7, #20]
 800d294:	3301      	adds	r3, #1
 800d296:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 800d298:	2300      	movs	r3, #0
 800d29a:	61bb      	str	r3, [r7, #24]
 800d29c:	e00f      	b.n	800d2be <VL53L0X_load_tuning_settings+0x182>
				localBuffer[i] = *(pTuningSettingBuffer +
 800d29e:	697b      	ldr	r3, [r7, #20]
 800d2a0:	683a      	ldr	r2, [r7, #0]
 800d2a2:	4413      	add	r3, r2
 800d2a4:	7819      	ldrb	r1, [r3, #0]
 800d2a6:	f107 0208 	add.w	r2, r7, #8
 800d2aa:	69bb      	ldr	r3, [r7, #24]
 800d2ac:	4413      	add	r3, r2
 800d2ae:	460a      	mov	r2, r1
 800d2b0:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 800d2b2:	697b      	ldr	r3, [r7, #20]
 800d2b4:	3301      	adds	r3, #1
 800d2b6:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 800d2b8:	69bb      	ldr	r3, [r7, #24]
 800d2ba:	3301      	adds	r3, #1
 800d2bc:	61bb      	str	r3, [r7, #24]
 800d2be:	7cfb      	ldrb	r3, [r7, #19]
 800d2c0:	69ba      	ldr	r2, [r7, #24]
 800d2c2:	429a      	cmp	r2, r3
 800d2c4:	dbeb      	blt.n	800d29e <VL53L0X_load_tuning_settings+0x162>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 800d2c6:	7cfb      	ldrb	r3, [r7, #19]
 800d2c8:	f107 0208 	add.w	r2, r7, #8
 800d2cc:	7cb9      	ldrb	r1, [r7, #18]
 800d2ce:	6878      	ldr	r0, [r7, #4]
 800d2d0:	f000 fdee 	bl	800deb0 <VL53L0X_WriteMulti>
 800d2d4:	4603      	mov	r3, r0
 800d2d6:	77fb      	strb	r3, [r7, #31]
 800d2d8:	e001      	b.n	800d2de <VL53L0X_load_tuning_settings+0x1a2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800d2da:	23fc      	movs	r3, #252	; 0xfc
 800d2dc:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800d2de:	697b      	ldr	r3, [r7, #20]
 800d2e0:	683a      	ldr	r2, [r7, #0]
 800d2e2:	4413      	add	r3, r2
 800d2e4:	781b      	ldrb	r3, [r3, #0]
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d004      	beq.n	800d2f4 <VL53L0X_load_tuning_settings+0x1b8>
 800d2ea:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	f43f af2e 	beq.w	800d150 <VL53L0X_load_tuning_settings+0x14>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800d2f4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800d2f8:	4618      	mov	r0, r3
 800d2fa:	3720      	adds	r7, #32
 800d2fc:	46bd      	mov	sp, r7
 800d2fe:	bd80      	pop	{r7, pc}

0800d300 <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 800d300:	b580      	push	{r7, lr}
 800d302:	b088      	sub	sp, #32
 800d304:	af00      	add	r7, sp, #0
 800d306:	60f8      	str	r0, [r7, #12]
 800d308:	60b9      	str	r1, [r7, #8]
 800d30a:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d30c:	2300      	movs	r3, #0
 800d30e:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	2200      	movs	r2, #0
 800d314:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 800d316:	f107 0313 	add.w	r3, r7, #19
 800d31a:	4619      	mov	r1, r3
 800d31c:	68f8      	ldr	r0, [r7, #12]
 800d31e:	f7fc fcf1 	bl	8009d04 <VL53L0X_GetXTalkCompensationEnable>
 800d322:	4603      	mov	r3, r0
 800d324:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 800d326:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	d111      	bne.n	800d352 <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 800d32e:	7cfb      	ldrb	r3, [r7, #19]
 800d330:	2b00      	cmp	r3, #0
 800d332:	d00e      	beq.n	800d352 <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 800d334:	68fb      	ldr	r3, [r7, #12]
 800d336:	6a1b      	ldr	r3, [r3, #32]
 800d338:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 800d33a:	68bb      	ldr	r3, [r7, #8]
 800d33c:	8a9b      	ldrh	r3, [r3, #20]
 800d33e:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 800d340:	69bb      	ldr	r3, [r7, #24]
 800d342:	fb02 f303 	mul.w	r3, r2, r3
 800d346:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 800d348:	697b      	ldr	r3, [r7, #20]
 800d34a:	3380      	adds	r3, #128	; 0x80
 800d34c:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 800d352:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800d356:	4618      	mov	r0, r3
 800d358:	3720      	adds	r7, #32
 800d35a:	46bd      	mov	sp, r7
 800d35c:	bd80      	pop	{r7, pc}

0800d35e <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 800d35e:	b580      	push	{r7, lr}
 800d360:	b086      	sub	sp, #24
 800d362:	af00      	add	r7, sp, #0
 800d364:	60f8      	str	r0, [r7, #12]
 800d366:	60b9      	str	r1, [r7, #8]
 800d368:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d36a:	2300      	movs	r3, #0
 800d36c:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 800d36e:	68bb      	ldr	r3, [r7, #8]
 800d370:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 800d376:	f107 0310 	add.w	r3, r7, #16
 800d37a:	461a      	mov	r2, r3
 800d37c:	68b9      	ldr	r1, [r7, #8]
 800d37e:	68f8      	ldr	r0, [r7, #12]
 800d380:	f7ff ffbe 	bl	800d300 <VL53L0X_get_total_xtalk_rate>
 800d384:	4603      	mov	r3, r0
 800d386:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 800d388:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d105      	bne.n	800d39c <VL53L0X_get_total_signal_rate+0x3e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	681a      	ldr	r2, [r3, #0]
 800d394:	693b      	ldr	r3, [r7, #16]
 800d396:	441a      	add	r2, r3
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	601a      	str	r2, [r3, #0]

	return Status;
 800d39c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d3a0:	4618      	mov	r0, r3
 800d3a2:	3718      	adds	r7, #24
 800d3a4:	46bd      	mov	sp, r7
 800d3a6:	bd80      	pop	{r7, pc}

0800d3a8 <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 800d3a8:	b580      	push	{r7, lr}
 800d3aa:	b09a      	sub	sp, #104	; 0x68
 800d3ac:	af00      	add	r7, sp, #0
 800d3ae:	60f8      	str	r0, [r7, #12]
 800d3b0:	60b9      	str	r1, [r7, #8]
 800d3b2:	607a      	str	r2, [r7, #4]
 800d3b4:	603b      	str	r3, [r7, #0]
	const uint32_t cSigmaLimit		= 18;
 800d3b6:	2312      	movs	r3, #18
 800d3b8:	657b      	str	r3, [r7, #84]	; 0x54
	const FixPoint1616_t cSignalLimit	= 0x4000; /* 0.25 */
 800d3ba:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800d3be:	653b      	str	r3, [r7, #80]	; 0x50
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 800d3c0:	2342      	movs	r3, #66	; 0x42
 800d3c2:	64fb      	str	r3, [r7, #76]	; 0x4c
	const uint32_t cAmbEffWidthSigmaEst_ns = 6;
 800d3c4:	2306      	movs	r3, #6
 800d3c6:	64bb      	str	r3, [r7, #72]	; 0x48
	const uint32_t cAmbEffWidthDMax_ns	   = 7;
 800d3c8:	2307      	movs	r3, #7
 800d3ca:	647b      	str	r3, [r7, #68]	; 0x44
	FixPoint1616_t dmaxAmbient;
	FixPoint1616_t dmaxDarkTmp;
	FixPoint1616_t sigmaEstP2Tmp;
	uint32_t signalRateTemp_mcps;

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d3cc:	2300      	movs	r3, #0
 800d3ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
		PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
 800d3d2:	68fb      	ldr	r3, [r7, #12]
 800d3d4:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
	dmaxCalRange_mm =
 800d3d8:	63fb      	str	r3, [r7, #60]	; 0x3c

	dmaxCalSignalRateRtn_mcps =
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800d3e0:	63bb      	str	r3, [r7, #56]	; 0x38
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 800d3e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d3e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d3e6:	fb02 f303 	mul.w	r3, r2, r3
 800d3ea:	637b      	str	r3, [r7, #52]	; 0x34

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 800d3ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d3ee:	3380      	adds	r3, #128	; 0x80
 800d3f0:	0a1b      	lsrs	r3, r3, #8
 800d3f2:	637b      	str	r3, [r7, #52]	; 0x34
	SignalAt0mm *= dmaxCalRange_mm;
 800d3f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d3f6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d3f8:	fb02 f303 	mul.w	r3, r2, r3
 800d3fc:	637b      	str	r3, [r7, #52]	; 0x34

	minSignalNeeded_p1 = 0;
 800d3fe:	2300      	movs	r3, #0
 800d400:	667b      	str	r3, [r7, #100]	; 0x64
	if (totalCorrSignalRate_mcps > 0) {
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	2b00      	cmp	r3, #0
 800d406:	d01a      	beq.n	800d43e <VL53L0X_calc_dmax+0x96>

		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;
 800d408:	68bb      	ldr	r3, [r7, #8]
 800d40a:	029b      	lsls	r3, r3, #10
 800d40c:	633b      	str	r3, [r7, #48]	; 0x30

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
			(totalCorrSignalRate_mcps/2);
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	085b      	lsrs	r3, r3, #1
		minSignalNeeded_p1 = signalRateTemp_mcps +
 800d412:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d414:	4413      	add	r3, r2
 800d416:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 800d418:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	fbb2 f3f3 	udiv	r3, r2, r3
 800d420:	667b      	str	r3, [r7, #100]	; 0x64

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 800d422:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800d424:	4613      	mov	r3, r2
 800d426:	005b      	lsls	r3, r3, #1
 800d428:	4413      	add	r3, r2
 800d42a:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 800d42c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d42e:	fb03 f303 	mul.w	r3, r3, r3
 800d432:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 800d434:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d436:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800d43a:	0c1b      	lsrs	r3, r3, #16
 800d43c:	667b      	str	r3, [r7, #100]	; 0x64
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 800d43e:	683b      	ldr	r3, [r7, #0]
 800d440:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800d442:	fb02 f303 	mul.w	r3, r2, r3
 800d446:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* FixPoint1616 >> 16 =	 uint32 */
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 800d448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d44a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800d44e:	0c1b      	lsrs	r3, r3, #16
 800d450:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* uint32 * uint32	=  uint32 */
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 800d452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d454:	fb03 f303 	mul.w	r3, r3, r3
 800d458:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 800d45a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d45c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800d460:	0c1b      	lsrs	r3, r3, #16
 800d462:	62bb      	str	r3, [r7, #40]	; 0x28
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 800d464:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d466:	085a      	lsrs	r2, r3, #1
 800d468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d46a:	441a      	add	r2, r3
 800d46c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d46e:	fbb2 f3f3 	udiv	r3, r2, r3
 800d472:	62bb      	str	r3, [r7, #40]	; 0x28
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 800d474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d476:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d478:	fb02 f303 	mul.w	r3, r2, r3
 800d47c:	62bb      	str	r3, [r7, #40]	; 0x28

	if (sigmaEstP2Tmp > 0xffff) {
 800d47e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d480:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d484:	d302      	bcc.n	800d48c <VL53L0X_calc_dmax+0xe4>
		minSignalNeeded_p3 = 0xfff00000;
 800d486:	4b54      	ldr	r3, [pc, #336]	; (800d5d8 <VL53L0X_calc_dmax+0x230>)
 800d488:	663b      	str	r3, [r7, #96]	; 0x60
 800d48a:	e015      	b.n	800d4b8 <VL53L0X_calc_dmax+0x110>

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 800d48c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d48e:	085a      	lsrs	r2, r3, #1
 800d490:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d492:	441a      	add	r2, r3
 800d494:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d496:	fbb2 f3f3 	udiv	r3, r2, r3
 800d49a:	677b      	str	r3, [r7, #116]	; 0x74
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 800d49c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d49e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d4a0:	fb02 f303 	mul.w	r3, r2, r3
 800d4a4:	677b      	str	r3, [r7, #116]	; 0x74

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 800d4a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d4a8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800d4ac:	0c1b      	lsrs	r3, r3, #16
 800d4ae:	663b      	str	r3, [r7, #96]	; 0x60

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 800d4b0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d4b2:	fb03 f303 	mul.w	r3, r3, r3
 800d4b6:	663b      	str	r3, [r7, #96]	; 0x60

	}

	/* FixPoint1814 / uint32 = FixPoint1814 */
	sigmaLimitTmp = ((cSigmaLimit << 14) + 500) / 1000;
 800d4b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d4ba:	039b      	lsls	r3, r3, #14
 800d4bc:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800d4c0:	4a46      	ldr	r2, [pc, #280]	; (800d5dc <VL53L0X_calc_dmax+0x234>)
 800d4c2:	fba2 2303 	umull	r2, r3, r2, r3
 800d4c6:	099b      	lsrs	r3, r3, #6
 800d4c8:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1814 * FixPoint1814 = FixPoint3628 := FixPoint0428 */
	sigmaLimitTmp *= sigmaLimitTmp;
 800d4ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4cc:	fb03 f303 	mul.w	r3, r3, r3
 800d4d0:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
	sigmaEstSqTmp = cSigmaEstRef * cSigmaEstRef;
 800d4d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d4d4:	fb03 f303 	mul.w	r3, r3, r3
 800d4d8:	623b      	str	r3, [r7, #32]

	/* FixPoint3232 >> 4 = FixPoint0428 */
	sigmaEstSqTmp = (sigmaEstSqTmp + 0x08) >> 4;
 800d4da:	6a3b      	ldr	r3, [r7, #32]
 800d4dc:	3308      	adds	r3, #8
 800d4de:	091b      	lsrs	r3, r3, #4
 800d4e0:	623b      	str	r3, [r7, #32]

	/* FixPoint0428 - FixPoint0428	= FixPoint0428 */
	sigmaLimitTmp -=  sigmaEstSqTmp;
 800d4e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d4e4:	6a3b      	ldr	r3, [r7, #32]
 800d4e6:	1ad3      	subs	r3, r2, r3
 800d4e8:	627b      	str	r3, [r7, #36]	; 0x24

	/* uint32_t * FixPoint0428 = FixPoint0428 */
	minSignalNeeded_p4 = 4 * 12 * sigmaLimitTmp;
 800d4ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d4ec:	4613      	mov	r3, r2
 800d4ee:	005b      	lsls	r3, r3, #1
 800d4f0:	4413      	add	r3, r2
 800d4f2:	011b      	lsls	r3, r3, #4
 800d4f4:	61fb      	str	r3, [r7, #28]

	/* FixPoint0428 >> 14 = FixPoint1814 */
	minSignalNeeded_p4 = (minSignalNeeded_p4 + 0x2000) >> 14;
 800d4f6:	69fb      	ldr	r3, [r7, #28]
 800d4f8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800d4fc:	0b9b      	lsrs	r3, r3, #14
 800d4fe:	61fb      	str	r3, [r7, #28]

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);
 800d500:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d502:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d504:	4413      	add	r3, r2
 800d506:	61bb      	str	r3, [r7, #24]

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
 800d508:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d50a:	085b      	lsrs	r3, r3, #1
 800d50c:	69ba      	ldr	r2, [r7, #24]
 800d50e:	4413      	add	r3, r2
 800d510:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= peakVcselDuration_us;
 800d512:	69ba      	ldr	r2, [r7, #24]
 800d514:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d516:	fbb2 f3f3 	udiv	r3, r2, r3
 800d51a:	61bb      	str	r3, [r7, #24]

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
 800d51c:	69bb      	ldr	r3, [r7, #24]
 800d51e:	039b      	lsls	r3, r3, #14
 800d520:	61bb      	str	r3, [r7, #24]

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
 800d522:	69fb      	ldr	r3, [r7, #28]
 800d524:	085b      	lsrs	r3, r3, #1
 800d526:	69ba      	ldr	r2, [r7, #24]
 800d528:	4413      	add	r3, r2
 800d52a:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= minSignalNeeded_p4;
 800d52c:	69ba      	ldr	r2, [r7, #24]
 800d52e:	69fb      	ldr	r3, [r7, #28]
 800d530:	fbb2 f3f3 	udiv	r3, r2, r3
 800d534:	61bb      	str	r3, [r7, #24]

	/* FixPoint3200 * FixPoint2804 := FixPoint2804*/
	minSignalNeeded *= minSignalNeeded_p1;
 800d536:	69bb      	ldr	r3, [r7, #24]
 800d538:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800d53a:	fb02 f303 	mul.w	r3, r2, r3
 800d53e:	61bb      	str	r3, [r7, #24]
	 * and 10E-22 on the denominator.
	 * We do this because 32bit fix point calculation can't
	 * handle the larger and smaller elements of this equation,
	 * i.e. speed of light and pulse widths.
	 */
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800d540:	69bb      	ldr	r3, [r7, #24]
 800d542:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800d546:	4a25      	ldr	r2, [pc, #148]	; (800d5dc <VL53L0X_calc_dmax+0x234>)
 800d548:	fba2 2303 	umull	r2, r3, r2, r3
 800d54c:	099b      	lsrs	r3, r3, #6
 800d54e:	61bb      	str	r3, [r7, #24]
	minSignalNeeded <<= 4;
 800d550:	69bb      	ldr	r3, [r7, #24]
 800d552:	011b      	lsls	r3, r3, #4
 800d554:	61bb      	str	r3, [r7, #24]

	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800d556:	69bb      	ldr	r3, [r7, #24]
 800d558:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800d55c:	4a1f      	ldr	r2, [pc, #124]	; (800d5dc <VL53L0X_calc_dmax+0x234>)
 800d55e:	fba2 2303 	umull	r2, r3, r2, r3
 800d562:	099b      	lsrs	r3, r3, #6
 800d564:	61bb      	str	r3, [r7, #24]

	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;
 800d566:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d568:	3380      	adds	r3, #128	; 0x80
 800d56a:	0a1b      	lsrs	r3, r3, #8
 800d56c:	617b      	str	r3, [r7, #20]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
 800d56e:	697b      	ldr	r3, [r7, #20]
 800d570:	2b00      	cmp	r3, #0
 800d572:	d008      	beq.n	800d586 <VL53L0X_calc_dmax+0x1de>
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 800d574:	697b      	ldr	r3, [r7, #20]
 800d576:	085a      	lsrs	r2, r3, #1
 800d578:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d57a:	441a      	add	r2, r3
 800d57c:	697b      	ldr	r3, [r7, #20]
 800d57e:	fbb2 f3f3 	udiv	r3, r2, r3
 800d582:	65bb      	str	r3, [r7, #88]	; 0x58
 800d584:	e001      	b.n	800d58a <VL53L0X_calc_dmax+0x1e2>
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;
 800d586:	2300      	movs	r3, #0
 800d588:	65bb      	str	r3, [r7, #88]	; 0x58

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 800d58a:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800d58c:	f7fe f9ba 	bl	800b904 <VL53L0X_isqrt>
 800d590:	6138      	str	r0, [r7, #16]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 800d592:	69bb      	ldr	r3, [r7, #24]
 800d594:	2b00      	cmp	r3, #0
 800d596:	d008      	beq.n	800d5aa <VL53L0X_calc_dmax+0x202>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 800d598:	69bb      	ldr	r3, [r7, #24]
 800d59a:	085a      	lsrs	r2, r3, #1
 800d59c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d59e:	441a      	add	r2, r3
 800d5a0:	69bb      	ldr	r3, [r7, #24]
 800d5a2:	fbb2 f3f3 	udiv	r3, r2, r3
 800d5a6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d5a8:	e001      	b.n	800d5ae <VL53L0X_calc_dmax+0x206>
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
 800d5aa:	2300      	movs	r3, #0
 800d5ac:	65fb      	str	r3, [r7, #92]	; 0x5c

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 800d5ae:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800d5b0:	f7fe f9a8 	bl	800b904 <VL53L0X_isqrt>
 800d5b4:	65f8      	str	r0, [r7, #92]	; 0x5c

	*pdmax_mm = dmaxDark;
 800d5b6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d5b8:	693a      	ldr	r2, [r7, #16]
 800d5ba:	601a      	str	r2, [r3, #0]
	if (dmaxDark > dmaxAmbient)
 800d5bc:	693a      	ldr	r2, [r7, #16]
 800d5be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d5c0:	429a      	cmp	r2, r3
 800d5c2:	d902      	bls.n	800d5ca <VL53L0X_calc_dmax+0x222>
		*pdmax_mm = dmaxAmbient;
 800d5c4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d5c6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d5c8:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);

	return Status;
 800d5ca:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
}
 800d5ce:	4618      	mov	r0, r3
 800d5d0:	3768      	adds	r7, #104	; 0x68
 800d5d2:	46bd      	mov	sp, r7
 800d5d4:	bd80      	pop	{r7, pc}
 800d5d6:	bf00      	nop
 800d5d8:	fff00000 	.word	0xfff00000
 800d5dc:	10624dd3 	.word	0x10624dd3

0800d5e0 <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 800d5e0:	b580      	push	{r7, lr}
 800d5e2:	b0b4      	sub	sp, #208	; 0xd0
 800d5e4:	af04      	add	r7, sp, #16
 800d5e6:	60f8      	str	r0, [r7, #12]
 800d5e8:	60b9      	str	r1, [r7, #8]
 800d5ea:	607a      	str	r2, [r7, #4]
 800d5ec:	603b      	str	r3, [r7, #0]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 800d5ee:	f44f 7348 	mov.w	r3, #800	; 0x320
 800d5f2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 800d5f6:	f44f 7316 	mov.w	r3, #600	; 0x258
 800d5fa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	const FixPoint1616_t cDfltFinalRangeIntegrationTimeMilliSecs	= 0x00190000; /* 25ms */
 800d5fe:	f44f 13c8 	mov.w	r3, #1638400	; 0x190000
 800d602:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 800d606:	f241 235c 	movw	r3, #4700	; 0x125c
 800d60a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 800d60e:	4b9e      	ldr	r3, [pc, #632]	; (800d888 <VL53L0X_calc_sigma_estimate+0x2a8>)
 800d610:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 800d614:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800d618:	67fb      	str	r3, [r7, #124]	; 0x7c
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 800d61a:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 800d61e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d622:	fbb2 f3f3 	udiv	r3, r2, r3
 800d626:	67bb      	str	r3, [r7, #120]	; 0x78
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 800d628:	4b98      	ldr	r3, [pc, #608]	; (800d88c <VL53L0X_calc_sigma_estimate+0x2ac>)
 800d62a:	677b      	str	r3, [r7, #116]	; 0x74
	const uint32_t c16BitRoundingParam		= 0x00008000;
 800d62c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d630:	673b      	str	r3, [r7, #112]	; 0x70
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 800d632:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 800d636:	66fb      	str	r3, [r7, #108]	; 0x6c
	const uint32_t cPllPeriod_ps			= 1655;
 800d638:	f240 6377 	movw	r3, #1655	; 0x677
 800d63c:	66bb      	str	r3, [r7, #104]	; 0x68
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d63e:	2300      	movs	r3, #0
 800d640:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	 * Estimates the range sigma
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 800d644:	68fb      	ldr	r3, [r7, #12]
 800d646:	6a1b      	ldr	r3, [r3, #32]
 800d648:	617b      	str	r3, [r7, #20]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 800d64a:	68bb      	ldr	r3, [r7, #8]
 800d64c:	691b      	ldr	r3, [r3, #16]
 800d64e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d652:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 800d656:	0c1b      	lsrs	r3, r3, #16
 800d658:	667b      	str	r3, [r7, #100]	; 0x64

	correctedSignalRate_mcps =
 800d65a:	68bb      	ldr	r3, [r7, #8]
 800d65c:	68db      	ldr	r3, [r3, #12]
 800d65e:	663b      	str	r3, [r7, #96]	; 0x60
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 800d660:	f107 0310 	add.w	r3, r7, #16
 800d664:	461a      	mov	r2, r3
 800d666:	68b9      	ldr	r1, [r7, #8]
 800d668:	68f8      	ldr	r0, [r7, #12]
 800d66a:	f7ff fe78 	bl	800d35e <VL53L0X_get_total_signal_rate>
 800d66e:	4603      	mov	r3, r0
 800d670:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 800d674:	f107 0314 	add.w	r3, r7, #20
 800d678:	461a      	mov	r2, r3
 800d67a:	68b9      	ldr	r1, [r7, #8]
 800d67c:	68f8      	ldr	r0, [r7, #12]
 800d67e:	f7ff fe3f 	bl	800d300 <VL53L0X_get_total_xtalk_rate>
 800d682:	4603      	mov	r3, r0
 800d684:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 800d688:	693b      	ldr	r3, [r7, #16]
 800d68a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d68e:	fb02 f303 	mul.w	r3, r2, r3
 800d692:	65fb      	str	r3, [r7, #92]	; 0x5c
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 800d694:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d696:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800d69a:	0c1b      	lsrs	r3, r3, #16
 800d69c:	65fb      	str	r3, [r7, #92]	; 0x5c

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 800d69e:	697b      	ldr	r3, [r7, #20]
 800d6a0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d6a4:	fb02 f303 	mul.w	r3, r2, r3
 800d6a8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 800d6ac:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800d6b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d6b2:	429a      	cmp	r2, r3
 800d6b4:	d902      	bls.n	800d6bc <VL53L0X_calc_sigma_estimate+0xdc>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 800d6b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d6b8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (Status == VL53L0X_ERROR_NONE) {
 800d6bc:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	d168      	bne.n	800d796 <VL53L0X_calc_sigma_estimate+0x1b6>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800d6c4:	68fb      	ldr	r3, [r7, #12]
 800d6c6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800d6ca:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800d6ce:	68fb      	ldr	r3, [r7, #12]
 800d6d0:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 800d6d4:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800d6d8:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800d6dc:	461a      	mov	r2, r3
 800d6de:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800d6e2:	68f8      	ldr	r0, [r7, #12]
 800d6e4:	f7fe feb2 	bl	800c44c <VL53L0X_calc_timeout_mclks>
 800d6e8:	6578      	str	r0, [r7, #84]	; 0x54
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800d6ea:	68fb      	ldr	r3, [r7, #12]
 800d6ec:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800d6f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800d6f4:	68fb      	ldr	r3, [r7, #12]
 800d6f6:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 800d6fa:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800d6fe:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800d702:	461a      	mov	r2, r3
 800d704:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 800d708:	68f8      	ldr	r0, [r7, #12]
 800d70a:	f7fe fe9f 	bl	800c44c <VL53L0X_calc_timeout_mclks>
 800d70e:	64f8      	str	r0, [r7, #76]	; 0x4c
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 800d710:	2303      	movs	r3, #3
 800d712:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		if (finalRangeVcselPCLKS == 8)
 800d716:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800d71a:	2b08      	cmp	r3, #8
 800d71c:	d102      	bne.n	800d724 <VL53L0X_calc_sigma_estimate+0x144>
			vcselWidth = 2;
 800d71e:	2302      	movs	r3, #2
 800d720:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 800d724:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d726:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d728:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 800d72a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800d72e:	fb02 f303 	mul.w	r3, r2, r3
 800d732:	02db      	lsls	r3, r3, #11
 800d734:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800d738:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d73c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800d740:	4a53      	ldr	r2, [pc, #332]	; (800d890 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800d742:	fba2 2303 	umull	r2, r3, r2, r3
 800d746:	099b      	lsrs	r3, r3, #6
 800d748:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us *= cPllPeriod_ps;
 800d74c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d750:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d752:	fb02 f303 	mul.w	r3, r2, r3
 800d756:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800d75a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d75e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800d762:	4a4b      	ldr	r2, [pc, #300]	; (800d890 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800d764:	fba2 2303 	umull	r2, r3, r2, r3
 800d768:	099b      	lsrs	r3, r3, #6
 800d76a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 800d76e:	693b      	ldr	r3, [r7, #16]
 800d770:	3380      	adds	r3, #128	; 0x80
 800d772:	0a1b      	lsrs	r3, r3, #8
 800d774:	613b      	str	r3, [r7, #16]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 800d776:	693a      	ldr	r2, [r7, #16]
 800d778:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d77c:	fb02 f303 	mul.w	r3, r2, r3
 800d780:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 800d784:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800d788:	3380      	adds	r3, #128	; 0x80
 800d78a:	0a1b      	lsrs	r3, r3, #8
 800d78c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 800d790:	693b      	ldr	r3, [r7, #16]
 800d792:	021b      	lsls	r3, r3, #8
 800d794:	613b      	str	r3, [r7, #16]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 800d796:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	d002      	beq.n	800d7a4 <VL53L0X_calc_sigma_estimate+0x1c4>
		LOG_FUNCTION_END(Status);
		return Status;
 800d79e:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800d7a2:	e15e      	b.n	800da62 <VL53L0X_calc_sigma_estimate+0x482>
	}

	if (peakSignalRate_kcps == 0) {
 800d7a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	d10c      	bne.n	800d7c4 <VL53L0X_calc_sigma_estimate+0x1e4>
		*pSigmaEstimate = cSigmaEstMax;
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800d7b0:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 800d7b2:	68fb      	ldr	r3, [r7, #12]
 800d7b4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800d7b8:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		*pDmax_mm = 0;
 800d7bc:	683b      	ldr	r3, [r7, #0]
 800d7be:	2200      	movs	r2, #0
 800d7c0:	601a      	str	r2, [r3, #0]
 800d7c2:	e14c      	b.n	800da5e <VL53L0X_calc_sigma_estimate+0x47e>
	} else {
		if (vcselTotalEventsRtn < 1)
 800d7c4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	d102      	bne.n	800d7d2 <VL53L0X_calc_sigma_estimate+0x1f2>
			vcselTotalEventsRtn = 1;
 800d7cc:	2301      	movs	r3, #1
 800d7ce:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 800d7d2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d7d6:	64bb      	str	r3, [r7, #72]	; 0x48

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 800d7d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d7da:	041a      	lsls	r2, r3, #16
 800d7dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d7de:	fbb2 f3f3 	udiv	r3, r2, r3
 800d7e2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 800d7e6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800d7ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d7ec:	429a      	cmp	r2, r3
 800d7ee:	d902      	bls.n	800d7f6 <VL53L0X_calc_sigma_estimate+0x216>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 800d7f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d7f2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 800d7f6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800d7fa:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800d7fe:	fb02 f303 	mul.w	r3, r2, r3
 800d802:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 800d806:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800d80a:	4613      	mov	r3, r2
 800d80c:	005b      	lsls	r3, r3, #1
 800d80e:	4413      	add	r3, r2
 800d810:	009b      	lsls	r3, r3, #2
 800d812:	4618      	mov	r0, r3
 800d814:	f7fe f876 	bl	800b904 <VL53L0X_isqrt>
 800d818:	4603      	mov	r3, r0
 800d81a:	005b      	lsls	r3, r3, #1
 800d81c:	647b      	str	r3, [r7, #68]	; 0x44

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 800d81e:	68bb      	ldr	r3, [r7, #8]
 800d820:	891b      	ldrh	r3, [r3, #8]
 800d822:	461a      	mov	r2, r3
 800d824:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d826:	fb02 f303 	mul.w	r3, r2, r3
 800d82a:	643b      	str	r3, [r7, #64]	; 0x40
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800d82c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d82e:	041a      	lsls	r2, r3, #16
			2 * xTalkCompRate_kcps) + 500)/1000;
 800d830:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d834:	005b      	lsls	r3, r3, #1
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800d836:	1ad3      	subs	r3, r2, r3
			2 * xTalkCompRate_kcps) + 500)/1000;
 800d838:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800d83c:	4a14      	ldr	r2, [pc, #80]	; (800d890 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800d83e:	fba2 2303 	umull	r2, r3, r2, r3
 800d842:	099b      	lsrs	r3, r3, #6
 800d844:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* vcselRate + xtalkCompRate */
		diff2_mcps = ((peakSignalRate_kcps << 16) + 500)/1000;
 800d846:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d848:	041b      	lsls	r3, r3, #16
 800d84a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800d84e:	4a10      	ldr	r2, [pc, #64]	; (800d890 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800d850:	fba2 2303 	umull	r2, r3, r2, r3
 800d854:	099b      	lsrs	r3, r3, #6
 800d856:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Shift by 8 bits to increase resolution prior to the
		 * division */
		diff1_mcps <<= 8;
 800d858:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d85a:	021b      	lsls	r3, r3, #8
 800d85c:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 800d85e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d862:	fbb2 f3f3 	udiv	r3, r2, r3
 800d866:	2b00      	cmp	r3, #0
 800d868:	bfb8      	it	lt
 800d86a:	425b      	neglt	r3, r3
 800d86c:	637b      	str	r3, [r7, #52]	; 0x34

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 800d86e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d870:	021b      	lsls	r3, r3, #8
 800d872:	637b      	str	r3, [r7, #52]	; 0x34

		if(pRangingMeasurementData->RangeStatus != 0){
 800d874:	68bb      	ldr	r3, [r7, #8]
 800d876:	7e1b      	ldrb	r3, [r3, #24]
 800d878:	2b00      	cmp	r3, #0
 800d87a:	d00b      	beq.n	800d894 <VL53L0X_calc_sigma_estimate+0x2b4>
			pwMult = 1 << 16;
 800d87c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800d880:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800d884:	e033      	b.n	800d8ee <VL53L0X_calc_sigma_estimate+0x30e>
 800d886:	bf00      	nop
 800d888:	028f87ae 	.word	0x028f87ae
 800d88c:	0006999a 	.word	0x0006999a
 800d890:	10624dd3 	.word	0x10624dd3
		} else {
			/* FixPoint1616/uint32 = FixPoint1616 */
			pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 800d894:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d896:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d89a:	fbb2 f3f3 	udiv	r3, r2, r3
 800d89e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * FixPoint1616 * FixPoint1616 = FixPoint3232, however both
			 * values are small enough such that32 bits will not be
			 * exceeded.
			 */
			pwMult *= ((1 << 16) - xTalkCorrection);
 800d8a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d8a4:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 800d8a8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d8ac:	fb02 f303 	mul.w	r3, r2, r3
 800d8b0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3232 >> 16) = FixPoint1616 */
			pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 800d8b4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800d8b8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d8ba:	4413      	add	r3, r2
 800d8bc:	0c1b      	lsrs	r3, r3, #16
 800d8be:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
			pwMult += (1 << 16);
 800d8c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d8c6:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800d8ca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * At this point the value will be 1.xx, therefore if we square
			 * the value this will exceed 32 bits. To address this perform
			 * a single shift to the right before the multiplication.
			 */
			pwMult >>= 1;
 800d8ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d8d2:	085b      	lsrs	r3, r3, #1
 800d8d4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
			pwMult = pwMult * pwMult;
 800d8d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d8dc:	fb03 f303 	mul.w	r3, r3, r3
 800d8e0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3430 >> 14) = Fix1616 */
			pwMult >>= 14;
 800d8e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d8e8:	0b9b      	lsrs	r3, r3, #14
 800d8ea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		}

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 800d8ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d8f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d8f4:	fb02 f303 	mul.w	r3, r2, r3
 800d8f8:	633b      	str	r3, [r7, #48]	; 0x30

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 800d8fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8fc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800d900:	0c1b      	lsrs	r3, r3, #16
 800d902:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 800d904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d906:	fb03 f303 	mul.w	r3, r3, r3
 800d90a:	633b      	str	r3, [r7, #48]	; 0x30

		sqr2 = sigmaEstimateP2;
 800d90c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800d910:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 800d912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d914:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800d918:	0c1b      	lsrs	r3, r3, #16
 800d91a:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 800d91c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d91e:	fb03 f303 	mul.w	r3, r3, r3
 800d922:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 800d924:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d928:	4413      	add	r3, r2
 800d92a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 800d92c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d92e:	f7fd ffe9 	bl	800b904 <VL53L0X_isqrt>
 800d932:	6278      	str	r0, [r7, #36]	; 0x24

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 800d934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d936:	041b      	lsls	r3, r3, #16
 800d938:	627b      	str	r3, [r7, #36]	; 0x24
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 800d93a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d93c:	3332      	adds	r3, #50	; 0x32
 800d93e:	4a4b      	ldr	r2, [pc, #300]	; (800da6c <VL53L0X_calc_sigma_estimate+0x48c>)
 800d940:	fba2 2303 	umull	r2, r3, r2, r3
 800d944:	095a      	lsrs	r2, r3, #5
 800d946:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d948:	fbb2 f3f3 	udiv	r3, r2, r3
 800d94c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 800d950:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800d954:	f640 32b5 	movw	r2, #2997	; 0xbb5
 800d958:	fb02 f303 	mul.w	r3, r2, r3
 800d95c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 800d960:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800d964:	f241 3388 	movw	r3, #5000	; 0x1388
 800d968:	4413      	add	r3, r2
 800d96a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		sigmaEstRtn		 /= 10000;
 800d96e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800d972:	4a3f      	ldr	r2, [pc, #252]	; (800da70 <VL53L0X_calc_sigma_estimate+0x490>)
 800d974:	fba2 2303 	umull	r2, r3, r2, r3
 800d978:	0b5b      	lsrs	r3, r3, #13
 800d97a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 800d97e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800d982:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d984:	429a      	cmp	r2, r3
 800d986:	d902      	bls.n	800d98e <VL53L0X_calc_sigma_estimate+0x3ae>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstRtn = cSigmaEstRtnMax;
 800d988:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d98a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}
		finalRangeIntegrationTimeMilliSecs =
			(finalRangeTimeoutMicroSecs + preRangeTimeoutMicroSecs + 500)/1000;
 800d98e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800d992:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d996:	4413      	add	r3, r2
 800d998:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		finalRangeIntegrationTimeMilliSecs =
 800d99c:	4a35      	ldr	r2, [pc, #212]	; (800da74 <VL53L0X_calc_sigma_estimate+0x494>)
 800d99e:	fba2 2303 	umull	r2, r3, r2, r3
 800d9a2:	099b      	lsrs	r3, r3, #6
 800d9a4:	623b      	str	r3, [r7, #32]
		/* sigmaEstRef = 1mm * 25ms/final range integration time (inc pre-range)
		 * sqrt(FixPoint1616/int) = FixPoint2408)
		 */
		sigmaEstRef =
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
				finalRangeIntegrationTimeMilliSecs/2)/
 800d9a6:	6a3b      	ldr	r3, [r7, #32]
 800d9a8:	085a      	lsrs	r2, r3, #1
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
 800d9aa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d9ae:	441a      	add	r2, r3
 800d9b0:	6a3b      	ldr	r3, [r7, #32]
 800d9b2:	fbb2 f3f3 	udiv	r3, r2, r3
 800d9b6:	4618      	mov	r0, r3
 800d9b8:	f7fd ffa4 	bl	800b904 <VL53L0X_isqrt>
 800d9bc:	61f8      	str	r0, [r7, #28]
				finalRangeIntegrationTimeMilliSecs);

		/* FixPoint2408 << 8 = FixPoint1616 */
		sigmaEstRef <<= 8;
 800d9be:	69fb      	ldr	r3, [r7, #28]
 800d9c0:	021b      	lsls	r3, r3, #8
 800d9c2:	61fb      	str	r3, [r7, #28]
		sigmaEstRef = (sigmaEstRef + 500)/1000;
 800d9c4:	69fb      	ldr	r3, [r7, #28]
 800d9c6:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800d9ca:	4a2a      	ldr	r2, [pc, #168]	; (800da74 <VL53L0X_calc_sigma_estimate+0x494>)
 800d9cc:	fba2 2303 	umull	r2, r3, r2, r3
 800d9d0:	099b      	lsrs	r3, r3, #6
 800d9d2:	61fb      	str	r3, [r7, #28]

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 800d9d4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800d9d8:	fb03 f303 	mul.w	r3, r3, r3
 800d9dc:	633b      	str	r3, [r7, #48]	; 0x30
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = sigmaEstRef * sigmaEstRef;
 800d9de:	69fb      	ldr	r3, [r7, #28]
 800d9e0:	fb03 f303 	mul.w	r3, r3, r3
 800d9e4:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 800d9e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d9e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9ea:	4413      	add	r3, r2
 800d9ec:	4618      	mov	r0, r3
 800d9ee:	f7fd ff89 	bl	800b904 <VL53L0X_isqrt>
 800d9f2:	61b8      	str	r0, [r7, #24]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 800d9f4:	69bb      	ldr	r3, [r7, #24]
 800d9f6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d9fa:	fb02 f303 	mul.w	r3, r2, r3
 800d9fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 800da02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800da04:	2b00      	cmp	r3, #0
 800da06:	d009      	beq.n	800da1c <VL53L0X_calc_sigma_estimate+0x43c>
 800da08:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	d005      	beq.n	800da1c <VL53L0X_calc_sigma_estimate+0x43c>
 800da10:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800da14:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800da18:	429a      	cmp	r2, r3
 800da1a:	d903      	bls.n	800da24 <VL53L0X_calc_sigma_estimate+0x444>
				(sigmaEstimate > cSigmaEstMax)) {
				sigmaEstimate = cSigmaEstMax;
 800da1c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800da20:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800da2a:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	681a      	ldr	r2, [r3, #0]
 800da30:	68fb      	ldr	r3, [r7, #12]
 800da32:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		Status = VL53L0X_calc_dmax(
 800da36:	6939      	ldr	r1, [r7, #16]
 800da38:	683b      	ldr	r3, [r7, #0]
 800da3a:	9303      	str	r3, [sp, #12]
 800da3c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800da40:	9302      	str	r3, [sp, #8]
 800da42:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800da46:	9301      	str	r3, [sp, #4]
 800da48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800da4a:	9300      	str	r3, [sp, #0]
 800da4c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800da50:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800da52:	68f8      	ldr	r0, [r7, #12]
 800da54:	f7ff fca8 	bl	800d3a8 <VL53L0X_calc_dmax>
 800da58:	4603      	mov	r3, r0
 800da5a:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			peakVcselDuration_us,
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800da5e:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
}
 800da62:	4618      	mov	r0, r3
 800da64:	37c0      	adds	r7, #192	; 0xc0
 800da66:	46bd      	mov	sp, r7
 800da68:	bd80      	pop	{r7, pc}
 800da6a:	bf00      	nop
 800da6c:	51eb851f 	.word	0x51eb851f
 800da70:	d1b71759 	.word	0xd1b71759
 800da74:	10624dd3 	.word	0x10624dd3

0800da78 <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 800da78:	b580      	push	{r7, lr}
 800da7a:	b090      	sub	sp, #64	; 0x40
 800da7c:	af00      	add	r7, sp, #0
 800da7e:	60f8      	str	r0, [r7, #12]
 800da80:	607a      	str	r2, [r7, #4]
 800da82:	461a      	mov	r2, r3
 800da84:	460b      	mov	r3, r1
 800da86:	72fb      	strb	r3, [r7, #11]
 800da88:	4613      	mov	r3, r2
 800da8a:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800da8c:	2300      	movs	r3, #0
 800da8e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 800da92:	2300      	movs	r3, #0
 800da94:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint8_t SignalRefClipflag = 0;
 800da98:	2300      	movs	r3, #0
 800da9a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 800da9e:	2300      	movs	r3, #0
 800daa0:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 800daa4:	2300      	movs	r3, #0
 800daa6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 800daaa:	2300      	movs	r3, #0
 800daac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 800dab0:	2300      	movs	r3, #0
 800dab2:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 800dab6:	2300      	movs	r3, #0
 800dab8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 800dabc:	2300      	movs	r3, #0
 800dabe:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint16_t tmpWord = 0;
 800dac2:	2300      	movs	r3, #0
 800dac4:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 800dac6:	2300      	movs	r3, #0
 800dac8:	613b      	str	r3, [r7, #16]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 800daca:	7afb      	ldrb	r3, [r7, #11]
 800dacc:	10db      	asrs	r3, r3, #3
 800dace:	b2db      	uxtb	r3, r3
 800dad0:	f003 030f 	and.w	r3, r3, #15
 800dad4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	if (DeviceRangeStatusInternal == 0 ||
 800dad8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800dadc:	2b00      	cmp	r3, #0
 800dade:	d017      	beq.n	800db10 <VL53L0X_get_pal_range_status+0x98>
 800dae0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800dae4:	2b05      	cmp	r3, #5
 800dae6:	d013      	beq.n	800db10 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 5 ||
 800dae8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800daec:	2b07      	cmp	r3, #7
 800daee:	d00f      	beq.n	800db10 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 7 ||
 800daf0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800daf4:	2b0c      	cmp	r3, #12
 800daf6:	d00b      	beq.n	800db10 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 12 ||
 800daf8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800dafc:	2b0d      	cmp	r3, #13
 800dafe:	d007      	beq.n	800db10 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 13 ||
 800db00:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800db04:	2b0e      	cmp	r3, #14
 800db06:	d003      	beq.n	800db10 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 14 ||
 800db08:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800db0c:	2b0f      	cmp	r3, #15
 800db0e:	d103      	bne.n	800db18 <VL53L0X_get_pal_range_status+0xa0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 800db10:	2301      	movs	r3, #1
 800db12:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800db16:	e002      	b.n	800db1e <VL53L0X_get_pal_range_status+0xa6>
	} else {
		NoneFlag = 0;
 800db18:	2300      	movs	r3, #0
 800db1a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800db1e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800db22:	2b00      	cmp	r3, #0
 800db24:	d109      	bne.n	800db3a <VL53L0X_get_pal_range_status+0xc2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800db26:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800db2a:	461a      	mov	r2, r3
 800db2c:	2100      	movs	r1, #0
 800db2e:	68f8      	ldr	r0, [r7, #12]
 800db30:	f7fc f9bc 	bl	8009eac <VL53L0X_GetLimitCheckEnable>
 800db34:	4603      	mov	r3, r0
 800db36:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 800db3a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800db3e:	2b00      	cmp	r3, #0
 800db40:	d02e      	beq.n	800dba0 <VL53L0X_get_pal_range_status+0x128>
 800db42:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800db46:	2b00      	cmp	r3, #0
 800db48:	d12a      	bne.n	800dba0 <VL53L0X_get_pal_range_status+0x128>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 800db4a:	f107 0310 	add.w	r3, r7, #16
 800db4e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800db52:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800db54:	68f8      	ldr	r0, [r7, #12]
 800db56:	f7ff fd43 	bl	800d5e0 <VL53L0X_calc_sigma_estimate>
 800db5a:	4603      	mov	r3, r0
 800db5c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 800db60:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800db64:	2b00      	cmp	r3, #0
 800db66:	d103      	bne.n	800db70 <VL53L0X_get_pal_range_status+0xf8>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 800db68:	693b      	ldr	r3, [r7, #16]
 800db6a:	b29a      	uxth	r2, r3
 800db6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800db6e:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 800db70:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800db74:	2b00      	cmp	r3, #0
 800db76:	d113      	bne.n	800dba0 <VL53L0X_get_pal_range_status+0x128>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 800db78:	f107 0320 	add.w	r3, r7, #32
 800db7c:	461a      	mov	r2, r3
 800db7e:	2100      	movs	r1, #0
 800db80:	68f8      	ldr	r0, [r7, #12]
 800db82:	f7fc fa19 	bl	8009fb8 <VL53L0X_GetLimitCheckValue>
 800db86:	4603      	mov	r3, r0
 800db88:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 800db8c:	6a3b      	ldr	r3, [r7, #32]
 800db8e:	2b00      	cmp	r3, #0
 800db90:	d006      	beq.n	800dba0 <VL53L0X_get_pal_range_status+0x128>
				(SigmaEstimate > SigmaLimitValue))
 800db92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800db94:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 800db96:	429a      	cmp	r2, r3
 800db98:	d902      	bls.n	800dba0 <VL53L0X_get_pal_range_status+0x128>
					/* Limit Fail */
					SigmaLimitflag = 1;
 800db9a:	2301      	movs	r3, #1
 800db9c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800dba0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d109      	bne.n	800dbbc <VL53L0X_get_pal_range_status+0x144>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800dba8:	f107 0329 	add.w	r3, r7, #41	; 0x29
 800dbac:	461a      	mov	r2, r3
 800dbae:	2102      	movs	r1, #2
 800dbb0:	68f8      	ldr	r0, [r7, #12]
 800dbb2:	f7fc f97b 	bl	8009eac <VL53L0X_GetLimitCheckEnable>
 800dbb6:	4603      	mov	r3, r0
 800dbb8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 800dbbc:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	d044      	beq.n	800dc4e <VL53L0X_get_pal_range_status+0x1d6>
 800dbc4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	d140      	bne.n	800dc4e <VL53L0X_get_pal_range_status+0x1d6>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800dbcc:	f107 031c 	add.w	r3, r7, #28
 800dbd0:	461a      	mov	r2, r3
 800dbd2:	2102      	movs	r1, #2
 800dbd4:	68f8      	ldr	r0, [r7, #12]
 800dbd6:	f7fc f9ef 	bl	8009fb8 <VL53L0X_GetLimitCheckValue>
 800dbda:	4603      	mov	r3, r0
 800dbdc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		/* Read LastSignalRefMcps from device */
		if (Status == VL53L0X_ERROR_NONE)
 800dbe0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	d107      	bne.n	800dbf8 <VL53L0X_get_pal_range_status+0x180>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800dbe8:	2201      	movs	r2, #1
 800dbea:	21ff      	movs	r1, #255	; 0xff
 800dbec:	68f8      	ldr	r0, [r7, #12]
 800dbee:	f000 f9bb 	bl	800df68 <VL53L0X_WrByte>
 800dbf2:	4603      	mov	r3, r0
 800dbf4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		if (Status == VL53L0X_ERROR_NONE)
 800dbf8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d109      	bne.n	800dc14 <VL53L0X_get_pal_range_status+0x19c>
			Status = VL53L0X_RdWord(Dev,
 800dc00:	f107 0316 	add.w	r3, r7, #22
 800dc04:	461a      	mov	r2, r3
 800dc06:	21b6      	movs	r1, #182	; 0xb6
 800dc08:	68f8      	ldr	r0, [r7, #12]
 800dc0a:	f000 fa59 	bl	800e0c0 <VL53L0X_RdWord>
 800dc0e:	4603      	mov	r3, r0
 800dc10:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
				&tmpWord);

		if (Status == VL53L0X_ERROR_NONE)
 800dc14:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d107      	bne.n	800dc2c <VL53L0X_get_pal_range_status+0x1b4>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800dc1c:	2200      	movs	r2, #0
 800dc1e:	21ff      	movs	r1, #255	; 0xff
 800dc20:	68f8      	ldr	r0, [r7, #12]
 800dc22:	f000 f9a1 	bl	800df68 <VL53L0X_WrByte>
 800dc26:	4603      	mov	r3, r0
 800dc28:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 800dc2c:	8afb      	ldrh	r3, [r7, #22]
 800dc2e:	025b      	lsls	r3, r3, #9
 800dc30:	62fb      	str	r3, [r7, #44]	; 0x2c
		PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 800dc32:	68fb      	ldr	r3, [r7, #12]
 800dc34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dc36:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148

		if ((SignalRefClipValue > 0) &&
 800dc3a:	69fb      	ldr	r3, [r7, #28]
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	d006      	beq.n	800dc4e <VL53L0X_get_pal_range_status+0x1d6>
				(LastSignalRefMcps > SignalRefClipValue)) {
 800dc40:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 800dc42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dc44:	429a      	cmp	r2, r3
 800dc46:	d902      	bls.n	800dc4e <VL53L0X_get_pal_range_status+0x1d6>
			/* Limit Fail */
			SignalRefClipflag = 1;
 800dc48:	2301      	movs	r3, #1
 800dc4a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800dc4e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800dc52:	2b00      	cmp	r3, #0
 800dc54:	d109      	bne.n	800dc6a <VL53L0X_get_pal_range_status+0x1f2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800dc56:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800dc5a:	461a      	mov	r2, r3
 800dc5c:	2103      	movs	r1, #3
 800dc5e:	68f8      	ldr	r0, [r7, #12]
 800dc60:	f7fc f924 	bl	8009eac <VL53L0X_GetLimitCheckEnable>
 800dc64:	4603      	mov	r3, r0
 800dc66:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 800dc6a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	d023      	beq.n	800dcba <VL53L0X_get_pal_range_status+0x242>
 800dc72:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	d11f      	bne.n	800dcba <VL53L0X_get_pal_range_status+0x242>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 800dc7a:	893b      	ldrh	r3, [r7, #8]
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d102      	bne.n	800dc86 <VL53L0X_get_pal_range_status+0x20e>
			SignalRatePerSpad = 0;
 800dc80:	2300      	movs	r3, #0
 800dc82:	637b      	str	r3, [r7, #52]	; 0x34
 800dc84:	e005      	b.n	800dc92 <VL53L0X_get_pal_range_status+0x21a>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	021a      	lsls	r2, r3, #8
 800dc8a:	893b      	ldrh	r3, [r7, #8]
 800dc8c:	fbb2 f3f3 	udiv	r3, r2, r3
 800dc90:	637b      	str	r3, [r7, #52]	; 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800dc92:	f107 0318 	add.w	r3, r7, #24
 800dc96:	461a      	mov	r2, r3
 800dc98:	2103      	movs	r1, #3
 800dc9a:	68f8      	ldr	r0, [r7, #12]
 800dc9c:	f7fc f98c 	bl	8009fb8 <VL53L0X_GetLimitCheckValue>
 800dca0:	4603      	mov	r3, r0
 800dca2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 800dca6:	69bb      	ldr	r3, [r7, #24]
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	d006      	beq.n	800dcba <VL53L0X_get_pal_range_status+0x242>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 800dcac:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 800dcae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dcb0:	429a      	cmp	r2, r3
 800dcb2:	d202      	bcs.n	800dcba <VL53L0X_get_pal_range_status+0x242>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 800dcb4:	2301      	movs	r3, #1
 800dcb6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800dcba:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d14a      	bne.n	800dd58 <VL53L0X_get_pal_range_status+0x2e0>
		if (NoneFlag == 1) {
 800dcc2:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800dcc6:	2b01      	cmp	r3, #1
 800dcc8:	d103      	bne.n	800dcd2 <VL53L0X_get_pal_range_status+0x25a>
			*pPalRangeStatus = 255;	 /* NONE */
 800dcca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dccc:	22ff      	movs	r2, #255	; 0xff
 800dcce:	701a      	strb	r2, [r3, #0]
 800dcd0:	e042      	b.n	800dd58 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 1 ||
 800dcd2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800dcd6:	2b01      	cmp	r3, #1
 800dcd8:	d007      	beq.n	800dcea <VL53L0X_get_pal_range_status+0x272>
 800dcda:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800dcde:	2b02      	cmp	r3, #2
 800dce0:	d003      	beq.n	800dcea <VL53L0X_get_pal_range_status+0x272>
					DeviceRangeStatusInternal == 2 ||
 800dce2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800dce6:	2b03      	cmp	r3, #3
 800dce8:	d103      	bne.n	800dcf2 <VL53L0X_get_pal_range_status+0x27a>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 800dcea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dcec:	2205      	movs	r2, #5
 800dcee:	701a      	strb	r2, [r3, #0]
 800dcf0:	e032      	b.n	800dd58 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 6 ||
 800dcf2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800dcf6:	2b06      	cmp	r3, #6
 800dcf8:	d003      	beq.n	800dd02 <VL53L0X_get_pal_range_status+0x28a>
 800dcfa:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800dcfe:	2b09      	cmp	r3, #9
 800dd00:	d103      	bne.n	800dd0a <VL53L0X_get_pal_range_status+0x292>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 800dd02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dd04:	2204      	movs	r2, #4
 800dd06:	701a      	strb	r2, [r3, #0]
 800dd08:	e026      	b.n	800dd58 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 8 ||
 800dd0a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800dd0e:	2b08      	cmp	r3, #8
 800dd10:	d007      	beq.n	800dd22 <VL53L0X_get_pal_range_status+0x2aa>
 800dd12:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800dd16:	2b0a      	cmp	r3, #10
 800dd18:	d003      	beq.n	800dd22 <VL53L0X_get_pal_range_status+0x2aa>
					DeviceRangeStatusInternal == 10 ||
 800dd1a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800dd1e:	2b01      	cmp	r3, #1
 800dd20:	d103      	bne.n	800dd2a <VL53L0X_get_pal_range_status+0x2b2>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 800dd22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dd24:	2203      	movs	r2, #3
 800dd26:	701a      	strb	r2, [r3, #0]
 800dd28:	e016      	b.n	800dd58 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 4 ||
 800dd2a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800dd2e:	2b04      	cmp	r3, #4
 800dd30:	d003      	beq.n	800dd3a <VL53L0X_get_pal_range_status+0x2c2>
 800dd32:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800dd36:	2b01      	cmp	r3, #1
 800dd38:	d103      	bne.n	800dd42 <VL53L0X_get_pal_range_status+0x2ca>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 800dd3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dd3c:	2202      	movs	r2, #2
 800dd3e:	701a      	strb	r2, [r3, #0]
 800dd40:	e00a      	b.n	800dd58 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (SigmaLimitflag == 1) {
 800dd42:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800dd46:	2b01      	cmp	r3, #1
 800dd48:	d103      	bne.n	800dd52 <VL53L0X_get_pal_range_status+0x2da>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 800dd4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dd4c:	2201      	movs	r2, #1
 800dd4e:	701a      	strb	r2, [r3, #0]
 800dd50:	e002      	b.n	800dd58 <VL53L0X_get_pal_range_status+0x2e0>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 800dd52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dd54:	2200      	movs	r2, #0
 800dd56:	701a      	strb	r2, [r3, #0]
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 800dd58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dd5a:	781b      	ldrb	r3, [r3, #0]
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	d102      	bne.n	800dd66 <VL53L0X_get_pal_range_status+0x2ee>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 800dd60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dd62:	2200      	movs	r2, #0
 800dd64:	815a      	strh	r2, [r3, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800dd66:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 800dd6a:	461a      	mov	r2, r3
 800dd6c:	2101      	movs	r1, #1
 800dd6e:	68f8      	ldr	r0, [r7, #12]
 800dd70:	f7fc f89c 	bl	8009eac <VL53L0X_GetLimitCheckEnable>
 800dd74:	4603      	mov	r3, r0
 800dd76:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 800dd7a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d14f      	bne.n	800de22 <VL53L0X_get_pal_range_status+0x3aa>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 800dd82:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	d003      	beq.n	800dd92 <VL53L0X_get_pal_range_status+0x31a>
 800dd8a:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800dd8e:	2b01      	cmp	r3, #1
 800dd90:	d103      	bne.n	800dd9a <VL53L0X_get_pal_range_status+0x322>
			Temp8 = 1;
 800dd92:	2301      	movs	r3, #1
 800dd94:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dd98:	e002      	b.n	800dda0 <VL53L0X_get_pal_range_status+0x328>
		else
			Temp8 = 0;
 800dd9a:	2300      	movs	r3, #0
 800dd9c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800dda0:	68fb      	ldr	r3, [r7, #12]
 800dda2:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800dda6:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 800ddaa:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800ddae:	2b04      	cmp	r3, #4
 800ddb0:	d003      	beq.n	800ddba <VL53L0X_get_pal_range_status+0x342>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 800ddb2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	d103      	bne.n	800ddc2 <VL53L0X_get_pal_range_status+0x34a>
			Temp8 = 1;
 800ddba:	2301      	movs	r3, #1
 800ddbc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ddc0:	e002      	b.n	800ddc8 <VL53L0X_get_pal_range_status+0x350>
		else
			Temp8 = 0;
 800ddc2:	2300      	movs	r3, #0
 800ddc4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800ddc8:	68fb      	ldr	r3, [r7, #12]
 800ddca:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800ddce:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 800ddd2:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	d003      	beq.n	800dde2 <VL53L0X_get_pal_range_status+0x36a>
 800ddda:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800ddde:	2b01      	cmp	r3, #1
 800dde0:	d103      	bne.n	800ddea <VL53L0X_get_pal_range_status+0x372>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 800dde2:	2301      	movs	r3, #1
 800dde4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dde8:	e002      	b.n	800ddf0 <VL53L0X_get_pal_range_status+0x378>
		else
			Temp8 = 0;
 800ddea:	2300      	movs	r3, #0
 800ddec:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800ddf0:	68fb      	ldr	r3, [r7, #12]
 800ddf2:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800ddf6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 800ddfa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ddfe:	2b00      	cmp	r3, #0
 800de00:	d003      	beq.n	800de0a <VL53L0X_get_pal_range_status+0x392>
 800de02:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800de06:	2b01      	cmp	r3, #1
 800de08:	d103      	bne.n	800de12 <VL53L0X_get_pal_range_status+0x39a>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 800de0a:	2301      	movs	r3, #1
 800de0c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800de10:	e002      	b.n	800de18 <VL53L0X_get_pal_range_status+0x3a0>
		else
			Temp8 = 0;
 800de12:	2300      	movs	r3, #0
 800de14:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800de18:	68fb      	ldr	r3, [r7, #12]
 800de1a:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800de1e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800de22:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f

}
 800de26:	4618      	mov	r0, r3
 800de28:	3740      	adds	r7, #64	; 0x40
 800de2a:	46bd      	mov	sp, r7
 800de2c:	bd80      	pop	{r7, pc}

0800de2e <_I2CWrite>:
#endif


uint8_t _I2CBuffer[64];

int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800de2e:	b580      	push	{r7, lr}
 800de30:	b088      	sub	sp, #32
 800de32:	af02      	add	r7, sp, #8
 800de34:	60f8      	str	r0, [r7, #12]
 800de36:	60b9      	str	r1, [r7, #8]
 800de38:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	330a      	adds	r3, #10
 800de3e:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 800de40:	68fb      	ldr	r3, [r7, #12]
 800de42:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 800de46:	68fb      	ldr	r3, [r7, #12]
 800de48:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800de4c:	b299      	uxth	r1, r3
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	b29a      	uxth	r2, r3
 800de52:	697b      	ldr	r3, [r7, #20]
 800de54:	9300      	str	r3, [sp, #0]
 800de56:	4613      	mov	r3, r2
 800de58:	68ba      	ldr	r2, [r7, #8]
 800de5a:	f7f4 fff5 	bl	8002e48 <HAL_I2C_Master_Transmit>
 800de5e:	4603      	mov	r3, r0
 800de60:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800de62:	693b      	ldr	r3, [r7, #16]
}
 800de64:	4618      	mov	r0, r3
 800de66:	3718      	adds	r7, #24
 800de68:	46bd      	mov	sp, r7
 800de6a:	bd80      	pop	{r7, pc}

0800de6c <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800de6c:	b580      	push	{r7, lr}
 800de6e:	b088      	sub	sp, #32
 800de70:	af02      	add	r7, sp, #8
 800de72:	60f8      	str	r0, [r7, #12]
 800de74:	60b9      	str	r1, [r7, #8]
 800de76:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	330a      	adds	r3, #10
 800de7c:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 800de7e:	68fb      	ldr	r3, [r7, #12]
 800de80:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 800de84:	68fb      	ldr	r3, [r7, #12]
 800de86:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800de8a:	f043 0301 	orr.w	r3, r3, #1
 800de8e:	b2db      	uxtb	r3, r3
 800de90:	b299      	uxth	r1, r3
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	b29a      	uxth	r2, r3
 800de96:	697b      	ldr	r3, [r7, #20]
 800de98:	9300      	str	r3, [sp, #0]
 800de9a:	4613      	mov	r3, r2
 800de9c:	68ba      	ldr	r2, [r7, #8]
 800de9e:	f7f5 f8c7 	bl	8003030 <HAL_I2C_Master_Receive>
 800dea2:	4603      	mov	r3, r0
 800dea4:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800dea6:	693b      	ldr	r3, [r7, #16]
}
 800dea8:	4618      	mov	r0, r3
 800deaa:	3718      	adds	r7, #24
 800deac:	46bd      	mov	sp, r7
 800deae:	bd80      	pop	{r7, pc}

0800deb0 <VL53L0X_WriteMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800deb0:	b580      	push	{r7, lr}
 800deb2:	b086      	sub	sp, #24
 800deb4:	af00      	add	r7, sp, #0
 800deb6:	60f8      	str	r0, [r7, #12]
 800deb8:	607a      	str	r2, [r7, #4]
 800deba:	603b      	str	r3, [r7, #0]
 800debc:	460b      	mov	r3, r1
 800debe:	72fb      	strb	r3, [r7, #11]
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800dec0:	2300      	movs	r3, #0
 800dec2:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 800dec4:	683b      	ldr	r3, [r7, #0]
 800dec6:	2b3f      	cmp	r3, #63	; 0x3f
 800dec8:	d902      	bls.n	800ded0 <VL53L0X_WriteMulti+0x20>
        return VL53L0X_ERROR_INVALID_PARAMS;
 800deca:	f06f 0303 	mvn.w	r3, #3
 800dece:	e016      	b.n	800defe <VL53L0X_WriteMulti+0x4e>
    }
    _I2CBuffer[0] = index;
 800ded0:	4a0d      	ldr	r2, [pc, #52]	; (800df08 <VL53L0X_WriteMulti+0x58>)
 800ded2:	7afb      	ldrb	r3, [r7, #11]
 800ded4:	7013      	strb	r3, [r2, #0]
    memcpy(&_I2CBuffer[1], pdata, count);
 800ded6:	683a      	ldr	r2, [r7, #0]
 800ded8:	6879      	ldr	r1, [r7, #4]
 800deda:	480c      	ldr	r0, [pc, #48]	; (800df0c <VL53L0X_WriteMulti+0x5c>)
 800dedc:	f000 f99e 	bl	800e21c <memcpy>
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 800dee0:	683b      	ldr	r3, [r7, #0]
 800dee2:	3301      	adds	r3, #1
 800dee4:	461a      	mov	r2, r3
 800dee6:	4908      	ldr	r1, [pc, #32]	; (800df08 <VL53L0X_WriteMulti+0x58>)
 800dee8:	68f8      	ldr	r0, [r7, #12]
 800deea:	f7ff ffa0 	bl	800de2e <_I2CWrite>
 800deee:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800def0:	693b      	ldr	r3, [r7, #16]
 800def2:	2b00      	cmp	r3, #0
 800def4:	d001      	beq.n	800defa <VL53L0X_WriteMulti+0x4a>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800def6:	23ec      	movs	r3, #236	; 0xec
 800def8:	75fb      	strb	r3, [r7, #23]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800defa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800defe:	4618      	mov	r0, r3
 800df00:	3718      	adds	r7, #24
 800df02:	46bd      	mov	sp, r7
 800df04:	bd80      	pop	{r7, pc}
 800df06:	bf00      	nop
 800df08:	2000071c 	.word	0x2000071c
 800df0c:	2000071d 	.word	0x2000071d

0800df10 <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800df10:	b580      	push	{r7, lr}
 800df12:	b086      	sub	sp, #24
 800df14:	af00      	add	r7, sp, #0
 800df16:	60f8      	str	r0, [r7, #12]
 800df18:	607a      	str	r2, [r7, #4]
 800df1a:	603b      	str	r3, [r7, #0]
 800df1c:	460b      	mov	r3, r1
 800df1e:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800df20:	2300      	movs	r3, #0
 800df22:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800df24:	f107 030b 	add.w	r3, r7, #11
 800df28:	2201      	movs	r2, #1
 800df2a:	4619      	mov	r1, r3
 800df2c:	68f8      	ldr	r0, [r7, #12]
 800df2e:	f7ff ff7e 	bl	800de2e <_I2CWrite>
 800df32:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800df34:	693b      	ldr	r3, [r7, #16]
 800df36:	2b00      	cmp	r3, #0
 800df38:	d002      	beq.n	800df40 <VL53L0X_ReadMulti+0x30>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800df3a:	23ec      	movs	r3, #236	; 0xec
 800df3c:	75fb      	strb	r3, [r7, #23]
        goto done;
 800df3e:	e00c      	b.n	800df5a <VL53L0X_ReadMulti+0x4a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 800df40:	683a      	ldr	r2, [r7, #0]
 800df42:	6879      	ldr	r1, [r7, #4]
 800df44:	68f8      	ldr	r0, [r7, #12]
 800df46:	f7ff ff91 	bl	800de6c <_I2CRead>
 800df4a:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800df4c:	693b      	ldr	r3, [r7, #16]
 800df4e:	2b00      	cmp	r3, #0
 800df50:	d002      	beq.n	800df58 <VL53L0X_ReadMulti+0x48>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800df52:	23ec      	movs	r3, #236	; 0xec
 800df54:	75fb      	strb	r3, [r7, #23]
 800df56:	e000      	b.n	800df5a <VL53L0X_ReadMulti+0x4a>
    }
done:
 800df58:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 800df5a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800df5e:	4618      	mov	r0, r3
 800df60:	3718      	adds	r7, #24
 800df62:	46bd      	mov	sp, r7
 800df64:	bd80      	pop	{r7, pc}
	...

0800df68 <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 800df68:	b580      	push	{r7, lr}
 800df6a:	b084      	sub	sp, #16
 800df6c:	af00      	add	r7, sp, #0
 800df6e:	6078      	str	r0, [r7, #4]
 800df70:	460b      	mov	r3, r1
 800df72:	70fb      	strb	r3, [r7, #3]
 800df74:	4613      	mov	r3, r2
 800df76:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800df78:	2300      	movs	r3, #0
 800df7a:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800df7c:	4a0b      	ldr	r2, [pc, #44]	; (800dfac <VL53L0X_WrByte+0x44>)
 800df7e:	78fb      	ldrb	r3, [r7, #3]
 800df80:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data;
 800df82:	4a0a      	ldr	r2, [pc, #40]	; (800dfac <VL53L0X_WrByte+0x44>)
 800df84:	78bb      	ldrb	r3, [r7, #2]
 800df86:	7053      	strb	r3, [r2, #1]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800df88:	2202      	movs	r2, #2
 800df8a:	4908      	ldr	r1, [pc, #32]	; (800dfac <VL53L0X_WrByte+0x44>)
 800df8c:	6878      	ldr	r0, [r7, #4]
 800df8e:	f7ff ff4e 	bl	800de2e <_I2CWrite>
 800df92:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800df94:	68bb      	ldr	r3, [r7, #8]
 800df96:	2b00      	cmp	r3, #0
 800df98:	d001      	beq.n	800df9e <VL53L0X_WrByte+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800df9a:	23ec      	movs	r3, #236	; 0xec
 800df9c:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800df9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800dfa2:	4618      	mov	r0, r3
 800dfa4:	3710      	adds	r7, #16
 800dfa6:	46bd      	mov	sp, r7
 800dfa8:	bd80      	pop	{r7, pc}
 800dfaa:	bf00      	nop
 800dfac:	2000071c 	.word	0x2000071c

0800dfb0 <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 800dfb0:	b580      	push	{r7, lr}
 800dfb2:	b084      	sub	sp, #16
 800dfb4:	af00      	add	r7, sp, #0
 800dfb6:	6078      	str	r0, [r7, #4]
 800dfb8:	460b      	mov	r3, r1
 800dfba:	70fb      	strb	r3, [r7, #3]
 800dfbc:	4613      	mov	r3, r2
 800dfbe:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800dfc0:	2300      	movs	r3, #0
 800dfc2:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800dfc4:	4a0e      	ldr	r2, [pc, #56]	; (800e000 <VL53L0X_WrWord+0x50>)
 800dfc6:	78fb      	ldrb	r3, [r7, #3]
 800dfc8:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data >> 8;
 800dfca:	883b      	ldrh	r3, [r7, #0]
 800dfcc:	0a1b      	lsrs	r3, r3, #8
 800dfce:	b29b      	uxth	r3, r3
 800dfd0:	b2da      	uxtb	r2, r3
 800dfd2:	4b0b      	ldr	r3, [pc, #44]	; (800e000 <VL53L0X_WrWord+0x50>)
 800dfd4:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 800dfd6:	883b      	ldrh	r3, [r7, #0]
 800dfd8:	b2da      	uxtb	r2, r3
 800dfda:	4b09      	ldr	r3, [pc, #36]	; (800e000 <VL53L0X_WrWord+0x50>)
 800dfdc:	709a      	strb	r2, [r3, #2]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 800dfde:	2203      	movs	r2, #3
 800dfe0:	4907      	ldr	r1, [pc, #28]	; (800e000 <VL53L0X_WrWord+0x50>)
 800dfe2:	6878      	ldr	r0, [r7, #4]
 800dfe4:	f7ff ff23 	bl	800de2e <_I2CWrite>
 800dfe8:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800dfea:	68bb      	ldr	r3, [r7, #8]
 800dfec:	2b00      	cmp	r3, #0
 800dfee:	d001      	beq.n	800dff4 <VL53L0X_WrWord+0x44>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800dff0:	23ec      	movs	r3, #236	; 0xec
 800dff2:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800dff4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800dff8:	4618      	mov	r0, r3
 800dffa:	3710      	adds	r7, #16
 800dffc:	46bd      	mov	sp, r7
 800dffe:	bd80      	pop	{r7, pc}
 800e000:	2000071c 	.word	0x2000071c

0800e004 <VL53L0X_UpdateByte>:
    }
    VL53L0X_PutI2cBus();
    return Status;
}

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 800e004:	b580      	push	{r7, lr}
 800e006:	b084      	sub	sp, #16
 800e008:	af00      	add	r7, sp, #0
 800e00a:	6078      	str	r0, [r7, #4]
 800e00c:	4608      	mov	r0, r1
 800e00e:	4611      	mov	r1, r2
 800e010:	461a      	mov	r2, r3
 800e012:	4603      	mov	r3, r0
 800e014:	70fb      	strb	r3, [r7, #3]
 800e016:	460b      	mov	r3, r1
 800e018:	70bb      	strb	r3, [r7, #2]
 800e01a:	4613      	mov	r3, r2
 800e01c:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800e01e:	2300      	movs	r3, #0
 800e020:	73fb      	strb	r3, [r7, #15]
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 800e022:	f107 020e 	add.w	r2, r7, #14
 800e026:	78fb      	ldrb	r3, [r7, #3]
 800e028:	4619      	mov	r1, r3
 800e02a:	6878      	ldr	r0, [r7, #4]
 800e02c:	f000 f81e 	bl	800e06c <VL53L0X_RdByte>
 800e030:	4603      	mov	r3, r0
 800e032:	73fb      	strb	r3, [r7, #15]
    if (Status) {
 800e034:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e038:	2b00      	cmp	r3, #0
 800e03a:	d110      	bne.n	800e05e <VL53L0X_UpdateByte+0x5a>
        goto done;
    }
    data = (data & AndData) | OrData;
 800e03c:	7bba      	ldrb	r2, [r7, #14]
 800e03e:	78bb      	ldrb	r3, [r7, #2]
 800e040:	4013      	ands	r3, r2
 800e042:	b2da      	uxtb	r2, r3
 800e044:	787b      	ldrb	r3, [r7, #1]
 800e046:	4313      	orrs	r3, r2
 800e048:	b2db      	uxtb	r3, r3
 800e04a:	73bb      	strb	r3, [r7, #14]
    Status = VL53L0X_WrByte(Dev, index, data);
 800e04c:	7bba      	ldrb	r2, [r7, #14]
 800e04e:	78fb      	ldrb	r3, [r7, #3]
 800e050:	4619      	mov	r1, r3
 800e052:	6878      	ldr	r0, [r7, #4]
 800e054:	f7ff ff88 	bl	800df68 <VL53L0X_WrByte>
 800e058:	4603      	mov	r3, r0
 800e05a:	73fb      	strb	r3, [r7, #15]
 800e05c:	e000      	b.n	800e060 <VL53L0X_UpdateByte+0x5c>
        goto done;
 800e05e:	bf00      	nop
done:
    return Status;
 800e060:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e064:	4618      	mov	r0, r3
 800e066:	3710      	adds	r7, #16
 800e068:	46bd      	mov	sp, r7
 800e06a:	bd80      	pop	{r7, pc}

0800e06c <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 800e06c:	b580      	push	{r7, lr}
 800e06e:	b086      	sub	sp, #24
 800e070:	af00      	add	r7, sp, #0
 800e072:	60f8      	str	r0, [r7, #12]
 800e074:	460b      	mov	r3, r1
 800e076:	607a      	str	r2, [r7, #4]
 800e078:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800e07a:	2300      	movs	r3, #0
 800e07c:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800e07e:	f107 030b 	add.w	r3, r7, #11
 800e082:	2201      	movs	r2, #1
 800e084:	4619      	mov	r1, r3
 800e086:	68f8      	ldr	r0, [r7, #12]
 800e088:	f7ff fed1 	bl	800de2e <_I2CWrite>
 800e08c:	6138      	str	r0, [r7, #16]
    if( status_int ){
 800e08e:	693b      	ldr	r3, [r7, #16]
 800e090:	2b00      	cmp	r3, #0
 800e092:	d002      	beq.n	800e09a <VL53L0X_RdByte+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800e094:	23ec      	movs	r3, #236	; 0xec
 800e096:	75fb      	strb	r3, [r7, #23]
        goto done;
 800e098:	e00c      	b.n	800e0b4 <VL53L0X_RdByte+0x48>
    }
    status_int = _I2CRead(Dev, data, 1);
 800e09a:	2201      	movs	r2, #1
 800e09c:	6879      	ldr	r1, [r7, #4]
 800e09e:	68f8      	ldr	r0, [r7, #12]
 800e0a0:	f7ff fee4 	bl	800de6c <_I2CRead>
 800e0a4:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800e0a6:	693b      	ldr	r3, [r7, #16]
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	d002      	beq.n	800e0b2 <VL53L0X_RdByte+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800e0ac:	23ec      	movs	r3, #236	; 0xec
 800e0ae:	75fb      	strb	r3, [r7, #23]
 800e0b0:	e000      	b.n	800e0b4 <VL53L0X_RdByte+0x48>
    }
done:
 800e0b2:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 800e0b4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e0b8:	4618      	mov	r0, r3
 800e0ba:	3718      	adds	r7, #24
 800e0bc:	46bd      	mov	sp, r7
 800e0be:	bd80      	pop	{r7, pc}

0800e0c0 <VL53L0X_RdWord>:

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 800e0c0:	b580      	push	{r7, lr}
 800e0c2:	b086      	sub	sp, #24
 800e0c4:	af00      	add	r7, sp, #0
 800e0c6:	60f8      	str	r0, [r7, #12]
 800e0c8:	460b      	mov	r3, r1
 800e0ca:	607a      	str	r2, [r7, #4]
 800e0cc:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800e0ce:	2300      	movs	r3, #0
 800e0d0:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800e0d2:	f107 030b 	add.w	r3, r7, #11
 800e0d6:	2201      	movs	r2, #1
 800e0d8:	4619      	mov	r1, r3
 800e0da:	68f8      	ldr	r0, [r7, #12]
 800e0dc:	f7ff fea7 	bl	800de2e <_I2CWrite>
 800e0e0:	6138      	str	r0, [r7, #16]

    if( status_int ){
 800e0e2:	693b      	ldr	r3, [r7, #16]
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	d002      	beq.n	800e0ee <VL53L0X_RdWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800e0e8:	23ec      	movs	r3, #236	; 0xec
 800e0ea:	75fb      	strb	r3, [r7, #23]
        goto done;
 800e0ec:	e017      	b.n	800e11e <VL53L0X_RdWord+0x5e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 800e0ee:	2202      	movs	r2, #2
 800e0f0:	490e      	ldr	r1, [pc, #56]	; (800e12c <VL53L0X_RdWord+0x6c>)
 800e0f2:	68f8      	ldr	r0, [r7, #12]
 800e0f4:	f7ff feba 	bl	800de6c <_I2CRead>
 800e0f8:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800e0fa:	693b      	ldr	r3, [r7, #16]
 800e0fc:	2b00      	cmp	r3, #0
 800e0fe:	d002      	beq.n	800e106 <VL53L0X_RdWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800e100:	23ec      	movs	r3, #236	; 0xec
 800e102:	75fb      	strb	r3, [r7, #23]
        goto done;
 800e104:	e00b      	b.n	800e11e <VL53L0X_RdWord+0x5e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 800e106:	4b09      	ldr	r3, [pc, #36]	; (800e12c <VL53L0X_RdWord+0x6c>)
 800e108:	781b      	ldrb	r3, [r3, #0]
 800e10a:	b29b      	uxth	r3, r3
 800e10c:	021b      	lsls	r3, r3, #8
 800e10e:	b29a      	uxth	r2, r3
 800e110:	4b06      	ldr	r3, [pc, #24]	; (800e12c <VL53L0X_RdWord+0x6c>)
 800e112:	785b      	ldrb	r3, [r3, #1]
 800e114:	b29b      	uxth	r3, r3
 800e116:	4413      	add	r3, r2
 800e118:	b29a      	uxth	r2, r3
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	801a      	strh	r2, [r3, #0]
done:
    VL53L0X_PutI2cBus();
    return Status;
 800e11e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e122:	4618      	mov	r0, r3
 800e124:	3718      	adds	r7, #24
 800e126:	46bd      	mov	sp, r7
 800e128:	bd80      	pop	{r7, pc}
 800e12a:	bf00      	nop
 800e12c:	2000071c 	.word	0x2000071c

0800e130 <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 800e130:	b580      	push	{r7, lr}
 800e132:	b086      	sub	sp, #24
 800e134:	af00      	add	r7, sp, #0
 800e136:	60f8      	str	r0, [r7, #12]
 800e138:	460b      	mov	r3, r1
 800e13a:	607a      	str	r2, [r7, #4]
 800e13c:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800e13e:	2300      	movs	r3, #0
 800e140:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800e142:	f107 030b 	add.w	r3, r7, #11
 800e146:	2201      	movs	r2, #1
 800e148:	4619      	mov	r1, r3
 800e14a:	68f8      	ldr	r0, [r7, #12]
 800e14c:	f7ff fe6f 	bl	800de2e <_I2CWrite>
 800e150:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800e152:	693b      	ldr	r3, [r7, #16]
 800e154:	2b00      	cmp	r3, #0
 800e156:	d002      	beq.n	800e15e <VL53L0X_RdDWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800e158:	23ec      	movs	r3, #236	; 0xec
 800e15a:	75fb      	strb	r3, [r7, #23]
        goto done;
 800e15c:	e01b      	b.n	800e196 <VL53L0X_RdDWord+0x66>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 800e15e:	2204      	movs	r2, #4
 800e160:	4910      	ldr	r1, [pc, #64]	; (800e1a4 <VL53L0X_RdDWord+0x74>)
 800e162:	68f8      	ldr	r0, [r7, #12]
 800e164:	f7ff fe82 	bl	800de6c <_I2CRead>
 800e168:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800e16a:	693b      	ldr	r3, [r7, #16]
 800e16c:	2b00      	cmp	r3, #0
 800e16e:	d002      	beq.n	800e176 <VL53L0X_RdDWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800e170:	23ec      	movs	r3, #236	; 0xec
 800e172:	75fb      	strb	r3, [r7, #23]
        goto done;
 800e174:	e00f      	b.n	800e196 <VL53L0X_RdDWord+0x66>
    }

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 800e176:	4b0b      	ldr	r3, [pc, #44]	; (800e1a4 <VL53L0X_RdDWord+0x74>)
 800e178:	781b      	ldrb	r3, [r3, #0]
 800e17a:	061a      	lsls	r2, r3, #24
 800e17c:	4b09      	ldr	r3, [pc, #36]	; (800e1a4 <VL53L0X_RdDWord+0x74>)
 800e17e:	785b      	ldrb	r3, [r3, #1]
 800e180:	041b      	lsls	r3, r3, #16
 800e182:	441a      	add	r2, r3
 800e184:	4b07      	ldr	r3, [pc, #28]	; (800e1a4 <VL53L0X_RdDWord+0x74>)
 800e186:	789b      	ldrb	r3, [r3, #2]
 800e188:	021b      	lsls	r3, r3, #8
 800e18a:	4413      	add	r3, r2
 800e18c:	4a05      	ldr	r2, [pc, #20]	; (800e1a4 <VL53L0X_RdDWord+0x74>)
 800e18e:	78d2      	ldrb	r2, [r2, #3]
 800e190:	441a      	add	r2, r3
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	601a      	str	r2, [r3, #0]

done:
    VL53L0X_PutI2cBus();
    return Status;
 800e196:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e19a:	4618      	mov	r0, r3
 800e19c:	3718      	adds	r7, #24
 800e19e:	46bd      	mov	sp, r7
 800e1a0:	bd80      	pop	{r7, pc}
 800e1a2:	bf00      	nop
 800e1a4:	2000071c 	.word	0x2000071c

0800e1a8 <VL53L0X_PollingDelay>:

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 800e1a8:	b580      	push	{r7, lr}
 800e1aa:	b084      	sub	sp, #16
 800e1ac:	af00      	add	r7, sp, #0
 800e1ae:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800e1b0:	2300      	movs	r3, #0
 800e1b2:	73fb      	strb	r3, [r7, #15]

    // do nothing
    VL53L0X_OsDelay();
 800e1b4:	2002      	movs	r0, #2
 800e1b6:	f7f3 ff5b 	bl	8002070 <HAL_Delay>
    return status;
 800e1ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e1be:	4618      	mov	r0, r3
 800e1c0:	3710      	adds	r7, #16
 800e1c2:	46bd      	mov	sp, r7
 800e1c4:	bd80      	pop	{r7, pc}
	...

0800e1c8 <__errno>:
 800e1c8:	4b01      	ldr	r3, [pc, #4]	; (800e1d0 <__errno+0x8>)
 800e1ca:	6818      	ldr	r0, [r3, #0]
 800e1cc:	4770      	bx	lr
 800e1ce:	bf00      	nop
 800e1d0:	200002c8 	.word	0x200002c8

0800e1d4 <__libc_init_array>:
 800e1d4:	b570      	push	{r4, r5, r6, lr}
 800e1d6:	4d0d      	ldr	r5, [pc, #52]	; (800e20c <__libc_init_array+0x38>)
 800e1d8:	4c0d      	ldr	r4, [pc, #52]	; (800e210 <__libc_init_array+0x3c>)
 800e1da:	1b64      	subs	r4, r4, r5
 800e1dc:	10a4      	asrs	r4, r4, #2
 800e1de:	2600      	movs	r6, #0
 800e1e0:	42a6      	cmp	r6, r4
 800e1e2:	d109      	bne.n	800e1f8 <__libc_init_array+0x24>
 800e1e4:	4d0b      	ldr	r5, [pc, #44]	; (800e214 <__libc_init_array+0x40>)
 800e1e6:	4c0c      	ldr	r4, [pc, #48]	; (800e218 <__libc_init_array+0x44>)
 800e1e8:	f004 fc96 	bl	8012b18 <_init>
 800e1ec:	1b64      	subs	r4, r4, r5
 800e1ee:	10a4      	asrs	r4, r4, #2
 800e1f0:	2600      	movs	r6, #0
 800e1f2:	42a6      	cmp	r6, r4
 800e1f4:	d105      	bne.n	800e202 <__libc_init_array+0x2e>
 800e1f6:	bd70      	pop	{r4, r5, r6, pc}
 800e1f8:	f855 3b04 	ldr.w	r3, [r5], #4
 800e1fc:	4798      	blx	r3
 800e1fe:	3601      	adds	r6, #1
 800e200:	e7ee      	b.n	800e1e0 <__libc_init_array+0xc>
 800e202:	f855 3b04 	ldr.w	r3, [r5], #4
 800e206:	4798      	blx	r3
 800e208:	3601      	adds	r6, #1
 800e20a:	e7f2      	b.n	800e1f2 <__libc_init_array+0x1e>
 800e20c:	0801323c 	.word	0x0801323c
 800e210:	0801323c 	.word	0x0801323c
 800e214:	0801323c 	.word	0x0801323c
 800e218:	08013240 	.word	0x08013240

0800e21c <memcpy>:
 800e21c:	440a      	add	r2, r1
 800e21e:	4291      	cmp	r1, r2
 800e220:	f100 33ff 	add.w	r3, r0, #4294967295
 800e224:	d100      	bne.n	800e228 <memcpy+0xc>
 800e226:	4770      	bx	lr
 800e228:	b510      	push	{r4, lr}
 800e22a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e22e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e232:	4291      	cmp	r1, r2
 800e234:	d1f9      	bne.n	800e22a <memcpy+0xe>
 800e236:	bd10      	pop	{r4, pc}

0800e238 <memset>:
 800e238:	4402      	add	r2, r0
 800e23a:	4603      	mov	r3, r0
 800e23c:	4293      	cmp	r3, r2
 800e23e:	d100      	bne.n	800e242 <memset+0xa>
 800e240:	4770      	bx	lr
 800e242:	f803 1b01 	strb.w	r1, [r3], #1
 800e246:	e7f9      	b.n	800e23c <memset+0x4>

0800e248 <__cvt>:
 800e248:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e24c:	ec55 4b10 	vmov	r4, r5, d0
 800e250:	2d00      	cmp	r5, #0
 800e252:	460e      	mov	r6, r1
 800e254:	4619      	mov	r1, r3
 800e256:	462b      	mov	r3, r5
 800e258:	bfbb      	ittet	lt
 800e25a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800e25e:	461d      	movlt	r5, r3
 800e260:	2300      	movge	r3, #0
 800e262:	232d      	movlt	r3, #45	; 0x2d
 800e264:	700b      	strb	r3, [r1, #0]
 800e266:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e268:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800e26c:	4691      	mov	r9, r2
 800e26e:	f023 0820 	bic.w	r8, r3, #32
 800e272:	bfbc      	itt	lt
 800e274:	4622      	movlt	r2, r4
 800e276:	4614      	movlt	r4, r2
 800e278:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e27c:	d005      	beq.n	800e28a <__cvt+0x42>
 800e27e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800e282:	d100      	bne.n	800e286 <__cvt+0x3e>
 800e284:	3601      	adds	r6, #1
 800e286:	2102      	movs	r1, #2
 800e288:	e000      	b.n	800e28c <__cvt+0x44>
 800e28a:	2103      	movs	r1, #3
 800e28c:	ab03      	add	r3, sp, #12
 800e28e:	9301      	str	r3, [sp, #4]
 800e290:	ab02      	add	r3, sp, #8
 800e292:	9300      	str	r3, [sp, #0]
 800e294:	ec45 4b10 	vmov	d0, r4, r5
 800e298:	4653      	mov	r3, sl
 800e29a:	4632      	mov	r2, r6
 800e29c:	f001 fdb4 	bl	800fe08 <_dtoa_r>
 800e2a0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800e2a4:	4607      	mov	r7, r0
 800e2a6:	d102      	bne.n	800e2ae <__cvt+0x66>
 800e2a8:	f019 0f01 	tst.w	r9, #1
 800e2ac:	d022      	beq.n	800e2f4 <__cvt+0xac>
 800e2ae:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e2b2:	eb07 0906 	add.w	r9, r7, r6
 800e2b6:	d110      	bne.n	800e2da <__cvt+0x92>
 800e2b8:	783b      	ldrb	r3, [r7, #0]
 800e2ba:	2b30      	cmp	r3, #48	; 0x30
 800e2bc:	d10a      	bne.n	800e2d4 <__cvt+0x8c>
 800e2be:	2200      	movs	r2, #0
 800e2c0:	2300      	movs	r3, #0
 800e2c2:	4620      	mov	r0, r4
 800e2c4:	4629      	mov	r1, r5
 800e2c6:	f7f2 fc1f 	bl	8000b08 <__aeabi_dcmpeq>
 800e2ca:	b918      	cbnz	r0, 800e2d4 <__cvt+0x8c>
 800e2cc:	f1c6 0601 	rsb	r6, r6, #1
 800e2d0:	f8ca 6000 	str.w	r6, [sl]
 800e2d4:	f8da 3000 	ldr.w	r3, [sl]
 800e2d8:	4499      	add	r9, r3
 800e2da:	2200      	movs	r2, #0
 800e2dc:	2300      	movs	r3, #0
 800e2de:	4620      	mov	r0, r4
 800e2e0:	4629      	mov	r1, r5
 800e2e2:	f7f2 fc11 	bl	8000b08 <__aeabi_dcmpeq>
 800e2e6:	b108      	cbz	r0, 800e2ec <__cvt+0xa4>
 800e2e8:	f8cd 900c 	str.w	r9, [sp, #12]
 800e2ec:	2230      	movs	r2, #48	; 0x30
 800e2ee:	9b03      	ldr	r3, [sp, #12]
 800e2f0:	454b      	cmp	r3, r9
 800e2f2:	d307      	bcc.n	800e304 <__cvt+0xbc>
 800e2f4:	9b03      	ldr	r3, [sp, #12]
 800e2f6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e2f8:	1bdb      	subs	r3, r3, r7
 800e2fa:	4638      	mov	r0, r7
 800e2fc:	6013      	str	r3, [r2, #0]
 800e2fe:	b004      	add	sp, #16
 800e300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e304:	1c59      	adds	r1, r3, #1
 800e306:	9103      	str	r1, [sp, #12]
 800e308:	701a      	strb	r2, [r3, #0]
 800e30a:	e7f0      	b.n	800e2ee <__cvt+0xa6>

0800e30c <__exponent>:
 800e30c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e30e:	4603      	mov	r3, r0
 800e310:	2900      	cmp	r1, #0
 800e312:	bfb8      	it	lt
 800e314:	4249      	neglt	r1, r1
 800e316:	f803 2b02 	strb.w	r2, [r3], #2
 800e31a:	bfb4      	ite	lt
 800e31c:	222d      	movlt	r2, #45	; 0x2d
 800e31e:	222b      	movge	r2, #43	; 0x2b
 800e320:	2909      	cmp	r1, #9
 800e322:	7042      	strb	r2, [r0, #1]
 800e324:	dd2a      	ble.n	800e37c <__exponent+0x70>
 800e326:	f10d 0407 	add.w	r4, sp, #7
 800e32a:	46a4      	mov	ip, r4
 800e32c:	270a      	movs	r7, #10
 800e32e:	46a6      	mov	lr, r4
 800e330:	460a      	mov	r2, r1
 800e332:	fb91 f6f7 	sdiv	r6, r1, r7
 800e336:	fb07 1516 	mls	r5, r7, r6, r1
 800e33a:	3530      	adds	r5, #48	; 0x30
 800e33c:	2a63      	cmp	r2, #99	; 0x63
 800e33e:	f104 34ff 	add.w	r4, r4, #4294967295
 800e342:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800e346:	4631      	mov	r1, r6
 800e348:	dcf1      	bgt.n	800e32e <__exponent+0x22>
 800e34a:	3130      	adds	r1, #48	; 0x30
 800e34c:	f1ae 0502 	sub.w	r5, lr, #2
 800e350:	f804 1c01 	strb.w	r1, [r4, #-1]
 800e354:	1c44      	adds	r4, r0, #1
 800e356:	4629      	mov	r1, r5
 800e358:	4561      	cmp	r1, ip
 800e35a:	d30a      	bcc.n	800e372 <__exponent+0x66>
 800e35c:	f10d 0209 	add.w	r2, sp, #9
 800e360:	eba2 020e 	sub.w	r2, r2, lr
 800e364:	4565      	cmp	r5, ip
 800e366:	bf88      	it	hi
 800e368:	2200      	movhi	r2, #0
 800e36a:	4413      	add	r3, r2
 800e36c:	1a18      	subs	r0, r3, r0
 800e36e:	b003      	add	sp, #12
 800e370:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e372:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e376:	f804 2f01 	strb.w	r2, [r4, #1]!
 800e37a:	e7ed      	b.n	800e358 <__exponent+0x4c>
 800e37c:	2330      	movs	r3, #48	; 0x30
 800e37e:	3130      	adds	r1, #48	; 0x30
 800e380:	7083      	strb	r3, [r0, #2]
 800e382:	70c1      	strb	r1, [r0, #3]
 800e384:	1d03      	adds	r3, r0, #4
 800e386:	e7f1      	b.n	800e36c <__exponent+0x60>

0800e388 <_printf_float>:
 800e388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e38c:	ed2d 8b02 	vpush	{d8}
 800e390:	b08d      	sub	sp, #52	; 0x34
 800e392:	460c      	mov	r4, r1
 800e394:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800e398:	4616      	mov	r6, r2
 800e39a:	461f      	mov	r7, r3
 800e39c:	4605      	mov	r5, r0
 800e39e:	f002 fe91 	bl	80110c4 <_localeconv_r>
 800e3a2:	f8d0 a000 	ldr.w	sl, [r0]
 800e3a6:	4650      	mov	r0, sl
 800e3a8:	f7f1 ff32 	bl	8000210 <strlen>
 800e3ac:	2300      	movs	r3, #0
 800e3ae:	930a      	str	r3, [sp, #40]	; 0x28
 800e3b0:	6823      	ldr	r3, [r4, #0]
 800e3b2:	9305      	str	r3, [sp, #20]
 800e3b4:	f8d8 3000 	ldr.w	r3, [r8]
 800e3b8:	f894 b018 	ldrb.w	fp, [r4, #24]
 800e3bc:	3307      	adds	r3, #7
 800e3be:	f023 0307 	bic.w	r3, r3, #7
 800e3c2:	f103 0208 	add.w	r2, r3, #8
 800e3c6:	f8c8 2000 	str.w	r2, [r8]
 800e3ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3ce:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800e3d2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800e3d6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e3da:	9307      	str	r3, [sp, #28]
 800e3dc:	f8cd 8018 	str.w	r8, [sp, #24]
 800e3e0:	ee08 0a10 	vmov	s16, r0
 800e3e4:	4b9f      	ldr	r3, [pc, #636]	; (800e664 <_printf_float+0x2dc>)
 800e3e6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e3ea:	f04f 32ff 	mov.w	r2, #4294967295
 800e3ee:	f7f2 fbbd 	bl	8000b6c <__aeabi_dcmpun>
 800e3f2:	bb88      	cbnz	r0, 800e458 <_printf_float+0xd0>
 800e3f4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e3f8:	4b9a      	ldr	r3, [pc, #616]	; (800e664 <_printf_float+0x2dc>)
 800e3fa:	f04f 32ff 	mov.w	r2, #4294967295
 800e3fe:	f7f2 fb97 	bl	8000b30 <__aeabi_dcmple>
 800e402:	bb48      	cbnz	r0, 800e458 <_printf_float+0xd0>
 800e404:	2200      	movs	r2, #0
 800e406:	2300      	movs	r3, #0
 800e408:	4640      	mov	r0, r8
 800e40a:	4649      	mov	r1, r9
 800e40c:	f7f2 fb86 	bl	8000b1c <__aeabi_dcmplt>
 800e410:	b110      	cbz	r0, 800e418 <_printf_float+0x90>
 800e412:	232d      	movs	r3, #45	; 0x2d
 800e414:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e418:	4b93      	ldr	r3, [pc, #588]	; (800e668 <_printf_float+0x2e0>)
 800e41a:	4894      	ldr	r0, [pc, #592]	; (800e66c <_printf_float+0x2e4>)
 800e41c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800e420:	bf94      	ite	ls
 800e422:	4698      	movls	r8, r3
 800e424:	4680      	movhi	r8, r0
 800e426:	2303      	movs	r3, #3
 800e428:	6123      	str	r3, [r4, #16]
 800e42a:	9b05      	ldr	r3, [sp, #20]
 800e42c:	f023 0204 	bic.w	r2, r3, #4
 800e430:	6022      	str	r2, [r4, #0]
 800e432:	f04f 0900 	mov.w	r9, #0
 800e436:	9700      	str	r7, [sp, #0]
 800e438:	4633      	mov	r3, r6
 800e43a:	aa0b      	add	r2, sp, #44	; 0x2c
 800e43c:	4621      	mov	r1, r4
 800e43e:	4628      	mov	r0, r5
 800e440:	f000 f9d8 	bl	800e7f4 <_printf_common>
 800e444:	3001      	adds	r0, #1
 800e446:	f040 8090 	bne.w	800e56a <_printf_float+0x1e2>
 800e44a:	f04f 30ff 	mov.w	r0, #4294967295
 800e44e:	b00d      	add	sp, #52	; 0x34
 800e450:	ecbd 8b02 	vpop	{d8}
 800e454:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e458:	4642      	mov	r2, r8
 800e45a:	464b      	mov	r3, r9
 800e45c:	4640      	mov	r0, r8
 800e45e:	4649      	mov	r1, r9
 800e460:	f7f2 fb84 	bl	8000b6c <__aeabi_dcmpun>
 800e464:	b140      	cbz	r0, 800e478 <_printf_float+0xf0>
 800e466:	464b      	mov	r3, r9
 800e468:	2b00      	cmp	r3, #0
 800e46a:	bfbc      	itt	lt
 800e46c:	232d      	movlt	r3, #45	; 0x2d
 800e46e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800e472:	487f      	ldr	r0, [pc, #508]	; (800e670 <_printf_float+0x2e8>)
 800e474:	4b7f      	ldr	r3, [pc, #508]	; (800e674 <_printf_float+0x2ec>)
 800e476:	e7d1      	b.n	800e41c <_printf_float+0x94>
 800e478:	6863      	ldr	r3, [r4, #4]
 800e47a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800e47e:	9206      	str	r2, [sp, #24]
 800e480:	1c5a      	adds	r2, r3, #1
 800e482:	d13f      	bne.n	800e504 <_printf_float+0x17c>
 800e484:	2306      	movs	r3, #6
 800e486:	6063      	str	r3, [r4, #4]
 800e488:	9b05      	ldr	r3, [sp, #20]
 800e48a:	6861      	ldr	r1, [r4, #4]
 800e48c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800e490:	2300      	movs	r3, #0
 800e492:	9303      	str	r3, [sp, #12]
 800e494:	ab0a      	add	r3, sp, #40	; 0x28
 800e496:	e9cd b301 	strd	fp, r3, [sp, #4]
 800e49a:	ab09      	add	r3, sp, #36	; 0x24
 800e49c:	ec49 8b10 	vmov	d0, r8, r9
 800e4a0:	9300      	str	r3, [sp, #0]
 800e4a2:	6022      	str	r2, [r4, #0]
 800e4a4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800e4a8:	4628      	mov	r0, r5
 800e4aa:	f7ff fecd 	bl	800e248 <__cvt>
 800e4ae:	9b06      	ldr	r3, [sp, #24]
 800e4b0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e4b2:	2b47      	cmp	r3, #71	; 0x47
 800e4b4:	4680      	mov	r8, r0
 800e4b6:	d108      	bne.n	800e4ca <_printf_float+0x142>
 800e4b8:	1cc8      	adds	r0, r1, #3
 800e4ba:	db02      	blt.n	800e4c2 <_printf_float+0x13a>
 800e4bc:	6863      	ldr	r3, [r4, #4]
 800e4be:	4299      	cmp	r1, r3
 800e4c0:	dd41      	ble.n	800e546 <_printf_float+0x1be>
 800e4c2:	f1ab 0b02 	sub.w	fp, fp, #2
 800e4c6:	fa5f fb8b 	uxtb.w	fp, fp
 800e4ca:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e4ce:	d820      	bhi.n	800e512 <_printf_float+0x18a>
 800e4d0:	3901      	subs	r1, #1
 800e4d2:	465a      	mov	r2, fp
 800e4d4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800e4d8:	9109      	str	r1, [sp, #36]	; 0x24
 800e4da:	f7ff ff17 	bl	800e30c <__exponent>
 800e4de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e4e0:	1813      	adds	r3, r2, r0
 800e4e2:	2a01      	cmp	r2, #1
 800e4e4:	4681      	mov	r9, r0
 800e4e6:	6123      	str	r3, [r4, #16]
 800e4e8:	dc02      	bgt.n	800e4f0 <_printf_float+0x168>
 800e4ea:	6822      	ldr	r2, [r4, #0]
 800e4ec:	07d2      	lsls	r2, r2, #31
 800e4ee:	d501      	bpl.n	800e4f4 <_printf_float+0x16c>
 800e4f0:	3301      	adds	r3, #1
 800e4f2:	6123      	str	r3, [r4, #16]
 800e4f4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	d09c      	beq.n	800e436 <_printf_float+0xae>
 800e4fc:	232d      	movs	r3, #45	; 0x2d
 800e4fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e502:	e798      	b.n	800e436 <_printf_float+0xae>
 800e504:	9a06      	ldr	r2, [sp, #24]
 800e506:	2a47      	cmp	r2, #71	; 0x47
 800e508:	d1be      	bne.n	800e488 <_printf_float+0x100>
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	d1bc      	bne.n	800e488 <_printf_float+0x100>
 800e50e:	2301      	movs	r3, #1
 800e510:	e7b9      	b.n	800e486 <_printf_float+0xfe>
 800e512:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800e516:	d118      	bne.n	800e54a <_printf_float+0x1c2>
 800e518:	2900      	cmp	r1, #0
 800e51a:	6863      	ldr	r3, [r4, #4]
 800e51c:	dd0b      	ble.n	800e536 <_printf_float+0x1ae>
 800e51e:	6121      	str	r1, [r4, #16]
 800e520:	b913      	cbnz	r3, 800e528 <_printf_float+0x1a0>
 800e522:	6822      	ldr	r2, [r4, #0]
 800e524:	07d0      	lsls	r0, r2, #31
 800e526:	d502      	bpl.n	800e52e <_printf_float+0x1a6>
 800e528:	3301      	adds	r3, #1
 800e52a:	440b      	add	r3, r1
 800e52c:	6123      	str	r3, [r4, #16]
 800e52e:	65a1      	str	r1, [r4, #88]	; 0x58
 800e530:	f04f 0900 	mov.w	r9, #0
 800e534:	e7de      	b.n	800e4f4 <_printf_float+0x16c>
 800e536:	b913      	cbnz	r3, 800e53e <_printf_float+0x1b6>
 800e538:	6822      	ldr	r2, [r4, #0]
 800e53a:	07d2      	lsls	r2, r2, #31
 800e53c:	d501      	bpl.n	800e542 <_printf_float+0x1ba>
 800e53e:	3302      	adds	r3, #2
 800e540:	e7f4      	b.n	800e52c <_printf_float+0x1a4>
 800e542:	2301      	movs	r3, #1
 800e544:	e7f2      	b.n	800e52c <_printf_float+0x1a4>
 800e546:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800e54a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e54c:	4299      	cmp	r1, r3
 800e54e:	db05      	blt.n	800e55c <_printf_float+0x1d4>
 800e550:	6823      	ldr	r3, [r4, #0]
 800e552:	6121      	str	r1, [r4, #16]
 800e554:	07d8      	lsls	r0, r3, #31
 800e556:	d5ea      	bpl.n	800e52e <_printf_float+0x1a6>
 800e558:	1c4b      	adds	r3, r1, #1
 800e55a:	e7e7      	b.n	800e52c <_printf_float+0x1a4>
 800e55c:	2900      	cmp	r1, #0
 800e55e:	bfd4      	ite	le
 800e560:	f1c1 0202 	rsble	r2, r1, #2
 800e564:	2201      	movgt	r2, #1
 800e566:	4413      	add	r3, r2
 800e568:	e7e0      	b.n	800e52c <_printf_float+0x1a4>
 800e56a:	6823      	ldr	r3, [r4, #0]
 800e56c:	055a      	lsls	r2, r3, #21
 800e56e:	d407      	bmi.n	800e580 <_printf_float+0x1f8>
 800e570:	6923      	ldr	r3, [r4, #16]
 800e572:	4642      	mov	r2, r8
 800e574:	4631      	mov	r1, r6
 800e576:	4628      	mov	r0, r5
 800e578:	47b8      	blx	r7
 800e57a:	3001      	adds	r0, #1
 800e57c:	d12c      	bne.n	800e5d8 <_printf_float+0x250>
 800e57e:	e764      	b.n	800e44a <_printf_float+0xc2>
 800e580:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e584:	f240 80e0 	bls.w	800e748 <_printf_float+0x3c0>
 800e588:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e58c:	2200      	movs	r2, #0
 800e58e:	2300      	movs	r3, #0
 800e590:	f7f2 faba 	bl	8000b08 <__aeabi_dcmpeq>
 800e594:	2800      	cmp	r0, #0
 800e596:	d034      	beq.n	800e602 <_printf_float+0x27a>
 800e598:	4a37      	ldr	r2, [pc, #220]	; (800e678 <_printf_float+0x2f0>)
 800e59a:	2301      	movs	r3, #1
 800e59c:	4631      	mov	r1, r6
 800e59e:	4628      	mov	r0, r5
 800e5a0:	47b8      	blx	r7
 800e5a2:	3001      	adds	r0, #1
 800e5a4:	f43f af51 	beq.w	800e44a <_printf_float+0xc2>
 800e5a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e5ac:	429a      	cmp	r2, r3
 800e5ae:	db02      	blt.n	800e5b6 <_printf_float+0x22e>
 800e5b0:	6823      	ldr	r3, [r4, #0]
 800e5b2:	07d8      	lsls	r0, r3, #31
 800e5b4:	d510      	bpl.n	800e5d8 <_printf_float+0x250>
 800e5b6:	ee18 3a10 	vmov	r3, s16
 800e5ba:	4652      	mov	r2, sl
 800e5bc:	4631      	mov	r1, r6
 800e5be:	4628      	mov	r0, r5
 800e5c0:	47b8      	blx	r7
 800e5c2:	3001      	adds	r0, #1
 800e5c4:	f43f af41 	beq.w	800e44a <_printf_float+0xc2>
 800e5c8:	f04f 0800 	mov.w	r8, #0
 800e5cc:	f104 091a 	add.w	r9, r4, #26
 800e5d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e5d2:	3b01      	subs	r3, #1
 800e5d4:	4543      	cmp	r3, r8
 800e5d6:	dc09      	bgt.n	800e5ec <_printf_float+0x264>
 800e5d8:	6823      	ldr	r3, [r4, #0]
 800e5da:	079b      	lsls	r3, r3, #30
 800e5dc:	f100 8105 	bmi.w	800e7ea <_printf_float+0x462>
 800e5e0:	68e0      	ldr	r0, [r4, #12]
 800e5e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e5e4:	4298      	cmp	r0, r3
 800e5e6:	bfb8      	it	lt
 800e5e8:	4618      	movlt	r0, r3
 800e5ea:	e730      	b.n	800e44e <_printf_float+0xc6>
 800e5ec:	2301      	movs	r3, #1
 800e5ee:	464a      	mov	r2, r9
 800e5f0:	4631      	mov	r1, r6
 800e5f2:	4628      	mov	r0, r5
 800e5f4:	47b8      	blx	r7
 800e5f6:	3001      	adds	r0, #1
 800e5f8:	f43f af27 	beq.w	800e44a <_printf_float+0xc2>
 800e5fc:	f108 0801 	add.w	r8, r8, #1
 800e600:	e7e6      	b.n	800e5d0 <_printf_float+0x248>
 800e602:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e604:	2b00      	cmp	r3, #0
 800e606:	dc39      	bgt.n	800e67c <_printf_float+0x2f4>
 800e608:	4a1b      	ldr	r2, [pc, #108]	; (800e678 <_printf_float+0x2f0>)
 800e60a:	2301      	movs	r3, #1
 800e60c:	4631      	mov	r1, r6
 800e60e:	4628      	mov	r0, r5
 800e610:	47b8      	blx	r7
 800e612:	3001      	adds	r0, #1
 800e614:	f43f af19 	beq.w	800e44a <_printf_float+0xc2>
 800e618:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e61c:	4313      	orrs	r3, r2
 800e61e:	d102      	bne.n	800e626 <_printf_float+0x29e>
 800e620:	6823      	ldr	r3, [r4, #0]
 800e622:	07d9      	lsls	r1, r3, #31
 800e624:	d5d8      	bpl.n	800e5d8 <_printf_float+0x250>
 800e626:	ee18 3a10 	vmov	r3, s16
 800e62a:	4652      	mov	r2, sl
 800e62c:	4631      	mov	r1, r6
 800e62e:	4628      	mov	r0, r5
 800e630:	47b8      	blx	r7
 800e632:	3001      	adds	r0, #1
 800e634:	f43f af09 	beq.w	800e44a <_printf_float+0xc2>
 800e638:	f04f 0900 	mov.w	r9, #0
 800e63c:	f104 0a1a 	add.w	sl, r4, #26
 800e640:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e642:	425b      	negs	r3, r3
 800e644:	454b      	cmp	r3, r9
 800e646:	dc01      	bgt.n	800e64c <_printf_float+0x2c4>
 800e648:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e64a:	e792      	b.n	800e572 <_printf_float+0x1ea>
 800e64c:	2301      	movs	r3, #1
 800e64e:	4652      	mov	r2, sl
 800e650:	4631      	mov	r1, r6
 800e652:	4628      	mov	r0, r5
 800e654:	47b8      	blx	r7
 800e656:	3001      	adds	r0, #1
 800e658:	f43f aef7 	beq.w	800e44a <_printf_float+0xc2>
 800e65c:	f109 0901 	add.w	r9, r9, #1
 800e660:	e7ee      	b.n	800e640 <_printf_float+0x2b8>
 800e662:	bf00      	nop
 800e664:	7fefffff 	.word	0x7fefffff
 800e668:	08012d90 	.word	0x08012d90
 800e66c:	08012d94 	.word	0x08012d94
 800e670:	08012d9c 	.word	0x08012d9c
 800e674:	08012d98 	.word	0x08012d98
 800e678:	08012da0 	.word	0x08012da0
 800e67c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e67e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e680:	429a      	cmp	r2, r3
 800e682:	bfa8      	it	ge
 800e684:	461a      	movge	r2, r3
 800e686:	2a00      	cmp	r2, #0
 800e688:	4691      	mov	r9, r2
 800e68a:	dc37      	bgt.n	800e6fc <_printf_float+0x374>
 800e68c:	f04f 0b00 	mov.w	fp, #0
 800e690:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e694:	f104 021a 	add.w	r2, r4, #26
 800e698:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e69a:	9305      	str	r3, [sp, #20]
 800e69c:	eba3 0309 	sub.w	r3, r3, r9
 800e6a0:	455b      	cmp	r3, fp
 800e6a2:	dc33      	bgt.n	800e70c <_printf_float+0x384>
 800e6a4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e6a8:	429a      	cmp	r2, r3
 800e6aa:	db3b      	blt.n	800e724 <_printf_float+0x39c>
 800e6ac:	6823      	ldr	r3, [r4, #0]
 800e6ae:	07da      	lsls	r2, r3, #31
 800e6b0:	d438      	bmi.n	800e724 <_printf_float+0x39c>
 800e6b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e6b4:	9a05      	ldr	r2, [sp, #20]
 800e6b6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e6b8:	1a9a      	subs	r2, r3, r2
 800e6ba:	eba3 0901 	sub.w	r9, r3, r1
 800e6be:	4591      	cmp	r9, r2
 800e6c0:	bfa8      	it	ge
 800e6c2:	4691      	movge	r9, r2
 800e6c4:	f1b9 0f00 	cmp.w	r9, #0
 800e6c8:	dc35      	bgt.n	800e736 <_printf_float+0x3ae>
 800e6ca:	f04f 0800 	mov.w	r8, #0
 800e6ce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e6d2:	f104 0a1a 	add.w	sl, r4, #26
 800e6d6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e6da:	1a9b      	subs	r3, r3, r2
 800e6dc:	eba3 0309 	sub.w	r3, r3, r9
 800e6e0:	4543      	cmp	r3, r8
 800e6e2:	f77f af79 	ble.w	800e5d8 <_printf_float+0x250>
 800e6e6:	2301      	movs	r3, #1
 800e6e8:	4652      	mov	r2, sl
 800e6ea:	4631      	mov	r1, r6
 800e6ec:	4628      	mov	r0, r5
 800e6ee:	47b8      	blx	r7
 800e6f0:	3001      	adds	r0, #1
 800e6f2:	f43f aeaa 	beq.w	800e44a <_printf_float+0xc2>
 800e6f6:	f108 0801 	add.w	r8, r8, #1
 800e6fa:	e7ec      	b.n	800e6d6 <_printf_float+0x34e>
 800e6fc:	4613      	mov	r3, r2
 800e6fe:	4631      	mov	r1, r6
 800e700:	4642      	mov	r2, r8
 800e702:	4628      	mov	r0, r5
 800e704:	47b8      	blx	r7
 800e706:	3001      	adds	r0, #1
 800e708:	d1c0      	bne.n	800e68c <_printf_float+0x304>
 800e70a:	e69e      	b.n	800e44a <_printf_float+0xc2>
 800e70c:	2301      	movs	r3, #1
 800e70e:	4631      	mov	r1, r6
 800e710:	4628      	mov	r0, r5
 800e712:	9205      	str	r2, [sp, #20]
 800e714:	47b8      	blx	r7
 800e716:	3001      	adds	r0, #1
 800e718:	f43f ae97 	beq.w	800e44a <_printf_float+0xc2>
 800e71c:	9a05      	ldr	r2, [sp, #20]
 800e71e:	f10b 0b01 	add.w	fp, fp, #1
 800e722:	e7b9      	b.n	800e698 <_printf_float+0x310>
 800e724:	ee18 3a10 	vmov	r3, s16
 800e728:	4652      	mov	r2, sl
 800e72a:	4631      	mov	r1, r6
 800e72c:	4628      	mov	r0, r5
 800e72e:	47b8      	blx	r7
 800e730:	3001      	adds	r0, #1
 800e732:	d1be      	bne.n	800e6b2 <_printf_float+0x32a>
 800e734:	e689      	b.n	800e44a <_printf_float+0xc2>
 800e736:	9a05      	ldr	r2, [sp, #20]
 800e738:	464b      	mov	r3, r9
 800e73a:	4442      	add	r2, r8
 800e73c:	4631      	mov	r1, r6
 800e73e:	4628      	mov	r0, r5
 800e740:	47b8      	blx	r7
 800e742:	3001      	adds	r0, #1
 800e744:	d1c1      	bne.n	800e6ca <_printf_float+0x342>
 800e746:	e680      	b.n	800e44a <_printf_float+0xc2>
 800e748:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e74a:	2a01      	cmp	r2, #1
 800e74c:	dc01      	bgt.n	800e752 <_printf_float+0x3ca>
 800e74e:	07db      	lsls	r3, r3, #31
 800e750:	d538      	bpl.n	800e7c4 <_printf_float+0x43c>
 800e752:	2301      	movs	r3, #1
 800e754:	4642      	mov	r2, r8
 800e756:	4631      	mov	r1, r6
 800e758:	4628      	mov	r0, r5
 800e75a:	47b8      	blx	r7
 800e75c:	3001      	adds	r0, #1
 800e75e:	f43f ae74 	beq.w	800e44a <_printf_float+0xc2>
 800e762:	ee18 3a10 	vmov	r3, s16
 800e766:	4652      	mov	r2, sl
 800e768:	4631      	mov	r1, r6
 800e76a:	4628      	mov	r0, r5
 800e76c:	47b8      	blx	r7
 800e76e:	3001      	adds	r0, #1
 800e770:	f43f ae6b 	beq.w	800e44a <_printf_float+0xc2>
 800e774:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e778:	2200      	movs	r2, #0
 800e77a:	2300      	movs	r3, #0
 800e77c:	f7f2 f9c4 	bl	8000b08 <__aeabi_dcmpeq>
 800e780:	b9d8      	cbnz	r0, 800e7ba <_printf_float+0x432>
 800e782:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e784:	f108 0201 	add.w	r2, r8, #1
 800e788:	3b01      	subs	r3, #1
 800e78a:	4631      	mov	r1, r6
 800e78c:	4628      	mov	r0, r5
 800e78e:	47b8      	blx	r7
 800e790:	3001      	adds	r0, #1
 800e792:	d10e      	bne.n	800e7b2 <_printf_float+0x42a>
 800e794:	e659      	b.n	800e44a <_printf_float+0xc2>
 800e796:	2301      	movs	r3, #1
 800e798:	4652      	mov	r2, sl
 800e79a:	4631      	mov	r1, r6
 800e79c:	4628      	mov	r0, r5
 800e79e:	47b8      	blx	r7
 800e7a0:	3001      	adds	r0, #1
 800e7a2:	f43f ae52 	beq.w	800e44a <_printf_float+0xc2>
 800e7a6:	f108 0801 	add.w	r8, r8, #1
 800e7aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e7ac:	3b01      	subs	r3, #1
 800e7ae:	4543      	cmp	r3, r8
 800e7b0:	dcf1      	bgt.n	800e796 <_printf_float+0x40e>
 800e7b2:	464b      	mov	r3, r9
 800e7b4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800e7b8:	e6dc      	b.n	800e574 <_printf_float+0x1ec>
 800e7ba:	f04f 0800 	mov.w	r8, #0
 800e7be:	f104 0a1a 	add.w	sl, r4, #26
 800e7c2:	e7f2      	b.n	800e7aa <_printf_float+0x422>
 800e7c4:	2301      	movs	r3, #1
 800e7c6:	4642      	mov	r2, r8
 800e7c8:	e7df      	b.n	800e78a <_printf_float+0x402>
 800e7ca:	2301      	movs	r3, #1
 800e7cc:	464a      	mov	r2, r9
 800e7ce:	4631      	mov	r1, r6
 800e7d0:	4628      	mov	r0, r5
 800e7d2:	47b8      	blx	r7
 800e7d4:	3001      	adds	r0, #1
 800e7d6:	f43f ae38 	beq.w	800e44a <_printf_float+0xc2>
 800e7da:	f108 0801 	add.w	r8, r8, #1
 800e7de:	68e3      	ldr	r3, [r4, #12]
 800e7e0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e7e2:	1a5b      	subs	r3, r3, r1
 800e7e4:	4543      	cmp	r3, r8
 800e7e6:	dcf0      	bgt.n	800e7ca <_printf_float+0x442>
 800e7e8:	e6fa      	b.n	800e5e0 <_printf_float+0x258>
 800e7ea:	f04f 0800 	mov.w	r8, #0
 800e7ee:	f104 0919 	add.w	r9, r4, #25
 800e7f2:	e7f4      	b.n	800e7de <_printf_float+0x456>

0800e7f4 <_printf_common>:
 800e7f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e7f8:	4616      	mov	r6, r2
 800e7fa:	4699      	mov	r9, r3
 800e7fc:	688a      	ldr	r2, [r1, #8]
 800e7fe:	690b      	ldr	r3, [r1, #16]
 800e800:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e804:	4293      	cmp	r3, r2
 800e806:	bfb8      	it	lt
 800e808:	4613      	movlt	r3, r2
 800e80a:	6033      	str	r3, [r6, #0]
 800e80c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e810:	4607      	mov	r7, r0
 800e812:	460c      	mov	r4, r1
 800e814:	b10a      	cbz	r2, 800e81a <_printf_common+0x26>
 800e816:	3301      	adds	r3, #1
 800e818:	6033      	str	r3, [r6, #0]
 800e81a:	6823      	ldr	r3, [r4, #0]
 800e81c:	0699      	lsls	r1, r3, #26
 800e81e:	bf42      	ittt	mi
 800e820:	6833      	ldrmi	r3, [r6, #0]
 800e822:	3302      	addmi	r3, #2
 800e824:	6033      	strmi	r3, [r6, #0]
 800e826:	6825      	ldr	r5, [r4, #0]
 800e828:	f015 0506 	ands.w	r5, r5, #6
 800e82c:	d106      	bne.n	800e83c <_printf_common+0x48>
 800e82e:	f104 0a19 	add.w	sl, r4, #25
 800e832:	68e3      	ldr	r3, [r4, #12]
 800e834:	6832      	ldr	r2, [r6, #0]
 800e836:	1a9b      	subs	r3, r3, r2
 800e838:	42ab      	cmp	r3, r5
 800e83a:	dc26      	bgt.n	800e88a <_printf_common+0x96>
 800e83c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e840:	1e13      	subs	r3, r2, #0
 800e842:	6822      	ldr	r2, [r4, #0]
 800e844:	bf18      	it	ne
 800e846:	2301      	movne	r3, #1
 800e848:	0692      	lsls	r2, r2, #26
 800e84a:	d42b      	bmi.n	800e8a4 <_printf_common+0xb0>
 800e84c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e850:	4649      	mov	r1, r9
 800e852:	4638      	mov	r0, r7
 800e854:	47c0      	blx	r8
 800e856:	3001      	adds	r0, #1
 800e858:	d01e      	beq.n	800e898 <_printf_common+0xa4>
 800e85a:	6823      	ldr	r3, [r4, #0]
 800e85c:	68e5      	ldr	r5, [r4, #12]
 800e85e:	6832      	ldr	r2, [r6, #0]
 800e860:	f003 0306 	and.w	r3, r3, #6
 800e864:	2b04      	cmp	r3, #4
 800e866:	bf08      	it	eq
 800e868:	1aad      	subeq	r5, r5, r2
 800e86a:	68a3      	ldr	r3, [r4, #8]
 800e86c:	6922      	ldr	r2, [r4, #16]
 800e86e:	bf0c      	ite	eq
 800e870:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e874:	2500      	movne	r5, #0
 800e876:	4293      	cmp	r3, r2
 800e878:	bfc4      	itt	gt
 800e87a:	1a9b      	subgt	r3, r3, r2
 800e87c:	18ed      	addgt	r5, r5, r3
 800e87e:	2600      	movs	r6, #0
 800e880:	341a      	adds	r4, #26
 800e882:	42b5      	cmp	r5, r6
 800e884:	d11a      	bne.n	800e8bc <_printf_common+0xc8>
 800e886:	2000      	movs	r0, #0
 800e888:	e008      	b.n	800e89c <_printf_common+0xa8>
 800e88a:	2301      	movs	r3, #1
 800e88c:	4652      	mov	r2, sl
 800e88e:	4649      	mov	r1, r9
 800e890:	4638      	mov	r0, r7
 800e892:	47c0      	blx	r8
 800e894:	3001      	adds	r0, #1
 800e896:	d103      	bne.n	800e8a0 <_printf_common+0xac>
 800e898:	f04f 30ff 	mov.w	r0, #4294967295
 800e89c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e8a0:	3501      	adds	r5, #1
 800e8a2:	e7c6      	b.n	800e832 <_printf_common+0x3e>
 800e8a4:	18e1      	adds	r1, r4, r3
 800e8a6:	1c5a      	adds	r2, r3, #1
 800e8a8:	2030      	movs	r0, #48	; 0x30
 800e8aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e8ae:	4422      	add	r2, r4
 800e8b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e8b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e8b8:	3302      	adds	r3, #2
 800e8ba:	e7c7      	b.n	800e84c <_printf_common+0x58>
 800e8bc:	2301      	movs	r3, #1
 800e8be:	4622      	mov	r2, r4
 800e8c0:	4649      	mov	r1, r9
 800e8c2:	4638      	mov	r0, r7
 800e8c4:	47c0      	blx	r8
 800e8c6:	3001      	adds	r0, #1
 800e8c8:	d0e6      	beq.n	800e898 <_printf_common+0xa4>
 800e8ca:	3601      	adds	r6, #1
 800e8cc:	e7d9      	b.n	800e882 <_printf_common+0x8e>
	...

0800e8d0 <_printf_i>:
 800e8d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e8d4:	7e0f      	ldrb	r7, [r1, #24]
 800e8d6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e8d8:	2f78      	cmp	r7, #120	; 0x78
 800e8da:	4691      	mov	r9, r2
 800e8dc:	4680      	mov	r8, r0
 800e8de:	460c      	mov	r4, r1
 800e8e0:	469a      	mov	sl, r3
 800e8e2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e8e6:	d807      	bhi.n	800e8f8 <_printf_i+0x28>
 800e8e8:	2f62      	cmp	r7, #98	; 0x62
 800e8ea:	d80a      	bhi.n	800e902 <_printf_i+0x32>
 800e8ec:	2f00      	cmp	r7, #0
 800e8ee:	f000 80d8 	beq.w	800eaa2 <_printf_i+0x1d2>
 800e8f2:	2f58      	cmp	r7, #88	; 0x58
 800e8f4:	f000 80a3 	beq.w	800ea3e <_printf_i+0x16e>
 800e8f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e8fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e900:	e03a      	b.n	800e978 <_printf_i+0xa8>
 800e902:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e906:	2b15      	cmp	r3, #21
 800e908:	d8f6      	bhi.n	800e8f8 <_printf_i+0x28>
 800e90a:	a101      	add	r1, pc, #4	; (adr r1, 800e910 <_printf_i+0x40>)
 800e90c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e910:	0800e969 	.word	0x0800e969
 800e914:	0800e97d 	.word	0x0800e97d
 800e918:	0800e8f9 	.word	0x0800e8f9
 800e91c:	0800e8f9 	.word	0x0800e8f9
 800e920:	0800e8f9 	.word	0x0800e8f9
 800e924:	0800e8f9 	.word	0x0800e8f9
 800e928:	0800e97d 	.word	0x0800e97d
 800e92c:	0800e8f9 	.word	0x0800e8f9
 800e930:	0800e8f9 	.word	0x0800e8f9
 800e934:	0800e8f9 	.word	0x0800e8f9
 800e938:	0800e8f9 	.word	0x0800e8f9
 800e93c:	0800ea89 	.word	0x0800ea89
 800e940:	0800e9ad 	.word	0x0800e9ad
 800e944:	0800ea6b 	.word	0x0800ea6b
 800e948:	0800e8f9 	.word	0x0800e8f9
 800e94c:	0800e8f9 	.word	0x0800e8f9
 800e950:	0800eaab 	.word	0x0800eaab
 800e954:	0800e8f9 	.word	0x0800e8f9
 800e958:	0800e9ad 	.word	0x0800e9ad
 800e95c:	0800e8f9 	.word	0x0800e8f9
 800e960:	0800e8f9 	.word	0x0800e8f9
 800e964:	0800ea73 	.word	0x0800ea73
 800e968:	682b      	ldr	r3, [r5, #0]
 800e96a:	1d1a      	adds	r2, r3, #4
 800e96c:	681b      	ldr	r3, [r3, #0]
 800e96e:	602a      	str	r2, [r5, #0]
 800e970:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e974:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e978:	2301      	movs	r3, #1
 800e97a:	e0a3      	b.n	800eac4 <_printf_i+0x1f4>
 800e97c:	6820      	ldr	r0, [r4, #0]
 800e97e:	6829      	ldr	r1, [r5, #0]
 800e980:	0606      	lsls	r6, r0, #24
 800e982:	f101 0304 	add.w	r3, r1, #4
 800e986:	d50a      	bpl.n	800e99e <_printf_i+0xce>
 800e988:	680e      	ldr	r6, [r1, #0]
 800e98a:	602b      	str	r3, [r5, #0]
 800e98c:	2e00      	cmp	r6, #0
 800e98e:	da03      	bge.n	800e998 <_printf_i+0xc8>
 800e990:	232d      	movs	r3, #45	; 0x2d
 800e992:	4276      	negs	r6, r6
 800e994:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e998:	485e      	ldr	r0, [pc, #376]	; (800eb14 <_printf_i+0x244>)
 800e99a:	230a      	movs	r3, #10
 800e99c:	e019      	b.n	800e9d2 <_printf_i+0x102>
 800e99e:	680e      	ldr	r6, [r1, #0]
 800e9a0:	602b      	str	r3, [r5, #0]
 800e9a2:	f010 0f40 	tst.w	r0, #64	; 0x40
 800e9a6:	bf18      	it	ne
 800e9a8:	b236      	sxthne	r6, r6
 800e9aa:	e7ef      	b.n	800e98c <_printf_i+0xbc>
 800e9ac:	682b      	ldr	r3, [r5, #0]
 800e9ae:	6820      	ldr	r0, [r4, #0]
 800e9b0:	1d19      	adds	r1, r3, #4
 800e9b2:	6029      	str	r1, [r5, #0]
 800e9b4:	0601      	lsls	r1, r0, #24
 800e9b6:	d501      	bpl.n	800e9bc <_printf_i+0xec>
 800e9b8:	681e      	ldr	r6, [r3, #0]
 800e9ba:	e002      	b.n	800e9c2 <_printf_i+0xf2>
 800e9bc:	0646      	lsls	r6, r0, #25
 800e9be:	d5fb      	bpl.n	800e9b8 <_printf_i+0xe8>
 800e9c0:	881e      	ldrh	r6, [r3, #0]
 800e9c2:	4854      	ldr	r0, [pc, #336]	; (800eb14 <_printf_i+0x244>)
 800e9c4:	2f6f      	cmp	r7, #111	; 0x6f
 800e9c6:	bf0c      	ite	eq
 800e9c8:	2308      	moveq	r3, #8
 800e9ca:	230a      	movne	r3, #10
 800e9cc:	2100      	movs	r1, #0
 800e9ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e9d2:	6865      	ldr	r5, [r4, #4]
 800e9d4:	60a5      	str	r5, [r4, #8]
 800e9d6:	2d00      	cmp	r5, #0
 800e9d8:	bfa2      	ittt	ge
 800e9da:	6821      	ldrge	r1, [r4, #0]
 800e9dc:	f021 0104 	bicge.w	r1, r1, #4
 800e9e0:	6021      	strge	r1, [r4, #0]
 800e9e2:	b90e      	cbnz	r6, 800e9e8 <_printf_i+0x118>
 800e9e4:	2d00      	cmp	r5, #0
 800e9e6:	d04d      	beq.n	800ea84 <_printf_i+0x1b4>
 800e9e8:	4615      	mov	r5, r2
 800e9ea:	fbb6 f1f3 	udiv	r1, r6, r3
 800e9ee:	fb03 6711 	mls	r7, r3, r1, r6
 800e9f2:	5dc7      	ldrb	r7, [r0, r7]
 800e9f4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e9f8:	4637      	mov	r7, r6
 800e9fa:	42bb      	cmp	r3, r7
 800e9fc:	460e      	mov	r6, r1
 800e9fe:	d9f4      	bls.n	800e9ea <_printf_i+0x11a>
 800ea00:	2b08      	cmp	r3, #8
 800ea02:	d10b      	bne.n	800ea1c <_printf_i+0x14c>
 800ea04:	6823      	ldr	r3, [r4, #0]
 800ea06:	07de      	lsls	r6, r3, #31
 800ea08:	d508      	bpl.n	800ea1c <_printf_i+0x14c>
 800ea0a:	6923      	ldr	r3, [r4, #16]
 800ea0c:	6861      	ldr	r1, [r4, #4]
 800ea0e:	4299      	cmp	r1, r3
 800ea10:	bfde      	ittt	le
 800ea12:	2330      	movle	r3, #48	; 0x30
 800ea14:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ea18:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ea1c:	1b52      	subs	r2, r2, r5
 800ea1e:	6122      	str	r2, [r4, #16]
 800ea20:	f8cd a000 	str.w	sl, [sp]
 800ea24:	464b      	mov	r3, r9
 800ea26:	aa03      	add	r2, sp, #12
 800ea28:	4621      	mov	r1, r4
 800ea2a:	4640      	mov	r0, r8
 800ea2c:	f7ff fee2 	bl	800e7f4 <_printf_common>
 800ea30:	3001      	adds	r0, #1
 800ea32:	d14c      	bne.n	800eace <_printf_i+0x1fe>
 800ea34:	f04f 30ff 	mov.w	r0, #4294967295
 800ea38:	b004      	add	sp, #16
 800ea3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ea3e:	4835      	ldr	r0, [pc, #212]	; (800eb14 <_printf_i+0x244>)
 800ea40:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ea44:	6829      	ldr	r1, [r5, #0]
 800ea46:	6823      	ldr	r3, [r4, #0]
 800ea48:	f851 6b04 	ldr.w	r6, [r1], #4
 800ea4c:	6029      	str	r1, [r5, #0]
 800ea4e:	061d      	lsls	r5, r3, #24
 800ea50:	d514      	bpl.n	800ea7c <_printf_i+0x1ac>
 800ea52:	07df      	lsls	r7, r3, #31
 800ea54:	bf44      	itt	mi
 800ea56:	f043 0320 	orrmi.w	r3, r3, #32
 800ea5a:	6023      	strmi	r3, [r4, #0]
 800ea5c:	b91e      	cbnz	r6, 800ea66 <_printf_i+0x196>
 800ea5e:	6823      	ldr	r3, [r4, #0]
 800ea60:	f023 0320 	bic.w	r3, r3, #32
 800ea64:	6023      	str	r3, [r4, #0]
 800ea66:	2310      	movs	r3, #16
 800ea68:	e7b0      	b.n	800e9cc <_printf_i+0xfc>
 800ea6a:	6823      	ldr	r3, [r4, #0]
 800ea6c:	f043 0320 	orr.w	r3, r3, #32
 800ea70:	6023      	str	r3, [r4, #0]
 800ea72:	2378      	movs	r3, #120	; 0x78
 800ea74:	4828      	ldr	r0, [pc, #160]	; (800eb18 <_printf_i+0x248>)
 800ea76:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ea7a:	e7e3      	b.n	800ea44 <_printf_i+0x174>
 800ea7c:	0659      	lsls	r1, r3, #25
 800ea7e:	bf48      	it	mi
 800ea80:	b2b6      	uxthmi	r6, r6
 800ea82:	e7e6      	b.n	800ea52 <_printf_i+0x182>
 800ea84:	4615      	mov	r5, r2
 800ea86:	e7bb      	b.n	800ea00 <_printf_i+0x130>
 800ea88:	682b      	ldr	r3, [r5, #0]
 800ea8a:	6826      	ldr	r6, [r4, #0]
 800ea8c:	6961      	ldr	r1, [r4, #20]
 800ea8e:	1d18      	adds	r0, r3, #4
 800ea90:	6028      	str	r0, [r5, #0]
 800ea92:	0635      	lsls	r5, r6, #24
 800ea94:	681b      	ldr	r3, [r3, #0]
 800ea96:	d501      	bpl.n	800ea9c <_printf_i+0x1cc>
 800ea98:	6019      	str	r1, [r3, #0]
 800ea9a:	e002      	b.n	800eaa2 <_printf_i+0x1d2>
 800ea9c:	0670      	lsls	r0, r6, #25
 800ea9e:	d5fb      	bpl.n	800ea98 <_printf_i+0x1c8>
 800eaa0:	8019      	strh	r1, [r3, #0]
 800eaa2:	2300      	movs	r3, #0
 800eaa4:	6123      	str	r3, [r4, #16]
 800eaa6:	4615      	mov	r5, r2
 800eaa8:	e7ba      	b.n	800ea20 <_printf_i+0x150>
 800eaaa:	682b      	ldr	r3, [r5, #0]
 800eaac:	1d1a      	adds	r2, r3, #4
 800eaae:	602a      	str	r2, [r5, #0]
 800eab0:	681d      	ldr	r5, [r3, #0]
 800eab2:	6862      	ldr	r2, [r4, #4]
 800eab4:	2100      	movs	r1, #0
 800eab6:	4628      	mov	r0, r5
 800eab8:	f7f1 fbb2 	bl	8000220 <memchr>
 800eabc:	b108      	cbz	r0, 800eac2 <_printf_i+0x1f2>
 800eabe:	1b40      	subs	r0, r0, r5
 800eac0:	6060      	str	r0, [r4, #4]
 800eac2:	6863      	ldr	r3, [r4, #4]
 800eac4:	6123      	str	r3, [r4, #16]
 800eac6:	2300      	movs	r3, #0
 800eac8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800eacc:	e7a8      	b.n	800ea20 <_printf_i+0x150>
 800eace:	6923      	ldr	r3, [r4, #16]
 800ead0:	462a      	mov	r2, r5
 800ead2:	4649      	mov	r1, r9
 800ead4:	4640      	mov	r0, r8
 800ead6:	47d0      	blx	sl
 800ead8:	3001      	adds	r0, #1
 800eada:	d0ab      	beq.n	800ea34 <_printf_i+0x164>
 800eadc:	6823      	ldr	r3, [r4, #0]
 800eade:	079b      	lsls	r3, r3, #30
 800eae0:	d413      	bmi.n	800eb0a <_printf_i+0x23a>
 800eae2:	68e0      	ldr	r0, [r4, #12]
 800eae4:	9b03      	ldr	r3, [sp, #12]
 800eae6:	4298      	cmp	r0, r3
 800eae8:	bfb8      	it	lt
 800eaea:	4618      	movlt	r0, r3
 800eaec:	e7a4      	b.n	800ea38 <_printf_i+0x168>
 800eaee:	2301      	movs	r3, #1
 800eaf0:	4632      	mov	r2, r6
 800eaf2:	4649      	mov	r1, r9
 800eaf4:	4640      	mov	r0, r8
 800eaf6:	47d0      	blx	sl
 800eaf8:	3001      	adds	r0, #1
 800eafa:	d09b      	beq.n	800ea34 <_printf_i+0x164>
 800eafc:	3501      	adds	r5, #1
 800eafe:	68e3      	ldr	r3, [r4, #12]
 800eb00:	9903      	ldr	r1, [sp, #12]
 800eb02:	1a5b      	subs	r3, r3, r1
 800eb04:	42ab      	cmp	r3, r5
 800eb06:	dcf2      	bgt.n	800eaee <_printf_i+0x21e>
 800eb08:	e7eb      	b.n	800eae2 <_printf_i+0x212>
 800eb0a:	2500      	movs	r5, #0
 800eb0c:	f104 0619 	add.w	r6, r4, #25
 800eb10:	e7f5      	b.n	800eafe <_printf_i+0x22e>
 800eb12:	bf00      	nop
 800eb14:	08012da2 	.word	0x08012da2
 800eb18:	08012db3 	.word	0x08012db3

0800eb1c <_scanf_float>:
 800eb1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb20:	b087      	sub	sp, #28
 800eb22:	4617      	mov	r7, r2
 800eb24:	9303      	str	r3, [sp, #12]
 800eb26:	688b      	ldr	r3, [r1, #8]
 800eb28:	1e5a      	subs	r2, r3, #1
 800eb2a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800eb2e:	bf83      	ittte	hi
 800eb30:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800eb34:	195b      	addhi	r3, r3, r5
 800eb36:	9302      	strhi	r3, [sp, #8]
 800eb38:	2300      	movls	r3, #0
 800eb3a:	bf86      	itte	hi
 800eb3c:	f240 135d 	movwhi	r3, #349	; 0x15d
 800eb40:	608b      	strhi	r3, [r1, #8]
 800eb42:	9302      	strls	r3, [sp, #8]
 800eb44:	680b      	ldr	r3, [r1, #0]
 800eb46:	468b      	mov	fp, r1
 800eb48:	2500      	movs	r5, #0
 800eb4a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800eb4e:	f84b 3b1c 	str.w	r3, [fp], #28
 800eb52:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800eb56:	4680      	mov	r8, r0
 800eb58:	460c      	mov	r4, r1
 800eb5a:	465e      	mov	r6, fp
 800eb5c:	46aa      	mov	sl, r5
 800eb5e:	46a9      	mov	r9, r5
 800eb60:	9501      	str	r5, [sp, #4]
 800eb62:	68a2      	ldr	r2, [r4, #8]
 800eb64:	b152      	cbz	r2, 800eb7c <_scanf_float+0x60>
 800eb66:	683b      	ldr	r3, [r7, #0]
 800eb68:	781b      	ldrb	r3, [r3, #0]
 800eb6a:	2b4e      	cmp	r3, #78	; 0x4e
 800eb6c:	d864      	bhi.n	800ec38 <_scanf_float+0x11c>
 800eb6e:	2b40      	cmp	r3, #64	; 0x40
 800eb70:	d83c      	bhi.n	800ebec <_scanf_float+0xd0>
 800eb72:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800eb76:	b2c8      	uxtb	r0, r1
 800eb78:	280e      	cmp	r0, #14
 800eb7a:	d93a      	bls.n	800ebf2 <_scanf_float+0xd6>
 800eb7c:	f1b9 0f00 	cmp.w	r9, #0
 800eb80:	d003      	beq.n	800eb8a <_scanf_float+0x6e>
 800eb82:	6823      	ldr	r3, [r4, #0]
 800eb84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800eb88:	6023      	str	r3, [r4, #0]
 800eb8a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800eb8e:	f1ba 0f01 	cmp.w	sl, #1
 800eb92:	f200 8113 	bhi.w	800edbc <_scanf_float+0x2a0>
 800eb96:	455e      	cmp	r6, fp
 800eb98:	f200 8105 	bhi.w	800eda6 <_scanf_float+0x28a>
 800eb9c:	2501      	movs	r5, #1
 800eb9e:	4628      	mov	r0, r5
 800eba0:	b007      	add	sp, #28
 800eba2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eba6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800ebaa:	2a0d      	cmp	r2, #13
 800ebac:	d8e6      	bhi.n	800eb7c <_scanf_float+0x60>
 800ebae:	a101      	add	r1, pc, #4	; (adr r1, 800ebb4 <_scanf_float+0x98>)
 800ebb0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800ebb4:	0800ecf3 	.word	0x0800ecf3
 800ebb8:	0800eb7d 	.word	0x0800eb7d
 800ebbc:	0800eb7d 	.word	0x0800eb7d
 800ebc0:	0800eb7d 	.word	0x0800eb7d
 800ebc4:	0800ed53 	.word	0x0800ed53
 800ebc8:	0800ed2b 	.word	0x0800ed2b
 800ebcc:	0800eb7d 	.word	0x0800eb7d
 800ebd0:	0800eb7d 	.word	0x0800eb7d
 800ebd4:	0800ed01 	.word	0x0800ed01
 800ebd8:	0800eb7d 	.word	0x0800eb7d
 800ebdc:	0800eb7d 	.word	0x0800eb7d
 800ebe0:	0800eb7d 	.word	0x0800eb7d
 800ebe4:	0800eb7d 	.word	0x0800eb7d
 800ebe8:	0800ecb9 	.word	0x0800ecb9
 800ebec:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800ebf0:	e7db      	b.n	800ebaa <_scanf_float+0x8e>
 800ebf2:	290e      	cmp	r1, #14
 800ebf4:	d8c2      	bhi.n	800eb7c <_scanf_float+0x60>
 800ebf6:	a001      	add	r0, pc, #4	; (adr r0, 800ebfc <_scanf_float+0xe0>)
 800ebf8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800ebfc:	0800ecab 	.word	0x0800ecab
 800ec00:	0800eb7d 	.word	0x0800eb7d
 800ec04:	0800ecab 	.word	0x0800ecab
 800ec08:	0800ed3f 	.word	0x0800ed3f
 800ec0c:	0800eb7d 	.word	0x0800eb7d
 800ec10:	0800ec59 	.word	0x0800ec59
 800ec14:	0800ec95 	.word	0x0800ec95
 800ec18:	0800ec95 	.word	0x0800ec95
 800ec1c:	0800ec95 	.word	0x0800ec95
 800ec20:	0800ec95 	.word	0x0800ec95
 800ec24:	0800ec95 	.word	0x0800ec95
 800ec28:	0800ec95 	.word	0x0800ec95
 800ec2c:	0800ec95 	.word	0x0800ec95
 800ec30:	0800ec95 	.word	0x0800ec95
 800ec34:	0800ec95 	.word	0x0800ec95
 800ec38:	2b6e      	cmp	r3, #110	; 0x6e
 800ec3a:	d809      	bhi.n	800ec50 <_scanf_float+0x134>
 800ec3c:	2b60      	cmp	r3, #96	; 0x60
 800ec3e:	d8b2      	bhi.n	800eba6 <_scanf_float+0x8a>
 800ec40:	2b54      	cmp	r3, #84	; 0x54
 800ec42:	d077      	beq.n	800ed34 <_scanf_float+0x218>
 800ec44:	2b59      	cmp	r3, #89	; 0x59
 800ec46:	d199      	bne.n	800eb7c <_scanf_float+0x60>
 800ec48:	2d07      	cmp	r5, #7
 800ec4a:	d197      	bne.n	800eb7c <_scanf_float+0x60>
 800ec4c:	2508      	movs	r5, #8
 800ec4e:	e029      	b.n	800eca4 <_scanf_float+0x188>
 800ec50:	2b74      	cmp	r3, #116	; 0x74
 800ec52:	d06f      	beq.n	800ed34 <_scanf_float+0x218>
 800ec54:	2b79      	cmp	r3, #121	; 0x79
 800ec56:	e7f6      	b.n	800ec46 <_scanf_float+0x12a>
 800ec58:	6821      	ldr	r1, [r4, #0]
 800ec5a:	05c8      	lsls	r0, r1, #23
 800ec5c:	d51a      	bpl.n	800ec94 <_scanf_float+0x178>
 800ec5e:	9b02      	ldr	r3, [sp, #8]
 800ec60:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800ec64:	6021      	str	r1, [r4, #0]
 800ec66:	f109 0901 	add.w	r9, r9, #1
 800ec6a:	b11b      	cbz	r3, 800ec74 <_scanf_float+0x158>
 800ec6c:	3b01      	subs	r3, #1
 800ec6e:	3201      	adds	r2, #1
 800ec70:	9302      	str	r3, [sp, #8]
 800ec72:	60a2      	str	r2, [r4, #8]
 800ec74:	68a3      	ldr	r3, [r4, #8]
 800ec76:	3b01      	subs	r3, #1
 800ec78:	60a3      	str	r3, [r4, #8]
 800ec7a:	6923      	ldr	r3, [r4, #16]
 800ec7c:	3301      	adds	r3, #1
 800ec7e:	6123      	str	r3, [r4, #16]
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	3b01      	subs	r3, #1
 800ec84:	2b00      	cmp	r3, #0
 800ec86:	607b      	str	r3, [r7, #4]
 800ec88:	f340 8084 	ble.w	800ed94 <_scanf_float+0x278>
 800ec8c:	683b      	ldr	r3, [r7, #0]
 800ec8e:	3301      	adds	r3, #1
 800ec90:	603b      	str	r3, [r7, #0]
 800ec92:	e766      	b.n	800eb62 <_scanf_float+0x46>
 800ec94:	eb1a 0f05 	cmn.w	sl, r5
 800ec98:	f47f af70 	bne.w	800eb7c <_scanf_float+0x60>
 800ec9c:	6822      	ldr	r2, [r4, #0]
 800ec9e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800eca2:	6022      	str	r2, [r4, #0]
 800eca4:	f806 3b01 	strb.w	r3, [r6], #1
 800eca8:	e7e4      	b.n	800ec74 <_scanf_float+0x158>
 800ecaa:	6822      	ldr	r2, [r4, #0]
 800ecac:	0610      	lsls	r0, r2, #24
 800ecae:	f57f af65 	bpl.w	800eb7c <_scanf_float+0x60>
 800ecb2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ecb6:	e7f4      	b.n	800eca2 <_scanf_float+0x186>
 800ecb8:	f1ba 0f00 	cmp.w	sl, #0
 800ecbc:	d10e      	bne.n	800ecdc <_scanf_float+0x1c0>
 800ecbe:	f1b9 0f00 	cmp.w	r9, #0
 800ecc2:	d10e      	bne.n	800ece2 <_scanf_float+0x1c6>
 800ecc4:	6822      	ldr	r2, [r4, #0]
 800ecc6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800ecca:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800ecce:	d108      	bne.n	800ece2 <_scanf_float+0x1c6>
 800ecd0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800ecd4:	6022      	str	r2, [r4, #0]
 800ecd6:	f04f 0a01 	mov.w	sl, #1
 800ecda:	e7e3      	b.n	800eca4 <_scanf_float+0x188>
 800ecdc:	f1ba 0f02 	cmp.w	sl, #2
 800ece0:	d055      	beq.n	800ed8e <_scanf_float+0x272>
 800ece2:	2d01      	cmp	r5, #1
 800ece4:	d002      	beq.n	800ecec <_scanf_float+0x1d0>
 800ece6:	2d04      	cmp	r5, #4
 800ece8:	f47f af48 	bne.w	800eb7c <_scanf_float+0x60>
 800ecec:	3501      	adds	r5, #1
 800ecee:	b2ed      	uxtb	r5, r5
 800ecf0:	e7d8      	b.n	800eca4 <_scanf_float+0x188>
 800ecf2:	f1ba 0f01 	cmp.w	sl, #1
 800ecf6:	f47f af41 	bne.w	800eb7c <_scanf_float+0x60>
 800ecfa:	f04f 0a02 	mov.w	sl, #2
 800ecfe:	e7d1      	b.n	800eca4 <_scanf_float+0x188>
 800ed00:	b97d      	cbnz	r5, 800ed22 <_scanf_float+0x206>
 800ed02:	f1b9 0f00 	cmp.w	r9, #0
 800ed06:	f47f af3c 	bne.w	800eb82 <_scanf_float+0x66>
 800ed0a:	6822      	ldr	r2, [r4, #0]
 800ed0c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800ed10:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800ed14:	f47f af39 	bne.w	800eb8a <_scanf_float+0x6e>
 800ed18:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800ed1c:	6022      	str	r2, [r4, #0]
 800ed1e:	2501      	movs	r5, #1
 800ed20:	e7c0      	b.n	800eca4 <_scanf_float+0x188>
 800ed22:	2d03      	cmp	r5, #3
 800ed24:	d0e2      	beq.n	800ecec <_scanf_float+0x1d0>
 800ed26:	2d05      	cmp	r5, #5
 800ed28:	e7de      	b.n	800ece8 <_scanf_float+0x1cc>
 800ed2a:	2d02      	cmp	r5, #2
 800ed2c:	f47f af26 	bne.w	800eb7c <_scanf_float+0x60>
 800ed30:	2503      	movs	r5, #3
 800ed32:	e7b7      	b.n	800eca4 <_scanf_float+0x188>
 800ed34:	2d06      	cmp	r5, #6
 800ed36:	f47f af21 	bne.w	800eb7c <_scanf_float+0x60>
 800ed3a:	2507      	movs	r5, #7
 800ed3c:	e7b2      	b.n	800eca4 <_scanf_float+0x188>
 800ed3e:	6822      	ldr	r2, [r4, #0]
 800ed40:	0591      	lsls	r1, r2, #22
 800ed42:	f57f af1b 	bpl.w	800eb7c <_scanf_float+0x60>
 800ed46:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800ed4a:	6022      	str	r2, [r4, #0]
 800ed4c:	f8cd 9004 	str.w	r9, [sp, #4]
 800ed50:	e7a8      	b.n	800eca4 <_scanf_float+0x188>
 800ed52:	6822      	ldr	r2, [r4, #0]
 800ed54:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800ed58:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800ed5c:	d006      	beq.n	800ed6c <_scanf_float+0x250>
 800ed5e:	0550      	lsls	r0, r2, #21
 800ed60:	f57f af0c 	bpl.w	800eb7c <_scanf_float+0x60>
 800ed64:	f1b9 0f00 	cmp.w	r9, #0
 800ed68:	f43f af0f 	beq.w	800eb8a <_scanf_float+0x6e>
 800ed6c:	0591      	lsls	r1, r2, #22
 800ed6e:	bf58      	it	pl
 800ed70:	9901      	ldrpl	r1, [sp, #4]
 800ed72:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800ed76:	bf58      	it	pl
 800ed78:	eba9 0101 	subpl.w	r1, r9, r1
 800ed7c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800ed80:	bf58      	it	pl
 800ed82:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800ed86:	6022      	str	r2, [r4, #0]
 800ed88:	f04f 0900 	mov.w	r9, #0
 800ed8c:	e78a      	b.n	800eca4 <_scanf_float+0x188>
 800ed8e:	f04f 0a03 	mov.w	sl, #3
 800ed92:	e787      	b.n	800eca4 <_scanf_float+0x188>
 800ed94:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800ed98:	4639      	mov	r1, r7
 800ed9a:	4640      	mov	r0, r8
 800ed9c:	4798      	blx	r3
 800ed9e:	2800      	cmp	r0, #0
 800eda0:	f43f aedf 	beq.w	800eb62 <_scanf_float+0x46>
 800eda4:	e6ea      	b.n	800eb7c <_scanf_float+0x60>
 800eda6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800edaa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800edae:	463a      	mov	r2, r7
 800edb0:	4640      	mov	r0, r8
 800edb2:	4798      	blx	r3
 800edb4:	6923      	ldr	r3, [r4, #16]
 800edb6:	3b01      	subs	r3, #1
 800edb8:	6123      	str	r3, [r4, #16]
 800edba:	e6ec      	b.n	800eb96 <_scanf_float+0x7a>
 800edbc:	1e6b      	subs	r3, r5, #1
 800edbe:	2b06      	cmp	r3, #6
 800edc0:	d825      	bhi.n	800ee0e <_scanf_float+0x2f2>
 800edc2:	2d02      	cmp	r5, #2
 800edc4:	d836      	bhi.n	800ee34 <_scanf_float+0x318>
 800edc6:	455e      	cmp	r6, fp
 800edc8:	f67f aee8 	bls.w	800eb9c <_scanf_float+0x80>
 800edcc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800edd0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800edd4:	463a      	mov	r2, r7
 800edd6:	4640      	mov	r0, r8
 800edd8:	4798      	blx	r3
 800edda:	6923      	ldr	r3, [r4, #16]
 800eddc:	3b01      	subs	r3, #1
 800edde:	6123      	str	r3, [r4, #16]
 800ede0:	e7f1      	b.n	800edc6 <_scanf_float+0x2aa>
 800ede2:	9802      	ldr	r0, [sp, #8]
 800ede4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ede8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800edec:	9002      	str	r0, [sp, #8]
 800edee:	463a      	mov	r2, r7
 800edf0:	4640      	mov	r0, r8
 800edf2:	4798      	blx	r3
 800edf4:	6923      	ldr	r3, [r4, #16]
 800edf6:	3b01      	subs	r3, #1
 800edf8:	6123      	str	r3, [r4, #16]
 800edfa:	f10a 3aff 	add.w	sl, sl, #4294967295
 800edfe:	fa5f fa8a 	uxtb.w	sl, sl
 800ee02:	f1ba 0f02 	cmp.w	sl, #2
 800ee06:	d1ec      	bne.n	800ede2 <_scanf_float+0x2c6>
 800ee08:	3d03      	subs	r5, #3
 800ee0a:	b2ed      	uxtb	r5, r5
 800ee0c:	1b76      	subs	r6, r6, r5
 800ee0e:	6823      	ldr	r3, [r4, #0]
 800ee10:	05da      	lsls	r2, r3, #23
 800ee12:	d52f      	bpl.n	800ee74 <_scanf_float+0x358>
 800ee14:	055b      	lsls	r3, r3, #21
 800ee16:	d510      	bpl.n	800ee3a <_scanf_float+0x31e>
 800ee18:	455e      	cmp	r6, fp
 800ee1a:	f67f aebf 	bls.w	800eb9c <_scanf_float+0x80>
 800ee1e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ee22:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ee26:	463a      	mov	r2, r7
 800ee28:	4640      	mov	r0, r8
 800ee2a:	4798      	blx	r3
 800ee2c:	6923      	ldr	r3, [r4, #16]
 800ee2e:	3b01      	subs	r3, #1
 800ee30:	6123      	str	r3, [r4, #16]
 800ee32:	e7f1      	b.n	800ee18 <_scanf_float+0x2fc>
 800ee34:	46aa      	mov	sl, r5
 800ee36:	9602      	str	r6, [sp, #8]
 800ee38:	e7df      	b.n	800edfa <_scanf_float+0x2de>
 800ee3a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800ee3e:	6923      	ldr	r3, [r4, #16]
 800ee40:	2965      	cmp	r1, #101	; 0x65
 800ee42:	f103 33ff 	add.w	r3, r3, #4294967295
 800ee46:	f106 35ff 	add.w	r5, r6, #4294967295
 800ee4a:	6123      	str	r3, [r4, #16]
 800ee4c:	d00c      	beq.n	800ee68 <_scanf_float+0x34c>
 800ee4e:	2945      	cmp	r1, #69	; 0x45
 800ee50:	d00a      	beq.n	800ee68 <_scanf_float+0x34c>
 800ee52:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ee56:	463a      	mov	r2, r7
 800ee58:	4640      	mov	r0, r8
 800ee5a:	4798      	blx	r3
 800ee5c:	6923      	ldr	r3, [r4, #16]
 800ee5e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800ee62:	3b01      	subs	r3, #1
 800ee64:	1eb5      	subs	r5, r6, #2
 800ee66:	6123      	str	r3, [r4, #16]
 800ee68:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ee6c:	463a      	mov	r2, r7
 800ee6e:	4640      	mov	r0, r8
 800ee70:	4798      	blx	r3
 800ee72:	462e      	mov	r6, r5
 800ee74:	6825      	ldr	r5, [r4, #0]
 800ee76:	f015 0510 	ands.w	r5, r5, #16
 800ee7a:	d159      	bne.n	800ef30 <_scanf_float+0x414>
 800ee7c:	7035      	strb	r5, [r6, #0]
 800ee7e:	6823      	ldr	r3, [r4, #0]
 800ee80:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800ee84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ee88:	d11b      	bne.n	800eec2 <_scanf_float+0x3a6>
 800ee8a:	9b01      	ldr	r3, [sp, #4]
 800ee8c:	454b      	cmp	r3, r9
 800ee8e:	eba3 0209 	sub.w	r2, r3, r9
 800ee92:	d123      	bne.n	800eedc <_scanf_float+0x3c0>
 800ee94:	2200      	movs	r2, #0
 800ee96:	4659      	mov	r1, fp
 800ee98:	4640      	mov	r0, r8
 800ee9a:	f000 fe9f 	bl	800fbdc <_strtod_r>
 800ee9e:	6822      	ldr	r2, [r4, #0]
 800eea0:	9b03      	ldr	r3, [sp, #12]
 800eea2:	f012 0f02 	tst.w	r2, #2
 800eea6:	ec57 6b10 	vmov	r6, r7, d0
 800eeaa:	681b      	ldr	r3, [r3, #0]
 800eeac:	d021      	beq.n	800eef2 <_scanf_float+0x3d6>
 800eeae:	9903      	ldr	r1, [sp, #12]
 800eeb0:	1d1a      	adds	r2, r3, #4
 800eeb2:	600a      	str	r2, [r1, #0]
 800eeb4:	681b      	ldr	r3, [r3, #0]
 800eeb6:	e9c3 6700 	strd	r6, r7, [r3]
 800eeba:	68e3      	ldr	r3, [r4, #12]
 800eebc:	3301      	adds	r3, #1
 800eebe:	60e3      	str	r3, [r4, #12]
 800eec0:	e66d      	b.n	800eb9e <_scanf_float+0x82>
 800eec2:	9b04      	ldr	r3, [sp, #16]
 800eec4:	2b00      	cmp	r3, #0
 800eec6:	d0e5      	beq.n	800ee94 <_scanf_float+0x378>
 800eec8:	9905      	ldr	r1, [sp, #20]
 800eeca:	230a      	movs	r3, #10
 800eecc:	462a      	mov	r2, r5
 800eece:	3101      	adds	r1, #1
 800eed0:	4640      	mov	r0, r8
 800eed2:	f000 ff0b 	bl	800fcec <_strtol_r>
 800eed6:	9b04      	ldr	r3, [sp, #16]
 800eed8:	9e05      	ldr	r6, [sp, #20]
 800eeda:	1ac2      	subs	r2, r0, r3
 800eedc:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800eee0:	429e      	cmp	r6, r3
 800eee2:	bf28      	it	cs
 800eee4:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800eee8:	4912      	ldr	r1, [pc, #72]	; (800ef34 <_scanf_float+0x418>)
 800eeea:	4630      	mov	r0, r6
 800eeec:	f000 f82c 	bl	800ef48 <siprintf>
 800eef0:	e7d0      	b.n	800ee94 <_scanf_float+0x378>
 800eef2:	9903      	ldr	r1, [sp, #12]
 800eef4:	f012 0f04 	tst.w	r2, #4
 800eef8:	f103 0204 	add.w	r2, r3, #4
 800eefc:	600a      	str	r2, [r1, #0]
 800eefe:	d1d9      	bne.n	800eeb4 <_scanf_float+0x398>
 800ef00:	f8d3 8000 	ldr.w	r8, [r3]
 800ef04:	ee10 2a10 	vmov	r2, s0
 800ef08:	ee10 0a10 	vmov	r0, s0
 800ef0c:	463b      	mov	r3, r7
 800ef0e:	4639      	mov	r1, r7
 800ef10:	f7f1 fe2c 	bl	8000b6c <__aeabi_dcmpun>
 800ef14:	b128      	cbz	r0, 800ef22 <_scanf_float+0x406>
 800ef16:	4808      	ldr	r0, [pc, #32]	; (800ef38 <_scanf_float+0x41c>)
 800ef18:	f000 f810 	bl	800ef3c <nanf>
 800ef1c:	ed88 0a00 	vstr	s0, [r8]
 800ef20:	e7cb      	b.n	800eeba <_scanf_float+0x39e>
 800ef22:	4630      	mov	r0, r6
 800ef24:	4639      	mov	r1, r7
 800ef26:	f7f1 fe7f 	bl	8000c28 <__aeabi_d2f>
 800ef2a:	f8c8 0000 	str.w	r0, [r8]
 800ef2e:	e7c4      	b.n	800eeba <_scanf_float+0x39e>
 800ef30:	2500      	movs	r5, #0
 800ef32:	e634      	b.n	800eb9e <_scanf_float+0x82>
 800ef34:	08012dc4 	.word	0x08012dc4
 800ef38:	080131d0 	.word	0x080131d0

0800ef3c <nanf>:
 800ef3c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800ef44 <nanf+0x8>
 800ef40:	4770      	bx	lr
 800ef42:	bf00      	nop
 800ef44:	7fc00000 	.word	0x7fc00000

0800ef48 <siprintf>:
 800ef48:	b40e      	push	{r1, r2, r3}
 800ef4a:	b500      	push	{lr}
 800ef4c:	b09c      	sub	sp, #112	; 0x70
 800ef4e:	ab1d      	add	r3, sp, #116	; 0x74
 800ef50:	9002      	str	r0, [sp, #8]
 800ef52:	9006      	str	r0, [sp, #24]
 800ef54:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ef58:	4809      	ldr	r0, [pc, #36]	; (800ef80 <siprintf+0x38>)
 800ef5a:	9107      	str	r1, [sp, #28]
 800ef5c:	9104      	str	r1, [sp, #16]
 800ef5e:	4909      	ldr	r1, [pc, #36]	; (800ef84 <siprintf+0x3c>)
 800ef60:	f853 2b04 	ldr.w	r2, [r3], #4
 800ef64:	9105      	str	r1, [sp, #20]
 800ef66:	6800      	ldr	r0, [r0, #0]
 800ef68:	9301      	str	r3, [sp, #4]
 800ef6a:	a902      	add	r1, sp, #8
 800ef6c:	f002 fedc 	bl	8011d28 <_svfiprintf_r>
 800ef70:	9b02      	ldr	r3, [sp, #8]
 800ef72:	2200      	movs	r2, #0
 800ef74:	701a      	strb	r2, [r3, #0]
 800ef76:	b01c      	add	sp, #112	; 0x70
 800ef78:	f85d eb04 	ldr.w	lr, [sp], #4
 800ef7c:	b003      	add	sp, #12
 800ef7e:	4770      	bx	lr
 800ef80:	200002c8 	.word	0x200002c8
 800ef84:	ffff0208 	.word	0xffff0208

0800ef88 <strcpy>:
 800ef88:	4603      	mov	r3, r0
 800ef8a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ef8e:	f803 2b01 	strb.w	r2, [r3], #1
 800ef92:	2a00      	cmp	r2, #0
 800ef94:	d1f9      	bne.n	800ef8a <strcpy+0x2>
 800ef96:	4770      	bx	lr

0800ef98 <sulp>:
 800ef98:	b570      	push	{r4, r5, r6, lr}
 800ef9a:	4604      	mov	r4, r0
 800ef9c:	460d      	mov	r5, r1
 800ef9e:	ec45 4b10 	vmov	d0, r4, r5
 800efa2:	4616      	mov	r6, r2
 800efa4:	f002 fc1e 	bl	80117e4 <__ulp>
 800efa8:	ec51 0b10 	vmov	r0, r1, d0
 800efac:	b17e      	cbz	r6, 800efce <sulp+0x36>
 800efae:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800efb2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800efb6:	2b00      	cmp	r3, #0
 800efb8:	dd09      	ble.n	800efce <sulp+0x36>
 800efba:	051b      	lsls	r3, r3, #20
 800efbc:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800efc0:	2400      	movs	r4, #0
 800efc2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800efc6:	4622      	mov	r2, r4
 800efc8:	462b      	mov	r3, r5
 800efca:	f7f1 fb35 	bl	8000638 <__aeabi_dmul>
 800efce:	bd70      	pop	{r4, r5, r6, pc}

0800efd0 <_strtod_l>:
 800efd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800efd4:	ed2d 8b02 	vpush	{d8}
 800efd8:	b09d      	sub	sp, #116	; 0x74
 800efda:	461f      	mov	r7, r3
 800efdc:	2300      	movs	r3, #0
 800efde:	9318      	str	r3, [sp, #96]	; 0x60
 800efe0:	4ba2      	ldr	r3, [pc, #648]	; (800f26c <_strtod_l+0x29c>)
 800efe2:	9213      	str	r2, [sp, #76]	; 0x4c
 800efe4:	681b      	ldr	r3, [r3, #0]
 800efe6:	9305      	str	r3, [sp, #20]
 800efe8:	4604      	mov	r4, r0
 800efea:	4618      	mov	r0, r3
 800efec:	4688      	mov	r8, r1
 800efee:	f7f1 f90f 	bl	8000210 <strlen>
 800eff2:	f04f 0a00 	mov.w	sl, #0
 800eff6:	4605      	mov	r5, r0
 800eff8:	f04f 0b00 	mov.w	fp, #0
 800effc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800f000:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f002:	781a      	ldrb	r2, [r3, #0]
 800f004:	2a2b      	cmp	r2, #43	; 0x2b
 800f006:	d04e      	beq.n	800f0a6 <_strtod_l+0xd6>
 800f008:	d83b      	bhi.n	800f082 <_strtod_l+0xb2>
 800f00a:	2a0d      	cmp	r2, #13
 800f00c:	d834      	bhi.n	800f078 <_strtod_l+0xa8>
 800f00e:	2a08      	cmp	r2, #8
 800f010:	d834      	bhi.n	800f07c <_strtod_l+0xac>
 800f012:	2a00      	cmp	r2, #0
 800f014:	d03e      	beq.n	800f094 <_strtod_l+0xc4>
 800f016:	2300      	movs	r3, #0
 800f018:	930a      	str	r3, [sp, #40]	; 0x28
 800f01a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800f01c:	7833      	ldrb	r3, [r6, #0]
 800f01e:	2b30      	cmp	r3, #48	; 0x30
 800f020:	f040 80b0 	bne.w	800f184 <_strtod_l+0x1b4>
 800f024:	7873      	ldrb	r3, [r6, #1]
 800f026:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800f02a:	2b58      	cmp	r3, #88	; 0x58
 800f02c:	d168      	bne.n	800f100 <_strtod_l+0x130>
 800f02e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f030:	9301      	str	r3, [sp, #4]
 800f032:	ab18      	add	r3, sp, #96	; 0x60
 800f034:	9702      	str	r7, [sp, #8]
 800f036:	9300      	str	r3, [sp, #0]
 800f038:	4a8d      	ldr	r2, [pc, #564]	; (800f270 <_strtod_l+0x2a0>)
 800f03a:	ab19      	add	r3, sp, #100	; 0x64
 800f03c:	a917      	add	r1, sp, #92	; 0x5c
 800f03e:	4620      	mov	r0, r4
 800f040:	f001 fd38 	bl	8010ab4 <__gethex>
 800f044:	f010 0707 	ands.w	r7, r0, #7
 800f048:	4605      	mov	r5, r0
 800f04a:	d005      	beq.n	800f058 <_strtod_l+0x88>
 800f04c:	2f06      	cmp	r7, #6
 800f04e:	d12c      	bne.n	800f0aa <_strtod_l+0xda>
 800f050:	3601      	adds	r6, #1
 800f052:	2300      	movs	r3, #0
 800f054:	9617      	str	r6, [sp, #92]	; 0x5c
 800f056:	930a      	str	r3, [sp, #40]	; 0x28
 800f058:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800f05a:	2b00      	cmp	r3, #0
 800f05c:	f040 8590 	bne.w	800fb80 <_strtod_l+0xbb0>
 800f060:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f062:	b1eb      	cbz	r3, 800f0a0 <_strtod_l+0xd0>
 800f064:	4652      	mov	r2, sl
 800f066:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800f06a:	ec43 2b10 	vmov	d0, r2, r3
 800f06e:	b01d      	add	sp, #116	; 0x74
 800f070:	ecbd 8b02 	vpop	{d8}
 800f074:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f078:	2a20      	cmp	r2, #32
 800f07a:	d1cc      	bne.n	800f016 <_strtod_l+0x46>
 800f07c:	3301      	adds	r3, #1
 800f07e:	9317      	str	r3, [sp, #92]	; 0x5c
 800f080:	e7be      	b.n	800f000 <_strtod_l+0x30>
 800f082:	2a2d      	cmp	r2, #45	; 0x2d
 800f084:	d1c7      	bne.n	800f016 <_strtod_l+0x46>
 800f086:	2201      	movs	r2, #1
 800f088:	920a      	str	r2, [sp, #40]	; 0x28
 800f08a:	1c5a      	adds	r2, r3, #1
 800f08c:	9217      	str	r2, [sp, #92]	; 0x5c
 800f08e:	785b      	ldrb	r3, [r3, #1]
 800f090:	2b00      	cmp	r3, #0
 800f092:	d1c2      	bne.n	800f01a <_strtod_l+0x4a>
 800f094:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800f096:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800f09a:	2b00      	cmp	r3, #0
 800f09c:	f040 856e 	bne.w	800fb7c <_strtod_l+0xbac>
 800f0a0:	4652      	mov	r2, sl
 800f0a2:	465b      	mov	r3, fp
 800f0a4:	e7e1      	b.n	800f06a <_strtod_l+0x9a>
 800f0a6:	2200      	movs	r2, #0
 800f0a8:	e7ee      	b.n	800f088 <_strtod_l+0xb8>
 800f0aa:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800f0ac:	b13a      	cbz	r2, 800f0be <_strtod_l+0xee>
 800f0ae:	2135      	movs	r1, #53	; 0x35
 800f0b0:	a81a      	add	r0, sp, #104	; 0x68
 800f0b2:	f002 fca2 	bl	80119fa <__copybits>
 800f0b6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800f0b8:	4620      	mov	r0, r4
 800f0ba:	f002 f861 	bl	8011180 <_Bfree>
 800f0be:	3f01      	subs	r7, #1
 800f0c0:	2f04      	cmp	r7, #4
 800f0c2:	d806      	bhi.n	800f0d2 <_strtod_l+0x102>
 800f0c4:	e8df f007 	tbb	[pc, r7]
 800f0c8:	1714030a 	.word	0x1714030a
 800f0cc:	0a          	.byte	0x0a
 800f0cd:	00          	.byte	0x00
 800f0ce:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800f0d2:	0728      	lsls	r0, r5, #28
 800f0d4:	d5c0      	bpl.n	800f058 <_strtod_l+0x88>
 800f0d6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800f0da:	e7bd      	b.n	800f058 <_strtod_l+0x88>
 800f0dc:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800f0e0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800f0e2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800f0e6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800f0ea:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800f0ee:	e7f0      	b.n	800f0d2 <_strtod_l+0x102>
 800f0f0:	f8df b180 	ldr.w	fp, [pc, #384]	; 800f274 <_strtod_l+0x2a4>
 800f0f4:	e7ed      	b.n	800f0d2 <_strtod_l+0x102>
 800f0f6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800f0fa:	f04f 3aff 	mov.w	sl, #4294967295
 800f0fe:	e7e8      	b.n	800f0d2 <_strtod_l+0x102>
 800f100:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f102:	1c5a      	adds	r2, r3, #1
 800f104:	9217      	str	r2, [sp, #92]	; 0x5c
 800f106:	785b      	ldrb	r3, [r3, #1]
 800f108:	2b30      	cmp	r3, #48	; 0x30
 800f10a:	d0f9      	beq.n	800f100 <_strtod_l+0x130>
 800f10c:	2b00      	cmp	r3, #0
 800f10e:	d0a3      	beq.n	800f058 <_strtod_l+0x88>
 800f110:	2301      	movs	r3, #1
 800f112:	f04f 0900 	mov.w	r9, #0
 800f116:	9304      	str	r3, [sp, #16]
 800f118:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f11a:	9308      	str	r3, [sp, #32]
 800f11c:	f8cd 901c 	str.w	r9, [sp, #28]
 800f120:	464f      	mov	r7, r9
 800f122:	220a      	movs	r2, #10
 800f124:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800f126:	7806      	ldrb	r6, [r0, #0]
 800f128:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800f12c:	b2d9      	uxtb	r1, r3
 800f12e:	2909      	cmp	r1, #9
 800f130:	d92a      	bls.n	800f188 <_strtod_l+0x1b8>
 800f132:	9905      	ldr	r1, [sp, #20]
 800f134:	462a      	mov	r2, r5
 800f136:	f002 ff0f 	bl	8011f58 <strncmp>
 800f13a:	b398      	cbz	r0, 800f1a4 <_strtod_l+0x1d4>
 800f13c:	2000      	movs	r0, #0
 800f13e:	4632      	mov	r2, r6
 800f140:	463d      	mov	r5, r7
 800f142:	9005      	str	r0, [sp, #20]
 800f144:	4603      	mov	r3, r0
 800f146:	2a65      	cmp	r2, #101	; 0x65
 800f148:	d001      	beq.n	800f14e <_strtod_l+0x17e>
 800f14a:	2a45      	cmp	r2, #69	; 0x45
 800f14c:	d118      	bne.n	800f180 <_strtod_l+0x1b0>
 800f14e:	b91d      	cbnz	r5, 800f158 <_strtod_l+0x188>
 800f150:	9a04      	ldr	r2, [sp, #16]
 800f152:	4302      	orrs	r2, r0
 800f154:	d09e      	beq.n	800f094 <_strtod_l+0xc4>
 800f156:	2500      	movs	r5, #0
 800f158:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800f15c:	f108 0201 	add.w	r2, r8, #1
 800f160:	9217      	str	r2, [sp, #92]	; 0x5c
 800f162:	f898 2001 	ldrb.w	r2, [r8, #1]
 800f166:	2a2b      	cmp	r2, #43	; 0x2b
 800f168:	d075      	beq.n	800f256 <_strtod_l+0x286>
 800f16a:	2a2d      	cmp	r2, #45	; 0x2d
 800f16c:	d07b      	beq.n	800f266 <_strtod_l+0x296>
 800f16e:	f04f 0c00 	mov.w	ip, #0
 800f172:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800f176:	2909      	cmp	r1, #9
 800f178:	f240 8082 	bls.w	800f280 <_strtod_l+0x2b0>
 800f17c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800f180:	2600      	movs	r6, #0
 800f182:	e09d      	b.n	800f2c0 <_strtod_l+0x2f0>
 800f184:	2300      	movs	r3, #0
 800f186:	e7c4      	b.n	800f112 <_strtod_l+0x142>
 800f188:	2f08      	cmp	r7, #8
 800f18a:	bfd8      	it	le
 800f18c:	9907      	ldrle	r1, [sp, #28]
 800f18e:	f100 0001 	add.w	r0, r0, #1
 800f192:	bfda      	itte	le
 800f194:	fb02 3301 	mlale	r3, r2, r1, r3
 800f198:	9307      	strle	r3, [sp, #28]
 800f19a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800f19e:	3701      	adds	r7, #1
 800f1a0:	9017      	str	r0, [sp, #92]	; 0x5c
 800f1a2:	e7bf      	b.n	800f124 <_strtod_l+0x154>
 800f1a4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f1a6:	195a      	adds	r2, r3, r5
 800f1a8:	9217      	str	r2, [sp, #92]	; 0x5c
 800f1aa:	5d5a      	ldrb	r2, [r3, r5]
 800f1ac:	2f00      	cmp	r7, #0
 800f1ae:	d037      	beq.n	800f220 <_strtod_l+0x250>
 800f1b0:	9005      	str	r0, [sp, #20]
 800f1b2:	463d      	mov	r5, r7
 800f1b4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800f1b8:	2b09      	cmp	r3, #9
 800f1ba:	d912      	bls.n	800f1e2 <_strtod_l+0x212>
 800f1bc:	2301      	movs	r3, #1
 800f1be:	e7c2      	b.n	800f146 <_strtod_l+0x176>
 800f1c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f1c2:	1c5a      	adds	r2, r3, #1
 800f1c4:	9217      	str	r2, [sp, #92]	; 0x5c
 800f1c6:	785a      	ldrb	r2, [r3, #1]
 800f1c8:	3001      	adds	r0, #1
 800f1ca:	2a30      	cmp	r2, #48	; 0x30
 800f1cc:	d0f8      	beq.n	800f1c0 <_strtod_l+0x1f0>
 800f1ce:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800f1d2:	2b08      	cmp	r3, #8
 800f1d4:	f200 84d9 	bhi.w	800fb8a <_strtod_l+0xbba>
 800f1d8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f1da:	9005      	str	r0, [sp, #20]
 800f1dc:	2000      	movs	r0, #0
 800f1de:	9308      	str	r3, [sp, #32]
 800f1e0:	4605      	mov	r5, r0
 800f1e2:	3a30      	subs	r2, #48	; 0x30
 800f1e4:	f100 0301 	add.w	r3, r0, #1
 800f1e8:	d014      	beq.n	800f214 <_strtod_l+0x244>
 800f1ea:	9905      	ldr	r1, [sp, #20]
 800f1ec:	4419      	add	r1, r3
 800f1ee:	9105      	str	r1, [sp, #20]
 800f1f0:	462b      	mov	r3, r5
 800f1f2:	eb00 0e05 	add.w	lr, r0, r5
 800f1f6:	210a      	movs	r1, #10
 800f1f8:	4573      	cmp	r3, lr
 800f1fa:	d113      	bne.n	800f224 <_strtod_l+0x254>
 800f1fc:	182b      	adds	r3, r5, r0
 800f1fe:	2b08      	cmp	r3, #8
 800f200:	f105 0501 	add.w	r5, r5, #1
 800f204:	4405      	add	r5, r0
 800f206:	dc1c      	bgt.n	800f242 <_strtod_l+0x272>
 800f208:	9907      	ldr	r1, [sp, #28]
 800f20a:	230a      	movs	r3, #10
 800f20c:	fb03 2301 	mla	r3, r3, r1, r2
 800f210:	9307      	str	r3, [sp, #28]
 800f212:	2300      	movs	r3, #0
 800f214:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800f216:	1c51      	adds	r1, r2, #1
 800f218:	9117      	str	r1, [sp, #92]	; 0x5c
 800f21a:	7852      	ldrb	r2, [r2, #1]
 800f21c:	4618      	mov	r0, r3
 800f21e:	e7c9      	b.n	800f1b4 <_strtod_l+0x1e4>
 800f220:	4638      	mov	r0, r7
 800f222:	e7d2      	b.n	800f1ca <_strtod_l+0x1fa>
 800f224:	2b08      	cmp	r3, #8
 800f226:	dc04      	bgt.n	800f232 <_strtod_l+0x262>
 800f228:	9e07      	ldr	r6, [sp, #28]
 800f22a:	434e      	muls	r6, r1
 800f22c:	9607      	str	r6, [sp, #28]
 800f22e:	3301      	adds	r3, #1
 800f230:	e7e2      	b.n	800f1f8 <_strtod_l+0x228>
 800f232:	f103 0c01 	add.w	ip, r3, #1
 800f236:	f1bc 0f10 	cmp.w	ip, #16
 800f23a:	bfd8      	it	le
 800f23c:	fb01 f909 	mulle.w	r9, r1, r9
 800f240:	e7f5      	b.n	800f22e <_strtod_l+0x25e>
 800f242:	2d10      	cmp	r5, #16
 800f244:	bfdc      	itt	le
 800f246:	230a      	movle	r3, #10
 800f248:	fb03 2909 	mlale	r9, r3, r9, r2
 800f24c:	e7e1      	b.n	800f212 <_strtod_l+0x242>
 800f24e:	2300      	movs	r3, #0
 800f250:	9305      	str	r3, [sp, #20]
 800f252:	2301      	movs	r3, #1
 800f254:	e77c      	b.n	800f150 <_strtod_l+0x180>
 800f256:	f04f 0c00 	mov.w	ip, #0
 800f25a:	f108 0202 	add.w	r2, r8, #2
 800f25e:	9217      	str	r2, [sp, #92]	; 0x5c
 800f260:	f898 2002 	ldrb.w	r2, [r8, #2]
 800f264:	e785      	b.n	800f172 <_strtod_l+0x1a2>
 800f266:	f04f 0c01 	mov.w	ip, #1
 800f26a:	e7f6      	b.n	800f25a <_strtod_l+0x28a>
 800f26c:	08013018 	.word	0x08013018
 800f270:	08012dcc 	.word	0x08012dcc
 800f274:	7ff00000 	.word	0x7ff00000
 800f278:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800f27a:	1c51      	adds	r1, r2, #1
 800f27c:	9117      	str	r1, [sp, #92]	; 0x5c
 800f27e:	7852      	ldrb	r2, [r2, #1]
 800f280:	2a30      	cmp	r2, #48	; 0x30
 800f282:	d0f9      	beq.n	800f278 <_strtod_l+0x2a8>
 800f284:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800f288:	2908      	cmp	r1, #8
 800f28a:	f63f af79 	bhi.w	800f180 <_strtod_l+0x1b0>
 800f28e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800f292:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800f294:	9206      	str	r2, [sp, #24]
 800f296:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800f298:	1c51      	adds	r1, r2, #1
 800f29a:	9117      	str	r1, [sp, #92]	; 0x5c
 800f29c:	7852      	ldrb	r2, [r2, #1]
 800f29e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800f2a2:	2e09      	cmp	r6, #9
 800f2a4:	d937      	bls.n	800f316 <_strtod_l+0x346>
 800f2a6:	9e06      	ldr	r6, [sp, #24]
 800f2a8:	1b89      	subs	r1, r1, r6
 800f2aa:	2908      	cmp	r1, #8
 800f2ac:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800f2b0:	dc02      	bgt.n	800f2b8 <_strtod_l+0x2e8>
 800f2b2:	4576      	cmp	r6, lr
 800f2b4:	bfa8      	it	ge
 800f2b6:	4676      	movge	r6, lr
 800f2b8:	f1bc 0f00 	cmp.w	ip, #0
 800f2bc:	d000      	beq.n	800f2c0 <_strtod_l+0x2f0>
 800f2be:	4276      	negs	r6, r6
 800f2c0:	2d00      	cmp	r5, #0
 800f2c2:	d14d      	bne.n	800f360 <_strtod_l+0x390>
 800f2c4:	9904      	ldr	r1, [sp, #16]
 800f2c6:	4301      	orrs	r1, r0
 800f2c8:	f47f aec6 	bne.w	800f058 <_strtod_l+0x88>
 800f2cc:	2b00      	cmp	r3, #0
 800f2ce:	f47f aee1 	bne.w	800f094 <_strtod_l+0xc4>
 800f2d2:	2a69      	cmp	r2, #105	; 0x69
 800f2d4:	d027      	beq.n	800f326 <_strtod_l+0x356>
 800f2d6:	dc24      	bgt.n	800f322 <_strtod_l+0x352>
 800f2d8:	2a49      	cmp	r2, #73	; 0x49
 800f2da:	d024      	beq.n	800f326 <_strtod_l+0x356>
 800f2dc:	2a4e      	cmp	r2, #78	; 0x4e
 800f2de:	f47f aed9 	bne.w	800f094 <_strtod_l+0xc4>
 800f2e2:	499f      	ldr	r1, [pc, #636]	; (800f560 <_strtod_l+0x590>)
 800f2e4:	a817      	add	r0, sp, #92	; 0x5c
 800f2e6:	f001 fe3d 	bl	8010f64 <__match>
 800f2ea:	2800      	cmp	r0, #0
 800f2ec:	f43f aed2 	beq.w	800f094 <_strtod_l+0xc4>
 800f2f0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f2f2:	781b      	ldrb	r3, [r3, #0]
 800f2f4:	2b28      	cmp	r3, #40	; 0x28
 800f2f6:	d12d      	bne.n	800f354 <_strtod_l+0x384>
 800f2f8:	499a      	ldr	r1, [pc, #616]	; (800f564 <_strtod_l+0x594>)
 800f2fa:	aa1a      	add	r2, sp, #104	; 0x68
 800f2fc:	a817      	add	r0, sp, #92	; 0x5c
 800f2fe:	f001 fe45 	bl	8010f8c <__hexnan>
 800f302:	2805      	cmp	r0, #5
 800f304:	d126      	bne.n	800f354 <_strtod_l+0x384>
 800f306:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f308:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800f30c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800f310:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800f314:	e6a0      	b.n	800f058 <_strtod_l+0x88>
 800f316:	210a      	movs	r1, #10
 800f318:	fb01 2e0e 	mla	lr, r1, lr, r2
 800f31c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800f320:	e7b9      	b.n	800f296 <_strtod_l+0x2c6>
 800f322:	2a6e      	cmp	r2, #110	; 0x6e
 800f324:	e7db      	b.n	800f2de <_strtod_l+0x30e>
 800f326:	4990      	ldr	r1, [pc, #576]	; (800f568 <_strtod_l+0x598>)
 800f328:	a817      	add	r0, sp, #92	; 0x5c
 800f32a:	f001 fe1b 	bl	8010f64 <__match>
 800f32e:	2800      	cmp	r0, #0
 800f330:	f43f aeb0 	beq.w	800f094 <_strtod_l+0xc4>
 800f334:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f336:	498d      	ldr	r1, [pc, #564]	; (800f56c <_strtod_l+0x59c>)
 800f338:	3b01      	subs	r3, #1
 800f33a:	a817      	add	r0, sp, #92	; 0x5c
 800f33c:	9317      	str	r3, [sp, #92]	; 0x5c
 800f33e:	f001 fe11 	bl	8010f64 <__match>
 800f342:	b910      	cbnz	r0, 800f34a <_strtod_l+0x37a>
 800f344:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f346:	3301      	adds	r3, #1
 800f348:	9317      	str	r3, [sp, #92]	; 0x5c
 800f34a:	f8df b230 	ldr.w	fp, [pc, #560]	; 800f57c <_strtod_l+0x5ac>
 800f34e:	f04f 0a00 	mov.w	sl, #0
 800f352:	e681      	b.n	800f058 <_strtod_l+0x88>
 800f354:	4886      	ldr	r0, [pc, #536]	; (800f570 <_strtod_l+0x5a0>)
 800f356:	f002 fde7 	bl	8011f28 <nan>
 800f35a:	ec5b ab10 	vmov	sl, fp, d0
 800f35e:	e67b      	b.n	800f058 <_strtod_l+0x88>
 800f360:	9b05      	ldr	r3, [sp, #20]
 800f362:	9807      	ldr	r0, [sp, #28]
 800f364:	1af3      	subs	r3, r6, r3
 800f366:	2f00      	cmp	r7, #0
 800f368:	bf08      	it	eq
 800f36a:	462f      	moveq	r7, r5
 800f36c:	2d10      	cmp	r5, #16
 800f36e:	9306      	str	r3, [sp, #24]
 800f370:	46a8      	mov	r8, r5
 800f372:	bfa8      	it	ge
 800f374:	f04f 0810 	movge.w	r8, #16
 800f378:	f7f1 f8e4 	bl	8000544 <__aeabi_ui2d>
 800f37c:	2d09      	cmp	r5, #9
 800f37e:	4682      	mov	sl, r0
 800f380:	468b      	mov	fp, r1
 800f382:	dd13      	ble.n	800f3ac <_strtod_l+0x3dc>
 800f384:	4b7b      	ldr	r3, [pc, #492]	; (800f574 <_strtod_l+0x5a4>)
 800f386:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800f38a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800f38e:	f7f1 f953 	bl	8000638 <__aeabi_dmul>
 800f392:	4682      	mov	sl, r0
 800f394:	4648      	mov	r0, r9
 800f396:	468b      	mov	fp, r1
 800f398:	f7f1 f8d4 	bl	8000544 <__aeabi_ui2d>
 800f39c:	4602      	mov	r2, r0
 800f39e:	460b      	mov	r3, r1
 800f3a0:	4650      	mov	r0, sl
 800f3a2:	4659      	mov	r1, fp
 800f3a4:	f7f0 ff92 	bl	80002cc <__adddf3>
 800f3a8:	4682      	mov	sl, r0
 800f3aa:	468b      	mov	fp, r1
 800f3ac:	2d0f      	cmp	r5, #15
 800f3ae:	dc38      	bgt.n	800f422 <_strtod_l+0x452>
 800f3b0:	9b06      	ldr	r3, [sp, #24]
 800f3b2:	2b00      	cmp	r3, #0
 800f3b4:	f43f ae50 	beq.w	800f058 <_strtod_l+0x88>
 800f3b8:	dd24      	ble.n	800f404 <_strtod_l+0x434>
 800f3ba:	2b16      	cmp	r3, #22
 800f3bc:	dc0b      	bgt.n	800f3d6 <_strtod_l+0x406>
 800f3be:	496d      	ldr	r1, [pc, #436]	; (800f574 <_strtod_l+0x5a4>)
 800f3c0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800f3c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f3c8:	4652      	mov	r2, sl
 800f3ca:	465b      	mov	r3, fp
 800f3cc:	f7f1 f934 	bl	8000638 <__aeabi_dmul>
 800f3d0:	4682      	mov	sl, r0
 800f3d2:	468b      	mov	fp, r1
 800f3d4:	e640      	b.n	800f058 <_strtod_l+0x88>
 800f3d6:	9a06      	ldr	r2, [sp, #24]
 800f3d8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800f3dc:	4293      	cmp	r3, r2
 800f3de:	db20      	blt.n	800f422 <_strtod_l+0x452>
 800f3e0:	4c64      	ldr	r4, [pc, #400]	; (800f574 <_strtod_l+0x5a4>)
 800f3e2:	f1c5 050f 	rsb	r5, r5, #15
 800f3e6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800f3ea:	4652      	mov	r2, sl
 800f3ec:	465b      	mov	r3, fp
 800f3ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f3f2:	f7f1 f921 	bl	8000638 <__aeabi_dmul>
 800f3f6:	9b06      	ldr	r3, [sp, #24]
 800f3f8:	1b5d      	subs	r5, r3, r5
 800f3fa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800f3fe:	e9d4 2300 	ldrd	r2, r3, [r4]
 800f402:	e7e3      	b.n	800f3cc <_strtod_l+0x3fc>
 800f404:	9b06      	ldr	r3, [sp, #24]
 800f406:	3316      	adds	r3, #22
 800f408:	db0b      	blt.n	800f422 <_strtod_l+0x452>
 800f40a:	9b05      	ldr	r3, [sp, #20]
 800f40c:	1b9e      	subs	r6, r3, r6
 800f40e:	4b59      	ldr	r3, [pc, #356]	; (800f574 <_strtod_l+0x5a4>)
 800f410:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800f414:	e9d6 2300 	ldrd	r2, r3, [r6]
 800f418:	4650      	mov	r0, sl
 800f41a:	4659      	mov	r1, fp
 800f41c:	f7f1 fa36 	bl	800088c <__aeabi_ddiv>
 800f420:	e7d6      	b.n	800f3d0 <_strtod_l+0x400>
 800f422:	9b06      	ldr	r3, [sp, #24]
 800f424:	eba5 0808 	sub.w	r8, r5, r8
 800f428:	4498      	add	r8, r3
 800f42a:	f1b8 0f00 	cmp.w	r8, #0
 800f42e:	dd74      	ble.n	800f51a <_strtod_l+0x54a>
 800f430:	f018 030f 	ands.w	r3, r8, #15
 800f434:	d00a      	beq.n	800f44c <_strtod_l+0x47c>
 800f436:	494f      	ldr	r1, [pc, #316]	; (800f574 <_strtod_l+0x5a4>)
 800f438:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800f43c:	4652      	mov	r2, sl
 800f43e:	465b      	mov	r3, fp
 800f440:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f444:	f7f1 f8f8 	bl	8000638 <__aeabi_dmul>
 800f448:	4682      	mov	sl, r0
 800f44a:	468b      	mov	fp, r1
 800f44c:	f038 080f 	bics.w	r8, r8, #15
 800f450:	d04f      	beq.n	800f4f2 <_strtod_l+0x522>
 800f452:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800f456:	dd22      	ble.n	800f49e <_strtod_l+0x4ce>
 800f458:	2500      	movs	r5, #0
 800f45a:	462e      	mov	r6, r5
 800f45c:	9507      	str	r5, [sp, #28]
 800f45e:	9505      	str	r5, [sp, #20]
 800f460:	2322      	movs	r3, #34	; 0x22
 800f462:	f8df b118 	ldr.w	fp, [pc, #280]	; 800f57c <_strtod_l+0x5ac>
 800f466:	6023      	str	r3, [r4, #0]
 800f468:	f04f 0a00 	mov.w	sl, #0
 800f46c:	9b07      	ldr	r3, [sp, #28]
 800f46e:	2b00      	cmp	r3, #0
 800f470:	f43f adf2 	beq.w	800f058 <_strtod_l+0x88>
 800f474:	9918      	ldr	r1, [sp, #96]	; 0x60
 800f476:	4620      	mov	r0, r4
 800f478:	f001 fe82 	bl	8011180 <_Bfree>
 800f47c:	9905      	ldr	r1, [sp, #20]
 800f47e:	4620      	mov	r0, r4
 800f480:	f001 fe7e 	bl	8011180 <_Bfree>
 800f484:	4631      	mov	r1, r6
 800f486:	4620      	mov	r0, r4
 800f488:	f001 fe7a 	bl	8011180 <_Bfree>
 800f48c:	9907      	ldr	r1, [sp, #28]
 800f48e:	4620      	mov	r0, r4
 800f490:	f001 fe76 	bl	8011180 <_Bfree>
 800f494:	4629      	mov	r1, r5
 800f496:	4620      	mov	r0, r4
 800f498:	f001 fe72 	bl	8011180 <_Bfree>
 800f49c:	e5dc      	b.n	800f058 <_strtod_l+0x88>
 800f49e:	4b36      	ldr	r3, [pc, #216]	; (800f578 <_strtod_l+0x5a8>)
 800f4a0:	9304      	str	r3, [sp, #16]
 800f4a2:	2300      	movs	r3, #0
 800f4a4:	ea4f 1828 	mov.w	r8, r8, asr #4
 800f4a8:	4650      	mov	r0, sl
 800f4aa:	4659      	mov	r1, fp
 800f4ac:	4699      	mov	r9, r3
 800f4ae:	f1b8 0f01 	cmp.w	r8, #1
 800f4b2:	dc21      	bgt.n	800f4f8 <_strtod_l+0x528>
 800f4b4:	b10b      	cbz	r3, 800f4ba <_strtod_l+0x4ea>
 800f4b6:	4682      	mov	sl, r0
 800f4b8:	468b      	mov	fp, r1
 800f4ba:	4b2f      	ldr	r3, [pc, #188]	; (800f578 <_strtod_l+0x5a8>)
 800f4bc:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800f4c0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800f4c4:	4652      	mov	r2, sl
 800f4c6:	465b      	mov	r3, fp
 800f4c8:	e9d9 0100 	ldrd	r0, r1, [r9]
 800f4cc:	f7f1 f8b4 	bl	8000638 <__aeabi_dmul>
 800f4d0:	4b2a      	ldr	r3, [pc, #168]	; (800f57c <_strtod_l+0x5ac>)
 800f4d2:	460a      	mov	r2, r1
 800f4d4:	400b      	ands	r3, r1
 800f4d6:	492a      	ldr	r1, [pc, #168]	; (800f580 <_strtod_l+0x5b0>)
 800f4d8:	428b      	cmp	r3, r1
 800f4da:	4682      	mov	sl, r0
 800f4dc:	d8bc      	bhi.n	800f458 <_strtod_l+0x488>
 800f4de:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800f4e2:	428b      	cmp	r3, r1
 800f4e4:	bf86      	itte	hi
 800f4e6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800f584 <_strtod_l+0x5b4>
 800f4ea:	f04f 3aff 	movhi.w	sl, #4294967295
 800f4ee:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800f4f2:	2300      	movs	r3, #0
 800f4f4:	9304      	str	r3, [sp, #16]
 800f4f6:	e084      	b.n	800f602 <_strtod_l+0x632>
 800f4f8:	f018 0f01 	tst.w	r8, #1
 800f4fc:	d005      	beq.n	800f50a <_strtod_l+0x53a>
 800f4fe:	9b04      	ldr	r3, [sp, #16]
 800f500:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f504:	f7f1 f898 	bl	8000638 <__aeabi_dmul>
 800f508:	2301      	movs	r3, #1
 800f50a:	9a04      	ldr	r2, [sp, #16]
 800f50c:	3208      	adds	r2, #8
 800f50e:	f109 0901 	add.w	r9, r9, #1
 800f512:	ea4f 0868 	mov.w	r8, r8, asr #1
 800f516:	9204      	str	r2, [sp, #16]
 800f518:	e7c9      	b.n	800f4ae <_strtod_l+0x4de>
 800f51a:	d0ea      	beq.n	800f4f2 <_strtod_l+0x522>
 800f51c:	f1c8 0800 	rsb	r8, r8, #0
 800f520:	f018 020f 	ands.w	r2, r8, #15
 800f524:	d00a      	beq.n	800f53c <_strtod_l+0x56c>
 800f526:	4b13      	ldr	r3, [pc, #76]	; (800f574 <_strtod_l+0x5a4>)
 800f528:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f52c:	4650      	mov	r0, sl
 800f52e:	4659      	mov	r1, fp
 800f530:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f534:	f7f1 f9aa 	bl	800088c <__aeabi_ddiv>
 800f538:	4682      	mov	sl, r0
 800f53a:	468b      	mov	fp, r1
 800f53c:	ea5f 1828 	movs.w	r8, r8, asr #4
 800f540:	d0d7      	beq.n	800f4f2 <_strtod_l+0x522>
 800f542:	f1b8 0f1f 	cmp.w	r8, #31
 800f546:	dd1f      	ble.n	800f588 <_strtod_l+0x5b8>
 800f548:	2500      	movs	r5, #0
 800f54a:	462e      	mov	r6, r5
 800f54c:	9507      	str	r5, [sp, #28]
 800f54e:	9505      	str	r5, [sp, #20]
 800f550:	2322      	movs	r3, #34	; 0x22
 800f552:	f04f 0a00 	mov.w	sl, #0
 800f556:	f04f 0b00 	mov.w	fp, #0
 800f55a:	6023      	str	r3, [r4, #0]
 800f55c:	e786      	b.n	800f46c <_strtod_l+0x49c>
 800f55e:	bf00      	nop
 800f560:	08012d9d 	.word	0x08012d9d
 800f564:	08012de0 	.word	0x08012de0
 800f568:	08012d95 	.word	0x08012d95
 800f56c:	08012f24 	.word	0x08012f24
 800f570:	080131d0 	.word	0x080131d0
 800f574:	080130b0 	.word	0x080130b0
 800f578:	08013088 	.word	0x08013088
 800f57c:	7ff00000 	.word	0x7ff00000
 800f580:	7ca00000 	.word	0x7ca00000
 800f584:	7fefffff 	.word	0x7fefffff
 800f588:	f018 0310 	ands.w	r3, r8, #16
 800f58c:	bf18      	it	ne
 800f58e:	236a      	movne	r3, #106	; 0x6a
 800f590:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800f940 <_strtod_l+0x970>
 800f594:	9304      	str	r3, [sp, #16]
 800f596:	4650      	mov	r0, sl
 800f598:	4659      	mov	r1, fp
 800f59a:	2300      	movs	r3, #0
 800f59c:	f018 0f01 	tst.w	r8, #1
 800f5a0:	d004      	beq.n	800f5ac <_strtod_l+0x5dc>
 800f5a2:	e9d9 2300 	ldrd	r2, r3, [r9]
 800f5a6:	f7f1 f847 	bl	8000638 <__aeabi_dmul>
 800f5aa:	2301      	movs	r3, #1
 800f5ac:	ea5f 0868 	movs.w	r8, r8, asr #1
 800f5b0:	f109 0908 	add.w	r9, r9, #8
 800f5b4:	d1f2      	bne.n	800f59c <_strtod_l+0x5cc>
 800f5b6:	b10b      	cbz	r3, 800f5bc <_strtod_l+0x5ec>
 800f5b8:	4682      	mov	sl, r0
 800f5ba:	468b      	mov	fp, r1
 800f5bc:	9b04      	ldr	r3, [sp, #16]
 800f5be:	b1c3      	cbz	r3, 800f5f2 <_strtod_l+0x622>
 800f5c0:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800f5c4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800f5c8:	2b00      	cmp	r3, #0
 800f5ca:	4659      	mov	r1, fp
 800f5cc:	dd11      	ble.n	800f5f2 <_strtod_l+0x622>
 800f5ce:	2b1f      	cmp	r3, #31
 800f5d0:	f340 8124 	ble.w	800f81c <_strtod_l+0x84c>
 800f5d4:	2b34      	cmp	r3, #52	; 0x34
 800f5d6:	bfde      	ittt	le
 800f5d8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800f5dc:	f04f 33ff 	movle.w	r3, #4294967295
 800f5e0:	fa03 f202 	lslle.w	r2, r3, r2
 800f5e4:	f04f 0a00 	mov.w	sl, #0
 800f5e8:	bfcc      	ite	gt
 800f5ea:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800f5ee:	ea02 0b01 	andle.w	fp, r2, r1
 800f5f2:	2200      	movs	r2, #0
 800f5f4:	2300      	movs	r3, #0
 800f5f6:	4650      	mov	r0, sl
 800f5f8:	4659      	mov	r1, fp
 800f5fa:	f7f1 fa85 	bl	8000b08 <__aeabi_dcmpeq>
 800f5fe:	2800      	cmp	r0, #0
 800f600:	d1a2      	bne.n	800f548 <_strtod_l+0x578>
 800f602:	9b07      	ldr	r3, [sp, #28]
 800f604:	9300      	str	r3, [sp, #0]
 800f606:	9908      	ldr	r1, [sp, #32]
 800f608:	462b      	mov	r3, r5
 800f60a:	463a      	mov	r2, r7
 800f60c:	4620      	mov	r0, r4
 800f60e:	f001 fe1f 	bl	8011250 <__s2b>
 800f612:	9007      	str	r0, [sp, #28]
 800f614:	2800      	cmp	r0, #0
 800f616:	f43f af1f 	beq.w	800f458 <_strtod_l+0x488>
 800f61a:	9b05      	ldr	r3, [sp, #20]
 800f61c:	1b9e      	subs	r6, r3, r6
 800f61e:	9b06      	ldr	r3, [sp, #24]
 800f620:	2b00      	cmp	r3, #0
 800f622:	bfb4      	ite	lt
 800f624:	4633      	movlt	r3, r6
 800f626:	2300      	movge	r3, #0
 800f628:	930c      	str	r3, [sp, #48]	; 0x30
 800f62a:	9b06      	ldr	r3, [sp, #24]
 800f62c:	2500      	movs	r5, #0
 800f62e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800f632:	9312      	str	r3, [sp, #72]	; 0x48
 800f634:	462e      	mov	r6, r5
 800f636:	9b07      	ldr	r3, [sp, #28]
 800f638:	4620      	mov	r0, r4
 800f63a:	6859      	ldr	r1, [r3, #4]
 800f63c:	f001 fd60 	bl	8011100 <_Balloc>
 800f640:	9005      	str	r0, [sp, #20]
 800f642:	2800      	cmp	r0, #0
 800f644:	f43f af0c 	beq.w	800f460 <_strtod_l+0x490>
 800f648:	9b07      	ldr	r3, [sp, #28]
 800f64a:	691a      	ldr	r2, [r3, #16]
 800f64c:	3202      	adds	r2, #2
 800f64e:	f103 010c 	add.w	r1, r3, #12
 800f652:	0092      	lsls	r2, r2, #2
 800f654:	300c      	adds	r0, #12
 800f656:	f7fe fde1 	bl	800e21c <memcpy>
 800f65a:	ec4b ab10 	vmov	d0, sl, fp
 800f65e:	aa1a      	add	r2, sp, #104	; 0x68
 800f660:	a919      	add	r1, sp, #100	; 0x64
 800f662:	4620      	mov	r0, r4
 800f664:	f002 f93a 	bl	80118dc <__d2b>
 800f668:	ec4b ab18 	vmov	d8, sl, fp
 800f66c:	9018      	str	r0, [sp, #96]	; 0x60
 800f66e:	2800      	cmp	r0, #0
 800f670:	f43f aef6 	beq.w	800f460 <_strtod_l+0x490>
 800f674:	2101      	movs	r1, #1
 800f676:	4620      	mov	r0, r4
 800f678:	f001 fe84 	bl	8011384 <__i2b>
 800f67c:	4606      	mov	r6, r0
 800f67e:	2800      	cmp	r0, #0
 800f680:	f43f aeee 	beq.w	800f460 <_strtod_l+0x490>
 800f684:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800f686:	9904      	ldr	r1, [sp, #16]
 800f688:	2b00      	cmp	r3, #0
 800f68a:	bfab      	itete	ge
 800f68c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800f68e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800f690:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800f692:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800f696:	bfac      	ite	ge
 800f698:	eb03 0902 	addge.w	r9, r3, r2
 800f69c:	1ad7      	sublt	r7, r2, r3
 800f69e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800f6a0:	eba3 0801 	sub.w	r8, r3, r1
 800f6a4:	4490      	add	r8, r2
 800f6a6:	4ba1      	ldr	r3, [pc, #644]	; (800f92c <_strtod_l+0x95c>)
 800f6a8:	f108 38ff 	add.w	r8, r8, #4294967295
 800f6ac:	4598      	cmp	r8, r3
 800f6ae:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800f6b2:	f280 80c7 	bge.w	800f844 <_strtod_l+0x874>
 800f6b6:	eba3 0308 	sub.w	r3, r3, r8
 800f6ba:	2b1f      	cmp	r3, #31
 800f6bc:	eba2 0203 	sub.w	r2, r2, r3
 800f6c0:	f04f 0101 	mov.w	r1, #1
 800f6c4:	f300 80b1 	bgt.w	800f82a <_strtod_l+0x85a>
 800f6c8:	fa01 f303 	lsl.w	r3, r1, r3
 800f6cc:	930d      	str	r3, [sp, #52]	; 0x34
 800f6ce:	2300      	movs	r3, #0
 800f6d0:	9308      	str	r3, [sp, #32]
 800f6d2:	eb09 0802 	add.w	r8, r9, r2
 800f6d6:	9b04      	ldr	r3, [sp, #16]
 800f6d8:	45c1      	cmp	r9, r8
 800f6da:	4417      	add	r7, r2
 800f6dc:	441f      	add	r7, r3
 800f6de:	464b      	mov	r3, r9
 800f6e0:	bfa8      	it	ge
 800f6e2:	4643      	movge	r3, r8
 800f6e4:	42bb      	cmp	r3, r7
 800f6e6:	bfa8      	it	ge
 800f6e8:	463b      	movge	r3, r7
 800f6ea:	2b00      	cmp	r3, #0
 800f6ec:	bfc2      	ittt	gt
 800f6ee:	eba8 0803 	subgt.w	r8, r8, r3
 800f6f2:	1aff      	subgt	r7, r7, r3
 800f6f4:	eba9 0903 	subgt.w	r9, r9, r3
 800f6f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f6fa:	2b00      	cmp	r3, #0
 800f6fc:	dd17      	ble.n	800f72e <_strtod_l+0x75e>
 800f6fe:	4631      	mov	r1, r6
 800f700:	461a      	mov	r2, r3
 800f702:	4620      	mov	r0, r4
 800f704:	f001 fefe 	bl	8011504 <__pow5mult>
 800f708:	4606      	mov	r6, r0
 800f70a:	2800      	cmp	r0, #0
 800f70c:	f43f aea8 	beq.w	800f460 <_strtod_l+0x490>
 800f710:	4601      	mov	r1, r0
 800f712:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800f714:	4620      	mov	r0, r4
 800f716:	f001 fe4b 	bl	80113b0 <__multiply>
 800f71a:	900b      	str	r0, [sp, #44]	; 0x2c
 800f71c:	2800      	cmp	r0, #0
 800f71e:	f43f ae9f 	beq.w	800f460 <_strtod_l+0x490>
 800f722:	9918      	ldr	r1, [sp, #96]	; 0x60
 800f724:	4620      	mov	r0, r4
 800f726:	f001 fd2b 	bl	8011180 <_Bfree>
 800f72a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f72c:	9318      	str	r3, [sp, #96]	; 0x60
 800f72e:	f1b8 0f00 	cmp.w	r8, #0
 800f732:	f300 808c 	bgt.w	800f84e <_strtod_l+0x87e>
 800f736:	9b06      	ldr	r3, [sp, #24]
 800f738:	2b00      	cmp	r3, #0
 800f73a:	dd08      	ble.n	800f74e <_strtod_l+0x77e>
 800f73c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f73e:	9905      	ldr	r1, [sp, #20]
 800f740:	4620      	mov	r0, r4
 800f742:	f001 fedf 	bl	8011504 <__pow5mult>
 800f746:	9005      	str	r0, [sp, #20]
 800f748:	2800      	cmp	r0, #0
 800f74a:	f43f ae89 	beq.w	800f460 <_strtod_l+0x490>
 800f74e:	2f00      	cmp	r7, #0
 800f750:	dd08      	ble.n	800f764 <_strtod_l+0x794>
 800f752:	9905      	ldr	r1, [sp, #20]
 800f754:	463a      	mov	r2, r7
 800f756:	4620      	mov	r0, r4
 800f758:	f001 ff2e 	bl	80115b8 <__lshift>
 800f75c:	9005      	str	r0, [sp, #20]
 800f75e:	2800      	cmp	r0, #0
 800f760:	f43f ae7e 	beq.w	800f460 <_strtod_l+0x490>
 800f764:	f1b9 0f00 	cmp.w	r9, #0
 800f768:	dd08      	ble.n	800f77c <_strtod_l+0x7ac>
 800f76a:	4631      	mov	r1, r6
 800f76c:	464a      	mov	r2, r9
 800f76e:	4620      	mov	r0, r4
 800f770:	f001 ff22 	bl	80115b8 <__lshift>
 800f774:	4606      	mov	r6, r0
 800f776:	2800      	cmp	r0, #0
 800f778:	f43f ae72 	beq.w	800f460 <_strtod_l+0x490>
 800f77c:	9a05      	ldr	r2, [sp, #20]
 800f77e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800f780:	4620      	mov	r0, r4
 800f782:	f001 ffa5 	bl	80116d0 <__mdiff>
 800f786:	4605      	mov	r5, r0
 800f788:	2800      	cmp	r0, #0
 800f78a:	f43f ae69 	beq.w	800f460 <_strtod_l+0x490>
 800f78e:	68c3      	ldr	r3, [r0, #12]
 800f790:	930b      	str	r3, [sp, #44]	; 0x2c
 800f792:	2300      	movs	r3, #0
 800f794:	60c3      	str	r3, [r0, #12]
 800f796:	4631      	mov	r1, r6
 800f798:	f001 ff7e 	bl	8011698 <__mcmp>
 800f79c:	2800      	cmp	r0, #0
 800f79e:	da60      	bge.n	800f862 <_strtod_l+0x892>
 800f7a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f7a2:	ea53 030a 	orrs.w	r3, r3, sl
 800f7a6:	f040 8082 	bne.w	800f8ae <_strtod_l+0x8de>
 800f7aa:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f7ae:	2b00      	cmp	r3, #0
 800f7b0:	d17d      	bne.n	800f8ae <_strtod_l+0x8de>
 800f7b2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800f7b6:	0d1b      	lsrs	r3, r3, #20
 800f7b8:	051b      	lsls	r3, r3, #20
 800f7ba:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800f7be:	d976      	bls.n	800f8ae <_strtod_l+0x8de>
 800f7c0:	696b      	ldr	r3, [r5, #20]
 800f7c2:	b913      	cbnz	r3, 800f7ca <_strtod_l+0x7fa>
 800f7c4:	692b      	ldr	r3, [r5, #16]
 800f7c6:	2b01      	cmp	r3, #1
 800f7c8:	dd71      	ble.n	800f8ae <_strtod_l+0x8de>
 800f7ca:	4629      	mov	r1, r5
 800f7cc:	2201      	movs	r2, #1
 800f7ce:	4620      	mov	r0, r4
 800f7d0:	f001 fef2 	bl	80115b8 <__lshift>
 800f7d4:	4631      	mov	r1, r6
 800f7d6:	4605      	mov	r5, r0
 800f7d8:	f001 ff5e 	bl	8011698 <__mcmp>
 800f7dc:	2800      	cmp	r0, #0
 800f7de:	dd66      	ble.n	800f8ae <_strtod_l+0x8de>
 800f7e0:	9904      	ldr	r1, [sp, #16]
 800f7e2:	4a53      	ldr	r2, [pc, #332]	; (800f930 <_strtod_l+0x960>)
 800f7e4:	465b      	mov	r3, fp
 800f7e6:	2900      	cmp	r1, #0
 800f7e8:	f000 8081 	beq.w	800f8ee <_strtod_l+0x91e>
 800f7ec:	ea02 010b 	and.w	r1, r2, fp
 800f7f0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800f7f4:	dc7b      	bgt.n	800f8ee <_strtod_l+0x91e>
 800f7f6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800f7fa:	f77f aea9 	ble.w	800f550 <_strtod_l+0x580>
 800f7fe:	4b4d      	ldr	r3, [pc, #308]	; (800f934 <_strtod_l+0x964>)
 800f800:	4650      	mov	r0, sl
 800f802:	4659      	mov	r1, fp
 800f804:	2200      	movs	r2, #0
 800f806:	f7f0 ff17 	bl	8000638 <__aeabi_dmul>
 800f80a:	460b      	mov	r3, r1
 800f80c:	4303      	orrs	r3, r0
 800f80e:	bf08      	it	eq
 800f810:	2322      	moveq	r3, #34	; 0x22
 800f812:	4682      	mov	sl, r0
 800f814:	468b      	mov	fp, r1
 800f816:	bf08      	it	eq
 800f818:	6023      	streq	r3, [r4, #0]
 800f81a:	e62b      	b.n	800f474 <_strtod_l+0x4a4>
 800f81c:	f04f 32ff 	mov.w	r2, #4294967295
 800f820:	fa02 f303 	lsl.w	r3, r2, r3
 800f824:	ea03 0a0a 	and.w	sl, r3, sl
 800f828:	e6e3      	b.n	800f5f2 <_strtod_l+0x622>
 800f82a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800f82e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800f832:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800f836:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800f83a:	fa01 f308 	lsl.w	r3, r1, r8
 800f83e:	9308      	str	r3, [sp, #32]
 800f840:	910d      	str	r1, [sp, #52]	; 0x34
 800f842:	e746      	b.n	800f6d2 <_strtod_l+0x702>
 800f844:	2300      	movs	r3, #0
 800f846:	9308      	str	r3, [sp, #32]
 800f848:	2301      	movs	r3, #1
 800f84a:	930d      	str	r3, [sp, #52]	; 0x34
 800f84c:	e741      	b.n	800f6d2 <_strtod_l+0x702>
 800f84e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800f850:	4642      	mov	r2, r8
 800f852:	4620      	mov	r0, r4
 800f854:	f001 feb0 	bl	80115b8 <__lshift>
 800f858:	9018      	str	r0, [sp, #96]	; 0x60
 800f85a:	2800      	cmp	r0, #0
 800f85c:	f47f af6b 	bne.w	800f736 <_strtod_l+0x766>
 800f860:	e5fe      	b.n	800f460 <_strtod_l+0x490>
 800f862:	465f      	mov	r7, fp
 800f864:	d16e      	bne.n	800f944 <_strtod_l+0x974>
 800f866:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f868:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f86c:	b342      	cbz	r2, 800f8c0 <_strtod_l+0x8f0>
 800f86e:	4a32      	ldr	r2, [pc, #200]	; (800f938 <_strtod_l+0x968>)
 800f870:	4293      	cmp	r3, r2
 800f872:	d128      	bne.n	800f8c6 <_strtod_l+0x8f6>
 800f874:	9b04      	ldr	r3, [sp, #16]
 800f876:	4651      	mov	r1, sl
 800f878:	b1eb      	cbz	r3, 800f8b6 <_strtod_l+0x8e6>
 800f87a:	4b2d      	ldr	r3, [pc, #180]	; (800f930 <_strtod_l+0x960>)
 800f87c:	403b      	ands	r3, r7
 800f87e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800f882:	f04f 32ff 	mov.w	r2, #4294967295
 800f886:	d819      	bhi.n	800f8bc <_strtod_l+0x8ec>
 800f888:	0d1b      	lsrs	r3, r3, #20
 800f88a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800f88e:	fa02 f303 	lsl.w	r3, r2, r3
 800f892:	4299      	cmp	r1, r3
 800f894:	d117      	bne.n	800f8c6 <_strtod_l+0x8f6>
 800f896:	4b29      	ldr	r3, [pc, #164]	; (800f93c <_strtod_l+0x96c>)
 800f898:	429f      	cmp	r7, r3
 800f89a:	d102      	bne.n	800f8a2 <_strtod_l+0x8d2>
 800f89c:	3101      	adds	r1, #1
 800f89e:	f43f addf 	beq.w	800f460 <_strtod_l+0x490>
 800f8a2:	4b23      	ldr	r3, [pc, #140]	; (800f930 <_strtod_l+0x960>)
 800f8a4:	403b      	ands	r3, r7
 800f8a6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800f8aa:	f04f 0a00 	mov.w	sl, #0
 800f8ae:	9b04      	ldr	r3, [sp, #16]
 800f8b0:	2b00      	cmp	r3, #0
 800f8b2:	d1a4      	bne.n	800f7fe <_strtod_l+0x82e>
 800f8b4:	e5de      	b.n	800f474 <_strtod_l+0x4a4>
 800f8b6:	f04f 33ff 	mov.w	r3, #4294967295
 800f8ba:	e7ea      	b.n	800f892 <_strtod_l+0x8c2>
 800f8bc:	4613      	mov	r3, r2
 800f8be:	e7e8      	b.n	800f892 <_strtod_l+0x8c2>
 800f8c0:	ea53 030a 	orrs.w	r3, r3, sl
 800f8c4:	d08c      	beq.n	800f7e0 <_strtod_l+0x810>
 800f8c6:	9b08      	ldr	r3, [sp, #32]
 800f8c8:	b1db      	cbz	r3, 800f902 <_strtod_l+0x932>
 800f8ca:	423b      	tst	r3, r7
 800f8cc:	d0ef      	beq.n	800f8ae <_strtod_l+0x8de>
 800f8ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f8d0:	9a04      	ldr	r2, [sp, #16]
 800f8d2:	4650      	mov	r0, sl
 800f8d4:	4659      	mov	r1, fp
 800f8d6:	b1c3      	cbz	r3, 800f90a <_strtod_l+0x93a>
 800f8d8:	f7ff fb5e 	bl	800ef98 <sulp>
 800f8dc:	4602      	mov	r2, r0
 800f8de:	460b      	mov	r3, r1
 800f8e0:	ec51 0b18 	vmov	r0, r1, d8
 800f8e4:	f7f0 fcf2 	bl	80002cc <__adddf3>
 800f8e8:	4682      	mov	sl, r0
 800f8ea:	468b      	mov	fp, r1
 800f8ec:	e7df      	b.n	800f8ae <_strtod_l+0x8de>
 800f8ee:	4013      	ands	r3, r2
 800f8f0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800f8f4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800f8f8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800f8fc:	f04f 3aff 	mov.w	sl, #4294967295
 800f900:	e7d5      	b.n	800f8ae <_strtod_l+0x8de>
 800f902:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f904:	ea13 0f0a 	tst.w	r3, sl
 800f908:	e7e0      	b.n	800f8cc <_strtod_l+0x8fc>
 800f90a:	f7ff fb45 	bl	800ef98 <sulp>
 800f90e:	4602      	mov	r2, r0
 800f910:	460b      	mov	r3, r1
 800f912:	ec51 0b18 	vmov	r0, r1, d8
 800f916:	f7f0 fcd7 	bl	80002c8 <__aeabi_dsub>
 800f91a:	2200      	movs	r2, #0
 800f91c:	2300      	movs	r3, #0
 800f91e:	4682      	mov	sl, r0
 800f920:	468b      	mov	fp, r1
 800f922:	f7f1 f8f1 	bl	8000b08 <__aeabi_dcmpeq>
 800f926:	2800      	cmp	r0, #0
 800f928:	d0c1      	beq.n	800f8ae <_strtod_l+0x8de>
 800f92a:	e611      	b.n	800f550 <_strtod_l+0x580>
 800f92c:	fffffc02 	.word	0xfffffc02
 800f930:	7ff00000 	.word	0x7ff00000
 800f934:	39500000 	.word	0x39500000
 800f938:	000fffff 	.word	0x000fffff
 800f93c:	7fefffff 	.word	0x7fefffff
 800f940:	08012df8 	.word	0x08012df8
 800f944:	4631      	mov	r1, r6
 800f946:	4628      	mov	r0, r5
 800f948:	f002 f824 	bl	8011994 <__ratio>
 800f94c:	ec59 8b10 	vmov	r8, r9, d0
 800f950:	ee10 0a10 	vmov	r0, s0
 800f954:	2200      	movs	r2, #0
 800f956:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800f95a:	4649      	mov	r1, r9
 800f95c:	f7f1 f8e8 	bl	8000b30 <__aeabi_dcmple>
 800f960:	2800      	cmp	r0, #0
 800f962:	d07a      	beq.n	800fa5a <_strtod_l+0xa8a>
 800f964:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f966:	2b00      	cmp	r3, #0
 800f968:	d04a      	beq.n	800fa00 <_strtod_l+0xa30>
 800f96a:	4b95      	ldr	r3, [pc, #596]	; (800fbc0 <_strtod_l+0xbf0>)
 800f96c:	2200      	movs	r2, #0
 800f96e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800f972:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800fbc0 <_strtod_l+0xbf0>
 800f976:	f04f 0800 	mov.w	r8, #0
 800f97a:	4b92      	ldr	r3, [pc, #584]	; (800fbc4 <_strtod_l+0xbf4>)
 800f97c:	403b      	ands	r3, r7
 800f97e:	930d      	str	r3, [sp, #52]	; 0x34
 800f980:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f982:	4b91      	ldr	r3, [pc, #580]	; (800fbc8 <_strtod_l+0xbf8>)
 800f984:	429a      	cmp	r2, r3
 800f986:	f040 80b0 	bne.w	800faea <_strtod_l+0xb1a>
 800f98a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800f98e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800f992:	ec4b ab10 	vmov	d0, sl, fp
 800f996:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800f99a:	f001 ff23 	bl	80117e4 <__ulp>
 800f99e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800f9a2:	ec53 2b10 	vmov	r2, r3, d0
 800f9a6:	f7f0 fe47 	bl	8000638 <__aeabi_dmul>
 800f9aa:	4652      	mov	r2, sl
 800f9ac:	465b      	mov	r3, fp
 800f9ae:	f7f0 fc8d 	bl	80002cc <__adddf3>
 800f9b2:	460b      	mov	r3, r1
 800f9b4:	4983      	ldr	r1, [pc, #524]	; (800fbc4 <_strtod_l+0xbf4>)
 800f9b6:	4a85      	ldr	r2, [pc, #532]	; (800fbcc <_strtod_l+0xbfc>)
 800f9b8:	4019      	ands	r1, r3
 800f9ba:	4291      	cmp	r1, r2
 800f9bc:	4682      	mov	sl, r0
 800f9be:	d960      	bls.n	800fa82 <_strtod_l+0xab2>
 800f9c0:	ee18 3a90 	vmov	r3, s17
 800f9c4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800f9c8:	4293      	cmp	r3, r2
 800f9ca:	d104      	bne.n	800f9d6 <_strtod_l+0xa06>
 800f9cc:	ee18 3a10 	vmov	r3, s16
 800f9d0:	3301      	adds	r3, #1
 800f9d2:	f43f ad45 	beq.w	800f460 <_strtod_l+0x490>
 800f9d6:	f8df b200 	ldr.w	fp, [pc, #512]	; 800fbd8 <_strtod_l+0xc08>
 800f9da:	f04f 3aff 	mov.w	sl, #4294967295
 800f9de:	9918      	ldr	r1, [sp, #96]	; 0x60
 800f9e0:	4620      	mov	r0, r4
 800f9e2:	f001 fbcd 	bl	8011180 <_Bfree>
 800f9e6:	9905      	ldr	r1, [sp, #20]
 800f9e8:	4620      	mov	r0, r4
 800f9ea:	f001 fbc9 	bl	8011180 <_Bfree>
 800f9ee:	4631      	mov	r1, r6
 800f9f0:	4620      	mov	r0, r4
 800f9f2:	f001 fbc5 	bl	8011180 <_Bfree>
 800f9f6:	4629      	mov	r1, r5
 800f9f8:	4620      	mov	r0, r4
 800f9fa:	f001 fbc1 	bl	8011180 <_Bfree>
 800f9fe:	e61a      	b.n	800f636 <_strtod_l+0x666>
 800fa00:	f1ba 0f00 	cmp.w	sl, #0
 800fa04:	d11b      	bne.n	800fa3e <_strtod_l+0xa6e>
 800fa06:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800fa0a:	b9f3      	cbnz	r3, 800fa4a <_strtod_l+0xa7a>
 800fa0c:	4b6c      	ldr	r3, [pc, #432]	; (800fbc0 <_strtod_l+0xbf0>)
 800fa0e:	2200      	movs	r2, #0
 800fa10:	4640      	mov	r0, r8
 800fa12:	4649      	mov	r1, r9
 800fa14:	f7f1 f882 	bl	8000b1c <__aeabi_dcmplt>
 800fa18:	b9d0      	cbnz	r0, 800fa50 <_strtod_l+0xa80>
 800fa1a:	4640      	mov	r0, r8
 800fa1c:	4649      	mov	r1, r9
 800fa1e:	4b6c      	ldr	r3, [pc, #432]	; (800fbd0 <_strtod_l+0xc00>)
 800fa20:	2200      	movs	r2, #0
 800fa22:	f7f0 fe09 	bl	8000638 <__aeabi_dmul>
 800fa26:	4680      	mov	r8, r0
 800fa28:	4689      	mov	r9, r1
 800fa2a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800fa2e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800fa32:	9315      	str	r3, [sp, #84]	; 0x54
 800fa34:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800fa38:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800fa3c:	e79d      	b.n	800f97a <_strtod_l+0x9aa>
 800fa3e:	f1ba 0f01 	cmp.w	sl, #1
 800fa42:	d102      	bne.n	800fa4a <_strtod_l+0xa7a>
 800fa44:	2f00      	cmp	r7, #0
 800fa46:	f43f ad83 	beq.w	800f550 <_strtod_l+0x580>
 800fa4a:	4b62      	ldr	r3, [pc, #392]	; (800fbd4 <_strtod_l+0xc04>)
 800fa4c:	2200      	movs	r2, #0
 800fa4e:	e78e      	b.n	800f96e <_strtod_l+0x99e>
 800fa50:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800fbd0 <_strtod_l+0xc00>
 800fa54:	f04f 0800 	mov.w	r8, #0
 800fa58:	e7e7      	b.n	800fa2a <_strtod_l+0xa5a>
 800fa5a:	4b5d      	ldr	r3, [pc, #372]	; (800fbd0 <_strtod_l+0xc00>)
 800fa5c:	4640      	mov	r0, r8
 800fa5e:	4649      	mov	r1, r9
 800fa60:	2200      	movs	r2, #0
 800fa62:	f7f0 fde9 	bl	8000638 <__aeabi_dmul>
 800fa66:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fa68:	4680      	mov	r8, r0
 800fa6a:	4689      	mov	r9, r1
 800fa6c:	b933      	cbnz	r3, 800fa7c <_strtod_l+0xaac>
 800fa6e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fa72:	900e      	str	r0, [sp, #56]	; 0x38
 800fa74:	930f      	str	r3, [sp, #60]	; 0x3c
 800fa76:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800fa7a:	e7dd      	b.n	800fa38 <_strtod_l+0xa68>
 800fa7c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800fa80:	e7f9      	b.n	800fa76 <_strtod_l+0xaa6>
 800fa82:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800fa86:	9b04      	ldr	r3, [sp, #16]
 800fa88:	2b00      	cmp	r3, #0
 800fa8a:	d1a8      	bne.n	800f9de <_strtod_l+0xa0e>
 800fa8c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800fa90:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800fa92:	0d1b      	lsrs	r3, r3, #20
 800fa94:	051b      	lsls	r3, r3, #20
 800fa96:	429a      	cmp	r2, r3
 800fa98:	d1a1      	bne.n	800f9de <_strtod_l+0xa0e>
 800fa9a:	4640      	mov	r0, r8
 800fa9c:	4649      	mov	r1, r9
 800fa9e:	f7f1 f92b 	bl	8000cf8 <__aeabi_d2lz>
 800faa2:	f7f0 fd9b 	bl	80005dc <__aeabi_l2d>
 800faa6:	4602      	mov	r2, r0
 800faa8:	460b      	mov	r3, r1
 800faaa:	4640      	mov	r0, r8
 800faac:	4649      	mov	r1, r9
 800faae:	f7f0 fc0b 	bl	80002c8 <__aeabi_dsub>
 800fab2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800fab4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800fab8:	ea43 030a 	orr.w	r3, r3, sl
 800fabc:	4313      	orrs	r3, r2
 800fabe:	4680      	mov	r8, r0
 800fac0:	4689      	mov	r9, r1
 800fac2:	d055      	beq.n	800fb70 <_strtod_l+0xba0>
 800fac4:	a336      	add	r3, pc, #216	; (adr r3, 800fba0 <_strtod_l+0xbd0>)
 800fac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800faca:	f7f1 f827 	bl	8000b1c <__aeabi_dcmplt>
 800face:	2800      	cmp	r0, #0
 800fad0:	f47f acd0 	bne.w	800f474 <_strtod_l+0x4a4>
 800fad4:	a334      	add	r3, pc, #208	; (adr r3, 800fba8 <_strtod_l+0xbd8>)
 800fad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fada:	4640      	mov	r0, r8
 800fadc:	4649      	mov	r1, r9
 800fade:	f7f1 f83b 	bl	8000b58 <__aeabi_dcmpgt>
 800fae2:	2800      	cmp	r0, #0
 800fae4:	f43f af7b 	beq.w	800f9de <_strtod_l+0xa0e>
 800fae8:	e4c4      	b.n	800f474 <_strtod_l+0x4a4>
 800faea:	9b04      	ldr	r3, [sp, #16]
 800faec:	b333      	cbz	r3, 800fb3c <_strtod_l+0xb6c>
 800faee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800faf0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800faf4:	d822      	bhi.n	800fb3c <_strtod_l+0xb6c>
 800faf6:	a32e      	add	r3, pc, #184	; (adr r3, 800fbb0 <_strtod_l+0xbe0>)
 800faf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fafc:	4640      	mov	r0, r8
 800fafe:	4649      	mov	r1, r9
 800fb00:	f7f1 f816 	bl	8000b30 <__aeabi_dcmple>
 800fb04:	b1a0      	cbz	r0, 800fb30 <_strtod_l+0xb60>
 800fb06:	4649      	mov	r1, r9
 800fb08:	4640      	mov	r0, r8
 800fb0a:	f7f1 f86d 	bl	8000be8 <__aeabi_d2uiz>
 800fb0e:	2801      	cmp	r0, #1
 800fb10:	bf38      	it	cc
 800fb12:	2001      	movcc	r0, #1
 800fb14:	f7f0 fd16 	bl	8000544 <__aeabi_ui2d>
 800fb18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fb1a:	4680      	mov	r8, r0
 800fb1c:	4689      	mov	r9, r1
 800fb1e:	bb23      	cbnz	r3, 800fb6a <_strtod_l+0xb9a>
 800fb20:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fb24:	9010      	str	r0, [sp, #64]	; 0x40
 800fb26:	9311      	str	r3, [sp, #68]	; 0x44
 800fb28:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800fb2c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800fb30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fb32:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800fb34:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800fb38:	1a9b      	subs	r3, r3, r2
 800fb3a:	9309      	str	r3, [sp, #36]	; 0x24
 800fb3c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800fb40:	eeb0 0a48 	vmov.f32	s0, s16
 800fb44:	eef0 0a68 	vmov.f32	s1, s17
 800fb48:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800fb4c:	f001 fe4a 	bl	80117e4 <__ulp>
 800fb50:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800fb54:	ec53 2b10 	vmov	r2, r3, d0
 800fb58:	f7f0 fd6e 	bl	8000638 <__aeabi_dmul>
 800fb5c:	ec53 2b18 	vmov	r2, r3, d8
 800fb60:	f7f0 fbb4 	bl	80002cc <__adddf3>
 800fb64:	4682      	mov	sl, r0
 800fb66:	468b      	mov	fp, r1
 800fb68:	e78d      	b.n	800fa86 <_strtod_l+0xab6>
 800fb6a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800fb6e:	e7db      	b.n	800fb28 <_strtod_l+0xb58>
 800fb70:	a311      	add	r3, pc, #68	; (adr r3, 800fbb8 <_strtod_l+0xbe8>)
 800fb72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb76:	f7f0 ffd1 	bl	8000b1c <__aeabi_dcmplt>
 800fb7a:	e7b2      	b.n	800fae2 <_strtod_l+0xb12>
 800fb7c:	2300      	movs	r3, #0
 800fb7e:	930a      	str	r3, [sp, #40]	; 0x28
 800fb80:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800fb82:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800fb84:	6013      	str	r3, [r2, #0]
 800fb86:	f7ff ba6b 	b.w	800f060 <_strtod_l+0x90>
 800fb8a:	2a65      	cmp	r2, #101	; 0x65
 800fb8c:	f43f ab5f 	beq.w	800f24e <_strtod_l+0x27e>
 800fb90:	2a45      	cmp	r2, #69	; 0x45
 800fb92:	f43f ab5c 	beq.w	800f24e <_strtod_l+0x27e>
 800fb96:	2301      	movs	r3, #1
 800fb98:	f7ff bb94 	b.w	800f2c4 <_strtod_l+0x2f4>
 800fb9c:	f3af 8000 	nop.w
 800fba0:	94a03595 	.word	0x94a03595
 800fba4:	3fdfffff 	.word	0x3fdfffff
 800fba8:	35afe535 	.word	0x35afe535
 800fbac:	3fe00000 	.word	0x3fe00000
 800fbb0:	ffc00000 	.word	0xffc00000
 800fbb4:	41dfffff 	.word	0x41dfffff
 800fbb8:	94a03595 	.word	0x94a03595
 800fbbc:	3fcfffff 	.word	0x3fcfffff
 800fbc0:	3ff00000 	.word	0x3ff00000
 800fbc4:	7ff00000 	.word	0x7ff00000
 800fbc8:	7fe00000 	.word	0x7fe00000
 800fbcc:	7c9fffff 	.word	0x7c9fffff
 800fbd0:	3fe00000 	.word	0x3fe00000
 800fbd4:	bff00000 	.word	0xbff00000
 800fbd8:	7fefffff 	.word	0x7fefffff

0800fbdc <_strtod_r>:
 800fbdc:	4b01      	ldr	r3, [pc, #4]	; (800fbe4 <_strtod_r+0x8>)
 800fbde:	f7ff b9f7 	b.w	800efd0 <_strtod_l>
 800fbe2:	bf00      	nop
 800fbe4:	20000330 	.word	0x20000330

0800fbe8 <_strtol_l.constprop.0>:
 800fbe8:	2b01      	cmp	r3, #1
 800fbea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fbee:	d001      	beq.n	800fbf4 <_strtol_l.constprop.0+0xc>
 800fbf0:	2b24      	cmp	r3, #36	; 0x24
 800fbf2:	d906      	bls.n	800fc02 <_strtol_l.constprop.0+0x1a>
 800fbf4:	f7fe fae8 	bl	800e1c8 <__errno>
 800fbf8:	2316      	movs	r3, #22
 800fbfa:	6003      	str	r3, [r0, #0]
 800fbfc:	2000      	movs	r0, #0
 800fbfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fc02:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800fce8 <_strtol_l.constprop.0+0x100>
 800fc06:	460d      	mov	r5, r1
 800fc08:	462e      	mov	r6, r5
 800fc0a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800fc0e:	f814 700c 	ldrb.w	r7, [r4, ip]
 800fc12:	f017 0708 	ands.w	r7, r7, #8
 800fc16:	d1f7      	bne.n	800fc08 <_strtol_l.constprop.0+0x20>
 800fc18:	2c2d      	cmp	r4, #45	; 0x2d
 800fc1a:	d132      	bne.n	800fc82 <_strtol_l.constprop.0+0x9a>
 800fc1c:	782c      	ldrb	r4, [r5, #0]
 800fc1e:	2701      	movs	r7, #1
 800fc20:	1cb5      	adds	r5, r6, #2
 800fc22:	2b00      	cmp	r3, #0
 800fc24:	d05b      	beq.n	800fcde <_strtol_l.constprop.0+0xf6>
 800fc26:	2b10      	cmp	r3, #16
 800fc28:	d109      	bne.n	800fc3e <_strtol_l.constprop.0+0x56>
 800fc2a:	2c30      	cmp	r4, #48	; 0x30
 800fc2c:	d107      	bne.n	800fc3e <_strtol_l.constprop.0+0x56>
 800fc2e:	782c      	ldrb	r4, [r5, #0]
 800fc30:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800fc34:	2c58      	cmp	r4, #88	; 0x58
 800fc36:	d14d      	bne.n	800fcd4 <_strtol_l.constprop.0+0xec>
 800fc38:	786c      	ldrb	r4, [r5, #1]
 800fc3a:	2310      	movs	r3, #16
 800fc3c:	3502      	adds	r5, #2
 800fc3e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800fc42:	f108 38ff 	add.w	r8, r8, #4294967295
 800fc46:	f04f 0c00 	mov.w	ip, #0
 800fc4a:	fbb8 f9f3 	udiv	r9, r8, r3
 800fc4e:	4666      	mov	r6, ip
 800fc50:	fb03 8a19 	mls	sl, r3, r9, r8
 800fc54:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800fc58:	f1be 0f09 	cmp.w	lr, #9
 800fc5c:	d816      	bhi.n	800fc8c <_strtol_l.constprop.0+0xa4>
 800fc5e:	4674      	mov	r4, lr
 800fc60:	42a3      	cmp	r3, r4
 800fc62:	dd24      	ble.n	800fcae <_strtol_l.constprop.0+0xc6>
 800fc64:	f1bc 0f00 	cmp.w	ip, #0
 800fc68:	db1e      	blt.n	800fca8 <_strtol_l.constprop.0+0xc0>
 800fc6a:	45b1      	cmp	r9, r6
 800fc6c:	d31c      	bcc.n	800fca8 <_strtol_l.constprop.0+0xc0>
 800fc6e:	d101      	bne.n	800fc74 <_strtol_l.constprop.0+0x8c>
 800fc70:	45a2      	cmp	sl, r4
 800fc72:	db19      	blt.n	800fca8 <_strtol_l.constprop.0+0xc0>
 800fc74:	fb06 4603 	mla	r6, r6, r3, r4
 800fc78:	f04f 0c01 	mov.w	ip, #1
 800fc7c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800fc80:	e7e8      	b.n	800fc54 <_strtol_l.constprop.0+0x6c>
 800fc82:	2c2b      	cmp	r4, #43	; 0x2b
 800fc84:	bf04      	itt	eq
 800fc86:	782c      	ldrbeq	r4, [r5, #0]
 800fc88:	1cb5      	addeq	r5, r6, #2
 800fc8a:	e7ca      	b.n	800fc22 <_strtol_l.constprop.0+0x3a>
 800fc8c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800fc90:	f1be 0f19 	cmp.w	lr, #25
 800fc94:	d801      	bhi.n	800fc9a <_strtol_l.constprop.0+0xb2>
 800fc96:	3c37      	subs	r4, #55	; 0x37
 800fc98:	e7e2      	b.n	800fc60 <_strtol_l.constprop.0+0x78>
 800fc9a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800fc9e:	f1be 0f19 	cmp.w	lr, #25
 800fca2:	d804      	bhi.n	800fcae <_strtol_l.constprop.0+0xc6>
 800fca4:	3c57      	subs	r4, #87	; 0x57
 800fca6:	e7db      	b.n	800fc60 <_strtol_l.constprop.0+0x78>
 800fca8:	f04f 3cff 	mov.w	ip, #4294967295
 800fcac:	e7e6      	b.n	800fc7c <_strtol_l.constprop.0+0x94>
 800fcae:	f1bc 0f00 	cmp.w	ip, #0
 800fcb2:	da05      	bge.n	800fcc0 <_strtol_l.constprop.0+0xd8>
 800fcb4:	2322      	movs	r3, #34	; 0x22
 800fcb6:	6003      	str	r3, [r0, #0]
 800fcb8:	4646      	mov	r6, r8
 800fcba:	b942      	cbnz	r2, 800fcce <_strtol_l.constprop.0+0xe6>
 800fcbc:	4630      	mov	r0, r6
 800fcbe:	e79e      	b.n	800fbfe <_strtol_l.constprop.0+0x16>
 800fcc0:	b107      	cbz	r7, 800fcc4 <_strtol_l.constprop.0+0xdc>
 800fcc2:	4276      	negs	r6, r6
 800fcc4:	2a00      	cmp	r2, #0
 800fcc6:	d0f9      	beq.n	800fcbc <_strtol_l.constprop.0+0xd4>
 800fcc8:	f1bc 0f00 	cmp.w	ip, #0
 800fccc:	d000      	beq.n	800fcd0 <_strtol_l.constprop.0+0xe8>
 800fcce:	1e69      	subs	r1, r5, #1
 800fcd0:	6011      	str	r1, [r2, #0]
 800fcd2:	e7f3      	b.n	800fcbc <_strtol_l.constprop.0+0xd4>
 800fcd4:	2430      	movs	r4, #48	; 0x30
 800fcd6:	2b00      	cmp	r3, #0
 800fcd8:	d1b1      	bne.n	800fc3e <_strtol_l.constprop.0+0x56>
 800fcda:	2308      	movs	r3, #8
 800fcdc:	e7af      	b.n	800fc3e <_strtol_l.constprop.0+0x56>
 800fcde:	2c30      	cmp	r4, #48	; 0x30
 800fce0:	d0a5      	beq.n	800fc2e <_strtol_l.constprop.0+0x46>
 800fce2:	230a      	movs	r3, #10
 800fce4:	e7ab      	b.n	800fc3e <_strtol_l.constprop.0+0x56>
 800fce6:	bf00      	nop
 800fce8:	08012e21 	.word	0x08012e21

0800fcec <_strtol_r>:
 800fcec:	f7ff bf7c 	b.w	800fbe8 <_strtol_l.constprop.0>

0800fcf0 <quorem>:
 800fcf0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fcf4:	6903      	ldr	r3, [r0, #16]
 800fcf6:	690c      	ldr	r4, [r1, #16]
 800fcf8:	42a3      	cmp	r3, r4
 800fcfa:	4607      	mov	r7, r0
 800fcfc:	f2c0 8081 	blt.w	800fe02 <quorem+0x112>
 800fd00:	3c01      	subs	r4, #1
 800fd02:	f101 0814 	add.w	r8, r1, #20
 800fd06:	f100 0514 	add.w	r5, r0, #20
 800fd0a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fd0e:	9301      	str	r3, [sp, #4]
 800fd10:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800fd14:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fd18:	3301      	adds	r3, #1
 800fd1a:	429a      	cmp	r2, r3
 800fd1c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800fd20:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800fd24:	fbb2 f6f3 	udiv	r6, r2, r3
 800fd28:	d331      	bcc.n	800fd8e <quorem+0x9e>
 800fd2a:	f04f 0e00 	mov.w	lr, #0
 800fd2e:	4640      	mov	r0, r8
 800fd30:	46ac      	mov	ip, r5
 800fd32:	46f2      	mov	sl, lr
 800fd34:	f850 2b04 	ldr.w	r2, [r0], #4
 800fd38:	b293      	uxth	r3, r2
 800fd3a:	fb06 e303 	mla	r3, r6, r3, lr
 800fd3e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800fd42:	b29b      	uxth	r3, r3
 800fd44:	ebaa 0303 	sub.w	r3, sl, r3
 800fd48:	f8dc a000 	ldr.w	sl, [ip]
 800fd4c:	0c12      	lsrs	r2, r2, #16
 800fd4e:	fa13 f38a 	uxtah	r3, r3, sl
 800fd52:	fb06 e202 	mla	r2, r6, r2, lr
 800fd56:	9300      	str	r3, [sp, #0]
 800fd58:	9b00      	ldr	r3, [sp, #0]
 800fd5a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800fd5e:	b292      	uxth	r2, r2
 800fd60:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800fd64:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800fd68:	f8bd 3000 	ldrh.w	r3, [sp]
 800fd6c:	4581      	cmp	r9, r0
 800fd6e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fd72:	f84c 3b04 	str.w	r3, [ip], #4
 800fd76:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800fd7a:	d2db      	bcs.n	800fd34 <quorem+0x44>
 800fd7c:	f855 300b 	ldr.w	r3, [r5, fp]
 800fd80:	b92b      	cbnz	r3, 800fd8e <quorem+0x9e>
 800fd82:	9b01      	ldr	r3, [sp, #4]
 800fd84:	3b04      	subs	r3, #4
 800fd86:	429d      	cmp	r5, r3
 800fd88:	461a      	mov	r2, r3
 800fd8a:	d32e      	bcc.n	800fdea <quorem+0xfa>
 800fd8c:	613c      	str	r4, [r7, #16]
 800fd8e:	4638      	mov	r0, r7
 800fd90:	f001 fc82 	bl	8011698 <__mcmp>
 800fd94:	2800      	cmp	r0, #0
 800fd96:	db24      	blt.n	800fde2 <quorem+0xf2>
 800fd98:	3601      	adds	r6, #1
 800fd9a:	4628      	mov	r0, r5
 800fd9c:	f04f 0c00 	mov.w	ip, #0
 800fda0:	f858 2b04 	ldr.w	r2, [r8], #4
 800fda4:	f8d0 e000 	ldr.w	lr, [r0]
 800fda8:	b293      	uxth	r3, r2
 800fdaa:	ebac 0303 	sub.w	r3, ip, r3
 800fdae:	0c12      	lsrs	r2, r2, #16
 800fdb0:	fa13 f38e 	uxtah	r3, r3, lr
 800fdb4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800fdb8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800fdbc:	b29b      	uxth	r3, r3
 800fdbe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fdc2:	45c1      	cmp	r9, r8
 800fdc4:	f840 3b04 	str.w	r3, [r0], #4
 800fdc8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800fdcc:	d2e8      	bcs.n	800fda0 <quorem+0xb0>
 800fdce:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fdd2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fdd6:	b922      	cbnz	r2, 800fde2 <quorem+0xf2>
 800fdd8:	3b04      	subs	r3, #4
 800fdda:	429d      	cmp	r5, r3
 800fddc:	461a      	mov	r2, r3
 800fdde:	d30a      	bcc.n	800fdf6 <quorem+0x106>
 800fde0:	613c      	str	r4, [r7, #16]
 800fde2:	4630      	mov	r0, r6
 800fde4:	b003      	add	sp, #12
 800fde6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fdea:	6812      	ldr	r2, [r2, #0]
 800fdec:	3b04      	subs	r3, #4
 800fdee:	2a00      	cmp	r2, #0
 800fdf0:	d1cc      	bne.n	800fd8c <quorem+0x9c>
 800fdf2:	3c01      	subs	r4, #1
 800fdf4:	e7c7      	b.n	800fd86 <quorem+0x96>
 800fdf6:	6812      	ldr	r2, [r2, #0]
 800fdf8:	3b04      	subs	r3, #4
 800fdfa:	2a00      	cmp	r2, #0
 800fdfc:	d1f0      	bne.n	800fde0 <quorem+0xf0>
 800fdfe:	3c01      	subs	r4, #1
 800fe00:	e7eb      	b.n	800fdda <quorem+0xea>
 800fe02:	2000      	movs	r0, #0
 800fe04:	e7ee      	b.n	800fde4 <quorem+0xf4>
	...

0800fe08 <_dtoa_r>:
 800fe08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe0c:	ed2d 8b04 	vpush	{d8-d9}
 800fe10:	ec57 6b10 	vmov	r6, r7, d0
 800fe14:	b093      	sub	sp, #76	; 0x4c
 800fe16:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800fe18:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800fe1c:	9106      	str	r1, [sp, #24]
 800fe1e:	ee10 aa10 	vmov	sl, s0
 800fe22:	4604      	mov	r4, r0
 800fe24:	9209      	str	r2, [sp, #36]	; 0x24
 800fe26:	930c      	str	r3, [sp, #48]	; 0x30
 800fe28:	46bb      	mov	fp, r7
 800fe2a:	b975      	cbnz	r5, 800fe4a <_dtoa_r+0x42>
 800fe2c:	2010      	movs	r0, #16
 800fe2e:	f001 f94d 	bl	80110cc <malloc>
 800fe32:	4602      	mov	r2, r0
 800fe34:	6260      	str	r0, [r4, #36]	; 0x24
 800fe36:	b920      	cbnz	r0, 800fe42 <_dtoa_r+0x3a>
 800fe38:	4ba7      	ldr	r3, [pc, #668]	; (80100d8 <_dtoa_r+0x2d0>)
 800fe3a:	21ea      	movs	r1, #234	; 0xea
 800fe3c:	48a7      	ldr	r0, [pc, #668]	; (80100dc <_dtoa_r+0x2d4>)
 800fe3e:	f002 f8ad 	bl	8011f9c <__assert_func>
 800fe42:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800fe46:	6005      	str	r5, [r0, #0]
 800fe48:	60c5      	str	r5, [r0, #12]
 800fe4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fe4c:	6819      	ldr	r1, [r3, #0]
 800fe4e:	b151      	cbz	r1, 800fe66 <_dtoa_r+0x5e>
 800fe50:	685a      	ldr	r2, [r3, #4]
 800fe52:	604a      	str	r2, [r1, #4]
 800fe54:	2301      	movs	r3, #1
 800fe56:	4093      	lsls	r3, r2
 800fe58:	608b      	str	r3, [r1, #8]
 800fe5a:	4620      	mov	r0, r4
 800fe5c:	f001 f990 	bl	8011180 <_Bfree>
 800fe60:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fe62:	2200      	movs	r2, #0
 800fe64:	601a      	str	r2, [r3, #0]
 800fe66:	1e3b      	subs	r3, r7, #0
 800fe68:	bfaa      	itet	ge
 800fe6a:	2300      	movge	r3, #0
 800fe6c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800fe70:	f8c8 3000 	strge.w	r3, [r8]
 800fe74:	4b9a      	ldr	r3, [pc, #616]	; (80100e0 <_dtoa_r+0x2d8>)
 800fe76:	bfbc      	itt	lt
 800fe78:	2201      	movlt	r2, #1
 800fe7a:	f8c8 2000 	strlt.w	r2, [r8]
 800fe7e:	ea33 030b 	bics.w	r3, r3, fp
 800fe82:	d11b      	bne.n	800febc <_dtoa_r+0xb4>
 800fe84:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800fe86:	f242 730f 	movw	r3, #9999	; 0x270f
 800fe8a:	6013      	str	r3, [r2, #0]
 800fe8c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800fe90:	4333      	orrs	r3, r6
 800fe92:	f000 8592 	beq.w	80109ba <_dtoa_r+0xbb2>
 800fe96:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fe98:	b963      	cbnz	r3, 800feb4 <_dtoa_r+0xac>
 800fe9a:	4b92      	ldr	r3, [pc, #584]	; (80100e4 <_dtoa_r+0x2dc>)
 800fe9c:	e022      	b.n	800fee4 <_dtoa_r+0xdc>
 800fe9e:	4b92      	ldr	r3, [pc, #584]	; (80100e8 <_dtoa_r+0x2e0>)
 800fea0:	9301      	str	r3, [sp, #4]
 800fea2:	3308      	adds	r3, #8
 800fea4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800fea6:	6013      	str	r3, [r2, #0]
 800fea8:	9801      	ldr	r0, [sp, #4]
 800feaa:	b013      	add	sp, #76	; 0x4c
 800feac:	ecbd 8b04 	vpop	{d8-d9}
 800feb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800feb4:	4b8b      	ldr	r3, [pc, #556]	; (80100e4 <_dtoa_r+0x2dc>)
 800feb6:	9301      	str	r3, [sp, #4]
 800feb8:	3303      	adds	r3, #3
 800feba:	e7f3      	b.n	800fea4 <_dtoa_r+0x9c>
 800febc:	2200      	movs	r2, #0
 800febe:	2300      	movs	r3, #0
 800fec0:	4650      	mov	r0, sl
 800fec2:	4659      	mov	r1, fp
 800fec4:	f7f0 fe20 	bl	8000b08 <__aeabi_dcmpeq>
 800fec8:	ec4b ab19 	vmov	d9, sl, fp
 800fecc:	4680      	mov	r8, r0
 800fece:	b158      	cbz	r0, 800fee8 <_dtoa_r+0xe0>
 800fed0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800fed2:	2301      	movs	r3, #1
 800fed4:	6013      	str	r3, [r2, #0]
 800fed6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fed8:	2b00      	cmp	r3, #0
 800feda:	f000 856b 	beq.w	80109b4 <_dtoa_r+0xbac>
 800fede:	4883      	ldr	r0, [pc, #524]	; (80100ec <_dtoa_r+0x2e4>)
 800fee0:	6018      	str	r0, [r3, #0]
 800fee2:	1e43      	subs	r3, r0, #1
 800fee4:	9301      	str	r3, [sp, #4]
 800fee6:	e7df      	b.n	800fea8 <_dtoa_r+0xa0>
 800fee8:	ec4b ab10 	vmov	d0, sl, fp
 800feec:	aa10      	add	r2, sp, #64	; 0x40
 800feee:	a911      	add	r1, sp, #68	; 0x44
 800fef0:	4620      	mov	r0, r4
 800fef2:	f001 fcf3 	bl	80118dc <__d2b>
 800fef6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800fefa:	ee08 0a10 	vmov	s16, r0
 800fefe:	2d00      	cmp	r5, #0
 800ff00:	f000 8084 	beq.w	801000c <_dtoa_r+0x204>
 800ff04:	ee19 3a90 	vmov	r3, s19
 800ff08:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ff0c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800ff10:	4656      	mov	r6, sl
 800ff12:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800ff16:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800ff1a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800ff1e:	4b74      	ldr	r3, [pc, #464]	; (80100f0 <_dtoa_r+0x2e8>)
 800ff20:	2200      	movs	r2, #0
 800ff22:	4630      	mov	r0, r6
 800ff24:	4639      	mov	r1, r7
 800ff26:	f7f0 f9cf 	bl	80002c8 <__aeabi_dsub>
 800ff2a:	a365      	add	r3, pc, #404	; (adr r3, 80100c0 <_dtoa_r+0x2b8>)
 800ff2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff30:	f7f0 fb82 	bl	8000638 <__aeabi_dmul>
 800ff34:	a364      	add	r3, pc, #400	; (adr r3, 80100c8 <_dtoa_r+0x2c0>)
 800ff36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff3a:	f7f0 f9c7 	bl	80002cc <__adddf3>
 800ff3e:	4606      	mov	r6, r0
 800ff40:	4628      	mov	r0, r5
 800ff42:	460f      	mov	r7, r1
 800ff44:	f7f0 fb0e 	bl	8000564 <__aeabi_i2d>
 800ff48:	a361      	add	r3, pc, #388	; (adr r3, 80100d0 <_dtoa_r+0x2c8>)
 800ff4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff4e:	f7f0 fb73 	bl	8000638 <__aeabi_dmul>
 800ff52:	4602      	mov	r2, r0
 800ff54:	460b      	mov	r3, r1
 800ff56:	4630      	mov	r0, r6
 800ff58:	4639      	mov	r1, r7
 800ff5a:	f7f0 f9b7 	bl	80002cc <__adddf3>
 800ff5e:	4606      	mov	r6, r0
 800ff60:	460f      	mov	r7, r1
 800ff62:	f7f0 fe19 	bl	8000b98 <__aeabi_d2iz>
 800ff66:	2200      	movs	r2, #0
 800ff68:	9000      	str	r0, [sp, #0]
 800ff6a:	2300      	movs	r3, #0
 800ff6c:	4630      	mov	r0, r6
 800ff6e:	4639      	mov	r1, r7
 800ff70:	f7f0 fdd4 	bl	8000b1c <__aeabi_dcmplt>
 800ff74:	b150      	cbz	r0, 800ff8c <_dtoa_r+0x184>
 800ff76:	9800      	ldr	r0, [sp, #0]
 800ff78:	f7f0 faf4 	bl	8000564 <__aeabi_i2d>
 800ff7c:	4632      	mov	r2, r6
 800ff7e:	463b      	mov	r3, r7
 800ff80:	f7f0 fdc2 	bl	8000b08 <__aeabi_dcmpeq>
 800ff84:	b910      	cbnz	r0, 800ff8c <_dtoa_r+0x184>
 800ff86:	9b00      	ldr	r3, [sp, #0]
 800ff88:	3b01      	subs	r3, #1
 800ff8a:	9300      	str	r3, [sp, #0]
 800ff8c:	9b00      	ldr	r3, [sp, #0]
 800ff8e:	2b16      	cmp	r3, #22
 800ff90:	d85a      	bhi.n	8010048 <_dtoa_r+0x240>
 800ff92:	9a00      	ldr	r2, [sp, #0]
 800ff94:	4b57      	ldr	r3, [pc, #348]	; (80100f4 <_dtoa_r+0x2ec>)
 800ff96:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ff9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff9e:	ec51 0b19 	vmov	r0, r1, d9
 800ffa2:	f7f0 fdbb 	bl	8000b1c <__aeabi_dcmplt>
 800ffa6:	2800      	cmp	r0, #0
 800ffa8:	d050      	beq.n	801004c <_dtoa_r+0x244>
 800ffaa:	9b00      	ldr	r3, [sp, #0]
 800ffac:	3b01      	subs	r3, #1
 800ffae:	9300      	str	r3, [sp, #0]
 800ffb0:	2300      	movs	r3, #0
 800ffb2:	930b      	str	r3, [sp, #44]	; 0x2c
 800ffb4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ffb6:	1b5d      	subs	r5, r3, r5
 800ffb8:	1e6b      	subs	r3, r5, #1
 800ffba:	9305      	str	r3, [sp, #20]
 800ffbc:	bf45      	ittet	mi
 800ffbe:	f1c5 0301 	rsbmi	r3, r5, #1
 800ffc2:	9304      	strmi	r3, [sp, #16]
 800ffc4:	2300      	movpl	r3, #0
 800ffc6:	2300      	movmi	r3, #0
 800ffc8:	bf4c      	ite	mi
 800ffca:	9305      	strmi	r3, [sp, #20]
 800ffcc:	9304      	strpl	r3, [sp, #16]
 800ffce:	9b00      	ldr	r3, [sp, #0]
 800ffd0:	2b00      	cmp	r3, #0
 800ffd2:	db3d      	blt.n	8010050 <_dtoa_r+0x248>
 800ffd4:	9b05      	ldr	r3, [sp, #20]
 800ffd6:	9a00      	ldr	r2, [sp, #0]
 800ffd8:	920a      	str	r2, [sp, #40]	; 0x28
 800ffda:	4413      	add	r3, r2
 800ffdc:	9305      	str	r3, [sp, #20]
 800ffde:	2300      	movs	r3, #0
 800ffe0:	9307      	str	r3, [sp, #28]
 800ffe2:	9b06      	ldr	r3, [sp, #24]
 800ffe4:	2b09      	cmp	r3, #9
 800ffe6:	f200 8089 	bhi.w	80100fc <_dtoa_r+0x2f4>
 800ffea:	2b05      	cmp	r3, #5
 800ffec:	bfc4      	itt	gt
 800ffee:	3b04      	subgt	r3, #4
 800fff0:	9306      	strgt	r3, [sp, #24]
 800fff2:	9b06      	ldr	r3, [sp, #24]
 800fff4:	f1a3 0302 	sub.w	r3, r3, #2
 800fff8:	bfcc      	ite	gt
 800fffa:	2500      	movgt	r5, #0
 800fffc:	2501      	movle	r5, #1
 800fffe:	2b03      	cmp	r3, #3
 8010000:	f200 8087 	bhi.w	8010112 <_dtoa_r+0x30a>
 8010004:	e8df f003 	tbb	[pc, r3]
 8010008:	59383a2d 	.word	0x59383a2d
 801000c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8010010:	441d      	add	r5, r3
 8010012:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8010016:	2b20      	cmp	r3, #32
 8010018:	bfc1      	itttt	gt
 801001a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801001e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8010022:	fa0b f303 	lslgt.w	r3, fp, r3
 8010026:	fa26 f000 	lsrgt.w	r0, r6, r0
 801002a:	bfda      	itte	le
 801002c:	f1c3 0320 	rsble	r3, r3, #32
 8010030:	fa06 f003 	lslle.w	r0, r6, r3
 8010034:	4318      	orrgt	r0, r3
 8010036:	f7f0 fa85 	bl	8000544 <__aeabi_ui2d>
 801003a:	2301      	movs	r3, #1
 801003c:	4606      	mov	r6, r0
 801003e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8010042:	3d01      	subs	r5, #1
 8010044:	930e      	str	r3, [sp, #56]	; 0x38
 8010046:	e76a      	b.n	800ff1e <_dtoa_r+0x116>
 8010048:	2301      	movs	r3, #1
 801004a:	e7b2      	b.n	800ffb2 <_dtoa_r+0x1aa>
 801004c:	900b      	str	r0, [sp, #44]	; 0x2c
 801004e:	e7b1      	b.n	800ffb4 <_dtoa_r+0x1ac>
 8010050:	9b04      	ldr	r3, [sp, #16]
 8010052:	9a00      	ldr	r2, [sp, #0]
 8010054:	1a9b      	subs	r3, r3, r2
 8010056:	9304      	str	r3, [sp, #16]
 8010058:	4253      	negs	r3, r2
 801005a:	9307      	str	r3, [sp, #28]
 801005c:	2300      	movs	r3, #0
 801005e:	930a      	str	r3, [sp, #40]	; 0x28
 8010060:	e7bf      	b.n	800ffe2 <_dtoa_r+0x1da>
 8010062:	2300      	movs	r3, #0
 8010064:	9308      	str	r3, [sp, #32]
 8010066:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010068:	2b00      	cmp	r3, #0
 801006a:	dc55      	bgt.n	8010118 <_dtoa_r+0x310>
 801006c:	2301      	movs	r3, #1
 801006e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8010072:	461a      	mov	r2, r3
 8010074:	9209      	str	r2, [sp, #36]	; 0x24
 8010076:	e00c      	b.n	8010092 <_dtoa_r+0x28a>
 8010078:	2301      	movs	r3, #1
 801007a:	e7f3      	b.n	8010064 <_dtoa_r+0x25c>
 801007c:	2300      	movs	r3, #0
 801007e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010080:	9308      	str	r3, [sp, #32]
 8010082:	9b00      	ldr	r3, [sp, #0]
 8010084:	4413      	add	r3, r2
 8010086:	9302      	str	r3, [sp, #8]
 8010088:	3301      	adds	r3, #1
 801008a:	2b01      	cmp	r3, #1
 801008c:	9303      	str	r3, [sp, #12]
 801008e:	bfb8      	it	lt
 8010090:	2301      	movlt	r3, #1
 8010092:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8010094:	2200      	movs	r2, #0
 8010096:	6042      	str	r2, [r0, #4]
 8010098:	2204      	movs	r2, #4
 801009a:	f102 0614 	add.w	r6, r2, #20
 801009e:	429e      	cmp	r6, r3
 80100a0:	6841      	ldr	r1, [r0, #4]
 80100a2:	d93d      	bls.n	8010120 <_dtoa_r+0x318>
 80100a4:	4620      	mov	r0, r4
 80100a6:	f001 f82b 	bl	8011100 <_Balloc>
 80100aa:	9001      	str	r0, [sp, #4]
 80100ac:	2800      	cmp	r0, #0
 80100ae:	d13b      	bne.n	8010128 <_dtoa_r+0x320>
 80100b0:	4b11      	ldr	r3, [pc, #68]	; (80100f8 <_dtoa_r+0x2f0>)
 80100b2:	4602      	mov	r2, r0
 80100b4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80100b8:	e6c0      	b.n	800fe3c <_dtoa_r+0x34>
 80100ba:	2301      	movs	r3, #1
 80100bc:	e7df      	b.n	801007e <_dtoa_r+0x276>
 80100be:	bf00      	nop
 80100c0:	636f4361 	.word	0x636f4361
 80100c4:	3fd287a7 	.word	0x3fd287a7
 80100c8:	8b60c8b3 	.word	0x8b60c8b3
 80100cc:	3fc68a28 	.word	0x3fc68a28
 80100d0:	509f79fb 	.word	0x509f79fb
 80100d4:	3fd34413 	.word	0x3fd34413
 80100d8:	08012f2e 	.word	0x08012f2e
 80100dc:	08012f45 	.word	0x08012f45
 80100e0:	7ff00000 	.word	0x7ff00000
 80100e4:	08012f2a 	.word	0x08012f2a
 80100e8:	08012f21 	.word	0x08012f21
 80100ec:	08012da1 	.word	0x08012da1
 80100f0:	3ff80000 	.word	0x3ff80000
 80100f4:	080130b0 	.word	0x080130b0
 80100f8:	08012fa0 	.word	0x08012fa0
 80100fc:	2501      	movs	r5, #1
 80100fe:	2300      	movs	r3, #0
 8010100:	9306      	str	r3, [sp, #24]
 8010102:	9508      	str	r5, [sp, #32]
 8010104:	f04f 33ff 	mov.w	r3, #4294967295
 8010108:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801010c:	2200      	movs	r2, #0
 801010e:	2312      	movs	r3, #18
 8010110:	e7b0      	b.n	8010074 <_dtoa_r+0x26c>
 8010112:	2301      	movs	r3, #1
 8010114:	9308      	str	r3, [sp, #32]
 8010116:	e7f5      	b.n	8010104 <_dtoa_r+0x2fc>
 8010118:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801011a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801011e:	e7b8      	b.n	8010092 <_dtoa_r+0x28a>
 8010120:	3101      	adds	r1, #1
 8010122:	6041      	str	r1, [r0, #4]
 8010124:	0052      	lsls	r2, r2, #1
 8010126:	e7b8      	b.n	801009a <_dtoa_r+0x292>
 8010128:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801012a:	9a01      	ldr	r2, [sp, #4]
 801012c:	601a      	str	r2, [r3, #0]
 801012e:	9b03      	ldr	r3, [sp, #12]
 8010130:	2b0e      	cmp	r3, #14
 8010132:	f200 809d 	bhi.w	8010270 <_dtoa_r+0x468>
 8010136:	2d00      	cmp	r5, #0
 8010138:	f000 809a 	beq.w	8010270 <_dtoa_r+0x468>
 801013c:	9b00      	ldr	r3, [sp, #0]
 801013e:	2b00      	cmp	r3, #0
 8010140:	dd32      	ble.n	80101a8 <_dtoa_r+0x3a0>
 8010142:	4ab7      	ldr	r2, [pc, #732]	; (8010420 <_dtoa_r+0x618>)
 8010144:	f003 030f 	and.w	r3, r3, #15
 8010148:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801014c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010150:	9b00      	ldr	r3, [sp, #0]
 8010152:	05d8      	lsls	r0, r3, #23
 8010154:	ea4f 1723 	mov.w	r7, r3, asr #4
 8010158:	d516      	bpl.n	8010188 <_dtoa_r+0x380>
 801015a:	4bb2      	ldr	r3, [pc, #712]	; (8010424 <_dtoa_r+0x61c>)
 801015c:	ec51 0b19 	vmov	r0, r1, d9
 8010160:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8010164:	f7f0 fb92 	bl	800088c <__aeabi_ddiv>
 8010168:	f007 070f 	and.w	r7, r7, #15
 801016c:	4682      	mov	sl, r0
 801016e:	468b      	mov	fp, r1
 8010170:	2503      	movs	r5, #3
 8010172:	4eac      	ldr	r6, [pc, #688]	; (8010424 <_dtoa_r+0x61c>)
 8010174:	b957      	cbnz	r7, 801018c <_dtoa_r+0x384>
 8010176:	4642      	mov	r2, r8
 8010178:	464b      	mov	r3, r9
 801017a:	4650      	mov	r0, sl
 801017c:	4659      	mov	r1, fp
 801017e:	f7f0 fb85 	bl	800088c <__aeabi_ddiv>
 8010182:	4682      	mov	sl, r0
 8010184:	468b      	mov	fp, r1
 8010186:	e028      	b.n	80101da <_dtoa_r+0x3d2>
 8010188:	2502      	movs	r5, #2
 801018a:	e7f2      	b.n	8010172 <_dtoa_r+0x36a>
 801018c:	07f9      	lsls	r1, r7, #31
 801018e:	d508      	bpl.n	80101a2 <_dtoa_r+0x39a>
 8010190:	4640      	mov	r0, r8
 8010192:	4649      	mov	r1, r9
 8010194:	e9d6 2300 	ldrd	r2, r3, [r6]
 8010198:	f7f0 fa4e 	bl	8000638 <__aeabi_dmul>
 801019c:	3501      	adds	r5, #1
 801019e:	4680      	mov	r8, r0
 80101a0:	4689      	mov	r9, r1
 80101a2:	107f      	asrs	r7, r7, #1
 80101a4:	3608      	adds	r6, #8
 80101a6:	e7e5      	b.n	8010174 <_dtoa_r+0x36c>
 80101a8:	f000 809b 	beq.w	80102e2 <_dtoa_r+0x4da>
 80101ac:	9b00      	ldr	r3, [sp, #0]
 80101ae:	4f9d      	ldr	r7, [pc, #628]	; (8010424 <_dtoa_r+0x61c>)
 80101b0:	425e      	negs	r6, r3
 80101b2:	4b9b      	ldr	r3, [pc, #620]	; (8010420 <_dtoa_r+0x618>)
 80101b4:	f006 020f 	and.w	r2, r6, #15
 80101b8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80101bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101c0:	ec51 0b19 	vmov	r0, r1, d9
 80101c4:	f7f0 fa38 	bl	8000638 <__aeabi_dmul>
 80101c8:	1136      	asrs	r6, r6, #4
 80101ca:	4682      	mov	sl, r0
 80101cc:	468b      	mov	fp, r1
 80101ce:	2300      	movs	r3, #0
 80101d0:	2502      	movs	r5, #2
 80101d2:	2e00      	cmp	r6, #0
 80101d4:	d17a      	bne.n	80102cc <_dtoa_r+0x4c4>
 80101d6:	2b00      	cmp	r3, #0
 80101d8:	d1d3      	bne.n	8010182 <_dtoa_r+0x37a>
 80101da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80101dc:	2b00      	cmp	r3, #0
 80101de:	f000 8082 	beq.w	80102e6 <_dtoa_r+0x4de>
 80101e2:	4b91      	ldr	r3, [pc, #580]	; (8010428 <_dtoa_r+0x620>)
 80101e4:	2200      	movs	r2, #0
 80101e6:	4650      	mov	r0, sl
 80101e8:	4659      	mov	r1, fp
 80101ea:	f7f0 fc97 	bl	8000b1c <__aeabi_dcmplt>
 80101ee:	2800      	cmp	r0, #0
 80101f0:	d079      	beq.n	80102e6 <_dtoa_r+0x4de>
 80101f2:	9b03      	ldr	r3, [sp, #12]
 80101f4:	2b00      	cmp	r3, #0
 80101f6:	d076      	beq.n	80102e6 <_dtoa_r+0x4de>
 80101f8:	9b02      	ldr	r3, [sp, #8]
 80101fa:	2b00      	cmp	r3, #0
 80101fc:	dd36      	ble.n	801026c <_dtoa_r+0x464>
 80101fe:	9b00      	ldr	r3, [sp, #0]
 8010200:	4650      	mov	r0, sl
 8010202:	4659      	mov	r1, fp
 8010204:	1e5f      	subs	r7, r3, #1
 8010206:	2200      	movs	r2, #0
 8010208:	4b88      	ldr	r3, [pc, #544]	; (801042c <_dtoa_r+0x624>)
 801020a:	f7f0 fa15 	bl	8000638 <__aeabi_dmul>
 801020e:	9e02      	ldr	r6, [sp, #8]
 8010210:	4682      	mov	sl, r0
 8010212:	468b      	mov	fp, r1
 8010214:	3501      	adds	r5, #1
 8010216:	4628      	mov	r0, r5
 8010218:	f7f0 f9a4 	bl	8000564 <__aeabi_i2d>
 801021c:	4652      	mov	r2, sl
 801021e:	465b      	mov	r3, fp
 8010220:	f7f0 fa0a 	bl	8000638 <__aeabi_dmul>
 8010224:	4b82      	ldr	r3, [pc, #520]	; (8010430 <_dtoa_r+0x628>)
 8010226:	2200      	movs	r2, #0
 8010228:	f7f0 f850 	bl	80002cc <__adddf3>
 801022c:	46d0      	mov	r8, sl
 801022e:	46d9      	mov	r9, fp
 8010230:	4682      	mov	sl, r0
 8010232:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8010236:	2e00      	cmp	r6, #0
 8010238:	d158      	bne.n	80102ec <_dtoa_r+0x4e4>
 801023a:	4b7e      	ldr	r3, [pc, #504]	; (8010434 <_dtoa_r+0x62c>)
 801023c:	2200      	movs	r2, #0
 801023e:	4640      	mov	r0, r8
 8010240:	4649      	mov	r1, r9
 8010242:	f7f0 f841 	bl	80002c8 <__aeabi_dsub>
 8010246:	4652      	mov	r2, sl
 8010248:	465b      	mov	r3, fp
 801024a:	4680      	mov	r8, r0
 801024c:	4689      	mov	r9, r1
 801024e:	f7f0 fc83 	bl	8000b58 <__aeabi_dcmpgt>
 8010252:	2800      	cmp	r0, #0
 8010254:	f040 8295 	bne.w	8010782 <_dtoa_r+0x97a>
 8010258:	4652      	mov	r2, sl
 801025a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801025e:	4640      	mov	r0, r8
 8010260:	4649      	mov	r1, r9
 8010262:	f7f0 fc5b 	bl	8000b1c <__aeabi_dcmplt>
 8010266:	2800      	cmp	r0, #0
 8010268:	f040 8289 	bne.w	801077e <_dtoa_r+0x976>
 801026c:	ec5b ab19 	vmov	sl, fp, d9
 8010270:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010272:	2b00      	cmp	r3, #0
 8010274:	f2c0 8148 	blt.w	8010508 <_dtoa_r+0x700>
 8010278:	9a00      	ldr	r2, [sp, #0]
 801027a:	2a0e      	cmp	r2, #14
 801027c:	f300 8144 	bgt.w	8010508 <_dtoa_r+0x700>
 8010280:	4b67      	ldr	r3, [pc, #412]	; (8010420 <_dtoa_r+0x618>)
 8010282:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010286:	e9d3 8900 	ldrd	r8, r9, [r3]
 801028a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801028c:	2b00      	cmp	r3, #0
 801028e:	f280 80d5 	bge.w	801043c <_dtoa_r+0x634>
 8010292:	9b03      	ldr	r3, [sp, #12]
 8010294:	2b00      	cmp	r3, #0
 8010296:	f300 80d1 	bgt.w	801043c <_dtoa_r+0x634>
 801029a:	f040 826f 	bne.w	801077c <_dtoa_r+0x974>
 801029e:	4b65      	ldr	r3, [pc, #404]	; (8010434 <_dtoa_r+0x62c>)
 80102a0:	2200      	movs	r2, #0
 80102a2:	4640      	mov	r0, r8
 80102a4:	4649      	mov	r1, r9
 80102a6:	f7f0 f9c7 	bl	8000638 <__aeabi_dmul>
 80102aa:	4652      	mov	r2, sl
 80102ac:	465b      	mov	r3, fp
 80102ae:	f7f0 fc49 	bl	8000b44 <__aeabi_dcmpge>
 80102b2:	9e03      	ldr	r6, [sp, #12]
 80102b4:	4637      	mov	r7, r6
 80102b6:	2800      	cmp	r0, #0
 80102b8:	f040 8245 	bne.w	8010746 <_dtoa_r+0x93e>
 80102bc:	9d01      	ldr	r5, [sp, #4]
 80102be:	2331      	movs	r3, #49	; 0x31
 80102c0:	f805 3b01 	strb.w	r3, [r5], #1
 80102c4:	9b00      	ldr	r3, [sp, #0]
 80102c6:	3301      	adds	r3, #1
 80102c8:	9300      	str	r3, [sp, #0]
 80102ca:	e240      	b.n	801074e <_dtoa_r+0x946>
 80102cc:	07f2      	lsls	r2, r6, #31
 80102ce:	d505      	bpl.n	80102dc <_dtoa_r+0x4d4>
 80102d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80102d4:	f7f0 f9b0 	bl	8000638 <__aeabi_dmul>
 80102d8:	3501      	adds	r5, #1
 80102da:	2301      	movs	r3, #1
 80102dc:	1076      	asrs	r6, r6, #1
 80102de:	3708      	adds	r7, #8
 80102e0:	e777      	b.n	80101d2 <_dtoa_r+0x3ca>
 80102e2:	2502      	movs	r5, #2
 80102e4:	e779      	b.n	80101da <_dtoa_r+0x3d2>
 80102e6:	9f00      	ldr	r7, [sp, #0]
 80102e8:	9e03      	ldr	r6, [sp, #12]
 80102ea:	e794      	b.n	8010216 <_dtoa_r+0x40e>
 80102ec:	9901      	ldr	r1, [sp, #4]
 80102ee:	4b4c      	ldr	r3, [pc, #304]	; (8010420 <_dtoa_r+0x618>)
 80102f0:	4431      	add	r1, r6
 80102f2:	910d      	str	r1, [sp, #52]	; 0x34
 80102f4:	9908      	ldr	r1, [sp, #32]
 80102f6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80102fa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80102fe:	2900      	cmp	r1, #0
 8010300:	d043      	beq.n	801038a <_dtoa_r+0x582>
 8010302:	494d      	ldr	r1, [pc, #308]	; (8010438 <_dtoa_r+0x630>)
 8010304:	2000      	movs	r0, #0
 8010306:	f7f0 fac1 	bl	800088c <__aeabi_ddiv>
 801030a:	4652      	mov	r2, sl
 801030c:	465b      	mov	r3, fp
 801030e:	f7ef ffdb 	bl	80002c8 <__aeabi_dsub>
 8010312:	9d01      	ldr	r5, [sp, #4]
 8010314:	4682      	mov	sl, r0
 8010316:	468b      	mov	fp, r1
 8010318:	4649      	mov	r1, r9
 801031a:	4640      	mov	r0, r8
 801031c:	f7f0 fc3c 	bl	8000b98 <__aeabi_d2iz>
 8010320:	4606      	mov	r6, r0
 8010322:	f7f0 f91f 	bl	8000564 <__aeabi_i2d>
 8010326:	4602      	mov	r2, r0
 8010328:	460b      	mov	r3, r1
 801032a:	4640      	mov	r0, r8
 801032c:	4649      	mov	r1, r9
 801032e:	f7ef ffcb 	bl	80002c8 <__aeabi_dsub>
 8010332:	3630      	adds	r6, #48	; 0x30
 8010334:	f805 6b01 	strb.w	r6, [r5], #1
 8010338:	4652      	mov	r2, sl
 801033a:	465b      	mov	r3, fp
 801033c:	4680      	mov	r8, r0
 801033e:	4689      	mov	r9, r1
 8010340:	f7f0 fbec 	bl	8000b1c <__aeabi_dcmplt>
 8010344:	2800      	cmp	r0, #0
 8010346:	d163      	bne.n	8010410 <_dtoa_r+0x608>
 8010348:	4642      	mov	r2, r8
 801034a:	464b      	mov	r3, r9
 801034c:	4936      	ldr	r1, [pc, #216]	; (8010428 <_dtoa_r+0x620>)
 801034e:	2000      	movs	r0, #0
 8010350:	f7ef ffba 	bl	80002c8 <__aeabi_dsub>
 8010354:	4652      	mov	r2, sl
 8010356:	465b      	mov	r3, fp
 8010358:	f7f0 fbe0 	bl	8000b1c <__aeabi_dcmplt>
 801035c:	2800      	cmp	r0, #0
 801035e:	f040 80b5 	bne.w	80104cc <_dtoa_r+0x6c4>
 8010362:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010364:	429d      	cmp	r5, r3
 8010366:	d081      	beq.n	801026c <_dtoa_r+0x464>
 8010368:	4b30      	ldr	r3, [pc, #192]	; (801042c <_dtoa_r+0x624>)
 801036a:	2200      	movs	r2, #0
 801036c:	4650      	mov	r0, sl
 801036e:	4659      	mov	r1, fp
 8010370:	f7f0 f962 	bl	8000638 <__aeabi_dmul>
 8010374:	4b2d      	ldr	r3, [pc, #180]	; (801042c <_dtoa_r+0x624>)
 8010376:	4682      	mov	sl, r0
 8010378:	468b      	mov	fp, r1
 801037a:	4640      	mov	r0, r8
 801037c:	4649      	mov	r1, r9
 801037e:	2200      	movs	r2, #0
 8010380:	f7f0 f95a 	bl	8000638 <__aeabi_dmul>
 8010384:	4680      	mov	r8, r0
 8010386:	4689      	mov	r9, r1
 8010388:	e7c6      	b.n	8010318 <_dtoa_r+0x510>
 801038a:	4650      	mov	r0, sl
 801038c:	4659      	mov	r1, fp
 801038e:	f7f0 f953 	bl	8000638 <__aeabi_dmul>
 8010392:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010394:	9d01      	ldr	r5, [sp, #4]
 8010396:	930f      	str	r3, [sp, #60]	; 0x3c
 8010398:	4682      	mov	sl, r0
 801039a:	468b      	mov	fp, r1
 801039c:	4649      	mov	r1, r9
 801039e:	4640      	mov	r0, r8
 80103a0:	f7f0 fbfa 	bl	8000b98 <__aeabi_d2iz>
 80103a4:	4606      	mov	r6, r0
 80103a6:	f7f0 f8dd 	bl	8000564 <__aeabi_i2d>
 80103aa:	3630      	adds	r6, #48	; 0x30
 80103ac:	4602      	mov	r2, r0
 80103ae:	460b      	mov	r3, r1
 80103b0:	4640      	mov	r0, r8
 80103b2:	4649      	mov	r1, r9
 80103b4:	f7ef ff88 	bl	80002c8 <__aeabi_dsub>
 80103b8:	f805 6b01 	strb.w	r6, [r5], #1
 80103bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80103be:	429d      	cmp	r5, r3
 80103c0:	4680      	mov	r8, r0
 80103c2:	4689      	mov	r9, r1
 80103c4:	f04f 0200 	mov.w	r2, #0
 80103c8:	d124      	bne.n	8010414 <_dtoa_r+0x60c>
 80103ca:	4b1b      	ldr	r3, [pc, #108]	; (8010438 <_dtoa_r+0x630>)
 80103cc:	4650      	mov	r0, sl
 80103ce:	4659      	mov	r1, fp
 80103d0:	f7ef ff7c 	bl	80002cc <__adddf3>
 80103d4:	4602      	mov	r2, r0
 80103d6:	460b      	mov	r3, r1
 80103d8:	4640      	mov	r0, r8
 80103da:	4649      	mov	r1, r9
 80103dc:	f7f0 fbbc 	bl	8000b58 <__aeabi_dcmpgt>
 80103e0:	2800      	cmp	r0, #0
 80103e2:	d173      	bne.n	80104cc <_dtoa_r+0x6c4>
 80103e4:	4652      	mov	r2, sl
 80103e6:	465b      	mov	r3, fp
 80103e8:	4913      	ldr	r1, [pc, #76]	; (8010438 <_dtoa_r+0x630>)
 80103ea:	2000      	movs	r0, #0
 80103ec:	f7ef ff6c 	bl	80002c8 <__aeabi_dsub>
 80103f0:	4602      	mov	r2, r0
 80103f2:	460b      	mov	r3, r1
 80103f4:	4640      	mov	r0, r8
 80103f6:	4649      	mov	r1, r9
 80103f8:	f7f0 fb90 	bl	8000b1c <__aeabi_dcmplt>
 80103fc:	2800      	cmp	r0, #0
 80103fe:	f43f af35 	beq.w	801026c <_dtoa_r+0x464>
 8010402:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8010404:	1e6b      	subs	r3, r5, #1
 8010406:	930f      	str	r3, [sp, #60]	; 0x3c
 8010408:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801040c:	2b30      	cmp	r3, #48	; 0x30
 801040e:	d0f8      	beq.n	8010402 <_dtoa_r+0x5fa>
 8010410:	9700      	str	r7, [sp, #0]
 8010412:	e049      	b.n	80104a8 <_dtoa_r+0x6a0>
 8010414:	4b05      	ldr	r3, [pc, #20]	; (801042c <_dtoa_r+0x624>)
 8010416:	f7f0 f90f 	bl	8000638 <__aeabi_dmul>
 801041a:	4680      	mov	r8, r0
 801041c:	4689      	mov	r9, r1
 801041e:	e7bd      	b.n	801039c <_dtoa_r+0x594>
 8010420:	080130b0 	.word	0x080130b0
 8010424:	08013088 	.word	0x08013088
 8010428:	3ff00000 	.word	0x3ff00000
 801042c:	40240000 	.word	0x40240000
 8010430:	401c0000 	.word	0x401c0000
 8010434:	40140000 	.word	0x40140000
 8010438:	3fe00000 	.word	0x3fe00000
 801043c:	9d01      	ldr	r5, [sp, #4]
 801043e:	4656      	mov	r6, sl
 8010440:	465f      	mov	r7, fp
 8010442:	4642      	mov	r2, r8
 8010444:	464b      	mov	r3, r9
 8010446:	4630      	mov	r0, r6
 8010448:	4639      	mov	r1, r7
 801044a:	f7f0 fa1f 	bl	800088c <__aeabi_ddiv>
 801044e:	f7f0 fba3 	bl	8000b98 <__aeabi_d2iz>
 8010452:	4682      	mov	sl, r0
 8010454:	f7f0 f886 	bl	8000564 <__aeabi_i2d>
 8010458:	4642      	mov	r2, r8
 801045a:	464b      	mov	r3, r9
 801045c:	f7f0 f8ec 	bl	8000638 <__aeabi_dmul>
 8010460:	4602      	mov	r2, r0
 8010462:	460b      	mov	r3, r1
 8010464:	4630      	mov	r0, r6
 8010466:	4639      	mov	r1, r7
 8010468:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 801046c:	f7ef ff2c 	bl	80002c8 <__aeabi_dsub>
 8010470:	f805 6b01 	strb.w	r6, [r5], #1
 8010474:	9e01      	ldr	r6, [sp, #4]
 8010476:	9f03      	ldr	r7, [sp, #12]
 8010478:	1bae      	subs	r6, r5, r6
 801047a:	42b7      	cmp	r7, r6
 801047c:	4602      	mov	r2, r0
 801047e:	460b      	mov	r3, r1
 8010480:	d135      	bne.n	80104ee <_dtoa_r+0x6e6>
 8010482:	f7ef ff23 	bl	80002cc <__adddf3>
 8010486:	4642      	mov	r2, r8
 8010488:	464b      	mov	r3, r9
 801048a:	4606      	mov	r6, r0
 801048c:	460f      	mov	r7, r1
 801048e:	f7f0 fb63 	bl	8000b58 <__aeabi_dcmpgt>
 8010492:	b9d0      	cbnz	r0, 80104ca <_dtoa_r+0x6c2>
 8010494:	4642      	mov	r2, r8
 8010496:	464b      	mov	r3, r9
 8010498:	4630      	mov	r0, r6
 801049a:	4639      	mov	r1, r7
 801049c:	f7f0 fb34 	bl	8000b08 <__aeabi_dcmpeq>
 80104a0:	b110      	cbz	r0, 80104a8 <_dtoa_r+0x6a0>
 80104a2:	f01a 0f01 	tst.w	sl, #1
 80104a6:	d110      	bne.n	80104ca <_dtoa_r+0x6c2>
 80104a8:	4620      	mov	r0, r4
 80104aa:	ee18 1a10 	vmov	r1, s16
 80104ae:	f000 fe67 	bl	8011180 <_Bfree>
 80104b2:	2300      	movs	r3, #0
 80104b4:	9800      	ldr	r0, [sp, #0]
 80104b6:	702b      	strb	r3, [r5, #0]
 80104b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80104ba:	3001      	adds	r0, #1
 80104bc:	6018      	str	r0, [r3, #0]
 80104be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80104c0:	2b00      	cmp	r3, #0
 80104c2:	f43f acf1 	beq.w	800fea8 <_dtoa_r+0xa0>
 80104c6:	601d      	str	r5, [r3, #0]
 80104c8:	e4ee      	b.n	800fea8 <_dtoa_r+0xa0>
 80104ca:	9f00      	ldr	r7, [sp, #0]
 80104cc:	462b      	mov	r3, r5
 80104ce:	461d      	mov	r5, r3
 80104d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80104d4:	2a39      	cmp	r2, #57	; 0x39
 80104d6:	d106      	bne.n	80104e6 <_dtoa_r+0x6de>
 80104d8:	9a01      	ldr	r2, [sp, #4]
 80104da:	429a      	cmp	r2, r3
 80104dc:	d1f7      	bne.n	80104ce <_dtoa_r+0x6c6>
 80104de:	9901      	ldr	r1, [sp, #4]
 80104e0:	2230      	movs	r2, #48	; 0x30
 80104e2:	3701      	adds	r7, #1
 80104e4:	700a      	strb	r2, [r1, #0]
 80104e6:	781a      	ldrb	r2, [r3, #0]
 80104e8:	3201      	adds	r2, #1
 80104ea:	701a      	strb	r2, [r3, #0]
 80104ec:	e790      	b.n	8010410 <_dtoa_r+0x608>
 80104ee:	4ba6      	ldr	r3, [pc, #664]	; (8010788 <_dtoa_r+0x980>)
 80104f0:	2200      	movs	r2, #0
 80104f2:	f7f0 f8a1 	bl	8000638 <__aeabi_dmul>
 80104f6:	2200      	movs	r2, #0
 80104f8:	2300      	movs	r3, #0
 80104fa:	4606      	mov	r6, r0
 80104fc:	460f      	mov	r7, r1
 80104fe:	f7f0 fb03 	bl	8000b08 <__aeabi_dcmpeq>
 8010502:	2800      	cmp	r0, #0
 8010504:	d09d      	beq.n	8010442 <_dtoa_r+0x63a>
 8010506:	e7cf      	b.n	80104a8 <_dtoa_r+0x6a0>
 8010508:	9a08      	ldr	r2, [sp, #32]
 801050a:	2a00      	cmp	r2, #0
 801050c:	f000 80d7 	beq.w	80106be <_dtoa_r+0x8b6>
 8010510:	9a06      	ldr	r2, [sp, #24]
 8010512:	2a01      	cmp	r2, #1
 8010514:	f300 80ba 	bgt.w	801068c <_dtoa_r+0x884>
 8010518:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801051a:	2a00      	cmp	r2, #0
 801051c:	f000 80b2 	beq.w	8010684 <_dtoa_r+0x87c>
 8010520:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8010524:	9e07      	ldr	r6, [sp, #28]
 8010526:	9d04      	ldr	r5, [sp, #16]
 8010528:	9a04      	ldr	r2, [sp, #16]
 801052a:	441a      	add	r2, r3
 801052c:	9204      	str	r2, [sp, #16]
 801052e:	9a05      	ldr	r2, [sp, #20]
 8010530:	2101      	movs	r1, #1
 8010532:	441a      	add	r2, r3
 8010534:	4620      	mov	r0, r4
 8010536:	9205      	str	r2, [sp, #20]
 8010538:	f000 ff24 	bl	8011384 <__i2b>
 801053c:	4607      	mov	r7, r0
 801053e:	2d00      	cmp	r5, #0
 8010540:	dd0c      	ble.n	801055c <_dtoa_r+0x754>
 8010542:	9b05      	ldr	r3, [sp, #20]
 8010544:	2b00      	cmp	r3, #0
 8010546:	dd09      	ble.n	801055c <_dtoa_r+0x754>
 8010548:	42ab      	cmp	r3, r5
 801054a:	9a04      	ldr	r2, [sp, #16]
 801054c:	bfa8      	it	ge
 801054e:	462b      	movge	r3, r5
 8010550:	1ad2      	subs	r2, r2, r3
 8010552:	9204      	str	r2, [sp, #16]
 8010554:	9a05      	ldr	r2, [sp, #20]
 8010556:	1aed      	subs	r5, r5, r3
 8010558:	1ad3      	subs	r3, r2, r3
 801055a:	9305      	str	r3, [sp, #20]
 801055c:	9b07      	ldr	r3, [sp, #28]
 801055e:	b31b      	cbz	r3, 80105a8 <_dtoa_r+0x7a0>
 8010560:	9b08      	ldr	r3, [sp, #32]
 8010562:	2b00      	cmp	r3, #0
 8010564:	f000 80af 	beq.w	80106c6 <_dtoa_r+0x8be>
 8010568:	2e00      	cmp	r6, #0
 801056a:	dd13      	ble.n	8010594 <_dtoa_r+0x78c>
 801056c:	4639      	mov	r1, r7
 801056e:	4632      	mov	r2, r6
 8010570:	4620      	mov	r0, r4
 8010572:	f000 ffc7 	bl	8011504 <__pow5mult>
 8010576:	ee18 2a10 	vmov	r2, s16
 801057a:	4601      	mov	r1, r0
 801057c:	4607      	mov	r7, r0
 801057e:	4620      	mov	r0, r4
 8010580:	f000 ff16 	bl	80113b0 <__multiply>
 8010584:	ee18 1a10 	vmov	r1, s16
 8010588:	4680      	mov	r8, r0
 801058a:	4620      	mov	r0, r4
 801058c:	f000 fdf8 	bl	8011180 <_Bfree>
 8010590:	ee08 8a10 	vmov	s16, r8
 8010594:	9b07      	ldr	r3, [sp, #28]
 8010596:	1b9a      	subs	r2, r3, r6
 8010598:	d006      	beq.n	80105a8 <_dtoa_r+0x7a0>
 801059a:	ee18 1a10 	vmov	r1, s16
 801059e:	4620      	mov	r0, r4
 80105a0:	f000 ffb0 	bl	8011504 <__pow5mult>
 80105a4:	ee08 0a10 	vmov	s16, r0
 80105a8:	2101      	movs	r1, #1
 80105aa:	4620      	mov	r0, r4
 80105ac:	f000 feea 	bl	8011384 <__i2b>
 80105b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80105b2:	2b00      	cmp	r3, #0
 80105b4:	4606      	mov	r6, r0
 80105b6:	f340 8088 	ble.w	80106ca <_dtoa_r+0x8c2>
 80105ba:	461a      	mov	r2, r3
 80105bc:	4601      	mov	r1, r0
 80105be:	4620      	mov	r0, r4
 80105c0:	f000 ffa0 	bl	8011504 <__pow5mult>
 80105c4:	9b06      	ldr	r3, [sp, #24]
 80105c6:	2b01      	cmp	r3, #1
 80105c8:	4606      	mov	r6, r0
 80105ca:	f340 8081 	ble.w	80106d0 <_dtoa_r+0x8c8>
 80105ce:	f04f 0800 	mov.w	r8, #0
 80105d2:	6933      	ldr	r3, [r6, #16]
 80105d4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80105d8:	6918      	ldr	r0, [r3, #16]
 80105da:	f000 fe83 	bl	80112e4 <__hi0bits>
 80105de:	f1c0 0020 	rsb	r0, r0, #32
 80105e2:	9b05      	ldr	r3, [sp, #20]
 80105e4:	4418      	add	r0, r3
 80105e6:	f010 001f 	ands.w	r0, r0, #31
 80105ea:	f000 8092 	beq.w	8010712 <_dtoa_r+0x90a>
 80105ee:	f1c0 0320 	rsb	r3, r0, #32
 80105f2:	2b04      	cmp	r3, #4
 80105f4:	f340 808a 	ble.w	801070c <_dtoa_r+0x904>
 80105f8:	f1c0 001c 	rsb	r0, r0, #28
 80105fc:	9b04      	ldr	r3, [sp, #16]
 80105fe:	4403      	add	r3, r0
 8010600:	9304      	str	r3, [sp, #16]
 8010602:	9b05      	ldr	r3, [sp, #20]
 8010604:	4403      	add	r3, r0
 8010606:	4405      	add	r5, r0
 8010608:	9305      	str	r3, [sp, #20]
 801060a:	9b04      	ldr	r3, [sp, #16]
 801060c:	2b00      	cmp	r3, #0
 801060e:	dd07      	ble.n	8010620 <_dtoa_r+0x818>
 8010610:	ee18 1a10 	vmov	r1, s16
 8010614:	461a      	mov	r2, r3
 8010616:	4620      	mov	r0, r4
 8010618:	f000 ffce 	bl	80115b8 <__lshift>
 801061c:	ee08 0a10 	vmov	s16, r0
 8010620:	9b05      	ldr	r3, [sp, #20]
 8010622:	2b00      	cmp	r3, #0
 8010624:	dd05      	ble.n	8010632 <_dtoa_r+0x82a>
 8010626:	4631      	mov	r1, r6
 8010628:	461a      	mov	r2, r3
 801062a:	4620      	mov	r0, r4
 801062c:	f000 ffc4 	bl	80115b8 <__lshift>
 8010630:	4606      	mov	r6, r0
 8010632:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010634:	2b00      	cmp	r3, #0
 8010636:	d06e      	beq.n	8010716 <_dtoa_r+0x90e>
 8010638:	ee18 0a10 	vmov	r0, s16
 801063c:	4631      	mov	r1, r6
 801063e:	f001 f82b 	bl	8011698 <__mcmp>
 8010642:	2800      	cmp	r0, #0
 8010644:	da67      	bge.n	8010716 <_dtoa_r+0x90e>
 8010646:	9b00      	ldr	r3, [sp, #0]
 8010648:	3b01      	subs	r3, #1
 801064a:	ee18 1a10 	vmov	r1, s16
 801064e:	9300      	str	r3, [sp, #0]
 8010650:	220a      	movs	r2, #10
 8010652:	2300      	movs	r3, #0
 8010654:	4620      	mov	r0, r4
 8010656:	f000 fdb5 	bl	80111c4 <__multadd>
 801065a:	9b08      	ldr	r3, [sp, #32]
 801065c:	ee08 0a10 	vmov	s16, r0
 8010660:	2b00      	cmp	r3, #0
 8010662:	f000 81b1 	beq.w	80109c8 <_dtoa_r+0xbc0>
 8010666:	2300      	movs	r3, #0
 8010668:	4639      	mov	r1, r7
 801066a:	220a      	movs	r2, #10
 801066c:	4620      	mov	r0, r4
 801066e:	f000 fda9 	bl	80111c4 <__multadd>
 8010672:	9b02      	ldr	r3, [sp, #8]
 8010674:	2b00      	cmp	r3, #0
 8010676:	4607      	mov	r7, r0
 8010678:	f300 808e 	bgt.w	8010798 <_dtoa_r+0x990>
 801067c:	9b06      	ldr	r3, [sp, #24]
 801067e:	2b02      	cmp	r3, #2
 8010680:	dc51      	bgt.n	8010726 <_dtoa_r+0x91e>
 8010682:	e089      	b.n	8010798 <_dtoa_r+0x990>
 8010684:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010686:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801068a:	e74b      	b.n	8010524 <_dtoa_r+0x71c>
 801068c:	9b03      	ldr	r3, [sp, #12]
 801068e:	1e5e      	subs	r6, r3, #1
 8010690:	9b07      	ldr	r3, [sp, #28]
 8010692:	42b3      	cmp	r3, r6
 8010694:	bfbf      	itttt	lt
 8010696:	9b07      	ldrlt	r3, [sp, #28]
 8010698:	9607      	strlt	r6, [sp, #28]
 801069a:	1af2      	sublt	r2, r6, r3
 801069c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 801069e:	bfb6      	itet	lt
 80106a0:	189b      	addlt	r3, r3, r2
 80106a2:	1b9e      	subge	r6, r3, r6
 80106a4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80106a6:	9b03      	ldr	r3, [sp, #12]
 80106a8:	bfb8      	it	lt
 80106aa:	2600      	movlt	r6, #0
 80106ac:	2b00      	cmp	r3, #0
 80106ae:	bfb7      	itett	lt
 80106b0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80106b4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80106b8:	1a9d      	sublt	r5, r3, r2
 80106ba:	2300      	movlt	r3, #0
 80106bc:	e734      	b.n	8010528 <_dtoa_r+0x720>
 80106be:	9e07      	ldr	r6, [sp, #28]
 80106c0:	9d04      	ldr	r5, [sp, #16]
 80106c2:	9f08      	ldr	r7, [sp, #32]
 80106c4:	e73b      	b.n	801053e <_dtoa_r+0x736>
 80106c6:	9a07      	ldr	r2, [sp, #28]
 80106c8:	e767      	b.n	801059a <_dtoa_r+0x792>
 80106ca:	9b06      	ldr	r3, [sp, #24]
 80106cc:	2b01      	cmp	r3, #1
 80106ce:	dc18      	bgt.n	8010702 <_dtoa_r+0x8fa>
 80106d0:	f1ba 0f00 	cmp.w	sl, #0
 80106d4:	d115      	bne.n	8010702 <_dtoa_r+0x8fa>
 80106d6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80106da:	b993      	cbnz	r3, 8010702 <_dtoa_r+0x8fa>
 80106dc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80106e0:	0d1b      	lsrs	r3, r3, #20
 80106e2:	051b      	lsls	r3, r3, #20
 80106e4:	b183      	cbz	r3, 8010708 <_dtoa_r+0x900>
 80106e6:	9b04      	ldr	r3, [sp, #16]
 80106e8:	3301      	adds	r3, #1
 80106ea:	9304      	str	r3, [sp, #16]
 80106ec:	9b05      	ldr	r3, [sp, #20]
 80106ee:	3301      	adds	r3, #1
 80106f0:	9305      	str	r3, [sp, #20]
 80106f2:	f04f 0801 	mov.w	r8, #1
 80106f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80106f8:	2b00      	cmp	r3, #0
 80106fa:	f47f af6a 	bne.w	80105d2 <_dtoa_r+0x7ca>
 80106fe:	2001      	movs	r0, #1
 8010700:	e76f      	b.n	80105e2 <_dtoa_r+0x7da>
 8010702:	f04f 0800 	mov.w	r8, #0
 8010706:	e7f6      	b.n	80106f6 <_dtoa_r+0x8ee>
 8010708:	4698      	mov	r8, r3
 801070a:	e7f4      	b.n	80106f6 <_dtoa_r+0x8ee>
 801070c:	f43f af7d 	beq.w	801060a <_dtoa_r+0x802>
 8010710:	4618      	mov	r0, r3
 8010712:	301c      	adds	r0, #28
 8010714:	e772      	b.n	80105fc <_dtoa_r+0x7f4>
 8010716:	9b03      	ldr	r3, [sp, #12]
 8010718:	2b00      	cmp	r3, #0
 801071a:	dc37      	bgt.n	801078c <_dtoa_r+0x984>
 801071c:	9b06      	ldr	r3, [sp, #24]
 801071e:	2b02      	cmp	r3, #2
 8010720:	dd34      	ble.n	801078c <_dtoa_r+0x984>
 8010722:	9b03      	ldr	r3, [sp, #12]
 8010724:	9302      	str	r3, [sp, #8]
 8010726:	9b02      	ldr	r3, [sp, #8]
 8010728:	b96b      	cbnz	r3, 8010746 <_dtoa_r+0x93e>
 801072a:	4631      	mov	r1, r6
 801072c:	2205      	movs	r2, #5
 801072e:	4620      	mov	r0, r4
 8010730:	f000 fd48 	bl	80111c4 <__multadd>
 8010734:	4601      	mov	r1, r0
 8010736:	4606      	mov	r6, r0
 8010738:	ee18 0a10 	vmov	r0, s16
 801073c:	f000 ffac 	bl	8011698 <__mcmp>
 8010740:	2800      	cmp	r0, #0
 8010742:	f73f adbb 	bgt.w	80102bc <_dtoa_r+0x4b4>
 8010746:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010748:	9d01      	ldr	r5, [sp, #4]
 801074a:	43db      	mvns	r3, r3
 801074c:	9300      	str	r3, [sp, #0]
 801074e:	f04f 0800 	mov.w	r8, #0
 8010752:	4631      	mov	r1, r6
 8010754:	4620      	mov	r0, r4
 8010756:	f000 fd13 	bl	8011180 <_Bfree>
 801075a:	2f00      	cmp	r7, #0
 801075c:	f43f aea4 	beq.w	80104a8 <_dtoa_r+0x6a0>
 8010760:	f1b8 0f00 	cmp.w	r8, #0
 8010764:	d005      	beq.n	8010772 <_dtoa_r+0x96a>
 8010766:	45b8      	cmp	r8, r7
 8010768:	d003      	beq.n	8010772 <_dtoa_r+0x96a>
 801076a:	4641      	mov	r1, r8
 801076c:	4620      	mov	r0, r4
 801076e:	f000 fd07 	bl	8011180 <_Bfree>
 8010772:	4639      	mov	r1, r7
 8010774:	4620      	mov	r0, r4
 8010776:	f000 fd03 	bl	8011180 <_Bfree>
 801077a:	e695      	b.n	80104a8 <_dtoa_r+0x6a0>
 801077c:	2600      	movs	r6, #0
 801077e:	4637      	mov	r7, r6
 8010780:	e7e1      	b.n	8010746 <_dtoa_r+0x93e>
 8010782:	9700      	str	r7, [sp, #0]
 8010784:	4637      	mov	r7, r6
 8010786:	e599      	b.n	80102bc <_dtoa_r+0x4b4>
 8010788:	40240000 	.word	0x40240000
 801078c:	9b08      	ldr	r3, [sp, #32]
 801078e:	2b00      	cmp	r3, #0
 8010790:	f000 80ca 	beq.w	8010928 <_dtoa_r+0xb20>
 8010794:	9b03      	ldr	r3, [sp, #12]
 8010796:	9302      	str	r3, [sp, #8]
 8010798:	2d00      	cmp	r5, #0
 801079a:	dd05      	ble.n	80107a8 <_dtoa_r+0x9a0>
 801079c:	4639      	mov	r1, r7
 801079e:	462a      	mov	r2, r5
 80107a0:	4620      	mov	r0, r4
 80107a2:	f000 ff09 	bl	80115b8 <__lshift>
 80107a6:	4607      	mov	r7, r0
 80107a8:	f1b8 0f00 	cmp.w	r8, #0
 80107ac:	d05b      	beq.n	8010866 <_dtoa_r+0xa5e>
 80107ae:	6879      	ldr	r1, [r7, #4]
 80107b0:	4620      	mov	r0, r4
 80107b2:	f000 fca5 	bl	8011100 <_Balloc>
 80107b6:	4605      	mov	r5, r0
 80107b8:	b928      	cbnz	r0, 80107c6 <_dtoa_r+0x9be>
 80107ba:	4b87      	ldr	r3, [pc, #540]	; (80109d8 <_dtoa_r+0xbd0>)
 80107bc:	4602      	mov	r2, r0
 80107be:	f240 21ea 	movw	r1, #746	; 0x2ea
 80107c2:	f7ff bb3b 	b.w	800fe3c <_dtoa_r+0x34>
 80107c6:	693a      	ldr	r2, [r7, #16]
 80107c8:	3202      	adds	r2, #2
 80107ca:	0092      	lsls	r2, r2, #2
 80107cc:	f107 010c 	add.w	r1, r7, #12
 80107d0:	300c      	adds	r0, #12
 80107d2:	f7fd fd23 	bl	800e21c <memcpy>
 80107d6:	2201      	movs	r2, #1
 80107d8:	4629      	mov	r1, r5
 80107da:	4620      	mov	r0, r4
 80107dc:	f000 feec 	bl	80115b8 <__lshift>
 80107e0:	9b01      	ldr	r3, [sp, #4]
 80107e2:	f103 0901 	add.w	r9, r3, #1
 80107e6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80107ea:	4413      	add	r3, r2
 80107ec:	9305      	str	r3, [sp, #20]
 80107ee:	f00a 0301 	and.w	r3, sl, #1
 80107f2:	46b8      	mov	r8, r7
 80107f4:	9304      	str	r3, [sp, #16]
 80107f6:	4607      	mov	r7, r0
 80107f8:	4631      	mov	r1, r6
 80107fa:	ee18 0a10 	vmov	r0, s16
 80107fe:	f7ff fa77 	bl	800fcf0 <quorem>
 8010802:	4641      	mov	r1, r8
 8010804:	9002      	str	r0, [sp, #8]
 8010806:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801080a:	ee18 0a10 	vmov	r0, s16
 801080e:	f000 ff43 	bl	8011698 <__mcmp>
 8010812:	463a      	mov	r2, r7
 8010814:	9003      	str	r0, [sp, #12]
 8010816:	4631      	mov	r1, r6
 8010818:	4620      	mov	r0, r4
 801081a:	f000 ff59 	bl	80116d0 <__mdiff>
 801081e:	68c2      	ldr	r2, [r0, #12]
 8010820:	f109 3bff 	add.w	fp, r9, #4294967295
 8010824:	4605      	mov	r5, r0
 8010826:	bb02      	cbnz	r2, 801086a <_dtoa_r+0xa62>
 8010828:	4601      	mov	r1, r0
 801082a:	ee18 0a10 	vmov	r0, s16
 801082e:	f000 ff33 	bl	8011698 <__mcmp>
 8010832:	4602      	mov	r2, r0
 8010834:	4629      	mov	r1, r5
 8010836:	4620      	mov	r0, r4
 8010838:	9207      	str	r2, [sp, #28]
 801083a:	f000 fca1 	bl	8011180 <_Bfree>
 801083e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8010842:	ea43 0102 	orr.w	r1, r3, r2
 8010846:	9b04      	ldr	r3, [sp, #16]
 8010848:	430b      	orrs	r3, r1
 801084a:	464d      	mov	r5, r9
 801084c:	d10f      	bne.n	801086e <_dtoa_r+0xa66>
 801084e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8010852:	d02a      	beq.n	80108aa <_dtoa_r+0xaa2>
 8010854:	9b03      	ldr	r3, [sp, #12]
 8010856:	2b00      	cmp	r3, #0
 8010858:	dd02      	ble.n	8010860 <_dtoa_r+0xa58>
 801085a:	9b02      	ldr	r3, [sp, #8]
 801085c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8010860:	f88b a000 	strb.w	sl, [fp]
 8010864:	e775      	b.n	8010752 <_dtoa_r+0x94a>
 8010866:	4638      	mov	r0, r7
 8010868:	e7ba      	b.n	80107e0 <_dtoa_r+0x9d8>
 801086a:	2201      	movs	r2, #1
 801086c:	e7e2      	b.n	8010834 <_dtoa_r+0xa2c>
 801086e:	9b03      	ldr	r3, [sp, #12]
 8010870:	2b00      	cmp	r3, #0
 8010872:	db04      	blt.n	801087e <_dtoa_r+0xa76>
 8010874:	9906      	ldr	r1, [sp, #24]
 8010876:	430b      	orrs	r3, r1
 8010878:	9904      	ldr	r1, [sp, #16]
 801087a:	430b      	orrs	r3, r1
 801087c:	d122      	bne.n	80108c4 <_dtoa_r+0xabc>
 801087e:	2a00      	cmp	r2, #0
 8010880:	ddee      	ble.n	8010860 <_dtoa_r+0xa58>
 8010882:	ee18 1a10 	vmov	r1, s16
 8010886:	2201      	movs	r2, #1
 8010888:	4620      	mov	r0, r4
 801088a:	f000 fe95 	bl	80115b8 <__lshift>
 801088e:	4631      	mov	r1, r6
 8010890:	ee08 0a10 	vmov	s16, r0
 8010894:	f000 ff00 	bl	8011698 <__mcmp>
 8010898:	2800      	cmp	r0, #0
 801089a:	dc03      	bgt.n	80108a4 <_dtoa_r+0xa9c>
 801089c:	d1e0      	bne.n	8010860 <_dtoa_r+0xa58>
 801089e:	f01a 0f01 	tst.w	sl, #1
 80108a2:	d0dd      	beq.n	8010860 <_dtoa_r+0xa58>
 80108a4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80108a8:	d1d7      	bne.n	801085a <_dtoa_r+0xa52>
 80108aa:	2339      	movs	r3, #57	; 0x39
 80108ac:	f88b 3000 	strb.w	r3, [fp]
 80108b0:	462b      	mov	r3, r5
 80108b2:	461d      	mov	r5, r3
 80108b4:	3b01      	subs	r3, #1
 80108b6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80108ba:	2a39      	cmp	r2, #57	; 0x39
 80108bc:	d071      	beq.n	80109a2 <_dtoa_r+0xb9a>
 80108be:	3201      	adds	r2, #1
 80108c0:	701a      	strb	r2, [r3, #0]
 80108c2:	e746      	b.n	8010752 <_dtoa_r+0x94a>
 80108c4:	2a00      	cmp	r2, #0
 80108c6:	dd07      	ble.n	80108d8 <_dtoa_r+0xad0>
 80108c8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80108cc:	d0ed      	beq.n	80108aa <_dtoa_r+0xaa2>
 80108ce:	f10a 0301 	add.w	r3, sl, #1
 80108d2:	f88b 3000 	strb.w	r3, [fp]
 80108d6:	e73c      	b.n	8010752 <_dtoa_r+0x94a>
 80108d8:	9b05      	ldr	r3, [sp, #20]
 80108da:	f809 ac01 	strb.w	sl, [r9, #-1]
 80108de:	4599      	cmp	r9, r3
 80108e0:	d047      	beq.n	8010972 <_dtoa_r+0xb6a>
 80108e2:	ee18 1a10 	vmov	r1, s16
 80108e6:	2300      	movs	r3, #0
 80108e8:	220a      	movs	r2, #10
 80108ea:	4620      	mov	r0, r4
 80108ec:	f000 fc6a 	bl	80111c4 <__multadd>
 80108f0:	45b8      	cmp	r8, r7
 80108f2:	ee08 0a10 	vmov	s16, r0
 80108f6:	f04f 0300 	mov.w	r3, #0
 80108fa:	f04f 020a 	mov.w	r2, #10
 80108fe:	4641      	mov	r1, r8
 8010900:	4620      	mov	r0, r4
 8010902:	d106      	bne.n	8010912 <_dtoa_r+0xb0a>
 8010904:	f000 fc5e 	bl	80111c4 <__multadd>
 8010908:	4680      	mov	r8, r0
 801090a:	4607      	mov	r7, r0
 801090c:	f109 0901 	add.w	r9, r9, #1
 8010910:	e772      	b.n	80107f8 <_dtoa_r+0x9f0>
 8010912:	f000 fc57 	bl	80111c4 <__multadd>
 8010916:	4639      	mov	r1, r7
 8010918:	4680      	mov	r8, r0
 801091a:	2300      	movs	r3, #0
 801091c:	220a      	movs	r2, #10
 801091e:	4620      	mov	r0, r4
 8010920:	f000 fc50 	bl	80111c4 <__multadd>
 8010924:	4607      	mov	r7, r0
 8010926:	e7f1      	b.n	801090c <_dtoa_r+0xb04>
 8010928:	9b03      	ldr	r3, [sp, #12]
 801092a:	9302      	str	r3, [sp, #8]
 801092c:	9d01      	ldr	r5, [sp, #4]
 801092e:	ee18 0a10 	vmov	r0, s16
 8010932:	4631      	mov	r1, r6
 8010934:	f7ff f9dc 	bl	800fcf0 <quorem>
 8010938:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801093c:	9b01      	ldr	r3, [sp, #4]
 801093e:	f805 ab01 	strb.w	sl, [r5], #1
 8010942:	1aea      	subs	r2, r5, r3
 8010944:	9b02      	ldr	r3, [sp, #8]
 8010946:	4293      	cmp	r3, r2
 8010948:	dd09      	ble.n	801095e <_dtoa_r+0xb56>
 801094a:	ee18 1a10 	vmov	r1, s16
 801094e:	2300      	movs	r3, #0
 8010950:	220a      	movs	r2, #10
 8010952:	4620      	mov	r0, r4
 8010954:	f000 fc36 	bl	80111c4 <__multadd>
 8010958:	ee08 0a10 	vmov	s16, r0
 801095c:	e7e7      	b.n	801092e <_dtoa_r+0xb26>
 801095e:	9b02      	ldr	r3, [sp, #8]
 8010960:	2b00      	cmp	r3, #0
 8010962:	bfc8      	it	gt
 8010964:	461d      	movgt	r5, r3
 8010966:	9b01      	ldr	r3, [sp, #4]
 8010968:	bfd8      	it	le
 801096a:	2501      	movle	r5, #1
 801096c:	441d      	add	r5, r3
 801096e:	f04f 0800 	mov.w	r8, #0
 8010972:	ee18 1a10 	vmov	r1, s16
 8010976:	2201      	movs	r2, #1
 8010978:	4620      	mov	r0, r4
 801097a:	f000 fe1d 	bl	80115b8 <__lshift>
 801097e:	4631      	mov	r1, r6
 8010980:	ee08 0a10 	vmov	s16, r0
 8010984:	f000 fe88 	bl	8011698 <__mcmp>
 8010988:	2800      	cmp	r0, #0
 801098a:	dc91      	bgt.n	80108b0 <_dtoa_r+0xaa8>
 801098c:	d102      	bne.n	8010994 <_dtoa_r+0xb8c>
 801098e:	f01a 0f01 	tst.w	sl, #1
 8010992:	d18d      	bne.n	80108b0 <_dtoa_r+0xaa8>
 8010994:	462b      	mov	r3, r5
 8010996:	461d      	mov	r5, r3
 8010998:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801099c:	2a30      	cmp	r2, #48	; 0x30
 801099e:	d0fa      	beq.n	8010996 <_dtoa_r+0xb8e>
 80109a0:	e6d7      	b.n	8010752 <_dtoa_r+0x94a>
 80109a2:	9a01      	ldr	r2, [sp, #4]
 80109a4:	429a      	cmp	r2, r3
 80109a6:	d184      	bne.n	80108b2 <_dtoa_r+0xaaa>
 80109a8:	9b00      	ldr	r3, [sp, #0]
 80109aa:	3301      	adds	r3, #1
 80109ac:	9300      	str	r3, [sp, #0]
 80109ae:	2331      	movs	r3, #49	; 0x31
 80109b0:	7013      	strb	r3, [r2, #0]
 80109b2:	e6ce      	b.n	8010752 <_dtoa_r+0x94a>
 80109b4:	4b09      	ldr	r3, [pc, #36]	; (80109dc <_dtoa_r+0xbd4>)
 80109b6:	f7ff ba95 	b.w	800fee4 <_dtoa_r+0xdc>
 80109ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80109bc:	2b00      	cmp	r3, #0
 80109be:	f47f aa6e 	bne.w	800fe9e <_dtoa_r+0x96>
 80109c2:	4b07      	ldr	r3, [pc, #28]	; (80109e0 <_dtoa_r+0xbd8>)
 80109c4:	f7ff ba8e 	b.w	800fee4 <_dtoa_r+0xdc>
 80109c8:	9b02      	ldr	r3, [sp, #8]
 80109ca:	2b00      	cmp	r3, #0
 80109cc:	dcae      	bgt.n	801092c <_dtoa_r+0xb24>
 80109ce:	9b06      	ldr	r3, [sp, #24]
 80109d0:	2b02      	cmp	r3, #2
 80109d2:	f73f aea8 	bgt.w	8010726 <_dtoa_r+0x91e>
 80109d6:	e7a9      	b.n	801092c <_dtoa_r+0xb24>
 80109d8:	08012fa0 	.word	0x08012fa0
 80109dc:	08012da0 	.word	0x08012da0
 80109e0:	08012f21 	.word	0x08012f21

080109e4 <rshift>:
 80109e4:	6903      	ldr	r3, [r0, #16]
 80109e6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80109ea:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80109ee:	ea4f 1261 	mov.w	r2, r1, asr #5
 80109f2:	f100 0414 	add.w	r4, r0, #20
 80109f6:	dd45      	ble.n	8010a84 <rshift+0xa0>
 80109f8:	f011 011f 	ands.w	r1, r1, #31
 80109fc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8010a00:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8010a04:	d10c      	bne.n	8010a20 <rshift+0x3c>
 8010a06:	f100 0710 	add.w	r7, r0, #16
 8010a0a:	4629      	mov	r1, r5
 8010a0c:	42b1      	cmp	r1, r6
 8010a0e:	d334      	bcc.n	8010a7a <rshift+0x96>
 8010a10:	1a9b      	subs	r3, r3, r2
 8010a12:	009b      	lsls	r3, r3, #2
 8010a14:	1eea      	subs	r2, r5, #3
 8010a16:	4296      	cmp	r6, r2
 8010a18:	bf38      	it	cc
 8010a1a:	2300      	movcc	r3, #0
 8010a1c:	4423      	add	r3, r4
 8010a1e:	e015      	b.n	8010a4c <rshift+0x68>
 8010a20:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8010a24:	f1c1 0820 	rsb	r8, r1, #32
 8010a28:	40cf      	lsrs	r7, r1
 8010a2a:	f105 0e04 	add.w	lr, r5, #4
 8010a2e:	46a1      	mov	r9, r4
 8010a30:	4576      	cmp	r6, lr
 8010a32:	46f4      	mov	ip, lr
 8010a34:	d815      	bhi.n	8010a62 <rshift+0x7e>
 8010a36:	1a9a      	subs	r2, r3, r2
 8010a38:	0092      	lsls	r2, r2, #2
 8010a3a:	3a04      	subs	r2, #4
 8010a3c:	3501      	adds	r5, #1
 8010a3e:	42ae      	cmp	r6, r5
 8010a40:	bf38      	it	cc
 8010a42:	2200      	movcc	r2, #0
 8010a44:	18a3      	adds	r3, r4, r2
 8010a46:	50a7      	str	r7, [r4, r2]
 8010a48:	b107      	cbz	r7, 8010a4c <rshift+0x68>
 8010a4a:	3304      	adds	r3, #4
 8010a4c:	1b1a      	subs	r2, r3, r4
 8010a4e:	42a3      	cmp	r3, r4
 8010a50:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8010a54:	bf08      	it	eq
 8010a56:	2300      	moveq	r3, #0
 8010a58:	6102      	str	r2, [r0, #16]
 8010a5a:	bf08      	it	eq
 8010a5c:	6143      	streq	r3, [r0, #20]
 8010a5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010a62:	f8dc c000 	ldr.w	ip, [ip]
 8010a66:	fa0c fc08 	lsl.w	ip, ip, r8
 8010a6a:	ea4c 0707 	orr.w	r7, ip, r7
 8010a6e:	f849 7b04 	str.w	r7, [r9], #4
 8010a72:	f85e 7b04 	ldr.w	r7, [lr], #4
 8010a76:	40cf      	lsrs	r7, r1
 8010a78:	e7da      	b.n	8010a30 <rshift+0x4c>
 8010a7a:	f851 cb04 	ldr.w	ip, [r1], #4
 8010a7e:	f847 cf04 	str.w	ip, [r7, #4]!
 8010a82:	e7c3      	b.n	8010a0c <rshift+0x28>
 8010a84:	4623      	mov	r3, r4
 8010a86:	e7e1      	b.n	8010a4c <rshift+0x68>

08010a88 <__hexdig_fun>:
 8010a88:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8010a8c:	2b09      	cmp	r3, #9
 8010a8e:	d802      	bhi.n	8010a96 <__hexdig_fun+0xe>
 8010a90:	3820      	subs	r0, #32
 8010a92:	b2c0      	uxtb	r0, r0
 8010a94:	4770      	bx	lr
 8010a96:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8010a9a:	2b05      	cmp	r3, #5
 8010a9c:	d801      	bhi.n	8010aa2 <__hexdig_fun+0x1a>
 8010a9e:	3847      	subs	r0, #71	; 0x47
 8010aa0:	e7f7      	b.n	8010a92 <__hexdig_fun+0xa>
 8010aa2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8010aa6:	2b05      	cmp	r3, #5
 8010aa8:	d801      	bhi.n	8010aae <__hexdig_fun+0x26>
 8010aaa:	3827      	subs	r0, #39	; 0x27
 8010aac:	e7f1      	b.n	8010a92 <__hexdig_fun+0xa>
 8010aae:	2000      	movs	r0, #0
 8010ab0:	4770      	bx	lr
	...

08010ab4 <__gethex>:
 8010ab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ab8:	ed2d 8b02 	vpush	{d8}
 8010abc:	b089      	sub	sp, #36	; 0x24
 8010abe:	ee08 0a10 	vmov	s16, r0
 8010ac2:	9304      	str	r3, [sp, #16]
 8010ac4:	4bb4      	ldr	r3, [pc, #720]	; (8010d98 <__gethex+0x2e4>)
 8010ac6:	681b      	ldr	r3, [r3, #0]
 8010ac8:	9301      	str	r3, [sp, #4]
 8010aca:	4618      	mov	r0, r3
 8010acc:	468b      	mov	fp, r1
 8010ace:	4690      	mov	r8, r2
 8010ad0:	f7ef fb9e 	bl	8000210 <strlen>
 8010ad4:	9b01      	ldr	r3, [sp, #4]
 8010ad6:	f8db 2000 	ldr.w	r2, [fp]
 8010ada:	4403      	add	r3, r0
 8010adc:	4682      	mov	sl, r0
 8010ade:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8010ae2:	9305      	str	r3, [sp, #20]
 8010ae4:	1c93      	adds	r3, r2, #2
 8010ae6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8010aea:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8010aee:	32fe      	adds	r2, #254	; 0xfe
 8010af0:	18d1      	adds	r1, r2, r3
 8010af2:	461f      	mov	r7, r3
 8010af4:	f813 0b01 	ldrb.w	r0, [r3], #1
 8010af8:	9100      	str	r1, [sp, #0]
 8010afa:	2830      	cmp	r0, #48	; 0x30
 8010afc:	d0f8      	beq.n	8010af0 <__gethex+0x3c>
 8010afe:	f7ff ffc3 	bl	8010a88 <__hexdig_fun>
 8010b02:	4604      	mov	r4, r0
 8010b04:	2800      	cmp	r0, #0
 8010b06:	d13a      	bne.n	8010b7e <__gethex+0xca>
 8010b08:	9901      	ldr	r1, [sp, #4]
 8010b0a:	4652      	mov	r2, sl
 8010b0c:	4638      	mov	r0, r7
 8010b0e:	f001 fa23 	bl	8011f58 <strncmp>
 8010b12:	4605      	mov	r5, r0
 8010b14:	2800      	cmp	r0, #0
 8010b16:	d168      	bne.n	8010bea <__gethex+0x136>
 8010b18:	f817 000a 	ldrb.w	r0, [r7, sl]
 8010b1c:	eb07 060a 	add.w	r6, r7, sl
 8010b20:	f7ff ffb2 	bl	8010a88 <__hexdig_fun>
 8010b24:	2800      	cmp	r0, #0
 8010b26:	d062      	beq.n	8010bee <__gethex+0x13a>
 8010b28:	4633      	mov	r3, r6
 8010b2a:	7818      	ldrb	r0, [r3, #0]
 8010b2c:	2830      	cmp	r0, #48	; 0x30
 8010b2e:	461f      	mov	r7, r3
 8010b30:	f103 0301 	add.w	r3, r3, #1
 8010b34:	d0f9      	beq.n	8010b2a <__gethex+0x76>
 8010b36:	f7ff ffa7 	bl	8010a88 <__hexdig_fun>
 8010b3a:	2301      	movs	r3, #1
 8010b3c:	fab0 f480 	clz	r4, r0
 8010b40:	0964      	lsrs	r4, r4, #5
 8010b42:	4635      	mov	r5, r6
 8010b44:	9300      	str	r3, [sp, #0]
 8010b46:	463a      	mov	r2, r7
 8010b48:	4616      	mov	r6, r2
 8010b4a:	3201      	adds	r2, #1
 8010b4c:	7830      	ldrb	r0, [r6, #0]
 8010b4e:	f7ff ff9b 	bl	8010a88 <__hexdig_fun>
 8010b52:	2800      	cmp	r0, #0
 8010b54:	d1f8      	bne.n	8010b48 <__gethex+0x94>
 8010b56:	9901      	ldr	r1, [sp, #4]
 8010b58:	4652      	mov	r2, sl
 8010b5a:	4630      	mov	r0, r6
 8010b5c:	f001 f9fc 	bl	8011f58 <strncmp>
 8010b60:	b980      	cbnz	r0, 8010b84 <__gethex+0xd0>
 8010b62:	b94d      	cbnz	r5, 8010b78 <__gethex+0xc4>
 8010b64:	eb06 050a 	add.w	r5, r6, sl
 8010b68:	462a      	mov	r2, r5
 8010b6a:	4616      	mov	r6, r2
 8010b6c:	3201      	adds	r2, #1
 8010b6e:	7830      	ldrb	r0, [r6, #0]
 8010b70:	f7ff ff8a 	bl	8010a88 <__hexdig_fun>
 8010b74:	2800      	cmp	r0, #0
 8010b76:	d1f8      	bne.n	8010b6a <__gethex+0xb6>
 8010b78:	1bad      	subs	r5, r5, r6
 8010b7a:	00ad      	lsls	r5, r5, #2
 8010b7c:	e004      	b.n	8010b88 <__gethex+0xd4>
 8010b7e:	2400      	movs	r4, #0
 8010b80:	4625      	mov	r5, r4
 8010b82:	e7e0      	b.n	8010b46 <__gethex+0x92>
 8010b84:	2d00      	cmp	r5, #0
 8010b86:	d1f7      	bne.n	8010b78 <__gethex+0xc4>
 8010b88:	7833      	ldrb	r3, [r6, #0]
 8010b8a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8010b8e:	2b50      	cmp	r3, #80	; 0x50
 8010b90:	d13b      	bne.n	8010c0a <__gethex+0x156>
 8010b92:	7873      	ldrb	r3, [r6, #1]
 8010b94:	2b2b      	cmp	r3, #43	; 0x2b
 8010b96:	d02c      	beq.n	8010bf2 <__gethex+0x13e>
 8010b98:	2b2d      	cmp	r3, #45	; 0x2d
 8010b9a:	d02e      	beq.n	8010bfa <__gethex+0x146>
 8010b9c:	1c71      	adds	r1, r6, #1
 8010b9e:	f04f 0900 	mov.w	r9, #0
 8010ba2:	7808      	ldrb	r0, [r1, #0]
 8010ba4:	f7ff ff70 	bl	8010a88 <__hexdig_fun>
 8010ba8:	1e43      	subs	r3, r0, #1
 8010baa:	b2db      	uxtb	r3, r3
 8010bac:	2b18      	cmp	r3, #24
 8010bae:	d82c      	bhi.n	8010c0a <__gethex+0x156>
 8010bb0:	f1a0 0210 	sub.w	r2, r0, #16
 8010bb4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8010bb8:	f7ff ff66 	bl	8010a88 <__hexdig_fun>
 8010bbc:	1e43      	subs	r3, r0, #1
 8010bbe:	b2db      	uxtb	r3, r3
 8010bc0:	2b18      	cmp	r3, #24
 8010bc2:	d91d      	bls.n	8010c00 <__gethex+0x14c>
 8010bc4:	f1b9 0f00 	cmp.w	r9, #0
 8010bc8:	d000      	beq.n	8010bcc <__gethex+0x118>
 8010bca:	4252      	negs	r2, r2
 8010bcc:	4415      	add	r5, r2
 8010bce:	f8cb 1000 	str.w	r1, [fp]
 8010bd2:	b1e4      	cbz	r4, 8010c0e <__gethex+0x15a>
 8010bd4:	9b00      	ldr	r3, [sp, #0]
 8010bd6:	2b00      	cmp	r3, #0
 8010bd8:	bf14      	ite	ne
 8010bda:	2700      	movne	r7, #0
 8010bdc:	2706      	moveq	r7, #6
 8010bde:	4638      	mov	r0, r7
 8010be0:	b009      	add	sp, #36	; 0x24
 8010be2:	ecbd 8b02 	vpop	{d8}
 8010be6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010bea:	463e      	mov	r6, r7
 8010bec:	4625      	mov	r5, r4
 8010bee:	2401      	movs	r4, #1
 8010bf0:	e7ca      	b.n	8010b88 <__gethex+0xd4>
 8010bf2:	f04f 0900 	mov.w	r9, #0
 8010bf6:	1cb1      	adds	r1, r6, #2
 8010bf8:	e7d3      	b.n	8010ba2 <__gethex+0xee>
 8010bfa:	f04f 0901 	mov.w	r9, #1
 8010bfe:	e7fa      	b.n	8010bf6 <__gethex+0x142>
 8010c00:	230a      	movs	r3, #10
 8010c02:	fb03 0202 	mla	r2, r3, r2, r0
 8010c06:	3a10      	subs	r2, #16
 8010c08:	e7d4      	b.n	8010bb4 <__gethex+0x100>
 8010c0a:	4631      	mov	r1, r6
 8010c0c:	e7df      	b.n	8010bce <__gethex+0x11a>
 8010c0e:	1bf3      	subs	r3, r6, r7
 8010c10:	3b01      	subs	r3, #1
 8010c12:	4621      	mov	r1, r4
 8010c14:	2b07      	cmp	r3, #7
 8010c16:	dc0b      	bgt.n	8010c30 <__gethex+0x17c>
 8010c18:	ee18 0a10 	vmov	r0, s16
 8010c1c:	f000 fa70 	bl	8011100 <_Balloc>
 8010c20:	4604      	mov	r4, r0
 8010c22:	b940      	cbnz	r0, 8010c36 <__gethex+0x182>
 8010c24:	4b5d      	ldr	r3, [pc, #372]	; (8010d9c <__gethex+0x2e8>)
 8010c26:	4602      	mov	r2, r0
 8010c28:	21de      	movs	r1, #222	; 0xde
 8010c2a:	485d      	ldr	r0, [pc, #372]	; (8010da0 <__gethex+0x2ec>)
 8010c2c:	f001 f9b6 	bl	8011f9c <__assert_func>
 8010c30:	3101      	adds	r1, #1
 8010c32:	105b      	asrs	r3, r3, #1
 8010c34:	e7ee      	b.n	8010c14 <__gethex+0x160>
 8010c36:	f100 0914 	add.w	r9, r0, #20
 8010c3a:	f04f 0b00 	mov.w	fp, #0
 8010c3e:	f1ca 0301 	rsb	r3, sl, #1
 8010c42:	f8cd 9008 	str.w	r9, [sp, #8]
 8010c46:	f8cd b000 	str.w	fp, [sp]
 8010c4a:	9306      	str	r3, [sp, #24]
 8010c4c:	42b7      	cmp	r7, r6
 8010c4e:	d340      	bcc.n	8010cd2 <__gethex+0x21e>
 8010c50:	9802      	ldr	r0, [sp, #8]
 8010c52:	9b00      	ldr	r3, [sp, #0]
 8010c54:	f840 3b04 	str.w	r3, [r0], #4
 8010c58:	eba0 0009 	sub.w	r0, r0, r9
 8010c5c:	1080      	asrs	r0, r0, #2
 8010c5e:	0146      	lsls	r6, r0, #5
 8010c60:	6120      	str	r0, [r4, #16]
 8010c62:	4618      	mov	r0, r3
 8010c64:	f000 fb3e 	bl	80112e4 <__hi0bits>
 8010c68:	1a30      	subs	r0, r6, r0
 8010c6a:	f8d8 6000 	ldr.w	r6, [r8]
 8010c6e:	42b0      	cmp	r0, r6
 8010c70:	dd63      	ble.n	8010d3a <__gethex+0x286>
 8010c72:	1b87      	subs	r7, r0, r6
 8010c74:	4639      	mov	r1, r7
 8010c76:	4620      	mov	r0, r4
 8010c78:	f000 fee2 	bl	8011a40 <__any_on>
 8010c7c:	4682      	mov	sl, r0
 8010c7e:	b1a8      	cbz	r0, 8010cac <__gethex+0x1f8>
 8010c80:	1e7b      	subs	r3, r7, #1
 8010c82:	1159      	asrs	r1, r3, #5
 8010c84:	f003 021f 	and.w	r2, r3, #31
 8010c88:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8010c8c:	f04f 0a01 	mov.w	sl, #1
 8010c90:	fa0a f202 	lsl.w	r2, sl, r2
 8010c94:	420a      	tst	r2, r1
 8010c96:	d009      	beq.n	8010cac <__gethex+0x1f8>
 8010c98:	4553      	cmp	r3, sl
 8010c9a:	dd05      	ble.n	8010ca8 <__gethex+0x1f4>
 8010c9c:	1eb9      	subs	r1, r7, #2
 8010c9e:	4620      	mov	r0, r4
 8010ca0:	f000 fece 	bl	8011a40 <__any_on>
 8010ca4:	2800      	cmp	r0, #0
 8010ca6:	d145      	bne.n	8010d34 <__gethex+0x280>
 8010ca8:	f04f 0a02 	mov.w	sl, #2
 8010cac:	4639      	mov	r1, r7
 8010cae:	4620      	mov	r0, r4
 8010cb0:	f7ff fe98 	bl	80109e4 <rshift>
 8010cb4:	443d      	add	r5, r7
 8010cb6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010cba:	42ab      	cmp	r3, r5
 8010cbc:	da4c      	bge.n	8010d58 <__gethex+0x2a4>
 8010cbe:	ee18 0a10 	vmov	r0, s16
 8010cc2:	4621      	mov	r1, r4
 8010cc4:	f000 fa5c 	bl	8011180 <_Bfree>
 8010cc8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8010cca:	2300      	movs	r3, #0
 8010ccc:	6013      	str	r3, [r2, #0]
 8010cce:	27a3      	movs	r7, #163	; 0xa3
 8010cd0:	e785      	b.n	8010bde <__gethex+0x12a>
 8010cd2:	1e73      	subs	r3, r6, #1
 8010cd4:	9a05      	ldr	r2, [sp, #20]
 8010cd6:	9303      	str	r3, [sp, #12]
 8010cd8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8010cdc:	4293      	cmp	r3, r2
 8010cde:	d019      	beq.n	8010d14 <__gethex+0x260>
 8010ce0:	f1bb 0f20 	cmp.w	fp, #32
 8010ce4:	d107      	bne.n	8010cf6 <__gethex+0x242>
 8010ce6:	9b02      	ldr	r3, [sp, #8]
 8010ce8:	9a00      	ldr	r2, [sp, #0]
 8010cea:	f843 2b04 	str.w	r2, [r3], #4
 8010cee:	9302      	str	r3, [sp, #8]
 8010cf0:	2300      	movs	r3, #0
 8010cf2:	9300      	str	r3, [sp, #0]
 8010cf4:	469b      	mov	fp, r3
 8010cf6:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8010cfa:	f7ff fec5 	bl	8010a88 <__hexdig_fun>
 8010cfe:	9b00      	ldr	r3, [sp, #0]
 8010d00:	f000 000f 	and.w	r0, r0, #15
 8010d04:	fa00 f00b 	lsl.w	r0, r0, fp
 8010d08:	4303      	orrs	r3, r0
 8010d0a:	9300      	str	r3, [sp, #0]
 8010d0c:	f10b 0b04 	add.w	fp, fp, #4
 8010d10:	9b03      	ldr	r3, [sp, #12]
 8010d12:	e00d      	b.n	8010d30 <__gethex+0x27c>
 8010d14:	9b03      	ldr	r3, [sp, #12]
 8010d16:	9a06      	ldr	r2, [sp, #24]
 8010d18:	4413      	add	r3, r2
 8010d1a:	42bb      	cmp	r3, r7
 8010d1c:	d3e0      	bcc.n	8010ce0 <__gethex+0x22c>
 8010d1e:	4618      	mov	r0, r3
 8010d20:	9901      	ldr	r1, [sp, #4]
 8010d22:	9307      	str	r3, [sp, #28]
 8010d24:	4652      	mov	r2, sl
 8010d26:	f001 f917 	bl	8011f58 <strncmp>
 8010d2a:	9b07      	ldr	r3, [sp, #28]
 8010d2c:	2800      	cmp	r0, #0
 8010d2e:	d1d7      	bne.n	8010ce0 <__gethex+0x22c>
 8010d30:	461e      	mov	r6, r3
 8010d32:	e78b      	b.n	8010c4c <__gethex+0x198>
 8010d34:	f04f 0a03 	mov.w	sl, #3
 8010d38:	e7b8      	b.n	8010cac <__gethex+0x1f8>
 8010d3a:	da0a      	bge.n	8010d52 <__gethex+0x29e>
 8010d3c:	1a37      	subs	r7, r6, r0
 8010d3e:	4621      	mov	r1, r4
 8010d40:	ee18 0a10 	vmov	r0, s16
 8010d44:	463a      	mov	r2, r7
 8010d46:	f000 fc37 	bl	80115b8 <__lshift>
 8010d4a:	1bed      	subs	r5, r5, r7
 8010d4c:	4604      	mov	r4, r0
 8010d4e:	f100 0914 	add.w	r9, r0, #20
 8010d52:	f04f 0a00 	mov.w	sl, #0
 8010d56:	e7ae      	b.n	8010cb6 <__gethex+0x202>
 8010d58:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8010d5c:	42a8      	cmp	r0, r5
 8010d5e:	dd72      	ble.n	8010e46 <__gethex+0x392>
 8010d60:	1b45      	subs	r5, r0, r5
 8010d62:	42ae      	cmp	r6, r5
 8010d64:	dc36      	bgt.n	8010dd4 <__gethex+0x320>
 8010d66:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010d6a:	2b02      	cmp	r3, #2
 8010d6c:	d02a      	beq.n	8010dc4 <__gethex+0x310>
 8010d6e:	2b03      	cmp	r3, #3
 8010d70:	d02c      	beq.n	8010dcc <__gethex+0x318>
 8010d72:	2b01      	cmp	r3, #1
 8010d74:	d11c      	bne.n	8010db0 <__gethex+0x2fc>
 8010d76:	42ae      	cmp	r6, r5
 8010d78:	d11a      	bne.n	8010db0 <__gethex+0x2fc>
 8010d7a:	2e01      	cmp	r6, #1
 8010d7c:	d112      	bne.n	8010da4 <__gethex+0x2f0>
 8010d7e:	9a04      	ldr	r2, [sp, #16]
 8010d80:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8010d84:	6013      	str	r3, [r2, #0]
 8010d86:	2301      	movs	r3, #1
 8010d88:	6123      	str	r3, [r4, #16]
 8010d8a:	f8c9 3000 	str.w	r3, [r9]
 8010d8e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010d90:	2762      	movs	r7, #98	; 0x62
 8010d92:	601c      	str	r4, [r3, #0]
 8010d94:	e723      	b.n	8010bde <__gethex+0x12a>
 8010d96:	bf00      	nop
 8010d98:	08013018 	.word	0x08013018
 8010d9c:	08012fa0 	.word	0x08012fa0
 8010da0:	08012fb1 	.word	0x08012fb1
 8010da4:	1e71      	subs	r1, r6, #1
 8010da6:	4620      	mov	r0, r4
 8010da8:	f000 fe4a 	bl	8011a40 <__any_on>
 8010dac:	2800      	cmp	r0, #0
 8010dae:	d1e6      	bne.n	8010d7e <__gethex+0x2ca>
 8010db0:	ee18 0a10 	vmov	r0, s16
 8010db4:	4621      	mov	r1, r4
 8010db6:	f000 f9e3 	bl	8011180 <_Bfree>
 8010dba:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8010dbc:	2300      	movs	r3, #0
 8010dbe:	6013      	str	r3, [r2, #0]
 8010dc0:	2750      	movs	r7, #80	; 0x50
 8010dc2:	e70c      	b.n	8010bde <__gethex+0x12a>
 8010dc4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010dc6:	2b00      	cmp	r3, #0
 8010dc8:	d1f2      	bne.n	8010db0 <__gethex+0x2fc>
 8010dca:	e7d8      	b.n	8010d7e <__gethex+0x2ca>
 8010dcc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010dce:	2b00      	cmp	r3, #0
 8010dd0:	d1d5      	bne.n	8010d7e <__gethex+0x2ca>
 8010dd2:	e7ed      	b.n	8010db0 <__gethex+0x2fc>
 8010dd4:	1e6f      	subs	r7, r5, #1
 8010dd6:	f1ba 0f00 	cmp.w	sl, #0
 8010dda:	d131      	bne.n	8010e40 <__gethex+0x38c>
 8010ddc:	b127      	cbz	r7, 8010de8 <__gethex+0x334>
 8010dde:	4639      	mov	r1, r7
 8010de0:	4620      	mov	r0, r4
 8010de2:	f000 fe2d 	bl	8011a40 <__any_on>
 8010de6:	4682      	mov	sl, r0
 8010de8:	117b      	asrs	r3, r7, #5
 8010dea:	2101      	movs	r1, #1
 8010dec:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8010df0:	f007 071f 	and.w	r7, r7, #31
 8010df4:	fa01 f707 	lsl.w	r7, r1, r7
 8010df8:	421f      	tst	r7, r3
 8010dfa:	4629      	mov	r1, r5
 8010dfc:	4620      	mov	r0, r4
 8010dfe:	bf18      	it	ne
 8010e00:	f04a 0a02 	orrne.w	sl, sl, #2
 8010e04:	1b76      	subs	r6, r6, r5
 8010e06:	f7ff fded 	bl	80109e4 <rshift>
 8010e0a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8010e0e:	2702      	movs	r7, #2
 8010e10:	f1ba 0f00 	cmp.w	sl, #0
 8010e14:	d048      	beq.n	8010ea8 <__gethex+0x3f4>
 8010e16:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010e1a:	2b02      	cmp	r3, #2
 8010e1c:	d015      	beq.n	8010e4a <__gethex+0x396>
 8010e1e:	2b03      	cmp	r3, #3
 8010e20:	d017      	beq.n	8010e52 <__gethex+0x39e>
 8010e22:	2b01      	cmp	r3, #1
 8010e24:	d109      	bne.n	8010e3a <__gethex+0x386>
 8010e26:	f01a 0f02 	tst.w	sl, #2
 8010e2a:	d006      	beq.n	8010e3a <__gethex+0x386>
 8010e2c:	f8d9 0000 	ldr.w	r0, [r9]
 8010e30:	ea4a 0a00 	orr.w	sl, sl, r0
 8010e34:	f01a 0f01 	tst.w	sl, #1
 8010e38:	d10e      	bne.n	8010e58 <__gethex+0x3a4>
 8010e3a:	f047 0710 	orr.w	r7, r7, #16
 8010e3e:	e033      	b.n	8010ea8 <__gethex+0x3f4>
 8010e40:	f04f 0a01 	mov.w	sl, #1
 8010e44:	e7d0      	b.n	8010de8 <__gethex+0x334>
 8010e46:	2701      	movs	r7, #1
 8010e48:	e7e2      	b.n	8010e10 <__gethex+0x35c>
 8010e4a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010e4c:	f1c3 0301 	rsb	r3, r3, #1
 8010e50:	9315      	str	r3, [sp, #84]	; 0x54
 8010e52:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010e54:	2b00      	cmp	r3, #0
 8010e56:	d0f0      	beq.n	8010e3a <__gethex+0x386>
 8010e58:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8010e5c:	f104 0314 	add.w	r3, r4, #20
 8010e60:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8010e64:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8010e68:	f04f 0c00 	mov.w	ip, #0
 8010e6c:	4618      	mov	r0, r3
 8010e6e:	f853 2b04 	ldr.w	r2, [r3], #4
 8010e72:	f1b2 3fff 	cmp.w	r2, #4294967295
 8010e76:	d01c      	beq.n	8010eb2 <__gethex+0x3fe>
 8010e78:	3201      	adds	r2, #1
 8010e7a:	6002      	str	r2, [r0, #0]
 8010e7c:	2f02      	cmp	r7, #2
 8010e7e:	f104 0314 	add.w	r3, r4, #20
 8010e82:	d13f      	bne.n	8010f04 <__gethex+0x450>
 8010e84:	f8d8 2000 	ldr.w	r2, [r8]
 8010e88:	3a01      	subs	r2, #1
 8010e8a:	42b2      	cmp	r2, r6
 8010e8c:	d10a      	bne.n	8010ea4 <__gethex+0x3f0>
 8010e8e:	1171      	asrs	r1, r6, #5
 8010e90:	2201      	movs	r2, #1
 8010e92:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010e96:	f006 061f 	and.w	r6, r6, #31
 8010e9a:	fa02 f606 	lsl.w	r6, r2, r6
 8010e9e:	421e      	tst	r6, r3
 8010ea0:	bf18      	it	ne
 8010ea2:	4617      	movne	r7, r2
 8010ea4:	f047 0720 	orr.w	r7, r7, #32
 8010ea8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010eaa:	601c      	str	r4, [r3, #0]
 8010eac:	9b04      	ldr	r3, [sp, #16]
 8010eae:	601d      	str	r5, [r3, #0]
 8010eb0:	e695      	b.n	8010bde <__gethex+0x12a>
 8010eb2:	4299      	cmp	r1, r3
 8010eb4:	f843 cc04 	str.w	ip, [r3, #-4]
 8010eb8:	d8d8      	bhi.n	8010e6c <__gethex+0x3b8>
 8010eba:	68a3      	ldr	r3, [r4, #8]
 8010ebc:	459b      	cmp	fp, r3
 8010ebe:	db19      	blt.n	8010ef4 <__gethex+0x440>
 8010ec0:	6861      	ldr	r1, [r4, #4]
 8010ec2:	ee18 0a10 	vmov	r0, s16
 8010ec6:	3101      	adds	r1, #1
 8010ec8:	f000 f91a 	bl	8011100 <_Balloc>
 8010ecc:	4681      	mov	r9, r0
 8010ece:	b918      	cbnz	r0, 8010ed8 <__gethex+0x424>
 8010ed0:	4b1a      	ldr	r3, [pc, #104]	; (8010f3c <__gethex+0x488>)
 8010ed2:	4602      	mov	r2, r0
 8010ed4:	2184      	movs	r1, #132	; 0x84
 8010ed6:	e6a8      	b.n	8010c2a <__gethex+0x176>
 8010ed8:	6922      	ldr	r2, [r4, #16]
 8010eda:	3202      	adds	r2, #2
 8010edc:	f104 010c 	add.w	r1, r4, #12
 8010ee0:	0092      	lsls	r2, r2, #2
 8010ee2:	300c      	adds	r0, #12
 8010ee4:	f7fd f99a 	bl	800e21c <memcpy>
 8010ee8:	4621      	mov	r1, r4
 8010eea:	ee18 0a10 	vmov	r0, s16
 8010eee:	f000 f947 	bl	8011180 <_Bfree>
 8010ef2:	464c      	mov	r4, r9
 8010ef4:	6923      	ldr	r3, [r4, #16]
 8010ef6:	1c5a      	adds	r2, r3, #1
 8010ef8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010efc:	6122      	str	r2, [r4, #16]
 8010efe:	2201      	movs	r2, #1
 8010f00:	615a      	str	r2, [r3, #20]
 8010f02:	e7bb      	b.n	8010e7c <__gethex+0x3c8>
 8010f04:	6922      	ldr	r2, [r4, #16]
 8010f06:	455a      	cmp	r2, fp
 8010f08:	dd0b      	ble.n	8010f22 <__gethex+0x46e>
 8010f0a:	2101      	movs	r1, #1
 8010f0c:	4620      	mov	r0, r4
 8010f0e:	f7ff fd69 	bl	80109e4 <rshift>
 8010f12:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010f16:	3501      	adds	r5, #1
 8010f18:	42ab      	cmp	r3, r5
 8010f1a:	f6ff aed0 	blt.w	8010cbe <__gethex+0x20a>
 8010f1e:	2701      	movs	r7, #1
 8010f20:	e7c0      	b.n	8010ea4 <__gethex+0x3f0>
 8010f22:	f016 061f 	ands.w	r6, r6, #31
 8010f26:	d0fa      	beq.n	8010f1e <__gethex+0x46a>
 8010f28:	4453      	add	r3, sl
 8010f2a:	f1c6 0620 	rsb	r6, r6, #32
 8010f2e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8010f32:	f000 f9d7 	bl	80112e4 <__hi0bits>
 8010f36:	42b0      	cmp	r0, r6
 8010f38:	dbe7      	blt.n	8010f0a <__gethex+0x456>
 8010f3a:	e7f0      	b.n	8010f1e <__gethex+0x46a>
 8010f3c:	08012fa0 	.word	0x08012fa0

08010f40 <L_shift>:
 8010f40:	f1c2 0208 	rsb	r2, r2, #8
 8010f44:	0092      	lsls	r2, r2, #2
 8010f46:	b570      	push	{r4, r5, r6, lr}
 8010f48:	f1c2 0620 	rsb	r6, r2, #32
 8010f4c:	6843      	ldr	r3, [r0, #4]
 8010f4e:	6804      	ldr	r4, [r0, #0]
 8010f50:	fa03 f506 	lsl.w	r5, r3, r6
 8010f54:	432c      	orrs	r4, r5
 8010f56:	40d3      	lsrs	r3, r2
 8010f58:	6004      	str	r4, [r0, #0]
 8010f5a:	f840 3f04 	str.w	r3, [r0, #4]!
 8010f5e:	4288      	cmp	r0, r1
 8010f60:	d3f4      	bcc.n	8010f4c <L_shift+0xc>
 8010f62:	bd70      	pop	{r4, r5, r6, pc}

08010f64 <__match>:
 8010f64:	b530      	push	{r4, r5, lr}
 8010f66:	6803      	ldr	r3, [r0, #0]
 8010f68:	3301      	adds	r3, #1
 8010f6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010f6e:	b914      	cbnz	r4, 8010f76 <__match+0x12>
 8010f70:	6003      	str	r3, [r0, #0]
 8010f72:	2001      	movs	r0, #1
 8010f74:	bd30      	pop	{r4, r5, pc}
 8010f76:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010f7a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8010f7e:	2d19      	cmp	r5, #25
 8010f80:	bf98      	it	ls
 8010f82:	3220      	addls	r2, #32
 8010f84:	42a2      	cmp	r2, r4
 8010f86:	d0f0      	beq.n	8010f6a <__match+0x6>
 8010f88:	2000      	movs	r0, #0
 8010f8a:	e7f3      	b.n	8010f74 <__match+0x10>

08010f8c <__hexnan>:
 8010f8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f90:	680b      	ldr	r3, [r1, #0]
 8010f92:	115e      	asrs	r6, r3, #5
 8010f94:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8010f98:	f013 031f 	ands.w	r3, r3, #31
 8010f9c:	b087      	sub	sp, #28
 8010f9e:	bf18      	it	ne
 8010fa0:	3604      	addne	r6, #4
 8010fa2:	2500      	movs	r5, #0
 8010fa4:	1f37      	subs	r7, r6, #4
 8010fa6:	4690      	mov	r8, r2
 8010fa8:	6802      	ldr	r2, [r0, #0]
 8010faa:	9301      	str	r3, [sp, #4]
 8010fac:	4682      	mov	sl, r0
 8010fae:	f846 5c04 	str.w	r5, [r6, #-4]
 8010fb2:	46b9      	mov	r9, r7
 8010fb4:	463c      	mov	r4, r7
 8010fb6:	9502      	str	r5, [sp, #8]
 8010fb8:	46ab      	mov	fp, r5
 8010fba:	7851      	ldrb	r1, [r2, #1]
 8010fbc:	1c53      	adds	r3, r2, #1
 8010fbe:	9303      	str	r3, [sp, #12]
 8010fc0:	b341      	cbz	r1, 8011014 <__hexnan+0x88>
 8010fc2:	4608      	mov	r0, r1
 8010fc4:	9205      	str	r2, [sp, #20]
 8010fc6:	9104      	str	r1, [sp, #16]
 8010fc8:	f7ff fd5e 	bl	8010a88 <__hexdig_fun>
 8010fcc:	2800      	cmp	r0, #0
 8010fce:	d14f      	bne.n	8011070 <__hexnan+0xe4>
 8010fd0:	9904      	ldr	r1, [sp, #16]
 8010fd2:	9a05      	ldr	r2, [sp, #20]
 8010fd4:	2920      	cmp	r1, #32
 8010fd6:	d818      	bhi.n	801100a <__hexnan+0x7e>
 8010fd8:	9b02      	ldr	r3, [sp, #8]
 8010fda:	459b      	cmp	fp, r3
 8010fdc:	dd13      	ble.n	8011006 <__hexnan+0x7a>
 8010fde:	454c      	cmp	r4, r9
 8010fe0:	d206      	bcs.n	8010ff0 <__hexnan+0x64>
 8010fe2:	2d07      	cmp	r5, #7
 8010fe4:	dc04      	bgt.n	8010ff0 <__hexnan+0x64>
 8010fe6:	462a      	mov	r2, r5
 8010fe8:	4649      	mov	r1, r9
 8010fea:	4620      	mov	r0, r4
 8010fec:	f7ff ffa8 	bl	8010f40 <L_shift>
 8010ff0:	4544      	cmp	r4, r8
 8010ff2:	d950      	bls.n	8011096 <__hexnan+0x10a>
 8010ff4:	2300      	movs	r3, #0
 8010ff6:	f1a4 0904 	sub.w	r9, r4, #4
 8010ffa:	f844 3c04 	str.w	r3, [r4, #-4]
 8010ffe:	f8cd b008 	str.w	fp, [sp, #8]
 8011002:	464c      	mov	r4, r9
 8011004:	461d      	mov	r5, r3
 8011006:	9a03      	ldr	r2, [sp, #12]
 8011008:	e7d7      	b.n	8010fba <__hexnan+0x2e>
 801100a:	2929      	cmp	r1, #41	; 0x29
 801100c:	d156      	bne.n	80110bc <__hexnan+0x130>
 801100e:	3202      	adds	r2, #2
 8011010:	f8ca 2000 	str.w	r2, [sl]
 8011014:	f1bb 0f00 	cmp.w	fp, #0
 8011018:	d050      	beq.n	80110bc <__hexnan+0x130>
 801101a:	454c      	cmp	r4, r9
 801101c:	d206      	bcs.n	801102c <__hexnan+0xa0>
 801101e:	2d07      	cmp	r5, #7
 8011020:	dc04      	bgt.n	801102c <__hexnan+0xa0>
 8011022:	462a      	mov	r2, r5
 8011024:	4649      	mov	r1, r9
 8011026:	4620      	mov	r0, r4
 8011028:	f7ff ff8a 	bl	8010f40 <L_shift>
 801102c:	4544      	cmp	r4, r8
 801102e:	d934      	bls.n	801109a <__hexnan+0x10e>
 8011030:	f1a8 0204 	sub.w	r2, r8, #4
 8011034:	4623      	mov	r3, r4
 8011036:	f853 1b04 	ldr.w	r1, [r3], #4
 801103a:	f842 1f04 	str.w	r1, [r2, #4]!
 801103e:	429f      	cmp	r7, r3
 8011040:	d2f9      	bcs.n	8011036 <__hexnan+0xaa>
 8011042:	1b3b      	subs	r3, r7, r4
 8011044:	f023 0303 	bic.w	r3, r3, #3
 8011048:	3304      	adds	r3, #4
 801104a:	3401      	adds	r4, #1
 801104c:	3e03      	subs	r6, #3
 801104e:	42b4      	cmp	r4, r6
 8011050:	bf88      	it	hi
 8011052:	2304      	movhi	r3, #4
 8011054:	4443      	add	r3, r8
 8011056:	2200      	movs	r2, #0
 8011058:	f843 2b04 	str.w	r2, [r3], #4
 801105c:	429f      	cmp	r7, r3
 801105e:	d2fb      	bcs.n	8011058 <__hexnan+0xcc>
 8011060:	683b      	ldr	r3, [r7, #0]
 8011062:	b91b      	cbnz	r3, 801106c <__hexnan+0xe0>
 8011064:	4547      	cmp	r7, r8
 8011066:	d127      	bne.n	80110b8 <__hexnan+0x12c>
 8011068:	2301      	movs	r3, #1
 801106a:	603b      	str	r3, [r7, #0]
 801106c:	2005      	movs	r0, #5
 801106e:	e026      	b.n	80110be <__hexnan+0x132>
 8011070:	3501      	adds	r5, #1
 8011072:	2d08      	cmp	r5, #8
 8011074:	f10b 0b01 	add.w	fp, fp, #1
 8011078:	dd06      	ble.n	8011088 <__hexnan+0xfc>
 801107a:	4544      	cmp	r4, r8
 801107c:	d9c3      	bls.n	8011006 <__hexnan+0x7a>
 801107e:	2300      	movs	r3, #0
 8011080:	f844 3c04 	str.w	r3, [r4, #-4]
 8011084:	2501      	movs	r5, #1
 8011086:	3c04      	subs	r4, #4
 8011088:	6822      	ldr	r2, [r4, #0]
 801108a:	f000 000f 	and.w	r0, r0, #15
 801108e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8011092:	6022      	str	r2, [r4, #0]
 8011094:	e7b7      	b.n	8011006 <__hexnan+0x7a>
 8011096:	2508      	movs	r5, #8
 8011098:	e7b5      	b.n	8011006 <__hexnan+0x7a>
 801109a:	9b01      	ldr	r3, [sp, #4]
 801109c:	2b00      	cmp	r3, #0
 801109e:	d0df      	beq.n	8011060 <__hexnan+0xd4>
 80110a0:	f04f 32ff 	mov.w	r2, #4294967295
 80110a4:	f1c3 0320 	rsb	r3, r3, #32
 80110a8:	fa22 f303 	lsr.w	r3, r2, r3
 80110ac:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80110b0:	401a      	ands	r2, r3
 80110b2:	f846 2c04 	str.w	r2, [r6, #-4]
 80110b6:	e7d3      	b.n	8011060 <__hexnan+0xd4>
 80110b8:	3f04      	subs	r7, #4
 80110ba:	e7d1      	b.n	8011060 <__hexnan+0xd4>
 80110bc:	2004      	movs	r0, #4
 80110be:	b007      	add	sp, #28
 80110c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080110c4 <_localeconv_r>:
 80110c4:	4800      	ldr	r0, [pc, #0]	; (80110c8 <_localeconv_r+0x4>)
 80110c6:	4770      	bx	lr
 80110c8:	20000420 	.word	0x20000420

080110cc <malloc>:
 80110cc:	4b02      	ldr	r3, [pc, #8]	; (80110d8 <malloc+0xc>)
 80110ce:	4601      	mov	r1, r0
 80110d0:	6818      	ldr	r0, [r3, #0]
 80110d2:	f000 bd59 	b.w	8011b88 <_malloc_r>
 80110d6:	bf00      	nop
 80110d8:	200002c8 	.word	0x200002c8

080110dc <__ascii_mbtowc>:
 80110dc:	b082      	sub	sp, #8
 80110de:	b901      	cbnz	r1, 80110e2 <__ascii_mbtowc+0x6>
 80110e0:	a901      	add	r1, sp, #4
 80110e2:	b142      	cbz	r2, 80110f6 <__ascii_mbtowc+0x1a>
 80110e4:	b14b      	cbz	r3, 80110fa <__ascii_mbtowc+0x1e>
 80110e6:	7813      	ldrb	r3, [r2, #0]
 80110e8:	600b      	str	r3, [r1, #0]
 80110ea:	7812      	ldrb	r2, [r2, #0]
 80110ec:	1e10      	subs	r0, r2, #0
 80110ee:	bf18      	it	ne
 80110f0:	2001      	movne	r0, #1
 80110f2:	b002      	add	sp, #8
 80110f4:	4770      	bx	lr
 80110f6:	4610      	mov	r0, r2
 80110f8:	e7fb      	b.n	80110f2 <__ascii_mbtowc+0x16>
 80110fa:	f06f 0001 	mvn.w	r0, #1
 80110fe:	e7f8      	b.n	80110f2 <__ascii_mbtowc+0x16>

08011100 <_Balloc>:
 8011100:	b570      	push	{r4, r5, r6, lr}
 8011102:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8011104:	4604      	mov	r4, r0
 8011106:	460d      	mov	r5, r1
 8011108:	b976      	cbnz	r6, 8011128 <_Balloc+0x28>
 801110a:	2010      	movs	r0, #16
 801110c:	f7ff ffde 	bl	80110cc <malloc>
 8011110:	4602      	mov	r2, r0
 8011112:	6260      	str	r0, [r4, #36]	; 0x24
 8011114:	b920      	cbnz	r0, 8011120 <_Balloc+0x20>
 8011116:	4b18      	ldr	r3, [pc, #96]	; (8011178 <_Balloc+0x78>)
 8011118:	4818      	ldr	r0, [pc, #96]	; (801117c <_Balloc+0x7c>)
 801111a:	2166      	movs	r1, #102	; 0x66
 801111c:	f000 ff3e 	bl	8011f9c <__assert_func>
 8011120:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011124:	6006      	str	r6, [r0, #0]
 8011126:	60c6      	str	r6, [r0, #12]
 8011128:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801112a:	68f3      	ldr	r3, [r6, #12]
 801112c:	b183      	cbz	r3, 8011150 <_Balloc+0x50>
 801112e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011130:	68db      	ldr	r3, [r3, #12]
 8011132:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8011136:	b9b8      	cbnz	r0, 8011168 <_Balloc+0x68>
 8011138:	2101      	movs	r1, #1
 801113a:	fa01 f605 	lsl.w	r6, r1, r5
 801113e:	1d72      	adds	r2, r6, #5
 8011140:	0092      	lsls	r2, r2, #2
 8011142:	4620      	mov	r0, r4
 8011144:	f000 fc9d 	bl	8011a82 <_calloc_r>
 8011148:	b160      	cbz	r0, 8011164 <_Balloc+0x64>
 801114a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801114e:	e00e      	b.n	801116e <_Balloc+0x6e>
 8011150:	2221      	movs	r2, #33	; 0x21
 8011152:	2104      	movs	r1, #4
 8011154:	4620      	mov	r0, r4
 8011156:	f000 fc94 	bl	8011a82 <_calloc_r>
 801115a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801115c:	60f0      	str	r0, [r6, #12]
 801115e:	68db      	ldr	r3, [r3, #12]
 8011160:	2b00      	cmp	r3, #0
 8011162:	d1e4      	bne.n	801112e <_Balloc+0x2e>
 8011164:	2000      	movs	r0, #0
 8011166:	bd70      	pop	{r4, r5, r6, pc}
 8011168:	6802      	ldr	r2, [r0, #0]
 801116a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801116e:	2300      	movs	r3, #0
 8011170:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011174:	e7f7      	b.n	8011166 <_Balloc+0x66>
 8011176:	bf00      	nop
 8011178:	08012f2e 	.word	0x08012f2e
 801117c:	0801302c 	.word	0x0801302c

08011180 <_Bfree>:
 8011180:	b570      	push	{r4, r5, r6, lr}
 8011182:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8011184:	4605      	mov	r5, r0
 8011186:	460c      	mov	r4, r1
 8011188:	b976      	cbnz	r6, 80111a8 <_Bfree+0x28>
 801118a:	2010      	movs	r0, #16
 801118c:	f7ff ff9e 	bl	80110cc <malloc>
 8011190:	4602      	mov	r2, r0
 8011192:	6268      	str	r0, [r5, #36]	; 0x24
 8011194:	b920      	cbnz	r0, 80111a0 <_Bfree+0x20>
 8011196:	4b09      	ldr	r3, [pc, #36]	; (80111bc <_Bfree+0x3c>)
 8011198:	4809      	ldr	r0, [pc, #36]	; (80111c0 <_Bfree+0x40>)
 801119a:	218a      	movs	r1, #138	; 0x8a
 801119c:	f000 fefe 	bl	8011f9c <__assert_func>
 80111a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80111a4:	6006      	str	r6, [r0, #0]
 80111a6:	60c6      	str	r6, [r0, #12]
 80111a8:	b13c      	cbz	r4, 80111ba <_Bfree+0x3a>
 80111aa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80111ac:	6862      	ldr	r2, [r4, #4]
 80111ae:	68db      	ldr	r3, [r3, #12]
 80111b0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80111b4:	6021      	str	r1, [r4, #0]
 80111b6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80111ba:	bd70      	pop	{r4, r5, r6, pc}
 80111bc:	08012f2e 	.word	0x08012f2e
 80111c0:	0801302c 	.word	0x0801302c

080111c4 <__multadd>:
 80111c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80111c8:	690d      	ldr	r5, [r1, #16]
 80111ca:	4607      	mov	r7, r0
 80111cc:	460c      	mov	r4, r1
 80111ce:	461e      	mov	r6, r3
 80111d0:	f101 0c14 	add.w	ip, r1, #20
 80111d4:	2000      	movs	r0, #0
 80111d6:	f8dc 3000 	ldr.w	r3, [ip]
 80111da:	b299      	uxth	r1, r3
 80111dc:	fb02 6101 	mla	r1, r2, r1, r6
 80111e0:	0c1e      	lsrs	r6, r3, #16
 80111e2:	0c0b      	lsrs	r3, r1, #16
 80111e4:	fb02 3306 	mla	r3, r2, r6, r3
 80111e8:	b289      	uxth	r1, r1
 80111ea:	3001      	adds	r0, #1
 80111ec:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80111f0:	4285      	cmp	r5, r0
 80111f2:	f84c 1b04 	str.w	r1, [ip], #4
 80111f6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80111fa:	dcec      	bgt.n	80111d6 <__multadd+0x12>
 80111fc:	b30e      	cbz	r6, 8011242 <__multadd+0x7e>
 80111fe:	68a3      	ldr	r3, [r4, #8]
 8011200:	42ab      	cmp	r3, r5
 8011202:	dc19      	bgt.n	8011238 <__multadd+0x74>
 8011204:	6861      	ldr	r1, [r4, #4]
 8011206:	4638      	mov	r0, r7
 8011208:	3101      	adds	r1, #1
 801120a:	f7ff ff79 	bl	8011100 <_Balloc>
 801120e:	4680      	mov	r8, r0
 8011210:	b928      	cbnz	r0, 801121e <__multadd+0x5a>
 8011212:	4602      	mov	r2, r0
 8011214:	4b0c      	ldr	r3, [pc, #48]	; (8011248 <__multadd+0x84>)
 8011216:	480d      	ldr	r0, [pc, #52]	; (801124c <__multadd+0x88>)
 8011218:	21b5      	movs	r1, #181	; 0xb5
 801121a:	f000 febf 	bl	8011f9c <__assert_func>
 801121e:	6922      	ldr	r2, [r4, #16]
 8011220:	3202      	adds	r2, #2
 8011222:	f104 010c 	add.w	r1, r4, #12
 8011226:	0092      	lsls	r2, r2, #2
 8011228:	300c      	adds	r0, #12
 801122a:	f7fc fff7 	bl	800e21c <memcpy>
 801122e:	4621      	mov	r1, r4
 8011230:	4638      	mov	r0, r7
 8011232:	f7ff ffa5 	bl	8011180 <_Bfree>
 8011236:	4644      	mov	r4, r8
 8011238:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801123c:	3501      	adds	r5, #1
 801123e:	615e      	str	r6, [r3, #20]
 8011240:	6125      	str	r5, [r4, #16]
 8011242:	4620      	mov	r0, r4
 8011244:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011248:	08012fa0 	.word	0x08012fa0
 801124c:	0801302c 	.word	0x0801302c

08011250 <__s2b>:
 8011250:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011254:	460c      	mov	r4, r1
 8011256:	4615      	mov	r5, r2
 8011258:	461f      	mov	r7, r3
 801125a:	2209      	movs	r2, #9
 801125c:	3308      	adds	r3, #8
 801125e:	4606      	mov	r6, r0
 8011260:	fb93 f3f2 	sdiv	r3, r3, r2
 8011264:	2100      	movs	r1, #0
 8011266:	2201      	movs	r2, #1
 8011268:	429a      	cmp	r2, r3
 801126a:	db09      	blt.n	8011280 <__s2b+0x30>
 801126c:	4630      	mov	r0, r6
 801126e:	f7ff ff47 	bl	8011100 <_Balloc>
 8011272:	b940      	cbnz	r0, 8011286 <__s2b+0x36>
 8011274:	4602      	mov	r2, r0
 8011276:	4b19      	ldr	r3, [pc, #100]	; (80112dc <__s2b+0x8c>)
 8011278:	4819      	ldr	r0, [pc, #100]	; (80112e0 <__s2b+0x90>)
 801127a:	21ce      	movs	r1, #206	; 0xce
 801127c:	f000 fe8e 	bl	8011f9c <__assert_func>
 8011280:	0052      	lsls	r2, r2, #1
 8011282:	3101      	adds	r1, #1
 8011284:	e7f0      	b.n	8011268 <__s2b+0x18>
 8011286:	9b08      	ldr	r3, [sp, #32]
 8011288:	6143      	str	r3, [r0, #20]
 801128a:	2d09      	cmp	r5, #9
 801128c:	f04f 0301 	mov.w	r3, #1
 8011290:	6103      	str	r3, [r0, #16]
 8011292:	dd16      	ble.n	80112c2 <__s2b+0x72>
 8011294:	f104 0909 	add.w	r9, r4, #9
 8011298:	46c8      	mov	r8, r9
 801129a:	442c      	add	r4, r5
 801129c:	f818 3b01 	ldrb.w	r3, [r8], #1
 80112a0:	4601      	mov	r1, r0
 80112a2:	3b30      	subs	r3, #48	; 0x30
 80112a4:	220a      	movs	r2, #10
 80112a6:	4630      	mov	r0, r6
 80112a8:	f7ff ff8c 	bl	80111c4 <__multadd>
 80112ac:	45a0      	cmp	r8, r4
 80112ae:	d1f5      	bne.n	801129c <__s2b+0x4c>
 80112b0:	f1a5 0408 	sub.w	r4, r5, #8
 80112b4:	444c      	add	r4, r9
 80112b6:	1b2d      	subs	r5, r5, r4
 80112b8:	1963      	adds	r3, r4, r5
 80112ba:	42bb      	cmp	r3, r7
 80112bc:	db04      	blt.n	80112c8 <__s2b+0x78>
 80112be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80112c2:	340a      	adds	r4, #10
 80112c4:	2509      	movs	r5, #9
 80112c6:	e7f6      	b.n	80112b6 <__s2b+0x66>
 80112c8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80112cc:	4601      	mov	r1, r0
 80112ce:	3b30      	subs	r3, #48	; 0x30
 80112d0:	220a      	movs	r2, #10
 80112d2:	4630      	mov	r0, r6
 80112d4:	f7ff ff76 	bl	80111c4 <__multadd>
 80112d8:	e7ee      	b.n	80112b8 <__s2b+0x68>
 80112da:	bf00      	nop
 80112dc:	08012fa0 	.word	0x08012fa0
 80112e0:	0801302c 	.word	0x0801302c

080112e4 <__hi0bits>:
 80112e4:	0c03      	lsrs	r3, r0, #16
 80112e6:	041b      	lsls	r3, r3, #16
 80112e8:	b9d3      	cbnz	r3, 8011320 <__hi0bits+0x3c>
 80112ea:	0400      	lsls	r0, r0, #16
 80112ec:	2310      	movs	r3, #16
 80112ee:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80112f2:	bf04      	itt	eq
 80112f4:	0200      	lsleq	r0, r0, #8
 80112f6:	3308      	addeq	r3, #8
 80112f8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80112fc:	bf04      	itt	eq
 80112fe:	0100      	lsleq	r0, r0, #4
 8011300:	3304      	addeq	r3, #4
 8011302:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8011306:	bf04      	itt	eq
 8011308:	0080      	lsleq	r0, r0, #2
 801130a:	3302      	addeq	r3, #2
 801130c:	2800      	cmp	r0, #0
 801130e:	db05      	blt.n	801131c <__hi0bits+0x38>
 8011310:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8011314:	f103 0301 	add.w	r3, r3, #1
 8011318:	bf08      	it	eq
 801131a:	2320      	moveq	r3, #32
 801131c:	4618      	mov	r0, r3
 801131e:	4770      	bx	lr
 8011320:	2300      	movs	r3, #0
 8011322:	e7e4      	b.n	80112ee <__hi0bits+0xa>

08011324 <__lo0bits>:
 8011324:	6803      	ldr	r3, [r0, #0]
 8011326:	f013 0207 	ands.w	r2, r3, #7
 801132a:	4601      	mov	r1, r0
 801132c:	d00b      	beq.n	8011346 <__lo0bits+0x22>
 801132e:	07da      	lsls	r2, r3, #31
 8011330:	d423      	bmi.n	801137a <__lo0bits+0x56>
 8011332:	0798      	lsls	r0, r3, #30
 8011334:	bf49      	itett	mi
 8011336:	085b      	lsrmi	r3, r3, #1
 8011338:	089b      	lsrpl	r3, r3, #2
 801133a:	2001      	movmi	r0, #1
 801133c:	600b      	strmi	r3, [r1, #0]
 801133e:	bf5c      	itt	pl
 8011340:	600b      	strpl	r3, [r1, #0]
 8011342:	2002      	movpl	r0, #2
 8011344:	4770      	bx	lr
 8011346:	b298      	uxth	r0, r3
 8011348:	b9a8      	cbnz	r0, 8011376 <__lo0bits+0x52>
 801134a:	0c1b      	lsrs	r3, r3, #16
 801134c:	2010      	movs	r0, #16
 801134e:	b2da      	uxtb	r2, r3
 8011350:	b90a      	cbnz	r2, 8011356 <__lo0bits+0x32>
 8011352:	3008      	adds	r0, #8
 8011354:	0a1b      	lsrs	r3, r3, #8
 8011356:	071a      	lsls	r2, r3, #28
 8011358:	bf04      	itt	eq
 801135a:	091b      	lsreq	r3, r3, #4
 801135c:	3004      	addeq	r0, #4
 801135e:	079a      	lsls	r2, r3, #30
 8011360:	bf04      	itt	eq
 8011362:	089b      	lsreq	r3, r3, #2
 8011364:	3002      	addeq	r0, #2
 8011366:	07da      	lsls	r2, r3, #31
 8011368:	d403      	bmi.n	8011372 <__lo0bits+0x4e>
 801136a:	085b      	lsrs	r3, r3, #1
 801136c:	f100 0001 	add.w	r0, r0, #1
 8011370:	d005      	beq.n	801137e <__lo0bits+0x5a>
 8011372:	600b      	str	r3, [r1, #0]
 8011374:	4770      	bx	lr
 8011376:	4610      	mov	r0, r2
 8011378:	e7e9      	b.n	801134e <__lo0bits+0x2a>
 801137a:	2000      	movs	r0, #0
 801137c:	4770      	bx	lr
 801137e:	2020      	movs	r0, #32
 8011380:	4770      	bx	lr
	...

08011384 <__i2b>:
 8011384:	b510      	push	{r4, lr}
 8011386:	460c      	mov	r4, r1
 8011388:	2101      	movs	r1, #1
 801138a:	f7ff feb9 	bl	8011100 <_Balloc>
 801138e:	4602      	mov	r2, r0
 8011390:	b928      	cbnz	r0, 801139e <__i2b+0x1a>
 8011392:	4b05      	ldr	r3, [pc, #20]	; (80113a8 <__i2b+0x24>)
 8011394:	4805      	ldr	r0, [pc, #20]	; (80113ac <__i2b+0x28>)
 8011396:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801139a:	f000 fdff 	bl	8011f9c <__assert_func>
 801139e:	2301      	movs	r3, #1
 80113a0:	6144      	str	r4, [r0, #20]
 80113a2:	6103      	str	r3, [r0, #16]
 80113a4:	bd10      	pop	{r4, pc}
 80113a6:	bf00      	nop
 80113a8:	08012fa0 	.word	0x08012fa0
 80113ac:	0801302c 	.word	0x0801302c

080113b0 <__multiply>:
 80113b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80113b4:	4691      	mov	r9, r2
 80113b6:	690a      	ldr	r2, [r1, #16]
 80113b8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80113bc:	429a      	cmp	r2, r3
 80113be:	bfb8      	it	lt
 80113c0:	460b      	movlt	r3, r1
 80113c2:	460c      	mov	r4, r1
 80113c4:	bfbc      	itt	lt
 80113c6:	464c      	movlt	r4, r9
 80113c8:	4699      	movlt	r9, r3
 80113ca:	6927      	ldr	r7, [r4, #16]
 80113cc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80113d0:	68a3      	ldr	r3, [r4, #8]
 80113d2:	6861      	ldr	r1, [r4, #4]
 80113d4:	eb07 060a 	add.w	r6, r7, sl
 80113d8:	42b3      	cmp	r3, r6
 80113da:	b085      	sub	sp, #20
 80113dc:	bfb8      	it	lt
 80113de:	3101      	addlt	r1, #1
 80113e0:	f7ff fe8e 	bl	8011100 <_Balloc>
 80113e4:	b930      	cbnz	r0, 80113f4 <__multiply+0x44>
 80113e6:	4602      	mov	r2, r0
 80113e8:	4b44      	ldr	r3, [pc, #272]	; (80114fc <__multiply+0x14c>)
 80113ea:	4845      	ldr	r0, [pc, #276]	; (8011500 <__multiply+0x150>)
 80113ec:	f240 115d 	movw	r1, #349	; 0x15d
 80113f0:	f000 fdd4 	bl	8011f9c <__assert_func>
 80113f4:	f100 0514 	add.w	r5, r0, #20
 80113f8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80113fc:	462b      	mov	r3, r5
 80113fe:	2200      	movs	r2, #0
 8011400:	4543      	cmp	r3, r8
 8011402:	d321      	bcc.n	8011448 <__multiply+0x98>
 8011404:	f104 0314 	add.w	r3, r4, #20
 8011408:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801140c:	f109 0314 	add.w	r3, r9, #20
 8011410:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8011414:	9202      	str	r2, [sp, #8]
 8011416:	1b3a      	subs	r2, r7, r4
 8011418:	3a15      	subs	r2, #21
 801141a:	f022 0203 	bic.w	r2, r2, #3
 801141e:	3204      	adds	r2, #4
 8011420:	f104 0115 	add.w	r1, r4, #21
 8011424:	428f      	cmp	r7, r1
 8011426:	bf38      	it	cc
 8011428:	2204      	movcc	r2, #4
 801142a:	9201      	str	r2, [sp, #4]
 801142c:	9a02      	ldr	r2, [sp, #8]
 801142e:	9303      	str	r3, [sp, #12]
 8011430:	429a      	cmp	r2, r3
 8011432:	d80c      	bhi.n	801144e <__multiply+0x9e>
 8011434:	2e00      	cmp	r6, #0
 8011436:	dd03      	ble.n	8011440 <__multiply+0x90>
 8011438:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801143c:	2b00      	cmp	r3, #0
 801143e:	d05a      	beq.n	80114f6 <__multiply+0x146>
 8011440:	6106      	str	r6, [r0, #16]
 8011442:	b005      	add	sp, #20
 8011444:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011448:	f843 2b04 	str.w	r2, [r3], #4
 801144c:	e7d8      	b.n	8011400 <__multiply+0x50>
 801144e:	f8b3 a000 	ldrh.w	sl, [r3]
 8011452:	f1ba 0f00 	cmp.w	sl, #0
 8011456:	d024      	beq.n	80114a2 <__multiply+0xf2>
 8011458:	f104 0e14 	add.w	lr, r4, #20
 801145c:	46a9      	mov	r9, r5
 801145e:	f04f 0c00 	mov.w	ip, #0
 8011462:	f85e 2b04 	ldr.w	r2, [lr], #4
 8011466:	f8d9 1000 	ldr.w	r1, [r9]
 801146a:	fa1f fb82 	uxth.w	fp, r2
 801146e:	b289      	uxth	r1, r1
 8011470:	fb0a 110b 	mla	r1, sl, fp, r1
 8011474:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8011478:	f8d9 2000 	ldr.w	r2, [r9]
 801147c:	4461      	add	r1, ip
 801147e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8011482:	fb0a c20b 	mla	r2, sl, fp, ip
 8011486:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801148a:	b289      	uxth	r1, r1
 801148c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8011490:	4577      	cmp	r7, lr
 8011492:	f849 1b04 	str.w	r1, [r9], #4
 8011496:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801149a:	d8e2      	bhi.n	8011462 <__multiply+0xb2>
 801149c:	9a01      	ldr	r2, [sp, #4]
 801149e:	f845 c002 	str.w	ip, [r5, r2]
 80114a2:	9a03      	ldr	r2, [sp, #12]
 80114a4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80114a8:	3304      	adds	r3, #4
 80114aa:	f1b9 0f00 	cmp.w	r9, #0
 80114ae:	d020      	beq.n	80114f2 <__multiply+0x142>
 80114b0:	6829      	ldr	r1, [r5, #0]
 80114b2:	f104 0c14 	add.w	ip, r4, #20
 80114b6:	46ae      	mov	lr, r5
 80114b8:	f04f 0a00 	mov.w	sl, #0
 80114bc:	f8bc b000 	ldrh.w	fp, [ip]
 80114c0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80114c4:	fb09 220b 	mla	r2, r9, fp, r2
 80114c8:	4492      	add	sl, r2
 80114ca:	b289      	uxth	r1, r1
 80114cc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80114d0:	f84e 1b04 	str.w	r1, [lr], #4
 80114d4:	f85c 2b04 	ldr.w	r2, [ip], #4
 80114d8:	f8be 1000 	ldrh.w	r1, [lr]
 80114dc:	0c12      	lsrs	r2, r2, #16
 80114de:	fb09 1102 	mla	r1, r9, r2, r1
 80114e2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80114e6:	4567      	cmp	r7, ip
 80114e8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80114ec:	d8e6      	bhi.n	80114bc <__multiply+0x10c>
 80114ee:	9a01      	ldr	r2, [sp, #4]
 80114f0:	50a9      	str	r1, [r5, r2]
 80114f2:	3504      	adds	r5, #4
 80114f4:	e79a      	b.n	801142c <__multiply+0x7c>
 80114f6:	3e01      	subs	r6, #1
 80114f8:	e79c      	b.n	8011434 <__multiply+0x84>
 80114fa:	bf00      	nop
 80114fc:	08012fa0 	.word	0x08012fa0
 8011500:	0801302c 	.word	0x0801302c

08011504 <__pow5mult>:
 8011504:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011508:	4615      	mov	r5, r2
 801150a:	f012 0203 	ands.w	r2, r2, #3
 801150e:	4606      	mov	r6, r0
 8011510:	460f      	mov	r7, r1
 8011512:	d007      	beq.n	8011524 <__pow5mult+0x20>
 8011514:	4c25      	ldr	r4, [pc, #148]	; (80115ac <__pow5mult+0xa8>)
 8011516:	3a01      	subs	r2, #1
 8011518:	2300      	movs	r3, #0
 801151a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801151e:	f7ff fe51 	bl	80111c4 <__multadd>
 8011522:	4607      	mov	r7, r0
 8011524:	10ad      	asrs	r5, r5, #2
 8011526:	d03d      	beq.n	80115a4 <__pow5mult+0xa0>
 8011528:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801152a:	b97c      	cbnz	r4, 801154c <__pow5mult+0x48>
 801152c:	2010      	movs	r0, #16
 801152e:	f7ff fdcd 	bl	80110cc <malloc>
 8011532:	4602      	mov	r2, r0
 8011534:	6270      	str	r0, [r6, #36]	; 0x24
 8011536:	b928      	cbnz	r0, 8011544 <__pow5mult+0x40>
 8011538:	4b1d      	ldr	r3, [pc, #116]	; (80115b0 <__pow5mult+0xac>)
 801153a:	481e      	ldr	r0, [pc, #120]	; (80115b4 <__pow5mult+0xb0>)
 801153c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8011540:	f000 fd2c 	bl	8011f9c <__assert_func>
 8011544:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011548:	6004      	str	r4, [r0, #0]
 801154a:	60c4      	str	r4, [r0, #12]
 801154c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8011550:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011554:	b94c      	cbnz	r4, 801156a <__pow5mult+0x66>
 8011556:	f240 2171 	movw	r1, #625	; 0x271
 801155a:	4630      	mov	r0, r6
 801155c:	f7ff ff12 	bl	8011384 <__i2b>
 8011560:	2300      	movs	r3, #0
 8011562:	f8c8 0008 	str.w	r0, [r8, #8]
 8011566:	4604      	mov	r4, r0
 8011568:	6003      	str	r3, [r0, #0]
 801156a:	f04f 0900 	mov.w	r9, #0
 801156e:	07eb      	lsls	r3, r5, #31
 8011570:	d50a      	bpl.n	8011588 <__pow5mult+0x84>
 8011572:	4639      	mov	r1, r7
 8011574:	4622      	mov	r2, r4
 8011576:	4630      	mov	r0, r6
 8011578:	f7ff ff1a 	bl	80113b0 <__multiply>
 801157c:	4639      	mov	r1, r7
 801157e:	4680      	mov	r8, r0
 8011580:	4630      	mov	r0, r6
 8011582:	f7ff fdfd 	bl	8011180 <_Bfree>
 8011586:	4647      	mov	r7, r8
 8011588:	106d      	asrs	r5, r5, #1
 801158a:	d00b      	beq.n	80115a4 <__pow5mult+0xa0>
 801158c:	6820      	ldr	r0, [r4, #0]
 801158e:	b938      	cbnz	r0, 80115a0 <__pow5mult+0x9c>
 8011590:	4622      	mov	r2, r4
 8011592:	4621      	mov	r1, r4
 8011594:	4630      	mov	r0, r6
 8011596:	f7ff ff0b 	bl	80113b0 <__multiply>
 801159a:	6020      	str	r0, [r4, #0]
 801159c:	f8c0 9000 	str.w	r9, [r0]
 80115a0:	4604      	mov	r4, r0
 80115a2:	e7e4      	b.n	801156e <__pow5mult+0x6a>
 80115a4:	4638      	mov	r0, r7
 80115a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80115aa:	bf00      	nop
 80115ac:	08013178 	.word	0x08013178
 80115b0:	08012f2e 	.word	0x08012f2e
 80115b4:	0801302c 	.word	0x0801302c

080115b8 <__lshift>:
 80115b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80115bc:	460c      	mov	r4, r1
 80115be:	6849      	ldr	r1, [r1, #4]
 80115c0:	6923      	ldr	r3, [r4, #16]
 80115c2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80115c6:	68a3      	ldr	r3, [r4, #8]
 80115c8:	4607      	mov	r7, r0
 80115ca:	4691      	mov	r9, r2
 80115cc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80115d0:	f108 0601 	add.w	r6, r8, #1
 80115d4:	42b3      	cmp	r3, r6
 80115d6:	db0b      	blt.n	80115f0 <__lshift+0x38>
 80115d8:	4638      	mov	r0, r7
 80115da:	f7ff fd91 	bl	8011100 <_Balloc>
 80115de:	4605      	mov	r5, r0
 80115e0:	b948      	cbnz	r0, 80115f6 <__lshift+0x3e>
 80115e2:	4602      	mov	r2, r0
 80115e4:	4b2a      	ldr	r3, [pc, #168]	; (8011690 <__lshift+0xd8>)
 80115e6:	482b      	ldr	r0, [pc, #172]	; (8011694 <__lshift+0xdc>)
 80115e8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80115ec:	f000 fcd6 	bl	8011f9c <__assert_func>
 80115f0:	3101      	adds	r1, #1
 80115f2:	005b      	lsls	r3, r3, #1
 80115f4:	e7ee      	b.n	80115d4 <__lshift+0x1c>
 80115f6:	2300      	movs	r3, #0
 80115f8:	f100 0114 	add.w	r1, r0, #20
 80115fc:	f100 0210 	add.w	r2, r0, #16
 8011600:	4618      	mov	r0, r3
 8011602:	4553      	cmp	r3, sl
 8011604:	db37      	blt.n	8011676 <__lshift+0xbe>
 8011606:	6920      	ldr	r0, [r4, #16]
 8011608:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801160c:	f104 0314 	add.w	r3, r4, #20
 8011610:	f019 091f 	ands.w	r9, r9, #31
 8011614:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011618:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801161c:	d02f      	beq.n	801167e <__lshift+0xc6>
 801161e:	f1c9 0e20 	rsb	lr, r9, #32
 8011622:	468a      	mov	sl, r1
 8011624:	f04f 0c00 	mov.w	ip, #0
 8011628:	681a      	ldr	r2, [r3, #0]
 801162a:	fa02 f209 	lsl.w	r2, r2, r9
 801162e:	ea42 020c 	orr.w	r2, r2, ip
 8011632:	f84a 2b04 	str.w	r2, [sl], #4
 8011636:	f853 2b04 	ldr.w	r2, [r3], #4
 801163a:	4298      	cmp	r0, r3
 801163c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8011640:	d8f2      	bhi.n	8011628 <__lshift+0x70>
 8011642:	1b03      	subs	r3, r0, r4
 8011644:	3b15      	subs	r3, #21
 8011646:	f023 0303 	bic.w	r3, r3, #3
 801164a:	3304      	adds	r3, #4
 801164c:	f104 0215 	add.w	r2, r4, #21
 8011650:	4290      	cmp	r0, r2
 8011652:	bf38      	it	cc
 8011654:	2304      	movcc	r3, #4
 8011656:	f841 c003 	str.w	ip, [r1, r3]
 801165a:	f1bc 0f00 	cmp.w	ip, #0
 801165e:	d001      	beq.n	8011664 <__lshift+0xac>
 8011660:	f108 0602 	add.w	r6, r8, #2
 8011664:	3e01      	subs	r6, #1
 8011666:	4638      	mov	r0, r7
 8011668:	612e      	str	r6, [r5, #16]
 801166a:	4621      	mov	r1, r4
 801166c:	f7ff fd88 	bl	8011180 <_Bfree>
 8011670:	4628      	mov	r0, r5
 8011672:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011676:	f842 0f04 	str.w	r0, [r2, #4]!
 801167a:	3301      	adds	r3, #1
 801167c:	e7c1      	b.n	8011602 <__lshift+0x4a>
 801167e:	3904      	subs	r1, #4
 8011680:	f853 2b04 	ldr.w	r2, [r3], #4
 8011684:	f841 2f04 	str.w	r2, [r1, #4]!
 8011688:	4298      	cmp	r0, r3
 801168a:	d8f9      	bhi.n	8011680 <__lshift+0xc8>
 801168c:	e7ea      	b.n	8011664 <__lshift+0xac>
 801168e:	bf00      	nop
 8011690:	08012fa0 	.word	0x08012fa0
 8011694:	0801302c 	.word	0x0801302c

08011698 <__mcmp>:
 8011698:	b530      	push	{r4, r5, lr}
 801169a:	6902      	ldr	r2, [r0, #16]
 801169c:	690c      	ldr	r4, [r1, #16]
 801169e:	1b12      	subs	r2, r2, r4
 80116a0:	d10e      	bne.n	80116c0 <__mcmp+0x28>
 80116a2:	f100 0314 	add.w	r3, r0, #20
 80116a6:	3114      	adds	r1, #20
 80116a8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80116ac:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80116b0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80116b4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80116b8:	42a5      	cmp	r5, r4
 80116ba:	d003      	beq.n	80116c4 <__mcmp+0x2c>
 80116bc:	d305      	bcc.n	80116ca <__mcmp+0x32>
 80116be:	2201      	movs	r2, #1
 80116c0:	4610      	mov	r0, r2
 80116c2:	bd30      	pop	{r4, r5, pc}
 80116c4:	4283      	cmp	r3, r0
 80116c6:	d3f3      	bcc.n	80116b0 <__mcmp+0x18>
 80116c8:	e7fa      	b.n	80116c0 <__mcmp+0x28>
 80116ca:	f04f 32ff 	mov.w	r2, #4294967295
 80116ce:	e7f7      	b.n	80116c0 <__mcmp+0x28>

080116d0 <__mdiff>:
 80116d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80116d4:	460c      	mov	r4, r1
 80116d6:	4606      	mov	r6, r0
 80116d8:	4611      	mov	r1, r2
 80116da:	4620      	mov	r0, r4
 80116dc:	4690      	mov	r8, r2
 80116de:	f7ff ffdb 	bl	8011698 <__mcmp>
 80116e2:	1e05      	subs	r5, r0, #0
 80116e4:	d110      	bne.n	8011708 <__mdiff+0x38>
 80116e6:	4629      	mov	r1, r5
 80116e8:	4630      	mov	r0, r6
 80116ea:	f7ff fd09 	bl	8011100 <_Balloc>
 80116ee:	b930      	cbnz	r0, 80116fe <__mdiff+0x2e>
 80116f0:	4b3a      	ldr	r3, [pc, #232]	; (80117dc <__mdiff+0x10c>)
 80116f2:	4602      	mov	r2, r0
 80116f4:	f240 2132 	movw	r1, #562	; 0x232
 80116f8:	4839      	ldr	r0, [pc, #228]	; (80117e0 <__mdiff+0x110>)
 80116fa:	f000 fc4f 	bl	8011f9c <__assert_func>
 80116fe:	2301      	movs	r3, #1
 8011700:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011704:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011708:	bfa4      	itt	ge
 801170a:	4643      	movge	r3, r8
 801170c:	46a0      	movge	r8, r4
 801170e:	4630      	mov	r0, r6
 8011710:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8011714:	bfa6      	itte	ge
 8011716:	461c      	movge	r4, r3
 8011718:	2500      	movge	r5, #0
 801171a:	2501      	movlt	r5, #1
 801171c:	f7ff fcf0 	bl	8011100 <_Balloc>
 8011720:	b920      	cbnz	r0, 801172c <__mdiff+0x5c>
 8011722:	4b2e      	ldr	r3, [pc, #184]	; (80117dc <__mdiff+0x10c>)
 8011724:	4602      	mov	r2, r0
 8011726:	f44f 7110 	mov.w	r1, #576	; 0x240
 801172a:	e7e5      	b.n	80116f8 <__mdiff+0x28>
 801172c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8011730:	6926      	ldr	r6, [r4, #16]
 8011732:	60c5      	str	r5, [r0, #12]
 8011734:	f104 0914 	add.w	r9, r4, #20
 8011738:	f108 0514 	add.w	r5, r8, #20
 801173c:	f100 0e14 	add.w	lr, r0, #20
 8011740:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8011744:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8011748:	f108 0210 	add.w	r2, r8, #16
 801174c:	46f2      	mov	sl, lr
 801174e:	2100      	movs	r1, #0
 8011750:	f859 3b04 	ldr.w	r3, [r9], #4
 8011754:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8011758:	fa1f f883 	uxth.w	r8, r3
 801175c:	fa11 f18b 	uxtah	r1, r1, fp
 8011760:	0c1b      	lsrs	r3, r3, #16
 8011762:	eba1 0808 	sub.w	r8, r1, r8
 8011766:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801176a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801176e:	fa1f f888 	uxth.w	r8, r8
 8011772:	1419      	asrs	r1, r3, #16
 8011774:	454e      	cmp	r6, r9
 8011776:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801177a:	f84a 3b04 	str.w	r3, [sl], #4
 801177e:	d8e7      	bhi.n	8011750 <__mdiff+0x80>
 8011780:	1b33      	subs	r3, r6, r4
 8011782:	3b15      	subs	r3, #21
 8011784:	f023 0303 	bic.w	r3, r3, #3
 8011788:	3304      	adds	r3, #4
 801178a:	3415      	adds	r4, #21
 801178c:	42a6      	cmp	r6, r4
 801178e:	bf38      	it	cc
 8011790:	2304      	movcc	r3, #4
 8011792:	441d      	add	r5, r3
 8011794:	4473      	add	r3, lr
 8011796:	469e      	mov	lr, r3
 8011798:	462e      	mov	r6, r5
 801179a:	4566      	cmp	r6, ip
 801179c:	d30e      	bcc.n	80117bc <__mdiff+0xec>
 801179e:	f10c 0203 	add.w	r2, ip, #3
 80117a2:	1b52      	subs	r2, r2, r5
 80117a4:	f022 0203 	bic.w	r2, r2, #3
 80117a8:	3d03      	subs	r5, #3
 80117aa:	45ac      	cmp	ip, r5
 80117ac:	bf38      	it	cc
 80117ae:	2200      	movcc	r2, #0
 80117b0:	441a      	add	r2, r3
 80117b2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80117b6:	b17b      	cbz	r3, 80117d8 <__mdiff+0x108>
 80117b8:	6107      	str	r7, [r0, #16]
 80117ba:	e7a3      	b.n	8011704 <__mdiff+0x34>
 80117bc:	f856 8b04 	ldr.w	r8, [r6], #4
 80117c0:	fa11 f288 	uxtah	r2, r1, r8
 80117c4:	1414      	asrs	r4, r2, #16
 80117c6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80117ca:	b292      	uxth	r2, r2
 80117cc:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80117d0:	f84e 2b04 	str.w	r2, [lr], #4
 80117d4:	1421      	asrs	r1, r4, #16
 80117d6:	e7e0      	b.n	801179a <__mdiff+0xca>
 80117d8:	3f01      	subs	r7, #1
 80117da:	e7ea      	b.n	80117b2 <__mdiff+0xe2>
 80117dc:	08012fa0 	.word	0x08012fa0
 80117e0:	0801302c 	.word	0x0801302c

080117e4 <__ulp>:
 80117e4:	b082      	sub	sp, #8
 80117e6:	ed8d 0b00 	vstr	d0, [sp]
 80117ea:	9b01      	ldr	r3, [sp, #4]
 80117ec:	4912      	ldr	r1, [pc, #72]	; (8011838 <__ulp+0x54>)
 80117ee:	4019      	ands	r1, r3
 80117f0:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80117f4:	2900      	cmp	r1, #0
 80117f6:	dd05      	ble.n	8011804 <__ulp+0x20>
 80117f8:	2200      	movs	r2, #0
 80117fa:	460b      	mov	r3, r1
 80117fc:	ec43 2b10 	vmov	d0, r2, r3
 8011800:	b002      	add	sp, #8
 8011802:	4770      	bx	lr
 8011804:	4249      	negs	r1, r1
 8011806:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 801180a:	ea4f 5021 	mov.w	r0, r1, asr #20
 801180e:	f04f 0200 	mov.w	r2, #0
 8011812:	f04f 0300 	mov.w	r3, #0
 8011816:	da04      	bge.n	8011822 <__ulp+0x3e>
 8011818:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 801181c:	fa41 f300 	asr.w	r3, r1, r0
 8011820:	e7ec      	b.n	80117fc <__ulp+0x18>
 8011822:	f1a0 0114 	sub.w	r1, r0, #20
 8011826:	291e      	cmp	r1, #30
 8011828:	bfda      	itte	le
 801182a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 801182e:	fa20 f101 	lsrle.w	r1, r0, r1
 8011832:	2101      	movgt	r1, #1
 8011834:	460a      	mov	r2, r1
 8011836:	e7e1      	b.n	80117fc <__ulp+0x18>
 8011838:	7ff00000 	.word	0x7ff00000

0801183c <__b2d>:
 801183c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801183e:	6905      	ldr	r5, [r0, #16]
 8011840:	f100 0714 	add.w	r7, r0, #20
 8011844:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8011848:	1f2e      	subs	r6, r5, #4
 801184a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801184e:	4620      	mov	r0, r4
 8011850:	f7ff fd48 	bl	80112e4 <__hi0bits>
 8011854:	f1c0 0320 	rsb	r3, r0, #32
 8011858:	280a      	cmp	r0, #10
 801185a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 80118d8 <__b2d+0x9c>
 801185e:	600b      	str	r3, [r1, #0]
 8011860:	dc14      	bgt.n	801188c <__b2d+0x50>
 8011862:	f1c0 0e0b 	rsb	lr, r0, #11
 8011866:	fa24 f10e 	lsr.w	r1, r4, lr
 801186a:	42b7      	cmp	r7, r6
 801186c:	ea41 030c 	orr.w	r3, r1, ip
 8011870:	bf34      	ite	cc
 8011872:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8011876:	2100      	movcs	r1, #0
 8011878:	3015      	adds	r0, #21
 801187a:	fa04 f000 	lsl.w	r0, r4, r0
 801187e:	fa21 f10e 	lsr.w	r1, r1, lr
 8011882:	ea40 0201 	orr.w	r2, r0, r1
 8011886:	ec43 2b10 	vmov	d0, r2, r3
 801188a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801188c:	42b7      	cmp	r7, r6
 801188e:	bf3a      	itte	cc
 8011890:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8011894:	f1a5 0608 	subcc.w	r6, r5, #8
 8011898:	2100      	movcs	r1, #0
 801189a:	380b      	subs	r0, #11
 801189c:	d017      	beq.n	80118ce <__b2d+0x92>
 801189e:	f1c0 0c20 	rsb	ip, r0, #32
 80118a2:	fa04 f500 	lsl.w	r5, r4, r0
 80118a6:	42be      	cmp	r6, r7
 80118a8:	fa21 f40c 	lsr.w	r4, r1, ip
 80118ac:	ea45 0504 	orr.w	r5, r5, r4
 80118b0:	bf8c      	ite	hi
 80118b2:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80118b6:	2400      	movls	r4, #0
 80118b8:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80118bc:	fa01 f000 	lsl.w	r0, r1, r0
 80118c0:	fa24 f40c 	lsr.w	r4, r4, ip
 80118c4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80118c8:	ea40 0204 	orr.w	r2, r0, r4
 80118cc:	e7db      	b.n	8011886 <__b2d+0x4a>
 80118ce:	ea44 030c 	orr.w	r3, r4, ip
 80118d2:	460a      	mov	r2, r1
 80118d4:	e7d7      	b.n	8011886 <__b2d+0x4a>
 80118d6:	bf00      	nop
 80118d8:	3ff00000 	.word	0x3ff00000

080118dc <__d2b>:
 80118dc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80118e0:	4689      	mov	r9, r1
 80118e2:	2101      	movs	r1, #1
 80118e4:	ec57 6b10 	vmov	r6, r7, d0
 80118e8:	4690      	mov	r8, r2
 80118ea:	f7ff fc09 	bl	8011100 <_Balloc>
 80118ee:	4604      	mov	r4, r0
 80118f0:	b930      	cbnz	r0, 8011900 <__d2b+0x24>
 80118f2:	4602      	mov	r2, r0
 80118f4:	4b25      	ldr	r3, [pc, #148]	; (801198c <__d2b+0xb0>)
 80118f6:	4826      	ldr	r0, [pc, #152]	; (8011990 <__d2b+0xb4>)
 80118f8:	f240 310a 	movw	r1, #778	; 0x30a
 80118fc:	f000 fb4e 	bl	8011f9c <__assert_func>
 8011900:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8011904:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8011908:	bb35      	cbnz	r5, 8011958 <__d2b+0x7c>
 801190a:	2e00      	cmp	r6, #0
 801190c:	9301      	str	r3, [sp, #4]
 801190e:	d028      	beq.n	8011962 <__d2b+0x86>
 8011910:	4668      	mov	r0, sp
 8011912:	9600      	str	r6, [sp, #0]
 8011914:	f7ff fd06 	bl	8011324 <__lo0bits>
 8011918:	9900      	ldr	r1, [sp, #0]
 801191a:	b300      	cbz	r0, 801195e <__d2b+0x82>
 801191c:	9a01      	ldr	r2, [sp, #4]
 801191e:	f1c0 0320 	rsb	r3, r0, #32
 8011922:	fa02 f303 	lsl.w	r3, r2, r3
 8011926:	430b      	orrs	r3, r1
 8011928:	40c2      	lsrs	r2, r0
 801192a:	6163      	str	r3, [r4, #20]
 801192c:	9201      	str	r2, [sp, #4]
 801192e:	9b01      	ldr	r3, [sp, #4]
 8011930:	61a3      	str	r3, [r4, #24]
 8011932:	2b00      	cmp	r3, #0
 8011934:	bf14      	ite	ne
 8011936:	2202      	movne	r2, #2
 8011938:	2201      	moveq	r2, #1
 801193a:	6122      	str	r2, [r4, #16]
 801193c:	b1d5      	cbz	r5, 8011974 <__d2b+0x98>
 801193e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8011942:	4405      	add	r5, r0
 8011944:	f8c9 5000 	str.w	r5, [r9]
 8011948:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801194c:	f8c8 0000 	str.w	r0, [r8]
 8011950:	4620      	mov	r0, r4
 8011952:	b003      	add	sp, #12
 8011954:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011958:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801195c:	e7d5      	b.n	801190a <__d2b+0x2e>
 801195e:	6161      	str	r1, [r4, #20]
 8011960:	e7e5      	b.n	801192e <__d2b+0x52>
 8011962:	a801      	add	r0, sp, #4
 8011964:	f7ff fcde 	bl	8011324 <__lo0bits>
 8011968:	9b01      	ldr	r3, [sp, #4]
 801196a:	6163      	str	r3, [r4, #20]
 801196c:	2201      	movs	r2, #1
 801196e:	6122      	str	r2, [r4, #16]
 8011970:	3020      	adds	r0, #32
 8011972:	e7e3      	b.n	801193c <__d2b+0x60>
 8011974:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011978:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801197c:	f8c9 0000 	str.w	r0, [r9]
 8011980:	6918      	ldr	r0, [r3, #16]
 8011982:	f7ff fcaf 	bl	80112e4 <__hi0bits>
 8011986:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801198a:	e7df      	b.n	801194c <__d2b+0x70>
 801198c:	08012fa0 	.word	0x08012fa0
 8011990:	0801302c 	.word	0x0801302c

08011994 <__ratio>:
 8011994:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011998:	4688      	mov	r8, r1
 801199a:	4669      	mov	r1, sp
 801199c:	4681      	mov	r9, r0
 801199e:	f7ff ff4d 	bl	801183c <__b2d>
 80119a2:	a901      	add	r1, sp, #4
 80119a4:	4640      	mov	r0, r8
 80119a6:	ec55 4b10 	vmov	r4, r5, d0
 80119aa:	f7ff ff47 	bl	801183c <__b2d>
 80119ae:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80119b2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80119b6:	eba3 0c02 	sub.w	ip, r3, r2
 80119ba:	e9dd 3200 	ldrd	r3, r2, [sp]
 80119be:	1a9b      	subs	r3, r3, r2
 80119c0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80119c4:	ec51 0b10 	vmov	r0, r1, d0
 80119c8:	2b00      	cmp	r3, #0
 80119ca:	bfd6      	itet	le
 80119cc:	460a      	movle	r2, r1
 80119ce:	462a      	movgt	r2, r5
 80119d0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80119d4:	468b      	mov	fp, r1
 80119d6:	462f      	mov	r7, r5
 80119d8:	bfd4      	ite	le
 80119da:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80119de:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80119e2:	4620      	mov	r0, r4
 80119e4:	ee10 2a10 	vmov	r2, s0
 80119e8:	465b      	mov	r3, fp
 80119ea:	4639      	mov	r1, r7
 80119ec:	f7ee ff4e 	bl	800088c <__aeabi_ddiv>
 80119f0:	ec41 0b10 	vmov	d0, r0, r1
 80119f4:	b003      	add	sp, #12
 80119f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080119fa <__copybits>:
 80119fa:	3901      	subs	r1, #1
 80119fc:	b570      	push	{r4, r5, r6, lr}
 80119fe:	1149      	asrs	r1, r1, #5
 8011a00:	6914      	ldr	r4, [r2, #16]
 8011a02:	3101      	adds	r1, #1
 8011a04:	f102 0314 	add.w	r3, r2, #20
 8011a08:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8011a0c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8011a10:	1f05      	subs	r5, r0, #4
 8011a12:	42a3      	cmp	r3, r4
 8011a14:	d30c      	bcc.n	8011a30 <__copybits+0x36>
 8011a16:	1aa3      	subs	r3, r4, r2
 8011a18:	3b11      	subs	r3, #17
 8011a1a:	f023 0303 	bic.w	r3, r3, #3
 8011a1e:	3211      	adds	r2, #17
 8011a20:	42a2      	cmp	r2, r4
 8011a22:	bf88      	it	hi
 8011a24:	2300      	movhi	r3, #0
 8011a26:	4418      	add	r0, r3
 8011a28:	2300      	movs	r3, #0
 8011a2a:	4288      	cmp	r0, r1
 8011a2c:	d305      	bcc.n	8011a3a <__copybits+0x40>
 8011a2e:	bd70      	pop	{r4, r5, r6, pc}
 8011a30:	f853 6b04 	ldr.w	r6, [r3], #4
 8011a34:	f845 6f04 	str.w	r6, [r5, #4]!
 8011a38:	e7eb      	b.n	8011a12 <__copybits+0x18>
 8011a3a:	f840 3b04 	str.w	r3, [r0], #4
 8011a3e:	e7f4      	b.n	8011a2a <__copybits+0x30>

08011a40 <__any_on>:
 8011a40:	f100 0214 	add.w	r2, r0, #20
 8011a44:	6900      	ldr	r0, [r0, #16]
 8011a46:	114b      	asrs	r3, r1, #5
 8011a48:	4298      	cmp	r0, r3
 8011a4a:	b510      	push	{r4, lr}
 8011a4c:	db11      	blt.n	8011a72 <__any_on+0x32>
 8011a4e:	dd0a      	ble.n	8011a66 <__any_on+0x26>
 8011a50:	f011 011f 	ands.w	r1, r1, #31
 8011a54:	d007      	beq.n	8011a66 <__any_on+0x26>
 8011a56:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8011a5a:	fa24 f001 	lsr.w	r0, r4, r1
 8011a5e:	fa00 f101 	lsl.w	r1, r0, r1
 8011a62:	428c      	cmp	r4, r1
 8011a64:	d10b      	bne.n	8011a7e <__any_on+0x3e>
 8011a66:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011a6a:	4293      	cmp	r3, r2
 8011a6c:	d803      	bhi.n	8011a76 <__any_on+0x36>
 8011a6e:	2000      	movs	r0, #0
 8011a70:	bd10      	pop	{r4, pc}
 8011a72:	4603      	mov	r3, r0
 8011a74:	e7f7      	b.n	8011a66 <__any_on+0x26>
 8011a76:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011a7a:	2900      	cmp	r1, #0
 8011a7c:	d0f5      	beq.n	8011a6a <__any_on+0x2a>
 8011a7e:	2001      	movs	r0, #1
 8011a80:	e7f6      	b.n	8011a70 <__any_on+0x30>

08011a82 <_calloc_r>:
 8011a82:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011a84:	fba1 2402 	umull	r2, r4, r1, r2
 8011a88:	b94c      	cbnz	r4, 8011a9e <_calloc_r+0x1c>
 8011a8a:	4611      	mov	r1, r2
 8011a8c:	9201      	str	r2, [sp, #4]
 8011a8e:	f000 f87b 	bl	8011b88 <_malloc_r>
 8011a92:	9a01      	ldr	r2, [sp, #4]
 8011a94:	4605      	mov	r5, r0
 8011a96:	b930      	cbnz	r0, 8011aa6 <_calloc_r+0x24>
 8011a98:	4628      	mov	r0, r5
 8011a9a:	b003      	add	sp, #12
 8011a9c:	bd30      	pop	{r4, r5, pc}
 8011a9e:	220c      	movs	r2, #12
 8011aa0:	6002      	str	r2, [r0, #0]
 8011aa2:	2500      	movs	r5, #0
 8011aa4:	e7f8      	b.n	8011a98 <_calloc_r+0x16>
 8011aa6:	4621      	mov	r1, r4
 8011aa8:	f7fc fbc6 	bl	800e238 <memset>
 8011aac:	e7f4      	b.n	8011a98 <_calloc_r+0x16>
	...

08011ab0 <_free_r>:
 8011ab0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011ab2:	2900      	cmp	r1, #0
 8011ab4:	d044      	beq.n	8011b40 <_free_r+0x90>
 8011ab6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011aba:	9001      	str	r0, [sp, #4]
 8011abc:	2b00      	cmp	r3, #0
 8011abe:	f1a1 0404 	sub.w	r4, r1, #4
 8011ac2:	bfb8      	it	lt
 8011ac4:	18e4      	addlt	r4, r4, r3
 8011ac6:	f000 fab3 	bl	8012030 <__malloc_lock>
 8011aca:	4a1e      	ldr	r2, [pc, #120]	; (8011b44 <_free_r+0x94>)
 8011acc:	9801      	ldr	r0, [sp, #4]
 8011ace:	6813      	ldr	r3, [r2, #0]
 8011ad0:	b933      	cbnz	r3, 8011ae0 <_free_r+0x30>
 8011ad2:	6063      	str	r3, [r4, #4]
 8011ad4:	6014      	str	r4, [r2, #0]
 8011ad6:	b003      	add	sp, #12
 8011ad8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011adc:	f000 baae 	b.w	801203c <__malloc_unlock>
 8011ae0:	42a3      	cmp	r3, r4
 8011ae2:	d908      	bls.n	8011af6 <_free_r+0x46>
 8011ae4:	6825      	ldr	r5, [r4, #0]
 8011ae6:	1961      	adds	r1, r4, r5
 8011ae8:	428b      	cmp	r3, r1
 8011aea:	bf01      	itttt	eq
 8011aec:	6819      	ldreq	r1, [r3, #0]
 8011aee:	685b      	ldreq	r3, [r3, #4]
 8011af0:	1949      	addeq	r1, r1, r5
 8011af2:	6021      	streq	r1, [r4, #0]
 8011af4:	e7ed      	b.n	8011ad2 <_free_r+0x22>
 8011af6:	461a      	mov	r2, r3
 8011af8:	685b      	ldr	r3, [r3, #4]
 8011afa:	b10b      	cbz	r3, 8011b00 <_free_r+0x50>
 8011afc:	42a3      	cmp	r3, r4
 8011afe:	d9fa      	bls.n	8011af6 <_free_r+0x46>
 8011b00:	6811      	ldr	r1, [r2, #0]
 8011b02:	1855      	adds	r5, r2, r1
 8011b04:	42a5      	cmp	r5, r4
 8011b06:	d10b      	bne.n	8011b20 <_free_r+0x70>
 8011b08:	6824      	ldr	r4, [r4, #0]
 8011b0a:	4421      	add	r1, r4
 8011b0c:	1854      	adds	r4, r2, r1
 8011b0e:	42a3      	cmp	r3, r4
 8011b10:	6011      	str	r1, [r2, #0]
 8011b12:	d1e0      	bne.n	8011ad6 <_free_r+0x26>
 8011b14:	681c      	ldr	r4, [r3, #0]
 8011b16:	685b      	ldr	r3, [r3, #4]
 8011b18:	6053      	str	r3, [r2, #4]
 8011b1a:	4421      	add	r1, r4
 8011b1c:	6011      	str	r1, [r2, #0]
 8011b1e:	e7da      	b.n	8011ad6 <_free_r+0x26>
 8011b20:	d902      	bls.n	8011b28 <_free_r+0x78>
 8011b22:	230c      	movs	r3, #12
 8011b24:	6003      	str	r3, [r0, #0]
 8011b26:	e7d6      	b.n	8011ad6 <_free_r+0x26>
 8011b28:	6825      	ldr	r5, [r4, #0]
 8011b2a:	1961      	adds	r1, r4, r5
 8011b2c:	428b      	cmp	r3, r1
 8011b2e:	bf04      	itt	eq
 8011b30:	6819      	ldreq	r1, [r3, #0]
 8011b32:	685b      	ldreq	r3, [r3, #4]
 8011b34:	6063      	str	r3, [r4, #4]
 8011b36:	bf04      	itt	eq
 8011b38:	1949      	addeq	r1, r1, r5
 8011b3a:	6021      	streq	r1, [r4, #0]
 8011b3c:	6054      	str	r4, [r2, #4]
 8011b3e:	e7ca      	b.n	8011ad6 <_free_r+0x26>
 8011b40:	b003      	add	sp, #12
 8011b42:	bd30      	pop	{r4, r5, pc}
 8011b44:	2000075c 	.word	0x2000075c

08011b48 <sbrk_aligned>:
 8011b48:	b570      	push	{r4, r5, r6, lr}
 8011b4a:	4e0e      	ldr	r6, [pc, #56]	; (8011b84 <sbrk_aligned+0x3c>)
 8011b4c:	460c      	mov	r4, r1
 8011b4e:	6831      	ldr	r1, [r6, #0]
 8011b50:	4605      	mov	r5, r0
 8011b52:	b911      	cbnz	r1, 8011b5a <sbrk_aligned+0x12>
 8011b54:	f000 f9f0 	bl	8011f38 <_sbrk_r>
 8011b58:	6030      	str	r0, [r6, #0]
 8011b5a:	4621      	mov	r1, r4
 8011b5c:	4628      	mov	r0, r5
 8011b5e:	f000 f9eb 	bl	8011f38 <_sbrk_r>
 8011b62:	1c43      	adds	r3, r0, #1
 8011b64:	d00a      	beq.n	8011b7c <sbrk_aligned+0x34>
 8011b66:	1cc4      	adds	r4, r0, #3
 8011b68:	f024 0403 	bic.w	r4, r4, #3
 8011b6c:	42a0      	cmp	r0, r4
 8011b6e:	d007      	beq.n	8011b80 <sbrk_aligned+0x38>
 8011b70:	1a21      	subs	r1, r4, r0
 8011b72:	4628      	mov	r0, r5
 8011b74:	f000 f9e0 	bl	8011f38 <_sbrk_r>
 8011b78:	3001      	adds	r0, #1
 8011b7a:	d101      	bne.n	8011b80 <sbrk_aligned+0x38>
 8011b7c:	f04f 34ff 	mov.w	r4, #4294967295
 8011b80:	4620      	mov	r0, r4
 8011b82:	bd70      	pop	{r4, r5, r6, pc}
 8011b84:	20000760 	.word	0x20000760

08011b88 <_malloc_r>:
 8011b88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011b8c:	1ccd      	adds	r5, r1, #3
 8011b8e:	f025 0503 	bic.w	r5, r5, #3
 8011b92:	3508      	adds	r5, #8
 8011b94:	2d0c      	cmp	r5, #12
 8011b96:	bf38      	it	cc
 8011b98:	250c      	movcc	r5, #12
 8011b9a:	2d00      	cmp	r5, #0
 8011b9c:	4607      	mov	r7, r0
 8011b9e:	db01      	blt.n	8011ba4 <_malloc_r+0x1c>
 8011ba0:	42a9      	cmp	r1, r5
 8011ba2:	d905      	bls.n	8011bb0 <_malloc_r+0x28>
 8011ba4:	230c      	movs	r3, #12
 8011ba6:	603b      	str	r3, [r7, #0]
 8011ba8:	2600      	movs	r6, #0
 8011baa:	4630      	mov	r0, r6
 8011bac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011bb0:	4e2e      	ldr	r6, [pc, #184]	; (8011c6c <_malloc_r+0xe4>)
 8011bb2:	f000 fa3d 	bl	8012030 <__malloc_lock>
 8011bb6:	6833      	ldr	r3, [r6, #0]
 8011bb8:	461c      	mov	r4, r3
 8011bba:	bb34      	cbnz	r4, 8011c0a <_malloc_r+0x82>
 8011bbc:	4629      	mov	r1, r5
 8011bbe:	4638      	mov	r0, r7
 8011bc0:	f7ff ffc2 	bl	8011b48 <sbrk_aligned>
 8011bc4:	1c43      	adds	r3, r0, #1
 8011bc6:	4604      	mov	r4, r0
 8011bc8:	d14d      	bne.n	8011c66 <_malloc_r+0xde>
 8011bca:	6834      	ldr	r4, [r6, #0]
 8011bcc:	4626      	mov	r6, r4
 8011bce:	2e00      	cmp	r6, #0
 8011bd0:	d140      	bne.n	8011c54 <_malloc_r+0xcc>
 8011bd2:	6823      	ldr	r3, [r4, #0]
 8011bd4:	4631      	mov	r1, r6
 8011bd6:	4638      	mov	r0, r7
 8011bd8:	eb04 0803 	add.w	r8, r4, r3
 8011bdc:	f000 f9ac 	bl	8011f38 <_sbrk_r>
 8011be0:	4580      	cmp	r8, r0
 8011be2:	d13a      	bne.n	8011c5a <_malloc_r+0xd2>
 8011be4:	6821      	ldr	r1, [r4, #0]
 8011be6:	3503      	adds	r5, #3
 8011be8:	1a6d      	subs	r5, r5, r1
 8011bea:	f025 0503 	bic.w	r5, r5, #3
 8011bee:	3508      	adds	r5, #8
 8011bf0:	2d0c      	cmp	r5, #12
 8011bf2:	bf38      	it	cc
 8011bf4:	250c      	movcc	r5, #12
 8011bf6:	4629      	mov	r1, r5
 8011bf8:	4638      	mov	r0, r7
 8011bfa:	f7ff ffa5 	bl	8011b48 <sbrk_aligned>
 8011bfe:	3001      	adds	r0, #1
 8011c00:	d02b      	beq.n	8011c5a <_malloc_r+0xd2>
 8011c02:	6823      	ldr	r3, [r4, #0]
 8011c04:	442b      	add	r3, r5
 8011c06:	6023      	str	r3, [r4, #0]
 8011c08:	e00e      	b.n	8011c28 <_malloc_r+0xa0>
 8011c0a:	6822      	ldr	r2, [r4, #0]
 8011c0c:	1b52      	subs	r2, r2, r5
 8011c0e:	d41e      	bmi.n	8011c4e <_malloc_r+0xc6>
 8011c10:	2a0b      	cmp	r2, #11
 8011c12:	d916      	bls.n	8011c42 <_malloc_r+0xba>
 8011c14:	1961      	adds	r1, r4, r5
 8011c16:	42a3      	cmp	r3, r4
 8011c18:	6025      	str	r5, [r4, #0]
 8011c1a:	bf18      	it	ne
 8011c1c:	6059      	strne	r1, [r3, #4]
 8011c1e:	6863      	ldr	r3, [r4, #4]
 8011c20:	bf08      	it	eq
 8011c22:	6031      	streq	r1, [r6, #0]
 8011c24:	5162      	str	r2, [r4, r5]
 8011c26:	604b      	str	r3, [r1, #4]
 8011c28:	4638      	mov	r0, r7
 8011c2a:	f104 060b 	add.w	r6, r4, #11
 8011c2e:	f000 fa05 	bl	801203c <__malloc_unlock>
 8011c32:	f026 0607 	bic.w	r6, r6, #7
 8011c36:	1d23      	adds	r3, r4, #4
 8011c38:	1af2      	subs	r2, r6, r3
 8011c3a:	d0b6      	beq.n	8011baa <_malloc_r+0x22>
 8011c3c:	1b9b      	subs	r3, r3, r6
 8011c3e:	50a3      	str	r3, [r4, r2]
 8011c40:	e7b3      	b.n	8011baa <_malloc_r+0x22>
 8011c42:	6862      	ldr	r2, [r4, #4]
 8011c44:	42a3      	cmp	r3, r4
 8011c46:	bf0c      	ite	eq
 8011c48:	6032      	streq	r2, [r6, #0]
 8011c4a:	605a      	strne	r2, [r3, #4]
 8011c4c:	e7ec      	b.n	8011c28 <_malloc_r+0xa0>
 8011c4e:	4623      	mov	r3, r4
 8011c50:	6864      	ldr	r4, [r4, #4]
 8011c52:	e7b2      	b.n	8011bba <_malloc_r+0x32>
 8011c54:	4634      	mov	r4, r6
 8011c56:	6876      	ldr	r6, [r6, #4]
 8011c58:	e7b9      	b.n	8011bce <_malloc_r+0x46>
 8011c5a:	230c      	movs	r3, #12
 8011c5c:	603b      	str	r3, [r7, #0]
 8011c5e:	4638      	mov	r0, r7
 8011c60:	f000 f9ec 	bl	801203c <__malloc_unlock>
 8011c64:	e7a1      	b.n	8011baa <_malloc_r+0x22>
 8011c66:	6025      	str	r5, [r4, #0]
 8011c68:	e7de      	b.n	8011c28 <_malloc_r+0xa0>
 8011c6a:	bf00      	nop
 8011c6c:	2000075c 	.word	0x2000075c

08011c70 <__ssputs_r>:
 8011c70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011c74:	688e      	ldr	r6, [r1, #8]
 8011c76:	429e      	cmp	r6, r3
 8011c78:	4682      	mov	sl, r0
 8011c7a:	460c      	mov	r4, r1
 8011c7c:	4690      	mov	r8, r2
 8011c7e:	461f      	mov	r7, r3
 8011c80:	d838      	bhi.n	8011cf4 <__ssputs_r+0x84>
 8011c82:	898a      	ldrh	r2, [r1, #12]
 8011c84:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011c88:	d032      	beq.n	8011cf0 <__ssputs_r+0x80>
 8011c8a:	6825      	ldr	r5, [r4, #0]
 8011c8c:	6909      	ldr	r1, [r1, #16]
 8011c8e:	eba5 0901 	sub.w	r9, r5, r1
 8011c92:	6965      	ldr	r5, [r4, #20]
 8011c94:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011c98:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011c9c:	3301      	adds	r3, #1
 8011c9e:	444b      	add	r3, r9
 8011ca0:	106d      	asrs	r5, r5, #1
 8011ca2:	429d      	cmp	r5, r3
 8011ca4:	bf38      	it	cc
 8011ca6:	461d      	movcc	r5, r3
 8011ca8:	0553      	lsls	r3, r2, #21
 8011caa:	d531      	bpl.n	8011d10 <__ssputs_r+0xa0>
 8011cac:	4629      	mov	r1, r5
 8011cae:	f7ff ff6b 	bl	8011b88 <_malloc_r>
 8011cb2:	4606      	mov	r6, r0
 8011cb4:	b950      	cbnz	r0, 8011ccc <__ssputs_r+0x5c>
 8011cb6:	230c      	movs	r3, #12
 8011cb8:	f8ca 3000 	str.w	r3, [sl]
 8011cbc:	89a3      	ldrh	r3, [r4, #12]
 8011cbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011cc2:	81a3      	strh	r3, [r4, #12]
 8011cc4:	f04f 30ff 	mov.w	r0, #4294967295
 8011cc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011ccc:	6921      	ldr	r1, [r4, #16]
 8011cce:	464a      	mov	r2, r9
 8011cd0:	f7fc faa4 	bl	800e21c <memcpy>
 8011cd4:	89a3      	ldrh	r3, [r4, #12]
 8011cd6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8011cda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011cde:	81a3      	strh	r3, [r4, #12]
 8011ce0:	6126      	str	r6, [r4, #16]
 8011ce2:	6165      	str	r5, [r4, #20]
 8011ce4:	444e      	add	r6, r9
 8011ce6:	eba5 0509 	sub.w	r5, r5, r9
 8011cea:	6026      	str	r6, [r4, #0]
 8011cec:	60a5      	str	r5, [r4, #8]
 8011cee:	463e      	mov	r6, r7
 8011cf0:	42be      	cmp	r6, r7
 8011cf2:	d900      	bls.n	8011cf6 <__ssputs_r+0x86>
 8011cf4:	463e      	mov	r6, r7
 8011cf6:	6820      	ldr	r0, [r4, #0]
 8011cf8:	4632      	mov	r2, r6
 8011cfa:	4641      	mov	r1, r8
 8011cfc:	f000 f97e 	bl	8011ffc <memmove>
 8011d00:	68a3      	ldr	r3, [r4, #8]
 8011d02:	1b9b      	subs	r3, r3, r6
 8011d04:	60a3      	str	r3, [r4, #8]
 8011d06:	6823      	ldr	r3, [r4, #0]
 8011d08:	4433      	add	r3, r6
 8011d0a:	6023      	str	r3, [r4, #0]
 8011d0c:	2000      	movs	r0, #0
 8011d0e:	e7db      	b.n	8011cc8 <__ssputs_r+0x58>
 8011d10:	462a      	mov	r2, r5
 8011d12:	f000 f999 	bl	8012048 <_realloc_r>
 8011d16:	4606      	mov	r6, r0
 8011d18:	2800      	cmp	r0, #0
 8011d1a:	d1e1      	bne.n	8011ce0 <__ssputs_r+0x70>
 8011d1c:	6921      	ldr	r1, [r4, #16]
 8011d1e:	4650      	mov	r0, sl
 8011d20:	f7ff fec6 	bl	8011ab0 <_free_r>
 8011d24:	e7c7      	b.n	8011cb6 <__ssputs_r+0x46>
	...

08011d28 <_svfiprintf_r>:
 8011d28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d2c:	4698      	mov	r8, r3
 8011d2e:	898b      	ldrh	r3, [r1, #12]
 8011d30:	061b      	lsls	r3, r3, #24
 8011d32:	b09d      	sub	sp, #116	; 0x74
 8011d34:	4607      	mov	r7, r0
 8011d36:	460d      	mov	r5, r1
 8011d38:	4614      	mov	r4, r2
 8011d3a:	d50e      	bpl.n	8011d5a <_svfiprintf_r+0x32>
 8011d3c:	690b      	ldr	r3, [r1, #16]
 8011d3e:	b963      	cbnz	r3, 8011d5a <_svfiprintf_r+0x32>
 8011d40:	2140      	movs	r1, #64	; 0x40
 8011d42:	f7ff ff21 	bl	8011b88 <_malloc_r>
 8011d46:	6028      	str	r0, [r5, #0]
 8011d48:	6128      	str	r0, [r5, #16]
 8011d4a:	b920      	cbnz	r0, 8011d56 <_svfiprintf_r+0x2e>
 8011d4c:	230c      	movs	r3, #12
 8011d4e:	603b      	str	r3, [r7, #0]
 8011d50:	f04f 30ff 	mov.w	r0, #4294967295
 8011d54:	e0d1      	b.n	8011efa <_svfiprintf_r+0x1d2>
 8011d56:	2340      	movs	r3, #64	; 0x40
 8011d58:	616b      	str	r3, [r5, #20]
 8011d5a:	2300      	movs	r3, #0
 8011d5c:	9309      	str	r3, [sp, #36]	; 0x24
 8011d5e:	2320      	movs	r3, #32
 8011d60:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011d64:	f8cd 800c 	str.w	r8, [sp, #12]
 8011d68:	2330      	movs	r3, #48	; 0x30
 8011d6a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8011f14 <_svfiprintf_r+0x1ec>
 8011d6e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011d72:	f04f 0901 	mov.w	r9, #1
 8011d76:	4623      	mov	r3, r4
 8011d78:	469a      	mov	sl, r3
 8011d7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011d7e:	b10a      	cbz	r2, 8011d84 <_svfiprintf_r+0x5c>
 8011d80:	2a25      	cmp	r2, #37	; 0x25
 8011d82:	d1f9      	bne.n	8011d78 <_svfiprintf_r+0x50>
 8011d84:	ebba 0b04 	subs.w	fp, sl, r4
 8011d88:	d00b      	beq.n	8011da2 <_svfiprintf_r+0x7a>
 8011d8a:	465b      	mov	r3, fp
 8011d8c:	4622      	mov	r2, r4
 8011d8e:	4629      	mov	r1, r5
 8011d90:	4638      	mov	r0, r7
 8011d92:	f7ff ff6d 	bl	8011c70 <__ssputs_r>
 8011d96:	3001      	adds	r0, #1
 8011d98:	f000 80aa 	beq.w	8011ef0 <_svfiprintf_r+0x1c8>
 8011d9c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011d9e:	445a      	add	r2, fp
 8011da0:	9209      	str	r2, [sp, #36]	; 0x24
 8011da2:	f89a 3000 	ldrb.w	r3, [sl]
 8011da6:	2b00      	cmp	r3, #0
 8011da8:	f000 80a2 	beq.w	8011ef0 <_svfiprintf_r+0x1c8>
 8011dac:	2300      	movs	r3, #0
 8011dae:	f04f 32ff 	mov.w	r2, #4294967295
 8011db2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011db6:	f10a 0a01 	add.w	sl, sl, #1
 8011dba:	9304      	str	r3, [sp, #16]
 8011dbc:	9307      	str	r3, [sp, #28]
 8011dbe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011dc2:	931a      	str	r3, [sp, #104]	; 0x68
 8011dc4:	4654      	mov	r4, sl
 8011dc6:	2205      	movs	r2, #5
 8011dc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011dcc:	4851      	ldr	r0, [pc, #324]	; (8011f14 <_svfiprintf_r+0x1ec>)
 8011dce:	f7ee fa27 	bl	8000220 <memchr>
 8011dd2:	9a04      	ldr	r2, [sp, #16]
 8011dd4:	b9d8      	cbnz	r0, 8011e0e <_svfiprintf_r+0xe6>
 8011dd6:	06d0      	lsls	r0, r2, #27
 8011dd8:	bf44      	itt	mi
 8011dda:	2320      	movmi	r3, #32
 8011ddc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011de0:	0711      	lsls	r1, r2, #28
 8011de2:	bf44      	itt	mi
 8011de4:	232b      	movmi	r3, #43	; 0x2b
 8011de6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011dea:	f89a 3000 	ldrb.w	r3, [sl]
 8011dee:	2b2a      	cmp	r3, #42	; 0x2a
 8011df0:	d015      	beq.n	8011e1e <_svfiprintf_r+0xf6>
 8011df2:	9a07      	ldr	r2, [sp, #28]
 8011df4:	4654      	mov	r4, sl
 8011df6:	2000      	movs	r0, #0
 8011df8:	f04f 0c0a 	mov.w	ip, #10
 8011dfc:	4621      	mov	r1, r4
 8011dfe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011e02:	3b30      	subs	r3, #48	; 0x30
 8011e04:	2b09      	cmp	r3, #9
 8011e06:	d94e      	bls.n	8011ea6 <_svfiprintf_r+0x17e>
 8011e08:	b1b0      	cbz	r0, 8011e38 <_svfiprintf_r+0x110>
 8011e0a:	9207      	str	r2, [sp, #28]
 8011e0c:	e014      	b.n	8011e38 <_svfiprintf_r+0x110>
 8011e0e:	eba0 0308 	sub.w	r3, r0, r8
 8011e12:	fa09 f303 	lsl.w	r3, r9, r3
 8011e16:	4313      	orrs	r3, r2
 8011e18:	9304      	str	r3, [sp, #16]
 8011e1a:	46a2      	mov	sl, r4
 8011e1c:	e7d2      	b.n	8011dc4 <_svfiprintf_r+0x9c>
 8011e1e:	9b03      	ldr	r3, [sp, #12]
 8011e20:	1d19      	adds	r1, r3, #4
 8011e22:	681b      	ldr	r3, [r3, #0]
 8011e24:	9103      	str	r1, [sp, #12]
 8011e26:	2b00      	cmp	r3, #0
 8011e28:	bfbb      	ittet	lt
 8011e2a:	425b      	neglt	r3, r3
 8011e2c:	f042 0202 	orrlt.w	r2, r2, #2
 8011e30:	9307      	strge	r3, [sp, #28]
 8011e32:	9307      	strlt	r3, [sp, #28]
 8011e34:	bfb8      	it	lt
 8011e36:	9204      	strlt	r2, [sp, #16]
 8011e38:	7823      	ldrb	r3, [r4, #0]
 8011e3a:	2b2e      	cmp	r3, #46	; 0x2e
 8011e3c:	d10c      	bne.n	8011e58 <_svfiprintf_r+0x130>
 8011e3e:	7863      	ldrb	r3, [r4, #1]
 8011e40:	2b2a      	cmp	r3, #42	; 0x2a
 8011e42:	d135      	bne.n	8011eb0 <_svfiprintf_r+0x188>
 8011e44:	9b03      	ldr	r3, [sp, #12]
 8011e46:	1d1a      	adds	r2, r3, #4
 8011e48:	681b      	ldr	r3, [r3, #0]
 8011e4a:	9203      	str	r2, [sp, #12]
 8011e4c:	2b00      	cmp	r3, #0
 8011e4e:	bfb8      	it	lt
 8011e50:	f04f 33ff 	movlt.w	r3, #4294967295
 8011e54:	3402      	adds	r4, #2
 8011e56:	9305      	str	r3, [sp, #20]
 8011e58:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8011f24 <_svfiprintf_r+0x1fc>
 8011e5c:	7821      	ldrb	r1, [r4, #0]
 8011e5e:	2203      	movs	r2, #3
 8011e60:	4650      	mov	r0, sl
 8011e62:	f7ee f9dd 	bl	8000220 <memchr>
 8011e66:	b140      	cbz	r0, 8011e7a <_svfiprintf_r+0x152>
 8011e68:	2340      	movs	r3, #64	; 0x40
 8011e6a:	eba0 000a 	sub.w	r0, r0, sl
 8011e6e:	fa03 f000 	lsl.w	r0, r3, r0
 8011e72:	9b04      	ldr	r3, [sp, #16]
 8011e74:	4303      	orrs	r3, r0
 8011e76:	3401      	adds	r4, #1
 8011e78:	9304      	str	r3, [sp, #16]
 8011e7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011e7e:	4826      	ldr	r0, [pc, #152]	; (8011f18 <_svfiprintf_r+0x1f0>)
 8011e80:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011e84:	2206      	movs	r2, #6
 8011e86:	f7ee f9cb 	bl	8000220 <memchr>
 8011e8a:	2800      	cmp	r0, #0
 8011e8c:	d038      	beq.n	8011f00 <_svfiprintf_r+0x1d8>
 8011e8e:	4b23      	ldr	r3, [pc, #140]	; (8011f1c <_svfiprintf_r+0x1f4>)
 8011e90:	bb1b      	cbnz	r3, 8011eda <_svfiprintf_r+0x1b2>
 8011e92:	9b03      	ldr	r3, [sp, #12]
 8011e94:	3307      	adds	r3, #7
 8011e96:	f023 0307 	bic.w	r3, r3, #7
 8011e9a:	3308      	adds	r3, #8
 8011e9c:	9303      	str	r3, [sp, #12]
 8011e9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011ea0:	4433      	add	r3, r6
 8011ea2:	9309      	str	r3, [sp, #36]	; 0x24
 8011ea4:	e767      	b.n	8011d76 <_svfiprintf_r+0x4e>
 8011ea6:	fb0c 3202 	mla	r2, ip, r2, r3
 8011eaa:	460c      	mov	r4, r1
 8011eac:	2001      	movs	r0, #1
 8011eae:	e7a5      	b.n	8011dfc <_svfiprintf_r+0xd4>
 8011eb0:	2300      	movs	r3, #0
 8011eb2:	3401      	adds	r4, #1
 8011eb4:	9305      	str	r3, [sp, #20]
 8011eb6:	4619      	mov	r1, r3
 8011eb8:	f04f 0c0a 	mov.w	ip, #10
 8011ebc:	4620      	mov	r0, r4
 8011ebe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011ec2:	3a30      	subs	r2, #48	; 0x30
 8011ec4:	2a09      	cmp	r2, #9
 8011ec6:	d903      	bls.n	8011ed0 <_svfiprintf_r+0x1a8>
 8011ec8:	2b00      	cmp	r3, #0
 8011eca:	d0c5      	beq.n	8011e58 <_svfiprintf_r+0x130>
 8011ecc:	9105      	str	r1, [sp, #20]
 8011ece:	e7c3      	b.n	8011e58 <_svfiprintf_r+0x130>
 8011ed0:	fb0c 2101 	mla	r1, ip, r1, r2
 8011ed4:	4604      	mov	r4, r0
 8011ed6:	2301      	movs	r3, #1
 8011ed8:	e7f0      	b.n	8011ebc <_svfiprintf_r+0x194>
 8011eda:	ab03      	add	r3, sp, #12
 8011edc:	9300      	str	r3, [sp, #0]
 8011ede:	462a      	mov	r2, r5
 8011ee0:	4b0f      	ldr	r3, [pc, #60]	; (8011f20 <_svfiprintf_r+0x1f8>)
 8011ee2:	a904      	add	r1, sp, #16
 8011ee4:	4638      	mov	r0, r7
 8011ee6:	f7fc fa4f 	bl	800e388 <_printf_float>
 8011eea:	1c42      	adds	r2, r0, #1
 8011eec:	4606      	mov	r6, r0
 8011eee:	d1d6      	bne.n	8011e9e <_svfiprintf_r+0x176>
 8011ef0:	89ab      	ldrh	r3, [r5, #12]
 8011ef2:	065b      	lsls	r3, r3, #25
 8011ef4:	f53f af2c 	bmi.w	8011d50 <_svfiprintf_r+0x28>
 8011ef8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011efa:	b01d      	add	sp, #116	; 0x74
 8011efc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f00:	ab03      	add	r3, sp, #12
 8011f02:	9300      	str	r3, [sp, #0]
 8011f04:	462a      	mov	r2, r5
 8011f06:	4b06      	ldr	r3, [pc, #24]	; (8011f20 <_svfiprintf_r+0x1f8>)
 8011f08:	a904      	add	r1, sp, #16
 8011f0a:	4638      	mov	r0, r7
 8011f0c:	f7fc fce0 	bl	800e8d0 <_printf_i>
 8011f10:	e7eb      	b.n	8011eea <_svfiprintf_r+0x1c2>
 8011f12:	bf00      	nop
 8011f14:	08013184 	.word	0x08013184
 8011f18:	0801318e 	.word	0x0801318e
 8011f1c:	0800e389 	.word	0x0800e389
 8011f20:	08011c71 	.word	0x08011c71
 8011f24:	0801318a 	.word	0x0801318a

08011f28 <nan>:
 8011f28:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8011f30 <nan+0x8>
 8011f2c:	4770      	bx	lr
 8011f2e:	bf00      	nop
 8011f30:	00000000 	.word	0x00000000
 8011f34:	7ff80000 	.word	0x7ff80000

08011f38 <_sbrk_r>:
 8011f38:	b538      	push	{r3, r4, r5, lr}
 8011f3a:	4d06      	ldr	r5, [pc, #24]	; (8011f54 <_sbrk_r+0x1c>)
 8011f3c:	2300      	movs	r3, #0
 8011f3e:	4604      	mov	r4, r0
 8011f40:	4608      	mov	r0, r1
 8011f42:	602b      	str	r3, [r5, #0]
 8011f44:	f7ef fe00 	bl	8001b48 <_sbrk>
 8011f48:	1c43      	adds	r3, r0, #1
 8011f4a:	d102      	bne.n	8011f52 <_sbrk_r+0x1a>
 8011f4c:	682b      	ldr	r3, [r5, #0]
 8011f4e:	b103      	cbz	r3, 8011f52 <_sbrk_r+0x1a>
 8011f50:	6023      	str	r3, [r4, #0]
 8011f52:	bd38      	pop	{r3, r4, r5, pc}
 8011f54:	20000764 	.word	0x20000764

08011f58 <strncmp>:
 8011f58:	b510      	push	{r4, lr}
 8011f5a:	b17a      	cbz	r2, 8011f7c <strncmp+0x24>
 8011f5c:	4603      	mov	r3, r0
 8011f5e:	3901      	subs	r1, #1
 8011f60:	1884      	adds	r4, r0, r2
 8011f62:	f813 0b01 	ldrb.w	r0, [r3], #1
 8011f66:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8011f6a:	4290      	cmp	r0, r2
 8011f6c:	d101      	bne.n	8011f72 <strncmp+0x1a>
 8011f6e:	42a3      	cmp	r3, r4
 8011f70:	d101      	bne.n	8011f76 <strncmp+0x1e>
 8011f72:	1a80      	subs	r0, r0, r2
 8011f74:	bd10      	pop	{r4, pc}
 8011f76:	2800      	cmp	r0, #0
 8011f78:	d1f3      	bne.n	8011f62 <strncmp+0xa>
 8011f7a:	e7fa      	b.n	8011f72 <strncmp+0x1a>
 8011f7c:	4610      	mov	r0, r2
 8011f7e:	e7f9      	b.n	8011f74 <strncmp+0x1c>

08011f80 <__ascii_wctomb>:
 8011f80:	b149      	cbz	r1, 8011f96 <__ascii_wctomb+0x16>
 8011f82:	2aff      	cmp	r2, #255	; 0xff
 8011f84:	bf85      	ittet	hi
 8011f86:	238a      	movhi	r3, #138	; 0x8a
 8011f88:	6003      	strhi	r3, [r0, #0]
 8011f8a:	700a      	strbls	r2, [r1, #0]
 8011f8c:	f04f 30ff 	movhi.w	r0, #4294967295
 8011f90:	bf98      	it	ls
 8011f92:	2001      	movls	r0, #1
 8011f94:	4770      	bx	lr
 8011f96:	4608      	mov	r0, r1
 8011f98:	4770      	bx	lr
	...

08011f9c <__assert_func>:
 8011f9c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011f9e:	4614      	mov	r4, r2
 8011fa0:	461a      	mov	r2, r3
 8011fa2:	4b09      	ldr	r3, [pc, #36]	; (8011fc8 <__assert_func+0x2c>)
 8011fa4:	681b      	ldr	r3, [r3, #0]
 8011fa6:	4605      	mov	r5, r0
 8011fa8:	68d8      	ldr	r0, [r3, #12]
 8011faa:	b14c      	cbz	r4, 8011fc0 <__assert_func+0x24>
 8011fac:	4b07      	ldr	r3, [pc, #28]	; (8011fcc <__assert_func+0x30>)
 8011fae:	9100      	str	r1, [sp, #0]
 8011fb0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011fb4:	4906      	ldr	r1, [pc, #24]	; (8011fd0 <__assert_func+0x34>)
 8011fb6:	462b      	mov	r3, r5
 8011fb8:	f000 f80e 	bl	8011fd8 <fiprintf>
 8011fbc:	f000 fa8c 	bl	80124d8 <abort>
 8011fc0:	4b04      	ldr	r3, [pc, #16]	; (8011fd4 <__assert_func+0x38>)
 8011fc2:	461c      	mov	r4, r3
 8011fc4:	e7f3      	b.n	8011fae <__assert_func+0x12>
 8011fc6:	bf00      	nop
 8011fc8:	200002c8 	.word	0x200002c8
 8011fcc:	08013195 	.word	0x08013195
 8011fd0:	080131a2 	.word	0x080131a2
 8011fd4:	080131d0 	.word	0x080131d0

08011fd8 <fiprintf>:
 8011fd8:	b40e      	push	{r1, r2, r3}
 8011fda:	b503      	push	{r0, r1, lr}
 8011fdc:	4601      	mov	r1, r0
 8011fde:	ab03      	add	r3, sp, #12
 8011fe0:	4805      	ldr	r0, [pc, #20]	; (8011ff8 <fiprintf+0x20>)
 8011fe2:	f853 2b04 	ldr.w	r2, [r3], #4
 8011fe6:	6800      	ldr	r0, [r0, #0]
 8011fe8:	9301      	str	r3, [sp, #4]
 8011fea:	f000 f885 	bl	80120f8 <_vfiprintf_r>
 8011fee:	b002      	add	sp, #8
 8011ff0:	f85d eb04 	ldr.w	lr, [sp], #4
 8011ff4:	b003      	add	sp, #12
 8011ff6:	4770      	bx	lr
 8011ff8:	200002c8 	.word	0x200002c8

08011ffc <memmove>:
 8011ffc:	4288      	cmp	r0, r1
 8011ffe:	b510      	push	{r4, lr}
 8012000:	eb01 0402 	add.w	r4, r1, r2
 8012004:	d902      	bls.n	801200c <memmove+0x10>
 8012006:	4284      	cmp	r4, r0
 8012008:	4623      	mov	r3, r4
 801200a:	d807      	bhi.n	801201c <memmove+0x20>
 801200c:	1e43      	subs	r3, r0, #1
 801200e:	42a1      	cmp	r1, r4
 8012010:	d008      	beq.n	8012024 <memmove+0x28>
 8012012:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012016:	f803 2f01 	strb.w	r2, [r3, #1]!
 801201a:	e7f8      	b.n	801200e <memmove+0x12>
 801201c:	4402      	add	r2, r0
 801201e:	4601      	mov	r1, r0
 8012020:	428a      	cmp	r2, r1
 8012022:	d100      	bne.n	8012026 <memmove+0x2a>
 8012024:	bd10      	pop	{r4, pc}
 8012026:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801202a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801202e:	e7f7      	b.n	8012020 <memmove+0x24>

08012030 <__malloc_lock>:
 8012030:	4801      	ldr	r0, [pc, #4]	; (8012038 <__malloc_lock+0x8>)
 8012032:	f000 bc11 	b.w	8012858 <__retarget_lock_acquire_recursive>
 8012036:	bf00      	nop
 8012038:	20000768 	.word	0x20000768

0801203c <__malloc_unlock>:
 801203c:	4801      	ldr	r0, [pc, #4]	; (8012044 <__malloc_unlock+0x8>)
 801203e:	f000 bc0c 	b.w	801285a <__retarget_lock_release_recursive>
 8012042:	bf00      	nop
 8012044:	20000768 	.word	0x20000768

08012048 <_realloc_r>:
 8012048:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801204c:	4680      	mov	r8, r0
 801204e:	4614      	mov	r4, r2
 8012050:	460e      	mov	r6, r1
 8012052:	b921      	cbnz	r1, 801205e <_realloc_r+0x16>
 8012054:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012058:	4611      	mov	r1, r2
 801205a:	f7ff bd95 	b.w	8011b88 <_malloc_r>
 801205e:	b92a      	cbnz	r2, 801206c <_realloc_r+0x24>
 8012060:	f7ff fd26 	bl	8011ab0 <_free_r>
 8012064:	4625      	mov	r5, r4
 8012066:	4628      	mov	r0, r5
 8012068:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801206c:	f000 fc5c 	bl	8012928 <_malloc_usable_size_r>
 8012070:	4284      	cmp	r4, r0
 8012072:	4607      	mov	r7, r0
 8012074:	d802      	bhi.n	801207c <_realloc_r+0x34>
 8012076:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801207a:	d812      	bhi.n	80120a2 <_realloc_r+0x5a>
 801207c:	4621      	mov	r1, r4
 801207e:	4640      	mov	r0, r8
 8012080:	f7ff fd82 	bl	8011b88 <_malloc_r>
 8012084:	4605      	mov	r5, r0
 8012086:	2800      	cmp	r0, #0
 8012088:	d0ed      	beq.n	8012066 <_realloc_r+0x1e>
 801208a:	42bc      	cmp	r4, r7
 801208c:	4622      	mov	r2, r4
 801208e:	4631      	mov	r1, r6
 8012090:	bf28      	it	cs
 8012092:	463a      	movcs	r2, r7
 8012094:	f7fc f8c2 	bl	800e21c <memcpy>
 8012098:	4631      	mov	r1, r6
 801209a:	4640      	mov	r0, r8
 801209c:	f7ff fd08 	bl	8011ab0 <_free_r>
 80120a0:	e7e1      	b.n	8012066 <_realloc_r+0x1e>
 80120a2:	4635      	mov	r5, r6
 80120a4:	e7df      	b.n	8012066 <_realloc_r+0x1e>

080120a6 <__sfputc_r>:
 80120a6:	6893      	ldr	r3, [r2, #8]
 80120a8:	3b01      	subs	r3, #1
 80120aa:	2b00      	cmp	r3, #0
 80120ac:	b410      	push	{r4}
 80120ae:	6093      	str	r3, [r2, #8]
 80120b0:	da08      	bge.n	80120c4 <__sfputc_r+0x1e>
 80120b2:	6994      	ldr	r4, [r2, #24]
 80120b4:	42a3      	cmp	r3, r4
 80120b6:	db01      	blt.n	80120bc <__sfputc_r+0x16>
 80120b8:	290a      	cmp	r1, #10
 80120ba:	d103      	bne.n	80120c4 <__sfputc_r+0x1e>
 80120bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80120c0:	f000 b94a 	b.w	8012358 <__swbuf_r>
 80120c4:	6813      	ldr	r3, [r2, #0]
 80120c6:	1c58      	adds	r0, r3, #1
 80120c8:	6010      	str	r0, [r2, #0]
 80120ca:	7019      	strb	r1, [r3, #0]
 80120cc:	4608      	mov	r0, r1
 80120ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 80120d2:	4770      	bx	lr

080120d4 <__sfputs_r>:
 80120d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80120d6:	4606      	mov	r6, r0
 80120d8:	460f      	mov	r7, r1
 80120da:	4614      	mov	r4, r2
 80120dc:	18d5      	adds	r5, r2, r3
 80120de:	42ac      	cmp	r4, r5
 80120e0:	d101      	bne.n	80120e6 <__sfputs_r+0x12>
 80120e2:	2000      	movs	r0, #0
 80120e4:	e007      	b.n	80120f6 <__sfputs_r+0x22>
 80120e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80120ea:	463a      	mov	r2, r7
 80120ec:	4630      	mov	r0, r6
 80120ee:	f7ff ffda 	bl	80120a6 <__sfputc_r>
 80120f2:	1c43      	adds	r3, r0, #1
 80120f4:	d1f3      	bne.n	80120de <__sfputs_r+0xa>
 80120f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080120f8 <_vfiprintf_r>:
 80120f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80120fc:	460d      	mov	r5, r1
 80120fe:	b09d      	sub	sp, #116	; 0x74
 8012100:	4614      	mov	r4, r2
 8012102:	4698      	mov	r8, r3
 8012104:	4606      	mov	r6, r0
 8012106:	b118      	cbz	r0, 8012110 <_vfiprintf_r+0x18>
 8012108:	6983      	ldr	r3, [r0, #24]
 801210a:	b90b      	cbnz	r3, 8012110 <_vfiprintf_r+0x18>
 801210c:	f000 fb06 	bl	801271c <__sinit>
 8012110:	4b89      	ldr	r3, [pc, #548]	; (8012338 <_vfiprintf_r+0x240>)
 8012112:	429d      	cmp	r5, r3
 8012114:	d11b      	bne.n	801214e <_vfiprintf_r+0x56>
 8012116:	6875      	ldr	r5, [r6, #4]
 8012118:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801211a:	07d9      	lsls	r1, r3, #31
 801211c:	d405      	bmi.n	801212a <_vfiprintf_r+0x32>
 801211e:	89ab      	ldrh	r3, [r5, #12]
 8012120:	059a      	lsls	r2, r3, #22
 8012122:	d402      	bmi.n	801212a <_vfiprintf_r+0x32>
 8012124:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012126:	f000 fb97 	bl	8012858 <__retarget_lock_acquire_recursive>
 801212a:	89ab      	ldrh	r3, [r5, #12]
 801212c:	071b      	lsls	r3, r3, #28
 801212e:	d501      	bpl.n	8012134 <_vfiprintf_r+0x3c>
 8012130:	692b      	ldr	r3, [r5, #16]
 8012132:	b9eb      	cbnz	r3, 8012170 <_vfiprintf_r+0x78>
 8012134:	4629      	mov	r1, r5
 8012136:	4630      	mov	r0, r6
 8012138:	f000 f960 	bl	80123fc <__swsetup_r>
 801213c:	b1c0      	cbz	r0, 8012170 <_vfiprintf_r+0x78>
 801213e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012140:	07dc      	lsls	r4, r3, #31
 8012142:	d50e      	bpl.n	8012162 <_vfiprintf_r+0x6a>
 8012144:	f04f 30ff 	mov.w	r0, #4294967295
 8012148:	b01d      	add	sp, #116	; 0x74
 801214a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801214e:	4b7b      	ldr	r3, [pc, #492]	; (801233c <_vfiprintf_r+0x244>)
 8012150:	429d      	cmp	r5, r3
 8012152:	d101      	bne.n	8012158 <_vfiprintf_r+0x60>
 8012154:	68b5      	ldr	r5, [r6, #8]
 8012156:	e7df      	b.n	8012118 <_vfiprintf_r+0x20>
 8012158:	4b79      	ldr	r3, [pc, #484]	; (8012340 <_vfiprintf_r+0x248>)
 801215a:	429d      	cmp	r5, r3
 801215c:	bf08      	it	eq
 801215e:	68f5      	ldreq	r5, [r6, #12]
 8012160:	e7da      	b.n	8012118 <_vfiprintf_r+0x20>
 8012162:	89ab      	ldrh	r3, [r5, #12]
 8012164:	0598      	lsls	r0, r3, #22
 8012166:	d4ed      	bmi.n	8012144 <_vfiprintf_r+0x4c>
 8012168:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801216a:	f000 fb76 	bl	801285a <__retarget_lock_release_recursive>
 801216e:	e7e9      	b.n	8012144 <_vfiprintf_r+0x4c>
 8012170:	2300      	movs	r3, #0
 8012172:	9309      	str	r3, [sp, #36]	; 0x24
 8012174:	2320      	movs	r3, #32
 8012176:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801217a:	f8cd 800c 	str.w	r8, [sp, #12]
 801217e:	2330      	movs	r3, #48	; 0x30
 8012180:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8012344 <_vfiprintf_r+0x24c>
 8012184:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012188:	f04f 0901 	mov.w	r9, #1
 801218c:	4623      	mov	r3, r4
 801218e:	469a      	mov	sl, r3
 8012190:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012194:	b10a      	cbz	r2, 801219a <_vfiprintf_r+0xa2>
 8012196:	2a25      	cmp	r2, #37	; 0x25
 8012198:	d1f9      	bne.n	801218e <_vfiprintf_r+0x96>
 801219a:	ebba 0b04 	subs.w	fp, sl, r4
 801219e:	d00b      	beq.n	80121b8 <_vfiprintf_r+0xc0>
 80121a0:	465b      	mov	r3, fp
 80121a2:	4622      	mov	r2, r4
 80121a4:	4629      	mov	r1, r5
 80121a6:	4630      	mov	r0, r6
 80121a8:	f7ff ff94 	bl	80120d4 <__sfputs_r>
 80121ac:	3001      	adds	r0, #1
 80121ae:	f000 80aa 	beq.w	8012306 <_vfiprintf_r+0x20e>
 80121b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80121b4:	445a      	add	r2, fp
 80121b6:	9209      	str	r2, [sp, #36]	; 0x24
 80121b8:	f89a 3000 	ldrb.w	r3, [sl]
 80121bc:	2b00      	cmp	r3, #0
 80121be:	f000 80a2 	beq.w	8012306 <_vfiprintf_r+0x20e>
 80121c2:	2300      	movs	r3, #0
 80121c4:	f04f 32ff 	mov.w	r2, #4294967295
 80121c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80121cc:	f10a 0a01 	add.w	sl, sl, #1
 80121d0:	9304      	str	r3, [sp, #16]
 80121d2:	9307      	str	r3, [sp, #28]
 80121d4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80121d8:	931a      	str	r3, [sp, #104]	; 0x68
 80121da:	4654      	mov	r4, sl
 80121dc:	2205      	movs	r2, #5
 80121de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80121e2:	4858      	ldr	r0, [pc, #352]	; (8012344 <_vfiprintf_r+0x24c>)
 80121e4:	f7ee f81c 	bl	8000220 <memchr>
 80121e8:	9a04      	ldr	r2, [sp, #16]
 80121ea:	b9d8      	cbnz	r0, 8012224 <_vfiprintf_r+0x12c>
 80121ec:	06d1      	lsls	r1, r2, #27
 80121ee:	bf44      	itt	mi
 80121f0:	2320      	movmi	r3, #32
 80121f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80121f6:	0713      	lsls	r3, r2, #28
 80121f8:	bf44      	itt	mi
 80121fa:	232b      	movmi	r3, #43	; 0x2b
 80121fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012200:	f89a 3000 	ldrb.w	r3, [sl]
 8012204:	2b2a      	cmp	r3, #42	; 0x2a
 8012206:	d015      	beq.n	8012234 <_vfiprintf_r+0x13c>
 8012208:	9a07      	ldr	r2, [sp, #28]
 801220a:	4654      	mov	r4, sl
 801220c:	2000      	movs	r0, #0
 801220e:	f04f 0c0a 	mov.w	ip, #10
 8012212:	4621      	mov	r1, r4
 8012214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012218:	3b30      	subs	r3, #48	; 0x30
 801221a:	2b09      	cmp	r3, #9
 801221c:	d94e      	bls.n	80122bc <_vfiprintf_r+0x1c4>
 801221e:	b1b0      	cbz	r0, 801224e <_vfiprintf_r+0x156>
 8012220:	9207      	str	r2, [sp, #28]
 8012222:	e014      	b.n	801224e <_vfiprintf_r+0x156>
 8012224:	eba0 0308 	sub.w	r3, r0, r8
 8012228:	fa09 f303 	lsl.w	r3, r9, r3
 801222c:	4313      	orrs	r3, r2
 801222e:	9304      	str	r3, [sp, #16]
 8012230:	46a2      	mov	sl, r4
 8012232:	e7d2      	b.n	80121da <_vfiprintf_r+0xe2>
 8012234:	9b03      	ldr	r3, [sp, #12]
 8012236:	1d19      	adds	r1, r3, #4
 8012238:	681b      	ldr	r3, [r3, #0]
 801223a:	9103      	str	r1, [sp, #12]
 801223c:	2b00      	cmp	r3, #0
 801223e:	bfbb      	ittet	lt
 8012240:	425b      	neglt	r3, r3
 8012242:	f042 0202 	orrlt.w	r2, r2, #2
 8012246:	9307      	strge	r3, [sp, #28]
 8012248:	9307      	strlt	r3, [sp, #28]
 801224a:	bfb8      	it	lt
 801224c:	9204      	strlt	r2, [sp, #16]
 801224e:	7823      	ldrb	r3, [r4, #0]
 8012250:	2b2e      	cmp	r3, #46	; 0x2e
 8012252:	d10c      	bne.n	801226e <_vfiprintf_r+0x176>
 8012254:	7863      	ldrb	r3, [r4, #1]
 8012256:	2b2a      	cmp	r3, #42	; 0x2a
 8012258:	d135      	bne.n	80122c6 <_vfiprintf_r+0x1ce>
 801225a:	9b03      	ldr	r3, [sp, #12]
 801225c:	1d1a      	adds	r2, r3, #4
 801225e:	681b      	ldr	r3, [r3, #0]
 8012260:	9203      	str	r2, [sp, #12]
 8012262:	2b00      	cmp	r3, #0
 8012264:	bfb8      	it	lt
 8012266:	f04f 33ff 	movlt.w	r3, #4294967295
 801226a:	3402      	adds	r4, #2
 801226c:	9305      	str	r3, [sp, #20]
 801226e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8012354 <_vfiprintf_r+0x25c>
 8012272:	7821      	ldrb	r1, [r4, #0]
 8012274:	2203      	movs	r2, #3
 8012276:	4650      	mov	r0, sl
 8012278:	f7ed ffd2 	bl	8000220 <memchr>
 801227c:	b140      	cbz	r0, 8012290 <_vfiprintf_r+0x198>
 801227e:	2340      	movs	r3, #64	; 0x40
 8012280:	eba0 000a 	sub.w	r0, r0, sl
 8012284:	fa03 f000 	lsl.w	r0, r3, r0
 8012288:	9b04      	ldr	r3, [sp, #16]
 801228a:	4303      	orrs	r3, r0
 801228c:	3401      	adds	r4, #1
 801228e:	9304      	str	r3, [sp, #16]
 8012290:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012294:	482c      	ldr	r0, [pc, #176]	; (8012348 <_vfiprintf_r+0x250>)
 8012296:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801229a:	2206      	movs	r2, #6
 801229c:	f7ed ffc0 	bl	8000220 <memchr>
 80122a0:	2800      	cmp	r0, #0
 80122a2:	d03f      	beq.n	8012324 <_vfiprintf_r+0x22c>
 80122a4:	4b29      	ldr	r3, [pc, #164]	; (801234c <_vfiprintf_r+0x254>)
 80122a6:	bb1b      	cbnz	r3, 80122f0 <_vfiprintf_r+0x1f8>
 80122a8:	9b03      	ldr	r3, [sp, #12]
 80122aa:	3307      	adds	r3, #7
 80122ac:	f023 0307 	bic.w	r3, r3, #7
 80122b0:	3308      	adds	r3, #8
 80122b2:	9303      	str	r3, [sp, #12]
 80122b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80122b6:	443b      	add	r3, r7
 80122b8:	9309      	str	r3, [sp, #36]	; 0x24
 80122ba:	e767      	b.n	801218c <_vfiprintf_r+0x94>
 80122bc:	fb0c 3202 	mla	r2, ip, r2, r3
 80122c0:	460c      	mov	r4, r1
 80122c2:	2001      	movs	r0, #1
 80122c4:	e7a5      	b.n	8012212 <_vfiprintf_r+0x11a>
 80122c6:	2300      	movs	r3, #0
 80122c8:	3401      	adds	r4, #1
 80122ca:	9305      	str	r3, [sp, #20]
 80122cc:	4619      	mov	r1, r3
 80122ce:	f04f 0c0a 	mov.w	ip, #10
 80122d2:	4620      	mov	r0, r4
 80122d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80122d8:	3a30      	subs	r2, #48	; 0x30
 80122da:	2a09      	cmp	r2, #9
 80122dc:	d903      	bls.n	80122e6 <_vfiprintf_r+0x1ee>
 80122de:	2b00      	cmp	r3, #0
 80122e0:	d0c5      	beq.n	801226e <_vfiprintf_r+0x176>
 80122e2:	9105      	str	r1, [sp, #20]
 80122e4:	e7c3      	b.n	801226e <_vfiprintf_r+0x176>
 80122e6:	fb0c 2101 	mla	r1, ip, r1, r2
 80122ea:	4604      	mov	r4, r0
 80122ec:	2301      	movs	r3, #1
 80122ee:	e7f0      	b.n	80122d2 <_vfiprintf_r+0x1da>
 80122f0:	ab03      	add	r3, sp, #12
 80122f2:	9300      	str	r3, [sp, #0]
 80122f4:	462a      	mov	r2, r5
 80122f6:	4b16      	ldr	r3, [pc, #88]	; (8012350 <_vfiprintf_r+0x258>)
 80122f8:	a904      	add	r1, sp, #16
 80122fa:	4630      	mov	r0, r6
 80122fc:	f7fc f844 	bl	800e388 <_printf_float>
 8012300:	4607      	mov	r7, r0
 8012302:	1c78      	adds	r0, r7, #1
 8012304:	d1d6      	bne.n	80122b4 <_vfiprintf_r+0x1bc>
 8012306:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012308:	07d9      	lsls	r1, r3, #31
 801230a:	d405      	bmi.n	8012318 <_vfiprintf_r+0x220>
 801230c:	89ab      	ldrh	r3, [r5, #12]
 801230e:	059a      	lsls	r2, r3, #22
 8012310:	d402      	bmi.n	8012318 <_vfiprintf_r+0x220>
 8012312:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012314:	f000 faa1 	bl	801285a <__retarget_lock_release_recursive>
 8012318:	89ab      	ldrh	r3, [r5, #12]
 801231a:	065b      	lsls	r3, r3, #25
 801231c:	f53f af12 	bmi.w	8012144 <_vfiprintf_r+0x4c>
 8012320:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012322:	e711      	b.n	8012148 <_vfiprintf_r+0x50>
 8012324:	ab03      	add	r3, sp, #12
 8012326:	9300      	str	r3, [sp, #0]
 8012328:	462a      	mov	r2, r5
 801232a:	4b09      	ldr	r3, [pc, #36]	; (8012350 <_vfiprintf_r+0x258>)
 801232c:	a904      	add	r1, sp, #16
 801232e:	4630      	mov	r0, r6
 8012330:	f7fc face 	bl	800e8d0 <_printf_i>
 8012334:	e7e4      	b.n	8012300 <_vfiprintf_r+0x208>
 8012336:	bf00      	nop
 8012338:	080131f4 	.word	0x080131f4
 801233c:	08013214 	.word	0x08013214
 8012340:	080131d4 	.word	0x080131d4
 8012344:	08013184 	.word	0x08013184
 8012348:	0801318e 	.word	0x0801318e
 801234c:	0800e389 	.word	0x0800e389
 8012350:	080120d5 	.word	0x080120d5
 8012354:	0801318a 	.word	0x0801318a

08012358 <__swbuf_r>:
 8012358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801235a:	460e      	mov	r6, r1
 801235c:	4614      	mov	r4, r2
 801235e:	4605      	mov	r5, r0
 8012360:	b118      	cbz	r0, 801236a <__swbuf_r+0x12>
 8012362:	6983      	ldr	r3, [r0, #24]
 8012364:	b90b      	cbnz	r3, 801236a <__swbuf_r+0x12>
 8012366:	f000 f9d9 	bl	801271c <__sinit>
 801236a:	4b21      	ldr	r3, [pc, #132]	; (80123f0 <__swbuf_r+0x98>)
 801236c:	429c      	cmp	r4, r3
 801236e:	d12b      	bne.n	80123c8 <__swbuf_r+0x70>
 8012370:	686c      	ldr	r4, [r5, #4]
 8012372:	69a3      	ldr	r3, [r4, #24]
 8012374:	60a3      	str	r3, [r4, #8]
 8012376:	89a3      	ldrh	r3, [r4, #12]
 8012378:	071a      	lsls	r2, r3, #28
 801237a:	d52f      	bpl.n	80123dc <__swbuf_r+0x84>
 801237c:	6923      	ldr	r3, [r4, #16]
 801237e:	b36b      	cbz	r3, 80123dc <__swbuf_r+0x84>
 8012380:	6923      	ldr	r3, [r4, #16]
 8012382:	6820      	ldr	r0, [r4, #0]
 8012384:	1ac0      	subs	r0, r0, r3
 8012386:	6963      	ldr	r3, [r4, #20]
 8012388:	b2f6      	uxtb	r6, r6
 801238a:	4283      	cmp	r3, r0
 801238c:	4637      	mov	r7, r6
 801238e:	dc04      	bgt.n	801239a <__swbuf_r+0x42>
 8012390:	4621      	mov	r1, r4
 8012392:	4628      	mov	r0, r5
 8012394:	f000 f92e 	bl	80125f4 <_fflush_r>
 8012398:	bb30      	cbnz	r0, 80123e8 <__swbuf_r+0x90>
 801239a:	68a3      	ldr	r3, [r4, #8]
 801239c:	3b01      	subs	r3, #1
 801239e:	60a3      	str	r3, [r4, #8]
 80123a0:	6823      	ldr	r3, [r4, #0]
 80123a2:	1c5a      	adds	r2, r3, #1
 80123a4:	6022      	str	r2, [r4, #0]
 80123a6:	701e      	strb	r6, [r3, #0]
 80123a8:	6963      	ldr	r3, [r4, #20]
 80123aa:	3001      	adds	r0, #1
 80123ac:	4283      	cmp	r3, r0
 80123ae:	d004      	beq.n	80123ba <__swbuf_r+0x62>
 80123b0:	89a3      	ldrh	r3, [r4, #12]
 80123b2:	07db      	lsls	r3, r3, #31
 80123b4:	d506      	bpl.n	80123c4 <__swbuf_r+0x6c>
 80123b6:	2e0a      	cmp	r6, #10
 80123b8:	d104      	bne.n	80123c4 <__swbuf_r+0x6c>
 80123ba:	4621      	mov	r1, r4
 80123bc:	4628      	mov	r0, r5
 80123be:	f000 f919 	bl	80125f4 <_fflush_r>
 80123c2:	b988      	cbnz	r0, 80123e8 <__swbuf_r+0x90>
 80123c4:	4638      	mov	r0, r7
 80123c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80123c8:	4b0a      	ldr	r3, [pc, #40]	; (80123f4 <__swbuf_r+0x9c>)
 80123ca:	429c      	cmp	r4, r3
 80123cc:	d101      	bne.n	80123d2 <__swbuf_r+0x7a>
 80123ce:	68ac      	ldr	r4, [r5, #8]
 80123d0:	e7cf      	b.n	8012372 <__swbuf_r+0x1a>
 80123d2:	4b09      	ldr	r3, [pc, #36]	; (80123f8 <__swbuf_r+0xa0>)
 80123d4:	429c      	cmp	r4, r3
 80123d6:	bf08      	it	eq
 80123d8:	68ec      	ldreq	r4, [r5, #12]
 80123da:	e7ca      	b.n	8012372 <__swbuf_r+0x1a>
 80123dc:	4621      	mov	r1, r4
 80123de:	4628      	mov	r0, r5
 80123e0:	f000 f80c 	bl	80123fc <__swsetup_r>
 80123e4:	2800      	cmp	r0, #0
 80123e6:	d0cb      	beq.n	8012380 <__swbuf_r+0x28>
 80123e8:	f04f 37ff 	mov.w	r7, #4294967295
 80123ec:	e7ea      	b.n	80123c4 <__swbuf_r+0x6c>
 80123ee:	bf00      	nop
 80123f0:	080131f4 	.word	0x080131f4
 80123f4:	08013214 	.word	0x08013214
 80123f8:	080131d4 	.word	0x080131d4

080123fc <__swsetup_r>:
 80123fc:	4b32      	ldr	r3, [pc, #200]	; (80124c8 <__swsetup_r+0xcc>)
 80123fe:	b570      	push	{r4, r5, r6, lr}
 8012400:	681d      	ldr	r5, [r3, #0]
 8012402:	4606      	mov	r6, r0
 8012404:	460c      	mov	r4, r1
 8012406:	b125      	cbz	r5, 8012412 <__swsetup_r+0x16>
 8012408:	69ab      	ldr	r3, [r5, #24]
 801240a:	b913      	cbnz	r3, 8012412 <__swsetup_r+0x16>
 801240c:	4628      	mov	r0, r5
 801240e:	f000 f985 	bl	801271c <__sinit>
 8012412:	4b2e      	ldr	r3, [pc, #184]	; (80124cc <__swsetup_r+0xd0>)
 8012414:	429c      	cmp	r4, r3
 8012416:	d10f      	bne.n	8012438 <__swsetup_r+0x3c>
 8012418:	686c      	ldr	r4, [r5, #4]
 801241a:	89a3      	ldrh	r3, [r4, #12]
 801241c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012420:	0719      	lsls	r1, r3, #28
 8012422:	d42c      	bmi.n	801247e <__swsetup_r+0x82>
 8012424:	06dd      	lsls	r5, r3, #27
 8012426:	d411      	bmi.n	801244c <__swsetup_r+0x50>
 8012428:	2309      	movs	r3, #9
 801242a:	6033      	str	r3, [r6, #0]
 801242c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8012430:	81a3      	strh	r3, [r4, #12]
 8012432:	f04f 30ff 	mov.w	r0, #4294967295
 8012436:	e03e      	b.n	80124b6 <__swsetup_r+0xba>
 8012438:	4b25      	ldr	r3, [pc, #148]	; (80124d0 <__swsetup_r+0xd4>)
 801243a:	429c      	cmp	r4, r3
 801243c:	d101      	bne.n	8012442 <__swsetup_r+0x46>
 801243e:	68ac      	ldr	r4, [r5, #8]
 8012440:	e7eb      	b.n	801241a <__swsetup_r+0x1e>
 8012442:	4b24      	ldr	r3, [pc, #144]	; (80124d4 <__swsetup_r+0xd8>)
 8012444:	429c      	cmp	r4, r3
 8012446:	bf08      	it	eq
 8012448:	68ec      	ldreq	r4, [r5, #12]
 801244a:	e7e6      	b.n	801241a <__swsetup_r+0x1e>
 801244c:	0758      	lsls	r0, r3, #29
 801244e:	d512      	bpl.n	8012476 <__swsetup_r+0x7a>
 8012450:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012452:	b141      	cbz	r1, 8012466 <__swsetup_r+0x6a>
 8012454:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012458:	4299      	cmp	r1, r3
 801245a:	d002      	beq.n	8012462 <__swsetup_r+0x66>
 801245c:	4630      	mov	r0, r6
 801245e:	f7ff fb27 	bl	8011ab0 <_free_r>
 8012462:	2300      	movs	r3, #0
 8012464:	6363      	str	r3, [r4, #52]	; 0x34
 8012466:	89a3      	ldrh	r3, [r4, #12]
 8012468:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801246c:	81a3      	strh	r3, [r4, #12]
 801246e:	2300      	movs	r3, #0
 8012470:	6063      	str	r3, [r4, #4]
 8012472:	6923      	ldr	r3, [r4, #16]
 8012474:	6023      	str	r3, [r4, #0]
 8012476:	89a3      	ldrh	r3, [r4, #12]
 8012478:	f043 0308 	orr.w	r3, r3, #8
 801247c:	81a3      	strh	r3, [r4, #12]
 801247e:	6923      	ldr	r3, [r4, #16]
 8012480:	b94b      	cbnz	r3, 8012496 <__swsetup_r+0x9a>
 8012482:	89a3      	ldrh	r3, [r4, #12]
 8012484:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012488:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801248c:	d003      	beq.n	8012496 <__swsetup_r+0x9a>
 801248e:	4621      	mov	r1, r4
 8012490:	4630      	mov	r0, r6
 8012492:	f000 fa09 	bl	80128a8 <__smakebuf_r>
 8012496:	89a0      	ldrh	r0, [r4, #12]
 8012498:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801249c:	f010 0301 	ands.w	r3, r0, #1
 80124a0:	d00a      	beq.n	80124b8 <__swsetup_r+0xbc>
 80124a2:	2300      	movs	r3, #0
 80124a4:	60a3      	str	r3, [r4, #8]
 80124a6:	6963      	ldr	r3, [r4, #20]
 80124a8:	425b      	negs	r3, r3
 80124aa:	61a3      	str	r3, [r4, #24]
 80124ac:	6923      	ldr	r3, [r4, #16]
 80124ae:	b943      	cbnz	r3, 80124c2 <__swsetup_r+0xc6>
 80124b0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80124b4:	d1ba      	bne.n	801242c <__swsetup_r+0x30>
 80124b6:	bd70      	pop	{r4, r5, r6, pc}
 80124b8:	0781      	lsls	r1, r0, #30
 80124ba:	bf58      	it	pl
 80124bc:	6963      	ldrpl	r3, [r4, #20]
 80124be:	60a3      	str	r3, [r4, #8]
 80124c0:	e7f4      	b.n	80124ac <__swsetup_r+0xb0>
 80124c2:	2000      	movs	r0, #0
 80124c4:	e7f7      	b.n	80124b6 <__swsetup_r+0xba>
 80124c6:	bf00      	nop
 80124c8:	200002c8 	.word	0x200002c8
 80124cc:	080131f4 	.word	0x080131f4
 80124d0:	08013214 	.word	0x08013214
 80124d4:	080131d4 	.word	0x080131d4

080124d8 <abort>:
 80124d8:	b508      	push	{r3, lr}
 80124da:	2006      	movs	r0, #6
 80124dc:	f000 fa54 	bl	8012988 <raise>
 80124e0:	2001      	movs	r0, #1
 80124e2:	f7ef fab9 	bl	8001a58 <_exit>
	...

080124e8 <__sflush_r>:
 80124e8:	898a      	ldrh	r2, [r1, #12]
 80124ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80124ee:	4605      	mov	r5, r0
 80124f0:	0710      	lsls	r0, r2, #28
 80124f2:	460c      	mov	r4, r1
 80124f4:	d458      	bmi.n	80125a8 <__sflush_r+0xc0>
 80124f6:	684b      	ldr	r3, [r1, #4]
 80124f8:	2b00      	cmp	r3, #0
 80124fa:	dc05      	bgt.n	8012508 <__sflush_r+0x20>
 80124fc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80124fe:	2b00      	cmp	r3, #0
 8012500:	dc02      	bgt.n	8012508 <__sflush_r+0x20>
 8012502:	2000      	movs	r0, #0
 8012504:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012508:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801250a:	2e00      	cmp	r6, #0
 801250c:	d0f9      	beq.n	8012502 <__sflush_r+0x1a>
 801250e:	2300      	movs	r3, #0
 8012510:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8012514:	682f      	ldr	r7, [r5, #0]
 8012516:	602b      	str	r3, [r5, #0]
 8012518:	d032      	beq.n	8012580 <__sflush_r+0x98>
 801251a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801251c:	89a3      	ldrh	r3, [r4, #12]
 801251e:	075a      	lsls	r2, r3, #29
 8012520:	d505      	bpl.n	801252e <__sflush_r+0x46>
 8012522:	6863      	ldr	r3, [r4, #4]
 8012524:	1ac0      	subs	r0, r0, r3
 8012526:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012528:	b10b      	cbz	r3, 801252e <__sflush_r+0x46>
 801252a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801252c:	1ac0      	subs	r0, r0, r3
 801252e:	2300      	movs	r3, #0
 8012530:	4602      	mov	r2, r0
 8012532:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012534:	6a21      	ldr	r1, [r4, #32]
 8012536:	4628      	mov	r0, r5
 8012538:	47b0      	blx	r6
 801253a:	1c43      	adds	r3, r0, #1
 801253c:	89a3      	ldrh	r3, [r4, #12]
 801253e:	d106      	bne.n	801254e <__sflush_r+0x66>
 8012540:	6829      	ldr	r1, [r5, #0]
 8012542:	291d      	cmp	r1, #29
 8012544:	d82c      	bhi.n	80125a0 <__sflush_r+0xb8>
 8012546:	4a2a      	ldr	r2, [pc, #168]	; (80125f0 <__sflush_r+0x108>)
 8012548:	40ca      	lsrs	r2, r1
 801254a:	07d6      	lsls	r6, r2, #31
 801254c:	d528      	bpl.n	80125a0 <__sflush_r+0xb8>
 801254e:	2200      	movs	r2, #0
 8012550:	6062      	str	r2, [r4, #4]
 8012552:	04d9      	lsls	r1, r3, #19
 8012554:	6922      	ldr	r2, [r4, #16]
 8012556:	6022      	str	r2, [r4, #0]
 8012558:	d504      	bpl.n	8012564 <__sflush_r+0x7c>
 801255a:	1c42      	adds	r2, r0, #1
 801255c:	d101      	bne.n	8012562 <__sflush_r+0x7a>
 801255e:	682b      	ldr	r3, [r5, #0]
 8012560:	b903      	cbnz	r3, 8012564 <__sflush_r+0x7c>
 8012562:	6560      	str	r0, [r4, #84]	; 0x54
 8012564:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012566:	602f      	str	r7, [r5, #0]
 8012568:	2900      	cmp	r1, #0
 801256a:	d0ca      	beq.n	8012502 <__sflush_r+0x1a>
 801256c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012570:	4299      	cmp	r1, r3
 8012572:	d002      	beq.n	801257a <__sflush_r+0x92>
 8012574:	4628      	mov	r0, r5
 8012576:	f7ff fa9b 	bl	8011ab0 <_free_r>
 801257a:	2000      	movs	r0, #0
 801257c:	6360      	str	r0, [r4, #52]	; 0x34
 801257e:	e7c1      	b.n	8012504 <__sflush_r+0x1c>
 8012580:	6a21      	ldr	r1, [r4, #32]
 8012582:	2301      	movs	r3, #1
 8012584:	4628      	mov	r0, r5
 8012586:	47b0      	blx	r6
 8012588:	1c41      	adds	r1, r0, #1
 801258a:	d1c7      	bne.n	801251c <__sflush_r+0x34>
 801258c:	682b      	ldr	r3, [r5, #0]
 801258e:	2b00      	cmp	r3, #0
 8012590:	d0c4      	beq.n	801251c <__sflush_r+0x34>
 8012592:	2b1d      	cmp	r3, #29
 8012594:	d001      	beq.n	801259a <__sflush_r+0xb2>
 8012596:	2b16      	cmp	r3, #22
 8012598:	d101      	bne.n	801259e <__sflush_r+0xb6>
 801259a:	602f      	str	r7, [r5, #0]
 801259c:	e7b1      	b.n	8012502 <__sflush_r+0x1a>
 801259e:	89a3      	ldrh	r3, [r4, #12]
 80125a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80125a4:	81a3      	strh	r3, [r4, #12]
 80125a6:	e7ad      	b.n	8012504 <__sflush_r+0x1c>
 80125a8:	690f      	ldr	r7, [r1, #16]
 80125aa:	2f00      	cmp	r7, #0
 80125ac:	d0a9      	beq.n	8012502 <__sflush_r+0x1a>
 80125ae:	0793      	lsls	r3, r2, #30
 80125b0:	680e      	ldr	r6, [r1, #0]
 80125b2:	bf08      	it	eq
 80125b4:	694b      	ldreq	r3, [r1, #20]
 80125b6:	600f      	str	r7, [r1, #0]
 80125b8:	bf18      	it	ne
 80125ba:	2300      	movne	r3, #0
 80125bc:	eba6 0807 	sub.w	r8, r6, r7
 80125c0:	608b      	str	r3, [r1, #8]
 80125c2:	f1b8 0f00 	cmp.w	r8, #0
 80125c6:	dd9c      	ble.n	8012502 <__sflush_r+0x1a>
 80125c8:	6a21      	ldr	r1, [r4, #32]
 80125ca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80125cc:	4643      	mov	r3, r8
 80125ce:	463a      	mov	r2, r7
 80125d0:	4628      	mov	r0, r5
 80125d2:	47b0      	blx	r6
 80125d4:	2800      	cmp	r0, #0
 80125d6:	dc06      	bgt.n	80125e6 <__sflush_r+0xfe>
 80125d8:	89a3      	ldrh	r3, [r4, #12]
 80125da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80125de:	81a3      	strh	r3, [r4, #12]
 80125e0:	f04f 30ff 	mov.w	r0, #4294967295
 80125e4:	e78e      	b.n	8012504 <__sflush_r+0x1c>
 80125e6:	4407      	add	r7, r0
 80125e8:	eba8 0800 	sub.w	r8, r8, r0
 80125ec:	e7e9      	b.n	80125c2 <__sflush_r+0xda>
 80125ee:	bf00      	nop
 80125f0:	20400001 	.word	0x20400001

080125f4 <_fflush_r>:
 80125f4:	b538      	push	{r3, r4, r5, lr}
 80125f6:	690b      	ldr	r3, [r1, #16]
 80125f8:	4605      	mov	r5, r0
 80125fa:	460c      	mov	r4, r1
 80125fc:	b913      	cbnz	r3, 8012604 <_fflush_r+0x10>
 80125fe:	2500      	movs	r5, #0
 8012600:	4628      	mov	r0, r5
 8012602:	bd38      	pop	{r3, r4, r5, pc}
 8012604:	b118      	cbz	r0, 801260e <_fflush_r+0x1a>
 8012606:	6983      	ldr	r3, [r0, #24]
 8012608:	b90b      	cbnz	r3, 801260e <_fflush_r+0x1a>
 801260a:	f000 f887 	bl	801271c <__sinit>
 801260e:	4b14      	ldr	r3, [pc, #80]	; (8012660 <_fflush_r+0x6c>)
 8012610:	429c      	cmp	r4, r3
 8012612:	d11b      	bne.n	801264c <_fflush_r+0x58>
 8012614:	686c      	ldr	r4, [r5, #4]
 8012616:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801261a:	2b00      	cmp	r3, #0
 801261c:	d0ef      	beq.n	80125fe <_fflush_r+0xa>
 801261e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012620:	07d0      	lsls	r0, r2, #31
 8012622:	d404      	bmi.n	801262e <_fflush_r+0x3a>
 8012624:	0599      	lsls	r1, r3, #22
 8012626:	d402      	bmi.n	801262e <_fflush_r+0x3a>
 8012628:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801262a:	f000 f915 	bl	8012858 <__retarget_lock_acquire_recursive>
 801262e:	4628      	mov	r0, r5
 8012630:	4621      	mov	r1, r4
 8012632:	f7ff ff59 	bl	80124e8 <__sflush_r>
 8012636:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012638:	07da      	lsls	r2, r3, #31
 801263a:	4605      	mov	r5, r0
 801263c:	d4e0      	bmi.n	8012600 <_fflush_r+0xc>
 801263e:	89a3      	ldrh	r3, [r4, #12]
 8012640:	059b      	lsls	r3, r3, #22
 8012642:	d4dd      	bmi.n	8012600 <_fflush_r+0xc>
 8012644:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012646:	f000 f908 	bl	801285a <__retarget_lock_release_recursive>
 801264a:	e7d9      	b.n	8012600 <_fflush_r+0xc>
 801264c:	4b05      	ldr	r3, [pc, #20]	; (8012664 <_fflush_r+0x70>)
 801264e:	429c      	cmp	r4, r3
 8012650:	d101      	bne.n	8012656 <_fflush_r+0x62>
 8012652:	68ac      	ldr	r4, [r5, #8]
 8012654:	e7df      	b.n	8012616 <_fflush_r+0x22>
 8012656:	4b04      	ldr	r3, [pc, #16]	; (8012668 <_fflush_r+0x74>)
 8012658:	429c      	cmp	r4, r3
 801265a:	bf08      	it	eq
 801265c:	68ec      	ldreq	r4, [r5, #12]
 801265e:	e7da      	b.n	8012616 <_fflush_r+0x22>
 8012660:	080131f4 	.word	0x080131f4
 8012664:	08013214 	.word	0x08013214
 8012668:	080131d4 	.word	0x080131d4

0801266c <std>:
 801266c:	2300      	movs	r3, #0
 801266e:	b510      	push	{r4, lr}
 8012670:	4604      	mov	r4, r0
 8012672:	e9c0 3300 	strd	r3, r3, [r0]
 8012676:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801267a:	6083      	str	r3, [r0, #8]
 801267c:	8181      	strh	r1, [r0, #12]
 801267e:	6643      	str	r3, [r0, #100]	; 0x64
 8012680:	81c2      	strh	r2, [r0, #14]
 8012682:	6183      	str	r3, [r0, #24]
 8012684:	4619      	mov	r1, r3
 8012686:	2208      	movs	r2, #8
 8012688:	305c      	adds	r0, #92	; 0x5c
 801268a:	f7fb fdd5 	bl	800e238 <memset>
 801268e:	4b05      	ldr	r3, [pc, #20]	; (80126a4 <std+0x38>)
 8012690:	6263      	str	r3, [r4, #36]	; 0x24
 8012692:	4b05      	ldr	r3, [pc, #20]	; (80126a8 <std+0x3c>)
 8012694:	62a3      	str	r3, [r4, #40]	; 0x28
 8012696:	4b05      	ldr	r3, [pc, #20]	; (80126ac <std+0x40>)
 8012698:	62e3      	str	r3, [r4, #44]	; 0x2c
 801269a:	4b05      	ldr	r3, [pc, #20]	; (80126b0 <std+0x44>)
 801269c:	6224      	str	r4, [r4, #32]
 801269e:	6323      	str	r3, [r4, #48]	; 0x30
 80126a0:	bd10      	pop	{r4, pc}
 80126a2:	bf00      	nop
 80126a4:	080129c1 	.word	0x080129c1
 80126a8:	080129e3 	.word	0x080129e3
 80126ac:	08012a1b 	.word	0x08012a1b
 80126b0:	08012a3f 	.word	0x08012a3f

080126b4 <_cleanup_r>:
 80126b4:	4901      	ldr	r1, [pc, #4]	; (80126bc <_cleanup_r+0x8>)
 80126b6:	f000 b8af 	b.w	8012818 <_fwalk_reent>
 80126ba:	bf00      	nop
 80126bc:	080125f5 	.word	0x080125f5

080126c0 <__sfmoreglue>:
 80126c0:	b570      	push	{r4, r5, r6, lr}
 80126c2:	2268      	movs	r2, #104	; 0x68
 80126c4:	1e4d      	subs	r5, r1, #1
 80126c6:	4355      	muls	r5, r2
 80126c8:	460e      	mov	r6, r1
 80126ca:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80126ce:	f7ff fa5b 	bl	8011b88 <_malloc_r>
 80126d2:	4604      	mov	r4, r0
 80126d4:	b140      	cbz	r0, 80126e8 <__sfmoreglue+0x28>
 80126d6:	2100      	movs	r1, #0
 80126d8:	e9c0 1600 	strd	r1, r6, [r0]
 80126dc:	300c      	adds	r0, #12
 80126de:	60a0      	str	r0, [r4, #8]
 80126e0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80126e4:	f7fb fda8 	bl	800e238 <memset>
 80126e8:	4620      	mov	r0, r4
 80126ea:	bd70      	pop	{r4, r5, r6, pc}

080126ec <__sfp_lock_acquire>:
 80126ec:	4801      	ldr	r0, [pc, #4]	; (80126f4 <__sfp_lock_acquire+0x8>)
 80126ee:	f000 b8b3 	b.w	8012858 <__retarget_lock_acquire_recursive>
 80126f2:	bf00      	nop
 80126f4:	20000769 	.word	0x20000769

080126f8 <__sfp_lock_release>:
 80126f8:	4801      	ldr	r0, [pc, #4]	; (8012700 <__sfp_lock_release+0x8>)
 80126fa:	f000 b8ae 	b.w	801285a <__retarget_lock_release_recursive>
 80126fe:	bf00      	nop
 8012700:	20000769 	.word	0x20000769

08012704 <__sinit_lock_acquire>:
 8012704:	4801      	ldr	r0, [pc, #4]	; (801270c <__sinit_lock_acquire+0x8>)
 8012706:	f000 b8a7 	b.w	8012858 <__retarget_lock_acquire_recursive>
 801270a:	bf00      	nop
 801270c:	2000076a 	.word	0x2000076a

08012710 <__sinit_lock_release>:
 8012710:	4801      	ldr	r0, [pc, #4]	; (8012718 <__sinit_lock_release+0x8>)
 8012712:	f000 b8a2 	b.w	801285a <__retarget_lock_release_recursive>
 8012716:	bf00      	nop
 8012718:	2000076a 	.word	0x2000076a

0801271c <__sinit>:
 801271c:	b510      	push	{r4, lr}
 801271e:	4604      	mov	r4, r0
 8012720:	f7ff fff0 	bl	8012704 <__sinit_lock_acquire>
 8012724:	69a3      	ldr	r3, [r4, #24]
 8012726:	b11b      	cbz	r3, 8012730 <__sinit+0x14>
 8012728:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801272c:	f7ff bff0 	b.w	8012710 <__sinit_lock_release>
 8012730:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8012734:	6523      	str	r3, [r4, #80]	; 0x50
 8012736:	4b13      	ldr	r3, [pc, #76]	; (8012784 <__sinit+0x68>)
 8012738:	4a13      	ldr	r2, [pc, #76]	; (8012788 <__sinit+0x6c>)
 801273a:	681b      	ldr	r3, [r3, #0]
 801273c:	62a2      	str	r2, [r4, #40]	; 0x28
 801273e:	42a3      	cmp	r3, r4
 8012740:	bf04      	itt	eq
 8012742:	2301      	moveq	r3, #1
 8012744:	61a3      	streq	r3, [r4, #24]
 8012746:	4620      	mov	r0, r4
 8012748:	f000 f820 	bl	801278c <__sfp>
 801274c:	6060      	str	r0, [r4, #4]
 801274e:	4620      	mov	r0, r4
 8012750:	f000 f81c 	bl	801278c <__sfp>
 8012754:	60a0      	str	r0, [r4, #8]
 8012756:	4620      	mov	r0, r4
 8012758:	f000 f818 	bl	801278c <__sfp>
 801275c:	2200      	movs	r2, #0
 801275e:	60e0      	str	r0, [r4, #12]
 8012760:	2104      	movs	r1, #4
 8012762:	6860      	ldr	r0, [r4, #4]
 8012764:	f7ff ff82 	bl	801266c <std>
 8012768:	68a0      	ldr	r0, [r4, #8]
 801276a:	2201      	movs	r2, #1
 801276c:	2109      	movs	r1, #9
 801276e:	f7ff ff7d 	bl	801266c <std>
 8012772:	68e0      	ldr	r0, [r4, #12]
 8012774:	2202      	movs	r2, #2
 8012776:	2112      	movs	r1, #18
 8012778:	f7ff ff78 	bl	801266c <std>
 801277c:	2301      	movs	r3, #1
 801277e:	61a3      	str	r3, [r4, #24]
 8012780:	e7d2      	b.n	8012728 <__sinit+0xc>
 8012782:	bf00      	nop
 8012784:	08012d8c 	.word	0x08012d8c
 8012788:	080126b5 	.word	0x080126b5

0801278c <__sfp>:
 801278c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801278e:	4607      	mov	r7, r0
 8012790:	f7ff ffac 	bl	80126ec <__sfp_lock_acquire>
 8012794:	4b1e      	ldr	r3, [pc, #120]	; (8012810 <__sfp+0x84>)
 8012796:	681e      	ldr	r6, [r3, #0]
 8012798:	69b3      	ldr	r3, [r6, #24]
 801279a:	b913      	cbnz	r3, 80127a2 <__sfp+0x16>
 801279c:	4630      	mov	r0, r6
 801279e:	f7ff ffbd 	bl	801271c <__sinit>
 80127a2:	3648      	adds	r6, #72	; 0x48
 80127a4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80127a8:	3b01      	subs	r3, #1
 80127aa:	d503      	bpl.n	80127b4 <__sfp+0x28>
 80127ac:	6833      	ldr	r3, [r6, #0]
 80127ae:	b30b      	cbz	r3, 80127f4 <__sfp+0x68>
 80127b0:	6836      	ldr	r6, [r6, #0]
 80127b2:	e7f7      	b.n	80127a4 <__sfp+0x18>
 80127b4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80127b8:	b9d5      	cbnz	r5, 80127f0 <__sfp+0x64>
 80127ba:	4b16      	ldr	r3, [pc, #88]	; (8012814 <__sfp+0x88>)
 80127bc:	60e3      	str	r3, [r4, #12]
 80127be:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80127c2:	6665      	str	r5, [r4, #100]	; 0x64
 80127c4:	f000 f847 	bl	8012856 <__retarget_lock_init_recursive>
 80127c8:	f7ff ff96 	bl	80126f8 <__sfp_lock_release>
 80127cc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80127d0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80127d4:	6025      	str	r5, [r4, #0]
 80127d6:	61a5      	str	r5, [r4, #24]
 80127d8:	2208      	movs	r2, #8
 80127da:	4629      	mov	r1, r5
 80127dc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80127e0:	f7fb fd2a 	bl	800e238 <memset>
 80127e4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80127e8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80127ec:	4620      	mov	r0, r4
 80127ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80127f0:	3468      	adds	r4, #104	; 0x68
 80127f2:	e7d9      	b.n	80127a8 <__sfp+0x1c>
 80127f4:	2104      	movs	r1, #4
 80127f6:	4638      	mov	r0, r7
 80127f8:	f7ff ff62 	bl	80126c0 <__sfmoreglue>
 80127fc:	4604      	mov	r4, r0
 80127fe:	6030      	str	r0, [r6, #0]
 8012800:	2800      	cmp	r0, #0
 8012802:	d1d5      	bne.n	80127b0 <__sfp+0x24>
 8012804:	f7ff ff78 	bl	80126f8 <__sfp_lock_release>
 8012808:	230c      	movs	r3, #12
 801280a:	603b      	str	r3, [r7, #0]
 801280c:	e7ee      	b.n	80127ec <__sfp+0x60>
 801280e:	bf00      	nop
 8012810:	08012d8c 	.word	0x08012d8c
 8012814:	ffff0001 	.word	0xffff0001

08012818 <_fwalk_reent>:
 8012818:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801281c:	4606      	mov	r6, r0
 801281e:	4688      	mov	r8, r1
 8012820:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8012824:	2700      	movs	r7, #0
 8012826:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801282a:	f1b9 0901 	subs.w	r9, r9, #1
 801282e:	d505      	bpl.n	801283c <_fwalk_reent+0x24>
 8012830:	6824      	ldr	r4, [r4, #0]
 8012832:	2c00      	cmp	r4, #0
 8012834:	d1f7      	bne.n	8012826 <_fwalk_reent+0xe>
 8012836:	4638      	mov	r0, r7
 8012838:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801283c:	89ab      	ldrh	r3, [r5, #12]
 801283e:	2b01      	cmp	r3, #1
 8012840:	d907      	bls.n	8012852 <_fwalk_reent+0x3a>
 8012842:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012846:	3301      	adds	r3, #1
 8012848:	d003      	beq.n	8012852 <_fwalk_reent+0x3a>
 801284a:	4629      	mov	r1, r5
 801284c:	4630      	mov	r0, r6
 801284e:	47c0      	blx	r8
 8012850:	4307      	orrs	r7, r0
 8012852:	3568      	adds	r5, #104	; 0x68
 8012854:	e7e9      	b.n	801282a <_fwalk_reent+0x12>

08012856 <__retarget_lock_init_recursive>:
 8012856:	4770      	bx	lr

08012858 <__retarget_lock_acquire_recursive>:
 8012858:	4770      	bx	lr

0801285a <__retarget_lock_release_recursive>:
 801285a:	4770      	bx	lr

0801285c <__swhatbuf_r>:
 801285c:	b570      	push	{r4, r5, r6, lr}
 801285e:	460e      	mov	r6, r1
 8012860:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012864:	2900      	cmp	r1, #0
 8012866:	b096      	sub	sp, #88	; 0x58
 8012868:	4614      	mov	r4, r2
 801286a:	461d      	mov	r5, r3
 801286c:	da08      	bge.n	8012880 <__swhatbuf_r+0x24>
 801286e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8012872:	2200      	movs	r2, #0
 8012874:	602a      	str	r2, [r5, #0]
 8012876:	061a      	lsls	r2, r3, #24
 8012878:	d410      	bmi.n	801289c <__swhatbuf_r+0x40>
 801287a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801287e:	e00e      	b.n	801289e <__swhatbuf_r+0x42>
 8012880:	466a      	mov	r2, sp
 8012882:	f000 f903 	bl	8012a8c <_fstat_r>
 8012886:	2800      	cmp	r0, #0
 8012888:	dbf1      	blt.n	801286e <__swhatbuf_r+0x12>
 801288a:	9a01      	ldr	r2, [sp, #4]
 801288c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8012890:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8012894:	425a      	negs	r2, r3
 8012896:	415a      	adcs	r2, r3
 8012898:	602a      	str	r2, [r5, #0]
 801289a:	e7ee      	b.n	801287a <__swhatbuf_r+0x1e>
 801289c:	2340      	movs	r3, #64	; 0x40
 801289e:	2000      	movs	r0, #0
 80128a0:	6023      	str	r3, [r4, #0]
 80128a2:	b016      	add	sp, #88	; 0x58
 80128a4:	bd70      	pop	{r4, r5, r6, pc}
	...

080128a8 <__smakebuf_r>:
 80128a8:	898b      	ldrh	r3, [r1, #12]
 80128aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80128ac:	079d      	lsls	r5, r3, #30
 80128ae:	4606      	mov	r6, r0
 80128b0:	460c      	mov	r4, r1
 80128b2:	d507      	bpl.n	80128c4 <__smakebuf_r+0x1c>
 80128b4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80128b8:	6023      	str	r3, [r4, #0]
 80128ba:	6123      	str	r3, [r4, #16]
 80128bc:	2301      	movs	r3, #1
 80128be:	6163      	str	r3, [r4, #20]
 80128c0:	b002      	add	sp, #8
 80128c2:	bd70      	pop	{r4, r5, r6, pc}
 80128c4:	ab01      	add	r3, sp, #4
 80128c6:	466a      	mov	r2, sp
 80128c8:	f7ff ffc8 	bl	801285c <__swhatbuf_r>
 80128cc:	9900      	ldr	r1, [sp, #0]
 80128ce:	4605      	mov	r5, r0
 80128d0:	4630      	mov	r0, r6
 80128d2:	f7ff f959 	bl	8011b88 <_malloc_r>
 80128d6:	b948      	cbnz	r0, 80128ec <__smakebuf_r+0x44>
 80128d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80128dc:	059a      	lsls	r2, r3, #22
 80128de:	d4ef      	bmi.n	80128c0 <__smakebuf_r+0x18>
 80128e0:	f023 0303 	bic.w	r3, r3, #3
 80128e4:	f043 0302 	orr.w	r3, r3, #2
 80128e8:	81a3      	strh	r3, [r4, #12]
 80128ea:	e7e3      	b.n	80128b4 <__smakebuf_r+0xc>
 80128ec:	4b0d      	ldr	r3, [pc, #52]	; (8012924 <__smakebuf_r+0x7c>)
 80128ee:	62b3      	str	r3, [r6, #40]	; 0x28
 80128f0:	89a3      	ldrh	r3, [r4, #12]
 80128f2:	6020      	str	r0, [r4, #0]
 80128f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80128f8:	81a3      	strh	r3, [r4, #12]
 80128fa:	9b00      	ldr	r3, [sp, #0]
 80128fc:	6163      	str	r3, [r4, #20]
 80128fe:	9b01      	ldr	r3, [sp, #4]
 8012900:	6120      	str	r0, [r4, #16]
 8012902:	b15b      	cbz	r3, 801291c <__smakebuf_r+0x74>
 8012904:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012908:	4630      	mov	r0, r6
 801290a:	f000 f8d1 	bl	8012ab0 <_isatty_r>
 801290e:	b128      	cbz	r0, 801291c <__smakebuf_r+0x74>
 8012910:	89a3      	ldrh	r3, [r4, #12]
 8012912:	f023 0303 	bic.w	r3, r3, #3
 8012916:	f043 0301 	orr.w	r3, r3, #1
 801291a:	81a3      	strh	r3, [r4, #12]
 801291c:	89a0      	ldrh	r0, [r4, #12]
 801291e:	4305      	orrs	r5, r0
 8012920:	81a5      	strh	r5, [r4, #12]
 8012922:	e7cd      	b.n	80128c0 <__smakebuf_r+0x18>
 8012924:	080126b5 	.word	0x080126b5

08012928 <_malloc_usable_size_r>:
 8012928:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801292c:	1f18      	subs	r0, r3, #4
 801292e:	2b00      	cmp	r3, #0
 8012930:	bfbc      	itt	lt
 8012932:	580b      	ldrlt	r3, [r1, r0]
 8012934:	18c0      	addlt	r0, r0, r3
 8012936:	4770      	bx	lr

08012938 <_raise_r>:
 8012938:	291f      	cmp	r1, #31
 801293a:	b538      	push	{r3, r4, r5, lr}
 801293c:	4604      	mov	r4, r0
 801293e:	460d      	mov	r5, r1
 8012940:	d904      	bls.n	801294c <_raise_r+0x14>
 8012942:	2316      	movs	r3, #22
 8012944:	6003      	str	r3, [r0, #0]
 8012946:	f04f 30ff 	mov.w	r0, #4294967295
 801294a:	bd38      	pop	{r3, r4, r5, pc}
 801294c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801294e:	b112      	cbz	r2, 8012956 <_raise_r+0x1e>
 8012950:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012954:	b94b      	cbnz	r3, 801296a <_raise_r+0x32>
 8012956:	4620      	mov	r0, r4
 8012958:	f000 f830 	bl	80129bc <_getpid_r>
 801295c:	462a      	mov	r2, r5
 801295e:	4601      	mov	r1, r0
 8012960:	4620      	mov	r0, r4
 8012962:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012966:	f000 b817 	b.w	8012998 <_kill_r>
 801296a:	2b01      	cmp	r3, #1
 801296c:	d00a      	beq.n	8012984 <_raise_r+0x4c>
 801296e:	1c59      	adds	r1, r3, #1
 8012970:	d103      	bne.n	801297a <_raise_r+0x42>
 8012972:	2316      	movs	r3, #22
 8012974:	6003      	str	r3, [r0, #0]
 8012976:	2001      	movs	r0, #1
 8012978:	e7e7      	b.n	801294a <_raise_r+0x12>
 801297a:	2400      	movs	r4, #0
 801297c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8012980:	4628      	mov	r0, r5
 8012982:	4798      	blx	r3
 8012984:	2000      	movs	r0, #0
 8012986:	e7e0      	b.n	801294a <_raise_r+0x12>

08012988 <raise>:
 8012988:	4b02      	ldr	r3, [pc, #8]	; (8012994 <raise+0xc>)
 801298a:	4601      	mov	r1, r0
 801298c:	6818      	ldr	r0, [r3, #0]
 801298e:	f7ff bfd3 	b.w	8012938 <_raise_r>
 8012992:	bf00      	nop
 8012994:	200002c8 	.word	0x200002c8

08012998 <_kill_r>:
 8012998:	b538      	push	{r3, r4, r5, lr}
 801299a:	4d07      	ldr	r5, [pc, #28]	; (80129b8 <_kill_r+0x20>)
 801299c:	2300      	movs	r3, #0
 801299e:	4604      	mov	r4, r0
 80129a0:	4608      	mov	r0, r1
 80129a2:	4611      	mov	r1, r2
 80129a4:	602b      	str	r3, [r5, #0]
 80129a6:	f7ef f847 	bl	8001a38 <_kill>
 80129aa:	1c43      	adds	r3, r0, #1
 80129ac:	d102      	bne.n	80129b4 <_kill_r+0x1c>
 80129ae:	682b      	ldr	r3, [r5, #0]
 80129b0:	b103      	cbz	r3, 80129b4 <_kill_r+0x1c>
 80129b2:	6023      	str	r3, [r4, #0]
 80129b4:	bd38      	pop	{r3, r4, r5, pc}
 80129b6:	bf00      	nop
 80129b8:	20000764 	.word	0x20000764

080129bc <_getpid_r>:
 80129bc:	f7ef b834 	b.w	8001a28 <_getpid>

080129c0 <__sread>:
 80129c0:	b510      	push	{r4, lr}
 80129c2:	460c      	mov	r4, r1
 80129c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80129c8:	f000 f894 	bl	8012af4 <_read_r>
 80129cc:	2800      	cmp	r0, #0
 80129ce:	bfab      	itete	ge
 80129d0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80129d2:	89a3      	ldrhlt	r3, [r4, #12]
 80129d4:	181b      	addge	r3, r3, r0
 80129d6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80129da:	bfac      	ite	ge
 80129dc:	6563      	strge	r3, [r4, #84]	; 0x54
 80129de:	81a3      	strhlt	r3, [r4, #12]
 80129e0:	bd10      	pop	{r4, pc}

080129e2 <__swrite>:
 80129e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80129e6:	461f      	mov	r7, r3
 80129e8:	898b      	ldrh	r3, [r1, #12]
 80129ea:	05db      	lsls	r3, r3, #23
 80129ec:	4605      	mov	r5, r0
 80129ee:	460c      	mov	r4, r1
 80129f0:	4616      	mov	r6, r2
 80129f2:	d505      	bpl.n	8012a00 <__swrite+0x1e>
 80129f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80129f8:	2302      	movs	r3, #2
 80129fa:	2200      	movs	r2, #0
 80129fc:	f000 f868 	bl	8012ad0 <_lseek_r>
 8012a00:	89a3      	ldrh	r3, [r4, #12]
 8012a02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012a06:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012a0a:	81a3      	strh	r3, [r4, #12]
 8012a0c:	4632      	mov	r2, r6
 8012a0e:	463b      	mov	r3, r7
 8012a10:	4628      	mov	r0, r5
 8012a12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012a16:	f000 b817 	b.w	8012a48 <_write_r>

08012a1a <__sseek>:
 8012a1a:	b510      	push	{r4, lr}
 8012a1c:	460c      	mov	r4, r1
 8012a1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012a22:	f000 f855 	bl	8012ad0 <_lseek_r>
 8012a26:	1c43      	adds	r3, r0, #1
 8012a28:	89a3      	ldrh	r3, [r4, #12]
 8012a2a:	bf15      	itete	ne
 8012a2c:	6560      	strne	r0, [r4, #84]	; 0x54
 8012a2e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8012a32:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8012a36:	81a3      	strheq	r3, [r4, #12]
 8012a38:	bf18      	it	ne
 8012a3a:	81a3      	strhne	r3, [r4, #12]
 8012a3c:	bd10      	pop	{r4, pc}

08012a3e <__sclose>:
 8012a3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012a42:	f000 b813 	b.w	8012a6c <_close_r>
	...

08012a48 <_write_r>:
 8012a48:	b538      	push	{r3, r4, r5, lr}
 8012a4a:	4d07      	ldr	r5, [pc, #28]	; (8012a68 <_write_r+0x20>)
 8012a4c:	4604      	mov	r4, r0
 8012a4e:	4608      	mov	r0, r1
 8012a50:	4611      	mov	r1, r2
 8012a52:	2200      	movs	r2, #0
 8012a54:	602a      	str	r2, [r5, #0]
 8012a56:	461a      	mov	r2, r3
 8012a58:	f7ef f825 	bl	8001aa6 <_write>
 8012a5c:	1c43      	adds	r3, r0, #1
 8012a5e:	d102      	bne.n	8012a66 <_write_r+0x1e>
 8012a60:	682b      	ldr	r3, [r5, #0]
 8012a62:	b103      	cbz	r3, 8012a66 <_write_r+0x1e>
 8012a64:	6023      	str	r3, [r4, #0]
 8012a66:	bd38      	pop	{r3, r4, r5, pc}
 8012a68:	20000764 	.word	0x20000764

08012a6c <_close_r>:
 8012a6c:	b538      	push	{r3, r4, r5, lr}
 8012a6e:	4d06      	ldr	r5, [pc, #24]	; (8012a88 <_close_r+0x1c>)
 8012a70:	2300      	movs	r3, #0
 8012a72:	4604      	mov	r4, r0
 8012a74:	4608      	mov	r0, r1
 8012a76:	602b      	str	r3, [r5, #0]
 8012a78:	f7ef f831 	bl	8001ade <_close>
 8012a7c:	1c43      	adds	r3, r0, #1
 8012a7e:	d102      	bne.n	8012a86 <_close_r+0x1a>
 8012a80:	682b      	ldr	r3, [r5, #0]
 8012a82:	b103      	cbz	r3, 8012a86 <_close_r+0x1a>
 8012a84:	6023      	str	r3, [r4, #0]
 8012a86:	bd38      	pop	{r3, r4, r5, pc}
 8012a88:	20000764 	.word	0x20000764

08012a8c <_fstat_r>:
 8012a8c:	b538      	push	{r3, r4, r5, lr}
 8012a8e:	4d07      	ldr	r5, [pc, #28]	; (8012aac <_fstat_r+0x20>)
 8012a90:	2300      	movs	r3, #0
 8012a92:	4604      	mov	r4, r0
 8012a94:	4608      	mov	r0, r1
 8012a96:	4611      	mov	r1, r2
 8012a98:	602b      	str	r3, [r5, #0]
 8012a9a:	f7ef f82c 	bl	8001af6 <_fstat>
 8012a9e:	1c43      	adds	r3, r0, #1
 8012aa0:	d102      	bne.n	8012aa8 <_fstat_r+0x1c>
 8012aa2:	682b      	ldr	r3, [r5, #0]
 8012aa4:	b103      	cbz	r3, 8012aa8 <_fstat_r+0x1c>
 8012aa6:	6023      	str	r3, [r4, #0]
 8012aa8:	bd38      	pop	{r3, r4, r5, pc}
 8012aaa:	bf00      	nop
 8012aac:	20000764 	.word	0x20000764

08012ab0 <_isatty_r>:
 8012ab0:	b538      	push	{r3, r4, r5, lr}
 8012ab2:	4d06      	ldr	r5, [pc, #24]	; (8012acc <_isatty_r+0x1c>)
 8012ab4:	2300      	movs	r3, #0
 8012ab6:	4604      	mov	r4, r0
 8012ab8:	4608      	mov	r0, r1
 8012aba:	602b      	str	r3, [r5, #0]
 8012abc:	f7ef f82b 	bl	8001b16 <_isatty>
 8012ac0:	1c43      	adds	r3, r0, #1
 8012ac2:	d102      	bne.n	8012aca <_isatty_r+0x1a>
 8012ac4:	682b      	ldr	r3, [r5, #0]
 8012ac6:	b103      	cbz	r3, 8012aca <_isatty_r+0x1a>
 8012ac8:	6023      	str	r3, [r4, #0]
 8012aca:	bd38      	pop	{r3, r4, r5, pc}
 8012acc:	20000764 	.word	0x20000764

08012ad0 <_lseek_r>:
 8012ad0:	b538      	push	{r3, r4, r5, lr}
 8012ad2:	4d07      	ldr	r5, [pc, #28]	; (8012af0 <_lseek_r+0x20>)
 8012ad4:	4604      	mov	r4, r0
 8012ad6:	4608      	mov	r0, r1
 8012ad8:	4611      	mov	r1, r2
 8012ada:	2200      	movs	r2, #0
 8012adc:	602a      	str	r2, [r5, #0]
 8012ade:	461a      	mov	r2, r3
 8012ae0:	f7ef f824 	bl	8001b2c <_lseek>
 8012ae4:	1c43      	adds	r3, r0, #1
 8012ae6:	d102      	bne.n	8012aee <_lseek_r+0x1e>
 8012ae8:	682b      	ldr	r3, [r5, #0]
 8012aea:	b103      	cbz	r3, 8012aee <_lseek_r+0x1e>
 8012aec:	6023      	str	r3, [r4, #0]
 8012aee:	bd38      	pop	{r3, r4, r5, pc}
 8012af0:	20000764 	.word	0x20000764

08012af4 <_read_r>:
 8012af4:	b538      	push	{r3, r4, r5, lr}
 8012af6:	4d07      	ldr	r5, [pc, #28]	; (8012b14 <_read_r+0x20>)
 8012af8:	4604      	mov	r4, r0
 8012afa:	4608      	mov	r0, r1
 8012afc:	4611      	mov	r1, r2
 8012afe:	2200      	movs	r2, #0
 8012b00:	602a      	str	r2, [r5, #0]
 8012b02:	461a      	mov	r2, r3
 8012b04:	f7ee ffb2 	bl	8001a6c <_read>
 8012b08:	1c43      	adds	r3, r0, #1
 8012b0a:	d102      	bne.n	8012b12 <_read_r+0x1e>
 8012b0c:	682b      	ldr	r3, [r5, #0]
 8012b0e:	b103      	cbz	r3, 8012b12 <_read_r+0x1e>
 8012b10:	6023      	str	r3, [r4, #0]
 8012b12:	bd38      	pop	{r3, r4, r5, pc}
 8012b14:	20000764 	.word	0x20000764

08012b18 <_init>:
 8012b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012b1a:	bf00      	nop
 8012b1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012b1e:	bc08      	pop	{r3}
 8012b20:	469e      	mov	lr, r3
 8012b22:	4770      	bx	lr

08012b24 <_fini>:
 8012b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012b26:	bf00      	nop
 8012b28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012b2a:	bc08      	pop	{r3}
 8012b2c:	469e      	mov	lr, r3
 8012b2e:	4770      	bx	lr
