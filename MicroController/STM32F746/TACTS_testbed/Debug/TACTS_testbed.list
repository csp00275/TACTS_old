
TACTS_testbed.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016044  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c18  08016218  08016218  00026218  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016e30  08016e30  00030560  2**0
                  CONTENTS
  4 .ARM          00000008  08016e30  08016e30  00026e30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016e38  08016e38  00030560  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016e38  08016e38  00026e38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08016e3c  08016e3c  00026e3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000560  20000000  08016e40  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00009c3c  20000560  080173a0  00030560  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000a19c  080173a0  0003a19c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030560  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022f21  00000000  00000000  00030590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000040fe  00000000  00000000  000534b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001838  00000000  00000000  000575b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001670  00000000  00000000  00058de8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a7c0  00000000  00000000  0005a458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000247be  00000000  00000000  00084c18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fa1fd  00000000  00000000  000a93d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001a35d3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008058  00000000  00000000  001a3624  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000560 	.word	0x20000560
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080161fc 	.word	0x080161fc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000564 	.word	0x20000564
 800020c:	080161fc 	.word	0x080161fc

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	; 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_d2uiz>:
 8000c08:	004a      	lsls	r2, r1, #1
 8000c0a:	d211      	bcs.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c10:	d211      	bcs.n	8000c36 <__aeabi_d2uiz+0x2e>
 8000c12:	d50d      	bpl.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c1c:	d40e      	bmi.n	8000c3c <__aeabi_d2uiz+0x34>
 8000c1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c2a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c2e:	4770      	bx	lr
 8000c30:	f04f 0000 	mov.w	r0, #0
 8000c34:	4770      	bx	lr
 8000c36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c3a:	d102      	bne.n	8000c42 <__aeabi_d2uiz+0x3a>
 8000c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c40:	4770      	bx	lr
 8000c42:	f04f 0000 	mov.w	r0, #0
 8000c46:	4770      	bx	lr

08000c48 <__aeabi_d2f>:
 8000c48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c4c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c50:	bf24      	itt	cs
 8000c52:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c56:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c5a:	d90d      	bls.n	8000c78 <__aeabi_d2f+0x30>
 8000c5c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c60:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c64:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c68:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c6c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c70:	bf08      	it	eq
 8000c72:	f020 0001 	biceq.w	r0, r0, #1
 8000c76:	4770      	bx	lr
 8000c78:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c7c:	d121      	bne.n	8000cc2 <__aeabi_d2f+0x7a>
 8000c7e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c82:	bfbc      	itt	lt
 8000c84:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c88:	4770      	bxlt	lr
 8000c8a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c8e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c92:	f1c2 0218 	rsb	r2, r2, #24
 8000c96:	f1c2 0c20 	rsb	ip, r2, #32
 8000c9a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c9e:	fa20 f002 	lsr.w	r0, r0, r2
 8000ca2:	bf18      	it	ne
 8000ca4:	f040 0001 	orrne.w	r0, r0, #1
 8000ca8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cb0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cb4:	ea40 000c 	orr.w	r0, r0, ip
 8000cb8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cbc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cc0:	e7cc      	b.n	8000c5c <__aeabi_d2f+0x14>
 8000cc2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cc6:	d107      	bne.n	8000cd8 <__aeabi_d2f+0x90>
 8000cc8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ccc:	bf1e      	ittt	ne
 8000cce:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cd2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cd6:	4770      	bxne	lr
 8000cd8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cdc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ce0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_uldivmod>:
 8000ce8:	b953      	cbnz	r3, 8000d00 <__aeabi_uldivmod+0x18>
 8000cea:	b94a      	cbnz	r2, 8000d00 <__aeabi_uldivmod+0x18>
 8000cec:	2900      	cmp	r1, #0
 8000cee:	bf08      	it	eq
 8000cf0:	2800      	cmpeq	r0, #0
 8000cf2:	bf1c      	itt	ne
 8000cf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cfc:	f000 b9aa 	b.w	8001054 <__aeabi_idiv0>
 8000d00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d08:	f000 f83c 	bl	8000d84 <__udivmoddi4>
 8000d0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d14:	b004      	add	sp, #16
 8000d16:	4770      	bx	lr

08000d18 <__aeabi_d2lz>:
 8000d18:	b538      	push	{r3, r4, r5, lr}
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	4604      	mov	r4, r0
 8000d20:	460d      	mov	r5, r1
 8000d22:	f7ff ff0b 	bl	8000b3c <__aeabi_dcmplt>
 8000d26:	b928      	cbnz	r0, 8000d34 <__aeabi_d2lz+0x1c>
 8000d28:	4620      	mov	r0, r4
 8000d2a:	4629      	mov	r1, r5
 8000d2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d30:	f000 b80a 	b.w	8000d48 <__aeabi_d2ulz>
 8000d34:	4620      	mov	r0, r4
 8000d36:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d3a:	f000 f805 	bl	8000d48 <__aeabi_d2ulz>
 8000d3e:	4240      	negs	r0, r0
 8000d40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d44:	bd38      	pop	{r3, r4, r5, pc}
 8000d46:	bf00      	nop

08000d48 <__aeabi_d2ulz>:
 8000d48:	b5d0      	push	{r4, r6, r7, lr}
 8000d4a:	4b0c      	ldr	r3, [pc, #48]	; (8000d7c <__aeabi_d2ulz+0x34>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	4606      	mov	r6, r0
 8000d50:	460f      	mov	r7, r1
 8000d52:	f7ff fc81 	bl	8000658 <__aeabi_dmul>
 8000d56:	f7ff ff57 	bl	8000c08 <__aeabi_d2uiz>
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	f7ff fc02 	bl	8000564 <__aeabi_ui2d>
 8000d60:	4b07      	ldr	r3, [pc, #28]	; (8000d80 <__aeabi_d2ulz+0x38>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	f7ff fc78 	bl	8000658 <__aeabi_dmul>
 8000d68:	4602      	mov	r2, r0
 8000d6a:	460b      	mov	r3, r1
 8000d6c:	4630      	mov	r0, r6
 8000d6e:	4639      	mov	r1, r7
 8000d70:	f7ff faba 	bl	80002e8 <__aeabi_dsub>
 8000d74:	f7ff ff48 	bl	8000c08 <__aeabi_d2uiz>
 8000d78:	4621      	mov	r1, r4
 8000d7a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d7c:	3df00000 	.word	0x3df00000
 8000d80:	41f00000 	.word	0x41f00000

08000d84 <__udivmoddi4>:
 8000d84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d88:	9d08      	ldr	r5, [sp, #32]
 8000d8a:	4604      	mov	r4, r0
 8000d8c:	468e      	mov	lr, r1
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d14d      	bne.n	8000e2e <__udivmoddi4+0xaa>
 8000d92:	428a      	cmp	r2, r1
 8000d94:	4694      	mov	ip, r2
 8000d96:	d969      	bls.n	8000e6c <__udivmoddi4+0xe8>
 8000d98:	fab2 f282 	clz	r2, r2
 8000d9c:	b152      	cbz	r2, 8000db4 <__udivmoddi4+0x30>
 8000d9e:	fa01 f302 	lsl.w	r3, r1, r2
 8000da2:	f1c2 0120 	rsb	r1, r2, #32
 8000da6:	fa20 f101 	lsr.w	r1, r0, r1
 8000daa:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dae:	ea41 0e03 	orr.w	lr, r1, r3
 8000db2:	4094      	lsls	r4, r2
 8000db4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000db8:	0c21      	lsrs	r1, r4, #16
 8000dba:	fbbe f6f8 	udiv	r6, lr, r8
 8000dbe:	fa1f f78c 	uxth.w	r7, ip
 8000dc2:	fb08 e316 	mls	r3, r8, r6, lr
 8000dc6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000dca:	fb06 f107 	mul.w	r1, r6, r7
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	d90a      	bls.n	8000de8 <__udivmoddi4+0x64>
 8000dd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dda:	f080 811f 	bcs.w	800101c <__udivmoddi4+0x298>
 8000dde:	4299      	cmp	r1, r3
 8000de0:	f240 811c 	bls.w	800101c <__udivmoddi4+0x298>
 8000de4:	3e02      	subs	r6, #2
 8000de6:	4463      	add	r3, ip
 8000de8:	1a5b      	subs	r3, r3, r1
 8000dea:	b2a4      	uxth	r4, r4
 8000dec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000df0:	fb08 3310 	mls	r3, r8, r0, r3
 8000df4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000df8:	fb00 f707 	mul.w	r7, r0, r7
 8000dfc:	42a7      	cmp	r7, r4
 8000dfe:	d90a      	bls.n	8000e16 <__udivmoddi4+0x92>
 8000e00:	eb1c 0404 	adds.w	r4, ip, r4
 8000e04:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e08:	f080 810a 	bcs.w	8001020 <__udivmoddi4+0x29c>
 8000e0c:	42a7      	cmp	r7, r4
 8000e0e:	f240 8107 	bls.w	8001020 <__udivmoddi4+0x29c>
 8000e12:	4464      	add	r4, ip
 8000e14:	3802      	subs	r0, #2
 8000e16:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e1a:	1be4      	subs	r4, r4, r7
 8000e1c:	2600      	movs	r6, #0
 8000e1e:	b11d      	cbz	r5, 8000e28 <__udivmoddi4+0xa4>
 8000e20:	40d4      	lsrs	r4, r2
 8000e22:	2300      	movs	r3, #0
 8000e24:	e9c5 4300 	strd	r4, r3, [r5]
 8000e28:	4631      	mov	r1, r6
 8000e2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d909      	bls.n	8000e46 <__udivmoddi4+0xc2>
 8000e32:	2d00      	cmp	r5, #0
 8000e34:	f000 80ef 	beq.w	8001016 <__udivmoddi4+0x292>
 8000e38:	2600      	movs	r6, #0
 8000e3a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e3e:	4630      	mov	r0, r6
 8000e40:	4631      	mov	r1, r6
 8000e42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e46:	fab3 f683 	clz	r6, r3
 8000e4a:	2e00      	cmp	r6, #0
 8000e4c:	d14a      	bne.n	8000ee4 <__udivmoddi4+0x160>
 8000e4e:	428b      	cmp	r3, r1
 8000e50:	d302      	bcc.n	8000e58 <__udivmoddi4+0xd4>
 8000e52:	4282      	cmp	r2, r0
 8000e54:	f200 80f9 	bhi.w	800104a <__udivmoddi4+0x2c6>
 8000e58:	1a84      	subs	r4, r0, r2
 8000e5a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e5e:	2001      	movs	r0, #1
 8000e60:	469e      	mov	lr, r3
 8000e62:	2d00      	cmp	r5, #0
 8000e64:	d0e0      	beq.n	8000e28 <__udivmoddi4+0xa4>
 8000e66:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e6a:	e7dd      	b.n	8000e28 <__udivmoddi4+0xa4>
 8000e6c:	b902      	cbnz	r2, 8000e70 <__udivmoddi4+0xec>
 8000e6e:	deff      	udf	#255	; 0xff
 8000e70:	fab2 f282 	clz	r2, r2
 8000e74:	2a00      	cmp	r2, #0
 8000e76:	f040 8092 	bne.w	8000f9e <__udivmoddi4+0x21a>
 8000e7a:	eba1 010c 	sub.w	r1, r1, ip
 8000e7e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e82:	fa1f fe8c 	uxth.w	lr, ip
 8000e86:	2601      	movs	r6, #1
 8000e88:	0c20      	lsrs	r0, r4, #16
 8000e8a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e8e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e92:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e96:	fb0e f003 	mul.w	r0, lr, r3
 8000e9a:	4288      	cmp	r0, r1
 8000e9c:	d908      	bls.n	8000eb0 <__udivmoddi4+0x12c>
 8000e9e:	eb1c 0101 	adds.w	r1, ip, r1
 8000ea2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ea6:	d202      	bcs.n	8000eae <__udivmoddi4+0x12a>
 8000ea8:	4288      	cmp	r0, r1
 8000eaa:	f200 80cb 	bhi.w	8001044 <__udivmoddi4+0x2c0>
 8000eae:	4643      	mov	r3, r8
 8000eb0:	1a09      	subs	r1, r1, r0
 8000eb2:	b2a4      	uxth	r4, r4
 8000eb4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000eb8:	fb07 1110 	mls	r1, r7, r0, r1
 8000ebc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ec0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ec4:	45a6      	cmp	lr, r4
 8000ec6:	d908      	bls.n	8000eda <__udivmoddi4+0x156>
 8000ec8:	eb1c 0404 	adds.w	r4, ip, r4
 8000ecc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ed0:	d202      	bcs.n	8000ed8 <__udivmoddi4+0x154>
 8000ed2:	45a6      	cmp	lr, r4
 8000ed4:	f200 80bb 	bhi.w	800104e <__udivmoddi4+0x2ca>
 8000ed8:	4608      	mov	r0, r1
 8000eda:	eba4 040e 	sub.w	r4, r4, lr
 8000ede:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ee2:	e79c      	b.n	8000e1e <__udivmoddi4+0x9a>
 8000ee4:	f1c6 0720 	rsb	r7, r6, #32
 8000ee8:	40b3      	lsls	r3, r6
 8000eea:	fa22 fc07 	lsr.w	ip, r2, r7
 8000eee:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ef2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ef6:	fa01 f306 	lsl.w	r3, r1, r6
 8000efa:	431c      	orrs	r4, r3
 8000efc:	40f9      	lsrs	r1, r7
 8000efe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f02:	fa00 f306 	lsl.w	r3, r0, r6
 8000f06:	fbb1 f8f9 	udiv	r8, r1, r9
 8000f0a:	0c20      	lsrs	r0, r4, #16
 8000f0c:	fa1f fe8c 	uxth.w	lr, ip
 8000f10:	fb09 1118 	mls	r1, r9, r8, r1
 8000f14:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f18:	fb08 f00e 	mul.w	r0, r8, lr
 8000f1c:	4288      	cmp	r0, r1
 8000f1e:	fa02 f206 	lsl.w	r2, r2, r6
 8000f22:	d90b      	bls.n	8000f3c <__udivmoddi4+0x1b8>
 8000f24:	eb1c 0101 	adds.w	r1, ip, r1
 8000f28:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f2c:	f080 8088 	bcs.w	8001040 <__udivmoddi4+0x2bc>
 8000f30:	4288      	cmp	r0, r1
 8000f32:	f240 8085 	bls.w	8001040 <__udivmoddi4+0x2bc>
 8000f36:	f1a8 0802 	sub.w	r8, r8, #2
 8000f3a:	4461      	add	r1, ip
 8000f3c:	1a09      	subs	r1, r1, r0
 8000f3e:	b2a4      	uxth	r4, r4
 8000f40:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f44:	fb09 1110 	mls	r1, r9, r0, r1
 8000f48:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f4c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f50:	458e      	cmp	lr, r1
 8000f52:	d908      	bls.n	8000f66 <__udivmoddi4+0x1e2>
 8000f54:	eb1c 0101 	adds.w	r1, ip, r1
 8000f58:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f5c:	d26c      	bcs.n	8001038 <__udivmoddi4+0x2b4>
 8000f5e:	458e      	cmp	lr, r1
 8000f60:	d96a      	bls.n	8001038 <__udivmoddi4+0x2b4>
 8000f62:	3802      	subs	r0, #2
 8000f64:	4461      	add	r1, ip
 8000f66:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f6a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f6e:	eba1 010e 	sub.w	r1, r1, lr
 8000f72:	42a1      	cmp	r1, r4
 8000f74:	46c8      	mov	r8, r9
 8000f76:	46a6      	mov	lr, r4
 8000f78:	d356      	bcc.n	8001028 <__udivmoddi4+0x2a4>
 8000f7a:	d053      	beq.n	8001024 <__udivmoddi4+0x2a0>
 8000f7c:	b15d      	cbz	r5, 8000f96 <__udivmoddi4+0x212>
 8000f7e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f82:	eb61 010e 	sbc.w	r1, r1, lr
 8000f86:	fa01 f707 	lsl.w	r7, r1, r7
 8000f8a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f8e:	40f1      	lsrs	r1, r6
 8000f90:	431f      	orrs	r7, r3
 8000f92:	e9c5 7100 	strd	r7, r1, [r5]
 8000f96:	2600      	movs	r6, #0
 8000f98:	4631      	mov	r1, r6
 8000f9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f9e:	f1c2 0320 	rsb	r3, r2, #32
 8000fa2:	40d8      	lsrs	r0, r3
 8000fa4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000fa8:	fa21 f303 	lsr.w	r3, r1, r3
 8000fac:	4091      	lsls	r1, r2
 8000fae:	4301      	orrs	r1, r0
 8000fb0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fb4:	fa1f fe8c 	uxth.w	lr, ip
 8000fb8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000fbc:	fb07 3610 	mls	r6, r7, r0, r3
 8000fc0:	0c0b      	lsrs	r3, r1, #16
 8000fc2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fc6:	fb00 f60e 	mul.w	r6, r0, lr
 8000fca:	429e      	cmp	r6, r3
 8000fcc:	fa04 f402 	lsl.w	r4, r4, r2
 8000fd0:	d908      	bls.n	8000fe4 <__udivmoddi4+0x260>
 8000fd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fd6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fda:	d22f      	bcs.n	800103c <__udivmoddi4+0x2b8>
 8000fdc:	429e      	cmp	r6, r3
 8000fde:	d92d      	bls.n	800103c <__udivmoddi4+0x2b8>
 8000fe0:	3802      	subs	r0, #2
 8000fe2:	4463      	add	r3, ip
 8000fe4:	1b9b      	subs	r3, r3, r6
 8000fe6:	b289      	uxth	r1, r1
 8000fe8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fec:	fb07 3316 	mls	r3, r7, r6, r3
 8000ff0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ff4:	fb06 f30e 	mul.w	r3, r6, lr
 8000ff8:	428b      	cmp	r3, r1
 8000ffa:	d908      	bls.n	800100e <__udivmoddi4+0x28a>
 8000ffc:	eb1c 0101 	adds.w	r1, ip, r1
 8001000:	f106 38ff 	add.w	r8, r6, #4294967295
 8001004:	d216      	bcs.n	8001034 <__udivmoddi4+0x2b0>
 8001006:	428b      	cmp	r3, r1
 8001008:	d914      	bls.n	8001034 <__udivmoddi4+0x2b0>
 800100a:	3e02      	subs	r6, #2
 800100c:	4461      	add	r1, ip
 800100e:	1ac9      	subs	r1, r1, r3
 8001010:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001014:	e738      	b.n	8000e88 <__udivmoddi4+0x104>
 8001016:	462e      	mov	r6, r5
 8001018:	4628      	mov	r0, r5
 800101a:	e705      	b.n	8000e28 <__udivmoddi4+0xa4>
 800101c:	4606      	mov	r6, r0
 800101e:	e6e3      	b.n	8000de8 <__udivmoddi4+0x64>
 8001020:	4618      	mov	r0, r3
 8001022:	e6f8      	b.n	8000e16 <__udivmoddi4+0x92>
 8001024:	454b      	cmp	r3, r9
 8001026:	d2a9      	bcs.n	8000f7c <__udivmoddi4+0x1f8>
 8001028:	ebb9 0802 	subs.w	r8, r9, r2
 800102c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001030:	3801      	subs	r0, #1
 8001032:	e7a3      	b.n	8000f7c <__udivmoddi4+0x1f8>
 8001034:	4646      	mov	r6, r8
 8001036:	e7ea      	b.n	800100e <__udivmoddi4+0x28a>
 8001038:	4620      	mov	r0, r4
 800103a:	e794      	b.n	8000f66 <__udivmoddi4+0x1e2>
 800103c:	4640      	mov	r0, r8
 800103e:	e7d1      	b.n	8000fe4 <__udivmoddi4+0x260>
 8001040:	46d0      	mov	r8, sl
 8001042:	e77b      	b.n	8000f3c <__udivmoddi4+0x1b8>
 8001044:	3b02      	subs	r3, #2
 8001046:	4461      	add	r1, ip
 8001048:	e732      	b.n	8000eb0 <__udivmoddi4+0x12c>
 800104a:	4630      	mov	r0, r6
 800104c:	e709      	b.n	8000e62 <__udivmoddi4+0xde>
 800104e:	4464      	add	r4, ip
 8001050:	3802      	subs	r0, #2
 8001052:	e742      	b.n	8000eda <__udivmoddi4+0x156>

08001054 <__aeabi_idiv0>:
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop

08001058 <CalculateStats>:
float sensorStdDevs[NUM_SENSOR] = {0};
int readingCount[NUM_SENSOR] = {0};

#define throwSomenumber 20

void CalculateStats(int sensorIndex) {
 8001058:	b5b0      	push	{r4, r5, r7, lr}
 800105a:	b088      	sub	sp, #32
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
    float sum = 0;
 8001060:	f04f 0300 	mov.w	r3, #0
 8001064:	61fb      	str	r3, [r7, #28]
    float mean = 0;
 8001066:	f04f 0300 	mov.w	r3, #0
 800106a:	60fb      	str	r3, [r7, #12]
    float stdDevSum = 0;
 800106c:	f04f 0300 	mov.w	r3, #0
 8001070:	61bb      	str	r3, [r7, #24]
    int count = readingCount[sensorIndex];
 8001072:	4a49      	ldr	r2, [pc, #292]	; (8001198 <CalculateStats+0x140>)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800107a:	60bb      	str	r3, [r7, #8]

    // 평균 계산
    for (int i = 0; i < count; i++) { sum += sensorValues[sensorIndex][i];}
 800107c:	2300      	movs	r3, #0
 800107e:	617b      	str	r3, [r7, #20]
 8001080:	e014      	b.n	80010ac <CalculateStats+0x54>
 8001082:	4946      	ldr	r1, [pc, #280]	; (800119c <CalculateStats+0x144>)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800108a:	fb03 f202 	mul.w	r2, r3, r2
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	4413      	add	r3, r2
 8001092:	009b      	lsls	r3, r3, #2
 8001094:	440b      	add	r3, r1
 8001096:	edd3 7a00 	vldr	s15, [r3]
 800109a:	ed97 7a07 	vldr	s14, [r7, #28]
 800109e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010a2:	edc7 7a07 	vstr	s15, [r7, #28]
 80010a6:	697b      	ldr	r3, [r7, #20]
 80010a8:	3301      	adds	r3, #1
 80010aa:	617b      	str	r3, [r7, #20]
 80010ac:	697a      	ldr	r2, [r7, #20]
 80010ae:	68bb      	ldr	r3, [r7, #8]
 80010b0:	429a      	cmp	r2, r3
 80010b2:	dbe6      	blt.n	8001082 <CalculateStats+0x2a>
    mean = sum / count;
 80010b4:	68bb      	ldr	r3, [r7, #8]
 80010b6:	ee07 3a90 	vmov	s15, r3
 80010ba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010be:	edd7 6a07 	vldr	s13, [r7, #28]
 80010c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80010c6:	edc7 7a03 	vstr	s15, [r7, #12]
    sensorAverages[sensorIndex] = mean;
 80010ca:	4a35      	ldr	r2, [pc, #212]	; (80011a0 <CalculateStats+0x148>)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	009b      	lsls	r3, r3, #2
 80010d0:	4413      	add	r3, r2
 80010d2:	68fa      	ldr	r2, [r7, #12]
 80010d4:	601a      	str	r2, [r3, #0]
    // 표준편차 계산
    for (int i = 0; i < count; i++) { stdDevSum += pow(sensorValues[sensorIndex][i] - mean, 2);}
 80010d6:	2300      	movs	r3, #0
 80010d8:	613b      	str	r3, [r7, #16]
 80010da:	e031      	b.n	8001140 <CalculateStats+0xe8>
 80010dc:	492f      	ldr	r1, [pc, #188]	; (800119c <CalculateStats+0x144>)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80010e4:	fb03 f202 	mul.w	r2, r3, r2
 80010e8:	693b      	ldr	r3, [r7, #16]
 80010ea:	4413      	add	r3, r2
 80010ec:	009b      	lsls	r3, r3, #2
 80010ee:	440b      	add	r3, r1
 80010f0:	ed93 7a00 	vldr	s14, [r3]
 80010f4:	edd7 7a03 	vldr	s15, [r7, #12]
 80010f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010fc:	ee17 0a90 	vmov	r0, s15
 8001100:	f7ff fa52 	bl	80005a8 <__aeabi_f2d>
 8001104:	4602      	mov	r2, r0
 8001106:	460b      	mov	r3, r1
 8001108:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8001190 <CalculateStats+0x138>
 800110c:	ec43 2b10 	vmov	d0, r2, r3
 8001110:	f014 f92e 	bl	8015370 <pow>
 8001114:	ec55 4b10 	vmov	r4, r5, d0
 8001118:	69b8      	ldr	r0, [r7, #24]
 800111a:	f7ff fa45 	bl	80005a8 <__aeabi_f2d>
 800111e:	4602      	mov	r2, r0
 8001120:	460b      	mov	r3, r1
 8001122:	4620      	mov	r0, r4
 8001124:	4629      	mov	r1, r5
 8001126:	f7ff f8e1 	bl	80002ec <__adddf3>
 800112a:	4602      	mov	r2, r0
 800112c:	460b      	mov	r3, r1
 800112e:	4610      	mov	r0, r2
 8001130:	4619      	mov	r1, r3
 8001132:	f7ff fd89 	bl	8000c48 <__aeabi_d2f>
 8001136:	4603      	mov	r3, r0
 8001138:	61bb      	str	r3, [r7, #24]
 800113a:	693b      	ldr	r3, [r7, #16]
 800113c:	3301      	adds	r3, #1
 800113e:	613b      	str	r3, [r7, #16]
 8001140:	693a      	ldr	r2, [r7, #16]
 8001142:	68bb      	ldr	r3, [r7, #8]
 8001144:	429a      	cmp	r2, r3
 8001146:	dbc9      	blt.n	80010dc <CalculateStats+0x84>
    sensorStdDevs[sensorIndex] = sqrt(stdDevSum / count);
 8001148:	68bb      	ldr	r3, [r7, #8]
 800114a:	ee07 3a90 	vmov	s15, r3
 800114e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001152:	ed97 7a06 	vldr	s14, [r7, #24]
 8001156:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800115a:	ee16 0a90 	vmov	r0, s13
 800115e:	f7ff fa23 	bl	80005a8 <__aeabi_f2d>
 8001162:	4602      	mov	r2, r0
 8001164:	460b      	mov	r3, r1
 8001166:	ec43 2b10 	vmov	d0, r2, r3
 800116a:	f014 f971 	bl	8015450 <sqrt>
 800116e:	ec53 2b10 	vmov	r2, r3, d0
 8001172:	4610      	mov	r0, r2
 8001174:	4619      	mov	r1, r3
 8001176:	f7ff fd67 	bl	8000c48 <__aeabi_d2f>
 800117a:	4602      	mov	r2, r0
 800117c:	4909      	ldr	r1, [pc, #36]	; (80011a4 <CalculateStats+0x14c>)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	009b      	lsls	r3, r3, #2
 8001182:	440b      	add	r3, r1
 8001184:	601a      	str	r2, [r3, #0]
}
 8001186:	bf00      	nop
 8001188:	3720      	adds	r7, #32
 800118a:	46bd      	mov	sp, r7
 800118c:	bdb0      	pop	{r4, r5, r7, pc}
 800118e:	bf00      	nop
 8001190:	00000000 	.word	0x00000000
 8001194:	40000000 	.word	0x40000000
 8001198:	200076bc 	.word	0x200076bc
 800119c:	2000057c 	.word	0x2000057c
 80011a0:	200075fc 	.word	0x200075fc
 80011a4:	2000765c 	.word	0x2000765c

080011a8 <TransmitStats>:

// 평균과 표준편차를 UART로 전송하는 함수
void TransmitStats() {
 80011a8:	b5b0      	push	{r4, r5, r7, lr}
 80011aa:	b0a6      	sub	sp, #152	; 0x98
 80011ac:	af04      	add	r7, sp, #16
    char msg[128];
    for (int i = 0; i < NUM_SENSOR; i++) {
 80011ae:	2300      	movs	r3, #0
 80011b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80011b4:	e033      	b.n	800121e <TransmitStats+0x76>
        CalculateStats(i); // 통계 계산
 80011b6:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 80011ba:	f7ff ff4d 	bl	8001058 <CalculateStats>
        sprintf(msg, "Sensor %d - Avg: %.2f, StdDev: %.2f\r\n", i, sensorAverages[i], sensorStdDevs[i]);
 80011be:	4a1c      	ldr	r2, [pc, #112]	; (8001230 <TransmitStats+0x88>)
 80011c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80011c4:	009b      	lsls	r3, r3, #2
 80011c6:	4413      	add	r3, r2
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4618      	mov	r0, r3
 80011cc:	f7ff f9ec 	bl	80005a8 <__aeabi_f2d>
 80011d0:	4604      	mov	r4, r0
 80011d2:	460d      	mov	r5, r1
 80011d4:	4a17      	ldr	r2, [pc, #92]	; (8001234 <TransmitStats+0x8c>)
 80011d6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80011da:	009b      	lsls	r3, r3, #2
 80011dc:	4413      	add	r3, r2
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4618      	mov	r0, r3
 80011e2:	f7ff f9e1 	bl	80005a8 <__aeabi_f2d>
 80011e6:	4602      	mov	r2, r0
 80011e8:	460b      	mov	r3, r1
 80011ea:	1d38      	adds	r0, r7, #4
 80011ec:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80011f0:	e9cd 4500 	strd	r4, r5, [sp]
 80011f4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80011f8:	490f      	ldr	r1, [pc, #60]	; (8001238 <TransmitStats+0x90>)
 80011fa:	f00f fe39 	bl	8010e70 <siprintf>
        HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), 100);
 80011fe:	1d3b      	adds	r3, r7, #4
 8001200:	4618      	mov	r0, r3
 8001202:	f7ff f80f 	bl	8000224 <strlen>
 8001206:	4603      	mov	r3, r0
 8001208:	b29a      	uxth	r2, r3
 800120a:	1d39      	adds	r1, r7, #4
 800120c:	2364      	movs	r3, #100	; 0x64
 800120e:	480b      	ldr	r0, [pc, #44]	; (800123c <TransmitStats+0x94>)
 8001210:	f008 fcc4 	bl	8009b9c <HAL_UART_Transmit>
    for (int i = 0; i < NUM_SENSOR; i++) {
 8001214:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001218:	3301      	adds	r3, #1
 800121a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800121e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001222:	2b17      	cmp	r3, #23
 8001224:	ddc7      	ble.n	80011b6 <TransmitStats+0xe>
    }
}
 8001226:	bf00      	nop
 8001228:	bf00      	nop
 800122a:	3788      	adds	r7, #136	; 0x88
 800122c:	46bd      	mov	sp, r7
 800122e:	bdb0      	pop	{r4, r5, r7, pc}
 8001230:	200075fc 	.word	0x200075fc
 8001234:	2000765c 	.word	0x2000765c
 8001238:	08016218 	.word	0x08016218
 800123c:	20007a74 	.word	0x20007a74

08001240 <ResetSensorData>:

void ResetSensorData() {
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
    // 모든 센서 값과 읽기 횟수를 0으로 설정
    for (int i = 0; i < NUM_SENSOR; i++) {
 8001246:	2300      	movs	r3, #0
 8001248:	607b      	str	r3, [r7, #4]
 800124a:	e014      	b.n	8001276 <ResetSensorData+0x36>
        memset(sensorValues[i], 0, sizeof(sensorValues[i]));
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8001252:	fb02 f303 	mul.w	r3, r2, r3
 8001256:	4a0c      	ldr	r2, [pc, #48]	; (8001288 <ResetSensorData+0x48>)
 8001258:	4413      	add	r3, r2
 800125a:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800125e:	2100      	movs	r1, #0
 8001260:	4618      	mov	r0, r3
 8001262:	f00e ff7d 	bl	8010160 <memset>
        readingCount[i] = 0;
 8001266:	4a09      	ldr	r2, [pc, #36]	; (800128c <ResetSensorData+0x4c>)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	2100      	movs	r1, #0
 800126c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (int i = 0; i < NUM_SENSOR; i++) {
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	3301      	adds	r3, #1
 8001274:	607b      	str	r3, [r7, #4]
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2b17      	cmp	r3, #23
 800127a:	dde7      	ble.n	800124c <ResetSensorData+0xc>
    }
}
 800127c:	bf00      	nop
 800127e:	bf00      	nop
 8001280:	3708      	adds	r7, #8
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	2000057c 	.word	0x2000057c
 800128c:	200076bc 	.word	0x200076bc

08001290 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b08a      	sub	sp, #40	; 0x28
 8001294:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001296:	f107 0314 	add.w	r3, r7, #20
 800129a:	2200      	movs	r2, #0
 800129c:	601a      	str	r2, [r3, #0]
 800129e:	605a      	str	r2, [r3, #4]
 80012a0:	609a      	str	r2, [r3, #8]
 80012a2:	60da      	str	r2, [r3, #12]
 80012a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012a6:	4b51      	ldr	r3, [pc, #324]	; (80013ec <MX_GPIO_Init+0x15c>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012aa:	4a50      	ldr	r2, [pc, #320]	; (80013ec <MX_GPIO_Init+0x15c>)
 80012ac:	f043 0302 	orr.w	r3, r3, #2
 80012b0:	6313      	str	r3, [r2, #48]	; 0x30
 80012b2:	4b4e      	ldr	r3, [pc, #312]	; (80013ec <MX_GPIO_Init+0x15c>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b6:	f003 0302 	and.w	r3, r3, #2
 80012ba:	613b      	str	r3, [r7, #16]
 80012bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012be:	4b4b      	ldr	r3, [pc, #300]	; (80013ec <MX_GPIO_Init+0x15c>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c2:	4a4a      	ldr	r2, [pc, #296]	; (80013ec <MX_GPIO_Init+0x15c>)
 80012c4:	f043 0301 	orr.w	r3, r3, #1
 80012c8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ca:	4b48      	ldr	r3, [pc, #288]	; (80013ec <MX_GPIO_Init+0x15c>)
 80012cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ce:	f003 0301 	and.w	r3, r3, #1
 80012d2:	60fb      	str	r3, [r7, #12]
 80012d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80012d6:	4b45      	ldr	r3, [pc, #276]	; (80013ec <MX_GPIO_Init+0x15c>)
 80012d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012da:	4a44      	ldr	r2, [pc, #272]	; (80013ec <MX_GPIO_Init+0x15c>)
 80012dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012e0:	6313      	str	r3, [r2, #48]	; 0x30
 80012e2:	4b42      	ldr	r3, [pc, #264]	; (80013ec <MX_GPIO_Init+0x15c>)
 80012e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012ea:	60bb      	str	r3, [r7, #8]
 80012ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012ee:	4b3f      	ldr	r3, [pc, #252]	; (80013ec <MX_GPIO_Init+0x15c>)
 80012f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f2:	4a3e      	ldr	r2, [pc, #248]	; (80013ec <MX_GPIO_Init+0x15c>)
 80012f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012f8:	6313      	str	r3, [r2, #48]	; 0x30
 80012fa:	4b3c      	ldr	r3, [pc, #240]	; (80013ec <MX_GPIO_Init+0x15c>)
 80012fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001302:	607b      	str	r3, [r7, #4]
 8001304:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001306:	4b39      	ldr	r3, [pc, #228]	; (80013ec <MX_GPIO_Init+0x15c>)
 8001308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130a:	4a38      	ldr	r2, [pc, #224]	; (80013ec <MX_GPIO_Init+0x15c>)
 800130c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001310:	6313      	str	r3, [r2, #48]	; 0x30
 8001312:	4b36      	ldr	r3, [pc, #216]	; (80013ec <MX_GPIO_Init+0x15c>)
 8001314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001316:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800131a:	603b      	str	r3, [r7, #0]
 800131c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 800131e:	2200      	movs	r2, #0
 8001320:	2110      	movs	r1, #16
 8001322:	4833      	ldr	r0, [pc, #204]	; (80013f0 <MX_GPIO_Init+0x160>)
 8001324:	f002 ff98 	bl	8004258 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0, GPIO_PIN_RESET);
 8001328:	2200      	movs	r2, #0
 800132a:	210f      	movs	r1, #15
 800132c:	4831      	ldr	r0, [pc, #196]	; (80013f4 <MX_GPIO_Init+0x164>)
 800132e:	f002 ff93 	bl	8004258 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7|GPIO_PIN_6, GPIO_PIN_RESET);
 8001332:	2200      	movs	r2, #0
 8001334:	21c0      	movs	r1, #192	; 0xc0
 8001336:	4830      	ldr	r0, [pc, #192]	; (80013f8 <MX_GPIO_Init+0x168>)
 8001338:	f002 ff8e 	bl	8004258 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800133c:	2310      	movs	r3, #16
 800133e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001340:	2301      	movs	r3, #1
 8001342:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001344:	2300      	movs	r3, #0
 8001346:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001348:	2300      	movs	r3, #0
 800134a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800134c:	f107 0314 	add.w	r3, r7, #20
 8001350:	4619      	mov	r1, r3
 8001352:	4827      	ldr	r0, [pc, #156]	; (80013f0 <MX_GPIO_Init+0x160>)
 8001354:	f002 fbf0 	bl	8003b38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PI3 PI2 PI1 PI0 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0;
 8001358:	230f      	movs	r3, #15
 800135a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800135c:	2301      	movs	r3, #1
 800135e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001360:	2300      	movs	r3, #0
 8001362:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001364:	2300      	movs	r3, #0
 8001366:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001368:	f107 0314 	add.w	r3, r7, #20
 800136c:	4619      	mov	r1, r3
 800136e:	4821      	ldr	r0, [pc, #132]	; (80013f4 <MX_GPIO_Init+0x164>)
 8001370:	f002 fbe2 	bl	8003b38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001374:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001378:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800137a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800137e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001380:	2301      	movs	r3, #1
 8001382:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001384:	f107 0314 	add.w	r3, r7, #20
 8001388:	4619      	mov	r1, r3
 800138a:	481c      	ldr	r0, [pc, #112]	; (80013fc <MX_GPIO_Init+0x16c>)
 800138c:	f002 fbd4 	bl	8003b38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG7 PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8001390:	23c0      	movs	r3, #192	; 0xc0
 8001392:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001394:	2301      	movs	r3, #1
 8001396:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001398:	2300      	movs	r3, #0
 800139a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800139c:	2300      	movs	r3, #0
 800139e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80013a0:	f107 0314 	add.w	r3, r7, #20
 80013a4:	4619      	mov	r1, r3
 80013a6:	4814      	ldr	r0, [pc, #80]	; (80013f8 <MX_GPIO_Init+0x168>)
 80013a8:	f002 fbc6 	bl	8003b38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80013ac:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80013b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013b2:	2300      	movs	r3, #0
 80013b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b6:	2300      	movs	r3, #0
 80013b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013ba:	f107 0314 	add.w	r3, r7, #20
 80013be:	4619      	mov	r1, r3
 80013c0:	480b      	ldr	r0, [pc, #44]	; (80013f0 <MX_GPIO_Init+0x160>)
 80013c2:	f002 fbb9 	bl	8003b38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80013c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80013ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013cc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80013d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013d2:	2301      	movs	r3, #1
 80013d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013d6:	f107 0314 	add.w	r3, r7, #20
 80013da:	4619      	mov	r1, r3
 80013dc:	4804      	ldr	r0, [pc, #16]	; (80013f0 <MX_GPIO_Init+0x160>)
 80013de:	f002 fbab 	bl	8003b38 <HAL_GPIO_Init>

}
 80013e2:	bf00      	nop
 80013e4:	3728      	adds	r7, #40	; 0x28
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	40023800 	.word	0x40023800
 80013f0:	40020400 	.word	0x40020400
 80013f4:	40022000 	.word	0x40022000
 80013f8:	40021800 	.word	0x40021800
 80013fc:	40020000 	.word	0x40020000

08001400 <HX711_Init>:
float loadcell_bias = 10002;
float Hx711Data = 0;


void HX711_Init(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	af00      	add	r7, sp, #0
  // Set the SCK pin to low
  HAL_GPIO_WritePin(HX711_SCK_GPIO_Port, HX711_SCK_Pin, GPIO_PIN_RESET);
 8001404:	2200      	movs	r2, #0
 8001406:	2102      	movs	r1, #2
 8001408:	4802      	ldr	r0, [pc, #8]	; (8001414 <HX711_Init+0x14>)
 800140a:	f002 ff25 	bl	8004258 <HAL_GPIO_WritePin>
}
 800140e:	bf00      	nop
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	40022000 	.word	0x40022000

08001418 <Read_HX711>:

int32_t Read_HX711(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
  int32_t data = 0;
 800141e:	2300      	movs	r3, #0
 8001420:	607b      	str	r3, [r7, #4]

  // Wait until the DT pin goes low
  while (HAL_GPIO_ReadPin(HX711_DT_GPIO_Port, HX711_DT_Pin) == GPIO_PIN_SET);
 8001422:	bf00      	nop
 8001424:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001428:	4820      	ldr	r0, [pc, #128]	; (80014ac <Read_HX711+0x94>)
 800142a:	f002 fef5 	bl	8004218 <HAL_GPIO_ReadPin>
 800142e:	4603      	mov	r3, r0
 8001430:	2b01      	cmp	r3, #1
 8001432:	d0f7      	beq.n	8001424 <Read_HX711+0xc>

  // Read the 24-bit data
  for (int i = 0; i < 24; i++)
 8001434:	2300      	movs	r3, #0
 8001436:	603b      	str	r3, [r7, #0]
 8001438:	e020      	b.n	800147c <Read_HX711+0x64>
  {
    // Generate a clock pulse on SCK pin
    HAL_GPIO_WritePin(HX711_SCK_GPIO_Port, HX711_SCK_Pin, GPIO_PIN_SET);
 800143a:	2201      	movs	r2, #1
 800143c:	2102      	movs	r1, #2
 800143e:	481c      	ldr	r0, [pc, #112]	; (80014b0 <Read_HX711+0x98>)
 8001440:	f002 ff0a 	bl	8004258 <HAL_GPIO_WritePin>
    DelayMicroseconds(1);
 8001444:	2001      	movs	r0, #1
 8001446:	f000 f867 	bl	8001518 <DelayMicroseconds>
    data = (data << 1);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	005b      	lsls	r3, r3, #1
 800144e:	607b      	str	r3, [r7, #4]
    if (HAL_GPIO_ReadPin(HX711_DT_GPIO_Port, HX711_DT_Pin) == GPIO_PIN_SET)
 8001450:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001454:	4815      	ldr	r0, [pc, #84]	; (80014ac <Read_HX711+0x94>)
 8001456:	f002 fedf 	bl	8004218 <HAL_GPIO_ReadPin>
 800145a:	4603      	mov	r3, r0
 800145c:	2b01      	cmp	r3, #1
 800145e:	d102      	bne.n	8001466 <Read_HX711+0x4e>
    {
      data++;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	3301      	adds	r3, #1
 8001464:	607b      	str	r3, [r7, #4]
    }
    HAL_GPIO_WritePin(HX711_SCK_GPIO_Port, HX711_SCK_Pin, GPIO_PIN_RESET);
 8001466:	2200      	movs	r2, #0
 8001468:	2102      	movs	r1, #2
 800146a:	4811      	ldr	r0, [pc, #68]	; (80014b0 <Read_HX711+0x98>)
 800146c:	f002 fef4 	bl	8004258 <HAL_GPIO_WritePin>
    DelayMicroseconds(1);
 8001470:	2001      	movs	r0, #1
 8001472:	f000 f851 	bl	8001518 <DelayMicroseconds>
  for (int i = 0; i < 24; i++)
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	3301      	adds	r3, #1
 800147a:	603b      	str	r3, [r7, #0]
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	2b17      	cmp	r3, #23
 8001480:	dddb      	ble.n	800143a <Read_HX711+0x22>
  }

  // Generate an additional 25th pulse to set the HX711 back to idle mode
  HAL_GPIO_WritePin(HX711_SCK_GPIO_Port, HX711_SCK_Pin, GPIO_PIN_SET);
 8001482:	2201      	movs	r2, #1
 8001484:	2102      	movs	r1, #2
 8001486:	480a      	ldr	r0, [pc, #40]	; (80014b0 <Read_HX711+0x98>)
 8001488:	f002 fee6 	bl	8004258 <HAL_GPIO_WritePin>
  DelayMicroseconds(1);
 800148c:	2001      	movs	r0, #1
 800148e:	f000 f843 	bl	8001518 <DelayMicroseconds>
  HAL_GPIO_WritePin(HX711_SCK_GPIO_Port, HX711_SCK_Pin, GPIO_PIN_RESET);
 8001492:	2200      	movs	r2, #0
 8001494:	2102      	movs	r1, #2
 8001496:	4806      	ldr	r0, [pc, #24]	; (80014b0 <Read_HX711+0x98>)
 8001498:	f002 fede 	bl	8004258 <HAL_GPIO_WritePin>
  DelayMicroseconds(1);
 800149c:	2001      	movs	r0, #1
 800149e:	f000 f83b 	bl	8001518 <DelayMicroseconds>


  // Return the 24-bit data
  return data;
 80014a2:	687b      	ldr	r3, [r7, #4]
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	3708      	adds	r7, #8
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	40020400 	.word	0x40020400
 80014b0:	40022000 	.word	0x40022000

080014b4 <UART_SendWeight_g>:

void UART_SendWeight_g(float rawData,float loadcell_slope,float loadcell_bias)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b08e      	sub	sp, #56	; 0x38
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	ed87 0a03 	vstr	s0, [r7, #12]
 80014be:	edc7 0a02 	vstr	s1, [r7, #8]
 80014c2:	ed87 1a01 	vstr	s2, [r7, #4]
  float weight = loadcell_slope * rawData  + loadcell_bias;
 80014c6:	ed97 7a02 	vldr	s14, [r7, #8]
 80014ca:	edd7 7a03 	vldr	s15, [r7, #12]
 80014ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014d2:	ed97 7a01 	vldr	s14, [r7, #4]
 80014d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014da:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
  char buffer[32];
  int data = sprintf(buffer, "%.2f", weight);
 80014de:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80014e0:	f7ff f862 	bl	80005a8 <__aeabi_f2d>
 80014e4:	4602      	mov	r2, r0
 80014e6:	460b      	mov	r3, r1
 80014e8:	f107 0010 	add.w	r0, r7, #16
 80014ec:	4908      	ldr	r1, [pc, #32]	; (8001510 <UART_SendWeight_g+0x5c>)
 80014ee:	f00f fcbf 	bl	8010e70 <siprintf>
 80014f2:	6338      	str	r0, [r7, #48]	; 0x30
  // Send the buffer content via UART
#if 0
  int len = sprintf(buffer, "Weight(g):");
  HAL_UART_Transmit(&huart1, (uint8_t *)buffer, len, 1000);
#endif
  HAL_UART_Transmit(&huart1, (uint8_t *)buffer, data, 1000);
 80014f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014f6:	b29a      	uxth	r2, r3
 80014f8:	f107 0110 	add.w	r1, r7, #16
 80014fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001500:	4804      	ldr	r0, [pc, #16]	; (8001514 <UART_SendWeight_g+0x60>)
 8001502:	f008 fb4b 	bl	8009b9c <HAL_UART_Transmit>
}
 8001506:	bf00      	nop
 8001508:	3738      	adds	r7, #56	; 0x38
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	08016240 	.word	0x08016240
 8001514:	20007a74 	.word	0x20007a74

08001518 <DelayMicroseconds>:

  // Send the buffer content via UART
  HAL_UART_Transmit(&huart1, (uint8_t *)buffer, len, 1000);
}
void DelayMicroseconds(uint32_t microseconds)
{
 8001518:	b480      	push	{r7}
 800151a:	b085      	sub	sp, #20
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  uint32_t ticks = microseconds;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	60fb      	str	r3, [r7, #12]
  while (ticks--)
 8001524:	e000      	b.n	8001528 <DelayMicroseconds+0x10>
  {
    __NOP();
 8001526:	bf00      	nop
  while (ticks--)
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	1e5a      	subs	r2, r3, #1
 800152c:	60fa      	str	r2, [r7, #12]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d1f9      	bne.n	8001526 <DelayMicroseconds+0xe>
  }
}
 8001532:	bf00      	nop
 8001534:	bf00      	nop
 8001536:	3714      	adds	r7, #20
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr

08001540 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001544:	4b1b      	ldr	r3, [pc, #108]	; (80015b4 <MX_I2C1_Init+0x74>)
 8001546:	4a1c      	ldr	r2, [pc, #112]	; (80015b8 <MX_I2C1_Init+0x78>)
 8001548:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x6000030D;
 800154a:	4b1a      	ldr	r3, [pc, #104]	; (80015b4 <MX_I2C1_Init+0x74>)
 800154c:	4a1b      	ldr	r2, [pc, #108]	; (80015bc <MX_I2C1_Init+0x7c>)
 800154e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001550:	4b18      	ldr	r3, [pc, #96]	; (80015b4 <MX_I2C1_Init+0x74>)
 8001552:	2200      	movs	r2, #0
 8001554:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001556:	4b17      	ldr	r3, [pc, #92]	; (80015b4 <MX_I2C1_Init+0x74>)
 8001558:	2201      	movs	r2, #1
 800155a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800155c:	4b15      	ldr	r3, [pc, #84]	; (80015b4 <MX_I2C1_Init+0x74>)
 800155e:	2200      	movs	r2, #0
 8001560:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001562:	4b14      	ldr	r3, [pc, #80]	; (80015b4 <MX_I2C1_Init+0x74>)
 8001564:	2200      	movs	r2, #0
 8001566:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001568:	4b12      	ldr	r3, [pc, #72]	; (80015b4 <MX_I2C1_Init+0x74>)
 800156a:	2200      	movs	r2, #0
 800156c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800156e:	4b11      	ldr	r3, [pc, #68]	; (80015b4 <MX_I2C1_Init+0x74>)
 8001570:	2200      	movs	r2, #0
 8001572:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001574:	4b0f      	ldr	r3, [pc, #60]	; (80015b4 <MX_I2C1_Init+0x74>)
 8001576:	2200      	movs	r2, #0
 8001578:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800157a:	480e      	ldr	r0, [pc, #56]	; (80015b4 <MX_I2C1_Init+0x74>)
 800157c:	f002 febc 	bl	80042f8 <HAL_I2C_Init>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001586:	f001 fa8f 	bl	8002aa8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800158a:	2100      	movs	r1, #0
 800158c:	4809      	ldr	r0, [pc, #36]	; (80015b4 <MX_I2C1_Init+0x74>)
 800158e:	f004 f9e9 	bl	8005964 <HAL_I2CEx_ConfigAnalogFilter>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d001      	beq.n	800159c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001598:	f001 fa86 	bl	8002aa8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800159c:	2100      	movs	r1, #0
 800159e:	4805      	ldr	r0, [pc, #20]	; (80015b4 <MX_I2C1_Init+0x74>)
 80015a0:	f004 fa56 	bl	8005a50 <HAL_I2CEx_ConfigDigitalFilter>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80015aa:	f001 fa7d 	bl	8002aa8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015ae:	bf00      	nop
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	20007720 	.word	0x20007720
 80015b8:	40005400 	.word	0x40005400
 80015bc:	6000030d 	.word	0x6000030d

080015c0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b0aa      	sub	sp, #168	; 0xa8
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80015cc:	2200      	movs	r2, #0
 80015ce:	601a      	str	r2, [r3, #0]
 80015d0:	605a      	str	r2, [r3, #4]
 80015d2:	609a      	str	r2, [r3, #8]
 80015d4:	60da      	str	r2, [r3, #12]
 80015d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015d8:	f107 0310 	add.w	r3, r7, #16
 80015dc:	2284      	movs	r2, #132	; 0x84
 80015de:	2100      	movs	r1, #0
 80015e0:	4618      	mov	r0, r3
 80015e2:	f00e fdbd 	bl	8010160 <memset>
  if(i2cHandle->Instance==I2C1)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4a22      	ldr	r2, [pc, #136]	; (8001674 <HAL_I2C_MspInit+0xb4>)
 80015ec:	4293      	cmp	r3, r2
 80015ee:	d13c      	bne.n	800166a <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80015f0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80015f4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80015f6:	2300      	movs	r3, #0
 80015f8:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015fa:	f107 0310 	add.w	r3, r7, #16
 80015fe:	4618      	mov	r0, r3
 8001600:	f005 f8e6 	bl	80067d0 <HAL_RCCEx_PeriphCLKConfig>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800160a:	f001 fa4d 	bl	8002aa8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800160e:	4b1a      	ldr	r3, [pc, #104]	; (8001678 <HAL_I2C_MspInit+0xb8>)
 8001610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001612:	4a19      	ldr	r2, [pc, #100]	; (8001678 <HAL_I2C_MspInit+0xb8>)
 8001614:	f043 0302 	orr.w	r3, r3, #2
 8001618:	6313      	str	r3, [r2, #48]	; 0x30
 800161a:	4b17      	ldr	r3, [pc, #92]	; (8001678 <HAL_I2C_MspInit+0xb8>)
 800161c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161e:	f003 0302 	and.w	r3, r3, #2
 8001622:	60fb      	str	r3, [r7, #12]
 8001624:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001626:	f44f 7340 	mov.w	r3, #768	; 0x300
 800162a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800162e:	2312      	movs	r3, #18
 8001630:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001634:	2300      	movs	r3, #0
 8001636:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800163a:	2303      	movs	r3, #3
 800163c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001640:	2304      	movs	r3, #4
 8001642:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001646:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800164a:	4619      	mov	r1, r3
 800164c:	480b      	ldr	r0, [pc, #44]	; (800167c <HAL_I2C_MspInit+0xbc>)
 800164e:	f002 fa73 	bl	8003b38 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001652:	4b09      	ldr	r3, [pc, #36]	; (8001678 <HAL_I2C_MspInit+0xb8>)
 8001654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001656:	4a08      	ldr	r2, [pc, #32]	; (8001678 <HAL_I2C_MspInit+0xb8>)
 8001658:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800165c:	6413      	str	r3, [r2, #64]	; 0x40
 800165e:	4b06      	ldr	r3, [pc, #24]	; (8001678 <HAL_I2C_MspInit+0xb8>)
 8001660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001662:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001666:	60bb      	str	r3, [r7, #8]
 8001668:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800166a:	bf00      	nop
 800166c:	37a8      	adds	r7, #168	; 0xa8
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	40005400 	.word	0x40005400
 8001678:	40023800 	.word	0x40023800
 800167c:	40020400 	.word	0x40020400

08001680 <Kalman_Init>:
KalmanFilter filters[NUM_SENSOR];
float Q = 0.001f; // Process noise covariance
float R = 0.03f;   // Measurement noise covariance
float P = 0.001f;

void Kalman_Init(KalmanFilter *kf, float Q, float R, float P, float initial_value) {
 8001680:	b480      	push	{r7}
 8001682:	b087      	sub	sp, #28
 8001684:	af00      	add	r7, sp, #0
 8001686:	6178      	str	r0, [r7, #20]
 8001688:	ed87 0a04 	vstr	s0, [r7, #16]
 800168c:	edc7 0a03 	vstr	s1, [r7, #12]
 8001690:	ed87 1a02 	vstr	s2, [r7, #8]
 8001694:	edc7 1a01 	vstr	s3, [r7, #4]
    kf->Q = Q;
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	693a      	ldr	r2, [r7, #16]
 800169c:	601a      	str	r2, [r3, #0]
    kf->R = R;
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	68fa      	ldr	r2, [r7, #12]
 80016a2:	605a      	str	r2, [r3, #4]
    kf->P = P;
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	68ba      	ldr	r2, [r7, #8]
 80016a8:	609a      	str	r2, [r3, #8]
    kf->X = initial_value;
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	687a      	ldr	r2, [r7, #4]
 80016ae:	60da      	str	r2, [r3, #12]
}
 80016b0:	bf00      	nop
 80016b2:	371c      	adds	r7, #28
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr

080016bc <Kalman_Estimate>:

float Kalman_Estimate(KalmanFilter *kf, float measurement) {
 80016bc:	b480      	push	{r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
 80016c4:	ed87 0a00 	vstr	s0, [r7]
    // Prediction step: Update the error covariance 'P'
    // This is adding process noise to our uncertainty in the estimated state.
    kf->P = kf->P + kf->Q;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	ed93 7a02 	vldr	s14, [r3, #8]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	edd3 7a00 	vldr	s15, [r3]
 80016d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	edc3 7a02 	vstr	s15, [r3, #8]

    // Update step: Compute the Kalman Gain 'K'
    // Kalman Gain balances the ratio between the prediction and the new measurement
    kf->K = kf->P / (kf->P + kf->R);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	edd3 6a02 	vldr	s13, [r3, #8]
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	ed93 7a02 	vldr	s14, [r3, #8]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	edd3 7a01 	vldr	s15, [r3, #4]
 80016f0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80016f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	edc3 7a04 	vstr	s15, [r3, #16]

    // Update step: Update the state estimate 'X'
    // Here we adjust our state estimate based on the new measurement,
    // scaling the "innovation" by the Kalman Gain
    kf->X = kf->X + kf->K * (measurement - kf->X);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	ed93 7a03 	vldr	s14, [r3, #12]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	edd3 6a04 	vldr	s13, [r3, #16]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	edd3 7a03 	vldr	s15, [r3, #12]
 8001710:	ed97 6a00 	vldr	s12, [r7]
 8001714:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001718:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800171c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	edc3 7a03 	vstr	s15, [r3, #12]

    // Update step: Update the error covariance 'P'
    // We've used our observation, so we adjust our uncertainty accordingly
    kf->P = (1 - kf->K) * kf->P;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	edd3 7a04 	vldr	s15, [r3, #16]
 800172c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001730:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	edd3 7a02 	vldr	s15, [r3, #8]
 800173a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	edc3 7a02 	vstr	s15, [r3, #8]

    // Return the updated state estimate
    return kf->X;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	68db      	ldr	r3, [r3, #12]
 8001748:	ee07 3a90 	vmov	s15, r3
}
 800174c:	eeb0 0a67 	vmov.f32	s0, s15
 8001750:	370c      	adds	r7, #12
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
	...

0800175c <ProcessCommand>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void ProcessCommand(uint8_t *commandBuffer)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b084      	sub	sp, #16
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
    char *command = strtok((char*)commandBuffer, " "); // Command separation
 8001764:	4949      	ldr	r1, [pc, #292]	; (800188c <ProcessCommand+0x130>)
 8001766:	6878      	ldr	r0, [r7, #4]
 8001768:	f010 fa46 	bl	8011bf8 <strtok>
 800176c:	60f8      	str	r0, [r7, #12]
    // 'strtok'는 다음 호출 때 NULL을 사용하여 이전 문자열에서 계속 토큰을 추출
    char *argument = strtok(NULL, " "); // argument seperation
 800176e:	4947      	ldr	r1, [pc, #284]	; (800188c <ProcessCommand+0x130>)
 8001770:	2000      	movs	r0, #0
 8001772:	f010 fa41 	bl	8011bf8 <strtok>
 8001776:	60b8      	str	r0, [r7, #8]

    if (strcmp((char*)command, "echo") == 0) {HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "echo\n"), 100);}
 8001778:	4945      	ldr	r1, [pc, #276]	; (8001890 <ProcessCommand+0x134>)
 800177a:	68f8      	ldr	r0, [r7, #12]
 800177c:	f7fe fd48 	bl	8000210 <strcmp>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d10b      	bne.n	800179e <ProcessCommand+0x42>
 8001786:	4943      	ldr	r1, [pc, #268]	; (8001894 <ProcessCommand+0x138>)
 8001788:	4843      	ldr	r0, [pc, #268]	; (8001898 <ProcessCommand+0x13c>)
 800178a:	f00f fb71 	bl	8010e70 <siprintf>
 800178e:	4603      	mov	r3, r0
 8001790:	b29a      	uxth	r2, r3
 8001792:	2364      	movs	r3, #100	; 0x64
 8001794:	4940      	ldr	r1, [pc, #256]	; (8001898 <ProcessCommand+0x13c>)
 8001796:	4841      	ldr	r0, [pc, #260]	; (800189c <ProcessCommand+0x140>)
 8001798:	f008 fa00 	bl	8009b9c <HAL_UART_Transmit>
    else if (strcmp((char*)command, "setsensor") == 0) {SetSensorCommand();}
    else if (strcmp((char*)command, "auto") == 0) {AutoCommand();}
    else if (strcmp((char*)command, "3") == 0) {CalibrationCommand();}
    else if (strcmp((char*)command, "4") == 0) {CalibrationCommand();}
    else {HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "Please insert correct command\n"), 100);}
}
 800179c:	e071      	b.n	8001882 <ProcessCommand+0x126>
    else if (strcmp((char*)command, "rev") == 0) {RevCommand(argument);}
 800179e:	4940      	ldr	r1, [pc, #256]	; (80018a0 <ProcessCommand+0x144>)
 80017a0:	68f8      	ldr	r0, [r7, #12]
 80017a2:	f7fe fd35 	bl	8000210 <strcmp>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d103      	bne.n	80017b4 <ProcessCommand+0x58>
 80017ac:	68b8      	ldr	r0, [r7, #8]
 80017ae:	f000 f88d 	bl	80018cc <RevCommand>
}
 80017b2:	e066      	b.n	8001882 <ProcessCommand+0x126>
    else if (strcmp((char*)command, "lin") == 0) {LinCommand(argument);}
 80017b4:	493b      	ldr	r1, [pc, #236]	; (80018a4 <ProcessCommand+0x148>)
 80017b6:	68f8      	ldr	r0, [r7, #12]
 80017b8:	f7fe fd2a 	bl	8000210 <strcmp>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d103      	bne.n	80017ca <ProcessCommand+0x6e>
 80017c2:	68b8      	ldr	r0, [r7, #8]
 80017c4:	f000 f8ce 	bl	8001964 <LinCommand>
}
 80017c8:	e05b      	b.n	8001882 <ProcessCommand+0x126>
    else if (strcmp((char*)command, "servo") == 0) {ServoCommand(argument);}
 80017ca:	4937      	ldr	r1, [pc, #220]	; (80018a8 <ProcessCommand+0x14c>)
 80017cc:	68f8      	ldr	r0, [r7, #12]
 80017ce:	f7fe fd1f 	bl	8000210 <strcmp>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d103      	bne.n	80017e0 <ProcessCommand+0x84>
 80017d8:	68b8      	ldr	r0, [r7, #8]
 80017da:	f000 f911 	bl	8001a00 <ServoCommand>
}
 80017de:	e050      	b.n	8001882 <ProcessCommand+0x126>
    else if (strcmp((char*)command, "sensor") == 0) {SensorCommand();}
 80017e0:	4932      	ldr	r1, [pc, #200]	; (80018ac <ProcessCommand+0x150>)
 80017e2:	68f8      	ldr	r0, [r7, #12]
 80017e4:	f7fe fd14 	bl	8000210 <strcmp>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d102      	bne.n	80017f4 <ProcessCommand+0x98>
 80017ee:	f000 f96b 	bl	8001ac8 <SensorCommand>
}
 80017f2:	e046      	b.n	8001882 <ProcessCommand+0x126>
    else if (strcmp((char*)command, "cali") == 0) {CalibrationCommand();}
 80017f4:	492e      	ldr	r1, [pc, #184]	; (80018b0 <ProcessCommand+0x154>)
 80017f6:	68f8      	ldr	r0, [r7, #12]
 80017f8:	f7fe fd0a 	bl	8000210 <strcmp>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d102      	bne.n	8001808 <ProcessCommand+0xac>
 8001802:	f000 fef1 	bl	80025e8 <CalibrationCommand>
}
 8001806:	e03c      	b.n	8001882 <ProcessCommand+0x126>
    else if (strcmp((char*)command, "ini") == 0) {InitializaionCalibrationCommand();}
 8001808:	492a      	ldr	r1, [pc, #168]	; (80018b4 <ProcessCommand+0x158>)
 800180a:	68f8      	ldr	r0, [r7, #12]
 800180c:	f7fe fd00 	bl	8000210 <strcmp>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d102      	bne.n	800181c <ProcessCommand+0xc0>
 8001816:	f000 fc97 	bl	8002148 <InitializaionCalibrationCommand>
}
 800181a:	e032      	b.n	8001882 <ProcessCommand+0x126>
    else if (strcmp((char*)command, "setsensor") == 0) {SetSensorCommand();}
 800181c:	4926      	ldr	r1, [pc, #152]	; (80018b8 <ProcessCommand+0x15c>)
 800181e:	68f8      	ldr	r0, [r7, #12]
 8001820:	f7fe fcf6 	bl	8000210 <strcmp>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d102      	bne.n	8001830 <ProcessCommand+0xd4>
 800182a:	f000 fee5 	bl	80025f8 <SetSensorCommand>
}
 800182e:	e028      	b.n	8001882 <ProcessCommand+0x126>
    else if (strcmp((char*)command, "auto") == 0) {AutoCommand();}
 8001830:	4922      	ldr	r1, [pc, #136]	; (80018bc <ProcessCommand+0x160>)
 8001832:	68f8      	ldr	r0, [r7, #12]
 8001834:	f7fe fcec 	bl	8000210 <strcmp>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d102      	bne.n	8001844 <ProcessCommand+0xe8>
 800183e:	f000 fa73 	bl	8001d28 <AutoCommand>
}
 8001842:	e01e      	b.n	8001882 <ProcessCommand+0x126>
    else if (strcmp((char*)command, "3") == 0) {CalibrationCommand();}
 8001844:	491e      	ldr	r1, [pc, #120]	; (80018c0 <ProcessCommand+0x164>)
 8001846:	68f8      	ldr	r0, [r7, #12]
 8001848:	f7fe fce2 	bl	8000210 <strcmp>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d102      	bne.n	8001858 <ProcessCommand+0xfc>
 8001852:	f000 fec9 	bl	80025e8 <CalibrationCommand>
}
 8001856:	e014      	b.n	8001882 <ProcessCommand+0x126>
    else if (strcmp((char*)command, "4") == 0) {CalibrationCommand();}
 8001858:	491a      	ldr	r1, [pc, #104]	; (80018c4 <ProcessCommand+0x168>)
 800185a:	68f8      	ldr	r0, [r7, #12]
 800185c:	f7fe fcd8 	bl	8000210 <strcmp>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d102      	bne.n	800186c <ProcessCommand+0x110>
 8001866:	f000 febf 	bl	80025e8 <CalibrationCommand>
}
 800186a:	e00a      	b.n	8001882 <ProcessCommand+0x126>
    else {HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "Please insert correct command\n"), 100);}
 800186c:	4916      	ldr	r1, [pc, #88]	; (80018c8 <ProcessCommand+0x16c>)
 800186e:	480a      	ldr	r0, [pc, #40]	; (8001898 <ProcessCommand+0x13c>)
 8001870:	f00f fafe 	bl	8010e70 <siprintf>
 8001874:	4603      	mov	r3, r0
 8001876:	b29a      	uxth	r2, r3
 8001878:	2364      	movs	r3, #100	; 0x64
 800187a:	4907      	ldr	r1, [pc, #28]	; (8001898 <ProcessCommand+0x13c>)
 800187c:	4807      	ldr	r0, [pc, #28]	; (800189c <ProcessCommand+0x140>)
 800187e:	f008 f98d 	bl	8009b9c <HAL_UART_Transmit>
}
 8001882:	bf00      	nop
 8001884:	3710      	adds	r7, #16
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	0801625c 	.word	0x0801625c
 8001890:	08016260 	.word	0x08016260
 8001894:	08016268 	.word	0x08016268
 8001898:	200079f0 	.word	0x200079f0
 800189c:	20007a74 	.word	0x20007a74
 80018a0:	08016270 	.word	0x08016270
 80018a4:	08016274 	.word	0x08016274
 80018a8:	08016278 	.word	0x08016278
 80018ac:	08016280 	.word	0x08016280
 80018b0:	08016288 	.word	0x08016288
 80018b4:	08016290 	.word	0x08016290
 80018b8:	08016294 	.word	0x08016294
 80018bc:	080162a0 	.word	0x080162a0
 80018c0:	080162a8 	.word	0x080162a8
 80018c4:	080162ac 	.word	0x080162ac
 80018c8:	080162b0 	.word	0x080162b0

080018cc <RevCommand>:

void RevCommand(char *arg){
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b084      	sub	sp, #16
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
    int step_rev_angle;
    if(sscanf(arg, "%d", &step_rev_angle) == 1){
 80018d4:	f107 030c 	add.w	r3, r7, #12
 80018d8:	461a      	mov	r2, r3
 80018da:	491c      	ldr	r1, [pc, #112]	; (800194c <RevCommand+0x80>)
 80018dc:	6878      	ldr	r0, [r7, #4]
 80018de:	f00f fae7 	bl	8010eb0 <siscanf>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b01      	cmp	r3, #1
 80018e6:	d11e      	bne.n	8001926 <RevCommand+0x5a>
		HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%d deg revolution Start \n\r",step_rev_angle), 100);
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	461a      	mov	r2, r3
 80018ec:	4918      	ldr	r1, [pc, #96]	; (8001950 <RevCommand+0x84>)
 80018ee:	4819      	ldr	r0, [pc, #100]	; (8001954 <RevCommand+0x88>)
 80018f0:	f00f fabe 	bl	8010e70 <siprintf>
 80018f4:	4603      	mov	r3, r0
 80018f6:	b29a      	uxth	r2, r3
 80018f8:	2364      	movs	r3, #100	; 0x64
 80018fa:	4916      	ldr	r1, [pc, #88]	; (8001954 <RevCommand+0x88>)
 80018fc:	4816      	ldr	r0, [pc, #88]	; (8001958 <RevCommand+0x8c>)
 80018fe:	f008 f94d 	bl	8009b9c <HAL_UART_Transmit>
        stepRev(step_rev_angle);
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	4618      	mov	r0, r3
 8001906:	f001 f8df 	bl	8002ac8 <stepRev>
		HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%d deg revolution End \n\r",step_rev_angle), 100);
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	461a      	mov	r2, r3
 800190e:	4913      	ldr	r1, [pc, #76]	; (800195c <RevCommand+0x90>)
 8001910:	4810      	ldr	r0, [pc, #64]	; (8001954 <RevCommand+0x88>)
 8001912:	f00f faad 	bl	8010e70 <siprintf>
 8001916:	4603      	mov	r3, r0
 8001918:	b29a      	uxth	r2, r3
 800191a:	2364      	movs	r3, #100	; 0x64
 800191c:	490d      	ldr	r1, [pc, #52]	; (8001954 <RevCommand+0x88>)
 800191e:	480e      	ldr	r0, [pc, #56]	; (8001958 <RevCommand+0x8c>)
 8001920:	f008 f93c 	bl	8009b9c <HAL_UART_Transmit>
 8001924:	e00a      	b.n	800193c <RevCommand+0x70>
    }else{
    	HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "invalid data\r\n"), 100);
 8001926:	490e      	ldr	r1, [pc, #56]	; (8001960 <RevCommand+0x94>)
 8001928:	480a      	ldr	r0, [pc, #40]	; (8001954 <RevCommand+0x88>)
 800192a:	f00f faa1 	bl	8010e70 <siprintf>
 800192e:	4603      	mov	r3, r0
 8001930:	b29a      	uxth	r2, r3
 8001932:	2364      	movs	r3, #100	; 0x64
 8001934:	4907      	ldr	r1, [pc, #28]	; (8001954 <RevCommand+0x88>)
 8001936:	4808      	ldr	r0, [pc, #32]	; (8001958 <RevCommand+0x8c>)
 8001938:	f008 f930 	bl	8009b9c <HAL_UART_Transmit>
    }
    HAL_Delay(1000); // Delay for 1 second
 800193c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001940:	f001 fef6 	bl	8003730 <HAL_Delay>
}
 8001944:	bf00      	nop
 8001946:	3710      	adds	r7, #16
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	080162d0 	.word	0x080162d0
 8001950:	080162d4 	.word	0x080162d4
 8001954:	200079f0 	.word	0x200079f0
 8001958:	20007a74 	.word	0x20007a74
 800195c:	080162f0 	.word	0x080162f0
 8001960:	0801630c 	.word	0x0801630c

08001964 <LinCommand>:

void LinCommand(char *arg){
 8001964:	b580      	push	{r7, lr}
 8001966:	b084      	sub	sp, #16
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
    int step_lin_dist = 0;
 800196c:	2300      	movs	r3, #0
 800196e:	60fb      	str	r3, [r7, #12]
    if (sscanf(arg, "%d", &step_lin_dist) == 1) {
 8001970:	f107 030c 	add.w	r3, r7, #12
 8001974:	461a      	mov	r2, r3
 8001976:	491c      	ldr	r1, [pc, #112]	; (80019e8 <LinCommand+0x84>)
 8001978:	6878      	ldr	r0, [r7, #4]
 800197a:	f00f fa99 	bl	8010eb0 <siscanf>
 800197e:	4603      	mov	r3, r0
 8001980:	2b01      	cmp	r3, #1
 8001982:	d11e      	bne.n	80019c2 <LinCommand+0x5e>
		HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%d mm lin Still moving \n\r",step_lin_dist), 100);
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	461a      	mov	r2, r3
 8001988:	4918      	ldr	r1, [pc, #96]	; (80019ec <LinCommand+0x88>)
 800198a:	4819      	ldr	r0, [pc, #100]	; (80019f0 <LinCommand+0x8c>)
 800198c:	f00f fa70 	bl	8010e70 <siprintf>
 8001990:	4603      	mov	r3, r0
 8001992:	b29a      	uxth	r2, r3
 8001994:	2364      	movs	r3, #100	; 0x64
 8001996:	4916      	ldr	r1, [pc, #88]	; (80019f0 <LinCommand+0x8c>)
 8001998:	4816      	ldr	r0, [pc, #88]	; (80019f4 <LinCommand+0x90>)
 800199a:	f008 f8ff 	bl	8009b9c <HAL_UART_Transmit>
        stepLin(step_lin_dist);
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	4618      	mov	r0, r3
 80019a2:	f001 f8fb 	bl	8002b9c <stepLin>
        HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%d mm lin End\n\r", step_lin_dist), 100);
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	461a      	mov	r2, r3
 80019aa:	4913      	ldr	r1, [pc, #76]	; (80019f8 <LinCommand+0x94>)
 80019ac:	4810      	ldr	r0, [pc, #64]	; (80019f0 <LinCommand+0x8c>)
 80019ae:	f00f fa5f 	bl	8010e70 <siprintf>
 80019b2:	4603      	mov	r3, r0
 80019b4:	b29a      	uxth	r2, r3
 80019b6:	2364      	movs	r3, #100	; 0x64
 80019b8:	490d      	ldr	r1, [pc, #52]	; (80019f0 <LinCommand+0x8c>)
 80019ba:	480e      	ldr	r0, [pc, #56]	; (80019f4 <LinCommand+0x90>)
 80019bc:	f008 f8ee 	bl	8009b9c <HAL_UART_Transmit>
 80019c0:	e00a      	b.n	80019d8 <LinCommand+0x74>
    } else {
        HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "invalid data\r\n"), 100);
 80019c2:	490e      	ldr	r1, [pc, #56]	; (80019fc <LinCommand+0x98>)
 80019c4:	480a      	ldr	r0, [pc, #40]	; (80019f0 <LinCommand+0x8c>)
 80019c6:	f00f fa53 	bl	8010e70 <siprintf>
 80019ca:	4603      	mov	r3, r0
 80019cc:	b29a      	uxth	r2, r3
 80019ce:	2364      	movs	r3, #100	; 0x64
 80019d0:	4907      	ldr	r1, [pc, #28]	; (80019f0 <LinCommand+0x8c>)
 80019d2:	4808      	ldr	r0, [pc, #32]	; (80019f4 <LinCommand+0x90>)
 80019d4:	f008 f8e2 	bl	8009b9c <HAL_UART_Transmit>
    }
    HAL_Delay(1000); // Delay for 1 second
 80019d8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80019dc:	f001 fea8 	bl	8003730 <HAL_Delay>
}
 80019e0:	bf00      	nop
 80019e2:	3710      	adds	r7, #16
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	080162d0 	.word	0x080162d0
 80019ec:	0801631c 	.word	0x0801631c
 80019f0:	200079f0 	.word	0x200079f0
 80019f4:	20007a74 	.word	0x20007a74
 80019f8:	08016338 	.word	0x08016338
 80019fc:	0801630c 	.word	0x0801630c

08001a00 <ServoCommand>:

void ServoCommand(char *arg){
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b084      	sub	sp, #16
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
    float servo_angle_val = 0;
 8001a08:	f04f 0300 	mov.w	r3, #0
 8001a0c:	60fb      	str	r3, [r7, #12]
    if(sscanf(arg, "%f", &servo_angle_val) == 1) {
 8001a0e:	f107 030c 	add.w	r3, r7, #12
 8001a12:	461a      	mov	r2, r3
 8001a14:	4925      	ldr	r1, [pc, #148]	; (8001aac <ServoCommand+0xac>)
 8001a16:	6878      	ldr	r0, [r7, #4]
 8001a18:	f00f fa4a 	bl	8010eb0 <siscanf>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b01      	cmp	r3, #1
 8001a20:	d135      	bne.n	8001a8e <ServoCommand+0x8e>
    	HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%.2f servo Still moving \n\r", servo_angle_val), 100);
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	4618      	mov	r0, r3
 8001a26:	f7fe fdbf 	bl	80005a8 <__aeabi_f2d>
 8001a2a:	4602      	mov	r2, r0
 8001a2c:	460b      	mov	r3, r1
 8001a2e:	4920      	ldr	r1, [pc, #128]	; (8001ab0 <ServoCommand+0xb0>)
 8001a30:	4820      	ldr	r0, [pc, #128]	; (8001ab4 <ServoCommand+0xb4>)
 8001a32:	f00f fa1d 	bl	8010e70 <siprintf>
 8001a36:	4603      	mov	r3, r0
 8001a38:	b29a      	uxth	r2, r3
 8001a3a:	2364      	movs	r3, #100	; 0x64
 8001a3c:	491d      	ldr	r1, [pc, #116]	; (8001ab4 <ServoCommand+0xb4>)
 8001a3e:	481e      	ldr	r0, [pc, #120]	; (8001ab8 <ServoCommand+0xb8>)
 8001a40:	f008 f8ac 	bl	8009b9c <HAL_UART_Transmit>
    	servo_angle(&htim2, TIM_CHANNEL_1, servo_angle_val);
 8001a44:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a48:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a4c:	ee17 2a90 	vmov	r2, s15
 8001a50:	2100      	movs	r1, #0
 8001a52:	481a      	ldr	r0, [pc, #104]	; (8001abc <ServoCommand+0xbc>)
 8001a54:	f001 f93c 	bl	8002cd0 <servo_angle>
    	HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%.2f servo End \n\r", servo_angle_val), 100);
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f7fe fda4 	bl	80005a8 <__aeabi_f2d>
 8001a60:	4602      	mov	r2, r0
 8001a62:	460b      	mov	r3, r1
 8001a64:	4916      	ldr	r1, [pc, #88]	; (8001ac0 <ServoCommand+0xc0>)
 8001a66:	4813      	ldr	r0, [pc, #76]	; (8001ab4 <ServoCommand+0xb4>)
 8001a68:	f00f fa02 	bl	8010e70 <siprintf>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	b29a      	uxth	r2, r3
 8001a70:	2364      	movs	r3, #100	; 0x64
 8001a72:	4910      	ldr	r1, [pc, #64]	; (8001ab4 <ServoCommand+0xb4>)
 8001a74:	4810      	ldr	r0, [pc, #64]	; (8001ab8 <ServoCommand+0xb8>)
 8001a76:	f008 f891 	bl	8009b9c <HAL_UART_Transmit>
        HAL_Delay(2000); // Delay for 2 seconds
 8001a7a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001a7e:	f001 fe57 	bl	8003730 <HAL_Delay>
        servo_angle(&htim2, TIM_CHANNEL_1, 0); // return to servo origin
 8001a82:	2200      	movs	r2, #0
 8001a84:	2100      	movs	r1, #0
 8001a86:	480d      	ldr	r0, [pc, #52]	; (8001abc <ServoCommand+0xbc>)
 8001a88:	f001 f922 	bl	8002cd0 <servo_angle>
    }else{
        HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "invalid data\r\n"), 100);
    }
}
 8001a8c:	e00a      	b.n	8001aa4 <ServoCommand+0xa4>
        HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "invalid data\r\n"), 100);
 8001a8e:	490d      	ldr	r1, [pc, #52]	; (8001ac4 <ServoCommand+0xc4>)
 8001a90:	4808      	ldr	r0, [pc, #32]	; (8001ab4 <ServoCommand+0xb4>)
 8001a92:	f00f f9ed 	bl	8010e70 <siprintf>
 8001a96:	4603      	mov	r3, r0
 8001a98:	b29a      	uxth	r2, r3
 8001a9a:	2364      	movs	r3, #100	; 0x64
 8001a9c:	4905      	ldr	r1, [pc, #20]	; (8001ab4 <ServoCommand+0xb4>)
 8001a9e:	4806      	ldr	r0, [pc, #24]	; (8001ab8 <ServoCommand+0xb8>)
 8001aa0:	f008 f87c 	bl	8009b9c <HAL_UART_Transmit>
}
 8001aa4:	bf00      	nop
 8001aa6:	3710      	adds	r7, #16
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	08016348 	.word	0x08016348
 8001ab0:	0801634c 	.word	0x0801634c
 8001ab4:	200079f0 	.word	0x200079f0
 8001ab8:	20007a74 	.word	0x20007a74
 8001abc:	20007958 	.word	0x20007958
 8001ac0:	08016368 	.word	0x08016368
 8001ac4:	0801630c 	.word	0x0801630c

08001ac8 <SensorCommand>:

void SensorCommand(){
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b088      	sub	sp, #32
 8001acc:	af00      	add	r7, sp, #0

	ResetAllDevices();
 8001ace:	f001 fd29 	bl	8003524 <ResetAllDevices>
    HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "sensor test\r\n"), 100);
 8001ad2:	4983      	ldr	r1, [pc, #524]	; (8001ce0 <SensorCommand+0x218>)
 8001ad4:	4883      	ldr	r0, [pc, #524]	; (8001ce4 <SensorCommand+0x21c>)
 8001ad6:	f00f f9cb 	bl	8010e70 <siprintf>
 8001ada:	4603      	mov	r3, r0
 8001adc:	b29a      	uxth	r2, r3
 8001ade:	2364      	movs	r3, #100	; 0x64
 8001ae0:	4980      	ldr	r1, [pc, #512]	; (8001ce4 <SensorCommand+0x21c>)
 8001ae2:	4881      	ldr	r0, [pc, #516]	; (8001ce8 <SensorCommand+0x220>)
 8001ae4:	f008 f85a 	bl	8009b9c <HAL_UART_Transmit>
    uint32_t startTime, endTime, diffTime;
    for(int count =0; count < NUM_READINGS; count++){
 8001ae8:	2300      	movs	r3, #0
 8001aea:	61fb      	str	r3, [r7, #28]
 8001aec:	e0eb      	b.n	8001cc6 <SensorCommand+0x1fe>
    	uint8_t sensorCount = 0;
 8001aee:	2300      	movs	r3, #0
 8001af0:	76fb      	strb	r3, [r7, #27]
    	startTime = HAL_GetTick();
 8001af2:	f001 fe11 	bl	8003718 <HAL_GetTick>
 8001af6:	6138      	str	r0, [r7, #16]
		for (int i = 0; i < NUM_SENSOR; i++) {
 8001af8:	2300      	movs	r3, #0
 8001afa:	617b      	str	r3, [r7, #20]
 8001afc:	e09d      	b.n	8001c3a <SensorCommand+0x172>
			uint8_t q = i / 12;
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	4a7a      	ldr	r2, [pc, #488]	; (8001cec <SensorCommand+0x224>)
 8001b02:	fb82 1203 	smull	r1, r2, r2, r3
 8001b06:	1052      	asrs	r2, r2, #1
 8001b08:	17db      	asrs	r3, r3, #31
 8001b0a:	1ad3      	subs	r3, r2, r3
 8001b0c:	71fb      	strb	r3, [r7, #7]
			uint8_t r = i % 12;
 8001b0e:	697a      	ldr	r2, [r7, #20]
 8001b10:	4b76      	ldr	r3, [pc, #472]	; (8001cec <SensorCommand+0x224>)
 8001b12:	fb83 1302 	smull	r1, r3, r3, r2
 8001b16:	1059      	asrs	r1, r3, #1
 8001b18:	17d3      	asrs	r3, r2, #31
 8001b1a:	1ac9      	subs	r1, r1, r3
 8001b1c:	460b      	mov	r3, r1
 8001b1e:	005b      	lsls	r3, r3, #1
 8001b20:	440b      	add	r3, r1
 8001b22:	009b      	lsls	r3, r3, #2
 8001b24:	1ad1      	subs	r1, r2, r3
 8001b26:	460b      	mov	r3, r1
 8001b28:	71bb      	strb	r3, [r7, #6]
			uint8_t active_device = q * 2 + (r >= 8 ? 1 : 0);
 8001b2a:	79fb      	ldrb	r3, [r7, #7]
 8001b2c:	005b      	lsls	r3, r3, #1
 8001b2e:	b2db      	uxtb	r3, r3
 8001b30:	79ba      	ldrb	r2, [r7, #6]
 8001b32:	2a07      	cmp	r2, #7
 8001b34:	bf8c      	ite	hi
 8001b36:	2201      	movhi	r2, #1
 8001b38:	2200      	movls	r2, #0
 8001b3a:	b2d2      	uxtb	r2, r2
 8001b3c:	4413      	add	r3, r2
 8001b3e:	717b      	strb	r3, [r7, #5]
			uint8_t channel = (r >= 8) ? r - 8 : r;
 8001b40:	79bb      	ldrb	r3, [r7, #6]
 8001b42:	2b07      	cmp	r3, #7
 8001b44:	d903      	bls.n	8001b4e <SensorCommand+0x86>
 8001b46:	79bb      	ldrb	r3, [r7, #6]
 8001b48:	3b08      	subs	r3, #8
 8001b4a:	b2db      	uxtb	r3, r3
 8001b4c:	e000      	b.n	8001b50 <SensorCommand+0x88>
 8001b4e:	79bb      	ldrb	r3, [r7, #6]
 8001b50:	713b      	strb	r3, [r7, #4]
			ResetDevicesExcept(active_device);
 8001b52:	797b      	ldrb	r3, [r7, #5]
 8001b54:	4618      	mov	r0, r3
 8001b56:	f001 fd11 	bl	800357c <ResetDevicesExcept>
			setActiveTcaChannel(active_device, channel);
 8001b5a:	793a      	ldrb	r2, [r7, #4]
 8001b5c:	797b      	ldrb	r3, [r7, #5]
 8001b5e:	4611      	mov	r1, r2
 8001b60:	4618      	mov	r0, r3
 8001b62:	f001 fd3d 	bl	80035e0 <setActiveTcaChannel>
			Dev = &vl53l0x_s[i];
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001b6c:	fb02 f303 	mul.w	r3, r2, r3
 8001b70:	4a5f      	ldr	r2, [pc, #380]	; (8001cf0 <SensorCommand+0x228>)
 8001b72:	4413      	add	r3, r2
 8001b74:	4a5f      	ldr	r2, [pc, #380]	; (8001cf4 <SensorCommand+0x22c>)
 8001b76:	6013      	str	r3, [r2, #0]
			VL53L0X_PerformContinuousRangingMeasurement(Dev, &RangingData); // 1500us
 8001b78:	4b5e      	ldr	r3, [pc, #376]	; (8001cf4 <SensorCommand+0x22c>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	495e      	ldr	r1, [pc, #376]	; (8001cf8 <SensorCommand+0x230>)
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f00a ff20 	bl	800c9c4 <VL53L0X_PerformContinuousRangingMeasurement>
			if (RangingData.RangeStatus == 0) {
 8001b84:	4b5c      	ldr	r3, [pc, #368]	; (8001cf8 <SensorCommand+0x230>)
 8001b86:	7e1b      	ldrb	r3, [r3, #24]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d144      	bne.n	8001c16 <SensorCommand+0x14e>
			  if (RangingData.RangeMilliMeter < 80) {
 8001b8c:	4b5a      	ldr	r3, [pc, #360]	; (8001cf8 <SensorCommand+0x230>)
 8001b8e:	891b      	ldrh	r3, [r3, #8]
 8001b90:	2b4f      	cmp	r3, #79	; 0x4f
 8001b92:	d84f      	bhi.n	8001c34 <SensorCommand+0x16c>
				  float filteredValue = Kalman_Estimate(&filters[i], RangingData.RangeMilliMeter);
 8001b94:	697a      	ldr	r2, [r7, #20]
 8001b96:	4613      	mov	r3, r2
 8001b98:	009b      	lsls	r3, r3, #2
 8001b9a:	4413      	add	r3, r2
 8001b9c:	009b      	lsls	r3, r3, #2
 8001b9e:	4a57      	ldr	r2, [pc, #348]	; (8001cfc <SensorCommand+0x234>)
 8001ba0:	4413      	add	r3, r2
 8001ba2:	4a55      	ldr	r2, [pc, #340]	; (8001cf8 <SensorCommand+0x230>)
 8001ba4:	8912      	ldrh	r2, [r2, #8]
 8001ba6:	ee07 2a90 	vmov	s15, r2
 8001baa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001bae:	eeb0 0a67 	vmov.f32	s0, s15
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f7ff fd82 	bl	80016bc <Kalman_Estimate>
 8001bb8:	ed87 0a00 	vstr	s0, [r7]
				  HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%.1f ", filteredValue), 500);
 8001bbc:	6838      	ldr	r0, [r7, #0]
 8001bbe:	f7fe fcf3 	bl	80005a8 <__aeabi_f2d>
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	460b      	mov	r3, r1
 8001bc6:	494e      	ldr	r1, [pc, #312]	; (8001d00 <SensorCommand+0x238>)
 8001bc8:	4846      	ldr	r0, [pc, #280]	; (8001ce4 <SensorCommand+0x21c>)
 8001bca:	f00f f951 	bl	8010e70 <siprintf>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	b29a      	uxth	r2, r3
 8001bd2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001bd6:	4943      	ldr	r1, [pc, #268]	; (8001ce4 <SensorCommand+0x21c>)
 8001bd8:	4843      	ldr	r0, [pc, #268]	; (8001ce8 <SensorCommand+0x220>)
 8001bda:	f007 ffdf 	bl	8009b9c <HAL_UART_Transmit>
				  sensorValues[i][readingCount[i]] = filteredValue;
 8001bde:	4a49      	ldr	r2, [pc, #292]	; (8001d04 <SensorCommand+0x23c>)
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001be6:	4948      	ldr	r1, [pc, #288]	; (8001d08 <SensorCommand+0x240>)
 8001be8:	697a      	ldr	r2, [r7, #20]
 8001bea:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001bee:	fb00 f202 	mul.w	r2, r0, r2
 8001bf2:	4413      	add	r3, r2
 8001bf4:	009b      	lsls	r3, r3, #2
 8001bf6:	440b      	add	r3, r1
 8001bf8:	683a      	ldr	r2, [r7, #0]
 8001bfa:	601a      	str	r2, [r3, #0]
				  readingCount[i]++;
 8001bfc:	4a41      	ldr	r2, [pc, #260]	; (8001d04 <SensorCommand+0x23c>)
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c04:	1c5a      	adds	r2, r3, #1
 8001c06:	493f      	ldr	r1, [pc, #252]	; (8001d04 <SensorCommand+0x23c>)
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				  sensorCount++;
 8001c0e:	7efb      	ldrb	r3, [r7, #27]
 8001c10:	3301      	adds	r3, #1
 8001c12:	76fb      	strb	r3, [r7, #27]
 8001c14:	e00e      	b.n	8001c34 <SensorCommand+0x16c>
			  }
			}else{
				  HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%d ", RangingData.RangeStatus), 500);
 8001c16:	4b38      	ldr	r3, [pc, #224]	; (8001cf8 <SensorCommand+0x230>)
 8001c18:	7e1b      	ldrb	r3, [r3, #24]
 8001c1a:	461a      	mov	r2, r3
 8001c1c:	493b      	ldr	r1, [pc, #236]	; (8001d0c <SensorCommand+0x244>)
 8001c1e:	4831      	ldr	r0, [pc, #196]	; (8001ce4 <SensorCommand+0x21c>)
 8001c20:	f00f f926 	bl	8010e70 <siprintf>
 8001c24:	4603      	mov	r3, r0
 8001c26:	b29a      	uxth	r2, r3
 8001c28:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001c2c:	492d      	ldr	r1, [pc, #180]	; (8001ce4 <SensorCommand+0x21c>)
 8001c2e:	482e      	ldr	r0, [pc, #184]	; (8001ce8 <SensorCommand+0x220>)
 8001c30:	f007 ffb4 	bl	8009b9c <HAL_UART_Transmit>
		for (int i = 0; i < NUM_SENSOR; i++) {
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	3301      	adds	r3, #1
 8001c38:	617b      	str	r3, [r7, #20]
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	2b17      	cmp	r3, #23
 8001c3e:	f77f af5e 	ble.w	8001afe <SensorCommand+0x36>
				  // 1 : Sigma Fail | 2 : Signal Fail | 3 : Min Range Fail | 4 : Phase Fail | 5 : Hardware Fail | 255 : No update
			  }
		}
		endTime = HAL_GetTick();
 8001c42:	f001 fd69 	bl	8003718 <HAL_GetTick>
 8001c46:	60f8      	str	r0, [r7, #12]
		diffTime = endTime - startTime;
 8001c48:	68fa      	ldr	r2, [r7, #12]
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	1ad3      	subs	r3, r2, r3
 8001c4e:	60bb      	str	r3, [r7, #8]
		HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%lu ms ", diffTime), 100);
 8001c50:	68ba      	ldr	r2, [r7, #8]
 8001c52:	492f      	ldr	r1, [pc, #188]	; (8001d10 <SensorCommand+0x248>)
 8001c54:	4823      	ldr	r0, [pc, #140]	; (8001ce4 <SensorCommand+0x21c>)
 8001c56:	f00f f90b 	bl	8010e70 <siprintf>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	b29a      	uxth	r2, r3
 8001c5e:	2364      	movs	r3, #100	; 0x64
 8001c60:	4920      	ldr	r1, [pc, #128]	; (8001ce4 <SensorCommand+0x21c>)
 8001c62:	4821      	ldr	r0, [pc, #132]	; (8001ce8 <SensorCommand+0x220>)
 8001c64:	f007 ff9a 	bl	8009b9c <HAL_UART_Transmit>

		Hx711Data = Read_HX711();
 8001c68:	f7ff fbd6 	bl	8001418 <Read_HX711>
 8001c6c:	ee07 0a90 	vmov	s15, r0
 8001c70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c74:	4b27      	ldr	r3, [pc, #156]	; (8001d14 <SensorCommand+0x24c>)
 8001c76:	edc3 7a00 	vstr	s15, [r3]
		UART_SendWeight_g(Hx711Data,-1/1600.00f,10002); // Send the weight data over UART
 8001c7a:	4b26      	ldr	r3, [pc, #152]	; (8001d14 <SensorCommand+0x24c>)
 8001c7c:	edd3 7a00 	vldr	s15, [r3]
 8001c80:	ed9f 1a25 	vldr	s2, [pc, #148]	; 8001d18 <SensorCommand+0x250>
 8001c84:	eddf 0a25 	vldr	s1, [pc, #148]	; 8001d1c <SensorCommand+0x254>
 8001c88:	eeb0 0a67 	vmov.f32	s0, s15
 8001c8c:	f7ff fc12 	bl	80014b4 <UART_SendWeight_g>
		HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, " %d", sensorCount), 100);
 8001c90:	7efb      	ldrb	r3, [r7, #27]
 8001c92:	461a      	mov	r2, r3
 8001c94:	4922      	ldr	r1, [pc, #136]	; (8001d20 <SensorCommand+0x258>)
 8001c96:	4813      	ldr	r0, [pc, #76]	; (8001ce4 <SensorCommand+0x21c>)
 8001c98:	f00f f8ea 	bl	8010e70 <siprintf>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	b29a      	uxth	r2, r3
 8001ca0:	2364      	movs	r3, #100	; 0x64
 8001ca2:	4910      	ldr	r1, [pc, #64]	; (8001ce4 <SensorCommand+0x21c>)
 8001ca4:	4810      	ldr	r0, [pc, #64]	; (8001ce8 <SensorCommand+0x220>)
 8001ca6:	f007 ff79 	bl	8009b9c <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "\n"), 100);
 8001caa:	491e      	ldr	r1, [pc, #120]	; (8001d24 <SensorCommand+0x25c>)
 8001cac:	480d      	ldr	r0, [pc, #52]	; (8001ce4 <SensorCommand+0x21c>)
 8001cae:	f00f f8df 	bl	8010e70 <siprintf>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	b29a      	uxth	r2, r3
 8001cb6:	2364      	movs	r3, #100	; 0x64
 8001cb8:	490a      	ldr	r1, [pc, #40]	; (8001ce4 <SensorCommand+0x21c>)
 8001cba:	480b      	ldr	r0, [pc, #44]	; (8001ce8 <SensorCommand+0x220>)
 8001cbc:	f007 ff6e 	bl	8009b9c <HAL_UART_Transmit>
    for(int count =0; count < NUM_READINGS; count++){
 8001cc0:	69fb      	ldr	r3, [r7, #28]
 8001cc2:	3301      	adds	r3, #1
 8001cc4:	61fb      	str	r3, [r7, #28]
 8001cc6:	69fb      	ldr	r3, [r7, #28]
 8001cc8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001ccc:	f6ff af0f 	blt.w	8001aee <SensorCommand+0x26>

    }
    TransmitStats();
 8001cd0:	f7ff fa6a 	bl	80011a8 <TransmitStats>
    ResetSensorData();
 8001cd4:	f7ff fab4 	bl	8001240 <ResetSensorData>

}
 8001cd8:	bf00      	nop
 8001cda:	3720      	adds	r7, #32
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	0801637c 	.word	0x0801637c
 8001ce4:	200079f0 	.word	0x200079f0
 8001ce8:	20007a74 	.word	0x20007a74
 8001cec:	2aaaaaab 	.word	0x2aaaaaab
 8001cf0:	20007bc0 	.word	0x20007bc0
 8001cf4:	2000a140 	.word	0x2000a140
 8001cf8:	20007ba4 	.word	0x20007ba4
 8001cfc:	20007774 	.word	0x20007774
 8001d00:	0801638c 	.word	0x0801638c
 8001d04:	200076bc 	.word	0x200076bc
 8001d08:	2000057c 	.word	0x2000057c
 8001d0c:	08016394 	.word	0x08016394
 8001d10:	08016398 	.word	0x08016398
 8001d14:	2000771c 	.word	0x2000771c
 8001d18:	461c4800 	.word	0x461c4800
 8001d1c:	ba23d70a 	.word	0xba23d70a
 8001d20:	080163a0 	.word	0x080163a0
 8001d24:	080163a4 	.word	0x080163a4

08001d28 <AutoCommand>:

void AutoCommand(){
 8001d28:	b5b0      	push	{r4, r5, r7, lr}
 8001d2a:	b08e      	sub	sp, #56	; 0x38
 8001d2c:	af02      	add	r7, sp, #8


    HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "Auto Command \r\n"), 100);
 8001d2e:	49b0      	ldr	r1, [pc, #704]	; (8001ff0 <AutoCommand+0x2c8>)
 8001d30:	48b0      	ldr	r0, [pc, #704]	; (8001ff4 <AutoCommand+0x2cc>)
 8001d32:	f00f f89d 	bl	8010e70 <siprintf>
 8001d36:	4603      	mov	r3, r0
 8001d38:	b29a      	uxth	r2, r3
 8001d3a:	2364      	movs	r3, #100	; 0x64
 8001d3c:	49ad      	ldr	r1, [pc, #692]	; (8001ff4 <AutoCommand+0x2cc>)
 8001d3e:	48ae      	ldr	r0, [pc, #696]	; (8001ff8 <AutoCommand+0x2d0>)
 8001d40:	f007 ff2c 	bl	8009b9c <HAL_UART_Transmit>


	ResetAllDevices();
 8001d44:	f001 fbee 	bl	8003524 <ResetAllDevices>
    for(int count =0; count < 100; count++){
 8001d48:	2300      	movs	r3, #0
 8001d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d4c:	e097      	b.n	8001e7e <AutoCommand+0x156>
		for (int i = 0; i < NUM_SENSOR; i++) {
 8001d4e:	2300      	movs	r3, #0
 8001d50:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d52:	e082      	b.n	8001e5a <AutoCommand+0x132>
			uint8_t q = i / 12;
 8001d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d56:	4aa9      	ldr	r2, [pc, #676]	; (8001ffc <AutoCommand+0x2d4>)
 8001d58:	fb82 1203 	smull	r1, r2, r2, r3
 8001d5c:	1052      	asrs	r2, r2, #1
 8001d5e:	17db      	asrs	r3, r3, #31
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	71fb      	strb	r3, [r7, #7]
			uint8_t r = i % 12;
 8001d64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001d66:	4ba5      	ldr	r3, [pc, #660]	; (8001ffc <AutoCommand+0x2d4>)
 8001d68:	fb83 1302 	smull	r1, r3, r3, r2
 8001d6c:	1059      	asrs	r1, r3, #1
 8001d6e:	17d3      	asrs	r3, r2, #31
 8001d70:	1ac9      	subs	r1, r1, r3
 8001d72:	460b      	mov	r3, r1
 8001d74:	005b      	lsls	r3, r3, #1
 8001d76:	440b      	add	r3, r1
 8001d78:	009b      	lsls	r3, r3, #2
 8001d7a:	1ad1      	subs	r1, r2, r3
 8001d7c:	460b      	mov	r3, r1
 8001d7e:	71bb      	strb	r3, [r7, #6]
			uint8_t active_device = q * 2 + (r >= 8 ? 1 : 0);
 8001d80:	79fb      	ldrb	r3, [r7, #7]
 8001d82:	005b      	lsls	r3, r3, #1
 8001d84:	b2db      	uxtb	r3, r3
 8001d86:	79ba      	ldrb	r2, [r7, #6]
 8001d88:	2a07      	cmp	r2, #7
 8001d8a:	bf8c      	ite	hi
 8001d8c:	2201      	movhi	r2, #1
 8001d8e:	2200      	movls	r2, #0
 8001d90:	b2d2      	uxtb	r2, r2
 8001d92:	4413      	add	r3, r2
 8001d94:	717b      	strb	r3, [r7, #5]
			uint8_t channel = (r >= 8) ? r - 8 : r;
 8001d96:	79bb      	ldrb	r3, [r7, #6]
 8001d98:	2b07      	cmp	r3, #7
 8001d9a:	d903      	bls.n	8001da4 <AutoCommand+0x7c>
 8001d9c:	79bb      	ldrb	r3, [r7, #6]
 8001d9e:	3b08      	subs	r3, #8
 8001da0:	b2db      	uxtb	r3, r3
 8001da2:	e000      	b.n	8001da6 <AutoCommand+0x7e>
 8001da4:	79bb      	ldrb	r3, [r7, #6]
 8001da6:	713b      	strb	r3, [r7, #4]
			ResetDevicesExcept(active_device);
 8001da8:	797b      	ldrb	r3, [r7, #5]
 8001daa:	4618      	mov	r0, r3
 8001dac:	f001 fbe6 	bl	800357c <ResetDevicesExcept>
			setActiveTcaChannel(active_device, channel);
 8001db0:	793a      	ldrb	r2, [r7, #4]
 8001db2:	797b      	ldrb	r3, [r7, #5]
 8001db4:	4611      	mov	r1, r2
 8001db6:	4618      	mov	r0, r3
 8001db8:	f001 fc12 	bl	80035e0 <setActiveTcaChannel>
			Dev = &vl53l0x_s[i];
 8001dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dbe:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001dc2:	fb02 f303 	mul.w	r3, r2, r3
 8001dc6:	4a8e      	ldr	r2, [pc, #568]	; (8002000 <AutoCommand+0x2d8>)
 8001dc8:	4413      	add	r3, r2
 8001dca:	4a8e      	ldr	r2, [pc, #568]	; (8002004 <AutoCommand+0x2dc>)
 8001dcc:	6013      	str	r3, [r2, #0]
			VL53L0X_PerformContinuousRangingMeasurement(Dev, &RangingData); // 1500us
 8001dce:	4b8d      	ldr	r3, [pc, #564]	; (8002004 <AutoCommand+0x2dc>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	498d      	ldr	r1, [pc, #564]	; (8002008 <AutoCommand+0x2e0>)
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f00a fdf5 	bl	800c9c4 <VL53L0X_PerformContinuousRangingMeasurement>
			if (RangingData.RangeStatus == 0) {
 8001dda:	4b8b      	ldr	r3, [pc, #556]	; (8002008 <AutoCommand+0x2e0>)
 8001ddc:	7e1b      	ldrb	r3, [r3, #24]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d129      	bne.n	8001e36 <AutoCommand+0x10e>
			  if (RangingData.RangeMilliMeter < 80) {
 8001de2:	4b89      	ldr	r3, [pc, #548]	; (8002008 <AutoCommand+0x2e0>)
 8001de4:	891b      	ldrh	r3, [r3, #8]
 8001de6:	2b4f      	cmp	r3, #79	; 0x4f
 8001de8:	d834      	bhi.n	8001e54 <AutoCommand+0x12c>
				  float filteredValue = Kalman_Estimate(&filters[i], RangingData.RangeMilliMeter);
 8001dea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001dec:	4613      	mov	r3, r2
 8001dee:	009b      	lsls	r3, r3, #2
 8001df0:	4413      	add	r3, r2
 8001df2:	009b      	lsls	r3, r3, #2
 8001df4:	4a85      	ldr	r2, [pc, #532]	; (800200c <AutoCommand+0x2e4>)
 8001df6:	4413      	add	r3, r2
 8001df8:	4a83      	ldr	r2, [pc, #524]	; (8002008 <AutoCommand+0x2e0>)
 8001dfa:	8912      	ldrh	r2, [r2, #8]
 8001dfc:	ee07 2a90 	vmov	s15, r2
 8001e00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e04:	eeb0 0a67 	vmov.f32	s0, s15
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f7ff fc57 	bl	80016bc <Kalman_Estimate>
 8001e0e:	ed87 0a00 	vstr	s0, [r7]
				  HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%.1f ", filteredValue), 500);
 8001e12:	6838      	ldr	r0, [r7, #0]
 8001e14:	f7fe fbc8 	bl	80005a8 <__aeabi_f2d>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	460b      	mov	r3, r1
 8001e1c:	497c      	ldr	r1, [pc, #496]	; (8002010 <AutoCommand+0x2e8>)
 8001e1e:	4875      	ldr	r0, [pc, #468]	; (8001ff4 <AutoCommand+0x2cc>)
 8001e20:	f00f f826 	bl	8010e70 <siprintf>
 8001e24:	4603      	mov	r3, r0
 8001e26:	b29a      	uxth	r2, r3
 8001e28:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001e2c:	4971      	ldr	r1, [pc, #452]	; (8001ff4 <AutoCommand+0x2cc>)
 8001e2e:	4872      	ldr	r0, [pc, #456]	; (8001ff8 <AutoCommand+0x2d0>)
 8001e30:	f007 feb4 	bl	8009b9c <HAL_UART_Transmit>
 8001e34:	e00e      	b.n	8001e54 <AutoCommand+0x12c>
			  }
			}else{
				  HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%d ", RangingData.RangeStatus), 500);
 8001e36:	4b74      	ldr	r3, [pc, #464]	; (8002008 <AutoCommand+0x2e0>)
 8001e38:	7e1b      	ldrb	r3, [r3, #24]
 8001e3a:	461a      	mov	r2, r3
 8001e3c:	4975      	ldr	r1, [pc, #468]	; (8002014 <AutoCommand+0x2ec>)
 8001e3e:	486d      	ldr	r0, [pc, #436]	; (8001ff4 <AutoCommand+0x2cc>)
 8001e40:	f00f f816 	bl	8010e70 <siprintf>
 8001e44:	4603      	mov	r3, r0
 8001e46:	b29a      	uxth	r2, r3
 8001e48:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001e4c:	4969      	ldr	r1, [pc, #420]	; (8001ff4 <AutoCommand+0x2cc>)
 8001e4e:	486a      	ldr	r0, [pc, #424]	; (8001ff8 <AutoCommand+0x2d0>)
 8001e50:	f007 fea4 	bl	8009b9c <HAL_UART_Transmit>
		for (int i = 0; i < NUM_SENSOR; i++) {
 8001e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e56:	3301      	adds	r3, #1
 8001e58:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e5c:	2b17      	cmp	r3, #23
 8001e5e:	f77f af79 	ble.w	8001d54 <AutoCommand+0x2c>
				  // 1 : Sigma Fail | 2 : Signal Fail | 3 : Min Range Fail | 4 : Phase Fail | 5 : Hardware Fail | 255 : No update
			  }

		}
		HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "\n"), 100);
 8001e62:	496d      	ldr	r1, [pc, #436]	; (8002018 <AutoCommand+0x2f0>)
 8001e64:	4863      	ldr	r0, [pc, #396]	; (8001ff4 <AutoCommand+0x2cc>)
 8001e66:	f00f f803 	bl	8010e70 <siprintf>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	b29a      	uxth	r2, r3
 8001e6e:	2364      	movs	r3, #100	; 0x64
 8001e70:	4960      	ldr	r1, [pc, #384]	; (8001ff4 <AutoCommand+0x2cc>)
 8001e72:	4861      	ldr	r0, [pc, #388]	; (8001ff8 <AutoCommand+0x2d0>)
 8001e74:	f007 fe92 	bl	8009b9c <HAL_UART_Transmit>
    for(int count =0; count < 100; count++){
 8001e78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e7a:	3301      	adds	r3, #1
 8001e7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e80:	2b63      	cmp	r3, #99	; 0x63
 8001e82:	f77f af64 	ble.w	8001d4e <AutoCommand+0x26>
    }




	HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "autoMode\r\n"), 100);
 8001e86:	4965      	ldr	r1, [pc, #404]	; (800201c <AutoCommand+0x2f4>)
 8001e88:	485a      	ldr	r0, [pc, #360]	; (8001ff4 <AutoCommand+0x2cc>)
 8001e8a:	f00e fff1 	bl	8010e70 <siprintf>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	b29a      	uxth	r2, r3
 8001e92:	2364      	movs	r3, #100	; 0x64
 8001e94:	4957      	ldr	r1, [pc, #348]	; (8001ff4 <AutoCommand+0x2cc>)
 8001e96:	4858      	ldr	r0, [pc, #352]	; (8001ff8 <AutoCommand+0x2d0>)
 8001e98:	f007 fe80 	bl	8009b9c <HAL_UART_Transmit>
	ResetAllDevices();
 8001e9c:	f001 fb42 	bl	8003524 <ResetAllDevices>

	float forceSensorZeroPoint = 0.0f;
 8001ea0:	f04f 0300 	mov.w	r3, #0
 8001ea4:	627b      	str	r3, [r7, #36]	; 0x24

	servo_angle(&htim2, TIM_CHANNEL_1, 1); // poking
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	2100      	movs	r1, #0
 8001eaa:	485d      	ldr	r0, [pc, #372]	; (8002020 <AutoCommand+0x2f8>)
 8001eac:	f000 ff10 	bl	8002cd0 <servo_angle>
  	 for(int lin = 11; lin < 22; lin ++){
 8001eb0:	230b      	movs	r3, #11
 8001eb2:	623b      	str	r3, [r7, #32]
 8001eb4:	e128      	b.n	8002108 <AutoCommand+0x3e0>
		 for(int rev = 0; rev < 18; rev++){
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	61fb      	str	r3, [r7, #28]
 8001eba:	e113      	b.n	80020e4 <AutoCommand+0x3bc>
			 for(int r = 0; r < 8; r++){
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	61bb      	str	r3, [r7, #24]
 8001ec0:	e106      	b.n	80020d0 <AutoCommand+0x3a8>
				 servo_angle(&htim2, TIM_CHANNEL_1, r+7); // poking
 8001ec2:	69bb      	ldr	r3, [r7, #24]
 8001ec4:	3307      	adds	r3, #7
 8001ec6:	461a      	mov	r2, r3
 8001ec8:	2100      	movs	r1, #0
 8001eca:	4855      	ldr	r0, [pc, #340]	; (8002020 <AutoCommand+0x2f8>)
 8001ecc:	f000 ff00 	bl	8002cd0 <servo_angle>
				 HAL_Delay(500);
 8001ed0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001ed4:	f001 fc2c 	bl	8003730 <HAL_Delay>
				 for(int count = 0; count < 40; count++){
 8001ed8:	2300      	movs	r3, #0
 8001eda:	617b      	str	r3, [r7, #20]
 8001edc:	e0e4      	b.n	80020a8 <AutoCommand+0x380>
					  for (int i = 0; i < NUM_SENSOR; i++) {
 8001ede:	2300      	movs	r3, #0
 8001ee0:	613b      	str	r3, [r7, #16]
 8001ee2:	e072      	b.n	8001fca <AutoCommand+0x2a2>
						uint8_t q = i / 12;
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	4a45      	ldr	r2, [pc, #276]	; (8001ffc <AutoCommand+0x2d4>)
 8001ee8:	fb82 1203 	smull	r1, r2, r2, r3
 8001eec:	1052      	asrs	r2, r2, #1
 8001eee:	17db      	asrs	r3, r3, #31
 8001ef0:	1ad3      	subs	r3, r2, r3
 8001ef2:	73fb      	strb	r3, [r7, #15]
						uint8_t r = i % 12;
 8001ef4:	693a      	ldr	r2, [r7, #16]
 8001ef6:	4b41      	ldr	r3, [pc, #260]	; (8001ffc <AutoCommand+0x2d4>)
 8001ef8:	fb83 1302 	smull	r1, r3, r3, r2
 8001efc:	1059      	asrs	r1, r3, #1
 8001efe:	17d3      	asrs	r3, r2, #31
 8001f00:	1ac9      	subs	r1, r1, r3
 8001f02:	460b      	mov	r3, r1
 8001f04:	005b      	lsls	r3, r3, #1
 8001f06:	440b      	add	r3, r1
 8001f08:	009b      	lsls	r3, r3, #2
 8001f0a:	1ad1      	subs	r1, r2, r3
 8001f0c:	460b      	mov	r3, r1
 8001f0e:	73bb      	strb	r3, [r7, #14]
						uint8_t active_device = q * 2 + (r >= 8 ? 1 : 0);
 8001f10:	7bfb      	ldrb	r3, [r7, #15]
 8001f12:	005b      	lsls	r3, r3, #1
 8001f14:	b2db      	uxtb	r3, r3
 8001f16:	7bba      	ldrb	r2, [r7, #14]
 8001f18:	2a07      	cmp	r2, #7
 8001f1a:	bf8c      	ite	hi
 8001f1c:	2201      	movhi	r2, #1
 8001f1e:	2200      	movls	r2, #0
 8001f20:	b2d2      	uxtb	r2, r2
 8001f22:	4413      	add	r3, r2
 8001f24:	737b      	strb	r3, [r7, #13]
						uint8_t channel = (r >= 8) ? r - 8 : r;
 8001f26:	7bbb      	ldrb	r3, [r7, #14]
 8001f28:	2b07      	cmp	r3, #7
 8001f2a:	d903      	bls.n	8001f34 <AutoCommand+0x20c>
 8001f2c:	7bbb      	ldrb	r3, [r7, #14]
 8001f2e:	3b08      	subs	r3, #8
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	e000      	b.n	8001f36 <AutoCommand+0x20e>
 8001f34:	7bbb      	ldrb	r3, [r7, #14]
 8001f36:	733b      	strb	r3, [r7, #12]
						ResetDevicesExcept(active_device);
 8001f38:	7b7b      	ldrb	r3, [r7, #13]
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f001 fb1e 	bl	800357c <ResetDevicesExcept>
				        setActiveTcaChannel(active_device,channel);
 8001f40:	7b3a      	ldrb	r2, [r7, #12]
 8001f42:	7b7b      	ldrb	r3, [r7, #13]
 8001f44:	4611      	mov	r1, r2
 8001f46:	4618      	mov	r0, r3
 8001f48:	f001 fb4a 	bl	80035e0 <setActiveTcaChannel>
						Dev = &vl53l0x_s[i];
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001f52:	fb02 f303 	mul.w	r3, r2, r3
 8001f56:	4a2a      	ldr	r2, [pc, #168]	; (8002000 <AutoCommand+0x2d8>)
 8001f58:	4413      	add	r3, r2
 8001f5a:	4a2a      	ldr	r2, [pc, #168]	; (8002004 <AutoCommand+0x2dc>)
 8001f5c:	6013      	str	r3, [r2, #0]
						VL53L0X_PerformContinuousRangingMeasurement(Dev, &RangingData); // 1500us
 8001f5e:	4b29      	ldr	r3, [pc, #164]	; (8002004 <AutoCommand+0x2dc>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4929      	ldr	r1, [pc, #164]	; (8002008 <AutoCommand+0x2e0>)
 8001f64:	4618      	mov	r0, r3
 8001f66:	f00a fd2d 	bl	800c9c4 <VL53L0X_PerformContinuousRangingMeasurement>
						if (RangingData.RangeStatus == 0) {
 8001f6a:	4b27      	ldr	r3, [pc, #156]	; (8002008 <AutoCommand+0x2e0>)
 8001f6c:	7e1b      	ldrb	r3, [r3, #24]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d128      	bne.n	8001fc4 <AutoCommand+0x29c>
						  if (RangingData.RangeMilliMeter < 80) {
 8001f72:	4b25      	ldr	r3, [pc, #148]	; (8002008 <AutoCommand+0x2e0>)
 8001f74:	891b      	ldrh	r3, [r3, #8]
 8001f76:	2b4f      	cmp	r3, #79	; 0x4f
 8001f78:	d824      	bhi.n	8001fc4 <AutoCommand+0x29c>
							  float filteredValue = Kalman_Estimate(&filters[i], RangingData.RangeMilliMeter);
 8001f7a:	693a      	ldr	r2, [r7, #16]
 8001f7c:	4613      	mov	r3, r2
 8001f7e:	009b      	lsls	r3, r3, #2
 8001f80:	4413      	add	r3, r2
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	4a21      	ldr	r2, [pc, #132]	; (800200c <AutoCommand+0x2e4>)
 8001f86:	4413      	add	r3, r2
 8001f88:	4a1f      	ldr	r2, [pc, #124]	; (8002008 <AutoCommand+0x2e0>)
 8001f8a:	8912      	ldrh	r2, [r2, #8]
 8001f8c:	ee07 2a90 	vmov	s15, r2
 8001f90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f94:	eeb0 0a67 	vmov.f32	s0, s15
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f7ff fb8f 	bl	80016bc <Kalman_Estimate>
 8001f9e:	ed87 0a02 	vstr	s0, [r7, #8]
							  HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%.2f ", filteredValue), 500);
 8001fa2:	68b8      	ldr	r0, [r7, #8]
 8001fa4:	f7fe fb00 	bl	80005a8 <__aeabi_f2d>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	460b      	mov	r3, r1
 8001fac:	491d      	ldr	r1, [pc, #116]	; (8002024 <AutoCommand+0x2fc>)
 8001fae:	4811      	ldr	r0, [pc, #68]	; (8001ff4 <AutoCommand+0x2cc>)
 8001fb0:	f00e ff5e 	bl	8010e70 <siprintf>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	b29a      	uxth	r2, r3
 8001fb8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001fbc:	490d      	ldr	r1, [pc, #52]	; (8001ff4 <AutoCommand+0x2cc>)
 8001fbe:	480e      	ldr	r0, [pc, #56]	; (8001ff8 <AutoCommand+0x2d0>)
 8001fc0:	f007 fdec 	bl	8009b9c <HAL_UART_Transmit>
					  for (int i = 0; i < NUM_SENSOR; i++) {
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	3301      	adds	r3, #1
 8001fc8:	613b      	str	r3, [r7, #16]
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	2b17      	cmp	r3, #23
 8001fce:	dd89      	ble.n	8001ee4 <AutoCommand+0x1bc>
							  //HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%d ", RangingData.RangeStatus), 500);
							  // 1 : Sigma Fail | 2 : Signal Fail | 3 : Min Range Fail | 4 : Phase Fail | 5 : Hardware Fail | 255 : No update
						  }
					  }

				if (r == 0) {
 8001fd0:	69bb      	ldr	r3, [r7, #24]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d12a      	bne.n	800202c <AutoCommand+0x304>
					forceSensorZeroPoint = Read_HX711();
 8001fd6:	f7ff fa1f 	bl	8001418 <Read_HX711>
 8001fda:	ee07 0a90 	vmov	s15, r0
 8001fde:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fe2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
					Hx711Data = 0;
 8001fe6:	4b10      	ldr	r3, [pc, #64]	; (8002028 <AutoCommand+0x300>)
 8001fe8:	f04f 0200 	mov.w	r2, #0
 8001fec:	601a      	str	r2, [r3, #0]
 8001fee:	e02a      	b.n	8002046 <AutoCommand+0x31e>
 8001ff0:	080163a8 	.word	0x080163a8
 8001ff4:	200079f0 	.word	0x200079f0
 8001ff8:	20007a74 	.word	0x20007a74
 8001ffc:	2aaaaaab 	.word	0x2aaaaaab
 8002000:	20007bc0 	.word	0x20007bc0
 8002004:	2000a140 	.word	0x2000a140
 8002008:	20007ba4 	.word	0x20007ba4
 800200c:	20007774 	.word	0x20007774
 8002010:	0801638c 	.word	0x0801638c
 8002014:	08016394 	.word	0x08016394
 8002018:	080163a4 	.word	0x080163a4
 800201c:	080163b8 	.word	0x080163b8
 8002020:	20007958 	.word	0x20007958
 8002024:	080163c4 	.word	0x080163c4
 8002028:	2000771c 	.word	0x2000771c
				} else {
					Hx711Data = Read_HX711() - forceSensorZeroPoint;
 800202c:	f7ff f9f4 	bl	8001418 <Read_HX711>
 8002030:	ee07 0a90 	vmov	s15, r0
 8002034:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002038:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800203c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002040:	4b39      	ldr	r3, [pc, #228]	; (8002128 <AutoCommand+0x400>)
 8002042:	edc3 7a00 	vstr	s15, [r3]
				}

				  UART_SendWeight_g(Hx711Data,-1/1600.00f,0); // Send the weight data over UART
 8002046:	4b38      	ldr	r3, [pc, #224]	; (8002128 <AutoCommand+0x400>)
 8002048:	edd3 7a00 	vldr	s15, [r3]
 800204c:	ed9f 1a37 	vldr	s2, [pc, #220]	; 800212c <AutoCommand+0x404>
 8002050:	eddf 0a37 	vldr	s1, [pc, #220]	; 8002130 <AutoCommand+0x408>
 8002054:	eeb0 0a67 	vmov.f32	s0, s15
 8002058:	f7ff fa2c 	bl	80014b4 <UART_SendWeight_g>
				  HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, " %d %d %.2f\n", 8*lin+2, 20*rev, r*0.8), 500);
 800205c:	6a3b      	ldr	r3, [r7, #32]
 800205e:	00db      	lsls	r3, r3, #3
 8002060:	1c9c      	adds	r4, r3, #2
 8002062:	69fa      	ldr	r2, [r7, #28]
 8002064:	4613      	mov	r3, r2
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	4413      	add	r3, r2
 800206a:	009b      	lsls	r3, r3, #2
 800206c:	461d      	mov	r5, r3
 800206e:	69b8      	ldr	r0, [r7, #24]
 8002070:	f7fe fa88 	bl	8000584 <__aeabi_i2d>
 8002074:	a32a      	add	r3, pc, #168	; (adr r3, 8002120 <AutoCommand+0x3f8>)
 8002076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800207a:	f7fe faed 	bl	8000658 <__aeabi_dmul>
 800207e:	4602      	mov	r2, r0
 8002080:	460b      	mov	r3, r1
 8002082:	e9cd 2300 	strd	r2, r3, [sp]
 8002086:	462b      	mov	r3, r5
 8002088:	4622      	mov	r2, r4
 800208a:	492a      	ldr	r1, [pc, #168]	; (8002134 <AutoCommand+0x40c>)
 800208c:	482a      	ldr	r0, [pc, #168]	; (8002138 <AutoCommand+0x410>)
 800208e:	f00e feef 	bl	8010e70 <siprintf>
 8002092:	4603      	mov	r3, r0
 8002094:	b29a      	uxth	r2, r3
 8002096:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800209a:	4927      	ldr	r1, [pc, #156]	; (8002138 <AutoCommand+0x410>)
 800209c:	4827      	ldr	r0, [pc, #156]	; (800213c <AutoCommand+0x414>)
 800209e:	f007 fd7d 	bl	8009b9c <HAL_UART_Transmit>
				 for(int count = 0; count < 40; count++){
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	3301      	adds	r3, #1
 80020a6:	617b      	str	r3, [r7, #20]
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	2b27      	cmp	r3, #39	; 0x27
 80020ac:	f77f af17 	ble.w	8001ede <AutoCommand+0x1b6>
				 }
			 HAL_Delay(500);
 80020b0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80020b4:	f001 fb3c 	bl	8003730 <HAL_Delay>
			 servo_angle(&htim2, TIM_CHANNEL_1, 0); // turn to origin
 80020b8:	2200      	movs	r2, #0
 80020ba:	2100      	movs	r1, #0
 80020bc:	4820      	ldr	r0, [pc, #128]	; (8002140 <AutoCommand+0x418>)
 80020be:	f000 fe07 	bl	8002cd0 <servo_angle>
			 HAL_Delay(500);
 80020c2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80020c6:	f001 fb33 	bl	8003730 <HAL_Delay>
			 for(int r = 0; r < 8; r++){
 80020ca:	69bb      	ldr	r3, [r7, #24]
 80020cc:	3301      	adds	r3, #1
 80020ce:	61bb      	str	r3, [r7, #24]
 80020d0:	69bb      	ldr	r3, [r7, #24]
 80020d2:	2b07      	cmp	r3, #7
 80020d4:	f77f aef5 	ble.w	8001ec2 <AutoCommand+0x19a>
			 }
			 stepRev(20); // revolution
 80020d8:	2014      	movs	r0, #20
 80020da:	f000 fcf5 	bl	8002ac8 <stepRev>
		 for(int rev = 0; rev < 18; rev++){
 80020de:	69fb      	ldr	r3, [r7, #28]
 80020e0:	3301      	adds	r3, #1
 80020e2:	61fb      	str	r3, [r7, #28]
 80020e4:	69fb      	ldr	r3, [r7, #28]
 80020e6:	2b11      	cmp	r3, #17
 80020e8:	f77f aee8 	ble.w	8001ebc <AutoCommand+0x194>
		 }
		 HAL_Delay(500);
 80020ec:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80020f0:	f001 fb1e 	bl	8003730 <HAL_Delay>
		 stepRev(-360);
 80020f4:	4813      	ldr	r0, [pc, #76]	; (8002144 <AutoCommand+0x41c>)
 80020f6:	f000 fce7 	bl	8002ac8 <stepRev>
		 stepLin(-8); // moving horizontal
 80020fa:	f06f 0007 	mvn.w	r0, #7
 80020fe:	f000 fd4d 	bl	8002b9c <stepLin>
  	 for(int lin = 11; lin < 22; lin ++){
 8002102:	6a3b      	ldr	r3, [r7, #32]
 8002104:	3301      	adds	r3, #1
 8002106:	623b      	str	r3, [r7, #32]
 8002108:	6a3b      	ldr	r3, [r7, #32]
 800210a:	2b15      	cmp	r3, #21
 800210c:	f77f aed3 	ble.w	8001eb6 <AutoCommand+0x18e>
  	 }
}
 8002110:	bf00      	nop
 8002112:	bf00      	nop
 8002114:	3730      	adds	r7, #48	; 0x30
 8002116:	46bd      	mov	sp, r7
 8002118:	bdb0      	pop	{r4, r5, r7, pc}
 800211a:	bf00      	nop
 800211c:	f3af 8000 	nop.w
 8002120:	9999999a 	.word	0x9999999a
 8002124:	3fe99999 	.word	0x3fe99999
 8002128:	2000771c 	.word	0x2000771c
 800212c:	00000000 	.word	0x00000000
 8002130:	ba23d70a 	.word	0xba23d70a
 8002134:	080163cc 	.word	0x080163cc
 8002138:	200079f0 	.word	0x200079f0
 800213c:	20007a74 	.word	0x20007a74
 8002140:	20007958 	.word	0x20007958
 8002144:	fffffe98 	.word	0xfffffe98

08002148 <InitializaionCalibrationCommand>:

void InitializaionCalibrationCommand()
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b086      	sub	sp, #24
 800214c:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "InitializationCommand\n\r"), 100);
 800214e:	49b3      	ldr	r1, [pc, #716]	; (800241c <InitializaionCalibrationCommand+0x2d4>)
 8002150:	48b3      	ldr	r0, [pc, #716]	; (8002420 <InitializaionCalibrationCommand+0x2d8>)
 8002152:	f00e fe8d 	bl	8010e70 <siprintf>
 8002156:	4603      	mov	r3, r0
 8002158:	b29a      	uxth	r2, r3
 800215a:	2364      	movs	r3, #100	; 0x64
 800215c:	49b0      	ldr	r1, [pc, #704]	; (8002420 <InitializaionCalibrationCommand+0x2d8>)
 800215e:	48b1      	ldr	r0, [pc, #708]	; (8002424 <InitializaionCalibrationCommand+0x2dc>)
 8002160:	f007 fd1c 	bl	8009b9c <HAL_UART_Transmit>

	ResetAllDevices();
 8002164:	f001 f9de 	bl	8003524 <ResetAllDevices>
  	for (int i = 0; i < NUM_SENSOR; i++) {
 8002168:	2300      	movs	r3, #0
 800216a:	617b      	str	r3, [r7, #20]
 800216c:	e10b      	b.n	8002386 <InitializaionCalibrationCommand+0x23e>
  	    uint8_t q = i / 12;
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	4aad      	ldr	r2, [pc, #692]	; (8002428 <InitializaionCalibrationCommand+0x2e0>)
 8002172:	fb82 1203 	smull	r1, r2, r2, r3
 8002176:	1052      	asrs	r2, r2, #1
 8002178:	17db      	asrs	r3, r3, #31
 800217a:	1ad3      	subs	r3, r2, r3
 800217c:	70fb      	strb	r3, [r7, #3]
  	    uint8_t r = i % 12;
 800217e:	697a      	ldr	r2, [r7, #20]
 8002180:	4ba9      	ldr	r3, [pc, #676]	; (8002428 <InitializaionCalibrationCommand+0x2e0>)
 8002182:	fb83 1302 	smull	r1, r3, r3, r2
 8002186:	1059      	asrs	r1, r3, #1
 8002188:	17d3      	asrs	r3, r2, #31
 800218a:	1ac9      	subs	r1, r1, r3
 800218c:	460b      	mov	r3, r1
 800218e:	005b      	lsls	r3, r3, #1
 8002190:	440b      	add	r3, r1
 8002192:	009b      	lsls	r3, r3, #2
 8002194:	1ad1      	subs	r1, r2, r3
 8002196:	460b      	mov	r3, r1
 8002198:	70bb      	strb	r3, [r7, #2]
  	    uint8_t active_device = q * 2 + (r >= 8 ? 1 : 0);
 800219a:	78fb      	ldrb	r3, [r7, #3]
 800219c:	005b      	lsls	r3, r3, #1
 800219e:	b2db      	uxtb	r3, r3
 80021a0:	78ba      	ldrb	r2, [r7, #2]
 80021a2:	2a07      	cmp	r2, #7
 80021a4:	bf8c      	ite	hi
 80021a6:	2201      	movhi	r2, #1
 80021a8:	2200      	movls	r2, #0
 80021aa:	b2d2      	uxtb	r2, r2
 80021ac:	4413      	add	r3, r2
 80021ae:	707b      	strb	r3, [r7, #1]
  	    uint8_t channel = (r >= 8) ? r - 8 : r;
 80021b0:	78bb      	ldrb	r3, [r7, #2]
 80021b2:	2b07      	cmp	r3, #7
 80021b4:	d903      	bls.n	80021be <InitializaionCalibrationCommand+0x76>
 80021b6:	78bb      	ldrb	r3, [r7, #2]
 80021b8:	3b08      	subs	r3, #8
 80021ba:	b2db      	uxtb	r3, r3
 80021bc:	e000      	b.n	80021c0 <InitializaionCalibrationCommand+0x78>
 80021be:	78bb      	ldrb	r3, [r7, #2]
 80021c0:	703b      	strb	r3, [r7, #0]

        ResetDevicesExcept(active_device);
 80021c2:	787b      	ldrb	r3, [r7, #1]
 80021c4:	4618      	mov	r0, r3
 80021c6:	f001 f9d9 	bl	800357c <ResetDevicesExcept>
        setActiveTcaChannel(active_device,channel);
 80021ca:	783a      	ldrb	r2, [r7, #0]
 80021cc:	787b      	ldrb	r3, [r7, #1]
 80021ce:	4611      	mov	r1, r2
 80021d0:	4618      	mov	r0, r3
 80021d2:	f001 fa05 	bl	80035e0 <setActiveTcaChannel>

  		Dev = &vl53l0x_s[i];
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80021dc:	fb02 f303 	mul.w	r3, r2, r3
 80021e0:	4a92      	ldr	r2, [pc, #584]	; (800242c <InitializaionCalibrationCommand+0x2e4>)
 80021e2:	4413      	add	r3, r2
 80021e4:	4a92      	ldr	r2, [pc, #584]	; (8002430 <InitializaionCalibrationCommand+0x2e8>)
 80021e6:	6013      	str	r3, [r2, #0]
  		Dev->I2cHandle = &hi2c1;
 80021e8:	4b91      	ldr	r3, [pc, #580]	; (8002430 <InitializaionCalibrationCommand+0x2e8>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a91      	ldr	r2, [pc, #580]	; (8002434 <InitializaionCalibrationCommand+0x2ec>)
 80021ee:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  		Dev->I2cDevAddr = VL53L0X_ADDR;
 80021f2:	4b8f      	ldr	r3, [pc, #572]	; (8002430 <InitializaionCalibrationCommand+0x2e8>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	2252      	movs	r2, #82	; 0x52
 80021f8:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160

  		VL53L0X_WaitDeviceBooted( Dev );
 80021fc:	4b8c      	ldr	r3, [pc, #560]	; (8002430 <InitializaionCalibrationCommand+0x2e8>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4618      	mov	r0, r3
 8002202:	f009 f9ed 	bl	800b5e0 <VL53L0X_WaitDeviceBooted>
  		VL53L0X_DataInit( Dev );
 8002206:	4b8a      	ldr	r3, [pc, #552]	; (8002430 <InitializaionCalibrationCommand+0x2e8>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4618      	mov	r0, r3
 800220c:	f008 ff02 	bl	800b014 <VL53L0X_DataInit>
  		VL53L0X_StaticInit( Dev );
 8002210:	4b87      	ldr	r3, [pc, #540]	; (8002430 <InitializaionCalibrationCommand+0x2e8>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4618      	mov	r0, r3
 8002216:	f009 f861 	bl	800b2dc <VL53L0X_StaticInit>
  		VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_CONTINUOUS_RANGING);
 800221a:	4b85      	ldr	r3, [pc, #532]	; (8002430 <InitializaionCalibrationCommand+0x2e8>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	2101      	movs	r1, #1
 8002220:	4618      	mov	r0, r3
 8002222:	f009 fa7b 	bl	800b71c <VL53L0X_SetDeviceMode>

  		VL53L0X_PerformRefSpadManagement( Dev, &refSpadCount[i], &isApertureSpads[i]);
 8002226:	4b82      	ldr	r3, [pc, #520]	; (8002430 <InitializaionCalibrationCommand+0x2e8>)
 8002228:	6818      	ldr	r0, [r3, #0]
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	009b      	lsls	r3, r3, #2
 800222e:	4a82      	ldr	r2, [pc, #520]	; (8002438 <InitializaionCalibrationCommand+0x2f0>)
 8002230:	1899      	adds	r1, r3, r2
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	4a81      	ldr	r2, [pc, #516]	; (800243c <InitializaionCalibrationCommand+0x2f4>)
 8002236:	4413      	add	r3, r2
 8002238:	461a      	mov	r2, r3
 800223a:	f00a fbae 	bl	800c99a <VL53L0X_PerformRefSpadManagement>
  		VL53L0X_PerformRefCalibration( Dev, &VhvSettings[i], &PhaseCal[i]);
 800223e:	4b7c      	ldr	r3, [pc, #496]	; (8002430 <InitializaionCalibrationCommand+0x2e8>)
 8002240:	6818      	ldr	r0, [r3, #0]
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	4a7e      	ldr	r2, [pc, #504]	; (8002440 <InitializaionCalibrationCommand+0x2f8>)
 8002246:	1899      	adds	r1, r3, r2
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	4a7e      	ldr	r2, [pc, #504]	; (8002444 <InitializaionCalibrationCommand+0x2fc>)
 800224c:	4413      	add	r3, r2
 800224e:	461a      	mov	r2, r3
 8002250:	f009 fefe 	bl	800c050 <VL53L0X_PerformRefCalibration>

  		refSpadCountHost[i] = refSpadCount[i];
 8002254:	4a78      	ldr	r2, [pc, #480]	; (8002438 <InitializaionCalibrationCommand+0x2f0>)
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800225c:	497a      	ldr	r1, [pc, #488]	; (8002448 <InitializaionCalibrationCommand+0x300>)
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  		isApertureSpadsHost[i] = isApertureSpads[i];
 8002264:	4a75      	ldr	r2, [pc, #468]	; (800243c <InitializaionCalibrationCommand+0x2f4>)
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	4413      	add	r3, r2
 800226a:	7819      	ldrb	r1, [r3, #0]
 800226c:	4a77      	ldr	r2, [pc, #476]	; (800244c <InitializaionCalibrationCommand+0x304>)
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	4413      	add	r3, r2
 8002272:	460a      	mov	r2, r1
 8002274:	701a      	strb	r2, [r3, #0]
  		VhvSettingsHost[i] = VhvSettings[i];
 8002276:	4a72      	ldr	r2, [pc, #456]	; (8002440 <InitializaionCalibrationCommand+0x2f8>)
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	4413      	add	r3, r2
 800227c:	7819      	ldrb	r1, [r3, #0]
 800227e:	4a74      	ldr	r2, [pc, #464]	; (8002450 <InitializaionCalibrationCommand+0x308>)
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	4413      	add	r3, r2
 8002284:	460a      	mov	r2, r1
 8002286:	701a      	strb	r2, [r3, #0]
  		PhaseCalHost[i] = PhaseCal[i];
 8002288:	4a6e      	ldr	r2, [pc, #440]	; (8002444 <InitializaionCalibrationCommand+0x2fc>)
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	4413      	add	r3, r2
 800228e:	7819      	ldrb	r1, [r3, #0]
 8002290:	4a70      	ldr	r2, [pc, #448]	; (8002454 <InitializaionCalibrationCommand+0x30c>)
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	4413      	add	r3, r2
 8002296:	460a      	mov	r2, r1
 8002298:	701a      	strb	r2, [r3, #0]

  		VL53L0X_SetLimitCheckEnable( Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, 1);
 800229a:	4b65      	ldr	r3, [pc, #404]	; (8002430 <InitializaionCalibrationCommand+0x2e8>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	2201      	movs	r2, #1
 80022a0:	2100      	movs	r1, #0
 80022a2:	4618      	mov	r0, r3
 80022a4:	f009 fcce 	bl	800bc44 <VL53L0X_SetLimitCheckEnable>
  		VL53L0X_SetLimitCheckEnable( Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, 1);
 80022a8:	4b61      	ldr	r3, [pc, #388]	; (8002430 <InitializaionCalibrationCommand+0x2e8>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	2201      	movs	r2, #1
 80022ae:	2101      	movs	r1, #1
 80022b0:	4618      	mov	r0, r3
 80022b2:	f009 fcc7 	bl	800bc44 <VL53L0X_SetLimitCheckEnable>
  		VL53L0X_SetLimitCheckValue( Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, (FixPoint1616_t)(0.1*65536));
 80022b6:	4b5e      	ldr	r3, [pc, #376]	; (8002430 <InitializaionCalibrationCommand+0x2e8>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f641 1299 	movw	r2, #6553	; 0x1999
 80022be:	2101      	movs	r1, #1
 80022c0:	4618      	mov	r0, r3
 80022c2:	f009 fd6f 	bl	800bda4 <VL53L0X_SetLimitCheckValue>
  		VL53L0X_SetLimitCheckValue( Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, (FixPoint1616_t)(60*65536));
 80022c6:	4b5a      	ldr	r3, [pc, #360]	; (8002430 <InitializaionCalibrationCommand+0x2e8>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80022ce:	2100      	movs	r1, #0
 80022d0:	4618      	mov	r0, r3
 80022d2:	f009 fd67 	bl	800bda4 <VL53L0X_SetLimitCheckValue>
  		VL53L0X_SetMeasurementTimingBudgetMicroSeconds( Dev, 33000);
 80022d6:	4b56      	ldr	r3, [pc, #344]	; (8002430 <InitializaionCalibrationCommand+0x2e8>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f248 01e8 	movw	r1, #33000	; 0x80e8
 80022de:	4618      	mov	r0, r3
 80022e0:	f009 fa7a 	bl	800b7d8 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
  		VL53L0X_SetVcselPulsePeriod( Dev, VL53L0X_VCSEL_PERIOD_PRE_RANGE, 18);
 80022e4:	4b52      	ldr	r3, [pc, #328]	; (8002430 <InitializaionCalibrationCommand+0x2e8>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	2212      	movs	r2, #18
 80022ea:	2100      	movs	r1, #0
 80022ec:	4618      	mov	r0, r3
 80022ee:	f009 fa99 	bl	800b824 <VL53L0X_SetVcselPulsePeriod>
  		VL53L0X_SetVcselPulsePeriod( Dev, VL53L0X_VCSEL_PERIOD_FINAL_RANGE, 14);
 80022f2:	4b4f      	ldr	r3, [pc, #316]	; (8002430 <InitializaionCalibrationCommand+0x2e8>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	220e      	movs	r2, #14
 80022f8:	2101      	movs	r1, #1
 80022fa:	4618      	mov	r0, r3
 80022fc:	f009 fa92 	bl	800b824 <VL53L0X_SetVcselPulsePeriod>

		Kalman_Init(&filters[i], Q, R, P, 0);  // Q, R, P, 초기값
 8002300:	697a      	ldr	r2, [r7, #20]
 8002302:	4613      	mov	r3, r2
 8002304:	009b      	lsls	r3, r3, #2
 8002306:	4413      	add	r3, r2
 8002308:	009b      	lsls	r3, r3, #2
 800230a:	4a53      	ldr	r2, [pc, #332]	; (8002458 <InitializaionCalibrationCommand+0x310>)
 800230c:	4413      	add	r3, r2
 800230e:	4a53      	ldr	r2, [pc, #332]	; (800245c <InitializaionCalibrationCommand+0x314>)
 8002310:	edd2 7a00 	vldr	s15, [r2]
 8002314:	4a52      	ldr	r2, [pc, #328]	; (8002460 <InitializaionCalibrationCommand+0x318>)
 8002316:	ed92 7a00 	vldr	s14, [r2]
 800231a:	4a52      	ldr	r2, [pc, #328]	; (8002464 <InitializaionCalibrationCommand+0x31c>)
 800231c:	edd2 6a00 	vldr	s13, [r2]
 8002320:	eddf 1a51 	vldr	s3, [pc, #324]	; 8002468 <InitializaionCalibrationCommand+0x320>
 8002324:	eeb0 1a66 	vmov.f32	s2, s13
 8002328:	eef0 0a47 	vmov.f32	s1, s14
 800232c:	eeb0 0a67 	vmov.f32	s0, s15
 8002330:	4618      	mov	r0, r3
 8002332:	f7ff f9a5 	bl	8001680 <Kalman_Init>

 		HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%02d ",i), 100);
 8002336:	697a      	ldr	r2, [r7, #20]
 8002338:	494c      	ldr	r1, [pc, #304]	; (800246c <InitializaionCalibrationCommand+0x324>)
 800233a:	4839      	ldr	r0, [pc, #228]	; (8002420 <InitializaionCalibrationCommand+0x2d8>)
 800233c:	f00e fd98 	bl	8010e70 <siprintf>
 8002340:	4603      	mov	r3, r0
 8002342:	b29a      	uxth	r2, r3
 8002344:	2364      	movs	r3, #100	; 0x64
 8002346:	4936      	ldr	r1, [pc, #216]	; (8002420 <InitializaionCalibrationCommand+0x2d8>)
 8002348:	4836      	ldr	r0, [pc, #216]	; (8002424 <InitializaionCalibrationCommand+0x2dc>)
 800234a:	f007 fc27 	bl	8009b9c <HAL_UART_Transmit>
 		if(i%12 ==11){HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "\n\r"), 100);}
 800234e:	6979      	ldr	r1, [r7, #20]
 8002350:	4b35      	ldr	r3, [pc, #212]	; (8002428 <InitializaionCalibrationCommand+0x2e0>)
 8002352:	fb83 2301 	smull	r2, r3, r3, r1
 8002356:	105a      	asrs	r2, r3, #1
 8002358:	17cb      	asrs	r3, r1, #31
 800235a:	1ad2      	subs	r2, r2, r3
 800235c:	4613      	mov	r3, r2
 800235e:	005b      	lsls	r3, r3, #1
 8002360:	4413      	add	r3, r2
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	1aca      	subs	r2, r1, r3
 8002366:	2a0b      	cmp	r2, #11
 8002368:	d10a      	bne.n	8002380 <InitializaionCalibrationCommand+0x238>
 800236a:	4941      	ldr	r1, [pc, #260]	; (8002470 <InitializaionCalibrationCommand+0x328>)
 800236c:	482c      	ldr	r0, [pc, #176]	; (8002420 <InitializaionCalibrationCommand+0x2d8>)
 800236e:	f00e fd7f 	bl	8010e70 <siprintf>
 8002372:	4603      	mov	r3, r0
 8002374:	b29a      	uxth	r2, r3
 8002376:	2364      	movs	r3, #100	; 0x64
 8002378:	4929      	ldr	r1, [pc, #164]	; (8002420 <InitializaionCalibrationCommand+0x2d8>)
 800237a:	482a      	ldr	r0, [pc, #168]	; (8002424 <InitializaionCalibrationCommand+0x2dc>)
 800237c:	f007 fc0e 	bl	8009b9c <HAL_UART_Transmit>
  	for (int i = 0; i < NUM_SENSOR; i++) {
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	3301      	adds	r3, #1
 8002384:	617b      	str	r3, [r7, #20]
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	2b17      	cmp	r3, #23
 800238a:	f77f aef0 	ble.w	800216e <InitializaionCalibrationCommand+0x26>
  	}


	HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "uint32_t refSpadCountHost[NUM_SENSOR]={"), 100);
 800238e:	4939      	ldr	r1, [pc, #228]	; (8002474 <InitializaionCalibrationCommand+0x32c>)
 8002390:	4823      	ldr	r0, [pc, #140]	; (8002420 <InitializaionCalibrationCommand+0x2d8>)
 8002392:	f00e fd6d 	bl	8010e70 <siprintf>
 8002396:	4603      	mov	r3, r0
 8002398:	b29a      	uxth	r2, r3
 800239a:	2364      	movs	r3, #100	; 0x64
 800239c:	4920      	ldr	r1, [pc, #128]	; (8002420 <InitializaionCalibrationCommand+0x2d8>)
 800239e:	4821      	ldr	r0, [pc, #132]	; (8002424 <InitializaionCalibrationCommand+0x2dc>)
 80023a0:	f007 fbfc 	bl	8009b9c <HAL_UART_Transmit>
	for (int i = 0; i < NUM_SENSOR; i++){
 80023a4:	2300      	movs	r3, #0
 80023a6:	613b      	str	r3, [r7, #16]
 80023a8:	e026      	b.n	80023f8 <InitializaionCalibrationCommand+0x2b0>
		if(i < NUM_SENSOR - 1){
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	2b16      	cmp	r3, #22
 80023ae:	dc10      	bgt.n	80023d2 <InitializaionCalibrationCommand+0x28a>
			HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%lu,",refSpadCount[i]), 100);
 80023b0:	4a21      	ldr	r2, [pc, #132]	; (8002438 <InitializaionCalibrationCommand+0x2f0>)
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023b8:	461a      	mov	r2, r3
 80023ba:	492f      	ldr	r1, [pc, #188]	; (8002478 <InitializaionCalibrationCommand+0x330>)
 80023bc:	4818      	ldr	r0, [pc, #96]	; (8002420 <InitializaionCalibrationCommand+0x2d8>)
 80023be:	f00e fd57 	bl	8010e70 <siprintf>
 80023c2:	4603      	mov	r3, r0
 80023c4:	b29a      	uxth	r2, r3
 80023c6:	2364      	movs	r3, #100	; 0x64
 80023c8:	4915      	ldr	r1, [pc, #84]	; (8002420 <InitializaionCalibrationCommand+0x2d8>)
 80023ca:	4816      	ldr	r0, [pc, #88]	; (8002424 <InitializaionCalibrationCommand+0x2dc>)
 80023cc:	f007 fbe6 	bl	8009b9c <HAL_UART_Transmit>
 80023d0:	e00f      	b.n	80023f2 <InitializaionCalibrationCommand+0x2aa>
		} else {
			HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%lu};\n",refSpadCount[i]), 100);
 80023d2:	4a19      	ldr	r2, [pc, #100]	; (8002438 <InitializaionCalibrationCommand+0x2f0>)
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023da:	461a      	mov	r2, r3
 80023dc:	4927      	ldr	r1, [pc, #156]	; (800247c <InitializaionCalibrationCommand+0x334>)
 80023de:	4810      	ldr	r0, [pc, #64]	; (8002420 <InitializaionCalibrationCommand+0x2d8>)
 80023e0:	f00e fd46 	bl	8010e70 <siprintf>
 80023e4:	4603      	mov	r3, r0
 80023e6:	b29a      	uxth	r2, r3
 80023e8:	2364      	movs	r3, #100	; 0x64
 80023ea:	490d      	ldr	r1, [pc, #52]	; (8002420 <InitializaionCalibrationCommand+0x2d8>)
 80023ec:	480d      	ldr	r0, [pc, #52]	; (8002424 <InitializaionCalibrationCommand+0x2dc>)
 80023ee:	f007 fbd5 	bl	8009b9c <HAL_UART_Transmit>
	for (int i = 0; i < NUM_SENSOR; i++){
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	3301      	adds	r3, #1
 80023f6:	613b      	str	r3, [r7, #16]
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	2b17      	cmp	r3, #23
 80023fc:	ddd5      	ble.n	80023aa <InitializaionCalibrationCommand+0x262>
		}
	}

	HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "uint8_t isApertureSpadsHost[NUM_SENSOR]={"), 100);
 80023fe:	4920      	ldr	r1, [pc, #128]	; (8002480 <InitializaionCalibrationCommand+0x338>)
 8002400:	4807      	ldr	r0, [pc, #28]	; (8002420 <InitializaionCalibrationCommand+0x2d8>)
 8002402:	f00e fd35 	bl	8010e70 <siprintf>
 8002406:	4603      	mov	r3, r0
 8002408:	b29a      	uxth	r2, r3
 800240a:	2364      	movs	r3, #100	; 0x64
 800240c:	4904      	ldr	r1, [pc, #16]	; (8002420 <InitializaionCalibrationCommand+0x2d8>)
 800240e:	4805      	ldr	r0, [pc, #20]	; (8002424 <InitializaionCalibrationCommand+0x2dc>)
 8002410:	f007 fbc4 	bl	8009b9c <HAL_UART_Transmit>
	for (int i = 0; i < NUM_SENSOR; i++){
 8002414:	2300      	movs	r3, #0
 8002416:	60fb      	str	r3, [r7, #12]
 8002418:	e05b      	b.n	80024d2 <InitializaionCalibrationCommand+0x38a>
 800241a:	bf00      	nop
 800241c:	080163dc 	.word	0x080163dc
 8002420:	200079f0 	.word	0x200079f0
 8002424:	20007a74 	.word	0x20007a74
 8002428:	2aaaaaab 	.word	0x2aaaaaab
 800242c:	20007bc0 	.word	0x20007bc0
 8002430:	2000a140 	.word	0x2000a140
 8002434:	20007720 	.word	0x20007720
 8002438:	20007afc 	.word	0x20007afc
 800243c:	20007b5c 	.word	0x20007b5c
 8002440:	20007b74 	.word	0x20007b74
 8002444:	20007b8c 	.word	0x20007b8c
 8002448:	20000010 	.word	0x20000010
 800244c:	20000070 	.word	0x20000070
 8002450:	20000088 	.word	0x20000088
 8002454:	200000a0 	.word	0x200000a0
 8002458:	20007774 	.word	0x20007774
 800245c:	20000000 	.word	0x20000000
 8002460:	20000004 	.word	0x20000004
 8002464:	20000008 	.word	0x20000008
 8002468:	00000000 	.word	0x00000000
 800246c:	080163f4 	.word	0x080163f4
 8002470:	080163fc 	.word	0x080163fc
 8002474:	08016400 	.word	0x08016400
 8002478:	08016428 	.word	0x08016428
 800247c:	08016430 	.word	0x08016430
 8002480:	08016438 	.word	0x08016438
		if(i < NUM_SENSOR - 1){
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	2b16      	cmp	r3, #22
 8002488:	dc10      	bgt.n	80024ac <InitializaionCalibrationCommand+0x364>
			HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%d,",isApertureSpads[i]), 100);
 800248a:	4a4e      	ldr	r2, [pc, #312]	; (80025c4 <InitializaionCalibrationCommand+0x47c>)
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	4413      	add	r3, r2
 8002490:	781b      	ldrb	r3, [r3, #0]
 8002492:	461a      	mov	r2, r3
 8002494:	494c      	ldr	r1, [pc, #304]	; (80025c8 <InitializaionCalibrationCommand+0x480>)
 8002496:	484d      	ldr	r0, [pc, #308]	; (80025cc <InitializaionCalibrationCommand+0x484>)
 8002498:	f00e fcea 	bl	8010e70 <siprintf>
 800249c:	4603      	mov	r3, r0
 800249e:	b29a      	uxth	r2, r3
 80024a0:	2364      	movs	r3, #100	; 0x64
 80024a2:	494a      	ldr	r1, [pc, #296]	; (80025cc <InitializaionCalibrationCommand+0x484>)
 80024a4:	484a      	ldr	r0, [pc, #296]	; (80025d0 <InitializaionCalibrationCommand+0x488>)
 80024a6:	f007 fb79 	bl	8009b9c <HAL_UART_Transmit>
 80024aa:	e00f      	b.n	80024cc <InitializaionCalibrationCommand+0x384>
		} else {
			HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%d};\n",isApertureSpads[i]), 100);
 80024ac:	4a45      	ldr	r2, [pc, #276]	; (80025c4 <InitializaionCalibrationCommand+0x47c>)
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	4413      	add	r3, r2
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	461a      	mov	r2, r3
 80024b6:	4947      	ldr	r1, [pc, #284]	; (80025d4 <InitializaionCalibrationCommand+0x48c>)
 80024b8:	4844      	ldr	r0, [pc, #272]	; (80025cc <InitializaionCalibrationCommand+0x484>)
 80024ba:	f00e fcd9 	bl	8010e70 <siprintf>
 80024be:	4603      	mov	r3, r0
 80024c0:	b29a      	uxth	r2, r3
 80024c2:	2364      	movs	r3, #100	; 0x64
 80024c4:	4941      	ldr	r1, [pc, #260]	; (80025cc <InitializaionCalibrationCommand+0x484>)
 80024c6:	4842      	ldr	r0, [pc, #264]	; (80025d0 <InitializaionCalibrationCommand+0x488>)
 80024c8:	f007 fb68 	bl	8009b9c <HAL_UART_Transmit>
	for (int i = 0; i < NUM_SENSOR; i++){
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	3301      	adds	r3, #1
 80024d0:	60fb      	str	r3, [r7, #12]
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	2b17      	cmp	r3, #23
 80024d6:	ddd5      	ble.n	8002484 <InitializaionCalibrationCommand+0x33c>
		}
	}

	HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "uint8_t VhvSettingsHost[NUM_SENSOR]={"), 100);
 80024d8:	493f      	ldr	r1, [pc, #252]	; (80025d8 <InitializaionCalibrationCommand+0x490>)
 80024da:	483c      	ldr	r0, [pc, #240]	; (80025cc <InitializaionCalibrationCommand+0x484>)
 80024dc:	f00e fcc8 	bl	8010e70 <siprintf>
 80024e0:	4603      	mov	r3, r0
 80024e2:	b29a      	uxth	r2, r3
 80024e4:	2364      	movs	r3, #100	; 0x64
 80024e6:	4939      	ldr	r1, [pc, #228]	; (80025cc <InitializaionCalibrationCommand+0x484>)
 80024e8:	4839      	ldr	r0, [pc, #228]	; (80025d0 <InitializaionCalibrationCommand+0x488>)
 80024ea:	f007 fb57 	bl	8009b9c <HAL_UART_Transmit>
	for (int i = 0; i < NUM_SENSOR; i++){
 80024ee:	2300      	movs	r3, #0
 80024f0:	60bb      	str	r3, [r7, #8]
 80024f2:	e026      	b.n	8002542 <InitializaionCalibrationCommand+0x3fa>
		if(i < NUM_SENSOR - 1){
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	2b16      	cmp	r3, #22
 80024f8:	dc10      	bgt.n	800251c <InitializaionCalibrationCommand+0x3d4>
			HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%d,",VhvSettings[i]), 100);
 80024fa:	4a38      	ldr	r2, [pc, #224]	; (80025dc <InitializaionCalibrationCommand+0x494>)
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	4413      	add	r3, r2
 8002500:	781b      	ldrb	r3, [r3, #0]
 8002502:	461a      	mov	r2, r3
 8002504:	4930      	ldr	r1, [pc, #192]	; (80025c8 <InitializaionCalibrationCommand+0x480>)
 8002506:	4831      	ldr	r0, [pc, #196]	; (80025cc <InitializaionCalibrationCommand+0x484>)
 8002508:	f00e fcb2 	bl	8010e70 <siprintf>
 800250c:	4603      	mov	r3, r0
 800250e:	b29a      	uxth	r2, r3
 8002510:	2364      	movs	r3, #100	; 0x64
 8002512:	492e      	ldr	r1, [pc, #184]	; (80025cc <InitializaionCalibrationCommand+0x484>)
 8002514:	482e      	ldr	r0, [pc, #184]	; (80025d0 <InitializaionCalibrationCommand+0x488>)
 8002516:	f007 fb41 	bl	8009b9c <HAL_UART_Transmit>
 800251a:	e00f      	b.n	800253c <InitializaionCalibrationCommand+0x3f4>
		} else {
			HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%d};\n",VhvSettings[i]), 100);
 800251c:	4a2f      	ldr	r2, [pc, #188]	; (80025dc <InitializaionCalibrationCommand+0x494>)
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	4413      	add	r3, r2
 8002522:	781b      	ldrb	r3, [r3, #0]
 8002524:	461a      	mov	r2, r3
 8002526:	492b      	ldr	r1, [pc, #172]	; (80025d4 <InitializaionCalibrationCommand+0x48c>)
 8002528:	4828      	ldr	r0, [pc, #160]	; (80025cc <InitializaionCalibrationCommand+0x484>)
 800252a:	f00e fca1 	bl	8010e70 <siprintf>
 800252e:	4603      	mov	r3, r0
 8002530:	b29a      	uxth	r2, r3
 8002532:	2364      	movs	r3, #100	; 0x64
 8002534:	4925      	ldr	r1, [pc, #148]	; (80025cc <InitializaionCalibrationCommand+0x484>)
 8002536:	4826      	ldr	r0, [pc, #152]	; (80025d0 <InitializaionCalibrationCommand+0x488>)
 8002538:	f007 fb30 	bl	8009b9c <HAL_UART_Transmit>
	for (int i = 0; i < NUM_SENSOR; i++){
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	3301      	adds	r3, #1
 8002540:	60bb      	str	r3, [r7, #8]
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	2b17      	cmp	r3, #23
 8002546:	ddd5      	ble.n	80024f4 <InitializaionCalibrationCommand+0x3ac>
		}
	}

	HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "uint8_t PhaseCalHost[NUM_SENSOR]={"), 100);
 8002548:	4925      	ldr	r1, [pc, #148]	; (80025e0 <InitializaionCalibrationCommand+0x498>)
 800254a:	4820      	ldr	r0, [pc, #128]	; (80025cc <InitializaionCalibrationCommand+0x484>)
 800254c:	f00e fc90 	bl	8010e70 <siprintf>
 8002550:	4603      	mov	r3, r0
 8002552:	b29a      	uxth	r2, r3
 8002554:	2364      	movs	r3, #100	; 0x64
 8002556:	491d      	ldr	r1, [pc, #116]	; (80025cc <InitializaionCalibrationCommand+0x484>)
 8002558:	481d      	ldr	r0, [pc, #116]	; (80025d0 <InitializaionCalibrationCommand+0x488>)
 800255a:	f007 fb1f 	bl	8009b9c <HAL_UART_Transmit>
	for (int i = 0; i < NUM_SENSOR; i++){
 800255e:	2300      	movs	r3, #0
 8002560:	607b      	str	r3, [r7, #4]
 8002562:	e026      	b.n	80025b2 <InitializaionCalibrationCommand+0x46a>
		if(i < NUM_SENSOR - 1){
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2b16      	cmp	r3, #22
 8002568:	dc10      	bgt.n	800258c <InitializaionCalibrationCommand+0x444>
			HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%d,",PhaseCal[i]), 100);
 800256a:	4a1e      	ldr	r2, [pc, #120]	; (80025e4 <InitializaionCalibrationCommand+0x49c>)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	4413      	add	r3, r2
 8002570:	781b      	ldrb	r3, [r3, #0]
 8002572:	461a      	mov	r2, r3
 8002574:	4914      	ldr	r1, [pc, #80]	; (80025c8 <InitializaionCalibrationCommand+0x480>)
 8002576:	4815      	ldr	r0, [pc, #84]	; (80025cc <InitializaionCalibrationCommand+0x484>)
 8002578:	f00e fc7a 	bl	8010e70 <siprintf>
 800257c:	4603      	mov	r3, r0
 800257e:	b29a      	uxth	r2, r3
 8002580:	2364      	movs	r3, #100	; 0x64
 8002582:	4912      	ldr	r1, [pc, #72]	; (80025cc <InitializaionCalibrationCommand+0x484>)
 8002584:	4812      	ldr	r0, [pc, #72]	; (80025d0 <InitializaionCalibrationCommand+0x488>)
 8002586:	f007 fb09 	bl	8009b9c <HAL_UART_Transmit>
 800258a:	e00f      	b.n	80025ac <InitializaionCalibrationCommand+0x464>
		} else {
			HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%d};\n",PhaseCal[i]), 100);
 800258c:	4a15      	ldr	r2, [pc, #84]	; (80025e4 <InitializaionCalibrationCommand+0x49c>)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	4413      	add	r3, r2
 8002592:	781b      	ldrb	r3, [r3, #0]
 8002594:	461a      	mov	r2, r3
 8002596:	490f      	ldr	r1, [pc, #60]	; (80025d4 <InitializaionCalibrationCommand+0x48c>)
 8002598:	480c      	ldr	r0, [pc, #48]	; (80025cc <InitializaionCalibrationCommand+0x484>)
 800259a:	f00e fc69 	bl	8010e70 <siprintf>
 800259e:	4603      	mov	r3, r0
 80025a0:	b29a      	uxth	r2, r3
 80025a2:	2364      	movs	r3, #100	; 0x64
 80025a4:	4909      	ldr	r1, [pc, #36]	; (80025cc <InitializaionCalibrationCommand+0x484>)
 80025a6:	480a      	ldr	r0, [pc, #40]	; (80025d0 <InitializaionCalibrationCommand+0x488>)
 80025a8:	f007 faf8 	bl	8009b9c <HAL_UART_Transmit>
	for (int i = 0; i < NUM_SENSOR; i++){
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	3301      	adds	r3, #1
 80025b0:	607b      	str	r3, [r7, #4]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2b17      	cmp	r3, #23
 80025b6:	ddd5      	ble.n	8002564 <InitializaionCalibrationCommand+0x41c>
		}
	}


}
 80025b8:	bf00      	nop
 80025ba:	bf00      	nop
 80025bc:	3718      	adds	r7, #24
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	20007b5c 	.word	0x20007b5c
 80025c8:	08016464 	.word	0x08016464
 80025cc:	200079f0 	.word	0x200079f0
 80025d0:	20007a74 	.word	0x20007a74
 80025d4:	08016468 	.word	0x08016468
 80025d8:	08016470 	.word	0x08016470
 80025dc:	20007b74 	.word	0x20007b74
 80025e0:	08016498 	.word	0x08016498
 80025e4:	20007b8c 	.word	0x20007b8c

080025e8 <CalibrationCommand>:

void CalibrationCommand() {
 80025e8:	b480      	push	{r7}
 80025ea:	af00      	add	r7, sp, #0
}
 80025ec:	bf00      	nop
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr
	...

080025f8 <SetSensorCommand>:
void AvgStdCommand() {
}
void SetSensorCommand(){
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b082      	sub	sp, #8
 80025fc:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "SetCommand\n\r"), 100);
 80025fe:	49a2      	ldr	r1, [pc, #648]	; (8002888 <SetSensorCommand+0x290>)
 8002600:	48a2      	ldr	r0, [pc, #648]	; (800288c <SetSensorCommand+0x294>)
 8002602:	f00e fc35 	bl	8010e70 <siprintf>
 8002606:	4603      	mov	r3, r0
 8002608:	b29a      	uxth	r2, r3
 800260a:	2364      	movs	r3, #100	; 0x64
 800260c:	499f      	ldr	r1, [pc, #636]	; (800288c <SetSensorCommand+0x294>)
 800260e:	48a0      	ldr	r0, [pc, #640]	; (8002890 <SetSensorCommand+0x298>)
 8002610:	f007 fac4 	bl	8009b9c <HAL_UART_Transmit>

	ResetAllDevices();
 8002614:	f000 ff86 	bl	8003524 <ResetAllDevices>
  	for (int i = 0; i < NUM_SENSOR; i++) {
 8002618:	2300      	movs	r3, #0
 800261a:	607b      	str	r3, [r7, #4]
 800261c:	e12b      	b.n	8002876 <SetSensorCommand+0x27e>
  	    uint8_t q = i / 12;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	4a9c      	ldr	r2, [pc, #624]	; (8002894 <SetSensorCommand+0x29c>)
 8002622:	fb82 1203 	smull	r1, r2, r2, r3
 8002626:	1052      	asrs	r2, r2, #1
 8002628:	17db      	asrs	r3, r3, #31
 800262a:	1ad3      	subs	r3, r2, r3
 800262c:	70fb      	strb	r3, [r7, #3]
  	    uint8_t r = i % 12;
 800262e:	687a      	ldr	r2, [r7, #4]
 8002630:	4b98      	ldr	r3, [pc, #608]	; (8002894 <SetSensorCommand+0x29c>)
 8002632:	fb83 1302 	smull	r1, r3, r3, r2
 8002636:	1059      	asrs	r1, r3, #1
 8002638:	17d3      	asrs	r3, r2, #31
 800263a:	1ac9      	subs	r1, r1, r3
 800263c:	460b      	mov	r3, r1
 800263e:	005b      	lsls	r3, r3, #1
 8002640:	440b      	add	r3, r1
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	1ad1      	subs	r1, r2, r3
 8002646:	460b      	mov	r3, r1
 8002648:	70bb      	strb	r3, [r7, #2]
  	    uint8_t active_device = q * 2 + (r >= 8 ? 1 : 0);
 800264a:	78fb      	ldrb	r3, [r7, #3]
 800264c:	005b      	lsls	r3, r3, #1
 800264e:	b2db      	uxtb	r3, r3
 8002650:	78ba      	ldrb	r2, [r7, #2]
 8002652:	2a07      	cmp	r2, #7
 8002654:	bf8c      	ite	hi
 8002656:	2201      	movhi	r2, #1
 8002658:	2200      	movls	r2, #0
 800265a:	b2d2      	uxtb	r2, r2
 800265c:	4413      	add	r3, r2
 800265e:	707b      	strb	r3, [r7, #1]
  	    uint8_t channel = (r >= 8) ? r - 8 : r;
 8002660:	78bb      	ldrb	r3, [r7, #2]
 8002662:	2b07      	cmp	r3, #7
 8002664:	d903      	bls.n	800266e <SetSensorCommand+0x76>
 8002666:	78bb      	ldrb	r3, [r7, #2]
 8002668:	3b08      	subs	r3, #8
 800266a:	b2db      	uxtb	r3, r3
 800266c:	e000      	b.n	8002670 <SetSensorCommand+0x78>
 800266e:	78bb      	ldrb	r3, [r7, #2]
 8002670:	703b      	strb	r3, [r7, #0]

        ResetDevicesExcept(active_device);
 8002672:	787b      	ldrb	r3, [r7, #1]
 8002674:	4618      	mov	r0, r3
 8002676:	f000 ff81 	bl	800357c <ResetDevicesExcept>
        setActiveTcaChannel(active_device,channel);
 800267a:	783a      	ldrb	r2, [r7, #0]
 800267c:	787b      	ldrb	r3, [r7, #1]
 800267e:	4611      	mov	r1, r2
 8002680:	4618      	mov	r0, r3
 8002682:	f000 ffad 	bl	80035e0 <setActiveTcaChannel>

  		Dev = &vl53l0x_s[i];
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800268c:	fb02 f303 	mul.w	r3, r2, r3
 8002690:	4a81      	ldr	r2, [pc, #516]	; (8002898 <SetSensorCommand+0x2a0>)
 8002692:	4413      	add	r3, r2
 8002694:	4a81      	ldr	r2, [pc, #516]	; (800289c <SetSensorCommand+0x2a4>)
 8002696:	6013      	str	r3, [r2, #0]
  		Dev->I2cHandle = &hi2c1;
 8002698:	4b80      	ldr	r3, [pc, #512]	; (800289c <SetSensorCommand+0x2a4>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a80      	ldr	r2, [pc, #512]	; (80028a0 <SetSensorCommand+0x2a8>)
 800269e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  		Dev->I2cDevAddr = VL53L0X_ADDR;
 80026a2:	4b7e      	ldr	r3, [pc, #504]	; (800289c <SetSensorCommand+0x2a4>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	2252      	movs	r2, #82	; 0x52
 80026a8:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160

  		VL53L0X_WaitDeviceBooted( Dev );
 80026ac:	4b7b      	ldr	r3, [pc, #492]	; (800289c <SetSensorCommand+0x2a4>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4618      	mov	r0, r3
 80026b2:	f008 ff95 	bl	800b5e0 <VL53L0X_WaitDeviceBooted>
  		VL53L0X_DataInit( Dev );
 80026b6:	4b79      	ldr	r3, [pc, #484]	; (800289c <SetSensorCommand+0x2a4>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4618      	mov	r0, r3
 80026bc:	f008 fcaa 	bl	800b014 <VL53L0X_DataInit>
  		VL53L0X_StaticInit( Dev );
 80026c0:	4b76      	ldr	r3, [pc, #472]	; (800289c <SetSensorCommand+0x2a4>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4618      	mov	r0, r3
 80026c6:	f008 fe09 	bl	800b2dc <VL53L0X_StaticInit>
  		VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_CONTINUOUS_RANGING);
 80026ca:	4b74      	ldr	r3, [pc, #464]	; (800289c <SetSensorCommand+0x2a4>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	2101      	movs	r1, #1
 80026d0:	4618      	mov	r0, r3
 80026d2:	f009 f823 	bl	800b71c <VL53L0X_SetDeviceMode>

		VL53L0X_SetReferenceSpads(Dev, refSpadCountHost[i], isApertureSpadsHost[i]);
 80026d6:	4b71      	ldr	r3, [pc, #452]	; (800289c <SetSensorCommand+0x2a4>)
 80026d8:	6818      	ldr	r0, [r3, #0]
 80026da:	4a72      	ldr	r2, [pc, #456]	; (80028a4 <SetSensorCommand+0x2ac>)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80026e2:	4a71      	ldr	r2, [pc, #452]	; (80028a8 <SetSensorCommand+0x2b0>)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	4413      	add	r3, r2
 80026e8:	781b      	ldrb	r3, [r3, #0]
 80026ea:	461a      	mov	r2, r3
 80026ec:	f00a f93e 	bl	800c96c <VL53L0X_SetReferenceSpads>
  		VL53L0X_SetRefCalibration(Dev, VhvSettingsHost[i], PhaseCalHost[i]);
 80026f0:	4b6a      	ldr	r3, [pc, #424]	; (800289c <SetSensorCommand+0x2a4>)
 80026f2:	6818      	ldr	r0, [r3, #0]
 80026f4:	4a6d      	ldr	r2, [pc, #436]	; (80028ac <SetSensorCommand+0x2b4>)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	4413      	add	r3, r2
 80026fa:	7819      	ldrb	r1, [r3, #0]
 80026fc:	4a6c      	ldr	r2, [pc, #432]	; (80028b0 <SetSensorCommand+0x2b8>)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	4413      	add	r3, r2
 8002702:	781b      	ldrb	r3, [r3, #0]
 8002704:	461a      	mov	r2, r3
 8002706:	f009 fa85 	bl	800bc14 <VL53L0X_SetRefCalibration>


  		VL53L0X_SetLimitCheckEnable(Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, 1);
 800270a:	4b64      	ldr	r3, [pc, #400]	; (800289c <SetSensorCommand+0x2a4>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	2201      	movs	r2, #1
 8002710:	2100      	movs	r1, #0
 8002712:	4618      	mov	r0, r3
 8002714:	f009 fa96 	bl	800bc44 <VL53L0X_SetLimitCheckEnable>
  		VL53L0X_SetLimitCheckEnable(Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, 1);
 8002718:	4b60      	ldr	r3, [pc, #384]	; (800289c <SetSensorCommand+0x2a4>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	2201      	movs	r2, #1
 800271e:	2101      	movs	r1, #1
 8002720:	4618      	mov	r0, r3
 8002722:	f009 fa8f 	bl	800bc44 <VL53L0X_SetLimitCheckEnable>
  		VL53L0X_SetLimitCheckValue(Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, (FixPoint1616_t)(0.1*65536));
 8002726:	4b5d      	ldr	r3, [pc, #372]	; (800289c <SetSensorCommand+0x2a4>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f641 1299 	movw	r2, #6553	; 0x1999
 800272e:	2101      	movs	r1, #1
 8002730:	4618      	mov	r0, r3
 8002732:	f009 fb37 	bl	800bda4 <VL53L0X_SetLimitCheckValue>
  		VL53L0X_SetLimitCheckValue(Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, (FixPoint1616_t)(60*65536));
 8002736:	4b59      	ldr	r3, [pc, #356]	; (800289c <SetSensorCommand+0x2a4>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800273e:	2100      	movs	r1, #0
 8002740:	4618      	mov	r0, r3
 8002742:	f009 fb2f 	bl	800bda4 <VL53L0X_SetLimitCheckValue>
  		VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev, 33000);
 8002746:	4b55      	ldr	r3, [pc, #340]	; (800289c <SetSensorCommand+0x2a4>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f248 01e8 	movw	r1, #33000	; 0x80e8
 800274e:	4618      	mov	r0, r3
 8002750:	f009 f842 	bl	800b7d8 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
  		VL53L0X_SetVcselPulsePeriod(Dev, VL53L0X_VCSEL_PERIOD_PRE_RANGE, 18);
 8002754:	4b51      	ldr	r3, [pc, #324]	; (800289c <SetSensorCommand+0x2a4>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	2212      	movs	r2, #18
 800275a:	2100      	movs	r1, #0
 800275c:	4618      	mov	r0, r3
 800275e:	f009 f861 	bl	800b824 <VL53L0X_SetVcselPulsePeriod>
  		VL53L0X_SetVcselPulsePeriod(Dev, VL53L0X_VCSEL_PERIOD_FINAL_RANGE, 14);
 8002762:	4b4e      	ldr	r3, [pc, #312]	; (800289c <SetSensorCommand+0x2a4>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	220e      	movs	r2, #14
 8002768:	2101      	movs	r1, #1
 800276a:	4618      	mov	r0, r3
 800276c:	f009 f85a 	bl	800b824 <VL53L0X_SetVcselPulsePeriod>

		Kalman_Init(&filters[i], Q, R, P, 0);  // Q, R, P, 초기값
 8002770:	687a      	ldr	r2, [r7, #4]
 8002772:	4613      	mov	r3, r2
 8002774:	009b      	lsls	r3, r3, #2
 8002776:	4413      	add	r3, r2
 8002778:	009b      	lsls	r3, r3, #2
 800277a:	4a4e      	ldr	r2, [pc, #312]	; (80028b4 <SetSensorCommand+0x2bc>)
 800277c:	4413      	add	r3, r2
 800277e:	4a4e      	ldr	r2, [pc, #312]	; (80028b8 <SetSensorCommand+0x2c0>)
 8002780:	edd2 7a00 	vldr	s15, [r2]
 8002784:	4a4d      	ldr	r2, [pc, #308]	; (80028bc <SetSensorCommand+0x2c4>)
 8002786:	ed92 7a00 	vldr	s14, [r2]
 800278a:	4a4d      	ldr	r2, [pc, #308]	; (80028c0 <SetSensorCommand+0x2c8>)
 800278c:	edd2 6a00 	vldr	s13, [r2]
 8002790:	eddf 1a4c 	vldr	s3, [pc, #304]	; 80028c4 <SetSensorCommand+0x2cc>
 8002794:	eeb0 1a66 	vmov.f32	s2, s13
 8002798:	eef0 0a47 	vmov.f32	s1, s14
 800279c:	eeb0 0a67 	vmov.f32	s0, s15
 80027a0:	4618      	mov	r0, r3
 80027a2:	f7fe ff6d 	bl	8001680 <Kalman_Init>

 		HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%02d:(",i), 100);
 80027a6:	687a      	ldr	r2, [r7, #4]
 80027a8:	4947      	ldr	r1, [pc, #284]	; (80028c8 <SetSensorCommand+0x2d0>)
 80027aa:	4838      	ldr	r0, [pc, #224]	; (800288c <SetSensorCommand+0x294>)
 80027ac:	f00e fb60 	bl	8010e70 <siprintf>
 80027b0:	4603      	mov	r3, r0
 80027b2:	b29a      	uxth	r2, r3
 80027b4:	2364      	movs	r3, #100	; 0x64
 80027b6:	4935      	ldr	r1, [pc, #212]	; (800288c <SetSensorCommand+0x294>)
 80027b8:	4835      	ldr	r0, [pc, #212]	; (8002890 <SetSensorCommand+0x298>)
 80027ba:	f007 f9ef 	bl	8009b9c <HAL_UART_Transmit>
 		HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%02lu ",refSpadCountHost[i]), 100);
 80027be:	4a39      	ldr	r2, [pc, #228]	; (80028a4 <SetSensorCommand+0x2ac>)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027c6:	461a      	mov	r2, r3
 80027c8:	4940      	ldr	r1, [pc, #256]	; (80028cc <SetSensorCommand+0x2d4>)
 80027ca:	4830      	ldr	r0, [pc, #192]	; (800288c <SetSensorCommand+0x294>)
 80027cc:	f00e fb50 	bl	8010e70 <siprintf>
 80027d0:	4603      	mov	r3, r0
 80027d2:	b29a      	uxth	r2, r3
 80027d4:	2364      	movs	r3, #100	; 0x64
 80027d6:	492d      	ldr	r1, [pc, #180]	; (800288c <SetSensorCommand+0x294>)
 80027d8:	482d      	ldr	r0, [pc, #180]	; (8002890 <SetSensorCommand+0x298>)
 80027da:	f007 f9df 	bl	8009b9c <HAL_UART_Transmit>
 		HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%02d ",isApertureSpadsHost[i]), 100);
 80027de:	4a32      	ldr	r2, [pc, #200]	; (80028a8 <SetSensorCommand+0x2b0>)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	4413      	add	r3, r2
 80027e4:	781b      	ldrb	r3, [r3, #0]
 80027e6:	461a      	mov	r2, r3
 80027e8:	4939      	ldr	r1, [pc, #228]	; (80028d0 <SetSensorCommand+0x2d8>)
 80027ea:	4828      	ldr	r0, [pc, #160]	; (800288c <SetSensorCommand+0x294>)
 80027ec:	f00e fb40 	bl	8010e70 <siprintf>
 80027f0:	4603      	mov	r3, r0
 80027f2:	b29a      	uxth	r2, r3
 80027f4:	2364      	movs	r3, #100	; 0x64
 80027f6:	4925      	ldr	r1, [pc, #148]	; (800288c <SetSensorCommand+0x294>)
 80027f8:	4825      	ldr	r0, [pc, #148]	; (8002890 <SetSensorCommand+0x298>)
 80027fa:	f007 f9cf 	bl	8009b9c <HAL_UART_Transmit>
 		HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%02d ",VhvSettingsHost[i]), 100);
 80027fe:	4a2b      	ldr	r2, [pc, #172]	; (80028ac <SetSensorCommand+0x2b4>)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	4413      	add	r3, r2
 8002804:	781b      	ldrb	r3, [r3, #0]
 8002806:	461a      	mov	r2, r3
 8002808:	4931      	ldr	r1, [pc, #196]	; (80028d0 <SetSensorCommand+0x2d8>)
 800280a:	4820      	ldr	r0, [pc, #128]	; (800288c <SetSensorCommand+0x294>)
 800280c:	f00e fb30 	bl	8010e70 <siprintf>
 8002810:	4603      	mov	r3, r0
 8002812:	b29a      	uxth	r2, r3
 8002814:	2364      	movs	r3, #100	; 0x64
 8002816:	491d      	ldr	r1, [pc, #116]	; (800288c <SetSensorCommand+0x294>)
 8002818:	481d      	ldr	r0, [pc, #116]	; (8002890 <SetSensorCommand+0x298>)
 800281a:	f007 f9bf 	bl	8009b9c <HAL_UART_Transmit>
 		HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%02d) ",PhaseCalHost[i]), 100);
 800281e:	4a24      	ldr	r2, [pc, #144]	; (80028b0 <SetSensorCommand+0x2b8>)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	4413      	add	r3, r2
 8002824:	781b      	ldrb	r3, [r3, #0]
 8002826:	461a      	mov	r2, r3
 8002828:	492a      	ldr	r1, [pc, #168]	; (80028d4 <SetSensorCommand+0x2dc>)
 800282a:	4818      	ldr	r0, [pc, #96]	; (800288c <SetSensorCommand+0x294>)
 800282c:	f00e fb20 	bl	8010e70 <siprintf>
 8002830:	4603      	mov	r3, r0
 8002832:	b29a      	uxth	r2, r3
 8002834:	2364      	movs	r3, #100	; 0x64
 8002836:	4915      	ldr	r1, [pc, #84]	; (800288c <SetSensorCommand+0x294>)
 8002838:	4815      	ldr	r0, [pc, #84]	; (8002890 <SetSensorCommand+0x298>)
 800283a:	f007 f9af 	bl	8009b9c <HAL_UART_Transmit>
 		if(i%12 ==11){HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "\n\r"), 100);}
 800283e:	6879      	ldr	r1, [r7, #4]
 8002840:	4b14      	ldr	r3, [pc, #80]	; (8002894 <SetSensorCommand+0x29c>)
 8002842:	fb83 2301 	smull	r2, r3, r3, r1
 8002846:	105a      	asrs	r2, r3, #1
 8002848:	17cb      	asrs	r3, r1, #31
 800284a:	1ad2      	subs	r2, r2, r3
 800284c:	4613      	mov	r3, r2
 800284e:	005b      	lsls	r3, r3, #1
 8002850:	4413      	add	r3, r2
 8002852:	009b      	lsls	r3, r3, #2
 8002854:	1aca      	subs	r2, r1, r3
 8002856:	2a0b      	cmp	r2, #11
 8002858:	d10a      	bne.n	8002870 <SetSensorCommand+0x278>
 800285a:	491f      	ldr	r1, [pc, #124]	; (80028d8 <SetSensorCommand+0x2e0>)
 800285c:	480b      	ldr	r0, [pc, #44]	; (800288c <SetSensorCommand+0x294>)
 800285e:	f00e fb07 	bl	8010e70 <siprintf>
 8002862:	4603      	mov	r3, r0
 8002864:	b29a      	uxth	r2, r3
 8002866:	2364      	movs	r3, #100	; 0x64
 8002868:	4908      	ldr	r1, [pc, #32]	; (800288c <SetSensorCommand+0x294>)
 800286a:	4809      	ldr	r0, [pc, #36]	; (8002890 <SetSensorCommand+0x298>)
 800286c:	f007 f996 	bl	8009b9c <HAL_UART_Transmit>
  	for (int i = 0; i < NUM_SENSOR; i++) {
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	3301      	adds	r3, #1
 8002874:	607b      	str	r3, [r7, #4]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2b17      	cmp	r3, #23
 800287a:	f77f aed0 	ble.w	800261e <SetSensorCommand+0x26>

  	}
}
 800287e:	bf00      	nop
 8002880:	bf00      	nop
 8002882:	3708      	adds	r7, #8
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}
 8002888:	080164bc 	.word	0x080164bc
 800288c:	200079f0 	.word	0x200079f0
 8002890:	20007a74 	.word	0x20007a74
 8002894:	2aaaaaab 	.word	0x2aaaaaab
 8002898:	20007bc0 	.word	0x20007bc0
 800289c:	2000a140 	.word	0x2000a140
 80028a0:	20007720 	.word	0x20007720
 80028a4:	20000010 	.word	0x20000010
 80028a8:	20000070 	.word	0x20000070
 80028ac:	20000088 	.word	0x20000088
 80028b0:	200000a0 	.word	0x200000a0
 80028b4:	20007774 	.word	0x20007774
 80028b8:	20000000 	.word	0x20000000
 80028bc:	20000004 	.word	0x20000004
 80028c0:	20000008 	.word	0x20000008
 80028c4:	00000000 	.word	0x00000000
 80028c8:	080164cc 	.word	0x080164cc
 80028cc:	080164d4 	.word	0x080164d4
 80028d0:	080163f4 	.word	0x080163f4
 80028d4:	080164dc 	.word	0x080164dc
 80028d8:	080163fc 	.word	0x080163fc

080028dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80028e0:	f000 fec9 	bl	8003676 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80028e4:	f000 f836 	bl	8002954 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80028e8:	f7fe fcd2 	bl	8001290 <MX_GPIO_Init>
  MX_I2C1_Init();
 80028ec:	f7fe fe28 	bl	8001540 <MX_I2C1_Init>
  MX_TIM7_Init();
 80028f0:	f000 fc0e 	bl	8003110 <MX_TIM7_Init>
  MX_USART1_UART_Init();
 80028f4:	f000 fcaa 	bl	800324c <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80028f8:	f000 fb94 	bl	8003024 <MX_TIM2_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80028fc:	f000 f898 	bl	8002a30 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 8002900:	2100      	movs	r1, #0
 8002902:	480f      	ldr	r0, [pc, #60]	; (8002940 <main+0x64>)
 8002904:	f005 f992 	bl	8007c2c <HAL_TIM_PWM_Start>

  // Initialize the HX711
  HX711_Init();
 8002908:	f7fe fd7a 	bl	8001400 <HX711_Init>

  /* UART interrupt initialization */
  HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "JH TACTS test\n\r"), 100);
 800290c:	490d      	ldr	r1, [pc, #52]	; (8002944 <main+0x68>)
 800290e:	480e      	ldr	r0, [pc, #56]	; (8002948 <main+0x6c>)
 8002910:	f00e faae 	bl	8010e70 <siprintf>
 8002914:	4603      	mov	r3, r0
 8002916:	b29a      	uxth	r2, r3
 8002918:	2364      	movs	r3, #100	; 0x64
 800291a:	490b      	ldr	r1, [pc, #44]	; (8002948 <main+0x6c>)
 800291c:	480b      	ldr	r0, [pc, #44]	; (800294c <main+0x70>)
 800291e:	f007 f93d 	bl	8009b9c <HAL_UART_Transmit>
  startMsg();
 8002922:	f000 fd7b 	bl	800341c <startMsg>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  if(ReceiveUartMessage(&huart1, rxMsg, sizeof(rxMsg)) == HAL_OK)
 8002926:	2241      	movs	r2, #65	; 0x41
 8002928:	4909      	ldr	r1, [pc, #36]	; (8002950 <main+0x74>)
 800292a:	4808      	ldr	r0, [pc, #32]	; (800294c <main+0x70>)
 800292c:	f000 fd40 	bl	80033b0 <ReceiveUartMessage>
 8002930:	4603      	mov	r3, r0
 8002932:	2b00      	cmp	r3, #0
 8002934:	d1f7      	bne.n	8002926 <main+0x4a>
	  {
	      ProcessCommand(rxMsg);
 8002936:	4806      	ldr	r0, [pc, #24]	; (8002950 <main+0x74>)
 8002938:	f7fe ff10 	bl	800175c <ProcessCommand>
	  if(ReceiveUartMessage(&huart1, rxMsg, sizeof(rxMsg)) == HAL_OK)
 800293c:	e7f3      	b.n	8002926 <main+0x4a>
 800293e:	bf00      	nop
 8002940:	20007958 	.word	0x20007958
 8002944:	080164e4 	.word	0x080164e4
 8002948:	200079f0 	.word	0x200079f0
 800294c:	20007a74 	.word	0x20007a74
 8002950:	20007a30 	.word	0x20007a30

08002954 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b094      	sub	sp, #80	; 0x50
 8002958:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800295a:	f107 0320 	add.w	r3, r7, #32
 800295e:	2230      	movs	r2, #48	; 0x30
 8002960:	2100      	movs	r1, #0
 8002962:	4618      	mov	r0, r3
 8002964:	f00d fbfc 	bl	8010160 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002968:	f107 030c 	add.w	r3, r7, #12
 800296c:	2200      	movs	r2, #0
 800296e:	601a      	str	r2, [r3, #0]
 8002970:	605a      	str	r2, [r3, #4]
 8002972:	609a      	str	r2, [r3, #8]
 8002974:	60da      	str	r2, [r3, #12]
 8002976:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002978:	4b2b      	ldr	r3, [pc, #172]	; (8002a28 <SystemClock_Config+0xd4>)
 800297a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297c:	4a2a      	ldr	r2, [pc, #168]	; (8002a28 <SystemClock_Config+0xd4>)
 800297e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002982:	6413      	str	r3, [r2, #64]	; 0x40
 8002984:	4b28      	ldr	r3, [pc, #160]	; (8002a28 <SystemClock_Config+0xd4>)
 8002986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002988:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800298c:	60bb      	str	r3, [r7, #8]
 800298e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002990:	4b26      	ldr	r3, [pc, #152]	; (8002a2c <SystemClock_Config+0xd8>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a25      	ldr	r2, [pc, #148]	; (8002a2c <SystemClock_Config+0xd8>)
 8002996:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800299a:	6013      	str	r3, [r2, #0]
 800299c:	4b23      	ldr	r3, [pc, #140]	; (8002a2c <SystemClock_Config+0xd8>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80029a4:	607b      	str	r3, [r7, #4]
 80029a6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80029a8:	2301      	movs	r3, #1
 80029aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80029ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80029b0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80029b2:	2302      	movs	r3, #2
 80029b4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80029b6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80029ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80029bc:	2319      	movs	r3, #25
 80029be:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 432;
 80029c0:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 80029c4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80029c6:	2302      	movs	r3, #2
 80029c8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80029ca:	2302      	movs	r3, #2
 80029cc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80029ce:	f107 0320 	add.w	r3, r7, #32
 80029d2:	4618      	mov	r0, r3
 80029d4:	f003 f900 	bl	8005bd8 <HAL_RCC_OscConfig>
 80029d8:	4603      	mov	r3, r0
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d001      	beq.n	80029e2 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80029de:	f000 f863 	bl	8002aa8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80029e2:	f003 f8a9 	bl	8005b38 <HAL_PWREx_EnableOverDrive>
 80029e6:	4603      	mov	r3, r0
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d001      	beq.n	80029f0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80029ec:	f000 f85c 	bl	8002aa8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80029f0:	230f      	movs	r3, #15
 80029f2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80029f4:	2302      	movs	r3, #2
 80029f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80029f8:	2300      	movs	r3, #0
 80029fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80029fc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002a00:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002a02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a06:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8002a08:	f107 030c 	add.w	r3, r7, #12
 8002a0c:	2107      	movs	r1, #7
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f003 fc3c 	bl	800628c <HAL_RCC_ClockConfig>
 8002a14:	4603      	mov	r3, r0
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d001      	beq.n	8002a1e <SystemClock_Config+0xca>
  {
    Error_Handler();
 8002a1a:	f000 f845 	bl	8002aa8 <Error_Handler>
  }
}
 8002a1e:	bf00      	nop
 8002a20:	3750      	adds	r7, #80	; 0x50
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	bf00      	nop
 8002a28:	40023800 	.word	0x40023800
 8002a2c:	40007000 	.word	0x40007000

08002a30 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	af00      	add	r7, sp, #0
  /* USART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002a34:	2200      	movs	r2, #0
 8002a36:	2100      	movs	r1, #0
 8002a38:	2025      	movs	r0, #37	; 0x25
 8002a3a:	f000 ff8d 	bl	8003958 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002a3e:	2025      	movs	r0, #37	; 0x25
 8002a40:	f000 ffb6 	bl	80039b0 <HAL_NVIC_EnableIRQ>
  /* I2C1_ER_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8002a44:	2200      	movs	r2, #0
 8002a46:	2100      	movs	r1, #0
 8002a48:	2020      	movs	r0, #32
 8002a4a:	f000 ff85 	bl	8003958 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8002a4e:	2020      	movs	r0, #32
 8002a50:	f000 ffae 	bl	80039b0 <HAL_NVIC_EnableIRQ>
  /* I2C1_EV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8002a54:	2200      	movs	r2, #0
 8002a56:	2100      	movs	r1, #0
 8002a58:	201f      	movs	r0, #31
 8002a5a:	f000 ff7d 	bl	8003958 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002a5e:	201f      	movs	r0, #31
 8002a60:	f000 ffa6 	bl	80039b0 <HAL_NVIC_EnableIRQ>
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002a64:	2200      	movs	r2, #0
 8002a66:	2100      	movs	r1, #0
 8002a68:	2028      	movs	r0, #40	; 0x28
 8002a6a:	f000 ff75 	bl	8003958 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002a6e:	2028      	movs	r0, #40	; 0x28
 8002a70:	f000 ff9e 	bl	80039b0 <HAL_NVIC_EnableIRQ>
  /* EXTI9_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002a74:	2200      	movs	r2, #0
 8002a76:	2100      	movs	r1, #0
 8002a78:	2017      	movs	r0, #23
 8002a7a:	f000 ff6d 	bl	8003958 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002a7e:	2017      	movs	r0, #23
 8002a80:	f000 ff96 	bl	80039b0 <HAL_NVIC_EnableIRQ>
  /* TIM7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8002a84:	2200      	movs	r2, #0
 8002a86:	2100      	movs	r1, #0
 8002a88:	2037      	movs	r0, #55	; 0x37
 8002a8a:	f000 ff65 	bl	8003958 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002a8e:	2037      	movs	r0, #55	; 0x37
 8002a90:	f000 ff8e 	bl	80039b0 <HAL_NVIC_EnableIRQ>
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002a94:	2200      	movs	r2, #0
 8002a96:	2100      	movs	r1, #0
 8002a98:	201c      	movs	r0, #28
 8002a9a:	f000 ff5d 	bl	8003958 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002a9e:	201c      	movs	r0, #28
 8002aa0:	f000 ff86 	bl	80039b0 <HAL_NVIC_EnableIRQ>
}
 8002aa4:	bf00      	nop
 8002aa6:	bd80      	pop	{r7, pc}

08002aa8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002aac:	b672      	cpsid	i
}
 8002aae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002ab0:	e7fe      	b.n	8002ab0 <Error_Handler+0x8>

08002ab2 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8002ab2:	b480      	push	{r7}
 8002ab4:	b083      	sub	sp, #12
 8002ab6:	af00      	add	r7, sp, #0
 8002ab8:	6078      	str	r0, [r7, #4]
 8002aba:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8002abc:	bf00      	nop
 8002abe:	370c      	adds	r7, #12
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac6:	4770      	bx	lr

08002ac8 <stepRev>:
#include "tim.h"

#define PULSE 200
#define GEAR 139

void stepRev(int ANG) {
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b086      	sub	sp, #24
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
	// ENA D2 PG7 GPIOG GPIO_PIN_6
	// CLK D3 PB4 GPIOB GPIO_PIN_4
	// DIR D4 PG7 GPIOG GPIO_PIN_7


  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);  // ENA
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	2140      	movs	r1, #64	; 0x40
 8002ad4:	482e      	ldr	r0, [pc, #184]	; (8002b90 <stepRev+0xc8>)
 8002ad6:	f001 fbbf 	bl	8004258 <HAL_GPIO_WritePin>

  if (ANG != 0) {
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d04e      	beq.n	8002b7e <stepRev+0xb6>
    int direction = (ANG > 0) ? 1 : -1;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	dd01      	ble.n	8002aea <stepRev+0x22>
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e001      	b.n	8002aee <stepRev+0x26>
 8002aea:	f04f 33ff 	mov.w	r3, #4294967295
 8002aee:	613b      	str	r3, [r7, #16]
    ANG *= direction;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	693a      	ldr	r2, [r7, #16]
 8002af4:	fb02 f303 	mul.w	r3, r2, r3
 8002af8:	607b      	str	r3, [r7, #4]
    HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7, direction == 1 ? GPIO_PIN_SET : GPIO_PIN_RESET); // DIR
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	2b01      	cmp	r3, #1
 8002afe:	bf0c      	ite	eq
 8002b00:	2301      	moveq	r3, #1
 8002b02:	2300      	movne	r3, #0
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	461a      	mov	r2, r3
 8002b08:	2180      	movs	r1, #128	; 0x80
 8002b0a:	4821      	ldr	r0, [pc, #132]	; (8002b90 <stepRev+0xc8>)
 8002b0c:	f001 fba4 	bl	8004258 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET); // ENA
 8002b10:	2200      	movs	r2, #0
 8002b12:	2140      	movs	r1, #64	; 0x40
 8002b14:	481e      	ldr	r0, [pc, #120]	; (8002b90 <stepRev+0xc8>)
 8002b16:	f001 fb9f 	bl	8004258 <HAL_GPIO_WritePin>
    uint32_t steps = PULSE * GEAR * ANG / 360.0;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	f646 4298 	movw	r2, #27800	; 0x6c98
 8002b20:	fb02 f303 	mul.w	r3, r2, r3
 8002b24:	4618      	mov	r0, r3
 8002b26:	f7fd fd2d 	bl	8000584 <__aeabi_i2d>
 8002b2a:	f04f 0200 	mov.w	r2, #0
 8002b2e:	4b19      	ldr	r3, [pc, #100]	; (8002b94 <stepRev+0xcc>)
 8002b30:	f7fd febc 	bl	80008ac <__aeabi_ddiv>
 8002b34:	4602      	mov	r2, r0
 8002b36:	460b      	mov	r3, r1
 8002b38:	4610      	mov	r0, r2
 8002b3a:	4619      	mov	r1, r3
 8002b3c:	f7fe f864 	bl	8000c08 <__aeabi_d2uiz>
 8002b40:	4603      	mov	r3, r0
 8002b42:	60fb      	str	r3, [r7, #12]
    uint32_t pulse_delay_ms_ = 1; // 6rpm
 8002b44:	2301      	movs	r3, #1
 8002b46:	60bb      	str	r3, [r7, #8]

    for (int i = 0; i < steps; i++) {
 8002b48:	2300      	movs	r3, #0
 8002b4a:	617b      	str	r3, [r7, #20]
 8002b4c:	e012      	b.n	8002b74 <stepRev+0xac>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET); //CLK
 8002b4e:	2201      	movs	r2, #1
 8002b50:	2110      	movs	r1, #16
 8002b52:	4811      	ldr	r0, [pc, #68]	; (8002b98 <stepRev+0xd0>)
 8002b54:	f001 fb80 	bl	8004258 <HAL_GPIO_WritePin>
      HAL_Delay(pulse_delay_ms_);
 8002b58:	68b8      	ldr	r0, [r7, #8]
 8002b5a:	f000 fde9 	bl	8003730 <HAL_Delay>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET); //CLK
 8002b5e:	2200      	movs	r2, #0
 8002b60:	2110      	movs	r1, #16
 8002b62:	480d      	ldr	r0, [pc, #52]	; (8002b98 <stepRev+0xd0>)
 8002b64:	f001 fb78 	bl	8004258 <HAL_GPIO_WritePin>
      HAL_Delay(pulse_delay_ms_);
 8002b68:	68b8      	ldr	r0, [r7, #8]
 8002b6a:	f000 fde1 	bl	8003730 <HAL_Delay>
    for (int i = 0; i < steps; i++) {
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	3301      	adds	r3, #1
 8002b72:	617b      	str	r3, [r7, #20]
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	68fa      	ldr	r2, [r7, #12]
 8002b78:	429a      	cmp	r2, r3
 8002b7a:	d8e8      	bhi.n	8002b4e <stepRev+0x86>
  }
  else {
    HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET); // ENA
  }

}
 8002b7c:	e004      	b.n	8002b88 <stepRev+0xc0>
    HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET); // ENA
 8002b7e:	2200      	movs	r2, #0
 8002b80:	2140      	movs	r1, #64	; 0x40
 8002b82:	4803      	ldr	r0, [pc, #12]	; (8002b90 <stepRev+0xc8>)
 8002b84:	f001 fb68 	bl	8004258 <HAL_GPIO_WritePin>
}
 8002b88:	bf00      	nop
 8002b8a:	3718      	adds	r7, #24
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}
 8002b90:	40021800 	.word	0x40021800
 8002b94:	40768000 	.word	0x40768000
 8002b98:	40020400 	.word	0x40020400

08002b9c <stepLin>:

void stepLin(int DIST) {
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b088      	sub	sp, #32
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]

	// ENA D5 PI0 GPIOI GPIO_PIN_0
	// CLK D8 PI2 GPIOI GPIO_PIN_2
	// DIR D7 PI3 GPIOI GPIO_PIN_3

	float ANG = DIST * 360.0 / 8; // 1 rev -> 8 mm
 8002ba4:	6878      	ldr	r0, [r7, #4]
 8002ba6:	f7fd fced 	bl	8000584 <__aeabi_i2d>
 8002baa:	f04f 0200 	mov.w	r2, #0
 8002bae:	4b44      	ldr	r3, [pc, #272]	; (8002cc0 <stepLin+0x124>)
 8002bb0:	f7fd fd52 	bl	8000658 <__aeabi_dmul>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	460b      	mov	r3, r1
 8002bb8:	4610      	mov	r0, r2
 8002bba:	4619      	mov	r1, r3
 8002bbc:	f04f 0200 	mov.w	r2, #0
 8002bc0:	4b40      	ldr	r3, [pc, #256]	; (8002cc4 <stepLin+0x128>)
 8002bc2:	f7fd fe73 	bl	80008ac <__aeabi_ddiv>
 8002bc6:	4602      	mov	r2, r0
 8002bc8:	460b      	mov	r3, r1
 8002bca:	4610      	mov	r0, r2
 8002bcc:	4619      	mov	r1, r3
 8002bce:	f7fe f83b 	bl	8000c48 <__aeabi_d2f>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	61bb      	str	r3, [r7, #24]


  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0, GPIO_PIN_SET);  // ENA
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	2101      	movs	r1, #1
 8002bda:	483b      	ldr	r0, [pc, #236]	; (8002cc8 <stepLin+0x12c>)
 8002bdc:	f001 fb3c 	bl	8004258 <HAL_GPIO_WritePin>

  if (ANG != 0) {
 8002be0:	edd7 7a06 	vldr	s15, [r7, #24]
 8002be4:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002be8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bec:	d05a      	beq.n	8002ca4 <stepLin+0x108>
    int direction = (ANG > 0) ? 1 : -1;
 8002bee:	edd7 7a06 	vldr	s15, [r7, #24]
 8002bf2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002bf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bfa:	dd01      	ble.n	8002c00 <stepLin+0x64>
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	e001      	b.n	8002c04 <stepLin+0x68>
 8002c00:	f04f 33ff 	mov.w	r3, #4294967295
 8002c04:	617b      	str	r3, [r7, #20]
    ANG *= direction;
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	ee07 3a90 	vmov	s15, r3
 8002c0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c10:	ed97 7a06 	vldr	s14, [r7, #24]
 8002c14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c18:	edc7 7a06 	vstr	s15, [r7, #24]
    HAL_GPIO_WritePin(GPIOI, GPIO_PIN_3, direction == 1 ? GPIO_PIN_SET : GPIO_PIN_RESET); // DIR
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	2b01      	cmp	r3, #1
 8002c20:	bf0c      	ite	eq
 8002c22:	2301      	moveq	r3, #1
 8002c24:	2300      	movne	r3, #0
 8002c26:	b2db      	uxtb	r3, r3
 8002c28:	461a      	mov	r2, r3
 8002c2a:	2108      	movs	r1, #8
 8002c2c:	4826      	ldr	r0, [pc, #152]	; (8002cc8 <stepLin+0x12c>)
 8002c2e:	f001 fb13 	bl	8004258 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0, GPIO_PIN_RESET);  // ENA
 8002c32:	2200      	movs	r2, #0
 8002c34:	2101      	movs	r1, #1
 8002c36:	4824      	ldr	r0, [pc, #144]	; (8002cc8 <stepLin+0x12c>)
 8002c38:	f001 fb0e 	bl	8004258 <HAL_GPIO_WritePin>
    uint32_t steps = PULSE * ANG / 360.0;
 8002c3c:	edd7 7a06 	vldr	s15, [r7, #24]
 8002c40:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8002ccc <stepLin+0x130>
 8002c44:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c48:	ee17 0a90 	vmov	r0, s15
 8002c4c:	f7fd fcac 	bl	80005a8 <__aeabi_f2d>
 8002c50:	f04f 0200 	mov.w	r2, #0
 8002c54:	4b1a      	ldr	r3, [pc, #104]	; (8002cc0 <stepLin+0x124>)
 8002c56:	f7fd fe29 	bl	80008ac <__aeabi_ddiv>
 8002c5a:	4602      	mov	r2, r0
 8002c5c:	460b      	mov	r3, r1
 8002c5e:	4610      	mov	r0, r2
 8002c60:	4619      	mov	r1, r3
 8002c62:	f7fd ffd1 	bl	8000c08 <__aeabi_d2uiz>
 8002c66:	4603      	mov	r3, r0
 8002c68:	613b      	str	r3, [r7, #16]
    uint32_t pulse_delay_ms_ = 1; // 6rpm
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	60fb      	str	r3, [r7, #12]

    for (int i = 0; i < steps; i++) {
 8002c6e:	2300      	movs	r3, #0
 8002c70:	61fb      	str	r3, [r7, #28]
 8002c72:	e012      	b.n	8002c9a <stepLin+0xfe>
      HAL_GPIO_WritePin(GPIOI, GPIO_PIN_2, GPIO_PIN_SET); // CLK
 8002c74:	2201      	movs	r2, #1
 8002c76:	2104      	movs	r1, #4
 8002c78:	4813      	ldr	r0, [pc, #76]	; (8002cc8 <stepLin+0x12c>)
 8002c7a:	f001 faed 	bl	8004258 <HAL_GPIO_WritePin>
      HAL_Delay(pulse_delay_ms_);
 8002c7e:	68f8      	ldr	r0, [r7, #12]
 8002c80:	f000 fd56 	bl	8003730 <HAL_Delay>
      HAL_GPIO_WritePin(GPIOI, GPIO_PIN_2, GPIO_PIN_RESET); // CLK
 8002c84:	2200      	movs	r2, #0
 8002c86:	2104      	movs	r1, #4
 8002c88:	480f      	ldr	r0, [pc, #60]	; (8002cc8 <stepLin+0x12c>)
 8002c8a:	f001 fae5 	bl	8004258 <HAL_GPIO_WritePin>
      HAL_Delay(pulse_delay_ms_);
 8002c8e:	68f8      	ldr	r0, [r7, #12]
 8002c90:	f000 fd4e 	bl	8003730 <HAL_Delay>
    for (int i = 0; i < steps; i++) {
 8002c94:	69fb      	ldr	r3, [r7, #28]
 8002c96:	3301      	adds	r3, #1
 8002c98:	61fb      	str	r3, [r7, #28]
 8002c9a:	69fb      	ldr	r3, [r7, #28]
 8002c9c:	693a      	ldr	r2, [r7, #16]
 8002c9e:	429a      	cmp	r2, r3
 8002ca0:	d8e8      	bhi.n	8002c74 <stepLin+0xd8>
 8002ca2:	e004      	b.n	8002cae <stepLin+0x112>
    }
  }
  else {
    HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0, GPIO_PIN_RESET);  // ENA
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	2101      	movs	r1, #1
 8002ca8:	4807      	ldr	r0, [pc, #28]	; (8002cc8 <stepLin+0x12c>)
 8002caa:	f001 fad5 	bl	8004258 <HAL_GPIO_WritePin>
  }

  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0, GPIO_PIN_SET);  // ENA
 8002cae:	2201      	movs	r2, #1
 8002cb0:	2101      	movs	r1, #1
 8002cb2:	4805      	ldr	r0, [pc, #20]	; (8002cc8 <stepLin+0x12c>)
 8002cb4:	f001 fad0 	bl	8004258 <HAL_GPIO_WritePin>

}
 8002cb8:	bf00      	nop
 8002cba:	3720      	adds	r7, #32
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}
 8002cc0:	40768000 	.word	0x40768000
 8002cc4:	40200000 	.word	0x40200000
 8002cc8:	40022000 	.word	0x40022000
 8002ccc:	43480000 	.word	0x43480000

08002cd0 <servo_angle>:

void servo_angle(TIM_HandleTypeDef *htim, uint32_t channel, int step) {
 8002cd0:	b480      	push	{r7}
 8002cd2:	b087      	sub	sp, #28
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	60f8      	str	r0, [r7, #12]
 8002cd8:	60b9      	str	r1, [r7, #8]
 8002cda:	607a      	str	r2, [r7, #4]

	// 1 step is 0.8 mm
    if (step > 17)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2b11      	cmp	r3, #17
 8002ce0:	dd01      	ble.n	8002ce6 <servo_angle+0x16>
    	step = 17; // 최대 각도 제한
 8002ce2:	2311      	movs	r3, #17
 8002ce4:	607b      	str	r3, [r7, #4]

    int pulse_width = 21-step; // 듀티 사이클 계산 (0도에서 180도까지)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	f1c3 0315 	rsb	r3, r3, #21
 8002cec:	617b      	str	r3, [r7, #20]
    __HAL_TIM_SET_COMPARE(htim, channel, pulse_width); // 듀티 사이클 변경
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d104      	bne.n	8002cfe <servo_angle+0x2e>
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	697a      	ldr	r2, [r7, #20]
 8002cfa:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002cfc:	e023      	b.n	8002d46 <servo_angle+0x76>
    __HAL_TIM_SET_COMPARE(htim, channel, pulse_width); // 듀티 사이클 변경
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	2b04      	cmp	r3, #4
 8002d02:	d104      	bne.n	8002d0e <servo_angle+0x3e>
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002d0c:	e01b      	b.n	8002d46 <servo_angle+0x76>
    __HAL_TIM_SET_COMPARE(htim, channel, pulse_width); // 듀티 사이클 변경
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	2b08      	cmp	r3, #8
 8002d12:	d104      	bne.n	8002d1e <servo_angle+0x4e>
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8002d1c:	e013      	b.n	8002d46 <servo_angle+0x76>
    __HAL_TIM_SET_COMPARE(htim, channel, pulse_width); // 듀티 사이클 변경
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	2b0c      	cmp	r3, #12
 8002d22:	d104      	bne.n	8002d2e <servo_angle+0x5e>
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681a      	ldr	r2, [r3, #0]
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	6413      	str	r3, [r2, #64]	; 0x40
}
 8002d2c:	e00b      	b.n	8002d46 <servo_angle+0x76>
    __HAL_TIM_SET_COMPARE(htim, channel, pulse_width); // 듀티 사이클 변경
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	2b10      	cmp	r3, #16
 8002d32:	d104      	bne.n	8002d3e <servo_angle+0x6e>
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	6593      	str	r3, [r2, #88]	; 0x58
}
 8002d3c:	e003      	b.n	8002d46 <servo_angle+0x76>
    __HAL_TIM_SET_COMPARE(htim, channel, pulse_width); // 듀티 사이클 변경
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681a      	ldr	r2, [r3, #0]
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 8002d46:	bf00      	nop
 8002d48:	371c      	adds	r7, #28
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d50:	4770      	bx	lr
	...

08002d54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002d5a:	4b0f      	ldr	r3, [pc, #60]	; (8002d98 <HAL_MspInit+0x44>)
 8002d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5e:	4a0e      	ldr	r2, [pc, #56]	; (8002d98 <HAL_MspInit+0x44>)
 8002d60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d64:	6413      	str	r3, [r2, #64]	; 0x40
 8002d66:	4b0c      	ldr	r3, [pc, #48]	; (8002d98 <HAL_MspInit+0x44>)
 8002d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d6e:	607b      	str	r3, [r7, #4]
 8002d70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d72:	4b09      	ldr	r3, [pc, #36]	; (8002d98 <HAL_MspInit+0x44>)
 8002d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d76:	4a08      	ldr	r2, [pc, #32]	; (8002d98 <HAL_MspInit+0x44>)
 8002d78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d7c:	6453      	str	r3, [r2, #68]	; 0x44
 8002d7e:	4b06      	ldr	r3, [pc, #24]	; (8002d98 <HAL_MspInit+0x44>)
 8002d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d86:	603b      	str	r3, [r7, #0]
 8002d88:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d8a:	bf00      	nop
 8002d8c:	370c      	adds	r7, #12
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d94:	4770      	bx	lr
 8002d96:	bf00      	nop
 8002d98:	40023800 	.word	0x40023800

08002d9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002da0:	e7fe      	b.n	8002da0 <NMI_Handler+0x4>

08002da2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002da2:	b480      	push	{r7}
 8002da4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002da6:	e7fe      	b.n	8002da6 <HardFault_Handler+0x4>

08002da8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002da8:	b480      	push	{r7}
 8002daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002dac:	e7fe      	b.n	8002dac <MemManage_Handler+0x4>

08002dae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002dae:	b480      	push	{r7}
 8002db0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002db2:	e7fe      	b.n	8002db2 <BusFault_Handler+0x4>

08002db4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002db4:	b480      	push	{r7}
 8002db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002db8:	e7fe      	b.n	8002db8 <UsageFault_Handler+0x4>

08002dba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002dba:	b480      	push	{r7}
 8002dbc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002dbe:	bf00      	nop
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc6:	4770      	bx	lr

08002dc8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002dcc:	bf00      	nop
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd4:	4770      	bx	lr

08002dd6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002dd6:	b480      	push	{r7}
 8002dd8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002dda:	bf00      	nop
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de2:	4770      	bx	lr

08002de4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002de8:	f000 fc82 	bl	80036f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002dec:	bf00      	nop
 8002dee:	bd80      	pop	{r7, pc}

08002df0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8002df4:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002df8:	f001 fa5a 	bl	80042b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002dfc:	bf00      	nop
 8002dfe:	bd80      	pop	{r7, pc}

08002e00 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002e04:	4802      	ldr	r0, [pc, #8]	; (8002e10 <TIM2_IRQHandler+0x10>)
 8002e06:	f005 f8db 	bl	8007fc0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002e0a:	bf00      	nop
 8002e0c:	bd80      	pop	{r7, pc}
 8002e0e:	bf00      	nop
 8002e10:	20007958 	.word	0x20007958

08002e14 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002e18:	4802      	ldr	r0, [pc, #8]	; (8002e24 <I2C1_EV_IRQHandler+0x10>)
 8002e1a:	f001 fd79 	bl	8004910 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002e1e:	bf00      	nop
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	bf00      	nop
 8002e24:	20007720 	.word	0x20007720

08002e28 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002e2c:	4802      	ldr	r0, [pc, #8]	; (8002e38 <I2C1_ER_IRQHandler+0x10>)
 8002e2e:	f001 fd89 	bl	8004944 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8002e32:	bf00      	nop
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	bf00      	nop
 8002e38:	20007720 	.word	0x20007720

08002e3c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002e40:	4802      	ldr	r0, [pc, #8]	; (8002e4c <USART1_IRQHandler+0x10>)
 8002e42:	f006 fff3 	bl	8009e2c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002e46:	bf00      	nop
 8002e48:	bd80      	pop	{r7, pc}
 8002e4a:	bf00      	nop
 8002e4c:	20007a74 	.word	0x20007a74

08002e50 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8002e54:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002e58:	f001 fa2a 	bl	80042b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002e5c:	bf00      	nop
 8002e5e:	bd80      	pop	{r7, pc}

08002e60 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002e64:	4802      	ldr	r0, [pc, #8]	; (8002e70 <TIM7_IRQHandler+0x10>)
 8002e66:	f005 f8ab 	bl	8007fc0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002e6a:	bf00      	nop
 8002e6c:	bd80      	pop	{r7, pc}
 8002e6e:	bf00      	nop
 8002e70:	200079a4 	.word	0x200079a4

08002e74 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002e74:	b480      	push	{r7}
 8002e76:	af00      	add	r7, sp, #0
  return 1;
 8002e78:	2301      	movs	r3, #1
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e82:	4770      	bx	lr

08002e84 <_kill>:

int _kill(int pid, int sig)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b082      	sub	sp, #8
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
 8002e8c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002e8e:	f00d f92f 	bl	80100f0 <__errno>
 8002e92:	4603      	mov	r3, r0
 8002e94:	2216      	movs	r2, #22
 8002e96:	601a      	str	r2, [r3, #0]
  return -1;
 8002e98:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	3708      	adds	r7, #8
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}

08002ea4 <_exit>:

void _exit (int status)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b082      	sub	sp, #8
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002eac:	f04f 31ff 	mov.w	r1, #4294967295
 8002eb0:	6878      	ldr	r0, [r7, #4]
 8002eb2:	f7ff ffe7 	bl	8002e84 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002eb6:	e7fe      	b.n	8002eb6 <_exit+0x12>

08002eb8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b086      	sub	sp, #24
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	60f8      	str	r0, [r7, #12]
 8002ec0:	60b9      	str	r1, [r7, #8]
 8002ec2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	617b      	str	r3, [r7, #20]
 8002ec8:	e00a      	b.n	8002ee0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002eca:	f3af 8000 	nop.w
 8002ece:	4601      	mov	r1, r0
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	1c5a      	adds	r2, r3, #1
 8002ed4:	60ba      	str	r2, [r7, #8]
 8002ed6:	b2ca      	uxtb	r2, r1
 8002ed8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	3301      	adds	r3, #1
 8002ede:	617b      	str	r3, [r7, #20]
 8002ee0:	697a      	ldr	r2, [r7, #20]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	dbf0      	blt.n	8002eca <_read+0x12>
  }

  return len;
 8002ee8:	687b      	ldr	r3, [r7, #4]
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	3718      	adds	r7, #24
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}

08002ef2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002ef2:	b580      	push	{r7, lr}
 8002ef4:	b086      	sub	sp, #24
 8002ef6:	af00      	add	r7, sp, #0
 8002ef8:	60f8      	str	r0, [r7, #12]
 8002efa:	60b9      	str	r1, [r7, #8]
 8002efc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002efe:	2300      	movs	r3, #0
 8002f00:	617b      	str	r3, [r7, #20]
 8002f02:	e009      	b.n	8002f18 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	1c5a      	adds	r2, r3, #1
 8002f08:	60ba      	str	r2, [r7, #8]
 8002f0a:	781b      	ldrb	r3, [r3, #0]
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	3301      	adds	r3, #1
 8002f16:	617b      	str	r3, [r7, #20]
 8002f18:	697a      	ldr	r2, [r7, #20]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	dbf1      	blt.n	8002f04 <_write+0x12>
  }
  return len;
 8002f20:	687b      	ldr	r3, [r7, #4]
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	3718      	adds	r7, #24
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}

08002f2a <_close>:

int _close(int file)
{
 8002f2a:	b480      	push	{r7}
 8002f2c:	b083      	sub	sp, #12
 8002f2e:	af00      	add	r7, sp, #0
 8002f30:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002f32:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	370c      	adds	r7, #12
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f40:	4770      	bx	lr

08002f42 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002f42:	b480      	push	{r7}
 8002f44:	b083      	sub	sp, #12
 8002f46:	af00      	add	r7, sp, #0
 8002f48:	6078      	str	r0, [r7, #4]
 8002f4a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002f52:	605a      	str	r2, [r3, #4]
  return 0;
 8002f54:	2300      	movs	r3, #0
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	370c      	adds	r7, #12
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f60:	4770      	bx	lr

08002f62 <_isatty>:

int _isatty(int file)
{
 8002f62:	b480      	push	{r7}
 8002f64:	b083      	sub	sp, #12
 8002f66:	af00      	add	r7, sp, #0
 8002f68:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002f6a:	2301      	movs	r3, #1
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	370c      	adds	r7, #12
 8002f70:	46bd      	mov	sp, r7
 8002f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f76:	4770      	bx	lr

08002f78 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b085      	sub	sp, #20
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	60f8      	str	r0, [r7, #12]
 8002f80:	60b9      	str	r1, [r7, #8]
 8002f82:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002f84:	2300      	movs	r3, #0
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	3714      	adds	r7, #20
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f90:	4770      	bx	lr
	...

08002f94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b086      	sub	sp, #24
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002f9c:	4a14      	ldr	r2, [pc, #80]	; (8002ff0 <_sbrk+0x5c>)
 8002f9e:	4b15      	ldr	r3, [pc, #84]	; (8002ff4 <_sbrk+0x60>)
 8002fa0:	1ad3      	subs	r3, r2, r3
 8002fa2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002fa8:	4b13      	ldr	r3, [pc, #76]	; (8002ff8 <_sbrk+0x64>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d102      	bne.n	8002fb6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002fb0:	4b11      	ldr	r3, [pc, #68]	; (8002ff8 <_sbrk+0x64>)
 8002fb2:	4a12      	ldr	r2, [pc, #72]	; (8002ffc <_sbrk+0x68>)
 8002fb4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002fb6:	4b10      	ldr	r3, [pc, #64]	; (8002ff8 <_sbrk+0x64>)
 8002fb8:	681a      	ldr	r2, [r3, #0]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	4413      	add	r3, r2
 8002fbe:	693a      	ldr	r2, [r7, #16]
 8002fc0:	429a      	cmp	r2, r3
 8002fc2:	d207      	bcs.n	8002fd4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002fc4:	f00d f894 	bl	80100f0 <__errno>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	220c      	movs	r2, #12
 8002fcc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002fce:	f04f 33ff 	mov.w	r3, #4294967295
 8002fd2:	e009      	b.n	8002fe8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002fd4:	4b08      	ldr	r3, [pc, #32]	; (8002ff8 <_sbrk+0x64>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002fda:	4b07      	ldr	r3, [pc, #28]	; (8002ff8 <_sbrk+0x64>)
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	4413      	add	r3, r2
 8002fe2:	4a05      	ldr	r2, [pc, #20]	; (8002ff8 <_sbrk+0x64>)
 8002fe4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	3718      	adds	r7, #24
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}
 8002ff0:	20050000 	.word	0x20050000
 8002ff4:	00000400 	.word	0x00000400
 8002ff8:	20007954 	.word	0x20007954
 8002ffc:	2000a1a0 	.word	0x2000a1a0

08003000 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003000:	b480      	push	{r7}
 8003002:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003004:	4b06      	ldr	r3, [pc, #24]	; (8003020 <SystemInit+0x20>)
 8003006:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800300a:	4a05      	ldr	r2, [pc, #20]	; (8003020 <SystemInit+0x20>)
 800300c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003010:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003014:	bf00      	nop
 8003016:	46bd      	mov	sp, r7
 8003018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301c:	4770      	bx	lr
 800301e:	bf00      	nop
 8003020:	e000ed00 	.word	0xe000ed00

08003024 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim7;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b08e      	sub	sp, #56	; 0x38
 8003028:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800302a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800302e:	2200      	movs	r2, #0
 8003030:	601a      	str	r2, [r3, #0]
 8003032:	605a      	str	r2, [r3, #4]
 8003034:	609a      	str	r2, [r3, #8]
 8003036:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003038:	f107 031c 	add.w	r3, r7, #28
 800303c:	2200      	movs	r2, #0
 800303e:	601a      	str	r2, [r3, #0]
 8003040:	605a      	str	r2, [r3, #4]
 8003042:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003044:	463b      	mov	r3, r7
 8003046:	2200      	movs	r2, #0
 8003048:	601a      	str	r2, [r3, #0]
 800304a:	605a      	str	r2, [r3, #4]
 800304c:	609a      	str	r2, [r3, #8]
 800304e:	60da      	str	r2, [r3, #12]
 8003050:	611a      	str	r2, [r3, #16]
 8003052:	615a      	str	r2, [r3, #20]
 8003054:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003056:	4b2d      	ldr	r3, [pc, #180]	; (800310c <MX_TIM2_Init+0xe8>)
 8003058:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800305c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10800-1;
 800305e:	4b2b      	ldr	r3, [pc, #172]	; (800310c <MX_TIM2_Init+0xe8>)
 8003060:	f642 222f 	movw	r2, #10799	; 0x2a2f
 8003064:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003066:	4b29      	ldr	r3, [pc, #164]	; (800310c <MX_TIM2_Init+0xe8>)
 8003068:	2200      	movs	r2, #0
 800306a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 50-1;
 800306c:	4b27      	ldr	r3, [pc, #156]	; (800310c <MX_TIM2_Init+0xe8>)
 800306e:	2231      	movs	r2, #49	; 0x31
 8003070:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003072:	4b26      	ldr	r3, [pc, #152]	; (800310c <MX_TIM2_Init+0xe8>)
 8003074:	2200      	movs	r2, #0
 8003076:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003078:	4b24      	ldr	r3, [pc, #144]	; (800310c <MX_TIM2_Init+0xe8>)
 800307a:	2200      	movs	r2, #0
 800307c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800307e:	4823      	ldr	r0, [pc, #140]	; (800310c <MX_TIM2_Init+0xe8>)
 8003080:	f004 fb8a 	bl	8007798 <HAL_TIM_Base_Init>
 8003084:	4603      	mov	r3, r0
 8003086:	2b00      	cmp	r3, #0
 8003088:	d001      	beq.n	800308e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800308a:	f7ff fd0d 	bl	8002aa8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800308e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003092:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003094:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003098:	4619      	mov	r1, r3
 800309a:	481c      	ldr	r0, [pc, #112]	; (800310c <MX_TIM2_Init+0xe8>)
 800309c:	f005 fb18 	bl	80086d0 <HAL_TIM_ConfigClockSource>
 80030a0:	4603      	mov	r3, r0
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d001      	beq.n	80030aa <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80030a6:	f7ff fcff 	bl	8002aa8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80030aa:	4818      	ldr	r0, [pc, #96]	; (800310c <MX_TIM2_Init+0xe8>)
 80030ac:	f004 fc94 	bl	80079d8 <HAL_TIM_PWM_Init>
 80030b0:	4603      	mov	r3, r0
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d001      	beq.n	80030ba <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80030b6:	f7ff fcf7 	bl	8002aa8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80030ba:	2300      	movs	r3, #0
 80030bc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80030be:	2300      	movs	r3, #0
 80030c0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80030c2:	f107 031c 	add.w	r3, r7, #28
 80030c6:	4619      	mov	r1, r3
 80030c8:	4810      	ldr	r0, [pc, #64]	; (800310c <MX_TIM2_Init+0xe8>)
 80030ca:	f006 fb31 	bl	8009730 <HAL_TIMEx_MasterConfigSynchronization>
 80030ce:	4603      	mov	r3, r0
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d001      	beq.n	80030d8 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80030d4:	f7ff fce8 	bl	8002aa8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80030d8:	2360      	movs	r3, #96	; 0x60
 80030da:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80030dc:	2300      	movs	r3, #0
 80030de:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80030e0:	2300      	movs	r3, #0
 80030e2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80030e4:	2300      	movs	r3, #0
 80030e6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80030e8:	463b      	mov	r3, r7
 80030ea:	2200      	movs	r2, #0
 80030ec:	4619      	mov	r1, r3
 80030ee:	4807      	ldr	r0, [pc, #28]	; (800310c <MX_TIM2_Init+0xe8>)
 80030f0:	f005 f886 	bl	8008200 <HAL_TIM_PWM_ConfigChannel>
 80030f4:	4603      	mov	r3, r0
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d001      	beq.n	80030fe <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80030fa:	f7ff fcd5 	bl	8002aa8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80030fe:	4803      	ldr	r0, [pc, #12]	; (800310c <MX_TIM2_Init+0xe8>)
 8003100:	f000 f86e 	bl	80031e0 <HAL_TIM_MspPostInit>

}
 8003104:	bf00      	nop
 8003106:	3738      	adds	r7, #56	; 0x38
 8003108:	46bd      	mov	sp, r7
 800310a:	bd80      	pop	{r7, pc}
 800310c:	20007958 	.word	0x20007958

08003110 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b084      	sub	sp, #16
 8003114:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003116:	1d3b      	adds	r3, r7, #4
 8003118:	2200      	movs	r2, #0
 800311a:	601a      	str	r2, [r3, #0]
 800311c:	605a      	str	r2, [r3, #4]
 800311e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8003120:	4b14      	ldr	r3, [pc, #80]	; (8003174 <MX_TIM7_Init+0x64>)
 8003122:	4a15      	ldr	r2, [pc, #84]	; (8003178 <MX_TIM7_Init+0x68>)
 8003124:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 10800-1;
 8003126:	4b13      	ldr	r3, [pc, #76]	; (8003174 <MX_TIM7_Init+0x64>)
 8003128:	f642 222f 	movw	r2, #10799	; 0x2a2f
 800312c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800312e:	4b11      	ldr	r3, [pc, #68]	; (8003174 <MX_TIM7_Init+0x64>)
 8003130:	2200      	movs	r2, #0
 8003132:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 50-1;
 8003134:	4b0f      	ldr	r3, [pc, #60]	; (8003174 <MX_TIM7_Init+0x64>)
 8003136:	2231      	movs	r2, #49	; 0x31
 8003138:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800313a:	4b0e      	ldr	r3, [pc, #56]	; (8003174 <MX_TIM7_Init+0x64>)
 800313c:	2200      	movs	r2, #0
 800313e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8003140:	480c      	ldr	r0, [pc, #48]	; (8003174 <MX_TIM7_Init+0x64>)
 8003142:	f004 fb29 	bl	8007798 <HAL_TIM_Base_Init>
 8003146:	4603      	mov	r3, r0
 8003148:	2b00      	cmp	r3, #0
 800314a:	d001      	beq.n	8003150 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 800314c:	f7ff fcac 	bl	8002aa8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003150:	2300      	movs	r3, #0
 8003152:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003154:	2300      	movs	r3, #0
 8003156:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8003158:	1d3b      	adds	r3, r7, #4
 800315a:	4619      	mov	r1, r3
 800315c:	4805      	ldr	r0, [pc, #20]	; (8003174 <MX_TIM7_Init+0x64>)
 800315e:	f006 fae7 	bl	8009730 <HAL_TIMEx_MasterConfigSynchronization>
 8003162:	4603      	mov	r3, r0
 8003164:	2b00      	cmp	r3, #0
 8003166:	d001      	beq.n	800316c <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8003168:	f7ff fc9e 	bl	8002aa8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800316c:	bf00      	nop
 800316e:	3710      	adds	r7, #16
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}
 8003174:	200079a4 	.word	0x200079a4
 8003178:	40001400 	.word	0x40001400

0800317c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800317c:	b480      	push	{r7}
 800317e:	b085      	sub	sp, #20
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800318c:	d10c      	bne.n	80031a8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800318e:	4b12      	ldr	r3, [pc, #72]	; (80031d8 <HAL_TIM_Base_MspInit+0x5c>)
 8003190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003192:	4a11      	ldr	r2, [pc, #68]	; (80031d8 <HAL_TIM_Base_MspInit+0x5c>)
 8003194:	f043 0301 	orr.w	r3, r3, #1
 8003198:	6413      	str	r3, [r2, #64]	; 0x40
 800319a:	4b0f      	ldr	r3, [pc, #60]	; (80031d8 <HAL_TIM_Base_MspInit+0x5c>)
 800319c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319e:	f003 0301 	and.w	r3, r3, #1
 80031a2:	60fb      	str	r3, [r7, #12]
 80031a4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM7_CLK_ENABLE();
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 80031a6:	e010      	b.n	80031ca <HAL_TIM_Base_MspInit+0x4e>
  else if(tim_baseHandle->Instance==TIM7)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a0b      	ldr	r2, [pc, #44]	; (80031dc <HAL_TIM_Base_MspInit+0x60>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d10b      	bne.n	80031ca <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80031b2:	4b09      	ldr	r3, [pc, #36]	; (80031d8 <HAL_TIM_Base_MspInit+0x5c>)
 80031b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b6:	4a08      	ldr	r2, [pc, #32]	; (80031d8 <HAL_TIM_Base_MspInit+0x5c>)
 80031b8:	f043 0320 	orr.w	r3, r3, #32
 80031bc:	6413      	str	r3, [r2, #64]	; 0x40
 80031be:	4b06      	ldr	r3, [pc, #24]	; (80031d8 <HAL_TIM_Base_MspInit+0x5c>)
 80031c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c2:	f003 0320 	and.w	r3, r3, #32
 80031c6:	60bb      	str	r3, [r7, #8]
 80031c8:	68bb      	ldr	r3, [r7, #8]
}
 80031ca:	bf00      	nop
 80031cc:	3714      	adds	r7, #20
 80031ce:	46bd      	mov	sp, r7
 80031d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d4:	4770      	bx	lr
 80031d6:	bf00      	nop
 80031d8:	40023800 	.word	0x40023800
 80031dc:	40001400 	.word	0x40001400

080031e0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b088      	sub	sp, #32
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031e8:	f107 030c 	add.w	r3, r7, #12
 80031ec:	2200      	movs	r2, #0
 80031ee:	601a      	str	r2, [r3, #0]
 80031f0:	605a      	str	r2, [r3, #4]
 80031f2:	609a      	str	r2, [r3, #8]
 80031f4:	60da      	str	r2, [r3, #12]
 80031f6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003200:	d11c      	bne.n	800323c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003202:	4b10      	ldr	r3, [pc, #64]	; (8003244 <HAL_TIM_MspPostInit+0x64>)
 8003204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003206:	4a0f      	ldr	r2, [pc, #60]	; (8003244 <HAL_TIM_MspPostInit+0x64>)
 8003208:	f043 0301 	orr.w	r3, r3, #1
 800320c:	6313      	str	r3, [r2, #48]	; 0x30
 800320e:	4b0d      	ldr	r3, [pc, #52]	; (8003244 <HAL_TIM_MspPostInit+0x64>)
 8003210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003212:	f003 0301 	and.w	r3, r3, #1
 8003216:	60bb      	str	r3, [r7, #8]
 8003218:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800321a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800321e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003220:	2302      	movs	r3, #2
 8003222:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003224:	2300      	movs	r3, #0
 8003226:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003228:	2300      	movs	r3, #0
 800322a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800322c:	2301      	movs	r3, #1
 800322e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003230:	f107 030c 	add.w	r3, r7, #12
 8003234:	4619      	mov	r1, r3
 8003236:	4804      	ldr	r0, [pc, #16]	; (8003248 <HAL_TIM_MspPostInit+0x68>)
 8003238:	f000 fc7e 	bl	8003b38 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800323c:	bf00      	nop
 800323e:	3720      	adds	r7, #32
 8003240:	46bd      	mov	sp, r7
 8003242:	bd80      	pop	{r7, pc}
 8003244:	40023800 	.word	0x40023800
 8003248:	40020000 	.word	0x40020000

0800324c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003250:	4b14      	ldr	r3, [pc, #80]	; (80032a4 <MX_USART1_UART_Init+0x58>)
 8003252:	4a15      	ldr	r2, [pc, #84]	; (80032a8 <MX_USART1_UART_Init+0x5c>)
 8003254:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003256:	4b13      	ldr	r3, [pc, #76]	; (80032a4 <MX_USART1_UART_Init+0x58>)
 8003258:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800325c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800325e:	4b11      	ldr	r3, [pc, #68]	; (80032a4 <MX_USART1_UART_Init+0x58>)
 8003260:	2200      	movs	r2, #0
 8003262:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003264:	4b0f      	ldr	r3, [pc, #60]	; (80032a4 <MX_USART1_UART_Init+0x58>)
 8003266:	2200      	movs	r2, #0
 8003268:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800326a:	4b0e      	ldr	r3, [pc, #56]	; (80032a4 <MX_USART1_UART_Init+0x58>)
 800326c:	2200      	movs	r2, #0
 800326e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003270:	4b0c      	ldr	r3, [pc, #48]	; (80032a4 <MX_USART1_UART_Init+0x58>)
 8003272:	220c      	movs	r2, #12
 8003274:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003276:	4b0b      	ldr	r3, [pc, #44]	; (80032a4 <MX_USART1_UART_Init+0x58>)
 8003278:	2200      	movs	r2, #0
 800327a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800327c:	4b09      	ldr	r3, [pc, #36]	; (80032a4 <MX_USART1_UART_Init+0x58>)
 800327e:	2200      	movs	r2, #0
 8003280:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003282:	4b08      	ldr	r3, [pc, #32]	; (80032a4 <MX_USART1_UART_Init+0x58>)
 8003284:	2200      	movs	r2, #0
 8003286:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003288:	4b06      	ldr	r3, [pc, #24]	; (80032a4 <MX_USART1_UART_Init+0x58>)
 800328a:	2200      	movs	r2, #0
 800328c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800328e:	4805      	ldr	r0, [pc, #20]	; (80032a4 <MX_USART1_UART_Init+0x58>)
 8003290:	f006 fbc4 	bl	8009a1c <HAL_UART_Init>
 8003294:	4603      	mov	r3, r0
 8003296:	2b00      	cmp	r3, #0
 8003298:	d001      	beq.n	800329e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800329a:	f7ff fc05 	bl	8002aa8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800329e:	bf00      	nop
 80032a0:	bd80      	pop	{r7, pc}
 80032a2:	bf00      	nop
 80032a4:	20007a74 	.word	0x20007a74
 80032a8:	40011000 	.word	0x40011000

080032ac <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b0ac      	sub	sp, #176	; 0xb0
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032b4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80032b8:	2200      	movs	r2, #0
 80032ba:	601a      	str	r2, [r3, #0]
 80032bc:	605a      	str	r2, [r3, #4]
 80032be:	609a      	str	r2, [r3, #8]
 80032c0:	60da      	str	r2, [r3, #12]
 80032c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80032c4:	f107 0318 	add.w	r3, r7, #24
 80032c8:	2284      	movs	r2, #132	; 0x84
 80032ca:	2100      	movs	r1, #0
 80032cc:	4618      	mov	r0, r3
 80032ce:	f00c ff47 	bl	8010160 <memset>
  if(uartHandle->Instance==USART1)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a32      	ldr	r2, [pc, #200]	; (80033a0 <HAL_UART_MspInit+0xf4>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d15c      	bne.n	8003396 <HAL_UART_MspInit+0xea>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80032dc:	2340      	movs	r3, #64	; 0x40
 80032de:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80032e0:	2300      	movs	r3, #0
 80032e2:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80032e4:	f107 0318 	add.w	r3, r7, #24
 80032e8:	4618      	mov	r0, r3
 80032ea:	f003 fa71 	bl	80067d0 <HAL_RCCEx_PeriphCLKConfig>
 80032ee:	4603      	mov	r3, r0
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d001      	beq.n	80032f8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80032f4:	f7ff fbd8 	bl	8002aa8 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80032f8:	4b2a      	ldr	r3, [pc, #168]	; (80033a4 <HAL_UART_MspInit+0xf8>)
 80032fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032fc:	4a29      	ldr	r2, [pc, #164]	; (80033a4 <HAL_UART_MspInit+0xf8>)
 80032fe:	f043 0310 	orr.w	r3, r3, #16
 8003302:	6453      	str	r3, [r2, #68]	; 0x44
 8003304:	4b27      	ldr	r3, [pc, #156]	; (80033a4 <HAL_UART_MspInit+0xf8>)
 8003306:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003308:	f003 0310 	and.w	r3, r3, #16
 800330c:	617b      	str	r3, [r7, #20]
 800330e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003310:	4b24      	ldr	r3, [pc, #144]	; (80033a4 <HAL_UART_MspInit+0xf8>)
 8003312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003314:	4a23      	ldr	r2, [pc, #140]	; (80033a4 <HAL_UART_MspInit+0xf8>)
 8003316:	f043 0302 	orr.w	r3, r3, #2
 800331a:	6313      	str	r3, [r2, #48]	; 0x30
 800331c:	4b21      	ldr	r3, [pc, #132]	; (80033a4 <HAL_UART_MspInit+0xf8>)
 800331e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003320:	f003 0302 	and.w	r3, r3, #2
 8003324:	613b      	str	r3, [r7, #16]
 8003326:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003328:	4b1e      	ldr	r3, [pc, #120]	; (80033a4 <HAL_UART_MspInit+0xf8>)
 800332a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800332c:	4a1d      	ldr	r2, [pc, #116]	; (80033a4 <HAL_UART_MspInit+0xf8>)
 800332e:	f043 0301 	orr.w	r3, r3, #1
 8003332:	6313      	str	r3, [r2, #48]	; 0x30
 8003334:	4b1b      	ldr	r3, [pc, #108]	; (80033a4 <HAL_UART_MspInit+0xf8>)
 8003336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003338:	f003 0301 	and.w	r3, r3, #1
 800333c:	60fb      	str	r3, [r7, #12]
 800333e:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003340:	2380      	movs	r3, #128	; 0x80
 8003342:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003346:	2302      	movs	r3, #2
 8003348:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800334c:	2300      	movs	r3, #0
 800334e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003352:	2303      	movs	r3, #3
 8003354:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003358:	2307      	movs	r3, #7
 800335a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800335e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003362:	4619      	mov	r1, r3
 8003364:	4810      	ldr	r0, [pc, #64]	; (80033a8 <HAL_UART_MspInit+0xfc>)
 8003366:	f000 fbe7 	bl	8003b38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800336a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800336e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003372:	2302      	movs	r3, #2
 8003374:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003378:	2300      	movs	r3, #0
 800337a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800337e:	2303      	movs	r3, #3
 8003380:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003384:	2307      	movs	r3, #7
 8003386:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800338a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800338e:	4619      	mov	r1, r3
 8003390:	4806      	ldr	r0, [pc, #24]	; (80033ac <HAL_UART_MspInit+0x100>)
 8003392:	f000 fbd1 	bl	8003b38 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003396:	bf00      	nop
 8003398:	37b0      	adds	r7, #176	; 0xb0
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}
 800339e:	bf00      	nop
 80033a0:	40011000 	.word	0x40011000
 80033a4:	40023800 	.word	0x40023800
 80033a8:	40020400 	.word	0x40020400
 80033ac:	40020000 	.word	0x40020000

080033b0 <ReceiveUartMessage>:
}

/* USER CODE BEGIN 1 */

HAL_StatusTypeDef ReceiveUartMessage(UART_HandleTypeDef *huart, uint8_t *buffer, uint16_t size)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b086      	sub	sp, #24
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	60f8      	str	r0, [r7, #12]
 80033b8:	60b9      	str	r1, [r7, #8]
 80033ba:	4613      	mov	r3, r2
 80033bc:	80fb      	strh	r3, [r7, #6]
    uint8_t receivedByte;
    uint16_t rxBufferIndex = 0;
 80033be:	2300      	movs	r3, #0
 80033c0:	82fb      	strh	r3, [r7, #22]
    while(1)
    {
        if(HAL_UART_Receive(huart, &receivedByte, 1, 1000) == HAL_OK)
 80033c2:	f107 0115 	add.w	r1, r7, #21
 80033c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80033ca:	2201      	movs	r2, #1
 80033cc:	68f8      	ldr	r0, [r7, #12]
 80033ce:	f006 fc68 	bl	8009ca2 <HAL_UART_Receive>
 80033d2:	4603      	mov	r3, r0
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d1f4      	bne.n	80033c2 <ReceiveUartMessage+0x12>
        {
            if(receivedByte == '\n') // 종료 문자 감지
 80033d8:	7d7b      	ldrb	r3, [r7, #21]
 80033da:	2b0a      	cmp	r3, #10
 80033dc:	d106      	bne.n	80033ec <ReceiveUartMessage+0x3c>
            {
                buffer[rxBufferIndex] = '\0'; // 문자열의 끝을 표시
 80033de:	8afb      	ldrh	r3, [r7, #22]
 80033e0:	68ba      	ldr	r2, [r7, #8]
 80033e2:	4413      	add	r3, r2
 80033e4:	2200      	movs	r2, #0
 80033e6:	701a      	strb	r2, [r3, #0]
                return HAL_OK;
 80033e8:	2300      	movs	r3, #0
 80033ea:	e012      	b.n	8003412 <ReceiveUartMessage+0x62>
            }
            else
            {
                buffer[rxBufferIndex] = receivedByte; // 문자 저장
 80033ec:	8afb      	ldrh	r3, [r7, #22]
 80033ee:	68ba      	ldr	r2, [r7, #8]
 80033f0:	4413      	add	r3, r2
 80033f2:	7d7a      	ldrb	r2, [r7, #21]
 80033f4:	701a      	strb	r2, [r3, #0]
                rxBufferIndex++;
 80033f6:	8afb      	ldrh	r3, [r7, #22]
 80033f8:	3301      	adds	r3, #1
 80033fa:	82fb      	strh	r3, [r7, #22]
                if(rxBufferIndex >= size) // 버퍼 초과 방지
 80033fc:	8afa      	ldrh	r2, [r7, #22]
 80033fe:	88fb      	ldrh	r3, [r7, #6]
 8003400:	429a      	cmp	r2, r3
 8003402:	d3de      	bcc.n	80033c2 <ReceiveUartMessage+0x12>
                {
                    buffer[rxBufferIndex - 1] = '\0'; // 문자열의 끝을 표시
 8003404:	8afb      	ldrh	r3, [r7, #22]
 8003406:	3b01      	subs	r3, #1
 8003408:	68ba      	ldr	r2, [r7, #8]
 800340a:	4413      	add	r3, r2
 800340c:	2200      	movs	r2, #0
 800340e:	701a      	strb	r2, [r3, #0]
                    return HAL_ERROR;
 8003410:	2301      	movs	r3, #1
                }
            }
        }
    }
}
 8003412:	4618      	mov	r0, r3
 8003414:	3718      	adds	r7, #24
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}
	...

0800341c <startMsg>:

void startMsg(){
 800341c:	b580      	push	{r7, lr}
 800341e:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "--------------------------------------------------------------\n"), 100);
 8003420:	4937      	ldr	r1, [pc, #220]	; (8003500 <startMsg+0xe4>)
 8003422:	4838      	ldr	r0, [pc, #224]	; (8003504 <startMsg+0xe8>)
 8003424:	f00d fd24 	bl	8010e70 <siprintf>
 8003428:	4603      	mov	r3, r0
 800342a:	b29a      	uxth	r2, r3
 800342c:	2364      	movs	r3, #100	; 0x64
 800342e:	4935      	ldr	r1, [pc, #212]	; (8003504 <startMsg+0xe8>)
 8003430:	4835      	ldr	r0, [pc, #212]	; (8003508 <startMsg+0xec>)
 8003432:	f006 fbb3 	bl	8009b9c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "--------------------------------------------------------------\n"), 100);
 8003436:	4932      	ldr	r1, [pc, #200]	; (8003500 <startMsg+0xe4>)
 8003438:	4832      	ldr	r0, [pc, #200]	; (8003504 <startMsg+0xe8>)
 800343a:	f00d fd19 	bl	8010e70 <siprintf>
 800343e:	4603      	mov	r3, r0
 8003440:	b29a      	uxth	r2, r3
 8003442:	2364      	movs	r3, #100	; 0x64
 8003444:	492f      	ldr	r1, [pc, #188]	; (8003504 <startMsg+0xe8>)
 8003446:	4830      	ldr	r0, [pc, #192]	; (8003508 <startMsg+0xec>)
 8003448:	f006 fba8 	bl	8009b9c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "----- Auto Data Logging Device for TACTS made by JaeHyeong----\n"), 100);
 800344c:	492f      	ldr	r1, [pc, #188]	; (800350c <startMsg+0xf0>)
 800344e:	482d      	ldr	r0, [pc, #180]	; (8003504 <startMsg+0xe8>)
 8003450:	f00d fd0e 	bl	8010e70 <siprintf>
 8003454:	4603      	mov	r3, r0
 8003456:	b29a      	uxth	r2, r3
 8003458:	2364      	movs	r3, #100	; 0x64
 800345a:	492a      	ldr	r1, [pc, #168]	; (8003504 <startMsg+0xe8>)
 800345c:	482a      	ldr	r0, [pc, #168]	; (8003508 <startMsg+0xec>)
 800345e:	f006 fb9d 	bl	8009b9c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "-----------rev XX : Rotaing Revolution Motor (Deg)------------\n"), 100);
 8003462:	492b      	ldr	r1, [pc, #172]	; (8003510 <startMsg+0xf4>)
 8003464:	4827      	ldr	r0, [pc, #156]	; (8003504 <startMsg+0xe8>)
 8003466:	f00d fd03 	bl	8010e70 <siprintf>
 800346a:	4603      	mov	r3, r0
 800346c:	b29a      	uxth	r2, r3
 800346e:	2364      	movs	r3, #100	; 0x64
 8003470:	4924      	ldr	r1, [pc, #144]	; (8003504 <startMsg+0xe8>)
 8003472:	4825      	ldr	r0, [pc, #148]	; (8003508 <startMsg+0xec>)
 8003474:	f006 fb92 	bl	8009b9c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "-----------lin XX : Moving Linear Motor (mm)------------------\n"), 100);
 8003478:	4926      	ldr	r1, [pc, #152]	; (8003514 <startMsg+0xf8>)
 800347a:	4822      	ldr	r0, [pc, #136]	; (8003504 <startMsg+0xe8>)
 800347c:	f00d fcf8 	bl	8010e70 <siprintf>
 8003480:	4603      	mov	r3, r0
 8003482:	b29a      	uxth	r2, r3
 8003484:	2364      	movs	r3, #100	; 0x64
 8003486:	491f      	ldr	r1, [pc, #124]	; (8003504 <startMsg+0xe8>)
 8003488:	481f      	ldr	r0, [pc, #124]	; (8003508 <startMsg+0xec>)
 800348a:	f006 fb87 	bl	8009b9c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "-----------servo XX : Poking XX * 0.8 (mm)--------------------\n"), 100);
 800348e:	4922      	ldr	r1, [pc, #136]	; (8003518 <startMsg+0xfc>)
 8003490:	481c      	ldr	r0, [pc, #112]	; (8003504 <startMsg+0xe8>)
 8003492:	f00d fced 	bl	8010e70 <siprintf>
 8003496:	4603      	mov	r3, r0
 8003498:	b29a      	uxth	r2, r3
 800349a:	2364      	movs	r3, #100	; 0x64
 800349c:	4919      	ldr	r1, [pc, #100]	; (8003504 <startMsg+0xe8>)
 800349e:	481a      	ldr	r0, [pc, #104]	; (8003508 <startMsg+0xec>)
 80034a0:	f006 fb7c 	bl	8009b9c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "-----------auto : Poking point and data logging---------------\n"), 100);
 80034a4:	491d      	ldr	r1, [pc, #116]	; (800351c <startMsg+0x100>)
 80034a6:	4817      	ldr	r0, [pc, #92]	; (8003504 <startMsg+0xe8>)
 80034a8:	f00d fce2 	bl	8010e70 <siprintf>
 80034ac:	4603      	mov	r3, r0
 80034ae:	b29a      	uxth	r2, r3
 80034b0:	2364      	movs	r3, #100	; 0x64
 80034b2:	4914      	ldr	r1, [pc, #80]	; (8003504 <startMsg+0xe8>)
 80034b4:	4814      	ldr	r0, [pc, #80]	; (8003508 <startMsg+0xec>)
 80034b6:	f006 fb71 	bl	8009b9c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "-------------------------testbed_axial------------------------\n"), 100);
 80034ba:	4919      	ldr	r1, [pc, #100]	; (8003520 <startMsg+0x104>)
 80034bc:	4811      	ldr	r0, [pc, #68]	; (8003504 <startMsg+0xe8>)
 80034be:	f00d fcd7 	bl	8010e70 <siprintf>
 80034c2:	4603      	mov	r3, r0
 80034c4:	b29a      	uxth	r2, r3
 80034c6:	2364      	movs	r3, #100	; 0x64
 80034c8:	490e      	ldr	r1, [pc, #56]	; (8003504 <startMsg+0xe8>)
 80034ca:	480f      	ldr	r0, [pc, #60]	; (8003508 <startMsg+0xec>)
 80034cc:	f006 fb66 	bl	8009b9c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "--------------------------------------------------------------\n"), 100);
 80034d0:	490b      	ldr	r1, [pc, #44]	; (8003500 <startMsg+0xe4>)
 80034d2:	480c      	ldr	r0, [pc, #48]	; (8003504 <startMsg+0xe8>)
 80034d4:	f00d fccc 	bl	8010e70 <siprintf>
 80034d8:	4603      	mov	r3, r0
 80034da:	b29a      	uxth	r2, r3
 80034dc:	2364      	movs	r3, #100	; 0x64
 80034de:	4909      	ldr	r1, [pc, #36]	; (8003504 <startMsg+0xe8>)
 80034e0:	4809      	ldr	r0, [pc, #36]	; (8003508 <startMsg+0xec>)
 80034e2:	f006 fb5b 	bl	8009b9c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "--------------------------------------------------------------\n"), 100);
 80034e6:	4906      	ldr	r1, [pc, #24]	; (8003500 <startMsg+0xe4>)
 80034e8:	4806      	ldr	r0, [pc, #24]	; (8003504 <startMsg+0xe8>)
 80034ea:	f00d fcc1 	bl	8010e70 <siprintf>
 80034ee:	4603      	mov	r3, r0
 80034f0:	b29a      	uxth	r2, r3
 80034f2:	2364      	movs	r3, #100	; 0x64
 80034f4:	4903      	ldr	r1, [pc, #12]	; (8003504 <startMsg+0xe8>)
 80034f6:	4804      	ldr	r0, [pc, #16]	; (8003508 <startMsg+0xec>)
 80034f8:	f006 fb50 	bl	8009b9c <HAL_UART_Transmit>
}
 80034fc:	bf00      	nop
 80034fe:	bd80      	pop	{r7, pc}
 8003500:	080164f4 	.word	0x080164f4
 8003504:	200079f0 	.word	0x200079f0
 8003508:	20007a74 	.word	0x20007a74
 800350c:	08016534 	.word	0x08016534
 8003510:	08016574 	.word	0x08016574
 8003514:	080165b4 	.word	0x080165b4
 8003518:	080165f4 	.word	0x080165f4
 800351c:	08016634 	.word	0x08016634
 8003520:	08016674 	.word	0x08016674

08003524 <ResetAllDevices>:
#elif NUM_SENSOR == 48
  uint8_t tca_addr[8] = {0x70,0x71,0x72,0x73,0x74,0x75,0x76,0x77};  // 4 line
  uint8_t tcaLength = 8;
#endif

void ResetAllDevices() {
 8003524:	b580      	push	{r7, lr}
 8003526:	b084      	sub	sp, #16
 8003528:	af02      	add	r7, sp, #8
  for (int j = 0; j < tcaLength; ++j) {
 800352a:	2300      	movs	r3, #0
 800352c:	607b      	str	r3, [r7, #4]
 800352e:	e011      	b.n	8003554 <ResetAllDevices+0x30>
	  HAL_I2C_Master_Transmit(&hi2c1, tca_addr[j] << 1, &tca_ch_reset, 1, 1000);
 8003530:	4a0e      	ldr	r2, [pc, #56]	; (800356c <ResetAllDevices+0x48>)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	4413      	add	r3, r2
 8003536:	781b      	ldrb	r3, [r3, #0]
 8003538:	b29b      	uxth	r3, r3
 800353a:	005b      	lsls	r3, r3, #1
 800353c:	b299      	uxth	r1, r3
 800353e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003542:	9300      	str	r3, [sp, #0]
 8003544:	2301      	movs	r3, #1
 8003546:	4a0a      	ldr	r2, [pc, #40]	; (8003570 <ResetAllDevices+0x4c>)
 8003548:	480a      	ldr	r0, [pc, #40]	; (8003574 <ResetAllDevices+0x50>)
 800354a:	f000 fff7 	bl	800453c <HAL_I2C_Master_Transmit>
  for (int j = 0; j < tcaLength; ++j) {
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	3301      	adds	r3, #1
 8003552:	607b      	str	r3, [r7, #4]
 8003554:	4b08      	ldr	r3, [pc, #32]	; (8003578 <ResetAllDevices+0x54>)
 8003556:	781b      	ldrb	r3, [r3, #0]
 8003558:	461a      	mov	r2, r3
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	4293      	cmp	r3, r2
 800355e:	dbe7      	blt.n	8003530 <ResetAllDevices+0xc>
  }
}
 8003560:	bf00      	nop
 8003562:	bf00      	nop
 8003564:	3708      	adds	r7, #8
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}
 800356a:	bf00      	nop
 800356c:	200000c0 	.word	0x200000c0
 8003570:	2000a144 	.word	0x2000a144
 8003574:	20007720 	.word	0x20007720
 8003578:	200000c4 	.word	0x200000c4

0800357c <ResetDevicesExcept>:

void ResetDevicesExcept(uint8_t active_device) {
 800357c:	b580      	push	{r7, lr}
 800357e:	b086      	sub	sp, #24
 8003580:	af02      	add	r7, sp, #8
 8003582:	4603      	mov	r3, r0
 8003584:	71fb      	strb	r3, [r7, #7]
    for (int j = 0; j < tcaLength; ++j) {
 8003586:	2300      	movs	r3, #0
 8003588:	60fb      	str	r3, [r7, #12]
 800358a:	e015      	b.n	80035b8 <ResetDevicesExcept+0x3c>
        if (j != active_device) {
 800358c:	79fb      	ldrb	r3, [r7, #7]
 800358e:	68fa      	ldr	r2, [r7, #12]
 8003590:	429a      	cmp	r2, r3
 8003592:	d00e      	beq.n	80035b2 <ResetDevicesExcept+0x36>
            HAL_I2C_Master_Transmit(&hi2c1, tca_addr[j] << 1, &tca_ch_reset, 1, 1000);
 8003594:	4a0e      	ldr	r2, [pc, #56]	; (80035d0 <ResetDevicesExcept+0x54>)
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	4413      	add	r3, r2
 800359a:	781b      	ldrb	r3, [r3, #0]
 800359c:	b29b      	uxth	r3, r3
 800359e:	005b      	lsls	r3, r3, #1
 80035a0:	b299      	uxth	r1, r3
 80035a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80035a6:	9300      	str	r3, [sp, #0]
 80035a8:	2301      	movs	r3, #1
 80035aa:	4a0a      	ldr	r2, [pc, #40]	; (80035d4 <ResetDevicesExcept+0x58>)
 80035ac:	480a      	ldr	r0, [pc, #40]	; (80035d8 <ResetDevicesExcept+0x5c>)
 80035ae:	f000 ffc5 	bl	800453c <HAL_I2C_Master_Transmit>
    for (int j = 0; j < tcaLength; ++j) {
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	3301      	adds	r3, #1
 80035b6:	60fb      	str	r3, [r7, #12]
 80035b8:	4b08      	ldr	r3, [pc, #32]	; (80035dc <ResetDevicesExcept+0x60>)
 80035ba:	781b      	ldrb	r3, [r3, #0]
 80035bc:	461a      	mov	r2, r3
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	4293      	cmp	r3, r2
 80035c2:	dbe3      	blt.n	800358c <ResetDevicesExcept+0x10>
        }
    }
}
 80035c4:	bf00      	nop
 80035c6:	bf00      	nop
 80035c8:	3710      	adds	r7, #16
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}
 80035ce:	bf00      	nop
 80035d0:	200000c0 	.word	0x200000c0
 80035d4:	2000a144 	.word	0x2000a144
 80035d8:	20007720 	.word	0x20007720
 80035dc:	200000c4 	.word	0x200000c4

080035e0 <setActiveTcaChannel>:

void setActiveTcaChannel(uint8_t active_device, uint8_t channel){
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b084      	sub	sp, #16
 80035e4:	af02      	add	r7, sp, #8
 80035e6:	4603      	mov	r3, r0
 80035e8:	460a      	mov	r2, r1
 80035ea:	71fb      	strb	r3, [r7, #7]
 80035ec:	4613      	mov	r3, r2
 80035ee:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Master_Transmit(&hi2c1, tca_addr[active_device] << 1, &tca_ch[channel], 1, 1000);
 80035f0:	79fb      	ldrb	r3, [r7, #7]
 80035f2:	4a09      	ldr	r2, [pc, #36]	; (8003618 <setActiveTcaChannel+0x38>)
 80035f4:	5cd3      	ldrb	r3, [r2, r3]
 80035f6:	b29b      	uxth	r3, r3
 80035f8:	005b      	lsls	r3, r3, #1
 80035fa:	b299      	uxth	r1, r3
 80035fc:	79bb      	ldrb	r3, [r7, #6]
 80035fe:	4a07      	ldr	r2, [pc, #28]	; (800361c <setActiveTcaChannel+0x3c>)
 8003600:	441a      	add	r2, r3
 8003602:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003606:	9300      	str	r3, [sp, #0]
 8003608:	2301      	movs	r3, #1
 800360a:	4805      	ldr	r0, [pc, #20]	; (8003620 <setActiveTcaChannel+0x40>)
 800360c:	f000 ff96 	bl	800453c <HAL_I2C_Master_Transmit>
}
 8003610:	bf00      	nop
 8003612:	3708      	adds	r7, #8
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}
 8003618:	200000c0 	.word	0x200000c0
 800361c:	200000b8 	.word	0x200000b8
 8003620:	20007720 	.word	0x20007720

08003624 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
 ldr   sp, =_estack      /* set stack pointer */
 8003624:	f8df d034 	ldr.w	sp, [pc, #52]	; 800365c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003628:	480d      	ldr	r0, [pc, #52]	; (8003660 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800362a:	490e      	ldr	r1, [pc, #56]	; (8003664 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800362c:	4a0e      	ldr	r2, [pc, #56]	; (8003668 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800362e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003630:	e002      	b.n	8003638 <LoopCopyDataInit>

08003632 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003632:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003634:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003636:	3304      	adds	r3, #4

08003638 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003638:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800363a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800363c:	d3f9      	bcc.n	8003632 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800363e:	4a0b      	ldr	r2, [pc, #44]	; (800366c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003640:	4c0b      	ldr	r4, [pc, #44]	; (8003670 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003642:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003644:	e001      	b.n	800364a <LoopFillZerobss>

08003646 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003646:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003648:	3204      	adds	r2, #4

0800364a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800364a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800364c:	d3fb      	bcc.n	8003646 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800364e:	f7ff fcd7 	bl	8003000 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003652:	f00c fd53 	bl	80100fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003656:	f7ff f941 	bl	80028dc <main>
  bx  lr    
 800365a:	4770      	bx	lr
 ldr   sp, =_estack      /* set stack pointer */
 800365c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8003660:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003664:	20000560 	.word	0x20000560
  ldr r2, =_sidata
 8003668:	08016e40 	.word	0x08016e40
  ldr r2, =_sbss
 800366c:	20000560 	.word	0x20000560
  ldr r4, =_ebss
 8003670:	2000a19c 	.word	0x2000a19c

08003674 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003674:	e7fe      	b.n	8003674 <ADC_IRQHandler>

08003676 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003676:	b580      	push	{r7, lr}
 8003678:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800367a:	2003      	movs	r0, #3
 800367c:	f000 f94c 	bl	8003918 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003680:	200f      	movs	r0, #15
 8003682:	f000 f805 	bl	8003690 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003686:	f7ff fb65 	bl	8002d54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800368a:	2300      	movs	r3, #0
}
 800368c:	4618      	mov	r0, r3
 800368e:	bd80      	pop	{r7, pc}

08003690 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b082      	sub	sp, #8
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003698:	4b12      	ldr	r3, [pc, #72]	; (80036e4 <HAL_InitTick+0x54>)
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	4b12      	ldr	r3, [pc, #72]	; (80036e8 <HAL_InitTick+0x58>)
 800369e:	781b      	ldrb	r3, [r3, #0]
 80036a0:	4619      	mov	r1, r3
 80036a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80036a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80036aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80036ae:	4618      	mov	r0, r3
 80036b0:	f000 f996 	bl	80039e0 <HAL_SYSTICK_Config>
 80036b4:	4603      	mov	r3, r0
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d001      	beq.n	80036be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	e00e      	b.n	80036dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2b0f      	cmp	r3, #15
 80036c2:	d80a      	bhi.n	80036da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80036c4:	2200      	movs	r2, #0
 80036c6:	6879      	ldr	r1, [r7, #4]
 80036c8:	f04f 30ff 	mov.w	r0, #4294967295
 80036cc:	f000 f944 	bl	8003958 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80036d0:	4a06      	ldr	r2, [pc, #24]	; (80036ec <HAL_InitTick+0x5c>)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80036d6:	2300      	movs	r3, #0
 80036d8:	e000      	b.n	80036dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80036da:	2301      	movs	r3, #1
}
 80036dc:	4618      	mov	r0, r3
 80036de:	3708      	adds	r7, #8
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}
 80036e4:	2000000c 	.word	0x2000000c
 80036e8:	200000cc 	.word	0x200000cc
 80036ec:	200000c8 	.word	0x200000c8

080036f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80036f0:	b480      	push	{r7}
 80036f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80036f4:	4b06      	ldr	r3, [pc, #24]	; (8003710 <HAL_IncTick+0x20>)
 80036f6:	781b      	ldrb	r3, [r3, #0]
 80036f8:	461a      	mov	r2, r3
 80036fa:	4b06      	ldr	r3, [pc, #24]	; (8003714 <HAL_IncTick+0x24>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4413      	add	r3, r2
 8003700:	4a04      	ldr	r2, [pc, #16]	; (8003714 <HAL_IncTick+0x24>)
 8003702:	6013      	str	r3, [r2, #0]
}
 8003704:	bf00      	nop
 8003706:	46bd      	mov	sp, r7
 8003708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370c:	4770      	bx	lr
 800370e:	bf00      	nop
 8003710:	200000cc 	.word	0x200000cc
 8003714:	2000a148 	.word	0x2000a148

08003718 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003718:	b480      	push	{r7}
 800371a:	af00      	add	r7, sp, #0
  return uwTick;
 800371c:	4b03      	ldr	r3, [pc, #12]	; (800372c <HAL_GetTick+0x14>)
 800371e:	681b      	ldr	r3, [r3, #0]
}
 8003720:	4618      	mov	r0, r3
 8003722:	46bd      	mov	sp, r7
 8003724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003728:	4770      	bx	lr
 800372a:	bf00      	nop
 800372c:	2000a148 	.word	0x2000a148

08003730 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b084      	sub	sp, #16
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003738:	f7ff ffee 	bl	8003718 <HAL_GetTick>
 800373c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003748:	d005      	beq.n	8003756 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800374a:	4b0a      	ldr	r3, [pc, #40]	; (8003774 <HAL_Delay+0x44>)
 800374c:	781b      	ldrb	r3, [r3, #0]
 800374e:	461a      	mov	r2, r3
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	4413      	add	r3, r2
 8003754:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003756:	bf00      	nop
 8003758:	f7ff ffde 	bl	8003718 <HAL_GetTick>
 800375c:	4602      	mov	r2, r0
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	1ad3      	subs	r3, r2, r3
 8003762:	68fa      	ldr	r2, [r7, #12]
 8003764:	429a      	cmp	r2, r3
 8003766:	d8f7      	bhi.n	8003758 <HAL_Delay+0x28>
  {
  }
}
 8003768:	bf00      	nop
 800376a:	bf00      	nop
 800376c:	3710      	adds	r7, #16
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}
 8003772:	bf00      	nop
 8003774:	200000cc 	.word	0x200000cc

08003778 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003778:	b480      	push	{r7}
 800377a:	b085      	sub	sp, #20
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	f003 0307 	and.w	r3, r3, #7
 8003786:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003788:	4b0b      	ldr	r3, [pc, #44]	; (80037b8 <__NVIC_SetPriorityGrouping+0x40>)
 800378a:	68db      	ldr	r3, [r3, #12]
 800378c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800378e:	68ba      	ldr	r2, [r7, #8]
 8003790:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003794:	4013      	ands	r3, r2
 8003796:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80037a0:	4b06      	ldr	r3, [pc, #24]	; (80037bc <__NVIC_SetPriorityGrouping+0x44>)
 80037a2:	4313      	orrs	r3, r2
 80037a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80037a6:	4a04      	ldr	r2, [pc, #16]	; (80037b8 <__NVIC_SetPriorityGrouping+0x40>)
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	60d3      	str	r3, [r2, #12]
}
 80037ac:	bf00      	nop
 80037ae:	3714      	adds	r7, #20
 80037b0:	46bd      	mov	sp, r7
 80037b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b6:	4770      	bx	lr
 80037b8:	e000ed00 	.word	0xe000ed00
 80037bc:	05fa0000 	.word	0x05fa0000

080037c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80037c0:	b480      	push	{r7}
 80037c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80037c4:	4b04      	ldr	r3, [pc, #16]	; (80037d8 <__NVIC_GetPriorityGrouping+0x18>)
 80037c6:	68db      	ldr	r3, [r3, #12]
 80037c8:	0a1b      	lsrs	r3, r3, #8
 80037ca:	f003 0307 	and.w	r3, r3, #7
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	46bd      	mov	sp, r7
 80037d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d6:	4770      	bx	lr
 80037d8:	e000ed00 	.word	0xe000ed00

080037dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037dc:	b480      	push	{r7}
 80037de:	b083      	sub	sp, #12
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	4603      	mov	r3, r0
 80037e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	db0b      	blt.n	8003806 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80037ee:	79fb      	ldrb	r3, [r7, #7]
 80037f0:	f003 021f 	and.w	r2, r3, #31
 80037f4:	4907      	ldr	r1, [pc, #28]	; (8003814 <__NVIC_EnableIRQ+0x38>)
 80037f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037fa:	095b      	lsrs	r3, r3, #5
 80037fc:	2001      	movs	r0, #1
 80037fe:	fa00 f202 	lsl.w	r2, r0, r2
 8003802:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003806:	bf00      	nop
 8003808:	370c      	adds	r7, #12
 800380a:	46bd      	mov	sp, r7
 800380c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003810:	4770      	bx	lr
 8003812:	bf00      	nop
 8003814:	e000e100 	.word	0xe000e100

08003818 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003818:	b480      	push	{r7}
 800381a:	b083      	sub	sp, #12
 800381c:	af00      	add	r7, sp, #0
 800381e:	4603      	mov	r3, r0
 8003820:	6039      	str	r1, [r7, #0]
 8003822:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003824:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003828:	2b00      	cmp	r3, #0
 800382a:	db0a      	blt.n	8003842 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	b2da      	uxtb	r2, r3
 8003830:	490c      	ldr	r1, [pc, #48]	; (8003864 <__NVIC_SetPriority+0x4c>)
 8003832:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003836:	0112      	lsls	r2, r2, #4
 8003838:	b2d2      	uxtb	r2, r2
 800383a:	440b      	add	r3, r1
 800383c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003840:	e00a      	b.n	8003858 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	b2da      	uxtb	r2, r3
 8003846:	4908      	ldr	r1, [pc, #32]	; (8003868 <__NVIC_SetPriority+0x50>)
 8003848:	79fb      	ldrb	r3, [r7, #7]
 800384a:	f003 030f 	and.w	r3, r3, #15
 800384e:	3b04      	subs	r3, #4
 8003850:	0112      	lsls	r2, r2, #4
 8003852:	b2d2      	uxtb	r2, r2
 8003854:	440b      	add	r3, r1
 8003856:	761a      	strb	r2, [r3, #24]
}
 8003858:	bf00      	nop
 800385a:	370c      	adds	r7, #12
 800385c:	46bd      	mov	sp, r7
 800385e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003862:	4770      	bx	lr
 8003864:	e000e100 	.word	0xe000e100
 8003868:	e000ed00 	.word	0xe000ed00

0800386c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800386c:	b480      	push	{r7}
 800386e:	b089      	sub	sp, #36	; 0x24
 8003870:	af00      	add	r7, sp, #0
 8003872:	60f8      	str	r0, [r7, #12]
 8003874:	60b9      	str	r1, [r7, #8]
 8003876:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	f003 0307 	and.w	r3, r3, #7
 800387e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003880:	69fb      	ldr	r3, [r7, #28]
 8003882:	f1c3 0307 	rsb	r3, r3, #7
 8003886:	2b04      	cmp	r3, #4
 8003888:	bf28      	it	cs
 800388a:	2304      	movcs	r3, #4
 800388c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800388e:	69fb      	ldr	r3, [r7, #28]
 8003890:	3304      	adds	r3, #4
 8003892:	2b06      	cmp	r3, #6
 8003894:	d902      	bls.n	800389c <NVIC_EncodePriority+0x30>
 8003896:	69fb      	ldr	r3, [r7, #28]
 8003898:	3b03      	subs	r3, #3
 800389a:	e000      	b.n	800389e <NVIC_EncodePriority+0x32>
 800389c:	2300      	movs	r3, #0
 800389e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038a0:	f04f 32ff 	mov.w	r2, #4294967295
 80038a4:	69bb      	ldr	r3, [r7, #24]
 80038a6:	fa02 f303 	lsl.w	r3, r2, r3
 80038aa:	43da      	mvns	r2, r3
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	401a      	ands	r2, r3
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80038b4:	f04f 31ff 	mov.w	r1, #4294967295
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	fa01 f303 	lsl.w	r3, r1, r3
 80038be:	43d9      	mvns	r1, r3
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038c4:	4313      	orrs	r3, r2
         );
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	3724      	adds	r7, #36	; 0x24
 80038ca:	46bd      	mov	sp, r7
 80038cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d0:	4770      	bx	lr
	...

080038d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b082      	sub	sp, #8
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	3b01      	subs	r3, #1
 80038e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80038e4:	d301      	bcc.n	80038ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80038e6:	2301      	movs	r3, #1
 80038e8:	e00f      	b.n	800390a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80038ea:	4a0a      	ldr	r2, [pc, #40]	; (8003914 <SysTick_Config+0x40>)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	3b01      	subs	r3, #1
 80038f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80038f2:	210f      	movs	r1, #15
 80038f4:	f04f 30ff 	mov.w	r0, #4294967295
 80038f8:	f7ff ff8e 	bl	8003818 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80038fc:	4b05      	ldr	r3, [pc, #20]	; (8003914 <SysTick_Config+0x40>)
 80038fe:	2200      	movs	r2, #0
 8003900:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003902:	4b04      	ldr	r3, [pc, #16]	; (8003914 <SysTick_Config+0x40>)
 8003904:	2207      	movs	r2, #7
 8003906:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003908:	2300      	movs	r3, #0
}
 800390a:	4618      	mov	r0, r3
 800390c:	3708      	adds	r7, #8
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}
 8003912:	bf00      	nop
 8003914:	e000e010 	.word	0xe000e010

08003918 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b082      	sub	sp, #8
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2b07      	cmp	r3, #7
 8003924:	d00f      	beq.n	8003946 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2b06      	cmp	r3, #6
 800392a:	d00c      	beq.n	8003946 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2b05      	cmp	r3, #5
 8003930:	d009      	beq.n	8003946 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2b04      	cmp	r3, #4
 8003936:	d006      	beq.n	8003946 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2b03      	cmp	r3, #3
 800393c:	d003      	beq.n	8003946 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800393e:	2191      	movs	r1, #145	; 0x91
 8003940:	4804      	ldr	r0, [pc, #16]	; (8003954 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8003942:	f7ff f8b6 	bl	8002ab2 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	f7ff ff16 	bl	8003778 <__NVIC_SetPriorityGrouping>
}
 800394c:	bf00      	nop
 800394e:	3708      	adds	r7, #8
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}
 8003954:	080166b4 	.word	0x080166b4

08003958 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003958:	b580      	push	{r7, lr}
 800395a:	b086      	sub	sp, #24
 800395c:	af00      	add	r7, sp, #0
 800395e:	4603      	mov	r3, r0
 8003960:	60b9      	str	r1, [r7, #8]
 8003962:	607a      	str	r2, [r7, #4]
 8003964:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003966:	2300      	movs	r3, #0
 8003968:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2b0f      	cmp	r3, #15
 800396e:	d903      	bls.n	8003978 <HAL_NVIC_SetPriority+0x20>
 8003970:	21a9      	movs	r1, #169	; 0xa9
 8003972:	480e      	ldr	r0, [pc, #56]	; (80039ac <HAL_NVIC_SetPriority+0x54>)
 8003974:	f7ff f89d 	bl	8002ab2 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	2b0f      	cmp	r3, #15
 800397c:	d903      	bls.n	8003986 <HAL_NVIC_SetPriority+0x2e>
 800397e:	21aa      	movs	r1, #170	; 0xaa
 8003980:	480a      	ldr	r0, [pc, #40]	; (80039ac <HAL_NVIC_SetPriority+0x54>)
 8003982:	f7ff f896 	bl	8002ab2 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003986:	f7ff ff1b 	bl	80037c0 <__NVIC_GetPriorityGrouping>
 800398a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800398c:	687a      	ldr	r2, [r7, #4]
 800398e:	68b9      	ldr	r1, [r7, #8]
 8003990:	6978      	ldr	r0, [r7, #20]
 8003992:	f7ff ff6b 	bl	800386c <NVIC_EncodePriority>
 8003996:	4602      	mov	r2, r0
 8003998:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800399c:	4611      	mov	r1, r2
 800399e:	4618      	mov	r0, r3
 80039a0:	f7ff ff3a 	bl	8003818 <__NVIC_SetPriority>
}
 80039a4:	bf00      	nop
 80039a6:	3718      	adds	r7, #24
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}
 80039ac:	080166b4 	.word	0x080166b4

080039b0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b082      	sub	sp, #8
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	4603      	mov	r3, r0
 80039b8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 80039ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	da03      	bge.n	80039ca <HAL_NVIC_EnableIRQ+0x1a>
 80039c2:	21bd      	movs	r1, #189	; 0xbd
 80039c4:	4805      	ldr	r0, [pc, #20]	; (80039dc <HAL_NVIC_EnableIRQ+0x2c>)
 80039c6:	f7ff f874 	bl	8002ab2 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80039ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039ce:	4618      	mov	r0, r3
 80039d0:	f7ff ff04 	bl	80037dc <__NVIC_EnableIRQ>
}
 80039d4:	bf00      	nop
 80039d6:	3708      	adds	r7, #8
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}
 80039dc:	080166b4 	.word	0x080166b4

080039e0 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b082      	sub	sp, #8
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80039e8:	6878      	ldr	r0, [r7, #4]
 80039ea:	f7ff ff73 	bl	80038d4 <SysTick_Config>
 80039ee:	4603      	mov	r3, r0
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	3708      	adds	r7, #8
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}

080039f8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b084      	sub	sp, #16
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a04:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003a06:	f7ff fe87 	bl	8003718 <HAL_GetTick>
 8003a0a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a12:	b2db      	uxtb	r3, r3
 8003a14:	2b02      	cmp	r3, #2
 8003a16:	d008      	beq.n	8003a2a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2280      	movs	r2, #128	; 0x80
 8003a1c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2200      	movs	r2, #0
 8003a22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	e052      	b.n	8003ad0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f022 0216 	bic.w	r2, r2, #22
 8003a38:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	695a      	ldr	r2, [r3, #20]
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a48:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d103      	bne.n	8003a5a <HAL_DMA_Abort+0x62>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d007      	beq.n	8003a6a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	681a      	ldr	r2, [r3, #0]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f022 0208 	bic.w	r2, r2, #8
 8003a68:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	681a      	ldr	r2, [r3, #0]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f022 0201 	bic.w	r2, r2, #1
 8003a78:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a7a:	e013      	b.n	8003aa4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003a7c:	f7ff fe4c 	bl	8003718 <HAL_GetTick>
 8003a80:	4602      	mov	r2, r0
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	1ad3      	subs	r3, r2, r3
 8003a86:	2b05      	cmp	r3, #5
 8003a88:	d90c      	bls.n	8003aa4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2220      	movs	r2, #32
 8003a8e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2203      	movs	r2, #3
 8003a94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8003aa0:	2303      	movs	r3, #3
 8003aa2:	e015      	b.n	8003ad0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f003 0301 	and.w	r3, r3, #1
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d1e4      	bne.n	8003a7c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ab6:	223f      	movs	r2, #63	; 0x3f
 8003ab8:	409a      	lsls	r2, r3
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2201      	movs	r2, #1
 8003ac2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8003ace:	2300      	movs	r3, #0
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	3710      	adds	r7, #16
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd80      	pop	{r7, pc}

08003ad8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b083      	sub	sp, #12
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ae6:	b2db      	uxtb	r3, r3
 8003ae8:	2b02      	cmp	r3, #2
 8003aea:	d004      	beq.n	8003af6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2280      	movs	r2, #128	; 0x80
 8003af0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	e00c      	b.n	8003b10 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2205      	movs	r2, #5
 8003afa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	681a      	ldr	r2, [r3, #0]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f022 0201 	bic.w	r2, r2, #1
 8003b0c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003b0e:	2300      	movs	r3, #0
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	370c      	adds	r7, #12
 8003b14:	46bd      	mov	sp, r7
 8003b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1a:	4770      	bx	lr

08003b1c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b083      	sub	sp, #12
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b2a:	b2db      	uxtb	r3, r3
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	370c      	adds	r7, #12
 8003b30:	46bd      	mov	sp, r7
 8003b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b36:	4770      	bx	lr

08003b38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b088      	sub	sp, #32
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
 8003b40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003b42:	2300      	movs	r3, #0
 8003b44:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003b46:	2300      	movs	r3, #0
 8003b48:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	4a3a      	ldr	r2, [pc, #232]	; (8003c40 <HAL_GPIO_Init+0x108>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d02b      	beq.n	8003bb2 <HAL_GPIO_Init+0x7a>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	4a39      	ldr	r2, [pc, #228]	; (8003c44 <HAL_GPIO_Init+0x10c>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d027      	beq.n	8003bb2 <HAL_GPIO_Init+0x7a>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	4a38      	ldr	r2, [pc, #224]	; (8003c48 <HAL_GPIO_Init+0x110>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d023      	beq.n	8003bb2 <HAL_GPIO_Init+0x7a>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	4a37      	ldr	r2, [pc, #220]	; (8003c4c <HAL_GPIO_Init+0x114>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d01f      	beq.n	8003bb2 <HAL_GPIO_Init+0x7a>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	4a36      	ldr	r2, [pc, #216]	; (8003c50 <HAL_GPIO_Init+0x118>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d01b      	beq.n	8003bb2 <HAL_GPIO_Init+0x7a>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	4a35      	ldr	r2, [pc, #212]	; (8003c54 <HAL_GPIO_Init+0x11c>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d017      	beq.n	8003bb2 <HAL_GPIO_Init+0x7a>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	4a34      	ldr	r2, [pc, #208]	; (8003c58 <HAL_GPIO_Init+0x120>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d013      	beq.n	8003bb2 <HAL_GPIO_Init+0x7a>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	4a33      	ldr	r2, [pc, #204]	; (8003c5c <HAL_GPIO_Init+0x124>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d00f      	beq.n	8003bb2 <HAL_GPIO_Init+0x7a>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	4a32      	ldr	r2, [pc, #200]	; (8003c60 <HAL_GPIO_Init+0x128>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d00b      	beq.n	8003bb2 <HAL_GPIO_Init+0x7a>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	4a31      	ldr	r2, [pc, #196]	; (8003c64 <HAL_GPIO_Init+0x12c>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d007      	beq.n	8003bb2 <HAL_GPIO_Init+0x7a>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	4a30      	ldr	r2, [pc, #192]	; (8003c68 <HAL_GPIO_Init+0x130>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d003      	beq.n	8003bb2 <HAL_GPIO_Init+0x7a>
 8003baa:	21aa      	movs	r1, #170	; 0xaa
 8003bac:	482f      	ldr	r0, [pc, #188]	; (8003c6c <HAL_GPIO_Init+0x134>)
 8003bae:	f7fe ff80 	bl	8002ab2 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	b29b      	uxth	r3, r3
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d103      	bne.n	8003bc4 <HAL_GPIO_Init+0x8c>
 8003bbc:	21ab      	movs	r1, #171	; 0xab
 8003bbe:	482b      	ldr	r0, [pc, #172]	; (8003c6c <HAL_GPIO_Init+0x134>)
 8003bc0:	f7fe ff77 	bl	8002ab2 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d035      	beq.n	8003c38 <HAL_GPIO_Init+0x100>
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	2b01      	cmp	r3, #1
 8003bd2:	d031      	beq.n	8003c38 <HAL_GPIO_Init+0x100>
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	2b11      	cmp	r3, #17
 8003bda:	d02d      	beq.n	8003c38 <HAL_GPIO_Init+0x100>
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	2b02      	cmp	r3, #2
 8003be2:	d029      	beq.n	8003c38 <HAL_GPIO_Init+0x100>
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	2b12      	cmp	r3, #18
 8003bea:	d025      	beq.n	8003c38 <HAL_GPIO_Init+0x100>
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8003bf4:	d020      	beq.n	8003c38 <HAL_GPIO_Init+0x100>
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8003bfe:	d01b      	beq.n	8003c38 <HAL_GPIO_Init+0x100>
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 8003c08:	d016      	beq.n	8003c38 <HAL_GPIO_Init+0x100>
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 8003c12:	d011      	beq.n	8003c38 <HAL_GPIO_Init+0x100>
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 8003c1c:	d00c      	beq.n	8003c38 <HAL_GPIO_Init+0x100>
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 8003c26:	d007      	beq.n	8003c38 <HAL_GPIO_Init+0x100>
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	2b03      	cmp	r3, #3
 8003c2e:	d003      	beq.n	8003c38 <HAL_GPIO_Init+0x100>
 8003c30:	21ac      	movs	r1, #172	; 0xac
 8003c32:	480e      	ldr	r0, [pc, #56]	; (8003c6c <HAL_GPIO_Init+0x134>)
 8003c34:	f7fe ff3d 	bl	8002ab2 <assert_failed>

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003c38:	2300      	movs	r3, #0
 8003c3a:	61fb      	str	r3, [r7, #28]
 8003c3c:	e2c7      	b.n	80041ce <HAL_GPIO_Init+0x696>
 8003c3e:	bf00      	nop
 8003c40:	40020000 	.word	0x40020000
 8003c44:	40020400 	.word	0x40020400
 8003c48:	40020800 	.word	0x40020800
 8003c4c:	40020c00 	.word	0x40020c00
 8003c50:	40021000 	.word	0x40021000
 8003c54:	40021400 	.word	0x40021400
 8003c58:	40021800 	.word	0x40021800
 8003c5c:	40021c00 	.word	0x40021c00
 8003c60:	40022000 	.word	0x40022000
 8003c64:	40022400 	.word	0x40022400
 8003c68:	40022800 	.word	0x40022800
 8003c6c:	080166f0 	.word	0x080166f0
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003c70:	2201      	movs	r2, #1
 8003c72:	69fb      	ldr	r3, [r7, #28]
 8003c74:	fa02 f303 	lsl.w	r3, r2, r3
 8003c78:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	697a      	ldr	r2, [r7, #20]
 8003c80:	4013      	ands	r3, r2
 8003c82:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003c84:	693a      	ldr	r2, [r7, #16]
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	429a      	cmp	r2, r3
 8003c8a:	f040 829d 	bne.w	80041c8 <HAL_GPIO_Init+0x690>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	f003 0303 	and.w	r3, r3, #3
 8003c96:	2b01      	cmp	r3, #1
 8003c98:	d005      	beq.n	8003ca6 <HAL_GPIO_Init+0x16e>
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	f003 0303 	and.w	r3, r3, #3
 8003ca2:	2b02      	cmp	r3, #2
 8003ca4:	d144      	bne.n	8003d30 <HAL_GPIO_Init+0x1f8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	68db      	ldr	r3, [r3, #12]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d00f      	beq.n	8003cce <HAL_GPIO_Init+0x196>
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	68db      	ldr	r3, [r3, #12]
 8003cb2:	2b01      	cmp	r3, #1
 8003cb4:	d00b      	beq.n	8003cce <HAL_GPIO_Init+0x196>
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	68db      	ldr	r3, [r3, #12]
 8003cba:	2b02      	cmp	r3, #2
 8003cbc:	d007      	beq.n	8003cce <HAL_GPIO_Init+0x196>
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	68db      	ldr	r3, [r3, #12]
 8003cc2:	2b03      	cmp	r3, #3
 8003cc4:	d003      	beq.n	8003cce <HAL_GPIO_Init+0x196>
 8003cc6:	21bd      	movs	r1, #189	; 0xbd
 8003cc8:	4831      	ldr	r0, [pc, #196]	; (8003d90 <HAL_GPIO_Init+0x258>)
 8003cca:	f7fe fef2 	bl	8002ab2 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003cd4:	69fb      	ldr	r3, [r7, #28]
 8003cd6:	005b      	lsls	r3, r3, #1
 8003cd8:	2203      	movs	r2, #3
 8003cda:	fa02 f303 	lsl.w	r3, r2, r3
 8003cde:	43db      	mvns	r3, r3
 8003ce0:	69ba      	ldr	r2, [r7, #24]
 8003ce2:	4013      	ands	r3, r2
 8003ce4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	68da      	ldr	r2, [r3, #12]
 8003cea:	69fb      	ldr	r3, [r7, #28]
 8003cec:	005b      	lsls	r3, r3, #1
 8003cee:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf2:	69ba      	ldr	r2, [r7, #24]
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	69ba      	ldr	r2, [r7, #24]
 8003cfc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003d04:	2201      	movs	r2, #1
 8003d06:	69fb      	ldr	r3, [r7, #28]
 8003d08:	fa02 f303 	lsl.w	r3, r2, r3
 8003d0c:	43db      	mvns	r3, r3
 8003d0e:	69ba      	ldr	r2, [r7, #24]
 8003d10:	4013      	ands	r3, r2
 8003d12:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	091b      	lsrs	r3, r3, #4
 8003d1a:	f003 0201 	and.w	r2, r3, #1
 8003d1e:	69fb      	ldr	r3, [r7, #28]
 8003d20:	fa02 f303 	lsl.w	r3, r2, r3
 8003d24:	69ba      	ldr	r2, [r7, #24]
 8003d26:	4313      	orrs	r3, r2
 8003d28:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	69ba      	ldr	r2, [r7, #24]
 8003d2e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	f003 0303 	and.w	r3, r3, #3
 8003d38:	2b03      	cmp	r3, #3
 8003d3a:	d02b      	beq.n	8003d94 <HAL_GPIO_Init+0x25c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	689b      	ldr	r3, [r3, #8]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d00b      	beq.n	8003d5c <HAL_GPIO_Init+0x224>
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	d007      	beq.n	8003d5c <HAL_GPIO_Init+0x224>
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	2b02      	cmp	r3, #2
 8003d52:	d003      	beq.n	8003d5c <HAL_GPIO_Init+0x224>
 8003d54:	21ce      	movs	r1, #206	; 0xce
 8003d56:	480e      	ldr	r0, [pc, #56]	; (8003d90 <HAL_GPIO_Init+0x258>)
 8003d58:	f7fe feab 	bl	8002ab2 <assert_failed>

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	68db      	ldr	r3, [r3, #12]
 8003d60:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003d62:	69fb      	ldr	r3, [r7, #28]
 8003d64:	005b      	lsls	r3, r3, #1
 8003d66:	2203      	movs	r2, #3
 8003d68:	fa02 f303 	lsl.w	r3, r2, r3
 8003d6c:	43db      	mvns	r3, r3
 8003d6e:	69ba      	ldr	r2, [r7, #24]
 8003d70:	4013      	ands	r3, r2
 8003d72:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	689a      	ldr	r2, [r3, #8]
 8003d78:	69fb      	ldr	r3, [r7, #28]
 8003d7a:	005b      	lsls	r3, r3, #1
 8003d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d80:	69ba      	ldr	r2, [r7, #24]
 8003d82:	4313      	orrs	r3, r2
 8003d84:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	69ba      	ldr	r2, [r7, #24]
 8003d8a:	60da      	str	r2, [r3, #12]
 8003d8c:	e002      	b.n	8003d94 <HAL_GPIO_Init+0x25c>
 8003d8e:	bf00      	nop
 8003d90:	080166f0 	.word	0x080166f0
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	f003 0303 	and.w	r3, r3, #3
 8003d9c:	2b02      	cmp	r3, #2
 8003d9e:	f040 8134 	bne.w	800400a <HAL_GPIO_Init+0x4d2>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	691b      	ldr	r3, [r3, #16]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	f000 810b 	beq.w	8003fc2 <HAL_GPIO_Init+0x48a>
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	691b      	ldr	r3, [r3, #16]
 8003db0:	2b01      	cmp	r3, #1
 8003db2:	f000 8106 	beq.w	8003fc2 <HAL_GPIO_Init+0x48a>
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	691b      	ldr	r3, [r3, #16]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	f000 8101 	beq.w	8003fc2 <HAL_GPIO_Init+0x48a>
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	691b      	ldr	r3, [r3, #16]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	f000 80fc 	beq.w	8003fc2 <HAL_GPIO_Init+0x48a>
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	691b      	ldr	r3, [r3, #16]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	f000 80f7 	beq.w	8003fc2 <HAL_GPIO_Init+0x48a>
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	691b      	ldr	r3, [r3, #16]
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	f000 80f2 	beq.w	8003fc2 <HAL_GPIO_Init+0x48a>
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	691b      	ldr	r3, [r3, #16]
 8003de2:	2b02      	cmp	r3, #2
 8003de4:	f000 80ed 	beq.w	8003fc2 <HAL_GPIO_Init+0x48a>
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	691b      	ldr	r3, [r3, #16]
 8003dec:	2b02      	cmp	r3, #2
 8003dee:	f000 80e8 	beq.w	8003fc2 <HAL_GPIO_Init+0x48a>
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	691b      	ldr	r3, [r3, #16]
 8003df6:	2b02      	cmp	r3, #2
 8003df8:	f000 80e3 	beq.w	8003fc2 <HAL_GPIO_Init+0x48a>
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	691b      	ldr	r3, [r3, #16]
 8003e00:	2b03      	cmp	r3, #3
 8003e02:	f000 80de 	beq.w	8003fc2 <HAL_GPIO_Init+0x48a>
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	691b      	ldr	r3, [r3, #16]
 8003e0a:	2b03      	cmp	r3, #3
 8003e0c:	f000 80d9 	beq.w	8003fc2 <HAL_GPIO_Init+0x48a>
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	691b      	ldr	r3, [r3, #16]
 8003e14:	2b03      	cmp	r3, #3
 8003e16:	f000 80d4 	beq.w	8003fc2 <HAL_GPIO_Init+0x48a>
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	691b      	ldr	r3, [r3, #16]
 8003e1e:	2b03      	cmp	r3, #3
 8003e20:	f000 80cf 	beq.w	8003fc2 <HAL_GPIO_Init+0x48a>
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	691b      	ldr	r3, [r3, #16]
 8003e28:	2b03      	cmp	r3, #3
 8003e2a:	f000 80ca 	beq.w	8003fc2 <HAL_GPIO_Init+0x48a>
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	691b      	ldr	r3, [r3, #16]
 8003e32:	2b03      	cmp	r3, #3
 8003e34:	f000 80c5 	beq.w	8003fc2 <HAL_GPIO_Init+0x48a>
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	691b      	ldr	r3, [r3, #16]
 8003e3c:	2b04      	cmp	r3, #4
 8003e3e:	f000 80c0 	beq.w	8003fc2 <HAL_GPIO_Init+0x48a>
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	691b      	ldr	r3, [r3, #16]
 8003e46:	2b04      	cmp	r3, #4
 8003e48:	f000 80bb 	beq.w	8003fc2 <HAL_GPIO_Init+0x48a>
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	691b      	ldr	r3, [r3, #16]
 8003e50:	2b04      	cmp	r3, #4
 8003e52:	f000 80b6 	beq.w	8003fc2 <HAL_GPIO_Init+0x48a>
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	691b      	ldr	r3, [r3, #16]
 8003e5a:	2b04      	cmp	r3, #4
 8003e5c:	f000 80b1 	beq.w	8003fc2 <HAL_GPIO_Init+0x48a>
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	691b      	ldr	r3, [r3, #16]
 8003e64:	2b04      	cmp	r3, #4
 8003e66:	f000 80ac 	beq.w	8003fc2 <HAL_GPIO_Init+0x48a>
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	691b      	ldr	r3, [r3, #16]
 8003e6e:	2b05      	cmp	r3, #5
 8003e70:	f000 80a7 	beq.w	8003fc2 <HAL_GPIO_Init+0x48a>
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	691b      	ldr	r3, [r3, #16]
 8003e78:	2b05      	cmp	r3, #5
 8003e7a:	f000 80a2 	beq.w	8003fc2 <HAL_GPIO_Init+0x48a>
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	691b      	ldr	r3, [r3, #16]
 8003e82:	2b05      	cmp	r3, #5
 8003e84:	f000 809d 	beq.w	8003fc2 <HAL_GPIO_Init+0x48a>
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	691b      	ldr	r3, [r3, #16]
 8003e8c:	2b05      	cmp	r3, #5
 8003e8e:	f000 8098 	beq.w	8003fc2 <HAL_GPIO_Init+0x48a>
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	691b      	ldr	r3, [r3, #16]
 8003e96:	2b05      	cmp	r3, #5
 8003e98:	f000 8093 	beq.w	8003fc2 <HAL_GPIO_Init+0x48a>
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	691b      	ldr	r3, [r3, #16]
 8003ea0:	2b05      	cmp	r3, #5
 8003ea2:	f000 808e 	beq.w	8003fc2 <HAL_GPIO_Init+0x48a>
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	691b      	ldr	r3, [r3, #16]
 8003eaa:	2b06      	cmp	r3, #6
 8003eac:	f000 8089 	beq.w	8003fc2 <HAL_GPIO_Init+0x48a>
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	691b      	ldr	r3, [r3, #16]
 8003eb4:	2b06      	cmp	r3, #6
 8003eb6:	f000 8084 	beq.w	8003fc2 <HAL_GPIO_Init+0x48a>
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	691b      	ldr	r3, [r3, #16]
 8003ebe:	2b07      	cmp	r3, #7
 8003ec0:	d07f      	beq.n	8003fc2 <HAL_GPIO_Init+0x48a>
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	691b      	ldr	r3, [r3, #16]
 8003ec6:	2b07      	cmp	r3, #7
 8003ec8:	d07b      	beq.n	8003fc2 <HAL_GPIO_Init+0x48a>
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	691b      	ldr	r3, [r3, #16]
 8003ece:	2b07      	cmp	r3, #7
 8003ed0:	d077      	beq.n	8003fc2 <HAL_GPIO_Init+0x48a>
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	691b      	ldr	r3, [r3, #16]
 8003ed6:	2b07      	cmp	r3, #7
 8003ed8:	d073      	beq.n	8003fc2 <HAL_GPIO_Init+0x48a>
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	691b      	ldr	r3, [r3, #16]
 8003ede:	2b07      	cmp	r3, #7
 8003ee0:	d06f      	beq.n	8003fc2 <HAL_GPIO_Init+0x48a>
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	691b      	ldr	r3, [r3, #16]
 8003ee6:	2b07      	cmp	r3, #7
 8003ee8:	d06b      	beq.n	8003fc2 <HAL_GPIO_Init+0x48a>
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	691b      	ldr	r3, [r3, #16]
 8003eee:	2b07      	cmp	r3, #7
 8003ef0:	d067      	beq.n	8003fc2 <HAL_GPIO_Init+0x48a>
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	691b      	ldr	r3, [r3, #16]
 8003ef6:	2b08      	cmp	r3, #8
 8003ef8:	d063      	beq.n	8003fc2 <HAL_GPIO_Init+0x48a>
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	691b      	ldr	r3, [r3, #16]
 8003efe:	2b08      	cmp	r3, #8
 8003f00:	d05f      	beq.n	8003fc2 <HAL_GPIO_Init+0x48a>
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	691b      	ldr	r3, [r3, #16]
 8003f06:	2b08      	cmp	r3, #8
 8003f08:	d05b      	beq.n	8003fc2 <HAL_GPIO_Init+0x48a>
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	691b      	ldr	r3, [r3, #16]
 8003f0e:	2b08      	cmp	r3, #8
 8003f10:	d057      	beq.n	8003fc2 <HAL_GPIO_Init+0x48a>
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	691b      	ldr	r3, [r3, #16]
 8003f16:	2b08      	cmp	r3, #8
 8003f18:	d053      	beq.n	8003fc2 <HAL_GPIO_Init+0x48a>
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	691b      	ldr	r3, [r3, #16]
 8003f1e:	2b08      	cmp	r3, #8
 8003f20:	d04f      	beq.n	8003fc2 <HAL_GPIO_Init+0x48a>
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	691b      	ldr	r3, [r3, #16]
 8003f26:	2b08      	cmp	r3, #8
 8003f28:	d04b      	beq.n	8003fc2 <HAL_GPIO_Init+0x48a>
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	691b      	ldr	r3, [r3, #16]
 8003f2e:	2b09      	cmp	r3, #9
 8003f30:	d047      	beq.n	8003fc2 <HAL_GPIO_Init+0x48a>
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	691b      	ldr	r3, [r3, #16]
 8003f36:	2b09      	cmp	r3, #9
 8003f38:	d043      	beq.n	8003fc2 <HAL_GPIO_Init+0x48a>
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	691b      	ldr	r3, [r3, #16]
 8003f3e:	2b09      	cmp	r3, #9
 8003f40:	d03f      	beq.n	8003fc2 <HAL_GPIO_Init+0x48a>
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	691b      	ldr	r3, [r3, #16]
 8003f46:	2b09      	cmp	r3, #9
 8003f48:	d03b      	beq.n	8003fc2 <HAL_GPIO_Init+0x48a>
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	691b      	ldr	r3, [r3, #16]
 8003f4e:	2b09      	cmp	r3, #9
 8003f50:	d037      	beq.n	8003fc2 <HAL_GPIO_Init+0x48a>
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	691b      	ldr	r3, [r3, #16]
 8003f56:	2b09      	cmp	r3, #9
 8003f58:	d033      	beq.n	8003fc2 <HAL_GPIO_Init+0x48a>
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	691b      	ldr	r3, [r3, #16]
 8003f5e:	2b09      	cmp	r3, #9
 8003f60:	d02f      	beq.n	8003fc2 <HAL_GPIO_Init+0x48a>
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	691b      	ldr	r3, [r3, #16]
 8003f66:	2b0a      	cmp	r3, #10
 8003f68:	d02b      	beq.n	8003fc2 <HAL_GPIO_Init+0x48a>
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	691b      	ldr	r3, [r3, #16]
 8003f6e:	2b0a      	cmp	r3, #10
 8003f70:	d027      	beq.n	8003fc2 <HAL_GPIO_Init+0x48a>
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	691b      	ldr	r3, [r3, #16]
 8003f76:	2b0a      	cmp	r3, #10
 8003f78:	d023      	beq.n	8003fc2 <HAL_GPIO_Init+0x48a>
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	691b      	ldr	r3, [r3, #16]
 8003f7e:	2b0a      	cmp	r3, #10
 8003f80:	d01f      	beq.n	8003fc2 <HAL_GPIO_Init+0x48a>
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	691b      	ldr	r3, [r3, #16]
 8003f86:	2b0b      	cmp	r3, #11
 8003f88:	d01b      	beq.n	8003fc2 <HAL_GPIO_Init+0x48a>
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	691b      	ldr	r3, [r3, #16]
 8003f8e:	2b0c      	cmp	r3, #12
 8003f90:	d017      	beq.n	8003fc2 <HAL_GPIO_Init+0x48a>
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	691b      	ldr	r3, [r3, #16]
 8003f96:	2b0c      	cmp	r3, #12
 8003f98:	d013      	beq.n	8003fc2 <HAL_GPIO_Init+0x48a>
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	691b      	ldr	r3, [r3, #16]
 8003f9e:	2b0c      	cmp	r3, #12
 8003fa0:	d00f      	beq.n	8003fc2 <HAL_GPIO_Init+0x48a>
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	691b      	ldr	r3, [r3, #16]
 8003fa6:	2b0f      	cmp	r3, #15
 8003fa8:	d00b      	beq.n	8003fc2 <HAL_GPIO_Init+0x48a>
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	691b      	ldr	r3, [r3, #16]
 8003fae:	2b0d      	cmp	r3, #13
 8003fb0:	d007      	beq.n	8003fc2 <HAL_GPIO_Init+0x48a>
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	691b      	ldr	r3, [r3, #16]
 8003fb6:	2b0e      	cmp	r3, #14
 8003fb8:	d003      	beq.n	8003fc2 <HAL_GPIO_Init+0x48a>
 8003fba:	21db      	movs	r1, #219	; 0xdb
 8003fbc:	4888      	ldr	r0, [pc, #544]	; (80041e0 <HAL_GPIO_Init+0x6a8>)
 8003fbe:	f7fe fd78 	bl	8002ab2 <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003fc2:	69fb      	ldr	r3, [r7, #28]
 8003fc4:	08da      	lsrs	r2, r3, #3
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	3208      	adds	r2, #8
 8003fca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003fce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003fd0:	69fb      	ldr	r3, [r7, #28]
 8003fd2:	f003 0307 	and.w	r3, r3, #7
 8003fd6:	009b      	lsls	r3, r3, #2
 8003fd8:	220f      	movs	r2, #15
 8003fda:	fa02 f303 	lsl.w	r3, r2, r3
 8003fde:	43db      	mvns	r3, r3
 8003fe0:	69ba      	ldr	r2, [r7, #24]
 8003fe2:	4013      	ands	r3, r2
 8003fe4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	691a      	ldr	r2, [r3, #16]
 8003fea:	69fb      	ldr	r3, [r7, #28]
 8003fec:	f003 0307 	and.w	r3, r3, #7
 8003ff0:	009b      	lsls	r3, r3, #2
 8003ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff6:	69ba      	ldr	r2, [r7, #24]
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003ffc:	69fb      	ldr	r3, [r7, #28]
 8003ffe:	08da      	lsrs	r2, r3, #3
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	3208      	adds	r2, #8
 8004004:	69b9      	ldr	r1, [r7, #24]
 8004006:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004010:	69fb      	ldr	r3, [r7, #28]
 8004012:	005b      	lsls	r3, r3, #1
 8004014:	2203      	movs	r2, #3
 8004016:	fa02 f303 	lsl.w	r3, r2, r3
 800401a:	43db      	mvns	r3, r3
 800401c:	69ba      	ldr	r2, [r7, #24]
 800401e:	4013      	ands	r3, r2
 8004020:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	f003 0203 	and.w	r2, r3, #3
 800402a:	69fb      	ldr	r3, [r7, #28]
 800402c:	005b      	lsls	r3, r3, #1
 800402e:	fa02 f303 	lsl.w	r3, r2, r3
 8004032:	69ba      	ldr	r2, [r7, #24]
 8004034:	4313      	orrs	r3, r2
 8004036:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	69ba      	ldr	r2, [r7, #24]
 800403c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004046:	2b00      	cmp	r3, #0
 8004048:	f000 80be 	beq.w	80041c8 <HAL_GPIO_Init+0x690>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800404c:	4b65      	ldr	r3, [pc, #404]	; (80041e4 <HAL_GPIO_Init+0x6ac>)
 800404e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004050:	4a64      	ldr	r2, [pc, #400]	; (80041e4 <HAL_GPIO_Init+0x6ac>)
 8004052:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004056:	6453      	str	r3, [r2, #68]	; 0x44
 8004058:	4b62      	ldr	r3, [pc, #392]	; (80041e4 <HAL_GPIO_Init+0x6ac>)
 800405a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800405c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004060:	60fb      	str	r3, [r7, #12]
 8004062:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004064:	4a60      	ldr	r2, [pc, #384]	; (80041e8 <HAL_GPIO_Init+0x6b0>)
 8004066:	69fb      	ldr	r3, [r7, #28]
 8004068:	089b      	lsrs	r3, r3, #2
 800406a:	3302      	adds	r3, #2
 800406c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004070:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004072:	69fb      	ldr	r3, [r7, #28]
 8004074:	f003 0303 	and.w	r3, r3, #3
 8004078:	009b      	lsls	r3, r3, #2
 800407a:	220f      	movs	r2, #15
 800407c:	fa02 f303 	lsl.w	r3, r2, r3
 8004080:	43db      	mvns	r3, r3
 8004082:	69ba      	ldr	r2, [r7, #24]
 8004084:	4013      	ands	r3, r2
 8004086:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	4a58      	ldr	r2, [pc, #352]	; (80041ec <HAL_GPIO_Init+0x6b4>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d037      	beq.n	8004100 <HAL_GPIO_Init+0x5c8>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	4a57      	ldr	r2, [pc, #348]	; (80041f0 <HAL_GPIO_Init+0x6b8>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d031      	beq.n	80040fc <HAL_GPIO_Init+0x5c4>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	4a56      	ldr	r2, [pc, #344]	; (80041f4 <HAL_GPIO_Init+0x6bc>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d02b      	beq.n	80040f8 <HAL_GPIO_Init+0x5c0>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	4a55      	ldr	r2, [pc, #340]	; (80041f8 <HAL_GPIO_Init+0x6c0>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d025      	beq.n	80040f4 <HAL_GPIO_Init+0x5bc>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	4a54      	ldr	r2, [pc, #336]	; (80041fc <HAL_GPIO_Init+0x6c4>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d01f      	beq.n	80040f0 <HAL_GPIO_Init+0x5b8>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	4a53      	ldr	r2, [pc, #332]	; (8004200 <HAL_GPIO_Init+0x6c8>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d019      	beq.n	80040ec <HAL_GPIO_Init+0x5b4>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	4a52      	ldr	r2, [pc, #328]	; (8004204 <HAL_GPIO_Init+0x6cc>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d013      	beq.n	80040e8 <HAL_GPIO_Init+0x5b0>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	4a51      	ldr	r2, [pc, #324]	; (8004208 <HAL_GPIO_Init+0x6d0>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d00d      	beq.n	80040e4 <HAL_GPIO_Init+0x5ac>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	4a50      	ldr	r2, [pc, #320]	; (800420c <HAL_GPIO_Init+0x6d4>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d007      	beq.n	80040e0 <HAL_GPIO_Init+0x5a8>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	4a4f      	ldr	r2, [pc, #316]	; (8004210 <HAL_GPIO_Init+0x6d8>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d101      	bne.n	80040dc <HAL_GPIO_Init+0x5a4>
 80040d8:	2309      	movs	r3, #9
 80040da:	e012      	b.n	8004102 <HAL_GPIO_Init+0x5ca>
 80040dc:	230a      	movs	r3, #10
 80040de:	e010      	b.n	8004102 <HAL_GPIO_Init+0x5ca>
 80040e0:	2308      	movs	r3, #8
 80040e2:	e00e      	b.n	8004102 <HAL_GPIO_Init+0x5ca>
 80040e4:	2307      	movs	r3, #7
 80040e6:	e00c      	b.n	8004102 <HAL_GPIO_Init+0x5ca>
 80040e8:	2306      	movs	r3, #6
 80040ea:	e00a      	b.n	8004102 <HAL_GPIO_Init+0x5ca>
 80040ec:	2305      	movs	r3, #5
 80040ee:	e008      	b.n	8004102 <HAL_GPIO_Init+0x5ca>
 80040f0:	2304      	movs	r3, #4
 80040f2:	e006      	b.n	8004102 <HAL_GPIO_Init+0x5ca>
 80040f4:	2303      	movs	r3, #3
 80040f6:	e004      	b.n	8004102 <HAL_GPIO_Init+0x5ca>
 80040f8:	2302      	movs	r3, #2
 80040fa:	e002      	b.n	8004102 <HAL_GPIO_Init+0x5ca>
 80040fc:	2301      	movs	r3, #1
 80040fe:	e000      	b.n	8004102 <HAL_GPIO_Init+0x5ca>
 8004100:	2300      	movs	r3, #0
 8004102:	69fa      	ldr	r2, [r7, #28]
 8004104:	f002 0203 	and.w	r2, r2, #3
 8004108:	0092      	lsls	r2, r2, #2
 800410a:	4093      	lsls	r3, r2
 800410c:	69ba      	ldr	r2, [r7, #24]
 800410e:	4313      	orrs	r3, r2
 8004110:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004112:	4935      	ldr	r1, [pc, #212]	; (80041e8 <HAL_GPIO_Init+0x6b0>)
 8004114:	69fb      	ldr	r3, [r7, #28]
 8004116:	089b      	lsrs	r3, r3, #2
 8004118:	3302      	adds	r3, #2
 800411a:	69ba      	ldr	r2, [r7, #24]
 800411c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004120:	4b3c      	ldr	r3, [pc, #240]	; (8004214 <HAL_GPIO_Init+0x6dc>)
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	43db      	mvns	r3, r3
 800412a:	69ba      	ldr	r2, [r7, #24]
 800412c:	4013      	ands	r3, r2
 800412e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004138:	2b00      	cmp	r3, #0
 800413a:	d003      	beq.n	8004144 <HAL_GPIO_Init+0x60c>
        {
          temp |= iocurrent;
 800413c:	69ba      	ldr	r2, [r7, #24]
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	4313      	orrs	r3, r2
 8004142:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004144:	4a33      	ldr	r2, [pc, #204]	; (8004214 <HAL_GPIO_Init+0x6dc>)
 8004146:	69bb      	ldr	r3, [r7, #24]
 8004148:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800414a:	4b32      	ldr	r3, [pc, #200]	; (8004214 <HAL_GPIO_Init+0x6dc>)
 800414c:	68db      	ldr	r3, [r3, #12]
 800414e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004150:	693b      	ldr	r3, [r7, #16]
 8004152:	43db      	mvns	r3, r3
 8004154:	69ba      	ldr	r2, [r7, #24]
 8004156:	4013      	ands	r3, r2
 8004158:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004162:	2b00      	cmp	r3, #0
 8004164:	d003      	beq.n	800416e <HAL_GPIO_Init+0x636>
        {
          temp |= iocurrent;
 8004166:	69ba      	ldr	r2, [r7, #24]
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	4313      	orrs	r3, r2
 800416c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800416e:	4a29      	ldr	r2, [pc, #164]	; (8004214 <HAL_GPIO_Init+0x6dc>)
 8004170:	69bb      	ldr	r3, [r7, #24]
 8004172:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004174:	4b27      	ldr	r3, [pc, #156]	; (8004214 <HAL_GPIO_Init+0x6dc>)
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	43db      	mvns	r3, r3
 800417e:	69ba      	ldr	r2, [r7, #24]
 8004180:	4013      	ands	r3, r2
 8004182:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800418c:	2b00      	cmp	r3, #0
 800418e:	d003      	beq.n	8004198 <HAL_GPIO_Init+0x660>
        {
          temp |= iocurrent;
 8004190:	69ba      	ldr	r2, [r7, #24]
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	4313      	orrs	r3, r2
 8004196:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004198:	4a1e      	ldr	r2, [pc, #120]	; (8004214 <HAL_GPIO_Init+0x6dc>)
 800419a:	69bb      	ldr	r3, [r7, #24]
 800419c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800419e:	4b1d      	ldr	r3, [pc, #116]	; (8004214 <HAL_GPIO_Init+0x6dc>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041a4:	693b      	ldr	r3, [r7, #16]
 80041a6:	43db      	mvns	r3, r3
 80041a8:	69ba      	ldr	r2, [r7, #24]
 80041aa:	4013      	ands	r3, r2
 80041ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d003      	beq.n	80041c2 <HAL_GPIO_Init+0x68a>
        {
          temp |= iocurrent;
 80041ba:	69ba      	ldr	r2, [r7, #24]
 80041bc:	693b      	ldr	r3, [r7, #16]
 80041be:	4313      	orrs	r3, r2
 80041c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80041c2:	4a14      	ldr	r2, [pc, #80]	; (8004214 <HAL_GPIO_Init+0x6dc>)
 80041c4:	69bb      	ldr	r3, [r7, #24]
 80041c6:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80041c8:	69fb      	ldr	r3, [r7, #28]
 80041ca:	3301      	adds	r3, #1
 80041cc:	61fb      	str	r3, [r7, #28]
 80041ce:	69fb      	ldr	r3, [r7, #28]
 80041d0:	2b0f      	cmp	r3, #15
 80041d2:	f67f ad4d 	bls.w	8003c70 <HAL_GPIO_Init+0x138>
      }
    }
  }
}
 80041d6:	bf00      	nop
 80041d8:	bf00      	nop
 80041da:	3720      	adds	r7, #32
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd80      	pop	{r7, pc}
 80041e0:	080166f0 	.word	0x080166f0
 80041e4:	40023800 	.word	0x40023800
 80041e8:	40013800 	.word	0x40013800
 80041ec:	40020000 	.word	0x40020000
 80041f0:	40020400 	.word	0x40020400
 80041f4:	40020800 	.word	0x40020800
 80041f8:	40020c00 	.word	0x40020c00
 80041fc:	40021000 	.word	0x40021000
 8004200:	40021400 	.word	0x40021400
 8004204:	40021800 	.word	0x40021800
 8004208:	40021c00 	.word	0x40021c00
 800420c:	40022000 	.word	0x40022000
 8004210:	40022400 	.word	0x40022400
 8004214:	40013c00 	.word	0x40013c00

08004218 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b084      	sub	sp, #16
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
 8004220:	460b      	mov	r3, r1
 8004222:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8004224:	887b      	ldrh	r3, [r7, #2]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d104      	bne.n	8004234 <HAL_GPIO_ReadPin+0x1c>
 800422a:	f240 1177 	movw	r1, #375	; 0x177
 800422e:	4809      	ldr	r0, [pc, #36]	; (8004254 <HAL_GPIO_ReadPin+0x3c>)
 8004230:	f7fe fc3f 	bl	8002ab2 <assert_failed>

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	691a      	ldr	r2, [r3, #16]
 8004238:	887b      	ldrh	r3, [r7, #2]
 800423a:	4013      	ands	r3, r2
 800423c:	2b00      	cmp	r3, #0
 800423e:	d002      	beq.n	8004246 <HAL_GPIO_ReadPin+0x2e>
  {
    bitstatus = GPIO_PIN_SET;
 8004240:	2301      	movs	r3, #1
 8004242:	73fb      	strb	r3, [r7, #15]
 8004244:	e001      	b.n	800424a <HAL_GPIO_ReadPin+0x32>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004246:	2300      	movs	r3, #0
 8004248:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800424a:	7bfb      	ldrb	r3, [r7, #15]
}
 800424c:	4618      	mov	r0, r3
 800424e:	3710      	adds	r7, #16
 8004250:	46bd      	mov	sp, r7
 8004252:	bd80      	pop	{r7, pc}
 8004254:	080166f0 	.word	0x080166f0

08004258 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b082      	sub	sp, #8
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
 8004260:	460b      	mov	r3, r1
 8004262:	807b      	strh	r3, [r7, #2]
 8004264:	4613      	mov	r3, r2
 8004266:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8004268:	887b      	ldrh	r3, [r7, #2]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d104      	bne.n	8004278 <HAL_GPIO_WritePin+0x20>
 800426e:	f240 1197 	movw	r1, #407	; 0x197
 8004272:	480e      	ldr	r0, [pc, #56]	; (80042ac <HAL_GPIO_WritePin+0x54>)
 8004274:	f7fe fc1d 	bl	8002ab2 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8004278:	787b      	ldrb	r3, [r7, #1]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d007      	beq.n	800428e <HAL_GPIO_WritePin+0x36>
 800427e:	787b      	ldrb	r3, [r7, #1]
 8004280:	2b01      	cmp	r3, #1
 8004282:	d004      	beq.n	800428e <HAL_GPIO_WritePin+0x36>
 8004284:	f44f 71cc 	mov.w	r1, #408	; 0x198
 8004288:	4808      	ldr	r0, [pc, #32]	; (80042ac <HAL_GPIO_WritePin+0x54>)
 800428a:	f7fe fc12 	bl	8002ab2 <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 800428e:	787b      	ldrb	r3, [r7, #1]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d003      	beq.n	800429c <HAL_GPIO_WritePin+0x44>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004294:	887a      	ldrh	r2, [r7, #2]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800429a:	e003      	b.n	80042a4 <HAL_GPIO_WritePin+0x4c>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800429c:	887b      	ldrh	r3, [r7, #2]
 800429e:	041a      	lsls	r2, r3, #16
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	619a      	str	r2, [r3, #24]
}
 80042a4:	bf00      	nop
 80042a6:	3708      	adds	r7, #8
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bd80      	pop	{r7, pc}
 80042ac:	080166f0 	.word	0x080166f0

080042b0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b082      	sub	sp, #8
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	4603      	mov	r3, r0
 80042b8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80042ba:	4b08      	ldr	r3, [pc, #32]	; (80042dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80042bc:	695a      	ldr	r2, [r3, #20]
 80042be:	88fb      	ldrh	r3, [r7, #6]
 80042c0:	4013      	ands	r3, r2
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d006      	beq.n	80042d4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80042c6:	4a05      	ldr	r2, [pc, #20]	; (80042dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80042c8:	88fb      	ldrh	r3, [r7, #6]
 80042ca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80042cc:	88fb      	ldrh	r3, [r7, #6]
 80042ce:	4618      	mov	r0, r3
 80042d0:	f000 f806 	bl	80042e0 <HAL_GPIO_EXTI_Callback>
  }
}
 80042d4:	bf00      	nop
 80042d6:	3708      	adds	r7, #8
 80042d8:	46bd      	mov	sp, r7
 80042da:	bd80      	pop	{r7, pc}
 80042dc:	40013c00 	.word	0x40013c00

080042e0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b083      	sub	sp, #12
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	4603      	mov	r3, r0
 80042e8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80042ea:	bf00      	nop
 80042ec:	370c      	adds	r7, #12
 80042ee:	46bd      	mov	sp, r7
 80042f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f4:	4770      	bx	lr
	...

080042f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b082      	sub	sp, #8
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d101      	bne.n	800430a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004306:	2301      	movs	r3, #1
 8004308:	e107      	b.n	800451a <HAL_I2C_Init+0x222>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a85      	ldr	r2, [pc, #532]	; (8004524 <HAL_I2C_Init+0x22c>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d013      	beq.n	800433c <HAL_I2C_Init+0x44>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a83      	ldr	r2, [pc, #524]	; (8004528 <HAL_I2C_Init+0x230>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d00e      	beq.n	800433c <HAL_I2C_Init+0x44>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4a82      	ldr	r2, [pc, #520]	; (800452c <HAL_I2C_Init+0x234>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d009      	beq.n	800433c <HAL_I2C_Init+0x44>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a80      	ldr	r2, [pc, #512]	; (8004530 <HAL_I2C_Init+0x238>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d004      	beq.n	800433c <HAL_I2C_Init+0x44>
 8004332:	f240 2119 	movw	r1, #537	; 0x219
 8004336:	487f      	ldr	r0, [pc, #508]	; (8004534 <HAL_I2C_Init+0x23c>)
 8004338:	f7fe fbbb 	bl	8002ab2 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	689b      	ldr	r3, [r3, #8]
 8004340:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004344:	d304      	bcc.n	8004350 <HAL_I2C_Init+0x58>
 8004346:	f240 211a 	movw	r1, #538	; 0x21a
 800434a:	487a      	ldr	r0, [pc, #488]	; (8004534 <HAL_I2C_Init+0x23c>)
 800434c:	f7fe fbb1 	bl	8002ab2 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	68db      	ldr	r3, [r3, #12]
 8004354:	2b01      	cmp	r3, #1
 8004356:	d008      	beq.n	800436a <HAL_I2C_Init+0x72>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	68db      	ldr	r3, [r3, #12]
 800435c:	2b02      	cmp	r3, #2
 800435e:	d004      	beq.n	800436a <HAL_I2C_Init+0x72>
 8004360:	f240 211b 	movw	r1, #539	; 0x21b
 8004364:	4873      	ldr	r0, [pc, #460]	; (8004534 <HAL_I2C_Init+0x23c>)
 8004366:	f7fe fba4 	bl	8002ab2 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	691b      	ldr	r3, [r3, #16]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d009      	beq.n	8004386 <HAL_I2C_Init+0x8e>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	691b      	ldr	r3, [r3, #16]
 8004376:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800437a:	d004      	beq.n	8004386 <HAL_I2C_Init+0x8e>
 800437c:	f44f 7107 	mov.w	r1, #540	; 0x21c
 8004380:	486c      	ldr	r0, [pc, #432]	; (8004534 <HAL_I2C_Init+0x23c>)
 8004382:	f7fe fb96 	bl	8002ab2 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	695b      	ldr	r3, [r3, #20]
 800438a:	2bff      	cmp	r3, #255	; 0xff
 800438c:	d904      	bls.n	8004398 <HAL_I2C_Init+0xa0>
 800438e:	f240 211d 	movw	r1, #541	; 0x21d
 8004392:	4868      	ldr	r0, [pc, #416]	; (8004534 <HAL_I2C_Init+0x23c>)
 8004394:	f7fe fb8d 	bl	8002ab2 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	699b      	ldr	r3, [r3, #24]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d020      	beq.n	80043e2 <HAL_I2C_Init+0xea>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	699b      	ldr	r3, [r3, #24]
 80043a4:	2b01      	cmp	r3, #1
 80043a6:	d01c      	beq.n	80043e2 <HAL_I2C_Init+0xea>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	699b      	ldr	r3, [r3, #24]
 80043ac:	2b02      	cmp	r3, #2
 80043ae:	d018      	beq.n	80043e2 <HAL_I2C_Init+0xea>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	699b      	ldr	r3, [r3, #24]
 80043b4:	2b03      	cmp	r3, #3
 80043b6:	d014      	beq.n	80043e2 <HAL_I2C_Init+0xea>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	699b      	ldr	r3, [r3, #24]
 80043bc:	2b04      	cmp	r3, #4
 80043be:	d010      	beq.n	80043e2 <HAL_I2C_Init+0xea>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	699b      	ldr	r3, [r3, #24]
 80043c4:	2b05      	cmp	r3, #5
 80043c6:	d00c      	beq.n	80043e2 <HAL_I2C_Init+0xea>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	699b      	ldr	r3, [r3, #24]
 80043cc:	2b06      	cmp	r3, #6
 80043ce:	d008      	beq.n	80043e2 <HAL_I2C_Init+0xea>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	699b      	ldr	r3, [r3, #24]
 80043d4:	2b07      	cmp	r3, #7
 80043d6:	d004      	beq.n	80043e2 <HAL_I2C_Init+0xea>
 80043d8:	f240 211e 	movw	r1, #542	; 0x21e
 80043dc:	4855      	ldr	r0, [pc, #340]	; (8004534 <HAL_I2C_Init+0x23c>)
 80043de:	f7fe fb68 	bl	8002ab2 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	69db      	ldr	r3, [r3, #28]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d009      	beq.n	80043fe <HAL_I2C_Init+0x106>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	69db      	ldr	r3, [r3, #28]
 80043ee:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80043f2:	d004      	beq.n	80043fe <HAL_I2C_Init+0x106>
 80043f4:	f240 211f 	movw	r1, #543	; 0x21f
 80043f8:	484e      	ldr	r0, [pc, #312]	; (8004534 <HAL_I2C_Init+0x23c>)
 80043fa:	f7fe fb5a 	bl	8002ab2 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6a1b      	ldr	r3, [r3, #32]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d009      	beq.n	800441a <HAL_I2C_Init+0x122>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6a1b      	ldr	r3, [r3, #32]
 800440a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800440e:	d004      	beq.n	800441a <HAL_I2C_Init+0x122>
 8004410:	f44f 7108 	mov.w	r1, #544	; 0x220
 8004414:	4847      	ldr	r0, [pc, #284]	; (8004534 <HAL_I2C_Init+0x23c>)
 8004416:	f7fe fb4c 	bl	8002ab2 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004420:	b2db      	uxtb	r3, r3
 8004422:	2b00      	cmp	r3, #0
 8004424:	d106      	bne.n	8004434 <HAL_I2C_Init+0x13c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2200      	movs	r2, #0
 800442a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	f7fd f8c6 	bl	80015c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2224      	movs	r2, #36	; 0x24
 8004438:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	681a      	ldr	r2, [r3, #0]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f022 0201 	bic.w	r2, r2, #1
 800444a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	685a      	ldr	r2, [r3, #4]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004458:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	689a      	ldr	r2, [r3, #8]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004468:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	68db      	ldr	r3, [r3, #12]
 800446e:	2b01      	cmp	r3, #1
 8004470:	d107      	bne.n	8004482 <HAL_I2C_Init+0x18a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	689a      	ldr	r2, [r3, #8]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800447e:	609a      	str	r2, [r3, #8]
 8004480:	e006      	b.n	8004490 <HAL_I2C_Init+0x198>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	689a      	ldr	r2, [r3, #8]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800448e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	68db      	ldr	r3, [r3, #12]
 8004494:	2b02      	cmp	r3, #2
 8004496:	d104      	bne.n	80044a2 <HAL_I2C_Init+0x1aa>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80044a0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	6859      	ldr	r1, [r3, #4]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681a      	ldr	r2, [r3, #0]
 80044ac:	4b22      	ldr	r3, [pc, #136]	; (8004538 <HAL_I2C_Init+0x240>)
 80044ae:	430b      	orrs	r3, r1
 80044b0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	68da      	ldr	r2, [r3, #12]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80044c0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	691a      	ldr	r2, [r3, #16]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	695b      	ldr	r3, [r3, #20]
 80044ca:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	699b      	ldr	r3, [r3, #24]
 80044d2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	430a      	orrs	r2, r1
 80044da:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	69d9      	ldr	r1, [r3, #28]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6a1a      	ldr	r2, [r3, #32]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	430a      	orrs	r2, r1
 80044ea:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	681a      	ldr	r2, [r3, #0]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f042 0201 	orr.w	r2, r2, #1
 80044fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2200      	movs	r2, #0
 8004500:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2220      	movs	r2, #32
 8004506:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2200      	movs	r2, #0
 800450e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2200      	movs	r2, #0
 8004514:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004518:	2300      	movs	r3, #0
}
 800451a:	4618      	mov	r0, r3
 800451c:	3708      	adds	r7, #8
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}
 8004522:	bf00      	nop
 8004524:	40005400 	.word	0x40005400
 8004528:	40005800 	.word	0x40005800
 800452c:	40005c00 	.word	0x40005c00
 8004530:	40006000 	.word	0x40006000
 8004534:	0801672c 	.word	0x0801672c
 8004538:	02008000 	.word	0x02008000

0800453c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b088      	sub	sp, #32
 8004540:	af02      	add	r7, sp, #8
 8004542:	60f8      	str	r0, [r7, #12]
 8004544:	607a      	str	r2, [r7, #4]
 8004546:	461a      	mov	r2, r3
 8004548:	460b      	mov	r3, r1
 800454a:	817b      	strh	r3, [r7, #10]
 800454c:	4613      	mov	r3, r2
 800454e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004556:	b2db      	uxtb	r3, r3
 8004558:	2b20      	cmp	r3, #32
 800455a:	f040 80da 	bne.w	8004712 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004564:	2b01      	cmp	r3, #1
 8004566:	d101      	bne.n	800456c <HAL_I2C_Master_Transmit+0x30>
 8004568:	2302      	movs	r3, #2
 800456a:	e0d3      	b.n	8004714 <HAL_I2C_Master_Transmit+0x1d8>
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2201      	movs	r2, #1
 8004570:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004574:	f7ff f8d0 	bl	8003718 <HAL_GetTick>
 8004578:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	9300      	str	r3, [sp, #0]
 800457e:	2319      	movs	r3, #25
 8004580:	2201      	movs	r2, #1
 8004582:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004586:	68f8      	ldr	r0, [r7, #12]
 8004588:	f000 fefb 	bl	8005382 <I2C_WaitOnFlagUntilTimeout>
 800458c:	4603      	mov	r3, r0
 800458e:	2b00      	cmp	r3, #0
 8004590:	d001      	beq.n	8004596 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	e0be      	b.n	8004714 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	2221      	movs	r2, #33	; 0x21
 800459a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	2210      	movs	r2, #16
 80045a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	2200      	movs	r2, #0
 80045aa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	687a      	ldr	r2, [r7, #4]
 80045b0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	893a      	ldrh	r2, [r7, #8]
 80045b6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	2200      	movs	r2, #0
 80045bc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045c2:	b29b      	uxth	r3, r3
 80045c4:	2bff      	cmp	r3, #255	; 0xff
 80045c6:	d90e      	bls.n	80045e6 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	22ff      	movs	r2, #255	; 0xff
 80045cc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045d2:	b2da      	uxtb	r2, r3
 80045d4:	8979      	ldrh	r1, [r7, #10]
 80045d6:	4b51      	ldr	r3, [pc, #324]	; (800471c <HAL_I2C_Master_Transmit+0x1e0>)
 80045d8:	9300      	str	r3, [sp, #0]
 80045da:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80045de:	68f8      	ldr	r0, [r7, #12]
 80045e0:	f001 f8e6 	bl	80057b0 <I2C_TransferConfig>
 80045e4:	e06c      	b.n	80046c0 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045ea:	b29a      	uxth	r2, r3
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045f4:	b2da      	uxtb	r2, r3
 80045f6:	8979      	ldrh	r1, [r7, #10]
 80045f8:	4b48      	ldr	r3, [pc, #288]	; (800471c <HAL_I2C_Master_Transmit+0x1e0>)
 80045fa:	9300      	str	r3, [sp, #0]
 80045fc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004600:	68f8      	ldr	r0, [r7, #12]
 8004602:	f001 f8d5 	bl	80057b0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8004606:	e05b      	b.n	80046c0 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004608:	697a      	ldr	r2, [r7, #20]
 800460a:	6a39      	ldr	r1, [r7, #32]
 800460c:	68f8      	ldr	r0, [r7, #12]
 800460e:	f000 fef8 	bl	8005402 <I2C_WaitOnTXISFlagUntilTimeout>
 8004612:	4603      	mov	r3, r0
 8004614:	2b00      	cmp	r3, #0
 8004616:	d001      	beq.n	800461c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8004618:	2301      	movs	r3, #1
 800461a:	e07b      	b.n	8004714 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004620:	781a      	ldrb	r2, [r3, #0]
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800462c:	1c5a      	adds	r2, r3, #1
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004636:	b29b      	uxth	r3, r3
 8004638:	3b01      	subs	r3, #1
 800463a:	b29a      	uxth	r2, r3
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004644:	3b01      	subs	r3, #1
 8004646:	b29a      	uxth	r2, r3
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004650:	b29b      	uxth	r3, r3
 8004652:	2b00      	cmp	r3, #0
 8004654:	d034      	beq.n	80046c0 <HAL_I2C_Master_Transmit+0x184>
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800465a:	2b00      	cmp	r3, #0
 800465c:	d130      	bne.n	80046c0 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	9300      	str	r3, [sp, #0]
 8004662:	6a3b      	ldr	r3, [r7, #32]
 8004664:	2200      	movs	r2, #0
 8004666:	2180      	movs	r1, #128	; 0x80
 8004668:	68f8      	ldr	r0, [r7, #12]
 800466a:	f000 fe8a 	bl	8005382 <I2C_WaitOnFlagUntilTimeout>
 800466e:	4603      	mov	r3, r0
 8004670:	2b00      	cmp	r3, #0
 8004672:	d001      	beq.n	8004678 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8004674:	2301      	movs	r3, #1
 8004676:	e04d      	b.n	8004714 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800467c:	b29b      	uxth	r3, r3
 800467e:	2bff      	cmp	r3, #255	; 0xff
 8004680:	d90e      	bls.n	80046a0 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	22ff      	movs	r2, #255	; 0xff
 8004686:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800468c:	b2da      	uxtb	r2, r3
 800468e:	8979      	ldrh	r1, [r7, #10]
 8004690:	2300      	movs	r3, #0
 8004692:	9300      	str	r3, [sp, #0]
 8004694:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004698:	68f8      	ldr	r0, [r7, #12]
 800469a:	f001 f889 	bl	80057b0 <I2C_TransferConfig>
 800469e:	e00f      	b.n	80046c0 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046a4:	b29a      	uxth	r2, r3
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046ae:	b2da      	uxtb	r2, r3
 80046b0:	8979      	ldrh	r1, [r7, #10]
 80046b2:	2300      	movs	r3, #0
 80046b4:	9300      	str	r3, [sp, #0]
 80046b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80046ba:	68f8      	ldr	r0, [r7, #12]
 80046bc:	f001 f878 	bl	80057b0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046c4:	b29b      	uxth	r3, r3
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d19e      	bne.n	8004608 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046ca:	697a      	ldr	r2, [r7, #20]
 80046cc:	6a39      	ldr	r1, [r7, #32]
 80046ce:	68f8      	ldr	r0, [r7, #12]
 80046d0:	f000 fed7 	bl	8005482 <I2C_WaitOnSTOPFlagUntilTimeout>
 80046d4:	4603      	mov	r3, r0
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d001      	beq.n	80046de <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80046da:	2301      	movs	r3, #1
 80046dc:	e01a      	b.n	8004714 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	2220      	movs	r2, #32
 80046e4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	6859      	ldr	r1, [r3, #4]
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681a      	ldr	r2, [r3, #0]
 80046f0:	4b0b      	ldr	r3, [pc, #44]	; (8004720 <HAL_I2C_Master_Transmit+0x1e4>)
 80046f2:	400b      	ands	r3, r1
 80046f4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	2220      	movs	r2, #32
 80046fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	2200      	movs	r2, #0
 8004702:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	2200      	movs	r2, #0
 800470a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800470e:	2300      	movs	r3, #0
 8004710:	e000      	b.n	8004714 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8004712:	2302      	movs	r3, #2
  }
}
 8004714:	4618      	mov	r0, r3
 8004716:	3718      	adds	r7, #24
 8004718:	46bd      	mov	sp, r7
 800471a:	bd80      	pop	{r7, pc}
 800471c:	80002000 	.word	0x80002000
 8004720:	fe00e800 	.word	0xfe00e800

08004724 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b088      	sub	sp, #32
 8004728:	af02      	add	r7, sp, #8
 800472a:	60f8      	str	r0, [r7, #12]
 800472c:	607a      	str	r2, [r7, #4]
 800472e:	461a      	mov	r2, r3
 8004730:	460b      	mov	r3, r1
 8004732:	817b      	strh	r3, [r7, #10]
 8004734:	4613      	mov	r3, r2
 8004736:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800473e:	b2db      	uxtb	r3, r3
 8004740:	2b20      	cmp	r3, #32
 8004742:	f040 80db 	bne.w	80048fc <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800474c:	2b01      	cmp	r3, #1
 800474e:	d101      	bne.n	8004754 <HAL_I2C_Master_Receive+0x30>
 8004750:	2302      	movs	r3, #2
 8004752:	e0d4      	b.n	80048fe <HAL_I2C_Master_Receive+0x1da>
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	2201      	movs	r2, #1
 8004758:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800475c:	f7fe ffdc 	bl	8003718 <HAL_GetTick>
 8004760:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004762:	697b      	ldr	r3, [r7, #20]
 8004764:	9300      	str	r3, [sp, #0]
 8004766:	2319      	movs	r3, #25
 8004768:	2201      	movs	r2, #1
 800476a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800476e:	68f8      	ldr	r0, [r7, #12]
 8004770:	f000 fe07 	bl	8005382 <I2C_WaitOnFlagUntilTimeout>
 8004774:	4603      	mov	r3, r0
 8004776:	2b00      	cmp	r3, #0
 8004778:	d001      	beq.n	800477e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800477a:	2301      	movs	r3, #1
 800477c:	e0bf      	b.n	80048fe <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	2222      	movs	r2, #34	; 0x22
 8004782:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	2210      	movs	r2, #16
 800478a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	2200      	movs	r2, #0
 8004792:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	687a      	ldr	r2, [r7, #4]
 8004798:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	893a      	ldrh	r2, [r7, #8]
 800479e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	2200      	movs	r2, #0
 80047a4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047aa:	b29b      	uxth	r3, r3
 80047ac:	2bff      	cmp	r3, #255	; 0xff
 80047ae:	d90e      	bls.n	80047ce <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	22ff      	movs	r2, #255	; 0xff
 80047b4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047ba:	b2da      	uxtb	r2, r3
 80047bc:	8979      	ldrh	r1, [r7, #10]
 80047be:	4b52      	ldr	r3, [pc, #328]	; (8004908 <HAL_I2C_Master_Receive+0x1e4>)
 80047c0:	9300      	str	r3, [sp, #0]
 80047c2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80047c6:	68f8      	ldr	r0, [r7, #12]
 80047c8:	f000 fff2 	bl	80057b0 <I2C_TransferConfig>
 80047cc:	e06d      	b.n	80048aa <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047d2:	b29a      	uxth	r2, r3
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047dc:	b2da      	uxtb	r2, r3
 80047de:	8979      	ldrh	r1, [r7, #10]
 80047e0:	4b49      	ldr	r3, [pc, #292]	; (8004908 <HAL_I2C_Master_Receive+0x1e4>)
 80047e2:	9300      	str	r3, [sp, #0]
 80047e4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80047e8:	68f8      	ldr	r0, [r7, #12]
 80047ea:	f000 ffe1 	bl	80057b0 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80047ee:	e05c      	b.n	80048aa <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80047f0:	697a      	ldr	r2, [r7, #20]
 80047f2:	6a39      	ldr	r1, [r7, #32]
 80047f4:	68f8      	ldr	r0, [r7, #12]
 80047f6:	f000 fe81 	bl	80054fc <I2C_WaitOnRXNEFlagUntilTimeout>
 80047fa:	4603      	mov	r3, r0
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d001      	beq.n	8004804 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8004800:	2301      	movs	r3, #1
 8004802:	e07c      	b.n	80048fe <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800480e:	b2d2      	uxtb	r2, r2
 8004810:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004816:	1c5a      	adds	r2, r3, #1
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004820:	3b01      	subs	r3, #1
 8004822:	b29a      	uxth	r2, r3
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800482c:	b29b      	uxth	r3, r3
 800482e:	3b01      	subs	r3, #1
 8004830:	b29a      	uxth	r2, r3
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800483a:	b29b      	uxth	r3, r3
 800483c:	2b00      	cmp	r3, #0
 800483e:	d034      	beq.n	80048aa <HAL_I2C_Master_Receive+0x186>
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004844:	2b00      	cmp	r3, #0
 8004846:	d130      	bne.n	80048aa <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	9300      	str	r3, [sp, #0]
 800484c:	6a3b      	ldr	r3, [r7, #32]
 800484e:	2200      	movs	r2, #0
 8004850:	2180      	movs	r1, #128	; 0x80
 8004852:	68f8      	ldr	r0, [r7, #12]
 8004854:	f000 fd95 	bl	8005382 <I2C_WaitOnFlagUntilTimeout>
 8004858:	4603      	mov	r3, r0
 800485a:	2b00      	cmp	r3, #0
 800485c:	d001      	beq.n	8004862 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800485e:	2301      	movs	r3, #1
 8004860:	e04d      	b.n	80048fe <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004866:	b29b      	uxth	r3, r3
 8004868:	2bff      	cmp	r3, #255	; 0xff
 800486a:	d90e      	bls.n	800488a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	22ff      	movs	r2, #255	; 0xff
 8004870:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004876:	b2da      	uxtb	r2, r3
 8004878:	8979      	ldrh	r1, [r7, #10]
 800487a:	2300      	movs	r3, #0
 800487c:	9300      	str	r3, [sp, #0]
 800487e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004882:	68f8      	ldr	r0, [r7, #12]
 8004884:	f000 ff94 	bl	80057b0 <I2C_TransferConfig>
 8004888:	e00f      	b.n	80048aa <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800488e:	b29a      	uxth	r2, r3
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004898:	b2da      	uxtb	r2, r3
 800489a:	8979      	ldrh	r1, [r7, #10]
 800489c:	2300      	movs	r3, #0
 800489e:	9300      	str	r3, [sp, #0]
 80048a0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80048a4:	68f8      	ldr	r0, [r7, #12]
 80048a6:	f000 ff83 	bl	80057b0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048ae:	b29b      	uxth	r3, r3
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d19d      	bne.n	80047f0 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80048b4:	697a      	ldr	r2, [r7, #20]
 80048b6:	6a39      	ldr	r1, [r7, #32]
 80048b8:	68f8      	ldr	r0, [r7, #12]
 80048ba:	f000 fde2 	bl	8005482 <I2C_WaitOnSTOPFlagUntilTimeout>
 80048be:	4603      	mov	r3, r0
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d001      	beq.n	80048c8 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80048c4:	2301      	movs	r3, #1
 80048c6:	e01a      	b.n	80048fe <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	2220      	movs	r2, #32
 80048ce:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	6859      	ldr	r1, [r3, #4]
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681a      	ldr	r2, [r3, #0]
 80048da:	4b0c      	ldr	r3, [pc, #48]	; (800490c <HAL_I2C_Master_Receive+0x1e8>)
 80048dc:	400b      	ands	r3, r1
 80048de:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	2220      	movs	r2, #32
 80048e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	2200      	movs	r2, #0
 80048ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	2200      	movs	r2, #0
 80048f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80048f8:	2300      	movs	r3, #0
 80048fa:	e000      	b.n	80048fe <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80048fc:	2302      	movs	r3, #2
  }
}
 80048fe:	4618      	mov	r0, r3
 8004900:	3718      	adds	r7, #24
 8004902:	46bd      	mov	sp, r7
 8004904:	bd80      	pop	{r7, pc}
 8004906:	bf00      	nop
 8004908:	80002400 	.word	0x80002400
 800490c:	fe00e800 	.word	0xfe00e800

08004910 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b084      	sub	sp, #16
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	699b      	ldr	r3, [r3, #24]
 800491e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800492c:	2b00      	cmp	r3, #0
 800492e:	d005      	beq.n	800493c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004934:	68ba      	ldr	r2, [r7, #8]
 8004936:	68f9      	ldr	r1, [r7, #12]
 8004938:	6878      	ldr	r0, [r7, #4]
 800493a:	4798      	blx	r3
  }
}
 800493c:	bf00      	nop
 800493e:	3710      	adds	r7, #16
 8004940:	46bd      	mov	sp, r7
 8004942:	bd80      	pop	{r7, pc}

08004944 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b086      	sub	sp, #24
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	699b      	ldr	r3, [r3, #24]
 8004952:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800495c:	697b      	ldr	r3, [r7, #20]
 800495e:	0a1b      	lsrs	r3, r3, #8
 8004960:	f003 0301 	and.w	r3, r3, #1
 8004964:	2b00      	cmp	r3, #0
 8004966:	d010      	beq.n	800498a <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004968:	693b      	ldr	r3, [r7, #16]
 800496a:	09db      	lsrs	r3, r3, #7
 800496c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8004970:	2b00      	cmp	r3, #0
 8004972:	d00a      	beq.n	800498a <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004978:	f043 0201 	orr.w	r2, r3, #1
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004988:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800498a:	697b      	ldr	r3, [r7, #20]
 800498c:	0a9b      	lsrs	r3, r3, #10
 800498e:	f003 0301 	and.w	r3, r3, #1
 8004992:	2b00      	cmp	r3, #0
 8004994:	d010      	beq.n	80049b8 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	09db      	lsrs	r3, r3, #7
 800499a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d00a      	beq.n	80049b8 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049a6:	f043 0208 	orr.w	r2, r3, #8
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80049b6:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80049b8:	697b      	ldr	r3, [r7, #20]
 80049ba:	0a5b      	lsrs	r3, r3, #9
 80049bc:	f003 0301 	and.w	r3, r3, #1
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d010      	beq.n	80049e6 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	09db      	lsrs	r3, r3, #7
 80049c8:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d00a      	beq.n	80049e6 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049d4:	f043 0202 	orr.w	r2, r3, #2
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80049e4:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049ea:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	f003 030b 	and.w	r3, r3, #11
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d003      	beq.n	80049fe <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 80049f6:	68f9      	ldr	r1, [r7, #12]
 80049f8:	6878      	ldr	r0, [r7, #4]
 80049fa:	f000 fb89 	bl	8005110 <I2C_ITError>
  }
}
 80049fe:	bf00      	nop
 8004a00:	3718      	adds	r7, #24
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bd80      	pop	{r7, pc}

08004a06 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004a06:	b480      	push	{r7}
 8004a08:	b083      	sub	sp, #12
 8004a0a:	af00      	add	r7, sp, #0
 8004a0c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004a0e:	bf00      	nop
 8004a10:	370c      	adds	r7, #12
 8004a12:	46bd      	mov	sp, r7
 8004a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a18:	4770      	bx	lr

08004a1a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004a1a:	b480      	push	{r7}
 8004a1c:	b083      	sub	sp, #12
 8004a1e:	af00      	add	r7, sp, #0
 8004a20:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004a22:	bf00      	nop
 8004a24:	370c      	adds	r7, #12
 8004a26:	46bd      	mov	sp, r7
 8004a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2c:	4770      	bx	lr

08004a2e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004a2e:	b480      	push	{r7}
 8004a30:	b083      	sub	sp, #12
 8004a32:	af00      	add	r7, sp, #0
 8004a34:	6078      	str	r0, [r7, #4]
 8004a36:	460b      	mov	r3, r1
 8004a38:	70fb      	strb	r3, [r7, #3]
 8004a3a:	4613      	mov	r3, r2
 8004a3c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004a3e:	bf00      	nop
 8004a40:	370c      	adds	r7, #12
 8004a42:	46bd      	mov	sp, r7
 8004a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a48:	4770      	bx	lr

08004a4a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004a4a:	b480      	push	{r7}
 8004a4c:	b083      	sub	sp, #12
 8004a4e:	af00      	add	r7, sp, #0
 8004a50:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8004a52:	bf00      	nop
 8004a54:	370c      	adds	r7, #12
 8004a56:	46bd      	mov	sp, r7
 8004a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5c:	4770      	bx	lr

08004a5e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004a5e:	b480      	push	{r7}
 8004a60:	b083      	sub	sp, #12
 8004a62:	af00      	add	r7, sp, #0
 8004a64:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004a66:	bf00      	nop
 8004a68:	370c      	adds	r7, #12
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a70:	4770      	bx	lr

08004a72 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004a72:	b480      	push	{r7}
 8004a74:	b083      	sub	sp, #12
 8004a76:	af00      	add	r7, sp, #0
 8004a78:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004a7a:	bf00      	nop
 8004a7c:	370c      	adds	r7, #12
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a84:	4770      	bx	lr

08004a86 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8004a86:	b580      	push	{r7, lr}
 8004a88:	b086      	sub	sp, #24
 8004a8a:	af00      	add	r7, sp, #0
 8004a8c:	60f8      	str	r0, [r7, #12]
 8004a8e:	60b9      	str	r1, [r7, #8]
 8004a90:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a96:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004aa2:	2b01      	cmp	r3, #1
 8004aa4:	d101      	bne.n	8004aaa <I2C_Slave_ISR_IT+0x24>
 8004aa6:	2302      	movs	r3, #2
 8004aa8:	e0ec      	b.n	8004c84 <I2C_Slave_ISR_IT+0x1fe>
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2201      	movs	r2, #1
 8004aae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	095b      	lsrs	r3, r3, #5
 8004ab6:	f003 0301 	and.w	r3, r3, #1
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d009      	beq.n	8004ad2 <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	095b      	lsrs	r3, r3, #5
 8004ac2:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d003      	beq.n	8004ad2 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8004aca:	6939      	ldr	r1, [r7, #16]
 8004acc:	68f8      	ldr	r0, [r7, #12]
 8004ace:	f000 f9bf 	bl	8004e50 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	091b      	lsrs	r3, r3, #4
 8004ad6:	f003 0301 	and.w	r3, r3, #1
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d04d      	beq.n	8004b7a <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	091b      	lsrs	r3, r3, #4
 8004ae2:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d047      	beq.n	8004b7a <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004aee:	b29b      	uxth	r3, r3
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d128      	bne.n	8004b46 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004afa:	b2db      	uxtb	r3, r3
 8004afc:	2b28      	cmp	r3, #40	; 0x28
 8004afe:	d108      	bne.n	8004b12 <I2C_Slave_ISR_IT+0x8c>
 8004b00:	697b      	ldr	r3, [r7, #20]
 8004b02:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004b06:	d104      	bne.n	8004b12 <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8004b08:	6939      	ldr	r1, [r7, #16]
 8004b0a:	68f8      	ldr	r0, [r7, #12]
 8004b0c:	f000 faaa 	bl	8005064 <I2C_ITListenCplt>
 8004b10:	e032      	b.n	8004b78 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b18:	b2db      	uxtb	r3, r3
 8004b1a:	2b29      	cmp	r3, #41	; 0x29
 8004b1c:	d10e      	bne.n	8004b3c <I2C_Slave_ISR_IT+0xb6>
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004b24:	d00a      	beq.n	8004b3c <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	2210      	movs	r2, #16
 8004b2c:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8004b2e:	68f8      	ldr	r0, [r7, #12]
 8004b30:	f000 fbe5 	bl	80052fe <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004b34:	68f8      	ldr	r0, [r7, #12]
 8004b36:	f000 f92d 	bl	8004d94 <I2C_ITSlaveSeqCplt>
 8004b3a:	e01d      	b.n	8004b78 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	2210      	movs	r2, #16
 8004b42:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8004b44:	e096      	b.n	8004c74 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	2210      	movs	r2, #16
 8004b4c:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b52:	f043 0204 	orr.w	r2, r3, #4
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d004      	beq.n	8004b6a <I2C_Slave_ISR_IT+0xe4>
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004b66:	f040 8085 	bne.w	8004c74 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b6e:	4619      	mov	r1, r3
 8004b70:	68f8      	ldr	r0, [r7, #12]
 8004b72:	f000 facd 	bl	8005110 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8004b76:	e07d      	b.n	8004c74 <I2C_Slave_ISR_IT+0x1ee>
 8004b78:	e07c      	b.n	8004c74 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8004b7a:	693b      	ldr	r3, [r7, #16]
 8004b7c:	089b      	lsrs	r3, r3, #2
 8004b7e:	f003 0301 	and.w	r3, r3, #1
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d030      	beq.n	8004be8 <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	089b      	lsrs	r3, r3, #2
 8004b8a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d02a      	beq.n	8004be8 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b96:	b29b      	uxth	r3, r3
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d018      	beq.n	8004bce <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba6:	b2d2      	uxtb	r2, r2
 8004ba8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bae:	1c5a      	adds	r2, r3, #1
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bb8:	3b01      	subs	r3, #1
 8004bba:	b29a      	uxth	r2, r3
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bc4:	b29b      	uxth	r3, r3
 8004bc6:	3b01      	subs	r3, #1
 8004bc8:	b29a      	uxth	r2, r3
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bd2:	b29b      	uxth	r3, r3
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d14f      	bne.n	8004c78 <I2C_Slave_ISR_IT+0x1f2>
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004bde:	d04b      	beq.n	8004c78 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8004be0:	68f8      	ldr	r0, [r7, #12]
 8004be2:	f000 f8d7 	bl	8004d94 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8004be6:	e047      	b.n	8004c78 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004be8:	693b      	ldr	r3, [r7, #16]
 8004bea:	08db      	lsrs	r3, r3, #3
 8004bec:	f003 0301 	and.w	r3, r3, #1
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d00a      	beq.n	8004c0a <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	08db      	lsrs	r3, r3, #3
 8004bf8:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d004      	beq.n	8004c0a <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8004c00:	6939      	ldr	r1, [r7, #16]
 8004c02:	68f8      	ldr	r0, [r7, #12]
 8004c04:	f000 f842 	bl	8004c8c <I2C_ITAddrCplt>
 8004c08:	e037      	b.n	8004c7a <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004c0a:	693b      	ldr	r3, [r7, #16]
 8004c0c:	085b      	lsrs	r3, r3, #1
 8004c0e:	f003 0301 	and.w	r3, r3, #1
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d031      	beq.n	8004c7a <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	085b      	lsrs	r3, r3, #1
 8004c1a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d02b      	beq.n	8004c7a <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c26:	b29b      	uxth	r3, r3
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d018      	beq.n	8004c5e <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c30:	781a      	ldrb	r2, [r3, #0]
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c3c:	1c5a      	adds	r2, r3, #1
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c46:	b29b      	uxth	r3, r3
 8004c48:	3b01      	subs	r3, #1
 8004c4a:	b29a      	uxth	r2, r3
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c54:	3b01      	subs	r3, #1
 8004c56:	b29a      	uxth	r2, r3
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	851a      	strh	r2, [r3, #40]	; 0x28
 8004c5c:	e00d      	b.n	8004c7a <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004c64:	d002      	beq.n	8004c6c <I2C_Slave_ISR_IT+0x1e6>
 8004c66:	697b      	ldr	r3, [r7, #20]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d106      	bne.n	8004c7a <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004c6c:	68f8      	ldr	r0, [r7, #12]
 8004c6e:	f000 f891 	bl	8004d94 <I2C_ITSlaveSeqCplt>
 8004c72:	e002      	b.n	8004c7a <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8004c74:	bf00      	nop
 8004c76:	e000      	b.n	8004c7a <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8004c78:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004c82:	2300      	movs	r3, #0
}
 8004c84:	4618      	mov	r0, r3
 8004c86:	3718      	adds	r7, #24
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	bd80      	pop	{r7, pc}

08004c8c <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b084      	sub	sp, #16
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
 8004c94:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c9c:	b2db      	uxtb	r3, r3
 8004c9e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004ca2:	2b28      	cmp	r3, #40	; 0x28
 8004ca4:	d16a      	bne.n	8004d7c <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	699b      	ldr	r3, [r3, #24]
 8004cac:	0c1b      	lsrs	r3, r3, #16
 8004cae:	b2db      	uxtb	r3, r3
 8004cb0:	f003 0301 	and.w	r3, r3, #1
 8004cb4:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	699b      	ldr	r3, [r3, #24]
 8004cbc:	0c1b      	lsrs	r3, r3, #16
 8004cbe:	b29b      	uxth	r3, r3
 8004cc0:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8004cc4:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	689b      	ldr	r3, [r3, #8]
 8004ccc:	b29b      	uxth	r3, r3
 8004cce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004cd2:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	68db      	ldr	r3, [r3, #12]
 8004cda:	b29b      	uxth	r3, r3
 8004cdc:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8004ce0:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	68db      	ldr	r3, [r3, #12]
 8004ce6:	2b02      	cmp	r3, #2
 8004ce8:	d138      	bne.n	8004d5c <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8004cea:	897b      	ldrh	r3, [r7, #10]
 8004cec:	09db      	lsrs	r3, r3, #7
 8004cee:	b29a      	uxth	r2, r3
 8004cf0:	89bb      	ldrh	r3, [r7, #12]
 8004cf2:	4053      	eors	r3, r2
 8004cf4:	b29b      	uxth	r3, r3
 8004cf6:	f003 0306 	and.w	r3, r3, #6
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d11c      	bne.n	8004d38 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8004cfe:	897b      	ldrh	r3, [r7, #10]
 8004d00:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d06:	1c5a      	adds	r2, r3, #1
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d10:	2b02      	cmp	r3, #2
 8004d12:	d13b      	bne.n	8004d8c <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2200      	movs	r2, #0
 8004d18:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	2208      	movs	r2, #8
 8004d20:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2200      	movs	r2, #0
 8004d26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004d2a:	89ba      	ldrh	r2, [r7, #12]
 8004d2c:	7bfb      	ldrb	r3, [r7, #15]
 8004d2e:	4619      	mov	r1, r3
 8004d30:	6878      	ldr	r0, [r7, #4]
 8004d32:	f7ff fe7c 	bl	8004a2e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004d36:	e029      	b.n	8004d8c <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8004d38:	893b      	ldrh	r3, [r7, #8]
 8004d3a:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004d3c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004d40:	6878      	ldr	r0, [r7, #4]
 8004d42:	f000 fdb1 	bl	80058a8 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004d4e:	89ba      	ldrh	r2, [r7, #12]
 8004d50:	7bfb      	ldrb	r3, [r7, #15]
 8004d52:	4619      	mov	r1, r3
 8004d54:	6878      	ldr	r0, [r7, #4]
 8004d56:	f7ff fe6a 	bl	8004a2e <HAL_I2C_AddrCallback>
}
 8004d5a:	e017      	b.n	8004d8c <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004d5c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004d60:	6878      	ldr	r0, [r7, #4]
 8004d62:	f000 fda1 	bl	80058a8 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004d6e:	89ba      	ldrh	r2, [r7, #12]
 8004d70:	7bfb      	ldrb	r3, [r7, #15]
 8004d72:	4619      	mov	r1, r3
 8004d74:	6878      	ldr	r0, [r7, #4]
 8004d76:	f7ff fe5a 	bl	8004a2e <HAL_I2C_AddrCallback>
}
 8004d7a:	e007      	b.n	8004d8c <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	2208      	movs	r2, #8
 8004d82:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2200      	movs	r2, #0
 8004d88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8004d8c:	bf00      	nop
 8004d8e:	3710      	adds	r7, #16
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bd80      	pop	{r7, pc}

08004d94 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b084      	sub	sp, #16
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2200      	movs	r2, #0
 8004da8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	0b9b      	lsrs	r3, r3, #14
 8004db0:	f003 0301 	and.w	r3, r3, #1
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d008      	beq.n	8004dca <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	681a      	ldr	r2, [r3, #0]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004dc6:	601a      	str	r2, [r3, #0]
 8004dc8:	e00d      	b.n	8004de6 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	0bdb      	lsrs	r3, r3, #15
 8004dce:	f003 0301 	and.w	r3, r3, #1
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d007      	beq.n	8004de6 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	681a      	ldr	r2, [r3, #0]
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004de4:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004dec:	b2db      	uxtb	r3, r3
 8004dee:	2b29      	cmp	r3, #41	; 0x29
 8004df0:	d112      	bne.n	8004e18 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2228      	movs	r2, #40	; 0x28
 8004df6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2221      	movs	r2, #33	; 0x21
 8004dfe:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004e00:	2101      	movs	r1, #1
 8004e02:	6878      	ldr	r0, [r7, #4]
 8004e04:	f000 fd50 	bl	80058a8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004e10:	6878      	ldr	r0, [r7, #4]
 8004e12:	f7ff fdf8 	bl	8004a06 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004e16:	e017      	b.n	8004e48 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e1e:	b2db      	uxtb	r3, r3
 8004e20:	2b2a      	cmp	r3, #42	; 0x2a
 8004e22:	d111      	bne.n	8004e48 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2228      	movs	r2, #40	; 0x28
 8004e28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2222      	movs	r2, #34	; 0x22
 8004e30:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004e32:	2102      	movs	r1, #2
 8004e34:	6878      	ldr	r0, [r7, #4]
 8004e36:	f000 fd37 	bl	80058a8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004e42:	6878      	ldr	r0, [r7, #4]
 8004e44:	f7ff fde9 	bl	8004a1a <HAL_I2C_SlaveRxCpltCallback>
}
 8004e48:	bf00      	nop
 8004e4a:	3710      	adds	r7, #16
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	bd80      	pop	{r7, pc}

08004e50 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b086      	sub	sp, #24
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
 8004e58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e6c:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	2220      	movs	r2, #32
 8004e74:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004e76:	7bfb      	ldrb	r3, [r7, #15]
 8004e78:	2b21      	cmp	r3, #33	; 0x21
 8004e7a:	d002      	beq.n	8004e82 <I2C_ITSlaveCplt+0x32>
 8004e7c:	7bfb      	ldrb	r3, [r7, #15]
 8004e7e:	2b29      	cmp	r3, #41	; 0x29
 8004e80:	d108      	bne.n	8004e94 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8004e82:	f248 0101 	movw	r1, #32769	; 0x8001
 8004e86:	6878      	ldr	r0, [r7, #4]
 8004e88:	f000 fd0e 	bl	80058a8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2221      	movs	r2, #33	; 0x21
 8004e90:	631a      	str	r2, [r3, #48]	; 0x30
 8004e92:	e00d      	b.n	8004eb0 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004e94:	7bfb      	ldrb	r3, [r7, #15]
 8004e96:	2b22      	cmp	r3, #34	; 0x22
 8004e98:	d002      	beq.n	8004ea0 <I2C_ITSlaveCplt+0x50>
 8004e9a:	7bfb      	ldrb	r3, [r7, #15]
 8004e9c:	2b2a      	cmp	r3, #42	; 0x2a
 8004e9e:	d107      	bne.n	8004eb0 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8004ea0:	f248 0102 	movw	r1, #32770	; 0x8002
 8004ea4:	6878      	ldr	r0, [r7, #4]
 8004ea6:	f000 fcff 	bl	80058a8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2222      	movs	r2, #34	; 0x22
 8004eae:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	685a      	ldr	r2, [r3, #4]
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004ebe:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	6859      	ldr	r1, [r3, #4]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681a      	ldr	r2, [r3, #0]
 8004eca:	4b64      	ldr	r3, [pc, #400]	; (800505c <I2C_ITSlaveCplt+0x20c>)
 8004ecc:	400b      	ands	r3, r1
 8004ece:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8004ed0:	6878      	ldr	r0, [r7, #4]
 8004ed2:	f000 fa14 	bl	80052fe <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	0b9b      	lsrs	r3, r3, #14
 8004eda:	f003 0301 	and.w	r3, r3, #1
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d013      	beq.n	8004f0a <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	681a      	ldr	r2, [r3, #0]
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004ef0:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d020      	beq.n	8004f3c <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	b29a      	uxth	r2, r3
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004f08:	e018      	b.n	8004f3c <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	0bdb      	lsrs	r3, r3, #15
 8004f0e:	f003 0301 	and.w	r3, r3, #1
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d012      	beq.n	8004f3c <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	681a      	ldr	r2, [r3, #0]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004f24:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d006      	beq.n	8004f3c <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	b29a      	uxth	r2, r3
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	089b      	lsrs	r3, r3, #2
 8004f40:	f003 0301 	and.w	r3, r3, #1
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d020      	beq.n	8004f8a <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8004f48:	697b      	ldr	r3, [r7, #20]
 8004f4a:	f023 0304 	bic.w	r3, r3, #4
 8004f4e:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f5a:	b2d2      	uxtb	r2, r2
 8004f5c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f62:	1c5a      	adds	r2, r3, #1
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d00c      	beq.n	8004f8a <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f74:	3b01      	subs	r3, #1
 8004f76:	b29a      	uxth	r2, r3
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f80:	b29b      	uxth	r3, r3
 8004f82:	3b01      	subs	r3, #1
 8004f84:	b29a      	uxth	r2, r3
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f8e:	b29b      	uxth	r3, r3
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d005      	beq.n	8004fa0 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f98:	f043 0204 	orr.w	r2, r3, #4
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2200      	movs	r2, #0
 8004fac:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d010      	beq.n	8004fd8 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fba:	4619      	mov	r1, r3
 8004fbc:	6878      	ldr	r0, [r7, #4]
 8004fbe:	f000 f8a7 	bl	8005110 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004fc8:	b2db      	uxtb	r3, r3
 8004fca:	2b28      	cmp	r3, #40	; 0x28
 8004fcc:	d141      	bne.n	8005052 <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8004fce:	6979      	ldr	r1, [r7, #20]
 8004fd0:	6878      	ldr	r0, [r7, #4]
 8004fd2:	f000 f847 	bl	8005064 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004fd6:	e03c      	b.n	8005052 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fdc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004fe0:	d014      	beq.n	800500c <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 8004fe2:	6878      	ldr	r0, [r7, #4]
 8004fe4:	f7ff fed6 	bl	8004d94 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	4a1d      	ldr	r2, [pc, #116]	; (8005060 <I2C_ITSlaveCplt+0x210>)
 8004fec:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2220      	movs	r2, #32
 8004ff2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2200      	movs	r2, #0
 8005000:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8005004:	6878      	ldr	r0, [r7, #4]
 8005006:	f7ff fd20 	bl	8004a4a <HAL_I2C_ListenCpltCallback>
}
 800500a:	e022      	b.n	8005052 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005012:	b2db      	uxtb	r3, r3
 8005014:	2b22      	cmp	r3, #34	; 0x22
 8005016:	d10e      	bne.n	8005036 <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2220      	movs	r2, #32
 800501c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2200      	movs	r2, #0
 8005024:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2200      	movs	r2, #0
 800502a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800502e:	6878      	ldr	r0, [r7, #4]
 8005030:	f7ff fcf3 	bl	8004a1a <HAL_I2C_SlaveRxCpltCallback>
}
 8005034:	e00d      	b.n	8005052 <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2220      	movs	r2, #32
 800503a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2200      	movs	r2, #0
 8005042:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2200      	movs	r2, #0
 8005048:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800504c:	6878      	ldr	r0, [r7, #4]
 800504e:	f7ff fcda 	bl	8004a06 <HAL_I2C_SlaveTxCpltCallback>
}
 8005052:	bf00      	nop
 8005054:	3718      	adds	r7, #24
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}
 800505a:	bf00      	nop
 800505c:	fe00e800 	.word	0xfe00e800
 8005060:	ffff0000 	.word	0xffff0000

08005064 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b082      	sub	sp, #8
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
 800506c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	4a26      	ldr	r2, [pc, #152]	; (800510c <I2C_ITListenCplt+0xa8>)
 8005072:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2200      	movs	r2, #0
 8005078:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2220      	movs	r2, #32
 800507e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2200      	movs	r2, #0
 8005086:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2200      	movs	r2, #0
 800508e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	089b      	lsrs	r3, r3, #2
 8005094:	f003 0301 	and.w	r3, r3, #1
 8005098:	2b00      	cmp	r3, #0
 800509a:	d022      	beq.n	80050e2 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a6:	b2d2      	uxtb	r2, r2
 80050a8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ae:	1c5a      	adds	r2, r3, #1
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d012      	beq.n	80050e2 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050c0:	3b01      	subs	r3, #1
 80050c2:	b29a      	uxth	r2, r3
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050cc:	b29b      	uxth	r3, r3
 80050ce:	3b01      	subs	r3, #1
 80050d0:	b29a      	uxth	r2, r3
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050da:	f043 0204 	orr.w	r2, r3, #4
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80050e2:	f248 0103 	movw	r1, #32771	; 0x8003
 80050e6:	6878      	ldr	r0, [r7, #4]
 80050e8:	f000 fbde 	bl	80058a8 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	2210      	movs	r2, #16
 80050f2:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2200      	movs	r2, #0
 80050f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80050fc:	6878      	ldr	r0, [r7, #4]
 80050fe:	f7ff fca4 	bl	8004a4a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8005102:	bf00      	nop
 8005104:	3708      	adds	r7, #8
 8005106:	46bd      	mov	sp, r7
 8005108:	bd80      	pop	{r7, pc}
 800510a:	bf00      	nop
 800510c:	ffff0000 	.word	0xffff0000

08005110 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b084      	sub	sp, #16
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
 8005118:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005120:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2200      	movs	r2, #0
 8005126:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	4a5d      	ldr	r2, [pc, #372]	; (80052a4 <I2C_ITError+0x194>)
 800512e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2200      	movs	r2, #0
 8005134:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	431a      	orrs	r2, r3
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8005142:	7bfb      	ldrb	r3, [r7, #15]
 8005144:	2b28      	cmp	r3, #40	; 0x28
 8005146:	d005      	beq.n	8005154 <I2C_ITError+0x44>
 8005148:	7bfb      	ldrb	r3, [r7, #15]
 800514a:	2b29      	cmp	r3, #41	; 0x29
 800514c:	d002      	beq.n	8005154 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800514e:	7bfb      	ldrb	r3, [r7, #15]
 8005150:	2b2a      	cmp	r3, #42	; 0x2a
 8005152:	d10b      	bne.n	800516c <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005154:	2103      	movs	r1, #3
 8005156:	6878      	ldr	r0, [r7, #4]
 8005158:	f000 fba6 	bl	80058a8 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2228      	movs	r2, #40	; 0x28
 8005160:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	4a50      	ldr	r2, [pc, #320]	; (80052a8 <I2C_ITError+0x198>)
 8005168:	635a      	str	r2, [r3, #52]	; 0x34
 800516a:	e011      	b.n	8005190 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800516c:	f248 0103 	movw	r1, #32771	; 0x8003
 8005170:	6878      	ldr	r0, [r7, #4]
 8005172:	f000 fb99 	bl	80058a8 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800517c:	b2db      	uxtb	r3, r3
 800517e:	2b60      	cmp	r3, #96	; 0x60
 8005180:	d003      	beq.n	800518a <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2220      	movs	r2, #32
 8005186:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2200      	movs	r2, #0
 800518e:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005194:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800519a:	2b00      	cmp	r3, #0
 800519c:	d039      	beq.n	8005212 <I2C_ITError+0x102>
 800519e:	68bb      	ldr	r3, [r7, #8]
 80051a0:	2b11      	cmp	r3, #17
 80051a2:	d002      	beq.n	80051aa <I2C_ITError+0x9a>
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	2b21      	cmp	r3, #33	; 0x21
 80051a8:	d133      	bne.n	8005212 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80051b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80051b8:	d107      	bne.n	80051ca <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	681a      	ldr	r2, [r3, #0]
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80051c8:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051ce:	4618      	mov	r0, r3
 80051d0:	f7fe fca4 	bl	8003b1c <HAL_DMA_GetState>
 80051d4:	4603      	mov	r3, r0
 80051d6:	2b01      	cmp	r3, #1
 80051d8:	d017      	beq.n	800520a <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051de:	4a33      	ldr	r2, [pc, #204]	; (80052ac <I2C_ITError+0x19c>)
 80051e0:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2200      	movs	r2, #0
 80051e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051ee:	4618      	mov	r0, r3
 80051f0:	f7fe fc72 	bl	8003ad8 <HAL_DMA_Abort_IT>
 80051f4:	4603      	mov	r3, r0
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d04d      	beq.n	8005296 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005200:	687a      	ldr	r2, [r7, #4]
 8005202:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005204:	4610      	mov	r0, r2
 8005206:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005208:	e045      	b.n	8005296 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800520a:	6878      	ldr	r0, [r7, #4]
 800520c:	f000 f850 	bl	80052b0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005210:	e041      	b.n	8005296 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005216:	2b00      	cmp	r3, #0
 8005218:	d039      	beq.n	800528e <I2C_ITError+0x17e>
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	2b12      	cmp	r3, #18
 800521e:	d002      	beq.n	8005226 <I2C_ITError+0x116>
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	2b22      	cmp	r3, #34	; 0x22
 8005224:	d133      	bne.n	800528e <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005230:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005234:	d107      	bne.n	8005246 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	681a      	ldr	r2, [r3, #0]
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005244:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800524a:	4618      	mov	r0, r3
 800524c:	f7fe fc66 	bl	8003b1c <HAL_DMA_GetState>
 8005250:	4603      	mov	r3, r0
 8005252:	2b01      	cmp	r3, #1
 8005254:	d017      	beq.n	8005286 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800525a:	4a14      	ldr	r2, [pc, #80]	; (80052ac <I2C_ITError+0x19c>)
 800525c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2200      	movs	r2, #0
 8005262:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800526a:	4618      	mov	r0, r3
 800526c:	f7fe fc34 	bl	8003ad8 <HAL_DMA_Abort_IT>
 8005270:	4603      	mov	r3, r0
 8005272:	2b00      	cmp	r3, #0
 8005274:	d011      	beq.n	800529a <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800527a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800527c:	687a      	ldr	r2, [r7, #4]
 800527e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005280:	4610      	mov	r0, r2
 8005282:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005284:	e009      	b.n	800529a <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8005286:	6878      	ldr	r0, [r7, #4]
 8005288:	f000 f812 	bl	80052b0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800528c:	e005      	b.n	800529a <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800528e:	6878      	ldr	r0, [r7, #4]
 8005290:	f000 f80e 	bl	80052b0 <I2C_TreatErrorCallback>
  }
}
 8005294:	e002      	b.n	800529c <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005296:	bf00      	nop
 8005298:	e000      	b.n	800529c <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800529a:	bf00      	nop
}
 800529c:	bf00      	nop
 800529e:	3710      	adds	r7, #16
 80052a0:	46bd      	mov	sp, r7
 80052a2:	bd80      	pop	{r7, pc}
 80052a4:	ffff0000 	.word	0xffff0000
 80052a8:	08004a87 	.word	0x08004a87
 80052ac:	08005347 	.word	0x08005347

080052b0 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b082      	sub	sp, #8
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80052be:	b2db      	uxtb	r3, r3
 80052c0:	2b60      	cmp	r3, #96	; 0x60
 80052c2:	d10e      	bne.n	80052e2 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2220      	movs	r2, #32
 80052c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2200      	movs	r2, #0
 80052d0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2200      	movs	r2, #0
 80052d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80052da:	6878      	ldr	r0, [r7, #4]
 80052dc:	f7ff fbc9 	bl	8004a72 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80052e0:	e009      	b.n	80052f6 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2200      	movs	r2, #0
 80052e6:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2200      	movs	r2, #0
 80052ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80052f0:	6878      	ldr	r0, [r7, #4]
 80052f2:	f7ff fbb4 	bl	8004a5e <HAL_I2C_ErrorCallback>
}
 80052f6:	bf00      	nop
 80052f8:	3708      	adds	r7, #8
 80052fa:	46bd      	mov	sp, r7
 80052fc:	bd80      	pop	{r7, pc}

080052fe <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80052fe:	b480      	push	{r7}
 8005300:	b083      	sub	sp, #12
 8005302:	af00      	add	r7, sp, #0
 8005304:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	699b      	ldr	r3, [r3, #24]
 800530c:	f003 0302 	and.w	r3, r3, #2
 8005310:	2b02      	cmp	r3, #2
 8005312:	d103      	bne.n	800531c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	2200      	movs	r2, #0
 800531a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	699b      	ldr	r3, [r3, #24]
 8005322:	f003 0301 	and.w	r3, r3, #1
 8005326:	2b01      	cmp	r3, #1
 8005328:	d007      	beq.n	800533a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	699a      	ldr	r2, [r3, #24]
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f042 0201 	orr.w	r2, r2, #1
 8005338:	619a      	str	r2, [r3, #24]
  }
}
 800533a:	bf00      	nop
 800533c:	370c      	adds	r7, #12
 800533e:	46bd      	mov	sp, r7
 8005340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005344:	4770      	bx	lr

08005346 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005346:	b580      	push	{r7, lr}
 8005348:	b084      	sub	sp, #16
 800534a:	af00      	add	r7, sp, #0
 800534c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005352:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005358:	2b00      	cmp	r3, #0
 800535a:	d003      	beq.n	8005364 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005360:	2200      	movs	r2, #0
 8005362:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005368:	2b00      	cmp	r3, #0
 800536a:	d003      	beq.n	8005374 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005370:	2200      	movs	r2, #0
 8005372:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8005374:	68f8      	ldr	r0, [r7, #12]
 8005376:	f7ff ff9b 	bl	80052b0 <I2C_TreatErrorCallback>
}
 800537a:	bf00      	nop
 800537c:	3710      	adds	r7, #16
 800537e:	46bd      	mov	sp, r7
 8005380:	bd80      	pop	{r7, pc}

08005382 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005382:	b580      	push	{r7, lr}
 8005384:	b084      	sub	sp, #16
 8005386:	af00      	add	r7, sp, #0
 8005388:	60f8      	str	r0, [r7, #12]
 800538a:	60b9      	str	r1, [r7, #8]
 800538c:	603b      	str	r3, [r7, #0]
 800538e:	4613      	mov	r3, r2
 8005390:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005392:	e022      	b.n	80053da <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	f1b3 3fff 	cmp.w	r3, #4294967295
 800539a:	d01e      	beq.n	80053da <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800539c:	f7fe f9bc 	bl	8003718 <HAL_GetTick>
 80053a0:	4602      	mov	r2, r0
 80053a2:	69bb      	ldr	r3, [r7, #24]
 80053a4:	1ad3      	subs	r3, r2, r3
 80053a6:	683a      	ldr	r2, [r7, #0]
 80053a8:	429a      	cmp	r2, r3
 80053aa:	d302      	bcc.n	80053b2 <I2C_WaitOnFlagUntilTimeout+0x30>
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d113      	bne.n	80053da <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053b6:	f043 0220 	orr.w	r2, r3, #32
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	2220      	movs	r2, #32
 80053c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	2200      	movs	r2, #0
 80053ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	2200      	movs	r2, #0
 80053d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80053d6:	2301      	movs	r3, #1
 80053d8:	e00f      	b.n	80053fa <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	699a      	ldr	r2, [r3, #24]
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	4013      	ands	r3, r2
 80053e4:	68ba      	ldr	r2, [r7, #8]
 80053e6:	429a      	cmp	r2, r3
 80053e8:	bf0c      	ite	eq
 80053ea:	2301      	moveq	r3, #1
 80053ec:	2300      	movne	r3, #0
 80053ee:	b2db      	uxtb	r3, r3
 80053f0:	461a      	mov	r2, r3
 80053f2:	79fb      	ldrb	r3, [r7, #7]
 80053f4:	429a      	cmp	r2, r3
 80053f6:	d0cd      	beq.n	8005394 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80053f8:	2300      	movs	r3, #0
}
 80053fa:	4618      	mov	r0, r3
 80053fc:	3710      	adds	r7, #16
 80053fe:	46bd      	mov	sp, r7
 8005400:	bd80      	pop	{r7, pc}

08005402 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005402:	b580      	push	{r7, lr}
 8005404:	b084      	sub	sp, #16
 8005406:	af00      	add	r7, sp, #0
 8005408:	60f8      	str	r0, [r7, #12]
 800540a:	60b9      	str	r1, [r7, #8]
 800540c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800540e:	e02c      	b.n	800546a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005410:	687a      	ldr	r2, [r7, #4]
 8005412:	68b9      	ldr	r1, [r7, #8]
 8005414:	68f8      	ldr	r0, [r7, #12]
 8005416:	f000 f8eb 	bl	80055f0 <I2C_IsErrorOccurred>
 800541a:	4603      	mov	r3, r0
 800541c:	2b00      	cmp	r3, #0
 800541e:	d001      	beq.n	8005424 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005420:	2301      	movs	r3, #1
 8005422:	e02a      	b.n	800547a <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	f1b3 3fff 	cmp.w	r3, #4294967295
 800542a:	d01e      	beq.n	800546a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800542c:	f7fe f974 	bl	8003718 <HAL_GetTick>
 8005430:	4602      	mov	r2, r0
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	1ad3      	subs	r3, r2, r3
 8005436:	68ba      	ldr	r2, [r7, #8]
 8005438:	429a      	cmp	r2, r3
 800543a:	d302      	bcc.n	8005442 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d113      	bne.n	800546a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005446:	f043 0220 	orr.w	r2, r3, #32
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	2220      	movs	r2, #32
 8005452:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	2200      	movs	r2, #0
 800545a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	2200      	movs	r2, #0
 8005462:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005466:	2301      	movs	r3, #1
 8005468:	e007      	b.n	800547a <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	699b      	ldr	r3, [r3, #24]
 8005470:	f003 0302 	and.w	r3, r3, #2
 8005474:	2b02      	cmp	r3, #2
 8005476:	d1cb      	bne.n	8005410 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005478:	2300      	movs	r3, #0
}
 800547a:	4618      	mov	r0, r3
 800547c:	3710      	adds	r7, #16
 800547e:	46bd      	mov	sp, r7
 8005480:	bd80      	pop	{r7, pc}

08005482 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005482:	b580      	push	{r7, lr}
 8005484:	b084      	sub	sp, #16
 8005486:	af00      	add	r7, sp, #0
 8005488:	60f8      	str	r0, [r7, #12]
 800548a:	60b9      	str	r1, [r7, #8]
 800548c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800548e:	e028      	b.n	80054e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005490:	687a      	ldr	r2, [r7, #4]
 8005492:	68b9      	ldr	r1, [r7, #8]
 8005494:	68f8      	ldr	r0, [r7, #12]
 8005496:	f000 f8ab 	bl	80055f0 <I2C_IsErrorOccurred>
 800549a:	4603      	mov	r3, r0
 800549c:	2b00      	cmp	r3, #0
 800549e:	d001      	beq.n	80054a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80054a0:	2301      	movs	r3, #1
 80054a2:	e026      	b.n	80054f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054a4:	f7fe f938 	bl	8003718 <HAL_GetTick>
 80054a8:	4602      	mov	r2, r0
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	1ad3      	subs	r3, r2, r3
 80054ae:	68ba      	ldr	r2, [r7, #8]
 80054b0:	429a      	cmp	r2, r3
 80054b2:	d302      	bcc.n	80054ba <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d113      	bne.n	80054e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054be:	f043 0220 	orr.w	r2, r3, #32
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	2220      	movs	r2, #32
 80054ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	2200      	movs	r2, #0
 80054d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	2200      	movs	r2, #0
 80054da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80054de:	2301      	movs	r3, #1
 80054e0:	e007      	b.n	80054f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	699b      	ldr	r3, [r3, #24]
 80054e8:	f003 0320 	and.w	r3, r3, #32
 80054ec:	2b20      	cmp	r3, #32
 80054ee:	d1cf      	bne.n	8005490 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80054f0:	2300      	movs	r3, #0
}
 80054f2:	4618      	mov	r0, r3
 80054f4:	3710      	adds	r7, #16
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bd80      	pop	{r7, pc}
	...

080054fc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b084      	sub	sp, #16
 8005500:	af00      	add	r7, sp, #0
 8005502:	60f8      	str	r0, [r7, #12]
 8005504:	60b9      	str	r1, [r7, #8]
 8005506:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005508:	e064      	b.n	80055d4 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800550a:	687a      	ldr	r2, [r7, #4]
 800550c:	68b9      	ldr	r1, [r7, #8]
 800550e:	68f8      	ldr	r0, [r7, #12]
 8005510:	f000 f86e 	bl	80055f0 <I2C_IsErrorOccurred>
 8005514:	4603      	mov	r3, r0
 8005516:	2b00      	cmp	r3, #0
 8005518:	d001      	beq.n	800551e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800551a:	2301      	movs	r3, #1
 800551c:	e062      	b.n	80055e4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	699b      	ldr	r3, [r3, #24]
 8005524:	f003 0320 	and.w	r3, r3, #32
 8005528:	2b20      	cmp	r3, #32
 800552a:	d138      	bne.n	800559e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	699b      	ldr	r3, [r3, #24]
 8005532:	f003 0304 	and.w	r3, r3, #4
 8005536:	2b04      	cmp	r3, #4
 8005538:	d105      	bne.n	8005546 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800553e:	2b00      	cmp	r3, #0
 8005540:	d001      	beq.n	8005546 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8005542:	2300      	movs	r3, #0
 8005544:	e04e      	b.n	80055e4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	699b      	ldr	r3, [r3, #24]
 800554c:	f003 0310 	and.w	r3, r3, #16
 8005550:	2b10      	cmp	r3, #16
 8005552:	d107      	bne.n	8005564 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	2210      	movs	r2, #16
 800555a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	2204      	movs	r2, #4
 8005560:	645a      	str	r2, [r3, #68]	; 0x44
 8005562:	e002      	b.n	800556a <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	2200      	movs	r2, #0
 8005568:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	2220      	movs	r2, #32
 8005570:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	6859      	ldr	r1, [r3, #4]
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681a      	ldr	r2, [r3, #0]
 800557c:	4b1b      	ldr	r3, [pc, #108]	; (80055ec <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 800557e:	400b      	ands	r3, r1
 8005580:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	2220      	movs	r2, #32
 8005586:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	2200      	movs	r2, #0
 800558e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	2200      	movs	r2, #0
 8005596:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800559a:	2301      	movs	r3, #1
 800559c:	e022      	b.n	80055e4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800559e:	f7fe f8bb 	bl	8003718 <HAL_GetTick>
 80055a2:	4602      	mov	r2, r0
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	1ad3      	subs	r3, r2, r3
 80055a8:	68ba      	ldr	r2, [r7, #8]
 80055aa:	429a      	cmp	r2, r3
 80055ac:	d302      	bcc.n	80055b4 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80055ae:	68bb      	ldr	r3, [r7, #8]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d10f      	bne.n	80055d4 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055b8:	f043 0220 	orr.w	r2, r3, #32
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	2220      	movs	r2, #32
 80055c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	2200      	movs	r2, #0
 80055cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80055d0:	2301      	movs	r3, #1
 80055d2:	e007      	b.n	80055e4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	699b      	ldr	r3, [r3, #24]
 80055da:	f003 0304 	and.w	r3, r3, #4
 80055de:	2b04      	cmp	r3, #4
 80055e0:	d193      	bne.n	800550a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80055e2:	2300      	movs	r3, #0
}
 80055e4:	4618      	mov	r0, r3
 80055e6:	3710      	adds	r7, #16
 80055e8:	46bd      	mov	sp, r7
 80055ea:	bd80      	pop	{r7, pc}
 80055ec:	fe00e800 	.word	0xfe00e800

080055f0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b08a      	sub	sp, #40	; 0x28
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	60f8      	str	r0, [r7, #12]
 80055f8:	60b9      	str	r1, [r7, #8]
 80055fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80055fc:	2300      	movs	r3, #0
 80055fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	699b      	ldr	r3, [r3, #24]
 8005608:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800560a:	2300      	movs	r3, #0
 800560c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005612:	69bb      	ldr	r3, [r7, #24]
 8005614:	f003 0310 	and.w	r3, r3, #16
 8005618:	2b00      	cmp	r3, #0
 800561a:	d068      	beq.n	80056ee <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	2210      	movs	r2, #16
 8005622:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005624:	e049      	b.n	80056ba <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	f1b3 3fff 	cmp.w	r3, #4294967295
 800562c:	d045      	beq.n	80056ba <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800562e:	f7fe f873 	bl	8003718 <HAL_GetTick>
 8005632:	4602      	mov	r2, r0
 8005634:	69fb      	ldr	r3, [r7, #28]
 8005636:	1ad3      	subs	r3, r2, r3
 8005638:	68ba      	ldr	r2, [r7, #8]
 800563a:	429a      	cmp	r2, r3
 800563c:	d302      	bcc.n	8005644 <I2C_IsErrorOccurred+0x54>
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d13a      	bne.n	80056ba <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	685b      	ldr	r3, [r3, #4]
 800564a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800564e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005656:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	699b      	ldr	r3, [r3, #24]
 800565e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005662:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005666:	d121      	bne.n	80056ac <I2C_IsErrorOccurred+0xbc>
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800566e:	d01d      	beq.n	80056ac <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005670:	7cfb      	ldrb	r3, [r7, #19]
 8005672:	2b20      	cmp	r3, #32
 8005674:	d01a      	beq.n	80056ac <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	685a      	ldr	r2, [r3, #4]
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005684:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005686:	f7fe f847 	bl	8003718 <HAL_GetTick>
 800568a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800568c:	e00e      	b.n	80056ac <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800568e:	f7fe f843 	bl	8003718 <HAL_GetTick>
 8005692:	4602      	mov	r2, r0
 8005694:	69fb      	ldr	r3, [r7, #28]
 8005696:	1ad3      	subs	r3, r2, r3
 8005698:	2b19      	cmp	r3, #25
 800569a:	d907      	bls.n	80056ac <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 800569c:	6a3b      	ldr	r3, [r7, #32]
 800569e:	f043 0320 	orr.w	r3, r3, #32
 80056a2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80056a4:	2301      	movs	r3, #1
 80056a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80056aa:	e006      	b.n	80056ba <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	699b      	ldr	r3, [r3, #24]
 80056b2:	f003 0320 	and.w	r3, r3, #32
 80056b6:	2b20      	cmp	r3, #32
 80056b8:	d1e9      	bne.n	800568e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	699b      	ldr	r3, [r3, #24]
 80056c0:	f003 0320 	and.w	r3, r3, #32
 80056c4:	2b20      	cmp	r3, #32
 80056c6:	d003      	beq.n	80056d0 <I2C_IsErrorOccurred+0xe0>
 80056c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d0aa      	beq.n	8005626 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80056d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d103      	bne.n	80056e0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	2220      	movs	r2, #32
 80056de:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80056e0:	6a3b      	ldr	r3, [r7, #32]
 80056e2:	f043 0304 	orr.w	r3, r3, #4
 80056e6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80056e8:	2301      	movs	r3, #1
 80056ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	699b      	ldr	r3, [r3, #24]
 80056f4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80056f6:	69bb      	ldr	r3, [r7, #24]
 80056f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d00b      	beq.n	8005718 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005700:	6a3b      	ldr	r3, [r7, #32]
 8005702:	f043 0301 	orr.w	r3, r3, #1
 8005706:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005710:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005712:	2301      	movs	r3, #1
 8005714:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005718:	69bb      	ldr	r3, [r7, #24]
 800571a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800571e:	2b00      	cmp	r3, #0
 8005720:	d00b      	beq.n	800573a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005722:	6a3b      	ldr	r3, [r7, #32]
 8005724:	f043 0308 	orr.w	r3, r3, #8
 8005728:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005732:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005734:	2301      	movs	r3, #1
 8005736:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800573a:	69bb      	ldr	r3, [r7, #24]
 800573c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005740:	2b00      	cmp	r3, #0
 8005742:	d00b      	beq.n	800575c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005744:	6a3b      	ldr	r3, [r7, #32]
 8005746:	f043 0302 	orr.w	r3, r3, #2
 800574a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005754:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005756:	2301      	movs	r3, #1
 8005758:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800575c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005760:	2b00      	cmp	r3, #0
 8005762:	d01c      	beq.n	800579e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005764:	68f8      	ldr	r0, [r7, #12]
 8005766:	f7ff fdca 	bl	80052fe <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	6859      	ldr	r1, [r3, #4]
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681a      	ldr	r2, [r3, #0]
 8005774:	4b0d      	ldr	r3, [pc, #52]	; (80057ac <I2C_IsErrorOccurred+0x1bc>)
 8005776:	400b      	ands	r3, r1
 8005778:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800577e:	6a3b      	ldr	r3, [r7, #32]
 8005780:	431a      	orrs	r2, r3
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	2220      	movs	r2, #32
 800578a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	2200      	movs	r2, #0
 8005792:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	2200      	movs	r2, #0
 800579a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800579e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80057a2:	4618      	mov	r0, r3
 80057a4:	3728      	adds	r7, #40	; 0x28
 80057a6:	46bd      	mov	sp, r7
 80057a8:	bd80      	pop	{r7, pc}
 80057aa:	bf00      	nop
 80057ac:	fe00e800 	.word	0xfe00e800

080057b0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b086      	sub	sp, #24
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	60f8      	str	r0, [r7, #12]
 80057b8:	607b      	str	r3, [r7, #4]
 80057ba:	460b      	mov	r3, r1
 80057bc:	817b      	strh	r3, [r7, #10]
 80057be:	4613      	mov	r3, r2
 80057c0:	727b      	strb	r3, [r7, #9]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4a2f      	ldr	r2, [pc, #188]	; (8005884 <I2C_TransferConfig+0xd4>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d013      	beq.n	80057f4 <I2C_TransferConfig+0x44>
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4a2d      	ldr	r2, [pc, #180]	; (8005888 <I2C_TransferConfig+0xd8>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d00e      	beq.n	80057f4 <I2C_TransferConfig+0x44>
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	4a2c      	ldr	r2, [pc, #176]	; (800588c <I2C_TransferConfig+0xdc>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d009      	beq.n	80057f4 <I2C_TransferConfig+0x44>
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	4a2a      	ldr	r2, [pc, #168]	; (8005890 <I2C_TransferConfig+0xe0>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d004      	beq.n	80057f4 <I2C_TransferConfig+0x44>
 80057ea:	f641 3147 	movw	r1, #6983	; 0x1b47
 80057ee:	4829      	ldr	r0, [pc, #164]	; (8005894 <I2C_TransferConfig+0xe4>)
 80057f0:	f7fd f95f 	bl	8002ab2 <assert_failed>
  assert_param(IS_TRANSFER_MODE(Mode));
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80057fa:	d00b      	beq.n	8005814 <I2C_TransferConfig+0x64>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005802:	d007      	beq.n	8005814 <I2C_TransferConfig+0x64>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d004      	beq.n	8005814 <I2C_TransferConfig+0x64>
 800580a:	f641 3148 	movw	r1, #6984	; 0x1b48
 800580e:	4821      	ldr	r0, [pc, #132]	; (8005894 <I2C_TransferConfig+0xe4>)
 8005810:	f7fd f94f 	bl	8002ab2 <assert_failed>
  assert_param(IS_TRANSFER_REQUEST(Request));
 8005814:	6a3b      	ldr	r3, [r7, #32]
 8005816:	4a20      	ldr	r2, [pc, #128]	; (8005898 <I2C_TransferConfig+0xe8>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d00f      	beq.n	800583c <I2C_TransferConfig+0x8c>
 800581c:	6a3b      	ldr	r3, [r7, #32]
 800581e:	4a1f      	ldr	r2, [pc, #124]	; (800589c <I2C_TransferConfig+0xec>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d00b      	beq.n	800583c <I2C_TransferConfig+0x8c>
 8005824:	6a3b      	ldr	r3, [r7, #32]
 8005826:	4a1e      	ldr	r2, [pc, #120]	; (80058a0 <I2C_TransferConfig+0xf0>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d007      	beq.n	800583c <I2C_TransferConfig+0x8c>
 800582c:	6a3b      	ldr	r3, [r7, #32]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d004      	beq.n	800583c <I2C_TransferConfig+0x8c>
 8005832:	f641 3149 	movw	r1, #6985	; 0x1b49
 8005836:	4817      	ldr	r0, [pc, #92]	; (8005894 <I2C_TransferConfig+0xe4>)
 8005838:	f7fd f93b 	bl	8002ab2 <assert_failed>

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800583c:	897b      	ldrh	r3, [r7, #10]
 800583e:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005842:	7a7b      	ldrb	r3, [r7, #9]
 8005844:	041b      	lsls	r3, r3, #16
 8005846:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800584a:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005850:	6a3b      	ldr	r3, [r7, #32]
 8005852:	4313      	orrs	r3, r2
 8005854:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005858:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	685a      	ldr	r2, [r3, #4]
 8005860:	6a3b      	ldr	r3, [r7, #32]
 8005862:	0d5b      	lsrs	r3, r3, #21
 8005864:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005868:	4b0e      	ldr	r3, [pc, #56]	; (80058a4 <I2C_TransferConfig+0xf4>)
 800586a:	430b      	orrs	r3, r1
 800586c:	43db      	mvns	r3, r3
 800586e:	ea02 0103 	and.w	r1, r2, r3
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	697a      	ldr	r2, [r7, #20]
 8005878:	430a      	orrs	r2, r1
 800587a:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800587c:	bf00      	nop
 800587e:	3718      	adds	r7, #24
 8005880:	46bd      	mov	sp, r7
 8005882:	bd80      	pop	{r7, pc}
 8005884:	40005400 	.word	0x40005400
 8005888:	40005800 	.word	0x40005800
 800588c:	40005c00 	.word	0x40005c00
 8005890:	40006000 	.word	0x40006000
 8005894:	0801672c 	.word	0x0801672c
 8005898:	80004000 	.word	0x80004000
 800589c:	80002400 	.word	0x80002400
 80058a0:	80002000 	.word	0x80002000
 80058a4:	03ff63ff 	.word	0x03ff63ff

080058a8 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80058a8:	b480      	push	{r7}
 80058aa:	b085      	sub	sp, #20
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
 80058b0:	460b      	mov	r3, r1
 80058b2:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80058b4:	2300      	movs	r3, #0
 80058b6:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80058b8:	887b      	ldrh	r3, [r7, #2]
 80058ba:	f003 0301 	and.w	r3, r3, #1
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d00f      	beq.n	80058e2 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 80058c8:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80058d0:	b2db      	uxtb	r3, r3
 80058d2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80058d6:	2b28      	cmp	r3, #40	; 0x28
 80058d8:	d003      	beq.n	80058e2 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80058e0:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80058e2:	887b      	ldrh	r3, [r7, #2]
 80058e4:	f003 0302 	and.w	r3, r3, #2
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d00f      	beq.n	800590c <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 80058f2:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80058fa:	b2db      	uxtb	r3, r3
 80058fc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005900:	2b28      	cmp	r3, #40	; 0x28
 8005902:	d003      	beq.n	800590c <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800590a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800590c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005910:	2b00      	cmp	r3, #0
 8005912:	da03      	bge.n	800591c <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800591a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800591c:	887b      	ldrh	r3, [r7, #2]
 800591e:	2b10      	cmp	r3, #16
 8005920:	d103      	bne.n	800592a <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8005928:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800592a:	887b      	ldrh	r3, [r7, #2]
 800592c:	2b20      	cmp	r3, #32
 800592e:	d103      	bne.n	8005938 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	f043 0320 	orr.w	r3, r3, #32
 8005936:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8005938:	887b      	ldrh	r3, [r7, #2]
 800593a:	2b40      	cmp	r3, #64	; 0x40
 800593c:	d103      	bne.n	8005946 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005944:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	6819      	ldr	r1, [r3, #0]
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	43da      	mvns	r2, r3
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	400a      	ands	r2, r1
 8005956:	601a      	str	r2, [r3, #0]
}
 8005958:	bf00      	nop
 800595a:	3714      	adds	r7, #20
 800595c:	46bd      	mov	sp, r7
 800595e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005962:	4770      	bx	lr

08005964 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b082      	sub	sp, #8
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
 800596c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4a32      	ldr	r2, [pc, #200]	; (8005a3c <HAL_I2CEx_ConfigAnalogFilter+0xd8>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d012      	beq.n	800599e <HAL_I2CEx_ConfigAnalogFilter+0x3a>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a30      	ldr	r2, [pc, #192]	; (8005a40 <HAL_I2CEx_ConfigAnalogFilter+0xdc>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d00d      	beq.n	800599e <HAL_I2CEx_ConfigAnalogFilter+0x3a>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a2f      	ldr	r2, [pc, #188]	; (8005a44 <HAL_I2CEx_ConfigAnalogFilter+0xe0>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d008      	beq.n	800599e <HAL_I2CEx_ConfigAnalogFilter+0x3a>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4a2d      	ldr	r2, [pc, #180]	; (8005a48 <HAL_I2CEx_ConfigAnalogFilter+0xe4>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d003      	beq.n	800599e <HAL_I2CEx_ConfigAnalogFilter+0x3a>
 8005996:	215e      	movs	r1, #94	; 0x5e
 8005998:	482c      	ldr	r0, [pc, #176]	; (8005a4c <HAL_I2CEx_ConfigAnalogFilter+0xe8>)
 800599a:	f7fd f88a 	bl	8002ab2 <assert_failed>
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d007      	beq.n	80059b4 <HAL_I2CEx_ConfigAnalogFilter+0x50>
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059aa:	d003      	beq.n	80059b4 <HAL_I2CEx_ConfigAnalogFilter+0x50>
 80059ac:	215f      	movs	r1, #95	; 0x5f
 80059ae:	4827      	ldr	r0, [pc, #156]	; (8005a4c <HAL_I2CEx_ConfigAnalogFilter+0xe8>)
 80059b0:	f7fd f87f 	bl	8002ab2 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80059ba:	b2db      	uxtb	r3, r3
 80059bc:	2b20      	cmp	r3, #32
 80059be:	d138      	bne.n	8005a32 <HAL_I2CEx_ConfigAnalogFilter+0xce>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80059c6:	2b01      	cmp	r3, #1
 80059c8:	d101      	bne.n	80059ce <HAL_I2CEx_ConfigAnalogFilter+0x6a>
 80059ca:	2302      	movs	r3, #2
 80059cc:	e032      	b.n	8005a34 <HAL_I2CEx_ConfigAnalogFilter+0xd0>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2201      	movs	r2, #1
 80059d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2224      	movs	r2, #36	; 0x24
 80059da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	681a      	ldr	r2, [r3, #0]
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f022 0201 	bic.w	r2, r2, #1
 80059ec:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	681a      	ldr	r2, [r3, #0]
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80059fc:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	6819      	ldr	r1, [r3, #0]
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	683a      	ldr	r2, [r7, #0]
 8005a0a:	430a      	orrs	r2, r1
 8005a0c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	681a      	ldr	r2, [r3, #0]
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f042 0201 	orr.w	r2, r2, #1
 8005a1c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2220      	movs	r2, #32
 8005a22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2200      	movs	r2, #0
 8005a2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005a2e:	2300      	movs	r3, #0
 8005a30:	e000      	b.n	8005a34 <HAL_I2CEx_ConfigAnalogFilter+0xd0>
  }
  else
  {
    return HAL_BUSY;
 8005a32:	2302      	movs	r3, #2
  }
}
 8005a34:	4618      	mov	r0, r3
 8005a36:	3708      	adds	r7, #8
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	bd80      	pop	{r7, pc}
 8005a3c:	40005400 	.word	0x40005400
 8005a40:	40005800 	.word	0x40005800
 8005a44:	40005c00 	.word	0x40005c00
 8005a48:	40006000 	.word	0x40006000
 8005a4c:	08016764 	.word	0x08016764

08005a50 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b084      	sub	sp, #16
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
 8005a58:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg;

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4a31      	ldr	r2, [pc, #196]	; (8005b24 <HAL_I2CEx_ConfigDigitalFilter+0xd4>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d012      	beq.n	8005a8a <HAL_I2CEx_ConfigDigitalFilter+0x3a>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4a2f      	ldr	r2, [pc, #188]	; (8005b28 <HAL_I2CEx_ConfigDigitalFilter+0xd8>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d00d      	beq.n	8005a8a <HAL_I2CEx_ConfigDigitalFilter+0x3a>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4a2e      	ldr	r2, [pc, #184]	; (8005b2c <HAL_I2CEx_ConfigDigitalFilter+0xdc>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d008      	beq.n	8005a8a <HAL_I2CEx_ConfigDigitalFilter+0x3a>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a2c      	ldr	r2, [pc, #176]	; (8005b30 <HAL_I2CEx_ConfigDigitalFilter+0xe0>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d003      	beq.n	8005a8a <HAL_I2CEx_ConfigDigitalFilter+0x3a>
 8005a82:	218c      	movs	r1, #140	; 0x8c
 8005a84:	482b      	ldr	r0, [pc, #172]	; (8005b34 <HAL_I2CEx_ConfigDigitalFilter+0xe4>)
 8005a86:	f7fd f814 	bl	8002ab2 <assert_failed>
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	2b0f      	cmp	r3, #15
 8005a8e:	d903      	bls.n	8005a98 <HAL_I2CEx_ConfigDigitalFilter+0x48>
 8005a90:	218d      	movs	r1, #141	; 0x8d
 8005a92:	4828      	ldr	r0, [pc, #160]	; (8005b34 <HAL_I2CEx_ConfigDigitalFilter+0xe4>)
 8005a94:	f7fd f80d 	bl	8002ab2 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a9e:	b2db      	uxtb	r3, r3
 8005aa0:	2b20      	cmp	r3, #32
 8005aa2:	d139      	bne.n	8005b18 <HAL_I2CEx_ConfigDigitalFilter+0xc8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005aaa:	2b01      	cmp	r3, #1
 8005aac:	d101      	bne.n	8005ab2 <HAL_I2CEx_ConfigDigitalFilter+0x62>
 8005aae:	2302      	movs	r3, #2
 8005ab0:	e033      	b.n	8005b1a <HAL_I2CEx_ConfigDigitalFilter+0xca>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2201      	movs	r2, #1
 8005ab6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2224      	movs	r2, #36	; 0x24
 8005abe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	681a      	ldr	r2, [r3, #0]
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f022 0201 	bic.w	r2, r2, #1
 8005ad0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005ae0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	021b      	lsls	r3, r3, #8
 8005ae6:	68fa      	ldr	r2, [r7, #12]
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	68fa      	ldr	r2, [r7, #12]
 8005af2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	681a      	ldr	r2, [r3, #0]
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f042 0201 	orr.w	r2, r2, #1
 8005b02:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2220      	movs	r2, #32
 8005b08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2200      	movs	r2, #0
 8005b10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005b14:	2300      	movs	r3, #0
 8005b16:	e000      	b.n	8005b1a <HAL_I2CEx_ConfigDigitalFilter+0xca>
  }
  else
  {
    return HAL_BUSY;
 8005b18:	2302      	movs	r3, #2
  }
}
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	3710      	adds	r7, #16
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bd80      	pop	{r7, pc}
 8005b22:	bf00      	nop
 8005b24:	40005400 	.word	0x40005400
 8005b28:	40005800 	.word	0x40005800
 8005b2c:	40005c00 	.word	0x40005c00
 8005b30:	40006000 	.word	0x40006000
 8005b34:	08016764 	.word	0x08016764

08005b38 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b082      	sub	sp, #8
 8005b3c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8005b3e:	2300      	movs	r3, #0
 8005b40:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8005b42:	4b23      	ldr	r3, [pc, #140]	; (8005bd0 <HAL_PWREx_EnableOverDrive+0x98>)
 8005b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b46:	4a22      	ldr	r2, [pc, #136]	; (8005bd0 <HAL_PWREx_EnableOverDrive+0x98>)
 8005b48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b4c:	6413      	str	r3, [r2, #64]	; 0x40
 8005b4e:	4b20      	ldr	r3, [pc, #128]	; (8005bd0 <HAL_PWREx_EnableOverDrive+0x98>)
 8005b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b56:	603b      	str	r3, [r7, #0]
 8005b58:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005b5a:	4b1e      	ldr	r3, [pc, #120]	; (8005bd4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4a1d      	ldr	r2, [pc, #116]	; (8005bd4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005b60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b64:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005b66:	f7fd fdd7 	bl	8003718 <HAL_GetTick>
 8005b6a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005b6c:	e009      	b.n	8005b82 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005b6e:	f7fd fdd3 	bl	8003718 <HAL_GetTick>
 8005b72:	4602      	mov	r2, r0
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	1ad3      	subs	r3, r2, r3
 8005b78:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005b7c:	d901      	bls.n	8005b82 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8005b7e:	2303      	movs	r3, #3
 8005b80:	e022      	b.n	8005bc8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005b82:	4b14      	ldr	r3, [pc, #80]	; (8005bd4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005b84:	685b      	ldr	r3, [r3, #4]
 8005b86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b8e:	d1ee      	bne.n	8005b6e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005b90:	4b10      	ldr	r3, [pc, #64]	; (8005bd4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4a0f      	ldr	r2, [pc, #60]	; (8005bd4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005b96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b9a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005b9c:	f7fd fdbc 	bl	8003718 <HAL_GetTick>
 8005ba0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005ba2:	e009      	b.n	8005bb8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005ba4:	f7fd fdb8 	bl	8003718 <HAL_GetTick>
 8005ba8:	4602      	mov	r2, r0
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	1ad3      	subs	r3, r2, r3
 8005bae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005bb2:	d901      	bls.n	8005bb8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8005bb4:	2303      	movs	r3, #3
 8005bb6:	e007      	b.n	8005bc8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005bb8:	4b06      	ldr	r3, [pc, #24]	; (8005bd4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005bba:	685b      	ldr	r3, [r3, #4]
 8005bbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bc0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005bc4:	d1ee      	bne.n	8005ba4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8005bc6:	2300      	movs	r3, #0
}
 8005bc8:	4618      	mov	r0, r3
 8005bca:	3708      	adds	r7, #8
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	bd80      	pop	{r7, pc}
 8005bd0:	40023800 	.word	0x40023800
 8005bd4:	40007000 	.word	0x40007000

08005bd8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b086      	sub	sp, #24
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8005be0:	2300      	movs	r3, #0
 8005be2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d101      	bne.n	8005bee <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8005bea:	2301      	movs	r3, #1
 8005bec:	e345      	b.n	800627a <HAL_RCC_OscConfig+0x6a2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	2b0f      	cmp	r3, #15
 8005bf4:	d904      	bls.n	8005c00 <HAL_RCC_OscConfig+0x28>
 8005bf6:	f240 1163 	movw	r1, #355	; 0x163
 8005bfa:	4892      	ldr	r0, [pc, #584]	; (8005e44 <HAL_RCC_OscConfig+0x26c>)
 8005bfc:	f7fc ff59 	bl	8002ab2 <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f003 0301 	and.w	r3, r3, #1
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	f000 809a 	beq.w	8005d42 <HAL_RCC_OscConfig+0x16a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	685b      	ldr	r3, [r3, #4]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d00e      	beq.n	8005c34 <HAL_RCC_OscConfig+0x5c>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	685b      	ldr	r3, [r3, #4]
 8005c1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c1e:	d009      	beq.n	8005c34 <HAL_RCC_OscConfig+0x5c>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	685b      	ldr	r3, [r3, #4]
 8005c24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005c28:	d004      	beq.n	8005c34 <HAL_RCC_OscConfig+0x5c>
 8005c2a:	f240 1169 	movw	r1, #361	; 0x169
 8005c2e:	4885      	ldr	r0, [pc, #532]	; (8005e44 <HAL_RCC_OscConfig+0x26c>)
 8005c30:	f7fc ff3f 	bl	8002ab2 <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005c34:	4b84      	ldr	r3, [pc, #528]	; (8005e48 <HAL_RCC_OscConfig+0x270>)
 8005c36:	689b      	ldr	r3, [r3, #8]
 8005c38:	f003 030c 	and.w	r3, r3, #12
 8005c3c:	2b04      	cmp	r3, #4
 8005c3e:	d00c      	beq.n	8005c5a <HAL_RCC_OscConfig+0x82>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005c40:	4b81      	ldr	r3, [pc, #516]	; (8005e48 <HAL_RCC_OscConfig+0x270>)
 8005c42:	689b      	ldr	r3, [r3, #8]
 8005c44:	f003 030c 	and.w	r3, r3, #12
 8005c48:	2b08      	cmp	r3, #8
 8005c4a:	d112      	bne.n	8005c72 <HAL_RCC_OscConfig+0x9a>
 8005c4c:	4b7e      	ldr	r3, [pc, #504]	; (8005e48 <HAL_RCC_OscConfig+0x270>)
 8005c4e:	685b      	ldr	r3, [r3, #4]
 8005c50:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c54:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005c58:	d10b      	bne.n	8005c72 <HAL_RCC_OscConfig+0x9a>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c5a:	4b7b      	ldr	r3, [pc, #492]	; (8005e48 <HAL_RCC_OscConfig+0x270>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d06c      	beq.n	8005d40 <HAL_RCC_OscConfig+0x168>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	685b      	ldr	r3, [r3, #4]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d168      	bne.n	8005d40 <HAL_RCC_OscConfig+0x168>
      {
        return HAL_ERROR;
 8005c6e:	2301      	movs	r3, #1
 8005c70:	e303      	b.n	800627a <HAL_RCC_OscConfig+0x6a2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	685b      	ldr	r3, [r3, #4]
 8005c76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c7a:	d106      	bne.n	8005c8a <HAL_RCC_OscConfig+0xb2>
 8005c7c:	4b72      	ldr	r3, [pc, #456]	; (8005e48 <HAL_RCC_OscConfig+0x270>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4a71      	ldr	r2, [pc, #452]	; (8005e48 <HAL_RCC_OscConfig+0x270>)
 8005c82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c86:	6013      	str	r3, [r2, #0]
 8005c88:	e02e      	b.n	8005ce8 <HAL_RCC_OscConfig+0x110>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	685b      	ldr	r3, [r3, #4]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d10c      	bne.n	8005cac <HAL_RCC_OscConfig+0xd4>
 8005c92:	4b6d      	ldr	r3, [pc, #436]	; (8005e48 <HAL_RCC_OscConfig+0x270>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4a6c      	ldr	r2, [pc, #432]	; (8005e48 <HAL_RCC_OscConfig+0x270>)
 8005c98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c9c:	6013      	str	r3, [r2, #0]
 8005c9e:	4b6a      	ldr	r3, [pc, #424]	; (8005e48 <HAL_RCC_OscConfig+0x270>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4a69      	ldr	r2, [pc, #420]	; (8005e48 <HAL_RCC_OscConfig+0x270>)
 8005ca4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005ca8:	6013      	str	r3, [r2, #0]
 8005caa:	e01d      	b.n	8005ce8 <HAL_RCC_OscConfig+0x110>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	685b      	ldr	r3, [r3, #4]
 8005cb0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005cb4:	d10c      	bne.n	8005cd0 <HAL_RCC_OscConfig+0xf8>
 8005cb6:	4b64      	ldr	r3, [pc, #400]	; (8005e48 <HAL_RCC_OscConfig+0x270>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4a63      	ldr	r2, [pc, #396]	; (8005e48 <HAL_RCC_OscConfig+0x270>)
 8005cbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005cc0:	6013      	str	r3, [r2, #0]
 8005cc2:	4b61      	ldr	r3, [pc, #388]	; (8005e48 <HAL_RCC_OscConfig+0x270>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	4a60      	ldr	r2, [pc, #384]	; (8005e48 <HAL_RCC_OscConfig+0x270>)
 8005cc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ccc:	6013      	str	r3, [r2, #0]
 8005cce:	e00b      	b.n	8005ce8 <HAL_RCC_OscConfig+0x110>
 8005cd0:	4b5d      	ldr	r3, [pc, #372]	; (8005e48 <HAL_RCC_OscConfig+0x270>)
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	4a5c      	ldr	r2, [pc, #368]	; (8005e48 <HAL_RCC_OscConfig+0x270>)
 8005cd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005cda:	6013      	str	r3, [r2, #0]
 8005cdc:	4b5a      	ldr	r3, [pc, #360]	; (8005e48 <HAL_RCC_OscConfig+0x270>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4a59      	ldr	r2, [pc, #356]	; (8005e48 <HAL_RCC_OscConfig+0x270>)
 8005ce2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005ce6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	685b      	ldr	r3, [r3, #4]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d013      	beq.n	8005d18 <HAL_RCC_OscConfig+0x140>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cf0:	f7fd fd12 	bl	8003718 <HAL_GetTick>
 8005cf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005cf6:	e008      	b.n	8005d0a <HAL_RCC_OscConfig+0x132>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005cf8:	f7fd fd0e 	bl	8003718 <HAL_GetTick>
 8005cfc:	4602      	mov	r2, r0
 8005cfe:	693b      	ldr	r3, [r7, #16]
 8005d00:	1ad3      	subs	r3, r2, r3
 8005d02:	2b64      	cmp	r3, #100	; 0x64
 8005d04:	d901      	bls.n	8005d0a <HAL_RCC_OscConfig+0x132>
          {
            return HAL_TIMEOUT;
 8005d06:	2303      	movs	r3, #3
 8005d08:	e2b7      	b.n	800627a <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d0a:	4b4f      	ldr	r3, [pc, #316]	; (8005e48 <HAL_RCC_OscConfig+0x270>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d0f0      	beq.n	8005cf8 <HAL_RCC_OscConfig+0x120>
 8005d16:	e014      	b.n	8005d42 <HAL_RCC_OscConfig+0x16a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d18:	f7fd fcfe 	bl	8003718 <HAL_GetTick>
 8005d1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d1e:	e008      	b.n	8005d32 <HAL_RCC_OscConfig+0x15a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005d20:	f7fd fcfa 	bl	8003718 <HAL_GetTick>
 8005d24:	4602      	mov	r2, r0
 8005d26:	693b      	ldr	r3, [r7, #16]
 8005d28:	1ad3      	subs	r3, r2, r3
 8005d2a:	2b64      	cmp	r3, #100	; 0x64
 8005d2c:	d901      	bls.n	8005d32 <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8005d2e:	2303      	movs	r3, #3
 8005d30:	e2a3      	b.n	800627a <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d32:	4b45      	ldr	r3, [pc, #276]	; (8005e48 <HAL_RCC_OscConfig+0x270>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d1f0      	bne.n	8005d20 <HAL_RCC_OscConfig+0x148>
 8005d3e:	e000      	b.n	8005d42 <HAL_RCC_OscConfig+0x16a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f003 0302 	and.w	r3, r3, #2
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	f000 8084 	beq.w	8005e58 <HAL_RCC_OscConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	68db      	ldr	r3, [r3, #12]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d008      	beq.n	8005d6a <HAL_RCC_OscConfig+0x192>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	68db      	ldr	r3, [r3, #12]
 8005d5c:	2b01      	cmp	r3, #1
 8005d5e:	d004      	beq.n	8005d6a <HAL_RCC_OscConfig+0x192>
 8005d60:	f240 119b 	movw	r1, #411	; 0x19b
 8005d64:	4837      	ldr	r0, [pc, #220]	; (8005e44 <HAL_RCC_OscConfig+0x26c>)
 8005d66:	f7fc fea4 	bl	8002ab2 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	691b      	ldr	r3, [r3, #16]
 8005d6e:	2b1f      	cmp	r3, #31
 8005d70:	d904      	bls.n	8005d7c <HAL_RCC_OscConfig+0x1a4>
 8005d72:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 8005d76:	4833      	ldr	r0, [pc, #204]	; (8005e44 <HAL_RCC_OscConfig+0x26c>)
 8005d78:	f7fc fe9b 	bl	8002ab2 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005d7c:	4b32      	ldr	r3, [pc, #200]	; (8005e48 <HAL_RCC_OscConfig+0x270>)
 8005d7e:	689b      	ldr	r3, [r3, #8]
 8005d80:	f003 030c 	and.w	r3, r3, #12
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d00b      	beq.n	8005da0 <HAL_RCC_OscConfig+0x1c8>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005d88:	4b2f      	ldr	r3, [pc, #188]	; (8005e48 <HAL_RCC_OscConfig+0x270>)
 8005d8a:	689b      	ldr	r3, [r3, #8]
 8005d8c:	f003 030c 	and.w	r3, r3, #12
 8005d90:	2b08      	cmp	r3, #8
 8005d92:	d11c      	bne.n	8005dce <HAL_RCC_OscConfig+0x1f6>
 8005d94:	4b2c      	ldr	r3, [pc, #176]	; (8005e48 <HAL_RCC_OscConfig+0x270>)
 8005d96:	685b      	ldr	r3, [r3, #4]
 8005d98:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d116      	bne.n	8005dce <HAL_RCC_OscConfig+0x1f6>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005da0:	4b29      	ldr	r3, [pc, #164]	; (8005e48 <HAL_RCC_OscConfig+0x270>)
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f003 0302 	and.w	r3, r3, #2
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d005      	beq.n	8005db8 <HAL_RCC_OscConfig+0x1e0>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	68db      	ldr	r3, [r3, #12]
 8005db0:	2b01      	cmp	r3, #1
 8005db2:	d001      	beq.n	8005db8 <HAL_RCC_OscConfig+0x1e0>
      {
        return HAL_ERROR;
 8005db4:	2301      	movs	r3, #1
 8005db6:	e260      	b.n	800627a <HAL_RCC_OscConfig+0x6a2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005db8:	4b23      	ldr	r3, [pc, #140]	; (8005e48 <HAL_RCC_OscConfig+0x270>)
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	691b      	ldr	r3, [r3, #16]
 8005dc4:	00db      	lsls	r3, r3, #3
 8005dc6:	4920      	ldr	r1, [pc, #128]	; (8005e48 <HAL_RCC_OscConfig+0x270>)
 8005dc8:	4313      	orrs	r3, r2
 8005dca:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005dcc:	e044      	b.n	8005e58 <HAL_RCC_OscConfig+0x280>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	68db      	ldr	r3, [r3, #12]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d023      	beq.n	8005e1e <HAL_RCC_OscConfig+0x246>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005dd6:	4b1c      	ldr	r3, [pc, #112]	; (8005e48 <HAL_RCC_OscConfig+0x270>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	4a1b      	ldr	r2, [pc, #108]	; (8005e48 <HAL_RCC_OscConfig+0x270>)
 8005ddc:	f043 0301 	orr.w	r3, r3, #1
 8005de0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005de2:	f7fd fc99 	bl	8003718 <HAL_GetTick>
 8005de6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005de8:	e008      	b.n	8005dfc <HAL_RCC_OscConfig+0x224>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005dea:	f7fd fc95 	bl	8003718 <HAL_GetTick>
 8005dee:	4602      	mov	r2, r0
 8005df0:	693b      	ldr	r3, [r7, #16]
 8005df2:	1ad3      	subs	r3, r2, r3
 8005df4:	2b02      	cmp	r3, #2
 8005df6:	d901      	bls.n	8005dfc <HAL_RCC_OscConfig+0x224>
          {
            return HAL_TIMEOUT;
 8005df8:	2303      	movs	r3, #3
 8005dfa:	e23e      	b.n	800627a <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005dfc:	4b12      	ldr	r3, [pc, #72]	; (8005e48 <HAL_RCC_OscConfig+0x270>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f003 0302 	and.w	r3, r3, #2
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d0f0      	beq.n	8005dea <HAL_RCC_OscConfig+0x212>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e08:	4b0f      	ldr	r3, [pc, #60]	; (8005e48 <HAL_RCC_OscConfig+0x270>)
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	691b      	ldr	r3, [r3, #16]
 8005e14:	00db      	lsls	r3, r3, #3
 8005e16:	490c      	ldr	r1, [pc, #48]	; (8005e48 <HAL_RCC_OscConfig+0x270>)
 8005e18:	4313      	orrs	r3, r2
 8005e1a:	600b      	str	r3, [r1, #0]
 8005e1c:	e01c      	b.n	8005e58 <HAL_RCC_OscConfig+0x280>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005e1e:	4b0a      	ldr	r3, [pc, #40]	; (8005e48 <HAL_RCC_OscConfig+0x270>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	4a09      	ldr	r2, [pc, #36]	; (8005e48 <HAL_RCC_OscConfig+0x270>)
 8005e24:	f023 0301 	bic.w	r3, r3, #1
 8005e28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e2a:	f7fd fc75 	bl	8003718 <HAL_GetTick>
 8005e2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e30:	e00c      	b.n	8005e4c <HAL_RCC_OscConfig+0x274>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005e32:	f7fd fc71 	bl	8003718 <HAL_GetTick>
 8005e36:	4602      	mov	r2, r0
 8005e38:	693b      	ldr	r3, [r7, #16]
 8005e3a:	1ad3      	subs	r3, r2, r3
 8005e3c:	2b02      	cmp	r3, #2
 8005e3e:	d905      	bls.n	8005e4c <HAL_RCC_OscConfig+0x274>
          {
            return HAL_TIMEOUT;
 8005e40:	2303      	movs	r3, #3
 8005e42:	e21a      	b.n	800627a <HAL_RCC_OscConfig+0x6a2>
 8005e44:	080167a0 	.word	0x080167a0
 8005e48:	40023800 	.word	0x40023800
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e4c:	4b7e      	ldr	r3, [pc, #504]	; (8006048 <HAL_RCC_OscConfig+0x470>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f003 0302 	and.w	r3, r3, #2
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d1ec      	bne.n	8005e32 <HAL_RCC_OscConfig+0x25a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f003 0308 	and.w	r3, r3, #8
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d043      	beq.n	8005eec <HAL_RCC_OscConfig+0x314>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	695b      	ldr	r3, [r3, #20]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d008      	beq.n	8005e7e <HAL_RCC_OscConfig+0x2a6>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	695b      	ldr	r3, [r3, #20]
 8005e70:	2b01      	cmp	r3, #1
 8005e72:	d004      	beq.n	8005e7e <HAL_RCC_OscConfig+0x2a6>
 8005e74:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 8005e78:	4874      	ldr	r0, [pc, #464]	; (800604c <HAL_RCC_OscConfig+0x474>)
 8005e7a:	f7fc fe1a 	bl	8002ab2 <assert_failed>

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	695b      	ldr	r3, [r3, #20]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d019      	beq.n	8005eba <HAL_RCC_OscConfig+0x2e2>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005e86:	4b70      	ldr	r3, [pc, #448]	; (8006048 <HAL_RCC_OscConfig+0x470>)
 8005e88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e8a:	4a6f      	ldr	r2, [pc, #444]	; (8006048 <HAL_RCC_OscConfig+0x470>)
 8005e8c:	f043 0301 	orr.w	r3, r3, #1
 8005e90:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e92:	f7fd fc41 	bl	8003718 <HAL_GetTick>
 8005e96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e98:	e008      	b.n	8005eac <HAL_RCC_OscConfig+0x2d4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005e9a:	f7fd fc3d 	bl	8003718 <HAL_GetTick>
 8005e9e:	4602      	mov	r2, r0
 8005ea0:	693b      	ldr	r3, [r7, #16]
 8005ea2:	1ad3      	subs	r3, r2, r3
 8005ea4:	2b02      	cmp	r3, #2
 8005ea6:	d901      	bls.n	8005eac <HAL_RCC_OscConfig+0x2d4>
        {
          return HAL_TIMEOUT;
 8005ea8:	2303      	movs	r3, #3
 8005eaa:	e1e6      	b.n	800627a <HAL_RCC_OscConfig+0x6a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005eac:	4b66      	ldr	r3, [pc, #408]	; (8006048 <HAL_RCC_OscConfig+0x470>)
 8005eae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005eb0:	f003 0302 	and.w	r3, r3, #2
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d0f0      	beq.n	8005e9a <HAL_RCC_OscConfig+0x2c2>
 8005eb8:	e018      	b.n	8005eec <HAL_RCC_OscConfig+0x314>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005eba:	4b63      	ldr	r3, [pc, #396]	; (8006048 <HAL_RCC_OscConfig+0x470>)
 8005ebc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ebe:	4a62      	ldr	r2, [pc, #392]	; (8006048 <HAL_RCC_OscConfig+0x470>)
 8005ec0:	f023 0301 	bic.w	r3, r3, #1
 8005ec4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ec6:	f7fd fc27 	bl	8003718 <HAL_GetTick>
 8005eca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ecc:	e008      	b.n	8005ee0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005ece:	f7fd fc23 	bl	8003718 <HAL_GetTick>
 8005ed2:	4602      	mov	r2, r0
 8005ed4:	693b      	ldr	r3, [r7, #16]
 8005ed6:	1ad3      	subs	r3, r2, r3
 8005ed8:	2b02      	cmp	r3, #2
 8005eda:	d901      	bls.n	8005ee0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005edc:	2303      	movs	r3, #3
 8005ede:	e1cc      	b.n	800627a <HAL_RCC_OscConfig+0x6a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ee0:	4b59      	ldr	r3, [pc, #356]	; (8006048 <HAL_RCC_OscConfig+0x470>)
 8005ee2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ee4:	f003 0302 	and.w	r3, r3, #2
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d1f0      	bne.n	8005ece <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f003 0304 	and.w	r3, r3, #4
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	f000 80bc 	beq.w	8006072 <HAL_RCC_OscConfig+0x49a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	689b      	ldr	r3, [r3, #8]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d00c      	beq.n	8005f1c <HAL_RCC_OscConfig+0x344>
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	689b      	ldr	r3, [r3, #8]
 8005f06:	2b01      	cmp	r3, #1
 8005f08:	d008      	beq.n	8005f1c <HAL_RCC_OscConfig+0x344>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	689b      	ldr	r3, [r3, #8]
 8005f0e:	2b05      	cmp	r3, #5
 8005f10:	d004      	beq.n	8005f1c <HAL_RCC_OscConfig+0x344>
 8005f12:	f240 2106 	movw	r1, #518	; 0x206
 8005f16:	484d      	ldr	r0, [pc, #308]	; (800604c <HAL_RCC_OscConfig+0x474>)
 8005f18:	f7fc fdcb 	bl	8002ab2 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005f1c:	4b4a      	ldr	r3, [pc, #296]	; (8006048 <HAL_RCC_OscConfig+0x470>)
 8005f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d10d      	bne.n	8005f44 <HAL_RCC_OscConfig+0x36c>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f28:	4b47      	ldr	r3, [pc, #284]	; (8006048 <HAL_RCC_OscConfig+0x470>)
 8005f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f2c:	4a46      	ldr	r2, [pc, #280]	; (8006048 <HAL_RCC_OscConfig+0x470>)
 8005f2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f32:	6413      	str	r3, [r2, #64]	; 0x40
 8005f34:	4b44      	ldr	r3, [pc, #272]	; (8006048 <HAL_RCC_OscConfig+0x470>)
 8005f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f3c:	60bb      	str	r3, [r7, #8]
 8005f3e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005f40:	2301      	movs	r3, #1
 8005f42:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005f44:	4b42      	ldr	r3, [pc, #264]	; (8006050 <HAL_RCC_OscConfig+0x478>)
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d118      	bne.n	8005f82 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8005f50:	4b3f      	ldr	r3, [pc, #252]	; (8006050 <HAL_RCC_OscConfig+0x478>)
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	4a3e      	ldr	r2, [pc, #248]	; (8006050 <HAL_RCC_OscConfig+0x478>)
 8005f56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f5a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005f5c:	f7fd fbdc 	bl	8003718 <HAL_GetTick>
 8005f60:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005f62:	e008      	b.n	8005f76 <HAL_RCC_OscConfig+0x39e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f64:	f7fd fbd8 	bl	8003718 <HAL_GetTick>
 8005f68:	4602      	mov	r2, r0
 8005f6a:	693b      	ldr	r3, [r7, #16]
 8005f6c:	1ad3      	subs	r3, r2, r3
 8005f6e:	2b64      	cmp	r3, #100	; 0x64
 8005f70:	d901      	bls.n	8005f76 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005f72:	2303      	movs	r3, #3
 8005f74:	e181      	b.n	800627a <HAL_RCC_OscConfig+0x6a2>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005f76:	4b36      	ldr	r3, [pc, #216]	; (8006050 <HAL_RCC_OscConfig+0x478>)
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d0f0      	beq.n	8005f64 <HAL_RCC_OscConfig+0x38c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	689b      	ldr	r3, [r3, #8]
 8005f86:	2b01      	cmp	r3, #1
 8005f88:	d106      	bne.n	8005f98 <HAL_RCC_OscConfig+0x3c0>
 8005f8a:	4b2f      	ldr	r3, [pc, #188]	; (8006048 <HAL_RCC_OscConfig+0x470>)
 8005f8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f8e:	4a2e      	ldr	r2, [pc, #184]	; (8006048 <HAL_RCC_OscConfig+0x470>)
 8005f90:	f043 0301 	orr.w	r3, r3, #1
 8005f94:	6713      	str	r3, [r2, #112]	; 0x70
 8005f96:	e02d      	b.n	8005ff4 <HAL_RCC_OscConfig+0x41c>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	689b      	ldr	r3, [r3, #8]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d10c      	bne.n	8005fba <HAL_RCC_OscConfig+0x3e2>
 8005fa0:	4b29      	ldr	r3, [pc, #164]	; (8006048 <HAL_RCC_OscConfig+0x470>)
 8005fa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fa4:	4a28      	ldr	r2, [pc, #160]	; (8006048 <HAL_RCC_OscConfig+0x470>)
 8005fa6:	f023 0301 	bic.w	r3, r3, #1
 8005faa:	6713      	str	r3, [r2, #112]	; 0x70
 8005fac:	4b26      	ldr	r3, [pc, #152]	; (8006048 <HAL_RCC_OscConfig+0x470>)
 8005fae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fb0:	4a25      	ldr	r2, [pc, #148]	; (8006048 <HAL_RCC_OscConfig+0x470>)
 8005fb2:	f023 0304 	bic.w	r3, r3, #4
 8005fb6:	6713      	str	r3, [r2, #112]	; 0x70
 8005fb8:	e01c      	b.n	8005ff4 <HAL_RCC_OscConfig+0x41c>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	689b      	ldr	r3, [r3, #8]
 8005fbe:	2b05      	cmp	r3, #5
 8005fc0:	d10c      	bne.n	8005fdc <HAL_RCC_OscConfig+0x404>
 8005fc2:	4b21      	ldr	r3, [pc, #132]	; (8006048 <HAL_RCC_OscConfig+0x470>)
 8005fc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fc6:	4a20      	ldr	r2, [pc, #128]	; (8006048 <HAL_RCC_OscConfig+0x470>)
 8005fc8:	f043 0304 	orr.w	r3, r3, #4
 8005fcc:	6713      	str	r3, [r2, #112]	; 0x70
 8005fce:	4b1e      	ldr	r3, [pc, #120]	; (8006048 <HAL_RCC_OscConfig+0x470>)
 8005fd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fd2:	4a1d      	ldr	r2, [pc, #116]	; (8006048 <HAL_RCC_OscConfig+0x470>)
 8005fd4:	f043 0301 	orr.w	r3, r3, #1
 8005fd8:	6713      	str	r3, [r2, #112]	; 0x70
 8005fda:	e00b      	b.n	8005ff4 <HAL_RCC_OscConfig+0x41c>
 8005fdc:	4b1a      	ldr	r3, [pc, #104]	; (8006048 <HAL_RCC_OscConfig+0x470>)
 8005fde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fe0:	4a19      	ldr	r2, [pc, #100]	; (8006048 <HAL_RCC_OscConfig+0x470>)
 8005fe2:	f023 0301 	bic.w	r3, r3, #1
 8005fe6:	6713      	str	r3, [r2, #112]	; 0x70
 8005fe8:	4b17      	ldr	r3, [pc, #92]	; (8006048 <HAL_RCC_OscConfig+0x470>)
 8005fea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fec:	4a16      	ldr	r2, [pc, #88]	; (8006048 <HAL_RCC_OscConfig+0x470>)
 8005fee:	f023 0304 	bic.w	r3, r3, #4
 8005ff2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	689b      	ldr	r3, [r3, #8]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d015      	beq.n	8006028 <HAL_RCC_OscConfig+0x450>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ffc:	f7fd fb8c 	bl	8003718 <HAL_GetTick>
 8006000:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006002:	e00a      	b.n	800601a <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006004:	f7fd fb88 	bl	8003718 <HAL_GetTick>
 8006008:	4602      	mov	r2, r0
 800600a:	693b      	ldr	r3, [r7, #16]
 800600c:	1ad3      	subs	r3, r2, r3
 800600e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006012:	4293      	cmp	r3, r2
 8006014:	d901      	bls.n	800601a <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8006016:	2303      	movs	r3, #3
 8006018:	e12f      	b.n	800627a <HAL_RCC_OscConfig+0x6a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800601a:	4b0b      	ldr	r3, [pc, #44]	; (8006048 <HAL_RCC_OscConfig+0x470>)
 800601c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800601e:	f003 0302 	and.w	r3, r3, #2
 8006022:	2b00      	cmp	r3, #0
 8006024:	d0ee      	beq.n	8006004 <HAL_RCC_OscConfig+0x42c>
 8006026:	e01b      	b.n	8006060 <HAL_RCC_OscConfig+0x488>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006028:	f7fd fb76 	bl	8003718 <HAL_GetTick>
 800602c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800602e:	e011      	b.n	8006054 <HAL_RCC_OscConfig+0x47c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006030:	f7fd fb72 	bl	8003718 <HAL_GetTick>
 8006034:	4602      	mov	r2, r0
 8006036:	693b      	ldr	r3, [r7, #16]
 8006038:	1ad3      	subs	r3, r2, r3
 800603a:	f241 3288 	movw	r2, #5000	; 0x1388
 800603e:	4293      	cmp	r3, r2
 8006040:	d908      	bls.n	8006054 <HAL_RCC_OscConfig+0x47c>
        {
          return HAL_TIMEOUT;
 8006042:	2303      	movs	r3, #3
 8006044:	e119      	b.n	800627a <HAL_RCC_OscConfig+0x6a2>
 8006046:	bf00      	nop
 8006048:	40023800 	.word	0x40023800
 800604c:	080167a0 	.word	0x080167a0
 8006050:	40007000 	.word	0x40007000
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006054:	4b8b      	ldr	r3, [pc, #556]	; (8006284 <HAL_RCC_OscConfig+0x6ac>)
 8006056:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006058:	f003 0302 	and.w	r3, r3, #2
 800605c:	2b00      	cmp	r3, #0
 800605e:	d1e7      	bne.n	8006030 <HAL_RCC_OscConfig+0x458>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006060:	7dfb      	ldrb	r3, [r7, #23]
 8006062:	2b01      	cmp	r3, #1
 8006064:	d105      	bne.n	8006072 <HAL_RCC_OscConfig+0x49a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006066:	4b87      	ldr	r3, [pc, #540]	; (8006284 <HAL_RCC_OscConfig+0x6ac>)
 8006068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800606a:	4a86      	ldr	r2, [pc, #536]	; (8006284 <HAL_RCC_OscConfig+0x6ac>)
 800606c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006070:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	699b      	ldr	r3, [r3, #24]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d00c      	beq.n	8006094 <HAL_RCC_OscConfig+0x4bc>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	699b      	ldr	r3, [r3, #24]
 800607e:	2b01      	cmp	r3, #1
 8006080:	d008      	beq.n	8006094 <HAL_RCC_OscConfig+0x4bc>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	699b      	ldr	r3, [r3, #24]
 8006086:	2b02      	cmp	r3, #2
 8006088:	d004      	beq.n	8006094 <HAL_RCC_OscConfig+0x4bc>
 800608a:	f240 214a 	movw	r1, #586	; 0x24a
 800608e:	487e      	ldr	r0, [pc, #504]	; (8006288 <HAL_RCC_OscConfig+0x6b0>)
 8006090:	f7fc fd0f 	bl	8002ab2 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	699b      	ldr	r3, [r3, #24]
 8006098:	2b00      	cmp	r3, #0
 800609a:	f000 80ed 	beq.w	8006278 <HAL_RCC_OscConfig+0x6a0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800609e:	4b79      	ldr	r3, [pc, #484]	; (8006284 <HAL_RCC_OscConfig+0x6ac>)
 80060a0:	689b      	ldr	r3, [r3, #8]
 80060a2:	f003 030c 	and.w	r3, r3, #12
 80060a6:	2b08      	cmp	r3, #8
 80060a8:	f000 80b4 	beq.w	8006214 <HAL_RCC_OscConfig+0x63c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	699b      	ldr	r3, [r3, #24]
 80060b0:	2b02      	cmp	r3, #2
 80060b2:	f040 8095 	bne.w	80061e0 <HAL_RCC_OscConfig+0x608>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	69db      	ldr	r3, [r3, #28]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d009      	beq.n	80060d2 <HAL_RCC_OscConfig+0x4fa>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	69db      	ldr	r3, [r3, #28]
 80060c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80060c6:	d004      	beq.n	80060d2 <HAL_RCC_OscConfig+0x4fa>
 80060c8:	f240 2153 	movw	r1, #595	; 0x253
 80060cc:	486e      	ldr	r0, [pc, #440]	; (8006288 <HAL_RCC_OscConfig+0x6b0>)
 80060ce:	f7fc fcf0 	bl	8002ab2 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6a1b      	ldr	r3, [r3, #32]
 80060d6:	2b01      	cmp	r3, #1
 80060d8:	d903      	bls.n	80060e2 <HAL_RCC_OscConfig+0x50a>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6a1b      	ldr	r3, [r3, #32]
 80060de:	2b3f      	cmp	r3, #63	; 0x3f
 80060e0:	d904      	bls.n	80060ec <HAL_RCC_OscConfig+0x514>
 80060e2:	f44f 7115 	mov.w	r1, #596	; 0x254
 80060e6:	4868      	ldr	r0, [pc, #416]	; (8006288 <HAL_RCC_OscConfig+0x6b0>)
 80060e8:	f7fc fce3 	bl	8002ab2 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060f0:	2b31      	cmp	r3, #49	; 0x31
 80060f2:	d904      	bls.n	80060fe <HAL_RCC_OscConfig+0x526>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060f8:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 80060fc:	d904      	bls.n	8006108 <HAL_RCC_OscConfig+0x530>
 80060fe:	f240 2155 	movw	r1, #597	; 0x255
 8006102:	4861      	ldr	r0, [pc, #388]	; (8006288 <HAL_RCC_OscConfig+0x6b0>)
 8006104:	f7fc fcd5 	bl	8002ab2 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800610c:	2b02      	cmp	r3, #2
 800610e:	d010      	beq.n	8006132 <HAL_RCC_OscConfig+0x55a>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006114:	2b04      	cmp	r3, #4
 8006116:	d00c      	beq.n	8006132 <HAL_RCC_OscConfig+0x55a>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800611c:	2b06      	cmp	r3, #6
 800611e:	d008      	beq.n	8006132 <HAL_RCC_OscConfig+0x55a>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006124:	2b08      	cmp	r3, #8
 8006126:	d004      	beq.n	8006132 <HAL_RCC_OscConfig+0x55a>
 8006128:	f240 2156 	movw	r1, #598	; 0x256
 800612c:	4856      	ldr	r0, [pc, #344]	; (8006288 <HAL_RCC_OscConfig+0x6b0>)
 800612e:	f7fc fcc0 	bl	8002ab2 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006136:	2b01      	cmp	r3, #1
 8006138:	d903      	bls.n	8006142 <HAL_RCC_OscConfig+0x56a>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800613e:	2b0f      	cmp	r3, #15
 8006140:	d904      	bls.n	800614c <HAL_RCC_OscConfig+0x574>
 8006142:	f240 2157 	movw	r1, #599	; 0x257
 8006146:	4850      	ldr	r0, [pc, #320]	; (8006288 <HAL_RCC_OscConfig+0x6b0>)
 8006148:	f7fc fcb3 	bl	8002ab2 <assert_failed>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800614c:	4b4d      	ldr	r3, [pc, #308]	; (8006284 <HAL_RCC_OscConfig+0x6ac>)
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	4a4c      	ldr	r2, [pc, #304]	; (8006284 <HAL_RCC_OscConfig+0x6ac>)
 8006152:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006156:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006158:	f7fd fade 	bl	8003718 <HAL_GetTick>
 800615c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800615e:	e008      	b.n	8006172 <HAL_RCC_OscConfig+0x59a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006160:	f7fd fada 	bl	8003718 <HAL_GetTick>
 8006164:	4602      	mov	r2, r0
 8006166:	693b      	ldr	r3, [r7, #16]
 8006168:	1ad3      	subs	r3, r2, r3
 800616a:	2b02      	cmp	r3, #2
 800616c:	d901      	bls.n	8006172 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800616e:	2303      	movs	r3, #3
 8006170:	e083      	b.n	800627a <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006172:	4b44      	ldr	r3, [pc, #272]	; (8006284 <HAL_RCC_OscConfig+0x6ac>)
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800617a:	2b00      	cmp	r3, #0
 800617c:	d1f0      	bne.n	8006160 <HAL_RCC_OscConfig+0x588>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	69da      	ldr	r2, [r3, #28]
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6a1b      	ldr	r3, [r3, #32]
 8006186:	431a      	orrs	r2, r3
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800618c:	019b      	lsls	r3, r3, #6
 800618e:	431a      	orrs	r2, r3
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006194:	085b      	lsrs	r3, r3, #1
 8006196:	3b01      	subs	r3, #1
 8006198:	041b      	lsls	r3, r3, #16
 800619a:	431a      	orrs	r2, r3
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061a0:	061b      	lsls	r3, r3, #24
 80061a2:	4313      	orrs	r3, r2
 80061a4:	4a37      	ldr	r2, [pc, #220]	; (8006284 <HAL_RCC_OscConfig+0x6ac>)
 80061a6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80061aa:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80061ac:	4b35      	ldr	r3, [pc, #212]	; (8006284 <HAL_RCC_OscConfig+0x6ac>)
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	4a34      	ldr	r2, [pc, #208]	; (8006284 <HAL_RCC_OscConfig+0x6ac>)
 80061b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80061b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061b8:	f7fd faae 	bl	8003718 <HAL_GetTick>
 80061bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80061be:	e008      	b.n	80061d2 <HAL_RCC_OscConfig+0x5fa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80061c0:	f7fd faaa 	bl	8003718 <HAL_GetTick>
 80061c4:	4602      	mov	r2, r0
 80061c6:	693b      	ldr	r3, [r7, #16]
 80061c8:	1ad3      	subs	r3, r2, r3
 80061ca:	2b02      	cmp	r3, #2
 80061cc:	d901      	bls.n	80061d2 <HAL_RCC_OscConfig+0x5fa>
          {
            return HAL_TIMEOUT;
 80061ce:	2303      	movs	r3, #3
 80061d0:	e053      	b.n	800627a <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80061d2:	4b2c      	ldr	r3, [pc, #176]	; (8006284 <HAL_RCC_OscConfig+0x6ac>)
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d0f0      	beq.n	80061c0 <HAL_RCC_OscConfig+0x5e8>
 80061de:	e04b      	b.n	8006278 <HAL_RCC_OscConfig+0x6a0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80061e0:	4b28      	ldr	r3, [pc, #160]	; (8006284 <HAL_RCC_OscConfig+0x6ac>)
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	4a27      	ldr	r2, [pc, #156]	; (8006284 <HAL_RCC_OscConfig+0x6ac>)
 80061e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80061ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061ec:	f7fd fa94 	bl	8003718 <HAL_GetTick>
 80061f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061f2:	e008      	b.n	8006206 <HAL_RCC_OscConfig+0x62e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80061f4:	f7fd fa90 	bl	8003718 <HAL_GetTick>
 80061f8:	4602      	mov	r2, r0
 80061fa:	693b      	ldr	r3, [r7, #16]
 80061fc:	1ad3      	subs	r3, r2, r3
 80061fe:	2b02      	cmp	r3, #2
 8006200:	d901      	bls.n	8006206 <HAL_RCC_OscConfig+0x62e>
          {
            return HAL_TIMEOUT;
 8006202:	2303      	movs	r3, #3
 8006204:	e039      	b.n	800627a <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006206:	4b1f      	ldr	r3, [pc, #124]	; (8006284 <HAL_RCC_OscConfig+0x6ac>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800620e:	2b00      	cmp	r3, #0
 8006210:	d1f0      	bne.n	80061f4 <HAL_RCC_OscConfig+0x61c>
 8006212:	e031      	b.n	8006278 <HAL_RCC_OscConfig+0x6a0>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8006214:	4b1b      	ldr	r3, [pc, #108]	; (8006284 <HAL_RCC_OscConfig+0x6ac>)
 8006216:	685b      	ldr	r3, [r3, #4]
 8006218:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	699b      	ldr	r3, [r3, #24]
 800621e:	2b01      	cmp	r3, #1
 8006220:	d028      	beq.n	8006274 <HAL_RCC_OscConfig+0x69c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800622c:	429a      	cmp	r2, r3
 800622e:	d121      	bne.n	8006274 <HAL_RCC_OscConfig+0x69c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800623a:	429a      	cmp	r2, r3
 800623c:	d11a      	bne.n	8006274 <HAL_RCC_OscConfig+0x69c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800623e:	68fa      	ldr	r2, [r7, #12]
 8006240:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006244:	4013      	ands	r3, r2
 8006246:	687a      	ldr	r2, [r7, #4]
 8006248:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800624a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800624c:	4293      	cmp	r3, r2
 800624e:	d111      	bne.n	8006274 <HAL_RCC_OscConfig+0x69c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800625a:	085b      	lsrs	r3, r3, #1
 800625c:	3b01      	subs	r3, #1
 800625e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006260:	429a      	cmp	r2, r3
 8006262:	d107      	bne.n	8006274 <HAL_RCC_OscConfig+0x69c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800626e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006270:	429a      	cmp	r2, r3
 8006272:	d001      	beq.n	8006278 <HAL_RCC_OscConfig+0x6a0>
#endif
      {
        return HAL_ERROR;
 8006274:	2301      	movs	r3, #1
 8006276:	e000      	b.n	800627a <HAL_RCC_OscConfig+0x6a2>
      }
    }
  }
  return HAL_OK;
 8006278:	2300      	movs	r3, #0
}
 800627a:	4618      	mov	r0, r3
 800627c:	3718      	adds	r7, #24
 800627e:	46bd      	mov	sp, r7
 8006280:	bd80      	pop	{r7, pc}
 8006282:	bf00      	nop
 8006284:	40023800 	.word	0x40023800
 8006288:	080167a0 	.word	0x080167a0

0800628c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800628c:	b580      	push	{r7, lr}
 800628e:	b084      	sub	sp, #16
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
 8006294:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8006296:	2300      	movs	r3, #0
 8006298:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d101      	bne.n	80062a4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80062a0:	2301      	movs	r3, #1
 80062a2:	e18c      	b.n	80065be <HAL_RCC_ClockConfig+0x332>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d003      	beq.n	80062b4 <HAL_RCC_ClockConfig+0x28>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	2b0f      	cmp	r3, #15
 80062b2:	d904      	bls.n	80062be <HAL_RCC_ClockConfig+0x32>
 80062b4:	f240 21dd 	movw	r1, #733	; 0x2dd
 80062b8:	4887      	ldr	r0, [pc, #540]	; (80064d8 <HAL_RCC_ClockConfig+0x24c>)
 80062ba:	f7fc fbfa 	bl	8002ab2 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d031      	beq.n	8006328 <HAL_RCC_ClockConfig+0x9c>
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	2b01      	cmp	r3, #1
 80062c8:	d02e      	beq.n	8006328 <HAL_RCC_ClockConfig+0x9c>
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	2b02      	cmp	r3, #2
 80062ce:	d02b      	beq.n	8006328 <HAL_RCC_ClockConfig+0x9c>
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	2b03      	cmp	r3, #3
 80062d4:	d028      	beq.n	8006328 <HAL_RCC_ClockConfig+0x9c>
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	2b04      	cmp	r3, #4
 80062da:	d025      	beq.n	8006328 <HAL_RCC_ClockConfig+0x9c>
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	2b05      	cmp	r3, #5
 80062e0:	d022      	beq.n	8006328 <HAL_RCC_ClockConfig+0x9c>
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	2b06      	cmp	r3, #6
 80062e6:	d01f      	beq.n	8006328 <HAL_RCC_ClockConfig+0x9c>
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	2b07      	cmp	r3, #7
 80062ec:	d01c      	beq.n	8006328 <HAL_RCC_ClockConfig+0x9c>
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	2b08      	cmp	r3, #8
 80062f2:	d019      	beq.n	8006328 <HAL_RCC_ClockConfig+0x9c>
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	2b09      	cmp	r3, #9
 80062f8:	d016      	beq.n	8006328 <HAL_RCC_ClockConfig+0x9c>
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	2b0a      	cmp	r3, #10
 80062fe:	d013      	beq.n	8006328 <HAL_RCC_ClockConfig+0x9c>
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	2b0b      	cmp	r3, #11
 8006304:	d010      	beq.n	8006328 <HAL_RCC_ClockConfig+0x9c>
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	2b0c      	cmp	r3, #12
 800630a:	d00d      	beq.n	8006328 <HAL_RCC_ClockConfig+0x9c>
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	2b0d      	cmp	r3, #13
 8006310:	d00a      	beq.n	8006328 <HAL_RCC_ClockConfig+0x9c>
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	2b0e      	cmp	r3, #14
 8006316:	d007      	beq.n	8006328 <HAL_RCC_ClockConfig+0x9c>
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	2b0f      	cmp	r3, #15
 800631c:	d004      	beq.n	8006328 <HAL_RCC_ClockConfig+0x9c>
 800631e:	f240 21de 	movw	r1, #734	; 0x2de
 8006322:	486d      	ldr	r0, [pc, #436]	; (80064d8 <HAL_RCC_ClockConfig+0x24c>)
 8006324:	f7fc fbc5 	bl	8002ab2 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006328:	4b6c      	ldr	r3, [pc, #432]	; (80064dc <HAL_RCC_ClockConfig+0x250>)
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f003 030f 	and.w	r3, r3, #15
 8006330:	683a      	ldr	r2, [r7, #0]
 8006332:	429a      	cmp	r2, r3
 8006334:	d910      	bls.n	8006358 <HAL_RCC_ClockConfig+0xcc>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006336:	4b69      	ldr	r3, [pc, #420]	; (80064dc <HAL_RCC_ClockConfig+0x250>)
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f023 020f 	bic.w	r2, r3, #15
 800633e:	4967      	ldr	r1, [pc, #412]	; (80064dc <HAL_RCC_ClockConfig+0x250>)
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	4313      	orrs	r3, r2
 8006344:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006346:	4b65      	ldr	r3, [pc, #404]	; (80064dc <HAL_RCC_ClockConfig+0x250>)
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f003 030f 	and.w	r3, r3, #15
 800634e:	683a      	ldr	r2, [r7, #0]
 8006350:	429a      	cmp	r2, r3
 8006352:	d001      	beq.n	8006358 <HAL_RCC_ClockConfig+0xcc>
    {
      return HAL_ERROR;
 8006354:	2301      	movs	r3, #1
 8006356:	e132      	b.n	80065be <HAL_RCC_ClockConfig+0x332>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f003 0302 	and.w	r3, r3, #2
 8006360:	2b00      	cmp	r3, #0
 8006362:	d049      	beq.n	80063f8 <HAL_RCC_ClockConfig+0x16c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f003 0304 	and.w	r3, r3, #4
 800636c:	2b00      	cmp	r3, #0
 800636e:	d005      	beq.n	800637c <HAL_RCC_ClockConfig+0xf0>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006370:	4b5b      	ldr	r3, [pc, #364]	; (80064e0 <HAL_RCC_ClockConfig+0x254>)
 8006372:	689b      	ldr	r3, [r3, #8]
 8006374:	4a5a      	ldr	r2, [pc, #360]	; (80064e0 <HAL_RCC_ClockConfig+0x254>)
 8006376:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800637a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f003 0308 	and.w	r3, r3, #8
 8006384:	2b00      	cmp	r3, #0
 8006386:	d005      	beq.n	8006394 <HAL_RCC_ClockConfig+0x108>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006388:	4b55      	ldr	r3, [pc, #340]	; (80064e0 <HAL_RCC_ClockConfig+0x254>)
 800638a:	689b      	ldr	r3, [r3, #8]
 800638c:	4a54      	ldr	r2, [pc, #336]	; (80064e0 <HAL_RCC_ClockConfig+0x254>)
 800638e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006392:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	689b      	ldr	r3, [r3, #8]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d024      	beq.n	80063e6 <HAL_RCC_ClockConfig+0x15a>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	689b      	ldr	r3, [r3, #8]
 80063a0:	2b80      	cmp	r3, #128	; 0x80
 80063a2:	d020      	beq.n	80063e6 <HAL_RCC_ClockConfig+0x15a>
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	689b      	ldr	r3, [r3, #8]
 80063a8:	2b90      	cmp	r3, #144	; 0x90
 80063aa:	d01c      	beq.n	80063e6 <HAL_RCC_ClockConfig+0x15a>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	689b      	ldr	r3, [r3, #8]
 80063b0:	2ba0      	cmp	r3, #160	; 0xa0
 80063b2:	d018      	beq.n	80063e6 <HAL_RCC_ClockConfig+0x15a>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	689b      	ldr	r3, [r3, #8]
 80063b8:	2bb0      	cmp	r3, #176	; 0xb0
 80063ba:	d014      	beq.n	80063e6 <HAL_RCC_ClockConfig+0x15a>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	689b      	ldr	r3, [r3, #8]
 80063c0:	2bc0      	cmp	r3, #192	; 0xc0
 80063c2:	d010      	beq.n	80063e6 <HAL_RCC_ClockConfig+0x15a>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	689b      	ldr	r3, [r3, #8]
 80063c8:	2bd0      	cmp	r3, #208	; 0xd0
 80063ca:	d00c      	beq.n	80063e6 <HAL_RCC_ClockConfig+0x15a>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	689b      	ldr	r3, [r3, #8]
 80063d0:	2be0      	cmp	r3, #224	; 0xe0
 80063d2:	d008      	beq.n	80063e6 <HAL_RCC_ClockConfig+0x15a>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	689b      	ldr	r3, [r3, #8]
 80063d8:	2bf0      	cmp	r3, #240	; 0xf0
 80063da:	d004      	beq.n	80063e6 <HAL_RCC_ClockConfig+0x15a>
 80063dc:	f240 3102 	movw	r1, #770	; 0x302
 80063e0:	483d      	ldr	r0, [pc, #244]	; (80064d8 <HAL_RCC_ClockConfig+0x24c>)
 80063e2:	f7fc fb66 	bl	8002ab2 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80063e6:	4b3e      	ldr	r3, [pc, #248]	; (80064e0 <HAL_RCC_ClockConfig+0x254>)
 80063e8:	689b      	ldr	r3, [r3, #8]
 80063ea:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	689b      	ldr	r3, [r3, #8]
 80063f2:	493b      	ldr	r1, [pc, #236]	; (80064e0 <HAL_RCC_ClockConfig+0x254>)
 80063f4:	4313      	orrs	r3, r2
 80063f6:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f003 0301 	and.w	r3, r3, #1
 8006400:	2b00      	cmp	r3, #0
 8006402:	d051      	beq.n	80064a8 <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	685b      	ldr	r3, [r3, #4]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d00c      	beq.n	8006426 <HAL_RCC_ClockConfig+0x19a>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	685b      	ldr	r3, [r3, #4]
 8006410:	2b01      	cmp	r3, #1
 8006412:	d008      	beq.n	8006426 <HAL_RCC_ClockConfig+0x19a>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	685b      	ldr	r3, [r3, #4]
 8006418:	2b02      	cmp	r3, #2
 800641a:	d004      	beq.n	8006426 <HAL_RCC_ClockConfig+0x19a>
 800641c:	f240 3109 	movw	r1, #777	; 0x309
 8006420:	482d      	ldr	r0, [pc, #180]	; (80064d8 <HAL_RCC_ClockConfig+0x24c>)
 8006422:	f7fc fb46 	bl	8002ab2 <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	685b      	ldr	r3, [r3, #4]
 800642a:	2b01      	cmp	r3, #1
 800642c:	d107      	bne.n	800643e <HAL_RCC_ClockConfig+0x1b2>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800642e:	4b2c      	ldr	r3, [pc, #176]	; (80064e0 <HAL_RCC_ClockConfig+0x254>)
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006436:	2b00      	cmp	r3, #0
 8006438:	d115      	bne.n	8006466 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800643a:	2301      	movs	r3, #1
 800643c:	e0bf      	b.n	80065be <HAL_RCC_ClockConfig+0x332>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	685b      	ldr	r3, [r3, #4]
 8006442:	2b02      	cmp	r3, #2
 8006444:	d107      	bne.n	8006456 <HAL_RCC_ClockConfig+0x1ca>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006446:	4b26      	ldr	r3, [pc, #152]	; (80064e0 <HAL_RCC_ClockConfig+0x254>)
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800644e:	2b00      	cmp	r3, #0
 8006450:	d109      	bne.n	8006466 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006452:	2301      	movs	r3, #1
 8006454:	e0b3      	b.n	80065be <HAL_RCC_ClockConfig+0x332>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006456:	4b22      	ldr	r3, [pc, #136]	; (80064e0 <HAL_RCC_ClockConfig+0x254>)
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f003 0302 	and.w	r3, r3, #2
 800645e:	2b00      	cmp	r3, #0
 8006460:	d101      	bne.n	8006466 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006462:	2301      	movs	r3, #1
 8006464:	e0ab      	b.n	80065be <HAL_RCC_ClockConfig+0x332>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006466:	4b1e      	ldr	r3, [pc, #120]	; (80064e0 <HAL_RCC_ClockConfig+0x254>)
 8006468:	689b      	ldr	r3, [r3, #8]
 800646a:	f023 0203 	bic.w	r2, r3, #3
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	685b      	ldr	r3, [r3, #4]
 8006472:	491b      	ldr	r1, [pc, #108]	; (80064e0 <HAL_RCC_ClockConfig+0x254>)
 8006474:	4313      	orrs	r3, r2
 8006476:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006478:	f7fd f94e 	bl	8003718 <HAL_GetTick>
 800647c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800647e:	e00a      	b.n	8006496 <HAL_RCC_ClockConfig+0x20a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006480:	f7fd f94a 	bl	8003718 <HAL_GetTick>
 8006484:	4602      	mov	r2, r0
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	1ad3      	subs	r3, r2, r3
 800648a:	f241 3288 	movw	r2, #5000	; 0x1388
 800648e:	4293      	cmp	r3, r2
 8006490:	d901      	bls.n	8006496 <HAL_RCC_ClockConfig+0x20a>
      {
        return HAL_TIMEOUT;
 8006492:	2303      	movs	r3, #3
 8006494:	e093      	b.n	80065be <HAL_RCC_ClockConfig+0x332>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006496:	4b12      	ldr	r3, [pc, #72]	; (80064e0 <HAL_RCC_ClockConfig+0x254>)
 8006498:	689b      	ldr	r3, [r3, #8]
 800649a:	f003 020c 	and.w	r2, r3, #12
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	685b      	ldr	r3, [r3, #4]
 80064a2:	009b      	lsls	r3, r3, #2
 80064a4:	429a      	cmp	r2, r3
 80064a6:	d1eb      	bne.n	8006480 <HAL_RCC_ClockConfig+0x1f4>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80064a8:	4b0c      	ldr	r3, [pc, #48]	; (80064dc <HAL_RCC_ClockConfig+0x250>)
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f003 030f 	and.w	r3, r3, #15
 80064b0:	683a      	ldr	r2, [r7, #0]
 80064b2:	429a      	cmp	r2, r3
 80064b4:	d216      	bcs.n	80064e4 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80064b6:	4b09      	ldr	r3, [pc, #36]	; (80064dc <HAL_RCC_ClockConfig+0x250>)
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f023 020f 	bic.w	r2, r3, #15
 80064be:	4907      	ldr	r1, [pc, #28]	; (80064dc <HAL_RCC_ClockConfig+0x250>)
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	4313      	orrs	r3, r2
 80064c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80064c6:	4b05      	ldr	r3, [pc, #20]	; (80064dc <HAL_RCC_ClockConfig+0x250>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f003 030f 	and.w	r3, r3, #15
 80064ce:	683a      	ldr	r2, [r7, #0]
 80064d0:	429a      	cmp	r2, r3
 80064d2:	d007      	beq.n	80064e4 <HAL_RCC_ClockConfig+0x258>
    {
      return HAL_ERROR;
 80064d4:	2301      	movs	r3, #1
 80064d6:	e072      	b.n	80065be <HAL_RCC_ClockConfig+0x332>
 80064d8:	080167a0 	.word	0x080167a0
 80064dc:	40023c00 	.word	0x40023c00
 80064e0:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f003 0304 	and.w	r3, r3, #4
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d025      	beq.n	800653c <HAL_RCC_ClockConfig+0x2b0>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	68db      	ldr	r3, [r3, #12]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d018      	beq.n	800652a <HAL_RCC_ClockConfig+0x29e>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	68db      	ldr	r3, [r3, #12]
 80064fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006500:	d013      	beq.n	800652a <HAL_RCC_ClockConfig+0x29e>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	68db      	ldr	r3, [r3, #12]
 8006506:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800650a:	d00e      	beq.n	800652a <HAL_RCC_ClockConfig+0x29e>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	68db      	ldr	r3, [r3, #12]
 8006510:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8006514:	d009      	beq.n	800652a <HAL_RCC_ClockConfig+0x29e>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	68db      	ldr	r3, [r3, #12]
 800651a:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 800651e:	d004      	beq.n	800652a <HAL_RCC_ClockConfig+0x29e>
 8006520:	f240 3146 	movw	r1, #838	; 0x346
 8006524:	4828      	ldr	r0, [pc, #160]	; (80065c8 <HAL_RCC_ClockConfig+0x33c>)
 8006526:	f7fc fac4 	bl	8002ab2 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800652a:	4b28      	ldr	r3, [pc, #160]	; (80065cc <HAL_RCC_ClockConfig+0x340>)
 800652c:	689b      	ldr	r3, [r3, #8]
 800652e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	68db      	ldr	r3, [r3, #12]
 8006536:	4925      	ldr	r1, [pc, #148]	; (80065cc <HAL_RCC_ClockConfig+0x340>)
 8006538:	4313      	orrs	r3, r2
 800653a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f003 0308 	and.w	r3, r3, #8
 8006544:	2b00      	cmp	r3, #0
 8006546:	d026      	beq.n	8006596 <HAL_RCC_ClockConfig+0x30a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	691b      	ldr	r3, [r3, #16]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d018      	beq.n	8006582 <HAL_RCC_ClockConfig+0x2f6>
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	691b      	ldr	r3, [r3, #16]
 8006554:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006558:	d013      	beq.n	8006582 <HAL_RCC_ClockConfig+0x2f6>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	691b      	ldr	r3, [r3, #16]
 800655e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006562:	d00e      	beq.n	8006582 <HAL_RCC_ClockConfig+0x2f6>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	691b      	ldr	r3, [r3, #16]
 8006568:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 800656c:	d009      	beq.n	8006582 <HAL_RCC_ClockConfig+0x2f6>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	691b      	ldr	r3, [r3, #16]
 8006572:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8006576:	d004      	beq.n	8006582 <HAL_RCC_ClockConfig+0x2f6>
 8006578:	f240 314d 	movw	r1, #845	; 0x34d
 800657c:	4812      	ldr	r0, [pc, #72]	; (80065c8 <HAL_RCC_ClockConfig+0x33c>)
 800657e:	f7fc fa98 	bl	8002ab2 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006582:	4b12      	ldr	r3, [pc, #72]	; (80065cc <HAL_RCC_ClockConfig+0x340>)
 8006584:	689b      	ldr	r3, [r3, #8]
 8006586:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	691b      	ldr	r3, [r3, #16]
 800658e:	00db      	lsls	r3, r3, #3
 8006590:	490e      	ldr	r1, [pc, #56]	; (80065cc <HAL_RCC_ClockConfig+0x340>)
 8006592:	4313      	orrs	r3, r2
 8006594:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006596:	f000 f821 	bl	80065dc <HAL_RCC_GetSysClockFreq>
 800659a:	4602      	mov	r2, r0
 800659c:	4b0b      	ldr	r3, [pc, #44]	; (80065cc <HAL_RCC_ClockConfig+0x340>)
 800659e:	689b      	ldr	r3, [r3, #8]
 80065a0:	091b      	lsrs	r3, r3, #4
 80065a2:	f003 030f 	and.w	r3, r3, #15
 80065a6:	490a      	ldr	r1, [pc, #40]	; (80065d0 <HAL_RCC_ClockConfig+0x344>)
 80065a8:	5ccb      	ldrb	r3, [r1, r3]
 80065aa:	fa22 f303 	lsr.w	r3, r2, r3
 80065ae:	4a09      	ldr	r2, [pc, #36]	; (80065d4 <HAL_RCC_ClockConfig+0x348>)
 80065b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80065b2:	4b09      	ldr	r3, [pc, #36]	; (80065d8 <HAL_RCC_ClockConfig+0x34c>)
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	4618      	mov	r0, r3
 80065b8:	f7fd f86a 	bl	8003690 <HAL_InitTick>

  return HAL_OK;
 80065bc:	2300      	movs	r3, #0
}
 80065be:	4618      	mov	r0, r3
 80065c0:	3710      	adds	r7, #16
 80065c2:	46bd      	mov	sp, r7
 80065c4:	bd80      	pop	{r7, pc}
 80065c6:	bf00      	nop
 80065c8:	080167a0 	.word	0x080167a0
 80065cc:	40023800 	.word	0x40023800
 80065d0:	080168d0 	.word	0x080168d0
 80065d4:	2000000c 	.word	0x2000000c
 80065d8:	200000c8 	.word	0x200000c8

080065dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80065dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80065e0:	b090      	sub	sp, #64	; 0x40
 80065e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80065e4:	2300      	movs	r3, #0
 80065e6:	637b      	str	r3, [r7, #52]	; 0x34
 80065e8:	2300      	movs	r3, #0
 80065ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80065ec:	2300      	movs	r3, #0
 80065ee:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 80065f0:	2300      	movs	r3, #0
 80065f2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80065f4:	4b59      	ldr	r3, [pc, #356]	; (800675c <HAL_RCC_GetSysClockFreq+0x180>)
 80065f6:	689b      	ldr	r3, [r3, #8]
 80065f8:	f003 030c 	and.w	r3, r3, #12
 80065fc:	2b08      	cmp	r3, #8
 80065fe:	d00d      	beq.n	800661c <HAL_RCC_GetSysClockFreq+0x40>
 8006600:	2b08      	cmp	r3, #8
 8006602:	f200 80a1 	bhi.w	8006748 <HAL_RCC_GetSysClockFreq+0x16c>
 8006606:	2b00      	cmp	r3, #0
 8006608:	d002      	beq.n	8006610 <HAL_RCC_GetSysClockFreq+0x34>
 800660a:	2b04      	cmp	r3, #4
 800660c:	d003      	beq.n	8006616 <HAL_RCC_GetSysClockFreq+0x3a>
 800660e:	e09b      	b.n	8006748 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006610:	4b53      	ldr	r3, [pc, #332]	; (8006760 <HAL_RCC_GetSysClockFreq+0x184>)
 8006612:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006614:	e09b      	b.n	800674e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006616:	4b53      	ldr	r3, [pc, #332]	; (8006764 <HAL_RCC_GetSysClockFreq+0x188>)
 8006618:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800661a:	e098      	b.n	800674e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800661c:	4b4f      	ldr	r3, [pc, #316]	; (800675c <HAL_RCC_GetSysClockFreq+0x180>)
 800661e:	685b      	ldr	r3, [r3, #4]
 8006620:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006624:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8006626:	4b4d      	ldr	r3, [pc, #308]	; (800675c <HAL_RCC_GetSysClockFreq+0x180>)
 8006628:	685b      	ldr	r3, [r3, #4]
 800662a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800662e:	2b00      	cmp	r3, #0
 8006630:	d028      	beq.n	8006684 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006632:	4b4a      	ldr	r3, [pc, #296]	; (800675c <HAL_RCC_GetSysClockFreq+0x180>)
 8006634:	685b      	ldr	r3, [r3, #4]
 8006636:	099b      	lsrs	r3, r3, #6
 8006638:	2200      	movs	r2, #0
 800663a:	623b      	str	r3, [r7, #32]
 800663c:	627a      	str	r2, [r7, #36]	; 0x24
 800663e:	6a3b      	ldr	r3, [r7, #32]
 8006640:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006644:	2100      	movs	r1, #0
 8006646:	4b47      	ldr	r3, [pc, #284]	; (8006764 <HAL_RCC_GetSysClockFreq+0x188>)
 8006648:	fb03 f201 	mul.w	r2, r3, r1
 800664c:	2300      	movs	r3, #0
 800664e:	fb00 f303 	mul.w	r3, r0, r3
 8006652:	4413      	add	r3, r2
 8006654:	4a43      	ldr	r2, [pc, #268]	; (8006764 <HAL_RCC_GetSysClockFreq+0x188>)
 8006656:	fba0 1202 	umull	r1, r2, r0, r2
 800665a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800665c:	460a      	mov	r2, r1
 800665e:	62ba      	str	r2, [r7, #40]	; 0x28
 8006660:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006662:	4413      	add	r3, r2
 8006664:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006666:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006668:	2200      	movs	r2, #0
 800666a:	61bb      	str	r3, [r7, #24]
 800666c:	61fa      	str	r2, [r7, #28]
 800666e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006672:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8006676:	f7fa fb37 	bl	8000ce8 <__aeabi_uldivmod>
 800667a:	4602      	mov	r2, r0
 800667c:	460b      	mov	r3, r1
 800667e:	4613      	mov	r3, r2
 8006680:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006682:	e053      	b.n	800672c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006684:	4b35      	ldr	r3, [pc, #212]	; (800675c <HAL_RCC_GetSysClockFreq+0x180>)
 8006686:	685b      	ldr	r3, [r3, #4]
 8006688:	099b      	lsrs	r3, r3, #6
 800668a:	2200      	movs	r2, #0
 800668c:	613b      	str	r3, [r7, #16]
 800668e:	617a      	str	r2, [r7, #20]
 8006690:	693b      	ldr	r3, [r7, #16]
 8006692:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8006696:	f04f 0b00 	mov.w	fp, #0
 800669a:	4652      	mov	r2, sl
 800669c:	465b      	mov	r3, fp
 800669e:	f04f 0000 	mov.w	r0, #0
 80066a2:	f04f 0100 	mov.w	r1, #0
 80066a6:	0159      	lsls	r1, r3, #5
 80066a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80066ac:	0150      	lsls	r0, r2, #5
 80066ae:	4602      	mov	r2, r0
 80066b0:	460b      	mov	r3, r1
 80066b2:	ebb2 080a 	subs.w	r8, r2, sl
 80066b6:	eb63 090b 	sbc.w	r9, r3, fp
 80066ba:	f04f 0200 	mov.w	r2, #0
 80066be:	f04f 0300 	mov.w	r3, #0
 80066c2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80066c6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80066ca:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80066ce:	ebb2 0408 	subs.w	r4, r2, r8
 80066d2:	eb63 0509 	sbc.w	r5, r3, r9
 80066d6:	f04f 0200 	mov.w	r2, #0
 80066da:	f04f 0300 	mov.w	r3, #0
 80066de:	00eb      	lsls	r3, r5, #3
 80066e0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80066e4:	00e2      	lsls	r2, r4, #3
 80066e6:	4614      	mov	r4, r2
 80066e8:	461d      	mov	r5, r3
 80066ea:	eb14 030a 	adds.w	r3, r4, sl
 80066ee:	603b      	str	r3, [r7, #0]
 80066f0:	eb45 030b 	adc.w	r3, r5, fp
 80066f4:	607b      	str	r3, [r7, #4]
 80066f6:	f04f 0200 	mov.w	r2, #0
 80066fa:	f04f 0300 	mov.w	r3, #0
 80066fe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006702:	4629      	mov	r1, r5
 8006704:	028b      	lsls	r3, r1, #10
 8006706:	4621      	mov	r1, r4
 8006708:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800670c:	4621      	mov	r1, r4
 800670e:	028a      	lsls	r2, r1, #10
 8006710:	4610      	mov	r0, r2
 8006712:	4619      	mov	r1, r3
 8006714:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006716:	2200      	movs	r2, #0
 8006718:	60bb      	str	r3, [r7, #8]
 800671a:	60fa      	str	r2, [r7, #12]
 800671c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006720:	f7fa fae2 	bl	8000ce8 <__aeabi_uldivmod>
 8006724:	4602      	mov	r2, r0
 8006726:	460b      	mov	r3, r1
 8006728:	4613      	mov	r3, r2
 800672a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800672c:	4b0b      	ldr	r3, [pc, #44]	; (800675c <HAL_RCC_GetSysClockFreq+0x180>)
 800672e:	685b      	ldr	r3, [r3, #4]
 8006730:	0c1b      	lsrs	r3, r3, #16
 8006732:	f003 0303 	and.w	r3, r3, #3
 8006736:	3301      	adds	r3, #1
 8006738:	005b      	lsls	r3, r3, #1
 800673a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 800673c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800673e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006740:	fbb2 f3f3 	udiv	r3, r2, r3
 8006744:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006746:	e002      	b.n	800674e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006748:	4b05      	ldr	r3, [pc, #20]	; (8006760 <HAL_RCC_GetSysClockFreq+0x184>)
 800674a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800674c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800674e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8006750:	4618      	mov	r0, r3
 8006752:	3740      	adds	r7, #64	; 0x40
 8006754:	46bd      	mov	sp, r7
 8006756:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800675a:	bf00      	nop
 800675c:	40023800 	.word	0x40023800
 8006760:	00f42400 	.word	0x00f42400
 8006764:	017d7840 	.word	0x017d7840

08006768 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006768:	b480      	push	{r7}
 800676a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800676c:	4b03      	ldr	r3, [pc, #12]	; (800677c <HAL_RCC_GetHCLKFreq+0x14>)
 800676e:	681b      	ldr	r3, [r3, #0]
}
 8006770:	4618      	mov	r0, r3
 8006772:	46bd      	mov	sp, r7
 8006774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006778:	4770      	bx	lr
 800677a:	bf00      	nop
 800677c:	2000000c 	.word	0x2000000c

08006780 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006780:	b580      	push	{r7, lr}
 8006782:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006784:	f7ff fff0 	bl	8006768 <HAL_RCC_GetHCLKFreq>
 8006788:	4602      	mov	r2, r0
 800678a:	4b05      	ldr	r3, [pc, #20]	; (80067a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800678c:	689b      	ldr	r3, [r3, #8]
 800678e:	0a9b      	lsrs	r3, r3, #10
 8006790:	f003 0307 	and.w	r3, r3, #7
 8006794:	4903      	ldr	r1, [pc, #12]	; (80067a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006796:	5ccb      	ldrb	r3, [r1, r3]
 8006798:	fa22 f303 	lsr.w	r3, r2, r3
}
 800679c:	4618      	mov	r0, r3
 800679e:	bd80      	pop	{r7, pc}
 80067a0:	40023800 	.word	0x40023800
 80067a4:	080168e0 	.word	0x080168e0

080067a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80067ac:	f7ff ffdc 	bl	8006768 <HAL_RCC_GetHCLKFreq>
 80067b0:	4602      	mov	r2, r0
 80067b2:	4b05      	ldr	r3, [pc, #20]	; (80067c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80067b4:	689b      	ldr	r3, [r3, #8]
 80067b6:	0b5b      	lsrs	r3, r3, #13
 80067b8:	f003 0307 	and.w	r3, r3, #7
 80067bc:	4903      	ldr	r1, [pc, #12]	; (80067cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80067be:	5ccb      	ldrb	r3, [r1, r3]
 80067c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80067c4:	4618      	mov	r0, r3
 80067c6:	bd80      	pop	{r7, pc}
 80067c8:	40023800 	.word	0x40023800
 80067cc:	080168e0 	.word	0x080168e0

080067d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b088      	sub	sp, #32
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80067d8:	2300      	movs	r3, #0
 80067da:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80067dc:	2300      	movs	r3, #0
 80067de:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80067e0:	2300      	movs	r3, #0
 80067e2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80067e4:	2300      	movs	r3, #0
 80067e6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80067e8:	2300      	movs	r3, #0
 80067ea:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f003 0301 	and.w	r3, r3, #1
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	f040 8089 	bne.w	800690c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f003 0308 	and.w	r3, r3, #8
 8006802:	2b00      	cmp	r3, #0
 8006804:	f040 8082 	bne.w	800690c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f003 0310 	and.w	r3, r3, #16
 8006810:	2b00      	cmp	r3, #0
 8006812:	d17b      	bne.n	800690c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800681c:	2b00      	cmp	r3, #0
 800681e:	d175      	bne.n	800690c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006828:	2b00      	cmp	r3, #0
 800682a:	d16f      	bne.n	800690c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006834:	2b00      	cmp	r3, #0
 8006836:	d169      	bne.n	800690c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006840:	2b00      	cmp	r3, #0
 8006842:	d163      	bne.n	800690c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800684c:	2b00      	cmp	r3, #0
 800684e:	d15d      	bne.n	800690c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006858:	2b00      	cmp	r3, #0
 800685a:	d157      	bne.n	800690c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006864:	2b00      	cmp	r3, #0
 8006866:	d151      	bne.n	800690c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006870:	2b00      	cmp	r3, #0
 8006872:	d14b      	bne.n	800690c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800687c:	2b00      	cmp	r3, #0
 800687e:	d145      	bne.n	800690c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006888:	2b00      	cmp	r3, #0
 800688a:	d13f      	bne.n	800690c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006894:	2b00      	cmp	r3, #0
 8006896:	d139      	bne.n	800690c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d133      	bne.n	800690c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d12d      	bne.n	800690c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d127      	bne.n	800690c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d121      	bne.n	800690c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d11b      	bne.n	800690c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d115      	bne.n	800690c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d10f      	bne.n	800690c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d109      	bne.n	800690c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f003 0320 	and.w	r3, r3, #32
 8006900:	2b00      	cmp	r3, #0
 8006902:	d103      	bne.n	800690c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006904:	2172      	movs	r1, #114	; 0x72
 8006906:	4895      	ldr	r0, [pc, #596]	; (8006b5c <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8006908:	f7fc f8d3 	bl	8002ab2 <assert_failed>

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f003 0301 	and.w	r3, r3, #1
 8006914:	2b00      	cmp	r3, #0
 8006916:	d01f      	beq.n	8006958 <HAL_RCCEx_PeriphCLKConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800691c:	2b00      	cmp	r3, #0
 800691e:	d008      	beq.n	8006932 <HAL_RCCEx_PeriphCLKConfig+0x162>
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006924:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006928:	d003      	beq.n	8006932 <HAL_RCCEx_PeriphCLKConfig+0x162>
 800692a:	2178      	movs	r1, #120	; 0x78
 800692c:	488b      	ldr	r0, [pc, #556]	; (8006b5c <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 800692e:	f7fc f8c0 	bl	8002ab2 <assert_failed>

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006932:	4b8b      	ldr	r3, [pc, #556]	; (8006b60 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8006934:	689b      	ldr	r3, [r3, #8]
 8006936:	4a8a      	ldr	r2, [pc, #552]	; (8006b60 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8006938:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800693c:	6093      	str	r3, [r2, #8]
 800693e:	4b88      	ldr	r3, [pc, #544]	; (8006b60 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8006940:	689a      	ldr	r2, [r3, #8]
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006946:	4986      	ldr	r1, [pc, #536]	; (8006b60 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8006948:	4313      	orrs	r3, r2
 800694a:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006950:	2b00      	cmp	r3, #0
 8006952:	d101      	bne.n	8006958 <HAL_RCCEx_PeriphCLKConfig+0x188>
    {
      plli2sused = 1;
 8006954:	2301      	movs	r3, #1
 8006956:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006960:	2b00      	cmp	r3, #0
 8006962:	d029      	beq.n	80069b8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006968:	2b00      	cmp	r3, #0
 800696a:	d00d      	beq.n	8006988 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006970:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006974:	d008      	beq.n	8006988 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800697a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800697e:	d003      	beq.n	8006988 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8006980:	2188      	movs	r1, #136	; 0x88
 8006982:	4876      	ldr	r0, [pc, #472]	; (8006b5c <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8006984:	f7fc f895 	bl	8002ab2 <assert_failed>

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006988:	4b75      	ldr	r3, [pc, #468]	; (8006b60 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 800698a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800698e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006996:	4972      	ldr	r1, [pc, #456]	; (8006b60 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8006998:	4313      	orrs	r3, r2
 800699a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80069a6:	d101      	bne.n	80069ac <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      plli2sused = 1;
 80069a8:	2301      	movs	r3, #1
 80069aa:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d101      	bne.n	80069b8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
    {
      pllsaiused = 1;
 80069b4:	2301      	movs	r3, #1
 80069b6:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d029      	beq.n	8006a18 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d00d      	beq.n	80069e8 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80069d4:	d008      	beq.n	80069e8 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069da:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80069de:	d003      	beq.n	80069e8 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80069e0:	219c      	movs	r1, #156	; 0x9c
 80069e2:	485e      	ldr	r0, [pc, #376]	; (8006b5c <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 80069e4:	f7fc f865 	bl	8002ab2 <assert_failed>

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80069e8:	4b5d      	ldr	r3, [pc, #372]	; (8006b60 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80069ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80069ee:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069f6:	495a      	ldr	r1, [pc, #360]	; (8006b60 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80069f8:	4313      	orrs	r3, r2
 80069fa:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006a06:	d101      	bne.n	8006a0c <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      plli2sused = 1;
 8006a08:	2301      	movs	r3, #1
 8006a0a:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d101      	bne.n	8006a18 <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      pllsaiused = 1;
 8006a14:	2301      	movs	r3, #1
 8006a16:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d001      	beq.n	8006a28 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
      plli2sused = 1;
 8006a24:	2301      	movs	r3, #1
 8006a26:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f003 0320 	and.w	r3, r3, #32
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	f000 8186 	beq.w	8006d42 <HAL_RCCEx_PeriphCLKConfig+0x572>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a3e:	f000 80e4 	beq.w	8006c0a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a4a:	f000 80de 	beq.w	8006c0a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a52:	4a44      	ldr	r2, [pc, #272]	; (8006b64 <HAL_RCCEx_PeriphCLKConfig+0x394>)
 8006a54:	4293      	cmp	r3, r2
 8006a56:	f000 80d8 	beq.w	8006c0a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a5e:	4a42      	ldr	r2, [pc, #264]	; (8006b68 <HAL_RCCEx_PeriphCLKConfig+0x398>)
 8006a60:	4293      	cmp	r3, r2
 8006a62:	f000 80d2 	beq.w	8006c0a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a6a:	4a40      	ldr	r2, [pc, #256]	; (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	f000 80cc 	beq.w	8006c0a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a76:	4a3e      	ldr	r2, [pc, #248]	; (8006b70 <HAL_RCCEx_PeriphCLKConfig+0x3a0>)
 8006a78:	4293      	cmp	r3, r2
 8006a7a:	f000 80c6 	beq.w	8006c0a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a82:	4a3c      	ldr	r2, [pc, #240]	; (8006b74 <HAL_RCCEx_PeriphCLKConfig+0x3a4>)
 8006a84:	4293      	cmp	r3, r2
 8006a86:	f000 80c0 	beq.w	8006c0a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a8e:	4a3a      	ldr	r2, [pc, #232]	; (8006b78 <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	f000 80ba 	beq.w	8006c0a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a9a:	4a38      	ldr	r2, [pc, #224]	; (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x3ac>)
 8006a9c:	4293      	cmp	r3, r2
 8006a9e:	f000 80b4 	beq.w	8006c0a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aa6:	4a36      	ldr	r2, [pc, #216]	; (8006b80 <HAL_RCCEx_PeriphCLKConfig+0x3b0>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	f000 80ae 	beq.w	8006c0a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ab2:	4a34      	ldr	r2, [pc, #208]	; (8006b84 <HAL_RCCEx_PeriphCLKConfig+0x3b4>)
 8006ab4:	4293      	cmp	r3, r2
 8006ab6:	f000 80a8 	beq.w	8006c0a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006abe:	4a32      	ldr	r2, [pc, #200]	; (8006b88 <HAL_RCCEx_PeriphCLKConfig+0x3b8>)
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	f000 80a2 	beq.w	8006c0a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aca:	4a30      	ldr	r2, [pc, #192]	; (8006b8c <HAL_RCCEx_PeriphCLKConfig+0x3bc>)
 8006acc:	4293      	cmp	r3, r2
 8006ace:	f000 809c 	beq.w	8006c0a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ad6:	4a2e      	ldr	r2, [pc, #184]	; (8006b90 <HAL_RCCEx_PeriphCLKConfig+0x3c0>)
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	f000 8096 	beq.w	8006c0a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ae2:	4a2c      	ldr	r2, [pc, #176]	; (8006b94 <HAL_RCCEx_PeriphCLKConfig+0x3c4>)
 8006ae4:	4293      	cmp	r3, r2
 8006ae6:	f000 8090 	beq.w	8006c0a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aee:	4a2a      	ldr	r2, [pc, #168]	; (8006b98 <HAL_RCCEx_PeriphCLKConfig+0x3c8>)
 8006af0:	4293      	cmp	r3, r2
 8006af2:	f000 808a 	beq.w	8006c0a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006afa:	4a28      	ldr	r2, [pc, #160]	; (8006b9c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8006afc:	4293      	cmp	r3, r2
 8006afe:	f000 8084 	beq.w	8006c0a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b06:	4a26      	ldr	r2, [pc, #152]	; (8006ba0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d07e      	beq.n	8006c0a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b10:	4a24      	ldr	r2, [pc, #144]	; (8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d079      	beq.n	8006c0a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b1a:	4a23      	ldr	r2, [pc, #140]	; (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x3d8>)
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d074      	beq.n	8006c0a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b24:	4a21      	ldr	r2, [pc, #132]	; (8006bac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d06f      	beq.n	8006c0a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b2e:	4a20      	ldr	r2, [pc, #128]	; (8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b30:	4293      	cmp	r3, r2
 8006b32:	d06a      	beq.n	8006c0a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b38:	4a1e      	ldr	r2, [pc, #120]	; (8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d065      	beq.n	8006c0a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b42:	4a1d      	ldr	r2, [pc, #116]	; (8006bb8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d060      	beq.n	8006c0a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b4c:	4a1b      	ldr	r2, [pc, #108]	; (8006bbc <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d05b      	beq.n	8006c0a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b56:	4a1a      	ldr	r2, [pc, #104]	; (8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 8006b58:	4293      	cmp	r3, r2
 8006b5a:	e033      	b.n	8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8006b5c:	080167d8 	.word	0x080167d8
 8006b60:	40023800 	.word	0x40023800
 8006b64:	00020300 	.word	0x00020300
 8006b68:	00030300 	.word	0x00030300
 8006b6c:	00040300 	.word	0x00040300
 8006b70:	00050300 	.word	0x00050300
 8006b74:	00060300 	.word	0x00060300
 8006b78:	00070300 	.word	0x00070300
 8006b7c:	00080300 	.word	0x00080300
 8006b80:	00090300 	.word	0x00090300
 8006b84:	000a0300 	.word	0x000a0300
 8006b88:	000b0300 	.word	0x000b0300
 8006b8c:	000c0300 	.word	0x000c0300
 8006b90:	000d0300 	.word	0x000d0300
 8006b94:	000e0300 	.word	0x000e0300
 8006b98:	000f0300 	.word	0x000f0300
 8006b9c:	00100300 	.word	0x00100300
 8006ba0:	00110300 	.word	0x00110300
 8006ba4:	00120300 	.word	0x00120300
 8006ba8:	00130300 	.word	0x00130300
 8006bac:	00140300 	.word	0x00140300
 8006bb0:	00150300 	.word	0x00150300
 8006bb4:	00160300 	.word	0x00160300
 8006bb8:	00170300 	.word	0x00170300
 8006bbc:	00180300 	.word	0x00180300
 8006bc0:	00190300 	.word	0x00190300
 8006bc4:	d021      	beq.n	8006c0a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bca:	4a4c      	ldr	r2, [pc, #304]	; (8006cfc <HAL_RCCEx_PeriphCLKConfig+0x52c>)
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	d01c      	beq.n	8006c0a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bd4:	4a4a      	ldr	r2, [pc, #296]	; (8006d00 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	d017      	beq.n	8006c0a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bde:	4a49      	ldr	r2, [pc, #292]	; (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x534>)
 8006be0:	4293      	cmp	r3, r2
 8006be2:	d012      	beq.n	8006c0a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006be8:	4a47      	ldr	r2, [pc, #284]	; (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d00d      	beq.n	8006c0a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bf2:	4a46      	ldr	r2, [pc, #280]	; (8006d0c <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	d008      	beq.n	8006c0a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bfc:	4a44      	ldr	r2, [pc, #272]	; (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	d003      	beq.n	8006c0a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006c02:	21b7      	movs	r1, #183	; 0xb7
 8006c04:	4843      	ldr	r0, [pc, #268]	; (8006d14 <HAL_RCCEx_PeriphCLKConfig+0x544>)
 8006c06:	f7fb ff54 	bl	8002ab2 <assert_failed>

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006c0a:	4b43      	ldr	r3, [pc, #268]	; (8006d18 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c0e:	4a42      	ldr	r2, [pc, #264]	; (8006d18 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006c10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c14:	6413      	str	r3, [r2, #64]	; 0x40
 8006c16:	4b40      	ldr	r3, [pc, #256]	; (8006d18 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c1e:	60bb      	str	r3, [r7, #8]
 8006c20:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006c22:	4b3e      	ldr	r3, [pc, #248]	; (8006d1c <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	4a3d      	ldr	r2, [pc, #244]	; (8006d1c <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 8006c28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c2c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006c2e:	f7fc fd73 	bl	8003718 <HAL_GetTick>
 8006c32:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006c34:	e009      	b.n	8006c4a <HAL_RCCEx_PeriphCLKConfig+0x47a>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c36:	f7fc fd6f 	bl	8003718 <HAL_GetTick>
 8006c3a:	4602      	mov	r2, r0
 8006c3c:	697b      	ldr	r3, [r7, #20]
 8006c3e:	1ad3      	subs	r3, r2, r3
 8006c40:	2b64      	cmp	r3, #100	; 0x64
 8006c42:	d902      	bls.n	8006c4a <HAL_RCCEx_PeriphCLKConfig+0x47a>
      {
        return HAL_TIMEOUT;
 8006c44:	2303      	movs	r3, #3
 8006c46:	f000 bd9f 	b.w	8007788 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006c4a:	4b34      	ldr	r3, [pc, #208]	; (8006d1c <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d0ef      	beq.n	8006c36 <HAL_RCCEx_PeriphCLKConfig+0x466>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006c56:	4b30      	ldr	r3, [pc, #192]	; (8006d18 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006c58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c5e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006c60:	693b      	ldr	r3, [r7, #16]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d036      	beq.n	8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c6e:	693a      	ldr	r2, [r7, #16]
 8006c70:	429a      	cmp	r2, r3
 8006c72:	d02f      	beq.n	8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006c74:	4b28      	ldr	r3, [pc, #160]	; (8006d18 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006c76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c7c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006c7e:	4b26      	ldr	r3, [pc, #152]	; (8006d18 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006c80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c82:	4a25      	ldr	r2, [pc, #148]	; (8006d18 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006c84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c88:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006c8a:	4b23      	ldr	r3, [pc, #140]	; (8006d18 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006c8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c8e:	4a22      	ldr	r2, [pc, #136]	; (8006d18 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006c90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c94:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8006c96:	4a20      	ldr	r2, [pc, #128]	; (8006d18 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006c98:	693b      	ldr	r3, [r7, #16]
 8006c9a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006c9c:	4b1e      	ldr	r3, [pc, #120]	; (8006d18 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006c9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ca0:	f003 0301 	and.w	r3, r3, #1
 8006ca4:	2b01      	cmp	r3, #1
 8006ca6:	d115      	bne.n	8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x504>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ca8:	f7fc fd36 	bl	8003718 <HAL_GetTick>
 8006cac:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006cae:	e00b      	b.n	8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006cb0:	f7fc fd32 	bl	8003718 <HAL_GetTick>
 8006cb4:	4602      	mov	r2, r0
 8006cb6:	697b      	ldr	r3, [r7, #20]
 8006cb8:	1ad3      	subs	r3, r2, r3
 8006cba:	f241 3288 	movw	r2, #5000	; 0x1388
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d902      	bls.n	8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8006cc2:	2303      	movs	r3, #3
 8006cc4:	f000 bd60 	b.w	8007788 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006cc8:	4b13      	ldr	r3, [pc, #76]	; (8006d18 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006cca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ccc:	f003 0302 	and.w	r3, r3, #2
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d0ed      	beq.n	8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cd8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006cdc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006ce0:	d120      	bne.n	8006d24 <HAL_RCCEx_PeriphCLKConfig+0x554>
 8006ce2:	4b0d      	ldr	r3, [pc, #52]	; (8006d18 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006ce4:	689b      	ldr	r3, [r3, #8]
 8006ce6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006cee:	4b0c      	ldr	r3, [pc, #48]	; (8006d20 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8006cf0:	400b      	ands	r3, r1
 8006cf2:	4909      	ldr	r1, [pc, #36]	; (8006d18 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006cf4:	4313      	orrs	r3, r2
 8006cf6:	608b      	str	r3, [r1, #8]
 8006cf8:	e01a      	b.n	8006d30 <HAL_RCCEx_PeriphCLKConfig+0x560>
 8006cfa:	bf00      	nop
 8006cfc:	001a0300 	.word	0x001a0300
 8006d00:	001b0300 	.word	0x001b0300
 8006d04:	001c0300 	.word	0x001c0300
 8006d08:	001d0300 	.word	0x001d0300
 8006d0c:	001e0300 	.word	0x001e0300
 8006d10:	001f0300 	.word	0x001f0300
 8006d14:	080167d8 	.word	0x080167d8
 8006d18:	40023800 	.word	0x40023800
 8006d1c:	40007000 	.word	0x40007000
 8006d20:	0ffffcff 	.word	0x0ffffcff
 8006d24:	4b9a      	ldr	r3, [pc, #616]	; (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8006d26:	689b      	ldr	r3, [r3, #8]
 8006d28:	4a99      	ldr	r2, [pc, #612]	; (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8006d2a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006d2e:	6093      	str	r3, [r2, #8]
 8006d30:	4b97      	ldr	r3, [pc, #604]	; (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8006d32:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006d3c:	4994      	ldr	r1, [pc, #592]	; (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8006d3e:	4313      	orrs	r3, r2
 8006d40:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f003 0310 	and.w	r3, r3, #16
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d01d      	beq.n	8006d8a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d008      	beq.n	8006d68 <HAL_RCCEx_PeriphCLKConfig+0x598>
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d5a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006d5e:	d003      	beq.n	8006d68 <HAL_RCCEx_PeriphCLKConfig+0x598>
 8006d60:	21f1      	movs	r1, #241	; 0xf1
 8006d62:	488c      	ldr	r0, [pc, #560]	; (8006f94 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8006d64:	f7fb fea5 	bl	8002ab2 <assert_failed>

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006d68:	4b89      	ldr	r3, [pc, #548]	; (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8006d6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d6e:	4a88      	ldr	r2, [pc, #544]	; (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8006d70:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006d74:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006d78:	4b85      	ldr	r3, [pc, #532]	; (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8006d7a:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d82:	4983      	ldr	r1, [pc, #524]	; (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8006d84:	4313      	orrs	r3, r2
 8006d86:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d01c      	beq.n	8006dd0 <HAL_RCCEx_PeriphCLKConfig+0x600>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d00d      	beq.n	8006dba <HAL_RCCEx_PeriphCLKConfig+0x5ea>
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006da2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006da6:	d008      	beq.n	8006dba <HAL_RCCEx_PeriphCLKConfig+0x5ea>
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006dac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006db0:	d003      	beq.n	8006dba <HAL_RCCEx_PeriphCLKConfig+0x5ea>
 8006db2:	21fb      	movs	r1, #251	; 0xfb
 8006db4:	4877      	ldr	r0, [pc, #476]	; (8006f94 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8006db6:	f7fb fe7c 	bl	8002ab2 <assert_failed>

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006dba:	4b75      	ldr	r3, [pc, #468]	; (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8006dbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006dc0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006dc8:	4971      	ldr	r1, [pc, #452]	; (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8006dca:	4313      	orrs	r3, r2
 8006dcc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d01d      	beq.n	8006e18 <HAL_RCCEx_PeriphCLKConfig+0x648>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d00e      	beq.n	8006e02 <HAL_RCCEx_PeriphCLKConfig+0x632>
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006de8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006dec:	d009      	beq.n	8006e02 <HAL_RCCEx_PeriphCLKConfig+0x632>
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006df2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006df6:	d004      	beq.n	8006e02 <HAL_RCCEx_PeriphCLKConfig+0x632>
 8006df8:	f240 1105 	movw	r1, #261	; 0x105
 8006dfc:	4865      	ldr	r0, [pc, #404]	; (8006f94 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8006dfe:	f7fb fe58 	bl	8002ab2 <assert_failed>

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006e02:	4b63      	ldr	r3, [pc, #396]	; (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8006e04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e08:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006e10:	495f      	ldr	r1, [pc, #380]	; (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8006e12:	4313      	orrs	r3, r2
 8006e14:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d01d      	beq.n	8006e60 <HAL_RCCEx_PeriphCLKConfig+0x690>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d00e      	beq.n	8006e4a <HAL_RCCEx_PeriphCLKConfig+0x67a>
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e30:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e34:	d009      	beq.n	8006e4a <HAL_RCCEx_PeriphCLKConfig+0x67a>
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e3a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006e3e:	d004      	beq.n	8006e4a <HAL_RCCEx_PeriphCLKConfig+0x67a>
 8006e40:	f240 110f 	movw	r1, #271	; 0x10f
 8006e44:	4853      	ldr	r0, [pc, #332]	; (8006f94 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8006e46:	f7fb fe34 	bl	8002ab2 <assert_failed>

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006e4a:	4b51      	ldr	r3, [pc, #324]	; (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8006e4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e50:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e58:	494d      	ldr	r1, [pc, #308]	; (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8006e5a:	4313      	orrs	r3, r2
 8006e5c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d01d      	beq.n	8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d00e      	beq.n	8006e92 <HAL_RCCEx_PeriphCLKConfig+0x6c2>
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e78:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006e7c:	d009      	beq.n	8006e92 <HAL_RCCEx_PeriphCLKConfig+0x6c2>
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e82:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006e86:	d004      	beq.n	8006e92 <HAL_RCCEx_PeriphCLKConfig+0x6c2>
 8006e88:	f240 1119 	movw	r1, #281	; 0x119
 8006e8c:	4841      	ldr	r0, [pc, #260]	; (8006f94 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8006e8e:	f7fb fe10 	bl	8002ab2 <assert_failed>

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006e92:	4b3f      	ldr	r3, [pc, #252]	; (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8006e94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e98:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ea0:	493b      	ldr	r1, [pc, #236]	; (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8006ea2:	4313      	orrs	r3, r2
 8006ea4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d01f      	beq.n	8006ef4 <HAL_RCCEx_PeriphCLKConfig+0x724>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d010      	beq.n	8006ede <HAL_RCCEx_PeriphCLKConfig+0x70e>
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ec0:	2b01      	cmp	r3, #1
 8006ec2:	d00c      	beq.n	8006ede <HAL_RCCEx_PeriphCLKConfig+0x70e>
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ec8:	2b03      	cmp	r3, #3
 8006eca:	d008      	beq.n	8006ede <HAL_RCCEx_PeriphCLKConfig+0x70e>
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ed0:	2b02      	cmp	r3, #2
 8006ed2:	d004      	beq.n	8006ede <HAL_RCCEx_PeriphCLKConfig+0x70e>
 8006ed4:	f240 1123 	movw	r1, #291	; 0x123
 8006ed8:	482e      	ldr	r0, [pc, #184]	; (8006f94 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8006eda:	f7fb fdea 	bl	8002ab2 <assert_failed>

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006ede:	4b2c      	ldr	r3, [pc, #176]	; (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8006ee0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ee4:	f023 0203 	bic.w	r2, r3, #3
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006eec:	4928      	ldr	r1, [pc, #160]	; (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8006eee:	4313      	orrs	r3, r2
 8006ef0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d01f      	beq.n	8006f40 <HAL_RCCEx_PeriphCLKConfig+0x770>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d010      	beq.n	8006f2a <HAL_RCCEx_PeriphCLKConfig+0x75a>
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f0c:	2b04      	cmp	r3, #4
 8006f0e:	d00c      	beq.n	8006f2a <HAL_RCCEx_PeriphCLKConfig+0x75a>
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f14:	2b0c      	cmp	r3, #12
 8006f16:	d008      	beq.n	8006f2a <HAL_RCCEx_PeriphCLKConfig+0x75a>
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f1c:	2b08      	cmp	r3, #8
 8006f1e:	d004      	beq.n	8006f2a <HAL_RCCEx_PeriphCLKConfig+0x75a>
 8006f20:	f240 112d 	movw	r1, #301	; 0x12d
 8006f24:	481b      	ldr	r0, [pc, #108]	; (8006f94 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8006f26:	f7fb fdc4 	bl	8002ab2 <assert_failed>

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006f2a:	4b19      	ldr	r3, [pc, #100]	; (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8006f2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f30:	f023 020c 	bic.w	r2, r3, #12
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f38:	4915      	ldr	r1, [pc, #84]	; (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8006f3a:	4313      	orrs	r3, r2
 8006f3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d025      	beq.n	8006f98 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d010      	beq.n	8006f76 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f58:	2b10      	cmp	r3, #16
 8006f5a:	d00c      	beq.n	8006f76 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f60:	2b30      	cmp	r3, #48	; 0x30
 8006f62:	d008      	beq.n	8006f76 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f68:	2b20      	cmp	r3, #32
 8006f6a:	d004      	beq.n	8006f76 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
 8006f6c:	f240 1137 	movw	r1, #311	; 0x137
 8006f70:	4808      	ldr	r0, [pc, #32]	; (8006f94 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8006f72:	f7fb fd9e 	bl	8002ab2 <assert_failed>

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006f76:	4b06      	ldr	r3, [pc, #24]	; (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8006f78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f7c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f84:	4902      	ldr	r1, [pc, #8]	; (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8006f86:	4313      	orrs	r3, r2
 8006f88:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006f8c:	e004      	b.n	8006f98 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
 8006f8e:	bf00      	nop
 8006f90:	40023800 	.word	0x40023800
 8006f94:	080167d8 	.word	0x080167d8
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d01f      	beq.n	8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x814>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d010      	beq.n	8006fce <HAL_RCCEx_PeriphCLKConfig+0x7fe>
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fb0:	2b40      	cmp	r3, #64	; 0x40
 8006fb2:	d00c      	beq.n	8006fce <HAL_RCCEx_PeriphCLKConfig+0x7fe>
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fb8:	2bc0      	cmp	r3, #192	; 0xc0
 8006fba:	d008      	beq.n	8006fce <HAL_RCCEx_PeriphCLKConfig+0x7fe>
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fc0:	2b80      	cmp	r3, #128	; 0x80
 8006fc2:	d004      	beq.n	8006fce <HAL_RCCEx_PeriphCLKConfig+0x7fe>
 8006fc4:	f240 1141 	movw	r1, #321	; 0x141
 8006fc8:	48a0      	ldr	r0, [pc, #640]	; (800724c <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8006fca:	f7fb fd72 	bl	8002ab2 <assert_failed>

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006fce:	4ba0      	ldr	r3, [pc, #640]	; (8007250 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8006fd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fd4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fdc:	499c      	ldr	r1, [pc, #624]	; (8007250 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8006fde:	4313      	orrs	r3, r2
 8006fe0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d022      	beq.n	8007036 <HAL_RCCEx_PeriphCLKConfig+0x866>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d013      	beq.n	8007020 <HAL_RCCEx_PeriphCLKConfig+0x850>
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ffc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007000:	d00e      	beq.n	8007020 <HAL_RCCEx_PeriphCLKConfig+0x850>
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007006:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800700a:	d009      	beq.n	8007020 <HAL_RCCEx_PeriphCLKConfig+0x850>
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007010:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007014:	d004      	beq.n	8007020 <HAL_RCCEx_PeriphCLKConfig+0x850>
 8007016:	f240 114b 	movw	r1, #331	; 0x14b
 800701a:	488c      	ldr	r0, [pc, #560]	; (800724c <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 800701c:	f7fb fd49 	bl	8002ab2 <assert_failed>

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007020:	4b8b      	ldr	r3, [pc, #556]	; (8007250 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8007022:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007026:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800702e:	4988      	ldr	r1, [pc, #544]	; (8007250 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8007030:	4313      	orrs	r3, r2
 8007032:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800703e:	2b00      	cmp	r3, #0
 8007040:	d022      	beq.n	8007088 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007046:	2b00      	cmp	r3, #0
 8007048:	d013      	beq.n	8007072 <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800704e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007052:	d00e      	beq.n	8007072 <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007058:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800705c:	d009      	beq.n	8007072 <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007062:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007066:	d004      	beq.n	8007072 <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 8007068:	f240 1155 	movw	r1, #341	; 0x155
 800706c:	4877      	ldr	r0, [pc, #476]	; (800724c <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 800706e:	f7fb fd20 	bl	8002ab2 <assert_failed>

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8007072:	4b77      	ldr	r3, [pc, #476]	; (8007250 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8007074:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007078:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007080:	4973      	ldr	r1, [pc, #460]	; (8007250 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8007082:	4313      	orrs	r3, r2
 8007084:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007090:	2b00      	cmp	r3, #0
 8007092:	d022      	beq.n	80070da <HAL_RCCEx_PeriphCLKConfig+0x90a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007098:	2b00      	cmp	r3, #0
 800709a:	d013      	beq.n	80070c4 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070a4:	d00e      	beq.n	80070c4 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070aa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80070ae:	d009      	beq.n	80070c4 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80070b8:	d004      	beq.n	80070c4 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
 80070ba:	f240 115f 	movw	r1, #351	; 0x15f
 80070be:	4863      	ldr	r0, [pc, #396]	; (800724c <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 80070c0:	f7fb fcf7 	bl	8002ab2 <assert_failed>

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80070c4:	4b62      	ldr	r3, [pc, #392]	; (8007250 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 80070c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070ca:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070d2:	495f      	ldr	r1, [pc, #380]	; (8007250 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 80070d4:	4313      	orrs	r3, r2
 80070d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d022      	beq.n	800712c <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d013      	beq.n	8007116 <HAL_RCCEx_PeriphCLKConfig+0x946>
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80070f6:	d00e      	beq.n	8007116 <HAL_RCCEx_PeriphCLKConfig+0x946>
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070fc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007100:	d009      	beq.n	8007116 <HAL_RCCEx_PeriphCLKConfig+0x946>
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007106:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800710a:	d004      	beq.n	8007116 <HAL_RCCEx_PeriphCLKConfig+0x946>
 800710c:	f240 1169 	movw	r1, #361	; 0x169
 8007110:	484e      	ldr	r0, [pc, #312]	; (800724c <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8007112:	f7fb fcce 	bl	8002ab2 <assert_failed>

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8007116:	4b4e      	ldr	r3, [pc, #312]	; (8007250 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8007118:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800711c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007124:	494a      	ldr	r1, [pc, #296]	; (8007250 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8007126:	4313      	orrs	r3, r2
 8007128:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007134:	2b00      	cmp	r3, #0
 8007136:	d018      	beq.n	800716a <HAL_RCCEx_PeriphCLKConfig+0x99a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800713c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007140:	d008      	beq.n	8007154 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007146:	2b00      	cmp	r3, #0
 8007148:	d004      	beq.n	8007154 <HAL_RCCEx_PeriphCLKConfig+0x984>
 800714a:	f240 1173 	movw	r1, #371	; 0x173
 800714e:	483f      	ldr	r0, [pc, #252]	; (800724c <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8007150:	f7fb fcaf 	bl	8002ab2 <assert_failed>

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007154:	4b3e      	ldr	r3, [pc, #248]	; (8007250 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8007156:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800715a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007162:	493b      	ldr	r1, [pc, #236]	; (8007250 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8007164:	4313      	orrs	r3, r2
 8007166:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007172:	2b00      	cmp	r3, #0
 8007174:	d01f      	beq.n	80071b6 <HAL_RCCEx_PeriphCLKConfig+0x9e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800717a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800717e:	d008      	beq.n	8007192 <HAL_RCCEx_PeriphCLKConfig+0x9c2>
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007184:	2b00      	cmp	r3, #0
 8007186:	d004      	beq.n	8007192 <HAL_RCCEx_PeriphCLKConfig+0x9c2>
 8007188:	f240 117d 	movw	r1, #381	; 0x17d
 800718c:	482f      	ldr	r0, [pc, #188]	; (800724c <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 800718e:	f7fb fc90 	bl	8002ab2 <assert_failed>

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8007192:	4b2f      	ldr	r3, [pc, #188]	; (8007250 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8007194:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007198:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80071a0:	492b      	ldr	r1, [pc, #172]	; (8007250 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 80071a2:	4313      	orrs	r3, r2
 80071a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80071ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80071b0:	d101      	bne.n	80071b6 <HAL_RCCEx_PeriphCLKConfig+0x9e6>
    {
      pllsaiused = 1;
 80071b2:	2301      	movs	r3, #1
 80071b4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f003 0308 	and.w	r3, r3, #8
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d001      	beq.n	80071c6 <HAL_RCCEx_PeriphCLKConfig+0x9f6>
  {
    pllsaiused = 1;
 80071c2:	2301      	movs	r3, #1
 80071c4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d022      	beq.n	8007218 <HAL_RCCEx_PeriphCLKConfig+0xa48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d013      	beq.n	8007202 <HAL_RCCEx_PeriphCLKConfig+0xa32>
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80071de:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80071e2:	d00e      	beq.n	8007202 <HAL_RCCEx_PeriphCLKConfig+0xa32>
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80071e8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80071ec:	d009      	beq.n	8007202 <HAL_RCCEx_PeriphCLKConfig+0xa32>
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80071f2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80071f6:	d004      	beq.n	8007202 <HAL_RCCEx_PeriphCLKConfig+0xa32>
 80071f8:	f240 1195 	movw	r1, #405	; 0x195
 80071fc:	4813      	ldr	r0, [pc, #76]	; (800724c <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 80071fe:	f7fb fc58 	bl	8002ab2 <assert_failed>

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007202:	4b13      	ldr	r3, [pc, #76]	; (8007250 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8007204:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007208:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007210:	490f      	ldr	r1, [pc, #60]	; (8007250 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8007212:	4313      	orrs	r3, r2
 8007214:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007220:	2b00      	cmp	r3, #0
 8007222:	d020      	beq.n	8007266 <HAL_RCCEx_PeriphCLKConfig+0xa96>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800722a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800722e:	d009      	beq.n	8007244 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007236:	2b00      	cmp	r3, #0
 8007238:	d004      	beq.n	8007244 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800723a:	f240 119f 	movw	r1, #415	; 0x19f
 800723e:	4803      	ldr	r0, [pc, #12]	; (800724c <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8007240:	f7fb fc37 	bl	8002ab2 <assert_failed>

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007244:	4b02      	ldr	r3, [pc, #8]	; (8007250 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8007246:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800724a:	e003      	b.n	8007254 <HAL_RCCEx_PeriphCLKConfig+0xa84>
 800724c:	080167d8 	.word	0x080167d8
 8007250:	40023800 	.word	0x40023800
 8007254:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800725e:	4910      	ldr	r1, [pc, #64]	; (80072a0 <HAL_RCCEx_PeriphCLKConfig+0xad0>)
 8007260:	4313      	orrs	r3, r2
 8007262:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007266:	69fb      	ldr	r3, [r7, #28]
 8007268:	2b01      	cmp	r3, #1
 800726a:	d006      	beq.n	800727a <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007274:	2b00      	cmp	r3, #0
 8007276:	f000 8155 	beq.w	8007524 <HAL_RCCEx_PeriphCLKConfig+0xd54>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800727a:	4b09      	ldr	r3, [pc, #36]	; (80072a0 <HAL_RCCEx_PeriphCLKConfig+0xad0>)
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	4a08      	ldr	r2, [pc, #32]	; (80072a0 <HAL_RCCEx_PeriphCLKConfig+0xad0>)
 8007280:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007284:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007286:	f7fc fa47 	bl	8003718 <HAL_GetTick>
 800728a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800728c:	e00a      	b.n	80072a4 <HAL_RCCEx_PeriphCLKConfig+0xad4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800728e:	f7fc fa43 	bl	8003718 <HAL_GetTick>
 8007292:	4602      	mov	r2, r0
 8007294:	697b      	ldr	r3, [r7, #20]
 8007296:	1ad3      	subs	r3, r2, r3
 8007298:	2b64      	cmp	r3, #100	; 0x64
 800729a:	d903      	bls.n	80072a4 <HAL_RCCEx_PeriphCLKConfig+0xad4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800729c:	2303      	movs	r3, #3
 800729e:	e273      	b.n	8007788 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
 80072a0:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80072a4:	4b9a      	ldr	r3, [pc, #616]	; (8007510 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d1ee      	bne.n	800728e <HAL_RCCEx_PeriphCLKConfig+0xabe>
      }
    }

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	685b      	ldr	r3, [r3, #4]
 80072b4:	2b31      	cmp	r3, #49	; 0x31
 80072b6:	d904      	bls.n	80072c2 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	685b      	ldr	r3, [r3, #4]
 80072bc:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 80072c0:	d904      	bls.n	80072cc <HAL_RCCEx_PeriphCLKConfig+0xafc>
 80072c2:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 80072c6:	4893      	ldr	r0, [pc, #588]	; (8007514 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 80072c8:	f7fb fbf3 	bl	8002ab2 <assert_failed>

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f003 0301 	and.w	r3, r3, #1
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d02e      	beq.n	8007336 <HAL_RCCEx_PeriphCLKConfig+0xb66>
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d12a      	bne.n	8007336 <HAL_RCCEx_PeriphCLKConfig+0xb66>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	689b      	ldr	r3, [r3, #8]
 80072e4:	2b01      	cmp	r3, #1
 80072e6:	d903      	bls.n	80072f0 <HAL_RCCEx_PeriphCLKConfig+0xb20>
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	689b      	ldr	r3, [r3, #8]
 80072ec:	2b07      	cmp	r3, #7
 80072ee:	d904      	bls.n	80072fa <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 80072f0:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 80072f4:	4887      	ldr	r0, [pc, #540]	; (8007514 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 80072f6:	f7fb fbdc 	bl	8002ab2 <assert_failed>

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80072fa:	4b85      	ldr	r3, [pc, #532]	; (8007510 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 80072fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007300:	0c1b      	lsrs	r3, r3, #16
 8007302:	f003 0303 	and.w	r3, r3, #3
 8007306:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007308:	4b81      	ldr	r3, [pc, #516]	; (8007510 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 800730a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800730e:	0e1b      	lsrs	r3, r3, #24
 8007310:	f003 030f 	and.w	r3, r3, #15
 8007314:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	685b      	ldr	r3, [r3, #4]
 800731a:	019a      	lsls	r2, r3, #6
 800731c:	693b      	ldr	r3, [r7, #16]
 800731e:	041b      	lsls	r3, r3, #16
 8007320:	431a      	orrs	r2, r3
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	061b      	lsls	r3, r3, #24
 8007326:	431a      	orrs	r2, r3
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	689b      	ldr	r3, [r3, #8]
 800732c:	071b      	lsls	r3, r3, #28
 800732e:	4978      	ldr	r1, [pc, #480]	; (8007510 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8007330:	4313      	orrs	r3, r2
 8007332:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800733e:	2b00      	cmp	r3, #0
 8007340:	d004      	beq.n	800734c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007346:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800734a:	d00a      	beq.n	8007362 <HAL_RCCEx_PeriphCLKConfig+0xb92>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007354:	2b00      	cmp	r3, #0
 8007356:	d048      	beq.n	80073ea <HAL_RCCEx_PeriphCLKConfig+0xc1a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800735c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007360:	d143      	bne.n	80073ea <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {
      /* Check for PLLI2S Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	68db      	ldr	r3, [r3, #12]
 8007366:	2b01      	cmp	r3, #1
 8007368:	d903      	bls.n	8007372 <HAL_RCCEx_PeriphCLKConfig+0xba2>
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	68db      	ldr	r3, [r3, #12]
 800736e:	2b0f      	cmp	r3, #15
 8007370:	d904      	bls.n	800737c <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8007372:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
 8007376:	4867      	ldr	r0, [pc, #412]	; (8007514 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 8007378:	f7fb fb9b 	bl	8002ab2 <assert_failed>
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007380:	2b00      	cmp	r3, #0
 8007382:	d003      	beq.n	800738c <HAL_RCCEx_PeriphCLKConfig+0xbbc>
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007388:	2b20      	cmp	r3, #32
 800738a:	d904      	bls.n	8007396 <HAL_RCCEx_PeriphCLKConfig+0xbc6>
 800738c:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
 8007390:	4860      	ldr	r0, [pc, #384]	; (8007514 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 8007392:	f7fb fb8e 	bl	8002ab2 <assert_failed>

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007396:	4b5e      	ldr	r3, [pc, #376]	; (8007510 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8007398:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800739c:	0c1b      	lsrs	r3, r3, #16
 800739e:	f003 0303 	and.w	r3, r3, #3
 80073a2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80073a4:	4b5a      	ldr	r3, [pc, #360]	; (8007510 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 80073a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80073aa:	0f1b      	lsrs	r3, r3, #28
 80073ac:	f003 0307 	and.w	r3, r3, #7
 80073b0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	685b      	ldr	r3, [r3, #4]
 80073b6:	019a      	lsls	r2, r3, #6
 80073b8:	693b      	ldr	r3, [r7, #16]
 80073ba:	041b      	lsls	r3, r3, #16
 80073bc:	431a      	orrs	r2, r3
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	68db      	ldr	r3, [r3, #12]
 80073c2:	061b      	lsls	r3, r3, #24
 80073c4:	431a      	orrs	r2, r3
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	071b      	lsls	r3, r3, #28
 80073ca:	4951      	ldr	r1, [pc, #324]	; (8007510 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 80073cc:	4313      	orrs	r3, r2
 80073ce:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80073d2:	4b4f      	ldr	r3, [pc, #316]	; (8007510 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 80073d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80073d8:	f023 021f 	bic.w	r2, r3, #31
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073e0:	3b01      	subs	r3, #1
 80073e2:	494b      	ldr	r1, [pc, #300]	; (8007510 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 80073e4:	4313      	orrs	r3, r2
 80073e6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d032      	beq.n	800745c <HAL_RCCEx_PeriphCLKConfig+0xc8c>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	691b      	ldr	r3, [r3, #16]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d010      	beq.n	8007420 <HAL_RCCEx_PeriphCLKConfig+0xc50>
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	691b      	ldr	r3, [r3, #16]
 8007402:	2b01      	cmp	r3, #1
 8007404:	d00c      	beq.n	8007420 <HAL_RCCEx_PeriphCLKConfig+0xc50>
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	691b      	ldr	r3, [r3, #16]
 800740a:	2b02      	cmp	r3, #2
 800740c:	d008      	beq.n	8007420 <HAL_RCCEx_PeriphCLKConfig+0xc50>
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	691b      	ldr	r3, [r3, #16]
 8007412:	2b03      	cmp	r3, #3
 8007414:	d004      	beq.n	8007420 <HAL_RCCEx_PeriphCLKConfig+0xc50>
 8007416:	f240 2105 	movw	r1, #517	; 0x205
 800741a:	483e      	ldr	r0, [pc, #248]	; (8007514 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 800741c:	f7fb fb49 	bl	8002ab2 <assert_failed>

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007420:	4b3b      	ldr	r3, [pc, #236]	; (8007510 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8007422:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007426:	0e1b      	lsrs	r3, r3, #24
 8007428:	f003 030f 	and.w	r3, r3, #15
 800742c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800742e:	4b38      	ldr	r3, [pc, #224]	; (8007510 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8007430:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007434:	0f1b      	lsrs	r3, r3, #28
 8007436:	f003 0307 	and.w	r3, r3, #7
 800743a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	685b      	ldr	r3, [r3, #4]
 8007440:	019a      	lsls	r2, r3, #6
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	691b      	ldr	r3, [r3, #16]
 8007446:	041b      	lsls	r3, r3, #16
 8007448:	431a      	orrs	r2, r3
 800744a:	693b      	ldr	r3, [r7, #16]
 800744c:	061b      	lsls	r3, r3, #24
 800744e:	431a      	orrs	r2, r3
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	071b      	lsls	r3, r3, #28
 8007454:	492e      	ldr	r1, [pc, #184]	; (8007510 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8007456:	4313      	orrs	r3, r2
 8007458:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007464:	2b00      	cmp	r3, #0
 8007466:	d040      	beq.n	80074ea <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	691b      	ldr	r3, [r3, #16]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d010      	beq.n	8007492 <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	691b      	ldr	r3, [r3, #16]
 8007474:	2b01      	cmp	r3, #1
 8007476:	d00c      	beq.n	8007492 <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	691b      	ldr	r3, [r3, #16]
 800747c:	2b02      	cmp	r3, #2
 800747e:	d008      	beq.n	8007492 <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	691b      	ldr	r3, [r3, #16]
 8007484:	2b03      	cmp	r3, #3
 8007486:	d004      	beq.n	8007492 <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 8007488:	f44f 7105 	mov.w	r1, #532	; 0x214
 800748c:	4821      	ldr	r0, [pc, #132]	; (8007514 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 800748e:	f7fb fb10 	bl	8002ab2 <assert_failed>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	689b      	ldr	r3, [r3, #8]
 8007496:	2b01      	cmp	r3, #1
 8007498:	d903      	bls.n	80074a2 <HAL_RCCEx_PeriphCLKConfig+0xcd2>
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	689b      	ldr	r3, [r3, #8]
 800749e:	2b07      	cmp	r3, #7
 80074a0:	d904      	bls.n	80074ac <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 80074a2:	f240 2115 	movw	r1, #533	; 0x215
 80074a6:	481b      	ldr	r0, [pc, #108]	; (8007514 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 80074a8:	f7fb fb03 	bl	8002ab2 <assert_failed>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	68db      	ldr	r3, [r3, #12]
 80074b0:	2b01      	cmp	r3, #1
 80074b2:	d903      	bls.n	80074bc <HAL_RCCEx_PeriphCLKConfig+0xcec>
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	68db      	ldr	r3, [r3, #12]
 80074b8:	2b0f      	cmp	r3, #15
 80074ba:	d904      	bls.n	80074c6 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
 80074bc:	f240 2116 	movw	r1, #534	; 0x216
 80074c0:	4814      	ldr	r0, [pc, #80]	; (8007514 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 80074c2:	f7fb faf6 	bl	8002ab2 <assert_failed>

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	685b      	ldr	r3, [r3, #4]
 80074ca:	019a      	lsls	r2, r3, #6
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	691b      	ldr	r3, [r3, #16]
 80074d0:	041b      	lsls	r3, r3, #16
 80074d2:	431a      	orrs	r2, r3
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	68db      	ldr	r3, [r3, #12]
 80074d8:	061b      	lsls	r3, r3, #24
 80074da:	431a      	orrs	r2, r3
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	689b      	ldr	r3, [r3, #8]
 80074e0:	071b      	lsls	r3, r3, #28
 80074e2:	490b      	ldr	r1, [pc, #44]	; (8007510 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 80074e4:	4313      	orrs	r3, r2
 80074e6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80074ea:	4b09      	ldr	r3, [pc, #36]	; (8007510 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	4a08      	ldr	r2, [pc, #32]	; (8007510 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 80074f0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80074f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80074f6:	f7fc f90f 	bl	8003718 <HAL_GetTick>
 80074fa:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80074fc:	e00c      	b.n	8007518 <HAL_RCCEx_PeriphCLKConfig+0xd48>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80074fe:	f7fc f90b 	bl	8003718 <HAL_GetTick>
 8007502:	4602      	mov	r2, r0
 8007504:	697b      	ldr	r3, [r7, #20]
 8007506:	1ad3      	subs	r3, r2, r3
 8007508:	2b64      	cmp	r3, #100	; 0x64
 800750a:	d905      	bls.n	8007518 <HAL_RCCEx_PeriphCLKConfig+0xd48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800750c:	2303      	movs	r3, #3
 800750e:	e13b      	b.n	8007788 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
 8007510:	40023800 	.word	0x40023800
 8007514:	080167d8 	.word	0x080167d8
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007518:	4b9d      	ldr	r3, [pc, #628]	; (8007790 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007520:	2b00      	cmp	r3, #0
 8007522:	d0ec      	beq.n	80074fe <HAL_RCCEx_PeriphCLKConfig+0xd2e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8007524:	69bb      	ldr	r3, [r7, #24]
 8007526:	2b01      	cmp	r3, #1
 8007528:	f040 812d 	bne.w	8007786 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800752c:	4b98      	ldr	r3, [pc, #608]	; (8007790 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	4a97      	ldr	r2, [pc, #604]	; (8007790 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8007532:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007536:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007538:	f7fc f8ee 	bl	8003718 <HAL_GetTick>
 800753c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800753e:	e008      	b.n	8007552 <HAL_RCCEx_PeriphCLKConfig+0xd82>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007540:	f7fc f8ea 	bl	8003718 <HAL_GetTick>
 8007544:	4602      	mov	r2, r0
 8007546:	697b      	ldr	r3, [r7, #20]
 8007548:	1ad3      	subs	r3, r2, r3
 800754a:	2b64      	cmp	r3, #100	; 0x64
 800754c:	d901      	bls.n	8007552 <HAL_RCCEx_PeriphCLKConfig+0xd82>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800754e:	2303      	movs	r3, #3
 8007550:	e11a      	b.n	8007788 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007552:	4b8f      	ldr	r3, [pc, #572]	; (8007790 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800755a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800755e:	d0ef      	beq.n	8007540 <HAL_RCCEx_PeriphCLKConfig+0xd70>
      }
    }

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	695b      	ldr	r3, [r3, #20]
 8007564:	2b31      	cmp	r3, #49	; 0x31
 8007566:	d904      	bls.n	8007572 <HAL_RCCEx_PeriphCLKConfig+0xda2>
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	695b      	ldr	r3, [r3, #20]
 800756c:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8007570:	d904      	bls.n	800757c <HAL_RCCEx_PeriphCLKConfig+0xdac>
 8007572:	f44f 7111 	mov.w	r1, #580	; 0x244
 8007576:	4887      	ldr	r0, [pc, #540]	; (8007794 <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 8007578:	f7fb fa9b 	bl	8002ab2 <assert_failed>

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007584:	2b00      	cmp	r3, #0
 8007586:	d003      	beq.n	8007590 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800758c:	2b00      	cmp	r3, #0
 800758e:	d009      	beq.n	80075a4 <HAL_RCCEx_PeriphCLKConfig+0xdd4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007598:	2b00      	cmp	r3, #0
 800759a:	d048      	beq.n	800762e <HAL_RCCEx_PeriphCLKConfig+0xe5e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d144      	bne.n	800762e <HAL_RCCEx_PeriphCLKConfig+0xe5e>
    {
      /* check for PLLSAIQ Parameter */
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	699b      	ldr	r3, [r3, #24]
 80075a8:	2b01      	cmp	r3, #1
 80075aa:	d903      	bls.n	80075b4 <HAL_RCCEx_PeriphCLKConfig+0xde4>
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	699b      	ldr	r3, [r3, #24]
 80075b0:	2b0f      	cmp	r3, #15
 80075b2:	d904      	bls.n	80075be <HAL_RCCEx_PeriphCLKConfig+0xdee>
 80075b4:	f240 214b 	movw	r1, #587	; 0x24b
 80075b8:	4876      	ldr	r0, [pc, #472]	; (8007794 <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 80075ba:	f7fb fa7a 	bl	8002ab2 <assert_failed>
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d003      	beq.n	80075ce <HAL_RCCEx_PeriphCLKConfig+0xdfe>
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075ca:	2b20      	cmp	r3, #32
 80075cc:	d904      	bls.n	80075d8 <HAL_RCCEx_PeriphCLKConfig+0xe08>
 80075ce:	f240 214d 	movw	r1, #589	; 0x24d
 80075d2:	4870      	ldr	r0, [pc, #448]	; (8007794 <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 80075d4:	f7fb fa6d 	bl	8002ab2 <assert_failed>

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80075d8:	4b6d      	ldr	r3, [pc, #436]	; (8007790 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 80075da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075de:	0c1b      	lsrs	r3, r3, #16
 80075e0:	f003 0303 	and.w	r3, r3, #3
 80075e4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80075e6:	4b6a      	ldr	r3, [pc, #424]	; (8007790 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 80075e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075ec:	0f1b      	lsrs	r3, r3, #28
 80075ee:	f003 0307 	and.w	r3, r3, #7
 80075f2:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	695b      	ldr	r3, [r3, #20]
 80075f8:	019a      	lsls	r2, r3, #6
 80075fa:	693b      	ldr	r3, [r7, #16]
 80075fc:	041b      	lsls	r3, r3, #16
 80075fe:	431a      	orrs	r2, r3
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	699b      	ldr	r3, [r3, #24]
 8007604:	061b      	lsls	r3, r3, #24
 8007606:	431a      	orrs	r2, r3
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	071b      	lsls	r3, r3, #28
 800760c:	4960      	ldr	r1, [pc, #384]	; (8007790 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 800760e:	4313      	orrs	r3, r2
 8007610:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007614:	4b5e      	ldr	r3, [pc, #376]	; (8007790 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8007616:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800761a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007622:	3b01      	subs	r3, #1
 8007624:	021b      	lsls	r3, r3, #8
 8007626:	495a      	ldr	r1, [pc, #360]	; (8007790 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8007628:	4313      	orrs	r3, r2
 800762a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007636:	2b00      	cmp	r3, #0
 8007638:	d037      	beq.n	80076aa <HAL_RCCEx_PeriphCLKConfig+0xeda>
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800763e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007642:	d132      	bne.n	80076aa <HAL_RCCEx_PeriphCLKConfig+0xeda>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	6a1b      	ldr	r3, [r3, #32]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d010      	beq.n	800766e <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	6a1b      	ldr	r3, [r3, #32]
 8007650:	2b01      	cmp	r3, #1
 8007652:	d00c      	beq.n	800766e <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	6a1b      	ldr	r3, [r3, #32]
 8007658:	2b02      	cmp	r3, #2
 800765a:	d008      	beq.n	800766e <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	6a1b      	ldr	r3, [r3, #32]
 8007660:	2b03      	cmp	r3, #3
 8007662:	d004      	beq.n	800766e <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 8007664:	f44f 7118 	mov.w	r1, #608	; 0x260
 8007668:	484a      	ldr	r0, [pc, #296]	; (8007794 <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 800766a:	f7fb fa22 	bl	8002ab2 <assert_failed>
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800766e:	4b48      	ldr	r3, [pc, #288]	; (8007790 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8007670:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007674:	0e1b      	lsrs	r3, r3, #24
 8007676:	f003 030f 	and.w	r3, r3, #15
 800767a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800767c:	4b44      	ldr	r3, [pc, #272]	; (8007790 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 800767e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007682:	0f1b      	lsrs	r3, r3, #28
 8007684:	f003 0307 	and.w	r3, r3, #7
 8007688:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	695b      	ldr	r3, [r3, #20]
 800768e:	019a      	lsls	r2, r3, #6
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	6a1b      	ldr	r3, [r3, #32]
 8007694:	041b      	lsls	r3, r3, #16
 8007696:	431a      	orrs	r2, r3
 8007698:	693b      	ldr	r3, [r7, #16]
 800769a:	061b      	lsls	r3, r3, #24
 800769c:	431a      	orrs	r2, r3
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	071b      	lsls	r3, r3, #28
 80076a2:	493b      	ldr	r1, [pc, #236]	; (8007790 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 80076a4:	4313      	orrs	r3, r2
 80076a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f003 0308 	and.w	r3, r3, #8
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d04d      	beq.n	8007752 <HAL_RCCEx_PeriphCLKConfig+0xf82>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	69db      	ldr	r3, [r3, #28]
 80076ba:	2b01      	cmp	r3, #1
 80076bc:	d903      	bls.n	80076c6 <HAL_RCCEx_PeriphCLKConfig+0xef6>
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	69db      	ldr	r3, [r3, #28]
 80076c2:	2b07      	cmp	r3, #7
 80076c4:	d904      	bls.n	80076d0 <HAL_RCCEx_PeriphCLKConfig+0xf00>
 80076c6:	f240 216f 	movw	r1, #623	; 0x26f
 80076ca:	4832      	ldr	r0, [pc, #200]	; (8007794 <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 80076cc:	f7fb f9f1 	bl	8002ab2 <assert_failed>
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d013      	beq.n	8007700 <HAL_RCCEx_PeriphCLKConfig+0xf30>
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80076e0:	d00e      	beq.n	8007700 <HAL_RCCEx_PeriphCLKConfig+0xf30>
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076e6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80076ea:	d009      	beq.n	8007700 <HAL_RCCEx_PeriphCLKConfig+0xf30>
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076f0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80076f4:	d004      	beq.n	8007700 <HAL_RCCEx_PeriphCLKConfig+0xf30>
 80076f6:	f44f 711c 	mov.w	r1, #624	; 0x270
 80076fa:	4826      	ldr	r0, [pc, #152]	; (8007794 <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 80076fc:	f7fb f9d9 	bl	8002ab2 <assert_failed>

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007700:	4b23      	ldr	r3, [pc, #140]	; (8007790 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8007702:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007706:	0e1b      	lsrs	r3, r3, #24
 8007708:	f003 030f 	and.w	r3, r3, #15
 800770c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800770e:	4b20      	ldr	r3, [pc, #128]	; (8007790 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8007710:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007714:	0c1b      	lsrs	r3, r3, #16
 8007716:	f003 0303 	and.w	r3, r3, #3
 800771a:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	695b      	ldr	r3, [r3, #20]
 8007720:	019a      	lsls	r2, r3, #6
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	041b      	lsls	r3, r3, #16
 8007726:	431a      	orrs	r2, r3
 8007728:	693b      	ldr	r3, [r7, #16]
 800772a:	061b      	lsls	r3, r3, #24
 800772c:	431a      	orrs	r2, r3
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	69db      	ldr	r3, [r3, #28]
 8007732:	071b      	lsls	r3, r3, #28
 8007734:	4916      	ldr	r1, [pc, #88]	; (8007790 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8007736:	4313      	orrs	r3, r2
 8007738:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800773c:	4b14      	ldr	r3, [pc, #80]	; (8007790 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 800773e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007742:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800774a:	4911      	ldr	r1, [pc, #68]	; (8007790 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 800774c:	4313      	orrs	r3, r2
 800774e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007752:	4b0f      	ldr	r3, [pc, #60]	; (8007790 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	4a0e      	ldr	r2, [pc, #56]	; (8007790 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8007758:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800775c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800775e:	f7fb ffdb 	bl	8003718 <HAL_GetTick>
 8007762:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007764:	e008      	b.n	8007778 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007766:	f7fb ffd7 	bl	8003718 <HAL_GetTick>
 800776a:	4602      	mov	r2, r0
 800776c:	697b      	ldr	r3, [r7, #20]
 800776e:	1ad3      	subs	r3, r2, r3
 8007770:	2b64      	cmp	r3, #100	; 0x64
 8007772:	d901      	bls.n	8007778 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007774:	2303      	movs	r3, #3
 8007776:	e007      	b.n	8007788 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007778:	4b05      	ldr	r3, [pc, #20]	; (8007790 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007780:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007784:	d1ef      	bne.n	8007766 <HAL_RCCEx_PeriphCLKConfig+0xf96>
      }
    }
  }
  return HAL_OK;
 8007786:	2300      	movs	r3, #0
}
 8007788:	4618      	mov	r0, r3
 800778a:	3720      	adds	r7, #32
 800778c:	46bd      	mov	sp, r7
 800778e:	bd80      	pop	{r7, pc}
 8007790:	40023800 	.word	0x40023800
 8007794:	080167d8 	.word	0x080167d8

08007798 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007798:	b580      	push	{r7, lr}
 800779a:	b082      	sub	sp, #8
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d101      	bne.n	80077aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80077a6:	2301      	movs	r3, #1
 80077a8:	e0f5      	b.n	8007996 <HAL_TIM_Base_Init+0x1fe>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	4a7c      	ldr	r2, [pc, #496]	; (80079a0 <HAL_TIM_Base_Init+0x208>)
 80077b0:	4293      	cmp	r3, r2
 80077b2:	d045      	beq.n	8007840 <HAL_TIM_Base_Init+0xa8>
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077bc:	d040      	beq.n	8007840 <HAL_TIM_Base_Init+0xa8>
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	4a78      	ldr	r2, [pc, #480]	; (80079a4 <HAL_TIM_Base_Init+0x20c>)
 80077c4:	4293      	cmp	r3, r2
 80077c6:	d03b      	beq.n	8007840 <HAL_TIM_Base_Init+0xa8>
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	4a76      	ldr	r2, [pc, #472]	; (80079a8 <HAL_TIM_Base_Init+0x210>)
 80077ce:	4293      	cmp	r3, r2
 80077d0:	d036      	beq.n	8007840 <HAL_TIM_Base_Init+0xa8>
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	4a75      	ldr	r2, [pc, #468]	; (80079ac <HAL_TIM_Base_Init+0x214>)
 80077d8:	4293      	cmp	r3, r2
 80077da:	d031      	beq.n	8007840 <HAL_TIM_Base_Init+0xa8>
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	4a73      	ldr	r2, [pc, #460]	; (80079b0 <HAL_TIM_Base_Init+0x218>)
 80077e2:	4293      	cmp	r3, r2
 80077e4:	d02c      	beq.n	8007840 <HAL_TIM_Base_Init+0xa8>
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	4a72      	ldr	r2, [pc, #456]	; (80079b4 <HAL_TIM_Base_Init+0x21c>)
 80077ec:	4293      	cmp	r3, r2
 80077ee:	d027      	beq.n	8007840 <HAL_TIM_Base_Init+0xa8>
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	4a70      	ldr	r2, [pc, #448]	; (80079b8 <HAL_TIM_Base_Init+0x220>)
 80077f6:	4293      	cmp	r3, r2
 80077f8:	d022      	beq.n	8007840 <HAL_TIM_Base_Init+0xa8>
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	4a6f      	ldr	r2, [pc, #444]	; (80079bc <HAL_TIM_Base_Init+0x224>)
 8007800:	4293      	cmp	r3, r2
 8007802:	d01d      	beq.n	8007840 <HAL_TIM_Base_Init+0xa8>
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	4a6d      	ldr	r2, [pc, #436]	; (80079c0 <HAL_TIM_Base_Init+0x228>)
 800780a:	4293      	cmp	r3, r2
 800780c:	d018      	beq.n	8007840 <HAL_TIM_Base_Init+0xa8>
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	4a6c      	ldr	r2, [pc, #432]	; (80079c4 <HAL_TIM_Base_Init+0x22c>)
 8007814:	4293      	cmp	r3, r2
 8007816:	d013      	beq.n	8007840 <HAL_TIM_Base_Init+0xa8>
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	4a6a      	ldr	r2, [pc, #424]	; (80079c8 <HAL_TIM_Base_Init+0x230>)
 800781e:	4293      	cmp	r3, r2
 8007820:	d00e      	beq.n	8007840 <HAL_TIM_Base_Init+0xa8>
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	4a69      	ldr	r2, [pc, #420]	; (80079cc <HAL_TIM_Base_Init+0x234>)
 8007828:	4293      	cmp	r3, r2
 800782a:	d009      	beq.n	8007840 <HAL_TIM_Base_Init+0xa8>
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	4a67      	ldr	r2, [pc, #412]	; (80079d0 <HAL_TIM_Base_Init+0x238>)
 8007832:	4293      	cmp	r3, r2
 8007834:	d004      	beq.n	8007840 <HAL_TIM_Base_Init+0xa8>
 8007836:	f44f 718b 	mov.w	r1, #278	; 0x116
 800783a:	4866      	ldr	r0, [pc, #408]	; (80079d4 <HAL_TIM_Base_Init+0x23c>)
 800783c:	f7fb f939 	bl	8002ab2 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	689b      	ldr	r3, [r3, #8]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d014      	beq.n	8007872 <HAL_TIM_Base_Init+0xda>
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	689b      	ldr	r3, [r3, #8]
 800784c:	2b10      	cmp	r3, #16
 800784e:	d010      	beq.n	8007872 <HAL_TIM_Base_Init+0xda>
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	689b      	ldr	r3, [r3, #8]
 8007854:	2b20      	cmp	r3, #32
 8007856:	d00c      	beq.n	8007872 <HAL_TIM_Base_Init+0xda>
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	689b      	ldr	r3, [r3, #8]
 800785c:	2b40      	cmp	r3, #64	; 0x40
 800785e:	d008      	beq.n	8007872 <HAL_TIM_Base_Init+0xda>
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	689b      	ldr	r3, [r3, #8]
 8007864:	2b60      	cmp	r3, #96	; 0x60
 8007866:	d004      	beq.n	8007872 <HAL_TIM_Base_Init+0xda>
 8007868:	f240 1117 	movw	r1, #279	; 0x117
 800786c:	4859      	ldr	r0, [pc, #356]	; (80079d4 <HAL_TIM_Base_Init+0x23c>)
 800786e:	f7fb f920 	bl	8002ab2 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	691b      	ldr	r3, [r3, #16]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d00e      	beq.n	8007898 <HAL_TIM_Base_Init+0x100>
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	691b      	ldr	r3, [r3, #16]
 800787e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007882:	d009      	beq.n	8007898 <HAL_TIM_Base_Init+0x100>
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	691b      	ldr	r3, [r3, #16]
 8007888:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800788c:	d004      	beq.n	8007898 <HAL_TIM_Base_Init+0x100>
 800788e:	f44f 718c 	mov.w	r1, #280	; 0x118
 8007892:	4850      	ldr	r0, [pc, #320]	; (80079d4 <HAL_TIM_Base_Init+0x23c>)
 8007894:	f7fb f90d 	bl	8002ab2 <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078a0:	d004      	beq.n	80078ac <HAL_TIM_Base_Init+0x114>
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	4a41      	ldr	r2, [pc, #260]	; (80079ac <HAL_TIM_Base_Init+0x214>)
 80078a8:	4293      	cmp	r3, r2
 80078aa:	d107      	bne.n	80078bc <HAL_TIM_Base_Init+0x124>
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	68db      	ldr	r3, [r3, #12]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	bf14      	ite	ne
 80078b4:	2301      	movne	r3, #1
 80078b6:	2300      	moveq	r3, #0
 80078b8:	b2db      	uxtb	r3, r3
 80078ba:	e00e      	b.n	80078da <HAL_TIM_Base_Init+0x142>
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	68db      	ldr	r3, [r3, #12]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d006      	beq.n	80078d2 <HAL_TIM_Base_Init+0x13a>
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	68db      	ldr	r3, [r3, #12]
 80078c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80078cc:	d201      	bcs.n	80078d2 <HAL_TIM_Base_Init+0x13a>
 80078ce:	2301      	movs	r3, #1
 80078d0:	e000      	b.n	80078d4 <HAL_TIM_Base_Init+0x13c>
 80078d2:	2300      	movs	r3, #0
 80078d4:	f003 0301 	and.w	r3, r3, #1
 80078d8:	b2db      	uxtb	r3, r3
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d104      	bne.n	80078e8 <HAL_TIM_Base_Init+0x150>
 80078de:	f240 1119 	movw	r1, #281	; 0x119
 80078e2:	483c      	ldr	r0, [pc, #240]	; (80079d4 <HAL_TIM_Base_Init+0x23c>)
 80078e4:	f7fb f8e5 	bl	8002ab2 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	699b      	ldr	r3, [r3, #24]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d008      	beq.n	8007902 <HAL_TIM_Base_Init+0x16a>
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	699b      	ldr	r3, [r3, #24]
 80078f4:	2b80      	cmp	r3, #128	; 0x80
 80078f6:	d004      	beq.n	8007902 <HAL_TIM_Base_Init+0x16a>
 80078f8:	f44f 718d 	mov.w	r1, #282	; 0x11a
 80078fc:	4835      	ldr	r0, [pc, #212]	; (80079d4 <HAL_TIM_Base_Init+0x23c>)
 80078fe:	f7fb f8d8 	bl	8002ab2 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007908:	b2db      	uxtb	r3, r3
 800790a:	2b00      	cmp	r3, #0
 800790c:	d106      	bne.n	800791c <HAL_TIM_Base_Init+0x184>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	2200      	movs	r2, #0
 8007912:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007916:	6878      	ldr	r0, [r7, #4]
 8007918:	f7fb fc30 	bl	800317c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2202      	movs	r2, #2
 8007920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681a      	ldr	r2, [r3, #0]
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	3304      	adds	r3, #4
 800792c:	4619      	mov	r1, r3
 800792e:	4610      	mov	r0, r2
 8007930:	f001 fa52 	bl	8008dd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2201      	movs	r2, #1
 8007938:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2201      	movs	r2, #1
 8007940:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2201      	movs	r2, #1
 8007948:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2201      	movs	r2, #1
 8007950:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2201      	movs	r2, #1
 8007958:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2201      	movs	r2, #1
 8007960:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2201      	movs	r2, #1
 8007968:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2201      	movs	r2, #1
 8007970:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2201      	movs	r2, #1
 8007978:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2201      	movs	r2, #1
 8007980:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2201      	movs	r2, #1
 8007988:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2201      	movs	r2, #1
 8007990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007994:	2300      	movs	r3, #0
}
 8007996:	4618      	mov	r0, r3
 8007998:	3708      	adds	r7, #8
 800799a:	46bd      	mov	sp, r7
 800799c:	bd80      	pop	{r7, pc}
 800799e:	bf00      	nop
 80079a0:	40010000 	.word	0x40010000
 80079a4:	40000400 	.word	0x40000400
 80079a8:	40000800 	.word	0x40000800
 80079ac:	40000c00 	.word	0x40000c00
 80079b0:	40001000 	.word	0x40001000
 80079b4:	40001400 	.word	0x40001400
 80079b8:	40010400 	.word	0x40010400
 80079bc:	40014000 	.word	0x40014000
 80079c0:	40014400 	.word	0x40014400
 80079c4:	40014800 	.word	0x40014800
 80079c8:	40001800 	.word	0x40001800
 80079cc:	40001c00 	.word	0x40001c00
 80079d0:	40002000 	.word	0x40002000
 80079d4:	08016814 	.word	0x08016814

080079d8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80079d8:	b580      	push	{r7, lr}
 80079da:	b082      	sub	sp, #8
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d101      	bne.n	80079ea <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80079e6:	2301      	movs	r3, #1
 80079e8:	e0f5      	b.n	8007bd6 <HAL_TIM_PWM_Init+0x1fe>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	4a7c      	ldr	r2, [pc, #496]	; (8007be0 <HAL_TIM_PWM_Init+0x208>)
 80079f0:	4293      	cmp	r3, r2
 80079f2:	d045      	beq.n	8007a80 <HAL_TIM_PWM_Init+0xa8>
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079fc:	d040      	beq.n	8007a80 <HAL_TIM_PWM_Init+0xa8>
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	4a78      	ldr	r2, [pc, #480]	; (8007be4 <HAL_TIM_PWM_Init+0x20c>)
 8007a04:	4293      	cmp	r3, r2
 8007a06:	d03b      	beq.n	8007a80 <HAL_TIM_PWM_Init+0xa8>
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	4a76      	ldr	r2, [pc, #472]	; (8007be8 <HAL_TIM_PWM_Init+0x210>)
 8007a0e:	4293      	cmp	r3, r2
 8007a10:	d036      	beq.n	8007a80 <HAL_TIM_PWM_Init+0xa8>
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	4a75      	ldr	r2, [pc, #468]	; (8007bec <HAL_TIM_PWM_Init+0x214>)
 8007a18:	4293      	cmp	r3, r2
 8007a1a:	d031      	beq.n	8007a80 <HAL_TIM_PWM_Init+0xa8>
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	4a73      	ldr	r2, [pc, #460]	; (8007bf0 <HAL_TIM_PWM_Init+0x218>)
 8007a22:	4293      	cmp	r3, r2
 8007a24:	d02c      	beq.n	8007a80 <HAL_TIM_PWM_Init+0xa8>
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	4a72      	ldr	r2, [pc, #456]	; (8007bf4 <HAL_TIM_PWM_Init+0x21c>)
 8007a2c:	4293      	cmp	r3, r2
 8007a2e:	d027      	beq.n	8007a80 <HAL_TIM_PWM_Init+0xa8>
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	4a70      	ldr	r2, [pc, #448]	; (8007bf8 <HAL_TIM_PWM_Init+0x220>)
 8007a36:	4293      	cmp	r3, r2
 8007a38:	d022      	beq.n	8007a80 <HAL_TIM_PWM_Init+0xa8>
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	4a6f      	ldr	r2, [pc, #444]	; (8007bfc <HAL_TIM_PWM_Init+0x224>)
 8007a40:	4293      	cmp	r3, r2
 8007a42:	d01d      	beq.n	8007a80 <HAL_TIM_PWM_Init+0xa8>
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	4a6d      	ldr	r2, [pc, #436]	; (8007c00 <HAL_TIM_PWM_Init+0x228>)
 8007a4a:	4293      	cmp	r3, r2
 8007a4c:	d018      	beq.n	8007a80 <HAL_TIM_PWM_Init+0xa8>
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	4a6c      	ldr	r2, [pc, #432]	; (8007c04 <HAL_TIM_PWM_Init+0x22c>)
 8007a54:	4293      	cmp	r3, r2
 8007a56:	d013      	beq.n	8007a80 <HAL_TIM_PWM_Init+0xa8>
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	4a6a      	ldr	r2, [pc, #424]	; (8007c08 <HAL_TIM_PWM_Init+0x230>)
 8007a5e:	4293      	cmp	r3, r2
 8007a60:	d00e      	beq.n	8007a80 <HAL_TIM_PWM_Init+0xa8>
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	4a69      	ldr	r2, [pc, #420]	; (8007c0c <HAL_TIM_PWM_Init+0x234>)
 8007a68:	4293      	cmp	r3, r2
 8007a6a:	d009      	beq.n	8007a80 <HAL_TIM_PWM_Init+0xa8>
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	4a67      	ldr	r2, [pc, #412]	; (8007c10 <HAL_TIM_PWM_Init+0x238>)
 8007a72:	4293      	cmp	r3, r2
 8007a74:	d004      	beq.n	8007a80 <HAL_TIM_PWM_Init+0xa8>
 8007a76:	f240 5133 	movw	r1, #1331	; 0x533
 8007a7a:	4866      	ldr	r0, [pc, #408]	; (8007c14 <HAL_TIM_PWM_Init+0x23c>)
 8007a7c:	f7fb f819 	bl	8002ab2 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	689b      	ldr	r3, [r3, #8]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d014      	beq.n	8007ab2 <HAL_TIM_PWM_Init+0xda>
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	689b      	ldr	r3, [r3, #8]
 8007a8c:	2b10      	cmp	r3, #16
 8007a8e:	d010      	beq.n	8007ab2 <HAL_TIM_PWM_Init+0xda>
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	689b      	ldr	r3, [r3, #8]
 8007a94:	2b20      	cmp	r3, #32
 8007a96:	d00c      	beq.n	8007ab2 <HAL_TIM_PWM_Init+0xda>
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	689b      	ldr	r3, [r3, #8]
 8007a9c:	2b40      	cmp	r3, #64	; 0x40
 8007a9e:	d008      	beq.n	8007ab2 <HAL_TIM_PWM_Init+0xda>
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	689b      	ldr	r3, [r3, #8]
 8007aa4:	2b60      	cmp	r3, #96	; 0x60
 8007aa6:	d004      	beq.n	8007ab2 <HAL_TIM_PWM_Init+0xda>
 8007aa8:	f240 5134 	movw	r1, #1332	; 0x534
 8007aac:	4859      	ldr	r0, [pc, #356]	; (8007c14 <HAL_TIM_PWM_Init+0x23c>)
 8007aae:	f7fb f800 	bl	8002ab2 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	691b      	ldr	r3, [r3, #16]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d00e      	beq.n	8007ad8 <HAL_TIM_PWM_Init+0x100>
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	691b      	ldr	r3, [r3, #16]
 8007abe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ac2:	d009      	beq.n	8007ad8 <HAL_TIM_PWM_Init+0x100>
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	691b      	ldr	r3, [r3, #16]
 8007ac8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007acc:	d004      	beq.n	8007ad8 <HAL_TIM_PWM_Init+0x100>
 8007ace:	f240 5135 	movw	r1, #1333	; 0x535
 8007ad2:	4850      	ldr	r0, [pc, #320]	; (8007c14 <HAL_TIM_PWM_Init+0x23c>)
 8007ad4:	f7fa ffed 	bl	8002ab2 <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ae0:	d004      	beq.n	8007aec <HAL_TIM_PWM_Init+0x114>
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	4a41      	ldr	r2, [pc, #260]	; (8007bec <HAL_TIM_PWM_Init+0x214>)
 8007ae8:	4293      	cmp	r3, r2
 8007aea:	d107      	bne.n	8007afc <HAL_TIM_PWM_Init+0x124>
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	68db      	ldr	r3, [r3, #12]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	bf14      	ite	ne
 8007af4:	2301      	movne	r3, #1
 8007af6:	2300      	moveq	r3, #0
 8007af8:	b2db      	uxtb	r3, r3
 8007afa:	e00e      	b.n	8007b1a <HAL_TIM_PWM_Init+0x142>
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	68db      	ldr	r3, [r3, #12]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d006      	beq.n	8007b12 <HAL_TIM_PWM_Init+0x13a>
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	68db      	ldr	r3, [r3, #12]
 8007b08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b0c:	d201      	bcs.n	8007b12 <HAL_TIM_PWM_Init+0x13a>
 8007b0e:	2301      	movs	r3, #1
 8007b10:	e000      	b.n	8007b14 <HAL_TIM_PWM_Init+0x13c>
 8007b12:	2300      	movs	r3, #0
 8007b14:	f003 0301 	and.w	r3, r3, #1
 8007b18:	b2db      	uxtb	r3, r3
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d104      	bne.n	8007b28 <HAL_TIM_PWM_Init+0x150>
 8007b1e:	f240 5136 	movw	r1, #1334	; 0x536
 8007b22:	483c      	ldr	r0, [pc, #240]	; (8007c14 <HAL_TIM_PWM_Init+0x23c>)
 8007b24:	f7fa ffc5 	bl	8002ab2 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	699b      	ldr	r3, [r3, #24]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d008      	beq.n	8007b42 <HAL_TIM_PWM_Init+0x16a>
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	699b      	ldr	r3, [r3, #24]
 8007b34:	2b80      	cmp	r3, #128	; 0x80
 8007b36:	d004      	beq.n	8007b42 <HAL_TIM_PWM_Init+0x16a>
 8007b38:	f240 5137 	movw	r1, #1335	; 0x537
 8007b3c:	4835      	ldr	r0, [pc, #212]	; (8007c14 <HAL_TIM_PWM_Init+0x23c>)
 8007b3e:	f7fa ffb8 	bl	8002ab2 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b48:	b2db      	uxtb	r3, r3
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d106      	bne.n	8007b5c <HAL_TIM_PWM_Init+0x184>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	2200      	movs	r2, #0
 8007b52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007b56:	6878      	ldr	r0, [r7, #4]
 8007b58:	f000 f85e 	bl	8007c18 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2202      	movs	r2, #2
 8007b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681a      	ldr	r2, [r3, #0]
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	3304      	adds	r3, #4
 8007b6c:	4619      	mov	r1, r3
 8007b6e:	4610      	mov	r0, r2
 8007b70:	f001 f932 	bl	8008dd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2201      	movs	r2, #1
 8007b78:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2201      	movs	r2, #1
 8007b80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2201      	movs	r2, #1
 8007b88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2201      	movs	r2, #1
 8007b90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2201      	movs	r2, #1
 8007b98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2201      	movs	r2, #1
 8007ba0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2201      	movs	r2, #1
 8007ba8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	2201      	movs	r2, #1
 8007bb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	2201      	movs	r2, #1
 8007bb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	2201      	movs	r2, #1
 8007bc0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2201      	movs	r2, #1
 8007bc8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2201      	movs	r2, #1
 8007bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007bd4:	2300      	movs	r3, #0
}
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	3708      	adds	r7, #8
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	bd80      	pop	{r7, pc}
 8007bde:	bf00      	nop
 8007be0:	40010000 	.word	0x40010000
 8007be4:	40000400 	.word	0x40000400
 8007be8:	40000800 	.word	0x40000800
 8007bec:	40000c00 	.word	0x40000c00
 8007bf0:	40001000 	.word	0x40001000
 8007bf4:	40001400 	.word	0x40001400
 8007bf8:	40010400 	.word	0x40010400
 8007bfc:	40014000 	.word	0x40014000
 8007c00:	40014400 	.word	0x40014400
 8007c04:	40014800 	.word	0x40014800
 8007c08:	40001800 	.word	0x40001800
 8007c0c:	40001c00 	.word	0x40001c00
 8007c10:	40002000 	.word	0x40002000
 8007c14:	08016814 	.word	0x08016814

08007c18 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007c18:	b480      	push	{r7}
 8007c1a:	b083      	sub	sp, #12
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007c20:	bf00      	nop
 8007c22:	370c      	adds	r7, #12
 8007c24:	46bd      	mov	sp, r7
 8007c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2a:	4770      	bx	lr

08007c2c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b084      	sub	sp, #16
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
 8007c34:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	4a89      	ldr	r2, [pc, #548]	; (8007e60 <HAL_TIM_PWM_Start+0x234>)
 8007c3c:	4293      	cmp	r3, r2
 8007c3e:	d117      	bne.n	8007c70 <HAL_TIM_PWM_Start+0x44>
 8007c40:	683b      	ldr	r3, [r7, #0]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	f000 80ae 	beq.w	8007da4 <HAL_TIM_PWM_Start+0x178>
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	2b04      	cmp	r3, #4
 8007c4c:	f000 80aa 	beq.w	8007da4 <HAL_TIM_PWM_Start+0x178>
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	2b08      	cmp	r3, #8
 8007c54:	f000 80a6 	beq.w	8007da4 <HAL_TIM_PWM_Start+0x178>
 8007c58:	683b      	ldr	r3, [r7, #0]
 8007c5a:	2b0c      	cmp	r3, #12
 8007c5c:	f000 80a2 	beq.w	8007da4 <HAL_TIM_PWM_Start+0x178>
 8007c60:	683b      	ldr	r3, [r7, #0]
 8007c62:	2b10      	cmp	r3, #16
 8007c64:	f000 809e 	beq.w	8007da4 <HAL_TIM_PWM_Start+0x178>
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	2b14      	cmp	r3, #20
 8007c6c:	f000 809a 	beq.w	8007da4 <HAL_TIM_PWM_Start+0x178>
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c78:	d10f      	bne.n	8007c9a <HAL_TIM_PWM_Start+0x6e>
 8007c7a:	683b      	ldr	r3, [r7, #0]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	f000 8091 	beq.w	8007da4 <HAL_TIM_PWM_Start+0x178>
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	2b04      	cmp	r3, #4
 8007c86:	f000 808d 	beq.w	8007da4 <HAL_TIM_PWM_Start+0x178>
 8007c8a:	683b      	ldr	r3, [r7, #0]
 8007c8c:	2b08      	cmp	r3, #8
 8007c8e:	f000 8089 	beq.w	8007da4 <HAL_TIM_PWM_Start+0x178>
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	2b0c      	cmp	r3, #12
 8007c96:	f000 8085 	beq.w	8007da4 <HAL_TIM_PWM_Start+0x178>
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	4a71      	ldr	r2, [pc, #452]	; (8007e64 <HAL_TIM_PWM_Start+0x238>)
 8007ca0:	4293      	cmp	r3, r2
 8007ca2:	d10b      	bne.n	8007cbc <HAL_TIM_PWM_Start+0x90>
 8007ca4:	683b      	ldr	r3, [r7, #0]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d07c      	beq.n	8007da4 <HAL_TIM_PWM_Start+0x178>
 8007caa:	683b      	ldr	r3, [r7, #0]
 8007cac:	2b04      	cmp	r3, #4
 8007cae:	d079      	beq.n	8007da4 <HAL_TIM_PWM_Start+0x178>
 8007cb0:	683b      	ldr	r3, [r7, #0]
 8007cb2:	2b08      	cmp	r3, #8
 8007cb4:	d076      	beq.n	8007da4 <HAL_TIM_PWM_Start+0x178>
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	2b0c      	cmp	r3, #12
 8007cba:	d073      	beq.n	8007da4 <HAL_TIM_PWM_Start+0x178>
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	4a69      	ldr	r2, [pc, #420]	; (8007e68 <HAL_TIM_PWM_Start+0x23c>)
 8007cc2:	4293      	cmp	r3, r2
 8007cc4:	d10b      	bne.n	8007cde <HAL_TIM_PWM_Start+0xb2>
 8007cc6:	683b      	ldr	r3, [r7, #0]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d06b      	beq.n	8007da4 <HAL_TIM_PWM_Start+0x178>
 8007ccc:	683b      	ldr	r3, [r7, #0]
 8007cce:	2b04      	cmp	r3, #4
 8007cd0:	d068      	beq.n	8007da4 <HAL_TIM_PWM_Start+0x178>
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	2b08      	cmp	r3, #8
 8007cd6:	d065      	beq.n	8007da4 <HAL_TIM_PWM_Start+0x178>
 8007cd8:	683b      	ldr	r3, [r7, #0]
 8007cda:	2b0c      	cmp	r3, #12
 8007cdc:	d062      	beq.n	8007da4 <HAL_TIM_PWM_Start+0x178>
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	4a62      	ldr	r2, [pc, #392]	; (8007e6c <HAL_TIM_PWM_Start+0x240>)
 8007ce4:	4293      	cmp	r3, r2
 8007ce6:	d10b      	bne.n	8007d00 <HAL_TIM_PWM_Start+0xd4>
 8007ce8:	683b      	ldr	r3, [r7, #0]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d05a      	beq.n	8007da4 <HAL_TIM_PWM_Start+0x178>
 8007cee:	683b      	ldr	r3, [r7, #0]
 8007cf0:	2b04      	cmp	r3, #4
 8007cf2:	d057      	beq.n	8007da4 <HAL_TIM_PWM_Start+0x178>
 8007cf4:	683b      	ldr	r3, [r7, #0]
 8007cf6:	2b08      	cmp	r3, #8
 8007cf8:	d054      	beq.n	8007da4 <HAL_TIM_PWM_Start+0x178>
 8007cfa:	683b      	ldr	r3, [r7, #0]
 8007cfc:	2b0c      	cmp	r3, #12
 8007cfe:	d051      	beq.n	8007da4 <HAL_TIM_PWM_Start+0x178>
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	4a5a      	ldr	r2, [pc, #360]	; (8007e70 <HAL_TIM_PWM_Start+0x244>)
 8007d06:	4293      	cmp	r3, r2
 8007d08:	d111      	bne.n	8007d2e <HAL_TIM_PWM_Start+0x102>
 8007d0a:	683b      	ldr	r3, [r7, #0]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d049      	beq.n	8007da4 <HAL_TIM_PWM_Start+0x178>
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	2b04      	cmp	r3, #4
 8007d14:	d046      	beq.n	8007da4 <HAL_TIM_PWM_Start+0x178>
 8007d16:	683b      	ldr	r3, [r7, #0]
 8007d18:	2b08      	cmp	r3, #8
 8007d1a:	d043      	beq.n	8007da4 <HAL_TIM_PWM_Start+0x178>
 8007d1c:	683b      	ldr	r3, [r7, #0]
 8007d1e:	2b0c      	cmp	r3, #12
 8007d20:	d040      	beq.n	8007da4 <HAL_TIM_PWM_Start+0x178>
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	2b10      	cmp	r3, #16
 8007d26:	d03d      	beq.n	8007da4 <HAL_TIM_PWM_Start+0x178>
 8007d28:	683b      	ldr	r3, [r7, #0]
 8007d2a:	2b14      	cmp	r3, #20
 8007d2c:	d03a      	beq.n	8007da4 <HAL_TIM_PWM_Start+0x178>
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	4a50      	ldr	r2, [pc, #320]	; (8007e74 <HAL_TIM_PWM_Start+0x248>)
 8007d34:	4293      	cmp	r3, r2
 8007d36:	d105      	bne.n	8007d44 <HAL_TIM_PWM_Start+0x118>
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d032      	beq.n	8007da4 <HAL_TIM_PWM_Start+0x178>
 8007d3e:	683b      	ldr	r3, [r7, #0]
 8007d40:	2b04      	cmp	r3, #4
 8007d42:	d02f      	beq.n	8007da4 <HAL_TIM_PWM_Start+0x178>
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	4a4b      	ldr	r2, [pc, #300]	; (8007e78 <HAL_TIM_PWM_Start+0x24c>)
 8007d4a:	4293      	cmp	r3, r2
 8007d4c:	d102      	bne.n	8007d54 <HAL_TIM_PWM_Start+0x128>
 8007d4e:	683b      	ldr	r3, [r7, #0]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d027      	beq.n	8007da4 <HAL_TIM_PWM_Start+0x178>
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	4a48      	ldr	r2, [pc, #288]	; (8007e7c <HAL_TIM_PWM_Start+0x250>)
 8007d5a:	4293      	cmp	r3, r2
 8007d5c:	d102      	bne.n	8007d64 <HAL_TIM_PWM_Start+0x138>
 8007d5e:	683b      	ldr	r3, [r7, #0]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d01f      	beq.n	8007da4 <HAL_TIM_PWM_Start+0x178>
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	4a45      	ldr	r2, [pc, #276]	; (8007e80 <HAL_TIM_PWM_Start+0x254>)
 8007d6a:	4293      	cmp	r3, r2
 8007d6c:	d105      	bne.n	8007d7a <HAL_TIM_PWM_Start+0x14e>
 8007d6e:	683b      	ldr	r3, [r7, #0]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d017      	beq.n	8007da4 <HAL_TIM_PWM_Start+0x178>
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	2b04      	cmp	r3, #4
 8007d78:	d014      	beq.n	8007da4 <HAL_TIM_PWM_Start+0x178>
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	4a41      	ldr	r2, [pc, #260]	; (8007e84 <HAL_TIM_PWM_Start+0x258>)
 8007d80:	4293      	cmp	r3, r2
 8007d82:	d102      	bne.n	8007d8a <HAL_TIM_PWM_Start+0x15e>
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d00c      	beq.n	8007da4 <HAL_TIM_PWM_Start+0x178>
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	4a3e      	ldr	r2, [pc, #248]	; (8007e88 <HAL_TIM_PWM_Start+0x25c>)
 8007d90:	4293      	cmp	r3, r2
 8007d92:	d102      	bne.n	8007d9a <HAL_TIM_PWM_Start+0x16e>
 8007d94:	683b      	ldr	r3, [r7, #0]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d004      	beq.n	8007da4 <HAL_TIM_PWM_Start+0x178>
 8007d9a:	f240 51bc 	movw	r1, #1468	; 0x5bc
 8007d9e:	483b      	ldr	r0, [pc, #236]	; (8007e8c <HAL_TIM_PWM_Start+0x260>)
 8007da0:	f7fa fe87 	bl	8002ab2 <assert_failed>

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007da4:	683b      	ldr	r3, [r7, #0]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d109      	bne.n	8007dbe <HAL_TIM_PWM_Start+0x192>
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007db0:	b2db      	uxtb	r3, r3
 8007db2:	2b01      	cmp	r3, #1
 8007db4:	bf14      	ite	ne
 8007db6:	2301      	movne	r3, #1
 8007db8:	2300      	moveq	r3, #0
 8007dba:	b2db      	uxtb	r3, r3
 8007dbc:	e03c      	b.n	8007e38 <HAL_TIM_PWM_Start+0x20c>
 8007dbe:	683b      	ldr	r3, [r7, #0]
 8007dc0:	2b04      	cmp	r3, #4
 8007dc2:	d109      	bne.n	8007dd8 <HAL_TIM_PWM_Start+0x1ac>
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007dca:	b2db      	uxtb	r3, r3
 8007dcc:	2b01      	cmp	r3, #1
 8007dce:	bf14      	ite	ne
 8007dd0:	2301      	movne	r3, #1
 8007dd2:	2300      	moveq	r3, #0
 8007dd4:	b2db      	uxtb	r3, r3
 8007dd6:	e02f      	b.n	8007e38 <HAL_TIM_PWM_Start+0x20c>
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	2b08      	cmp	r3, #8
 8007ddc:	d109      	bne.n	8007df2 <HAL_TIM_PWM_Start+0x1c6>
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007de4:	b2db      	uxtb	r3, r3
 8007de6:	2b01      	cmp	r3, #1
 8007de8:	bf14      	ite	ne
 8007dea:	2301      	movne	r3, #1
 8007dec:	2300      	moveq	r3, #0
 8007dee:	b2db      	uxtb	r3, r3
 8007df0:	e022      	b.n	8007e38 <HAL_TIM_PWM_Start+0x20c>
 8007df2:	683b      	ldr	r3, [r7, #0]
 8007df4:	2b0c      	cmp	r3, #12
 8007df6:	d109      	bne.n	8007e0c <HAL_TIM_PWM_Start+0x1e0>
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007dfe:	b2db      	uxtb	r3, r3
 8007e00:	2b01      	cmp	r3, #1
 8007e02:	bf14      	ite	ne
 8007e04:	2301      	movne	r3, #1
 8007e06:	2300      	moveq	r3, #0
 8007e08:	b2db      	uxtb	r3, r3
 8007e0a:	e015      	b.n	8007e38 <HAL_TIM_PWM_Start+0x20c>
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	2b10      	cmp	r3, #16
 8007e10:	d109      	bne.n	8007e26 <HAL_TIM_PWM_Start+0x1fa>
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007e18:	b2db      	uxtb	r3, r3
 8007e1a:	2b01      	cmp	r3, #1
 8007e1c:	bf14      	ite	ne
 8007e1e:	2301      	movne	r3, #1
 8007e20:	2300      	moveq	r3, #0
 8007e22:	b2db      	uxtb	r3, r3
 8007e24:	e008      	b.n	8007e38 <HAL_TIM_PWM_Start+0x20c>
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007e2c:	b2db      	uxtb	r3, r3
 8007e2e:	2b01      	cmp	r3, #1
 8007e30:	bf14      	ite	ne
 8007e32:	2301      	movne	r3, #1
 8007e34:	2300      	moveq	r3, #0
 8007e36:	b2db      	uxtb	r3, r3
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d001      	beq.n	8007e40 <HAL_TIM_PWM_Start+0x214>
  {
    return HAL_ERROR;
 8007e3c:	2301      	movs	r3, #1
 8007e3e:	e0aa      	b.n	8007f96 <HAL_TIM_PWM_Start+0x36a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007e40:	683b      	ldr	r3, [r7, #0]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d104      	bne.n	8007e50 <HAL_TIM_PWM_Start+0x224>
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	2202      	movs	r2, #2
 8007e4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007e4e:	e03b      	b.n	8007ec8 <HAL_TIM_PWM_Start+0x29c>
 8007e50:	683b      	ldr	r3, [r7, #0]
 8007e52:	2b04      	cmp	r3, #4
 8007e54:	d11c      	bne.n	8007e90 <HAL_TIM_PWM_Start+0x264>
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	2202      	movs	r2, #2
 8007e5a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007e5e:	e033      	b.n	8007ec8 <HAL_TIM_PWM_Start+0x29c>
 8007e60:	40010000 	.word	0x40010000
 8007e64:	40000400 	.word	0x40000400
 8007e68:	40000800 	.word	0x40000800
 8007e6c:	40000c00 	.word	0x40000c00
 8007e70:	40010400 	.word	0x40010400
 8007e74:	40014000 	.word	0x40014000
 8007e78:	40014400 	.word	0x40014400
 8007e7c:	40014800 	.word	0x40014800
 8007e80:	40001800 	.word	0x40001800
 8007e84:	40001c00 	.word	0x40001c00
 8007e88:	40002000 	.word	0x40002000
 8007e8c:	08016814 	.word	0x08016814
 8007e90:	683b      	ldr	r3, [r7, #0]
 8007e92:	2b08      	cmp	r3, #8
 8007e94:	d104      	bne.n	8007ea0 <HAL_TIM_PWM_Start+0x274>
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	2202      	movs	r2, #2
 8007e9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007e9e:	e013      	b.n	8007ec8 <HAL_TIM_PWM_Start+0x29c>
 8007ea0:	683b      	ldr	r3, [r7, #0]
 8007ea2:	2b0c      	cmp	r3, #12
 8007ea4:	d104      	bne.n	8007eb0 <HAL_TIM_PWM_Start+0x284>
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	2202      	movs	r2, #2
 8007eaa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007eae:	e00b      	b.n	8007ec8 <HAL_TIM_PWM_Start+0x29c>
 8007eb0:	683b      	ldr	r3, [r7, #0]
 8007eb2:	2b10      	cmp	r3, #16
 8007eb4:	d104      	bne.n	8007ec0 <HAL_TIM_PWM_Start+0x294>
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	2202      	movs	r2, #2
 8007eba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007ebe:	e003      	b.n	8007ec8 <HAL_TIM_PWM_Start+0x29c>
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	2202      	movs	r2, #2
 8007ec4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	2201      	movs	r2, #1
 8007ece:	6839      	ldr	r1, [r7, #0]
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	f001 fba3 	bl	800961c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	4a31      	ldr	r2, [pc, #196]	; (8007fa0 <HAL_TIM_PWM_Start+0x374>)
 8007edc:	4293      	cmp	r3, r2
 8007ede:	d004      	beq.n	8007eea <HAL_TIM_PWM_Start+0x2be>
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	4a2f      	ldr	r2, [pc, #188]	; (8007fa4 <HAL_TIM_PWM_Start+0x378>)
 8007ee6:	4293      	cmp	r3, r2
 8007ee8:	d101      	bne.n	8007eee <HAL_TIM_PWM_Start+0x2c2>
 8007eea:	2301      	movs	r3, #1
 8007eec:	e000      	b.n	8007ef0 <HAL_TIM_PWM_Start+0x2c4>
 8007eee:	2300      	movs	r3, #0
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d007      	beq.n	8007f04 <HAL_TIM_PWM_Start+0x2d8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007f02:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	4a25      	ldr	r2, [pc, #148]	; (8007fa0 <HAL_TIM_PWM_Start+0x374>)
 8007f0a:	4293      	cmp	r3, r2
 8007f0c:	d022      	beq.n	8007f54 <HAL_TIM_PWM_Start+0x328>
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f16:	d01d      	beq.n	8007f54 <HAL_TIM_PWM_Start+0x328>
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	4a22      	ldr	r2, [pc, #136]	; (8007fa8 <HAL_TIM_PWM_Start+0x37c>)
 8007f1e:	4293      	cmp	r3, r2
 8007f20:	d018      	beq.n	8007f54 <HAL_TIM_PWM_Start+0x328>
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	4a21      	ldr	r2, [pc, #132]	; (8007fac <HAL_TIM_PWM_Start+0x380>)
 8007f28:	4293      	cmp	r3, r2
 8007f2a:	d013      	beq.n	8007f54 <HAL_TIM_PWM_Start+0x328>
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	4a1f      	ldr	r2, [pc, #124]	; (8007fb0 <HAL_TIM_PWM_Start+0x384>)
 8007f32:	4293      	cmp	r3, r2
 8007f34:	d00e      	beq.n	8007f54 <HAL_TIM_PWM_Start+0x328>
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	4a1a      	ldr	r2, [pc, #104]	; (8007fa4 <HAL_TIM_PWM_Start+0x378>)
 8007f3c:	4293      	cmp	r3, r2
 8007f3e:	d009      	beq.n	8007f54 <HAL_TIM_PWM_Start+0x328>
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	4a1b      	ldr	r2, [pc, #108]	; (8007fb4 <HAL_TIM_PWM_Start+0x388>)
 8007f46:	4293      	cmp	r3, r2
 8007f48:	d004      	beq.n	8007f54 <HAL_TIM_PWM_Start+0x328>
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	4a1a      	ldr	r2, [pc, #104]	; (8007fb8 <HAL_TIM_PWM_Start+0x38c>)
 8007f50:	4293      	cmp	r3, r2
 8007f52:	d115      	bne.n	8007f80 <HAL_TIM_PWM_Start+0x354>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	689a      	ldr	r2, [r3, #8]
 8007f5a:	4b18      	ldr	r3, [pc, #96]	; (8007fbc <HAL_TIM_PWM_Start+0x390>)
 8007f5c:	4013      	ands	r3, r2
 8007f5e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	2b06      	cmp	r3, #6
 8007f64:	d015      	beq.n	8007f92 <HAL_TIM_PWM_Start+0x366>
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f6c:	d011      	beq.n	8007f92 <HAL_TIM_PWM_Start+0x366>
    {
      __HAL_TIM_ENABLE(htim);
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	681a      	ldr	r2, [r3, #0]
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	f042 0201 	orr.w	r2, r2, #1
 8007f7c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f7e:	e008      	b.n	8007f92 <HAL_TIM_PWM_Start+0x366>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	681a      	ldr	r2, [r3, #0]
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	f042 0201 	orr.w	r2, r2, #1
 8007f8e:	601a      	str	r2, [r3, #0]
 8007f90:	e000      	b.n	8007f94 <HAL_TIM_PWM_Start+0x368>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f92:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007f94:	2300      	movs	r3, #0
}
 8007f96:	4618      	mov	r0, r3
 8007f98:	3710      	adds	r7, #16
 8007f9a:	46bd      	mov	sp, r7
 8007f9c:	bd80      	pop	{r7, pc}
 8007f9e:	bf00      	nop
 8007fa0:	40010000 	.word	0x40010000
 8007fa4:	40010400 	.word	0x40010400
 8007fa8:	40000400 	.word	0x40000400
 8007fac:	40000800 	.word	0x40000800
 8007fb0:	40000c00 	.word	0x40000c00
 8007fb4:	40014000 	.word	0x40014000
 8007fb8:	40001800 	.word	0x40001800
 8007fbc:	00010007 	.word	0x00010007

08007fc0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b082      	sub	sp, #8
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	691b      	ldr	r3, [r3, #16]
 8007fce:	f003 0302 	and.w	r3, r3, #2
 8007fd2:	2b02      	cmp	r3, #2
 8007fd4:	d122      	bne.n	800801c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	68db      	ldr	r3, [r3, #12]
 8007fdc:	f003 0302 	and.w	r3, r3, #2
 8007fe0:	2b02      	cmp	r3, #2
 8007fe2:	d11b      	bne.n	800801c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	f06f 0202 	mvn.w	r2, #2
 8007fec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	2201      	movs	r2, #1
 8007ff2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	699b      	ldr	r3, [r3, #24]
 8007ffa:	f003 0303 	and.w	r3, r3, #3
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d003      	beq.n	800800a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008002:	6878      	ldr	r0, [r7, #4]
 8008004:	f000 feca 	bl	8008d9c <HAL_TIM_IC_CaptureCallback>
 8008008:	e005      	b.n	8008016 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800800a:	6878      	ldr	r0, [r7, #4]
 800800c:	f000 febc 	bl	8008d88 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008010:	6878      	ldr	r0, [r7, #4]
 8008012:	f000 fecd 	bl	8008db0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	2200      	movs	r2, #0
 800801a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	691b      	ldr	r3, [r3, #16]
 8008022:	f003 0304 	and.w	r3, r3, #4
 8008026:	2b04      	cmp	r3, #4
 8008028:	d122      	bne.n	8008070 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	68db      	ldr	r3, [r3, #12]
 8008030:	f003 0304 	and.w	r3, r3, #4
 8008034:	2b04      	cmp	r3, #4
 8008036:	d11b      	bne.n	8008070 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	f06f 0204 	mvn.w	r2, #4
 8008040:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	2202      	movs	r2, #2
 8008046:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	699b      	ldr	r3, [r3, #24]
 800804e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008052:	2b00      	cmp	r3, #0
 8008054:	d003      	beq.n	800805e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008056:	6878      	ldr	r0, [r7, #4]
 8008058:	f000 fea0 	bl	8008d9c <HAL_TIM_IC_CaptureCallback>
 800805c:	e005      	b.n	800806a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800805e:	6878      	ldr	r0, [r7, #4]
 8008060:	f000 fe92 	bl	8008d88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008064:	6878      	ldr	r0, [r7, #4]
 8008066:	f000 fea3 	bl	8008db0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	2200      	movs	r2, #0
 800806e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	691b      	ldr	r3, [r3, #16]
 8008076:	f003 0308 	and.w	r3, r3, #8
 800807a:	2b08      	cmp	r3, #8
 800807c:	d122      	bne.n	80080c4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	68db      	ldr	r3, [r3, #12]
 8008084:	f003 0308 	and.w	r3, r3, #8
 8008088:	2b08      	cmp	r3, #8
 800808a:	d11b      	bne.n	80080c4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	f06f 0208 	mvn.w	r2, #8
 8008094:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	2204      	movs	r2, #4
 800809a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	69db      	ldr	r3, [r3, #28]
 80080a2:	f003 0303 	and.w	r3, r3, #3
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d003      	beq.n	80080b2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80080aa:	6878      	ldr	r0, [r7, #4]
 80080ac:	f000 fe76 	bl	8008d9c <HAL_TIM_IC_CaptureCallback>
 80080b0:	e005      	b.n	80080be <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80080b2:	6878      	ldr	r0, [r7, #4]
 80080b4:	f000 fe68 	bl	8008d88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80080b8:	6878      	ldr	r0, [r7, #4]
 80080ba:	f000 fe79 	bl	8008db0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	2200      	movs	r2, #0
 80080c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	691b      	ldr	r3, [r3, #16]
 80080ca:	f003 0310 	and.w	r3, r3, #16
 80080ce:	2b10      	cmp	r3, #16
 80080d0:	d122      	bne.n	8008118 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	68db      	ldr	r3, [r3, #12]
 80080d8:	f003 0310 	and.w	r3, r3, #16
 80080dc:	2b10      	cmp	r3, #16
 80080de:	d11b      	bne.n	8008118 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	f06f 0210 	mvn.w	r2, #16
 80080e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	2208      	movs	r2, #8
 80080ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	69db      	ldr	r3, [r3, #28]
 80080f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d003      	beq.n	8008106 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80080fe:	6878      	ldr	r0, [r7, #4]
 8008100:	f000 fe4c 	bl	8008d9c <HAL_TIM_IC_CaptureCallback>
 8008104:	e005      	b.n	8008112 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008106:	6878      	ldr	r0, [r7, #4]
 8008108:	f000 fe3e 	bl	8008d88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800810c:	6878      	ldr	r0, [r7, #4]
 800810e:	f000 fe4f 	bl	8008db0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	2200      	movs	r2, #0
 8008116:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	691b      	ldr	r3, [r3, #16]
 800811e:	f003 0301 	and.w	r3, r3, #1
 8008122:	2b01      	cmp	r3, #1
 8008124:	d10e      	bne.n	8008144 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	68db      	ldr	r3, [r3, #12]
 800812c:	f003 0301 	and.w	r3, r3, #1
 8008130:	2b01      	cmp	r3, #1
 8008132:	d107      	bne.n	8008144 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	f06f 0201 	mvn.w	r2, #1
 800813c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800813e:	6878      	ldr	r0, [r7, #4]
 8008140:	f000 fe18 	bl	8008d74 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	691b      	ldr	r3, [r3, #16]
 800814a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800814e:	2b80      	cmp	r3, #128	; 0x80
 8008150:	d10e      	bne.n	8008170 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	68db      	ldr	r3, [r3, #12]
 8008158:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800815c:	2b80      	cmp	r3, #128	; 0x80
 800815e:	d107      	bne.n	8008170 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008168:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800816a:	6878      	ldr	r0, [r7, #4]
 800816c:	f001 fc42 	bl	80099f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	691b      	ldr	r3, [r3, #16]
 8008176:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800817a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800817e:	d10e      	bne.n	800819e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	68db      	ldr	r3, [r3, #12]
 8008186:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800818a:	2b80      	cmp	r3, #128	; 0x80
 800818c:	d107      	bne.n	800819e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008196:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008198:	6878      	ldr	r0, [r7, #4]
 800819a:	f001 fc35 	bl	8009a08 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	691b      	ldr	r3, [r3, #16]
 80081a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081a8:	2b40      	cmp	r3, #64	; 0x40
 80081aa:	d10e      	bne.n	80081ca <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	68db      	ldr	r3, [r3, #12]
 80081b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081b6:	2b40      	cmp	r3, #64	; 0x40
 80081b8:	d107      	bne.n	80081ca <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80081c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80081c4:	6878      	ldr	r0, [r7, #4]
 80081c6:	f000 fdfd 	bl	8008dc4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	691b      	ldr	r3, [r3, #16]
 80081d0:	f003 0320 	and.w	r3, r3, #32
 80081d4:	2b20      	cmp	r3, #32
 80081d6:	d10e      	bne.n	80081f6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	68db      	ldr	r3, [r3, #12]
 80081de:	f003 0320 	and.w	r3, r3, #32
 80081e2:	2b20      	cmp	r3, #32
 80081e4:	d107      	bne.n	80081f6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	f06f 0220 	mvn.w	r2, #32
 80081ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80081f0:	6878      	ldr	r0, [r7, #4]
 80081f2:	f001 fbf5 	bl	80099e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80081f6:	bf00      	nop
 80081f8:	3708      	adds	r7, #8
 80081fa:	46bd      	mov	sp, r7
 80081fc:	bd80      	pop	{r7, pc}
	...

08008200 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008200:	b580      	push	{r7, lr}
 8008202:	b086      	sub	sp, #24
 8008204:	af00      	add	r7, sp, #0
 8008206:	60f8      	str	r0, [r7, #12]
 8008208:	60b9      	str	r1, [r7, #8]
 800820a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800820c:	2300      	movs	r3, #0
 800820e:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2b00      	cmp	r3, #0
 8008214:	d016      	beq.n	8008244 <HAL_TIM_PWM_ConfigChannel+0x44>
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	2b04      	cmp	r3, #4
 800821a:	d013      	beq.n	8008244 <HAL_TIM_PWM_ConfigChannel+0x44>
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2b08      	cmp	r3, #8
 8008220:	d010      	beq.n	8008244 <HAL_TIM_PWM_ConfigChannel+0x44>
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	2b0c      	cmp	r3, #12
 8008226:	d00d      	beq.n	8008244 <HAL_TIM_PWM_ConfigChannel+0x44>
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2b10      	cmp	r3, #16
 800822c:	d00a      	beq.n	8008244 <HAL_TIM_PWM_ConfigChannel+0x44>
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	2b14      	cmp	r3, #20
 8008232:	d007      	beq.n	8008244 <HAL_TIM_PWM_ConfigChannel+0x44>
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	2b3c      	cmp	r3, #60	; 0x3c
 8008238:	d004      	beq.n	8008244 <HAL_TIM_PWM_ConfigChannel+0x44>
 800823a:	f241 01af 	movw	r1, #4271	; 0x10af
 800823e:	4895      	ldr	r0, [pc, #596]	; (8008494 <HAL_TIM_PWM_ConfigChannel+0x294>)
 8008240:	f7fa fc37 	bl	8002ab2 <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 8008244:	68bb      	ldr	r3, [r7, #8]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	2b60      	cmp	r3, #96	; 0x60
 800824a:	d01c      	beq.n	8008286 <HAL_TIM_PWM_ConfigChannel+0x86>
 800824c:	68bb      	ldr	r3, [r7, #8]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	2b70      	cmp	r3, #112	; 0x70
 8008252:	d018      	beq.n	8008286 <HAL_TIM_PWM_ConfigChannel+0x86>
 8008254:	68bb      	ldr	r3, [r7, #8]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	4a8f      	ldr	r2, [pc, #572]	; (8008498 <HAL_TIM_PWM_ConfigChannel+0x298>)
 800825a:	4293      	cmp	r3, r2
 800825c:	d013      	beq.n	8008286 <HAL_TIM_PWM_ConfigChannel+0x86>
 800825e:	68bb      	ldr	r3, [r7, #8]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	4a8e      	ldr	r2, [pc, #568]	; (800849c <HAL_TIM_PWM_ConfigChannel+0x29c>)
 8008264:	4293      	cmp	r3, r2
 8008266:	d00e      	beq.n	8008286 <HAL_TIM_PWM_ConfigChannel+0x86>
 8008268:	68bb      	ldr	r3, [r7, #8]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	4a8c      	ldr	r2, [pc, #560]	; (80084a0 <HAL_TIM_PWM_ConfigChannel+0x2a0>)
 800826e:	4293      	cmp	r3, r2
 8008270:	d009      	beq.n	8008286 <HAL_TIM_PWM_ConfigChannel+0x86>
 8008272:	68bb      	ldr	r3, [r7, #8]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	4a8b      	ldr	r2, [pc, #556]	; (80084a4 <HAL_TIM_PWM_ConfigChannel+0x2a4>)
 8008278:	4293      	cmp	r3, r2
 800827a:	d004      	beq.n	8008286 <HAL_TIM_PWM_ConfigChannel+0x86>
 800827c:	f241 01b0 	movw	r1, #4272	; 0x10b0
 8008280:	4884      	ldr	r0, [pc, #528]	; (8008494 <HAL_TIM_PWM_ConfigChannel+0x294>)
 8008282:	f7fa fc16 	bl	8002ab2 <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 8008286:	68bb      	ldr	r3, [r7, #8]
 8008288:	689b      	ldr	r3, [r3, #8]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d008      	beq.n	80082a0 <HAL_TIM_PWM_ConfigChannel+0xa0>
 800828e:	68bb      	ldr	r3, [r7, #8]
 8008290:	689b      	ldr	r3, [r3, #8]
 8008292:	2b02      	cmp	r3, #2
 8008294:	d004      	beq.n	80082a0 <HAL_TIM_PWM_ConfigChannel+0xa0>
 8008296:	f241 01b1 	movw	r1, #4273	; 0x10b1
 800829a:	487e      	ldr	r0, [pc, #504]	; (8008494 <HAL_TIM_PWM_ConfigChannel+0x294>)
 800829c:	f7fa fc09 	bl	8002ab2 <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 80082a0:	68bb      	ldr	r3, [r7, #8]
 80082a2:	691b      	ldr	r3, [r3, #16]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d008      	beq.n	80082ba <HAL_TIM_PWM_ConfigChannel+0xba>
 80082a8:	68bb      	ldr	r3, [r7, #8]
 80082aa:	691b      	ldr	r3, [r3, #16]
 80082ac:	2b04      	cmp	r3, #4
 80082ae:	d004      	beq.n	80082ba <HAL_TIM_PWM_ConfigChannel+0xba>
 80082b0:	f241 01b2 	movw	r1, #4274	; 0x10b2
 80082b4:	4877      	ldr	r0, [pc, #476]	; (8008494 <HAL_TIM_PWM_ConfigChannel+0x294>)
 80082b6:	f7fa fbfc 	bl	8002ab2 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80082c0:	2b01      	cmp	r3, #1
 80082c2:	d101      	bne.n	80082c8 <HAL_TIM_PWM_ConfigChannel+0xc8>
 80082c4:	2302      	movs	r3, #2
 80082c6:	e1f3      	b.n	80086b0 <HAL_TIM_PWM_ConfigChannel+0x4b0>
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	2201      	movs	r2, #1
 80082cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2b14      	cmp	r3, #20
 80082d4:	f200 81e4 	bhi.w	80086a0 <HAL_TIM_PWM_ConfigChannel+0x4a0>
 80082d8:	a201      	add	r2, pc, #4	; (adr r2, 80082e0 <HAL_TIM_PWM_ConfigChannel+0xe0>)
 80082da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082de:	bf00      	nop
 80082e0:	08008335 	.word	0x08008335
 80082e4:	080086a1 	.word	0x080086a1
 80082e8:	080086a1 	.word	0x080086a1
 80082ec:	080086a1 	.word	0x080086a1
 80082f0:	080083f7 	.word	0x080083f7
 80082f4:	080086a1 	.word	0x080086a1
 80082f8:	080086a1 	.word	0x080086a1
 80082fc:	080086a1 	.word	0x080086a1
 8008300:	080084d5 	.word	0x080084d5
 8008304:	080086a1 	.word	0x080086a1
 8008308:	080086a1 	.word	0x080086a1
 800830c:	080086a1 	.word	0x080086a1
 8008310:	0800855b 	.word	0x0800855b
 8008314:	080086a1 	.word	0x080086a1
 8008318:	080086a1 	.word	0x080086a1
 800831c:	080086a1 	.word	0x080086a1
 8008320:	080085e3 	.word	0x080085e3
 8008324:	080086a1 	.word	0x080086a1
 8008328:	080086a1 	.word	0x080086a1
 800832c:	080086a1 	.word	0x080086a1
 8008330:	08008641 	.word	0x08008641
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	4a5b      	ldr	r2, [pc, #364]	; (80084a8 <HAL_TIM_PWM_ConfigChannel+0x2a8>)
 800833a:	4293      	cmp	r3, r2
 800833c:	d03b      	beq.n	80083b6 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008346:	d036      	beq.n	80083b6 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	4a57      	ldr	r2, [pc, #348]	; (80084ac <HAL_TIM_PWM_ConfigChannel+0x2ac>)
 800834e:	4293      	cmp	r3, r2
 8008350:	d031      	beq.n	80083b6 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	4a56      	ldr	r2, [pc, #344]	; (80084b0 <HAL_TIM_PWM_ConfigChannel+0x2b0>)
 8008358:	4293      	cmp	r3, r2
 800835a:	d02c      	beq.n	80083b6 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	4a54      	ldr	r2, [pc, #336]	; (80084b4 <HAL_TIM_PWM_ConfigChannel+0x2b4>)
 8008362:	4293      	cmp	r3, r2
 8008364:	d027      	beq.n	80083b6 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	4a53      	ldr	r2, [pc, #332]	; (80084b8 <HAL_TIM_PWM_ConfigChannel+0x2b8>)
 800836c:	4293      	cmp	r3, r2
 800836e:	d022      	beq.n	80083b6 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	4a51      	ldr	r2, [pc, #324]	; (80084bc <HAL_TIM_PWM_ConfigChannel+0x2bc>)
 8008376:	4293      	cmp	r3, r2
 8008378:	d01d      	beq.n	80083b6 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	4a50      	ldr	r2, [pc, #320]	; (80084c0 <HAL_TIM_PWM_ConfigChannel+0x2c0>)
 8008380:	4293      	cmp	r3, r2
 8008382:	d018      	beq.n	80083b6 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	4a4e      	ldr	r2, [pc, #312]	; (80084c4 <HAL_TIM_PWM_ConfigChannel+0x2c4>)
 800838a:	4293      	cmp	r3, r2
 800838c:	d013      	beq.n	80083b6 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	4a4d      	ldr	r2, [pc, #308]	; (80084c8 <HAL_TIM_PWM_ConfigChannel+0x2c8>)
 8008394:	4293      	cmp	r3, r2
 8008396:	d00e      	beq.n	80083b6 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	4a4b      	ldr	r2, [pc, #300]	; (80084cc <HAL_TIM_PWM_ConfigChannel+0x2cc>)
 800839e:	4293      	cmp	r3, r2
 80083a0:	d009      	beq.n	80083b6 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	4a4a      	ldr	r2, [pc, #296]	; (80084d0 <HAL_TIM_PWM_ConfigChannel+0x2d0>)
 80083a8:	4293      	cmp	r3, r2
 80083aa:	d004      	beq.n	80083b6 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 80083ac:	f241 01bc 	movw	r1, #4284	; 0x10bc
 80083b0:	4838      	ldr	r0, [pc, #224]	; (8008494 <HAL_TIM_PWM_ConfigChannel+0x294>)
 80083b2:	f7fa fb7e 	bl	8002ab2 <assert_failed>

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	68b9      	ldr	r1, [r7, #8]
 80083bc:	4618      	mov	r0, r3
 80083be:	f000 fdab 	bl	8008f18 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	699a      	ldr	r2, [r3, #24]
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	f042 0208 	orr.w	r2, r2, #8
 80083d0:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	699a      	ldr	r2, [r3, #24]
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	f022 0204 	bic.w	r2, r2, #4
 80083e0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	6999      	ldr	r1, [r3, #24]
 80083e8:	68bb      	ldr	r3, [r7, #8]
 80083ea:	691a      	ldr	r2, [r3, #16]
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	430a      	orrs	r2, r1
 80083f2:	619a      	str	r2, [r3, #24]
      break;
 80083f4:	e157      	b.n	80086a6 <HAL_TIM_PWM_ConfigChannel+0x4a6>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	4a2b      	ldr	r2, [pc, #172]	; (80084a8 <HAL_TIM_PWM_ConfigChannel+0x2a8>)
 80083fc:	4293      	cmp	r3, r2
 80083fe:	d027      	beq.n	8008450 <HAL_TIM_PWM_ConfigChannel+0x250>
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008408:	d022      	beq.n	8008450 <HAL_TIM_PWM_ConfigChannel+0x250>
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	4a27      	ldr	r2, [pc, #156]	; (80084ac <HAL_TIM_PWM_ConfigChannel+0x2ac>)
 8008410:	4293      	cmp	r3, r2
 8008412:	d01d      	beq.n	8008450 <HAL_TIM_PWM_ConfigChannel+0x250>
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	4a25      	ldr	r2, [pc, #148]	; (80084b0 <HAL_TIM_PWM_ConfigChannel+0x2b0>)
 800841a:	4293      	cmp	r3, r2
 800841c:	d018      	beq.n	8008450 <HAL_TIM_PWM_ConfigChannel+0x250>
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	4a24      	ldr	r2, [pc, #144]	; (80084b4 <HAL_TIM_PWM_ConfigChannel+0x2b4>)
 8008424:	4293      	cmp	r3, r2
 8008426:	d013      	beq.n	8008450 <HAL_TIM_PWM_ConfigChannel+0x250>
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	4a22      	ldr	r2, [pc, #136]	; (80084b8 <HAL_TIM_PWM_ConfigChannel+0x2b8>)
 800842e:	4293      	cmp	r3, r2
 8008430:	d00e      	beq.n	8008450 <HAL_TIM_PWM_ConfigChannel+0x250>
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	4a21      	ldr	r2, [pc, #132]	; (80084bc <HAL_TIM_PWM_ConfigChannel+0x2bc>)
 8008438:	4293      	cmp	r3, r2
 800843a:	d009      	beq.n	8008450 <HAL_TIM_PWM_ConfigChannel+0x250>
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	4a21      	ldr	r2, [pc, #132]	; (80084c8 <HAL_TIM_PWM_ConfigChannel+0x2c8>)
 8008442:	4293      	cmp	r3, r2
 8008444:	d004      	beq.n	8008450 <HAL_TIM_PWM_ConfigChannel+0x250>
 8008446:	f241 01cd 	movw	r1, #4301	; 0x10cd
 800844a:	4812      	ldr	r0, [pc, #72]	; (8008494 <HAL_TIM_PWM_ConfigChannel+0x294>)
 800844c:	f7fa fb31 	bl	8002ab2 <assert_failed>

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	68b9      	ldr	r1, [r7, #8]
 8008456:	4618      	mov	r0, r3
 8008458:	f000 fdfa 	bl	8009050 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	699a      	ldr	r2, [r3, #24]
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800846a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	699a      	ldr	r2, [r3, #24]
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800847a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	6999      	ldr	r1, [r3, #24]
 8008482:	68bb      	ldr	r3, [r7, #8]
 8008484:	691b      	ldr	r3, [r3, #16]
 8008486:	021a      	lsls	r2, r3, #8
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	430a      	orrs	r2, r1
 800848e:	619a      	str	r2, [r3, #24]
      break;
 8008490:	e109      	b.n	80086a6 <HAL_TIM_PWM_ConfigChannel+0x4a6>
 8008492:	bf00      	nop
 8008494:	08016814 	.word	0x08016814
 8008498:	00010040 	.word	0x00010040
 800849c:	00010050 	.word	0x00010050
 80084a0:	00010060 	.word	0x00010060
 80084a4:	00010070 	.word	0x00010070
 80084a8:	40010000 	.word	0x40010000
 80084ac:	40000400 	.word	0x40000400
 80084b0:	40000800 	.word	0x40000800
 80084b4:	40000c00 	.word	0x40000c00
 80084b8:	40010400 	.word	0x40010400
 80084bc:	40014000 	.word	0x40014000
 80084c0:	40014400 	.word	0x40014400
 80084c4:	40014800 	.word	0x40014800
 80084c8:	40001800 	.word	0x40001800
 80084cc:	40001c00 	.word	0x40001c00
 80084d0:	40002000 	.word	0x40002000
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	4a77      	ldr	r2, [pc, #476]	; (80086b8 <HAL_TIM_PWM_ConfigChannel+0x4b8>)
 80084da:	4293      	cmp	r3, r2
 80084dc:	d01d      	beq.n	800851a <HAL_TIM_PWM_ConfigChannel+0x31a>
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80084e6:	d018      	beq.n	800851a <HAL_TIM_PWM_ConfigChannel+0x31a>
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	4a73      	ldr	r2, [pc, #460]	; (80086bc <HAL_TIM_PWM_ConfigChannel+0x4bc>)
 80084ee:	4293      	cmp	r3, r2
 80084f0:	d013      	beq.n	800851a <HAL_TIM_PWM_ConfigChannel+0x31a>
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	4a72      	ldr	r2, [pc, #456]	; (80086c0 <HAL_TIM_PWM_ConfigChannel+0x4c0>)
 80084f8:	4293      	cmp	r3, r2
 80084fa:	d00e      	beq.n	800851a <HAL_TIM_PWM_ConfigChannel+0x31a>
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	4a70      	ldr	r2, [pc, #448]	; (80086c4 <HAL_TIM_PWM_ConfigChannel+0x4c4>)
 8008502:	4293      	cmp	r3, r2
 8008504:	d009      	beq.n	800851a <HAL_TIM_PWM_ConfigChannel+0x31a>
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	4a6f      	ldr	r2, [pc, #444]	; (80086c8 <HAL_TIM_PWM_ConfigChannel+0x4c8>)
 800850c:	4293      	cmp	r3, r2
 800850e:	d004      	beq.n	800851a <HAL_TIM_PWM_ConfigChannel+0x31a>
 8008510:	f241 01de 	movw	r1, #4318	; 0x10de
 8008514:	486d      	ldr	r0, [pc, #436]	; (80086cc <HAL_TIM_PWM_ConfigChannel+0x4cc>)
 8008516:	f7fa facc 	bl	8002ab2 <assert_failed>

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	68b9      	ldr	r1, [r7, #8]
 8008520:	4618      	mov	r0, r3
 8008522:	f000 fe35 	bl	8009190 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	69da      	ldr	r2, [r3, #28]
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	f042 0208 	orr.w	r2, r2, #8
 8008534:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	69da      	ldr	r2, [r3, #28]
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	f022 0204 	bic.w	r2, r2, #4
 8008544:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	69d9      	ldr	r1, [r3, #28]
 800854c:	68bb      	ldr	r3, [r7, #8]
 800854e:	691a      	ldr	r2, [r3, #16]
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	430a      	orrs	r2, r1
 8008556:	61da      	str	r2, [r3, #28]
      break;
 8008558:	e0a5      	b.n	80086a6 <HAL_TIM_PWM_ConfigChannel+0x4a6>
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	4a56      	ldr	r2, [pc, #344]	; (80086b8 <HAL_TIM_PWM_ConfigChannel+0x4b8>)
 8008560:	4293      	cmp	r3, r2
 8008562:	d01d      	beq.n	80085a0 <HAL_TIM_PWM_ConfigChannel+0x3a0>
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800856c:	d018      	beq.n	80085a0 <HAL_TIM_PWM_ConfigChannel+0x3a0>
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	4a52      	ldr	r2, [pc, #328]	; (80086bc <HAL_TIM_PWM_ConfigChannel+0x4bc>)
 8008574:	4293      	cmp	r3, r2
 8008576:	d013      	beq.n	80085a0 <HAL_TIM_PWM_ConfigChannel+0x3a0>
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	4a50      	ldr	r2, [pc, #320]	; (80086c0 <HAL_TIM_PWM_ConfigChannel+0x4c0>)
 800857e:	4293      	cmp	r3, r2
 8008580:	d00e      	beq.n	80085a0 <HAL_TIM_PWM_ConfigChannel+0x3a0>
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	4a4f      	ldr	r2, [pc, #316]	; (80086c4 <HAL_TIM_PWM_ConfigChannel+0x4c4>)
 8008588:	4293      	cmp	r3, r2
 800858a:	d009      	beq.n	80085a0 <HAL_TIM_PWM_ConfigChannel+0x3a0>
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	4a4d      	ldr	r2, [pc, #308]	; (80086c8 <HAL_TIM_PWM_ConfigChannel+0x4c8>)
 8008592:	4293      	cmp	r3, r2
 8008594:	d004      	beq.n	80085a0 <HAL_TIM_PWM_ConfigChannel+0x3a0>
 8008596:	f241 01ef 	movw	r1, #4335	; 0x10ef
 800859a:	484c      	ldr	r0, [pc, #304]	; (80086cc <HAL_TIM_PWM_ConfigChannel+0x4cc>)
 800859c:	f7fa fa89 	bl	8002ab2 <assert_failed>

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	68b9      	ldr	r1, [r7, #8]
 80085a6:	4618      	mov	r0, r3
 80085a8:	f000 fe92 	bl	80092d0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	69da      	ldr	r2, [r3, #28]
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80085ba:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	69da      	ldr	r2, [r3, #28]
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80085ca:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	69d9      	ldr	r1, [r3, #28]
 80085d2:	68bb      	ldr	r3, [r7, #8]
 80085d4:	691b      	ldr	r3, [r3, #16]
 80085d6:	021a      	lsls	r2, r3, #8
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	430a      	orrs	r2, r1
 80085de:	61da      	str	r2, [r3, #28]
      break;
 80085e0:	e061      	b.n	80086a6 <HAL_TIM_PWM_ConfigChannel+0x4a6>
    }

    case TIM_CHANNEL_5:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	4a34      	ldr	r2, [pc, #208]	; (80086b8 <HAL_TIM_PWM_ConfigChannel+0x4b8>)
 80085e8:	4293      	cmp	r3, r2
 80085ea:	d009      	beq.n	8008600 <HAL_TIM_PWM_ConfigChannel+0x400>
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	4a35      	ldr	r2, [pc, #212]	; (80086c8 <HAL_TIM_PWM_ConfigChannel+0x4c8>)
 80085f2:	4293      	cmp	r3, r2
 80085f4:	d004      	beq.n	8008600 <HAL_TIM_PWM_ConfigChannel+0x400>
 80085f6:	f44f 5188 	mov.w	r1, #4352	; 0x1100
 80085fa:	4834      	ldr	r0, [pc, #208]	; (80086cc <HAL_TIM_PWM_ConfigChannel+0x4cc>)
 80085fc:	f7fa fa59 	bl	8002ab2 <assert_failed>

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	68b9      	ldr	r1, [r7, #8]
 8008606:	4618      	mov	r0, r3
 8008608:	f000 fec8 	bl	800939c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	f042 0208 	orr.w	r2, r2, #8
 800861a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	f022 0204 	bic.w	r2, r2, #4
 800862a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008632:	68bb      	ldr	r3, [r7, #8]
 8008634:	691a      	ldr	r2, [r3, #16]
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	430a      	orrs	r2, r1
 800863c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800863e:	e032      	b.n	80086a6 <HAL_TIM_PWM_ConfigChannel+0x4a6>
    }

    case TIM_CHANNEL_6:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	4a1c      	ldr	r2, [pc, #112]	; (80086b8 <HAL_TIM_PWM_ConfigChannel+0x4b8>)
 8008646:	4293      	cmp	r3, r2
 8008648:	d009      	beq.n	800865e <HAL_TIM_PWM_ConfigChannel+0x45e>
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	4a1e      	ldr	r2, [pc, #120]	; (80086c8 <HAL_TIM_PWM_ConfigChannel+0x4c8>)
 8008650:	4293      	cmp	r3, r2
 8008652:	d004      	beq.n	800865e <HAL_TIM_PWM_ConfigChannel+0x45e>
 8008654:	f241 1111 	movw	r1, #4369	; 0x1111
 8008658:	481c      	ldr	r0, [pc, #112]	; (80086cc <HAL_TIM_PWM_ConfigChannel+0x4cc>)
 800865a:	f7fa fa2a 	bl	8002ab2 <assert_failed>

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	68b9      	ldr	r1, [r7, #8]
 8008664:	4618      	mov	r0, r3
 8008666:	f000 feeb 	bl	8009440 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008678:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008688:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008690:	68bb      	ldr	r3, [r7, #8]
 8008692:	691b      	ldr	r3, [r3, #16]
 8008694:	021a      	lsls	r2, r3, #8
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	430a      	orrs	r2, r1
 800869c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800869e:	e002      	b.n	80086a6 <HAL_TIM_PWM_ConfigChannel+0x4a6>
    }

    default:
      status = HAL_ERROR;
 80086a0:	2301      	movs	r3, #1
 80086a2:	75fb      	strb	r3, [r7, #23]
      break;
 80086a4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	2200      	movs	r2, #0
 80086aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80086ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80086b0:	4618      	mov	r0, r3
 80086b2:	3718      	adds	r7, #24
 80086b4:	46bd      	mov	sp, r7
 80086b6:	bd80      	pop	{r7, pc}
 80086b8:	40010000 	.word	0x40010000
 80086bc:	40000400 	.word	0x40000400
 80086c0:	40000800 	.word	0x40000800
 80086c4:	40000c00 	.word	0x40000c00
 80086c8:	40010400 	.word	0x40010400
 80086cc:	08016814 	.word	0x08016814

080086d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80086d0:	b580      	push	{r7, lr}
 80086d2:	b084      	sub	sp, #16
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	6078      	str	r0, [r7, #4]
 80086d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80086da:	2300      	movs	r3, #0
 80086dc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80086e4:	2b01      	cmp	r3, #1
 80086e6:	d101      	bne.n	80086ec <HAL_TIM_ConfigClockSource+0x1c>
 80086e8:	2302      	movs	r3, #2
 80086ea:	e332      	b.n	8008d52 <HAL_TIM_ConfigClockSource+0x682>
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	2201      	movs	r2, #1
 80086f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	2202      	movs	r2, #2
 80086f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 80086fc:	683b      	ldr	r3, [r7, #0]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008704:	d029      	beq.n	800875a <HAL_TIM_ConfigClockSource+0x8a>
 8008706:	683b      	ldr	r3, [r7, #0]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	2b70      	cmp	r3, #112	; 0x70
 800870c:	d025      	beq.n	800875a <HAL_TIM_ConfigClockSource+0x8a>
 800870e:	683b      	ldr	r3, [r7, #0]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008716:	d020      	beq.n	800875a <HAL_TIM_ConfigClockSource+0x8a>
 8008718:	683b      	ldr	r3, [r7, #0]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	2b40      	cmp	r3, #64	; 0x40
 800871e:	d01c      	beq.n	800875a <HAL_TIM_ConfigClockSource+0x8a>
 8008720:	683b      	ldr	r3, [r7, #0]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	2b50      	cmp	r3, #80	; 0x50
 8008726:	d018      	beq.n	800875a <HAL_TIM_ConfigClockSource+0x8a>
 8008728:	683b      	ldr	r3, [r7, #0]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	2b60      	cmp	r3, #96	; 0x60
 800872e:	d014      	beq.n	800875a <HAL_TIM_ConfigClockSource+0x8a>
 8008730:	683b      	ldr	r3, [r7, #0]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	2b00      	cmp	r3, #0
 8008736:	d010      	beq.n	800875a <HAL_TIM_ConfigClockSource+0x8a>
 8008738:	683b      	ldr	r3, [r7, #0]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	2b10      	cmp	r3, #16
 800873e:	d00c      	beq.n	800875a <HAL_TIM_ConfigClockSource+0x8a>
 8008740:	683b      	ldr	r3, [r7, #0]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	2b20      	cmp	r3, #32
 8008746:	d008      	beq.n	800875a <HAL_TIM_ConfigClockSource+0x8a>
 8008748:	683b      	ldr	r3, [r7, #0]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	2b30      	cmp	r3, #48	; 0x30
 800874e:	d004      	beq.n	800875a <HAL_TIM_ConfigClockSource+0x8a>
 8008750:	f241 514c 	movw	r1, #5452	; 0x154c
 8008754:	4893      	ldr	r0, [pc, #588]	; (80089a4 <HAL_TIM_ConfigClockSource+0x2d4>)
 8008756:	f7fa f9ac 	bl	8002ab2 <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	689b      	ldr	r3, [r3, #8]
 8008760:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008762:	68ba      	ldr	r2, [r7, #8]
 8008764:	4b90      	ldr	r3, [pc, #576]	; (80089a8 <HAL_TIM_ConfigClockSource+0x2d8>)
 8008766:	4013      	ands	r3, r2
 8008768:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800876a:	68bb      	ldr	r3, [r7, #8]
 800876c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008770:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	68ba      	ldr	r2, [r7, #8]
 8008778:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008782:	f000 812d 	beq.w	80089e0 <HAL_TIM_ConfigClockSource+0x310>
 8008786:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800878a:	f200 82d5 	bhi.w	8008d38 <HAL_TIM_ConfigClockSource+0x668>
 800878e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008792:	d02e      	beq.n	80087f2 <HAL_TIM_ConfigClockSource+0x122>
 8008794:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008798:	f200 82ce 	bhi.w	8008d38 <HAL_TIM_ConfigClockSource+0x668>
 800879c:	2b70      	cmp	r3, #112	; 0x70
 800879e:	f000 8082 	beq.w	80088a6 <HAL_TIM_ConfigClockSource+0x1d6>
 80087a2:	2b70      	cmp	r3, #112	; 0x70
 80087a4:	f200 82c8 	bhi.w	8008d38 <HAL_TIM_ConfigClockSource+0x668>
 80087a8:	2b60      	cmp	r3, #96	; 0x60
 80087aa:	f000 81e0 	beq.w	8008b6e <HAL_TIM_ConfigClockSource+0x49e>
 80087ae:	2b60      	cmp	r3, #96	; 0x60
 80087b0:	f200 82c2 	bhi.w	8008d38 <HAL_TIM_ConfigClockSource+0x668>
 80087b4:	2b50      	cmp	r3, #80	; 0x50
 80087b6:	f000 8184 	beq.w	8008ac2 <HAL_TIM_ConfigClockSource+0x3f2>
 80087ba:	2b50      	cmp	r3, #80	; 0x50
 80087bc:	f200 82bc 	bhi.w	8008d38 <HAL_TIM_ConfigClockSource+0x668>
 80087c0:	2b40      	cmp	r3, #64	; 0x40
 80087c2:	f000 8237 	beq.w	8008c34 <HAL_TIM_ConfigClockSource+0x564>
 80087c6:	2b40      	cmp	r3, #64	; 0x40
 80087c8:	f200 82b6 	bhi.w	8008d38 <HAL_TIM_ConfigClockSource+0x668>
 80087cc:	2b30      	cmp	r3, #48	; 0x30
 80087ce:	f000 8287 	beq.w	8008ce0 <HAL_TIM_ConfigClockSource+0x610>
 80087d2:	2b30      	cmp	r3, #48	; 0x30
 80087d4:	f200 82b0 	bhi.w	8008d38 <HAL_TIM_ConfigClockSource+0x668>
 80087d8:	2b20      	cmp	r3, #32
 80087da:	f000 8281 	beq.w	8008ce0 <HAL_TIM_ConfigClockSource+0x610>
 80087de:	2b20      	cmp	r3, #32
 80087e0:	f200 82aa 	bhi.w	8008d38 <HAL_TIM_ConfigClockSource+0x668>
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	f000 827b 	beq.w	8008ce0 <HAL_TIM_ConfigClockSource+0x610>
 80087ea:	2b10      	cmp	r3, #16
 80087ec:	f000 8278 	beq.w	8008ce0 <HAL_TIM_ConfigClockSource+0x610>
 80087f0:	e2a2      	b.n	8008d38 <HAL_TIM_ConfigClockSource+0x668>
  {
    case TIM_CLOCKSOURCE_INTERNAL:
    {
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	4a6d      	ldr	r2, [pc, #436]	; (80089ac <HAL_TIM_ConfigClockSource+0x2dc>)
 80087f8:	4293      	cmp	r3, r2
 80087fa:	f000 82a0 	beq.w	8008d3e <HAL_TIM_ConfigClockSource+0x66e>
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008806:	f000 829a 	beq.w	8008d3e <HAL_TIM_ConfigClockSource+0x66e>
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	4a68      	ldr	r2, [pc, #416]	; (80089b0 <HAL_TIM_ConfigClockSource+0x2e0>)
 8008810:	4293      	cmp	r3, r2
 8008812:	f000 8294 	beq.w	8008d3e <HAL_TIM_ConfigClockSource+0x66e>
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	4a66      	ldr	r2, [pc, #408]	; (80089b4 <HAL_TIM_ConfigClockSource+0x2e4>)
 800881c:	4293      	cmp	r3, r2
 800881e:	f000 828e 	beq.w	8008d3e <HAL_TIM_ConfigClockSource+0x66e>
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	4a64      	ldr	r2, [pc, #400]	; (80089b8 <HAL_TIM_ConfigClockSource+0x2e8>)
 8008828:	4293      	cmp	r3, r2
 800882a:	f000 8288 	beq.w	8008d3e <HAL_TIM_ConfigClockSource+0x66e>
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	4a62      	ldr	r2, [pc, #392]	; (80089bc <HAL_TIM_ConfigClockSource+0x2ec>)
 8008834:	4293      	cmp	r3, r2
 8008836:	f000 8282 	beq.w	8008d3e <HAL_TIM_ConfigClockSource+0x66e>
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	4a60      	ldr	r2, [pc, #384]	; (80089c0 <HAL_TIM_ConfigClockSource+0x2f0>)
 8008840:	4293      	cmp	r3, r2
 8008842:	f000 827c 	beq.w	8008d3e <HAL_TIM_ConfigClockSource+0x66e>
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	4a5e      	ldr	r2, [pc, #376]	; (80089c4 <HAL_TIM_ConfigClockSource+0x2f4>)
 800884c:	4293      	cmp	r3, r2
 800884e:	f000 8276 	beq.w	8008d3e <HAL_TIM_ConfigClockSource+0x66e>
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	4a5c      	ldr	r2, [pc, #368]	; (80089c8 <HAL_TIM_ConfigClockSource+0x2f8>)
 8008858:	4293      	cmp	r3, r2
 800885a:	f000 8270 	beq.w	8008d3e <HAL_TIM_ConfigClockSource+0x66e>
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	4a5a      	ldr	r2, [pc, #360]	; (80089cc <HAL_TIM_ConfigClockSource+0x2fc>)
 8008864:	4293      	cmp	r3, r2
 8008866:	f000 826a 	beq.w	8008d3e <HAL_TIM_ConfigClockSource+0x66e>
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	4a58      	ldr	r2, [pc, #352]	; (80089d0 <HAL_TIM_ConfigClockSource+0x300>)
 8008870:	4293      	cmp	r3, r2
 8008872:	f000 8264 	beq.w	8008d3e <HAL_TIM_ConfigClockSource+0x66e>
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	4a56      	ldr	r2, [pc, #344]	; (80089d4 <HAL_TIM_ConfigClockSource+0x304>)
 800887c:	4293      	cmp	r3, r2
 800887e:	f000 825e 	beq.w	8008d3e <HAL_TIM_ConfigClockSource+0x66e>
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	4a54      	ldr	r2, [pc, #336]	; (80089d8 <HAL_TIM_ConfigClockSource+0x308>)
 8008888:	4293      	cmp	r3, r2
 800888a:	f000 8258 	beq.w	8008d3e <HAL_TIM_ConfigClockSource+0x66e>
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	4a52      	ldr	r2, [pc, #328]	; (80089dc <HAL_TIM_ConfigClockSource+0x30c>)
 8008894:	4293      	cmp	r3, r2
 8008896:	f000 8252 	beq.w	8008d3e <HAL_TIM_ConfigClockSource+0x66e>
 800889a:	f241 5158 	movw	r1, #5464	; 0x1558
 800889e:	4841      	ldr	r0, [pc, #260]	; (80089a4 <HAL_TIM_ConfigClockSource+0x2d4>)
 80088a0:	f7fa f907 	bl	8002ab2 <assert_failed>
      break;
 80088a4:	e24b      	b.n	8008d3e <HAL_TIM_ConfigClockSource+0x66e>
    }

    case TIM_CLOCKSOURCE_ETRMODE1:
    {
      /* Check whether or not the timer instance supports external trigger input mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	4a40      	ldr	r2, [pc, #256]	; (80089ac <HAL_TIM_ConfigClockSource+0x2dc>)
 80088ac:	4293      	cmp	r3, r2
 80088ae:	d027      	beq.n	8008900 <HAL_TIM_ConfigClockSource+0x230>
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80088b8:	d022      	beq.n	8008900 <HAL_TIM_ConfigClockSource+0x230>
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	4a3c      	ldr	r2, [pc, #240]	; (80089b0 <HAL_TIM_ConfigClockSource+0x2e0>)
 80088c0:	4293      	cmp	r3, r2
 80088c2:	d01d      	beq.n	8008900 <HAL_TIM_ConfigClockSource+0x230>
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	4a3a      	ldr	r2, [pc, #232]	; (80089b4 <HAL_TIM_ConfigClockSource+0x2e4>)
 80088ca:	4293      	cmp	r3, r2
 80088cc:	d018      	beq.n	8008900 <HAL_TIM_ConfigClockSource+0x230>
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	4a39      	ldr	r2, [pc, #228]	; (80089b8 <HAL_TIM_ConfigClockSource+0x2e8>)
 80088d4:	4293      	cmp	r3, r2
 80088d6:	d013      	beq.n	8008900 <HAL_TIM_ConfigClockSource+0x230>
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	4a39      	ldr	r2, [pc, #228]	; (80089c4 <HAL_TIM_ConfigClockSource+0x2f4>)
 80088de:	4293      	cmp	r3, r2
 80088e0:	d00e      	beq.n	8008900 <HAL_TIM_ConfigClockSource+0x230>
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	4a38      	ldr	r2, [pc, #224]	; (80089c8 <HAL_TIM_ConfigClockSource+0x2f8>)
 80088e8:	4293      	cmp	r3, r2
 80088ea:	d009      	beq.n	8008900 <HAL_TIM_ConfigClockSource+0x230>
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	4a38      	ldr	r2, [pc, #224]	; (80089d4 <HAL_TIM_ConfigClockSource+0x304>)
 80088f2:	4293      	cmp	r3, r2
 80088f4:	d004      	beq.n	8008900 <HAL_TIM_ConfigClockSource+0x230>
 80088f6:	f241 515f 	movw	r1, #5471	; 0x155f
 80088fa:	482a      	ldr	r0, [pc, #168]	; (80089a4 <HAL_TIM_ConfigClockSource+0x2d4>)
 80088fc:	f7fa f8d9 	bl	8002ab2 <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8008900:	683b      	ldr	r3, [r7, #0]
 8008902:	689b      	ldr	r3, [r3, #8]
 8008904:	2b00      	cmp	r3, #0
 8008906:	d013      	beq.n	8008930 <HAL_TIM_ConfigClockSource+0x260>
 8008908:	683b      	ldr	r3, [r7, #0]
 800890a:	689b      	ldr	r3, [r3, #8]
 800890c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008910:	d00e      	beq.n	8008930 <HAL_TIM_ConfigClockSource+0x260>
 8008912:	683b      	ldr	r3, [r7, #0]
 8008914:	689b      	ldr	r3, [r3, #8]
 8008916:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800891a:	d009      	beq.n	8008930 <HAL_TIM_ConfigClockSource+0x260>
 800891c:	683b      	ldr	r3, [r7, #0]
 800891e:	689b      	ldr	r3, [r3, #8]
 8008920:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008924:	d004      	beq.n	8008930 <HAL_TIM_ConfigClockSource+0x260>
 8008926:	f241 5162 	movw	r1, #5474	; 0x1562
 800892a:	481e      	ldr	r0, [pc, #120]	; (80089a4 <HAL_TIM_ConfigClockSource+0x2d4>)
 800892c:	f7fa f8c1 	bl	8002ab2 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8008930:	683b      	ldr	r3, [r7, #0]
 8008932:	685b      	ldr	r3, [r3, #4]
 8008934:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008938:	d014      	beq.n	8008964 <HAL_TIM_ConfigClockSource+0x294>
 800893a:	683b      	ldr	r3, [r7, #0]
 800893c:	685b      	ldr	r3, [r3, #4]
 800893e:	2b00      	cmp	r3, #0
 8008940:	d010      	beq.n	8008964 <HAL_TIM_ConfigClockSource+0x294>
 8008942:	683b      	ldr	r3, [r7, #0]
 8008944:	685b      	ldr	r3, [r3, #4]
 8008946:	2b00      	cmp	r3, #0
 8008948:	d00c      	beq.n	8008964 <HAL_TIM_ConfigClockSource+0x294>
 800894a:	683b      	ldr	r3, [r7, #0]
 800894c:	685b      	ldr	r3, [r3, #4]
 800894e:	2b02      	cmp	r3, #2
 8008950:	d008      	beq.n	8008964 <HAL_TIM_ConfigClockSource+0x294>
 8008952:	683b      	ldr	r3, [r7, #0]
 8008954:	685b      	ldr	r3, [r3, #4]
 8008956:	2b0a      	cmp	r3, #10
 8008958:	d004      	beq.n	8008964 <HAL_TIM_ConfigClockSource+0x294>
 800895a:	f241 5163 	movw	r1, #5475	; 0x1563
 800895e:	4811      	ldr	r0, [pc, #68]	; (80089a4 <HAL_TIM_ConfigClockSource+0x2d4>)
 8008960:	f7fa f8a7 	bl	8002ab2 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8008964:	683b      	ldr	r3, [r7, #0]
 8008966:	68db      	ldr	r3, [r3, #12]
 8008968:	2b0f      	cmp	r3, #15
 800896a:	d904      	bls.n	8008976 <HAL_TIM_ConfigClockSource+0x2a6>
 800896c:	f241 5164 	movw	r1, #5476	; 0x1564
 8008970:	480c      	ldr	r0, [pc, #48]	; (80089a4 <HAL_TIM_ConfigClockSource+0x2d4>)
 8008972:	f7fa f89e 	bl	8002ab2 <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	6818      	ldr	r0, [r3, #0]
 800897a:	683b      	ldr	r3, [r7, #0]
 800897c:	6899      	ldr	r1, [r3, #8]
 800897e:	683b      	ldr	r3, [r7, #0]
 8008980:	685a      	ldr	r2, [r3, #4]
 8008982:	683b      	ldr	r3, [r7, #0]
 8008984:	68db      	ldr	r3, [r3, #12]
 8008986:	f000 fe29 	bl	80095dc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	689b      	ldr	r3, [r3, #8]
 8008990:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008992:	68bb      	ldr	r3, [r7, #8]
 8008994:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008998:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	68ba      	ldr	r2, [r7, #8]
 80089a0:	609a      	str	r2, [r3, #8]
      break;
 80089a2:	e1cd      	b.n	8008d40 <HAL_TIM_ConfigClockSource+0x670>
 80089a4:	08016814 	.word	0x08016814
 80089a8:	fffeff88 	.word	0xfffeff88
 80089ac:	40010000 	.word	0x40010000
 80089b0:	40000400 	.word	0x40000400
 80089b4:	40000800 	.word	0x40000800
 80089b8:	40000c00 	.word	0x40000c00
 80089bc:	40001000 	.word	0x40001000
 80089c0:	40001400 	.word	0x40001400
 80089c4:	40010400 	.word	0x40010400
 80089c8:	40014000 	.word	0x40014000
 80089cc:	40014400 	.word	0x40014400
 80089d0:	40014800 	.word	0x40014800
 80089d4:	40001800 	.word	0x40001800
 80089d8:	40001c00 	.word	0x40001c00
 80089dc:	40002000 	.word	0x40002000
    }

    case TIM_CLOCKSOURCE_ETRMODE2:
    {
      /* Check whether or not the timer instance supports external trigger input mode 2 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	4a8d      	ldr	r2, [pc, #564]	; (8008c1c <HAL_TIM_ConfigClockSource+0x54c>)
 80089e6:	4293      	cmp	r3, r2
 80089e8:	d01d      	beq.n	8008a26 <HAL_TIM_ConfigClockSource+0x356>
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80089f2:	d018      	beq.n	8008a26 <HAL_TIM_ConfigClockSource+0x356>
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	4a89      	ldr	r2, [pc, #548]	; (8008c20 <HAL_TIM_ConfigClockSource+0x550>)
 80089fa:	4293      	cmp	r3, r2
 80089fc:	d013      	beq.n	8008a26 <HAL_TIM_ConfigClockSource+0x356>
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	4a88      	ldr	r2, [pc, #544]	; (8008c24 <HAL_TIM_ConfigClockSource+0x554>)
 8008a04:	4293      	cmp	r3, r2
 8008a06:	d00e      	beq.n	8008a26 <HAL_TIM_ConfigClockSource+0x356>
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	4a86      	ldr	r2, [pc, #536]	; (8008c28 <HAL_TIM_ConfigClockSource+0x558>)
 8008a0e:	4293      	cmp	r3, r2
 8008a10:	d009      	beq.n	8008a26 <HAL_TIM_ConfigClockSource+0x356>
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	4a85      	ldr	r2, [pc, #532]	; (8008c2c <HAL_TIM_ConfigClockSource+0x55c>)
 8008a18:	4293      	cmp	r3, r2
 8008a1a:	d004      	beq.n	8008a26 <HAL_TIM_ConfigClockSource+0x356>
 8008a1c:	f241 5177 	movw	r1, #5495	; 0x1577
 8008a20:	4883      	ldr	r0, [pc, #524]	; (8008c30 <HAL_TIM_ConfigClockSource+0x560>)
 8008a22:	f7fa f846 	bl	8002ab2 <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8008a26:	683b      	ldr	r3, [r7, #0]
 8008a28:	689b      	ldr	r3, [r3, #8]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d013      	beq.n	8008a56 <HAL_TIM_ConfigClockSource+0x386>
 8008a2e:	683b      	ldr	r3, [r7, #0]
 8008a30:	689b      	ldr	r3, [r3, #8]
 8008a32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a36:	d00e      	beq.n	8008a56 <HAL_TIM_ConfigClockSource+0x386>
 8008a38:	683b      	ldr	r3, [r7, #0]
 8008a3a:	689b      	ldr	r3, [r3, #8]
 8008a3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008a40:	d009      	beq.n	8008a56 <HAL_TIM_ConfigClockSource+0x386>
 8008a42:	683b      	ldr	r3, [r7, #0]
 8008a44:	689b      	ldr	r3, [r3, #8]
 8008a46:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008a4a:	d004      	beq.n	8008a56 <HAL_TIM_ConfigClockSource+0x386>
 8008a4c:	f241 517a 	movw	r1, #5498	; 0x157a
 8008a50:	4877      	ldr	r0, [pc, #476]	; (8008c30 <HAL_TIM_ConfigClockSource+0x560>)
 8008a52:	f7fa f82e 	bl	8002ab2 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8008a56:	683b      	ldr	r3, [r7, #0]
 8008a58:	685b      	ldr	r3, [r3, #4]
 8008a5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008a5e:	d014      	beq.n	8008a8a <HAL_TIM_ConfigClockSource+0x3ba>
 8008a60:	683b      	ldr	r3, [r7, #0]
 8008a62:	685b      	ldr	r3, [r3, #4]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d010      	beq.n	8008a8a <HAL_TIM_ConfigClockSource+0x3ba>
 8008a68:	683b      	ldr	r3, [r7, #0]
 8008a6a:	685b      	ldr	r3, [r3, #4]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d00c      	beq.n	8008a8a <HAL_TIM_ConfigClockSource+0x3ba>
 8008a70:	683b      	ldr	r3, [r7, #0]
 8008a72:	685b      	ldr	r3, [r3, #4]
 8008a74:	2b02      	cmp	r3, #2
 8008a76:	d008      	beq.n	8008a8a <HAL_TIM_ConfigClockSource+0x3ba>
 8008a78:	683b      	ldr	r3, [r7, #0]
 8008a7a:	685b      	ldr	r3, [r3, #4]
 8008a7c:	2b0a      	cmp	r3, #10
 8008a7e:	d004      	beq.n	8008a8a <HAL_TIM_ConfigClockSource+0x3ba>
 8008a80:	f241 517b 	movw	r1, #5499	; 0x157b
 8008a84:	486a      	ldr	r0, [pc, #424]	; (8008c30 <HAL_TIM_ConfigClockSource+0x560>)
 8008a86:	f7fa f814 	bl	8002ab2 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8008a8a:	683b      	ldr	r3, [r7, #0]
 8008a8c:	68db      	ldr	r3, [r3, #12]
 8008a8e:	2b0f      	cmp	r3, #15
 8008a90:	d904      	bls.n	8008a9c <HAL_TIM_ConfigClockSource+0x3cc>
 8008a92:	f241 517c 	movw	r1, #5500	; 0x157c
 8008a96:	4866      	ldr	r0, [pc, #408]	; (8008c30 <HAL_TIM_ConfigClockSource+0x560>)
 8008a98:	f7fa f80b 	bl	8002ab2 <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	6818      	ldr	r0, [r3, #0]
 8008aa0:	683b      	ldr	r3, [r7, #0]
 8008aa2:	6899      	ldr	r1, [r3, #8]
 8008aa4:	683b      	ldr	r3, [r7, #0]
 8008aa6:	685a      	ldr	r2, [r3, #4]
 8008aa8:	683b      	ldr	r3, [r7, #0]
 8008aaa:	68db      	ldr	r3, [r3, #12]
 8008aac:	f000 fd96 	bl	80095dc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	689a      	ldr	r2, [r3, #8]
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008abe:	609a      	str	r2, [r3, #8]
      break;
 8008ac0:	e13e      	b.n	8008d40 <HAL_TIM_ConfigClockSource+0x670>
    }

    case TIM_CLOCKSOURCE_TI1:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	4a55      	ldr	r2, [pc, #340]	; (8008c1c <HAL_TIM_ConfigClockSource+0x54c>)
 8008ac8:	4293      	cmp	r3, r2
 8008aca:	d01d      	beq.n	8008b08 <HAL_TIM_ConfigClockSource+0x438>
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ad4:	d018      	beq.n	8008b08 <HAL_TIM_ConfigClockSource+0x438>
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	4a51      	ldr	r2, [pc, #324]	; (8008c20 <HAL_TIM_ConfigClockSource+0x550>)
 8008adc:	4293      	cmp	r3, r2
 8008ade:	d013      	beq.n	8008b08 <HAL_TIM_ConfigClockSource+0x438>
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	4a4f      	ldr	r2, [pc, #316]	; (8008c24 <HAL_TIM_ConfigClockSource+0x554>)
 8008ae6:	4293      	cmp	r3, r2
 8008ae8:	d00e      	beq.n	8008b08 <HAL_TIM_ConfigClockSource+0x438>
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	4a4e      	ldr	r2, [pc, #312]	; (8008c28 <HAL_TIM_ConfigClockSource+0x558>)
 8008af0:	4293      	cmp	r3, r2
 8008af2:	d009      	beq.n	8008b08 <HAL_TIM_ConfigClockSource+0x438>
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	4a4c      	ldr	r2, [pc, #304]	; (8008c2c <HAL_TIM_ConfigClockSource+0x55c>)
 8008afa:	4293      	cmp	r3, r2
 8008afc:	d004      	beq.n	8008b08 <HAL_TIM_ConfigClockSource+0x438>
 8008afe:	f241 518b 	movw	r1, #5515	; 0x158b
 8008b02:	484b      	ldr	r0, [pc, #300]	; (8008c30 <HAL_TIM_ConfigClockSource+0x560>)
 8008b04:	f7f9 ffd5 	bl	8002ab2 <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8008b08:	683b      	ldr	r3, [r7, #0]
 8008b0a:	685b      	ldr	r3, [r3, #4]
 8008b0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008b10:	d014      	beq.n	8008b3c <HAL_TIM_ConfigClockSource+0x46c>
 8008b12:	683b      	ldr	r3, [r7, #0]
 8008b14:	685b      	ldr	r3, [r3, #4]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d010      	beq.n	8008b3c <HAL_TIM_ConfigClockSource+0x46c>
 8008b1a:	683b      	ldr	r3, [r7, #0]
 8008b1c:	685b      	ldr	r3, [r3, #4]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d00c      	beq.n	8008b3c <HAL_TIM_ConfigClockSource+0x46c>
 8008b22:	683b      	ldr	r3, [r7, #0]
 8008b24:	685b      	ldr	r3, [r3, #4]
 8008b26:	2b02      	cmp	r3, #2
 8008b28:	d008      	beq.n	8008b3c <HAL_TIM_ConfigClockSource+0x46c>
 8008b2a:	683b      	ldr	r3, [r7, #0]
 8008b2c:	685b      	ldr	r3, [r3, #4]
 8008b2e:	2b0a      	cmp	r3, #10
 8008b30:	d004      	beq.n	8008b3c <HAL_TIM_ConfigClockSource+0x46c>
 8008b32:	f241 518e 	movw	r1, #5518	; 0x158e
 8008b36:	483e      	ldr	r0, [pc, #248]	; (8008c30 <HAL_TIM_ConfigClockSource+0x560>)
 8008b38:	f7f9 ffbb 	bl	8002ab2 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8008b3c:	683b      	ldr	r3, [r7, #0]
 8008b3e:	68db      	ldr	r3, [r3, #12]
 8008b40:	2b0f      	cmp	r3, #15
 8008b42:	d904      	bls.n	8008b4e <HAL_TIM_ConfigClockSource+0x47e>
 8008b44:	f241 518f 	movw	r1, #5519	; 0x158f
 8008b48:	4839      	ldr	r0, [pc, #228]	; (8008c30 <HAL_TIM_ConfigClockSource+0x560>)
 8008b4a:	f7f9 ffb2 	bl	8002ab2 <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	6818      	ldr	r0, [r3, #0]
 8008b52:	683b      	ldr	r3, [r7, #0]
 8008b54:	6859      	ldr	r1, [r3, #4]
 8008b56:	683b      	ldr	r3, [r7, #0]
 8008b58:	68db      	ldr	r3, [r3, #12]
 8008b5a:	461a      	mov	r2, r3
 8008b5c:	f000 fcc4 	bl	80094e8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	2150      	movs	r1, #80	; 0x50
 8008b66:	4618      	mov	r0, r3
 8008b68:	f000 fd1d 	bl	80095a6 <TIM_ITRx_SetConfig>
      break;
 8008b6c:	e0e8      	b.n	8008d40 <HAL_TIM_ConfigClockSource+0x670>
    }

    case TIM_CLOCKSOURCE_TI2:
    {
      /* Check whether or not the timer instance supports external clock mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	4a2a      	ldr	r2, [pc, #168]	; (8008c1c <HAL_TIM_ConfigClockSource+0x54c>)
 8008b74:	4293      	cmp	r3, r2
 8008b76:	d01d      	beq.n	8008bb4 <HAL_TIM_ConfigClockSource+0x4e4>
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b80:	d018      	beq.n	8008bb4 <HAL_TIM_ConfigClockSource+0x4e4>
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	4a26      	ldr	r2, [pc, #152]	; (8008c20 <HAL_TIM_ConfigClockSource+0x550>)
 8008b88:	4293      	cmp	r3, r2
 8008b8a:	d013      	beq.n	8008bb4 <HAL_TIM_ConfigClockSource+0x4e4>
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	4a24      	ldr	r2, [pc, #144]	; (8008c24 <HAL_TIM_ConfigClockSource+0x554>)
 8008b92:	4293      	cmp	r3, r2
 8008b94:	d00e      	beq.n	8008bb4 <HAL_TIM_ConfigClockSource+0x4e4>
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	4a23      	ldr	r2, [pc, #140]	; (8008c28 <HAL_TIM_ConfigClockSource+0x558>)
 8008b9c:	4293      	cmp	r3, r2
 8008b9e:	d009      	beq.n	8008bb4 <HAL_TIM_ConfigClockSource+0x4e4>
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	4a21      	ldr	r2, [pc, #132]	; (8008c2c <HAL_TIM_ConfigClockSource+0x55c>)
 8008ba6:	4293      	cmp	r3, r2
 8008ba8:	d004      	beq.n	8008bb4 <HAL_TIM_ConfigClockSource+0x4e4>
 8008baa:	f241 519b 	movw	r1, #5531	; 0x159b
 8008bae:	4820      	ldr	r0, [pc, #128]	; (8008c30 <HAL_TIM_ConfigClockSource+0x560>)
 8008bb0:	f7f9 ff7f 	bl	8002ab2 <assert_failed>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8008bb4:	683b      	ldr	r3, [r7, #0]
 8008bb6:	685b      	ldr	r3, [r3, #4]
 8008bb8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008bbc:	d014      	beq.n	8008be8 <HAL_TIM_ConfigClockSource+0x518>
 8008bbe:	683b      	ldr	r3, [r7, #0]
 8008bc0:	685b      	ldr	r3, [r3, #4]
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d010      	beq.n	8008be8 <HAL_TIM_ConfigClockSource+0x518>
 8008bc6:	683b      	ldr	r3, [r7, #0]
 8008bc8:	685b      	ldr	r3, [r3, #4]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d00c      	beq.n	8008be8 <HAL_TIM_ConfigClockSource+0x518>
 8008bce:	683b      	ldr	r3, [r7, #0]
 8008bd0:	685b      	ldr	r3, [r3, #4]
 8008bd2:	2b02      	cmp	r3, #2
 8008bd4:	d008      	beq.n	8008be8 <HAL_TIM_ConfigClockSource+0x518>
 8008bd6:	683b      	ldr	r3, [r7, #0]
 8008bd8:	685b      	ldr	r3, [r3, #4]
 8008bda:	2b0a      	cmp	r3, #10
 8008bdc:	d004      	beq.n	8008be8 <HAL_TIM_ConfigClockSource+0x518>
 8008bde:	f241 519e 	movw	r1, #5534	; 0x159e
 8008be2:	4813      	ldr	r0, [pc, #76]	; (8008c30 <HAL_TIM_ConfigClockSource+0x560>)
 8008be4:	f7f9 ff65 	bl	8002ab2 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8008be8:	683b      	ldr	r3, [r7, #0]
 8008bea:	68db      	ldr	r3, [r3, #12]
 8008bec:	2b0f      	cmp	r3, #15
 8008bee:	d904      	bls.n	8008bfa <HAL_TIM_ConfigClockSource+0x52a>
 8008bf0:	f241 519f 	movw	r1, #5535	; 0x159f
 8008bf4:	480e      	ldr	r0, [pc, #56]	; (8008c30 <HAL_TIM_ConfigClockSource+0x560>)
 8008bf6:	f7f9 ff5c 	bl	8002ab2 <assert_failed>

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	6818      	ldr	r0, [r3, #0]
 8008bfe:	683b      	ldr	r3, [r7, #0]
 8008c00:	6859      	ldr	r1, [r3, #4]
 8008c02:	683b      	ldr	r3, [r7, #0]
 8008c04:	68db      	ldr	r3, [r3, #12]
 8008c06:	461a      	mov	r2, r3
 8008c08:	f000 fc9d 	bl	8009546 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	2160      	movs	r1, #96	; 0x60
 8008c12:	4618      	mov	r0, r3
 8008c14:	f000 fcc7 	bl	80095a6 <TIM_ITRx_SetConfig>
      break;
 8008c18:	e092      	b.n	8008d40 <HAL_TIM_ConfigClockSource+0x670>
 8008c1a:	bf00      	nop
 8008c1c:	40010000 	.word	0x40010000
 8008c20:	40000400 	.word	0x40000400
 8008c24:	40000800 	.word	0x40000800
 8008c28:	40000c00 	.word	0x40000c00
 8008c2c:	40010400 	.word	0x40010400
 8008c30:	08016814 	.word	0x08016814
    }

    case TIM_CLOCKSOURCE_TI1ED:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	4a48      	ldr	r2, [pc, #288]	; (8008d5c <HAL_TIM_ConfigClockSource+0x68c>)
 8008c3a:	4293      	cmp	r3, r2
 8008c3c:	d01d      	beq.n	8008c7a <HAL_TIM_ConfigClockSource+0x5aa>
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c46:	d018      	beq.n	8008c7a <HAL_TIM_ConfigClockSource+0x5aa>
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	4a44      	ldr	r2, [pc, #272]	; (8008d60 <HAL_TIM_ConfigClockSource+0x690>)
 8008c4e:	4293      	cmp	r3, r2
 8008c50:	d013      	beq.n	8008c7a <HAL_TIM_ConfigClockSource+0x5aa>
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	4a43      	ldr	r2, [pc, #268]	; (8008d64 <HAL_TIM_ConfigClockSource+0x694>)
 8008c58:	4293      	cmp	r3, r2
 8008c5a:	d00e      	beq.n	8008c7a <HAL_TIM_ConfigClockSource+0x5aa>
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	4a41      	ldr	r2, [pc, #260]	; (8008d68 <HAL_TIM_ConfigClockSource+0x698>)
 8008c62:	4293      	cmp	r3, r2
 8008c64:	d009      	beq.n	8008c7a <HAL_TIM_ConfigClockSource+0x5aa>
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	4a40      	ldr	r2, [pc, #256]	; (8008d6c <HAL_TIM_ConfigClockSource+0x69c>)
 8008c6c:	4293      	cmp	r3, r2
 8008c6e:	d004      	beq.n	8008c7a <HAL_TIM_ConfigClockSource+0x5aa>
 8008c70:	f241 51ab 	movw	r1, #5547	; 0x15ab
 8008c74:	483e      	ldr	r0, [pc, #248]	; (8008d70 <HAL_TIM_ConfigClockSource+0x6a0>)
 8008c76:	f7f9 ff1c 	bl	8002ab2 <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8008c7a:	683b      	ldr	r3, [r7, #0]
 8008c7c:	685b      	ldr	r3, [r3, #4]
 8008c7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008c82:	d014      	beq.n	8008cae <HAL_TIM_ConfigClockSource+0x5de>
 8008c84:	683b      	ldr	r3, [r7, #0]
 8008c86:	685b      	ldr	r3, [r3, #4]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d010      	beq.n	8008cae <HAL_TIM_ConfigClockSource+0x5de>
 8008c8c:	683b      	ldr	r3, [r7, #0]
 8008c8e:	685b      	ldr	r3, [r3, #4]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d00c      	beq.n	8008cae <HAL_TIM_ConfigClockSource+0x5de>
 8008c94:	683b      	ldr	r3, [r7, #0]
 8008c96:	685b      	ldr	r3, [r3, #4]
 8008c98:	2b02      	cmp	r3, #2
 8008c9a:	d008      	beq.n	8008cae <HAL_TIM_ConfigClockSource+0x5de>
 8008c9c:	683b      	ldr	r3, [r7, #0]
 8008c9e:	685b      	ldr	r3, [r3, #4]
 8008ca0:	2b0a      	cmp	r3, #10
 8008ca2:	d004      	beq.n	8008cae <HAL_TIM_ConfigClockSource+0x5de>
 8008ca4:	f241 51ae 	movw	r1, #5550	; 0x15ae
 8008ca8:	4831      	ldr	r0, [pc, #196]	; (8008d70 <HAL_TIM_ConfigClockSource+0x6a0>)
 8008caa:	f7f9 ff02 	bl	8002ab2 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8008cae:	683b      	ldr	r3, [r7, #0]
 8008cb0:	68db      	ldr	r3, [r3, #12]
 8008cb2:	2b0f      	cmp	r3, #15
 8008cb4:	d904      	bls.n	8008cc0 <HAL_TIM_ConfigClockSource+0x5f0>
 8008cb6:	f241 51af 	movw	r1, #5551	; 0x15af
 8008cba:	482d      	ldr	r0, [pc, #180]	; (8008d70 <HAL_TIM_ConfigClockSource+0x6a0>)
 8008cbc:	f7f9 fef9 	bl	8002ab2 <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	6818      	ldr	r0, [r3, #0]
 8008cc4:	683b      	ldr	r3, [r7, #0]
 8008cc6:	6859      	ldr	r1, [r3, #4]
 8008cc8:	683b      	ldr	r3, [r7, #0]
 8008cca:	68db      	ldr	r3, [r3, #12]
 8008ccc:	461a      	mov	r2, r3
 8008cce:	f000 fc0b 	bl	80094e8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	2140      	movs	r1, #64	; 0x40
 8008cd8:	4618      	mov	r0, r3
 8008cda:	f000 fc64 	bl	80095a6 <TIM_ITRx_SetConfig>
      break;
 8008cde:	e02f      	b.n	8008d40 <HAL_TIM_ConfigClockSource+0x670>
    case TIM_CLOCKSOURCE_ITR1:
    case TIM_CLOCKSOURCE_ITR2:
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	4a1d      	ldr	r2, [pc, #116]	; (8008d5c <HAL_TIM_ConfigClockSource+0x68c>)
 8008ce6:	4293      	cmp	r3, r2
 8008ce8:	d01d      	beq.n	8008d26 <HAL_TIM_ConfigClockSource+0x656>
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008cf2:	d018      	beq.n	8008d26 <HAL_TIM_ConfigClockSource+0x656>
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	4a19      	ldr	r2, [pc, #100]	; (8008d60 <HAL_TIM_ConfigClockSource+0x690>)
 8008cfa:	4293      	cmp	r3, r2
 8008cfc:	d013      	beq.n	8008d26 <HAL_TIM_ConfigClockSource+0x656>
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	4a18      	ldr	r2, [pc, #96]	; (8008d64 <HAL_TIM_ConfigClockSource+0x694>)
 8008d04:	4293      	cmp	r3, r2
 8008d06:	d00e      	beq.n	8008d26 <HAL_TIM_ConfigClockSource+0x656>
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	4a16      	ldr	r2, [pc, #88]	; (8008d68 <HAL_TIM_ConfigClockSource+0x698>)
 8008d0e:	4293      	cmp	r3, r2
 8008d10:	d009      	beq.n	8008d26 <HAL_TIM_ConfigClockSource+0x656>
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	4a15      	ldr	r2, [pc, #84]	; (8008d6c <HAL_TIM_ConfigClockSource+0x69c>)
 8008d18:	4293      	cmp	r3, r2
 8008d1a:	d004      	beq.n	8008d26 <HAL_TIM_ConfigClockSource+0x656>
 8008d1c:	f241 51be 	movw	r1, #5566	; 0x15be
 8008d20:	4813      	ldr	r0, [pc, #76]	; (8008d70 <HAL_TIM_ConfigClockSource+0x6a0>)
 8008d22:	f7f9 fec6 	bl	8002ab2 <assert_failed>

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681a      	ldr	r2, [r3, #0]
 8008d2a:	683b      	ldr	r3, [r7, #0]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	4619      	mov	r1, r3
 8008d30:	4610      	mov	r0, r2
 8008d32:	f000 fc38 	bl	80095a6 <TIM_ITRx_SetConfig>
      break;
 8008d36:	e003      	b.n	8008d40 <HAL_TIM_ConfigClockSource+0x670>
    }

    default:
      status = HAL_ERROR;
 8008d38:	2301      	movs	r3, #1
 8008d3a:	73fb      	strb	r3, [r7, #15]
      break;
 8008d3c:	e000      	b.n	8008d40 <HAL_TIM_ConfigClockSource+0x670>
      break;
 8008d3e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	2201      	movs	r2, #1
 8008d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	2200      	movs	r2, #0
 8008d4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008d50:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d52:	4618      	mov	r0, r3
 8008d54:	3710      	adds	r7, #16
 8008d56:	46bd      	mov	sp, r7
 8008d58:	bd80      	pop	{r7, pc}
 8008d5a:	bf00      	nop
 8008d5c:	40010000 	.word	0x40010000
 8008d60:	40000400 	.word	0x40000400
 8008d64:	40000800 	.word	0x40000800
 8008d68:	40000c00 	.word	0x40000c00
 8008d6c:	40010400 	.word	0x40010400
 8008d70:	08016814 	.word	0x08016814

08008d74 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008d74:	b480      	push	{r7}
 8008d76:	b083      	sub	sp, #12
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008d7c:	bf00      	nop
 8008d7e:	370c      	adds	r7, #12
 8008d80:	46bd      	mov	sp, r7
 8008d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d86:	4770      	bx	lr

08008d88 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008d88:	b480      	push	{r7}
 8008d8a:	b083      	sub	sp, #12
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008d90:	bf00      	nop
 8008d92:	370c      	adds	r7, #12
 8008d94:	46bd      	mov	sp, r7
 8008d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9a:	4770      	bx	lr

08008d9c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008d9c:	b480      	push	{r7}
 8008d9e:	b083      	sub	sp, #12
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008da4:	bf00      	nop
 8008da6:	370c      	adds	r7, #12
 8008da8:	46bd      	mov	sp, r7
 8008daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dae:	4770      	bx	lr

08008db0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008db0:	b480      	push	{r7}
 8008db2:	b083      	sub	sp, #12
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008db8:	bf00      	nop
 8008dba:	370c      	adds	r7, #12
 8008dbc:	46bd      	mov	sp, r7
 8008dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc2:	4770      	bx	lr

08008dc4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008dc4:	b480      	push	{r7}
 8008dc6:	b083      	sub	sp, #12
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008dcc:	bf00      	nop
 8008dce:	370c      	adds	r7, #12
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd6:	4770      	bx	lr

08008dd8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008dd8:	b480      	push	{r7}
 8008dda:	b085      	sub	sp, #20
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	6078      	str	r0, [r7, #4]
 8008de0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	4a40      	ldr	r2, [pc, #256]	; (8008eec <TIM_Base_SetConfig+0x114>)
 8008dec:	4293      	cmp	r3, r2
 8008dee:	d013      	beq.n	8008e18 <TIM_Base_SetConfig+0x40>
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008df6:	d00f      	beq.n	8008e18 <TIM_Base_SetConfig+0x40>
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	4a3d      	ldr	r2, [pc, #244]	; (8008ef0 <TIM_Base_SetConfig+0x118>)
 8008dfc:	4293      	cmp	r3, r2
 8008dfe:	d00b      	beq.n	8008e18 <TIM_Base_SetConfig+0x40>
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	4a3c      	ldr	r2, [pc, #240]	; (8008ef4 <TIM_Base_SetConfig+0x11c>)
 8008e04:	4293      	cmp	r3, r2
 8008e06:	d007      	beq.n	8008e18 <TIM_Base_SetConfig+0x40>
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	4a3b      	ldr	r2, [pc, #236]	; (8008ef8 <TIM_Base_SetConfig+0x120>)
 8008e0c:	4293      	cmp	r3, r2
 8008e0e:	d003      	beq.n	8008e18 <TIM_Base_SetConfig+0x40>
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	4a3a      	ldr	r2, [pc, #232]	; (8008efc <TIM_Base_SetConfig+0x124>)
 8008e14:	4293      	cmp	r3, r2
 8008e16:	d108      	bne.n	8008e2a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008e20:	683b      	ldr	r3, [r7, #0]
 8008e22:	685b      	ldr	r3, [r3, #4]
 8008e24:	68fa      	ldr	r2, [r7, #12]
 8008e26:	4313      	orrs	r3, r2
 8008e28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	4a2f      	ldr	r2, [pc, #188]	; (8008eec <TIM_Base_SetConfig+0x114>)
 8008e2e:	4293      	cmp	r3, r2
 8008e30:	d02b      	beq.n	8008e8a <TIM_Base_SetConfig+0xb2>
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e38:	d027      	beq.n	8008e8a <TIM_Base_SetConfig+0xb2>
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	4a2c      	ldr	r2, [pc, #176]	; (8008ef0 <TIM_Base_SetConfig+0x118>)
 8008e3e:	4293      	cmp	r3, r2
 8008e40:	d023      	beq.n	8008e8a <TIM_Base_SetConfig+0xb2>
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	4a2b      	ldr	r2, [pc, #172]	; (8008ef4 <TIM_Base_SetConfig+0x11c>)
 8008e46:	4293      	cmp	r3, r2
 8008e48:	d01f      	beq.n	8008e8a <TIM_Base_SetConfig+0xb2>
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	4a2a      	ldr	r2, [pc, #168]	; (8008ef8 <TIM_Base_SetConfig+0x120>)
 8008e4e:	4293      	cmp	r3, r2
 8008e50:	d01b      	beq.n	8008e8a <TIM_Base_SetConfig+0xb2>
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	4a29      	ldr	r2, [pc, #164]	; (8008efc <TIM_Base_SetConfig+0x124>)
 8008e56:	4293      	cmp	r3, r2
 8008e58:	d017      	beq.n	8008e8a <TIM_Base_SetConfig+0xb2>
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	4a28      	ldr	r2, [pc, #160]	; (8008f00 <TIM_Base_SetConfig+0x128>)
 8008e5e:	4293      	cmp	r3, r2
 8008e60:	d013      	beq.n	8008e8a <TIM_Base_SetConfig+0xb2>
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	4a27      	ldr	r2, [pc, #156]	; (8008f04 <TIM_Base_SetConfig+0x12c>)
 8008e66:	4293      	cmp	r3, r2
 8008e68:	d00f      	beq.n	8008e8a <TIM_Base_SetConfig+0xb2>
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	4a26      	ldr	r2, [pc, #152]	; (8008f08 <TIM_Base_SetConfig+0x130>)
 8008e6e:	4293      	cmp	r3, r2
 8008e70:	d00b      	beq.n	8008e8a <TIM_Base_SetConfig+0xb2>
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	4a25      	ldr	r2, [pc, #148]	; (8008f0c <TIM_Base_SetConfig+0x134>)
 8008e76:	4293      	cmp	r3, r2
 8008e78:	d007      	beq.n	8008e8a <TIM_Base_SetConfig+0xb2>
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	4a24      	ldr	r2, [pc, #144]	; (8008f10 <TIM_Base_SetConfig+0x138>)
 8008e7e:	4293      	cmp	r3, r2
 8008e80:	d003      	beq.n	8008e8a <TIM_Base_SetConfig+0xb2>
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	4a23      	ldr	r2, [pc, #140]	; (8008f14 <TIM_Base_SetConfig+0x13c>)
 8008e86:	4293      	cmp	r3, r2
 8008e88:	d108      	bne.n	8008e9c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008e90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008e92:	683b      	ldr	r3, [r7, #0]
 8008e94:	68db      	ldr	r3, [r3, #12]
 8008e96:	68fa      	ldr	r2, [r7, #12]
 8008e98:	4313      	orrs	r3, r2
 8008e9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008ea2:	683b      	ldr	r3, [r7, #0]
 8008ea4:	695b      	ldr	r3, [r3, #20]
 8008ea6:	4313      	orrs	r3, r2
 8008ea8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	68fa      	ldr	r2, [r7, #12]
 8008eae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008eb0:	683b      	ldr	r3, [r7, #0]
 8008eb2:	689a      	ldr	r2, [r3, #8]
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008eb8:	683b      	ldr	r3, [r7, #0]
 8008eba:	681a      	ldr	r2, [r3, #0]
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	4a0a      	ldr	r2, [pc, #40]	; (8008eec <TIM_Base_SetConfig+0x114>)
 8008ec4:	4293      	cmp	r3, r2
 8008ec6:	d003      	beq.n	8008ed0 <TIM_Base_SetConfig+0xf8>
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	4a0c      	ldr	r2, [pc, #48]	; (8008efc <TIM_Base_SetConfig+0x124>)
 8008ecc:	4293      	cmp	r3, r2
 8008ece:	d103      	bne.n	8008ed8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008ed0:	683b      	ldr	r3, [r7, #0]
 8008ed2:	691a      	ldr	r2, [r3, #16]
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	2201      	movs	r2, #1
 8008edc:	615a      	str	r2, [r3, #20]
}
 8008ede:	bf00      	nop
 8008ee0:	3714      	adds	r7, #20
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee8:	4770      	bx	lr
 8008eea:	bf00      	nop
 8008eec:	40010000 	.word	0x40010000
 8008ef0:	40000400 	.word	0x40000400
 8008ef4:	40000800 	.word	0x40000800
 8008ef8:	40000c00 	.word	0x40000c00
 8008efc:	40010400 	.word	0x40010400
 8008f00:	40014000 	.word	0x40014000
 8008f04:	40014400 	.word	0x40014400
 8008f08:	40014800 	.word	0x40014800
 8008f0c:	40001800 	.word	0x40001800
 8008f10:	40001c00 	.word	0x40001c00
 8008f14:	40002000 	.word	0x40002000

08008f18 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	b086      	sub	sp, #24
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	6078      	str	r0, [r7, #4]
 8008f20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	6a1b      	ldr	r3, [r3, #32]
 8008f26:	f023 0201 	bic.w	r2, r3, #1
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	6a1b      	ldr	r3, [r3, #32]
 8008f32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	685b      	ldr	r3, [r3, #4]
 8008f38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	699b      	ldr	r3, [r3, #24]
 8008f3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008f40:	68fa      	ldr	r2, [r7, #12]
 8008f42:	4b3f      	ldr	r3, [pc, #252]	; (8009040 <TIM_OC1_SetConfig+0x128>)
 8008f44:	4013      	ands	r3, r2
 8008f46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	f023 0303 	bic.w	r3, r3, #3
 8008f4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008f50:	683b      	ldr	r3, [r7, #0]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	68fa      	ldr	r2, [r7, #12]
 8008f56:	4313      	orrs	r3, r2
 8008f58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008f5a:	697b      	ldr	r3, [r7, #20]
 8008f5c:	f023 0302 	bic.w	r3, r3, #2
 8008f60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008f62:	683b      	ldr	r3, [r7, #0]
 8008f64:	689b      	ldr	r3, [r3, #8]
 8008f66:	697a      	ldr	r2, [r7, #20]
 8008f68:	4313      	orrs	r3, r2
 8008f6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	4a35      	ldr	r2, [pc, #212]	; (8009044 <TIM_OC1_SetConfig+0x12c>)
 8008f70:	4293      	cmp	r3, r2
 8008f72:	d003      	beq.n	8008f7c <TIM_OC1_SetConfig+0x64>
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	4a34      	ldr	r2, [pc, #208]	; (8009048 <TIM_OC1_SetConfig+0x130>)
 8008f78:	4293      	cmp	r3, r2
 8008f7a:	d119      	bne.n	8008fb0 <TIM_OC1_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8008f7c:	683b      	ldr	r3, [r7, #0]
 8008f7e:	68db      	ldr	r3, [r3, #12]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d008      	beq.n	8008f96 <TIM_OC1_SetConfig+0x7e>
 8008f84:	683b      	ldr	r3, [r7, #0]
 8008f86:	68db      	ldr	r3, [r3, #12]
 8008f88:	2b08      	cmp	r3, #8
 8008f8a:	d004      	beq.n	8008f96 <TIM_OC1_SetConfig+0x7e>
 8008f8c:	f641 3167 	movw	r1, #7015	; 0x1b67
 8008f90:	482e      	ldr	r0, [pc, #184]	; (800904c <TIM_OC1_SetConfig+0x134>)
 8008f92:	f7f9 fd8e 	bl	8002ab2 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008f96:	697b      	ldr	r3, [r7, #20]
 8008f98:	f023 0308 	bic.w	r3, r3, #8
 8008f9c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008f9e:	683b      	ldr	r3, [r7, #0]
 8008fa0:	68db      	ldr	r3, [r3, #12]
 8008fa2:	697a      	ldr	r2, [r7, #20]
 8008fa4:	4313      	orrs	r3, r2
 8008fa6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008fa8:	697b      	ldr	r3, [r7, #20]
 8008faa:	f023 0304 	bic.w	r3, r3, #4
 8008fae:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	4a24      	ldr	r2, [pc, #144]	; (8009044 <TIM_OC1_SetConfig+0x12c>)
 8008fb4:	4293      	cmp	r3, r2
 8008fb6:	d003      	beq.n	8008fc0 <TIM_OC1_SetConfig+0xa8>
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	4a23      	ldr	r2, [pc, #140]	; (8009048 <TIM_OC1_SetConfig+0x130>)
 8008fbc:	4293      	cmp	r3, r2
 8008fbe:	d12d      	bne.n	800901c <TIM_OC1_SetConfig+0x104>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8008fc0:	683b      	ldr	r3, [r7, #0]
 8008fc2:	699b      	ldr	r3, [r3, #24]
 8008fc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008fc8:	d008      	beq.n	8008fdc <TIM_OC1_SetConfig+0xc4>
 8008fca:	683b      	ldr	r3, [r7, #0]
 8008fcc:	699b      	ldr	r3, [r3, #24]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d004      	beq.n	8008fdc <TIM_OC1_SetConfig+0xc4>
 8008fd2:	f641 3174 	movw	r1, #7028	; 0x1b74
 8008fd6:	481d      	ldr	r0, [pc, #116]	; (800904c <TIM_OC1_SetConfig+0x134>)
 8008fd8:	f7f9 fd6b 	bl	8002ab2 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8008fdc:	683b      	ldr	r3, [r7, #0]
 8008fde:	695b      	ldr	r3, [r3, #20]
 8008fe0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008fe4:	d008      	beq.n	8008ff8 <TIM_OC1_SetConfig+0xe0>
 8008fe6:	683b      	ldr	r3, [r7, #0]
 8008fe8:	695b      	ldr	r3, [r3, #20]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d004      	beq.n	8008ff8 <TIM_OC1_SetConfig+0xe0>
 8008fee:	f641 3175 	movw	r1, #7029	; 0x1b75
 8008ff2:	4816      	ldr	r0, [pc, #88]	; (800904c <TIM_OC1_SetConfig+0x134>)
 8008ff4:	f7f9 fd5d 	bl	8002ab2 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008ff8:	693b      	ldr	r3, [r7, #16]
 8008ffa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008ffe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009000:	693b      	ldr	r3, [r7, #16]
 8009002:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009006:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009008:	683b      	ldr	r3, [r7, #0]
 800900a:	695b      	ldr	r3, [r3, #20]
 800900c:	693a      	ldr	r2, [r7, #16]
 800900e:	4313      	orrs	r3, r2
 8009010:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009012:	683b      	ldr	r3, [r7, #0]
 8009014:	699b      	ldr	r3, [r3, #24]
 8009016:	693a      	ldr	r2, [r7, #16]
 8009018:	4313      	orrs	r3, r2
 800901a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	693a      	ldr	r2, [r7, #16]
 8009020:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	68fa      	ldr	r2, [r7, #12]
 8009026:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009028:	683b      	ldr	r3, [r7, #0]
 800902a:	685a      	ldr	r2, [r3, #4]
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	697a      	ldr	r2, [r7, #20]
 8009034:	621a      	str	r2, [r3, #32]
}
 8009036:	bf00      	nop
 8009038:	3718      	adds	r7, #24
 800903a:	46bd      	mov	sp, r7
 800903c:	bd80      	pop	{r7, pc}
 800903e:	bf00      	nop
 8009040:	fffeff8f 	.word	0xfffeff8f
 8009044:	40010000 	.word	0x40010000
 8009048:	40010400 	.word	0x40010400
 800904c:	08016814 	.word	0x08016814

08009050 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009050:	b580      	push	{r7, lr}
 8009052:	b086      	sub	sp, #24
 8009054:	af00      	add	r7, sp, #0
 8009056:	6078      	str	r0, [r7, #4]
 8009058:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	6a1b      	ldr	r3, [r3, #32]
 800905e:	f023 0210 	bic.w	r2, r3, #16
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	6a1b      	ldr	r3, [r3, #32]
 800906a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	685b      	ldr	r3, [r3, #4]
 8009070:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	699b      	ldr	r3, [r3, #24]
 8009076:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009078:	68fa      	ldr	r2, [r7, #12]
 800907a:	4b41      	ldr	r3, [pc, #260]	; (8009180 <TIM_OC2_SetConfig+0x130>)
 800907c:	4013      	ands	r3, r2
 800907e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009086:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009088:	683b      	ldr	r3, [r7, #0]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	021b      	lsls	r3, r3, #8
 800908e:	68fa      	ldr	r2, [r7, #12]
 8009090:	4313      	orrs	r3, r2
 8009092:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009094:	697b      	ldr	r3, [r7, #20]
 8009096:	f023 0320 	bic.w	r3, r3, #32
 800909a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800909c:	683b      	ldr	r3, [r7, #0]
 800909e:	689b      	ldr	r3, [r3, #8]
 80090a0:	011b      	lsls	r3, r3, #4
 80090a2:	697a      	ldr	r2, [r7, #20]
 80090a4:	4313      	orrs	r3, r2
 80090a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	4a36      	ldr	r2, [pc, #216]	; (8009184 <TIM_OC2_SetConfig+0x134>)
 80090ac:	4293      	cmp	r3, r2
 80090ae:	d003      	beq.n	80090b8 <TIM_OC2_SetConfig+0x68>
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	4a35      	ldr	r2, [pc, #212]	; (8009188 <TIM_OC2_SetConfig+0x138>)
 80090b4:	4293      	cmp	r3, r2
 80090b6:	d11a      	bne.n	80090ee <TIM_OC2_SetConfig+0x9e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 80090b8:	683b      	ldr	r3, [r7, #0]
 80090ba:	68db      	ldr	r3, [r3, #12]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d008      	beq.n	80090d2 <TIM_OC2_SetConfig+0x82>
 80090c0:	683b      	ldr	r3, [r7, #0]
 80090c2:	68db      	ldr	r3, [r3, #12]
 80090c4:	2b08      	cmp	r3, #8
 80090c6:	d004      	beq.n	80090d2 <TIM_OC2_SetConfig+0x82>
 80090c8:	f641 31b2 	movw	r1, #7090	; 0x1bb2
 80090cc:	482f      	ldr	r0, [pc, #188]	; (800918c <TIM_OC2_SetConfig+0x13c>)
 80090ce:	f7f9 fcf0 	bl	8002ab2 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80090d2:	697b      	ldr	r3, [r7, #20]
 80090d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80090d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80090da:	683b      	ldr	r3, [r7, #0]
 80090dc:	68db      	ldr	r3, [r3, #12]
 80090de:	011b      	lsls	r3, r3, #4
 80090e0:	697a      	ldr	r2, [r7, #20]
 80090e2:	4313      	orrs	r3, r2
 80090e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80090e6:	697b      	ldr	r3, [r7, #20]
 80090e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80090ec:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	4a24      	ldr	r2, [pc, #144]	; (8009184 <TIM_OC2_SetConfig+0x134>)
 80090f2:	4293      	cmp	r3, r2
 80090f4:	d003      	beq.n	80090fe <TIM_OC2_SetConfig+0xae>
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	4a23      	ldr	r2, [pc, #140]	; (8009188 <TIM_OC2_SetConfig+0x138>)
 80090fa:	4293      	cmp	r3, r2
 80090fc:	d12f      	bne.n	800915e <TIM_OC2_SetConfig+0x10e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 80090fe:	683b      	ldr	r3, [r7, #0]
 8009100:	699b      	ldr	r3, [r3, #24]
 8009102:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009106:	d008      	beq.n	800911a <TIM_OC2_SetConfig+0xca>
 8009108:	683b      	ldr	r3, [r7, #0]
 800910a:	699b      	ldr	r3, [r3, #24]
 800910c:	2b00      	cmp	r3, #0
 800910e:	d004      	beq.n	800911a <TIM_OC2_SetConfig+0xca>
 8009110:	f44f 51de 	mov.w	r1, #7104	; 0x1bc0
 8009114:	481d      	ldr	r0, [pc, #116]	; (800918c <TIM_OC2_SetConfig+0x13c>)
 8009116:	f7f9 fccc 	bl	8002ab2 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800911a:	683b      	ldr	r3, [r7, #0]
 800911c:	695b      	ldr	r3, [r3, #20]
 800911e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009122:	d008      	beq.n	8009136 <TIM_OC2_SetConfig+0xe6>
 8009124:	683b      	ldr	r3, [r7, #0]
 8009126:	695b      	ldr	r3, [r3, #20]
 8009128:	2b00      	cmp	r3, #0
 800912a:	d004      	beq.n	8009136 <TIM_OC2_SetConfig+0xe6>
 800912c:	f641 31c1 	movw	r1, #7105	; 0x1bc1
 8009130:	4816      	ldr	r0, [pc, #88]	; (800918c <TIM_OC2_SetConfig+0x13c>)
 8009132:	f7f9 fcbe 	bl	8002ab2 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009136:	693b      	ldr	r3, [r7, #16]
 8009138:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800913c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800913e:	693b      	ldr	r3, [r7, #16]
 8009140:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009144:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009146:	683b      	ldr	r3, [r7, #0]
 8009148:	695b      	ldr	r3, [r3, #20]
 800914a:	009b      	lsls	r3, r3, #2
 800914c:	693a      	ldr	r2, [r7, #16]
 800914e:	4313      	orrs	r3, r2
 8009150:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009152:	683b      	ldr	r3, [r7, #0]
 8009154:	699b      	ldr	r3, [r3, #24]
 8009156:	009b      	lsls	r3, r3, #2
 8009158:	693a      	ldr	r2, [r7, #16]
 800915a:	4313      	orrs	r3, r2
 800915c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	693a      	ldr	r2, [r7, #16]
 8009162:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	68fa      	ldr	r2, [r7, #12]
 8009168:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800916a:	683b      	ldr	r3, [r7, #0]
 800916c:	685a      	ldr	r2, [r3, #4]
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	697a      	ldr	r2, [r7, #20]
 8009176:	621a      	str	r2, [r3, #32]
}
 8009178:	bf00      	nop
 800917a:	3718      	adds	r7, #24
 800917c:	46bd      	mov	sp, r7
 800917e:	bd80      	pop	{r7, pc}
 8009180:	feff8fff 	.word	0xfeff8fff
 8009184:	40010000 	.word	0x40010000
 8009188:	40010400 	.word	0x40010400
 800918c:	08016814 	.word	0x08016814

08009190 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009190:	b580      	push	{r7, lr}
 8009192:	b086      	sub	sp, #24
 8009194:	af00      	add	r7, sp, #0
 8009196:	6078      	str	r0, [r7, #4]
 8009198:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	6a1b      	ldr	r3, [r3, #32]
 800919e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	6a1b      	ldr	r3, [r3, #32]
 80091aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	685b      	ldr	r3, [r3, #4]
 80091b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	69db      	ldr	r3, [r3, #28]
 80091b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80091b8:	68fa      	ldr	r2, [r7, #12]
 80091ba:	4b41      	ldr	r3, [pc, #260]	; (80092c0 <TIM_OC3_SetConfig+0x130>)
 80091bc:	4013      	ands	r3, r2
 80091be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	f023 0303 	bic.w	r3, r3, #3
 80091c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80091c8:	683b      	ldr	r3, [r7, #0]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	68fa      	ldr	r2, [r7, #12]
 80091ce:	4313      	orrs	r3, r2
 80091d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80091d2:	697b      	ldr	r3, [r7, #20]
 80091d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80091d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80091da:	683b      	ldr	r3, [r7, #0]
 80091dc:	689b      	ldr	r3, [r3, #8]
 80091de:	021b      	lsls	r3, r3, #8
 80091e0:	697a      	ldr	r2, [r7, #20]
 80091e2:	4313      	orrs	r3, r2
 80091e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	4a36      	ldr	r2, [pc, #216]	; (80092c4 <TIM_OC3_SetConfig+0x134>)
 80091ea:	4293      	cmp	r3, r2
 80091ec:	d003      	beq.n	80091f6 <TIM_OC3_SetConfig+0x66>
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	4a35      	ldr	r2, [pc, #212]	; (80092c8 <TIM_OC3_SetConfig+0x138>)
 80091f2:	4293      	cmp	r3, r2
 80091f4:	d11a      	bne.n	800922c <TIM_OC3_SetConfig+0x9c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 80091f6:	683b      	ldr	r3, [r7, #0]
 80091f8:	68db      	ldr	r3, [r3, #12]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d008      	beq.n	8009210 <TIM_OC3_SetConfig+0x80>
 80091fe:	683b      	ldr	r3, [r7, #0]
 8009200:	68db      	ldr	r3, [r3, #12]
 8009202:	2b08      	cmp	r3, #8
 8009204:	d004      	beq.n	8009210 <TIM_OC3_SetConfig+0x80>
 8009206:	f641 31fd 	movw	r1, #7165	; 0x1bfd
 800920a:	4830      	ldr	r0, [pc, #192]	; (80092cc <TIM_OC3_SetConfig+0x13c>)
 800920c:	f7f9 fc51 	bl	8002ab2 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009210:	697b      	ldr	r3, [r7, #20]
 8009212:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009216:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009218:	683b      	ldr	r3, [r7, #0]
 800921a:	68db      	ldr	r3, [r3, #12]
 800921c:	021b      	lsls	r3, r3, #8
 800921e:	697a      	ldr	r2, [r7, #20]
 8009220:	4313      	orrs	r3, r2
 8009222:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009224:	697b      	ldr	r3, [r7, #20]
 8009226:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800922a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	4a25      	ldr	r2, [pc, #148]	; (80092c4 <TIM_OC3_SetConfig+0x134>)
 8009230:	4293      	cmp	r3, r2
 8009232:	d003      	beq.n	800923c <TIM_OC3_SetConfig+0xac>
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	4a24      	ldr	r2, [pc, #144]	; (80092c8 <TIM_OC3_SetConfig+0x138>)
 8009238:	4293      	cmp	r3, r2
 800923a:	d12f      	bne.n	800929c <TIM_OC3_SetConfig+0x10c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800923c:	683b      	ldr	r3, [r7, #0]
 800923e:	699b      	ldr	r3, [r3, #24]
 8009240:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009244:	d008      	beq.n	8009258 <TIM_OC3_SetConfig+0xc8>
 8009246:	683b      	ldr	r3, [r7, #0]
 8009248:	699b      	ldr	r3, [r3, #24]
 800924a:	2b00      	cmp	r3, #0
 800924c:	d004      	beq.n	8009258 <TIM_OC3_SetConfig+0xc8>
 800924e:	f641 410a 	movw	r1, #7178	; 0x1c0a
 8009252:	481e      	ldr	r0, [pc, #120]	; (80092cc <TIM_OC3_SetConfig+0x13c>)
 8009254:	f7f9 fc2d 	bl	8002ab2 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8009258:	683b      	ldr	r3, [r7, #0]
 800925a:	695b      	ldr	r3, [r3, #20]
 800925c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009260:	d008      	beq.n	8009274 <TIM_OC3_SetConfig+0xe4>
 8009262:	683b      	ldr	r3, [r7, #0]
 8009264:	695b      	ldr	r3, [r3, #20]
 8009266:	2b00      	cmp	r3, #0
 8009268:	d004      	beq.n	8009274 <TIM_OC3_SetConfig+0xe4>
 800926a:	f641 410b 	movw	r1, #7179	; 0x1c0b
 800926e:	4817      	ldr	r0, [pc, #92]	; (80092cc <TIM_OC3_SetConfig+0x13c>)
 8009270:	f7f9 fc1f 	bl	8002ab2 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009274:	693b      	ldr	r3, [r7, #16]
 8009276:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800927a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800927c:	693b      	ldr	r3, [r7, #16]
 800927e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009282:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009284:	683b      	ldr	r3, [r7, #0]
 8009286:	695b      	ldr	r3, [r3, #20]
 8009288:	011b      	lsls	r3, r3, #4
 800928a:	693a      	ldr	r2, [r7, #16]
 800928c:	4313      	orrs	r3, r2
 800928e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009290:	683b      	ldr	r3, [r7, #0]
 8009292:	699b      	ldr	r3, [r3, #24]
 8009294:	011b      	lsls	r3, r3, #4
 8009296:	693a      	ldr	r2, [r7, #16]
 8009298:	4313      	orrs	r3, r2
 800929a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	693a      	ldr	r2, [r7, #16]
 80092a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	68fa      	ldr	r2, [r7, #12]
 80092a6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80092a8:	683b      	ldr	r3, [r7, #0]
 80092aa:	685a      	ldr	r2, [r3, #4]
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	697a      	ldr	r2, [r7, #20]
 80092b4:	621a      	str	r2, [r3, #32]
}
 80092b6:	bf00      	nop
 80092b8:	3718      	adds	r7, #24
 80092ba:	46bd      	mov	sp, r7
 80092bc:	bd80      	pop	{r7, pc}
 80092be:	bf00      	nop
 80092c0:	fffeff8f 	.word	0xfffeff8f
 80092c4:	40010000 	.word	0x40010000
 80092c8:	40010400 	.word	0x40010400
 80092cc:	08016814 	.word	0x08016814

080092d0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80092d0:	b580      	push	{r7, lr}
 80092d2:	b086      	sub	sp, #24
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	6078      	str	r0, [r7, #4]
 80092d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	6a1b      	ldr	r3, [r3, #32]
 80092de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	6a1b      	ldr	r3, [r3, #32]
 80092ea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	685b      	ldr	r3, [r3, #4]
 80092f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	69db      	ldr	r3, [r3, #28]
 80092f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80092f8:	68fa      	ldr	r2, [r7, #12]
 80092fa:	4b24      	ldr	r3, [pc, #144]	; (800938c <TIM_OC4_SetConfig+0xbc>)
 80092fc:	4013      	ands	r3, r2
 80092fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009306:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009308:	683b      	ldr	r3, [r7, #0]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	021b      	lsls	r3, r3, #8
 800930e:	68fa      	ldr	r2, [r7, #12]
 8009310:	4313      	orrs	r3, r2
 8009312:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009314:	693b      	ldr	r3, [r7, #16]
 8009316:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800931a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800931c:	683b      	ldr	r3, [r7, #0]
 800931e:	689b      	ldr	r3, [r3, #8]
 8009320:	031b      	lsls	r3, r3, #12
 8009322:	693a      	ldr	r2, [r7, #16]
 8009324:	4313      	orrs	r3, r2
 8009326:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	4a19      	ldr	r2, [pc, #100]	; (8009390 <TIM_OC4_SetConfig+0xc0>)
 800932c:	4293      	cmp	r3, r2
 800932e:	d003      	beq.n	8009338 <TIM_OC4_SetConfig+0x68>
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	4a18      	ldr	r2, [pc, #96]	; (8009394 <TIM_OC4_SetConfig+0xc4>)
 8009334:	4293      	cmp	r3, r2
 8009336:	d117      	bne.n	8009368 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8009338:	683b      	ldr	r3, [r7, #0]
 800933a:	695b      	ldr	r3, [r3, #20]
 800933c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009340:	d008      	beq.n	8009354 <TIM_OC4_SetConfig+0x84>
 8009342:	683b      	ldr	r3, [r7, #0]
 8009344:	695b      	ldr	r3, [r3, #20]
 8009346:	2b00      	cmp	r3, #0
 8009348:	d004      	beq.n	8009354 <TIM_OC4_SetConfig+0x84>
 800934a:	f641 4149 	movw	r1, #7241	; 0x1c49
 800934e:	4812      	ldr	r0, [pc, #72]	; (8009398 <TIM_OC4_SetConfig+0xc8>)
 8009350:	f7f9 fbaf 	bl	8002ab2 <assert_failed>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009354:	697b      	ldr	r3, [r7, #20]
 8009356:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800935a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800935c:	683b      	ldr	r3, [r7, #0]
 800935e:	695b      	ldr	r3, [r3, #20]
 8009360:	019b      	lsls	r3, r3, #6
 8009362:	697a      	ldr	r2, [r7, #20]
 8009364:	4313      	orrs	r3, r2
 8009366:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	697a      	ldr	r2, [r7, #20]
 800936c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	68fa      	ldr	r2, [r7, #12]
 8009372:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009374:	683b      	ldr	r3, [r7, #0]
 8009376:	685a      	ldr	r2, [r3, #4]
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	693a      	ldr	r2, [r7, #16]
 8009380:	621a      	str	r2, [r3, #32]
}
 8009382:	bf00      	nop
 8009384:	3718      	adds	r7, #24
 8009386:	46bd      	mov	sp, r7
 8009388:	bd80      	pop	{r7, pc}
 800938a:	bf00      	nop
 800938c:	feff8fff 	.word	0xfeff8fff
 8009390:	40010000 	.word	0x40010000
 8009394:	40010400 	.word	0x40010400
 8009398:	08016814 	.word	0x08016814

0800939c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800939c:	b480      	push	{r7}
 800939e:	b087      	sub	sp, #28
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	6078      	str	r0, [r7, #4]
 80093a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	6a1b      	ldr	r3, [r3, #32]
 80093aa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	6a1b      	ldr	r3, [r3, #32]
 80093b6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	685b      	ldr	r3, [r3, #4]
 80093bc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80093c4:	68fa      	ldr	r2, [r7, #12]
 80093c6:	4b1b      	ldr	r3, [pc, #108]	; (8009434 <TIM_OC5_SetConfig+0x98>)
 80093c8:	4013      	ands	r3, r2
 80093ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80093cc:	683b      	ldr	r3, [r7, #0]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	68fa      	ldr	r2, [r7, #12]
 80093d2:	4313      	orrs	r3, r2
 80093d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80093d6:	693b      	ldr	r3, [r7, #16]
 80093d8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80093dc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80093de:	683b      	ldr	r3, [r7, #0]
 80093e0:	689b      	ldr	r3, [r3, #8]
 80093e2:	041b      	lsls	r3, r3, #16
 80093e4:	693a      	ldr	r2, [r7, #16]
 80093e6:	4313      	orrs	r3, r2
 80093e8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	4a12      	ldr	r2, [pc, #72]	; (8009438 <TIM_OC5_SetConfig+0x9c>)
 80093ee:	4293      	cmp	r3, r2
 80093f0:	d003      	beq.n	80093fa <TIM_OC5_SetConfig+0x5e>
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	4a11      	ldr	r2, [pc, #68]	; (800943c <TIM_OC5_SetConfig+0xa0>)
 80093f6:	4293      	cmp	r3, r2
 80093f8:	d109      	bne.n	800940e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80093fa:	697b      	ldr	r3, [r7, #20]
 80093fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009400:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009402:	683b      	ldr	r3, [r7, #0]
 8009404:	695b      	ldr	r3, [r3, #20]
 8009406:	021b      	lsls	r3, r3, #8
 8009408:	697a      	ldr	r2, [r7, #20]
 800940a:	4313      	orrs	r3, r2
 800940c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	697a      	ldr	r2, [r7, #20]
 8009412:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	68fa      	ldr	r2, [r7, #12]
 8009418:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800941a:	683b      	ldr	r3, [r7, #0]
 800941c:	685a      	ldr	r2, [r3, #4]
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	693a      	ldr	r2, [r7, #16]
 8009426:	621a      	str	r2, [r3, #32]
}
 8009428:	bf00      	nop
 800942a:	371c      	adds	r7, #28
 800942c:	46bd      	mov	sp, r7
 800942e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009432:	4770      	bx	lr
 8009434:	fffeff8f 	.word	0xfffeff8f
 8009438:	40010000 	.word	0x40010000
 800943c:	40010400 	.word	0x40010400

08009440 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009440:	b480      	push	{r7}
 8009442:	b087      	sub	sp, #28
 8009444:	af00      	add	r7, sp, #0
 8009446:	6078      	str	r0, [r7, #4]
 8009448:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	6a1b      	ldr	r3, [r3, #32]
 800944e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	6a1b      	ldr	r3, [r3, #32]
 800945a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	685b      	ldr	r3, [r3, #4]
 8009460:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009466:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009468:	68fa      	ldr	r2, [r7, #12]
 800946a:	4b1c      	ldr	r3, [pc, #112]	; (80094dc <TIM_OC6_SetConfig+0x9c>)
 800946c:	4013      	ands	r3, r2
 800946e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009470:	683b      	ldr	r3, [r7, #0]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	021b      	lsls	r3, r3, #8
 8009476:	68fa      	ldr	r2, [r7, #12]
 8009478:	4313      	orrs	r3, r2
 800947a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800947c:	693b      	ldr	r3, [r7, #16]
 800947e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009482:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009484:	683b      	ldr	r3, [r7, #0]
 8009486:	689b      	ldr	r3, [r3, #8]
 8009488:	051b      	lsls	r3, r3, #20
 800948a:	693a      	ldr	r2, [r7, #16]
 800948c:	4313      	orrs	r3, r2
 800948e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	4a13      	ldr	r2, [pc, #76]	; (80094e0 <TIM_OC6_SetConfig+0xa0>)
 8009494:	4293      	cmp	r3, r2
 8009496:	d003      	beq.n	80094a0 <TIM_OC6_SetConfig+0x60>
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	4a12      	ldr	r2, [pc, #72]	; (80094e4 <TIM_OC6_SetConfig+0xa4>)
 800949c:	4293      	cmp	r3, r2
 800949e:	d109      	bne.n	80094b4 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80094a0:	697b      	ldr	r3, [r7, #20]
 80094a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80094a6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80094a8:	683b      	ldr	r3, [r7, #0]
 80094aa:	695b      	ldr	r3, [r3, #20]
 80094ac:	029b      	lsls	r3, r3, #10
 80094ae:	697a      	ldr	r2, [r7, #20]
 80094b0:	4313      	orrs	r3, r2
 80094b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	697a      	ldr	r2, [r7, #20]
 80094b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	68fa      	ldr	r2, [r7, #12]
 80094be:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80094c0:	683b      	ldr	r3, [r7, #0]
 80094c2:	685a      	ldr	r2, [r3, #4]
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	693a      	ldr	r2, [r7, #16]
 80094cc:	621a      	str	r2, [r3, #32]
}
 80094ce:	bf00      	nop
 80094d0:	371c      	adds	r7, #28
 80094d2:	46bd      	mov	sp, r7
 80094d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d8:	4770      	bx	lr
 80094da:	bf00      	nop
 80094dc:	feff8fff 	.word	0xfeff8fff
 80094e0:	40010000 	.word	0x40010000
 80094e4:	40010400 	.word	0x40010400

080094e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80094e8:	b480      	push	{r7}
 80094ea:	b087      	sub	sp, #28
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	60f8      	str	r0, [r7, #12]
 80094f0:	60b9      	str	r1, [r7, #8]
 80094f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	6a1b      	ldr	r3, [r3, #32]
 80094f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	6a1b      	ldr	r3, [r3, #32]
 80094fe:	f023 0201 	bic.w	r2, r3, #1
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	699b      	ldr	r3, [r3, #24]
 800950a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800950c:	693b      	ldr	r3, [r7, #16]
 800950e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009512:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	011b      	lsls	r3, r3, #4
 8009518:	693a      	ldr	r2, [r7, #16]
 800951a:	4313      	orrs	r3, r2
 800951c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800951e:	697b      	ldr	r3, [r7, #20]
 8009520:	f023 030a 	bic.w	r3, r3, #10
 8009524:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009526:	697a      	ldr	r2, [r7, #20]
 8009528:	68bb      	ldr	r3, [r7, #8]
 800952a:	4313      	orrs	r3, r2
 800952c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	693a      	ldr	r2, [r7, #16]
 8009532:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	697a      	ldr	r2, [r7, #20]
 8009538:	621a      	str	r2, [r3, #32]
}
 800953a:	bf00      	nop
 800953c:	371c      	adds	r7, #28
 800953e:	46bd      	mov	sp, r7
 8009540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009544:	4770      	bx	lr

08009546 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009546:	b480      	push	{r7}
 8009548:	b087      	sub	sp, #28
 800954a:	af00      	add	r7, sp, #0
 800954c:	60f8      	str	r0, [r7, #12]
 800954e:	60b9      	str	r1, [r7, #8]
 8009550:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	6a1b      	ldr	r3, [r3, #32]
 8009556:	f023 0210 	bic.w	r2, r3, #16
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	699b      	ldr	r3, [r3, #24]
 8009562:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	6a1b      	ldr	r3, [r3, #32]
 8009568:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800956a:	697b      	ldr	r3, [r7, #20]
 800956c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009570:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	031b      	lsls	r3, r3, #12
 8009576:	697a      	ldr	r2, [r7, #20]
 8009578:	4313      	orrs	r3, r2
 800957a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800957c:	693b      	ldr	r3, [r7, #16]
 800957e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009582:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009584:	68bb      	ldr	r3, [r7, #8]
 8009586:	011b      	lsls	r3, r3, #4
 8009588:	693a      	ldr	r2, [r7, #16]
 800958a:	4313      	orrs	r3, r2
 800958c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	697a      	ldr	r2, [r7, #20]
 8009592:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	693a      	ldr	r2, [r7, #16]
 8009598:	621a      	str	r2, [r3, #32]
}
 800959a:	bf00      	nop
 800959c:	371c      	adds	r7, #28
 800959e:	46bd      	mov	sp, r7
 80095a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a4:	4770      	bx	lr

080095a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80095a6:	b480      	push	{r7}
 80095a8:	b085      	sub	sp, #20
 80095aa:	af00      	add	r7, sp, #0
 80095ac:	6078      	str	r0, [r7, #4]
 80095ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	689b      	ldr	r3, [r3, #8]
 80095b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80095bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80095be:	683a      	ldr	r2, [r7, #0]
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	4313      	orrs	r3, r2
 80095c4:	f043 0307 	orr.w	r3, r3, #7
 80095c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	68fa      	ldr	r2, [r7, #12]
 80095ce:	609a      	str	r2, [r3, #8]
}
 80095d0:	bf00      	nop
 80095d2:	3714      	adds	r7, #20
 80095d4:	46bd      	mov	sp, r7
 80095d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095da:	4770      	bx	lr

080095dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80095dc:	b480      	push	{r7}
 80095de:	b087      	sub	sp, #28
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	60f8      	str	r0, [r7, #12]
 80095e4:	60b9      	str	r1, [r7, #8]
 80095e6:	607a      	str	r2, [r7, #4]
 80095e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	689b      	ldr	r3, [r3, #8]
 80095ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80095f0:	697b      	ldr	r3, [r7, #20]
 80095f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80095f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80095f8:	683b      	ldr	r3, [r7, #0]
 80095fa:	021a      	lsls	r2, r3, #8
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	431a      	orrs	r2, r3
 8009600:	68bb      	ldr	r3, [r7, #8]
 8009602:	4313      	orrs	r3, r2
 8009604:	697a      	ldr	r2, [r7, #20]
 8009606:	4313      	orrs	r3, r2
 8009608:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	697a      	ldr	r2, [r7, #20]
 800960e:	609a      	str	r2, [r3, #8]
}
 8009610:	bf00      	nop
 8009612:	371c      	adds	r7, #28
 8009614:	46bd      	mov	sp, r7
 8009616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961a:	4770      	bx	lr

0800961c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800961c:	b580      	push	{r7, lr}
 800961e:	b086      	sub	sp, #24
 8009620:	af00      	add	r7, sp, #0
 8009622:	60f8      	str	r0, [r7, #12]
 8009624:	60b9      	str	r1, [r7, #8]
 8009626:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	4a35      	ldr	r2, [pc, #212]	; (8009700 <TIM_CCxChannelCmd+0xe4>)
 800962c:	4293      	cmp	r3, r2
 800962e:	d030      	beq.n	8009692 <TIM_CCxChannelCmd+0x76>
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009636:	d02c      	beq.n	8009692 <TIM_CCxChannelCmd+0x76>
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	4a32      	ldr	r2, [pc, #200]	; (8009704 <TIM_CCxChannelCmd+0xe8>)
 800963c:	4293      	cmp	r3, r2
 800963e:	d028      	beq.n	8009692 <TIM_CCxChannelCmd+0x76>
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	4a31      	ldr	r2, [pc, #196]	; (8009708 <TIM_CCxChannelCmd+0xec>)
 8009644:	4293      	cmp	r3, r2
 8009646:	d024      	beq.n	8009692 <TIM_CCxChannelCmd+0x76>
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	4a30      	ldr	r2, [pc, #192]	; (800970c <TIM_CCxChannelCmd+0xf0>)
 800964c:	4293      	cmp	r3, r2
 800964e:	d020      	beq.n	8009692 <TIM_CCxChannelCmd+0x76>
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	4a2f      	ldr	r2, [pc, #188]	; (8009710 <TIM_CCxChannelCmd+0xf4>)
 8009654:	4293      	cmp	r3, r2
 8009656:	d01c      	beq.n	8009692 <TIM_CCxChannelCmd+0x76>
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	4a2e      	ldr	r2, [pc, #184]	; (8009714 <TIM_CCxChannelCmd+0xf8>)
 800965c:	4293      	cmp	r3, r2
 800965e:	d018      	beq.n	8009692 <TIM_CCxChannelCmd+0x76>
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	4a2d      	ldr	r2, [pc, #180]	; (8009718 <TIM_CCxChannelCmd+0xfc>)
 8009664:	4293      	cmp	r3, r2
 8009666:	d014      	beq.n	8009692 <TIM_CCxChannelCmd+0x76>
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	4a2c      	ldr	r2, [pc, #176]	; (800971c <TIM_CCxChannelCmd+0x100>)
 800966c:	4293      	cmp	r3, r2
 800966e:	d010      	beq.n	8009692 <TIM_CCxChannelCmd+0x76>
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	4a2b      	ldr	r2, [pc, #172]	; (8009720 <TIM_CCxChannelCmd+0x104>)
 8009674:	4293      	cmp	r3, r2
 8009676:	d00c      	beq.n	8009692 <TIM_CCxChannelCmd+0x76>
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	4a2a      	ldr	r2, [pc, #168]	; (8009724 <TIM_CCxChannelCmd+0x108>)
 800967c:	4293      	cmp	r3, r2
 800967e:	d008      	beq.n	8009692 <TIM_CCxChannelCmd+0x76>
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	4a29      	ldr	r2, [pc, #164]	; (8009728 <TIM_CCxChannelCmd+0x10c>)
 8009684:	4293      	cmp	r3, r2
 8009686:	d004      	beq.n	8009692 <TIM_CCxChannelCmd+0x76>
 8009688:	f641 61a1 	movw	r1, #7841	; 0x1ea1
 800968c:	4827      	ldr	r0, [pc, #156]	; (800972c <TIM_CCxChannelCmd+0x110>)
 800968e:	f7f9 fa10 	bl	8002ab2 <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 8009692:	68bb      	ldr	r3, [r7, #8]
 8009694:	2b00      	cmp	r3, #0
 8009696:	d016      	beq.n	80096c6 <TIM_CCxChannelCmd+0xaa>
 8009698:	68bb      	ldr	r3, [r7, #8]
 800969a:	2b04      	cmp	r3, #4
 800969c:	d013      	beq.n	80096c6 <TIM_CCxChannelCmd+0xaa>
 800969e:	68bb      	ldr	r3, [r7, #8]
 80096a0:	2b08      	cmp	r3, #8
 80096a2:	d010      	beq.n	80096c6 <TIM_CCxChannelCmd+0xaa>
 80096a4:	68bb      	ldr	r3, [r7, #8]
 80096a6:	2b0c      	cmp	r3, #12
 80096a8:	d00d      	beq.n	80096c6 <TIM_CCxChannelCmd+0xaa>
 80096aa:	68bb      	ldr	r3, [r7, #8]
 80096ac:	2b10      	cmp	r3, #16
 80096ae:	d00a      	beq.n	80096c6 <TIM_CCxChannelCmd+0xaa>
 80096b0:	68bb      	ldr	r3, [r7, #8]
 80096b2:	2b14      	cmp	r3, #20
 80096b4:	d007      	beq.n	80096c6 <TIM_CCxChannelCmd+0xaa>
 80096b6:	68bb      	ldr	r3, [r7, #8]
 80096b8:	2b3c      	cmp	r3, #60	; 0x3c
 80096ba:	d004      	beq.n	80096c6 <TIM_CCxChannelCmd+0xaa>
 80096bc:	f641 61a2 	movw	r1, #7842	; 0x1ea2
 80096c0:	481a      	ldr	r0, [pc, #104]	; (800972c <TIM_CCxChannelCmd+0x110>)
 80096c2:	f7f9 f9f6 	bl	8002ab2 <assert_failed>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80096c6:	68bb      	ldr	r3, [r7, #8]
 80096c8:	f003 031f 	and.w	r3, r3, #31
 80096cc:	2201      	movs	r2, #1
 80096ce:	fa02 f303 	lsl.w	r3, r2, r3
 80096d2:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	6a1a      	ldr	r2, [r3, #32]
 80096d8:	697b      	ldr	r3, [r7, #20]
 80096da:	43db      	mvns	r3, r3
 80096dc:	401a      	ands	r2, r3
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	6a1a      	ldr	r2, [r3, #32]
 80096e6:	68bb      	ldr	r3, [r7, #8]
 80096e8:	f003 031f 	and.w	r3, r3, #31
 80096ec:	6879      	ldr	r1, [r7, #4]
 80096ee:	fa01 f303 	lsl.w	r3, r1, r3
 80096f2:	431a      	orrs	r2, r3
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	621a      	str	r2, [r3, #32]
}
 80096f8:	bf00      	nop
 80096fa:	3718      	adds	r7, #24
 80096fc:	46bd      	mov	sp, r7
 80096fe:	bd80      	pop	{r7, pc}
 8009700:	40010000 	.word	0x40010000
 8009704:	40000400 	.word	0x40000400
 8009708:	40000800 	.word	0x40000800
 800970c:	40000c00 	.word	0x40000c00
 8009710:	40010400 	.word	0x40010400
 8009714:	40014000 	.word	0x40014000
 8009718:	40014400 	.word	0x40014400
 800971c:	40014800 	.word	0x40014800
 8009720:	40001800 	.word	0x40001800
 8009724:	40001c00 	.word	0x40001c00
 8009728:	40002000 	.word	0x40002000
 800972c:	08016814 	.word	0x08016814

08009730 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009730:	b580      	push	{r7, lr}
 8009732:	b084      	sub	sp, #16
 8009734:	af00      	add	r7, sp, #0
 8009736:	6078      	str	r0, [r7, #4]
 8009738:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	4a32      	ldr	r2, [pc, #200]	; (8009808 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8009740:	4293      	cmp	r3, r2
 8009742:	d027      	beq.n	8009794 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800974c:	d022      	beq.n	8009794 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	4a2e      	ldr	r2, [pc, #184]	; (800980c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009754:	4293      	cmp	r3, r2
 8009756:	d01d      	beq.n	8009794 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	4a2c      	ldr	r2, [pc, #176]	; (8009810 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800975e:	4293      	cmp	r3, r2
 8009760:	d018      	beq.n	8009794 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	4a2b      	ldr	r2, [pc, #172]	; (8009814 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8009768:	4293      	cmp	r3, r2
 800976a:	d013      	beq.n	8009794 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	4a29      	ldr	r2, [pc, #164]	; (8009818 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009772:	4293      	cmp	r3, r2
 8009774:	d00e      	beq.n	8009794 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	4a28      	ldr	r2, [pc, #160]	; (800981c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800977c:	4293      	cmp	r3, r2
 800977e:	d009      	beq.n	8009794 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	4a26      	ldr	r2, [pc, #152]	; (8009820 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009786:	4293      	cmp	r3, r2
 8009788:	d004      	beq.n	8009794 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800978a:	f240 71b6 	movw	r1, #1974	; 0x7b6
 800978e:	4825      	ldr	r0, [pc, #148]	; (8009824 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009790:	f7f9 f98f 	bl	8002ab2 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8009794:	683b      	ldr	r3, [r7, #0]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	2b00      	cmp	r3, #0
 800979a:	d020      	beq.n	80097de <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800979c:	683b      	ldr	r3, [r7, #0]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	2b10      	cmp	r3, #16
 80097a2:	d01c      	beq.n	80097de <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80097a4:	683b      	ldr	r3, [r7, #0]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	2b20      	cmp	r3, #32
 80097aa:	d018      	beq.n	80097de <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80097ac:	683b      	ldr	r3, [r7, #0]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	2b30      	cmp	r3, #48	; 0x30
 80097b2:	d014      	beq.n	80097de <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80097b4:	683b      	ldr	r3, [r7, #0]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	2b40      	cmp	r3, #64	; 0x40
 80097ba:	d010      	beq.n	80097de <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80097bc:	683b      	ldr	r3, [r7, #0]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	2b50      	cmp	r3, #80	; 0x50
 80097c2:	d00c      	beq.n	80097de <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80097c4:	683b      	ldr	r3, [r7, #0]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	2b60      	cmp	r3, #96	; 0x60
 80097ca:	d008      	beq.n	80097de <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80097cc:	683b      	ldr	r3, [r7, #0]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	2b70      	cmp	r3, #112	; 0x70
 80097d2:	d004      	beq.n	80097de <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80097d4:	f240 71b7 	movw	r1, #1975	; 0x7b7
 80097d8:	4812      	ldr	r0, [pc, #72]	; (8009824 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80097da:	f7f9 f96a 	bl	8002ab2 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 80097de:	683b      	ldr	r3, [r7, #0]
 80097e0:	689b      	ldr	r3, [r3, #8]
 80097e2:	2b80      	cmp	r3, #128	; 0x80
 80097e4:	d008      	beq.n	80097f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80097e6:	683b      	ldr	r3, [r7, #0]
 80097e8:	689b      	ldr	r3, [r3, #8]
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d004      	beq.n	80097f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80097ee:	f44f 61f7 	mov.w	r1, #1976	; 0x7b8
 80097f2:	480c      	ldr	r0, [pc, #48]	; (8009824 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80097f4:	f7f9 f95d 	bl	8002ab2 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80097fe:	2b01      	cmp	r3, #1
 8009800:	d112      	bne.n	8009828 <HAL_TIMEx_MasterConfigSynchronization+0xf8>
 8009802:	2302      	movs	r3, #2
 8009804:	e0d7      	b.n	80099b6 <HAL_TIMEx_MasterConfigSynchronization+0x286>
 8009806:	bf00      	nop
 8009808:	40010000 	.word	0x40010000
 800980c:	40000400 	.word	0x40000400
 8009810:	40000800 	.word	0x40000800
 8009814:	40000c00 	.word	0x40000c00
 8009818:	40001000 	.word	0x40001000
 800981c:	40001400 	.word	0x40001400
 8009820:	40010400 	.word	0x40010400
 8009824:	0801684c 	.word	0x0801684c
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	2201      	movs	r2, #1
 800982c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	2202      	movs	r2, #2
 8009834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	685b      	ldr	r3, [r3, #4]
 800983e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	689b      	ldr	r3, [r3, #8]
 8009846:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	4a5c      	ldr	r2, [pc, #368]	; (80099c0 <HAL_TIMEx_MasterConfigSynchronization+0x290>)
 800984e:	4293      	cmp	r3, r2
 8009850:	d004      	beq.n	800985c <HAL_TIMEx_MasterConfigSynchronization+0x12c>
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	4a5b      	ldr	r2, [pc, #364]	; (80099c4 <HAL_TIMEx_MasterConfigSynchronization+0x294>)
 8009858:	4293      	cmp	r3, r2
 800985a:	d161      	bne.n	8009920 <HAL_TIMEx_MasterConfigSynchronization+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
 800985c:	683b      	ldr	r3, [r7, #0]
 800985e:	685b      	ldr	r3, [r3, #4]
 8009860:	2b00      	cmp	r3, #0
 8009862:	d054      	beq.n	800990e <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8009864:	683b      	ldr	r3, [r7, #0]
 8009866:	685b      	ldr	r3, [r3, #4]
 8009868:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800986c:	d04f      	beq.n	800990e <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 800986e:	683b      	ldr	r3, [r7, #0]
 8009870:	685b      	ldr	r3, [r3, #4]
 8009872:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009876:	d04a      	beq.n	800990e <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8009878:	683b      	ldr	r3, [r7, #0]
 800987a:	685b      	ldr	r3, [r3, #4]
 800987c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009880:	d045      	beq.n	800990e <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8009882:	683b      	ldr	r3, [r7, #0]
 8009884:	685b      	ldr	r3, [r3, #4]
 8009886:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800988a:	d040      	beq.n	800990e <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 800988c:	683b      	ldr	r3, [r7, #0]
 800988e:	685b      	ldr	r3, [r3, #4]
 8009890:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 8009894:	d03b      	beq.n	800990e <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8009896:	683b      	ldr	r3, [r7, #0]
 8009898:	685b      	ldr	r3, [r3, #4]
 800989a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800989e:	d036      	beq.n	800990e <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 80098a0:	683b      	ldr	r3, [r7, #0]
 80098a2:	685b      	ldr	r3, [r3, #4]
 80098a4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80098a8:	d031      	beq.n	800990e <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 80098aa:	683b      	ldr	r3, [r7, #0]
 80098ac:	685b      	ldr	r3, [r3, #4]
 80098ae:	f5b3 0fe0 	cmp.w	r3, #7340032	; 0x700000
 80098b2:	d02c      	beq.n	800990e <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 80098b4:	683b      	ldr	r3, [r7, #0]
 80098b6:	685b      	ldr	r3, [r3, #4]
 80098b8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80098bc:	d027      	beq.n	800990e <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 80098be:	683b      	ldr	r3, [r7, #0]
 80098c0:	685b      	ldr	r3, [r3, #4]
 80098c2:	f5b3 0f10 	cmp.w	r3, #9437184	; 0x900000
 80098c6:	d022      	beq.n	800990e <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 80098c8:	683b      	ldr	r3, [r7, #0]
 80098ca:	685b      	ldr	r3, [r3, #4]
 80098cc:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80098d0:	d01d      	beq.n	800990e <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 80098d2:	683b      	ldr	r3, [r7, #0]
 80098d4:	685b      	ldr	r3, [r3, #4]
 80098d6:	f5b3 0f30 	cmp.w	r3, #11534336	; 0xb00000
 80098da:	d018      	beq.n	800990e <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 80098dc:	683b      	ldr	r3, [r7, #0]
 80098de:	685b      	ldr	r3, [r3, #4]
 80098e0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80098e4:	d013      	beq.n	800990e <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 80098e6:	683b      	ldr	r3, [r7, #0]
 80098e8:	685b      	ldr	r3, [r3, #4]
 80098ea:	f5b3 0f50 	cmp.w	r3, #13631488	; 0xd00000
 80098ee:	d00e      	beq.n	800990e <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 80098f0:	683b      	ldr	r3, [r7, #0]
 80098f2:	685b      	ldr	r3, [r3, #4]
 80098f4:	f5b3 0f60 	cmp.w	r3, #14680064	; 0xe00000
 80098f8:	d009      	beq.n	800990e <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 80098fa:	683b      	ldr	r3, [r7, #0]
 80098fc:	685b      	ldr	r3, [r3, #4]
 80098fe:	f5b3 0f70 	cmp.w	r3, #15728640	; 0xf00000
 8009902:	d004      	beq.n	800990e <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8009904:	f240 71ca 	movw	r1, #1994	; 0x7ca
 8009908:	482f      	ldr	r0, [pc, #188]	; (80099c8 <HAL_TIMEx_MasterConfigSynchronization+0x298>)
 800990a:	f7f9 f8d2 	bl	8002ab2 <assert_failed>

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009914:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009916:	683b      	ldr	r3, [r7, #0]
 8009918:	685b      	ldr	r3, [r3, #4]
 800991a:	68fa      	ldr	r2, [r7, #12]
 800991c:	4313      	orrs	r3, r2
 800991e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009926:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009928:	683b      	ldr	r3, [r7, #0]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	68fa      	ldr	r2, [r7, #12]
 800992e:	4313      	orrs	r3, r2
 8009930:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	68fa      	ldr	r2, [r7, #12]
 8009938:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	4a20      	ldr	r2, [pc, #128]	; (80099c0 <HAL_TIMEx_MasterConfigSynchronization+0x290>)
 8009940:	4293      	cmp	r3, r2
 8009942:	d022      	beq.n	800998a <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800994c:	d01d      	beq.n	800998a <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	4a1e      	ldr	r2, [pc, #120]	; (80099cc <HAL_TIMEx_MasterConfigSynchronization+0x29c>)
 8009954:	4293      	cmp	r3, r2
 8009956:	d018      	beq.n	800998a <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	4a1c      	ldr	r2, [pc, #112]	; (80099d0 <HAL_TIMEx_MasterConfigSynchronization+0x2a0>)
 800995e:	4293      	cmp	r3, r2
 8009960:	d013      	beq.n	800998a <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	4a1b      	ldr	r2, [pc, #108]	; (80099d4 <HAL_TIMEx_MasterConfigSynchronization+0x2a4>)
 8009968:	4293      	cmp	r3, r2
 800996a:	d00e      	beq.n	800998a <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	4a14      	ldr	r2, [pc, #80]	; (80099c4 <HAL_TIMEx_MasterConfigSynchronization+0x294>)
 8009972:	4293      	cmp	r3, r2
 8009974:	d009      	beq.n	800998a <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	4a17      	ldr	r2, [pc, #92]	; (80099d8 <HAL_TIMEx_MasterConfigSynchronization+0x2a8>)
 800997c:	4293      	cmp	r3, r2
 800997e:	d004      	beq.n	800998a <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	4a15      	ldr	r2, [pc, #84]	; (80099dc <HAL_TIMEx_MasterConfigSynchronization+0x2ac>)
 8009986:	4293      	cmp	r3, r2
 8009988:	d10c      	bne.n	80099a4 <HAL_TIMEx_MasterConfigSynchronization+0x274>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800998a:	68bb      	ldr	r3, [r7, #8]
 800998c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009990:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009992:	683b      	ldr	r3, [r7, #0]
 8009994:	689b      	ldr	r3, [r3, #8]
 8009996:	68ba      	ldr	r2, [r7, #8]
 8009998:	4313      	orrs	r3, r2
 800999a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	68ba      	ldr	r2, [r7, #8]
 80099a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	2201      	movs	r2, #1
 80099a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	2200      	movs	r2, #0
 80099b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80099b4:	2300      	movs	r3, #0
}
 80099b6:	4618      	mov	r0, r3
 80099b8:	3710      	adds	r7, #16
 80099ba:	46bd      	mov	sp, r7
 80099bc:	bd80      	pop	{r7, pc}
 80099be:	bf00      	nop
 80099c0:	40010000 	.word	0x40010000
 80099c4:	40010400 	.word	0x40010400
 80099c8:	0801684c 	.word	0x0801684c
 80099cc:	40000400 	.word	0x40000400
 80099d0:	40000800 	.word	0x40000800
 80099d4:	40000c00 	.word	0x40000c00
 80099d8:	40014000 	.word	0x40014000
 80099dc:	40001800 	.word	0x40001800

080099e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80099e0:	b480      	push	{r7}
 80099e2:	b083      	sub	sp, #12
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80099e8:	bf00      	nop
 80099ea:	370c      	adds	r7, #12
 80099ec:	46bd      	mov	sp, r7
 80099ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f2:	4770      	bx	lr

080099f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80099f4:	b480      	push	{r7}
 80099f6:	b083      	sub	sp, #12
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80099fc:	bf00      	nop
 80099fe:	370c      	adds	r7, #12
 8009a00:	46bd      	mov	sp, r7
 8009a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a06:	4770      	bx	lr

08009a08 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009a08:	b480      	push	{r7}
 8009a0a:	b083      	sub	sp, #12
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009a10:	bf00      	nop
 8009a12:	370c      	adds	r7, #12
 8009a14:	46bd      	mov	sp, r7
 8009a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a1a:	4770      	bx	lr

08009a1c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009a1c:	b580      	push	{r7, lr}
 8009a1e:	b082      	sub	sp, #8
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d101      	bne.n	8009a2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009a2a:	2301      	movs	r3, #1
 8009a2c:	e09f      	b.n	8009b6e <HAL_UART_Init+0x152>
  }

  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	699b      	ldr	r3, [r3, #24]
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d02d      	beq.n	8009a92 <HAL_UART_Init+0x76>
  {
    /* Check the parameters */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	4a4f      	ldr	r2, [pc, #316]	; (8009b78 <HAL_UART_Init+0x15c>)
 8009a3c:	4293      	cmp	r3, r2
 8009a3e:	d055      	beq.n	8009aec <HAL_UART_Init+0xd0>
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	4a4d      	ldr	r2, [pc, #308]	; (8009b7c <HAL_UART_Init+0x160>)
 8009a46:	4293      	cmp	r3, r2
 8009a48:	d050      	beq.n	8009aec <HAL_UART_Init+0xd0>
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	4a4c      	ldr	r2, [pc, #304]	; (8009b80 <HAL_UART_Init+0x164>)
 8009a50:	4293      	cmp	r3, r2
 8009a52:	d04b      	beq.n	8009aec <HAL_UART_Init+0xd0>
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	4a4a      	ldr	r2, [pc, #296]	; (8009b84 <HAL_UART_Init+0x168>)
 8009a5a:	4293      	cmp	r3, r2
 8009a5c:	d046      	beq.n	8009aec <HAL_UART_Init+0xd0>
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	4a49      	ldr	r2, [pc, #292]	; (8009b88 <HAL_UART_Init+0x16c>)
 8009a64:	4293      	cmp	r3, r2
 8009a66:	d041      	beq.n	8009aec <HAL_UART_Init+0xd0>
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	4a47      	ldr	r2, [pc, #284]	; (8009b8c <HAL_UART_Init+0x170>)
 8009a6e:	4293      	cmp	r3, r2
 8009a70:	d03c      	beq.n	8009aec <HAL_UART_Init+0xd0>
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	4a46      	ldr	r2, [pc, #280]	; (8009b90 <HAL_UART_Init+0x174>)
 8009a78:	4293      	cmp	r3, r2
 8009a7a:	d037      	beq.n	8009aec <HAL_UART_Init+0xd0>
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	4a44      	ldr	r2, [pc, #272]	; (8009b94 <HAL_UART_Init+0x178>)
 8009a82:	4293      	cmp	r3, r2
 8009a84:	d032      	beq.n	8009aec <HAL_UART_Init+0xd0>
 8009a86:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8009a8a:	4843      	ldr	r0, [pc, #268]	; (8009b98 <HAL_UART_Init+0x17c>)
 8009a8c:	f7f9 f811 	bl	8002ab2 <assert_failed>
 8009a90:	e02c      	b.n	8009aec <HAL_UART_Init+0xd0>
  }
  else
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	4a38      	ldr	r2, [pc, #224]	; (8009b78 <HAL_UART_Init+0x15c>)
 8009a98:	4293      	cmp	r3, r2
 8009a9a:	d027      	beq.n	8009aec <HAL_UART_Init+0xd0>
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	4a36      	ldr	r2, [pc, #216]	; (8009b7c <HAL_UART_Init+0x160>)
 8009aa2:	4293      	cmp	r3, r2
 8009aa4:	d022      	beq.n	8009aec <HAL_UART_Init+0xd0>
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	4a35      	ldr	r2, [pc, #212]	; (8009b80 <HAL_UART_Init+0x164>)
 8009aac:	4293      	cmp	r3, r2
 8009aae:	d01d      	beq.n	8009aec <HAL_UART_Init+0xd0>
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	4a33      	ldr	r2, [pc, #204]	; (8009b84 <HAL_UART_Init+0x168>)
 8009ab6:	4293      	cmp	r3, r2
 8009ab8:	d018      	beq.n	8009aec <HAL_UART_Init+0xd0>
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	4a32      	ldr	r2, [pc, #200]	; (8009b88 <HAL_UART_Init+0x16c>)
 8009ac0:	4293      	cmp	r3, r2
 8009ac2:	d013      	beq.n	8009aec <HAL_UART_Init+0xd0>
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	4a30      	ldr	r2, [pc, #192]	; (8009b8c <HAL_UART_Init+0x170>)
 8009aca:	4293      	cmp	r3, r2
 8009acc:	d00e      	beq.n	8009aec <HAL_UART_Init+0xd0>
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	4a2f      	ldr	r2, [pc, #188]	; (8009b90 <HAL_UART_Init+0x174>)
 8009ad4:	4293      	cmp	r3, r2
 8009ad6:	d009      	beq.n	8009aec <HAL_UART_Init+0xd0>
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	4a2d      	ldr	r2, [pc, #180]	; (8009b94 <HAL_UART_Init+0x178>)
 8009ade:	4293      	cmp	r3, r2
 8009ae0:	d004      	beq.n	8009aec <HAL_UART_Init+0xd0>
 8009ae2:	f240 1131 	movw	r1, #305	; 0x131
 8009ae6:	482c      	ldr	r0, [pc, #176]	; (8009b98 <HAL_UART_Init+0x17c>)
 8009ae8:	f7f8 ffe3 	bl	8002ab2 <assert_failed>
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d106      	bne.n	8009b02 <HAL_UART_Init+0xe6>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	2200      	movs	r2, #0
 8009af8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009afc:	6878      	ldr	r0, [r7, #4]
 8009afe:	f7f9 fbd5 	bl	80032ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	2224      	movs	r2, #36	; 0x24
 8009b06:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	681a      	ldr	r2, [r3, #0]
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	f022 0201 	bic.w	r2, r2, #1
 8009b16:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009b18:	6878      	ldr	r0, [r7, #4]
 8009b1a:	f000 fc79 	bl	800a410 <UART_SetConfig>
 8009b1e:	4603      	mov	r3, r0
 8009b20:	2b01      	cmp	r3, #1
 8009b22:	d101      	bne.n	8009b28 <HAL_UART_Init+0x10c>
  {
    return HAL_ERROR;
 8009b24:	2301      	movs	r3, #1
 8009b26:	e022      	b.n	8009b6e <HAL_UART_Init+0x152>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d002      	beq.n	8009b36 <HAL_UART_Init+0x11a>
  {
    UART_AdvFeatureConfig(huart);
 8009b30:	6878      	ldr	r0, [r7, #4]
 8009b32:	f000 ff63 	bl	800a9fc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	685a      	ldr	r2, [r3, #4]
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009b44:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	689a      	ldr	r2, [r3, #8]
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009b54:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	681a      	ldr	r2, [r3, #0]
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	f042 0201 	orr.w	r2, r2, #1
 8009b64:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009b66:	6878      	ldr	r0, [r7, #4]
 8009b68:	f001 f8a0 	bl	800acac <UART_CheckIdleState>
 8009b6c:	4603      	mov	r3, r0
}
 8009b6e:	4618      	mov	r0, r3
 8009b70:	3708      	adds	r7, #8
 8009b72:	46bd      	mov	sp, r7
 8009b74:	bd80      	pop	{r7, pc}
 8009b76:	bf00      	nop
 8009b78:	40011000 	.word	0x40011000
 8009b7c:	40004400 	.word	0x40004400
 8009b80:	40004800 	.word	0x40004800
 8009b84:	40004c00 	.word	0x40004c00
 8009b88:	40005000 	.word	0x40005000
 8009b8c:	40011400 	.word	0x40011400
 8009b90:	40007800 	.word	0x40007800
 8009b94:	40007c00 	.word	0x40007c00
 8009b98:	08016888 	.word	0x08016888

08009b9c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009b9c:	b580      	push	{r7, lr}
 8009b9e:	b08a      	sub	sp, #40	; 0x28
 8009ba0:	af02      	add	r7, sp, #8
 8009ba2:	60f8      	str	r0, [r7, #12]
 8009ba4:	60b9      	str	r1, [r7, #8]
 8009ba6:	603b      	str	r3, [r7, #0]
 8009ba8:	4613      	mov	r3, r2
 8009baa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009bb0:	2b20      	cmp	r3, #32
 8009bb2:	d171      	bne.n	8009c98 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8009bb4:	68bb      	ldr	r3, [r7, #8]
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d002      	beq.n	8009bc0 <HAL_UART_Transmit+0x24>
 8009bba:	88fb      	ldrh	r3, [r7, #6]
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d101      	bne.n	8009bc4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8009bc0:	2301      	movs	r3, #1
 8009bc2:	e06a      	b.n	8009c9a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	2200      	movs	r2, #0
 8009bc8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	2221      	movs	r2, #33	; 0x21
 8009bd0:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009bd2:	f7f9 fda1 	bl	8003718 <HAL_GetTick>
 8009bd6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	88fa      	ldrh	r2, [r7, #6]
 8009bdc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	88fa      	ldrh	r2, [r7, #6]
 8009be4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	689b      	ldr	r3, [r3, #8]
 8009bec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009bf0:	d108      	bne.n	8009c04 <HAL_UART_Transmit+0x68>
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	691b      	ldr	r3, [r3, #16]
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d104      	bne.n	8009c04 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009bfe:	68bb      	ldr	r3, [r7, #8]
 8009c00:	61bb      	str	r3, [r7, #24]
 8009c02:	e003      	b.n	8009c0c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8009c04:	68bb      	ldr	r3, [r7, #8]
 8009c06:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009c08:	2300      	movs	r3, #0
 8009c0a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009c0c:	e02c      	b.n	8009c68 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009c0e:	683b      	ldr	r3, [r7, #0]
 8009c10:	9300      	str	r3, [sp, #0]
 8009c12:	697b      	ldr	r3, [r7, #20]
 8009c14:	2200      	movs	r2, #0
 8009c16:	2180      	movs	r1, #128	; 0x80
 8009c18:	68f8      	ldr	r0, [r7, #12]
 8009c1a:	f001 f87e 	bl	800ad1a <UART_WaitOnFlagUntilTimeout>
 8009c1e:	4603      	mov	r3, r0
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d001      	beq.n	8009c28 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8009c24:	2303      	movs	r3, #3
 8009c26:	e038      	b.n	8009c9a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8009c28:	69fb      	ldr	r3, [r7, #28]
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d10b      	bne.n	8009c46 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009c2e:	69bb      	ldr	r3, [r7, #24]
 8009c30:	881b      	ldrh	r3, [r3, #0]
 8009c32:	461a      	mov	r2, r3
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009c3c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8009c3e:	69bb      	ldr	r3, [r7, #24]
 8009c40:	3302      	adds	r3, #2
 8009c42:	61bb      	str	r3, [r7, #24]
 8009c44:	e007      	b.n	8009c56 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009c46:	69fb      	ldr	r3, [r7, #28]
 8009c48:	781a      	ldrb	r2, [r3, #0]
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8009c50:	69fb      	ldr	r3, [r7, #28]
 8009c52:	3301      	adds	r3, #1
 8009c54:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009c5c:	b29b      	uxth	r3, r3
 8009c5e:	3b01      	subs	r3, #1
 8009c60:	b29a      	uxth	r2, r3
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009c6e:	b29b      	uxth	r3, r3
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d1cc      	bne.n	8009c0e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009c74:	683b      	ldr	r3, [r7, #0]
 8009c76:	9300      	str	r3, [sp, #0]
 8009c78:	697b      	ldr	r3, [r7, #20]
 8009c7a:	2200      	movs	r2, #0
 8009c7c:	2140      	movs	r1, #64	; 0x40
 8009c7e:	68f8      	ldr	r0, [r7, #12]
 8009c80:	f001 f84b 	bl	800ad1a <UART_WaitOnFlagUntilTimeout>
 8009c84:	4603      	mov	r3, r0
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d001      	beq.n	8009c8e <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8009c8a:	2303      	movs	r3, #3
 8009c8c:	e005      	b.n	8009c9a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	2220      	movs	r2, #32
 8009c92:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8009c94:	2300      	movs	r3, #0
 8009c96:	e000      	b.n	8009c9a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8009c98:	2302      	movs	r3, #2
  }
}
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	3720      	adds	r7, #32
 8009c9e:	46bd      	mov	sp, r7
 8009ca0:	bd80      	pop	{r7, pc}

08009ca2 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009ca2:	b580      	push	{r7, lr}
 8009ca4:	b08a      	sub	sp, #40	; 0x28
 8009ca6:	af02      	add	r7, sp, #8
 8009ca8:	60f8      	str	r0, [r7, #12]
 8009caa:	60b9      	str	r1, [r7, #8]
 8009cac:	603b      	str	r3, [r7, #0]
 8009cae:	4613      	mov	r3, r2
 8009cb0:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009cb8:	2b20      	cmp	r3, #32
 8009cba:	f040 80b1 	bne.w	8009e20 <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 8009cbe:	68bb      	ldr	r3, [r7, #8]
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d002      	beq.n	8009cca <HAL_UART_Receive+0x28>
 8009cc4:	88fb      	ldrh	r3, [r7, #6]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d101      	bne.n	8009cce <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8009cca:	2301      	movs	r3, #1
 8009ccc:	e0a9      	b.n	8009e22 <HAL_UART_Receive+0x180>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	2200      	movs	r2, #0
 8009cd2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	2222      	movs	r2, #34	; 0x22
 8009cda:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	2200      	movs	r2, #0
 8009ce2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009ce4:	f7f9 fd18 	bl	8003718 <HAL_GetTick>
 8009ce8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	88fa      	ldrh	r2, [r7, #6]
 8009cee:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	88fa      	ldrh	r2, [r7, #6]
 8009cf6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	689b      	ldr	r3, [r3, #8]
 8009cfe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009d02:	d10e      	bne.n	8009d22 <HAL_UART_Receive+0x80>
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	691b      	ldr	r3, [r3, #16]
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d105      	bne.n	8009d18 <HAL_UART_Receive+0x76>
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8009d12:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009d16:	e02d      	b.n	8009d74 <HAL_UART_Receive+0xd2>
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	22ff      	movs	r2, #255	; 0xff
 8009d1c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009d20:	e028      	b.n	8009d74 <HAL_UART_Receive+0xd2>
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	689b      	ldr	r3, [r3, #8]
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d10d      	bne.n	8009d46 <HAL_UART_Receive+0xa4>
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	691b      	ldr	r3, [r3, #16]
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d104      	bne.n	8009d3c <HAL_UART_Receive+0x9a>
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	22ff      	movs	r2, #255	; 0xff
 8009d36:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009d3a:	e01b      	b.n	8009d74 <HAL_UART_Receive+0xd2>
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	227f      	movs	r2, #127	; 0x7f
 8009d40:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009d44:	e016      	b.n	8009d74 <HAL_UART_Receive+0xd2>
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	689b      	ldr	r3, [r3, #8]
 8009d4a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009d4e:	d10d      	bne.n	8009d6c <HAL_UART_Receive+0xca>
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	691b      	ldr	r3, [r3, #16]
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d104      	bne.n	8009d62 <HAL_UART_Receive+0xc0>
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	227f      	movs	r2, #127	; 0x7f
 8009d5c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009d60:	e008      	b.n	8009d74 <HAL_UART_Receive+0xd2>
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	223f      	movs	r2, #63	; 0x3f
 8009d66:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009d6a:	e003      	b.n	8009d74 <HAL_UART_Receive+0xd2>
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	2200      	movs	r2, #0
 8009d70:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009d7a:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	689b      	ldr	r3, [r3, #8]
 8009d80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009d84:	d108      	bne.n	8009d98 <HAL_UART_Receive+0xf6>
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	691b      	ldr	r3, [r3, #16]
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d104      	bne.n	8009d98 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8009d8e:	2300      	movs	r3, #0
 8009d90:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009d92:	68bb      	ldr	r3, [r7, #8]
 8009d94:	61bb      	str	r3, [r7, #24]
 8009d96:	e003      	b.n	8009da0 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8009d98:	68bb      	ldr	r3, [r7, #8]
 8009d9a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009d9c:	2300      	movs	r3, #0
 8009d9e:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8009da0:	e032      	b.n	8009e08 <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8009da2:	683b      	ldr	r3, [r7, #0]
 8009da4:	9300      	str	r3, [sp, #0]
 8009da6:	697b      	ldr	r3, [r7, #20]
 8009da8:	2200      	movs	r2, #0
 8009daa:	2120      	movs	r1, #32
 8009dac:	68f8      	ldr	r0, [r7, #12]
 8009dae:	f000 ffb4 	bl	800ad1a <UART_WaitOnFlagUntilTimeout>
 8009db2:	4603      	mov	r3, r0
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d001      	beq.n	8009dbc <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 8009db8:	2303      	movs	r3, #3
 8009dba:	e032      	b.n	8009e22 <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 8009dbc:	69fb      	ldr	r3, [r7, #28]
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d10c      	bne.n	8009ddc <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dc8:	b29a      	uxth	r2, r3
 8009dca:	8a7b      	ldrh	r3, [r7, #18]
 8009dcc:	4013      	ands	r3, r2
 8009dce:	b29a      	uxth	r2, r3
 8009dd0:	69bb      	ldr	r3, [r7, #24]
 8009dd2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8009dd4:	69bb      	ldr	r3, [r7, #24]
 8009dd6:	3302      	adds	r3, #2
 8009dd8:	61bb      	str	r3, [r7, #24]
 8009dda:	e00c      	b.n	8009df6 <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009de2:	b2da      	uxtb	r2, r3
 8009de4:	8a7b      	ldrh	r3, [r7, #18]
 8009de6:	b2db      	uxtb	r3, r3
 8009de8:	4013      	ands	r3, r2
 8009dea:	b2da      	uxtb	r2, r3
 8009dec:	69fb      	ldr	r3, [r7, #28]
 8009dee:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8009df0:	69fb      	ldr	r3, [r7, #28]
 8009df2:	3301      	adds	r3, #1
 8009df4:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009dfc:	b29b      	uxth	r3, r3
 8009dfe:	3b01      	subs	r3, #1
 8009e00:	b29a      	uxth	r2, r3
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009e0e:	b29b      	uxth	r3, r3
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d1c6      	bne.n	8009da2 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	2220      	movs	r2, #32
 8009e18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8009e1c:	2300      	movs	r3, #0
 8009e1e:	e000      	b.n	8009e22 <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 8009e20:	2302      	movs	r3, #2
  }
}
 8009e22:	4618      	mov	r0, r3
 8009e24:	3720      	adds	r7, #32
 8009e26:	46bd      	mov	sp, r7
 8009e28:	bd80      	pop	{r7, pc}
	...

08009e2c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009e2c:	b580      	push	{r7, lr}
 8009e2e:	b0ba      	sub	sp, #232	; 0xe8
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	69db      	ldr	r3, [r3, #28]
 8009e3a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	689b      	ldr	r3, [r3, #8]
 8009e4e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009e52:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8009e56:	f640 030f 	movw	r3, #2063	; 0x80f
 8009e5a:	4013      	ands	r3, r2
 8009e5c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8009e60:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d115      	bne.n	8009e94 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8009e68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e6c:	f003 0320 	and.w	r3, r3, #32
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d00f      	beq.n	8009e94 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009e74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009e78:	f003 0320 	and.w	r3, r3, #32
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d009      	beq.n	8009e94 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	f000 8297 	beq.w	800a3b8 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009e8e:	6878      	ldr	r0, [r7, #4]
 8009e90:	4798      	blx	r3
      }
      return;
 8009e92:	e291      	b.n	800a3b8 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009e94:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	f000 8117 	beq.w	800a0cc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8009e9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009ea2:	f003 0301 	and.w	r3, r3, #1
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d106      	bne.n	8009eb8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8009eaa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8009eae:	4b85      	ldr	r3, [pc, #532]	; (800a0c4 <HAL_UART_IRQHandler+0x298>)
 8009eb0:	4013      	ands	r3, r2
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	f000 810a 	beq.w	800a0cc <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009eb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009ebc:	f003 0301 	and.w	r3, r3, #1
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d011      	beq.n	8009ee8 <HAL_UART_IRQHandler+0xbc>
 8009ec4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009ec8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d00b      	beq.n	8009ee8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	2201      	movs	r2, #1
 8009ed6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009ede:	f043 0201 	orr.w	r2, r3, #1
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009ee8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009eec:	f003 0302 	and.w	r3, r3, #2
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d011      	beq.n	8009f18 <HAL_UART_IRQHandler+0xec>
 8009ef4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009ef8:	f003 0301 	and.w	r3, r3, #1
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d00b      	beq.n	8009f18 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	2202      	movs	r2, #2
 8009f06:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009f0e:	f043 0204 	orr.w	r2, r3, #4
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009f18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009f1c:	f003 0304 	and.w	r3, r3, #4
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d011      	beq.n	8009f48 <HAL_UART_IRQHandler+0x11c>
 8009f24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009f28:	f003 0301 	and.w	r3, r3, #1
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d00b      	beq.n	8009f48 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	2204      	movs	r2, #4
 8009f36:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009f3e:	f043 0202 	orr.w	r2, r3, #2
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009f48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009f4c:	f003 0308 	and.w	r3, r3, #8
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d017      	beq.n	8009f84 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009f54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009f58:	f003 0320 	and.w	r3, r3, #32
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d105      	bne.n	8009f6c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8009f60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009f64:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d00b      	beq.n	8009f84 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	2208      	movs	r2, #8
 8009f72:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009f7a:	f043 0208 	orr.w	r2, r3, #8
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009f84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009f88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d012      	beq.n	8009fb6 <HAL_UART_IRQHandler+0x18a>
 8009f90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009f94:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d00c      	beq.n	8009fb6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009fa4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009fac:	f043 0220 	orr.w	r2, r3, #32
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	f000 81fd 	beq.w	800a3bc <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8009fc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009fc6:	f003 0320 	and.w	r3, r3, #32
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d00d      	beq.n	8009fea <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009fce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009fd2:	f003 0320 	and.w	r3, r3, #32
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d007      	beq.n	8009fea <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d003      	beq.n	8009fea <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009fe6:	6878      	ldr	r0, [r7, #4]
 8009fe8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009ff0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	689b      	ldr	r3, [r3, #8]
 8009ffa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ffe:	2b40      	cmp	r3, #64	; 0x40
 800a000:	d005      	beq.n	800a00e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a002:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a006:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d04f      	beq.n	800a0ae <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a00e:	6878      	ldr	r0, [r7, #4]
 800a010:	f000 ff49 	bl	800aea6 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	689b      	ldr	r3, [r3, #8]
 800a01a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a01e:	2b40      	cmp	r3, #64	; 0x40
 800a020:	d141      	bne.n	800a0a6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	3308      	adds	r3, #8
 800a028:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a02c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a030:	e853 3f00 	ldrex	r3, [r3]
 800a034:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800a038:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a03c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a040:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	3308      	adds	r3, #8
 800a04a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a04e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a052:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a056:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a05a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a05e:	e841 2300 	strex	r3, r2, [r1]
 800a062:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800a066:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d1d9      	bne.n	800a022 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a072:	2b00      	cmp	r3, #0
 800a074:	d013      	beq.n	800a09e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a07a:	4a13      	ldr	r2, [pc, #76]	; (800a0c8 <HAL_UART_IRQHandler+0x29c>)
 800a07c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a082:	4618      	mov	r0, r3
 800a084:	f7f9 fd28 	bl	8003ad8 <HAL_DMA_Abort_IT>
 800a088:	4603      	mov	r3, r0
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d017      	beq.n	800a0be <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a092:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a094:	687a      	ldr	r2, [r7, #4]
 800a096:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800a098:	4610      	mov	r0, r2
 800a09a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a09c:	e00f      	b.n	800a0be <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a09e:	6878      	ldr	r0, [r7, #4]
 800a0a0:	f000 f9a0 	bl	800a3e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a0a4:	e00b      	b.n	800a0be <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a0a6:	6878      	ldr	r0, [r7, #4]
 800a0a8:	f000 f99c 	bl	800a3e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a0ac:	e007      	b.n	800a0be <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a0ae:	6878      	ldr	r0, [r7, #4]
 800a0b0:	f000 f998 	bl	800a3e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	2200      	movs	r2, #0
 800a0b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 800a0bc:	e17e      	b.n	800a3bc <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a0be:	bf00      	nop
    return;
 800a0c0:	e17c      	b.n	800a3bc <HAL_UART_IRQHandler+0x590>
 800a0c2:	bf00      	nop
 800a0c4:	04000120 	.word	0x04000120
 800a0c8:	0800af6f 	.word	0x0800af6f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a0d0:	2b01      	cmp	r3, #1
 800a0d2:	f040 814c 	bne.w	800a36e <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a0d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a0da:	f003 0310 	and.w	r3, r3, #16
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	f000 8145 	beq.w	800a36e <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a0e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a0e8:	f003 0310 	and.w	r3, r3, #16
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	f000 813e 	beq.w	800a36e <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	2210      	movs	r2, #16
 800a0f8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	689b      	ldr	r3, [r3, #8]
 800a100:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a104:	2b40      	cmp	r3, #64	; 0x40
 800a106:	f040 80b6 	bne.w	800a276 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	685b      	ldr	r3, [r3, #4]
 800a112:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a116:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	f000 8150 	beq.w	800a3c0 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a126:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a12a:	429a      	cmp	r2, r3
 800a12c:	f080 8148 	bcs.w	800a3c0 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a136:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a13e:	69db      	ldr	r3, [r3, #28]
 800a140:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a144:	f000 8086 	beq.w	800a254 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a150:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a154:	e853 3f00 	ldrex	r3, [r3]
 800a158:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a15c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a160:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a164:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	461a      	mov	r2, r3
 800a16e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a172:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a176:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a17a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a17e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a182:	e841 2300 	strex	r3, r2, [r1]
 800a186:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a18a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d1da      	bne.n	800a148 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	3308      	adds	r3, #8
 800a198:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a19a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a19c:	e853 3f00 	ldrex	r3, [r3]
 800a1a0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a1a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a1a4:	f023 0301 	bic.w	r3, r3, #1
 800a1a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	3308      	adds	r3, #8
 800a1b2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a1b6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a1ba:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1bc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a1be:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a1c2:	e841 2300 	strex	r3, r2, [r1]
 800a1c6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a1c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d1e1      	bne.n	800a192 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	3308      	adds	r3, #8
 800a1d4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a1d8:	e853 3f00 	ldrex	r3, [r3]
 800a1dc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a1de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a1e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a1e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	3308      	adds	r3, #8
 800a1ee:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a1f2:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a1f4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1f6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a1f8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a1fa:	e841 2300 	strex	r3, r2, [r1]
 800a1fe:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a200:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a202:	2b00      	cmp	r3, #0
 800a204:	d1e3      	bne.n	800a1ce <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	2220      	movs	r2, #32
 800a20a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	2200      	movs	r2, #0
 800a212:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a21a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a21c:	e853 3f00 	ldrex	r3, [r3]
 800a220:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a222:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a224:	f023 0310 	bic.w	r3, r3, #16
 800a228:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	461a      	mov	r2, r3
 800a232:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a236:	65bb      	str	r3, [r7, #88]	; 0x58
 800a238:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a23a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a23c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a23e:	e841 2300 	strex	r3, r2, [r1]
 800a242:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a244:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a246:	2b00      	cmp	r3, #0
 800a248:	d1e4      	bne.n	800a214 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a24e:	4618      	mov	r0, r3
 800a250:	f7f9 fbd2 	bl	80039f8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	2202      	movs	r2, #2
 800a258:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a266:	b29b      	uxth	r3, r3
 800a268:	1ad3      	subs	r3, r2, r3
 800a26a:	b29b      	uxth	r3, r3
 800a26c:	4619      	mov	r1, r3
 800a26e:	6878      	ldr	r0, [r7, #4]
 800a270:	f000 f8c2 	bl	800a3f8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a274:	e0a4      	b.n	800a3c0 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a282:	b29b      	uxth	r3, r3
 800a284:	1ad3      	subs	r3, r2, r3
 800a286:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a290:	b29b      	uxth	r3, r3
 800a292:	2b00      	cmp	r3, #0
 800a294:	f000 8096 	beq.w	800a3c4 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 800a298:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	f000 8091 	beq.w	800a3c4 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2aa:	e853 3f00 	ldrex	r3, [r3]
 800a2ae:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a2b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2b2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a2b6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	461a      	mov	r2, r3
 800a2c0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a2c4:	647b      	str	r3, [r7, #68]	; 0x44
 800a2c6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2c8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a2ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a2cc:	e841 2300 	strex	r3, r2, [r1]
 800a2d0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a2d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d1e4      	bne.n	800a2a2 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	3308      	adds	r3, #8
 800a2de:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2e2:	e853 3f00 	ldrex	r3, [r3]
 800a2e6:	623b      	str	r3, [r7, #32]
   return(result);
 800a2e8:	6a3b      	ldr	r3, [r7, #32]
 800a2ea:	f023 0301 	bic.w	r3, r3, #1
 800a2ee:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	3308      	adds	r3, #8
 800a2f8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a2fc:	633a      	str	r2, [r7, #48]	; 0x30
 800a2fe:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a300:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a302:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a304:	e841 2300 	strex	r3, r2, [r1]
 800a308:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a30a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d1e3      	bne.n	800a2d8 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	2220      	movs	r2, #32
 800a314:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	2200      	movs	r2, #0
 800a31c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	2200      	movs	r2, #0
 800a322:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a32a:	693b      	ldr	r3, [r7, #16]
 800a32c:	e853 3f00 	ldrex	r3, [r3]
 800a330:	60fb      	str	r3, [r7, #12]
   return(result);
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	f023 0310 	bic.w	r3, r3, #16
 800a338:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	461a      	mov	r2, r3
 800a342:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a346:	61fb      	str	r3, [r7, #28]
 800a348:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a34a:	69b9      	ldr	r1, [r7, #24]
 800a34c:	69fa      	ldr	r2, [r7, #28]
 800a34e:	e841 2300 	strex	r3, r2, [r1]
 800a352:	617b      	str	r3, [r7, #20]
   return(result);
 800a354:	697b      	ldr	r3, [r7, #20]
 800a356:	2b00      	cmp	r3, #0
 800a358:	d1e4      	bne.n	800a324 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	2202      	movs	r2, #2
 800a35e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a360:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a364:	4619      	mov	r1, r3
 800a366:	6878      	ldr	r0, [r7, #4]
 800a368:	f000 f846 	bl	800a3f8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a36c:	e02a      	b.n	800a3c4 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800a36e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a372:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a376:	2b00      	cmp	r3, #0
 800a378:	d00e      	beq.n	800a398 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800a37a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a37e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a382:	2b00      	cmp	r3, #0
 800a384:	d008      	beq.n	800a398 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d01c      	beq.n	800a3c8 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a392:	6878      	ldr	r0, [r7, #4]
 800a394:	4798      	blx	r3
    }
    return;
 800a396:	e017      	b.n	800a3c8 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a398:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a39c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d012      	beq.n	800a3ca <HAL_UART_IRQHandler+0x59e>
 800a3a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a3a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d00c      	beq.n	800a3ca <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 800a3b0:	6878      	ldr	r0, [r7, #4]
 800a3b2:	f000 fdf2 	bl	800af9a <UART_EndTransmit_IT>
    return;
 800a3b6:	e008      	b.n	800a3ca <HAL_UART_IRQHandler+0x59e>
      return;
 800a3b8:	bf00      	nop
 800a3ba:	e006      	b.n	800a3ca <HAL_UART_IRQHandler+0x59e>
    return;
 800a3bc:	bf00      	nop
 800a3be:	e004      	b.n	800a3ca <HAL_UART_IRQHandler+0x59e>
      return;
 800a3c0:	bf00      	nop
 800a3c2:	e002      	b.n	800a3ca <HAL_UART_IRQHandler+0x59e>
      return;
 800a3c4:	bf00      	nop
 800a3c6:	e000      	b.n	800a3ca <HAL_UART_IRQHandler+0x59e>
    return;
 800a3c8:	bf00      	nop
  }

}
 800a3ca:	37e8      	adds	r7, #232	; 0xe8
 800a3cc:	46bd      	mov	sp, r7
 800a3ce:	bd80      	pop	{r7, pc}

0800a3d0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a3d0:	b480      	push	{r7}
 800a3d2:	b083      	sub	sp, #12
 800a3d4:	af00      	add	r7, sp, #0
 800a3d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a3d8:	bf00      	nop
 800a3da:	370c      	adds	r7, #12
 800a3dc:	46bd      	mov	sp, r7
 800a3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e2:	4770      	bx	lr

0800a3e4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a3e4:	b480      	push	{r7}
 800a3e6:	b083      	sub	sp, #12
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a3ec:	bf00      	nop
 800a3ee:	370c      	adds	r7, #12
 800a3f0:	46bd      	mov	sp, r7
 800a3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f6:	4770      	bx	lr

0800a3f8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a3f8:	b480      	push	{r7}
 800a3fa:	b083      	sub	sp, #12
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	6078      	str	r0, [r7, #4]
 800a400:	460b      	mov	r3, r1
 800a402:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a404:	bf00      	nop
 800a406:	370c      	adds	r7, #12
 800a408:	46bd      	mov	sp, r7
 800a40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a40e:	4770      	bx	lr

0800a410 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a410:	b580      	push	{r7, lr}
 800a412:	b088      	sub	sp, #32
 800a414:	af00      	add	r7, sp, #0
 800a416:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a418:	2300      	movs	r3, #0
 800a41a:	77bb      	strb	r3, [r7, #30]
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	685b      	ldr	r3, [r3, #4]
 800a420:	4aa0      	ldr	r2, [pc, #640]	; (800a6a4 <UART_SetConfig+0x294>)
 800a422:	4293      	cmp	r3, r2
 800a424:	d904      	bls.n	800a430 <UART_SetConfig+0x20>
 800a426:	f640 315d 	movw	r1, #2909	; 0xb5d
 800a42a:	489f      	ldr	r0, [pc, #636]	; (800a6a8 <UART_SetConfig+0x298>)
 800a42c:	f7f8 fb41 	bl	8002ab2 <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	689b      	ldr	r3, [r3, #8]
 800a434:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a438:	d00d      	beq.n	800a456 <UART_SetConfig+0x46>
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	689b      	ldr	r3, [r3, #8]
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d009      	beq.n	800a456 <UART_SetConfig+0x46>
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	689b      	ldr	r3, [r3, #8]
 800a446:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a44a:	d004      	beq.n	800a456 <UART_SetConfig+0x46>
 800a44c:	f640 315e 	movw	r1, #2910	; 0xb5e
 800a450:	4895      	ldr	r0, [pc, #596]	; (800a6a8 <UART_SetConfig+0x298>)
 800a452:	f7f8 fb2e 	bl	8002ab2 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	68db      	ldr	r3, [r3, #12]
 800a45a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a45e:	d012      	beq.n	800a486 <UART_SetConfig+0x76>
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	68db      	ldr	r3, [r3, #12]
 800a464:	2b00      	cmp	r3, #0
 800a466:	d00e      	beq.n	800a486 <UART_SetConfig+0x76>
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	68db      	ldr	r3, [r3, #12]
 800a46c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a470:	d009      	beq.n	800a486 <UART_SetConfig+0x76>
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	68db      	ldr	r3, [r3, #12]
 800a476:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a47a:	d004      	beq.n	800a486 <UART_SetConfig+0x76>
 800a47c:	f640 315f 	movw	r1, #2911	; 0xb5f
 800a480:	4889      	ldr	r0, [pc, #548]	; (800a6a8 <UART_SetConfig+0x298>)
 800a482:	f7f8 fb16 	bl	8002ab2 <assert_failed>
  assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	6a1b      	ldr	r3, [r3, #32]
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d009      	beq.n	800a4a2 <UART_SetConfig+0x92>
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	6a1b      	ldr	r3, [r3, #32]
 800a492:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a496:	d004      	beq.n	800a4a2 <UART_SetConfig+0x92>
 800a498:	f44f 6136 	mov.w	r1, #2912	; 0xb60
 800a49c:	4882      	ldr	r0, [pc, #520]	; (800a6a8 <UART_SetConfig+0x298>)
 800a49e:	f7f8 fb08 	bl	8002ab2 <assert_failed>

  assert_param(IS_UART_PARITY(huart->Init.Parity));
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	691b      	ldr	r3, [r3, #16]
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d00e      	beq.n	800a4c8 <UART_SetConfig+0xb8>
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	691b      	ldr	r3, [r3, #16]
 800a4ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a4b2:	d009      	beq.n	800a4c8 <UART_SetConfig+0xb8>
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	691b      	ldr	r3, [r3, #16]
 800a4b8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800a4bc:	d004      	beq.n	800a4c8 <UART_SetConfig+0xb8>
 800a4be:	f640 3162 	movw	r1, #2914	; 0xb62
 800a4c2:	4879      	ldr	r0, [pc, #484]	; (800a6a8 <UART_SetConfig+0x298>)
 800a4c4:	f7f8 faf5 	bl	8002ab2 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	695b      	ldr	r3, [r3, #20]
 800a4cc:	f023 030c 	bic.w	r3, r3, #12
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d103      	bne.n	800a4dc <UART_SetConfig+0xcc>
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	695b      	ldr	r3, [r3, #20]
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d104      	bne.n	800a4e6 <UART_SetConfig+0xd6>
 800a4dc:	f640 3163 	movw	r1, #2915	; 0xb63
 800a4e0:	4871      	ldr	r0, [pc, #452]	; (800a6a8 <UART_SetConfig+0x298>)
 800a4e2:	f7f8 fae6 	bl	8002ab2 <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	699b      	ldr	r3, [r3, #24]
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d013      	beq.n	800a516 <UART_SetConfig+0x106>
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	699b      	ldr	r3, [r3, #24]
 800a4f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a4f6:	d00e      	beq.n	800a516 <UART_SetConfig+0x106>
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	699b      	ldr	r3, [r3, #24]
 800a4fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a500:	d009      	beq.n	800a516 <UART_SetConfig+0x106>
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	699b      	ldr	r3, [r3, #24]
 800a506:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a50a:	d004      	beq.n	800a516 <UART_SetConfig+0x106>
 800a50c:	f640 3164 	movw	r1, #2916	; 0xb64
 800a510:	4865      	ldr	r0, [pc, #404]	; (800a6a8 <UART_SetConfig+0x298>)
 800a512:	f7f8 face 	bl	8002ab2 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	69db      	ldr	r3, [r3, #28]
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d009      	beq.n	800a532 <UART_SetConfig+0x122>
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	69db      	ldr	r3, [r3, #28]
 800a522:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a526:	d004      	beq.n	800a532 <UART_SetConfig+0x122>
 800a528:	f640 3165 	movw	r1, #2917	; 0xb65
 800a52c:	485e      	ldr	r0, [pc, #376]	; (800a6a8 <UART_SetConfig+0x298>)
 800a52e:	f7f8 fac0 	bl	8002ab2 <assert_failed>
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	689a      	ldr	r2, [r3, #8]
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	691b      	ldr	r3, [r3, #16]
 800a53a:	431a      	orrs	r2, r3
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	695b      	ldr	r3, [r3, #20]
 800a540:	431a      	orrs	r2, r3
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	69db      	ldr	r3, [r3, #28]
 800a546:	4313      	orrs	r3, r2
 800a548:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	681a      	ldr	r2, [r3, #0]
 800a550:	4b56      	ldr	r3, [pc, #344]	; (800a6ac <UART_SetConfig+0x29c>)
 800a552:	4013      	ands	r3, r2
 800a554:	687a      	ldr	r2, [r7, #4]
 800a556:	6812      	ldr	r2, [r2, #0]
 800a558:	6979      	ldr	r1, [r7, #20]
 800a55a:	430b      	orrs	r3, r1
 800a55c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	685b      	ldr	r3, [r3, #4]
 800a564:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	68da      	ldr	r2, [r3, #12]
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	430a      	orrs	r2, r1
 800a572:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	699b      	ldr	r3, [r3, #24]
 800a578:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	6a1b      	ldr	r3, [r3, #32]
 800a57e:	697a      	ldr	r2, [r7, #20]
 800a580:	4313      	orrs	r3, r2
 800a582:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	689b      	ldr	r3, [r3, #8]
 800a58a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	697a      	ldr	r2, [r7, #20]
 800a594:	430a      	orrs	r2, r1
 800a596:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	4a44      	ldr	r2, [pc, #272]	; (800a6b0 <UART_SetConfig+0x2a0>)
 800a59e:	4293      	cmp	r3, r2
 800a5a0:	d121      	bne.n	800a5e6 <UART_SetConfig+0x1d6>
 800a5a2:	4b44      	ldr	r3, [pc, #272]	; (800a6b4 <UART_SetConfig+0x2a4>)
 800a5a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a5a8:	f003 0303 	and.w	r3, r3, #3
 800a5ac:	2b03      	cmp	r3, #3
 800a5ae:	d817      	bhi.n	800a5e0 <UART_SetConfig+0x1d0>
 800a5b0:	a201      	add	r2, pc, #4	; (adr r2, 800a5b8 <UART_SetConfig+0x1a8>)
 800a5b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5b6:	bf00      	nop
 800a5b8:	0800a5c9 	.word	0x0800a5c9
 800a5bc:	0800a5d5 	.word	0x0800a5d5
 800a5c0:	0800a5cf 	.word	0x0800a5cf
 800a5c4:	0800a5db 	.word	0x0800a5db
 800a5c8:	2301      	movs	r3, #1
 800a5ca:	77fb      	strb	r3, [r7, #31]
 800a5cc:	e14c      	b.n	800a868 <UART_SetConfig+0x458>
 800a5ce:	2302      	movs	r3, #2
 800a5d0:	77fb      	strb	r3, [r7, #31]
 800a5d2:	e149      	b.n	800a868 <UART_SetConfig+0x458>
 800a5d4:	2304      	movs	r3, #4
 800a5d6:	77fb      	strb	r3, [r7, #31]
 800a5d8:	e146      	b.n	800a868 <UART_SetConfig+0x458>
 800a5da:	2308      	movs	r3, #8
 800a5dc:	77fb      	strb	r3, [r7, #31]
 800a5de:	e143      	b.n	800a868 <UART_SetConfig+0x458>
 800a5e0:	2310      	movs	r3, #16
 800a5e2:	77fb      	strb	r3, [r7, #31]
 800a5e4:	e140      	b.n	800a868 <UART_SetConfig+0x458>
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	4a33      	ldr	r2, [pc, #204]	; (800a6b8 <UART_SetConfig+0x2a8>)
 800a5ec:	4293      	cmp	r3, r2
 800a5ee:	d132      	bne.n	800a656 <UART_SetConfig+0x246>
 800a5f0:	4b30      	ldr	r3, [pc, #192]	; (800a6b4 <UART_SetConfig+0x2a4>)
 800a5f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a5f6:	f003 030c 	and.w	r3, r3, #12
 800a5fa:	2b0c      	cmp	r3, #12
 800a5fc:	d828      	bhi.n	800a650 <UART_SetConfig+0x240>
 800a5fe:	a201      	add	r2, pc, #4	; (adr r2, 800a604 <UART_SetConfig+0x1f4>)
 800a600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a604:	0800a639 	.word	0x0800a639
 800a608:	0800a651 	.word	0x0800a651
 800a60c:	0800a651 	.word	0x0800a651
 800a610:	0800a651 	.word	0x0800a651
 800a614:	0800a645 	.word	0x0800a645
 800a618:	0800a651 	.word	0x0800a651
 800a61c:	0800a651 	.word	0x0800a651
 800a620:	0800a651 	.word	0x0800a651
 800a624:	0800a63f 	.word	0x0800a63f
 800a628:	0800a651 	.word	0x0800a651
 800a62c:	0800a651 	.word	0x0800a651
 800a630:	0800a651 	.word	0x0800a651
 800a634:	0800a64b 	.word	0x0800a64b
 800a638:	2300      	movs	r3, #0
 800a63a:	77fb      	strb	r3, [r7, #31]
 800a63c:	e114      	b.n	800a868 <UART_SetConfig+0x458>
 800a63e:	2302      	movs	r3, #2
 800a640:	77fb      	strb	r3, [r7, #31]
 800a642:	e111      	b.n	800a868 <UART_SetConfig+0x458>
 800a644:	2304      	movs	r3, #4
 800a646:	77fb      	strb	r3, [r7, #31]
 800a648:	e10e      	b.n	800a868 <UART_SetConfig+0x458>
 800a64a:	2308      	movs	r3, #8
 800a64c:	77fb      	strb	r3, [r7, #31]
 800a64e:	e10b      	b.n	800a868 <UART_SetConfig+0x458>
 800a650:	2310      	movs	r3, #16
 800a652:	77fb      	strb	r3, [r7, #31]
 800a654:	e108      	b.n	800a868 <UART_SetConfig+0x458>
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	4a18      	ldr	r2, [pc, #96]	; (800a6bc <UART_SetConfig+0x2ac>)
 800a65c:	4293      	cmp	r3, r2
 800a65e:	d12f      	bne.n	800a6c0 <UART_SetConfig+0x2b0>
 800a660:	4b14      	ldr	r3, [pc, #80]	; (800a6b4 <UART_SetConfig+0x2a4>)
 800a662:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a666:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a66a:	2b30      	cmp	r3, #48	; 0x30
 800a66c:	d013      	beq.n	800a696 <UART_SetConfig+0x286>
 800a66e:	2b30      	cmp	r3, #48	; 0x30
 800a670:	d814      	bhi.n	800a69c <UART_SetConfig+0x28c>
 800a672:	2b20      	cmp	r3, #32
 800a674:	d009      	beq.n	800a68a <UART_SetConfig+0x27a>
 800a676:	2b20      	cmp	r3, #32
 800a678:	d810      	bhi.n	800a69c <UART_SetConfig+0x28c>
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d002      	beq.n	800a684 <UART_SetConfig+0x274>
 800a67e:	2b10      	cmp	r3, #16
 800a680:	d006      	beq.n	800a690 <UART_SetConfig+0x280>
 800a682:	e00b      	b.n	800a69c <UART_SetConfig+0x28c>
 800a684:	2300      	movs	r3, #0
 800a686:	77fb      	strb	r3, [r7, #31]
 800a688:	e0ee      	b.n	800a868 <UART_SetConfig+0x458>
 800a68a:	2302      	movs	r3, #2
 800a68c:	77fb      	strb	r3, [r7, #31]
 800a68e:	e0eb      	b.n	800a868 <UART_SetConfig+0x458>
 800a690:	2304      	movs	r3, #4
 800a692:	77fb      	strb	r3, [r7, #31]
 800a694:	e0e8      	b.n	800a868 <UART_SetConfig+0x458>
 800a696:	2308      	movs	r3, #8
 800a698:	77fb      	strb	r3, [r7, #31]
 800a69a:	e0e5      	b.n	800a868 <UART_SetConfig+0x458>
 800a69c:	2310      	movs	r3, #16
 800a69e:	77fb      	strb	r3, [r7, #31]
 800a6a0:	e0e2      	b.n	800a868 <UART_SetConfig+0x458>
 800a6a2:	bf00      	nop
 800a6a4:	019bfcc0 	.word	0x019bfcc0
 800a6a8:	08016888 	.word	0x08016888
 800a6ac:	efff69f3 	.word	0xefff69f3
 800a6b0:	40011000 	.word	0x40011000
 800a6b4:	40023800 	.word	0x40023800
 800a6b8:	40004400 	.word	0x40004400
 800a6bc:	40004800 	.word	0x40004800
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	4aa5      	ldr	r2, [pc, #660]	; (800a95c <UART_SetConfig+0x54c>)
 800a6c6:	4293      	cmp	r3, r2
 800a6c8:	d120      	bne.n	800a70c <UART_SetConfig+0x2fc>
 800a6ca:	4ba5      	ldr	r3, [pc, #660]	; (800a960 <UART_SetConfig+0x550>)
 800a6cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a6d0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a6d4:	2bc0      	cmp	r3, #192	; 0xc0
 800a6d6:	d013      	beq.n	800a700 <UART_SetConfig+0x2f0>
 800a6d8:	2bc0      	cmp	r3, #192	; 0xc0
 800a6da:	d814      	bhi.n	800a706 <UART_SetConfig+0x2f6>
 800a6dc:	2b80      	cmp	r3, #128	; 0x80
 800a6de:	d009      	beq.n	800a6f4 <UART_SetConfig+0x2e4>
 800a6e0:	2b80      	cmp	r3, #128	; 0x80
 800a6e2:	d810      	bhi.n	800a706 <UART_SetConfig+0x2f6>
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d002      	beq.n	800a6ee <UART_SetConfig+0x2de>
 800a6e8:	2b40      	cmp	r3, #64	; 0x40
 800a6ea:	d006      	beq.n	800a6fa <UART_SetConfig+0x2ea>
 800a6ec:	e00b      	b.n	800a706 <UART_SetConfig+0x2f6>
 800a6ee:	2300      	movs	r3, #0
 800a6f0:	77fb      	strb	r3, [r7, #31]
 800a6f2:	e0b9      	b.n	800a868 <UART_SetConfig+0x458>
 800a6f4:	2302      	movs	r3, #2
 800a6f6:	77fb      	strb	r3, [r7, #31]
 800a6f8:	e0b6      	b.n	800a868 <UART_SetConfig+0x458>
 800a6fa:	2304      	movs	r3, #4
 800a6fc:	77fb      	strb	r3, [r7, #31]
 800a6fe:	e0b3      	b.n	800a868 <UART_SetConfig+0x458>
 800a700:	2308      	movs	r3, #8
 800a702:	77fb      	strb	r3, [r7, #31]
 800a704:	e0b0      	b.n	800a868 <UART_SetConfig+0x458>
 800a706:	2310      	movs	r3, #16
 800a708:	77fb      	strb	r3, [r7, #31]
 800a70a:	e0ad      	b.n	800a868 <UART_SetConfig+0x458>
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	4a94      	ldr	r2, [pc, #592]	; (800a964 <UART_SetConfig+0x554>)
 800a712:	4293      	cmp	r3, r2
 800a714:	d125      	bne.n	800a762 <UART_SetConfig+0x352>
 800a716:	4b92      	ldr	r3, [pc, #584]	; (800a960 <UART_SetConfig+0x550>)
 800a718:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a71c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a720:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a724:	d017      	beq.n	800a756 <UART_SetConfig+0x346>
 800a726:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a72a:	d817      	bhi.n	800a75c <UART_SetConfig+0x34c>
 800a72c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a730:	d00b      	beq.n	800a74a <UART_SetConfig+0x33a>
 800a732:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a736:	d811      	bhi.n	800a75c <UART_SetConfig+0x34c>
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d003      	beq.n	800a744 <UART_SetConfig+0x334>
 800a73c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a740:	d006      	beq.n	800a750 <UART_SetConfig+0x340>
 800a742:	e00b      	b.n	800a75c <UART_SetConfig+0x34c>
 800a744:	2300      	movs	r3, #0
 800a746:	77fb      	strb	r3, [r7, #31]
 800a748:	e08e      	b.n	800a868 <UART_SetConfig+0x458>
 800a74a:	2302      	movs	r3, #2
 800a74c:	77fb      	strb	r3, [r7, #31]
 800a74e:	e08b      	b.n	800a868 <UART_SetConfig+0x458>
 800a750:	2304      	movs	r3, #4
 800a752:	77fb      	strb	r3, [r7, #31]
 800a754:	e088      	b.n	800a868 <UART_SetConfig+0x458>
 800a756:	2308      	movs	r3, #8
 800a758:	77fb      	strb	r3, [r7, #31]
 800a75a:	e085      	b.n	800a868 <UART_SetConfig+0x458>
 800a75c:	2310      	movs	r3, #16
 800a75e:	77fb      	strb	r3, [r7, #31]
 800a760:	e082      	b.n	800a868 <UART_SetConfig+0x458>
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	4a80      	ldr	r2, [pc, #512]	; (800a968 <UART_SetConfig+0x558>)
 800a768:	4293      	cmp	r3, r2
 800a76a:	d125      	bne.n	800a7b8 <UART_SetConfig+0x3a8>
 800a76c:	4b7c      	ldr	r3, [pc, #496]	; (800a960 <UART_SetConfig+0x550>)
 800a76e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a772:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a776:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a77a:	d017      	beq.n	800a7ac <UART_SetConfig+0x39c>
 800a77c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a780:	d817      	bhi.n	800a7b2 <UART_SetConfig+0x3a2>
 800a782:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a786:	d00b      	beq.n	800a7a0 <UART_SetConfig+0x390>
 800a788:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a78c:	d811      	bhi.n	800a7b2 <UART_SetConfig+0x3a2>
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d003      	beq.n	800a79a <UART_SetConfig+0x38a>
 800a792:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a796:	d006      	beq.n	800a7a6 <UART_SetConfig+0x396>
 800a798:	e00b      	b.n	800a7b2 <UART_SetConfig+0x3a2>
 800a79a:	2301      	movs	r3, #1
 800a79c:	77fb      	strb	r3, [r7, #31]
 800a79e:	e063      	b.n	800a868 <UART_SetConfig+0x458>
 800a7a0:	2302      	movs	r3, #2
 800a7a2:	77fb      	strb	r3, [r7, #31]
 800a7a4:	e060      	b.n	800a868 <UART_SetConfig+0x458>
 800a7a6:	2304      	movs	r3, #4
 800a7a8:	77fb      	strb	r3, [r7, #31]
 800a7aa:	e05d      	b.n	800a868 <UART_SetConfig+0x458>
 800a7ac:	2308      	movs	r3, #8
 800a7ae:	77fb      	strb	r3, [r7, #31]
 800a7b0:	e05a      	b.n	800a868 <UART_SetConfig+0x458>
 800a7b2:	2310      	movs	r3, #16
 800a7b4:	77fb      	strb	r3, [r7, #31]
 800a7b6:	e057      	b.n	800a868 <UART_SetConfig+0x458>
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	4a6b      	ldr	r2, [pc, #428]	; (800a96c <UART_SetConfig+0x55c>)
 800a7be:	4293      	cmp	r3, r2
 800a7c0:	d125      	bne.n	800a80e <UART_SetConfig+0x3fe>
 800a7c2:	4b67      	ldr	r3, [pc, #412]	; (800a960 <UART_SetConfig+0x550>)
 800a7c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a7c8:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800a7cc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a7d0:	d017      	beq.n	800a802 <UART_SetConfig+0x3f2>
 800a7d2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a7d6:	d817      	bhi.n	800a808 <UART_SetConfig+0x3f8>
 800a7d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a7dc:	d00b      	beq.n	800a7f6 <UART_SetConfig+0x3e6>
 800a7de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a7e2:	d811      	bhi.n	800a808 <UART_SetConfig+0x3f8>
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d003      	beq.n	800a7f0 <UART_SetConfig+0x3e0>
 800a7e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a7ec:	d006      	beq.n	800a7fc <UART_SetConfig+0x3ec>
 800a7ee:	e00b      	b.n	800a808 <UART_SetConfig+0x3f8>
 800a7f0:	2300      	movs	r3, #0
 800a7f2:	77fb      	strb	r3, [r7, #31]
 800a7f4:	e038      	b.n	800a868 <UART_SetConfig+0x458>
 800a7f6:	2302      	movs	r3, #2
 800a7f8:	77fb      	strb	r3, [r7, #31]
 800a7fa:	e035      	b.n	800a868 <UART_SetConfig+0x458>
 800a7fc:	2304      	movs	r3, #4
 800a7fe:	77fb      	strb	r3, [r7, #31]
 800a800:	e032      	b.n	800a868 <UART_SetConfig+0x458>
 800a802:	2308      	movs	r3, #8
 800a804:	77fb      	strb	r3, [r7, #31]
 800a806:	e02f      	b.n	800a868 <UART_SetConfig+0x458>
 800a808:	2310      	movs	r3, #16
 800a80a:	77fb      	strb	r3, [r7, #31]
 800a80c:	e02c      	b.n	800a868 <UART_SetConfig+0x458>
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	4a57      	ldr	r2, [pc, #348]	; (800a970 <UART_SetConfig+0x560>)
 800a814:	4293      	cmp	r3, r2
 800a816:	d125      	bne.n	800a864 <UART_SetConfig+0x454>
 800a818:	4b51      	ldr	r3, [pc, #324]	; (800a960 <UART_SetConfig+0x550>)
 800a81a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a81e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800a822:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800a826:	d017      	beq.n	800a858 <UART_SetConfig+0x448>
 800a828:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800a82c:	d817      	bhi.n	800a85e <UART_SetConfig+0x44e>
 800a82e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a832:	d00b      	beq.n	800a84c <UART_SetConfig+0x43c>
 800a834:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a838:	d811      	bhi.n	800a85e <UART_SetConfig+0x44e>
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d003      	beq.n	800a846 <UART_SetConfig+0x436>
 800a83e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a842:	d006      	beq.n	800a852 <UART_SetConfig+0x442>
 800a844:	e00b      	b.n	800a85e <UART_SetConfig+0x44e>
 800a846:	2300      	movs	r3, #0
 800a848:	77fb      	strb	r3, [r7, #31]
 800a84a:	e00d      	b.n	800a868 <UART_SetConfig+0x458>
 800a84c:	2302      	movs	r3, #2
 800a84e:	77fb      	strb	r3, [r7, #31]
 800a850:	e00a      	b.n	800a868 <UART_SetConfig+0x458>
 800a852:	2304      	movs	r3, #4
 800a854:	77fb      	strb	r3, [r7, #31]
 800a856:	e007      	b.n	800a868 <UART_SetConfig+0x458>
 800a858:	2308      	movs	r3, #8
 800a85a:	77fb      	strb	r3, [r7, #31]
 800a85c:	e004      	b.n	800a868 <UART_SetConfig+0x458>
 800a85e:	2310      	movs	r3, #16
 800a860:	77fb      	strb	r3, [r7, #31]
 800a862:	e001      	b.n	800a868 <UART_SetConfig+0x458>
 800a864:	2310      	movs	r3, #16
 800a866:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	69db      	ldr	r3, [r3, #28]
 800a86c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a870:	d15c      	bne.n	800a92c <UART_SetConfig+0x51c>
  {
    switch (clocksource)
 800a872:	7ffb      	ldrb	r3, [r7, #31]
 800a874:	2b08      	cmp	r3, #8
 800a876:	d828      	bhi.n	800a8ca <UART_SetConfig+0x4ba>
 800a878:	a201      	add	r2, pc, #4	; (adr r2, 800a880 <UART_SetConfig+0x470>)
 800a87a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a87e:	bf00      	nop
 800a880:	0800a8a5 	.word	0x0800a8a5
 800a884:	0800a8ad 	.word	0x0800a8ad
 800a888:	0800a8b5 	.word	0x0800a8b5
 800a88c:	0800a8cb 	.word	0x0800a8cb
 800a890:	0800a8bb 	.word	0x0800a8bb
 800a894:	0800a8cb 	.word	0x0800a8cb
 800a898:	0800a8cb 	.word	0x0800a8cb
 800a89c:	0800a8cb 	.word	0x0800a8cb
 800a8a0:	0800a8c3 	.word	0x0800a8c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a8a4:	f7fb ff6c 	bl	8006780 <HAL_RCC_GetPCLK1Freq>
 800a8a8:	61b8      	str	r0, [r7, #24]
        break;
 800a8aa:	e013      	b.n	800a8d4 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a8ac:	f7fb ff7c 	bl	80067a8 <HAL_RCC_GetPCLK2Freq>
 800a8b0:	61b8      	str	r0, [r7, #24]
        break;
 800a8b2:	e00f      	b.n	800a8d4 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a8b4:	4b2f      	ldr	r3, [pc, #188]	; (800a974 <UART_SetConfig+0x564>)
 800a8b6:	61bb      	str	r3, [r7, #24]
        break;
 800a8b8:	e00c      	b.n	800a8d4 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a8ba:	f7fb fe8f 	bl	80065dc <HAL_RCC_GetSysClockFreq>
 800a8be:	61b8      	str	r0, [r7, #24]
        break;
 800a8c0:	e008      	b.n	800a8d4 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a8c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a8c6:	61bb      	str	r3, [r7, #24]
        break;
 800a8c8:	e004      	b.n	800a8d4 <UART_SetConfig+0x4c4>
      default:
        pclk = 0U;
 800a8ca:	2300      	movs	r3, #0
 800a8cc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a8ce:	2301      	movs	r3, #1
 800a8d0:	77bb      	strb	r3, [r7, #30]
        break;
 800a8d2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a8d4:	69bb      	ldr	r3, [r7, #24]
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	f000 8082 	beq.w	800a9e0 <UART_SetConfig+0x5d0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a8dc:	69bb      	ldr	r3, [r7, #24]
 800a8de:	005a      	lsls	r2, r3, #1
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	685b      	ldr	r3, [r3, #4]
 800a8e4:	085b      	lsrs	r3, r3, #1
 800a8e6:	441a      	add	r2, r3
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	685b      	ldr	r3, [r3, #4]
 800a8ec:	fbb2 f3f3 	udiv	r3, r2, r3
 800a8f0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a8f2:	693b      	ldr	r3, [r7, #16]
 800a8f4:	2b0f      	cmp	r3, #15
 800a8f6:	d916      	bls.n	800a926 <UART_SetConfig+0x516>
 800a8f8:	693b      	ldr	r3, [r7, #16]
 800a8fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a8fe:	d212      	bcs.n	800a926 <UART_SetConfig+0x516>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a900:	693b      	ldr	r3, [r7, #16]
 800a902:	b29b      	uxth	r3, r3
 800a904:	f023 030f 	bic.w	r3, r3, #15
 800a908:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a90a:	693b      	ldr	r3, [r7, #16]
 800a90c:	085b      	lsrs	r3, r3, #1
 800a90e:	b29b      	uxth	r3, r3
 800a910:	f003 0307 	and.w	r3, r3, #7
 800a914:	b29a      	uxth	r2, r3
 800a916:	89fb      	ldrh	r3, [r7, #14]
 800a918:	4313      	orrs	r3, r2
 800a91a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	89fa      	ldrh	r2, [r7, #14]
 800a922:	60da      	str	r2, [r3, #12]
 800a924:	e05c      	b.n	800a9e0 <UART_SetConfig+0x5d0>
      }
      else
      {
        ret = HAL_ERROR;
 800a926:	2301      	movs	r3, #1
 800a928:	77bb      	strb	r3, [r7, #30]
 800a92a:	e059      	b.n	800a9e0 <UART_SetConfig+0x5d0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a92c:	7ffb      	ldrb	r3, [r7, #31]
 800a92e:	2b08      	cmp	r3, #8
 800a930:	d835      	bhi.n	800a99e <UART_SetConfig+0x58e>
 800a932:	a201      	add	r2, pc, #4	; (adr r2, 800a938 <UART_SetConfig+0x528>)
 800a934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a938:	0800a979 	.word	0x0800a979
 800a93c:	0800a981 	.word	0x0800a981
 800a940:	0800a989 	.word	0x0800a989
 800a944:	0800a99f 	.word	0x0800a99f
 800a948:	0800a98f 	.word	0x0800a98f
 800a94c:	0800a99f 	.word	0x0800a99f
 800a950:	0800a99f 	.word	0x0800a99f
 800a954:	0800a99f 	.word	0x0800a99f
 800a958:	0800a997 	.word	0x0800a997
 800a95c:	40004c00 	.word	0x40004c00
 800a960:	40023800 	.word	0x40023800
 800a964:	40005000 	.word	0x40005000
 800a968:	40011400 	.word	0x40011400
 800a96c:	40007800 	.word	0x40007800
 800a970:	40007c00 	.word	0x40007c00
 800a974:	00f42400 	.word	0x00f42400
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a978:	f7fb ff02 	bl	8006780 <HAL_RCC_GetPCLK1Freq>
 800a97c:	61b8      	str	r0, [r7, #24]
        break;
 800a97e:	e013      	b.n	800a9a8 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a980:	f7fb ff12 	bl	80067a8 <HAL_RCC_GetPCLK2Freq>
 800a984:	61b8      	str	r0, [r7, #24]
        break;
 800a986:	e00f      	b.n	800a9a8 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a988:	4b1b      	ldr	r3, [pc, #108]	; (800a9f8 <UART_SetConfig+0x5e8>)
 800a98a:	61bb      	str	r3, [r7, #24]
        break;
 800a98c:	e00c      	b.n	800a9a8 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a98e:	f7fb fe25 	bl	80065dc <HAL_RCC_GetSysClockFreq>
 800a992:	61b8      	str	r0, [r7, #24]
        break;
 800a994:	e008      	b.n	800a9a8 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a996:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a99a:	61bb      	str	r3, [r7, #24]
        break;
 800a99c:	e004      	b.n	800a9a8 <UART_SetConfig+0x598>
      default:
        pclk = 0U;
 800a99e:	2300      	movs	r3, #0
 800a9a0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a9a2:	2301      	movs	r3, #1
 800a9a4:	77bb      	strb	r3, [r7, #30]
        break;
 800a9a6:	bf00      	nop
    }

    if (pclk != 0U)
 800a9a8:	69bb      	ldr	r3, [r7, #24]
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d018      	beq.n	800a9e0 <UART_SetConfig+0x5d0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	685b      	ldr	r3, [r3, #4]
 800a9b2:	085a      	lsrs	r2, r3, #1
 800a9b4:	69bb      	ldr	r3, [r7, #24]
 800a9b6:	441a      	add	r2, r3
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	685b      	ldr	r3, [r3, #4]
 800a9bc:	fbb2 f3f3 	udiv	r3, r2, r3
 800a9c0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a9c2:	693b      	ldr	r3, [r7, #16]
 800a9c4:	2b0f      	cmp	r3, #15
 800a9c6:	d909      	bls.n	800a9dc <UART_SetConfig+0x5cc>
 800a9c8:	693b      	ldr	r3, [r7, #16]
 800a9ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a9ce:	d205      	bcs.n	800a9dc <UART_SetConfig+0x5cc>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a9d0:	693b      	ldr	r3, [r7, #16]
 800a9d2:	b29a      	uxth	r2, r3
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	60da      	str	r2, [r3, #12]
 800a9da:	e001      	b.n	800a9e0 <UART_SetConfig+0x5d0>
      }
      else
      {
        ret = HAL_ERROR;
 800a9dc:	2301      	movs	r3, #1
 800a9de:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	2200      	movs	r2, #0
 800a9e4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	2200      	movs	r2, #0
 800a9ea:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800a9ec:	7fbb      	ldrb	r3, [r7, #30]
}
 800a9ee:	4618      	mov	r0, r3
 800a9f0:	3720      	adds	r7, #32
 800a9f2:	46bd      	mov	sp, r7
 800a9f4:	bd80      	pop	{r7, pc}
 800a9f6:	bf00      	nop
 800a9f8:	00f42400 	.word	0x00f42400

0800a9fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a9fc:	b580      	push	{r7, lr}
 800a9fe:	b082      	sub	sp, #8
 800aa00:	af00      	add	r7, sp, #0
 800aa02:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa08:	2bff      	cmp	r3, #255	; 0xff
 800aa0a:	d904      	bls.n	800aa16 <UART_AdvFeatureConfig+0x1a>
 800aa0c:	f640 31e6 	movw	r1, #3046	; 0xbe6
 800aa10:	488e      	ldr	r0, [pc, #568]	; (800ac4c <UART_AdvFeatureConfig+0x250>)
 800aa12:	f7f8 f84e 	bl	8002ab2 <assert_failed>

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa1a:	f003 0301 	and.w	r3, r3, #1
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d018      	beq.n	800aa54 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d009      	beq.n	800aa3e <UART_AdvFeatureConfig+0x42>
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa2e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aa32:	d004      	beq.n	800aa3e <UART_AdvFeatureConfig+0x42>
 800aa34:	f640 31eb 	movw	r1, #3051	; 0xbeb
 800aa38:	4884      	ldr	r0, [pc, #528]	; (800ac4c <UART_AdvFeatureConfig+0x250>)
 800aa3a:	f7f8 f83a 	bl	8002ab2 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	685b      	ldr	r3, [r3, #4]
 800aa44:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	430a      	orrs	r2, r1
 800aa52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa58:	f003 0302 	and.w	r3, r3, #2
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d018      	beq.n	800aa92 <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d009      	beq.n	800aa7c <UART_AdvFeatureConfig+0x80>
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aa70:	d004      	beq.n	800aa7c <UART_AdvFeatureConfig+0x80>
 800aa72:	f640 31f2 	movw	r1, #3058	; 0xbf2
 800aa76:	4875      	ldr	r0, [pc, #468]	; (800ac4c <UART_AdvFeatureConfig+0x250>)
 800aa78:	f7f8 f81b 	bl	8002ab2 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	685b      	ldr	r3, [r3, #4]
 800aa82:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	430a      	orrs	r2, r1
 800aa90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa96:	f003 0304 	and.w	r3, r3, #4
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d018      	beq.n	800aad0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d009      	beq.n	800aaba <UART_AdvFeatureConfig+0xbe>
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aaaa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800aaae:	d004      	beq.n	800aaba <UART_AdvFeatureConfig+0xbe>
 800aab0:	f640 31f9 	movw	r1, #3065	; 0xbf9
 800aab4:	4865      	ldr	r0, [pc, #404]	; (800ac4c <UART_AdvFeatureConfig+0x250>)
 800aab6:	f7f7 fffc 	bl	8002ab2 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	685b      	ldr	r3, [r3, #4]
 800aac0:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	430a      	orrs	r2, r1
 800aace:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aad4:	f003 0308 	and.w	r3, r3, #8
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d018      	beq.n	800ab0e <UART_AdvFeatureConfig+0x112>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d009      	beq.n	800aaf8 <UART_AdvFeatureConfig+0xfc>
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aae8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aaec:	d004      	beq.n	800aaf8 <UART_AdvFeatureConfig+0xfc>
 800aaee:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 800aaf2:	4856      	ldr	r0, [pc, #344]	; (800ac4c <UART_AdvFeatureConfig+0x250>)
 800aaf4:	f7f7 ffdd 	bl	8002ab2 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	685b      	ldr	r3, [r3, #4]
 800aafe:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	430a      	orrs	r2, r1
 800ab0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab12:	f003 0310 	and.w	r3, r3, #16
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d018      	beq.n	800ab4c <UART_AdvFeatureConfig+0x150>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d009      	beq.n	800ab36 <UART_AdvFeatureConfig+0x13a>
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ab2a:	d004      	beq.n	800ab36 <UART_AdvFeatureConfig+0x13a>
 800ab2c:	f640 4107 	movw	r1, #3079	; 0xc07
 800ab30:	4846      	ldr	r0, [pc, #280]	; (800ac4c <UART_AdvFeatureConfig+0x250>)
 800ab32:	f7f7 ffbe 	bl	8002ab2 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	689b      	ldr	r3, [r3, #8]
 800ab3c:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	430a      	orrs	r2, r1
 800ab4a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab50:	f003 0320 	and.w	r3, r3, #32
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d018      	beq.n	800ab8a <UART_AdvFeatureConfig+0x18e>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d009      	beq.n	800ab74 <UART_AdvFeatureConfig+0x178>
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ab68:	d004      	beq.n	800ab74 <UART_AdvFeatureConfig+0x178>
 800ab6a:	f640 410e 	movw	r1, #3086	; 0xc0e
 800ab6e:	4837      	ldr	r0, [pc, #220]	; (800ac4c <UART_AdvFeatureConfig+0x250>)
 800ab70:	f7f7 ff9f 	bl	8002ab2 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	689b      	ldr	r3, [r3, #8]
 800ab7a:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	430a      	orrs	r2, r1
 800ab88:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d064      	beq.n	800ac60 <UART_AdvFeatureConfig+0x264>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	4a2d      	ldr	r2, [pc, #180]	; (800ac50 <UART_AdvFeatureConfig+0x254>)
 800ab9c:	4293      	cmp	r3, r2
 800ab9e:	d013      	beq.n	800abc8 <UART_AdvFeatureConfig+0x1cc>
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	4a2b      	ldr	r2, [pc, #172]	; (800ac54 <UART_AdvFeatureConfig+0x258>)
 800aba6:	4293      	cmp	r3, r2
 800aba8:	d00e      	beq.n	800abc8 <UART_AdvFeatureConfig+0x1cc>
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	4a2a      	ldr	r2, [pc, #168]	; (800ac58 <UART_AdvFeatureConfig+0x25c>)
 800abb0:	4293      	cmp	r3, r2
 800abb2:	d009      	beq.n	800abc8 <UART_AdvFeatureConfig+0x1cc>
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	4a28      	ldr	r2, [pc, #160]	; (800ac5c <UART_AdvFeatureConfig+0x260>)
 800abba:	4293      	cmp	r3, r2
 800abbc:	d004      	beq.n	800abc8 <UART_AdvFeatureConfig+0x1cc>
 800abbe:	f640 4115 	movw	r1, #3093	; 0xc15
 800abc2:	4822      	ldr	r0, [pc, #136]	; (800ac4c <UART_AdvFeatureConfig+0x250>)
 800abc4:	f7f7 ff75 	bl	8002ab2 <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d009      	beq.n	800abe4 <UART_AdvFeatureConfig+0x1e8>
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abd4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800abd8:	d004      	beq.n	800abe4 <UART_AdvFeatureConfig+0x1e8>
 800abda:	f640 4116 	movw	r1, #3094	; 0xc16
 800abde:	481b      	ldr	r0, [pc, #108]	; (800ac4c <UART_AdvFeatureConfig+0x250>)
 800abe0:	f7f7 ff67 	bl	8002ab2 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	685b      	ldr	r3, [r3, #4]
 800abea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	430a      	orrs	r2, r1
 800abf8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abfe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ac02:	d12d      	bne.n	800ac60 <UART_AdvFeatureConfig+0x264>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d013      	beq.n	800ac34 <UART_AdvFeatureConfig+0x238>
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac10:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ac14:	d00e      	beq.n	800ac34 <UART_AdvFeatureConfig+0x238>
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac1a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ac1e:	d009      	beq.n	800ac34 <UART_AdvFeatureConfig+0x238>
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac24:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800ac28:	d004      	beq.n	800ac34 <UART_AdvFeatureConfig+0x238>
 800ac2a:	f640 411b 	movw	r1, #3099	; 0xc1b
 800ac2e:	4807      	ldr	r0, [pc, #28]	; (800ac4c <UART_AdvFeatureConfig+0x250>)
 800ac30:	f7f7 ff3f 	bl	8002ab2 <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	685b      	ldr	r3, [r3, #4]
 800ac3a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	430a      	orrs	r2, r1
 800ac48:	605a      	str	r2, [r3, #4]
 800ac4a:	e009      	b.n	800ac60 <UART_AdvFeatureConfig+0x264>
 800ac4c:	08016888 	.word	0x08016888
 800ac50:	40011000 	.word	0x40011000
 800ac54:	40004400 	.word	0x40004400
 800ac58:	40004800 	.word	0x40004800
 800ac5c:	40011400 	.word	0x40011400
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d018      	beq.n	800ac9e <UART_AdvFeatureConfig+0x2a2>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d009      	beq.n	800ac88 <UART_AdvFeatureConfig+0x28c>
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ac78:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800ac7c:	d004      	beq.n	800ac88 <UART_AdvFeatureConfig+0x28c>
 800ac7e:	f640 4123 	movw	r1, #3107	; 0xc23
 800ac82:	4809      	ldr	r0, [pc, #36]	; (800aca8 <UART_AdvFeatureConfig+0x2ac>)
 800ac84:	f7f7 ff15 	bl	8002ab2 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	685b      	ldr	r3, [r3, #4]
 800ac8e:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	430a      	orrs	r2, r1
 800ac9c:	605a      	str	r2, [r3, #4]
  }
}
 800ac9e:	bf00      	nop
 800aca0:	3708      	adds	r7, #8
 800aca2:	46bd      	mov	sp, r7
 800aca4:	bd80      	pop	{r7, pc}
 800aca6:	bf00      	nop
 800aca8:	08016888 	.word	0x08016888

0800acac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800acac:	b580      	push	{r7, lr}
 800acae:	b086      	sub	sp, #24
 800acb0:	af02      	add	r7, sp, #8
 800acb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	2200      	movs	r2, #0
 800acb8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800acbc:	f7f8 fd2c 	bl	8003718 <HAL_GetTick>
 800acc0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	f003 0308 	and.w	r3, r3, #8
 800accc:	2b08      	cmp	r3, #8
 800acce:	d10e      	bne.n	800acee <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800acd0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800acd4:	9300      	str	r3, [sp, #0]
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	2200      	movs	r2, #0
 800acda:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800acde:	6878      	ldr	r0, [r7, #4]
 800ace0:	f000 f81b 	bl	800ad1a <UART_WaitOnFlagUntilTimeout>
 800ace4:	4603      	mov	r3, r0
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d001      	beq.n	800acee <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800acea:	2303      	movs	r3, #3
 800acec:	e011      	b.n	800ad12 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	2220      	movs	r2, #32
 800acf2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	2220      	movs	r2, #32
 800acf8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	2200      	movs	r2, #0
 800ad00:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	2200      	movs	r2, #0
 800ad06:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	2200      	movs	r2, #0
 800ad0c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800ad10:	2300      	movs	r3, #0
}
 800ad12:	4618      	mov	r0, r3
 800ad14:	3710      	adds	r7, #16
 800ad16:	46bd      	mov	sp, r7
 800ad18:	bd80      	pop	{r7, pc}

0800ad1a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ad1a:	b580      	push	{r7, lr}
 800ad1c:	b09c      	sub	sp, #112	; 0x70
 800ad1e:	af00      	add	r7, sp, #0
 800ad20:	60f8      	str	r0, [r7, #12]
 800ad22:	60b9      	str	r1, [r7, #8]
 800ad24:	603b      	str	r3, [r7, #0]
 800ad26:	4613      	mov	r3, r2
 800ad28:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ad2a:	e0a7      	b.n	800ae7c <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ad2c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ad2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad32:	f000 80a3 	beq.w	800ae7c <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ad36:	f7f8 fcef 	bl	8003718 <HAL_GetTick>
 800ad3a:	4602      	mov	r2, r0
 800ad3c:	683b      	ldr	r3, [r7, #0]
 800ad3e:	1ad3      	subs	r3, r2, r3
 800ad40:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800ad42:	429a      	cmp	r2, r3
 800ad44:	d302      	bcc.n	800ad4c <UART_WaitOnFlagUntilTimeout+0x32>
 800ad46:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d13f      	bne.n	800adcc <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ad54:	e853 3f00 	ldrex	r3, [r3]
 800ad58:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800ad5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ad5c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ad60:	667b      	str	r3, [r7, #100]	; 0x64
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	461a      	mov	r2, r3
 800ad68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ad6a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ad6c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad6e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ad70:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ad72:	e841 2300 	strex	r3, r2, [r1]
 800ad76:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800ad78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d1e6      	bne.n	800ad4c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	3308      	adds	r3, #8
 800ad84:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad88:	e853 3f00 	ldrex	r3, [r3]
 800ad8c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ad8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad90:	f023 0301 	bic.w	r3, r3, #1
 800ad94:	663b      	str	r3, [r7, #96]	; 0x60
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	3308      	adds	r3, #8
 800ad9c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ad9e:	64ba      	str	r2, [r7, #72]	; 0x48
 800ada0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ada2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ada4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ada6:	e841 2300 	strex	r3, r2, [r1]
 800adaa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800adac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d1e5      	bne.n	800ad7e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	2220      	movs	r2, #32
 800adb6:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	2220      	movs	r2, #32
 800adbc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	2200      	movs	r2, #0
 800adc4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800adc8:	2303      	movs	r3, #3
 800adca:	e068      	b.n	800ae9e <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	f003 0304 	and.w	r3, r3, #4
 800add6:	2b00      	cmp	r3, #0
 800add8:	d050      	beq.n	800ae7c <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	69db      	ldr	r3, [r3, #28]
 800ade0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ade4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ade8:	d148      	bne.n	800ae7c <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800adf2:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adfc:	e853 3f00 	ldrex	r3, [r3]
 800ae00:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ae02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae04:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ae08:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	461a      	mov	r2, r3
 800ae10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ae12:	637b      	str	r3, [r7, #52]	; 0x34
 800ae14:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae16:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ae18:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ae1a:	e841 2300 	strex	r3, r2, [r1]
 800ae1e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ae20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d1e6      	bne.n	800adf4 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	3308      	adds	r3, #8
 800ae2c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae2e:	697b      	ldr	r3, [r7, #20]
 800ae30:	e853 3f00 	ldrex	r3, [r3]
 800ae34:	613b      	str	r3, [r7, #16]
   return(result);
 800ae36:	693b      	ldr	r3, [r7, #16]
 800ae38:	f023 0301 	bic.w	r3, r3, #1
 800ae3c:	66bb      	str	r3, [r7, #104]	; 0x68
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	3308      	adds	r3, #8
 800ae44:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ae46:	623a      	str	r2, [r7, #32]
 800ae48:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae4a:	69f9      	ldr	r1, [r7, #28]
 800ae4c:	6a3a      	ldr	r2, [r7, #32]
 800ae4e:	e841 2300 	strex	r3, r2, [r1]
 800ae52:	61bb      	str	r3, [r7, #24]
   return(result);
 800ae54:	69bb      	ldr	r3, [r7, #24]
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d1e5      	bne.n	800ae26 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	2220      	movs	r2, #32
 800ae5e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	2220      	movs	r2, #32
 800ae64:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	2220      	movs	r2, #32
 800ae6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	2200      	movs	r2, #0
 800ae74:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800ae78:	2303      	movs	r3, #3
 800ae7a:	e010      	b.n	800ae9e <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	69da      	ldr	r2, [r3, #28]
 800ae82:	68bb      	ldr	r3, [r7, #8]
 800ae84:	4013      	ands	r3, r2
 800ae86:	68ba      	ldr	r2, [r7, #8]
 800ae88:	429a      	cmp	r2, r3
 800ae8a:	bf0c      	ite	eq
 800ae8c:	2301      	moveq	r3, #1
 800ae8e:	2300      	movne	r3, #0
 800ae90:	b2db      	uxtb	r3, r3
 800ae92:	461a      	mov	r2, r3
 800ae94:	79fb      	ldrb	r3, [r7, #7]
 800ae96:	429a      	cmp	r2, r3
 800ae98:	f43f af48 	beq.w	800ad2c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ae9c:	2300      	movs	r3, #0
}
 800ae9e:	4618      	mov	r0, r3
 800aea0:	3770      	adds	r7, #112	; 0x70
 800aea2:	46bd      	mov	sp, r7
 800aea4:	bd80      	pop	{r7, pc}

0800aea6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800aea6:	b480      	push	{r7}
 800aea8:	b095      	sub	sp, #84	; 0x54
 800aeaa:	af00      	add	r7, sp, #0
 800aeac:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aeb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aeb6:	e853 3f00 	ldrex	r3, [r3]
 800aeba:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800aebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aebe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800aec2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	461a      	mov	r2, r3
 800aeca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aecc:	643b      	str	r3, [r7, #64]	; 0x40
 800aece:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aed0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800aed2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800aed4:	e841 2300 	strex	r3, r2, [r1]
 800aed8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800aeda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d1e6      	bne.n	800aeae <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	3308      	adds	r3, #8
 800aee6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aee8:	6a3b      	ldr	r3, [r7, #32]
 800aeea:	e853 3f00 	ldrex	r3, [r3]
 800aeee:	61fb      	str	r3, [r7, #28]
   return(result);
 800aef0:	69fb      	ldr	r3, [r7, #28]
 800aef2:	f023 0301 	bic.w	r3, r3, #1
 800aef6:	64bb      	str	r3, [r7, #72]	; 0x48
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	3308      	adds	r3, #8
 800aefe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800af00:	62fa      	str	r2, [r7, #44]	; 0x2c
 800af02:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af04:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800af06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800af08:	e841 2300 	strex	r3, r2, [r1]
 800af0c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800af0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af10:	2b00      	cmp	r3, #0
 800af12:	d1e5      	bne.n	800aee0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800af18:	2b01      	cmp	r3, #1
 800af1a:	d118      	bne.n	800af4e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	e853 3f00 	ldrex	r3, [r3]
 800af28:	60bb      	str	r3, [r7, #8]
   return(result);
 800af2a:	68bb      	ldr	r3, [r7, #8]
 800af2c:	f023 0310 	bic.w	r3, r3, #16
 800af30:	647b      	str	r3, [r7, #68]	; 0x44
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	461a      	mov	r2, r3
 800af38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800af3a:	61bb      	str	r3, [r7, #24]
 800af3c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af3e:	6979      	ldr	r1, [r7, #20]
 800af40:	69ba      	ldr	r2, [r7, #24]
 800af42:	e841 2300 	strex	r3, r2, [r1]
 800af46:	613b      	str	r3, [r7, #16]
   return(result);
 800af48:	693b      	ldr	r3, [r7, #16]
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d1e6      	bne.n	800af1c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	2220      	movs	r2, #32
 800af52:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	2200      	movs	r2, #0
 800af5a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	2200      	movs	r2, #0
 800af60:	669a      	str	r2, [r3, #104]	; 0x68
}
 800af62:	bf00      	nop
 800af64:	3754      	adds	r7, #84	; 0x54
 800af66:	46bd      	mov	sp, r7
 800af68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af6c:	4770      	bx	lr

0800af6e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800af6e:	b580      	push	{r7, lr}
 800af70:	b084      	sub	sp, #16
 800af72:	af00      	add	r7, sp, #0
 800af74:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af7a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	2200      	movs	r2, #0
 800af80:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	2200      	movs	r2, #0
 800af88:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800af8c:	68f8      	ldr	r0, [r7, #12]
 800af8e:	f7ff fa29 	bl	800a3e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800af92:	bf00      	nop
 800af94:	3710      	adds	r7, #16
 800af96:	46bd      	mov	sp, r7
 800af98:	bd80      	pop	{r7, pc}

0800af9a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800af9a:	b580      	push	{r7, lr}
 800af9c:	b088      	sub	sp, #32
 800af9e:	af00      	add	r7, sp, #0
 800afa0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	e853 3f00 	ldrex	r3, [r3]
 800afae:	60bb      	str	r3, [r7, #8]
   return(result);
 800afb0:	68bb      	ldr	r3, [r7, #8]
 800afb2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800afb6:	61fb      	str	r3, [r7, #28]
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	461a      	mov	r2, r3
 800afbe:	69fb      	ldr	r3, [r7, #28]
 800afc0:	61bb      	str	r3, [r7, #24]
 800afc2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afc4:	6979      	ldr	r1, [r7, #20]
 800afc6:	69ba      	ldr	r2, [r7, #24]
 800afc8:	e841 2300 	strex	r3, r2, [r1]
 800afcc:	613b      	str	r3, [r7, #16]
   return(result);
 800afce:	693b      	ldr	r3, [r7, #16]
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d1e6      	bne.n	800afa2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	2220      	movs	r2, #32
 800afd8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	2200      	movs	r2, #0
 800afde:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800afe0:	6878      	ldr	r0, [r7, #4]
 800afe2:	f7ff f9f5 	bl	800a3d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800afe6:	bf00      	nop
 800afe8:	3720      	adds	r7, #32
 800afea:	46bd      	mov	sp, r7
 800afec:	bd80      	pop	{r7, pc}

0800afee <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 800afee:	b580      	push	{r7, lr}
 800aff0:	b084      	sub	sp, #16
 800aff2:	af00      	add	r7, sp, #0
 800aff4:	6078      	str	r0, [r7, #4]
 800aff6:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800aff8:	2300      	movs	r3, #0
 800affa:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 800affc:	6839      	ldr	r1, [r7, #0]
 800affe:	6878      	ldr	r0, [r7, #4]
 800b000:	f001 fd10 	bl	800ca24 <VL53L0X_get_offset_calibration_data_micro_meter>
 800b004:	4603      	mov	r3, r0
 800b006:	73fb      	strb	r3, [r7, #15]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
 800b008:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b00c:	4618      	mov	r0, r3
 800b00e:	3710      	adds	r7, #16
 800b010:	46bd      	mov	sp, r7
 800b012:	bd80      	pop	{r7, pc}

0800b014 <VL53L0X_DataInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 800b014:	b5b0      	push	{r4, r5, r7, lr}
 800b016:	b096      	sub	sp, #88	; 0x58
 800b018:	af00      	add	r7, sp, #0
 800b01a:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b01c:	2300      	movs	r3, #0
 800b01e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 800b022:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b026:	2b00      	cmp	r3, #0
 800b028:	d107      	bne.n	800b03a <VL53L0X_DataInit+0x26>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 800b02a:	2200      	movs	r2, #0
 800b02c:	2188      	movs	r1, #136	; 0x88
 800b02e:	6878      	ldr	r0, [r7, #4]
 800b030:	f004 ff2e 	bl	800fe90 <VL53L0X_WrByte>
 800b034:	4603      	mov	r3, r0
 800b036:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	2200      	movs	r2, #0
 800b03e:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b048:	f8a3 2152 	strh.w	r2, [r3, #338]	; 0x152

	/* Dmax default Parameter */
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800b052:	f8a3 2154 	strh.w	r2, [r3, #340]	; 0x154
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	4a9e      	ldr	r2, [pc, #632]	; (800b2d4 <VL53L0X_DataInit+0x2c0>)
 800b05a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
		(FixPoint1616_t)((0x00016B85))); /* 1.42 No Cover Glass*/

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	4a9d      	ldr	r2, [pc, #628]	; (800b2d8 <VL53L0X_DataInit+0x2c4>)
 800b062:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	2200      	movs	r2, #0
 800b06a:	621a      	str	r2, [r3, #32]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 800b06c:	f107 0310 	add.w	r3, r7, #16
 800b070:	4619      	mov	r1, r3
 800b072:	6878      	ldr	r0, [r7, #4]
 800b074:	f000 fac2 	bl	800b5fc <VL53L0X_GetDeviceParameters>
 800b078:	4603      	mov	r3, r0
 800b07a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (Status == VL53L0X_ERROR_NONE) {
 800b07e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b082:	2b00      	cmp	r3, #0
 800b084:	d112      	bne.n	800b0ac <VL53L0X_DataInit+0x98>
		/* initialize PAL values */
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 800b086:	2300      	movs	r3, #0
 800b088:	743b      	strb	r3, [r7, #16]
		CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 800b08a:	2300      	movs	r3, #0
 800b08c:	747b      	strb	r3, [r7, #17]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	f103 0410 	add.w	r4, r3, #16
 800b094:	f107 0510 	add.w	r5, r7, #16
 800b098:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b09a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b09c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b09e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b0a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b0a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b0a4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800b0a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	2264      	movs	r2, #100	; 0x64
 800b0b0:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	f44f 7261 	mov.w	r2, #900	; 0x384
 800b0ba:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800b0c4:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800b0ce:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	2201      	movs	r2, #1
 800b0d6:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150

	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800b0da:	2201      	movs	r2, #1
 800b0dc:	2180      	movs	r1, #128	; 0x80
 800b0de:	6878      	ldr	r0, [r7, #4]
 800b0e0:	f004 fed6 	bl	800fe90 <VL53L0X_WrByte>
 800b0e4:	4603      	mov	r3, r0
 800b0e6:	461a      	mov	r2, r3
 800b0e8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b0ec:	4313      	orrs	r3, r2
 800b0ee:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800b0f2:	2201      	movs	r2, #1
 800b0f4:	21ff      	movs	r1, #255	; 0xff
 800b0f6:	6878      	ldr	r0, [r7, #4]
 800b0f8:	f004 feca 	bl	800fe90 <VL53L0X_WrByte>
 800b0fc:	4603      	mov	r3, r0
 800b0fe:	461a      	mov	r2, r3
 800b100:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b104:	4313      	orrs	r3, r2
 800b106:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800b10a:	2200      	movs	r2, #0
 800b10c:	2100      	movs	r1, #0
 800b10e:	6878      	ldr	r0, [r7, #4]
 800b110:	f004 febe 	bl	800fe90 <VL53L0X_WrByte>
 800b114:	4603      	mov	r3, r0
 800b116:	461a      	mov	r2, r3
 800b118:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b11c:	4313      	orrs	r3, r2
 800b11e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 800b122:	f107 030f 	add.w	r3, r7, #15
 800b126:	461a      	mov	r2, r3
 800b128:	2191      	movs	r1, #145	; 0x91
 800b12a:	6878      	ldr	r0, [r7, #4]
 800b12c:	f004 ff32 	bl	800ff94 <VL53L0X_RdByte>
 800b130:	4603      	mov	r3, r0
 800b132:	461a      	mov	r2, r3
 800b134:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b138:	4313      	orrs	r3, r2
 800b13a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	PALDevDataSet(Dev, StopVariable, StopVariable);
 800b13e:	7bfa      	ldrb	r2, [r7, #15]
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800b146:	2201      	movs	r2, #1
 800b148:	2100      	movs	r1, #0
 800b14a:	6878      	ldr	r0, [r7, #4]
 800b14c:	f004 fea0 	bl	800fe90 <VL53L0X_WrByte>
 800b150:	4603      	mov	r3, r0
 800b152:	461a      	mov	r2, r3
 800b154:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b158:	4313      	orrs	r3, r2
 800b15a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800b15e:	2200      	movs	r2, #0
 800b160:	21ff      	movs	r1, #255	; 0xff
 800b162:	6878      	ldr	r0, [r7, #4]
 800b164:	f004 fe94 	bl	800fe90 <VL53L0X_WrByte>
 800b168:	4603      	mov	r3, r0
 800b16a:	461a      	mov	r2, r3
 800b16c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b170:	4313      	orrs	r3, r2
 800b172:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800b176:	2200      	movs	r2, #0
 800b178:	2180      	movs	r1, #128	; 0x80
 800b17a:	6878      	ldr	r0, [r7, #4]
 800b17c:	f004 fe88 	bl	800fe90 <VL53L0X_WrByte>
 800b180:	4603      	mov	r3, r0
 800b182:	461a      	mov	r2, r3
 800b184:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b188:	4313      	orrs	r3, r2
 800b18a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800b18e:	2300      	movs	r3, #0
 800b190:	653b      	str	r3, [r7, #80]	; 0x50
 800b192:	e014      	b.n	800b1be <VL53L0X_DataInit+0x1aa>
		if (Status == VL53L0X_ERROR_NONE)
 800b194:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d114      	bne.n	800b1c6 <VL53L0X_DataInit+0x1b2>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 800b19c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b19e:	b29b      	uxth	r3, r3
 800b1a0:	2201      	movs	r2, #1
 800b1a2:	4619      	mov	r1, r3
 800b1a4:	6878      	ldr	r0, [r7, #4]
 800b1a6:	f000 fd4d 	bl	800bc44 <VL53L0X_SetLimitCheckEnable>
 800b1aa:	4603      	mov	r3, r0
 800b1ac:	461a      	mov	r2, r3
 800b1ae:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b1b2:	4313      	orrs	r3, r2
 800b1b4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800b1b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b1ba:	3301      	adds	r3, #1
 800b1bc:	653b      	str	r3, [r7, #80]	; 0x50
 800b1be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b1c0:	2b05      	cmp	r3, #5
 800b1c2:	dde7      	ble.n	800b194 <VL53L0X_DataInit+0x180>
 800b1c4:	e000      	b.n	800b1c8 <VL53L0X_DataInit+0x1b4>
		else
			break;
 800b1c6:	bf00      	nop

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 800b1c8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d107      	bne.n	800b1e0 <VL53L0X_DataInit+0x1cc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 800b1d0:	2200      	movs	r2, #0
 800b1d2:	2102      	movs	r1, #2
 800b1d4:	6878      	ldr	r0, [r7, #4]
 800b1d6:	f000 fd35 	bl	800bc44 <VL53L0X_SetLimitCheckEnable>
 800b1da:	4603      	mov	r3, r0
 800b1dc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 800b1e0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d107      	bne.n	800b1f8 <VL53L0X_DataInit+0x1e4>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 800b1e8:	2200      	movs	r2, #0
 800b1ea:	2103      	movs	r1, #3
 800b1ec:	6878      	ldr	r0, [r7, #4]
 800b1ee:	f000 fd29 	bl	800bc44 <VL53L0X_SetLimitCheckEnable>
 800b1f2:	4603      	mov	r3, r0
 800b1f4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 800b1f8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d107      	bne.n	800b210 <VL53L0X_DataInit+0x1fc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 800b200:	2200      	movs	r2, #0
 800b202:	2104      	movs	r1, #4
 800b204:	6878      	ldr	r0, [r7, #4]
 800b206:	f000 fd1d 	bl	800bc44 <VL53L0X_SetLimitCheckEnable>
 800b20a:	4603      	mov	r3, r0
 800b20c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 800b210:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b214:	2b00      	cmp	r3, #0
 800b216:	d107      	bne.n	800b228 <VL53L0X_DataInit+0x214>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 800b218:	2200      	movs	r2, #0
 800b21a:	2105      	movs	r1, #5
 800b21c:	6878      	ldr	r0, [r7, #4]
 800b21e:	f000 fd11 	bl	800bc44 <VL53L0X_SetLimitCheckEnable>
 800b222:	4603      	mov	r3, r0
 800b224:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 800b228:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d108      	bne.n	800b242 <VL53L0X_DataInit+0x22e>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800b230:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 800b234:	2100      	movs	r1, #0
 800b236:	6878      	ldr	r0, [r7, #4]
 800b238:	f000 fdb4 	bl	800bda4 <VL53L0X_SetLimitCheckValue>
 800b23c:	4603      	mov	r3, r0
 800b23e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800b242:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b246:	2b00      	cmp	r3, #0
 800b248:	d108      	bne.n	800b25c <VL53L0X_DataInit+0x248>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800b24a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800b24e:	2101      	movs	r1, #1
 800b250:	6878      	ldr	r0, [r7, #4]
 800b252:	f000 fda7 	bl	800bda4 <VL53L0X_SetLimitCheckValue>
 800b256:	4603      	mov	r3, r0
 800b258:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800b25c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b260:	2b00      	cmp	r3, #0
 800b262:	d108      	bne.n	800b276 <VL53L0X_DataInit+0x262>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800b264:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 800b268:	2102      	movs	r1, #2
 800b26a:	6878      	ldr	r0, [r7, #4]
 800b26c:	f000 fd9a 	bl	800bda4 <VL53L0X_SetLimitCheckValue>
 800b270:	4603      	mov	r3, r0
 800b272:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800b276:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d107      	bne.n	800b28e <VL53L0X_DataInit+0x27a>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800b27e:	2200      	movs	r2, #0
 800b280:	2103      	movs	r1, #3
 800b282:	6878      	ldr	r0, [r7, #4]
 800b284:	f000 fd8e 	bl	800bda4 <VL53L0X_SetLimitCheckValue>
 800b288:	4603      	mov	r3, r0
 800b28a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800b28e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b292:	2b00      	cmp	r3, #0
 800b294:	d10f      	bne.n	800b2b6 <VL53L0X_DataInit+0x2a2>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	22ff      	movs	r2, #255	; 0xff
 800b29a:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800b29e:	22ff      	movs	r2, #255	; 0xff
 800b2a0:	2101      	movs	r1, #1
 800b2a2:	6878      	ldr	r0, [r7, #4]
 800b2a4:	f004 fdf4 	bl	800fe90 <VL53L0X_WrByte>
 800b2a8:	4603      	mov	r3, r0
 800b2aa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	2201      	movs	r2, #1
 800b2b2:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
	}

	if (Status == VL53L0X_ERROR_NONE)
 800b2b6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d103      	bne.n	800b2c6 <VL53L0X_DataInit+0x2b2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	2200      	movs	r2, #0
 800b2c2:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115


	LOG_FUNCTION_END(Status);
	return Status;
 800b2c6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 800b2ca:	4618      	mov	r0, r3
 800b2cc:	3758      	adds	r7, #88	; 0x58
 800b2ce:	46bd      	mov	sp, r7
 800b2d0:	bdb0      	pop	{r4, r5, r7, pc}
 800b2d2:	bf00      	nop
 800b2d4:	00016b85 	.word	0x00016b85
 800b2d8:	000970a4 	.word	0x000970a4

0800b2dc <VL53L0X_StaticInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev)
{
 800b2dc:	b5b0      	push	{r4, r5, r7, lr}
 800b2de:	b09e      	sub	sp, #120	; 0x78
 800b2e0:	af02      	add	r7, sp, #8
 800b2e2:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b2e4:	2300      	movs	r3, #0
 800b2e6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 800b2ea:	f107 031c 	add.w	r3, r7, #28
 800b2ee:	2240      	movs	r2, #64	; 0x40
 800b2f0:	2100      	movs	r1, #0
 800b2f2:	4618      	mov	r0, r3
 800b2f4:	f004 ff34 	bl	8010160 <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 800b2f8:	2300      	movs	r3, #0
 800b2fa:	837b      	strh	r3, [r7, #26]
	uint8_t tempbyte = 0;
 800b2fc:	2300      	movs	r3, #0
 800b2fe:	767b      	strb	r3, [r7, #25]
	uint8_t UseInternalTuningSettings = 0;
 800b300:	2300      	movs	r3, #0
 800b302:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint32_t count = 0;
 800b306:	2300      	movs	r3, #0
 800b308:	663b      	str	r3, [r7, #96]	; 0x60
	uint8_t isApertureSpads = 0;
 800b30a:	2300      	movs	r3, #0
 800b30c:	763b      	strb	r3, [r7, #24]
	uint32_t refSpadCount = 0;
 800b30e:	2300      	movs	r3, #0
 800b310:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 800b312:	2300      	movs	r3, #0
 800b314:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t vcselPulsePeriodPCLK;
	uint32_t seqTimeoutMicroSecs;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 1);
 800b318:	2101      	movs	r1, #1
 800b31a:	6878      	ldr	r0, [r7, #4]
 800b31c:	f002 fafc 	bl	800d918 <VL53L0X_get_info_from_device>
 800b320:	4603      	mov	r3, r0
 800b322:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 800b32c:	663b      	str	r3, [r7, #96]	; 0x60
		ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 800b334:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		ReferenceSpadType);

	/* NVM value invalid */
	if ((ApertureSpads > 1) ||
 800b338:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b33c:	2b01      	cmp	r3, #1
 800b33e:	d80d      	bhi.n	800b35c <VL53L0X_StaticInit+0x80>
 800b340:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b344:	2b01      	cmp	r3, #1
 800b346:	d102      	bne.n	800b34e <VL53L0X_StaticInit+0x72>
		((ApertureSpads == 1) && (count > 32)) ||
 800b348:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b34a:	2b20      	cmp	r3, #32
 800b34c:	d806      	bhi.n	800b35c <VL53L0X_StaticInit+0x80>
 800b34e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b352:	2b00      	cmp	r3, #0
 800b354:	d10e      	bne.n	800b374 <VL53L0X_StaticInit+0x98>
		((ApertureSpads == 0) && (count > 12)))
 800b356:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b358:	2b0c      	cmp	r3, #12
 800b35a:	d90b      	bls.n	800b374 <VL53L0X_StaticInit+0x98>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 800b35c:	f107 0218 	add.w	r2, r7, #24
 800b360:	f107 0314 	add.w	r3, r7, #20
 800b364:	4619      	mov	r1, r3
 800b366:	6878      	ldr	r0, [r7, #4]
 800b368:	f001 fd58 	bl	800ce1c <VL53L0X_perform_ref_spad_management>
 800b36c:	4603      	mov	r3, r0
 800b36e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800b372:	e009      	b.n	800b388 <VL53L0X_StaticInit+0xac>
			&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 800b374:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b378:	461a      	mov	r2, r3
 800b37a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800b37c:	6878      	ldr	r0, [r7, #4]
 800b37e:	f001 ff59 	bl	800d234 <VL53L0X_set_reference_spads>
 800b382:	4603      	mov	r3, r0
 800b384:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 800b388:	4b94      	ldr	r3, [pc, #592]	; (800b5dc <VL53L0X_StaticInit+0x300>)
 800b38a:	66bb      	str	r3, [r7, #104]	; 0x68

	if (Status == VL53L0X_ERROR_NONE) {
 800b38c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b390:	2b00      	cmp	r3, #0
 800b392:	d10f      	bne.n	800b3b4 <VL53L0X_StaticInit+0xd8>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 800b39a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 800b39e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d104      	bne.n	800b3b0 <VL53L0X_StaticInit+0xd4>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 800b3ac:	66bb      	str	r3, [r7, #104]	; 0x68
 800b3ae:	e001      	b.n	800b3b4 <VL53L0X_StaticInit+0xd8>
				pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 800b3b0:	4b8a      	ldr	r3, [pc, #552]	; (800b5dc <VL53L0X_StaticInit+0x300>)
 800b3b2:	66bb      	str	r3, [r7, #104]	; 0x68

	}

	if (Status == VL53L0X_ERROR_NONE)
 800b3b4:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d106      	bne.n	800b3ca <VL53L0X_StaticInit+0xee>
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 800b3bc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b3be:	6878      	ldr	r0, [r7, #4]
 800b3c0:	f003 fe50 	bl	800f064 <VL53L0X_load_tuning_settings>
 800b3c4:	4603      	mov	r3, r0
 800b3c6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 800b3ca:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d10a      	bne.n	800b3e8 <VL53L0X_StaticInit+0x10c>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 800b3d2:	2300      	movs	r3, #0
 800b3d4:	9300      	str	r3, [sp, #0]
 800b3d6:	2304      	movs	r3, #4
 800b3d8:	2200      	movs	r2, #0
 800b3da:	2100      	movs	r1, #0
 800b3dc:	6878      	ldr	r0, [r7, #4]
 800b3de:	f001 f909 	bl	800c5f4 <VL53L0X_SetGpioConfig>
 800b3e2:	4603      	mov	r3, r0
 800b3e4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800b3e8:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d121      	bne.n	800b434 <VL53L0X_StaticInit+0x158>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800b3f0:	2201      	movs	r2, #1
 800b3f2:	21ff      	movs	r1, #255	; 0xff
 800b3f4:	6878      	ldr	r0, [r7, #4]
 800b3f6:	f004 fd4b 	bl	800fe90 <VL53L0X_WrByte>
 800b3fa:	4603      	mov	r3, r0
 800b3fc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 800b400:	f107 031a 	add.w	r3, r7, #26
 800b404:	461a      	mov	r2, r3
 800b406:	2184      	movs	r1, #132	; 0x84
 800b408:	6878      	ldr	r0, [r7, #4]
 800b40a:	f004 fded 	bl	800ffe8 <VL53L0X_RdWord>
 800b40e:	4603      	mov	r3, r0
 800b410:	461a      	mov	r2, r3
 800b412:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800b416:	4313      	orrs	r3, r2
 800b418:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800b41c:	2200      	movs	r2, #0
 800b41e:	21ff      	movs	r1, #255	; 0xff
 800b420:	6878      	ldr	r0, [r7, #4]
 800b422:	f004 fd35 	bl	800fe90 <VL53L0X_WrByte>
 800b426:	4603      	mov	r3, r0
 800b428:	461a      	mov	r2, r3
 800b42a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800b42e:	4313      	orrs	r3, r2
 800b430:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800b434:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d105      	bne.n	800b448 <VL53L0X_StaticInit+0x16c>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 800b43c:	8b7b      	ldrh	r3, [r7, #26]
 800b43e:	011b      	lsls	r3, r3, #4
 800b440:	461a      	mov	r2, r3
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
			VL53L0X_FIXPOINT412TOFIXPOINT1616(tempword));
	}

	/* After static init, some device parameters may be changed,
	 * so update them */
	if (Status == VL53L0X_ERROR_NONE)
 800b448:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d108      	bne.n	800b462 <VL53L0X_StaticInit+0x186>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 800b450:	f107 031c 	add.w	r3, r7, #28
 800b454:	4619      	mov	r1, r3
 800b456:	6878      	ldr	r0, [r7, #4]
 800b458:	f000 f8d0 	bl	800b5fc <VL53L0X_GetDeviceParameters>
 800b45c:	4603      	mov	r3, r0
 800b45e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	if (Status == VL53L0X_ERROR_NONE) {
 800b462:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b466:	2b00      	cmp	r3, #0
 800b468:	d110      	bne.n	800b48c <VL53L0X_StaticInit+0x1b0>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 800b46a:	f107 0319 	add.w	r3, r7, #25
 800b46e:	4619      	mov	r1, r3
 800b470:	6878      	ldr	r0, [r7, #4]
 800b472:	f000 f992 	bl	800b79a <VL53L0X_GetFractionEnable>
 800b476:	4603      	mov	r3, r0
 800b478:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (Status == VL53L0X_ERROR_NONE)
 800b47c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b480:	2b00      	cmp	r3, #0
 800b482:	d103      	bne.n	800b48c <VL53L0X_StaticInit+0x1b0>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 800b484:	7e7a      	ldrb	r2, [r7, #25]
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131

	}

	if (Status == VL53L0X_ERROR_NONE)
 800b48c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b490:	2b00      	cmp	r3, #0
 800b492:	d10e      	bne.n	800b4b2 <VL53L0X_StaticInit+0x1d6>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	f103 0410 	add.w	r4, r3, #16
 800b49a:	f107 051c 	add.w	r5, r7, #28
 800b49e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b4a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b4a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b4a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b4a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b4a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b4aa:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800b4ae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 800b4b2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d111      	bne.n	800b4de <VL53L0X_StaticInit+0x202>
		Status = VL53L0X_RdByte(Dev,
 800b4ba:	f107 0319 	add.w	r3, r7, #25
 800b4be:	461a      	mov	r2, r3
 800b4c0:	2101      	movs	r1, #1
 800b4c2:	6878      	ldr	r0, [r7, #4]
 800b4c4:	f004 fd66 	bl	800ff94 <VL53L0X_RdByte>
 800b4c8:	4603      	mov	r3, r0
 800b4ca:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 800b4ce:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d103      	bne.n	800b4de <VL53L0X_StaticInit+0x202>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 800b4d6:	7e7a      	ldrb	r2, [r7, #25]
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 800b4de:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d107      	bne.n	800b4f6 <VL53L0X_StaticInit+0x21a>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 800b4e6:	2200      	movs	r2, #0
 800b4e8:	2100      	movs	r1, #0
 800b4ea:	6878      	ldr	r0, [r7, #4]
 800b4ec:	f000 f9ca 	bl	800b884 <VL53L0X_SetSequenceStepEnable>
 800b4f0:	4603      	mov	r3, r0
 800b4f2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					VL53L0X_SEQUENCESTEP_TCC, 0);


	if (Status == VL53L0X_ERROR_NONE)
 800b4f6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d107      	bne.n	800b50e <VL53L0X_StaticInit+0x232>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 800b4fe:	2200      	movs	r2, #0
 800b500:	2102      	movs	r1, #2
 800b502:	6878      	ldr	r0, [r7, #4]
 800b504:	f000 f9be 	bl	800b884 <VL53L0X_SetSequenceStepEnable>
 800b508:	4603      	mov	r3, r0
 800b50a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_SEQUENCESTEP_MSRC, 0);


	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 800b50e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b512:	2b00      	cmp	r3, #0
 800b514:	d103      	bne.n	800b51e <VL53L0X_StaticInit+0x242>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	2203      	movs	r2, #3
 800b51a:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132



	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 800b51e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b522:	2b00      	cmp	r3, #0
 800b524:	d109      	bne.n	800b53a <VL53L0X_StaticInit+0x25e>
		Status = VL53L0X_GetVcselPulsePeriod(
 800b526:	f107 0313 	add.w	r3, r7, #19
 800b52a:	461a      	mov	r2, r3
 800b52c:	2100      	movs	r1, #0
 800b52e:	6878      	ldr	r0, [r7, #4]
 800b530:	f000 f990 	bl	800b854 <VL53L0X_GetVcselPulsePeriod>
 800b534:	4603      	mov	r3, r0
 800b536:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_PRE_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800b53a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d103      	bne.n	800b54a <VL53L0X_StaticInit+0x26e>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800b542:	7cfa      	ldrb	r2, [r7, #19]
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				PreRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 800b54a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d109      	bne.n	800b566 <VL53L0X_StaticInit+0x28a>
		Status = VL53L0X_GetVcselPulsePeriod(
 800b552:	f107 0313 	add.w	r3, r7, #19
 800b556:	461a      	mov	r2, r3
 800b558:	2101      	movs	r1, #1
 800b55a:	6878      	ldr	r0, [r7, #4]
 800b55c:	f000 f97a 	bl	800b854 <VL53L0X_GetVcselPulsePeriod>
 800b560:	4603      	mov	r3, r0
 800b562:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800b566:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d103      	bne.n	800b576 <VL53L0X_StaticInit+0x29a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800b56e:	7cfa      	ldrb	r2, [r7, #19]
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				FinalRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 800b576:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d109      	bne.n	800b592 <VL53L0X_StaticInit+0x2b6>
		Status = get_sequence_step_timeout(
 800b57e:	f107 030c 	add.w	r3, r7, #12
 800b582:	461a      	mov	r2, r3
 800b584:	2103      	movs	r1, #3
 800b586:	6878      	ldr	r0, [r7, #4]
 800b588:	f002 ff48 	bl	800e41c <get_sequence_step_timeout>
 800b58c:	4603      	mov	r3, r0
 800b58e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_PRE_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800b592:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b596:	2b00      	cmp	r3, #0
 800b598:	d103      	bne.n	800b5a2 <VL53L0X_StaticInit+0x2c6>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 800b59a:	68fa      	ldr	r2, [r7, #12]
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
			PreRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 800b5a2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d109      	bne.n	800b5be <VL53L0X_StaticInit+0x2e2>
		Status = get_sequence_step_timeout(
 800b5aa:	f107 030c 	add.w	r3, r7, #12
 800b5ae:	461a      	mov	r2, r3
 800b5b0:	2104      	movs	r1, #4
 800b5b2:	6878      	ldr	r0, [r7, #4]
 800b5b4:	f002 ff32 	bl	800e41c <get_sequence_step_timeout>
 800b5b8:	4603      	mov	r3, r0
 800b5ba:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800b5be:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d103      	bne.n	800b5ce <VL53L0X_StaticInit+0x2f2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 800b5c6:	68fa      	ldr	r2, [r7, #12]
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
			FinalRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b5ce:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 800b5d2:	4618      	mov	r0, r3
 800b5d4:	3770      	adds	r7, #112	; 0x70
 800b5d6:	46bd      	mov	sp, r7
 800b5d8:	bdb0      	pop	{r4, r5, r7, pc}
 800b5da:	bf00      	nop
 800b5dc:	200000d0 	.word	0x200000d0

0800b5e0 <VL53L0X_WaitDeviceBooted>:

VL53L0X_Error VL53L0X_WaitDeviceBooted(VL53L0X_DEV Dev)
{
 800b5e0:	b480      	push	{r7}
 800b5e2:	b085      	sub	sp, #20
 800b5e4:	af00      	add	r7, sp, #0
 800b5e6:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NOT_IMPLEMENTED;
 800b5e8:	239d      	movs	r3, #157	; 0x9d
 800b5ea:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	/* not implemented on VL53L0X */

	LOG_FUNCTION_END(Status);
	return Status;
 800b5ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b5f0:	4618      	mov	r0, r3
 800b5f2:	3714      	adds	r7, #20
 800b5f4:	46bd      	mov	sp, r7
 800b5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5fa:	4770      	bx	lr

0800b5fc <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 800b5fc:	b580      	push	{r7, lr}
 800b5fe:	b084      	sub	sp, #16
 800b600:	af00      	add	r7, sp, #0
 800b602:	6078      	str	r0, [r7, #4]
 800b604:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b606:	2300      	movs	r3, #0
 800b608:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 800b60a:	683b      	ldr	r3, [r7, #0]
 800b60c:	4619      	mov	r1, r3
 800b60e:	6878      	ldr	r0, [r7, #4]
 800b610:	f000 f8b0 	bl	800b774 <VL53L0X_GetDeviceMode>
 800b614:	4603      	mov	r3, r0
 800b616:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800b618:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d107      	bne.n	800b630 <VL53L0X_GetDeviceParameters+0x34>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 800b620:	683b      	ldr	r3, [r7, #0]
 800b622:	3308      	adds	r3, #8
 800b624:	4619      	mov	r1, r3
 800b626:	6878      	ldr	r0, [r7, #4]
 800b628:	f000 fa78 	bl	800bb1c <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 800b62c:	4603      	mov	r3, r0
 800b62e:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 800b630:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b634:	2b00      	cmp	r3, #0
 800b636:	d102      	bne.n	800b63e <VL53L0X_GetDeviceParameters+0x42>
		pDeviceParameters->XTalkCompensationEnable = 0;
 800b638:	683b      	ldr	r3, [r7, #0]
 800b63a:	2200      	movs	r2, #0
 800b63c:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 800b63e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b642:	2b00      	cmp	r3, #0
 800b644:	d107      	bne.n	800b656 <VL53L0X_GetDeviceParameters+0x5a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 800b646:	683b      	ldr	r3, [r7, #0]
 800b648:	3310      	adds	r3, #16
 800b64a:	4619      	mov	r1, r3
 800b64c:	6878      	ldr	r0, [r7, #4]
 800b64e:	f000 faae 	bl	800bbae <VL53L0X_GetXTalkCompensationRateMegaCps>
 800b652:	4603      	mov	r3, r0
 800b654:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 800b656:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d107      	bne.n	800b66e <VL53L0X_GetDeviceParameters+0x72>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 800b65e:	683b      	ldr	r3, [r7, #0]
 800b660:	3314      	adds	r3, #20
 800b662:	4619      	mov	r1, r3
 800b664:	6878      	ldr	r0, [r7, #4]
 800b666:	f7ff fcc2 	bl	800afee <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 800b66a:	4603      	mov	r3, r0
 800b66c:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 800b66e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b672:	2b00      	cmp	r3, #0
 800b674:	d134      	bne.n	800b6e0 <VL53L0X_GetDeviceParameters+0xe4>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800b676:	2300      	movs	r3, #0
 800b678:	60bb      	str	r3, [r7, #8]
 800b67a:	e02a      	b.n	800b6d2 <VL53L0X_GetDeviceParameters+0xd6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 800b67c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b680:	2b00      	cmp	r3, #0
 800b682:	d12a      	bne.n	800b6da <VL53L0X_GetDeviceParameters+0xde>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 800b684:	68bb      	ldr	r3, [r7, #8]
 800b686:	b299      	uxth	r1, r3
 800b688:	68bb      	ldr	r3, [r7, #8]
 800b68a:	3308      	adds	r3, #8
 800b68c:	009b      	lsls	r3, r3, #2
 800b68e:	683a      	ldr	r2, [r7, #0]
 800b690:	4413      	add	r3, r2
 800b692:	3304      	adds	r3, #4
 800b694:	461a      	mov	r2, r3
 800b696:	6878      	ldr	r0, [r7, #4]
 800b698:	f000 fbe6 	bl	800be68 <VL53L0X_GetLimitCheckValue>
 800b69c:	4603      	mov	r3, r0
 800b69e:	461a      	mov	r2, r3
 800b6a0:	7bfb      	ldrb	r3, [r7, #15]
 800b6a2:	4313      	orrs	r3, r2
 800b6a4:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 800b6a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d117      	bne.n	800b6de <VL53L0X_GetDeviceParameters+0xe2>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 800b6ae:	68bb      	ldr	r3, [r7, #8]
 800b6b0:	b299      	uxth	r1, r3
 800b6b2:	68bb      	ldr	r3, [r7, #8]
 800b6b4:	3318      	adds	r3, #24
 800b6b6:	683a      	ldr	r2, [r7, #0]
 800b6b8:	4413      	add	r3, r2
 800b6ba:	461a      	mov	r2, r3
 800b6bc:	6878      	ldr	r0, [r7, #4]
 800b6be:	f000 fb4d 	bl	800bd5c <VL53L0X_GetLimitCheckEnable>
 800b6c2:	4603      	mov	r3, r0
 800b6c4:	461a      	mov	r2, r3
 800b6c6:	7bfb      	ldrb	r3, [r7, #15]
 800b6c8:	4313      	orrs	r3, r2
 800b6ca:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800b6cc:	68bb      	ldr	r3, [r7, #8]
 800b6ce:	3301      	adds	r3, #1
 800b6d0:	60bb      	str	r3, [r7, #8]
 800b6d2:	68bb      	ldr	r3, [r7, #8]
 800b6d4:	2b05      	cmp	r3, #5
 800b6d6:	ddd1      	ble.n	800b67c <VL53L0X_GetDeviceParameters+0x80>
 800b6d8:	e002      	b.n	800b6e0 <VL53L0X_GetDeviceParameters+0xe4>
				break;
 800b6da:	bf00      	nop
 800b6dc:	e000      	b.n	800b6e0 <VL53L0X_GetDeviceParameters+0xe4>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 800b6de:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800b6e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d107      	bne.n	800b6f8 <VL53L0X_GetDeviceParameters+0xfc>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 800b6e8:	683b      	ldr	r3, [r7, #0]
 800b6ea:	333c      	adds	r3, #60	; 0x3c
 800b6ec:	4619      	mov	r1, r3
 800b6ee:	6878      	ldr	r0, [r7, #4]
 800b6f0:	f000 fc48 	bl	800bf84 <VL53L0X_GetWrapAroundCheckEnable>
 800b6f4:	4603      	mov	r3, r0
 800b6f6:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 800b6f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d107      	bne.n	800b710 <VL53L0X_GetDeviceParameters+0x114>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 800b700:	683b      	ldr	r3, [r7, #0]
 800b702:	3304      	adds	r3, #4
 800b704:	4619      	mov	r1, r3
 800b706:	6878      	ldr	r0, [r7, #4]
 800b708:	f000 f879 	bl	800b7fe <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 800b70c:	4603      	mov	r3, r0
 800b70e:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b710:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b714:	4618      	mov	r0, r3
 800b716:	3710      	adds	r7, #16
 800b718:	46bd      	mov	sp, r7
 800b71a:	bd80      	pop	{r7, pc}

0800b71c <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode)
{
 800b71c:	b480      	push	{r7}
 800b71e:	b085      	sub	sp, #20
 800b720:	af00      	add	r7, sp, #0
 800b722:	6078      	str	r0, [r7, #4]
 800b724:	460b      	mov	r3, r1
 800b726:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b728:	2300      	movs	r3, #0
 800b72a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 800b72c:	78fb      	ldrb	r3, [r7, #3]
 800b72e:	2b15      	cmp	r3, #21
 800b730:	bf8c      	ite	hi
 800b732:	2201      	movhi	r2, #1
 800b734:	2200      	movls	r2, #0
 800b736:	b2d2      	uxtb	r2, r2
 800b738:	2a00      	cmp	r2, #0
 800b73a:	d10e      	bne.n	800b75a <VL53L0X_SetDeviceMode+0x3e>
 800b73c:	2201      	movs	r2, #1
 800b73e:	409a      	lsls	r2, r3
 800b740:	4b0b      	ldr	r3, [pc, #44]	; (800b770 <VL53L0X_SetDeviceMode+0x54>)
 800b742:	4013      	ands	r3, r2
 800b744:	2b00      	cmp	r3, #0
 800b746:	bf14      	ite	ne
 800b748:	2301      	movne	r3, #1
 800b74a:	2300      	moveq	r3, #0
 800b74c:	b2db      	uxtb	r3, r3
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d003      	beq.n	800b75a <VL53L0X_SetDeviceMode+0x3e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	78fa      	ldrb	r2, [r7, #3]
 800b756:	741a      	strb	r2, [r3, #16]
		break;
 800b758:	e001      	b.n	800b75e <VL53L0X_SetDeviceMode+0x42>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 800b75a:	23f8      	movs	r3, #248	; 0xf8
 800b75c:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b75e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b762:	4618      	mov	r0, r3
 800b764:	3714      	adds	r7, #20
 800b766:	46bd      	mov	sp, r7
 800b768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b76c:	4770      	bx	lr
 800b76e:	bf00      	nop
 800b770:	0030000b 	.word	0x0030000b

0800b774 <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 800b774:	b480      	push	{r7}
 800b776:	b085      	sub	sp, #20
 800b778:	af00      	add	r7, sp, #0
 800b77a:	6078      	str	r0, [r7, #4]
 800b77c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b77e:	2300      	movs	r3, #0
 800b780:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	7c1a      	ldrb	r2, [r3, #16]
 800b786:	683b      	ldr	r3, [r7, #0]
 800b788:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800b78a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b78e:	4618      	mov	r0, r3
 800b790:	3714      	adds	r7, #20
 800b792:	46bd      	mov	sp, r7
 800b794:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b798:	4770      	bx	lr

0800b79a <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 800b79a:	b580      	push	{r7, lr}
 800b79c:	b084      	sub	sp, #16
 800b79e:	af00      	add	r7, sp, #0
 800b7a0:	6078      	str	r0, [r7, #4]
 800b7a2:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b7a4:	2300      	movs	r3, #0
 800b7a6:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 800b7a8:	683a      	ldr	r2, [r7, #0]
 800b7aa:	2109      	movs	r1, #9
 800b7ac:	6878      	ldr	r0, [r7, #4]
 800b7ae:	f004 fbf1 	bl	800ff94 <VL53L0X_RdByte>
 800b7b2:	4603      	mov	r3, r0
 800b7b4:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800b7b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d106      	bne.n	800b7cc <VL53L0X_GetFractionEnable+0x32>
		*pEnabled = (*pEnabled & 1);
 800b7be:	683b      	ldr	r3, [r7, #0]
 800b7c0:	781b      	ldrb	r3, [r3, #0]
 800b7c2:	f003 0301 	and.w	r3, r3, #1
 800b7c6:	b2da      	uxtb	r2, r3
 800b7c8:	683b      	ldr	r3, [r7, #0]
 800b7ca:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800b7cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b7d0:	4618      	mov	r0, r3
 800b7d2:	3710      	adds	r7, #16
 800b7d4:	46bd      	mov	sp, r7
 800b7d6:	bd80      	pop	{r7, pc}

0800b7d8 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 800b7d8:	b580      	push	{r7, lr}
 800b7da:	b084      	sub	sp, #16
 800b7dc:	af00      	add	r7, sp, #0
 800b7de:	6078      	str	r0, [r7, #4]
 800b7e0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b7e2:	2300      	movs	r3, #0
 800b7e4:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 800b7e6:	6839      	ldr	r1, [r7, #0]
 800b7e8:	6878      	ldr	r0, [r7, #4]
 800b7ea:	f003 faaa 	bl	800ed42 <VL53L0X_set_measurement_timing_budget_micro_seconds>
 800b7ee:	4603      	mov	r3, r0
 800b7f0:	73fb      	strb	r3, [r7, #15]
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);

	return Status;
 800b7f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b7f6:	4618      	mov	r0, r3
 800b7f8:	3710      	adds	r7, #16
 800b7fa:	46bd      	mov	sp, r7
 800b7fc:	bd80      	pop	{r7, pc}

0800b7fe <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800b7fe:	b580      	push	{r7, lr}
 800b800:	b084      	sub	sp, #16
 800b802:	af00      	add	r7, sp, #0
 800b804:	6078      	str	r0, [r7, #4]
 800b806:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b808:	2300      	movs	r3, #0
 800b80a:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 800b80c:	6839      	ldr	r1, [r7, #0]
 800b80e:	6878      	ldr	r0, [r7, #4]
 800b810:	f003 fb77 	bl	800ef02 <VL53L0X_get_measurement_timing_budget_micro_seconds>
 800b814:	4603      	mov	r3, r0
 800b816:	73fb      	strb	r3, [r7, #15]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 800b818:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b81c:	4618      	mov	r0, r3
 800b81e:	3710      	adds	r7, #16
 800b820:	46bd      	mov	sp, r7
 800b822:	bd80      	pop	{r7, pc}

0800b824 <VL53L0X_SetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_SetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 800b824:	b580      	push	{r7, lr}
 800b826:	b084      	sub	sp, #16
 800b828:	af00      	add	r7, sp, #0
 800b82a:	6078      	str	r0, [r7, #4]
 800b82c:	460b      	mov	r3, r1
 800b82e:	70fb      	strb	r3, [r7, #3]
 800b830:	4613      	mov	r3, r2
 800b832:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b834:	2300      	movs	r3, #0
 800b836:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_vcsel_pulse_period(Dev, VcselPeriodType,
 800b838:	78ba      	ldrb	r2, [r7, #2]
 800b83a:	78fb      	ldrb	r3, [r7, #3]
 800b83c:	4619      	mov	r1, r3
 800b83e:	6878      	ldr	r0, [r7, #4]
 800b840:	f002 ffbf 	bl	800e7c2 <VL53L0X_set_vcsel_pulse_period>
 800b844:	4603      	mov	r3, r0
 800b846:	73fb      	strb	r3, [r7, #15]
		VCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 800b848:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b84c:	4618      	mov	r0, r3
 800b84e:	3710      	adds	r7, #16
 800b850:	46bd      	mov	sp, r7
 800b852:	bd80      	pop	{r7, pc}

0800b854 <VL53L0X_GetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 800b854:	b580      	push	{r7, lr}
 800b856:	b086      	sub	sp, #24
 800b858:	af00      	add	r7, sp, #0
 800b85a:	60f8      	str	r0, [r7, #12]
 800b85c:	460b      	mov	r3, r1
 800b85e:	607a      	str	r2, [r7, #4]
 800b860:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b862:	2300      	movs	r3, #0
 800b864:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 800b866:	7afb      	ldrb	r3, [r7, #11]
 800b868:	687a      	ldr	r2, [r7, #4]
 800b86a:	4619      	mov	r1, r3
 800b86c:	68f8      	ldr	r0, [r7, #12]
 800b86e:	f003 fa31 	bl	800ecd4 <VL53L0X_get_vcsel_pulse_period>
 800b872:	4603      	mov	r3, r0
 800b874:	75fb      	strb	r3, [r7, #23]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 800b876:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b87a:	4618      	mov	r0, r3
 800b87c:	3718      	adds	r7, #24
 800b87e:	46bd      	mov	sp, r7
 800b880:	bd80      	pop	{r7, pc}
	...

0800b884 <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 800b884:	b580      	push	{r7, lr}
 800b886:	b086      	sub	sp, #24
 800b888:	af00      	add	r7, sp, #0
 800b88a:	6078      	str	r0, [r7, #4]
 800b88c:	460b      	mov	r3, r1
 800b88e:	70fb      	strb	r3, [r7, #3]
 800b890:	4613      	mov	r3, r2
 800b892:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b894:	2300      	movs	r3, #0
 800b896:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800b898:	2300      	movs	r3, #0
 800b89a:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfigNew = 0;
 800b89c:	2300      	movs	r3, #0
 800b89e:	75bb      	strb	r3, [r7, #22]
	uint32_t MeasurementTimingBudgetMicroSeconds;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800b8a0:	f107 030f 	add.w	r3, r7, #15
 800b8a4:	461a      	mov	r2, r3
 800b8a6:	2101      	movs	r1, #1
 800b8a8:	6878      	ldr	r0, [r7, #4]
 800b8aa:	f004 fb73 	bl	800ff94 <VL53L0X_RdByte>
 800b8ae:	4603      	mov	r3, r0
 800b8b0:	75fb      	strb	r3, [r7, #23]
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 800b8b2:	7bfb      	ldrb	r3, [r7, #15]
 800b8b4:	75bb      	strb	r3, [r7, #22]

	if (Status == VL53L0X_ERROR_NONE) {
 800b8b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d15a      	bne.n	800b974 <VL53L0X_SetSequenceStepEnable+0xf0>
		if (SequenceStepEnabled == 1) {
 800b8be:	78bb      	ldrb	r3, [r7, #2]
 800b8c0:	2b01      	cmp	r3, #1
 800b8c2:	d12b      	bne.n	800b91c <VL53L0X_SetSequenceStepEnable+0x98>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 800b8c4:	78fb      	ldrb	r3, [r7, #3]
 800b8c6:	2b04      	cmp	r3, #4
 800b8c8:	d825      	bhi.n	800b916 <VL53L0X_SetSequenceStepEnable+0x92>
 800b8ca:	a201      	add	r2, pc, #4	; (adr r2, 800b8d0 <VL53L0X_SetSequenceStepEnable+0x4c>)
 800b8cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8d0:	0800b8e5 	.word	0x0800b8e5
 800b8d4:	0800b8ef 	.word	0x0800b8ef
 800b8d8:	0800b8f9 	.word	0x0800b8f9
 800b8dc:	0800b903 	.word	0x0800b903
 800b8e0:	0800b90d 	.word	0x0800b90d
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 800b8e4:	7dbb      	ldrb	r3, [r7, #22]
 800b8e6:	f043 0310 	orr.w	r3, r3, #16
 800b8ea:	75bb      	strb	r3, [r7, #22]
				break;
 800b8ec:	e043      	b.n	800b976 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 800b8ee:	7dbb      	ldrb	r3, [r7, #22]
 800b8f0:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 800b8f4:	75bb      	strb	r3, [r7, #22]
				break;
 800b8f6:	e03e      	b.n	800b976 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 800b8f8:	7dbb      	ldrb	r3, [r7, #22]
 800b8fa:	f043 0304 	orr.w	r3, r3, #4
 800b8fe:	75bb      	strb	r3, [r7, #22]
				break;
 800b900:	e039      	b.n	800b976 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 800b902:	7dbb      	ldrb	r3, [r7, #22]
 800b904:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b908:	75bb      	strb	r3, [r7, #22]
				break;
 800b90a:	e034      	b.n	800b976 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 800b90c:	7dbb      	ldrb	r3, [r7, #22]
 800b90e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b912:	75bb      	strb	r3, [r7, #22]
				break;
 800b914:	e02f      	b.n	800b976 <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800b916:	23fc      	movs	r3, #252	; 0xfc
 800b918:	75fb      	strb	r3, [r7, #23]
 800b91a:	e02c      	b.n	800b976 <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 800b91c:	78fb      	ldrb	r3, [r7, #3]
 800b91e:	2b04      	cmp	r3, #4
 800b920:	d825      	bhi.n	800b96e <VL53L0X_SetSequenceStepEnable+0xea>
 800b922:	a201      	add	r2, pc, #4	; (adr r2, 800b928 <VL53L0X_SetSequenceStepEnable+0xa4>)
 800b924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b928:	0800b93d 	.word	0x0800b93d
 800b92c:	0800b947 	.word	0x0800b947
 800b930:	0800b951 	.word	0x0800b951
 800b934:	0800b95b 	.word	0x0800b95b
 800b938:	0800b965 	.word	0x0800b965
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 800b93c:	7dbb      	ldrb	r3, [r7, #22]
 800b93e:	f023 0310 	bic.w	r3, r3, #16
 800b942:	75bb      	strb	r3, [r7, #22]
				break;
 800b944:	e017      	b.n	800b976 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 800b946:	7dbb      	ldrb	r3, [r7, #22]
 800b948:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 800b94c:	75bb      	strb	r3, [r7, #22]
				break;
 800b94e:	e012      	b.n	800b976 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 800b950:	7dbb      	ldrb	r3, [r7, #22]
 800b952:	f023 0304 	bic.w	r3, r3, #4
 800b956:	75bb      	strb	r3, [r7, #22]
				break;
 800b958:	e00d      	b.n	800b976 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 800b95a:	7dbb      	ldrb	r3, [r7, #22]
 800b95c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b960:	75bb      	strb	r3, [r7, #22]
				break;
 800b962:	e008      	b.n	800b976 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 800b964:	7dbb      	ldrb	r3, [r7, #22]
 800b966:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b96a:	75bb      	strb	r3, [r7, #22]
				break;
 800b96c:	e003      	b.n	800b976 <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800b96e:	23fc      	movs	r3, #252	; 0xfc
 800b970:	75fb      	strb	r3, [r7, #23]
 800b972:	e000      	b.n	800b976 <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		}
 800b974:	bf00      	nop
	}

	if (SequenceConfigNew != SequenceConfig) {
 800b976:	7bfb      	ldrb	r3, [r7, #15]
 800b978:	7dba      	ldrb	r2, [r7, #22]
 800b97a:	429a      	cmp	r2, r3
 800b97c:	d01e      	beq.n	800b9bc <VL53L0X_SetSequenceStepEnable+0x138>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 800b97e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b982:	2b00      	cmp	r3, #0
 800b984:	d107      	bne.n	800b996 <VL53L0X_SetSequenceStepEnable+0x112>
			Status = VL53L0X_WrByte(Dev,
 800b986:	7dbb      	ldrb	r3, [r7, #22]
 800b988:	461a      	mov	r2, r3
 800b98a:	2101      	movs	r1, #1
 800b98c:	6878      	ldr	r0, [r7, #4]
 800b98e:	f004 fa7f 	bl	800fe90 <VL53L0X_WrByte>
 800b992:	4603      	mov	r3, r0
 800b994:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 800b996:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d103      	bne.n	800b9a6 <VL53L0X_SetSequenceStepEnable+0x122>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	7dba      	ldrb	r2, [r7, #22]
 800b9a2:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130


		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 800b9a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d106      	bne.n	800b9bc <VL53L0X_SetSequenceStepEnable+0x138>
			VL53L0X_GETPARAMETERFIELD(Dev,
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	695b      	ldr	r3, [r3, #20]
 800b9b2:	613b      	str	r3, [r7, #16]
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 800b9b4:	6939      	ldr	r1, [r7, #16]
 800b9b6:	6878      	ldr	r0, [r7, #4]
 800b9b8:	f7ff ff0e 	bl	800b7d8 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		}
	}

	LOG_FUNCTION_END(Status);

	return Status;
 800b9bc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b9c0:	4618      	mov	r0, r3
 800b9c2:	3718      	adds	r7, #24
 800b9c4:	46bd      	mov	sp, r7
 800b9c6:	bd80      	pop	{r7, pc}

0800b9c8 <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 800b9c8:	b480      	push	{r7}
 800b9ca:	b087      	sub	sp, #28
 800b9cc:	af00      	add	r7, sp, #0
 800b9ce:	60f8      	str	r0, [r7, #12]
 800b9d0:	607b      	str	r3, [r7, #4]
 800b9d2:	460b      	mov	r3, r1
 800b9d4:	72fb      	strb	r3, [r7, #11]
 800b9d6:	4613      	mov	r3, r2
 800b9d8:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b9da:	2300      	movs	r3, #0
 800b9dc:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	2200      	movs	r2, #0
 800b9e2:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 800b9e4:	7afb      	ldrb	r3, [r7, #11]
 800b9e6:	2b04      	cmp	r3, #4
 800b9e8:	d836      	bhi.n	800ba58 <sequence_step_enabled+0x90>
 800b9ea:	a201      	add	r2, pc, #4	; (adr r2, 800b9f0 <sequence_step_enabled+0x28>)
 800b9ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9f0:	0800ba05 	.word	0x0800ba05
 800b9f4:	0800ba17 	.word	0x0800ba17
 800b9f8:	0800ba29 	.word	0x0800ba29
 800b9fc:	0800ba3b 	.word	0x0800ba3b
 800ba00:	0800ba4d 	.word	0x0800ba4d
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 800ba04:	7abb      	ldrb	r3, [r7, #10]
 800ba06:	111b      	asrs	r3, r3, #4
 800ba08:	b2db      	uxtb	r3, r3
 800ba0a:	f003 0301 	and.w	r3, r3, #1
 800ba0e:	b2da      	uxtb	r2, r3
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	701a      	strb	r2, [r3, #0]
		break;
 800ba14:	e022      	b.n	800ba5c <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 800ba16:	7abb      	ldrb	r3, [r7, #10]
 800ba18:	10db      	asrs	r3, r3, #3
 800ba1a:	b2db      	uxtb	r3, r3
 800ba1c:	f003 0301 	and.w	r3, r3, #1
 800ba20:	b2da      	uxtb	r2, r3
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	701a      	strb	r2, [r3, #0]
		break;
 800ba26:	e019      	b.n	800ba5c <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 800ba28:	7abb      	ldrb	r3, [r7, #10]
 800ba2a:	109b      	asrs	r3, r3, #2
 800ba2c:	b2db      	uxtb	r3, r3
 800ba2e:	f003 0301 	and.w	r3, r3, #1
 800ba32:	b2da      	uxtb	r2, r3
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	701a      	strb	r2, [r3, #0]
		break;
 800ba38:	e010      	b.n	800ba5c <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 800ba3a:	7abb      	ldrb	r3, [r7, #10]
 800ba3c:	119b      	asrs	r3, r3, #6
 800ba3e:	b2db      	uxtb	r3, r3
 800ba40:	f003 0301 	and.w	r3, r3, #1
 800ba44:	b2da      	uxtb	r2, r3
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	701a      	strb	r2, [r3, #0]
		break;
 800ba4a:	e007      	b.n	800ba5c <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 800ba4c:	7abb      	ldrb	r3, [r7, #10]
 800ba4e:	09db      	lsrs	r3, r3, #7
 800ba50:	b2da      	uxtb	r2, r3
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	701a      	strb	r2, [r3, #0]
		break;
 800ba56:	e001      	b.n	800ba5c <sequence_step_enabled+0x94>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ba58:	23fc      	movs	r3, #252	; 0xfc
 800ba5a:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800ba5c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ba60:	4618      	mov	r0, r3
 800ba62:	371c      	adds	r7, #28
 800ba64:	46bd      	mov	sp, r7
 800ba66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba6a:	4770      	bx	lr

0800ba6c <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 800ba6c:	b580      	push	{r7, lr}
 800ba6e:	b084      	sub	sp, #16
 800ba70:	af00      	add	r7, sp, #0
 800ba72:	6078      	str	r0, [r7, #4]
 800ba74:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ba76:	2300      	movs	r3, #0
 800ba78:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 800ba7a:	2300      	movs	r3, #0
 800ba7c:	73bb      	strb	r3, [r7, #14]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800ba7e:	f107 030e 	add.w	r3, r7, #14
 800ba82:	461a      	mov	r2, r3
 800ba84:	2101      	movs	r1, #1
 800ba86:	6878      	ldr	r0, [r7, #4]
 800ba88:	f004 fa84 	bl	800ff94 <VL53L0X_RdByte>
 800ba8c:	4603      	mov	r3, r0
 800ba8e:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 800ba90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d107      	bne.n	800baa8 <VL53L0X_GetSequenceStepEnables+0x3c>
		Status = sequence_step_enabled(Dev,
 800ba98:	7bba      	ldrb	r2, [r7, #14]
 800ba9a:	683b      	ldr	r3, [r7, #0]
 800ba9c:	2100      	movs	r1, #0
 800ba9e:	6878      	ldr	r0, [r7, #4]
 800baa0:	f7ff ff92 	bl	800b9c8 <sequence_step_enabled>
 800baa4:	4603      	mov	r3, r0
 800baa6:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800baa8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800baac:	2b00      	cmp	r3, #0
 800baae:	d108      	bne.n	800bac2 <VL53L0X_GetSequenceStepEnables+0x56>
		Status = sequence_step_enabled(Dev,
 800bab0:	7bba      	ldrb	r2, [r7, #14]
 800bab2:	683b      	ldr	r3, [r7, #0]
 800bab4:	3302      	adds	r3, #2
 800bab6:	2101      	movs	r1, #1
 800bab8:	6878      	ldr	r0, [r7, #4]
 800baba:	f7ff ff85 	bl	800b9c8 <sequence_step_enabled>
 800babe:	4603      	mov	r3, r0
 800bac0:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800bac2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d108      	bne.n	800badc <VL53L0X_GetSequenceStepEnables+0x70>
		Status = sequence_step_enabled(Dev,
 800baca:	7bba      	ldrb	r2, [r7, #14]
 800bacc:	683b      	ldr	r3, [r7, #0]
 800bace:	3301      	adds	r3, #1
 800bad0:	2102      	movs	r1, #2
 800bad2:	6878      	ldr	r0, [r7, #4]
 800bad4:	f7ff ff78 	bl	800b9c8 <sequence_step_enabled>
 800bad8:	4603      	mov	r3, r0
 800bada:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800badc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d108      	bne.n	800baf6 <VL53L0X_GetSequenceStepEnables+0x8a>
		Status = sequence_step_enabled(Dev,
 800bae4:	7bba      	ldrb	r2, [r7, #14]
 800bae6:	683b      	ldr	r3, [r7, #0]
 800bae8:	3303      	adds	r3, #3
 800baea:	2103      	movs	r1, #3
 800baec:	6878      	ldr	r0, [r7, #4]
 800baee:	f7ff ff6b 	bl	800b9c8 <sequence_step_enabled>
 800baf2:	4603      	mov	r3, r0
 800baf4:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800baf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d108      	bne.n	800bb10 <VL53L0X_GetSequenceStepEnables+0xa4>
		Status = sequence_step_enabled(Dev,
 800bafe:	7bba      	ldrb	r2, [r7, #14]
 800bb00:	683b      	ldr	r3, [r7, #0]
 800bb02:	3304      	adds	r3, #4
 800bb04:	2104      	movs	r1, #4
 800bb06:	6878      	ldr	r0, [r7, #4]
 800bb08:	f7ff ff5e 	bl	800b9c8 <sequence_step_enabled>
 800bb0c:	4603      	mov	r3, r0
 800bb0e:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800bb10:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bb14:	4618      	mov	r0, r3
 800bb16:	3710      	adds	r7, #16
 800bb18:	46bd      	mov	sp, r7
 800bb1a:	bd80      	pop	{r7, pc}

0800bb1c <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 800bb1c:	b580      	push	{r7, lr}
 800bb1e:	b084      	sub	sp, #16
 800bb20:	af00      	add	r7, sp, #0
 800bb22:	6078      	str	r0, [r7, #4]
 800bb24:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bb26:	2300      	movs	r3, #0
 800bb28:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 800bb2a:	f107 030c 	add.w	r3, r7, #12
 800bb2e:	461a      	mov	r2, r3
 800bb30:	21f8      	movs	r1, #248	; 0xf8
 800bb32:	6878      	ldr	r0, [r7, #4]
 800bb34:	f004 fa58 	bl	800ffe8 <VL53L0X_RdWord>
 800bb38:	4603      	mov	r3, r0
 800bb3a:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 800bb3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d108      	bne.n	800bb56 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
		Status = VL53L0X_RdDWord(Dev,
 800bb44:	f107 0308 	add.w	r3, r7, #8
 800bb48:	461a      	mov	r2, r3
 800bb4a:	2104      	movs	r1, #4
 800bb4c:	6878      	ldr	r0, [r7, #4]
 800bb4e:	f004 fa83 	bl	8010058 <VL53L0X_RdDWord>
 800bb52:	4603      	mov	r3, r0
 800bb54:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800bb56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d10c      	bne.n	800bb78 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
		if (osc_calibrate_val != 0) {
 800bb5e:	89bb      	ldrh	r3, [r7, #12]
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d005      	beq.n	800bb70 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 800bb64:	68bb      	ldr	r3, [r7, #8]
 800bb66:	89ba      	ldrh	r2, [r7, #12]
 800bb68:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 800bb6c:	683b      	ldr	r3, [r7, #0]
 800bb6e:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 800bb70:	683b      	ldr	r3, [r7, #0]
 800bb72:	681a      	ldr	r2, [r3, #0]
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800bb78:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bb7c:	4618      	mov	r0, r3
 800bb7e:	3710      	adds	r7, #16
 800bb80:	46bd      	mov	sp, r7
 800bb82:	bd80      	pop	{r7, pc}

0800bb84 <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 800bb84:	b480      	push	{r7}
 800bb86:	b085      	sub	sp, #20
 800bb88:	af00      	add	r7, sp, #0
 800bb8a:	6078      	str	r0, [r7, #4]
 800bb8c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bb8e:	2300      	movs	r3, #0
 800bb90:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	7f1b      	ldrb	r3, [r3, #28]
 800bb96:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 800bb98:	683b      	ldr	r3, [r7, #0]
 800bb9a:	7bba      	ldrb	r2, [r7, #14]
 800bb9c:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800bb9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bba2:	4618      	mov	r0, r3
 800bba4:	3714      	adds	r7, #20
 800bba6:	46bd      	mov	sp, r7
 800bba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbac:	4770      	bx	lr

0800bbae <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 800bbae:	b580      	push	{r7, lr}
 800bbb0:	b086      	sub	sp, #24
 800bbb2:	af00      	add	r7, sp, #0
 800bbb4:	6078      	str	r0, [r7, #4]
 800bbb6:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bbb8:	2300      	movs	r3, #0
 800bbba:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 800bbbc:	f107 030e 	add.w	r3, r7, #14
 800bbc0:	461a      	mov	r2, r3
 800bbc2:	2120      	movs	r1, #32
 800bbc4:	6878      	ldr	r0, [r7, #4]
 800bbc6:	f004 fa0f 	bl	800ffe8 <VL53L0X_RdWord>
 800bbca:	4603      	mov	r3, r0
 800bbcc:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 800bbce:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d118      	bne.n	800bc08 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		if (Value == 0) {
 800bbd6:	89fb      	ldrh	r3, [r7, #14]
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d109      	bne.n	800bbf0 <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	6a1b      	ldr	r3, [r3, #32]
 800bbe0:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 800bbe2:	683b      	ldr	r3, [r7, #0]
 800bbe4:	693a      	ldr	r2, [r7, #16]
 800bbe6:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	2200      	movs	r2, #0
 800bbec:	771a      	strb	r2, [r3, #28]
 800bbee:	e00b      	b.n	800bc08 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 800bbf0:	89fb      	ldrh	r3, [r7, #14]
 800bbf2:	00db      	lsls	r3, r3, #3
 800bbf4:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 800bbf6:	683b      	ldr	r3, [r7, #0]
 800bbf8:	693a      	ldr	r2, [r7, #16]
 800bbfa:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	693a      	ldr	r2, [r7, #16]
 800bc00:	621a      	str	r2, [r3, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	2201      	movs	r2, #1
 800bc06:	771a      	strb	r2, [r3, #28]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800bc08:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bc0c:	4618      	mov	r0, r3
 800bc0e:	3718      	adds	r7, #24
 800bc10:	46bd      	mov	sp, r7
 800bc12:	bd80      	pop	{r7, pc}

0800bc14 <VL53L0X_SetRefCalibration>:

VL53L0X_Error VL53L0X_SetRefCalibration(VL53L0X_DEV Dev, uint8_t VhvSettings,
	uint8_t PhaseCal)
{
 800bc14:	b580      	push	{r7, lr}
 800bc16:	b084      	sub	sp, #16
 800bc18:	af00      	add	r7, sp, #0
 800bc1a:	6078      	str	r0, [r7, #4]
 800bc1c:	460b      	mov	r3, r1
 800bc1e:	70fb      	strb	r3, [r7, #3]
 800bc20:	4613      	mov	r3, r2
 800bc22:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bc24:	2300      	movs	r3, #0
 800bc26:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_ref_calibration(Dev, VhvSettings, PhaseCal);
 800bc28:	78ba      	ldrb	r2, [r7, #2]
 800bc2a:	78fb      	ldrb	r3, [r7, #3]
 800bc2c:	4619      	mov	r1, r3
 800bc2e:	6878      	ldr	r0, [r7, #4]
 800bc30:	f001 fd82 	bl	800d738 <VL53L0X_set_ref_calibration>
 800bc34:	4603      	mov	r3, r0
 800bc36:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 800bc38:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bc3c:	4618      	mov	r0, r3
 800bc3e:	3710      	adds	r7, #16
 800bc40:	46bd      	mov	sp, r7
 800bc42:	bd80      	pop	{r7, pc}

0800bc44 <VL53L0X_SetLimitCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 800bc44:	b580      	push	{r7, lr}
 800bc46:	b086      	sub	sp, #24
 800bc48:	af00      	add	r7, sp, #0
 800bc4a:	6078      	str	r0, [r7, #4]
 800bc4c:	460b      	mov	r3, r1
 800bc4e:	807b      	strh	r3, [r7, #2]
 800bc50:	4613      	mov	r3, r2
 800bc52:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bc54:	2300      	movs	r3, #0
 800bc56:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 800bc58:	2300      	movs	r3, #0
 800bc5a:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 800bc5c:	2300      	movs	r3, #0
 800bc5e:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 800bc60:	2300      	movs	r3, #0
 800bc62:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 800bc64:	887b      	ldrh	r3, [r7, #2]
 800bc66:	2b05      	cmp	r3, #5
 800bc68:	d902      	bls.n	800bc70 <VL53L0X_SetLimitCheckEnable+0x2c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800bc6a:	23fc      	movs	r3, #252	; 0xfc
 800bc6c:	75fb      	strb	r3, [r7, #23]
 800bc6e:	e05b      	b.n	800bd28 <VL53L0X_SetLimitCheckEnable+0xe4>
	} else {
		if (LimitCheckEnable == 0) {
 800bc70:	787b      	ldrb	r3, [r7, #1]
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d106      	bne.n	800bc84 <VL53L0X_SetLimitCheckEnable+0x40>
			TempFix1616 = 0;
 800bc76:	2300      	movs	r3, #0
 800bc78:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 800bc7a:	2300      	movs	r3, #0
 800bc7c:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 800bc7e:	2301      	movs	r3, #1
 800bc80:	73bb      	strb	r3, [r7, #14]
 800bc82:	e00a      	b.n	800bc9a <VL53L0X_SetLimitCheckEnable+0x56>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800bc84:	887b      	ldrh	r3, [r7, #2]
 800bc86:	687a      	ldr	r2, [r7, #4]
 800bc88:	330c      	adds	r3, #12
 800bc8a:	009b      	lsls	r3, r3, #2
 800bc8c:	4413      	add	r3, r2
 800bc8e:	685b      	ldr	r3, [r3, #4]
 800bc90:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 800bc92:	2300      	movs	r3, #0
 800bc94:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 800bc96:	2301      	movs	r3, #1
 800bc98:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 800bc9a:	887b      	ldrh	r3, [r7, #2]
 800bc9c:	2b05      	cmp	r3, #5
 800bc9e:	d841      	bhi.n	800bd24 <VL53L0X_SetLimitCheckEnable+0xe0>
 800bca0:	a201      	add	r2, pc, #4	; (adr r2, 800bca8 <VL53L0X_SetLimitCheckEnable+0x64>)
 800bca2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bca6:	bf00      	nop
 800bca8:	0800bcc1 	.word	0x0800bcc1
 800bcac:	0800bccb 	.word	0x0800bccb
 800bcb0:	0800bce1 	.word	0x0800bce1
 800bcb4:	0800bceb 	.word	0x0800bceb
 800bcb8:	0800bcf5 	.word	0x0800bcf5
 800bcbc:	0800bd0d 	.word	0x0800bd0d

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	7bfa      	ldrb	r2, [r7, #15]
 800bcc4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 800bcc8:	e02e      	b.n	800bd28 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 800bcca:	693b      	ldr	r3, [r7, #16]
 800bccc:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 800bcce:	b29b      	uxth	r3, r3
 800bcd0:	461a      	mov	r2, r3
 800bcd2:	2144      	movs	r1, #68	; 0x44
 800bcd4:	6878      	ldr	r0, [r7, #4]
 800bcd6:	f004 f8ff 	bl	800fed8 <VL53L0X_WrWord>
 800bcda:	4603      	mov	r3, r0
 800bcdc:	75fb      	strb	r3, [r7, #23]

			break;
 800bcde:	e023      	b.n	800bd28 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	7bfa      	ldrb	r2, [r7, #15]
 800bce4:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 800bce8:	e01e      	b.n	800bd28 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	7bfa      	ldrb	r2, [r7, #15]
 800bcee:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 800bcf2:	e019      	b.n	800bd28 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 800bcf4:	7bbb      	ldrb	r3, [r7, #14]
 800bcf6:	005b      	lsls	r3, r3, #1
 800bcf8:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 800bcfa:	7b7b      	ldrb	r3, [r7, #13]
 800bcfc:	22fe      	movs	r2, #254	; 0xfe
 800bcfe:	2160      	movs	r1, #96	; 0x60
 800bd00:	6878      	ldr	r0, [r7, #4]
 800bd02:	f004 f913 	bl	800ff2c <VL53L0X_UpdateByte>
 800bd06:	4603      	mov	r3, r0
 800bd08:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 800bd0a:	e00d      	b.n	800bd28 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 800bd0c:	7bbb      	ldrb	r3, [r7, #14]
 800bd0e:	011b      	lsls	r3, r3, #4
 800bd10:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 800bd12:	7b7b      	ldrb	r3, [r7, #13]
 800bd14:	22ef      	movs	r2, #239	; 0xef
 800bd16:	2160      	movs	r1, #96	; 0x60
 800bd18:	6878      	ldr	r0, [r7, #4]
 800bd1a:	f004 f907 	bl	800ff2c <VL53L0X_UpdateByte>
 800bd1e:	4603      	mov	r3, r0
 800bd20:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 800bd22:	e001      	b.n	800bd28 <VL53L0X_SetLimitCheckEnable+0xe4>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800bd24:	23fc      	movs	r3, #252	; 0xfc
 800bd26:	75fb      	strb	r3, [r7, #23]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 800bd28:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d10f      	bne.n	800bd50 <VL53L0X_SetLimitCheckEnable+0x10c>
		if (LimitCheckEnable == 0) {
 800bd30:	787b      	ldrb	r3, [r7, #1]
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d106      	bne.n	800bd44 <VL53L0X_SetLimitCheckEnable+0x100>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800bd36:	887b      	ldrh	r3, [r7, #2]
 800bd38:	687a      	ldr	r2, [r7, #4]
 800bd3a:	4413      	add	r3, r2
 800bd3c:	2200      	movs	r2, #0
 800bd3e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800bd42:	e005      	b.n	800bd50 <VL53L0X_SetLimitCheckEnable+0x10c>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800bd44:	887b      	ldrh	r3, [r7, #2]
 800bd46:	687a      	ldr	r2, [r7, #4]
 800bd48:	4413      	add	r3, r2
 800bd4a:	2201      	movs	r2, #1
 800bd4c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800bd50:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bd54:	4618      	mov	r0, r3
 800bd56:	3718      	adds	r7, #24
 800bd58:	46bd      	mov	sp, r7
 800bd5a:	bd80      	pop	{r7, pc}

0800bd5c <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 800bd5c:	b480      	push	{r7}
 800bd5e:	b087      	sub	sp, #28
 800bd60:	af00      	add	r7, sp, #0
 800bd62:	60f8      	str	r0, [r7, #12]
 800bd64:	460b      	mov	r3, r1
 800bd66:	607a      	str	r2, [r7, #4]
 800bd68:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bd6a:	2300      	movs	r3, #0
 800bd6c:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 800bd6e:	897b      	ldrh	r3, [r7, #10]
 800bd70:	2b05      	cmp	r3, #5
 800bd72:	d905      	bls.n	800bd80 <VL53L0X_GetLimitCheckEnable+0x24>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800bd74:	23fc      	movs	r3, #252	; 0xfc
 800bd76:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	2200      	movs	r2, #0
 800bd7c:	701a      	strb	r2, [r3, #0]
 800bd7e:	e008      	b.n	800bd92 <VL53L0X_GetLimitCheckEnable+0x36>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800bd80:	897b      	ldrh	r3, [r7, #10]
 800bd82:	68fa      	ldr	r2, [r7, #12]
 800bd84:	4413      	add	r3, r2
 800bd86:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bd8a:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	7dba      	ldrb	r2, [r7, #22]
 800bd90:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800bd92:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bd96:	4618      	mov	r0, r3
 800bd98:	371c      	adds	r7, #28
 800bd9a:	46bd      	mov	sp, r7
 800bd9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bda0:	4770      	bx	lr
	...

0800bda4 <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 800bda4:	b580      	push	{r7, lr}
 800bda6:	b086      	sub	sp, #24
 800bda8:	af00      	add	r7, sp, #0
 800bdaa:	60f8      	str	r0, [r7, #12]
 800bdac:	460b      	mov	r3, r1
 800bdae:	607a      	str	r2, [r7, #4]
 800bdb0:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bdb2:	2300      	movs	r3, #0
 800bdb4:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 800bdb6:	897b      	ldrh	r3, [r7, #10]
 800bdb8:	68fa      	ldr	r2, [r7, #12]
 800bdba:	4413      	add	r3, r2
 800bdbc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bdc0:	75bb      	strb	r3, [r7, #22]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 800bdc2:	7dbb      	ldrb	r3, [r7, #22]
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d107      	bne.n	800bdd8 <VL53L0X_SetLimitCheckValue+0x34>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800bdc8:	897b      	ldrh	r3, [r7, #10]
 800bdca:	68fa      	ldr	r2, [r7, #12]
 800bdcc:	330c      	adds	r3, #12
 800bdce:	009b      	lsls	r3, r3, #2
 800bdd0:	4413      	add	r3, r2
 800bdd2:	687a      	ldr	r2, [r7, #4]
 800bdd4:	605a      	str	r2, [r3, #4]
 800bdd6:	e040      	b.n	800be5a <VL53L0X_SetLimitCheckValue+0xb6>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 800bdd8:	897b      	ldrh	r3, [r7, #10]
 800bdda:	2b05      	cmp	r3, #5
 800bddc:	d830      	bhi.n	800be40 <VL53L0X_SetLimitCheckValue+0x9c>
 800bdde:	a201      	add	r2, pc, #4	; (adr r2, 800bde4 <VL53L0X_SetLimitCheckValue+0x40>)
 800bde0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bde4:	0800bdfd 	.word	0x0800bdfd
 800bde8:	0800be05 	.word	0x0800be05
 800bdec:	0800be1b 	.word	0x0800be1b
 800bdf0:	0800be23 	.word	0x0800be23
 800bdf4:	0800be2b 	.word	0x0800be2b
 800bdf8:	0800be2b 	.word	0x0800be2b

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	687a      	ldr	r2, [r7, #4]
 800be00:	635a      	str	r2, [r3, #52]	; 0x34
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 800be02:	e01f      	b.n	800be44 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 800be08:	b29b      	uxth	r3, r3
 800be0a:	461a      	mov	r2, r3
 800be0c:	2144      	movs	r1, #68	; 0x44
 800be0e:	68f8      	ldr	r0, [r7, #12]
 800be10:	f004 f862 	bl	800fed8 <VL53L0X_WrWord>
 800be14:	4603      	mov	r3, r0
 800be16:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 800be18:	e014      	b.n	800be44 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	687a      	ldr	r2, [r7, #4]
 800be1e:	63da      	str	r2, [r3, #60]	; 0x3c
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 800be20:	e010      	b.n	800be44 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	687a      	ldr	r2, [r7, #4]
 800be26:	641a      	str	r2, [r3, #64]	; 0x40
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 800be28:	e00c      	b.n	800be44 <VL53L0X_SetLimitCheckValue+0xa0>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 800be2e:	b29b      	uxth	r3, r3
 800be30:	461a      	mov	r2, r3
 800be32:	2164      	movs	r1, #100	; 0x64
 800be34:	68f8      	ldr	r0, [r7, #12]
 800be36:	f004 f84f 	bl	800fed8 <VL53L0X_WrWord>
 800be3a:	4603      	mov	r3, r0
 800be3c:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 800be3e:	e001      	b.n	800be44 <VL53L0X_SetLimitCheckValue+0xa0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800be40:	23fc      	movs	r3, #252	; 0xfc
 800be42:	75fb      	strb	r3, [r7, #23]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 800be44:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d106      	bne.n	800be5a <VL53L0X_SetLimitCheckValue+0xb6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800be4c:	897b      	ldrh	r3, [r7, #10]
 800be4e:	68fa      	ldr	r2, [r7, #12]
 800be50:	330c      	adds	r3, #12
 800be52:	009b      	lsls	r3, r3, #2
 800be54:	4413      	add	r3, r2
 800be56:	687a      	ldr	r2, [r7, #4]
 800be58:	605a      	str	r2, [r3, #4]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800be5a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800be5e:	4618      	mov	r0, r3
 800be60:	3718      	adds	r7, #24
 800be62:	46bd      	mov	sp, r7
 800be64:	bd80      	pop	{r7, pc}
 800be66:	bf00      	nop

0800be68 <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 800be68:	b580      	push	{r7, lr}
 800be6a:	b088      	sub	sp, #32
 800be6c:	af00      	add	r7, sp, #0
 800be6e:	60f8      	str	r0, [r7, #12]
 800be70:	460b      	mov	r3, r1
 800be72:	607a      	str	r2, [r7, #4]
 800be74:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800be76:	2300      	movs	r3, #0
 800be78:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 800be7a:	2300      	movs	r3, #0
 800be7c:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 800be7e:	897b      	ldrh	r3, [r7, #10]
 800be80:	2b05      	cmp	r3, #5
 800be82:	d847      	bhi.n	800bf14 <VL53L0X_GetLimitCheckValue+0xac>
 800be84:	a201      	add	r2, pc, #4	; (adr r2, 800be8c <VL53L0X_GetLimitCheckValue+0x24>)
 800be86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be8a:	bf00      	nop
 800be8c:	0800bea5 	.word	0x0800bea5
 800be90:	0800beb1 	.word	0x0800beb1
 800be94:	0800bed7 	.word	0x0800bed7
 800be98:	0800bee3 	.word	0x0800bee3
 800be9c:	0800beef 	.word	0x0800beef
 800bea0:	0800beef 	.word	0x0800beef

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bea8:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 800beaa:	2300      	movs	r3, #0
 800beac:	77bb      	strb	r3, [r7, #30]
		break;
 800beae:	e033      	b.n	800bf18 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 800beb0:	f107 0316 	add.w	r3, r7, #22
 800beb4:	461a      	mov	r2, r3
 800beb6:	2144      	movs	r1, #68	; 0x44
 800beb8:	68f8      	ldr	r0, [r7, #12]
 800beba:	f004 f895 	bl	800ffe8 <VL53L0X_RdWord>
 800bebe:	4603      	mov	r3, r0
 800bec0:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 800bec2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d102      	bne.n	800bed0 <VL53L0X_GetLimitCheckValue+0x68>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 800beca:	8afb      	ldrh	r3, [r7, #22]
 800becc:	025b      	lsls	r3, r3, #9
 800bece:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 800bed0:	2301      	movs	r3, #1
 800bed2:	77bb      	strb	r3, [r7, #30]
		break;
 800bed4:	e020      	b.n	800bf18 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800beda:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 800bedc:	2300      	movs	r3, #0
 800bede:	77bb      	strb	r3, [r7, #30]
		break;
 800bee0:	e01a      	b.n	800bf18 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bee6:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, TempFix1616);
		EnableZeroValue = 0;
 800bee8:	2300      	movs	r3, #0
 800beea:	77bb      	strb	r3, [r7, #30]
		break;
 800beec:	e014      	b.n	800bf18 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 800beee:	f107 0316 	add.w	r3, r7, #22
 800bef2:	461a      	mov	r2, r3
 800bef4:	2164      	movs	r1, #100	; 0x64
 800bef6:	68f8      	ldr	r0, [r7, #12]
 800bef8:	f004 f876 	bl	800ffe8 <VL53L0X_RdWord>
 800befc:	4603      	mov	r3, r0
 800befe:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 800bf00:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d102      	bne.n	800bf0e <VL53L0X_GetLimitCheckValue+0xa6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 800bf08:	8afb      	ldrh	r3, [r7, #22]
 800bf0a:	025b      	lsls	r3, r3, #9
 800bf0c:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 800bf0e:	2300      	movs	r3, #0
 800bf10:	77bb      	strb	r3, [r7, #30]
		break;
 800bf12:	e001      	b.n	800bf18 <VL53L0X_GetLimitCheckValue+0xb0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800bf14:	23fc      	movs	r3, #252	; 0xfc
 800bf16:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 800bf18:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d12a      	bne.n	800bf76 <VL53L0X_GetLimitCheckValue+0x10e>

		if (EnableZeroValue == 1) {
 800bf20:	7fbb      	ldrb	r3, [r7, #30]
 800bf22:	2b01      	cmp	r3, #1
 800bf24:	d124      	bne.n	800bf70 <VL53L0X_GetLimitCheckValue+0x108>

			if (TempFix1616 == 0) {
 800bf26:	69bb      	ldr	r3, [r7, #24]
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d110      	bne.n	800bf4e <VL53L0X_GetLimitCheckValue+0xe6>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 800bf2c:	897b      	ldrh	r3, [r7, #10]
 800bf2e:	68fa      	ldr	r2, [r7, #12]
 800bf30:	330c      	adds	r3, #12
 800bf32:	009b      	lsls	r3, r3, #2
 800bf34:	4413      	add	r3, r2
 800bf36:	685b      	ldr	r3, [r3, #4]
 800bf38:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	69ba      	ldr	r2, [r7, #24]
 800bf3e:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 800bf40:	897b      	ldrh	r3, [r7, #10]
 800bf42:	68fa      	ldr	r2, [r7, #12]
 800bf44:	4413      	add	r3, r2
 800bf46:	2200      	movs	r2, #0
 800bf48:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800bf4c:	e013      	b.n	800bf76 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	69ba      	ldr	r2, [r7, #24]
 800bf52:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 800bf54:	897b      	ldrh	r3, [r7, #10]
 800bf56:	68fa      	ldr	r2, [r7, #12]
 800bf58:	330c      	adds	r3, #12
 800bf5a:	009b      	lsls	r3, r3, #2
 800bf5c:	4413      	add	r3, r2
 800bf5e:	69ba      	ldr	r2, [r7, #24]
 800bf60:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 800bf62:	897b      	ldrh	r3, [r7, #10]
 800bf64:	68fa      	ldr	r2, [r7, #12]
 800bf66:	4413      	add	r3, r2
 800bf68:	2201      	movs	r2, #1
 800bf6a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800bf6e:	e002      	b.n	800bf76 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	69ba      	ldr	r2, [r7, #24]
 800bf74:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800bf76:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 800bf7a:	4618      	mov	r0, r3
 800bf7c:	3720      	adds	r7, #32
 800bf7e:	46bd      	mov	sp, r7
 800bf80:	bd80      	pop	{r7, pc}
 800bf82:	bf00      	nop

0800bf84 <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 800bf84:	b580      	push	{r7, lr}
 800bf86:	b084      	sub	sp, #16
 800bf88:	af00      	add	r7, sp, #0
 800bf8a:	6078      	str	r0, [r7, #4]
 800bf8c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bf8e:	2300      	movs	r3, #0
 800bf90:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 800bf92:	f107 030e 	add.w	r3, r7, #14
 800bf96:	461a      	mov	r2, r3
 800bf98:	2101      	movs	r1, #1
 800bf9a:	6878      	ldr	r0, [r7, #4]
 800bf9c:	f003 fffa 	bl	800ff94 <VL53L0X_RdByte>
 800bfa0:	4603      	mov	r3, r0
 800bfa2:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 800bfa4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d10e      	bne.n	800bfca <VL53L0X_GetWrapAroundCheckEnable+0x46>
		PALDevDataSet(Dev, SequenceConfig, data);
 800bfac:	7bba      	ldrb	r2, [r7, #14]
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		if (data & (0x01 << 7))
 800bfb4:	7bbb      	ldrb	r3, [r7, #14]
 800bfb6:	b25b      	sxtb	r3, r3
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	da03      	bge.n	800bfc4 <VL53L0X_GetWrapAroundCheckEnable+0x40>
			*pWrapAroundCheckEnable = 0x01;
 800bfbc:	683b      	ldr	r3, [r7, #0]
 800bfbe:	2201      	movs	r2, #1
 800bfc0:	701a      	strb	r2, [r3, #0]
 800bfc2:	e002      	b.n	800bfca <VL53L0X_GetWrapAroundCheckEnable+0x46>
		else
			*pWrapAroundCheckEnable = 0x00;
 800bfc4:	683b      	ldr	r3, [r7, #0]
 800bfc6:	2200      	movs	r2, #0
 800bfc8:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800bfca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d104      	bne.n	800bfdc <VL53L0X_GetWrapAroundCheckEnable+0x58>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 800bfd2:	683b      	ldr	r3, [r7, #0]
 800bfd4:	781a      	ldrb	r2, [r3, #0]
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800bfdc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bfe0:	4618      	mov	r0, r3
 800bfe2:	3710      	adds	r7, #16
 800bfe4:	46bd      	mov	sp, r7
 800bfe6:	bd80      	pop	{r7, pc}

0800bfe8 <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 800bfe8:	b580      	push	{r7, lr}
 800bfea:	b084      	sub	sp, #16
 800bfec:	af00      	add	r7, sp, #0
 800bfee:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bff0:	2300      	movs	r3, #0
 800bff2:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 800bff4:	f107 030e 	add.w	r3, r7, #14
 800bff8:	4619      	mov	r1, r3
 800bffa:	6878      	ldr	r0, [r7, #4]
 800bffc:	f7ff fbba 	bl	800b774 <VL53L0X_GetDeviceMode>
 800c000:	4603      	mov	r3, r0
 800c002:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 800c004:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d107      	bne.n	800c01c <VL53L0X_PerformSingleMeasurement+0x34>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 800c00c:	7bbb      	ldrb	r3, [r7, #14]
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d104      	bne.n	800c01c <VL53L0X_PerformSingleMeasurement+0x34>
		Status = VL53L0X_StartMeasurement(Dev);
 800c012:	6878      	ldr	r0, [r7, #4]
 800c014:	f000 f898 	bl	800c148 <VL53L0X_StartMeasurement>
 800c018:	4603      	mov	r3, r0
 800c01a:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 800c01c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c020:	2b00      	cmp	r3, #0
 800c022:	d104      	bne.n	800c02e <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 800c024:	6878      	ldr	r0, [r7, #4]
 800c026:	f001 fbaa 	bl	800d77e <VL53L0X_measurement_poll_for_completion>
 800c02a:	4603      	mov	r3, r0
 800c02c:	73fb      	strb	r3, [r7, #15]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 800c02e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c032:	2b00      	cmp	r3, #0
 800c034:	d106      	bne.n	800c044 <VL53L0X_PerformSingleMeasurement+0x5c>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 800c036:	7bbb      	ldrb	r3, [r7, #14]
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d103      	bne.n	800c044 <VL53L0X_PerformSingleMeasurement+0x5c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	2203      	movs	r2, #3
 800c040:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132


	LOG_FUNCTION_END(Status);
	return Status;
 800c044:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c048:	4618      	mov	r0, r3
 800c04a:	3710      	adds	r7, #16
 800c04c:	46bd      	mov	sp, r7
 800c04e:	bd80      	pop	{r7, pc}

0800c050 <VL53L0X_PerformRefCalibration>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev, uint8_t *pVhvSettings,
	uint8_t *pPhaseCal)
{
 800c050:	b580      	push	{r7, lr}
 800c052:	b086      	sub	sp, #24
 800c054:	af00      	add	r7, sp, #0
 800c056:	60f8      	str	r0, [r7, #12]
 800c058:	60b9      	str	r1, [r7, #8]
 800c05a:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c05c:	2300      	movs	r3, #0
 800c05e:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 800c060:	2301      	movs	r3, #1
 800c062:	687a      	ldr	r2, [r7, #4]
 800c064:	68b9      	ldr	r1, [r7, #8]
 800c066:	68f8      	ldr	r0, [r7, #12]
 800c068:	f001 fb29 	bl	800d6be <VL53L0X_perform_ref_calibration>
 800c06c:	4603      	mov	r3, r0
 800c06e:	75fb      	strb	r3, [r7, #23]
		pPhaseCal, 1);

	LOG_FUNCTION_END(Status);
	return Status;
 800c070:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c074:	4618      	mov	r0, r3
 800c076:	3718      	adds	r7, #24
 800c078:	46bd      	mov	sp, r7
 800c07a:	bd80      	pop	{r7, pc}

0800c07c <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 800c07c:	b580      	push	{r7, lr}
 800c07e:	b086      	sub	sp, #24
 800c080:	af00      	add	r7, sp, #0
 800c082:	6078      	str	r0, [r7, #4]
 800c084:	460b      	mov	r3, r1
 800c086:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c088:	2300      	movs	r3, #0
 800c08a:	75fb      	strb	r3, [r7, #23]

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 800c092:	75bb      	strb	r3, [r7, #22]
		Pin0GpioFunctionality);

	if ((InterruptConfig ==
 800c094:	7dbb      	ldrb	r3, [r7, #22]
 800c096:	2b01      	cmp	r3, #1
 800c098:	d005      	beq.n	800c0a6 <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW) ||
 800c09a:	7dbb      	ldrb	r3, [r7, #22]
 800c09c:	2b02      	cmp	r3, #2
 800c09e:	d002      	beq.n	800c0a6 <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 800c0a0:	7dbb      	ldrb	r3, [r7, #22]
 800c0a2:	2b03      	cmp	r3, #3
 800c0a4:	d147      	bne.n	800c136 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT)) {

		Status = VL53L0X_GetInterruptThresholds(Dev,
 800c0a6:	f107 030c 	add.w	r3, r7, #12
 800c0aa:	f107 0210 	add.w	r2, r7, #16
 800c0ae:	2101      	movs	r1, #1
 800c0b0:	6878      	ldr	r0, [r7, #4]
 800c0b2:	f000 fbc3 	bl	800c83c <VL53L0X_GetInterruptThresholds>
 800c0b6:	4603      	mov	r3, r0
 800c0b8:	75fb      	strb	r3, [r7, #23]
			VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
			&ThresholdLow, &ThresholdHigh);

		if (((ThresholdLow > 255*65536) ||
 800c0ba:	693b      	ldr	r3, [r7, #16]
 800c0bc:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 800c0c0:	d803      	bhi.n	800c0ca <VL53L0X_CheckAndLoadInterruptSettings+0x4e>
			(ThresholdHigh > 255*65536)) &&
 800c0c2:	68fb      	ldr	r3, [r7, #12]
		if (((ThresholdLow > 255*65536) ||
 800c0c4:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 800c0c8:	d935      	bls.n	800c136 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(ThresholdHigh > 255*65536)) &&
 800c0ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d131      	bne.n	800c136 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 800c0d2:	78fb      	ldrb	r3, [r7, #3]
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d006      	beq.n	800c0e6 <VL53L0X_CheckAndLoadInterruptSettings+0x6a>
				Status = VL53L0X_load_tuning_settings(Dev,
 800c0d8:	491a      	ldr	r1, [pc, #104]	; (800c144 <VL53L0X_CheckAndLoadInterruptSettings+0xc8>)
 800c0da:	6878      	ldr	r0, [r7, #4]
 800c0dc:	f002 ffc2 	bl	800f064 <VL53L0X_load_tuning_settings>
 800c0e0:	4603      	mov	r3, r0
 800c0e2:	75fb      	strb	r3, [r7, #23]
 800c0e4:	e027      	b.n	800c136 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
					InterruptThresholdSettings);
			} else {
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 800c0e6:	2204      	movs	r2, #4
 800c0e8:	21ff      	movs	r1, #255	; 0xff
 800c0ea:	6878      	ldr	r0, [r7, #4]
 800c0ec:	f003 fed0 	bl	800fe90 <VL53L0X_WrByte>
 800c0f0:	4603      	mov	r3, r0
 800c0f2:	461a      	mov	r2, r3
 800c0f4:	7dfb      	ldrb	r3, [r7, #23]
 800c0f6:	4313      	orrs	r3, r2
 800c0f8:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 800c0fa:	2200      	movs	r2, #0
 800c0fc:	2170      	movs	r1, #112	; 0x70
 800c0fe:	6878      	ldr	r0, [r7, #4]
 800c100:	f003 fec6 	bl	800fe90 <VL53L0X_WrByte>
 800c104:	4603      	mov	r3, r0
 800c106:	461a      	mov	r2, r3
 800c108:	7dfb      	ldrb	r3, [r7, #23]
 800c10a:	4313      	orrs	r3, r2
 800c10c:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800c10e:	2200      	movs	r2, #0
 800c110:	21ff      	movs	r1, #255	; 0xff
 800c112:	6878      	ldr	r0, [r7, #4]
 800c114:	f003 febc 	bl	800fe90 <VL53L0X_WrByte>
 800c118:	4603      	mov	r3, r0
 800c11a:	461a      	mov	r2, r3
 800c11c:	7dfb      	ldrb	r3, [r7, #23]
 800c11e:	4313      	orrs	r3, r2
 800c120:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800c122:	2200      	movs	r2, #0
 800c124:	2180      	movs	r1, #128	; 0x80
 800c126:	6878      	ldr	r0, [r7, #4]
 800c128:	f003 feb2 	bl	800fe90 <VL53L0X_WrByte>
 800c12c:	4603      	mov	r3, r0
 800c12e:	461a      	mov	r2, r3
 800c130:	7dfb      	ldrb	r3, [r7, #23]
 800c132:	4313      	orrs	r3, r2
 800c134:	75fb      	strb	r3, [r7, #23]
		}


	}

	return Status;
 800c136:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 800c13a:	4618      	mov	r0, r3
 800c13c:	3718      	adds	r7, #24
 800c13e:	46bd      	mov	sp, r7
 800c140:	bd80      	pop	{r7, pc}
 800c142:	bf00      	nop
 800c144:	200001c4 	.word	0x200001c4

0800c148 <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 800c148:	b580      	push	{r7, lr}
 800c14a:	b086      	sub	sp, #24
 800c14c:	af00      	add	r7, sp, #0
 800c14e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c150:	2300      	movs	r3, #0
 800c152:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 800c154:	2301      	movs	r3, #1
 800c156:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 800c158:	f107 030e 	add.w	r3, r7, #14
 800c15c:	4619      	mov	r1, r3
 800c15e:	6878      	ldr	r0, [r7, #4]
 800c160:	f7ff fb08 	bl	800b774 <VL53L0X_GetDeviceMode>

	Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 800c164:	2201      	movs	r2, #1
 800c166:	2180      	movs	r1, #128	; 0x80
 800c168:	6878      	ldr	r0, [r7, #4]
 800c16a:	f003 fe91 	bl	800fe90 <VL53L0X_WrByte>
 800c16e:	4603      	mov	r3, r0
 800c170:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800c172:	2201      	movs	r2, #1
 800c174:	21ff      	movs	r1, #255	; 0xff
 800c176:	6878      	ldr	r0, [r7, #4]
 800c178:	f003 fe8a 	bl	800fe90 <VL53L0X_WrByte>
 800c17c:	4603      	mov	r3, r0
 800c17e:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 800c180:	2200      	movs	r2, #0
 800c182:	2100      	movs	r1, #0
 800c184:	6878      	ldr	r0, [r7, #4]
 800c186:	f003 fe83 	bl	800fe90 <VL53L0X_WrByte>
 800c18a:	4603      	mov	r3, r0
 800c18c:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x91, PALDevDataGet(Dev, StopVariable));
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 800c194:	461a      	mov	r2, r3
 800c196:	2191      	movs	r1, #145	; 0x91
 800c198:	6878      	ldr	r0, [r7, #4]
 800c19a:	f003 fe79 	bl	800fe90 <VL53L0X_WrByte>
 800c19e:	4603      	mov	r3, r0
 800c1a0:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 800c1a2:	2201      	movs	r2, #1
 800c1a4:	2100      	movs	r1, #0
 800c1a6:	6878      	ldr	r0, [r7, #4]
 800c1a8:	f003 fe72 	bl	800fe90 <VL53L0X_WrByte>
 800c1ac:	4603      	mov	r3, r0
 800c1ae:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800c1b0:	2200      	movs	r2, #0
 800c1b2:	21ff      	movs	r1, #255	; 0xff
 800c1b4:	6878      	ldr	r0, [r7, #4]
 800c1b6:	f003 fe6b 	bl	800fe90 <VL53L0X_WrByte>
 800c1ba:	4603      	mov	r3, r0
 800c1bc:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 800c1be:	2200      	movs	r2, #0
 800c1c0:	2180      	movs	r1, #128	; 0x80
 800c1c2:	6878      	ldr	r0, [r7, #4]
 800c1c4:	f003 fe64 	bl	800fe90 <VL53L0X_WrByte>
 800c1c8:	4603      	mov	r3, r0
 800c1ca:	75fb      	strb	r3, [r7, #23]

	switch (DeviceMode) {
 800c1cc:	7bbb      	ldrb	r3, [r7, #14]
 800c1ce:	2b03      	cmp	r3, #3
 800c1d0:	d054      	beq.n	800c27c <VL53L0X_StartMeasurement+0x134>
 800c1d2:	2b03      	cmp	r3, #3
 800c1d4:	dc6c      	bgt.n	800c2b0 <VL53L0X_StartMeasurement+0x168>
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d002      	beq.n	800c1e0 <VL53L0X_StartMeasurement+0x98>
 800c1da:	2b01      	cmp	r3, #1
 800c1dc:	d034      	beq.n	800c248 <VL53L0X_StartMeasurement+0x100>
 800c1de:	e067      	b.n	800c2b0 <VL53L0X_StartMeasurement+0x168>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 800c1e0:	2201      	movs	r2, #1
 800c1e2:	2100      	movs	r1, #0
 800c1e4:	6878      	ldr	r0, [r7, #4]
 800c1e6:	f003 fe53 	bl	800fe90 <VL53L0X_WrByte>
 800c1ea:	4603      	mov	r3, r0
 800c1ec:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 800c1ee:	7bfb      	ldrb	r3, [r7, #15]
 800c1f0:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 800c1f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d15d      	bne.n	800c2b6 <VL53L0X_StartMeasurement+0x16e>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 800c1fa:	2300      	movs	r3, #0
 800c1fc:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 800c1fe:	693b      	ldr	r3, [r7, #16]
 800c200:	2b00      	cmp	r3, #0
 800c202:	d008      	beq.n	800c216 <VL53L0X_StartMeasurement+0xce>
					Status = VL53L0X_RdByte(Dev,
 800c204:	f107 030d 	add.w	r3, r7, #13
 800c208:	461a      	mov	r2, r3
 800c20a:	2100      	movs	r1, #0
 800c20c:	6878      	ldr	r0, [r7, #4]
 800c20e:	f003 fec1 	bl	800ff94 <VL53L0X_RdByte>
 800c212:	4603      	mov	r3, r0
 800c214:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 800c216:	693b      	ldr	r3, [r7, #16]
 800c218:	3301      	adds	r3, #1
 800c21a:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 800c21c:	7b7a      	ldrb	r2, [r7, #13]
 800c21e:	7bfb      	ldrb	r3, [r7, #15]
 800c220:	4013      	ands	r3, r2
 800c222:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 800c224:	7bfa      	ldrb	r2, [r7, #15]
 800c226:	429a      	cmp	r2, r3
 800c228:	d107      	bne.n	800c23a <VL53L0X_StartMeasurement+0xf2>
				&& (Status == VL53L0X_ERROR_NONE)
 800c22a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d103      	bne.n	800c23a <VL53L0X_StartMeasurement+0xf2>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 800c232:	693b      	ldr	r3, [r7, #16]
 800c234:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800c238:	d3e1      	bcc.n	800c1fe <VL53L0X_StartMeasurement+0xb6>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 800c23a:	693b      	ldr	r3, [r7, #16]
 800c23c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800c240:	d339      	bcc.n	800c2b6 <VL53L0X_StartMeasurement+0x16e>
				Status = VL53L0X_ERROR_TIME_OUT;
 800c242:	23f9      	movs	r3, #249	; 0xf9
 800c244:	75fb      	strb	r3, [r7, #23]

		}

		break;
 800c246:	e036      	b.n	800c2b6 <VL53L0X_StartMeasurement+0x16e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 800c248:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d105      	bne.n	800c25c <VL53L0X_StartMeasurement+0x114>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 800c250:	2101      	movs	r1, #1
 800c252:	6878      	ldr	r0, [r7, #4]
 800c254:	f7ff ff12 	bl	800c07c <VL53L0X_CheckAndLoadInterruptSettings>
 800c258:	4603      	mov	r3, r0
 800c25a:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 800c25c:	2202      	movs	r2, #2
 800c25e:	2100      	movs	r1, #0
 800c260:	6878      	ldr	r0, [r7, #4]
 800c262:	f003 fe15 	bl	800fe90 <VL53L0X_WrByte>
 800c266:	4603      	mov	r3, r0
 800c268:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 800c26a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d123      	bne.n	800c2ba <VL53L0X_StartMeasurement+0x172>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	2204      	movs	r2, #4
 800c276:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 800c27a:	e01e      	b.n	800c2ba <VL53L0X_StartMeasurement+0x172>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 800c27c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c280:	2b00      	cmp	r3, #0
 800c282:	d105      	bne.n	800c290 <VL53L0X_StartMeasurement+0x148>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 800c284:	2101      	movs	r1, #1
 800c286:	6878      	ldr	r0, [r7, #4]
 800c288:	f7ff fef8 	bl	800c07c <VL53L0X_CheckAndLoadInterruptSettings>
 800c28c:	4603      	mov	r3, r0
 800c28e:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 800c290:	2204      	movs	r2, #4
 800c292:	2100      	movs	r1, #0
 800c294:	6878      	ldr	r0, [r7, #4]
 800c296:	f003 fdfb 	bl	800fe90 <VL53L0X_WrByte>
 800c29a:	4603      	mov	r3, r0
 800c29c:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 800c29e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d10b      	bne.n	800c2be <VL53L0X_StartMeasurement+0x176>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	2204      	movs	r2, #4
 800c2aa:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 800c2ae:	e006      	b.n	800c2be <VL53L0X_StartMeasurement+0x176>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 800c2b0:	23f8      	movs	r3, #248	; 0xf8
 800c2b2:	75fb      	strb	r3, [r7, #23]
 800c2b4:	e004      	b.n	800c2c0 <VL53L0X_StartMeasurement+0x178>
		break;
 800c2b6:	bf00      	nop
 800c2b8:	e002      	b.n	800c2c0 <VL53L0X_StartMeasurement+0x178>
		break;
 800c2ba:	bf00      	nop
 800c2bc:	e000      	b.n	800c2c0 <VL53L0X_StartMeasurement+0x178>
		break;
 800c2be:	bf00      	nop
	}


	LOG_FUNCTION_END(Status);
	return Status;
 800c2c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c2c4:	4618      	mov	r0, r3
 800c2c6:	3718      	adds	r7, #24
 800c2c8:	46bd      	mov	sp, r7
 800c2ca:	bd80      	pop	{r7, pc}

0800c2cc <VL53L0X_GetMeasurementDataReady>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 800c2cc:	b580      	push	{r7, lr}
 800c2ce:	b084      	sub	sp, #16
 800c2d0:	af00      	add	r7, sp, #0
 800c2d2:	6078      	str	r0, [r7, #4]
 800c2d4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c2d6:	2300      	movs	r3, #0
 800c2d8:	73fb      	strb	r3, [r7, #15]
	uint8_t SysRangeStatusRegister;
	uint8_t InterruptConfig;
	uint32_t InterruptMask;
	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 800c2e0:	73bb      	strb	r3, [r7, #14]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 800c2e2:	7bbb      	ldrb	r3, [r7, #14]
 800c2e4:	2b04      	cmp	r3, #4
 800c2e6:	d112      	bne.n	800c30e <VL53L0X_GetMeasurementDataReady+0x42>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 800c2e8:	f107 0308 	add.w	r3, r7, #8
 800c2ec:	4619      	mov	r1, r3
 800c2ee:	6878      	ldr	r0, [r7, #4]
 800c2f0:	f000 fb1a 	bl	800c928 <VL53L0X_GetInterruptMaskStatus>
 800c2f4:	4603      	mov	r3, r0
 800c2f6:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 800c2f8:	68bb      	ldr	r3, [r7, #8]
 800c2fa:	2b04      	cmp	r3, #4
 800c2fc:	d103      	bne.n	800c306 <VL53L0X_GetMeasurementDataReady+0x3a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 800c2fe:	683b      	ldr	r3, [r7, #0]
 800c300:	2201      	movs	r2, #1
 800c302:	701a      	strb	r2, [r3, #0]
 800c304:	e01c      	b.n	800c340 <VL53L0X_GetMeasurementDataReady+0x74>
		else
			*pMeasurementDataReady = 0;
 800c306:	683b      	ldr	r3, [r7, #0]
 800c308:	2200      	movs	r2, #0
 800c30a:	701a      	strb	r2, [r3, #0]
 800c30c:	e018      	b.n	800c340 <VL53L0X_GetMeasurementDataReady+0x74>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 800c30e:	f107 030d 	add.w	r3, r7, #13
 800c312:	461a      	mov	r2, r3
 800c314:	2114      	movs	r1, #20
 800c316:	6878      	ldr	r0, [r7, #4]
 800c318:	f003 fe3c 	bl	800ff94 <VL53L0X_RdByte>
 800c31c:	4603      	mov	r3, r0
 800c31e:	73fb      	strb	r3, [r7, #15]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 800c320:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c324:	2b00      	cmp	r3, #0
 800c326:	d10b      	bne.n	800c340 <VL53L0X_GetMeasurementDataReady+0x74>
			if (SysRangeStatusRegister & 0x01)
 800c328:	7b7b      	ldrb	r3, [r7, #13]
 800c32a:	f003 0301 	and.w	r3, r3, #1
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d003      	beq.n	800c33a <VL53L0X_GetMeasurementDataReady+0x6e>
				*pMeasurementDataReady = 1;
 800c332:	683b      	ldr	r3, [r7, #0]
 800c334:	2201      	movs	r2, #1
 800c336:	701a      	strb	r2, [r3, #0]
 800c338:	e002      	b.n	800c340 <VL53L0X_GetMeasurementDataReady+0x74>
			else
				*pMeasurementDataReady = 0;
 800c33a:	683b      	ldr	r3, [r7, #0]
 800c33c:	2200      	movs	r2, #0
 800c33e:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800c340:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c344:	4618      	mov	r0, r3
 800c346:	3710      	adds	r7, #16
 800c348:	46bd      	mov	sp, r7
 800c34a:	bd80      	pop	{r7, pc}

0800c34c <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 800c34c:	b5b0      	push	{r4, r5, r7, lr}
 800c34e:	b096      	sub	sp, #88	; 0x58
 800c350:	af02      	add	r7, sp, #8
 800c352:	6078      	str	r0, [r7, #4]
 800c354:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c356:	2300      	movs	r3, #0
 800c358:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 800c35c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800c360:	230c      	movs	r3, #12
 800c362:	2114      	movs	r1, #20
 800c364:	6878      	ldr	r0, [r7, #4]
 800c366:	f003 fd67 	bl	800fe38 <VL53L0X_ReadMulti>
 800c36a:	4603      	mov	r3, r0
 800c36c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 800c370:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800c374:	2b00      	cmp	r3, #0
 800c376:	f040 80d1 	bne.w	800c51c <VL53L0X_GetRangingMeasurementData+0x1d0>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 800c37a:	683b      	ldr	r3, [r7, #0]
 800c37c:	2200      	movs	r2, #0
 800c37e:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 800c380:	683b      	ldr	r3, [r7, #0]
 800c382:	2200      	movs	r2, #0
 800c384:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 800c386:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800c38a:	b29b      	uxth	r3, r3
 800c38c:	021b      	lsls	r3, r3, #8
 800c38e:	b29a      	uxth	r2, r3
 800c390:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c394:	b29b      	uxth	r3, r3
 800c396:	4413      	add	r3, r2
 800c398:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 800c39c:	683b      	ldr	r3, [r7, #0]
 800c39e:	2200      	movs	r2, #0
 800c3a0:	605a      	str	r2, [r3, #4]

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 800c3a2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800c3a6:	b29b      	uxth	r3, r3
 800c3a8:	021b      	lsls	r3, r3, #8
 800c3aa:	b29a      	uxth	r2, r3
 800c3ac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c3b0:	b29b      	uxth	r3, r3
 800c3b2:	4413      	add	r3, r2
 800c3b4:	b29b      	uxth	r3, r3
 800c3b6:	025b      	lsls	r3, r3, #9
 800c3b8:	647b      	str	r3, [r7, #68]	; 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 800c3ba:	683b      	ldr	r3, [r7, #0]
 800c3bc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c3be:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 800c3c0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800c3c4:	b29b      	uxth	r3, r3
 800c3c6:	021b      	lsls	r3, r3, #8
 800c3c8:	b29a      	uxth	r2, r3
 800c3ca:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800c3ce:	b29b      	uxth	r3, r3
 800c3d0:	4413      	add	r3, r2
 800c3d2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 800c3d6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800c3da:	025b      	lsls	r3, r3, #9
 800c3dc:	461a      	mov	r2, r3
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 800c3de:	683b      	ldr	r3, [r7, #0]
 800c3e0:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 800c3e2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800c3e6:	b29b      	uxth	r3, r3
 800c3e8:	021b      	lsls	r3, r3, #8
 800c3ea:	b29a      	uxth	r2, r3
 800c3ec:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c3f0:	b29b      	uxth	r3, r3
 800c3f2:	4413      	add	r3, r2
 800c3f4:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 800c3f8:	683b      	ldr	r3, [r7, #0]
 800c3fa:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800c3fe:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 800c400:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c404:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	f8b3 3152 	ldrh.w	r3, [r3, #338]	; 0x152
 800c40e:	87bb      	strh	r3, [r7, #60]	; 0x3c
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 800c416:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 800c41a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800c41c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c420:	d046      	beq.n	800c4b0 <VL53L0X_GetRangingMeasurementData+0x164>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 800c422:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800c424:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 800c428:	fb02 f303 	mul.w	r3, r2, r3
 800c42c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800c430:	4a57      	ldr	r2, [pc, #348]	; (800c590 <VL53L0X_GetRangingMeasurementData+0x244>)
 800c432:	fb82 1203 	smull	r1, r2, r2, r3
 800c436:	1192      	asrs	r2, r2, #6
 800c438:	17db      	asrs	r3, r3, #31
 800c43a:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 800c43c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	6a1b      	ldr	r3, [r3, #32]
 800c444:	873b      	strh	r3, [r7, #56]	; 0x38
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	7f1b      	ldrb	r3, [r3, #28]
 800c44a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 800c44e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c452:	2b00      	cmp	r3, #0
 800c454:	d02c      	beq.n	800c4b0 <VL53L0X_GetRangingMeasurementData+0x164>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 800c456:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800c458:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800c45c:	fb02 f303 	mul.w	r3, r2, r3
 800c460:	121a      	asrs	r2, r3, #8
					<= 0) {
 800c462:	6c7b      	ldr	r3, [r7, #68]	; 0x44
				if ((SignalRate
 800c464:	429a      	cmp	r2, r3
 800c466:	d10d      	bne.n	800c484 <VL53L0X_GetRangingMeasurementData+0x138>
					if (RangeFractionalEnable)
 800c468:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	d004      	beq.n	800c47a <VL53L0X_GetRangingMeasurementData+0x12e>
						XtalkRangeMilliMeter = 8888;
 800c470:	f242 23b8 	movw	r3, #8888	; 0x22b8
 800c474:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800c478:	e016      	b.n	800c4a8 <VL53L0X_GetRangingMeasurementData+0x15c>
					else
						XtalkRangeMilliMeter = 8888
 800c47a:	f648 23e0 	movw	r3, #35552	; 0x8ae0
 800c47e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800c482:	e011      	b.n	800c4a8 <VL53L0X_GetRangingMeasurementData+0x15c>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 800c484:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800c488:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c48a:	fb03 f202 	mul.w	r2, r3, r2
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 800c48e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800c490:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 800c494:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 800c498:	121b      	asrs	r3, r3, #8
 800c49a:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 800c49c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c49e:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 800c4a0:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 800c4a4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 800c4a8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800c4ac:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			}

		}

		if (RangeFractionalEnable) {
 800c4b0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d00d      	beq.n	800c4d4 <VL53L0X_GetRangingMeasurementData+0x188>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 800c4b8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800c4bc:	089b      	lsrs	r3, r3, #2
 800c4be:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 800c4c0:	683b      	ldr	r3, [r7, #0]
 800c4c2:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 800c4c4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800c4c8:	b2db      	uxtb	r3, r3
 800c4ca:	019b      	lsls	r3, r3, #6
 800c4cc:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 800c4ce:	683b      	ldr	r3, [r7, #0]
 800c4d0:	75da      	strb	r2, [r3, #23]
 800c4d2:	e006      	b.n	800c4e2 <VL53L0X_GetRangingMeasurementData+0x196>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 800c4d4:	683b      	ldr	r3, [r7, #0]
 800c4d6:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 800c4da:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 800c4dc:	683b      	ldr	r3, [r7, #0]
 800c4de:	2200      	movs	r2, #0
 800c4e0:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 800c4e2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800c4e6:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 800c4ea:	f107 0336 	add.w	r3, r7, #54	; 0x36
 800c4ee:	9301      	str	r3, [sp, #4]
 800c4f0:	683b      	ldr	r3, [r7, #0]
 800c4f2:	9300      	str	r3, [sp, #0]
 800c4f4:	4613      	mov	r3, r2
 800c4f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c4f8:	6878      	ldr	r0, [r7, #4]
 800c4fa:	f003 fa51 	bl	800f9a0 <VL53L0X_get_pal_range_status>
 800c4fe:	4603      	mov	r3, r0
 800c500:	461a      	mov	r2, r3
 800c502:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c506:	4313      	orrs	r3, r2
 800c508:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 800c50c:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800c510:	2b00      	cmp	r3, #0
 800c512:	d103      	bne.n	800c51c <VL53L0X_GetRangingMeasurementData+0x1d0>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 800c514:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800c518:	683b      	ldr	r3, [r7, #0]
 800c51a:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 800c51c:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800c520:	2b00      	cmp	r3, #0
 800c522:	d12f      	bne.n	800c584 <VL53L0X_GetRangingMeasurementData+0x238>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	f107 040c 	add.w	r4, r7, #12
 800c52a:	f103 0550 	add.w	r5, r3, #80	; 0x50
 800c52e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c530:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c532:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800c536:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 800c53a:	683b      	ldr	r3, [r7, #0]
 800c53c:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 800c53e:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 800c540:	683b      	ldr	r3, [r7, #0]
 800c542:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 800c544:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 800c548:	683b      	ldr	r3, [r7, #0]
 800c54a:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 800c54c:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 800c54e:	683b      	ldr	r3, [r7, #0]
 800c550:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 800c552:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 800c554:	683b      	ldr	r3, [r7, #0]
 800c556:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 800c558:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 800c55a:	683b      	ldr	r3, [r7, #0]
 800c55c:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 800c55e:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 800c560:	683b      	ldr	r3, [r7, #0]
 800c562:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 800c564:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 800c566:	683b      	ldr	r3, [r7, #0]
 800c568:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 800c56a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	f103 0450 	add.w	r4, r3, #80	; 0x50
 800c574:	f107 050c 	add.w	r5, r7, #12
 800c578:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c57a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c57c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800c580:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800c584:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 800c588:	4618      	mov	r0, r3
 800c58a:	3750      	adds	r7, #80	; 0x50
 800c58c:	46bd      	mov	sp, r7
 800c58e:	bdb0      	pop	{r4, r5, r7, pc}
 800c590:	10624dd3 	.word	0x10624dd3

0800c594 <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 800c594:	b580      	push	{r7, lr}
 800c596:	b084      	sub	sp, #16
 800c598:	af00      	add	r7, sp, #0
 800c59a:	6078      	str	r0, [r7, #4]
 800c59c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c59e:	2300      	movs	r3, #0
 800c5a0:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* This function will do a complete single ranging
	 * Here we fix the mode! */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 800c5a2:	2100      	movs	r1, #0
 800c5a4:	6878      	ldr	r0, [r7, #4]
 800c5a6:	f7ff f8b9 	bl	800b71c <VL53L0X_SetDeviceMode>
 800c5aa:	4603      	mov	r3, r0
 800c5ac:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800c5ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d104      	bne.n	800c5c0 <VL53L0X_PerformSingleRangingMeasurement+0x2c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 800c5b6:	6878      	ldr	r0, [r7, #4]
 800c5b8:	f7ff fd16 	bl	800bfe8 <VL53L0X_PerformSingleMeasurement>
 800c5bc:	4603      	mov	r3, r0
 800c5be:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 800c5c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d105      	bne.n	800c5d4 <VL53L0X_PerformSingleRangingMeasurement+0x40>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 800c5c8:	6839      	ldr	r1, [r7, #0]
 800c5ca:	6878      	ldr	r0, [r7, #4]
 800c5cc:	f7ff febe 	bl	800c34c <VL53L0X_GetRangingMeasurementData>
 800c5d0:	4603      	mov	r3, r0
 800c5d2:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 800c5d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d105      	bne.n	800c5e8 <VL53L0X_PerformSingleRangingMeasurement+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800c5dc:	2100      	movs	r1, #0
 800c5de:	6878      	ldr	r0, [r7, #4]
 800c5e0:	f000 f962 	bl	800c8a8 <VL53L0X_ClearInterruptMask>
 800c5e4:	4603      	mov	r3, r0
 800c5e6:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(Status);
	return Status;
 800c5e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c5ec:	4618      	mov	r0, r3
 800c5ee:	3710      	adds	r7, #16
 800c5f0:	46bd      	mov	sp, r7
 800c5f2:	bd80      	pop	{r7, pc}

0800c5f4 <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
	VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
	VL53L0X_InterruptPolarity Polarity)
{
 800c5f4:	b580      	push	{r7, lr}
 800c5f6:	b084      	sub	sp, #16
 800c5f8:	af00      	add	r7, sp, #0
 800c5fa:	6078      	str	r0, [r7, #4]
 800c5fc:	4608      	mov	r0, r1
 800c5fe:	4611      	mov	r1, r2
 800c600:	461a      	mov	r2, r3
 800c602:	4603      	mov	r3, r0
 800c604:	70fb      	strb	r3, [r7, #3]
 800c606:	460b      	mov	r3, r1
 800c608:	70bb      	strb	r3, [r7, #2]
 800c60a:	4613      	mov	r3, r2
 800c60c:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c60e:	2300      	movs	r3, #0
 800c610:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	if (Pin != 0) {
 800c612:	78fb      	ldrb	r3, [r7, #3]
 800c614:	2b00      	cmp	r3, #0
 800c616:	d002      	beq.n	800c61e <VL53L0X_SetGpioConfig+0x2a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 800c618:	23f6      	movs	r3, #246	; 0xf6
 800c61a:	73fb      	strb	r3, [r7, #15]
 800c61c:	e107      	b.n	800c82e <VL53L0X_SetGpioConfig+0x23a>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 800c61e:	78bb      	ldrb	r3, [r7, #2]
 800c620:	2b14      	cmp	r3, #20
 800c622:	d110      	bne.n	800c646 <VL53L0X_SetGpioConfig+0x52>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 800c624:	7e3b      	ldrb	r3, [r7, #24]
 800c626:	2b00      	cmp	r3, #0
 800c628:	d102      	bne.n	800c630 <VL53L0X_SetGpioConfig+0x3c>
			data = 0x10;
 800c62a:	2310      	movs	r3, #16
 800c62c:	73bb      	strb	r3, [r7, #14]
 800c62e:	e001      	b.n	800c634 <VL53L0X_SetGpioConfig+0x40>
		else
			data = 1;
 800c630:	2301      	movs	r3, #1
 800c632:	73bb      	strb	r3, [r7, #14]

		Status = VL53L0X_WrByte(Dev,
 800c634:	7bbb      	ldrb	r3, [r7, #14]
 800c636:	461a      	mov	r2, r3
 800c638:	2184      	movs	r1, #132	; 0x84
 800c63a:	6878      	ldr	r0, [r7, #4]
 800c63c:	f003 fc28 	bl	800fe90 <VL53L0X_WrByte>
 800c640:	4603      	mov	r3, r0
 800c642:	73fb      	strb	r3, [r7, #15]
 800c644:	e0f3      	b.n	800c82e <VL53L0X_SetGpioConfig+0x23a>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 800c646:	78bb      	ldrb	r3, [r7, #2]
 800c648:	2b15      	cmp	r3, #21
 800c64a:	f040 8097 	bne.w	800c77c <VL53L0X_SetGpioConfig+0x188>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800c64e:	2201      	movs	r2, #1
 800c650:	21ff      	movs	r1, #255	; 0xff
 800c652:	6878      	ldr	r0, [r7, #4]
 800c654:	f003 fc1c 	bl	800fe90 <VL53L0X_WrByte>
 800c658:	4603      	mov	r3, r0
 800c65a:	461a      	mov	r2, r3
 800c65c:	7bfb      	ldrb	r3, [r7, #15]
 800c65e:	4313      	orrs	r3, r2
 800c660:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800c662:	2200      	movs	r2, #0
 800c664:	2100      	movs	r1, #0
 800c666:	6878      	ldr	r0, [r7, #4]
 800c668:	f003 fc12 	bl	800fe90 <VL53L0X_WrByte>
 800c66c:	4603      	mov	r3, r0
 800c66e:	461a      	mov	r2, r3
 800c670:	7bfb      	ldrb	r3, [r7, #15]
 800c672:	4313      	orrs	r3, r2
 800c674:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800c676:	2200      	movs	r2, #0
 800c678:	21ff      	movs	r1, #255	; 0xff
 800c67a:	6878      	ldr	r0, [r7, #4]
 800c67c:	f003 fc08 	bl	800fe90 <VL53L0X_WrByte>
 800c680:	4603      	mov	r3, r0
 800c682:	461a      	mov	r2, r3
 800c684:	7bfb      	ldrb	r3, [r7, #15]
 800c686:	4313      	orrs	r3, r2
 800c688:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800c68a:	2201      	movs	r2, #1
 800c68c:	2180      	movs	r1, #128	; 0x80
 800c68e:	6878      	ldr	r0, [r7, #4]
 800c690:	f003 fbfe 	bl	800fe90 <VL53L0X_WrByte>
 800c694:	4603      	mov	r3, r0
 800c696:	461a      	mov	r2, r3
 800c698:	7bfb      	ldrb	r3, [r7, #15]
 800c69a:	4313      	orrs	r3, r2
 800c69c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 800c69e:	2202      	movs	r2, #2
 800c6a0:	2185      	movs	r1, #133	; 0x85
 800c6a2:	6878      	ldr	r0, [r7, #4]
 800c6a4:	f003 fbf4 	bl	800fe90 <VL53L0X_WrByte>
 800c6a8:	4603      	mov	r3, r0
 800c6aa:	461a      	mov	r2, r3
 800c6ac:	7bfb      	ldrb	r3, [r7, #15]
 800c6ae:	4313      	orrs	r3, r2
 800c6b0:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 800c6b2:	2204      	movs	r2, #4
 800c6b4:	21ff      	movs	r1, #255	; 0xff
 800c6b6:	6878      	ldr	r0, [r7, #4]
 800c6b8:	f003 fbea 	bl	800fe90 <VL53L0X_WrByte>
 800c6bc:	4603      	mov	r3, r0
 800c6be:	461a      	mov	r2, r3
 800c6c0:	7bfb      	ldrb	r3, [r7, #15]
 800c6c2:	4313      	orrs	r3, r2
 800c6c4:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 800c6c6:	2200      	movs	r2, #0
 800c6c8:	21cd      	movs	r1, #205	; 0xcd
 800c6ca:	6878      	ldr	r0, [r7, #4]
 800c6cc:	f003 fbe0 	bl	800fe90 <VL53L0X_WrByte>
 800c6d0:	4603      	mov	r3, r0
 800c6d2:	461a      	mov	r2, r3
 800c6d4:	7bfb      	ldrb	r3, [r7, #15]
 800c6d6:	4313      	orrs	r3, r2
 800c6d8:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 800c6da:	2211      	movs	r2, #17
 800c6dc:	21cc      	movs	r1, #204	; 0xcc
 800c6de:	6878      	ldr	r0, [r7, #4]
 800c6e0:	f003 fbd6 	bl	800fe90 <VL53L0X_WrByte>
 800c6e4:	4603      	mov	r3, r0
 800c6e6:	461a      	mov	r2, r3
 800c6e8:	7bfb      	ldrb	r3, [r7, #15]
 800c6ea:	4313      	orrs	r3, r2
 800c6ec:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 800c6ee:	2207      	movs	r2, #7
 800c6f0:	21ff      	movs	r1, #255	; 0xff
 800c6f2:	6878      	ldr	r0, [r7, #4]
 800c6f4:	f003 fbcc 	bl	800fe90 <VL53L0X_WrByte>
 800c6f8:	4603      	mov	r3, r0
 800c6fa:	461a      	mov	r2, r3
 800c6fc:	7bfb      	ldrb	r3, [r7, #15]
 800c6fe:	4313      	orrs	r3, r2
 800c700:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 800c702:	2200      	movs	r2, #0
 800c704:	21be      	movs	r1, #190	; 0xbe
 800c706:	6878      	ldr	r0, [r7, #4]
 800c708:	f003 fbc2 	bl	800fe90 <VL53L0X_WrByte>
 800c70c:	4603      	mov	r3, r0
 800c70e:	461a      	mov	r2, r3
 800c710:	7bfb      	ldrb	r3, [r7, #15]
 800c712:	4313      	orrs	r3, r2
 800c714:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 800c716:	2206      	movs	r2, #6
 800c718:	21ff      	movs	r1, #255	; 0xff
 800c71a:	6878      	ldr	r0, [r7, #4]
 800c71c:	f003 fbb8 	bl	800fe90 <VL53L0X_WrByte>
 800c720:	4603      	mov	r3, r0
 800c722:	461a      	mov	r2, r3
 800c724:	7bfb      	ldrb	r3, [r7, #15]
 800c726:	4313      	orrs	r3, r2
 800c728:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 800c72a:	2209      	movs	r2, #9
 800c72c:	21cc      	movs	r1, #204	; 0xcc
 800c72e:	6878      	ldr	r0, [r7, #4]
 800c730:	f003 fbae 	bl	800fe90 <VL53L0X_WrByte>
 800c734:	4603      	mov	r3, r0
 800c736:	461a      	mov	r2, r3
 800c738:	7bfb      	ldrb	r3, [r7, #15]
 800c73a:	4313      	orrs	r3, r2
 800c73c:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800c73e:	2200      	movs	r2, #0
 800c740:	21ff      	movs	r1, #255	; 0xff
 800c742:	6878      	ldr	r0, [r7, #4]
 800c744:	f003 fba4 	bl	800fe90 <VL53L0X_WrByte>
 800c748:	4603      	mov	r3, r0
 800c74a:	461a      	mov	r2, r3
 800c74c:	7bfb      	ldrb	r3, [r7, #15]
 800c74e:	4313      	orrs	r3, r2
 800c750:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800c752:	2201      	movs	r2, #1
 800c754:	21ff      	movs	r1, #255	; 0xff
 800c756:	6878      	ldr	r0, [r7, #4]
 800c758:	f003 fb9a 	bl	800fe90 <VL53L0X_WrByte>
 800c75c:	4603      	mov	r3, r0
 800c75e:	461a      	mov	r2, r3
 800c760:	7bfb      	ldrb	r3, [r7, #15]
 800c762:	4313      	orrs	r3, r2
 800c764:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800c766:	2200      	movs	r2, #0
 800c768:	2100      	movs	r1, #0
 800c76a:	6878      	ldr	r0, [r7, #4]
 800c76c:	f003 fb90 	bl	800fe90 <VL53L0X_WrByte>
 800c770:	4603      	mov	r3, r0
 800c772:	461a      	mov	r2, r3
 800c774:	7bfb      	ldrb	r3, [r7, #15]
 800c776:	4313      	orrs	r3, r2
 800c778:	73fb      	strb	r3, [r7, #15]
 800c77a:	e058      	b.n	800c82e <VL53L0X_SetGpioConfig+0x23a>

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
 800c77c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c780:	2b00      	cmp	r3, #0
 800c782:	d121      	bne.n	800c7c8 <VL53L0X_SetGpioConfig+0x1d4>
			switch (Functionality) {
 800c784:	787b      	ldrb	r3, [r7, #1]
 800c786:	2b04      	cmp	r3, #4
 800c788:	d81b      	bhi.n	800c7c2 <VL53L0X_SetGpioConfig+0x1ce>
 800c78a:	a201      	add	r2, pc, #4	; (adr r2, 800c790 <VL53L0X_SetGpioConfig+0x19c>)
 800c78c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c790:	0800c7a5 	.word	0x0800c7a5
 800c794:	0800c7ab 	.word	0x0800c7ab
 800c798:	0800c7b1 	.word	0x0800c7b1
 800c79c:	0800c7b7 	.word	0x0800c7b7
 800c7a0:	0800c7bd 	.word	0x0800c7bd
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 800c7a4:	2300      	movs	r3, #0
 800c7a6:	73bb      	strb	r3, [r7, #14]
				break;
 800c7a8:	e00f      	b.n	800c7ca <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 800c7aa:	2301      	movs	r3, #1
 800c7ac:	73bb      	strb	r3, [r7, #14]
				break;
 800c7ae:	e00c      	b.n	800c7ca <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 800c7b0:	2302      	movs	r3, #2
 800c7b2:	73bb      	strb	r3, [r7, #14]
				break;
 800c7b4:	e009      	b.n	800c7ca <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 800c7b6:	2303      	movs	r3, #3
 800c7b8:	73bb      	strb	r3, [r7, #14]
				break;
 800c7ba:	e006      	b.n	800c7ca <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 800c7bc:	2304      	movs	r3, #4
 800c7be:	73bb      	strb	r3, [r7, #14]
				break;
 800c7c0:	e003      	b.n	800c7ca <VL53L0X_SetGpioConfig+0x1d6>
			default:
				Status =
 800c7c2:	23f5      	movs	r3, #245	; 0xf5
 800c7c4:	73fb      	strb	r3, [r7, #15]
 800c7c6:	e000      	b.n	800c7ca <VL53L0X_SetGpioConfig+0x1d6>
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}
 800c7c8:	bf00      	nop

		if (Status == VL53L0X_ERROR_NONE)
 800c7ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d107      	bne.n	800c7e2 <VL53L0X_SetGpioConfig+0x1ee>
			Status = VL53L0X_WrByte(Dev,
 800c7d2:	7bbb      	ldrb	r3, [r7, #14]
 800c7d4:	461a      	mov	r2, r3
 800c7d6:	210a      	movs	r1, #10
 800c7d8:	6878      	ldr	r0, [r7, #4]
 800c7da:	f003 fb59 	bl	800fe90 <VL53L0X_WrByte>
 800c7de:	4603      	mov	r3, r0
 800c7e0:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 800c7e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d10f      	bne.n	800c80a <VL53L0X_SetGpioConfig+0x216>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 800c7ea:	7e3b      	ldrb	r3, [r7, #24]
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d102      	bne.n	800c7f6 <VL53L0X_SetGpioConfig+0x202>
				data = 0;
 800c7f0:	2300      	movs	r3, #0
 800c7f2:	73bb      	strb	r3, [r7, #14]
 800c7f4:	e001      	b.n	800c7fa <VL53L0X_SetGpioConfig+0x206>
			else
				data = (uint8_t)(1 << 4);
 800c7f6:	2310      	movs	r3, #16
 800c7f8:	73bb      	strb	r3, [r7, #14]

			Status = VL53L0X_UpdateByte(Dev,
 800c7fa:	7bbb      	ldrb	r3, [r7, #14]
 800c7fc:	22ef      	movs	r2, #239	; 0xef
 800c7fe:	2184      	movs	r1, #132	; 0x84
 800c800:	6878      	ldr	r0, [r7, #4]
 800c802:	f003 fb93 	bl	800ff2c <VL53L0X_UpdateByte>
 800c806:	4603      	mov	r3, r0
 800c808:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 800c80a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d103      	bne.n	800c81a <VL53L0X_SetGpioConfig+0x226>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	787a      	ldrb	r2, [r7, #1]
 800c816:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
				Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 800c81a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d105      	bne.n	800c82e <VL53L0X_SetGpioConfig+0x23a>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800c822:	2100      	movs	r1, #0
 800c824:	6878      	ldr	r0, [r7, #4]
 800c826:	f000 f83f 	bl	800c8a8 <VL53L0X_ClearInterruptMask>
 800c82a:	4603      	mov	r3, r0
 800c82c:	73fb      	strb	r3, [r7, #15]

	}

	LOG_FUNCTION_END(Status);
	return Status;
 800c82e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c832:	4618      	mov	r0, r3
 800c834:	3710      	adds	r7, #16
 800c836:	46bd      	mov	sp, r7
 800c838:	bd80      	pop	{r7, pc}
 800c83a:	bf00      	nop

0800c83c <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 800c83c:	b580      	push	{r7, lr}
 800c83e:	b086      	sub	sp, #24
 800c840:	af00      	add	r7, sp, #0
 800c842:	60f8      	str	r0, [r7, #12]
 800c844:	607a      	str	r2, [r7, #4]
 800c846:	603b      	str	r3, [r7, #0]
 800c848:	460b      	mov	r3, r1
 800c84a:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c84c:	2300      	movs	r3, #0
 800c84e:	75fb      	strb	r3, [r7, #23]
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 800c850:	f107 0314 	add.w	r3, r7, #20
 800c854:	461a      	mov	r2, r3
 800c856:	210e      	movs	r1, #14
 800c858:	68f8      	ldr	r0, [r7, #12]
 800c85a:	f003 fbc5 	bl	800ffe8 <VL53L0X_RdWord>
 800c85e:	4603      	mov	r3, r0
 800c860:	75fb      	strb	r3, [r7, #23]
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 800c862:	8abb      	ldrh	r3, [r7, #20]
 800c864:	045b      	lsls	r3, r3, #17
 800c866:	461a      	mov	r2, r3
 800c868:	4b0e      	ldr	r3, [pc, #56]	; (800c8a4 <VL53L0X_GetInterruptThresholds+0x68>)
 800c86a:	4013      	ands	r3, r2
 800c86c:	687a      	ldr	r2, [r7, #4]
 800c86e:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 800c870:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c874:	2b00      	cmp	r3, #0
 800c876:	d10f      	bne.n	800c898 <VL53L0X_GetInterruptThresholds+0x5c>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 800c878:	f107 0314 	add.w	r3, r7, #20
 800c87c:	461a      	mov	r2, r3
 800c87e:	210c      	movs	r1, #12
 800c880:	68f8      	ldr	r0, [r7, #12]
 800c882:	f003 fbb1 	bl	800ffe8 <VL53L0X_RdWord>
 800c886:	4603      	mov	r3, r0
 800c888:	75fb      	strb	r3, [r7, #23]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 800c88a:	8abb      	ldrh	r3, [r7, #20]
 800c88c:	045b      	lsls	r3, r3, #17
 800c88e:	461a      	mov	r2, r3
 800c890:	4b04      	ldr	r3, [pc, #16]	; (800c8a4 <VL53L0X_GetInterruptThresholds+0x68>)
 800c892:	4013      	ands	r3, r2
		*pThresholdHigh =
 800c894:	683a      	ldr	r2, [r7, #0]
 800c896:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800c898:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c89c:	4618      	mov	r0, r3
 800c89e:	3718      	adds	r7, #24
 800c8a0:	46bd      	mov	sp, r7
 800c8a2:	bd80      	pop	{r7, pc}
 800c8a4:	1ffe0000 	.word	0x1ffe0000

0800c8a8 <VL53L0X_ClearInterruptMask>:
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 800c8a8:	b580      	push	{r7, lr}
 800c8aa:	b084      	sub	sp, #16
 800c8ac:	af00      	add	r7, sp, #0
 800c8ae:	6078      	str	r0, [r7, #4]
 800c8b0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c8b2:	2300      	movs	r3, #0
 800c8b4:	73fb      	strb	r3, [r7, #15]
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 800c8b6:	2300      	movs	r3, #0
 800c8b8:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 800c8ba:	2201      	movs	r2, #1
 800c8bc:	210b      	movs	r1, #11
 800c8be:	6878      	ldr	r0, [r7, #4]
 800c8c0:	f003 fae6 	bl	800fe90 <VL53L0X_WrByte>
 800c8c4:	4603      	mov	r3, r0
 800c8c6:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 800c8c8:	2200      	movs	r2, #0
 800c8ca:	210b      	movs	r1, #11
 800c8cc:	6878      	ldr	r0, [r7, #4]
 800c8ce:	f003 fadf 	bl	800fe90 <VL53L0X_WrByte>
 800c8d2:	4603      	mov	r3, r0
 800c8d4:	461a      	mov	r2, r3
 800c8d6:	7bfb      	ldrb	r3, [r7, #15]
 800c8d8:	4313      	orrs	r3, r2
 800c8da:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 800c8dc:	f107 030d 	add.w	r3, r7, #13
 800c8e0:	461a      	mov	r2, r3
 800c8e2:	2113      	movs	r1, #19
 800c8e4:	6878      	ldr	r0, [r7, #4]
 800c8e6:	f003 fb55 	bl	800ff94 <VL53L0X_RdByte>
 800c8ea:	4603      	mov	r3, r0
 800c8ec:	461a      	mov	r2, r3
 800c8ee:	7bfb      	ldrb	r3, [r7, #15]
 800c8f0:	4313      	orrs	r3, r2
 800c8f2:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 800c8f4:	7bbb      	ldrb	r3, [r7, #14]
 800c8f6:	3301      	adds	r3, #1
 800c8f8:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 800c8fa:	7b7b      	ldrb	r3, [r7, #13]
 800c8fc:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 800c900:	2b00      	cmp	r3, #0
 800c902:	d006      	beq.n	800c912 <VL53L0X_ClearInterruptMask+0x6a>
			&& (LoopCount < 3)
 800c904:	7bbb      	ldrb	r3, [r7, #14]
 800c906:	2b02      	cmp	r3, #2
 800c908:	d803      	bhi.n	800c912 <VL53L0X_ClearInterruptMask+0x6a>
			&& (Status == VL53L0X_ERROR_NONE));
 800c90a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d0d3      	beq.n	800c8ba <VL53L0X_ClearInterruptMask+0x12>


	if (LoopCount >= 3)
 800c912:	7bbb      	ldrb	r3, [r7, #14]
 800c914:	2b02      	cmp	r3, #2
 800c916:	d901      	bls.n	800c91c <VL53L0X_ClearInterruptMask+0x74>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 800c918:	23f4      	movs	r3, #244	; 0xf4
 800c91a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 800c91c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c920:	4618      	mov	r0, r3
 800c922:	3710      	adds	r7, #16
 800c924:	46bd      	mov	sp, r7
 800c926:	bd80      	pop	{r7, pc}

0800c928 <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 800c928:	b580      	push	{r7, lr}
 800c92a:	b084      	sub	sp, #16
 800c92c:	af00      	add	r7, sp, #0
 800c92e:	6078      	str	r0, [r7, #4]
 800c930:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c932:	2300      	movs	r3, #0
 800c934:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 800c936:	f107 030e 	add.w	r3, r7, #14
 800c93a:	461a      	mov	r2, r3
 800c93c:	2113      	movs	r1, #19
 800c93e:	6878      	ldr	r0, [r7, #4]
 800c940:	f003 fb28 	bl	800ff94 <VL53L0X_RdByte>
 800c944:	4603      	mov	r3, r0
 800c946:	73fb      	strb	r3, [r7, #15]
	*pInterruptMaskStatus = Byte & 0x07;
 800c948:	7bbb      	ldrb	r3, [r7, #14]
 800c94a:	f003 0207 	and.w	r2, r3, #7
 800c94e:	683b      	ldr	r3, [r7, #0]
 800c950:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 800c952:	7bbb      	ldrb	r3, [r7, #14]
 800c954:	f003 0318 	and.w	r3, r3, #24
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d001      	beq.n	800c960 <VL53L0X_GetInterruptMaskStatus+0x38>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 800c95c:	23fa      	movs	r3, #250	; 0xfa
 800c95e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 800c960:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c964:	4618      	mov	r0, r3
 800c966:	3710      	adds	r7, #16
 800c968:	46bd      	mov	sp, r7
 800c96a:	bd80      	pop	{r7, pc}

0800c96c <VL53L0X_SetReferenceSpads>:
 * Internal functions
 *****************************************************************************/

VL53L0X_Error VL53L0X_SetReferenceSpads(VL53L0X_DEV Dev, uint32_t count,
	uint8_t isApertureSpads)
{
 800c96c:	b580      	push	{r7, lr}
 800c96e:	b086      	sub	sp, #24
 800c970:	af00      	add	r7, sp, #0
 800c972:	60f8      	str	r0, [r7, #12]
 800c974:	60b9      	str	r1, [r7, #8]
 800c976:	4613      	mov	r3, r2
 800c978:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c97a:	2300      	movs	r3, #0
 800c97c:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_reference_spads(Dev, count, isApertureSpads);
 800c97e:	79fb      	ldrb	r3, [r7, #7]
 800c980:	461a      	mov	r2, r3
 800c982:	68b9      	ldr	r1, [r7, #8]
 800c984:	68f8      	ldr	r0, [r7, #12]
 800c986:	f000 fc55 	bl	800d234 <VL53L0X_set_reference_spads>
 800c98a:	4603      	mov	r3, r0
 800c98c:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);

	return Status;
 800c98e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c992:	4618      	mov	r0, r3
 800c994:	3718      	adds	r7, #24
 800c996:	46bd      	mov	sp, r7
 800c998:	bd80      	pop	{r7, pc}

0800c99a <VL53L0X_PerformRefSpadManagement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
 800c99a:	b580      	push	{r7, lr}
 800c99c:	b086      	sub	sp, #24
 800c99e:	af00      	add	r7, sp, #0
 800c9a0:	60f8      	str	r0, [r7, #12]
 800c9a2:	60b9      	str	r1, [r7, #8]
 800c9a4:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c9a6:	2300      	movs	r3, #0
 800c9a8:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 800c9aa:	687a      	ldr	r2, [r7, #4]
 800c9ac:	68b9      	ldr	r1, [r7, #8]
 800c9ae:	68f8      	ldr	r0, [r7, #12]
 800c9b0:	f000 fa34 	bl	800ce1c <VL53L0X_perform_ref_spad_management>
 800c9b4:	4603      	mov	r3, r0
 800c9b6:	75fb      	strb	r3, [r7, #23]
		isApertureSpads);

	LOG_FUNCTION_END(Status);

	return Status;
 800c9b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c9bc:	4618      	mov	r0, r3
 800c9be:	3718      	adds	r7, #24
 800c9c0:	46bd      	mov	sp, r7
 800c9c2:	bd80      	pop	{r7, pc}

0800c9c4 <VL53L0X_PerformContinuousRangingMeasurement>:


VL53L0X_Error VL53L0X_PerformContinuousRangingMeasurement(VL53L0X_Dev_t *device, VL53L0X_RangingMeasurementData_t *ranging_data) {
 800c9c4:	b580      	push	{r7, lr}
 800c9c6:	b084      	sub	sp, #16
 800c9c8:	af00      	add	r7, sp, #0
 800c9ca:	6078      	str	r0, [r7, #4]
 800c9cc:	6039      	str	r1, [r7, #0]
    VL53L0X_Error status;

    // Set the device to high accuracy mode
    status = VL53L0X_SetDeviceMode(device, VL53L0X_DEVICEMODE_CONTINUOUS_RANGING);
 800c9ce:	2101      	movs	r1, #1
 800c9d0:	6878      	ldr	r0, [r7, #4]
 800c9d2:	f7fe fea3 	bl	800b71c <VL53L0X_SetDeviceMode>
 800c9d6:	4603      	mov	r3, r0
 800c9d8:	73fb      	strb	r3, [r7, #15]
    if (status != VL53L0X_ERROR_NONE) {
 800c9da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d002      	beq.n	800c9e8 <VL53L0X_PerformContinuousRangingMeasurement+0x24>
        return status;
 800c9e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c9e6:	e019      	b.n	800ca1c <VL53L0X_PerformContinuousRangingMeasurement+0x58>
    }

    // Start continuous ranging measurement
    status = VL53L0X_StartMeasurement(device);
 800c9e8:	6878      	ldr	r0, [r7, #4]
 800c9ea:	f7ff fbad 	bl	800c148 <VL53L0X_StartMeasurement>
 800c9ee:	4603      	mov	r3, r0
 800c9f0:	73fb      	strb	r3, [r7, #15]
    if (status != VL53L0X_ERROR_NONE) {
 800c9f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d002      	beq.n	800ca00 <VL53L0X_PerformContinuousRangingMeasurement+0x3c>
        return status;
 800c9fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c9fe:	e00d      	b.n	800ca1c <VL53L0X_PerformContinuousRangingMeasurement+0x58>
    }

    // Get ranging measurement data
    status = VL53L0X_GetRangingMeasurementData(device, ranging_data);
 800ca00:	6839      	ldr	r1, [r7, #0]
 800ca02:	6878      	ldr	r0, [r7, #4]
 800ca04:	f7ff fca2 	bl	800c34c <VL53L0X_GetRangingMeasurementData>
 800ca08:	4603      	mov	r3, r0
 800ca0a:	73fb      	strb	r3, [r7, #15]
    if (status != VL53L0X_ERROR_NONE) {
 800ca0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d002      	beq.n	800ca1a <VL53L0X_PerformContinuousRangingMeasurement+0x56>
        return status;
 800ca14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ca18:	e000      	b.n	800ca1c <VL53L0X_PerformContinuousRangingMeasurement+0x58>
    }

    return VL53L0X_ERROR_NONE;
 800ca1a:	2300      	movs	r3, #0
}
 800ca1c:	4618      	mov	r0, r3
 800ca1e:	3710      	adds	r7, #16
 800ca20:	46bd      	mov	sp, r7
 800ca22:	bd80      	pop	{r7, pc}

0800ca24 <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 800ca24:	b580      	push	{r7, lr}
 800ca26:	b084      	sub	sp, #16
 800ca28:	af00      	add	r7, sp, #0
 800ca2a:	6078      	str	r0, [r7, #4]
 800ca2c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ca2e:	2300      	movs	r3, #0
 800ca30:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 800ca32:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800ca36:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 800ca38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ca3c:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 800ca3e:	f107 0308 	add.w	r3, r7, #8
 800ca42:	461a      	mov	r2, r3
 800ca44:	2128      	movs	r1, #40	; 0x28
 800ca46:	6878      	ldr	r0, [r7, #4]
 800ca48:	f003 face 	bl	800ffe8 <VL53L0X_RdWord>
 800ca4c:	4603      	mov	r3, r0
 800ca4e:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 800ca50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d11e      	bne.n	800ca96 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 800ca58:	893b      	ldrh	r3, [r7, #8]
 800ca5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ca5e:	b29b      	uxth	r3, r3
 800ca60:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 800ca62:	893b      	ldrh	r3, [r7, #8]
 800ca64:	461a      	mov	r2, r3
 800ca66:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800ca6a:	429a      	cmp	r2, r3
 800ca6c:	dd0b      	ble.n	800ca86 <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 800ca6e:	893a      	ldrh	r2, [r7, #8]
 800ca70:	897b      	ldrh	r3, [r7, #10]
 800ca72:	1ad3      	subs	r3, r2, r3
 800ca74:	b29b      	uxth	r3, r3
 800ca76:	b21b      	sxth	r3, r3
 800ca78:	461a      	mov	r2, r3
					* 250;
 800ca7a:	23fa      	movs	r3, #250	; 0xfa
 800ca7c:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 800ca80:	683b      	ldr	r3, [r7, #0]
 800ca82:	601a      	str	r2, [r3, #0]
 800ca84:	e007      	b.n	800ca96 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 800ca86:	893b      	ldrh	r3, [r7, #8]
 800ca88:	b21b      	sxth	r3, r3
 800ca8a:	461a      	mov	r2, r3
 800ca8c:	23fa      	movs	r3, #250	; 0xfa
 800ca8e:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 800ca92:	683b      	ldr	r3, [r7, #0]
 800ca94:	601a      	str	r2, [r3, #0]

	}

	return Status;
 800ca96:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ca9a:	4618      	mov	r0, r3
 800ca9c:	3710      	adds	r7, #16
 800ca9e:	46bd      	mov	sp, r7
 800caa0:	bd80      	pop	{r7, pc}

0800caa2 <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 800caa2:	b480      	push	{r7}
 800caa4:	b08b      	sub	sp, #44	; 0x2c
 800caa6:	af00      	add	r7, sp, #0
 800caa8:	60f8      	str	r0, [r7, #12]
 800caaa:	60b9      	str	r1, [r7, #8]
 800caac:	607a      	str	r2, [r7, #4]
 800caae:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 800cab0:	2308      	movs	r3, #8
 800cab2:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 800cab4:	2300      	movs	r3, #0
 800cab6:	77bb      	strb	r3, [r7, #30]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 800cab8:	683b      	ldr	r3, [r7, #0]
 800caba:	f04f 32ff 	mov.w	r2, #4294967295
 800cabe:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 800cac0:	687a      	ldr	r2, [r7, #4]
 800cac2:	69bb      	ldr	r3, [r7, #24]
 800cac4:	fbb2 f3f3 	udiv	r3, r2, r3
 800cac8:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	69ba      	ldr	r2, [r7, #24]
 800cace:	fbb3 f2f2 	udiv	r2, r3, r2
 800cad2:	69b9      	ldr	r1, [r7, #24]
 800cad4:	fb01 f202 	mul.w	r2, r1, r2
 800cad8:	1a9b      	subs	r3, r3, r2
 800cada:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 800cadc:	697b      	ldr	r3, [r7, #20]
 800cade:	627b      	str	r3, [r7, #36]	; 0x24
 800cae0:	e030      	b.n	800cb44 <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 800cae2:	2300      	movs	r3, #0
 800cae4:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 800cae6:	68fa      	ldr	r2, [r7, #12]
 800cae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caea:	4413      	add	r3, r2
 800caec:	781b      	ldrb	r3, [r3, #0]
 800caee:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 800caf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800caf2:	697b      	ldr	r3, [r7, #20]
 800caf4:	429a      	cmp	r2, r3
 800caf6:	d11e      	bne.n	800cb36 <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating */
			dataByte >>= fineOffset;
 800caf8:	7ffa      	ldrb	r2, [r7, #31]
 800cafa:	693b      	ldr	r3, [r7, #16]
 800cafc:	fa42 f303 	asr.w	r3, r2, r3
 800cb00:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 800cb02:	693b      	ldr	r3, [r7, #16]
 800cb04:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 800cb06:	e016      	b.n	800cb36 <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 800cb08:	7ffb      	ldrb	r3, [r7, #31]
 800cb0a:	f003 0301 	and.w	r3, r3, #1
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d00b      	beq.n	800cb2a <get_next_good_spad+0x88>
				success = 1;
 800cb12:	2301      	movs	r3, #1
 800cb14:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 800cb16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb18:	69ba      	ldr	r2, [r7, #24]
 800cb1a:	fb03 f202 	mul.w	r2, r3, r2
 800cb1e:	6a3b      	ldr	r3, [r7, #32]
 800cb20:	4413      	add	r3, r2
 800cb22:	461a      	mov	r2, r3
 800cb24:	683b      	ldr	r3, [r7, #0]
 800cb26:	601a      	str	r2, [r3, #0]
				break;
 800cb28:	e009      	b.n	800cb3e <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 800cb2a:	7ffb      	ldrb	r3, [r7, #31]
 800cb2c:	085b      	lsrs	r3, r3, #1
 800cb2e:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 800cb30:	6a3b      	ldr	r3, [r7, #32]
 800cb32:	3301      	adds	r3, #1
 800cb34:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 800cb36:	6a3a      	ldr	r2, [r7, #32]
 800cb38:	69bb      	ldr	r3, [r7, #24]
 800cb3a:	429a      	cmp	r2, r3
 800cb3c:	d3e4      	bcc.n	800cb08 <get_next_good_spad+0x66>
				coarseIndex++) {
 800cb3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb40:	3301      	adds	r3, #1
 800cb42:	627b      	str	r3, [r7, #36]	; 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 800cb44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cb46:	68bb      	ldr	r3, [r7, #8]
 800cb48:	429a      	cmp	r2, r3
 800cb4a:	d202      	bcs.n	800cb52 <get_next_good_spad+0xb0>
 800cb4c:	7fbb      	ldrb	r3, [r7, #30]
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d0c7      	beq.n	800cae2 <get_next_good_spad+0x40>
		}
	}
}
 800cb52:	bf00      	nop
 800cb54:	372c      	adds	r7, #44	; 0x2c
 800cb56:	46bd      	mov	sp, r7
 800cb58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb5c:	4770      	bx	lr
	...

0800cb60 <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 800cb60:	b480      	push	{r7}
 800cb62:	b085      	sub	sp, #20
 800cb64:	af00      	add	r7, sp, #0
 800cb66:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 800cb68:	2301      	movs	r3, #1
 800cb6a:	73fb      	strb	r3, [r7, #15]
	quadrant = spadIndex >> 6;
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	099b      	lsrs	r3, r3, #6
 800cb70:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 800cb72:	4a07      	ldr	r2, [pc, #28]	; (800cb90 <is_aperture+0x30>)
 800cb74:	68bb      	ldr	r3, [r7, #8]
 800cb76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d101      	bne.n	800cb82 <is_aperture+0x22>
		isAperture = 0;
 800cb7e:	2300      	movs	r3, #0
 800cb80:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 800cb82:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb84:	4618      	mov	r0, r3
 800cb86:	3714      	adds	r7, #20
 800cb88:	46bd      	mov	sp, r7
 800cb8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb8e:	4770      	bx	lr
 800cb90:	2000037c 	.word	0x2000037c

0800cb94 <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 800cb94:	b480      	push	{r7}
 800cb96:	b089      	sub	sp, #36	; 0x24
 800cb98:	af00      	add	r7, sp, #0
 800cb9a:	60f8      	str	r0, [r7, #12]
 800cb9c:	60b9      	str	r1, [r7, #8]
 800cb9e:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800cba0:	2300      	movs	r3, #0
 800cba2:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 800cba4:	2308      	movs	r3, #8
 800cba6:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 800cba8:	687a      	ldr	r2, [r7, #4]
 800cbaa:	69bb      	ldr	r3, [r7, #24]
 800cbac:	fbb2 f3f3 	udiv	r3, r2, r3
 800cbb0:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	69ba      	ldr	r2, [r7, #24]
 800cbb6:	fbb3 f2f2 	udiv	r2, r3, r2
 800cbba:	69b9      	ldr	r1, [r7, #24]
 800cbbc:	fb01 f202 	mul.w	r2, r1, r2
 800cbc0:	1a9b      	subs	r3, r3, r2
 800cbc2:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 800cbc4:	697a      	ldr	r2, [r7, #20]
 800cbc6:	68bb      	ldr	r3, [r7, #8]
 800cbc8:	429a      	cmp	r2, r3
 800cbca:	d302      	bcc.n	800cbd2 <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 800cbcc:	23ce      	movs	r3, #206	; 0xce
 800cbce:	77fb      	strb	r3, [r7, #31]
 800cbd0:	e010      	b.n	800cbf4 <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 800cbd2:	68fa      	ldr	r2, [r7, #12]
 800cbd4:	697b      	ldr	r3, [r7, #20]
 800cbd6:	4413      	add	r3, r2
 800cbd8:	781b      	ldrb	r3, [r3, #0]
 800cbda:	b25a      	sxtb	r2, r3
 800cbdc:	2101      	movs	r1, #1
 800cbde:	693b      	ldr	r3, [r7, #16]
 800cbe0:	fa01 f303 	lsl.w	r3, r1, r3
 800cbe4:	b25b      	sxtb	r3, r3
 800cbe6:	4313      	orrs	r3, r2
 800cbe8:	b259      	sxtb	r1, r3
 800cbea:	68fa      	ldr	r2, [r7, #12]
 800cbec:	697b      	ldr	r3, [r7, #20]
 800cbee:	4413      	add	r3, r2
 800cbf0:	b2ca      	uxtb	r2, r1
 800cbf2:	701a      	strb	r2, [r3, #0]

	return status;
 800cbf4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800cbf8:	4618      	mov	r0, r3
 800cbfa:	3724      	adds	r7, #36	; 0x24
 800cbfc:	46bd      	mov	sp, r7
 800cbfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc02:	4770      	bx	lr

0800cc04 <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 800cc04:	b580      	push	{r7, lr}
 800cc06:	b084      	sub	sp, #16
 800cc08:	af00      	add	r7, sp, #0
 800cc0a:	6078      	str	r0, [r7, #4]
 800cc0c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 800cc0e:	2306      	movs	r3, #6
 800cc10:	683a      	ldr	r2, [r7, #0]
 800cc12:	21b0      	movs	r1, #176	; 0xb0
 800cc14:	6878      	ldr	r0, [r7, #4]
 800cc16:	f003 f8df 	bl	800fdd8 <VL53L0X_WriteMulti>
 800cc1a:	4603      	mov	r3, r0
 800cc1c:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 800cc1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800cc22:	4618      	mov	r0, r3
 800cc24:	3710      	adds	r7, #16
 800cc26:	46bd      	mov	sp, r7
 800cc28:	bd80      	pop	{r7, pc}

0800cc2a <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 800cc2a:	b580      	push	{r7, lr}
 800cc2c:	b084      	sub	sp, #16
 800cc2e:	af00      	add	r7, sp, #0
 800cc30:	6078      	str	r0, [r7, #4]
 800cc32:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 800cc34:	2306      	movs	r3, #6
 800cc36:	683a      	ldr	r2, [r7, #0]
 800cc38:	21b0      	movs	r1, #176	; 0xb0
 800cc3a:	6878      	ldr	r0, [r7, #4]
 800cc3c:	f003 f8fc 	bl	800fe38 <VL53L0X_ReadMulti>
 800cc40:	4603      	mov	r3, r0
 800cc42:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 800cc44:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800cc48:	4618      	mov	r0, r3
 800cc4a:	3710      	adds	r7, #16
 800cc4c:	46bd      	mov	sp, r7
 800cc4e:	bd80      	pop	{r7, pc}

0800cc50 <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 800cc50:	b580      	push	{r7, lr}
 800cc52:	b08c      	sub	sp, #48	; 0x30
 800cc54:	af00      	add	r7, sp, #0
 800cc56:	60f8      	str	r0, [r7, #12]
 800cc58:	607a      	str	r2, [r7, #4]
 800cc5a:	603b      	str	r3, [r7, #0]
 800cc5c:	460b      	mov	r3, r1
 800cc5e:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800cc60:	2300      	movs	r3, #0
 800cc62:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 800cc66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cc68:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 800cc6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cc6c:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 800cc6e:	2300      	movs	r3, #0
 800cc70:	62bb      	str	r3, [r7, #40]	; 0x28
 800cc72:	e02b      	b.n	800cccc <enable_ref_spads+0x7c>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 800cc74:	f107 031c 	add.w	r3, r7, #28
 800cc78:	6a3a      	ldr	r2, [r7, #32]
 800cc7a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800cc7c:	6878      	ldr	r0, [r7, #4]
 800cc7e:	f7ff ff10 	bl	800caa2 <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 800cc82:	69fb      	ldr	r3, [r7, #28]
 800cc84:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc88:	d103      	bne.n	800cc92 <enable_ref_spads+0x42>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 800cc8a:	23ce      	movs	r3, #206	; 0xce
 800cc8c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 800cc90:	e020      	b.n	800ccd4 <enable_ref_spads+0x84>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 800cc92:	69fb      	ldr	r3, [r7, #28]
 800cc94:	461a      	mov	r2, r3
 800cc96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc98:	4413      	add	r3, r2
 800cc9a:	4618      	mov	r0, r3
 800cc9c:	f7ff ff60 	bl	800cb60 <is_aperture>
 800cca0:	4603      	mov	r3, r0
 800cca2:	461a      	mov	r2, r3
 800cca4:	7afb      	ldrb	r3, [r7, #11]
 800cca6:	4293      	cmp	r3, r2
 800cca8:	d003      	beq.n	800ccb2 <enable_ref_spads+0x62>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 800ccaa:	23ce      	movs	r3, #206	; 0xce
 800ccac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 800ccb0:	e010      	b.n	800ccd4 <enable_ref_spads+0x84>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 800ccb2:	69fb      	ldr	r3, [r7, #28]
 800ccb4:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 800ccb6:	6a3a      	ldr	r2, [r7, #32]
 800ccb8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ccba:	6838      	ldr	r0, [r7, #0]
 800ccbc:	f7ff ff6a 	bl	800cb94 <enable_spad_bit>
		currentSpad++;
 800ccc0:	6a3b      	ldr	r3, [r7, #32]
 800ccc2:	3301      	adds	r3, #1
 800ccc4:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 800ccc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccc8:	3301      	adds	r3, #1
 800ccca:	62bb      	str	r3, [r7, #40]	; 0x28
 800cccc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ccce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ccd0:	429a      	cmp	r2, r3
 800ccd2:	d3cf      	bcc.n	800cc74 <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 800ccd4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ccd6:	6a3a      	ldr	r2, [r7, #32]
 800ccd8:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 800ccda:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	d106      	bne.n	800ccf0 <enable_ref_spads+0xa0>
		status = set_ref_spad_map(Dev, spadArray);
 800cce2:	6839      	ldr	r1, [r7, #0]
 800cce4:	68f8      	ldr	r0, [r7, #12]
 800cce6:	f7ff ff8d 	bl	800cc04 <set_ref_spad_map>
 800ccea:	4603      	mov	r3, r0
 800ccec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 800ccf0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	d121      	bne.n	800cd3c <enable_ref_spads+0xec>
		status = get_ref_spad_map(Dev, checkSpadArray);
 800ccf8:	f107 0314 	add.w	r3, r7, #20
 800ccfc:	4619      	mov	r1, r3
 800ccfe:	68f8      	ldr	r0, [r7, #12]
 800cd00:	f7ff ff93 	bl	800cc2a <get_ref_spad_map>
 800cd04:	4603      	mov	r3, r0
 800cd06:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		i = 0;
 800cd0a:	2300      	movs	r3, #0
 800cd0c:	627b      	str	r3, [r7, #36]	; 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 800cd0e:	e011      	b.n	800cd34 <enable_ref_spads+0xe4>
			if (spadArray[i] != checkSpadArray[i]) {
 800cd10:	683a      	ldr	r2, [r7, #0]
 800cd12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd14:	4413      	add	r3, r2
 800cd16:	781a      	ldrb	r2, [r3, #0]
 800cd18:	f107 0114 	add.w	r1, r7, #20
 800cd1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd1e:	440b      	add	r3, r1
 800cd20:	781b      	ldrb	r3, [r3, #0]
 800cd22:	429a      	cmp	r2, r3
 800cd24:	d003      	beq.n	800cd2e <enable_ref_spads+0xde>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 800cd26:	23ce      	movs	r3, #206	; 0xce
 800cd28:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 800cd2c:	e006      	b.n	800cd3c <enable_ref_spads+0xec>
			}
			i++;
 800cd2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd30:	3301      	adds	r3, #1
 800cd32:	627b      	str	r3, [r7, #36]	; 0x24
		while (i < size) {
 800cd34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cd36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd38:	429a      	cmp	r2, r3
 800cd3a:	d3e9      	bcc.n	800cd10 <enable_ref_spads+0xc0>
		}
	}
	return status;
 800cd3c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800cd40:	4618      	mov	r0, r3
 800cd42:	3730      	adds	r7, #48	; 0x30
 800cd44:	46bd      	mov	sp, r7
 800cd46:	bd80      	pop	{r7, pc}

0800cd48 <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 800cd48:	b580      	push	{r7, lr}
 800cd4a:	b08a      	sub	sp, #40	; 0x28
 800cd4c:	af00      	add	r7, sp, #0
 800cd4e:	6078      	str	r0, [r7, #4]
 800cd50:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800cd52:	2300      	movs	r3, #0
 800cd54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 800cd58:	2300      	movs	r3, #0
 800cd5a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800cd64:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 800cd68:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d107      	bne.n	800cd80 <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 800cd70:	22c0      	movs	r2, #192	; 0xc0
 800cd72:	2101      	movs	r1, #1
 800cd74:	6878      	ldr	r0, [r7, #4]
 800cd76:	f003 f88b 	bl	800fe90 <VL53L0X_WrByte>
 800cd7a:	4603      	mov	r3, r0
 800cd7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 800cd80:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d108      	bne.n	800cd9a <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 800cd88:	f107 0308 	add.w	r3, r7, #8
 800cd8c:	4619      	mov	r1, r3
 800cd8e:	6878      	ldr	r0, [r7, #4]
 800cd90:	f7ff fc00 	bl	800c594 <VL53L0X_PerformSingleRangingMeasurement>
 800cd94:	4603      	mov	r3, r0
 800cd96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 800cd9a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d107      	bne.n	800cdb2 <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800cda2:	2201      	movs	r2, #1
 800cda4:	21ff      	movs	r1, #255	; 0xff
 800cda6:	6878      	ldr	r0, [r7, #4]
 800cda8:	f003 f872 	bl	800fe90 <VL53L0X_WrByte>
 800cdac:	4603      	mov	r3, r0
 800cdae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE)
 800cdb2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d107      	bne.n	800cdca <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 800cdba:	683a      	ldr	r2, [r7, #0]
 800cdbc:	21b6      	movs	r1, #182	; 0xb6
 800cdbe:	6878      	ldr	r0, [r7, #4]
 800cdc0:	f003 f912 	bl	800ffe8 <VL53L0X_RdWord>
 800cdc4:	4603      	mov	r3, r0
 800cdc6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 800cdca:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d107      	bne.n	800cde2 <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800cdd2:	2200      	movs	r2, #0
 800cdd4:	21ff      	movs	r1, #255	; 0xff
 800cdd6:	6878      	ldr	r0, [r7, #4]
 800cdd8:	f003 f85a 	bl	800fe90 <VL53L0X_WrByte>
 800cddc:	4603      	mov	r3, r0
 800cdde:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE) {
 800cde2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d112      	bne.n	800ce10 <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800cdea:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cdee:	461a      	mov	r2, r3
 800cdf0:	2101      	movs	r1, #1
 800cdf2:	6878      	ldr	r0, [r7, #4]
 800cdf4:	f003 f84c 	bl	800fe90 <VL53L0X_WrByte>
 800cdf8:	4603      	mov	r3, r0
 800cdfa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 800cdfe:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	d104      	bne.n	800ce10 <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800ce0c:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
	}

	return status;
 800ce10:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800ce14:	4618      	mov	r0, r3
 800ce16:	3728      	adds	r7, #40	; 0x28
 800ce18:	46bd      	mov	sp, r7
 800ce1a:	bd80      	pop	{r7, pc}

0800ce1c <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 800ce1c:	b590      	push	{r4, r7, lr}
 800ce1e:	b09d      	sub	sp, #116	; 0x74
 800ce20:	af06      	add	r7, sp, #24
 800ce22:	60f8      	str	r0, [r7, #12]
 800ce24:	60b9      	str	r1, [r7, #8]
 800ce26:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ce28:	2300      	movs	r3, #0
 800ce2a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 800ce2e:	23b4      	movs	r3, #180	; 0xb4
 800ce30:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	uint32_t minimumSpadCount = 3;
 800ce34:	2303      	movs	r3, #3
 800ce36:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t maxSpadCount = 44;
 800ce38:	232c      	movs	r3, #44	; 0x2c
 800ce3a:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t currentSpadIndex = 0;
 800ce3c:	2300      	movs	r3, #0
 800ce3e:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t lastSpadIndex = 0;
 800ce40:	2300      	movs	r3, #0
 800ce42:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 800ce44:	2300      	movs	r3, #0
 800ce46:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 800ce48:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 800ce4c:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 800ce4e:	2300      	movs	r3, #0
 800ce50:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t index = 0;
 800ce52:	2300      	movs	r3, #0
 800ce54:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t spadArraySize = 6;
 800ce56:	2306      	movs	r3, #6
 800ce58:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t signalRateDiff = 0;
 800ce5a:	2300      	movs	r3, #0
 800ce5c:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t lastSignalRateDiff = 0;
 800ce5e:	2300      	movs	r3, #0
 800ce60:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t complete = 0;
 800ce62:	2300      	movs	r3, #0
 800ce64:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t VhvSettings = 0;
 800ce68:	2300      	movs	r3, #0
 800ce6a:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 800ce6c:	2300      	movs	r3, #0
 800ce6e:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 800ce70:	2300      	movs	r3, #0
 800ce72:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t	 isApertureSpads_int = 0;
 800ce74:	2300      	movs	r3, #0
 800ce76:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 800ce7a:	68fb      	ldr	r3, [r7, #12]
 800ce7c:	f8b3 313c 	ldrh.w	r3, [r3, #316]	; 0x13c
 800ce80:	85fb      	strh	r3, [r7, #46]	; 0x2e
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 800ce82:	2300      	movs	r3, #0
 800ce84:	64bb      	str	r3, [r7, #72]	; 0x48
 800ce86:	e009      	b.n	800ce9c <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800ce88:	68fa      	ldr	r2, [r7, #12]
 800ce8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ce8c:	4413      	add	r3, r2
 800ce8e:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800ce92:	2200      	movs	r2, #0
 800ce94:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 800ce96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ce98:	3301      	adds	r3, #1
 800ce9a:	64bb      	str	r3, [r7, #72]	; 0x48
 800ce9c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ce9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cea0:	429a      	cmp	r2, r3
 800cea2:	d3f1      	bcc.n	800ce88 <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800cea4:	2201      	movs	r2, #1
 800cea6:	21ff      	movs	r1, #255	; 0xff
 800cea8:	68f8      	ldr	r0, [r7, #12]
 800ceaa:	f002 fff1 	bl	800fe90 <VL53L0X_WrByte>
 800ceae:	4603      	mov	r3, r0
 800ceb0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 800ceb4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d107      	bne.n	800cecc <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 800cebc:	2200      	movs	r2, #0
 800cebe:	214f      	movs	r1, #79	; 0x4f
 800cec0:	68f8      	ldr	r0, [r7, #12]
 800cec2:	f002 ffe5 	bl	800fe90 <VL53L0X_WrByte>
 800cec6:	4603      	mov	r3, r0
 800cec8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 800cecc:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d107      	bne.n	800cee4 <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 800ced4:	222c      	movs	r2, #44	; 0x2c
 800ced6:	214e      	movs	r1, #78	; 0x4e
 800ced8:	68f8      	ldr	r0, [r7, #12]
 800ceda:	f002 ffd9 	bl	800fe90 <VL53L0X_WrByte>
 800cede:	4603      	mov	r3, r0
 800cee0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 800cee4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	d107      	bne.n	800cefc <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800ceec:	2200      	movs	r2, #0
 800ceee:	21ff      	movs	r1, #255	; 0xff
 800cef0:	68f8      	ldr	r0, [r7, #12]
 800cef2:	f002 ffcd 	bl	800fe90 <VL53L0X_WrByte>
 800cef6:	4603      	mov	r3, r0
 800cef8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 800cefc:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d109      	bne.n	800cf18 <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 800cf04:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800cf08:	461a      	mov	r2, r3
 800cf0a:	21b6      	movs	r1, #182	; 0xb6
 800cf0c:	68f8      	ldr	r0, [r7, #12]
 800cf0e:	f002 ffbf 	bl	800fe90 <VL53L0X_WrByte>
 800cf12:	4603      	mov	r3, r0
 800cf14:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 800cf18:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d107      	bne.n	800cf30 <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 800cf20:	2200      	movs	r2, #0
 800cf22:	2180      	movs	r1, #128	; 0x80
 800cf24:	68f8      	ldr	r0, [r7, #12]
 800cf26:	f002 ffb3 	bl	800fe90 <VL53L0X_WrByte>
 800cf2a:	4603      	mov	r3, r0
 800cf2c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 800cf30:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	d10a      	bne.n	800cf4e <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 800cf38:	f107 0210 	add.w	r2, r7, #16
 800cf3c:	f107 0111 	add.w	r1, r7, #17
 800cf40:	2300      	movs	r3, #0
 800cf42:	68f8      	ldr	r0, [r7, #12]
 800cf44:	f000 fbbb 	bl	800d6be <VL53L0X_perform_ref_calibration>
 800cf48:	4603      	mov	r3, r0
 800cf4a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 800cf4e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	d121      	bne.n	800cf9a <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 800cf56:	2300      	movs	r3, #0
 800cf58:	653b      	str	r3, [r7, #80]	; 0x50
		lastSpadIndex = currentSpadIndex;
 800cf5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cf5c:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 800cf5e:	2300      	movs	r3, #0
 800cf60:	64fb      	str	r3, [r7, #76]	; 0x4c
		Status = enable_ref_spads(Dev,
 800cf62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cf64:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 800cf66:	68fb      	ldr	r3, [r7, #12]
 800cf68:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 800cf6c:	68fb      	ldr	r3, [r7, #12]
 800cf6e:	f503 7492 	add.w	r4, r3, #292	; 0x124
		Status = enable_ref_spads(Dev,
 800cf72:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800cf76:	f107 0218 	add.w	r2, r7, #24
 800cf7a:	9204      	str	r2, [sp, #16]
 800cf7c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cf7e:	9203      	str	r2, [sp, #12]
 800cf80:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800cf82:	9202      	str	r2, [sp, #8]
 800cf84:	9301      	str	r3, [sp, #4]
 800cf86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf88:	9300      	str	r3, [sp, #0]
 800cf8a:	4623      	mov	r3, r4
 800cf8c:	4602      	mov	r2, r0
 800cf8e:	68f8      	ldr	r0, [r7, #12]
 800cf90:	f7ff fe5e 	bl	800cc50 <enable_ref_spads>
 800cf94:	4603      	mov	r3, r0
 800cf96:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800cf9a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d174      	bne.n	800d08c <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 800cfa2:	69bb      	ldr	r3, [r7, #24]
 800cfa4:	653b      	str	r3, [r7, #80]	; 0x50

		Status = perform_ref_signal_measurement(Dev,
 800cfa6:	f107 0312 	add.w	r3, r7, #18
 800cfaa:	4619      	mov	r1, r3
 800cfac:	68f8      	ldr	r0, [r7, #12]
 800cfae:	f7ff fecb 	bl	800cd48 <perform_ref_signal_measurement>
 800cfb2:	4603      	mov	r3, r0
 800cfb4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 800cfb8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d161      	bne.n	800d084 <VL53L0X_perform_ref_spad_management+0x268>
			(peakSignalRateRef > targetRefRate)) {
 800cfc0:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 800cfc2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800cfc4:	429a      	cmp	r2, r3
 800cfc6:	d25d      	bcs.n	800d084 <VL53L0X_perform_ref_spad_management+0x268>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs */

			for (index = 0; index < spadArraySize; index++)
 800cfc8:	2300      	movs	r3, #0
 800cfca:	64bb      	str	r3, [r7, #72]	; 0x48
 800cfcc:	e009      	b.n	800cfe2 <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800cfce:	68fa      	ldr	r2, [r7, #12]
 800cfd0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cfd2:	4413      	add	r3, r2
 800cfd4:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800cfd8:	2200      	movs	r2, #0
 800cfda:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 800cfdc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cfde:	3301      	adds	r3, #1
 800cfe0:	64bb      	str	r3, [r7, #72]	; 0x48
 800cfe2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cfe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfe6:	429a      	cmp	r2, r3
 800cfe8:	d3f1      	bcc.n	800cfce <VL53L0X_perform_ref_spad_management+0x1b2>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 800cfea:	e002      	b.n	800cff2 <VL53L0X_perform_ref_spad_management+0x1d6>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 800cfec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cfee:	3301      	adds	r3, #1
 800cff0:	653b      	str	r3, [r7, #80]	; 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 800cff2:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 800cff6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cff8:	4413      	add	r3, r2
 800cffa:	4618      	mov	r0, r3
 800cffc:	f7ff fdb0 	bl	800cb60 <is_aperture>
 800d000:	4603      	mov	r3, r0
 800d002:	2b00      	cmp	r3, #0
 800d004:	d103      	bne.n	800d00e <VL53L0X_perform_ref_spad_management+0x1f2>
				== 0) && (currentSpadIndex < maxSpadCount)) {
 800d006:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d00a:	429a      	cmp	r2, r3
 800d00c:	d3ee      	bcc.n	800cfec <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 800d00e:	2301      	movs	r3, #1
 800d010:	64fb      	str	r3, [r7, #76]	; 0x4c

			Status = enable_ref_spads(Dev,
 800d012:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d014:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 800d016:	68fb      	ldr	r3, [r7, #12]
 800d018:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 800d01c:	68fb      	ldr	r3, [r7, #12]
 800d01e:	f503 7492 	add.w	r4, r3, #292	; 0x124
			Status = enable_ref_spads(Dev,
 800d022:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800d026:	f107 0218 	add.w	r2, r7, #24
 800d02a:	9204      	str	r2, [sp, #16]
 800d02c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d02e:	9203      	str	r2, [sp, #12]
 800d030:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d032:	9202      	str	r2, [sp, #8]
 800d034:	9301      	str	r3, [sp, #4]
 800d036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d038:	9300      	str	r3, [sp, #0]
 800d03a:	4623      	mov	r3, r4
 800d03c:	4602      	mov	r2, r0
 800d03e:	68f8      	ldr	r0, [r7, #12]
 800d040:	f7ff fe06 	bl	800cc50 <enable_ref_spads>
 800d044:	4603      	mov	r3, r0
 800d046:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 800d04a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d11b      	bne.n	800d08a <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 800d052:	69bb      	ldr	r3, [r7, #24]
 800d054:	653b      	str	r3, [r7, #80]	; 0x50
				Status = perform_ref_signal_measurement(Dev,
 800d056:	f107 0312 	add.w	r3, r7, #18
 800d05a:	4619      	mov	r1, r3
 800d05c:	68f8      	ldr	r0, [r7, #12]
 800d05e:	f7ff fe73 	bl	800cd48 <perform_ref_signal_measurement>
 800d062:	4603      	mov	r3, r0
 800d064:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 800d068:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d10c      	bne.n	800d08a <VL53L0X_perform_ref_spad_management+0x26e>
					(peakSignalRateRef > targetRefRate)) {
 800d070:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 800d072:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d074:	429a      	cmp	r2, r3
 800d076:	d208      	bcs.n	800d08a <VL53L0X_perform_ref_spad_management+0x26e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 800d078:	2301      	movs	r3, #1
 800d07a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					refSpadCount_int = minimumSpadCount;
 800d07e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d080:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 800d082:	e002      	b.n	800d08a <VL53L0X_perform_ref_spad_management+0x26e>
				}
			}
		} else {
			needAptSpads = 0;
 800d084:	2300      	movs	r3, #0
 800d086:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d088:	e000      	b.n	800d08c <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 800d08a:	bf00      	nop
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 800d08c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800d090:	2b00      	cmp	r3, #0
 800d092:	f040 80af 	bne.w	800d1f4 <VL53L0X_perform_ref_spad_management+0x3d8>
		(peakSignalRateRef < targetRefRate)) {
 800d096:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 800d098:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d09a:	429a      	cmp	r2, r3
 800d09c:	f240 80aa 	bls.w	800d1f4 <VL53L0X_perform_ref_spad_management+0x3d8>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 800d0a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d0a2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		refSpadCount_int	= minimumSpadCount;
 800d0a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d0a8:	63fb      	str	r3, [r7, #60]	; 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 800d0aa:	68fb      	ldr	r3, [r7, #12]
 800d0ac:	f503 7192 	add.w	r1, r3, #292	; 0x124
 800d0b0:	f107 031c 	add.w	r3, r7, #28
 800d0b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d0b6:	4618      	mov	r0, r3
 800d0b8:	f003 f844 	bl	8010144 <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 800d0bc:	8a7b      	ldrh	r3, [r7, #18]
 800d0be:	461a      	mov	r2, r3
 800d0c0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d0c2:	1ad3      	subs	r3, r2, r3
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	bfb8      	it	lt
 800d0c8:	425b      	neglt	r3, r3
 800d0ca:	647b      	str	r3, [r7, #68]	; 0x44
			targetRefRate);
		complete = 0;
 800d0cc:	2300      	movs	r3, #0
 800d0ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

		while (!complete) {
 800d0d2:	e086      	b.n	800d1e2 <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	f503 7095 	add.w	r0, r3, #298	; 0x12a
			get_next_good_spad(
 800d0da:	f107 0314 	add.w	r3, r7, #20
 800d0de:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d0e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d0e2:	f7ff fcde 	bl	800caa2 <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 800d0e6:	697b      	ldr	r3, [r7, #20]
 800d0e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d0ec:	d103      	bne.n	800d0f6 <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 800d0ee:	23ce      	movs	r3, #206	; 0xce
 800d0f0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 800d0f4:	e07e      	b.n	800d1f4 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 800d0f6:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800d0fa:	697a      	ldr	r2, [r7, #20]
 800d0fc:	4413      	add	r3, r2
 800d0fe:	4618      	mov	r0, r3
 800d100:	f7ff fd2e 	bl	800cb60 <is_aperture>
 800d104:	4603      	mov	r3, r0
 800d106:	461a      	mov	r2, r3
 800d108:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d10a:	4293      	cmp	r3, r2
 800d10c:	d003      	beq.n	800d116 <VL53L0X_perform_ref_spad_management+0x2fa>
					needAptSpads) {
				/* At this point we have enabled the maximum
				 * number of Aperture spads.
				 */
				complete = 1;
 800d10e:	2301      	movs	r3, #1
 800d110:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
				break;
 800d114:	e06e      	b.n	800d1f4 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 800d116:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d118:	3301      	adds	r3, #1
 800d11a:	63fb      	str	r3, [r7, #60]	; 0x3c

			currentSpadIndex = nextGoodSpad;
 800d11c:	697b      	ldr	r3, [r7, #20]
 800d11e:	653b      	str	r3, [r7, #80]	; 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 800d120:	68fb      	ldr	r3, [r7, #12]
 800d122:	f503 7392 	add.w	r3, r3, #292	; 0x124
			Status = enable_spad_bit(
 800d126:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d128:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d12a:	4618      	mov	r0, r3
 800d12c:	f7ff fd32 	bl	800cb94 <enable_spad_bit>
 800d130:	4603      	mov	r3, r0
 800d132:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 800d136:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d10c      	bne.n	800d158 <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 800d13e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d140:	3301      	adds	r3, #1
 800d142:	653b      	str	r3, [r7, #80]	; 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement. */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 800d144:	68fb      	ldr	r3, [r7, #12]
 800d146:	f503 7392 	add.w	r3, r3, #292	; 0x124
				Status = set_ref_spad_map(Dev,
 800d14a:	4619      	mov	r1, r3
 800d14c:	68f8      	ldr	r0, [r7, #12]
 800d14e:	f7ff fd59 	bl	800cc04 <set_ref_spad_map>
 800d152:	4603      	mov	r3, r0
 800d154:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 800d158:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d146      	bne.n	800d1ee <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 800d160:	f107 0312 	add.w	r3, r7, #18
 800d164:	4619      	mov	r1, r3
 800d166:	68f8      	ldr	r0, [r7, #12]
 800d168:	f7ff fdee 	bl	800cd48 <perform_ref_signal_measurement>
 800d16c:	4603      	mov	r3, r0
 800d16e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 800d172:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800d176:	2b00      	cmp	r3, #0
 800d178:	d13b      	bne.n	800d1f2 <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 800d17a:	8a7b      	ldrh	r3, [r7, #18]
 800d17c:	461a      	mov	r2, r3
 800d17e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d180:	1ad3      	subs	r3, r2, r3
 800d182:	2b00      	cmp	r3, #0
 800d184:	bfb8      	it	lt
 800d186:	425b      	neglt	r3, r3
 800d188:	627b      	str	r3, [r7, #36]	; 0x24

			if (peakSignalRateRef > targetRefRate) {
 800d18a:	8a7b      	ldrh	r3, [r7, #18]
 800d18c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d18e:	429a      	cmp	r2, r3
 800d190:	d21c      	bcs.n	800d1cc <VL53L0X_perform_ref_spad_management+0x3b0>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 800d192:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d194:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d196:	429a      	cmp	r2, r3
 800d198:	d914      	bls.n	800d1c4 <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this. */
					Status = set_ref_spad_map(Dev,
 800d19a:	f107 031c 	add.w	r3, r7, #28
 800d19e:	4619      	mov	r1, r3
 800d1a0:	68f8      	ldr	r0, [r7, #12]
 800d1a2:	f7ff fd2f 	bl	800cc04 <set_ref_spad_map>
 800d1a6:	4603      	mov	r3, r0
 800d1a8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 800d1ac:	68fb      	ldr	r3, [r7, #12]
 800d1ae:	f503 7392 	add.w	r3, r3, #292	; 0x124
					memcpy(
 800d1b2:	f107 011c 	add.w	r1, r7, #28
 800d1b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d1b8:	4618      	mov	r0, r3
 800d1ba:	f002 ffc3 	bl	8010144 <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 800d1be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d1c0:	3b01      	subs	r3, #1
 800d1c2:	63fb      	str	r3, [r7, #60]	; 0x3c
				}
				complete = 1;
 800d1c4:	2301      	movs	r3, #1
 800d1c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d1ca:	e00a      	b.n	800d1e2 <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 800d1cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1ce:	647b      	str	r3, [r7, #68]	; 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 800d1d0:	68fb      	ldr	r3, [r7, #12]
 800d1d2:	f503 7192 	add.w	r1, r3, #292	; 0x124
				memcpy(lastSpadArray,
 800d1d6:	f107 031c 	add.w	r3, r7, #28
 800d1da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d1dc:	4618      	mov	r0, r3
 800d1de:	f002 ffb1 	bl	8010144 <memcpy>
		while (!complete) {
 800d1e2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	f43f af74 	beq.w	800d0d4 <VL53L0X_perform_ref_spad_management+0x2b8>
 800d1ec:	e002      	b.n	800d1f4 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 800d1ee:	bf00      	nop
 800d1f0:	e000      	b.n	800d1f4 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 800d1f2:	bf00      	nop
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800d1f4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d115      	bne.n	800d228 <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 800d1fc:	68bb      	ldr	r3, [r7, #8]
 800d1fe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d200:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 800d208:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 800d20a:	68fb      	ldr	r3, [r7, #12]
 800d20c:	2201      	movs	r2, #1
 800d20e:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800d212:	68bb      	ldr	r3, [r7, #8]
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	b2da      	uxtb	r2, r3
 800d218:	68fb      	ldr	r3, [r7, #12]
 800d21a:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	781a      	ldrb	r2, [r3, #0]
 800d222:	68fb      	ldr	r3, [r7, #12]
 800d224:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 800d228:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 800d22c:	4618      	mov	r0, r3
 800d22e:	375c      	adds	r7, #92	; 0x5c
 800d230:	46bd      	mov	sp, r7
 800d232:	bd90      	pop	{r4, r7, pc}

0800d234 <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 800d234:	b590      	push	{r4, r7, lr}
 800d236:	b093      	sub	sp, #76	; 0x4c
 800d238:	af06      	add	r7, sp, #24
 800d23a:	60f8      	str	r0, [r7, #12]
 800d23c:	60b9      	str	r1, [r7, #8]
 800d23e:	4613      	mov	r3, r2
 800d240:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d242:	2300      	movs	r3, #0
 800d244:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t currentSpadIndex = 0;
 800d248:	2300      	movs	r3, #0
 800d24a:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t startSelect = 0xB4;
 800d24c:	23b4      	movs	r3, #180	; 0xb4
 800d24e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t spadArraySize = 6;
 800d252:	2306      	movs	r3, #6
 800d254:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 800d256:	232c      	movs	r3, #44	; 0x2c
 800d258:	61bb      	str	r3, [r7, #24]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800d25a:	2201      	movs	r2, #1
 800d25c:	21ff      	movs	r1, #255	; 0xff
 800d25e:	68f8      	ldr	r0, [r7, #12]
 800d260:	f002 fe16 	bl	800fe90 <VL53L0X_WrByte>
 800d264:	4603      	mov	r3, r0
 800d266:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 800d26a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d107      	bne.n	800d282 <VL53L0X_set_reference_spads+0x4e>
		Status = VL53L0X_WrByte(Dev,
 800d272:	2200      	movs	r2, #0
 800d274:	214f      	movs	r1, #79	; 0x4f
 800d276:	68f8      	ldr	r0, [r7, #12]
 800d278:	f002 fe0a 	bl	800fe90 <VL53L0X_WrByte>
 800d27c:	4603      	mov	r3, r0
 800d27e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 800d282:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800d286:	2b00      	cmp	r3, #0
 800d288:	d107      	bne.n	800d29a <VL53L0X_set_reference_spads+0x66>
		Status = VL53L0X_WrByte(Dev,
 800d28a:	222c      	movs	r2, #44	; 0x2c
 800d28c:	214e      	movs	r1, #78	; 0x4e
 800d28e:	68f8      	ldr	r0, [r7, #12]
 800d290:	f002 fdfe 	bl	800fe90 <VL53L0X_WrByte>
 800d294:	4603      	mov	r3, r0
 800d296:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 800d29a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	d107      	bne.n	800d2b2 <VL53L0X_set_reference_spads+0x7e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800d2a2:	2200      	movs	r2, #0
 800d2a4:	21ff      	movs	r1, #255	; 0xff
 800d2a6:	68f8      	ldr	r0, [r7, #12]
 800d2a8:	f002 fdf2 	bl	800fe90 <VL53L0X_WrByte>
 800d2ac:	4603      	mov	r3, r0
 800d2ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 800d2b2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	d109      	bne.n	800d2ce <VL53L0X_set_reference_spads+0x9a>
		Status = VL53L0X_WrByte(Dev,
 800d2ba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d2be:	461a      	mov	r2, r3
 800d2c0:	21b6      	movs	r1, #182	; 0xb6
 800d2c2:	68f8      	ldr	r0, [r7, #12]
 800d2c4:	f002 fde4 	bl	800fe90 <VL53L0X_WrByte>
 800d2c8:	4603      	mov	r3, r0
 800d2ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
 800d2ce:	2300      	movs	r3, #0
 800d2d0:	627b      	str	r3, [r7, #36]	; 0x24
 800d2d2:	e009      	b.n	800d2e8 <VL53L0X_set_reference_spads+0xb4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800d2d4:	68fa      	ldr	r2, [r7, #12]
 800d2d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2d8:	4413      	add	r3, r2
 800d2da:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800d2de:	2200      	movs	r2, #0
 800d2e0:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 800d2e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2e4:	3301      	adds	r3, #1
 800d2e6:	627b      	str	r3, [r7, #36]	; 0x24
 800d2e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d2ea:	69fb      	ldr	r3, [r7, #28]
 800d2ec:	429a      	cmp	r2, r3
 800d2ee:	d3f1      	bcc.n	800d2d4 <VL53L0X_set_reference_spads+0xa0>

	if (isApertureSpads) {
 800d2f0:	79fb      	ldrb	r3, [r7, #7]
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	d011      	beq.n	800d31a <VL53L0X_set_reference_spads+0xe6>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 800d2f6:	e002      	b.n	800d2fe <VL53L0X_set_reference_spads+0xca>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 800d2f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2fa:	3301      	adds	r3, #1
 800d2fc:	62bb      	str	r3, [r7, #40]	; 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 800d2fe:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800d302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d304:	4413      	add	r3, r2
 800d306:	4618      	mov	r0, r3
 800d308:	f7ff fc2a 	bl	800cb60 <is_aperture>
 800d30c:	4603      	mov	r3, r0
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d103      	bne.n	800d31a <VL53L0X_set_reference_spads+0xe6>
 800d312:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d314:	69bb      	ldr	r3, [r7, #24]
 800d316:	429a      	cmp	r2, r3
 800d318:	d3ee      	bcc.n	800d2f8 <VL53L0X_set_reference_spads+0xc4>
		}
	}
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 800d31a:	68fb      	ldr	r3, [r7, #12]
 800d31c:	f503 7095 	add.w	r0, r3, #298	; 0x12a
				Dev->Data.SpadData.RefSpadEnables,
 800d320:	68fb      	ldr	r3, [r7, #12]
 800d322:	f503 7492 	add.w	r4, r3, #292	; 0x124
	Status = enable_ref_spads(Dev,
 800d326:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d32a:	79f9      	ldrb	r1, [r7, #7]
 800d32c:	f107 0214 	add.w	r2, r7, #20
 800d330:	9204      	str	r2, [sp, #16]
 800d332:	68ba      	ldr	r2, [r7, #8]
 800d334:	9203      	str	r2, [sp, #12]
 800d336:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d338:	9202      	str	r2, [sp, #8]
 800d33a:	9301      	str	r3, [sp, #4]
 800d33c:	69fb      	ldr	r3, [r7, #28]
 800d33e:	9300      	str	r3, [sp, #0]
 800d340:	4623      	mov	r3, r4
 800d342:	4602      	mov	r2, r0
 800d344:	68f8      	ldr	r0, [r7, #12]
 800d346:	f7ff fc83 	bl	800cc50 <enable_ref_spads>
 800d34a:	4603      	mov	r3, r0
 800d34c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 800d350:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800d354:	2b00      	cmp	r3, #0
 800d356:	d10c      	bne.n	800d372 <VL53L0X_set_reference_spads+0x13e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 800d358:	68fb      	ldr	r3, [r7, #12]
 800d35a:	2201      	movs	r2, #1
 800d35c:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800d360:	68bb      	ldr	r3, [r7, #8]
 800d362:	b2da      	uxtb	r2, r3
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800d36a:	68fb      	ldr	r3, [r7, #12]
 800d36c:	79fa      	ldrb	r2, [r7, #7]
 800d36e:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
 800d372:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800d376:	4618      	mov	r0, r3
 800d378:	3734      	adds	r7, #52	; 0x34
 800d37a:	46bd      	mov	sp, r7
 800d37c:	bd90      	pop	{r4, r7, pc}

0800d37e <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 800d37e:	b580      	push	{r7, lr}
 800d380:	b084      	sub	sp, #16
 800d382:	af00      	add	r7, sp, #0
 800d384:	6078      	str	r0, [r7, #4]
 800d386:	460b      	mov	r3, r1
 800d388:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d38a:	2300      	movs	r3, #0
 800d38c:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800d38e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d392:	2b00      	cmp	r3, #0
 800d394:	d10a      	bne.n	800d3ac <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 800d396:	78fb      	ldrb	r3, [r7, #3]
 800d398:	f043 0301 	orr.w	r3, r3, #1
 800d39c:	b2db      	uxtb	r3, r3
 800d39e:	461a      	mov	r2, r3
 800d3a0:	2100      	movs	r1, #0
 800d3a2:	6878      	ldr	r0, [r7, #4]
 800d3a4:	f002 fd74 	bl	800fe90 <VL53L0X_WrByte>
 800d3a8:	4603      	mov	r3, r0
 800d3aa:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 800d3ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d104      	bne.n	800d3be <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 800d3b4:	6878      	ldr	r0, [r7, #4]
 800d3b6:	f000 f9e2 	bl	800d77e <VL53L0X_measurement_poll_for_completion>
 800d3ba:	4603      	mov	r3, r0
 800d3bc:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800d3be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	d105      	bne.n	800d3d2 <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800d3c6:	2100      	movs	r1, #0
 800d3c8:	6878      	ldr	r0, [r7, #4]
 800d3ca:	f7ff fa6d 	bl	800c8a8 <VL53L0X_ClearInterruptMask>
 800d3ce:	4603      	mov	r3, r0
 800d3d0:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800d3d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d106      	bne.n	800d3e8 <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 800d3da:	2200      	movs	r2, #0
 800d3dc:	2100      	movs	r1, #0
 800d3de:	6878      	ldr	r0, [r7, #4]
 800d3e0:	f002 fd56 	bl	800fe90 <VL53L0X_WrByte>
 800d3e4:	4603      	mov	r3, r0
 800d3e6:	73fb      	strb	r3, [r7, #15]

	return Status;
 800d3e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d3ec:	4618      	mov	r0, r3
 800d3ee:	3710      	adds	r7, #16
 800d3f0:	46bd      	mov	sp, r7
 800d3f2:	bd80      	pop	{r7, pc}

0800d3f4 <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 800d3f4:	b580      	push	{r7, lr}
 800d3f6:	b084      	sub	sp, #16
 800d3f8:	af00      	add	r7, sp, #0
 800d3fa:	6078      	str	r0, [r7, #4]
 800d3fc:	4608      	mov	r0, r1
 800d3fe:	4611      	mov	r1, r2
 800d400:	461a      	mov	r2, r3
 800d402:	4603      	mov	r3, r0
 800d404:	70fb      	strb	r3, [r7, #3]
 800d406:	460b      	mov	r3, r1
 800d408:	70bb      	strb	r3, [r7, #2]
 800d40a:	4613      	mov	r3, r2
 800d40c:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d40e:	2300      	movs	r3, #0
 800d410:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 800d412:	2300      	movs	r3, #0
 800d414:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800d416:	2201      	movs	r2, #1
 800d418:	21ff      	movs	r1, #255	; 0xff
 800d41a:	6878      	ldr	r0, [r7, #4]
 800d41c:	f002 fd38 	bl	800fe90 <VL53L0X_WrByte>
 800d420:	4603      	mov	r3, r0
 800d422:	461a      	mov	r2, r3
 800d424:	7bfb      	ldrb	r3, [r7, #15]
 800d426:	4313      	orrs	r3, r2
 800d428:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800d42a:	2200      	movs	r2, #0
 800d42c:	2100      	movs	r1, #0
 800d42e:	6878      	ldr	r0, [r7, #4]
 800d430:	f002 fd2e 	bl	800fe90 <VL53L0X_WrByte>
 800d434:	4603      	mov	r3, r0
 800d436:	461a      	mov	r2, r3
 800d438:	7bfb      	ldrb	r3, [r7, #15]
 800d43a:	4313      	orrs	r3, r2
 800d43c:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800d43e:	2200      	movs	r2, #0
 800d440:	21ff      	movs	r1, #255	; 0xff
 800d442:	6878      	ldr	r0, [r7, #4]
 800d444:	f002 fd24 	bl	800fe90 <VL53L0X_WrByte>
 800d448:	4603      	mov	r3, r0
 800d44a:	461a      	mov	r2, r3
 800d44c:	7bfb      	ldrb	r3, [r7, #15]
 800d44e:	4313      	orrs	r3, r2
 800d450:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 800d452:	78fb      	ldrb	r3, [r7, #3]
 800d454:	2b00      	cmp	r3, #0
 800d456:	d01e      	beq.n	800d496 <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 800d458:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	d009      	beq.n	800d474 <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 800d460:	69ba      	ldr	r2, [r7, #24]
 800d462:	21cb      	movs	r1, #203	; 0xcb
 800d464:	6878      	ldr	r0, [r7, #4]
 800d466:	f002 fd95 	bl	800ff94 <VL53L0X_RdByte>
 800d46a:	4603      	mov	r3, r0
 800d46c:	461a      	mov	r2, r3
 800d46e:	7bfb      	ldrb	r3, [r7, #15]
 800d470:	4313      	orrs	r3, r2
 800d472:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 800d474:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d02a      	beq.n	800d4d2 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 800d47c:	f107 030e 	add.w	r3, r7, #14
 800d480:	461a      	mov	r2, r3
 800d482:	21ee      	movs	r1, #238	; 0xee
 800d484:	6878      	ldr	r0, [r7, #4]
 800d486:	f002 fd85 	bl	800ff94 <VL53L0X_RdByte>
 800d48a:	4603      	mov	r3, r0
 800d48c:	461a      	mov	r2, r3
 800d48e:	7bfb      	ldrb	r3, [r7, #15]
 800d490:	4313      	orrs	r3, r2
 800d492:	73fb      	strb	r3, [r7, #15]
 800d494:	e01d      	b.n	800d4d2 <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 800d496:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d00a      	beq.n	800d4b4 <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 800d49e:	78bb      	ldrb	r3, [r7, #2]
 800d4a0:	461a      	mov	r2, r3
 800d4a2:	21cb      	movs	r1, #203	; 0xcb
 800d4a4:	6878      	ldr	r0, [r7, #4]
 800d4a6:	f002 fcf3 	bl	800fe90 <VL53L0X_WrByte>
 800d4aa:	4603      	mov	r3, r0
 800d4ac:	461a      	mov	r2, r3
 800d4ae:	7bfb      	ldrb	r3, [r7, #15]
 800d4b0:	4313      	orrs	r3, r2
 800d4b2:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 800d4b4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	d00a      	beq.n	800d4d2 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 800d4bc:	787b      	ldrb	r3, [r7, #1]
 800d4be:	2280      	movs	r2, #128	; 0x80
 800d4c0:	21ee      	movs	r1, #238	; 0xee
 800d4c2:	6878      	ldr	r0, [r7, #4]
 800d4c4:	f002 fd32 	bl	800ff2c <VL53L0X_UpdateByte>
 800d4c8:	4603      	mov	r3, r0
 800d4ca:	461a      	mov	r2, r3
 800d4cc:	7bfb      	ldrb	r3, [r7, #15]
 800d4ce:	4313      	orrs	r3, r2
 800d4d0:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800d4d2:	2201      	movs	r2, #1
 800d4d4:	21ff      	movs	r1, #255	; 0xff
 800d4d6:	6878      	ldr	r0, [r7, #4]
 800d4d8:	f002 fcda 	bl	800fe90 <VL53L0X_WrByte>
 800d4dc:	4603      	mov	r3, r0
 800d4de:	461a      	mov	r2, r3
 800d4e0:	7bfb      	ldrb	r3, [r7, #15]
 800d4e2:	4313      	orrs	r3, r2
 800d4e4:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800d4e6:	2201      	movs	r2, #1
 800d4e8:	2100      	movs	r1, #0
 800d4ea:	6878      	ldr	r0, [r7, #4]
 800d4ec:	f002 fcd0 	bl	800fe90 <VL53L0X_WrByte>
 800d4f0:	4603      	mov	r3, r0
 800d4f2:	461a      	mov	r2, r3
 800d4f4:	7bfb      	ldrb	r3, [r7, #15]
 800d4f6:	4313      	orrs	r3, r2
 800d4f8:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800d4fa:	2200      	movs	r2, #0
 800d4fc:	21ff      	movs	r1, #255	; 0xff
 800d4fe:	6878      	ldr	r0, [r7, #4]
 800d500:	f002 fcc6 	bl	800fe90 <VL53L0X_WrByte>
 800d504:	4603      	mov	r3, r0
 800d506:	461a      	mov	r2, r3
 800d508:	7bfb      	ldrb	r3, [r7, #15]
 800d50a:	4313      	orrs	r3, r2
 800d50c:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 800d50e:	7bbb      	ldrb	r3, [r7, #14]
 800d510:	f023 0310 	bic.w	r3, r3, #16
 800d514:	b2da      	uxtb	r2, r3
 800d516:	69fb      	ldr	r3, [r7, #28]
 800d518:	701a      	strb	r2, [r3, #0]

	return Status;
 800d51a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d51e:	4618      	mov	r0, r3
 800d520:	3710      	adds	r7, #16
 800d522:	46bd      	mov	sp, r7
 800d524:	bd80      	pop	{r7, pc}

0800d526 <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 800d526:	b580      	push	{r7, lr}
 800d528:	b08a      	sub	sp, #40	; 0x28
 800d52a:	af04      	add	r7, sp, #16
 800d52c:	60f8      	str	r0, [r7, #12]
 800d52e:	60b9      	str	r1, [r7, #8]
 800d530:	4611      	mov	r1, r2
 800d532:	461a      	mov	r2, r3
 800d534:	460b      	mov	r3, r1
 800d536:	71fb      	strb	r3, [r7, #7]
 800d538:	4613      	mov	r3, r2
 800d53a:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d53c:	2300      	movs	r3, #0
 800d53e:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800d540:	2300      	movs	r3, #0
 800d542:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 800d544:	2300      	movs	r3, #0
 800d546:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 800d548:	2300      	movs	r3, #0
 800d54a:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 800d54c:	2300      	movs	r3, #0
 800d54e:	74fb      	strb	r3, [r7, #19]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 800d550:	79bb      	ldrb	r3, [r7, #6]
 800d552:	2b00      	cmp	r3, #0
 800d554:	d003      	beq.n	800d55e <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800d556:	68fb      	ldr	r3, [r7, #12]
 800d558:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800d55c:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 800d55e:	2201      	movs	r2, #1
 800d560:	2101      	movs	r1, #1
 800d562:	68f8      	ldr	r0, [r7, #12]
 800d564:	f002 fc94 	bl	800fe90 <VL53L0X_WrByte>
 800d568:	4603      	mov	r3, r0
 800d56a:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 800d56c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d570:	2b00      	cmp	r3, #0
 800d572:	d105      	bne.n	800d580 <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 800d574:	2140      	movs	r1, #64	; 0x40
 800d576:	68f8      	ldr	r0, [r7, #12]
 800d578:	f7ff ff01 	bl	800d37e <VL53L0X_perform_single_ref_calibration>
 800d57c:	4603      	mov	r3, r0
 800d57e:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 800d580:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d584:	2b00      	cmp	r3, #0
 800d586:	d115      	bne.n	800d5b4 <VL53L0X_perform_vhv_calibration+0x8e>
 800d588:	79fb      	ldrb	r3, [r7, #7]
 800d58a:	2b01      	cmp	r3, #1
 800d58c:	d112      	bne.n	800d5b4 <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 800d58e:	7d39      	ldrb	r1, [r7, #20]
 800d590:	7d7a      	ldrb	r2, [r7, #21]
 800d592:	2300      	movs	r3, #0
 800d594:	9303      	str	r3, [sp, #12]
 800d596:	2301      	movs	r3, #1
 800d598:	9302      	str	r3, [sp, #8]
 800d59a:	f107 0313 	add.w	r3, r7, #19
 800d59e:	9301      	str	r3, [sp, #4]
 800d5a0:	68bb      	ldr	r3, [r7, #8]
 800d5a2:	9300      	str	r3, [sp, #0]
 800d5a4:	460b      	mov	r3, r1
 800d5a6:	2101      	movs	r1, #1
 800d5a8:	68f8      	ldr	r0, [r7, #12]
 800d5aa:	f7ff ff23 	bl	800d3f4 <VL53L0X_ref_calibration_io>
 800d5ae:	4603      	mov	r3, r0
 800d5b0:	75fb      	strb	r3, [r7, #23]
 800d5b2:	e002      	b.n	800d5ba <VL53L0X_perform_vhv_calibration+0x94>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 800d5b4:	68bb      	ldr	r3, [r7, #8]
 800d5b6:	2200      	movs	r2, #0
 800d5b8:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 800d5ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d112      	bne.n	800d5e8 <VL53L0X_perform_vhv_calibration+0xc2>
 800d5c2:	79bb      	ldrb	r3, [r7, #6]
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	d00f      	beq.n	800d5e8 <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800d5c8:	7dbb      	ldrb	r3, [r7, #22]
 800d5ca:	461a      	mov	r2, r3
 800d5cc:	2101      	movs	r1, #1
 800d5ce:	68f8      	ldr	r0, [r7, #12]
 800d5d0:	f002 fc5e 	bl	800fe90 <VL53L0X_WrByte>
 800d5d4:	4603      	mov	r3, r0
 800d5d6:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800d5d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	d103      	bne.n	800d5e8 <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800d5e0:	68fb      	ldr	r3, [r7, #12]
 800d5e2:	7dba      	ldrb	r2, [r7, #22]
 800d5e4:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 800d5e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d5ec:	4618      	mov	r0, r3
 800d5ee:	3718      	adds	r7, #24
 800d5f0:	46bd      	mov	sp, r7
 800d5f2:	bd80      	pop	{r7, pc}

0800d5f4 <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 800d5f4:	b580      	push	{r7, lr}
 800d5f6:	b08a      	sub	sp, #40	; 0x28
 800d5f8:	af04      	add	r7, sp, #16
 800d5fa:	60f8      	str	r0, [r7, #12]
 800d5fc:	60b9      	str	r1, [r7, #8]
 800d5fe:	4611      	mov	r1, r2
 800d600:	461a      	mov	r2, r3
 800d602:	460b      	mov	r3, r1
 800d604:	71fb      	strb	r3, [r7, #7]
 800d606:	4613      	mov	r3, r2
 800d608:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d60a:	2300      	movs	r3, #0
 800d60c:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800d60e:	2300      	movs	r3, #0
 800d610:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 800d612:	2300      	movs	r3, #0
 800d614:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 800d616:	2300      	movs	r3, #0
 800d618:	753b      	strb	r3, [r7, #20]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 800d61a:	79bb      	ldrb	r3, [r7, #6]
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d003      	beq.n	800d628 <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800d620:	68fb      	ldr	r3, [r7, #12]
 800d622:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800d626:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 800d628:	2202      	movs	r2, #2
 800d62a:	2101      	movs	r1, #1
 800d62c:	68f8      	ldr	r0, [r7, #12]
 800d62e:	f002 fc2f 	bl	800fe90 <VL53L0X_WrByte>
 800d632:	4603      	mov	r3, r0
 800d634:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 800d636:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d105      	bne.n	800d64a <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 800d63e:	2100      	movs	r1, #0
 800d640:	68f8      	ldr	r0, [r7, #12]
 800d642:	f7ff fe9c 	bl	800d37e <VL53L0X_perform_single_ref_calibration>
 800d646:	4603      	mov	r3, r0
 800d648:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 800d64a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d115      	bne.n	800d67e <VL53L0X_perform_phase_calibration+0x8a>
 800d652:	79fb      	ldrb	r3, [r7, #7]
 800d654:	2b01      	cmp	r3, #1
 800d656:	d112      	bne.n	800d67e <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 800d658:	7d39      	ldrb	r1, [r7, #20]
 800d65a:	7d7a      	ldrb	r2, [r7, #21]
 800d65c:	2301      	movs	r3, #1
 800d65e:	9303      	str	r3, [sp, #12]
 800d660:	2300      	movs	r3, #0
 800d662:	9302      	str	r3, [sp, #8]
 800d664:	68bb      	ldr	r3, [r7, #8]
 800d666:	9301      	str	r3, [sp, #4]
 800d668:	f107 0313 	add.w	r3, r7, #19
 800d66c:	9300      	str	r3, [sp, #0]
 800d66e:	460b      	mov	r3, r1
 800d670:	2101      	movs	r1, #1
 800d672:	68f8      	ldr	r0, [r7, #12]
 800d674:	f7ff febe 	bl	800d3f4 <VL53L0X_ref_calibration_io>
 800d678:	4603      	mov	r3, r0
 800d67a:	75fb      	strb	r3, [r7, #23]
 800d67c:	e002      	b.n	800d684 <VL53L0X_perform_phase_calibration+0x90>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 800d67e:	68bb      	ldr	r3, [r7, #8]
 800d680:	2200      	movs	r2, #0
 800d682:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 800d684:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d112      	bne.n	800d6b2 <VL53L0X_perform_phase_calibration+0xbe>
 800d68c:	79bb      	ldrb	r3, [r7, #6]
 800d68e:	2b00      	cmp	r3, #0
 800d690:	d00f      	beq.n	800d6b2 <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800d692:	7dbb      	ldrb	r3, [r7, #22]
 800d694:	461a      	mov	r2, r3
 800d696:	2101      	movs	r1, #1
 800d698:	68f8      	ldr	r0, [r7, #12]
 800d69a:	f002 fbf9 	bl	800fe90 <VL53L0X_WrByte>
 800d69e:	4603      	mov	r3, r0
 800d6a0:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800d6a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d103      	bne.n	800d6b2 <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800d6aa:	68fb      	ldr	r3, [r7, #12]
 800d6ac:	7dba      	ldrb	r2, [r7, #22]
 800d6ae:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 800d6b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d6b6:	4618      	mov	r0, r3
 800d6b8:	3718      	adds	r7, #24
 800d6ba:	46bd      	mov	sp, r7
 800d6bc:	bd80      	pop	{r7, pc}

0800d6be <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 800d6be:	b580      	push	{r7, lr}
 800d6c0:	b086      	sub	sp, #24
 800d6c2:	af00      	add	r7, sp, #0
 800d6c4:	60f8      	str	r0, [r7, #12]
 800d6c6:	60b9      	str	r1, [r7, #8]
 800d6c8:	607a      	str	r2, [r7, #4]
 800d6ca:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d6cc:	2300      	movs	r3, #0
 800d6ce:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800d6d0:	2300      	movs	r3, #0
 800d6d2:	75bb      	strb	r3, [r7, #22]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800d6d4:	68fb      	ldr	r3, [r7, #12]
 800d6d6:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800d6da:	75bb      	strb	r3, [r7, #22]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 800d6dc:	78fa      	ldrb	r2, [r7, #3]
 800d6de:	2300      	movs	r3, #0
 800d6e0:	68b9      	ldr	r1, [r7, #8]
 800d6e2:	68f8      	ldr	r0, [r7, #12]
 800d6e4:	f7ff ff1f 	bl	800d526 <VL53L0X_perform_vhv_calibration>
 800d6e8:	4603      	mov	r3, r0
 800d6ea:	75fb      	strb	r3, [r7, #23]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 800d6ec:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	d107      	bne.n	800d704 <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 800d6f4:	78fa      	ldrb	r2, [r7, #3]
 800d6f6:	2300      	movs	r3, #0
 800d6f8:	6879      	ldr	r1, [r7, #4]
 800d6fa:	68f8      	ldr	r0, [r7, #12]
 800d6fc:	f7ff ff7a 	bl	800d5f4 <VL53L0X_perform_phase_calibration>
 800d700:	4603      	mov	r3, r0
 800d702:	75fb      	strb	r3, [r7, #23]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 800d704:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d10f      	bne.n	800d72c <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800d70c:	7dbb      	ldrb	r3, [r7, #22]
 800d70e:	461a      	mov	r2, r3
 800d710:	2101      	movs	r1, #1
 800d712:	68f8      	ldr	r0, [r7, #12]
 800d714:	f002 fbbc 	bl	800fe90 <VL53L0X_WrByte>
 800d718:	4603      	mov	r3, r0
 800d71a:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800d71c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d720:	2b00      	cmp	r3, #0
 800d722:	d103      	bne.n	800d72c <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800d724:	68fb      	ldr	r3, [r7, #12]
 800d726:	7dba      	ldrb	r2, [r7, #22]
 800d728:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 800d72c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d730:	4618      	mov	r0, r3
 800d732:	3718      	adds	r7, #24
 800d734:	46bd      	mov	sp, r7
 800d736:	bd80      	pop	{r7, pc}

0800d738 <VL53L0X_set_ref_calibration>:

VL53L0X_Error VL53L0X_set_ref_calibration(VL53L0X_DEV Dev,
		uint8_t VhvSettings, uint8_t PhaseCal)
{
 800d738:	b580      	push	{r7, lr}
 800d73a:	b088      	sub	sp, #32
 800d73c:	af04      	add	r7, sp, #16
 800d73e:	6078      	str	r0, [r7, #4]
 800d740:	460b      	mov	r3, r1
 800d742:	70fb      	strb	r3, [r7, #3]
 800d744:	4613      	mov	r3, r2
 800d746:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d748:	2300      	movs	r3, #0
 800d74a:	73fb      	strb	r3, [r7, #15]
	uint8_t pVhvSettings;
	uint8_t pPhaseCal;

	Status = VL53L0X_ref_calibration_io(Dev, 0,
 800d74c:	78b9      	ldrb	r1, [r7, #2]
 800d74e:	78fa      	ldrb	r2, [r7, #3]
 800d750:	2301      	movs	r3, #1
 800d752:	9303      	str	r3, [sp, #12]
 800d754:	2301      	movs	r3, #1
 800d756:	9302      	str	r3, [sp, #8]
 800d758:	f107 030d 	add.w	r3, r7, #13
 800d75c:	9301      	str	r3, [sp, #4]
 800d75e:	f107 030e 	add.w	r3, r7, #14
 800d762:	9300      	str	r3, [sp, #0]
 800d764:	460b      	mov	r3, r1
 800d766:	2100      	movs	r1, #0
 800d768:	6878      	ldr	r0, [r7, #4]
 800d76a:	f7ff fe43 	bl	800d3f4 <VL53L0X_ref_calibration_io>
 800d76e:	4603      	mov	r3, r0
 800d770:	73fb      	strb	r3, [r7, #15]
		VhvSettings, PhaseCal,
		&pVhvSettings, &pPhaseCal,
		1, 1);

	return Status;
 800d772:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d776:	4618      	mov	r0, r3
 800d778:	3710      	adds	r7, #16
 800d77a:	46bd      	mov	sp, r7
 800d77c:	bd80      	pop	{r7, pc}

0800d77e <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 800d77e:	b580      	push	{r7, lr}
 800d780:	b086      	sub	sp, #24
 800d782:	af00      	add	r7, sp, #0
 800d784:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d786:	2300      	movs	r3, #0
 800d788:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 800d78a:	2300      	movs	r3, #0
 800d78c:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	LoopNb = 0;
 800d78e:	2300      	movs	r3, #0
 800d790:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 800d792:	f107 030f 	add.w	r3, r7, #15
 800d796:	4619      	mov	r1, r3
 800d798:	6878      	ldr	r0, [r7, #4]
 800d79a:	f7fe fd97 	bl	800c2cc <VL53L0X_GetMeasurementDataReady>
 800d79e:	4603      	mov	r3, r0
 800d7a0:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 800d7a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	d110      	bne.n	800d7cc <VL53L0X_measurement_poll_for_completion+0x4e>
			break; /* the error is set */

		if (NewDataReady == 1)
 800d7aa:	7bfb      	ldrb	r3, [r7, #15]
 800d7ac:	2b01      	cmp	r3, #1
 800d7ae:	d00f      	beq.n	800d7d0 <VL53L0X_measurement_poll_for_completion+0x52>
			break; /* done note that status == 0 */

		LoopNb++;
 800d7b0:	693b      	ldr	r3, [r7, #16]
 800d7b2:	3301      	adds	r3, #1
 800d7b4:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 800d7b6:	693b      	ldr	r3, [r7, #16]
 800d7b8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800d7bc:	d302      	bcc.n	800d7c4 <VL53L0X_measurement_poll_for_completion+0x46>
			Status = VL53L0X_ERROR_TIME_OUT;
 800d7be:	23f9      	movs	r3, #249	; 0xf9
 800d7c0:	75fb      	strb	r3, [r7, #23]
			break;
 800d7c2:	e006      	b.n	800d7d2 <VL53L0X_measurement_poll_for_completion+0x54>
		}

		VL53L0X_PollingDelay(Dev);
 800d7c4:	6878      	ldr	r0, [r7, #4]
 800d7c6:	f002 fc83 	bl	80100d0 <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 800d7ca:	e7e2      	b.n	800d792 <VL53L0X_measurement_poll_for_completion+0x14>
			break; /* the error is set */
 800d7cc:	bf00      	nop
 800d7ce:	e000      	b.n	800d7d2 <VL53L0X_measurement_poll_for_completion+0x54>
			break; /* done note that status == 0 */
 800d7d0:	bf00      	nop
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
 800d7d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d7d6:	4618      	mov	r0, r3
 800d7d8:	3718      	adds	r7, #24
 800d7da:	46bd      	mov	sp, r7
 800d7dc:	bd80      	pop	{r7, pc}

0800d7de <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 800d7de:	b480      	push	{r7}
 800d7e0:	b085      	sub	sp, #20
 800d7e2:	af00      	add	r7, sp, #0
 800d7e4:	4603      	mov	r3, r0
 800d7e6:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 800d7e8:	2300      	movs	r3, #0
 800d7ea:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 800d7ec:	79fb      	ldrb	r3, [r7, #7]
 800d7ee:	3301      	adds	r3, #1
 800d7f0:	b2db      	uxtb	r3, r3
 800d7f2:	005b      	lsls	r3, r3, #1
 800d7f4:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 800d7f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800d7f8:	4618      	mov	r0, r3
 800d7fa:	3714      	adds	r7, #20
 800d7fc:	46bd      	mov	sp, r7
 800d7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d802:	4770      	bx	lr

0800d804 <VL53L0X_encode_vcsel_period>:

uint8_t VL53L0X_encode_vcsel_period(uint8_t vcsel_period_pclks)
{
 800d804:	b480      	push	{r7}
 800d806:	b085      	sub	sp, #20
 800d808:	af00      	add	r7, sp, #0
 800d80a:	4603      	mov	r3, r0
 800d80c:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real period
	 * in PLL clocks
	 */

	uint8_t vcsel_period_reg = 0;
 800d80e:	2300      	movs	r3, #0
 800d810:	73fb      	strb	r3, [r7, #15]

	vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;
 800d812:	79fb      	ldrb	r3, [r7, #7]
 800d814:	085b      	lsrs	r3, r3, #1
 800d816:	b2db      	uxtb	r3, r3
 800d818:	3b01      	subs	r3, #1
 800d81a:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_reg;
 800d81c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d81e:	4618      	mov	r0, r3
 800d820:	3714      	adds	r7, #20
 800d822:	46bd      	mov	sp, r7
 800d824:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d828:	4770      	bx	lr

0800d82a <VL53L0X_isqrt>:


uint32_t VL53L0X_isqrt(uint32_t num)
{
 800d82a:	b480      	push	{r7}
 800d82c:	b085      	sub	sp, #20
 800d82e:	af00      	add	r7, sp, #0
 800d830:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 800d832:	2300      	movs	r3, #0
 800d834:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 800d836:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d83a:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 800d83c:	e002      	b.n	800d844 <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 800d83e:	68bb      	ldr	r3, [r7, #8]
 800d840:	089b      	lsrs	r3, r3, #2
 800d842:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 800d844:	68ba      	ldr	r2, [r7, #8]
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	429a      	cmp	r2, r3
 800d84a:	d8f8      	bhi.n	800d83e <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 800d84c:	e017      	b.n	800d87e <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 800d84e:	68fa      	ldr	r2, [r7, #12]
 800d850:	68bb      	ldr	r3, [r7, #8]
 800d852:	4413      	add	r3, r2
 800d854:	687a      	ldr	r2, [r7, #4]
 800d856:	429a      	cmp	r2, r3
 800d858:	d30b      	bcc.n	800d872 <VL53L0X_isqrt+0x48>
			num -= res + bit;
 800d85a:	68fa      	ldr	r2, [r7, #12]
 800d85c:	68bb      	ldr	r3, [r7, #8]
 800d85e:	4413      	add	r3, r2
 800d860:	687a      	ldr	r2, [r7, #4]
 800d862:	1ad3      	subs	r3, r2, r3
 800d864:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 800d866:	68fb      	ldr	r3, [r7, #12]
 800d868:	085b      	lsrs	r3, r3, #1
 800d86a:	68ba      	ldr	r2, [r7, #8]
 800d86c:	4413      	add	r3, r2
 800d86e:	60fb      	str	r3, [r7, #12]
 800d870:	e002      	b.n	800d878 <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 800d872:	68fb      	ldr	r3, [r7, #12]
 800d874:	085b      	lsrs	r3, r3, #1
 800d876:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 800d878:	68bb      	ldr	r3, [r7, #8]
 800d87a:	089b      	lsrs	r3, r3, #2
 800d87c:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 800d87e:	68bb      	ldr	r3, [r7, #8]
 800d880:	2b00      	cmp	r3, #0
 800d882:	d1e4      	bne.n	800d84e <VL53L0X_isqrt+0x24>
	}

	return res;
 800d884:	68fb      	ldr	r3, [r7, #12]
}
 800d886:	4618      	mov	r0, r3
 800d888:	3714      	adds	r7, #20
 800d88a:	46bd      	mov	sp, r7
 800d88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d890:	4770      	bx	lr

0800d892 <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 800d892:	b580      	push	{r7, lr}
 800d894:	b086      	sub	sp, #24
 800d896:	af00      	add	r7, sp, #0
 800d898:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d89a:	2300      	movs	r3, #0
 800d89c:	75fb      	strb	r3, [r7, #23]
	uint8_t strobe;
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 800d89e:	2200      	movs	r2, #0
 800d8a0:	2183      	movs	r1, #131	; 0x83
 800d8a2:	6878      	ldr	r0, [r7, #4]
 800d8a4:	f002 faf4 	bl	800fe90 <VL53L0X_WrByte>
 800d8a8:	4603      	mov	r3, r0
 800d8aa:	461a      	mov	r2, r3
 800d8ac:	7dfb      	ldrb	r3, [r7, #23]
 800d8ae:	4313      	orrs	r3, r2
 800d8b0:	75fb      	strb	r3, [r7, #23]

	/* polling
	 * use timeout to avoid deadlock*/
	if (Status == VL53L0X_ERROR_NONE) {
 800d8b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	d11e      	bne.n	800d8f8 <VL53L0X_device_read_strobe+0x66>
		LoopNb = 0;
 800d8ba:	2300      	movs	r3, #0
 800d8bc:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 800d8be:	f107 030f 	add.w	r3, r7, #15
 800d8c2:	461a      	mov	r2, r3
 800d8c4:	2183      	movs	r1, #131	; 0x83
 800d8c6:	6878      	ldr	r0, [r7, #4]
 800d8c8:	f002 fb64 	bl	800ff94 <VL53L0X_RdByte>
 800d8cc:	4603      	mov	r3, r0
 800d8ce:	75fb      	strb	r3, [r7, #23]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 800d8d0:	7bfb      	ldrb	r3, [r7, #15]
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	d10a      	bne.n	800d8ec <VL53L0X_device_read_strobe+0x5a>
 800d8d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	d106      	bne.n	800d8ec <VL53L0X_device_read_strobe+0x5a>
					break;

			LoopNb = LoopNb + 1;
 800d8de:	693b      	ldr	r3, [r7, #16]
 800d8e0:	3301      	adds	r3, #1
 800d8e2:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 800d8e4:	693b      	ldr	r3, [r7, #16]
 800d8e6:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800d8ea:	d3e8      	bcc.n	800d8be <VL53L0X_device_read_strobe+0x2c>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 800d8ec:	693b      	ldr	r3, [r7, #16]
 800d8ee:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800d8f2:	d301      	bcc.n	800d8f8 <VL53L0X_device_read_strobe+0x66>
			Status = VL53L0X_ERROR_TIME_OUT;
 800d8f4:	23f9      	movs	r3, #249	; 0xf9
 800d8f6:	75fb      	strb	r3, [r7, #23]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 800d8f8:	2201      	movs	r2, #1
 800d8fa:	2183      	movs	r1, #131	; 0x83
 800d8fc:	6878      	ldr	r0, [r7, #4]
 800d8fe:	f002 fac7 	bl	800fe90 <VL53L0X_WrByte>
 800d902:	4603      	mov	r3, r0
 800d904:	461a      	mov	r2, r3
 800d906:	7dfb      	ldrb	r3, [r7, #23]
 800d908:	4313      	orrs	r3, r2
 800d90a:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
	return Status;
 800d90c:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 800d910:	4618      	mov	r0, r3
 800d912:	3718      	adds	r7, #24
 800d914:	46bd      	mov	sp, r7
 800d916:	bd80      	pop	{r7, pc}

0800d918 <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 800d918:	b580      	push	{r7, lr}
 800d91a:	b098      	sub	sp, #96	; 0x60
 800d91c:	af00      	add	r7, sp, #0
 800d91e:	6078      	str	r0, [r7, #4]
 800d920:	460b      	mov	r3, r1
 800d922:	70fb      	strb	r3, [r7, #3]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d924:	2300      	movs	r3, #0
 800d926:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 800d92a:	2300      	movs	r3, #0
 800d92c:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t ReferenceSpadType = 0;
 800d930:	2300      	movs	r3, #0
 800d932:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	uint32_t PartUIDUpper = 0;
 800d936:	2300      	movs	r3, #0
 800d938:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PartUIDLower = 0;
 800d93a:	2300      	movs	r3, #0
 800d93c:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t OffsetFixed1104_mm = 0;
 800d93e:	2300      	movs	r3, #0
 800d940:	64bb      	str	r3, [r7, #72]	; 0x48
	int16_t OffsetMicroMeters = 0;
 800d942:	2300      	movs	r3, #0
 800d944:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 800d948:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800d94c:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 800d94e:	2300      	movs	r3, #0
 800d950:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 800d952:	2300      	movs	r3, #0
 800d954:	653b      	str	r3, [r7, #80]	; 0x50
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 800d956:	2300      	movs	r3, #0
 800d958:	643b      	str	r3, [r7, #64]	; 0x40
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800d960:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done*/
	if (ReadDataFromDeviceDone != 7) {
 800d964:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d968:	2b07      	cmp	r3, #7
 800d96a:	f000 8408 	beq.w	800e17e <VL53L0X_get_info_from_device+0x866>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800d96e:	2201      	movs	r2, #1
 800d970:	2180      	movs	r1, #128	; 0x80
 800d972:	6878      	ldr	r0, [r7, #4]
 800d974:	f002 fa8c 	bl	800fe90 <VL53L0X_WrByte>
 800d978:	4603      	mov	r3, r0
 800d97a:	461a      	mov	r2, r3
 800d97c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d980:	4313      	orrs	r3, r2
 800d982:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800d986:	2201      	movs	r2, #1
 800d988:	21ff      	movs	r1, #255	; 0xff
 800d98a:	6878      	ldr	r0, [r7, #4]
 800d98c:	f002 fa80 	bl	800fe90 <VL53L0X_WrByte>
 800d990:	4603      	mov	r3, r0
 800d992:	461a      	mov	r2, r3
 800d994:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d998:	4313      	orrs	r3, r2
 800d99a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800d99e:	2200      	movs	r2, #0
 800d9a0:	2100      	movs	r1, #0
 800d9a2:	6878      	ldr	r0, [r7, #4]
 800d9a4:	f002 fa74 	bl	800fe90 <VL53L0X_WrByte>
 800d9a8:	4603      	mov	r3, r0
 800d9aa:	461a      	mov	r2, r3
 800d9ac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d9b0:	4313      	orrs	r3, r2
 800d9b2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 800d9b6:	2206      	movs	r2, #6
 800d9b8:	21ff      	movs	r1, #255	; 0xff
 800d9ba:	6878      	ldr	r0, [r7, #4]
 800d9bc:	f002 fa68 	bl	800fe90 <VL53L0X_WrByte>
 800d9c0:	4603      	mov	r3, r0
 800d9c2:	461a      	mov	r2, r3
 800d9c4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d9c8:	4313      	orrs	r3, r2
 800d9ca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 800d9ce:	f107 0337 	add.w	r3, r7, #55	; 0x37
 800d9d2:	461a      	mov	r2, r3
 800d9d4:	2183      	movs	r1, #131	; 0x83
 800d9d6:	6878      	ldr	r0, [r7, #4]
 800d9d8:	f002 fadc 	bl	800ff94 <VL53L0X_RdByte>
 800d9dc:	4603      	mov	r3, r0
 800d9de:	461a      	mov	r2, r3
 800d9e0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d9e4:	4313      	orrs	r3, r2
 800d9e6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 800d9ea:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d9ee:	f043 0304 	orr.w	r3, r3, #4
 800d9f2:	b2db      	uxtb	r3, r3
 800d9f4:	461a      	mov	r2, r3
 800d9f6:	2183      	movs	r1, #131	; 0x83
 800d9f8:	6878      	ldr	r0, [r7, #4]
 800d9fa:	f002 fa49 	bl	800fe90 <VL53L0X_WrByte>
 800d9fe:	4603      	mov	r3, r0
 800da00:	461a      	mov	r2, r3
 800da02:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800da06:	4313      	orrs	r3, r2
 800da08:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 800da0c:	2207      	movs	r2, #7
 800da0e:	21ff      	movs	r1, #255	; 0xff
 800da10:	6878      	ldr	r0, [r7, #4]
 800da12:	f002 fa3d 	bl	800fe90 <VL53L0X_WrByte>
 800da16:	4603      	mov	r3, r0
 800da18:	461a      	mov	r2, r3
 800da1a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800da1e:	4313      	orrs	r3, r2
 800da20:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 800da24:	2201      	movs	r2, #1
 800da26:	2181      	movs	r1, #129	; 0x81
 800da28:	6878      	ldr	r0, [r7, #4]
 800da2a:	f002 fa31 	bl	800fe90 <VL53L0X_WrByte>
 800da2e:	4603      	mov	r3, r0
 800da30:	461a      	mov	r2, r3
 800da32:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800da36:	4313      	orrs	r3, r2
 800da38:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_PollingDelay(Dev);
 800da3c:	6878      	ldr	r0, [r7, #4]
 800da3e:	f002 fb47 	bl	80100d0 <VL53L0X_PollingDelay>
 800da42:	4603      	mov	r3, r0
 800da44:	461a      	mov	r2, r3
 800da46:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800da4a:	4313      	orrs	r3, r2
 800da4c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800da50:	2201      	movs	r2, #1
 800da52:	2180      	movs	r1, #128	; 0x80
 800da54:	6878      	ldr	r0, [r7, #4]
 800da56:	f002 fa1b 	bl	800fe90 <VL53L0X_WrByte>
 800da5a:	4603      	mov	r3, r0
 800da5c:	461a      	mov	r2, r3
 800da5e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800da62:	4313      	orrs	r3, r2
 800da64:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		if (((option & 1) == 1) &&
 800da68:	78fb      	ldrb	r3, [r7, #3]
 800da6a:	f003 0301 	and.w	r3, r3, #1
 800da6e:	2b00      	cmp	r3, #0
 800da70:	f000 8098 	beq.w	800dba4 <VL53L0X_get_info_from_device+0x28c>
			((ReadDataFromDeviceDone & 1) == 0)) {
 800da74:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800da78:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	f040 8091 	bne.w	800dba4 <VL53L0X_get_info_from_device+0x28c>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 800da82:	226b      	movs	r2, #107	; 0x6b
 800da84:	2194      	movs	r1, #148	; 0x94
 800da86:	6878      	ldr	r0, [r7, #4]
 800da88:	f002 fa02 	bl	800fe90 <VL53L0X_WrByte>
 800da8c:	4603      	mov	r3, r0
 800da8e:	461a      	mov	r2, r3
 800da90:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800da94:	4313      	orrs	r3, r2
 800da96:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800da9a:	6878      	ldr	r0, [r7, #4]
 800da9c:	f7ff fef9 	bl	800d892 <VL53L0X_device_read_strobe>
 800daa0:	4603      	mov	r3, r0
 800daa2:	461a      	mov	r2, r3
 800daa4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800daa8:	4313      	orrs	r3, r2
 800daaa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800daae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800dab2:	461a      	mov	r2, r3
 800dab4:	2190      	movs	r1, #144	; 0x90
 800dab6:	6878      	ldr	r0, [r7, #4]
 800dab8:	f002 face 	bl	8010058 <VL53L0X_RdDWord>
 800dabc:	4603      	mov	r3, r0
 800dabe:	461a      	mov	r2, r3
 800dac0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dac4:	4313      	orrs	r3, r2
 800dac6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 800daca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dacc:	0a1b      	lsrs	r3, r3, #8
 800dace:	b2db      	uxtb	r3, r3
 800dad0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dad4:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 800dad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dada:	0bdb      	lsrs	r3, r3, #15
 800dadc:	b2db      	uxtb	r3, r3
 800dade:	f003 0301 	and.w	r3, r3, #1
 800dae2:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 800dae6:	2224      	movs	r2, #36	; 0x24
 800dae8:	2194      	movs	r1, #148	; 0x94
 800daea:	6878      	ldr	r0, [r7, #4]
 800daec:	f002 f9d0 	bl	800fe90 <VL53L0X_WrByte>
 800daf0:	4603      	mov	r3, r0
 800daf2:	461a      	mov	r2, r3
 800daf4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800daf8:	4313      	orrs	r3, r2
 800dafa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800dafe:	6878      	ldr	r0, [r7, #4]
 800db00:	f7ff fec7 	bl	800d892 <VL53L0X_device_read_strobe>
 800db04:	4603      	mov	r3, r0
 800db06:	461a      	mov	r2, r3
 800db08:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800db0c:	4313      	orrs	r3, r2
 800db0e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800db12:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800db16:	461a      	mov	r2, r3
 800db18:	2190      	movs	r1, #144	; 0x90
 800db1a:	6878      	ldr	r0, [r7, #4]
 800db1c:	f002 fa9c 	bl	8010058 <VL53L0X_RdDWord>
 800db20:	4603      	mov	r3, r0
 800db22:	461a      	mov	r2, r3
 800db24:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800db28:	4313      	orrs	r3, r2
 800db2a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 800db2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db30:	0e1b      	lsrs	r3, r3, #24
 800db32:	b2db      	uxtb	r3, r3
 800db34:	723b      	strb	r3, [r7, #8]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 800db36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db38:	0c1b      	lsrs	r3, r3, #16
 800db3a:	b2db      	uxtb	r3, r3
 800db3c:	727b      	strb	r3, [r7, #9]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 800db3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db40:	0a1b      	lsrs	r3, r3, #8
 800db42:	b2db      	uxtb	r3, r3
 800db44:	72bb      	strb	r3, [r7, #10]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 800db46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db48:	b2db      	uxtb	r3, r3
 800db4a:	72fb      	strb	r3, [r7, #11]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 800db4c:	2225      	movs	r2, #37	; 0x25
 800db4e:	2194      	movs	r1, #148	; 0x94
 800db50:	6878      	ldr	r0, [r7, #4]
 800db52:	f002 f99d 	bl	800fe90 <VL53L0X_WrByte>
 800db56:	4603      	mov	r3, r0
 800db58:	461a      	mov	r2, r3
 800db5a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800db5e:	4313      	orrs	r3, r2
 800db60:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800db64:	6878      	ldr	r0, [r7, #4]
 800db66:	f7ff fe94 	bl	800d892 <VL53L0X_device_read_strobe>
 800db6a:	4603      	mov	r3, r0
 800db6c:	461a      	mov	r2, r3
 800db6e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800db72:	4313      	orrs	r3, r2
 800db74:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800db78:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800db7c:	461a      	mov	r2, r3
 800db7e:	2190      	movs	r1, #144	; 0x90
 800db80:	6878      	ldr	r0, [r7, #4]
 800db82:	f002 fa69 	bl	8010058 <VL53L0X_RdDWord>
 800db86:	4603      	mov	r3, r0
 800db88:	461a      	mov	r2, r3
 800db8a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800db8e:	4313      	orrs	r3, r2
 800db90:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 800db94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db96:	0e1b      	lsrs	r3, r3, #24
 800db98:	b2db      	uxtb	r3, r3
 800db9a:	733b      	strb	r3, [r7, #12]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 800db9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db9e:	0c1b      	lsrs	r3, r3, #16
 800dba0:	b2db      	uxtb	r3, r3
 800dba2:	737b      	strb	r3, [r7, #13]
				& 0xff);
		}

		if (((option & 2) == 2) &&
 800dba4:	78fb      	ldrb	r3, [r7, #3]
 800dba6:	f003 0302 	and.w	r3, r3, #2
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	f000 8189 	beq.w	800dec2 <VL53L0X_get_info_from_device+0x5aa>
			((ReadDataFromDeviceDone & 2) == 0)) {
 800dbb0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800dbb4:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	f040 8182 	bne.w	800dec2 <VL53L0X_get_info_from_device+0x5aa>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 800dbbe:	2202      	movs	r2, #2
 800dbc0:	2194      	movs	r1, #148	; 0x94
 800dbc2:	6878      	ldr	r0, [r7, #4]
 800dbc4:	f002 f964 	bl	800fe90 <VL53L0X_WrByte>
 800dbc8:	4603      	mov	r3, r0
 800dbca:	461a      	mov	r2, r3
 800dbcc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dbd0:	4313      	orrs	r3, r2
 800dbd2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800dbd6:	6878      	ldr	r0, [r7, #4]
 800dbd8:	f7ff fe5b 	bl	800d892 <VL53L0X_device_read_strobe>
 800dbdc:	4603      	mov	r3, r0
 800dbde:	461a      	mov	r2, r3
 800dbe0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dbe4:	4313      	orrs	r3, r2
 800dbe6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 800dbea:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 800dbee:	461a      	mov	r2, r3
 800dbf0:	2190      	movs	r1, #144	; 0x90
 800dbf2:	6878      	ldr	r0, [r7, #4]
 800dbf4:	f002 f9ce 	bl	800ff94 <VL53L0X_RdByte>
 800dbf8:	4603      	mov	r3, r0
 800dbfa:	461a      	mov	r2, r3
 800dbfc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dc00:	4313      	orrs	r3, r2
 800dc02:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 800dc06:	227b      	movs	r2, #123	; 0x7b
 800dc08:	2194      	movs	r1, #148	; 0x94
 800dc0a:	6878      	ldr	r0, [r7, #4]
 800dc0c:	f002 f940 	bl	800fe90 <VL53L0X_WrByte>
 800dc10:	4603      	mov	r3, r0
 800dc12:	461a      	mov	r2, r3
 800dc14:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dc18:	4313      	orrs	r3, r2
 800dc1a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800dc1e:	6878      	ldr	r0, [r7, #4]
 800dc20:	f7ff fe37 	bl	800d892 <VL53L0X_device_read_strobe>
 800dc24:	4603      	mov	r3, r0
 800dc26:	461a      	mov	r2, r3
 800dc28:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dc2c:	4313      	orrs	r3, r2
 800dc2e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 800dc32:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 800dc36:	461a      	mov	r2, r3
 800dc38:	2190      	movs	r1, #144	; 0x90
 800dc3a:	6878      	ldr	r0, [r7, #4]
 800dc3c:	f002 f9aa 	bl	800ff94 <VL53L0X_RdByte>
 800dc40:	4603      	mov	r3, r0
 800dc42:	461a      	mov	r2, r3
 800dc44:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dc48:	4313      	orrs	r3, r2
 800dc4a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 800dc4e:	2277      	movs	r2, #119	; 0x77
 800dc50:	2194      	movs	r1, #148	; 0x94
 800dc52:	6878      	ldr	r0, [r7, #4]
 800dc54:	f002 f91c 	bl	800fe90 <VL53L0X_WrByte>
 800dc58:	4603      	mov	r3, r0
 800dc5a:	461a      	mov	r2, r3
 800dc5c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dc60:	4313      	orrs	r3, r2
 800dc62:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800dc66:	6878      	ldr	r0, [r7, #4]
 800dc68:	f7ff fe13 	bl	800d892 <VL53L0X_device_read_strobe>
 800dc6c:	4603      	mov	r3, r0
 800dc6e:	461a      	mov	r2, r3
 800dc70:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dc74:	4313      	orrs	r3, r2
 800dc76:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800dc7a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800dc7e:	461a      	mov	r2, r3
 800dc80:	2190      	movs	r1, #144	; 0x90
 800dc82:	6878      	ldr	r0, [r7, #4]
 800dc84:	f002 f9e8 	bl	8010058 <VL53L0X_RdDWord>
 800dc88:	4603      	mov	r3, r0
 800dc8a:	461a      	mov	r2, r3
 800dc8c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dc90:	4313      	orrs	r3, r2
 800dc92:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 800dc96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc98:	0e5b      	lsrs	r3, r3, #25
 800dc9a:	b2db      	uxtb	r3, r3
 800dc9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dca0:	b2db      	uxtb	r3, r3
 800dca2:	743b      	strb	r3, [r7, #16]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 800dca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dca6:	0c9b      	lsrs	r3, r3, #18
 800dca8:	b2db      	uxtb	r3, r3
 800dcaa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dcae:	b2db      	uxtb	r3, r3
 800dcb0:	747b      	strb	r3, [r7, #17]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 800dcb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcb4:	0adb      	lsrs	r3, r3, #11
 800dcb6:	b2db      	uxtb	r3, r3
 800dcb8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dcbc:	b2db      	uxtb	r3, r3
 800dcbe:	74bb      	strb	r3, [r7, #18]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 800dcc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcc2:	091b      	lsrs	r3, r3, #4
 800dcc4:	b2db      	uxtb	r3, r3
 800dcc6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dcca:	b2db      	uxtb	r3, r3
 800dccc:	74fb      	strb	r3, [r7, #19]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 800dcce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcd0:	b2db      	uxtb	r3, r3
 800dcd2:	00db      	lsls	r3, r3, #3
 800dcd4:	b2db      	uxtb	r3, r3
 800dcd6:	f003 0378 	and.w	r3, r3, #120	; 0x78
 800dcda:	b2db      	uxtb	r3, r3
 800dcdc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 800dce0:	2278      	movs	r2, #120	; 0x78
 800dce2:	2194      	movs	r1, #148	; 0x94
 800dce4:	6878      	ldr	r0, [r7, #4]
 800dce6:	f002 f8d3 	bl	800fe90 <VL53L0X_WrByte>
 800dcea:	4603      	mov	r3, r0
 800dcec:	461a      	mov	r2, r3
 800dcee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dcf2:	4313      	orrs	r3, r2
 800dcf4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800dcf8:	6878      	ldr	r0, [r7, #4]
 800dcfa:	f7ff fdca 	bl	800d892 <VL53L0X_device_read_strobe>
 800dcfe:	4603      	mov	r3, r0
 800dd00:	461a      	mov	r2, r3
 800dd02:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dd06:	4313      	orrs	r3, r2
 800dd08:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800dd0c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800dd10:	461a      	mov	r2, r3
 800dd12:	2190      	movs	r1, #144	; 0x90
 800dd14:	6878      	ldr	r0, [r7, #4]
 800dd16:	f002 f99f 	bl	8010058 <VL53L0X_RdDWord>
 800dd1a:	4603      	mov	r3, r0
 800dd1c:	461a      	mov	r2, r3
 800dd1e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dd22:	4313      	orrs	r3, r2
 800dd24:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 800dd28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd2a:	0f5b      	lsrs	r3, r3, #29
 800dd2c:	b2db      	uxtb	r3, r3
 800dd2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dd32:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 800dd34:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800dd38:	4413      	add	r3, r2
 800dd3a:	b2db      	uxtb	r3, r3
 800dd3c:	753b      	strb	r3, [r7, #20]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 800dd3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd40:	0d9b      	lsrs	r3, r3, #22
 800dd42:	b2db      	uxtb	r3, r3
 800dd44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dd48:	b2db      	uxtb	r3, r3
 800dd4a:	757b      	strb	r3, [r7, #21]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 800dd4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd4e:	0bdb      	lsrs	r3, r3, #15
 800dd50:	b2db      	uxtb	r3, r3
 800dd52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dd56:	b2db      	uxtb	r3, r3
 800dd58:	75bb      	strb	r3, [r7, #22]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 800dd5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd5c:	0a1b      	lsrs	r3, r3, #8
 800dd5e:	b2db      	uxtb	r3, r3
 800dd60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dd64:	b2db      	uxtb	r3, r3
 800dd66:	75fb      	strb	r3, [r7, #23]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 800dd68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd6a:	085b      	lsrs	r3, r3, #1
 800dd6c:	b2db      	uxtb	r3, r3
 800dd6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dd72:	b2db      	uxtb	r3, r3
 800dd74:	763b      	strb	r3, [r7, #24]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 800dd76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd78:	b2db      	uxtb	r3, r3
 800dd7a:	019b      	lsls	r3, r3, #6
 800dd7c:	b2db      	uxtb	r3, r3
 800dd7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dd82:	b2db      	uxtb	r3, r3
 800dd84:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 800dd88:	2279      	movs	r2, #121	; 0x79
 800dd8a:	2194      	movs	r1, #148	; 0x94
 800dd8c:	6878      	ldr	r0, [r7, #4]
 800dd8e:	f002 f87f 	bl	800fe90 <VL53L0X_WrByte>
 800dd92:	4603      	mov	r3, r0
 800dd94:	461a      	mov	r2, r3
 800dd96:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dd9a:	4313      	orrs	r3, r2
 800dd9c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 800dda0:	6878      	ldr	r0, [r7, #4]
 800dda2:	f7ff fd76 	bl	800d892 <VL53L0X_device_read_strobe>
 800dda6:	4603      	mov	r3, r0
 800dda8:	461a      	mov	r2, r3
 800ddaa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ddae:	4313      	orrs	r3, r2
 800ddb0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800ddb4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ddb8:	461a      	mov	r2, r3
 800ddba:	2190      	movs	r1, #144	; 0x90
 800ddbc:	6878      	ldr	r0, [r7, #4]
 800ddbe:	f002 f94b 	bl	8010058 <VL53L0X_RdDWord>
 800ddc2:	4603      	mov	r3, r0
 800ddc4:	461a      	mov	r2, r3
 800ddc6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ddca:	4313      	orrs	r3, r2
 800ddcc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 800ddd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddd2:	0e9b      	lsrs	r3, r3, #26
 800ddd4:	b2db      	uxtb	r3, r3
 800ddd6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ddda:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 800dddc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800dde0:	4413      	add	r3, r2
 800dde2:	b2db      	uxtb	r3, r3
 800dde4:	767b      	strb	r3, [r7, #25]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 800dde6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dde8:	0cdb      	lsrs	r3, r3, #19
 800ddea:	b2db      	uxtb	r3, r3
 800ddec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ddf0:	b2db      	uxtb	r3, r3
 800ddf2:	76bb      	strb	r3, [r7, #26]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 800ddf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddf6:	0b1b      	lsrs	r3, r3, #12
 800ddf8:	b2db      	uxtb	r3, r3
 800ddfa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ddfe:	b2db      	uxtb	r3, r3
 800de00:	76fb      	strb	r3, [r7, #27]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 800de02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de04:	095b      	lsrs	r3, r3, #5
 800de06:	b2db      	uxtb	r3, r3
 800de08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800de0c:	b2db      	uxtb	r3, r3
 800de0e:	773b      	strb	r3, [r7, #28]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 800de10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de12:	b2db      	uxtb	r3, r3
 800de14:	009b      	lsls	r3, r3, #2
 800de16:	b2db      	uxtb	r3, r3
 800de18:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 800de1c:	b2db      	uxtb	r3, r3
 800de1e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 800de22:	227a      	movs	r2, #122	; 0x7a
 800de24:	2194      	movs	r1, #148	; 0x94
 800de26:	6878      	ldr	r0, [r7, #4]
 800de28:	f002 f832 	bl	800fe90 <VL53L0X_WrByte>
 800de2c:	4603      	mov	r3, r0
 800de2e:	461a      	mov	r2, r3
 800de30:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800de34:	4313      	orrs	r3, r2
 800de36:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 800de3a:	6878      	ldr	r0, [r7, #4]
 800de3c:	f7ff fd29 	bl	800d892 <VL53L0X_device_read_strobe>
 800de40:	4603      	mov	r3, r0
 800de42:	461a      	mov	r2, r3
 800de44:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800de48:	4313      	orrs	r3, r2
 800de4a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800de4e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800de52:	461a      	mov	r2, r3
 800de54:	2190      	movs	r1, #144	; 0x90
 800de56:	6878      	ldr	r0, [r7, #4]
 800de58:	f002 f8fe 	bl	8010058 <VL53L0X_RdDWord>
 800de5c:	4603      	mov	r3, r0
 800de5e:	461a      	mov	r2, r3
 800de60:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800de64:	4313      	orrs	r3, r2
 800de66:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 800de6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de6c:	0f9b      	lsrs	r3, r3, #30
 800de6e:	b2db      	uxtb	r3, r3
 800de70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800de74:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 800de76:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800de7a:	4413      	add	r3, r2
 800de7c:	b2db      	uxtb	r3, r3
 800de7e:	777b      	strb	r3, [r7, #29]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 800de80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de82:	0ddb      	lsrs	r3, r3, #23
 800de84:	b2db      	uxtb	r3, r3
 800de86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800de8a:	b2db      	uxtb	r3, r3
 800de8c:	77bb      	strb	r3, [r7, #30]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 800de8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de90:	0c1b      	lsrs	r3, r3, #16
 800de92:	b2db      	uxtb	r3, r3
 800de94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800de98:	b2db      	uxtb	r3, r3
 800de9a:	77fb      	strb	r3, [r7, #31]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 800de9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de9e:	0a5b      	lsrs	r3, r3, #9
 800dea0:	b2db      	uxtb	r3, r3
 800dea2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dea6:	b2db      	uxtb	r3, r3
 800dea8:	f887 3020 	strb.w	r3, [r7, #32]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 800deac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800deae:	089b      	lsrs	r3, r3, #2
 800deb0:	b2db      	uxtb	r3, r3
 800deb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800deb6:	b2db      	uxtb	r3, r3
 800deb8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			ProductId[18] = '\0';
 800debc:	2300      	movs	r3, #0
 800debe:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		}

		if (((option & 4) == 4) &&
 800dec2:	78fb      	ldrb	r3, [r7, #3]
 800dec4:	f003 0304 	and.w	r3, r3, #4
 800dec8:	2b00      	cmp	r3, #0
 800deca:	f000 80f1 	beq.w	800e0b0 <VL53L0X_get_info_from_device+0x798>
			((ReadDataFromDeviceDone & 4) == 0)) {
 800dece:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ded2:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	f040 80ea 	bne.w	800e0b0 <VL53L0X_get_info_from_device+0x798>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 800dedc:	227b      	movs	r2, #123	; 0x7b
 800dede:	2194      	movs	r1, #148	; 0x94
 800dee0:	6878      	ldr	r0, [r7, #4]
 800dee2:	f001 ffd5 	bl	800fe90 <VL53L0X_WrByte>
 800dee6:	4603      	mov	r3, r0
 800dee8:	461a      	mov	r2, r3
 800deea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800deee:	4313      	orrs	r3, r2
 800def0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800def4:	6878      	ldr	r0, [r7, #4]
 800def6:	f7ff fccc 	bl	800d892 <VL53L0X_device_read_strobe>
 800defa:	4603      	mov	r3, r0
 800defc:	461a      	mov	r2, r3
 800defe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800df02:	4313      	orrs	r3, r2
 800df04:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 800df08:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800df0c:	461a      	mov	r2, r3
 800df0e:	2190      	movs	r1, #144	; 0x90
 800df10:	6878      	ldr	r0, [r7, #4]
 800df12:	f002 f8a1 	bl	8010058 <VL53L0X_RdDWord>
 800df16:	4603      	mov	r3, r0
 800df18:	461a      	mov	r2, r3
 800df1a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800df1e:	4313      	orrs	r3, r2
 800df20:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 800df24:	227c      	movs	r2, #124	; 0x7c
 800df26:	2194      	movs	r1, #148	; 0x94
 800df28:	6878      	ldr	r0, [r7, #4]
 800df2a:	f001 ffb1 	bl	800fe90 <VL53L0X_WrByte>
 800df2e:	4603      	mov	r3, r0
 800df30:	461a      	mov	r2, r3
 800df32:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800df36:	4313      	orrs	r3, r2
 800df38:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800df3c:	6878      	ldr	r0, [r7, #4]
 800df3e:	f7ff fca8 	bl	800d892 <VL53L0X_device_read_strobe>
 800df42:	4603      	mov	r3, r0
 800df44:	461a      	mov	r2, r3
 800df46:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800df4a:	4313      	orrs	r3, r2
 800df4c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 800df50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800df54:	461a      	mov	r2, r3
 800df56:	2190      	movs	r1, #144	; 0x90
 800df58:	6878      	ldr	r0, [r7, #4]
 800df5a:	f002 f87d 	bl	8010058 <VL53L0X_RdDWord>
 800df5e:	4603      	mov	r3, r0
 800df60:	461a      	mov	r2, r3
 800df62:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800df66:	4313      	orrs	r3, r2
 800df68:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 800df6c:	2273      	movs	r2, #115	; 0x73
 800df6e:	2194      	movs	r1, #148	; 0x94
 800df70:	6878      	ldr	r0, [r7, #4]
 800df72:	f001 ff8d 	bl	800fe90 <VL53L0X_WrByte>
 800df76:	4603      	mov	r3, r0
 800df78:	461a      	mov	r2, r3
 800df7a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800df7e:	4313      	orrs	r3, r2
 800df80:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800df84:	6878      	ldr	r0, [r7, #4]
 800df86:	f7ff fc84 	bl	800d892 <VL53L0X_device_read_strobe>
 800df8a:	4603      	mov	r3, r0
 800df8c:	461a      	mov	r2, r3
 800df8e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800df92:	4313      	orrs	r3, r2
 800df94:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800df98:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800df9c:	461a      	mov	r2, r3
 800df9e:	2190      	movs	r1, #144	; 0x90
 800dfa0:	6878      	ldr	r0, [r7, #4]
 800dfa2:	f002 f859 	bl	8010058 <VL53L0X_RdDWord>
 800dfa6:	4603      	mov	r3, r0
 800dfa8:	461a      	mov	r2, r3
 800dfaa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dfae:	4313      	orrs	r3, r2
 800dfb0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x0000000ff) << 8;
 800dfb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfb6:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 800dfb8:	b29b      	uxth	r3, r3
 800dfba:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 800dfbc:	2274      	movs	r2, #116	; 0x74
 800dfbe:	2194      	movs	r1, #148	; 0x94
 800dfc0:	6878      	ldr	r0, [r7, #4]
 800dfc2:	f001 ff65 	bl	800fe90 <VL53L0X_WrByte>
 800dfc6:	4603      	mov	r3, r0
 800dfc8:	461a      	mov	r2, r3
 800dfca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dfce:	4313      	orrs	r3, r2
 800dfd0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800dfd4:	6878      	ldr	r0, [r7, #4]
 800dfd6:	f7ff fc5c 	bl	800d892 <VL53L0X_device_read_strobe>
 800dfda:	4603      	mov	r3, r0
 800dfdc:	461a      	mov	r2, r3
 800dfde:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dfe2:	4313      	orrs	r3, r2
 800dfe4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800dfe8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800dfec:	461a      	mov	r2, r3
 800dfee:	2190      	movs	r1, #144	; 0x90
 800dff0:	6878      	ldr	r0, [r7, #4]
 800dff2:	f002 f831 	bl	8010058 <VL53L0X_RdDWord>
 800dff6:	4603      	mov	r3, r0
 800dff8:	461a      	mov	r2, r3
 800dffa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dffe:	4313      	orrs	r3, r2
 800e000:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 800e004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e006:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 800e008:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e00a:	4313      	orrs	r3, r2
 800e00c:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 800e00e:	2275      	movs	r2, #117	; 0x75
 800e010:	2194      	movs	r1, #148	; 0x94
 800e012:	6878      	ldr	r0, [r7, #4]
 800e014:	f001 ff3c 	bl	800fe90 <VL53L0X_WrByte>
 800e018:	4603      	mov	r3, r0
 800e01a:	461a      	mov	r2, r3
 800e01c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e020:	4313      	orrs	r3, r2
 800e022:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800e026:	6878      	ldr	r0, [r7, #4]
 800e028:	f7ff fc33 	bl	800d892 <VL53L0X_device_read_strobe>
 800e02c:	4603      	mov	r3, r0
 800e02e:	461a      	mov	r2, r3
 800e030:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e034:	4313      	orrs	r3, r2
 800e036:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800e03a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800e03e:	461a      	mov	r2, r3
 800e040:	2190      	movs	r1, #144	; 0x90
 800e042:	6878      	ldr	r0, [r7, #4]
 800e044:	f002 f808 	bl	8010058 <VL53L0X_RdDWord>
 800e048:	4603      	mov	r3, r0
 800e04a:	461a      	mov	r2, r3
 800e04c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e050:	4313      	orrs	r3, r2
 800e052:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
							<< 8;
 800e056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e058:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
 800e05a:	b29b      	uxth	r3, r3
 800e05c:	657b      	str	r3, [r7, #84]	; 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 800e05e:	2276      	movs	r2, #118	; 0x76
 800e060:	2194      	movs	r1, #148	; 0x94
 800e062:	6878      	ldr	r0, [r7, #4]
 800e064:	f001 ff14 	bl	800fe90 <VL53L0X_WrByte>
 800e068:	4603      	mov	r3, r0
 800e06a:	461a      	mov	r2, r3
 800e06c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e070:	4313      	orrs	r3, r2
 800e072:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800e076:	6878      	ldr	r0, [r7, #4]
 800e078:	f7ff fc0b 	bl	800d892 <VL53L0X_device_read_strobe>
 800e07c:	4603      	mov	r3, r0
 800e07e:	461a      	mov	r2, r3
 800e080:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e084:	4313      	orrs	r3, r2
 800e086:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800e08a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800e08e:	461a      	mov	r2, r3
 800e090:	2190      	movs	r1, #144	; 0x90
 800e092:	6878      	ldr	r0, [r7, #4]
 800e094:	f001 ffe0 	bl	8010058 <VL53L0X_RdDWord>
 800e098:	4603      	mov	r3, r0
 800e09a:	461a      	mov	r2, r3
 800e09c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e0a0:	4313      	orrs	r3, r2
 800e0a2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 800e0a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0a8:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 800e0aa:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e0ac:	4313      	orrs	r3, r2
 800e0ae:	657b      	str	r3, [r7, #84]	; 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 800e0b0:	2200      	movs	r2, #0
 800e0b2:	2181      	movs	r1, #129	; 0x81
 800e0b4:	6878      	ldr	r0, [r7, #4]
 800e0b6:	f001 feeb 	bl	800fe90 <VL53L0X_WrByte>
 800e0ba:	4603      	mov	r3, r0
 800e0bc:	461a      	mov	r2, r3
 800e0be:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e0c2:	4313      	orrs	r3, r2
 800e0c4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 800e0c8:	2206      	movs	r2, #6
 800e0ca:	21ff      	movs	r1, #255	; 0xff
 800e0cc:	6878      	ldr	r0, [r7, #4]
 800e0ce:	f001 fedf 	bl	800fe90 <VL53L0X_WrByte>
 800e0d2:	4603      	mov	r3, r0
 800e0d4:	461a      	mov	r2, r3
 800e0d6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e0da:	4313      	orrs	r3, r2
 800e0dc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 800e0e0:	f107 0337 	add.w	r3, r7, #55	; 0x37
 800e0e4:	461a      	mov	r2, r3
 800e0e6:	2183      	movs	r1, #131	; 0x83
 800e0e8:	6878      	ldr	r0, [r7, #4]
 800e0ea:	f001 ff53 	bl	800ff94 <VL53L0X_RdByte>
 800e0ee:	4603      	mov	r3, r0
 800e0f0:	461a      	mov	r2, r3
 800e0f2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e0f6:	4313      	orrs	r3, r2
 800e0f8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 800e0fc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e100:	f023 0304 	bic.w	r3, r3, #4
 800e104:	b2db      	uxtb	r3, r3
 800e106:	461a      	mov	r2, r3
 800e108:	2183      	movs	r1, #131	; 0x83
 800e10a:	6878      	ldr	r0, [r7, #4]
 800e10c:	f001 fec0 	bl	800fe90 <VL53L0X_WrByte>
 800e110:	4603      	mov	r3, r0
 800e112:	461a      	mov	r2, r3
 800e114:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e118:	4313      	orrs	r3, r2
 800e11a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800e11e:	2201      	movs	r2, #1
 800e120:	21ff      	movs	r1, #255	; 0xff
 800e122:	6878      	ldr	r0, [r7, #4]
 800e124:	f001 feb4 	bl	800fe90 <VL53L0X_WrByte>
 800e128:	4603      	mov	r3, r0
 800e12a:	461a      	mov	r2, r3
 800e12c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e130:	4313      	orrs	r3, r2
 800e132:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800e136:	2201      	movs	r2, #1
 800e138:	2100      	movs	r1, #0
 800e13a:	6878      	ldr	r0, [r7, #4]
 800e13c:	f001 fea8 	bl	800fe90 <VL53L0X_WrByte>
 800e140:	4603      	mov	r3, r0
 800e142:	461a      	mov	r2, r3
 800e144:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e148:	4313      	orrs	r3, r2
 800e14a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800e14e:	2200      	movs	r2, #0
 800e150:	21ff      	movs	r1, #255	; 0xff
 800e152:	6878      	ldr	r0, [r7, #4]
 800e154:	f001 fe9c 	bl	800fe90 <VL53L0X_WrByte>
 800e158:	4603      	mov	r3, r0
 800e15a:	461a      	mov	r2, r3
 800e15c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e160:	4313      	orrs	r3, r2
 800e162:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800e166:	2200      	movs	r2, #0
 800e168:	2180      	movs	r1, #128	; 0x80
 800e16a:	6878      	ldr	r0, [r7, #4]
 800e16c:	f001 fe90 	bl	800fe90 <VL53L0X_WrByte>
 800e170:	4603      	mov	r3, r0
 800e172:	461a      	mov	r2, r3
 800e174:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e178:	4313      	orrs	r3, r2
 800e17a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 800e17e:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 800e182:	2b00      	cmp	r3, #0
 800e184:	f040 808f 	bne.w	800e2a6 <VL53L0X_get_info_from_device+0x98e>
 800e188:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800e18c:	2b07      	cmp	r3, #7
 800e18e:	f000 808a 	beq.w	800e2a6 <VL53L0X_get_info_from_device+0x98e>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 800e192:	78fb      	ldrb	r3, [r7, #3]
 800e194:	f003 0301 	and.w	r3, r3, #1
 800e198:	2b00      	cmp	r3, #0
 800e19a:	d024      	beq.n	800e1e6 <VL53L0X_get_info_from_device+0x8ce>
			((ReadDataFromDeviceDone & 1) == 0)) {
 800e19c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800e1a0:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	d11e      	bne.n	800e1e6 <VL53L0X_get_info_from_device+0x8ce>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 800e1ae:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 800e1b8:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 800e1bc:	2300      	movs	r3, #0
 800e1be:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e1c0:	e00e      	b.n	800e1e0 <VL53L0X_get_info_from_device+0x8c8>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 800e1c2:	f107 0208 	add.w	r2, r7, #8
 800e1c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e1c8:	4413      	add	r3, r2
 800e1ca:	7819      	ldrb	r1, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 800e1cc:	687a      	ldr	r2, [r7, #4]
 800e1ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e1d0:	4413      	add	r3, r2
 800e1d2:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 800e1d6:	460a      	mov	r2, r1
 800e1d8:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 800e1da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e1dc:	3301      	adds	r3, #1
 800e1de:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e1e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e1e2:	2b05      	cmp	r3, #5
 800e1e4:	dded      	ble.n	800e1c2 <VL53L0X_get_info_from_device+0x8aa>
			}
		}

		if (((option & 2) == 2) &&
 800e1e6:	78fb      	ldrb	r3, [r7, #3]
 800e1e8:	f003 0302 	and.w	r3, r3, #2
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	d018      	beq.n	800e222 <VL53L0X_get_info_from_device+0x90a>
			((ReadDataFromDeviceDone & 2) == 0)) {
 800e1f0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800e1f4:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	d112      	bne.n	800e222 <VL53L0X_get_info_from_device+0x90a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800e1fc:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800e206:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	33f3      	adds	r3, #243	; 0xf3
 800e214:	63bb      	str	r3, [r7, #56]	; 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 800e216:	f107 0310 	add.w	r3, r7, #16
 800e21a:	4619      	mov	r1, r3
 800e21c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e21e:	f002 feb8 	bl	8010f92 <strcpy>

		}

		if (((option & 4) == 4) &&
 800e222:	78fb      	ldrb	r3, [r7, #3]
 800e224:	f003 0304 	and.w	r3, r3, #4
 800e228:	2b00      	cmp	r3, #0
 800e22a:	d030      	beq.n	800e28e <VL53L0X_get_info_from_device+0x976>
			((ReadDataFromDeviceDone & 4) == 0)) {
 800e22c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800e230:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 800e234:	2b00      	cmp	r3, #0
 800e236:	d12a      	bne.n	800e28e <VL53L0X_get_info_from_device+0x976>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800e238:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800e240:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 800e248:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e24a:	025b      	lsls	r3, r3, #9
 800e24c:	643b      	str	r3, [r7, #64]	; 0x40
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e252:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 800e256:	2300      	movs	r3, #0
 800e258:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			if (DistMeasFixed1104_400_mm != 0) {
 800e25c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e25e:	2b00      	cmp	r3, #0
 800e260:	d011      	beq.n	800e286 <VL53L0X_get_info_from_device+0x96e>
					OffsetFixed1104_mm =
 800e262:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e264:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e266:	1ad3      	subs	r3, r2, r3
 800e268:	64bb      	str	r3, [r7, #72]	; 0x48
						DistMeasFixed1104_400_mm -
						DistMeasTgtFixed1104_mm;
					OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 800e26a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e26c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e270:	fb02 f303 	mul.w	r3, r2, r3
 800e274:	091b      	lsrs	r3, r3, #4
					OffsetMicroMeters = (OffsetFixed1104_mm
 800e276:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
					OffsetMicroMeters *= -1;
 800e27a:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800e27e:	425b      	negs	r3, r3
 800e280:	b29b      	uxth	r3, r3
 800e282:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			}

			PALDevDataSet(Dev,
 800e286:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	60da      	str	r2, [r3, #12]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 800e28e:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800e292:	78fb      	ldrb	r3, [r7, #3]
 800e294:	4313      	orrs	r3, r2
 800e296:	b2db      	uxtb	r3, r3
 800e298:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 800e29c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800e2a6:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 800e2aa:	4618      	mov	r0, r3
 800e2ac:	3760      	adds	r7, #96	; 0x60
 800e2ae:	46bd      	mov	sp, r7
 800e2b0:	bd80      	pop	{r7, pc}

0800e2b2 <VL53L0X_calc_macro_period_ps>:


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev, uint8_t vcsel_period_pclks)
{
 800e2b2:	b480      	push	{r7}
 800e2b4:	b087      	sub	sp, #28
 800e2b6:	af00      	add	r7, sp, #0
 800e2b8:	6078      	str	r0, [r7, #4]
 800e2ba:	460b      	mov	r3, r1
 800e2bc:	70fb      	strb	r3, [r7, #3]
	LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	   therefore set fixed value
	*/
	PLL_period_ps = 1655;
 800e2be:	f240 6277 	movw	r2, #1655	; 0x677
 800e2c2:	f04f 0300 	mov.w	r3, #0
 800e2c6:	e9c7 2304 	strd	r2, r3, [r7, #16]

	macro_period_vclks = 2304;
 800e2ca:	f44f 6310 	mov.w	r3, #2304	; 0x900
 800e2ce:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 800e2d0:	78fb      	ldrb	r3, [r7, #3]
 800e2d2:	68fa      	ldr	r2, [r7, #12]
 800e2d4:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 800e2d8:	693a      	ldr	r2, [r7, #16]
 800e2da:	fb02 f303 	mul.w	r3, r2, r3
 800e2de:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 800e2e0:	68bb      	ldr	r3, [r7, #8]
}
 800e2e2:	4618      	mov	r0, r3
 800e2e4:	371c      	adds	r7, #28
 800e2e6:	46bd      	mov	sp, r7
 800e2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2ec:	4770      	bx	lr

0800e2ee <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 800e2ee:	b480      	push	{r7}
 800e2f0:	b087      	sub	sp, #28
 800e2f2:	af00      	add	r7, sp, #0
 800e2f4:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 800e2f6:	2300      	movs	r3, #0
 800e2f8:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 800e2fa:	2300      	movs	r3, #0
 800e2fc:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 800e2fe:	2300      	movs	r3, #0
 800e300:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	2b00      	cmp	r3, #0
 800e306:	d017      	beq.n	800e338 <VL53L0X_encode_timeout+0x4a>
		ls_byte = timeout_macro_clks - 1;
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	3b01      	subs	r3, #1
 800e30c:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 800e30e:	e005      	b.n	800e31c <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 800e310:	693b      	ldr	r3, [r7, #16]
 800e312:	085b      	lsrs	r3, r3, #1
 800e314:	613b      	str	r3, [r7, #16]
			ms_byte++;
 800e316:	89fb      	ldrh	r3, [r7, #14]
 800e318:	3301      	adds	r3, #1
 800e31a:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 800e31c:	693b      	ldr	r3, [r7, #16]
 800e31e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800e322:	2b00      	cmp	r3, #0
 800e324:	d1f4      	bne.n	800e310 <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 800e326:	89fb      	ldrh	r3, [r7, #14]
 800e328:	021b      	lsls	r3, r3, #8
 800e32a:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 800e32c:	693b      	ldr	r3, [r7, #16]
 800e32e:	b29b      	uxth	r3, r3
 800e330:	b2db      	uxtb	r3, r3
 800e332:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 800e334:	4413      	add	r3, r2
 800e336:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 800e338:	8afb      	ldrh	r3, [r7, #22]

}
 800e33a:	4618      	mov	r0, r3
 800e33c:	371c      	adds	r7, #28
 800e33e:	46bd      	mov	sp, r7
 800e340:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e344:	4770      	bx	lr

0800e346 <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 800e346:	b480      	push	{r7}
 800e348:	b085      	sub	sp, #20
 800e34a:	af00      	add	r7, sp, #0
 800e34c:	4603      	mov	r3, r0
 800e34e:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 800e350:	2300      	movs	r3, #0
 800e352:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800e354:	88fb      	ldrh	r3, [r7, #6]
 800e356:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 800e358:	88fa      	ldrh	r2, [r7, #6]
 800e35a:	0a12      	lsrs	r2, r2, #8
 800e35c:	b292      	uxth	r2, r2
 800e35e:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800e360:	3301      	adds	r3, #1
 800e362:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 800e364:	68fb      	ldr	r3, [r7, #12]
}
 800e366:	4618      	mov	r0, r3
 800e368:	3714      	adds	r7, #20
 800e36a:	46bd      	mov	sp, r7
 800e36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e370:	4770      	bx	lr
	...

0800e374 <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 800e374:	b580      	push	{r7, lr}
 800e376:	b088      	sub	sp, #32
 800e378:	af00      	add	r7, sp, #0
 800e37a:	60f8      	str	r0, [r7, #12]
 800e37c:	60b9      	str	r1, [r7, #8]
 800e37e:	4613      	mov	r3, r2
 800e380:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 800e382:	2300      	movs	r3, #0
 800e384:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 800e386:	79fb      	ldrb	r3, [r7, #7]
 800e388:	4619      	mov	r1, r3
 800e38a:	68f8      	ldr	r0, [r7, #12]
 800e38c:	f7ff ff91 	bl	800e2b2 <VL53L0X_calc_macro_period_ps>
 800e390:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 800e392:	69bb      	ldr	r3, [r7, #24]
 800e394:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800e398:	4a0a      	ldr	r2, [pc, #40]	; (800e3c4 <VL53L0X_calc_timeout_mclks+0x50>)
 800e39a:	fba2 2303 	umull	r2, r3, r2, r3
 800e39e:	099b      	lsrs	r3, r3, #6
 800e3a0:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 800e3a2:	68bb      	ldr	r3, [r7, #8]
 800e3a4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e3a8:	fb03 f202 	mul.w	r2, r3, r2
		+ (macro_period_ns / 2)) / macro_period_ns);
 800e3ac:	697b      	ldr	r3, [r7, #20]
 800e3ae:	085b      	lsrs	r3, r3, #1
 800e3b0:	441a      	add	r2, r3
	timeout_period_mclks =
 800e3b2:	697b      	ldr	r3, [r7, #20]
 800e3b4:	fbb2 f3f3 	udiv	r3, r2, r3
 800e3b8:	61fb      	str	r3, [r7, #28]

    return timeout_period_mclks;
 800e3ba:	69fb      	ldr	r3, [r7, #28]
}
 800e3bc:	4618      	mov	r0, r3
 800e3be:	3720      	adds	r7, #32
 800e3c0:	46bd      	mov	sp, r7
 800e3c2:	bd80      	pop	{r7, pc}
 800e3c4:	10624dd3 	.word	0x10624dd3

0800e3c8 <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 800e3c8:	b580      	push	{r7, lr}
 800e3ca:	b086      	sub	sp, #24
 800e3cc:	af00      	add	r7, sp, #0
 800e3ce:	6078      	str	r0, [r7, #4]
 800e3d0:	460b      	mov	r3, r1
 800e3d2:	807b      	strh	r3, [r7, #2]
 800e3d4:	4613      	mov	r3, r2
 800e3d6:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 800e3d8:	2300      	movs	r3, #0
 800e3da:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 800e3dc:	787b      	ldrb	r3, [r7, #1]
 800e3de:	4619      	mov	r1, r3
 800e3e0:	6878      	ldr	r0, [r7, #4]
 800e3e2:	f7ff ff66 	bl	800e2b2 <VL53L0X_calc_macro_period_ps>
 800e3e6:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 800e3e8:	693b      	ldr	r3, [r7, #16]
 800e3ea:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800e3ee:	4a0a      	ldr	r2, [pc, #40]	; (800e418 <VL53L0X_calc_timeout_us+0x50>)
 800e3f0:	fba2 2303 	umull	r2, r3, r2, r3
 800e3f4:	099b      	lsrs	r3, r3, #6
 800e3f6:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 800e3f8:	887b      	ldrh	r3, [r7, #2]
 800e3fa:	68fa      	ldr	r2, [r7, #12]
 800e3fc:	fb02 f303 	mul.w	r3, r2, r3
 800e400:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
	actual_timeout_period_us =
 800e404:	4a04      	ldr	r2, [pc, #16]	; (800e418 <VL53L0X_calc_timeout_us+0x50>)
 800e406:	fba2 2303 	umull	r2, r3, r2, r3
 800e40a:	099b      	lsrs	r3, r3, #6
 800e40c:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 800e40e:	697b      	ldr	r3, [r7, #20]
}
 800e410:	4618      	mov	r0, r3
 800e412:	3718      	adds	r7, #24
 800e414:	46bd      	mov	sp, r7
 800e416:	bd80      	pop	{r7, pc}
 800e418:	10624dd3 	.word	0x10624dd3

0800e41c <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 800e41c:	b580      	push	{r7, lr}
 800e41e:	b08c      	sub	sp, #48	; 0x30
 800e420:	af00      	add	r7, sp, #0
 800e422:	60f8      	str	r0, [r7, #12]
 800e424:	460b      	mov	r3, r1
 800e426:	607a      	str	r2, [r7, #4]
 800e428:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800e42a:	2300      	movs	r3, #0
 800e42c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 800e430:	2300      	movs	r3, #0
 800e432:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 800e436:	2300      	movs	r3, #0
 800e438:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 800e43a:	2300      	movs	r3, #0
 800e43c:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 800e43e:	2300      	movs	r3, #0
 800e440:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800e442:	7afb      	ldrb	r3, [r7, #11]
 800e444:	2b00      	cmp	r3, #0
 800e446:	d005      	beq.n	800e454 <get_sequence_step_timeout+0x38>
 800e448:	7afb      	ldrb	r3, [r7, #11]
 800e44a:	2b01      	cmp	r3, #1
 800e44c:	d002      	beq.n	800e454 <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 800e44e:	7afb      	ldrb	r3, [r7, #11]
 800e450:	2b02      	cmp	r3, #2
 800e452:	d128      	bne.n	800e4a6 <get_sequence_step_timeout+0x8a>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800e454:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800e458:	461a      	mov	r2, r3
 800e45a:	2100      	movs	r1, #0
 800e45c:	68f8      	ldr	r0, [r7, #12]
 800e45e:	f7fd f9f9 	bl	800b854 <VL53L0X_GetVcselPulsePeriod>
 800e462:	4603      	mov	r3, r0
 800e464:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 800e468:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	d109      	bne.n	800e484 <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 800e470:	f107 0320 	add.w	r3, r7, #32
 800e474:	461a      	mov	r2, r3
 800e476:	2146      	movs	r1, #70	; 0x46
 800e478:	68f8      	ldr	r0, [r7, #12]
 800e47a:	f001 fd8b 	bl	800ff94 <VL53L0X_RdByte>
 800e47e:	4603      	mov	r3, r0
 800e480:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 800e484:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e488:	b29b      	uxth	r3, r3
 800e48a:	4618      	mov	r0, r3
 800e48c:	f7ff ff5b 	bl	800e346 <VL53L0X_decode_timeout>
 800e490:	4603      	mov	r3, r0
 800e492:	847b      	strh	r3, [r7, #34]	; 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800e494:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800e498:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e49a:	4619      	mov	r1, r3
 800e49c:	68f8      	ldr	r0, [r7, #12]
 800e49e:	f7ff ff93 	bl	800e3c8 <VL53L0X_calc_timeout_us>
 800e4a2:	62b8      	str	r0, [r7, #40]	; 0x28
 800e4a4:	e092      	b.n	800e5cc <get_sequence_step_timeout+0x1b0>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800e4a6:	7afb      	ldrb	r3, [r7, #11]
 800e4a8:	2b03      	cmp	r3, #3
 800e4aa:	d135      	bne.n	800e518 <get_sequence_step_timeout+0xfc>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800e4ac:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800e4b0:	461a      	mov	r2, r3
 800e4b2:	2100      	movs	r1, #0
 800e4b4:	68f8      	ldr	r0, [r7, #12]
 800e4b6:	f7fd f9cd 	bl	800b854 <VL53L0X_GetVcselPulsePeriod>
 800e4ba:	4603      	mov	r3, r0
 800e4bc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 800e4c0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	f040 8081 	bne.w	800e5cc <get_sequence_step_timeout+0x1b0>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800e4ca:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800e4ce:	461a      	mov	r2, r3
 800e4d0:	2100      	movs	r1, #0
 800e4d2:	68f8      	ldr	r0, [r7, #12]
 800e4d4:	f7fd f9be 	bl	800b854 <VL53L0X_GetVcselPulsePeriod>
 800e4d8:	4603      	mov	r3, r0
 800e4da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 800e4de:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	d109      	bne.n	800e4fa <get_sequence_step_timeout+0xde>
				Status = VL53L0X_RdWord(Dev,
 800e4e6:	f107 031e 	add.w	r3, r7, #30
 800e4ea:	461a      	mov	r2, r3
 800e4ec:	2151      	movs	r1, #81	; 0x51
 800e4ee:	68f8      	ldr	r0, [r7, #12]
 800e4f0:	f001 fd7a 	bl	800ffe8 <VL53L0X_RdWord>
 800e4f4:	4603      	mov	r3, r0
 800e4f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 800e4fa:	8bfb      	ldrh	r3, [r7, #30]
 800e4fc:	4618      	mov	r0, r3
 800e4fe:	f7ff ff22 	bl	800e346 <VL53L0X_decode_timeout>
 800e502:	4603      	mov	r3, r0
 800e504:	84fb      	strh	r3, [r7, #38]	; 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800e506:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800e50a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e50c:	4619      	mov	r1, r3
 800e50e:	68f8      	ldr	r0, [r7, #12]
 800e510:	f7ff ff5a 	bl	800e3c8 <VL53L0X_calc_timeout_us>
 800e514:	62b8      	str	r0, [r7, #40]	; 0x28
 800e516:	e059      	b.n	800e5cc <get_sequence_step_timeout+0x1b0>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 800e518:	7afb      	ldrb	r3, [r7, #11]
 800e51a:	2b04      	cmp	r3, #4
 800e51c:	d156      	bne.n	800e5cc <get_sequence_step_timeout+0x1b0>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800e51e:	f107 0314 	add.w	r3, r7, #20
 800e522:	4619      	mov	r1, r3
 800e524:	68f8      	ldr	r0, [r7, #12]
 800e526:	f7fd faa1 	bl	800ba6c <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 800e52a:	2300      	movs	r3, #0
 800e52c:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 800e52e:	7dfb      	ldrb	r3, [r7, #23]
 800e530:	2b00      	cmp	r3, #0
 800e532:	d01d      	beq.n	800e570 <get_sequence_step_timeout+0x154>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800e534:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800e538:	461a      	mov	r2, r3
 800e53a:	2100      	movs	r1, #0
 800e53c:	68f8      	ldr	r0, [r7, #12]
 800e53e:	f7fd f989 	bl	800b854 <VL53L0X_GetVcselPulsePeriod>
 800e542:	4603      	mov	r3, r0
 800e544:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_VCSEL_PERIOD_PRE_RANGE,
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS) */
			if (Status == VL53L0X_ERROR_NONE) {
 800e548:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	d10f      	bne.n	800e570 <get_sequence_step_timeout+0x154>
				Status = VL53L0X_RdWord(Dev,
 800e550:	f107 031e 	add.w	r3, r7, #30
 800e554:	461a      	mov	r2, r3
 800e556:	2151      	movs	r1, #81	; 0x51
 800e558:	68f8      	ldr	r0, [r7, #12]
 800e55a:	f001 fd45 	bl	800ffe8 <VL53L0X_RdWord>
 800e55e:	4603      	mov	r3, r0
 800e560:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 800e564:	8bfb      	ldrh	r3, [r7, #30]
 800e566:	4618      	mov	r0, r3
 800e568:	f7ff feed 	bl	800e346 <VL53L0X_decode_timeout>
 800e56c:	4603      	mov	r3, r0
 800e56e:	84fb      	strh	r3, [r7, #38]	; 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 800e570:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800e574:	2b00      	cmp	r3, #0
 800e576:	d109      	bne.n	800e58c <get_sequence_step_timeout+0x170>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800e578:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800e57c:	461a      	mov	r2, r3
 800e57e:	2101      	movs	r1, #1
 800e580:	68f8      	ldr	r0, [r7, #12]
 800e582:	f7fd f967 	bl	800b854 <VL53L0X_GetVcselPulsePeriod>
 800e586:	4603      	mov	r3, r0
 800e588:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 800e58c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800e590:	2b00      	cmp	r3, #0
 800e592:	d10f      	bne.n	800e5b4 <get_sequence_step_timeout+0x198>
			Status = VL53L0X_RdWord(Dev,
 800e594:	f107 031c 	add.w	r3, r7, #28
 800e598:	461a      	mov	r2, r3
 800e59a:	2171      	movs	r1, #113	; 0x71
 800e59c:	68f8      	ldr	r0, [r7, #12]
 800e59e:	f001 fd23 	bl	800ffe8 <VL53L0X_RdWord>
 800e5a2:	4603      	mov	r3, r0
 800e5a4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 800e5a8:	8bbb      	ldrh	r3, [r7, #28]
 800e5aa:	4618      	mov	r0, r3
 800e5ac:	f7ff fecb 	bl	800e346 <VL53L0X_decode_timeout>
 800e5b0:	4603      	mov	r3, r0
 800e5b2:	84bb      	strh	r3, [r7, #36]	; 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 800e5b4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e5b6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e5b8:	1ad3      	subs	r3, r2, r3
 800e5ba:	84bb      	strh	r3, [r7, #36]	; 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800e5bc:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800e5c0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e5c2:	4619      	mov	r1, r3
 800e5c4:	68f8      	ldr	r0, [r7, #12]
 800e5c6:	f7ff feff 	bl	800e3c8 <VL53L0X_calc_timeout_us>
 800e5ca:	62b8      	str	r0, [r7, #40]	; 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e5d0:	601a      	str	r2, [r3, #0]

	return Status;
 800e5d2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800e5d6:	4618      	mov	r0, r3
 800e5d8:	3730      	adds	r7, #48	; 0x30
 800e5da:	46bd      	mov	sp, r7
 800e5dc:	bd80      	pop	{r7, pc}

0800e5de <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 800e5de:	b580      	push	{r7, lr}
 800e5e0:	b08a      	sub	sp, #40	; 0x28
 800e5e2:	af00      	add	r7, sp, #0
 800e5e4:	60f8      	str	r0, [r7, #12]
 800e5e6:	460b      	mov	r3, r1
 800e5e8:	607a      	str	r2, [r7, #4]
 800e5ea:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800e5ec:	2300      	movs	r3, #0
 800e5ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t MsrcRangeTimeOutMClks;
	uint32_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800e5f2:	7afb      	ldrb	r3, [r7, #11]
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	d005      	beq.n	800e604 <set_sequence_step_timeout+0x26>
 800e5f8:	7afb      	ldrb	r3, [r7, #11]
 800e5fa:	2b01      	cmp	r3, #1
 800e5fc:	d002      	beq.n	800e604 <set_sequence_step_timeout+0x26>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 800e5fe:	7afb      	ldrb	r3, [r7, #11]
 800e600:	2b02      	cmp	r3, #2
 800e602:	d138      	bne.n	800e676 <set_sequence_step_timeout+0x98>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800e604:	f107 031b 	add.w	r3, r7, #27
 800e608:	461a      	mov	r2, r3
 800e60a:	2100      	movs	r1, #0
 800e60c:	68f8      	ldr	r0, [r7, #12]
 800e60e:	f7fd f921 	bl	800b854 <VL53L0X_GetVcselPulsePeriod>
 800e612:	4603      	mov	r3, r0
 800e614:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 800e618:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e61c:	2b00      	cmp	r3, #0
 800e61e:	d11a      	bne.n	800e656 <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 800e620:	7efb      	ldrb	r3, [r7, #27]
 800e622:	461a      	mov	r2, r3
 800e624:	6879      	ldr	r1, [r7, #4]
 800e626:	68f8      	ldr	r0, [r7, #12]
 800e628:	f7ff fea4 	bl	800e374 <VL53L0X_calc_timeout_mclks>
 800e62c:	4603      	mov	r3, r0
 800e62e:	83bb      	strh	r3, [r7, #28]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 800e630:	8bbb      	ldrh	r3, [r7, #28]
 800e632:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e636:	d903      	bls.n	800e640 <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 800e638:	23ff      	movs	r3, #255	; 0xff
 800e63a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e63e:	e004      	b.n	800e64a <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 800e640:	8bbb      	ldrh	r3, [r7, #28]
 800e642:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 800e644:	3b01      	subs	r3, #1
 800e646:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800e64a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e64e:	b29a      	uxth	r2, r3
 800e650:	68fb      	ldr	r3, [r7, #12]
 800e652:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 800e656:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e65a:	2b00      	cmp	r3, #0
 800e65c:	f040 80ab 	bne.w	800e7b6 <set_sequence_step_timeout+0x1d8>
			Status = VL53L0X_WrByte(Dev,
 800e660:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e664:	461a      	mov	r2, r3
 800e666:	2146      	movs	r1, #70	; 0x46
 800e668:	68f8      	ldr	r0, [r7, #12]
 800e66a:	f001 fc11 	bl	800fe90 <VL53L0X_WrByte>
 800e66e:	4603      	mov	r3, r0
 800e670:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 800e674:	e09f      	b.n	800e7b6 <set_sequence_step_timeout+0x1d8>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800e676:	7afb      	ldrb	r3, [r7, #11]
 800e678:	2b03      	cmp	r3, #3
 800e67a:	d135      	bne.n	800e6e8 <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 800e67c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e680:	2b00      	cmp	r3, #0
 800e682:	d11b      	bne.n	800e6bc <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800e684:	f107 031b 	add.w	r3, r7, #27
 800e688:	461a      	mov	r2, r3
 800e68a:	2100      	movs	r1, #0
 800e68c:	68f8      	ldr	r0, [r7, #12]
 800e68e:	f7fd f8e1 	bl	800b854 <VL53L0X_GetVcselPulsePeriod>
 800e692:	4603      	mov	r3, r0
 800e694:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 800e698:	7efb      	ldrb	r3, [r7, #27]
 800e69a:	461a      	mov	r2, r3
 800e69c:	6879      	ldr	r1, [r7, #4]
 800e69e:	68f8      	ldr	r0, [r7, #12]
 800e6a0:	f7ff fe68 	bl	800e374 <VL53L0X_calc_timeout_mclks>
 800e6a4:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 800e6a6:	84bb      	strh	r3, [r7, #36]	; 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 800e6a8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e6aa:	4618      	mov	r0, r3
 800e6ac:	f7ff fe1f 	bl	800e2ee <VL53L0X_encode_timeout>
 800e6b0:	4603      	mov	r3, r0
 800e6b2:	833b      	strh	r3, [r7, #24]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800e6b4:	8b3a      	ldrh	r2, [r7, #24]
 800e6b6:	68fb      	ldr	r3, [r7, #12]
 800e6b8:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800e6bc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e6c0:	2b00      	cmp	r3, #0
 800e6c2:	d108      	bne.n	800e6d6 <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 800e6c4:	8b3b      	ldrh	r3, [r7, #24]
 800e6c6:	461a      	mov	r2, r3
 800e6c8:	2151      	movs	r1, #81	; 0x51
 800e6ca:	68f8      	ldr	r0, [r7, #12]
 800e6cc:	f001 fc04 	bl	800fed8 <VL53L0X_WrWord>
 800e6d0:	4603      	mov	r3, r0
 800e6d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800e6d6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	d16b      	bne.n	800e7b6 <set_sequence_step_timeout+0x1d8>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 800e6de:	68fb      	ldr	r3, [r7, #12]
 800e6e0:	687a      	ldr	r2, [r7, #4]
 800e6e2:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 800e6e6:	e066      	b.n	800e7b6 <set_sequence_step_timeout+0x1d8>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 800e6e8:	7afb      	ldrb	r3, [r7, #11]
 800e6ea:	2b04      	cmp	r3, #4
 800e6ec:	d160      	bne.n	800e7b0 <set_sequence_step_timeout+0x1d2>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 800e6ee:	f107 0310 	add.w	r3, r7, #16
 800e6f2:	4619      	mov	r1, r3
 800e6f4:	68f8      	ldr	r0, [r7, #12]
 800e6f6:	f7fd f9b9 	bl	800ba6c <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 800e6fa:	2300      	movs	r3, #0
 800e6fc:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 800e6fe:	7cfb      	ldrb	r3, [r7, #19]
 800e700:	2b00      	cmp	r3, #0
 800e702:	d01d      	beq.n	800e740 <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800e704:	f107 031b 	add.w	r3, r7, #27
 800e708:	461a      	mov	r2, r3
 800e70a:	2100      	movs	r1, #0
 800e70c:	68f8      	ldr	r0, [r7, #12]
 800e70e:	f7fd f8a1 	bl	800b854 <VL53L0X_GetVcselPulsePeriod>
 800e712:	4603      	mov	r3, r0
 800e714:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS) */
				if (Status == VL53L0X_ERROR_NONE) {
 800e718:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	d10f      	bne.n	800e740 <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 800e720:	f107 0318 	add.w	r3, r7, #24
 800e724:	461a      	mov	r2, r3
 800e726:	2151      	movs	r1, #81	; 0x51
 800e728:	68f8      	ldr	r0, [r7, #12]
 800e72a:	f001 fc5d 	bl	800ffe8 <VL53L0X_RdWord>
 800e72e:	4603      	mov	r3, r0
 800e730:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 800e734:	8b3b      	ldrh	r3, [r7, #24]
 800e736:	4618      	mov	r0, r3
 800e738:	f7ff fe05 	bl	800e346 <VL53L0X_decode_timeout>
 800e73c:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 800e73e:	84bb      	strh	r3, [r7, #36]	; 0x24
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 800e740:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e744:	2b00      	cmp	r3, #0
 800e746:	d109      	bne.n	800e75c <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800e748:	f107 031b 	add.w	r3, r7, #27
 800e74c:	461a      	mov	r2, r3
 800e74e:	2101      	movs	r1, #1
 800e750:	68f8      	ldr	r0, [r7, #12]
 800e752:	f7fd f87f 	bl	800b854 <VL53L0X_GetVcselPulsePeriod>
 800e756:	4603      	mov	r3, r0
 800e758:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
						&CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 800e75c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e760:	2b00      	cmp	r3, #0
 800e762:	d128      	bne.n	800e7b6 <set_sequence_step_timeout+0x1d8>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 800e764:	7efb      	ldrb	r3, [r7, #27]
 800e766:	461a      	mov	r2, r3
 800e768:	6879      	ldr	r1, [r7, #4]
 800e76a:	68f8      	ldr	r0, [r7, #12]
 800e76c:	f7ff fe02 	bl	800e374 <VL53L0X_calc_timeout_mclks>
 800e770:	6238      	str	r0, [r7, #32]
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 800e772:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e774:	6a3a      	ldr	r2, [r7, #32]
 800e776:	4413      	add	r3, r2
 800e778:	623b      	str	r3, [r7, #32]

				FinalRangeEncodedTimeOut =
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);
 800e77a:	6a38      	ldr	r0, [r7, #32]
 800e77c:	f7ff fdb7 	bl	800e2ee <VL53L0X_encode_timeout>
 800e780:	4603      	mov	r3, r0
 800e782:	83fb      	strh	r3, [r7, #30]

				if (Status == VL53L0X_ERROR_NONE) {
 800e784:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e788:	2b00      	cmp	r3, #0
 800e78a:	d108      	bne.n	800e79e <set_sequence_step_timeout+0x1c0>
					Status = VL53L0X_WrWord(Dev, 0x71,
 800e78c:	8bfb      	ldrh	r3, [r7, #30]
 800e78e:	461a      	mov	r2, r3
 800e790:	2171      	movs	r1, #113	; 0x71
 800e792:	68f8      	ldr	r0, [r7, #12]
 800e794:	f001 fba0 	bl	800fed8 <VL53L0X_WrWord>
 800e798:	4603      	mov	r3, r0
 800e79a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 800e79e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e7a2:	2b00      	cmp	r3, #0
 800e7a4:	d107      	bne.n	800e7b6 <set_sequence_step_timeout+0x1d8>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 800e7a6:	68fb      	ldr	r3, [r7, #12]
 800e7a8:	687a      	ldr	r2, [r7, #4]
 800e7aa:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 800e7ae:	e002      	b.n	800e7b6 <set_sequence_step_timeout+0x1d8>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800e7b0:	23fc      	movs	r3, #252	; 0xfc
 800e7b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	}
	return Status;
 800e7b6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800e7ba:	4618      	mov	r0, r3
 800e7bc:	3728      	adds	r7, #40	; 0x28
 800e7be:	46bd      	mov	sp, r7
 800e7c0:	bd80      	pop	{r7, pc}

0800e7c2 <VL53L0X_set_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_set_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 800e7c2:	b580      	push	{r7, lr}
 800e7c4:	b08a      	sub	sp, #40	; 0x28
 800e7c6:	af00      	add	r7, sp, #0
 800e7c8:	6078      	str	r0, [r7, #4]
 800e7ca:	460b      	mov	r3, r1
 800e7cc:	70fb      	strb	r3, [r7, #3]
 800e7ce:	4613      	mov	r3, r2
 800e7d0:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800e7d2:	2300      	movs	r3, #0
 800e7d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t vcsel_period_reg;
	uint8_t MinPreVcselPeriodPCLK = 12;
 800e7d8:	230c      	movs	r3, #12
 800e7da:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t MaxPreVcselPeriodPCLK = 18;
 800e7de:	2312      	movs	r3, #18
 800e7e0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t MinFinalVcselPeriodPCLK = 8;
 800e7e4:	2308      	movs	r3, #8
 800e7e6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t MaxFinalVcselPeriodPCLK = 14;
 800e7ea:	230e      	movs	r3, #14
 800e7ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t MeasurementTimingBudgetMicroSeconds;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t PreRangeTimeoutMicroSeconds;
	uint32_t MsrcTimeoutMicroSeconds;
	uint8_t PhaseCalInt = 0;
 800e7f0:	2300      	movs	r3, #0
 800e7f2:	73fb      	strb	r3, [r7, #15]

	/* Check if valid clock period requested */

	if ((VCSELPulsePeriodPCLK % 2) != 0) {
 800e7f4:	78bb      	ldrb	r3, [r7, #2]
 800e7f6:	f003 0301 	and.w	r3, r3, #1
 800e7fa:	b2db      	uxtb	r3, r3
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	d003      	beq.n	800e808 <VL53L0X_set_vcsel_pulse_period+0x46>
		/* Value must be an even number */
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800e800:	23fc      	movs	r3, #252	; 0xfc
 800e802:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e806:	e020      	b.n	800e84a <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE &&
 800e808:	78fb      	ldrb	r3, [r7, #3]
 800e80a:	2b00      	cmp	r3, #0
 800e80c:	d10d      	bne.n	800e82a <VL53L0X_set_vcsel_pulse_period+0x68>
 800e80e:	78ba      	ldrb	r2, [r7, #2]
 800e810:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e814:	429a      	cmp	r2, r3
 800e816:	d304      	bcc.n	800e822 <VL53L0X_set_vcsel_pulse_period+0x60>
		(VCSELPulsePeriodPCLK < MinPreVcselPeriodPCLK ||
 800e818:	78ba      	ldrb	r2, [r7, #2]
 800e81a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800e81e:	429a      	cmp	r2, r3
 800e820:	d903      	bls.n	800e82a <VL53L0X_set_vcsel_pulse_period+0x68>
		VCSELPulsePeriodPCLK > MaxPreVcselPeriodPCLK)) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800e822:	23fc      	movs	r3, #252	; 0xfc
 800e824:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e828:	e00f      	b.n	800e84a <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE &&
 800e82a:	78fb      	ldrb	r3, [r7, #3]
 800e82c:	2b01      	cmp	r3, #1
 800e82e:	d10c      	bne.n	800e84a <VL53L0X_set_vcsel_pulse_period+0x88>
 800e830:	78ba      	ldrb	r2, [r7, #2]
 800e832:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e836:	429a      	cmp	r2, r3
 800e838:	d304      	bcc.n	800e844 <VL53L0X_set_vcsel_pulse_period+0x82>
		(VCSELPulsePeriodPCLK < MinFinalVcselPeriodPCLK ||
 800e83a:	78ba      	ldrb	r2, [r7, #2]
 800e83c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e840:	429a      	cmp	r2, r3
 800e842:	d902      	bls.n	800e84a <VL53L0X_set_vcsel_pulse_period+0x88>
		 VCSELPulsePeriodPCLK > MaxFinalVcselPeriodPCLK)) {

		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800e844:	23fc      	movs	r3, #252	; 0xfc
 800e846:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Apply specific settings for the requested clock period */

	if (Status != VL53L0X_ERROR_NONE)
 800e84a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e84e:	2b00      	cmp	r3, #0
 800e850:	d002      	beq.n	800e858 <VL53L0X_set_vcsel_pulse_period+0x96>
		return Status;
 800e852:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e856:	e239      	b.n	800eccc <VL53L0X_set_vcsel_pulse_period+0x50a>


	if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE) {
 800e858:	78fb      	ldrb	r3, [r7, #3]
 800e85a:	2b00      	cmp	r3, #0
 800e85c:	d150      	bne.n	800e900 <VL53L0X_set_vcsel_pulse_period+0x13e>

		/* Set phase check limits */
		if (VCSELPulsePeriodPCLK == 12) {
 800e85e:	78bb      	ldrb	r3, [r7, #2]
 800e860:	2b0c      	cmp	r3, #12
 800e862:	d110      	bne.n	800e886 <VL53L0X_set_vcsel_pulse_period+0xc4>

			Status = VL53L0X_WrByte(Dev,
 800e864:	2218      	movs	r2, #24
 800e866:	2157      	movs	r1, #87	; 0x57
 800e868:	6878      	ldr	r0, [r7, #4]
 800e86a:	f001 fb11 	bl	800fe90 <VL53L0X_WrByte>
 800e86e:	4603      	mov	r3, r0
 800e870:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x18);
			Status = VL53L0X_WrByte(Dev,
 800e874:	2208      	movs	r2, #8
 800e876:	2156      	movs	r1, #86	; 0x56
 800e878:	6878      	ldr	r0, [r7, #4]
 800e87a:	f001 fb09 	bl	800fe90 <VL53L0X_WrByte>
 800e87e:	4603      	mov	r3, r0
 800e880:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e884:	e17f      	b.n	800eb86 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 14) {
 800e886:	78bb      	ldrb	r3, [r7, #2]
 800e888:	2b0e      	cmp	r3, #14
 800e88a:	d110      	bne.n	800e8ae <VL53L0X_set_vcsel_pulse_period+0xec>

			Status = VL53L0X_WrByte(Dev,
 800e88c:	2230      	movs	r2, #48	; 0x30
 800e88e:	2157      	movs	r1, #87	; 0x57
 800e890:	6878      	ldr	r0, [r7, #4]
 800e892:	f001 fafd 	bl	800fe90 <VL53L0X_WrByte>
 800e896:	4603      	mov	r3, r0
 800e898:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x30);
			Status = VL53L0X_WrByte(Dev,
 800e89c:	2208      	movs	r2, #8
 800e89e:	2156      	movs	r1, #86	; 0x56
 800e8a0:	6878      	ldr	r0, [r7, #4]
 800e8a2:	f001 faf5 	bl	800fe90 <VL53L0X_WrByte>
 800e8a6:	4603      	mov	r3, r0
 800e8a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e8ac:	e16b      	b.n	800eb86 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 16) {
 800e8ae:	78bb      	ldrb	r3, [r7, #2]
 800e8b0:	2b10      	cmp	r3, #16
 800e8b2:	d110      	bne.n	800e8d6 <VL53L0X_set_vcsel_pulse_period+0x114>

			Status = VL53L0X_WrByte(Dev,
 800e8b4:	2240      	movs	r2, #64	; 0x40
 800e8b6:	2157      	movs	r1, #87	; 0x57
 800e8b8:	6878      	ldr	r0, [r7, #4]
 800e8ba:	f001 fae9 	bl	800fe90 <VL53L0X_WrByte>
 800e8be:	4603      	mov	r3, r0
 800e8c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x40);
			Status = VL53L0X_WrByte(Dev,
 800e8c4:	2208      	movs	r2, #8
 800e8c6:	2156      	movs	r1, #86	; 0x56
 800e8c8:	6878      	ldr	r0, [r7, #4]
 800e8ca:	f001 fae1 	bl	800fe90 <VL53L0X_WrByte>
 800e8ce:	4603      	mov	r3, r0
 800e8d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e8d4:	e157      	b.n	800eb86 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 18) {
 800e8d6:	78bb      	ldrb	r3, [r7, #2]
 800e8d8:	2b12      	cmp	r3, #18
 800e8da:	f040 8154 	bne.w	800eb86 <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 800e8de:	2250      	movs	r2, #80	; 0x50
 800e8e0:	2157      	movs	r1, #87	; 0x57
 800e8e2:	6878      	ldr	r0, [r7, #4]
 800e8e4:	f001 fad4 	bl	800fe90 <VL53L0X_WrByte>
 800e8e8:	4603      	mov	r3, r0
 800e8ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x50);
			Status = VL53L0X_WrByte(Dev,
 800e8ee:	2208      	movs	r2, #8
 800e8f0:	2156      	movs	r1, #86	; 0x56
 800e8f2:	6878      	ldr	r0, [r7, #4]
 800e8f4:	f001 facc 	bl	800fe90 <VL53L0X_WrByte>
 800e8f8:	4603      	mov	r3, r0
 800e8fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e8fe:	e142      	b.n	800eb86 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		}
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE) {
 800e900:	78fb      	ldrb	r3, [r7, #3]
 800e902:	2b01      	cmp	r3, #1
 800e904:	f040 813f 	bne.w	800eb86 <VL53L0X_set_vcsel_pulse_period+0x3c4>

		if (VCSELPulsePeriodPCLK == 8) {
 800e908:	78bb      	ldrb	r3, [r7, #2]
 800e90a:	2b08      	cmp	r3, #8
 800e90c:	d14c      	bne.n	800e9a8 <VL53L0X_set_vcsel_pulse_period+0x1e6>

			Status = VL53L0X_WrByte(Dev,
 800e90e:	2210      	movs	r2, #16
 800e910:	2148      	movs	r1, #72	; 0x48
 800e912:	6878      	ldr	r0, [r7, #4]
 800e914:	f001 fabc 	bl	800fe90 <VL53L0X_WrByte>
 800e918:	4603      	mov	r3, r0
 800e91a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x10);
			Status = VL53L0X_WrByte(Dev,
 800e91e:	2208      	movs	r2, #8
 800e920:	2147      	movs	r1, #71	; 0x47
 800e922:	6878      	ldr	r0, [r7, #4]
 800e924:	f001 fab4 	bl	800fe90 <VL53L0X_WrByte>
 800e928:	4603      	mov	r3, r0
 800e92a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800e92e:	2202      	movs	r2, #2
 800e930:	2132      	movs	r1, #50	; 0x32
 800e932:	6878      	ldr	r0, [r7, #4]
 800e934:	f001 faac 	bl	800fe90 <VL53L0X_WrByte>
 800e938:	4603      	mov	r3, r0
 800e93a:	461a      	mov	r2, r3
 800e93c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e940:	4313      	orrs	r3, r2
 800e942:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x02);
			Status |= VL53L0X_WrByte(Dev,
 800e946:	220c      	movs	r2, #12
 800e948:	2130      	movs	r1, #48	; 0x30
 800e94a:	6878      	ldr	r0, [r7, #4]
 800e94c:	f001 faa0 	bl	800fe90 <VL53L0X_WrByte>
 800e950:	4603      	mov	r3, r0
 800e952:	461a      	mov	r2, r3
 800e954:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e958:	4313      	orrs	r3, r2
 800e95a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x0C);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800e95e:	2201      	movs	r2, #1
 800e960:	21ff      	movs	r1, #255	; 0xff
 800e962:	6878      	ldr	r0, [r7, #4]
 800e964:	f001 fa94 	bl	800fe90 <VL53L0X_WrByte>
 800e968:	4603      	mov	r3, r0
 800e96a:	461a      	mov	r2, r3
 800e96c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e970:	4313      	orrs	r3, r2
 800e972:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800e976:	2230      	movs	r2, #48	; 0x30
 800e978:	2130      	movs	r1, #48	; 0x30
 800e97a:	6878      	ldr	r0, [r7, #4]
 800e97c:	f001 fa88 	bl	800fe90 <VL53L0X_WrByte>
 800e980:	4603      	mov	r3, r0
 800e982:	461a      	mov	r2, r3
 800e984:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e988:	4313      	orrs	r3, r2
 800e98a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x30);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800e98e:	2200      	movs	r2, #0
 800e990:	21ff      	movs	r1, #255	; 0xff
 800e992:	6878      	ldr	r0, [r7, #4]
 800e994:	f001 fa7c 	bl	800fe90 <VL53L0X_WrByte>
 800e998:	4603      	mov	r3, r0
 800e99a:	461a      	mov	r2, r3
 800e99c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e9a0:	4313      	orrs	r3, r2
 800e9a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e9a6:	e0ee      	b.n	800eb86 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 10) {
 800e9a8:	78bb      	ldrb	r3, [r7, #2]
 800e9aa:	2b0a      	cmp	r3, #10
 800e9ac:	d14c      	bne.n	800ea48 <VL53L0X_set_vcsel_pulse_period+0x286>

			Status = VL53L0X_WrByte(Dev,
 800e9ae:	2228      	movs	r2, #40	; 0x28
 800e9b0:	2148      	movs	r1, #72	; 0x48
 800e9b2:	6878      	ldr	r0, [r7, #4]
 800e9b4:	f001 fa6c 	bl	800fe90 <VL53L0X_WrByte>
 800e9b8:	4603      	mov	r3, r0
 800e9ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x28);
			Status = VL53L0X_WrByte(Dev,
 800e9be:	2208      	movs	r2, #8
 800e9c0:	2147      	movs	r1, #71	; 0x47
 800e9c2:	6878      	ldr	r0, [r7, #4]
 800e9c4:	f001 fa64 	bl	800fe90 <VL53L0X_WrByte>
 800e9c8:	4603      	mov	r3, r0
 800e9ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800e9ce:	2203      	movs	r2, #3
 800e9d0:	2132      	movs	r1, #50	; 0x32
 800e9d2:	6878      	ldr	r0, [r7, #4]
 800e9d4:	f001 fa5c 	bl	800fe90 <VL53L0X_WrByte>
 800e9d8:	4603      	mov	r3, r0
 800e9da:	461a      	mov	r2, r3
 800e9dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e9e0:	4313      	orrs	r3, r2
 800e9e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800e9e6:	2209      	movs	r2, #9
 800e9e8:	2130      	movs	r1, #48	; 0x30
 800e9ea:	6878      	ldr	r0, [r7, #4]
 800e9ec:	f001 fa50 	bl	800fe90 <VL53L0X_WrByte>
 800e9f0:	4603      	mov	r3, r0
 800e9f2:	461a      	mov	r2, r3
 800e9f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e9f8:	4313      	orrs	r3, r2
 800e9fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x09);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800e9fe:	2201      	movs	r2, #1
 800ea00:	21ff      	movs	r1, #255	; 0xff
 800ea02:	6878      	ldr	r0, [r7, #4]
 800ea04:	f001 fa44 	bl	800fe90 <VL53L0X_WrByte>
 800ea08:	4603      	mov	r3, r0
 800ea0a:	461a      	mov	r2, r3
 800ea0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ea10:	4313      	orrs	r3, r2
 800ea12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800ea16:	2220      	movs	r2, #32
 800ea18:	2130      	movs	r1, #48	; 0x30
 800ea1a:	6878      	ldr	r0, [r7, #4]
 800ea1c:	f001 fa38 	bl	800fe90 <VL53L0X_WrByte>
 800ea20:	4603      	mov	r3, r0
 800ea22:	461a      	mov	r2, r3
 800ea24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ea28:	4313      	orrs	r3, r2
 800ea2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800ea2e:	2200      	movs	r2, #0
 800ea30:	21ff      	movs	r1, #255	; 0xff
 800ea32:	6878      	ldr	r0, [r7, #4]
 800ea34:	f001 fa2c 	bl	800fe90 <VL53L0X_WrByte>
 800ea38:	4603      	mov	r3, r0
 800ea3a:	461a      	mov	r2, r3
 800ea3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ea40:	4313      	orrs	r3, r2
 800ea42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ea46:	e09e      	b.n	800eb86 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 12) {
 800ea48:	78bb      	ldrb	r3, [r7, #2]
 800ea4a:	2b0c      	cmp	r3, #12
 800ea4c:	d14c      	bne.n	800eae8 <VL53L0X_set_vcsel_pulse_period+0x326>

			Status = VL53L0X_WrByte(Dev,
 800ea4e:	2238      	movs	r2, #56	; 0x38
 800ea50:	2148      	movs	r1, #72	; 0x48
 800ea52:	6878      	ldr	r0, [r7, #4]
 800ea54:	f001 fa1c 	bl	800fe90 <VL53L0X_WrByte>
 800ea58:	4603      	mov	r3, r0
 800ea5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x38);
			Status = VL53L0X_WrByte(Dev,
 800ea5e:	2208      	movs	r2, #8
 800ea60:	2147      	movs	r1, #71	; 0x47
 800ea62:	6878      	ldr	r0, [r7, #4]
 800ea64:	f001 fa14 	bl	800fe90 <VL53L0X_WrByte>
 800ea68:	4603      	mov	r3, r0
 800ea6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800ea6e:	2203      	movs	r2, #3
 800ea70:	2132      	movs	r1, #50	; 0x32
 800ea72:	6878      	ldr	r0, [r7, #4]
 800ea74:	f001 fa0c 	bl	800fe90 <VL53L0X_WrByte>
 800ea78:	4603      	mov	r3, r0
 800ea7a:	461a      	mov	r2, r3
 800ea7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ea80:	4313      	orrs	r3, r2
 800ea82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800ea86:	2208      	movs	r2, #8
 800ea88:	2130      	movs	r1, #48	; 0x30
 800ea8a:	6878      	ldr	r0, [r7, #4]
 800ea8c:	f001 fa00 	bl	800fe90 <VL53L0X_WrByte>
 800ea90:	4603      	mov	r3, r0
 800ea92:	461a      	mov	r2, r3
 800ea94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ea98:	4313      	orrs	r3, r2
 800ea9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x08);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800ea9e:	2201      	movs	r2, #1
 800eaa0:	21ff      	movs	r1, #255	; 0xff
 800eaa2:	6878      	ldr	r0, [r7, #4]
 800eaa4:	f001 f9f4 	bl	800fe90 <VL53L0X_WrByte>
 800eaa8:	4603      	mov	r3, r0
 800eaaa:	461a      	mov	r2, r3
 800eaac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eab0:	4313      	orrs	r3, r2
 800eab2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800eab6:	2220      	movs	r2, #32
 800eab8:	2130      	movs	r1, #48	; 0x30
 800eaba:	6878      	ldr	r0, [r7, #4]
 800eabc:	f001 f9e8 	bl	800fe90 <VL53L0X_WrByte>
 800eac0:	4603      	mov	r3, r0
 800eac2:	461a      	mov	r2, r3
 800eac4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eac8:	4313      	orrs	r3, r2
 800eaca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800eace:	2200      	movs	r2, #0
 800ead0:	21ff      	movs	r1, #255	; 0xff
 800ead2:	6878      	ldr	r0, [r7, #4]
 800ead4:	f001 f9dc 	bl	800fe90 <VL53L0X_WrByte>
 800ead8:	4603      	mov	r3, r0
 800eada:	461a      	mov	r2, r3
 800eadc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eae0:	4313      	orrs	r3, r2
 800eae2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800eae6:	e04e      	b.n	800eb86 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 14) {
 800eae8:	78bb      	ldrb	r3, [r7, #2]
 800eaea:	2b0e      	cmp	r3, #14
 800eaec:	d14b      	bne.n	800eb86 <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 800eaee:	2248      	movs	r2, #72	; 0x48
 800eaf0:	2148      	movs	r1, #72	; 0x48
 800eaf2:	6878      	ldr	r0, [r7, #4]
 800eaf4:	f001 f9cc 	bl	800fe90 <VL53L0X_WrByte>
 800eaf8:	4603      	mov	r3, r0
 800eafa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x048);
			Status = VL53L0X_WrByte(Dev,
 800eafe:	2208      	movs	r2, #8
 800eb00:	2147      	movs	r1, #71	; 0x47
 800eb02:	6878      	ldr	r0, [r7, #4]
 800eb04:	f001 f9c4 	bl	800fe90 <VL53L0X_WrByte>
 800eb08:	4603      	mov	r3, r0
 800eb0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800eb0e:	2203      	movs	r2, #3
 800eb10:	2132      	movs	r1, #50	; 0x32
 800eb12:	6878      	ldr	r0, [r7, #4]
 800eb14:	f001 f9bc 	bl	800fe90 <VL53L0X_WrByte>
 800eb18:	4603      	mov	r3, r0
 800eb1a:	461a      	mov	r2, r3
 800eb1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eb20:	4313      	orrs	r3, r2
 800eb22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800eb26:	2207      	movs	r2, #7
 800eb28:	2130      	movs	r1, #48	; 0x30
 800eb2a:	6878      	ldr	r0, [r7, #4]
 800eb2c:	f001 f9b0 	bl	800fe90 <VL53L0X_WrByte>
 800eb30:	4603      	mov	r3, r0
 800eb32:	461a      	mov	r2, r3
 800eb34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eb38:	4313      	orrs	r3, r2
 800eb3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x07);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800eb3e:	2201      	movs	r2, #1
 800eb40:	21ff      	movs	r1, #255	; 0xff
 800eb42:	6878      	ldr	r0, [r7, #4]
 800eb44:	f001 f9a4 	bl	800fe90 <VL53L0X_WrByte>
 800eb48:	4603      	mov	r3, r0
 800eb4a:	461a      	mov	r2, r3
 800eb4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eb50:	4313      	orrs	r3, r2
 800eb52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800eb56:	2220      	movs	r2, #32
 800eb58:	2130      	movs	r1, #48	; 0x30
 800eb5a:	6878      	ldr	r0, [r7, #4]
 800eb5c:	f001 f998 	bl	800fe90 <VL53L0X_WrByte>
 800eb60:	4603      	mov	r3, r0
 800eb62:	461a      	mov	r2, r3
 800eb64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eb68:	4313      	orrs	r3, r2
 800eb6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800eb6e:	2200      	movs	r2, #0
 800eb70:	21ff      	movs	r1, #255	; 0xff
 800eb72:	6878      	ldr	r0, [r7, #4]
 800eb74:	f001 f98c 	bl	800fe90 <VL53L0X_WrByte>
 800eb78:	4603      	mov	r3, r0
 800eb7a:	461a      	mov	r2, r3
 800eb7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eb80:	4313      	orrs	r3, r2
 800eb82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}


	/* Re-calculate and apply timeouts, in macro periods */

	if (Status == VL53L0X_ERROR_NONE) {
 800eb86:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800eb8a:	2b00      	cmp	r3, #0
 800eb8c:	d17f      	bne.n	800ec8e <VL53L0X_set_vcsel_pulse_period+0x4cc>
		vcsel_period_reg = VL53L0X_encode_vcsel_period((uint8_t)
 800eb8e:	78bb      	ldrb	r3, [r7, #2]
 800eb90:	4618      	mov	r0, r3
 800eb92:	f7fe fe37 	bl	800d804 <VL53L0X_encode_vcsel_period>
 800eb96:	4603      	mov	r3, r0
 800eb98:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		* using the new VCSEL period.
		*
		* For the MSRC timeout, the same applies - this timeout being
		* dependant on the pre-range vcsel period.
		*/
		switch (VcselPeriodType) {
 800eb9c:	78fb      	ldrb	r3, [r7, #3]
 800eb9e:	2b00      	cmp	r3, #0
 800eba0:	d002      	beq.n	800eba8 <VL53L0X_set_vcsel_pulse_period+0x3e6>
 800eba2:	2b01      	cmp	r3, #1
 800eba4:	d045      	beq.n	800ec32 <VL53L0X_set_vcsel_pulse_period+0x470>
 800eba6:	e06e      	b.n	800ec86 <VL53L0X_set_vcsel_pulse_period+0x4c4>
		case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
			Status = get_sequence_step_timeout(Dev,
 800eba8:	f107 0314 	add.w	r3, r7, #20
 800ebac:	461a      	mov	r2, r3
 800ebae:	2103      	movs	r1, #3
 800ebb0:	6878      	ldr	r0, [r7, #4]
 800ebb2:	f7ff fc33 	bl	800e41c <get_sequence_step_timeout>
 800ebb6:	4603      	mov	r3, r0
 800ebb8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800ebbc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ebc0:	2b00      	cmp	r3, #0
 800ebc2:	d109      	bne.n	800ebd8 <VL53L0X_set_vcsel_pulse_period+0x416>
				Status = get_sequence_step_timeout(Dev,
 800ebc4:	f107 0310 	add.w	r3, r7, #16
 800ebc8:	461a      	mov	r2, r3
 800ebca:	2102      	movs	r1, #2
 800ebcc:	6878      	ldr	r0, [r7, #4]
 800ebce:	f7ff fc25 	bl	800e41c <get_sequence_step_timeout>
 800ebd2:	4603      	mov	r3, r0
 800ebd4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					&MsrcTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800ebd8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ebdc:	2b00      	cmp	r3, #0
 800ebde:	d109      	bne.n	800ebf4 <VL53L0X_set_vcsel_pulse_period+0x432>
				Status = VL53L0X_WrByte(Dev,
 800ebe0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800ebe4:	461a      	mov	r2, r3
 800ebe6:	2150      	movs	r1, #80	; 0x50
 800ebe8:	6878      	ldr	r0, [r7, #4]
 800ebea:	f001 f951 	bl	800fe90 <VL53L0X_WrByte>
 800ebee:	4603      	mov	r3, r0
 800ebf0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 800ebf4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ebf8:	2b00      	cmp	r3, #0
 800ebfa:	d108      	bne.n	800ec0e <VL53L0X_set_vcsel_pulse_period+0x44c>
				Status = set_sequence_step_timeout(Dev,
 800ebfc:	697b      	ldr	r3, [r7, #20]
 800ebfe:	461a      	mov	r2, r3
 800ec00:	2103      	movs	r1, #3
 800ec02:	6878      	ldr	r0, [r7, #4]
 800ec04:	f7ff fceb 	bl	800e5de <set_sequence_step_timeout>
 800ec08:	4603      	mov	r3, r0
 800ec0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_PRE_RANGE,
					PreRangeTimeoutMicroSeconds);


			if (Status == VL53L0X_ERROR_NONE)
 800ec0e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ec12:	2b00      	cmp	r3, #0
 800ec14:	d108      	bne.n	800ec28 <VL53L0X_set_vcsel_pulse_period+0x466>
				Status = set_sequence_step_timeout(Dev,
 800ec16:	693b      	ldr	r3, [r7, #16]
 800ec18:	461a      	mov	r2, r3
 800ec1a:	2102      	movs	r1, #2
 800ec1c:	6878      	ldr	r0, [r7, #4]
 800ec1e:	f7ff fcde 	bl	800e5de <set_sequence_step_timeout>
 800ec22:	4603      	mov	r3, r0
 800ec24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					MsrcTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	78ba      	ldrb	r2, [r7, #2]
 800ec2c:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				Dev,
				PreRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 800ec30:	e02e      	b.n	800ec90 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
			Status = get_sequence_step_timeout(Dev,
 800ec32:	f107 0318 	add.w	r3, r7, #24
 800ec36:	461a      	mov	r2, r3
 800ec38:	2104      	movs	r1, #4
 800ec3a:	6878      	ldr	r0, [r7, #4]
 800ec3c:	f7ff fbee 	bl	800e41c <get_sequence_step_timeout>
 800ec40:	4603      	mov	r3, r0
 800ec42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_FINAL_RANGE,
				&FinalRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800ec46:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ec4a:	2b00      	cmp	r3, #0
 800ec4c:	d109      	bne.n	800ec62 <VL53L0X_set_vcsel_pulse_period+0x4a0>
				Status = VL53L0X_WrByte(Dev,
 800ec4e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800ec52:	461a      	mov	r2, r3
 800ec54:	2170      	movs	r1, #112	; 0x70
 800ec56:	6878      	ldr	r0, [r7, #4]
 800ec58:	f001 f91a 	bl	800fe90 <VL53L0X_WrByte>
 800ec5c:	4603      	mov	r3, r0
 800ec5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 800ec62:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ec66:	2b00      	cmp	r3, #0
 800ec68:	d108      	bne.n	800ec7c <VL53L0X_set_vcsel_pulse_period+0x4ba>
				Status = set_sequence_step_timeout(Dev,
 800ec6a:	69bb      	ldr	r3, [r7, #24]
 800ec6c:	461a      	mov	r2, r3
 800ec6e:	2104      	movs	r1, #4
 800ec70:	6878      	ldr	r0, [r7, #4]
 800ec72:	f7ff fcb4 	bl	800e5de <set_sequence_step_timeout>
 800ec76:	4603      	mov	r3, r0
 800ec78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					FinalRangeTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	78ba      	ldrb	r2, [r7, #2]
 800ec80:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				Dev,
				FinalRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 800ec84:	e004      	b.n	800ec90 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ec86:	23fc      	movs	r3, #252	; 0xfc
 800ec88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ec8c:	e000      	b.n	800ec90 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		}
	}
 800ec8e:	bf00      	nop

	/* Finally, the timing budget must be re-applied */
	if (Status == VL53L0X_ERROR_NONE) {
 800ec90:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ec94:	2b00      	cmp	r3, #0
 800ec96:	d109      	bne.n	800ecac <VL53L0X_set_vcsel_pulse_period+0x4ea>
		VL53L0X_GETPARAMETERFIELD(Dev,
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	695b      	ldr	r3, [r3, #20]
 800ec9c:	61fb      	str	r3, [r7, #28]
			MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);

		Status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 800ec9e:	69f9      	ldr	r1, [r7, #28]
 800eca0:	6878      	ldr	r0, [r7, #4]
 800eca2:	f7fc fd99 	bl	800b7d8 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 800eca6:	4603      	mov	r3, r0
 800eca8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Perform the phase calibration. This is needed after changing on
	 * vcsel period.
	 * get_data_enable = 0, restore_config = 1 */
	if (Status == VL53L0X_ERROR_NONE)
 800ecac:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ecb0:	2b00      	cmp	r3, #0
 800ecb2:	d109      	bne.n	800ecc8 <VL53L0X_set_vcsel_pulse_period+0x506>
		Status = VL53L0X_perform_phase_calibration(
 800ecb4:	f107 010f 	add.w	r1, r7, #15
 800ecb8:	2301      	movs	r3, #1
 800ecba:	2200      	movs	r2, #0
 800ecbc:	6878      	ldr	r0, [r7, #4]
 800ecbe:	f7fe fc99 	bl	800d5f4 <VL53L0X_perform_phase_calibration>
 800ecc2:	4603      	mov	r3, r0
 800ecc4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Dev, &PhaseCalInt, 0, 1);

	return Status;
 800ecc8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800eccc:	4618      	mov	r0, r3
 800ecce:	3728      	adds	r7, #40	; 0x28
 800ecd0:	46bd      	mov	sp, r7
 800ecd2:	bd80      	pop	{r7, pc}

0800ecd4 <VL53L0X_get_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 800ecd4:	b580      	push	{r7, lr}
 800ecd6:	b086      	sub	sp, #24
 800ecd8:	af00      	add	r7, sp, #0
 800ecda:	60f8      	str	r0, [r7, #12]
 800ecdc:	460b      	mov	r3, r1
 800ecde:	607a      	str	r2, [r7, #4]
 800ece0:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ece2:	2300      	movs	r3, #0
 800ece4:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 800ece6:	7afb      	ldrb	r3, [r7, #11]
 800ece8:	2b00      	cmp	r3, #0
 800ecea:	d002      	beq.n	800ecf2 <VL53L0X_get_vcsel_pulse_period+0x1e>
 800ecec:	2b01      	cmp	r3, #1
 800ecee:	d00a      	beq.n	800ed06 <VL53L0X_get_vcsel_pulse_period+0x32>
 800ecf0:	e013      	b.n	800ed1a <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800ecf2:	f107 0316 	add.w	r3, r7, #22
 800ecf6:	461a      	mov	r2, r3
 800ecf8:	2150      	movs	r1, #80	; 0x50
 800ecfa:	68f8      	ldr	r0, [r7, #12]
 800ecfc:	f001 f94a 	bl	800ff94 <VL53L0X_RdByte>
 800ed00:	4603      	mov	r3, r0
 800ed02:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800ed04:	e00b      	b.n	800ed1e <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800ed06:	f107 0316 	add.w	r3, r7, #22
 800ed0a:	461a      	mov	r2, r3
 800ed0c:	2170      	movs	r1, #112	; 0x70
 800ed0e:	68f8      	ldr	r0, [r7, #12]
 800ed10:	f001 f940 	bl	800ff94 <VL53L0X_RdByte>
 800ed14:	4603      	mov	r3, r0
 800ed16:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800ed18:	e001      	b.n	800ed1e <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ed1a:	23fc      	movs	r3, #252	; 0xfc
 800ed1c:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 800ed1e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ed22:	2b00      	cmp	r3, #0
 800ed24:	d107      	bne.n	800ed36 <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 800ed26:	7dbb      	ldrb	r3, [r7, #22]
 800ed28:	4618      	mov	r0, r3
 800ed2a:	f7fe fd58 	bl	800d7de <VL53L0X_decode_vcsel_period>
 800ed2e:	4603      	mov	r3, r0
 800ed30:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	701a      	strb	r2, [r3, #0]

	return Status;
 800ed36:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ed3a:	4618      	mov	r0, r3
 800ed3c:	3718      	adds	r7, #24
 800ed3e:	46bd      	mov	sp, r7
 800ed40:	bd80      	pop	{r7, pc}

0800ed42 <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 800ed42:	b580      	push	{r7, lr}
 800ed44:	b092      	sub	sp, #72	; 0x48
 800ed46:	af00      	add	r7, sp, #0
 800ed48:	6078      	str	r0, [r7, #4]
 800ed4a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ed4c:	2300      	movs	r3, #0
 800ed4e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800ed52:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800ed56:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800ed58:	f240 7376 	movw	r3, #1910	; 0x776
 800ed5c:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t EndOverheadMicroSeconds		= 960;
 800ed5e:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800ed62:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800ed64:	f44f 7325 	mov.w	r3, #660	; 0x294
 800ed68:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t TccOverheadMicroSeconds		= 590;
 800ed6a:	f240 234e 	movw	r3, #590	; 0x24e
 800ed6e:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t DssOverheadMicroSeconds		= 690;
 800ed70:	f240 23b2 	movw	r3, #690	; 0x2b2
 800ed74:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800ed76:	f44f 7325 	mov.w	r3, #660	; 0x294
 800ed7a:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800ed7c:	f240 2326 	movw	r3, #550	; 0x226
 800ed80:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800ed82:	2300      	movs	r3, #0
 800ed84:	60fb      	str	r3, [r7, #12]
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
 800ed86:	f644 6320 	movw	r3, #20000	; 0x4e20
 800ed8a:	623b      	str	r3, [r7, #32]
	uint32_t SubTimeout = 0;
 800ed8c:	2300      	movs	r3, #0
 800ed8e:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
 800ed90:	683a      	ldr	r2, [r7, #0]
 800ed92:	6a3b      	ldr	r3, [r7, #32]
 800ed94:	429a      	cmp	r2, r3
 800ed96:	d205      	bcs.n	800eda4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x62>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ed98:	23fc      	movs	r3, #252	; 0xfc
 800ed9a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		return Status;
 800ed9e:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800eda2:	e0aa      	b.n	800eefa <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 800eda4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800eda6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eda8:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 800edaa:	683a      	ldr	r2, [r7, #0]
 800edac:	1ad3      	subs	r3, r2, r3
 800edae:	643b      	str	r3, [r7, #64]	; 0x40

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800edb0:	f107 0314 	add.w	r3, r7, #20
 800edb4:	4619      	mov	r1, r3
 800edb6:	6878      	ldr	r0, [r7, #4]
 800edb8:	f7fc fe58 	bl	800ba6c <VL53L0X_GetSequenceStepEnables>
 800edbc:	4603      	mov	r3, r0
 800edbe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	if (Status == VL53L0X_ERROR_NONE &&
 800edc2:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	d15b      	bne.n	800ee82 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
		(SchedulerSequenceSteps.TccOn  ||
 800edca:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 800edcc:	2b00      	cmp	r3, #0
 800edce:	d105      	bne.n	800eddc <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.MsrcOn ||
 800edd0:	7d7b      	ldrb	r3, [r7, #21]
		(SchedulerSequenceSteps.TccOn  ||
 800edd2:	2b00      	cmp	r3, #0
 800edd4:	d102      	bne.n	800eddc <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.DssOn)) {
 800edd6:	7dbb      	ldrb	r3, [r7, #22]
		SchedulerSequenceSteps.MsrcOn ||
 800edd8:	2b00      	cmp	r3, #0
 800edda:	d052      	beq.n	800ee82 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 800eddc:	f107 0310 	add.w	r3, r7, #16
 800ede0:	461a      	mov	r2, r3
 800ede2:	2102      	movs	r1, #2
 800ede4:	6878      	ldr	r0, [r7, #4]
 800ede6:	f7ff fb19 	bl	800e41c <get_sequence_step_timeout>
 800edea:	4603      	mov	r3, r0
 800edec:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					&MsrcDccTccTimeoutMicroSeconds);

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled. */

		if (Status != VL53L0X_ERROR_NONE)
 800edf0:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800edf4:	2b00      	cmp	r3, #0
 800edf6:	d002      	beq.n	800edfe <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbc>
			return Status;
 800edf8:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800edfc:	e07d      	b.n	800eefa <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 800edfe:	7d3b      	ldrb	r3, [r7, #20]
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	d00f      	beq.n	800ee24 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 800ee04:	693b      	ldr	r3, [r7, #16]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 800ee06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ee08:	4413      	add	r3, r2
 800ee0a:	61fb      	str	r3, [r7, #28]

			if (SubTimeout <
 800ee0c:	69fa      	ldr	r2, [r7, #28]
 800ee0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ee10:	429a      	cmp	r2, r3
 800ee12:	d204      	bcs.n	800ee1e <VL53L0X_set_measurement_timing_budget_micro_seconds+0xdc>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 800ee14:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ee16:	69fb      	ldr	r3, [r7, #28]
 800ee18:	1ad3      	subs	r3, r2, r3
 800ee1a:	643b      	str	r3, [r7, #64]	; 0x40
 800ee1c:	e002      	b.n	800ee24 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ee1e:	23fc      	movs	r3, #252	; 0xfc
 800ee20:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 800ee24:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800ee28:	2b00      	cmp	r3, #0
 800ee2a:	d002      	beq.n	800ee32 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf0>
			LOG_FUNCTION_END(Status);
			return Status;
 800ee2c:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800ee30:	e063      	b.n	800eefa <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 800ee32:	7dbb      	ldrb	r3, [r7, #22]
 800ee34:	2b00      	cmp	r3, #0
 800ee36:	d011      	beq.n	800ee5c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x11a>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 800ee38:	693a      	ldr	r2, [r7, #16]
 800ee3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee3c:	4413      	add	r3, r2
 800ee3e:	005b      	lsls	r3, r3, #1
 800ee40:	61fb      	str	r3, [r7, #28]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800ee42:	69fa      	ldr	r2, [r7, #28]
 800ee44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ee46:	429a      	cmp	r2, r3
 800ee48:	d204      	bcs.n	800ee54 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x112>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800ee4a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ee4c:	69fb      	ldr	r3, [r7, #28]
 800ee4e:	1ad3      	subs	r3, r2, r3
 800ee50:	643b      	str	r3, [r7, #64]	; 0x40
 800ee52:	e016      	b.n	800ee82 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ee54:	23fc      	movs	r3, #252	; 0xfc
 800ee56:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800ee5a:	e012      	b.n	800ee82 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 800ee5c:	7d7b      	ldrb	r3, [r7, #21]
 800ee5e:	2b00      	cmp	r3, #0
 800ee60:	d00f      	beq.n	800ee82 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 800ee62:	693b      	ldr	r3, [r7, #16]
 800ee64:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ee66:	4413      	add	r3, r2
 800ee68:	61fb      	str	r3, [r7, #28]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800ee6a:	69fa      	ldr	r2, [r7, #28]
 800ee6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ee6e:	429a      	cmp	r2, r3
 800ee70:	d204      	bcs.n	800ee7c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x13a>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800ee72:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ee74:	69fb      	ldr	r3, [r7, #28]
 800ee76:	1ad3      	subs	r3, r2, r3
 800ee78:	643b      	str	r3, [r7, #64]	; 0x40
 800ee7a:	e002      	b.n	800ee82 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ee7c:	23fc      	movs	r3, #252	; 0xfc
 800ee7e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 800ee82:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800ee86:	2b00      	cmp	r3, #0
 800ee88:	d002      	beq.n	800ee90 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x14e>
		LOG_FUNCTION_END(Status);
		return Status;
 800ee8a:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800ee8e:	e034      	b.n	800eefa <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 800ee90:	7dfb      	ldrb	r3, [r7, #23]
 800ee92:	2b00      	cmp	r3, #0
 800ee94:	d019      	beq.n	800eeca <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 800ee96:	f107 030c 	add.w	r3, r7, #12
 800ee9a:	461a      	mov	r2, r3
 800ee9c:	2103      	movs	r1, #3
 800ee9e:	6878      	ldr	r0, [r7, #4]
 800eea0:	f7ff fabc 	bl	800e41c <get_sequence_step_timeout>
 800eea4:	4603      	mov	r3, r0
 800eea6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 800eeaa:	68fb      	ldr	r3, [r7, #12]
 800eeac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800eeae:	4413      	add	r3, r2
 800eeb0:	61fb      	str	r3, [r7, #28]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800eeb2:	69fa      	ldr	r2, [r7, #28]
 800eeb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eeb6:	429a      	cmp	r2, r3
 800eeb8:	d204      	bcs.n	800eec4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x182>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 800eeba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800eebc:	69fb      	ldr	r3, [r7, #28]
 800eebe:	1ad3      	subs	r3, r2, r3
 800eec0:	643b      	str	r3, [r7, #64]	; 0x40
 800eec2:	e002      	b.n	800eeca <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800eec4:	23fc      	movs	r3, #252	; 0xfc
 800eec6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 800eeca:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800eece:	2b00      	cmp	r3, #0
 800eed0:	d111      	bne.n	800eef6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>
		SchedulerSequenceSteps.FinalRangeOn) {
 800eed2:	7e3b      	ldrb	r3, [r7, #24]
	if (Status == VL53L0X_ERROR_NONE &&
 800eed4:	2b00      	cmp	r3, #0
 800eed6:	d00e      	beq.n	800eef6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>

		FinalRangeTimingBudgetMicroSeconds -=
 800eed8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800eeda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eedc:	1ad3      	subs	r3, r2, r3
 800eede:	643b      	str	r3, [r7, #64]	; 0x40
		 * budget and the sum of all other timeouts within the sequence.
		 * If there is no room for the final range timeout, then an error
		 * will be set. Otherwise the remaining time will be applied to
		 * the final range.
		 */
		Status = set_sequence_step_timeout(Dev,
 800eee0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800eee2:	2104      	movs	r1, #4
 800eee4:	6878      	ldr	r0, [r7, #4]
 800eee6:	f7ff fb7a 	bl	800e5de <set_sequence_step_timeout>
 800eeea:	4603      	mov	r3, r0
 800eeec:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	683a      	ldr	r2, [r7, #0]
 800eef4:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);

	return Status;
 800eef6:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 800eefa:	4618      	mov	r0, r3
 800eefc:	3748      	adds	r7, #72	; 0x48
 800eefe:	46bd      	mov	sp, r7
 800ef00:	bd80      	pop	{r7, pc}

0800ef02 <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800ef02:	b580      	push	{r7, lr}
 800ef04:	b090      	sub	sp, #64	; 0x40
 800ef06:	af00      	add	r7, sp, #0
 800ef08:	6078      	str	r0, [r7, #4]
 800ef0a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ef0c:	2300      	movs	r3, #0
 800ef0e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800ef12:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800ef16:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800ef18:	f240 7376 	movw	r3, #1910	; 0x776
 800ef1c:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 800ef1e:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800ef22:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800ef24:	f44f 7325 	mov.w	r3, #660	; 0x294
 800ef28:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 800ef2a:	f240 234e 	movw	r3, #590	; 0x24e
 800ef2e:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 800ef30:	f240 23b2 	movw	r3, #690	; 0x2b2
 800ef34:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800ef36:	f44f 7325 	mov.w	r3, #660	; 0x294
 800ef3a:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800ef3c:	f240 2326 	movw	r3, #550	; 0x226
 800ef40:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800ef42:	2300      	movs	r3, #0
 800ef44:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 800ef46:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ef48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ef4a:	441a      	add	r2, r3
 800ef4c:	683b      	ldr	r3, [r7, #0]
 800ef4e:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800ef50:	f107 0318 	add.w	r3, r7, #24
 800ef54:	4619      	mov	r1, r3
 800ef56:	6878      	ldr	r0, [r7, #4]
 800ef58:	f7fc fd88 	bl	800ba6c <VL53L0X_GetSequenceStepEnables>
 800ef5c:	4603      	mov	r3, r0
 800ef5e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 800ef62:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ef66:	2b00      	cmp	r3, #0
 800ef68:	d002      	beq.n	800ef70 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
		LOG_FUNCTION_END(Status);
		return Status;
 800ef6a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ef6e:	e075      	b.n	800f05c <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 800ef70:	7e3b      	ldrb	r3, [r7, #24]
 800ef72:	2b00      	cmp	r3, #0
 800ef74:	d105      	bne.n	800ef82 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 800ef76:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 800ef78:	2b00      	cmp	r3, #0
 800ef7a:	d102      	bne.n	800ef82 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn) {
 800ef7c:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 800ef7e:	2b00      	cmp	r3, #0
 800ef80:	d030      	beq.n	800efe4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

		Status = get_sequence_step_timeout(Dev,
 800ef82:	f107 0310 	add.w	r3, r7, #16
 800ef86:	461a      	mov	r2, r3
 800ef88:	2102      	movs	r1, #2
 800ef8a:	6878      	ldr	r0, [r7, #4]
 800ef8c:	f7ff fa46 	bl	800e41c <get_sequence_step_timeout>
 800ef90:	4603      	mov	r3, r0
 800ef92:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 800ef96:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ef9a:	2b00      	cmp	r3, #0
 800ef9c:	d122      	bne.n	800efe4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
			if (SchedulerSequenceSteps.TccOn) {
 800ef9e:	7e3b      	ldrb	r3, [r7, #24]
 800efa0:	2b00      	cmp	r3, #0
 800efa2:	d007      	beq.n	800efb4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800efa4:	683b      	ldr	r3, [r7, #0]
 800efa6:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800efa8:	6939      	ldr	r1, [r7, #16]
 800efaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efac:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800efae:	441a      	add	r2, r3
 800efb0:	683b      	ldr	r3, [r7, #0]
 800efb2:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 800efb4:	7ebb      	ldrb	r3, [r7, #26]
 800efb6:	2b00      	cmp	r3, #0
 800efb8:	d009      	beq.n	800efce <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
				*pMeasurementTimingBudgetMicroSeconds +=
 800efba:	683b      	ldr	r3, [r7, #0]
 800efbc:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 800efbe:	6939      	ldr	r1, [r7, #16]
 800efc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efc2:	440b      	add	r3, r1
 800efc4:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 800efc6:	441a      	add	r2, r3
 800efc8:	683b      	ldr	r3, [r7, #0]
 800efca:	601a      	str	r2, [r3, #0]
 800efcc:	e00a      	b.n	800efe4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 800efce:	7e7b      	ldrb	r3, [r7, #25]
 800efd0:	2b00      	cmp	r3, #0
 800efd2:	d007      	beq.n	800efe4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800efd4:	683b      	ldr	r3, [r7, #0]
 800efd6:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800efd8:	6939      	ldr	r1, [r7, #16]
 800efda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efdc:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800efde:	441a      	add	r2, r3
 800efe0:	683b      	ldr	r3, [r7, #0]
 800efe2:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800efe4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800efe8:	2b00      	cmp	r3, #0
 800efea:	d114      	bne.n	800f016 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
		if (SchedulerSequenceSteps.PreRangeOn) {
 800efec:	7efb      	ldrb	r3, [r7, #27]
 800efee:	2b00      	cmp	r3, #0
 800eff0:	d011      	beq.n	800f016 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
			Status = get_sequence_step_timeout(Dev,
 800eff2:	f107 030c 	add.w	r3, r7, #12
 800eff6:	461a      	mov	r2, r3
 800eff8:	2103      	movs	r1, #3
 800effa:	6878      	ldr	r0, [r7, #4]
 800effc:	f7ff fa0e 	bl	800e41c <get_sequence_step_timeout>
 800f000:	4603      	mov	r3, r0
 800f002:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800f006:	683b      	ldr	r3, [r7, #0]
 800f008:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 800f00a:	68f9      	ldr	r1, [r7, #12]
 800f00c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f00e:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800f010:	441a      	add	r2, r3
 800f012:	683b      	ldr	r3, [r7, #0]
 800f014:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800f016:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800f01a:	2b00      	cmp	r3, #0
 800f01c:	d114      	bne.n	800f048 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 800f01e:	7f3b      	ldrb	r3, [r7, #28]
 800f020:	2b00      	cmp	r3, #0
 800f022:	d011      	beq.n	800f048 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
			Status = get_sequence_step_timeout(Dev,
 800f024:	f107 0314 	add.w	r3, r7, #20
 800f028:	461a      	mov	r2, r3
 800f02a:	2104      	movs	r1, #4
 800f02c:	6878      	ldr	r0, [r7, #4]
 800f02e:	f7ff f9f5 	bl	800e41c <get_sequence_step_timeout>
 800f032:	4603      	mov	r3, r0
 800f034:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800f038:	683b      	ldr	r3, [r7, #0]
 800f03a:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 800f03c:	6979      	ldr	r1, [r7, #20]
 800f03e:	6a3b      	ldr	r3, [r7, #32]
 800f040:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800f042:	441a      	add	r2, r3
 800f044:	683b      	ldr	r3, [r7, #0]
 800f046:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800f048:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800f04c:	2b00      	cmp	r3, #0
 800f04e:	d103      	bne.n	800f058 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
		VL53L0X_SETPARAMETERFIELD(Dev,
 800f050:	683b      	ldr	r3, [r7, #0]
 800f052:	681a      	ldr	r2, [r3, #0]
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800f058:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800f05c:	4618      	mov	r0, r3
 800f05e:	3740      	adds	r7, #64	; 0x40
 800f060:	46bd      	mov	sp, r7
 800f062:	bd80      	pop	{r7, pc}

0800f064 <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 800f064:	b580      	push	{r7, lr}
 800f066:	b088      	sub	sp, #32
 800f068:	af00      	add	r7, sp, #0
 800f06a:	6078      	str	r0, [r7, #4]
 800f06c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800f06e:	2300      	movs	r3, #0
 800f070:	77fb      	strb	r3, [r7, #31]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 800f072:	2300      	movs	r3, #0
 800f074:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800f076:	e0c6      	b.n	800f206 <VL53L0X_load_tuning_settings+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 800f078:	697b      	ldr	r3, [r7, #20]
 800f07a:	683a      	ldr	r2, [r7, #0]
 800f07c:	4413      	add	r3, r2
 800f07e:	781b      	ldrb	r3, [r3, #0]
 800f080:	74fb      	strb	r3, [r7, #19]
		Index++;
 800f082:	697b      	ldr	r3, [r7, #20]
 800f084:	3301      	adds	r3, #1
 800f086:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 800f088:	7cfb      	ldrb	r3, [r7, #19]
 800f08a:	2bff      	cmp	r3, #255	; 0xff
 800f08c:	f040 808d 	bne.w	800f1aa <VL53L0X_load_tuning_settings+0x146>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 800f090:	697b      	ldr	r3, [r7, #20]
 800f092:	683a      	ldr	r2, [r7, #0]
 800f094:	4413      	add	r3, r2
 800f096:	781b      	ldrb	r3, [r3, #0]
 800f098:	747b      	strb	r3, [r7, #17]
			Index++;
 800f09a:	697b      	ldr	r3, [r7, #20]
 800f09c:	3301      	adds	r3, #1
 800f09e:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 800f0a0:	7c7b      	ldrb	r3, [r7, #17]
 800f0a2:	2b03      	cmp	r3, #3
 800f0a4:	d87e      	bhi.n	800f1a4 <VL53L0X_load_tuning_settings+0x140>
 800f0a6:	a201      	add	r2, pc, #4	; (adr r2, 800f0ac <VL53L0X_load_tuning_settings+0x48>)
 800f0a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f0ac:	0800f0bd 	.word	0x0800f0bd
 800f0b0:	0800f0f7 	.word	0x0800f0f7
 800f0b4:	0800f131 	.word	0x0800f131
 800f0b8:	0800f16b 	.word	0x0800f16b
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800f0bc:	697b      	ldr	r3, [r7, #20]
 800f0be:	683a      	ldr	r2, [r7, #0]
 800f0c0:	4413      	add	r3, r2
 800f0c2:	781b      	ldrb	r3, [r3, #0]
 800f0c4:	743b      	strb	r3, [r7, #16]
				Index++;
 800f0c6:	697b      	ldr	r3, [r7, #20]
 800f0c8:	3301      	adds	r3, #1
 800f0ca:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800f0cc:	697b      	ldr	r3, [r7, #20]
 800f0ce:	683a      	ldr	r2, [r7, #0]
 800f0d0:	4413      	add	r3, r2
 800f0d2:	781b      	ldrb	r3, [r3, #0]
 800f0d4:	73fb      	strb	r3, [r7, #15]
				Index++;
 800f0d6:	697b      	ldr	r3, [r7, #20]
 800f0d8:	3301      	adds	r3, #1
 800f0da:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800f0dc:	7c3b      	ldrb	r3, [r7, #16]
 800f0de:	b29b      	uxth	r3, r3
 800f0e0:	021b      	lsls	r3, r3, #8
 800f0e2:	b29a      	uxth	r2, r3
 800f0e4:	7bfb      	ldrb	r3, [r7, #15]
 800f0e6:	b29b      	uxth	r3, r3
 800f0e8:	4413      	add	r3, r2
 800f0ea:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	89ba      	ldrh	r2, [r7, #12]
 800f0f0:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
				break;
 800f0f4:	e087      	b.n	800f206 <VL53L0X_load_tuning_settings+0x1a2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800f0f6:	697b      	ldr	r3, [r7, #20]
 800f0f8:	683a      	ldr	r2, [r7, #0]
 800f0fa:	4413      	add	r3, r2
 800f0fc:	781b      	ldrb	r3, [r3, #0]
 800f0fe:	743b      	strb	r3, [r7, #16]
				Index++;
 800f100:	697b      	ldr	r3, [r7, #20]
 800f102:	3301      	adds	r3, #1
 800f104:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800f106:	697b      	ldr	r3, [r7, #20]
 800f108:	683a      	ldr	r2, [r7, #0]
 800f10a:	4413      	add	r3, r2
 800f10c:	781b      	ldrb	r3, [r3, #0]
 800f10e:	73fb      	strb	r3, [r7, #15]
				Index++;
 800f110:	697b      	ldr	r3, [r7, #20]
 800f112:	3301      	adds	r3, #1
 800f114:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800f116:	7c3b      	ldrb	r3, [r7, #16]
 800f118:	b29b      	uxth	r3, r3
 800f11a:	021b      	lsls	r3, r3, #8
 800f11c:	b29a      	uxth	r2, r3
 800f11e:	7bfb      	ldrb	r3, [r7, #15]
 800f120:	b29b      	uxth	r3, r3
 800f122:	4413      	add	r3, r2
 800f124:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	89ba      	ldrh	r2, [r7, #12]
 800f12a:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
					Temp16);
				break;
 800f12e:	e06a      	b.n	800f206 <VL53L0X_load_tuning_settings+0x1a2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800f130:	697b      	ldr	r3, [r7, #20]
 800f132:	683a      	ldr	r2, [r7, #0]
 800f134:	4413      	add	r3, r2
 800f136:	781b      	ldrb	r3, [r3, #0]
 800f138:	743b      	strb	r3, [r7, #16]
				Index++;
 800f13a:	697b      	ldr	r3, [r7, #20]
 800f13c:	3301      	adds	r3, #1
 800f13e:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800f140:	697b      	ldr	r3, [r7, #20]
 800f142:	683a      	ldr	r2, [r7, #0]
 800f144:	4413      	add	r3, r2
 800f146:	781b      	ldrb	r3, [r3, #0]
 800f148:	73fb      	strb	r3, [r7, #15]
				Index++;
 800f14a:	697b      	ldr	r3, [r7, #20]
 800f14c:	3301      	adds	r3, #1
 800f14e:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800f150:	7c3b      	ldrb	r3, [r7, #16]
 800f152:	b29b      	uxth	r3, r3
 800f154:	021b      	lsls	r3, r3, #8
 800f156:	b29a      	uxth	r2, r3
 800f158:	7bfb      	ldrb	r3, [r7, #15]
 800f15a:	b29b      	uxth	r3, r3
 800f15c:	4413      	add	r3, r2
 800f15e:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	89ba      	ldrh	r2, [r7, #12]
 800f164:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
				break;
 800f168:	e04d      	b.n	800f206 <VL53L0X_load_tuning_settings+0x1a2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800f16a:	697b      	ldr	r3, [r7, #20]
 800f16c:	683a      	ldr	r2, [r7, #0]
 800f16e:	4413      	add	r3, r2
 800f170:	781b      	ldrb	r3, [r3, #0]
 800f172:	743b      	strb	r3, [r7, #16]
				Index++;
 800f174:	697b      	ldr	r3, [r7, #20]
 800f176:	3301      	adds	r3, #1
 800f178:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800f17a:	697b      	ldr	r3, [r7, #20]
 800f17c:	683a      	ldr	r2, [r7, #0]
 800f17e:	4413      	add	r3, r2
 800f180:	781b      	ldrb	r3, [r3, #0]
 800f182:	73fb      	strb	r3, [r7, #15]
				Index++;
 800f184:	697b      	ldr	r3, [r7, #20]
 800f186:	3301      	adds	r3, #1
 800f188:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800f18a:	7c3b      	ldrb	r3, [r7, #16]
 800f18c:	b29b      	uxth	r3, r3
 800f18e:	021b      	lsls	r3, r3, #8
 800f190:	b29a      	uxth	r2, r3
 800f192:	7bfb      	ldrb	r3, [r7, #15]
 800f194:	b29b      	uxth	r3, r3
 800f196:	4413      	add	r3, r2
 800f198:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	89ba      	ldrh	r2, [r7, #12]
 800f19e:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c
				break;
 800f1a2:	e030      	b.n	800f206 <VL53L0X_load_tuning_settings+0x1a2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800f1a4:	23fc      	movs	r3, #252	; 0xfc
 800f1a6:	77fb      	strb	r3, [r7, #31]
 800f1a8:	e02d      	b.n	800f206 <VL53L0X_load_tuning_settings+0x1a2>
			}

		} else if (NumberOfWrites <= 4) {
 800f1aa:	7cfb      	ldrb	r3, [r7, #19]
 800f1ac:	2b04      	cmp	r3, #4
 800f1ae:	d828      	bhi.n	800f202 <VL53L0X_load_tuning_settings+0x19e>
			Address = *(pTuningSettingBuffer + Index);
 800f1b0:	697b      	ldr	r3, [r7, #20]
 800f1b2:	683a      	ldr	r2, [r7, #0]
 800f1b4:	4413      	add	r3, r2
 800f1b6:	781b      	ldrb	r3, [r3, #0]
 800f1b8:	74bb      	strb	r3, [r7, #18]
			Index++;
 800f1ba:	697b      	ldr	r3, [r7, #20]
 800f1bc:	3301      	adds	r3, #1
 800f1be:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 800f1c0:	2300      	movs	r3, #0
 800f1c2:	61bb      	str	r3, [r7, #24]
 800f1c4:	e00f      	b.n	800f1e6 <VL53L0X_load_tuning_settings+0x182>
				localBuffer[i] = *(pTuningSettingBuffer +
 800f1c6:	697b      	ldr	r3, [r7, #20]
 800f1c8:	683a      	ldr	r2, [r7, #0]
 800f1ca:	4413      	add	r3, r2
 800f1cc:	7819      	ldrb	r1, [r3, #0]
 800f1ce:	f107 0208 	add.w	r2, r7, #8
 800f1d2:	69bb      	ldr	r3, [r7, #24]
 800f1d4:	4413      	add	r3, r2
 800f1d6:	460a      	mov	r2, r1
 800f1d8:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 800f1da:	697b      	ldr	r3, [r7, #20]
 800f1dc:	3301      	adds	r3, #1
 800f1de:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 800f1e0:	69bb      	ldr	r3, [r7, #24]
 800f1e2:	3301      	adds	r3, #1
 800f1e4:	61bb      	str	r3, [r7, #24]
 800f1e6:	7cfb      	ldrb	r3, [r7, #19]
 800f1e8:	69ba      	ldr	r2, [r7, #24]
 800f1ea:	429a      	cmp	r2, r3
 800f1ec:	dbeb      	blt.n	800f1c6 <VL53L0X_load_tuning_settings+0x162>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 800f1ee:	7cfb      	ldrb	r3, [r7, #19]
 800f1f0:	f107 0208 	add.w	r2, r7, #8
 800f1f4:	7cb9      	ldrb	r1, [r7, #18]
 800f1f6:	6878      	ldr	r0, [r7, #4]
 800f1f8:	f000 fdee 	bl	800fdd8 <VL53L0X_WriteMulti>
 800f1fc:	4603      	mov	r3, r0
 800f1fe:	77fb      	strb	r3, [r7, #31]
 800f200:	e001      	b.n	800f206 <VL53L0X_load_tuning_settings+0x1a2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800f202:	23fc      	movs	r3, #252	; 0xfc
 800f204:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800f206:	697b      	ldr	r3, [r7, #20]
 800f208:	683a      	ldr	r2, [r7, #0]
 800f20a:	4413      	add	r3, r2
 800f20c:	781b      	ldrb	r3, [r3, #0]
 800f20e:	2b00      	cmp	r3, #0
 800f210:	d004      	beq.n	800f21c <VL53L0X_load_tuning_settings+0x1b8>
 800f212:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800f216:	2b00      	cmp	r3, #0
 800f218:	f43f af2e 	beq.w	800f078 <VL53L0X_load_tuning_settings+0x14>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800f21c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800f220:	4618      	mov	r0, r3
 800f222:	3720      	adds	r7, #32
 800f224:	46bd      	mov	sp, r7
 800f226:	bd80      	pop	{r7, pc}

0800f228 <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 800f228:	b580      	push	{r7, lr}
 800f22a:	b088      	sub	sp, #32
 800f22c:	af00      	add	r7, sp, #0
 800f22e:	60f8      	str	r0, [r7, #12]
 800f230:	60b9      	str	r1, [r7, #8]
 800f232:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800f234:	2300      	movs	r3, #0
 800f236:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	2200      	movs	r2, #0
 800f23c:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 800f23e:	f107 0313 	add.w	r3, r7, #19
 800f242:	4619      	mov	r1, r3
 800f244:	68f8      	ldr	r0, [r7, #12]
 800f246:	f7fc fc9d 	bl	800bb84 <VL53L0X_GetXTalkCompensationEnable>
 800f24a:	4603      	mov	r3, r0
 800f24c:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 800f24e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800f252:	2b00      	cmp	r3, #0
 800f254:	d111      	bne.n	800f27a <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 800f256:	7cfb      	ldrb	r3, [r7, #19]
 800f258:	2b00      	cmp	r3, #0
 800f25a:	d00e      	beq.n	800f27a <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 800f25c:	68fb      	ldr	r3, [r7, #12]
 800f25e:	6a1b      	ldr	r3, [r3, #32]
 800f260:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 800f262:	68bb      	ldr	r3, [r7, #8]
 800f264:	8a9b      	ldrh	r3, [r3, #20]
 800f266:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 800f268:	69bb      	ldr	r3, [r7, #24]
 800f26a:	fb02 f303 	mul.w	r3, r2, r3
 800f26e:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 800f270:	697b      	ldr	r3, [r7, #20]
 800f272:	3380      	adds	r3, #128	; 0x80
 800f274:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 800f27a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800f27e:	4618      	mov	r0, r3
 800f280:	3720      	adds	r7, #32
 800f282:	46bd      	mov	sp, r7
 800f284:	bd80      	pop	{r7, pc}

0800f286 <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 800f286:	b580      	push	{r7, lr}
 800f288:	b086      	sub	sp, #24
 800f28a:	af00      	add	r7, sp, #0
 800f28c:	60f8      	str	r0, [r7, #12]
 800f28e:	60b9      	str	r1, [r7, #8]
 800f290:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800f292:	2300      	movs	r3, #0
 800f294:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 800f296:	68bb      	ldr	r3, [r7, #8]
 800f298:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 800f29e:	f107 0310 	add.w	r3, r7, #16
 800f2a2:	461a      	mov	r2, r3
 800f2a4:	68b9      	ldr	r1, [r7, #8]
 800f2a6:	68f8      	ldr	r0, [r7, #12]
 800f2a8:	f7ff ffbe 	bl	800f228 <VL53L0X_get_total_xtalk_rate>
 800f2ac:	4603      	mov	r3, r0
 800f2ae:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 800f2b0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f2b4:	2b00      	cmp	r3, #0
 800f2b6:	d105      	bne.n	800f2c4 <VL53L0X_get_total_signal_rate+0x3e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	681a      	ldr	r2, [r3, #0]
 800f2bc:	693b      	ldr	r3, [r7, #16]
 800f2be:	441a      	add	r2, r3
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	601a      	str	r2, [r3, #0]

	return Status;
 800f2c4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f2c8:	4618      	mov	r0, r3
 800f2ca:	3718      	adds	r7, #24
 800f2cc:	46bd      	mov	sp, r7
 800f2ce:	bd80      	pop	{r7, pc}

0800f2d0 <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 800f2d0:	b580      	push	{r7, lr}
 800f2d2:	b09a      	sub	sp, #104	; 0x68
 800f2d4:	af00      	add	r7, sp, #0
 800f2d6:	60f8      	str	r0, [r7, #12]
 800f2d8:	60b9      	str	r1, [r7, #8]
 800f2da:	607a      	str	r2, [r7, #4]
 800f2dc:	603b      	str	r3, [r7, #0]
	const uint32_t cSigmaLimit		= 18;
 800f2de:	2312      	movs	r3, #18
 800f2e0:	657b      	str	r3, [r7, #84]	; 0x54
	const FixPoint1616_t cSignalLimit	= 0x4000; /* 0.25 */
 800f2e2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800f2e6:	653b      	str	r3, [r7, #80]	; 0x50
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 800f2e8:	2342      	movs	r3, #66	; 0x42
 800f2ea:	64fb      	str	r3, [r7, #76]	; 0x4c
	const uint32_t cAmbEffWidthSigmaEst_ns = 6;
 800f2ec:	2306      	movs	r3, #6
 800f2ee:	64bb      	str	r3, [r7, #72]	; 0x48
	const uint32_t cAmbEffWidthDMax_ns	   = 7;
 800f2f0:	2307      	movs	r3, #7
 800f2f2:	647b      	str	r3, [r7, #68]	; 0x44
	FixPoint1616_t dmaxAmbient;
	FixPoint1616_t dmaxDarkTmp;
	FixPoint1616_t sigmaEstP2Tmp;
	uint32_t signalRateTemp_mcps;

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800f2f4:	2300      	movs	r3, #0
 800f2f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
		PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
 800f2fa:	68fb      	ldr	r3, [r7, #12]
 800f2fc:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
	dmaxCalRange_mm =
 800f300:	63fb      	str	r3, [r7, #60]	; 0x3c

	dmaxCalSignalRateRtn_mcps =
 800f302:	68fb      	ldr	r3, [r7, #12]
 800f304:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800f308:	63bb      	str	r3, [r7, #56]	; 0x38
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 800f30a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f30c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f30e:	fb02 f303 	mul.w	r3, r2, r3
 800f312:	637b      	str	r3, [r7, #52]	; 0x34

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 800f314:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f316:	3380      	adds	r3, #128	; 0x80
 800f318:	0a1b      	lsrs	r3, r3, #8
 800f31a:	637b      	str	r3, [r7, #52]	; 0x34
	SignalAt0mm *= dmaxCalRange_mm;
 800f31c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f31e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f320:	fb02 f303 	mul.w	r3, r2, r3
 800f324:	637b      	str	r3, [r7, #52]	; 0x34

	minSignalNeeded_p1 = 0;
 800f326:	2300      	movs	r3, #0
 800f328:	667b      	str	r3, [r7, #100]	; 0x64
	if (totalCorrSignalRate_mcps > 0) {
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	2b00      	cmp	r3, #0
 800f32e:	d01a      	beq.n	800f366 <VL53L0X_calc_dmax+0x96>

		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;
 800f330:	68bb      	ldr	r3, [r7, #8]
 800f332:	029b      	lsls	r3, r3, #10
 800f334:	633b      	str	r3, [r7, #48]	; 0x30

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
			(totalCorrSignalRate_mcps/2);
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	085b      	lsrs	r3, r3, #1
		minSignalNeeded_p1 = signalRateTemp_mcps +
 800f33a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f33c:	4413      	add	r3, r2
 800f33e:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 800f340:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	fbb2 f3f3 	udiv	r3, r2, r3
 800f348:	667b      	str	r3, [r7, #100]	; 0x64

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 800f34a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800f34c:	4613      	mov	r3, r2
 800f34e:	005b      	lsls	r3, r3, #1
 800f350:	4413      	add	r3, r2
 800f352:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 800f354:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f356:	fb03 f303 	mul.w	r3, r3, r3
 800f35a:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 800f35c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f35e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800f362:	0c1b      	lsrs	r3, r3, #16
 800f364:	667b      	str	r3, [r7, #100]	; 0x64
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 800f366:	683b      	ldr	r3, [r7, #0]
 800f368:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800f36a:	fb02 f303 	mul.w	r3, r2, r3
 800f36e:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* FixPoint1616 >> 16 =	 uint32 */
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 800f370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f372:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800f376:	0c1b      	lsrs	r3, r3, #16
 800f378:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* uint32 * uint32	=  uint32 */
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 800f37a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f37c:	fb03 f303 	mul.w	r3, r3, r3
 800f380:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 800f382:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f384:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800f388:	0c1b      	lsrs	r3, r3, #16
 800f38a:	62bb      	str	r3, [r7, #40]	; 0x28
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 800f38c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f38e:	085a      	lsrs	r2, r3, #1
 800f390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f392:	441a      	add	r2, r3
 800f394:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f396:	fbb2 f3f3 	udiv	r3, r2, r3
 800f39a:	62bb      	str	r3, [r7, #40]	; 0x28
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 800f39c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f39e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f3a0:	fb02 f303 	mul.w	r3, r2, r3
 800f3a4:	62bb      	str	r3, [r7, #40]	; 0x28

	if (sigmaEstP2Tmp > 0xffff) {
 800f3a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f3ac:	d302      	bcc.n	800f3b4 <VL53L0X_calc_dmax+0xe4>
		minSignalNeeded_p3 = 0xfff00000;
 800f3ae:	4b54      	ldr	r3, [pc, #336]	; (800f500 <VL53L0X_calc_dmax+0x230>)
 800f3b0:	663b      	str	r3, [r7, #96]	; 0x60
 800f3b2:	e015      	b.n	800f3e0 <VL53L0X_calc_dmax+0x110>

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 800f3b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f3b6:	085a      	lsrs	r2, r3, #1
 800f3b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f3ba:	441a      	add	r2, r3
 800f3bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f3be:	fbb2 f3f3 	udiv	r3, r2, r3
 800f3c2:	677b      	str	r3, [r7, #116]	; 0x74
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 800f3c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f3c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f3c8:	fb02 f303 	mul.w	r3, r2, r3
 800f3cc:	677b      	str	r3, [r7, #116]	; 0x74

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 800f3ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f3d0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800f3d4:	0c1b      	lsrs	r3, r3, #16
 800f3d6:	663b      	str	r3, [r7, #96]	; 0x60

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 800f3d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f3da:	fb03 f303 	mul.w	r3, r3, r3
 800f3de:	663b      	str	r3, [r7, #96]	; 0x60

	}

	/* FixPoint1814 / uint32 = FixPoint1814 */
	sigmaLimitTmp = ((cSigmaLimit << 14) + 500) / 1000;
 800f3e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f3e2:	039b      	lsls	r3, r3, #14
 800f3e4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800f3e8:	4a46      	ldr	r2, [pc, #280]	; (800f504 <VL53L0X_calc_dmax+0x234>)
 800f3ea:	fba2 2303 	umull	r2, r3, r2, r3
 800f3ee:	099b      	lsrs	r3, r3, #6
 800f3f0:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1814 * FixPoint1814 = FixPoint3628 := FixPoint0428 */
	sigmaLimitTmp *= sigmaLimitTmp;
 800f3f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3f4:	fb03 f303 	mul.w	r3, r3, r3
 800f3f8:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
	sigmaEstSqTmp = cSigmaEstRef * cSigmaEstRef;
 800f3fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f3fc:	fb03 f303 	mul.w	r3, r3, r3
 800f400:	623b      	str	r3, [r7, #32]

	/* FixPoint3232 >> 4 = FixPoint0428 */
	sigmaEstSqTmp = (sigmaEstSqTmp + 0x08) >> 4;
 800f402:	6a3b      	ldr	r3, [r7, #32]
 800f404:	3308      	adds	r3, #8
 800f406:	091b      	lsrs	r3, r3, #4
 800f408:	623b      	str	r3, [r7, #32]

	/* FixPoint0428 - FixPoint0428	= FixPoint0428 */
	sigmaLimitTmp -=  sigmaEstSqTmp;
 800f40a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f40c:	6a3b      	ldr	r3, [r7, #32]
 800f40e:	1ad3      	subs	r3, r2, r3
 800f410:	627b      	str	r3, [r7, #36]	; 0x24

	/* uint32_t * FixPoint0428 = FixPoint0428 */
	minSignalNeeded_p4 = 4 * 12 * sigmaLimitTmp;
 800f412:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f414:	4613      	mov	r3, r2
 800f416:	005b      	lsls	r3, r3, #1
 800f418:	4413      	add	r3, r2
 800f41a:	011b      	lsls	r3, r3, #4
 800f41c:	61fb      	str	r3, [r7, #28]

	/* FixPoint0428 >> 14 = FixPoint1814 */
	minSignalNeeded_p4 = (minSignalNeeded_p4 + 0x2000) >> 14;
 800f41e:	69fb      	ldr	r3, [r7, #28]
 800f420:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800f424:	0b9b      	lsrs	r3, r3, #14
 800f426:	61fb      	str	r3, [r7, #28]

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);
 800f428:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f42a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f42c:	4413      	add	r3, r2
 800f42e:	61bb      	str	r3, [r7, #24]

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
 800f430:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f432:	085b      	lsrs	r3, r3, #1
 800f434:	69ba      	ldr	r2, [r7, #24]
 800f436:	4413      	add	r3, r2
 800f438:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= peakVcselDuration_us;
 800f43a:	69ba      	ldr	r2, [r7, #24]
 800f43c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f43e:	fbb2 f3f3 	udiv	r3, r2, r3
 800f442:	61bb      	str	r3, [r7, #24]

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
 800f444:	69bb      	ldr	r3, [r7, #24]
 800f446:	039b      	lsls	r3, r3, #14
 800f448:	61bb      	str	r3, [r7, #24]

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
 800f44a:	69fb      	ldr	r3, [r7, #28]
 800f44c:	085b      	lsrs	r3, r3, #1
 800f44e:	69ba      	ldr	r2, [r7, #24]
 800f450:	4413      	add	r3, r2
 800f452:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= minSignalNeeded_p4;
 800f454:	69ba      	ldr	r2, [r7, #24]
 800f456:	69fb      	ldr	r3, [r7, #28]
 800f458:	fbb2 f3f3 	udiv	r3, r2, r3
 800f45c:	61bb      	str	r3, [r7, #24]

	/* FixPoint3200 * FixPoint2804 := FixPoint2804*/
	minSignalNeeded *= minSignalNeeded_p1;
 800f45e:	69bb      	ldr	r3, [r7, #24]
 800f460:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800f462:	fb02 f303 	mul.w	r3, r2, r3
 800f466:	61bb      	str	r3, [r7, #24]
	 * and 10E-22 on the denominator.
	 * We do this because 32bit fix point calculation can't
	 * handle the larger and smaller elements of this equation,
	 * i.e. speed of light and pulse widths.
	 */
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800f468:	69bb      	ldr	r3, [r7, #24]
 800f46a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800f46e:	4a25      	ldr	r2, [pc, #148]	; (800f504 <VL53L0X_calc_dmax+0x234>)
 800f470:	fba2 2303 	umull	r2, r3, r2, r3
 800f474:	099b      	lsrs	r3, r3, #6
 800f476:	61bb      	str	r3, [r7, #24]
	minSignalNeeded <<= 4;
 800f478:	69bb      	ldr	r3, [r7, #24]
 800f47a:	011b      	lsls	r3, r3, #4
 800f47c:	61bb      	str	r3, [r7, #24]

	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800f47e:	69bb      	ldr	r3, [r7, #24]
 800f480:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800f484:	4a1f      	ldr	r2, [pc, #124]	; (800f504 <VL53L0X_calc_dmax+0x234>)
 800f486:	fba2 2303 	umull	r2, r3, r2, r3
 800f48a:	099b      	lsrs	r3, r3, #6
 800f48c:	61bb      	str	r3, [r7, #24]

	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;
 800f48e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f490:	3380      	adds	r3, #128	; 0x80
 800f492:	0a1b      	lsrs	r3, r3, #8
 800f494:	617b      	str	r3, [r7, #20]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
 800f496:	697b      	ldr	r3, [r7, #20]
 800f498:	2b00      	cmp	r3, #0
 800f49a:	d008      	beq.n	800f4ae <VL53L0X_calc_dmax+0x1de>
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 800f49c:	697b      	ldr	r3, [r7, #20]
 800f49e:	085a      	lsrs	r2, r3, #1
 800f4a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f4a2:	441a      	add	r2, r3
 800f4a4:	697b      	ldr	r3, [r7, #20]
 800f4a6:	fbb2 f3f3 	udiv	r3, r2, r3
 800f4aa:	65bb      	str	r3, [r7, #88]	; 0x58
 800f4ac:	e001      	b.n	800f4b2 <VL53L0X_calc_dmax+0x1e2>
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;
 800f4ae:	2300      	movs	r3, #0
 800f4b0:	65bb      	str	r3, [r7, #88]	; 0x58

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 800f4b2:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800f4b4:	f7fe f9b9 	bl	800d82a <VL53L0X_isqrt>
 800f4b8:	6138      	str	r0, [r7, #16]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 800f4ba:	69bb      	ldr	r3, [r7, #24]
 800f4bc:	2b00      	cmp	r3, #0
 800f4be:	d008      	beq.n	800f4d2 <VL53L0X_calc_dmax+0x202>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 800f4c0:	69bb      	ldr	r3, [r7, #24]
 800f4c2:	085a      	lsrs	r2, r3, #1
 800f4c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f4c6:	441a      	add	r2, r3
 800f4c8:	69bb      	ldr	r3, [r7, #24]
 800f4ca:	fbb2 f3f3 	udiv	r3, r2, r3
 800f4ce:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f4d0:	e001      	b.n	800f4d6 <VL53L0X_calc_dmax+0x206>
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
 800f4d2:	2300      	movs	r3, #0
 800f4d4:	65fb      	str	r3, [r7, #92]	; 0x5c

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 800f4d6:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800f4d8:	f7fe f9a7 	bl	800d82a <VL53L0X_isqrt>
 800f4dc:	65f8      	str	r0, [r7, #92]	; 0x5c

	*pdmax_mm = dmaxDark;
 800f4de:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f4e0:	693a      	ldr	r2, [r7, #16]
 800f4e2:	601a      	str	r2, [r3, #0]
	if (dmaxDark > dmaxAmbient)
 800f4e4:	693a      	ldr	r2, [r7, #16]
 800f4e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f4e8:	429a      	cmp	r2, r3
 800f4ea:	d902      	bls.n	800f4f2 <VL53L0X_calc_dmax+0x222>
		*pdmax_mm = dmaxAmbient;
 800f4ec:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f4ee:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f4f0:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);

	return Status;
 800f4f2:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
}
 800f4f6:	4618      	mov	r0, r3
 800f4f8:	3768      	adds	r7, #104	; 0x68
 800f4fa:	46bd      	mov	sp, r7
 800f4fc:	bd80      	pop	{r7, pc}
 800f4fe:	bf00      	nop
 800f500:	fff00000 	.word	0xfff00000
 800f504:	10624dd3 	.word	0x10624dd3

0800f508 <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 800f508:	b580      	push	{r7, lr}
 800f50a:	b0b4      	sub	sp, #208	; 0xd0
 800f50c:	af04      	add	r7, sp, #16
 800f50e:	60f8      	str	r0, [r7, #12]
 800f510:	60b9      	str	r1, [r7, #8]
 800f512:	607a      	str	r2, [r7, #4]
 800f514:	603b      	str	r3, [r7, #0]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 800f516:	f44f 7348 	mov.w	r3, #800	; 0x320
 800f51a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 800f51e:	f44f 7316 	mov.w	r3, #600	; 0x258
 800f522:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	const FixPoint1616_t cDfltFinalRangeIntegrationTimeMilliSecs	= 0x00190000; /* 25ms */
 800f526:	f44f 13c8 	mov.w	r3, #1638400	; 0x190000
 800f52a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 800f52e:	f241 235c 	movw	r3, #4700	; 0x125c
 800f532:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 800f536:	4b9e      	ldr	r3, [pc, #632]	; (800f7b0 <VL53L0X_calc_sigma_estimate+0x2a8>)
 800f538:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 800f53c:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800f540:	67fb      	str	r3, [r7, #124]	; 0x7c
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 800f542:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 800f546:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f54a:	fbb2 f3f3 	udiv	r3, r2, r3
 800f54e:	67bb      	str	r3, [r7, #120]	; 0x78
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 800f550:	4b98      	ldr	r3, [pc, #608]	; (800f7b4 <VL53L0X_calc_sigma_estimate+0x2ac>)
 800f552:	677b      	str	r3, [r7, #116]	; 0x74
	const uint32_t c16BitRoundingParam		= 0x00008000;
 800f554:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f558:	673b      	str	r3, [r7, #112]	; 0x70
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 800f55a:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 800f55e:	66fb      	str	r3, [r7, #108]	; 0x6c
	const uint32_t cPllPeriod_ps			= 1655;
 800f560:	f240 6377 	movw	r3, #1655	; 0x677
 800f564:	66bb      	str	r3, [r7, #104]	; 0x68
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800f566:	2300      	movs	r3, #0
 800f568:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	 * Estimates the range sigma
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 800f56c:	68fb      	ldr	r3, [r7, #12]
 800f56e:	6a1b      	ldr	r3, [r3, #32]
 800f570:	617b      	str	r3, [r7, #20]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 800f572:	68bb      	ldr	r3, [r7, #8]
 800f574:	691b      	ldr	r3, [r3, #16]
 800f576:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800f57a:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 800f57e:	0c1b      	lsrs	r3, r3, #16
 800f580:	667b      	str	r3, [r7, #100]	; 0x64

	correctedSignalRate_mcps =
 800f582:	68bb      	ldr	r3, [r7, #8]
 800f584:	68db      	ldr	r3, [r3, #12]
 800f586:	663b      	str	r3, [r7, #96]	; 0x60
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 800f588:	f107 0310 	add.w	r3, r7, #16
 800f58c:	461a      	mov	r2, r3
 800f58e:	68b9      	ldr	r1, [r7, #8]
 800f590:	68f8      	ldr	r0, [r7, #12]
 800f592:	f7ff fe78 	bl	800f286 <VL53L0X_get_total_signal_rate>
 800f596:	4603      	mov	r3, r0
 800f598:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 800f59c:	f107 0314 	add.w	r3, r7, #20
 800f5a0:	461a      	mov	r2, r3
 800f5a2:	68b9      	ldr	r1, [r7, #8]
 800f5a4:	68f8      	ldr	r0, [r7, #12]
 800f5a6:	f7ff fe3f 	bl	800f228 <VL53L0X_get_total_xtalk_rate>
 800f5aa:	4603      	mov	r3, r0
 800f5ac:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 800f5b0:	693b      	ldr	r3, [r7, #16]
 800f5b2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800f5b6:	fb02 f303 	mul.w	r3, r2, r3
 800f5ba:	65fb      	str	r3, [r7, #92]	; 0x5c
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 800f5bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f5be:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800f5c2:	0c1b      	lsrs	r3, r3, #16
 800f5c4:	65fb      	str	r3, [r7, #92]	; 0x5c

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 800f5c6:	697b      	ldr	r3, [r7, #20]
 800f5c8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800f5cc:	fb02 f303 	mul.w	r3, r2, r3
 800f5d0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 800f5d4:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800f5d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f5da:	429a      	cmp	r2, r3
 800f5dc:	d902      	bls.n	800f5e4 <VL53L0X_calc_sigma_estimate+0xdc>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 800f5de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f5e0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (Status == VL53L0X_ERROR_NONE) {
 800f5e4:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800f5e8:	2b00      	cmp	r3, #0
 800f5ea:	d168      	bne.n	800f6be <VL53L0X_calc_sigma_estimate+0x1b6>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800f5ec:	68fb      	ldr	r3, [r7, #12]
 800f5ee:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800f5f2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800f5f6:	68fb      	ldr	r3, [r7, #12]
 800f5f8:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 800f5fc:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800f600:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800f604:	461a      	mov	r2, r3
 800f606:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800f60a:	68f8      	ldr	r0, [r7, #12]
 800f60c:	f7fe feb2 	bl	800e374 <VL53L0X_calc_timeout_mclks>
 800f610:	6578      	str	r0, [r7, #84]	; 0x54
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800f612:	68fb      	ldr	r3, [r7, #12]
 800f614:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800f618:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800f61c:	68fb      	ldr	r3, [r7, #12]
 800f61e:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 800f622:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800f626:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800f62a:	461a      	mov	r2, r3
 800f62c:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 800f630:	68f8      	ldr	r0, [r7, #12]
 800f632:	f7fe fe9f 	bl	800e374 <VL53L0X_calc_timeout_mclks>
 800f636:	64f8      	str	r0, [r7, #76]	; 0x4c
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 800f638:	2303      	movs	r3, #3
 800f63a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		if (finalRangeVcselPCLKS == 8)
 800f63e:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800f642:	2b08      	cmp	r3, #8
 800f644:	d102      	bne.n	800f64c <VL53L0X_calc_sigma_estimate+0x144>
			vcselWidth = 2;
 800f646:	2302      	movs	r3, #2
 800f648:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 800f64c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f64e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f650:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 800f652:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800f656:	fb02 f303 	mul.w	r3, r2, r3
 800f65a:	02db      	lsls	r3, r3, #11
 800f65c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800f660:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f664:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800f668:	4a53      	ldr	r2, [pc, #332]	; (800f7b8 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800f66a:	fba2 2303 	umull	r2, r3, r2, r3
 800f66e:	099b      	lsrs	r3, r3, #6
 800f670:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us *= cPllPeriod_ps;
 800f674:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f678:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800f67a:	fb02 f303 	mul.w	r3, r2, r3
 800f67e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800f682:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f686:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800f68a:	4a4b      	ldr	r2, [pc, #300]	; (800f7b8 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800f68c:	fba2 2303 	umull	r2, r3, r2, r3
 800f690:	099b      	lsrs	r3, r3, #6
 800f692:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 800f696:	693b      	ldr	r3, [r7, #16]
 800f698:	3380      	adds	r3, #128	; 0x80
 800f69a:	0a1b      	lsrs	r3, r3, #8
 800f69c:	613b      	str	r3, [r7, #16]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 800f69e:	693a      	ldr	r2, [r7, #16]
 800f6a0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f6a4:	fb02 f303 	mul.w	r3, r2, r3
 800f6a8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 800f6ac:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800f6b0:	3380      	adds	r3, #128	; 0x80
 800f6b2:	0a1b      	lsrs	r3, r3, #8
 800f6b4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 800f6b8:	693b      	ldr	r3, [r7, #16]
 800f6ba:	021b      	lsls	r3, r3, #8
 800f6bc:	613b      	str	r3, [r7, #16]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 800f6be:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800f6c2:	2b00      	cmp	r3, #0
 800f6c4:	d002      	beq.n	800f6cc <VL53L0X_calc_sigma_estimate+0x1c4>
		LOG_FUNCTION_END(Status);
		return Status;
 800f6c6:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800f6ca:	e15e      	b.n	800f98a <VL53L0X_calc_sigma_estimate+0x482>
	}

	if (peakSignalRate_kcps == 0) {
 800f6cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f6ce:	2b00      	cmp	r3, #0
 800f6d0:	d10c      	bne.n	800f6ec <VL53L0X_calc_sigma_estimate+0x1e4>
		*pSigmaEstimate = cSigmaEstMax;
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800f6d8:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 800f6da:	68fb      	ldr	r3, [r7, #12]
 800f6dc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800f6e0:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		*pDmax_mm = 0;
 800f6e4:	683b      	ldr	r3, [r7, #0]
 800f6e6:	2200      	movs	r2, #0
 800f6e8:	601a      	str	r2, [r3, #0]
 800f6ea:	e14c      	b.n	800f986 <VL53L0X_calc_sigma_estimate+0x47e>
	} else {
		if (vcselTotalEventsRtn < 1)
 800f6ec:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800f6f0:	2b00      	cmp	r3, #0
 800f6f2:	d102      	bne.n	800f6fa <VL53L0X_calc_sigma_estimate+0x1f2>
			vcselTotalEventsRtn = 1;
 800f6f4:	2301      	movs	r3, #1
 800f6f6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 800f6fa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f6fe:	64bb      	str	r3, [r7, #72]	; 0x48

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 800f700:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f702:	041a      	lsls	r2, r3, #16
 800f704:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f706:	fbb2 f3f3 	udiv	r3, r2, r3
 800f70a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 800f70e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800f712:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f714:	429a      	cmp	r2, r3
 800f716:	d902      	bls.n	800f71e <VL53L0X_calc_sigma_estimate+0x216>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 800f718:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f71a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 800f71e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800f722:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800f726:	fb02 f303 	mul.w	r3, r2, r3
 800f72a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 800f72e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800f732:	4613      	mov	r3, r2
 800f734:	005b      	lsls	r3, r3, #1
 800f736:	4413      	add	r3, r2
 800f738:	009b      	lsls	r3, r3, #2
 800f73a:	4618      	mov	r0, r3
 800f73c:	f7fe f875 	bl	800d82a <VL53L0X_isqrt>
 800f740:	4603      	mov	r3, r0
 800f742:	005b      	lsls	r3, r3, #1
 800f744:	647b      	str	r3, [r7, #68]	; 0x44

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 800f746:	68bb      	ldr	r3, [r7, #8]
 800f748:	891b      	ldrh	r3, [r3, #8]
 800f74a:	461a      	mov	r2, r3
 800f74c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f74e:	fb02 f303 	mul.w	r3, r2, r3
 800f752:	643b      	str	r3, [r7, #64]	; 0x40
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800f754:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f756:	041a      	lsls	r2, r3, #16
			2 * xTalkCompRate_kcps) + 500)/1000;
 800f758:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800f75c:	005b      	lsls	r3, r3, #1
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800f75e:	1ad3      	subs	r3, r2, r3
			2 * xTalkCompRate_kcps) + 500)/1000;
 800f760:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800f764:	4a14      	ldr	r2, [pc, #80]	; (800f7b8 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800f766:	fba2 2303 	umull	r2, r3, r2, r3
 800f76a:	099b      	lsrs	r3, r3, #6
 800f76c:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* vcselRate + xtalkCompRate */
		diff2_mcps = ((peakSignalRate_kcps << 16) + 500)/1000;
 800f76e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f770:	041b      	lsls	r3, r3, #16
 800f772:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800f776:	4a10      	ldr	r2, [pc, #64]	; (800f7b8 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800f778:	fba2 2303 	umull	r2, r3, r2, r3
 800f77c:	099b      	lsrs	r3, r3, #6
 800f77e:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Shift by 8 bits to increase resolution prior to the
		 * division */
		diff1_mcps <<= 8;
 800f780:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f782:	021b      	lsls	r3, r3, #8
 800f784:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 800f786:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f78a:	fbb2 f3f3 	udiv	r3, r2, r3
 800f78e:	2b00      	cmp	r3, #0
 800f790:	bfb8      	it	lt
 800f792:	425b      	neglt	r3, r3
 800f794:	637b      	str	r3, [r7, #52]	; 0x34

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 800f796:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f798:	021b      	lsls	r3, r3, #8
 800f79a:	637b      	str	r3, [r7, #52]	; 0x34

		if(pRangingMeasurementData->RangeStatus != 0){
 800f79c:	68bb      	ldr	r3, [r7, #8]
 800f79e:	7e1b      	ldrb	r3, [r3, #24]
 800f7a0:	2b00      	cmp	r3, #0
 800f7a2:	d00b      	beq.n	800f7bc <VL53L0X_calc_sigma_estimate+0x2b4>
			pwMult = 1 << 16;
 800f7a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800f7a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800f7ac:	e033      	b.n	800f816 <VL53L0X_calc_sigma_estimate+0x30e>
 800f7ae:	bf00      	nop
 800f7b0:	028f87ae 	.word	0x028f87ae
 800f7b4:	0006999a 	.word	0x0006999a
 800f7b8:	10624dd3 	.word	0x10624dd3
		} else {
			/* FixPoint1616/uint32 = FixPoint1616 */
			pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 800f7bc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f7be:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800f7c2:	fbb2 f3f3 	udiv	r3, r2, r3
 800f7c6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * FixPoint1616 * FixPoint1616 = FixPoint3232, however both
			 * values are small enough such that32 bits will not be
			 * exceeded.
			 */
			pwMult *= ((1 << 16) - xTalkCorrection);
 800f7ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f7cc:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 800f7d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f7d4:	fb02 f303 	mul.w	r3, r2, r3
 800f7d8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3232 >> 16) = FixPoint1616 */
			pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 800f7dc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800f7e0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f7e2:	4413      	add	r3, r2
 800f7e4:	0c1b      	lsrs	r3, r3, #16
 800f7e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
			pwMult += (1 << 16);
 800f7ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f7ee:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800f7f2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * At this point the value will be 1.xx, therefore if we square
			 * the value this will exceed 32 bits. To address this perform
			 * a single shift to the right before the multiplication.
			 */
			pwMult >>= 1;
 800f7f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f7fa:	085b      	lsrs	r3, r3, #1
 800f7fc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
			pwMult = pwMult * pwMult;
 800f800:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f804:	fb03 f303 	mul.w	r3, r3, r3
 800f808:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3430 >> 14) = Fix1616 */
			pwMult >>= 14;
 800f80c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f810:	0b9b      	lsrs	r3, r3, #14
 800f812:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		}

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 800f816:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f81a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f81c:	fb02 f303 	mul.w	r3, r2, r3
 800f820:	633b      	str	r3, [r7, #48]	; 0x30

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 800f822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f824:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800f828:	0c1b      	lsrs	r3, r3, #16
 800f82a:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 800f82c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f82e:	fb03 f303 	mul.w	r3, r3, r3
 800f832:	633b      	str	r3, [r7, #48]	; 0x30

		sqr2 = sigmaEstimateP2;
 800f834:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800f838:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 800f83a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f83c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800f840:	0c1b      	lsrs	r3, r3, #16
 800f842:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 800f844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f846:	fb03 f303 	mul.w	r3, r3, r3
 800f84a:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 800f84c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f84e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f850:	4413      	add	r3, r2
 800f852:	62bb      	str	r3, [r7, #40]	; 0x28

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 800f854:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f856:	f7fd ffe8 	bl	800d82a <VL53L0X_isqrt>
 800f85a:	6278      	str	r0, [r7, #36]	; 0x24

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 800f85c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f85e:	041b      	lsls	r3, r3, #16
 800f860:	627b      	str	r3, [r7, #36]	; 0x24
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 800f862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f864:	3332      	adds	r3, #50	; 0x32
 800f866:	4a4b      	ldr	r2, [pc, #300]	; (800f994 <VL53L0X_calc_sigma_estimate+0x48c>)
 800f868:	fba2 2303 	umull	r2, r3, r2, r3
 800f86c:	095a      	lsrs	r2, r3, #5
 800f86e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f870:	fbb2 f3f3 	udiv	r3, r2, r3
 800f874:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 800f878:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800f87c:	f640 32b5 	movw	r2, #2997	; 0xbb5
 800f880:	fb02 f303 	mul.w	r3, r2, r3
 800f884:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 800f888:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800f88c:	f241 3388 	movw	r3, #5000	; 0x1388
 800f890:	4413      	add	r3, r2
 800f892:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		sigmaEstRtn		 /= 10000;
 800f896:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800f89a:	4a3f      	ldr	r2, [pc, #252]	; (800f998 <VL53L0X_calc_sigma_estimate+0x490>)
 800f89c:	fba2 2303 	umull	r2, r3, r2, r3
 800f8a0:	0b5b      	lsrs	r3, r3, #13
 800f8a2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 800f8a6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800f8aa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f8ac:	429a      	cmp	r2, r3
 800f8ae:	d902      	bls.n	800f8b6 <VL53L0X_calc_sigma_estimate+0x3ae>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstRtn = cSigmaEstRtnMax;
 800f8b0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f8b2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}
		finalRangeIntegrationTimeMilliSecs =
			(finalRangeTimeoutMicroSecs + preRangeTimeoutMicroSecs + 500)/1000;
 800f8b6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800f8ba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800f8be:	4413      	add	r3, r2
 800f8c0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		finalRangeIntegrationTimeMilliSecs =
 800f8c4:	4a35      	ldr	r2, [pc, #212]	; (800f99c <VL53L0X_calc_sigma_estimate+0x494>)
 800f8c6:	fba2 2303 	umull	r2, r3, r2, r3
 800f8ca:	099b      	lsrs	r3, r3, #6
 800f8cc:	623b      	str	r3, [r7, #32]
		/* sigmaEstRef = 1mm * 25ms/final range integration time (inc pre-range)
		 * sqrt(FixPoint1616/int) = FixPoint2408)
		 */
		sigmaEstRef =
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
				finalRangeIntegrationTimeMilliSecs/2)/
 800f8ce:	6a3b      	ldr	r3, [r7, #32]
 800f8d0:	085a      	lsrs	r2, r3, #1
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
 800f8d2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f8d6:	441a      	add	r2, r3
 800f8d8:	6a3b      	ldr	r3, [r7, #32]
 800f8da:	fbb2 f3f3 	udiv	r3, r2, r3
 800f8de:	4618      	mov	r0, r3
 800f8e0:	f7fd ffa3 	bl	800d82a <VL53L0X_isqrt>
 800f8e4:	61f8      	str	r0, [r7, #28]
				finalRangeIntegrationTimeMilliSecs);

		/* FixPoint2408 << 8 = FixPoint1616 */
		sigmaEstRef <<= 8;
 800f8e6:	69fb      	ldr	r3, [r7, #28]
 800f8e8:	021b      	lsls	r3, r3, #8
 800f8ea:	61fb      	str	r3, [r7, #28]
		sigmaEstRef = (sigmaEstRef + 500)/1000;
 800f8ec:	69fb      	ldr	r3, [r7, #28]
 800f8ee:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800f8f2:	4a2a      	ldr	r2, [pc, #168]	; (800f99c <VL53L0X_calc_sigma_estimate+0x494>)
 800f8f4:	fba2 2303 	umull	r2, r3, r2, r3
 800f8f8:	099b      	lsrs	r3, r3, #6
 800f8fa:	61fb      	str	r3, [r7, #28]

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 800f8fc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800f900:	fb03 f303 	mul.w	r3, r3, r3
 800f904:	633b      	str	r3, [r7, #48]	; 0x30
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = sigmaEstRef * sigmaEstRef;
 800f906:	69fb      	ldr	r3, [r7, #28]
 800f908:	fb03 f303 	mul.w	r3, r3, r3
 800f90c:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 800f90e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f912:	4413      	add	r3, r2
 800f914:	4618      	mov	r0, r3
 800f916:	f7fd ff88 	bl	800d82a <VL53L0X_isqrt>
 800f91a:	61b8      	str	r0, [r7, #24]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 800f91c:	69bb      	ldr	r3, [r7, #24]
 800f91e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800f922:	fb02 f303 	mul.w	r3, r2, r3
 800f926:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 800f92a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f92c:	2b00      	cmp	r3, #0
 800f92e:	d009      	beq.n	800f944 <VL53L0X_calc_sigma_estimate+0x43c>
 800f930:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800f934:	2b00      	cmp	r3, #0
 800f936:	d005      	beq.n	800f944 <VL53L0X_calc_sigma_estimate+0x43c>
 800f938:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800f93c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f940:	429a      	cmp	r2, r3
 800f942:	d903      	bls.n	800f94c <VL53L0X_calc_sigma_estimate+0x444>
				(sigmaEstimate > cSigmaEstMax)) {
				sigmaEstimate = cSigmaEstMax;
 800f944:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f948:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800f952:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	681a      	ldr	r2, [r3, #0]
 800f958:	68fb      	ldr	r3, [r7, #12]
 800f95a:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		Status = VL53L0X_calc_dmax(
 800f95e:	6939      	ldr	r1, [r7, #16]
 800f960:	683b      	ldr	r3, [r7, #0]
 800f962:	9303      	str	r3, [sp, #12]
 800f964:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f968:	9302      	str	r3, [sp, #8]
 800f96a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800f96e:	9301      	str	r3, [sp, #4]
 800f970:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f972:	9300      	str	r3, [sp, #0]
 800f974:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f978:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f97a:	68f8      	ldr	r0, [r7, #12]
 800f97c:	f7ff fca8 	bl	800f2d0 <VL53L0X_calc_dmax>
 800f980:	4603      	mov	r3, r0
 800f982:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			peakVcselDuration_us,
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800f986:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
}
 800f98a:	4618      	mov	r0, r3
 800f98c:	37c0      	adds	r7, #192	; 0xc0
 800f98e:	46bd      	mov	sp, r7
 800f990:	bd80      	pop	{r7, pc}
 800f992:	bf00      	nop
 800f994:	51eb851f 	.word	0x51eb851f
 800f998:	d1b71759 	.word	0xd1b71759
 800f99c:	10624dd3 	.word	0x10624dd3

0800f9a0 <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 800f9a0:	b580      	push	{r7, lr}
 800f9a2:	b090      	sub	sp, #64	; 0x40
 800f9a4:	af00      	add	r7, sp, #0
 800f9a6:	60f8      	str	r0, [r7, #12]
 800f9a8:	607a      	str	r2, [r7, #4]
 800f9aa:	461a      	mov	r2, r3
 800f9ac:	460b      	mov	r3, r1
 800f9ae:	72fb      	strb	r3, [r7, #11]
 800f9b0:	4613      	mov	r3, r2
 800f9b2:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800f9b4:	2300      	movs	r3, #0
 800f9b6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 800f9ba:	2300      	movs	r3, #0
 800f9bc:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint8_t SignalRefClipflag = 0;
 800f9c0:	2300      	movs	r3, #0
 800f9c2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 800f9c6:	2300      	movs	r3, #0
 800f9c8:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 800f9cc:	2300      	movs	r3, #0
 800f9ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 800f9d2:	2300      	movs	r3, #0
 800f9d4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 800f9d8:	2300      	movs	r3, #0
 800f9da:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 800f9de:	2300      	movs	r3, #0
 800f9e0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 800f9e4:	2300      	movs	r3, #0
 800f9e6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint16_t tmpWord = 0;
 800f9ea:	2300      	movs	r3, #0
 800f9ec:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 800f9ee:	2300      	movs	r3, #0
 800f9f0:	613b      	str	r3, [r7, #16]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 800f9f2:	7afb      	ldrb	r3, [r7, #11]
 800f9f4:	10db      	asrs	r3, r3, #3
 800f9f6:	b2db      	uxtb	r3, r3
 800f9f8:	f003 030f 	and.w	r3, r3, #15
 800f9fc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	if (DeviceRangeStatusInternal == 0 ||
 800fa00:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800fa04:	2b00      	cmp	r3, #0
 800fa06:	d017      	beq.n	800fa38 <VL53L0X_get_pal_range_status+0x98>
 800fa08:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800fa0c:	2b05      	cmp	r3, #5
 800fa0e:	d013      	beq.n	800fa38 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 5 ||
 800fa10:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800fa14:	2b07      	cmp	r3, #7
 800fa16:	d00f      	beq.n	800fa38 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 7 ||
 800fa18:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800fa1c:	2b0c      	cmp	r3, #12
 800fa1e:	d00b      	beq.n	800fa38 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 12 ||
 800fa20:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800fa24:	2b0d      	cmp	r3, #13
 800fa26:	d007      	beq.n	800fa38 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 13 ||
 800fa28:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800fa2c:	2b0e      	cmp	r3, #14
 800fa2e:	d003      	beq.n	800fa38 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 14 ||
 800fa30:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800fa34:	2b0f      	cmp	r3, #15
 800fa36:	d103      	bne.n	800fa40 <VL53L0X_get_pal_range_status+0xa0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 800fa38:	2301      	movs	r3, #1
 800fa3a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800fa3e:	e002      	b.n	800fa46 <VL53L0X_get_pal_range_status+0xa6>
	} else {
		NoneFlag = 0;
 800fa40:	2300      	movs	r3, #0
 800fa42:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800fa46:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800fa4a:	2b00      	cmp	r3, #0
 800fa4c:	d109      	bne.n	800fa62 <VL53L0X_get_pal_range_status+0xc2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800fa4e:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800fa52:	461a      	mov	r2, r3
 800fa54:	2100      	movs	r1, #0
 800fa56:	68f8      	ldr	r0, [r7, #12]
 800fa58:	f7fc f980 	bl	800bd5c <VL53L0X_GetLimitCheckEnable>
 800fa5c:	4603      	mov	r3, r0
 800fa5e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 800fa62:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800fa66:	2b00      	cmp	r3, #0
 800fa68:	d02e      	beq.n	800fac8 <VL53L0X_get_pal_range_status+0x128>
 800fa6a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800fa6e:	2b00      	cmp	r3, #0
 800fa70:	d12a      	bne.n	800fac8 <VL53L0X_get_pal_range_status+0x128>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 800fa72:	f107 0310 	add.w	r3, r7, #16
 800fa76:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800fa7a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800fa7c:	68f8      	ldr	r0, [r7, #12]
 800fa7e:	f7ff fd43 	bl	800f508 <VL53L0X_calc_sigma_estimate>
 800fa82:	4603      	mov	r3, r0
 800fa84:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 800fa88:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800fa8c:	2b00      	cmp	r3, #0
 800fa8e:	d103      	bne.n	800fa98 <VL53L0X_get_pal_range_status+0xf8>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 800fa90:	693b      	ldr	r3, [r7, #16]
 800fa92:	b29a      	uxth	r2, r3
 800fa94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fa96:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 800fa98:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800fa9c:	2b00      	cmp	r3, #0
 800fa9e:	d113      	bne.n	800fac8 <VL53L0X_get_pal_range_status+0x128>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 800faa0:	f107 0320 	add.w	r3, r7, #32
 800faa4:	461a      	mov	r2, r3
 800faa6:	2100      	movs	r1, #0
 800faa8:	68f8      	ldr	r0, [r7, #12]
 800faaa:	f7fc f9dd 	bl	800be68 <VL53L0X_GetLimitCheckValue>
 800faae:	4603      	mov	r3, r0
 800fab0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 800fab4:	6a3b      	ldr	r3, [r7, #32]
 800fab6:	2b00      	cmp	r3, #0
 800fab8:	d006      	beq.n	800fac8 <VL53L0X_get_pal_range_status+0x128>
				(SigmaEstimate > SigmaLimitValue))
 800faba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fabc:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 800fabe:	429a      	cmp	r2, r3
 800fac0:	d902      	bls.n	800fac8 <VL53L0X_get_pal_range_status+0x128>
					/* Limit Fail */
					SigmaLimitflag = 1;
 800fac2:	2301      	movs	r3, #1
 800fac4:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800fac8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800facc:	2b00      	cmp	r3, #0
 800face:	d109      	bne.n	800fae4 <VL53L0X_get_pal_range_status+0x144>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800fad0:	f107 0329 	add.w	r3, r7, #41	; 0x29
 800fad4:	461a      	mov	r2, r3
 800fad6:	2102      	movs	r1, #2
 800fad8:	68f8      	ldr	r0, [r7, #12]
 800fada:	f7fc f93f 	bl	800bd5c <VL53L0X_GetLimitCheckEnable>
 800fade:	4603      	mov	r3, r0
 800fae0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 800fae4:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800fae8:	2b00      	cmp	r3, #0
 800faea:	d044      	beq.n	800fb76 <VL53L0X_get_pal_range_status+0x1d6>
 800faec:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800faf0:	2b00      	cmp	r3, #0
 800faf2:	d140      	bne.n	800fb76 <VL53L0X_get_pal_range_status+0x1d6>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800faf4:	f107 031c 	add.w	r3, r7, #28
 800faf8:	461a      	mov	r2, r3
 800fafa:	2102      	movs	r1, #2
 800fafc:	68f8      	ldr	r0, [r7, #12]
 800fafe:	f7fc f9b3 	bl	800be68 <VL53L0X_GetLimitCheckValue>
 800fb02:	4603      	mov	r3, r0
 800fb04:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		/* Read LastSignalRefMcps from device */
		if (Status == VL53L0X_ERROR_NONE)
 800fb08:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800fb0c:	2b00      	cmp	r3, #0
 800fb0e:	d107      	bne.n	800fb20 <VL53L0X_get_pal_range_status+0x180>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800fb10:	2201      	movs	r2, #1
 800fb12:	21ff      	movs	r1, #255	; 0xff
 800fb14:	68f8      	ldr	r0, [r7, #12]
 800fb16:	f000 f9bb 	bl	800fe90 <VL53L0X_WrByte>
 800fb1a:	4603      	mov	r3, r0
 800fb1c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		if (Status == VL53L0X_ERROR_NONE)
 800fb20:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800fb24:	2b00      	cmp	r3, #0
 800fb26:	d109      	bne.n	800fb3c <VL53L0X_get_pal_range_status+0x19c>
			Status = VL53L0X_RdWord(Dev,
 800fb28:	f107 0316 	add.w	r3, r7, #22
 800fb2c:	461a      	mov	r2, r3
 800fb2e:	21b6      	movs	r1, #182	; 0xb6
 800fb30:	68f8      	ldr	r0, [r7, #12]
 800fb32:	f000 fa59 	bl	800ffe8 <VL53L0X_RdWord>
 800fb36:	4603      	mov	r3, r0
 800fb38:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
				&tmpWord);

		if (Status == VL53L0X_ERROR_NONE)
 800fb3c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800fb40:	2b00      	cmp	r3, #0
 800fb42:	d107      	bne.n	800fb54 <VL53L0X_get_pal_range_status+0x1b4>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800fb44:	2200      	movs	r2, #0
 800fb46:	21ff      	movs	r1, #255	; 0xff
 800fb48:	68f8      	ldr	r0, [r7, #12]
 800fb4a:	f000 f9a1 	bl	800fe90 <VL53L0X_WrByte>
 800fb4e:	4603      	mov	r3, r0
 800fb50:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 800fb54:	8afb      	ldrh	r3, [r7, #22]
 800fb56:	025b      	lsls	r3, r3, #9
 800fb58:	62fb      	str	r3, [r7, #44]	; 0x2c
		PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 800fb5a:	68fb      	ldr	r3, [r7, #12]
 800fb5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fb5e:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148

		if ((SignalRefClipValue > 0) &&
 800fb62:	69fb      	ldr	r3, [r7, #28]
 800fb64:	2b00      	cmp	r3, #0
 800fb66:	d006      	beq.n	800fb76 <VL53L0X_get_pal_range_status+0x1d6>
				(LastSignalRefMcps > SignalRefClipValue)) {
 800fb68:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 800fb6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fb6c:	429a      	cmp	r2, r3
 800fb6e:	d902      	bls.n	800fb76 <VL53L0X_get_pal_range_status+0x1d6>
			/* Limit Fail */
			SignalRefClipflag = 1;
 800fb70:	2301      	movs	r3, #1
 800fb72:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800fb76:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800fb7a:	2b00      	cmp	r3, #0
 800fb7c:	d109      	bne.n	800fb92 <VL53L0X_get_pal_range_status+0x1f2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800fb7e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800fb82:	461a      	mov	r2, r3
 800fb84:	2103      	movs	r1, #3
 800fb86:	68f8      	ldr	r0, [r7, #12]
 800fb88:	f7fc f8e8 	bl	800bd5c <VL53L0X_GetLimitCheckEnable>
 800fb8c:	4603      	mov	r3, r0
 800fb8e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 800fb92:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800fb96:	2b00      	cmp	r3, #0
 800fb98:	d023      	beq.n	800fbe2 <VL53L0X_get_pal_range_status+0x242>
 800fb9a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800fb9e:	2b00      	cmp	r3, #0
 800fba0:	d11f      	bne.n	800fbe2 <VL53L0X_get_pal_range_status+0x242>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 800fba2:	893b      	ldrh	r3, [r7, #8]
 800fba4:	2b00      	cmp	r3, #0
 800fba6:	d102      	bne.n	800fbae <VL53L0X_get_pal_range_status+0x20e>
			SignalRatePerSpad = 0;
 800fba8:	2300      	movs	r3, #0
 800fbaa:	637b      	str	r3, [r7, #52]	; 0x34
 800fbac:	e005      	b.n	800fbba <VL53L0X_get_pal_range_status+0x21a>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	021a      	lsls	r2, r3, #8
 800fbb2:	893b      	ldrh	r3, [r7, #8]
 800fbb4:	fbb2 f3f3 	udiv	r3, r2, r3
 800fbb8:	637b      	str	r3, [r7, #52]	; 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800fbba:	f107 0318 	add.w	r3, r7, #24
 800fbbe:	461a      	mov	r2, r3
 800fbc0:	2103      	movs	r1, #3
 800fbc2:	68f8      	ldr	r0, [r7, #12]
 800fbc4:	f7fc f950 	bl	800be68 <VL53L0X_GetLimitCheckValue>
 800fbc8:	4603      	mov	r3, r0
 800fbca:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 800fbce:	69bb      	ldr	r3, [r7, #24]
 800fbd0:	2b00      	cmp	r3, #0
 800fbd2:	d006      	beq.n	800fbe2 <VL53L0X_get_pal_range_status+0x242>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 800fbd4:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 800fbd6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fbd8:	429a      	cmp	r2, r3
 800fbda:	d202      	bcs.n	800fbe2 <VL53L0X_get_pal_range_status+0x242>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 800fbdc:	2301      	movs	r3, #1
 800fbde:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800fbe2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800fbe6:	2b00      	cmp	r3, #0
 800fbe8:	d14a      	bne.n	800fc80 <VL53L0X_get_pal_range_status+0x2e0>
		if (NoneFlag == 1) {
 800fbea:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800fbee:	2b01      	cmp	r3, #1
 800fbf0:	d103      	bne.n	800fbfa <VL53L0X_get_pal_range_status+0x25a>
			*pPalRangeStatus = 255;	 /* NONE */
 800fbf2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fbf4:	22ff      	movs	r2, #255	; 0xff
 800fbf6:	701a      	strb	r2, [r3, #0]
 800fbf8:	e042      	b.n	800fc80 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 1 ||
 800fbfa:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800fbfe:	2b01      	cmp	r3, #1
 800fc00:	d007      	beq.n	800fc12 <VL53L0X_get_pal_range_status+0x272>
 800fc02:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800fc06:	2b02      	cmp	r3, #2
 800fc08:	d003      	beq.n	800fc12 <VL53L0X_get_pal_range_status+0x272>
					DeviceRangeStatusInternal == 2 ||
 800fc0a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800fc0e:	2b03      	cmp	r3, #3
 800fc10:	d103      	bne.n	800fc1a <VL53L0X_get_pal_range_status+0x27a>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 800fc12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fc14:	2205      	movs	r2, #5
 800fc16:	701a      	strb	r2, [r3, #0]
 800fc18:	e032      	b.n	800fc80 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 6 ||
 800fc1a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800fc1e:	2b06      	cmp	r3, #6
 800fc20:	d003      	beq.n	800fc2a <VL53L0X_get_pal_range_status+0x28a>
 800fc22:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800fc26:	2b09      	cmp	r3, #9
 800fc28:	d103      	bne.n	800fc32 <VL53L0X_get_pal_range_status+0x292>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 800fc2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fc2c:	2204      	movs	r2, #4
 800fc2e:	701a      	strb	r2, [r3, #0]
 800fc30:	e026      	b.n	800fc80 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 8 ||
 800fc32:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800fc36:	2b08      	cmp	r3, #8
 800fc38:	d007      	beq.n	800fc4a <VL53L0X_get_pal_range_status+0x2aa>
 800fc3a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800fc3e:	2b0a      	cmp	r3, #10
 800fc40:	d003      	beq.n	800fc4a <VL53L0X_get_pal_range_status+0x2aa>
					DeviceRangeStatusInternal == 10 ||
 800fc42:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800fc46:	2b01      	cmp	r3, #1
 800fc48:	d103      	bne.n	800fc52 <VL53L0X_get_pal_range_status+0x2b2>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 800fc4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fc4c:	2203      	movs	r2, #3
 800fc4e:	701a      	strb	r2, [r3, #0]
 800fc50:	e016      	b.n	800fc80 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 4 ||
 800fc52:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800fc56:	2b04      	cmp	r3, #4
 800fc58:	d003      	beq.n	800fc62 <VL53L0X_get_pal_range_status+0x2c2>
 800fc5a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800fc5e:	2b01      	cmp	r3, #1
 800fc60:	d103      	bne.n	800fc6a <VL53L0X_get_pal_range_status+0x2ca>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 800fc62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fc64:	2202      	movs	r2, #2
 800fc66:	701a      	strb	r2, [r3, #0]
 800fc68:	e00a      	b.n	800fc80 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (SigmaLimitflag == 1) {
 800fc6a:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800fc6e:	2b01      	cmp	r3, #1
 800fc70:	d103      	bne.n	800fc7a <VL53L0X_get_pal_range_status+0x2da>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 800fc72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fc74:	2201      	movs	r2, #1
 800fc76:	701a      	strb	r2, [r3, #0]
 800fc78:	e002      	b.n	800fc80 <VL53L0X_get_pal_range_status+0x2e0>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 800fc7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fc7c:	2200      	movs	r2, #0
 800fc7e:	701a      	strb	r2, [r3, #0]
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 800fc80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fc82:	781b      	ldrb	r3, [r3, #0]
 800fc84:	2b00      	cmp	r3, #0
 800fc86:	d102      	bne.n	800fc8e <VL53L0X_get_pal_range_status+0x2ee>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 800fc88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fc8a:	2200      	movs	r2, #0
 800fc8c:	815a      	strh	r2, [r3, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800fc8e:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 800fc92:	461a      	mov	r2, r3
 800fc94:	2101      	movs	r1, #1
 800fc96:	68f8      	ldr	r0, [r7, #12]
 800fc98:	f7fc f860 	bl	800bd5c <VL53L0X_GetLimitCheckEnable>
 800fc9c:	4603      	mov	r3, r0
 800fc9e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 800fca2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800fca6:	2b00      	cmp	r3, #0
 800fca8:	d14f      	bne.n	800fd4a <VL53L0X_get_pal_range_status+0x3aa>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 800fcaa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800fcae:	2b00      	cmp	r3, #0
 800fcb0:	d003      	beq.n	800fcba <VL53L0X_get_pal_range_status+0x31a>
 800fcb2:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800fcb6:	2b01      	cmp	r3, #1
 800fcb8:	d103      	bne.n	800fcc2 <VL53L0X_get_pal_range_status+0x322>
			Temp8 = 1;
 800fcba:	2301      	movs	r3, #1
 800fcbc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fcc0:	e002      	b.n	800fcc8 <VL53L0X_get_pal_range_status+0x328>
		else
			Temp8 = 0;
 800fcc2:	2300      	movs	r3, #0
 800fcc4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800fcc8:	68fb      	ldr	r3, [r7, #12]
 800fcca:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800fcce:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 800fcd2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800fcd6:	2b04      	cmp	r3, #4
 800fcd8:	d003      	beq.n	800fce2 <VL53L0X_get_pal_range_status+0x342>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 800fcda:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 800fcde:	2b00      	cmp	r3, #0
 800fce0:	d103      	bne.n	800fcea <VL53L0X_get_pal_range_status+0x34a>
			Temp8 = 1;
 800fce2:	2301      	movs	r3, #1
 800fce4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fce8:	e002      	b.n	800fcf0 <VL53L0X_get_pal_range_status+0x350>
		else
			Temp8 = 0;
 800fcea:	2300      	movs	r3, #0
 800fcec:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800fcf0:	68fb      	ldr	r3, [r7, #12]
 800fcf2:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800fcf6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 800fcfa:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800fcfe:	2b00      	cmp	r3, #0
 800fd00:	d003      	beq.n	800fd0a <VL53L0X_get_pal_range_status+0x36a>
 800fd02:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800fd06:	2b01      	cmp	r3, #1
 800fd08:	d103      	bne.n	800fd12 <VL53L0X_get_pal_range_status+0x372>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 800fd0a:	2301      	movs	r3, #1
 800fd0c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fd10:	e002      	b.n	800fd18 <VL53L0X_get_pal_range_status+0x378>
		else
			Temp8 = 0;
 800fd12:	2300      	movs	r3, #0
 800fd14:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800fd18:	68fb      	ldr	r3, [r7, #12]
 800fd1a:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800fd1e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 800fd22:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800fd26:	2b00      	cmp	r3, #0
 800fd28:	d003      	beq.n	800fd32 <VL53L0X_get_pal_range_status+0x392>
 800fd2a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800fd2e:	2b01      	cmp	r3, #1
 800fd30:	d103      	bne.n	800fd3a <VL53L0X_get_pal_range_status+0x39a>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 800fd32:	2301      	movs	r3, #1
 800fd34:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fd38:	e002      	b.n	800fd40 <VL53L0X_get_pal_range_status+0x3a0>
		else
			Temp8 = 0;
 800fd3a:	2300      	movs	r3, #0
 800fd3c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800fd40:	68fb      	ldr	r3, [r7, #12]
 800fd42:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800fd46:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800fd4a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f

}
 800fd4e:	4618      	mov	r0, r3
 800fd50:	3740      	adds	r7, #64	; 0x40
 800fd52:	46bd      	mov	sp, r7
 800fd54:	bd80      	pop	{r7, pc}

0800fd56 <_I2CWrite>:
#endif


uint8_t _I2CBuffer[64];

int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800fd56:	b580      	push	{r7, lr}
 800fd58:	b088      	sub	sp, #32
 800fd5a:	af02      	add	r7, sp, #8
 800fd5c:	60f8      	str	r0, [r7, #12]
 800fd5e:	60b9      	str	r1, [r7, #8]
 800fd60:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	330a      	adds	r3, #10
 800fd66:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 800fd68:	68fb      	ldr	r3, [r7, #12]
 800fd6a:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 800fd6e:	68fb      	ldr	r3, [r7, #12]
 800fd70:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800fd74:	b299      	uxth	r1, r3
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	b29a      	uxth	r2, r3
 800fd7a:	697b      	ldr	r3, [r7, #20]
 800fd7c:	9300      	str	r3, [sp, #0]
 800fd7e:	4613      	mov	r3, r2
 800fd80:	68ba      	ldr	r2, [r7, #8]
 800fd82:	f7f4 fbdb 	bl	800453c <HAL_I2C_Master_Transmit>
 800fd86:	4603      	mov	r3, r0
 800fd88:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800fd8a:	693b      	ldr	r3, [r7, #16]
}
 800fd8c:	4618      	mov	r0, r3
 800fd8e:	3718      	adds	r7, #24
 800fd90:	46bd      	mov	sp, r7
 800fd92:	bd80      	pop	{r7, pc}

0800fd94 <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800fd94:	b580      	push	{r7, lr}
 800fd96:	b088      	sub	sp, #32
 800fd98:	af02      	add	r7, sp, #8
 800fd9a:	60f8      	str	r0, [r7, #12]
 800fd9c:	60b9      	str	r1, [r7, #8]
 800fd9e:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	330a      	adds	r3, #10
 800fda4:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 800fda6:	68fb      	ldr	r3, [r7, #12]
 800fda8:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 800fdac:	68fb      	ldr	r3, [r7, #12]
 800fdae:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800fdb2:	f043 0301 	orr.w	r3, r3, #1
 800fdb6:	b2db      	uxtb	r3, r3
 800fdb8:	b299      	uxth	r1, r3
 800fdba:	687b      	ldr	r3, [r7, #4]
 800fdbc:	b29a      	uxth	r2, r3
 800fdbe:	697b      	ldr	r3, [r7, #20]
 800fdc0:	9300      	str	r3, [sp, #0]
 800fdc2:	4613      	mov	r3, r2
 800fdc4:	68ba      	ldr	r2, [r7, #8]
 800fdc6:	f7f4 fcad 	bl	8004724 <HAL_I2C_Master_Receive>
 800fdca:	4603      	mov	r3, r0
 800fdcc:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800fdce:	693b      	ldr	r3, [r7, #16]
}
 800fdd0:	4618      	mov	r0, r3
 800fdd2:	3718      	adds	r7, #24
 800fdd4:	46bd      	mov	sp, r7
 800fdd6:	bd80      	pop	{r7, pc}

0800fdd8 <VL53L0X_WriteMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800fdd8:	b580      	push	{r7, lr}
 800fdda:	b086      	sub	sp, #24
 800fddc:	af00      	add	r7, sp, #0
 800fdde:	60f8      	str	r0, [r7, #12]
 800fde0:	607a      	str	r2, [r7, #4]
 800fde2:	603b      	str	r3, [r7, #0]
 800fde4:	460b      	mov	r3, r1
 800fde6:	72fb      	strb	r3, [r7, #11]
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800fde8:	2300      	movs	r3, #0
 800fdea:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 800fdec:	683b      	ldr	r3, [r7, #0]
 800fdee:	2b3f      	cmp	r3, #63	; 0x3f
 800fdf0:	d902      	bls.n	800fdf8 <VL53L0X_WriteMulti+0x20>
        return VL53L0X_ERROR_INVALID_PARAMS;
 800fdf2:	f06f 0303 	mvn.w	r3, #3
 800fdf6:	e016      	b.n	800fe26 <VL53L0X_WriteMulti+0x4e>
    }
    _I2CBuffer[0] = index;
 800fdf8:	4a0d      	ldr	r2, [pc, #52]	; (800fe30 <VL53L0X_WriteMulti+0x58>)
 800fdfa:	7afb      	ldrb	r3, [r7, #11]
 800fdfc:	7013      	strb	r3, [r2, #0]
    memcpy(&_I2CBuffer[1], pdata, count);
 800fdfe:	683a      	ldr	r2, [r7, #0]
 800fe00:	6879      	ldr	r1, [r7, #4]
 800fe02:	480c      	ldr	r0, [pc, #48]	; (800fe34 <VL53L0X_WriteMulti+0x5c>)
 800fe04:	f000 f99e 	bl	8010144 <memcpy>
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 800fe08:	683b      	ldr	r3, [r7, #0]
 800fe0a:	3301      	adds	r3, #1
 800fe0c:	461a      	mov	r2, r3
 800fe0e:	4908      	ldr	r1, [pc, #32]	; (800fe30 <VL53L0X_WriteMulti+0x58>)
 800fe10:	68f8      	ldr	r0, [r7, #12]
 800fe12:	f7ff ffa0 	bl	800fd56 <_I2CWrite>
 800fe16:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800fe18:	693b      	ldr	r3, [r7, #16]
 800fe1a:	2b00      	cmp	r3, #0
 800fe1c:	d001      	beq.n	800fe22 <VL53L0X_WriteMulti+0x4a>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800fe1e:	23ec      	movs	r3, #236	; 0xec
 800fe20:	75fb      	strb	r3, [r7, #23]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800fe22:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fe26:	4618      	mov	r0, r3
 800fe28:	3718      	adds	r7, #24
 800fe2a:	46bd      	mov	sp, r7
 800fe2c:	bd80      	pop	{r7, pc}
 800fe2e:	bf00      	nop
 800fe30:	2000a14c 	.word	0x2000a14c
 800fe34:	2000a14d 	.word	0x2000a14d

0800fe38 <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800fe38:	b580      	push	{r7, lr}
 800fe3a:	b086      	sub	sp, #24
 800fe3c:	af00      	add	r7, sp, #0
 800fe3e:	60f8      	str	r0, [r7, #12]
 800fe40:	607a      	str	r2, [r7, #4]
 800fe42:	603b      	str	r3, [r7, #0]
 800fe44:	460b      	mov	r3, r1
 800fe46:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800fe48:	2300      	movs	r3, #0
 800fe4a:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800fe4c:	f107 030b 	add.w	r3, r7, #11
 800fe50:	2201      	movs	r2, #1
 800fe52:	4619      	mov	r1, r3
 800fe54:	68f8      	ldr	r0, [r7, #12]
 800fe56:	f7ff ff7e 	bl	800fd56 <_I2CWrite>
 800fe5a:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800fe5c:	693b      	ldr	r3, [r7, #16]
 800fe5e:	2b00      	cmp	r3, #0
 800fe60:	d002      	beq.n	800fe68 <VL53L0X_ReadMulti+0x30>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800fe62:	23ec      	movs	r3, #236	; 0xec
 800fe64:	75fb      	strb	r3, [r7, #23]
        goto done;
 800fe66:	e00c      	b.n	800fe82 <VL53L0X_ReadMulti+0x4a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 800fe68:	683a      	ldr	r2, [r7, #0]
 800fe6a:	6879      	ldr	r1, [r7, #4]
 800fe6c:	68f8      	ldr	r0, [r7, #12]
 800fe6e:	f7ff ff91 	bl	800fd94 <_I2CRead>
 800fe72:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800fe74:	693b      	ldr	r3, [r7, #16]
 800fe76:	2b00      	cmp	r3, #0
 800fe78:	d002      	beq.n	800fe80 <VL53L0X_ReadMulti+0x48>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800fe7a:	23ec      	movs	r3, #236	; 0xec
 800fe7c:	75fb      	strb	r3, [r7, #23]
 800fe7e:	e000      	b.n	800fe82 <VL53L0X_ReadMulti+0x4a>
    }
done:
 800fe80:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 800fe82:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fe86:	4618      	mov	r0, r3
 800fe88:	3718      	adds	r7, #24
 800fe8a:	46bd      	mov	sp, r7
 800fe8c:	bd80      	pop	{r7, pc}
	...

0800fe90 <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 800fe90:	b580      	push	{r7, lr}
 800fe92:	b084      	sub	sp, #16
 800fe94:	af00      	add	r7, sp, #0
 800fe96:	6078      	str	r0, [r7, #4]
 800fe98:	460b      	mov	r3, r1
 800fe9a:	70fb      	strb	r3, [r7, #3]
 800fe9c:	4613      	mov	r3, r2
 800fe9e:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800fea0:	2300      	movs	r3, #0
 800fea2:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800fea4:	4a0b      	ldr	r2, [pc, #44]	; (800fed4 <VL53L0X_WrByte+0x44>)
 800fea6:	78fb      	ldrb	r3, [r7, #3]
 800fea8:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data;
 800feaa:	4a0a      	ldr	r2, [pc, #40]	; (800fed4 <VL53L0X_WrByte+0x44>)
 800feac:	78bb      	ldrb	r3, [r7, #2]
 800feae:	7053      	strb	r3, [r2, #1]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800feb0:	2202      	movs	r2, #2
 800feb2:	4908      	ldr	r1, [pc, #32]	; (800fed4 <VL53L0X_WrByte+0x44>)
 800feb4:	6878      	ldr	r0, [r7, #4]
 800feb6:	f7ff ff4e 	bl	800fd56 <_I2CWrite>
 800feba:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800febc:	68bb      	ldr	r3, [r7, #8]
 800febe:	2b00      	cmp	r3, #0
 800fec0:	d001      	beq.n	800fec6 <VL53L0X_WrByte+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800fec2:	23ec      	movs	r3, #236	; 0xec
 800fec4:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800fec6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800feca:	4618      	mov	r0, r3
 800fecc:	3710      	adds	r7, #16
 800fece:	46bd      	mov	sp, r7
 800fed0:	bd80      	pop	{r7, pc}
 800fed2:	bf00      	nop
 800fed4:	2000a14c 	.word	0x2000a14c

0800fed8 <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 800fed8:	b580      	push	{r7, lr}
 800feda:	b084      	sub	sp, #16
 800fedc:	af00      	add	r7, sp, #0
 800fede:	6078      	str	r0, [r7, #4]
 800fee0:	460b      	mov	r3, r1
 800fee2:	70fb      	strb	r3, [r7, #3]
 800fee4:	4613      	mov	r3, r2
 800fee6:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800fee8:	2300      	movs	r3, #0
 800feea:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800feec:	4a0e      	ldr	r2, [pc, #56]	; (800ff28 <VL53L0X_WrWord+0x50>)
 800feee:	78fb      	ldrb	r3, [r7, #3]
 800fef0:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data >> 8;
 800fef2:	883b      	ldrh	r3, [r7, #0]
 800fef4:	0a1b      	lsrs	r3, r3, #8
 800fef6:	b29b      	uxth	r3, r3
 800fef8:	b2da      	uxtb	r2, r3
 800fefa:	4b0b      	ldr	r3, [pc, #44]	; (800ff28 <VL53L0X_WrWord+0x50>)
 800fefc:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 800fefe:	883b      	ldrh	r3, [r7, #0]
 800ff00:	b2da      	uxtb	r2, r3
 800ff02:	4b09      	ldr	r3, [pc, #36]	; (800ff28 <VL53L0X_WrWord+0x50>)
 800ff04:	709a      	strb	r2, [r3, #2]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 800ff06:	2203      	movs	r2, #3
 800ff08:	4907      	ldr	r1, [pc, #28]	; (800ff28 <VL53L0X_WrWord+0x50>)
 800ff0a:	6878      	ldr	r0, [r7, #4]
 800ff0c:	f7ff ff23 	bl	800fd56 <_I2CWrite>
 800ff10:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800ff12:	68bb      	ldr	r3, [r7, #8]
 800ff14:	2b00      	cmp	r3, #0
 800ff16:	d001      	beq.n	800ff1c <VL53L0X_WrWord+0x44>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ff18:	23ec      	movs	r3, #236	; 0xec
 800ff1a:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800ff1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ff20:	4618      	mov	r0, r3
 800ff22:	3710      	adds	r7, #16
 800ff24:	46bd      	mov	sp, r7
 800ff26:	bd80      	pop	{r7, pc}
 800ff28:	2000a14c 	.word	0x2000a14c

0800ff2c <VL53L0X_UpdateByte>:
    }
    VL53L0X_PutI2cBus();
    return Status;
}

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 800ff2c:	b580      	push	{r7, lr}
 800ff2e:	b084      	sub	sp, #16
 800ff30:	af00      	add	r7, sp, #0
 800ff32:	6078      	str	r0, [r7, #4]
 800ff34:	4608      	mov	r0, r1
 800ff36:	4611      	mov	r1, r2
 800ff38:	461a      	mov	r2, r3
 800ff3a:	4603      	mov	r3, r0
 800ff3c:	70fb      	strb	r3, [r7, #3]
 800ff3e:	460b      	mov	r3, r1
 800ff40:	70bb      	strb	r3, [r7, #2]
 800ff42:	4613      	mov	r3, r2
 800ff44:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ff46:	2300      	movs	r3, #0
 800ff48:	73fb      	strb	r3, [r7, #15]
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 800ff4a:	f107 020e 	add.w	r2, r7, #14
 800ff4e:	78fb      	ldrb	r3, [r7, #3]
 800ff50:	4619      	mov	r1, r3
 800ff52:	6878      	ldr	r0, [r7, #4]
 800ff54:	f000 f81e 	bl	800ff94 <VL53L0X_RdByte>
 800ff58:	4603      	mov	r3, r0
 800ff5a:	73fb      	strb	r3, [r7, #15]
    if (Status) {
 800ff5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ff60:	2b00      	cmp	r3, #0
 800ff62:	d110      	bne.n	800ff86 <VL53L0X_UpdateByte+0x5a>
        goto done;
    }
    data = (data & AndData) | OrData;
 800ff64:	7bba      	ldrb	r2, [r7, #14]
 800ff66:	78bb      	ldrb	r3, [r7, #2]
 800ff68:	4013      	ands	r3, r2
 800ff6a:	b2da      	uxtb	r2, r3
 800ff6c:	787b      	ldrb	r3, [r7, #1]
 800ff6e:	4313      	orrs	r3, r2
 800ff70:	b2db      	uxtb	r3, r3
 800ff72:	73bb      	strb	r3, [r7, #14]
    Status = VL53L0X_WrByte(Dev, index, data);
 800ff74:	7bba      	ldrb	r2, [r7, #14]
 800ff76:	78fb      	ldrb	r3, [r7, #3]
 800ff78:	4619      	mov	r1, r3
 800ff7a:	6878      	ldr	r0, [r7, #4]
 800ff7c:	f7ff ff88 	bl	800fe90 <VL53L0X_WrByte>
 800ff80:	4603      	mov	r3, r0
 800ff82:	73fb      	strb	r3, [r7, #15]
 800ff84:	e000      	b.n	800ff88 <VL53L0X_UpdateByte+0x5c>
        goto done;
 800ff86:	bf00      	nop
done:
    return Status;
 800ff88:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ff8c:	4618      	mov	r0, r3
 800ff8e:	3710      	adds	r7, #16
 800ff90:	46bd      	mov	sp, r7
 800ff92:	bd80      	pop	{r7, pc}

0800ff94 <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 800ff94:	b580      	push	{r7, lr}
 800ff96:	b086      	sub	sp, #24
 800ff98:	af00      	add	r7, sp, #0
 800ff9a:	60f8      	str	r0, [r7, #12]
 800ff9c:	460b      	mov	r3, r1
 800ff9e:	607a      	str	r2, [r7, #4]
 800ffa0:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ffa2:	2300      	movs	r3, #0
 800ffa4:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800ffa6:	f107 030b 	add.w	r3, r7, #11
 800ffaa:	2201      	movs	r2, #1
 800ffac:	4619      	mov	r1, r3
 800ffae:	68f8      	ldr	r0, [r7, #12]
 800ffb0:	f7ff fed1 	bl	800fd56 <_I2CWrite>
 800ffb4:	6138      	str	r0, [r7, #16]
    if( status_int ){
 800ffb6:	693b      	ldr	r3, [r7, #16]
 800ffb8:	2b00      	cmp	r3, #0
 800ffba:	d002      	beq.n	800ffc2 <VL53L0X_RdByte+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ffbc:	23ec      	movs	r3, #236	; 0xec
 800ffbe:	75fb      	strb	r3, [r7, #23]
        goto done;
 800ffc0:	e00c      	b.n	800ffdc <VL53L0X_RdByte+0x48>
    }
    status_int = _I2CRead(Dev, data, 1);
 800ffc2:	2201      	movs	r2, #1
 800ffc4:	6879      	ldr	r1, [r7, #4]
 800ffc6:	68f8      	ldr	r0, [r7, #12]
 800ffc8:	f7ff fee4 	bl	800fd94 <_I2CRead>
 800ffcc:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800ffce:	693b      	ldr	r3, [r7, #16]
 800ffd0:	2b00      	cmp	r3, #0
 800ffd2:	d002      	beq.n	800ffda <VL53L0X_RdByte+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ffd4:	23ec      	movs	r3, #236	; 0xec
 800ffd6:	75fb      	strb	r3, [r7, #23]
 800ffd8:	e000      	b.n	800ffdc <VL53L0X_RdByte+0x48>
    }
done:
 800ffda:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 800ffdc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ffe0:	4618      	mov	r0, r3
 800ffe2:	3718      	adds	r7, #24
 800ffe4:	46bd      	mov	sp, r7
 800ffe6:	bd80      	pop	{r7, pc}

0800ffe8 <VL53L0X_RdWord>:

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 800ffe8:	b580      	push	{r7, lr}
 800ffea:	b086      	sub	sp, #24
 800ffec:	af00      	add	r7, sp, #0
 800ffee:	60f8      	str	r0, [r7, #12]
 800fff0:	460b      	mov	r3, r1
 800fff2:	607a      	str	r2, [r7, #4]
 800fff4:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800fff6:	2300      	movs	r3, #0
 800fff8:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800fffa:	f107 030b 	add.w	r3, r7, #11
 800fffe:	2201      	movs	r2, #1
 8010000:	4619      	mov	r1, r3
 8010002:	68f8      	ldr	r0, [r7, #12]
 8010004:	f7ff fea7 	bl	800fd56 <_I2CWrite>
 8010008:	6138      	str	r0, [r7, #16]

    if( status_int ){
 801000a:	693b      	ldr	r3, [r7, #16]
 801000c:	2b00      	cmp	r3, #0
 801000e:	d002      	beq.n	8010016 <VL53L0X_RdWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8010010:	23ec      	movs	r3, #236	; 0xec
 8010012:	75fb      	strb	r3, [r7, #23]
        goto done;
 8010014:	e017      	b.n	8010046 <VL53L0X_RdWord+0x5e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 8010016:	2202      	movs	r2, #2
 8010018:	490e      	ldr	r1, [pc, #56]	; (8010054 <VL53L0X_RdWord+0x6c>)
 801001a:	68f8      	ldr	r0, [r7, #12]
 801001c:	f7ff feba 	bl	800fd94 <_I2CRead>
 8010020:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8010022:	693b      	ldr	r3, [r7, #16]
 8010024:	2b00      	cmp	r3, #0
 8010026:	d002      	beq.n	801002e <VL53L0X_RdWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8010028:	23ec      	movs	r3, #236	; 0xec
 801002a:	75fb      	strb	r3, [r7, #23]
        goto done;
 801002c:	e00b      	b.n	8010046 <VL53L0X_RdWord+0x5e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 801002e:	4b09      	ldr	r3, [pc, #36]	; (8010054 <VL53L0X_RdWord+0x6c>)
 8010030:	781b      	ldrb	r3, [r3, #0]
 8010032:	b29b      	uxth	r3, r3
 8010034:	021b      	lsls	r3, r3, #8
 8010036:	b29a      	uxth	r2, r3
 8010038:	4b06      	ldr	r3, [pc, #24]	; (8010054 <VL53L0X_RdWord+0x6c>)
 801003a:	785b      	ldrb	r3, [r3, #1]
 801003c:	b29b      	uxth	r3, r3
 801003e:	4413      	add	r3, r2
 8010040:	b29a      	uxth	r2, r3
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	801a      	strh	r2, [r3, #0]
done:
    VL53L0X_PutI2cBus();
    return Status;
 8010046:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801004a:	4618      	mov	r0, r3
 801004c:	3718      	adds	r7, #24
 801004e:	46bd      	mov	sp, r7
 8010050:	bd80      	pop	{r7, pc}
 8010052:	bf00      	nop
 8010054:	2000a14c 	.word	0x2000a14c

08010058 <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 8010058:	b580      	push	{r7, lr}
 801005a:	b086      	sub	sp, #24
 801005c:	af00      	add	r7, sp, #0
 801005e:	60f8      	str	r0, [r7, #12]
 8010060:	460b      	mov	r3, r1
 8010062:	607a      	str	r2, [r7, #4]
 8010064:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8010066:	2300      	movs	r3, #0
 8010068:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 801006a:	f107 030b 	add.w	r3, r7, #11
 801006e:	2201      	movs	r2, #1
 8010070:	4619      	mov	r1, r3
 8010072:	68f8      	ldr	r0, [r7, #12]
 8010074:	f7ff fe6f 	bl	800fd56 <_I2CWrite>
 8010078:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 801007a:	693b      	ldr	r3, [r7, #16]
 801007c:	2b00      	cmp	r3, #0
 801007e:	d002      	beq.n	8010086 <VL53L0X_RdDWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8010080:	23ec      	movs	r3, #236	; 0xec
 8010082:	75fb      	strb	r3, [r7, #23]
        goto done;
 8010084:	e01b      	b.n	80100be <VL53L0X_RdDWord+0x66>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 8010086:	2204      	movs	r2, #4
 8010088:	4910      	ldr	r1, [pc, #64]	; (80100cc <VL53L0X_RdDWord+0x74>)
 801008a:	68f8      	ldr	r0, [r7, #12]
 801008c:	f7ff fe82 	bl	800fd94 <_I2CRead>
 8010090:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8010092:	693b      	ldr	r3, [r7, #16]
 8010094:	2b00      	cmp	r3, #0
 8010096:	d002      	beq.n	801009e <VL53L0X_RdDWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8010098:	23ec      	movs	r3, #236	; 0xec
 801009a:	75fb      	strb	r3, [r7, #23]
        goto done;
 801009c:	e00f      	b.n	80100be <VL53L0X_RdDWord+0x66>
    }

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 801009e:	4b0b      	ldr	r3, [pc, #44]	; (80100cc <VL53L0X_RdDWord+0x74>)
 80100a0:	781b      	ldrb	r3, [r3, #0]
 80100a2:	061a      	lsls	r2, r3, #24
 80100a4:	4b09      	ldr	r3, [pc, #36]	; (80100cc <VL53L0X_RdDWord+0x74>)
 80100a6:	785b      	ldrb	r3, [r3, #1]
 80100a8:	041b      	lsls	r3, r3, #16
 80100aa:	441a      	add	r2, r3
 80100ac:	4b07      	ldr	r3, [pc, #28]	; (80100cc <VL53L0X_RdDWord+0x74>)
 80100ae:	789b      	ldrb	r3, [r3, #2]
 80100b0:	021b      	lsls	r3, r3, #8
 80100b2:	4413      	add	r3, r2
 80100b4:	4a05      	ldr	r2, [pc, #20]	; (80100cc <VL53L0X_RdDWord+0x74>)
 80100b6:	78d2      	ldrb	r2, [r2, #3]
 80100b8:	441a      	add	r2, r3
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	601a      	str	r2, [r3, #0]

done:
    VL53L0X_PutI2cBus();
    return Status;
 80100be:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80100c2:	4618      	mov	r0, r3
 80100c4:	3718      	adds	r7, #24
 80100c6:	46bd      	mov	sp, r7
 80100c8:	bd80      	pop	{r7, pc}
 80100ca:	bf00      	nop
 80100cc:	2000a14c 	.word	0x2000a14c

080100d0 <VL53L0X_PollingDelay>:

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 80100d0:	b580      	push	{r7, lr}
 80100d2:	b084      	sub	sp, #16
 80100d4:	af00      	add	r7, sp, #0
 80100d6:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 80100d8:	2300      	movs	r3, #0
 80100da:	73fb      	strb	r3, [r7, #15]

    // do nothing
    VL53L0X_OsDelay();
 80100dc:	2002      	movs	r0, #2
 80100de:	f7f3 fb27 	bl	8003730 <HAL_Delay>
    return status;
 80100e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80100e6:	4618      	mov	r0, r3
 80100e8:	3710      	adds	r7, #16
 80100ea:	46bd      	mov	sp, r7
 80100ec:	bd80      	pop	{r7, pc}
	...

080100f0 <__errno>:
 80100f0:	4b01      	ldr	r3, [pc, #4]	; (80100f8 <__errno+0x8>)
 80100f2:	6818      	ldr	r0, [r3, #0]
 80100f4:	4770      	bx	lr
 80100f6:	bf00      	nop
 80100f8:	2000038c 	.word	0x2000038c

080100fc <__libc_init_array>:
 80100fc:	b570      	push	{r4, r5, r6, lr}
 80100fe:	4d0d      	ldr	r5, [pc, #52]	; (8010134 <__libc_init_array+0x38>)
 8010100:	4c0d      	ldr	r4, [pc, #52]	; (8010138 <__libc_init_array+0x3c>)
 8010102:	1b64      	subs	r4, r4, r5
 8010104:	10a4      	asrs	r4, r4, #2
 8010106:	2600      	movs	r6, #0
 8010108:	42a6      	cmp	r6, r4
 801010a:	d109      	bne.n	8010120 <__libc_init_array+0x24>
 801010c:	4d0b      	ldr	r5, [pc, #44]	; (801013c <__libc_init_array+0x40>)
 801010e:	4c0c      	ldr	r4, [pc, #48]	; (8010140 <__libc_init_array+0x44>)
 8010110:	f006 f874 	bl	80161fc <_init>
 8010114:	1b64      	subs	r4, r4, r5
 8010116:	10a4      	asrs	r4, r4, #2
 8010118:	2600      	movs	r6, #0
 801011a:	42a6      	cmp	r6, r4
 801011c:	d105      	bne.n	801012a <__libc_init_array+0x2e>
 801011e:	bd70      	pop	{r4, r5, r6, pc}
 8010120:	f855 3b04 	ldr.w	r3, [r5], #4
 8010124:	4798      	blx	r3
 8010126:	3601      	adds	r6, #1
 8010128:	e7ee      	b.n	8010108 <__libc_init_array+0xc>
 801012a:	f855 3b04 	ldr.w	r3, [r5], #4
 801012e:	4798      	blx	r3
 8010130:	3601      	adds	r6, #1
 8010132:	e7f2      	b.n	801011a <__libc_init_array+0x1e>
 8010134:	08016e38 	.word	0x08016e38
 8010138:	08016e38 	.word	0x08016e38
 801013c:	08016e38 	.word	0x08016e38
 8010140:	08016e3c 	.word	0x08016e3c

08010144 <memcpy>:
 8010144:	440a      	add	r2, r1
 8010146:	4291      	cmp	r1, r2
 8010148:	f100 33ff 	add.w	r3, r0, #4294967295
 801014c:	d100      	bne.n	8010150 <memcpy+0xc>
 801014e:	4770      	bx	lr
 8010150:	b510      	push	{r4, lr}
 8010152:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010156:	f803 4f01 	strb.w	r4, [r3, #1]!
 801015a:	4291      	cmp	r1, r2
 801015c:	d1f9      	bne.n	8010152 <memcpy+0xe>
 801015e:	bd10      	pop	{r4, pc}

08010160 <memset>:
 8010160:	4402      	add	r2, r0
 8010162:	4603      	mov	r3, r0
 8010164:	4293      	cmp	r3, r2
 8010166:	d100      	bne.n	801016a <memset+0xa>
 8010168:	4770      	bx	lr
 801016a:	f803 1b01 	strb.w	r1, [r3], #1
 801016e:	e7f9      	b.n	8010164 <memset+0x4>

08010170 <__cvt>:
 8010170:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010174:	ec55 4b10 	vmov	r4, r5, d0
 8010178:	2d00      	cmp	r5, #0
 801017a:	460e      	mov	r6, r1
 801017c:	4619      	mov	r1, r3
 801017e:	462b      	mov	r3, r5
 8010180:	bfbb      	ittet	lt
 8010182:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8010186:	461d      	movlt	r5, r3
 8010188:	2300      	movge	r3, #0
 801018a:	232d      	movlt	r3, #45	; 0x2d
 801018c:	700b      	strb	r3, [r1, #0]
 801018e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010190:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8010194:	4691      	mov	r9, r2
 8010196:	f023 0820 	bic.w	r8, r3, #32
 801019a:	bfbc      	itt	lt
 801019c:	4622      	movlt	r2, r4
 801019e:	4614      	movlt	r4, r2
 80101a0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80101a4:	d005      	beq.n	80101b2 <__cvt+0x42>
 80101a6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80101aa:	d100      	bne.n	80101ae <__cvt+0x3e>
 80101ac:	3601      	adds	r6, #1
 80101ae:	2102      	movs	r1, #2
 80101b0:	e000      	b.n	80101b4 <__cvt+0x44>
 80101b2:	2103      	movs	r1, #3
 80101b4:	ab03      	add	r3, sp, #12
 80101b6:	9301      	str	r3, [sp, #4]
 80101b8:	ab02      	add	r3, sp, #8
 80101ba:	9300      	str	r3, [sp, #0]
 80101bc:	ec45 4b10 	vmov	d0, r4, r5
 80101c0:	4653      	mov	r3, sl
 80101c2:	4632      	mov	r2, r6
 80101c4:	f001 fec4 	bl	8011f50 <_dtoa_r>
 80101c8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80101cc:	4607      	mov	r7, r0
 80101ce:	d102      	bne.n	80101d6 <__cvt+0x66>
 80101d0:	f019 0f01 	tst.w	r9, #1
 80101d4:	d022      	beq.n	801021c <__cvt+0xac>
 80101d6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80101da:	eb07 0906 	add.w	r9, r7, r6
 80101de:	d110      	bne.n	8010202 <__cvt+0x92>
 80101e0:	783b      	ldrb	r3, [r7, #0]
 80101e2:	2b30      	cmp	r3, #48	; 0x30
 80101e4:	d10a      	bne.n	80101fc <__cvt+0x8c>
 80101e6:	2200      	movs	r2, #0
 80101e8:	2300      	movs	r3, #0
 80101ea:	4620      	mov	r0, r4
 80101ec:	4629      	mov	r1, r5
 80101ee:	f7f0 fc9b 	bl	8000b28 <__aeabi_dcmpeq>
 80101f2:	b918      	cbnz	r0, 80101fc <__cvt+0x8c>
 80101f4:	f1c6 0601 	rsb	r6, r6, #1
 80101f8:	f8ca 6000 	str.w	r6, [sl]
 80101fc:	f8da 3000 	ldr.w	r3, [sl]
 8010200:	4499      	add	r9, r3
 8010202:	2200      	movs	r2, #0
 8010204:	2300      	movs	r3, #0
 8010206:	4620      	mov	r0, r4
 8010208:	4629      	mov	r1, r5
 801020a:	f7f0 fc8d 	bl	8000b28 <__aeabi_dcmpeq>
 801020e:	b108      	cbz	r0, 8010214 <__cvt+0xa4>
 8010210:	f8cd 900c 	str.w	r9, [sp, #12]
 8010214:	2230      	movs	r2, #48	; 0x30
 8010216:	9b03      	ldr	r3, [sp, #12]
 8010218:	454b      	cmp	r3, r9
 801021a:	d307      	bcc.n	801022c <__cvt+0xbc>
 801021c:	9b03      	ldr	r3, [sp, #12]
 801021e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010220:	1bdb      	subs	r3, r3, r7
 8010222:	4638      	mov	r0, r7
 8010224:	6013      	str	r3, [r2, #0]
 8010226:	b004      	add	sp, #16
 8010228:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801022c:	1c59      	adds	r1, r3, #1
 801022e:	9103      	str	r1, [sp, #12]
 8010230:	701a      	strb	r2, [r3, #0]
 8010232:	e7f0      	b.n	8010216 <__cvt+0xa6>

08010234 <__exponent>:
 8010234:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010236:	4603      	mov	r3, r0
 8010238:	2900      	cmp	r1, #0
 801023a:	bfb8      	it	lt
 801023c:	4249      	neglt	r1, r1
 801023e:	f803 2b02 	strb.w	r2, [r3], #2
 8010242:	bfb4      	ite	lt
 8010244:	222d      	movlt	r2, #45	; 0x2d
 8010246:	222b      	movge	r2, #43	; 0x2b
 8010248:	2909      	cmp	r1, #9
 801024a:	7042      	strb	r2, [r0, #1]
 801024c:	dd2a      	ble.n	80102a4 <__exponent+0x70>
 801024e:	f10d 0407 	add.w	r4, sp, #7
 8010252:	46a4      	mov	ip, r4
 8010254:	270a      	movs	r7, #10
 8010256:	46a6      	mov	lr, r4
 8010258:	460a      	mov	r2, r1
 801025a:	fb91 f6f7 	sdiv	r6, r1, r7
 801025e:	fb07 1516 	mls	r5, r7, r6, r1
 8010262:	3530      	adds	r5, #48	; 0x30
 8010264:	2a63      	cmp	r2, #99	; 0x63
 8010266:	f104 34ff 	add.w	r4, r4, #4294967295
 801026a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801026e:	4631      	mov	r1, r6
 8010270:	dcf1      	bgt.n	8010256 <__exponent+0x22>
 8010272:	3130      	adds	r1, #48	; 0x30
 8010274:	f1ae 0502 	sub.w	r5, lr, #2
 8010278:	f804 1c01 	strb.w	r1, [r4, #-1]
 801027c:	1c44      	adds	r4, r0, #1
 801027e:	4629      	mov	r1, r5
 8010280:	4561      	cmp	r1, ip
 8010282:	d30a      	bcc.n	801029a <__exponent+0x66>
 8010284:	f10d 0209 	add.w	r2, sp, #9
 8010288:	eba2 020e 	sub.w	r2, r2, lr
 801028c:	4565      	cmp	r5, ip
 801028e:	bf88      	it	hi
 8010290:	2200      	movhi	r2, #0
 8010292:	4413      	add	r3, r2
 8010294:	1a18      	subs	r0, r3, r0
 8010296:	b003      	add	sp, #12
 8010298:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801029a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801029e:	f804 2f01 	strb.w	r2, [r4, #1]!
 80102a2:	e7ed      	b.n	8010280 <__exponent+0x4c>
 80102a4:	2330      	movs	r3, #48	; 0x30
 80102a6:	3130      	adds	r1, #48	; 0x30
 80102a8:	7083      	strb	r3, [r0, #2]
 80102aa:	70c1      	strb	r1, [r0, #3]
 80102ac:	1d03      	adds	r3, r0, #4
 80102ae:	e7f1      	b.n	8010294 <__exponent+0x60>

080102b0 <_printf_float>:
 80102b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80102b4:	ed2d 8b02 	vpush	{d8}
 80102b8:	b08d      	sub	sp, #52	; 0x34
 80102ba:	460c      	mov	r4, r1
 80102bc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80102c0:	4616      	mov	r6, r2
 80102c2:	461f      	mov	r7, r3
 80102c4:	4605      	mov	r5, r0
 80102c6:	f002 ffb3 	bl	8013230 <_localeconv_r>
 80102ca:	f8d0 a000 	ldr.w	sl, [r0]
 80102ce:	4650      	mov	r0, sl
 80102d0:	f7ef ffa8 	bl	8000224 <strlen>
 80102d4:	2300      	movs	r3, #0
 80102d6:	930a      	str	r3, [sp, #40]	; 0x28
 80102d8:	6823      	ldr	r3, [r4, #0]
 80102da:	9305      	str	r3, [sp, #20]
 80102dc:	f8d8 3000 	ldr.w	r3, [r8]
 80102e0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80102e4:	3307      	adds	r3, #7
 80102e6:	f023 0307 	bic.w	r3, r3, #7
 80102ea:	f103 0208 	add.w	r2, r3, #8
 80102ee:	f8c8 2000 	str.w	r2, [r8]
 80102f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102f6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80102fa:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80102fe:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8010302:	9307      	str	r3, [sp, #28]
 8010304:	f8cd 8018 	str.w	r8, [sp, #24]
 8010308:	ee08 0a10 	vmov	s16, r0
 801030c:	4b9f      	ldr	r3, [pc, #636]	; (801058c <_printf_float+0x2dc>)
 801030e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010312:	f04f 32ff 	mov.w	r2, #4294967295
 8010316:	f7f0 fc39 	bl	8000b8c <__aeabi_dcmpun>
 801031a:	bb88      	cbnz	r0, 8010380 <_printf_float+0xd0>
 801031c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010320:	4b9a      	ldr	r3, [pc, #616]	; (801058c <_printf_float+0x2dc>)
 8010322:	f04f 32ff 	mov.w	r2, #4294967295
 8010326:	f7f0 fc13 	bl	8000b50 <__aeabi_dcmple>
 801032a:	bb48      	cbnz	r0, 8010380 <_printf_float+0xd0>
 801032c:	2200      	movs	r2, #0
 801032e:	2300      	movs	r3, #0
 8010330:	4640      	mov	r0, r8
 8010332:	4649      	mov	r1, r9
 8010334:	f7f0 fc02 	bl	8000b3c <__aeabi_dcmplt>
 8010338:	b110      	cbz	r0, 8010340 <_printf_float+0x90>
 801033a:	232d      	movs	r3, #45	; 0x2d
 801033c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010340:	4b93      	ldr	r3, [pc, #588]	; (8010590 <_printf_float+0x2e0>)
 8010342:	4894      	ldr	r0, [pc, #592]	; (8010594 <_printf_float+0x2e4>)
 8010344:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8010348:	bf94      	ite	ls
 801034a:	4698      	movls	r8, r3
 801034c:	4680      	movhi	r8, r0
 801034e:	2303      	movs	r3, #3
 8010350:	6123      	str	r3, [r4, #16]
 8010352:	9b05      	ldr	r3, [sp, #20]
 8010354:	f023 0204 	bic.w	r2, r3, #4
 8010358:	6022      	str	r2, [r4, #0]
 801035a:	f04f 0900 	mov.w	r9, #0
 801035e:	9700      	str	r7, [sp, #0]
 8010360:	4633      	mov	r3, r6
 8010362:	aa0b      	add	r2, sp, #44	; 0x2c
 8010364:	4621      	mov	r1, r4
 8010366:	4628      	mov	r0, r5
 8010368:	f000 f9d8 	bl	801071c <_printf_common>
 801036c:	3001      	adds	r0, #1
 801036e:	f040 8090 	bne.w	8010492 <_printf_float+0x1e2>
 8010372:	f04f 30ff 	mov.w	r0, #4294967295
 8010376:	b00d      	add	sp, #52	; 0x34
 8010378:	ecbd 8b02 	vpop	{d8}
 801037c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010380:	4642      	mov	r2, r8
 8010382:	464b      	mov	r3, r9
 8010384:	4640      	mov	r0, r8
 8010386:	4649      	mov	r1, r9
 8010388:	f7f0 fc00 	bl	8000b8c <__aeabi_dcmpun>
 801038c:	b140      	cbz	r0, 80103a0 <_printf_float+0xf0>
 801038e:	464b      	mov	r3, r9
 8010390:	2b00      	cmp	r3, #0
 8010392:	bfbc      	itt	lt
 8010394:	232d      	movlt	r3, #45	; 0x2d
 8010396:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801039a:	487f      	ldr	r0, [pc, #508]	; (8010598 <_printf_float+0x2e8>)
 801039c:	4b7f      	ldr	r3, [pc, #508]	; (801059c <_printf_float+0x2ec>)
 801039e:	e7d1      	b.n	8010344 <_printf_float+0x94>
 80103a0:	6863      	ldr	r3, [r4, #4]
 80103a2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80103a6:	9206      	str	r2, [sp, #24]
 80103a8:	1c5a      	adds	r2, r3, #1
 80103aa:	d13f      	bne.n	801042c <_printf_float+0x17c>
 80103ac:	2306      	movs	r3, #6
 80103ae:	6063      	str	r3, [r4, #4]
 80103b0:	9b05      	ldr	r3, [sp, #20]
 80103b2:	6861      	ldr	r1, [r4, #4]
 80103b4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80103b8:	2300      	movs	r3, #0
 80103ba:	9303      	str	r3, [sp, #12]
 80103bc:	ab0a      	add	r3, sp, #40	; 0x28
 80103be:	e9cd b301 	strd	fp, r3, [sp, #4]
 80103c2:	ab09      	add	r3, sp, #36	; 0x24
 80103c4:	ec49 8b10 	vmov	d0, r8, r9
 80103c8:	9300      	str	r3, [sp, #0]
 80103ca:	6022      	str	r2, [r4, #0]
 80103cc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80103d0:	4628      	mov	r0, r5
 80103d2:	f7ff fecd 	bl	8010170 <__cvt>
 80103d6:	9b06      	ldr	r3, [sp, #24]
 80103d8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80103da:	2b47      	cmp	r3, #71	; 0x47
 80103dc:	4680      	mov	r8, r0
 80103de:	d108      	bne.n	80103f2 <_printf_float+0x142>
 80103e0:	1cc8      	adds	r0, r1, #3
 80103e2:	db02      	blt.n	80103ea <_printf_float+0x13a>
 80103e4:	6863      	ldr	r3, [r4, #4]
 80103e6:	4299      	cmp	r1, r3
 80103e8:	dd41      	ble.n	801046e <_printf_float+0x1be>
 80103ea:	f1ab 0b02 	sub.w	fp, fp, #2
 80103ee:	fa5f fb8b 	uxtb.w	fp, fp
 80103f2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80103f6:	d820      	bhi.n	801043a <_printf_float+0x18a>
 80103f8:	3901      	subs	r1, #1
 80103fa:	465a      	mov	r2, fp
 80103fc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8010400:	9109      	str	r1, [sp, #36]	; 0x24
 8010402:	f7ff ff17 	bl	8010234 <__exponent>
 8010406:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010408:	1813      	adds	r3, r2, r0
 801040a:	2a01      	cmp	r2, #1
 801040c:	4681      	mov	r9, r0
 801040e:	6123      	str	r3, [r4, #16]
 8010410:	dc02      	bgt.n	8010418 <_printf_float+0x168>
 8010412:	6822      	ldr	r2, [r4, #0]
 8010414:	07d2      	lsls	r2, r2, #31
 8010416:	d501      	bpl.n	801041c <_printf_float+0x16c>
 8010418:	3301      	adds	r3, #1
 801041a:	6123      	str	r3, [r4, #16]
 801041c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8010420:	2b00      	cmp	r3, #0
 8010422:	d09c      	beq.n	801035e <_printf_float+0xae>
 8010424:	232d      	movs	r3, #45	; 0x2d
 8010426:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801042a:	e798      	b.n	801035e <_printf_float+0xae>
 801042c:	9a06      	ldr	r2, [sp, #24]
 801042e:	2a47      	cmp	r2, #71	; 0x47
 8010430:	d1be      	bne.n	80103b0 <_printf_float+0x100>
 8010432:	2b00      	cmp	r3, #0
 8010434:	d1bc      	bne.n	80103b0 <_printf_float+0x100>
 8010436:	2301      	movs	r3, #1
 8010438:	e7b9      	b.n	80103ae <_printf_float+0xfe>
 801043a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801043e:	d118      	bne.n	8010472 <_printf_float+0x1c2>
 8010440:	2900      	cmp	r1, #0
 8010442:	6863      	ldr	r3, [r4, #4]
 8010444:	dd0b      	ble.n	801045e <_printf_float+0x1ae>
 8010446:	6121      	str	r1, [r4, #16]
 8010448:	b913      	cbnz	r3, 8010450 <_printf_float+0x1a0>
 801044a:	6822      	ldr	r2, [r4, #0]
 801044c:	07d0      	lsls	r0, r2, #31
 801044e:	d502      	bpl.n	8010456 <_printf_float+0x1a6>
 8010450:	3301      	adds	r3, #1
 8010452:	440b      	add	r3, r1
 8010454:	6123      	str	r3, [r4, #16]
 8010456:	65a1      	str	r1, [r4, #88]	; 0x58
 8010458:	f04f 0900 	mov.w	r9, #0
 801045c:	e7de      	b.n	801041c <_printf_float+0x16c>
 801045e:	b913      	cbnz	r3, 8010466 <_printf_float+0x1b6>
 8010460:	6822      	ldr	r2, [r4, #0]
 8010462:	07d2      	lsls	r2, r2, #31
 8010464:	d501      	bpl.n	801046a <_printf_float+0x1ba>
 8010466:	3302      	adds	r3, #2
 8010468:	e7f4      	b.n	8010454 <_printf_float+0x1a4>
 801046a:	2301      	movs	r3, #1
 801046c:	e7f2      	b.n	8010454 <_printf_float+0x1a4>
 801046e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8010472:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010474:	4299      	cmp	r1, r3
 8010476:	db05      	blt.n	8010484 <_printf_float+0x1d4>
 8010478:	6823      	ldr	r3, [r4, #0]
 801047a:	6121      	str	r1, [r4, #16]
 801047c:	07d8      	lsls	r0, r3, #31
 801047e:	d5ea      	bpl.n	8010456 <_printf_float+0x1a6>
 8010480:	1c4b      	adds	r3, r1, #1
 8010482:	e7e7      	b.n	8010454 <_printf_float+0x1a4>
 8010484:	2900      	cmp	r1, #0
 8010486:	bfd4      	ite	le
 8010488:	f1c1 0202 	rsble	r2, r1, #2
 801048c:	2201      	movgt	r2, #1
 801048e:	4413      	add	r3, r2
 8010490:	e7e0      	b.n	8010454 <_printf_float+0x1a4>
 8010492:	6823      	ldr	r3, [r4, #0]
 8010494:	055a      	lsls	r2, r3, #21
 8010496:	d407      	bmi.n	80104a8 <_printf_float+0x1f8>
 8010498:	6923      	ldr	r3, [r4, #16]
 801049a:	4642      	mov	r2, r8
 801049c:	4631      	mov	r1, r6
 801049e:	4628      	mov	r0, r5
 80104a0:	47b8      	blx	r7
 80104a2:	3001      	adds	r0, #1
 80104a4:	d12c      	bne.n	8010500 <_printf_float+0x250>
 80104a6:	e764      	b.n	8010372 <_printf_float+0xc2>
 80104a8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80104ac:	f240 80e0 	bls.w	8010670 <_printf_float+0x3c0>
 80104b0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80104b4:	2200      	movs	r2, #0
 80104b6:	2300      	movs	r3, #0
 80104b8:	f7f0 fb36 	bl	8000b28 <__aeabi_dcmpeq>
 80104bc:	2800      	cmp	r0, #0
 80104be:	d034      	beq.n	801052a <_printf_float+0x27a>
 80104c0:	4a37      	ldr	r2, [pc, #220]	; (80105a0 <_printf_float+0x2f0>)
 80104c2:	2301      	movs	r3, #1
 80104c4:	4631      	mov	r1, r6
 80104c6:	4628      	mov	r0, r5
 80104c8:	47b8      	blx	r7
 80104ca:	3001      	adds	r0, #1
 80104cc:	f43f af51 	beq.w	8010372 <_printf_float+0xc2>
 80104d0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80104d4:	429a      	cmp	r2, r3
 80104d6:	db02      	blt.n	80104de <_printf_float+0x22e>
 80104d8:	6823      	ldr	r3, [r4, #0]
 80104da:	07d8      	lsls	r0, r3, #31
 80104dc:	d510      	bpl.n	8010500 <_printf_float+0x250>
 80104de:	ee18 3a10 	vmov	r3, s16
 80104e2:	4652      	mov	r2, sl
 80104e4:	4631      	mov	r1, r6
 80104e6:	4628      	mov	r0, r5
 80104e8:	47b8      	blx	r7
 80104ea:	3001      	adds	r0, #1
 80104ec:	f43f af41 	beq.w	8010372 <_printf_float+0xc2>
 80104f0:	f04f 0800 	mov.w	r8, #0
 80104f4:	f104 091a 	add.w	r9, r4, #26
 80104f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80104fa:	3b01      	subs	r3, #1
 80104fc:	4543      	cmp	r3, r8
 80104fe:	dc09      	bgt.n	8010514 <_printf_float+0x264>
 8010500:	6823      	ldr	r3, [r4, #0]
 8010502:	079b      	lsls	r3, r3, #30
 8010504:	f100 8105 	bmi.w	8010712 <_printf_float+0x462>
 8010508:	68e0      	ldr	r0, [r4, #12]
 801050a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801050c:	4298      	cmp	r0, r3
 801050e:	bfb8      	it	lt
 8010510:	4618      	movlt	r0, r3
 8010512:	e730      	b.n	8010376 <_printf_float+0xc6>
 8010514:	2301      	movs	r3, #1
 8010516:	464a      	mov	r2, r9
 8010518:	4631      	mov	r1, r6
 801051a:	4628      	mov	r0, r5
 801051c:	47b8      	blx	r7
 801051e:	3001      	adds	r0, #1
 8010520:	f43f af27 	beq.w	8010372 <_printf_float+0xc2>
 8010524:	f108 0801 	add.w	r8, r8, #1
 8010528:	e7e6      	b.n	80104f8 <_printf_float+0x248>
 801052a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801052c:	2b00      	cmp	r3, #0
 801052e:	dc39      	bgt.n	80105a4 <_printf_float+0x2f4>
 8010530:	4a1b      	ldr	r2, [pc, #108]	; (80105a0 <_printf_float+0x2f0>)
 8010532:	2301      	movs	r3, #1
 8010534:	4631      	mov	r1, r6
 8010536:	4628      	mov	r0, r5
 8010538:	47b8      	blx	r7
 801053a:	3001      	adds	r0, #1
 801053c:	f43f af19 	beq.w	8010372 <_printf_float+0xc2>
 8010540:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010544:	4313      	orrs	r3, r2
 8010546:	d102      	bne.n	801054e <_printf_float+0x29e>
 8010548:	6823      	ldr	r3, [r4, #0]
 801054a:	07d9      	lsls	r1, r3, #31
 801054c:	d5d8      	bpl.n	8010500 <_printf_float+0x250>
 801054e:	ee18 3a10 	vmov	r3, s16
 8010552:	4652      	mov	r2, sl
 8010554:	4631      	mov	r1, r6
 8010556:	4628      	mov	r0, r5
 8010558:	47b8      	blx	r7
 801055a:	3001      	adds	r0, #1
 801055c:	f43f af09 	beq.w	8010372 <_printf_float+0xc2>
 8010560:	f04f 0900 	mov.w	r9, #0
 8010564:	f104 0a1a 	add.w	sl, r4, #26
 8010568:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801056a:	425b      	negs	r3, r3
 801056c:	454b      	cmp	r3, r9
 801056e:	dc01      	bgt.n	8010574 <_printf_float+0x2c4>
 8010570:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010572:	e792      	b.n	801049a <_printf_float+0x1ea>
 8010574:	2301      	movs	r3, #1
 8010576:	4652      	mov	r2, sl
 8010578:	4631      	mov	r1, r6
 801057a:	4628      	mov	r0, r5
 801057c:	47b8      	blx	r7
 801057e:	3001      	adds	r0, #1
 8010580:	f43f aef7 	beq.w	8010372 <_printf_float+0xc2>
 8010584:	f109 0901 	add.w	r9, r9, #1
 8010588:	e7ee      	b.n	8010568 <_printf_float+0x2b8>
 801058a:	bf00      	nop
 801058c:	7fefffff 	.word	0x7fefffff
 8010590:	080168ec 	.word	0x080168ec
 8010594:	080168f0 	.word	0x080168f0
 8010598:	080168f8 	.word	0x080168f8
 801059c:	080168f4 	.word	0x080168f4
 80105a0:	08016d89 	.word	0x08016d89
 80105a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80105a6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80105a8:	429a      	cmp	r2, r3
 80105aa:	bfa8      	it	ge
 80105ac:	461a      	movge	r2, r3
 80105ae:	2a00      	cmp	r2, #0
 80105b0:	4691      	mov	r9, r2
 80105b2:	dc37      	bgt.n	8010624 <_printf_float+0x374>
 80105b4:	f04f 0b00 	mov.w	fp, #0
 80105b8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80105bc:	f104 021a 	add.w	r2, r4, #26
 80105c0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80105c2:	9305      	str	r3, [sp, #20]
 80105c4:	eba3 0309 	sub.w	r3, r3, r9
 80105c8:	455b      	cmp	r3, fp
 80105ca:	dc33      	bgt.n	8010634 <_printf_float+0x384>
 80105cc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80105d0:	429a      	cmp	r2, r3
 80105d2:	db3b      	blt.n	801064c <_printf_float+0x39c>
 80105d4:	6823      	ldr	r3, [r4, #0]
 80105d6:	07da      	lsls	r2, r3, #31
 80105d8:	d438      	bmi.n	801064c <_printf_float+0x39c>
 80105da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80105dc:	9a05      	ldr	r2, [sp, #20]
 80105de:	9909      	ldr	r1, [sp, #36]	; 0x24
 80105e0:	1a9a      	subs	r2, r3, r2
 80105e2:	eba3 0901 	sub.w	r9, r3, r1
 80105e6:	4591      	cmp	r9, r2
 80105e8:	bfa8      	it	ge
 80105ea:	4691      	movge	r9, r2
 80105ec:	f1b9 0f00 	cmp.w	r9, #0
 80105f0:	dc35      	bgt.n	801065e <_printf_float+0x3ae>
 80105f2:	f04f 0800 	mov.w	r8, #0
 80105f6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80105fa:	f104 0a1a 	add.w	sl, r4, #26
 80105fe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010602:	1a9b      	subs	r3, r3, r2
 8010604:	eba3 0309 	sub.w	r3, r3, r9
 8010608:	4543      	cmp	r3, r8
 801060a:	f77f af79 	ble.w	8010500 <_printf_float+0x250>
 801060e:	2301      	movs	r3, #1
 8010610:	4652      	mov	r2, sl
 8010612:	4631      	mov	r1, r6
 8010614:	4628      	mov	r0, r5
 8010616:	47b8      	blx	r7
 8010618:	3001      	adds	r0, #1
 801061a:	f43f aeaa 	beq.w	8010372 <_printf_float+0xc2>
 801061e:	f108 0801 	add.w	r8, r8, #1
 8010622:	e7ec      	b.n	80105fe <_printf_float+0x34e>
 8010624:	4613      	mov	r3, r2
 8010626:	4631      	mov	r1, r6
 8010628:	4642      	mov	r2, r8
 801062a:	4628      	mov	r0, r5
 801062c:	47b8      	blx	r7
 801062e:	3001      	adds	r0, #1
 8010630:	d1c0      	bne.n	80105b4 <_printf_float+0x304>
 8010632:	e69e      	b.n	8010372 <_printf_float+0xc2>
 8010634:	2301      	movs	r3, #1
 8010636:	4631      	mov	r1, r6
 8010638:	4628      	mov	r0, r5
 801063a:	9205      	str	r2, [sp, #20]
 801063c:	47b8      	blx	r7
 801063e:	3001      	adds	r0, #1
 8010640:	f43f ae97 	beq.w	8010372 <_printf_float+0xc2>
 8010644:	9a05      	ldr	r2, [sp, #20]
 8010646:	f10b 0b01 	add.w	fp, fp, #1
 801064a:	e7b9      	b.n	80105c0 <_printf_float+0x310>
 801064c:	ee18 3a10 	vmov	r3, s16
 8010650:	4652      	mov	r2, sl
 8010652:	4631      	mov	r1, r6
 8010654:	4628      	mov	r0, r5
 8010656:	47b8      	blx	r7
 8010658:	3001      	adds	r0, #1
 801065a:	d1be      	bne.n	80105da <_printf_float+0x32a>
 801065c:	e689      	b.n	8010372 <_printf_float+0xc2>
 801065e:	9a05      	ldr	r2, [sp, #20]
 8010660:	464b      	mov	r3, r9
 8010662:	4442      	add	r2, r8
 8010664:	4631      	mov	r1, r6
 8010666:	4628      	mov	r0, r5
 8010668:	47b8      	blx	r7
 801066a:	3001      	adds	r0, #1
 801066c:	d1c1      	bne.n	80105f2 <_printf_float+0x342>
 801066e:	e680      	b.n	8010372 <_printf_float+0xc2>
 8010670:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010672:	2a01      	cmp	r2, #1
 8010674:	dc01      	bgt.n	801067a <_printf_float+0x3ca>
 8010676:	07db      	lsls	r3, r3, #31
 8010678:	d538      	bpl.n	80106ec <_printf_float+0x43c>
 801067a:	2301      	movs	r3, #1
 801067c:	4642      	mov	r2, r8
 801067e:	4631      	mov	r1, r6
 8010680:	4628      	mov	r0, r5
 8010682:	47b8      	blx	r7
 8010684:	3001      	adds	r0, #1
 8010686:	f43f ae74 	beq.w	8010372 <_printf_float+0xc2>
 801068a:	ee18 3a10 	vmov	r3, s16
 801068e:	4652      	mov	r2, sl
 8010690:	4631      	mov	r1, r6
 8010692:	4628      	mov	r0, r5
 8010694:	47b8      	blx	r7
 8010696:	3001      	adds	r0, #1
 8010698:	f43f ae6b 	beq.w	8010372 <_printf_float+0xc2>
 801069c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80106a0:	2200      	movs	r2, #0
 80106a2:	2300      	movs	r3, #0
 80106a4:	f7f0 fa40 	bl	8000b28 <__aeabi_dcmpeq>
 80106a8:	b9d8      	cbnz	r0, 80106e2 <_printf_float+0x432>
 80106aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80106ac:	f108 0201 	add.w	r2, r8, #1
 80106b0:	3b01      	subs	r3, #1
 80106b2:	4631      	mov	r1, r6
 80106b4:	4628      	mov	r0, r5
 80106b6:	47b8      	blx	r7
 80106b8:	3001      	adds	r0, #1
 80106ba:	d10e      	bne.n	80106da <_printf_float+0x42a>
 80106bc:	e659      	b.n	8010372 <_printf_float+0xc2>
 80106be:	2301      	movs	r3, #1
 80106c0:	4652      	mov	r2, sl
 80106c2:	4631      	mov	r1, r6
 80106c4:	4628      	mov	r0, r5
 80106c6:	47b8      	blx	r7
 80106c8:	3001      	adds	r0, #1
 80106ca:	f43f ae52 	beq.w	8010372 <_printf_float+0xc2>
 80106ce:	f108 0801 	add.w	r8, r8, #1
 80106d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80106d4:	3b01      	subs	r3, #1
 80106d6:	4543      	cmp	r3, r8
 80106d8:	dcf1      	bgt.n	80106be <_printf_float+0x40e>
 80106da:	464b      	mov	r3, r9
 80106dc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80106e0:	e6dc      	b.n	801049c <_printf_float+0x1ec>
 80106e2:	f04f 0800 	mov.w	r8, #0
 80106e6:	f104 0a1a 	add.w	sl, r4, #26
 80106ea:	e7f2      	b.n	80106d2 <_printf_float+0x422>
 80106ec:	2301      	movs	r3, #1
 80106ee:	4642      	mov	r2, r8
 80106f0:	e7df      	b.n	80106b2 <_printf_float+0x402>
 80106f2:	2301      	movs	r3, #1
 80106f4:	464a      	mov	r2, r9
 80106f6:	4631      	mov	r1, r6
 80106f8:	4628      	mov	r0, r5
 80106fa:	47b8      	blx	r7
 80106fc:	3001      	adds	r0, #1
 80106fe:	f43f ae38 	beq.w	8010372 <_printf_float+0xc2>
 8010702:	f108 0801 	add.w	r8, r8, #1
 8010706:	68e3      	ldr	r3, [r4, #12]
 8010708:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801070a:	1a5b      	subs	r3, r3, r1
 801070c:	4543      	cmp	r3, r8
 801070e:	dcf0      	bgt.n	80106f2 <_printf_float+0x442>
 8010710:	e6fa      	b.n	8010508 <_printf_float+0x258>
 8010712:	f04f 0800 	mov.w	r8, #0
 8010716:	f104 0919 	add.w	r9, r4, #25
 801071a:	e7f4      	b.n	8010706 <_printf_float+0x456>

0801071c <_printf_common>:
 801071c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010720:	4616      	mov	r6, r2
 8010722:	4699      	mov	r9, r3
 8010724:	688a      	ldr	r2, [r1, #8]
 8010726:	690b      	ldr	r3, [r1, #16]
 8010728:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801072c:	4293      	cmp	r3, r2
 801072e:	bfb8      	it	lt
 8010730:	4613      	movlt	r3, r2
 8010732:	6033      	str	r3, [r6, #0]
 8010734:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010738:	4607      	mov	r7, r0
 801073a:	460c      	mov	r4, r1
 801073c:	b10a      	cbz	r2, 8010742 <_printf_common+0x26>
 801073e:	3301      	adds	r3, #1
 8010740:	6033      	str	r3, [r6, #0]
 8010742:	6823      	ldr	r3, [r4, #0]
 8010744:	0699      	lsls	r1, r3, #26
 8010746:	bf42      	ittt	mi
 8010748:	6833      	ldrmi	r3, [r6, #0]
 801074a:	3302      	addmi	r3, #2
 801074c:	6033      	strmi	r3, [r6, #0]
 801074e:	6825      	ldr	r5, [r4, #0]
 8010750:	f015 0506 	ands.w	r5, r5, #6
 8010754:	d106      	bne.n	8010764 <_printf_common+0x48>
 8010756:	f104 0a19 	add.w	sl, r4, #25
 801075a:	68e3      	ldr	r3, [r4, #12]
 801075c:	6832      	ldr	r2, [r6, #0]
 801075e:	1a9b      	subs	r3, r3, r2
 8010760:	42ab      	cmp	r3, r5
 8010762:	dc26      	bgt.n	80107b2 <_printf_common+0x96>
 8010764:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010768:	1e13      	subs	r3, r2, #0
 801076a:	6822      	ldr	r2, [r4, #0]
 801076c:	bf18      	it	ne
 801076e:	2301      	movne	r3, #1
 8010770:	0692      	lsls	r2, r2, #26
 8010772:	d42b      	bmi.n	80107cc <_printf_common+0xb0>
 8010774:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010778:	4649      	mov	r1, r9
 801077a:	4638      	mov	r0, r7
 801077c:	47c0      	blx	r8
 801077e:	3001      	adds	r0, #1
 8010780:	d01e      	beq.n	80107c0 <_printf_common+0xa4>
 8010782:	6823      	ldr	r3, [r4, #0]
 8010784:	68e5      	ldr	r5, [r4, #12]
 8010786:	6832      	ldr	r2, [r6, #0]
 8010788:	f003 0306 	and.w	r3, r3, #6
 801078c:	2b04      	cmp	r3, #4
 801078e:	bf08      	it	eq
 8010790:	1aad      	subeq	r5, r5, r2
 8010792:	68a3      	ldr	r3, [r4, #8]
 8010794:	6922      	ldr	r2, [r4, #16]
 8010796:	bf0c      	ite	eq
 8010798:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801079c:	2500      	movne	r5, #0
 801079e:	4293      	cmp	r3, r2
 80107a0:	bfc4      	itt	gt
 80107a2:	1a9b      	subgt	r3, r3, r2
 80107a4:	18ed      	addgt	r5, r5, r3
 80107a6:	2600      	movs	r6, #0
 80107a8:	341a      	adds	r4, #26
 80107aa:	42b5      	cmp	r5, r6
 80107ac:	d11a      	bne.n	80107e4 <_printf_common+0xc8>
 80107ae:	2000      	movs	r0, #0
 80107b0:	e008      	b.n	80107c4 <_printf_common+0xa8>
 80107b2:	2301      	movs	r3, #1
 80107b4:	4652      	mov	r2, sl
 80107b6:	4649      	mov	r1, r9
 80107b8:	4638      	mov	r0, r7
 80107ba:	47c0      	blx	r8
 80107bc:	3001      	adds	r0, #1
 80107be:	d103      	bne.n	80107c8 <_printf_common+0xac>
 80107c0:	f04f 30ff 	mov.w	r0, #4294967295
 80107c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80107c8:	3501      	adds	r5, #1
 80107ca:	e7c6      	b.n	801075a <_printf_common+0x3e>
 80107cc:	18e1      	adds	r1, r4, r3
 80107ce:	1c5a      	adds	r2, r3, #1
 80107d0:	2030      	movs	r0, #48	; 0x30
 80107d2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80107d6:	4422      	add	r2, r4
 80107d8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80107dc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80107e0:	3302      	adds	r3, #2
 80107e2:	e7c7      	b.n	8010774 <_printf_common+0x58>
 80107e4:	2301      	movs	r3, #1
 80107e6:	4622      	mov	r2, r4
 80107e8:	4649      	mov	r1, r9
 80107ea:	4638      	mov	r0, r7
 80107ec:	47c0      	blx	r8
 80107ee:	3001      	adds	r0, #1
 80107f0:	d0e6      	beq.n	80107c0 <_printf_common+0xa4>
 80107f2:	3601      	adds	r6, #1
 80107f4:	e7d9      	b.n	80107aa <_printf_common+0x8e>
	...

080107f8 <_printf_i>:
 80107f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80107fc:	7e0f      	ldrb	r7, [r1, #24]
 80107fe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010800:	2f78      	cmp	r7, #120	; 0x78
 8010802:	4691      	mov	r9, r2
 8010804:	4680      	mov	r8, r0
 8010806:	460c      	mov	r4, r1
 8010808:	469a      	mov	sl, r3
 801080a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801080e:	d807      	bhi.n	8010820 <_printf_i+0x28>
 8010810:	2f62      	cmp	r7, #98	; 0x62
 8010812:	d80a      	bhi.n	801082a <_printf_i+0x32>
 8010814:	2f00      	cmp	r7, #0
 8010816:	f000 80d8 	beq.w	80109ca <_printf_i+0x1d2>
 801081a:	2f58      	cmp	r7, #88	; 0x58
 801081c:	f000 80a3 	beq.w	8010966 <_printf_i+0x16e>
 8010820:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010824:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010828:	e03a      	b.n	80108a0 <_printf_i+0xa8>
 801082a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801082e:	2b15      	cmp	r3, #21
 8010830:	d8f6      	bhi.n	8010820 <_printf_i+0x28>
 8010832:	a101      	add	r1, pc, #4	; (adr r1, 8010838 <_printf_i+0x40>)
 8010834:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010838:	08010891 	.word	0x08010891
 801083c:	080108a5 	.word	0x080108a5
 8010840:	08010821 	.word	0x08010821
 8010844:	08010821 	.word	0x08010821
 8010848:	08010821 	.word	0x08010821
 801084c:	08010821 	.word	0x08010821
 8010850:	080108a5 	.word	0x080108a5
 8010854:	08010821 	.word	0x08010821
 8010858:	08010821 	.word	0x08010821
 801085c:	08010821 	.word	0x08010821
 8010860:	08010821 	.word	0x08010821
 8010864:	080109b1 	.word	0x080109b1
 8010868:	080108d5 	.word	0x080108d5
 801086c:	08010993 	.word	0x08010993
 8010870:	08010821 	.word	0x08010821
 8010874:	08010821 	.word	0x08010821
 8010878:	080109d3 	.word	0x080109d3
 801087c:	08010821 	.word	0x08010821
 8010880:	080108d5 	.word	0x080108d5
 8010884:	08010821 	.word	0x08010821
 8010888:	08010821 	.word	0x08010821
 801088c:	0801099b 	.word	0x0801099b
 8010890:	682b      	ldr	r3, [r5, #0]
 8010892:	1d1a      	adds	r2, r3, #4
 8010894:	681b      	ldr	r3, [r3, #0]
 8010896:	602a      	str	r2, [r5, #0]
 8010898:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801089c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80108a0:	2301      	movs	r3, #1
 80108a2:	e0a3      	b.n	80109ec <_printf_i+0x1f4>
 80108a4:	6820      	ldr	r0, [r4, #0]
 80108a6:	6829      	ldr	r1, [r5, #0]
 80108a8:	0606      	lsls	r6, r0, #24
 80108aa:	f101 0304 	add.w	r3, r1, #4
 80108ae:	d50a      	bpl.n	80108c6 <_printf_i+0xce>
 80108b0:	680e      	ldr	r6, [r1, #0]
 80108b2:	602b      	str	r3, [r5, #0]
 80108b4:	2e00      	cmp	r6, #0
 80108b6:	da03      	bge.n	80108c0 <_printf_i+0xc8>
 80108b8:	232d      	movs	r3, #45	; 0x2d
 80108ba:	4276      	negs	r6, r6
 80108bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80108c0:	485e      	ldr	r0, [pc, #376]	; (8010a3c <_printf_i+0x244>)
 80108c2:	230a      	movs	r3, #10
 80108c4:	e019      	b.n	80108fa <_printf_i+0x102>
 80108c6:	680e      	ldr	r6, [r1, #0]
 80108c8:	602b      	str	r3, [r5, #0]
 80108ca:	f010 0f40 	tst.w	r0, #64	; 0x40
 80108ce:	bf18      	it	ne
 80108d0:	b236      	sxthne	r6, r6
 80108d2:	e7ef      	b.n	80108b4 <_printf_i+0xbc>
 80108d4:	682b      	ldr	r3, [r5, #0]
 80108d6:	6820      	ldr	r0, [r4, #0]
 80108d8:	1d19      	adds	r1, r3, #4
 80108da:	6029      	str	r1, [r5, #0]
 80108dc:	0601      	lsls	r1, r0, #24
 80108de:	d501      	bpl.n	80108e4 <_printf_i+0xec>
 80108e0:	681e      	ldr	r6, [r3, #0]
 80108e2:	e002      	b.n	80108ea <_printf_i+0xf2>
 80108e4:	0646      	lsls	r6, r0, #25
 80108e6:	d5fb      	bpl.n	80108e0 <_printf_i+0xe8>
 80108e8:	881e      	ldrh	r6, [r3, #0]
 80108ea:	4854      	ldr	r0, [pc, #336]	; (8010a3c <_printf_i+0x244>)
 80108ec:	2f6f      	cmp	r7, #111	; 0x6f
 80108ee:	bf0c      	ite	eq
 80108f0:	2308      	moveq	r3, #8
 80108f2:	230a      	movne	r3, #10
 80108f4:	2100      	movs	r1, #0
 80108f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80108fa:	6865      	ldr	r5, [r4, #4]
 80108fc:	60a5      	str	r5, [r4, #8]
 80108fe:	2d00      	cmp	r5, #0
 8010900:	bfa2      	ittt	ge
 8010902:	6821      	ldrge	r1, [r4, #0]
 8010904:	f021 0104 	bicge.w	r1, r1, #4
 8010908:	6021      	strge	r1, [r4, #0]
 801090a:	b90e      	cbnz	r6, 8010910 <_printf_i+0x118>
 801090c:	2d00      	cmp	r5, #0
 801090e:	d04d      	beq.n	80109ac <_printf_i+0x1b4>
 8010910:	4615      	mov	r5, r2
 8010912:	fbb6 f1f3 	udiv	r1, r6, r3
 8010916:	fb03 6711 	mls	r7, r3, r1, r6
 801091a:	5dc7      	ldrb	r7, [r0, r7]
 801091c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8010920:	4637      	mov	r7, r6
 8010922:	42bb      	cmp	r3, r7
 8010924:	460e      	mov	r6, r1
 8010926:	d9f4      	bls.n	8010912 <_printf_i+0x11a>
 8010928:	2b08      	cmp	r3, #8
 801092a:	d10b      	bne.n	8010944 <_printf_i+0x14c>
 801092c:	6823      	ldr	r3, [r4, #0]
 801092e:	07de      	lsls	r6, r3, #31
 8010930:	d508      	bpl.n	8010944 <_printf_i+0x14c>
 8010932:	6923      	ldr	r3, [r4, #16]
 8010934:	6861      	ldr	r1, [r4, #4]
 8010936:	4299      	cmp	r1, r3
 8010938:	bfde      	ittt	le
 801093a:	2330      	movle	r3, #48	; 0x30
 801093c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8010940:	f105 35ff 	addle.w	r5, r5, #4294967295
 8010944:	1b52      	subs	r2, r2, r5
 8010946:	6122      	str	r2, [r4, #16]
 8010948:	f8cd a000 	str.w	sl, [sp]
 801094c:	464b      	mov	r3, r9
 801094e:	aa03      	add	r2, sp, #12
 8010950:	4621      	mov	r1, r4
 8010952:	4640      	mov	r0, r8
 8010954:	f7ff fee2 	bl	801071c <_printf_common>
 8010958:	3001      	adds	r0, #1
 801095a:	d14c      	bne.n	80109f6 <_printf_i+0x1fe>
 801095c:	f04f 30ff 	mov.w	r0, #4294967295
 8010960:	b004      	add	sp, #16
 8010962:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010966:	4835      	ldr	r0, [pc, #212]	; (8010a3c <_printf_i+0x244>)
 8010968:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801096c:	6829      	ldr	r1, [r5, #0]
 801096e:	6823      	ldr	r3, [r4, #0]
 8010970:	f851 6b04 	ldr.w	r6, [r1], #4
 8010974:	6029      	str	r1, [r5, #0]
 8010976:	061d      	lsls	r5, r3, #24
 8010978:	d514      	bpl.n	80109a4 <_printf_i+0x1ac>
 801097a:	07df      	lsls	r7, r3, #31
 801097c:	bf44      	itt	mi
 801097e:	f043 0320 	orrmi.w	r3, r3, #32
 8010982:	6023      	strmi	r3, [r4, #0]
 8010984:	b91e      	cbnz	r6, 801098e <_printf_i+0x196>
 8010986:	6823      	ldr	r3, [r4, #0]
 8010988:	f023 0320 	bic.w	r3, r3, #32
 801098c:	6023      	str	r3, [r4, #0]
 801098e:	2310      	movs	r3, #16
 8010990:	e7b0      	b.n	80108f4 <_printf_i+0xfc>
 8010992:	6823      	ldr	r3, [r4, #0]
 8010994:	f043 0320 	orr.w	r3, r3, #32
 8010998:	6023      	str	r3, [r4, #0]
 801099a:	2378      	movs	r3, #120	; 0x78
 801099c:	4828      	ldr	r0, [pc, #160]	; (8010a40 <_printf_i+0x248>)
 801099e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80109a2:	e7e3      	b.n	801096c <_printf_i+0x174>
 80109a4:	0659      	lsls	r1, r3, #25
 80109a6:	bf48      	it	mi
 80109a8:	b2b6      	uxthmi	r6, r6
 80109aa:	e7e6      	b.n	801097a <_printf_i+0x182>
 80109ac:	4615      	mov	r5, r2
 80109ae:	e7bb      	b.n	8010928 <_printf_i+0x130>
 80109b0:	682b      	ldr	r3, [r5, #0]
 80109b2:	6826      	ldr	r6, [r4, #0]
 80109b4:	6961      	ldr	r1, [r4, #20]
 80109b6:	1d18      	adds	r0, r3, #4
 80109b8:	6028      	str	r0, [r5, #0]
 80109ba:	0635      	lsls	r5, r6, #24
 80109bc:	681b      	ldr	r3, [r3, #0]
 80109be:	d501      	bpl.n	80109c4 <_printf_i+0x1cc>
 80109c0:	6019      	str	r1, [r3, #0]
 80109c2:	e002      	b.n	80109ca <_printf_i+0x1d2>
 80109c4:	0670      	lsls	r0, r6, #25
 80109c6:	d5fb      	bpl.n	80109c0 <_printf_i+0x1c8>
 80109c8:	8019      	strh	r1, [r3, #0]
 80109ca:	2300      	movs	r3, #0
 80109cc:	6123      	str	r3, [r4, #16]
 80109ce:	4615      	mov	r5, r2
 80109d0:	e7ba      	b.n	8010948 <_printf_i+0x150>
 80109d2:	682b      	ldr	r3, [r5, #0]
 80109d4:	1d1a      	adds	r2, r3, #4
 80109d6:	602a      	str	r2, [r5, #0]
 80109d8:	681d      	ldr	r5, [r3, #0]
 80109da:	6862      	ldr	r2, [r4, #4]
 80109dc:	2100      	movs	r1, #0
 80109de:	4628      	mov	r0, r5
 80109e0:	f7ef fc2e 	bl	8000240 <memchr>
 80109e4:	b108      	cbz	r0, 80109ea <_printf_i+0x1f2>
 80109e6:	1b40      	subs	r0, r0, r5
 80109e8:	6060      	str	r0, [r4, #4]
 80109ea:	6863      	ldr	r3, [r4, #4]
 80109ec:	6123      	str	r3, [r4, #16]
 80109ee:	2300      	movs	r3, #0
 80109f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80109f4:	e7a8      	b.n	8010948 <_printf_i+0x150>
 80109f6:	6923      	ldr	r3, [r4, #16]
 80109f8:	462a      	mov	r2, r5
 80109fa:	4649      	mov	r1, r9
 80109fc:	4640      	mov	r0, r8
 80109fe:	47d0      	blx	sl
 8010a00:	3001      	adds	r0, #1
 8010a02:	d0ab      	beq.n	801095c <_printf_i+0x164>
 8010a04:	6823      	ldr	r3, [r4, #0]
 8010a06:	079b      	lsls	r3, r3, #30
 8010a08:	d413      	bmi.n	8010a32 <_printf_i+0x23a>
 8010a0a:	68e0      	ldr	r0, [r4, #12]
 8010a0c:	9b03      	ldr	r3, [sp, #12]
 8010a0e:	4298      	cmp	r0, r3
 8010a10:	bfb8      	it	lt
 8010a12:	4618      	movlt	r0, r3
 8010a14:	e7a4      	b.n	8010960 <_printf_i+0x168>
 8010a16:	2301      	movs	r3, #1
 8010a18:	4632      	mov	r2, r6
 8010a1a:	4649      	mov	r1, r9
 8010a1c:	4640      	mov	r0, r8
 8010a1e:	47d0      	blx	sl
 8010a20:	3001      	adds	r0, #1
 8010a22:	d09b      	beq.n	801095c <_printf_i+0x164>
 8010a24:	3501      	adds	r5, #1
 8010a26:	68e3      	ldr	r3, [r4, #12]
 8010a28:	9903      	ldr	r1, [sp, #12]
 8010a2a:	1a5b      	subs	r3, r3, r1
 8010a2c:	42ab      	cmp	r3, r5
 8010a2e:	dcf2      	bgt.n	8010a16 <_printf_i+0x21e>
 8010a30:	e7eb      	b.n	8010a0a <_printf_i+0x212>
 8010a32:	2500      	movs	r5, #0
 8010a34:	f104 0619 	add.w	r6, r4, #25
 8010a38:	e7f5      	b.n	8010a26 <_printf_i+0x22e>
 8010a3a:	bf00      	nop
 8010a3c:	080168fc 	.word	0x080168fc
 8010a40:	0801690d 	.word	0x0801690d

08010a44 <_scanf_float>:
 8010a44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a48:	b087      	sub	sp, #28
 8010a4a:	4617      	mov	r7, r2
 8010a4c:	9303      	str	r3, [sp, #12]
 8010a4e:	688b      	ldr	r3, [r1, #8]
 8010a50:	1e5a      	subs	r2, r3, #1
 8010a52:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8010a56:	bf83      	ittte	hi
 8010a58:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8010a5c:	195b      	addhi	r3, r3, r5
 8010a5e:	9302      	strhi	r3, [sp, #8]
 8010a60:	2300      	movls	r3, #0
 8010a62:	bf86      	itte	hi
 8010a64:	f240 135d 	movwhi	r3, #349	; 0x15d
 8010a68:	608b      	strhi	r3, [r1, #8]
 8010a6a:	9302      	strls	r3, [sp, #8]
 8010a6c:	680b      	ldr	r3, [r1, #0]
 8010a6e:	468b      	mov	fp, r1
 8010a70:	2500      	movs	r5, #0
 8010a72:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8010a76:	f84b 3b1c 	str.w	r3, [fp], #28
 8010a7a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8010a7e:	4680      	mov	r8, r0
 8010a80:	460c      	mov	r4, r1
 8010a82:	465e      	mov	r6, fp
 8010a84:	46aa      	mov	sl, r5
 8010a86:	46a9      	mov	r9, r5
 8010a88:	9501      	str	r5, [sp, #4]
 8010a8a:	68a2      	ldr	r2, [r4, #8]
 8010a8c:	b152      	cbz	r2, 8010aa4 <_scanf_float+0x60>
 8010a8e:	683b      	ldr	r3, [r7, #0]
 8010a90:	781b      	ldrb	r3, [r3, #0]
 8010a92:	2b4e      	cmp	r3, #78	; 0x4e
 8010a94:	d864      	bhi.n	8010b60 <_scanf_float+0x11c>
 8010a96:	2b40      	cmp	r3, #64	; 0x40
 8010a98:	d83c      	bhi.n	8010b14 <_scanf_float+0xd0>
 8010a9a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8010a9e:	b2c8      	uxtb	r0, r1
 8010aa0:	280e      	cmp	r0, #14
 8010aa2:	d93a      	bls.n	8010b1a <_scanf_float+0xd6>
 8010aa4:	f1b9 0f00 	cmp.w	r9, #0
 8010aa8:	d003      	beq.n	8010ab2 <_scanf_float+0x6e>
 8010aaa:	6823      	ldr	r3, [r4, #0]
 8010aac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010ab0:	6023      	str	r3, [r4, #0]
 8010ab2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010ab6:	f1ba 0f01 	cmp.w	sl, #1
 8010aba:	f200 8113 	bhi.w	8010ce4 <_scanf_float+0x2a0>
 8010abe:	455e      	cmp	r6, fp
 8010ac0:	f200 8105 	bhi.w	8010cce <_scanf_float+0x28a>
 8010ac4:	2501      	movs	r5, #1
 8010ac6:	4628      	mov	r0, r5
 8010ac8:	b007      	add	sp, #28
 8010aca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ace:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8010ad2:	2a0d      	cmp	r2, #13
 8010ad4:	d8e6      	bhi.n	8010aa4 <_scanf_float+0x60>
 8010ad6:	a101      	add	r1, pc, #4	; (adr r1, 8010adc <_scanf_float+0x98>)
 8010ad8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8010adc:	08010c1b 	.word	0x08010c1b
 8010ae0:	08010aa5 	.word	0x08010aa5
 8010ae4:	08010aa5 	.word	0x08010aa5
 8010ae8:	08010aa5 	.word	0x08010aa5
 8010aec:	08010c7b 	.word	0x08010c7b
 8010af0:	08010c53 	.word	0x08010c53
 8010af4:	08010aa5 	.word	0x08010aa5
 8010af8:	08010aa5 	.word	0x08010aa5
 8010afc:	08010c29 	.word	0x08010c29
 8010b00:	08010aa5 	.word	0x08010aa5
 8010b04:	08010aa5 	.word	0x08010aa5
 8010b08:	08010aa5 	.word	0x08010aa5
 8010b0c:	08010aa5 	.word	0x08010aa5
 8010b10:	08010be1 	.word	0x08010be1
 8010b14:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8010b18:	e7db      	b.n	8010ad2 <_scanf_float+0x8e>
 8010b1a:	290e      	cmp	r1, #14
 8010b1c:	d8c2      	bhi.n	8010aa4 <_scanf_float+0x60>
 8010b1e:	a001      	add	r0, pc, #4	; (adr r0, 8010b24 <_scanf_float+0xe0>)
 8010b20:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8010b24:	08010bd3 	.word	0x08010bd3
 8010b28:	08010aa5 	.word	0x08010aa5
 8010b2c:	08010bd3 	.word	0x08010bd3
 8010b30:	08010c67 	.word	0x08010c67
 8010b34:	08010aa5 	.word	0x08010aa5
 8010b38:	08010b81 	.word	0x08010b81
 8010b3c:	08010bbd 	.word	0x08010bbd
 8010b40:	08010bbd 	.word	0x08010bbd
 8010b44:	08010bbd 	.word	0x08010bbd
 8010b48:	08010bbd 	.word	0x08010bbd
 8010b4c:	08010bbd 	.word	0x08010bbd
 8010b50:	08010bbd 	.word	0x08010bbd
 8010b54:	08010bbd 	.word	0x08010bbd
 8010b58:	08010bbd 	.word	0x08010bbd
 8010b5c:	08010bbd 	.word	0x08010bbd
 8010b60:	2b6e      	cmp	r3, #110	; 0x6e
 8010b62:	d809      	bhi.n	8010b78 <_scanf_float+0x134>
 8010b64:	2b60      	cmp	r3, #96	; 0x60
 8010b66:	d8b2      	bhi.n	8010ace <_scanf_float+0x8a>
 8010b68:	2b54      	cmp	r3, #84	; 0x54
 8010b6a:	d077      	beq.n	8010c5c <_scanf_float+0x218>
 8010b6c:	2b59      	cmp	r3, #89	; 0x59
 8010b6e:	d199      	bne.n	8010aa4 <_scanf_float+0x60>
 8010b70:	2d07      	cmp	r5, #7
 8010b72:	d197      	bne.n	8010aa4 <_scanf_float+0x60>
 8010b74:	2508      	movs	r5, #8
 8010b76:	e029      	b.n	8010bcc <_scanf_float+0x188>
 8010b78:	2b74      	cmp	r3, #116	; 0x74
 8010b7a:	d06f      	beq.n	8010c5c <_scanf_float+0x218>
 8010b7c:	2b79      	cmp	r3, #121	; 0x79
 8010b7e:	e7f6      	b.n	8010b6e <_scanf_float+0x12a>
 8010b80:	6821      	ldr	r1, [r4, #0]
 8010b82:	05c8      	lsls	r0, r1, #23
 8010b84:	d51a      	bpl.n	8010bbc <_scanf_float+0x178>
 8010b86:	9b02      	ldr	r3, [sp, #8]
 8010b88:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8010b8c:	6021      	str	r1, [r4, #0]
 8010b8e:	f109 0901 	add.w	r9, r9, #1
 8010b92:	b11b      	cbz	r3, 8010b9c <_scanf_float+0x158>
 8010b94:	3b01      	subs	r3, #1
 8010b96:	3201      	adds	r2, #1
 8010b98:	9302      	str	r3, [sp, #8]
 8010b9a:	60a2      	str	r2, [r4, #8]
 8010b9c:	68a3      	ldr	r3, [r4, #8]
 8010b9e:	3b01      	subs	r3, #1
 8010ba0:	60a3      	str	r3, [r4, #8]
 8010ba2:	6923      	ldr	r3, [r4, #16]
 8010ba4:	3301      	adds	r3, #1
 8010ba6:	6123      	str	r3, [r4, #16]
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	3b01      	subs	r3, #1
 8010bac:	2b00      	cmp	r3, #0
 8010bae:	607b      	str	r3, [r7, #4]
 8010bb0:	f340 8084 	ble.w	8010cbc <_scanf_float+0x278>
 8010bb4:	683b      	ldr	r3, [r7, #0]
 8010bb6:	3301      	adds	r3, #1
 8010bb8:	603b      	str	r3, [r7, #0]
 8010bba:	e766      	b.n	8010a8a <_scanf_float+0x46>
 8010bbc:	eb1a 0f05 	cmn.w	sl, r5
 8010bc0:	f47f af70 	bne.w	8010aa4 <_scanf_float+0x60>
 8010bc4:	6822      	ldr	r2, [r4, #0]
 8010bc6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8010bca:	6022      	str	r2, [r4, #0]
 8010bcc:	f806 3b01 	strb.w	r3, [r6], #1
 8010bd0:	e7e4      	b.n	8010b9c <_scanf_float+0x158>
 8010bd2:	6822      	ldr	r2, [r4, #0]
 8010bd4:	0610      	lsls	r0, r2, #24
 8010bd6:	f57f af65 	bpl.w	8010aa4 <_scanf_float+0x60>
 8010bda:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8010bde:	e7f4      	b.n	8010bca <_scanf_float+0x186>
 8010be0:	f1ba 0f00 	cmp.w	sl, #0
 8010be4:	d10e      	bne.n	8010c04 <_scanf_float+0x1c0>
 8010be6:	f1b9 0f00 	cmp.w	r9, #0
 8010bea:	d10e      	bne.n	8010c0a <_scanf_float+0x1c6>
 8010bec:	6822      	ldr	r2, [r4, #0]
 8010bee:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8010bf2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8010bf6:	d108      	bne.n	8010c0a <_scanf_float+0x1c6>
 8010bf8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8010bfc:	6022      	str	r2, [r4, #0]
 8010bfe:	f04f 0a01 	mov.w	sl, #1
 8010c02:	e7e3      	b.n	8010bcc <_scanf_float+0x188>
 8010c04:	f1ba 0f02 	cmp.w	sl, #2
 8010c08:	d055      	beq.n	8010cb6 <_scanf_float+0x272>
 8010c0a:	2d01      	cmp	r5, #1
 8010c0c:	d002      	beq.n	8010c14 <_scanf_float+0x1d0>
 8010c0e:	2d04      	cmp	r5, #4
 8010c10:	f47f af48 	bne.w	8010aa4 <_scanf_float+0x60>
 8010c14:	3501      	adds	r5, #1
 8010c16:	b2ed      	uxtb	r5, r5
 8010c18:	e7d8      	b.n	8010bcc <_scanf_float+0x188>
 8010c1a:	f1ba 0f01 	cmp.w	sl, #1
 8010c1e:	f47f af41 	bne.w	8010aa4 <_scanf_float+0x60>
 8010c22:	f04f 0a02 	mov.w	sl, #2
 8010c26:	e7d1      	b.n	8010bcc <_scanf_float+0x188>
 8010c28:	b97d      	cbnz	r5, 8010c4a <_scanf_float+0x206>
 8010c2a:	f1b9 0f00 	cmp.w	r9, #0
 8010c2e:	f47f af3c 	bne.w	8010aaa <_scanf_float+0x66>
 8010c32:	6822      	ldr	r2, [r4, #0]
 8010c34:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8010c38:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8010c3c:	f47f af39 	bne.w	8010ab2 <_scanf_float+0x6e>
 8010c40:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8010c44:	6022      	str	r2, [r4, #0]
 8010c46:	2501      	movs	r5, #1
 8010c48:	e7c0      	b.n	8010bcc <_scanf_float+0x188>
 8010c4a:	2d03      	cmp	r5, #3
 8010c4c:	d0e2      	beq.n	8010c14 <_scanf_float+0x1d0>
 8010c4e:	2d05      	cmp	r5, #5
 8010c50:	e7de      	b.n	8010c10 <_scanf_float+0x1cc>
 8010c52:	2d02      	cmp	r5, #2
 8010c54:	f47f af26 	bne.w	8010aa4 <_scanf_float+0x60>
 8010c58:	2503      	movs	r5, #3
 8010c5a:	e7b7      	b.n	8010bcc <_scanf_float+0x188>
 8010c5c:	2d06      	cmp	r5, #6
 8010c5e:	f47f af21 	bne.w	8010aa4 <_scanf_float+0x60>
 8010c62:	2507      	movs	r5, #7
 8010c64:	e7b2      	b.n	8010bcc <_scanf_float+0x188>
 8010c66:	6822      	ldr	r2, [r4, #0]
 8010c68:	0591      	lsls	r1, r2, #22
 8010c6a:	f57f af1b 	bpl.w	8010aa4 <_scanf_float+0x60>
 8010c6e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8010c72:	6022      	str	r2, [r4, #0]
 8010c74:	f8cd 9004 	str.w	r9, [sp, #4]
 8010c78:	e7a8      	b.n	8010bcc <_scanf_float+0x188>
 8010c7a:	6822      	ldr	r2, [r4, #0]
 8010c7c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8010c80:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8010c84:	d006      	beq.n	8010c94 <_scanf_float+0x250>
 8010c86:	0550      	lsls	r0, r2, #21
 8010c88:	f57f af0c 	bpl.w	8010aa4 <_scanf_float+0x60>
 8010c8c:	f1b9 0f00 	cmp.w	r9, #0
 8010c90:	f43f af0f 	beq.w	8010ab2 <_scanf_float+0x6e>
 8010c94:	0591      	lsls	r1, r2, #22
 8010c96:	bf58      	it	pl
 8010c98:	9901      	ldrpl	r1, [sp, #4]
 8010c9a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8010c9e:	bf58      	it	pl
 8010ca0:	eba9 0101 	subpl.w	r1, r9, r1
 8010ca4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8010ca8:	bf58      	it	pl
 8010caa:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8010cae:	6022      	str	r2, [r4, #0]
 8010cb0:	f04f 0900 	mov.w	r9, #0
 8010cb4:	e78a      	b.n	8010bcc <_scanf_float+0x188>
 8010cb6:	f04f 0a03 	mov.w	sl, #3
 8010cba:	e787      	b.n	8010bcc <_scanf_float+0x188>
 8010cbc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8010cc0:	4639      	mov	r1, r7
 8010cc2:	4640      	mov	r0, r8
 8010cc4:	4798      	blx	r3
 8010cc6:	2800      	cmp	r0, #0
 8010cc8:	f43f aedf 	beq.w	8010a8a <_scanf_float+0x46>
 8010ccc:	e6ea      	b.n	8010aa4 <_scanf_float+0x60>
 8010cce:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010cd2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8010cd6:	463a      	mov	r2, r7
 8010cd8:	4640      	mov	r0, r8
 8010cda:	4798      	blx	r3
 8010cdc:	6923      	ldr	r3, [r4, #16]
 8010cde:	3b01      	subs	r3, #1
 8010ce0:	6123      	str	r3, [r4, #16]
 8010ce2:	e6ec      	b.n	8010abe <_scanf_float+0x7a>
 8010ce4:	1e6b      	subs	r3, r5, #1
 8010ce6:	2b06      	cmp	r3, #6
 8010ce8:	d825      	bhi.n	8010d36 <_scanf_float+0x2f2>
 8010cea:	2d02      	cmp	r5, #2
 8010cec:	d836      	bhi.n	8010d5c <_scanf_float+0x318>
 8010cee:	455e      	cmp	r6, fp
 8010cf0:	f67f aee8 	bls.w	8010ac4 <_scanf_float+0x80>
 8010cf4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010cf8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8010cfc:	463a      	mov	r2, r7
 8010cfe:	4640      	mov	r0, r8
 8010d00:	4798      	blx	r3
 8010d02:	6923      	ldr	r3, [r4, #16]
 8010d04:	3b01      	subs	r3, #1
 8010d06:	6123      	str	r3, [r4, #16]
 8010d08:	e7f1      	b.n	8010cee <_scanf_float+0x2aa>
 8010d0a:	9802      	ldr	r0, [sp, #8]
 8010d0c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010d10:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8010d14:	9002      	str	r0, [sp, #8]
 8010d16:	463a      	mov	r2, r7
 8010d18:	4640      	mov	r0, r8
 8010d1a:	4798      	blx	r3
 8010d1c:	6923      	ldr	r3, [r4, #16]
 8010d1e:	3b01      	subs	r3, #1
 8010d20:	6123      	str	r3, [r4, #16]
 8010d22:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010d26:	fa5f fa8a 	uxtb.w	sl, sl
 8010d2a:	f1ba 0f02 	cmp.w	sl, #2
 8010d2e:	d1ec      	bne.n	8010d0a <_scanf_float+0x2c6>
 8010d30:	3d03      	subs	r5, #3
 8010d32:	b2ed      	uxtb	r5, r5
 8010d34:	1b76      	subs	r6, r6, r5
 8010d36:	6823      	ldr	r3, [r4, #0]
 8010d38:	05da      	lsls	r2, r3, #23
 8010d3a:	d52f      	bpl.n	8010d9c <_scanf_float+0x358>
 8010d3c:	055b      	lsls	r3, r3, #21
 8010d3e:	d510      	bpl.n	8010d62 <_scanf_float+0x31e>
 8010d40:	455e      	cmp	r6, fp
 8010d42:	f67f aebf 	bls.w	8010ac4 <_scanf_float+0x80>
 8010d46:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010d4a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8010d4e:	463a      	mov	r2, r7
 8010d50:	4640      	mov	r0, r8
 8010d52:	4798      	blx	r3
 8010d54:	6923      	ldr	r3, [r4, #16]
 8010d56:	3b01      	subs	r3, #1
 8010d58:	6123      	str	r3, [r4, #16]
 8010d5a:	e7f1      	b.n	8010d40 <_scanf_float+0x2fc>
 8010d5c:	46aa      	mov	sl, r5
 8010d5e:	9602      	str	r6, [sp, #8]
 8010d60:	e7df      	b.n	8010d22 <_scanf_float+0x2de>
 8010d62:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8010d66:	6923      	ldr	r3, [r4, #16]
 8010d68:	2965      	cmp	r1, #101	; 0x65
 8010d6a:	f103 33ff 	add.w	r3, r3, #4294967295
 8010d6e:	f106 35ff 	add.w	r5, r6, #4294967295
 8010d72:	6123      	str	r3, [r4, #16]
 8010d74:	d00c      	beq.n	8010d90 <_scanf_float+0x34c>
 8010d76:	2945      	cmp	r1, #69	; 0x45
 8010d78:	d00a      	beq.n	8010d90 <_scanf_float+0x34c>
 8010d7a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010d7e:	463a      	mov	r2, r7
 8010d80:	4640      	mov	r0, r8
 8010d82:	4798      	blx	r3
 8010d84:	6923      	ldr	r3, [r4, #16]
 8010d86:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8010d8a:	3b01      	subs	r3, #1
 8010d8c:	1eb5      	subs	r5, r6, #2
 8010d8e:	6123      	str	r3, [r4, #16]
 8010d90:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010d94:	463a      	mov	r2, r7
 8010d96:	4640      	mov	r0, r8
 8010d98:	4798      	blx	r3
 8010d9a:	462e      	mov	r6, r5
 8010d9c:	6825      	ldr	r5, [r4, #0]
 8010d9e:	f015 0510 	ands.w	r5, r5, #16
 8010da2:	d159      	bne.n	8010e58 <_scanf_float+0x414>
 8010da4:	7035      	strb	r5, [r6, #0]
 8010da6:	6823      	ldr	r3, [r4, #0]
 8010da8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8010dac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010db0:	d11b      	bne.n	8010dea <_scanf_float+0x3a6>
 8010db2:	9b01      	ldr	r3, [sp, #4]
 8010db4:	454b      	cmp	r3, r9
 8010db6:	eba3 0209 	sub.w	r2, r3, r9
 8010dba:	d123      	bne.n	8010e04 <_scanf_float+0x3c0>
 8010dbc:	2200      	movs	r2, #0
 8010dbe:	4659      	mov	r1, fp
 8010dc0:	4640      	mov	r0, r8
 8010dc2:	f000 ff13 	bl	8011bec <_strtod_r>
 8010dc6:	6822      	ldr	r2, [r4, #0]
 8010dc8:	9b03      	ldr	r3, [sp, #12]
 8010dca:	f012 0f02 	tst.w	r2, #2
 8010dce:	ec57 6b10 	vmov	r6, r7, d0
 8010dd2:	681b      	ldr	r3, [r3, #0]
 8010dd4:	d021      	beq.n	8010e1a <_scanf_float+0x3d6>
 8010dd6:	9903      	ldr	r1, [sp, #12]
 8010dd8:	1d1a      	adds	r2, r3, #4
 8010dda:	600a      	str	r2, [r1, #0]
 8010ddc:	681b      	ldr	r3, [r3, #0]
 8010dde:	e9c3 6700 	strd	r6, r7, [r3]
 8010de2:	68e3      	ldr	r3, [r4, #12]
 8010de4:	3301      	adds	r3, #1
 8010de6:	60e3      	str	r3, [r4, #12]
 8010de8:	e66d      	b.n	8010ac6 <_scanf_float+0x82>
 8010dea:	9b04      	ldr	r3, [sp, #16]
 8010dec:	2b00      	cmp	r3, #0
 8010dee:	d0e5      	beq.n	8010dbc <_scanf_float+0x378>
 8010df0:	9905      	ldr	r1, [sp, #20]
 8010df2:	230a      	movs	r3, #10
 8010df4:	462a      	mov	r2, r5
 8010df6:	3101      	adds	r1, #1
 8010df8:	4640      	mov	r0, r8
 8010dfa:	f000 ffdb 	bl	8011db4 <_strtol_r>
 8010dfe:	9b04      	ldr	r3, [sp, #16]
 8010e00:	9e05      	ldr	r6, [sp, #20]
 8010e02:	1ac2      	subs	r2, r0, r3
 8010e04:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8010e08:	429e      	cmp	r6, r3
 8010e0a:	bf28      	it	cs
 8010e0c:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8010e10:	4912      	ldr	r1, [pc, #72]	; (8010e5c <_scanf_float+0x418>)
 8010e12:	4630      	mov	r0, r6
 8010e14:	f000 f82c 	bl	8010e70 <siprintf>
 8010e18:	e7d0      	b.n	8010dbc <_scanf_float+0x378>
 8010e1a:	9903      	ldr	r1, [sp, #12]
 8010e1c:	f012 0f04 	tst.w	r2, #4
 8010e20:	f103 0204 	add.w	r2, r3, #4
 8010e24:	600a      	str	r2, [r1, #0]
 8010e26:	d1d9      	bne.n	8010ddc <_scanf_float+0x398>
 8010e28:	f8d3 8000 	ldr.w	r8, [r3]
 8010e2c:	ee10 2a10 	vmov	r2, s0
 8010e30:	ee10 0a10 	vmov	r0, s0
 8010e34:	463b      	mov	r3, r7
 8010e36:	4639      	mov	r1, r7
 8010e38:	f7ef fea8 	bl	8000b8c <__aeabi_dcmpun>
 8010e3c:	b128      	cbz	r0, 8010e4a <_scanf_float+0x406>
 8010e3e:	4808      	ldr	r0, [pc, #32]	; (8010e60 <_scanf_float+0x41c>)
 8010e40:	f000 f810 	bl	8010e64 <nanf>
 8010e44:	ed88 0a00 	vstr	s0, [r8]
 8010e48:	e7cb      	b.n	8010de2 <_scanf_float+0x39e>
 8010e4a:	4630      	mov	r0, r6
 8010e4c:	4639      	mov	r1, r7
 8010e4e:	f7ef fefb 	bl	8000c48 <__aeabi_d2f>
 8010e52:	f8c8 0000 	str.w	r0, [r8]
 8010e56:	e7c4      	b.n	8010de2 <_scanf_float+0x39e>
 8010e58:	2500      	movs	r5, #0
 8010e5a:	e634      	b.n	8010ac6 <_scanf_float+0x82>
 8010e5c:	0801691e 	.word	0x0801691e
 8010e60:	08016a27 	.word	0x08016a27

08010e64 <nanf>:
 8010e64:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8010e6c <nanf+0x8>
 8010e68:	4770      	bx	lr
 8010e6a:	bf00      	nop
 8010e6c:	7fc00000 	.word	0x7fc00000

08010e70 <siprintf>:
 8010e70:	b40e      	push	{r1, r2, r3}
 8010e72:	b500      	push	{lr}
 8010e74:	b09c      	sub	sp, #112	; 0x70
 8010e76:	ab1d      	add	r3, sp, #116	; 0x74
 8010e78:	9002      	str	r0, [sp, #8]
 8010e7a:	9006      	str	r0, [sp, #24]
 8010e7c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010e80:	4809      	ldr	r0, [pc, #36]	; (8010ea8 <siprintf+0x38>)
 8010e82:	9107      	str	r1, [sp, #28]
 8010e84:	9104      	str	r1, [sp, #16]
 8010e86:	4909      	ldr	r1, [pc, #36]	; (8010eac <siprintf+0x3c>)
 8010e88:	f853 2b04 	ldr.w	r2, [r3], #4
 8010e8c:	9105      	str	r1, [sp, #20]
 8010e8e:	6800      	ldr	r0, [r0, #0]
 8010e90:	9301      	str	r3, [sp, #4]
 8010e92:	a902      	add	r1, sp, #8
 8010e94:	f003 f810 	bl	8013eb8 <_svfiprintf_r>
 8010e98:	9b02      	ldr	r3, [sp, #8]
 8010e9a:	2200      	movs	r2, #0
 8010e9c:	701a      	strb	r2, [r3, #0]
 8010e9e:	b01c      	add	sp, #112	; 0x70
 8010ea0:	f85d eb04 	ldr.w	lr, [sp], #4
 8010ea4:	b003      	add	sp, #12
 8010ea6:	4770      	bx	lr
 8010ea8:	2000038c 	.word	0x2000038c
 8010eac:	ffff0208 	.word	0xffff0208

08010eb0 <siscanf>:
 8010eb0:	b40e      	push	{r1, r2, r3}
 8010eb2:	b510      	push	{r4, lr}
 8010eb4:	b09f      	sub	sp, #124	; 0x7c
 8010eb6:	ac21      	add	r4, sp, #132	; 0x84
 8010eb8:	f44f 7101 	mov.w	r1, #516	; 0x204
 8010ebc:	f854 2b04 	ldr.w	r2, [r4], #4
 8010ec0:	9201      	str	r2, [sp, #4]
 8010ec2:	f8ad 101c 	strh.w	r1, [sp, #28]
 8010ec6:	9004      	str	r0, [sp, #16]
 8010ec8:	9008      	str	r0, [sp, #32]
 8010eca:	f7ef f9ab 	bl	8000224 <strlen>
 8010ece:	4b0c      	ldr	r3, [pc, #48]	; (8010f00 <siscanf+0x50>)
 8010ed0:	9005      	str	r0, [sp, #20]
 8010ed2:	9009      	str	r0, [sp, #36]	; 0x24
 8010ed4:	930d      	str	r3, [sp, #52]	; 0x34
 8010ed6:	480b      	ldr	r0, [pc, #44]	; (8010f04 <siscanf+0x54>)
 8010ed8:	9a01      	ldr	r2, [sp, #4]
 8010eda:	6800      	ldr	r0, [r0, #0]
 8010edc:	9403      	str	r4, [sp, #12]
 8010ede:	2300      	movs	r3, #0
 8010ee0:	9311      	str	r3, [sp, #68]	; 0x44
 8010ee2:	9316      	str	r3, [sp, #88]	; 0x58
 8010ee4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010ee8:	f8ad 301e 	strh.w	r3, [sp, #30]
 8010eec:	a904      	add	r1, sp, #16
 8010eee:	4623      	mov	r3, r4
 8010ef0:	f003 f93c 	bl	801416c <__ssvfiscanf_r>
 8010ef4:	b01f      	add	sp, #124	; 0x7c
 8010ef6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010efa:	b003      	add	sp, #12
 8010efc:	4770      	bx	lr
 8010efe:	bf00      	nop
 8010f00:	08010f2b 	.word	0x08010f2b
 8010f04:	2000038c 	.word	0x2000038c

08010f08 <__sread>:
 8010f08:	b510      	push	{r4, lr}
 8010f0a:	460c      	mov	r4, r1
 8010f0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010f10:	f003 fd50 	bl	80149b4 <_read_r>
 8010f14:	2800      	cmp	r0, #0
 8010f16:	bfab      	itete	ge
 8010f18:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010f1a:	89a3      	ldrhlt	r3, [r4, #12]
 8010f1c:	181b      	addge	r3, r3, r0
 8010f1e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010f22:	bfac      	ite	ge
 8010f24:	6563      	strge	r3, [r4, #84]	; 0x54
 8010f26:	81a3      	strhlt	r3, [r4, #12]
 8010f28:	bd10      	pop	{r4, pc}

08010f2a <__seofread>:
 8010f2a:	2000      	movs	r0, #0
 8010f2c:	4770      	bx	lr

08010f2e <__swrite>:
 8010f2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010f32:	461f      	mov	r7, r3
 8010f34:	898b      	ldrh	r3, [r1, #12]
 8010f36:	05db      	lsls	r3, r3, #23
 8010f38:	4605      	mov	r5, r0
 8010f3a:	460c      	mov	r4, r1
 8010f3c:	4616      	mov	r6, r2
 8010f3e:	d505      	bpl.n	8010f4c <__swrite+0x1e>
 8010f40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010f44:	2302      	movs	r3, #2
 8010f46:	2200      	movs	r2, #0
 8010f48:	f002 f976 	bl	8013238 <_lseek_r>
 8010f4c:	89a3      	ldrh	r3, [r4, #12]
 8010f4e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010f52:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010f56:	81a3      	strh	r3, [r4, #12]
 8010f58:	4632      	mov	r2, r6
 8010f5a:	463b      	mov	r3, r7
 8010f5c:	4628      	mov	r0, r5
 8010f5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010f62:	f000 bf29 	b.w	8011db8 <_write_r>

08010f66 <__sseek>:
 8010f66:	b510      	push	{r4, lr}
 8010f68:	460c      	mov	r4, r1
 8010f6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010f6e:	f002 f963 	bl	8013238 <_lseek_r>
 8010f72:	1c43      	adds	r3, r0, #1
 8010f74:	89a3      	ldrh	r3, [r4, #12]
 8010f76:	bf15      	itete	ne
 8010f78:	6560      	strne	r0, [r4, #84]	; 0x54
 8010f7a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010f7e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010f82:	81a3      	strheq	r3, [r4, #12]
 8010f84:	bf18      	it	ne
 8010f86:	81a3      	strhne	r3, [r4, #12]
 8010f88:	bd10      	pop	{r4, pc}

08010f8a <__sclose>:
 8010f8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010f8e:	f000 bf43 	b.w	8011e18 <_close_r>

08010f92 <strcpy>:
 8010f92:	4603      	mov	r3, r0
 8010f94:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010f98:	f803 2b01 	strb.w	r2, [r3], #1
 8010f9c:	2a00      	cmp	r2, #0
 8010f9e:	d1f9      	bne.n	8010f94 <strcpy+0x2>
 8010fa0:	4770      	bx	lr

08010fa2 <sulp>:
 8010fa2:	b570      	push	{r4, r5, r6, lr}
 8010fa4:	4604      	mov	r4, r0
 8010fa6:	460d      	mov	r5, r1
 8010fa8:	ec45 4b10 	vmov	d0, r4, r5
 8010fac:	4616      	mov	r6, r2
 8010fae:	f002 fce1 	bl	8013974 <__ulp>
 8010fb2:	ec51 0b10 	vmov	r0, r1, d0
 8010fb6:	b17e      	cbz	r6, 8010fd8 <sulp+0x36>
 8010fb8:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8010fbc:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8010fc0:	2b00      	cmp	r3, #0
 8010fc2:	dd09      	ble.n	8010fd8 <sulp+0x36>
 8010fc4:	051b      	lsls	r3, r3, #20
 8010fc6:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8010fca:	2400      	movs	r4, #0
 8010fcc:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8010fd0:	4622      	mov	r2, r4
 8010fd2:	462b      	mov	r3, r5
 8010fd4:	f7ef fb40 	bl	8000658 <__aeabi_dmul>
 8010fd8:	bd70      	pop	{r4, r5, r6, pc}
 8010fda:	0000      	movs	r0, r0
 8010fdc:	0000      	movs	r0, r0
	...

08010fe0 <_strtod_l>:
 8010fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010fe4:	ed2d 8b02 	vpush	{d8}
 8010fe8:	b09d      	sub	sp, #116	; 0x74
 8010fea:	461f      	mov	r7, r3
 8010fec:	2300      	movs	r3, #0
 8010fee:	9318      	str	r3, [sp, #96]	; 0x60
 8010ff0:	4ba2      	ldr	r3, [pc, #648]	; (801127c <_strtod_l+0x29c>)
 8010ff2:	9213      	str	r2, [sp, #76]	; 0x4c
 8010ff4:	681b      	ldr	r3, [r3, #0]
 8010ff6:	9305      	str	r3, [sp, #20]
 8010ff8:	4604      	mov	r4, r0
 8010ffa:	4618      	mov	r0, r3
 8010ffc:	4688      	mov	r8, r1
 8010ffe:	f7ef f911 	bl	8000224 <strlen>
 8011002:	f04f 0a00 	mov.w	sl, #0
 8011006:	4605      	mov	r5, r0
 8011008:	f04f 0b00 	mov.w	fp, #0
 801100c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8011010:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011012:	781a      	ldrb	r2, [r3, #0]
 8011014:	2a2b      	cmp	r2, #43	; 0x2b
 8011016:	d04e      	beq.n	80110b6 <_strtod_l+0xd6>
 8011018:	d83b      	bhi.n	8011092 <_strtod_l+0xb2>
 801101a:	2a0d      	cmp	r2, #13
 801101c:	d834      	bhi.n	8011088 <_strtod_l+0xa8>
 801101e:	2a08      	cmp	r2, #8
 8011020:	d834      	bhi.n	801108c <_strtod_l+0xac>
 8011022:	2a00      	cmp	r2, #0
 8011024:	d03e      	beq.n	80110a4 <_strtod_l+0xc4>
 8011026:	2300      	movs	r3, #0
 8011028:	930a      	str	r3, [sp, #40]	; 0x28
 801102a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 801102c:	7833      	ldrb	r3, [r6, #0]
 801102e:	2b30      	cmp	r3, #48	; 0x30
 8011030:	f040 80b0 	bne.w	8011194 <_strtod_l+0x1b4>
 8011034:	7873      	ldrb	r3, [r6, #1]
 8011036:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801103a:	2b58      	cmp	r3, #88	; 0x58
 801103c:	d168      	bne.n	8011110 <_strtod_l+0x130>
 801103e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011040:	9301      	str	r3, [sp, #4]
 8011042:	ab18      	add	r3, sp, #96	; 0x60
 8011044:	9702      	str	r7, [sp, #8]
 8011046:	9300      	str	r3, [sp, #0]
 8011048:	4a8d      	ldr	r2, [pc, #564]	; (8011280 <_strtod_l+0x2a0>)
 801104a:	ab19      	add	r3, sp, #100	; 0x64
 801104c:	a917      	add	r1, sp, #92	; 0x5c
 801104e:	4620      	mov	r0, r4
 8011050:	f001 fde6 	bl	8012c20 <__gethex>
 8011054:	f010 0707 	ands.w	r7, r0, #7
 8011058:	4605      	mov	r5, r0
 801105a:	d005      	beq.n	8011068 <_strtod_l+0x88>
 801105c:	2f06      	cmp	r7, #6
 801105e:	d12c      	bne.n	80110ba <_strtod_l+0xda>
 8011060:	3601      	adds	r6, #1
 8011062:	2300      	movs	r3, #0
 8011064:	9617      	str	r6, [sp, #92]	; 0x5c
 8011066:	930a      	str	r3, [sp, #40]	; 0x28
 8011068:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801106a:	2b00      	cmp	r3, #0
 801106c:	f040 8590 	bne.w	8011b90 <_strtod_l+0xbb0>
 8011070:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011072:	b1eb      	cbz	r3, 80110b0 <_strtod_l+0xd0>
 8011074:	4652      	mov	r2, sl
 8011076:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801107a:	ec43 2b10 	vmov	d0, r2, r3
 801107e:	b01d      	add	sp, #116	; 0x74
 8011080:	ecbd 8b02 	vpop	{d8}
 8011084:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011088:	2a20      	cmp	r2, #32
 801108a:	d1cc      	bne.n	8011026 <_strtod_l+0x46>
 801108c:	3301      	adds	r3, #1
 801108e:	9317      	str	r3, [sp, #92]	; 0x5c
 8011090:	e7be      	b.n	8011010 <_strtod_l+0x30>
 8011092:	2a2d      	cmp	r2, #45	; 0x2d
 8011094:	d1c7      	bne.n	8011026 <_strtod_l+0x46>
 8011096:	2201      	movs	r2, #1
 8011098:	920a      	str	r2, [sp, #40]	; 0x28
 801109a:	1c5a      	adds	r2, r3, #1
 801109c:	9217      	str	r2, [sp, #92]	; 0x5c
 801109e:	785b      	ldrb	r3, [r3, #1]
 80110a0:	2b00      	cmp	r3, #0
 80110a2:	d1c2      	bne.n	801102a <_strtod_l+0x4a>
 80110a4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80110a6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80110aa:	2b00      	cmp	r3, #0
 80110ac:	f040 856e 	bne.w	8011b8c <_strtod_l+0xbac>
 80110b0:	4652      	mov	r2, sl
 80110b2:	465b      	mov	r3, fp
 80110b4:	e7e1      	b.n	801107a <_strtod_l+0x9a>
 80110b6:	2200      	movs	r2, #0
 80110b8:	e7ee      	b.n	8011098 <_strtod_l+0xb8>
 80110ba:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80110bc:	b13a      	cbz	r2, 80110ce <_strtod_l+0xee>
 80110be:	2135      	movs	r1, #53	; 0x35
 80110c0:	a81a      	add	r0, sp, #104	; 0x68
 80110c2:	f002 fd62 	bl	8013b8a <__copybits>
 80110c6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80110c8:	4620      	mov	r0, r4
 80110ca:	f002 f921 	bl	8013310 <_Bfree>
 80110ce:	3f01      	subs	r7, #1
 80110d0:	2f04      	cmp	r7, #4
 80110d2:	d806      	bhi.n	80110e2 <_strtod_l+0x102>
 80110d4:	e8df f007 	tbb	[pc, r7]
 80110d8:	1714030a 	.word	0x1714030a
 80110dc:	0a          	.byte	0x0a
 80110dd:	00          	.byte	0x00
 80110de:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 80110e2:	0728      	lsls	r0, r5, #28
 80110e4:	d5c0      	bpl.n	8011068 <_strtod_l+0x88>
 80110e6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80110ea:	e7bd      	b.n	8011068 <_strtod_l+0x88>
 80110ec:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 80110f0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80110f2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80110f6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80110fa:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80110fe:	e7f0      	b.n	80110e2 <_strtod_l+0x102>
 8011100:	f8df b180 	ldr.w	fp, [pc, #384]	; 8011284 <_strtod_l+0x2a4>
 8011104:	e7ed      	b.n	80110e2 <_strtod_l+0x102>
 8011106:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 801110a:	f04f 3aff 	mov.w	sl, #4294967295
 801110e:	e7e8      	b.n	80110e2 <_strtod_l+0x102>
 8011110:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011112:	1c5a      	adds	r2, r3, #1
 8011114:	9217      	str	r2, [sp, #92]	; 0x5c
 8011116:	785b      	ldrb	r3, [r3, #1]
 8011118:	2b30      	cmp	r3, #48	; 0x30
 801111a:	d0f9      	beq.n	8011110 <_strtod_l+0x130>
 801111c:	2b00      	cmp	r3, #0
 801111e:	d0a3      	beq.n	8011068 <_strtod_l+0x88>
 8011120:	2301      	movs	r3, #1
 8011122:	f04f 0900 	mov.w	r9, #0
 8011126:	9304      	str	r3, [sp, #16]
 8011128:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801112a:	9308      	str	r3, [sp, #32]
 801112c:	f8cd 901c 	str.w	r9, [sp, #28]
 8011130:	464f      	mov	r7, r9
 8011132:	220a      	movs	r2, #10
 8011134:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8011136:	7806      	ldrb	r6, [r0, #0]
 8011138:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 801113c:	b2d9      	uxtb	r1, r3
 801113e:	2909      	cmp	r1, #9
 8011140:	d92a      	bls.n	8011198 <_strtod_l+0x1b8>
 8011142:	9905      	ldr	r1, [sp, #20]
 8011144:	462a      	mov	r2, r5
 8011146:	f003 fc97 	bl	8014a78 <strncmp>
 801114a:	b398      	cbz	r0, 80111b4 <_strtod_l+0x1d4>
 801114c:	2000      	movs	r0, #0
 801114e:	4632      	mov	r2, r6
 8011150:	463d      	mov	r5, r7
 8011152:	9005      	str	r0, [sp, #20]
 8011154:	4603      	mov	r3, r0
 8011156:	2a65      	cmp	r2, #101	; 0x65
 8011158:	d001      	beq.n	801115e <_strtod_l+0x17e>
 801115a:	2a45      	cmp	r2, #69	; 0x45
 801115c:	d118      	bne.n	8011190 <_strtod_l+0x1b0>
 801115e:	b91d      	cbnz	r5, 8011168 <_strtod_l+0x188>
 8011160:	9a04      	ldr	r2, [sp, #16]
 8011162:	4302      	orrs	r2, r0
 8011164:	d09e      	beq.n	80110a4 <_strtod_l+0xc4>
 8011166:	2500      	movs	r5, #0
 8011168:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 801116c:	f108 0201 	add.w	r2, r8, #1
 8011170:	9217      	str	r2, [sp, #92]	; 0x5c
 8011172:	f898 2001 	ldrb.w	r2, [r8, #1]
 8011176:	2a2b      	cmp	r2, #43	; 0x2b
 8011178:	d075      	beq.n	8011266 <_strtod_l+0x286>
 801117a:	2a2d      	cmp	r2, #45	; 0x2d
 801117c:	d07b      	beq.n	8011276 <_strtod_l+0x296>
 801117e:	f04f 0c00 	mov.w	ip, #0
 8011182:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8011186:	2909      	cmp	r1, #9
 8011188:	f240 8082 	bls.w	8011290 <_strtod_l+0x2b0>
 801118c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8011190:	2600      	movs	r6, #0
 8011192:	e09d      	b.n	80112d0 <_strtod_l+0x2f0>
 8011194:	2300      	movs	r3, #0
 8011196:	e7c4      	b.n	8011122 <_strtod_l+0x142>
 8011198:	2f08      	cmp	r7, #8
 801119a:	bfd8      	it	le
 801119c:	9907      	ldrle	r1, [sp, #28]
 801119e:	f100 0001 	add.w	r0, r0, #1
 80111a2:	bfda      	itte	le
 80111a4:	fb02 3301 	mlale	r3, r2, r1, r3
 80111a8:	9307      	strle	r3, [sp, #28]
 80111aa:	fb02 3909 	mlagt	r9, r2, r9, r3
 80111ae:	3701      	adds	r7, #1
 80111b0:	9017      	str	r0, [sp, #92]	; 0x5c
 80111b2:	e7bf      	b.n	8011134 <_strtod_l+0x154>
 80111b4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80111b6:	195a      	adds	r2, r3, r5
 80111b8:	9217      	str	r2, [sp, #92]	; 0x5c
 80111ba:	5d5a      	ldrb	r2, [r3, r5]
 80111bc:	2f00      	cmp	r7, #0
 80111be:	d037      	beq.n	8011230 <_strtod_l+0x250>
 80111c0:	9005      	str	r0, [sp, #20]
 80111c2:	463d      	mov	r5, r7
 80111c4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80111c8:	2b09      	cmp	r3, #9
 80111ca:	d912      	bls.n	80111f2 <_strtod_l+0x212>
 80111cc:	2301      	movs	r3, #1
 80111ce:	e7c2      	b.n	8011156 <_strtod_l+0x176>
 80111d0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80111d2:	1c5a      	adds	r2, r3, #1
 80111d4:	9217      	str	r2, [sp, #92]	; 0x5c
 80111d6:	785a      	ldrb	r2, [r3, #1]
 80111d8:	3001      	adds	r0, #1
 80111da:	2a30      	cmp	r2, #48	; 0x30
 80111dc:	d0f8      	beq.n	80111d0 <_strtod_l+0x1f0>
 80111de:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80111e2:	2b08      	cmp	r3, #8
 80111e4:	f200 84d9 	bhi.w	8011b9a <_strtod_l+0xbba>
 80111e8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80111ea:	9005      	str	r0, [sp, #20]
 80111ec:	2000      	movs	r0, #0
 80111ee:	9308      	str	r3, [sp, #32]
 80111f0:	4605      	mov	r5, r0
 80111f2:	3a30      	subs	r2, #48	; 0x30
 80111f4:	f100 0301 	add.w	r3, r0, #1
 80111f8:	d014      	beq.n	8011224 <_strtod_l+0x244>
 80111fa:	9905      	ldr	r1, [sp, #20]
 80111fc:	4419      	add	r1, r3
 80111fe:	9105      	str	r1, [sp, #20]
 8011200:	462b      	mov	r3, r5
 8011202:	eb00 0e05 	add.w	lr, r0, r5
 8011206:	210a      	movs	r1, #10
 8011208:	4573      	cmp	r3, lr
 801120a:	d113      	bne.n	8011234 <_strtod_l+0x254>
 801120c:	182b      	adds	r3, r5, r0
 801120e:	2b08      	cmp	r3, #8
 8011210:	f105 0501 	add.w	r5, r5, #1
 8011214:	4405      	add	r5, r0
 8011216:	dc1c      	bgt.n	8011252 <_strtod_l+0x272>
 8011218:	9907      	ldr	r1, [sp, #28]
 801121a:	230a      	movs	r3, #10
 801121c:	fb03 2301 	mla	r3, r3, r1, r2
 8011220:	9307      	str	r3, [sp, #28]
 8011222:	2300      	movs	r3, #0
 8011224:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8011226:	1c51      	adds	r1, r2, #1
 8011228:	9117      	str	r1, [sp, #92]	; 0x5c
 801122a:	7852      	ldrb	r2, [r2, #1]
 801122c:	4618      	mov	r0, r3
 801122e:	e7c9      	b.n	80111c4 <_strtod_l+0x1e4>
 8011230:	4638      	mov	r0, r7
 8011232:	e7d2      	b.n	80111da <_strtod_l+0x1fa>
 8011234:	2b08      	cmp	r3, #8
 8011236:	dc04      	bgt.n	8011242 <_strtod_l+0x262>
 8011238:	9e07      	ldr	r6, [sp, #28]
 801123a:	434e      	muls	r6, r1
 801123c:	9607      	str	r6, [sp, #28]
 801123e:	3301      	adds	r3, #1
 8011240:	e7e2      	b.n	8011208 <_strtod_l+0x228>
 8011242:	f103 0c01 	add.w	ip, r3, #1
 8011246:	f1bc 0f10 	cmp.w	ip, #16
 801124a:	bfd8      	it	le
 801124c:	fb01 f909 	mulle.w	r9, r1, r9
 8011250:	e7f5      	b.n	801123e <_strtod_l+0x25e>
 8011252:	2d10      	cmp	r5, #16
 8011254:	bfdc      	itt	le
 8011256:	230a      	movle	r3, #10
 8011258:	fb03 2909 	mlale	r9, r3, r9, r2
 801125c:	e7e1      	b.n	8011222 <_strtod_l+0x242>
 801125e:	2300      	movs	r3, #0
 8011260:	9305      	str	r3, [sp, #20]
 8011262:	2301      	movs	r3, #1
 8011264:	e77c      	b.n	8011160 <_strtod_l+0x180>
 8011266:	f04f 0c00 	mov.w	ip, #0
 801126a:	f108 0202 	add.w	r2, r8, #2
 801126e:	9217      	str	r2, [sp, #92]	; 0x5c
 8011270:	f898 2002 	ldrb.w	r2, [r8, #2]
 8011274:	e785      	b.n	8011182 <_strtod_l+0x1a2>
 8011276:	f04f 0c01 	mov.w	ip, #1
 801127a:	e7f6      	b.n	801126a <_strtod_l+0x28a>
 801127c:	08016c08 	.word	0x08016c08
 8011280:	08016924 	.word	0x08016924
 8011284:	7ff00000 	.word	0x7ff00000
 8011288:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801128a:	1c51      	adds	r1, r2, #1
 801128c:	9117      	str	r1, [sp, #92]	; 0x5c
 801128e:	7852      	ldrb	r2, [r2, #1]
 8011290:	2a30      	cmp	r2, #48	; 0x30
 8011292:	d0f9      	beq.n	8011288 <_strtod_l+0x2a8>
 8011294:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8011298:	2908      	cmp	r1, #8
 801129a:	f63f af79 	bhi.w	8011190 <_strtod_l+0x1b0>
 801129e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80112a2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80112a4:	9206      	str	r2, [sp, #24]
 80112a6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80112a8:	1c51      	adds	r1, r2, #1
 80112aa:	9117      	str	r1, [sp, #92]	; 0x5c
 80112ac:	7852      	ldrb	r2, [r2, #1]
 80112ae:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 80112b2:	2e09      	cmp	r6, #9
 80112b4:	d937      	bls.n	8011326 <_strtod_l+0x346>
 80112b6:	9e06      	ldr	r6, [sp, #24]
 80112b8:	1b89      	subs	r1, r1, r6
 80112ba:	2908      	cmp	r1, #8
 80112bc:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80112c0:	dc02      	bgt.n	80112c8 <_strtod_l+0x2e8>
 80112c2:	4576      	cmp	r6, lr
 80112c4:	bfa8      	it	ge
 80112c6:	4676      	movge	r6, lr
 80112c8:	f1bc 0f00 	cmp.w	ip, #0
 80112cc:	d000      	beq.n	80112d0 <_strtod_l+0x2f0>
 80112ce:	4276      	negs	r6, r6
 80112d0:	2d00      	cmp	r5, #0
 80112d2:	d14d      	bne.n	8011370 <_strtod_l+0x390>
 80112d4:	9904      	ldr	r1, [sp, #16]
 80112d6:	4301      	orrs	r1, r0
 80112d8:	f47f aec6 	bne.w	8011068 <_strtod_l+0x88>
 80112dc:	2b00      	cmp	r3, #0
 80112de:	f47f aee1 	bne.w	80110a4 <_strtod_l+0xc4>
 80112e2:	2a69      	cmp	r2, #105	; 0x69
 80112e4:	d027      	beq.n	8011336 <_strtod_l+0x356>
 80112e6:	dc24      	bgt.n	8011332 <_strtod_l+0x352>
 80112e8:	2a49      	cmp	r2, #73	; 0x49
 80112ea:	d024      	beq.n	8011336 <_strtod_l+0x356>
 80112ec:	2a4e      	cmp	r2, #78	; 0x4e
 80112ee:	f47f aed9 	bne.w	80110a4 <_strtod_l+0xc4>
 80112f2:	499f      	ldr	r1, [pc, #636]	; (8011570 <_strtod_l+0x590>)
 80112f4:	a817      	add	r0, sp, #92	; 0x5c
 80112f6:	f001 feeb 	bl	80130d0 <__match>
 80112fa:	2800      	cmp	r0, #0
 80112fc:	f43f aed2 	beq.w	80110a4 <_strtod_l+0xc4>
 8011300:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011302:	781b      	ldrb	r3, [r3, #0]
 8011304:	2b28      	cmp	r3, #40	; 0x28
 8011306:	d12d      	bne.n	8011364 <_strtod_l+0x384>
 8011308:	499a      	ldr	r1, [pc, #616]	; (8011574 <_strtod_l+0x594>)
 801130a:	aa1a      	add	r2, sp, #104	; 0x68
 801130c:	a817      	add	r0, sp, #92	; 0x5c
 801130e:	f001 fef3 	bl	80130f8 <__hexnan>
 8011312:	2805      	cmp	r0, #5
 8011314:	d126      	bne.n	8011364 <_strtod_l+0x384>
 8011316:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011318:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 801131c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8011320:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8011324:	e6a0      	b.n	8011068 <_strtod_l+0x88>
 8011326:	210a      	movs	r1, #10
 8011328:	fb01 2e0e 	mla	lr, r1, lr, r2
 801132c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8011330:	e7b9      	b.n	80112a6 <_strtod_l+0x2c6>
 8011332:	2a6e      	cmp	r2, #110	; 0x6e
 8011334:	e7db      	b.n	80112ee <_strtod_l+0x30e>
 8011336:	4990      	ldr	r1, [pc, #576]	; (8011578 <_strtod_l+0x598>)
 8011338:	a817      	add	r0, sp, #92	; 0x5c
 801133a:	f001 fec9 	bl	80130d0 <__match>
 801133e:	2800      	cmp	r0, #0
 8011340:	f43f aeb0 	beq.w	80110a4 <_strtod_l+0xc4>
 8011344:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011346:	498d      	ldr	r1, [pc, #564]	; (801157c <_strtod_l+0x59c>)
 8011348:	3b01      	subs	r3, #1
 801134a:	a817      	add	r0, sp, #92	; 0x5c
 801134c:	9317      	str	r3, [sp, #92]	; 0x5c
 801134e:	f001 febf 	bl	80130d0 <__match>
 8011352:	b910      	cbnz	r0, 801135a <_strtod_l+0x37a>
 8011354:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011356:	3301      	adds	r3, #1
 8011358:	9317      	str	r3, [sp, #92]	; 0x5c
 801135a:	f8df b230 	ldr.w	fp, [pc, #560]	; 801158c <_strtod_l+0x5ac>
 801135e:	f04f 0a00 	mov.w	sl, #0
 8011362:	e681      	b.n	8011068 <_strtod_l+0x88>
 8011364:	4886      	ldr	r0, [pc, #536]	; (8011580 <_strtod_l+0x5a0>)
 8011366:	f003 fb37 	bl	80149d8 <nan>
 801136a:	ec5b ab10 	vmov	sl, fp, d0
 801136e:	e67b      	b.n	8011068 <_strtod_l+0x88>
 8011370:	9b05      	ldr	r3, [sp, #20]
 8011372:	9807      	ldr	r0, [sp, #28]
 8011374:	1af3      	subs	r3, r6, r3
 8011376:	2f00      	cmp	r7, #0
 8011378:	bf08      	it	eq
 801137a:	462f      	moveq	r7, r5
 801137c:	2d10      	cmp	r5, #16
 801137e:	9306      	str	r3, [sp, #24]
 8011380:	46a8      	mov	r8, r5
 8011382:	bfa8      	it	ge
 8011384:	f04f 0810 	movge.w	r8, #16
 8011388:	f7ef f8ec 	bl	8000564 <__aeabi_ui2d>
 801138c:	2d09      	cmp	r5, #9
 801138e:	4682      	mov	sl, r0
 8011390:	468b      	mov	fp, r1
 8011392:	dd13      	ble.n	80113bc <_strtod_l+0x3dc>
 8011394:	4b7b      	ldr	r3, [pc, #492]	; (8011584 <_strtod_l+0x5a4>)
 8011396:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801139a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801139e:	f7ef f95b 	bl	8000658 <__aeabi_dmul>
 80113a2:	4682      	mov	sl, r0
 80113a4:	4648      	mov	r0, r9
 80113a6:	468b      	mov	fp, r1
 80113a8:	f7ef f8dc 	bl	8000564 <__aeabi_ui2d>
 80113ac:	4602      	mov	r2, r0
 80113ae:	460b      	mov	r3, r1
 80113b0:	4650      	mov	r0, sl
 80113b2:	4659      	mov	r1, fp
 80113b4:	f7ee ff9a 	bl	80002ec <__adddf3>
 80113b8:	4682      	mov	sl, r0
 80113ba:	468b      	mov	fp, r1
 80113bc:	2d0f      	cmp	r5, #15
 80113be:	dc38      	bgt.n	8011432 <_strtod_l+0x452>
 80113c0:	9b06      	ldr	r3, [sp, #24]
 80113c2:	2b00      	cmp	r3, #0
 80113c4:	f43f ae50 	beq.w	8011068 <_strtod_l+0x88>
 80113c8:	dd24      	ble.n	8011414 <_strtod_l+0x434>
 80113ca:	2b16      	cmp	r3, #22
 80113cc:	dc0b      	bgt.n	80113e6 <_strtod_l+0x406>
 80113ce:	496d      	ldr	r1, [pc, #436]	; (8011584 <_strtod_l+0x5a4>)
 80113d0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80113d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80113d8:	4652      	mov	r2, sl
 80113da:	465b      	mov	r3, fp
 80113dc:	f7ef f93c 	bl	8000658 <__aeabi_dmul>
 80113e0:	4682      	mov	sl, r0
 80113e2:	468b      	mov	fp, r1
 80113e4:	e640      	b.n	8011068 <_strtod_l+0x88>
 80113e6:	9a06      	ldr	r2, [sp, #24]
 80113e8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80113ec:	4293      	cmp	r3, r2
 80113ee:	db20      	blt.n	8011432 <_strtod_l+0x452>
 80113f0:	4c64      	ldr	r4, [pc, #400]	; (8011584 <_strtod_l+0x5a4>)
 80113f2:	f1c5 050f 	rsb	r5, r5, #15
 80113f6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80113fa:	4652      	mov	r2, sl
 80113fc:	465b      	mov	r3, fp
 80113fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011402:	f7ef f929 	bl	8000658 <__aeabi_dmul>
 8011406:	9b06      	ldr	r3, [sp, #24]
 8011408:	1b5d      	subs	r5, r3, r5
 801140a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801140e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8011412:	e7e3      	b.n	80113dc <_strtod_l+0x3fc>
 8011414:	9b06      	ldr	r3, [sp, #24]
 8011416:	3316      	adds	r3, #22
 8011418:	db0b      	blt.n	8011432 <_strtod_l+0x452>
 801141a:	9b05      	ldr	r3, [sp, #20]
 801141c:	1b9e      	subs	r6, r3, r6
 801141e:	4b59      	ldr	r3, [pc, #356]	; (8011584 <_strtod_l+0x5a4>)
 8011420:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8011424:	e9d6 2300 	ldrd	r2, r3, [r6]
 8011428:	4650      	mov	r0, sl
 801142a:	4659      	mov	r1, fp
 801142c:	f7ef fa3e 	bl	80008ac <__aeabi_ddiv>
 8011430:	e7d6      	b.n	80113e0 <_strtod_l+0x400>
 8011432:	9b06      	ldr	r3, [sp, #24]
 8011434:	eba5 0808 	sub.w	r8, r5, r8
 8011438:	4498      	add	r8, r3
 801143a:	f1b8 0f00 	cmp.w	r8, #0
 801143e:	dd74      	ble.n	801152a <_strtod_l+0x54a>
 8011440:	f018 030f 	ands.w	r3, r8, #15
 8011444:	d00a      	beq.n	801145c <_strtod_l+0x47c>
 8011446:	494f      	ldr	r1, [pc, #316]	; (8011584 <_strtod_l+0x5a4>)
 8011448:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801144c:	4652      	mov	r2, sl
 801144e:	465b      	mov	r3, fp
 8011450:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011454:	f7ef f900 	bl	8000658 <__aeabi_dmul>
 8011458:	4682      	mov	sl, r0
 801145a:	468b      	mov	fp, r1
 801145c:	f038 080f 	bics.w	r8, r8, #15
 8011460:	d04f      	beq.n	8011502 <_strtod_l+0x522>
 8011462:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8011466:	dd22      	ble.n	80114ae <_strtod_l+0x4ce>
 8011468:	2500      	movs	r5, #0
 801146a:	462e      	mov	r6, r5
 801146c:	9507      	str	r5, [sp, #28]
 801146e:	9505      	str	r5, [sp, #20]
 8011470:	2322      	movs	r3, #34	; 0x22
 8011472:	f8df b118 	ldr.w	fp, [pc, #280]	; 801158c <_strtod_l+0x5ac>
 8011476:	6023      	str	r3, [r4, #0]
 8011478:	f04f 0a00 	mov.w	sl, #0
 801147c:	9b07      	ldr	r3, [sp, #28]
 801147e:	2b00      	cmp	r3, #0
 8011480:	f43f adf2 	beq.w	8011068 <_strtod_l+0x88>
 8011484:	9918      	ldr	r1, [sp, #96]	; 0x60
 8011486:	4620      	mov	r0, r4
 8011488:	f001 ff42 	bl	8013310 <_Bfree>
 801148c:	9905      	ldr	r1, [sp, #20]
 801148e:	4620      	mov	r0, r4
 8011490:	f001 ff3e 	bl	8013310 <_Bfree>
 8011494:	4631      	mov	r1, r6
 8011496:	4620      	mov	r0, r4
 8011498:	f001 ff3a 	bl	8013310 <_Bfree>
 801149c:	9907      	ldr	r1, [sp, #28]
 801149e:	4620      	mov	r0, r4
 80114a0:	f001 ff36 	bl	8013310 <_Bfree>
 80114a4:	4629      	mov	r1, r5
 80114a6:	4620      	mov	r0, r4
 80114a8:	f001 ff32 	bl	8013310 <_Bfree>
 80114ac:	e5dc      	b.n	8011068 <_strtod_l+0x88>
 80114ae:	4b36      	ldr	r3, [pc, #216]	; (8011588 <_strtod_l+0x5a8>)
 80114b0:	9304      	str	r3, [sp, #16]
 80114b2:	2300      	movs	r3, #0
 80114b4:	ea4f 1828 	mov.w	r8, r8, asr #4
 80114b8:	4650      	mov	r0, sl
 80114ba:	4659      	mov	r1, fp
 80114bc:	4699      	mov	r9, r3
 80114be:	f1b8 0f01 	cmp.w	r8, #1
 80114c2:	dc21      	bgt.n	8011508 <_strtod_l+0x528>
 80114c4:	b10b      	cbz	r3, 80114ca <_strtod_l+0x4ea>
 80114c6:	4682      	mov	sl, r0
 80114c8:	468b      	mov	fp, r1
 80114ca:	4b2f      	ldr	r3, [pc, #188]	; (8011588 <_strtod_l+0x5a8>)
 80114cc:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80114d0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80114d4:	4652      	mov	r2, sl
 80114d6:	465b      	mov	r3, fp
 80114d8:	e9d9 0100 	ldrd	r0, r1, [r9]
 80114dc:	f7ef f8bc 	bl	8000658 <__aeabi_dmul>
 80114e0:	4b2a      	ldr	r3, [pc, #168]	; (801158c <_strtod_l+0x5ac>)
 80114e2:	460a      	mov	r2, r1
 80114e4:	400b      	ands	r3, r1
 80114e6:	492a      	ldr	r1, [pc, #168]	; (8011590 <_strtod_l+0x5b0>)
 80114e8:	428b      	cmp	r3, r1
 80114ea:	4682      	mov	sl, r0
 80114ec:	d8bc      	bhi.n	8011468 <_strtod_l+0x488>
 80114ee:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80114f2:	428b      	cmp	r3, r1
 80114f4:	bf86      	itte	hi
 80114f6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8011594 <_strtod_l+0x5b4>
 80114fa:	f04f 3aff 	movhi.w	sl, #4294967295
 80114fe:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8011502:	2300      	movs	r3, #0
 8011504:	9304      	str	r3, [sp, #16]
 8011506:	e084      	b.n	8011612 <_strtod_l+0x632>
 8011508:	f018 0f01 	tst.w	r8, #1
 801150c:	d005      	beq.n	801151a <_strtod_l+0x53a>
 801150e:	9b04      	ldr	r3, [sp, #16]
 8011510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011514:	f7ef f8a0 	bl	8000658 <__aeabi_dmul>
 8011518:	2301      	movs	r3, #1
 801151a:	9a04      	ldr	r2, [sp, #16]
 801151c:	3208      	adds	r2, #8
 801151e:	f109 0901 	add.w	r9, r9, #1
 8011522:	ea4f 0868 	mov.w	r8, r8, asr #1
 8011526:	9204      	str	r2, [sp, #16]
 8011528:	e7c9      	b.n	80114be <_strtod_l+0x4de>
 801152a:	d0ea      	beq.n	8011502 <_strtod_l+0x522>
 801152c:	f1c8 0800 	rsb	r8, r8, #0
 8011530:	f018 020f 	ands.w	r2, r8, #15
 8011534:	d00a      	beq.n	801154c <_strtod_l+0x56c>
 8011536:	4b13      	ldr	r3, [pc, #76]	; (8011584 <_strtod_l+0x5a4>)
 8011538:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801153c:	4650      	mov	r0, sl
 801153e:	4659      	mov	r1, fp
 8011540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011544:	f7ef f9b2 	bl	80008ac <__aeabi_ddiv>
 8011548:	4682      	mov	sl, r0
 801154a:	468b      	mov	fp, r1
 801154c:	ea5f 1828 	movs.w	r8, r8, asr #4
 8011550:	d0d7      	beq.n	8011502 <_strtod_l+0x522>
 8011552:	f1b8 0f1f 	cmp.w	r8, #31
 8011556:	dd1f      	ble.n	8011598 <_strtod_l+0x5b8>
 8011558:	2500      	movs	r5, #0
 801155a:	462e      	mov	r6, r5
 801155c:	9507      	str	r5, [sp, #28]
 801155e:	9505      	str	r5, [sp, #20]
 8011560:	2322      	movs	r3, #34	; 0x22
 8011562:	f04f 0a00 	mov.w	sl, #0
 8011566:	f04f 0b00 	mov.w	fp, #0
 801156a:	6023      	str	r3, [r4, #0]
 801156c:	e786      	b.n	801147c <_strtod_l+0x49c>
 801156e:	bf00      	nop
 8011570:	080168f9 	.word	0x080168f9
 8011574:	08016938 	.word	0x08016938
 8011578:	080168f1 	.word	0x080168f1
 801157c:	08016b2c 	.word	0x08016b2c
 8011580:	08016a27 	.word	0x08016a27
 8011584:	08016ca0 	.word	0x08016ca0
 8011588:	08016c78 	.word	0x08016c78
 801158c:	7ff00000 	.word	0x7ff00000
 8011590:	7ca00000 	.word	0x7ca00000
 8011594:	7fefffff 	.word	0x7fefffff
 8011598:	f018 0310 	ands.w	r3, r8, #16
 801159c:	bf18      	it	ne
 801159e:	236a      	movne	r3, #106	; 0x6a
 80115a0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8011950 <_strtod_l+0x970>
 80115a4:	9304      	str	r3, [sp, #16]
 80115a6:	4650      	mov	r0, sl
 80115a8:	4659      	mov	r1, fp
 80115aa:	2300      	movs	r3, #0
 80115ac:	f018 0f01 	tst.w	r8, #1
 80115b0:	d004      	beq.n	80115bc <_strtod_l+0x5dc>
 80115b2:	e9d9 2300 	ldrd	r2, r3, [r9]
 80115b6:	f7ef f84f 	bl	8000658 <__aeabi_dmul>
 80115ba:	2301      	movs	r3, #1
 80115bc:	ea5f 0868 	movs.w	r8, r8, asr #1
 80115c0:	f109 0908 	add.w	r9, r9, #8
 80115c4:	d1f2      	bne.n	80115ac <_strtod_l+0x5cc>
 80115c6:	b10b      	cbz	r3, 80115cc <_strtod_l+0x5ec>
 80115c8:	4682      	mov	sl, r0
 80115ca:	468b      	mov	fp, r1
 80115cc:	9b04      	ldr	r3, [sp, #16]
 80115ce:	b1c3      	cbz	r3, 8011602 <_strtod_l+0x622>
 80115d0:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80115d4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80115d8:	2b00      	cmp	r3, #0
 80115da:	4659      	mov	r1, fp
 80115dc:	dd11      	ble.n	8011602 <_strtod_l+0x622>
 80115de:	2b1f      	cmp	r3, #31
 80115e0:	f340 8124 	ble.w	801182c <_strtod_l+0x84c>
 80115e4:	2b34      	cmp	r3, #52	; 0x34
 80115e6:	bfde      	ittt	le
 80115e8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80115ec:	f04f 33ff 	movle.w	r3, #4294967295
 80115f0:	fa03 f202 	lslle.w	r2, r3, r2
 80115f4:	f04f 0a00 	mov.w	sl, #0
 80115f8:	bfcc      	ite	gt
 80115fa:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80115fe:	ea02 0b01 	andle.w	fp, r2, r1
 8011602:	2200      	movs	r2, #0
 8011604:	2300      	movs	r3, #0
 8011606:	4650      	mov	r0, sl
 8011608:	4659      	mov	r1, fp
 801160a:	f7ef fa8d 	bl	8000b28 <__aeabi_dcmpeq>
 801160e:	2800      	cmp	r0, #0
 8011610:	d1a2      	bne.n	8011558 <_strtod_l+0x578>
 8011612:	9b07      	ldr	r3, [sp, #28]
 8011614:	9300      	str	r3, [sp, #0]
 8011616:	9908      	ldr	r1, [sp, #32]
 8011618:	462b      	mov	r3, r5
 801161a:	463a      	mov	r2, r7
 801161c:	4620      	mov	r0, r4
 801161e:	f001 fedf 	bl	80133e0 <__s2b>
 8011622:	9007      	str	r0, [sp, #28]
 8011624:	2800      	cmp	r0, #0
 8011626:	f43f af1f 	beq.w	8011468 <_strtod_l+0x488>
 801162a:	9b05      	ldr	r3, [sp, #20]
 801162c:	1b9e      	subs	r6, r3, r6
 801162e:	9b06      	ldr	r3, [sp, #24]
 8011630:	2b00      	cmp	r3, #0
 8011632:	bfb4      	ite	lt
 8011634:	4633      	movlt	r3, r6
 8011636:	2300      	movge	r3, #0
 8011638:	930c      	str	r3, [sp, #48]	; 0x30
 801163a:	9b06      	ldr	r3, [sp, #24]
 801163c:	2500      	movs	r5, #0
 801163e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8011642:	9312      	str	r3, [sp, #72]	; 0x48
 8011644:	462e      	mov	r6, r5
 8011646:	9b07      	ldr	r3, [sp, #28]
 8011648:	4620      	mov	r0, r4
 801164a:	6859      	ldr	r1, [r3, #4]
 801164c:	f001 fe20 	bl	8013290 <_Balloc>
 8011650:	9005      	str	r0, [sp, #20]
 8011652:	2800      	cmp	r0, #0
 8011654:	f43f af0c 	beq.w	8011470 <_strtod_l+0x490>
 8011658:	9b07      	ldr	r3, [sp, #28]
 801165a:	691a      	ldr	r2, [r3, #16]
 801165c:	3202      	adds	r2, #2
 801165e:	f103 010c 	add.w	r1, r3, #12
 8011662:	0092      	lsls	r2, r2, #2
 8011664:	300c      	adds	r0, #12
 8011666:	f7fe fd6d 	bl	8010144 <memcpy>
 801166a:	ec4b ab10 	vmov	d0, sl, fp
 801166e:	aa1a      	add	r2, sp, #104	; 0x68
 8011670:	a919      	add	r1, sp, #100	; 0x64
 8011672:	4620      	mov	r0, r4
 8011674:	f002 f9fa 	bl	8013a6c <__d2b>
 8011678:	ec4b ab18 	vmov	d8, sl, fp
 801167c:	9018      	str	r0, [sp, #96]	; 0x60
 801167e:	2800      	cmp	r0, #0
 8011680:	f43f aef6 	beq.w	8011470 <_strtod_l+0x490>
 8011684:	2101      	movs	r1, #1
 8011686:	4620      	mov	r0, r4
 8011688:	f001 ff44 	bl	8013514 <__i2b>
 801168c:	4606      	mov	r6, r0
 801168e:	2800      	cmp	r0, #0
 8011690:	f43f aeee 	beq.w	8011470 <_strtod_l+0x490>
 8011694:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8011696:	9904      	ldr	r1, [sp, #16]
 8011698:	2b00      	cmp	r3, #0
 801169a:	bfab      	itete	ge
 801169c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 801169e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 80116a0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80116a2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 80116a6:	bfac      	ite	ge
 80116a8:	eb03 0902 	addge.w	r9, r3, r2
 80116ac:	1ad7      	sublt	r7, r2, r3
 80116ae:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80116b0:	eba3 0801 	sub.w	r8, r3, r1
 80116b4:	4490      	add	r8, r2
 80116b6:	4ba1      	ldr	r3, [pc, #644]	; (801193c <_strtod_l+0x95c>)
 80116b8:	f108 38ff 	add.w	r8, r8, #4294967295
 80116bc:	4598      	cmp	r8, r3
 80116be:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80116c2:	f280 80c7 	bge.w	8011854 <_strtod_l+0x874>
 80116c6:	eba3 0308 	sub.w	r3, r3, r8
 80116ca:	2b1f      	cmp	r3, #31
 80116cc:	eba2 0203 	sub.w	r2, r2, r3
 80116d0:	f04f 0101 	mov.w	r1, #1
 80116d4:	f300 80b1 	bgt.w	801183a <_strtod_l+0x85a>
 80116d8:	fa01 f303 	lsl.w	r3, r1, r3
 80116dc:	930d      	str	r3, [sp, #52]	; 0x34
 80116de:	2300      	movs	r3, #0
 80116e0:	9308      	str	r3, [sp, #32]
 80116e2:	eb09 0802 	add.w	r8, r9, r2
 80116e6:	9b04      	ldr	r3, [sp, #16]
 80116e8:	45c1      	cmp	r9, r8
 80116ea:	4417      	add	r7, r2
 80116ec:	441f      	add	r7, r3
 80116ee:	464b      	mov	r3, r9
 80116f0:	bfa8      	it	ge
 80116f2:	4643      	movge	r3, r8
 80116f4:	42bb      	cmp	r3, r7
 80116f6:	bfa8      	it	ge
 80116f8:	463b      	movge	r3, r7
 80116fa:	2b00      	cmp	r3, #0
 80116fc:	bfc2      	ittt	gt
 80116fe:	eba8 0803 	subgt.w	r8, r8, r3
 8011702:	1aff      	subgt	r7, r7, r3
 8011704:	eba9 0903 	subgt.w	r9, r9, r3
 8011708:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801170a:	2b00      	cmp	r3, #0
 801170c:	dd17      	ble.n	801173e <_strtod_l+0x75e>
 801170e:	4631      	mov	r1, r6
 8011710:	461a      	mov	r2, r3
 8011712:	4620      	mov	r0, r4
 8011714:	f001 ffbe 	bl	8013694 <__pow5mult>
 8011718:	4606      	mov	r6, r0
 801171a:	2800      	cmp	r0, #0
 801171c:	f43f aea8 	beq.w	8011470 <_strtod_l+0x490>
 8011720:	4601      	mov	r1, r0
 8011722:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8011724:	4620      	mov	r0, r4
 8011726:	f001 ff0b 	bl	8013540 <__multiply>
 801172a:	900b      	str	r0, [sp, #44]	; 0x2c
 801172c:	2800      	cmp	r0, #0
 801172e:	f43f ae9f 	beq.w	8011470 <_strtod_l+0x490>
 8011732:	9918      	ldr	r1, [sp, #96]	; 0x60
 8011734:	4620      	mov	r0, r4
 8011736:	f001 fdeb 	bl	8013310 <_Bfree>
 801173a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801173c:	9318      	str	r3, [sp, #96]	; 0x60
 801173e:	f1b8 0f00 	cmp.w	r8, #0
 8011742:	f300 808c 	bgt.w	801185e <_strtod_l+0x87e>
 8011746:	9b06      	ldr	r3, [sp, #24]
 8011748:	2b00      	cmp	r3, #0
 801174a:	dd08      	ble.n	801175e <_strtod_l+0x77e>
 801174c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801174e:	9905      	ldr	r1, [sp, #20]
 8011750:	4620      	mov	r0, r4
 8011752:	f001 ff9f 	bl	8013694 <__pow5mult>
 8011756:	9005      	str	r0, [sp, #20]
 8011758:	2800      	cmp	r0, #0
 801175a:	f43f ae89 	beq.w	8011470 <_strtod_l+0x490>
 801175e:	2f00      	cmp	r7, #0
 8011760:	dd08      	ble.n	8011774 <_strtod_l+0x794>
 8011762:	9905      	ldr	r1, [sp, #20]
 8011764:	463a      	mov	r2, r7
 8011766:	4620      	mov	r0, r4
 8011768:	f001 ffee 	bl	8013748 <__lshift>
 801176c:	9005      	str	r0, [sp, #20]
 801176e:	2800      	cmp	r0, #0
 8011770:	f43f ae7e 	beq.w	8011470 <_strtod_l+0x490>
 8011774:	f1b9 0f00 	cmp.w	r9, #0
 8011778:	dd08      	ble.n	801178c <_strtod_l+0x7ac>
 801177a:	4631      	mov	r1, r6
 801177c:	464a      	mov	r2, r9
 801177e:	4620      	mov	r0, r4
 8011780:	f001 ffe2 	bl	8013748 <__lshift>
 8011784:	4606      	mov	r6, r0
 8011786:	2800      	cmp	r0, #0
 8011788:	f43f ae72 	beq.w	8011470 <_strtod_l+0x490>
 801178c:	9a05      	ldr	r2, [sp, #20]
 801178e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8011790:	4620      	mov	r0, r4
 8011792:	f002 f865 	bl	8013860 <__mdiff>
 8011796:	4605      	mov	r5, r0
 8011798:	2800      	cmp	r0, #0
 801179a:	f43f ae69 	beq.w	8011470 <_strtod_l+0x490>
 801179e:	68c3      	ldr	r3, [r0, #12]
 80117a0:	930b      	str	r3, [sp, #44]	; 0x2c
 80117a2:	2300      	movs	r3, #0
 80117a4:	60c3      	str	r3, [r0, #12]
 80117a6:	4631      	mov	r1, r6
 80117a8:	f002 f83e 	bl	8013828 <__mcmp>
 80117ac:	2800      	cmp	r0, #0
 80117ae:	da60      	bge.n	8011872 <_strtod_l+0x892>
 80117b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80117b2:	ea53 030a 	orrs.w	r3, r3, sl
 80117b6:	f040 8082 	bne.w	80118be <_strtod_l+0x8de>
 80117ba:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80117be:	2b00      	cmp	r3, #0
 80117c0:	d17d      	bne.n	80118be <_strtod_l+0x8de>
 80117c2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80117c6:	0d1b      	lsrs	r3, r3, #20
 80117c8:	051b      	lsls	r3, r3, #20
 80117ca:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80117ce:	d976      	bls.n	80118be <_strtod_l+0x8de>
 80117d0:	696b      	ldr	r3, [r5, #20]
 80117d2:	b913      	cbnz	r3, 80117da <_strtod_l+0x7fa>
 80117d4:	692b      	ldr	r3, [r5, #16]
 80117d6:	2b01      	cmp	r3, #1
 80117d8:	dd71      	ble.n	80118be <_strtod_l+0x8de>
 80117da:	4629      	mov	r1, r5
 80117dc:	2201      	movs	r2, #1
 80117de:	4620      	mov	r0, r4
 80117e0:	f001 ffb2 	bl	8013748 <__lshift>
 80117e4:	4631      	mov	r1, r6
 80117e6:	4605      	mov	r5, r0
 80117e8:	f002 f81e 	bl	8013828 <__mcmp>
 80117ec:	2800      	cmp	r0, #0
 80117ee:	dd66      	ble.n	80118be <_strtod_l+0x8de>
 80117f0:	9904      	ldr	r1, [sp, #16]
 80117f2:	4a53      	ldr	r2, [pc, #332]	; (8011940 <_strtod_l+0x960>)
 80117f4:	465b      	mov	r3, fp
 80117f6:	2900      	cmp	r1, #0
 80117f8:	f000 8081 	beq.w	80118fe <_strtod_l+0x91e>
 80117fc:	ea02 010b 	and.w	r1, r2, fp
 8011800:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8011804:	dc7b      	bgt.n	80118fe <_strtod_l+0x91e>
 8011806:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801180a:	f77f aea9 	ble.w	8011560 <_strtod_l+0x580>
 801180e:	4b4d      	ldr	r3, [pc, #308]	; (8011944 <_strtod_l+0x964>)
 8011810:	4650      	mov	r0, sl
 8011812:	4659      	mov	r1, fp
 8011814:	2200      	movs	r2, #0
 8011816:	f7ee ff1f 	bl	8000658 <__aeabi_dmul>
 801181a:	460b      	mov	r3, r1
 801181c:	4303      	orrs	r3, r0
 801181e:	bf08      	it	eq
 8011820:	2322      	moveq	r3, #34	; 0x22
 8011822:	4682      	mov	sl, r0
 8011824:	468b      	mov	fp, r1
 8011826:	bf08      	it	eq
 8011828:	6023      	streq	r3, [r4, #0]
 801182a:	e62b      	b.n	8011484 <_strtod_l+0x4a4>
 801182c:	f04f 32ff 	mov.w	r2, #4294967295
 8011830:	fa02 f303 	lsl.w	r3, r2, r3
 8011834:	ea03 0a0a 	and.w	sl, r3, sl
 8011838:	e6e3      	b.n	8011602 <_strtod_l+0x622>
 801183a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 801183e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8011842:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8011846:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 801184a:	fa01 f308 	lsl.w	r3, r1, r8
 801184e:	9308      	str	r3, [sp, #32]
 8011850:	910d      	str	r1, [sp, #52]	; 0x34
 8011852:	e746      	b.n	80116e2 <_strtod_l+0x702>
 8011854:	2300      	movs	r3, #0
 8011856:	9308      	str	r3, [sp, #32]
 8011858:	2301      	movs	r3, #1
 801185a:	930d      	str	r3, [sp, #52]	; 0x34
 801185c:	e741      	b.n	80116e2 <_strtod_l+0x702>
 801185e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8011860:	4642      	mov	r2, r8
 8011862:	4620      	mov	r0, r4
 8011864:	f001 ff70 	bl	8013748 <__lshift>
 8011868:	9018      	str	r0, [sp, #96]	; 0x60
 801186a:	2800      	cmp	r0, #0
 801186c:	f47f af6b 	bne.w	8011746 <_strtod_l+0x766>
 8011870:	e5fe      	b.n	8011470 <_strtod_l+0x490>
 8011872:	465f      	mov	r7, fp
 8011874:	d16e      	bne.n	8011954 <_strtod_l+0x974>
 8011876:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011878:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801187c:	b342      	cbz	r2, 80118d0 <_strtod_l+0x8f0>
 801187e:	4a32      	ldr	r2, [pc, #200]	; (8011948 <_strtod_l+0x968>)
 8011880:	4293      	cmp	r3, r2
 8011882:	d128      	bne.n	80118d6 <_strtod_l+0x8f6>
 8011884:	9b04      	ldr	r3, [sp, #16]
 8011886:	4651      	mov	r1, sl
 8011888:	b1eb      	cbz	r3, 80118c6 <_strtod_l+0x8e6>
 801188a:	4b2d      	ldr	r3, [pc, #180]	; (8011940 <_strtod_l+0x960>)
 801188c:	403b      	ands	r3, r7
 801188e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8011892:	f04f 32ff 	mov.w	r2, #4294967295
 8011896:	d819      	bhi.n	80118cc <_strtod_l+0x8ec>
 8011898:	0d1b      	lsrs	r3, r3, #20
 801189a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801189e:	fa02 f303 	lsl.w	r3, r2, r3
 80118a2:	4299      	cmp	r1, r3
 80118a4:	d117      	bne.n	80118d6 <_strtod_l+0x8f6>
 80118a6:	4b29      	ldr	r3, [pc, #164]	; (801194c <_strtod_l+0x96c>)
 80118a8:	429f      	cmp	r7, r3
 80118aa:	d102      	bne.n	80118b2 <_strtod_l+0x8d2>
 80118ac:	3101      	adds	r1, #1
 80118ae:	f43f addf 	beq.w	8011470 <_strtod_l+0x490>
 80118b2:	4b23      	ldr	r3, [pc, #140]	; (8011940 <_strtod_l+0x960>)
 80118b4:	403b      	ands	r3, r7
 80118b6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80118ba:	f04f 0a00 	mov.w	sl, #0
 80118be:	9b04      	ldr	r3, [sp, #16]
 80118c0:	2b00      	cmp	r3, #0
 80118c2:	d1a4      	bne.n	801180e <_strtod_l+0x82e>
 80118c4:	e5de      	b.n	8011484 <_strtod_l+0x4a4>
 80118c6:	f04f 33ff 	mov.w	r3, #4294967295
 80118ca:	e7ea      	b.n	80118a2 <_strtod_l+0x8c2>
 80118cc:	4613      	mov	r3, r2
 80118ce:	e7e8      	b.n	80118a2 <_strtod_l+0x8c2>
 80118d0:	ea53 030a 	orrs.w	r3, r3, sl
 80118d4:	d08c      	beq.n	80117f0 <_strtod_l+0x810>
 80118d6:	9b08      	ldr	r3, [sp, #32]
 80118d8:	b1db      	cbz	r3, 8011912 <_strtod_l+0x932>
 80118da:	423b      	tst	r3, r7
 80118dc:	d0ef      	beq.n	80118be <_strtod_l+0x8de>
 80118de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80118e0:	9a04      	ldr	r2, [sp, #16]
 80118e2:	4650      	mov	r0, sl
 80118e4:	4659      	mov	r1, fp
 80118e6:	b1c3      	cbz	r3, 801191a <_strtod_l+0x93a>
 80118e8:	f7ff fb5b 	bl	8010fa2 <sulp>
 80118ec:	4602      	mov	r2, r0
 80118ee:	460b      	mov	r3, r1
 80118f0:	ec51 0b18 	vmov	r0, r1, d8
 80118f4:	f7ee fcfa 	bl	80002ec <__adddf3>
 80118f8:	4682      	mov	sl, r0
 80118fa:	468b      	mov	fp, r1
 80118fc:	e7df      	b.n	80118be <_strtod_l+0x8de>
 80118fe:	4013      	ands	r3, r2
 8011900:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8011904:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8011908:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801190c:	f04f 3aff 	mov.w	sl, #4294967295
 8011910:	e7d5      	b.n	80118be <_strtod_l+0x8de>
 8011912:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011914:	ea13 0f0a 	tst.w	r3, sl
 8011918:	e7e0      	b.n	80118dc <_strtod_l+0x8fc>
 801191a:	f7ff fb42 	bl	8010fa2 <sulp>
 801191e:	4602      	mov	r2, r0
 8011920:	460b      	mov	r3, r1
 8011922:	ec51 0b18 	vmov	r0, r1, d8
 8011926:	f7ee fcdf 	bl	80002e8 <__aeabi_dsub>
 801192a:	2200      	movs	r2, #0
 801192c:	2300      	movs	r3, #0
 801192e:	4682      	mov	sl, r0
 8011930:	468b      	mov	fp, r1
 8011932:	f7ef f8f9 	bl	8000b28 <__aeabi_dcmpeq>
 8011936:	2800      	cmp	r0, #0
 8011938:	d0c1      	beq.n	80118be <_strtod_l+0x8de>
 801193a:	e611      	b.n	8011560 <_strtod_l+0x580>
 801193c:	fffffc02 	.word	0xfffffc02
 8011940:	7ff00000 	.word	0x7ff00000
 8011944:	39500000 	.word	0x39500000
 8011948:	000fffff 	.word	0x000fffff
 801194c:	7fefffff 	.word	0x7fefffff
 8011950:	08016950 	.word	0x08016950
 8011954:	4631      	mov	r1, r6
 8011956:	4628      	mov	r0, r5
 8011958:	f002 f8e4 	bl	8013b24 <__ratio>
 801195c:	ec59 8b10 	vmov	r8, r9, d0
 8011960:	ee10 0a10 	vmov	r0, s0
 8011964:	2200      	movs	r2, #0
 8011966:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801196a:	4649      	mov	r1, r9
 801196c:	f7ef f8f0 	bl	8000b50 <__aeabi_dcmple>
 8011970:	2800      	cmp	r0, #0
 8011972:	d07a      	beq.n	8011a6a <_strtod_l+0xa8a>
 8011974:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011976:	2b00      	cmp	r3, #0
 8011978:	d04a      	beq.n	8011a10 <_strtod_l+0xa30>
 801197a:	4b95      	ldr	r3, [pc, #596]	; (8011bd0 <_strtod_l+0xbf0>)
 801197c:	2200      	movs	r2, #0
 801197e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8011982:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8011bd0 <_strtod_l+0xbf0>
 8011986:	f04f 0800 	mov.w	r8, #0
 801198a:	4b92      	ldr	r3, [pc, #584]	; (8011bd4 <_strtod_l+0xbf4>)
 801198c:	403b      	ands	r3, r7
 801198e:	930d      	str	r3, [sp, #52]	; 0x34
 8011990:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011992:	4b91      	ldr	r3, [pc, #580]	; (8011bd8 <_strtod_l+0xbf8>)
 8011994:	429a      	cmp	r2, r3
 8011996:	f040 80b0 	bne.w	8011afa <_strtod_l+0xb1a>
 801199a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801199e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80119a2:	ec4b ab10 	vmov	d0, sl, fp
 80119a6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80119aa:	f001 ffe3 	bl	8013974 <__ulp>
 80119ae:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80119b2:	ec53 2b10 	vmov	r2, r3, d0
 80119b6:	f7ee fe4f 	bl	8000658 <__aeabi_dmul>
 80119ba:	4652      	mov	r2, sl
 80119bc:	465b      	mov	r3, fp
 80119be:	f7ee fc95 	bl	80002ec <__adddf3>
 80119c2:	460b      	mov	r3, r1
 80119c4:	4983      	ldr	r1, [pc, #524]	; (8011bd4 <_strtod_l+0xbf4>)
 80119c6:	4a85      	ldr	r2, [pc, #532]	; (8011bdc <_strtod_l+0xbfc>)
 80119c8:	4019      	ands	r1, r3
 80119ca:	4291      	cmp	r1, r2
 80119cc:	4682      	mov	sl, r0
 80119ce:	d960      	bls.n	8011a92 <_strtod_l+0xab2>
 80119d0:	ee18 3a90 	vmov	r3, s17
 80119d4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80119d8:	4293      	cmp	r3, r2
 80119da:	d104      	bne.n	80119e6 <_strtod_l+0xa06>
 80119dc:	ee18 3a10 	vmov	r3, s16
 80119e0:	3301      	adds	r3, #1
 80119e2:	f43f ad45 	beq.w	8011470 <_strtod_l+0x490>
 80119e6:	f8df b200 	ldr.w	fp, [pc, #512]	; 8011be8 <_strtod_l+0xc08>
 80119ea:	f04f 3aff 	mov.w	sl, #4294967295
 80119ee:	9918      	ldr	r1, [sp, #96]	; 0x60
 80119f0:	4620      	mov	r0, r4
 80119f2:	f001 fc8d 	bl	8013310 <_Bfree>
 80119f6:	9905      	ldr	r1, [sp, #20]
 80119f8:	4620      	mov	r0, r4
 80119fa:	f001 fc89 	bl	8013310 <_Bfree>
 80119fe:	4631      	mov	r1, r6
 8011a00:	4620      	mov	r0, r4
 8011a02:	f001 fc85 	bl	8013310 <_Bfree>
 8011a06:	4629      	mov	r1, r5
 8011a08:	4620      	mov	r0, r4
 8011a0a:	f001 fc81 	bl	8013310 <_Bfree>
 8011a0e:	e61a      	b.n	8011646 <_strtod_l+0x666>
 8011a10:	f1ba 0f00 	cmp.w	sl, #0
 8011a14:	d11b      	bne.n	8011a4e <_strtod_l+0xa6e>
 8011a16:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011a1a:	b9f3      	cbnz	r3, 8011a5a <_strtod_l+0xa7a>
 8011a1c:	4b6c      	ldr	r3, [pc, #432]	; (8011bd0 <_strtod_l+0xbf0>)
 8011a1e:	2200      	movs	r2, #0
 8011a20:	4640      	mov	r0, r8
 8011a22:	4649      	mov	r1, r9
 8011a24:	f7ef f88a 	bl	8000b3c <__aeabi_dcmplt>
 8011a28:	b9d0      	cbnz	r0, 8011a60 <_strtod_l+0xa80>
 8011a2a:	4640      	mov	r0, r8
 8011a2c:	4649      	mov	r1, r9
 8011a2e:	4b6c      	ldr	r3, [pc, #432]	; (8011be0 <_strtod_l+0xc00>)
 8011a30:	2200      	movs	r2, #0
 8011a32:	f7ee fe11 	bl	8000658 <__aeabi_dmul>
 8011a36:	4680      	mov	r8, r0
 8011a38:	4689      	mov	r9, r1
 8011a3a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8011a3e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8011a42:	9315      	str	r3, [sp, #84]	; 0x54
 8011a44:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8011a48:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8011a4c:	e79d      	b.n	801198a <_strtod_l+0x9aa>
 8011a4e:	f1ba 0f01 	cmp.w	sl, #1
 8011a52:	d102      	bne.n	8011a5a <_strtod_l+0xa7a>
 8011a54:	2f00      	cmp	r7, #0
 8011a56:	f43f ad83 	beq.w	8011560 <_strtod_l+0x580>
 8011a5a:	4b62      	ldr	r3, [pc, #392]	; (8011be4 <_strtod_l+0xc04>)
 8011a5c:	2200      	movs	r2, #0
 8011a5e:	e78e      	b.n	801197e <_strtod_l+0x99e>
 8011a60:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8011be0 <_strtod_l+0xc00>
 8011a64:	f04f 0800 	mov.w	r8, #0
 8011a68:	e7e7      	b.n	8011a3a <_strtod_l+0xa5a>
 8011a6a:	4b5d      	ldr	r3, [pc, #372]	; (8011be0 <_strtod_l+0xc00>)
 8011a6c:	4640      	mov	r0, r8
 8011a6e:	4649      	mov	r1, r9
 8011a70:	2200      	movs	r2, #0
 8011a72:	f7ee fdf1 	bl	8000658 <__aeabi_dmul>
 8011a76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011a78:	4680      	mov	r8, r0
 8011a7a:	4689      	mov	r9, r1
 8011a7c:	b933      	cbnz	r3, 8011a8c <_strtod_l+0xaac>
 8011a7e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011a82:	900e      	str	r0, [sp, #56]	; 0x38
 8011a84:	930f      	str	r3, [sp, #60]	; 0x3c
 8011a86:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8011a8a:	e7dd      	b.n	8011a48 <_strtod_l+0xa68>
 8011a8c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8011a90:	e7f9      	b.n	8011a86 <_strtod_l+0xaa6>
 8011a92:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8011a96:	9b04      	ldr	r3, [sp, #16]
 8011a98:	2b00      	cmp	r3, #0
 8011a9a:	d1a8      	bne.n	80119ee <_strtod_l+0xa0e>
 8011a9c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8011aa0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011aa2:	0d1b      	lsrs	r3, r3, #20
 8011aa4:	051b      	lsls	r3, r3, #20
 8011aa6:	429a      	cmp	r2, r3
 8011aa8:	d1a1      	bne.n	80119ee <_strtod_l+0xa0e>
 8011aaa:	4640      	mov	r0, r8
 8011aac:	4649      	mov	r1, r9
 8011aae:	f7ef f933 	bl	8000d18 <__aeabi_d2lz>
 8011ab2:	f7ee fda3 	bl	80005fc <__aeabi_l2d>
 8011ab6:	4602      	mov	r2, r0
 8011ab8:	460b      	mov	r3, r1
 8011aba:	4640      	mov	r0, r8
 8011abc:	4649      	mov	r1, r9
 8011abe:	f7ee fc13 	bl	80002e8 <__aeabi_dsub>
 8011ac2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011ac4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011ac8:	ea43 030a 	orr.w	r3, r3, sl
 8011acc:	4313      	orrs	r3, r2
 8011ace:	4680      	mov	r8, r0
 8011ad0:	4689      	mov	r9, r1
 8011ad2:	d055      	beq.n	8011b80 <_strtod_l+0xba0>
 8011ad4:	a336      	add	r3, pc, #216	; (adr r3, 8011bb0 <_strtod_l+0xbd0>)
 8011ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ada:	f7ef f82f 	bl	8000b3c <__aeabi_dcmplt>
 8011ade:	2800      	cmp	r0, #0
 8011ae0:	f47f acd0 	bne.w	8011484 <_strtod_l+0x4a4>
 8011ae4:	a334      	add	r3, pc, #208	; (adr r3, 8011bb8 <_strtod_l+0xbd8>)
 8011ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011aea:	4640      	mov	r0, r8
 8011aec:	4649      	mov	r1, r9
 8011aee:	f7ef f843 	bl	8000b78 <__aeabi_dcmpgt>
 8011af2:	2800      	cmp	r0, #0
 8011af4:	f43f af7b 	beq.w	80119ee <_strtod_l+0xa0e>
 8011af8:	e4c4      	b.n	8011484 <_strtod_l+0x4a4>
 8011afa:	9b04      	ldr	r3, [sp, #16]
 8011afc:	b333      	cbz	r3, 8011b4c <_strtod_l+0xb6c>
 8011afe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011b00:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8011b04:	d822      	bhi.n	8011b4c <_strtod_l+0xb6c>
 8011b06:	a32e      	add	r3, pc, #184	; (adr r3, 8011bc0 <_strtod_l+0xbe0>)
 8011b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b0c:	4640      	mov	r0, r8
 8011b0e:	4649      	mov	r1, r9
 8011b10:	f7ef f81e 	bl	8000b50 <__aeabi_dcmple>
 8011b14:	b1a0      	cbz	r0, 8011b40 <_strtod_l+0xb60>
 8011b16:	4649      	mov	r1, r9
 8011b18:	4640      	mov	r0, r8
 8011b1a:	f7ef f875 	bl	8000c08 <__aeabi_d2uiz>
 8011b1e:	2801      	cmp	r0, #1
 8011b20:	bf38      	it	cc
 8011b22:	2001      	movcc	r0, #1
 8011b24:	f7ee fd1e 	bl	8000564 <__aeabi_ui2d>
 8011b28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011b2a:	4680      	mov	r8, r0
 8011b2c:	4689      	mov	r9, r1
 8011b2e:	bb23      	cbnz	r3, 8011b7a <_strtod_l+0xb9a>
 8011b30:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011b34:	9010      	str	r0, [sp, #64]	; 0x40
 8011b36:	9311      	str	r3, [sp, #68]	; 0x44
 8011b38:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8011b3c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8011b40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011b42:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011b44:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8011b48:	1a9b      	subs	r3, r3, r2
 8011b4a:	9309      	str	r3, [sp, #36]	; 0x24
 8011b4c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8011b50:	eeb0 0a48 	vmov.f32	s0, s16
 8011b54:	eef0 0a68 	vmov.f32	s1, s17
 8011b58:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8011b5c:	f001 ff0a 	bl	8013974 <__ulp>
 8011b60:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8011b64:	ec53 2b10 	vmov	r2, r3, d0
 8011b68:	f7ee fd76 	bl	8000658 <__aeabi_dmul>
 8011b6c:	ec53 2b18 	vmov	r2, r3, d8
 8011b70:	f7ee fbbc 	bl	80002ec <__adddf3>
 8011b74:	4682      	mov	sl, r0
 8011b76:	468b      	mov	fp, r1
 8011b78:	e78d      	b.n	8011a96 <_strtod_l+0xab6>
 8011b7a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8011b7e:	e7db      	b.n	8011b38 <_strtod_l+0xb58>
 8011b80:	a311      	add	r3, pc, #68	; (adr r3, 8011bc8 <_strtod_l+0xbe8>)
 8011b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b86:	f7ee ffd9 	bl	8000b3c <__aeabi_dcmplt>
 8011b8a:	e7b2      	b.n	8011af2 <_strtod_l+0xb12>
 8011b8c:	2300      	movs	r3, #0
 8011b8e:	930a      	str	r3, [sp, #40]	; 0x28
 8011b90:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8011b92:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011b94:	6013      	str	r3, [r2, #0]
 8011b96:	f7ff ba6b 	b.w	8011070 <_strtod_l+0x90>
 8011b9a:	2a65      	cmp	r2, #101	; 0x65
 8011b9c:	f43f ab5f 	beq.w	801125e <_strtod_l+0x27e>
 8011ba0:	2a45      	cmp	r2, #69	; 0x45
 8011ba2:	f43f ab5c 	beq.w	801125e <_strtod_l+0x27e>
 8011ba6:	2301      	movs	r3, #1
 8011ba8:	f7ff bb94 	b.w	80112d4 <_strtod_l+0x2f4>
 8011bac:	f3af 8000 	nop.w
 8011bb0:	94a03595 	.word	0x94a03595
 8011bb4:	3fdfffff 	.word	0x3fdfffff
 8011bb8:	35afe535 	.word	0x35afe535
 8011bbc:	3fe00000 	.word	0x3fe00000
 8011bc0:	ffc00000 	.word	0xffc00000
 8011bc4:	41dfffff 	.word	0x41dfffff
 8011bc8:	94a03595 	.word	0x94a03595
 8011bcc:	3fcfffff 	.word	0x3fcfffff
 8011bd0:	3ff00000 	.word	0x3ff00000
 8011bd4:	7ff00000 	.word	0x7ff00000
 8011bd8:	7fe00000 	.word	0x7fe00000
 8011bdc:	7c9fffff 	.word	0x7c9fffff
 8011be0:	3fe00000 	.word	0x3fe00000
 8011be4:	bff00000 	.word	0xbff00000
 8011be8:	7fefffff 	.word	0x7fefffff

08011bec <_strtod_r>:
 8011bec:	4b01      	ldr	r3, [pc, #4]	; (8011bf4 <_strtod_r+0x8>)
 8011bee:	f7ff b9f7 	b.w	8010fe0 <_strtod_l>
 8011bf2:	bf00      	nop
 8011bf4:	200003f4 	.word	0x200003f4

08011bf8 <strtok>:
 8011bf8:	4b16      	ldr	r3, [pc, #88]	; (8011c54 <strtok+0x5c>)
 8011bfa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011bfc:	681e      	ldr	r6, [r3, #0]
 8011bfe:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8011c00:	4605      	mov	r5, r0
 8011c02:	b9fc      	cbnz	r4, 8011c44 <strtok+0x4c>
 8011c04:	2050      	movs	r0, #80	; 0x50
 8011c06:	9101      	str	r1, [sp, #4]
 8011c08:	f001 fb28 	bl	801325c <malloc>
 8011c0c:	9901      	ldr	r1, [sp, #4]
 8011c0e:	65b0      	str	r0, [r6, #88]	; 0x58
 8011c10:	4602      	mov	r2, r0
 8011c12:	b920      	cbnz	r0, 8011c1e <strtok+0x26>
 8011c14:	4b10      	ldr	r3, [pc, #64]	; (8011c58 <strtok+0x60>)
 8011c16:	4811      	ldr	r0, [pc, #68]	; (8011c5c <strtok+0x64>)
 8011c18:	2157      	movs	r1, #87	; 0x57
 8011c1a:	f000 f8df 	bl	8011ddc <__assert_func>
 8011c1e:	e9c0 4400 	strd	r4, r4, [r0]
 8011c22:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8011c26:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8011c2a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8011c2e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8011c32:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8011c36:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8011c3a:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8011c3e:	6184      	str	r4, [r0, #24]
 8011c40:	7704      	strb	r4, [r0, #28]
 8011c42:	6244      	str	r4, [r0, #36]	; 0x24
 8011c44:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8011c46:	2301      	movs	r3, #1
 8011c48:	4628      	mov	r0, r5
 8011c4a:	b002      	add	sp, #8
 8011c4c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011c50:	f000 b806 	b.w	8011c60 <__strtok_r>
 8011c54:	2000038c 	.word	0x2000038c
 8011c58:	08016978 	.word	0x08016978
 8011c5c:	0801698f 	.word	0x0801698f

08011c60 <__strtok_r>:
 8011c60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011c62:	b908      	cbnz	r0, 8011c68 <__strtok_r+0x8>
 8011c64:	6810      	ldr	r0, [r2, #0]
 8011c66:	b188      	cbz	r0, 8011c8c <__strtok_r+0x2c>
 8011c68:	4604      	mov	r4, r0
 8011c6a:	4620      	mov	r0, r4
 8011c6c:	f814 5b01 	ldrb.w	r5, [r4], #1
 8011c70:	460f      	mov	r7, r1
 8011c72:	f817 6b01 	ldrb.w	r6, [r7], #1
 8011c76:	b91e      	cbnz	r6, 8011c80 <__strtok_r+0x20>
 8011c78:	b965      	cbnz	r5, 8011c94 <__strtok_r+0x34>
 8011c7a:	6015      	str	r5, [r2, #0]
 8011c7c:	4628      	mov	r0, r5
 8011c7e:	e005      	b.n	8011c8c <__strtok_r+0x2c>
 8011c80:	42b5      	cmp	r5, r6
 8011c82:	d1f6      	bne.n	8011c72 <__strtok_r+0x12>
 8011c84:	2b00      	cmp	r3, #0
 8011c86:	d1f0      	bne.n	8011c6a <__strtok_r+0xa>
 8011c88:	6014      	str	r4, [r2, #0]
 8011c8a:	7003      	strb	r3, [r0, #0]
 8011c8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011c8e:	461c      	mov	r4, r3
 8011c90:	e00c      	b.n	8011cac <__strtok_r+0x4c>
 8011c92:	b915      	cbnz	r5, 8011c9a <__strtok_r+0x3a>
 8011c94:	f814 3b01 	ldrb.w	r3, [r4], #1
 8011c98:	460e      	mov	r6, r1
 8011c9a:	f816 5b01 	ldrb.w	r5, [r6], #1
 8011c9e:	42ab      	cmp	r3, r5
 8011ca0:	d1f7      	bne.n	8011c92 <__strtok_r+0x32>
 8011ca2:	2b00      	cmp	r3, #0
 8011ca4:	d0f3      	beq.n	8011c8e <__strtok_r+0x2e>
 8011ca6:	2300      	movs	r3, #0
 8011ca8:	f804 3c01 	strb.w	r3, [r4, #-1]
 8011cac:	6014      	str	r4, [r2, #0]
 8011cae:	e7ed      	b.n	8011c8c <__strtok_r+0x2c>

08011cb0 <_strtol_l.constprop.0>:
 8011cb0:	2b01      	cmp	r3, #1
 8011cb2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011cb6:	d001      	beq.n	8011cbc <_strtol_l.constprop.0+0xc>
 8011cb8:	2b24      	cmp	r3, #36	; 0x24
 8011cba:	d906      	bls.n	8011cca <_strtol_l.constprop.0+0x1a>
 8011cbc:	f7fe fa18 	bl	80100f0 <__errno>
 8011cc0:	2316      	movs	r3, #22
 8011cc2:	6003      	str	r3, [r0, #0]
 8011cc4:	2000      	movs	r0, #0
 8011cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011cca:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8011db0 <_strtol_l.constprop.0+0x100>
 8011cce:	460d      	mov	r5, r1
 8011cd0:	462e      	mov	r6, r5
 8011cd2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011cd6:	f814 700c 	ldrb.w	r7, [r4, ip]
 8011cda:	f017 0708 	ands.w	r7, r7, #8
 8011cde:	d1f7      	bne.n	8011cd0 <_strtol_l.constprop.0+0x20>
 8011ce0:	2c2d      	cmp	r4, #45	; 0x2d
 8011ce2:	d132      	bne.n	8011d4a <_strtol_l.constprop.0+0x9a>
 8011ce4:	782c      	ldrb	r4, [r5, #0]
 8011ce6:	2701      	movs	r7, #1
 8011ce8:	1cb5      	adds	r5, r6, #2
 8011cea:	2b00      	cmp	r3, #0
 8011cec:	d05b      	beq.n	8011da6 <_strtol_l.constprop.0+0xf6>
 8011cee:	2b10      	cmp	r3, #16
 8011cf0:	d109      	bne.n	8011d06 <_strtol_l.constprop.0+0x56>
 8011cf2:	2c30      	cmp	r4, #48	; 0x30
 8011cf4:	d107      	bne.n	8011d06 <_strtol_l.constprop.0+0x56>
 8011cf6:	782c      	ldrb	r4, [r5, #0]
 8011cf8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8011cfc:	2c58      	cmp	r4, #88	; 0x58
 8011cfe:	d14d      	bne.n	8011d9c <_strtol_l.constprop.0+0xec>
 8011d00:	786c      	ldrb	r4, [r5, #1]
 8011d02:	2310      	movs	r3, #16
 8011d04:	3502      	adds	r5, #2
 8011d06:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8011d0a:	f108 38ff 	add.w	r8, r8, #4294967295
 8011d0e:	f04f 0c00 	mov.w	ip, #0
 8011d12:	fbb8 f9f3 	udiv	r9, r8, r3
 8011d16:	4666      	mov	r6, ip
 8011d18:	fb03 8a19 	mls	sl, r3, r9, r8
 8011d1c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8011d20:	f1be 0f09 	cmp.w	lr, #9
 8011d24:	d816      	bhi.n	8011d54 <_strtol_l.constprop.0+0xa4>
 8011d26:	4674      	mov	r4, lr
 8011d28:	42a3      	cmp	r3, r4
 8011d2a:	dd24      	ble.n	8011d76 <_strtol_l.constprop.0+0xc6>
 8011d2c:	f1bc 0f00 	cmp.w	ip, #0
 8011d30:	db1e      	blt.n	8011d70 <_strtol_l.constprop.0+0xc0>
 8011d32:	45b1      	cmp	r9, r6
 8011d34:	d31c      	bcc.n	8011d70 <_strtol_l.constprop.0+0xc0>
 8011d36:	d101      	bne.n	8011d3c <_strtol_l.constprop.0+0x8c>
 8011d38:	45a2      	cmp	sl, r4
 8011d3a:	db19      	blt.n	8011d70 <_strtol_l.constprop.0+0xc0>
 8011d3c:	fb06 4603 	mla	r6, r6, r3, r4
 8011d40:	f04f 0c01 	mov.w	ip, #1
 8011d44:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011d48:	e7e8      	b.n	8011d1c <_strtol_l.constprop.0+0x6c>
 8011d4a:	2c2b      	cmp	r4, #43	; 0x2b
 8011d4c:	bf04      	itt	eq
 8011d4e:	782c      	ldrbeq	r4, [r5, #0]
 8011d50:	1cb5      	addeq	r5, r6, #2
 8011d52:	e7ca      	b.n	8011cea <_strtol_l.constprop.0+0x3a>
 8011d54:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8011d58:	f1be 0f19 	cmp.w	lr, #25
 8011d5c:	d801      	bhi.n	8011d62 <_strtol_l.constprop.0+0xb2>
 8011d5e:	3c37      	subs	r4, #55	; 0x37
 8011d60:	e7e2      	b.n	8011d28 <_strtol_l.constprop.0+0x78>
 8011d62:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8011d66:	f1be 0f19 	cmp.w	lr, #25
 8011d6a:	d804      	bhi.n	8011d76 <_strtol_l.constprop.0+0xc6>
 8011d6c:	3c57      	subs	r4, #87	; 0x57
 8011d6e:	e7db      	b.n	8011d28 <_strtol_l.constprop.0+0x78>
 8011d70:	f04f 3cff 	mov.w	ip, #4294967295
 8011d74:	e7e6      	b.n	8011d44 <_strtol_l.constprop.0+0x94>
 8011d76:	f1bc 0f00 	cmp.w	ip, #0
 8011d7a:	da05      	bge.n	8011d88 <_strtol_l.constprop.0+0xd8>
 8011d7c:	2322      	movs	r3, #34	; 0x22
 8011d7e:	6003      	str	r3, [r0, #0]
 8011d80:	4646      	mov	r6, r8
 8011d82:	b942      	cbnz	r2, 8011d96 <_strtol_l.constprop.0+0xe6>
 8011d84:	4630      	mov	r0, r6
 8011d86:	e79e      	b.n	8011cc6 <_strtol_l.constprop.0+0x16>
 8011d88:	b107      	cbz	r7, 8011d8c <_strtol_l.constprop.0+0xdc>
 8011d8a:	4276      	negs	r6, r6
 8011d8c:	2a00      	cmp	r2, #0
 8011d8e:	d0f9      	beq.n	8011d84 <_strtol_l.constprop.0+0xd4>
 8011d90:	f1bc 0f00 	cmp.w	ip, #0
 8011d94:	d000      	beq.n	8011d98 <_strtol_l.constprop.0+0xe8>
 8011d96:	1e69      	subs	r1, r5, #1
 8011d98:	6011      	str	r1, [r2, #0]
 8011d9a:	e7f3      	b.n	8011d84 <_strtol_l.constprop.0+0xd4>
 8011d9c:	2430      	movs	r4, #48	; 0x30
 8011d9e:	2b00      	cmp	r3, #0
 8011da0:	d1b1      	bne.n	8011d06 <_strtol_l.constprop.0+0x56>
 8011da2:	2308      	movs	r3, #8
 8011da4:	e7af      	b.n	8011d06 <_strtol_l.constprop.0+0x56>
 8011da6:	2c30      	cmp	r4, #48	; 0x30
 8011da8:	d0a5      	beq.n	8011cf6 <_strtol_l.constprop.0+0x46>
 8011daa:	230a      	movs	r3, #10
 8011dac:	e7ab      	b.n	8011d06 <_strtol_l.constprop.0+0x56>
 8011dae:	bf00      	nop
 8011db0:	08016a29 	.word	0x08016a29

08011db4 <_strtol_r>:
 8011db4:	f7ff bf7c 	b.w	8011cb0 <_strtol_l.constprop.0>

08011db8 <_write_r>:
 8011db8:	b538      	push	{r3, r4, r5, lr}
 8011dba:	4d07      	ldr	r5, [pc, #28]	; (8011dd8 <_write_r+0x20>)
 8011dbc:	4604      	mov	r4, r0
 8011dbe:	4608      	mov	r0, r1
 8011dc0:	4611      	mov	r1, r2
 8011dc2:	2200      	movs	r2, #0
 8011dc4:	602a      	str	r2, [r5, #0]
 8011dc6:	461a      	mov	r2, r3
 8011dc8:	f7f1 f893 	bl	8002ef2 <_write>
 8011dcc:	1c43      	adds	r3, r0, #1
 8011dce:	d102      	bne.n	8011dd6 <_write_r+0x1e>
 8011dd0:	682b      	ldr	r3, [r5, #0]
 8011dd2:	b103      	cbz	r3, 8011dd6 <_write_r+0x1e>
 8011dd4:	6023      	str	r3, [r4, #0]
 8011dd6:	bd38      	pop	{r3, r4, r5, pc}
 8011dd8:	2000a194 	.word	0x2000a194

08011ddc <__assert_func>:
 8011ddc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011dde:	4614      	mov	r4, r2
 8011de0:	461a      	mov	r2, r3
 8011de2:	4b09      	ldr	r3, [pc, #36]	; (8011e08 <__assert_func+0x2c>)
 8011de4:	681b      	ldr	r3, [r3, #0]
 8011de6:	4605      	mov	r5, r0
 8011de8:	68d8      	ldr	r0, [r3, #12]
 8011dea:	b14c      	cbz	r4, 8011e00 <__assert_func+0x24>
 8011dec:	4b07      	ldr	r3, [pc, #28]	; (8011e0c <__assert_func+0x30>)
 8011dee:	9100      	str	r1, [sp, #0]
 8011df0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011df4:	4906      	ldr	r1, [pc, #24]	; (8011e10 <__assert_func+0x34>)
 8011df6:	462b      	mov	r3, r5
 8011df8:	f000 fe98 	bl	8012b2c <fiprintf>
 8011dfc:	f002 ffcc 	bl	8014d98 <abort>
 8011e00:	4b04      	ldr	r3, [pc, #16]	; (8011e14 <__assert_func+0x38>)
 8011e02:	461c      	mov	r4, r3
 8011e04:	e7f3      	b.n	8011dee <__assert_func+0x12>
 8011e06:	bf00      	nop
 8011e08:	2000038c 	.word	0x2000038c
 8011e0c:	080169ec 	.word	0x080169ec
 8011e10:	080169f9 	.word	0x080169f9
 8011e14:	08016a27 	.word	0x08016a27

08011e18 <_close_r>:
 8011e18:	b538      	push	{r3, r4, r5, lr}
 8011e1a:	4d06      	ldr	r5, [pc, #24]	; (8011e34 <_close_r+0x1c>)
 8011e1c:	2300      	movs	r3, #0
 8011e1e:	4604      	mov	r4, r0
 8011e20:	4608      	mov	r0, r1
 8011e22:	602b      	str	r3, [r5, #0]
 8011e24:	f7f1 f881 	bl	8002f2a <_close>
 8011e28:	1c43      	adds	r3, r0, #1
 8011e2a:	d102      	bne.n	8011e32 <_close_r+0x1a>
 8011e2c:	682b      	ldr	r3, [r5, #0]
 8011e2e:	b103      	cbz	r3, 8011e32 <_close_r+0x1a>
 8011e30:	6023      	str	r3, [r4, #0]
 8011e32:	bd38      	pop	{r3, r4, r5, pc}
 8011e34:	2000a194 	.word	0x2000a194

08011e38 <quorem>:
 8011e38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e3c:	6903      	ldr	r3, [r0, #16]
 8011e3e:	690c      	ldr	r4, [r1, #16]
 8011e40:	42a3      	cmp	r3, r4
 8011e42:	4607      	mov	r7, r0
 8011e44:	f2c0 8081 	blt.w	8011f4a <quorem+0x112>
 8011e48:	3c01      	subs	r4, #1
 8011e4a:	f101 0814 	add.w	r8, r1, #20
 8011e4e:	f100 0514 	add.w	r5, r0, #20
 8011e52:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011e56:	9301      	str	r3, [sp, #4]
 8011e58:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8011e5c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011e60:	3301      	adds	r3, #1
 8011e62:	429a      	cmp	r2, r3
 8011e64:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8011e68:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8011e6c:	fbb2 f6f3 	udiv	r6, r2, r3
 8011e70:	d331      	bcc.n	8011ed6 <quorem+0x9e>
 8011e72:	f04f 0e00 	mov.w	lr, #0
 8011e76:	4640      	mov	r0, r8
 8011e78:	46ac      	mov	ip, r5
 8011e7a:	46f2      	mov	sl, lr
 8011e7c:	f850 2b04 	ldr.w	r2, [r0], #4
 8011e80:	b293      	uxth	r3, r2
 8011e82:	fb06 e303 	mla	r3, r6, r3, lr
 8011e86:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8011e8a:	b29b      	uxth	r3, r3
 8011e8c:	ebaa 0303 	sub.w	r3, sl, r3
 8011e90:	f8dc a000 	ldr.w	sl, [ip]
 8011e94:	0c12      	lsrs	r2, r2, #16
 8011e96:	fa13 f38a 	uxtah	r3, r3, sl
 8011e9a:	fb06 e202 	mla	r2, r6, r2, lr
 8011e9e:	9300      	str	r3, [sp, #0]
 8011ea0:	9b00      	ldr	r3, [sp, #0]
 8011ea2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8011ea6:	b292      	uxth	r2, r2
 8011ea8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8011eac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011eb0:	f8bd 3000 	ldrh.w	r3, [sp]
 8011eb4:	4581      	cmp	r9, r0
 8011eb6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011eba:	f84c 3b04 	str.w	r3, [ip], #4
 8011ebe:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8011ec2:	d2db      	bcs.n	8011e7c <quorem+0x44>
 8011ec4:	f855 300b 	ldr.w	r3, [r5, fp]
 8011ec8:	b92b      	cbnz	r3, 8011ed6 <quorem+0x9e>
 8011eca:	9b01      	ldr	r3, [sp, #4]
 8011ecc:	3b04      	subs	r3, #4
 8011ece:	429d      	cmp	r5, r3
 8011ed0:	461a      	mov	r2, r3
 8011ed2:	d32e      	bcc.n	8011f32 <quorem+0xfa>
 8011ed4:	613c      	str	r4, [r7, #16]
 8011ed6:	4638      	mov	r0, r7
 8011ed8:	f001 fca6 	bl	8013828 <__mcmp>
 8011edc:	2800      	cmp	r0, #0
 8011ede:	db24      	blt.n	8011f2a <quorem+0xf2>
 8011ee0:	3601      	adds	r6, #1
 8011ee2:	4628      	mov	r0, r5
 8011ee4:	f04f 0c00 	mov.w	ip, #0
 8011ee8:	f858 2b04 	ldr.w	r2, [r8], #4
 8011eec:	f8d0 e000 	ldr.w	lr, [r0]
 8011ef0:	b293      	uxth	r3, r2
 8011ef2:	ebac 0303 	sub.w	r3, ip, r3
 8011ef6:	0c12      	lsrs	r2, r2, #16
 8011ef8:	fa13 f38e 	uxtah	r3, r3, lr
 8011efc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8011f00:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011f04:	b29b      	uxth	r3, r3
 8011f06:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011f0a:	45c1      	cmp	r9, r8
 8011f0c:	f840 3b04 	str.w	r3, [r0], #4
 8011f10:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8011f14:	d2e8      	bcs.n	8011ee8 <quorem+0xb0>
 8011f16:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011f1a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011f1e:	b922      	cbnz	r2, 8011f2a <quorem+0xf2>
 8011f20:	3b04      	subs	r3, #4
 8011f22:	429d      	cmp	r5, r3
 8011f24:	461a      	mov	r2, r3
 8011f26:	d30a      	bcc.n	8011f3e <quorem+0x106>
 8011f28:	613c      	str	r4, [r7, #16]
 8011f2a:	4630      	mov	r0, r6
 8011f2c:	b003      	add	sp, #12
 8011f2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f32:	6812      	ldr	r2, [r2, #0]
 8011f34:	3b04      	subs	r3, #4
 8011f36:	2a00      	cmp	r2, #0
 8011f38:	d1cc      	bne.n	8011ed4 <quorem+0x9c>
 8011f3a:	3c01      	subs	r4, #1
 8011f3c:	e7c7      	b.n	8011ece <quorem+0x96>
 8011f3e:	6812      	ldr	r2, [r2, #0]
 8011f40:	3b04      	subs	r3, #4
 8011f42:	2a00      	cmp	r2, #0
 8011f44:	d1f0      	bne.n	8011f28 <quorem+0xf0>
 8011f46:	3c01      	subs	r4, #1
 8011f48:	e7eb      	b.n	8011f22 <quorem+0xea>
 8011f4a:	2000      	movs	r0, #0
 8011f4c:	e7ee      	b.n	8011f2c <quorem+0xf4>
	...

08011f50 <_dtoa_r>:
 8011f50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f54:	ed2d 8b04 	vpush	{d8-d9}
 8011f58:	ec57 6b10 	vmov	r6, r7, d0
 8011f5c:	b093      	sub	sp, #76	; 0x4c
 8011f5e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8011f60:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8011f64:	9106      	str	r1, [sp, #24]
 8011f66:	ee10 aa10 	vmov	sl, s0
 8011f6a:	4604      	mov	r4, r0
 8011f6c:	9209      	str	r2, [sp, #36]	; 0x24
 8011f6e:	930c      	str	r3, [sp, #48]	; 0x30
 8011f70:	46bb      	mov	fp, r7
 8011f72:	b975      	cbnz	r5, 8011f92 <_dtoa_r+0x42>
 8011f74:	2010      	movs	r0, #16
 8011f76:	f001 f971 	bl	801325c <malloc>
 8011f7a:	4602      	mov	r2, r0
 8011f7c:	6260      	str	r0, [r4, #36]	; 0x24
 8011f7e:	b920      	cbnz	r0, 8011f8a <_dtoa_r+0x3a>
 8011f80:	4ba7      	ldr	r3, [pc, #668]	; (8012220 <_dtoa_r+0x2d0>)
 8011f82:	21ea      	movs	r1, #234	; 0xea
 8011f84:	48a7      	ldr	r0, [pc, #668]	; (8012224 <_dtoa_r+0x2d4>)
 8011f86:	f7ff ff29 	bl	8011ddc <__assert_func>
 8011f8a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8011f8e:	6005      	str	r5, [r0, #0]
 8011f90:	60c5      	str	r5, [r0, #12]
 8011f92:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011f94:	6819      	ldr	r1, [r3, #0]
 8011f96:	b151      	cbz	r1, 8011fae <_dtoa_r+0x5e>
 8011f98:	685a      	ldr	r2, [r3, #4]
 8011f9a:	604a      	str	r2, [r1, #4]
 8011f9c:	2301      	movs	r3, #1
 8011f9e:	4093      	lsls	r3, r2
 8011fa0:	608b      	str	r3, [r1, #8]
 8011fa2:	4620      	mov	r0, r4
 8011fa4:	f001 f9b4 	bl	8013310 <_Bfree>
 8011fa8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011faa:	2200      	movs	r2, #0
 8011fac:	601a      	str	r2, [r3, #0]
 8011fae:	1e3b      	subs	r3, r7, #0
 8011fb0:	bfaa      	itet	ge
 8011fb2:	2300      	movge	r3, #0
 8011fb4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8011fb8:	f8c8 3000 	strge.w	r3, [r8]
 8011fbc:	4b9a      	ldr	r3, [pc, #616]	; (8012228 <_dtoa_r+0x2d8>)
 8011fbe:	bfbc      	itt	lt
 8011fc0:	2201      	movlt	r2, #1
 8011fc2:	f8c8 2000 	strlt.w	r2, [r8]
 8011fc6:	ea33 030b 	bics.w	r3, r3, fp
 8011fca:	d11b      	bne.n	8012004 <_dtoa_r+0xb4>
 8011fcc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011fce:	f242 730f 	movw	r3, #9999	; 0x270f
 8011fd2:	6013      	str	r3, [r2, #0]
 8011fd4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011fd8:	4333      	orrs	r3, r6
 8011fda:	f000 8592 	beq.w	8012b02 <_dtoa_r+0xbb2>
 8011fde:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011fe0:	b963      	cbnz	r3, 8011ffc <_dtoa_r+0xac>
 8011fe2:	4b92      	ldr	r3, [pc, #584]	; (801222c <_dtoa_r+0x2dc>)
 8011fe4:	e022      	b.n	801202c <_dtoa_r+0xdc>
 8011fe6:	4b92      	ldr	r3, [pc, #584]	; (8012230 <_dtoa_r+0x2e0>)
 8011fe8:	9301      	str	r3, [sp, #4]
 8011fea:	3308      	adds	r3, #8
 8011fec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8011fee:	6013      	str	r3, [r2, #0]
 8011ff0:	9801      	ldr	r0, [sp, #4]
 8011ff2:	b013      	add	sp, #76	; 0x4c
 8011ff4:	ecbd 8b04 	vpop	{d8-d9}
 8011ff8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ffc:	4b8b      	ldr	r3, [pc, #556]	; (801222c <_dtoa_r+0x2dc>)
 8011ffe:	9301      	str	r3, [sp, #4]
 8012000:	3303      	adds	r3, #3
 8012002:	e7f3      	b.n	8011fec <_dtoa_r+0x9c>
 8012004:	2200      	movs	r2, #0
 8012006:	2300      	movs	r3, #0
 8012008:	4650      	mov	r0, sl
 801200a:	4659      	mov	r1, fp
 801200c:	f7ee fd8c 	bl	8000b28 <__aeabi_dcmpeq>
 8012010:	ec4b ab19 	vmov	d9, sl, fp
 8012014:	4680      	mov	r8, r0
 8012016:	b158      	cbz	r0, 8012030 <_dtoa_r+0xe0>
 8012018:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801201a:	2301      	movs	r3, #1
 801201c:	6013      	str	r3, [r2, #0]
 801201e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012020:	2b00      	cmp	r3, #0
 8012022:	f000 856b 	beq.w	8012afc <_dtoa_r+0xbac>
 8012026:	4883      	ldr	r0, [pc, #524]	; (8012234 <_dtoa_r+0x2e4>)
 8012028:	6018      	str	r0, [r3, #0]
 801202a:	1e43      	subs	r3, r0, #1
 801202c:	9301      	str	r3, [sp, #4]
 801202e:	e7df      	b.n	8011ff0 <_dtoa_r+0xa0>
 8012030:	ec4b ab10 	vmov	d0, sl, fp
 8012034:	aa10      	add	r2, sp, #64	; 0x40
 8012036:	a911      	add	r1, sp, #68	; 0x44
 8012038:	4620      	mov	r0, r4
 801203a:	f001 fd17 	bl	8013a6c <__d2b>
 801203e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8012042:	ee08 0a10 	vmov	s16, r0
 8012046:	2d00      	cmp	r5, #0
 8012048:	f000 8084 	beq.w	8012154 <_dtoa_r+0x204>
 801204c:	ee19 3a90 	vmov	r3, s19
 8012050:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012054:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8012058:	4656      	mov	r6, sl
 801205a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801205e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8012062:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8012066:	4b74      	ldr	r3, [pc, #464]	; (8012238 <_dtoa_r+0x2e8>)
 8012068:	2200      	movs	r2, #0
 801206a:	4630      	mov	r0, r6
 801206c:	4639      	mov	r1, r7
 801206e:	f7ee f93b 	bl	80002e8 <__aeabi_dsub>
 8012072:	a365      	add	r3, pc, #404	; (adr r3, 8012208 <_dtoa_r+0x2b8>)
 8012074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012078:	f7ee faee 	bl	8000658 <__aeabi_dmul>
 801207c:	a364      	add	r3, pc, #400	; (adr r3, 8012210 <_dtoa_r+0x2c0>)
 801207e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012082:	f7ee f933 	bl	80002ec <__adddf3>
 8012086:	4606      	mov	r6, r0
 8012088:	4628      	mov	r0, r5
 801208a:	460f      	mov	r7, r1
 801208c:	f7ee fa7a 	bl	8000584 <__aeabi_i2d>
 8012090:	a361      	add	r3, pc, #388	; (adr r3, 8012218 <_dtoa_r+0x2c8>)
 8012092:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012096:	f7ee fadf 	bl	8000658 <__aeabi_dmul>
 801209a:	4602      	mov	r2, r0
 801209c:	460b      	mov	r3, r1
 801209e:	4630      	mov	r0, r6
 80120a0:	4639      	mov	r1, r7
 80120a2:	f7ee f923 	bl	80002ec <__adddf3>
 80120a6:	4606      	mov	r6, r0
 80120a8:	460f      	mov	r7, r1
 80120aa:	f7ee fd85 	bl	8000bb8 <__aeabi_d2iz>
 80120ae:	2200      	movs	r2, #0
 80120b0:	9000      	str	r0, [sp, #0]
 80120b2:	2300      	movs	r3, #0
 80120b4:	4630      	mov	r0, r6
 80120b6:	4639      	mov	r1, r7
 80120b8:	f7ee fd40 	bl	8000b3c <__aeabi_dcmplt>
 80120bc:	b150      	cbz	r0, 80120d4 <_dtoa_r+0x184>
 80120be:	9800      	ldr	r0, [sp, #0]
 80120c0:	f7ee fa60 	bl	8000584 <__aeabi_i2d>
 80120c4:	4632      	mov	r2, r6
 80120c6:	463b      	mov	r3, r7
 80120c8:	f7ee fd2e 	bl	8000b28 <__aeabi_dcmpeq>
 80120cc:	b910      	cbnz	r0, 80120d4 <_dtoa_r+0x184>
 80120ce:	9b00      	ldr	r3, [sp, #0]
 80120d0:	3b01      	subs	r3, #1
 80120d2:	9300      	str	r3, [sp, #0]
 80120d4:	9b00      	ldr	r3, [sp, #0]
 80120d6:	2b16      	cmp	r3, #22
 80120d8:	d85a      	bhi.n	8012190 <_dtoa_r+0x240>
 80120da:	9a00      	ldr	r2, [sp, #0]
 80120dc:	4b57      	ldr	r3, [pc, #348]	; (801223c <_dtoa_r+0x2ec>)
 80120de:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80120e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120e6:	ec51 0b19 	vmov	r0, r1, d9
 80120ea:	f7ee fd27 	bl	8000b3c <__aeabi_dcmplt>
 80120ee:	2800      	cmp	r0, #0
 80120f0:	d050      	beq.n	8012194 <_dtoa_r+0x244>
 80120f2:	9b00      	ldr	r3, [sp, #0]
 80120f4:	3b01      	subs	r3, #1
 80120f6:	9300      	str	r3, [sp, #0]
 80120f8:	2300      	movs	r3, #0
 80120fa:	930b      	str	r3, [sp, #44]	; 0x2c
 80120fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80120fe:	1b5d      	subs	r5, r3, r5
 8012100:	1e6b      	subs	r3, r5, #1
 8012102:	9305      	str	r3, [sp, #20]
 8012104:	bf45      	ittet	mi
 8012106:	f1c5 0301 	rsbmi	r3, r5, #1
 801210a:	9304      	strmi	r3, [sp, #16]
 801210c:	2300      	movpl	r3, #0
 801210e:	2300      	movmi	r3, #0
 8012110:	bf4c      	ite	mi
 8012112:	9305      	strmi	r3, [sp, #20]
 8012114:	9304      	strpl	r3, [sp, #16]
 8012116:	9b00      	ldr	r3, [sp, #0]
 8012118:	2b00      	cmp	r3, #0
 801211a:	db3d      	blt.n	8012198 <_dtoa_r+0x248>
 801211c:	9b05      	ldr	r3, [sp, #20]
 801211e:	9a00      	ldr	r2, [sp, #0]
 8012120:	920a      	str	r2, [sp, #40]	; 0x28
 8012122:	4413      	add	r3, r2
 8012124:	9305      	str	r3, [sp, #20]
 8012126:	2300      	movs	r3, #0
 8012128:	9307      	str	r3, [sp, #28]
 801212a:	9b06      	ldr	r3, [sp, #24]
 801212c:	2b09      	cmp	r3, #9
 801212e:	f200 8089 	bhi.w	8012244 <_dtoa_r+0x2f4>
 8012132:	2b05      	cmp	r3, #5
 8012134:	bfc4      	itt	gt
 8012136:	3b04      	subgt	r3, #4
 8012138:	9306      	strgt	r3, [sp, #24]
 801213a:	9b06      	ldr	r3, [sp, #24]
 801213c:	f1a3 0302 	sub.w	r3, r3, #2
 8012140:	bfcc      	ite	gt
 8012142:	2500      	movgt	r5, #0
 8012144:	2501      	movle	r5, #1
 8012146:	2b03      	cmp	r3, #3
 8012148:	f200 8087 	bhi.w	801225a <_dtoa_r+0x30a>
 801214c:	e8df f003 	tbb	[pc, r3]
 8012150:	59383a2d 	.word	0x59383a2d
 8012154:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8012158:	441d      	add	r5, r3
 801215a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801215e:	2b20      	cmp	r3, #32
 8012160:	bfc1      	itttt	gt
 8012162:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8012166:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 801216a:	fa0b f303 	lslgt.w	r3, fp, r3
 801216e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8012172:	bfda      	itte	le
 8012174:	f1c3 0320 	rsble	r3, r3, #32
 8012178:	fa06 f003 	lslle.w	r0, r6, r3
 801217c:	4318      	orrgt	r0, r3
 801217e:	f7ee f9f1 	bl	8000564 <__aeabi_ui2d>
 8012182:	2301      	movs	r3, #1
 8012184:	4606      	mov	r6, r0
 8012186:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 801218a:	3d01      	subs	r5, #1
 801218c:	930e      	str	r3, [sp, #56]	; 0x38
 801218e:	e76a      	b.n	8012066 <_dtoa_r+0x116>
 8012190:	2301      	movs	r3, #1
 8012192:	e7b2      	b.n	80120fa <_dtoa_r+0x1aa>
 8012194:	900b      	str	r0, [sp, #44]	; 0x2c
 8012196:	e7b1      	b.n	80120fc <_dtoa_r+0x1ac>
 8012198:	9b04      	ldr	r3, [sp, #16]
 801219a:	9a00      	ldr	r2, [sp, #0]
 801219c:	1a9b      	subs	r3, r3, r2
 801219e:	9304      	str	r3, [sp, #16]
 80121a0:	4253      	negs	r3, r2
 80121a2:	9307      	str	r3, [sp, #28]
 80121a4:	2300      	movs	r3, #0
 80121a6:	930a      	str	r3, [sp, #40]	; 0x28
 80121a8:	e7bf      	b.n	801212a <_dtoa_r+0x1da>
 80121aa:	2300      	movs	r3, #0
 80121ac:	9308      	str	r3, [sp, #32]
 80121ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80121b0:	2b00      	cmp	r3, #0
 80121b2:	dc55      	bgt.n	8012260 <_dtoa_r+0x310>
 80121b4:	2301      	movs	r3, #1
 80121b6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80121ba:	461a      	mov	r2, r3
 80121bc:	9209      	str	r2, [sp, #36]	; 0x24
 80121be:	e00c      	b.n	80121da <_dtoa_r+0x28a>
 80121c0:	2301      	movs	r3, #1
 80121c2:	e7f3      	b.n	80121ac <_dtoa_r+0x25c>
 80121c4:	2300      	movs	r3, #0
 80121c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80121c8:	9308      	str	r3, [sp, #32]
 80121ca:	9b00      	ldr	r3, [sp, #0]
 80121cc:	4413      	add	r3, r2
 80121ce:	9302      	str	r3, [sp, #8]
 80121d0:	3301      	adds	r3, #1
 80121d2:	2b01      	cmp	r3, #1
 80121d4:	9303      	str	r3, [sp, #12]
 80121d6:	bfb8      	it	lt
 80121d8:	2301      	movlt	r3, #1
 80121da:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80121dc:	2200      	movs	r2, #0
 80121de:	6042      	str	r2, [r0, #4]
 80121e0:	2204      	movs	r2, #4
 80121e2:	f102 0614 	add.w	r6, r2, #20
 80121e6:	429e      	cmp	r6, r3
 80121e8:	6841      	ldr	r1, [r0, #4]
 80121ea:	d93d      	bls.n	8012268 <_dtoa_r+0x318>
 80121ec:	4620      	mov	r0, r4
 80121ee:	f001 f84f 	bl	8013290 <_Balloc>
 80121f2:	9001      	str	r0, [sp, #4]
 80121f4:	2800      	cmp	r0, #0
 80121f6:	d13b      	bne.n	8012270 <_dtoa_r+0x320>
 80121f8:	4b11      	ldr	r3, [pc, #68]	; (8012240 <_dtoa_r+0x2f0>)
 80121fa:	4602      	mov	r2, r0
 80121fc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8012200:	e6c0      	b.n	8011f84 <_dtoa_r+0x34>
 8012202:	2301      	movs	r3, #1
 8012204:	e7df      	b.n	80121c6 <_dtoa_r+0x276>
 8012206:	bf00      	nop
 8012208:	636f4361 	.word	0x636f4361
 801220c:	3fd287a7 	.word	0x3fd287a7
 8012210:	8b60c8b3 	.word	0x8b60c8b3
 8012214:	3fc68a28 	.word	0x3fc68a28
 8012218:	509f79fb 	.word	0x509f79fb
 801221c:	3fd34413 	.word	0x3fd34413
 8012220:	08016978 	.word	0x08016978
 8012224:	08016b36 	.word	0x08016b36
 8012228:	7ff00000 	.word	0x7ff00000
 801222c:	08016b32 	.word	0x08016b32
 8012230:	08016b29 	.word	0x08016b29
 8012234:	08016d8a 	.word	0x08016d8a
 8012238:	3ff80000 	.word	0x3ff80000
 801223c:	08016ca0 	.word	0x08016ca0
 8012240:	08016b91 	.word	0x08016b91
 8012244:	2501      	movs	r5, #1
 8012246:	2300      	movs	r3, #0
 8012248:	9306      	str	r3, [sp, #24]
 801224a:	9508      	str	r5, [sp, #32]
 801224c:	f04f 33ff 	mov.w	r3, #4294967295
 8012250:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8012254:	2200      	movs	r2, #0
 8012256:	2312      	movs	r3, #18
 8012258:	e7b0      	b.n	80121bc <_dtoa_r+0x26c>
 801225a:	2301      	movs	r3, #1
 801225c:	9308      	str	r3, [sp, #32]
 801225e:	e7f5      	b.n	801224c <_dtoa_r+0x2fc>
 8012260:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012262:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8012266:	e7b8      	b.n	80121da <_dtoa_r+0x28a>
 8012268:	3101      	adds	r1, #1
 801226a:	6041      	str	r1, [r0, #4]
 801226c:	0052      	lsls	r2, r2, #1
 801226e:	e7b8      	b.n	80121e2 <_dtoa_r+0x292>
 8012270:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012272:	9a01      	ldr	r2, [sp, #4]
 8012274:	601a      	str	r2, [r3, #0]
 8012276:	9b03      	ldr	r3, [sp, #12]
 8012278:	2b0e      	cmp	r3, #14
 801227a:	f200 809d 	bhi.w	80123b8 <_dtoa_r+0x468>
 801227e:	2d00      	cmp	r5, #0
 8012280:	f000 809a 	beq.w	80123b8 <_dtoa_r+0x468>
 8012284:	9b00      	ldr	r3, [sp, #0]
 8012286:	2b00      	cmp	r3, #0
 8012288:	dd32      	ble.n	80122f0 <_dtoa_r+0x3a0>
 801228a:	4ab7      	ldr	r2, [pc, #732]	; (8012568 <_dtoa_r+0x618>)
 801228c:	f003 030f 	and.w	r3, r3, #15
 8012290:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8012294:	e9d3 8900 	ldrd	r8, r9, [r3]
 8012298:	9b00      	ldr	r3, [sp, #0]
 801229a:	05d8      	lsls	r0, r3, #23
 801229c:	ea4f 1723 	mov.w	r7, r3, asr #4
 80122a0:	d516      	bpl.n	80122d0 <_dtoa_r+0x380>
 80122a2:	4bb2      	ldr	r3, [pc, #712]	; (801256c <_dtoa_r+0x61c>)
 80122a4:	ec51 0b19 	vmov	r0, r1, d9
 80122a8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80122ac:	f7ee fafe 	bl	80008ac <__aeabi_ddiv>
 80122b0:	f007 070f 	and.w	r7, r7, #15
 80122b4:	4682      	mov	sl, r0
 80122b6:	468b      	mov	fp, r1
 80122b8:	2503      	movs	r5, #3
 80122ba:	4eac      	ldr	r6, [pc, #688]	; (801256c <_dtoa_r+0x61c>)
 80122bc:	b957      	cbnz	r7, 80122d4 <_dtoa_r+0x384>
 80122be:	4642      	mov	r2, r8
 80122c0:	464b      	mov	r3, r9
 80122c2:	4650      	mov	r0, sl
 80122c4:	4659      	mov	r1, fp
 80122c6:	f7ee faf1 	bl	80008ac <__aeabi_ddiv>
 80122ca:	4682      	mov	sl, r0
 80122cc:	468b      	mov	fp, r1
 80122ce:	e028      	b.n	8012322 <_dtoa_r+0x3d2>
 80122d0:	2502      	movs	r5, #2
 80122d2:	e7f2      	b.n	80122ba <_dtoa_r+0x36a>
 80122d4:	07f9      	lsls	r1, r7, #31
 80122d6:	d508      	bpl.n	80122ea <_dtoa_r+0x39a>
 80122d8:	4640      	mov	r0, r8
 80122da:	4649      	mov	r1, r9
 80122dc:	e9d6 2300 	ldrd	r2, r3, [r6]
 80122e0:	f7ee f9ba 	bl	8000658 <__aeabi_dmul>
 80122e4:	3501      	adds	r5, #1
 80122e6:	4680      	mov	r8, r0
 80122e8:	4689      	mov	r9, r1
 80122ea:	107f      	asrs	r7, r7, #1
 80122ec:	3608      	adds	r6, #8
 80122ee:	e7e5      	b.n	80122bc <_dtoa_r+0x36c>
 80122f0:	f000 809b 	beq.w	801242a <_dtoa_r+0x4da>
 80122f4:	9b00      	ldr	r3, [sp, #0]
 80122f6:	4f9d      	ldr	r7, [pc, #628]	; (801256c <_dtoa_r+0x61c>)
 80122f8:	425e      	negs	r6, r3
 80122fa:	4b9b      	ldr	r3, [pc, #620]	; (8012568 <_dtoa_r+0x618>)
 80122fc:	f006 020f 	and.w	r2, r6, #15
 8012300:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012308:	ec51 0b19 	vmov	r0, r1, d9
 801230c:	f7ee f9a4 	bl	8000658 <__aeabi_dmul>
 8012310:	1136      	asrs	r6, r6, #4
 8012312:	4682      	mov	sl, r0
 8012314:	468b      	mov	fp, r1
 8012316:	2300      	movs	r3, #0
 8012318:	2502      	movs	r5, #2
 801231a:	2e00      	cmp	r6, #0
 801231c:	d17a      	bne.n	8012414 <_dtoa_r+0x4c4>
 801231e:	2b00      	cmp	r3, #0
 8012320:	d1d3      	bne.n	80122ca <_dtoa_r+0x37a>
 8012322:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012324:	2b00      	cmp	r3, #0
 8012326:	f000 8082 	beq.w	801242e <_dtoa_r+0x4de>
 801232a:	4b91      	ldr	r3, [pc, #580]	; (8012570 <_dtoa_r+0x620>)
 801232c:	2200      	movs	r2, #0
 801232e:	4650      	mov	r0, sl
 8012330:	4659      	mov	r1, fp
 8012332:	f7ee fc03 	bl	8000b3c <__aeabi_dcmplt>
 8012336:	2800      	cmp	r0, #0
 8012338:	d079      	beq.n	801242e <_dtoa_r+0x4de>
 801233a:	9b03      	ldr	r3, [sp, #12]
 801233c:	2b00      	cmp	r3, #0
 801233e:	d076      	beq.n	801242e <_dtoa_r+0x4de>
 8012340:	9b02      	ldr	r3, [sp, #8]
 8012342:	2b00      	cmp	r3, #0
 8012344:	dd36      	ble.n	80123b4 <_dtoa_r+0x464>
 8012346:	9b00      	ldr	r3, [sp, #0]
 8012348:	4650      	mov	r0, sl
 801234a:	4659      	mov	r1, fp
 801234c:	1e5f      	subs	r7, r3, #1
 801234e:	2200      	movs	r2, #0
 8012350:	4b88      	ldr	r3, [pc, #544]	; (8012574 <_dtoa_r+0x624>)
 8012352:	f7ee f981 	bl	8000658 <__aeabi_dmul>
 8012356:	9e02      	ldr	r6, [sp, #8]
 8012358:	4682      	mov	sl, r0
 801235a:	468b      	mov	fp, r1
 801235c:	3501      	adds	r5, #1
 801235e:	4628      	mov	r0, r5
 8012360:	f7ee f910 	bl	8000584 <__aeabi_i2d>
 8012364:	4652      	mov	r2, sl
 8012366:	465b      	mov	r3, fp
 8012368:	f7ee f976 	bl	8000658 <__aeabi_dmul>
 801236c:	4b82      	ldr	r3, [pc, #520]	; (8012578 <_dtoa_r+0x628>)
 801236e:	2200      	movs	r2, #0
 8012370:	f7ed ffbc 	bl	80002ec <__adddf3>
 8012374:	46d0      	mov	r8, sl
 8012376:	46d9      	mov	r9, fp
 8012378:	4682      	mov	sl, r0
 801237a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 801237e:	2e00      	cmp	r6, #0
 8012380:	d158      	bne.n	8012434 <_dtoa_r+0x4e4>
 8012382:	4b7e      	ldr	r3, [pc, #504]	; (801257c <_dtoa_r+0x62c>)
 8012384:	2200      	movs	r2, #0
 8012386:	4640      	mov	r0, r8
 8012388:	4649      	mov	r1, r9
 801238a:	f7ed ffad 	bl	80002e8 <__aeabi_dsub>
 801238e:	4652      	mov	r2, sl
 8012390:	465b      	mov	r3, fp
 8012392:	4680      	mov	r8, r0
 8012394:	4689      	mov	r9, r1
 8012396:	f7ee fbef 	bl	8000b78 <__aeabi_dcmpgt>
 801239a:	2800      	cmp	r0, #0
 801239c:	f040 8295 	bne.w	80128ca <_dtoa_r+0x97a>
 80123a0:	4652      	mov	r2, sl
 80123a2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80123a6:	4640      	mov	r0, r8
 80123a8:	4649      	mov	r1, r9
 80123aa:	f7ee fbc7 	bl	8000b3c <__aeabi_dcmplt>
 80123ae:	2800      	cmp	r0, #0
 80123b0:	f040 8289 	bne.w	80128c6 <_dtoa_r+0x976>
 80123b4:	ec5b ab19 	vmov	sl, fp, d9
 80123b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80123ba:	2b00      	cmp	r3, #0
 80123bc:	f2c0 8148 	blt.w	8012650 <_dtoa_r+0x700>
 80123c0:	9a00      	ldr	r2, [sp, #0]
 80123c2:	2a0e      	cmp	r2, #14
 80123c4:	f300 8144 	bgt.w	8012650 <_dtoa_r+0x700>
 80123c8:	4b67      	ldr	r3, [pc, #412]	; (8012568 <_dtoa_r+0x618>)
 80123ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80123ce:	e9d3 8900 	ldrd	r8, r9, [r3]
 80123d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80123d4:	2b00      	cmp	r3, #0
 80123d6:	f280 80d5 	bge.w	8012584 <_dtoa_r+0x634>
 80123da:	9b03      	ldr	r3, [sp, #12]
 80123dc:	2b00      	cmp	r3, #0
 80123de:	f300 80d1 	bgt.w	8012584 <_dtoa_r+0x634>
 80123e2:	f040 826f 	bne.w	80128c4 <_dtoa_r+0x974>
 80123e6:	4b65      	ldr	r3, [pc, #404]	; (801257c <_dtoa_r+0x62c>)
 80123e8:	2200      	movs	r2, #0
 80123ea:	4640      	mov	r0, r8
 80123ec:	4649      	mov	r1, r9
 80123ee:	f7ee f933 	bl	8000658 <__aeabi_dmul>
 80123f2:	4652      	mov	r2, sl
 80123f4:	465b      	mov	r3, fp
 80123f6:	f7ee fbb5 	bl	8000b64 <__aeabi_dcmpge>
 80123fa:	9e03      	ldr	r6, [sp, #12]
 80123fc:	4637      	mov	r7, r6
 80123fe:	2800      	cmp	r0, #0
 8012400:	f040 8245 	bne.w	801288e <_dtoa_r+0x93e>
 8012404:	9d01      	ldr	r5, [sp, #4]
 8012406:	2331      	movs	r3, #49	; 0x31
 8012408:	f805 3b01 	strb.w	r3, [r5], #1
 801240c:	9b00      	ldr	r3, [sp, #0]
 801240e:	3301      	adds	r3, #1
 8012410:	9300      	str	r3, [sp, #0]
 8012412:	e240      	b.n	8012896 <_dtoa_r+0x946>
 8012414:	07f2      	lsls	r2, r6, #31
 8012416:	d505      	bpl.n	8012424 <_dtoa_r+0x4d4>
 8012418:	e9d7 2300 	ldrd	r2, r3, [r7]
 801241c:	f7ee f91c 	bl	8000658 <__aeabi_dmul>
 8012420:	3501      	adds	r5, #1
 8012422:	2301      	movs	r3, #1
 8012424:	1076      	asrs	r6, r6, #1
 8012426:	3708      	adds	r7, #8
 8012428:	e777      	b.n	801231a <_dtoa_r+0x3ca>
 801242a:	2502      	movs	r5, #2
 801242c:	e779      	b.n	8012322 <_dtoa_r+0x3d2>
 801242e:	9f00      	ldr	r7, [sp, #0]
 8012430:	9e03      	ldr	r6, [sp, #12]
 8012432:	e794      	b.n	801235e <_dtoa_r+0x40e>
 8012434:	9901      	ldr	r1, [sp, #4]
 8012436:	4b4c      	ldr	r3, [pc, #304]	; (8012568 <_dtoa_r+0x618>)
 8012438:	4431      	add	r1, r6
 801243a:	910d      	str	r1, [sp, #52]	; 0x34
 801243c:	9908      	ldr	r1, [sp, #32]
 801243e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8012442:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8012446:	2900      	cmp	r1, #0
 8012448:	d043      	beq.n	80124d2 <_dtoa_r+0x582>
 801244a:	494d      	ldr	r1, [pc, #308]	; (8012580 <_dtoa_r+0x630>)
 801244c:	2000      	movs	r0, #0
 801244e:	f7ee fa2d 	bl	80008ac <__aeabi_ddiv>
 8012452:	4652      	mov	r2, sl
 8012454:	465b      	mov	r3, fp
 8012456:	f7ed ff47 	bl	80002e8 <__aeabi_dsub>
 801245a:	9d01      	ldr	r5, [sp, #4]
 801245c:	4682      	mov	sl, r0
 801245e:	468b      	mov	fp, r1
 8012460:	4649      	mov	r1, r9
 8012462:	4640      	mov	r0, r8
 8012464:	f7ee fba8 	bl	8000bb8 <__aeabi_d2iz>
 8012468:	4606      	mov	r6, r0
 801246a:	f7ee f88b 	bl	8000584 <__aeabi_i2d>
 801246e:	4602      	mov	r2, r0
 8012470:	460b      	mov	r3, r1
 8012472:	4640      	mov	r0, r8
 8012474:	4649      	mov	r1, r9
 8012476:	f7ed ff37 	bl	80002e8 <__aeabi_dsub>
 801247a:	3630      	adds	r6, #48	; 0x30
 801247c:	f805 6b01 	strb.w	r6, [r5], #1
 8012480:	4652      	mov	r2, sl
 8012482:	465b      	mov	r3, fp
 8012484:	4680      	mov	r8, r0
 8012486:	4689      	mov	r9, r1
 8012488:	f7ee fb58 	bl	8000b3c <__aeabi_dcmplt>
 801248c:	2800      	cmp	r0, #0
 801248e:	d163      	bne.n	8012558 <_dtoa_r+0x608>
 8012490:	4642      	mov	r2, r8
 8012492:	464b      	mov	r3, r9
 8012494:	4936      	ldr	r1, [pc, #216]	; (8012570 <_dtoa_r+0x620>)
 8012496:	2000      	movs	r0, #0
 8012498:	f7ed ff26 	bl	80002e8 <__aeabi_dsub>
 801249c:	4652      	mov	r2, sl
 801249e:	465b      	mov	r3, fp
 80124a0:	f7ee fb4c 	bl	8000b3c <__aeabi_dcmplt>
 80124a4:	2800      	cmp	r0, #0
 80124a6:	f040 80b5 	bne.w	8012614 <_dtoa_r+0x6c4>
 80124aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80124ac:	429d      	cmp	r5, r3
 80124ae:	d081      	beq.n	80123b4 <_dtoa_r+0x464>
 80124b0:	4b30      	ldr	r3, [pc, #192]	; (8012574 <_dtoa_r+0x624>)
 80124b2:	2200      	movs	r2, #0
 80124b4:	4650      	mov	r0, sl
 80124b6:	4659      	mov	r1, fp
 80124b8:	f7ee f8ce 	bl	8000658 <__aeabi_dmul>
 80124bc:	4b2d      	ldr	r3, [pc, #180]	; (8012574 <_dtoa_r+0x624>)
 80124be:	4682      	mov	sl, r0
 80124c0:	468b      	mov	fp, r1
 80124c2:	4640      	mov	r0, r8
 80124c4:	4649      	mov	r1, r9
 80124c6:	2200      	movs	r2, #0
 80124c8:	f7ee f8c6 	bl	8000658 <__aeabi_dmul>
 80124cc:	4680      	mov	r8, r0
 80124ce:	4689      	mov	r9, r1
 80124d0:	e7c6      	b.n	8012460 <_dtoa_r+0x510>
 80124d2:	4650      	mov	r0, sl
 80124d4:	4659      	mov	r1, fp
 80124d6:	f7ee f8bf 	bl	8000658 <__aeabi_dmul>
 80124da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80124dc:	9d01      	ldr	r5, [sp, #4]
 80124de:	930f      	str	r3, [sp, #60]	; 0x3c
 80124e0:	4682      	mov	sl, r0
 80124e2:	468b      	mov	fp, r1
 80124e4:	4649      	mov	r1, r9
 80124e6:	4640      	mov	r0, r8
 80124e8:	f7ee fb66 	bl	8000bb8 <__aeabi_d2iz>
 80124ec:	4606      	mov	r6, r0
 80124ee:	f7ee f849 	bl	8000584 <__aeabi_i2d>
 80124f2:	3630      	adds	r6, #48	; 0x30
 80124f4:	4602      	mov	r2, r0
 80124f6:	460b      	mov	r3, r1
 80124f8:	4640      	mov	r0, r8
 80124fa:	4649      	mov	r1, r9
 80124fc:	f7ed fef4 	bl	80002e8 <__aeabi_dsub>
 8012500:	f805 6b01 	strb.w	r6, [r5], #1
 8012504:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012506:	429d      	cmp	r5, r3
 8012508:	4680      	mov	r8, r0
 801250a:	4689      	mov	r9, r1
 801250c:	f04f 0200 	mov.w	r2, #0
 8012510:	d124      	bne.n	801255c <_dtoa_r+0x60c>
 8012512:	4b1b      	ldr	r3, [pc, #108]	; (8012580 <_dtoa_r+0x630>)
 8012514:	4650      	mov	r0, sl
 8012516:	4659      	mov	r1, fp
 8012518:	f7ed fee8 	bl	80002ec <__adddf3>
 801251c:	4602      	mov	r2, r0
 801251e:	460b      	mov	r3, r1
 8012520:	4640      	mov	r0, r8
 8012522:	4649      	mov	r1, r9
 8012524:	f7ee fb28 	bl	8000b78 <__aeabi_dcmpgt>
 8012528:	2800      	cmp	r0, #0
 801252a:	d173      	bne.n	8012614 <_dtoa_r+0x6c4>
 801252c:	4652      	mov	r2, sl
 801252e:	465b      	mov	r3, fp
 8012530:	4913      	ldr	r1, [pc, #76]	; (8012580 <_dtoa_r+0x630>)
 8012532:	2000      	movs	r0, #0
 8012534:	f7ed fed8 	bl	80002e8 <__aeabi_dsub>
 8012538:	4602      	mov	r2, r0
 801253a:	460b      	mov	r3, r1
 801253c:	4640      	mov	r0, r8
 801253e:	4649      	mov	r1, r9
 8012540:	f7ee fafc 	bl	8000b3c <__aeabi_dcmplt>
 8012544:	2800      	cmp	r0, #0
 8012546:	f43f af35 	beq.w	80123b4 <_dtoa_r+0x464>
 801254a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801254c:	1e6b      	subs	r3, r5, #1
 801254e:	930f      	str	r3, [sp, #60]	; 0x3c
 8012550:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8012554:	2b30      	cmp	r3, #48	; 0x30
 8012556:	d0f8      	beq.n	801254a <_dtoa_r+0x5fa>
 8012558:	9700      	str	r7, [sp, #0]
 801255a:	e049      	b.n	80125f0 <_dtoa_r+0x6a0>
 801255c:	4b05      	ldr	r3, [pc, #20]	; (8012574 <_dtoa_r+0x624>)
 801255e:	f7ee f87b 	bl	8000658 <__aeabi_dmul>
 8012562:	4680      	mov	r8, r0
 8012564:	4689      	mov	r9, r1
 8012566:	e7bd      	b.n	80124e4 <_dtoa_r+0x594>
 8012568:	08016ca0 	.word	0x08016ca0
 801256c:	08016c78 	.word	0x08016c78
 8012570:	3ff00000 	.word	0x3ff00000
 8012574:	40240000 	.word	0x40240000
 8012578:	401c0000 	.word	0x401c0000
 801257c:	40140000 	.word	0x40140000
 8012580:	3fe00000 	.word	0x3fe00000
 8012584:	9d01      	ldr	r5, [sp, #4]
 8012586:	4656      	mov	r6, sl
 8012588:	465f      	mov	r7, fp
 801258a:	4642      	mov	r2, r8
 801258c:	464b      	mov	r3, r9
 801258e:	4630      	mov	r0, r6
 8012590:	4639      	mov	r1, r7
 8012592:	f7ee f98b 	bl	80008ac <__aeabi_ddiv>
 8012596:	f7ee fb0f 	bl	8000bb8 <__aeabi_d2iz>
 801259a:	4682      	mov	sl, r0
 801259c:	f7ed fff2 	bl	8000584 <__aeabi_i2d>
 80125a0:	4642      	mov	r2, r8
 80125a2:	464b      	mov	r3, r9
 80125a4:	f7ee f858 	bl	8000658 <__aeabi_dmul>
 80125a8:	4602      	mov	r2, r0
 80125aa:	460b      	mov	r3, r1
 80125ac:	4630      	mov	r0, r6
 80125ae:	4639      	mov	r1, r7
 80125b0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80125b4:	f7ed fe98 	bl	80002e8 <__aeabi_dsub>
 80125b8:	f805 6b01 	strb.w	r6, [r5], #1
 80125bc:	9e01      	ldr	r6, [sp, #4]
 80125be:	9f03      	ldr	r7, [sp, #12]
 80125c0:	1bae      	subs	r6, r5, r6
 80125c2:	42b7      	cmp	r7, r6
 80125c4:	4602      	mov	r2, r0
 80125c6:	460b      	mov	r3, r1
 80125c8:	d135      	bne.n	8012636 <_dtoa_r+0x6e6>
 80125ca:	f7ed fe8f 	bl	80002ec <__adddf3>
 80125ce:	4642      	mov	r2, r8
 80125d0:	464b      	mov	r3, r9
 80125d2:	4606      	mov	r6, r0
 80125d4:	460f      	mov	r7, r1
 80125d6:	f7ee facf 	bl	8000b78 <__aeabi_dcmpgt>
 80125da:	b9d0      	cbnz	r0, 8012612 <_dtoa_r+0x6c2>
 80125dc:	4642      	mov	r2, r8
 80125de:	464b      	mov	r3, r9
 80125e0:	4630      	mov	r0, r6
 80125e2:	4639      	mov	r1, r7
 80125e4:	f7ee faa0 	bl	8000b28 <__aeabi_dcmpeq>
 80125e8:	b110      	cbz	r0, 80125f0 <_dtoa_r+0x6a0>
 80125ea:	f01a 0f01 	tst.w	sl, #1
 80125ee:	d110      	bne.n	8012612 <_dtoa_r+0x6c2>
 80125f0:	4620      	mov	r0, r4
 80125f2:	ee18 1a10 	vmov	r1, s16
 80125f6:	f000 fe8b 	bl	8013310 <_Bfree>
 80125fa:	2300      	movs	r3, #0
 80125fc:	9800      	ldr	r0, [sp, #0]
 80125fe:	702b      	strb	r3, [r5, #0]
 8012600:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012602:	3001      	adds	r0, #1
 8012604:	6018      	str	r0, [r3, #0]
 8012606:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012608:	2b00      	cmp	r3, #0
 801260a:	f43f acf1 	beq.w	8011ff0 <_dtoa_r+0xa0>
 801260e:	601d      	str	r5, [r3, #0]
 8012610:	e4ee      	b.n	8011ff0 <_dtoa_r+0xa0>
 8012612:	9f00      	ldr	r7, [sp, #0]
 8012614:	462b      	mov	r3, r5
 8012616:	461d      	mov	r5, r3
 8012618:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801261c:	2a39      	cmp	r2, #57	; 0x39
 801261e:	d106      	bne.n	801262e <_dtoa_r+0x6de>
 8012620:	9a01      	ldr	r2, [sp, #4]
 8012622:	429a      	cmp	r2, r3
 8012624:	d1f7      	bne.n	8012616 <_dtoa_r+0x6c6>
 8012626:	9901      	ldr	r1, [sp, #4]
 8012628:	2230      	movs	r2, #48	; 0x30
 801262a:	3701      	adds	r7, #1
 801262c:	700a      	strb	r2, [r1, #0]
 801262e:	781a      	ldrb	r2, [r3, #0]
 8012630:	3201      	adds	r2, #1
 8012632:	701a      	strb	r2, [r3, #0]
 8012634:	e790      	b.n	8012558 <_dtoa_r+0x608>
 8012636:	4ba6      	ldr	r3, [pc, #664]	; (80128d0 <_dtoa_r+0x980>)
 8012638:	2200      	movs	r2, #0
 801263a:	f7ee f80d 	bl	8000658 <__aeabi_dmul>
 801263e:	2200      	movs	r2, #0
 8012640:	2300      	movs	r3, #0
 8012642:	4606      	mov	r6, r0
 8012644:	460f      	mov	r7, r1
 8012646:	f7ee fa6f 	bl	8000b28 <__aeabi_dcmpeq>
 801264a:	2800      	cmp	r0, #0
 801264c:	d09d      	beq.n	801258a <_dtoa_r+0x63a>
 801264e:	e7cf      	b.n	80125f0 <_dtoa_r+0x6a0>
 8012650:	9a08      	ldr	r2, [sp, #32]
 8012652:	2a00      	cmp	r2, #0
 8012654:	f000 80d7 	beq.w	8012806 <_dtoa_r+0x8b6>
 8012658:	9a06      	ldr	r2, [sp, #24]
 801265a:	2a01      	cmp	r2, #1
 801265c:	f300 80ba 	bgt.w	80127d4 <_dtoa_r+0x884>
 8012660:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012662:	2a00      	cmp	r2, #0
 8012664:	f000 80b2 	beq.w	80127cc <_dtoa_r+0x87c>
 8012668:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801266c:	9e07      	ldr	r6, [sp, #28]
 801266e:	9d04      	ldr	r5, [sp, #16]
 8012670:	9a04      	ldr	r2, [sp, #16]
 8012672:	441a      	add	r2, r3
 8012674:	9204      	str	r2, [sp, #16]
 8012676:	9a05      	ldr	r2, [sp, #20]
 8012678:	2101      	movs	r1, #1
 801267a:	441a      	add	r2, r3
 801267c:	4620      	mov	r0, r4
 801267e:	9205      	str	r2, [sp, #20]
 8012680:	f000 ff48 	bl	8013514 <__i2b>
 8012684:	4607      	mov	r7, r0
 8012686:	2d00      	cmp	r5, #0
 8012688:	dd0c      	ble.n	80126a4 <_dtoa_r+0x754>
 801268a:	9b05      	ldr	r3, [sp, #20]
 801268c:	2b00      	cmp	r3, #0
 801268e:	dd09      	ble.n	80126a4 <_dtoa_r+0x754>
 8012690:	42ab      	cmp	r3, r5
 8012692:	9a04      	ldr	r2, [sp, #16]
 8012694:	bfa8      	it	ge
 8012696:	462b      	movge	r3, r5
 8012698:	1ad2      	subs	r2, r2, r3
 801269a:	9204      	str	r2, [sp, #16]
 801269c:	9a05      	ldr	r2, [sp, #20]
 801269e:	1aed      	subs	r5, r5, r3
 80126a0:	1ad3      	subs	r3, r2, r3
 80126a2:	9305      	str	r3, [sp, #20]
 80126a4:	9b07      	ldr	r3, [sp, #28]
 80126a6:	b31b      	cbz	r3, 80126f0 <_dtoa_r+0x7a0>
 80126a8:	9b08      	ldr	r3, [sp, #32]
 80126aa:	2b00      	cmp	r3, #0
 80126ac:	f000 80af 	beq.w	801280e <_dtoa_r+0x8be>
 80126b0:	2e00      	cmp	r6, #0
 80126b2:	dd13      	ble.n	80126dc <_dtoa_r+0x78c>
 80126b4:	4639      	mov	r1, r7
 80126b6:	4632      	mov	r2, r6
 80126b8:	4620      	mov	r0, r4
 80126ba:	f000 ffeb 	bl	8013694 <__pow5mult>
 80126be:	ee18 2a10 	vmov	r2, s16
 80126c2:	4601      	mov	r1, r0
 80126c4:	4607      	mov	r7, r0
 80126c6:	4620      	mov	r0, r4
 80126c8:	f000 ff3a 	bl	8013540 <__multiply>
 80126cc:	ee18 1a10 	vmov	r1, s16
 80126d0:	4680      	mov	r8, r0
 80126d2:	4620      	mov	r0, r4
 80126d4:	f000 fe1c 	bl	8013310 <_Bfree>
 80126d8:	ee08 8a10 	vmov	s16, r8
 80126dc:	9b07      	ldr	r3, [sp, #28]
 80126de:	1b9a      	subs	r2, r3, r6
 80126e0:	d006      	beq.n	80126f0 <_dtoa_r+0x7a0>
 80126e2:	ee18 1a10 	vmov	r1, s16
 80126e6:	4620      	mov	r0, r4
 80126e8:	f000 ffd4 	bl	8013694 <__pow5mult>
 80126ec:	ee08 0a10 	vmov	s16, r0
 80126f0:	2101      	movs	r1, #1
 80126f2:	4620      	mov	r0, r4
 80126f4:	f000 ff0e 	bl	8013514 <__i2b>
 80126f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80126fa:	2b00      	cmp	r3, #0
 80126fc:	4606      	mov	r6, r0
 80126fe:	f340 8088 	ble.w	8012812 <_dtoa_r+0x8c2>
 8012702:	461a      	mov	r2, r3
 8012704:	4601      	mov	r1, r0
 8012706:	4620      	mov	r0, r4
 8012708:	f000 ffc4 	bl	8013694 <__pow5mult>
 801270c:	9b06      	ldr	r3, [sp, #24]
 801270e:	2b01      	cmp	r3, #1
 8012710:	4606      	mov	r6, r0
 8012712:	f340 8081 	ble.w	8012818 <_dtoa_r+0x8c8>
 8012716:	f04f 0800 	mov.w	r8, #0
 801271a:	6933      	ldr	r3, [r6, #16]
 801271c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8012720:	6918      	ldr	r0, [r3, #16]
 8012722:	f000 fea7 	bl	8013474 <__hi0bits>
 8012726:	f1c0 0020 	rsb	r0, r0, #32
 801272a:	9b05      	ldr	r3, [sp, #20]
 801272c:	4418      	add	r0, r3
 801272e:	f010 001f 	ands.w	r0, r0, #31
 8012732:	f000 8092 	beq.w	801285a <_dtoa_r+0x90a>
 8012736:	f1c0 0320 	rsb	r3, r0, #32
 801273a:	2b04      	cmp	r3, #4
 801273c:	f340 808a 	ble.w	8012854 <_dtoa_r+0x904>
 8012740:	f1c0 001c 	rsb	r0, r0, #28
 8012744:	9b04      	ldr	r3, [sp, #16]
 8012746:	4403      	add	r3, r0
 8012748:	9304      	str	r3, [sp, #16]
 801274a:	9b05      	ldr	r3, [sp, #20]
 801274c:	4403      	add	r3, r0
 801274e:	4405      	add	r5, r0
 8012750:	9305      	str	r3, [sp, #20]
 8012752:	9b04      	ldr	r3, [sp, #16]
 8012754:	2b00      	cmp	r3, #0
 8012756:	dd07      	ble.n	8012768 <_dtoa_r+0x818>
 8012758:	ee18 1a10 	vmov	r1, s16
 801275c:	461a      	mov	r2, r3
 801275e:	4620      	mov	r0, r4
 8012760:	f000 fff2 	bl	8013748 <__lshift>
 8012764:	ee08 0a10 	vmov	s16, r0
 8012768:	9b05      	ldr	r3, [sp, #20]
 801276a:	2b00      	cmp	r3, #0
 801276c:	dd05      	ble.n	801277a <_dtoa_r+0x82a>
 801276e:	4631      	mov	r1, r6
 8012770:	461a      	mov	r2, r3
 8012772:	4620      	mov	r0, r4
 8012774:	f000 ffe8 	bl	8013748 <__lshift>
 8012778:	4606      	mov	r6, r0
 801277a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801277c:	2b00      	cmp	r3, #0
 801277e:	d06e      	beq.n	801285e <_dtoa_r+0x90e>
 8012780:	ee18 0a10 	vmov	r0, s16
 8012784:	4631      	mov	r1, r6
 8012786:	f001 f84f 	bl	8013828 <__mcmp>
 801278a:	2800      	cmp	r0, #0
 801278c:	da67      	bge.n	801285e <_dtoa_r+0x90e>
 801278e:	9b00      	ldr	r3, [sp, #0]
 8012790:	3b01      	subs	r3, #1
 8012792:	ee18 1a10 	vmov	r1, s16
 8012796:	9300      	str	r3, [sp, #0]
 8012798:	220a      	movs	r2, #10
 801279a:	2300      	movs	r3, #0
 801279c:	4620      	mov	r0, r4
 801279e:	f000 fdd9 	bl	8013354 <__multadd>
 80127a2:	9b08      	ldr	r3, [sp, #32]
 80127a4:	ee08 0a10 	vmov	s16, r0
 80127a8:	2b00      	cmp	r3, #0
 80127aa:	f000 81b1 	beq.w	8012b10 <_dtoa_r+0xbc0>
 80127ae:	2300      	movs	r3, #0
 80127b0:	4639      	mov	r1, r7
 80127b2:	220a      	movs	r2, #10
 80127b4:	4620      	mov	r0, r4
 80127b6:	f000 fdcd 	bl	8013354 <__multadd>
 80127ba:	9b02      	ldr	r3, [sp, #8]
 80127bc:	2b00      	cmp	r3, #0
 80127be:	4607      	mov	r7, r0
 80127c0:	f300 808e 	bgt.w	80128e0 <_dtoa_r+0x990>
 80127c4:	9b06      	ldr	r3, [sp, #24]
 80127c6:	2b02      	cmp	r3, #2
 80127c8:	dc51      	bgt.n	801286e <_dtoa_r+0x91e>
 80127ca:	e089      	b.n	80128e0 <_dtoa_r+0x990>
 80127cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80127ce:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80127d2:	e74b      	b.n	801266c <_dtoa_r+0x71c>
 80127d4:	9b03      	ldr	r3, [sp, #12]
 80127d6:	1e5e      	subs	r6, r3, #1
 80127d8:	9b07      	ldr	r3, [sp, #28]
 80127da:	42b3      	cmp	r3, r6
 80127dc:	bfbf      	itttt	lt
 80127de:	9b07      	ldrlt	r3, [sp, #28]
 80127e0:	9607      	strlt	r6, [sp, #28]
 80127e2:	1af2      	sublt	r2, r6, r3
 80127e4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80127e6:	bfb6      	itet	lt
 80127e8:	189b      	addlt	r3, r3, r2
 80127ea:	1b9e      	subge	r6, r3, r6
 80127ec:	930a      	strlt	r3, [sp, #40]	; 0x28
 80127ee:	9b03      	ldr	r3, [sp, #12]
 80127f0:	bfb8      	it	lt
 80127f2:	2600      	movlt	r6, #0
 80127f4:	2b00      	cmp	r3, #0
 80127f6:	bfb7      	itett	lt
 80127f8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80127fc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8012800:	1a9d      	sublt	r5, r3, r2
 8012802:	2300      	movlt	r3, #0
 8012804:	e734      	b.n	8012670 <_dtoa_r+0x720>
 8012806:	9e07      	ldr	r6, [sp, #28]
 8012808:	9d04      	ldr	r5, [sp, #16]
 801280a:	9f08      	ldr	r7, [sp, #32]
 801280c:	e73b      	b.n	8012686 <_dtoa_r+0x736>
 801280e:	9a07      	ldr	r2, [sp, #28]
 8012810:	e767      	b.n	80126e2 <_dtoa_r+0x792>
 8012812:	9b06      	ldr	r3, [sp, #24]
 8012814:	2b01      	cmp	r3, #1
 8012816:	dc18      	bgt.n	801284a <_dtoa_r+0x8fa>
 8012818:	f1ba 0f00 	cmp.w	sl, #0
 801281c:	d115      	bne.n	801284a <_dtoa_r+0x8fa>
 801281e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8012822:	b993      	cbnz	r3, 801284a <_dtoa_r+0x8fa>
 8012824:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8012828:	0d1b      	lsrs	r3, r3, #20
 801282a:	051b      	lsls	r3, r3, #20
 801282c:	b183      	cbz	r3, 8012850 <_dtoa_r+0x900>
 801282e:	9b04      	ldr	r3, [sp, #16]
 8012830:	3301      	adds	r3, #1
 8012832:	9304      	str	r3, [sp, #16]
 8012834:	9b05      	ldr	r3, [sp, #20]
 8012836:	3301      	adds	r3, #1
 8012838:	9305      	str	r3, [sp, #20]
 801283a:	f04f 0801 	mov.w	r8, #1
 801283e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012840:	2b00      	cmp	r3, #0
 8012842:	f47f af6a 	bne.w	801271a <_dtoa_r+0x7ca>
 8012846:	2001      	movs	r0, #1
 8012848:	e76f      	b.n	801272a <_dtoa_r+0x7da>
 801284a:	f04f 0800 	mov.w	r8, #0
 801284e:	e7f6      	b.n	801283e <_dtoa_r+0x8ee>
 8012850:	4698      	mov	r8, r3
 8012852:	e7f4      	b.n	801283e <_dtoa_r+0x8ee>
 8012854:	f43f af7d 	beq.w	8012752 <_dtoa_r+0x802>
 8012858:	4618      	mov	r0, r3
 801285a:	301c      	adds	r0, #28
 801285c:	e772      	b.n	8012744 <_dtoa_r+0x7f4>
 801285e:	9b03      	ldr	r3, [sp, #12]
 8012860:	2b00      	cmp	r3, #0
 8012862:	dc37      	bgt.n	80128d4 <_dtoa_r+0x984>
 8012864:	9b06      	ldr	r3, [sp, #24]
 8012866:	2b02      	cmp	r3, #2
 8012868:	dd34      	ble.n	80128d4 <_dtoa_r+0x984>
 801286a:	9b03      	ldr	r3, [sp, #12]
 801286c:	9302      	str	r3, [sp, #8]
 801286e:	9b02      	ldr	r3, [sp, #8]
 8012870:	b96b      	cbnz	r3, 801288e <_dtoa_r+0x93e>
 8012872:	4631      	mov	r1, r6
 8012874:	2205      	movs	r2, #5
 8012876:	4620      	mov	r0, r4
 8012878:	f000 fd6c 	bl	8013354 <__multadd>
 801287c:	4601      	mov	r1, r0
 801287e:	4606      	mov	r6, r0
 8012880:	ee18 0a10 	vmov	r0, s16
 8012884:	f000 ffd0 	bl	8013828 <__mcmp>
 8012888:	2800      	cmp	r0, #0
 801288a:	f73f adbb 	bgt.w	8012404 <_dtoa_r+0x4b4>
 801288e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012890:	9d01      	ldr	r5, [sp, #4]
 8012892:	43db      	mvns	r3, r3
 8012894:	9300      	str	r3, [sp, #0]
 8012896:	f04f 0800 	mov.w	r8, #0
 801289a:	4631      	mov	r1, r6
 801289c:	4620      	mov	r0, r4
 801289e:	f000 fd37 	bl	8013310 <_Bfree>
 80128a2:	2f00      	cmp	r7, #0
 80128a4:	f43f aea4 	beq.w	80125f0 <_dtoa_r+0x6a0>
 80128a8:	f1b8 0f00 	cmp.w	r8, #0
 80128ac:	d005      	beq.n	80128ba <_dtoa_r+0x96a>
 80128ae:	45b8      	cmp	r8, r7
 80128b0:	d003      	beq.n	80128ba <_dtoa_r+0x96a>
 80128b2:	4641      	mov	r1, r8
 80128b4:	4620      	mov	r0, r4
 80128b6:	f000 fd2b 	bl	8013310 <_Bfree>
 80128ba:	4639      	mov	r1, r7
 80128bc:	4620      	mov	r0, r4
 80128be:	f000 fd27 	bl	8013310 <_Bfree>
 80128c2:	e695      	b.n	80125f0 <_dtoa_r+0x6a0>
 80128c4:	2600      	movs	r6, #0
 80128c6:	4637      	mov	r7, r6
 80128c8:	e7e1      	b.n	801288e <_dtoa_r+0x93e>
 80128ca:	9700      	str	r7, [sp, #0]
 80128cc:	4637      	mov	r7, r6
 80128ce:	e599      	b.n	8012404 <_dtoa_r+0x4b4>
 80128d0:	40240000 	.word	0x40240000
 80128d4:	9b08      	ldr	r3, [sp, #32]
 80128d6:	2b00      	cmp	r3, #0
 80128d8:	f000 80ca 	beq.w	8012a70 <_dtoa_r+0xb20>
 80128dc:	9b03      	ldr	r3, [sp, #12]
 80128de:	9302      	str	r3, [sp, #8]
 80128e0:	2d00      	cmp	r5, #0
 80128e2:	dd05      	ble.n	80128f0 <_dtoa_r+0x9a0>
 80128e4:	4639      	mov	r1, r7
 80128e6:	462a      	mov	r2, r5
 80128e8:	4620      	mov	r0, r4
 80128ea:	f000 ff2d 	bl	8013748 <__lshift>
 80128ee:	4607      	mov	r7, r0
 80128f0:	f1b8 0f00 	cmp.w	r8, #0
 80128f4:	d05b      	beq.n	80129ae <_dtoa_r+0xa5e>
 80128f6:	6879      	ldr	r1, [r7, #4]
 80128f8:	4620      	mov	r0, r4
 80128fa:	f000 fcc9 	bl	8013290 <_Balloc>
 80128fe:	4605      	mov	r5, r0
 8012900:	b928      	cbnz	r0, 801290e <_dtoa_r+0x9be>
 8012902:	4b87      	ldr	r3, [pc, #540]	; (8012b20 <_dtoa_r+0xbd0>)
 8012904:	4602      	mov	r2, r0
 8012906:	f240 21ea 	movw	r1, #746	; 0x2ea
 801290a:	f7ff bb3b 	b.w	8011f84 <_dtoa_r+0x34>
 801290e:	693a      	ldr	r2, [r7, #16]
 8012910:	3202      	adds	r2, #2
 8012912:	0092      	lsls	r2, r2, #2
 8012914:	f107 010c 	add.w	r1, r7, #12
 8012918:	300c      	adds	r0, #12
 801291a:	f7fd fc13 	bl	8010144 <memcpy>
 801291e:	2201      	movs	r2, #1
 8012920:	4629      	mov	r1, r5
 8012922:	4620      	mov	r0, r4
 8012924:	f000 ff10 	bl	8013748 <__lshift>
 8012928:	9b01      	ldr	r3, [sp, #4]
 801292a:	f103 0901 	add.w	r9, r3, #1
 801292e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8012932:	4413      	add	r3, r2
 8012934:	9305      	str	r3, [sp, #20]
 8012936:	f00a 0301 	and.w	r3, sl, #1
 801293a:	46b8      	mov	r8, r7
 801293c:	9304      	str	r3, [sp, #16]
 801293e:	4607      	mov	r7, r0
 8012940:	4631      	mov	r1, r6
 8012942:	ee18 0a10 	vmov	r0, s16
 8012946:	f7ff fa77 	bl	8011e38 <quorem>
 801294a:	4641      	mov	r1, r8
 801294c:	9002      	str	r0, [sp, #8]
 801294e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8012952:	ee18 0a10 	vmov	r0, s16
 8012956:	f000 ff67 	bl	8013828 <__mcmp>
 801295a:	463a      	mov	r2, r7
 801295c:	9003      	str	r0, [sp, #12]
 801295e:	4631      	mov	r1, r6
 8012960:	4620      	mov	r0, r4
 8012962:	f000 ff7d 	bl	8013860 <__mdiff>
 8012966:	68c2      	ldr	r2, [r0, #12]
 8012968:	f109 3bff 	add.w	fp, r9, #4294967295
 801296c:	4605      	mov	r5, r0
 801296e:	bb02      	cbnz	r2, 80129b2 <_dtoa_r+0xa62>
 8012970:	4601      	mov	r1, r0
 8012972:	ee18 0a10 	vmov	r0, s16
 8012976:	f000 ff57 	bl	8013828 <__mcmp>
 801297a:	4602      	mov	r2, r0
 801297c:	4629      	mov	r1, r5
 801297e:	4620      	mov	r0, r4
 8012980:	9207      	str	r2, [sp, #28]
 8012982:	f000 fcc5 	bl	8013310 <_Bfree>
 8012986:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801298a:	ea43 0102 	orr.w	r1, r3, r2
 801298e:	9b04      	ldr	r3, [sp, #16]
 8012990:	430b      	orrs	r3, r1
 8012992:	464d      	mov	r5, r9
 8012994:	d10f      	bne.n	80129b6 <_dtoa_r+0xa66>
 8012996:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801299a:	d02a      	beq.n	80129f2 <_dtoa_r+0xaa2>
 801299c:	9b03      	ldr	r3, [sp, #12]
 801299e:	2b00      	cmp	r3, #0
 80129a0:	dd02      	ble.n	80129a8 <_dtoa_r+0xa58>
 80129a2:	9b02      	ldr	r3, [sp, #8]
 80129a4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80129a8:	f88b a000 	strb.w	sl, [fp]
 80129ac:	e775      	b.n	801289a <_dtoa_r+0x94a>
 80129ae:	4638      	mov	r0, r7
 80129b0:	e7ba      	b.n	8012928 <_dtoa_r+0x9d8>
 80129b2:	2201      	movs	r2, #1
 80129b4:	e7e2      	b.n	801297c <_dtoa_r+0xa2c>
 80129b6:	9b03      	ldr	r3, [sp, #12]
 80129b8:	2b00      	cmp	r3, #0
 80129ba:	db04      	blt.n	80129c6 <_dtoa_r+0xa76>
 80129bc:	9906      	ldr	r1, [sp, #24]
 80129be:	430b      	orrs	r3, r1
 80129c0:	9904      	ldr	r1, [sp, #16]
 80129c2:	430b      	orrs	r3, r1
 80129c4:	d122      	bne.n	8012a0c <_dtoa_r+0xabc>
 80129c6:	2a00      	cmp	r2, #0
 80129c8:	ddee      	ble.n	80129a8 <_dtoa_r+0xa58>
 80129ca:	ee18 1a10 	vmov	r1, s16
 80129ce:	2201      	movs	r2, #1
 80129d0:	4620      	mov	r0, r4
 80129d2:	f000 feb9 	bl	8013748 <__lshift>
 80129d6:	4631      	mov	r1, r6
 80129d8:	ee08 0a10 	vmov	s16, r0
 80129dc:	f000 ff24 	bl	8013828 <__mcmp>
 80129e0:	2800      	cmp	r0, #0
 80129e2:	dc03      	bgt.n	80129ec <_dtoa_r+0xa9c>
 80129e4:	d1e0      	bne.n	80129a8 <_dtoa_r+0xa58>
 80129e6:	f01a 0f01 	tst.w	sl, #1
 80129ea:	d0dd      	beq.n	80129a8 <_dtoa_r+0xa58>
 80129ec:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80129f0:	d1d7      	bne.n	80129a2 <_dtoa_r+0xa52>
 80129f2:	2339      	movs	r3, #57	; 0x39
 80129f4:	f88b 3000 	strb.w	r3, [fp]
 80129f8:	462b      	mov	r3, r5
 80129fa:	461d      	mov	r5, r3
 80129fc:	3b01      	subs	r3, #1
 80129fe:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8012a02:	2a39      	cmp	r2, #57	; 0x39
 8012a04:	d071      	beq.n	8012aea <_dtoa_r+0xb9a>
 8012a06:	3201      	adds	r2, #1
 8012a08:	701a      	strb	r2, [r3, #0]
 8012a0a:	e746      	b.n	801289a <_dtoa_r+0x94a>
 8012a0c:	2a00      	cmp	r2, #0
 8012a0e:	dd07      	ble.n	8012a20 <_dtoa_r+0xad0>
 8012a10:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8012a14:	d0ed      	beq.n	80129f2 <_dtoa_r+0xaa2>
 8012a16:	f10a 0301 	add.w	r3, sl, #1
 8012a1a:	f88b 3000 	strb.w	r3, [fp]
 8012a1e:	e73c      	b.n	801289a <_dtoa_r+0x94a>
 8012a20:	9b05      	ldr	r3, [sp, #20]
 8012a22:	f809 ac01 	strb.w	sl, [r9, #-1]
 8012a26:	4599      	cmp	r9, r3
 8012a28:	d047      	beq.n	8012aba <_dtoa_r+0xb6a>
 8012a2a:	ee18 1a10 	vmov	r1, s16
 8012a2e:	2300      	movs	r3, #0
 8012a30:	220a      	movs	r2, #10
 8012a32:	4620      	mov	r0, r4
 8012a34:	f000 fc8e 	bl	8013354 <__multadd>
 8012a38:	45b8      	cmp	r8, r7
 8012a3a:	ee08 0a10 	vmov	s16, r0
 8012a3e:	f04f 0300 	mov.w	r3, #0
 8012a42:	f04f 020a 	mov.w	r2, #10
 8012a46:	4641      	mov	r1, r8
 8012a48:	4620      	mov	r0, r4
 8012a4a:	d106      	bne.n	8012a5a <_dtoa_r+0xb0a>
 8012a4c:	f000 fc82 	bl	8013354 <__multadd>
 8012a50:	4680      	mov	r8, r0
 8012a52:	4607      	mov	r7, r0
 8012a54:	f109 0901 	add.w	r9, r9, #1
 8012a58:	e772      	b.n	8012940 <_dtoa_r+0x9f0>
 8012a5a:	f000 fc7b 	bl	8013354 <__multadd>
 8012a5e:	4639      	mov	r1, r7
 8012a60:	4680      	mov	r8, r0
 8012a62:	2300      	movs	r3, #0
 8012a64:	220a      	movs	r2, #10
 8012a66:	4620      	mov	r0, r4
 8012a68:	f000 fc74 	bl	8013354 <__multadd>
 8012a6c:	4607      	mov	r7, r0
 8012a6e:	e7f1      	b.n	8012a54 <_dtoa_r+0xb04>
 8012a70:	9b03      	ldr	r3, [sp, #12]
 8012a72:	9302      	str	r3, [sp, #8]
 8012a74:	9d01      	ldr	r5, [sp, #4]
 8012a76:	ee18 0a10 	vmov	r0, s16
 8012a7a:	4631      	mov	r1, r6
 8012a7c:	f7ff f9dc 	bl	8011e38 <quorem>
 8012a80:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8012a84:	9b01      	ldr	r3, [sp, #4]
 8012a86:	f805 ab01 	strb.w	sl, [r5], #1
 8012a8a:	1aea      	subs	r2, r5, r3
 8012a8c:	9b02      	ldr	r3, [sp, #8]
 8012a8e:	4293      	cmp	r3, r2
 8012a90:	dd09      	ble.n	8012aa6 <_dtoa_r+0xb56>
 8012a92:	ee18 1a10 	vmov	r1, s16
 8012a96:	2300      	movs	r3, #0
 8012a98:	220a      	movs	r2, #10
 8012a9a:	4620      	mov	r0, r4
 8012a9c:	f000 fc5a 	bl	8013354 <__multadd>
 8012aa0:	ee08 0a10 	vmov	s16, r0
 8012aa4:	e7e7      	b.n	8012a76 <_dtoa_r+0xb26>
 8012aa6:	9b02      	ldr	r3, [sp, #8]
 8012aa8:	2b00      	cmp	r3, #0
 8012aaa:	bfc8      	it	gt
 8012aac:	461d      	movgt	r5, r3
 8012aae:	9b01      	ldr	r3, [sp, #4]
 8012ab0:	bfd8      	it	le
 8012ab2:	2501      	movle	r5, #1
 8012ab4:	441d      	add	r5, r3
 8012ab6:	f04f 0800 	mov.w	r8, #0
 8012aba:	ee18 1a10 	vmov	r1, s16
 8012abe:	2201      	movs	r2, #1
 8012ac0:	4620      	mov	r0, r4
 8012ac2:	f000 fe41 	bl	8013748 <__lshift>
 8012ac6:	4631      	mov	r1, r6
 8012ac8:	ee08 0a10 	vmov	s16, r0
 8012acc:	f000 feac 	bl	8013828 <__mcmp>
 8012ad0:	2800      	cmp	r0, #0
 8012ad2:	dc91      	bgt.n	80129f8 <_dtoa_r+0xaa8>
 8012ad4:	d102      	bne.n	8012adc <_dtoa_r+0xb8c>
 8012ad6:	f01a 0f01 	tst.w	sl, #1
 8012ada:	d18d      	bne.n	80129f8 <_dtoa_r+0xaa8>
 8012adc:	462b      	mov	r3, r5
 8012ade:	461d      	mov	r5, r3
 8012ae0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012ae4:	2a30      	cmp	r2, #48	; 0x30
 8012ae6:	d0fa      	beq.n	8012ade <_dtoa_r+0xb8e>
 8012ae8:	e6d7      	b.n	801289a <_dtoa_r+0x94a>
 8012aea:	9a01      	ldr	r2, [sp, #4]
 8012aec:	429a      	cmp	r2, r3
 8012aee:	d184      	bne.n	80129fa <_dtoa_r+0xaaa>
 8012af0:	9b00      	ldr	r3, [sp, #0]
 8012af2:	3301      	adds	r3, #1
 8012af4:	9300      	str	r3, [sp, #0]
 8012af6:	2331      	movs	r3, #49	; 0x31
 8012af8:	7013      	strb	r3, [r2, #0]
 8012afa:	e6ce      	b.n	801289a <_dtoa_r+0x94a>
 8012afc:	4b09      	ldr	r3, [pc, #36]	; (8012b24 <_dtoa_r+0xbd4>)
 8012afe:	f7ff ba95 	b.w	801202c <_dtoa_r+0xdc>
 8012b02:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012b04:	2b00      	cmp	r3, #0
 8012b06:	f47f aa6e 	bne.w	8011fe6 <_dtoa_r+0x96>
 8012b0a:	4b07      	ldr	r3, [pc, #28]	; (8012b28 <_dtoa_r+0xbd8>)
 8012b0c:	f7ff ba8e 	b.w	801202c <_dtoa_r+0xdc>
 8012b10:	9b02      	ldr	r3, [sp, #8]
 8012b12:	2b00      	cmp	r3, #0
 8012b14:	dcae      	bgt.n	8012a74 <_dtoa_r+0xb24>
 8012b16:	9b06      	ldr	r3, [sp, #24]
 8012b18:	2b02      	cmp	r3, #2
 8012b1a:	f73f aea8 	bgt.w	801286e <_dtoa_r+0x91e>
 8012b1e:	e7a9      	b.n	8012a74 <_dtoa_r+0xb24>
 8012b20:	08016b91 	.word	0x08016b91
 8012b24:	08016d89 	.word	0x08016d89
 8012b28:	08016b29 	.word	0x08016b29

08012b2c <fiprintf>:
 8012b2c:	b40e      	push	{r1, r2, r3}
 8012b2e:	b503      	push	{r0, r1, lr}
 8012b30:	4601      	mov	r1, r0
 8012b32:	ab03      	add	r3, sp, #12
 8012b34:	4805      	ldr	r0, [pc, #20]	; (8012b4c <fiprintf+0x20>)
 8012b36:	f853 2b04 	ldr.w	r2, [r3], #4
 8012b3a:	6800      	ldr	r0, [r0, #0]
 8012b3c:	9301      	str	r3, [sp, #4]
 8012b3e:	f001 fcb7 	bl	80144b0 <_vfiprintf_r>
 8012b42:	b002      	add	sp, #8
 8012b44:	f85d eb04 	ldr.w	lr, [sp], #4
 8012b48:	b003      	add	sp, #12
 8012b4a:	4770      	bx	lr
 8012b4c:	2000038c 	.word	0x2000038c

08012b50 <rshift>:
 8012b50:	6903      	ldr	r3, [r0, #16]
 8012b52:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8012b56:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012b5a:	ea4f 1261 	mov.w	r2, r1, asr #5
 8012b5e:	f100 0414 	add.w	r4, r0, #20
 8012b62:	dd45      	ble.n	8012bf0 <rshift+0xa0>
 8012b64:	f011 011f 	ands.w	r1, r1, #31
 8012b68:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8012b6c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8012b70:	d10c      	bne.n	8012b8c <rshift+0x3c>
 8012b72:	f100 0710 	add.w	r7, r0, #16
 8012b76:	4629      	mov	r1, r5
 8012b78:	42b1      	cmp	r1, r6
 8012b7a:	d334      	bcc.n	8012be6 <rshift+0x96>
 8012b7c:	1a9b      	subs	r3, r3, r2
 8012b7e:	009b      	lsls	r3, r3, #2
 8012b80:	1eea      	subs	r2, r5, #3
 8012b82:	4296      	cmp	r6, r2
 8012b84:	bf38      	it	cc
 8012b86:	2300      	movcc	r3, #0
 8012b88:	4423      	add	r3, r4
 8012b8a:	e015      	b.n	8012bb8 <rshift+0x68>
 8012b8c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8012b90:	f1c1 0820 	rsb	r8, r1, #32
 8012b94:	40cf      	lsrs	r7, r1
 8012b96:	f105 0e04 	add.w	lr, r5, #4
 8012b9a:	46a1      	mov	r9, r4
 8012b9c:	4576      	cmp	r6, lr
 8012b9e:	46f4      	mov	ip, lr
 8012ba0:	d815      	bhi.n	8012bce <rshift+0x7e>
 8012ba2:	1a9a      	subs	r2, r3, r2
 8012ba4:	0092      	lsls	r2, r2, #2
 8012ba6:	3a04      	subs	r2, #4
 8012ba8:	3501      	adds	r5, #1
 8012baa:	42ae      	cmp	r6, r5
 8012bac:	bf38      	it	cc
 8012bae:	2200      	movcc	r2, #0
 8012bb0:	18a3      	adds	r3, r4, r2
 8012bb2:	50a7      	str	r7, [r4, r2]
 8012bb4:	b107      	cbz	r7, 8012bb8 <rshift+0x68>
 8012bb6:	3304      	adds	r3, #4
 8012bb8:	1b1a      	subs	r2, r3, r4
 8012bba:	42a3      	cmp	r3, r4
 8012bbc:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8012bc0:	bf08      	it	eq
 8012bc2:	2300      	moveq	r3, #0
 8012bc4:	6102      	str	r2, [r0, #16]
 8012bc6:	bf08      	it	eq
 8012bc8:	6143      	streq	r3, [r0, #20]
 8012bca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012bce:	f8dc c000 	ldr.w	ip, [ip]
 8012bd2:	fa0c fc08 	lsl.w	ip, ip, r8
 8012bd6:	ea4c 0707 	orr.w	r7, ip, r7
 8012bda:	f849 7b04 	str.w	r7, [r9], #4
 8012bde:	f85e 7b04 	ldr.w	r7, [lr], #4
 8012be2:	40cf      	lsrs	r7, r1
 8012be4:	e7da      	b.n	8012b9c <rshift+0x4c>
 8012be6:	f851 cb04 	ldr.w	ip, [r1], #4
 8012bea:	f847 cf04 	str.w	ip, [r7, #4]!
 8012bee:	e7c3      	b.n	8012b78 <rshift+0x28>
 8012bf0:	4623      	mov	r3, r4
 8012bf2:	e7e1      	b.n	8012bb8 <rshift+0x68>

08012bf4 <__hexdig_fun>:
 8012bf4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8012bf8:	2b09      	cmp	r3, #9
 8012bfa:	d802      	bhi.n	8012c02 <__hexdig_fun+0xe>
 8012bfc:	3820      	subs	r0, #32
 8012bfe:	b2c0      	uxtb	r0, r0
 8012c00:	4770      	bx	lr
 8012c02:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8012c06:	2b05      	cmp	r3, #5
 8012c08:	d801      	bhi.n	8012c0e <__hexdig_fun+0x1a>
 8012c0a:	3847      	subs	r0, #71	; 0x47
 8012c0c:	e7f7      	b.n	8012bfe <__hexdig_fun+0xa>
 8012c0e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8012c12:	2b05      	cmp	r3, #5
 8012c14:	d801      	bhi.n	8012c1a <__hexdig_fun+0x26>
 8012c16:	3827      	subs	r0, #39	; 0x27
 8012c18:	e7f1      	b.n	8012bfe <__hexdig_fun+0xa>
 8012c1a:	2000      	movs	r0, #0
 8012c1c:	4770      	bx	lr
	...

08012c20 <__gethex>:
 8012c20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c24:	ed2d 8b02 	vpush	{d8}
 8012c28:	b089      	sub	sp, #36	; 0x24
 8012c2a:	ee08 0a10 	vmov	s16, r0
 8012c2e:	9304      	str	r3, [sp, #16]
 8012c30:	4bb4      	ldr	r3, [pc, #720]	; (8012f04 <__gethex+0x2e4>)
 8012c32:	681b      	ldr	r3, [r3, #0]
 8012c34:	9301      	str	r3, [sp, #4]
 8012c36:	4618      	mov	r0, r3
 8012c38:	468b      	mov	fp, r1
 8012c3a:	4690      	mov	r8, r2
 8012c3c:	f7ed faf2 	bl	8000224 <strlen>
 8012c40:	9b01      	ldr	r3, [sp, #4]
 8012c42:	f8db 2000 	ldr.w	r2, [fp]
 8012c46:	4403      	add	r3, r0
 8012c48:	4682      	mov	sl, r0
 8012c4a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8012c4e:	9305      	str	r3, [sp, #20]
 8012c50:	1c93      	adds	r3, r2, #2
 8012c52:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8012c56:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8012c5a:	32fe      	adds	r2, #254	; 0xfe
 8012c5c:	18d1      	adds	r1, r2, r3
 8012c5e:	461f      	mov	r7, r3
 8012c60:	f813 0b01 	ldrb.w	r0, [r3], #1
 8012c64:	9100      	str	r1, [sp, #0]
 8012c66:	2830      	cmp	r0, #48	; 0x30
 8012c68:	d0f8      	beq.n	8012c5c <__gethex+0x3c>
 8012c6a:	f7ff ffc3 	bl	8012bf4 <__hexdig_fun>
 8012c6e:	4604      	mov	r4, r0
 8012c70:	2800      	cmp	r0, #0
 8012c72:	d13a      	bne.n	8012cea <__gethex+0xca>
 8012c74:	9901      	ldr	r1, [sp, #4]
 8012c76:	4652      	mov	r2, sl
 8012c78:	4638      	mov	r0, r7
 8012c7a:	f001 fefd 	bl	8014a78 <strncmp>
 8012c7e:	4605      	mov	r5, r0
 8012c80:	2800      	cmp	r0, #0
 8012c82:	d168      	bne.n	8012d56 <__gethex+0x136>
 8012c84:	f817 000a 	ldrb.w	r0, [r7, sl]
 8012c88:	eb07 060a 	add.w	r6, r7, sl
 8012c8c:	f7ff ffb2 	bl	8012bf4 <__hexdig_fun>
 8012c90:	2800      	cmp	r0, #0
 8012c92:	d062      	beq.n	8012d5a <__gethex+0x13a>
 8012c94:	4633      	mov	r3, r6
 8012c96:	7818      	ldrb	r0, [r3, #0]
 8012c98:	2830      	cmp	r0, #48	; 0x30
 8012c9a:	461f      	mov	r7, r3
 8012c9c:	f103 0301 	add.w	r3, r3, #1
 8012ca0:	d0f9      	beq.n	8012c96 <__gethex+0x76>
 8012ca2:	f7ff ffa7 	bl	8012bf4 <__hexdig_fun>
 8012ca6:	2301      	movs	r3, #1
 8012ca8:	fab0 f480 	clz	r4, r0
 8012cac:	0964      	lsrs	r4, r4, #5
 8012cae:	4635      	mov	r5, r6
 8012cb0:	9300      	str	r3, [sp, #0]
 8012cb2:	463a      	mov	r2, r7
 8012cb4:	4616      	mov	r6, r2
 8012cb6:	3201      	adds	r2, #1
 8012cb8:	7830      	ldrb	r0, [r6, #0]
 8012cba:	f7ff ff9b 	bl	8012bf4 <__hexdig_fun>
 8012cbe:	2800      	cmp	r0, #0
 8012cc0:	d1f8      	bne.n	8012cb4 <__gethex+0x94>
 8012cc2:	9901      	ldr	r1, [sp, #4]
 8012cc4:	4652      	mov	r2, sl
 8012cc6:	4630      	mov	r0, r6
 8012cc8:	f001 fed6 	bl	8014a78 <strncmp>
 8012ccc:	b980      	cbnz	r0, 8012cf0 <__gethex+0xd0>
 8012cce:	b94d      	cbnz	r5, 8012ce4 <__gethex+0xc4>
 8012cd0:	eb06 050a 	add.w	r5, r6, sl
 8012cd4:	462a      	mov	r2, r5
 8012cd6:	4616      	mov	r6, r2
 8012cd8:	3201      	adds	r2, #1
 8012cda:	7830      	ldrb	r0, [r6, #0]
 8012cdc:	f7ff ff8a 	bl	8012bf4 <__hexdig_fun>
 8012ce0:	2800      	cmp	r0, #0
 8012ce2:	d1f8      	bne.n	8012cd6 <__gethex+0xb6>
 8012ce4:	1bad      	subs	r5, r5, r6
 8012ce6:	00ad      	lsls	r5, r5, #2
 8012ce8:	e004      	b.n	8012cf4 <__gethex+0xd4>
 8012cea:	2400      	movs	r4, #0
 8012cec:	4625      	mov	r5, r4
 8012cee:	e7e0      	b.n	8012cb2 <__gethex+0x92>
 8012cf0:	2d00      	cmp	r5, #0
 8012cf2:	d1f7      	bne.n	8012ce4 <__gethex+0xc4>
 8012cf4:	7833      	ldrb	r3, [r6, #0]
 8012cf6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8012cfa:	2b50      	cmp	r3, #80	; 0x50
 8012cfc:	d13b      	bne.n	8012d76 <__gethex+0x156>
 8012cfe:	7873      	ldrb	r3, [r6, #1]
 8012d00:	2b2b      	cmp	r3, #43	; 0x2b
 8012d02:	d02c      	beq.n	8012d5e <__gethex+0x13e>
 8012d04:	2b2d      	cmp	r3, #45	; 0x2d
 8012d06:	d02e      	beq.n	8012d66 <__gethex+0x146>
 8012d08:	1c71      	adds	r1, r6, #1
 8012d0a:	f04f 0900 	mov.w	r9, #0
 8012d0e:	7808      	ldrb	r0, [r1, #0]
 8012d10:	f7ff ff70 	bl	8012bf4 <__hexdig_fun>
 8012d14:	1e43      	subs	r3, r0, #1
 8012d16:	b2db      	uxtb	r3, r3
 8012d18:	2b18      	cmp	r3, #24
 8012d1a:	d82c      	bhi.n	8012d76 <__gethex+0x156>
 8012d1c:	f1a0 0210 	sub.w	r2, r0, #16
 8012d20:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8012d24:	f7ff ff66 	bl	8012bf4 <__hexdig_fun>
 8012d28:	1e43      	subs	r3, r0, #1
 8012d2a:	b2db      	uxtb	r3, r3
 8012d2c:	2b18      	cmp	r3, #24
 8012d2e:	d91d      	bls.n	8012d6c <__gethex+0x14c>
 8012d30:	f1b9 0f00 	cmp.w	r9, #0
 8012d34:	d000      	beq.n	8012d38 <__gethex+0x118>
 8012d36:	4252      	negs	r2, r2
 8012d38:	4415      	add	r5, r2
 8012d3a:	f8cb 1000 	str.w	r1, [fp]
 8012d3e:	b1e4      	cbz	r4, 8012d7a <__gethex+0x15a>
 8012d40:	9b00      	ldr	r3, [sp, #0]
 8012d42:	2b00      	cmp	r3, #0
 8012d44:	bf14      	ite	ne
 8012d46:	2700      	movne	r7, #0
 8012d48:	2706      	moveq	r7, #6
 8012d4a:	4638      	mov	r0, r7
 8012d4c:	b009      	add	sp, #36	; 0x24
 8012d4e:	ecbd 8b02 	vpop	{d8}
 8012d52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d56:	463e      	mov	r6, r7
 8012d58:	4625      	mov	r5, r4
 8012d5a:	2401      	movs	r4, #1
 8012d5c:	e7ca      	b.n	8012cf4 <__gethex+0xd4>
 8012d5e:	f04f 0900 	mov.w	r9, #0
 8012d62:	1cb1      	adds	r1, r6, #2
 8012d64:	e7d3      	b.n	8012d0e <__gethex+0xee>
 8012d66:	f04f 0901 	mov.w	r9, #1
 8012d6a:	e7fa      	b.n	8012d62 <__gethex+0x142>
 8012d6c:	230a      	movs	r3, #10
 8012d6e:	fb03 0202 	mla	r2, r3, r2, r0
 8012d72:	3a10      	subs	r2, #16
 8012d74:	e7d4      	b.n	8012d20 <__gethex+0x100>
 8012d76:	4631      	mov	r1, r6
 8012d78:	e7df      	b.n	8012d3a <__gethex+0x11a>
 8012d7a:	1bf3      	subs	r3, r6, r7
 8012d7c:	3b01      	subs	r3, #1
 8012d7e:	4621      	mov	r1, r4
 8012d80:	2b07      	cmp	r3, #7
 8012d82:	dc0b      	bgt.n	8012d9c <__gethex+0x17c>
 8012d84:	ee18 0a10 	vmov	r0, s16
 8012d88:	f000 fa82 	bl	8013290 <_Balloc>
 8012d8c:	4604      	mov	r4, r0
 8012d8e:	b940      	cbnz	r0, 8012da2 <__gethex+0x182>
 8012d90:	4b5d      	ldr	r3, [pc, #372]	; (8012f08 <__gethex+0x2e8>)
 8012d92:	4602      	mov	r2, r0
 8012d94:	21de      	movs	r1, #222	; 0xde
 8012d96:	485d      	ldr	r0, [pc, #372]	; (8012f0c <__gethex+0x2ec>)
 8012d98:	f7ff f820 	bl	8011ddc <__assert_func>
 8012d9c:	3101      	adds	r1, #1
 8012d9e:	105b      	asrs	r3, r3, #1
 8012da0:	e7ee      	b.n	8012d80 <__gethex+0x160>
 8012da2:	f100 0914 	add.w	r9, r0, #20
 8012da6:	f04f 0b00 	mov.w	fp, #0
 8012daa:	f1ca 0301 	rsb	r3, sl, #1
 8012dae:	f8cd 9008 	str.w	r9, [sp, #8]
 8012db2:	f8cd b000 	str.w	fp, [sp]
 8012db6:	9306      	str	r3, [sp, #24]
 8012db8:	42b7      	cmp	r7, r6
 8012dba:	d340      	bcc.n	8012e3e <__gethex+0x21e>
 8012dbc:	9802      	ldr	r0, [sp, #8]
 8012dbe:	9b00      	ldr	r3, [sp, #0]
 8012dc0:	f840 3b04 	str.w	r3, [r0], #4
 8012dc4:	eba0 0009 	sub.w	r0, r0, r9
 8012dc8:	1080      	asrs	r0, r0, #2
 8012dca:	0146      	lsls	r6, r0, #5
 8012dcc:	6120      	str	r0, [r4, #16]
 8012dce:	4618      	mov	r0, r3
 8012dd0:	f000 fb50 	bl	8013474 <__hi0bits>
 8012dd4:	1a30      	subs	r0, r6, r0
 8012dd6:	f8d8 6000 	ldr.w	r6, [r8]
 8012dda:	42b0      	cmp	r0, r6
 8012ddc:	dd63      	ble.n	8012ea6 <__gethex+0x286>
 8012dde:	1b87      	subs	r7, r0, r6
 8012de0:	4639      	mov	r1, r7
 8012de2:	4620      	mov	r0, r4
 8012de4:	f000 fef4 	bl	8013bd0 <__any_on>
 8012de8:	4682      	mov	sl, r0
 8012dea:	b1a8      	cbz	r0, 8012e18 <__gethex+0x1f8>
 8012dec:	1e7b      	subs	r3, r7, #1
 8012dee:	1159      	asrs	r1, r3, #5
 8012df0:	f003 021f 	and.w	r2, r3, #31
 8012df4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8012df8:	f04f 0a01 	mov.w	sl, #1
 8012dfc:	fa0a f202 	lsl.w	r2, sl, r2
 8012e00:	420a      	tst	r2, r1
 8012e02:	d009      	beq.n	8012e18 <__gethex+0x1f8>
 8012e04:	4553      	cmp	r3, sl
 8012e06:	dd05      	ble.n	8012e14 <__gethex+0x1f4>
 8012e08:	1eb9      	subs	r1, r7, #2
 8012e0a:	4620      	mov	r0, r4
 8012e0c:	f000 fee0 	bl	8013bd0 <__any_on>
 8012e10:	2800      	cmp	r0, #0
 8012e12:	d145      	bne.n	8012ea0 <__gethex+0x280>
 8012e14:	f04f 0a02 	mov.w	sl, #2
 8012e18:	4639      	mov	r1, r7
 8012e1a:	4620      	mov	r0, r4
 8012e1c:	f7ff fe98 	bl	8012b50 <rshift>
 8012e20:	443d      	add	r5, r7
 8012e22:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8012e26:	42ab      	cmp	r3, r5
 8012e28:	da4c      	bge.n	8012ec4 <__gethex+0x2a4>
 8012e2a:	ee18 0a10 	vmov	r0, s16
 8012e2e:	4621      	mov	r1, r4
 8012e30:	f000 fa6e 	bl	8013310 <_Bfree>
 8012e34:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8012e36:	2300      	movs	r3, #0
 8012e38:	6013      	str	r3, [r2, #0]
 8012e3a:	27a3      	movs	r7, #163	; 0xa3
 8012e3c:	e785      	b.n	8012d4a <__gethex+0x12a>
 8012e3e:	1e73      	subs	r3, r6, #1
 8012e40:	9a05      	ldr	r2, [sp, #20]
 8012e42:	9303      	str	r3, [sp, #12]
 8012e44:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8012e48:	4293      	cmp	r3, r2
 8012e4a:	d019      	beq.n	8012e80 <__gethex+0x260>
 8012e4c:	f1bb 0f20 	cmp.w	fp, #32
 8012e50:	d107      	bne.n	8012e62 <__gethex+0x242>
 8012e52:	9b02      	ldr	r3, [sp, #8]
 8012e54:	9a00      	ldr	r2, [sp, #0]
 8012e56:	f843 2b04 	str.w	r2, [r3], #4
 8012e5a:	9302      	str	r3, [sp, #8]
 8012e5c:	2300      	movs	r3, #0
 8012e5e:	9300      	str	r3, [sp, #0]
 8012e60:	469b      	mov	fp, r3
 8012e62:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8012e66:	f7ff fec5 	bl	8012bf4 <__hexdig_fun>
 8012e6a:	9b00      	ldr	r3, [sp, #0]
 8012e6c:	f000 000f 	and.w	r0, r0, #15
 8012e70:	fa00 f00b 	lsl.w	r0, r0, fp
 8012e74:	4303      	orrs	r3, r0
 8012e76:	9300      	str	r3, [sp, #0]
 8012e78:	f10b 0b04 	add.w	fp, fp, #4
 8012e7c:	9b03      	ldr	r3, [sp, #12]
 8012e7e:	e00d      	b.n	8012e9c <__gethex+0x27c>
 8012e80:	9b03      	ldr	r3, [sp, #12]
 8012e82:	9a06      	ldr	r2, [sp, #24]
 8012e84:	4413      	add	r3, r2
 8012e86:	42bb      	cmp	r3, r7
 8012e88:	d3e0      	bcc.n	8012e4c <__gethex+0x22c>
 8012e8a:	4618      	mov	r0, r3
 8012e8c:	9901      	ldr	r1, [sp, #4]
 8012e8e:	9307      	str	r3, [sp, #28]
 8012e90:	4652      	mov	r2, sl
 8012e92:	f001 fdf1 	bl	8014a78 <strncmp>
 8012e96:	9b07      	ldr	r3, [sp, #28]
 8012e98:	2800      	cmp	r0, #0
 8012e9a:	d1d7      	bne.n	8012e4c <__gethex+0x22c>
 8012e9c:	461e      	mov	r6, r3
 8012e9e:	e78b      	b.n	8012db8 <__gethex+0x198>
 8012ea0:	f04f 0a03 	mov.w	sl, #3
 8012ea4:	e7b8      	b.n	8012e18 <__gethex+0x1f8>
 8012ea6:	da0a      	bge.n	8012ebe <__gethex+0x29e>
 8012ea8:	1a37      	subs	r7, r6, r0
 8012eaa:	4621      	mov	r1, r4
 8012eac:	ee18 0a10 	vmov	r0, s16
 8012eb0:	463a      	mov	r2, r7
 8012eb2:	f000 fc49 	bl	8013748 <__lshift>
 8012eb6:	1bed      	subs	r5, r5, r7
 8012eb8:	4604      	mov	r4, r0
 8012eba:	f100 0914 	add.w	r9, r0, #20
 8012ebe:	f04f 0a00 	mov.w	sl, #0
 8012ec2:	e7ae      	b.n	8012e22 <__gethex+0x202>
 8012ec4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8012ec8:	42a8      	cmp	r0, r5
 8012eca:	dd72      	ble.n	8012fb2 <__gethex+0x392>
 8012ecc:	1b45      	subs	r5, r0, r5
 8012ece:	42ae      	cmp	r6, r5
 8012ed0:	dc36      	bgt.n	8012f40 <__gethex+0x320>
 8012ed2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8012ed6:	2b02      	cmp	r3, #2
 8012ed8:	d02a      	beq.n	8012f30 <__gethex+0x310>
 8012eda:	2b03      	cmp	r3, #3
 8012edc:	d02c      	beq.n	8012f38 <__gethex+0x318>
 8012ede:	2b01      	cmp	r3, #1
 8012ee0:	d11c      	bne.n	8012f1c <__gethex+0x2fc>
 8012ee2:	42ae      	cmp	r6, r5
 8012ee4:	d11a      	bne.n	8012f1c <__gethex+0x2fc>
 8012ee6:	2e01      	cmp	r6, #1
 8012ee8:	d112      	bne.n	8012f10 <__gethex+0x2f0>
 8012eea:	9a04      	ldr	r2, [sp, #16]
 8012eec:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8012ef0:	6013      	str	r3, [r2, #0]
 8012ef2:	2301      	movs	r3, #1
 8012ef4:	6123      	str	r3, [r4, #16]
 8012ef6:	f8c9 3000 	str.w	r3, [r9]
 8012efa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012efc:	2762      	movs	r7, #98	; 0x62
 8012efe:	601c      	str	r4, [r3, #0]
 8012f00:	e723      	b.n	8012d4a <__gethex+0x12a>
 8012f02:	bf00      	nop
 8012f04:	08016c08 	.word	0x08016c08
 8012f08:	08016b91 	.word	0x08016b91
 8012f0c:	08016ba2 	.word	0x08016ba2
 8012f10:	1e71      	subs	r1, r6, #1
 8012f12:	4620      	mov	r0, r4
 8012f14:	f000 fe5c 	bl	8013bd0 <__any_on>
 8012f18:	2800      	cmp	r0, #0
 8012f1a:	d1e6      	bne.n	8012eea <__gethex+0x2ca>
 8012f1c:	ee18 0a10 	vmov	r0, s16
 8012f20:	4621      	mov	r1, r4
 8012f22:	f000 f9f5 	bl	8013310 <_Bfree>
 8012f26:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8012f28:	2300      	movs	r3, #0
 8012f2a:	6013      	str	r3, [r2, #0]
 8012f2c:	2750      	movs	r7, #80	; 0x50
 8012f2e:	e70c      	b.n	8012d4a <__gethex+0x12a>
 8012f30:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012f32:	2b00      	cmp	r3, #0
 8012f34:	d1f2      	bne.n	8012f1c <__gethex+0x2fc>
 8012f36:	e7d8      	b.n	8012eea <__gethex+0x2ca>
 8012f38:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012f3a:	2b00      	cmp	r3, #0
 8012f3c:	d1d5      	bne.n	8012eea <__gethex+0x2ca>
 8012f3e:	e7ed      	b.n	8012f1c <__gethex+0x2fc>
 8012f40:	1e6f      	subs	r7, r5, #1
 8012f42:	f1ba 0f00 	cmp.w	sl, #0
 8012f46:	d131      	bne.n	8012fac <__gethex+0x38c>
 8012f48:	b127      	cbz	r7, 8012f54 <__gethex+0x334>
 8012f4a:	4639      	mov	r1, r7
 8012f4c:	4620      	mov	r0, r4
 8012f4e:	f000 fe3f 	bl	8013bd0 <__any_on>
 8012f52:	4682      	mov	sl, r0
 8012f54:	117b      	asrs	r3, r7, #5
 8012f56:	2101      	movs	r1, #1
 8012f58:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8012f5c:	f007 071f 	and.w	r7, r7, #31
 8012f60:	fa01 f707 	lsl.w	r7, r1, r7
 8012f64:	421f      	tst	r7, r3
 8012f66:	4629      	mov	r1, r5
 8012f68:	4620      	mov	r0, r4
 8012f6a:	bf18      	it	ne
 8012f6c:	f04a 0a02 	orrne.w	sl, sl, #2
 8012f70:	1b76      	subs	r6, r6, r5
 8012f72:	f7ff fded 	bl	8012b50 <rshift>
 8012f76:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8012f7a:	2702      	movs	r7, #2
 8012f7c:	f1ba 0f00 	cmp.w	sl, #0
 8012f80:	d048      	beq.n	8013014 <__gethex+0x3f4>
 8012f82:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8012f86:	2b02      	cmp	r3, #2
 8012f88:	d015      	beq.n	8012fb6 <__gethex+0x396>
 8012f8a:	2b03      	cmp	r3, #3
 8012f8c:	d017      	beq.n	8012fbe <__gethex+0x39e>
 8012f8e:	2b01      	cmp	r3, #1
 8012f90:	d109      	bne.n	8012fa6 <__gethex+0x386>
 8012f92:	f01a 0f02 	tst.w	sl, #2
 8012f96:	d006      	beq.n	8012fa6 <__gethex+0x386>
 8012f98:	f8d9 0000 	ldr.w	r0, [r9]
 8012f9c:	ea4a 0a00 	orr.w	sl, sl, r0
 8012fa0:	f01a 0f01 	tst.w	sl, #1
 8012fa4:	d10e      	bne.n	8012fc4 <__gethex+0x3a4>
 8012fa6:	f047 0710 	orr.w	r7, r7, #16
 8012faa:	e033      	b.n	8013014 <__gethex+0x3f4>
 8012fac:	f04f 0a01 	mov.w	sl, #1
 8012fb0:	e7d0      	b.n	8012f54 <__gethex+0x334>
 8012fb2:	2701      	movs	r7, #1
 8012fb4:	e7e2      	b.n	8012f7c <__gethex+0x35c>
 8012fb6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012fb8:	f1c3 0301 	rsb	r3, r3, #1
 8012fbc:	9315      	str	r3, [sp, #84]	; 0x54
 8012fbe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012fc0:	2b00      	cmp	r3, #0
 8012fc2:	d0f0      	beq.n	8012fa6 <__gethex+0x386>
 8012fc4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8012fc8:	f104 0314 	add.w	r3, r4, #20
 8012fcc:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8012fd0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8012fd4:	f04f 0c00 	mov.w	ip, #0
 8012fd8:	4618      	mov	r0, r3
 8012fda:	f853 2b04 	ldr.w	r2, [r3], #4
 8012fde:	f1b2 3fff 	cmp.w	r2, #4294967295
 8012fe2:	d01c      	beq.n	801301e <__gethex+0x3fe>
 8012fe4:	3201      	adds	r2, #1
 8012fe6:	6002      	str	r2, [r0, #0]
 8012fe8:	2f02      	cmp	r7, #2
 8012fea:	f104 0314 	add.w	r3, r4, #20
 8012fee:	d13f      	bne.n	8013070 <__gethex+0x450>
 8012ff0:	f8d8 2000 	ldr.w	r2, [r8]
 8012ff4:	3a01      	subs	r2, #1
 8012ff6:	42b2      	cmp	r2, r6
 8012ff8:	d10a      	bne.n	8013010 <__gethex+0x3f0>
 8012ffa:	1171      	asrs	r1, r6, #5
 8012ffc:	2201      	movs	r2, #1
 8012ffe:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8013002:	f006 061f 	and.w	r6, r6, #31
 8013006:	fa02 f606 	lsl.w	r6, r2, r6
 801300a:	421e      	tst	r6, r3
 801300c:	bf18      	it	ne
 801300e:	4617      	movne	r7, r2
 8013010:	f047 0720 	orr.w	r7, r7, #32
 8013014:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8013016:	601c      	str	r4, [r3, #0]
 8013018:	9b04      	ldr	r3, [sp, #16]
 801301a:	601d      	str	r5, [r3, #0]
 801301c:	e695      	b.n	8012d4a <__gethex+0x12a>
 801301e:	4299      	cmp	r1, r3
 8013020:	f843 cc04 	str.w	ip, [r3, #-4]
 8013024:	d8d8      	bhi.n	8012fd8 <__gethex+0x3b8>
 8013026:	68a3      	ldr	r3, [r4, #8]
 8013028:	459b      	cmp	fp, r3
 801302a:	db19      	blt.n	8013060 <__gethex+0x440>
 801302c:	6861      	ldr	r1, [r4, #4]
 801302e:	ee18 0a10 	vmov	r0, s16
 8013032:	3101      	adds	r1, #1
 8013034:	f000 f92c 	bl	8013290 <_Balloc>
 8013038:	4681      	mov	r9, r0
 801303a:	b918      	cbnz	r0, 8013044 <__gethex+0x424>
 801303c:	4b1a      	ldr	r3, [pc, #104]	; (80130a8 <__gethex+0x488>)
 801303e:	4602      	mov	r2, r0
 8013040:	2184      	movs	r1, #132	; 0x84
 8013042:	e6a8      	b.n	8012d96 <__gethex+0x176>
 8013044:	6922      	ldr	r2, [r4, #16]
 8013046:	3202      	adds	r2, #2
 8013048:	f104 010c 	add.w	r1, r4, #12
 801304c:	0092      	lsls	r2, r2, #2
 801304e:	300c      	adds	r0, #12
 8013050:	f7fd f878 	bl	8010144 <memcpy>
 8013054:	4621      	mov	r1, r4
 8013056:	ee18 0a10 	vmov	r0, s16
 801305a:	f000 f959 	bl	8013310 <_Bfree>
 801305e:	464c      	mov	r4, r9
 8013060:	6923      	ldr	r3, [r4, #16]
 8013062:	1c5a      	adds	r2, r3, #1
 8013064:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8013068:	6122      	str	r2, [r4, #16]
 801306a:	2201      	movs	r2, #1
 801306c:	615a      	str	r2, [r3, #20]
 801306e:	e7bb      	b.n	8012fe8 <__gethex+0x3c8>
 8013070:	6922      	ldr	r2, [r4, #16]
 8013072:	455a      	cmp	r2, fp
 8013074:	dd0b      	ble.n	801308e <__gethex+0x46e>
 8013076:	2101      	movs	r1, #1
 8013078:	4620      	mov	r0, r4
 801307a:	f7ff fd69 	bl	8012b50 <rshift>
 801307e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8013082:	3501      	adds	r5, #1
 8013084:	42ab      	cmp	r3, r5
 8013086:	f6ff aed0 	blt.w	8012e2a <__gethex+0x20a>
 801308a:	2701      	movs	r7, #1
 801308c:	e7c0      	b.n	8013010 <__gethex+0x3f0>
 801308e:	f016 061f 	ands.w	r6, r6, #31
 8013092:	d0fa      	beq.n	801308a <__gethex+0x46a>
 8013094:	4453      	add	r3, sl
 8013096:	f1c6 0620 	rsb	r6, r6, #32
 801309a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801309e:	f000 f9e9 	bl	8013474 <__hi0bits>
 80130a2:	42b0      	cmp	r0, r6
 80130a4:	dbe7      	blt.n	8013076 <__gethex+0x456>
 80130a6:	e7f0      	b.n	801308a <__gethex+0x46a>
 80130a8:	08016b91 	.word	0x08016b91

080130ac <L_shift>:
 80130ac:	f1c2 0208 	rsb	r2, r2, #8
 80130b0:	0092      	lsls	r2, r2, #2
 80130b2:	b570      	push	{r4, r5, r6, lr}
 80130b4:	f1c2 0620 	rsb	r6, r2, #32
 80130b8:	6843      	ldr	r3, [r0, #4]
 80130ba:	6804      	ldr	r4, [r0, #0]
 80130bc:	fa03 f506 	lsl.w	r5, r3, r6
 80130c0:	432c      	orrs	r4, r5
 80130c2:	40d3      	lsrs	r3, r2
 80130c4:	6004      	str	r4, [r0, #0]
 80130c6:	f840 3f04 	str.w	r3, [r0, #4]!
 80130ca:	4288      	cmp	r0, r1
 80130cc:	d3f4      	bcc.n	80130b8 <L_shift+0xc>
 80130ce:	bd70      	pop	{r4, r5, r6, pc}

080130d0 <__match>:
 80130d0:	b530      	push	{r4, r5, lr}
 80130d2:	6803      	ldr	r3, [r0, #0]
 80130d4:	3301      	adds	r3, #1
 80130d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80130da:	b914      	cbnz	r4, 80130e2 <__match+0x12>
 80130dc:	6003      	str	r3, [r0, #0]
 80130de:	2001      	movs	r0, #1
 80130e0:	bd30      	pop	{r4, r5, pc}
 80130e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80130e6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80130ea:	2d19      	cmp	r5, #25
 80130ec:	bf98      	it	ls
 80130ee:	3220      	addls	r2, #32
 80130f0:	42a2      	cmp	r2, r4
 80130f2:	d0f0      	beq.n	80130d6 <__match+0x6>
 80130f4:	2000      	movs	r0, #0
 80130f6:	e7f3      	b.n	80130e0 <__match+0x10>

080130f8 <__hexnan>:
 80130f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80130fc:	680b      	ldr	r3, [r1, #0]
 80130fe:	115e      	asrs	r6, r3, #5
 8013100:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8013104:	f013 031f 	ands.w	r3, r3, #31
 8013108:	b087      	sub	sp, #28
 801310a:	bf18      	it	ne
 801310c:	3604      	addne	r6, #4
 801310e:	2500      	movs	r5, #0
 8013110:	1f37      	subs	r7, r6, #4
 8013112:	4690      	mov	r8, r2
 8013114:	6802      	ldr	r2, [r0, #0]
 8013116:	9301      	str	r3, [sp, #4]
 8013118:	4682      	mov	sl, r0
 801311a:	f846 5c04 	str.w	r5, [r6, #-4]
 801311e:	46b9      	mov	r9, r7
 8013120:	463c      	mov	r4, r7
 8013122:	9502      	str	r5, [sp, #8]
 8013124:	46ab      	mov	fp, r5
 8013126:	7851      	ldrb	r1, [r2, #1]
 8013128:	1c53      	adds	r3, r2, #1
 801312a:	9303      	str	r3, [sp, #12]
 801312c:	b341      	cbz	r1, 8013180 <__hexnan+0x88>
 801312e:	4608      	mov	r0, r1
 8013130:	9205      	str	r2, [sp, #20]
 8013132:	9104      	str	r1, [sp, #16]
 8013134:	f7ff fd5e 	bl	8012bf4 <__hexdig_fun>
 8013138:	2800      	cmp	r0, #0
 801313a:	d14f      	bne.n	80131dc <__hexnan+0xe4>
 801313c:	9904      	ldr	r1, [sp, #16]
 801313e:	9a05      	ldr	r2, [sp, #20]
 8013140:	2920      	cmp	r1, #32
 8013142:	d818      	bhi.n	8013176 <__hexnan+0x7e>
 8013144:	9b02      	ldr	r3, [sp, #8]
 8013146:	459b      	cmp	fp, r3
 8013148:	dd13      	ble.n	8013172 <__hexnan+0x7a>
 801314a:	454c      	cmp	r4, r9
 801314c:	d206      	bcs.n	801315c <__hexnan+0x64>
 801314e:	2d07      	cmp	r5, #7
 8013150:	dc04      	bgt.n	801315c <__hexnan+0x64>
 8013152:	462a      	mov	r2, r5
 8013154:	4649      	mov	r1, r9
 8013156:	4620      	mov	r0, r4
 8013158:	f7ff ffa8 	bl	80130ac <L_shift>
 801315c:	4544      	cmp	r4, r8
 801315e:	d950      	bls.n	8013202 <__hexnan+0x10a>
 8013160:	2300      	movs	r3, #0
 8013162:	f1a4 0904 	sub.w	r9, r4, #4
 8013166:	f844 3c04 	str.w	r3, [r4, #-4]
 801316a:	f8cd b008 	str.w	fp, [sp, #8]
 801316e:	464c      	mov	r4, r9
 8013170:	461d      	mov	r5, r3
 8013172:	9a03      	ldr	r2, [sp, #12]
 8013174:	e7d7      	b.n	8013126 <__hexnan+0x2e>
 8013176:	2929      	cmp	r1, #41	; 0x29
 8013178:	d156      	bne.n	8013228 <__hexnan+0x130>
 801317a:	3202      	adds	r2, #2
 801317c:	f8ca 2000 	str.w	r2, [sl]
 8013180:	f1bb 0f00 	cmp.w	fp, #0
 8013184:	d050      	beq.n	8013228 <__hexnan+0x130>
 8013186:	454c      	cmp	r4, r9
 8013188:	d206      	bcs.n	8013198 <__hexnan+0xa0>
 801318a:	2d07      	cmp	r5, #7
 801318c:	dc04      	bgt.n	8013198 <__hexnan+0xa0>
 801318e:	462a      	mov	r2, r5
 8013190:	4649      	mov	r1, r9
 8013192:	4620      	mov	r0, r4
 8013194:	f7ff ff8a 	bl	80130ac <L_shift>
 8013198:	4544      	cmp	r4, r8
 801319a:	d934      	bls.n	8013206 <__hexnan+0x10e>
 801319c:	f1a8 0204 	sub.w	r2, r8, #4
 80131a0:	4623      	mov	r3, r4
 80131a2:	f853 1b04 	ldr.w	r1, [r3], #4
 80131a6:	f842 1f04 	str.w	r1, [r2, #4]!
 80131aa:	429f      	cmp	r7, r3
 80131ac:	d2f9      	bcs.n	80131a2 <__hexnan+0xaa>
 80131ae:	1b3b      	subs	r3, r7, r4
 80131b0:	f023 0303 	bic.w	r3, r3, #3
 80131b4:	3304      	adds	r3, #4
 80131b6:	3401      	adds	r4, #1
 80131b8:	3e03      	subs	r6, #3
 80131ba:	42b4      	cmp	r4, r6
 80131bc:	bf88      	it	hi
 80131be:	2304      	movhi	r3, #4
 80131c0:	4443      	add	r3, r8
 80131c2:	2200      	movs	r2, #0
 80131c4:	f843 2b04 	str.w	r2, [r3], #4
 80131c8:	429f      	cmp	r7, r3
 80131ca:	d2fb      	bcs.n	80131c4 <__hexnan+0xcc>
 80131cc:	683b      	ldr	r3, [r7, #0]
 80131ce:	b91b      	cbnz	r3, 80131d8 <__hexnan+0xe0>
 80131d0:	4547      	cmp	r7, r8
 80131d2:	d127      	bne.n	8013224 <__hexnan+0x12c>
 80131d4:	2301      	movs	r3, #1
 80131d6:	603b      	str	r3, [r7, #0]
 80131d8:	2005      	movs	r0, #5
 80131da:	e026      	b.n	801322a <__hexnan+0x132>
 80131dc:	3501      	adds	r5, #1
 80131de:	2d08      	cmp	r5, #8
 80131e0:	f10b 0b01 	add.w	fp, fp, #1
 80131e4:	dd06      	ble.n	80131f4 <__hexnan+0xfc>
 80131e6:	4544      	cmp	r4, r8
 80131e8:	d9c3      	bls.n	8013172 <__hexnan+0x7a>
 80131ea:	2300      	movs	r3, #0
 80131ec:	f844 3c04 	str.w	r3, [r4, #-4]
 80131f0:	2501      	movs	r5, #1
 80131f2:	3c04      	subs	r4, #4
 80131f4:	6822      	ldr	r2, [r4, #0]
 80131f6:	f000 000f 	and.w	r0, r0, #15
 80131fa:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80131fe:	6022      	str	r2, [r4, #0]
 8013200:	e7b7      	b.n	8013172 <__hexnan+0x7a>
 8013202:	2508      	movs	r5, #8
 8013204:	e7b5      	b.n	8013172 <__hexnan+0x7a>
 8013206:	9b01      	ldr	r3, [sp, #4]
 8013208:	2b00      	cmp	r3, #0
 801320a:	d0df      	beq.n	80131cc <__hexnan+0xd4>
 801320c:	f04f 32ff 	mov.w	r2, #4294967295
 8013210:	f1c3 0320 	rsb	r3, r3, #32
 8013214:	fa22 f303 	lsr.w	r3, r2, r3
 8013218:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801321c:	401a      	ands	r2, r3
 801321e:	f846 2c04 	str.w	r2, [r6, #-4]
 8013222:	e7d3      	b.n	80131cc <__hexnan+0xd4>
 8013224:	3f04      	subs	r7, #4
 8013226:	e7d1      	b.n	80131cc <__hexnan+0xd4>
 8013228:	2004      	movs	r0, #4
 801322a:	b007      	add	sp, #28
 801322c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013230 <_localeconv_r>:
 8013230:	4800      	ldr	r0, [pc, #0]	; (8013234 <_localeconv_r+0x4>)
 8013232:	4770      	bx	lr
 8013234:	200004e4 	.word	0x200004e4

08013238 <_lseek_r>:
 8013238:	b538      	push	{r3, r4, r5, lr}
 801323a:	4d07      	ldr	r5, [pc, #28]	; (8013258 <_lseek_r+0x20>)
 801323c:	4604      	mov	r4, r0
 801323e:	4608      	mov	r0, r1
 8013240:	4611      	mov	r1, r2
 8013242:	2200      	movs	r2, #0
 8013244:	602a      	str	r2, [r5, #0]
 8013246:	461a      	mov	r2, r3
 8013248:	f7ef fe96 	bl	8002f78 <_lseek>
 801324c:	1c43      	adds	r3, r0, #1
 801324e:	d102      	bne.n	8013256 <_lseek_r+0x1e>
 8013250:	682b      	ldr	r3, [r5, #0]
 8013252:	b103      	cbz	r3, 8013256 <_lseek_r+0x1e>
 8013254:	6023      	str	r3, [r4, #0]
 8013256:	bd38      	pop	{r3, r4, r5, pc}
 8013258:	2000a194 	.word	0x2000a194

0801325c <malloc>:
 801325c:	4b02      	ldr	r3, [pc, #8]	; (8013268 <malloc+0xc>)
 801325e:	4601      	mov	r1, r0
 8013260:	6818      	ldr	r0, [r3, #0]
 8013262:	f000 bd59 	b.w	8013d18 <_malloc_r>
 8013266:	bf00      	nop
 8013268:	2000038c 	.word	0x2000038c

0801326c <__ascii_mbtowc>:
 801326c:	b082      	sub	sp, #8
 801326e:	b901      	cbnz	r1, 8013272 <__ascii_mbtowc+0x6>
 8013270:	a901      	add	r1, sp, #4
 8013272:	b142      	cbz	r2, 8013286 <__ascii_mbtowc+0x1a>
 8013274:	b14b      	cbz	r3, 801328a <__ascii_mbtowc+0x1e>
 8013276:	7813      	ldrb	r3, [r2, #0]
 8013278:	600b      	str	r3, [r1, #0]
 801327a:	7812      	ldrb	r2, [r2, #0]
 801327c:	1e10      	subs	r0, r2, #0
 801327e:	bf18      	it	ne
 8013280:	2001      	movne	r0, #1
 8013282:	b002      	add	sp, #8
 8013284:	4770      	bx	lr
 8013286:	4610      	mov	r0, r2
 8013288:	e7fb      	b.n	8013282 <__ascii_mbtowc+0x16>
 801328a:	f06f 0001 	mvn.w	r0, #1
 801328e:	e7f8      	b.n	8013282 <__ascii_mbtowc+0x16>

08013290 <_Balloc>:
 8013290:	b570      	push	{r4, r5, r6, lr}
 8013292:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8013294:	4604      	mov	r4, r0
 8013296:	460d      	mov	r5, r1
 8013298:	b976      	cbnz	r6, 80132b8 <_Balloc+0x28>
 801329a:	2010      	movs	r0, #16
 801329c:	f7ff ffde 	bl	801325c <malloc>
 80132a0:	4602      	mov	r2, r0
 80132a2:	6260      	str	r0, [r4, #36]	; 0x24
 80132a4:	b920      	cbnz	r0, 80132b0 <_Balloc+0x20>
 80132a6:	4b18      	ldr	r3, [pc, #96]	; (8013308 <_Balloc+0x78>)
 80132a8:	4818      	ldr	r0, [pc, #96]	; (801330c <_Balloc+0x7c>)
 80132aa:	2166      	movs	r1, #102	; 0x66
 80132ac:	f7fe fd96 	bl	8011ddc <__assert_func>
 80132b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80132b4:	6006      	str	r6, [r0, #0]
 80132b6:	60c6      	str	r6, [r0, #12]
 80132b8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80132ba:	68f3      	ldr	r3, [r6, #12]
 80132bc:	b183      	cbz	r3, 80132e0 <_Balloc+0x50>
 80132be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80132c0:	68db      	ldr	r3, [r3, #12]
 80132c2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80132c6:	b9b8      	cbnz	r0, 80132f8 <_Balloc+0x68>
 80132c8:	2101      	movs	r1, #1
 80132ca:	fa01 f605 	lsl.w	r6, r1, r5
 80132ce:	1d72      	adds	r2, r6, #5
 80132d0:	0092      	lsls	r2, r2, #2
 80132d2:	4620      	mov	r0, r4
 80132d4:	f000 fc9d 	bl	8013c12 <_calloc_r>
 80132d8:	b160      	cbz	r0, 80132f4 <_Balloc+0x64>
 80132da:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80132de:	e00e      	b.n	80132fe <_Balloc+0x6e>
 80132e0:	2221      	movs	r2, #33	; 0x21
 80132e2:	2104      	movs	r1, #4
 80132e4:	4620      	mov	r0, r4
 80132e6:	f000 fc94 	bl	8013c12 <_calloc_r>
 80132ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80132ec:	60f0      	str	r0, [r6, #12]
 80132ee:	68db      	ldr	r3, [r3, #12]
 80132f0:	2b00      	cmp	r3, #0
 80132f2:	d1e4      	bne.n	80132be <_Balloc+0x2e>
 80132f4:	2000      	movs	r0, #0
 80132f6:	bd70      	pop	{r4, r5, r6, pc}
 80132f8:	6802      	ldr	r2, [r0, #0]
 80132fa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80132fe:	2300      	movs	r3, #0
 8013300:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8013304:	e7f7      	b.n	80132f6 <_Balloc+0x66>
 8013306:	bf00      	nop
 8013308:	08016978 	.word	0x08016978
 801330c:	08016c1c 	.word	0x08016c1c

08013310 <_Bfree>:
 8013310:	b570      	push	{r4, r5, r6, lr}
 8013312:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8013314:	4605      	mov	r5, r0
 8013316:	460c      	mov	r4, r1
 8013318:	b976      	cbnz	r6, 8013338 <_Bfree+0x28>
 801331a:	2010      	movs	r0, #16
 801331c:	f7ff ff9e 	bl	801325c <malloc>
 8013320:	4602      	mov	r2, r0
 8013322:	6268      	str	r0, [r5, #36]	; 0x24
 8013324:	b920      	cbnz	r0, 8013330 <_Bfree+0x20>
 8013326:	4b09      	ldr	r3, [pc, #36]	; (801334c <_Bfree+0x3c>)
 8013328:	4809      	ldr	r0, [pc, #36]	; (8013350 <_Bfree+0x40>)
 801332a:	218a      	movs	r1, #138	; 0x8a
 801332c:	f7fe fd56 	bl	8011ddc <__assert_func>
 8013330:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013334:	6006      	str	r6, [r0, #0]
 8013336:	60c6      	str	r6, [r0, #12]
 8013338:	b13c      	cbz	r4, 801334a <_Bfree+0x3a>
 801333a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801333c:	6862      	ldr	r2, [r4, #4]
 801333e:	68db      	ldr	r3, [r3, #12]
 8013340:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013344:	6021      	str	r1, [r4, #0]
 8013346:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801334a:	bd70      	pop	{r4, r5, r6, pc}
 801334c:	08016978 	.word	0x08016978
 8013350:	08016c1c 	.word	0x08016c1c

08013354 <__multadd>:
 8013354:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013358:	690d      	ldr	r5, [r1, #16]
 801335a:	4607      	mov	r7, r0
 801335c:	460c      	mov	r4, r1
 801335e:	461e      	mov	r6, r3
 8013360:	f101 0c14 	add.w	ip, r1, #20
 8013364:	2000      	movs	r0, #0
 8013366:	f8dc 3000 	ldr.w	r3, [ip]
 801336a:	b299      	uxth	r1, r3
 801336c:	fb02 6101 	mla	r1, r2, r1, r6
 8013370:	0c1e      	lsrs	r6, r3, #16
 8013372:	0c0b      	lsrs	r3, r1, #16
 8013374:	fb02 3306 	mla	r3, r2, r6, r3
 8013378:	b289      	uxth	r1, r1
 801337a:	3001      	adds	r0, #1
 801337c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8013380:	4285      	cmp	r5, r0
 8013382:	f84c 1b04 	str.w	r1, [ip], #4
 8013386:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801338a:	dcec      	bgt.n	8013366 <__multadd+0x12>
 801338c:	b30e      	cbz	r6, 80133d2 <__multadd+0x7e>
 801338e:	68a3      	ldr	r3, [r4, #8]
 8013390:	42ab      	cmp	r3, r5
 8013392:	dc19      	bgt.n	80133c8 <__multadd+0x74>
 8013394:	6861      	ldr	r1, [r4, #4]
 8013396:	4638      	mov	r0, r7
 8013398:	3101      	adds	r1, #1
 801339a:	f7ff ff79 	bl	8013290 <_Balloc>
 801339e:	4680      	mov	r8, r0
 80133a0:	b928      	cbnz	r0, 80133ae <__multadd+0x5a>
 80133a2:	4602      	mov	r2, r0
 80133a4:	4b0c      	ldr	r3, [pc, #48]	; (80133d8 <__multadd+0x84>)
 80133a6:	480d      	ldr	r0, [pc, #52]	; (80133dc <__multadd+0x88>)
 80133a8:	21b5      	movs	r1, #181	; 0xb5
 80133aa:	f7fe fd17 	bl	8011ddc <__assert_func>
 80133ae:	6922      	ldr	r2, [r4, #16]
 80133b0:	3202      	adds	r2, #2
 80133b2:	f104 010c 	add.w	r1, r4, #12
 80133b6:	0092      	lsls	r2, r2, #2
 80133b8:	300c      	adds	r0, #12
 80133ba:	f7fc fec3 	bl	8010144 <memcpy>
 80133be:	4621      	mov	r1, r4
 80133c0:	4638      	mov	r0, r7
 80133c2:	f7ff ffa5 	bl	8013310 <_Bfree>
 80133c6:	4644      	mov	r4, r8
 80133c8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80133cc:	3501      	adds	r5, #1
 80133ce:	615e      	str	r6, [r3, #20]
 80133d0:	6125      	str	r5, [r4, #16]
 80133d2:	4620      	mov	r0, r4
 80133d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80133d8:	08016b91 	.word	0x08016b91
 80133dc:	08016c1c 	.word	0x08016c1c

080133e0 <__s2b>:
 80133e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80133e4:	460c      	mov	r4, r1
 80133e6:	4615      	mov	r5, r2
 80133e8:	461f      	mov	r7, r3
 80133ea:	2209      	movs	r2, #9
 80133ec:	3308      	adds	r3, #8
 80133ee:	4606      	mov	r6, r0
 80133f0:	fb93 f3f2 	sdiv	r3, r3, r2
 80133f4:	2100      	movs	r1, #0
 80133f6:	2201      	movs	r2, #1
 80133f8:	429a      	cmp	r2, r3
 80133fa:	db09      	blt.n	8013410 <__s2b+0x30>
 80133fc:	4630      	mov	r0, r6
 80133fe:	f7ff ff47 	bl	8013290 <_Balloc>
 8013402:	b940      	cbnz	r0, 8013416 <__s2b+0x36>
 8013404:	4602      	mov	r2, r0
 8013406:	4b19      	ldr	r3, [pc, #100]	; (801346c <__s2b+0x8c>)
 8013408:	4819      	ldr	r0, [pc, #100]	; (8013470 <__s2b+0x90>)
 801340a:	21ce      	movs	r1, #206	; 0xce
 801340c:	f7fe fce6 	bl	8011ddc <__assert_func>
 8013410:	0052      	lsls	r2, r2, #1
 8013412:	3101      	adds	r1, #1
 8013414:	e7f0      	b.n	80133f8 <__s2b+0x18>
 8013416:	9b08      	ldr	r3, [sp, #32]
 8013418:	6143      	str	r3, [r0, #20]
 801341a:	2d09      	cmp	r5, #9
 801341c:	f04f 0301 	mov.w	r3, #1
 8013420:	6103      	str	r3, [r0, #16]
 8013422:	dd16      	ble.n	8013452 <__s2b+0x72>
 8013424:	f104 0909 	add.w	r9, r4, #9
 8013428:	46c8      	mov	r8, r9
 801342a:	442c      	add	r4, r5
 801342c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8013430:	4601      	mov	r1, r0
 8013432:	3b30      	subs	r3, #48	; 0x30
 8013434:	220a      	movs	r2, #10
 8013436:	4630      	mov	r0, r6
 8013438:	f7ff ff8c 	bl	8013354 <__multadd>
 801343c:	45a0      	cmp	r8, r4
 801343e:	d1f5      	bne.n	801342c <__s2b+0x4c>
 8013440:	f1a5 0408 	sub.w	r4, r5, #8
 8013444:	444c      	add	r4, r9
 8013446:	1b2d      	subs	r5, r5, r4
 8013448:	1963      	adds	r3, r4, r5
 801344a:	42bb      	cmp	r3, r7
 801344c:	db04      	blt.n	8013458 <__s2b+0x78>
 801344e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013452:	340a      	adds	r4, #10
 8013454:	2509      	movs	r5, #9
 8013456:	e7f6      	b.n	8013446 <__s2b+0x66>
 8013458:	f814 3b01 	ldrb.w	r3, [r4], #1
 801345c:	4601      	mov	r1, r0
 801345e:	3b30      	subs	r3, #48	; 0x30
 8013460:	220a      	movs	r2, #10
 8013462:	4630      	mov	r0, r6
 8013464:	f7ff ff76 	bl	8013354 <__multadd>
 8013468:	e7ee      	b.n	8013448 <__s2b+0x68>
 801346a:	bf00      	nop
 801346c:	08016b91 	.word	0x08016b91
 8013470:	08016c1c 	.word	0x08016c1c

08013474 <__hi0bits>:
 8013474:	0c03      	lsrs	r3, r0, #16
 8013476:	041b      	lsls	r3, r3, #16
 8013478:	b9d3      	cbnz	r3, 80134b0 <__hi0bits+0x3c>
 801347a:	0400      	lsls	r0, r0, #16
 801347c:	2310      	movs	r3, #16
 801347e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8013482:	bf04      	itt	eq
 8013484:	0200      	lsleq	r0, r0, #8
 8013486:	3308      	addeq	r3, #8
 8013488:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801348c:	bf04      	itt	eq
 801348e:	0100      	lsleq	r0, r0, #4
 8013490:	3304      	addeq	r3, #4
 8013492:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8013496:	bf04      	itt	eq
 8013498:	0080      	lsleq	r0, r0, #2
 801349a:	3302      	addeq	r3, #2
 801349c:	2800      	cmp	r0, #0
 801349e:	db05      	blt.n	80134ac <__hi0bits+0x38>
 80134a0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80134a4:	f103 0301 	add.w	r3, r3, #1
 80134a8:	bf08      	it	eq
 80134aa:	2320      	moveq	r3, #32
 80134ac:	4618      	mov	r0, r3
 80134ae:	4770      	bx	lr
 80134b0:	2300      	movs	r3, #0
 80134b2:	e7e4      	b.n	801347e <__hi0bits+0xa>

080134b4 <__lo0bits>:
 80134b4:	6803      	ldr	r3, [r0, #0]
 80134b6:	f013 0207 	ands.w	r2, r3, #7
 80134ba:	4601      	mov	r1, r0
 80134bc:	d00b      	beq.n	80134d6 <__lo0bits+0x22>
 80134be:	07da      	lsls	r2, r3, #31
 80134c0:	d423      	bmi.n	801350a <__lo0bits+0x56>
 80134c2:	0798      	lsls	r0, r3, #30
 80134c4:	bf49      	itett	mi
 80134c6:	085b      	lsrmi	r3, r3, #1
 80134c8:	089b      	lsrpl	r3, r3, #2
 80134ca:	2001      	movmi	r0, #1
 80134cc:	600b      	strmi	r3, [r1, #0]
 80134ce:	bf5c      	itt	pl
 80134d0:	600b      	strpl	r3, [r1, #0]
 80134d2:	2002      	movpl	r0, #2
 80134d4:	4770      	bx	lr
 80134d6:	b298      	uxth	r0, r3
 80134d8:	b9a8      	cbnz	r0, 8013506 <__lo0bits+0x52>
 80134da:	0c1b      	lsrs	r3, r3, #16
 80134dc:	2010      	movs	r0, #16
 80134de:	b2da      	uxtb	r2, r3
 80134e0:	b90a      	cbnz	r2, 80134e6 <__lo0bits+0x32>
 80134e2:	3008      	adds	r0, #8
 80134e4:	0a1b      	lsrs	r3, r3, #8
 80134e6:	071a      	lsls	r2, r3, #28
 80134e8:	bf04      	itt	eq
 80134ea:	091b      	lsreq	r3, r3, #4
 80134ec:	3004      	addeq	r0, #4
 80134ee:	079a      	lsls	r2, r3, #30
 80134f0:	bf04      	itt	eq
 80134f2:	089b      	lsreq	r3, r3, #2
 80134f4:	3002      	addeq	r0, #2
 80134f6:	07da      	lsls	r2, r3, #31
 80134f8:	d403      	bmi.n	8013502 <__lo0bits+0x4e>
 80134fa:	085b      	lsrs	r3, r3, #1
 80134fc:	f100 0001 	add.w	r0, r0, #1
 8013500:	d005      	beq.n	801350e <__lo0bits+0x5a>
 8013502:	600b      	str	r3, [r1, #0]
 8013504:	4770      	bx	lr
 8013506:	4610      	mov	r0, r2
 8013508:	e7e9      	b.n	80134de <__lo0bits+0x2a>
 801350a:	2000      	movs	r0, #0
 801350c:	4770      	bx	lr
 801350e:	2020      	movs	r0, #32
 8013510:	4770      	bx	lr
	...

08013514 <__i2b>:
 8013514:	b510      	push	{r4, lr}
 8013516:	460c      	mov	r4, r1
 8013518:	2101      	movs	r1, #1
 801351a:	f7ff feb9 	bl	8013290 <_Balloc>
 801351e:	4602      	mov	r2, r0
 8013520:	b928      	cbnz	r0, 801352e <__i2b+0x1a>
 8013522:	4b05      	ldr	r3, [pc, #20]	; (8013538 <__i2b+0x24>)
 8013524:	4805      	ldr	r0, [pc, #20]	; (801353c <__i2b+0x28>)
 8013526:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801352a:	f7fe fc57 	bl	8011ddc <__assert_func>
 801352e:	2301      	movs	r3, #1
 8013530:	6144      	str	r4, [r0, #20]
 8013532:	6103      	str	r3, [r0, #16]
 8013534:	bd10      	pop	{r4, pc}
 8013536:	bf00      	nop
 8013538:	08016b91 	.word	0x08016b91
 801353c:	08016c1c 	.word	0x08016c1c

08013540 <__multiply>:
 8013540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013544:	4691      	mov	r9, r2
 8013546:	690a      	ldr	r2, [r1, #16]
 8013548:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801354c:	429a      	cmp	r2, r3
 801354e:	bfb8      	it	lt
 8013550:	460b      	movlt	r3, r1
 8013552:	460c      	mov	r4, r1
 8013554:	bfbc      	itt	lt
 8013556:	464c      	movlt	r4, r9
 8013558:	4699      	movlt	r9, r3
 801355a:	6927      	ldr	r7, [r4, #16]
 801355c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8013560:	68a3      	ldr	r3, [r4, #8]
 8013562:	6861      	ldr	r1, [r4, #4]
 8013564:	eb07 060a 	add.w	r6, r7, sl
 8013568:	42b3      	cmp	r3, r6
 801356a:	b085      	sub	sp, #20
 801356c:	bfb8      	it	lt
 801356e:	3101      	addlt	r1, #1
 8013570:	f7ff fe8e 	bl	8013290 <_Balloc>
 8013574:	b930      	cbnz	r0, 8013584 <__multiply+0x44>
 8013576:	4602      	mov	r2, r0
 8013578:	4b44      	ldr	r3, [pc, #272]	; (801368c <__multiply+0x14c>)
 801357a:	4845      	ldr	r0, [pc, #276]	; (8013690 <__multiply+0x150>)
 801357c:	f240 115d 	movw	r1, #349	; 0x15d
 8013580:	f7fe fc2c 	bl	8011ddc <__assert_func>
 8013584:	f100 0514 	add.w	r5, r0, #20
 8013588:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801358c:	462b      	mov	r3, r5
 801358e:	2200      	movs	r2, #0
 8013590:	4543      	cmp	r3, r8
 8013592:	d321      	bcc.n	80135d8 <__multiply+0x98>
 8013594:	f104 0314 	add.w	r3, r4, #20
 8013598:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801359c:	f109 0314 	add.w	r3, r9, #20
 80135a0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80135a4:	9202      	str	r2, [sp, #8]
 80135a6:	1b3a      	subs	r2, r7, r4
 80135a8:	3a15      	subs	r2, #21
 80135aa:	f022 0203 	bic.w	r2, r2, #3
 80135ae:	3204      	adds	r2, #4
 80135b0:	f104 0115 	add.w	r1, r4, #21
 80135b4:	428f      	cmp	r7, r1
 80135b6:	bf38      	it	cc
 80135b8:	2204      	movcc	r2, #4
 80135ba:	9201      	str	r2, [sp, #4]
 80135bc:	9a02      	ldr	r2, [sp, #8]
 80135be:	9303      	str	r3, [sp, #12]
 80135c0:	429a      	cmp	r2, r3
 80135c2:	d80c      	bhi.n	80135de <__multiply+0x9e>
 80135c4:	2e00      	cmp	r6, #0
 80135c6:	dd03      	ble.n	80135d0 <__multiply+0x90>
 80135c8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80135cc:	2b00      	cmp	r3, #0
 80135ce:	d05a      	beq.n	8013686 <__multiply+0x146>
 80135d0:	6106      	str	r6, [r0, #16]
 80135d2:	b005      	add	sp, #20
 80135d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80135d8:	f843 2b04 	str.w	r2, [r3], #4
 80135dc:	e7d8      	b.n	8013590 <__multiply+0x50>
 80135de:	f8b3 a000 	ldrh.w	sl, [r3]
 80135e2:	f1ba 0f00 	cmp.w	sl, #0
 80135e6:	d024      	beq.n	8013632 <__multiply+0xf2>
 80135e8:	f104 0e14 	add.w	lr, r4, #20
 80135ec:	46a9      	mov	r9, r5
 80135ee:	f04f 0c00 	mov.w	ip, #0
 80135f2:	f85e 2b04 	ldr.w	r2, [lr], #4
 80135f6:	f8d9 1000 	ldr.w	r1, [r9]
 80135fa:	fa1f fb82 	uxth.w	fp, r2
 80135fe:	b289      	uxth	r1, r1
 8013600:	fb0a 110b 	mla	r1, sl, fp, r1
 8013604:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8013608:	f8d9 2000 	ldr.w	r2, [r9]
 801360c:	4461      	add	r1, ip
 801360e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8013612:	fb0a c20b 	mla	r2, sl, fp, ip
 8013616:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801361a:	b289      	uxth	r1, r1
 801361c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8013620:	4577      	cmp	r7, lr
 8013622:	f849 1b04 	str.w	r1, [r9], #4
 8013626:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801362a:	d8e2      	bhi.n	80135f2 <__multiply+0xb2>
 801362c:	9a01      	ldr	r2, [sp, #4]
 801362e:	f845 c002 	str.w	ip, [r5, r2]
 8013632:	9a03      	ldr	r2, [sp, #12]
 8013634:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8013638:	3304      	adds	r3, #4
 801363a:	f1b9 0f00 	cmp.w	r9, #0
 801363e:	d020      	beq.n	8013682 <__multiply+0x142>
 8013640:	6829      	ldr	r1, [r5, #0]
 8013642:	f104 0c14 	add.w	ip, r4, #20
 8013646:	46ae      	mov	lr, r5
 8013648:	f04f 0a00 	mov.w	sl, #0
 801364c:	f8bc b000 	ldrh.w	fp, [ip]
 8013650:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8013654:	fb09 220b 	mla	r2, r9, fp, r2
 8013658:	4492      	add	sl, r2
 801365a:	b289      	uxth	r1, r1
 801365c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8013660:	f84e 1b04 	str.w	r1, [lr], #4
 8013664:	f85c 2b04 	ldr.w	r2, [ip], #4
 8013668:	f8be 1000 	ldrh.w	r1, [lr]
 801366c:	0c12      	lsrs	r2, r2, #16
 801366e:	fb09 1102 	mla	r1, r9, r2, r1
 8013672:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8013676:	4567      	cmp	r7, ip
 8013678:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801367c:	d8e6      	bhi.n	801364c <__multiply+0x10c>
 801367e:	9a01      	ldr	r2, [sp, #4]
 8013680:	50a9      	str	r1, [r5, r2]
 8013682:	3504      	adds	r5, #4
 8013684:	e79a      	b.n	80135bc <__multiply+0x7c>
 8013686:	3e01      	subs	r6, #1
 8013688:	e79c      	b.n	80135c4 <__multiply+0x84>
 801368a:	bf00      	nop
 801368c:	08016b91 	.word	0x08016b91
 8013690:	08016c1c 	.word	0x08016c1c

08013694 <__pow5mult>:
 8013694:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013698:	4615      	mov	r5, r2
 801369a:	f012 0203 	ands.w	r2, r2, #3
 801369e:	4606      	mov	r6, r0
 80136a0:	460f      	mov	r7, r1
 80136a2:	d007      	beq.n	80136b4 <__pow5mult+0x20>
 80136a4:	4c25      	ldr	r4, [pc, #148]	; (801373c <__pow5mult+0xa8>)
 80136a6:	3a01      	subs	r2, #1
 80136a8:	2300      	movs	r3, #0
 80136aa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80136ae:	f7ff fe51 	bl	8013354 <__multadd>
 80136b2:	4607      	mov	r7, r0
 80136b4:	10ad      	asrs	r5, r5, #2
 80136b6:	d03d      	beq.n	8013734 <__pow5mult+0xa0>
 80136b8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80136ba:	b97c      	cbnz	r4, 80136dc <__pow5mult+0x48>
 80136bc:	2010      	movs	r0, #16
 80136be:	f7ff fdcd 	bl	801325c <malloc>
 80136c2:	4602      	mov	r2, r0
 80136c4:	6270      	str	r0, [r6, #36]	; 0x24
 80136c6:	b928      	cbnz	r0, 80136d4 <__pow5mult+0x40>
 80136c8:	4b1d      	ldr	r3, [pc, #116]	; (8013740 <__pow5mult+0xac>)
 80136ca:	481e      	ldr	r0, [pc, #120]	; (8013744 <__pow5mult+0xb0>)
 80136cc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80136d0:	f7fe fb84 	bl	8011ddc <__assert_func>
 80136d4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80136d8:	6004      	str	r4, [r0, #0]
 80136da:	60c4      	str	r4, [r0, #12]
 80136dc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80136e0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80136e4:	b94c      	cbnz	r4, 80136fa <__pow5mult+0x66>
 80136e6:	f240 2171 	movw	r1, #625	; 0x271
 80136ea:	4630      	mov	r0, r6
 80136ec:	f7ff ff12 	bl	8013514 <__i2b>
 80136f0:	2300      	movs	r3, #0
 80136f2:	f8c8 0008 	str.w	r0, [r8, #8]
 80136f6:	4604      	mov	r4, r0
 80136f8:	6003      	str	r3, [r0, #0]
 80136fa:	f04f 0900 	mov.w	r9, #0
 80136fe:	07eb      	lsls	r3, r5, #31
 8013700:	d50a      	bpl.n	8013718 <__pow5mult+0x84>
 8013702:	4639      	mov	r1, r7
 8013704:	4622      	mov	r2, r4
 8013706:	4630      	mov	r0, r6
 8013708:	f7ff ff1a 	bl	8013540 <__multiply>
 801370c:	4639      	mov	r1, r7
 801370e:	4680      	mov	r8, r0
 8013710:	4630      	mov	r0, r6
 8013712:	f7ff fdfd 	bl	8013310 <_Bfree>
 8013716:	4647      	mov	r7, r8
 8013718:	106d      	asrs	r5, r5, #1
 801371a:	d00b      	beq.n	8013734 <__pow5mult+0xa0>
 801371c:	6820      	ldr	r0, [r4, #0]
 801371e:	b938      	cbnz	r0, 8013730 <__pow5mult+0x9c>
 8013720:	4622      	mov	r2, r4
 8013722:	4621      	mov	r1, r4
 8013724:	4630      	mov	r0, r6
 8013726:	f7ff ff0b 	bl	8013540 <__multiply>
 801372a:	6020      	str	r0, [r4, #0]
 801372c:	f8c0 9000 	str.w	r9, [r0]
 8013730:	4604      	mov	r4, r0
 8013732:	e7e4      	b.n	80136fe <__pow5mult+0x6a>
 8013734:	4638      	mov	r0, r7
 8013736:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801373a:	bf00      	nop
 801373c:	08016d68 	.word	0x08016d68
 8013740:	08016978 	.word	0x08016978
 8013744:	08016c1c 	.word	0x08016c1c

08013748 <__lshift>:
 8013748:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801374c:	460c      	mov	r4, r1
 801374e:	6849      	ldr	r1, [r1, #4]
 8013750:	6923      	ldr	r3, [r4, #16]
 8013752:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8013756:	68a3      	ldr	r3, [r4, #8]
 8013758:	4607      	mov	r7, r0
 801375a:	4691      	mov	r9, r2
 801375c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8013760:	f108 0601 	add.w	r6, r8, #1
 8013764:	42b3      	cmp	r3, r6
 8013766:	db0b      	blt.n	8013780 <__lshift+0x38>
 8013768:	4638      	mov	r0, r7
 801376a:	f7ff fd91 	bl	8013290 <_Balloc>
 801376e:	4605      	mov	r5, r0
 8013770:	b948      	cbnz	r0, 8013786 <__lshift+0x3e>
 8013772:	4602      	mov	r2, r0
 8013774:	4b2a      	ldr	r3, [pc, #168]	; (8013820 <__lshift+0xd8>)
 8013776:	482b      	ldr	r0, [pc, #172]	; (8013824 <__lshift+0xdc>)
 8013778:	f240 11d9 	movw	r1, #473	; 0x1d9
 801377c:	f7fe fb2e 	bl	8011ddc <__assert_func>
 8013780:	3101      	adds	r1, #1
 8013782:	005b      	lsls	r3, r3, #1
 8013784:	e7ee      	b.n	8013764 <__lshift+0x1c>
 8013786:	2300      	movs	r3, #0
 8013788:	f100 0114 	add.w	r1, r0, #20
 801378c:	f100 0210 	add.w	r2, r0, #16
 8013790:	4618      	mov	r0, r3
 8013792:	4553      	cmp	r3, sl
 8013794:	db37      	blt.n	8013806 <__lshift+0xbe>
 8013796:	6920      	ldr	r0, [r4, #16]
 8013798:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801379c:	f104 0314 	add.w	r3, r4, #20
 80137a0:	f019 091f 	ands.w	r9, r9, #31
 80137a4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80137a8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80137ac:	d02f      	beq.n	801380e <__lshift+0xc6>
 80137ae:	f1c9 0e20 	rsb	lr, r9, #32
 80137b2:	468a      	mov	sl, r1
 80137b4:	f04f 0c00 	mov.w	ip, #0
 80137b8:	681a      	ldr	r2, [r3, #0]
 80137ba:	fa02 f209 	lsl.w	r2, r2, r9
 80137be:	ea42 020c 	orr.w	r2, r2, ip
 80137c2:	f84a 2b04 	str.w	r2, [sl], #4
 80137c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80137ca:	4298      	cmp	r0, r3
 80137cc:	fa22 fc0e 	lsr.w	ip, r2, lr
 80137d0:	d8f2      	bhi.n	80137b8 <__lshift+0x70>
 80137d2:	1b03      	subs	r3, r0, r4
 80137d4:	3b15      	subs	r3, #21
 80137d6:	f023 0303 	bic.w	r3, r3, #3
 80137da:	3304      	adds	r3, #4
 80137dc:	f104 0215 	add.w	r2, r4, #21
 80137e0:	4290      	cmp	r0, r2
 80137e2:	bf38      	it	cc
 80137e4:	2304      	movcc	r3, #4
 80137e6:	f841 c003 	str.w	ip, [r1, r3]
 80137ea:	f1bc 0f00 	cmp.w	ip, #0
 80137ee:	d001      	beq.n	80137f4 <__lshift+0xac>
 80137f0:	f108 0602 	add.w	r6, r8, #2
 80137f4:	3e01      	subs	r6, #1
 80137f6:	4638      	mov	r0, r7
 80137f8:	612e      	str	r6, [r5, #16]
 80137fa:	4621      	mov	r1, r4
 80137fc:	f7ff fd88 	bl	8013310 <_Bfree>
 8013800:	4628      	mov	r0, r5
 8013802:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013806:	f842 0f04 	str.w	r0, [r2, #4]!
 801380a:	3301      	adds	r3, #1
 801380c:	e7c1      	b.n	8013792 <__lshift+0x4a>
 801380e:	3904      	subs	r1, #4
 8013810:	f853 2b04 	ldr.w	r2, [r3], #4
 8013814:	f841 2f04 	str.w	r2, [r1, #4]!
 8013818:	4298      	cmp	r0, r3
 801381a:	d8f9      	bhi.n	8013810 <__lshift+0xc8>
 801381c:	e7ea      	b.n	80137f4 <__lshift+0xac>
 801381e:	bf00      	nop
 8013820:	08016b91 	.word	0x08016b91
 8013824:	08016c1c 	.word	0x08016c1c

08013828 <__mcmp>:
 8013828:	b530      	push	{r4, r5, lr}
 801382a:	6902      	ldr	r2, [r0, #16]
 801382c:	690c      	ldr	r4, [r1, #16]
 801382e:	1b12      	subs	r2, r2, r4
 8013830:	d10e      	bne.n	8013850 <__mcmp+0x28>
 8013832:	f100 0314 	add.w	r3, r0, #20
 8013836:	3114      	adds	r1, #20
 8013838:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801383c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8013840:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8013844:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8013848:	42a5      	cmp	r5, r4
 801384a:	d003      	beq.n	8013854 <__mcmp+0x2c>
 801384c:	d305      	bcc.n	801385a <__mcmp+0x32>
 801384e:	2201      	movs	r2, #1
 8013850:	4610      	mov	r0, r2
 8013852:	bd30      	pop	{r4, r5, pc}
 8013854:	4283      	cmp	r3, r0
 8013856:	d3f3      	bcc.n	8013840 <__mcmp+0x18>
 8013858:	e7fa      	b.n	8013850 <__mcmp+0x28>
 801385a:	f04f 32ff 	mov.w	r2, #4294967295
 801385e:	e7f7      	b.n	8013850 <__mcmp+0x28>

08013860 <__mdiff>:
 8013860:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013864:	460c      	mov	r4, r1
 8013866:	4606      	mov	r6, r0
 8013868:	4611      	mov	r1, r2
 801386a:	4620      	mov	r0, r4
 801386c:	4690      	mov	r8, r2
 801386e:	f7ff ffdb 	bl	8013828 <__mcmp>
 8013872:	1e05      	subs	r5, r0, #0
 8013874:	d110      	bne.n	8013898 <__mdiff+0x38>
 8013876:	4629      	mov	r1, r5
 8013878:	4630      	mov	r0, r6
 801387a:	f7ff fd09 	bl	8013290 <_Balloc>
 801387e:	b930      	cbnz	r0, 801388e <__mdiff+0x2e>
 8013880:	4b3a      	ldr	r3, [pc, #232]	; (801396c <__mdiff+0x10c>)
 8013882:	4602      	mov	r2, r0
 8013884:	f240 2132 	movw	r1, #562	; 0x232
 8013888:	4839      	ldr	r0, [pc, #228]	; (8013970 <__mdiff+0x110>)
 801388a:	f7fe faa7 	bl	8011ddc <__assert_func>
 801388e:	2301      	movs	r3, #1
 8013890:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8013894:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013898:	bfa4      	itt	ge
 801389a:	4643      	movge	r3, r8
 801389c:	46a0      	movge	r8, r4
 801389e:	4630      	mov	r0, r6
 80138a0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80138a4:	bfa6      	itte	ge
 80138a6:	461c      	movge	r4, r3
 80138a8:	2500      	movge	r5, #0
 80138aa:	2501      	movlt	r5, #1
 80138ac:	f7ff fcf0 	bl	8013290 <_Balloc>
 80138b0:	b920      	cbnz	r0, 80138bc <__mdiff+0x5c>
 80138b2:	4b2e      	ldr	r3, [pc, #184]	; (801396c <__mdiff+0x10c>)
 80138b4:	4602      	mov	r2, r0
 80138b6:	f44f 7110 	mov.w	r1, #576	; 0x240
 80138ba:	e7e5      	b.n	8013888 <__mdiff+0x28>
 80138bc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80138c0:	6926      	ldr	r6, [r4, #16]
 80138c2:	60c5      	str	r5, [r0, #12]
 80138c4:	f104 0914 	add.w	r9, r4, #20
 80138c8:	f108 0514 	add.w	r5, r8, #20
 80138cc:	f100 0e14 	add.w	lr, r0, #20
 80138d0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80138d4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80138d8:	f108 0210 	add.w	r2, r8, #16
 80138dc:	46f2      	mov	sl, lr
 80138de:	2100      	movs	r1, #0
 80138e0:	f859 3b04 	ldr.w	r3, [r9], #4
 80138e4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80138e8:	fa1f f883 	uxth.w	r8, r3
 80138ec:	fa11 f18b 	uxtah	r1, r1, fp
 80138f0:	0c1b      	lsrs	r3, r3, #16
 80138f2:	eba1 0808 	sub.w	r8, r1, r8
 80138f6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80138fa:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80138fe:	fa1f f888 	uxth.w	r8, r8
 8013902:	1419      	asrs	r1, r3, #16
 8013904:	454e      	cmp	r6, r9
 8013906:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801390a:	f84a 3b04 	str.w	r3, [sl], #4
 801390e:	d8e7      	bhi.n	80138e0 <__mdiff+0x80>
 8013910:	1b33      	subs	r3, r6, r4
 8013912:	3b15      	subs	r3, #21
 8013914:	f023 0303 	bic.w	r3, r3, #3
 8013918:	3304      	adds	r3, #4
 801391a:	3415      	adds	r4, #21
 801391c:	42a6      	cmp	r6, r4
 801391e:	bf38      	it	cc
 8013920:	2304      	movcc	r3, #4
 8013922:	441d      	add	r5, r3
 8013924:	4473      	add	r3, lr
 8013926:	469e      	mov	lr, r3
 8013928:	462e      	mov	r6, r5
 801392a:	4566      	cmp	r6, ip
 801392c:	d30e      	bcc.n	801394c <__mdiff+0xec>
 801392e:	f10c 0203 	add.w	r2, ip, #3
 8013932:	1b52      	subs	r2, r2, r5
 8013934:	f022 0203 	bic.w	r2, r2, #3
 8013938:	3d03      	subs	r5, #3
 801393a:	45ac      	cmp	ip, r5
 801393c:	bf38      	it	cc
 801393e:	2200      	movcc	r2, #0
 8013940:	441a      	add	r2, r3
 8013942:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8013946:	b17b      	cbz	r3, 8013968 <__mdiff+0x108>
 8013948:	6107      	str	r7, [r0, #16]
 801394a:	e7a3      	b.n	8013894 <__mdiff+0x34>
 801394c:	f856 8b04 	ldr.w	r8, [r6], #4
 8013950:	fa11 f288 	uxtah	r2, r1, r8
 8013954:	1414      	asrs	r4, r2, #16
 8013956:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801395a:	b292      	uxth	r2, r2
 801395c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8013960:	f84e 2b04 	str.w	r2, [lr], #4
 8013964:	1421      	asrs	r1, r4, #16
 8013966:	e7e0      	b.n	801392a <__mdiff+0xca>
 8013968:	3f01      	subs	r7, #1
 801396a:	e7ea      	b.n	8013942 <__mdiff+0xe2>
 801396c:	08016b91 	.word	0x08016b91
 8013970:	08016c1c 	.word	0x08016c1c

08013974 <__ulp>:
 8013974:	b082      	sub	sp, #8
 8013976:	ed8d 0b00 	vstr	d0, [sp]
 801397a:	9b01      	ldr	r3, [sp, #4]
 801397c:	4912      	ldr	r1, [pc, #72]	; (80139c8 <__ulp+0x54>)
 801397e:	4019      	ands	r1, r3
 8013980:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8013984:	2900      	cmp	r1, #0
 8013986:	dd05      	ble.n	8013994 <__ulp+0x20>
 8013988:	2200      	movs	r2, #0
 801398a:	460b      	mov	r3, r1
 801398c:	ec43 2b10 	vmov	d0, r2, r3
 8013990:	b002      	add	sp, #8
 8013992:	4770      	bx	lr
 8013994:	4249      	negs	r1, r1
 8013996:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 801399a:	ea4f 5021 	mov.w	r0, r1, asr #20
 801399e:	f04f 0200 	mov.w	r2, #0
 80139a2:	f04f 0300 	mov.w	r3, #0
 80139a6:	da04      	bge.n	80139b2 <__ulp+0x3e>
 80139a8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80139ac:	fa41 f300 	asr.w	r3, r1, r0
 80139b0:	e7ec      	b.n	801398c <__ulp+0x18>
 80139b2:	f1a0 0114 	sub.w	r1, r0, #20
 80139b6:	291e      	cmp	r1, #30
 80139b8:	bfda      	itte	le
 80139ba:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 80139be:	fa20 f101 	lsrle.w	r1, r0, r1
 80139c2:	2101      	movgt	r1, #1
 80139c4:	460a      	mov	r2, r1
 80139c6:	e7e1      	b.n	801398c <__ulp+0x18>
 80139c8:	7ff00000 	.word	0x7ff00000

080139cc <__b2d>:
 80139cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80139ce:	6905      	ldr	r5, [r0, #16]
 80139d0:	f100 0714 	add.w	r7, r0, #20
 80139d4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80139d8:	1f2e      	subs	r6, r5, #4
 80139da:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80139de:	4620      	mov	r0, r4
 80139e0:	f7ff fd48 	bl	8013474 <__hi0bits>
 80139e4:	f1c0 0320 	rsb	r3, r0, #32
 80139e8:	280a      	cmp	r0, #10
 80139ea:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8013a68 <__b2d+0x9c>
 80139ee:	600b      	str	r3, [r1, #0]
 80139f0:	dc14      	bgt.n	8013a1c <__b2d+0x50>
 80139f2:	f1c0 0e0b 	rsb	lr, r0, #11
 80139f6:	fa24 f10e 	lsr.w	r1, r4, lr
 80139fa:	42b7      	cmp	r7, r6
 80139fc:	ea41 030c 	orr.w	r3, r1, ip
 8013a00:	bf34      	ite	cc
 8013a02:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8013a06:	2100      	movcs	r1, #0
 8013a08:	3015      	adds	r0, #21
 8013a0a:	fa04 f000 	lsl.w	r0, r4, r0
 8013a0e:	fa21 f10e 	lsr.w	r1, r1, lr
 8013a12:	ea40 0201 	orr.w	r2, r0, r1
 8013a16:	ec43 2b10 	vmov	d0, r2, r3
 8013a1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013a1c:	42b7      	cmp	r7, r6
 8013a1e:	bf3a      	itte	cc
 8013a20:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8013a24:	f1a5 0608 	subcc.w	r6, r5, #8
 8013a28:	2100      	movcs	r1, #0
 8013a2a:	380b      	subs	r0, #11
 8013a2c:	d017      	beq.n	8013a5e <__b2d+0x92>
 8013a2e:	f1c0 0c20 	rsb	ip, r0, #32
 8013a32:	fa04 f500 	lsl.w	r5, r4, r0
 8013a36:	42be      	cmp	r6, r7
 8013a38:	fa21 f40c 	lsr.w	r4, r1, ip
 8013a3c:	ea45 0504 	orr.w	r5, r5, r4
 8013a40:	bf8c      	ite	hi
 8013a42:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8013a46:	2400      	movls	r4, #0
 8013a48:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8013a4c:	fa01 f000 	lsl.w	r0, r1, r0
 8013a50:	fa24 f40c 	lsr.w	r4, r4, ip
 8013a54:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8013a58:	ea40 0204 	orr.w	r2, r0, r4
 8013a5c:	e7db      	b.n	8013a16 <__b2d+0x4a>
 8013a5e:	ea44 030c 	orr.w	r3, r4, ip
 8013a62:	460a      	mov	r2, r1
 8013a64:	e7d7      	b.n	8013a16 <__b2d+0x4a>
 8013a66:	bf00      	nop
 8013a68:	3ff00000 	.word	0x3ff00000

08013a6c <__d2b>:
 8013a6c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8013a70:	4689      	mov	r9, r1
 8013a72:	2101      	movs	r1, #1
 8013a74:	ec57 6b10 	vmov	r6, r7, d0
 8013a78:	4690      	mov	r8, r2
 8013a7a:	f7ff fc09 	bl	8013290 <_Balloc>
 8013a7e:	4604      	mov	r4, r0
 8013a80:	b930      	cbnz	r0, 8013a90 <__d2b+0x24>
 8013a82:	4602      	mov	r2, r0
 8013a84:	4b25      	ldr	r3, [pc, #148]	; (8013b1c <__d2b+0xb0>)
 8013a86:	4826      	ldr	r0, [pc, #152]	; (8013b20 <__d2b+0xb4>)
 8013a88:	f240 310a 	movw	r1, #778	; 0x30a
 8013a8c:	f7fe f9a6 	bl	8011ddc <__assert_func>
 8013a90:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8013a94:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8013a98:	bb35      	cbnz	r5, 8013ae8 <__d2b+0x7c>
 8013a9a:	2e00      	cmp	r6, #0
 8013a9c:	9301      	str	r3, [sp, #4]
 8013a9e:	d028      	beq.n	8013af2 <__d2b+0x86>
 8013aa0:	4668      	mov	r0, sp
 8013aa2:	9600      	str	r6, [sp, #0]
 8013aa4:	f7ff fd06 	bl	80134b4 <__lo0bits>
 8013aa8:	9900      	ldr	r1, [sp, #0]
 8013aaa:	b300      	cbz	r0, 8013aee <__d2b+0x82>
 8013aac:	9a01      	ldr	r2, [sp, #4]
 8013aae:	f1c0 0320 	rsb	r3, r0, #32
 8013ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8013ab6:	430b      	orrs	r3, r1
 8013ab8:	40c2      	lsrs	r2, r0
 8013aba:	6163      	str	r3, [r4, #20]
 8013abc:	9201      	str	r2, [sp, #4]
 8013abe:	9b01      	ldr	r3, [sp, #4]
 8013ac0:	61a3      	str	r3, [r4, #24]
 8013ac2:	2b00      	cmp	r3, #0
 8013ac4:	bf14      	ite	ne
 8013ac6:	2202      	movne	r2, #2
 8013ac8:	2201      	moveq	r2, #1
 8013aca:	6122      	str	r2, [r4, #16]
 8013acc:	b1d5      	cbz	r5, 8013b04 <__d2b+0x98>
 8013ace:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8013ad2:	4405      	add	r5, r0
 8013ad4:	f8c9 5000 	str.w	r5, [r9]
 8013ad8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8013adc:	f8c8 0000 	str.w	r0, [r8]
 8013ae0:	4620      	mov	r0, r4
 8013ae2:	b003      	add	sp, #12
 8013ae4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013ae8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8013aec:	e7d5      	b.n	8013a9a <__d2b+0x2e>
 8013aee:	6161      	str	r1, [r4, #20]
 8013af0:	e7e5      	b.n	8013abe <__d2b+0x52>
 8013af2:	a801      	add	r0, sp, #4
 8013af4:	f7ff fcde 	bl	80134b4 <__lo0bits>
 8013af8:	9b01      	ldr	r3, [sp, #4]
 8013afa:	6163      	str	r3, [r4, #20]
 8013afc:	2201      	movs	r2, #1
 8013afe:	6122      	str	r2, [r4, #16]
 8013b00:	3020      	adds	r0, #32
 8013b02:	e7e3      	b.n	8013acc <__d2b+0x60>
 8013b04:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8013b08:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8013b0c:	f8c9 0000 	str.w	r0, [r9]
 8013b10:	6918      	ldr	r0, [r3, #16]
 8013b12:	f7ff fcaf 	bl	8013474 <__hi0bits>
 8013b16:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8013b1a:	e7df      	b.n	8013adc <__d2b+0x70>
 8013b1c:	08016b91 	.word	0x08016b91
 8013b20:	08016c1c 	.word	0x08016c1c

08013b24 <__ratio>:
 8013b24:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b28:	4688      	mov	r8, r1
 8013b2a:	4669      	mov	r1, sp
 8013b2c:	4681      	mov	r9, r0
 8013b2e:	f7ff ff4d 	bl	80139cc <__b2d>
 8013b32:	a901      	add	r1, sp, #4
 8013b34:	4640      	mov	r0, r8
 8013b36:	ec55 4b10 	vmov	r4, r5, d0
 8013b3a:	f7ff ff47 	bl	80139cc <__b2d>
 8013b3e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8013b42:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8013b46:	eba3 0c02 	sub.w	ip, r3, r2
 8013b4a:	e9dd 3200 	ldrd	r3, r2, [sp]
 8013b4e:	1a9b      	subs	r3, r3, r2
 8013b50:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8013b54:	ec51 0b10 	vmov	r0, r1, d0
 8013b58:	2b00      	cmp	r3, #0
 8013b5a:	bfd6      	itet	le
 8013b5c:	460a      	movle	r2, r1
 8013b5e:	462a      	movgt	r2, r5
 8013b60:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8013b64:	468b      	mov	fp, r1
 8013b66:	462f      	mov	r7, r5
 8013b68:	bfd4      	ite	le
 8013b6a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8013b6e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8013b72:	4620      	mov	r0, r4
 8013b74:	ee10 2a10 	vmov	r2, s0
 8013b78:	465b      	mov	r3, fp
 8013b7a:	4639      	mov	r1, r7
 8013b7c:	f7ec fe96 	bl	80008ac <__aeabi_ddiv>
 8013b80:	ec41 0b10 	vmov	d0, r0, r1
 8013b84:	b003      	add	sp, #12
 8013b86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013b8a <__copybits>:
 8013b8a:	3901      	subs	r1, #1
 8013b8c:	b570      	push	{r4, r5, r6, lr}
 8013b8e:	1149      	asrs	r1, r1, #5
 8013b90:	6914      	ldr	r4, [r2, #16]
 8013b92:	3101      	adds	r1, #1
 8013b94:	f102 0314 	add.w	r3, r2, #20
 8013b98:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8013b9c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8013ba0:	1f05      	subs	r5, r0, #4
 8013ba2:	42a3      	cmp	r3, r4
 8013ba4:	d30c      	bcc.n	8013bc0 <__copybits+0x36>
 8013ba6:	1aa3      	subs	r3, r4, r2
 8013ba8:	3b11      	subs	r3, #17
 8013baa:	f023 0303 	bic.w	r3, r3, #3
 8013bae:	3211      	adds	r2, #17
 8013bb0:	42a2      	cmp	r2, r4
 8013bb2:	bf88      	it	hi
 8013bb4:	2300      	movhi	r3, #0
 8013bb6:	4418      	add	r0, r3
 8013bb8:	2300      	movs	r3, #0
 8013bba:	4288      	cmp	r0, r1
 8013bbc:	d305      	bcc.n	8013bca <__copybits+0x40>
 8013bbe:	bd70      	pop	{r4, r5, r6, pc}
 8013bc0:	f853 6b04 	ldr.w	r6, [r3], #4
 8013bc4:	f845 6f04 	str.w	r6, [r5, #4]!
 8013bc8:	e7eb      	b.n	8013ba2 <__copybits+0x18>
 8013bca:	f840 3b04 	str.w	r3, [r0], #4
 8013bce:	e7f4      	b.n	8013bba <__copybits+0x30>

08013bd0 <__any_on>:
 8013bd0:	f100 0214 	add.w	r2, r0, #20
 8013bd4:	6900      	ldr	r0, [r0, #16]
 8013bd6:	114b      	asrs	r3, r1, #5
 8013bd8:	4298      	cmp	r0, r3
 8013bda:	b510      	push	{r4, lr}
 8013bdc:	db11      	blt.n	8013c02 <__any_on+0x32>
 8013bde:	dd0a      	ble.n	8013bf6 <__any_on+0x26>
 8013be0:	f011 011f 	ands.w	r1, r1, #31
 8013be4:	d007      	beq.n	8013bf6 <__any_on+0x26>
 8013be6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8013bea:	fa24 f001 	lsr.w	r0, r4, r1
 8013bee:	fa00 f101 	lsl.w	r1, r0, r1
 8013bf2:	428c      	cmp	r4, r1
 8013bf4:	d10b      	bne.n	8013c0e <__any_on+0x3e>
 8013bf6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8013bfa:	4293      	cmp	r3, r2
 8013bfc:	d803      	bhi.n	8013c06 <__any_on+0x36>
 8013bfe:	2000      	movs	r0, #0
 8013c00:	bd10      	pop	{r4, pc}
 8013c02:	4603      	mov	r3, r0
 8013c04:	e7f7      	b.n	8013bf6 <__any_on+0x26>
 8013c06:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8013c0a:	2900      	cmp	r1, #0
 8013c0c:	d0f5      	beq.n	8013bfa <__any_on+0x2a>
 8013c0e:	2001      	movs	r0, #1
 8013c10:	e7f6      	b.n	8013c00 <__any_on+0x30>

08013c12 <_calloc_r>:
 8013c12:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013c14:	fba1 2402 	umull	r2, r4, r1, r2
 8013c18:	b94c      	cbnz	r4, 8013c2e <_calloc_r+0x1c>
 8013c1a:	4611      	mov	r1, r2
 8013c1c:	9201      	str	r2, [sp, #4]
 8013c1e:	f000 f87b 	bl	8013d18 <_malloc_r>
 8013c22:	9a01      	ldr	r2, [sp, #4]
 8013c24:	4605      	mov	r5, r0
 8013c26:	b930      	cbnz	r0, 8013c36 <_calloc_r+0x24>
 8013c28:	4628      	mov	r0, r5
 8013c2a:	b003      	add	sp, #12
 8013c2c:	bd30      	pop	{r4, r5, pc}
 8013c2e:	220c      	movs	r2, #12
 8013c30:	6002      	str	r2, [r0, #0]
 8013c32:	2500      	movs	r5, #0
 8013c34:	e7f8      	b.n	8013c28 <_calloc_r+0x16>
 8013c36:	4621      	mov	r1, r4
 8013c38:	f7fc fa92 	bl	8010160 <memset>
 8013c3c:	e7f4      	b.n	8013c28 <_calloc_r+0x16>
	...

08013c40 <_free_r>:
 8013c40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013c42:	2900      	cmp	r1, #0
 8013c44:	d044      	beq.n	8013cd0 <_free_r+0x90>
 8013c46:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013c4a:	9001      	str	r0, [sp, #4]
 8013c4c:	2b00      	cmp	r3, #0
 8013c4e:	f1a1 0404 	sub.w	r4, r1, #4
 8013c52:	bfb8      	it	lt
 8013c54:	18e4      	addlt	r4, r4, r3
 8013c56:	f001 fae1 	bl	801521c <__malloc_lock>
 8013c5a:	4a1e      	ldr	r2, [pc, #120]	; (8013cd4 <_free_r+0x94>)
 8013c5c:	9801      	ldr	r0, [sp, #4]
 8013c5e:	6813      	ldr	r3, [r2, #0]
 8013c60:	b933      	cbnz	r3, 8013c70 <_free_r+0x30>
 8013c62:	6063      	str	r3, [r4, #4]
 8013c64:	6014      	str	r4, [r2, #0]
 8013c66:	b003      	add	sp, #12
 8013c68:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013c6c:	f001 badc 	b.w	8015228 <__malloc_unlock>
 8013c70:	42a3      	cmp	r3, r4
 8013c72:	d908      	bls.n	8013c86 <_free_r+0x46>
 8013c74:	6825      	ldr	r5, [r4, #0]
 8013c76:	1961      	adds	r1, r4, r5
 8013c78:	428b      	cmp	r3, r1
 8013c7a:	bf01      	itttt	eq
 8013c7c:	6819      	ldreq	r1, [r3, #0]
 8013c7e:	685b      	ldreq	r3, [r3, #4]
 8013c80:	1949      	addeq	r1, r1, r5
 8013c82:	6021      	streq	r1, [r4, #0]
 8013c84:	e7ed      	b.n	8013c62 <_free_r+0x22>
 8013c86:	461a      	mov	r2, r3
 8013c88:	685b      	ldr	r3, [r3, #4]
 8013c8a:	b10b      	cbz	r3, 8013c90 <_free_r+0x50>
 8013c8c:	42a3      	cmp	r3, r4
 8013c8e:	d9fa      	bls.n	8013c86 <_free_r+0x46>
 8013c90:	6811      	ldr	r1, [r2, #0]
 8013c92:	1855      	adds	r5, r2, r1
 8013c94:	42a5      	cmp	r5, r4
 8013c96:	d10b      	bne.n	8013cb0 <_free_r+0x70>
 8013c98:	6824      	ldr	r4, [r4, #0]
 8013c9a:	4421      	add	r1, r4
 8013c9c:	1854      	adds	r4, r2, r1
 8013c9e:	42a3      	cmp	r3, r4
 8013ca0:	6011      	str	r1, [r2, #0]
 8013ca2:	d1e0      	bne.n	8013c66 <_free_r+0x26>
 8013ca4:	681c      	ldr	r4, [r3, #0]
 8013ca6:	685b      	ldr	r3, [r3, #4]
 8013ca8:	6053      	str	r3, [r2, #4]
 8013caa:	4421      	add	r1, r4
 8013cac:	6011      	str	r1, [r2, #0]
 8013cae:	e7da      	b.n	8013c66 <_free_r+0x26>
 8013cb0:	d902      	bls.n	8013cb8 <_free_r+0x78>
 8013cb2:	230c      	movs	r3, #12
 8013cb4:	6003      	str	r3, [r0, #0]
 8013cb6:	e7d6      	b.n	8013c66 <_free_r+0x26>
 8013cb8:	6825      	ldr	r5, [r4, #0]
 8013cba:	1961      	adds	r1, r4, r5
 8013cbc:	428b      	cmp	r3, r1
 8013cbe:	bf04      	itt	eq
 8013cc0:	6819      	ldreq	r1, [r3, #0]
 8013cc2:	685b      	ldreq	r3, [r3, #4]
 8013cc4:	6063      	str	r3, [r4, #4]
 8013cc6:	bf04      	itt	eq
 8013cc8:	1949      	addeq	r1, r1, r5
 8013cca:	6021      	streq	r1, [r4, #0]
 8013ccc:	6054      	str	r4, [r2, #4]
 8013cce:	e7ca      	b.n	8013c66 <_free_r+0x26>
 8013cd0:	b003      	add	sp, #12
 8013cd2:	bd30      	pop	{r4, r5, pc}
 8013cd4:	2000a18c 	.word	0x2000a18c

08013cd8 <sbrk_aligned>:
 8013cd8:	b570      	push	{r4, r5, r6, lr}
 8013cda:	4e0e      	ldr	r6, [pc, #56]	; (8013d14 <sbrk_aligned+0x3c>)
 8013cdc:	460c      	mov	r4, r1
 8013cde:	6831      	ldr	r1, [r6, #0]
 8013ce0:	4605      	mov	r5, r0
 8013ce2:	b911      	cbnz	r1, 8013cea <sbrk_aligned+0x12>
 8013ce4:	f000 fe80 	bl	80149e8 <_sbrk_r>
 8013ce8:	6030      	str	r0, [r6, #0]
 8013cea:	4621      	mov	r1, r4
 8013cec:	4628      	mov	r0, r5
 8013cee:	f000 fe7b 	bl	80149e8 <_sbrk_r>
 8013cf2:	1c43      	adds	r3, r0, #1
 8013cf4:	d00a      	beq.n	8013d0c <sbrk_aligned+0x34>
 8013cf6:	1cc4      	adds	r4, r0, #3
 8013cf8:	f024 0403 	bic.w	r4, r4, #3
 8013cfc:	42a0      	cmp	r0, r4
 8013cfe:	d007      	beq.n	8013d10 <sbrk_aligned+0x38>
 8013d00:	1a21      	subs	r1, r4, r0
 8013d02:	4628      	mov	r0, r5
 8013d04:	f000 fe70 	bl	80149e8 <_sbrk_r>
 8013d08:	3001      	adds	r0, #1
 8013d0a:	d101      	bne.n	8013d10 <sbrk_aligned+0x38>
 8013d0c:	f04f 34ff 	mov.w	r4, #4294967295
 8013d10:	4620      	mov	r0, r4
 8013d12:	bd70      	pop	{r4, r5, r6, pc}
 8013d14:	2000a190 	.word	0x2000a190

08013d18 <_malloc_r>:
 8013d18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013d1c:	1ccd      	adds	r5, r1, #3
 8013d1e:	f025 0503 	bic.w	r5, r5, #3
 8013d22:	3508      	adds	r5, #8
 8013d24:	2d0c      	cmp	r5, #12
 8013d26:	bf38      	it	cc
 8013d28:	250c      	movcc	r5, #12
 8013d2a:	2d00      	cmp	r5, #0
 8013d2c:	4607      	mov	r7, r0
 8013d2e:	db01      	blt.n	8013d34 <_malloc_r+0x1c>
 8013d30:	42a9      	cmp	r1, r5
 8013d32:	d905      	bls.n	8013d40 <_malloc_r+0x28>
 8013d34:	230c      	movs	r3, #12
 8013d36:	603b      	str	r3, [r7, #0]
 8013d38:	2600      	movs	r6, #0
 8013d3a:	4630      	mov	r0, r6
 8013d3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013d40:	4e2e      	ldr	r6, [pc, #184]	; (8013dfc <_malloc_r+0xe4>)
 8013d42:	f001 fa6b 	bl	801521c <__malloc_lock>
 8013d46:	6833      	ldr	r3, [r6, #0]
 8013d48:	461c      	mov	r4, r3
 8013d4a:	bb34      	cbnz	r4, 8013d9a <_malloc_r+0x82>
 8013d4c:	4629      	mov	r1, r5
 8013d4e:	4638      	mov	r0, r7
 8013d50:	f7ff ffc2 	bl	8013cd8 <sbrk_aligned>
 8013d54:	1c43      	adds	r3, r0, #1
 8013d56:	4604      	mov	r4, r0
 8013d58:	d14d      	bne.n	8013df6 <_malloc_r+0xde>
 8013d5a:	6834      	ldr	r4, [r6, #0]
 8013d5c:	4626      	mov	r6, r4
 8013d5e:	2e00      	cmp	r6, #0
 8013d60:	d140      	bne.n	8013de4 <_malloc_r+0xcc>
 8013d62:	6823      	ldr	r3, [r4, #0]
 8013d64:	4631      	mov	r1, r6
 8013d66:	4638      	mov	r0, r7
 8013d68:	eb04 0803 	add.w	r8, r4, r3
 8013d6c:	f000 fe3c 	bl	80149e8 <_sbrk_r>
 8013d70:	4580      	cmp	r8, r0
 8013d72:	d13a      	bne.n	8013dea <_malloc_r+0xd2>
 8013d74:	6821      	ldr	r1, [r4, #0]
 8013d76:	3503      	adds	r5, #3
 8013d78:	1a6d      	subs	r5, r5, r1
 8013d7a:	f025 0503 	bic.w	r5, r5, #3
 8013d7e:	3508      	adds	r5, #8
 8013d80:	2d0c      	cmp	r5, #12
 8013d82:	bf38      	it	cc
 8013d84:	250c      	movcc	r5, #12
 8013d86:	4629      	mov	r1, r5
 8013d88:	4638      	mov	r0, r7
 8013d8a:	f7ff ffa5 	bl	8013cd8 <sbrk_aligned>
 8013d8e:	3001      	adds	r0, #1
 8013d90:	d02b      	beq.n	8013dea <_malloc_r+0xd2>
 8013d92:	6823      	ldr	r3, [r4, #0]
 8013d94:	442b      	add	r3, r5
 8013d96:	6023      	str	r3, [r4, #0]
 8013d98:	e00e      	b.n	8013db8 <_malloc_r+0xa0>
 8013d9a:	6822      	ldr	r2, [r4, #0]
 8013d9c:	1b52      	subs	r2, r2, r5
 8013d9e:	d41e      	bmi.n	8013dde <_malloc_r+0xc6>
 8013da0:	2a0b      	cmp	r2, #11
 8013da2:	d916      	bls.n	8013dd2 <_malloc_r+0xba>
 8013da4:	1961      	adds	r1, r4, r5
 8013da6:	42a3      	cmp	r3, r4
 8013da8:	6025      	str	r5, [r4, #0]
 8013daa:	bf18      	it	ne
 8013dac:	6059      	strne	r1, [r3, #4]
 8013dae:	6863      	ldr	r3, [r4, #4]
 8013db0:	bf08      	it	eq
 8013db2:	6031      	streq	r1, [r6, #0]
 8013db4:	5162      	str	r2, [r4, r5]
 8013db6:	604b      	str	r3, [r1, #4]
 8013db8:	4638      	mov	r0, r7
 8013dba:	f104 060b 	add.w	r6, r4, #11
 8013dbe:	f001 fa33 	bl	8015228 <__malloc_unlock>
 8013dc2:	f026 0607 	bic.w	r6, r6, #7
 8013dc6:	1d23      	adds	r3, r4, #4
 8013dc8:	1af2      	subs	r2, r6, r3
 8013dca:	d0b6      	beq.n	8013d3a <_malloc_r+0x22>
 8013dcc:	1b9b      	subs	r3, r3, r6
 8013dce:	50a3      	str	r3, [r4, r2]
 8013dd0:	e7b3      	b.n	8013d3a <_malloc_r+0x22>
 8013dd2:	6862      	ldr	r2, [r4, #4]
 8013dd4:	42a3      	cmp	r3, r4
 8013dd6:	bf0c      	ite	eq
 8013dd8:	6032      	streq	r2, [r6, #0]
 8013dda:	605a      	strne	r2, [r3, #4]
 8013ddc:	e7ec      	b.n	8013db8 <_malloc_r+0xa0>
 8013dde:	4623      	mov	r3, r4
 8013de0:	6864      	ldr	r4, [r4, #4]
 8013de2:	e7b2      	b.n	8013d4a <_malloc_r+0x32>
 8013de4:	4634      	mov	r4, r6
 8013de6:	6876      	ldr	r6, [r6, #4]
 8013de8:	e7b9      	b.n	8013d5e <_malloc_r+0x46>
 8013dea:	230c      	movs	r3, #12
 8013dec:	603b      	str	r3, [r7, #0]
 8013dee:	4638      	mov	r0, r7
 8013df0:	f001 fa1a 	bl	8015228 <__malloc_unlock>
 8013df4:	e7a1      	b.n	8013d3a <_malloc_r+0x22>
 8013df6:	6025      	str	r5, [r4, #0]
 8013df8:	e7de      	b.n	8013db8 <_malloc_r+0xa0>
 8013dfa:	bf00      	nop
 8013dfc:	2000a18c 	.word	0x2000a18c

08013e00 <__ssputs_r>:
 8013e00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013e04:	688e      	ldr	r6, [r1, #8]
 8013e06:	429e      	cmp	r6, r3
 8013e08:	4682      	mov	sl, r0
 8013e0a:	460c      	mov	r4, r1
 8013e0c:	4690      	mov	r8, r2
 8013e0e:	461f      	mov	r7, r3
 8013e10:	d838      	bhi.n	8013e84 <__ssputs_r+0x84>
 8013e12:	898a      	ldrh	r2, [r1, #12]
 8013e14:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8013e18:	d032      	beq.n	8013e80 <__ssputs_r+0x80>
 8013e1a:	6825      	ldr	r5, [r4, #0]
 8013e1c:	6909      	ldr	r1, [r1, #16]
 8013e1e:	eba5 0901 	sub.w	r9, r5, r1
 8013e22:	6965      	ldr	r5, [r4, #20]
 8013e24:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013e28:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8013e2c:	3301      	adds	r3, #1
 8013e2e:	444b      	add	r3, r9
 8013e30:	106d      	asrs	r5, r5, #1
 8013e32:	429d      	cmp	r5, r3
 8013e34:	bf38      	it	cc
 8013e36:	461d      	movcc	r5, r3
 8013e38:	0553      	lsls	r3, r2, #21
 8013e3a:	d531      	bpl.n	8013ea0 <__ssputs_r+0xa0>
 8013e3c:	4629      	mov	r1, r5
 8013e3e:	f7ff ff6b 	bl	8013d18 <_malloc_r>
 8013e42:	4606      	mov	r6, r0
 8013e44:	b950      	cbnz	r0, 8013e5c <__ssputs_r+0x5c>
 8013e46:	230c      	movs	r3, #12
 8013e48:	f8ca 3000 	str.w	r3, [sl]
 8013e4c:	89a3      	ldrh	r3, [r4, #12]
 8013e4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013e52:	81a3      	strh	r3, [r4, #12]
 8013e54:	f04f 30ff 	mov.w	r0, #4294967295
 8013e58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013e5c:	6921      	ldr	r1, [r4, #16]
 8013e5e:	464a      	mov	r2, r9
 8013e60:	f7fc f970 	bl	8010144 <memcpy>
 8013e64:	89a3      	ldrh	r3, [r4, #12]
 8013e66:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8013e6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013e6e:	81a3      	strh	r3, [r4, #12]
 8013e70:	6126      	str	r6, [r4, #16]
 8013e72:	6165      	str	r5, [r4, #20]
 8013e74:	444e      	add	r6, r9
 8013e76:	eba5 0509 	sub.w	r5, r5, r9
 8013e7a:	6026      	str	r6, [r4, #0]
 8013e7c:	60a5      	str	r5, [r4, #8]
 8013e7e:	463e      	mov	r6, r7
 8013e80:	42be      	cmp	r6, r7
 8013e82:	d900      	bls.n	8013e86 <__ssputs_r+0x86>
 8013e84:	463e      	mov	r6, r7
 8013e86:	6820      	ldr	r0, [r4, #0]
 8013e88:	4632      	mov	r2, r6
 8013e8a:	4641      	mov	r1, r8
 8013e8c:	f001 f9ac 	bl	80151e8 <memmove>
 8013e90:	68a3      	ldr	r3, [r4, #8]
 8013e92:	1b9b      	subs	r3, r3, r6
 8013e94:	60a3      	str	r3, [r4, #8]
 8013e96:	6823      	ldr	r3, [r4, #0]
 8013e98:	4433      	add	r3, r6
 8013e9a:	6023      	str	r3, [r4, #0]
 8013e9c:	2000      	movs	r0, #0
 8013e9e:	e7db      	b.n	8013e58 <__ssputs_r+0x58>
 8013ea0:	462a      	mov	r2, r5
 8013ea2:	f001 f9c7 	bl	8015234 <_realloc_r>
 8013ea6:	4606      	mov	r6, r0
 8013ea8:	2800      	cmp	r0, #0
 8013eaa:	d1e1      	bne.n	8013e70 <__ssputs_r+0x70>
 8013eac:	6921      	ldr	r1, [r4, #16]
 8013eae:	4650      	mov	r0, sl
 8013eb0:	f7ff fec6 	bl	8013c40 <_free_r>
 8013eb4:	e7c7      	b.n	8013e46 <__ssputs_r+0x46>
	...

08013eb8 <_svfiprintf_r>:
 8013eb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ebc:	4698      	mov	r8, r3
 8013ebe:	898b      	ldrh	r3, [r1, #12]
 8013ec0:	061b      	lsls	r3, r3, #24
 8013ec2:	b09d      	sub	sp, #116	; 0x74
 8013ec4:	4607      	mov	r7, r0
 8013ec6:	460d      	mov	r5, r1
 8013ec8:	4614      	mov	r4, r2
 8013eca:	d50e      	bpl.n	8013eea <_svfiprintf_r+0x32>
 8013ecc:	690b      	ldr	r3, [r1, #16]
 8013ece:	b963      	cbnz	r3, 8013eea <_svfiprintf_r+0x32>
 8013ed0:	2140      	movs	r1, #64	; 0x40
 8013ed2:	f7ff ff21 	bl	8013d18 <_malloc_r>
 8013ed6:	6028      	str	r0, [r5, #0]
 8013ed8:	6128      	str	r0, [r5, #16]
 8013eda:	b920      	cbnz	r0, 8013ee6 <_svfiprintf_r+0x2e>
 8013edc:	230c      	movs	r3, #12
 8013ede:	603b      	str	r3, [r7, #0]
 8013ee0:	f04f 30ff 	mov.w	r0, #4294967295
 8013ee4:	e0d1      	b.n	801408a <_svfiprintf_r+0x1d2>
 8013ee6:	2340      	movs	r3, #64	; 0x40
 8013ee8:	616b      	str	r3, [r5, #20]
 8013eea:	2300      	movs	r3, #0
 8013eec:	9309      	str	r3, [sp, #36]	; 0x24
 8013eee:	2320      	movs	r3, #32
 8013ef0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013ef4:	f8cd 800c 	str.w	r8, [sp, #12]
 8013ef8:	2330      	movs	r3, #48	; 0x30
 8013efa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80140a4 <_svfiprintf_r+0x1ec>
 8013efe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013f02:	f04f 0901 	mov.w	r9, #1
 8013f06:	4623      	mov	r3, r4
 8013f08:	469a      	mov	sl, r3
 8013f0a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013f0e:	b10a      	cbz	r2, 8013f14 <_svfiprintf_r+0x5c>
 8013f10:	2a25      	cmp	r2, #37	; 0x25
 8013f12:	d1f9      	bne.n	8013f08 <_svfiprintf_r+0x50>
 8013f14:	ebba 0b04 	subs.w	fp, sl, r4
 8013f18:	d00b      	beq.n	8013f32 <_svfiprintf_r+0x7a>
 8013f1a:	465b      	mov	r3, fp
 8013f1c:	4622      	mov	r2, r4
 8013f1e:	4629      	mov	r1, r5
 8013f20:	4638      	mov	r0, r7
 8013f22:	f7ff ff6d 	bl	8013e00 <__ssputs_r>
 8013f26:	3001      	adds	r0, #1
 8013f28:	f000 80aa 	beq.w	8014080 <_svfiprintf_r+0x1c8>
 8013f2c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013f2e:	445a      	add	r2, fp
 8013f30:	9209      	str	r2, [sp, #36]	; 0x24
 8013f32:	f89a 3000 	ldrb.w	r3, [sl]
 8013f36:	2b00      	cmp	r3, #0
 8013f38:	f000 80a2 	beq.w	8014080 <_svfiprintf_r+0x1c8>
 8013f3c:	2300      	movs	r3, #0
 8013f3e:	f04f 32ff 	mov.w	r2, #4294967295
 8013f42:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013f46:	f10a 0a01 	add.w	sl, sl, #1
 8013f4a:	9304      	str	r3, [sp, #16]
 8013f4c:	9307      	str	r3, [sp, #28]
 8013f4e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013f52:	931a      	str	r3, [sp, #104]	; 0x68
 8013f54:	4654      	mov	r4, sl
 8013f56:	2205      	movs	r2, #5
 8013f58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013f5c:	4851      	ldr	r0, [pc, #324]	; (80140a4 <_svfiprintf_r+0x1ec>)
 8013f5e:	f7ec f96f 	bl	8000240 <memchr>
 8013f62:	9a04      	ldr	r2, [sp, #16]
 8013f64:	b9d8      	cbnz	r0, 8013f9e <_svfiprintf_r+0xe6>
 8013f66:	06d0      	lsls	r0, r2, #27
 8013f68:	bf44      	itt	mi
 8013f6a:	2320      	movmi	r3, #32
 8013f6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013f70:	0711      	lsls	r1, r2, #28
 8013f72:	bf44      	itt	mi
 8013f74:	232b      	movmi	r3, #43	; 0x2b
 8013f76:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013f7a:	f89a 3000 	ldrb.w	r3, [sl]
 8013f7e:	2b2a      	cmp	r3, #42	; 0x2a
 8013f80:	d015      	beq.n	8013fae <_svfiprintf_r+0xf6>
 8013f82:	9a07      	ldr	r2, [sp, #28]
 8013f84:	4654      	mov	r4, sl
 8013f86:	2000      	movs	r0, #0
 8013f88:	f04f 0c0a 	mov.w	ip, #10
 8013f8c:	4621      	mov	r1, r4
 8013f8e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013f92:	3b30      	subs	r3, #48	; 0x30
 8013f94:	2b09      	cmp	r3, #9
 8013f96:	d94e      	bls.n	8014036 <_svfiprintf_r+0x17e>
 8013f98:	b1b0      	cbz	r0, 8013fc8 <_svfiprintf_r+0x110>
 8013f9a:	9207      	str	r2, [sp, #28]
 8013f9c:	e014      	b.n	8013fc8 <_svfiprintf_r+0x110>
 8013f9e:	eba0 0308 	sub.w	r3, r0, r8
 8013fa2:	fa09 f303 	lsl.w	r3, r9, r3
 8013fa6:	4313      	orrs	r3, r2
 8013fa8:	9304      	str	r3, [sp, #16]
 8013faa:	46a2      	mov	sl, r4
 8013fac:	e7d2      	b.n	8013f54 <_svfiprintf_r+0x9c>
 8013fae:	9b03      	ldr	r3, [sp, #12]
 8013fb0:	1d19      	adds	r1, r3, #4
 8013fb2:	681b      	ldr	r3, [r3, #0]
 8013fb4:	9103      	str	r1, [sp, #12]
 8013fb6:	2b00      	cmp	r3, #0
 8013fb8:	bfbb      	ittet	lt
 8013fba:	425b      	neglt	r3, r3
 8013fbc:	f042 0202 	orrlt.w	r2, r2, #2
 8013fc0:	9307      	strge	r3, [sp, #28]
 8013fc2:	9307      	strlt	r3, [sp, #28]
 8013fc4:	bfb8      	it	lt
 8013fc6:	9204      	strlt	r2, [sp, #16]
 8013fc8:	7823      	ldrb	r3, [r4, #0]
 8013fca:	2b2e      	cmp	r3, #46	; 0x2e
 8013fcc:	d10c      	bne.n	8013fe8 <_svfiprintf_r+0x130>
 8013fce:	7863      	ldrb	r3, [r4, #1]
 8013fd0:	2b2a      	cmp	r3, #42	; 0x2a
 8013fd2:	d135      	bne.n	8014040 <_svfiprintf_r+0x188>
 8013fd4:	9b03      	ldr	r3, [sp, #12]
 8013fd6:	1d1a      	adds	r2, r3, #4
 8013fd8:	681b      	ldr	r3, [r3, #0]
 8013fda:	9203      	str	r2, [sp, #12]
 8013fdc:	2b00      	cmp	r3, #0
 8013fde:	bfb8      	it	lt
 8013fe0:	f04f 33ff 	movlt.w	r3, #4294967295
 8013fe4:	3402      	adds	r4, #2
 8013fe6:	9305      	str	r3, [sp, #20]
 8013fe8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80140b4 <_svfiprintf_r+0x1fc>
 8013fec:	7821      	ldrb	r1, [r4, #0]
 8013fee:	2203      	movs	r2, #3
 8013ff0:	4650      	mov	r0, sl
 8013ff2:	f7ec f925 	bl	8000240 <memchr>
 8013ff6:	b140      	cbz	r0, 801400a <_svfiprintf_r+0x152>
 8013ff8:	2340      	movs	r3, #64	; 0x40
 8013ffa:	eba0 000a 	sub.w	r0, r0, sl
 8013ffe:	fa03 f000 	lsl.w	r0, r3, r0
 8014002:	9b04      	ldr	r3, [sp, #16]
 8014004:	4303      	orrs	r3, r0
 8014006:	3401      	adds	r4, #1
 8014008:	9304      	str	r3, [sp, #16]
 801400a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801400e:	4826      	ldr	r0, [pc, #152]	; (80140a8 <_svfiprintf_r+0x1f0>)
 8014010:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014014:	2206      	movs	r2, #6
 8014016:	f7ec f913 	bl	8000240 <memchr>
 801401a:	2800      	cmp	r0, #0
 801401c:	d038      	beq.n	8014090 <_svfiprintf_r+0x1d8>
 801401e:	4b23      	ldr	r3, [pc, #140]	; (80140ac <_svfiprintf_r+0x1f4>)
 8014020:	bb1b      	cbnz	r3, 801406a <_svfiprintf_r+0x1b2>
 8014022:	9b03      	ldr	r3, [sp, #12]
 8014024:	3307      	adds	r3, #7
 8014026:	f023 0307 	bic.w	r3, r3, #7
 801402a:	3308      	adds	r3, #8
 801402c:	9303      	str	r3, [sp, #12]
 801402e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014030:	4433      	add	r3, r6
 8014032:	9309      	str	r3, [sp, #36]	; 0x24
 8014034:	e767      	b.n	8013f06 <_svfiprintf_r+0x4e>
 8014036:	fb0c 3202 	mla	r2, ip, r2, r3
 801403a:	460c      	mov	r4, r1
 801403c:	2001      	movs	r0, #1
 801403e:	e7a5      	b.n	8013f8c <_svfiprintf_r+0xd4>
 8014040:	2300      	movs	r3, #0
 8014042:	3401      	adds	r4, #1
 8014044:	9305      	str	r3, [sp, #20]
 8014046:	4619      	mov	r1, r3
 8014048:	f04f 0c0a 	mov.w	ip, #10
 801404c:	4620      	mov	r0, r4
 801404e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014052:	3a30      	subs	r2, #48	; 0x30
 8014054:	2a09      	cmp	r2, #9
 8014056:	d903      	bls.n	8014060 <_svfiprintf_r+0x1a8>
 8014058:	2b00      	cmp	r3, #0
 801405a:	d0c5      	beq.n	8013fe8 <_svfiprintf_r+0x130>
 801405c:	9105      	str	r1, [sp, #20]
 801405e:	e7c3      	b.n	8013fe8 <_svfiprintf_r+0x130>
 8014060:	fb0c 2101 	mla	r1, ip, r1, r2
 8014064:	4604      	mov	r4, r0
 8014066:	2301      	movs	r3, #1
 8014068:	e7f0      	b.n	801404c <_svfiprintf_r+0x194>
 801406a:	ab03      	add	r3, sp, #12
 801406c:	9300      	str	r3, [sp, #0]
 801406e:	462a      	mov	r2, r5
 8014070:	4b0f      	ldr	r3, [pc, #60]	; (80140b0 <_svfiprintf_r+0x1f8>)
 8014072:	a904      	add	r1, sp, #16
 8014074:	4638      	mov	r0, r7
 8014076:	f7fc f91b 	bl	80102b0 <_printf_float>
 801407a:	1c42      	adds	r2, r0, #1
 801407c:	4606      	mov	r6, r0
 801407e:	d1d6      	bne.n	801402e <_svfiprintf_r+0x176>
 8014080:	89ab      	ldrh	r3, [r5, #12]
 8014082:	065b      	lsls	r3, r3, #25
 8014084:	f53f af2c 	bmi.w	8013ee0 <_svfiprintf_r+0x28>
 8014088:	9809      	ldr	r0, [sp, #36]	; 0x24
 801408a:	b01d      	add	sp, #116	; 0x74
 801408c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014090:	ab03      	add	r3, sp, #12
 8014092:	9300      	str	r3, [sp, #0]
 8014094:	462a      	mov	r2, r5
 8014096:	4b06      	ldr	r3, [pc, #24]	; (80140b0 <_svfiprintf_r+0x1f8>)
 8014098:	a904      	add	r1, sp, #16
 801409a:	4638      	mov	r0, r7
 801409c:	f7fc fbac 	bl	80107f8 <_printf_i>
 80140a0:	e7eb      	b.n	801407a <_svfiprintf_r+0x1c2>
 80140a2:	bf00      	nop
 80140a4:	08016d74 	.word	0x08016d74
 80140a8:	08016d7e 	.word	0x08016d7e
 80140ac:	080102b1 	.word	0x080102b1
 80140b0:	08013e01 	.word	0x08013e01
 80140b4:	08016d7a 	.word	0x08016d7a

080140b8 <_sungetc_r>:
 80140b8:	b538      	push	{r3, r4, r5, lr}
 80140ba:	1c4b      	adds	r3, r1, #1
 80140bc:	4614      	mov	r4, r2
 80140be:	d103      	bne.n	80140c8 <_sungetc_r+0x10>
 80140c0:	f04f 35ff 	mov.w	r5, #4294967295
 80140c4:	4628      	mov	r0, r5
 80140c6:	bd38      	pop	{r3, r4, r5, pc}
 80140c8:	8993      	ldrh	r3, [r2, #12]
 80140ca:	f023 0320 	bic.w	r3, r3, #32
 80140ce:	8193      	strh	r3, [r2, #12]
 80140d0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80140d2:	6852      	ldr	r2, [r2, #4]
 80140d4:	b2cd      	uxtb	r5, r1
 80140d6:	b18b      	cbz	r3, 80140fc <_sungetc_r+0x44>
 80140d8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80140da:	4293      	cmp	r3, r2
 80140dc:	dd08      	ble.n	80140f0 <_sungetc_r+0x38>
 80140de:	6823      	ldr	r3, [r4, #0]
 80140e0:	1e5a      	subs	r2, r3, #1
 80140e2:	6022      	str	r2, [r4, #0]
 80140e4:	f803 5c01 	strb.w	r5, [r3, #-1]
 80140e8:	6863      	ldr	r3, [r4, #4]
 80140ea:	3301      	adds	r3, #1
 80140ec:	6063      	str	r3, [r4, #4]
 80140ee:	e7e9      	b.n	80140c4 <_sungetc_r+0xc>
 80140f0:	4621      	mov	r1, r4
 80140f2:	f000 fd49 	bl	8014b88 <__submore>
 80140f6:	2800      	cmp	r0, #0
 80140f8:	d0f1      	beq.n	80140de <_sungetc_r+0x26>
 80140fa:	e7e1      	b.n	80140c0 <_sungetc_r+0x8>
 80140fc:	6921      	ldr	r1, [r4, #16]
 80140fe:	6823      	ldr	r3, [r4, #0]
 8014100:	b151      	cbz	r1, 8014118 <_sungetc_r+0x60>
 8014102:	4299      	cmp	r1, r3
 8014104:	d208      	bcs.n	8014118 <_sungetc_r+0x60>
 8014106:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 801410a:	42a9      	cmp	r1, r5
 801410c:	d104      	bne.n	8014118 <_sungetc_r+0x60>
 801410e:	3b01      	subs	r3, #1
 8014110:	3201      	adds	r2, #1
 8014112:	6023      	str	r3, [r4, #0]
 8014114:	6062      	str	r2, [r4, #4]
 8014116:	e7d5      	b.n	80140c4 <_sungetc_r+0xc>
 8014118:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 801411c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014120:	6363      	str	r3, [r4, #52]	; 0x34
 8014122:	2303      	movs	r3, #3
 8014124:	63a3      	str	r3, [r4, #56]	; 0x38
 8014126:	4623      	mov	r3, r4
 8014128:	f803 5f46 	strb.w	r5, [r3, #70]!
 801412c:	6023      	str	r3, [r4, #0]
 801412e:	2301      	movs	r3, #1
 8014130:	e7dc      	b.n	80140ec <_sungetc_r+0x34>

08014132 <__ssrefill_r>:
 8014132:	b510      	push	{r4, lr}
 8014134:	460c      	mov	r4, r1
 8014136:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8014138:	b169      	cbz	r1, 8014156 <__ssrefill_r+0x24>
 801413a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801413e:	4299      	cmp	r1, r3
 8014140:	d001      	beq.n	8014146 <__ssrefill_r+0x14>
 8014142:	f7ff fd7d 	bl	8013c40 <_free_r>
 8014146:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8014148:	6063      	str	r3, [r4, #4]
 801414a:	2000      	movs	r0, #0
 801414c:	6360      	str	r0, [r4, #52]	; 0x34
 801414e:	b113      	cbz	r3, 8014156 <__ssrefill_r+0x24>
 8014150:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8014152:	6023      	str	r3, [r4, #0]
 8014154:	bd10      	pop	{r4, pc}
 8014156:	6923      	ldr	r3, [r4, #16]
 8014158:	6023      	str	r3, [r4, #0]
 801415a:	2300      	movs	r3, #0
 801415c:	6063      	str	r3, [r4, #4]
 801415e:	89a3      	ldrh	r3, [r4, #12]
 8014160:	f043 0320 	orr.w	r3, r3, #32
 8014164:	81a3      	strh	r3, [r4, #12]
 8014166:	f04f 30ff 	mov.w	r0, #4294967295
 801416a:	e7f3      	b.n	8014154 <__ssrefill_r+0x22>

0801416c <__ssvfiscanf_r>:
 801416c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014170:	460c      	mov	r4, r1
 8014172:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8014176:	2100      	movs	r1, #0
 8014178:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 801417c:	49a6      	ldr	r1, [pc, #664]	; (8014418 <__ssvfiscanf_r+0x2ac>)
 801417e:	91a0      	str	r1, [sp, #640]	; 0x280
 8014180:	f10d 0804 	add.w	r8, sp, #4
 8014184:	49a5      	ldr	r1, [pc, #660]	; (801441c <__ssvfiscanf_r+0x2b0>)
 8014186:	4fa6      	ldr	r7, [pc, #664]	; (8014420 <__ssvfiscanf_r+0x2b4>)
 8014188:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8014424 <__ssvfiscanf_r+0x2b8>
 801418c:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8014190:	4606      	mov	r6, r0
 8014192:	91a1      	str	r1, [sp, #644]	; 0x284
 8014194:	9300      	str	r3, [sp, #0]
 8014196:	7813      	ldrb	r3, [r2, #0]
 8014198:	2b00      	cmp	r3, #0
 801419a:	f000 815a 	beq.w	8014452 <__ssvfiscanf_r+0x2e6>
 801419e:	5dd9      	ldrb	r1, [r3, r7]
 80141a0:	f011 0108 	ands.w	r1, r1, #8
 80141a4:	f102 0501 	add.w	r5, r2, #1
 80141a8:	d019      	beq.n	80141de <__ssvfiscanf_r+0x72>
 80141aa:	6863      	ldr	r3, [r4, #4]
 80141ac:	2b00      	cmp	r3, #0
 80141ae:	dd0f      	ble.n	80141d0 <__ssvfiscanf_r+0x64>
 80141b0:	6823      	ldr	r3, [r4, #0]
 80141b2:	781a      	ldrb	r2, [r3, #0]
 80141b4:	5cba      	ldrb	r2, [r7, r2]
 80141b6:	0712      	lsls	r2, r2, #28
 80141b8:	d401      	bmi.n	80141be <__ssvfiscanf_r+0x52>
 80141ba:	462a      	mov	r2, r5
 80141bc:	e7eb      	b.n	8014196 <__ssvfiscanf_r+0x2a>
 80141be:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80141c0:	3201      	adds	r2, #1
 80141c2:	9245      	str	r2, [sp, #276]	; 0x114
 80141c4:	6862      	ldr	r2, [r4, #4]
 80141c6:	3301      	adds	r3, #1
 80141c8:	3a01      	subs	r2, #1
 80141ca:	6062      	str	r2, [r4, #4]
 80141cc:	6023      	str	r3, [r4, #0]
 80141ce:	e7ec      	b.n	80141aa <__ssvfiscanf_r+0x3e>
 80141d0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80141d2:	4621      	mov	r1, r4
 80141d4:	4630      	mov	r0, r6
 80141d6:	4798      	blx	r3
 80141d8:	2800      	cmp	r0, #0
 80141da:	d0e9      	beq.n	80141b0 <__ssvfiscanf_r+0x44>
 80141dc:	e7ed      	b.n	80141ba <__ssvfiscanf_r+0x4e>
 80141de:	2b25      	cmp	r3, #37	; 0x25
 80141e0:	d012      	beq.n	8014208 <__ssvfiscanf_r+0x9c>
 80141e2:	469a      	mov	sl, r3
 80141e4:	6863      	ldr	r3, [r4, #4]
 80141e6:	2b00      	cmp	r3, #0
 80141e8:	f340 8091 	ble.w	801430e <__ssvfiscanf_r+0x1a2>
 80141ec:	6822      	ldr	r2, [r4, #0]
 80141ee:	7813      	ldrb	r3, [r2, #0]
 80141f0:	4553      	cmp	r3, sl
 80141f2:	f040 812e 	bne.w	8014452 <__ssvfiscanf_r+0x2e6>
 80141f6:	6863      	ldr	r3, [r4, #4]
 80141f8:	3b01      	subs	r3, #1
 80141fa:	6063      	str	r3, [r4, #4]
 80141fc:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80141fe:	3201      	adds	r2, #1
 8014200:	3301      	adds	r3, #1
 8014202:	6022      	str	r2, [r4, #0]
 8014204:	9345      	str	r3, [sp, #276]	; 0x114
 8014206:	e7d8      	b.n	80141ba <__ssvfiscanf_r+0x4e>
 8014208:	9141      	str	r1, [sp, #260]	; 0x104
 801420a:	9143      	str	r1, [sp, #268]	; 0x10c
 801420c:	7853      	ldrb	r3, [r2, #1]
 801420e:	2b2a      	cmp	r3, #42	; 0x2a
 8014210:	bf02      	ittt	eq
 8014212:	2310      	moveq	r3, #16
 8014214:	1c95      	addeq	r5, r2, #2
 8014216:	9341      	streq	r3, [sp, #260]	; 0x104
 8014218:	220a      	movs	r2, #10
 801421a:	46aa      	mov	sl, r5
 801421c:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8014220:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8014224:	2b09      	cmp	r3, #9
 8014226:	d91d      	bls.n	8014264 <__ssvfiscanf_r+0xf8>
 8014228:	487e      	ldr	r0, [pc, #504]	; (8014424 <__ssvfiscanf_r+0x2b8>)
 801422a:	2203      	movs	r2, #3
 801422c:	f7ec f808 	bl	8000240 <memchr>
 8014230:	b140      	cbz	r0, 8014244 <__ssvfiscanf_r+0xd8>
 8014232:	2301      	movs	r3, #1
 8014234:	eba0 0009 	sub.w	r0, r0, r9
 8014238:	fa03 f000 	lsl.w	r0, r3, r0
 801423c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801423e:	4318      	orrs	r0, r3
 8014240:	9041      	str	r0, [sp, #260]	; 0x104
 8014242:	4655      	mov	r5, sl
 8014244:	f815 3b01 	ldrb.w	r3, [r5], #1
 8014248:	2b78      	cmp	r3, #120	; 0x78
 801424a:	d806      	bhi.n	801425a <__ssvfiscanf_r+0xee>
 801424c:	2b57      	cmp	r3, #87	; 0x57
 801424e:	d810      	bhi.n	8014272 <__ssvfiscanf_r+0x106>
 8014250:	2b25      	cmp	r3, #37	; 0x25
 8014252:	d0c6      	beq.n	80141e2 <__ssvfiscanf_r+0x76>
 8014254:	d856      	bhi.n	8014304 <__ssvfiscanf_r+0x198>
 8014256:	2b00      	cmp	r3, #0
 8014258:	d064      	beq.n	8014324 <__ssvfiscanf_r+0x1b8>
 801425a:	2303      	movs	r3, #3
 801425c:	9347      	str	r3, [sp, #284]	; 0x11c
 801425e:	230a      	movs	r3, #10
 8014260:	9342      	str	r3, [sp, #264]	; 0x108
 8014262:	e071      	b.n	8014348 <__ssvfiscanf_r+0x1dc>
 8014264:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8014266:	fb02 1103 	mla	r1, r2, r3, r1
 801426a:	3930      	subs	r1, #48	; 0x30
 801426c:	9143      	str	r1, [sp, #268]	; 0x10c
 801426e:	4655      	mov	r5, sl
 8014270:	e7d3      	b.n	801421a <__ssvfiscanf_r+0xae>
 8014272:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8014276:	2a20      	cmp	r2, #32
 8014278:	d8ef      	bhi.n	801425a <__ssvfiscanf_r+0xee>
 801427a:	a101      	add	r1, pc, #4	; (adr r1, 8014280 <__ssvfiscanf_r+0x114>)
 801427c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8014280:	08014333 	.word	0x08014333
 8014284:	0801425b 	.word	0x0801425b
 8014288:	0801425b 	.word	0x0801425b
 801428c:	08014391 	.word	0x08014391
 8014290:	0801425b 	.word	0x0801425b
 8014294:	0801425b 	.word	0x0801425b
 8014298:	0801425b 	.word	0x0801425b
 801429c:	0801425b 	.word	0x0801425b
 80142a0:	0801425b 	.word	0x0801425b
 80142a4:	0801425b 	.word	0x0801425b
 80142a8:	0801425b 	.word	0x0801425b
 80142ac:	080143a7 	.word	0x080143a7
 80142b0:	0801437d 	.word	0x0801437d
 80142b4:	0801430b 	.word	0x0801430b
 80142b8:	0801430b 	.word	0x0801430b
 80142bc:	0801430b 	.word	0x0801430b
 80142c0:	0801425b 	.word	0x0801425b
 80142c4:	08014381 	.word	0x08014381
 80142c8:	0801425b 	.word	0x0801425b
 80142cc:	0801425b 	.word	0x0801425b
 80142d0:	0801425b 	.word	0x0801425b
 80142d4:	0801425b 	.word	0x0801425b
 80142d8:	080143b7 	.word	0x080143b7
 80142dc:	08014389 	.word	0x08014389
 80142e0:	0801432b 	.word	0x0801432b
 80142e4:	0801425b 	.word	0x0801425b
 80142e8:	0801425b 	.word	0x0801425b
 80142ec:	080143b3 	.word	0x080143b3
 80142f0:	0801425b 	.word	0x0801425b
 80142f4:	0801437d 	.word	0x0801437d
 80142f8:	0801425b 	.word	0x0801425b
 80142fc:	0801425b 	.word	0x0801425b
 8014300:	08014333 	.word	0x08014333
 8014304:	3b45      	subs	r3, #69	; 0x45
 8014306:	2b02      	cmp	r3, #2
 8014308:	d8a7      	bhi.n	801425a <__ssvfiscanf_r+0xee>
 801430a:	2305      	movs	r3, #5
 801430c:	e01b      	b.n	8014346 <__ssvfiscanf_r+0x1da>
 801430e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8014310:	4621      	mov	r1, r4
 8014312:	4630      	mov	r0, r6
 8014314:	4798      	blx	r3
 8014316:	2800      	cmp	r0, #0
 8014318:	f43f af68 	beq.w	80141ec <__ssvfiscanf_r+0x80>
 801431c:	9844      	ldr	r0, [sp, #272]	; 0x110
 801431e:	2800      	cmp	r0, #0
 8014320:	f040 808d 	bne.w	801443e <__ssvfiscanf_r+0x2d2>
 8014324:	f04f 30ff 	mov.w	r0, #4294967295
 8014328:	e08f      	b.n	801444a <__ssvfiscanf_r+0x2de>
 801432a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801432c:	f042 0220 	orr.w	r2, r2, #32
 8014330:	9241      	str	r2, [sp, #260]	; 0x104
 8014332:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8014334:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8014338:	9241      	str	r2, [sp, #260]	; 0x104
 801433a:	2210      	movs	r2, #16
 801433c:	2b6f      	cmp	r3, #111	; 0x6f
 801433e:	9242      	str	r2, [sp, #264]	; 0x108
 8014340:	bf34      	ite	cc
 8014342:	2303      	movcc	r3, #3
 8014344:	2304      	movcs	r3, #4
 8014346:	9347      	str	r3, [sp, #284]	; 0x11c
 8014348:	6863      	ldr	r3, [r4, #4]
 801434a:	2b00      	cmp	r3, #0
 801434c:	dd42      	ble.n	80143d4 <__ssvfiscanf_r+0x268>
 801434e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8014350:	0659      	lsls	r1, r3, #25
 8014352:	d404      	bmi.n	801435e <__ssvfiscanf_r+0x1f2>
 8014354:	6823      	ldr	r3, [r4, #0]
 8014356:	781a      	ldrb	r2, [r3, #0]
 8014358:	5cba      	ldrb	r2, [r7, r2]
 801435a:	0712      	lsls	r2, r2, #28
 801435c:	d441      	bmi.n	80143e2 <__ssvfiscanf_r+0x276>
 801435e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8014360:	2b02      	cmp	r3, #2
 8014362:	dc50      	bgt.n	8014406 <__ssvfiscanf_r+0x29a>
 8014364:	466b      	mov	r3, sp
 8014366:	4622      	mov	r2, r4
 8014368:	a941      	add	r1, sp, #260	; 0x104
 801436a:	4630      	mov	r0, r6
 801436c:	f000 f9d0 	bl	8014710 <_scanf_chars>
 8014370:	2801      	cmp	r0, #1
 8014372:	d06e      	beq.n	8014452 <__ssvfiscanf_r+0x2e6>
 8014374:	2802      	cmp	r0, #2
 8014376:	f47f af20 	bne.w	80141ba <__ssvfiscanf_r+0x4e>
 801437a:	e7cf      	b.n	801431c <__ssvfiscanf_r+0x1b0>
 801437c:	220a      	movs	r2, #10
 801437e:	e7dd      	b.n	801433c <__ssvfiscanf_r+0x1d0>
 8014380:	2300      	movs	r3, #0
 8014382:	9342      	str	r3, [sp, #264]	; 0x108
 8014384:	2303      	movs	r3, #3
 8014386:	e7de      	b.n	8014346 <__ssvfiscanf_r+0x1da>
 8014388:	2308      	movs	r3, #8
 801438a:	9342      	str	r3, [sp, #264]	; 0x108
 801438c:	2304      	movs	r3, #4
 801438e:	e7da      	b.n	8014346 <__ssvfiscanf_r+0x1da>
 8014390:	4629      	mov	r1, r5
 8014392:	4640      	mov	r0, r8
 8014394:	f000 fb38 	bl	8014a08 <__sccl>
 8014398:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801439a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801439e:	9341      	str	r3, [sp, #260]	; 0x104
 80143a0:	4605      	mov	r5, r0
 80143a2:	2301      	movs	r3, #1
 80143a4:	e7cf      	b.n	8014346 <__ssvfiscanf_r+0x1da>
 80143a6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80143a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80143ac:	9341      	str	r3, [sp, #260]	; 0x104
 80143ae:	2300      	movs	r3, #0
 80143b0:	e7c9      	b.n	8014346 <__ssvfiscanf_r+0x1da>
 80143b2:	2302      	movs	r3, #2
 80143b4:	e7c7      	b.n	8014346 <__ssvfiscanf_r+0x1da>
 80143b6:	9841      	ldr	r0, [sp, #260]	; 0x104
 80143b8:	06c3      	lsls	r3, r0, #27
 80143ba:	f53f aefe 	bmi.w	80141ba <__ssvfiscanf_r+0x4e>
 80143be:	9b00      	ldr	r3, [sp, #0]
 80143c0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80143c2:	1d19      	adds	r1, r3, #4
 80143c4:	9100      	str	r1, [sp, #0]
 80143c6:	681b      	ldr	r3, [r3, #0]
 80143c8:	f010 0f01 	tst.w	r0, #1
 80143cc:	bf14      	ite	ne
 80143ce:	801a      	strhne	r2, [r3, #0]
 80143d0:	601a      	streq	r2, [r3, #0]
 80143d2:	e6f2      	b.n	80141ba <__ssvfiscanf_r+0x4e>
 80143d4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80143d6:	4621      	mov	r1, r4
 80143d8:	4630      	mov	r0, r6
 80143da:	4798      	blx	r3
 80143dc:	2800      	cmp	r0, #0
 80143de:	d0b6      	beq.n	801434e <__ssvfiscanf_r+0x1e2>
 80143e0:	e79c      	b.n	801431c <__ssvfiscanf_r+0x1b0>
 80143e2:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80143e4:	3201      	adds	r2, #1
 80143e6:	9245      	str	r2, [sp, #276]	; 0x114
 80143e8:	6862      	ldr	r2, [r4, #4]
 80143ea:	3a01      	subs	r2, #1
 80143ec:	2a00      	cmp	r2, #0
 80143ee:	6062      	str	r2, [r4, #4]
 80143f0:	dd02      	ble.n	80143f8 <__ssvfiscanf_r+0x28c>
 80143f2:	3301      	adds	r3, #1
 80143f4:	6023      	str	r3, [r4, #0]
 80143f6:	e7ad      	b.n	8014354 <__ssvfiscanf_r+0x1e8>
 80143f8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80143fa:	4621      	mov	r1, r4
 80143fc:	4630      	mov	r0, r6
 80143fe:	4798      	blx	r3
 8014400:	2800      	cmp	r0, #0
 8014402:	d0a7      	beq.n	8014354 <__ssvfiscanf_r+0x1e8>
 8014404:	e78a      	b.n	801431c <__ssvfiscanf_r+0x1b0>
 8014406:	2b04      	cmp	r3, #4
 8014408:	dc0e      	bgt.n	8014428 <__ssvfiscanf_r+0x2bc>
 801440a:	466b      	mov	r3, sp
 801440c:	4622      	mov	r2, r4
 801440e:	a941      	add	r1, sp, #260	; 0x104
 8014410:	4630      	mov	r0, r6
 8014412:	f000 f9d7 	bl	80147c4 <_scanf_i>
 8014416:	e7ab      	b.n	8014370 <__ssvfiscanf_r+0x204>
 8014418:	080140b9 	.word	0x080140b9
 801441c:	08014133 	.word	0x08014133
 8014420:	08016a29 	.word	0x08016a29
 8014424:	08016d7a 	.word	0x08016d7a
 8014428:	4b0b      	ldr	r3, [pc, #44]	; (8014458 <__ssvfiscanf_r+0x2ec>)
 801442a:	2b00      	cmp	r3, #0
 801442c:	f43f aec5 	beq.w	80141ba <__ssvfiscanf_r+0x4e>
 8014430:	466b      	mov	r3, sp
 8014432:	4622      	mov	r2, r4
 8014434:	a941      	add	r1, sp, #260	; 0x104
 8014436:	4630      	mov	r0, r6
 8014438:	f7fc fb04 	bl	8010a44 <_scanf_float>
 801443c:	e798      	b.n	8014370 <__ssvfiscanf_r+0x204>
 801443e:	89a3      	ldrh	r3, [r4, #12]
 8014440:	f013 0f40 	tst.w	r3, #64	; 0x40
 8014444:	bf18      	it	ne
 8014446:	f04f 30ff 	movne.w	r0, #4294967295
 801444a:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 801444e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014452:	9844      	ldr	r0, [sp, #272]	; 0x110
 8014454:	e7f9      	b.n	801444a <__ssvfiscanf_r+0x2de>
 8014456:	bf00      	nop
 8014458:	08010a45 	.word	0x08010a45

0801445c <__sfputc_r>:
 801445c:	6893      	ldr	r3, [r2, #8]
 801445e:	3b01      	subs	r3, #1
 8014460:	2b00      	cmp	r3, #0
 8014462:	b410      	push	{r4}
 8014464:	6093      	str	r3, [r2, #8]
 8014466:	da08      	bge.n	801447a <__sfputc_r+0x1e>
 8014468:	6994      	ldr	r4, [r2, #24]
 801446a:	42a3      	cmp	r3, r4
 801446c:	db01      	blt.n	8014472 <__sfputc_r+0x16>
 801446e:	290a      	cmp	r1, #10
 8014470:	d103      	bne.n	801447a <__sfputc_r+0x1e>
 8014472:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014476:	f000 bbc1 	b.w	8014bfc <__swbuf_r>
 801447a:	6813      	ldr	r3, [r2, #0]
 801447c:	1c58      	adds	r0, r3, #1
 801447e:	6010      	str	r0, [r2, #0]
 8014480:	7019      	strb	r1, [r3, #0]
 8014482:	4608      	mov	r0, r1
 8014484:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014488:	4770      	bx	lr

0801448a <__sfputs_r>:
 801448a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801448c:	4606      	mov	r6, r0
 801448e:	460f      	mov	r7, r1
 8014490:	4614      	mov	r4, r2
 8014492:	18d5      	adds	r5, r2, r3
 8014494:	42ac      	cmp	r4, r5
 8014496:	d101      	bne.n	801449c <__sfputs_r+0x12>
 8014498:	2000      	movs	r0, #0
 801449a:	e007      	b.n	80144ac <__sfputs_r+0x22>
 801449c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80144a0:	463a      	mov	r2, r7
 80144a2:	4630      	mov	r0, r6
 80144a4:	f7ff ffda 	bl	801445c <__sfputc_r>
 80144a8:	1c43      	adds	r3, r0, #1
 80144aa:	d1f3      	bne.n	8014494 <__sfputs_r+0xa>
 80144ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080144b0 <_vfiprintf_r>:
 80144b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80144b4:	460d      	mov	r5, r1
 80144b6:	b09d      	sub	sp, #116	; 0x74
 80144b8:	4614      	mov	r4, r2
 80144ba:	4698      	mov	r8, r3
 80144bc:	4606      	mov	r6, r0
 80144be:	b118      	cbz	r0, 80144c8 <_vfiprintf_r+0x18>
 80144c0:	6983      	ldr	r3, [r0, #24]
 80144c2:	b90b      	cbnz	r3, 80144c8 <_vfiprintf_r+0x18>
 80144c4:	f000 fd8a 	bl	8014fdc <__sinit>
 80144c8:	4b89      	ldr	r3, [pc, #548]	; (80146f0 <_vfiprintf_r+0x240>)
 80144ca:	429d      	cmp	r5, r3
 80144cc:	d11b      	bne.n	8014506 <_vfiprintf_r+0x56>
 80144ce:	6875      	ldr	r5, [r6, #4]
 80144d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80144d2:	07d9      	lsls	r1, r3, #31
 80144d4:	d405      	bmi.n	80144e2 <_vfiprintf_r+0x32>
 80144d6:	89ab      	ldrh	r3, [r5, #12]
 80144d8:	059a      	lsls	r2, r3, #22
 80144da:	d402      	bmi.n	80144e2 <_vfiprintf_r+0x32>
 80144dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80144de:	f000 fe1b 	bl	8015118 <__retarget_lock_acquire_recursive>
 80144e2:	89ab      	ldrh	r3, [r5, #12]
 80144e4:	071b      	lsls	r3, r3, #28
 80144e6:	d501      	bpl.n	80144ec <_vfiprintf_r+0x3c>
 80144e8:	692b      	ldr	r3, [r5, #16]
 80144ea:	b9eb      	cbnz	r3, 8014528 <_vfiprintf_r+0x78>
 80144ec:	4629      	mov	r1, r5
 80144ee:	4630      	mov	r0, r6
 80144f0:	f000 fbe4 	bl	8014cbc <__swsetup_r>
 80144f4:	b1c0      	cbz	r0, 8014528 <_vfiprintf_r+0x78>
 80144f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80144f8:	07dc      	lsls	r4, r3, #31
 80144fa:	d50e      	bpl.n	801451a <_vfiprintf_r+0x6a>
 80144fc:	f04f 30ff 	mov.w	r0, #4294967295
 8014500:	b01d      	add	sp, #116	; 0x74
 8014502:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014506:	4b7b      	ldr	r3, [pc, #492]	; (80146f4 <_vfiprintf_r+0x244>)
 8014508:	429d      	cmp	r5, r3
 801450a:	d101      	bne.n	8014510 <_vfiprintf_r+0x60>
 801450c:	68b5      	ldr	r5, [r6, #8]
 801450e:	e7df      	b.n	80144d0 <_vfiprintf_r+0x20>
 8014510:	4b79      	ldr	r3, [pc, #484]	; (80146f8 <_vfiprintf_r+0x248>)
 8014512:	429d      	cmp	r5, r3
 8014514:	bf08      	it	eq
 8014516:	68f5      	ldreq	r5, [r6, #12]
 8014518:	e7da      	b.n	80144d0 <_vfiprintf_r+0x20>
 801451a:	89ab      	ldrh	r3, [r5, #12]
 801451c:	0598      	lsls	r0, r3, #22
 801451e:	d4ed      	bmi.n	80144fc <_vfiprintf_r+0x4c>
 8014520:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014522:	f000 fdfa 	bl	801511a <__retarget_lock_release_recursive>
 8014526:	e7e9      	b.n	80144fc <_vfiprintf_r+0x4c>
 8014528:	2300      	movs	r3, #0
 801452a:	9309      	str	r3, [sp, #36]	; 0x24
 801452c:	2320      	movs	r3, #32
 801452e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014532:	f8cd 800c 	str.w	r8, [sp, #12]
 8014536:	2330      	movs	r3, #48	; 0x30
 8014538:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80146fc <_vfiprintf_r+0x24c>
 801453c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014540:	f04f 0901 	mov.w	r9, #1
 8014544:	4623      	mov	r3, r4
 8014546:	469a      	mov	sl, r3
 8014548:	f813 2b01 	ldrb.w	r2, [r3], #1
 801454c:	b10a      	cbz	r2, 8014552 <_vfiprintf_r+0xa2>
 801454e:	2a25      	cmp	r2, #37	; 0x25
 8014550:	d1f9      	bne.n	8014546 <_vfiprintf_r+0x96>
 8014552:	ebba 0b04 	subs.w	fp, sl, r4
 8014556:	d00b      	beq.n	8014570 <_vfiprintf_r+0xc0>
 8014558:	465b      	mov	r3, fp
 801455a:	4622      	mov	r2, r4
 801455c:	4629      	mov	r1, r5
 801455e:	4630      	mov	r0, r6
 8014560:	f7ff ff93 	bl	801448a <__sfputs_r>
 8014564:	3001      	adds	r0, #1
 8014566:	f000 80aa 	beq.w	80146be <_vfiprintf_r+0x20e>
 801456a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801456c:	445a      	add	r2, fp
 801456e:	9209      	str	r2, [sp, #36]	; 0x24
 8014570:	f89a 3000 	ldrb.w	r3, [sl]
 8014574:	2b00      	cmp	r3, #0
 8014576:	f000 80a2 	beq.w	80146be <_vfiprintf_r+0x20e>
 801457a:	2300      	movs	r3, #0
 801457c:	f04f 32ff 	mov.w	r2, #4294967295
 8014580:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014584:	f10a 0a01 	add.w	sl, sl, #1
 8014588:	9304      	str	r3, [sp, #16]
 801458a:	9307      	str	r3, [sp, #28]
 801458c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014590:	931a      	str	r3, [sp, #104]	; 0x68
 8014592:	4654      	mov	r4, sl
 8014594:	2205      	movs	r2, #5
 8014596:	f814 1b01 	ldrb.w	r1, [r4], #1
 801459a:	4858      	ldr	r0, [pc, #352]	; (80146fc <_vfiprintf_r+0x24c>)
 801459c:	f7eb fe50 	bl	8000240 <memchr>
 80145a0:	9a04      	ldr	r2, [sp, #16]
 80145a2:	b9d8      	cbnz	r0, 80145dc <_vfiprintf_r+0x12c>
 80145a4:	06d1      	lsls	r1, r2, #27
 80145a6:	bf44      	itt	mi
 80145a8:	2320      	movmi	r3, #32
 80145aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80145ae:	0713      	lsls	r3, r2, #28
 80145b0:	bf44      	itt	mi
 80145b2:	232b      	movmi	r3, #43	; 0x2b
 80145b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80145b8:	f89a 3000 	ldrb.w	r3, [sl]
 80145bc:	2b2a      	cmp	r3, #42	; 0x2a
 80145be:	d015      	beq.n	80145ec <_vfiprintf_r+0x13c>
 80145c0:	9a07      	ldr	r2, [sp, #28]
 80145c2:	4654      	mov	r4, sl
 80145c4:	2000      	movs	r0, #0
 80145c6:	f04f 0c0a 	mov.w	ip, #10
 80145ca:	4621      	mov	r1, r4
 80145cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80145d0:	3b30      	subs	r3, #48	; 0x30
 80145d2:	2b09      	cmp	r3, #9
 80145d4:	d94e      	bls.n	8014674 <_vfiprintf_r+0x1c4>
 80145d6:	b1b0      	cbz	r0, 8014606 <_vfiprintf_r+0x156>
 80145d8:	9207      	str	r2, [sp, #28]
 80145da:	e014      	b.n	8014606 <_vfiprintf_r+0x156>
 80145dc:	eba0 0308 	sub.w	r3, r0, r8
 80145e0:	fa09 f303 	lsl.w	r3, r9, r3
 80145e4:	4313      	orrs	r3, r2
 80145e6:	9304      	str	r3, [sp, #16]
 80145e8:	46a2      	mov	sl, r4
 80145ea:	e7d2      	b.n	8014592 <_vfiprintf_r+0xe2>
 80145ec:	9b03      	ldr	r3, [sp, #12]
 80145ee:	1d19      	adds	r1, r3, #4
 80145f0:	681b      	ldr	r3, [r3, #0]
 80145f2:	9103      	str	r1, [sp, #12]
 80145f4:	2b00      	cmp	r3, #0
 80145f6:	bfbb      	ittet	lt
 80145f8:	425b      	neglt	r3, r3
 80145fa:	f042 0202 	orrlt.w	r2, r2, #2
 80145fe:	9307      	strge	r3, [sp, #28]
 8014600:	9307      	strlt	r3, [sp, #28]
 8014602:	bfb8      	it	lt
 8014604:	9204      	strlt	r2, [sp, #16]
 8014606:	7823      	ldrb	r3, [r4, #0]
 8014608:	2b2e      	cmp	r3, #46	; 0x2e
 801460a:	d10c      	bne.n	8014626 <_vfiprintf_r+0x176>
 801460c:	7863      	ldrb	r3, [r4, #1]
 801460e:	2b2a      	cmp	r3, #42	; 0x2a
 8014610:	d135      	bne.n	801467e <_vfiprintf_r+0x1ce>
 8014612:	9b03      	ldr	r3, [sp, #12]
 8014614:	1d1a      	adds	r2, r3, #4
 8014616:	681b      	ldr	r3, [r3, #0]
 8014618:	9203      	str	r2, [sp, #12]
 801461a:	2b00      	cmp	r3, #0
 801461c:	bfb8      	it	lt
 801461e:	f04f 33ff 	movlt.w	r3, #4294967295
 8014622:	3402      	adds	r4, #2
 8014624:	9305      	str	r3, [sp, #20]
 8014626:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801470c <_vfiprintf_r+0x25c>
 801462a:	7821      	ldrb	r1, [r4, #0]
 801462c:	2203      	movs	r2, #3
 801462e:	4650      	mov	r0, sl
 8014630:	f7eb fe06 	bl	8000240 <memchr>
 8014634:	b140      	cbz	r0, 8014648 <_vfiprintf_r+0x198>
 8014636:	2340      	movs	r3, #64	; 0x40
 8014638:	eba0 000a 	sub.w	r0, r0, sl
 801463c:	fa03 f000 	lsl.w	r0, r3, r0
 8014640:	9b04      	ldr	r3, [sp, #16]
 8014642:	4303      	orrs	r3, r0
 8014644:	3401      	adds	r4, #1
 8014646:	9304      	str	r3, [sp, #16]
 8014648:	f814 1b01 	ldrb.w	r1, [r4], #1
 801464c:	482c      	ldr	r0, [pc, #176]	; (8014700 <_vfiprintf_r+0x250>)
 801464e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014652:	2206      	movs	r2, #6
 8014654:	f7eb fdf4 	bl	8000240 <memchr>
 8014658:	2800      	cmp	r0, #0
 801465a:	d03f      	beq.n	80146dc <_vfiprintf_r+0x22c>
 801465c:	4b29      	ldr	r3, [pc, #164]	; (8014704 <_vfiprintf_r+0x254>)
 801465e:	bb1b      	cbnz	r3, 80146a8 <_vfiprintf_r+0x1f8>
 8014660:	9b03      	ldr	r3, [sp, #12]
 8014662:	3307      	adds	r3, #7
 8014664:	f023 0307 	bic.w	r3, r3, #7
 8014668:	3308      	adds	r3, #8
 801466a:	9303      	str	r3, [sp, #12]
 801466c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801466e:	443b      	add	r3, r7
 8014670:	9309      	str	r3, [sp, #36]	; 0x24
 8014672:	e767      	b.n	8014544 <_vfiprintf_r+0x94>
 8014674:	fb0c 3202 	mla	r2, ip, r2, r3
 8014678:	460c      	mov	r4, r1
 801467a:	2001      	movs	r0, #1
 801467c:	e7a5      	b.n	80145ca <_vfiprintf_r+0x11a>
 801467e:	2300      	movs	r3, #0
 8014680:	3401      	adds	r4, #1
 8014682:	9305      	str	r3, [sp, #20]
 8014684:	4619      	mov	r1, r3
 8014686:	f04f 0c0a 	mov.w	ip, #10
 801468a:	4620      	mov	r0, r4
 801468c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014690:	3a30      	subs	r2, #48	; 0x30
 8014692:	2a09      	cmp	r2, #9
 8014694:	d903      	bls.n	801469e <_vfiprintf_r+0x1ee>
 8014696:	2b00      	cmp	r3, #0
 8014698:	d0c5      	beq.n	8014626 <_vfiprintf_r+0x176>
 801469a:	9105      	str	r1, [sp, #20]
 801469c:	e7c3      	b.n	8014626 <_vfiprintf_r+0x176>
 801469e:	fb0c 2101 	mla	r1, ip, r1, r2
 80146a2:	4604      	mov	r4, r0
 80146a4:	2301      	movs	r3, #1
 80146a6:	e7f0      	b.n	801468a <_vfiprintf_r+0x1da>
 80146a8:	ab03      	add	r3, sp, #12
 80146aa:	9300      	str	r3, [sp, #0]
 80146ac:	462a      	mov	r2, r5
 80146ae:	4b16      	ldr	r3, [pc, #88]	; (8014708 <_vfiprintf_r+0x258>)
 80146b0:	a904      	add	r1, sp, #16
 80146b2:	4630      	mov	r0, r6
 80146b4:	f7fb fdfc 	bl	80102b0 <_printf_float>
 80146b8:	4607      	mov	r7, r0
 80146ba:	1c78      	adds	r0, r7, #1
 80146bc:	d1d6      	bne.n	801466c <_vfiprintf_r+0x1bc>
 80146be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80146c0:	07d9      	lsls	r1, r3, #31
 80146c2:	d405      	bmi.n	80146d0 <_vfiprintf_r+0x220>
 80146c4:	89ab      	ldrh	r3, [r5, #12]
 80146c6:	059a      	lsls	r2, r3, #22
 80146c8:	d402      	bmi.n	80146d0 <_vfiprintf_r+0x220>
 80146ca:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80146cc:	f000 fd25 	bl	801511a <__retarget_lock_release_recursive>
 80146d0:	89ab      	ldrh	r3, [r5, #12]
 80146d2:	065b      	lsls	r3, r3, #25
 80146d4:	f53f af12 	bmi.w	80144fc <_vfiprintf_r+0x4c>
 80146d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80146da:	e711      	b.n	8014500 <_vfiprintf_r+0x50>
 80146dc:	ab03      	add	r3, sp, #12
 80146de:	9300      	str	r3, [sp, #0]
 80146e0:	462a      	mov	r2, r5
 80146e2:	4b09      	ldr	r3, [pc, #36]	; (8014708 <_vfiprintf_r+0x258>)
 80146e4:	a904      	add	r1, sp, #16
 80146e6:	4630      	mov	r0, r6
 80146e8:	f7fc f886 	bl	80107f8 <_printf_i>
 80146ec:	e7e4      	b.n	80146b8 <_vfiprintf_r+0x208>
 80146ee:	bf00      	nop
 80146f0:	08016dc0 	.word	0x08016dc0
 80146f4:	08016de0 	.word	0x08016de0
 80146f8:	08016da0 	.word	0x08016da0
 80146fc:	08016d74 	.word	0x08016d74
 8014700:	08016d7e 	.word	0x08016d7e
 8014704:	080102b1 	.word	0x080102b1
 8014708:	0801448b 	.word	0x0801448b
 801470c:	08016d7a 	.word	0x08016d7a

08014710 <_scanf_chars>:
 8014710:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014714:	4615      	mov	r5, r2
 8014716:	688a      	ldr	r2, [r1, #8]
 8014718:	4680      	mov	r8, r0
 801471a:	460c      	mov	r4, r1
 801471c:	b932      	cbnz	r2, 801472c <_scanf_chars+0x1c>
 801471e:	698a      	ldr	r2, [r1, #24]
 8014720:	2a00      	cmp	r2, #0
 8014722:	bf0c      	ite	eq
 8014724:	2201      	moveq	r2, #1
 8014726:	f04f 32ff 	movne.w	r2, #4294967295
 801472a:	608a      	str	r2, [r1, #8]
 801472c:	6822      	ldr	r2, [r4, #0]
 801472e:	f8df 9090 	ldr.w	r9, [pc, #144]	; 80147c0 <_scanf_chars+0xb0>
 8014732:	06d1      	lsls	r1, r2, #27
 8014734:	bf5f      	itttt	pl
 8014736:	681a      	ldrpl	r2, [r3, #0]
 8014738:	1d11      	addpl	r1, r2, #4
 801473a:	6019      	strpl	r1, [r3, #0]
 801473c:	6816      	ldrpl	r6, [r2, #0]
 801473e:	2700      	movs	r7, #0
 8014740:	69a0      	ldr	r0, [r4, #24]
 8014742:	b188      	cbz	r0, 8014768 <_scanf_chars+0x58>
 8014744:	2801      	cmp	r0, #1
 8014746:	d107      	bne.n	8014758 <_scanf_chars+0x48>
 8014748:	682a      	ldr	r2, [r5, #0]
 801474a:	7811      	ldrb	r1, [r2, #0]
 801474c:	6962      	ldr	r2, [r4, #20]
 801474e:	5c52      	ldrb	r2, [r2, r1]
 8014750:	b952      	cbnz	r2, 8014768 <_scanf_chars+0x58>
 8014752:	2f00      	cmp	r7, #0
 8014754:	d031      	beq.n	80147ba <_scanf_chars+0xaa>
 8014756:	e022      	b.n	801479e <_scanf_chars+0x8e>
 8014758:	2802      	cmp	r0, #2
 801475a:	d120      	bne.n	801479e <_scanf_chars+0x8e>
 801475c:	682b      	ldr	r3, [r5, #0]
 801475e:	781b      	ldrb	r3, [r3, #0]
 8014760:	f813 3009 	ldrb.w	r3, [r3, r9]
 8014764:	071b      	lsls	r3, r3, #28
 8014766:	d41a      	bmi.n	801479e <_scanf_chars+0x8e>
 8014768:	6823      	ldr	r3, [r4, #0]
 801476a:	06da      	lsls	r2, r3, #27
 801476c:	bf5e      	ittt	pl
 801476e:	682b      	ldrpl	r3, [r5, #0]
 8014770:	781b      	ldrbpl	r3, [r3, #0]
 8014772:	f806 3b01 	strbpl.w	r3, [r6], #1
 8014776:	682a      	ldr	r2, [r5, #0]
 8014778:	686b      	ldr	r3, [r5, #4]
 801477a:	3201      	adds	r2, #1
 801477c:	602a      	str	r2, [r5, #0]
 801477e:	68a2      	ldr	r2, [r4, #8]
 8014780:	3b01      	subs	r3, #1
 8014782:	3a01      	subs	r2, #1
 8014784:	606b      	str	r3, [r5, #4]
 8014786:	3701      	adds	r7, #1
 8014788:	60a2      	str	r2, [r4, #8]
 801478a:	b142      	cbz	r2, 801479e <_scanf_chars+0x8e>
 801478c:	2b00      	cmp	r3, #0
 801478e:	dcd7      	bgt.n	8014740 <_scanf_chars+0x30>
 8014790:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8014794:	4629      	mov	r1, r5
 8014796:	4640      	mov	r0, r8
 8014798:	4798      	blx	r3
 801479a:	2800      	cmp	r0, #0
 801479c:	d0d0      	beq.n	8014740 <_scanf_chars+0x30>
 801479e:	6823      	ldr	r3, [r4, #0]
 80147a0:	f013 0310 	ands.w	r3, r3, #16
 80147a4:	d105      	bne.n	80147b2 <_scanf_chars+0xa2>
 80147a6:	68e2      	ldr	r2, [r4, #12]
 80147a8:	3201      	adds	r2, #1
 80147aa:	60e2      	str	r2, [r4, #12]
 80147ac:	69a2      	ldr	r2, [r4, #24]
 80147ae:	b102      	cbz	r2, 80147b2 <_scanf_chars+0xa2>
 80147b0:	7033      	strb	r3, [r6, #0]
 80147b2:	6923      	ldr	r3, [r4, #16]
 80147b4:	443b      	add	r3, r7
 80147b6:	6123      	str	r3, [r4, #16]
 80147b8:	2000      	movs	r0, #0
 80147ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80147be:	bf00      	nop
 80147c0:	08016a29 	.word	0x08016a29

080147c4 <_scanf_i>:
 80147c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80147c8:	4698      	mov	r8, r3
 80147ca:	4b76      	ldr	r3, [pc, #472]	; (80149a4 <_scanf_i+0x1e0>)
 80147cc:	460c      	mov	r4, r1
 80147ce:	4682      	mov	sl, r0
 80147d0:	4616      	mov	r6, r2
 80147d2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80147d6:	b087      	sub	sp, #28
 80147d8:	ab03      	add	r3, sp, #12
 80147da:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80147de:	4b72      	ldr	r3, [pc, #456]	; (80149a8 <_scanf_i+0x1e4>)
 80147e0:	69a1      	ldr	r1, [r4, #24]
 80147e2:	4a72      	ldr	r2, [pc, #456]	; (80149ac <_scanf_i+0x1e8>)
 80147e4:	2903      	cmp	r1, #3
 80147e6:	bf18      	it	ne
 80147e8:	461a      	movne	r2, r3
 80147ea:	68a3      	ldr	r3, [r4, #8]
 80147ec:	9201      	str	r2, [sp, #4]
 80147ee:	1e5a      	subs	r2, r3, #1
 80147f0:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80147f4:	bf88      	it	hi
 80147f6:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80147fa:	4627      	mov	r7, r4
 80147fc:	bf82      	ittt	hi
 80147fe:	eb03 0905 	addhi.w	r9, r3, r5
 8014802:	f240 135d 	movwhi	r3, #349	; 0x15d
 8014806:	60a3      	strhi	r3, [r4, #8]
 8014808:	f857 3b1c 	ldr.w	r3, [r7], #28
 801480c:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8014810:	bf98      	it	ls
 8014812:	f04f 0900 	movls.w	r9, #0
 8014816:	6023      	str	r3, [r4, #0]
 8014818:	463d      	mov	r5, r7
 801481a:	f04f 0b00 	mov.w	fp, #0
 801481e:	6831      	ldr	r1, [r6, #0]
 8014820:	ab03      	add	r3, sp, #12
 8014822:	7809      	ldrb	r1, [r1, #0]
 8014824:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8014828:	2202      	movs	r2, #2
 801482a:	f7eb fd09 	bl	8000240 <memchr>
 801482e:	b328      	cbz	r0, 801487c <_scanf_i+0xb8>
 8014830:	f1bb 0f01 	cmp.w	fp, #1
 8014834:	d159      	bne.n	80148ea <_scanf_i+0x126>
 8014836:	6862      	ldr	r2, [r4, #4]
 8014838:	b92a      	cbnz	r2, 8014846 <_scanf_i+0x82>
 801483a:	6822      	ldr	r2, [r4, #0]
 801483c:	2308      	movs	r3, #8
 801483e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8014842:	6063      	str	r3, [r4, #4]
 8014844:	6022      	str	r2, [r4, #0]
 8014846:	6822      	ldr	r2, [r4, #0]
 8014848:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 801484c:	6022      	str	r2, [r4, #0]
 801484e:	68a2      	ldr	r2, [r4, #8]
 8014850:	1e51      	subs	r1, r2, #1
 8014852:	60a1      	str	r1, [r4, #8]
 8014854:	b192      	cbz	r2, 801487c <_scanf_i+0xb8>
 8014856:	6832      	ldr	r2, [r6, #0]
 8014858:	1c51      	adds	r1, r2, #1
 801485a:	6031      	str	r1, [r6, #0]
 801485c:	7812      	ldrb	r2, [r2, #0]
 801485e:	f805 2b01 	strb.w	r2, [r5], #1
 8014862:	6872      	ldr	r2, [r6, #4]
 8014864:	3a01      	subs	r2, #1
 8014866:	2a00      	cmp	r2, #0
 8014868:	6072      	str	r2, [r6, #4]
 801486a:	dc07      	bgt.n	801487c <_scanf_i+0xb8>
 801486c:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8014870:	4631      	mov	r1, r6
 8014872:	4650      	mov	r0, sl
 8014874:	4790      	blx	r2
 8014876:	2800      	cmp	r0, #0
 8014878:	f040 8085 	bne.w	8014986 <_scanf_i+0x1c2>
 801487c:	f10b 0b01 	add.w	fp, fp, #1
 8014880:	f1bb 0f03 	cmp.w	fp, #3
 8014884:	d1cb      	bne.n	801481e <_scanf_i+0x5a>
 8014886:	6863      	ldr	r3, [r4, #4]
 8014888:	b90b      	cbnz	r3, 801488e <_scanf_i+0xca>
 801488a:	230a      	movs	r3, #10
 801488c:	6063      	str	r3, [r4, #4]
 801488e:	6863      	ldr	r3, [r4, #4]
 8014890:	4947      	ldr	r1, [pc, #284]	; (80149b0 <_scanf_i+0x1ec>)
 8014892:	6960      	ldr	r0, [r4, #20]
 8014894:	1ac9      	subs	r1, r1, r3
 8014896:	f000 f8b7 	bl	8014a08 <__sccl>
 801489a:	f04f 0b00 	mov.w	fp, #0
 801489e:	68a3      	ldr	r3, [r4, #8]
 80148a0:	6822      	ldr	r2, [r4, #0]
 80148a2:	2b00      	cmp	r3, #0
 80148a4:	d03d      	beq.n	8014922 <_scanf_i+0x15e>
 80148a6:	6831      	ldr	r1, [r6, #0]
 80148a8:	6960      	ldr	r0, [r4, #20]
 80148aa:	f891 c000 	ldrb.w	ip, [r1]
 80148ae:	f810 000c 	ldrb.w	r0, [r0, ip]
 80148b2:	2800      	cmp	r0, #0
 80148b4:	d035      	beq.n	8014922 <_scanf_i+0x15e>
 80148b6:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80148ba:	d124      	bne.n	8014906 <_scanf_i+0x142>
 80148bc:	0510      	lsls	r0, r2, #20
 80148be:	d522      	bpl.n	8014906 <_scanf_i+0x142>
 80148c0:	f10b 0b01 	add.w	fp, fp, #1
 80148c4:	f1b9 0f00 	cmp.w	r9, #0
 80148c8:	d003      	beq.n	80148d2 <_scanf_i+0x10e>
 80148ca:	3301      	adds	r3, #1
 80148cc:	f109 39ff 	add.w	r9, r9, #4294967295
 80148d0:	60a3      	str	r3, [r4, #8]
 80148d2:	6873      	ldr	r3, [r6, #4]
 80148d4:	3b01      	subs	r3, #1
 80148d6:	2b00      	cmp	r3, #0
 80148d8:	6073      	str	r3, [r6, #4]
 80148da:	dd1b      	ble.n	8014914 <_scanf_i+0x150>
 80148dc:	6833      	ldr	r3, [r6, #0]
 80148de:	3301      	adds	r3, #1
 80148e0:	6033      	str	r3, [r6, #0]
 80148e2:	68a3      	ldr	r3, [r4, #8]
 80148e4:	3b01      	subs	r3, #1
 80148e6:	60a3      	str	r3, [r4, #8]
 80148e8:	e7d9      	b.n	801489e <_scanf_i+0xda>
 80148ea:	f1bb 0f02 	cmp.w	fp, #2
 80148ee:	d1ae      	bne.n	801484e <_scanf_i+0x8a>
 80148f0:	6822      	ldr	r2, [r4, #0]
 80148f2:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80148f6:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80148fa:	d1bf      	bne.n	801487c <_scanf_i+0xb8>
 80148fc:	2310      	movs	r3, #16
 80148fe:	6063      	str	r3, [r4, #4]
 8014900:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8014904:	e7a2      	b.n	801484c <_scanf_i+0x88>
 8014906:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 801490a:	6022      	str	r2, [r4, #0]
 801490c:	780b      	ldrb	r3, [r1, #0]
 801490e:	f805 3b01 	strb.w	r3, [r5], #1
 8014912:	e7de      	b.n	80148d2 <_scanf_i+0x10e>
 8014914:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8014918:	4631      	mov	r1, r6
 801491a:	4650      	mov	r0, sl
 801491c:	4798      	blx	r3
 801491e:	2800      	cmp	r0, #0
 8014920:	d0df      	beq.n	80148e2 <_scanf_i+0x11e>
 8014922:	6823      	ldr	r3, [r4, #0]
 8014924:	05db      	lsls	r3, r3, #23
 8014926:	d50d      	bpl.n	8014944 <_scanf_i+0x180>
 8014928:	42bd      	cmp	r5, r7
 801492a:	d909      	bls.n	8014940 <_scanf_i+0x17c>
 801492c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8014930:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8014934:	4632      	mov	r2, r6
 8014936:	4650      	mov	r0, sl
 8014938:	4798      	blx	r3
 801493a:	f105 39ff 	add.w	r9, r5, #4294967295
 801493e:	464d      	mov	r5, r9
 8014940:	42bd      	cmp	r5, r7
 8014942:	d02d      	beq.n	80149a0 <_scanf_i+0x1dc>
 8014944:	6822      	ldr	r2, [r4, #0]
 8014946:	f012 0210 	ands.w	r2, r2, #16
 801494a:	d113      	bne.n	8014974 <_scanf_i+0x1b0>
 801494c:	702a      	strb	r2, [r5, #0]
 801494e:	6863      	ldr	r3, [r4, #4]
 8014950:	9e01      	ldr	r6, [sp, #4]
 8014952:	4639      	mov	r1, r7
 8014954:	4650      	mov	r0, sl
 8014956:	47b0      	blx	r6
 8014958:	6821      	ldr	r1, [r4, #0]
 801495a:	f8d8 3000 	ldr.w	r3, [r8]
 801495e:	f011 0f20 	tst.w	r1, #32
 8014962:	d013      	beq.n	801498c <_scanf_i+0x1c8>
 8014964:	1d1a      	adds	r2, r3, #4
 8014966:	f8c8 2000 	str.w	r2, [r8]
 801496a:	681b      	ldr	r3, [r3, #0]
 801496c:	6018      	str	r0, [r3, #0]
 801496e:	68e3      	ldr	r3, [r4, #12]
 8014970:	3301      	adds	r3, #1
 8014972:	60e3      	str	r3, [r4, #12]
 8014974:	1bed      	subs	r5, r5, r7
 8014976:	44ab      	add	fp, r5
 8014978:	6925      	ldr	r5, [r4, #16]
 801497a:	445d      	add	r5, fp
 801497c:	6125      	str	r5, [r4, #16]
 801497e:	2000      	movs	r0, #0
 8014980:	b007      	add	sp, #28
 8014982:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014986:	f04f 0b00 	mov.w	fp, #0
 801498a:	e7ca      	b.n	8014922 <_scanf_i+0x15e>
 801498c:	1d1a      	adds	r2, r3, #4
 801498e:	f8c8 2000 	str.w	r2, [r8]
 8014992:	681b      	ldr	r3, [r3, #0]
 8014994:	f011 0f01 	tst.w	r1, #1
 8014998:	bf14      	ite	ne
 801499a:	8018      	strhne	r0, [r3, #0]
 801499c:	6018      	streq	r0, [r3, #0]
 801499e:	e7e6      	b.n	801496e <_scanf_i+0x1aa>
 80149a0:	2001      	movs	r0, #1
 80149a2:	e7ed      	b.n	8014980 <_scanf_i+0x1bc>
 80149a4:	080168c4 	.word	0x080168c4
 80149a8:	08014b85 	.word	0x08014b85
 80149ac:	08011db5 	.word	0x08011db5
 80149b0:	08016d9e 	.word	0x08016d9e

080149b4 <_read_r>:
 80149b4:	b538      	push	{r3, r4, r5, lr}
 80149b6:	4d07      	ldr	r5, [pc, #28]	; (80149d4 <_read_r+0x20>)
 80149b8:	4604      	mov	r4, r0
 80149ba:	4608      	mov	r0, r1
 80149bc:	4611      	mov	r1, r2
 80149be:	2200      	movs	r2, #0
 80149c0:	602a      	str	r2, [r5, #0]
 80149c2:	461a      	mov	r2, r3
 80149c4:	f7ee fa78 	bl	8002eb8 <_read>
 80149c8:	1c43      	adds	r3, r0, #1
 80149ca:	d102      	bne.n	80149d2 <_read_r+0x1e>
 80149cc:	682b      	ldr	r3, [r5, #0]
 80149ce:	b103      	cbz	r3, 80149d2 <_read_r+0x1e>
 80149d0:	6023      	str	r3, [r4, #0]
 80149d2:	bd38      	pop	{r3, r4, r5, pc}
 80149d4:	2000a194 	.word	0x2000a194

080149d8 <nan>:
 80149d8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80149e0 <nan+0x8>
 80149dc:	4770      	bx	lr
 80149de:	bf00      	nop
 80149e0:	00000000 	.word	0x00000000
 80149e4:	7ff80000 	.word	0x7ff80000

080149e8 <_sbrk_r>:
 80149e8:	b538      	push	{r3, r4, r5, lr}
 80149ea:	4d06      	ldr	r5, [pc, #24]	; (8014a04 <_sbrk_r+0x1c>)
 80149ec:	2300      	movs	r3, #0
 80149ee:	4604      	mov	r4, r0
 80149f0:	4608      	mov	r0, r1
 80149f2:	602b      	str	r3, [r5, #0]
 80149f4:	f7ee face 	bl	8002f94 <_sbrk>
 80149f8:	1c43      	adds	r3, r0, #1
 80149fa:	d102      	bne.n	8014a02 <_sbrk_r+0x1a>
 80149fc:	682b      	ldr	r3, [r5, #0]
 80149fe:	b103      	cbz	r3, 8014a02 <_sbrk_r+0x1a>
 8014a00:	6023      	str	r3, [r4, #0]
 8014a02:	bd38      	pop	{r3, r4, r5, pc}
 8014a04:	2000a194 	.word	0x2000a194

08014a08 <__sccl>:
 8014a08:	b570      	push	{r4, r5, r6, lr}
 8014a0a:	780b      	ldrb	r3, [r1, #0]
 8014a0c:	4604      	mov	r4, r0
 8014a0e:	2b5e      	cmp	r3, #94	; 0x5e
 8014a10:	bf0b      	itete	eq
 8014a12:	784b      	ldrbeq	r3, [r1, #1]
 8014a14:	1c48      	addne	r0, r1, #1
 8014a16:	1c88      	addeq	r0, r1, #2
 8014a18:	2200      	movne	r2, #0
 8014a1a:	bf08      	it	eq
 8014a1c:	2201      	moveq	r2, #1
 8014a1e:	1e61      	subs	r1, r4, #1
 8014a20:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8014a24:	f801 2f01 	strb.w	r2, [r1, #1]!
 8014a28:	42a9      	cmp	r1, r5
 8014a2a:	d1fb      	bne.n	8014a24 <__sccl+0x1c>
 8014a2c:	b90b      	cbnz	r3, 8014a32 <__sccl+0x2a>
 8014a2e:	3801      	subs	r0, #1
 8014a30:	bd70      	pop	{r4, r5, r6, pc}
 8014a32:	f082 0201 	eor.w	r2, r2, #1
 8014a36:	54e2      	strb	r2, [r4, r3]
 8014a38:	4605      	mov	r5, r0
 8014a3a:	4628      	mov	r0, r5
 8014a3c:	f810 1b01 	ldrb.w	r1, [r0], #1
 8014a40:	292d      	cmp	r1, #45	; 0x2d
 8014a42:	d006      	beq.n	8014a52 <__sccl+0x4a>
 8014a44:	295d      	cmp	r1, #93	; 0x5d
 8014a46:	d0f3      	beq.n	8014a30 <__sccl+0x28>
 8014a48:	b909      	cbnz	r1, 8014a4e <__sccl+0x46>
 8014a4a:	4628      	mov	r0, r5
 8014a4c:	e7f0      	b.n	8014a30 <__sccl+0x28>
 8014a4e:	460b      	mov	r3, r1
 8014a50:	e7f1      	b.n	8014a36 <__sccl+0x2e>
 8014a52:	786e      	ldrb	r6, [r5, #1]
 8014a54:	2e5d      	cmp	r6, #93	; 0x5d
 8014a56:	d0fa      	beq.n	8014a4e <__sccl+0x46>
 8014a58:	42b3      	cmp	r3, r6
 8014a5a:	dcf8      	bgt.n	8014a4e <__sccl+0x46>
 8014a5c:	3502      	adds	r5, #2
 8014a5e:	4619      	mov	r1, r3
 8014a60:	3101      	adds	r1, #1
 8014a62:	428e      	cmp	r6, r1
 8014a64:	5462      	strb	r2, [r4, r1]
 8014a66:	dcfb      	bgt.n	8014a60 <__sccl+0x58>
 8014a68:	1af1      	subs	r1, r6, r3
 8014a6a:	3901      	subs	r1, #1
 8014a6c:	1c58      	adds	r0, r3, #1
 8014a6e:	42b3      	cmp	r3, r6
 8014a70:	bfa8      	it	ge
 8014a72:	2100      	movge	r1, #0
 8014a74:	1843      	adds	r3, r0, r1
 8014a76:	e7e0      	b.n	8014a3a <__sccl+0x32>

08014a78 <strncmp>:
 8014a78:	b510      	push	{r4, lr}
 8014a7a:	b17a      	cbz	r2, 8014a9c <strncmp+0x24>
 8014a7c:	4603      	mov	r3, r0
 8014a7e:	3901      	subs	r1, #1
 8014a80:	1884      	adds	r4, r0, r2
 8014a82:	f813 0b01 	ldrb.w	r0, [r3], #1
 8014a86:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8014a8a:	4290      	cmp	r0, r2
 8014a8c:	d101      	bne.n	8014a92 <strncmp+0x1a>
 8014a8e:	42a3      	cmp	r3, r4
 8014a90:	d101      	bne.n	8014a96 <strncmp+0x1e>
 8014a92:	1a80      	subs	r0, r0, r2
 8014a94:	bd10      	pop	{r4, pc}
 8014a96:	2800      	cmp	r0, #0
 8014a98:	d1f3      	bne.n	8014a82 <strncmp+0xa>
 8014a9a:	e7fa      	b.n	8014a92 <strncmp+0x1a>
 8014a9c:	4610      	mov	r0, r2
 8014a9e:	e7f9      	b.n	8014a94 <strncmp+0x1c>

08014aa0 <_strtoul_l.constprop.0>:
 8014aa0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014aa4:	4f36      	ldr	r7, [pc, #216]	; (8014b80 <_strtoul_l.constprop.0+0xe0>)
 8014aa6:	4686      	mov	lr, r0
 8014aa8:	460d      	mov	r5, r1
 8014aaa:	4628      	mov	r0, r5
 8014aac:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014ab0:	5de6      	ldrb	r6, [r4, r7]
 8014ab2:	f016 0608 	ands.w	r6, r6, #8
 8014ab6:	d1f8      	bne.n	8014aaa <_strtoul_l.constprop.0+0xa>
 8014ab8:	2c2d      	cmp	r4, #45	; 0x2d
 8014aba:	d12f      	bne.n	8014b1c <_strtoul_l.constprop.0+0x7c>
 8014abc:	782c      	ldrb	r4, [r5, #0]
 8014abe:	2601      	movs	r6, #1
 8014ac0:	1c85      	adds	r5, r0, #2
 8014ac2:	2b00      	cmp	r3, #0
 8014ac4:	d057      	beq.n	8014b76 <_strtoul_l.constprop.0+0xd6>
 8014ac6:	2b10      	cmp	r3, #16
 8014ac8:	d109      	bne.n	8014ade <_strtoul_l.constprop.0+0x3e>
 8014aca:	2c30      	cmp	r4, #48	; 0x30
 8014acc:	d107      	bne.n	8014ade <_strtoul_l.constprop.0+0x3e>
 8014ace:	7828      	ldrb	r0, [r5, #0]
 8014ad0:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8014ad4:	2858      	cmp	r0, #88	; 0x58
 8014ad6:	d149      	bne.n	8014b6c <_strtoul_l.constprop.0+0xcc>
 8014ad8:	786c      	ldrb	r4, [r5, #1]
 8014ada:	2310      	movs	r3, #16
 8014adc:	3502      	adds	r5, #2
 8014ade:	f04f 38ff 	mov.w	r8, #4294967295
 8014ae2:	2700      	movs	r7, #0
 8014ae4:	fbb8 f8f3 	udiv	r8, r8, r3
 8014ae8:	fb03 f908 	mul.w	r9, r3, r8
 8014aec:	ea6f 0909 	mvn.w	r9, r9
 8014af0:	4638      	mov	r0, r7
 8014af2:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8014af6:	f1bc 0f09 	cmp.w	ip, #9
 8014afa:	d814      	bhi.n	8014b26 <_strtoul_l.constprop.0+0x86>
 8014afc:	4664      	mov	r4, ip
 8014afe:	42a3      	cmp	r3, r4
 8014b00:	dd22      	ble.n	8014b48 <_strtoul_l.constprop.0+0xa8>
 8014b02:	2f00      	cmp	r7, #0
 8014b04:	db1d      	blt.n	8014b42 <_strtoul_l.constprop.0+0xa2>
 8014b06:	4580      	cmp	r8, r0
 8014b08:	d31b      	bcc.n	8014b42 <_strtoul_l.constprop.0+0xa2>
 8014b0a:	d101      	bne.n	8014b10 <_strtoul_l.constprop.0+0x70>
 8014b0c:	45a1      	cmp	r9, r4
 8014b0e:	db18      	blt.n	8014b42 <_strtoul_l.constprop.0+0xa2>
 8014b10:	fb00 4003 	mla	r0, r0, r3, r4
 8014b14:	2701      	movs	r7, #1
 8014b16:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014b1a:	e7ea      	b.n	8014af2 <_strtoul_l.constprop.0+0x52>
 8014b1c:	2c2b      	cmp	r4, #43	; 0x2b
 8014b1e:	bf04      	itt	eq
 8014b20:	782c      	ldrbeq	r4, [r5, #0]
 8014b22:	1c85      	addeq	r5, r0, #2
 8014b24:	e7cd      	b.n	8014ac2 <_strtoul_l.constprop.0+0x22>
 8014b26:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8014b2a:	f1bc 0f19 	cmp.w	ip, #25
 8014b2e:	d801      	bhi.n	8014b34 <_strtoul_l.constprop.0+0x94>
 8014b30:	3c37      	subs	r4, #55	; 0x37
 8014b32:	e7e4      	b.n	8014afe <_strtoul_l.constprop.0+0x5e>
 8014b34:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8014b38:	f1bc 0f19 	cmp.w	ip, #25
 8014b3c:	d804      	bhi.n	8014b48 <_strtoul_l.constprop.0+0xa8>
 8014b3e:	3c57      	subs	r4, #87	; 0x57
 8014b40:	e7dd      	b.n	8014afe <_strtoul_l.constprop.0+0x5e>
 8014b42:	f04f 37ff 	mov.w	r7, #4294967295
 8014b46:	e7e6      	b.n	8014b16 <_strtoul_l.constprop.0+0x76>
 8014b48:	2f00      	cmp	r7, #0
 8014b4a:	da07      	bge.n	8014b5c <_strtoul_l.constprop.0+0xbc>
 8014b4c:	2322      	movs	r3, #34	; 0x22
 8014b4e:	f8ce 3000 	str.w	r3, [lr]
 8014b52:	f04f 30ff 	mov.w	r0, #4294967295
 8014b56:	b932      	cbnz	r2, 8014b66 <_strtoul_l.constprop.0+0xc6>
 8014b58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014b5c:	b106      	cbz	r6, 8014b60 <_strtoul_l.constprop.0+0xc0>
 8014b5e:	4240      	negs	r0, r0
 8014b60:	2a00      	cmp	r2, #0
 8014b62:	d0f9      	beq.n	8014b58 <_strtoul_l.constprop.0+0xb8>
 8014b64:	b107      	cbz	r7, 8014b68 <_strtoul_l.constprop.0+0xc8>
 8014b66:	1e69      	subs	r1, r5, #1
 8014b68:	6011      	str	r1, [r2, #0]
 8014b6a:	e7f5      	b.n	8014b58 <_strtoul_l.constprop.0+0xb8>
 8014b6c:	2430      	movs	r4, #48	; 0x30
 8014b6e:	2b00      	cmp	r3, #0
 8014b70:	d1b5      	bne.n	8014ade <_strtoul_l.constprop.0+0x3e>
 8014b72:	2308      	movs	r3, #8
 8014b74:	e7b3      	b.n	8014ade <_strtoul_l.constprop.0+0x3e>
 8014b76:	2c30      	cmp	r4, #48	; 0x30
 8014b78:	d0a9      	beq.n	8014ace <_strtoul_l.constprop.0+0x2e>
 8014b7a:	230a      	movs	r3, #10
 8014b7c:	e7af      	b.n	8014ade <_strtoul_l.constprop.0+0x3e>
 8014b7e:	bf00      	nop
 8014b80:	08016a29 	.word	0x08016a29

08014b84 <_strtoul_r>:
 8014b84:	f7ff bf8c 	b.w	8014aa0 <_strtoul_l.constprop.0>

08014b88 <__submore>:
 8014b88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014b8c:	460c      	mov	r4, r1
 8014b8e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8014b90:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014b94:	4299      	cmp	r1, r3
 8014b96:	d11d      	bne.n	8014bd4 <__submore+0x4c>
 8014b98:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8014b9c:	f7ff f8bc 	bl	8013d18 <_malloc_r>
 8014ba0:	b918      	cbnz	r0, 8014baa <__submore+0x22>
 8014ba2:	f04f 30ff 	mov.w	r0, #4294967295
 8014ba6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014baa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014bae:	63a3      	str	r3, [r4, #56]	; 0x38
 8014bb0:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8014bb4:	6360      	str	r0, [r4, #52]	; 0x34
 8014bb6:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8014bba:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8014bbe:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8014bc2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8014bc6:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8014bca:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8014bce:	6020      	str	r0, [r4, #0]
 8014bd0:	2000      	movs	r0, #0
 8014bd2:	e7e8      	b.n	8014ba6 <__submore+0x1e>
 8014bd4:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8014bd6:	0077      	lsls	r7, r6, #1
 8014bd8:	463a      	mov	r2, r7
 8014bda:	f000 fb2b 	bl	8015234 <_realloc_r>
 8014bde:	4605      	mov	r5, r0
 8014be0:	2800      	cmp	r0, #0
 8014be2:	d0de      	beq.n	8014ba2 <__submore+0x1a>
 8014be4:	eb00 0806 	add.w	r8, r0, r6
 8014be8:	4601      	mov	r1, r0
 8014bea:	4632      	mov	r2, r6
 8014bec:	4640      	mov	r0, r8
 8014bee:	f7fb faa9 	bl	8010144 <memcpy>
 8014bf2:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8014bf6:	f8c4 8000 	str.w	r8, [r4]
 8014bfa:	e7e9      	b.n	8014bd0 <__submore+0x48>

08014bfc <__swbuf_r>:
 8014bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014bfe:	460e      	mov	r6, r1
 8014c00:	4614      	mov	r4, r2
 8014c02:	4605      	mov	r5, r0
 8014c04:	b118      	cbz	r0, 8014c0e <__swbuf_r+0x12>
 8014c06:	6983      	ldr	r3, [r0, #24]
 8014c08:	b90b      	cbnz	r3, 8014c0e <__swbuf_r+0x12>
 8014c0a:	f000 f9e7 	bl	8014fdc <__sinit>
 8014c0e:	4b21      	ldr	r3, [pc, #132]	; (8014c94 <__swbuf_r+0x98>)
 8014c10:	429c      	cmp	r4, r3
 8014c12:	d12b      	bne.n	8014c6c <__swbuf_r+0x70>
 8014c14:	686c      	ldr	r4, [r5, #4]
 8014c16:	69a3      	ldr	r3, [r4, #24]
 8014c18:	60a3      	str	r3, [r4, #8]
 8014c1a:	89a3      	ldrh	r3, [r4, #12]
 8014c1c:	071a      	lsls	r2, r3, #28
 8014c1e:	d52f      	bpl.n	8014c80 <__swbuf_r+0x84>
 8014c20:	6923      	ldr	r3, [r4, #16]
 8014c22:	b36b      	cbz	r3, 8014c80 <__swbuf_r+0x84>
 8014c24:	6923      	ldr	r3, [r4, #16]
 8014c26:	6820      	ldr	r0, [r4, #0]
 8014c28:	1ac0      	subs	r0, r0, r3
 8014c2a:	6963      	ldr	r3, [r4, #20]
 8014c2c:	b2f6      	uxtb	r6, r6
 8014c2e:	4283      	cmp	r3, r0
 8014c30:	4637      	mov	r7, r6
 8014c32:	dc04      	bgt.n	8014c3e <__swbuf_r+0x42>
 8014c34:	4621      	mov	r1, r4
 8014c36:	4628      	mov	r0, r5
 8014c38:	f000 f93c 	bl	8014eb4 <_fflush_r>
 8014c3c:	bb30      	cbnz	r0, 8014c8c <__swbuf_r+0x90>
 8014c3e:	68a3      	ldr	r3, [r4, #8]
 8014c40:	3b01      	subs	r3, #1
 8014c42:	60a3      	str	r3, [r4, #8]
 8014c44:	6823      	ldr	r3, [r4, #0]
 8014c46:	1c5a      	adds	r2, r3, #1
 8014c48:	6022      	str	r2, [r4, #0]
 8014c4a:	701e      	strb	r6, [r3, #0]
 8014c4c:	6963      	ldr	r3, [r4, #20]
 8014c4e:	3001      	adds	r0, #1
 8014c50:	4283      	cmp	r3, r0
 8014c52:	d004      	beq.n	8014c5e <__swbuf_r+0x62>
 8014c54:	89a3      	ldrh	r3, [r4, #12]
 8014c56:	07db      	lsls	r3, r3, #31
 8014c58:	d506      	bpl.n	8014c68 <__swbuf_r+0x6c>
 8014c5a:	2e0a      	cmp	r6, #10
 8014c5c:	d104      	bne.n	8014c68 <__swbuf_r+0x6c>
 8014c5e:	4621      	mov	r1, r4
 8014c60:	4628      	mov	r0, r5
 8014c62:	f000 f927 	bl	8014eb4 <_fflush_r>
 8014c66:	b988      	cbnz	r0, 8014c8c <__swbuf_r+0x90>
 8014c68:	4638      	mov	r0, r7
 8014c6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014c6c:	4b0a      	ldr	r3, [pc, #40]	; (8014c98 <__swbuf_r+0x9c>)
 8014c6e:	429c      	cmp	r4, r3
 8014c70:	d101      	bne.n	8014c76 <__swbuf_r+0x7a>
 8014c72:	68ac      	ldr	r4, [r5, #8]
 8014c74:	e7cf      	b.n	8014c16 <__swbuf_r+0x1a>
 8014c76:	4b09      	ldr	r3, [pc, #36]	; (8014c9c <__swbuf_r+0xa0>)
 8014c78:	429c      	cmp	r4, r3
 8014c7a:	bf08      	it	eq
 8014c7c:	68ec      	ldreq	r4, [r5, #12]
 8014c7e:	e7ca      	b.n	8014c16 <__swbuf_r+0x1a>
 8014c80:	4621      	mov	r1, r4
 8014c82:	4628      	mov	r0, r5
 8014c84:	f000 f81a 	bl	8014cbc <__swsetup_r>
 8014c88:	2800      	cmp	r0, #0
 8014c8a:	d0cb      	beq.n	8014c24 <__swbuf_r+0x28>
 8014c8c:	f04f 37ff 	mov.w	r7, #4294967295
 8014c90:	e7ea      	b.n	8014c68 <__swbuf_r+0x6c>
 8014c92:	bf00      	nop
 8014c94:	08016dc0 	.word	0x08016dc0
 8014c98:	08016de0 	.word	0x08016de0
 8014c9c:	08016da0 	.word	0x08016da0

08014ca0 <__ascii_wctomb>:
 8014ca0:	b149      	cbz	r1, 8014cb6 <__ascii_wctomb+0x16>
 8014ca2:	2aff      	cmp	r2, #255	; 0xff
 8014ca4:	bf85      	ittet	hi
 8014ca6:	238a      	movhi	r3, #138	; 0x8a
 8014ca8:	6003      	strhi	r3, [r0, #0]
 8014caa:	700a      	strbls	r2, [r1, #0]
 8014cac:	f04f 30ff 	movhi.w	r0, #4294967295
 8014cb0:	bf98      	it	ls
 8014cb2:	2001      	movls	r0, #1
 8014cb4:	4770      	bx	lr
 8014cb6:	4608      	mov	r0, r1
 8014cb8:	4770      	bx	lr
	...

08014cbc <__swsetup_r>:
 8014cbc:	4b32      	ldr	r3, [pc, #200]	; (8014d88 <__swsetup_r+0xcc>)
 8014cbe:	b570      	push	{r4, r5, r6, lr}
 8014cc0:	681d      	ldr	r5, [r3, #0]
 8014cc2:	4606      	mov	r6, r0
 8014cc4:	460c      	mov	r4, r1
 8014cc6:	b125      	cbz	r5, 8014cd2 <__swsetup_r+0x16>
 8014cc8:	69ab      	ldr	r3, [r5, #24]
 8014cca:	b913      	cbnz	r3, 8014cd2 <__swsetup_r+0x16>
 8014ccc:	4628      	mov	r0, r5
 8014cce:	f000 f985 	bl	8014fdc <__sinit>
 8014cd2:	4b2e      	ldr	r3, [pc, #184]	; (8014d8c <__swsetup_r+0xd0>)
 8014cd4:	429c      	cmp	r4, r3
 8014cd6:	d10f      	bne.n	8014cf8 <__swsetup_r+0x3c>
 8014cd8:	686c      	ldr	r4, [r5, #4]
 8014cda:	89a3      	ldrh	r3, [r4, #12]
 8014cdc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014ce0:	0719      	lsls	r1, r3, #28
 8014ce2:	d42c      	bmi.n	8014d3e <__swsetup_r+0x82>
 8014ce4:	06dd      	lsls	r5, r3, #27
 8014ce6:	d411      	bmi.n	8014d0c <__swsetup_r+0x50>
 8014ce8:	2309      	movs	r3, #9
 8014cea:	6033      	str	r3, [r6, #0]
 8014cec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8014cf0:	81a3      	strh	r3, [r4, #12]
 8014cf2:	f04f 30ff 	mov.w	r0, #4294967295
 8014cf6:	e03e      	b.n	8014d76 <__swsetup_r+0xba>
 8014cf8:	4b25      	ldr	r3, [pc, #148]	; (8014d90 <__swsetup_r+0xd4>)
 8014cfa:	429c      	cmp	r4, r3
 8014cfc:	d101      	bne.n	8014d02 <__swsetup_r+0x46>
 8014cfe:	68ac      	ldr	r4, [r5, #8]
 8014d00:	e7eb      	b.n	8014cda <__swsetup_r+0x1e>
 8014d02:	4b24      	ldr	r3, [pc, #144]	; (8014d94 <__swsetup_r+0xd8>)
 8014d04:	429c      	cmp	r4, r3
 8014d06:	bf08      	it	eq
 8014d08:	68ec      	ldreq	r4, [r5, #12]
 8014d0a:	e7e6      	b.n	8014cda <__swsetup_r+0x1e>
 8014d0c:	0758      	lsls	r0, r3, #29
 8014d0e:	d512      	bpl.n	8014d36 <__swsetup_r+0x7a>
 8014d10:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014d12:	b141      	cbz	r1, 8014d26 <__swsetup_r+0x6a>
 8014d14:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014d18:	4299      	cmp	r1, r3
 8014d1a:	d002      	beq.n	8014d22 <__swsetup_r+0x66>
 8014d1c:	4630      	mov	r0, r6
 8014d1e:	f7fe ff8f 	bl	8013c40 <_free_r>
 8014d22:	2300      	movs	r3, #0
 8014d24:	6363      	str	r3, [r4, #52]	; 0x34
 8014d26:	89a3      	ldrh	r3, [r4, #12]
 8014d28:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8014d2c:	81a3      	strh	r3, [r4, #12]
 8014d2e:	2300      	movs	r3, #0
 8014d30:	6063      	str	r3, [r4, #4]
 8014d32:	6923      	ldr	r3, [r4, #16]
 8014d34:	6023      	str	r3, [r4, #0]
 8014d36:	89a3      	ldrh	r3, [r4, #12]
 8014d38:	f043 0308 	orr.w	r3, r3, #8
 8014d3c:	81a3      	strh	r3, [r4, #12]
 8014d3e:	6923      	ldr	r3, [r4, #16]
 8014d40:	b94b      	cbnz	r3, 8014d56 <__swsetup_r+0x9a>
 8014d42:	89a3      	ldrh	r3, [r4, #12]
 8014d44:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8014d48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014d4c:	d003      	beq.n	8014d56 <__swsetup_r+0x9a>
 8014d4e:	4621      	mov	r1, r4
 8014d50:	4630      	mov	r0, r6
 8014d52:	f000 fa09 	bl	8015168 <__smakebuf_r>
 8014d56:	89a0      	ldrh	r0, [r4, #12]
 8014d58:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014d5c:	f010 0301 	ands.w	r3, r0, #1
 8014d60:	d00a      	beq.n	8014d78 <__swsetup_r+0xbc>
 8014d62:	2300      	movs	r3, #0
 8014d64:	60a3      	str	r3, [r4, #8]
 8014d66:	6963      	ldr	r3, [r4, #20]
 8014d68:	425b      	negs	r3, r3
 8014d6a:	61a3      	str	r3, [r4, #24]
 8014d6c:	6923      	ldr	r3, [r4, #16]
 8014d6e:	b943      	cbnz	r3, 8014d82 <__swsetup_r+0xc6>
 8014d70:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8014d74:	d1ba      	bne.n	8014cec <__swsetup_r+0x30>
 8014d76:	bd70      	pop	{r4, r5, r6, pc}
 8014d78:	0781      	lsls	r1, r0, #30
 8014d7a:	bf58      	it	pl
 8014d7c:	6963      	ldrpl	r3, [r4, #20]
 8014d7e:	60a3      	str	r3, [r4, #8]
 8014d80:	e7f4      	b.n	8014d6c <__swsetup_r+0xb0>
 8014d82:	2000      	movs	r0, #0
 8014d84:	e7f7      	b.n	8014d76 <__swsetup_r+0xba>
 8014d86:	bf00      	nop
 8014d88:	2000038c 	.word	0x2000038c
 8014d8c:	08016dc0 	.word	0x08016dc0
 8014d90:	08016de0 	.word	0x08016de0
 8014d94:	08016da0 	.word	0x08016da0

08014d98 <abort>:
 8014d98:	b508      	push	{r3, lr}
 8014d9a:	2006      	movs	r0, #6
 8014d9c:	f000 faa2 	bl	80152e4 <raise>
 8014da0:	2001      	movs	r0, #1
 8014da2:	f7ee f87f 	bl	8002ea4 <_exit>
	...

08014da8 <__sflush_r>:
 8014da8:	898a      	ldrh	r2, [r1, #12]
 8014daa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014dae:	4605      	mov	r5, r0
 8014db0:	0710      	lsls	r0, r2, #28
 8014db2:	460c      	mov	r4, r1
 8014db4:	d458      	bmi.n	8014e68 <__sflush_r+0xc0>
 8014db6:	684b      	ldr	r3, [r1, #4]
 8014db8:	2b00      	cmp	r3, #0
 8014dba:	dc05      	bgt.n	8014dc8 <__sflush_r+0x20>
 8014dbc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8014dbe:	2b00      	cmp	r3, #0
 8014dc0:	dc02      	bgt.n	8014dc8 <__sflush_r+0x20>
 8014dc2:	2000      	movs	r0, #0
 8014dc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014dc8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014dca:	2e00      	cmp	r6, #0
 8014dcc:	d0f9      	beq.n	8014dc2 <__sflush_r+0x1a>
 8014dce:	2300      	movs	r3, #0
 8014dd0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8014dd4:	682f      	ldr	r7, [r5, #0]
 8014dd6:	602b      	str	r3, [r5, #0]
 8014dd8:	d032      	beq.n	8014e40 <__sflush_r+0x98>
 8014dda:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8014ddc:	89a3      	ldrh	r3, [r4, #12]
 8014dde:	075a      	lsls	r2, r3, #29
 8014de0:	d505      	bpl.n	8014dee <__sflush_r+0x46>
 8014de2:	6863      	ldr	r3, [r4, #4]
 8014de4:	1ac0      	subs	r0, r0, r3
 8014de6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014de8:	b10b      	cbz	r3, 8014dee <__sflush_r+0x46>
 8014dea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8014dec:	1ac0      	subs	r0, r0, r3
 8014dee:	2300      	movs	r3, #0
 8014df0:	4602      	mov	r2, r0
 8014df2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014df4:	6a21      	ldr	r1, [r4, #32]
 8014df6:	4628      	mov	r0, r5
 8014df8:	47b0      	blx	r6
 8014dfa:	1c43      	adds	r3, r0, #1
 8014dfc:	89a3      	ldrh	r3, [r4, #12]
 8014dfe:	d106      	bne.n	8014e0e <__sflush_r+0x66>
 8014e00:	6829      	ldr	r1, [r5, #0]
 8014e02:	291d      	cmp	r1, #29
 8014e04:	d82c      	bhi.n	8014e60 <__sflush_r+0xb8>
 8014e06:	4a2a      	ldr	r2, [pc, #168]	; (8014eb0 <__sflush_r+0x108>)
 8014e08:	40ca      	lsrs	r2, r1
 8014e0a:	07d6      	lsls	r6, r2, #31
 8014e0c:	d528      	bpl.n	8014e60 <__sflush_r+0xb8>
 8014e0e:	2200      	movs	r2, #0
 8014e10:	6062      	str	r2, [r4, #4]
 8014e12:	04d9      	lsls	r1, r3, #19
 8014e14:	6922      	ldr	r2, [r4, #16]
 8014e16:	6022      	str	r2, [r4, #0]
 8014e18:	d504      	bpl.n	8014e24 <__sflush_r+0x7c>
 8014e1a:	1c42      	adds	r2, r0, #1
 8014e1c:	d101      	bne.n	8014e22 <__sflush_r+0x7a>
 8014e1e:	682b      	ldr	r3, [r5, #0]
 8014e20:	b903      	cbnz	r3, 8014e24 <__sflush_r+0x7c>
 8014e22:	6560      	str	r0, [r4, #84]	; 0x54
 8014e24:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014e26:	602f      	str	r7, [r5, #0]
 8014e28:	2900      	cmp	r1, #0
 8014e2a:	d0ca      	beq.n	8014dc2 <__sflush_r+0x1a>
 8014e2c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014e30:	4299      	cmp	r1, r3
 8014e32:	d002      	beq.n	8014e3a <__sflush_r+0x92>
 8014e34:	4628      	mov	r0, r5
 8014e36:	f7fe ff03 	bl	8013c40 <_free_r>
 8014e3a:	2000      	movs	r0, #0
 8014e3c:	6360      	str	r0, [r4, #52]	; 0x34
 8014e3e:	e7c1      	b.n	8014dc4 <__sflush_r+0x1c>
 8014e40:	6a21      	ldr	r1, [r4, #32]
 8014e42:	2301      	movs	r3, #1
 8014e44:	4628      	mov	r0, r5
 8014e46:	47b0      	blx	r6
 8014e48:	1c41      	adds	r1, r0, #1
 8014e4a:	d1c7      	bne.n	8014ddc <__sflush_r+0x34>
 8014e4c:	682b      	ldr	r3, [r5, #0]
 8014e4e:	2b00      	cmp	r3, #0
 8014e50:	d0c4      	beq.n	8014ddc <__sflush_r+0x34>
 8014e52:	2b1d      	cmp	r3, #29
 8014e54:	d001      	beq.n	8014e5a <__sflush_r+0xb2>
 8014e56:	2b16      	cmp	r3, #22
 8014e58:	d101      	bne.n	8014e5e <__sflush_r+0xb6>
 8014e5a:	602f      	str	r7, [r5, #0]
 8014e5c:	e7b1      	b.n	8014dc2 <__sflush_r+0x1a>
 8014e5e:	89a3      	ldrh	r3, [r4, #12]
 8014e60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014e64:	81a3      	strh	r3, [r4, #12]
 8014e66:	e7ad      	b.n	8014dc4 <__sflush_r+0x1c>
 8014e68:	690f      	ldr	r7, [r1, #16]
 8014e6a:	2f00      	cmp	r7, #0
 8014e6c:	d0a9      	beq.n	8014dc2 <__sflush_r+0x1a>
 8014e6e:	0793      	lsls	r3, r2, #30
 8014e70:	680e      	ldr	r6, [r1, #0]
 8014e72:	bf08      	it	eq
 8014e74:	694b      	ldreq	r3, [r1, #20]
 8014e76:	600f      	str	r7, [r1, #0]
 8014e78:	bf18      	it	ne
 8014e7a:	2300      	movne	r3, #0
 8014e7c:	eba6 0807 	sub.w	r8, r6, r7
 8014e80:	608b      	str	r3, [r1, #8]
 8014e82:	f1b8 0f00 	cmp.w	r8, #0
 8014e86:	dd9c      	ble.n	8014dc2 <__sflush_r+0x1a>
 8014e88:	6a21      	ldr	r1, [r4, #32]
 8014e8a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8014e8c:	4643      	mov	r3, r8
 8014e8e:	463a      	mov	r2, r7
 8014e90:	4628      	mov	r0, r5
 8014e92:	47b0      	blx	r6
 8014e94:	2800      	cmp	r0, #0
 8014e96:	dc06      	bgt.n	8014ea6 <__sflush_r+0xfe>
 8014e98:	89a3      	ldrh	r3, [r4, #12]
 8014e9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014e9e:	81a3      	strh	r3, [r4, #12]
 8014ea0:	f04f 30ff 	mov.w	r0, #4294967295
 8014ea4:	e78e      	b.n	8014dc4 <__sflush_r+0x1c>
 8014ea6:	4407      	add	r7, r0
 8014ea8:	eba8 0800 	sub.w	r8, r8, r0
 8014eac:	e7e9      	b.n	8014e82 <__sflush_r+0xda>
 8014eae:	bf00      	nop
 8014eb0:	20400001 	.word	0x20400001

08014eb4 <_fflush_r>:
 8014eb4:	b538      	push	{r3, r4, r5, lr}
 8014eb6:	690b      	ldr	r3, [r1, #16]
 8014eb8:	4605      	mov	r5, r0
 8014eba:	460c      	mov	r4, r1
 8014ebc:	b913      	cbnz	r3, 8014ec4 <_fflush_r+0x10>
 8014ebe:	2500      	movs	r5, #0
 8014ec0:	4628      	mov	r0, r5
 8014ec2:	bd38      	pop	{r3, r4, r5, pc}
 8014ec4:	b118      	cbz	r0, 8014ece <_fflush_r+0x1a>
 8014ec6:	6983      	ldr	r3, [r0, #24]
 8014ec8:	b90b      	cbnz	r3, 8014ece <_fflush_r+0x1a>
 8014eca:	f000 f887 	bl	8014fdc <__sinit>
 8014ece:	4b14      	ldr	r3, [pc, #80]	; (8014f20 <_fflush_r+0x6c>)
 8014ed0:	429c      	cmp	r4, r3
 8014ed2:	d11b      	bne.n	8014f0c <_fflush_r+0x58>
 8014ed4:	686c      	ldr	r4, [r5, #4]
 8014ed6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014eda:	2b00      	cmp	r3, #0
 8014edc:	d0ef      	beq.n	8014ebe <_fflush_r+0xa>
 8014ede:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8014ee0:	07d0      	lsls	r0, r2, #31
 8014ee2:	d404      	bmi.n	8014eee <_fflush_r+0x3a>
 8014ee4:	0599      	lsls	r1, r3, #22
 8014ee6:	d402      	bmi.n	8014eee <_fflush_r+0x3a>
 8014ee8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014eea:	f000 f915 	bl	8015118 <__retarget_lock_acquire_recursive>
 8014eee:	4628      	mov	r0, r5
 8014ef0:	4621      	mov	r1, r4
 8014ef2:	f7ff ff59 	bl	8014da8 <__sflush_r>
 8014ef6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014ef8:	07da      	lsls	r2, r3, #31
 8014efa:	4605      	mov	r5, r0
 8014efc:	d4e0      	bmi.n	8014ec0 <_fflush_r+0xc>
 8014efe:	89a3      	ldrh	r3, [r4, #12]
 8014f00:	059b      	lsls	r3, r3, #22
 8014f02:	d4dd      	bmi.n	8014ec0 <_fflush_r+0xc>
 8014f04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014f06:	f000 f908 	bl	801511a <__retarget_lock_release_recursive>
 8014f0a:	e7d9      	b.n	8014ec0 <_fflush_r+0xc>
 8014f0c:	4b05      	ldr	r3, [pc, #20]	; (8014f24 <_fflush_r+0x70>)
 8014f0e:	429c      	cmp	r4, r3
 8014f10:	d101      	bne.n	8014f16 <_fflush_r+0x62>
 8014f12:	68ac      	ldr	r4, [r5, #8]
 8014f14:	e7df      	b.n	8014ed6 <_fflush_r+0x22>
 8014f16:	4b04      	ldr	r3, [pc, #16]	; (8014f28 <_fflush_r+0x74>)
 8014f18:	429c      	cmp	r4, r3
 8014f1a:	bf08      	it	eq
 8014f1c:	68ec      	ldreq	r4, [r5, #12]
 8014f1e:	e7da      	b.n	8014ed6 <_fflush_r+0x22>
 8014f20:	08016dc0 	.word	0x08016dc0
 8014f24:	08016de0 	.word	0x08016de0
 8014f28:	08016da0 	.word	0x08016da0

08014f2c <std>:
 8014f2c:	2300      	movs	r3, #0
 8014f2e:	b510      	push	{r4, lr}
 8014f30:	4604      	mov	r4, r0
 8014f32:	e9c0 3300 	strd	r3, r3, [r0]
 8014f36:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8014f3a:	6083      	str	r3, [r0, #8]
 8014f3c:	8181      	strh	r1, [r0, #12]
 8014f3e:	6643      	str	r3, [r0, #100]	; 0x64
 8014f40:	81c2      	strh	r2, [r0, #14]
 8014f42:	6183      	str	r3, [r0, #24]
 8014f44:	4619      	mov	r1, r3
 8014f46:	2208      	movs	r2, #8
 8014f48:	305c      	adds	r0, #92	; 0x5c
 8014f4a:	f7fb f909 	bl	8010160 <memset>
 8014f4e:	4b05      	ldr	r3, [pc, #20]	; (8014f64 <std+0x38>)
 8014f50:	6263      	str	r3, [r4, #36]	; 0x24
 8014f52:	4b05      	ldr	r3, [pc, #20]	; (8014f68 <std+0x3c>)
 8014f54:	62a3      	str	r3, [r4, #40]	; 0x28
 8014f56:	4b05      	ldr	r3, [pc, #20]	; (8014f6c <std+0x40>)
 8014f58:	62e3      	str	r3, [r4, #44]	; 0x2c
 8014f5a:	4b05      	ldr	r3, [pc, #20]	; (8014f70 <std+0x44>)
 8014f5c:	6224      	str	r4, [r4, #32]
 8014f5e:	6323      	str	r3, [r4, #48]	; 0x30
 8014f60:	bd10      	pop	{r4, pc}
 8014f62:	bf00      	nop
 8014f64:	08010f09 	.word	0x08010f09
 8014f68:	08010f2f 	.word	0x08010f2f
 8014f6c:	08010f67 	.word	0x08010f67
 8014f70:	08010f8b 	.word	0x08010f8b

08014f74 <_cleanup_r>:
 8014f74:	4901      	ldr	r1, [pc, #4]	; (8014f7c <_cleanup_r+0x8>)
 8014f76:	f000 b8af 	b.w	80150d8 <_fwalk_reent>
 8014f7a:	bf00      	nop
 8014f7c:	08014eb5 	.word	0x08014eb5

08014f80 <__sfmoreglue>:
 8014f80:	b570      	push	{r4, r5, r6, lr}
 8014f82:	2268      	movs	r2, #104	; 0x68
 8014f84:	1e4d      	subs	r5, r1, #1
 8014f86:	4355      	muls	r5, r2
 8014f88:	460e      	mov	r6, r1
 8014f8a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8014f8e:	f7fe fec3 	bl	8013d18 <_malloc_r>
 8014f92:	4604      	mov	r4, r0
 8014f94:	b140      	cbz	r0, 8014fa8 <__sfmoreglue+0x28>
 8014f96:	2100      	movs	r1, #0
 8014f98:	e9c0 1600 	strd	r1, r6, [r0]
 8014f9c:	300c      	adds	r0, #12
 8014f9e:	60a0      	str	r0, [r4, #8]
 8014fa0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8014fa4:	f7fb f8dc 	bl	8010160 <memset>
 8014fa8:	4620      	mov	r0, r4
 8014faa:	bd70      	pop	{r4, r5, r6, pc}

08014fac <__sfp_lock_acquire>:
 8014fac:	4801      	ldr	r0, [pc, #4]	; (8014fb4 <__sfp_lock_acquire+0x8>)
 8014fae:	f000 b8b3 	b.w	8015118 <__retarget_lock_acquire_recursive>
 8014fb2:	bf00      	nop
 8014fb4:	2000a199 	.word	0x2000a199

08014fb8 <__sfp_lock_release>:
 8014fb8:	4801      	ldr	r0, [pc, #4]	; (8014fc0 <__sfp_lock_release+0x8>)
 8014fba:	f000 b8ae 	b.w	801511a <__retarget_lock_release_recursive>
 8014fbe:	bf00      	nop
 8014fc0:	2000a199 	.word	0x2000a199

08014fc4 <__sinit_lock_acquire>:
 8014fc4:	4801      	ldr	r0, [pc, #4]	; (8014fcc <__sinit_lock_acquire+0x8>)
 8014fc6:	f000 b8a7 	b.w	8015118 <__retarget_lock_acquire_recursive>
 8014fca:	bf00      	nop
 8014fcc:	2000a19a 	.word	0x2000a19a

08014fd0 <__sinit_lock_release>:
 8014fd0:	4801      	ldr	r0, [pc, #4]	; (8014fd8 <__sinit_lock_release+0x8>)
 8014fd2:	f000 b8a2 	b.w	801511a <__retarget_lock_release_recursive>
 8014fd6:	bf00      	nop
 8014fd8:	2000a19a 	.word	0x2000a19a

08014fdc <__sinit>:
 8014fdc:	b510      	push	{r4, lr}
 8014fde:	4604      	mov	r4, r0
 8014fe0:	f7ff fff0 	bl	8014fc4 <__sinit_lock_acquire>
 8014fe4:	69a3      	ldr	r3, [r4, #24]
 8014fe6:	b11b      	cbz	r3, 8014ff0 <__sinit+0x14>
 8014fe8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014fec:	f7ff bff0 	b.w	8014fd0 <__sinit_lock_release>
 8014ff0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8014ff4:	6523      	str	r3, [r4, #80]	; 0x50
 8014ff6:	4b13      	ldr	r3, [pc, #76]	; (8015044 <__sinit+0x68>)
 8014ff8:	4a13      	ldr	r2, [pc, #76]	; (8015048 <__sinit+0x6c>)
 8014ffa:	681b      	ldr	r3, [r3, #0]
 8014ffc:	62a2      	str	r2, [r4, #40]	; 0x28
 8014ffe:	42a3      	cmp	r3, r4
 8015000:	bf04      	itt	eq
 8015002:	2301      	moveq	r3, #1
 8015004:	61a3      	streq	r3, [r4, #24]
 8015006:	4620      	mov	r0, r4
 8015008:	f000 f820 	bl	801504c <__sfp>
 801500c:	6060      	str	r0, [r4, #4]
 801500e:	4620      	mov	r0, r4
 8015010:	f000 f81c 	bl	801504c <__sfp>
 8015014:	60a0      	str	r0, [r4, #8]
 8015016:	4620      	mov	r0, r4
 8015018:	f000 f818 	bl	801504c <__sfp>
 801501c:	2200      	movs	r2, #0
 801501e:	60e0      	str	r0, [r4, #12]
 8015020:	2104      	movs	r1, #4
 8015022:	6860      	ldr	r0, [r4, #4]
 8015024:	f7ff ff82 	bl	8014f2c <std>
 8015028:	68a0      	ldr	r0, [r4, #8]
 801502a:	2201      	movs	r2, #1
 801502c:	2109      	movs	r1, #9
 801502e:	f7ff ff7d 	bl	8014f2c <std>
 8015032:	68e0      	ldr	r0, [r4, #12]
 8015034:	2202      	movs	r2, #2
 8015036:	2112      	movs	r1, #18
 8015038:	f7ff ff78 	bl	8014f2c <std>
 801503c:	2301      	movs	r3, #1
 801503e:	61a3      	str	r3, [r4, #24]
 8015040:	e7d2      	b.n	8014fe8 <__sinit+0xc>
 8015042:	bf00      	nop
 8015044:	080168e8 	.word	0x080168e8
 8015048:	08014f75 	.word	0x08014f75

0801504c <__sfp>:
 801504c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801504e:	4607      	mov	r7, r0
 8015050:	f7ff ffac 	bl	8014fac <__sfp_lock_acquire>
 8015054:	4b1e      	ldr	r3, [pc, #120]	; (80150d0 <__sfp+0x84>)
 8015056:	681e      	ldr	r6, [r3, #0]
 8015058:	69b3      	ldr	r3, [r6, #24]
 801505a:	b913      	cbnz	r3, 8015062 <__sfp+0x16>
 801505c:	4630      	mov	r0, r6
 801505e:	f7ff ffbd 	bl	8014fdc <__sinit>
 8015062:	3648      	adds	r6, #72	; 0x48
 8015064:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8015068:	3b01      	subs	r3, #1
 801506a:	d503      	bpl.n	8015074 <__sfp+0x28>
 801506c:	6833      	ldr	r3, [r6, #0]
 801506e:	b30b      	cbz	r3, 80150b4 <__sfp+0x68>
 8015070:	6836      	ldr	r6, [r6, #0]
 8015072:	e7f7      	b.n	8015064 <__sfp+0x18>
 8015074:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8015078:	b9d5      	cbnz	r5, 80150b0 <__sfp+0x64>
 801507a:	4b16      	ldr	r3, [pc, #88]	; (80150d4 <__sfp+0x88>)
 801507c:	60e3      	str	r3, [r4, #12]
 801507e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8015082:	6665      	str	r5, [r4, #100]	; 0x64
 8015084:	f000 f847 	bl	8015116 <__retarget_lock_init_recursive>
 8015088:	f7ff ff96 	bl	8014fb8 <__sfp_lock_release>
 801508c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8015090:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8015094:	6025      	str	r5, [r4, #0]
 8015096:	61a5      	str	r5, [r4, #24]
 8015098:	2208      	movs	r2, #8
 801509a:	4629      	mov	r1, r5
 801509c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80150a0:	f7fb f85e 	bl	8010160 <memset>
 80150a4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80150a8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80150ac:	4620      	mov	r0, r4
 80150ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80150b0:	3468      	adds	r4, #104	; 0x68
 80150b2:	e7d9      	b.n	8015068 <__sfp+0x1c>
 80150b4:	2104      	movs	r1, #4
 80150b6:	4638      	mov	r0, r7
 80150b8:	f7ff ff62 	bl	8014f80 <__sfmoreglue>
 80150bc:	4604      	mov	r4, r0
 80150be:	6030      	str	r0, [r6, #0]
 80150c0:	2800      	cmp	r0, #0
 80150c2:	d1d5      	bne.n	8015070 <__sfp+0x24>
 80150c4:	f7ff ff78 	bl	8014fb8 <__sfp_lock_release>
 80150c8:	230c      	movs	r3, #12
 80150ca:	603b      	str	r3, [r7, #0]
 80150cc:	e7ee      	b.n	80150ac <__sfp+0x60>
 80150ce:	bf00      	nop
 80150d0:	080168e8 	.word	0x080168e8
 80150d4:	ffff0001 	.word	0xffff0001

080150d8 <_fwalk_reent>:
 80150d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80150dc:	4606      	mov	r6, r0
 80150de:	4688      	mov	r8, r1
 80150e0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80150e4:	2700      	movs	r7, #0
 80150e6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80150ea:	f1b9 0901 	subs.w	r9, r9, #1
 80150ee:	d505      	bpl.n	80150fc <_fwalk_reent+0x24>
 80150f0:	6824      	ldr	r4, [r4, #0]
 80150f2:	2c00      	cmp	r4, #0
 80150f4:	d1f7      	bne.n	80150e6 <_fwalk_reent+0xe>
 80150f6:	4638      	mov	r0, r7
 80150f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80150fc:	89ab      	ldrh	r3, [r5, #12]
 80150fe:	2b01      	cmp	r3, #1
 8015100:	d907      	bls.n	8015112 <_fwalk_reent+0x3a>
 8015102:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8015106:	3301      	adds	r3, #1
 8015108:	d003      	beq.n	8015112 <_fwalk_reent+0x3a>
 801510a:	4629      	mov	r1, r5
 801510c:	4630      	mov	r0, r6
 801510e:	47c0      	blx	r8
 8015110:	4307      	orrs	r7, r0
 8015112:	3568      	adds	r5, #104	; 0x68
 8015114:	e7e9      	b.n	80150ea <_fwalk_reent+0x12>

08015116 <__retarget_lock_init_recursive>:
 8015116:	4770      	bx	lr

08015118 <__retarget_lock_acquire_recursive>:
 8015118:	4770      	bx	lr

0801511a <__retarget_lock_release_recursive>:
 801511a:	4770      	bx	lr

0801511c <__swhatbuf_r>:
 801511c:	b570      	push	{r4, r5, r6, lr}
 801511e:	460e      	mov	r6, r1
 8015120:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015124:	2900      	cmp	r1, #0
 8015126:	b096      	sub	sp, #88	; 0x58
 8015128:	4614      	mov	r4, r2
 801512a:	461d      	mov	r5, r3
 801512c:	da08      	bge.n	8015140 <__swhatbuf_r+0x24>
 801512e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8015132:	2200      	movs	r2, #0
 8015134:	602a      	str	r2, [r5, #0]
 8015136:	061a      	lsls	r2, r3, #24
 8015138:	d410      	bmi.n	801515c <__swhatbuf_r+0x40>
 801513a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801513e:	e00e      	b.n	801515e <__swhatbuf_r+0x42>
 8015140:	466a      	mov	r2, sp
 8015142:	f000 f8eb 	bl	801531c <_fstat_r>
 8015146:	2800      	cmp	r0, #0
 8015148:	dbf1      	blt.n	801512e <__swhatbuf_r+0x12>
 801514a:	9a01      	ldr	r2, [sp, #4]
 801514c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8015150:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8015154:	425a      	negs	r2, r3
 8015156:	415a      	adcs	r2, r3
 8015158:	602a      	str	r2, [r5, #0]
 801515a:	e7ee      	b.n	801513a <__swhatbuf_r+0x1e>
 801515c:	2340      	movs	r3, #64	; 0x40
 801515e:	2000      	movs	r0, #0
 8015160:	6023      	str	r3, [r4, #0]
 8015162:	b016      	add	sp, #88	; 0x58
 8015164:	bd70      	pop	{r4, r5, r6, pc}
	...

08015168 <__smakebuf_r>:
 8015168:	898b      	ldrh	r3, [r1, #12]
 801516a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801516c:	079d      	lsls	r5, r3, #30
 801516e:	4606      	mov	r6, r0
 8015170:	460c      	mov	r4, r1
 8015172:	d507      	bpl.n	8015184 <__smakebuf_r+0x1c>
 8015174:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8015178:	6023      	str	r3, [r4, #0]
 801517a:	6123      	str	r3, [r4, #16]
 801517c:	2301      	movs	r3, #1
 801517e:	6163      	str	r3, [r4, #20]
 8015180:	b002      	add	sp, #8
 8015182:	bd70      	pop	{r4, r5, r6, pc}
 8015184:	ab01      	add	r3, sp, #4
 8015186:	466a      	mov	r2, sp
 8015188:	f7ff ffc8 	bl	801511c <__swhatbuf_r>
 801518c:	9900      	ldr	r1, [sp, #0]
 801518e:	4605      	mov	r5, r0
 8015190:	4630      	mov	r0, r6
 8015192:	f7fe fdc1 	bl	8013d18 <_malloc_r>
 8015196:	b948      	cbnz	r0, 80151ac <__smakebuf_r+0x44>
 8015198:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801519c:	059a      	lsls	r2, r3, #22
 801519e:	d4ef      	bmi.n	8015180 <__smakebuf_r+0x18>
 80151a0:	f023 0303 	bic.w	r3, r3, #3
 80151a4:	f043 0302 	orr.w	r3, r3, #2
 80151a8:	81a3      	strh	r3, [r4, #12]
 80151aa:	e7e3      	b.n	8015174 <__smakebuf_r+0xc>
 80151ac:	4b0d      	ldr	r3, [pc, #52]	; (80151e4 <__smakebuf_r+0x7c>)
 80151ae:	62b3      	str	r3, [r6, #40]	; 0x28
 80151b0:	89a3      	ldrh	r3, [r4, #12]
 80151b2:	6020      	str	r0, [r4, #0]
 80151b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80151b8:	81a3      	strh	r3, [r4, #12]
 80151ba:	9b00      	ldr	r3, [sp, #0]
 80151bc:	6163      	str	r3, [r4, #20]
 80151be:	9b01      	ldr	r3, [sp, #4]
 80151c0:	6120      	str	r0, [r4, #16]
 80151c2:	b15b      	cbz	r3, 80151dc <__smakebuf_r+0x74>
 80151c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80151c8:	4630      	mov	r0, r6
 80151ca:	f000 f8b9 	bl	8015340 <_isatty_r>
 80151ce:	b128      	cbz	r0, 80151dc <__smakebuf_r+0x74>
 80151d0:	89a3      	ldrh	r3, [r4, #12]
 80151d2:	f023 0303 	bic.w	r3, r3, #3
 80151d6:	f043 0301 	orr.w	r3, r3, #1
 80151da:	81a3      	strh	r3, [r4, #12]
 80151dc:	89a0      	ldrh	r0, [r4, #12]
 80151de:	4305      	orrs	r5, r0
 80151e0:	81a5      	strh	r5, [r4, #12]
 80151e2:	e7cd      	b.n	8015180 <__smakebuf_r+0x18>
 80151e4:	08014f75 	.word	0x08014f75

080151e8 <memmove>:
 80151e8:	4288      	cmp	r0, r1
 80151ea:	b510      	push	{r4, lr}
 80151ec:	eb01 0402 	add.w	r4, r1, r2
 80151f0:	d902      	bls.n	80151f8 <memmove+0x10>
 80151f2:	4284      	cmp	r4, r0
 80151f4:	4623      	mov	r3, r4
 80151f6:	d807      	bhi.n	8015208 <memmove+0x20>
 80151f8:	1e43      	subs	r3, r0, #1
 80151fa:	42a1      	cmp	r1, r4
 80151fc:	d008      	beq.n	8015210 <memmove+0x28>
 80151fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015202:	f803 2f01 	strb.w	r2, [r3, #1]!
 8015206:	e7f8      	b.n	80151fa <memmove+0x12>
 8015208:	4402      	add	r2, r0
 801520a:	4601      	mov	r1, r0
 801520c:	428a      	cmp	r2, r1
 801520e:	d100      	bne.n	8015212 <memmove+0x2a>
 8015210:	bd10      	pop	{r4, pc}
 8015212:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8015216:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801521a:	e7f7      	b.n	801520c <memmove+0x24>

0801521c <__malloc_lock>:
 801521c:	4801      	ldr	r0, [pc, #4]	; (8015224 <__malloc_lock+0x8>)
 801521e:	f7ff bf7b 	b.w	8015118 <__retarget_lock_acquire_recursive>
 8015222:	bf00      	nop
 8015224:	2000a198 	.word	0x2000a198

08015228 <__malloc_unlock>:
 8015228:	4801      	ldr	r0, [pc, #4]	; (8015230 <__malloc_unlock+0x8>)
 801522a:	f7ff bf76 	b.w	801511a <__retarget_lock_release_recursive>
 801522e:	bf00      	nop
 8015230:	2000a198 	.word	0x2000a198

08015234 <_realloc_r>:
 8015234:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015238:	4680      	mov	r8, r0
 801523a:	4614      	mov	r4, r2
 801523c:	460e      	mov	r6, r1
 801523e:	b921      	cbnz	r1, 801524a <_realloc_r+0x16>
 8015240:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015244:	4611      	mov	r1, r2
 8015246:	f7fe bd67 	b.w	8013d18 <_malloc_r>
 801524a:	b92a      	cbnz	r2, 8015258 <_realloc_r+0x24>
 801524c:	f7fe fcf8 	bl	8013c40 <_free_r>
 8015250:	4625      	mov	r5, r4
 8015252:	4628      	mov	r0, r5
 8015254:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015258:	f000 f882 	bl	8015360 <_malloc_usable_size_r>
 801525c:	4284      	cmp	r4, r0
 801525e:	4607      	mov	r7, r0
 8015260:	d802      	bhi.n	8015268 <_realloc_r+0x34>
 8015262:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8015266:	d812      	bhi.n	801528e <_realloc_r+0x5a>
 8015268:	4621      	mov	r1, r4
 801526a:	4640      	mov	r0, r8
 801526c:	f7fe fd54 	bl	8013d18 <_malloc_r>
 8015270:	4605      	mov	r5, r0
 8015272:	2800      	cmp	r0, #0
 8015274:	d0ed      	beq.n	8015252 <_realloc_r+0x1e>
 8015276:	42bc      	cmp	r4, r7
 8015278:	4622      	mov	r2, r4
 801527a:	4631      	mov	r1, r6
 801527c:	bf28      	it	cs
 801527e:	463a      	movcs	r2, r7
 8015280:	f7fa ff60 	bl	8010144 <memcpy>
 8015284:	4631      	mov	r1, r6
 8015286:	4640      	mov	r0, r8
 8015288:	f7fe fcda 	bl	8013c40 <_free_r>
 801528c:	e7e1      	b.n	8015252 <_realloc_r+0x1e>
 801528e:	4635      	mov	r5, r6
 8015290:	e7df      	b.n	8015252 <_realloc_r+0x1e>

08015292 <_raise_r>:
 8015292:	291f      	cmp	r1, #31
 8015294:	b538      	push	{r3, r4, r5, lr}
 8015296:	4604      	mov	r4, r0
 8015298:	460d      	mov	r5, r1
 801529a:	d904      	bls.n	80152a6 <_raise_r+0x14>
 801529c:	2316      	movs	r3, #22
 801529e:	6003      	str	r3, [r0, #0]
 80152a0:	f04f 30ff 	mov.w	r0, #4294967295
 80152a4:	bd38      	pop	{r3, r4, r5, pc}
 80152a6:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80152a8:	b112      	cbz	r2, 80152b0 <_raise_r+0x1e>
 80152aa:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80152ae:	b94b      	cbnz	r3, 80152c4 <_raise_r+0x32>
 80152b0:	4620      	mov	r0, r4
 80152b2:	f000 f831 	bl	8015318 <_getpid_r>
 80152b6:	462a      	mov	r2, r5
 80152b8:	4601      	mov	r1, r0
 80152ba:	4620      	mov	r0, r4
 80152bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80152c0:	f000 b818 	b.w	80152f4 <_kill_r>
 80152c4:	2b01      	cmp	r3, #1
 80152c6:	d00a      	beq.n	80152de <_raise_r+0x4c>
 80152c8:	1c59      	adds	r1, r3, #1
 80152ca:	d103      	bne.n	80152d4 <_raise_r+0x42>
 80152cc:	2316      	movs	r3, #22
 80152ce:	6003      	str	r3, [r0, #0]
 80152d0:	2001      	movs	r0, #1
 80152d2:	e7e7      	b.n	80152a4 <_raise_r+0x12>
 80152d4:	2400      	movs	r4, #0
 80152d6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80152da:	4628      	mov	r0, r5
 80152dc:	4798      	blx	r3
 80152de:	2000      	movs	r0, #0
 80152e0:	e7e0      	b.n	80152a4 <_raise_r+0x12>
	...

080152e4 <raise>:
 80152e4:	4b02      	ldr	r3, [pc, #8]	; (80152f0 <raise+0xc>)
 80152e6:	4601      	mov	r1, r0
 80152e8:	6818      	ldr	r0, [r3, #0]
 80152ea:	f7ff bfd2 	b.w	8015292 <_raise_r>
 80152ee:	bf00      	nop
 80152f0:	2000038c 	.word	0x2000038c

080152f4 <_kill_r>:
 80152f4:	b538      	push	{r3, r4, r5, lr}
 80152f6:	4d07      	ldr	r5, [pc, #28]	; (8015314 <_kill_r+0x20>)
 80152f8:	2300      	movs	r3, #0
 80152fa:	4604      	mov	r4, r0
 80152fc:	4608      	mov	r0, r1
 80152fe:	4611      	mov	r1, r2
 8015300:	602b      	str	r3, [r5, #0]
 8015302:	f7ed fdbf 	bl	8002e84 <_kill>
 8015306:	1c43      	adds	r3, r0, #1
 8015308:	d102      	bne.n	8015310 <_kill_r+0x1c>
 801530a:	682b      	ldr	r3, [r5, #0]
 801530c:	b103      	cbz	r3, 8015310 <_kill_r+0x1c>
 801530e:	6023      	str	r3, [r4, #0]
 8015310:	bd38      	pop	{r3, r4, r5, pc}
 8015312:	bf00      	nop
 8015314:	2000a194 	.word	0x2000a194

08015318 <_getpid_r>:
 8015318:	f7ed bdac 	b.w	8002e74 <_getpid>

0801531c <_fstat_r>:
 801531c:	b538      	push	{r3, r4, r5, lr}
 801531e:	4d07      	ldr	r5, [pc, #28]	; (801533c <_fstat_r+0x20>)
 8015320:	2300      	movs	r3, #0
 8015322:	4604      	mov	r4, r0
 8015324:	4608      	mov	r0, r1
 8015326:	4611      	mov	r1, r2
 8015328:	602b      	str	r3, [r5, #0]
 801532a:	f7ed fe0a 	bl	8002f42 <_fstat>
 801532e:	1c43      	adds	r3, r0, #1
 8015330:	d102      	bne.n	8015338 <_fstat_r+0x1c>
 8015332:	682b      	ldr	r3, [r5, #0]
 8015334:	b103      	cbz	r3, 8015338 <_fstat_r+0x1c>
 8015336:	6023      	str	r3, [r4, #0]
 8015338:	bd38      	pop	{r3, r4, r5, pc}
 801533a:	bf00      	nop
 801533c:	2000a194 	.word	0x2000a194

08015340 <_isatty_r>:
 8015340:	b538      	push	{r3, r4, r5, lr}
 8015342:	4d06      	ldr	r5, [pc, #24]	; (801535c <_isatty_r+0x1c>)
 8015344:	2300      	movs	r3, #0
 8015346:	4604      	mov	r4, r0
 8015348:	4608      	mov	r0, r1
 801534a:	602b      	str	r3, [r5, #0]
 801534c:	f7ed fe09 	bl	8002f62 <_isatty>
 8015350:	1c43      	adds	r3, r0, #1
 8015352:	d102      	bne.n	801535a <_isatty_r+0x1a>
 8015354:	682b      	ldr	r3, [r5, #0]
 8015356:	b103      	cbz	r3, 801535a <_isatty_r+0x1a>
 8015358:	6023      	str	r3, [r4, #0]
 801535a:	bd38      	pop	{r3, r4, r5, pc}
 801535c:	2000a194 	.word	0x2000a194

08015360 <_malloc_usable_size_r>:
 8015360:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015364:	1f18      	subs	r0, r3, #4
 8015366:	2b00      	cmp	r3, #0
 8015368:	bfbc      	itt	lt
 801536a:	580b      	ldrlt	r3, [r1, r0]
 801536c:	18c0      	addlt	r0, r0, r3
 801536e:	4770      	bx	lr

08015370 <pow>:
 8015370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015372:	ed2d 8b02 	vpush	{d8}
 8015376:	eeb0 8a40 	vmov.f32	s16, s0
 801537a:	eef0 8a60 	vmov.f32	s17, s1
 801537e:	ec55 4b11 	vmov	r4, r5, d1
 8015382:	f000 f891 	bl	80154a8 <__ieee754_pow>
 8015386:	4622      	mov	r2, r4
 8015388:	462b      	mov	r3, r5
 801538a:	4620      	mov	r0, r4
 801538c:	4629      	mov	r1, r5
 801538e:	ec57 6b10 	vmov	r6, r7, d0
 8015392:	f7eb fbfb 	bl	8000b8c <__aeabi_dcmpun>
 8015396:	2800      	cmp	r0, #0
 8015398:	d13b      	bne.n	8015412 <pow+0xa2>
 801539a:	ec51 0b18 	vmov	r0, r1, d8
 801539e:	2200      	movs	r2, #0
 80153a0:	2300      	movs	r3, #0
 80153a2:	f7eb fbc1 	bl	8000b28 <__aeabi_dcmpeq>
 80153a6:	b1b8      	cbz	r0, 80153d8 <pow+0x68>
 80153a8:	2200      	movs	r2, #0
 80153aa:	2300      	movs	r3, #0
 80153ac:	4620      	mov	r0, r4
 80153ae:	4629      	mov	r1, r5
 80153b0:	f7eb fbba 	bl	8000b28 <__aeabi_dcmpeq>
 80153b4:	2800      	cmp	r0, #0
 80153b6:	d146      	bne.n	8015446 <pow+0xd6>
 80153b8:	ec45 4b10 	vmov	d0, r4, r5
 80153bc:	f000 fe8d 	bl	80160da <finite>
 80153c0:	b338      	cbz	r0, 8015412 <pow+0xa2>
 80153c2:	2200      	movs	r2, #0
 80153c4:	2300      	movs	r3, #0
 80153c6:	4620      	mov	r0, r4
 80153c8:	4629      	mov	r1, r5
 80153ca:	f7eb fbb7 	bl	8000b3c <__aeabi_dcmplt>
 80153ce:	b300      	cbz	r0, 8015412 <pow+0xa2>
 80153d0:	f7fa fe8e 	bl	80100f0 <__errno>
 80153d4:	2322      	movs	r3, #34	; 0x22
 80153d6:	e01b      	b.n	8015410 <pow+0xa0>
 80153d8:	ec47 6b10 	vmov	d0, r6, r7
 80153dc:	f000 fe7d 	bl	80160da <finite>
 80153e0:	b9e0      	cbnz	r0, 801541c <pow+0xac>
 80153e2:	eeb0 0a48 	vmov.f32	s0, s16
 80153e6:	eef0 0a68 	vmov.f32	s1, s17
 80153ea:	f000 fe76 	bl	80160da <finite>
 80153ee:	b1a8      	cbz	r0, 801541c <pow+0xac>
 80153f0:	ec45 4b10 	vmov	d0, r4, r5
 80153f4:	f000 fe71 	bl	80160da <finite>
 80153f8:	b180      	cbz	r0, 801541c <pow+0xac>
 80153fa:	4632      	mov	r2, r6
 80153fc:	463b      	mov	r3, r7
 80153fe:	4630      	mov	r0, r6
 8015400:	4639      	mov	r1, r7
 8015402:	f7eb fbc3 	bl	8000b8c <__aeabi_dcmpun>
 8015406:	2800      	cmp	r0, #0
 8015408:	d0e2      	beq.n	80153d0 <pow+0x60>
 801540a:	f7fa fe71 	bl	80100f0 <__errno>
 801540e:	2321      	movs	r3, #33	; 0x21
 8015410:	6003      	str	r3, [r0, #0]
 8015412:	ecbd 8b02 	vpop	{d8}
 8015416:	ec47 6b10 	vmov	d0, r6, r7
 801541a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801541c:	2200      	movs	r2, #0
 801541e:	2300      	movs	r3, #0
 8015420:	4630      	mov	r0, r6
 8015422:	4639      	mov	r1, r7
 8015424:	f7eb fb80 	bl	8000b28 <__aeabi_dcmpeq>
 8015428:	2800      	cmp	r0, #0
 801542a:	d0f2      	beq.n	8015412 <pow+0xa2>
 801542c:	eeb0 0a48 	vmov.f32	s0, s16
 8015430:	eef0 0a68 	vmov.f32	s1, s17
 8015434:	f000 fe51 	bl	80160da <finite>
 8015438:	2800      	cmp	r0, #0
 801543a:	d0ea      	beq.n	8015412 <pow+0xa2>
 801543c:	ec45 4b10 	vmov	d0, r4, r5
 8015440:	f000 fe4b 	bl	80160da <finite>
 8015444:	e7c3      	b.n	80153ce <pow+0x5e>
 8015446:	4f01      	ldr	r7, [pc, #4]	; (801544c <pow+0xdc>)
 8015448:	2600      	movs	r6, #0
 801544a:	e7e2      	b.n	8015412 <pow+0xa2>
 801544c:	3ff00000 	.word	0x3ff00000

08015450 <sqrt>:
 8015450:	b538      	push	{r3, r4, r5, lr}
 8015452:	ed2d 8b02 	vpush	{d8}
 8015456:	ec55 4b10 	vmov	r4, r5, d0
 801545a:	f000 fd53 	bl	8015f04 <__ieee754_sqrt>
 801545e:	4622      	mov	r2, r4
 8015460:	462b      	mov	r3, r5
 8015462:	4620      	mov	r0, r4
 8015464:	4629      	mov	r1, r5
 8015466:	eeb0 8a40 	vmov.f32	s16, s0
 801546a:	eef0 8a60 	vmov.f32	s17, s1
 801546e:	f7eb fb8d 	bl	8000b8c <__aeabi_dcmpun>
 8015472:	b990      	cbnz	r0, 801549a <sqrt+0x4a>
 8015474:	2200      	movs	r2, #0
 8015476:	2300      	movs	r3, #0
 8015478:	4620      	mov	r0, r4
 801547a:	4629      	mov	r1, r5
 801547c:	f7eb fb5e 	bl	8000b3c <__aeabi_dcmplt>
 8015480:	b158      	cbz	r0, 801549a <sqrt+0x4a>
 8015482:	f7fa fe35 	bl	80100f0 <__errno>
 8015486:	2321      	movs	r3, #33	; 0x21
 8015488:	6003      	str	r3, [r0, #0]
 801548a:	2200      	movs	r2, #0
 801548c:	2300      	movs	r3, #0
 801548e:	4610      	mov	r0, r2
 8015490:	4619      	mov	r1, r3
 8015492:	f7eb fa0b 	bl	80008ac <__aeabi_ddiv>
 8015496:	ec41 0b18 	vmov	d8, r0, r1
 801549a:	eeb0 0a48 	vmov.f32	s0, s16
 801549e:	eef0 0a68 	vmov.f32	s1, s17
 80154a2:	ecbd 8b02 	vpop	{d8}
 80154a6:	bd38      	pop	{r3, r4, r5, pc}

080154a8 <__ieee754_pow>:
 80154a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80154ac:	ed2d 8b06 	vpush	{d8-d10}
 80154b0:	b089      	sub	sp, #36	; 0x24
 80154b2:	ed8d 1b00 	vstr	d1, [sp]
 80154b6:	e9dd 2900 	ldrd	r2, r9, [sp]
 80154ba:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 80154be:	ea58 0102 	orrs.w	r1, r8, r2
 80154c2:	ec57 6b10 	vmov	r6, r7, d0
 80154c6:	d115      	bne.n	80154f4 <__ieee754_pow+0x4c>
 80154c8:	19b3      	adds	r3, r6, r6
 80154ca:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 80154ce:	4152      	adcs	r2, r2
 80154d0:	4299      	cmp	r1, r3
 80154d2:	4b89      	ldr	r3, [pc, #548]	; (80156f8 <__ieee754_pow+0x250>)
 80154d4:	4193      	sbcs	r3, r2
 80154d6:	f080 84d2 	bcs.w	8015e7e <__ieee754_pow+0x9d6>
 80154da:	e9dd 2300 	ldrd	r2, r3, [sp]
 80154de:	4630      	mov	r0, r6
 80154e0:	4639      	mov	r1, r7
 80154e2:	f7ea ff03 	bl	80002ec <__adddf3>
 80154e6:	ec41 0b10 	vmov	d0, r0, r1
 80154ea:	b009      	add	sp, #36	; 0x24
 80154ec:	ecbd 8b06 	vpop	{d8-d10}
 80154f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80154f4:	4b81      	ldr	r3, [pc, #516]	; (80156fc <__ieee754_pow+0x254>)
 80154f6:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80154fa:	429c      	cmp	r4, r3
 80154fc:	ee10 aa10 	vmov	sl, s0
 8015500:	463d      	mov	r5, r7
 8015502:	dc06      	bgt.n	8015512 <__ieee754_pow+0x6a>
 8015504:	d101      	bne.n	801550a <__ieee754_pow+0x62>
 8015506:	2e00      	cmp	r6, #0
 8015508:	d1e7      	bne.n	80154da <__ieee754_pow+0x32>
 801550a:	4598      	cmp	r8, r3
 801550c:	dc01      	bgt.n	8015512 <__ieee754_pow+0x6a>
 801550e:	d10f      	bne.n	8015530 <__ieee754_pow+0x88>
 8015510:	b172      	cbz	r2, 8015530 <__ieee754_pow+0x88>
 8015512:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8015516:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 801551a:	ea55 050a 	orrs.w	r5, r5, sl
 801551e:	d1dc      	bne.n	80154da <__ieee754_pow+0x32>
 8015520:	e9dd 3200 	ldrd	r3, r2, [sp]
 8015524:	18db      	adds	r3, r3, r3
 8015526:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 801552a:	4152      	adcs	r2, r2
 801552c:	429d      	cmp	r5, r3
 801552e:	e7d0      	b.n	80154d2 <__ieee754_pow+0x2a>
 8015530:	2d00      	cmp	r5, #0
 8015532:	da3b      	bge.n	80155ac <__ieee754_pow+0x104>
 8015534:	4b72      	ldr	r3, [pc, #456]	; (8015700 <__ieee754_pow+0x258>)
 8015536:	4598      	cmp	r8, r3
 8015538:	dc51      	bgt.n	80155de <__ieee754_pow+0x136>
 801553a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 801553e:	4598      	cmp	r8, r3
 8015540:	f340 84ac 	ble.w	8015e9c <__ieee754_pow+0x9f4>
 8015544:	ea4f 5328 	mov.w	r3, r8, asr #20
 8015548:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801554c:	2b14      	cmp	r3, #20
 801554e:	dd0f      	ble.n	8015570 <__ieee754_pow+0xc8>
 8015550:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8015554:	fa22 f103 	lsr.w	r1, r2, r3
 8015558:	fa01 f303 	lsl.w	r3, r1, r3
 801555c:	4293      	cmp	r3, r2
 801555e:	f040 849d 	bne.w	8015e9c <__ieee754_pow+0x9f4>
 8015562:	f001 0101 	and.w	r1, r1, #1
 8015566:	f1c1 0302 	rsb	r3, r1, #2
 801556a:	9304      	str	r3, [sp, #16]
 801556c:	b182      	cbz	r2, 8015590 <__ieee754_pow+0xe8>
 801556e:	e05f      	b.n	8015630 <__ieee754_pow+0x188>
 8015570:	2a00      	cmp	r2, #0
 8015572:	d15b      	bne.n	801562c <__ieee754_pow+0x184>
 8015574:	f1c3 0314 	rsb	r3, r3, #20
 8015578:	fa48 f103 	asr.w	r1, r8, r3
 801557c:	fa01 f303 	lsl.w	r3, r1, r3
 8015580:	4543      	cmp	r3, r8
 8015582:	f040 8488 	bne.w	8015e96 <__ieee754_pow+0x9ee>
 8015586:	f001 0101 	and.w	r1, r1, #1
 801558a:	f1c1 0302 	rsb	r3, r1, #2
 801558e:	9304      	str	r3, [sp, #16]
 8015590:	4b5c      	ldr	r3, [pc, #368]	; (8015704 <__ieee754_pow+0x25c>)
 8015592:	4598      	cmp	r8, r3
 8015594:	d132      	bne.n	80155fc <__ieee754_pow+0x154>
 8015596:	f1b9 0f00 	cmp.w	r9, #0
 801559a:	f280 8478 	bge.w	8015e8e <__ieee754_pow+0x9e6>
 801559e:	4959      	ldr	r1, [pc, #356]	; (8015704 <__ieee754_pow+0x25c>)
 80155a0:	4632      	mov	r2, r6
 80155a2:	463b      	mov	r3, r7
 80155a4:	2000      	movs	r0, #0
 80155a6:	f7eb f981 	bl	80008ac <__aeabi_ddiv>
 80155aa:	e79c      	b.n	80154e6 <__ieee754_pow+0x3e>
 80155ac:	2300      	movs	r3, #0
 80155ae:	9304      	str	r3, [sp, #16]
 80155b0:	2a00      	cmp	r2, #0
 80155b2:	d13d      	bne.n	8015630 <__ieee754_pow+0x188>
 80155b4:	4b51      	ldr	r3, [pc, #324]	; (80156fc <__ieee754_pow+0x254>)
 80155b6:	4598      	cmp	r8, r3
 80155b8:	d1ea      	bne.n	8015590 <__ieee754_pow+0xe8>
 80155ba:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80155be:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80155c2:	ea53 030a 	orrs.w	r3, r3, sl
 80155c6:	f000 845a 	beq.w	8015e7e <__ieee754_pow+0x9d6>
 80155ca:	4b4f      	ldr	r3, [pc, #316]	; (8015708 <__ieee754_pow+0x260>)
 80155cc:	429c      	cmp	r4, r3
 80155ce:	dd08      	ble.n	80155e2 <__ieee754_pow+0x13a>
 80155d0:	f1b9 0f00 	cmp.w	r9, #0
 80155d4:	f2c0 8457 	blt.w	8015e86 <__ieee754_pow+0x9de>
 80155d8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80155dc:	e783      	b.n	80154e6 <__ieee754_pow+0x3e>
 80155de:	2302      	movs	r3, #2
 80155e0:	e7e5      	b.n	80155ae <__ieee754_pow+0x106>
 80155e2:	f1b9 0f00 	cmp.w	r9, #0
 80155e6:	f04f 0000 	mov.w	r0, #0
 80155ea:	f04f 0100 	mov.w	r1, #0
 80155ee:	f6bf af7a 	bge.w	80154e6 <__ieee754_pow+0x3e>
 80155f2:	e9dd 0300 	ldrd	r0, r3, [sp]
 80155f6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80155fa:	e774      	b.n	80154e6 <__ieee754_pow+0x3e>
 80155fc:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8015600:	d106      	bne.n	8015610 <__ieee754_pow+0x168>
 8015602:	4632      	mov	r2, r6
 8015604:	463b      	mov	r3, r7
 8015606:	4630      	mov	r0, r6
 8015608:	4639      	mov	r1, r7
 801560a:	f7eb f825 	bl	8000658 <__aeabi_dmul>
 801560e:	e76a      	b.n	80154e6 <__ieee754_pow+0x3e>
 8015610:	4b3e      	ldr	r3, [pc, #248]	; (801570c <__ieee754_pow+0x264>)
 8015612:	4599      	cmp	r9, r3
 8015614:	d10c      	bne.n	8015630 <__ieee754_pow+0x188>
 8015616:	2d00      	cmp	r5, #0
 8015618:	db0a      	blt.n	8015630 <__ieee754_pow+0x188>
 801561a:	ec47 6b10 	vmov	d0, r6, r7
 801561e:	b009      	add	sp, #36	; 0x24
 8015620:	ecbd 8b06 	vpop	{d8-d10}
 8015624:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015628:	f000 bc6c 	b.w	8015f04 <__ieee754_sqrt>
 801562c:	2300      	movs	r3, #0
 801562e:	9304      	str	r3, [sp, #16]
 8015630:	ec47 6b10 	vmov	d0, r6, r7
 8015634:	f000 fd48 	bl	80160c8 <fabs>
 8015638:	ec51 0b10 	vmov	r0, r1, d0
 801563c:	f1ba 0f00 	cmp.w	sl, #0
 8015640:	d129      	bne.n	8015696 <__ieee754_pow+0x1ee>
 8015642:	b124      	cbz	r4, 801564e <__ieee754_pow+0x1a6>
 8015644:	4b2f      	ldr	r3, [pc, #188]	; (8015704 <__ieee754_pow+0x25c>)
 8015646:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 801564a:	429a      	cmp	r2, r3
 801564c:	d123      	bne.n	8015696 <__ieee754_pow+0x1ee>
 801564e:	f1b9 0f00 	cmp.w	r9, #0
 8015652:	da05      	bge.n	8015660 <__ieee754_pow+0x1b8>
 8015654:	4602      	mov	r2, r0
 8015656:	460b      	mov	r3, r1
 8015658:	2000      	movs	r0, #0
 801565a:	492a      	ldr	r1, [pc, #168]	; (8015704 <__ieee754_pow+0x25c>)
 801565c:	f7eb f926 	bl	80008ac <__aeabi_ddiv>
 8015660:	2d00      	cmp	r5, #0
 8015662:	f6bf af40 	bge.w	80154e6 <__ieee754_pow+0x3e>
 8015666:	9b04      	ldr	r3, [sp, #16]
 8015668:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801566c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8015670:	4323      	orrs	r3, r4
 8015672:	d108      	bne.n	8015686 <__ieee754_pow+0x1de>
 8015674:	4602      	mov	r2, r0
 8015676:	460b      	mov	r3, r1
 8015678:	4610      	mov	r0, r2
 801567a:	4619      	mov	r1, r3
 801567c:	f7ea fe34 	bl	80002e8 <__aeabi_dsub>
 8015680:	4602      	mov	r2, r0
 8015682:	460b      	mov	r3, r1
 8015684:	e78f      	b.n	80155a6 <__ieee754_pow+0xfe>
 8015686:	9b04      	ldr	r3, [sp, #16]
 8015688:	2b01      	cmp	r3, #1
 801568a:	f47f af2c 	bne.w	80154e6 <__ieee754_pow+0x3e>
 801568e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8015692:	4619      	mov	r1, r3
 8015694:	e727      	b.n	80154e6 <__ieee754_pow+0x3e>
 8015696:	0feb      	lsrs	r3, r5, #31
 8015698:	3b01      	subs	r3, #1
 801569a:	9306      	str	r3, [sp, #24]
 801569c:	9a06      	ldr	r2, [sp, #24]
 801569e:	9b04      	ldr	r3, [sp, #16]
 80156a0:	4313      	orrs	r3, r2
 80156a2:	d102      	bne.n	80156aa <__ieee754_pow+0x202>
 80156a4:	4632      	mov	r2, r6
 80156a6:	463b      	mov	r3, r7
 80156a8:	e7e6      	b.n	8015678 <__ieee754_pow+0x1d0>
 80156aa:	4b19      	ldr	r3, [pc, #100]	; (8015710 <__ieee754_pow+0x268>)
 80156ac:	4598      	cmp	r8, r3
 80156ae:	f340 80fb 	ble.w	80158a8 <__ieee754_pow+0x400>
 80156b2:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80156b6:	4598      	cmp	r8, r3
 80156b8:	4b13      	ldr	r3, [pc, #76]	; (8015708 <__ieee754_pow+0x260>)
 80156ba:	dd0c      	ble.n	80156d6 <__ieee754_pow+0x22e>
 80156bc:	429c      	cmp	r4, r3
 80156be:	dc0f      	bgt.n	80156e0 <__ieee754_pow+0x238>
 80156c0:	f1b9 0f00 	cmp.w	r9, #0
 80156c4:	da0f      	bge.n	80156e6 <__ieee754_pow+0x23e>
 80156c6:	2000      	movs	r0, #0
 80156c8:	b009      	add	sp, #36	; 0x24
 80156ca:	ecbd 8b06 	vpop	{d8-d10}
 80156ce:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80156d2:	f000 bcf0 	b.w	80160b6 <__math_oflow>
 80156d6:	429c      	cmp	r4, r3
 80156d8:	dbf2      	blt.n	80156c0 <__ieee754_pow+0x218>
 80156da:	4b0a      	ldr	r3, [pc, #40]	; (8015704 <__ieee754_pow+0x25c>)
 80156dc:	429c      	cmp	r4, r3
 80156de:	dd19      	ble.n	8015714 <__ieee754_pow+0x26c>
 80156e0:	f1b9 0f00 	cmp.w	r9, #0
 80156e4:	dcef      	bgt.n	80156c6 <__ieee754_pow+0x21e>
 80156e6:	2000      	movs	r0, #0
 80156e8:	b009      	add	sp, #36	; 0x24
 80156ea:	ecbd 8b06 	vpop	{d8-d10}
 80156ee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80156f2:	f000 bcd7 	b.w	80160a4 <__math_uflow>
 80156f6:	bf00      	nop
 80156f8:	fff00000 	.word	0xfff00000
 80156fc:	7ff00000 	.word	0x7ff00000
 8015700:	433fffff 	.word	0x433fffff
 8015704:	3ff00000 	.word	0x3ff00000
 8015708:	3fefffff 	.word	0x3fefffff
 801570c:	3fe00000 	.word	0x3fe00000
 8015710:	41e00000 	.word	0x41e00000
 8015714:	4b60      	ldr	r3, [pc, #384]	; (8015898 <__ieee754_pow+0x3f0>)
 8015716:	2200      	movs	r2, #0
 8015718:	f7ea fde6 	bl	80002e8 <__aeabi_dsub>
 801571c:	a354      	add	r3, pc, #336	; (adr r3, 8015870 <__ieee754_pow+0x3c8>)
 801571e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015722:	4604      	mov	r4, r0
 8015724:	460d      	mov	r5, r1
 8015726:	f7ea ff97 	bl	8000658 <__aeabi_dmul>
 801572a:	a353      	add	r3, pc, #332	; (adr r3, 8015878 <__ieee754_pow+0x3d0>)
 801572c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015730:	4606      	mov	r6, r0
 8015732:	460f      	mov	r7, r1
 8015734:	4620      	mov	r0, r4
 8015736:	4629      	mov	r1, r5
 8015738:	f7ea ff8e 	bl	8000658 <__aeabi_dmul>
 801573c:	4b57      	ldr	r3, [pc, #348]	; (801589c <__ieee754_pow+0x3f4>)
 801573e:	4682      	mov	sl, r0
 8015740:	468b      	mov	fp, r1
 8015742:	2200      	movs	r2, #0
 8015744:	4620      	mov	r0, r4
 8015746:	4629      	mov	r1, r5
 8015748:	f7ea ff86 	bl	8000658 <__aeabi_dmul>
 801574c:	4602      	mov	r2, r0
 801574e:	460b      	mov	r3, r1
 8015750:	a14b      	add	r1, pc, #300	; (adr r1, 8015880 <__ieee754_pow+0x3d8>)
 8015752:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015756:	f7ea fdc7 	bl	80002e8 <__aeabi_dsub>
 801575a:	4622      	mov	r2, r4
 801575c:	462b      	mov	r3, r5
 801575e:	f7ea ff7b 	bl	8000658 <__aeabi_dmul>
 8015762:	4602      	mov	r2, r0
 8015764:	460b      	mov	r3, r1
 8015766:	2000      	movs	r0, #0
 8015768:	494d      	ldr	r1, [pc, #308]	; (80158a0 <__ieee754_pow+0x3f8>)
 801576a:	f7ea fdbd 	bl	80002e8 <__aeabi_dsub>
 801576e:	4622      	mov	r2, r4
 8015770:	4680      	mov	r8, r0
 8015772:	4689      	mov	r9, r1
 8015774:	462b      	mov	r3, r5
 8015776:	4620      	mov	r0, r4
 8015778:	4629      	mov	r1, r5
 801577a:	f7ea ff6d 	bl	8000658 <__aeabi_dmul>
 801577e:	4602      	mov	r2, r0
 8015780:	460b      	mov	r3, r1
 8015782:	4640      	mov	r0, r8
 8015784:	4649      	mov	r1, r9
 8015786:	f7ea ff67 	bl	8000658 <__aeabi_dmul>
 801578a:	a33f      	add	r3, pc, #252	; (adr r3, 8015888 <__ieee754_pow+0x3e0>)
 801578c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015790:	f7ea ff62 	bl	8000658 <__aeabi_dmul>
 8015794:	4602      	mov	r2, r0
 8015796:	460b      	mov	r3, r1
 8015798:	4650      	mov	r0, sl
 801579a:	4659      	mov	r1, fp
 801579c:	f7ea fda4 	bl	80002e8 <__aeabi_dsub>
 80157a0:	4602      	mov	r2, r0
 80157a2:	460b      	mov	r3, r1
 80157a4:	4680      	mov	r8, r0
 80157a6:	4689      	mov	r9, r1
 80157a8:	4630      	mov	r0, r6
 80157aa:	4639      	mov	r1, r7
 80157ac:	f7ea fd9e 	bl	80002ec <__adddf3>
 80157b0:	2000      	movs	r0, #0
 80157b2:	4632      	mov	r2, r6
 80157b4:	463b      	mov	r3, r7
 80157b6:	4604      	mov	r4, r0
 80157b8:	460d      	mov	r5, r1
 80157ba:	f7ea fd95 	bl	80002e8 <__aeabi_dsub>
 80157be:	4602      	mov	r2, r0
 80157c0:	460b      	mov	r3, r1
 80157c2:	4640      	mov	r0, r8
 80157c4:	4649      	mov	r1, r9
 80157c6:	f7ea fd8f 	bl	80002e8 <__aeabi_dsub>
 80157ca:	9b04      	ldr	r3, [sp, #16]
 80157cc:	9a06      	ldr	r2, [sp, #24]
 80157ce:	3b01      	subs	r3, #1
 80157d0:	4313      	orrs	r3, r2
 80157d2:	4682      	mov	sl, r0
 80157d4:	468b      	mov	fp, r1
 80157d6:	f040 81e7 	bne.w	8015ba8 <__ieee754_pow+0x700>
 80157da:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8015890 <__ieee754_pow+0x3e8>
 80157de:	eeb0 8a47 	vmov.f32	s16, s14
 80157e2:	eef0 8a67 	vmov.f32	s17, s15
 80157e6:	e9dd 6700 	ldrd	r6, r7, [sp]
 80157ea:	2600      	movs	r6, #0
 80157ec:	4632      	mov	r2, r6
 80157ee:	463b      	mov	r3, r7
 80157f0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80157f4:	f7ea fd78 	bl	80002e8 <__aeabi_dsub>
 80157f8:	4622      	mov	r2, r4
 80157fa:	462b      	mov	r3, r5
 80157fc:	f7ea ff2c 	bl	8000658 <__aeabi_dmul>
 8015800:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015804:	4680      	mov	r8, r0
 8015806:	4689      	mov	r9, r1
 8015808:	4650      	mov	r0, sl
 801580a:	4659      	mov	r1, fp
 801580c:	f7ea ff24 	bl	8000658 <__aeabi_dmul>
 8015810:	4602      	mov	r2, r0
 8015812:	460b      	mov	r3, r1
 8015814:	4640      	mov	r0, r8
 8015816:	4649      	mov	r1, r9
 8015818:	f7ea fd68 	bl	80002ec <__adddf3>
 801581c:	4632      	mov	r2, r6
 801581e:	463b      	mov	r3, r7
 8015820:	4680      	mov	r8, r0
 8015822:	4689      	mov	r9, r1
 8015824:	4620      	mov	r0, r4
 8015826:	4629      	mov	r1, r5
 8015828:	f7ea ff16 	bl	8000658 <__aeabi_dmul>
 801582c:	460b      	mov	r3, r1
 801582e:	4604      	mov	r4, r0
 8015830:	460d      	mov	r5, r1
 8015832:	4602      	mov	r2, r0
 8015834:	4649      	mov	r1, r9
 8015836:	4640      	mov	r0, r8
 8015838:	f7ea fd58 	bl	80002ec <__adddf3>
 801583c:	4b19      	ldr	r3, [pc, #100]	; (80158a4 <__ieee754_pow+0x3fc>)
 801583e:	4299      	cmp	r1, r3
 8015840:	ec45 4b19 	vmov	d9, r4, r5
 8015844:	4606      	mov	r6, r0
 8015846:	460f      	mov	r7, r1
 8015848:	468b      	mov	fp, r1
 801584a:	f340 82f1 	ble.w	8015e30 <__ieee754_pow+0x988>
 801584e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8015852:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8015856:	4303      	orrs	r3, r0
 8015858:	f000 81e4 	beq.w	8015c24 <__ieee754_pow+0x77c>
 801585c:	ec51 0b18 	vmov	r0, r1, d8
 8015860:	2200      	movs	r2, #0
 8015862:	2300      	movs	r3, #0
 8015864:	f7eb f96a 	bl	8000b3c <__aeabi_dcmplt>
 8015868:	3800      	subs	r0, #0
 801586a:	bf18      	it	ne
 801586c:	2001      	movne	r0, #1
 801586e:	e72b      	b.n	80156c8 <__ieee754_pow+0x220>
 8015870:	60000000 	.word	0x60000000
 8015874:	3ff71547 	.word	0x3ff71547
 8015878:	f85ddf44 	.word	0xf85ddf44
 801587c:	3e54ae0b 	.word	0x3e54ae0b
 8015880:	55555555 	.word	0x55555555
 8015884:	3fd55555 	.word	0x3fd55555
 8015888:	652b82fe 	.word	0x652b82fe
 801588c:	3ff71547 	.word	0x3ff71547
 8015890:	00000000 	.word	0x00000000
 8015894:	bff00000 	.word	0xbff00000
 8015898:	3ff00000 	.word	0x3ff00000
 801589c:	3fd00000 	.word	0x3fd00000
 80158a0:	3fe00000 	.word	0x3fe00000
 80158a4:	408fffff 	.word	0x408fffff
 80158a8:	4bd5      	ldr	r3, [pc, #852]	; (8015c00 <__ieee754_pow+0x758>)
 80158aa:	402b      	ands	r3, r5
 80158ac:	2200      	movs	r2, #0
 80158ae:	b92b      	cbnz	r3, 80158bc <__ieee754_pow+0x414>
 80158b0:	4bd4      	ldr	r3, [pc, #848]	; (8015c04 <__ieee754_pow+0x75c>)
 80158b2:	f7ea fed1 	bl	8000658 <__aeabi_dmul>
 80158b6:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80158ba:	460c      	mov	r4, r1
 80158bc:	1523      	asrs	r3, r4, #20
 80158be:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80158c2:	4413      	add	r3, r2
 80158c4:	9305      	str	r3, [sp, #20]
 80158c6:	4bd0      	ldr	r3, [pc, #832]	; (8015c08 <__ieee754_pow+0x760>)
 80158c8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80158cc:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80158d0:	429c      	cmp	r4, r3
 80158d2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80158d6:	dd08      	ble.n	80158ea <__ieee754_pow+0x442>
 80158d8:	4bcc      	ldr	r3, [pc, #816]	; (8015c0c <__ieee754_pow+0x764>)
 80158da:	429c      	cmp	r4, r3
 80158dc:	f340 8162 	ble.w	8015ba4 <__ieee754_pow+0x6fc>
 80158e0:	9b05      	ldr	r3, [sp, #20]
 80158e2:	3301      	adds	r3, #1
 80158e4:	9305      	str	r3, [sp, #20]
 80158e6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80158ea:	2400      	movs	r4, #0
 80158ec:	00e3      	lsls	r3, r4, #3
 80158ee:	9307      	str	r3, [sp, #28]
 80158f0:	4bc7      	ldr	r3, [pc, #796]	; (8015c10 <__ieee754_pow+0x768>)
 80158f2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80158f6:	ed93 7b00 	vldr	d7, [r3]
 80158fa:	4629      	mov	r1, r5
 80158fc:	ec53 2b17 	vmov	r2, r3, d7
 8015900:	eeb0 9a47 	vmov.f32	s18, s14
 8015904:	eef0 9a67 	vmov.f32	s19, s15
 8015908:	4682      	mov	sl, r0
 801590a:	f7ea fced 	bl	80002e8 <__aeabi_dsub>
 801590e:	4652      	mov	r2, sl
 8015910:	4606      	mov	r6, r0
 8015912:	460f      	mov	r7, r1
 8015914:	462b      	mov	r3, r5
 8015916:	ec51 0b19 	vmov	r0, r1, d9
 801591a:	f7ea fce7 	bl	80002ec <__adddf3>
 801591e:	4602      	mov	r2, r0
 8015920:	460b      	mov	r3, r1
 8015922:	2000      	movs	r0, #0
 8015924:	49bb      	ldr	r1, [pc, #748]	; (8015c14 <__ieee754_pow+0x76c>)
 8015926:	f7ea ffc1 	bl	80008ac <__aeabi_ddiv>
 801592a:	ec41 0b1a 	vmov	d10, r0, r1
 801592e:	4602      	mov	r2, r0
 8015930:	460b      	mov	r3, r1
 8015932:	4630      	mov	r0, r6
 8015934:	4639      	mov	r1, r7
 8015936:	f7ea fe8f 	bl	8000658 <__aeabi_dmul>
 801593a:	2300      	movs	r3, #0
 801593c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015940:	9302      	str	r3, [sp, #8]
 8015942:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8015946:	46ab      	mov	fp, r5
 8015948:	106d      	asrs	r5, r5, #1
 801594a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 801594e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8015952:	ec41 0b18 	vmov	d8, r0, r1
 8015956:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 801595a:	2200      	movs	r2, #0
 801595c:	4640      	mov	r0, r8
 801595e:	4649      	mov	r1, r9
 8015960:	4614      	mov	r4, r2
 8015962:	461d      	mov	r5, r3
 8015964:	f7ea fe78 	bl	8000658 <__aeabi_dmul>
 8015968:	4602      	mov	r2, r0
 801596a:	460b      	mov	r3, r1
 801596c:	4630      	mov	r0, r6
 801596e:	4639      	mov	r1, r7
 8015970:	f7ea fcba 	bl	80002e8 <__aeabi_dsub>
 8015974:	ec53 2b19 	vmov	r2, r3, d9
 8015978:	4606      	mov	r6, r0
 801597a:	460f      	mov	r7, r1
 801597c:	4620      	mov	r0, r4
 801597e:	4629      	mov	r1, r5
 8015980:	f7ea fcb2 	bl	80002e8 <__aeabi_dsub>
 8015984:	4602      	mov	r2, r0
 8015986:	460b      	mov	r3, r1
 8015988:	4650      	mov	r0, sl
 801598a:	4659      	mov	r1, fp
 801598c:	f7ea fcac 	bl	80002e8 <__aeabi_dsub>
 8015990:	4642      	mov	r2, r8
 8015992:	464b      	mov	r3, r9
 8015994:	f7ea fe60 	bl	8000658 <__aeabi_dmul>
 8015998:	4602      	mov	r2, r0
 801599a:	460b      	mov	r3, r1
 801599c:	4630      	mov	r0, r6
 801599e:	4639      	mov	r1, r7
 80159a0:	f7ea fca2 	bl	80002e8 <__aeabi_dsub>
 80159a4:	ec53 2b1a 	vmov	r2, r3, d10
 80159a8:	f7ea fe56 	bl	8000658 <__aeabi_dmul>
 80159ac:	ec53 2b18 	vmov	r2, r3, d8
 80159b0:	ec41 0b19 	vmov	d9, r0, r1
 80159b4:	ec51 0b18 	vmov	r0, r1, d8
 80159b8:	f7ea fe4e 	bl	8000658 <__aeabi_dmul>
 80159bc:	a37c      	add	r3, pc, #496	; (adr r3, 8015bb0 <__ieee754_pow+0x708>)
 80159be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80159c2:	4604      	mov	r4, r0
 80159c4:	460d      	mov	r5, r1
 80159c6:	f7ea fe47 	bl	8000658 <__aeabi_dmul>
 80159ca:	a37b      	add	r3, pc, #492	; (adr r3, 8015bb8 <__ieee754_pow+0x710>)
 80159cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80159d0:	f7ea fc8c 	bl	80002ec <__adddf3>
 80159d4:	4622      	mov	r2, r4
 80159d6:	462b      	mov	r3, r5
 80159d8:	f7ea fe3e 	bl	8000658 <__aeabi_dmul>
 80159dc:	a378      	add	r3, pc, #480	; (adr r3, 8015bc0 <__ieee754_pow+0x718>)
 80159de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80159e2:	f7ea fc83 	bl	80002ec <__adddf3>
 80159e6:	4622      	mov	r2, r4
 80159e8:	462b      	mov	r3, r5
 80159ea:	f7ea fe35 	bl	8000658 <__aeabi_dmul>
 80159ee:	a376      	add	r3, pc, #472	; (adr r3, 8015bc8 <__ieee754_pow+0x720>)
 80159f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80159f4:	f7ea fc7a 	bl	80002ec <__adddf3>
 80159f8:	4622      	mov	r2, r4
 80159fa:	462b      	mov	r3, r5
 80159fc:	f7ea fe2c 	bl	8000658 <__aeabi_dmul>
 8015a00:	a373      	add	r3, pc, #460	; (adr r3, 8015bd0 <__ieee754_pow+0x728>)
 8015a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a06:	f7ea fc71 	bl	80002ec <__adddf3>
 8015a0a:	4622      	mov	r2, r4
 8015a0c:	462b      	mov	r3, r5
 8015a0e:	f7ea fe23 	bl	8000658 <__aeabi_dmul>
 8015a12:	a371      	add	r3, pc, #452	; (adr r3, 8015bd8 <__ieee754_pow+0x730>)
 8015a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a18:	f7ea fc68 	bl	80002ec <__adddf3>
 8015a1c:	4622      	mov	r2, r4
 8015a1e:	4606      	mov	r6, r0
 8015a20:	460f      	mov	r7, r1
 8015a22:	462b      	mov	r3, r5
 8015a24:	4620      	mov	r0, r4
 8015a26:	4629      	mov	r1, r5
 8015a28:	f7ea fe16 	bl	8000658 <__aeabi_dmul>
 8015a2c:	4602      	mov	r2, r0
 8015a2e:	460b      	mov	r3, r1
 8015a30:	4630      	mov	r0, r6
 8015a32:	4639      	mov	r1, r7
 8015a34:	f7ea fe10 	bl	8000658 <__aeabi_dmul>
 8015a38:	4642      	mov	r2, r8
 8015a3a:	4604      	mov	r4, r0
 8015a3c:	460d      	mov	r5, r1
 8015a3e:	464b      	mov	r3, r9
 8015a40:	ec51 0b18 	vmov	r0, r1, d8
 8015a44:	f7ea fc52 	bl	80002ec <__adddf3>
 8015a48:	ec53 2b19 	vmov	r2, r3, d9
 8015a4c:	f7ea fe04 	bl	8000658 <__aeabi_dmul>
 8015a50:	4622      	mov	r2, r4
 8015a52:	462b      	mov	r3, r5
 8015a54:	f7ea fc4a 	bl	80002ec <__adddf3>
 8015a58:	4642      	mov	r2, r8
 8015a5a:	4682      	mov	sl, r0
 8015a5c:	468b      	mov	fp, r1
 8015a5e:	464b      	mov	r3, r9
 8015a60:	4640      	mov	r0, r8
 8015a62:	4649      	mov	r1, r9
 8015a64:	f7ea fdf8 	bl	8000658 <__aeabi_dmul>
 8015a68:	4b6b      	ldr	r3, [pc, #428]	; (8015c18 <__ieee754_pow+0x770>)
 8015a6a:	2200      	movs	r2, #0
 8015a6c:	4606      	mov	r6, r0
 8015a6e:	460f      	mov	r7, r1
 8015a70:	f7ea fc3c 	bl	80002ec <__adddf3>
 8015a74:	4652      	mov	r2, sl
 8015a76:	465b      	mov	r3, fp
 8015a78:	f7ea fc38 	bl	80002ec <__adddf3>
 8015a7c:	2000      	movs	r0, #0
 8015a7e:	4604      	mov	r4, r0
 8015a80:	460d      	mov	r5, r1
 8015a82:	4602      	mov	r2, r0
 8015a84:	460b      	mov	r3, r1
 8015a86:	4640      	mov	r0, r8
 8015a88:	4649      	mov	r1, r9
 8015a8a:	f7ea fde5 	bl	8000658 <__aeabi_dmul>
 8015a8e:	4b62      	ldr	r3, [pc, #392]	; (8015c18 <__ieee754_pow+0x770>)
 8015a90:	4680      	mov	r8, r0
 8015a92:	4689      	mov	r9, r1
 8015a94:	2200      	movs	r2, #0
 8015a96:	4620      	mov	r0, r4
 8015a98:	4629      	mov	r1, r5
 8015a9a:	f7ea fc25 	bl	80002e8 <__aeabi_dsub>
 8015a9e:	4632      	mov	r2, r6
 8015aa0:	463b      	mov	r3, r7
 8015aa2:	f7ea fc21 	bl	80002e8 <__aeabi_dsub>
 8015aa6:	4602      	mov	r2, r0
 8015aa8:	460b      	mov	r3, r1
 8015aaa:	4650      	mov	r0, sl
 8015aac:	4659      	mov	r1, fp
 8015aae:	f7ea fc1b 	bl	80002e8 <__aeabi_dsub>
 8015ab2:	ec53 2b18 	vmov	r2, r3, d8
 8015ab6:	f7ea fdcf 	bl	8000658 <__aeabi_dmul>
 8015aba:	4622      	mov	r2, r4
 8015abc:	4606      	mov	r6, r0
 8015abe:	460f      	mov	r7, r1
 8015ac0:	462b      	mov	r3, r5
 8015ac2:	ec51 0b19 	vmov	r0, r1, d9
 8015ac6:	f7ea fdc7 	bl	8000658 <__aeabi_dmul>
 8015aca:	4602      	mov	r2, r0
 8015acc:	460b      	mov	r3, r1
 8015ace:	4630      	mov	r0, r6
 8015ad0:	4639      	mov	r1, r7
 8015ad2:	f7ea fc0b 	bl	80002ec <__adddf3>
 8015ad6:	4606      	mov	r6, r0
 8015ad8:	460f      	mov	r7, r1
 8015ada:	4602      	mov	r2, r0
 8015adc:	460b      	mov	r3, r1
 8015ade:	4640      	mov	r0, r8
 8015ae0:	4649      	mov	r1, r9
 8015ae2:	f7ea fc03 	bl	80002ec <__adddf3>
 8015ae6:	a33e      	add	r3, pc, #248	; (adr r3, 8015be0 <__ieee754_pow+0x738>)
 8015ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015aec:	2000      	movs	r0, #0
 8015aee:	4604      	mov	r4, r0
 8015af0:	460d      	mov	r5, r1
 8015af2:	f7ea fdb1 	bl	8000658 <__aeabi_dmul>
 8015af6:	4642      	mov	r2, r8
 8015af8:	ec41 0b18 	vmov	d8, r0, r1
 8015afc:	464b      	mov	r3, r9
 8015afe:	4620      	mov	r0, r4
 8015b00:	4629      	mov	r1, r5
 8015b02:	f7ea fbf1 	bl	80002e8 <__aeabi_dsub>
 8015b06:	4602      	mov	r2, r0
 8015b08:	460b      	mov	r3, r1
 8015b0a:	4630      	mov	r0, r6
 8015b0c:	4639      	mov	r1, r7
 8015b0e:	f7ea fbeb 	bl	80002e8 <__aeabi_dsub>
 8015b12:	a335      	add	r3, pc, #212	; (adr r3, 8015be8 <__ieee754_pow+0x740>)
 8015b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b18:	f7ea fd9e 	bl	8000658 <__aeabi_dmul>
 8015b1c:	a334      	add	r3, pc, #208	; (adr r3, 8015bf0 <__ieee754_pow+0x748>)
 8015b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b22:	4606      	mov	r6, r0
 8015b24:	460f      	mov	r7, r1
 8015b26:	4620      	mov	r0, r4
 8015b28:	4629      	mov	r1, r5
 8015b2a:	f7ea fd95 	bl	8000658 <__aeabi_dmul>
 8015b2e:	4602      	mov	r2, r0
 8015b30:	460b      	mov	r3, r1
 8015b32:	4630      	mov	r0, r6
 8015b34:	4639      	mov	r1, r7
 8015b36:	f7ea fbd9 	bl	80002ec <__adddf3>
 8015b3a:	9a07      	ldr	r2, [sp, #28]
 8015b3c:	4b37      	ldr	r3, [pc, #220]	; (8015c1c <__ieee754_pow+0x774>)
 8015b3e:	4413      	add	r3, r2
 8015b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b44:	f7ea fbd2 	bl	80002ec <__adddf3>
 8015b48:	4682      	mov	sl, r0
 8015b4a:	9805      	ldr	r0, [sp, #20]
 8015b4c:	468b      	mov	fp, r1
 8015b4e:	f7ea fd19 	bl	8000584 <__aeabi_i2d>
 8015b52:	9a07      	ldr	r2, [sp, #28]
 8015b54:	4b32      	ldr	r3, [pc, #200]	; (8015c20 <__ieee754_pow+0x778>)
 8015b56:	4413      	add	r3, r2
 8015b58:	e9d3 8900 	ldrd	r8, r9, [r3]
 8015b5c:	4606      	mov	r6, r0
 8015b5e:	460f      	mov	r7, r1
 8015b60:	4652      	mov	r2, sl
 8015b62:	465b      	mov	r3, fp
 8015b64:	ec51 0b18 	vmov	r0, r1, d8
 8015b68:	f7ea fbc0 	bl	80002ec <__adddf3>
 8015b6c:	4642      	mov	r2, r8
 8015b6e:	464b      	mov	r3, r9
 8015b70:	f7ea fbbc 	bl	80002ec <__adddf3>
 8015b74:	4632      	mov	r2, r6
 8015b76:	463b      	mov	r3, r7
 8015b78:	f7ea fbb8 	bl	80002ec <__adddf3>
 8015b7c:	2000      	movs	r0, #0
 8015b7e:	4632      	mov	r2, r6
 8015b80:	463b      	mov	r3, r7
 8015b82:	4604      	mov	r4, r0
 8015b84:	460d      	mov	r5, r1
 8015b86:	f7ea fbaf 	bl	80002e8 <__aeabi_dsub>
 8015b8a:	4642      	mov	r2, r8
 8015b8c:	464b      	mov	r3, r9
 8015b8e:	f7ea fbab 	bl	80002e8 <__aeabi_dsub>
 8015b92:	ec53 2b18 	vmov	r2, r3, d8
 8015b96:	f7ea fba7 	bl	80002e8 <__aeabi_dsub>
 8015b9a:	4602      	mov	r2, r0
 8015b9c:	460b      	mov	r3, r1
 8015b9e:	4650      	mov	r0, sl
 8015ba0:	4659      	mov	r1, fp
 8015ba2:	e610      	b.n	80157c6 <__ieee754_pow+0x31e>
 8015ba4:	2401      	movs	r4, #1
 8015ba6:	e6a1      	b.n	80158ec <__ieee754_pow+0x444>
 8015ba8:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8015bf8 <__ieee754_pow+0x750>
 8015bac:	e617      	b.n	80157de <__ieee754_pow+0x336>
 8015bae:	bf00      	nop
 8015bb0:	4a454eef 	.word	0x4a454eef
 8015bb4:	3fca7e28 	.word	0x3fca7e28
 8015bb8:	93c9db65 	.word	0x93c9db65
 8015bbc:	3fcd864a 	.word	0x3fcd864a
 8015bc0:	a91d4101 	.word	0xa91d4101
 8015bc4:	3fd17460 	.word	0x3fd17460
 8015bc8:	518f264d 	.word	0x518f264d
 8015bcc:	3fd55555 	.word	0x3fd55555
 8015bd0:	db6fabff 	.word	0xdb6fabff
 8015bd4:	3fdb6db6 	.word	0x3fdb6db6
 8015bd8:	33333303 	.word	0x33333303
 8015bdc:	3fe33333 	.word	0x3fe33333
 8015be0:	e0000000 	.word	0xe0000000
 8015be4:	3feec709 	.word	0x3feec709
 8015be8:	dc3a03fd 	.word	0xdc3a03fd
 8015bec:	3feec709 	.word	0x3feec709
 8015bf0:	145b01f5 	.word	0x145b01f5
 8015bf4:	be3e2fe0 	.word	0xbe3e2fe0
 8015bf8:	00000000 	.word	0x00000000
 8015bfc:	3ff00000 	.word	0x3ff00000
 8015c00:	7ff00000 	.word	0x7ff00000
 8015c04:	43400000 	.word	0x43400000
 8015c08:	0003988e 	.word	0x0003988e
 8015c0c:	000bb679 	.word	0x000bb679
 8015c10:	08016e00 	.word	0x08016e00
 8015c14:	3ff00000 	.word	0x3ff00000
 8015c18:	40080000 	.word	0x40080000
 8015c1c:	08016e20 	.word	0x08016e20
 8015c20:	08016e10 	.word	0x08016e10
 8015c24:	a3b5      	add	r3, pc, #724	; (adr r3, 8015efc <__ieee754_pow+0xa54>)
 8015c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c2a:	4640      	mov	r0, r8
 8015c2c:	4649      	mov	r1, r9
 8015c2e:	f7ea fb5d 	bl	80002ec <__adddf3>
 8015c32:	4622      	mov	r2, r4
 8015c34:	ec41 0b1a 	vmov	d10, r0, r1
 8015c38:	462b      	mov	r3, r5
 8015c3a:	4630      	mov	r0, r6
 8015c3c:	4639      	mov	r1, r7
 8015c3e:	f7ea fb53 	bl	80002e8 <__aeabi_dsub>
 8015c42:	4602      	mov	r2, r0
 8015c44:	460b      	mov	r3, r1
 8015c46:	ec51 0b1a 	vmov	r0, r1, d10
 8015c4a:	f7ea ff95 	bl	8000b78 <__aeabi_dcmpgt>
 8015c4e:	2800      	cmp	r0, #0
 8015c50:	f47f ae04 	bne.w	801585c <__ieee754_pow+0x3b4>
 8015c54:	4aa4      	ldr	r2, [pc, #656]	; (8015ee8 <__ieee754_pow+0xa40>)
 8015c56:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8015c5a:	4293      	cmp	r3, r2
 8015c5c:	f340 8108 	ble.w	8015e70 <__ieee754_pow+0x9c8>
 8015c60:	151b      	asrs	r3, r3, #20
 8015c62:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8015c66:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8015c6a:	fa4a f303 	asr.w	r3, sl, r3
 8015c6e:	445b      	add	r3, fp
 8015c70:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8015c74:	4e9d      	ldr	r6, [pc, #628]	; (8015eec <__ieee754_pow+0xa44>)
 8015c76:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8015c7a:	4116      	asrs	r6, r2
 8015c7c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8015c80:	2000      	movs	r0, #0
 8015c82:	ea23 0106 	bic.w	r1, r3, r6
 8015c86:	f1c2 0214 	rsb	r2, r2, #20
 8015c8a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8015c8e:	fa4a fa02 	asr.w	sl, sl, r2
 8015c92:	f1bb 0f00 	cmp.w	fp, #0
 8015c96:	4602      	mov	r2, r0
 8015c98:	460b      	mov	r3, r1
 8015c9a:	4620      	mov	r0, r4
 8015c9c:	4629      	mov	r1, r5
 8015c9e:	bfb8      	it	lt
 8015ca0:	f1ca 0a00 	rsblt	sl, sl, #0
 8015ca4:	f7ea fb20 	bl	80002e8 <__aeabi_dsub>
 8015ca8:	ec41 0b19 	vmov	d9, r0, r1
 8015cac:	4642      	mov	r2, r8
 8015cae:	464b      	mov	r3, r9
 8015cb0:	ec51 0b19 	vmov	r0, r1, d9
 8015cb4:	f7ea fb1a 	bl	80002ec <__adddf3>
 8015cb8:	a37b      	add	r3, pc, #492	; (adr r3, 8015ea8 <__ieee754_pow+0xa00>)
 8015cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015cbe:	2000      	movs	r0, #0
 8015cc0:	4604      	mov	r4, r0
 8015cc2:	460d      	mov	r5, r1
 8015cc4:	f7ea fcc8 	bl	8000658 <__aeabi_dmul>
 8015cc8:	ec53 2b19 	vmov	r2, r3, d9
 8015ccc:	4606      	mov	r6, r0
 8015cce:	460f      	mov	r7, r1
 8015cd0:	4620      	mov	r0, r4
 8015cd2:	4629      	mov	r1, r5
 8015cd4:	f7ea fb08 	bl	80002e8 <__aeabi_dsub>
 8015cd8:	4602      	mov	r2, r0
 8015cda:	460b      	mov	r3, r1
 8015cdc:	4640      	mov	r0, r8
 8015cde:	4649      	mov	r1, r9
 8015ce0:	f7ea fb02 	bl	80002e8 <__aeabi_dsub>
 8015ce4:	a372      	add	r3, pc, #456	; (adr r3, 8015eb0 <__ieee754_pow+0xa08>)
 8015ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015cea:	f7ea fcb5 	bl	8000658 <__aeabi_dmul>
 8015cee:	a372      	add	r3, pc, #456	; (adr r3, 8015eb8 <__ieee754_pow+0xa10>)
 8015cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015cf4:	4680      	mov	r8, r0
 8015cf6:	4689      	mov	r9, r1
 8015cf8:	4620      	mov	r0, r4
 8015cfa:	4629      	mov	r1, r5
 8015cfc:	f7ea fcac 	bl	8000658 <__aeabi_dmul>
 8015d00:	4602      	mov	r2, r0
 8015d02:	460b      	mov	r3, r1
 8015d04:	4640      	mov	r0, r8
 8015d06:	4649      	mov	r1, r9
 8015d08:	f7ea faf0 	bl	80002ec <__adddf3>
 8015d0c:	4604      	mov	r4, r0
 8015d0e:	460d      	mov	r5, r1
 8015d10:	4602      	mov	r2, r0
 8015d12:	460b      	mov	r3, r1
 8015d14:	4630      	mov	r0, r6
 8015d16:	4639      	mov	r1, r7
 8015d18:	f7ea fae8 	bl	80002ec <__adddf3>
 8015d1c:	4632      	mov	r2, r6
 8015d1e:	463b      	mov	r3, r7
 8015d20:	4680      	mov	r8, r0
 8015d22:	4689      	mov	r9, r1
 8015d24:	f7ea fae0 	bl	80002e8 <__aeabi_dsub>
 8015d28:	4602      	mov	r2, r0
 8015d2a:	460b      	mov	r3, r1
 8015d2c:	4620      	mov	r0, r4
 8015d2e:	4629      	mov	r1, r5
 8015d30:	f7ea fada 	bl	80002e8 <__aeabi_dsub>
 8015d34:	4642      	mov	r2, r8
 8015d36:	4606      	mov	r6, r0
 8015d38:	460f      	mov	r7, r1
 8015d3a:	464b      	mov	r3, r9
 8015d3c:	4640      	mov	r0, r8
 8015d3e:	4649      	mov	r1, r9
 8015d40:	f7ea fc8a 	bl	8000658 <__aeabi_dmul>
 8015d44:	a35e      	add	r3, pc, #376	; (adr r3, 8015ec0 <__ieee754_pow+0xa18>)
 8015d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015d4a:	4604      	mov	r4, r0
 8015d4c:	460d      	mov	r5, r1
 8015d4e:	f7ea fc83 	bl	8000658 <__aeabi_dmul>
 8015d52:	a35d      	add	r3, pc, #372	; (adr r3, 8015ec8 <__ieee754_pow+0xa20>)
 8015d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015d58:	f7ea fac6 	bl	80002e8 <__aeabi_dsub>
 8015d5c:	4622      	mov	r2, r4
 8015d5e:	462b      	mov	r3, r5
 8015d60:	f7ea fc7a 	bl	8000658 <__aeabi_dmul>
 8015d64:	a35a      	add	r3, pc, #360	; (adr r3, 8015ed0 <__ieee754_pow+0xa28>)
 8015d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015d6a:	f7ea fabf 	bl	80002ec <__adddf3>
 8015d6e:	4622      	mov	r2, r4
 8015d70:	462b      	mov	r3, r5
 8015d72:	f7ea fc71 	bl	8000658 <__aeabi_dmul>
 8015d76:	a358      	add	r3, pc, #352	; (adr r3, 8015ed8 <__ieee754_pow+0xa30>)
 8015d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015d7c:	f7ea fab4 	bl	80002e8 <__aeabi_dsub>
 8015d80:	4622      	mov	r2, r4
 8015d82:	462b      	mov	r3, r5
 8015d84:	f7ea fc68 	bl	8000658 <__aeabi_dmul>
 8015d88:	a355      	add	r3, pc, #340	; (adr r3, 8015ee0 <__ieee754_pow+0xa38>)
 8015d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015d8e:	f7ea faad 	bl	80002ec <__adddf3>
 8015d92:	4622      	mov	r2, r4
 8015d94:	462b      	mov	r3, r5
 8015d96:	f7ea fc5f 	bl	8000658 <__aeabi_dmul>
 8015d9a:	4602      	mov	r2, r0
 8015d9c:	460b      	mov	r3, r1
 8015d9e:	4640      	mov	r0, r8
 8015da0:	4649      	mov	r1, r9
 8015da2:	f7ea faa1 	bl	80002e8 <__aeabi_dsub>
 8015da6:	4604      	mov	r4, r0
 8015da8:	460d      	mov	r5, r1
 8015daa:	4602      	mov	r2, r0
 8015dac:	460b      	mov	r3, r1
 8015dae:	4640      	mov	r0, r8
 8015db0:	4649      	mov	r1, r9
 8015db2:	f7ea fc51 	bl	8000658 <__aeabi_dmul>
 8015db6:	2200      	movs	r2, #0
 8015db8:	ec41 0b19 	vmov	d9, r0, r1
 8015dbc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8015dc0:	4620      	mov	r0, r4
 8015dc2:	4629      	mov	r1, r5
 8015dc4:	f7ea fa90 	bl	80002e8 <__aeabi_dsub>
 8015dc8:	4602      	mov	r2, r0
 8015dca:	460b      	mov	r3, r1
 8015dcc:	ec51 0b19 	vmov	r0, r1, d9
 8015dd0:	f7ea fd6c 	bl	80008ac <__aeabi_ddiv>
 8015dd4:	4632      	mov	r2, r6
 8015dd6:	4604      	mov	r4, r0
 8015dd8:	460d      	mov	r5, r1
 8015dda:	463b      	mov	r3, r7
 8015ddc:	4640      	mov	r0, r8
 8015dde:	4649      	mov	r1, r9
 8015de0:	f7ea fc3a 	bl	8000658 <__aeabi_dmul>
 8015de4:	4632      	mov	r2, r6
 8015de6:	463b      	mov	r3, r7
 8015de8:	f7ea fa80 	bl	80002ec <__adddf3>
 8015dec:	4602      	mov	r2, r0
 8015dee:	460b      	mov	r3, r1
 8015df0:	4620      	mov	r0, r4
 8015df2:	4629      	mov	r1, r5
 8015df4:	f7ea fa78 	bl	80002e8 <__aeabi_dsub>
 8015df8:	4642      	mov	r2, r8
 8015dfa:	464b      	mov	r3, r9
 8015dfc:	f7ea fa74 	bl	80002e8 <__aeabi_dsub>
 8015e00:	460b      	mov	r3, r1
 8015e02:	4602      	mov	r2, r0
 8015e04:	493a      	ldr	r1, [pc, #232]	; (8015ef0 <__ieee754_pow+0xa48>)
 8015e06:	2000      	movs	r0, #0
 8015e08:	f7ea fa6e 	bl	80002e8 <__aeabi_dsub>
 8015e0c:	ec41 0b10 	vmov	d0, r0, r1
 8015e10:	ee10 3a90 	vmov	r3, s1
 8015e14:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8015e18:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8015e1c:	da2b      	bge.n	8015e76 <__ieee754_pow+0x9ce>
 8015e1e:	4650      	mov	r0, sl
 8015e20:	f000 f966 	bl	80160f0 <scalbn>
 8015e24:	ec51 0b10 	vmov	r0, r1, d0
 8015e28:	ec53 2b18 	vmov	r2, r3, d8
 8015e2c:	f7ff bbed 	b.w	801560a <__ieee754_pow+0x162>
 8015e30:	4b30      	ldr	r3, [pc, #192]	; (8015ef4 <__ieee754_pow+0xa4c>)
 8015e32:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8015e36:	429e      	cmp	r6, r3
 8015e38:	f77f af0c 	ble.w	8015c54 <__ieee754_pow+0x7ac>
 8015e3c:	4b2e      	ldr	r3, [pc, #184]	; (8015ef8 <__ieee754_pow+0xa50>)
 8015e3e:	440b      	add	r3, r1
 8015e40:	4303      	orrs	r3, r0
 8015e42:	d009      	beq.n	8015e58 <__ieee754_pow+0x9b0>
 8015e44:	ec51 0b18 	vmov	r0, r1, d8
 8015e48:	2200      	movs	r2, #0
 8015e4a:	2300      	movs	r3, #0
 8015e4c:	f7ea fe76 	bl	8000b3c <__aeabi_dcmplt>
 8015e50:	3800      	subs	r0, #0
 8015e52:	bf18      	it	ne
 8015e54:	2001      	movne	r0, #1
 8015e56:	e447      	b.n	80156e8 <__ieee754_pow+0x240>
 8015e58:	4622      	mov	r2, r4
 8015e5a:	462b      	mov	r3, r5
 8015e5c:	f7ea fa44 	bl	80002e8 <__aeabi_dsub>
 8015e60:	4642      	mov	r2, r8
 8015e62:	464b      	mov	r3, r9
 8015e64:	f7ea fe7e 	bl	8000b64 <__aeabi_dcmpge>
 8015e68:	2800      	cmp	r0, #0
 8015e6a:	f43f aef3 	beq.w	8015c54 <__ieee754_pow+0x7ac>
 8015e6e:	e7e9      	b.n	8015e44 <__ieee754_pow+0x99c>
 8015e70:	f04f 0a00 	mov.w	sl, #0
 8015e74:	e71a      	b.n	8015cac <__ieee754_pow+0x804>
 8015e76:	ec51 0b10 	vmov	r0, r1, d0
 8015e7a:	4619      	mov	r1, r3
 8015e7c:	e7d4      	b.n	8015e28 <__ieee754_pow+0x980>
 8015e7e:	491c      	ldr	r1, [pc, #112]	; (8015ef0 <__ieee754_pow+0xa48>)
 8015e80:	2000      	movs	r0, #0
 8015e82:	f7ff bb30 	b.w	80154e6 <__ieee754_pow+0x3e>
 8015e86:	2000      	movs	r0, #0
 8015e88:	2100      	movs	r1, #0
 8015e8a:	f7ff bb2c 	b.w	80154e6 <__ieee754_pow+0x3e>
 8015e8e:	4630      	mov	r0, r6
 8015e90:	4639      	mov	r1, r7
 8015e92:	f7ff bb28 	b.w	80154e6 <__ieee754_pow+0x3e>
 8015e96:	9204      	str	r2, [sp, #16]
 8015e98:	f7ff bb7a 	b.w	8015590 <__ieee754_pow+0xe8>
 8015e9c:	2300      	movs	r3, #0
 8015e9e:	f7ff bb64 	b.w	801556a <__ieee754_pow+0xc2>
 8015ea2:	bf00      	nop
 8015ea4:	f3af 8000 	nop.w
 8015ea8:	00000000 	.word	0x00000000
 8015eac:	3fe62e43 	.word	0x3fe62e43
 8015eb0:	fefa39ef 	.word	0xfefa39ef
 8015eb4:	3fe62e42 	.word	0x3fe62e42
 8015eb8:	0ca86c39 	.word	0x0ca86c39
 8015ebc:	be205c61 	.word	0xbe205c61
 8015ec0:	72bea4d0 	.word	0x72bea4d0
 8015ec4:	3e663769 	.word	0x3e663769
 8015ec8:	c5d26bf1 	.word	0xc5d26bf1
 8015ecc:	3ebbbd41 	.word	0x3ebbbd41
 8015ed0:	af25de2c 	.word	0xaf25de2c
 8015ed4:	3f11566a 	.word	0x3f11566a
 8015ed8:	16bebd93 	.word	0x16bebd93
 8015edc:	3f66c16c 	.word	0x3f66c16c
 8015ee0:	5555553e 	.word	0x5555553e
 8015ee4:	3fc55555 	.word	0x3fc55555
 8015ee8:	3fe00000 	.word	0x3fe00000
 8015eec:	000fffff 	.word	0x000fffff
 8015ef0:	3ff00000 	.word	0x3ff00000
 8015ef4:	4090cbff 	.word	0x4090cbff
 8015ef8:	3f6f3400 	.word	0x3f6f3400
 8015efc:	652b82fe 	.word	0x652b82fe
 8015f00:	3c971547 	.word	0x3c971547

08015f04 <__ieee754_sqrt>:
 8015f04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015f08:	ec55 4b10 	vmov	r4, r5, d0
 8015f0c:	4e55      	ldr	r6, [pc, #340]	; (8016064 <__ieee754_sqrt+0x160>)
 8015f0e:	43ae      	bics	r6, r5
 8015f10:	ee10 0a10 	vmov	r0, s0
 8015f14:	ee10 3a10 	vmov	r3, s0
 8015f18:	462a      	mov	r2, r5
 8015f1a:	4629      	mov	r1, r5
 8015f1c:	d110      	bne.n	8015f40 <__ieee754_sqrt+0x3c>
 8015f1e:	ee10 2a10 	vmov	r2, s0
 8015f22:	462b      	mov	r3, r5
 8015f24:	f7ea fb98 	bl	8000658 <__aeabi_dmul>
 8015f28:	4602      	mov	r2, r0
 8015f2a:	460b      	mov	r3, r1
 8015f2c:	4620      	mov	r0, r4
 8015f2e:	4629      	mov	r1, r5
 8015f30:	f7ea f9dc 	bl	80002ec <__adddf3>
 8015f34:	4604      	mov	r4, r0
 8015f36:	460d      	mov	r5, r1
 8015f38:	ec45 4b10 	vmov	d0, r4, r5
 8015f3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015f40:	2d00      	cmp	r5, #0
 8015f42:	dc10      	bgt.n	8015f66 <__ieee754_sqrt+0x62>
 8015f44:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8015f48:	4330      	orrs	r0, r6
 8015f4a:	d0f5      	beq.n	8015f38 <__ieee754_sqrt+0x34>
 8015f4c:	b15d      	cbz	r5, 8015f66 <__ieee754_sqrt+0x62>
 8015f4e:	ee10 2a10 	vmov	r2, s0
 8015f52:	462b      	mov	r3, r5
 8015f54:	ee10 0a10 	vmov	r0, s0
 8015f58:	f7ea f9c6 	bl	80002e8 <__aeabi_dsub>
 8015f5c:	4602      	mov	r2, r0
 8015f5e:	460b      	mov	r3, r1
 8015f60:	f7ea fca4 	bl	80008ac <__aeabi_ddiv>
 8015f64:	e7e6      	b.n	8015f34 <__ieee754_sqrt+0x30>
 8015f66:	1512      	asrs	r2, r2, #20
 8015f68:	d074      	beq.n	8016054 <__ieee754_sqrt+0x150>
 8015f6a:	07d4      	lsls	r4, r2, #31
 8015f6c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8015f70:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8015f74:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8015f78:	bf5e      	ittt	pl
 8015f7a:	0fda      	lsrpl	r2, r3, #31
 8015f7c:	005b      	lslpl	r3, r3, #1
 8015f7e:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8015f82:	2400      	movs	r4, #0
 8015f84:	0fda      	lsrs	r2, r3, #31
 8015f86:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8015f8a:	107f      	asrs	r7, r7, #1
 8015f8c:	005b      	lsls	r3, r3, #1
 8015f8e:	2516      	movs	r5, #22
 8015f90:	4620      	mov	r0, r4
 8015f92:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8015f96:	1886      	adds	r6, r0, r2
 8015f98:	428e      	cmp	r6, r1
 8015f9a:	bfde      	ittt	le
 8015f9c:	1b89      	suble	r1, r1, r6
 8015f9e:	18b0      	addle	r0, r6, r2
 8015fa0:	18a4      	addle	r4, r4, r2
 8015fa2:	0049      	lsls	r1, r1, #1
 8015fa4:	3d01      	subs	r5, #1
 8015fa6:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8015faa:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8015fae:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8015fb2:	d1f0      	bne.n	8015f96 <__ieee754_sqrt+0x92>
 8015fb4:	462a      	mov	r2, r5
 8015fb6:	f04f 0e20 	mov.w	lr, #32
 8015fba:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8015fbe:	4281      	cmp	r1, r0
 8015fc0:	eb06 0c05 	add.w	ip, r6, r5
 8015fc4:	dc02      	bgt.n	8015fcc <__ieee754_sqrt+0xc8>
 8015fc6:	d113      	bne.n	8015ff0 <__ieee754_sqrt+0xec>
 8015fc8:	459c      	cmp	ip, r3
 8015fca:	d811      	bhi.n	8015ff0 <__ieee754_sqrt+0xec>
 8015fcc:	f1bc 0f00 	cmp.w	ip, #0
 8015fd0:	eb0c 0506 	add.w	r5, ip, r6
 8015fd4:	da43      	bge.n	801605e <__ieee754_sqrt+0x15a>
 8015fd6:	2d00      	cmp	r5, #0
 8015fd8:	db41      	blt.n	801605e <__ieee754_sqrt+0x15a>
 8015fda:	f100 0801 	add.w	r8, r0, #1
 8015fde:	1a09      	subs	r1, r1, r0
 8015fe0:	459c      	cmp	ip, r3
 8015fe2:	bf88      	it	hi
 8015fe4:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8015fe8:	eba3 030c 	sub.w	r3, r3, ip
 8015fec:	4432      	add	r2, r6
 8015fee:	4640      	mov	r0, r8
 8015ff0:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8015ff4:	f1be 0e01 	subs.w	lr, lr, #1
 8015ff8:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8015ffc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8016000:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8016004:	d1db      	bne.n	8015fbe <__ieee754_sqrt+0xba>
 8016006:	430b      	orrs	r3, r1
 8016008:	d006      	beq.n	8016018 <__ieee754_sqrt+0x114>
 801600a:	1c50      	adds	r0, r2, #1
 801600c:	bf13      	iteet	ne
 801600e:	3201      	addne	r2, #1
 8016010:	3401      	addeq	r4, #1
 8016012:	4672      	moveq	r2, lr
 8016014:	f022 0201 	bicne.w	r2, r2, #1
 8016018:	1063      	asrs	r3, r4, #1
 801601a:	0852      	lsrs	r2, r2, #1
 801601c:	07e1      	lsls	r1, r4, #31
 801601e:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8016022:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8016026:	bf48      	it	mi
 8016028:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 801602c:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8016030:	4614      	mov	r4, r2
 8016032:	e781      	b.n	8015f38 <__ieee754_sqrt+0x34>
 8016034:	0ad9      	lsrs	r1, r3, #11
 8016036:	3815      	subs	r0, #21
 8016038:	055b      	lsls	r3, r3, #21
 801603a:	2900      	cmp	r1, #0
 801603c:	d0fa      	beq.n	8016034 <__ieee754_sqrt+0x130>
 801603e:	02cd      	lsls	r5, r1, #11
 8016040:	d50a      	bpl.n	8016058 <__ieee754_sqrt+0x154>
 8016042:	f1c2 0420 	rsb	r4, r2, #32
 8016046:	fa23 f404 	lsr.w	r4, r3, r4
 801604a:	1e55      	subs	r5, r2, #1
 801604c:	4093      	lsls	r3, r2
 801604e:	4321      	orrs	r1, r4
 8016050:	1b42      	subs	r2, r0, r5
 8016052:	e78a      	b.n	8015f6a <__ieee754_sqrt+0x66>
 8016054:	4610      	mov	r0, r2
 8016056:	e7f0      	b.n	801603a <__ieee754_sqrt+0x136>
 8016058:	0049      	lsls	r1, r1, #1
 801605a:	3201      	adds	r2, #1
 801605c:	e7ef      	b.n	801603e <__ieee754_sqrt+0x13a>
 801605e:	4680      	mov	r8, r0
 8016060:	e7bd      	b.n	8015fde <__ieee754_sqrt+0xda>
 8016062:	bf00      	nop
 8016064:	7ff00000 	.word	0x7ff00000

08016068 <with_errno>:
 8016068:	b570      	push	{r4, r5, r6, lr}
 801606a:	4604      	mov	r4, r0
 801606c:	460d      	mov	r5, r1
 801606e:	4616      	mov	r6, r2
 8016070:	f7fa f83e 	bl	80100f0 <__errno>
 8016074:	4629      	mov	r1, r5
 8016076:	6006      	str	r6, [r0, #0]
 8016078:	4620      	mov	r0, r4
 801607a:	bd70      	pop	{r4, r5, r6, pc}

0801607c <xflow>:
 801607c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801607e:	4614      	mov	r4, r2
 8016080:	461d      	mov	r5, r3
 8016082:	b108      	cbz	r0, 8016088 <xflow+0xc>
 8016084:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8016088:	e9cd 2300 	strd	r2, r3, [sp]
 801608c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016090:	4620      	mov	r0, r4
 8016092:	4629      	mov	r1, r5
 8016094:	f7ea fae0 	bl	8000658 <__aeabi_dmul>
 8016098:	2222      	movs	r2, #34	; 0x22
 801609a:	b003      	add	sp, #12
 801609c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80160a0:	f7ff bfe2 	b.w	8016068 <with_errno>

080160a4 <__math_uflow>:
 80160a4:	b508      	push	{r3, lr}
 80160a6:	2200      	movs	r2, #0
 80160a8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80160ac:	f7ff ffe6 	bl	801607c <xflow>
 80160b0:	ec41 0b10 	vmov	d0, r0, r1
 80160b4:	bd08      	pop	{r3, pc}

080160b6 <__math_oflow>:
 80160b6:	b508      	push	{r3, lr}
 80160b8:	2200      	movs	r2, #0
 80160ba:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80160be:	f7ff ffdd 	bl	801607c <xflow>
 80160c2:	ec41 0b10 	vmov	d0, r0, r1
 80160c6:	bd08      	pop	{r3, pc}

080160c8 <fabs>:
 80160c8:	ec51 0b10 	vmov	r0, r1, d0
 80160cc:	ee10 2a10 	vmov	r2, s0
 80160d0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80160d4:	ec43 2b10 	vmov	d0, r2, r3
 80160d8:	4770      	bx	lr

080160da <finite>:
 80160da:	b082      	sub	sp, #8
 80160dc:	ed8d 0b00 	vstr	d0, [sp]
 80160e0:	9801      	ldr	r0, [sp, #4]
 80160e2:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80160e6:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80160ea:	0fc0      	lsrs	r0, r0, #31
 80160ec:	b002      	add	sp, #8
 80160ee:	4770      	bx	lr

080160f0 <scalbn>:
 80160f0:	b570      	push	{r4, r5, r6, lr}
 80160f2:	ec55 4b10 	vmov	r4, r5, d0
 80160f6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80160fa:	4606      	mov	r6, r0
 80160fc:	462b      	mov	r3, r5
 80160fe:	b99a      	cbnz	r2, 8016128 <scalbn+0x38>
 8016100:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8016104:	4323      	orrs	r3, r4
 8016106:	d036      	beq.n	8016176 <scalbn+0x86>
 8016108:	4b39      	ldr	r3, [pc, #228]	; (80161f0 <scalbn+0x100>)
 801610a:	4629      	mov	r1, r5
 801610c:	ee10 0a10 	vmov	r0, s0
 8016110:	2200      	movs	r2, #0
 8016112:	f7ea faa1 	bl	8000658 <__aeabi_dmul>
 8016116:	4b37      	ldr	r3, [pc, #220]	; (80161f4 <scalbn+0x104>)
 8016118:	429e      	cmp	r6, r3
 801611a:	4604      	mov	r4, r0
 801611c:	460d      	mov	r5, r1
 801611e:	da10      	bge.n	8016142 <scalbn+0x52>
 8016120:	a32b      	add	r3, pc, #172	; (adr r3, 80161d0 <scalbn+0xe0>)
 8016122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016126:	e03a      	b.n	801619e <scalbn+0xae>
 8016128:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801612c:	428a      	cmp	r2, r1
 801612e:	d10c      	bne.n	801614a <scalbn+0x5a>
 8016130:	ee10 2a10 	vmov	r2, s0
 8016134:	4620      	mov	r0, r4
 8016136:	4629      	mov	r1, r5
 8016138:	f7ea f8d8 	bl	80002ec <__adddf3>
 801613c:	4604      	mov	r4, r0
 801613e:	460d      	mov	r5, r1
 8016140:	e019      	b.n	8016176 <scalbn+0x86>
 8016142:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8016146:	460b      	mov	r3, r1
 8016148:	3a36      	subs	r2, #54	; 0x36
 801614a:	4432      	add	r2, r6
 801614c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8016150:	428a      	cmp	r2, r1
 8016152:	dd08      	ble.n	8016166 <scalbn+0x76>
 8016154:	2d00      	cmp	r5, #0
 8016156:	a120      	add	r1, pc, #128	; (adr r1, 80161d8 <scalbn+0xe8>)
 8016158:	e9d1 0100 	ldrd	r0, r1, [r1]
 801615c:	da1c      	bge.n	8016198 <scalbn+0xa8>
 801615e:	a120      	add	r1, pc, #128	; (adr r1, 80161e0 <scalbn+0xf0>)
 8016160:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016164:	e018      	b.n	8016198 <scalbn+0xa8>
 8016166:	2a00      	cmp	r2, #0
 8016168:	dd08      	ble.n	801617c <scalbn+0x8c>
 801616a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801616e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8016172:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8016176:	ec45 4b10 	vmov	d0, r4, r5
 801617a:	bd70      	pop	{r4, r5, r6, pc}
 801617c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8016180:	da19      	bge.n	80161b6 <scalbn+0xc6>
 8016182:	f24c 3350 	movw	r3, #50000	; 0xc350
 8016186:	429e      	cmp	r6, r3
 8016188:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 801618c:	dd0a      	ble.n	80161a4 <scalbn+0xb4>
 801618e:	a112      	add	r1, pc, #72	; (adr r1, 80161d8 <scalbn+0xe8>)
 8016190:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016194:	2b00      	cmp	r3, #0
 8016196:	d1e2      	bne.n	801615e <scalbn+0x6e>
 8016198:	a30f      	add	r3, pc, #60	; (adr r3, 80161d8 <scalbn+0xe8>)
 801619a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801619e:	f7ea fa5b 	bl	8000658 <__aeabi_dmul>
 80161a2:	e7cb      	b.n	801613c <scalbn+0x4c>
 80161a4:	a10a      	add	r1, pc, #40	; (adr r1, 80161d0 <scalbn+0xe0>)
 80161a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80161aa:	2b00      	cmp	r3, #0
 80161ac:	d0b8      	beq.n	8016120 <scalbn+0x30>
 80161ae:	a10e      	add	r1, pc, #56	; (adr r1, 80161e8 <scalbn+0xf8>)
 80161b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80161b4:	e7b4      	b.n	8016120 <scalbn+0x30>
 80161b6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80161ba:	3236      	adds	r2, #54	; 0x36
 80161bc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80161c0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80161c4:	4620      	mov	r0, r4
 80161c6:	4b0c      	ldr	r3, [pc, #48]	; (80161f8 <scalbn+0x108>)
 80161c8:	2200      	movs	r2, #0
 80161ca:	e7e8      	b.n	801619e <scalbn+0xae>
 80161cc:	f3af 8000 	nop.w
 80161d0:	c2f8f359 	.word	0xc2f8f359
 80161d4:	01a56e1f 	.word	0x01a56e1f
 80161d8:	8800759c 	.word	0x8800759c
 80161dc:	7e37e43c 	.word	0x7e37e43c
 80161e0:	8800759c 	.word	0x8800759c
 80161e4:	fe37e43c 	.word	0xfe37e43c
 80161e8:	c2f8f359 	.word	0xc2f8f359
 80161ec:	81a56e1f 	.word	0x81a56e1f
 80161f0:	43500000 	.word	0x43500000
 80161f4:	ffff3cb0 	.word	0xffff3cb0
 80161f8:	3c900000 	.word	0x3c900000

080161fc <_init>:
 80161fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80161fe:	bf00      	nop
 8016200:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016202:	bc08      	pop	{r3}
 8016204:	469e      	mov	lr, r3
 8016206:	4770      	bx	lr

08016208 <_fini>:
 8016208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801620a:	bf00      	nop
 801620c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801620e:	bc08      	pop	{r3}
 8016210:	469e      	mov	lr, r3
 8016212:	4770      	bx	lr
