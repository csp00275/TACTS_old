
TACTS_testbed.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d6bc  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000071c  0800d890  0800d890  0001d890  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dfac  0800dfac  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800dfac  0800dfac  0001dfac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dfb4  0800dfb4  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dfb4  0800dfb4  0001dfb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dfb8  0800dfb8  0001dfb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800dfbc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000270  200001e0  0800e19c  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000450  0800e19c  00020450  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016338  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002de3  00000000  00000000  00036548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001198  00000000  00000000  00039330  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001050  00000000  00000000  0003a4c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028505  00000000  00000000  0003b518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b82b  00000000  00000000  00063a1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f62e2  00000000  00000000  0007f248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0017552a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000060e0  00000000  00000000  0017557c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800d874 	.word	0x0800d874

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e4 	.word	0x200001e4
 800020c:	0800d874 	.word	0x0800d874

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9aa 	b.w	8001034 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	468e      	mov	lr, r1
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d14d      	bne.n	8000e0e <__udivmoddi4+0xaa>
 8000d72:	428a      	cmp	r2, r1
 8000d74:	4694      	mov	ip, r2
 8000d76:	d969      	bls.n	8000e4c <__udivmoddi4+0xe8>
 8000d78:	fab2 f282 	clz	r2, r2
 8000d7c:	b152      	cbz	r2, 8000d94 <__udivmoddi4+0x30>
 8000d7e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d82:	f1c2 0120 	rsb	r1, r2, #32
 8000d86:	fa20 f101 	lsr.w	r1, r0, r1
 8000d8a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d8e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d92:	4094      	lsls	r4, r2
 8000d94:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d98:	0c21      	lsrs	r1, r4, #16
 8000d9a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d9e:	fa1f f78c 	uxth.w	r7, ip
 8000da2:	fb08 e316 	mls	r3, r8, r6, lr
 8000da6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000daa:	fb06 f107 	mul.w	r1, r6, r7
 8000dae:	4299      	cmp	r1, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x64>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dba:	f080 811f 	bcs.w	8000ffc <__udivmoddi4+0x298>
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	f240 811c 	bls.w	8000ffc <__udivmoddi4+0x298>
 8000dc4:	3e02      	subs	r6, #2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	1a5b      	subs	r3, r3, r1
 8000dca:	b2a4      	uxth	r4, r4
 8000dcc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dd0:	fb08 3310 	mls	r3, r8, r0, r3
 8000dd4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dd8:	fb00 f707 	mul.w	r7, r0, r7
 8000ddc:	42a7      	cmp	r7, r4
 8000dde:	d90a      	bls.n	8000df6 <__udivmoddi4+0x92>
 8000de0:	eb1c 0404 	adds.w	r4, ip, r4
 8000de4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000de8:	f080 810a 	bcs.w	8001000 <__udivmoddi4+0x29c>
 8000dec:	42a7      	cmp	r7, r4
 8000dee:	f240 8107 	bls.w	8001000 <__udivmoddi4+0x29c>
 8000df2:	4464      	add	r4, ip
 8000df4:	3802      	subs	r0, #2
 8000df6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dfa:	1be4      	subs	r4, r4, r7
 8000dfc:	2600      	movs	r6, #0
 8000dfe:	b11d      	cbz	r5, 8000e08 <__udivmoddi4+0xa4>
 8000e00:	40d4      	lsrs	r4, r2
 8000e02:	2300      	movs	r3, #0
 8000e04:	e9c5 4300 	strd	r4, r3, [r5]
 8000e08:	4631      	mov	r1, r6
 8000e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d909      	bls.n	8000e26 <__udivmoddi4+0xc2>
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	f000 80ef 	beq.w	8000ff6 <__udivmoddi4+0x292>
 8000e18:	2600      	movs	r6, #0
 8000e1a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e1e:	4630      	mov	r0, r6
 8000e20:	4631      	mov	r1, r6
 8000e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e26:	fab3 f683 	clz	r6, r3
 8000e2a:	2e00      	cmp	r6, #0
 8000e2c:	d14a      	bne.n	8000ec4 <__udivmoddi4+0x160>
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d302      	bcc.n	8000e38 <__udivmoddi4+0xd4>
 8000e32:	4282      	cmp	r2, r0
 8000e34:	f200 80f9 	bhi.w	800102a <__udivmoddi4+0x2c6>
 8000e38:	1a84      	subs	r4, r0, r2
 8000e3a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e3e:	2001      	movs	r0, #1
 8000e40:	469e      	mov	lr, r3
 8000e42:	2d00      	cmp	r5, #0
 8000e44:	d0e0      	beq.n	8000e08 <__udivmoddi4+0xa4>
 8000e46:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e4a:	e7dd      	b.n	8000e08 <__udivmoddi4+0xa4>
 8000e4c:	b902      	cbnz	r2, 8000e50 <__udivmoddi4+0xec>
 8000e4e:	deff      	udf	#255	; 0xff
 8000e50:	fab2 f282 	clz	r2, r2
 8000e54:	2a00      	cmp	r2, #0
 8000e56:	f040 8092 	bne.w	8000f7e <__udivmoddi4+0x21a>
 8000e5a:	eba1 010c 	sub.w	r1, r1, ip
 8000e5e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e62:	fa1f fe8c 	uxth.w	lr, ip
 8000e66:	2601      	movs	r6, #1
 8000e68:	0c20      	lsrs	r0, r4, #16
 8000e6a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e6e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e72:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e76:	fb0e f003 	mul.w	r0, lr, r3
 8000e7a:	4288      	cmp	r0, r1
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x12c>
 8000e7e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e82:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x12a>
 8000e88:	4288      	cmp	r0, r1
 8000e8a:	f200 80cb 	bhi.w	8001024 <__udivmoddi4+0x2c0>
 8000e8e:	4643      	mov	r3, r8
 8000e90:	1a09      	subs	r1, r1, r0
 8000e92:	b2a4      	uxth	r4, r4
 8000e94:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e98:	fb07 1110 	mls	r1, r7, r0, r1
 8000e9c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ea0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ea4:	45a6      	cmp	lr, r4
 8000ea6:	d908      	bls.n	8000eba <__udivmoddi4+0x156>
 8000ea8:	eb1c 0404 	adds.w	r4, ip, r4
 8000eac:	f100 31ff 	add.w	r1, r0, #4294967295
 8000eb0:	d202      	bcs.n	8000eb8 <__udivmoddi4+0x154>
 8000eb2:	45a6      	cmp	lr, r4
 8000eb4:	f200 80bb 	bhi.w	800102e <__udivmoddi4+0x2ca>
 8000eb8:	4608      	mov	r0, r1
 8000eba:	eba4 040e 	sub.w	r4, r4, lr
 8000ebe:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ec2:	e79c      	b.n	8000dfe <__udivmoddi4+0x9a>
 8000ec4:	f1c6 0720 	rsb	r7, r6, #32
 8000ec8:	40b3      	lsls	r3, r6
 8000eca:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ece:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ed2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ed6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eda:	431c      	orrs	r4, r3
 8000edc:	40f9      	lsrs	r1, r7
 8000ede:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ee2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ee6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eea:	0c20      	lsrs	r0, r4, #16
 8000eec:	fa1f fe8c 	uxth.w	lr, ip
 8000ef0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ef4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ef8:	fb08 f00e 	mul.w	r0, r8, lr
 8000efc:	4288      	cmp	r0, r1
 8000efe:	fa02 f206 	lsl.w	r2, r2, r6
 8000f02:	d90b      	bls.n	8000f1c <__udivmoddi4+0x1b8>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f0c:	f080 8088 	bcs.w	8001020 <__udivmoddi4+0x2bc>
 8000f10:	4288      	cmp	r0, r1
 8000f12:	f240 8085 	bls.w	8001020 <__udivmoddi4+0x2bc>
 8000f16:	f1a8 0802 	sub.w	r8, r8, #2
 8000f1a:	4461      	add	r1, ip
 8000f1c:	1a09      	subs	r1, r1, r0
 8000f1e:	b2a4      	uxth	r4, r4
 8000f20:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f24:	fb09 1110 	mls	r1, r9, r0, r1
 8000f28:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f2c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f30:	458e      	cmp	lr, r1
 8000f32:	d908      	bls.n	8000f46 <__udivmoddi4+0x1e2>
 8000f34:	eb1c 0101 	adds.w	r1, ip, r1
 8000f38:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f3c:	d26c      	bcs.n	8001018 <__udivmoddi4+0x2b4>
 8000f3e:	458e      	cmp	lr, r1
 8000f40:	d96a      	bls.n	8001018 <__udivmoddi4+0x2b4>
 8000f42:	3802      	subs	r0, #2
 8000f44:	4461      	add	r1, ip
 8000f46:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f4a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f4e:	eba1 010e 	sub.w	r1, r1, lr
 8000f52:	42a1      	cmp	r1, r4
 8000f54:	46c8      	mov	r8, r9
 8000f56:	46a6      	mov	lr, r4
 8000f58:	d356      	bcc.n	8001008 <__udivmoddi4+0x2a4>
 8000f5a:	d053      	beq.n	8001004 <__udivmoddi4+0x2a0>
 8000f5c:	b15d      	cbz	r5, 8000f76 <__udivmoddi4+0x212>
 8000f5e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f62:	eb61 010e 	sbc.w	r1, r1, lr
 8000f66:	fa01 f707 	lsl.w	r7, r1, r7
 8000f6a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f6e:	40f1      	lsrs	r1, r6
 8000f70:	431f      	orrs	r7, r3
 8000f72:	e9c5 7100 	strd	r7, r1, [r5]
 8000f76:	2600      	movs	r6, #0
 8000f78:	4631      	mov	r1, r6
 8000f7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f7e:	f1c2 0320 	rsb	r3, r2, #32
 8000f82:	40d8      	lsrs	r0, r3
 8000f84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f88:	fa21 f303 	lsr.w	r3, r1, r3
 8000f8c:	4091      	lsls	r1, r2
 8000f8e:	4301      	orrs	r1, r0
 8000f90:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f94:	fa1f fe8c 	uxth.w	lr, ip
 8000f98:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f9c:	fb07 3610 	mls	r6, r7, r0, r3
 8000fa0:	0c0b      	lsrs	r3, r1, #16
 8000fa2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fa6:	fb00 f60e 	mul.w	r6, r0, lr
 8000faa:	429e      	cmp	r6, r3
 8000fac:	fa04 f402 	lsl.w	r4, r4, r2
 8000fb0:	d908      	bls.n	8000fc4 <__udivmoddi4+0x260>
 8000fb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fba:	d22f      	bcs.n	800101c <__udivmoddi4+0x2b8>
 8000fbc:	429e      	cmp	r6, r3
 8000fbe:	d92d      	bls.n	800101c <__udivmoddi4+0x2b8>
 8000fc0:	3802      	subs	r0, #2
 8000fc2:	4463      	add	r3, ip
 8000fc4:	1b9b      	subs	r3, r3, r6
 8000fc6:	b289      	uxth	r1, r1
 8000fc8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fcc:	fb07 3316 	mls	r3, r7, r6, r3
 8000fd0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fd4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fd8:	428b      	cmp	r3, r1
 8000fda:	d908      	bls.n	8000fee <__udivmoddi4+0x28a>
 8000fdc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fe0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fe4:	d216      	bcs.n	8001014 <__udivmoddi4+0x2b0>
 8000fe6:	428b      	cmp	r3, r1
 8000fe8:	d914      	bls.n	8001014 <__udivmoddi4+0x2b0>
 8000fea:	3e02      	subs	r6, #2
 8000fec:	4461      	add	r1, ip
 8000fee:	1ac9      	subs	r1, r1, r3
 8000ff0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ff4:	e738      	b.n	8000e68 <__udivmoddi4+0x104>
 8000ff6:	462e      	mov	r6, r5
 8000ff8:	4628      	mov	r0, r5
 8000ffa:	e705      	b.n	8000e08 <__udivmoddi4+0xa4>
 8000ffc:	4606      	mov	r6, r0
 8000ffe:	e6e3      	b.n	8000dc8 <__udivmoddi4+0x64>
 8001000:	4618      	mov	r0, r3
 8001002:	e6f8      	b.n	8000df6 <__udivmoddi4+0x92>
 8001004:	454b      	cmp	r3, r9
 8001006:	d2a9      	bcs.n	8000f5c <__udivmoddi4+0x1f8>
 8001008:	ebb9 0802 	subs.w	r8, r9, r2
 800100c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001010:	3801      	subs	r0, #1
 8001012:	e7a3      	b.n	8000f5c <__udivmoddi4+0x1f8>
 8001014:	4646      	mov	r6, r8
 8001016:	e7ea      	b.n	8000fee <__udivmoddi4+0x28a>
 8001018:	4620      	mov	r0, r4
 800101a:	e794      	b.n	8000f46 <__udivmoddi4+0x1e2>
 800101c:	4640      	mov	r0, r8
 800101e:	e7d1      	b.n	8000fc4 <__udivmoddi4+0x260>
 8001020:	46d0      	mov	r8, sl
 8001022:	e77b      	b.n	8000f1c <__udivmoddi4+0x1b8>
 8001024:	3b02      	subs	r3, #2
 8001026:	4461      	add	r1, ip
 8001028:	e732      	b.n	8000e90 <__udivmoddi4+0x12c>
 800102a:	4630      	mov	r0, r6
 800102c:	e709      	b.n	8000e42 <__udivmoddi4+0xde>
 800102e:	4464      	add	r4, ip
 8001030:	3802      	subs	r0, #2
 8001032:	e742      	b.n	8000eba <__udivmoddi4+0x156>

08001034 <__aeabi_idiv0>:
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop

08001038 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b08a      	sub	sp, #40	; 0x28
 800103c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800103e:	f107 0314 	add.w	r3, r7, #20
 8001042:	2200      	movs	r2, #0
 8001044:	601a      	str	r2, [r3, #0]
 8001046:	605a      	str	r2, [r3, #4]
 8001048:	609a      	str	r2, [r3, #8]
 800104a:	60da      	str	r2, [r3, #12]
 800104c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800104e:	4b5a      	ldr	r3, [pc, #360]	; (80011b8 <MX_GPIO_Init+0x180>)
 8001050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001052:	4a59      	ldr	r2, [pc, #356]	; (80011b8 <MX_GPIO_Init+0x180>)
 8001054:	f043 0302 	orr.w	r3, r3, #2
 8001058:	6313      	str	r3, [r2, #48]	; 0x30
 800105a:	4b57      	ldr	r3, [pc, #348]	; (80011b8 <MX_GPIO_Init+0x180>)
 800105c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105e:	f003 0302 	and.w	r3, r3, #2
 8001062:	613b      	str	r3, [r7, #16]
 8001064:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001066:	4b54      	ldr	r3, [pc, #336]	; (80011b8 <MX_GPIO_Init+0x180>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106a:	4a53      	ldr	r2, [pc, #332]	; (80011b8 <MX_GPIO_Init+0x180>)
 800106c:	f043 0301 	orr.w	r3, r3, #1
 8001070:	6313      	str	r3, [r2, #48]	; 0x30
 8001072:	4b51      	ldr	r3, [pc, #324]	; (80011b8 <MX_GPIO_Init+0x180>)
 8001074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001076:	f003 0301 	and.w	r3, r3, #1
 800107a:	60fb      	str	r3, [r7, #12]
 800107c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800107e:	4b4e      	ldr	r3, [pc, #312]	; (80011b8 <MX_GPIO_Init+0x180>)
 8001080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001082:	4a4d      	ldr	r2, [pc, #308]	; (80011b8 <MX_GPIO_Init+0x180>)
 8001084:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001088:	6313      	str	r3, [r2, #48]	; 0x30
 800108a:	4b4b      	ldr	r3, [pc, #300]	; (80011b8 <MX_GPIO_Init+0x180>)
 800108c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001092:	60bb      	str	r3, [r7, #8]
 8001094:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001096:	4b48      	ldr	r3, [pc, #288]	; (80011b8 <MX_GPIO_Init+0x180>)
 8001098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109a:	4a47      	ldr	r2, [pc, #284]	; (80011b8 <MX_GPIO_Init+0x180>)
 800109c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010a0:	6313      	str	r3, [r2, #48]	; 0x30
 80010a2:	4b45      	ldr	r3, [pc, #276]	; (80011b8 <MX_GPIO_Init+0x180>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010aa:	607b      	str	r3, [r7, #4]
 80010ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80010ae:	4b42      	ldr	r3, [pc, #264]	; (80011b8 <MX_GPIO_Init+0x180>)
 80010b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b2:	4a41      	ldr	r2, [pc, #260]	; (80011b8 <MX_GPIO_Init+0x180>)
 80010b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010b8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ba:	4b3f      	ldr	r3, [pc, #252]	; (80011b8 <MX_GPIO_Init+0x180>)
 80010bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010c2:	603b      	str	r3, [r7, #0]
 80010c4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 80010c6:	2200      	movs	r2, #0
 80010c8:	2110      	movs	r1, #16
 80010ca:	483c      	ldr	r0, [pc, #240]	; (80011bc <MX_GPIO_Init+0x184>)
 80010cc:	f001 fcba 	bl	8002a44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0, GPIO_PIN_RESET);
 80010d0:	2200      	movs	r2, #0
 80010d2:	210f      	movs	r1, #15
 80010d4:	483a      	ldr	r0, [pc, #232]	; (80011c0 <MX_GPIO_Init+0x188>)
 80010d6:	f001 fcb5 	bl	8002a44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7|GPIO_PIN_6, GPIO_PIN_RESET);
 80010da:	2200      	movs	r2, #0
 80010dc:	21c0      	movs	r1, #192	; 0xc0
 80010de:	4839      	ldr	r0, [pc, #228]	; (80011c4 <MX_GPIO_Init+0x18c>)
 80010e0:	f001 fcb0 	bl	8002a44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_6, GPIO_PIN_RESET);
 80010e4:	2200      	movs	r2, #0
 80010e6:	2140      	movs	r1, #64	; 0x40
 80010e8:	4837      	ldr	r0, [pc, #220]	; (80011c8 <MX_GPIO_Init+0x190>)
 80010ea:	f001 fcab 	bl	8002a44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80010ee:	2310      	movs	r3, #16
 80010f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010f2:	2301      	movs	r3, #1
 80010f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f6:	2300      	movs	r3, #0
 80010f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010fa:	2300      	movs	r3, #0
 80010fc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010fe:	f107 0314 	add.w	r3, r7, #20
 8001102:	4619      	mov	r1, r3
 8001104:	482d      	ldr	r0, [pc, #180]	; (80011bc <MX_GPIO_Init+0x184>)
 8001106:	f001 f92d 	bl	8002364 <HAL_GPIO_Init>

  /*Configure GPIO pins : PI3 PI2 PI0 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_0;
 800110a:	230d      	movs	r3, #13
 800110c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800110e:	2301      	movs	r3, #1
 8001110:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001112:	2300      	movs	r3, #0
 8001114:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001116:	2300      	movs	r3, #0
 8001118:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800111a:	f107 0314 	add.w	r3, r7, #20
 800111e:	4619      	mov	r1, r3
 8001120:	4827      	ldr	r0, [pc, #156]	; (80011c0 <MX_GPIO_Init+0x188>)
 8001122:	f001 f91f 	bl	8002364 <HAL_GPIO_Init>

  /*Configure GPIO pin : PI1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001126:	2302      	movs	r3, #2
 8001128:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800112a:	2301      	movs	r3, #1
 800112c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112e:	2300      	movs	r3, #0
 8001130:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001132:	2301      	movs	r3, #1
 8001134:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001136:	f107 0314 	add.w	r3, r7, #20
 800113a:	4619      	mov	r1, r3
 800113c:	4820      	ldr	r0, [pc, #128]	; (80011c0 <MX_GPIO_Init+0x188>)
 800113e:	f001 f911 	bl	8002364 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001142:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001146:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001148:	2300      	movs	r3, #0
 800114a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114c:	2300      	movs	r3, #0
 800114e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001150:	f107 0314 	add.w	r3, r7, #20
 8001154:	4619      	mov	r1, r3
 8001156:	481d      	ldr	r0, [pc, #116]	; (80011cc <MX_GPIO_Init+0x194>)
 8001158:	f001 f904 	bl	8002364 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG7 PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 800115c:	23c0      	movs	r3, #192	; 0xc0
 800115e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001160:	2301      	movs	r3, #1
 8001162:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001164:	2300      	movs	r3, #0
 8001166:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001168:	2300      	movs	r3, #0
 800116a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800116c:	f107 0314 	add.w	r3, r7, #20
 8001170:	4619      	mov	r1, r3
 8001172:	4814      	ldr	r0, [pc, #80]	; (80011c4 <MX_GPIO_Init+0x18c>)
 8001174:	f001 f8f6 	bl	8002364 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001178:	2340      	movs	r3, #64	; 0x40
 800117a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800117c:	2301      	movs	r3, #1
 800117e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001180:	2300      	movs	r3, #0
 8001182:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001184:	2300      	movs	r3, #0
 8001186:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001188:	f107 0314 	add.w	r3, r7, #20
 800118c:	4619      	mov	r1, r3
 800118e:	480e      	ldr	r0, [pc, #56]	; (80011c8 <MX_GPIO_Init+0x190>)
 8001190:	f001 f8e8 	bl	8002364 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001194:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001198:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800119a:	2300      	movs	r3, #0
 800119c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119e:	2300      	movs	r3, #0
 80011a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011a2:	f107 0314 	add.w	r3, r7, #20
 80011a6:	4619      	mov	r1, r3
 80011a8:	4804      	ldr	r0, [pc, #16]	; (80011bc <MX_GPIO_Init+0x184>)
 80011aa:	f001 f8db 	bl	8002364 <HAL_GPIO_Init>

}
 80011ae:	bf00      	nop
 80011b0:	3728      	adds	r7, #40	; 0x28
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	40023800 	.word	0x40023800
 80011bc:	40020400 	.word	0x40020400
 80011c0:	40022000 	.word	0x40022000
 80011c4:	40021800 	.word	0x40021800
 80011c8:	40021c00 	.word	0x40021c00
 80011cc:	40020000 	.word	0x40020000

080011d0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011d4:	4b1b      	ldr	r3, [pc, #108]	; (8001244 <MX_I2C1_Init+0x74>)
 80011d6:	4a1c      	ldr	r2, [pc, #112]	; (8001248 <MX_I2C1_Init+0x78>)
 80011d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x6000030D;
 80011da:	4b1a      	ldr	r3, [pc, #104]	; (8001244 <MX_I2C1_Init+0x74>)
 80011dc:	4a1b      	ldr	r2, [pc, #108]	; (800124c <MX_I2C1_Init+0x7c>)
 80011de:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80011e0:	4b18      	ldr	r3, [pc, #96]	; (8001244 <MX_I2C1_Init+0x74>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011e6:	4b17      	ldr	r3, [pc, #92]	; (8001244 <MX_I2C1_Init+0x74>)
 80011e8:	2201      	movs	r2, #1
 80011ea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011ec:	4b15      	ldr	r3, [pc, #84]	; (8001244 <MX_I2C1_Init+0x74>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80011f2:	4b14      	ldr	r3, [pc, #80]	; (8001244 <MX_I2C1_Init+0x74>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80011f8:	4b12      	ldr	r3, [pc, #72]	; (8001244 <MX_I2C1_Init+0x74>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011fe:	4b11      	ldr	r3, [pc, #68]	; (8001244 <MX_I2C1_Init+0x74>)
 8001200:	2200      	movs	r2, #0
 8001202:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001204:	4b0f      	ldr	r3, [pc, #60]	; (8001244 <MX_I2C1_Init+0x74>)
 8001206:	2200      	movs	r2, #0
 8001208:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800120a:	480e      	ldr	r0, [pc, #56]	; (8001244 <MX_I2C1_Init+0x74>)
 800120c:	f001 fc46 	bl	8002a9c <HAL_I2C_Init>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001216:	f000 f9cb 	bl	80015b0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800121a:	2100      	movs	r1, #0
 800121c:	4809      	ldr	r0, [pc, #36]	; (8001244 <MX_I2C1_Init+0x74>)
 800121e:	f001 fd5f 	bl	8002ce0 <HAL_I2CEx_ConfigAnalogFilter>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001228:	f000 f9c2 	bl	80015b0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800122c:	2100      	movs	r1, #0
 800122e:	4805      	ldr	r0, [pc, #20]	; (8001244 <MX_I2C1_Init+0x74>)
 8001230:	f001 fdcc 	bl	8002dcc <HAL_I2CEx_ConfigDigitalFilter>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800123a:	f000 f9b9 	bl	80015b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800123e:	bf00      	nop
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	200001fc 	.word	0x200001fc
 8001248:	40005400 	.word	0x40005400
 800124c:	6000030d 	.word	0x6000030d

08001250 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b0aa      	sub	sp, #168	; 0xa8
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001258:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800125c:	2200      	movs	r2, #0
 800125e:	601a      	str	r2, [r3, #0]
 8001260:	605a      	str	r2, [r3, #4]
 8001262:	609a      	str	r2, [r3, #8]
 8001264:	60da      	str	r2, [r3, #12]
 8001266:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001268:	f107 0310 	add.w	r3, r7, #16
 800126c:	2284      	movs	r2, #132	; 0x84
 800126e:	2100      	movs	r1, #0
 8001270:	4618      	mov	r0, r3
 8001272:	f007 fa5f 	bl	8008734 <memset>
  if(i2cHandle->Instance==I2C1)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4a22      	ldr	r2, [pc, #136]	; (8001304 <HAL_I2C_MspInit+0xb4>)
 800127c:	4293      	cmp	r3, r2
 800127e:	d13c      	bne.n	80012fa <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001280:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001284:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001286:	2300      	movs	r3, #0
 8001288:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800128a:	f107 0310 	add.w	r3, r7, #16
 800128e:	4618      	mov	r0, r3
 8001290:	f002 fc5c 	bl	8003b4c <HAL_RCCEx_PeriphCLKConfig>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800129a:	f000 f989 	bl	80015b0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800129e:	4b1a      	ldr	r3, [pc, #104]	; (8001308 <HAL_I2C_MspInit+0xb8>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a2:	4a19      	ldr	r2, [pc, #100]	; (8001308 <HAL_I2C_MspInit+0xb8>)
 80012a4:	f043 0302 	orr.w	r3, r3, #2
 80012a8:	6313      	str	r3, [r2, #48]	; 0x30
 80012aa:	4b17      	ldr	r3, [pc, #92]	; (8001308 <HAL_I2C_MspInit+0xb8>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ae:	f003 0302 	and.w	r3, r3, #2
 80012b2:	60fb      	str	r3, [r7, #12]
 80012b4:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80012b6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80012ba:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012be:	2312      	movs	r3, #18
 80012c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c4:	2300      	movs	r3, #0
 80012c6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ca:	2303      	movs	r3, #3
 80012cc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012d0:	2304      	movs	r3, #4
 80012d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012d6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80012da:	4619      	mov	r1, r3
 80012dc:	480b      	ldr	r0, [pc, #44]	; (800130c <HAL_I2C_MspInit+0xbc>)
 80012de:	f001 f841 	bl	8002364 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012e2:	4b09      	ldr	r3, [pc, #36]	; (8001308 <HAL_I2C_MspInit+0xb8>)
 80012e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e6:	4a08      	ldr	r2, [pc, #32]	; (8001308 <HAL_I2C_MspInit+0xb8>)
 80012e8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012ec:	6413      	str	r3, [r2, #64]	; 0x40
 80012ee:	4b06      	ldr	r3, [pc, #24]	; (8001308 <HAL_I2C_MspInit+0xb8>)
 80012f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012f6:	60bb      	str	r3, [r7, #8]
 80012f8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80012fa:	bf00      	nop
 80012fc:	37a8      	adds	r7, #168	; 0xa8
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	40005400 	.word	0x40005400
 8001308:	40023800 	.word	0x40023800
 800130c:	40020400 	.word	0x40020400

08001310 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b088      	sub	sp, #32
 8001314:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001316:	f000 fdd2 	bl	8001ebe <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800131a:	f000 f891 	bl	8001440 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800131e:	f7ff fe8b 	bl	8001038 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001322:	f7ff ff55 	bl	80011d0 <MX_I2C1_Init>
  MX_TIM7_Init();
 8001326:	f000 fc49 	bl	8001bbc <MX_TIM7_Init>
  MX_USART1_UART_Init();
 800132a:	f000 fce5 	bl	8001cf8 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 800132e:	f000 fbcf 	bl	8001ad0 <MX_TIM2_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8001332:	f000 f8f3 	bl	800151c <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */


  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 8001336:	2100      	movs	r1, #0
 8001338:	4835      	ldr	r0, [pc, #212]	; (8001410 <main+0x100>)
 800133a:	f003 fe35 	bl	8004fa8 <HAL_TIM_PWM_Start>
  HAL_UART_Receive_IT(&huart1, &rxData, 1);
 800133e:	2201      	movs	r2, #1
 8001340:	4934      	ldr	r1, [pc, #208]	; (8001414 <main+0x104>)
 8001342:	4835      	ldr	r0, [pc, #212]	; (8001418 <main+0x108>)
 8001344:	f005 fe6b 	bl	800701e <HAL_UART_Receive_IT>

  /* UART interrupt initialization */
  MessageLen = sprintf((char*)Message, "JH VL53L0X test\n\r");
 8001348:	4934      	ldr	r1, [pc, #208]	; (800141c <main+0x10c>)
 800134a:	4835      	ldr	r0, [pc, #212]	; (8001420 <main+0x110>)
 800134c:	f008 f87a 	bl	8009444 <siprintf>
 8001350:	4603      	mov	r3, r0
 8001352:	b2da      	uxtb	r2, r3
 8001354:	4b33      	ldr	r3, [pc, #204]	; (8001424 <main+0x114>)
 8001356:	701a      	strb	r2, [r3, #0]
  HAL_UART_Transmit(&huart1, Message, MessageLen, 100);
 8001358:	4b32      	ldr	r3, [pc, #200]	; (8001424 <main+0x114>)
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	b29a      	uxth	r2, r3
 800135e:	2364      	movs	r3, #100	; 0x64
 8001360:	492f      	ldr	r1, [pc, #188]	; (8001420 <main+0x110>)
 8001362:	482d      	ldr	r0, [pc, #180]	; (8001418 <main+0x108>)
 8001364:	f005 fdd8 	bl	8006f18 <HAL_UART_Transmit>
//		HAL_UART_Transmit(&huart1, Message, MessageLen, 1000);
 *
 *
 */

	  if (receivedFlag) // 전역 플래그를 확인합니다.
 8001368:	4b2f      	ldr	r3, [pc, #188]	; (8001428 <main+0x118>)
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d0fb      	beq.n	8001368 <main+0x58>
	  {
	    if (strncmp((char *)rxBuffer, "auto", 4) == 0) // 수신된 문자열이 "auto"로 시작하는지 확인합니다.
 8001370:	2204      	movs	r2, #4
 8001372:	492e      	ldr	r1, [pc, #184]	; (800142c <main+0x11c>)
 8001374:	482e      	ldr	r0, [pc, #184]	; (8001430 <main+0x120>)
 8001376:	f008 f8f6 	bl	8009566 <strncmp>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d143      	bne.n	8001408 <main+0xf8>
	    {
	      float servo_dist, step_rev_angle, step_lin_dist;

	      // 문자열에서 3개의 실수 값을 추출합니다.
	      sscanf((char *)rxBuffer + 5, "%f,%f,%f", &servo_dist, &step_rev_angle, &step_lin_dist);
 8001380:	482c      	ldr	r0, [pc, #176]	; (8001434 <main+0x124>)
 8001382:	f107 0110 	add.w	r1, r7, #16
 8001386:	f107 0214 	add.w	r2, r7, #20
 800138a:	f107 030c 	add.w	r3, r7, #12
 800138e:	9300      	str	r3, [sp, #0]
 8001390:	460b      	mov	r3, r1
 8001392:	4929      	ldr	r1, [pc, #164]	; (8001438 <main+0x128>)
 8001394:	f008 f876 	bl	8009484 <siscanf>

	      // 함수를 실행합니다.
	      stepRev(step_rev_angle);
 8001398:	edd7 7a04 	vldr	s15, [r7, #16]
 800139c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013a0:	ee17 0a90 	vmov	r0, s15
 80013a4:	f000 f914 	bl	80015d0 <stepRev>
	      stepLin(step_lin_dist);
 80013a8:	edd7 7a03 	vldr	s15, [r7, #12]
 80013ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013b0:	ee17 0a90 	vmov	r0, s15
 80013b4:	f000 f976 	bl	80016a4 <stepLin>
	      servo_angle(&htim2, TIM_CHANNEL_1, servo_dist);
 80013b8:	edd7 7a05 	vldr	s15, [r7, #20]
 80013bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013c0:	ee17 3a90 	vmov	r3, s15
 80013c4:	b29b      	uxth	r3, r3
 80013c6:	461a      	mov	r2, r3
 80013c8:	2100      	movs	r1, #0
 80013ca:	4811      	ldr	r0, [pc, #68]	; (8001410 <main+0x100>)
 80013cc:	f000 fa04 	bl	80017d8 <servo_angle>

	      // "good"을 출력합니다.
	      uint8_t goodMsg[] = "good";
 80013d0:	4a1a      	ldr	r2, [pc, #104]	; (800143c <main+0x12c>)
 80013d2:	1d3b      	adds	r3, r7, #4
 80013d4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80013d8:	6018      	str	r0, [r3, #0]
 80013da:	3304      	adds	r3, #4
 80013dc:	7019      	strb	r1, [r3, #0]
	      HAL_UART_Transmit(&huart1, goodMsg, strlen((char *)goodMsg), 1000);
 80013de:	1d3b      	adds	r3, r7, #4
 80013e0:	4618      	mov	r0, r3
 80013e2:	f7fe ff15 	bl	8000210 <strlen>
 80013e6:	4603      	mov	r3, r0
 80013e8:	b29a      	uxth	r2, r3
 80013ea:	1d39      	adds	r1, r7, #4
 80013ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013f0:	4809      	ldr	r0, [pc, #36]	; (8001418 <main+0x108>)
 80013f2:	f005 fd91 	bl	8006f18 <HAL_UART_Transmit>

	      // 줄 바꿈 문자를 추가하여 다음 출력이 새 줄에서 시작되게 합니다.
	      uint8_t newline[2] = "\r\n";
 80013f6:	f640 230d 	movw	r3, #2573	; 0xa0d
 80013fa:	803b      	strh	r3, [r7, #0]
	      HAL_UART_Transmit(&huart1, newline, 2, 10);
 80013fc:	4639      	mov	r1, r7
 80013fe:	230a      	movs	r3, #10
 8001400:	2202      	movs	r2, #2
 8001402:	4805      	ldr	r0, [pc, #20]	; (8001418 <main+0x108>)
 8001404:	f005 fd88 	bl	8006f18 <HAL_UART_Transmit>
	    }

	    receivedFlag = 0; // 전역 플래그를 재설정합니다.
 8001408:	4b07      	ldr	r3, [pc, #28]	; (8001428 <main+0x118>)
 800140a:	2200      	movs	r2, #0
 800140c:	701a      	strb	r2, [r3, #0]
	  if (receivedFlag) // 전역 플래그를 확인합니다.
 800140e:	e7ab      	b.n	8001368 <main+0x58>
 8001410:	2000031c 	.word	0x2000031c
 8001414:	200002d2 	.word	0x200002d2
 8001418:	200003b4 	.word	0x200003b4
 800141c:	0800d890 	.word	0x0800d890
 8001420:	200002d4 	.word	0x200002d4
 8001424:	20000314 	.word	0x20000314
 8001428:	200002d3 	.word	0x200002d3
 800142c:	0800d8a4 	.word	0x0800d8a4
 8001430:	20000250 	.word	0x20000250
 8001434:	20000255 	.word	0x20000255
 8001438:	0800d8ac 	.word	0x0800d8ac
 800143c:	0800d8b8 	.word	0x0800d8b8

08001440 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b094      	sub	sp, #80	; 0x50
 8001444:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001446:	f107 0320 	add.w	r3, r7, #32
 800144a:	2230      	movs	r2, #48	; 0x30
 800144c:	2100      	movs	r1, #0
 800144e:	4618      	mov	r0, r3
 8001450:	f007 f970 	bl	8008734 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001454:	f107 030c 	add.w	r3, r7, #12
 8001458:	2200      	movs	r2, #0
 800145a:	601a      	str	r2, [r3, #0]
 800145c:	605a      	str	r2, [r3, #4]
 800145e:	609a      	str	r2, [r3, #8]
 8001460:	60da      	str	r2, [r3, #12]
 8001462:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001464:	4b2b      	ldr	r3, [pc, #172]	; (8001514 <SystemClock_Config+0xd4>)
 8001466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001468:	4a2a      	ldr	r2, [pc, #168]	; (8001514 <SystemClock_Config+0xd4>)
 800146a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800146e:	6413      	str	r3, [r2, #64]	; 0x40
 8001470:	4b28      	ldr	r3, [pc, #160]	; (8001514 <SystemClock_Config+0xd4>)
 8001472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001474:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001478:	60bb      	str	r3, [r7, #8]
 800147a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800147c:	4b26      	ldr	r3, [pc, #152]	; (8001518 <SystemClock_Config+0xd8>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a25      	ldr	r2, [pc, #148]	; (8001518 <SystemClock_Config+0xd8>)
 8001482:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001486:	6013      	str	r3, [r2, #0]
 8001488:	4b23      	ldr	r3, [pc, #140]	; (8001518 <SystemClock_Config+0xd8>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001490:	607b      	str	r3, [r7, #4]
 8001492:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001494:	2301      	movs	r3, #1
 8001496:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001498:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800149c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800149e:	2302      	movs	r3, #2
 80014a0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014a2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80014a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80014a8:	2319      	movs	r3, #25
 80014aa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 432;
 80014ac:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 80014b0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014b2:	2302      	movs	r3, #2
 80014b4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80014b6:	2302      	movs	r3, #2
 80014b8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014ba:	f107 0320 	add.w	r3, r7, #32
 80014be:	4618      	mov	r0, r3
 80014c0:	f001 fd48 	bl	8002f54 <HAL_RCC_OscConfig>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80014ca:	f000 f871 	bl	80015b0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80014ce:	f001 fcf1 	bl	8002eb4 <HAL_PWREx_EnableOverDrive>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80014d8:	f000 f86a 	bl	80015b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014dc:	230f      	movs	r3, #15
 80014de:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014e0:	2302      	movs	r3, #2
 80014e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014e4:	2300      	movs	r3, #0
 80014e6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80014e8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80014ec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80014ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014f2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80014f4:	f107 030c 	add.w	r3, r7, #12
 80014f8:	2107      	movs	r1, #7
 80014fa:	4618      	mov	r0, r3
 80014fc:	f002 f884 	bl	8003608 <HAL_RCC_ClockConfig>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001506:	f000 f853 	bl	80015b0 <Error_Handler>
  }
}
 800150a:	bf00      	nop
 800150c:	3750      	adds	r7, #80	; 0x50
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	40023800 	.word	0x40023800
 8001518:	40007000 	.word	0x40007000

0800151c <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
  /* TIM7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001520:	2200      	movs	r2, #0
 8001522:	2100      	movs	r1, #0
 8001524:	2037      	movs	r0, #55	; 0x37
 8001526:	f000 fe3b 	bl	80021a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800152a:	2037      	movs	r0, #55	; 0x37
 800152c:	f000 fe64 	bl	80021f8 <HAL_NVIC_EnableIRQ>
}
 8001530:	bf00      	nop
 8001532:	bd80      	pop	{r7, pc}

08001534 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b082      	sub	sp, #8
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART1)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a15      	ldr	r2, [pc, #84]	; (8001598 <HAL_UART_RxCpltCallback+0x64>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d124      	bne.n	8001590 <HAL_UART_RxCpltCallback+0x5c>
  {
    if (rxData != '\n' && rxBufferIndex < RX_BUFFER_SIZE - 1)
 8001546:	4b15      	ldr	r3, [pc, #84]	; (800159c <HAL_UART_RxCpltCallback+0x68>)
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	2b0a      	cmp	r3, #10
 800154c:	d00f      	beq.n	800156e <HAL_UART_RxCpltCallback+0x3a>
 800154e:	4b14      	ldr	r3, [pc, #80]	; (80015a0 <HAL_UART_RxCpltCallback+0x6c>)
 8001550:	881b      	ldrh	r3, [r3, #0]
 8001552:	2b7e      	cmp	r3, #126	; 0x7e
 8001554:	d80b      	bhi.n	800156e <HAL_UART_RxCpltCallback+0x3a>
    {
      rxBuffer[rxBufferIndex++] = rxData;
 8001556:	4b12      	ldr	r3, [pc, #72]	; (80015a0 <HAL_UART_RxCpltCallback+0x6c>)
 8001558:	881b      	ldrh	r3, [r3, #0]
 800155a:	1c5a      	adds	r2, r3, #1
 800155c:	b291      	uxth	r1, r2
 800155e:	4a10      	ldr	r2, [pc, #64]	; (80015a0 <HAL_UART_RxCpltCallback+0x6c>)
 8001560:	8011      	strh	r1, [r2, #0]
 8001562:	461a      	mov	r2, r3
 8001564:	4b0d      	ldr	r3, [pc, #52]	; (800159c <HAL_UART_RxCpltCallback+0x68>)
 8001566:	7819      	ldrb	r1, [r3, #0]
 8001568:	4b0e      	ldr	r3, [pc, #56]	; (80015a4 <HAL_UART_RxCpltCallback+0x70>)
 800156a:	5499      	strb	r1, [r3, r2]
 800156c:	e00b      	b.n	8001586 <HAL_UART_RxCpltCallback+0x52>
    }
    else
    {
      rxBuffer[rxBufferIndex] = '\0';
 800156e:	4b0c      	ldr	r3, [pc, #48]	; (80015a0 <HAL_UART_RxCpltCallback+0x6c>)
 8001570:	881b      	ldrh	r3, [r3, #0]
 8001572:	461a      	mov	r2, r3
 8001574:	4b0b      	ldr	r3, [pc, #44]	; (80015a4 <HAL_UART_RxCpltCallback+0x70>)
 8001576:	2100      	movs	r1, #0
 8001578:	5499      	strb	r1, [r3, r2]
      rxBufferIndex = 0;
 800157a:	4b09      	ldr	r3, [pc, #36]	; (80015a0 <HAL_UART_RxCpltCallback+0x6c>)
 800157c:	2200      	movs	r2, #0
 800157e:	801a      	strh	r2, [r3, #0]
      receivedFlag = 1; // 문자열이 수신되었음을 알리는 플래그를 설정합니다.
 8001580:	4b09      	ldr	r3, [pc, #36]	; (80015a8 <HAL_UART_RxCpltCallback+0x74>)
 8001582:	2201      	movs	r2, #1
 8001584:	701a      	strb	r2, [r3, #0]
    }
    HAL_UART_Receive_IT(&huart1, &rxData, 1);
 8001586:	2201      	movs	r2, #1
 8001588:	4904      	ldr	r1, [pc, #16]	; (800159c <HAL_UART_RxCpltCallback+0x68>)
 800158a:	4808      	ldr	r0, [pc, #32]	; (80015ac <HAL_UART_RxCpltCallback+0x78>)
 800158c:	f005 fd47 	bl	800701e <HAL_UART_Receive_IT>
  }
}
 8001590:	bf00      	nop
 8001592:	3708      	adds	r7, #8
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}
 8001598:	40011000 	.word	0x40011000
 800159c:	200002d2 	.word	0x200002d2
 80015a0:	200002d0 	.word	0x200002d0
 80015a4:	20000250 	.word	0x20000250
 80015a8:	200002d3 	.word	0x200002d3
 80015ac:	200003b4 	.word	0x200003b4

080015b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015b4:	b672      	cpsid	i
}
 80015b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015b8:	e7fe      	b.n	80015b8 <Error_Handler+0x8>

080015ba <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 80015ba:	b480      	push	{r7}
 80015bc:	b083      	sub	sp, #12
 80015be:	af00      	add	r7, sp, #0
 80015c0:	6078      	str	r0, [r7, #4]
 80015c2:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 80015c4:	bf00      	nop
 80015c6:	370c      	adds	r7, #12
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr

080015d0 <stepRev>:
#include "gpio.h"
#include "tim.h"

#define PULSE 200

void stepRev(int ANG) {
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b086      	sub	sp, #24
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
	// ENA D2 PG7 GPIOG GPIO_PIN_6
	// CLK D3 PB4 GPIOB GPIO_PIN_4
	// DIR D4 PG7 GPIOG GPIO_PIN_7


  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);  // ENA
 80015d8:	2200      	movs	r2, #0
 80015da:	2140      	movs	r1, #64	; 0x40
 80015dc:	482e      	ldr	r0, [pc, #184]	; (8001698 <stepRev+0xc8>)
 80015de:	f001 fa31 	bl	8002a44 <HAL_GPIO_WritePin>

  if (ANG != 0) {
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d04d      	beq.n	8001684 <stepRev+0xb4>
    int direction = (ANG > 0) ? 1 : -1;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	dd01      	ble.n	80015f2 <stepRev+0x22>
 80015ee:	2301      	movs	r3, #1
 80015f0:	e001      	b.n	80015f6 <stepRev+0x26>
 80015f2:	f04f 33ff 	mov.w	r3, #4294967295
 80015f6:	613b      	str	r3, [r7, #16]
    ANG *= direction;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	693a      	ldr	r2, [r7, #16]
 80015fc:	fb02 f303 	mul.w	r3, r2, r3
 8001600:	607b      	str	r3, [r7, #4]
    HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7, direction == 1 ? GPIO_PIN_SET : GPIO_PIN_RESET); // DIR
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	2b01      	cmp	r3, #1
 8001606:	bf0c      	ite	eq
 8001608:	2301      	moveq	r3, #1
 800160a:	2300      	movne	r3, #0
 800160c:	b2db      	uxtb	r3, r3
 800160e:	461a      	mov	r2, r3
 8001610:	2180      	movs	r1, #128	; 0x80
 8001612:	4821      	ldr	r0, [pc, #132]	; (8001698 <stepRev+0xc8>)
 8001614:	f001 fa16 	bl	8002a44 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET); // ENA
 8001618:	2200      	movs	r2, #0
 800161a:	2140      	movs	r1, #64	; 0x40
 800161c:	481e      	ldr	r0, [pc, #120]	; (8001698 <stepRev+0xc8>)
 800161e:	f001 fa11 	bl	8002a44 <HAL_GPIO_WritePin>
    uint32_t steps = PULSE * ANG / 360.0;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	22c8      	movs	r2, #200	; 0xc8
 8001626:	fb02 f303 	mul.w	r3, r2, r3
 800162a:	4618      	mov	r0, r3
 800162c:	f7fe ff9a 	bl	8000564 <__aeabi_i2d>
 8001630:	f04f 0200 	mov.w	r2, #0
 8001634:	4b19      	ldr	r3, [pc, #100]	; (800169c <stepRev+0xcc>)
 8001636:	f7ff f929 	bl	800088c <__aeabi_ddiv>
 800163a:	4602      	mov	r2, r0
 800163c:	460b      	mov	r3, r1
 800163e:	4610      	mov	r0, r2
 8001640:	4619      	mov	r1, r3
 8001642:	f7ff fad1 	bl	8000be8 <__aeabi_d2uiz>
 8001646:	4603      	mov	r3, r0
 8001648:	60fb      	str	r3, [r7, #12]
    uint32_t pulse_delay_ms_ = 5; // 6rpm
 800164a:	2305      	movs	r3, #5
 800164c:	60bb      	str	r3, [r7, #8]

    for (int i = 0; i < steps; i++) {
 800164e:	2300      	movs	r3, #0
 8001650:	617b      	str	r3, [r7, #20]
 8001652:	e012      	b.n	800167a <stepRev+0xaa>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET); //CLK
 8001654:	2201      	movs	r2, #1
 8001656:	2110      	movs	r1, #16
 8001658:	4811      	ldr	r0, [pc, #68]	; (80016a0 <stepRev+0xd0>)
 800165a:	f001 f9f3 	bl	8002a44 <HAL_GPIO_WritePin>
      HAL_Delay(pulse_delay_ms_);
 800165e:	68b8      	ldr	r0, [r7, #8]
 8001660:	f000 fc8a 	bl	8001f78 <HAL_Delay>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET); //CLK
 8001664:	2200      	movs	r2, #0
 8001666:	2110      	movs	r1, #16
 8001668:	480d      	ldr	r0, [pc, #52]	; (80016a0 <stepRev+0xd0>)
 800166a:	f001 f9eb 	bl	8002a44 <HAL_GPIO_WritePin>
      HAL_Delay(pulse_delay_ms_);
 800166e:	68b8      	ldr	r0, [r7, #8]
 8001670:	f000 fc82 	bl	8001f78 <HAL_Delay>
    for (int i = 0; i < steps; i++) {
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	3301      	adds	r3, #1
 8001678:	617b      	str	r3, [r7, #20]
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	68fa      	ldr	r2, [r7, #12]
 800167e:	429a      	cmp	r2, r3
 8001680:	d8e8      	bhi.n	8001654 <stepRev+0x84>
  }
  else {
    HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET); // ENA
  }

}
 8001682:	e004      	b.n	800168e <stepRev+0xbe>
    HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET); // ENA
 8001684:	2200      	movs	r2, #0
 8001686:	2140      	movs	r1, #64	; 0x40
 8001688:	4803      	ldr	r0, [pc, #12]	; (8001698 <stepRev+0xc8>)
 800168a:	f001 f9db 	bl	8002a44 <HAL_GPIO_WritePin>
}
 800168e:	bf00      	nop
 8001690:	3718      	adds	r7, #24
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	40021800 	.word	0x40021800
 800169c:	40768000 	.word	0x40768000
 80016a0:	40020400 	.word	0x40020400

080016a4 <stepLin>:

void stepLin(int DIST) {
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b088      	sub	sp, #32
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]

	// ENA D5 PI0 GPIOI GPIO_PIN_0
	// CLK D8 PI2 GPIOI GPIO_PIN_2
	// DIR D7 PI3 GPIOI GPIO_PIN_3

	float ANG = DIST * 360.0 / 8; // 1 rev -> 8 mm
 80016ac:	6878      	ldr	r0, [r7, #4]
 80016ae:	f7fe ff59 	bl	8000564 <__aeabi_i2d>
 80016b2:	f04f 0200 	mov.w	r2, #0
 80016b6:	4b44      	ldr	r3, [pc, #272]	; (80017c8 <stepLin+0x124>)
 80016b8:	f7fe ffbe 	bl	8000638 <__aeabi_dmul>
 80016bc:	4602      	mov	r2, r0
 80016be:	460b      	mov	r3, r1
 80016c0:	4610      	mov	r0, r2
 80016c2:	4619      	mov	r1, r3
 80016c4:	f04f 0200 	mov.w	r2, #0
 80016c8:	4b40      	ldr	r3, [pc, #256]	; (80017cc <stepLin+0x128>)
 80016ca:	f7ff f8df 	bl	800088c <__aeabi_ddiv>
 80016ce:	4602      	mov	r2, r0
 80016d0:	460b      	mov	r3, r1
 80016d2:	4610      	mov	r0, r2
 80016d4:	4619      	mov	r1, r3
 80016d6:	f7ff faa7 	bl	8000c28 <__aeabi_d2f>
 80016da:	4603      	mov	r3, r0
 80016dc:	61bb      	str	r3, [r7, #24]


  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0, GPIO_PIN_SET);  // ENA
 80016de:	2201      	movs	r2, #1
 80016e0:	2101      	movs	r1, #1
 80016e2:	483b      	ldr	r0, [pc, #236]	; (80017d0 <stepLin+0x12c>)
 80016e4:	f001 f9ae 	bl	8002a44 <HAL_GPIO_WritePin>

  if (ANG != 0) {
 80016e8:	edd7 7a06 	vldr	s15, [r7, #24]
 80016ec:	eef5 7a40 	vcmp.f32	s15, #0.0
 80016f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016f4:	d05a      	beq.n	80017ac <stepLin+0x108>
    int direction = (ANG > 0) ? 1 : -1;
 80016f6:	edd7 7a06 	vldr	s15, [r7, #24]
 80016fa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80016fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001702:	dd01      	ble.n	8001708 <stepLin+0x64>
 8001704:	2301      	movs	r3, #1
 8001706:	e001      	b.n	800170c <stepLin+0x68>
 8001708:	f04f 33ff 	mov.w	r3, #4294967295
 800170c:	617b      	str	r3, [r7, #20]
    ANG *= direction;
 800170e:	697b      	ldr	r3, [r7, #20]
 8001710:	ee07 3a90 	vmov	s15, r3
 8001714:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001718:	ed97 7a06 	vldr	s14, [r7, #24]
 800171c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001720:	edc7 7a06 	vstr	s15, [r7, #24]
    HAL_GPIO_WritePin(GPIOI, GPIO_PIN_3, direction == 1 ? GPIO_PIN_SET : GPIO_PIN_RESET); // DIR
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	2b01      	cmp	r3, #1
 8001728:	bf0c      	ite	eq
 800172a:	2301      	moveq	r3, #1
 800172c:	2300      	movne	r3, #0
 800172e:	b2db      	uxtb	r3, r3
 8001730:	461a      	mov	r2, r3
 8001732:	2108      	movs	r1, #8
 8001734:	4826      	ldr	r0, [pc, #152]	; (80017d0 <stepLin+0x12c>)
 8001736:	f001 f985 	bl	8002a44 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0, GPIO_PIN_RESET);  // ENA
 800173a:	2200      	movs	r2, #0
 800173c:	2101      	movs	r1, #1
 800173e:	4824      	ldr	r0, [pc, #144]	; (80017d0 <stepLin+0x12c>)
 8001740:	f001 f980 	bl	8002a44 <HAL_GPIO_WritePin>
    uint32_t steps = PULSE * ANG / 360.0;
 8001744:	edd7 7a06 	vldr	s15, [r7, #24]
 8001748:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80017d4 <stepLin+0x130>
 800174c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001750:	ee17 0a90 	vmov	r0, s15
 8001754:	f7fe ff18 	bl	8000588 <__aeabi_f2d>
 8001758:	f04f 0200 	mov.w	r2, #0
 800175c:	4b1a      	ldr	r3, [pc, #104]	; (80017c8 <stepLin+0x124>)
 800175e:	f7ff f895 	bl	800088c <__aeabi_ddiv>
 8001762:	4602      	mov	r2, r0
 8001764:	460b      	mov	r3, r1
 8001766:	4610      	mov	r0, r2
 8001768:	4619      	mov	r1, r3
 800176a:	f7ff fa3d 	bl	8000be8 <__aeabi_d2uiz>
 800176e:	4603      	mov	r3, r0
 8001770:	613b      	str	r3, [r7, #16]
    uint32_t pulse_delay_ms_ = 1; // 6rpm
 8001772:	2301      	movs	r3, #1
 8001774:	60fb      	str	r3, [r7, #12]

    for (int i = 0; i < steps; i++) {
 8001776:	2300      	movs	r3, #0
 8001778:	61fb      	str	r3, [r7, #28]
 800177a:	e012      	b.n	80017a2 <stepLin+0xfe>
      HAL_GPIO_WritePin(GPIOI, GPIO_PIN_2, GPIO_PIN_SET); // CLK
 800177c:	2201      	movs	r2, #1
 800177e:	2104      	movs	r1, #4
 8001780:	4813      	ldr	r0, [pc, #76]	; (80017d0 <stepLin+0x12c>)
 8001782:	f001 f95f 	bl	8002a44 <HAL_GPIO_WritePin>
      HAL_Delay(pulse_delay_ms_);
 8001786:	68f8      	ldr	r0, [r7, #12]
 8001788:	f000 fbf6 	bl	8001f78 <HAL_Delay>
      HAL_GPIO_WritePin(GPIOI, GPIO_PIN_2, GPIO_PIN_RESET); // CLK
 800178c:	2200      	movs	r2, #0
 800178e:	2104      	movs	r1, #4
 8001790:	480f      	ldr	r0, [pc, #60]	; (80017d0 <stepLin+0x12c>)
 8001792:	f001 f957 	bl	8002a44 <HAL_GPIO_WritePin>
      HAL_Delay(pulse_delay_ms_);
 8001796:	68f8      	ldr	r0, [r7, #12]
 8001798:	f000 fbee 	bl	8001f78 <HAL_Delay>
    for (int i = 0; i < steps; i++) {
 800179c:	69fb      	ldr	r3, [r7, #28]
 800179e:	3301      	adds	r3, #1
 80017a0:	61fb      	str	r3, [r7, #28]
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	693a      	ldr	r2, [r7, #16]
 80017a6:	429a      	cmp	r2, r3
 80017a8:	d8e8      	bhi.n	800177c <stepLin+0xd8>
 80017aa:	e004      	b.n	80017b6 <stepLin+0x112>
    }
  }
  else {
    HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0, GPIO_PIN_RESET);  // ENA
 80017ac:	2200      	movs	r2, #0
 80017ae:	2101      	movs	r1, #1
 80017b0:	4807      	ldr	r0, [pc, #28]	; (80017d0 <stepLin+0x12c>)
 80017b2:	f001 f947 	bl	8002a44 <HAL_GPIO_WritePin>
  }

  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0, GPIO_PIN_SET);  // ENA
 80017b6:	2201      	movs	r2, #1
 80017b8:	2101      	movs	r1, #1
 80017ba:	4805      	ldr	r0, [pc, #20]	; (80017d0 <stepLin+0x12c>)
 80017bc:	f001 f942 	bl	8002a44 <HAL_GPIO_WritePin>

}
 80017c0:	bf00      	nop
 80017c2:	3720      	adds	r7, #32
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	40768000 	.word	0x40768000
 80017cc:	40200000 	.word	0x40200000
 80017d0:	40022000 	.word	0x40022000
 80017d4:	43480000 	.word	0x43480000

080017d8 <servo_angle>:

void servo_angle(TIM_HandleTypeDef *htim, uint32_t channel, uint16_t angle) {
 80017d8:	b480      	push	{r7}
 80017da:	b087      	sub	sp, #28
 80017dc:	af00      	add	r7, sp, #0
 80017de:	60f8      	str	r0, [r7, #12]
 80017e0:	60b9      	str	r1, [r7, #8]
 80017e2:	4613      	mov	r3, r2
 80017e4:	80fb      	strh	r3, [r7, #6]
    if (angle > 180)
 80017e6:	88fb      	ldrh	r3, [r7, #6]
 80017e8:	2bb4      	cmp	r3, #180	; 0xb4
 80017ea:	d901      	bls.n	80017f0 <servo_angle+0x18>
        angle = 180; // 최대 각도 제한
 80017ec:	23b4      	movs	r3, #180	; 0xb4
 80017ee:	80fb      	strh	r3, [r7, #6]

    uint32_t pulse_width = 3 + angle; // 듀티 사이클 계산 (0도에서 180도까지)
 80017f0:	88fb      	ldrh	r3, [r7, #6]
 80017f2:	3303      	adds	r3, #3
 80017f4:	617b      	str	r3, [r7, #20]
    __HAL_TIM_SET_COMPARE(htim, channel, pulse_width); // 듀티 사이클 변경
 80017f6:	68bb      	ldr	r3, [r7, #8]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d104      	bne.n	8001806 <servo_angle+0x2e>
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	697a      	ldr	r2, [r7, #20]
 8001802:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001804:	e023      	b.n	800184e <servo_angle+0x76>
    __HAL_TIM_SET_COMPARE(htim, channel, pulse_width); // 듀티 사이클 변경
 8001806:	68bb      	ldr	r3, [r7, #8]
 8001808:	2b04      	cmp	r3, #4
 800180a:	d104      	bne.n	8001816 <servo_angle+0x3e>
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	681a      	ldr	r2, [r3, #0]
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001814:	e01b      	b.n	800184e <servo_angle+0x76>
    __HAL_TIM_SET_COMPARE(htim, channel, pulse_width); // 듀티 사이클 변경
 8001816:	68bb      	ldr	r3, [r7, #8]
 8001818:	2b08      	cmp	r3, #8
 800181a:	d104      	bne.n	8001826 <servo_angle+0x4e>
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8001824:	e013      	b.n	800184e <servo_angle+0x76>
    __HAL_TIM_SET_COMPARE(htim, channel, pulse_width); // 듀티 사이클 변경
 8001826:	68bb      	ldr	r3, [r7, #8]
 8001828:	2b0c      	cmp	r3, #12
 800182a:	d104      	bne.n	8001836 <servo_angle+0x5e>
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001834:	e00b      	b.n	800184e <servo_angle+0x76>
    __HAL_TIM_SET_COMPARE(htim, channel, pulse_width); // 듀티 사이클 변경
 8001836:	68bb      	ldr	r3, [r7, #8]
 8001838:	2b10      	cmp	r3, #16
 800183a:	d104      	bne.n	8001846 <servo_angle+0x6e>
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	6593      	str	r3, [r2, #88]	; 0x58
}
 8001844:	e003      	b.n	800184e <servo_angle+0x76>
    __HAL_TIM_SET_COMPARE(htim, channel, pulse_width); // 듀티 사이클 변경
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 800184e:	bf00      	nop
 8001850:	371c      	adds	r7, #28
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr
	...

0800185c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800185c:	b480      	push	{r7}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001862:	4b0f      	ldr	r3, [pc, #60]	; (80018a0 <HAL_MspInit+0x44>)
 8001864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001866:	4a0e      	ldr	r2, [pc, #56]	; (80018a0 <HAL_MspInit+0x44>)
 8001868:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800186c:	6413      	str	r3, [r2, #64]	; 0x40
 800186e:	4b0c      	ldr	r3, [pc, #48]	; (80018a0 <HAL_MspInit+0x44>)
 8001870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001872:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001876:	607b      	str	r3, [r7, #4]
 8001878:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800187a:	4b09      	ldr	r3, [pc, #36]	; (80018a0 <HAL_MspInit+0x44>)
 800187c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800187e:	4a08      	ldr	r2, [pc, #32]	; (80018a0 <HAL_MspInit+0x44>)
 8001880:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001884:	6453      	str	r3, [r2, #68]	; 0x44
 8001886:	4b06      	ldr	r3, [pc, #24]	; (80018a0 <HAL_MspInit+0x44>)
 8001888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800188a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800188e:	603b      	str	r3, [r7, #0]
 8001890:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001892:	bf00      	nop
 8001894:	370c      	adds	r7, #12
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr
 800189e:	bf00      	nop
 80018a0:	40023800 	.word	0x40023800

080018a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018a8:	e7fe      	b.n	80018a8 <NMI_Handler+0x4>

080018aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018aa:	b480      	push	{r7}
 80018ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018ae:	e7fe      	b.n	80018ae <HardFault_Handler+0x4>

080018b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018b4:	e7fe      	b.n	80018b4 <MemManage_Handler+0x4>

080018b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018b6:	b480      	push	{r7}
 80018b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018ba:	e7fe      	b.n	80018ba <BusFault_Handler+0x4>

080018bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018c0:	e7fe      	b.n	80018c0 <UsageFault_Handler+0x4>

080018c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018c2:	b480      	push	{r7}
 80018c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018c6:	bf00      	nop
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr

080018d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018d4:	bf00      	nop
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr

080018de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018de:	b480      	push	{r7}
 80018e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018e2:	bf00      	nop
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr

080018ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018f0:	f000 fb22 	bl	8001f38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018f4:	bf00      	nop
 80018f6:	bd80      	pop	{r7, pc}

080018f8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80018fc:	4802      	ldr	r0, [pc, #8]	; (8001908 <USART1_IRQHandler+0x10>)
 80018fe:	f005 fbd3 	bl	80070a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001902:	bf00      	nop
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	200003b4 	.word	0x200003b4

0800190c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001910:	4802      	ldr	r0, [pc, #8]	; (800191c <TIM7_IRQHandler+0x10>)
 8001912:	f003 fd13 	bl	800533c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001916:	bf00      	nop
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	20000368 	.word	0x20000368

08001920 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
  return 1;
 8001924:	2301      	movs	r3, #1
}
 8001926:	4618      	mov	r0, r3
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr

08001930 <_kill>:

int _kill(int pid, int sig)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
 8001938:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800193a:	f006 fec3 	bl	80086c4 <__errno>
 800193e:	4603      	mov	r3, r0
 8001940:	2216      	movs	r2, #22
 8001942:	601a      	str	r2, [r3, #0]
  return -1;
 8001944:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001948:	4618      	mov	r0, r3
 800194a:	3708      	adds	r7, #8
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}

08001950 <_exit>:

void _exit (int status)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001958:	f04f 31ff 	mov.w	r1, #4294967295
 800195c:	6878      	ldr	r0, [r7, #4]
 800195e:	f7ff ffe7 	bl	8001930 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001962:	e7fe      	b.n	8001962 <_exit+0x12>

08001964 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b086      	sub	sp, #24
 8001968:	af00      	add	r7, sp, #0
 800196a:	60f8      	str	r0, [r7, #12]
 800196c:	60b9      	str	r1, [r7, #8]
 800196e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001970:	2300      	movs	r3, #0
 8001972:	617b      	str	r3, [r7, #20]
 8001974:	e00a      	b.n	800198c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001976:	f3af 8000 	nop.w
 800197a:	4601      	mov	r1, r0
 800197c:	68bb      	ldr	r3, [r7, #8]
 800197e:	1c5a      	adds	r2, r3, #1
 8001980:	60ba      	str	r2, [r7, #8]
 8001982:	b2ca      	uxtb	r2, r1
 8001984:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	3301      	adds	r3, #1
 800198a:	617b      	str	r3, [r7, #20]
 800198c:	697a      	ldr	r2, [r7, #20]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	429a      	cmp	r2, r3
 8001992:	dbf0      	blt.n	8001976 <_read+0x12>
  }

  return len;
 8001994:	687b      	ldr	r3, [r7, #4]
}
 8001996:	4618      	mov	r0, r3
 8001998:	3718      	adds	r7, #24
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}

0800199e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800199e:	b580      	push	{r7, lr}
 80019a0:	b086      	sub	sp, #24
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	60f8      	str	r0, [r7, #12]
 80019a6:	60b9      	str	r1, [r7, #8]
 80019a8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019aa:	2300      	movs	r3, #0
 80019ac:	617b      	str	r3, [r7, #20]
 80019ae:	e009      	b.n	80019c4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80019b0:	68bb      	ldr	r3, [r7, #8]
 80019b2:	1c5a      	adds	r2, r3, #1
 80019b4:	60ba      	str	r2, [r7, #8]
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	4618      	mov	r0, r3
 80019ba:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	3301      	adds	r3, #1
 80019c2:	617b      	str	r3, [r7, #20]
 80019c4:	697a      	ldr	r2, [r7, #20]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	429a      	cmp	r2, r3
 80019ca:	dbf1      	blt.n	80019b0 <_write+0x12>
  }
  return len;
 80019cc:	687b      	ldr	r3, [r7, #4]
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	3718      	adds	r7, #24
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}

080019d6 <_close>:

int _close(int file)
{
 80019d6:	b480      	push	{r7}
 80019d8:	b083      	sub	sp, #12
 80019da:	af00      	add	r7, sp, #0
 80019dc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80019de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	370c      	adds	r7, #12
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr

080019ee <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019ee:	b480      	push	{r7}
 80019f0:	b083      	sub	sp, #12
 80019f2:	af00      	add	r7, sp, #0
 80019f4:	6078      	str	r0, [r7, #4]
 80019f6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019fe:	605a      	str	r2, [r3, #4]
  return 0;
 8001a00:	2300      	movs	r3, #0
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	370c      	adds	r7, #12
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr

08001a0e <_isatty>:

int _isatty(int file)
{
 8001a0e:	b480      	push	{r7}
 8001a10:	b083      	sub	sp, #12
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a16:	2301      	movs	r3, #1
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	370c      	adds	r7, #12
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr

08001a24 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b085      	sub	sp, #20
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	60f8      	str	r0, [r7, #12]
 8001a2c:	60b9      	str	r1, [r7, #8]
 8001a2e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a30:	2300      	movs	r3, #0
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3714      	adds	r7, #20
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr
	...

08001a40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b086      	sub	sp, #24
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a48:	4a14      	ldr	r2, [pc, #80]	; (8001a9c <_sbrk+0x5c>)
 8001a4a:	4b15      	ldr	r3, [pc, #84]	; (8001aa0 <_sbrk+0x60>)
 8001a4c:	1ad3      	subs	r3, r2, r3
 8001a4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a54:	4b13      	ldr	r3, [pc, #76]	; (8001aa4 <_sbrk+0x64>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d102      	bne.n	8001a62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a5c:	4b11      	ldr	r3, [pc, #68]	; (8001aa4 <_sbrk+0x64>)
 8001a5e:	4a12      	ldr	r2, [pc, #72]	; (8001aa8 <_sbrk+0x68>)
 8001a60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a62:	4b10      	ldr	r3, [pc, #64]	; (8001aa4 <_sbrk+0x64>)
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	4413      	add	r3, r2
 8001a6a:	693a      	ldr	r2, [r7, #16]
 8001a6c:	429a      	cmp	r2, r3
 8001a6e:	d207      	bcs.n	8001a80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a70:	f006 fe28 	bl	80086c4 <__errno>
 8001a74:	4603      	mov	r3, r0
 8001a76:	220c      	movs	r2, #12
 8001a78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a7a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a7e:	e009      	b.n	8001a94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a80:	4b08      	ldr	r3, [pc, #32]	; (8001aa4 <_sbrk+0x64>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a86:	4b07      	ldr	r3, [pc, #28]	; (8001aa4 <_sbrk+0x64>)
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	4413      	add	r3, r2
 8001a8e:	4a05      	ldr	r2, [pc, #20]	; (8001aa4 <_sbrk+0x64>)
 8001a90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a92:	68fb      	ldr	r3, [r7, #12]
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	3718      	adds	r7, #24
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	20050000 	.word	0x20050000
 8001aa0:	00000400 	.word	0x00000400
 8001aa4:	20000318 	.word	0x20000318
 8001aa8:	20000450 	.word	0x20000450

08001aac <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ab0:	4b06      	ldr	r3, [pc, #24]	; (8001acc <SystemInit+0x20>)
 8001ab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ab6:	4a05      	ldr	r2, [pc, #20]	; (8001acc <SystemInit+0x20>)
 8001ab8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001abc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ac0:	bf00      	nop
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr
 8001aca:	bf00      	nop
 8001acc:	e000ed00 	.word	0xe000ed00

08001ad0 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim7;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b08e      	sub	sp, #56	; 0x38
 8001ad4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ad6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ada:	2200      	movs	r2, #0
 8001adc:	601a      	str	r2, [r3, #0]
 8001ade:	605a      	str	r2, [r3, #4]
 8001ae0:	609a      	str	r2, [r3, #8]
 8001ae2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ae4:	f107 031c 	add.w	r3, r7, #28
 8001ae8:	2200      	movs	r2, #0
 8001aea:	601a      	str	r2, [r3, #0]
 8001aec:	605a      	str	r2, [r3, #4]
 8001aee:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001af0:	463b      	mov	r3, r7
 8001af2:	2200      	movs	r2, #0
 8001af4:	601a      	str	r2, [r3, #0]
 8001af6:	605a      	str	r2, [r3, #4]
 8001af8:	609a      	str	r2, [r3, #8]
 8001afa:	60da      	str	r2, [r3, #12]
 8001afc:	611a      	str	r2, [r3, #16]
 8001afe:	615a      	str	r2, [r3, #20]
 8001b00:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b02:	4b2d      	ldr	r3, [pc, #180]	; (8001bb8 <MX_TIM2_Init+0xe8>)
 8001b04:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b08:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10800-1;
 8001b0a:	4b2b      	ldr	r3, [pc, #172]	; (8001bb8 <MX_TIM2_Init+0xe8>)
 8001b0c:	f642 222f 	movw	r2, #10799	; 0x2a2f
 8001b10:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b12:	4b29      	ldr	r3, [pc, #164]	; (8001bb8 <MX_TIM2_Init+0xe8>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 50-1;
 8001b18:	4b27      	ldr	r3, [pc, #156]	; (8001bb8 <MX_TIM2_Init+0xe8>)
 8001b1a:	2231      	movs	r2, #49	; 0x31
 8001b1c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b1e:	4b26      	ldr	r3, [pc, #152]	; (8001bb8 <MX_TIM2_Init+0xe8>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b24:	4b24      	ldr	r3, [pc, #144]	; (8001bb8 <MX_TIM2_Init+0xe8>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001b2a:	4823      	ldr	r0, [pc, #140]	; (8001bb8 <MX_TIM2_Init+0xe8>)
 8001b2c:	f002 fff2 	bl	8004b14 <HAL_TIM_Base_Init>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d001      	beq.n	8001b3a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001b36:	f7ff fd3b 	bl	80015b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b3e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001b40:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b44:	4619      	mov	r1, r3
 8001b46:	481c      	ldr	r0, [pc, #112]	; (8001bb8 <MX_TIM2_Init+0xe8>)
 8001b48:	f003 ff80 	bl	8005a4c <HAL_TIM_ConfigClockSource>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d001      	beq.n	8001b56 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001b52:	f7ff fd2d 	bl	80015b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001b56:	4818      	ldr	r0, [pc, #96]	; (8001bb8 <MX_TIM2_Init+0xe8>)
 8001b58:	f003 f8fc 	bl	8004d54 <HAL_TIM_PWM_Init>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d001      	beq.n	8001b66 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001b62:	f7ff fd25 	bl	80015b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b66:	2300      	movs	r3, #0
 8001b68:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b6e:	f107 031c 	add.w	r3, r7, #28
 8001b72:	4619      	mov	r1, r3
 8001b74:	4810      	ldr	r0, [pc, #64]	; (8001bb8 <MX_TIM2_Init+0xe8>)
 8001b76:	f004 ff99 	bl	8006aac <HAL_TIMEx_MasterConfigSynchronization>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d001      	beq.n	8001b84 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001b80:	f7ff fd16 	bl	80015b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b84:	2360      	movs	r3, #96	; 0x60
 8001b86:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b90:	2300      	movs	r3, #0
 8001b92:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b94:	463b      	mov	r3, r7
 8001b96:	2200      	movs	r2, #0
 8001b98:	4619      	mov	r1, r3
 8001b9a:	4807      	ldr	r0, [pc, #28]	; (8001bb8 <MX_TIM2_Init+0xe8>)
 8001b9c:	f003 fcee 	bl	800557c <HAL_TIM_PWM_ConfigChannel>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d001      	beq.n	8001baa <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001ba6:	f7ff fd03 	bl	80015b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001baa:	4803      	ldr	r0, [pc, #12]	; (8001bb8 <MX_TIM2_Init+0xe8>)
 8001bac:	f000 f86e 	bl	8001c8c <HAL_TIM_MspPostInit>

}
 8001bb0:	bf00      	nop
 8001bb2:	3738      	adds	r7, #56	; 0x38
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	2000031c 	.word	0x2000031c

08001bbc <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b084      	sub	sp, #16
 8001bc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bc2:	1d3b      	adds	r3, r7, #4
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	601a      	str	r2, [r3, #0]
 8001bc8:	605a      	str	r2, [r3, #4]
 8001bca:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001bcc:	4b14      	ldr	r3, [pc, #80]	; (8001c20 <MX_TIM7_Init+0x64>)
 8001bce:	4a15      	ldr	r2, [pc, #84]	; (8001c24 <MX_TIM7_Init+0x68>)
 8001bd0:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 10800-1;
 8001bd2:	4b13      	ldr	r3, [pc, #76]	; (8001c20 <MX_TIM7_Init+0x64>)
 8001bd4:	f642 222f 	movw	r2, #10799	; 0x2a2f
 8001bd8:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bda:	4b11      	ldr	r3, [pc, #68]	; (8001c20 <MX_TIM7_Init+0x64>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 100-1;
 8001be0:	4b0f      	ldr	r3, [pc, #60]	; (8001c20 <MX_TIM7_Init+0x64>)
 8001be2:	2263      	movs	r2, #99	; 0x63
 8001be4:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001be6:	4b0e      	ldr	r3, [pc, #56]	; (8001c20 <MX_TIM7_Init+0x64>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001bec:	480c      	ldr	r0, [pc, #48]	; (8001c20 <MX_TIM7_Init+0x64>)
 8001bee:	f002 ff91 	bl	8004b14 <HAL_TIM_Base_Init>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d001      	beq.n	8001bfc <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8001bf8:	f7ff fcda 	bl	80015b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c00:	2300      	movs	r3, #0
 8001c02:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001c04:	1d3b      	adds	r3, r7, #4
 8001c06:	4619      	mov	r1, r3
 8001c08:	4805      	ldr	r0, [pc, #20]	; (8001c20 <MX_TIM7_Init+0x64>)
 8001c0a:	f004 ff4f 	bl	8006aac <HAL_TIMEx_MasterConfigSynchronization>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d001      	beq.n	8001c18 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8001c14:	f7ff fccc 	bl	80015b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001c18:	bf00      	nop
 8001c1a:	3710      	adds	r7, #16
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	20000368 	.word	0x20000368
 8001c24:	40001400 	.word	0x40001400

08001c28 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b085      	sub	sp, #20
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c38:	d10c      	bne.n	8001c54 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c3a:	4b12      	ldr	r3, [pc, #72]	; (8001c84 <HAL_TIM_Base_MspInit+0x5c>)
 8001c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3e:	4a11      	ldr	r2, [pc, #68]	; (8001c84 <HAL_TIM_Base_MspInit+0x5c>)
 8001c40:	f043 0301 	orr.w	r3, r3, #1
 8001c44:	6413      	str	r3, [r2, #64]	; 0x40
 8001c46:	4b0f      	ldr	r3, [pc, #60]	; (8001c84 <HAL_TIM_Base_MspInit+0x5c>)
 8001c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4a:	f003 0301 	and.w	r3, r3, #1
 8001c4e:	60fb      	str	r3, [r7, #12]
 8001c50:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM7_CLK_ENABLE();
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8001c52:	e010      	b.n	8001c76 <HAL_TIM_Base_MspInit+0x4e>
  else if(tim_baseHandle->Instance==TIM7)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a0b      	ldr	r2, [pc, #44]	; (8001c88 <HAL_TIM_Base_MspInit+0x60>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d10b      	bne.n	8001c76 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001c5e:	4b09      	ldr	r3, [pc, #36]	; (8001c84 <HAL_TIM_Base_MspInit+0x5c>)
 8001c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c62:	4a08      	ldr	r2, [pc, #32]	; (8001c84 <HAL_TIM_Base_MspInit+0x5c>)
 8001c64:	f043 0320 	orr.w	r3, r3, #32
 8001c68:	6413      	str	r3, [r2, #64]	; 0x40
 8001c6a:	4b06      	ldr	r3, [pc, #24]	; (8001c84 <HAL_TIM_Base_MspInit+0x5c>)
 8001c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6e:	f003 0320 	and.w	r3, r3, #32
 8001c72:	60bb      	str	r3, [r7, #8]
 8001c74:	68bb      	ldr	r3, [r7, #8]
}
 8001c76:	bf00      	nop
 8001c78:	3714      	adds	r7, #20
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
 8001c82:	bf00      	nop
 8001c84:	40023800 	.word	0x40023800
 8001c88:	40001400 	.word	0x40001400

08001c8c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b088      	sub	sp, #32
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c94:	f107 030c 	add.w	r3, r7, #12
 8001c98:	2200      	movs	r2, #0
 8001c9a:	601a      	str	r2, [r3, #0]
 8001c9c:	605a      	str	r2, [r3, #4]
 8001c9e:	609a      	str	r2, [r3, #8]
 8001ca0:	60da      	str	r2, [r3, #12]
 8001ca2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cac:	d11c      	bne.n	8001ce8 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cae:	4b10      	ldr	r3, [pc, #64]	; (8001cf0 <HAL_TIM_MspPostInit+0x64>)
 8001cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb2:	4a0f      	ldr	r2, [pc, #60]	; (8001cf0 <HAL_TIM_MspPostInit+0x64>)
 8001cb4:	f043 0301 	orr.w	r3, r3, #1
 8001cb8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cba:	4b0d      	ldr	r3, [pc, #52]	; (8001cf0 <HAL_TIM_MspPostInit+0x64>)
 8001cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cbe:	f003 0301 	and.w	r3, r3, #1
 8001cc2:	60bb      	str	r3, [r7, #8]
 8001cc4:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001cc6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001cca:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ccc:	2302      	movs	r3, #2
 8001cce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cdc:	f107 030c 	add.w	r3, r7, #12
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	4804      	ldr	r0, [pc, #16]	; (8001cf4 <HAL_TIM_MspPostInit+0x68>)
 8001ce4:	f000 fb3e 	bl	8002364 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001ce8:	bf00      	nop
 8001cea:	3720      	adds	r7, #32
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	40023800 	.word	0x40023800
 8001cf4:	40020000 	.word	0x40020000

08001cf8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001cfc:	4b14      	ldr	r3, [pc, #80]	; (8001d50 <MX_USART1_UART_Init+0x58>)
 8001cfe:	4a15      	ldr	r2, [pc, #84]	; (8001d54 <MX_USART1_UART_Init+0x5c>)
 8001d00:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001d02:	4b13      	ldr	r3, [pc, #76]	; (8001d50 <MX_USART1_UART_Init+0x58>)
 8001d04:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d08:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001d0a:	4b11      	ldr	r3, [pc, #68]	; (8001d50 <MX_USART1_UART_Init+0x58>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001d10:	4b0f      	ldr	r3, [pc, #60]	; (8001d50 <MX_USART1_UART_Init+0x58>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001d16:	4b0e      	ldr	r3, [pc, #56]	; (8001d50 <MX_USART1_UART_Init+0x58>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001d1c:	4b0c      	ldr	r3, [pc, #48]	; (8001d50 <MX_USART1_UART_Init+0x58>)
 8001d1e:	220c      	movs	r2, #12
 8001d20:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d22:	4b0b      	ldr	r3, [pc, #44]	; (8001d50 <MX_USART1_UART_Init+0x58>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d28:	4b09      	ldr	r3, [pc, #36]	; (8001d50 <MX_USART1_UART_Init+0x58>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d2e:	4b08      	ldr	r3, [pc, #32]	; (8001d50 <MX_USART1_UART_Init+0x58>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d34:	4b06      	ldr	r3, [pc, #24]	; (8001d50 <MX_USART1_UART_Init+0x58>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001d3a:	4805      	ldr	r0, [pc, #20]	; (8001d50 <MX_USART1_UART_Init+0x58>)
 8001d3c:	f005 f82c 	bl	8006d98 <HAL_UART_Init>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d001      	beq.n	8001d4a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001d46:	f7ff fc33 	bl	80015b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001d4a:	bf00      	nop
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	200003b4 	.word	0x200003b4
 8001d54:	40011000 	.word	0x40011000

08001d58 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b0ac      	sub	sp, #176	; 0xb0
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d60:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001d64:	2200      	movs	r2, #0
 8001d66:	601a      	str	r2, [r3, #0]
 8001d68:	605a      	str	r2, [r3, #4]
 8001d6a:	609a      	str	r2, [r3, #8]
 8001d6c:	60da      	str	r2, [r3, #12]
 8001d6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d70:	f107 0318 	add.w	r3, r7, #24
 8001d74:	2284      	movs	r2, #132	; 0x84
 8001d76:	2100      	movs	r1, #0
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f006 fcdb 	bl	8008734 <memset>
  if(uartHandle->Instance==USART1)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a36      	ldr	r2, [pc, #216]	; (8001e5c <HAL_UART_MspInit+0x104>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d164      	bne.n	8001e52 <HAL_UART_MspInit+0xfa>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001d88:	2340      	movs	r3, #64	; 0x40
 8001d8a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d90:	f107 0318 	add.w	r3, r7, #24
 8001d94:	4618      	mov	r0, r3
 8001d96:	f001 fed9 	bl	8003b4c <HAL_RCCEx_PeriphCLKConfig>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d001      	beq.n	8001da4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001da0:	f7ff fc06 	bl	80015b0 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001da4:	4b2e      	ldr	r3, [pc, #184]	; (8001e60 <HAL_UART_MspInit+0x108>)
 8001da6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001da8:	4a2d      	ldr	r2, [pc, #180]	; (8001e60 <HAL_UART_MspInit+0x108>)
 8001daa:	f043 0310 	orr.w	r3, r3, #16
 8001dae:	6453      	str	r3, [r2, #68]	; 0x44
 8001db0:	4b2b      	ldr	r3, [pc, #172]	; (8001e60 <HAL_UART_MspInit+0x108>)
 8001db2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001db4:	f003 0310 	and.w	r3, r3, #16
 8001db8:	617b      	str	r3, [r7, #20]
 8001dba:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dbc:	4b28      	ldr	r3, [pc, #160]	; (8001e60 <HAL_UART_MspInit+0x108>)
 8001dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc0:	4a27      	ldr	r2, [pc, #156]	; (8001e60 <HAL_UART_MspInit+0x108>)
 8001dc2:	f043 0302 	orr.w	r3, r3, #2
 8001dc6:	6313      	str	r3, [r2, #48]	; 0x30
 8001dc8:	4b25      	ldr	r3, [pc, #148]	; (8001e60 <HAL_UART_MspInit+0x108>)
 8001dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dcc:	f003 0302 	and.w	r3, r3, #2
 8001dd0:	613b      	str	r3, [r7, #16]
 8001dd2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dd4:	4b22      	ldr	r3, [pc, #136]	; (8001e60 <HAL_UART_MspInit+0x108>)
 8001dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd8:	4a21      	ldr	r2, [pc, #132]	; (8001e60 <HAL_UART_MspInit+0x108>)
 8001dda:	f043 0301 	orr.w	r3, r3, #1
 8001dde:	6313      	str	r3, [r2, #48]	; 0x30
 8001de0:	4b1f      	ldr	r3, [pc, #124]	; (8001e60 <HAL_UART_MspInit+0x108>)
 8001de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de4:	f003 0301 	and.w	r3, r3, #1
 8001de8:	60fb      	str	r3, [r7, #12]
 8001dea:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001dec:	2380      	movs	r3, #128	; 0x80
 8001dee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001df2:	2302      	movs	r3, #2
 8001df4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dfe:	2303      	movs	r3, #3
 8001e00:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001e04:	2307      	movs	r3, #7
 8001e06:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e0a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001e0e:	4619      	mov	r1, r3
 8001e10:	4814      	ldr	r0, [pc, #80]	; (8001e64 <HAL_UART_MspInit+0x10c>)
 8001e12:	f000 faa7 	bl	8002364 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001e16:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e1a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e1e:	2302      	movs	r3, #2
 8001e20:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e24:	2300      	movs	r3, #0
 8001e26:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001e30:	2307      	movs	r3, #7
 8001e32:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e36:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	480a      	ldr	r0, [pc, #40]	; (8001e68 <HAL_UART_MspInit+0x110>)
 8001e3e:	f000 fa91 	bl	8002364 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001e42:	2200      	movs	r2, #0
 8001e44:	2100      	movs	r1, #0
 8001e46:	2025      	movs	r0, #37	; 0x25
 8001e48:	f000 f9aa 	bl	80021a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001e4c:	2025      	movs	r0, #37	; 0x25
 8001e4e:	f000 f9d3 	bl	80021f8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001e52:	bf00      	nop
 8001e54:	37b0      	adds	r7, #176	; 0xb0
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	40011000 	.word	0x40011000
 8001e60:	40023800 	.word	0x40023800
 8001e64:	40020400 	.word	0x40020400
 8001e68:	40020000 	.word	0x40020000

08001e6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001e6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ea4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e70:	480d      	ldr	r0, [pc, #52]	; (8001ea8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001e72:	490e      	ldr	r1, [pc, #56]	; (8001eac <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001e74:	4a0e      	ldr	r2, [pc, #56]	; (8001eb0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e78:	e002      	b.n	8001e80 <LoopCopyDataInit>

08001e7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e7e:	3304      	adds	r3, #4

08001e80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e84:	d3f9      	bcc.n	8001e7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e86:	4a0b      	ldr	r2, [pc, #44]	; (8001eb4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001e88:	4c0b      	ldr	r4, [pc, #44]	; (8001eb8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001e8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e8c:	e001      	b.n	8001e92 <LoopFillZerobss>

08001e8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e90:	3204      	adds	r2, #4

08001e92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e94:	d3fb      	bcc.n	8001e8e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001e96:	f7ff fe09 	bl	8001aac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e9a:	f006 fc19 	bl	80086d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e9e:	f7ff fa37 	bl	8001310 <main>
  bx  lr    
 8001ea2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001ea4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001ea8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001eac:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001eb0:	0800dfbc 	.word	0x0800dfbc
  ldr r2, =_sbss
 8001eb4:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001eb8:	20000450 	.word	0x20000450

08001ebc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ebc:	e7fe      	b.n	8001ebc <ADC_IRQHandler>

08001ebe <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ebe:	b580      	push	{r7, lr}
 8001ec0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ec2:	2003      	movs	r0, #3
 8001ec4:	f000 f94c 	bl	8002160 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ec8:	200f      	movs	r0, #15
 8001eca:	f000 f805 	bl	8001ed8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ece:	f7ff fcc5 	bl	800185c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ed2:	2300      	movs	r3, #0
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	bd80      	pop	{r7, pc}

08001ed8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b082      	sub	sp, #8
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ee0:	4b12      	ldr	r3, [pc, #72]	; (8001f2c <HAL_InitTick+0x54>)
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	4b12      	ldr	r3, [pc, #72]	; (8001f30 <HAL_InitTick+0x58>)
 8001ee6:	781b      	ldrb	r3, [r3, #0]
 8001ee8:	4619      	mov	r1, r3
 8001eea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001eee:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ef2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f000 f996 	bl	8002228 <HAL_SYSTICK_Config>
 8001efc:	4603      	mov	r3, r0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d001      	beq.n	8001f06 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e00e      	b.n	8001f24 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2b0f      	cmp	r3, #15
 8001f0a:	d80a      	bhi.n	8001f22 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	6879      	ldr	r1, [r7, #4]
 8001f10:	f04f 30ff 	mov.w	r0, #4294967295
 8001f14:	f000 f944 	bl	80021a0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f18:	4a06      	ldr	r2, [pc, #24]	; (8001f34 <HAL_InitTick+0x5c>)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	e000      	b.n	8001f24 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	3708      	adds	r7, #8
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	20000000 	.word	0x20000000
 8001f30:	20000008 	.word	0x20000008
 8001f34:	20000004 	.word	0x20000004

08001f38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f3c:	4b06      	ldr	r3, [pc, #24]	; (8001f58 <HAL_IncTick+0x20>)
 8001f3e:	781b      	ldrb	r3, [r3, #0]
 8001f40:	461a      	mov	r2, r3
 8001f42:	4b06      	ldr	r3, [pc, #24]	; (8001f5c <HAL_IncTick+0x24>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4413      	add	r3, r2
 8001f48:	4a04      	ldr	r2, [pc, #16]	; (8001f5c <HAL_IncTick+0x24>)
 8001f4a:	6013      	str	r3, [r2, #0]
}
 8001f4c:	bf00      	nop
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr
 8001f56:	bf00      	nop
 8001f58:	20000008 	.word	0x20000008
 8001f5c:	2000043c 	.word	0x2000043c

08001f60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	af00      	add	r7, sp, #0
  return uwTick;
 8001f64:	4b03      	ldr	r3, [pc, #12]	; (8001f74 <HAL_GetTick+0x14>)
 8001f66:	681b      	ldr	r3, [r3, #0]
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr
 8001f72:	bf00      	nop
 8001f74:	2000043c 	.word	0x2000043c

08001f78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b084      	sub	sp, #16
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f80:	f7ff ffee 	bl	8001f60 <HAL_GetTick>
 8001f84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f90:	d005      	beq.n	8001f9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f92:	4b0a      	ldr	r3, [pc, #40]	; (8001fbc <HAL_Delay+0x44>)
 8001f94:	781b      	ldrb	r3, [r3, #0]
 8001f96:	461a      	mov	r2, r3
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	4413      	add	r3, r2
 8001f9c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f9e:	bf00      	nop
 8001fa0:	f7ff ffde 	bl	8001f60 <HAL_GetTick>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	68bb      	ldr	r3, [r7, #8]
 8001fa8:	1ad3      	subs	r3, r2, r3
 8001faa:	68fa      	ldr	r2, [r7, #12]
 8001fac:	429a      	cmp	r2, r3
 8001fae:	d8f7      	bhi.n	8001fa0 <HAL_Delay+0x28>
  {
  }
}
 8001fb0:	bf00      	nop
 8001fb2:	bf00      	nop
 8001fb4:	3710      	adds	r7, #16
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	20000008 	.word	0x20000008

08001fc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b085      	sub	sp, #20
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	f003 0307 	and.w	r3, r3, #7
 8001fce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fd0:	4b0b      	ldr	r3, [pc, #44]	; (8002000 <__NVIC_SetPriorityGrouping+0x40>)
 8001fd2:	68db      	ldr	r3, [r3, #12]
 8001fd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fd6:	68ba      	ldr	r2, [r7, #8]
 8001fd8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fdc:	4013      	ands	r3, r2
 8001fde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001fe8:	4b06      	ldr	r3, [pc, #24]	; (8002004 <__NVIC_SetPriorityGrouping+0x44>)
 8001fea:	4313      	orrs	r3, r2
 8001fec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fee:	4a04      	ldr	r2, [pc, #16]	; (8002000 <__NVIC_SetPriorityGrouping+0x40>)
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	60d3      	str	r3, [r2, #12]
}
 8001ff4:	bf00      	nop
 8001ff6:	3714      	adds	r7, #20
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr
 8002000:	e000ed00 	.word	0xe000ed00
 8002004:	05fa0000 	.word	0x05fa0000

08002008 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002008:	b480      	push	{r7}
 800200a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800200c:	4b04      	ldr	r3, [pc, #16]	; (8002020 <__NVIC_GetPriorityGrouping+0x18>)
 800200e:	68db      	ldr	r3, [r3, #12]
 8002010:	0a1b      	lsrs	r3, r3, #8
 8002012:	f003 0307 	and.w	r3, r3, #7
}
 8002016:	4618      	mov	r0, r3
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr
 8002020:	e000ed00 	.word	0xe000ed00

08002024 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002024:	b480      	push	{r7}
 8002026:	b083      	sub	sp, #12
 8002028:	af00      	add	r7, sp, #0
 800202a:	4603      	mov	r3, r0
 800202c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800202e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002032:	2b00      	cmp	r3, #0
 8002034:	db0b      	blt.n	800204e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002036:	79fb      	ldrb	r3, [r7, #7]
 8002038:	f003 021f 	and.w	r2, r3, #31
 800203c:	4907      	ldr	r1, [pc, #28]	; (800205c <__NVIC_EnableIRQ+0x38>)
 800203e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002042:	095b      	lsrs	r3, r3, #5
 8002044:	2001      	movs	r0, #1
 8002046:	fa00 f202 	lsl.w	r2, r0, r2
 800204a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800204e:	bf00      	nop
 8002050:	370c      	adds	r7, #12
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr
 800205a:	bf00      	nop
 800205c:	e000e100 	.word	0xe000e100

08002060 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002060:	b480      	push	{r7}
 8002062:	b083      	sub	sp, #12
 8002064:	af00      	add	r7, sp, #0
 8002066:	4603      	mov	r3, r0
 8002068:	6039      	str	r1, [r7, #0]
 800206a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800206c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002070:	2b00      	cmp	r3, #0
 8002072:	db0a      	blt.n	800208a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	b2da      	uxtb	r2, r3
 8002078:	490c      	ldr	r1, [pc, #48]	; (80020ac <__NVIC_SetPriority+0x4c>)
 800207a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800207e:	0112      	lsls	r2, r2, #4
 8002080:	b2d2      	uxtb	r2, r2
 8002082:	440b      	add	r3, r1
 8002084:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002088:	e00a      	b.n	80020a0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	b2da      	uxtb	r2, r3
 800208e:	4908      	ldr	r1, [pc, #32]	; (80020b0 <__NVIC_SetPriority+0x50>)
 8002090:	79fb      	ldrb	r3, [r7, #7]
 8002092:	f003 030f 	and.w	r3, r3, #15
 8002096:	3b04      	subs	r3, #4
 8002098:	0112      	lsls	r2, r2, #4
 800209a:	b2d2      	uxtb	r2, r2
 800209c:	440b      	add	r3, r1
 800209e:	761a      	strb	r2, [r3, #24]
}
 80020a0:	bf00      	nop
 80020a2:	370c      	adds	r7, #12
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr
 80020ac:	e000e100 	.word	0xe000e100
 80020b0:	e000ed00 	.word	0xe000ed00

080020b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b089      	sub	sp, #36	; 0x24
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	60f8      	str	r0, [r7, #12]
 80020bc:	60b9      	str	r1, [r7, #8]
 80020be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	f003 0307 	and.w	r3, r3, #7
 80020c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020c8:	69fb      	ldr	r3, [r7, #28]
 80020ca:	f1c3 0307 	rsb	r3, r3, #7
 80020ce:	2b04      	cmp	r3, #4
 80020d0:	bf28      	it	cs
 80020d2:	2304      	movcs	r3, #4
 80020d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020d6:	69fb      	ldr	r3, [r7, #28]
 80020d8:	3304      	adds	r3, #4
 80020da:	2b06      	cmp	r3, #6
 80020dc:	d902      	bls.n	80020e4 <NVIC_EncodePriority+0x30>
 80020de:	69fb      	ldr	r3, [r7, #28]
 80020e0:	3b03      	subs	r3, #3
 80020e2:	e000      	b.n	80020e6 <NVIC_EncodePriority+0x32>
 80020e4:	2300      	movs	r3, #0
 80020e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020e8:	f04f 32ff 	mov.w	r2, #4294967295
 80020ec:	69bb      	ldr	r3, [r7, #24]
 80020ee:	fa02 f303 	lsl.w	r3, r2, r3
 80020f2:	43da      	mvns	r2, r3
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	401a      	ands	r2, r3
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020fc:	f04f 31ff 	mov.w	r1, #4294967295
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	fa01 f303 	lsl.w	r3, r1, r3
 8002106:	43d9      	mvns	r1, r3
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800210c:	4313      	orrs	r3, r2
         );
}
 800210e:	4618      	mov	r0, r3
 8002110:	3724      	adds	r7, #36	; 0x24
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr
	...

0800211c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b082      	sub	sp, #8
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	3b01      	subs	r3, #1
 8002128:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800212c:	d301      	bcc.n	8002132 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800212e:	2301      	movs	r3, #1
 8002130:	e00f      	b.n	8002152 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002132:	4a0a      	ldr	r2, [pc, #40]	; (800215c <SysTick_Config+0x40>)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	3b01      	subs	r3, #1
 8002138:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800213a:	210f      	movs	r1, #15
 800213c:	f04f 30ff 	mov.w	r0, #4294967295
 8002140:	f7ff ff8e 	bl	8002060 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002144:	4b05      	ldr	r3, [pc, #20]	; (800215c <SysTick_Config+0x40>)
 8002146:	2200      	movs	r2, #0
 8002148:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800214a:	4b04      	ldr	r3, [pc, #16]	; (800215c <SysTick_Config+0x40>)
 800214c:	2207      	movs	r2, #7
 800214e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002150:	2300      	movs	r3, #0
}
 8002152:	4618      	mov	r0, r3
 8002154:	3708      	adds	r7, #8
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	e000e010 	.word	0xe000e010

08002160 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b082      	sub	sp, #8
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2b07      	cmp	r3, #7
 800216c:	d00f      	beq.n	800218e <HAL_NVIC_SetPriorityGrouping+0x2e>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2b06      	cmp	r3, #6
 8002172:	d00c      	beq.n	800218e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2b05      	cmp	r3, #5
 8002178:	d009      	beq.n	800218e <HAL_NVIC_SetPriorityGrouping+0x2e>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2b04      	cmp	r3, #4
 800217e:	d006      	beq.n	800218e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2b03      	cmp	r3, #3
 8002184:	d003      	beq.n	800218e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002186:	2191      	movs	r1, #145	; 0x91
 8002188:	4804      	ldr	r0, [pc, #16]	; (800219c <HAL_NVIC_SetPriorityGrouping+0x3c>)
 800218a:	f7ff fa16 	bl	80015ba <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	f7ff ff16 	bl	8001fc0 <__NVIC_SetPriorityGrouping>
}
 8002194:	bf00      	nop
 8002196:	3708      	adds	r7, #8
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}
 800219c:	0800d8c0 	.word	0x0800d8c0

080021a0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b086      	sub	sp, #24
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	4603      	mov	r3, r0
 80021a8:	60b9      	str	r1, [r7, #8]
 80021aa:	607a      	str	r2, [r7, #4]
 80021ac:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80021ae:	2300      	movs	r3, #0
 80021b0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2b0f      	cmp	r3, #15
 80021b6:	d903      	bls.n	80021c0 <HAL_NVIC_SetPriority+0x20>
 80021b8:	21a9      	movs	r1, #169	; 0xa9
 80021ba:	480e      	ldr	r0, [pc, #56]	; (80021f4 <HAL_NVIC_SetPriority+0x54>)
 80021bc:	f7ff f9fd 	bl	80015ba <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	2b0f      	cmp	r3, #15
 80021c4:	d903      	bls.n	80021ce <HAL_NVIC_SetPriority+0x2e>
 80021c6:	21aa      	movs	r1, #170	; 0xaa
 80021c8:	480a      	ldr	r0, [pc, #40]	; (80021f4 <HAL_NVIC_SetPriority+0x54>)
 80021ca:	f7ff f9f6 	bl	80015ba <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021ce:	f7ff ff1b 	bl	8002008 <__NVIC_GetPriorityGrouping>
 80021d2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021d4:	687a      	ldr	r2, [r7, #4]
 80021d6:	68b9      	ldr	r1, [r7, #8]
 80021d8:	6978      	ldr	r0, [r7, #20]
 80021da:	f7ff ff6b 	bl	80020b4 <NVIC_EncodePriority>
 80021de:	4602      	mov	r2, r0
 80021e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021e4:	4611      	mov	r1, r2
 80021e6:	4618      	mov	r0, r3
 80021e8:	f7ff ff3a 	bl	8002060 <__NVIC_SetPriority>
}
 80021ec:	bf00      	nop
 80021ee:	3718      	adds	r7, #24
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}
 80021f4:	0800d8c0 	.word	0x0800d8c0

080021f8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b082      	sub	sp, #8
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	4603      	mov	r3, r0
 8002200:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8002202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002206:	2b00      	cmp	r3, #0
 8002208:	da03      	bge.n	8002212 <HAL_NVIC_EnableIRQ+0x1a>
 800220a:	21bd      	movs	r1, #189	; 0xbd
 800220c:	4805      	ldr	r0, [pc, #20]	; (8002224 <HAL_NVIC_EnableIRQ+0x2c>)
 800220e:	f7ff f9d4 	bl	80015ba <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002212:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002216:	4618      	mov	r0, r3
 8002218:	f7ff ff04 	bl	8002024 <__NVIC_EnableIRQ>
}
 800221c:	bf00      	nop
 800221e:	3708      	adds	r7, #8
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}
 8002224:	0800d8c0 	.word	0x0800d8c0

08002228 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b082      	sub	sp, #8
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002230:	6878      	ldr	r0, [r7, #4]
 8002232:	f7ff ff73 	bl	800211c <SysTick_Config>
 8002236:	4603      	mov	r3, r0
}
 8002238:	4618      	mov	r0, r3
 800223a:	3708      	adds	r7, #8
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}

08002240 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b084      	sub	sp, #16
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800224c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800224e:	f7ff fe87 	bl	8001f60 <HAL_GetTick>
 8002252:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800225a:	b2db      	uxtb	r3, r3
 800225c:	2b02      	cmp	r3, #2
 800225e:	d008      	beq.n	8002272 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2280      	movs	r2, #128	; 0x80
 8002264:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2200      	movs	r2, #0
 800226a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800226e:	2301      	movs	r3, #1
 8002270:	e052      	b.n	8002318 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	681a      	ldr	r2, [r3, #0]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f022 0216 	bic.w	r2, r2, #22
 8002280:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	695a      	ldr	r2, [r3, #20]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002290:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002296:	2b00      	cmp	r3, #0
 8002298:	d103      	bne.n	80022a2 <HAL_DMA_Abort+0x62>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d007      	beq.n	80022b2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f022 0208 	bic.w	r2, r2, #8
 80022b0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f022 0201 	bic.w	r2, r2, #1
 80022c0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022c2:	e013      	b.n	80022ec <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80022c4:	f7ff fe4c 	bl	8001f60 <HAL_GetTick>
 80022c8:	4602      	mov	r2, r0
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	2b05      	cmp	r3, #5
 80022d0:	d90c      	bls.n	80022ec <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2220      	movs	r2, #32
 80022d6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2203      	movs	r2, #3
 80022dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2200      	movs	r2, #0
 80022e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80022e8:	2303      	movs	r3, #3
 80022ea:	e015      	b.n	8002318 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f003 0301 	and.w	r3, r3, #1
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d1e4      	bne.n	80022c4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022fe:	223f      	movs	r2, #63	; 0x3f
 8002300:	409a      	lsls	r2, r3
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2201      	movs	r2, #1
 800230a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2200      	movs	r2, #0
 8002312:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8002316:	2300      	movs	r3, #0
}
 8002318:	4618      	mov	r0, r3
 800231a:	3710      	adds	r7, #16
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}

08002320 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002320:	b480      	push	{r7}
 8002322:	b083      	sub	sp, #12
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800232e:	b2db      	uxtb	r3, r3
 8002330:	2b02      	cmp	r3, #2
 8002332:	d004      	beq.n	800233e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2280      	movs	r2, #128	; 0x80
 8002338:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	e00c      	b.n	8002358 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2205      	movs	r2, #5
 8002342:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f022 0201 	bic.w	r2, r2, #1
 8002354:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002356:	2300      	movs	r3, #0
}
 8002358:	4618      	mov	r0, r3
 800235a:	370c      	adds	r7, #12
 800235c:	46bd      	mov	sp, r7
 800235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002362:	4770      	bx	lr

08002364 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b088      	sub	sp, #32
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800236e:	2300      	movs	r3, #0
 8002370:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002372:	2300      	movs	r3, #0
 8002374:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002376:	2300      	movs	r3, #0
 8002378:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800237a:	2300      	movs	r3, #0
 800237c:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	4a3a      	ldr	r2, [pc, #232]	; (800246c <HAL_GPIO_Init+0x108>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d02b      	beq.n	80023de <HAL_GPIO_Init+0x7a>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	4a39      	ldr	r2, [pc, #228]	; (8002470 <HAL_GPIO_Init+0x10c>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d027      	beq.n	80023de <HAL_GPIO_Init+0x7a>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	4a38      	ldr	r2, [pc, #224]	; (8002474 <HAL_GPIO_Init+0x110>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d023      	beq.n	80023de <HAL_GPIO_Init+0x7a>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	4a37      	ldr	r2, [pc, #220]	; (8002478 <HAL_GPIO_Init+0x114>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d01f      	beq.n	80023de <HAL_GPIO_Init+0x7a>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	4a36      	ldr	r2, [pc, #216]	; (800247c <HAL_GPIO_Init+0x118>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d01b      	beq.n	80023de <HAL_GPIO_Init+0x7a>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4a35      	ldr	r2, [pc, #212]	; (8002480 <HAL_GPIO_Init+0x11c>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d017      	beq.n	80023de <HAL_GPIO_Init+0x7a>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	4a34      	ldr	r2, [pc, #208]	; (8002484 <HAL_GPIO_Init+0x120>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d013      	beq.n	80023de <HAL_GPIO_Init+0x7a>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4a33      	ldr	r2, [pc, #204]	; (8002488 <HAL_GPIO_Init+0x124>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d00f      	beq.n	80023de <HAL_GPIO_Init+0x7a>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	4a32      	ldr	r2, [pc, #200]	; (800248c <HAL_GPIO_Init+0x128>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d00b      	beq.n	80023de <HAL_GPIO_Init+0x7a>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4a31      	ldr	r2, [pc, #196]	; (8002490 <HAL_GPIO_Init+0x12c>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d007      	beq.n	80023de <HAL_GPIO_Init+0x7a>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4a30      	ldr	r2, [pc, #192]	; (8002494 <HAL_GPIO_Init+0x130>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d003      	beq.n	80023de <HAL_GPIO_Init+0x7a>
 80023d6:	21aa      	movs	r1, #170	; 0xaa
 80023d8:	482f      	ldr	r0, [pc, #188]	; (8002498 <HAL_GPIO_Init+0x134>)
 80023da:	f7ff f8ee 	bl	80015ba <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	b29b      	uxth	r3, r3
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d103      	bne.n	80023f0 <HAL_GPIO_Init+0x8c>
 80023e8:	21ab      	movs	r1, #171	; 0xab
 80023ea:	482b      	ldr	r0, [pc, #172]	; (8002498 <HAL_GPIO_Init+0x134>)
 80023ec:	f7ff f8e5 	bl	80015ba <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d035      	beq.n	8002464 <HAL_GPIO_Init+0x100>
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d031      	beq.n	8002464 <HAL_GPIO_Init+0x100>
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	2b11      	cmp	r3, #17
 8002406:	d02d      	beq.n	8002464 <HAL_GPIO_Init+0x100>
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	2b02      	cmp	r3, #2
 800240e:	d029      	beq.n	8002464 <HAL_GPIO_Init+0x100>
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	2b12      	cmp	r3, #18
 8002416:	d025      	beq.n	8002464 <HAL_GPIO_Init+0x100>
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8002420:	d020      	beq.n	8002464 <HAL_GPIO_Init+0x100>
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 800242a:	d01b      	beq.n	8002464 <HAL_GPIO_Init+0x100>
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 8002434:	d016      	beq.n	8002464 <HAL_GPIO_Init+0x100>
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 800243e:	d011      	beq.n	8002464 <HAL_GPIO_Init+0x100>
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 8002448:	d00c      	beq.n	8002464 <HAL_GPIO_Init+0x100>
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 8002452:	d007      	beq.n	8002464 <HAL_GPIO_Init+0x100>
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	2b03      	cmp	r3, #3
 800245a:	d003      	beq.n	8002464 <HAL_GPIO_Init+0x100>
 800245c:	21ac      	movs	r1, #172	; 0xac
 800245e:	480e      	ldr	r0, [pc, #56]	; (8002498 <HAL_GPIO_Init+0x134>)
 8002460:	f7ff f8ab 	bl	80015ba <assert_failed>

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002464:	2300      	movs	r3, #0
 8002466:	61fb      	str	r3, [r7, #28]
 8002468:	e2c7      	b.n	80029fa <HAL_GPIO_Init+0x696>
 800246a:	bf00      	nop
 800246c:	40020000 	.word	0x40020000
 8002470:	40020400 	.word	0x40020400
 8002474:	40020800 	.word	0x40020800
 8002478:	40020c00 	.word	0x40020c00
 800247c:	40021000 	.word	0x40021000
 8002480:	40021400 	.word	0x40021400
 8002484:	40021800 	.word	0x40021800
 8002488:	40021c00 	.word	0x40021c00
 800248c:	40022000 	.word	0x40022000
 8002490:	40022400 	.word	0x40022400
 8002494:	40022800 	.word	0x40022800
 8002498:	0800d8fc 	.word	0x0800d8fc
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800249c:	2201      	movs	r2, #1
 800249e:	69fb      	ldr	r3, [r7, #28]
 80024a0:	fa02 f303 	lsl.w	r3, r2, r3
 80024a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	697a      	ldr	r2, [r7, #20]
 80024ac:	4013      	ands	r3, r2
 80024ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80024b0:	693a      	ldr	r2, [r7, #16]
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	429a      	cmp	r2, r3
 80024b6:	f040 829d 	bne.w	80029f4 <HAL_GPIO_Init+0x690>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	f003 0303 	and.w	r3, r3, #3
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d005      	beq.n	80024d2 <HAL_GPIO_Init+0x16e>
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	f003 0303 	and.w	r3, r3, #3
 80024ce:	2b02      	cmp	r3, #2
 80024d0:	d144      	bne.n	800255c <HAL_GPIO_Init+0x1f8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	68db      	ldr	r3, [r3, #12]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d00f      	beq.n	80024fa <HAL_GPIO_Init+0x196>
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	68db      	ldr	r3, [r3, #12]
 80024de:	2b01      	cmp	r3, #1
 80024e0:	d00b      	beq.n	80024fa <HAL_GPIO_Init+0x196>
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	68db      	ldr	r3, [r3, #12]
 80024e6:	2b02      	cmp	r3, #2
 80024e8:	d007      	beq.n	80024fa <HAL_GPIO_Init+0x196>
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	68db      	ldr	r3, [r3, #12]
 80024ee:	2b03      	cmp	r3, #3
 80024f0:	d003      	beq.n	80024fa <HAL_GPIO_Init+0x196>
 80024f2:	21bd      	movs	r1, #189	; 0xbd
 80024f4:	4831      	ldr	r0, [pc, #196]	; (80025bc <HAL_GPIO_Init+0x258>)
 80024f6:	f7ff f860 	bl	80015ba <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002500:	69fb      	ldr	r3, [r7, #28]
 8002502:	005b      	lsls	r3, r3, #1
 8002504:	2203      	movs	r2, #3
 8002506:	fa02 f303 	lsl.w	r3, r2, r3
 800250a:	43db      	mvns	r3, r3
 800250c:	69ba      	ldr	r2, [r7, #24]
 800250e:	4013      	ands	r3, r2
 8002510:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	68da      	ldr	r2, [r3, #12]
 8002516:	69fb      	ldr	r3, [r7, #28]
 8002518:	005b      	lsls	r3, r3, #1
 800251a:	fa02 f303 	lsl.w	r3, r2, r3
 800251e:	69ba      	ldr	r2, [r7, #24]
 8002520:	4313      	orrs	r3, r2
 8002522:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	69ba      	ldr	r2, [r7, #24]
 8002528:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002530:	2201      	movs	r2, #1
 8002532:	69fb      	ldr	r3, [r7, #28]
 8002534:	fa02 f303 	lsl.w	r3, r2, r3
 8002538:	43db      	mvns	r3, r3
 800253a:	69ba      	ldr	r2, [r7, #24]
 800253c:	4013      	ands	r3, r2
 800253e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	091b      	lsrs	r3, r3, #4
 8002546:	f003 0201 	and.w	r2, r3, #1
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	fa02 f303 	lsl.w	r3, r2, r3
 8002550:	69ba      	ldr	r2, [r7, #24]
 8002552:	4313      	orrs	r3, r2
 8002554:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	69ba      	ldr	r2, [r7, #24]
 800255a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	f003 0303 	and.w	r3, r3, #3
 8002564:	2b03      	cmp	r3, #3
 8002566:	d02b      	beq.n	80025c0 <HAL_GPIO_Init+0x25c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d00b      	beq.n	8002588 <HAL_GPIO_Init+0x224>
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	2b01      	cmp	r3, #1
 8002576:	d007      	beq.n	8002588 <HAL_GPIO_Init+0x224>
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	2b02      	cmp	r3, #2
 800257e:	d003      	beq.n	8002588 <HAL_GPIO_Init+0x224>
 8002580:	21ce      	movs	r1, #206	; 0xce
 8002582:	480e      	ldr	r0, [pc, #56]	; (80025bc <HAL_GPIO_Init+0x258>)
 8002584:	f7ff f819 	bl	80015ba <assert_failed>

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800258e:	69fb      	ldr	r3, [r7, #28]
 8002590:	005b      	lsls	r3, r3, #1
 8002592:	2203      	movs	r2, #3
 8002594:	fa02 f303 	lsl.w	r3, r2, r3
 8002598:	43db      	mvns	r3, r3
 800259a:	69ba      	ldr	r2, [r7, #24]
 800259c:	4013      	ands	r3, r2
 800259e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	689a      	ldr	r2, [r3, #8]
 80025a4:	69fb      	ldr	r3, [r7, #28]
 80025a6:	005b      	lsls	r3, r3, #1
 80025a8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ac:	69ba      	ldr	r2, [r7, #24]
 80025ae:	4313      	orrs	r3, r2
 80025b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	69ba      	ldr	r2, [r7, #24]
 80025b6:	60da      	str	r2, [r3, #12]
 80025b8:	e002      	b.n	80025c0 <HAL_GPIO_Init+0x25c>
 80025ba:	bf00      	nop
 80025bc:	0800d8fc 	.word	0x0800d8fc
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f003 0303 	and.w	r3, r3, #3
 80025c8:	2b02      	cmp	r3, #2
 80025ca:	f040 8134 	bne.w	8002836 <HAL_GPIO_Init+0x4d2>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	691b      	ldr	r3, [r3, #16]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	f000 810b 	beq.w	80027ee <HAL_GPIO_Init+0x48a>
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	691b      	ldr	r3, [r3, #16]
 80025dc:	2b01      	cmp	r3, #1
 80025de:	f000 8106 	beq.w	80027ee <HAL_GPIO_Init+0x48a>
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	691b      	ldr	r3, [r3, #16]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	f000 8101 	beq.w	80027ee <HAL_GPIO_Init+0x48a>
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	691b      	ldr	r3, [r3, #16]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	f000 80fc 	beq.w	80027ee <HAL_GPIO_Init+0x48a>
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	691b      	ldr	r3, [r3, #16]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	f000 80f7 	beq.w	80027ee <HAL_GPIO_Init+0x48a>
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	691b      	ldr	r3, [r3, #16]
 8002604:	2b01      	cmp	r3, #1
 8002606:	f000 80f2 	beq.w	80027ee <HAL_GPIO_Init+0x48a>
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	691b      	ldr	r3, [r3, #16]
 800260e:	2b02      	cmp	r3, #2
 8002610:	f000 80ed 	beq.w	80027ee <HAL_GPIO_Init+0x48a>
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	691b      	ldr	r3, [r3, #16]
 8002618:	2b02      	cmp	r3, #2
 800261a:	f000 80e8 	beq.w	80027ee <HAL_GPIO_Init+0x48a>
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	691b      	ldr	r3, [r3, #16]
 8002622:	2b02      	cmp	r3, #2
 8002624:	f000 80e3 	beq.w	80027ee <HAL_GPIO_Init+0x48a>
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	691b      	ldr	r3, [r3, #16]
 800262c:	2b03      	cmp	r3, #3
 800262e:	f000 80de 	beq.w	80027ee <HAL_GPIO_Init+0x48a>
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	691b      	ldr	r3, [r3, #16]
 8002636:	2b03      	cmp	r3, #3
 8002638:	f000 80d9 	beq.w	80027ee <HAL_GPIO_Init+0x48a>
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	691b      	ldr	r3, [r3, #16]
 8002640:	2b03      	cmp	r3, #3
 8002642:	f000 80d4 	beq.w	80027ee <HAL_GPIO_Init+0x48a>
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	691b      	ldr	r3, [r3, #16]
 800264a:	2b03      	cmp	r3, #3
 800264c:	f000 80cf 	beq.w	80027ee <HAL_GPIO_Init+0x48a>
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	691b      	ldr	r3, [r3, #16]
 8002654:	2b03      	cmp	r3, #3
 8002656:	f000 80ca 	beq.w	80027ee <HAL_GPIO_Init+0x48a>
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	691b      	ldr	r3, [r3, #16]
 800265e:	2b03      	cmp	r3, #3
 8002660:	f000 80c5 	beq.w	80027ee <HAL_GPIO_Init+0x48a>
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	691b      	ldr	r3, [r3, #16]
 8002668:	2b04      	cmp	r3, #4
 800266a:	f000 80c0 	beq.w	80027ee <HAL_GPIO_Init+0x48a>
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	691b      	ldr	r3, [r3, #16]
 8002672:	2b04      	cmp	r3, #4
 8002674:	f000 80bb 	beq.w	80027ee <HAL_GPIO_Init+0x48a>
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	691b      	ldr	r3, [r3, #16]
 800267c:	2b04      	cmp	r3, #4
 800267e:	f000 80b6 	beq.w	80027ee <HAL_GPIO_Init+0x48a>
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	691b      	ldr	r3, [r3, #16]
 8002686:	2b04      	cmp	r3, #4
 8002688:	f000 80b1 	beq.w	80027ee <HAL_GPIO_Init+0x48a>
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	691b      	ldr	r3, [r3, #16]
 8002690:	2b04      	cmp	r3, #4
 8002692:	f000 80ac 	beq.w	80027ee <HAL_GPIO_Init+0x48a>
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	691b      	ldr	r3, [r3, #16]
 800269a:	2b05      	cmp	r3, #5
 800269c:	f000 80a7 	beq.w	80027ee <HAL_GPIO_Init+0x48a>
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	691b      	ldr	r3, [r3, #16]
 80026a4:	2b05      	cmp	r3, #5
 80026a6:	f000 80a2 	beq.w	80027ee <HAL_GPIO_Init+0x48a>
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	691b      	ldr	r3, [r3, #16]
 80026ae:	2b05      	cmp	r3, #5
 80026b0:	f000 809d 	beq.w	80027ee <HAL_GPIO_Init+0x48a>
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	691b      	ldr	r3, [r3, #16]
 80026b8:	2b05      	cmp	r3, #5
 80026ba:	f000 8098 	beq.w	80027ee <HAL_GPIO_Init+0x48a>
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	691b      	ldr	r3, [r3, #16]
 80026c2:	2b05      	cmp	r3, #5
 80026c4:	f000 8093 	beq.w	80027ee <HAL_GPIO_Init+0x48a>
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	691b      	ldr	r3, [r3, #16]
 80026cc:	2b05      	cmp	r3, #5
 80026ce:	f000 808e 	beq.w	80027ee <HAL_GPIO_Init+0x48a>
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	691b      	ldr	r3, [r3, #16]
 80026d6:	2b06      	cmp	r3, #6
 80026d8:	f000 8089 	beq.w	80027ee <HAL_GPIO_Init+0x48a>
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	691b      	ldr	r3, [r3, #16]
 80026e0:	2b06      	cmp	r3, #6
 80026e2:	f000 8084 	beq.w	80027ee <HAL_GPIO_Init+0x48a>
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	691b      	ldr	r3, [r3, #16]
 80026ea:	2b07      	cmp	r3, #7
 80026ec:	d07f      	beq.n	80027ee <HAL_GPIO_Init+0x48a>
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	691b      	ldr	r3, [r3, #16]
 80026f2:	2b07      	cmp	r3, #7
 80026f4:	d07b      	beq.n	80027ee <HAL_GPIO_Init+0x48a>
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	691b      	ldr	r3, [r3, #16]
 80026fa:	2b07      	cmp	r3, #7
 80026fc:	d077      	beq.n	80027ee <HAL_GPIO_Init+0x48a>
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	691b      	ldr	r3, [r3, #16]
 8002702:	2b07      	cmp	r3, #7
 8002704:	d073      	beq.n	80027ee <HAL_GPIO_Init+0x48a>
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	691b      	ldr	r3, [r3, #16]
 800270a:	2b07      	cmp	r3, #7
 800270c:	d06f      	beq.n	80027ee <HAL_GPIO_Init+0x48a>
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	691b      	ldr	r3, [r3, #16]
 8002712:	2b07      	cmp	r3, #7
 8002714:	d06b      	beq.n	80027ee <HAL_GPIO_Init+0x48a>
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	691b      	ldr	r3, [r3, #16]
 800271a:	2b07      	cmp	r3, #7
 800271c:	d067      	beq.n	80027ee <HAL_GPIO_Init+0x48a>
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	691b      	ldr	r3, [r3, #16]
 8002722:	2b08      	cmp	r3, #8
 8002724:	d063      	beq.n	80027ee <HAL_GPIO_Init+0x48a>
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	691b      	ldr	r3, [r3, #16]
 800272a:	2b08      	cmp	r3, #8
 800272c:	d05f      	beq.n	80027ee <HAL_GPIO_Init+0x48a>
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	691b      	ldr	r3, [r3, #16]
 8002732:	2b08      	cmp	r3, #8
 8002734:	d05b      	beq.n	80027ee <HAL_GPIO_Init+0x48a>
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	691b      	ldr	r3, [r3, #16]
 800273a:	2b08      	cmp	r3, #8
 800273c:	d057      	beq.n	80027ee <HAL_GPIO_Init+0x48a>
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	691b      	ldr	r3, [r3, #16]
 8002742:	2b08      	cmp	r3, #8
 8002744:	d053      	beq.n	80027ee <HAL_GPIO_Init+0x48a>
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	691b      	ldr	r3, [r3, #16]
 800274a:	2b08      	cmp	r3, #8
 800274c:	d04f      	beq.n	80027ee <HAL_GPIO_Init+0x48a>
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	691b      	ldr	r3, [r3, #16]
 8002752:	2b08      	cmp	r3, #8
 8002754:	d04b      	beq.n	80027ee <HAL_GPIO_Init+0x48a>
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	691b      	ldr	r3, [r3, #16]
 800275a:	2b09      	cmp	r3, #9
 800275c:	d047      	beq.n	80027ee <HAL_GPIO_Init+0x48a>
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	691b      	ldr	r3, [r3, #16]
 8002762:	2b09      	cmp	r3, #9
 8002764:	d043      	beq.n	80027ee <HAL_GPIO_Init+0x48a>
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	691b      	ldr	r3, [r3, #16]
 800276a:	2b09      	cmp	r3, #9
 800276c:	d03f      	beq.n	80027ee <HAL_GPIO_Init+0x48a>
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	691b      	ldr	r3, [r3, #16]
 8002772:	2b09      	cmp	r3, #9
 8002774:	d03b      	beq.n	80027ee <HAL_GPIO_Init+0x48a>
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	691b      	ldr	r3, [r3, #16]
 800277a:	2b09      	cmp	r3, #9
 800277c:	d037      	beq.n	80027ee <HAL_GPIO_Init+0x48a>
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	691b      	ldr	r3, [r3, #16]
 8002782:	2b09      	cmp	r3, #9
 8002784:	d033      	beq.n	80027ee <HAL_GPIO_Init+0x48a>
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	691b      	ldr	r3, [r3, #16]
 800278a:	2b09      	cmp	r3, #9
 800278c:	d02f      	beq.n	80027ee <HAL_GPIO_Init+0x48a>
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	691b      	ldr	r3, [r3, #16]
 8002792:	2b0a      	cmp	r3, #10
 8002794:	d02b      	beq.n	80027ee <HAL_GPIO_Init+0x48a>
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	691b      	ldr	r3, [r3, #16]
 800279a:	2b0a      	cmp	r3, #10
 800279c:	d027      	beq.n	80027ee <HAL_GPIO_Init+0x48a>
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	691b      	ldr	r3, [r3, #16]
 80027a2:	2b0a      	cmp	r3, #10
 80027a4:	d023      	beq.n	80027ee <HAL_GPIO_Init+0x48a>
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	691b      	ldr	r3, [r3, #16]
 80027aa:	2b0a      	cmp	r3, #10
 80027ac:	d01f      	beq.n	80027ee <HAL_GPIO_Init+0x48a>
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	691b      	ldr	r3, [r3, #16]
 80027b2:	2b0b      	cmp	r3, #11
 80027b4:	d01b      	beq.n	80027ee <HAL_GPIO_Init+0x48a>
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	691b      	ldr	r3, [r3, #16]
 80027ba:	2b0c      	cmp	r3, #12
 80027bc:	d017      	beq.n	80027ee <HAL_GPIO_Init+0x48a>
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	691b      	ldr	r3, [r3, #16]
 80027c2:	2b0c      	cmp	r3, #12
 80027c4:	d013      	beq.n	80027ee <HAL_GPIO_Init+0x48a>
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	691b      	ldr	r3, [r3, #16]
 80027ca:	2b0c      	cmp	r3, #12
 80027cc:	d00f      	beq.n	80027ee <HAL_GPIO_Init+0x48a>
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	691b      	ldr	r3, [r3, #16]
 80027d2:	2b0f      	cmp	r3, #15
 80027d4:	d00b      	beq.n	80027ee <HAL_GPIO_Init+0x48a>
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	691b      	ldr	r3, [r3, #16]
 80027da:	2b0d      	cmp	r3, #13
 80027dc:	d007      	beq.n	80027ee <HAL_GPIO_Init+0x48a>
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	691b      	ldr	r3, [r3, #16]
 80027e2:	2b0e      	cmp	r3, #14
 80027e4:	d003      	beq.n	80027ee <HAL_GPIO_Init+0x48a>
 80027e6:	21db      	movs	r1, #219	; 0xdb
 80027e8:	4888      	ldr	r0, [pc, #544]	; (8002a0c <HAL_GPIO_Init+0x6a8>)
 80027ea:	f7fe fee6 	bl	80015ba <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80027ee:	69fb      	ldr	r3, [r7, #28]
 80027f0:	08da      	lsrs	r2, r3, #3
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	3208      	adds	r2, #8
 80027f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80027fc:	69fb      	ldr	r3, [r7, #28]
 80027fe:	f003 0307 	and.w	r3, r3, #7
 8002802:	009b      	lsls	r3, r3, #2
 8002804:	220f      	movs	r2, #15
 8002806:	fa02 f303 	lsl.w	r3, r2, r3
 800280a:	43db      	mvns	r3, r3
 800280c:	69ba      	ldr	r2, [r7, #24]
 800280e:	4013      	ands	r3, r2
 8002810:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	691a      	ldr	r2, [r3, #16]
 8002816:	69fb      	ldr	r3, [r7, #28]
 8002818:	f003 0307 	and.w	r3, r3, #7
 800281c:	009b      	lsls	r3, r3, #2
 800281e:	fa02 f303 	lsl.w	r3, r2, r3
 8002822:	69ba      	ldr	r2, [r7, #24]
 8002824:	4313      	orrs	r3, r2
 8002826:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002828:	69fb      	ldr	r3, [r7, #28]
 800282a:	08da      	lsrs	r2, r3, #3
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	3208      	adds	r2, #8
 8002830:	69b9      	ldr	r1, [r7, #24]
 8002832:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800283c:	69fb      	ldr	r3, [r7, #28]
 800283e:	005b      	lsls	r3, r3, #1
 8002840:	2203      	movs	r2, #3
 8002842:	fa02 f303 	lsl.w	r3, r2, r3
 8002846:	43db      	mvns	r3, r3
 8002848:	69ba      	ldr	r2, [r7, #24]
 800284a:	4013      	ands	r3, r2
 800284c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	f003 0203 	and.w	r2, r3, #3
 8002856:	69fb      	ldr	r3, [r7, #28]
 8002858:	005b      	lsls	r3, r3, #1
 800285a:	fa02 f303 	lsl.w	r3, r2, r3
 800285e:	69ba      	ldr	r2, [r7, #24]
 8002860:	4313      	orrs	r3, r2
 8002862:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	69ba      	ldr	r2, [r7, #24]
 8002868:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002872:	2b00      	cmp	r3, #0
 8002874:	f000 80be 	beq.w	80029f4 <HAL_GPIO_Init+0x690>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002878:	4b65      	ldr	r3, [pc, #404]	; (8002a10 <HAL_GPIO_Init+0x6ac>)
 800287a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800287c:	4a64      	ldr	r2, [pc, #400]	; (8002a10 <HAL_GPIO_Init+0x6ac>)
 800287e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002882:	6453      	str	r3, [r2, #68]	; 0x44
 8002884:	4b62      	ldr	r3, [pc, #392]	; (8002a10 <HAL_GPIO_Init+0x6ac>)
 8002886:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002888:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800288c:	60fb      	str	r3, [r7, #12]
 800288e:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002890:	4a60      	ldr	r2, [pc, #384]	; (8002a14 <HAL_GPIO_Init+0x6b0>)
 8002892:	69fb      	ldr	r3, [r7, #28]
 8002894:	089b      	lsrs	r3, r3, #2
 8002896:	3302      	adds	r3, #2
 8002898:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800289c:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800289e:	69fb      	ldr	r3, [r7, #28]
 80028a0:	f003 0303 	and.w	r3, r3, #3
 80028a4:	009b      	lsls	r3, r3, #2
 80028a6:	220f      	movs	r2, #15
 80028a8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ac:	43db      	mvns	r3, r3
 80028ae:	69ba      	ldr	r2, [r7, #24]
 80028b0:	4013      	ands	r3, r2
 80028b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	4a58      	ldr	r2, [pc, #352]	; (8002a18 <HAL_GPIO_Init+0x6b4>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d037      	beq.n	800292c <HAL_GPIO_Init+0x5c8>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	4a57      	ldr	r2, [pc, #348]	; (8002a1c <HAL_GPIO_Init+0x6b8>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d031      	beq.n	8002928 <HAL_GPIO_Init+0x5c4>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	4a56      	ldr	r2, [pc, #344]	; (8002a20 <HAL_GPIO_Init+0x6bc>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d02b      	beq.n	8002924 <HAL_GPIO_Init+0x5c0>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	4a55      	ldr	r2, [pc, #340]	; (8002a24 <HAL_GPIO_Init+0x6c0>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d025      	beq.n	8002920 <HAL_GPIO_Init+0x5bc>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	4a54      	ldr	r2, [pc, #336]	; (8002a28 <HAL_GPIO_Init+0x6c4>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d01f      	beq.n	800291c <HAL_GPIO_Init+0x5b8>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	4a53      	ldr	r2, [pc, #332]	; (8002a2c <HAL_GPIO_Init+0x6c8>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d019      	beq.n	8002918 <HAL_GPIO_Init+0x5b4>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	4a52      	ldr	r2, [pc, #328]	; (8002a30 <HAL_GPIO_Init+0x6cc>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d013      	beq.n	8002914 <HAL_GPIO_Init+0x5b0>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	4a51      	ldr	r2, [pc, #324]	; (8002a34 <HAL_GPIO_Init+0x6d0>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d00d      	beq.n	8002910 <HAL_GPIO_Init+0x5ac>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	4a50      	ldr	r2, [pc, #320]	; (8002a38 <HAL_GPIO_Init+0x6d4>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d007      	beq.n	800290c <HAL_GPIO_Init+0x5a8>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	4a4f      	ldr	r2, [pc, #316]	; (8002a3c <HAL_GPIO_Init+0x6d8>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d101      	bne.n	8002908 <HAL_GPIO_Init+0x5a4>
 8002904:	2309      	movs	r3, #9
 8002906:	e012      	b.n	800292e <HAL_GPIO_Init+0x5ca>
 8002908:	230a      	movs	r3, #10
 800290a:	e010      	b.n	800292e <HAL_GPIO_Init+0x5ca>
 800290c:	2308      	movs	r3, #8
 800290e:	e00e      	b.n	800292e <HAL_GPIO_Init+0x5ca>
 8002910:	2307      	movs	r3, #7
 8002912:	e00c      	b.n	800292e <HAL_GPIO_Init+0x5ca>
 8002914:	2306      	movs	r3, #6
 8002916:	e00a      	b.n	800292e <HAL_GPIO_Init+0x5ca>
 8002918:	2305      	movs	r3, #5
 800291a:	e008      	b.n	800292e <HAL_GPIO_Init+0x5ca>
 800291c:	2304      	movs	r3, #4
 800291e:	e006      	b.n	800292e <HAL_GPIO_Init+0x5ca>
 8002920:	2303      	movs	r3, #3
 8002922:	e004      	b.n	800292e <HAL_GPIO_Init+0x5ca>
 8002924:	2302      	movs	r3, #2
 8002926:	e002      	b.n	800292e <HAL_GPIO_Init+0x5ca>
 8002928:	2301      	movs	r3, #1
 800292a:	e000      	b.n	800292e <HAL_GPIO_Init+0x5ca>
 800292c:	2300      	movs	r3, #0
 800292e:	69fa      	ldr	r2, [r7, #28]
 8002930:	f002 0203 	and.w	r2, r2, #3
 8002934:	0092      	lsls	r2, r2, #2
 8002936:	4093      	lsls	r3, r2
 8002938:	69ba      	ldr	r2, [r7, #24]
 800293a:	4313      	orrs	r3, r2
 800293c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800293e:	4935      	ldr	r1, [pc, #212]	; (8002a14 <HAL_GPIO_Init+0x6b0>)
 8002940:	69fb      	ldr	r3, [r7, #28]
 8002942:	089b      	lsrs	r3, r3, #2
 8002944:	3302      	adds	r3, #2
 8002946:	69ba      	ldr	r2, [r7, #24]
 8002948:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800294c:	4b3c      	ldr	r3, [pc, #240]	; (8002a40 <HAL_GPIO_Init+0x6dc>)
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	43db      	mvns	r3, r3
 8002956:	69ba      	ldr	r2, [r7, #24]
 8002958:	4013      	ands	r3, r2
 800295a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002964:	2b00      	cmp	r3, #0
 8002966:	d003      	beq.n	8002970 <HAL_GPIO_Init+0x60c>
        {
          temp |= iocurrent;
 8002968:	69ba      	ldr	r2, [r7, #24]
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	4313      	orrs	r3, r2
 800296e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002970:	4a33      	ldr	r2, [pc, #204]	; (8002a40 <HAL_GPIO_Init+0x6dc>)
 8002972:	69bb      	ldr	r3, [r7, #24]
 8002974:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002976:	4b32      	ldr	r3, [pc, #200]	; (8002a40 <HAL_GPIO_Init+0x6dc>)
 8002978:	68db      	ldr	r3, [r3, #12]
 800297a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	43db      	mvns	r3, r3
 8002980:	69ba      	ldr	r2, [r7, #24]
 8002982:	4013      	ands	r3, r2
 8002984:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800298e:	2b00      	cmp	r3, #0
 8002990:	d003      	beq.n	800299a <HAL_GPIO_Init+0x636>
        {
          temp |= iocurrent;
 8002992:	69ba      	ldr	r2, [r7, #24]
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	4313      	orrs	r3, r2
 8002998:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800299a:	4a29      	ldr	r2, [pc, #164]	; (8002a40 <HAL_GPIO_Init+0x6dc>)
 800299c:	69bb      	ldr	r3, [r7, #24]
 800299e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80029a0:	4b27      	ldr	r3, [pc, #156]	; (8002a40 <HAL_GPIO_Init+0x6dc>)
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	43db      	mvns	r3, r3
 80029aa:	69ba      	ldr	r2, [r7, #24]
 80029ac:	4013      	ands	r3, r2
 80029ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d003      	beq.n	80029c4 <HAL_GPIO_Init+0x660>
        {
          temp |= iocurrent;
 80029bc:	69ba      	ldr	r2, [r7, #24]
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	4313      	orrs	r3, r2
 80029c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80029c4:	4a1e      	ldr	r2, [pc, #120]	; (8002a40 <HAL_GPIO_Init+0x6dc>)
 80029c6:	69bb      	ldr	r3, [r7, #24]
 80029c8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80029ca:	4b1d      	ldr	r3, [pc, #116]	; (8002a40 <HAL_GPIO_Init+0x6dc>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	43db      	mvns	r3, r3
 80029d4:	69ba      	ldr	r2, [r7, #24]
 80029d6:	4013      	ands	r3, r2
 80029d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d003      	beq.n	80029ee <HAL_GPIO_Init+0x68a>
        {
          temp |= iocurrent;
 80029e6:	69ba      	ldr	r2, [r7, #24]
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	4313      	orrs	r3, r2
 80029ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80029ee:	4a14      	ldr	r2, [pc, #80]	; (8002a40 <HAL_GPIO_Init+0x6dc>)
 80029f0:	69bb      	ldr	r3, [r7, #24]
 80029f2:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80029f4:	69fb      	ldr	r3, [r7, #28]
 80029f6:	3301      	adds	r3, #1
 80029f8:	61fb      	str	r3, [r7, #28]
 80029fa:	69fb      	ldr	r3, [r7, #28]
 80029fc:	2b0f      	cmp	r3, #15
 80029fe:	f67f ad4d 	bls.w	800249c <HAL_GPIO_Init+0x138>
      }
    }
  }
}
 8002a02:	bf00      	nop
 8002a04:	bf00      	nop
 8002a06:	3720      	adds	r7, #32
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}
 8002a0c:	0800d8fc 	.word	0x0800d8fc
 8002a10:	40023800 	.word	0x40023800
 8002a14:	40013800 	.word	0x40013800
 8002a18:	40020000 	.word	0x40020000
 8002a1c:	40020400 	.word	0x40020400
 8002a20:	40020800 	.word	0x40020800
 8002a24:	40020c00 	.word	0x40020c00
 8002a28:	40021000 	.word	0x40021000
 8002a2c:	40021400 	.word	0x40021400
 8002a30:	40021800 	.word	0x40021800
 8002a34:	40021c00 	.word	0x40021c00
 8002a38:	40022000 	.word	0x40022000
 8002a3c:	40022400 	.word	0x40022400
 8002a40:	40013c00 	.word	0x40013c00

08002a44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b082      	sub	sp, #8
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
 8002a4c:	460b      	mov	r3, r1
 8002a4e:	807b      	strh	r3, [r7, #2]
 8002a50:	4613      	mov	r3, r2
 8002a52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8002a54:	887b      	ldrh	r3, [r7, #2]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d104      	bne.n	8002a64 <HAL_GPIO_WritePin+0x20>
 8002a5a:	f240 1197 	movw	r1, #407	; 0x197
 8002a5e:	480e      	ldr	r0, [pc, #56]	; (8002a98 <HAL_GPIO_WritePin+0x54>)
 8002a60:	f7fe fdab 	bl	80015ba <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8002a64:	787b      	ldrb	r3, [r7, #1]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d007      	beq.n	8002a7a <HAL_GPIO_WritePin+0x36>
 8002a6a:	787b      	ldrb	r3, [r7, #1]
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	d004      	beq.n	8002a7a <HAL_GPIO_WritePin+0x36>
 8002a70:	f44f 71cc 	mov.w	r1, #408	; 0x198
 8002a74:	4808      	ldr	r0, [pc, #32]	; (8002a98 <HAL_GPIO_WritePin+0x54>)
 8002a76:	f7fe fda0 	bl	80015ba <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8002a7a:	787b      	ldrb	r3, [r7, #1]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d003      	beq.n	8002a88 <HAL_GPIO_WritePin+0x44>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a80:	887a      	ldrh	r2, [r7, #2]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002a86:	e003      	b.n	8002a90 <HAL_GPIO_WritePin+0x4c>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002a88:	887b      	ldrh	r3, [r7, #2]
 8002a8a:	041a      	lsls	r2, r3, #16
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	619a      	str	r2, [r3, #24]
}
 8002a90:	bf00      	nop
 8002a92:	3708      	adds	r7, #8
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}
 8002a98:	0800d8fc 	.word	0x0800d8fc

08002a9c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b082      	sub	sp, #8
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d101      	bne.n	8002aae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e107      	b.n	8002cbe <HAL_I2C_Init+0x222>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a85      	ldr	r2, [pc, #532]	; (8002cc8 <HAL_I2C_Init+0x22c>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d013      	beq.n	8002ae0 <HAL_I2C_Init+0x44>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a83      	ldr	r2, [pc, #524]	; (8002ccc <HAL_I2C_Init+0x230>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d00e      	beq.n	8002ae0 <HAL_I2C_Init+0x44>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a82      	ldr	r2, [pc, #520]	; (8002cd0 <HAL_I2C_Init+0x234>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d009      	beq.n	8002ae0 <HAL_I2C_Init+0x44>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a80      	ldr	r2, [pc, #512]	; (8002cd4 <HAL_I2C_Init+0x238>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d004      	beq.n	8002ae0 <HAL_I2C_Init+0x44>
 8002ad6:	f240 2119 	movw	r1, #537	; 0x219
 8002ada:	487f      	ldr	r0, [pc, #508]	; (8002cd8 <HAL_I2C_Init+0x23c>)
 8002adc:	f7fe fd6d 	bl	80015ba <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ae8:	d304      	bcc.n	8002af4 <HAL_I2C_Init+0x58>
 8002aea:	f240 211a 	movw	r1, #538	; 0x21a
 8002aee:	487a      	ldr	r0, [pc, #488]	; (8002cd8 <HAL_I2C_Init+0x23c>)
 8002af0:	f7fe fd63 	bl	80015ba <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	68db      	ldr	r3, [r3, #12]
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	d008      	beq.n	8002b0e <HAL_I2C_Init+0x72>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	68db      	ldr	r3, [r3, #12]
 8002b00:	2b02      	cmp	r3, #2
 8002b02:	d004      	beq.n	8002b0e <HAL_I2C_Init+0x72>
 8002b04:	f240 211b 	movw	r1, #539	; 0x21b
 8002b08:	4873      	ldr	r0, [pc, #460]	; (8002cd8 <HAL_I2C_Init+0x23c>)
 8002b0a:	f7fe fd56 	bl	80015ba <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	691b      	ldr	r3, [r3, #16]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d009      	beq.n	8002b2a <HAL_I2C_Init+0x8e>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	691b      	ldr	r3, [r3, #16]
 8002b1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b1e:	d004      	beq.n	8002b2a <HAL_I2C_Init+0x8e>
 8002b20:	f44f 7107 	mov.w	r1, #540	; 0x21c
 8002b24:	486c      	ldr	r0, [pc, #432]	; (8002cd8 <HAL_I2C_Init+0x23c>)
 8002b26:	f7fe fd48 	bl	80015ba <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	695b      	ldr	r3, [r3, #20]
 8002b2e:	2bff      	cmp	r3, #255	; 0xff
 8002b30:	d904      	bls.n	8002b3c <HAL_I2C_Init+0xa0>
 8002b32:	f240 211d 	movw	r1, #541	; 0x21d
 8002b36:	4868      	ldr	r0, [pc, #416]	; (8002cd8 <HAL_I2C_Init+0x23c>)
 8002b38:	f7fe fd3f 	bl	80015ba <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	699b      	ldr	r3, [r3, #24]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d020      	beq.n	8002b86 <HAL_I2C_Init+0xea>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	699b      	ldr	r3, [r3, #24]
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	d01c      	beq.n	8002b86 <HAL_I2C_Init+0xea>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	699b      	ldr	r3, [r3, #24]
 8002b50:	2b02      	cmp	r3, #2
 8002b52:	d018      	beq.n	8002b86 <HAL_I2C_Init+0xea>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	699b      	ldr	r3, [r3, #24]
 8002b58:	2b03      	cmp	r3, #3
 8002b5a:	d014      	beq.n	8002b86 <HAL_I2C_Init+0xea>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	699b      	ldr	r3, [r3, #24]
 8002b60:	2b04      	cmp	r3, #4
 8002b62:	d010      	beq.n	8002b86 <HAL_I2C_Init+0xea>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	699b      	ldr	r3, [r3, #24]
 8002b68:	2b05      	cmp	r3, #5
 8002b6a:	d00c      	beq.n	8002b86 <HAL_I2C_Init+0xea>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	699b      	ldr	r3, [r3, #24]
 8002b70:	2b06      	cmp	r3, #6
 8002b72:	d008      	beq.n	8002b86 <HAL_I2C_Init+0xea>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	699b      	ldr	r3, [r3, #24]
 8002b78:	2b07      	cmp	r3, #7
 8002b7a:	d004      	beq.n	8002b86 <HAL_I2C_Init+0xea>
 8002b7c:	f240 211e 	movw	r1, #542	; 0x21e
 8002b80:	4855      	ldr	r0, [pc, #340]	; (8002cd8 <HAL_I2C_Init+0x23c>)
 8002b82:	f7fe fd1a 	bl	80015ba <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	69db      	ldr	r3, [r3, #28]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d009      	beq.n	8002ba2 <HAL_I2C_Init+0x106>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	69db      	ldr	r3, [r3, #28]
 8002b92:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002b96:	d004      	beq.n	8002ba2 <HAL_I2C_Init+0x106>
 8002b98:	f240 211f 	movw	r1, #543	; 0x21f
 8002b9c:	484e      	ldr	r0, [pc, #312]	; (8002cd8 <HAL_I2C_Init+0x23c>)
 8002b9e:	f7fe fd0c 	bl	80015ba <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6a1b      	ldr	r3, [r3, #32]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d009      	beq.n	8002bbe <HAL_I2C_Init+0x122>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6a1b      	ldr	r3, [r3, #32]
 8002bae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002bb2:	d004      	beq.n	8002bbe <HAL_I2C_Init+0x122>
 8002bb4:	f44f 7108 	mov.w	r1, #544	; 0x220
 8002bb8:	4847      	ldr	r0, [pc, #284]	; (8002cd8 <HAL_I2C_Init+0x23c>)
 8002bba:	f7fe fcfe 	bl	80015ba <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d106      	bne.n	8002bd8 <HAL_I2C_Init+0x13c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	f7fe fb3c 	bl	8001250 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2224      	movs	r2, #36	; 0x24
 8002bdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	681a      	ldr	r2, [r3, #0]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f022 0201 	bic.w	r2, r2, #1
 8002bee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	685a      	ldr	r2, [r3, #4]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002bfc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	689a      	ldr	r2, [r3, #8]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c0c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	68db      	ldr	r3, [r3, #12]
 8002c12:	2b01      	cmp	r3, #1
 8002c14:	d107      	bne.n	8002c26 <HAL_I2C_Init+0x18a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	689a      	ldr	r2, [r3, #8]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c22:	609a      	str	r2, [r3, #8]
 8002c24:	e006      	b.n	8002c34 <HAL_I2C_Init+0x198>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	689a      	ldr	r2, [r3, #8]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002c32:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	68db      	ldr	r3, [r3, #12]
 8002c38:	2b02      	cmp	r3, #2
 8002c3a:	d104      	bne.n	8002c46 <HAL_I2C_Init+0x1aa>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002c44:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	6859      	ldr	r1, [r3, #4]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681a      	ldr	r2, [r3, #0]
 8002c50:	4b22      	ldr	r3, [pc, #136]	; (8002cdc <HAL_I2C_Init+0x240>)
 8002c52:	430b      	orrs	r3, r1
 8002c54:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	68da      	ldr	r2, [r3, #12]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c64:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	691a      	ldr	r2, [r3, #16]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	695b      	ldr	r3, [r3, #20]
 8002c6e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	699b      	ldr	r3, [r3, #24]
 8002c76:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	430a      	orrs	r2, r1
 8002c7e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	69d9      	ldr	r1, [r3, #28]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6a1a      	ldr	r2, [r3, #32]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	430a      	orrs	r2, r1
 8002c8e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f042 0201 	orr.w	r2, r2, #1
 8002c9e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2220      	movs	r2, #32
 8002caa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002cbc:	2300      	movs	r3, #0
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	3708      	adds	r7, #8
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}
 8002cc6:	bf00      	nop
 8002cc8:	40005400 	.word	0x40005400
 8002ccc:	40005800 	.word	0x40005800
 8002cd0:	40005c00 	.word	0x40005c00
 8002cd4:	40006000 	.word	0x40006000
 8002cd8:	0800d938 	.word	0x0800d938
 8002cdc:	02008000 	.word	0x02008000

08002ce0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b082      	sub	sp, #8
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
 8002ce8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a32      	ldr	r2, [pc, #200]	; (8002db8 <HAL_I2CEx_ConfigAnalogFilter+0xd8>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d012      	beq.n	8002d1a <HAL_I2CEx_ConfigAnalogFilter+0x3a>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a30      	ldr	r2, [pc, #192]	; (8002dbc <HAL_I2CEx_ConfigAnalogFilter+0xdc>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d00d      	beq.n	8002d1a <HAL_I2CEx_ConfigAnalogFilter+0x3a>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a2f      	ldr	r2, [pc, #188]	; (8002dc0 <HAL_I2CEx_ConfigAnalogFilter+0xe0>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d008      	beq.n	8002d1a <HAL_I2CEx_ConfigAnalogFilter+0x3a>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a2d      	ldr	r2, [pc, #180]	; (8002dc4 <HAL_I2CEx_ConfigAnalogFilter+0xe4>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d003      	beq.n	8002d1a <HAL_I2CEx_ConfigAnalogFilter+0x3a>
 8002d12:	215e      	movs	r1, #94	; 0x5e
 8002d14:	482c      	ldr	r0, [pc, #176]	; (8002dc8 <HAL_I2CEx_ConfigAnalogFilter+0xe8>)
 8002d16:	f7fe fc50 	bl	80015ba <assert_failed>
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d007      	beq.n	8002d30 <HAL_I2CEx_ConfigAnalogFilter+0x50>
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d26:	d003      	beq.n	8002d30 <HAL_I2CEx_ConfigAnalogFilter+0x50>
 8002d28:	215f      	movs	r1, #95	; 0x5f
 8002d2a:	4827      	ldr	r0, [pc, #156]	; (8002dc8 <HAL_I2CEx_ConfigAnalogFilter+0xe8>)
 8002d2c:	f7fe fc45 	bl	80015ba <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d36:	b2db      	uxtb	r3, r3
 8002d38:	2b20      	cmp	r3, #32
 8002d3a:	d138      	bne.n	8002dae <HAL_I2CEx_ConfigAnalogFilter+0xce>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	d101      	bne.n	8002d4a <HAL_I2CEx_ConfigAnalogFilter+0x6a>
 8002d46:	2302      	movs	r3, #2
 8002d48:	e032      	b.n	8002db0 <HAL_I2CEx_ConfigAnalogFilter+0xd0>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2224      	movs	r2, #36	; 0x24
 8002d56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f022 0201 	bic.w	r2, r2, #1
 8002d68:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002d78:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	6819      	ldr	r1, [r3, #0]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	683a      	ldr	r2, [r7, #0]
 8002d86:	430a      	orrs	r2, r1
 8002d88:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	681a      	ldr	r2, [r3, #0]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f042 0201 	orr.w	r2, r2, #1
 8002d98:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2220      	movs	r2, #32
 8002d9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2200      	movs	r2, #0
 8002da6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002daa:	2300      	movs	r3, #0
 8002dac:	e000      	b.n	8002db0 <HAL_I2CEx_ConfigAnalogFilter+0xd0>
  }
  else
  {
    return HAL_BUSY;
 8002dae:	2302      	movs	r3, #2
  }
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	3708      	adds	r7, #8
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}
 8002db8:	40005400 	.word	0x40005400
 8002dbc:	40005800 	.word	0x40005800
 8002dc0:	40005c00 	.word	0x40005c00
 8002dc4:	40006000 	.word	0x40006000
 8002dc8:	0800d970 	.word	0x0800d970

08002dcc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b084      	sub	sp, #16
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
 8002dd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg;

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a31      	ldr	r2, [pc, #196]	; (8002ea0 <HAL_I2CEx_ConfigDigitalFilter+0xd4>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d012      	beq.n	8002e06 <HAL_I2CEx_ConfigDigitalFilter+0x3a>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a2f      	ldr	r2, [pc, #188]	; (8002ea4 <HAL_I2CEx_ConfigDigitalFilter+0xd8>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d00d      	beq.n	8002e06 <HAL_I2CEx_ConfigDigitalFilter+0x3a>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a2e      	ldr	r2, [pc, #184]	; (8002ea8 <HAL_I2CEx_ConfigDigitalFilter+0xdc>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d008      	beq.n	8002e06 <HAL_I2CEx_ConfigDigitalFilter+0x3a>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a2c      	ldr	r2, [pc, #176]	; (8002eac <HAL_I2CEx_ConfigDigitalFilter+0xe0>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d003      	beq.n	8002e06 <HAL_I2CEx_ConfigDigitalFilter+0x3a>
 8002dfe:	218c      	movs	r1, #140	; 0x8c
 8002e00:	482b      	ldr	r0, [pc, #172]	; (8002eb0 <HAL_I2CEx_ConfigDigitalFilter+0xe4>)
 8002e02:	f7fe fbda 	bl	80015ba <assert_failed>
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	2b0f      	cmp	r3, #15
 8002e0a:	d903      	bls.n	8002e14 <HAL_I2CEx_ConfigDigitalFilter+0x48>
 8002e0c:	218d      	movs	r1, #141	; 0x8d
 8002e0e:	4828      	ldr	r0, [pc, #160]	; (8002eb0 <HAL_I2CEx_ConfigDigitalFilter+0xe4>)
 8002e10:	f7fe fbd3 	bl	80015ba <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e1a:	b2db      	uxtb	r3, r3
 8002e1c:	2b20      	cmp	r3, #32
 8002e1e:	d139      	bne.n	8002e94 <HAL_I2CEx_ConfigDigitalFilter+0xc8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d101      	bne.n	8002e2e <HAL_I2CEx_ConfigDigitalFilter+0x62>
 8002e2a:	2302      	movs	r3, #2
 8002e2c:	e033      	b.n	8002e96 <HAL_I2CEx_ConfigDigitalFilter+0xca>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2201      	movs	r2, #1
 8002e32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2224      	movs	r2, #36	; 0x24
 8002e3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	681a      	ldr	r2, [r3, #0]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f022 0201 	bic.w	r2, r2, #1
 8002e4c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002e5c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	021b      	lsls	r3, r3, #8
 8002e62:	68fa      	ldr	r2, [r7, #12]
 8002e64:	4313      	orrs	r3, r2
 8002e66:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	68fa      	ldr	r2, [r7, #12]
 8002e6e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f042 0201 	orr.w	r2, r2, #1
 8002e7e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2220      	movs	r2, #32
 8002e84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002e90:	2300      	movs	r3, #0
 8002e92:	e000      	b.n	8002e96 <HAL_I2CEx_ConfigDigitalFilter+0xca>
  }
  else
  {
    return HAL_BUSY;
 8002e94:	2302      	movs	r3, #2
  }
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	3710      	adds	r7, #16
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}
 8002e9e:	bf00      	nop
 8002ea0:	40005400 	.word	0x40005400
 8002ea4:	40005800 	.word	0x40005800
 8002ea8:	40005c00 	.word	0x40005c00
 8002eac:	40006000 	.word	0x40006000
 8002eb0:	0800d970 	.word	0x0800d970

08002eb4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b082      	sub	sp, #8
 8002eb8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002ebe:	4b23      	ldr	r3, [pc, #140]	; (8002f4c <HAL_PWREx_EnableOverDrive+0x98>)
 8002ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec2:	4a22      	ldr	r2, [pc, #136]	; (8002f4c <HAL_PWREx_EnableOverDrive+0x98>)
 8002ec4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ec8:	6413      	str	r3, [r2, #64]	; 0x40
 8002eca:	4b20      	ldr	r3, [pc, #128]	; (8002f4c <HAL_PWREx_EnableOverDrive+0x98>)
 8002ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ece:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ed2:	603b      	str	r3, [r7, #0]
 8002ed4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002ed6:	4b1e      	ldr	r3, [pc, #120]	; (8002f50 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a1d      	ldr	r2, [pc, #116]	; (8002f50 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002edc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ee0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ee2:	f7ff f83d 	bl	8001f60 <HAL_GetTick>
 8002ee6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002ee8:	e009      	b.n	8002efe <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002eea:	f7ff f839 	bl	8001f60 <HAL_GetTick>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	1ad3      	subs	r3, r2, r3
 8002ef4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002ef8:	d901      	bls.n	8002efe <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002efa:	2303      	movs	r3, #3
 8002efc:	e022      	b.n	8002f44 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002efe:	4b14      	ldr	r3, [pc, #80]	; (8002f50 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f0a:	d1ee      	bne.n	8002eea <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002f0c:	4b10      	ldr	r3, [pc, #64]	; (8002f50 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a0f      	ldr	r2, [pc, #60]	; (8002f50 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002f12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f16:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002f18:	f7ff f822 	bl	8001f60 <HAL_GetTick>
 8002f1c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002f1e:	e009      	b.n	8002f34 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002f20:	f7ff f81e 	bl	8001f60 <HAL_GetTick>
 8002f24:	4602      	mov	r2, r0
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	1ad3      	subs	r3, r2, r3
 8002f2a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002f2e:	d901      	bls.n	8002f34 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002f30:	2303      	movs	r3, #3
 8002f32:	e007      	b.n	8002f44 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002f34:	4b06      	ldr	r3, [pc, #24]	; (8002f50 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f3c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002f40:	d1ee      	bne.n	8002f20 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002f42:	2300      	movs	r3, #0
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	3708      	adds	r7, #8
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}
 8002f4c:	40023800 	.word	0x40023800
 8002f50:	40007000 	.word	0x40007000

08002f54 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b086      	sub	sp, #24
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d101      	bne.n	8002f6a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e345      	b.n	80035f6 <HAL_RCC_OscConfig+0x6a2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	2b0f      	cmp	r3, #15
 8002f70:	d904      	bls.n	8002f7c <HAL_RCC_OscConfig+0x28>
 8002f72:	f240 1163 	movw	r1, #355	; 0x163
 8002f76:	4892      	ldr	r0, [pc, #584]	; (80031c0 <HAL_RCC_OscConfig+0x26c>)
 8002f78:	f7fe fb1f 	bl	80015ba <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f003 0301 	and.w	r3, r3, #1
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	f000 809a 	beq.w	80030be <HAL_RCC_OscConfig+0x16a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d00e      	beq.n	8002fb0 <HAL_RCC_OscConfig+0x5c>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f9a:	d009      	beq.n	8002fb0 <HAL_RCC_OscConfig+0x5c>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002fa4:	d004      	beq.n	8002fb0 <HAL_RCC_OscConfig+0x5c>
 8002fa6:	f240 1169 	movw	r1, #361	; 0x169
 8002faa:	4885      	ldr	r0, [pc, #532]	; (80031c0 <HAL_RCC_OscConfig+0x26c>)
 8002fac:	f7fe fb05 	bl	80015ba <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002fb0:	4b84      	ldr	r3, [pc, #528]	; (80031c4 <HAL_RCC_OscConfig+0x270>)
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	f003 030c 	and.w	r3, r3, #12
 8002fb8:	2b04      	cmp	r3, #4
 8002fba:	d00c      	beq.n	8002fd6 <HAL_RCC_OscConfig+0x82>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002fbc:	4b81      	ldr	r3, [pc, #516]	; (80031c4 <HAL_RCC_OscConfig+0x270>)
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	f003 030c 	and.w	r3, r3, #12
 8002fc4:	2b08      	cmp	r3, #8
 8002fc6:	d112      	bne.n	8002fee <HAL_RCC_OscConfig+0x9a>
 8002fc8:	4b7e      	ldr	r3, [pc, #504]	; (80031c4 <HAL_RCC_OscConfig+0x270>)
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fd0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002fd4:	d10b      	bne.n	8002fee <HAL_RCC_OscConfig+0x9a>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fd6:	4b7b      	ldr	r3, [pc, #492]	; (80031c4 <HAL_RCC_OscConfig+0x270>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d06c      	beq.n	80030bc <HAL_RCC_OscConfig+0x168>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d168      	bne.n	80030bc <HAL_RCC_OscConfig+0x168>
      {
        return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e303      	b.n	80035f6 <HAL_RCC_OscConfig+0x6a2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ff6:	d106      	bne.n	8003006 <HAL_RCC_OscConfig+0xb2>
 8002ff8:	4b72      	ldr	r3, [pc, #456]	; (80031c4 <HAL_RCC_OscConfig+0x270>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a71      	ldr	r2, [pc, #452]	; (80031c4 <HAL_RCC_OscConfig+0x270>)
 8002ffe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003002:	6013      	str	r3, [r2, #0]
 8003004:	e02e      	b.n	8003064 <HAL_RCC_OscConfig+0x110>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d10c      	bne.n	8003028 <HAL_RCC_OscConfig+0xd4>
 800300e:	4b6d      	ldr	r3, [pc, #436]	; (80031c4 <HAL_RCC_OscConfig+0x270>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a6c      	ldr	r2, [pc, #432]	; (80031c4 <HAL_RCC_OscConfig+0x270>)
 8003014:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003018:	6013      	str	r3, [r2, #0]
 800301a:	4b6a      	ldr	r3, [pc, #424]	; (80031c4 <HAL_RCC_OscConfig+0x270>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a69      	ldr	r2, [pc, #420]	; (80031c4 <HAL_RCC_OscConfig+0x270>)
 8003020:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003024:	6013      	str	r3, [r2, #0]
 8003026:	e01d      	b.n	8003064 <HAL_RCC_OscConfig+0x110>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003030:	d10c      	bne.n	800304c <HAL_RCC_OscConfig+0xf8>
 8003032:	4b64      	ldr	r3, [pc, #400]	; (80031c4 <HAL_RCC_OscConfig+0x270>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a63      	ldr	r2, [pc, #396]	; (80031c4 <HAL_RCC_OscConfig+0x270>)
 8003038:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800303c:	6013      	str	r3, [r2, #0]
 800303e:	4b61      	ldr	r3, [pc, #388]	; (80031c4 <HAL_RCC_OscConfig+0x270>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a60      	ldr	r2, [pc, #384]	; (80031c4 <HAL_RCC_OscConfig+0x270>)
 8003044:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003048:	6013      	str	r3, [r2, #0]
 800304a:	e00b      	b.n	8003064 <HAL_RCC_OscConfig+0x110>
 800304c:	4b5d      	ldr	r3, [pc, #372]	; (80031c4 <HAL_RCC_OscConfig+0x270>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a5c      	ldr	r2, [pc, #368]	; (80031c4 <HAL_RCC_OscConfig+0x270>)
 8003052:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003056:	6013      	str	r3, [r2, #0]
 8003058:	4b5a      	ldr	r3, [pc, #360]	; (80031c4 <HAL_RCC_OscConfig+0x270>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a59      	ldr	r2, [pc, #356]	; (80031c4 <HAL_RCC_OscConfig+0x270>)
 800305e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003062:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d013      	beq.n	8003094 <HAL_RCC_OscConfig+0x140>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800306c:	f7fe ff78 	bl	8001f60 <HAL_GetTick>
 8003070:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003072:	e008      	b.n	8003086 <HAL_RCC_OscConfig+0x132>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003074:	f7fe ff74 	bl	8001f60 <HAL_GetTick>
 8003078:	4602      	mov	r2, r0
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	1ad3      	subs	r3, r2, r3
 800307e:	2b64      	cmp	r3, #100	; 0x64
 8003080:	d901      	bls.n	8003086 <HAL_RCC_OscConfig+0x132>
          {
            return HAL_TIMEOUT;
 8003082:	2303      	movs	r3, #3
 8003084:	e2b7      	b.n	80035f6 <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003086:	4b4f      	ldr	r3, [pc, #316]	; (80031c4 <HAL_RCC_OscConfig+0x270>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800308e:	2b00      	cmp	r3, #0
 8003090:	d0f0      	beq.n	8003074 <HAL_RCC_OscConfig+0x120>
 8003092:	e014      	b.n	80030be <HAL_RCC_OscConfig+0x16a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003094:	f7fe ff64 	bl	8001f60 <HAL_GetTick>
 8003098:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800309a:	e008      	b.n	80030ae <HAL_RCC_OscConfig+0x15a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800309c:	f7fe ff60 	bl	8001f60 <HAL_GetTick>
 80030a0:	4602      	mov	r2, r0
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	1ad3      	subs	r3, r2, r3
 80030a6:	2b64      	cmp	r3, #100	; 0x64
 80030a8:	d901      	bls.n	80030ae <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80030aa:	2303      	movs	r3, #3
 80030ac:	e2a3      	b.n	80035f6 <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030ae:	4b45      	ldr	r3, [pc, #276]	; (80031c4 <HAL_RCC_OscConfig+0x270>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d1f0      	bne.n	800309c <HAL_RCC_OscConfig+0x148>
 80030ba:	e000      	b.n	80030be <HAL_RCC_OscConfig+0x16a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f003 0302 	and.w	r3, r3, #2
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	f000 8084 	beq.w	80031d4 <HAL_RCC_OscConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	68db      	ldr	r3, [r3, #12]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d008      	beq.n	80030e6 <HAL_RCC_OscConfig+0x192>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	68db      	ldr	r3, [r3, #12]
 80030d8:	2b01      	cmp	r3, #1
 80030da:	d004      	beq.n	80030e6 <HAL_RCC_OscConfig+0x192>
 80030dc:	f240 119b 	movw	r1, #411	; 0x19b
 80030e0:	4837      	ldr	r0, [pc, #220]	; (80031c0 <HAL_RCC_OscConfig+0x26c>)
 80030e2:	f7fe fa6a 	bl	80015ba <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	691b      	ldr	r3, [r3, #16]
 80030ea:	2b1f      	cmp	r3, #31
 80030ec:	d904      	bls.n	80030f8 <HAL_RCC_OscConfig+0x1a4>
 80030ee:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 80030f2:	4833      	ldr	r0, [pc, #204]	; (80031c0 <HAL_RCC_OscConfig+0x26c>)
 80030f4:	f7fe fa61 	bl	80015ba <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80030f8:	4b32      	ldr	r3, [pc, #200]	; (80031c4 <HAL_RCC_OscConfig+0x270>)
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	f003 030c 	and.w	r3, r3, #12
 8003100:	2b00      	cmp	r3, #0
 8003102:	d00b      	beq.n	800311c <HAL_RCC_OscConfig+0x1c8>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003104:	4b2f      	ldr	r3, [pc, #188]	; (80031c4 <HAL_RCC_OscConfig+0x270>)
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	f003 030c 	and.w	r3, r3, #12
 800310c:	2b08      	cmp	r3, #8
 800310e:	d11c      	bne.n	800314a <HAL_RCC_OscConfig+0x1f6>
 8003110:	4b2c      	ldr	r3, [pc, #176]	; (80031c4 <HAL_RCC_OscConfig+0x270>)
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003118:	2b00      	cmp	r3, #0
 800311a:	d116      	bne.n	800314a <HAL_RCC_OscConfig+0x1f6>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800311c:	4b29      	ldr	r3, [pc, #164]	; (80031c4 <HAL_RCC_OscConfig+0x270>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f003 0302 	and.w	r3, r3, #2
 8003124:	2b00      	cmp	r3, #0
 8003126:	d005      	beq.n	8003134 <HAL_RCC_OscConfig+0x1e0>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	68db      	ldr	r3, [r3, #12]
 800312c:	2b01      	cmp	r3, #1
 800312e:	d001      	beq.n	8003134 <HAL_RCC_OscConfig+0x1e0>
      {
        return HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	e260      	b.n	80035f6 <HAL_RCC_OscConfig+0x6a2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003134:	4b23      	ldr	r3, [pc, #140]	; (80031c4 <HAL_RCC_OscConfig+0x270>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	691b      	ldr	r3, [r3, #16]
 8003140:	00db      	lsls	r3, r3, #3
 8003142:	4920      	ldr	r1, [pc, #128]	; (80031c4 <HAL_RCC_OscConfig+0x270>)
 8003144:	4313      	orrs	r3, r2
 8003146:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003148:	e044      	b.n	80031d4 <HAL_RCC_OscConfig+0x280>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	68db      	ldr	r3, [r3, #12]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d023      	beq.n	800319a <HAL_RCC_OscConfig+0x246>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003152:	4b1c      	ldr	r3, [pc, #112]	; (80031c4 <HAL_RCC_OscConfig+0x270>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a1b      	ldr	r2, [pc, #108]	; (80031c4 <HAL_RCC_OscConfig+0x270>)
 8003158:	f043 0301 	orr.w	r3, r3, #1
 800315c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800315e:	f7fe feff 	bl	8001f60 <HAL_GetTick>
 8003162:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003164:	e008      	b.n	8003178 <HAL_RCC_OscConfig+0x224>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003166:	f7fe fefb 	bl	8001f60 <HAL_GetTick>
 800316a:	4602      	mov	r2, r0
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	1ad3      	subs	r3, r2, r3
 8003170:	2b02      	cmp	r3, #2
 8003172:	d901      	bls.n	8003178 <HAL_RCC_OscConfig+0x224>
          {
            return HAL_TIMEOUT;
 8003174:	2303      	movs	r3, #3
 8003176:	e23e      	b.n	80035f6 <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003178:	4b12      	ldr	r3, [pc, #72]	; (80031c4 <HAL_RCC_OscConfig+0x270>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f003 0302 	and.w	r3, r3, #2
 8003180:	2b00      	cmp	r3, #0
 8003182:	d0f0      	beq.n	8003166 <HAL_RCC_OscConfig+0x212>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003184:	4b0f      	ldr	r3, [pc, #60]	; (80031c4 <HAL_RCC_OscConfig+0x270>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	691b      	ldr	r3, [r3, #16]
 8003190:	00db      	lsls	r3, r3, #3
 8003192:	490c      	ldr	r1, [pc, #48]	; (80031c4 <HAL_RCC_OscConfig+0x270>)
 8003194:	4313      	orrs	r3, r2
 8003196:	600b      	str	r3, [r1, #0]
 8003198:	e01c      	b.n	80031d4 <HAL_RCC_OscConfig+0x280>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800319a:	4b0a      	ldr	r3, [pc, #40]	; (80031c4 <HAL_RCC_OscConfig+0x270>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a09      	ldr	r2, [pc, #36]	; (80031c4 <HAL_RCC_OscConfig+0x270>)
 80031a0:	f023 0301 	bic.w	r3, r3, #1
 80031a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031a6:	f7fe fedb 	bl	8001f60 <HAL_GetTick>
 80031aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031ac:	e00c      	b.n	80031c8 <HAL_RCC_OscConfig+0x274>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031ae:	f7fe fed7 	bl	8001f60 <HAL_GetTick>
 80031b2:	4602      	mov	r2, r0
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	1ad3      	subs	r3, r2, r3
 80031b8:	2b02      	cmp	r3, #2
 80031ba:	d905      	bls.n	80031c8 <HAL_RCC_OscConfig+0x274>
          {
            return HAL_TIMEOUT;
 80031bc:	2303      	movs	r3, #3
 80031be:	e21a      	b.n	80035f6 <HAL_RCC_OscConfig+0x6a2>
 80031c0:	0800d9ac 	.word	0x0800d9ac
 80031c4:	40023800 	.word	0x40023800
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031c8:	4b7e      	ldr	r3, [pc, #504]	; (80033c4 <HAL_RCC_OscConfig+0x470>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f003 0302 	and.w	r3, r3, #2
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d1ec      	bne.n	80031ae <HAL_RCC_OscConfig+0x25a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f003 0308 	and.w	r3, r3, #8
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d043      	beq.n	8003268 <HAL_RCC_OscConfig+0x314>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	695b      	ldr	r3, [r3, #20]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d008      	beq.n	80031fa <HAL_RCC_OscConfig+0x2a6>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	695b      	ldr	r3, [r3, #20]
 80031ec:	2b01      	cmp	r3, #1
 80031ee:	d004      	beq.n	80031fa <HAL_RCC_OscConfig+0x2a6>
 80031f0:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 80031f4:	4874      	ldr	r0, [pc, #464]	; (80033c8 <HAL_RCC_OscConfig+0x474>)
 80031f6:	f7fe f9e0 	bl	80015ba <assert_failed>

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	695b      	ldr	r3, [r3, #20]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d019      	beq.n	8003236 <HAL_RCC_OscConfig+0x2e2>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003202:	4b70      	ldr	r3, [pc, #448]	; (80033c4 <HAL_RCC_OscConfig+0x470>)
 8003204:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003206:	4a6f      	ldr	r2, [pc, #444]	; (80033c4 <HAL_RCC_OscConfig+0x470>)
 8003208:	f043 0301 	orr.w	r3, r3, #1
 800320c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800320e:	f7fe fea7 	bl	8001f60 <HAL_GetTick>
 8003212:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003214:	e008      	b.n	8003228 <HAL_RCC_OscConfig+0x2d4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003216:	f7fe fea3 	bl	8001f60 <HAL_GetTick>
 800321a:	4602      	mov	r2, r0
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	1ad3      	subs	r3, r2, r3
 8003220:	2b02      	cmp	r3, #2
 8003222:	d901      	bls.n	8003228 <HAL_RCC_OscConfig+0x2d4>
        {
          return HAL_TIMEOUT;
 8003224:	2303      	movs	r3, #3
 8003226:	e1e6      	b.n	80035f6 <HAL_RCC_OscConfig+0x6a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003228:	4b66      	ldr	r3, [pc, #408]	; (80033c4 <HAL_RCC_OscConfig+0x470>)
 800322a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800322c:	f003 0302 	and.w	r3, r3, #2
 8003230:	2b00      	cmp	r3, #0
 8003232:	d0f0      	beq.n	8003216 <HAL_RCC_OscConfig+0x2c2>
 8003234:	e018      	b.n	8003268 <HAL_RCC_OscConfig+0x314>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003236:	4b63      	ldr	r3, [pc, #396]	; (80033c4 <HAL_RCC_OscConfig+0x470>)
 8003238:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800323a:	4a62      	ldr	r2, [pc, #392]	; (80033c4 <HAL_RCC_OscConfig+0x470>)
 800323c:	f023 0301 	bic.w	r3, r3, #1
 8003240:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003242:	f7fe fe8d 	bl	8001f60 <HAL_GetTick>
 8003246:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003248:	e008      	b.n	800325c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800324a:	f7fe fe89 	bl	8001f60 <HAL_GetTick>
 800324e:	4602      	mov	r2, r0
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	1ad3      	subs	r3, r2, r3
 8003254:	2b02      	cmp	r3, #2
 8003256:	d901      	bls.n	800325c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003258:	2303      	movs	r3, #3
 800325a:	e1cc      	b.n	80035f6 <HAL_RCC_OscConfig+0x6a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800325c:	4b59      	ldr	r3, [pc, #356]	; (80033c4 <HAL_RCC_OscConfig+0x470>)
 800325e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003260:	f003 0302 	and.w	r3, r3, #2
 8003264:	2b00      	cmp	r3, #0
 8003266:	d1f0      	bne.n	800324a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f003 0304 	and.w	r3, r3, #4
 8003270:	2b00      	cmp	r3, #0
 8003272:	f000 80bc 	beq.w	80033ee <HAL_RCC_OscConfig+0x49a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d00c      	beq.n	8003298 <HAL_RCC_OscConfig+0x344>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	689b      	ldr	r3, [r3, #8]
 8003282:	2b01      	cmp	r3, #1
 8003284:	d008      	beq.n	8003298 <HAL_RCC_OscConfig+0x344>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	2b05      	cmp	r3, #5
 800328c:	d004      	beq.n	8003298 <HAL_RCC_OscConfig+0x344>
 800328e:	f240 2106 	movw	r1, #518	; 0x206
 8003292:	484d      	ldr	r0, [pc, #308]	; (80033c8 <HAL_RCC_OscConfig+0x474>)
 8003294:	f7fe f991 	bl	80015ba <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003298:	4b4a      	ldr	r3, [pc, #296]	; (80033c4 <HAL_RCC_OscConfig+0x470>)
 800329a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800329c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d10d      	bne.n	80032c0 <HAL_RCC_OscConfig+0x36c>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80032a4:	4b47      	ldr	r3, [pc, #284]	; (80033c4 <HAL_RCC_OscConfig+0x470>)
 80032a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a8:	4a46      	ldr	r2, [pc, #280]	; (80033c4 <HAL_RCC_OscConfig+0x470>)
 80032aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032ae:	6413      	str	r3, [r2, #64]	; 0x40
 80032b0:	4b44      	ldr	r3, [pc, #272]	; (80033c4 <HAL_RCC_OscConfig+0x470>)
 80032b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032b8:	60bb      	str	r3, [r7, #8]
 80032ba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032bc:	2301      	movs	r3, #1
 80032be:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032c0:	4b42      	ldr	r3, [pc, #264]	; (80033cc <HAL_RCC_OscConfig+0x478>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d118      	bne.n	80032fe <HAL_RCC_OscConfig+0x3aa>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80032cc:	4b3f      	ldr	r3, [pc, #252]	; (80033cc <HAL_RCC_OscConfig+0x478>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a3e      	ldr	r2, [pc, #248]	; (80033cc <HAL_RCC_OscConfig+0x478>)
 80032d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032d6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032d8:	f7fe fe42 	bl	8001f60 <HAL_GetTick>
 80032dc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032de:	e008      	b.n	80032f2 <HAL_RCC_OscConfig+0x39e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032e0:	f7fe fe3e 	bl	8001f60 <HAL_GetTick>
 80032e4:	4602      	mov	r2, r0
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	1ad3      	subs	r3, r2, r3
 80032ea:	2b64      	cmp	r3, #100	; 0x64
 80032ec:	d901      	bls.n	80032f2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80032ee:	2303      	movs	r3, #3
 80032f0:	e181      	b.n	80035f6 <HAL_RCC_OscConfig+0x6a2>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032f2:	4b36      	ldr	r3, [pc, #216]	; (80033cc <HAL_RCC_OscConfig+0x478>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d0f0      	beq.n	80032e0 <HAL_RCC_OscConfig+0x38c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	2b01      	cmp	r3, #1
 8003304:	d106      	bne.n	8003314 <HAL_RCC_OscConfig+0x3c0>
 8003306:	4b2f      	ldr	r3, [pc, #188]	; (80033c4 <HAL_RCC_OscConfig+0x470>)
 8003308:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800330a:	4a2e      	ldr	r2, [pc, #184]	; (80033c4 <HAL_RCC_OscConfig+0x470>)
 800330c:	f043 0301 	orr.w	r3, r3, #1
 8003310:	6713      	str	r3, [r2, #112]	; 0x70
 8003312:	e02d      	b.n	8003370 <HAL_RCC_OscConfig+0x41c>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d10c      	bne.n	8003336 <HAL_RCC_OscConfig+0x3e2>
 800331c:	4b29      	ldr	r3, [pc, #164]	; (80033c4 <HAL_RCC_OscConfig+0x470>)
 800331e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003320:	4a28      	ldr	r2, [pc, #160]	; (80033c4 <HAL_RCC_OscConfig+0x470>)
 8003322:	f023 0301 	bic.w	r3, r3, #1
 8003326:	6713      	str	r3, [r2, #112]	; 0x70
 8003328:	4b26      	ldr	r3, [pc, #152]	; (80033c4 <HAL_RCC_OscConfig+0x470>)
 800332a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800332c:	4a25      	ldr	r2, [pc, #148]	; (80033c4 <HAL_RCC_OscConfig+0x470>)
 800332e:	f023 0304 	bic.w	r3, r3, #4
 8003332:	6713      	str	r3, [r2, #112]	; 0x70
 8003334:	e01c      	b.n	8003370 <HAL_RCC_OscConfig+0x41c>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	2b05      	cmp	r3, #5
 800333c:	d10c      	bne.n	8003358 <HAL_RCC_OscConfig+0x404>
 800333e:	4b21      	ldr	r3, [pc, #132]	; (80033c4 <HAL_RCC_OscConfig+0x470>)
 8003340:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003342:	4a20      	ldr	r2, [pc, #128]	; (80033c4 <HAL_RCC_OscConfig+0x470>)
 8003344:	f043 0304 	orr.w	r3, r3, #4
 8003348:	6713      	str	r3, [r2, #112]	; 0x70
 800334a:	4b1e      	ldr	r3, [pc, #120]	; (80033c4 <HAL_RCC_OscConfig+0x470>)
 800334c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800334e:	4a1d      	ldr	r2, [pc, #116]	; (80033c4 <HAL_RCC_OscConfig+0x470>)
 8003350:	f043 0301 	orr.w	r3, r3, #1
 8003354:	6713      	str	r3, [r2, #112]	; 0x70
 8003356:	e00b      	b.n	8003370 <HAL_RCC_OscConfig+0x41c>
 8003358:	4b1a      	ldr	r3, [pc, #104]	; (80033c4 <HAL_RCC_OscConfig+0x470>)
 800335a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800335c:	4a19      	ldr	r2, [pc, #100]	; (80033c4 <HAL_RCC_OscConfig+0x470>)
 800335e:	f023 0301 	bic.w	r3, r3, #1
 8003362:	6713      	str	r3, [r2, #112]	; 0x70
 8003364:	4b17      	ldr	r3, [pc, #92]	; (80033c4 <HAL_RCC_OscConfig+0x470>)
 8003366:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003368:	4a16      	ldr	r2, [pc, #88]	; (80033c4 <HAL_RCC_OscConfig+0x470>)
 800336a:	f023 0304 	bic.w	r3, r3, #4
 800336e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d015      	beq.n	80033a4 <HAL_RCC_OscConfig+0x450>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003378:	f7fe fdf2 	bl	8001f60 <HAL_GetTick>
 800337c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800337e:	e00a      	b.n	8003396 <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003380:	f7fe fdee 	bl	8001f60 <HAL_GetTick>
 8003384:	4602      	mov	r2, r0
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	1ad3      	subs	r3, r2, r3
 800338a:	f241 3288 	movw	r2, #5000	; 0x1388
 800338e:	4293      	cmp	r3, r2
 8003390:	d901      	bls.n	8003396 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8003392:	2303      	movs	r3, #3
 8003394:	e12f      	b.n	80035f6 <HAL_RCC_OscConfig+0x6a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003396:	4b0b      	ldr	r3, [pc, #44]	; (80033c4 <HAL_RCC_OscConfig+0x470>)
 8003398:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800339a:	f003 0302 	and.w	r3, r3, #2
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d0ee      	beq.n	8003380 <HAL_RCC_OscConfig+0x42c>
 80033a2:	e01b      	b.n	80033dc <HAL_RCC_OscConfig+0x488>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033a4:	f7fe fddc 	bl	8001f60 <HAL_GetTick>
 80033a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033aa:	e011      	b.n	80033d0 <HAL_RCC_OscConfig+0x47c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033ac:	f7fe fdd8 	bl	8001f60 <HAL_GetTick>
 80033b0:	4602      	mov	r2, r0
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	1ad3      	subs	r3, r2, r3
 80033b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d908      	bls.n	80033d0 <HAL_RCC_OscConfig+0x47c>
        {
          return HAL_TIMEOUT;
 80033be:	2303      	movs	r3, #3
 80033c0:	e119      	b.n	80035f6 <HAL_RCC_OscConfig+0x6a2>
 80033c2:	bf00      	nop
 80033c4:	40023800 	.word	0x40023800
 80033c8:	0800d9ac 	.word	0x0800d9ac
 80033cc:	40007000 	.word	0x40007000
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033d0:	4b8b      	ldr	r3, [pc, #556]	; (8003600 <HAL_RCC_OscConfig+0x6ac>)
 80033d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033d4:	f003 0302 	and.w	r3, r3, #2
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d1e7      	bne.n	80033ac <HAL_RCC_OscConfig+0x458>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80033dc:	7dfb      	ldrb	r3, [r7, #23]
 80033de:	2b01      	cmp	r3, #1
 80033e0:	d105      	bne.n	80033ee <HAL_RCC_OscConfig+0x49a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033e2:	4b87      	ldr	r3, [pc, #540]	; (8003600 <HAL_RCC_OscConfig+0x6ac>)
 80033e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e6:	4a86      	ldr	r2, [pc, #536]	; (8003600 <HAL_RCC_OscConfig+0x6ac>)
 80033e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033ec:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	699b      	ldr	r3, [r3, #24]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d00c      	beq.n	8003410 <HAL_RCC_OscConfig+0x4bc>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	699b      	ldr	r3, [r3, #24]
 80033fa:	2b01      	cmp	r3, #1
 80033fc:	d008      	beq.n	8003410 <HAL_RCC_OscConfig+0x4bc>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	699b      	ldr	r3, [r3, #24]
 8003402:	2b02      	cmp	r3, #2
 8003404:	d004      	beq.n	8003410 <HAL_RCC_OscConfig+0x4bc>
 8003406:	f240 214a 	movw	r1, #586	; 0x24a
 800340a:	487e      	ldr	r0, [pc, #504]	; (8003604 <HAL_RCC_OscConfig+0x6b0>)
 800340c:	f7fe f8d5 	bl	80015ba <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	699b      	ldr	r3, [r3, #24]
 8003414:	2b00      	cmp	r3, #0
 8003416:	f000 80ed 	beq.w	80035f4 <HAL_RCC_OscConfig+0x6a0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800341a:	4b79      	ldr	r3, [pc, #484]	; (8003600 <HAL_RCC_OscConfig+0x6ac>)
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	f003 030c 	and.w	r3, r3, #12
 8003422:	2b08      	cmp	r3, #8
 8003424:	f000 80b4 	beq.w	8003590 <HAL_RCC_OscConfig+0x63c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	699b      	ldr	r3, [r3, #24]
 800342c:	2b02      	cmp	r3, #2
 800342e:	f040 8095 	bne.w	800355c <HAL_RCC_OscConfig+0x608>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	69db      	ldr	r3, [r3, #28]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d009      	beq.n	800344e <HAL_RCC_OscConfig+0x4fa>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	69db      	ldr	r3, [r3, #28]
 800343e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003442:	d004      	beq.n	800344e <HAL_RCC_OscConfig+0x4fa>
 8003444:	f240 2153 	movw	r1, #595	; 0x253
 8003448:	486e      	ldr	r0, [pc, #440]	; (8003604 <HAL_RCC_OscConfig+0x6b0>)
 800344a:	f7fe f8b6 	bl	80015ba <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6a1b      	ldr	r3, [r3, #32]
 8003452:	2b01      	cmp	r3, #1
 8003454:	d903      	bls.n	800345e <HAL_RCC_OscConfig+0x50a>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6a1b      	ldr	r3, [r3, #32]
 800345a:	2b3f      	cmp	r3, #63	; 0x3f
 800345c:	d904      	bls.n	8003468 <HAL_RCC_OscConfig+0x514>
 800345e:	f44f 7115 	mov.w	r1, #596	; 0x254
 8003462:	4868      	ldr	r0, [pc, #416]	; (8003604 <HAL_RCC_OscConfig+0x6b0>)
 8003464:	f7fe f8a9 	bl	80015ba <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800346c:	2b31      	cmp	r3, #49	; 0x31
 800346e:	d904      	bls.n	800347a <HAL_RCC_OscConfig+0x526>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003474:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8003478:	d904      	bls.n	8003484 <HAL_RCC_OscConfig+0x530>
 800347a:	f240 2155 	movw	r1, #597	; 0x255
 800347e:	4861      	ldr	r0, [pc, #388]	; (8003604 <HAL_RCC_OscConfig+0x6b0>)
 8003480:	f7fe f89b 	bl	80015ba <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003488:	2b02      	cmp	r3, #2
 800348a:	d010      	beq.n	80034ae <HAL_RCC_OscConfig+0x55a>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003490:	2b04      	cmp	r3, #4
 8003492:	d00c      	beq.n	80034ae <HAL_RCC_OscConfig+0x55a>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003498:	2b06      	cmp	r3, #6
 800349a:	d008      	beq.n	80034ae <HAL_RCC_OscConfig+0x55a>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034a0:	2b08      	cmp	r3, #8
 80034a2:	d004      	beq.n	80034ae <HAL_RCC_OscConfig+0x55a>
 80034a4:	f240 2156 	movw	r1, #598	; 0x256
 80034a8:	4856      	ldr	r0, [pc, #344]	; (8003604 <HAL_RCC_OscConfig+0x6b0>)
 80034aa:	f7fe f886 	bl	80015ba <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034b2:	2b01      	cmp	r3, #1
 80034b4:	d903      	bls.n	80034be <HAL_RCC_OscConfig+0x56a>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ba:	2b0f      	cmp	r3, #15
 80034bc:	d904      	bls.n	80034c8 <HAL_RCC_OscConfig+0x574>
 80034be:	f240 2157 	movw	r1, #599	; 0x257
 80034c2:	4850      	ldr	r0, [pc, #320]	; (8003604 <HAL_RCC_OscConfig+0x6b0>)
 80034c4:	f7fe f879 	bl	80015ba <assert_failed>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034c8:	4b4d      	ldr	r3, [pc, #308]	; (8003600 <HAL_RCC_OscConfig+0x6ac>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a4c      	ldr	r2, [pc, #304]	; (8003600 <HAL_RCC_OscConfig+0x6ac>)
 80034ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80034d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034d4:	f7fe fd44 	bl	8001f60 <HAL_GetTick>
 80034d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034da:	e008      	b.n	80034ee <HAL_RCC_OscConfig+0x59a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034dc:	f7fe fd40 	bl	8001f60 <HAL_GetTick>
 80034e0:	4602      	mov	r2, r0
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	1ad3      	subs	r3, r2, r3
 80034e6:	2b02      	cmp	r3, #2
 80034e8:	d901      	bls.n	80034ee <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80034ea:	2303      	movs	r3, #3
 80034ec:	e083      	b.n	80035f6 <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034ee:	4b44      	ldr	r3, [pc, #272]	; (8003600 <HAL_RCC_OscConfig+0x6ac>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d1f0      	bne.n	80034dc <HAL_RCC_OscConfig+0x588>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	69da      	ldr	r2, [r3, #28]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6a1b      	ldr	r3, [r3, #32]
 8003502:	431a      	orrs	r2, r3
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003508:	019b      	lsls	r3, r3, #6
 800350a:	431a      	orrs	r2, r3
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003510:	085b      	lsrs	r3, r3, #1
 8003512:	3b01      	subs	r3, #1
 8003514:	041b      	lsls	r3, r3, #16
 8003516:	431a      	orrs	r2, r3
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800351c:	061b      	lsls	r3, r3, #24
 800351e:	4313      	orrs	r3, r2
 8003520:	4a37      	ldr	r2, [pc, #220]	; (8003600 <HAL_RCC_OscConfig+0x6ac>)
 8003522:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003526:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003528:	4b35      	ldr	r3, [pc, #212]	; (8003600 <HAL_RCC_OscConfig+0x6ac>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a34      	ldr	r2, [pc, #208]	; (8003600 <HAL_RCC_OscConfig+0x6ac>)
 800352e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003532:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003534:	f7fe fd14 	bl	8001f60 <HAL_GetTick>
 8003538:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800353a:	e008      	b.n	800354e <HAL_RCC_OscConfig+0x5fa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800353c:	f7fe fd10 	bl	8001f60 <HAL_GetTick>
 8003540:	4602      	mov	r2, r0
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	1ad3      	subs	r3, r2, r3
 8003546:	2b02      	cmp	r3, #2
 8003548:	d901      	bls.n	800354e <HAL_RCC_OscConfig+0x5fa>
          {
            return HAL_TIMEOUT;
 800354a:	2303      	movs	r3, #3
 800354c:	e053      	b.n	80035f6 <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800354e:	4b2c      	ldr	r3, [pc, #176]	; (8003600 <HAL_RCC_OscConfig+0x6ac>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003556:	2b00      	cmp	r3, #0
 8003558:	d0f0      	beq.n	800353c <HAL_RCC_OscConfig+0x5e8>
 800355a:	e04b      	b.n	80035f4 <HAL_RCC_OscConfig+0x6a0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800355c:	4b28      	ldr	r3, [pc, #160]	; (8003600 <HAL_RCC_OscConfig+0x6ac>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a27      	ldr	r2, [pc, #156]	; (8003600 <HAL_RCC_OscConfig+0x6ac>)
 8003562:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003566:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003568:	f7fe fcfa 	bl	8001f60 <HAL_GetTick>
 800356c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800356e:	e008      	b.n	8003582 <HAL_RCC_OscConfig+0x62e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003570:	f7fe fcf6 	bl	8001f60 <HAL_GetTick>
 8003574:	4602      	mov	r2, r0
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	1ad3      	subs	r3, r2, r3
 800357a:	2b02      	cmp	r3, #2
 800357c:	d901      	bls.n	8003582 <HAL_RCC_OscConfig+0x62e>
          {
            return HAL_TIMEOUT;
 800357e:	2303      	movs	r3, #3
 8003580:	e039      	b.n	80035f6 <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003582:	4b1f      	ldr	r3, [pc, #124]	; (8003600 <HAL_RCC_OscConfig+0x6ac>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800358a:	2b00      	cmp	r3, #0
 800358c:	d1f0      	bne.n	8003570 <HAL_RCC_OscConfig+0x61c>
 800358e:	e031      	b.n	80035f4 <HAL_RCC_OscConfig+0x6a0>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003590:	4b1b      	ldr	r3, [pc, #108]	; (8003600 <HAL_RCC_OscConfig+0x6ac>)
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	699b      	ldr	r3, [r3, #24]
 800359a:	2b01      	cmp	r3, #1
 800359c:	d028      	beq.n	80035f0 <HAL_RCC_OscConfig+0x69c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035a8:	429a      	cmp	r2, r3
 80035aa:	d121      	bne.n	80035f0 <HAL_RCC_OscConfig+0x69c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035b6:	429a      	cmp	r2, r3
 80035b8:	d11a      	bne.n	80035f0 <HAL_RCC_OscConfig+0x69c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80035ba:	68fa      	ldr	r2, [r7, #12]
 80035bc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80035c0:	4013      	ands	r3, r2
 80035c2:	687a      	ldr	r2, [r7, #4]
 80035c4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80035c6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d111      	bne.n	80035f0 <HAL_RCC_OscConfig+0x69c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035d6:	085b      	lsrs	r3, r3, #1
 80035d8:	3b01      	subs	r3, #1
 80035da:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80035dc:	429a      	cmp	r2, r3
 80035de:	d107      	bne.n	80035f0 <HAL_RCC_OscConfig+0x69c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ea:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d001      	beq.n	80035f4 <HAL_RCC_OscConfig+0x6a0>
#endif
      {
        return HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	e000      	b.n	80035f6 <HAL_RCC_OscConfig+0x6a2>
      }
    }
  }
  return HAL_OK;
 80035f4:	2300      	movs	r3, #0
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	3718      	adds	r7, #24
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}
 80035fe:	bf00      	nop
 8003600:	40023800 	.word	0x40023800
 8003604:	0800d9ac 	.word	0x0800d9ac

08003608 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b084      	sub	sp, #16
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
 8003610:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003612:	2300      	movs	r3, #0
 8003614:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d101      	bne.n	8003620 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	e18c      	b.n	800393a <HAL_RCC_ClockConfig+0x332>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d003      	beq.n	8003630 <HAL_RCC_ClockConfig+0x28>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	2b0f      	cmp	r3, #15
 800362e:	d904      	bls.n	800363a <HAL_RCC_ClockConfig+0x32>
 8003630:	f240 21dd 	movw	r1, #733	; 0x2dd
 8003634:	4887      	ldr	r0, [pc, #540]	; (8003854 <HAL_RCC_ClockConfig+0x24c>)
 8003636:	f7fd ffc0 	bl	80015ba <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d031      	beq.n	80036a4 <HAL_RCC_ClockConfig+0x9c>
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	2b01      	cmp	r3, #1
 8003644:	d02e      	beq.n	80036a4 <HAL_RCC_ClockConfig+0x9c>
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	2b02      	cmp	r3, #2
 800364a:	d02b      	beq.n	80036a4 <HAL_RCC_ClockConfig+0x9c>
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	2b03      	cmp	r3, #3
 8003650:	d028      	beq.n	80036a4 <HAL_RCC_ClockConfig+0x9c>
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	2b04      	cmp	r3, #4
 8003656:	d025      	beq.n	80036a4 <HAL_RCC_ClockConfig+0x9c>
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	2b05      	cmp	r3, #5
 800365c:	d022      	beq.n	80036a4 <HAL_RCC_ClockConfig+0x9c>
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	2b06      	cmp	r3, #6
 8003662:	d01f      	beq.n	80036a4 <HAL_RCC_ClockConfig+0x9c>
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	2b07      	cmp	r3, #7
 8003668:	d01c      	beq.n	80036a4 <HAL_RCC_ClockConfig+0x9c>
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	2b08      	cmp	r3, #8
 800366e:	d019      	beq.n	80036a4 <HAL_RCC_ClockConfig+0x9c>
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	2b09      	cmp	r3, #9
 8003674:	d016      	beq.n	80036a4 <HAL_RCC_ClockConfig+0x9c>
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	2b0a      	cmp	r3, #10
 800367a:	d013      	beq.n	80036a4 <HAL_RCC_ClockConfig+0x9c>
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	2b0b      	cmp	r3, #11
 8003680:	d010      	beq.n	80036a4 <HAL_RCC_ClockConfig+0x9c>
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	2b0c      	cmp	r3, #12
 8003686:	d00d      	beq.n	80036a4 <HAL_RCC_ClockConfig+0x9c>
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	2b0d      	cmp	r3, #13
 800368c:	d00a      	beq.n	80036a4 <HAL_RCC_ClockConfig+0x9c>
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	2b0e      	cmp	r3, #14
 8003692:	d007      	beq.n	80036a4 <HAL_RCC_ClockConfig+0x9c>
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	2b0f      	cmp	r3, #15
 8003698:	d004      	beq.n	80036a4 <HAL_RCC_ClockConfig+0x9c>
 800369a:	f240 21de 	movw	r1, #734	; 0x2de
 800369e:	486d      	ldr	r0, [pc, #436]	; (8003854 <HAL_RCC_ClockConfig+0x24c>)
 80036a0:	f7fd ff8b 	bl	80015ba <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80036a4:	4b6c      	ldr	r3, [pc, #432]	; (8003858 <HAL_RCC_ClockConfig+0x250>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f003 030f 	and.w	r3, r3, #15
 80036ac:	683a      	ldr	r2, [r7, #0]
 80036ae:	429a      	cmp	r2, r3
 80036b0:	d910      	bls.n	80036d4 <HAL_RCC_ClockConfig+0xcc>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036b2:	4b69      	ldr	r3, [pc, #420]	; (8003858 <HAL_RCC_ClockConfig+0x250>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f023 020f 	bic.w	r2, r3, #15
 80036ba:	4967      	ldr	r1, [pc, #412]	; (8003858 <HAL_RCC_ClockConfig+0x250>)
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	4313      	orrs	r3, r2
 80036c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036c2:	4b65      	ldr	r3, [pc, #404]	; (8003858 <HAL_RCC_ClockConfig+0x250>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 030f 	and.w	r3, r3, #15
 80036ca:	683a      	ldr	r2, [r7, #0]
 80036cc:	429a      	cmp	r2, r3
 80036ce:	d001      	beq.n	80036d4 <HAL_RCC_ClockConfig+0xcc>
    {
      return HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	e132      	b.n	800393a <HAL_RCC_ClockConfig+0x332>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f003 0302 	and.w	r3, r3, #2
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d049      	beq.n	8003774 <HAL_RCC_ClockConfig+0x16c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f003 0304 	and.w	r3, r3, #4
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d005      	beq.n	80036f8 <HAL_RCC_ClockConfig+0xf0>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80036ec:	4b5b      	ldr	r3, [pc, #364]	; (800385c <HAL_RCC_ClockConfig+0x254>)
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	4a5a      	ldr	r2, [pc, #360]	; (800385c <HAL_RCC_ClockConfig+0x254>)
 80036f2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80036f6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f003 0308 	and.w	r3, r3, #8
 8003700:	2b00      	cmp	r3, #0
 8003702:	d005      	beq.n	8003710 <HAL_RCC_ClockConfig+0x108>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003704:	4b55      	ldr	r3, [pc, #340]	; (800385c <HAL_RCC_ClockConfig+0x254>)
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	4a54      	ldr	r2, [pc, #336]	; (800385c <HAL_RCC_ClockConfig+0x254>)
 800370a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800370e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d024      	beq.n	8003762 <HAL_RCC_ClockConfig+0x15a>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	2b80      	cmp	r3, #128	; 0x80
 800371e:	d020      	beq.n	8003762 <HAL_RCC_ClockConfig+0x15a>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	2b90      	cmp	r3, #144	; 0x90
 8003726:	d01c      	beq.n	8003762 <HAL_RCC_ClockConfig+0x15a>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	2ba0      	cmp	r3, #160	; 0xa0
 800372e:	d018      	beq.n	8003762 <HAL_RCC_ClockConfig+0x15a>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	2bb0      	cmp	r3, #176	; 0xb0
 8003736:	d014      	beq.n	8003762 <HAL_RCC_ClockConfig+0x15a>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	689b      	ldr	r3, [r3, #8]
 800373c:	2bc0      	cmp	r3, #192	; 0xc0
 800373e:	d010      	beq.n	8003762 <HAL_RCC_ClockConfig+0x15a>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	2bd0      	cmp	r3, #208	; 0xd0
 8003746:	d00c      	beq.n	8003762 <HAL_RCC_ClockConfig+0x15a>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	2be0      	cmp	r3, #224	; 0xe0
 800374e:	d008      	beq.n	8003762 <HAL_RCC_ClockConfig+0x15a>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	2bf0      	cmp	r3, #240	; 0xf0
 8003756:	d004      	beq.n	8003762 <HAL_RCC_ClockConfig+0x15a>
 8003758:	f240 3102 	movw	r1, #770	; 0x302
 800375c:	483d      	ldr	r0, [pc, #244]	; (8003854 <HAL_RCC_ClockConfig+0x24c>)
 800375e:	f7fd ff2c 	bl	80015ba <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003762:	4b3e      	ldr	r3, [pc, #248]	; (800385c <HAL_RCC_ClockConfig+0x254>)
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	493b      	ldr	r1, [pc, #236]	; (800385c <HAL_RCC_ClockConfig+0x254>)
 8003770:	4313      	orrs	r3, r2
 8003772:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 0301 	and.w	r3, r3, #1
 800377c:	2b00      	cmp	r3, #0
 800377e:	d051      	beq.n	8003824 <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d00c      	beq.n	80037a2 <HAL_RCC_ClockConfig+0x19a>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	2b01      	cmp	r3, #1
 800378e:	d008      	beq.n	80037a2 <HAL_RCC_ClockConfig+0x19a>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	2b02      	cmp	r3, #2
 8003796:	d004      	beq.n	80037a2 <HAL_RCC_ClockConfig+0x19a>
 8003798:	f240 3109 	movw	r1, #777	; 0x309
 800379c:	482d      	ldr	r0, [pc, #180]	; (8003854 <HAL_RCC_ClockConfig+0x24c>)
 800379e:	f7fd ff0c 	bl	80015ba <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	2b01      	cmp	r3, #1
 80037a8:	d107      	bne.n	80037ba <HAL_RCC_ClockConfig+0x1b2>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037aa:	4b2c      	ldr	r3, [pc, #176]	; (800385c <HAL_RCC_ClockConfig+0x254>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d115      	bne.n	80037e2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	e0bf      	b.n	800393a <HAL_RCC_ClockConfig+0x332>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	2b02      	cmp	r3, #2
 80037c0:	d107      	bne.n	80037d2 <HAL_RCC_ClockConfig+0x1ca>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037c2:	4b26      	ldr	r3, [pc, #152]	; (800385c <HAL_RCC_ClockConfig+0x254>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d109      	bne.n	80037e2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	e0b3      	b.n	800393a <HAL_RCC_ClockConfig+0x332>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037d2:	4b22      	ldr	r3, [pc, #136]	; (800385c <HAL_RCC_ClockConfig+0x254>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 0302 	and.w	r3, r3, #2
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d101      	bne.n	80037e2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	e0ab      	b.n	800393a <HAL_RCC_ClockConfig+0x332>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037e2:	4b1e      	ldr	r3, [pc, #120]	; (800385c <HAL_RCC_ClockConfig+0x254>)
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	f023 0203 	bic.w	r2, r3, #3
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	491b      	ldr	r1, [pc, #108]	; (800385c <HAL_RCC_ClockConfig+0x254>)
 80037f0:	4313      	orrs	r3, r2
 80037f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037f4:	f7fe fbb4 	bl	8001f60 <HAL_GetTick>
 80037f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037fa:	e00a      	b.n	8003812 <HAL_RCC_ClockConfig+0x20a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037fc:	f7fe fbb0 	bl	8001f60 <HAL_GetTick>
 8003800:	4602      	mov	r2, r0
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	1ad3      	subs	r3, r2, r3
 8003806:	f241 3288 	movw	r2, #5000	; 0x1388
 800380a:	4293      	cmp	r3, r2
 800380c:	d901      	bls.n	8003812 <HAL_RCC_ClockConfig+0x20a>
      {
        return HAL_TIMEOUT;
 800380e:	2303      	movs	r3, #3
 8003810:	e093      	b.n	800393a <HAL_RCC_ClockConfig+0x332>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003812:	4b12      	ldr	r3, [pc, #72]	; (800385c <HAL_RCC_ClockConfig+0x254>)
 8003814:	689b      	ldr	r3, [r3, #8]
 8003816:	f003 020c 	and.w	r2, r3, #12
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	009b      	lsls	r3, r3, #2
 8003820:	429a      	cmp	r2, r3
 8003822:	d1eb      	bne.n	80037fc <HAL_RCC_ClockConfig+0x1f4>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003824:	4b0c      	ldr	r3, [pc, #48]	; (8003858 <HAL_RCC_ClockConfig+0x250>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f003 030f 	and.w	r3, r3, #15
 800382c:	683a      	ldr	r2, [r7, #0]
 800382e:	429a      	cmp	r2, r3
 8003830:	d216      	bcs.n	8003860 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003832:	4b09      	ldr	r3, [pc, #36]	; (8003858 <HAL_RCC_ClockConfig+0x250>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f023 020f 	bic.w	r2, r3, #15
 800383a:	4907      	ldr	r1, [pc, #28]	; (8003858 <HAL_RCC_ClockConfig+0x250>)
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	4313      	orrs	r3, r2
 8003840:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003842:	4b05      	ldr	r3, [pc, #20]	; (8003858 <HAL_RCC_ClockConfig+0x250>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f003 030f 	and.w	r3, r3, #15
 800384a:	683a      	ldr	r2, [r7, #0]
 800384c:	429a      	cmp	r2, r3
 800384e:	d007      	beq.n	8003860 <HAL_RCC_ClockConfig+0x258>
    {
      return HAL_ERROR;
 8003850:	2301      	movs	r3, #1
 8003852:	e072      	b.n	800393a <HAL_RCC_ClockConfig+0x332>
 8003854:	0800d9ac 	.word	0x0800d9ac
 8003858:	40023c00 	.word	0x40023c00
 800385c:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f003 0304 	and.w	r3, r3, #4
 8003868:	2b00      	cmp	r3, #0
 800386a:	d025      	beq.n	80038b8 <HAL_RCC_ClockConfig+0x2b0>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	68db      	ldr	r3, [r3, #12]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d018      	beq.n	80038a6 <HAL_RCC_ClockConfig+0x29e>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	68db      	ldr	r3, [r3, #12]
 8003878:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800387c:	d013      	beq.n	80038a6 <HAL_RCC_ClockConfig+0x29e>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	68db      	ldr	r3, [r3, #12]
 8003882:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003886:	d00e      	beq.n	80038a6 <HAL_RCC_ClockConfig+0x29e>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	68db      	ldr	r3, [r3, #12]
 800388c:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8003890:	d009      	beq.n	80038a6 <HAL_RCC_ClockConfig+0x29e>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	68db      	ldr	r3, [r3, #12]
 8003896:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 800389a:	d004      	beq.n	80038a6 <HAL_RCC_ClockConfig+0x29e>
 800389c:	f240 3146 	movw	r1, #838	; 0x346
 80038a0:	4828      	ldr	r0, [pc, #160]	; (8003944 <HAL_RCC_ClockConfig+0x33c>)
 80038a2:	f7fd fe8a 	bl	80015ba <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038a6:	4b28      	ldr	r3, [pc, #160]	; (8003948 <HAL_RCC_ClockConfig+0x340>)
 80038a8:	689b      	ldr	r3, [r3, #8]
 80038aa:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	68db      	ldr	r3, [r3, #12]
 80038b2:	4925      	ldr	r1, [pc, #148]	; (8003948 <HAL_RCC_ClockConfig+0x340>)
 80038b4:	4313      	orrs	r3, r2
 80038b6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f003 0308 	and.w	r3, r3, #8
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d026      	beq.n	8003912 <HAL_RCC_ClockConfig+0x30a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	691b      	ldr	r3, [r3, #16]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d018      	beq.n	80038fe <HAL_RCC_ClockConfig+0x2f6>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	691b      	ldr	r3, [r3, #16]
 80038d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038d4:	d013      	beq.n	80038fe <HAL_RCC_ClockConfig+0x2f6>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	691b      	ldr	r3, [r3, #16]
 80038da:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80038de:	d00e      	beq.n	80038fe <HAL_RCC_ClockConfig+0x2f6>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	691b      	ldr	r3, [r3, #16]
 80038e4:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80038e8:	d009      	beq.n	80038fe <HAL_RCC_ClockConfig+0x2f6>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	691b      	ldr	r3, [r3, #16]
 80038ee:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 80038f2:	d004      	beq.n	80038fe <HAL_RCC_ClockConfig+0x2f6>
 80038f4:	f240 314d 	movw	r1, #845	; 0x34d
 80038f8:	4812      	ldr	r0, [pc, #72]	; (8003944 <HAL_RCC_ClockConfig+0x33c>)
 80038fa:	f7fd fe5e 	bl	80015ba <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80038fe:	4b12      	ldr	r3, [pc, #72]	; (8003948 <HAL_RCC_ClockConfig+0x340>)
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	691b      	ldr	r3, [r3, #16]
 800390a:	00db      	lsls	r3, r3, #3
 800390c:	490e      	ldr	r1, [pc, #56]	; (8003948 <HAL_RCC_ClockConfig+0x340>)
 800390e:	4313      	orrs	r3, r2
 8003910:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003912:	f000 f821 	bl	8003958 <HAL_RCC_GetSysClockFreq>
 8003916:	4602      	mov	r2, r0
 8003918:	4b0b      	ldr	r3, [pc, #44]	; (8003948 <HAL_RCC_ClockConfig+0x340>)
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	091b      	lsrs	r3, r3, #4
 800391e:	f003 030f 	and.w	r3, r3, #15
 8003922:	490a      	ldr	r1, [pc, #40]	; (800394c <HAL_RCC_ClockConfig+0x344>)
 8003924:	5ccb      	ldrb	r3, [r1, r3]
 8003926:	fa22 f303 	lsr.w	r3, r2, r3
 800392a:	4a09      	ldr	r2, [pc, #36]	; (8003950 <HAL_RCC_ClockConfig+0x348>)
 800392c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800392e:	4b09      	ldr	r3, [pc, #36]	; (8003954 <HAL_RCC_ClockConfig+0x34c>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4618      	mov	r0, r3
 8003934:	f7fe fad0 	bl	8001ed8 <HAL_InitTick>

  return HAL_OK;
 8003938:	2300      	movs	r3, #0
}
 800393a:	4618      	mov	r0, r3
 800393c:	3710      	adds	r7, #16
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}
 8003942:	bf00      	nop
 8003944:	0800d9ac 	.word	0x0800d9ac
 8003948:	40023800 	.word	0x40023800
 800394c:	0800dadc 	.word	0x0800dadc
 8003950:	20000000 	.word	0x20000000
 8003954:	20000004 	.word	0x20000004

08003958 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003958:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800395c:	b090      	sub	sp, #64	; 0x40
 800395e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003960:	2300      	movs	r3, #0
 8003962:	637b      	str	r3, [r7, #52]	; 0x34
 8003964:	2300      	movs	r3, #0
 8003966:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003968:	2300      	movs	r3, #0
 800396a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 800396c:	2300      	movs	r3, #0
 800396e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003970:	4b59      	ldr	r3, [pc, #356]	; (8003ad8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	f003 030c 	and.w	r3, r3, #12
 8003978:	2b08      	cmp	r3, #8
 800397a:	d00d      	beq.n	8003998 <HAL_RCC_GetSysClockFreq+0x40>
 800397c:	2b08      	cmp	r3, #8
 800397e:	f200 80a1 	bhi.w	8003ac4 <HAL_RCC_GetSysClockFreq+0x16c>
 8003982:	2b00      	cmp	r3, #0
 8003984:	d002      	beq.n	800398c <HAL_RCC_GetSysClockFreq+0x34>
 8003986:	2b04      	cmp	r3, #4
 8003988:	d003      	beq.n	8003992 <HAL_RCC_GetSysClockFreq+0x3a>
 800398a:	e09b      	b.n	8003ac4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800398c:	4b53      	ldr	r3, [pc, #332]	; (8003adc <HAL_RCC_GetSysClockFreq+0x184>)
 800398e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003990:	e09b      	b.n	8003aca <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003992:	4b53      	ldr	r3, [pc, #332]	; (8003ae0 <HAL_RCC_GetSysClockFreq+0x188>)
 8003994:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003996:	e098      	b.n	8003aca <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003998:	4b4f      	ldr	r3, [pc, #316]	; (8003ad8 <HAL_RCC_GetSysClockFreq+0x180>)
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80039a0:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80039a2:	4b4d      	ldr	r3, [pc, #308]	; (8003ad8 <HAL_RCC_GetSysClockFreq+0x180>)
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d028      	beq.n	8003a00 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039ae:	4b4a      	ldr	r3, [pc, #296]	; (8003ad8 <HAL_RCC_GetSysClockFreq+0x180>)
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	099b      	lsrs	r3, r3, #6
 80039b4:	2200      	movs	r2, #0
 80039b6:	623b      	str	r3, [r7, #32]
 80039b8:	627a      	str	r2, [r7, #36]	; 0x24
 80039ba:	6a3b      	ldr	r3, [r7, #32]
 80039bc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80039c0:	2100      	movs	r1, #0
 80039c2:	4b47      	ldr	r3, [pc, #284]	; (8003ae0 <HAL_RCC_GetSysClockFreq+0x188>)
 80039c4:	fb03 f201 	mul.w	r2, r3, r1
 80039c8:	2300      	movs	r3, #0
 80039ca:	fb00 f303 	mul.w	r3, r0, r3
 80039ce:	4413      	add	r3, r2
 80039d0:	4a43      	ldr	r2, [pc, #268]	; (8003ae0 <HAL_RCC_GetSysClockFreq+0x188>)
 80039d2:	fba0 1202 	umull	r1, r2, r0, r2
 80039d6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80039d8:	460a      	mov	r2, r1
 80039da:	62ba      	str	r2, [r7, #40]	; 0x28
 80039dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80039de:	4413      	add	r3, r2
 80039e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80039e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039e4:	2200      	movs	r2, #0
 80039e6:	61bb      	str	r3, [r7, #24]
 80039e8:	61fa      	str	r2, [r7, #28]
 80039ea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80039ee:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80039f2:	f7fd f969 	bl	8000cc8 <__aeabi_uldivmod>
 80039f6:	4602      	mov	r2, r0
 80039f8:	460b      	mov	r3, r1
 80039fa:	4613      	mov	r3, r2
 80039fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80039fe:	e053      	b.n	8003aa8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a00:	4b35      	ldr	r3, [pc, #212]	; (8003ad8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	099b      	lsrs	r3, r3, #6
 8003a06:	2200      	movs	r2, #0
 8003a08:	613b      	str	r3, [r7, #16]
 8003a0a:	617a      	str	r2, [r7, #20]
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003a12:	f04f 0b00 	mov.w	fp, #0
 8003a16:	4652      	mov	r2, sl
 8003a18:	465b      	mov	r3, fp
 8003a1a:	f04f 0000 	mov.w	r0, #0
 8003a1e:	f04f 0100 	mov.w	r1, #0
 8003a22:	0159      	lsls	r1, r3, #5
 8003a24:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a28:	0150      	lsls	r0, r2, #5
 8003a2a:	4602      	mov	r2, r0
 8003a2c:	460b      	mov	r3, r1
 8003a2e:	ebb2 080a 	subs.w	r8, r2, sl
 8003a32:	eb63 090b 	sbc.w	r9, r3, fp
 8003a36:	f04f 0200 	mov.w	r2, #0
 8003a3a:	f04f 0300 	mov.w	r3, #0
 8003a3e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003a42:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003a46:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003a4a:	ebb2 0408 	subs.w	r4, r2, r8
 8003a4e:	eb63 0509 	sbc.w	r5, r3, r9
 8003a52:	f04f 0200 	mov.w	r2, #0
 8003a56:	f04f 0300 	mov.w	r3, #0
 8003a5a:	00eb      	lsls	r3, r5, #3
 8003a5c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a60:	00e2      	lsls	r2, r4, #3
 8003a62:	4614      	mov	r4, r2
 8003a64:	461d      	mov	r5, r3
 8003a66:	eb14 030a 	adds.w	r3, r4, sl
 8003a6a:	603b      	str	r3, [r7, #0]
 8003a6c:	eb45 030b 	adc.w	r3, r5, fp
 8003a70:	607b      	str	r3, [r7, #4]
 8003a72:	f04f 0200 	mov.w	r2, #0
 8003a76:	f04f 0300 	mov.w	r3, #0
 8003a7a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003a7e:	4629      	mov	r1, r5
 8003a80:	028b      	lsls	r3, r1, #10
 8003a82:	4621      	mov	r1, r4
 8003a84:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003a88:	4621      	mov	r1, r4
 8003a8a:	028a      	lsls	r2, r1, #10
 8003a8c:	4610      	mov	r0, r2
 8003a8e:	4619      	mov	r1, r3
 8003a90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a92:	2200      	movs	r2, #0
 8003a94:	60bb      	str	r3, [r7, #8]
 8003a96:	60fa      	str	r2, [r7, #12]
 8003a98:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003a9c:	f7fd f914 	bl	8000cc8 <__aeabi_uldivmod>
 8003aa0:	4602      	mov	r2, r0
 8003aa2:	460b      	mov	r3, r1
 8003aa4:	4613      	mov	r3, r2
 8003aa6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003aa8:	4b0b      	ldr	r3, [pc, #44]	; (8003ad8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	0c1b      	lsrs	r3, r3, #16
 8003aae:	f003 0303 	and.w	r3, r3, #3
 8003ab2:	3301      	adds	r3, #1
 8003ab4:	005b      	lsls	r3, r3, #1
 8003ab6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8003ab8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003abc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ac0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003ac2:	e002      	b.n	8003aca <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ac4:	4b05      	ldr	r3, [pc, #20]	; (8003adc <HAL_RCC_GetSysClockFreq+0x184>)
 8003ac6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003ac8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003aca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	3740      	adds	r7, #64	; 0x40
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ad6:	bf00      	nop
 8003ad8:	40023800 	.word	0x40023800
 8003adc:	00f42400 	.word	0x00f42400
 8003ae0:	017d7840 	.word	0x017d7840

08003ae4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ae8:	4b03      	ldr	r3, [pc, #12]	; (8003af8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003aea:	681b      	ldr	r3, [r3, #0]
}
 8003aec:	4618      	mov	r0, r3
 8003aee:	46bd      	mov	sp, r7
 8003af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af4:	4770      	bx	lr
 8003af6:	bf00      	nop
 8003af8:	20000000 	.word	0x20000000

08003afc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003b00:	f7ff fff0 	bl	8003ae4 <HAL_RCC_GetHCLKFreq>
 8003b04:	4602      	mov	r2, r0
 8003b06:	4b05      	ldr	r3, [pc, #20]	; (8003b1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	0a9b      	lsrs	r3, r3, #10
 8003b0c:	f003 0307 	and.w	r3, r3, #7
 8003b10:	4903      	ldr	r1, [pc, #12]	; (8003b20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b12:	5ccb      	ldrb	r3, [r1, r3]
 8003b14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	bd80      	pop	{r7, pc}
 8003b1c:	40023800 	.word	0x40023800
 8003b20:	0800daec 	.word	0x0800daec

08003b24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003b28:	f7ff ffdc 	bl	8003ae4 <HAL_RCC_GetHCLKFreq>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	4b05      	ldr	r3, [pc, #20]	; (8003b44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	0b5b      	lsrs	r3, r3, #13
 8003b34:	f003 0307 	and.w	r3, r3, #7
 8003b38:	4903      	ldr	r1, [pc, #12]	; (8003b48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b3a:	5ccb      	ldrb	r3, [r1, r3]
 8003b3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	bd80      	pop	{r7, pc}
 8003b44:	40023800 	.word	0x40023800
 8003b48:	0800daec 	.word	0x0800daec

08003b4c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b088      	sub	sp, #32
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003b54:	2300      	movs	r3, #0
 8003b56:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003b60:	2300      	movs	r3, #0
 8003b62:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003b64:	2300      	movs	r3, #0
 8003b66:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f003 0301 	and.w	r3, r3, #1
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	f040 8089 	bne.w	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f003 0308 	and.w	r3, r3, #8
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	f040 8082 	bne.w	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f003 0310 	and.w	r3, r3, #16
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d17b      	bne.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d175      	bne.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d16f      	bne.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d169      	bne.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d163      	bne.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d15d      	bne.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d157      	bne.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d151      	bne.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d14b      	bne.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d145      	bne.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d13f      	bne.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d139      	bne.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d133      	bne.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d12d      	bne.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d127      	bne.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d121      	bne.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d11b      	bne.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d115      	bne.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d10f      	bne.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d109      	bne.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f003 0320 	and.w	r3, r3, #32
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d103      	bne.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003c80:	2172      	movs	r1, #114	; 0x72
 8003c82:	4895      	ldr	r0, [pc, #596]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8003c84:	f7fd fc99 	bl	80015ba <assert_failed>

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f003 0301 	and.w	r3, r3, #1
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d01f      	beq.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d008      	beq.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x162>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ca0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003ca4:	d003      	beq.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x162>
 8003ca6:	2178      	movs	r1, #120	; 0x78
 8003ca8:	488b      	ldr	r0, [pc, #556]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8003caa:	f7fd fc86 	bl	80015ba <assert_failed>

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003cae:	4b8b      	ldr	r3, [pc, #556]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	4a8a      	ldr	r2, [pc, #552]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8003cb4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003cb8:	6093      	str	r3, [r2, #8]
 8003cba:	4b88      	ldr	r3, [pc, #544]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8003cbc:	689a      	ldr	r2, [r3, #8]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cc2:	4986      	ldr	r1, [pc, #536]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d101      	bne.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x188>
    {
      plli2sused = 1;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d029      	beq.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d00d      	beq.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003cf0:	d008      	beq.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cf6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003cfa:	d003      	beq.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8003cfc:	2188      	movs	r1, #136	; 0x88
 8003cfe:	4876      	ldr	r0, [pc, #472]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8003d00:	f7fd fc5b 	bl	80015ba <assert_failed>

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003d04:	4b75      	ldr	r3, [pc, #468]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8003d06:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d0a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d12:	4972      	ldr	r1, [pc, #456]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8003d14:	4313      	orrs	r3, r2
 8003d16:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d22:	d101      	bne.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      plli2sused = 1;
 8003d24:	2301      	movs	r3, #1
 8003d26:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d101      	bne.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
    {
      pllsaiused = 1;
 8003d30:	2301      	movs	r3, #1
 8003d32:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d029      	beq.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d00d      	beq.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d4c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d50:	d008      	beq.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d56:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003d5a:	d003      	beq.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8003d5c:	219c      	movs	r1, #156	; 0x9c
 8003d5e:	485e      	ldr	r0, [pc, #376]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8003d60:	f7fd fc2b 	bl	80015ba <assert_failed>

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003d64:	4b5d      	ldr	r3, [pc, #372]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8003d66:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d6a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d72:	495a      	ldr	r1, [pc, #360]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8003d74:	4313      	orrs	r3, r2
 8003d76:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d7e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d82:	d101      	bne.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      plli2sused = 1;
 8003d84:	2301      	movs	r3, #1
 8003d86:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d101      	bne.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      pllsaiused = 1;
 8003d90:	2301      	movs	r3, #1
 8003d92:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d001      	beq.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
      plli2sused = 1;
 8003da0:	2301      	movs	r3, #1
 8003da2:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f003 0320 	and.w	r3, r3, #32
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	f000 8186 	beq.w	80040be <HAL_RCCEx_PeriphCLKConfig+0x572>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003db6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003dba:	f000 80e4 	beq.w	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dc2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003dc6:	f000 80de 	beq.w	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dce:	4a44      	ldr	r2, [pc, #272]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x394>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	f000 80d8 	beq.w	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dda:	4a42      	ldr	r2, [pc, #264]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x398>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	f000 80d2 	beq.w	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003de6:	4a40      	ldr	r2, [pc, #256]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	f000 80cc 	beq.w	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003df2:	4a3e      	ldr	r2, [pc, #248]	; (8003eec <HAL_RCCEx_PeriphCLKConfig+0x3a0>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	f000 80c6 	beq.w	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dfe:	4a3c      	ldr	r2, [pc, #240]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	f000 80c0 	beq.w	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e0a:	4a3a      	ldr	r2, [pc, #232]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	f000 80ba 	beq.w	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e16:	4a38      	ldr	r2, [pc, #224]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	f000 80b4 	beq.w	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e22:	4a36      	ldr	r2, [pc, #216]	; (8003efc <HAL_RCCEx_PeriphCLKConfig+0x3b0>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	f000 80ae 	beq.w	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e2e:	4a34      	ldr	r2, [pc, #208]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x3b4>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	f000 80a8 	beq.w	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e3a:	4a32      	ldr	r2, [pc, #200]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x3b8>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	f000 80a2 	beq.w	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e46:	4a30      	ldr	r2, [pc, #192]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x3bc>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	f000 809c 	beq.w	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e52:	4a2e      	ldr	r2, [pc, #184]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x3c0>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	f000 8096 	beq.w	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e5e:	4a2c      	ldr	r2, [pc, #176]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x3c4>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	f000 8090 	beq.w	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e6a:	4a2a      	ldr	r2, [pc, #168]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x3c8>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	f000 808a 	beq.w	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e76:	4a28      	ldr	r2, [pc, #160]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	f000 8084 	beq.w	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e82:	4a26      	ldr	r2, [pc, #152]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d07e      	beq.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e8c:	4a24      	ldr	r2, [pc, #144]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d079      	beq.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e96:	4a23      	ldr	r2, [pc, #140]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x3d8>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d074      	beq.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ea0:	4a21      	ldr	r2, [pc, #132]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d06f      	beq.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eaa:	4a20      	ldr	r2, [pc, #128]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d06a      	beq.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eb4:	4a1e      	ldr	r2, [pc, #120]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d065      	beq.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ebe:	4a1d      	ldr	r2, [pc, #116]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d060      	beq.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ec8:	4a1b      	ldr	r2, [pc, #108]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d05b      	beq.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ed2:	4a1a      	ldr	r2, [pc, #104]	; (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	e033      	b.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8003ed8:	0800d9e4 	.word	0x0800d9e4
 8003edc:	40023800 	.word	0x40023800
 8003ee0:	00020300 	.word	0x00020300
 8003ee4:	00030300 	.word	0x00030300
 8003ee8:	00040300 	.word	0x00040300
 8003eec:	00050300 	.word	0x00050300
 8003ef0:	00060300 	.word	0x00060300
 8003ef4:	00070300 	.word	0x00070300
 8003ef8:	00080300 	.word	0x00080300
 8003efc:	00090300 	.word	0x00090300
 8003f00:	000a0300 	.word	0x000a0300
 8003f04:	000b0300 	.word	0x000b0300
 8003f08:	000c0300 	.word	0x000c0300
 8003f0c:	000d0300 	.word	0x000d0300
 8003f10:	000e0300 	.word	0x000e0300
 8003f14:	000f0300 	.word	0x000f0300
 8003f18:	00100300 	.word	0x00100300
 8003f1c:	00110300 	.word	0x00110300
 8003f20:	00120300 	.word	0x00120300
 8003f24:	00130300 	.word	0x00130300
 8003f28:	00140300 	.word	0x00140300
 8003f2c:	00150300 	.word	0x00150300
 8003f30:	00160300 	.word	0x00160300
 8003f34:	00170300 	.word	0x00170300
 8003f38:	00180300 	.word	0x00180300
 8003f3c:	00190300 	.word	0x00190300
 8003f40:	d021      	beq.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f46:	4a4c      	ldr	r2, [pc, #304]	; (8004078 <HAL_RCCEx_PeriphCLKConfig+0x52c>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d01c      	beq.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f50:	4a4a      	ldr	r2, [pc, #296]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x530>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d017      	beq.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f5a:	4a49      	ldr	r2, [pc, #292]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x534>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d012      	beq.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f64:	4a47      	ldr	r2, [pc, #284]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d00d      	beq.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f6e:	4a46      	ldr	r2, [pc, #280]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d008      	beq.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f78:	4a44      	ldr	r2, [pc, #272]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d003      	beq.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8003f7e:	21b7      	movs	r1, #183	; 0xb7
 8003f80:	4843      	ldr	r0, [pc, #268]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x544>)
 8003f82:	f7fd fb1a 	bl	80015ba <assert_failed>

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003f86:	4b43      	ldr	r3, [pc, #268]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f8a:	4a42      	ldr	r2, [pc, #264]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003f8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f90:	6413      	str	r3, [r2, #64]	; 0x40
 8003f92:	4b40      	ldr	r3, [pc, #256]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f9a:	60bb      	str	r3, [r7, #8]
 8003f9c:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003f9e:	4b3e      	ldr	r3, [pc, #248]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a3d      	ldr	r2, [pc, #244]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 8003fa4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fa8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003faa:	f7fd ffd9 	bl	8001f60 <HAL_GetTick>
 8003fae:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003fb0:	e009      	b.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x47a>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fb2:	f7fd ffd5 	bl	8001f60 <HAL_GetTick>
 8003fb6:	4602      	mov	r2, r0
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	1ad3      	subs	r3, r2, r3
 8003fbc:	2b64      	cmp	r3, #100	; 0x64
 8003fbe:	d902      	bls.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x47a>
      {
        return HAL_TIMEOUT;
 8003fc0:	2303      	movs	r3, #3
 8003fc2:	f000 bd9f 	b.w	8004b04 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003fc6:	4b34      	ldr	r3, [pc, #208]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d0ef      	beq.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0x466>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003fd2:	4b30      	ldr	r3, [pc, #192]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003fd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fda:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003fdc:	693b      	ldr	r3, [r7, #16]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d036      	beq.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fe6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fea:	693a      	ldr	r2, [r7, #16]
 8003fec:	429a      	cmp	r2, r3
 8003fee:	d02f      	beq.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003ff0:	4b28      	ldr	r3, [pc, #160]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003ff2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ff4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ff8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003ffa:	4b26      	ldr	r3, [pc, #152]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003ffc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ffe:	4a25      	ldr	r2, [pc, #148]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004000:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004004:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004006:	4b23      	ldr	r3, [pc, #140]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004008:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800400a:	4a22      	ldr	r2, [pc, #136]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800400c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004010:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004012:	4a20      	ldr	r2, [pc, #128]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004014:	693b      	ldr	r3, [r7, #16]
 8004016:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004018:	4b1e      	ldr	r3, [pc, #120]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800401a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800401c:	f003 0301 	and.w	r3, r3, #1
 8004020:	2b01      	cmp	r3, #1
 8004022:	d115      	bne.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0x504>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004024:	f7fd ff9c 	bl	8001f60 <HAL_GetTick>
 8004028:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800402a:	e00b      	b.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800402c:	f7fd ff98 	bl	8001f60 <HAL_GetTick>
 8004030:	4602      	mov	r2, r0
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	1ad3      	subs	r3, r2, r3
 8004036:	f241 3288 	movw	r2, #5000	; 0x1388
 800403a:	4293      	cmp	r3, r2
 800403c:	d902      	bls.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 800403e:	2303      	movs	r3, #3
 8004040:	f000 bd60 	b.w	8004b04 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004044:	4b13      	ldr	r3, [pc, #76]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004046:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004048:	f003 0302 	and.w	r3, r3, #2
 800404c:	2b00      	cmp	r3, #0
 800404e:	d0ed      	beq.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004054:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004058:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800405c:	d120      	bne.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x554>
 800405e:	4b0d      	ldr	r3, [pc, #52]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004060:	689b      	ldr	r3, [r3, #8]
 8004062:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800406a:	4b0c      	ldr	r3, [pc, #48]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x550>)
 800406c:	400b      	ands	r3, r1
 800406e:	4909      	ldr	r1, [pc, #36]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004070:	4313      	orrs	r3, r2
 8004072:	608b      	str	r3, [r1, #8]
 8004074:	e01a      	b.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0x560>
 8004076:	bf00      	nop
 8004078:	001a0300 	.word	0x001a0300
 800407c:	001b0300 	.word	0x001b0300
 8004080:	001c0300 	.word	0x001c0300
 8004084:	001d0300 	.word	0x001d0300
 8004088:	001e0300 	.word	0x001e0300
 800408c:	001f0300 	.word	0x001f0300
 8004090:	0800d9e4 	.word	0x0800d9e4
 8004094:	40023800 	.word	0x40023800
 8004098:	40007000 	.word	0x40007000
 800409c:	0ffffcff 	.word	0x0ffffcff
 80040a0:	4b9a      	ldr	r3, [pc, #616]	; (800430c <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	4a99      	ldr	r2, [pc, #612]	; (800430c <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 80040a6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80040aa:	6093      	str	r3, [r2, #8]
 80040ac:	4b97      	ldr	r3, [pc, #604]	; (800430c <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 80040ae:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040b8:	4994      	ldr	r1, [pc, #592]	; (800430c <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 80040ba:	4313      	orrs	r3, r2
 80040bc:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f003 0310 	and.w	r3, r3, #16
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d01d      	beq.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d008      	beq.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x598>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040d6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80040da:	d003      	beq.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x598>
 80040dc:	21f1      	movs	r1, #241	; 0xf1
 80040de:	488c      	ldr	r0, [pc, #560]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 80040e0:	f7fd fa6b 	bl	80015ba <assert_failed>

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80040e4:	4b89      	ldr	r3, [pc, #548]	; (800430c <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 80040e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040ea:	4a88      	ldr	r2, [pc, #544]	; (800430c <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 80040ec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80040f0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80040f4:	4b85      	ldr	r3, [pc, #532]	; (800430c <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 80040f6:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040fe:	4983      	ldr	r1, [pc, #524]	; (800430c <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004100:	4313      	orrs	r3, r2
 8004102:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800410e:	2b00      	cmp	r3, #0
 8004110:	d01c      	beq.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x600>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004116:	2b00      	cmp	r3, #0
 8004118:	d00d      	beq.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0x5ea>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800411e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004122:	d008      	beq.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0x5ea>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004128:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800412c:	d003      	beq.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0x5ea>
 800412e:	21fb      	movs	r1, #251	; 0xfb
 8004130:	4877      	ldr	r0, [pc, #476]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8004132:	f7fd fa42 	bl	80015ba <assert_failed>

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004136:	4b75      	ldr	r3, [pc, #468]	; (800430c <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004138:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800413c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004144:	4971      	ldr	r1, [pc, #452]	; (800430c <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004146:	4313      	orrs	r3, r2
 8004148:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004154:	2b00      	cmp	r3, #0
 8004156:	d01d      	beq.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x648>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800415c:	2b00      	cmp	r3, #0
 800415e:	d00e      	beq.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x632>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004164:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004168:	d009      	beq.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x632>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800416e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004172:	d004      	beq.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x632>
 8004174:	f240 1105 	movw	r1, #261	; 0x105
 8004178:	4865      	ldr	r0, [pc, #404]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 800417a:	f7fd fa1e 	bl	80015ba <assert_failed>

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800417e:	4b63      	ldr	r3, [pc, #396]	; (800430c <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004180:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004184:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800418c:	495f      	ldr	r1, [pc, #380]	; (800430c <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 800418e:	4313      	orrs	r3, r2
 8004190:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800419c:	2b00      	cmp	r3, #0
 800419e:	d01d      	beq.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x690>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d00e      	beq.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x67a>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80041b0:	d009      	beq.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x67a>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041b6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80041ba:	d004      	beq.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x67a>
 80041bc:	f240 110f 	movw	r1, #271	; 0x10f
 80041c0:	4853      	ldr	r0, [pc, #332]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 80041c2:	f7fd f9fa 	bl	80015ba <assert_failed>

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80041c6:	4b51      	ldr	r3, [pc, #324]	; (800430c <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 80041c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041cc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041d4:	494d      	ldr	r1, [pc, #308]	; (800430c <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 80041d6:	4313      	orrs	r3, r2
 80041d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d01d      	beq.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d00e      	beq.n	800420e <HAL_RCCEx_PeriphCLKConfig+0x6c2>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041f8:	d009      	beq.n	800420e <HAL_RCCEx_PeriphCLKConfig+0x6c2>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041fe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004202:	d004      	beq.n	800420e <HAL_RCCEx_PeriphCLKConfig+0x6c2>
 8004204:	f240 1119 	movw	r1, #281	; 0x119
 8004208:	4841      	ldr	r0, [pc, #260]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 800420a:	f7fd f9d6 	bl	80015ba <assert_failed>

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800420e:	4b3f      	ldr	r3, [pc, #252]	; (800430c <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004210:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004214:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800421c:	493b      	ldr	r1, [pc, #236]	; (800430c <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 800421e:	4313      	orrs	r3, r2
 8004220:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800422c:	2b00      	cmp	r3, #0
 800422e:	d01f      	beq.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x724>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004234:	2b00      	cmp	r3, #0
 8004236:	d010      	beq.n	800425a <HAL_RCCEx_PeriphCLKConfig+0x70e>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800423c:	2b01      	cmp	r3, #1
 800423e:	d00c      	beq.n	800425a <HAL_RCCEx_PeriphCLKConfig+0x70e>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004244:	2b03      	cmp	r3, #3
 8004246:	d008      	beq.n	800425a <HAL_RCCEx_PeriphCLKConfig+0x70e>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800424c:	2b02      	cmp	r3, #2
 800424e:	d004      	beq.n	800425a <HAL_RCCEx_PeriphCLKConfig+0x70e>
 8004250:	f240 1123 	movw	r1, #291	; 0x123
 8004254:	482e      	ldr	r0, [pc, #184]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8004256:	f7fd f9b0 	bl	80015ba <assert_failed>

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800425a:	4b2c      	ldr	r3, [pc, #176]	; (800430c <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 800425c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004260:	f023 0203 	bic.w	r2, r3, #3
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004268:	4928      	ldr	r1, [pc, #160]	; (800430c <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 800426a:	4313      	orrs	r3, r2
 800426c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004278:	2b00      	cmp	r3, #0
 800427a:	d01f      	beq.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x770>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004280:	2b00      	cmp	r3, #0
 8004282:	d010      	beq.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0x75a>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004288:	2b04      	cmp	r3, #4
 800428a:	d00c      	beq.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0x75a>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004290:	2b0c      	cmp	r3, #12
 8004292:	d008      	beq.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0x75a>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004298:	2b08      	cmp	r3, #8
 800429a:	d004      	beq.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0x75a>
 800429c:	f240 112d 	movw	r1, #301	; 0x12d
 80042a0:	481b      	ldr	r0, [pc, #108]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 80042a2:	f7fd f98a 	bl	80015ba <assert_failed>

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80042a6:	4b19      	ldr	r3, [pc, #100]	; (800430c <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 80042a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042ac:	f023 020c 	bic.w	r2, r3, #12
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042b4:	4915      	ldr	r1, [pc, #84]	; (800430c <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 80042b6:	4313      	orrs	r3, r2
 80042b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d025      	beq.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d010      	beq.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042d4:	2b10      	cmp	r3, #16
 80042d6:	d00c      	beq.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042dc:	2b30      	cmp	r3, #48	; 0x30
 80042de:	d008      	beq.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042e4:	2b20      	cmp	r3, #32
 80042e6:	d004      	beq.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
 80042e8:	f240 1137 	movw	r1, #311	; 0x137
 80042ec:	4808      	ldr	r0, [pc, #32]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 80042ee:	f7fd f964 	bl	80015ba <assert_failed>

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80042f2:	4b06      	ldr	r3, [pc, #24]	; (800430c <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 80042f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042f8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004300:	4902      	ldr	r1, [pc, #8]	; (800430c <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004302:	4313      	orrs	r3, r2
 8004304:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004308:	e004      	b.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
 800430a:	bf00      	nop
 800430c:	40023800 	.word	0x40023800
 8004310:	0800d9e4 	.word	0x0800d9e4
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800431c:	2b00      	cmp	r3, #0
 800431e:	d01f      	beq.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x814>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004324:	2b00      	cmp	r3, #0
 8004326:	d010      	beq.n	800434a <HAL_RCCEx_PeriphCLKConfig+0x7fe>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800432c:	2b40      	cmp	r3, #64	; 0x40
 800432e:	d00c      	beq.n	800434a <HAL_RCCEx_PeriphCLKConfig+0x7fe>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004334:	2bc0      	cmp	r3, #192	; 0xc0
 8004336:	d008      	beq.n	800434a <HAL_RCCEx_PeriphCLKConfig+0x7fe>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800433c:	2b80      	cmp	r3, #128	; 0x80
 800433e:	d004      	beq.n	800434a <HAL_RCCEx_PeriphCLKConfig+0x7fe>
 8004340:	f240 1141 	movw	r1, #321	; 0x141
 8004344:	48a0      	ldr	r0, [pc, #640]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8004346:	f7fd f938 	bl	80015ba <assert_failed>

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800434a:	4ba0      	ldr	r3, [pc, #640]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 800434c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004350:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004358:	499c      	ldr	r1, [pc, #624]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 800435a:	4313      	orrs	r3, r2
 800435c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004368:	2b00      	cmp	r3, #0
 800436a:	d022      	beq.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x866>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004370:	2b00      	cmp	r3, #0
 8004372:	d013      	beq.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x850>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004378:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800437c:	d00e      	beq.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x850>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004382:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004386:	d009      	beq.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x850>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800438c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004390:	d004      	beq.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x850>
 8004392:	f240 114b 	movw	r1, #331	; 0x14b
 8004396:	488c      	ldr	r0, [pc, #560]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8004398:	f7fd f90f 	bl	80015ba <assert_failed>

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800439c:	4b8b      	ldr	r3, [pc, #556]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 800439e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043a2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043aa:	4988      	ldr	r1, [pc, #544]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 80043ac:	4313      	orrs	r3, r2
 80043ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d022      	beq.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d013      	beq.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043ce:	d00e      	beq.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043d4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80043d8:	d009      	beq.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043e2:	d004      	beq.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 80043e4:	f240 1155 	movw	r1, #341	; 0x155
 80043e8:	4877      	ldr	r0, [pc, #476]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 80043ea:	f7fd f8e6 	bl	80015ba <assert_failed>

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80043ee:	4b77      	ldr	r3, [pc, #476]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 80043f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043f4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043fc:	4973      	ldr	r1, [pc, #460]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 80043fe:	4313      	orrs	r3, r2
 8004400:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800440c:	2b00      	cmp	r3, #0
 800440e:	d022      	beq.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0x90a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004414:	2b00      	cmp	r3, #0
 8004416:	d013      	beq.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800441c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004420:	d00e      	beq.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004426:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800442a:	d009      	beq.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004430:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004434:	d004      	beq.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
 8004436:	f240 115f 	movw	r1, #351	; 0x15f
 800443a:	4863      	ldr	r0, [pc, #396]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 800443c:	f7fd f8bd 	bl	80015ba <assert_failed>

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004440:	4b62      	ldr	r3, [pc, #392]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8004442:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004446:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800444e:	495f      	ldr	r1, [pc, #380]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8004450:	4313      	orrs	r3, r2
 8004452:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800445e:	2b00      	cmp	r3, #0
 8004460:	d022      	beq.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004466:	2b00      	cmp	r3, #0
 8004468:	d013      	beq.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x946>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800446e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004472:	d00e      	beq.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x946>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004478:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800447c:	d009      	beq.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x946>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004482:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004486:	d004      	beq.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x946>
 8004488:	f240 1169 	movw	r1, #361	; 0x169
 800448c:	484e      	ldr	r0, [pc, #312]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 800448e:	f7fd f894 	bl	80015ba <assert_failed>

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004492:	4b4e      	ldr	r3, [pc, #312]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8004494:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004498:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044a0:	494a      	ldr	r1, [pc, #296]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 80044a2:	4313      	orrs	r3, r2
 80044a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d018      	beq.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x99a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80044b8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80044bc:	d008      	beq.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0x984>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d004      	beq.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0x984>
 80044c6:	f240 1173 	movw	r1, #371	; 0x173
 80044ca:	483f      	ldr	r0, [pc, #252]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 80044cc:	f7fd f875 	bl	80015ba <assert_failed>

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80044d0:	4b3e      	ldr	r3, [pc, #248]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 80044d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044d6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80044de:	493b      	ldr	r1, [pc, #236]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 80044e0:	4313      	orrs	r3, r2
 80044e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d01f      	beq.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0x9e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80044fa:	d008      	beq.n	800450e <HAL_RCCEx_PeriphCLKConfig+0x9c2>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004500:	2b00      	cmp	r3, #0
 8004502:	d004      	beq.n	800450e <HAL_RCCEx_PeriphCLKConfig+0x9c2>
 8004504:	f240 117d 	movw	r1, #381	; 0x17d
 8004508:	482f      	ldr	r0, [pc, #188]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 800450a:	f7fd f856 	bl	80015ba <assert_failed>

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800450e:	4b2f      	ldr	r3, [pc, #188]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8004510:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004514:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800451c:	492b      	ldr	r1, [pc, #172]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 800451e:	4313      	orrs	r3, r2
 8004520:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004528:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800452c:	d101      	bne.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0x9e6>
    {
      pllsaiused = 1;
 800452e:	2301      	movs	r3, #1
 8004530:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f003 0308 	and.w	r3, r3, #8
 800453a:	2b00      	cmp	r3, #0
 800453c:	d001      	beq.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x9f6>
  {
    pllsaiused = 1;
 800453e:	2301      	movs	r3, #1
 8004540:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800454a:	2b00      	cmp	r3, #0
 800454c:	d022      	beq.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0xa48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004552:	2b00      	cmp	r3, #0
 8004554:	d013      	beq.n	800457e <HAL_RCCEx_PeriphCLKConfig+0xa32>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800455a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800455e:	d00e      	beq.n	800457e <HAL_RCCEx_PeriphCLKConfig+0xa32>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004564:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004568:	d009      	beq.n	800457e <HAL_RCCEx_PeriphCLKConfig+0xa32>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800456e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004572:	d004      	beq.n	800457e <HAL_RCCEx_PeriphCLKConfig+0xa32>
 8004574:	f240 1195 	movw	r1, #405	; 0x195
 8004578:	4813      	ldr	r0, [pc, #76]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 800457a:	f7fd f81e 	bl	80015ba <assert_failed>

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800457e:	4b13      	ldr	r3, [pc, #76]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8004580:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004584:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800458c:	490f      	ldr	r1, [pc, #60]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 800458e:	4313      	orrs	r3, r2
 8004590:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800459c:	2b00      	cmp	r3, #0
 800459e:	d020      	beq.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0xa96>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80045a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80045aa:	d009      	beq.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d004      	beq.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80045b6:	f240 119f 	movw	r1, #415	; 0x19f
 80045ba:	4803      	ldr	r0, [pc, #12]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 80045bc:	f7fc fffd 	bl	80015ba <assert_failed>

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80045c0:	4b02      	ldr	r3, [pc, #8]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 80045c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045c6:	e003      	b.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
 80045c8:	0800d9e4 	.word	0x0800d9e4
 80045cc:	40023800 	.word	0x40023800
 80045d0:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80045da:	4910      	ldr	r1, [pc, #64]	; (800461c <HAL_RCCEx_PeriphCLKConfig+0xad0>)
 80045dc:	4313      	orrs	r3, r2
 80045de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80045e2:	69fb      	ldr	r3, [r7, #28]
 80045e4:	2b01      	cmp	r3, #1
 80045e6:	d006      	beq.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	f000 8155 	beq.w	80048a0 <HAL_RCCEx_PeriphCLKConfig+0xd54>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80045f6:	4b09      	ldr	r3, [pc, #36]	; (800461c <HAL_RCCEx_PeriphCLKConfig+0xad0>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a08      	ldr	r2, [pc, #32]	; (800461c <HAL_RCCEx_PeriphCLKConfig+0xad0>)
 80045fc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004600:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004602:	f7fd fcad 	bl	8001f60 <HAL_GetTick>
 8004606:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004608:	e00a      	b.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0xad4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800460a:	f7fd fca9 	bl	8001f60 <HAL_GetTick>
 800460e:	4602      	mov	r2, r0
 8004610:	697b      	ldr	r3, [r7, #20]
 8004612:	1ad3      	subs	r3, r2, r3
 8004614:	2b64      	cmp	r3, #100	; 0x64
 8004616:	d903      	bls.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0xad4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004618:	2303      	movs	r3, #3
 800461a:	e273      	b.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
 800461c:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004620:	4b9a      	ldr	r3, [pc, #616]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004628:	2b00      	cmp	r3, #0
 800462a:	d1ee      	bne.n	800460a <HAL_RCCEx_PeriphCLKConfig+0xabe>
      }
    }

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	2b31      	cmp	r3, #49	; 0x31
 8004632:	d904      	bls.n	800463e <HAL_RCCEx_PeriphCLKConfig+0xaf2>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 800463c:	d904      	bls.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0xafc>
 800463e:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 8004642:	4893      	ldr	r0, [pc, #588]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 8004644:	f7fc ffb9 	bl	80015ba <assert_failed>

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f003 0301 	and.w	r3, r3, #1
 8004650:	2b00      	cmp	r3, #0
 8004652:	d02e      	beq.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0xb66>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004658:	2b00      	cmp	r3, #0
 800465a:	d12a      	bne.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0xb66>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	2b01      	cmp	r3, #1
 8004662:	d903      	bls.n	800466c <HAL_RCCEx_PeriphCLKConfig+0xb20>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	689b      	ldr	r3, [r3, #8]
 8004668:	2b07      	cmp	r3, #7
 800466a:	d904      	bls.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 800466c:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8004670:	4887      	ldr	r0, [pc, #540]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 8004672:	f7fc ffa2 	bl	80015ba <assert_failed>

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004676:	4b85      	ldr	r3, [pc, #532]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8004678:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800467c:	0c1b      	lsrs	r3, r3, #16
 800467e:	f003 0303 	and.w	r3, r3, #3
 8004682:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004684:	4b81      	ldr	r3, [pc, #516]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8004686:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800468a:	0e1b      	lsrs	r3, r3, #24
 800468c:	f003 030f 	and.w	r3, r3, #15
 8004690:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	019a      	lsls	r2, r3, #6
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	041b      	lsls	r3, r3, #16
 800469c:	431a      	orrs	r2, r3
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	061b      	lsls	r3, r3, #24
 80046a2:	431a      	orrs	r2, r3
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	689b      	ldr	r3, [r3, #8]
 80046a8:	071b      	lsls	r3, r3, #28
 80046aa:	4978      	ldr	r1, [pc, #480]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 80046ac:	4313      	orrs	r3, r2
 80046ae:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d004      	beq.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046c6:	d00a      	beq.n	80046de <HAL_RCCEx_PeriphCLKConfig+0xb92>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d048      	beq.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046dc:	d143      	bne.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {
      /* Check for PLLI2S Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	68db      	ldr	r3, [r3, #12]
 80046e2:	2b01      	cmp	r3, #1
 80046e4:	d903      	bls.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0xba2>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	68db      	ldr	r3, [r3, #12]
 80046ea:	2b0f      	cmp	r3, #15
 80046ec:	d904      	bls.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80046ee:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
 80046f2:	4867      	ldr	r0, [pc, #412]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 80046f4:	f7fc ff61 	bl	80015ba <assert_failed>
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d003      	beq.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0xbbc>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004704:	2b20      	cmp	r3, #32
 8004706:	d904      	bls.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0xbc6>
 8004708:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
 800470c:	4860      	ldr	r0, [pc, #384]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 800470e:	f7fc ff54 	bl	80015ba <assert_failed>

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004712:	4b5e      	ldr	r3, [pc, #376]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8004714:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004718:	0c1b      	lsrs	r3, r3, #16
 800471a:	f003 0303 	and.w	r3, r3, #3
 800471e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004720:	4b5a      	ldr	r3, [pc, #360]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8004722:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004726:	0f1b      	lsrs	r3, r3, #28
 8004728:	f003 0307 	and.w	r3, r3, #7
 800472c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	019a      	lsls	r2, r3, #6
 8004734:	693b      	ldr	r3, [r7, #16]
 8004736:	041b      	lsls	r3, r3, #16
 8004738:	431a      	orrs	r2, r3
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	68db      	ldr	r3, [r3, #12]
 800473e:	061b      	lsls	r3, r3, #24
 8004740:	431a      	orrs	r2, r3
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	071b      	lsls	r3, r3, #28
 8004746:	4951      	ldr	r1, [pc, #324]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8004748:	4313      	orrs	r3, r2
 800474a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800474e:	4b4f      	ldr	r3, [pc, #316]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8004750:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004754:	f023 021f 	bic.w	r2, r3, #31
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800475c:	3b01      	subs	r3, #1
 800475e:	494b      	ldr	r1, [pc, #300]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8004760:	4313      	orrs	r3, r2
 8004762:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800476e:	2b00      	cmp	r3, #0
 8004770:	d032      	beq.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0xc8c>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	691b      	ldr	r3, [r3, #16]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d010      	beq.n	800479c <HAL_RCCEx_PeriphCLKConfig+0xc50>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	691b      	ldr	r3, [r3, #16]
 800477e:	2b01      	cmp	r3, #1
 8004780:	d00c      	beq.n	800479c <HAL_RCCEx_PeriphCLKConfig+0xc50>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	691b      	ldr	r3, [r3, #16]
 8004786:	2b02      	cmp	r3, #2
 8004788:	d008      	beq.n	800479c <HAL_RCCEx_PeriphCLKConfig+0xc50>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	691b      	ldr	r3, [r3, #16]
 800478e:	2b03      	cmp	r3, #3
 8004790:	d004      	beq.n	800479c <HAL_RCCEx_PeriphCLKConfig+0xc50>
 8004792:	f240 2105 	movw	r1, #517	; 0x205
 8004796:	483e      	ldr	r0, [pc, #248]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 8004798:	f7fc ff0f 	bl	80015ba <assert_failed>

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800479c:	4b3b      	ldr	r3, [pc, #236]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 800479e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047a2:	0e1b      	lsrs	r3, r3, #24
 80047a4:	f003 030f 	and.w	r3, r3, #15
 80047a8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80047aa:	4b38      	ldr	r3, [pc, #224]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 80047ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047b0:	0f1b      	lsrs	r3, r3, #28
 80047b2:	f003 0307 	and.w	r3, r3, #7
 80047b6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	019a      	lsls	r2, r3, #6
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	691b      	ldr	r3, [r3, #16]
 80047c2:	041b      	lsls	r3, r3, #16
 80047c4:	431a      	orrs	r2, r3
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	061b      	lsls	r3, r3, #24
 80047ca:	431a      	orrs	r2, r3
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	071b      	lsls	r3, r3, #28
 80047d0:	492e      	ldr	r1, [pc, #184]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 80047d2:	4313      	orrs	r3, r2
 80047d4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d040      	beq.n	8004866 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	691b      	ldr	r3, [r3, #16]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d010      	beq.n	800480e <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	691b      	ldr	r3, [r3, #16]
 80047f0:	2b01      	cmp	r3, #1
 80047f2:	d00c      	beq.n	800480e <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	691b      	ldr	r3, [r3, #16]
 80047f8:	2b02      	cmp	r3, #2
 80047fa:	d008      	beq.n	800480e <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	691b      	ldr	r3, [r3, #16]
 8004800:	2b03      	cmp	r3, #3
 8004802:	d004      	beq.n	800480e <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 8004804:	f44f 7105 	mov.w	r1, #532	; 0x214
 8004808:	4821      	ldr	r0, [pc, #132]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 800480a:	f7fc fed6 	bl	80015ba <assert_failed>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	689b      	ldr	r3, [r3, #8]
 8004812:	2b01      	cmp	r3, #1
 8004814:	d903      	bls.n	800481e <HAL_RCCEx_PeriphCLKConfig+0xcd2>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	689b      	ldr	r3, [r3, #8]
 800481a:	2b07      	cmp	r3, #7
 800481c:	d904      	bls.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 800481e:	f240 2115 	movw	r1, #533	; 0x215
 8004822:	481b      	ldr	r0, [pc, #108]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 8004824:	f7fc fec9 	bl	80015ba <assert_failed>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	68db      	ldr	r3, [r3, #12]
 800482c:	2b01      	cmp	r3, #1
 800482e:	d903      	bls.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0xcec>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	68db      	ldr	r3, [r3, #12]
 8004834:	2b0f      	cmp	r3, #15
 8004836:	d904      	bls.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
 8004838:	f240 2116 	movw	r1, #534	; 0x216
 800483c:	4814      	ldr	r0, [pc, #80]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 800483e:	f7fc febc 	bl	80015ba <assert_failed>

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	019a      	lsls	r2, r3, #6
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	691b      	ldr	r3, [r3, #16]
 800484c:	041b      	lsls	r3, r3, #16
 800484e:	431a      	orrs	r2, r3
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	68db      	ldr	r3, [r3, #12]
 8004854:	061b      	lsls	r3, r3, #24
 8004856:	431a      	orrs	r2, r3
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	689b      	ldr	r3, [r3, #8]
 800485c:	071b      	lsls	r3, r3, #28
 800485e:	490b      	ldr	r1, [pc, #44]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8004860:	4313      	orrs	r3, r2
 8004862:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004866:	4b09      	ldr	r3, [pc, #36]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a08      	ldr	r2, [pc, #32]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 800486c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004870:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004872:	f7fd fb75 	bl	8001f60 <HAL_GetTick>
 8004876:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004878:	e00c      	b.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0xd48>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800487a:	f7fd fb71 	bl	8001f60 <HAL_GetTick>
 800487e:	4602      	mov	r2, r0
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	1ad3      	subs	r3, r2, r3
 8004884:	2b64      	cmp	r3, #100	; 0x64
 8004886:	d905      	bls.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0xd48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004888:	2303      	movs	r3, #3
 800488a:	e13b      	b.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
 800488c:	40023800 	.word	0x40023800
 8004890:	0800d9e4 	.word	0x0800d9e4
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004894:	4b9d      	ldr	r3, [pc, #628]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800489c:	2b00      	cmp	r3, #0
 800489e:	d0ec      	beq.n	800487a <HAL_RCCEx_PeriphCLKConfig+0xd2e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80048a0:	69bb      	ldr	r3, [r7, #24]
 80048a2:	2b01      	cmp	r3, #1
 80048a4:	f040 812d 	bne.w	8004b02 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80048a8:	4b98      	ldr	r3, [pc, #608]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a97      	ldr	r2, [pc, #604]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 80048ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048b4:	f7fd fb54 	bl	8001f60 <HAL_GetTick>
 80048b8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80048ba:	e008      	b.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0xd82>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80048bc:	f7fd fb50 	bl	8001f60 <HAL_GetTick>
 80048c0:	4602      	mov	r2, r0
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	1ad3      	subs	r3, r2, r3
 80048c6:	2b64      	cmp	r3, #100	; 0x64
 80048c8:	d901      	bls.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0xd82>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80048ca:	2303      	movs	r3, #3
 80048cc:	e11a      	b.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80048ce:	4b8f      	ldr	r3, [pc, #572]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80048d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80048da:	d0ef      	beq.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0xd70>
      }
    }

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	695b      	ldr	r3, [r3, #20]
 80048e0:	2b31      	cmp	r3, #49	; 0x31
 80048e2:	d904      	bls.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0xda2>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	695b      	ldr	r3, [r3, #20]
 80048e8:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 80048ec:	d904      	bls.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0xdac>
 80048ee:	f44f 7111 	mov.w	r1, #580	; 0x244
 80048f2:	4887      	ldr	r0, [pc, #540]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 80048f4:	f7fc fe61 	bl	80015ba <assert_failed>

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004900:	2b00      	cmp	r3, #0
 8004902:	d003      	beq.n	800490c <HAL_RCCEx_PeriphCLKConfig+0xdc0>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004908:	2b00      	cmp	r3, #0
 800490a:	d009      	beq.n	8004920 <HAL_RCCEx_PeriphCLKConfig+0xdd4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004914:	2b00      	cmp	r3, #0
 8004916:	d048      	beq.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0xe5e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800491c:	2b00      	cmp	r3, #0
 800491e:	d144      	bne.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0xe5e>
    {
      /* check for PLLSAIQ Parameter */
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	699b      	ldr	r3, [r3, #24]
 8004924:	2b01      	cmp	r3, #1
 8004926:	d903      	bls.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0xde4>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	699b      	ldr	r3, [r3, #24]
 800492c:	2b0f      	cmp	r3, #15
 800492e:	d904      	bls.n	800493a <HAL_RCCEx_PeriphCLKConfig+0xdee>
 8004930:	f240 214b 	movw	r1, #587	; 0x24b
 8004934:	4876      	ldr	r0, [pc, #472]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 8004936:	f7fc fe40 	bl	80015ba <assert_failed>
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800493e:	2b00      	cmp	r3, #0
 8004940:	d003      	beq.n	800494a <HAL_RCCEx_PeriphCLKConfig+0xdfe>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004946:	2b20      	cmp	r3, #32
 8004948:	d904      	bls.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0xe08>
 800494a:	f240 214d 	movw	r1, #589	; 0x24d
 800494e:	4870      	ldr	r0, [pc, #448]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 8004950:	f7fc fe33 	bl	80015ba <assert_failed>

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004954:	4b6d      	ldr	r3, [pc, #436]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8004956:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800495a:	0c1b      	lsrs	r3, r3, #16
 800495c:	f003 0303 	and.w	r3, r3, #3
 8004960:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004962:	4b6a      	ldr	r3, [pc, #424]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8004964:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004968:	0f1b      	lsrs	r3, r3, #28
 800496a:	f003 0307 	and.w	r3, r3, #7
 800496e:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	695b      	ldr	r3, [r3, #20]
 8004974:	019a      	lsls	r2, r3, #6
 8004976:	693b      	ldr	r3, [r7, #16]
 8004978:	041b      	lsls	r3, r3, #16
 800497a:	431a      	orrs	r2, r3
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	699b      	ldr	r3, [r3, #24]
 8004980:	061b      	lsls	r3, r3, #24
 8004982:	431a      	orrs	r2, r3
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	071b      	lsls	r3, r3, #28
 8004988:	4960      	ldr	r1, [pc, #384]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 800498a:	4313      	orrs	r3, r2
 800498c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004990:	4b5e      	ldr	r3, [pc, #376]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8004992:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004996:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800499e:	3b01      	subs	r3, #1
 80049a0:	021b      	lsls	r3, r3, #8
 80049a2:	495a      	ldr	r1, [pc, #360]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 80049a4:	4313      	orrs	r3, r2
 80049a6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d037      	beq.n	8004a26 <HAL_RCCEx_PeriphCLKConfig+0xeda>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80049ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80049be:	d132      	bne.n	8004a26 <HAL_RCCEx_PeriphCLKConfig+0xeda>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6a1b      	ldr	r3, [r3, #32]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d010      	beq.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6a1b      	ldr	r3, [r3, #32]
 80049cc:	2b01      	cmp	r3, #1
 80049ce:	d00c      	beq.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6a1b      	ldr	r3, [r3, #32]
 80049d4:	2b02      	cmp	r3, #2
 80049d6:	d008      	beq.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6a1b      	ldr	r3, [r3, #32]
 80049dc:	2b03      	cmp	r3, #3
 80049de:	d004      	beq.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 80049e0:	f44f 7118 	mov.w	r1, #608	; 0x260
 80049e4:	484a      	ldr	r0, [pc, #296]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 80049e6:	f7fc fde8 	bl	80015ba <assert_failed>
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80049ea:	4b48      	ldr	r3, [pc, #288]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 80049ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049f0:	0e1b      	lsrs	r3, r3, #24
 80049f2:	f003 030f 	and.w	r3, r3, #15
 80049f6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80049f8:	4b44      	ldr	r3, [pc, #272]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 80049fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049fe:	0f1b      	lsrs	r3, r3, #28
 8004a00:	f003 0307 	and.w	r3, r3, #7
 8004a04:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	695b      	ldr	r3, [r3, #20]
 8004a0a:	019a      	lsls	r2, r3, #6
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6a1b      	ldr	r3, [r3, #32]
 8004a10:	041b      	lsls	r3, r3, #16
 8004a12:	431a      	orrs	r2, r3
 8004a14:	693b      	ldr	r3, [r7, #16]
 8004a16:	061b      	lsls	r3, r3, #24
 8004a18:	431a      	orrs	r2, r3
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	071b      	lsls	r3, r3, #28
 8004a1e:	493b      	ldr	r1, [pc, #236]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8004a20:	4313      	orrs	r3, r2
 8004a22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f003 0308 	and.w	r3, r3, #8
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d04d      	beq.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0xf82>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	69db      	ldr	r3, [r3, #28]
 8004a36:	2b01      	cmp	r3, #1
 8004a38:	d903      	bls.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0xef6>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	69db      	ldr	r3, [r3, #28]
 8004a3e:	2b07      	cmp	r3, #7
 8004a40:	d904      	bls.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0xf00>
 8004a42:	f240 216f 	movw	r1, #623	; 0x26f
 8004a46:	4832      	ldr	r0, [pc, #200]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 8004a48:	f7fc fdb7 	bl	80015ba <assert_failed>
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d013      	beq.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0xf30>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a5c:	d00e      	beq.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0xf30>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a62:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004a66:	d009      	beq.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0xf30>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a6c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004a70:	d004      	beq.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0xf30>
 8004a72:	f44f 711c 	mov.w	r1, #624	; 0x270
 8004a76:	4826      	ldr	r0, [pc, #152]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 8004a78:	f7fc fd9f 	bl	80015ba <assert_failed>

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004a7c:	4b23      	ldr	r3, [pc, #140]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8004a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a82:	0e1b      	lsrs	r3, r3, #24
 8004a84:	f003 030f 	and.w	r3, r3, #15
 8004a88:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004a8a:	4b20      	ldr	r3, [pc, #128]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8004a8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a90:	0c1b      	lsrs	r3, r3, #16
 8004a92:	f003 0303 	and.w	r3, r3, #3
 8004a96:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	695b      	ldr	r3, [r3, #20]
 8004a9c:	019a      	lsls	r2, r3, #6
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	041b      	lsls	r3, r3, #16
 8004aa2:	431a      	orrs	r2, r3
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	061b      	lsls	r3, r3, #24
 8004aa8:	431a      	orrs	r2, r3
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	69db      	ldr	r3, [r3, #28]
 8004aae:	071b      	lsls	r3, r3, #28
 8004ab0:	4916      	ldr	r1, [pc, #88]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004ab8:	4b14      	ldr	r3, [pc, #80]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8004aba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004abe:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ac6:	4911      	ldr	r1, [pc, #68]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004ace:	4b0f      	ldr	r3, [pc, #60]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a0e      	ldr	r2, [pc, #56]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8004ad4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ad8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ada:	f7fd fa41 	bl	8001f60 <HAL_GetTick>
 8004ade:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004ae0:	e008      	b.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004ae2:	f7fd fa3d 	bl	8001f60 <HAL_GetTick>
 8004ae6:	4602      	mov	r2, r0
 8004ae8:	697b      	ldr	r3, [r7, #20]
 8004aea:	1ad3      	subs	r3, r2, r3
 8004aec:	2b64      	cmp	r3, #100	; 0x64
 8004aee:	d901      	bls.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004af0:	2303      	movs	r3, #3
 8004af2:	e007      	b.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004af4:	4b05      	ldr	r3, [pc, #20]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004afc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b00:	d1ef      	bne.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0xf96>
      }
    }
  }
  return HAL_OK;
 8004b02:	2300      	movs	r3, #0
}
 8004b04:	4618      	mov	r0, r3
 8004b06:	3720      	adds	r7, #32
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bd80      	pop	{r7, pc}
 8004b0c:	40023800 	.word	0x40023800
 8004b10:	0800d9e4 	.word	0x0800d9e4

08004b14 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b082      	sub	sp, #8
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d101      	bne.n	8004b26 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b22:	2301      	movs	r3, #1
 8004b24:	e0f5      	b.n	8004d12 <HAL_TIM_Base_Init+0x1fe>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4a7c      	ldr	r2, [pc, #496]	; (8004d1c <HAL_TIM_Base_Init+0x208>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d045      	beq.n	8004bbc <HAL_TIM_Base_Init+0xa8>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b38:	d040      	beq.n	8004bbc <HAL_TIM_Base_Init+0xa8>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4a78      	ldr	r2, [pc, #480]	; (8004d20 <HAL_TIM_Base_Init+0x20c>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d03b      	beq.n	8004bbc <HAL_TIM_Base_Init+0xa8>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a76      	ldr	r2, [pc, #472]	; (8004d24 <HAL_TIM_Base_Init+0x210>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d036      	beq.n	8004bbc <HAL_TIM_Base_Init+0xa8>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4a75      	ldr	r2, [pc, #468]	; (8004d28 <HAL_TIM_Base_Init+0x214>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d031      	beq.n	8004bbc <HAL_TIM_Base_Init+0xa8>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a73      	ldr	r2, [pc, #460]	; (8004d2c <HAL_TIM_Base_Init+0x218>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d02c      	beq.n	8004bbc <HAL_TIM_Base_Init+0xa8>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a72      	ldr	r2, [pc, #456]	; (8004d30 <HAL_TIM_Base_Init+0x21c>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d027      	beq.n	8004bbc <HAL_TIM_Base_Init+0xa8>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a70      	ldr	r2, [pc, #448]	; (8004d34 <HAL_TIM_Base_Init+0x220>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d022      	beq.n	8004bbc <HAL_TIM_Base_Init+0xa8>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a6f      	ldr	r2, [pc, #444]	; (8004d38 <HAL_TIM_Base_Init+0x224>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d01d      	beq.n	8004bbc <HAL_TIM_Base_Init+0xa8>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a6d      	ldr	r2, [pc, #436]	; (8004d3c <HAL_TIM_Base_Init+0x228>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d018      	beq.n	8004bbc <HAL_TIM_Base_Init+0xa8>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a6c      	ldr	r2, [pc, #432]	; (8004d40 <HAL_TIM_Base_Init+0x22c>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d013      	beq.n	8004bbc <HAL_TIM_Base_Init+0xa8>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a6a      	ldr	r2, [pc, #424]	; (8004d44 <HAL_TIM_Base_Init+0x230>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d00e      	beq.n	8004bbc <HAL_TIM_Base_Init+0xa8>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4a69      	ldr	r2, [pc, #420]	; (8004d48 <HAL_TIM_Base_Init+0x234>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d009      	beq.n	8004bbc <HAL_TIM_Base_Init+0xa8>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a67      	ldr	r2, [pc, #412]	; (8004d4c <HAL_TIM_Base_Init+0x238>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d004      	beq.n	8004bbc <HAL_TIM_Base_Init+0xa8>
 8004bb2:	f44f 718b 	mov.w	r1, #278	; 0x116
 8004bb6:	4866      	ldr	r0, [pc, #408]	; (8004d50 <HAL_TIM_Base_Init+0x23c>)
 8004bb8:	f7fc fcff 	bl	80015ba <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	689b      	ldr	r3, [r3, #8]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d014      	beq.n	8004bee <HAL_TIM_Base_Init+0xda>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	689b      	ldr	r3, [r3, #8]
 8004bc8:	2b10      	cmp	r3, #16
 8004bca:	d010      	beq.n	8004bee <HAL_TIM_Base_Init+0xda>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	689b      	ldr	r3, [r3, #8]
 8004bd0:	2b20      	cmp	r3, #32
 8004bd2:	d00c      	beq.n	8004bee <HAL_TIM_Base_Init+0xda>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	2b40      	cmp	r3, #64	; 0x40
 8004bda:	d008      	beq.n	8004bee <HAL_TIM_Base_Init+0xda>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	689b      	ldr	r3, [r3, #8]
 8004be0:	2b60      	cmp	r3, #96	; 0x60
 8004be2:	d004      	beq.n	8004bee <HAL_TIM_Base_Init+0xda>
 8004be4:	f240 1117 	movw	r1, #279	; 0x117
 8004be8:	4859      	ldr	r0, [pc, #356]	; (8004d50 <HAL_TIM_Base_Init+0x23c>)
 8004bea:	f7fc fce6 	bl	80015ba <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	691b      	ldr	r3, [r3, #16]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d00e      	beq.n	8004c14 <HAL_TIM_Base_Init+0x100>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	691b      	ldr	r3, [r3, #16]
 8004bfa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bfe:	d009      	beq.n	8004c14 <HAL_TIM_Base_Init+0x100>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	691b      	ldr	r3, [r3, #16]
 8004c04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c08:	d004      	beq.n	8004c14 <HAL_TIM_Base_Init+0x100>
 8004c0a:	f44f 718c 	mov.w	r1, #280	; 0x118
 8004c0e:	4850      	ldr	r0, [pc, #320]	; (8004d50 <HAL_TIM_Base_Init+0x23c>)
 8004c10:	f7fc fcd3 	bl	80015ba <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c1c:	d004      	beq.n	8004c28 <HAL_TIM_Base_Init+0x114>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a41      	ldr	r2, [pc, #260]	; (8004d28 <HAL_TIM_Base_Init+0x214>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d107      	bne.n	8004c38 <HAL_TIM_Base_Init+0x124>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	68db      	ldr	r3, [r3, #12]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	bf14      	ite	ne
 8004c30:	2301      	movne	r3, #1
 8004c32:	2300      	moveq	r3, #0
 8004c34:	b2db      	uxtb	r3, r3
 8004c36:	e00e      	b.n	8004c56 <HAL_TIM_Base_Init+0x142>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	68db      	ldr	r3, [r3, #12]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d006      	beq.n	8004c4e <HAL_TIM_Base_Init+0x13a>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	68db      	ldr	r3, [r3, #12]
 8004c44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c48:	d201      	bcs.n	8004c4e <HAL_TIM_Base_Init+0x13a>
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	e000      	b.n	8004c50 <HAL_TIM_Base_Init+0x13c>
 8004c4e:	2300      	movs	r3, #0
 8004c50:	f003 0301 	and.w	r3, r3, #1
 8004c54:	b2db      	uxtb	r3, r3
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d104      	bne.n	8004c64 <HAL_TIM_Base_Init+0x150>
 8004c5a:	f240 1119 	movw	r1, #281	; 0x119
 8004c5e:	483c      	ldr	r0, [pc, #240]	; (8004d50 <HAL_TIM_Base_Init+0x23c>)
 8004c60:	f7fc fcab 	bl	80015ba <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	699b      	ldr	r3, [r3, #24]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d008      	beq.n	8004c7e <HAL_TIM_Base_Init+0x16a>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	699b      	ldr	r3, [r3, #24]
 8004c70:	2b80      	cmp	r3, #128	; 0x80
 8004c72:	d004      	beq.n	8004c7e <HAL_TIM_Base_Init+0x16a>
 8004c74:	f44f 718d 	mov.w	r1, #282	; 0x11a
 8004c78:	4835      	ldr	r0, [pc, #212]	; (8004d50 <HAL_TIM_Base_Init+0x23c>)
 8004c7a:	f7fc fc9e 	bl	80015ba <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c84:	b2db      	uxtb	r3, r3
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d106      	bne.n	8004c98 <HAL_TIM_Base_Init+0x184>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004c92:	6878      	ldr	r0, [r7, #4]
 8004c94:	f7fc ffc8 	bl	8001c28 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2202      	movs	r2, #2
 8004c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681a      	ldr	r2, [r3, #0]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	3304      	adds	r3, #4
 8004ca8:	4619      	mov	r1, r3
 8004caa:	4610      	mov	r0, r2
 8004cac:	f001 fa52 	bl	8006154 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2201      	movs	r2, #1
 8004cbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2201      	movs	r2, #1
 8004ccc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2201      	movs	r2, #1
 8004cdc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2201      	movs	r2, #1
 8004ce4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2201      	movs	r2, #1
 8004cec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2201      	movs	r2, #1
 8004d04:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d10:	2300      	movs	r3, #0
}
 8004d12:	4618      	mov	r0, r3
 8004d14:	3708      	adds	r7, #8
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bd80      	pop	{r7, pc}
 8004d1a:	bf00      	nop
 8004d1c:	40010000 	.word	0x40010000
 8004d20:	40000400 	.word	0x40000400
 8004d24:	40000800 	.word	0x40000800
 8004d28:	40000c00 	.word	0x40000c00
 8004d2c:	40001000 	.word	0x40001000
 8004d30:	40001400 	.word	0x40001400
 8004d34:	40010400 	.word	0x40010400
 8004d38:	40014000 	.word	0x40014000
 8004d3c:	40014400 	.word	0x40014400
 8004d40:	40014800 	.word	0x40014800
 8004d44:	40001800 	.word	0x40001800
 8004d48:	40001c00 	.word	0x40001c00
 8004d4c:	40002000 	.word	0x40002000
 8004d50:	0800da20 	.word	0x0800da20

08004d54 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b082      	sub	sp, #8
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d101      	bne.n	8004d66 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004d62:	2301      	movs	r3, #1
 8004d64:	e0f5      	b.n	8004f52 <HAL_TIM_PWM_Init+0x1fe>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4a7c      	ldr	r2, [pc, #496]	; (8004f5c <HAL_TIM_PWM_Init+0x208>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d045      	beq.n	8004dfc <HAL_TIM_PWM_Init+0xa8>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d78:	d040      	beq.n	8004dfc <HAL_TIM_PWM_Init+0xa8>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	4a78      	ldr	r2, [pc, #480]	; (8004f60 <HAL_TIM_PWM_Init+0x20c>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d03b      	beq.n	8004dfc <HAL_TIM_PWM_Init+0xa8>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4a76      	ldr	r2, [pc, #472]	; (8004f64 <HAL_TIM_PWM_Init+0x210>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d036      	beq.n	8004dfc <HAL_TIM_PWM_Init+0xa8>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4a75      	ldr	r2, [pc, #468]	; (8004f68 <HAL_TIM_PWM_Init+0x214>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d031      	beq.n	8004dfc <HAL_TIM_PWM_Init+0xa8>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4a73      	ldr	r2, [pc, #460]	; (8004f6c <HAL_TIM_PWM_Init+0x218>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d02c      	beq.n	8004dfc <HAL_TIM_PWM_Init+0xa8>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4a72      	ldr	r2, [pc, #456]	; (8004f70 <HAL_TIM_PWM_Init+0x21c>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d027      	beq.n	8004dfc <HAL_TIM_PWM_Init+0xa8>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4a70      	ldr	r2, [pc, #448]	; (8004f74 <HAL_TIM_PWM_Init+0x220>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d022      	beq.n	8004dfc <HAL_TIM_PWM_Init+0xa8>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4a6f      	ldr	r2, [pc, #444]	; (8004f78 <HAL_TIM_PWM_Init+0x224>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d01d      	beq.n	8004dfc <HAL_TIM_PWM_Init+0xa8>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4a6d      	ldr	r2, [pc, #436]	; (8004f7c <HAL_TIM_PWM_Init+0x228>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d018      	beq.n	8004dfc <HAL_TIM_PWM_Init+0xa8>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a6c      	ldr	r2, [pc, #432]	; (8004f80 <HAL_TIM_PWM_Init+0x22c>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d013      	beq.n	8004dfc <HAL_TIM_PWM_Init+0xa8>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4a6a      	ldr	r2, [pc, #424]	; (8004f84 <HAL_TIM_PWM_Init+0x230>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d00e      	beq.n	8004dfc <HAL_TIM_PWM_Init+0xa8>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4a69      	ldr	r2, [pc, #420]	; (8004f88 <HAL_TIM_PWM_Init+0x234>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d009      	beq.n	8004dfc <HAL_TIM_PWM_Init+0xa8>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a67      	ldr	r2, [pc, #412]	; (8004f8c <HAL_TIM_PWM_Init+0x238>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d004      	beq.n	8004dfc <HAL_TIM_PWM_Init+0xa8>
 8004df2:	f240 5133 	movw	r1, #1331	; 0x533
 8004df6:	4866      	ldr	r0, [pc, #408]	; (8004f90 <HAL_TIM_PWM_Init+0x23c>)
 8004df8:	f7fc fbdf 	bl	80015ba <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	689b      	ldr	r3, [r3, #8]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d014      	beq.n	8004e2e <HAL_TIM_PWM_Init+0xda>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	689b      	ldr	r3, [r3, #8]
 8004e08:	2b10      	cmp	r3, #16
 8004e0a:	d010      	beq.n	8004e2e <HAL_TIM_PWM_Init+0xda>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	689b      	ldr	r3, [r3, #8]
 8004e10:	2b20      	cmp	r3, #32
 8004e12:	d00c      	beq.n	8004e2e <HAL_TIM_PWM_Init+0xda>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	689b      	ldr	r3, [r3, #8]
 8004e18:	2b40      	cmp	r3, #64	; 0x40
 8004e1a:	d008      	beq.n	8004e2e <HAL_TIM_PWM_Init+0xda>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	689b      	ldr	r3, [r3, #8]
 8004e20:	2b60      	cmp	r3, #96	; 0x60
 8004e22:	d004      	beq.n	8004e2e <HAL_TIM_PWM_Init+0xda>
 8004e24:	f240 5134 	movw	r1, #1332	; 0x534
 8004e28:	4859      	ldr	r0, [pc, #356]	; (8004f90 <HAL_TIM_PWM_Init+0x23c>)
 8004e2a:	f7fc fbc6 	bl	80015ba <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	691b      	ldr	r3, [r3, #16]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d00e      	beq.n	8004e54 <HAL_TIM_PWM_Init+0x100>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	691b      	ldr	r3, [r3, #16]
 8004e3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e3e:	d009      	beq.n	8004e54 <HAL_TIM_PWM_Init+0x100>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	691b      	ldr	r3, [r3, #16]
 8004e44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e48:	d004      	beq.n	8004e54 <HAL_TIM_PWM_Init+0x100>
 8004e4a:	f240 5135 	movw	r1, #1333	; 0x535
 8004e4e:	4850      	ldr	r0, [pc, #320]	; (8004f90 <HAL_TIM_PWM_Init+0x23c>)
 8004e50:	f7fc fbb3 	bl	80015ba <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e5c:	d004      	beq.n	8004e68 <HAL_TIM_PWM_Init+0x114>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a41      	ldr	r2, [pc, #260]	; (8004f68 <HAL_TIM_PWM_Init+0x214>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d107      	bne.n	8004e78 <HAL_TIM_PWM_Init+0x124>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	68db      	ldr	r3, [r3, #12]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	bf14      	ite	ne
 8004e70:	2301      	movne	r3, #1
 8004e72:	2300      	moveq	r3, #0
 8004e74:	b2db      	uxtb	r3, r3
 8004e76:	e00e      	b.n	8004e96 <HAL_TIM_PWM_Init+0x142>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	68db      	ldr	r3, [r3, #12]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d006      	beq.n	8004e8e <HAL_TIM_PWM_Init+0x13a>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	68db      	ldr	r3, [r3, #12]
 8004e84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e88:	d201      	bcs.n	8004e8e <HAL_TIM_PWM_Init+0x13a>
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	e000      	b.n	8004e90 <HAL_TIM_PWM_Init+0x13c>
 8004e8e:	2300      	movs	r3, #0
 8004e90:	f003 0301 	and.w	r3, r3, #1
 8004e94:	b2db      	uxtb	r3, r3
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d104      	bne.n	8004ea4 <HAL_TIM_PWM_Init+0x150>
 8004e9a:	f240 5136 	movw	r1, #1334	; 0x536
 8004e9e:	483c      	ldr	r0, [pc, #240]	; (8004f90 <HAL_TIM_PWM_Init+0x23c>)
 8004ea0:	f7fc fb8b 	bl	80015ba <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	699b      	ldr	r3, [r3, #24]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d008      	beq.n	8004ebe <HAL_TIM_PWM_Init+0x16a>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	699b      	ldr	r3, [r3, #24]
 8004eb0:	2b80      	cmp	r3, #128	; 0x80
 8004eb2:	d004      	beq.n	8004ebe <HAL_TIM_PWM_Init+0x16a>
 8004eb4:	f240 5137 	movw	r1, #1335	; 0x537
 8004eb8:	4835      	ldr	r0, [pc, #212]	; (8004f90 <HAL_TIM_PWM_Init+0x23c>)
 8004eba:	f7fc fb7e 	bl	80015ba <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ec4:	b2db      	uxtb	r3, r3
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d106      	bne.n	8004ed8 <HAL_TIM_PWM_Init+0x184>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2200      	movs	r2, #0
 8004ece:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004ed2:	6878      	ldr	r0, [r7, #4]
 8004ed4:	f000 f85e 	bl	8004f94 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2202      	movs	r2, #2
 8004edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681a      	ldr	r2, [r3, #0]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	3304      	adds	r3, #4
 8004ee8:	4619      	mov	r1, r3
 8004eea:	4610      	mov	r0, r2
 8004eec:	f001 f932 	bl	8006154 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2201      	movs	r2, #1
 8004ef4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2201      	movs	r2, #1
 8004efc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2201      	movs	r2, #1
 8004f04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2201      	movs	r2, #1
 8004f14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2201      	movs	r2, #1
 8004f1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2201      	movs	r2, #1
 8004f24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2201      	movs	r2, #1
 8004f34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2201      	movs	r2, #1
 8004f44:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f50:	2300      	movs	r3, #0
}
 8004f52:	4618      	mov	r0, r3
 8004f54:	3708      	adds	r7, #8
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd80      	pop	{r7, pc}
 8004f5a:	bf00      	nop
 8004f5c:	40010000 	.word	0x40010000
 8004f60:	40000400 	.word	0x40000400
 8004f64:	40000800 	.word	0x40000800
 8004f68:	40000c00 	.word	0x40000c00
 8004f6c:	40001000 	.word	0x40001000
 8004f70:	40001400 	.word	0x40001400
 8004f74:	40010400 	.word	0x40010400
 8004f78:	40014000 	.word	0x40014000
 8004f7c:	40014400 	.word	0x40014400
 8004f80:	40014800 	.word	0x40014800
 8004f84:	40001800 	.word	0x40001800
 8004f88:	40001c00 	.word	0x40001c00
 8004f8c:	40002000 	.word	0x40002000
 8004f90:	0800da20 	.word	0x0800da20

08004f94 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004f94:	b480      	push	{r7}
 8004f96:	b083      	sub	sp, #12
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004f9c:	bf00      	nop
 8004f9e:	370c      	adds	r7, #12
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa6:	4770      	bx	lr

08004fa8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b084      	sub	sp, #16
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
 8004fb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a89      	ldr	r2, [pc, #548]	; (80051dc <HAL_TIM_PWM_Start+0x234>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d117      	bne.n	8004fec <HAL_TIM_PWM_Start+0x44>
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	f000 80ae 	beq.w	8005120 <HAL_TIM_PWM_Start+0x178>
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	2b04      	cmp	r3, #4
 8004fc8:	f000 80aa 	beq.w	8005120 <HAL_TIM_PWM_Start+0x178>
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	2b08      	cmp	r3, #8
 8004fd0:	f000 80a6 	beq.w	8005120 <HAL_TIM_PWM_Start+0x178>
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	2b0c      	cmp	r3, #12
 8004fd8:	f000 80a2 	beq.w	8005120 <HAL_TIM_PWM_Start+0x178>
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	2b10      	cmp	r3, #16
 8004fe0:	f000 809e 	beq.w	8005120 <HAL_TIM_PWM_Start+0x178>
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	2b14      	cmp	r3, #20
 8004fe8:	f000 809a 	beq.w	8005120 <HAL_TIM_PWM_Start+0x178>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ff4:	d10f      	bne.n	8005016 <HAL_TIM_PWM_Start+0x6e>
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	f000 8091 	beq.w	8005120 <HAL_TIM_PWM_Start+0x178>
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	2b04      	cmp	r3, #4
 8005002:	f000 808d 	beq.w	8005120 <HAL_TIM_PWM_Start+0x178>
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	2b08      	cmp	r3, #8
 800500a:	f000 8089 	beq.w	8005120 <HAL_TIM_PWM_Start+0x178>
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	2b0c      	cmp	r3, #12
 8005012:	f000 8085 	beq.w	8005120 <HAL_TIM_PWM_Start+0x178>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a71      	ldr	r2, [pc, #452]	; (80051e0 <HAL_TIM_PWM_Start+0x238>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d10b      	bne.n	8005038 <HAL_TIM_PWM_Start+0x90>
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d07c      	beq.n	8005120 <HAL_TIM_PWM_Start+0x178>
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	2b04      	cmp	r3, #4
 800502a:	d079      	beq.n	8005120 <HAL_TIM_PWM_Start+0x178>
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	2b08      	cmp	r3, #8
 8005030:	d076      	beq.n	8005120 <HAL_TIM_PWM_Start+0x178>
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	2b0c      	cmp	r3, #12
 8005036:	d073      	beq.n	8005120 <HAL_TIM_PWM_Start+0x178>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a69      	ldr	r2, [pc, #420]	; (80051e4 <HAL_TIM_PWM_Start+0x23c>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d10b      	bne.n	800505a <HAL_TIM_PWM_Start+0xb2>
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d06b      	beq.n	8005120 <HAL_TIM_PWM_Start+0x178>
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	2b04      	cmp	r3, #4
 800504c:	d068      	beq.n	8005120 <HAL_TIM_PWM_Start+0x178>
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	2b08      	cmp	r3, #8
 8005052:	d065      	beq.n	8005120 <HAL_TIM_PWM_Start+0x178>
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	2b0c      	cmp	r3, #12
 8005058:	d062      	beq.n	8005120 <HAL_TIM_PWM_Start+0x178>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4a62      	ldr	r2, [pc, #392]	; (80051e8 <HAL_TIM_PWM_Start+0x240>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d10b      	bne.n	800507c <HAL_TIM_PWM_Start+0xd4>
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d05a      	beq.n	8005120 <HAL_TIM_PWM_Start+0x178>
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	2b04      	cmp	r3, #4
 800506e:	d057      	beq.n	8005120 <HAL_TIM_PWM_Start+0x178>
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	2b08      	cmp	r3, #8
 8005074:	d054      	beq.n	8005120 <HAL_TIM_PWM_Start+0x178>
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	2b0c      	cmp	r3, #12
 800507a:	d051      	beq.n	8005120 <HAL_TIM_PWM_Start+0x178>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a5a      	ldr	r2, [pc, #360]	; (80051ec <HAL_TIM_PWM_Start+0x244>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d111      	bne.n	80050aa <HAL_TIM_PWM_Start+0x102>
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d049      	beq.n	8005120 <HAL_TIM_PWM_Start+0x178>
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	2b04      	cmp	r3, #4
 8005090:	d046      	beq.n	8005120 <HAL_TIM_PWM_Start+0x178>
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	2b08      	cmp	r3, #8
 8005096:	d043      	beq.n	8005120 <HAL_TIM_PWM_Start+0x178>
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	2b0c      	cmp	r3, #12
 800509c:	d040      	beq.n	8005120 <HAL_TIM_PWM_Start+0x178>
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	2b10      	cmp	r3, #16
 80050a2:	d03d      	beq.n	8005120 <HAL_TIM_PWM_Start+0x178>
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	2b14      	cmp	r3, #20
 80050a8:	d03a      	beq.n	8005120 <HAL_TIM_PWM_Start+0x178>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4a50      	ldr	r2, [pc, #320]	; (80051f0 <HAL_TIM_PWM_Start+0x248>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d105      	bne.n	80050c0 <HAL_TIM_PWM_Start+0x118>
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d032      	beq.n	8005120 <HAL_TIM_PWM_Start+0x178>
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	2b04      	cmp	r3, #4
 80050be:	d02f      	beq.n	8005120 <HAL_TIM_PWM_Start+0x178>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a4b      	ldr	r2, [pc, #300]	; (80051f4 <HAL_TIM_PWM_Start+0x24c>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d102      	bne.n	80050d0 <HAL_TIM_PWM_Start+0x128>
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d027      	beq.n	8005120 <HAL_TIM_PWM_Start+0x178>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4a48      	ldr	r2, [pc, #288]	; (80051f8 <HAL_TIM_PWM_Start+0x250>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d102      	bne.n	80050e0 <HAL_TIM_PWM_Start+0x138>
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d01f      	beq.n	8005120 <HAL_TIM_PWM_Start+0x178>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a45      	ldr	r2, [pc, #276]	; (80051fc <HAL_TIM_PWM_Start+0x254>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d105      	bne.n	80050f6 <HAL_TIM_PWM_Start+0x14e>
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d017      	beq.n	8005120 <HAL_TIM_PWM_Start+0x178>
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	2b04      	cmp	r3, #4
 80050f4:	d014      	beq.n	8005120 <HAL_TIM_PWM_Start+0x178>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4a41      	ldr	r2, [pc, #260]	; (8005200 <HAL_TIM_PWM_Start+0x258>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d102      	bne.n	8005106 <HAL_TIM_PWM_Start+0x15e>
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d00c      	beq.n	8005120 <HAL_TIM_PWM_Start+0x178>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4a3e      	ldr	r2, [pc, #248]	; (8005204 <HAL_TIM_PWM_Start+0x25c>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d102      	bne.n	8005116 <HAL_TIM_PWM_Start+0x16e>
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d004      	beq.n	8005120 <HAL_TIM_PWM_Start+0x178>
 8005116:	f240 51bc 	movw	r1, #1468	; 0x5bc
 800511a:	483b      	ldr	r0, [pc, #236]	; (8005208 <HAL_TIM_PWM_Start+0x260>)
 800511c:	f7fc fa4d 	bl	80015ba <assert_failed>

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d109      	bne.n	800513a <HAL_TIM_PWM_Start+0x192>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800512c:	b2db      	uxtb	r3, r3
 800512e:	2b01      	cmp	r3, #1
 8005130:	bf14      	ite	ne
 8005132:	2301      	movne	r3, #1
 8005134:	2300      	moveq	r3, #0
 8005136:	b2db      	uxtb	r3, r3
 8005138:	e03c      	b.n	80051b4 <HAL_TIM_PWM_Start+0x20c>
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	2b04      	cmp	r3, #4
 800513e:	d109      	bne.n	8005154 <HAL_TIM_PWM_Start+0x1ac>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005146:	b2db      	uxtb	r3, r3
 8005148:	2b01      	cmp	r3, #1
 800514a:	bf14      	ite	ne
 800514c:	2301      	movne	r3, #1
 800514e:	2300      	moveq	r3, #0
 8005150:	b2db      	uxtb	r3, r3
 8005152:	e02f      	b.n	80051b4 <HAL_TIM_PWM_Start+0x20c>
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	2b08      	cmp	r3, #8
 8005158:	d109      	bne.n	800516e <HAL_TIM_PWM_Start+0x1c6>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005160:	b2db      	uxtb	r3, r3
 8005162:	2b01      	cmp	r3, #1
 8005164:	bf14      	ite	ne
 8005166:	2301      	movne	r3, #1
 8005168:	2300      	moveq	r3, #0
 800516a:	b2db      	uxtb	r3, r3
 800516c:	e022      	b.n	80051b4 <HAL_TIM_PWM_Start+0x20c>
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	2b0c      	cmp	r3, #12
 8005172:	d109      	bne.n	8005188 <HAL_TIM_PWM_Start+0x1e0>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800517a:	b2db      	uxtb	r3, r3
 800517c:	2b01      	cmp	r3, #1
 800517e:	bf14      	ite	ne
 8005180:	2301      	movne	r3, #1
 8005182:	2300      	moveq	r3, #0
 8005184:	b2db      	uxtb	r3, r3
 8005186:	e015      	b.n	80051b4 <HAL_TIM_PWM_Start+0x20c>
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	2b10      	cmp	r3, #16
 800518c:	d109      	bne.n	80051a2 <HAL_TIM_PWM_Start+0x1fa>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005194:	b2db      	uxtb	r3, r3
 8005196:	2b01      	cmp	r3, #1
 8005198:	bf14      	ite	ne
 800519a:	2301      	movne	r3, #1
 800519c:	2300      	moveq	r3, #0
 800519e:	b2db      	uxtb	r3, r3
 80051a0:	e008      	b.n	80051b4 <HAL_TIM_PWM_Start+0x20c>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80051a8:	b2db      	uxtb	r3, r3
 80051aa:	2b01      	cmp	r3, #1
 80051ac:	bf14      	ite	ne
 80051ae:	2301      	movne	r3, #1
 80051b0:	2300      	moveq	r3, #0
 80051b2:	b2db      	uxtb	r3, r3
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d001      	beq.n	80051bc <HAL_TIM_PWM_Start+0x214>
  {
    return HAL_ERROR;
 80051b8:	2301      	movs	r3, #1
 80051ba:	e0aa      	b.n	8005312 <HAL_TIM_PWM_Start+0x36a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d104      	bne.n	80051cc <HAL_TIM_PWM_Start+0x224>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2202      	movs	r2, #2
 80051c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80051ca:	e03b      	b.n	8005244 <HAL_TIM_PWM_Start+0x29c>
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	2b04      	cmp	r3, #4
 80051d0:	d11c      	bne.n	800520c <HAL_TIM_PWM_Start+0x264>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2202      	movs	r2, #2
 80051d6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80051da:	e033      	b.n	8005244 <HAL_TIM_PWM_Start+0x29c>
 80051dc:	40010000 	.word	0x40010000
 80051e0:	40000400 	.word	0x40000400
 80051e4:	40000800 	.word	0x40000800
 80051e8:	40000c00 	.word	0x40000c00
 80051ec:	40010400 	.word	0x40010400
 80051f0:	40014000 	.word	0x40014000
 80051f4:	40014400 	.word	0x40014400
 80051f8:	40014800 	.word	0x40014800
 80051fc:	40001800 	.word	0x40001800
 8005200:	40001c00 	.word	0x40001c00
 8005204:	40002000 	.word	0x40002000
 8005208:	0800da20 	.word	0x0800da20
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	2b08      	cmp	r3, #8
 8005210:	d104      	bne.n	800521c <HAL_TIM_PWM_Start+0x274>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2202      	movs	r2, #2
 8005216:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800521a:	e013      	b.n	8005244 <HAL_TIM_PWM_Start+0x29c>
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	2b0c      	cmp	r3, #12
 8005220:	d104      	bne.n	800522c <HAL_TIM_PWM_Start+0x284>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2202      	movs	r2, #2
 8005226:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800522a:	e00b      	b.n	8005244 <HAL_TIM_PWM_Start+0x29c>
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	2b10      	cmp	r3, #16
 8005230:	d104      	bne.n	800523c <HAL_TIM_PWM_Start+0x294>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2202      	movs	r2, #2
 8005236:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800523a:	e003      	b.n	8005244 <HAL_TIM_PWM_Start+0x29c>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2202      	movs	r2, #2
 8005240:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	2201      	movs	r2, #1
 800524a:	6839      	ldr	r1, [r7, #0]
 800524c:	4618      	mov	r0, r3
 800524e:	f001 fba3 	bl	8006998 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4a31      	ldr	r2, [pc, #196]	; (800531c <HAL_TIM_PWM_Start+0x374>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d004      	beq.n	8005266 <HAL_TIM_PWM_Start+0x2be>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a2f      	ldr	r2, [pc, #188]	; (8005320 <HAL_TIM_PWM_Start+0x378>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d101      	bne.n	800526a <HAL_TIM_PWM_Start+0x2c2>
 8005266:	2301      	movs	r3, #1
 8005268:	e000      	b.n	800526c <HAL_TIM_PWM_Start+0x2c4>
 800526a:	2300      	movs	r3, #0
 800526c:	2b00      	cmp	r3, #0
 800526e:	d007      	beq.n	8005280 <HAL_TIM_PWM_Start+0x2d8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800527e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4a25      	ldr	r2, [pc, #148]	; (800531c <HAL_TIM_PWM_Start+0x374>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d022      	beq.n	80052d0 <HAL_TIM_PWM_Start+0x328>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005292:	d01d      	beq.n	80052d0 <HAL_TIM_PWM_Start+0x328>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a22      	ldr	r2, [pc, #136]	; (8005324 <HAL_TIM_PWM_Start+0x37c>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d018      	beq.n	80052d0 <HAL_TIM_PWM_Start+0x328>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4a21      	ldr	r2, [pc, #132]	; (8005328 <HAL_TIM_PWM_Start+0x380>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d013      	beq.n	80052d0 <HAL_TIM_PWM_Start+0x328>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4a1f      	ldr	r2, [pc, #124]	; (800532c <HAL_TIM_PWM_Start+0x384>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d00e      	beq.n	80052d0 <HAL_TIM_PWM_Start+0x328>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4a1a      	ldr	r2, [pc, #104]	; (8005320 <HAL_TIM_PWM_Start+0x378>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d009      	beq.n	80052d0 <HAL_TIM_PWM_Start+0x328>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a1b      	ldr	r2, [pc, #108]	; (8005330 <HAL_TIM_PWM_Start+0x388>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d004      	beq.n	80052d0 <HAL_TIM_PWM_Start+0x328>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4a1a      	ldr	r2, [pc, #104]	; (8005334 <HAL_TIM_PWM_Start+0x38c>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d115      	bne.n	80052fc <HAL_TIM_PWM_Start+0x354>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	689a      	ldr	r2, [r3, #8]
 80052d6:	4b18      	ldr	r3, [pc, #96]	; (8005338 <HAL_TIM_PWM_Start+0x390>)
 80052d8:	4013      	ands	r3, r2
 80052da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	2b06      	cmp	r3, #6
 80052e0:	d015      	beq.n	800530e <HAL_TIM_PWM_Start+0x366>
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052e8:	d011      	beq.n	800530e <HAL_TIM_PWM_Start+0x366>
    {
      __HAL_TIM_ENABLE(htim);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	681a      	ldr	r2, [r3, #0]
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f042 0201 	orr.w	r2, r2, #1
 80052f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052fa:	e008      	b.n	800530e <HAL_TIM_PWM_Start+0x366>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	681a      	ldr	r2, [r3, #0]
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f042 0201 	orr.w	r2, r2, #1
 800530a:	601a      	str	r2, [r3, #0]
 800530c:	e000      	b.n	8005310 <HAL_TIM_PWM_Start+0x368>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800530e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005310:	2300      	movs	r3, #0
}
 8005312:	4618      	mov	r0, r3
 8005314:	3710      	adds	r7, #16
 8005316:	46bd      	mov	sp, r7
 8005318:	bd80      	pop	{r7, pc}
 800531a:	bf00      	nop
 800531c:	40010000 	.word	0x40010000
 8005320:	40010400 	.word	0x40010400
 8005324:	40000400 	.word	0x40000400
 8005328:	40000800 	.word	0x40000800
 800532c:	40000c00 	.word	0x40000c00
 8005330:	40014000 	.word	0x40014000
 8005334:	40001800 	.word	0x40001800
 8005338:	00010007 	.word	0x00010007

0800533c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b082      	sub	sp, #8
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	691b      	ldr	r3, [r3, #16]
 800534a:	f003 0302 	and.w	r3, r3, #2
 800534e:	2b02      	cmp	r3, #2
 8005350:	d122      	bne.n	8005398 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	68db      	ldr	r3, [r3, #12]
 8005358:	f003 0302 	and.w	r3, r3, #2
 800535c:	2b02      	cmp	r3, #2
 800535e:	d11b      	bne.n	8005398 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f06f 0202 	mvn.w	r2, #2
 8005368:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2201      	movs	r2, #1
 800536e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	699b      	ldr	r3, [r3, #24]
 8005376:	f003 0303 	and.w	r3, r3, #3
 800537a:	2b00      	cmp	r3, #0
 800537c:	d003      	beq.n	8005386 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800537e:	6878      	ldr	r0, [r7, #4]
 8005380:	f000 feca 	bl	8006118 <HAL_TIM_IC_CaptureCallback>
 8005384:	e005      	b.n	8005392 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005386:	6878      	ldr	r0, [r7, #4]
 8005388:	f000 febc 	bl	8006104 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800538c:	6878      	ldr	r0, [r7, #4]
 800538e:	f000 fecd 	bl	800612c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2200      	movs	r2, #0
 8005396:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	691b      	ldr	r3, [r3, #16]
 800539e:	f003 0304 	and.w	r3, r3, #4
 80053a2:	2b04      	cmp	r3, #4
 80053a4:	d122      	bne.n	80053ec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	68db      	ldr	r3, [r3, #12]
 80053ac:	f003 0304 	and.w	r3, r3, #4
 80053b0:	2b04      	cmp	r3, #4
 80053b2:	d11b      	bne.n	80053ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f06f 0204 	mvn.w	r2, #4
 80053bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2202      	movs	r2, #2
 80053c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	699b      	ldr	r3, [r3, #24]
 80053ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d003      	beq.n	80053da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053d2:	6878      	ldr	r0, [r7, #4]
 80053d4:	f000 fea0 	bl	8006118 <HAL_TIM_IC_CaptureCallback>
 80053d8:	e005      	b.n	80053e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053da:	6878      	ldr	r0, [r7, #4]
 80053dc:	f000 fe92 	bl	8006104 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053e0:	6878      	ldr	r0, [r7, #4]
 80053e2:	f000 fea3 	bl	800612c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2200      	movs	r2, #0
 80053ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	691b      	ldr	r3, [r3, #16]
 80053f2:	f003 0308 	and.w	r3, r3, #8
 80053f6:	2b08      	cmp	r3, #8
 80053f8:	d122      	bne.n	8005440 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	68db      	ldr	r3, [r3, #12]
 8005400:	f003 0308 	and.w	r3, r3, #8
 8005404:	2b08      	cmp	r3, #8
 8005406:	d11b      	bne.n	8005440 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f06f 0208 	mvn.w	r2, #8
 8005410:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2204      	movs	r2, #4
 8005416:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	69db      	ldr	r3, [r3, #28]
 800541e:	f003 0303 	and.w	r3, r3, #3
 8005422:	2b00      	cmp	r3, #0
 8005424:	d003      	beq.n	800542e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005426:	6878      	ldr	r0, [r7, #4]
 8005428:	f000 fe76 	bl	8006118 <HAL_TIM_IC_CaptureCallback>
 800542c:	e005      	b.n	800543a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800542e:	6878      	ldr	r0, [r7, #4]
 8005430:	f000 fe68 	bl	8006104 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005434:	6878      	ldr	r0, [r7, #4]
 8005436:	f000 fe79 	bl	800612c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2200      	movs	r2, #0
 800543e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	691b      	ldr	r3, [r3, #16]
 8005446:	f003 0310 	and.w	r3, r3, #16
 800544a:	2b10      	cmp	r3, #16
 800544c:	d122      	bne.n	8005494 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	68db      	ldr	r3, [r3, #12]
 8005454:	f003 0310 	and.w	r3, r3, #16
 8005458:	2b10      	cmp	r3, #16
 800545a:	d11b      	bne.n	8005494 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f06f 0210 	mvn.w	r2, #16
 8005464:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2208      	movs	r2, #8
 800546a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	69db      	ldr	r3, [r3, #28]
 8005472:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005476:	2b00      	cmp	r3, #0
 8005478:	d003      	beq.n	8005482 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800547a:	6878      	ldr	r0, [r7, #4]
 800547c:	f000 fe4c 	bl	8006118 <HAL_TIM_IC_CaptureCallback>
 8005480:	e005      	b.n	800548e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005482:	6878      	ldr	r0, [r7, #4]
 8005484:	f000 fe3e 	bl	8006104 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005488:	6878      	ldr	r0, [r7, #4]
 800548a:	f000 fe4f 	bl	800612c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2200      	movs	r2, #0
 8005492:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	691b      	ldr	r3, [r3, #16]
 800549a:	f003 0301 	and.w	r3, r3, #1
 800549e:	2b01      	cmp	r3, #1
 80054a0:	d10e      	bne.n	80054c0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	68db      	ldr	r3, [r3, #12]
 80054a8:	f003 0301 	and.w	r3, r3, #1
 80054ac:	2b01      	cmp	r3, #1
 80054ae:	d107      	bne.n	80054c0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f06f 0201 	mvn.w	r2, #1
 80054b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80054ba:	6878      	ldr	r0, [r7, #4]
 80054bc:	f000 fe18 	bl	80060f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	691b      	ldr	r3, [r3, #16]
 80054c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054ca:	2b80      	cmp	r3, #128	; 0x80
 80054cc:	d10e      	bne.n	80054ec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	68db      	ldr	r3, [r3, #12]
 80054d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054d8:	2b80      	cmp	r3, #128	; 0x80
 80054da:	d107      	bne.n	80054ec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80054e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80054e6:	6878      	ldr	r0, [r7, #4]
 80054e8:	f001 fc42 	bl	8006d70 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	691b      	ldr	r3, [r3, #16]
 80054f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054fa:	d10e      	bne.n	800551a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	68db      	ldr	r3, [r3, #12]
 8005502:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005506:	2b80      	cmp	r3, #128	; 0x80
 8005508:	d107      	bne.n	800551a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005512:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005514:	6878      	ldr	r0, [r7, #4]
 8005516:	f001 fc35 	bl	8006d84 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	691b      	ldr	r3, [r3, #16]
 8005520:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005524:	2b40      	cmp	r3, #64	; 0x40
 8005526:	d10e      	bne.n	8005546 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	68db      	ldr	r3, [r3, #12]
 800552e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005532:	2b40      	cmp	r3, #64	; 0x40
 8005534:	d107      	bne.n	8005546 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800553e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005540:	6878      	ldr	r0, [r7, #4]
 8005542:	f000 fdfd 	bl	8006140 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	691b      	ldr	r3, [r3, #16]
 800554c:	f003 0320 	and.w	r3, r3, #32
 8005550:	2b20      	cmp	r3, #32
 8005552:	d10e      	bne.n	8005572 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	68db      	ldr	r3, [r3, #12]
 800555a:	f003 0320 	and.w	r3, r3, #32
 800555e:	2b20      	cmp	r3, #32
 8005560:	d107      	bne.n	8005572 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f06f 0220 	mvn.w	r2, #32
 800556a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800556c:	6878      	ldr	r0, [r7, #4]
 800556e:	f001 fbf5 	bl	8006d5c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005572:	bf00      	nop
 8005574:	3708      	adds	r7, #8
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}
	...

0800557c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b086      	sub	sp, #24
 8005580:	af00      	add	r7, sp, #0
 8005582:	60f8      	str	r0, [r7, #12]
 8005584:	60b9      	str	r1, [r7, #8]
 8005586:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005588:	2300      	movs	r3, #0
 800558a:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d016      	beq.n	80055c0 <HAL_TIM_PWM_ConfigChannel+0x44>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2b04      	cmp	r3, #4
 8005596:	d013      	beq.n	80055c0 <HAL_TIM_PWM_ConfigChannel+0x44>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2b08      	cmp	r3, #8
 800559c:	d010      	beq.n	80055c0 <HAL_TIM_PWM_ConfigChannel+0x44>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2b0c      	cmp	r3, #12
 80055a2:	d00d      	beq.n	80055c0 <HAL_TIM_PWM_ConfigChannel+0x44>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2b10      	cmp	r3, #16
 80055a8:	d00a      	beq.n	80055c0 <HAL_TIM_PWM_ConfigChannel+0x44>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2b14      	cmp	r3, #20
 80055ae:	d007      	beq.n	80055c0 <HAL_TIM_PWM_ConfigChannel+0x44>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2b3c      	cmp	r3, #60	; 0x3c
 80055b4:	d004      	beq.n	80055c0 <HAL_TIM_PWM_ConfigChannel+0x44>
 80055b6:	f241 01af 	movw	r1, #4271	; 0x10af
 80055ba:	4895      	ldr	r0, [pc, #596]	; (8005810 <HAL_TIM_PWM_ConfigChannel+0x294>)
 80055bc:	f7fb fffd 	bl	80015ba <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	2b60      	cmp	r3, #96	; 0x60
 80055c6:	d01c      	beq.n	8005602 <HAL_TIM_PWM_ConfigChannel+0x86>
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	2b70      	cmp	r3, #112	; 0x70
 80055ce:	d018      	beq.n	8005602 <HAL_TIM_PWM_ConfigChannel+0x86>
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4a8f      	ldr	r2, [pc, #572]	; (8005814 <HAL_TIM_PWM_ConfigChannel+0x298>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d013      	beq.n	8005602 <HAL_TIM_PWM_ConfigChannel+0x86>
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	4a8e      	ldr	r2, [pc, #568]	; (8005818 <HAL_TIM_PWM_ConfigChannel+0x29c>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d00e      	beq.n	8005602 <HAL_TIM_PWM_ConfigChannel+0x86>
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4a8c      	ldr	r2, [pc, #560]	; (800581c <HAL_TIM_PWM_ConfigChannel+0x2a0>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d009      	beq.n	8005602 <HAL_TIM_PWM_ConfigChannel+0x86>
 80055ee:	68bb      	ldr	r3, [r7, #8]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4a8b      	ldr	r2, [pc, #556]	; (8005820 <HAL_TIM_PWM_ConfigChannel+0x2a4>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d004      	beq.n	8005602 <HAL_TIM_PWM_ConfigChannel+0x86>
 80055f8:	f241 01b0 	movw	r1, #4272	; 0x10b0
 80055fc:	4884      	ldr	r0, [pc, #528]	; (8005810 <HAL_TIM_PWM_ConfigChannel+0x294>)
 80055fe:	f7fb ffdc 	bl	80015ba <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 8005602:	68bb      	ldr	r3, [r7, #8]
 8005604:	689b      	ldr	r3, [r3, #8]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d008      	beq.n	800561c <HAL_TIM_PWM_ConfigChannel+0xa0>
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	689b      	ldr	r3, [r3, #8]
 800560e:	2b02      	cmp	r3, #2
 8005610:	d004      	beq.n	800561c <HAL_TIM_PWM_ConfigChannel+0xa0>
 8005612:	f241 01b1 	movw	r1, #4273	; 0x10b1
 8005616:	487e      	ldr	r0, [pc, #504]	; (8005810 <HAL_TIM_PWM_ConfigChannel+0x294>)
 8005618:	f7fb ffcf 	bl	80015ba <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	691b      	ldr	r3, [r3, #16]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d008      	beq.n	8005636 <HAL_TIM_PWM_ConfigChannel+0xba>
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	691b      	ldr	r3, [r3, #16]
 8005628:	2b04      	cmp	r3, #4
 800562a:	d004      	beq.n	8005636 <HAL_TIM_PWM_ConfigChannel+0xba>
 800562c:	f241 01b2 	movw	r1, #4274	; 0x10b2
 8005630:	4877      	ldr	r0, [pc, #476]	; (8005810 <HAL_TIM_PWM_ConfigChannel+0x294>)
 8005632:	f7fb ffc2 	bl	80015ba <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800563c:	2b01      	cmp	r3, #1
 800563e:	d101      	bne.n	8005644 <HAL_TIM_PWM_ConfigChannel+0xc8>
 8005640:	2302      	movs	r3, #2
 8005642:	e1f3      	b.n	8005a2c <HAL_TIM_PWM_ConfigChannel+0x4b0>
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	2201      	movs	r2, #1
 8005648:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2b14      	cmp	r3, #20
 8005650:	f200 81e4 	bhi.w	8005a1c <HAL_TIM_PWM_ConfigChannel+0x4a0>
 8005654:	a201      	add	r2, pc, #4	; (adr r2, 800565c <HAL_TIM_PWM_ConfigChannel+0xe0>)
 8005656:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800565a:	bf00      	nop
 800565c:	080056b1 	.word	0x080056b1
 8005660:	08005a1d 	.word	0x08005a1d
 8005664:	08005a1d 	.word	0x08005a1d
 8005668:	08005a1d 	.word	0x08005a1d
 800566c:	08005773 	.word	0x08005773
 8005670:	08005a1d 	.word	0x08005a1d
 8005674:	08005a1d 	.word	0x08005a1d
 8005678:	08005a1d 	.word	0x08005a1d
 800567c:	08005851 	.word	0x08005851
 8005680:	08005a1d 	.word	0x08005a1d
 8005684:	08005a1d 	.word	0x08005a1d
 8005688:	08005a1d 	.word	0x08005a1d
 800568c:	080058d7 	.word	0x080058d7
 8005690:	08005a1d 	.word	0x08005a1d
 8005694:	08005a1d 	.word	0x08005a1d
 8005698:	08005a1d 	.word	0x08005a1d
 800569c:	0800595f 	.word	0x0800595f
 80056a0:	08005a1d 	.word	0x08005a1d
 80056a4:	08005a1d 	.word	0x08005a1d
 80056a8:	08005a1d 	.word	0x08005a1d
 80056ac:	080059bd 	.word	0x080059bd
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4a5b      	ldr	r2, [pc, #364]	; (8005824 <HAL_TIM_PWM_ConfigChannel+0x2a8>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d03b      	beq.n	8005732 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056c2:	d036      	beq.n	8005732 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4a57      	ldr	r2, [pc, #348]	; (8005828 <HAL_TIM_PWM_ConfigChannel+0x2ac>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d031      	beq.n	8005732 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4a56      	ldr	r2, [pc, #344]	; (800582c <HAL_TIM_PWM_ConfigChannel+0x2b0>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d02c      	beq.n	8005732 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4a54      	ldr	r2, [pc, #336]	; (8005830 <HAL_TIM_PWM_ConfigChannel+0x2b4>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d027      	beq.n	8005732 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4a53      	ldr	r2, [pc, #332]	; (8005834 <HAL_TIM_PWM_ConfigChannel+0x2b8>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d022      	beq.n	8005732 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a51      	ldr	r2, [pc, #324]	; (8005838 <HAL_TIM_PWM_ConfigChannel+0x2bc>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d01d      	beq.n	8005732 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4a50      	ldr	r2, [pc, #320]	; (800583c <HAL_TIM_PWM_ConfigChannel+0x2c0>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d018      	beq.n	8005732 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	4a4e      	ldr	r2, [pc, #312]	; (8005840 <HAL_TIM_PWM_ConfigChannel+0x2c4>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d013      	beq.n	8005732 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4a4d      	ldr	r2, [pc, #308]	; (8005844 <HAL_TIM_PWM_ConfigChannel+0x2c8>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d00e      	beq.n	8005732 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4a4b      	ldr	r2, [pc, #300]	; (8005848 <HAL_TIM_PWM_ConfigChannel+0x2cc>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d009      	beq.n	8005732 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4a4a      	ldr	r2, [pc, #296]	; (800584c <HAL_TIM_PWM_ConfigChannel+0x2d0>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d004      	beq.n	8005732 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8005728:	f241 01bc 	movw	r1, #4284	; 0x10bc
 800572c:	4838      	ldr	r0, [pc, #224]	; (8005810 <HAL_TIM_PWM_ConfigChannel+0x294>)
 800572e:	f7fb ff44 	bl	80015ba <assert_failed>

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	68b9      	ldr	r1, [r7, #8]
 8005738:	4618      	mov	r0, r3
 800573a:	f000 fdab 	bl	8006294 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	699a      	ldr	r2, [r3, #24]
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f042 0208 	orr.w	r2, r2, #8
 800574c:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	699a      	ldr	r2, [r3, #24]
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f022 0204 	bic.w	r2, r2, #4
 800575c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	6999      	ldr	r1, [r3, #24]
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	691a      	ldr	r2, [r3, #16]
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	430a      	orrs	r2, r1
 800576e:	619a      	str	r2, [r3, #24]
      break;
 8005770:	e157      	b.n	8005a22 <HAL_TIM_PWM_ConfigChannel+0x4a6>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	4a2b      	ldr	r2, [pc, #172]	; (8005824 <HAL_TIM_PWM_ConfigChannel+0x2a8>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d027      	beq.n	80057cc <HAL_TIM_PWM_ConfigChannel+0x250>
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005784:	d022      	beq.n	80057cc <HAL_TIM_PWM_ConfigChannel+0x250>
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4a27      	ldr	r2, [pc, #156]	; (8005828 <HAL_TIM_PWM_ConfigChannel+0x2ac>)
 800578c:	4293      	cmp	r3, r2
 800578e:	d01d      	beq.n	80057cc <HAL_TIM_PWM_ConfigChannel+0x250>
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	4a25      	ldr	r2, [pc, #148]	; (800582c <HAL_TIM_PWM_ConfigChannel+0x2b0>)
 8005796:	4293      	cmp	r3, r2
 8005798:	d018      	beq.n	80057cc <HAL_TIM_PWM_ConfigChannel+0x250>
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4a24      	ldr	r2, [pc, #144]	; (8005830 <HAL_TIM_PWM_ConfigChannel+0x2b4>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d013      	beq.n	80057cc <HAL_TIM_PWM_ConfigChannel+0x250>
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	4a22      	ldr	r2, [pc, #136]	; (8005834 <HAL_TIM_PWM_ConfigChannel+0x2b8>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d00e      	beq.n	80057cc <HAL_TIM_PWM_ConfigChannel+0x250>
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	4a21      	ldr	r2, [pc, #132]	; (8005838 <HAL_TIM_PWM_ConfigChannel+0x2bc>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d009      	beq.n	80057cc <HAL_TIM_PWM_ConfigChannel+0x250>
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4a21      	ldr	r2, [pc, #132]	; (8005844 <HAL_TIM_PWM_ConfigChannel+0x2c8>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d004      	beq.n	80057cc <HAL_TIM_PWM_ConfigChannel+0x250>
 80057c2:	f241 01cd 	movw	r1, #4301	; 0x10cd
 80057c6:	4812      	ldr	r0, [pc, #72]	; (8005810 <HAL_TIM_PWM_ConfigChannel+0x294>)
 80057c8:	f7fb fef7 	bl	80015ba <assert_failed>

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	68b9      	ldr	r1, [r7, #8]
 80057d2:	4618      	mov	r0, r3
 80057d4:	f000 fdfa 	bl	80063cc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	699a      	ldr	r2, [r3, #24]
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80057e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	699a      	ldr	r2, [r3, #24]
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	6999      	ldr	r1, [r3, #24]
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	691b      	ldr	r3, [r3, #16]
 8005802:	021a      	lsls	r2, r3, #8
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	430a      	orrs	r2, r1
 800580a:	619a      	str	r2, [r3, #24]
      break;
 800580c:	e109      	b.n	8005a22 <HAL_TIM_PWM_ConfigChannel+0x4a6>
 800580e:	bf00      	nop
 8005810:	0800da20 	.word	0x0800da20
 8005814:	00010040 	.word	0x00010040
 8005818:	00010050 	.word	0x00010050
 800581c:	00010060 	.word	0x00010060
 8005820:	00010070 	.word	0x00010070
 8005824:	40010000 	.word	0x40010000
 8005828:	40000400 	.word	0x40000400
 800582c:	40000800 	.word	0x40000800
 8005830:	40000c00 	.word	0x40000c00
 8005834:	40010400 	.word	0x40010400
 8005838:	40014000 	.word	0x40014000
 800583c:	40014400 	.word	0x40014400
 8005840:	40014800 	.word	0x40014800
 8005844:	40001800 	.word	0x40001800
 8005848:	40001c00 	.word	0x40001c00
 800584c:	40002000 	.word	0x40002000
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4a77      	ldr	r2, [pc, #476]	; (8005a34 <HAL_TIM_PWM_ConfigChannel+0x4b8>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d01d      	beq.n	8005896 <HAL_TIM_PWM_ConfigChannel+0x31a>
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005862:	d018      	beq.n	8005896 <HAL_TIM_PWM_ConfigChannel+0x31a>
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4a73      	ldr	r2, [pc, #460]	; (8005a38 <HAL_TIM_PWM_ConfigChannel+0x4bc>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d013      	beq.n	8005896 <HAL_TIM_PWM_ConfigChannel+0x31a>
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	4a72      	ldr	r2, [pc, #456]	; (8005a3c <HAL_TIM_PWM_ConfigChannel+0x4c0>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d00e      	beq.n	8005896 <HAL_TIM_PWM_ConfigChannel+0x31a>
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4a70      	ldr	r2, [pc, #448]	; (8005a40 <HAL_TIM_PWM_ConfigChannel+0x4c4>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d009      	beq.n	8005896 <HAL_TIM_PWM_ConfigChannel+0x31a>
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4a6f      	ldr	r2, [pc, #444]	; (8005a44 <HAL_TIM_PWM_ConfigChannel+0x4c8>)
 8005888:	4293      	cmp	r3, r2
 800588a:	d004      	beq.n	8005896 <HAL_TIM_PWM_ConfigChannel+0x31a>
 800588c:	f241 01de 	movw	r1, #4318	; 0x10de
 8005890:	486d      	ldr	r0, [pc, #436]	; (8005a48 <HAL_TIM_PWM_ConfigChannel+0x4cc>)
 8005892:	f7fb fe92 	bl	80015ba <assert_failed>

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	68b9      	ldr	r1, [r7, #8]
 800589c:	4618      	mov	r0, r3
 800589e:	f000 fe35 	bl	800650c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	69da      	ldr	r2, [r3, #28]
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f042 0208 	orr.w	r2, r2, #8
 80058b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	69da      	ldr	r2, [r3, #28]
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f022 0204 	bic.w	r2, r2, #4
 80058c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	69d9      	ldr	r1, [r3, #28]
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	691a      	ldr	r2, [r3, #16]
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	430a      	orrs	r2, r1
 80058d2:	61da      	str	r2, [r3, #28]
      break;
 80058d4:	e0a5      	b.n	8005a22 <HAL_TIM_PWM_ConfigChannel+0x4a6>
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a56      	ldr	r2, [pc, #344]	; (8005a34 <HAL_TIM_PWM_ConfigChannel+0x4b8>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d01d      	beq.n	800591c <HAL_TIM_PWM_ConfigChannel+0x3a0>
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058e8:	d018      	beq.n	800591c <HAL_TIM_PWM_ConfigChannel+0x3a0>
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4a52      	ldr	r2, [pc, #328]	; (8005a38 <HAL_TIM_PWM_ConfigChannel+0x4bc>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d013      	beq.n	800591c <HAL_TIM_PWM_ConfigChannel+0x3a0>
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a50      	ldr	r2, [pc, #320]	; (8005a3c <HAL_TIM_PWM_ConfigChannel+0x4c0>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d00e      	beq.n	800591c <HAL_TIM_PWM_ConfigChannel+0x3a0>
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4a4f      	ldr	r2, [pc, #316]	; (8005a40 <HAL_TIM_PWM_ConfigChannel+0x4c4>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d009      	beq.n	800591c <HAL_TIM_PWM_ConfigChannel+0x3a0>
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a4d      	ldr	r2, [pc, #308]	; (8005a44 <HAL_TIM_PWM_ConfigChannel+0x4c8>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d004      	beq.n	800591c <HAL_TIM_PWM_ConfigChannel+0x3a0>
 8005912:	f241 01ef 	movw	r1, #4335	; 0x10ef
 8005916:	484c      	ldr	r0, [pc, #304]	; (8005a48 <HAL_TIM_PWM_ConfigChannel+0x4cc>)
 8005918:	f7fb fe4f 	bl	80015ba <assert_failed>

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	68b9      	ldr	r1, [r7, #8]
 8005922:	4618      	mov	r0, r3
 8005924:	f000 fe92 	bl	800664c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	69da      	ldr	r2, [r3, #28]
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005936:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	69da      	ldr	r2, [r3, #28]
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005946:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	69d9      	ldr	r1, [r3, #28]
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	691b      	ldr	r3, [r3, #16]
 8005952:	021a      	lsls	r2, r3, #8
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	430a      	orrs	r2, r1
 800595a:	61da      	str	r2, [r3, #28]
      break;
 800595c:	e061      	b.n	8005a22 <HAL_TIM_PWM_ConfigChannel+0x4a6>
    }

    case TIM_CHANNEL_5:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4a34      	ldr	r2, [pc, #208]	; (8005a34 <HAL_TIM_PWM_ConfigChannel+0x4b8>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d009      	beq.n	800597c <HAL_TIM_PWM_ConfigChannel+0x400>
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4a35      	ldr	r2, [pc, #212]	; (8005a44 <HAL_TIM_PWM_ConfigChannel+0x4c8>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d004      	beq.n	800597c <HAL_TIM_PWM_ConfigChannel+0x400>
 8005972:	f44f 5188 	mov.w	r1, #4352	; 0x1100
 8005976:	4834      	ldr	r0, [pc, #208]	; (8005a48 <HAL_TIM_PWM_ConfigChannel+0x4cc>)
 8005978:	f7fb fe1f 	bl	80015ba <assert_failed>

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	68b9      	ldr	r1, [r7, #8]
 8005982:	4618      	mov	r0, r3
 8005984:	f000 fec8 	bl	8006718 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f042 0208 	orr.w	r2, r2, #8
 8005996:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f022 0204 	bic.w	r2, r2, #4
 80059a6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80059ae:	68bb      	ldr	r3, [r7, #8]
 80059b0:	691a      	ldr	r2, [r3, #16]
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	430a      	orrs	r2, r1
 80059b8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80059ba:	e032      	b.n	8005a22 <HAL_TIM_PWM_ConfigChannel+0x4a6>
    }

    case TIM_CHANNEL_6:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	4a1c      	ldr	r2, [pc, #112]	; (8005a34 <HAL_TIM_PWM_ConfigChannel+0x4b8>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d009      	beq.n	80059da <HAL_TIM_PWM_ConfigChannel+0x45e>
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	4a1e      	ldr	r2, [pc, #120]	; (8005a44 <HAL_TIM_PWM_ConfigChannel+0x4c8>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d004      	beq.n	80059da <HAL_TIM_PWM_ConfigChannel+0x45e>
 80059d0:	f241 1111 	movw	r1, #4369	; 0x1111
 80059d4:	481c      	ldr	r0, [pc, #112]	; (8005a48 <HAL_TIM_PWM_ConfigChannel+0x4cc>)
 80059d6:	f7fb fdf0 	bl	80015ba <assert_failed>

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	68b9      	ldr	r1, [r7, #8]
 80059e0:	4618      	mov	r0, r3
 80059e2:	f000 feeb 	bl	80067bc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80059f4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a04:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	691b      	ldr	r3, [r3, #16]
 8005a10:	021a      	lsls	r2, r3, #8
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	430a      	orrs	r2, r1
 8005a18:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005a1a:	e002      	b.n	8005a22 <HAL_TIM_PWM_ConfigChannel+0x4a6>
    }

    default:
      status = HAL_ERROR;
 8005a1c:	2301      	movs	r3, #1
 8005a1e:	75fb      	strb	r3, [r7, #23]
      break;
 8005a20:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	2200      	movs	r2, #0
 8005a26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005a2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	3718      	adds	r7, #24
 8005a30:	46bd      	mov	sp, r7
 8005a32:	bd80      	pop	{r7, pc}
 8005a34:	40010000 	.word	0x40010000
 8005a38:	40000400 	.word	0x40000400
 8005a3c:	40000800 	.word	0x40000800
 8005a40:	40000c00 	.word	0x40000c00
 8005a44:	40010400 	.word	0x40010400
 8005a48:	0800da20 	.word	0x0800da20

08005a4c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b084      	sub	sp, #16
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
 8005a54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a56:	2300      	movs	r3, #0
 8005a58:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a60:	2b01      	cmp	r3, #1
 8005a62:	d101      	bne.n	8005a68 <HAL_TIM_ConfigClockSource+0x1c>
 8005a64:	2302      	movs	r3, #2
 8005a66:	e332      	b.n	80060ce <HAL_TIM_ConfigClockSource+0x682>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2201      	movs	r2, #1
 8005a6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2202      	movs	r2, #2
 8005a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a80:	d029      	beq.n	8005ad6 <HAL_TIM_ConfigClockSource+0x8a>
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	2b70      	cmp	r3, #112	; 0x70
 8005a88:	d025      	beq.n	8005ad6 <HAL_TIM_ConfigClockSource+0x8a>
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a92:	d020      	beq.n	8005ad6 <HAL_TIM_ConfigClockSource+0x8a>
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	2b40      	cmp	r3, #64	; 0x40
 8005a9a:	d01c      	beq.n	8005ad6 <HAL_TIM_ConfigClockSource+0x8a>
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	2b50      	cmp	r3, #80	; 0x50
 8005aa2:	d018      	beq.n	8005ad6 <HAL_TIM_ConfigClockSource+0x8a>
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	2b60      	cmp	r3, #96	; 0x60
 8005aaa:	d014      	beq.n	8005ad6 <HAL_TIM_ConfigClockSource+0x8a>
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d010      	beq.n	8005ad6 <HAL_TIM_ConfigClockSource+0x8a>
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	2b10      	cmp	r3, #16
 8005aba:	d00c      	beq.n	8005ad6 <HAL_TIM_ConfigClockSource+0x8a>
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	2b20      	cmp	r3, #32
 8005ac2:	d008      	beq.n	8005ad6 <HAL_TIM_ConfigClockSource+0x8a>
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	2b30      	cmp	r3, #48	; 0x30
 8005aca:	d004      	beq.n	8005ad6 <HAL_TIM_ConfigClockSource+0x8a>
 8005acc:	f241 514c 	movw	r1, #5452	; 0x154c
 8005ad0:	4893      	ldr	r0, [pc, #588]	; (8005d20 <HAL_TIM_ConfigClockSource+0x2d4>)
 8005ad2:	f7fb fd72 	bl	80015ba <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	689b      	ldr	r3, [r3, #8]
 8005adc:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005ade:	68ba      	ldr	r2, [r7, #8]
 8005ae0:	4b90      	ldr	r3, [pc, #576]	; (8005d24 <HAL_TIM_ConfigClockSource+0x2d8>)
 8005ae2:	4013      	ands	r3, r2
 8005ae4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005aec:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	68ba      	ldr	r2, [r7, #8]
 8005af4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005afe:	f000 812d 	beq.w	8005d5c <HAL_TIM_ConfigClockSource+0x310>
 8005b02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b06:	f200 82d5 	bhi.w	80060b4 <HAL_TIM_ConfigClockSource+0x668>
 8005b0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b0e:	d02e      	beq.n	8005b6e <HAL_TIM_ConfigClockSource+0x122>
 8005b10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b14:	f200 82ce 	bhi.w	80060b4 <HAL_TIM_ConfigClockSource+0x668>
 8005b18:	2b70      	cmp	r3, #112	; 0x70
 8005b1a:	f000 8082 	beq.w	8005c22 <HAL_TIM_ConfigClockSource+0x1d6>
 8005b1e:	2b70      	cmp	r3, #112	; 0x70
 8005b20:	f200 82c8 	bhi.w	80060b4 <HAL_TIM_ConfigClockSource+0x668>
 8005b24:	2b60      	cmp	r3, #96	; 0x60
 8005b26:	f000 81e0 	beq.w	8005eea <HAL_TIM_ConfigClockSource+0x49e>
 8005b2a:	2b60      	cmp	r3, #96	; 0x60
 8005b2c:	f200 82c2 	bhi.w	80060b4 <HAL_TIM_ConfigClockSource+0x668>
 8005b30:	2b50      	cmp	r3, #80	; 0x50
 8005b32:	f000 8184 	beq.w	8005e3e <HAL_TIM_ConfigClockSource+0x3f2>
 8005b36:	2b50      	cmp	r3, #80	; 0x50
 8005b38:	f200 82bc 	bhi.w	80060b4 <HAL_TIM_ConfigClockSource+0x668>
 8005b3c:	2b40      	cmp	r3, #64	; 0x40
 8005b3e:	f000 8237 	beq.w	8005fb0 <HAL_TIM_ConfigClockSource+0x564>
 8005b42:	2b40      	cmp	r3, #64	; 0x40
 8005b44:	f200 82b6 	bhi.w	80060b4 <HAL_TIM_ConfigClockSource+0x668>
 8005b48:	2b30      	cmp	r3, #48	; 0x30
 8005b4a:	f000 8287 	beq.w	800605c <HAL_TIM_ConfigClockSource+0x610>
 8005b4e:	2b30      	cmp	r3, #48	; 0x30
 8005b50:	f200 82b0 	bhi.w	80060b4 <HAL_TIM_ConfigClockSource+0x668>
 8005b54:	2b20      	cmp	r3, #32
 8005b56:	f000 8281 	beq.w	800605c <HAL_TIM_ConfigClockSource+0x610>
 8005b5a:	2b20      	cmp	r3, #32
 8005b5c:	f200 82aa 	bhi.w	80060b4 <HAL_TIM_ConfigClockSource+0x668>
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	f000 827b 	beq.w	800605c <HAL_TIM_ConfigClockSource+0x610>
 8005b66:	2b10      	cmp	r3, #16
 8005b68:	f000 8278 	beq.w	800605c <HAL_TIM_ConfigClockSource+0x610>
 8005b6c:	e2a2      	b.n	80060b4 <HAL_TIM_ConfigClockSource+0x668>
  {
    case TIM_CLOCKSOURCE_INTERNAL:
    {
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4a6d      	ldr	r2, [pc, #436]	; (8005d28 <HAL_TIM_ConfigClockSource+0x2dc>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	f000 82a0 	beq.w	80060ba <HAL_TIM_ConfigClockSource+0x66e>
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b82:	f000 829a 	beq.w	80060ba <HAL_TIM_ConfigClockSource+0x66e>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4a68      	ldr	r2, [pc, #416]	; (8005d2c <HAL_TIM_ConfigClockSource+0x2e0>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	f000 8294 	beq.w	80060ba <HAL_TIM_ConfigClockSource+0x66e>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	4a66      	ldr	r2, [pc, #408]	; (8005d30 <HAL_TIM_ConfigClockSource+0x2e4>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	f000 828e 	beq.w	80060ba <HAL_TIM_ConfigClockSource+0x66e>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	4a64      	ldr	r2, [pc, #400]	; (8005d34 <HAL_TIM_ConfigClockSource+0x2e8>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	f000 8288 	beq.w	80060ba <HAL_TIM_ConfigClockSource+0x66e>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	4a62      	ldr	r2, [pc, #392]	; (8005d38 <HAL_TIM_ConfigClockSource+0x2ec>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	f000 8282 	beq.w	80060ba <HAL_TIM_ConfigClockSource+0x66e>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	4a60      	ldr	r2, [pc, #384]	; (8005d3c <HAL_TIM_ConfigClockSource+0x2f0>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	f000 827c 	beq.w	80060ba <HAL_TIM_ConfigClockSource+0x66e>
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	4a5e      	ldr	r2, [pc, #376]	; (8005d40 <HAL_TIM_ConfigClockSource+0x2f4>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	f000 8276 	beq.w	80060ba <HAL_TIM_ConfigClockSource+0x66e>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	4a5c      	ldr	r2, [pc, #368]	; (8005d44 <HAL_TIM_ConfigClockSource+0x2f8>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	f000 8270 	beq.w	80060ba <HAL_TIM_ConfigClockSource+0x66e>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	4a5a      	ldr	r2, [pc, #360]	; (8005d48 <HAL_TIM_ConfigClockSource+0x2fc>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	f000 826a 	beq.w	80060ba <HAL_TIM_ConfigClockSource+0x66e>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	4a58      	ldr	r2, [pc, #352]	; (8005d4c <HAL_TIM_ConfigClockSource+0x300>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	f000 8264 	beq.w	80060ba <HAL_TIM_ConfigClockSource+0x66e>
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	4a56      	ldr	r2, [pc, #344]	; (8005d50 <HAL_TIM_ConfigClockSource+0x304>)
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	f000 825e 	beq.w	80060ba <HAL_TIM_ConfigClockSource+0x66e>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	4a54      	ldr	r2, [pc, #336]	; (8005d54 <HAL_TIM_ConfigClockSource+0x308>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	f000 8258 	beq.w	80060ba <HAL_TIM_ConfigClockSource+0x66e>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	4a52      	ldr	r2, [pc, #328]	; (8005d58 <HAL_TIM_ConfigClockSource+0x30c>)
 8005c10:	4293      	cmp	r3, r2
 8005c12:	f000 8252 	beq.w	80060ba <HAL_TIM_ConfigClockSource+0x66e>
 8005c16:	f241 5158 	movw	r1, #5464	; 0x1558
 8005c1a:	4841      	ldr	r0, [pc, #260]	; (8005d20 <HAL_TIM_ConfigClockSource+0x2d4>)
 8005c1c:	f7fb fccd 	bl	80015ba <assert_failed>
      break;
 8005c20:	e24b      	b.n	80060ba <HAL_TIM_ConfigClockSource+0x66e>
    }

    case TIM_CLOCKSOURCE_ETRMODE1:
    {
      /* Check whether or not the timer instance supports external trigger input mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4a40      	ldr	r2, [pc, #256]	; (8005d28 <HAL_TIM_ConfigClockSource+0x2dc>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d027      	beq.n	8005c7c <HAL_TIM_ConfigClockSource+0x230>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c34:	d022      	beq.n	8005c7c <HAL_TIM_ConfigClockSource+0x230>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4a3c      	ldr	r2, [pc, #240]	; (8005d2c <HAL_TIM_ConfigClockSource+0x2e0>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d01d      	beq.n	8005c7c <HAL_TIM_ConfigClockSource+0x230>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	4a3a      	ldr	r2, [pc, #232]	; (8005d30 <HAL_TIM_ConfigClockSource+0x2e4>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d018      	beq.n	8005c7c <HAL_TIM_ConfigClockSource+0x230>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	4a39      	ldr	r2, [pc, #228]	; (8005d34 <HAL_TIM_ConfigClockSource+0x2e8>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d013      	beq.n	8005c7c <HAL_TIM_ConfigClockSource+0x230>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4a39      	ldr	r2, [pc, #228]	; (8005d40 <HAL_TIM_ConfigClockSource+0x2f4>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d00e      	beq.n	8005c7c <HAL_TIM_ConfigClockSource+0x230>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	4a38      	ldr	r2, [pc, #224]	; (8005d44 <HAL_TIM_ConfigClockSource+0x2f8>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d009      	beq.n	8005c7c <HAL_TIM_ConfigClockSource+0x230>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	4a38      	ldr	r2, [pc, #224]	; (8005d50 <HAL_TIM_ConfigClockSource+0x304>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d004      	beq.n	8005c7c <HAL_TIM_ConfigClockSource+0x230>
 8005c72:	f241 515f 	movw	r1, #5471	; 0x155f
 8005c76:	482a      	ldr	r0, [pc, #168]	; (8005d20 <HAL_TIM_ConfigClockSource+0x2d4>)
 8005c78:	f7fb fc9f 	bl	80015ba <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	689b      	ldr	r3, [r3, #8]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d013      	beq.n	8005cac <HAL_TIM_ConfigClockSource+0x260>
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	689b      	ldr	r3, [r3, #8]
 8005c88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c8c:	d00e      	beq.n	8005cac <HAL_TIM_ConfigClockSource+0x260>
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	689b      	ldr	r3, [r3, #8]
 8005c92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c96:	d009      	beq.n	8005cac <HAL_TIM_ConfigClockSource+0x260>
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	689b      	ldr	r3, [r3, #8]
 8005c9c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005ca0:	d004      	beq.n	8005cac <HAL_TIM_ConfigClockSource+0x260>
 8005ca2:	f241 5162 	movw	r1, #5474	; 0x1562
 8005ca6:	481e      	ldr	r0, [pc, #120]	; (8005d20 <HAL_TIM_ConfigClockSource+0x2d4>)
 8005ca8:	f7fb fc87 	bl	80015ba <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	685b      	ldr	r3, [r3, #4]
 8005cb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005cb4:	d014      	beq.n	8005ce0 <HAL_TIM_ConfigClockSource+0x294>
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	685b      	ldr	r3, [r3, #4]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d010      	beq.n	8005ce0 <HAL_TIM_ConfigClockSource+0x294>
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	685b      	ldr	r3, [r3, #4]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d00c      	beq.n	8005ce0 <HAL_TIM_ConfigClockSource+0x294>
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	685b      	ldr	r3, [r3, #4]
 8005cca:	2b02      	cmp	r3, #2
 8005ccc:	d008      	beq.n	8005ce0 <HAL_TIM_ConfigClockSource+0x294>
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	685b      	ldr	r3, [r3, #4]
 8005cd2:	2b0a      	cmp	r3, #10
 8005cd4:	d004      	beq.n	8005ce0 <HAL_TIM_ConfigClockSource+0x294>
 8005cd6:	f241 5163 	movw	r1, #5475	; 0x1563
 8005cda:	4811      	ldr	r0, [pc, #68]	; (8005d20 <HAL_TIM_ConfigClockSource+0x2d4>)
 8005cdc:	f7fb fc6d 	bl	80015ba <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	68db      	ldr	r3, [r3, #12]
 8005ce4:	2b0f      	cmp	r3, #15
 8005ce6:	d904      	bls.n	8005cf2 <HAL_TIM_ConfigClockSource+0x2a6>
 8005ce8:	f241 5164 	movw	r1, #5476	; 0x1564
 8005cec:	480c      	ldr	r0, [pc, #48]	; (8005d20 <HAL_TIM_ConfigClockSource+0x2d4>)
 8005cee:	f7fb fc64 	bl	80015ba <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6818      	ldr	r0, [r3, #0]
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	6899      	ldr	r1, [r3, #8]
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	685a      	ldr	r2, [r3, #4]
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	68db      	ldr	r3, [r3, #12]
 8005d02:	f000 fe29 	bl	8006958 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	689b      	ldr	r3, [r3, #8]
 8005d0c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005d0e:	68bb      	ldr	r3, [r7, #8]
 8005d10:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005d14:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	68ba      	ldr	r2, [r7, #8]
 8005d1c:	609a      	str	r2, [r3, #8]
      break;
 8005d1e:	e1cd      	b.n	80060bc <HAL_TIM_ConfigClockSource+0x670>
 8005d20:	0800da20 	.word	0x0800da20
 8005d24:	fffeff88 	.word	0xfffeff88
 8005d28:	40010000 	.word	0x40010000
 8005d2c:	40000400 	.word	0x40000400
 8005d30:	40000800 	.word	0x40000800
 8005d34:	40000c00 	.word	0x40000c00
 8005d38:	40001000 	.word	0x40001000
 8005d3c:	40001400 	.word	0x40001400
 8005d40:	40010400 	.word	0x40010400
 8005d44:	40014000 	.word	0x40014000
 8005d48:	40014400 	.word	0x40014400
 8005d4c:	40014800 	.word	0x40014800
 8005d50:	40001800 	.word	0x40001800
 8005d54:	40001c00 	.word	0x40001c00
 8005d58:	40002000 	.word	0x40002000
    }

    case TIM_CLOCKSOURCE_ETRMODE2:
    {
      /* Check whether or not the timer instance supports external trigger input mode 2 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4a8d      	ldr	r2, [pc, #564]	; (8005f98 <HAL_TIM_ConfigClockSource+0x54c>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d01d      	beq.n	8005da2 <HAL_TIM_ConfigClockSource+0x356>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d6e:	d018      	beq.n	8005da2 <HAL_TIM_ConfigClockSource+0x356>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4a89      	ldr	r2, [pc, #548]	; (8005f9c <HAL_TIM_ConfigClockSource+0x550>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d013      	beq.n	8005da2 <HAL_TIM_ConfigClockSource+0x356>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	4a88      	ldr	r2, [pc, #544]	; (8005fa0 <HAL_TIM_ConfigClockSource+0x554>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d00e      	beq.n	8005da2 <HAL_TIM_ConfigClockSource+0x356>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4a86      	ldr	r2, [pc, #536]	; (8005fa4 <HAL_TIM_ConfigClockSource+0x558>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d009      	beq.n	8005da2 <HAL_TIM_ConfigClockSource+0x356>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	4a85      	ldr	r2, [pc, #532]	; (8005fa8 <HAL_TIM_ConfigClockSource+0x55c>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d004      	beq.n	8005da2 <HAL_TIM_ConfigClockSource+0x356>
 8005d98:	f241 5177 	movw	r1, #5495	; 0x1577
 8005d9c:	4883      	ldr	r0, [pc, #524]	; (8005fac <HAL_TIM_ConfigClockSource+0x560>)
 8005d9e:	f7fb fc0c 	bl	80015ba <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	689b      	ldr	r3, [r3, #8]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d013      	beq.n	8005dd2 <HAL_TIM_ConfigClockSource+0x386>
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	689b      	ldr	r3, [r3, #8]
 8005dae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005db2:	d00e      	beq.n	8005dd2 <HAL_TIM_ConfigClockSource+0x386>
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	689b      	ldr	r3, [r3, #8]
 8005db8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005dbc:	d009      	beq.n	8005dd2 <HAL_TIM_ConfigClockSource+0x386>
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	689b      	ldr	r3, [r3, #8]
 8005dc2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005dc6:	d004      	beq.n	8005dd2 <HAL_TIM_ConfigClockSource+0x386>
 8005dc8:	f241 517a 	movw	r1, #5498	; 0x157a
 8005dcc:	4877      	ldr	r0, [pc, #476]	; (8005fac <HAL_TIM_ConfigClockSource+0x560>)
 8005dce:	f7fb fbf4 	bl	80015ba <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	685b      	ldr	r3, [r3, #4]
 8005dd6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005dda:	d014      	beq.n	8005e06 <HAL_TIM_ConfigClockSource+0x3ba>
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	685b      	ldr	r3, [r3, #4]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d010      	beq.n	8005e06 <HAL_TIM_ConfigClockSource+0x3ba>
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	685b      	ldr	r3, [r3, #4]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d00c      	beq.n	8005e06 <HAL_TIM_ConfigClockSource+0x3ba>
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	685b      	ldr	r3, [r3, #4]
 8005df0:	2b02      	cmp	r3, #2
 8005df2:	d008      	beq.n	8005e06 <HAL_TIM_ConfigClockSource+0x3ba>
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	685b      	ldr	r3, [r3, #4]
 8005df8:	2b0a      	cmp	r3, #10
 8005dfa:	d004      	beq.n	8005e06 <HAL_TIM_ConfigClockSource+0x3ba>
 8005dfc:	f241 517b 	movw	r1, #5499	; 0x157b
 8005e00:	486a      	ldr	r0, [pc, #424]	; (8005fac <HAL_TIM_ConfigClockSource+0x560>)
 8005e02:	f7fb fbda 	bl	80015ba <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	68db      	ldr	r3, [r3, #12]
 8005e0a:	2b0f      	cmp	r3, #15
 8005e0c:	d904      	bls.n	8005e18 <HAL_TIM_ConfigClockSource+0x3cc>
 8005e0e:	f241 517c 	movw	r1, #5500	; 0x157c
 8005e12:	4866      	ldr	r0, [pc, #408]	; (8005fac <HAL_TIM_ConfigClockSource+0x560>)
 8005e14:	f7fb fbd1 	bl	80015ba <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6818      	ldr	r0, [r3, #0]
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	6899      	ldr	r1, [r3, #8]
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	685a      	ldr	r2, [r3, #4]
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	68db      	ldr	r3, [r3, #12]
 8005e28:	f000 fd96 	bl	8006958 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	689a      	ldr	r2, [r3, #8]
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005e3a:	609a      	str	r2, [r3, #8]
      break;
 8005e3c:	e13e      	b.n	80060bc <HAL_TIM_ConfigClockSource+0x670>
    }

    case TIM_CLOCKSOURCE_TI1:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	4a55      	ldr	r2, [pc, #340]	; (8005f98 <HAL_TIM_ConfigClockSource+0x54c>)
 8005e44:	4293      	cmp	r3, r2
 8005e46:	d01d      	beq.n	8005e84 <HAL_TIM_ConfigClockSource+0x438>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e50:	d018      	beq.n	8005e84 <HAL_TIM_ConfigClockSource+0x438>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	4a51      	ldr	r2, [pc, #324]	; (8005f9c <HAL_TIM_ConfigClockSource+0x550>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d013      	beq.n	8005e84 <HAL_TIM_ConfigClockSource+0x438>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	4a4f      	ldr	r2, [pc, #316]	; (8005fa0 <HAL_TIM_ConfigClockSource+0x554>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d00e      	beq.n	8005e84 <HAL_TIM_ConfigClockSource+0x438>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4a4e      	ldr	r2, [pc, #312]	; (8005fa4 <HAL_TIM_ConfigClockSource+0x558>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d009      	beq.n	8005e84 <HAL_TIM_ConfigClockSource+0x438>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4a4c      	ldr	r2, [pc, #304]	; (8005fa8 <HAL_TIM_ConfigClockSource+0x55c>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d004      	beq.n	8005e84 <HAL_TIM_ConfigClockSource+0x438>
 8005e7a:	f241 518b 	movw	r1, #5515	; 0x158b
 8005e7e:	484b      	ldr	r0, [pc, #300]	; (8005fac <HAL_TIM_ConfigClockSource+0x560>)
 8005e80:	f7fb fb9b 	bl	80015ba <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	685b      	ldr	r3, [r3, #4]
 8005e88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e8c:	d014      	beq.n	8005eb8 <HAL_TIM_ConfigClockSource+0x46c>
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	685b      	ldr	r3, [r3, #4]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d010      	beq.n	8005eb8 <HAL_TIM_ConfigClockSource+0x46c>
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	685b      	ldr	r3, [r3, #4]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d00c      	beq.n	8005eb8 <HAL_TIM_ConfigClockSource+0x46c>
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	685b      	ldr	r3, [r3, #4]
 8005ea2:	2b02      	cmp	r3, #2
 8005ea4:	d008      	beq.n	8005eb8 <HAL_TIM_ConfigClockSource+0x46c>
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	685b      	ldr	r3, [r3, #4]
 8005eaa:	2b0a      	cmp	r3, #10
 8005eac:	d004      	beq.n	8005eb8 <HAL_TIM_ConfigClockSource+0x46c>
 8005eae:	f241 518e 	movw	r1, #5518	; 0x158e
 8005eb2:	483e      	ldr	r0, [pc, #248]	; (8005fac <HAL_TIM_ConfigClockSource+0x560>)
 8005eb4:	f7fb fb81 	bl	80015ba <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	68db      	ldr	r3, [r3, #12]
 8005ebc:	2b0f      	cmp	r3, #15
 8005ebe:	d904      	bls.n	8005eca <HAL_TIM_ConfigClockSource+0x47e>
 8005ec0:	f241 518f 	movw	r1, #5519	; 0x158f
 8005ec4:	4839      	ldr	r0, [pc, #228]	; (8005fac <HAL_TIM_ConfigClockSource+0x560>)
 8005ec6:	f7fb fb78 	bl	80015ba <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6818      	ldr	r0, [r3, #0]
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	6859      	ldr	r1, [r3, #4]
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	68db      	ldr	r3, [r3, #12]
 8005ed6:	461a      	mov	r2, r3
 8005ed8:	f000 fcc4 	bl	8006864 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	2150      	movs	r1, #80	; 0x50
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	f000 fd1d 	bl	8006922 <TIM_ITRx_SetConfig>
      break;
 8005ee8:	e0e8      	b.n	80060bc <HAL_TIM_ConfigClockSource+0x670>
    }

    case TIM_CLOCKSOURCE_TI2:
    {
      /* Check whether or not the timer instance supports external clock mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	4a2a      	ldr	r2, [pc, #168]	; (8005f98 <HAL_TIM_ConfigClockSource+0x54c>)
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d01d      	beq.n	8005f30 <HAL_TIM_ConfigClockSource+0x4e4>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005efc:	d018      	beq.n	8005f30 <HAL_TIM_ConfigClockSource+0x4e4>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	4a26      	ldr	r2, [pc, #152]	; (8005f9c <HAL_TIM_ConfigClockSource+0x550>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d013      	beq.n	8005f30 <HAL_TIM_ConfigClockSource+0x4e4>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	4a24      	ldr	r2, [pc, #144]	; (8005fa0 <HAL_TIM_ConfigClockSource+0x554>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d00e      	beq.n	8005f30 <HAL_TIM_ConfigClockSource+0x4e4>
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	4a23      	ldr	r2, [pc, #140]	; (8005fa4 <HAL_TIM_ConfigClockSource+0x558>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d009      	beq.n	8005f30 <HAL_TIM_ConfigClockSource+0x4e4>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4a21      	ldr	r2, [pc, #132]	; (8005fa8 <HAL_TIM_ConfigClockSource+0x55c>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d004      	beq.n	8005f30 <HAL_TIM_ConfigClockSource+0x4e4>
 8005f26:	f241 519b 	movw	r1, #5531	; 0x159b
 8005f2a:	4820      	ldr	r0, [pc, #128]	; (8005fac <HAL_TIM_ConfigClockSource+0x560>)
 8005f2c:	f7fb fb45 	bl	80015ba <assert_failed>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	685b      	ldr	r3, [r3, #4]
 8005f34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f38:	d014      	beq.n	8005f64 <HAL_TIM_ConfigClockSource+0x518>
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	685b      	ldr	r3, [r3, #4]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d010      	beq.n	8005f64 <HAL_TIM_ConfigClockSource+0x518>
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	685b      	ldr	r3, [r3, #4]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d00c      	beq.n	8005f64 <HAL_TIM_ConfigClockSource+0x518>
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	685b      	ldr	r3, [r3, #4]
 8005f4e:	2b02      	cmp	r3, #2
 8005f50:	d008      	beq.n	8005f64 <HAL_TIM_ConfigClockSource+0x518>
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	685b      	ldr	r3, [r3, #4]
 8005f56:	2b0a      	cmp	r3, #10
 8005f58:	d004      	beq.n	8005f64 <HAL_TIM_ConfigClockSource+0x518>
 8005f5a:	f241 519e 	movw	r1, #5534	; 0x159e
 8005f5e:	4813      	ldr	r0, [pc, #76]	; (8005fac <HAL_TIM_ConfigClockSource+0x560>)
 8005f60:	f7fb fb2b 	bl	80015ba <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	68db      	ldr	r3, [r3, #12]
 8005f68:	2b0f      	cmp	r3, #15
 8005f6a:	d904      	bls.n	8005f76 <HAL_TIM_ConfigClockSource+0x52a>
 8005f6c:	f241 519f 	movw	r1, #5535	; 0x159f
 8005f70:	480e      	ldr	r0, [pc, #56]	; (8005fac <HAL_TIM_ConfigClockSource+0x560>)
 8005f72:	f7fb fb22 	bl	80015ba <assert_failed>

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6818      	ldr	r0, [r3, #0]
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	6859      	ldr	r1, [r3, #4]
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	68db      	ldr	r3, [r3, #12]
 8005f82:	461a      	mov	r2, r3
 8005f84:	f000 fc9d 	bl	80068c2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	2160      	movs	r1, #96	; 0x60
 8005f8e:	4618      	mov	r0, r3
 8005f90:	f000 fcc7 	bl	8006922 <TIM_ITRx_SetConfig>
      break;
 8005f94:	e092      	b.n	80060bc <HAL_TIM_ConfigClockSource+0x670>
 8005f96:	bf00      	nop
 8005f98:	40010000 	.word	0x40010000
 8005f9c:	40000400 	.word	0x40000400
 8005fa0:	40000800 	.word	0x40000800
 8005fa4:	40000c00 	.word	0x40000c00
 8005fa8:	40010400 	.word	0x40010400
 8005fac:	0800da20 	.word	0x0800da20
    }

    case TIM_CLOCKSOURCE_TI1ED:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4a48      	ldr	r2, [pc, #288]	; (80060d8 <HAL_TIM_ConfigClockSource+0x68c>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d01d      	beq.n	8005ff6 <HAL_TIM_ConfigClockSource+0x5aa>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fc2:	d018      	beq.n	8005ff6 <HAL_TIM_ConfigClockSource+0x5aa>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	4a44      	ldr	r2, [pc, #272]	; (80060dc <HAL_TIM_ConfigClockSource+0x690>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d013      	beq.n	8005ff6 <HAL_TIM_ConfigClockSource+0x5aa>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	4a43      	ldr	r2, [pc, #268]	; (80060e0 <HAL_TIM_ConfigClockSource+0x694>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d00e      	beq.n	8005ff6 <HAL_TIM_ConfigClockSource+0x5aa>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4a41      	ldr	r2, [pc, #260]	; (80060e4 <HAL_TIM_ConfigClockSource+0x698>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d009      	beq.n	8005ff6 <HAL_TIM_ConfigClockSource+0x5aa>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	4a40      	ldr	r2, [pc, #256]	; (80060e8 <HAL_TIM_ConfigClockSource+0x69c>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d004      	beq.n	8005ff6 <HAL_TIM_ConfigClockSource+0x5aa>
 8005fec:	f241 51ab 	movw	r1, #5547	; 0x15ab
 8005ff0:	483e      	ldr	r0, [pc, #248]	; (80060ec <HAL_TIM_ConfigClockSource+0x6a0>)
 8005ff2:	f7fb fae2 	bl	80015ba <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	685b      	ldr	r3, [r3, #4]
 8005ffa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ffe:	d014      	beq.n	800602a <HAL_TIM_ConfigClockSource+0x5de>
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	685b      	ldr	r3, [r3, #4]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d010      	beq.n	800602a <HAL_TIM_ConfigClockSource+0x5de>
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	685b      	ldr	r3, [r3, #4]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d00c      	beq.n	800602a <HAL_TIM_ConfigClockSource+0x5de>
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	685b      	ldr	r3, [r3, #4]
 8006014:	2b02      	cmp	r3, #2
 8006016:	d008      	beq.n	800602a <HAL_TIM_ConfigClockSource+0x5de>
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	685b      	ldr	r3, [r3, #4]
 800601c:	2b0a      	cmp	r3, #10
 800601e:	d004      	beq.n	800602a <HAL_TIM_ConfigClockSource+0x5de>
 8006020:	f241 51ae 	movw	r1, #5550	; 0x15ae
 8006024:	4831      	ldr	r0, [pc, #196]	; (80060ec <HAL_TIM_ConfigClockSource+0x6a0>)
 8006026:	f7fb fac8 	bl	80015ba <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	68db      	ldr	r3, [r3, #12]
 800602e:	2b0f      	cmp	r3, #15
 8006030:	d904      	bls.n	800603c <HAL_TIM_ConfigClockSource+0x5f0>
 8006032:	f241 51af 	movw	r1, #5551	; 0x15af
 8006036:	482d      	ldr	r0, [pc, #180]	; (80060ec <HAL_TIM_ConfigClockSource+0x6a0>)
 8006038:	f7fb fabf 	bl	80015ba <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6818      	ldr	r0, [r3, #0]
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	6859      	ldr	r1, [r3, #4]
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	68db      	ldr	r3, [r3, #12]
 8006048:	461a      	mov	r2, r3
 800604a:	f000 fc0b 	bl	8006864 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	2140      	movs	r1, #64	; 0x40
 8006054:	4618      	mov	r0, r3
 8006056:	f000 fc64 	bl	8006922 <TIM_ITRx_SetConfig>
      break;
 800605a:	e02f      	b.n	80060bc <HAL_TIM_ConfigClockSource+0x670>
    case TIM_CLOCKSOURCE_ITR1:
    case TIM_CLOCKSOURCE_ITR2:
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4a1d      	ldr	r2, [pc, #116]	; (80060d8 <HAL_TIM_ConfigClockSource+0x68c>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d01d      	beq.n	80060a2 <HAL_TIM_ConfigClockSource+0x656>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800606e:	d018      	beq.n	80060a2 <HAL_TIM_ConfigClockSource+0x656>
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	4a19      	ldr	r2, [pc, #100]	; (80060dc <HAL_TIM_ConfigClockSource+0x690>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d013      	beq.n	80060a2 <HAL_TIM_ConfigClockSource+0x656>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	4a18      	ldr	r2, [pc, #96]	; (80060e0 <HAL_TIM_ConfigClockSource+0x694>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d00e      	beq.n	80060a2 <HAL_TIM_ConfigClockSource+0x656>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	4a16      	ldr	r2, [pc, #88]	; (80060e4 <HAL_TIM_ConfigClockSource+0x698>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d009      	beq.n	80060a2 <HAL_TIM_ConfigClockSource+0x656>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	4a15      	ldr	r2, [pc, #84]	; (80060e8 <HAL_TIM_ConfigClockSource+0x69c>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d004      	beq.n	80060a2 <HAL_TIM_ConfigClockSource+0x656>
 8006098:	f241 51be 	movw	r1, #5566	; 0x15be
 800609c:	4813      	ldr	r0, [pc, #76]	; (80060ec <HAL_TIM_ConfigClockSource+0x6a0>)
 800609e:	f7fb fa8c 	bl	80015ba <assert_failed>

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681a      	ldr	r2, [r3, #0]
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4619      	mov	r1, r3
 80060ac:	4610      	mov	r0, r2
 80060ae:	f000 fc38 	bl	8006922 <TIM_ITRx_SetConfig>
      break;
 80060b2:	e003      	b.n	80060bc <HAL_TIM_ConfigClockSource+0x670>
    }

    default:
      status = HAL_ERROR;
 80060b4:	2301      	movs	r3, #1
 80060b6:	73fb      	strb	r3, [r7, #15]
      break;
 80060b8:	e000      	b.n	80060bc <HAL_TIM_ConfigClockSource+0x670>
      break;
 80060ba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2201      	movs	r2, #1
 80060c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2200      	movs	r2, #0
 80060c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80060cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80060ce:	4618      	mov	r0, r3
 80060d0:	3710      	adds	r7, #16
 80060d2:	46bd      	mov	sp, r7
 80060d4:	bd80      	pop	{r7, pc}
 80060d6:	bf00      	nop
 80060d8:	40010000 	.word	0x40010000
 80060dc:	40000400 	.word	0x40000400
 80060e0:	40000800 	.word	0x40000800
 80060e4:	40000c00 	.word	0x40000c00
 80060e8:	40010400 	.word	0x40010400
 80060ec:	0800da20 	.word	0x0800da20

080060f0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80060f0:	b480      	push	{r7}
 80060f2:	b083      	sub	sp, #12
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80060f8:	bf00      	nop
 80060fa:	370c      	adds	r7, #12
 80060fc:	46bd      	mov	sp, r7
 80060fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006102:	4770      	bx	lr

08006104 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006104:	b480      	push	{r7}
 8006106:	b083      	sub	sp, #12
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800610c:	bf00      	nop
 800610e:	370c      	adds	r7, #12
 8006110:	46bd      	mov	sp, r7
 8006112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006116:	4770      	bx	lr

08006118 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006118:	b480      	push	{r7}
 800611a:	b083      	sub	sp, #12
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006120:	bf00      	nop
 8006122:	370c      	adds	r7, #12
 8006124:	46bd      	mov	sp, r7
 8006126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612a:	4770      	bx	lr

0800612c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800612c:	b480      	push	{r7}
 800612e:	b083      	sub	sp, #12
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006134:	bf00      	nop
 8006136:	370c      	adds	r7, #12
 8006138:	46bd      	mov	sp, r7
 800613a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613e:	4770      	bx	lr

08006140 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006140:	b480      	push	{r7}
 8006142:	b083      	sub	sp, #12
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006148:	bf00      	nop
 800614a:	370c      	adds	r7, #12
 800614c:	46bd      	mov	sp, r7
 800614e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006152:	4770      	bx	lr

08006154 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006154:	b480      	push	{r7}
 8006156:	b085      	sub	sp, #20
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
 800615c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	4a40      	ldr	r2, [pc, #256]	; (8006268 <TIM_Base_SetConfig+0x114>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d013      	beq.n	8006194 <TIM_Base_SetConfig+0x40>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006172:	d00f      	beq.n	8006194 <TIM_Base_SetConfig+0x40>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	4a3d      	ldr	r2, [pc, #244]	; (800626c <TIM_Base_SetConfig+0x118>)
 8006178:	4293      	cmp	r3, r2
 800617a:	d00b      	beq.n	8006194 <TIM_Base_SetConfig+0x40>
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	4a3c      	ldr	r2, [pc, #240]	; (8006270 <TIM_Base_SetConfig+0x11c>)
 8006180:	4293      	cmp	r3, r2
 8006182:	d007      	beq.n	8006194 <TIM_Base_SetConfig+0x40>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	4a3b      	ldr	r2, [pc, #236]	; (8006274 <TIM_Base_SetConfig+0x120>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d003      	beq.n	8006194 <TIM_Base_SetConfig+0x40>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	4a3a      	ldr	r2, [pc, #232]	; (8006278 <TIM_Base_SetConfig+0x124>)
 8006190:	4293      	cmp	r3, r2
 8006192:	d108      	bne.n	80061a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800619a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	685b      	ldr	r3, [r3, #4]
 80061a0:	68fa      	ldr	r2, [r7, #12]
 80061a2:	4313      	orrs	r3, r2
 80061a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	4a2f      	ldr	r2, [pc, #188]	; (8006268 <TIM_Base_SetConfig+0x114>)
 80061aa:	4293      	cmp	r3, r2
 80061ac:	d02b      	beq.n	8006206 <TIM_Base_SetConfig+0xb2>
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061b4:	d027      	beq.n	8006206 <TIM_Base_SetConfig+0xb2>
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	4a2c      	ldr	r2, [pc, #176]	; (800626c <TIM_Base_SetConfig+0x118>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d023      	beq.n	8006206 <TIM_Base_SetConfig+0xb2>
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	4a2b      	ldr	r2, [pc, #172]	; (8006270 <TIM_Base_SetConfig+0x11c>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d01f      	beq.n	8006206 <TIM_Base_SetConfig+0xb2>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	4a2a      	ldr	r2, [pc, #168]	; (8006274 <TIM_Base_SetConfig+0x120>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d01b      	beq.n	8006206 <TIM_Base_SetConfig+0xb2>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	4a29      	ldr	r2, [pc, #164]	; (8006278 <TIM_Base_SetConfig+0x124>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d017      	beq.n	8006206 <TIM_Base_SetConfig+0xb2>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	4a28      	ldr	r2, [pc, #160]	; (800627c <TIM_Base_SetConfig+0x128>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	d013      	beq.n	8006206 <TIM_Base_SetConfig+0xb2>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	4a27      	ldr	r2, [pc, #156]	; (8006280 <TIM_Base_SetConfig+0x12c>)
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d00f      	beq.n	8006206 <TIM_Base_SetConfig+0xb2>
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	4a26      	ldr	r2, [pc, #152]	; (8006284 <TIM_Base_SetConfig+0x130>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d00b      	beq.n	8006206 <TIM_Base_SetConfig+0xb2>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	4a25      	ldr	r2, [pc, #148]	; (8006288 <TIM_Base_SetConfig+0x134>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d007      	beq.n	8006206 <TIM_Base_SetConfig+0xb2>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	4a24      	ldr	r2, [pc, #144]	; (800628c <TIM_Base_SetConfig+0x138>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d003      	beq.n	8006206 <TIM_Base_SetConfig+0xb2>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	4a23      	ldr	r2, [pc, #140]	; (8006290 <TIM_Base_SetConfig+0x13c>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d108      	bne.n	8006218 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800620c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	68db      	ldr	r3, [r3, #12]
 8006212:	68fa      	ldr	r2, [r7, #12]
 8006214:	4313      	orrs	r3, r2
 8006216:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	695b      	ldr	r3, [r3, #20]
 8006222:	4313      	orrs	r3, r2
 8006224:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	68fa      	ldr	r2, [r7, #12]
 800622a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	689a      	ldr	r2, [r3, #8]
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	681a      	ldr	r2, [r3, #0]
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	4a0a      	ldr	r2, [pc, #40]	; (8006268 <TIM_Base_SetConfig+0x114>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d003      	beq.n	800624c <TIM_Base_SetConfig+0xf8>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	4a0c      	ldr	r2, [pc, #48]	; (8006278 <TIM_Base_SetConfig+0x124>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d103      	bne.n	8006254 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	691a      	ldr	r2, [r3, #16]
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2201      	movs	r2, #1
 8006258:	615a      	str	r2, [r3, #20]
}
 800625a:	bf00      	nop
 800625c:	3714      	adds	r7, #20
 800625e:	46bd      	mov	sp, r7
 8006260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006264:	4770      	bx	lr
 8006266:	bf00      	nop
 8006268:	40010000 	.word	0x40010000
 800626c:	40000400 	.word	0x40000400
 8006270:	40000800 	.word	0x40000800
 8006274:	40000c00 	.word	0x40000c00
 8006278:	40010400 	.word	0x40010400
 800627c:	40014000 	.word	0x40014000
 8006280:	40014400 	.word	0x40014400
 8006284:	40014800 	.word	0x40014800
 8006288:	40001800 	.word	0x40001800
 800628c:	40001c00 	.word	0x40001c00
 8006290:	40002000 	.word	0x40002000

08006294 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b086      	sub	sp, #24
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
 800629c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6a1b      	ldr	r3, [r3, #32]
 80062a2:	f023 0201 	bic.w	r2, r3, #1
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6a1b      	ldr	r3, [r3, #32]
 80062ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	685b      	ldr	r3, [r3, #4]
 80062b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	699b      	ldr	r3, [r3, #24]
 80062ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80062bc:	68fa      	ldr	r2, [r7, #12]
 80062be:	4b3f      	ldr	r3, [pc, #252]	; (80063bc <TIM_OC1_SetConfig+0x128>)
 80062c0:	4013      	ands	r3, r2
 80062c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	f023 0303 	bic.w	r3, r3, #3
 80062ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	68fa      	ldr	r2, [r7, #12]
 80062d2:	4313      	orrs	r3, r2
 80062d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80062d6:	697b      	ldr	r3, [r7, #20]
 80062d8:	f023 0302 	bic.w	r3, r3, #2
 80062dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	689b      	ldr	r3, [r3, #8]
 80062e2:	697a      	ldr	r2, [r7, #20]
 80062e4:	4313      	orrs	r3, r2
 80062e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	4a35      	ldr	r2, [pc, #212]	; (80063c0 <TIM_OC1_SetConfig+0x12c>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d003      	beq.n	80062f8 <TIM_OC1_SetConfig+0x64>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	4a34      	ldr	r2, [pc, #208]	; (80063c4 <TIM_OC1_SetConfig+0x130>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d119      	bne.n	800632c <TIM_OC1_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	68db      	ldr	r3, [r3, #12]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d008      	beq.n	8006312 <TIM_OC1_SetConfig+0x7e>
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	68db      	ldr	r3, [r3, #12]
 8006304:	2b08      	cmp	r3, #8
 8006306:	d004      	beq.n	8006312 <TIM_OC1_SetConfig+0x7e>
 8006308:	f641 3167 	movw	r1, #7015	; 0x1b67
 800630c:	482e      	ldr	r0, [pc, #184]	; (80063c8 <TIM_OC1_SetConfig+0x134>)
 800630e:	f7fb f954 	bl	80015ba <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006312:	697b      	ldr	r3, [r7, #20]
 8006314:	f023 0308 	bic.w	r3, r3, #8
 8006318:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	68db      	ldr	r3, [r3, #12]
 800631e:	697a      	ldr	r2, [r7, #20]
 8006320:	4313      	orrs	r3, r2
 8006322:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006324:	697b      	ldr	r3, [r7, #20]
 8006326:	f023 0304 	bic.w	r3, r3, #4
 800632a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	4a24      	ldr	r2, [pc, #144]	; (80063c0 <TIM_OC1_SetConfig+0x12c>)
 8006330:	4293      	cmp	r3, r2
 8006332:	d003      	beq.n	800633c <TIM_OC1_SetConfig+0xa8>
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	4a23      	ldr	r2, [pc, #140]	; (80063c4 <TIM_OC1_SetConfig+0x130>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d12d      	bne.n	8006398 <TIM_OC1_SetConfig+0x104>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	699b      	ldr	r3, [r3, #24]
 8006340:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006344:	d008      	beq.n	8006358 <TIM_OC1_SetConfig+0xc4>
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	699b      	ldr	r3, [r3, #24]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d004      	beq.n	8006358 <TIM_OC1_SetConfig+0xc4>
 800634e:	f641 3174 	movw	r1, #7028	; 0x1b74
 8006352:	481d      	ldr	r0, [pc, #116]	; (80063c8 <TIM_OC1_SetConfig+0x134>)
 8006354:	f7fb f931 	bl	80015ba <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	695b      	ldr	r3, [r3, #20]
 800635c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006360:	d008      	beq.n	8006374 <TIM_OC1_SetConfig+0xe0>
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	695b      	ldr	r3, [r3, #20]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d004      	beq.n	8006374 <TIM_OC1_SetConfig+0xe0>
 800636a:	f641 3175 	movw	r1, #7029	; 0x1b75
 800636e:	4816      	ldr	r0, [pc, #88]	; (80063c8 <TIM_OC1_SetConfig+0x134>)
 8006370:	f7fb f923 	bl	80015ba <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006374:	693b      	ldr	r3, [r7, #16]
 8006376:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800637a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800637c:	693b      	ldr	r3, [r7, #16]
 800637e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006382:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	695b      	ldr	r3, [r3, #20]
 8006388:	693a      	ldr	r2, [r7, #16]
 800638a:	4313      	orrs	r3, r2
 800638c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	699b      	ldr	r3, [r3, #24]
 8006392:	693a      	ldr	r2, [r7, #16]
 8006394:	4313      	orrs	r3, r2
 8006396:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	693a      	ldr	r2, [r7, #16]
 800639c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	68fa      	ldr	r2, [r7, #12]
 80063a2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	685a      	ldr	r2, [r3, #4]
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	697a      	ldr	r2, [r7, #20]
 80063b0:	621a      	str	r2, [r3, #32]
}
 80063b2:	bf00      	nop
 80063b4:	3718      	adds	r7, #24
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bd80      	pop	{r7, pc}
 80063ba:	bf00      	nop
 80063bc:	fffeff8f 	.word	0xfffeff8f
 80063c0:	40010000 	.word	0x40010000
 80063c4:	40010400 	.word	0x40010400
 80063c8:	0800da20 	.word	0x0800da20

080063cc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b086      	sub	sp, #24
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
 80063d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6a1b      	ldr	r3, [r3, #32]
 80063da:	f023 0210 	bic.w	r2, r3, #16
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6a1b      	ldr	r3, [r3, #32]
 80063e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	685b      	ldr	r3, [r3, #4]
 80063ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	699b      	ldr	r3, [r3, #24]
 80063f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80063f4:	68fa      	ldr	r2, [r7, #12]
 80063f6:	4b41      	ldr	r3, [pc, #260]	; (80064fc <TIM_OC2_SetConfig+0x130>)
 80063f8:	4013      	ands	r3, r2
 80063fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006402:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	021b      	lsls	r3, r3, #8
 800640a:	68fa      	ldr	r2, [r7, #12]
 800640c:	4313      	orrs	r3, r2
 800640e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006410:	697b      	ldr	r3, [r7, #20]
 8006412:	f023 0320 	bic.w	r3, r3, #32
 8006416:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	689b      	ldr	r3, [r3, #8]
 800641c:	011b      	lsls	r3, r3, #4
 800641e:	697a      	ldr	r2, [r7, #20]
 8006420:	4313      	orrs	r3, r2
 8006422:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	4a36      	ldr	r2, [pc, #216]	; (8006500 <TIM_OC2_SetConfig+0x134>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d003      	beq.n	8006434 <TIM_OC2_SetConfig+0x68>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	4a35      	ldr	r2, [pc, #212]	; (8006504 <TIM_OC2_SetConfig+0x138>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d11a      	bne.n	800646a <TIM_OC2_SetConfig+0x9e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	68db      	ldr	r3, [r3, #12]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d008      	beq.n	800644e <TIM_OC2_SetConfig+0x82>
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	68db      	ldr	r3, [r3, #12]
 8006440:	2b08      	cmp	r3, #8
 8006442:	d004      	beq.n	800644e <TIM_OC2_SetConfig+0x82>
 8006444:	f641 31b2 	movw	r1, #7090	; 0x1bb2
 8006448:	482f      	ldr	r0, [pc, #188]	; (8006508 <TIM_OC2_SetConfig+0x13c>)
 800644a:	f7fb f8b6 	bl	80015ba <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800644e:	697b      	ldr	r3, [r7, #20]
 8006450:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006454:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	68db      	ldr	r3, [r3, #12]
 800645a:	011b      	lsls	r3, r3, #4
 800645c:	697a      	ldr	r2, [r7, #20]
 800645e:	4313      	orrs	r3, r2
 8006460:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006462:	697b      	ldr	r3, [r7, #20]
 8006464:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006468:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	4a24      	ldr	r2, [pc, #144]	; (8006500 <TIM_OC2_SetConfig+0x134>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d003      	beq.n	800647a <TIM_OC2_SetConfig+0xae>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	4a23      	ldr	r2, [pc, #140]	; (8006504 <TIM_OC2_SetConfig+0x138>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d12f      	bne.n	80064da <TIM_OC2_SetConfig+0x10e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	699b      	ldr	r3, [r3, #24]
 800647e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006482:	d008      	beq.n	8006496 <TIM_OC2_SetConfig+0xca>
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	699b      	ldr	r3, [r3, #24]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d004      	beq.n	8006496 <TIM_OC2_SetConfig+0xca>
 800648c:	f44f 51de 	mov.w	r1, #7104	; 0x1bc0
 8006490:	481d      	ldr	r0, [pc, #116]	; (8006508 <TIM_OC2_SetConfig+0x13c>)
 8006492:	f7fb f892 	bl	80015ba <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	695b      	ldr	r3, [r3, #20]
 800649a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800649e:	d008      	beq.n	80064b2 <TIM_OC2_SetConfig+0xe6>
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	695b      	ldr	r3, [r3, #20]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d004      	beq.n	80064b2 <TIM_OC2_SetConfig+0xe6>
 80064a8:	f641 31c1 	movw	r1, #7105	; 0x1bc1
 80064ac:	4816      	ldr	r0, [pc, #88]	; (8006508 <TIM_OC2_SetConfig+0x13c>)
 80064ae:	f7fb f884 	bl	80015ba <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80064b2:	693b      	ldr	r3, [r7, #16]
 80064b4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80064b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80064ba:	693b      	ldr	r3, [r7, #16]
 80064bc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80064c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	695b      	ldr	r3, [r3, #20]
 80064c6:	009b      	lsls	r3, r3, #2
 80064c8:	693a      	ldr	r2, [r7, #16]
 80064ca:	4313      	orrs	r3, r2
 80064cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	699b      	ldr	r3, [r3, #24]
 80064d2:	009b      	lsls	r3, r3, #2
 80064d4:	693a      	ldr	r2, [r7, #16]
 80064d6:	4313      	orrs	r3, r2
 80064d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	693a      	ldr	r2, [r7, #16]
 80064de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	68fa      	ldr	r2, [r7, #12]
 80064e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	685a      	ldr	r2, [r3, #4]
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	697a      	ldr	r2, [r7, #20]
 80064f2:	621a      	str	r2, [r3, #32]
}
 80064f4:	bf00      	nop
 80064f6:	3718      	adds	r7, #24
 80064f8:	46bd      	mov	sp, r7
 80064fa:	bd80      	pop	{r7, pc}
 80064fc:	feff8fff 	.word	0xfeff8fff
 8006500:	40010000 	.word	0x40010000
 8006504:	40010400 	.word	0x40010400
 8006508:	0800da20 	.word	0x0800da20

0800650c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b086      	sub	sp, #24
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
 8006514:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6a1b      	ldr	r3, [r3, #32]
 800651a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6a1b      	ldr	r3, [r3, #32]
 8006526:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	685b      	ldr	r3, [r3, #4]
 800652c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	69db      	ldr	r3, [r3, #28]
 8006532:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006534:	68fa      	ldr	r2, [r7, #12]
 8006536:	4b41      	ldr	r3, [pc, #260]	; (800663c <TIM_OC3_SetConfig+0x130>)
 8006538:	4013      	ands	r3, r2
 800653a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	f023 0303 	bic.w	r3, r3, #3
 8006542:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	68fa      	ldr	r2, [r7, #12]
 800654a:	4313      	orrs	r3, r2
 800654c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800654e:	697b      	ldr	r3, [r7, #20]
 8006550:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006554:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	689b      	ldr	r3, [r3, #8]
 800655a:	021b      	lsls	r3, r3, #8
 800655c:	697a      	ldr	r2, [r7, #20]
 800655e:	4313      	orrs	r3, r2
 8006560:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	4a36      	ldr	r2, [pc, #216]	; (8006640 <TIM_OC3_SetConfig+0x134>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d003      	beq.n	8006572 <TIM_OC3_SetConfig+0x66>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	4a35      	ldr	r2, [pc, #212]	; (8006644 <TIM_OC3_SetConfig+0x138>)
 800656e:	4293      	cmp	r3, r2
 8006570:	d11a      	bne.n	80065a8 <TIM_OC3_SetConfig+0x9c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	68db      	ldr	r3, [r3, #12]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d008      	beq.n	800658c <TIM_OC3_SetConfig+0x80>
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	68db      	ldr	r3, [r3, #12]
 800657e:	2b08      	cmp	r3, #8
 8006580:	d004      	beq.n	800658c <TIM_OC3_SetConfig+0x80>
 8006582:	f641 31fd 	movw	r1, #7165	; 0x1bfd
 8006586:	4830      	ldr	r0, [pc, #192]	; (8006648 <TIM_OC3_SetConfig+0x13c>)
 8006588:	f7fb f817 	bl	80015ba <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800658c:	697b      	ldr	r3, [r7, #20]
 800658e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006592:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	68db      	ldr	r3, [r3, #12]
 8006598:	021b      	lsls	r3, r3, #8
 800659a:	697a      	ldr	r2, [r7, #20]
 800659c:	4313      	orrs	r3, r2
 800659e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80065a0:	697b      	ldr	r3, [r7, #20]
 80065a2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80065a6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	4a25      	ldr	r2, [pc, #148]	; (8006640 <TIM_OC3_SetConfig+0x134>)
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d003      	beq.n	80065b8 <TIM_OC3_SetConfig+0xac>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	4a24      	ldr	r2, [pc, #144]	; (8006644 <TIM_OC3_SetConfig+0x138>)
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d12f      	bne.n	8006618 <TIM_OC3_SetConfig+0x10c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	699b      	ldr	r3, [r3, #24]
 80065bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80065c0:	d008      	beq.n	80065d4 <TIM_OC3_SetConfig+0xc8>
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	699b      	ldr	r3, [r3, #24]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d004      	beq.n	80065d4 <TIM_OC3_SetConfig+0xc8>
 80065ca:	f641 410a 	movw	r1, #7178	; 0x1c0a
 80065ce:	481e      	ldr	r0, [pc, #120]	; (8006648 <TIM_OC3_SetConfig+0x13c>)
 80065d0:	f7fa fff3 	bl	80015ba <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	695b      	ldr	r3, [r3, #20]
 80065d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065dc:	d008      	beq.n	80065f0 <TIM_OC3_SetConfig+0xe4>
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	695b      	ldr	r3, [r3, #20]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d004      	beq.n	80065f0 <TIM_OC3_SetConfig+0xe4>
 80065e6:	f641 410b 	movw	r1, #7179	; 0x1c0b
 80065ea:	4817      	ldr	r0, [pc, #92]	; (8006648 <TIM_OC3_SetConfig+0x13c>)
 80065ec:	f7fa ffe5 	bl	80015ba <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80065f0:	693b      	ldr	r3, [r7, #16]
 80065f2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80065f6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80065f8:	693b      	ldr	r3, [r7, #16]
 80065fa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80065fe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	695b      	ldr	r3, [r3, #20]
 8006604:	011b      	lsls	r3, r3, #4
 8006606:	693a      	ldr	r2, [r7, #16]
 8006608:	4313      	orrs	r3, r2
 800660a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	699b      	ldr	r3, [r3, #24]
 8006610:	011b      	lsls	r3, r3, #4
 8006612:	693a      	ldr	r2, [r7, #16]
 8006614:	4313      	orrs	r3, r2
 8006616:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	693a      	ldr	r2, [r7, #16]
 800661c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	68fa      	ldr	r2, [r7, #12]
 8006622:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	685a      	ldr	r2, [r3, #4]
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	697a      	ldr	r2, [r7, #20]
 8006630:	621a      	str	r2, [r3, #32]
}
 8006632:	bf00      	nop
 8006634:	3718      	adds	r7, #24
 8006636:	46bd      	mov	sp, r7
 8006638:	bd80      	pop	{r7, pc}
 800663a:	bf00      	nop
 800663c:	fffeff8f 	.word	0xfffeff8f
 8006640:	40010000 	.word	0x40010000
 8006644:	40010400 	.word	0x40010400
 8006648:	0800da20 	.word	0x0800da20

0800664c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b086      	sub	sp, #24
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
 8006654:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6a1b      	ldr	r3, [r3, #32]
 800665a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6a1b      	ldr	r3, [r3, #32]
 8006666:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	685b      	ldr	r3, [r3, #4]
 800666c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	69db      	ldr	r3, [r3, #28]
 8006672:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006674:	68fa      	ldr	r2, [r7, #12]
 8006676:	4b24      	ldr	r3, [pc, #144]	; (8006708 <TIM_OC4_SetConfig+0xbc>)
 8006678:	4013      	ands	r3, r2
 800667a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006682:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	021b      	lsls	r3, r3, #8
 800668a:	68fa      	ldr	r2, [r7, #12]
 800668c:	4313      	orrs	r3, r2
 800668e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006690:	693b      	ldr	r3, [r7, #16]
 8006692:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006696:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	689b      	ldr	r3, [r3, #8]
 800669c:	031b      	lsls	r3, r3, #12
 800669e:	693a      	ldr	r2, [r7, #16]
 80066a0:	4313      	orrs	r3, r2
 80066a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	4a19      	ldr	r2, [pc, #100]	; (800670c <TIM_OC4_SetConfig+0xc0>)
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d003      	beq.n	80066b4 <TIM_OC4_SetConfig+0x68>
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	4a18      	ldr	r2, [pc, #96]	; (8006710 <TIM_OC4_SetConfig+0xc4>)
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d117      	bne.n	80066e4 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	695b      	ldr	r3, [r3, #20]
 80066b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066bc:	d008      	beq.n	80066d0 <TIM_OC4_SetConfig+0x84>
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	695b      	ldr	r3, [r3, #20]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d004      	beq.n	80066d0 <TIM_OC4_SetConfig+0x84>
 80066c6:	f641 4149 	movw	r1, #7241	; 0x1c49
 80066ca:	4812      	ldr	r0, [pc, #72]	; (8006714 <TIM_OC4_SetConfig+0xc8>)
 80066cc:	f7fa ff75 	bl	80015ba <assert_failed>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80066d0:	697b      	ldr	r3, [r7, #20]
 80066d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80066d6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	695b      	ldr	r3, [r3, #20]
 80066dc:	019b      	lsls	r3, r3, #6
 80066de:	697a      	ldr	r2, [r7, #20]
 80066e0:	4313      	orrs	r3, r2
 80066e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	697a      	ldr	r2, [r7, #20]
 80066e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	68fa      	ldr	r2, [r7, #12]
 80066ee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	685a      	ldr	r2, [r3, #4]
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	693a      	ldr	r2, [r7, #16]
 80066fc:	621a      	str	r2, [r3, #32]
}
 80066fe:	bf00      	nop
 8006700:	3718      	adds	r7, #24
 8006702:	46bd      	mov	sp, r7
 8006704:	bd80      	pop	{r7, pc}
 8006706:	bf00      	nop
 8006708:	feff8fff 	.word	0xfeff8fff
 800670c:	40010000 	.word	0x40010000
 8006710:	40010400 	.word	0x40010400
 8006714:	0800da20 	.word	0x0800da20

08006718 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006718:	b480      	push	{r7}
 800671a:	b087      	sub	sp, #28
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
 8006720:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6a1b      	ldr	r3, [r3, #32]
 8006726:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6a1b      	ldr	r3, [r3, #32]
 8006732:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	685b      	ldr	r3, [r3, #4]
 8006738:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800673e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006740:	68fa      	ldr	r2, [r7, #12]
 8006742:	4b1b      	ldr	r3, [pc, #108]	; (80067b0 <TIM_OC5_SetConfig+0x98>)
 8006744:	4013      	ands	r3, r2
 8006746:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	68fa      	ldr	r2, [r7, #12]
 800674e:	4313      	orrs	r3, r2
 8006750:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006752:	693b      	ldr	r3, [r7, #16]
 8006754:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006758:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	689b      	ldr	r3, [r3, #8]
 800675e:	041b      	lsls	r3, r3, #16
 8006760:	693a      	ldr	r2, [r7, #16]
 8006762:	4313      	orrs	r3, r2
 8006764:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	4a12      	ldr	r2, [pc, #72]	; (80067b4 <TIM_OC5_SetConfig+0x9c>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d003      	beq.n	8006776 <TIM_OC5_SetConfig+0x5e>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	4a11      	ldr	r2, [pc, #68]	; (80067b8 <TIM_OC5_SetConfig+0xa0>)
 8006772:	4293      	cmp	r3, r2
 8006774:	d109      	bne.n	800678a <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006776:	697b      	ldr	r3, [r7, #20]
 8006778:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800677c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	695b      	ldr	r3, [r3, #20]
 8006782:	021b      	lsls	r3, r3, #8
 8006784:	697a      	ldr	r2, [r7, #20]
 8006786:	4313      	orrs	r3, r2
 8006788:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	697a      	ldr	r2, [r7, #20]
 800678e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	68fa      	ldr	r2, [r7, #12]
 8006794:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	685a      	ldr	r2, [r3, #4]
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	693a      	ldr	r2, [r7, #16]
 80067a2:	621a      	str	r2, [r3, #32]
}
 80067a4:	bf00      	nop
 80067a6:	371c      	adds	r7, #28
 80067a8:	46bd      	mov	sp, r7
 80067aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ae:	4770      	bx	lr
 80067b0:	fffeff8f 	.word	0xfffeff8f
 80067b4:	40010000 	.word	0x40010000
 80067b8:	40010400 	.word	0x40010400

080067bc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80067bc:	b480      	push	{r7}
 80067be:	b087      	sub	sp, #28
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
 80067c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6a1b      	ldr	r3, [r3, #32]
 80067ca:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6a1b      	ldr	r3, [r3, #32]
 80067d6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	685b      	ldr	r3, [r3, #4]
 80067dc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80067e4:	68fa      	ldr	r2, [r7, #12]
 80067e6:	4b1c      	ldr	r3, [pc, #112]	; (8006858 <TIM_OC6_SetConfig+0x9c>)
 80067e8:	4013      	ands	r3, r2
 80067ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	021b      	lsls	r3, r3, #8
 80067f2:	68fa      	ldr	r2, [r7, #12]
 80067f4:	4313      	orrs	r3, r2
 80067f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80067f8:	693b      	ldr	r3, [r7, #16]
 80067fa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80067fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	689b      	ldr	r3, [r3, #8]
 8006804:	051b      	lsls	r3, r3, #20
 8006806:	693a      	ldr	r2, [r7, #16]
 8006808:	4313      	orrs	r3, r2
 800680a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	4a13      	ldr	r2, [pc, #76]	; (800685c <TIM_OC6_SetConfig+0xa0>)
 8006810:	4293      	cmp	r3, r2
 8006812:	d003      	beq.n	800681c <TIM_OC6_SetConfig+0x60>
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	4a12      	ldr	r2, [pc, #72]	; (8006860 <TIM_OC6_SetConfig+0xa4>)
 8006818:	4293      	cmp	r3, r2
 800681a:	d109      	bne.n	8006830 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800681c:	697b      	ldr	r3, [r7, #20]
 800681e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006822:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	695b      	ldr	r3, [r3, #20]
 8006828:	029b      	lsls	r3, r3, #10
 800682a:	697a      	ldr	r2, [r7, #20]
 800682c:	4313      	orrs	r3, r2
 800682e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	697a      	ldr	r2, [r7, #20]
 8006834:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	68fa      	ldr	r2, [r7, #12]
 800683a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	685a      	ldr	r2, [r3, #4]
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	693a      	ldr	r2, [r7, #16]
 8006848:	621a      	str	r2, [r3, #32]
}
 800684a:	bf00      	nop
 800684c:	371c      	adds	r7, #28
 800684e:	46bd      	mov	sp, r7
 8006850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006854:	4770      	bx	lr
 8006856:	bf00      	nop
 8006858:	feff8fff 	.word	0xfeff8fff
 800685c:	40010000 	.word	0x40010000
 8006860:	40010400 	.word	0x40010400

08006864 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006864:	b480      	push	{r7}
 8006866:	b087      	sub	sp, #28
 8006868:	af00      	add	r7, sp, #0
 800686a:	60f8      	str	r0, [r7, #12]
 800686c:	60b9      	str	r1, [r7, #8]
 800686e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	6a1b      	ldr	r3, [r3, #32]
 8006874:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	6a1b      	ldr	r3, [r3, #32]
 800687a:	f023 0201 	bic.w	r2, r3, #1
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	699b      	ldr	r3, [r3, #24]
 8006886:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006888:	693b      	ldr	r3, [r7, #16]
 800688a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800688e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	011b      	lsls	r3, r3, #4
 8006894:	693a      	ldr	r2, [r7, #16]
 8006896:	4313      	orrs	r3, r2
 8006898:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800689a:	697b      	ldr	r3, [r7, #20]
 800689c:	f023 030a 	bic.w	r3, r3, #10
 80068a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80068a2:	697a      	ldr	r2, [r7, #20]
 80068a4:	68bb      	ldr	r3, [r7, #8]
 80068a6:	4313      	orrs	r3, r2
 80068a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	693a      	ldr	r2, [r7, #16]
 80068ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	697a      	ldr	r2, [r7, #20]
 80068b4:	621a      	str	r2, [r3, #32]
}
 80068b6:	bf00      	nop
 80068b8:	371c      	adds	r7, #28
 80068ba:	46bd      	mov	sp, r7
 80068bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c0:	4770      	bx	lr

080068c2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80068c2:	b480      	push	{r7}
 80068c4:	b087      	sub	sp, #28
 80068c6:	af00      	add	r7, sp, #0
 80068c8:	60f8      	str	r0, [r7, #12]
 80068ca:	60b9      	str	r1, [r7, #8]
 80068cc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	6a1b      	ldr	r3, [r3, #32]
 80068d2:	f023 0210 	bic.w	r2, r3, #16
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	699b      	ldr	r3, [r3, #24]
 80068de:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	6a1b      	ldr	r3, [r3, #32]
 80068e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80068e6:	697b      	ldr	r3, [r7, #20]
 80068e8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80068ec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	031b      	lsls	r3, r3, #12
 80068f2:	697a      	ldr	r2, [r7, #20]
 80068f4:	4313      	orrs	r3, r2
 80068f6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80068f8:	693b      	ldr	r3, [r7, #16]
 80068fa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80068fe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006900:	68bb      	ldr	r3, [r7, #8]
 8006902:	011b      	lsls	r3, r3, #4
 8006904:	693a      	ldr	r2, [r7, #16]
 8006906:	4313      	orrs	r3, r2
 8006908:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	697a      	ldr	r2, [r7, #20]
 800690e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	693a      	ldr	r2, [r7, #16]
 8006914:	621a      	str	r2, [r3, #32]
}
 8006916:	bf00      	nop
 8006918:	371c      	adds	r7, #28
 800691a:	46bd      	mov	sp, r7
 800691c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006920:	4770      	bx	lr

08006922 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006922:	b480      	push	{r7}
 8006924:	b085      	sub	sp, #20
 8006926:	af00      	add	r7, sp, #0
 8006928:	6078      	str	r0, [r7, #4]
 800692a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	689b      	ldr	r3, [r3, #8]
 8006930:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006938:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800693a:	683a      	ldr	r2, [r7, #0]
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	4313      	orrs	r3, r2
 8006940:	f043 0307 	orr.w	r3, r3, #7
 8006944:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	68fa      	ldr	r2, [r7, #12]
 800694a:	609a      	str	r2, [r3, #8]
}
 800694c:	bf00      	nop
 800694e:	3714      	adds	r7, #20
 8006950:	46bd      	mov	sp, r7
 8006952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006956:	4770      	bx	lr

08006958 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006958:	b480      	push	{r7}
 800695a:	b087      	sub	sp, #28
 800695c:	af00      	add	r7, sp, #0
 800695e:	60f8      	str	r0, [r7, #12]
 8006960:	60b9      	str	r1, [r7, #8]
 8006962:	607a      	str	r2, [r7, #4]
 8006964:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	689b      	ldr	r3, [r3, #8]
 800696a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800696c:	697b      	ldr	r3, [r7, #20]
 800696e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006972:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	021a      	lsls	r2, r3, #8
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	431a      	orrs	r2, r3
 800697c:	68bb      	ldr	r3, [r7, #8]
 800697e:	4313      	orrs	r3, r2
 8006980:	697a      	ldr	r2, [r7, #20]
 8006982:	4313      	orrs	r3, r2
 8006984:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	697a      	ldr	r2, [r7, #20]
 800698a:	609a      	str	r2, [r3, #8]
}
 800698c:	bf00      	nop
 800698e:	371c      	adds	r7, #28
 8006990:	46bd      	mov	sp, r7
 8006992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006996:	4770      	bx	lr

08006998 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b086      	sub	sp, #24
 800699c:	af00      	add	r7, sp, #0
 800699e:	60f8      	str	r0, [r7, #12]
 80069a0:	60b9      	str	r1, [r7, #8]
 80069a2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	4a35      	ldr	r2, [pc, #212]	; (8006a7c <TIM_CCxChannelCmd+0xe4>)
 80069a8:	4293      	cmp	r3, r2
 80069aa:	d030      	beq.n	8006a0e <TIM_CCxChannelCmd+0x76>
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069b2:	d02c      	beq.n	8006a0e <TIM_CCxChannelCmd+0x76>
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	4a32      	ldr	r2, [pc, #200]	; (8006a80 <TIM_CCxChannelCmd+0xe8>)
 80069b8:	4293      	cmp	r3, r2
 80069ba:	d028      	beq.n	8006a0e <TIM_CCxChannelCmd+0x76>
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	4a31      	ldr	r2, [pc, #196]	; (8006a84 <TIM_CCxChannelCmd+0xec>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d024      	beq.n	8006a0e <TIM_CCxChannelCmd+0x76>
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	4a30      	ldr	r2, [pc, #192]	; (8006a88 <TIM_CCxChannelCmd+0xf0>)
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d020      	beq.n	8006a0e <TIM_CCxChannelCmd+0x76>
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	4a2f      	ldr	r2, [pc, #188]	; (8006a8c <TIM_CCxChannelCmd+0xf4>)
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d01c      	beq.n	8006a0e <TIM_CCxChannelCmd+0x76>
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	4a2e      	ldr	r2, [pc, #184]	; (8006a90 <TIM_CCxChannelCmd+0xf8>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	d018      	beq.n	8006a0e <TIM_CCxChannelCmd+0x76>
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	4a2d      	ldr	r2, [pc, #180]	; (8006a94 <TIM_CCxChannelCmd+0xfc>)
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d014      	beq.n	8006a0e <TIM_CCxChannelCmd+0x76>
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	4a2c      	ldr	r2, [pc, #176]	; (8006a98 <TIM_CCxChannelCmd+0x100>)
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d010      	beq.n	8006a0e <TIM_CCxChannelCmd+0x76>
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	4a2b      	ldr	r2, [pc, #172]	; (8006a9c <TIM_CCxChannelCmd+0x104>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d00c      	beq.n	8006a0e <TIM_CCxChannelCmd+0x76>
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	4a2a      	ldr	r2, [pc, #168]	; (8006aa0 <TIM_CCxChannelCmd+0x108>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d008      	beq.n	8006a0e <TIM_CCxChannelCmd+0x76>
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	4a29      	ldr	r2, [pc, #164]	; (8006aa4 <TIM_CCxChannelCmd+0x10c>)
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d004      	beq.n	8006a0e <TIM_CCxChannelCmd+0x76>
 8006a04:	f641 61a1 	movw	r1, #7841	; 0x1ea1
 8006a08:	4827      	ldr	r0, [pc, #156]	; (8006aa8 <TIM_CCxChannelCmd+0x110>)
 8006a0a:	f7fa fdd6 	bl	80015ba <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 8006a0e:	68bb      	ldr	r3, [r7, #8]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d016      	beq.n	8006a42 <TIM_CCxChannelCmd+0xaa>
 8006a14:	68bb      	ldr	r3, [r7, #8]
 8006a16:	2b04      	cmp	r3, #4
 8006a18:	d013      	beq.n	8006a42 <TIM_CCxChannelCmd+0xaa>
 8006a1a:	68bb      	ldr	r3, [r7, #8]
 8006a1c:	2b08      	cmp	r3, #8
 8006a1e:	d010      	beq.n	8006a42 <TIM_CCxChannelCmd+0xaa>
 8006a20:	68bb      	ldr	r3, [r7, #8]
 8006a22:	2b0c      	cmp	r3, #12
 8006a24:	d00d      	beq.n	8006a42 <TIM_CCxChannelCmd+0xaa>
 8006a26:	68bb      	ldr	r3, [r7, #8]
 8006a28:	2b10      	cmp	r3, #16
 8006a2a:	d00a      	beq.n	8006a42 <TIM_CCxChannelCmd+0xaa>
 8006a2c:	68bb      	ldr	r3, [r7, #8]
 8006a2e:	2b14      	cmp	r3, #20
 8006a30:	d007      	beq.n	8006a42 <TIM_CCxChannelCmd+0xaa>
 8006a32:	68bb      	ldr	r3, [r7, #8]
 8006a34:	2b3c      	cmp	r3, #60	; 0x3c
 8006a36:	d004      	beq.n	8006a42 <TIM_CCxChannelCmd+0xaa>
 8006a38:	f641 61a2 	movw	r1, #7842	; 0x1ea2
 8006a3c:	481a      	ldr	r0, [pc, #104]	; (8006aa8 <TIM_CCxChannelCmd+0x110>)
 8006a3e:	f7fa fdbc 	bl	80015ba <assert_failed>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006a42:	68bb      	ldr	r3, [r7, #8]
 8006a44:	f003 031f 	and.w	r3, r3, #31
 8006a48:	2201      	movs	r2, #1
 8006a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8006a4e:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	6a1a      	ldr	r2, [r3, #32]
 8006a54:	697b      	ldr	r3, [r7, #20]
 8006a56:	43db      	mvns	r3, r3
 8006a58:	401a      	ands	r2, r3
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	6a1a      	ldr	r2, [r3, #32]
 8006a62:	68bb      	ldr	r3, [r7, #8]
 8006a64:	f003 031f 	and.w	r3, r3, #31
 8006a68:	6879      	ldr	r1, [r7, #4]
 8006a6a:	fa01 f303 	lsl.w	r3, r1, r3
 8006a6e:	431a      	orrs	r2, r3
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	621a      	str	r2, [r3, #32]
}
 8006a74:	bf00      	nop
 8006a76:	3718      	adds	r7, #24
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	bd80      	pop	{r7, pc}
 8006a7c:	40010000 	.word	0x40010000
 8006a80:	40000400 	.word	0x40000400
 8006a84:	40000800 	.word	0x40000800
 8006a88:	40000c00 	.word	0x40000c00
 8006a8c:	40010400 	.word	0x40010400
 8006a90:	40014000 	.word	0x40014000
 8006a94:	40014400 	.word	0x40014400
 8006a98:	40014800 	.word	0x40014800
 8006a9c:	40001800 	.word	0x40001800
 8006aa0:	40001c00 	.word	0x40001c00
 8006aa4:	40002000 	.word	0x40002000
 8006aa8:	0800da20 	.word	0x0800da20

08006aac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b084      	sub	sp, #16
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
 8006ab4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	4a32      	ldr	r2, [pc, #200]	; (8006b84 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006abc:	4293      	cmp	r3, r2
 8006abe:	d027      	beq.n	8006b10 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ac8:	d022      	beq.n	8006b10 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	4a2e      	ldr	r2, [pc, #184]	; (8006b88 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	d01d      	beq.n	8006b10 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	4a2c      	ldr	r2, [pc, #176]	; (8006b8c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006ada:	4293      	cmp	r3, r2
 8006adc:	d018      	beq.n	8006b10 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	4a2b      	ldr	r2, [pc, #172]	; (8006b90 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006ae4:	4293      	cmp	r3, r2
 8006ae6:	d013      	beq.n	8006b10 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	4a29      	ldr	r2, [pc, #164]	; (8006b94 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006aee:	4293      	cmp	r3, r2
 8006af0:	d00e      	beq.n	8006b10 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	4a28      	ldr	r2, [pc, #160]	; (8006b98 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006af8:	4293      	cmp	r3, r2
 8006afa:	d009      	beq.n	8006b10 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	4a26      	ldr	r2, [pc, #152]	; (8006b9c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006b02:	4293      	cmp	r3, r2
 8006b04:	d004      	beq.n	8006b10 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8006b06:	f240 71b6 	movw	r1, #1974	; 0x7b6
 8006b0a:	4825      	ldr	r0, [pc, #148]	; (8006ba0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006b0c:	f7fa fd55 	bl	80015ba <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d020      	beq.n	8006b5a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	2b10      	cmp	r3, #16
 8006b1e:	d01c      	beq.n	8006b5a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	2b20      	cmp	r3, #32
 8006b26:	d018      	beq.n	8006b5a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	2b30      	cmp	r3, #48	; 0x30
 8006b2e:	d014      	beq.n	8006b5a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	2b40      	cmp	r3, #64	; 0x40
 8006b36:	d010      	beq.n	8006b5a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	2b50      	cmp	r3, #80	; 0x50
 8006b3e:	d00c      	beq.n	8006b5a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	2b60      	cmp	r3, #96	; 0x60
 8006b46:	d008      	beq.n	8006b5a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	2b70      	cmp	r3, #112	; 0x70
 8006b4e:	d004      	beq.n	8006b5a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8006b50:	f240 71b7 	movw	r1, #1975	; 0x7b7
 8006b54:	4812      	ldr	r0, [pc, #72]	; (8006ba0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006b56:	f7fa fd30 	bl	80015ba <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	689b      	ldr	r3, [r3, #8]
 8006b5e:	2b80      	cmp	r3, #128	; 0x80
 8006b60:	d008      	beq.n	8006b74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	689b      	ldr	r3, [r3, #8]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d004      	beq.n	8006b74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006b6a:	f44f 61f7 	mov.w	r1, #1976	; 0x7b8
 8006b6e:	480c      	ldr	r0, [pc, #48]	; (8006ba0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006b70:	f7fa fd23 	bl	80015ba <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b7a:	2b01      	cmp	r3, #1
 8006b7c:	d112      	bne.n	8006ba4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>
 8006b7e:	2302      	movs	r3, #2
 8006b80:	e0d7      	b.n	8006d32 <HAL_TIMEx_MasterConfigSynchronization+0x286>
 8006b82:	bf00      	nop
 8006b84:	40010000 	.word	0x40010000
 8006b88:	40000400 	.word	0x40000400
 8006b8c:	40000800 	.word	0x40000800
 8006b90:	40000c00 	.word	0x40000c00
 8006b94:	40001000 	.word	0x40001000
 8006b98:	40001400 	.word	0x40001400
 8006b9c:	40010400 	.word	0x40010400
 8006ba0:	0800da58 	.word	0x0800da58
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2201      	movs	r2, #1
 8006ba8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2202      	movs	r2, #2
 8006bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	685b      	ldr	r3, [r3, #4]
 8006bba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	689b      	ldr	r3, [r3, #8]
 8006bc2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	4a5c      	ldr	r2, [pc, #368]	; (8006d3c <HAL_TIMEx_MasterConfigSynchronization+0x290>)
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	d004      	beq.n	8006bd8 <HAL_TIMEx_MasterConfigSynchronization+0x12c>
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	4a5b      	ldr	r2, [pc, #364]	; (8006d40 <HAL_TIMEx_MasterConfigSynchronization+0x294>)
 8006bd4:	4293      	cmp	r3, r2
 8006bd6:	d161      	bne.n	8006c9c <HAL_TIMEx_MasterConfigSynchronization+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	685b      	ldr	r3, [r3, #4]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d054      	beq.n	8006c8a <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	685b      	ldr	r3, [r3, #4]
 8006be4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006be8:	d04f      	beq.n	8006c8a <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	685b      	ldr	r3, [r3, #4]
 8006bee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006bf2:	d04a      	beq.n	8006c8a <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	685b      	ldr	r3, [r3, #4]
 8006bf8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006bfc:	d045      	beq.n	8006c8a <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	685b      	ldr	r3, [r3, #4]
 8006c02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006c06:	d040      	beq.n	8006c8a <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	685b      	ldr	r3, [r3, #4]
 8006c0c:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 8006c10:	d03b      	beq.n	8006c8a <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	685b      	ldr	r3, [r3, #4]
 8006c16:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006c1a:	d036      	beq.n	8006c8a <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	685b      	ldr	r3, [r3, #4]
 8006c20:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006c24:	d031      	beq.n	8006c8a <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	685b      	ldr	r3, [r3, #4]
 8006c2a:	f5b3 0fe0 	cmp.w	r3, #7340032	; 0x700000
 8006c2e:	d02c      	beq.n	8006c8a <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	685b      	ldr	r3, [r3, #4]
 8006c34:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006c38:	d027      	beq.n	8006c8a <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	685b      	ldr	r3, [r3, #4]
 8006c3e:	f5b3 0f10 	cmp.w	r3, #9437184	; 0x900000
 8006c42:	d022      	beq.n	8006c8a <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	685b      	ldr	r3, [r3, #4]
 8006c48:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8006c4c:	d01d      	beq.n	8006c8a <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	685b      	ldr	r3, [r3, #4]
 8006c52:	f5b3 0f30 	cmp.w	r3, #11534336	; 0xb00000
 8006c56:	d018      	beq.n	8006c8a <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	685b      	ldr	r3, [r3, #4]
 8006c5c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006c60:	d013      	beq.n	8006c8a <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	685b      	ldr	r3, [r3, #4]
 8006c66:	f5b3 0f50 	cmp.w	r3, #13631488	; 0xd00000
 8006c6a:	d00e      	beq.n	8006c8a <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	685b      	ldr	r3, [r3, #4]
 8006c70:	f5b3 0f60 	cmp.w	r3, #14680064	; 0xe00000
 8006c74:	d009      	beq.n	8006c8a <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	685b      	ldr	r3, [r3, #4]
 8006c7a:	f5b3 0f70 	cmp.w	r3, #15728640	; 0xf00000
 8006c7e:	d004      	beq.n	8006c8a <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8006c80:	f240 71ca 	movw	r1, #1994	; 0x7ca
 8006c84:	482f      	ldr	r0, [pc, #188]	; (8006d44 <HAL_TIMEx_MasterConfigSynchronization+0x298>)
 8006c86:	f7fa fc98 	bl	80015ba <assert_failed>

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006c90:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	685b      	ldr	r3, [r3, #4]
 8006c96:	68fa      	ldr	r2, [r7, #12]
 8006c98:	4313      	orrs	r3, r2
 8006c9a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ca2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	68fa      	ldr	r2, [r7, #12]
 8006caa:	4313      	orrs	r3, r2
 8006cac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	68fa      	ldr	r2, [r7, #12]
 8006cb4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	4a20      	ldr	r2, [pc, #128]	; (8006d3c <HAL_TIMEx_MasterConfigSynchronization+0x290>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d022      	beq.n	8006d06 <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cc8:	d01d      	beq.n	8006d06 <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	4a1e      	ldr	r2, [pc, #120]	; (8006d48 <HAL_TIMEx_MasterConfigSynchronization+0x29c>)
 8006cd0:	4293      	cmp	r3, r2
 8006cd2:	d018      	beq.n	8006d06 <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	4a1c      	ldr	r2, [pc, #112]	; (8006d4c <HAL_TIMEx_MasterConfigSynchronization+0x2a0>)
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d013      	beq.n	8006d06 <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	4a1b      	ldr	r2, [pc, #108]	; (8006d50 <HAL_TIMEx_MasterConfigSynchronization+0x2a4>)
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d00e      	beq.n	8006d06 <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	4a14      	ldr	r2, [pc, #80]	; (8006d40 <HAL_TIMEx_MasterConfigSynchronization+0x294>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d009      	beq.n	8006d06 <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	4a17      	ldr	r2, [pc, #92]	; (8006d54 <HAL_TIMEx_MasterConfigSynchronization+0x2a8>)
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d004      	beq.n	8006d06 <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	4a15      	ldr	r2, [pc, #84]	; (8006d58 <HAL_TIMEx_MasterConfigSynchronization+0x2ac>)
 8006d02:	4293      	cmp	r3, r2
 8006d04:	d10c      	bne.n	8006d20 <HAL_TIMEx_MasterConfigSynchronization+0x274>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006d06:	68bb      	ldr	r3, [r7, #8]
 8006d08:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006d0c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	689b      	ldr	r3, [r3, #8]
 8006d12:	68ba      	ldr	r2, [r7, #8]
 8006d14:	4313      	orrs	r3, r2
 8006d16:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	68ba      	ldr	r2, [r7, #8]
 8006d1e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2201      	movs	r2, #1
 8006d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006d30:	2300      	movs	r3, #0
}
 8006d32:	4618      	mov	r0, r3
 8006d34:	3710      	adds	r7, #16
 8006d36:	46bd      	mov	sp, r7
 8006d38:	bd80      	pop	{r7, pc}
 8006d3a:	bf00      	nop
 8006d3c:	40010000 	.word	0x40010000
 8006d40:	40010400 	.word	0x40010400
 8006d44:	0800da58 	.word	0x0800da58
 8006d48:	40000400 	.word	0x40000400
 8006d4c:	40000800 	.word	0x40000800
 8006d50:	40000c00 	.word	0x40000c00
 8006d54:	40014000 	.word	0x40014000
 8006d58:	40001800 	.word	0x40001800

08006d5c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006d5c:	b480      	push	{r7}
 8006d5e:	b083      	sub	sp, #12
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006d64:	bf00      	nop
 8006d66:	370c      	adds	r7, #12
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6e:	4770      	bx	lr

08006d70 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006d70:	b480      	push	{r7}
 8006d72:	b083      	sub	sp, #12
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006d78:	bf00      	nop
 8006d7a:	370c      	adds	r7, #12
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d82:	4770      	bx	lr

08006d84 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006d84:	b480      	push	{r7}
 8006d86:	b083      	sub	sp, #12
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006d8c:	bf00      	nop
 8006d8e:	370c      	adds	r7, #12
 8006d90:	46bd      	mov	sp, r7
 8006d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d96:	4770      	bx	lr

08006d98 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b082      	sub	sp, #8
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d101      	bne.n	8006daa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006da6:	2301      	movs	r3, #1
 8006da8:	e09f      	b.n	8006eea <HAL_UART_Init+0x152>
  }

  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	699b      	ldr	r3, [r3, #24]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d02d      	beq.n	8006e0e <HAL_UART_Init+0x76>
  {
    /* Check the parameters */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	4a4f      	ldr	r2, [pc, #316]	; (8006ef4 <HAL_UART_Init+0x15c>)
 8006db8:	4293      	cmp	r3, r2
 8006dba:	d055      	beq.n	8006e68 <HAL_UART_Init+0xd0>
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	4a4d      	ldr	r2, [pc, #308]	; (8006ef8 <HAL_UART_Init+0x160>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d050      	beq.n	8006e68 <HAL_UART_Init+0xd0>
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	4a4c      	ldr	r2, [pc, #304]	; (8006efc <HAL_UART_Init+0x164>)
 8006dcc:	4293      	cmp	r3, r2
 8006dce:	d04b      	beq.n	8006e68 <HAL_UART_Init+0xd0>
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	4a4a      	ldr	r2, [pc, #296]	; (8006f00 <HAL_UART_Init+0x168>)
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d046      	beq.n	8006e68 <HAL_UART_Init+0xd0>
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	4a49      	ldr	r2, [pc, #292]	; (8006f04 <HAL_UART_Init+0x16c>)
 8006de0:	4293      	cmp	r3, r2
 8006de2:	d041      	beq.n	8006e68 <HAL_UART_Init+0xd0>
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	4a47      	ldr	r2, [pc, #284]	; (8006f08 <HAL_UART_Init+0x170>)
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d03c      	beq.n	8006e68 <HAL_UART_Init+0xd0>
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	4a46      	ldr	r2, [pc, #280]	; (8006f0c <HAL_UART_Init+0x174>)
 8006df4:	4293      	cmp	r3, r2
 8006df6:	d037      	beq.n	8006e68 <HAL_UART_Init+0xd0>
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	4a44      	ldr	r2, [pc, #272]	; (8006f10 <HAL_UART_Init+0x178>)
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	d032      	beq.n	8006e68 <HAL_UART_Init+0xd0>
 8006e02:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8006e06:	4843      	ldr	r0, [pc, #268]	; (8006f14 <HAL_UART_Init+0x17c>)
 8006e08:	f7fa fbd7 	bl	80015ba <assert_failed>
 8006e0c:	e02c      	b.n	8006e68 <HAL_UART_Init+0xd0>
  }
  else
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	4a38      	ldr	r2, [pc, #224]	; (8006ef4 <HAL_UART_Init+0x15c>)
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d027      	beq.n	8006e68 <HAL_UART_Init+0xd0>
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	4a36      	ldr	r2, [pc, #216]	; (8006ef8 <HAL_UART_Init+0x160>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d022      	beq.n	8006e68 <HAL_UART_Init+0xd0>
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	4a35      	ldr	r2, [pc, #212]	; (8006efc <HAL_UART_Init+0x164>)
 8006e28:	4293      	cmp	r3, r2
 8006e2a:	d01d      	beq.n	8006e68 <HAL_UART_Init+0xd0>
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	4a33      	ldr	r2, [pc, #204]	; (8006f00 <HAL_UART_Init+0x168>)
 8006e32:	4293      	cmp	r3, r2
 8006e34:	d018      	beq.n	8006e68 <HAL_UART_Init+0xd0>
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	4a32      	ldr	r2, [pc, #200]	; (8006f04 <HAL_UART_Init+0x16c>)
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d013      	beq.n	8006e68 <HAL_UART_Init+0xd0>
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	4a30      	ldr	r2, [pc, #192]	; (8006f08 <HAL_UART_Init+0x170>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d00e      	beq.n	8006e68 <HAL_UART_Init+0xd0>
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	4a2f      	ldr	r2, [pc, #188]	; (8006f0c <HAL_UART_Init+0x174>)
 8006e50:	4293      	cmp	r3, r2
 8006e52:	d009      	beq.n	8006e68 <HAL_UART_Init+0xd0>
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	4a2d      	ldr	r2, [pc, #180]	; (8006f10 <HAL_UART_Init+0x178>)
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d004      	beq.n	8006e68 <HAL_UART_Init+0xd0>
 8006e5e:	f240 1131 	movw	r1, #305	; 0x131
 8006e62:	482c      	ldr	r0, [pc, #176]	; (8006f14 <HAL_UART_Init+0x17c>)
 8006e64:	f7fa fba9 	bl	80015ba <assert_failed>
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d106      	bne.n	8006e7e <HAL_UART_Init+0xe6>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2200      	movs	r2, #0
 8006e74:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006e78:	6878      	ldr	r0, [r7, #4]
 8006e7a:	f7fa ff6d 	bl	8001d58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2224      	movs	r2, #36	; 0x24
 8006e82:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	681a      	ldr	r2, [r3, #0]
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f022 0201 	bic.w	r2, r2, #1
 8006e92:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006e94:	6878      	ldr	r0, [r7, #4]
 8006e96:	f000 fbf9 	bl	800768c <UART_SetConfig>
 8006e9a:	4603      	mov	r3, r0
 8006e9c:	2b01      	cmp	r3, #1
 8006e9e:	d101      	bne.n	8006ea4 <HAL_UART_Init+0x10c>
  {
    return HAL_ERROR;
 8006ea0:	2301      	movs	r3, #1
 8006ea2:	e022      	b.n	8006eea <HAL_UART_Init+0x152>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d002      	beq.n	8006eb2 <HAL_UART_Init+0x11a>
  {
    UART_AdvFeatureConfig(huart);
 8006eac:	6878      	ldr	r0, [r7, #4]
 8006eae:	f000 fee3 	bl	8007c78 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	685a      	ldr	r2, [r3, #4]
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006ec0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	689a      	ldr	r2, [r3, #8]
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006ed0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	681a      	ldr	r2, [r3, #0]
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f042 0201 	orr.w	r2, r2, #1
 8006ee0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006ee2:	6878      	ldr	r0, [r7, #4]
 8006ee4:	f001 f820 	bl	8007f28 <UART_CheckIdleState>
 8006ee8:	4603      	mov	r3, r0
}
 8006eea:	4618      	mov	r0, r3
 8006eec:	3708      	adds	r7, #8
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	bd80      	pop	{r7, pc}
 8006ef2:	bf00      	nop
 8006ef4:	40011000 	.word	0x40011000
 8006ef8:	40004400 	.word	0x40004400
 8006efc:	40004800 	.word	0x40004800
 8006f00:	40004c00 	.word	0x40004c00
 8006f04:	40005000 	.word	0x40005000
 8006f08:	40011400 	.word	0x40011400
 8006f0c:	40007800 	.word	0x40007800
 8006f10:	40007c00 	.word	0x40007c00
 8006f14:	0800da94 	.word	0x0800da94

08006f18 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b08a      	sub	sp, #40	; 0x28
 8006f1c:	af02      	add	r7, sp, #8
 8006f1e:	60f8      	str	r0, [r7, #12]
 8006f20:	60b9      	str	r1, [r7, #8]
 8006f22:	603b      	str	r3, [r7, #0]
 8006f24:	4613      	mov	r3, r2
 8006f26:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f2c:	2b20      	cmp	r3, #32
 8006f2e:	d171      	bne.n	8007014 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f30:	68bb      	ldr	r3, [r7, #8]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d002      	beq.n	8006f3c <HAL_UART_Transmit+0x24>
 8006f36:	88fb      	ldrh	r3, [r7, #6]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d101      	bne.n	8006f40 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006f3c:	2301      	movs	r3, #1
 8006f3e:	e06a      	b.n	8007016 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	2200      	movs	r2, #0
 8006f44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	2221      	movs	r2, #33	; 0x21
 8006f4c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006f4e:	f7fb f807 	bl	8001f60 <HAL_GetTick>
 8006f52:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	88fa      	ldrh	r2, [r7, #6]
 8006f58:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	88fa      	ldrh	r2, [r7, #6]
 8006f60:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	689b      	ldr	r3, [r3, #8]
 8006f68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f6c:	d108      	bne.n	8006f80 <HAL_UART_Transmit+0x68>
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	691b      	ldr	r3, [r3, #16]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d104      	bne.n	8006f80 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006f76:	2300      	movs	r3, #0
 8006f78:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006f7a:	68bb      	ldr	r3, [r7, #8]
 8006f7c:	61bb      	str	r3, [r7, #24]
 8006f7e:	e003      	b.n	8006f88 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006f80:	68bb      	ldr	r3, [r7, #8]
 8006f82:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006f84:	2300      	movs	r3, #0
 8006f86:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006f88:	e02c      	b.n	8006fe4 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	9300      	str	r3, [sp, #0]
 8006f8e:	697b      	ldr	r3, [r7, #20]
 8006f90:	2200      	movs	r2, #0
 8006f92:	2180      	movs	r1, #128	; 0x80
 8006f94:	68f8      	ldr	r0, [r7, #12]
 8006f96:	f000 fffe 	bl	8007f96 <UART_WaitOnFlagUntilTimeout>
 8006f9a:	4603      	mov	r3, r0
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d001      	beq.n	8006fa4 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8006fa0:	2303      	movs	r3, #3
 8006fa2:	e038      	b.n	8007016 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8006fa4:	69fb      	ldr	r3, [r7, #28]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d10b      	bne.n	8006fc2 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006faa:	69bb      	ldr	r3, [r7, #24]
 8006fac:	881b      	ldrh	r3, [r3, #0]
 8006fae:	461a      	mov	r2, r3
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006fb8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006fba:	69bb      	ldr	r3, [r7, #24]
 8006fbc:	3302      	adds	r3, #2
 8006fbe:	61bb      	str	r3, [r7, #24]
 8006fc0:	e007      	b.n	8006fd2 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006fc2:	69fb      	ldr	r3, [r7, #28]
 8006fc4:	781a      	ldrb	r2, [r3, #0]
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006fcc:	69fb      	ldr	r3, [r7, #28]
 8006fce:	3301      	adds	r3, #1
 8006fd0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006fd8:	b29b      	uxth	r3, r3
 8006fda:	3b01      	subs	r3, #1
 8006fdc:	b29a      	uxth	r2, r3
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006fea:	b29b      	uxth	r3, r3
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d1cc      	bne.n	8006f8a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	9300      	str	r3, [sp, #0]
 8006ff4:	697b      	ldr	r3, [r7, #20]
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	2140      	movs	r1, #64	; 0x40
 8006ffa:	68f8      	ldr	r0, [r7, #12]
 8006ffc:	f000 ffcb 	bl	8007f96 <UART_WaitOnFlagUntilTimeout>
 8007000:	4603      	mov	r3, r0
 8007002:	2b00      	cmp	r3, #0
 8007004:	d001      	beq.n	800700a <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8007006:	2303      	movs	r3, #3
 8007008:	e005      	b.n	8007016 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	2220      	movs	r2, #32
 800700e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8007010:	2300      	movs	r3, #0
 8007012:	e000      	b.n	8007016 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8007014:	2302      	movs	r3, #2
  }
}
 8007016:	4618      	mov	r0, r3
 8007018:	3720      	adds	r7, #32
 800701a:	46bd      	mov	sp, r7
 800701c:	bd80      	pop	{r7, pc}

0800701e <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800701e:	b580      	push	{r7, lr}
 8007020:	b08a      	sub	sp, #40	; 0x28
 8007022:	af00      	add	r7, sp, #0
 8007024:	60f8      	str	r0, [r7, #12]
 8007026:	60b9      	str	r1, [r7, #8]
 8007028:	4613      	mov	r3, r2
 800702a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007032:	2b20      	cmp	r3, #32
 8007034:	d132      	bne.n	800709c <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007036:	68bb      	ldr	r3, [r7, #8]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d002      	beq.n	8007042 <HAL_UART_Receive_IT+0x24>
 800703c:	88fb      	ldrh	r3, [r7, #6]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d101      	bne.n	8007046 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007042:	2301      	movs	r3, #1
 8007044:	e02b      	b.n	800709e <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	2200      	movs	r2, #0
 800704a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	685b      	ldr	r3, [r3, #4]
 8007052:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007056:	2b00      	cmp	r3, #0
 8007058:	d018      	beq.n	800708c <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007060:	697b      	ldr	r3, [r7, #20]
 8007062:	e853 3f00 	ldrex	r3, [r3]
 8007066:	613b      	str	r3, [r7, #16]
   return(result);
 8007068:	693b      	ldr	r3, [r7, #16]
 800706a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800706e:	627b      	str	r3, [r7, #36]	; 0x24
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	461a      	mov	r2, r3
 8007076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007078:	623b      	str	r3, [r7, #32]
 800707a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800707c:	69f9      	ldr	r1, [r7, #28]
 800707e:	6a3a      	ldr	r2, [r7, #32]
 8007080:	e841 2300 	strex	r3, r2, [r1]
 8007084:	61bb      	str	r3, [r7, #24]
   return(result);
 8007086:	69bb      	ldr	r3, [r7, #24]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d1e6      	bne.n	800705a <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800708c:	88fb      	ldrh	r3, [r7, #6]
 800708e:	461a      	mov	r2, r3
 8007090:	68b9      	ldr	r1, [r7, #8]
 8007092:	68f8      	ldr	r0, [r7, #12]
 8007094:	f001 f846 	bl	8008124 <UART_Start_Receive_IT>
 8007098:	4603      	mov	r3, r0
 800709a:	e000      	b.n	800709e <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 800709c:	2302      	movs	r3, #2
  }
}
 800709e:	4618      	mov	r0, r3
 80070a0:	3728      	adds	r7, #40	; 0x28
 80070a2:	46bd      	mov	sp, r7
 80070a4:	bd80      	pop	{r7, pc}
	...

080070a8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b0ba      	sub	sp, #232	; 0xe8
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	69db      	ldr	r3, [r3, #28]
 80070b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	689b      	ldr	r3, [r3, #8]
 80070ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80070ce:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80070d2:	f640 030f 	movw	r3, #2063	; 0x80f
 80070d6:	4013      	ands	r3, r2
 80070d8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80070dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d115      	bne.n	8007110 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80070e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070e8:	f003 0320 	and.w	r3, r3, #32
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d00f      	beq.n	8007110 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80070f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070f4:	f003 0320 	and.w	r3, r3, #32
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d009      	beq.n	8007110 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007100:	2b00      	cmp	r3, #0
 8007102:	f000 8297 	beq.w	8007634 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800710a:	6878      	ldr	r0, [r7, #4]
 800710c:	4798      	blx	r3
      }
      return;
 800710e:	e291      	b.n	8007634 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007110:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007114:	2b00      	cmp	r3, #0
 8007116:	f000 8117 	beq.w	8007348 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800711a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800711e:	f003 0301 	and.w	r3, r3, #1
 8007122:	2b00      	cmp	r3, #0
 8007124:	d106      	bne.n	8007134 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8007126:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800712a:	4b85      	ldr	r3, [pc, #532]	; (8007340 <HAL_UART_IRQHandler+0x298>)
 800712c:	4013      	ands	r3, r2
 800712e:	2b00      	cmp	r3, #0
 8007130:	f000 810a 	beq.w	8007348 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007134:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007138:	f003 0301 	and.w	r3, r3, #1
 800713c:	2b00      	cmp	r3, #0
 800713e:	d011      	beq.n	8007164 <HAL_UART_IRQHandler+0xbc>
 8007140:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007144:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007148:	2b00      	cmp	r3, #0
 800714a:	d00b      	beq.n	8007164 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	2201      	movs	r2, #1
 8007152:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800715a:	f043 0201 	orr.w	r2, r3, #1
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007164:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007168:	f003 0302 	and.w	r3, r3, #2
 800716c:	2b00      	cmp	r3, #0
 800716e:	d011      	beq.n	8007194 <HAL_UART_IRQHandler+0xec>
 8007170:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007174:	f003 0301 	and.w	r3, r3, #1
 8007178:	2b00      	cmp	r3, #0
 800717a:	d00b      	beq.n	8007194 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	2202      	movs	r2, #2
 8007182:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800718a:	f043 0204 	orr.w	r2, r3, #4
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007194:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007198:	f003 0304 	and.w	r3, r3, #4
 800719c:	2b00      	cmp	r3, #0
 800719e:	d011      	beq.n	80071c4 <HAL_UART_IRQHandler+0x11c>
 80071a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80071a4:	f003 0301 	and.w	r3, r3, #1
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d00b      	beq.n	80071c4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	2204      	movs	r2, #4
 80071b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80071ba:	f043 0202 	orr.w	r2, r3, #2
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80071c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071c8:	f003 0308 	and.w	r3, r3, #8
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d017      	beq.n	8007200 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80071d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071d4:	f003 0320 	and.w	r3, r3, #32
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d105      	bne.n	80071e8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80071dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80071e0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d00b      	beq.n	8007200 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	2208      	movs	r2, #8
 80071ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80071f6:	f043 0208 	orr.w	r2, r3, #8
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007200:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007204:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007208:	2b00      	cmp	r3, #0
 800720a:	d012      	beq.n	8007232 <HAL_UART_IRQHandler+0x18a>
 800720c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007210:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007214:	2b00      	cmp	r3, #0
 8007216:	d00c      	beq.n	8007232 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007220:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007228:	f043 0220 	orr.w	r2, r3, #32
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007238:	2b00      	cmp	r3, #0
 800723a:	f000 81fd 	beq.w	8007638 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800723e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007242:	f003 0320 	and.w	r3, r3, #32
 8007246:	2b00      	cmp	r3, #0
 8007248:	d00d      	beq.n	8007266 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800724a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800724e:	f003 0320 	and.w	r3, r3, #32
 8007252:	2b00      	cmp	r3, #0
 8007254:	d007      	beq.n	8007266 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800725a:	2b00      	cmp	r3, #0
 800725c:	d003      	beq.n	8007266 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007262:	6878      	ldr	r0, [r7, #4]
 8007264:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800726c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	689b      	ldr	r3, [r3, #8]
 8007276:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800727a:	2b40      	cmp	r3, #64	; 0x40
 800727c:	d005      	beq.n	800728a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800727e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007282:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007286:	2b00      	cmp	r3, #0
 8007288:	d04f      	beq.n	800732a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800728a:	6878      	ldr	r0, [r7, #4]
 800728c:	f001 f810 	bl	80082b0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	689b      	ldr	r3, [r3, #8]
 8007296:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800729a:	2b40      	cmp	r3, #64	; 0x40
 800729c:	d141      	bne.n	8007322 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	3308      	adds	r3, #8
 80072a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80072ac:	e853 3f00 	ldrex	r3, [r3]
 80072b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80072b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80072b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80072bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	3308      	adds	r3, #8
 80072c6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80072ca:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80072ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072d2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80072d6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80072da:	e841 2300 	strex	r3, r2, [r1]
 80072de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80072e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d1d9      	bne.n	800729e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d013      	beq.n	800731a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80072f6:	4a13      	ldr	r2, [pc, #76]	; (8007344 <HAL_UART_IRQHandler+0x29c>)
 80072f8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80072fe:	4618      	mov	r0, r3
 8007300:	f7fb f80e 	bl	8002320 <HAL_DMA_Abort_IT>
 8007304:	4603      	mov	r3, r0
 8007306:	2b00      	cmp	r3, #0
 8007308:	d017      	beq.n	800733a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800730e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007310:	687a      	ldr	r2, [r7, #4]
 8007312:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007314:	4610      	mov	r0, r2
 8007316:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007318:	e00f      	b.n	800733a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800731a:	6878      	ldr	r0, [r7, #4]
 800731c:	f000 f9a0 	bl	8007660 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007320:	e00b      	b.n	800733a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007322:	6878      	ldr	r0, [r7, #4]
 8007324:	f000 f99c 	bl	8007660 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007328:	e007      	b.n	800733a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800732a:	6878      	ldr	r0, [r7, #4]
 800732c:	f000 f998 	bl	8007660 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2200      	movs	r2, #0
 8007334:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8007338:	e17e      	b.n	8007638 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800733a:	bf00      	nop
    return;
 800733c:	e17c      	b.n	8007638 <HAL_UART_IRQHandler+0x590>
 800733e:	bf00      	nop
 8007340:	04000120 	.word	0x04000120
 8007344:	08008379 	.word	0x08008379

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800734c:	2b01      	cmp	r3, #1
 800734e:	f040 814c 	bne.w	80075ea <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007352:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007356:	f003 0310 	and.w	r3, r3, #16
 800735a:	2b00      	cmp	r3, #0
 800735c:	f000 8145 	beq.w	80075ea <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007360:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007364:	f003 0310 	and.w	r3, r3, #16
 8007368:	2b00      	cmp	r3, #0
 800736a:	f000 813e 	beq.w	80075ea <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	2210      	movs	r2, #16
 8007374:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	689b      	ldr	r3, [r3, #8]
 800737c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007380:	2b40      	cmp	r3, #64	; 0x40
 8007382:	f040 80b6 	bne.w	80074f2 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	685b      	ldr	r3, [r3, #4]
 800738e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007392:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007396:	2b00      	cmp	r3, #0
 8007398:	f000 8150 	beq.w	800763c <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80073a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80073a6:	429a      	cmp	r2, r3
 80073a8:	f080 8148 	bcs.w	800763c <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80073b2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80073ba:	69db      	ldr	r3, [r3, #28]
 80073bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80073c0:	f000 8086 	beq.w	80074d0 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80073d0:	e853 3f00 	ldrex	r3, [r3]
 80073d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80073d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80073dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80073e0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	461a      	mov	r2, r3
 80073ea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80073ee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80073f2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073f6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80073fa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80073fe:	e841 2300 	strex	r3, r2, [r1]
 8007402:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007406:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800740a:	2b00      	cmp	r3, #0
 800740c:	d1da      	bne.n	80073c4 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	3308      	adds	r3, #8
 8007414:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007416:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007418:	e853 3f00 	ldrex	r3, [r3]
 800741c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800741e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007420:	f023 0301 	bic.w	r3, r3, #1
 8007424:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	3308      	adds	r3, #8
 800742e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007432:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007436:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007438:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800743a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800743e:	e841 2300 	strex	r3, r2, [r1]
 8007442:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007444:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007446:	2b00      	cmp	r3, #0
 8007448:	d1e1      	bne.n	800740e <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	3308      	adds	r3, #8
 8007450:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007452:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007454:	e853 3f00 	ldrex	r3, [r3]
 8007458:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800745a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800745c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007460:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	3308      	adds	r3, #8
 800746a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800746e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007470:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007472:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007474:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007476:	e841 2300 	strex	r3, r2, [r1]
 800747a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800747c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800747e:	2b00      	cmp	r3, #0
 8007480:	d1e3      	bne.n	800744a <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	2220      	movs	r2, #32
 8007486:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2200      	movs	r2, #0
 800748e:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007496:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007498:	e853 3f00 	ldrex	r3, [r3]
 800749c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800749e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80074a0:	f023 0310 	bic.w	r3, r3, #16
 80074a4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	461a      	mov	r2, r3
 80074ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80074b2:	65bb      	str	r3, [r7, #88]	; 0x58
 80074b4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074b6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80074b8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80074ba:	e841 2300 	strex	r3, r2, [r1]
 80074be:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80074c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d1e4      	bne.n	8007490 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80074ca:	4618      	mov	r0, r3
 80074cc:	f7fa feb8 	bl	8002240 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2202      	movs	r2, #2
 80074d4:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80074e2:	b29b      	uxth	r3, r3
 80074e4:	1ad3      	subs	r3, r2, r3
 80074e6:	b29b      	uxth	r3, r3
 80074e8:	4619      	mov	r1, r3
 80074ea:	6878      	ldr	r0, [r7, #4]
 80074ec:	f000 f8c2 	bl	8007674 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80074f0:	e0a4      	b.n	800763c <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80074fe:	b29b      	uxth	r3, r3
 8007500:	1ad3      	subs	r3, r2, r3
 8007502:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800750c:	b29b      	uxth	r3, r3
 800750e:	2b00      	cmp	r3, #0
 8007510:	f000 8096 	beq.w	8007640 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8007514:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007518:	2b00      	cmp	r3, #0
 800751a:	f000 8091 	beq.w	8007640 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007526:	e853 3f00 	ldrex	r3, [r3]
 800752a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800752c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800752e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007532:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	461a      	mov	r2, r3
 800753c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007540:	647b      	str	r3, [r7, #68]	; 0x44
 8007542:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007544:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007546:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007548:	e841 2300 	strex	r3, r2, [r1]
 800754c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800754e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007550:	2b00      	cmp	r3, #0
 8007552:	d1e4      	bne.n	800751e <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	3308      	adds	r3, #8
 800755a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800755c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800755e:	e853 3f00 	ldrex	r3, [r3]
 8007562:	623b      	str	r3, [r7, #32]
   return(result);
 8007564:	6a3b      	ldr	r3, [r7, #32]
 8007566:	f023 0301 	bic.w	r3, r3, #1
 800756a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	3308      	adds	r3, #8
 8007574:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007578:	633a      	str	r2, [r7, #48]	; 0x30
 800757a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800757c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800757e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007580:	e841 2300 	strex	r3, r2, [r1]
 8007584:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007588:	2b00      	cmp	r3, #0
 800758a:	d1e3      	bne.n	8007554 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2220      	movs	r2, #32
 8007590:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2200      	movs	r2, #0
 8007598:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	2200      	movs	r2, #0
 800759e:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075a6:	693b      	ldr	r3, [r7, #16]
 80075a8:	e853 3f00 	ldrex	r3, [r3]
 80075ac:	60fb      	str	r3, [r7, #12]
   return(result);
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	f023 0310 	bic.w	r3, r3, #16
 80075b4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	461a      	mov	r2, r3
 80075be:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80075c2:	61fb      	str	r3, [r7, #28]
 80075c4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075c6:	69b9      	ldr	r1, [r7, #24]
 80075c8:	69fa      	ldr	r2, [r7, #28]
 80075ca:	e841 2300 	strex	r3, r2, [r1]
 80075ce:	617b      	str	r3, [r7, #20]
   return(result);
 80075d0:	697b      	ldr	r3, [r7, #20]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d1e4      	bne.n	80075a0 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2202      	movs	r2, #2
 80075da:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80075dc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80075e0:	4619      	mov	r1, r3
 80075e2:	6878      	ldr	r0, [r7, #4]
 80075e4:	f000 f846 	bl	8007674 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80075e8:	e02a      	b.n	8007640 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80075ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d00e      	beq.n	8007614 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80075f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d008      	beq.n	8007614 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007606:	2b00      	cmp	r3, #0
 8007608:	d01c      	beq.n	8007644 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800760e:	6878      	ldr	r0, [r7, #4]
 8007610:	4798      	blx	r3
    }
    return;
 8007612:	e017      	b.n	8007644 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007614:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007618:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800761c:	2b00      	cmp	r3, #0
 800761e:	d012      	beq.n	8007646 <HAL_UART_IRQHandler+0x59e>
 8007620:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007624:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007628:	2b00      	cmp	r3, #0
 800762a:	d00c      	beq.n	8007646 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 800762c:	6878      	ldr	r0, [r7, #4]
 800762e:	f000 feb9 	bl	80083a4 <UART_EndTransmit_IT>
    return;
 8007632:	e008      	b.n	8007646 <HAL_UART_IRQHandler+0x59e>
      return;
 8007634:	bf00      	nop
 8007636:	e006      	b.n	8007646 <HAL_UART_IRQHandler+0x59e>
    return;
 8007638:	bf00      	nop
 800763a:	e004      	b.n	8007646 <HAL_UART_IRQHandler+0x59e>
      return;
 800763c:	bf00      	nop
 800763e:	e002      	b.n	8007646 <HAL_UART_IRQHandler+0x59e>
      return;
 8007640:	bf00      	nop
 8007642:	e000      	b.n	8007646 <HAL_UART_IRQHandler+0x59e>
    return;
 8007644:	bf00      	nop
  }

}
 8007646:	37e8      	adds	r7, #232	; 0xe8
 8007648:	46bd      	mov	sp, r7
 800764a:	bd80      	pop	{r7, pc}

0800764c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800764c:	b480      	push	{r7}
 800764e:	b083      	sub	sp, #12
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007654:	bf00      	nop
 8007656:	370c      	adds	r7, #12
 8007658:	46bd      	mov	sp, r7
 800765a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765e:	4770      	bx	lr

08007660 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007660:	b480      	push	{r7}
 8007662:	b083      	sub	sp, #12
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007668:	bf00      	nop
 800766a:	370c      	adds	r7, #12
 800766c:	46bd      	mov	sp, r7
 800766e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007672:	4770      	bx	lr

08007674 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007674:	b480      	push	{r7}
 8007676:	b083      	sub	sp, #12
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
 800767c:	460b      	mov	r3, r1
 800767e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007680:	bf00      	nop
 8007682:	370c      	adds	r7, #12
 8007684:	46bd      	mov	sp, r7
 8007686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768a:	4770      	bx	lr

0800768c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800768c:	b580      	push	{r7, lr}
 800768e:	b088      	sub	sp, #32
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007694:	2300      	movs	r3, #0
 8007696:	77bb      	strb	r3, [r7, #30]
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	685b      	ldr	r3, [r3, #4]
 800769c:	4aa0      	ldr	r2, [pc, #640]	; (8007920 <UART_SetConfig+0x294>)
 800769e:	4293      	cmp	r3, r2
 80076a0:	d904      	bls.n	80076ac <UART_SetConfig+0x20>
 80076a2:	f640 315d 	movw	r1, #2909	; 0xb5d
 80076a6:	489f      	ldr	r0, [pc, #636]	; (8007924 <UART_SetConfig+0x298>)
 80076a8:	f7f9 ff87 	bl	80015ba <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	689b      	ldr	r3, [r3, #8]
 80076b0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80076b4:	d00d      	beq.n	80076d2 <UART_SetConfig+0x46>
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	689b      	ldr	r3, [r3, #8]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d009      	beq.n	80076d2 <UART_SetConfig+0x46>
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	689b      	ldr	r3, [r3, #8]
 80076c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076c6:	d004      	beq.n	80076d2 <UART_SetConfig+0x46>
 80076c8:	f640 315e 	movw	r1, #2910	; 0xb5e
 80076cc:	4895      	ldr	r0, [pc, #596]	; (8007924 <UART_SetConfig+0x298>)
 80076ce:	f7f9 ff74 	bl	80015ba <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	68db      	ldr	r3, [r3, #12]
 80076d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076da:	d012      	beq.n	8007702 <UART_SetConfig+0x76>
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	68db      	ldr	r3, [r3, #12]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d00e      	beq.n	8007702 <UART_SetConfig+0x76>
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	68db      	ldr	r3, [r3, #12]
 80076e8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80076ec:	d009      	beq.n	8007702 <UART_SetConfig+0x76>
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	68db      	ldr	r3, [r3, #12]
 80076f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80076f6:	d004      	beq.n	8007702 <UART_SetConfig+0x76>
 80076f8:	f640 315f 	movw	r1, #2911	; 0xb5f
 80076fc:	4889      	ldr	r0, [pc, #548]	; (8007924 <UART_SetConfig+0x298>)
 80076fe:	f7f9 ff5c 	bl	80015ba <assert_failed>
  assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	6a1b      	ldr	r3, [r3, #32]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d009      	beq.n	800771e <UART_SetConfig+0x92>
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	6a1b      	ldr	r3, [r3, #32]
 800770e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007712:	d004      	beq.n	800771e <UART_SetConfig+0x92>
 8007714:	f44f 6136 	mov.w	r1, #2912	; 0xb60
 8007718:	4882      	ldr	r0, [pc, #520]	; (8007924 <UART_SetConfig+0x298>)
 800771a:	f7f9 ff4e 	bl	80015ba <assert_failed>

  assert_param(IS_UART_PARITY(huart->Init.Parity));
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	691b      	ldr	r3, [r3, #16]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d00e      	beq.n	8007744 <UART_SetConfig+0xb8>
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	691b      	ldr	r3, [r3, #16]
 800772a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800772e:	d009      	beq.n	8007744 <UART_SetConfig+0xb8>
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	691b      	ldr	r3, [r3, #16]
 8007734:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007738:	d004      	beq.n	8007744 <UART_SetConfig+0xb8>
 800773a:	f640 3162 	movw	r1, #2914	; 0xb62
 800773e:	4879      	ldr	r0, [pc, #484]	; (8007924 <UART_SetConfig+0x298>)
 8007740:	f7f9 ff3b 	bl	80015ba <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	695b      	ldr	r3, [r3, #20]
 8007748:	f023 030c 	bic.w	r3, r3, #12
 800774c:	2b00      	cmp	r3, #0
 800774e:	d103      	bne.n	8007758 <UART_SetConfig+0xcc>
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	695b      	ldr	r3, [r3, #20]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d104      	bne.n	8007762 <UART_SetConfig+0xd6>
 8007758:	f640 3163 	movw	r1, #2915	; 0xb63
 800775c:	4871      	ldr	r0, [pc, #452]	; (8007924 <UART_SetConfig+0x298>)
 800775e:	f7f9 ff2c 	bl	80015ba <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	699b      	ldr	r3, [r3, #24]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d013      	beq.n	8007792 <UART_SetConfig+0x106>
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	699b      	ldr	r3, [r3, #24]
 800776e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007772:	d00e      	beq.n	8007792 <UART_SetConfig+0x106>
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	699b      	ldr	r3, [r3, #24]
 8007778:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800777c:	d009      	beq.n	8007792 <UART_SetConfig+0x106>
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	699b      	ldr	r3, [r3, #24]
 8007782:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007786:	d004      	beq.n	8007792 <UART_SetConfig+0x106>
 8007788:	f640 3164 	movw	r1, #2916	; 0xb64
 800778c:	4865      	ldr	r0, [pc, #404]	; (8007924 <UART_SetConfig+0x298>)
 800778e:	f7f9 ff14 	bl	80015ba <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	69db      	ldr	r3, [r3, #28]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d009      	beq.n	80077ae <UART_SetConfig+0x122>
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	69db      	ldr	r3, [r3, #28]
 800779e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80077a2:	d004      	beq.n	80077ae <UART_SetConfig+0x122>
 80077a4:	f640 3165 	movw	r1, #2917	; 0xb65
 80077a8:	485e      	ldr	r0, [pc, #376]	; (8007924 <UART_SetConfig+0x298>)
 80077aa:	f7f9 ff06 	bl	80015ba <assert_failed>
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	689a      	ldr	r2, [r3, #8]
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	691b      	ldr	r3, [r3, #16]
 80077b6:	431a      	orrs	r2, r3
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	695b      	ldr	r3, [r3, #20]
 80077bc:	431a      	orrs	r2, r3
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	69db      	ldr	r3, [r3, #28]
 80077c2:	4313      	orrs	r3, r2
 80077c4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	681a      	ldr	r2, [r3, #0]
 80077cc:	4b56      	ldr	r3, [pc, #344]	; (8007928 <UART_SetConfig+0x29c>)
 80077ce:	4013      	ands	r3, r2
 80077d0:	687a      	ldr	r2, [r7, #4]
 80077d2:	6812      	ldr	r2, [r2, #0]
 80077d4:	6979      	ldr	r1, [r7, #20]
 80077d6:	430b      	orrs	r3, r1
 80077d8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	685b      	ldr	r3, [r3, #4]
 80077e0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	68da      	ldr	r2, [r3, #12]
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	430a      	orrs	r2, r1
 80077ee:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	699b      	ldr	r3, [r3, #24]
 80077f4:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	6a1b      	ldr	r3, [r3, #32]
 80077fa:	697a      	ldr	r2, [r7, #20]
 80077fc:	4313      	orrs	r3, r2
 80077fe:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	689b      	ldr	r3, [r3, #8]
 8007806:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	697a      	ldr	r2, [r7, #20]
 8007810:	430a      	orrs	r2, r1
 8007812:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	4a44      	ldr	r2, [pc, #272]	; (800792c <UART_SetConfig+0x2a0>)
 800781a:	4293      	cmp	r3, r2
 800781c:	d121      	bne.n	8007862 <UART_SetConfig+0x1d6>
 800781e:	4b44      	ldr	r3, [pc, #272]	; (8007930 <UART_SetConfig+0x2a4>)
 8007820:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007824:	f003 0303 	and.w	r3, r3, #3
 8007828:	2b03      	cmp	r3, #3
 800782a:	d817      	bhi.n	800785c <UART_SetConfig+0x1d0>
 800782c:	a201      	add	r2, pc, #4	; (adr r2, 8007834 <UART_SetConfig+0x1a8>)
 800782e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007832:	bf00      	nop
 8007834:	08007845 	.word	0x08007845
 8007838:	08007851 	.word	0x08007851
 800783c:	0800784b 	.word	0x0800784b
 8007840:	08007857 	.word	0x08007857
 8007844:	2301      	movs	r3, #1
 8007846:	77fb      	strb	r3, [r7, #31]
 8007848:	e14c      	b.n	8007ae4 <UART_SetConfig+0x458>
 800784a:	2302      	movs	r3, #2
 800784c:	77fb      	strb	r3, [r7, #31]
 800784e:	e149      	b.n	8007ae4 <UART_SetConfig+0x458>
 8007850:	2304      	movs	r3, #4
 8007852:	77fb      	strb	r3, [r7, #31]
 8007854:	e146      	b.n	8007ae4 <UART_SetConfig+0x458>
 8007856:	2308      	movs	r3, #8
 8007858:	77fb      	strb	r3, [r7, #31]
 800785a:	e143      	b.n	8007ae4 <UART_SetConfig+0x458>
 800785c:	2310      	movs	r3, #16
 800785e:	77fb      	strb	r3, [r7, #31]
 8007860:	e140      	b.n	8007ae4 <UART_SetConfig+0x458>
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	4a33      	ldr	r2, [pc, #204]	; (8007934 <UART_SetConfig+0x2a8>)
 8007868:	4293      	cmp	r3, r2
 800786a:	d132      	bne.n	80078d2 <UART_SetConfig+0x246>
 800786c:	4b30      	ldr	r3, [pc, #192]	; (8007930 <UART_SetConfig+0x2a4>)
 800786e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007872:	f003 030c 	and.w	r3, r3, #12
 8007876:	2b0c      	cmp	r3, #12
 8007878:	d828      	bhi.n	80078cc <UART_SetConfig+0x240>
 800787a:	a201      	add	r2, pc, #4	; (adr r2, 8007880 <UART_SetConfig+0x1f4>)
 800787c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007880:	080078b5 	.word	0x080078b5
 8007884:	080078cd 	.word	0x080078cd
 8007888:	080078cd 	.word	0x080078cd
 800788c:	080078cd 	.word	0x080078cd
 8007890:	080078c1 	.word	0x080078c1
 8007894:	080078cd 	.word	0x080078cd
 8007898:	080078cd 	.word	0x080078cd
 800789c:	080078cd 	.word	0x080078cd
 80078a0:	080078bb 	.word	0x080078bb
 80078a4:	080078cd 	.word	0x080078cd
 80078a8:	080078cd 	.word	0x080078cd
 80078ac:	080078cd 	.word	0x080078cd
 80078b0:	080078c7 	.word	0x080078c7
 80078b4:	2300      	movs	r3, #0
 80078b6:	77fb      	strb	r3, [r7, #31]
 80078b8:	e114      	b.n	8007ae4 <UART_SetConfig+0x458>
 80078ba:	2302      	movs	r3, #2
 80078bc:	77fb      	strb	r3, [r7, #31]
 80078be:	e111      	b.n	8007ae4 <UART_SetConfig+0x458>
 80078c0:	2304      	movs	r3, #4
 80078c2:	77fb      	strb	r3, [r7, #31]
 80078c4:	e10e      	b.n	8007ae4 <UART_SetConfig+0x458>
 80078c6:	2308      	movs	r3, #8
 80078c8:	77fb      	strb	r3, [r7, #31]
 80078ca:	e10b      	b.n	8007ae4 <UART_SetConfig+0x458>
 80078cc:	2310      	movs	r3, #16
 80078ce:	77fb      	strb	r3, [r7, #31]
 80078d0:	e108      	b.n	8007ae4 <UART_SetConfig+0x458>
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	4a18      	ldr	r2, [pc, #96]	; (8007938 <UART_SetConfig+0x2ac>)
 80078d8:	4293      	cmp	r3, r2
 80078da:	d12f      	bne.n	800793c <UART_SetConfig+0x2b0>
 80078dc:	4b14      	ldr	r3, [pc, #80]	; (8007930 <UART_SetConfig+0x2a4>)
 80078de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80078e2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80078e6:	2b30      	cmp	r3, #48	; 0x30
 80078e8:	d013      	beq.n	8007912 <UART_SetConfig+0x286>
 80078ea:	2b30      	cmp	r3, #48	; 0x30
 80078ec:	d814      	bhi.n	8007918 <UART_SetConfig+0x28c>
 80078ee:	2b20      	cmp	r3, #32
 80078f0:	d009      	beq.n	8007906 <UART_SetConfig+0x27a>
 80078f2:	2b20      	cmp	r3, #32
 80078f4:	d810      	bhi.n	8007918 <UART_SetConfig+0x28c>
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d002      	beq.n	8007900 <UART_SetConfig+0x274>
 80078fa:	2b10      	cmp	r3, #16
 80078fc:	d006      	beq.n	800790c <UART_SetConfig+0x280>
 80078fe:	e00b      	b.n	8007918 <UART_SetConfig+0x28c>
 8007900:	2300      	movs	r3, #0
 8007902:	77fb      	strb	r3, [r7, #31]
 8007904:	e0ee      	b.n	8007ae4 <UART_SetConfig+0x458>
 8007906:	2302      	movs	r3, #2
 8007908:	77fb      	strb	r3, [r7, #31]
 800790a:	e0eb      	b.n	8007ae4 <UART_SetConfig+0x458>
 800790c:	2304      	movs	r3, #4
 800790e:	77fb      	strb	r3, [r7, #31]
 8007910:	e0e8      	b.n	8007ae4 <UART_SetConfig+0x458>
 8007912:	2308      	movs	r3, #8
 8007914:	77fb      	strb	r3, [r7, #31]
 8007916:	e0e5      	b.n	8007ae4 <UART_SetConfig+0x458>
 8007918:	2310      	movs	r3, #16
 800791a:	77fb      	strb	r3, [r7, #31]
 800791c:	e0e2      	b.n	8007ae4 <UART_SetConfig+0x458>
 800791e:	bf00      	nop
 8007920:	019bfcc0 	.word	0x019bfcc0
 8007924:	0800da94 	.word	0x0800da94
 8007928:	efff69f3 	.word	0xefff69f3
 800792c:	40011000 	.word	0x40011000
 8007930:	40023800 	.word	0x40023800
 8007934:	40004400 	.word	0x40004400
 8007938:	40004800 	.word	0x40004800
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	4aa5      	ldr	r2, [pc, #660]	; (8007bd8 <UART_SetConfig+0x54c>)
 8007942:	4293      	cmp	r3, r2
 8007944:	d120      	bne.n	8007988 <UART_SetConfig+0x2fc>
 8007946:	4ba5      	ldr	r3, [pc, #660]	; (8007bdc <UART_SetConfig+0x550>)
 8007948:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800794c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007950:	2bc0      	cmp	r3, #192	; 0xc0
 8007952:	d013      	beq.n	800797c <UART_SetConfig+0x2f0>
 8007954:	2bc0      	cmp	r3, #192	; 0xc0
 8007956:	d814      	bhi.n	8007982 <UART_SetConfig+0x2f6>
 8007958:	2b80      	cmp	r3, #128	; 0x80
 800795a:	d009      	beq.n	8007970 <UART_SetConfig+0x2e4>
 800795c:	2b80      	cmp	r3, #128	; 0x80
 800795e:	d810      	bhi.n	8007982 <UART_SetConfig+0x2f6>
 8007960:	2b00      	cmp	r3, #0
 8007962:	d002      	beq.n	800796a <UART_SetConfig+0x2de>
 8007964:	2b40      	cmp	r3, #64	; 0x40
 8007966:	d006      	beq.n	8007976 <UART_SetConfig+0x2ea>
 8007968:	e00b      	b.n	8007982 <UART_SetConfig+0x2f6>
 800796a:	2300      	movs	r3, #0
 800796c:	77fb      	strb	r3, [r7, #31]
 800796e:	e0b9      	b.n	8007ae4 <UART_SetConfig+0x458>
 8007970:	2302      	movs	r3, #2
 8007972:	77fb      	strb	r3, [r7, #31]
 8007974:	e0b6      	b.n	8007ae4 <UART_SetConfig+0x458>
 8007976:	2304      	movs	r3, #4
 8007978:	77fb      	strb	r3, [r7, #31]
 800797a:	e0b3      	b.n	8007ae4 <UART_SetConfig+0x458>
 800797c:	2308      	movs	r3, #8
 800797e:	77fb      	strb	r3, [r7, #31]
 8007980:	e0b0      	b.n	8007ae4 <UART_SetConfig+0x458>
 8007982:	2310      	movs	r3, #16
 8007984:	77fb      	strb	r3, [r7, #31]
 8007986:	e0ad      	b.n	8007ae4 <UART_SetConfig+0x458>
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	4a94      	ldr	r2, [pc, #592]	; (8007be0 <UART_SetConfig+0x554>)
 800798e:	4293      	cmp	r3, r2
 8007990:	d125      	bne.n	80079de <UART_SetConfig+0x352>
 8007992:	4b92      	ldr	r3, [pc, #584]	; (8007bdc <UART_SetConfig+0x550>)
 8007994:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007998:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800799c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80079a0:	d017      	beq.n	80079d2 <UART_SetConfig+0x346>
 80079a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80079a6:	d817      	bhi.n	80079d8 <UART_SetConfig+0x34c>
 80079a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80079ac:	d00b      	beq.n	80079c6 <UART_SetConfig+0x33a>
 80079ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80079b2:	d811      	bhi.n	80079d8 <UART_SetConfig+0x34c>
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d003      	beq.n	80079c0 <UART_SetConfig+0x334>
 80079b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80079bc:	d006      	beq.n	80079cc <UART_SetConfig+0x340>
 80079be:	e00b      	b.n	80079d8 <UART_SetConfig+0x34c>
 80079c0:	2300      	movs	r3, #0
 80079c2:	77fb      	strb	r3, [r7, #31]
 80079c4:	e08e      	b.n	8007ae4 <UART_SetConfig+0x458>
 80079c6:	2302      	movs	r3, #2
 80079c8:	77fb      	strb	r3, [r7, #31]
 80079ca:	e08b      	b.n	8007ae4 <UART_SetConfig+0x458>
 80079cc:	2304      	movs	r3, #4
 80079ce:	77fb      	strb	r3, [r7, #31]
 80079d0:	e088      	b.n	8007ae4 <UART_SetConfig+0x458>
 80079d2:	2308      	movs	r3, #8
 80079d4:	77fb      	strb	r3, [r7, #31]
 80079d6:	e085      	b.n	8007ae4 <UART_SetConfig+0x458>
 80079d8:	2310      	movs	r3, #16
 80079da:	77fb      	strb	r3, [r7, #31]
 80079dc:	e082      	b.n	8007ae4 <UART_SetConfig+0x458>
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	4a80      	ldr	r2, [pc, #512]	; (8007be4 <UART_SetConfig+0x558>)
 80079e4:	4293      	cmp	r3, r2
 80079e6:	d125      	bne.n	8007a34 <UART_SetConfig+0x3a8>
 80079e8:	4b7c      	ldr	r3, [pc, #496]	; (8007bdc <UART_SetConfig+0x550>)
 80079ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079ee:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80079f2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80079f6:	d017      	beq.n	8007a28 <UART_SetConfig+0x39c>
 80079f8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80079fc:	d817      	bhi.n	8007a2e <UART_SetConfig+0x3a2>
 80079fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007a02:	d00b      	beq.n	8007a1c <UART_SetConfig+0x390>
 8007a04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007a08:	d811      	bhi.n	8007a2e <UART_SetConfig+0x3a2>
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d003      	beq.n	8007a16 <UART_SetConfig+0x38a>
 8007a0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a12:	d006      	beq.n	8007a22 <UART_SetConfig+0x396>
 8007a14:	e00b      	b.n	8007a2e <UART_SetConfig+0x3a2>
 8007a16:	2301      	movs	r3, #1
 8007a18:	77fb      	strb	r3, [r7, #31]
 8007a1a:	e063      	b.n	8007ae4 <UART_SetConfig+0x458>
 8007a1c:	2302      	movs	r3, #2
 8007a1e:	77fb      	strb	r3, [r7, #31]
 8007a20:	e060      	b.n	8007ae4 <UART_SetConfig+0x458>
 8007a22:	2304      	movs	r3, #4
 8007a24:	77fb      	strb	r3, [r7, #31]
 8007a26:	e05d      	b.n	8007ae4 <UART_SetConfig+0x458>
 8007a28:	2308      	movs	r3, #8
 8007a2a:	77fb      	strb	r3, [r7, #31]
 8007a2c:	e05a      	b.n	8007ae4 <UART_SetConfig+0x458>
 8007a2e:	2310      	movs	r3, #16
 8007a30:	77fb      	strb	r3, [r7, #31]
 8007a32:	e057      	b.n	8007ae4 <UART_SetConfig+0x458>
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	4a6b      	ldr	r2, [pc, #428]	; (8007be8 <UART_SetConfig+0x55c>)
 8007a3a:	4293      	cmp	r3, r2
 8007a3c:	d125      	bne.n	8007a8a <UART_SetConfig+0x3fe>
 8007a3e:	4b67      	ldr	r3, [pc, #412]	; (8007bdc <UART_SetConfig+0x550>)
 8007a40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a44:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007a48:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007a4c:	d017      	beq.n	8007a7e <UART_SetConfig+0x3f2>
 8007a4e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007a52:	d817      	bhi.n	8007a84 <UART_SetConfig+0x3f8>
 8007a54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a58:	d00b      	beq.n	8007a72 <UART_SetConfig+0x3e6>
 8007a5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a5e:	d811      	bhi.n	8007a84 <UART_SetConfig+0x3f8>
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d003      	beq.n	8007a6c <UART_SetConfig+0x3e0>
 8007a64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a68:	d006      	beq.n	8007a78 <UART_SetConfig+0x3ec>
 8007a6a:	e00b      	b.n	8007a84 <UART_SetConfig+0x3f8>
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	77fb      	strb	r3, [r7, #31]
 8007a70:	e038      	b.n	8007ae4 <UART_SetConfig+0x458>
 8007a72:	2302      	movs	r3, #2
 8007a74:	77fb      	strb	r3, [r7, #31]
 8007a76:	e035      	b.n	8007ae4 <UART_SetConfig+0x458>
 8007a78:	2304      	movs	r3, #4
 8007a7a:	77fb      	strb	r3, [r7, #31]
 8007a7c:	e032      	b.n	8007ae4 <UART_SetConfig+0x458>
 8007a7e:	2308      	movs	r3, #8
 8007a80:	77fb      	strb	r3, [r7, #31]
 8007a82:	e02f      	b.n	8007ae4 <UART_SetConfig+0x458>
 8007a84:	2310      	movs	r3, #16
 8007a86:	77fb      	strb	r3, [r7, #31]
 8007a88:	e02c      	b.n	8007ae4 <UART_SetConfig+0x458>
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	4a57      	ldr	r2, [pc, #348]	; (8007bec <UART_SetConfig+0x560>)
 8007a90:	4293      	cmp	r3, r2
 8007a92:	d125      	bne.n	8007ae0 <UART_SetConfig+0x454>
 8007a94:	4b51      	ldr	r3, [pc, #324]	; (8007bdc <UART_SetConfig+0x550>)
 8007a96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a9a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007a9e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007aa2:	d017      	beq.n	8007ad4 <UART_SetConfig+0x448>
 8007aa4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007aa8:	d817      	bhi.n	8007ada <UART_SetConfig+0x44e>
 8007aaa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007aae:	d00b      	beq.n	8007ac8 <UART_SetConfig+0x43c>
 8007ab0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ab4:	d811      	bhi.n	8007ada <UART_SetConfig+0x44e>
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d003      	beq.n	8007ac2 <UART_SetConfig+0x436>
 8007aba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007abe:	d006      	beq.n	8007ace <UART_SetConfig+0x442>
 8007ac0:	e00b      	b.n	8007ada <UART_SetConfig+0x44e>
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	77fb      	strb	r3, [r7, #31]
 8007ac6:	e00d      	b.n	8007ae4 <UART_SetConfig+0x458>
 8007ac8:	2302      	movs	r3, #2
 8007aca:	77fb      	strb	r3, [r7, #31]
 8007acc:	e00a      	b.n	8007ae4 <UART_SetConfig+0x458>
 8007ace:	2304      	movs	r3, #4
 8007ad0:	77fb      	strb	r3, [r7, #31]
 8007ad2:	e007      	b.n	8007ae4 <UART_SetConfig+0x458>
 8007ad4:	2308      	movs	r3, #8
 8007ad6:	77fb      	strb	r3, [r7, #31]
 8007ad8:	e004      	b.n	8007ae4 <UART_SetConfig+0x458>
 8007ada:	2310      	movs	r3, #16
 8007adc:	77fb      	strb	r3, [r7, #31]
 8007ade:	e001      	b.n	8007ae4 <UART_SetConfig+0x458>
 8007ae0:	2310      	movs	r3, #16
 8007ae2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	69db      	ldr	r3, [r3, #28]
 8007ae8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007aec:	d15c      	bne.n	8007ba8 <UART_SetConfig+0x51c>
  {
    switch (clocksource)
 8007aee:	7ffb      	ldrb	r3, [r7, #31]
 8007af0:	2b08      	cmp	r3, #8
 8007af2:	d828      	bhi.n	8007b46 <UART_SetConfig+0x4ba>
 8007af4:	a201      	add	r2, pc, #4	; (adr r2, 8007afc <UART_SetConfig+0x470>)
 8007af6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007afa:	bf00      	nop
 8007afc:	08007b21 	.word	0x08007b21
 8007b00:	08007b29 	.word	0x08007b29
 8007b04:	08007b31 	.word	0x08007b31
 8007b08:	08007b47 	.word	0x08007b47
 8007b0c:	08007b37 	.word	0x08007b37
 8007b10:	08007b47 	.word	0x08007b47
 8007b14:	08007b47 	.word	0x08007b47
 8007b18:	08007b47 	.word	0x08007b47
 8007b1c:	08007b3f 	.word	0x08007b3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007b20:	f7fb ffec 	bl	8003afc <HAL_RCC_GetPCLK1Freq>
 8007b24:	61b8      	str	r0, [r7, #24]
        break;
 8007b26:	e013      	b.n	8007b50 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007b28:	f7fb fffc 	bl	8003b24 <HAL_RCC_GetPCLK2Freq>
 8007b2c:	61b8      	str	r0, [r7, #24]
        break;
 8007b2e:	e00f      	b.n	8007b50 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007b30:	4b2f      	ldr	r3, [pc, #188]	; (8007bf0 <UART_SetConfig+0x564>)
 8007b32:	61bb      	str	r3, [r7, #24]
        break;
 8007b34:	e00c      	b.n	8007b50 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007b36:	f7fb ff0f 	bl	8003958 <HAL_RCC_GetSysClockFreq>
 8007b3a:	61b8      	str	r0, [r7, #24]
        break;
 8007b3c:	e008      	b.n	8007b50 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007b3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007b42:	61bb      	str	r3, [r7, #24]
        break;
 8007b44:	e004      	b.n	8007b50 <UART_SetConfig+0x4c4>
      default:
        pclk = 0U;
 8007b46:	2300      	movs	r3, #0
 8007b48:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007b4a:	2301      	movs	r3, #1
 8007b4c:	77bb      	strb	r3, [r7, #30]
        break;
 8007b4e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007b50:	69bb      	ldr	r3, [r7, #24]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	f000 8082 	beq.w	8007c5c <UART_SetConfig+0x5d0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007b58:	69bb      	ldr	r3, [r7, #24]
 8007b5a:	005a      	lsls	r2, r3, #1
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	685b      	ldr	r3, [r3, #4]
 8007b60:	085b      	lsrs	r3, r3, #1
 8007b62:	441a      	add	r2, r3
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	685b      	ldr	r3, [r3, #4]
 8007b68:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b6c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007b6e:	693b      	ldr	r3, [r7, #16]
 8007b70:	2b0f      	cmp	r3, #15
 8007b72:	d916      	bls.n	8007ba2 <UART_SetConfig+0x516>
 8007b74:	693b      	ldr	r3, [r7, #16]
 8007b76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b7a:	d212      	bcs.n	8007ba2 <UART_SetConfig+0x516>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007b7c:	693b      	ldr	r3, [r7, #16]
 8007b7e:	b29b      	uxth	r3, r3
 8007b80:	f023 030f 	bic.w	r3, r3, #15
 8007b84:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007b86:	693b      	ldr	r3, [r7, #16]
 8007b88:	085b      	lsrs	r3, r3, #1
 8007b8a:	b29b      	uxth	r3, r3
 8007b8c:	f003 0307 	and.w	r3, r3, #7
 8007b90:	b29a      	uxth	r2, r3
 8007b92:	89fb      	ldrh	r3, [r7, #14]
 8007b94:	4313      	orrs	r3, r2
 8007b96:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	89fa      	ldrh	r2, [r7, #14]
 8007b9e:	60da      	str	r2, [r3, #12]
 8007ba0:	e05c      	b.n	8007c5c <UART_SetConfig+0x5d0>
      }
      else
      {
        ret = HAL_ERROR;
 8007ba2:	2301      	movs	r3, #1
 8007ba4:	77bb      	strb	r3, [r7, #30]
 8007ba6:	e059      	b.n	8007c5c <UART_SetConfig+0x5d0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007ba8:	7ffb      	ldrb	r3, [r7, #31]
 8007baa:	2b08      	cmp	r3, #8
 8007bac:	d835      	bhi.n	8007c1a <UART_SetConfig+0x58e>
 8007bae:	a201      	add	r2, pc, #4	; (adr r2, 8007bb4 <UART_SetConfig+0x528>)
 8007bb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bb4:	08007bf5 	.word	0x08007bf5
 8007bb8:	08007bfd 	.word	0x08007bfd
 8007bbc:	08007c05 	.word	0x08007c05
 8007bc0:	08007c1b 	.word	0x08007c1b
 8007bc4:	08007c0b 	.word	0x08007c0b
 8007bc8:	08007c1b 	.word	0x08007c1b
 8007bcc:	08007c1b 	.word	0x08007c1b
 8007bd0:	08007c1b 	.word	0x08007c1b
 8007bd4:	08007c13 	.word	0x08007c13
 8007bd8:	40004c00 	.word	0x40004c00
 8007bdc:	40023800 	.word	0x40023800
 8007be0:	40005000 	.word	0x40005000
 8007be4:	40011400 	.word	0x40011400
 8007be8:	40007800 	.word	0x40007800
 8007bec:	40007c00 	.word	0x40007c00
 8007bf0:	00f42400 	.word	0x00f42400
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007bf4:	f7fb ff82 	bl	8003afc <HAL_RCC_GetPCLK1Freq>
 8007bf8:	61b8      	str	r0, [r7, #24]
        break;
 8007bfa:	e013      	b.n	8007c24 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007bfc:	f7fb ff92 	bl	8003b24 <HAL_RCC_GetPCLK2Freq>
 8007c00:	61b8      	str	r0, [r7, #24]
        break;
 8007c02:	e00f      	b.n	8007c24 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007c04:	4b1b      	ldr	r3, [pc, #108]	; (8007c74 <UART_SetConfig+0x5e8>)
 8007c06:	61bb      	str	r3, [r7, #24]
        break;
 8007c08:	e00c      	b.n	8007c24 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007c0a:	f7fb fea5 	bl	8003958 <HAL_RCC_GetSysClockFreq>
 8007c0e:	61b8      	str	r0, [r7, #24]
        break;
 8007c10:	e008      	b.n	8007c24 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007c12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007c16:	61bb      	str	r3, [r7, #24]
        break;
 8007c18:	e004      	b.n	8007c24 <UART_SetConfig+0x598>
      default:
        pclk = 0U;
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007c1e:	2301      	movs	r3, #1
 8007c20:	77bb      	strb	r3, [r7, #30]
        break;
 8007c22:	bf00      	nop
    }

    if (pclk != 0U)
 8007c24:	69bb      	ldr	r3, [r7, #24]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d018      	beq.n	8007c5c <UART_SetConfig+0x5d0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	685b      	ldr	r3, [r3, #4]
 8007c2e:	085a      	lsrs	r2, r3, #1
 8007c30:	69bb      	ldr	r3, [r7, #24]
 8007c32:	441a      	add	r2, r3
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	685b      	ldr	r3, [r3, #4]
 8007c38:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c3c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007c3e:	693b      	ldr	r3, [r7, #16]
 8007c40:	2b0f      	cmp	r3, #15
 8007c42:	d909      	bls.n	8007c58 <UART_SetConfig+0x5cc>
 8007c44:	693b      	ldr	r3, [r7, #16]
 8007c46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c4a:	d205      	bcs.n	8007c58 <UART_SetConfig+0x5cc>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007c4c:	693b      	ldr	r3, [r7, #16]
 8007c4e:	b29a      	uxth	r2, r3
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	60da      	str	r2, [r3, #12]
 8007c56:	e001      	b.n	8007c5c <UART_SetConfig+0x5d0>
      }
      else
      {
        ret = HAL_ERROR;
 8007c58:	2301      	movs	r3, #1
 8007c5a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2200      	movs	r2, #0
 8007c60:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	2200      	movs	r2, #0
 8007c66:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8007c68:	7fbb      	ldrb	r3, [r7, #30]
}
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	3720      	adds	r7, #32
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	bd80      	pop	{r7, pc}
 8007c72:	bf00      	nop
 8007c74:	00f42400 	.word	0x00f42400

08007c78 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b082      	sub	sp, #8
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c84:	2bff      	cmp	r3, #255	; 0xff
 8007c86:	d904      	bls.n	8007c92 <UART_AdvFeatureConfig+0x1a>
 8007c88:	f640 31e6 	movw	r1, #3046	; 0xbe6
 8007c8c:	488e      	ldr	r0, [pc, #568]	; (8007ec8 <UART_AdvFeatureConfig+0x250>)
 8007c8e:	f7f9 fc94 	bl	80015ba <assert_failed>

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c96:	f003 0301 	and.w	r3, r3, #1
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d018      	beq.n	8007cd0 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d009      	beq.n	8007cba <UART_AdvFeatureConfig+0x42>
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007caa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007cae:	d004      	beq.n	8007cba <UART_AdvFeatureConfig+0x42>
 8007cb0:	f640 31eb 	movw	r1, #3051	; 0xbeb
 8007cb4:	4884      	ldr	r0, [pc, #528]	; (8007ec8 <UART_AdvFeatureConfig+0x250>)
 8007cb6:	f7f9 fc80 	bl	80015ba <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	685b      	ldr	r3, [r3, #4]
 8007cc0:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	430a      	orrs	r2, r1
 8007cce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cd4:	f003 0302 	and.w	r3, r3, #2
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d018      	beq.n	8007d0e <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d009      	beq.n	8007cf8 <UART_AdvFeatureConfig+0x80>
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ce8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007cec:	d004      	beq.n	8007cf8 <UART_AdvFeatureConfig+0x80>
 8007cee:	f640 31f2 	movw	r1, #3058	; 0xbf2
 8007cf2:	4875      	ldr	r0, [pc, #468]	; (8007ec8 <UART_AdvFeatureConfig+0x250>)
 8007cf4:	f7f9 fc61 	bl	80015ba <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	685b      	ldr	r3, [r3, #4]
 8007cfe:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	430a      	orrs	r2, r1
 8007d0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d12:	f003 0304 	and.w	r3, r3, #4
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d018      	beq.n	8007d4c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d009      	beq.n	8007d36 <UART_AdvFeatureConfig+0xbe>
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d26:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007d2a:	d004      	beq.n	8007d36 <UART_AdvFeatureConfig+0xbe>
 8007d2c:	f640 31f9 	movw	r1, #3065	; 0xbf9
 8007d30:	4865      	ldr	r0, [pc, #404]	; (8007ec8 <UART_AdvFeatureConfig+0x250>)
 8007d32:	f7f9 fc42 	bl	80015ba <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	685b      	ldr	r3, [r3, #4]
 8007d3c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	430a      	orrs	r2, r1
 8007d4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d50:	f003 0308 	and.w	r3, r3, #8
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d018      	beq.n	8007d8a <UART_AdvFeatureConfig+0x112>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d009      	beq.n	8007d74 <UART_AdvFeatureConfig+0xfc>
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007d68:	d004      	beq.n	8007d74 <UART_AdvFeatureConfig+0xfc>
 8007d6a:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8007d6e:	4856      	ldr	r0, [pc, #344]	; (8007ec8 <UART_AdvFeatureConfig+0x250>)
 8007d70:	f7f9 fc23 	bl	80015ba <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	685b      	ldr	r3, [r3, #4]
 8007d7a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	430a      	orrs	r2, r1
 8007d88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d8e:	f003 0310 	and.w	r3, r3, #16
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d018      	beq.n	8007dc8 <UART_AdvFeatureConfig+0x150>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d009      	beq.n	8007db2 <UART_AdvFeatureConfig+0x13a>
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007da2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007da6:	d004      	beq.n	8007db2 <UART_AdvFeatureConfig+0x13a>
 8007da8:	f640 4107 	movw	r1, #3079	; 0xc07
 8007dac:	4846      	ldr	r0, [pc, #280]	; (8007ec8 <UART_AdvFeatureConfig+0x250>)
 8007dae:	f7f9 fc04 	bl	80015ba <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	689b      	ldr	r3, [r3, #8]
 8007db8:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	430a      	orrs	r2, r1
 8007dc6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dcc:	f003 0320 	and.w	r3, r3, #32
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d018      	beq.n	8007e06 <UART_AdvFeatureConfig+0x18e>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d009      	beq.n	8007df0 <UART_AdvFeatureConfig+0x178>
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007de0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007de4:	d004      	beq.n	8007df0 <UART_AdvFeatureConfig+0x178>
 8007de6:	f640 410e 	movw	r1, #3086	; 0xc0e
 8007dea:	4837      	ldr	r0, [pc, #220]	; (8007ec8 <UART_AdvFeatureConfig+0x250>)
 8007dec:	f7f9 fbe5 	bl	80015ba <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	689b      	ldr	r3, [r3, #8]
 8007df6:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	430a      	orrs	r2, r1
 8007e04:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d064      	beq.n	8007edc <UART_AdvFeatureConfig+0x264>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	4a2d      	ldr	r2, [pc, #180]	; (8007ecc <UART_AdvFeatureConfig+0x254>)
 8007e18:	4293      	cmp	r3, r2
 8007e1a:	d013      	beq.n	8007e44 <UART_AdvFeatureConfig+0x1cc>
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	4a2b      	ldr	r2, [pc, #172]	; (8007ed0 <UART_AdvFeatureConfig+0x258>)
 8007e22:	4293      	cmp	r3, r2
 8007e24:	d00e      	beq.n	8007e44 <UART_AdvFeatureConfig+0x1cc>
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	4a2a      	ldr	r2, [pc, #168]	; (8007ed4 <UART_AdvFeatureConfig+0x25c>)
 8007e2c:	4293      	cmp	r3, r2
 8007e2e:	d009      	beq.n	8007e44 <UART_AdvFeatureConfig+0x1cc>
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	4a28      	ldr	r2, [pc, #160]	; (8007ed8 <UART_AdvFeatureConfig+0x260>)
 8007e36:	4293      	cmp	r3, r2
 8007e38:	d004      	beq.n	8007e44 <UART_AdvFeatureConfig+0x1cc>
 8007e3a:	f640 4115 	movw	r1, #3093	; 0xc15
 8007e3e:	4822      	ldr	r0, [pc, #136]	; (8007ec8 <UART_AdvFeatureConfig+0x250>)
 8007e40:	f7f9 fbbb 	bl	80015ba <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d009      	beq.n	8007e60 <UART_AdvFeatureConfig+0x1e8>
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e50:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007e54:	d004      	beq.n	8007e60 <UART_AdvFeatureConfig+0x1e8>
 8007e56:	f640 4116 	movw	r1, #3094	; 0xc16
 8007e5a:	481b      	ldr	r0, [pc, #108]	; (8007ec8 <UART_AdvFeatureConfig+0x250>)
 8007e5c:	f7f9 fbad 	bl	80015ba <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	685b      	ldr	r3, [r3, #4]
 8007e66:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	430a      	orrs	r2, r1
 8007e74:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007e7e:	d12d      	bne.n	8007edc <UART_AdvFeatureConfig+0x264>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d013      	beq.n	8007eb0 <UART_AdvFeatureConfig+0x238>
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e8c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007e90:	d00e      	beq.n	8007eb0 <UART_AdvFeatureConfig+0x238>
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e96:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007e9a:	d009      	beq.n	8007eb0 <UART_AdvFeatureConfig+0x238>
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ea0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007ea4:	d004      	beq.n	8007eb0 <UART_AdvFeatureConfig+0x238>
 8007ea6:	f640 411b 	movw	r1, #3099	; 0xc1b
 8007eaa:	4807      	ldr	r0, [pc, #28]	; (8007ec8 <UART_AdvFeatureConfig+0x250>)
 8007eac:	f7f9 fb85 	bl	80015ba <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	685b      	ldr	r3, [r3, #4]
 8007eb6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	430a      	orrs	r2, r1
 8007ec4:	605a      	str	r2, [r3, #4]
 8007ec6:	e009      	b.n	8007edc <UART_AdvFeatureConfig+0x264>
 8007ec8:	0800da94 	.word	0x0800da94
 8007ecc:	40011000 	.word	0x40011000
 8007ed0:	40004400 	.word	0x40004400
 8007ed4:	40004800 	.word	0x40004800
 8007ed8:	40011400 	.word	0x40011400
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ee0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d018      	beq.n	8007f1a <UART_AdvFeatureConfig+0x2a2>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d009      	beq.n	8007f04 <UART_AdvFeatureConfig+0x28c>
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ef4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007ef8:	d004      	beq.n	8007f04 <UART_AdvFeatureConfig+0x28c>
 8007efa:	f640 4123 	movw	r1, #3107	; 0xc23
 8007efe:	4809      	ldr	r0, [pc, #36]	; (8007f24 <UART_AdvFeatureConfig+0x2ac>)
 8007f00:	f7f9 fb5b 	bl	80015ba <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	685b      	ldr	r3, [r3, #4]
 8007f0a:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	430a      	orrs	r2, r1
 8007f18:	605a      	str	r2, [r3, #4]
  }
}
 8007f1a:	bf00      	nop
 8007f1c:	3708      	adds	r7, #8
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	bd80      	pop	{r7, pc}
 8007f22:	bf00      	nop
 8007f24:	0800da94 	.word	0x0800da94

08007f28 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b086      	sub	sp, #24
 8007f2c:	af02      	add	r7, sp, #8
 8007f2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	2200      	movs	r2, #0
 8007f34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007f38:	f7fa f812 	bl	8001f60 <HAL_GetTick>
 8007f3c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	f003 0308 	and.w	r3, r3, #8
 8007f48:	2b08      	cmp	r3, #8
 8007f4a:	d10e      	bne.n	8007f6a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007f4c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007f50:	9300      	str	r3, [sp, #0]
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	2200      	movs	r2, #0
 8007f56:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007f5a:	6878      	ldr	r0, [r7, #4]
 8007f5c:	f000 f81b 	bl	8007f96 <UART_WaitOnFlagUntilTimeout>
 8007f60:	4603      	mov	r3, r0
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d001      	beq.n	8007f6a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007f66:	2303      	movs	r3, #3
 8007f68:	e011      	b.n	8007f8e <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	2220      	movs	r2, #32
 8007f6e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2220      	movs	r2, #32
 8007f74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	2200      	movs	r2, #0
 8007f82:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	2200      	movs	r2, #0
 8007f88:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8007f8c:	2300      	movs	r3, #0
}
 8007f8e:	4618      	mov	r0, r3
 8007f90:	3710      	adds	r7, #16
 8007f92:	46bd      	mov	sp, r7
 8007f94:	bd80      	pop	{r7, pc}

08007f96 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007f96:	b580      	push	{r7, lr}
 8007f98:	b09c      	sub	sp, #112	; 0x70
 8007f9a:	af00      	add	r7, sp, #0
 8007f9c:	60f8      	str	r0, [r7, #12]
 8007f9e:	60b9      	str	r1, [r7, #8]
 8007fa0:	603b      	str	r3, [r7, #0]
 8007fa2:	4613      	mov	r3, r2
 8007fa4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007fa6:	e0a7      	b.n	80080f8 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007fa8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007faa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fae:	f000 80a3 	beq.w	80080f8 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007fb2:	f7f9 ffd5 	bl	8001f60 <HAL_GetTick>
 8007fb6:	4602      	mov	r2, r0
 8007fb8:	683b      	ldr	r3, [r7, #0]
 8007fba:	1ad3      	subs	r3, r2, r3
 8007fbc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007fbe:	429a      	cmp	r2, r3
 8007fc0:	d302      	bcc.n	8007fc8 <UART_WaitOnFlagUntilTimeout+0x32>
 8007fc2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d13f      	bne.n	8008048 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007fd0:	e853 3f00 	ldrex	r3, [r3]
 8007fd4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007fd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007fd8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007fdc:	667b      	str	r3, [r7, #100]	; 0x64
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	461a      	mov	r2, r3
 8007fe4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007fe6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007fe8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fea:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007fec:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007fee:	e841 2300 	strex	r3, r2, [r1]
 8007ff2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007ff4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d1e6      	bne.n	8007fc8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	3308      	adds	r3, #8
 8008000:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008002:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008004:	e853 3f00 	ldrex	r3, [r3]
 8008008:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800800a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800800c:	f023 0301 	bic.w	r3, r3, #1
 8008010:	663b      	str	r3, [r7, #96]	; 0x60
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	3308      	adds	r3, #8
 8008018:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800801a:	64ba      	str	r2, [r7, #72]	; 0x48
 800801c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800801e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008020:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008022:	e841 2300 	strex	r3, r2, [r1]
 8008026:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008028:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800802a:	2b00      	cmp	r3, #0
 800802c:	d1e5      	bne.n	8007ffa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	2220      	movs	r2, #32
 8008032:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	2220      	movs	r2, #32
 8008038:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	2200      	movs	r2, #0
 8008040:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8008044:	2303      	movs	r3, #3
 8008046:	e068      	b.n	800811a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	f003 0304 	and.w	r3, r3, #4
 8008052:	2b00      	cmp	r3, #0
 8008054:	d050      	beq.n	80080f8 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	69db      	ldr	r3, [r3, #28]
 800805c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008060:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008064:	d148      	bne.n	80080f8 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800806e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008078:	e853 3f00 	ldrex	r3, [r3]
 800807c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800807e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008080:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008084:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	461a      	mov	r2, r3
 800808c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800808e:	637b      	str	r3, [r7, #52]	; 0x34
 8008090:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008092:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008094:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008096:	e841 2300 	strex	r3, r2, [r1]
 800809a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800809c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d1e6      	bne.n	8008070 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	3308      	adds	r3, #8
 80080a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080aa:	697b      	ldr	r3, [r7, #20]
 80080ac:	e853 3f00 	ldrex	r3, [r3]
 80080b0:	613b      	str	r3, [r7, #16]
   return(result);
 80080b2:	693b      	ldr	r3, [r7, #16]
 80080b4:	f023 0301 	bic.w	r3, r3, #1
 80080b8:	66bb      	str	r3, [r7, #104]	; 0x68
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	3308      	adds	r3, #8
 80080c0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80080c2:	623a      	str	r2, [r7, #32]
 80080c4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080c6:	69f9      	ldr	r1, [r7, #28]
 80080c8:	6a3a      	ldr	r2, [r7, #32]
 80080ca:	e841 2300 	strex	r3, r2, [r1]
 80080ce:	61bb      	str	r3, [r7, #24]
   return(result);
 80080d0:	69bb      	ldr	r3, [r7, #24]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d1e5      	bne.n	80080a2 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	2220      	movs	r2, #32
 80080da:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	2220      	movs	r2, #32
 80080e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	2220      	movs	r2, #32
 80080e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	2200      	movs	r2, #0
 80080f0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80080f4:	2303      	movs	r3, #3
 80080f6:	e010      	b.n	800811a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	69da      	ldr	r2, [r3, #28]
 80080fe:	68bb      	ldr	r3, [r7, #8]
 8008100:	4013      	ands	r3, r2
 8008102:	68ba      	ldr	r2, [r7, #8]
 8008104:	429a      	cmp	r2, r3
 8008106:	bf0c      	ite	eq
 8008108:	2301      	moveq	r3, #1
 800810a:	2300      	movne	r3, #0
 800810c:	b2db      	uxtb	r3, r3
 800810e:	461a      	mov	r2, r3
 8008110:	79fb      	ldrb	r3, [r7, #7]
 8008112:	429a      	cmp	r2, r3
 8008114:	f43f af48 	beq.w	8007fa8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008118:	2300      	movs	r3, #0
}
 800811a:	4618      	mov	r0, r3
 800811c:	3770      	adds	r7, #112	; 0x70
 800811e:	46bd      	mov	sp, r7
 8008120:	bd80      	pop	{r7, pc}
	...

08008124 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008124:	b480      	push	{r7}
 8008126:	b097      	sub	sp, #92	; 0x5c
 8008128:	af00      	add	r7, sp, #0
 800812a:	60f8      	str	r0, [r7, #12]
 800812c:	60b9      	str	r1, [r7, #8]
 800812e:	4613      	mov	r3, r2
 8008130:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	68ba      	ldr	r2, [r7, #8]
 8008136:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	88fa      	ldrh	r2, [r7, #6]
 800813c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	88fa      	ldrh	r2, [r7, #6]
 8008144:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	2200      	movs	r2, #0
 800814c:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	689b      	ldr	r3, [r3, #8]
 8008152:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008156:	d10e      	bne.n	8008176 <UART_Start_Receive_IT+0x52>
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	691b      	ldr	r3, [r3, #16]
 800815c:	2b00      	cmp	r3, #0
 800815e:	d105      	bne.n	800816c <UART_Start_Receive_IT+0x48>
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008166:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800816a:	e02d      	b.n	80081c8 <UART_Start_Receive_IT+0xa4>
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	22ff      	movs	r2, #255	; 0xff
 8008170:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008174:	e028      	b.n	80081c8 <UART_Start_Receive_IT+0xa4>
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	689b      	ldr	r3, [r3, #8]
 800817a:	2b00      	cmp	r3, #0
 800817c:	d10d      	bne.n	800819a <UART_Start_Receive_IT+0x76>
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	691b      	ldr	r3, [r3, #16]
 8008182:	2b00      	cmp	r3, #0
 8008184:	d104      	bne.n	8008190 <UART_Start_Receive_IT+0x6c>
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	22ff      	movs	r2, #255	; 0xff
 800818a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800818e:	e01b      	b.n	80081c8 <UART_Start_Receive_IT+0xa4>
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	227f      	movs	r2, #127	; 0x7f
 8008194:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008198:	e016      	b.n	80081c8 <UART_Start_Receive_IT+0xa4>
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	689b      	ldr	r3, [r3, #8]
 800819e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80081a2:	d10d      	bne.n	80081c0 <UART_Start_Receive_IT+0x9c>
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	691b      	ldr	r3, [r3, #16]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d104      	bne.n	80081b6 <UART_Start_Receive_IT+0x92>
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	227f      	movs	r2, #127	; 0x7f
 80081b0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80081b4:	e008      	b.n	80081c8 <UART_Start_Receive_IT+0xa4>
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	223f      	movs	r2, #63	; 0x3f
 80081ba:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80081be:	e003      	b.n	80081c8 <UART_Start_Receive_IT+0xa4>
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	2200      	movs	r2, #0
 80081c4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	2200      	movs	r2, #0
 80081cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	2222      	movs	r2, #34	; 0x22
 80081d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	3308      	adds	r3, #8
 80081de:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081e2:	e853 3f00 	ldrex	r3, [r3]
 80081e6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80081e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081ea:	f043 0301 	orr.w	r3, r3, #1
 80081ee:	657b      	str	r3, [r7, #84]	; 0x54
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	3308      	adds	r3, #8
 80081f6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80081f8:	64ba      	str	r2, [r7, #72]	; 0x48
 80081fa:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081fc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80081fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008200:	e841 2300 	strex	r3, r2, [r1]
 8008204:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008206:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008208:	2b00      	cmp	r3, #0
 800820a:	d1e5      	bne.n	80081d8 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	689b      	ldr	r3, [r3, #8]
 8008210:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008214:	d107      	bne.n	8008226 <UART_Start_Receive_IT+0x102>
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	691b      	ldr	r3, [r3, #16]
 800821a:	2b00      	cmp	r3, #0
 800821c:	d103      	bne.n	8008226 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	4a21      	ldr	r2, [pc, #132]	; (80082a8 <UART_Start_Receive_IT+0x184>)
 8008222:	669a      	str	r2, [r3, #104]	; 0x68
 8008224:	e002      	b.n	800822c <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	4a20      	ldr	r2, [pc, #128]	; (80082ac <UART_Start_Receive_IT+0x188>)
 800822a:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	691b      	ldr	r3, [r3, #16]
 8008230:	2b00      	cmp	r3, #0
 8008232:	d019      	beq.n	8008268 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800823a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800823c:	e853 3f00 	ldrex	r3, [r3]
 8008240:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008244:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8008248:	64fb      	str	r3, [r7, #76]	; 0x4c
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	461a      	mov	r2, r3
 8008250:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008252:	637b      	str	r3, [r7, #52]	; 0x34
 8008254:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008256:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008258:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800825a:	e841 2300 	strex	r3, r2, [r1]
 800825e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008262:	2b00      	cmp	r3, #0
 8008264:	d1e6      	bne.n	8008234 <UART_Start_Receive_IT+0x110>
 8008266:	e018      	b.n	800829a <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800826e:	697b      	ldr	r3, [r7, #20]
 8008270:	e853 3f00 	ldrex	r3, [r3]
 8008274:	613b      	str	r3, [r7, #16]
   return(result);
 8008276:	693b      	ldr	r3, [r7, #16]
 8008278:	f043 0320 	orr.w	r3, r3, #32
 800827c:	653b      	str	r3, [r7, #80]	; 0x50
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	461a      	mov	r2, r3
 8008284:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008286:	623b      	str	r3, [r7, #32]
 8008288:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800828a:	69f9      	ldr	r1, [r7, #28]
 800828c:	6a3a      	ldr	r2, [r7, #32]
 800828e:	e841 2300 	strex	r3, r2, [r1]
 8008292:	61bb      	str	r3, [r7, #24]
   return(result);
 8008294:	69bb      	ldr	r3, [r7, #24]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d1e6      	bne.n	8008268 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 800829a:	2300      	movs	r3, #0
}
 800829c:	4618      	mov	r0, r3
 800829e:	375c      	adds	r7, #92	; 0x5c
 80082a0:	46bd      	mov	sp, r7
 80082a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a6:	4770      	bx	lr
 80082a8:	0800855f 	.word	0x0800855f
 80082ac:	080083f9 	.word	0x080083f9

080082b0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80082b0:	b480      	push	{r7}
 80082b2:	b095      	sub	sp, #84	; 0x54
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082c0:	e853 3f00 	ldrex	r3, [r3]
 80082c4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80082c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082c8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80082cc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	461a      	mov	r2, r3
 80082d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80082d6:	643b      	str	r3, [r7, #64]	; 0x40
 80082d8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082da:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80082dc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80082de:	e841 2300 	strex	r3, r2, [r1]
 80082e2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80082e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d1e6      	bne.n	80082b8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	3308      	adds	r3, #8
 80082f0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082f2:	6a3b      	ldr	r3, [r7, #32]
 80082f4:	e853 3f00 	ldrex	r3, [r3]
 80082f8:	61fb      	str	r3, [r7, #28]
   return(result);
 80082fa:	69fb      	ldr	r3, [r7, #28]
 80082fc:	f023 0301 	bic.w	r3, r3, #1
 8008300:	64bb      	str	r3, [r7, #72]	; 0x48
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	3308      	adds	r3, #8
 8008308:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800830a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800830c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800830e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008310:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008312:	e841 2300 	strex	r3, r2, [r1]
 8008316:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800831a:	2b00      	cmp	r3, #0
 800831c:	d1e5      	bne.n	80082ea <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008322:	2b01      	cmp	r3, #1
 8008324:	d118      	bne.n	8008358 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	e853 3f00 	ldrex	r3, [r3]
 8008332:	60bb      	str	r3, [r7, #8]
   return(result);
 8008334:	68bb      	ldr	r3, [r7, #8]
 8008336:	f023 0310 	bic.w	r3, r3, #16
 800833a:	647b      	str	r3, [r7, #68]	; 0x44
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	461a      	mov	r2, r3
 8008342:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008344:	61bb      	str	r3, [r7, #24]
 8008346:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008348:	6979      	ldr	r1, [r7, #20]
 800834a:	69ba      	ldr	r2, [r7, #24]
 800834c:	e841 2300 	strex	r3, r2, [r1]
 8008350:	613b      	str	r3, [r7, #16]
   return(result);
 8008352:	693b      	ldr	r3, [r7, #16]
 8008354:	2b00      	cmp	r3, #0
 8008356:	d1e6      	bne.n	8008326 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	2220      	movs	r2, #32
 800835c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	2200      	movs	r2, #0
 8008364:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	2200      	movs	r2, #0
 800836a:	669a      	str	r2, [r3, #104]	; 0x68
}
 800836c:	bf00      	nop
 800836e:	3754      	adds	r7, #84	; 0x54
 8008370:	46bd      	mov	sp, r7
 8008372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008376:	4770      	bx	lr

08008378 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b084      	sub	sp, #16
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008384:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	2200      	movs	r2, #0
 800838a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	2200      	movs	r2, #0
 8008392:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008396:	68f8      	ldr	r0, [r7, #12]
 8008398:	f7ff f962 	bl	8007660 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800839c:	bf00      	nop
 800839e:	3710      	adds	r7, #16
 80083a0:	46bd      	mov	sp, r7
 80083a2:	bd80      	pop	{r7, pc}

080083a4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b088      	sub	sp, #32
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	e853 3f00 	ldrex	r3, [r3]
 80083b8:	60bb      	str	r3, [r7, #8]
   return(result);
 80083ba:	68bb      	ldr	r3, [r7, #8]
 80083bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80083c0:	61fb      	str	r3, [r7, #28]
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	461a      	mov	r2, r3
 80083c8:	69fb      	ldr	r3, [r7, #28]
 80083ca:	61bb      	str	r3, [r7, #24]
 80083cc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083ce:	6979      	ldr	r1, [r7, #20]
 80083d0:	69ba      	ldr	r2, [r7, #24]
 80083d2:	e841 2300 	strex	r3, r2, [r1]
 80083d6:	613b      	str	r3, [r7, #16]
   return(result);
 80083d8:	693b      	ldr	r3, [r7, #16]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d1e6      	bne.n	80083ac <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	2220      	movs	r2, #32
 80083e2:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	2200      	movs	r2, #0
 80083e8:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80083ea:	6878      	ldr	r0, [r7, #4]
 80083ec:	f7ff f92e 	bl	800764c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80083f0:	bf00      	nop
 80083f2:	3720      	adds	r7, #32
 80083f4:	46bd      	mov	sp, r7
 80083f6:	bd80      	pop	{r7, pc}

080083f8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b096      	sub	sp, #88	; 0x58
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008406:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008410:	2b22      	cmp	r3, #34	; 0x22
 8008412:	f040 8098 	bne.w	8008546 <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800841c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008420:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8008424:	b2d9      	uxtb	r1, r3
 8008426:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800842a:	b2da      	uxtb	r2, r3
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008430:	400a      	ands	r2, r1
 8008432:	b2d2      	uxtb	r2, r2
 8008434:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800843a:	1c5a      	adds	r2, r3, #1
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008446:	b29b      	uxth	r3, r3
 8008448:	3b01      	subs	r3, #1
 800844a:	b29a      	uxth	r2, r3
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008458:	b29b      	uxth	r3, r3
 800845a:	2b00      	cmp	r3, #0
 800845c:	d17b      	bne.n	8008556 <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008466:	e853 3f00 	ldrex	r3, [r3]
 800846a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800846c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800846e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008472:	653b      	str	r3, [r7, #80]	; 0x50
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	461a      	mov	r2, r3
 800847a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800847c:	647b      	str	r3, [r7, #68]	; 0x44
 800847e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008480:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008482:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008484:	e841 2300 	strex	r3, r2, [r1]
 8008488:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800848a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800848c:	2b00      	cmp	r3, #0
 800848e:	d1e6      	bne.n	800845e <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	3308      	adds	r3, #8
 8008496:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800849a:	e853 3f00 	ldrex	r3, [r3]
 800849e:	623b      	str	r3, [r7, #32]
   return(result);
 80084a0:	6a3b      	ldr	r3, [r7, #32]
 80084a2:	f023 0301 	bic.w	r3, r3, #1
 80084a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	3308      	adds	r3, #8
 80084ae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80084b0:	633a      	str	r2, [r7, #48]	; 0x30
 80084b2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084b4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80084b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80084b8:	e841 2300 	strex	r3, r2, [r1]
 80084bc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80084be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d1e5      	bne.n	8008490 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	2220      	movs	r2, #32
 80084c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	2200      	movs	r2, #0
 80084d0:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	2200      	movs	r2, #0
 80084d6:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80084dc:	2b01      	cmp	r3, #1
 80084de:	d12e      	bne.n	800853e <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	2200      	movs	r2, #0
 80084e4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084ec:	693b      	ldr	r3, [r7, #16]
 80084ee:	e853 3f00 	ldrex	r3, [r3]
 80084f2:	60fb      	str	r3, [r7, #12]
   return(result);
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	f023 0310 	bic.w	r3, r3, #16
 80084fa:	64bb      	str	r3, [r7, #72]	; 0x48
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	461a      	mov	r2, r3
 8008502:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008504:	61fb      	str	r3, [r7, #28]
 8008506:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008508:	69b9      	ldr	r1, [r7, #24]
 800850a:	69fa      	ldr	r2, [r7, #28]
 800850c:	e841 2300 	strex	r3, r2, [r1]
 8008510:	617b      	str	r3, [r7, #20]
   return(result);
 8008512:	697b      	ldr	r3, [r7, #20]
 8008514:	2b00      	cmp	r3, #0
 8008516:	d1e6      	bne.n	80084e6 <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	69db      	ldr	r3, [r3, #28]
 800851e:	f003 0310 	and.w	r3, r3, #16
 8008522:	2b10      	cmp	r3, #16
 8008524:	d103      	bne.n	800852e <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	2210      	movs	r2, #16
 800852c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008534:	4619      	mov	r1, r3
 8008536:	6878      	ldr	r0, [r7, #4]
 8008538:	f7ff f89c 	bl	8007674 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800853c:	e00b      	b.n	8008556 <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 800853e:	6878      	ldr	r0, [r7, #4]
 8008540:	f7f8 fff8 	bl	8001534 <HAL_UART_RxCpltCallback>
}
 8008544:	e007      	b.n	8008556 <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	699a      	ldr	r2, [r3, #24]
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	f042 0208 	orr.w	r2, r2, #8
 8008554:	619a      	str	r2, [r3, #24]
}
 8008556:	bf00      	nop
 8008558:	3758      	adds	r7, #88	; 0x58
 800855a:	46bd      	mov	sp, r7
 800855c:	bd80      	pop	{r7, pc}

0800855e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800855e:	b580      	push	{r7, lr}
 8008560:	b096      	sub	sp, #88	; 0x58
 8008562:	af00      	add	r7, sp, #0
 8008564:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800856c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008576:	2b22      	cmp	r3, #34	; 0x22
 8008578:	f040 8098 	bne.w	80086ac <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008582:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800858a:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800858c:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8008590:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008594:	4013      	ands	r3, r2
 8008596:	b29a      	uxth	r2, r3
 8008598:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800859a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085a0:	1c9a      	adds	r2, r3, #2
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80085ac:	b29b      	uxth	r3, r3
 80085ae:	3b01      	subs	r3, #1
 80085b0:	b29a      	uxth	r2, r3
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80085be:	b29b      	uxth	r3, r3
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d17b      	bne.n	80086bc <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085cc:	e853 3f00 	ldrex	r3, [r3]
 80085d0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80085d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085d4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80085d8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	461a      	mov	r2, r3
 80085e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80085e2:	643b      	str	r3, [r7, #64]	; 0x40
 80085e4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085e6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80085e8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80085ea:	e841 2300 	strex	r3, r2, [r1]
 80085ee:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80085f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d1e6      	bne.n	80085c4 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	3308      	adds	r3, #8
 80085fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085fe:	6a3b      	ldr	r3, [r7, #32]
 8008600:	e853 3f00 	ldrex	r3, [r3]
 8008604:	61fb      	str	r3, [r7, #28]
   return(result);
 8008606:	69fb      	ldr	r3, [r7, #28]
 8008608:	f023 0301 	bic.w	r3, r3, #1
 800860c:	64bb      	str	r3, [r7, #72]	; 0x48
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	3308      	adds	r3, #8
 8008614:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008616:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008618:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800861a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800861c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800861e:	e841 2300 	strex	r3, r2, [r1]
 8008622:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008626:	2b00      	cmp	r3, #0
 8008628:	d1e5      	bne.n	80085f6 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	2220      	movs	r2, #32
 800862e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	2200      	movs	r2, #0
 8008636:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	2200      	movs	r2, #0
 800863c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008642:	2b01      	cmp	r3, #1
 8008644:	d12e      	bne.n	80086a4 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	2200      	movs	r2, #0
 800864a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	e853 3f00 	ldrex	r3, [r3]
 8008658:	60bb      	str	r3, [r7, #8]
   return(result);
 800865a:	68bb      	ldr	r3, [r7, #8]
 800865c:	f023 0310 	bic.w	r3, r3, #16
 8008660:	647b      	str	r3, [r7, #68]	; 0x44
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	461a      	mov	r2, r3
 8008668:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800866a:	61bb      	str	r3, [r7, #24]
 800866c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800866e:	6979      	ldr	r1, [r7, #20]
 8008670:	69ba      	ldr	r2, [r7, #24]
 8008672:	e841 2300 	strex	r3, r2, [r1]
 8008676:	613b      	str	r3, [r7, #16]
   return(result);
 8008678:	693b      	ldr	r3, [r7, #16]
 800867a:	2b00      	cmp	r3, #0
 800867c:	d1e6      	bne.n	800864c <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	69db      	ldr	r3, [r3, #28]
 8008684:	f003 0310 	and.w	r3, r3, #16
 8008688:	2b10      	cmp	r3, #16
 800868a:	d103      	bne.n	8008694 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	2210      	movs	r2, #16
 8008692:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800869a:	4619      	mov	r1, r3
 800869c:	6878      	ldr	r0, [r7, #4]
 800869e:	f7fe ffe9 	bl	8007674 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80086a2:	e00b      	b.n	80086bc <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 80086a4:	6878      	ldr	r0, [r7, #4]
 80086a6:	f7f8 ff45 	bl	8001534 <HAL_UART_RxCpltCallback>
}
 80086aa:	e007      	b.n	80086bc <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	699a      	ldr	r2, [r3, #24]
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	f042 0208 	orr.w	r2, r2, #8
 80086ba:	619a      	str	r2, [r3, #24]
}
 80086bc:	bf00      	nop
 80086be:	3758      	adds	r7, #88	; 0x58
 80086c0:	46bd      	mov	sp, r7
 80086c2:	bd80      	pop	{r7, pc}

080086c4 <__errno>:
 80086c4:	4b01      	ldr	r3, [pc, #4]	; (80086cc <__errno+0x8>)
 80086c6:	6818      	ldr	r0, [r3, #0]
 80086c8:	4770      	bx	lr
 80086ca:	bf00      	nop
 80086cc:	2000000c 	.word	0x2000000c

080086d0 <__libc_init_array>:
 80086d0:	b570      	push	{r4, r5, r6, lr}
 80086d2:	4d0d      	ldr	r5, [pc, #52]	; (8008708 <__libc_init_array+0x38>)
 80086d4:	4c0d      	ldr	r4, [pc, #52]	; (800870c <__libc_init_array+0x3c>)
 80086d6:	1b64      	subs	r4, r4, r5
 80086d8:	10a4      	asrs	r4, r4, #2
 80086da:	2600      	movs	r6, #0
 80086dc:	42a6      	cmp	r6, r4
 80086de:	d109      	bne.n	80086f4 <__libc_init_array+0x24>
 80086e0:	4d0b      	ldr	r5, [pc, #44]	; (8008710 <__libc_init_array+0x40>)
 80086e2:	4c0c      	ldr	r4, [pc, #48]	; (8008714 <__libc_init_array+0x44>)
 80086e4:	f005 f8c6 	bl	800d874 <_init>
 80086e8:	1b64      	subs	r4, r4, r5
 80086ea:	10a4      	asrs	r4, r4, #2
 80086ec:	2600      	movs	r6, #0
 80086ee:	42a6      	cmp	r6, r4
 80086f0:	d105      	bne.n	80086fe <__libc_init_array+0x2e>
 80086f2:	bd70      	pop	{r4, r5, r6, pc}
 80086f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80086f8:	4798      	blx	r3
 80086fa:	3601      	adds	r6, #1
 80086fc:	e7ee      	b.n	80086dc <__libc_init_array+0xc>
 80086fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8008702:	4798      	blx	r3
 8008704:	3601      	adds	r6, #1
 8008706:	e7f2      	b.n	80086ee <__libc_init_array+0x1e>
 8008708:	0800dfb4 	.word	0x0800dfb4
 800870c:	0800dfb4 	.word	0x0800dfb4
 8008710:	0800dfb4 	.word	0x0800dfb4
 8008714:	0800dfb8 	.word	0x0800dfb8

08008718 <memcpy>:
 8008718:	440a      	add	r2, r1
 800871a:	4291      	cmp	r1, r2
 800871c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008720:	d100      	bne.n	8008724 <memcpy+0xc>
 8008722:	4770      	bx	lr
 8008724:	b510      	push	{r4, lr}
 8008726:	f811 4b01 	ldrb.w	r4, [r1], #1
 800872a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800872e:	4291      	cmp	r1, r2
 8008730:	d1f9      	bne.n	8008726 <memcpy+0xe>
 8008732:	bd10      	pop	{r4, pc}

08008734 <memset>:
 8008734:	4402      	add	r2, r0
 8008736:	4603      	mov	r3, r0
 8008738:	4293      	cmp	r3, r2
 800873a:	d100      	bne.n	800873e <memset+0xa>
 800873c:	4770      	bx	lr
 800873e:	f803 1b01 	strb.w	r1, [r3], #1
 8008742:	e7f9      	b.n	8008738 <memset+0x4>

08008744 <__cvt>:
 8008744:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008748:	ec55 4b10 	vmov	r4, r5, d0
 800874c:	2d00      	cmp	r5, #0
 800874e:	460e      	mov	r6, r1
 8008750:	4619      	mov	r1, r3
 8008752:	462b      	mov	r3, r5
 8008754:	bfbb      	ittet	lt
 8008756:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800875a:	461d      	movlt	r5, r3
 800875c:	2300      	movge	r3, #0
 800875e:	232d      	movlt	r3, #45	; 0x2d
 8008760:	700b      	strb	r3, [r1, #0]
 8008762:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008764:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008768:	4691      	mov	r9, r2
 800876a:	f023 0820 	bic.w	r8, r3, #32
 800876e:	bfbc      	itt	lt
 8008770:	4622      	movlt	r2, r4
 8008772:	4614      	movlt	r4, r2
 8008774:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008778:	d005      	beq.n	8008786 <__cvt+0x42>
 800877a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800877e:	d100      	bne.n	8008782 <__cvt+0x3e>
 8008780:	3601      	adds	r6, #1
 8008782:	2102      	movs	r1, #2
 8008784:	e000      	b.n	8008788 <__cvt+0x44>
 8008786:	2103      	movs	r1, #3
 8008788:	ab03      	add	r3, sp, #12
 800878a:	9301      	str	r3, [sp, #4]
 800878c:	ab02      	add	r3, sp, #8
 800878e:	9300      	str	r3, [sp, #0]
 8008790:	ec45 4b10 	vmov	d0, r4, r5
 8008794:	4653      	mov	r3, sl
 8008796:	4632      	mov	r2, r6
 8008798:	f001 fe56 	bl	800a448 <_dtoa_r>
 800879c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80087a0:	4607      	mov	r7, r0
 80087a2:	d102      	bne.n	80087aa <__cvt+0x66>
 80087a4:	f019 0f01 	tst.w	r9, #1
 80087a8:	d022      	beq.n	80087f0 <__cvt+0xac>
 80087aa:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80087ae:	eb07 0906 	add.w	r9, r7, r6
 80087b2:	d110      	bne.n	80087d6 <__cvt+0x92>
 80087b4:	783b      	ldrb	r3, [r7, #0]
 80087b6:	2b30      	cmp	r3, #48	; 0x30
 80087b8:	d10a      	bne.n	80087d0 <__cvt+0x8c>
 80087ba:	2200      	movs	r2, #0
 80087bc:	2300      	movs	r3, #0
 80087be:	4620      	mov	r0, r4
 80087c0:	4629      	mov	r1, r5
 80087c2:	f7f8 f9a1 	bl	8000b08 <__aeabi_dcmpeq>
 80087c6:	b918      	cbnz	r0, 80087d0 <__cvt+0x8c>
 80087c8:	f1c6 0601 	rsb	r6, r6, #1
 80087cc:	f8ca 6000 	str.w	r6, [sl]
 80087d0:	f8da 3000 	ldr.w	r3, [sl]
 80087d4:	4499      	add	r9, r3
 80087d6:	2200      	movs	r2, #0
 80087d8:	2300      	movs	r3, #0
 80087da:	4620      	mov	r0, r4
 80087dc:	4629      	mov	r1, r5
 80087de:	f7f8 f993 	bl	8000b08 <__aeabi_dcmpeq>
 80087e2:	b108      	cbz	r0, 80087e8 <__cvt+0xa4>
 80087e4:	f8cd 900c 	str.w	r9, [sp, #12]
 80087e8:	2230      	movs	r2, #48	; 0x30
 80087ea:	9b03      	ldr	r3, [sp, #12]
 80087ec:	454b      	cmp	r3, r9
 80087ee:	d307      	bcc.n	8008800 <__cvt+0xbc>
 80087f0:	9b03      	ldr	r3, [sp, #12]
 80087f2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80087f4:	1bdb      	subs	r3, r3, r7
 80087f6:	4638      	mov	r0, r7
 80087f8:	6013      	str	r3, [r2, #0]
 80087fa:	b004      	add	sp, #16
 80087fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008800:	1c59      	adds	r1, r3, #1
 8008802:	9103      	str	r1, [sp, #12]
 8008804:	701a      	strb	r2, [r3, #0]
 8008806:	e7f0      	b.n	80087ea <__cvt+0xa6>

08008808 <__exponent>:
 8008808:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800880a:	4603      	mov	r3, r0
 800880c:	2900      	cmp	r1, #0
 800880e:	bfb8      	it	lt
 8008810:	4249      	neglt	r1, r1
 8008812:	f803 2b02 	strb.w	r2, [r3], #2
 8008816:	bfb4      	ite	lt
 8008818:	222d      	movlt	r2, #45	; 0x2d
 800881a:	222b      	movge	r2, #43	; 0x2b
 800881c:	2909      	cmp	r1, #9
 800881e:	7042      	strb	r2, [r0, #1]
 8008820:	dd2a      	ble.n	8008878 <__exponent+0x70>
 8008822:	f10d 0407 	add.w	r4, sp, #7
 8008826:	46a4      	mov	ip, r4
 8008828:	270a      	movs	r7, #10
 800882a:	46a6      	mov	lr, r4
 800882c:	460a      	mov	r2, r1
 800882e:	fb91 f6f7 	sdiv	r6, r1, r7
 8008832:	fb07 1516 	mls	r5, r7, r6, r1
 8008836:	3530      	adds	r5, #48	; 0x30
 8008838:	2a63      	cmp	r2, #99	; 0x63
 800883a:	f104 34ff 	add.w	r4, r4, #4294967295
 800883e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008842:	4631      	mov	r1, r6
 8008844:	dcf1      	bgt.n	800882a <__exponent+0x22>
 8008846:	3130      	adds	r1, #48	; 0x30
 8008848:	f1ae 0502 	sub.w	r5, lr, #2
 800884c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008850:	1c44      	adds	r4, r0, #1
 8008852:	4629      	mov	r1, r5
 8008854:	4561      	cmp	r1, ip
 8008856:	d30a      	bcc.n	800886e <__exponent+0x66>
 8008858:	f10d 0209 	add.w	r2, sp, #9
 800885c:	eba2 020e 	sub.w	r2, r2, lr
 8008860:	4565      	cmp	r5, ip
 8008862:	bf88      	it	hi
 8008864:	2200      	movhi	r2, #0
 8008866:	4413      	add	r3, r2
 8008868:	1a18      	subs	r0, r3, r0
 800886a:	b003      	add	sp, #12
 800886c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800886e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008872:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008876:	e7ed      	b.n	8008854 <__exponent+0x4c>
 8008878:	2330      	movs	r3, #48	; 0x30
 800887a:	3130      	adds	r1, #48	; 0x30
 800887c:	7083      	strb	r3, [r0, #2]
 800887e:	70c1      	strb	r1, [r0, #3]
 8008880:	1d03      	adds	r3, r0, #4
 8008882:	e7f1      	b.n	8008868 <__exponent+0x60>

08008884 <_printf_float>:
 8008884:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008888:	ed2d 8b02 	vpush	{d8}
 800888c:	b08d      	sub	sp, #52	; 0x34
 800888e:	460c      	mov	r4, r1
 8008890:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008894:	4616      	mov	r6, r2
 8008896:	461f      	mov	r7, r3
 8008898:	4605      	mov	r5, r0
 800889a:	f002 ff33 	bl	800b704 <_localeconv_r>
 800889e:	f8d0 a000 	ldr.w	sl, [r0]
 80088a2:	4650      	mov	r0, sl
 80088a4:	f7f7 fcb4 	bl	8000210 <strlen>
 80088a8:	2300      	movs	r3, #0
 80088aa:	930a      	str	r3, [sp, #40]	; 0x28
 80088ac:	6823      	ldr	r3, [r4, #0]
 80088ae:	9305      	str	r3, [sp, #20]
 80088b0:	f8d8 3000 	ldr.w	r3, [r8]
 80088b4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80088b8:	3307      	adds	r3, #7
 80088ba:	f023 0307 	bic.w	r3, r3, #7
 80088be:	f103 0208 	add.w	r2, r3, #8
 80088c2:	f8c8 2000 	str.w	r2, [r8]
 80088c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088ca:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80088ce:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80088d2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80088d6:	9307      	str	r3, [sp, #28]
 80088d8:	f8cd 8018 	str.w	r8, [sp, #24]
 80088dc:	ee08 0a10 	vmov	s16, r0
 80088e0:	4b9f      	ldr	r3, [pc, #636]	; (8008b60 <_printf_float+0x2dc>)
 80088e2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80088e6:	f04f 32ff 	mov.w	r2, #4294967295
 80088ea:	f7f8 f93f 	bl	8000b6c <__aeabi_dcmpun>
 80088ee:	bb88      	cbnz	r0, 8008954 <_printf_float+0xd0>
 80088f0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80088f4:	4b9a      	ldr	r3, [pc, #616]	; (8008b60 <_printf_float+0x2dc>)
 80088f6:	f04f 32ff 	mov.w	r2, #4294967295
 80088fa:	f7f8 f919 	bl	8000b30 <__aeabi_dcmple>
 80088fe:	bb48      	cbnz	r0, 8008954 <_printf_float+0xd0>
 8008900:	2200      	movs	r2, #0
 8008902:	2300      	movs	r3, #0
 8008904:	4640      	mov	r0, r8
 8008906:	4649      	mov	r1, r9
 8008908:	f7f8 f908 	bl	8000b1c <__aeabi_dcmplt>
 800890c:	b110      	cbz	r0, 8008914 <_printf_float+0x90>
 800890e:	232d      	movs	r3, #45	; 0x2d
 8008910:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008914:	4b93      	ldr	r3, [pc, #588]	; (8008b64 <_printf_float+0x2e0>)
 8008916:	4894      	ldr	r0, [pc, #592]	; (8008b68 <_printf_float+0x2e4>)
 8008918:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800891c:	bf94      	ite	ls
 800891e:	4698      	movls	r8, r3
 8008920:	4680      	movhi	r8, r0
 8008922:	2303      	movs	r3, #3
 8008924:	6123      	str	r3, [r4, #16]
 8008926:	9b05      	ldr	r3, [sp, #20]
 8008928:	f023 0204 	bic.w	r2, r3, #4
 800892c:	6022      	str	r2, [r4, #0]
 800892e:	f04f 0900 	mov.w	r9, #0
 8008932:	9700      	str	r7, [sp, #0]
 8008934:	4633      	mov	r3, r6
 8008936:	aa0b      	add	r2, sp, #44	; 0x2c
 8008938:	4621      	mov	r1, r4
 800893a:	4628      	mov	r0, r5
 800893c:	f000 f9d8 	bl	8008cf0 <_printf_common>
 8008940:	3001      	adds	r0, #1
 8008942:	f040 8090 	bne.w	8008a66 <_printf_float+0x1e2>
 8008946:	f04f 30ff 	mov.w	r0, #4294967295
 800894a:	b00d      	add	sp, #52	; 0x34
 800894c:	ecbd 8b02 	vpop	{d8}
 8008950:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008954:	4642      	mov	r2, r8
 8008956:	464b      	mov	r3, r9
 8008958:	4640      	mov	r0, r8
 800895a:	4649      	mov	r1, r9
 800895c:	f7f8 f906 	bl	8000b6c <__aeabi_dcmpun>
 8008960:	b140      	cbz	r0, 8008974 <_printf_float+0xf0>
 8008962:	464b      	mov	r3, r9
 8008964:	2b00      	cmp	r3, #0
 8008966:	bfbc      	itt	lt
 8008968:	232d      	movlt	r3, #45	; 0x2d
 800896a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800896e:	487f      	ldr	r0, [pc, #508]	; (8008b6c <_printf_float+0x2e8>)
 8008970:	4b7f      	ldr	r3, [pc, #508]	; (8008b70 <_printf_float+0x2ec>)
 8008972:	e7d1      	b.n	8008918 <_printf_float+0x94>
 8008974:	6863      	ldr	r3, [r4, #4]
 8008976:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800897a:	9206      	str	r2, [sp, #24]
 800897c:	1c5a      	adds	r2, r3, #1
 800897e:	d13f      	bne.n	8008a00 <_printf_float+0x17c>
 8008980:	2306      	movs	r3, #6
 8008982:	6063      	str	r3, [r4, #4]
 8008984:	9b05      	ldr	r3, [sp, #20]
 8008986:	6861      	ldr	r1, [r4, #4]
 8008988:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800898c:	2300      	movs	r3, #0
 800898e:	9303      	str	r3, [sp, #12]
 8008990:	ab0a      	add	r3, sp, #40	; 0x28
 8008992:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008996:	ab09      	add	r3, sp, #36	; 0x24
 8008998:	ec49 8b10 	vmov	d0, r8, r9
 800899c:	9300      	str	r3, [sp, #0]
 800899e:	6022      	str	r2, [r4, #0]
 80089a0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80089a4:	4628      	mov	r0, r5
 80089a6:	f7ff fecd 	bl	8008744 <__cvt>
 80089aa:	9b06      	ldr	r3, [sp, #24]
 80089ac:	9909      	ldr	r1, [sp, #36]	; 0x24
 80089ae:	2b47      	cmp	r3, #71	; 0x47
 80089b0:	4680      	mov	r8, r0
 80089b2:	d108      	bne.n	80089c6 <_printf_float+0x142>
 80089b4:	1cc8      	adds	r0, r1, #3
 80089b6:	db02      	blt.n	80089be <_printf_float+0x13a>
 80089b8:	6863      	ldr	r3, [r4, #4]
 80089ba:	4299      	cmp	r1, r3
 80089bc:	dd41      	ble.n	8008a42 <_printf_float+0x1be>
 80089be:	f1ab 0b02 	sub.w	fp, fp, #2
 80089c2:	fa5f fb8b 	uxtb.w	fp, fp
 80089c6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80089ca:	d820      	bhi.n	8008a0e <_printf_float+0x18a>
 80089cc:	3901      	subs	r1, #1
 80089ce:	465a      	mov	r2, fp
 80089d0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80089d4:	9109      	str	r1, [sp, #36]	; 0x24
 80089d6:	f7ff ff17 	bl	8008808 <__exponent>
 80089da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80089dc:	1813      	adds	r3, r2, r0
 80089de:	2a01      	cmp	r2, #1
 80089e0:	4681      	mov	r9, r0
 80089e2:	6123      	str	r3, [r4, #16]
 80089e4:	dc02      	bgt.n	80089ec <_printf_float+0x168>
 80089e6:	6822      	ldr	r2, [r4, #0]
 80089e8:	07d2      	lsls	r2, r2, #31
 80089ea:	d501      	bpl.n	80089f0 <_printf_float+0x16c>
 80089ec:	3301      	adds	r3, #1
 80089ee:	6123      	str	r3, [r4, #16]
 80089f0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d09c      	beq.n	8008932 <_printf_float+0xae>
 80089f8:	232d      	movs	r3, #45	; 0x2d
 80089fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80089fe:	e798      	b.n	8008932 <_printf_float+0xae>
 8008a00:	9a06      	ldr	r2, [sp, #24]
 8008a02:	2a47      	cmp	r2, #71	; 0x47
 8008a04:	d1be      	bne.n	8008984 <_printf_float+0x100>
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d1bc      	bne.n	8008984 <_printf_float+0x100>
 8008a0a:	2301      	movs	r3, #1
 8008a0c:	e7b9      	b.n	8008982 <_printf_float+0xfe>
 8008a0e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008a12:	d118      	bne.n	8008a46 <_printf_float+0x1c2>
 8008a14:	2900      	cmp	r1, #0
 8008a16:	6863      	ldr	r3, [r4, #4]
 8008a18:	dd0b      	ble.n	8008a32 <_printf_float+0x1ae>
 8008a1a:	6121      	str	r1, [r4, #16]
 8008a1c:	b913      	cbnz	r3, 8008a24 <_printf_float+0x1a0>
 8008a1e:	6822      	ldr	r2, [r4, #0]
 8008a20:	07d0      	lsls	r0, r2, #31
 8008a22:	d502      	bpl.n	8008a2a <_printf_float+0x1a6>
 8008a24:	3301      	adds	r3, #1
 8008a26:	440b      	add	r3, r1
 8008a28:	6123      	str	r3, [r4, #16]
 8008a2a:	65a1      	str	r1, [r4, #88]	; 0x58
 8008a2c:	f04f 0900 	mov.w	r9, #0
 8008a30:	e7de      	b.n	80089f0 <_printf_float+0x16c>
 8008a32:	b913      	cbnz	r3, 8008a3a <_printf_float+0x1b6>
 8008a34:	6822      	ldr	r2, [r4, #0]
 8008a36:	07d2      	lsls	r2, r2, #31
 8008a38:	d501      	bpl.n	8008a3e <_printf_float+0x1ba>
 8008a3a:	3302      	adds	r3, #2
 8008a3c:	e7f4      	b.n	8008a28 <_printf_float+0x1a4>
 8008a3e:	2301      	movs	r3, #1
 8008a40:	e7f2      	b.n	8008a28 <_printf_float+0x1a4>
 8008a42:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008a46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a48:	4299      	cmp	r1, r3
 8008a4a:	db05      	blt.n	8008a58 <_printf_float+0x1d4>
 8008a4c:	6823      	ldr	r3, [r4, #0]
 8008a4e:	6121      	str	r1, [r4, #16]
 8008a50:	07d8      	lsls	r0, r3, #31
 8008a52:	d5ea      	bpl.n	8008a2a <_printf_float+0x1a6>
 8008a54:	1c4b      	adds	r3, r1, #1
 8008a56:	e7e7      	b.n	8008a28 <_printf_float+0x1a4>
 8008a58:	2900      	cmp	r1, #0
 8008a5a:	bfd4      	ite	le
 8008a5c:	f1c1 0202 	rsble	r2, r1, #2
 8008a60:	2201      	movgt	r2, #1
 8008a62:	4413      	add	r3, r2
 8008a64:	e7e0      	b.n	8008a28 <_printf_float+0x1a4>
 8008a66:	6823      	ldr	r3, [r4, #0]
 8008a68:	055a      	lsls	r2, r3, #21
 8008a6a:	d407      	bmi.n	8008a7c <_printf_float+0x1f8>
 8008a6c:	6923      	ldr	r3, [r4, #16]
 8008a6e:	4642      	mov	r2, r8
 8008a70:	4631      	mov	r1, r6
 8008a72:	4628      	mov	r0, r5
 8008a74:	47b8      	blx	r7
 8008a76:	3001      	adds	r0, #1
 8008a78:	d12c      	bne.n	8008ad4 <_printf_float+0x250>
 8008a7a:	e764      	b.n	8008946 <_printf_float+0xc2>
 8008a7c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008a80:	f240 80e0 	bls.w	8008c44 <_printf_float+0x3c0>
 8008a84:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008a88:	2200      	movs	r2, #0
 8008a8a:	2300      	movs	r3, #0
 8008a8c:	f7f8 f83c 	bl	8000b08 <__aeabi_dcmpeq>
 8008a90:	2800      	cmp	r0, #0
 8008a92:	d034      	beq.n	8008afe <_printf_float+0x27a>
 8008a94:	4a37      	ldr	r2, [pc, #220]	; (8008b74 <_printf_float+0x2f0>)
 8008a96:	2301      	movs	r3, #1
 8008a98:	4631      	mov	r1, r6
 8008a9a:	4628      	mov	r0, r5
 8008a9c:	47b8      	blx	r7
 8008a9e:	3001      	adds	r0, #1
 8008aa0:	f43f af51 	beq.w	8008946 <_printf_float+0xc2>
 8008aa4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008aa8:	429a      	cmp	r2, r3
 8008aaa:	db02      	blt.n	8008ab2 <_printf_float+0x22e>
 8008aac:	6823      	ldr	r3, [r4, #0]
 8008aae:	07d8      	lsls	r0, r3, #31
 8008ab0:	d510      	bpl.n	8008ad4 <_printf_float+0x250>
 8008ab2:	ee18 3a10 	vmov	r3, s16
 8008ab6:	4652      	mov	r2, sl
 8008ab8:	4631      	mov	r1, r6
 8008aba:	4628      	mov	r0, r5
 8008abc:	47b8      	blx	r7
 8008abe:	3001      	adds	r0, #1
 8008ac0:	f43f af41 	beq.w	8008946 <_printf_float+0xc2>
 8008ac4:	f04f 0800 	mov.w	r8, #0
 8008ac8:	f104 091a 	add.w	r9, r4, #26
 8008acc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ace:	3b01      	subs	r3, #1
 8008ad0:	4543      	cmp	r3, r8
 8008ad2:	dc09      	bgt.n	8008ae8 <_printf_float+0x264>
 8008ad4:	6823      	ldr	r3, [r4, #0]
 8008ad6:	079b      	lsls	r3, r3, #30
 8008ad8:	f100 8105 	bmi.w	8008ce6 <_printf_float+0x462>
 8008adc:	68e0      	ldr	r0, [r4, #12]
 8008ade:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008ae0:	4298      	cmp	r0, r3
 8008ae2:	bfb8      	it	lt
 8008ae4:	4618      	movlt	r0, r3
 8008ae6:	e730      	b.n	800894a <_printf_float+0xc6>
 8008ae8:	2301      	movs	r3, #1
 8008aea:	464a      	mov	r2, r9
 8008aec:	4631      	mov	r1, r6
 8008aee:	4628      	mov	r0, r5
 8008af0:	47b8      	blx	r7
 8008af2:	3001      	adds	r0, #1
 8008af4:	f43f af27 	beq.w	8008946 <_printf_float+0xc2>
 8008af8:	f108 0801 	add.w	r8, r8, #1
 8008afc:	e7e6      	b.n	8008acc <_printf_float+0x248>
 8008afe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	dc39      	bgt.n	8008b78 <_printf_float+0x2f4>
 8008b04:	4a1b      	ldr	r2, [pc, #108]	; (8008b74 <_printf_float+0x2f0>)
 8008b06:	2301      	movs	r3, #1
 8008b08:	4631      	mov	r1, r6
 8008b0a:	4628      	mov	r0, r5
 8008b0c:	47b8      	blx	r7
 8008b0e:	3001      	adds	r0, #1
 8008b10:	f43f af19 	beq.w	8008946 <_printf_float+0xc2>
 8008b14:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008b18:	4313      	orrs	r3, r2
 8008b1a:	d102      	bne.n	8008b22 <_printf_float+0x29e>
 8008b1c:	6823      	ldr	r3, [r4, #0]
 8008b1e:	07d9      	lsls	r1, r3, #31
 8008b20:	d5d8      	bpl.n	8008ad4 <_printf_float+0x250>
 8008b22:	ee18 3a10 	vmov	r3, s16
 8008b26:	4652      	mov	r2, sl
 8008b28:	4631      	mov	r1, r6
 8008b2a:	4628      	mov	r0, r5
 8008b2c:	47b8      	blx	r7
 8008b2e:	3001      	adds	r0, #1
 8008b30:	f43f af09 	beq.w	8008946 <_printf_float+0xc2>
 8008b34:	f04f 0900 	mov.w	r9, #0
 8008b38:	f104 0a1a 	add.w	sl, r4, #26
 8008b3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b3e:	425b      	negs	r3, r3
 8008b40:	454b      	cmp	r3, r9
 8008b42:	dc01      	bgt.n	8008b48 <_printf_float+0x2c4>
 8008b44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b46:	e792      	b.n	8008a6e <_printf_float+0x1ea>
 8008b48:	2301      	movs	r3, #1
 8008b4a:	4652      	mov	r2, sl
 8008b4c:	4631      	mov	r1, r6
 8008b4e:	4628      	mov	r0, r5
 8008b50:	47b8      	blx	r7
 8008b52:	3001      	adds	r0, #1
 8008b54:	f43f aef7 	beq.w	8008946 <_printf_float+0xc2>
 8008b58:	f109 0901 	add.w	r9, r9, #1
 8008b5c:	e7ee      	b.n	8008b3c <_printf_float+0x2b8>
 8008b5e:	bf00      	nop
 8008b60:	7fefffff 	.word	0x7fefffff
 8008b64:	0800daf8 	.word	0x0800daf8
 8008b68:	0800dafc 	.word	0x0800dafc
 8008b6c:	0800db04 	.word	0x0800db04
 8008b70:	0800db00 	.word	0x0800db00
 8008b74:	0800def9 	.word	0x0800def9
 8008b78:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008b7a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008b7c:	429a      	cmp	r2, r3
 8008b7e:	bfa8      	it	ge
 8008b80:	461a      	movge	r2, r3
 8008b82:	2a00      	cmp	r2, #0
 8008b84:	4691      	mov	r9, r2
 8008b86:	dc37      	bgt.n	8008bf8 <_printf_float+0x374>
 8008b88:	f04f 0b00 	mov.w	fp, #0
 8008b8c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008b90:	f104 021a 	add.w	r2, r4, #26
 8008b94:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008b96:	9305      	str	r3, [sp, #20]
 8008b98:	eba3 0309 	sub.w	r3, r3, r9
 8008b9c:	455b      	cmp	r3, fp
 8008b9e:	dc33      	bgt.n	8008c08 <_printf_float+0x384>
 8008ba0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008ba4:	429a      	cmp	r2, r3
 8008ba6:	db3b      	blt.n	8008c20 <_printf_float+0x39c>
 8008ba8:	6823      	ldr	r3, [r4, #0]
 8008baa:	07da      	lsls	r2, r3, #31
 8008bac:	d438      	bmi.n	8008c20 <_printf_float+0x39c>
 8008bae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008bb0:	9a05      	ldr	r2, [sp, #20]
 8008bb2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008bb4:	1a9a      	subs	r2, r3, r2
 8008bb6:	eba3 0901 	sub.w	r9, r3, r1
 8008bba:	4591      	cmp	r9, r2
 8008bbc:	bfa8      	it	ge
 8008bbe:	4691      	movge	r9, r2
 8008bc0:	f1b9 0f00 	cmp.w	r9, #0
 8008bc4:	dc35      	bgt.n	8008c32 <_printf_float+0x3ae>
 8008bc6:	f04f 0800 	mov.w	r8, #0
 8008bca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008bce:	f104 0a1a 	add.w	sl, r4, #26
 8008bd2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008bd6:	1a9b      	subs	r3, r3, r2
 8008bd8:	eba3 0309 	sub.w	r3, r3, r9
 8008bdc:	4543      	cmp	r3, r8
 8008bde:	f77f af79 	ble.w	8008ad4 <_printf_float+0x250>
 8008be2:	2301      	movs	r3, #1
 8008be4:	4652      	mov	r2, sl
 8008be6:	4631      	mov	r1, r6
 8008be8:	4628      	mov	r0, r5
 8008bea:	47b8      	blx	r7
 8008bec:	3001      	adds	r0, #1
 8008bee:	f43f aeaa 	beq.w	8008946 <_printf_float+0xc2>
 8008bf2:	f108 0801 	add.w	r8, r8, #1
 8008bf6:	e7ec      	b.n	8008bd2 <_printf_float+0x34e>
 8008bf8:	4613      	mov	r3, r2
 8008bfa:	4631      	mov	r1, r6
 8008bfc:	4642      	mov	r2, r8
 8008bfe:	4628      	mov	r0, r5
 8008c00:	47b8      	blx	r7
 8008c02:	3001      	adds	r0, #1
 8008c04:	d1c0      	bne.n	8008b88 <_printf_float+0x304>
 8008c06:	e69e      	b.n	8008946 <_printf_float+0xc2>
 8008c08:	2301      	movs	r3, #1
 8008c0a:	4631      	mov	r1, r6
 8008c0c:	4628      	mov	r0, r5
 8008c0e:	9205      	str	r2, [sp, #20]
 8008c10:	47b8      	blx	r7
 8008c12:	3001      	adds	r0, #1
 8008c14:	f43f ae97 	beq.w	8008946 <_printf_float+0xc2>
 8008c18:	9a05      	ldr	r2, [sp, #20]
 8008c1a:	f10b 0b01 	add.w	fp, fp, #1
 8008c1e:	e7b9      	b.n	8008b94 <_printf_float+0x310>
 8008c20:	ee18 3a10 	vmov	r3, s16
 8008c24:	4652      	mov	r2, sl
 8008c26:	4631      	mov	r1, r6
 8008c28:	4628      	mov	r0, r5
 8008c2a:	47b8      	blx	r7
 8008c2c:	3001      	adds	r0, #1
 8008c2e:	d1be      	bne.n	8008bae <_printf_float+0x32a>
 8008c30:	e689      	b.n	8008946 <_printf_float+0xc2>
 8008c32:	9a05      	ldr	r2, [sp, #20]
 8008c34:	464b      	mov	r3, r9
 8008c36:	4442      	add	r2, r8
 8008c38:	4631      	mov	r1, r6
 8008c3a:	4628      	mov	r0, r5
 8008c3c:	47b8      	blx	r7
 8008c3e:	3001      	adds	r0, #1
 8008c40:	d1c1      	bne.n	8008bc6 <_printf_float+0x342>
 8008c42:	e680      	b.n	8008946 <_printf_float+0xc2>
 8008c44:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008c46:	2a01      	cmp	r2, #1
 8008c48:	dc01      	bgt.n	8008c4e <_printf_float+0x3ca>
 8008c4a:	07db      	lsls	r3, r3, #31
 8008c4c:	d538      	bpl.n	8008cc0 <_printf_float+0x43c>
 8008c4e:	2301      	movs	r3, #1
 8008c50:	4642      	mov	r2, r8
 8008c52:	4631      	mov	r1, r6
 8008c54:	4628      	mov	r0, r5
 8008c56:	47b8      	blx	r7
 8008c58:	3001      	adds	r0, #1
 8008c5a:	f43f ae74 	beq.w	8008946 <_printf_float+0xc2>
 8008c5e:	ee18 3a10 	vmov	r3, s16
 8008c62:	4652      	mov	r2, sl
 8008c64:	4631      	mov	r1, r6
 8008c66:	4628      	mov	r0, r5
 8008c68:	47b8      	blx	r7
 8008c6a:	3001      	adds	r0, #1
 8008c6c:	f43f ae6b 	beq.w	8008946 <_printf_float+0xc2>
 8008c70:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008c74:	2200      	movs	r2, #0
 8008c76:	2300      	movs	r3, #0
 8008c78:	f7f7 ff46 	bl	8000b08 <__aeabi_dcmpeq>
 8008c7c:	b9d8      	cbnz	r0, 8008cb6 <_printf_float+0x432>
 8008c7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c80:	f108 0201 	add.w	r2, r8, #1
 8008c84:	3b01      	subs	r3, #1
 8008c86:	4631      	mov	r1, r6
 8008c88:	4628      	mov	r0, r5
 8008c8a:	47b8      	blx	r7
 8008c8c:	3001      	adds	r0, #1
 8008c8e:	d10e      	bne.n	8008cae <_printf_float+0x42a>
 8008c90:	e659      	b.n	8008946 <_printf_float+0xc2>
 8008c92:	2301      	movs	r3, #1
 8008c94:	4652      	mov	r2, sl
 8008c96:	4631      	mov	r1, r6
 8008c98:	4628      	mov	r0, r5
 8008c9a:	47b8      	blx	r7
 8008c9c:	3001      	adds	r0, #1
 8008c9e:	f43f ae52 	beq.w	8008946 <_printf_float+0xc2>
 8008ca2:	f108 0801 	add.w	r8, r8, #1
 8008ca6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ca8:	3b01      	subs	r3, #1
 8008caa:	4543      	cmp	r3, r8
 8008cac:	dcf1      	bgt.n	8008c92 <_printf_float+0x40e>
 8008cae:	464b      	mov	r3, r9
 8008cb0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008cb4:	e6dc      	b.n	8008a70 <_printf_float+0x1ec>
 8008cb6:	f04f 0800 	mov.w	r8, #0
 8008cba:	f104 0a1a 	add.w	sl, r4, #26
 8008cbe:	e7f2      	b.n	8008ca6 <_printf_float+0x422>
 8008cc0:	2301      	movs	r3, #1
 8008cc2:	4642      	mov	r2, r8
 8008cc4:	e7df      	b.n	8008c86 <_printf_float+0x402>
 8008cc6:	2301      	movs	r3, #1
 8008cc8:	464a      	mov	r2, r9
 8008cca:	4631      	mov	r1, r6
 8008ccc:	4628      	mov	r0, r5
 8008cce:	47b8      	blx	r7
 8008cd0:	3001      	adds	r0, #1
 8008cd2:	f43f ae38 	beq.w	8008946 <_printf_float+0xc2>
 8008cd6:	f108 0801 	add.w	r8, r8, #1
 8008cda:	68e3      	ldr	r3, [r4, #12]
 8008cdc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008cde:	1a5b      	subs	r3, r3, r1
 8008ce0:	4543      	cmp	r3, r8
 8008ce2:	dcf0      	bgt.n	8008cc6 <_printf_float+0x442>
 8008ce4:	e6fa      	b.n	8008adc <_printf_float+0x258>
 8008ce6:	f04f 0800 	mov.w	r8, #0
 8008cea:	f104 0919 	add.w	r9, r4, #25
 8008cee:	e7f4      	b.n	8008cda <_printf_float+0x456>

08008cf0 <_printf_common>:
 8008cf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008cf4:	4616      	mov	r6, r2
 8008cf6:	4699      	mov	r9, r3
 8008cf8:	688a      	ldr	r2, [r1, #8]
 8008cfa:	690b      	ldr	r3, [r1, #16]
 8008cfc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008d00:	4293      	cmp	r3, r2
 8008d02:	bfb8      	it	lt
 8008d04:	4613      	movlt	r3, r2
 8008d06:	6033      	str	r3, [r6, #0]
 8008d08:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008d0c:	4607      	mov	r7, r0
 8008d0e:	460c      	mov	r4, r1
 8008d10:	b10a      	cbz	r2, 8008d16 <_printf_common+0x26>
 8008d12:	3301      	adds	r3, #1
 8008d14:	6033      	str	r3, [r6, #0]
 8008d16:	6823      	ldr	r3, [r4, #0]
 8008d18:	0699      	lsls	r1, r3, #26
 8008d1a:	bf42      	ittt	mi
 8008d1c:	6833      	ldrmi	r3, [r6, #0]
 8008d1e:	3302      	addmi	r3, #2
 8008d20:	6033      	strmi	r3, [r6, #0]
 8008d22:	6825      	ldr	r5, [r4, #0]
 8008d24:	f015 0506 	ands.w	r5, r5, #6
 8008d28:	d106      	bne.n	8008d38 <_printf_common+0x48>
 8008d2a:	f104 0a19 	add.w	sl, r4, #25
 8008d2e:	68e3      	ldr	r3, [r4, #12]
 8008d30:	6832      	ldr	r2, [r6, #0]
 8008d32:	1a9b      	subs	r3, r3, r2
 8008d34:	42ab      	cmp	r3, r5
 8008d36:	dc26      	bgt.n	8008d86 <_printf_common+0x96>
 8008d38:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008d3c:	1e13      	subs	r3, r2, #0
 8008d3e:	6822      	ldr	r2, [r4, #0]
 8008d40:	bf18      	it	ne
 8008d42:	2301      	movne	r3, #1
 8008d44:	0692      	lsls	r2, r2, #26
 8008d46:	d42b      	bmi.n	8008da0 <_printf_common+0xb0>
 8008d48:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008d4c:	4649      	mov	r1, r9
 8008d4e:	4638      	mov	r0, r7
 8008d50:	47c0      	blx	r8
 8008d52:	3001      	adds	r0, #1
 8008d54:	d01e      	beq.n	8008d94 <_printf_common+0xa4>
 8008d56:	6823      	ldr	r3, [r4, #0]
 8008d58:	68e5      	ldr	r5, [r4, #12]
 8008d5a:	6832      	ldr	r2, [r6, #0]
 8008d5c:	f003 0306 	and.w	r3, r3, #6
 8008d60:	2b04      	cmp	r3, #4
 8008d62:	bf08      	it	eq
 8008d64:	1aad      	subeq	r5, r5, r2
 8008d66:	68a3      	ldr	r3, [r4, #8]
 8008d68:	6922      	ldr	r2, [r4, #16]
 8008d6a:	bf0c      	ite	eq
 8008d6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008d70:	2500      	movne	r5, #0
 8008d72:	4293      	cmp	r3, r2
 8008d74:	bfc4      	itt	gt
 8008d76:	1a9b      	subgt	r3, r3, r2
 8008d78:	18ed      	addgt	r5, r5, r3
 8008d7a:	2600      	movs	r6, #0
 8008d7c:	341a      	adds	r4, #26
 8008d7e:	42b5      	cmp	r5, r6
 8008d80:	d11a      	bne.n	8008db8 <_printf_common+0xc8>
 8008d82:	2000      	movs	r0, #0
 8008d84:	e008      	b.n	8008d98 <_printf_common+0xa8>
 8008d86:	2301      	movs	r3, #1
 8008d88:	4652      	mov	r2, sl
 8008d8a:	4649      	mov	r1, r9
 8008d8c:	4638      	mov	r0, r7
 8008d8e:	47c0      	blx	r8
 8008d90:	3001      	adds	r0, #1
 8008d92:	d103      	bne.n	8008d9c <_printf_common+0xac>
 8008d94:	f04f 30ff 	mov.w	r0, #4294967295
 8008d98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d9c:	3501      	adds	r5, #1
 8008d9e:	e7c6      	b.n	8008d2e <_printf_common+0x3e>
 8008da0:	18e1      	adds	r1, r4, r3
 8008da2:	1c5a      	adds	r2, r3, #1
 8008da4:	2030      	movs	r0, #48	; 0x30
 8008da6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008daa:	4422      	add	r2, r4
 8008dac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008db0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008db4:	3302      	adds	r3, #2
 8008db6:	e7c7      	b.n	8008d48 <_printf_common+0x58>
 8008db8:	2301      	movs	r3, #1
 8008dba:	4622      	mov	r2, r4
 8008dbc:	4649      	mov	r1, r9
 8008dbe:	4638      	mov	r0, r7
 8008dc0:	47c0      	blx	r8
 8008dc2:	3001      	adds	r0, #1
 8008dc4:	d0e6      	beq.n	8008d94 <_printf_common+0xa4>
 8008dc6:	3601      	adds	r6, #1
 8008dc8:	e7d9      	b.n	8008d7e <_printf_common+0x8e>
	...

08008dcc <_printf_i>:
 8008dcc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008dd0:	7e0f      	ldrb	r7, [r1, #24]
 8008dd2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008dd4:	2f78      	cmp	r7, #120	; 0x78
 8008dd6:	4691      	mov	r9, r2
 8008dd8:	4680      	mov	r8, r0
 8008dda:	460c      	mov	r4, r1
 8008ddc:	469a      	mov	sl, r3
 8008dde:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008de2:	d807      	bhi.n	8008df4 <_printf_i+0x28>
 8008de4:	2f62      	cmp	r7, #98	; 0x62
 8008de6:	d80a      	bhi.n	8008dfe <_printf_i+0x32>
 8008de8:	2f00      	cmp	r7, #0
 8008dea:	f000 80d8 	beq.w	8008f9e <_printf_i+0x1d2>
 8008dee:	2f58      	cmp	r7, #88	; 0x58
 8008df0:	f000 80a3 	beq.w	8008f3a <_printf_i+0x16e>
 8008df4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008df8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008dfc:	e03a      	b.n	8008e74 <_printf_i+0xa8>
 8008dfe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008e02:	2b15      	cmp	r3, #21
 8008e04:	d8f6      	bhi.n	8008df4 <_printf_i+0x28>
 8008e06:	a101      	add	r1, pc, #4	; (adr r1, 8008e0c <_printf_i+0x40>)
 8008e08:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008e0c:	08008e65 	.word	0x08008e65
 8008e10:	08008e79 	.word	0x08008e79
 8008e14:	08008df5 	.word	0x08008df5
 8008e18:	08008df5 	.word	0x08008df5
 8008e1c:	08008df5 	.word	0x08008df5
 8008e20:	08008df5 	.word	0x08008df5
 8008e24:	08008e79 	.word	0x08008e79
 8008e28:	08008df5 	.word	0x08008df5
 8008e2c:	08008df5 	.word	0x08008df5
 8008e30:	08008df5 	.word	0x08008df5
 8008e34:	08008df5 	.word	0x08008df5
 8008e38:	08008f85 	.word	0x08008f85
 8008e3c:	08008ea9 	.word	0x08008ea9
 8008e40:	08008f67 	.word	0x08008f67
 8008e44:	08008df5 	.word	0x08008df5
 8008e48:	08008df5 	.word	0x08008df5
 8008e4c:	08008fa7 	.word	0x08008fa7
 8008e50:	08008df5 	.word	0x08008df5
 8008e54:	08008ea9 	.word	0x08008ea9
 8008e58:	08008df5 	.word	0x08008df5
 8008e5c:	08008df5 	.word	0x08008df5
 8008e60:	08008f6f 	.word	0x08008f6f
 8008e64:	682b      	ldr	r3, [r5, #0]
 8008e66:	1d1a      	adds	r2, r3, #4
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	602a      	str	r2, [r5, #0]
 8008e6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008e70:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008e74:	2301      	movs	r3, #1
 8008e76:	e0a3      	b.n	8008fc0 <_printf_i+0x1f4>
 8008e78:	6820      	ldr	r0, [r4, #0]
 8008e7a:	6829      	ldr	r1, [r5, #0]
 8008e7c:	0606      	lsls	r6, r0, #24
 8008e7e:	f101 0304 	add.w	r3, r1, #4
 8008e82:	d50a      	bpl.n	8008e9a <_printf_i+0xce>
 8008e84:	680e      	ldr	r6, [r1, #0]
 8008e86:	602b      	str	r3, [r5, #0]
 8008e88:	2e00      	cmp	r6, #0
 8008e8a:	da03      	bge.n	8008e94 <_printf_i+0xc8>
 8008e8c:	232d      	movs	r3, #45	; 0x2d
 8008e8e:	4276      	negs	r6, r6
 8008e90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008e94:	485e      	ldr	r0, [pc, #376]	; (8009010 <_printf_i+0x244>)
 8008e96:	230a      	movs	r3, #10
 8008e98:	e019      	b.n	8008ece <_printf_i+0x102>
 8008e9a:	680e      	ldr	r6, [r1, #0]
 8008e9c:	602b      	str	r3, [r5, #0]
 8008e9e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008ea2:	bf18      	it	ne
 8008ea4:	b236      	sxthne	r6, r6
 8008ea6:	e7ef      	b.n	8008e88 <_printf_i+0xbc>
 8008ea8:	682b      	ldr	r3, [r5, #0]
 8008eaa:	6820      	ldr	r0, [r4, #0]
 8008eac:	1d19      	adds	r1, r3, #4
 8008eae:	6029      	str	r1, [r5, #0]
 8008eb0:	0601      	lsls	r1, r0, #24
 8008eb2:	d501      	bpl.n	8008eb8 <_printf_i+0xec>
 8008eb4:	681e      	ldr	r6, [r3, #0]
 8008eb6:	e002      	b.n	8008ebe <_printf_i+0xf2>
 8008eb8:	0646      	lsls	r6, r0, #25
 8008eba:	d5fb      	bpl.n	8008eb4 <_printf_i+0xe8>
 8008ebc:	881e      	ldrh	r6, [r3, #0]
 8008ebe:	4854      	ldr	r0, [pc, #336]	; (8009010 <_printf_i+0x244>)
 8008ec0:	2f6f      	cmp	r7, #111	; 0x6f
 8008ec2:	bf0c      	ite	eq
 8008ec4:	2308      	moveq	r3, #8
 8008ec6:	230a      	movne	r3, #10
 8008ec8:	2100      	movs	r1, #0
 8008eca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008ece:	6865      	ldr	r5, [r4, #4]
 8008ed0:	60a5      	str	r5, [r4, #8]
 8008ed2:	2d00      	cmp	r5, #0
 8008ed4:	bfa2      	ittt	ge
 8008ed6:	6821      	ldrge	r1, [r4, #0]
 8008ed8:	f021 0104 	bicge.w	r1, r1, #4
 8008edc:	6021      	strge	r1, [r4, #0]
 8008ede:	b90e      	cbnz	r6, 8008ee4 <_printf_i+0x118>
 8008ee0:	2d00      	cmp	r5, #0
 8008ee2:	d04d      	beq.n	8008f80 <_printf_i+0x1b4>
 8008ee4:	4615      	mov	r5, r2
 8008ee6:	fbb6 f1f3 	udiv	r1, r6, r3
 8008eea:	fb03 6711 	mls	r7, r3, r1, r6
 8008eee:	5dc7      	ldrb	r7, [r0, r7]
 8008ef0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008ef4:	4637      	mov	r7, r6
 8008ef6:	42bb      	cmp	r3, r7
 8008ef8:	460e      	mov	r6, r1
 8008efa:	d9f4      	bls.n	8008ee6 <_printf_i+0x11a>
 8008efc:	2b08      	cmp	r3, #8
 8008efe:	d10b      	bne.n	8008f18 <_printf_i+0x14c>
 8008f00:	6823      	ldr	r3, [r4, #0]
 8008f02:	07de      	lsls	r6, r3, #31
 8008f04:	d508      	bpl.n	8008f18 <_printf_i+0x14c>
 8008f06:	6923      	ldr	r3, [r4, #16]
 8008f08:	6861      	ldr	r1, [r4, #4]
 8008f0a:	4299      	cmp	r1, r3
 8008f0c:	bfde      	ittt	le
 8008f0e:	2330      	movle	r3, #48	; 0x30
 8008f10:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008f14:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008f18:	1b52      	subs	r2, r2, r5
 8008f1a:	6122      	str	r2, [r4, #16]
 8008f1c:	f8cd a000 	str.w	sl, [sp]
 8008f20:	464b      	mov	r3, r9
 8008f22:	aa03      	add	r2, sp, #12
 8008f24:	4621      	mov	r1, r4
 8008f26:	4640      	mov	r0, r8
 8008f28:	f7ff fee2 	bl	8008cf0 <_printf_common>
 8008f2c:	3001      	adds	r0, #1
 8008f2e:	d14c      	bne.n	8008fca <_printf_i+0x1fe>
 8008f30:	f04f 30ff 	mov.w	r0, #4294967295
 8008f34:	b004      	add	sp, #16
 8008f36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f3a:	4835      	ldr	r0, [pc, #212]	; (8009010 <_printf_i+0x244>)
 8008f3c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008f40:	6829      	ldr	r1, [r5, #0]
 8008f42:	6823      	ldr	r3, [r4, #0]
 8008f44:	f851 6b04 	ldr.w	r6, [r1], #4
 8008f48:	6029      	str	r1, [r5, #0]
 8008f4a:	061d      	lsls	r5, r3, #24
 8008f4c:	d514      	bpl.n	8008f78 <_printf_i+0x1ac>
 8008f4e:	07df      	lsls	r7, r3, #31
 8008f50:	bf44      	itt	mi
 8008f52:	f043 0320 	orrmi.w	r3, r3, #32
 8008f56:	6023      	strmi	r3, [r4, #0]
 8008f58:	b91e      	cbnz	r6, 8008f62 <_printf_i+0x196>
 8008f5a:	6823      	ldr	r3, [r4, #0]
 8008f5c:	f023 0320 	bic.w	r3, r3, #32
 8008f60:	6023      	str	r3, [r4, #0]
 8008f62:	2310      	movs	r3, #16
 8008f64:	e7b0      	b.n	8008ec8 <_printf_i+0xfc>
 8008f66:	6823      	ldr	r3, [r4, #0]
 8008f68:	f043 0320 	orr.w	r3, r3, #32
 8008f6c:	6023      	str	r3, [r4, #0]
 8008f6e:	2378      	movs	r3, #120	; 0x78
 8008f70:	4828      	ldr	r0, [pc, #160]	; (8009014 <_printf_i+0x248>)
 8008f72:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008f76:	e7e3      	b.n	8008f40 <_printf_i+0x174>
 8008f78:	0659      	lsls	r1, r3, #25
 8008f7a:	bf48      	it	mi
 8008f7c:	b2b6      	uxthmi	r6, r6
 8008f7e:	e7e6      	b.n	8008f4e <_printf_i+0x182>
 8008f80:	4615      	mov	r5, r2
 8008f82:	e7bb      	b.n	8008efc <_printf_i+0x130>
 8008f84:	682b      	ldr	r3, [r5, #0]
 8008f86:	6826      	ldr	r6, [r4, #0]
 8008f88:	6961      	ldr	r1, [r4, #20]
 8008f8a:	1d18      	adds	r0, r3, #4
 8008f8c:	6028      	str	r0, [r5, #0]
 8008f8e:	0635      	lsls	r5, r6, #24
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	d501      	bpl.n	8008f98 <_printf_i+0x1cc>
 8008f94:	6019      	str	r1, [r3, #0]
 8008f96:	e002      	b.n	8008f9e <_printf_i+0x1d2>
 8008f98:	0670      	lsls	r0, r6, #25
 8008f9a:	d5fb      	bpl.n	8008f94 <_printf_i+0x1c8>
 8008f9c:	8019      	strh	r1, [r3, #0]
 8008f9e:	2300      	movs	r3, #0
 8008fa0:	6123      	str	r3, [r4, #16]
 8008fa2:	4615      	mov	r5, r2
 8008fa4:	e7ba      	b.n	8008f1c <_printf_i+0x150>
 8008fa6:	682b      	ldr	r3, [r5, #0]
 8008fa8:	1d1a      	adds	r2, r3, #4
 8008faa:	602a      	str	r2, [r5, #0]
 8008fac:	681d      	ldr	r5, [r3, #0]
 8008fae:	6862      	ldr	r2, [r4, #4]
 8008fb0:	2100      	movs	r1, #0
 8008fb2:	4628      	mov	r0, r5
 8008fb4:	f7f7 f934 	bl	8000220 <memchr>
 8008fb8:	b108      	cbz	r0, 8008fbe <_printf_i+0x1f2>
 8008fba:	1b40      	subs	r0, r0, r5
 8008fbc:	6060      	str	r0, [r4, #4]
 8008fbe:	6863      	ldr	r3, [r4, #4]
 8008fc0:	6123      	str	r3, [r4, #16]
 8008fc2:	2300      	movs	r3, #0
 8008fc4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008fc8:	e7a8      	b.n	8008f1c <_printf_i+0x150>
 8008fca:	6923      	ldr	r3, [r4, #16]
 8008fcc:	462a      	mov	r2, r5
 8008fce:	4649      	mov	r1, r9
 8008fd0:	4640      	mov	r0, r8
 8008fd2:	47d0      	blx	sl
 8008fd4:	3001      	adds	r0, #1
 8008fd6:	d0ab      	beq.n	8008f30 <_printf_i+0x164>
 8008fd8:	6823      	ldr	r3, [r4, #0]
 8008fda:	079b      	lsls	r3, r3, #30
 8008fdc:	d413      	bmi.n	8009006 <_printf_i+0x23a>
 8008fde:	68e0      	ldr	r0, [r4, #12]
 8008fe0:	9b03      	ldr	r3, [sp, #12]
 8008fe2:	4298      	cmp	r0, r3
 8008fe4:	bfb8      	it	lt
 8008fe6:	4618      	movlt	r0, r3
 8008fe8:	e7a4      	b.n	8008f34 <_printf_i+0x168>
 8008fea:	2301      	movs	r3, #1
 8008fec:	4632      	mov	r2, r6
 8008fee:	4649      	mov	r1, r9
 8008ff0:	4640      	mov	r0, r8
 8008ff2:	47d0      	blx	sl
 8008ff4:	3001      	adds	r0, #1
 8008ff6:	d09b      	beq.n	8008f30 <_printf_i+0x164>
 8008ff8:	3501      	adds	r5, #1
 8008ffa:	68e3      	ldr	r3, [r4, #12]
 8008ffc:	9903      	ldr	r1, [sp, #12]
 8008ffe:	1a5b      	subs	r3, r3, r1
 8009000:	42ab      	cmp	r3, r5
 8009002:	dcf2      	bgt.n	8008fea <_printf_i+0x21e>
 8009004:	e7eb      	b.n	8008fde <_printf_i+0x212>
 8009006:	2500      	movs	r5, #0
 8009008:	f104 0619 	add.w	r6, r4, #25
 800900c:	e7f5      	b.n	8008ffa <_printf_i+0x22e>
 800900e:	bf00      	nop
 8009010:	0800db08 	.word	0x0800db08
 8009014:	0800db19 	.word	0x0800db19

08009018 <_scanf_float>:
 8009018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800901c:	b087      	sub	sp, #28
 800901e:	4617      	mov	r7, r2
 8009020:	9303      	str	r3, [sp, #12]
 8009022:	688b      	ldr	r3, [r1, #8]
 8009024:	1e5a      	subs	r2, r3, #1
 8009026:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800902a:	bf83      	ittte	hi
 800902c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8009030:	195b      	addhi	r3, r3, r5
 8009032:	9302      	strhi	r3, [sp, #8]
 8009034:	2300      	movls	r3, #0
 8009036:	bf86      	itte	hi
 8009038:	f240 135d 	movwhi	r3, #349	; 0x15d
 800903c:	608b      	strhi	r3, [r1, #8]
 800903e:	9302      	strls	r3, [sp, #8]
 8009040:	680b      	ldr	r3, [r1, #0]
 8009042:	468b      	mov	fp, r1
 8009044:	2500      	movs	r5, #0
 8009046:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800904a:	f84b 3b1c 	str.w	r3, [fp], #28
 800904e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8009052:	4680      	mov	r8, r0
 8009054:	460c      	mov	r4, r1
 8009056:	465e      	mov	r6, fp
 8009058:	46aa      	mov	sl, r5
 800905a:	46a9      	mov	r9, r5
 800905c:	9501      	str	r5, [sp, #4]
 800905e:	68a2      	ldr	r2, [r4, #8]
 8009060:	b152      	cbz	r2, 8009078 <_scanf_float+0x60>
 8009062:	683b      	ldr	r3, [r7, #0]
 8009064:	781b      	ldrb	r3, [r3, #0]
 8009066:	2b4e      	cmp	r3, #78	; 0x4e
 8009068:	d864      	bhi.n	8009134 <_scanf_float+0x11c>
 800906a:	2b40      	cmp	r3, #64	; 0x40
 800906c:	d83c      	bhi.n	80090e8 <_scanf_float+0xd0>
 800906e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8009072:	b2c8      	uxtb	r0, r1
 8009074:	280e      	cmp	r0, #14
 8009076:	d93a      	bls.n	80090ee <_scanf_float+0xd6>
 8009078:	f1b9 0f00 	cmp.w	r9, #0
 800907c:	d003      	beq.n	8009086 <_scanf_float+0x6e>
 800907e:	6823      	ldr	r3, [r4, #0]
 8009080:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009084:	6023      	str	r3, [r4, #0]
 8009086:	f10a 3aff 	add.w	sl, sl, #4294967295
 800908a:	f1ba 0f01 	cmp.w	sl, #1
 800908e:	f200 8113 	bhi.w	80092b8 <_scanf_float+0x2a0>
 8009092:	455e      	cmp	r6, fp
 8009094:	f200 8105 	bhi.w	80092a2 <_scanf_float+0x28a>
 8009098:	2501      	movs	r5, #1
 800909a:	4628      	mov	r0, r5
 800909c:	b007      	add	sp, #28
 800909e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090a2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80090a6:	2a0d      	cmp	r2, #13
 80090a8:	d8e6      	bhi.n	8009078 <_scanf_float+0x60>
 80090aa:	a101      	add	r1, pc, #4	; (adr r1, 80090b0 <_scanf_float+0x98>)
 80090ac:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80090b0:	080091ef 	.word	0x080091ef
 80090b4:	08009079 	.word	0x08009079
 80090b8:	08009079 	.word	0x08009079
 80090bc:	08009079 	.word	0x08009079
 80090c0:	0800924f 	.word	0x0800924f
 80090c4:	08009227 	.word	0x08009227
 80090c8:	08009079 	.word	0x08009079
 80090cc:	08009079 	.word	0x08009079
 80090d0:	080091fd 	.word	0x080091fd
 80090d4:	08009079 	.word	0x08009079
 80090d8:	08009079 	.word	0x08009079
 80090dc:	08009079 	.word	0x08009079
 80090e0:	08009079 	.word	0x08009079
 80090e4:	080091b5 	.word	0x080091b5
 80090e8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80090ec:	e7db      	b.n	80090a6 <_scanf_float+0x8e>
 80090ee:	290e      	cmp	r1, #14
 80090f0:	d8c2      	bhi.n	8009078 <_scanf_float+0x60>
 80090f2:	a001      	add	r0, pc, #4	; (adr r0, 80090f8 <_scanf_float+0xe0>)
 80090f4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80090f8:	080091a7 	.word	0x080091a7
 80090fc:	08009079 	.word	0x08009079
 8009100:	080091a7 	.word	0x080091a7
 8009104:	0800923b 	.word	0x0800923b
 8009108:	08009079 	.word	0x08009079
 800910c:	08009155 	.word	0x08009155
 8009110:	08009191 	.word	0x08009191
 8009114:	08009191 	.word	0x08009191
 8009118:	08009191 	.word	0x08009191
 800911c:	08009191 	.word	0x08009191
 8009120:	08009191 	.word	0x08009191
 8009124:	08009191 	.word	0x08009191
 8009128:	08009191 	.word	0x08009191
 800912c:	08009191 	.word	0x08009191
 8009130:	08009191 	.word	0x08009191
 8009134:	2b6e      	cmp	r3, #110	; 0x6e
 8009136:	d809      	bhi.n	800914c <_scanf_float+0x134>
 8009138:	2b60      	cmp	r3, #96	; 0x60
 800913a:	d8b2      	bhi.n	80090a2 <_scanf_float+0x8a>
 800913c:	2b54      	cmp	r3, #84	; 0x54
 800913e:	d077      	beq.n	8009230 <_scanf_float+0x218>
 8009140:	2b59      	cmp	r3, #89	; 0x59
 8009142:	d199      	bne.n	8009078 <_scanf_float+0x60>
 8009144:	2d07      	cmp	r5, #7
 8009146:	d197      	bne.n	8009078 <_scanf_float+0x60>
 8009148:	2508      	movs	r5, #8
 800914a:	e029      	b.n	80091a0 <_scanf_float+0x188>
 800914c:	2b74      	cmp	r3, #116	; 0x74
 800914e:	d06f      	beq.n	8009230 <_scanf_float+0x218>
 8009150:	2b79      	cmp	r3, #121	; 0x79
 8009152:	e7f6      	b.n	8009142 <_scanf_float+0x12a>
 8009154:	6821      	ldr	r1, [r4, #0]
 8009156:	05c8      	lsls	r0, r1, #23
 8009158:	d51a      	bpl.n	8009190 <_scanf_float+0x178>
 800915a:	9b02      	ldr	r3, [sp, #8]
 800915c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8009160:	6021      	str	r1, [r4, #0]
 8009162:	f109 0901 	add.w	r9, r9, #1
 8009166:	b11b      	cbz	r3, 8009170 <_scanf_float+0x158>
 8009168:	3b01      	subs	r3, #1
 800916a:	3201      	adds	r2, #1
 800916c:	9302      	str	r3, [sp, #8]
 800916e:	60a2      	str	r2, [r4, #8]
 8009170:	68a3      	ldr	r3, [r4, #8]
 8009172:	3b01      	subs	r3, #1
 8009174:	60a3      	str	r3, [r4, #8]
 8009176:	6923      	ldr	r3, [r4, #16]
 8009178:	3301      	adds	r3, #1
 800917a:	6123      	str	r3, [r4, #16]
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	3b01      	subs	r3, #1
 8009180:	2b00      	cmp	r3, #0
 8009182:	607b      	str	r3, [r7, #4]
 8009184:	f340 8084 	ble.w	8009290 <_scanf_float+0x278>
 8009188:	683b      	ldr	r3, [r7, #0]
 800918a:	3301      	adds	r3, #1
 800918c:	603b      	str	r3, [r7, #0]
 800918e:	e766      	b.n	800905e <_scanf_float+0x46>
 8009190:	eb1a 0f05 	cmn.w	sl, r5
 8009194:	f47f af70 	bne.w	8009078 <_scanf_float+0x60>
 8009198:	6822      	ldr	r2, [r4, #0]
 800919a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800919e:	6022      	str	r2, [r4, #0]
 80091a0:	f806 3b01 	strb.w	r3, [r6], #1
 80091a4:	e7e4      	b.n	8009170 <_scanf_float+0x158>
 80091a6:	6822      	ldr	r2, [r4, #0]
 80091a8:	0610      	lsls	r0, r2, #24
 80091aa:	f57f af65 	bpl.w	8009078 <_scanf_float+0x60>
 80091ae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80091b2:	e7f4      	b.n	800919e <_scanf_float+0x186>
 80091b4:	f1ba 0f00 	cmp.w	sl, #0
 80091b8:	d10e      	bne.n	80091d8 <_scanf_float+0x1c0>
 80091ba:	f1b9 0f00 	cmp.w	r9, #0
 80091be:	d10e      	bne.n	80091de <_scanf_float+0x1c6>
 80091c0:	6822      	ldr	r2, [r4, #0]
 80091c2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80091c6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80091ca:	d108      	bne.n	80091de <_scanf_float+0x1c6>
 80091cc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80091d0:	6022      	str	r2, [r4, #0]
 80091d2:	f04f 0a01 	mov.w	sl, #1
 80091d6:	e7e3      	b.n	80091a0 <_scanf_float+0x188>
 80091d8:	f1ba 0f02 	cmp.w	sl, #2
 80091dc:	d055      	beq.n	800928a <_scanf_float+0x272>
 80091de:	2d01      	cmp	r5, #1
 80091e0:	d002      	beq.n	80091e8 <_scanf_float+0x1d0>
 80091e2:	2d04      	cmp	r5, #4
 80091e4:	f47f af48 	bne.w	8009078 <_scanf_float+0x60>
 80091e8:	3501      	adds	r5, #1
 80091ea:	b2ed      	uxtb	r5, r5
 80091ec:	e7d8      	b.n	80091a0 <_scanf_float+0x188>
 80091ee:	f1ba 0f01 	cmp.w	sl, #1
 80091f2:	f47f af41 	bne.w	8009078 <_scanf_float+0x60>
 80091f6:	f04f 0a02 	mov.w	sl, #2
 80091fa:	e7d1      	b.n	80091a0 <_scanf_float+0x188>
 80091fc:	b97d      	cbnz	r5, 800921e <_scanf_float+0x206>
 80091fe:	f1b9 0f00 	cmp.w	r9, #0
 8009202:	f47f af3c 	bne.w	800907e <_scanf_float+0x66>
 8009206:	6822      	ldr	r2, [r4, #0]
 8009208:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800920c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009210:	f47f af39 	bne.w	8009086 <_scanf_float+0x6e>
 8009214:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009218:	6022      	str	r2, [r4, #0]
 800921a:	2501      	movs	r5, #1
 800921c:	e7c0      	b.n	80091a0 <_scanf_float+0x188>
 800921e:	2d03      	cmp	r5, #3
 8009220:	d0e2      	beq.n	80091e8 <_scanf_float+0x1d0>
 8009222:	2d05      	cmp	r5, #5
 8009224:	e7de      	b.n	80091e4 <_scanf_float+0x1cc>
 8009226:	2d02      	cmp	r5, #2
 8009228:	f47f af26 	bne.w	8009078 <_scanf_float+0x60>
 800922c:	2503      	movs	r5, #3
 800922e:	e7b7      	b.n	80091a0 <_scanf_float+0x188>
 8009230:	2d06      	cmp	r5, #6
 8009232:	f47f af21 	bne.w	8009078 <_scanf_float+0x60>
 8009236:	2507      	movs	r5, #7
 8009238:	e7b2      	b.n	80091a0 <_scanf_float+0x188>
 800923a:	6822      	ldr	r2, [r4, #0]
 800923c:	0591      	lsls	r1, r2, #22
 800923e:	f57f af1b 	bpl.w	8009078 <_scanf_float+0x60>
 8009242:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8009246:	6022      	str	r2, [r4, #0]
 8009248:	f8cd 9004 	str.w	r9, [sp, #4]
 800924c:	e7a8      	b.n	80091a0 <_scanf_float+0x188>
 800924e:	6822      	ldr	r2, [r4, #0]
 8009250:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8009254:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8009258:	d006      	beq.n	8009268 <_scanf_float+0x250>
 800925a:	0550      	lsls	r0, r2, #21
 800925c:	f57f af0c 	bpl.w	8009078 <_scanf_float+0x60>
 8009260:	f1b9 0f00 	cmp.w	r9, #0
 8009264:	f43f af0f 	beq.w	8009086 <_scanf_float+0x6e>
 8009268:	0591      	lsls	r1, r2, #22
 800926a:	bf58      	it	pl
 800926c:	9901      	ldrpl	r1, [sp, #4]
 800926e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009272:	bf58      	it	pl
 8009274:	eba9 0101 	subpl.w	r1, r9, r1
 8009278:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800927c:	bf58      	it	pl
 800927e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8009282:	6022      	str	r2, [r4, #0]
 8009284:	f04f 0900 	mov.w	r9, #0
 8009288:	e78a      	b.n	80091a0 <_scanf_float+0x188>
 800928a:	f04f 0a03 	mov.w	sl, #3
 800928e:	e787      	b.n	80091a0 <_scanf_float+0x188>
 8009290:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009294:	4639      	mov	r1, r7
 8009296:	4640      	mov	r0, r8
 8009298:	4798      	blx	r3
 800929a:	2800      	cmp	r0, #0
 800929c:	f43f aedf 	beq.w	800905e <_scanf_float+0x46>
 80092a0:	e6ea      	b.n	8009078 <_scanf_float+0x60>
 80092a2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80092a6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80092aa:	463a      	mov	r2, r7
 80092ac:	4640      	mov	r0, r8
 80092ae:	4798      	blx	r3
 80092b0:	6923      	ldr	r3, [r4, #16]
 80092b2:	3b01      	subs	r3, #1
 80092b4:	6123      	str	r3, [r4, #16]
 80092b6:	e6ec      	b.n	8009092 <_scanf_float+0x7a>
 80092b8:	1e6b      	subs	r3, r5, #1
 80092ba:	2b06      	cmp	r3, #6
 80092bc:	d825      	bhi.n	800930a <_scanf_float+0x2f2>
 80092be:	2d02      	cmp	r5, #2
 80092c0:	d836      	bhi.n	8009330 <_scanf_float+0x318>
 80092c2:	455e      	cmp	r6, fp
 80092c4:	f67f aee8 	bls.w	8009098 <_scanf_float+0x80>
 80092c8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80092cc:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80092d0:	463a      	mov	r2, r7
 80092d2:	4640      	mov	r0, r8
 80092d4:	4798      	blx	r3
 80092d6:	6923      	ldr	r3, [r4, #16]
 80092d8:	3b01      	subs	r3, #1
 80092da:	6123      	str	r3, [r4, #16]
 80092dc:	e7f1      	b.n	80092c2 <_scanf_float+0x2aa>
 80092de:	9802      	ldr	r0, [sp, #8]
 80092e0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80092e4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80092e8:	9002      	str	r0, [sp, #8]
 80092ea:	463a      	mov	r2, r7
 80092ec:	4640      	mov	r0, r8
 80092ee:	4798      	blx	r3
 80092f0:	6923      	ldr	r3, [r4, #16]
 80092f2:	3b01      	subs	r3, #1
 80092f4:	6123      	str	r3, [r4, #16]
 80092f6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80092fa:	fa5f fa8a 	uxtb.w	sl, sl
 80092fe:	f1ba 0f02 	cmp.w	sl, #2
 8009302:	d1ec      	bne.n	80092de <_scanf_float+0x2c6>
 8009304:	3d03      	subs	r5, #3
 8009306:	b2ed      	uxtb	r5, r5
 8009308:	1b76      	subs	r6, r6, r5
 800930a:	6823      	ldr	r3, [r4, #0]
 800930c:	05da      	lsls	r2, r3, #23
 800930e:	d52f      	bpl.n	8009370 <_scanf_float+0x358>
 8009310:	055b      	lsls	r3, r3, #21
 8009312:	d510      	bpl.n	8009336 <_scanf_float+0x31e>
 8009314:	455e      	cmp	r6, fp
 8009316:	f67f aebf 	bls.w	8009098 <_scanf_float+0x80>
 800931a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800931e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009322:	463a      	mov	r2, r7
 8009324:	4640      	mov	r0, r8
 8009326:	4798      	blx	r3
 8009328:	6923      	ldr	r3, [r4, #16]
 800932a:	3b01      	subs	r3, #1
 800932c:	6123      	str	r3, [r4, #16]
 800932e:	e7f1      	b.n	8009314 <_scanf_float+0x2fc>
 8009330:	46aa      	mov	sl, r5
 8009332:	9602      	str	r6, [sp, #8]
 8009334:	e7df      	b.n	80092f6 <_scanf_float+0x2de>
 8009336:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800933a:	6923      	ldr	r3, [r4, #16]
 800933c:	2965      	cmp	r1, #101	; 0x65
 800933e:	f103 33ff 	add.w	r3, r3, #4294967295
 8009342:	f106 35ff 	add.w	r5, r6, #4294967295
 8009346:	6123      	str	r3, [r4, #16]
 8009348:	d00c      	beq.n	8009364 <_scanf_float+0x34c>
 800934a:	2945      	cmp	r1, #69	; 0x45
 800934c:	d00a      	beq.n	8009364 <_scanf_float+0x34c>
 800934e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009352:	463a      	mov	r2, r7
 8009354:	4640      	mov	r0, r8
 8009356:	4798      	blx	r3
 8009358:	6923      	ldr	r3, [r4, #16]
 800935a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800935e:	3b01      	subs	r3, #1
 8009360:	1eb5      	subs	r5, r6, #2
 8009362:	6123      	str	r3, [r4, #16]
 8009364:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009368:	463a      	mov	r2, r7
 800936a:	4640      	mov	r0, r8
 800936c:	4798      	blx	r3
 800936e:	462e      	mov	r6, r5
 8009370:	6825      	ldr	r5, [r4, #0]
 8009372:	f015 0510 	ands.w	r5, r5, #16
 8009376:	d159      	bne.n	800942c <_scanf_float+0x414>
 8009378:	7035      	strb	r5, [r6, #0]
 800937a:	6823      	ldr	r3, [r4, #0]
 800937c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009380:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009384:	d11b      	bne.n	80093be <_scanf_float+0x3a6>
 8009386:	9b01      	ldr	r3, [sp, #4]
 8009388:	454b      	cmp	r3, r9
 800938a:	eba3 0209 	sub.w	r2, r3, r9
 800938e:	d123      	bne.n	80093d8 <_scanf_float+0x3c0>
 8009390:	2200      	movs	r2, #0
 8009392:	4659      	mov	r1, fp
 8009394:	4640      	mov	r0, r8
 8009396:	f000 ff1d 	bl	800a1d4 <_strtod_r>
 800939a:	6822      	ldr	r2, [r4, #0]
 800939c:	9b03      	ldr	r3, [sp, #12]
 800939e:	f012 0f02 	tst.w	r2, #2
 80093a2:	ec57 6b10 	vmov	r6, r7, d0
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	d021      	beq.n	80093ee <_scanf_float+0x3d6>
 80093aa:	9903      	ldr	r1, [sp, #12]
 80093ac:	1d1a      	adds	r2, r3, #4
 80093ae:	600a      	str	r2, [r1, #0]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	e9c3 6700 	strd	r6, r7, [r3]
 80093b6:	68e3      	ldr	r3, [r4, #12]
 80093b8:	3301      	adds	r3, #1
 80093ba:	60e3      	str	r3, [r4, #12]
 80093bc:	e66d      	b.n	800909a <_scanf_float+0x82>
 80093be:	9b04      	ldr	r3, [sp, #16]
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d0e5      	beq.n	8009390 <_scanf_float+0x378>
 80093c4:	9905      	ldr	r1, [sp, #20]
 80093c6:	230a      	movs	r3, #10
 80093c8:	462a      	mov	r2, r5
 80093ca:	3101      	adds	r1, #1
 80093cc:	4640      	mov	r0, r8
 80093ce:	f000 ff89 	bl	800a2e4 <_strtol_r>
 80093d2:	9b04      	ldr	r3, [sp, #16]
 80093d4:	9e05      	ldr	r6, [sp, #20]
 80093d6:	1ac2      	subs	r2, r0, r3
 80093d8:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80093dc:	429e      	cmp	r6, r3
 80093de:	bf28      	it	cs
 80093e0:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80093e4:	4912      	ldr	r1, [pc, #72]	; (8009430 <_scanf_float+0x418>)
 80093e6:	4630      	mov	r0, r6
 80093e8:	f000 f82c 	bl	8009444 <siprintf>
 80093ec:	e7d0      	b.n	8009390 <_scanf_float+0x378>
 80093ee:	9903      	ldr	r1, [sp, #12]
 80093f0:	f012 0f04 	tst.w	r2, #4
 80093f4:	f103 0204 	add.w	r2, r3, #4
 80093f8:	600a      	str	r2, [r1, #0]
 80093fa:	d1d9      	bne.n	80093b0 <_scanf_float+0x398>
 80093fc:	f8d3 8000 	ldr.w	r8, [r3]
 8009400:	ee10 2a10 	vmov	r2, s0
 8009404:	ee10 0a10 	vmov	r0, s0
 8009408:	463b      	mov	r3, r7
 800940a:	4639      	mov	r1, r7
 800940c:	f7f7 fbae 	bl	8000b6c <__aeabi_dcmpun>
 8009410:	b128      	cbz	r0, 800941e <_scanf_float+0x406>
 8009412:	4808      	ldr	r0, [pc, #32]	; (8009434 <_scanf_float+0x41c>)
 8009414:	f000 f810 	bl	8009438 <nanf>
 8009418:	ed88 0a00 	vstr	s0, [r8]
 800941c:	e7cb      	b.n	80093b6 <_scanf_float+0x39e>
 800941e:	4630      	mov	r0, r6
 8009420:	4639      	mov	r1, r7
 8009422:	f7f7 fc01 	bl	8000c28 <__aeabi_d2f>
 8009426:	f8c8 0000 	str.w	r0, [r8]
 800942a:	e7c4      	b.n	80093b6 <_scanf_float+0x39e>
 800942c:	2500      	movs	r5, #0
 800942e:	e634      	b.n	800909a <_scanf_float+0x82>
 8009430:	0800db2a 	.word	0x0800db2a
 8009434:	0800df4b 	.word	0x0800df4b

08009438 <nanf>:
 8009438:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009440 <nanf+0x8>
 800943c:	4770      	bx	lr
 800943e:	bf00      	nop
 8009440:	7fc00000 	.word	0x7fc00000

08009444 <siprintf>:
 8009444:	b40e      	push	{r1, r2, r3}
 8009446:	b500      	push	{lr}
 8009448:	b09c      	sub	sp, #112	; 0x70
 800944a:	ab1d      	add	r3, sp, #116	; 0x74
 800944c:	9002      	str	r0, [sp, #8]
 800944e:	9006      	str	r0, [sp, #24]
 8009450:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009454:	4809      	ldr	r0, [pc, #36]	; (800947c <siprintf+0x38>)
 8009456:	9107      	str	r1, [sp, #28]
 8009458:	9104      	str	r1, [sp, #16]
 800945a:	4909      	ldr	r1, [pc, #36]	; (8009480 <siprintf+0x3c>)
 800945c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009460:	9105      	str	r1, [sp, #20]
 8009462:	6800      	ldr	r0, [r0, #0]
 8009464:	9301      	str	r3, [sp, #4]
 8009466:	a902      	add	r1, sp, #8
 8009468:	f002 ff90 	bl	800c38c <_svfiprintf_r>
 800946c:	9b02      	ldr	r3, [sp, #8]
 800946e:	2200      	movs	r2, #0
 8009470:	701a      	strb	r2, [r3, #0]
 8009472:	b01c      	add	sp, #112	; 0x70
 8009474:	f85d eb04 	ldr.w	lr, [sp], #4
 8009478:	b003      	add	sp, #12
 800947a:	4770      	bx	lr
 800947c:	2000000c 	.word	0x2000000c
 8009480:	ffff0208 	.word	0xffff0208

08009484 <siscanf>:
 8009484:	b40e      	push	{r1, r2, r3}
 8009486:	b510      	push	{r4, lr}
 8009488:	b09f      	sub	sp, #124	; 0x7c
 800948a:	ac21      	add	r4, sp, #132	; 0x84
 800948c:	f44f 7101 	mov.w	r1, #516	; 0x204
 8009490:	f854 2b04 	ldr.w	r2, [r4], #4
 8009494:	9201      	str	r2, [sp, #4]
 8009496:	f8ad 101c 	strh.w	r1, [sp, #28]
 800949a:	9004      	str	r0, [sp, #16]
 800949c:	9008      	str	r0, [sp, #32]
 800949e:	f7f6 feb7 	bl	8000210 <strlen>
 80094a2:	4b0c      	ldr	r3, [pc, #48]	; (80094d4 <siscanf+0x50>)
 80094a4:	9005      	str	r0, [sp, #20]
 80094a6:	9009      	str	r0, [sp, #36]	; 0x24
 80094a8:	930d      	str	r3, [sp, #52]	; 0x34
 80094aa:	480b      	ldr	r0, [pc, #44]	; (80094d8 <siscanf+0x54>)
 80094ac:	9a01      	ldr	r2, [sp, #4]
 80094ae:	6800      	ldr	r0, [r0, #0]
 80094b0:	9403      	str	r4, [sp, #12]
 80094b2:	2300      	movs	r3, #0
 80094b4:	9311      	str	r3, [sp, #68]	; 0x44
 80094b6:	9316      	str	r3, [sp, #88]	; 0x58
 80094b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80094bc:	f8ad 301e 	strh.w	r3, [sp, #30]
 80094c0:	a904      	add	r1, sp, #16
 80094c2:	4623      	mov	r3, r4
 80094c4:	f003 f8bc 	bl	800c640 <__ssvfiscanf_r>
 80094c8:	b01f      	add	sp, #124	; 0x7c
 80094ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80094ce:	b003      	add	sp, #12
 80094d0:	4770      	bx	lr
 80094d2:	bf00      	nop
 80094d4:	080094ff 	.word	0x080094ff
 80094d8:	2000000c 	.word	0x2000000c

080094dc <__sread>:
 80094dc:	b510      	push	{r4, lr}
 80094de:	460c      	mov	r4, r1
 80094e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094e4:	f003 fb76 	bl	800cbd4 <_read_r>
 80094e8:	2800      	cmp	r0, #0
 80094ea:	bfab      	itete	ge
 80094ec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80094ee:	89a3      	ldrhlt	r3, [r4, #12]
 80094f0:	181b      	addge	r3, r3, r0
 80094f2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80094f6:	bfac      	ite	ge
 80094f8:	6563      	strge	r3, [r4, #84]	; 0x54
 80094fa:	81a3      	strhlt	r3, [r4, #12]
 80094fc:	bd10      	pop	{r4, pc}

080094fe <__seofread>:
 80094fe:	2000      	movs	r0, #0
 8009500:	4770      	bx	lr

08009502 <__swrite>:
 8009502:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009506:	461f      	mov	r7, r3
 8009508:	898b      	ldrh	r3, [r1, #12]
 800950a:	05db      	lsls	r3, r3, #23
 800950c:	4605      	mov	r5, r0
 800950e:	460c      	mov	r4, r1
 8009510:	4616      	mov	r6, r2
 8009512:	d505      	bpl.n	8009520 <__swrite+0x1e>
 8009514:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009518:	2302      	movs	r3, #2
 800951a:	2200      	movs	r2, #0
 800951c:	f002 f8f6 	bl	800b70c <_lseek_r>
 8009520:	89a3      	ldrh	r3, [r4, #12]
 8009522:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009526:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800952a:	81a3      	strh	r3, [r4, #12]
 800952c:	4632      	mov	r2, r6
 800952e:	463b      	mov	r3, r7
 8009530:	4628      	mov	r0, r5
 8009532:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009536:	f000 bed7 	b.w	800a2e8 <_write_r>

0800953a <__sseek>:
 800953a:	b510      	push	{r4, lr}
 800953c:	460c      	mov	r4, r1
 800953e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009542:	f002 f8e3 	bl	800b70c <_lseek_r>
 8009546:	1c43      	adds	r3, r0, #1
 8009548:	89a3      	ldrh	r3, [r4, #12]
 800954a:	bf15      	itete	ne
 800954c:	6560      	strne	r0, [r4, #84]	; 0x54
 800954e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009552:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009556:	81a3      	strheq	r3, [r4, #12]
 8009558:	bf18      	it	ne
 800955a:	81a3      	strhne	r3, [r4, #12]
 800955c:	bd10      	pop	{r4, pc}

0800955e <__sclose>:
 800955e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009562:	f000 bed3 	b.w	800a30c <_close_r>

08009566 <strncmp>:
 8009566:	b510      	push	{r4, lr}
 8009568:	b17a      	cbz	r2, 800958a <strncmp+0x24>
 800956a:	4603      	mov	r3, r0
 800956c:	3901      	subs	r1, #1
 800956e:	1884      	adds	r4, r0, r2
 8009570:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009574:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009578:	4290      	cmp	r0, r2
 800957a:	d101      	bne.n	8009580 <strncmp+0x1a>
 800957c:	42a3      	cmp	r3, r4
 800957e:	d101      	bne.n	8009584 <strncmp+0x1e>
 8009580:	1a80      	subs	r0, r0, r2
 8009582:	bd10      	pop	{r4, pc}
 8009584:	2800      	cmp	r0, #0
 8009586:	d1f3      	bne.n	8009570 <strncmp+0xa>
 8009588:	e7fa      	b.n	8009580 <strncmp+0x1a>
 800958a:	4610      	mov	r0, r2
 800958c:	e7f9      	b.n	8009582 <strncmp+0x1c>

0800958e <sulp>:
 800958e:	b570      	push	{r4, r5, r6, lr}
 8009590:	4604      	mov	r4, r0
 8009592:	460d      	mov	r5, r1
 8009594:	ec45 4b10 	vmov	d0, r4, r5
 8009598:	4616      	mov	r6, r2
 800959a:	f002 fc55 	bl	800be48 <__ulp>
 800959e:	ec51 0b10 	vmov	r0, r1, d0
 80095a2:	b17e      	cbz	r6, 80095c4 <sulp+0x36>
 80095a4:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80095a8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	dd09      	ble.n	80095c4 <sulp+0x36>
 80095b0:	051b      	lsls	r3, r3, #20
 80095b2:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80095b6:	2400      	movs	r4, #0
 80095b8:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80095bc:	4622      	mov	r2, r4
 80095be:	462b      	mov	r3, r5
 80095c0:	f7f7 f83a 	bl	8000638 <__aeabi_dmul>
 80095c4:	bd70      	pop	{r4, r5, r6, pc}
	...

080095c8 <_strtod_l>:
 80095c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095cc:	ed2d 8b02 	vpush	{d8}
 80095d0:	b09d      	sub	sp, #116	; 0x74
 80095d2:	461f      	mov	r7, r3
 80095d4:	2300      	movs	r3, #0
 80095d6:	9318      	str	r3, [sp, #96]	; 0x60
 80095d8:	4ba2      	ldr	r3, [pc, #648]	; (8009864 <_strtod_l+0x29c>)
 80095da:	9213      	str	r2, [sp, #76]	; 0x4c
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	9305      	str	r3, [sp, #20]
 80095e0:	4604      	mov	r4, r0
 80095e2:	4618      	mov	r0, r3
 80095e4:	4688      	mov	r8, r1
 80095e6:	f7f6 fe13 	bl	8000210 <strlen>
 80095ea:	f04f 0a00 	mov.w	sl, #0
 80095ee:	4605      	mov	r5, r0
 80095f0:	f04f 0b00 	mov.w	fp, #0
 80095f4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80095f8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80095fa:	781a      	ldrb	r2, [r3, #0]
 80095fc:	2a2b      	cmp	r2, #43	; 0x2b
 80095fe:	d04e      	beq.n	800969e <_strtod_l+0xd6>
 8009600:	d83b      	bhi.n	800967a <_strtod_l+0xb2>
 8009602:	2a0d      	cmp	r2, #13
 8009604:	d834      	bhi.n	8009670 <_strtod_l+0xa8>
 8009606:	2a08      	cmp	r2, #8
 8009608:	d834      	bhi.n	8009674 <_strtod_l+0xac>
 800960a:	2a00      	cmp	r2, #0
 800960c:	d03e      	beq.n	800968c <_strtod_l+0xc4>
 800960e:	2300      	movs	r3, #0
 8009610:	930a      	str	r3, [sp, #40]	; 0x28
 8009612:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8009614:	7833      	ldrb	r3, [r6, #0]
 8009616:	2b30      	cmp	r3, #48	; 0x30
 8009618:	f040 80b0 	bne.w	800977c <_strtod_l+0x1b4>
 800961c:	7873      	ldrb	r3, [r6, #1]
 800961e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009622:	2b58      	cmp	r3, #88	; 0x58
 8009624:	d168      	bne.n	80096f8 <_strtod_l+0x130>
 8009626:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009628:	9301      	str	r3, [sp, #4]
 800962a:	ab18      	add	r3, sp, #96	; 0x60
 800962c:	9702      	str	r7, [sp, #8]
 800962e:	9300      	str	r3, [sp, #0]
 8009630:	4a8d      	ldr	r2, [pc, #564]	; (8009868 <_strtod_l+0x2a0>)
 8009632:	ab19      	add	r3, sp, #100	; 0x64
 8009634:	a917      	add	r1, sp, #92	; 0x5c
 8009636:	4620      	mov	r0, r4
 8009638:	f001 fd5c 	bl	800b0f4 <__gethex>
 800963c:	f010 0707 	ands.w	r7, r0, #7
 8009640:	4605      	mov	r5, r0
 8009642:	d005      	beq.n	8009650 <_strtod_l+0x88>
 8009644:	2f06      	cmp	r7, #6
 8009646:	d12c      	bne.n	80096a2 <_strtod_l+0xda>
 8009648:	3601      	adds	r6, #1
 800964a:	2300      	movs	r3, #0
 800964c:	9617      	str	r6, [sp, #92]	; 0x5c
 800964e:	930a      	str	r3, [sp, #40]	; 0x28
 8009650:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009652:	2b00      	cmp	r3, #0
 8009654:	f040 8590 	bne.w	800a178 <_strtod_l+0xbb0>
 8009658:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800965a:	b1eb      	cbz	r3, 8009698 <_strtod_l+0xd0>
 800965c:	4652      	mov	r2, sl
 800965e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009662:	ec43 2b10 	vmov	d0, r2, r3
 8009666:	b01d      	add	sp, #116	; 0x74
 8009668:	ecbd 8b02 	vpop	{d8}
 800966c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009670:	2a20      	cmp	r2, #32
 8009672:	d1cc      	bne.n	800960e <_strtod_l+0x46>
 8009674:	3301      	adds	r3, #1
 8009676:	9317      	str	r3, [sp, #92]	; 0x5c
 8009678:	e7be      	b.n	80095f8 <_strtod_l+0x30>
 800967a:	2a2d      	cmp	r2, #45	; 0x2d
 800967c:	d1c7      	bne.n	800960e <_strtod_l+0x46>
 800967e:	2201      	movs	r2, #1
 8009680:	920a      	str	r2, [sp, #40]	; 0x28
 8009682:	1c5a      	adds	r2, r3, #1
 8009684:	9217      	str	r2, [sp, #92]	; 0x5c
 8009686:	785b      	ldrb	r3, [r3, #1]
 8009688:	2b00      	cmp	r3, #0
 800968a:	d1c2      	bne.n	8009612 <_strtod_l+0x4a>
 800968c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800968e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8009692:	2b00      	cmp	r3, #0
 8009694:	f040 856e 	bne.w	800a174 <_strtod_l+0xbac>
 8009698:	4652      	mov	r2, sl
 800969a:	465b      	mov	r3, fp
 800969c:	e7e1      	b.n	8009662 <_strtod_l+0x9a>
 800969e:	2200      	movs	r2, #0
 80096a0:	e7ee      	b.n	8009680 <_strtod_l+0xb8>
 80096a2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80096a4:	b13a      	cbz	r2, 80096b6 <_strtod_l+0xee>
 80096a6:	2135      	movs	r1, #53	; 0x35
 80096a8:	a81a      	add	r0, sp, #104	; 0x68
 80096aa:	f002 fcd8 	bl	800c05e <__copybits>
 80096ae:	9918      	ldr	r1, [sp, #96]	; 0x60
 80096b0:	4620      	mov	r0, r4
 80096b2:	f002 f897 	bl	800b7e4 <_Bfree>
 80096b6:	3f01      	subs	r7, #1
 80096b8:	2f04      	cmp	r7, #4
 80096ba:	d806      	bhi.n	80096ca <_strtod_l+0x102>
 80096bc:	e8df f007 	tbb	[pc, r7]
 80096c0:	1714030a 	.word	0x1714030a
 80096c4:	0a          	.byte	0x0a
 80096c5:	00          	.byte	0x00
 80096c6:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 80096ca:	0728      	lsls	r0, r5, #28
 80096cc:	d5c0      	bpl.n	8009650 <_strtod_l+0x88>
 80096ce:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80096d2:	e7bd      	b.n	8009650 <_strtod_l+0x88>
 80096d4:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 80096d8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80096da:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80096de:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80096e2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80096e6:	e7f0      	b.n	80096ca <_strtod_l+0x102>
 80096e8:	f8df b180 	ldr.w	fp, [pc, #384]	; 800986c <_strtod_l+0x2a4>
 80096ec:	e7ed      	b.n	80096ca <_strtod_l+0x102>
 80096ee:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80096f2:	f04f 3aff 	mov.w	sl, #4294967295
 80096f6:	e7e8      	b.n	80096ca <_strtod_l+0x102>
 80096f8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80096fa:	1c5a      	adds	r2, r3, #1
 80096fc:	9217      	str	r2, [sp, #92]	; 0x5c
 80096fe:	785b      	ldrb	r3, [r3, #1]
 8009700:	2b30      	cmp	r3, #48	; 0x30
 8009702:	d0f9      	beq.n	80096f8 <_strtod_l+0x130>
 8009704:	2b00      	cmp	r3, #0
 8009706:	d0a3      	beq.n	8009650 <_strtod_l+0x88>
 8009708:	2301      	movs	r3, #1
 800970a:	f04f 0900 	mov.w	r9, #0
 800970e:	9304      	str	r3, [sp, #16]
 8009710:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009712:	9308      	str	r3, [sp, #32]
 8009714:	f8cd 901c 	str.w	r9, [sp, #28]
 8009718:	464f      	mov	r7, r9
 800971a:	220a      	movs	r2, #10
 800971c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800971e:	7806      	ldrb	r6, [r0, #0]
 8009720:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8009724:	b2d9      	uxtb	r1, r3
 8009726:	2909      	cmp	r1, #9
 8009728:	d92a      	bls.n	8009780 <_strtod_l+0x1b8>
 800972a:	9905      	ldr	r1, [sp, #20]
 800972c:	462a      	mov	r2, r5
 800972e:	f7ff ff1a 	bl	8009566 <strncmp>
 8009732:	b398      	cbz	r0, 800979c <_strtod_l+0x1d4>
 8009734:	2000      	movs	r0, #0
 8009736:	4632      	mov	r2, r6
 8009738:	463d      	mov	r5, r7
 800973a:	9005      	str	r0, [sp, #20]
 800973c:	4603      	mov	r3, r0
 800973e:	2a65      	cmp	r2, #101	; 0x65
 8009740:	d001      	beq.n	8009746 <_strtod_l+0x17e>
 8009742:	2a45      	cmp	r2, #69	; 0x45
 8009744:	d118      	bne.n	8009778 <_strtod_l+0x1b0>
 8009746:	b91d      	cbnz	r5, 8009750 <_strtod_l+0x188>
 8009748:	9a04      	ldr	r2, [sp, #16]
 800974a:	4302      	orrs	r2, r0
 800974c:	d09e      	beq.n	800968c <_strtod_l+0xc4>
 800974e:	2500      	movs	r5, #0
 8009750:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8009754:	f108 0201 	add.w	r2, r8, #1
 8009758:	9217      	str	r2, [sp, #92]	; 0x5c
 800975a:	f898 2001 	ldrb.w	r2, [r8, #1]
 800975e:	2a2b      	cmp	r2, #43	; 0x2b
 8009760:	d075      	beq.n	800984e <_strtod_l+0x286>
 8009762:	2a2d      	cmp	r2, #45	; 0x2d
 8009764:	d07b      	beq.n	800985e <_strtod_l+0x296>
 8009766:	f04f 0c00 	mov.w	ip, #0
 800976a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800976e:	2909      	cmp	r1, #9
 8009770:	f240 8082 	bls.w	8009878 <_strtod_l+0x2b0>
 8009774:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8009778:	2600      	movs	r6, #0
 800977a:	e09d      	b.n	80098b8 <_strtod_l+0x2f0>
 800977c:	2300      	movs	r3, #0
 800977e:	e7c4      	b.n	800970a <_strtod_l+0x142>
 8009780:	2f08      	cmp	r7, #8
 8009782:	bfd8      	it	le
 8009784:	9907      	ldrle	r1, [sp, #28]
 8009786:	f100 0001 	add.w	r0, r0, #1
 800978a:	bfda      	itte	le
 800978c:	fb02 3301 	mlale	r3, r2, r1, r3
 8009790:	9307      	strle	r3, [sp, #28]
 8009792:	fb02 3909 	mlagt	r9, r2, r9, r3
 8009796:	3701      	adds	r7, #1
 8009798:	9017      	str	r0, [sp, #92]	; 0x5c
 800979a:	e7bf      	b.n	800971c <_strtod_l+0x154>
 800979c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800979e:	195a      	adds	r2, r3, r5
 80097a0:	9217      	str	r2, [sp, #92]	; 0x5c
 80097a2:	5d5a      	ldrb	r2, [r3, r5]
 80097a4:	2f00      	cmp	r7, #0
 80097a6:	d037      	beq.n	8009818 <_strtod_l+0x250>
 80097a8:	9005      	str	r0, [sp, #20]
 80097aa:	463d      	mov	r5, r7
 80097ac:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80097b0:	2b09      	cmp	r3, #9
 80097b2:	d912      	bls.n	80097da <_strtod_l+0x212>
 80097b4:	2301      	movs	r3, #1
 80097b6:	e7c2      	b.n	800973e <_strtod_l+0x176>
 80097b8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80097ba:	1c5a      	adds	r2, r3, #1
 80097bc:	9217      	str	r2, [sp, #92]	; 0x5c
 80097be:	785a      	ldrb	r2, [r3, #1]
 80097c0:	3001      	adds	r0, #1
 80097c2:	2a30      	cmp	r2, #48	; 0x30
 80097c4:	d0f8      	beq.n	80097b8 <_strtod_l+0x1f0>
 80097c6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80097ca:	2b08      	cmp	r3, #8
 80097cc:	f200 84d9 	bhi.w	800a182 <_strtod_l+0xbba>
 80097d0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80097d2:	9005      	str	r0, [sp, #20]
 80097d4:	2000      	movs	r0, #0
 80097d6:	9308      	str	r3, [sp, #32]
 80097d8:	4605      	mov	r5, r0
 80097da:	3a30      	subs	r2, #48	; 0x30
 80097dc:	f100 0301 	add.w	r3, r0, #1
 80097e0:	d014      	beq.n	800980c <_strtod_l+0x244>
 80097e2:	9905      	ldr	r1, [sp, #20]
 80097e4:	4419      	add	r1, r3
 80097e6:	9105      	str	r1, [sp, #20]
 80097e8:	462b      	mov	r3, r5
 80097ea:	eb00 0e05 	add.w	lr, r0, r5
 80097ee:	210a      	movs	r1, #10
 80097f0:	4573      	cmp	r3, lr
 80097f2:	d113      	bne.n	800981c <_strtod_l+0x254>
 80097f4:	182b      	adds	r3, r5, r0
 80097f6:	2b08      	cmp	r3, #8
 80097f8:	f105 0501 	add.w	r5, r5, #1
 80097fc:	4405      	add	r5, r0
 80097fe:	dc1c      	bgt.n	800983a <_strtod_l+0x272>
 8009800:	9907      	ldr	r1, [sp, #28]
 8009802:	230a      	movs	r3, #10
 8009804:	fb03 2301 	mla	r3, r3, r1, r2
 8009808:	9307      	str	r3, [sp, #28]
 800980a:	2300      	movs	r3, #0
 800980c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800980e:	1c51      	adds	r1, r2, #1
 8009810:	9117      	str	r1, [sp, #92]	; 0x5c
 8009812:	7852      	ldrb	r2, [r2, #1]
 8009814:	4618      	mov	r0, r3
 8009816:	e7c9      	b.n	80097ac <_strtod_l+0x1e4>
 8009818:	4638      	mov	r0, r7
 800981a:	e7d2      	b.n	80097c2 <_strtod_l+0x1fa>
 800981c:	2b08      	cmp	r3, #8
 800981e:	dc04      	bgt.n	800982a <_strtod_l+0x262>
 8009820:	9e07      	ldr	r6, [sp, #28]
 8009822:	434e      	muls	r6, r1
 8009824:	9607      	str	r6, [sp, #28]
 8009826:	3301      	adds	r3, #1
 8009828:	e7e2      	b.n	80097f0 <_strtod_l+0x228>
 800982a:	f103 0c01 	add.w	ip, r3, #1
 800982e:	f1bc 0f10 	cmp.w	ip, #16
 8009832:	bfd8      	it	le
 8009834:	fb01 f909 	mulle.w	r9, r1, r9
 8009838:	e7f5      	b.n	8009826 <_strtod_l+0x25e>
 800983a:	2d10      	cmp	r5, #16
 800983c:	bfdc      	itt	le
 800983e:	230a      	movle	r3, #10
 8009840:	fb03 2909 	mlale	r9, r3, r9, r2
 8009844:	e7e1      	b.n	800980a <_strtod_l+0x242>
 8009846:	2300      	movs	r3, #0
 8009848:	9305      	str	r3, [sp, #20]
 800984a:	2301      	movs	r3, #1
 800984c:	e77c      	b.n	8009748 <_strtod_l+0x180>
 800984e:	f04f 0c00 	mov.w	ip, #0
 8009852:	f108 0202 	add.w	r2, r8, #2
 8009856:	9217      	str	r2, [sp, #92]	; 0x5c
 8009858:	f898 2002 	ldrb.w	r2, [r8, #2]
 800985c:	e785      	b.n	800976a <_strtod_l+0x1a2>
 800985e:	f04f 0c01 	mov.w	ip, #1
 8009862:	e7f6      	b.n	8009852 <_strtod_l+0x28a>
 8009864:	0800dd78 	.word	0x0800dd78
 8009868:	0800db30 	.word	0x0800db30
 800986c:	7ff00000 	.word	0x7ff00000
 8009870:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009872:	1c51      	adds	r1, r2, #1
 8009874:	9117      	str	r1, [sp, #92]	; 0x5c
 8009876:	7852      	ldrb	r2, [r2, #1]
 8009878:	2a30      	cmp	r2, #48	; 0x30
 800987a:	d0f9      	beq.n	8009870 <_strtod_l+0x2a8>
 800987c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8009880:	2908      	cmp	r1, #8
 8009882:	f63f af79 	bhi.w	8009778 <_strtod_l+0x1b0>
 8009886:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800988a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800988c:	9206      	str	r2, [sp, #24]
 800988e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009890:	1c51      	adds	r1, r2, #1
 8009892:	9117      	str	r1, [sp, #92]	; 0x5c
 8009894:	7852      	ldrb	r2, [r2, #1]
 8009896:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800989a:	2e09      	cmp	r6, #9
 800989c:	d937      	bls.n	800990e <_strtod_l+0x346>
 800989e:	9e06      	ldr	r6, [sp, #24]
 80098a0:	1b89      	subs	r1, r1, r6
 80098a2:	2908      	cmp	r1, #8
 80098a4:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80098a8:	dc02      	bgt.n	80098b0 <_strtod_l+0x2e8>
 80098aa:	4576      	cmp	r6, lr
 80098ac:	bfa8      	it	ge
 80098ae:	4676      	movge	r6, lr
 80098b0:	f1bc 0f00 	cmp.w	ip, #0
 80098b4:	d000      	beq.n	80098b8 <_strtod_l+0x2f0>
 80098b6:	4276      	negs	r6, r6
 80098b8:	2d00      	cmp	r5, #0
 80098ba:	d14d      	bne.n	8009958 <_strtod_l+0x390>
 80098bc:	9904      	ldr	r1, [sp, #16]
 80098be:	4301      	orrs	r1, r0
 80098c0:	f47f aec6 	bne.w	8009650 <_strtod_l+0x88>
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	f47f aee1 	bne.w	800968c <_strtod_l+0xc4>
 80098ca:	2a69      	cmp	r2, #105	; 0x69
 80098cc:	d027      	beq.n	800991e <_strtod_l+0x356>
 80098ce:	dc24      	bgt.n	800991a <_strtod_l+0x352>
 80098d0:	2a49      	cmp	r2, #73	; 0x49
 80098d2:	d024      	beq.n	800991e <_strtod_l+0x356>
 80098d4:	2a4e      	cmp	r2, #78	; 0x4e
 80098d6:	f47f aed9 	bne.w	800968c <_strtod_l+0xc4>
 80098da:	499f      	ldr	r1, [pc, #636]	; (8009b58 <_strtod_l+0x590>)
 80098dc:	a817      	add	r0, sp, #92	; 0x5c
 80098de:	f001 fe61 	bl	800b5a4 <__match>
 80098e2:	2800      	cmp	r0, #0
 80098e4:	f43f aed2 	beq.w	800968c <_strtod_l+0xc4>
 80098e8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80098ea:	781b      	ldrb	r3, [r3, #0]
 80098ec:	2b28      	cmp	r3, #40	; 0x28
 80098ee:	d12d      	bne.n	800994c <_strtod_l+0x384>
 80098f0:	499a      	ldr	r1, [pc, #616]	; (8009b5c <_strtod_l+0x594>)
 80098f2:	aa1a      	add	r2, sp, #104	; 0x68
 80098f4:	a817      	add	r0, sp, #92	; 0x5c
 80098f6:	f001 fe69 	bl	800b5cc <__hexnan>
 80098fa:	2805      	cmp	r0, #5
 80098fc:	d126      	bne.n	800994c <_strtod_l+0x384>
 80098fe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009900:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8009904:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8009908:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800990c:	e6a0      	b.n	8009650 <_strtod_l+0x88>
 800990e:	210a      	movs	r1, #10
 8009910:	fb01 2e0e 	mla	lr, r1, lr, r2
 8009914:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8009918:	e7b9      	b.n	800988e <_strtod_l+0x2c6>
 800991a:	2a6e      	cmp	r2, #110	; 0x6e
 800991c:	e7db      	b.n	80098d6 <_strtod_l+0x30e>
 800991e:	4990      	ldr	r1, [pc, #576]	; (8009b60 <_strtod_l+0x598>)
 8009920:	a817      	add	r0, sp, #92	; 0x5c
 8009922:	f001 fe3f 	bl	800b5a4 <__match>
 8009926:	2800      	cmp	r0, #0
 8009928:	f43f aeb0 	beq.w	800968c <_strtod_l+0xc4>
 800992c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800992e:	498d      	ldr	r1, [pc, #564]	; (8009b64 <_strtod_l+0x59c>)
 8009930:	3b01      	subs	r3, #1
 8009932:	a817      	add	r0, sp, #92	; 0x5c
 8009934:	9317      	str	r3, [sp, #92]	; 0x5c
 8009936:	f001 fe35 	bl	800b5a4 <__match>
 800993a:	b910      	cbnz	r0, 8009942 <_strtod_l+0x37a>
 800993c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800993e:	3301      	adds	r3, #1
 8009940:	9317      	str	r3, [sp, #92]	; 0x5c
 8009942:	f8df b230 	ldr.w	fp, [pc, #560]	; 8009b74 <_strtod_l+0x5ac>
 8009946:	f04f 0a00 	mov.w	sl, #0
 800994a:	e681      	b.n	8009650 <_strtod_l+0x88>
 800994c:	4886      	ldr	r0, [pc, #536]	; (8009b68 <_strtod_l+0x5a0>)
 800994e:	f003 f953 	bl	800cbf8 <nan>
 8009952:	ec5b ab10 	vmov	sl, fp, d0
 8009956:	e67b      	b.n	8009650 <_strtod_l+0x88>
 8009958:	9b05      	ldr	r3, [sp, #20]
 800995a:	9807      	ldr	r0, [sp, #28]
 800995c:	1af3      	subs	r3, r6, r3
 800995e:	2f00      	cmp	r7, #0
 8009960:	bf08      	it	eq
 8009962:	462f      	moveq	r7, r5
 8009964:	2d10      	cmp	r5, #16
 8009966:	9306      	str	r3, [sp, #24]
 8009968:	46a8      	mov	r8, r5
 800996a:	bfa8      	it	ge
 800996c:	f04f 0810 	movge.w	r8, #16
 8009970:	f7f6 fde8 	bl	8000544 <__aeabi_ui2d>
 8009974:	2d09      	cmp	r5, #9
 8009976:	4682      	mov	sl, r0
 8009978:	468b      	mov	fp, r1
 800997a:	dd13      	ble.n	80099a4 <_strtod_l+0x3dc>
 800997c:	4b7b      	ldr	r3, [pc, #492]	; (8009b6c <_strtod_l+0x5a4>)
 800997e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8009982:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8009986:	f7f6 fe57 	bl	8000638 <__aeabi_dmul>
 800998a:	4682      	mov	sl, r0
 800998c:	4648      	mov	r0, r9
 800998e:	468b      	mov	fp, r1
 8009990:	f7f6 fdd8 	bl	8000544 <__aeabi_ui2d>
 8009994:	4602      	mov	r2, r0
 8009996:	460b      	mov	r3, r1
 8009998:	4650      	mov	r0, sl
 800999a:	4659      	mov	r1, fp
 800999c:	f7f6 fc96 	bl	80002cc <__adddf3>
 80099a0:	4682      	mov	sl, r0
 80099a2:	468b      	mov	fp, r1
 80099a4:	2d0f      	cmp	r5, #15
 80099a6:	dc38      	bgt.n	8009a1a <_strtod_l+0x452>
 80099a8:	9b06      	ldr	r3, [sp, #24]
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	f43f ae50 	beq.w	8009650 <_strtod_l+0x88>
 80099b0:	dd24      	ble.n	80099fc <_strtod_l+0x434>
 80099b2:	2b16      	cmp	r3, #22
 80099b4:	dc0b      	bgt.n	80099ce <_strtod_l+0x406>
 80099b6:	496d      	ldr	r1, [pc, #436]	; (8009b6c <_strtod_l+0x5a4>)
 80099b8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80099bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80099c0:	4652      	mov	r2, sl
 80099c2:	465b      	mov	r3, fp
 80099c4:	f7f6 fe38 	bl	8000638 <__aeabi_dmul>
 80099c8:	4682      	mov	sl, r0
 80099ca:	468b      	mov	fp, r1
 80099cc:	e640      	b.n	8009650 <_strtod_l+0x88>
 80099ce:	9a06      	ldr	r2, [sp, #24]
 80099d0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80099d4:	4293      	cmp	r3, r2
 80099d6:	db20      	blt.n	8009a1a <_strtod_l+0x452>
 80099d8:	4c64      	ldr	r4, [pc, #400]	; (8009b6c <_strtod_l+0x5a4>)
 80099da:	f1c5 050f 	rsb	r5, r5, #15
 80099de:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80099e2:	4652      	mov	r2, sl
 80099e4:	465b      	mov	r3, fp
 80099e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80099ea:	f7f6 fe25 	bl	8000638 <__aeabi_dmul>
 80099ee:	9b06      	ldr	r3, [sp, #24]
 80099f0:	1b5d      	subs	r5, r3, r5
 80099f2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80099f6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80099fa:	e7e3      	b.n	80099c4 <_strtod_l+0x3fc>
 80099fc:	9b06      	ldr	r3, [sp, #24]
 80099fe:	3316      	adds	r3, #22
 8009a00:	db0b      	blt.n	8009a1a <_strtod_l+0x452>
 8009a02:	9b05      	ldr	r3, [sp, #20]
 8009a04:	1b9e      	subs	r6, r3, r6
 8009a06:	4b59      	ldr	r3, [pc, #356]	; (8009b6c <_strtod_l+0x5a4>)
 8009a08:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8009a0c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009a10:	4650      	mov	r0, sl
 8009a12:	4659      	mov	r1, fp
 8009a14:	f7f6 ff3a 	bl	800088c <__aeabi_ddiv>
 8009a18:	e7d6      	b.n	80099c8 <_strtod_l+0x400>
 8009a1a:	9b06      	ldr	r3, [sp, #24]
 8009a1c:	eba5 0808 	sub.w	r8, r5, r8
 8009a20:	4498      	add	r8, r3
 8009a22:	f1b8 0f00 	cmp.w	r8, #0
 8009a26:	dd74      	ble.n	8009b12 <_strtod_l+0x54a>
 8009a28:	f018 030f 	ands.w	r3, r8, #15
 8009a2c:	d00a      	beq.n	8009a44 <_strtod_l+0x47c>
 8009a2e:	494f      	ldr	r1, [pc, #316]	; (8009b6c <_strtod_l+0x5a4>)
 8009a30:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009a34:	4652      	mov	r2, sl
 8009a36:	465b      	mov	r3, fp
 8009a38:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009a3c:	f7f6 fdfc 	bl	8000638 <__aeabi_dmul>
 8009a40:	4682      	mov	sl, r0
 8009a42:	468b      	mov	fp, r1
 8009a44:	f038 080f 	bics.w	r8, r8, #15
 8009a48:	d04f      	beq.n	8009aea <_strtod_l+0x522>
 8009a4a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8009a4e:	dd22      	ble.n	8009a96 <_strtod_l+0x4ce>
 8009a50:	2500      	movs	r5, #0
 8009a52:	462e      	mov	r6, r5
 8009a54:	9507      	str	r5, [sp, #28]
 8009a56:	9505      	str	r5, [sp, #20]
 8009a58:	2322      	movs	r3, #34	; 0x22
 8009a5a:	f8df b118 	ldr.w	fp, [pc, #280]	; 8009b74 <_strtod_l+0x5ac>
 8009a5e:	6023      	str	r3, [r4, #0]
 8009a60:	f04f 0a00 	mov.w	sl, #0
 8009a64:	9b07      	ldr	r3, [sp, #28]
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	f43f adf2 	beq.w	8009650 <_strtod_l+0x88>
 8009a6c:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009a6e:	4620      	mov	r0, r4
 8009a70:	f001 feb8 	bl	800b7e4 <_Bfree>
 8009a74:	9905      	ldr	r1, [sp, #20]
 8009a76:	4620      	mov	r0, r4
 8009a78:	f001 feb4 	bl	800b7e4 <_Bfree>
 8009a7c:	4631      	mov	r1, r6
 8009a7e:	4620      	mov	r0, r4
 8009a80:	f001 feb0 	bl	800b7e4 <_Bfree>
 8009a84:	9907      	ldr	r1, [sp, #28]
 8009a86:	4620      	mov	r0, r4
 8009a88:	f001 feac 	bl	800b7e4 <_Bfree>
 8009a8c:	4629      	mov	r1, r5
 8009a8e:	4620      	mov	r0, r4
 8009a90:	f001 fea8 	bl	800b7e4 <_Bfree>
 8009a94:	e5dc      	b.n	8009650 <_strtod_l+0x88>
 8009a96:	4b36      	ldr	r3, [pc, #216]	; (8009b70 <_strtod_l+0x5a8>)
 8009a98:	9304      	str	r3, [sp, #16]
 8009a9a:	2300      	movs	r3, #0
 8009a9c:	ea4f 1828 	mov.w	r8, r8, asr #4
 8009aa0:	4650      	mov	r0, sl
 8009aa2:	4659      	mov	r1, fp
 8009aa4:	4699      	mov	r9, r3
 8009aa6:	f1b8 0f01 	cmp.w	r8, #1
 8009aaa:	dc21      	bgt.n	8009af0 <_strtod_l+0x528>
 8009aac:	b10b      	cbz	r3, 8009ab2 <_strtod_l+0x4ea>
 8009aae:	4682      	mov	sl, r0
 8009ab0:	468b      	mov	fp, r1
 8009ab2:	4b2f      	ldr	r3, [pc, #188]	; (8009b70 <_strtod_l+0x5a8>)
 8009ab4:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8009ab8:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8009abc:	4652      	mov	r2, sl
 8009abe:	465b      	mov	r3, fp
 8009ac0:	e9d9 0100 	ldrd	r0, r1, [r9]
 8009ac4:	f7f6 fdb8 	bl	8000638 <__aeabi_dmul>
 8009ac8:	4b2a      	ldr	r3, [pc, #168]	; (8009b74 <_strtod_l+0x5ac>)
 8009aca:	460a      	mov	r2, r1
 8009acc:	400b      	ands	r3, r1
 8009ace:	492a      	ldr	r1, [pc, #168]	; (8009b78 <_strtod_l+0x5b0>)
 8009ad0:	428b      	cmp	r3, r1
 8009ad2:	4682      	mov	sl, r0
 8009ad4:	d8bc      	bhi.n	8009a50 <_strtod_l+0x488>
 8009ad6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8009ada:	428b      	cmp	r3, r1
 8009adc:	bf86      	itte	hi
 8009ade:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8009b7c <_strtod_l+0x5b4>
 8009ae2:	f04f 3aff 	movhi.w	sl, #4294967295
 8009ae6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8009aea:	2300      	movs	r3, #0
 8009aec:	9304      	str	r3, [sp, #16]
 8009aee:	e084      	b.n	8009bfa <_strtod_l+0x632>
 8009af0:	f018 0f01 	tst.w	r8, #1
 8009af4:	d005      	beq.n	8009b02 <_strtod_l+0x53a>
 8009af6:	9b04      	ldr	r3, [sp, #16]
 8009af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009afc:	f7f6 fd9c 	bl	8000638 <__aeabi_dmul>
 8009b00:	2301      	movs	r3, #1
 8009b02:	9a04      	ldr	r2, [sp, #16]
 8009b04:	3208      	adds	r2, #8
 8009b06:	f109 0901 	add.w	r9, r9, #1
 8009b0a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8009b0e:	9204      	str	r2, [sp, #16]
 8009b10:	e7c9      	b.n	8009aa6 <_strtod_l+0x4de>
 8009b12:	d0ea      	beq.n	8009aea <_strtod_l+0x522>
 8009b14:	f1c8 0800 	rsb	r8, r8, #0
 8009b18:	f018 020f 	ands.w	r2, r8, #15
 8009b1c:	d00a      	beq.n	8009b34 <_strtod_l+0x56c>
 8009b1e:	4b13      	ldr	r3, [pc, #76]	; (8009b6c <_strtod_l+0x5a4>)
 8009b20:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009b24:	4650      	mov	r0, sl
 8009b26:	4659      	mov	r1, fp
 8009b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b2c:	f7f6 feae 	bl	800088c <__aeabi_ddiv>
 8009b30:	4682      	mov	sl, r0
 8009b32:	468b      	mov	fp, r1
 8009b34:	ea5f 1828 	movs.w	r8, r8, asr #4
 8009b38:	d0d7      	beq.n	8009aea <_strtod_l+0x522>
 8009b3a:	f1b8 0f1f 	cmp.w	r8, #31
 8009b3e:	dd1f      	ble.n	8009b80 <_strtod_l+0x5b8>
 8009b40:	2500      	movs	r5, #0
 8009b42:	462e      	mov	r6, r5
 8009b44:	9507      	str	r5, [sp, #28]
 8009b46:	9505      	str	r5, [sp, #20]
 8009b48:	2322      	movs	r3, #34	; 0x22
 8009b4a:	f04f 0a00 	mov.w	sl, #0
 8009b4e:	f04f 0b00 	mov.w	fp, #0
 8009b52:	6023      	str	r3, [r4, #0]
 8009b54:	e786      	b.n	8009a64 <_strtod_l+0x49c>
 8009b56:	bf00      	nop
 8009b58:	0800db05 	.word	0x0800db05
 8009b5c:	0800db44 	.word	0x0800db44
 8009b60:	0800dafd 	.word	0x0800dafd
 8009b64:	0800dc84 	.word	0x0800dc84
 8009b68:	0800df4b 	.word	0x0800df4b
 8009b6c:	0800de10 	.word	0x0800de10
 8009b70:	0800dde8 	.word	0x0800dde8
 8009b74:	7ff00000 	.word	0x7ff00000
 8009b78:	7ca00000 	.word	0x7ca00000
 8009b7c:	7fefffff 	.word	0x7fefffff
 8009b80:	f018 0310 	ands.w	r3, r8, #16
 8009b84:	bf18      	it	ne
 8009b86:	236a      	movne	r3, #106	; 0x6a
 8009b88:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8009f38 <_strtod_l+0x970>
 8009b8c:	9304      	str	r3, [sp, #16]
 8009b8e:	4650      	mov	r0, sl
 8009b90:	4659      	mov	r1, fp
 8009b92:	2300      	movs	r3, #0
 8009b94:	f018 0f01 	tst.w	r8, #1
 8009b98:	d004      	beq.n	8009ba4 <_strtod_l+0x5dc>
 8009b9a:	e9d9 2300 	ldrd	r2, r3, [r9]
 8009b9e:	f7f6 fd4b 	bl	8000638 <__aeabi_dmul>
 8009ba2:	2301      	movs	r3, #1
 8009ba4:	ea5f 0868 	movs.w	r8, r8, asr #1
 8009ba8:	f109 0908 	add.w	r9, r9, #8
 8009bac:	d1f2      	bne.n	8009b94 <_strtod_l+0x5cc>
 8009bae:	b10b      	cbz	r3, 8009bb4 <_strtod_l+0x5ec>
 8009bb0:	4682      	mov	sl, r0
 8009bb2:	468b      	mov	fp, r1
 8009bb4:	9b04      	ldr	r3, [sp, #16]
 8009bb6:	b1c3      	cbz	r3, 8009bea <_strtod_l+0x622>
 8009bb8:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8009bbc:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	4659      	mov	r1, fp
 8009bc4:	dd11      	ble.n	8009bea <_strtod_l+0x622>
 8009bc6:	2b1f      	cmp	r3, #31
 8009bc8:	f340 8124 	ble.w	8009e14 <_strtod_l+0x84c>
 8009bcc:	2b34      	cmp	r3, #52	; 0x34
 8009bce:	bfde      	ittt	le
 8009bd0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8009bd4:	f04f 33ff 	movle.w	r3, #4294967295
 8009bd8:	fa03 f202 	lslle.w	r2, r3, r2
 8009bdc:	f04f 0a00 	mov.w	sl, #0
 8009be0:	bfcc      	ite	gt
 8009be2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8009be6:	ea02 0b01 	andle.w	fp, r2, r1
 8009bea:	2200      	movs	r2, #0
 8009bec:	2300      	movs	r3, #0
 8009bee:	4650      	mov	r0, sl
 8009bf0:	4659      	mov	r1, fp
 8009bf2:	f7f6 ff89 	bl	8000b08 <__aeabi_dcmpeq>
 8009bf6:	2800      	cmp	r0, #0
 8009bf8:	d1a2      	bne.n	8009b40 <_strtod_l+0x578>
 8009bfa:	9b07      	ldr	r3, [sp, #28]
 8009bfc:	9300      	str	r3, [sp, #0]
 8009bfe:	9908      	ldr	r1, [sp, #32]
 8009c00:	462b      	mov	r3, r5
 8009c02:	463a      	mov	r2, r7
 8009c04:	4620      	mov	r0, r4
 8009c06:	f001 fe55 	bl	800b8b4 <__s2b>
 8009c0a:	9007      	str	r0, [sp, #28]
 8009c0c:	2800      	cmp	r0, #0
 8009c0e:	f43f af1f 	beq.w	8009a50 <_strtod_l+0x488>
 8009c12:	9b05      	ldr	r3, [sp, #20]
 8009c14:	1b9e      	subs	r6, r3, r6
 8009c16:	9b06      	ldr	r3, [sp, #24]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	bfb4      	ite	lt
 8009c1c:	4633      	movlt	r3, r6
 8009c1e:	2300      	movge	r3, #0
 8009c20:	930c      	str	r3, [sp, #48]	; 0x30
 8009c22:	9b06      	ldr	r3, [sp, #24]
 8009c24:	2500      	movs	r5, #0
 8009c26:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009c2a:	9312      	str	r3, [sp, #72]	; 0x48
 8009c2c:	462e      	mov	r6, r5
 8009c2e:	9b07      	ldr	r3, [sp, #28]
 8009c30:	4620      	mov	r0, r4
 8009c32:	6859      	ldr	r1, [r3, #4]
 8009c34:	f001 fd96 	bl	800b764 <_Balloc>
 8009c38:	9005      	str	r0, [sp, #20]
 8009c3a:	2800      	cmp	r0, #0
 8009c3c:	f43f af0c 	beq.w	8009a58 <_strtod_l+0x490>
 8009c40:	9b07      	ldr	r3, [sp, #28]
 8009c42:	691a      	ldr	r2, [r3, #16]
 8009c44:	3202      	adds	r2, #2
 8009c46:	f103 010c 	add.w	r1, r3, #12
 8009c4a:	0092      	lsls	r2, r2, #2
 8009c4c:	300c      	adds	r0, #12
 8009c4e:	f7fe fd63 	bl	8008718 <memcpy>
 8009c52:	ec4b ab10 	vmov	d0, sl, fp
 8009c56:	aa1a      	add	r2, sp, #104	; 0x68
 8009c58:	a919      	add	r1, sp, #100	; 0x64
 8009c5a:	4620      	mov	r0, r4
 8009c5c:	f002 f970 	bl	800bf40 <__d2b>
 8009c60:	ec4b ab18 	vmov	d8, sl, fp
 8009c64:	9018      	str	r0, [sp, #96]	; 0x60
 8009c66:	2800      	cmp	r0, #0
 8009c68:	f43f aef6 	beq.w	8009a58 <_strtod_l+0x490>
 8009c6c:	2101      	movs	r1, #1
 8009c6e:	4620      	mov	r0, r4
 8009c70:	f001 feba 	bl	800b9e8 <__i2b>
 8009c74:	4606      	mov	r6, r0
 8009c76:	2800      	cmp	r0, #0
 8009c78:	f43f aeee 	beq.w	8009a58 <_strtod_l+0x490>
 8009c7c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009c7e:	9904      	ldr	r1, [sp, #16]
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	bfab      	itete	ge
 8009c84:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8009c86:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8009c88:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8009c8a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8009c8e:	bfac      	ite	ge
 8009c90:	eb03 0902 	addge.w	r9, r3, r2
 8009c94:	1ad7      	sublt	r7, r2, r3
 8009c96:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009c98:	eba3 0801 	sub.w	r8, r3, r1
 8009c9c:	4490      	add	r8, r2
 8009c9e:	4ba1      	ldr	r3, [pc, #644]	; (8009f24 <_strtod_l+0x95c>)
 8009ca0:	f108 38ff 	add.w	r8, r8, #4294967295
 8009ca4:	4598      	cmp	r8, r3
 8009ca6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009caa:	f280 80c7 	bge.w	8009e3c <_strtod_l+0x874>
 8009cae:	eba3 0308 	sub.w	r3, r3, r8
 8009cb2:	2b1f      	cmp	r3, #31
 8009cb4:	eba2 0203 	sub.w	r2, r2, r3
 8009cb8:	f04f 0101 	mov.w	r1, #1
 8009cbc:	f300 80b1 	bgt.w	8009e22 <_strtod_l+0x85a>
 8009cc0:	fa01 f303 	lsl.w	r3, r1, r3
 8009cc4:	930d      	str	r3, [sp, #52]	; 0x34
 8009cc6:	2300      	movs	r3, #0
 8009cc8:	9308      	str	r3, [sp, #32]
 8009cca:	eb09 0802 	add.w	r8, r9, r2
 8009cce:	9b04      	ldr	r3, [sp, #16]
 8009cd0:	45c1      	cmp	r9, r8
 8009cd2:	4417      	add	r7, r2
 8009cd4:	441f      	add	r7, r3
 8009cd6:	464b      	mov	r3, r9
 8009cd8:	bfa8      	it	ge
 8009cda:	4643      	movge	r3, r8
 8009cdc:	42bb      	cmp	r3, r7
 8009cde:	bfa8      	it	ge
 8009ce0:	463b      	movge	r3, r7
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	bfc2      	ittt	gt
 8009ce6:	eba8 0803 	subgt.w	r8, r8, r3
 8009cea:	1aff      	subgt	r7, r7, r3
 8009cec:	eba9 0903 	subgt.w	r9, r9, r3
 8009cf0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	dd17      	ble.n	8009d26 <_strtod_l+0x75e>
 8009cf6:	4631      	mov	r1, r6
 8009cf8:	461a      	mov	r2, r3
 8009cfa:	4620      	mov	r0, r4
 8009cfc:	f001 ff34 	bl	800bb68 <__pow5mult>
 8009d00:	4606      	mov	r6, r0
 8009d02:	2800      	cmp	r0, #0
 8009d04:	f43f aea8 	beq.w	8009a58 <_strtod_l+0x490>
 8009d08:	4601      	mov	r1, r0
 8009d0a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009d0c:	4620      	mov	r0, r4
 8009d0e:	f001 fe81 	bl	800ba14 <__multiply>
 8009d12:	900b      	str	r0, [sp, #44]	; 0x2c
 8009d14:	2800      	cmp	r0, #0
 8009d16:	f43f ae9f 	beq.w	8009a58 <_strtod_l+0x490>
 8009d1a:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009d1c:	4620      	mov	r0, r4
 8009d1e:	f001 fd61 	bl	800b7e4 <_Bfree>
 8009d22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d24:	9318      	str	r3, [sp, #96]	; 0x60
 8009d26:	f1b8 0f00 	cmp.w	r8, #0
 8009d2a:	f300 808c 	bgt.w	8009e46 <_strtod_l+0x87e>
 8009d2e:	9b06      	ldr	r3, [sp, #24]
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	dd08      	ble.n	8009d46 <_strtod_l+0x77e>
 8009d34:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009d36:	9905      	ldr	r1, [sp, #20]
 8009d38:	4620      	mov	r0, r4
 8009d3a:	f001 ff15 	bl	800bb68 <__pow5mult>
 8009d3e:	9005      	str	r0, [sp, #20]
 8009d40:	2800      	cmp	r0, #0
 8009d42:	f43f ae89 	beq.w	8009a58 <_strtod_l+0x490>
 8009d46:	2f00      	cmp	r7, #0
 8009d48:	dd08      	ble.n	8009d5c <_strtod_l+0x794>
 8009d4a:	9905      	ldr	r1, [sp, #20]
 8009d4c:	463a      	mov	r2, r7
 8009d4e:	4620      	mov	r0, r4
 8009d50:	f001 ff64 	bl	800bc1c <__lshift>
 8009d54:	9005      	str	r0, [sp, #20]
 8009d56:	2800      	cmp	r0, #0
 8009d58:	f43f ae7e 	beq.w	8009a58 <_strtod_l+0x490>
 8009d5c:	f1b9 0f00 	cmp.w	r9, #0
 8009d60:	dd08      	ble.n	8009d74 <_strtod_l+0x7ac>
 8009d62:	4631      	mov	r1, r6
 8009d64:	464a      	mov	r2, r9
 8009d66:	4620      	mov	r0, r4
 8009d68:	f001 ff58 	bl	800bc1c <__lshift>
 8009d6c:	4606      	mov	r6, r0
 8009d6e:	2800      	cmp	r0, #0
 8009d70:	f43f ae72 	beq.w	8009a58 <_strtod_l+0x490>
 8009d74:	9a05      	ldr	r2, [sp, #20]
 8009d76:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009d78:	4620      	mov	r0, r4
 8009d7a:	f001 ffdb 	bl	800bd34 <__mdiff>
 8009d7e:	4605      	mov	r5, r0
 8009d80:	2800      	cmp	r0, #0
 8009d82:	f43f ae69 	beq.w	8009a58 <_strtod_l+0x490>
 8009d86:	68c3      	ldr	r3, [r0, #12]
 8009d88:	930b      	str	r3, [sp, #44]	; 0x2c
 8009d8a:	2300      	movs	r3, #0
 8009d8c:	60c3      	str	r3, [r0, #12]
 8009d8e:	4631      	mov	r1, r6
 8009d90:	f001 ffb4 	bl	800bcfc <__mcmp>
 8009d94:	2800      	cmp	r0, #0
 8009d96:	da60      	bge.n	8009e5a <_strtod_l+0x892>
 8009d98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d9a:	ea53 030a 	orrs.w	r3, r3, sl
 8009d9e:	f040 8082 	bne.w	8009ea6 <_strtod_l+0x8de>
 8009da2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d17d      	bne.n	8009ea6 <_strtod_l+0x8de>
 8009daa:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009dae:	0d1b      	lsrs	r3, r3, #20
 8009db0:	051b      	lsls	r3, r3, #20
 8009db2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009db6:	d976      	bls.n	8009ea6 <_strtod_l+0x8de>
 8009db8:	696b      	ldr	r3, [r5, #20]
 8009dba:	b913      	cbnz	r3, 8009dc2 <_strtod_l+0x7fa>
 8009dbc:	692b      	ldr	r3, [r5, #16]
 8009dbe:	2b01      	cmp	r3, #1
 8009dc0:	dd71      	ble.n	8009ea6 <_strtod_l+0x8de>
 8009dc2:	4629      	mov	r1, r5
 8009dc4:	2201      	movs	r2, #1
 8009dc6:	4620      	mov	r0, r4
 8009dc8:	f001 ff28 	bl	800bc1c <__lshift>
 8009dcc:	4631      	mov	r1, r6
 8009dce:	4605      	mov	r5, r0
 8009dd0:	f001 ff94 	bl	800bcfc <__mcmp>
 8009dd4:	2800      	cmp	r0, #0
 8009dd6:	dd66      	ble.n	8009ea6 <_strtod_l+0x8de>
 8009dd8:	9904      	ldr	r1, [sp, #16]
 8009dda:	4a53      	ldr	r2, [pc, #332]	; (8009f28 <_strtod_l+0x960>)
 8009ddc:	465b      	mov	r3, fp
 8009dde:	2900      	cmp	r1, #0
 8009de0:	f000 8081 	beq.w	8009ee6 <_strtod_l+0x91e>
 8009de4:	ea02 010b 	and.w	r1, r2, fp
 8009de8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009dec:	dc7b      	bgt.n	8009ee6 <_strtod_l+0x91e>
 8009dee:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009df2:	f77f aea9 	ble.w	8009b48 <_strtod_l+0x580>
 8009df6:	4b4d      	ldr	r3, [pc, #308]	; (8009f2c <_strtod_l+0x964>)
 8009df8:	4650      	mov	r0, sl
 8009dfa:	4659      	mov	r1, fp
 8009dfc:	2200      	movs	r2, #0
 8009dfe:	f7f6 fc1b 	bl	8000638 <__aeabi_dmul>
 8009e02:	460b      	mov	r3, r1
 8009e04:	4303      	orrs	r3, r0
 8009e06:	bf08      	it	eq
 8009e08:	2322      	moveq	r3, #34	; 0x22
 8009e0a:	4682      	mov	sl, r0
 8009e0c:	468b      	mov	fp, r1
 8009e0e:	bf08      	it	eq
 8009e10:	6023      	streq	r3, [r4, #0]
 8009e12:	e62b      	b.n	8009a6c <_strtod_l+0x4a4>
 8009e14:	f04f 32ff 	mov.w	r2, #4294967295
 8009e18:	fa02 f303 	lsl.w	r3, r2, r3
 8009e1c:	ea03 0a0a 	and.w	sl, r3, sl
 8009e20:	e6e3      	b.n	8009bea <_strtod_l+0x622>
 8009e22:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8009e26:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8009e2a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8009e2e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8009e32:	fa01 f308 	lsl.w	r3, r1, r8
 8009e36:	9308      	str	r3, [sp, #32]
 8009e38:	910d      	str	r1, [sp, #52]	; 0x34
 8009e3a:	e746      	b.n	8009cca <_strtod_l+0x702>
 8009e3c:	2300      	movs	r3, #0
 8009e3e:	9308      	str	r3, [sp, #32]
 8009e40:	2301      	movs	r3, #1
 8009e42:	930d      	str	r3, [sp, #52]	; 0x34
 8009e44:	e741      	b.n	8009cca <_strtod_l+0x702>
 8009e46:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009e48:	4642      	mov	r2, r8
 8009e4a:	4620      	mov	r0, r4
 8009e4c:	f001 fee6 	bl	800bc1c <__lshift>
 8009e50:	9018      	str	r0, [sp, #96]	; 0x60
 8009e52:	2800      	cmp	r0, #0
 8009e54:	f47f af6b 	bne.w	8009d2e <_strtod_l+0x766>
 8009e58:	e5fe      	b.n	8009a58 <_strtod_l+0x490>
 8009e5a:	465f      	mov	r7, fp
 8009e5c:	d16e      	bne.n	8009f3c <_strtod_l+0x974>
 8009e5e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009e60:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009e64:	b342      	cbz	r2, 8009eb8 <_strtod_l+0x8f0>
 8009e66:	4a32      	ldr	r2, [pc, #200]	; (8009f30 <_strtod_l+0x968>)
 8009e68:	4293      	cmp	r3, r2
 8009e6a:	d128      	bne.n	8009ebe <_strtod_l+0x8f6>
 8009e6c:	9b04      	ldr	r3, [sp, #16]
 8009e6e:	4651      	mov	r1, sl
 8009e70:	b1eb      	cbz	r3, 8009eae <_strtod_l+0x8e6>
 8009e72:	4b2d      	ldr	r3, [pc, #180]	; (8009f28 <_strtod_l+0x960>)
 8009e74:	403b      	ands	r3, r7
 8009e76:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009e7a:	f04f 32ff 	mov.w	r2, #4294967295
 8009e7e:	d819      	bhi.n	8009eb4 <_strtod_l+0x8ec>
 8009e80:	0d1b      	lsrs	r3, r3, #20
 8009e82:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009e86:	fa02 f303 	lsl.w	r3, r2, r3
 8009e8a:	4299      	cmp	r1, r3
 8009e8c:	d117      	bne.n	8009ebe <_strtod_l+0x8f6>
 8009e8e:	4b29      	ldr	r3, [pc, #164]	; (8009f34 <_strtod_l+0x96c>)
 8009e90:	429f      	cmp	r7, r3
 8009e92:	d102      	bne.n	8009e9a <_strtod_l+0x8d2>
 8009e94:	3101      	adds	r1, #1
 8009e96:	f43f addf 	beq.w	8009a58 <_strtod_l+0x490>
 8009e9a:	4b23      	ldr	r3, [pc, #140]	; (8009f28 <_strtod_l+0x960>)
 8009e9c:	403b      	ands	r3, r7
 8009e9e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8009ea2:	f04f 0a00 	mov.w	sl, #0
 8009ea6:	9b04      	ldr	r3, [sp, #16]
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d1a4      	bne.n	8009df6 <_strtod_l+0x82e>
 8009eac:	e5de      	b.n	8009a6c <_strtod_l+0x4a4>
 8009eae:	f04f 33ff 	mov.w	r3, #4294967295
 8009eb2:	e7ea      	b.n	8009e8a <_strtod_l+0x8c2>
 8009eb4:	4613      	mov	r3, r2
 8009eb6:	e7e8      	b.n	8009e8a <_strtod_l+0x8c2>
 8009eb8:	ea53 030a 	orrs.w	r3, r3, sl
 8009ebc:	d08c      	beq.n	8009dd8 <_strtod_l+0x810>
 8009ebe:	9b08      	ldr	r3, [sp, #32]
 8009ec0:	b1db      	cbz	r3, 8009efa <_strtod_l+0x932>
 8009ec2:	423b      	tst	r3, r7
 8009ec4:	d0ef      	beq.n	8009ea6 <_strtod_l+0x8de>
 8009ec6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009ec8:	9a04      	ldr	r2, [sp, #16]
 8009eca:	4650      	mov	r0, sl
 8009ecc:	4659      	mov	r1, fp
 8009ece:	b1c3      	cbz	r3, 8009f02 <_strtod_l+0x93a>
 8009ed0:	f7ff fb5d 	bl	800958e <sulp>
 8009ed4:	4602      	mov	r2, r0
 8009ed6:	460b      	mov	r3, r1
 8009ed8:	ec51 0b18 	vmov	r0, r1, d8
 8009edc:	f7f6 f9f6 	bl	80002cc <__adddf3>
 8009ee0:	4682      	mov	sl, r0
 8009ee2:	468b      	mov	fp, r1
 8009ee4:	e7df      	b.n	8009ea6 <_strtod_l+0x8de>
 8009ee6:	4013      	ands	r3, r2
 8009ee8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009eec:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009ef0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009ef4:	f04f 3aff 	mov.w	sl, #4294967295
 8009ef8:	e7d5      	b.n	8009ea6 <_strtod_l+0x8de>
 8009efa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009efc:	ea13 0f0a 	tst.w	r3, sl
 8009f00:	e7e0      	b.n	8009ec4 <_strtod_l+0x8fc>
 8009f02:	f7ff fb44 	bl	800958e <sulp>
 8009f06:	4602      	mov	r2, r0
 8009f08:	460b      	mov	r3, r1
 8009f0a:	ec51 0b18 	vmov	r0, r1, d8
 8009f0e:	f7f6 f9db 	bl	80002c8 <__aeabi_dsub>
 8009f12:	2200      	movs	r2, #0
 8009f14:	2300      	movs	r3, #0
 8009f16:	4682      	mov	sl, r0
 8009f18:	468b      	mov	fp, r1
 8009f1a:	f7f6 fdf5 	bl	8000b08 <__aeabi_dcmpeq>
 8009f1e:	2800      	cmp	r0, #0
 8009f20:	d0c1      	beq.n	8009ea6 <_strtod_l+0x8de>
 8009f22:	e611      	b.n	8009b48 <_strtod_l+0x580>
 8009f24:	fffffc02 	.word	0xfffffc02
 8009f28:	7ff00000 	.word	0x7ff00000
 8009f2c:	39500000 	.word	0x39500000
 8009f30:	000fffff 	.word	0x000fffff
 8009f34:	7fefffff 	.word	0x7fefffff
 8009f38:	0800db58 	.word	0x0800db58
 8009f3c:	4631      	mov	r1, r6
 8009f3e:	4628      	mov	r0, r5
 8009f40:	f002 f85a 	bl	800bff8 <__ratio>
 8009f44:	ec59 8b10 	vmov	r8, r9, d0
 8009f48:	ee10 0a10 	vmov	r0, s0
 8009f4c:	2200      	movs	r2, #0
 8009f4e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009f52:	4649      	mov	r1, r9
 8009f54:	f7f6 fdec 	bl	8000b30 <__aeabi_dcmple>
 8009f58:	2800      	cmp	r0, #0
 8009f5a:	d07a      	beq.n	800a052 <_strtod_l+0xa8a>
 8009f5c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d04a      	beq.n	8009ff8 <_strtod_l+0xa30>
 8009f62:	4b95      	ldr	r3, [pc, #596]	; (800a1b8 <_strtod_l+0xbf0>)
 8009f64:	2200      	movs	r2, #0
 8009f66:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009f6a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800a1b8 <_strtod_l+0xbf0>
 8009f6e:	f04f 0800 	mov.w	r8, #0
 8009f72:	4b92      	ldr	r3, [pc, #584]	; (800a1bc <_strtod_l+0xbf4>)
 8009f74:	403b      	ands	r3, r7
 8009f76:	930d      	str	r3, [sp, #52]	; 0x34
 8009f78:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009f7a:	4b91      	ldr	r3, [pc, #580]	; (800a1c0 <_strtod_l+0xbf8>)
 8009f7c:	429a      	cmp	r2, r3
 8009f7e:	f040 80b0 	bne.w	800a0e2 <_strtod_l+0xb1a>
 8009f82:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009f86:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8009f8a:	ec4b ab10 	vmov	d0, sl, fp
 8009f8e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009f92:	f001 ff59 	bl	800be48 <__ulp>
 8009f96:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009f9a:	ec53 2b10 	vmov	r2, r3, d0
 8009f9e:	f7f6 fb4b 	bl	8000638 <__aeabi_dmul>
 8009fa2:	4652      	mov	r2, sl
 8009fa4:	465b      	mov	r3, fp
 8009fa6:	f7f6 f991 	bl	80002cc <__adddf3>
 8009faa:	460b      	mov	r3, r1
 8009fac:	4983      	ldr	r1, [pc, #524]	; (800a1bc <_strtod_l+0xbf4>)
 8009fae:	4a85      	ldr	r2, [pc, #532]	; (800a1c4 <_strtod_l+0xbfc>)
 8009fb0:	4019      	ands	r1, r3
 8009fb2:	4291      	cmp	r1, r2
 8009fb4:	4682      	mov	sl, r0
 8009fb6:	d960      	bls.n	800a07a <_strtod_l+0xab2>
 8009fb8:	ee18 3a90 	vmov	r3, s17
 8009fbc:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8009fc0:	4293      	cmp	r3, r2
 8009fc2:	d104      	bne.n	8009fce <_strtod_l+0xa06>
 8009fc4:	ee18 3a10 	vmov	r3, s16
 8009fc8:	3301      	adds	r3, #1
 8009fca:	f43f ad45 	beq.w	8009a58 <_strtod_l+0x490>
 8009fce:	f8df b200 	ldr.w	fp, [pc, #512]	; 800a1d0 <_strtod_l+0xc08>
 8009fd2:	f04f 3aff 	mov.w	sl, #4294967295
 8009fd6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009fd8:	4620      	mov	r0, r4
 8009fda:	f001 fc03 	bl	800b7e4 <_Bfree>
 8009fde:	9905      	ldr	r1, [sp, #20]
 8009fe0:	4620      	mov	r0, r4
 8009fe2:	f001 fbff 	bl	800b7e4 <_Bfree>
 8009fe6:	4631      	mov	r1, r6
 8009fe8:	4620      	mov	r0, r4
 8009fea:	f001 fbfb 	bl	800b7e4 <_Bfree>
 8009fee:	4629      	mov	r1, r5
 8009ff0:	4620      	mov	r0, r4
 8009ff2:	f001 fbf7 	bl	800b7e4 <_Bfree>
 8009ff6:	e61a      	b.n	8009c2e <_strtod_l+0x666>
 8009ff8:	f1ba 0f00 	cmp.w	sl, #0
 8009ffc:	d11b      	bne.n	800a036 <_strtod_l+0xa6e>
 8009ffe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a002:	b9f3      	cbnz	r3, 800a042 <_strtod_l+0xa7a>
 800a004:	4b6c      	ldr	r3, [pc, #432]	; (800a1b8 <_strtod_l+0xbf0>)
 800a006:	2200      	movs	r2, #0
 800a008:	4640      	mov	r0, r8
 800a00a:	4649      	mov	r1, r9
 800a00c:	f7f6 fd86 	bl	8000b1c <__aeabi_dcmplt>
 800a010:	b9d0      	cbnz	r0, 800a048 <_strtod_l+0xa80>
 800a012:	4640      	mov	r0, r8
 800a014:	4649      	mov	r1, r9
 800a016:	4b6c      	ldr	r3, [pc, #432]	; (800a1c8 <_strtod_l+0xc00>)
 800a018:	2200      	movs	r2, #0
 800a01a:	f7f6 fb0d 	bl	8000638 <__aeabi_dmul>
 800a01e:	4680      	mov	r8, r0
 800a020:	4689      	mov	r9, r1
 800a022:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a026:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800a02a:	9315      	str	r3, [sp, #84]	; 0x54
 800a02c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800a030:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a034:	e79d      	b.n	8009f72 <_strtod_l+0x9aa>
 800a036:	f1ba 0f01 	cmp.w	sl, #1
 800a03a:	d102      	bne.n	800a042 <_strtod_l+0xa7a>
 800a03c:	2f00      	cmp	r7, #0
 800a03e:	f43f ad83 	beq.w	8009b48 <_strtod_l+0x580>
 800a042:	4b62      	ldr	r3, [pc, #392]	; (800a1cc <_strtod_l+0xc04>)
 800a044:	2200      	movs	r2, #0
 800a046:	e78e      	b.n	8009f66 <_strtod_l+0x99e>
 800a048:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800a1c8 <_strtod_l+0xc00>
 800a04c:	f04f 0800 	mov.w	r8, #0
 800a050:	e7e7      	b.n	800a022 <_strtod_l+0xa5a>
 800a052:	4b5d      	ldr	r3, [pc, #372]	; (800a1c8 <_strtod_l+0xc00>)
 800a054:	4640      	mov	r0, r8
 800a056:	4649      	mov	r1, r9
 800a058:	2200      	movs	r2, #0
 800a05a:	f7f6 faed 	bl	8000638 <__aeabi_dmul>
 800a05e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a060:	4680      	mov	r8, r0
 800a062:	4689      	mov	r9, r1
 800a064:	b933      	cbnz	r3, 800a074 <_strtod_l+0xaac>
 800a066:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a06a:	900e      	str	r0, [sp, #56]	; 0x38
 800a06c:	930f      	str	r3, [sp, #60]	; 0x3c
 800a06e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800a072:	e7dd      	b.n	800a030 <_strtod_l+0xa68>
 800a074:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800a078:	e7f9      	b.n	800a06e <_strtod_l+0xaa6>
 800a07a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800a07e:	9b04      	ldr	r3, [sp, #16]
 800a080:	2b00      	cmp	r3, #0
 800a082:	d1a8      	bne.n	8009fd6 <_strtod_l+0xa0e>
 800a084:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a088:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a08a:	0d1b      	lsrs	r3, r3, #20
 800a08c:	051b      	lsls	r3, r3, #20
 800a08e:	429a      	cmp	r2, r3
 800a090:	d1a1      	bne.n	8009fd6 <_strtod_l+0xa0e>
 800a092:	4640      	mov	r0, r8
 800a094:	4649      	mov	r1, r9
 800a096:	f7f6 fe2f 	bl	8000cf8 <__aeabi_d2lz>
 800a09a:	f7f6 fa9f 	bl	80005dc <__aeabi_l2d>
 800a09e:	4602      	mov	r2, r0
 800a0a0:	460b      	mov	r3, r1
 800a0a2:	4640      	mov	r0, r8
 800a0a4:	4649      	mov	r1, r9
 800a0a6:	f7f6 f90f 	bl	80002c8 <__aeabi_dsub>
 800a0aa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a0ac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a0b0:	ea43 030a 	orr.w	r3, r3, sl
 800a0b4:	4313      	orrs	r3, r2
 800a0b6:	4680      	mov	r8, r0
 800a0b8:	4689      	mov	r9, r1
 800a0ba:	d055      	beq.n	800a168 <_strtod_l+0xba0>
 800a0bc:	a336      	add	r3, pc, #216	; (adr r3, 800a198 <_strtod_l+0xbd0>)
 800a0be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0c2:	f7f6 fd2b 	bl	8000b1c <__aeabi_dcmplt>
 800a0c6:	2800      	cmp	r0, #0
 800a0c8:	f47f acd0 	bne.w	8009a6c <_strtod_l+0x4a4>
 800a0cc:	a334      	add	r3, pc, #208	; (adr r3, 800a1a0 <_strtod_l+0xbd8>)
 800a0ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0d2:	4640      	mov	r0, r8
 800a0d4:	4649      	mov	r1, r9
 800a0d6:	f7f6 fd3f 	bl	8000b58 <__aeabi_dcmpgt>
 800a0da:	2800      	cmp	r0, #0
 800a0dc:	f43f af7b 	beq.w	8009fd6 <_strtod_l+0xa0e>
 800a0e0:	e4c4      	b.n	8009a6c <_strtod_l+0x4a4>
 800a0e2:	9b04      	ldr	r3, [sp, #16]
 800a0e4:	b333      	cbz	r3, 800a134 <_strtod_l+0xb6c>
 800a0e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a0e8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a0ec:	d822      	bhi.n	800a134 <_strtod_l+0xb6c>
 800a0ee:	a32e      	add	r3, pc, #184	; (adr r3, 800a1a8 <_strtod_l+0xbe0>)
 800a0f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0f4:	4640      	mov	r0, r8
 800a0f6:	4649      	mov	r1, r9
 800a0f8:	f7f6 fd1a 	bl	8000b30 <__aeabi_dcmple>
 800a0fc:	b1a0      	cbz	r0, 800a128 <_strtod_l+0xb60>
 800a0fe:	4649      	mov	r1, r9
 800a100:	4640      	mov	r0, r8
 800a102:	f7f6 fd71 	bl	8000be8 <__aeabi_d2uiz>
 800a106:	2801      	cmp	r0, #1
 800a108:	bf38      	it	cc
 800a10a:	2001      	movcc	r0, #1
 800a10c:	f7f6 fa1a 	bl	8000544 <__aeabi_ui2d>
 800a110:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a112:	4680      	mov	r8, r0
 800a114:	4689      	mov	r9, r1
 800a116:	bb23      	cbnz	r3, 800a162 <_strtod_l+0xb9a>
 800a118:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a11c:	9010      	str	r0, [sp, #64]	; 0x40
 800a11e:	9311      	str	r3, [sp, #68]	; 0x44
 800a120:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a124:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a128:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a12a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a12c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800a130:	1a9b      	subs	r3, r3, r2
 800a132:	9309      	str	r3, [sp, #36]	; 0x24
 800a134:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a138:	eeb0 0a48 	vmov.f32	s0, s16
 800a13c:	eef0 0a68 	vmov.f32	s1, s17
 800a140:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a144:	f001 fe80 	bl	800be48 <__ulp>
 800a148:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a14c:	ec53 2b10 	vmov	r2, r3, d0
 800a150:	f7f6 fa72 	bl	8000638 <__aeabi_dmul>
 800a154:	ec53 2b18 	vmov	r2, r3, d8
 800a158:	f7f6 f8b8 	bl	80002cc <__adddf3>
 800a15c:	4682      	mov	sl, r0
 800a15e:	468b      	mov	fp, r1
 800a160:	e78d      	b.n	800a07e <_strtod_l+0xab6>
 800a162:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800a166:	e7db      	b.n	800a120 <_strtod_l+0xb58>
 800a168:	a311      	add	r3, pc, #68	; (adr r3, 800a1b0 <_strtod_l+0xbe8>)
 800a16a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a16e:	f7f6 fcd5 	bl	8000b1c <__aeabi_dcmplt>
 800a172:	e7b2      	b.n	800a0da <_strtod_l+0xb12>
 800a174:	2300      	movs	r3, #0
 800a176:	930a      	str	r3, [sp, #40]	; 0x28
 800a178:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a17a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a17c:	6013      	str	r3, [r2, #0]
 800a17e:	f7ff ba6b 	b.w	8009658 <_strtod_l+0x90>
 800a182:	2a65      	cmp	r2, #101	; 0x65
 800a184:	f43f ab5f 	beq.w	8009846 <_strtod_l+0x27e>
 800a188:	2a45      	cmp	r2, #69	; 0x45
 800a18a:	f43f ab5c 	beq.w	8009846 <_strtod_l+0x27e>
 800a18e:	2301      	movs	r3, #1
 800a190:	f7ff bb94 	b.w	80098bc <_strtod_l+0x2f4>
 800a194:	f3af 8000 	nop.w
 800a198:	94a03595 	.word	0x94a03595
 800a19c:	3fdfffff 	.word	0x3fdfffff
 800a1a0:	35afe535 	.word	0x35afe535
 800a1a4:	3fe00000 	.word	0x3fe00000
 800a1a8:	ffc00000 	.word	0xffc00000
 800a1ac:	41dfffff 	.word	0x41dfffff
 800a1b0:	94a03595 	.word	0x94a03595
 800a1b4:	3fcfffff 	.word	0x3fcfffff
 800a1b8:	3ff00000 	.word	0x3ff00000
 800a1bc:	7ff00000 	.word	0x7ff00000
 800a1c0:	7fe00000 	.word	0x7fe00000
 800a1c4:	7c9fffff 	.word	0x7c9fffff
 800a1c8:	3fe00000 	.word	0x3fe00000
 800a1cc:	bff00000 	.word	0xbff00000
 800a1d0:	7fefffff 	.word	0x7fefffff

0800a1d4 <_strtod_r>:
 800a1d4:	4b01      	ldr	r3, [pc, #4]	; (800a1dc <_strtod_r+0x8>)
 800a1d6:	f7ff b9f7 	b.w	80095c8 <_strtod_l>
 800a1da:	bf00      	nop
 800a1dc:	20000074 	.word	0x20000074

0800a1e0 <_strtol_l.constprop.0>:
 800a1e0:	2b01      	cmp	r3, #1
 800a1e2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a1e6:	d001      	beq.n	800a1ec <_strtol_l.constprop.0+0xc>
 800a1e8:	2b24      	cmp	r3, #36	; 0x24
 800a1ea:	d906      	bls.n	800a1fa <_strtol_l.constprop.0+0x1a>
 800a1ec:	f7fe fa6a 	bl	80086c4 <__errno>
 800a1f0:	2316      	movs	r3, #22
 800a1f2:	6003      	str	r3, [r0, #0]
 800a1f4:	2000      	movs	r0, #0
 800a1f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1fa:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800a2e0 <_strtol_l.constprop.0+0x100>
 800a1fe:	460d      	mov	r5, r1
 800a200:	462e      	mov	r6, r5
 800a202:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a206:	f814 700c 	ldrb.w	r7, [r4, ip]
 800a20a:	f017 0708 	ands.w	r7, r7, #8
 800a20e:	d1f7      	bne.n	800a200 <_strtol_l.constprop.0+0x20>
 800a210:	2c2d      	cmp	r4, #45	; 0x2d
 800a212:	d132      	bne.n	800a27a <_strtol_l.constprop.0+0x9a>
 800a214:	782c      	ldrb	r4, [r5, #0]
 800a216:	2701      	movs	r7, #1
 800a218:	1cb5      	adds	r5, r6, #2
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d05b      	beq.n	800a2d6 <_strtol_l.constprop.0+0xf6>
 800a21e:	2b10      	cmp	r3, #16
 800a220:	d109      	bne.n	800a236 <_strtol_l.constprop.0+0x56>
 800a222:	2c30      	cmp	r4, #48	; 0x30
 800a224:	d107      	bne.n	800a236 <_strtol_l.constprop.0+0x56>
 800a226:	782c      	ldrb	r4, [r5, #0]
 800a228:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800a22c:	2c58      	cmp	r4, #88	; 0x58
 800a22e:	d14d      	bne.n	800a2cc <_strtol_l.constprop.0+0xec>
 800a230:	786c      	ldrb	r4, [r5, #1]
 800a232:	2310      	movs	r3, #16
 800a234:	3502      	adds	r5, #2
 800a236:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800a23a:	f108 38ff 	add.w	r8, r8, #4294967295
 800a23e:	f04f 0c00 	mov.w	ip, #0
 800a242:	fbb8 f9f3 	udiv	r9, r8, r3
 800a246:	4666      	mov	r6, ip
 800a248:	fb03 8a19 	mls	sl, r3, r9, r8
 800a24c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800a250:	f1be 0f09 	cmp.w	lr, #9
 800a254:	d816      	bhi.n	800a284 <_strtol_l.constprop.0+0xa4>
 800a256:	4674      	mov	r4, lr
 800a258:	42a3      	cmp	r3, r4
 800a25a:	dd24      	ble.n	800a2a6 <_strtol_l.constprop.0+0xc6>
 800a25c:	f1bc 0f00 	cmp.w	ip, #0
 800a260:	db1e      	blt.n	800a2a0 <_strtol_l.constprop.0+0xc0>
 800a262:	45b1      	cmp	r9, r6
 800a264:	d31c      	bcc.n	800a2a0 <_strtol_l.constprop.0+0xc0>
 800a266:	d101      	bne.n	800a26c <_strtol_l.constprop.0+0x8c>
 800a268:	45a2      	cmp	sl, r4
 800a26a:	db19      	blt.n	800a2a0 <_strtol_l.constprop.0+0xc0>
 800a26c:	fb06 4603 	mla	r6, r6, r3, r4
 800a270:	f04f 0c01 	mov.w	ip, #1
 800a274:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a278:	e7e8      	b.n	800a24c <_strtol_l.constprop.0+0x6c>
 800a27a:	2c2b      	cmp	r4, #43	; 0x2b
 800a27c:	bf04      	itt	eq
 800a27e:	782c      	ldrbeq	r4, [r5, #0]
 800a280:	1cb5      	addeq	r5, r6, #2
 800a282:	e7ca      	b.n	800a21a <_strtol_l.constprop.0+0x3a>
 800a284:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800a288:	f1be 0f19 	cmp.w	lr, #25
 800a28c:	d801      	bhi.n	800a292 <_strtol_l.constprop.0+0xb2>
 800a28e:	3c37      	subs	r4, #55	; 0x37
 800a290:	e7e2      	b.n	800a258 <_strtol_l.constprop.0+0x78>
 800a292:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800a296:	f1be 0f19 	cmp.w	lr, #25
 800a29a:	d804      	bhi.n	800a2a6 <_strtol_l.constprop.0+0xc6>
 800a29c:	3c57      	subs	r4, #87	; 0x57
 800a29e:	e7db      	b.n	800a258 <_strtol_l.constprop.0+0x78>
 800a2a0:	f04f 3cff 	mov.w	ip, #4294967295
 800a2a4:	e7e6      	b.n	800a274 <_strtol_l.constprop.0+0x94>
 800a2a6:	f1bc 0f00 	cmp.w	ip, #0
 800a2aa:	da05      	bge.n	800a2b8 <_strtol_l.constprop.0+0xd8>
 800a2ac:	2322      	movs	r3, #34	; 0x22
 800a2ae:	6003      	str	r3, [r0, #0]
 800a2b0:	4646      	mov	r6, r8
 800a2b2:	b942      	cbnz	r2, 800a2c6 <_strtol_l.constprop.0+0xe6>
 800a2b4:	4630      	mov	r0, r6
 800a2b6:	e79e      	b.n	800a1f6 <_strtol_l.constprop.0+0x16>
 800a2b8:	b107      	cbz	r7, 800a2bc <_strtol_l.constprop.0+0xdc>
 800a2ba:	4276      	negs	r6, r6
 800a2bc:	2a00      	cmp	r2, #0
 800a2be:	d0f9      	beq.n	800a2b4 <_strtol_l.constprop.0+0xd4>
 800a2c0:	f1bc 0f00 	cmp.w	ip, #0
 800a2c4:	d000      	beq.n	800a2c8 <_strtol_l.constprop.0+0xe8>
 800a2c6:	1e69      	subs	r1, r5, #1
 800a2c8:	6011      	str	r1, [r2, #0]
 800a2ca:	e7f3      	b.n	800a2b4 <_strtol_l.constprop.0+0xd4>
 800a2cc:	2430      	movs	r4, #48	; 0x30
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d1b1      	bne.n	800a236 <_strtol_l.constprop.0+0x56>
 800a2d2:	2308      	movs	r3, #8
 800a2d4:	e7af      	b.n	800a236 <_strtol_l.constprop.0+0x56>
 800a2d6:	2c30      	cmp	r4, #48	; 0x30
 800a2d8:	d0a5      	beq.n	800a226 <_strtol_l.constprop.0+0x46>
 800a2da:	230a      	movs	r3, #10
 800a2dc:	e7ab      	b.n	800a236 <_strtol_l.constprop.0+0x56>
 800a2de:	bf00      	nop
 800a2e0:	0800db81 	.word	0x0800db81

0800a2e4 <_strtol_r>:
 800a2e4:	f7ff bf7c 	b.w	800a1e0 <_strtol_l.constprop.0>

0800a2e8 <_write_r>:
 800a2e8:	b538      	push	{r3, r4, r5, lr}
 800a2ea:	4d07      	ldr	r5, [pc, #28]	; (800a308 <_write_r+0x20>)
 800a2ec:	4604      	mov	r4, r0
 800a2ee:	4608      	mov	r0, r1
 800a2f0:	4611      	mov	r1, r2
 800a2f2:	2200      	movs	r2, #0
 800a2f4:	602a      	str	r2, [r5, #0]
 800a2f6:	461a      	mov	r2, r3
 800a2f8:	f7f7 fb51 	bl	800199e <_write>
 800a2fc:	1c43      	adds	r3, r0, #1
 800a2fe:	d102      	bne.n	800a306 <_write_r+0x1e>
 800a300:	682b      	ldr	r3, [r5, #0]
 800a302:	b103      	cbz	r3, 800a306 <_write_r+0x1e>
 800a304:	6023      	str	r3, [r4, #0]
 800a306:	bd38      	pop	{r3, r4, r5, pc}
 800a308:	20000448 	.word	0x20000448

0800a30c <_close_r>:
 800a30c:	b538      	push	{r3, r4, r5, lr}
 800a30e:	4d06      	ldr	r5, [pc, #24]	; (800a328 <_close_r+0x1c>)
 800a310:	2300      	movs	r3, #0
 800a312:	4604      	mov	r4, r0
 800a314:	4608      	mov	r0, r1
 800a316:	602b      	str	r3, [r5, #0]
 800a318:	f7f7 fb5d 	bl	80019d6 <_close>
 800a31c:	1c43      	adds	r3, r0, #1
 800a31e:	d102      	bne.n	800a326 <_close_r+0x1a>
 800a320:	682b      	ldr	r3, [r5, #0]
 800a322:	b103      	cbz	r3, 800a326 <_close_r+0x1a>
 800a324:	6023      	str	r3, [r4, #0]
 800a326:	bd38      	pop	{r3, r4, r5, pc}
 800a328:	20000448 	.word	0x20000448

0800a32c <quorem>:
 800a32c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a330:	6903      	ldr	r3, [r0, #16]
 800a332:	690c      	ldr	r4, [r1, #16]
 800a334:	42a3      	cmp	r3, r4
 800a336:	4607      	mov	r7, r0
 800a338:	f2c0 8081 	blt.w	800a43e <quorem+0x112>
 800a33c:	3c01      	subs	r4, #1
 800a33e:	f101 0814 	add.w	r8, r1, #20
 800a342:	f100 0514 	add.w	r5, r0, #20
 800a346:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a34a:	9301      	str	r3, [sp, #4]
 800a34c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a350:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a354:	3301      	adds	r3, #1
 800a356:	429a      	cmp	r2, r3
 800a358:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a35c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a360:	fbb2 f6f3 	udiv	r6, r2, r3
 800a364:	d331      	bcc.n	800a3ca <quorem+0x9e>
 800a366:	f04f 0e00 	mov.w	lr, #0
 800a36a:	4640      	mov	r0, r8
 800a36c:	46ac      	mov	ip, r5
 800a36e:	46f2      	mov	sl, lr
 800a370:	f850 2b04 	ldr.w	r2, [r0], #4
 800a374:	b293      	uxth	r3, r2
 800a376:	fb06 e303 	mla	r3, r6, r3, lr
 800a37a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a37e:	b29b      	uxth	r3, r3
 800a380:	ebaa 0303 	sub.w	r3, sl, r3
 800a384:	f8dc a000 	ldr.w	sl, [ip]
 800a388:	0c12      	lsrs	r2, r2, #16
 800a38a:	fa13 f38a 	uxtah	r3, r3, sl
 800a38e:	fb06 e202 	mla	r2, r6, r2, lr
 800a392:	9300      	str	r3, [sp, #0]
 800a394:	9b00      	ldr	r3, [sp, #0]
 800a396:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a39a:	b292      	uxth	r2, r2
 800a39c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a3a0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a3a4:	f8bd 3000 	ldrh.w	r3, [sp]
 800a3a8:	4581      	cmp	r9, r0
 800a3aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a3ae:	f84c 3b04 	str.w	r3, [ip], #4
 800a3b2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a3b6:	d2db      	bcs.n	800a370 <quorem+0x44>
 800a3b8:	f855 300b 	ldr.w	r3, [r5, fp]
 800a3bc:	b92b      	cbnz	r3, 800a3ca <quorem+0x9e>
 800a3be:	9b01      	ldr	r3, [sp, #4]
 800a3c0:	3b04      	subs	r3, #4
 800a3c2:	429d      	cmp	r5, r3
 800a3c4:	461a      	mov	r2, r3
 800a3c6:	d32e      	bcc.n	800a426 <quorem+0xfa>
 800a3c8:	613c      	str	r4, [r7, #16]
 800a3ca:	4638      	mov	r0, r7
 800a3cc:	f001 fc96 	bl	800bcfc <__mcmp>
 800a3d0:	2800      	cmp	r0, #0
 800a3d2:	db24      	blt.n	800a41e <quorem+0xf2>
 800a3d4:	3601      	adds	r6, #1
 800a3d6:	4628      	mov	r0, r5
 800a3d8:	f04f 0c00 	mov.w	ip, #0
 800a3dc:	f858 2b04 	ldr.w	r2, [r8], #4
 800a3e0:	f8d0 e000 	ldr.w	lr, [r0]
 800a3e4:	b293      	uxth	r3, r2
 800a3e6:	ebac 0303 	sub.w	r3, ip, r3
 800a3ea:	0c12      	lsrs	r2, r2, #16
 800a3ec:	fa13 f38e 	uxtah	r3, r3, lr
 800a3f0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a3f4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a3f8:	b29b      	uxth	r3, r3
 800a3fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a3fe:	45c1      	cmp	r9, r8
 800a400:	f840 3b04 	str.w	r3, [r0], #4
 800a404:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a408:	d2e8      	bcs.n	800a3dc <quorem+0xb0>
 800a40a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a40e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a412:	b922      	cbnz	r2, 800a41e <quorem+0xf2>
 800a414:	3b04      	subs	r3, #4
 800a416:	429d      	cmp	r5, r3
 800a418:	461a      	mov	r2, r3
 800a41a:	d30a      	bcc.n	800a432 <quorem+0x106>
 800a41c:	613c      	str	r4, [r7, #16]
 800a41e:	4630      	mov	r0, r6
 800a420:	b003      	add	sp, #12
 800a422:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a426:	6812      	ldr	r2, [r2, #0]
 800a428:	3b04      	subs	r3, #4
 800a42a:	2a00      	cmp	r2, #0
 800a42c:	d1cc      	bne.n	800a3c8 <quorem+0x9c>
 800a42e:	3c01      	subs	r4, #1
 800a430:	e7c7      	b.n	800a3c2 <quorem+0x96>
 800a432:	6812      	ldr	r2, [r2, #0]
 800a434:	3b04      	subs	r3, #4
 800a436:	2a00      	cmp	r2, #0
 800a438:	d1f0      	bne.n	800a41c <quorem+0xf0>
 800a43a:	3c01      	subs	r4, #1
 800a43c:	e7eb      	b.n	800a416 <quorem+0xea>
 800a43e:	2000      	movs	r0, #0
 800a440:	e7ee      	b.n	800a420 <quorem+0xf4>
 800a442:	0000      	movs	r0, r0
 800a444:	0000      	movs	r0, r0
	...

0800a448 <_dtoa_r>:
 800a448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a44c:	ed2d 8b04 	vpush	{d8-d9}
 800a450:	ec57 6b10 	vmov	r6, r7, d0
 800a454:	b093      	sub	sp, #76	; 0x4c
 800a456:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a458:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a45c:	9106      	str	r1, [sp, #24]
 800a45e:	ee10 aa10 	vmov	sl, s0
 800a462:	4604      	mov	r4, r0
 800a464:	9209      	str	r2, [sp, #36]	; 0x24
 800a466:	930c      	str	r3, [sp, #48]	; 0x30
 800a468:	46bb      	mov	fp, r7
 800a46a:	b975      	cbnz	r5, 800a48a <_dtoa_r+0x42>
 800a46c:	2010      	movs	r0, #16
 800a46e:	f001 f95f 	bl	800b730 <malloc>
 800a472:	4602      	mov	r2, r0
 800a474:	6260      	str	r0, [r4, #36]	; 0x24
 800a476:	b920      	cbnz	r0, 800a482 <_dtoa_r+0x3a>
 800a478:	4ba7      	ldr	r3, [pc, #668]	; (800a718 <_dtoa_r+0x2d0>)
 800a47a:	21ea      	movs	r1, #234	; 0xea
 800a47c:	48a7      	ldr	r0, [pc, #668]	; (800a71c <_dtoa_r+0x2d4>)
 800a47e:	f002 fcc7 	bl	800ce10 <__assert_func>
 800a482:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a486:	6005      	str	r5, [r0, #0]
 800a488:	60c5      	str	r5, [r0, #12]
 800a48a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a48c:	6819      	ldr	r1, [r3, #0]
 800a48e:	b151      	cbz	r1, 800a4a6 <_dtoa_r+0x5e>
 800a490:	685a      	ldr	r2, [r3, #4]
 800a492:	604a      	str	r2, [r1, #4]
 800a494:	2301      	movs	r3, #1
 800a496:	4093      	lsls	r3, r2
 800a498:	608b      	str	r3, [r1, #8]
 800a49a:	4620      	mov	r0, r4
 800a49c:	f001 f9a2 	bl	800b7e4 <_Bfree>
 800a4a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a4a2:	2200      	movs	r2, #0
 800a4a4:	601a      	str	r2, [r3, #0]
 800a4a6:	1e3b      	subs	r3, r7, #0
 800a4a8:	bfaa      	itet	ge
 800a4aa:	2300      	movge	r3, #0
 800a4ac:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800a4b0:	f8c8 3000 	strge.w	r3, [r8]
 800a4b4:	4b9a      	ldr	r3, [pc, #616]	; (800a720 <_dtoa_r+0x2d8>)
 800a4b6:	bfbc      	itt	lt
 800a4b8:	2201      	movlt	r2, #1
 800a4ba:	f8c8 2000 	strlt.w	r2, [r8]
 800a4be:	ea33 030b 	bics.w	r3, r3, fp
 800a4c2:	d11b      	bne.n	800a4fc <_dtoa_r+0xb4>
 800a4c4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a4c6:	f242 730f 	movw	r3, #9999	; 0x270f
 800a4ca:	6013      	str	r3, [r2, #0]
 800a4cc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a4d0:	4333      	orrs	r3, r6
 800a4d2:	f000 8592 	beq.w	800affa <_dtoa_r+0xbb2>
 800a4d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a4d8:	b963      	cbnz	r3, 800a4f4 <_dtoa_r+0xac>
 800a4da:	4b92      	ldr	r3, [pc, #584]	; (800a724 <_dtoa_r+0x2dc>)
 800a4dc:	e022      	b.n	800a524 <_dtoa_r+0xdc>
 800a4de:	4b92      	ldr	r3, [pc, #584]	; (800a728 <_dtoa_r+0x2e0>)
 800a4e0:	9301      	str	r3, [sp, #4]
 800a4e2:	3308      	adds	r3, #8
 800a4e4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a4e6:	6013      	str	r3, [r2, #0]
 800a4e8:	9801      	ldr	r0, [sp, #4]
 800a4ea:	b013      	add	sp, #76	; 0x4c
 800a4ec:	ecbd 8b04 	vpop	{d8-d9}
 800a4f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4f4:	4b8b      	ldr	r3, [pc, #556]	; (800a724 <_dtoa_r+0x2dc>)
 800a4f6:	9301      	str	r3, [sp, #4]
 800a4f8:	3303      	adds	r3, #3
 800a4fa:	e7f3      	b.n	800a4e4 <_dtoa_r+0x9c>
 800a4fc:	2200      	movs	r2, #0
 800a4fe:	2300      	movs	r3, #0
 800a500:	4650      	mov	r0, sl
 800a502:	4659      	mov	r1, fp
 800a504:	f7f6 fb00 	bl	8000b08 <__aeabi_dcmpeq>
 800a508:	ec4b ab19 	vmov	d9, sl, fp
 800a50c:	4680      	mov	r8, r0
 800a50e:	b158      	cbz	r0, 800a528 <_dtoa_r+0xe0>
 800a510:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a512:	2301      	movs	r3, #1
 800a514:	6013      	str	r3, [r2, #0]
 800a516:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a518:	2b00      	cmp	r3, #0
 800a51a:	f000 856b 	beq.w	800aff4 <_dtoa_r+0xbac>
 800a51e:	4883      	ldr	r0, [pc, #524]	; (800a72c <_dtoa_r+0x2e4>)
 800a520:	6018      	str	r0, [r3, #0]
 800a522:	1e43      	subs	r3, r0, #1
 800a524:	9301      	str	r3, [sp, #4]
 800a526:	e7df      	b.n	800a4e8 <_dtoa_r+0xa0>
 800a528:	ec4b ab10 	vmov	d0, sl, fp
 800a52c:	aa10      	add	r2, sp, #64	; 0x40
 800a52e:	a911      	add	r1, sp, #68	; 0x44
 800a530:	4620      	mov	r0, r4
 800a532:	f001 fd05 	bl	800bf40 <__d2b>
 800a536:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800a53a:	ee08 0a10 	vmov	s16, r0
 800a53e:	2d00      	cmp	r5, #0
 800a540:	f000 8084 	beq.w	800a64c <_dtoa_r+0x204>
 800a544:	ee19 3a90 	vmov	r3, s19
 800a548:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a54c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a550:	4656      	mov	r6, sl
 800a552:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a556:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a55a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800a55e:	4b74      	ldr	r3, [pc, #464]	; (800a730 <_dtoa_r+0x2e8>)
 800a560:	2200      	movs	r2, #0
 800a562:	4630      	mov	r0, r6
 800a564:	4639      	mov	r1, r7
 800a566:	f7f5 feaf 	bl	80002c8 <__aeabi_dsub>
 800a56a:	a365      	add	r3, pc, #404	; (adr r3, 800a700 <_dtoa_r+0x2b8>)
 800a56c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a570:	f7f6 f862 	bl	8000638 <__aeabi_dmul>
 800a574:	a364      	add	r3, pc, #400	; (adr r3, 800a708 <_dtoa_r+0x2c0>)
 800a576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a57a:	f7f5 fea7 	bl	80002cc <__adddf3>
 800a57e:	4606      	mov	r6, r0
 800a580:	4628      	mov	r0, r5
 800a582:	460f      	mov	r7, r1
 800a584:	f7f5 ffee 	bl	8000564 <__aeabi_i2d>
 800a588:	a361      	add	r3, pc, #388	; (adr r3, 800a710 <_dtoa_r+0x2c8>)
 800a58a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a58e:	f7f6 f853 	bl	8000638 <__aeabi_dmul>
 800a592:	4602      	mov	r2, r0
 800a594:	460b      	mov	r3, r1
 800a596:	4630      	mov	r0, r6
 800a598:	4639      	mov	r1, r7
 800a59a:	f7f5 fe97 	bl	80002cc <__adddf3>
 800a59e:	4606      	mov	r6, r0
 800a5a0:	460f      	mov	r7, r1
 800a5a2:	f7f6 faf9 	bl	8000b98 <__aeabi_d2iz>
 800a5a6:	2200      	movs	r2, #0
 800a5a8:	9000      	str	r0, [sp, #0]
 800a5aa:	2300      	movs	r3, #0
 800a5ac:	4630      	mov	r0, r6
 800a5ae:	4639      	mov	r1, r7
 800a5b0:	f7f6 fab4 	bl	8000b1c <__aeabi_dcmplt>
 800a5b4:	b150      	cbz	r0, 800a5cc <_dtoa_r+0x184>
 800a5b6:	9800      	ldr	r0, [sp, #0]
 800a5b8:	f7f5 ffd4 	bl	8000564 <__aeabi_i2d>
 800a5bc:	4632      	mov	r2, r6
 800a5be:	463b      	mov	r3, r7
 800a5c0:	f7f6 faa2 	bl	8000b08 <__aeabi_dcmpeq>
 800a5c4:	b910      	cbnz	r0, 800a5cc <_dtoa_r+0x184>
 800a5c6:	9b00      	ldr	r3, [sp, #0]
 800a5c8:	3b01      	subs	r3, #1
 800a5ca:	9300      	str	r3, [sp, #0]
 800a5cc:	9b00      	ldr	r3, [sp, #0]
 800a5ce:	2b16      	cmp	r3, #22
 800a5d0:	d85a      	bhi.n	800a688 <_dtoa_r+0x240>
 800a5d2:	9a00      	ldr	r2, [sp, #0]
 800a5d4:	4b57      	ldr	r3, [pc, #348]	; (800a734 <_dtoa_r+0x2ec>)
 800a5d6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a5da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5de:	ec51 0b19 	vmov	r0, r1, d9
 800a5e2:	f7f6 fa9b 	bl	8000b1c <__aeabi_dcmplt>
 800a5e6:	2800      	cmp	r0, #0
 800a5e8:	d050      	beq.n	800a68c <_dtoa_r+0x244>
 800a5ea:	9b00      	ldr	r3, [sp, #0]
 800a5ec:	3b01      	subs	r3, #1
 800a5ee:	9300      	str	r3, [sp, #0]
 800a5f0:	2300      	movs	r3, #0
 800a5f2:	930b      	str	r3, [sp, #44]	; 0x2c
 800a5f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a5f6:	1b5d      	subs	r5, r3, r5
 800a5f8:	1e6b      	subs	r3, r5, #1
 800a5fa:	9305      	str	r3, [sp, #20]
 800a5fc:	bf45      	ittet	mi
 800a5fe:	f1c5 0301 	rsbmi	r3, r5, #1
 800a602:	9304      	strmi	r3, [sp, #16]
 800a604:	2300      	movpl	r3, #0
 800a606:	2300      	movmi	r3, #0
 800a608:	bf4c      	ite	mi
 800a60a:	9305      	strmi	r3, [sp, #20]
 800a60c:	9304      	strpl	r3, [sp, #16]
 800a60e:	9b00      	ldr	r3, [sp, #0]
 800a610:	2b00      	cmp	r3, #0
 800a612:	db3d      	blt.n	800a690 <_dtoa_r+0x248>
 800a614:	9b05      	ldr	r3, [sp, #20]
 800a616:	9a00      	ldr	r2, [sp, #0]
 800a618:	920a      	str	r2, [sp, #40]	; 0x28
 800a61a:	4413      	add	r3, r2
 800a61c:	9305      	str	r3, [sp, #20]
 800a61e:	2300      	movs	r3, #0
 800a620:	9307      	str	r3, [sp, #28]
 800a622:	9b06      	ldr	r3, [sp, #24]
 800a624:	2b09      	cmp	r3, #9
 800a626:	f200 8089 	bhi.w	800a73c <_dtoa_r+0x2f4>
 800a62a:	2b05      	cmp	r3, #5
 800a62c:	bfc4      	itt	gt
 800a62e:	3b04      	subgt	r3, #4
 800a630:	9306      	strgt	r3, [sp, #24]
 800a632:	9b06      	ldr	r3, [sp, #24]
 800a634:	f1a3 0302 	sub.w	r3, r3, #2
 800a638:	bfcc      	ite	gt
 800a63a:	2500      	movgt	r5, #0
 800a63c:	2501      	movle	r5, #1
 800a63e:	2b03      	cmp	r3, #3
 800a640:	f200 8087 	bhi.w	800a752 <_dtoa_r+0x30a>
 800a644:	e8df f003 	tbb	[pc, r3]
 800a648:	59383a2d 	.word	0x59383a2d
 800a64c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a650:	441d      	add	r5, r3
 800a652:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a656:	2b20      	cmp	r3, #32
 800a658:	bfc1      	itttt	gt
 800a65a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a65e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a662:	fa0b f303 	lslgt.w	r3, fp, r3
 800a666:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a66a:	bfda      	itte	le
 800a66c:	f1c3 0320 	rsble	r3, r3, #32
 800a670:	fa06 f003 	lslle.w	r0, r6, r3
 800a674:	4318      	orrgt	r0, r3
 800a676:	f7f5 ff65 	bl	8000544 <__aeabi_ui2d>
 800a67a:	2301      	movs	r3, #1
 800a67c:	4606      	mov	r6, r0
 800a67e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a682:	3d01      	subs	r5, #1
 800a684:	930e      	str	r3, [sp, #56]	; 0x38
 800a686:	e76a      	b.n	800a55e <_dtoa_r+0x116>
 800a688:	2301      	movs	r3, #1
 800a68a:	e7b2      	b.n	800a5f2 <_dtoa_r+0x1aa>
 800a68c:	900b      	str	r0, [sp, #44]	; 0x2c
 800a68e:	e7b1      	b.n	800a5f4 <_dtoa_r+0x1ac>
 800a690:	9b04      	ldr	r3, [sp, #16]
 800a692:	9a00      	ldr	r2, [sp, #0]
 800a694:	1a9b      	subs	r3, r3, r2
 800a696:	9304      	str	r3, [sp, #16]
 800a698:	4253      	negs	r3, r2
 800a69a:	9307      	str	r3, [sp, #28]
 800a69c:	2300      	movs	r3, #0
 800a69e:	930a      	str	r3, [sp, #40]	; 0x28
 800a6a0:	e7bf      	b.n	800a622 <_dtoa_r+0x1da>
 800a6a2:	2300      	movs	r3, #0
 800a6a4:	9308      	str	r3, [sp, #32]
 800a6a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	dc55      	bgt.n	800a758 <_dtoa_r+0x310>
 800a6ac:	2301      	movs	r3, #1
 800a6ae:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a6b2:	461a      	mov	r2, r3
 800a6b4:	9209      	str	r2, [sp, #36]	; 0x24
 800a6b6:	e00c      	b.n	800a6d2 <_dtoa_r+0x28a>
 800a6b8:	2301      	movs	r3, #1
 800a6ba:	e7f3      	b.n	800a6a4 <_dtoa_r+0x25c>
 800a6bc:	2300      	movs	r3, #0
 800a6be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a6c0:	9308      	str	r3, [sp, #32]
 800a6c2:	9b00      	ldr	r3, [sp, #0]
 800a6c4:	4413      	add	r3, r2
 800a6c6:	9302      	str	r3, [sp, #8]
 800a6c8:	3301      	adds	r3, #1
 800a6ca:	2b01      	cmp	r3, #1
 800a6cc:	9303      	str	r3, [sp, #12]
 800a6ce:	bfb8      	it	lt
 800a6d0:	2301      	movlt	r3, #1
 800a6d2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a6d4:	2200      	movs	r2, #0
 800a6d6:	6042      	str	r2, [r0, #4]
 800a6d8:	2204      	movs	r2, #4
 800a6da:	f102 0614 	add.w	r6, r2, #20
 800a6de:	429e      	cmp	r6, r3
 800a6e0:	6841      	ldr	r1, [r0, #4]
 800a6e2:	d93d      	bls.n	800a760 <_dtoa_r+0x318>
 800a6e4:	4620      	mov	r0, r4
 800a6e6:	f001 f83d 	bl	800b764 <_Balloc>
 800a6ea:	9001      	str	r0, [sp, #4]
 800a6ec:	2800      	cmp	r0, #0
 800a6ee:	d13b      	bne.n	800a768 <_dtoa_r+0x320>
 800a6f0:	4b11      	ldr	r3, [pc, #68]	; (800a738 <_dtoa_r+0x2f0>)
 800a6f2:	4602      	mov	r2, r0
 800a6f4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a6f8:	e6c0      	b.n	800a47c <_dtoa_r+0x34>
 800a6fa:	2301      	movs	r3, #1
 800a6fc:	e7df      	b.n	800a6be <_dtoa_r+0x276>
 800a6fe:	bf00      	nop
 800a700:	636f4361 	.word	0x636f4361
 800a704:	3fd287a7 	.word	0x3fd287a7
 800a708:	8b60c8b3 	.word	0x8b60c8b3
 800a70c:	3fc68a28 	.word	0x3fc68a28
 800a710:	509f79fb 	.word	0x509f79fb
 800a714:	3fd34413 	.word	0x3fd34413
 800a718:	0800dc8e 	.word	0x0800dc8e
 800a71c:	0800dca5 	.word	0x0800dca5
 800a720:	7ff00000 	.word	0x7ff00000
 800a724:	0800dc8a 	.word	0x0800dc8a
 800a728:	0800dc81 	.word	0x0800dc81
 800a72c:	0800defa 	.word	0x0800defa
 800a730:	3ff80000 	.word	0x3ff80000
 800a734:	0800de10 	.word	0x0800de10
 800a738:	0800dd00 	.word	0x0800dd00
 800a73c:	2501      	movs	r5, #1
 800a73e:	2300      	movs	r3, #0
 800a740:	9306      	str	r3, [sp, #24]
 800a742:	9508      	str	r5, [sp, #32]
 800a744:	f04f 33ff 	mov.w	r3, #4294967295
 800a748:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a74c:	2200      	movs	r2, #0
 800a74e:	2312      	movs	r3, #18
 800a750:	e7b0      	b.n	800a6b4 <_dtoa_r+0x26c>
 800a752:	2301      	movs	r3, #1
 800a754:	9308      	str	r3, [sp, #32]
 800a756:	e7f5      	b.n	800a744 <_dtoa_r+0x2fc>
 800a758:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a75a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a75e:	e7b8      	b.n	800a6d2 <_dtoa_r+0x28a>
 800a760:	3101      	adds	r1, #1
 800a762:	6041      	str	r1, [r0, #4]
 800a764:	0052      	lsls	r2, r2, #1
 800a766:	e7b8      	b.n	800a6da <_dtoa_r+0x292>
 800a768:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a76a:	9a01      	ldr	r2, [sp, #4]
 800a76c:	601a      	str	r2, [r3, #0]
 800a76e:	9b03      	ldr	r3, [sp, #12]
 800a770:	2b0e      	cmp	r3, #14
 800a772:	f200 809d 	bhi.w	800a8b0 <_dtoa_r+0x468>
 800a776:	2d00      	cmp	r5, #0
 800a778:	f000 809a 	beq.w	800a8b0 <_dtoa_r+0x468>
 800a77c:	9b00      	ldr	r3, [sp, #0]
 800a77e:	2b00      	cmp	r3, #0
 800a780:	dd32      	ble.n	800a7e8 <_dtoa_r+0x3a0>
 800a782:	4ab7      	ldr	r2, [pc, #732]	; (800aa60 <_dtoa_r+0x618>)
 800a784:	f003 030f 	and.w	r3, r3, #15
 800a788:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a78c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a790:	9b00      	ldr	r3, [sp, #0]
 800a792:	05d8      	lsls	r0, r3, #23
 800a794:	ea4f 1723 	mov.w	r7, r3, asr #4
 800a798:	d516      	bpl.n	800a7c8 <_dtoa_r+0x380>
 800a79a:	4bb2      	ldr	r3, [pc, #712]	; (800aa64 <_dtoa_r+0x61c>)
 800a79c:	ec51 0b19 	vmov	r0, r1, d9
 800a7a0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a7a4:	f7f6 f872 	bl	800088c <__aeabi_ddiv>
 800a7a8:	f007 070f 	and.w	r7, r7, #15
 800a7ac:	4682      	mov	sl, r0
 800a7ae:	468b      	mov	fp, r1
 800a7b0:	2503      	movs	r5, #3
 800a7b2:	4eac      	ldr	r6, [pc, #688]	; (800aa64 <_dtoa_r+0x61c>)
 800a7b4:	b957      	cbnz	r7, 800a7cc <_dtoa_r+0x384>
 800a7b6:	4642      	mov	r2, r8
 800a7b8:	464b      	mov	r3, r9
 800a7ba:	4650      	mov	r0, sl
 800a7bc:	4659      	mov	r1, fp
 800a7be:	f7f6 f865 	bl	800088c <__aeabi_ddiv>
 800a7c2:	4682      	mov	sl, r0
 800a7c4:	468b      	mov	fp, r1
 800a7c6:	e028      	b.n	800a81a <_dtoa_r+0x3d2>
 800a7c8:	2502      	movs	r5, #2
 800a7ca:	e7f2      	b.n	800a7b2 <_dtoa_r+0x36a>
 800a7cc:	07f9      	lsls	r1, r7, #31
 800a7ce:	d508      	bpl.n	800a7e2 <_dtoa_r+0x39a>
 800a7d0:	4640      	mov	r0, r8
 800a7d2:	4649      	mov	r1, r9
 800a7d4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a7d8:	f7f5 ff2e 	bl	8000638 <__aeabi_dmul>
 800a7dc:	3501      	adds	r5, #1
 800a7de:	4680      	mov	r8, r0
 800a7e0:	4689      	mov	r9, r1
 800a7e2:	107f      	asrs	r7, r7, #1
 800a7e4:	3608      	adds	r6, #8
 800a7e6:	e7e5      	b.n	800a7b4 <_dtoa_r+0x36c>
 800a7e8:	f000 809b 	beq.w	800a922 <_dtoa_r+0x4da>
 800a7ec:	9b00      	ldr	r3, [sp, #0]
 800a7ee:	4f9d      	ldr	r7, [pc, #628]	; (800aa64 <_dtoa_r+0x61c>)
 800a7f0:	425e      	negs	r6, r3
 800a7f2:	4b9b      	ldr	r3, [pc, #620]	; (800aa60 <_dtoa_r+0x618>)
 800a7f4:	f006 020f 	and.w	r2, r6, #15
 800a7f8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a7fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a800:	ec51 0b19 	vmov	r0, r1, d9
 800a804:	f7f5 ff18 	bl	8000638 <__aeabi_dmul>
 800a808:	1136      	asrs	r6, r6, #4
 800a80a:	4682      	mov	sl, r0
 800a80c:	468b      	mov	fp, r1
 800a80e:	2300      	movs	r3, #0
 800a810:	2502      	movs	r5, #2
 800a812:	2e00      	cmp	r6, #0
 800a814:	d17a      	bne.n	800a90c <_dtoa_r+0x4c4>
 800a816:	2b00      	cmp	r3, #0
 800a818:	d1d3      	bne.n	800a7c2 <_dtoa_r+0x37a>
 800a81a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	f000 8082 	beq.w	800a926 <_dtoa_r+0x4de>
 800a822:	4b91      	ldr	r3, [pc, #580]	; (800aa68 <_dtoa_r+0x620>)
 800a824:	2200      	movs	r2, #0
 800a826:	4650      	mov	r0, sl
 800a828:	4659      	mov	r1, fp
 800a82a:	f7f6 f977 	bl	8000b1c <__aeabi_dcmplt>
 800a82e:	2800      	cmp	r0, #0
 800a830:	d079      	beq.n	800a926 <_dtoa_r+0x4de>
 800a832:	9b03      	ldr	r3, [sp, #12]
 800a834:	2b00      	cmp	r3, #0
 800a836:	d076      	beq.n	800a926 <_dtoa_r+0x4de>
 800a838:	9b02      	ldr	r3, [sp, #8]
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	dd36      	ble.n	800a8ac <_dtoa_r+0x464>
 800a83e:	9b00      	ldr	r3, [sp, #0]
 800a840:	4650      	mov	r0, sl
 800a842:	4659      	mov	r1, fp
 800a844:	1e5f      	subs	r7, r3, #1
 800a846:	2200      	movs	r2, #0
 800a848:	4b88      	ldr	r3, [pc, #544]	; (800aa6c <_dtoa_r+0x624>)
 800a84a:	f7f5 fef5 	bl	8000638 <__aeabi_dmul>
 800a84e:	9e02      	ldr	r6, [sp, #8]
 800a850:	4682      	mov	sl, r0
 800a852:	468b      	mov	fp, r1
 800a854:	3501      	adds	r5, #1
 800a856:	4628      	mov	r0, r5
 800a858:	f7f5 fe84 	bl	8000564 <__aeabi_i2d>
 800a85c:	4652      	mov	r2, sl
 800a85e:	465b      	mov	r3, fp
 800a860:	f7f5 feea 	bl	8000638 <__aeabi_dmul>
 800a864:	4b82      	ldr	r3, [pc, #520]	; (800aa70 <_dtoa_r+0x628>)
 800a866:	2200      	movs	r2, #0
 800a868:	f7f5 fd30 	bl	80002cc <__adddf3>
 800a86c:	46d0      	mov	r8, sl
 800a86e:	46d9      	mov	r9, fp
 800a870:	4682      	mov	sl, r0
 800a872:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800a876:	2e00      	cmp	r6, #0
 800a878:	d158      	bne.n	800a92c <_dtoa_r+0x4e4>
 800a87a:	4b7e      	ldr	r3, [pc, #504]	; (800aa74 <_dtoa_r+0x62c>)
 800a87c:	2200      	movs	r2, #0
 800a87e:	4640      	mov	r0, r8
 800a880:	4649      	mov	r1, r9
 800a882:	f7f5 fd21 	bl	80002c8 <__aeabi_dsub>
 800a886:	4652      	mov	r2, sl
 800a888:	465b      	mov	r3, fp
 800a88a:	4680      	mov	r8, r0
 800a88c:	4689      	mov	r9, r1
 800a88e:	f7f6 f963 	bl	8000b58 <__aeabi_dcmpgt>
 800a892:	2800      	cmp	r0, #0
 800a894:	f040 8295 	bne.w	800adc2 <_dtoa_r+0x97a>
 800a898:	4652      	mov	r2, sl
 800a89a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a89e:	4640      	mov	r0, r8
 800a8a0:	4649      	mov	r1, r9
 800a8a2:	f7f6 f93b 	bl	8000b1c <__aeabi_dcmplt>
 800a8a6:	2800      	cmp	r0, #0
 800a8a8:	f040 8289 	bne.w	800adbe <_dtoa_r+0x976>
 800a8ac:	ec5b ab19 	vmov	sl, fp, d9
 800a8b0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	f2c0 8148 	blt.w	800ab48 <_dtoa_r+0x700>
 800a8b8:	9a00      	ldr	r2, [sp, #0]
 800a8ba:	2a0e      	cmp	r2, #14
 800a8bc:	f300 8144 	bgt.w	800ab48 <_dtoa_r+0x700>
 800a8c0:	4b67      	ldr	r3, [pc, #412]	; (800aa60 <_dtoa_r+0x618>)
 800a8c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a8c6:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a8ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	f280 80d5 	bge.w	800aa7c <_dtoa_r+0x634>
 800a8d2:	9b03      	ldr	r3, [sp, #12]
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	f300 80d1 	bgt.w	800aa7c <_dtoa_r+0x634>
 800a8da:	f040 826f 	bne.w	800adbc <_dtoa_r+0x974>
 800a8de:	4b65      	ldr	r3, [pc, #404]	; (800aa74 <_dtoa_r+0x62c>)
 800a8e0:	2200      	movs	r2, #0
 800a8e2:	4640      	mov	r0, r8
 800a8e4:	4649      	mov	r1, r9
 800a8e6:	f7f5 fea7 	bl	8000638 <__aeabi_dmul>
 800a8ea:	4652      	mov	r2, sl
 800a8ec:	465b      	mov	r3, fp
 800a8ee:	f7f6 f929 	bl	8000b44 <__aeabi_dcmpge>
 800a8f2:	9e03      	ldr	r6, [sp, #12]
 800a8f4:	4637      	mov	r7, r6
 800a8f6:	2800      	cmp	r0, #0
 800a8f8:	f040 8245 	bne.w	800ad86 <_dtoa_r+0x93e>
 800a8fc:	9d01      	ldr	r5, [sp, #4]
 800a8fe:	2331      	movs	r3, #49	; 0x31
 800a900:	f805 3b01 	strb.w	r3, [r5], #1
 800a904:	9b00      	ldr	r3, [sp, #0]
 800a906:	3301      	adds	r3, #1
 800a908:	9300      	str	r3, [sp, #0]
 800a90a:	e240      	b.n	800ad8e <_dtoa_r+0x946>
 800a90c:	07f2      	lsls	r2, r6, #31
 800a90e:	d505      	bpl.n	800a91c <_dtoa_r+0x4d4>
 800a910:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a914:	f7f5 fe90 	bl	8000638 <__aeabi_dmul>
 800a918:	3501      	adds	r5, #1
 800a91a:	2301      	movs	r3, #1
 800a91c:	1076      	asrs	r6, r6, #1
 800a91e:	3708      	adds	r7, #8
 800a920:	e777      	b.n	800a812 <_dtoa_r+0x3ca>
 800a922:	2502      	movs	r5, #2
 800a924:	e779      	b.n	800a81a <_dtoa_r+0x3d2>
 800a926:	9f00      	ldr	r7, [sp, #0]
 800a928:	9e03      	ldr	r6, [sp, #12]
 800a92a:	e794      	b.n	800a856 <_dtoa_r+0x40e>
 800a92c:	9901      	ldr	r1, [sp, #4]
 800a92e:	4b4c      	ldr	r3, [pc, #304]	; (800aa60 <_dtoa_r+0x618>)
 800a930:	4431      	add	r1, r6
 800a932:	910d      	str	r1, [sp, #52]	; 0x34
 800a934:	9908      	ldr	r1, [sp, #32]
 800a936:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a93a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a93e:	2900      	cmp	r1, #0
 800a940:	d043      	beq.n	800a9ca <_dtoa_r+0x582>
 800a942:	494d      	ldr	r1, [pc, #308]	; (800aa78 <_dtoa_r+0x630>)
 800a944:	2000      	movs	r0, #0
 800a946:	f7f5 ffa1 	bl	800088c <__aeabi_ddiv>
 800a94a:	4652      	mov	r2, sl
 800a94c:	465b      	mov	r3, fp
 800a94e:	f7f5 fcbb 	bl	80002c8 <__aeabi_dsub>
 800a952:	9d01      	ldr	r5, [sp, #4]
 800a954:	4682      	mov	sl, r0
 800a956:	468b      	mov	fp, r1
 800a958:	4649      	mov	r1, r9
 800a95a:	4640      	mov	r0, r8
 800a95c:	f7f6 f91c 	bl	8000b98 <__aeabi_d2iz>
 800a960:	4606      	mov	r6, r0
 800a962:	f7f5 fdff 	bl	8000564 <__aeabi_i2d>
 800a966:	4602      	mov	r2, r0
 800a968:	460b      	mov	r3, r1
 800a96a:	4640      	mov	r0, r8
 800a96c:	4649      	mov	r1, r9
 800a96e:	f7f5 fcab 	bl	80002c8 <__aeabi_dsub>
 800a972:	3630      	adds	r6, #48	; 0x30
 800a974:	f805 6b01 	strb.w	r6, [r5], #1
 800a978:	4652      	mov	r2, sl
 800a97a:	465b      	mov	r3, fp
 800a97c:	4680      	mov	r8, r0
 800a97e:	4689      	mov	r9, r1
 800a980:	f7f6 f8cc 	bl	8000b1c <__aeabi_dcmplt>
 800a984:	2800      	cmp	r0, #0
 800a986:	d163      	bne.n	800aa50 <_dtoa_r+0x608>
 800a988:	4642      	mov	r2, r8
 800a98a:	464b      	mov	r3, r9
 800a98c:	4936      	ldr	r1, [pc, #216]	; (800aa68 <_dtoa_r+0x620>)
 800a98e:	2000      	movs	r0, #0
 800a990:	f7f5 fc9a 	bl	80002c8 <__aeabi_dsub>
 800a994:	4652      	mov	r2, sl
 800a996:	465b      	mov	r3, fp
 800a998:	f7f6 f8c0 	bl	8000b1c <__aeabi_dcmplt>
 800a99c:	2800      	cmp	r0, #0
 800a99e:	f040 80b5 	bne.w	800ab0c <_dtoa_r+0x6c4>
 800a9a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a9a4:	429d      	cmp	r5, r3
 800a9a6:	d081      	beq.n	800a8ac <_dtoa_r+0x464>
 800a9a8:	4b30      	ldr	r3, [pc, #192]	; (800aa6c <_dtoa_r+0x624>)
 800a9aa:	2200      	movs	r2, #0
 800a9ac:	4650      	mov	r0, sl
 800a9ae:	4659      	mov	r1, fp
 800a9b0:	f7f5 fe42 	bl	8000638 <__aeabi_dmul>
 800a9b4:	4b2d      	ldr	r3, [pc, #180]	; (800aa6c <_dtoa_r+0x624>)
 800a9b6:	4682      	mov	sl, r0
 800a9b8:	468b      	mov	fp, r1
 800a9ba:	4640      	mov	r0, r8
 800a9bc:	4649      	mov	r1, r9
 800a9be:	2200      	movs	r2, #0
 800a9c0:	f7f5 fe3a 	bl	8000638 <__aeabi_dmul>
 800a9c4:	4680      	mov	r8, r0
 800a9c6:	4689      	mov	r9, r1
 800a9c8:	e7c6      	b.n	800a958 <_dtoa_r+0x510>
 800a9ca:	4650      	mov	r0, sl
 800a9cc:	4659      	mov	r1, fp
 800a9ce:	f7f5 fe33 	bl	8000638 <__aeabi_dmul>
 800a9d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a9d4:	9d01      	ldr	r5, [sp, #4]
 800a9d6:	930f      	str	r3, [sp, #60]	; 0x3c
 800a9d8:	4682      	mov	sl, r0
 800a9da:	468b      	mov	fp, r1
 800a9dc:	4649      	mov	r1, r9
 800a9de:	4640      	mov	r0, r8
 800a9e0:	f7f6 f8da 	bl	8000b98 <__aeabi_d2iz>
 800a9e4:	4606      	mov	r6, r0
 800a9e6:	f7f5 fdbd 	bl	8000564 <__aeabi_i2d>
 800a9ea:	3630      	adds	r6, #48	; 0x30
 800a9ec:	4602      	mov	r2, r0
 800a9ee:	460b      	mov	r3, r1
 800a9f0:	4640      	mov	r0, r8
 800a9f2:	4649      	mov	r1, r9
 800a9f4:	f7f5 fc68 	bl	80002c8 <__aeabi_dsub>
 800a9f8:	f805 6b01 	strb.w	r6, [r5], #1
 800a9fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a9fe:	429d      	cmp	r5, r3
 800aa00:	4680      	mov	r8, r0
 800aa02:	4689      	mov	r9, r1
 800aa04:	f04f 0200 	mov.w	r2, #0
 800aa08:	d124      	bne.n	800aa54 <_dtoa_r+0x60c>
 800aa0a:	4b1b      	ldr	r3, [pc, #108]	; (800aa78 <_dtoa_r+0x630>)
 800aa0c:	4650      	mov	r0, sl
 800aa0e:	4659      	mov	r1, fp
 800aa10:	f7f5 fc5c 	bl	80002cc <__adddf3>
 800aa14:	4602      	mov	r2, r0
 800aa16:	460b      	mov	r3, r1
 800aa18:	4640      	mov	r0, r8
 800aa1a:	4649      	mov	r1, r9
 800aa1c:	f7f6 f89c 	bl	8000b58 <__aeabi_dcmpgt>
 800aa20:	2800      	cmp	r0, #0
 800aa22:	d173      	bne.n	800ab0c <_dtoa_r+0x6c4>
 800aa24:	4652      	mov	r2, sl
 800aa26:	465b      	mov	r3, fp
 800aa28:	4913      	ldr	r1, [pc, #76]	; (800aa78 <_dtoa_r+0x630>)
 800aa2a:	2000      	movs	r0, #0
 800aa2c:	f7f5 fc4c 	bl	80002c8 <__aeabi_dsub>
 800aa30:	4602      	mov	r2, r0
 800aa32:	460b      	mov	r3, r1
 800aa34:	4640      	mov	r0, r8
 800aa36:	4649      	mov	r1, r9
 800aa38:	f7f6 f870 	bl	8000b1c <__aeabi_dcmplt>
 800aa3c:	2800      	cmp	r0, #0
 800aa3e:	f43f af35 	beq.w	800a8ac <_dtoa_r+0x464>
 800aa42:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800aa44:	1e6b      	subs	r3, r5, #1
 800aa46:	930f      	str	r3, [sp, #60]	; 0x3c
 800aa48:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800aa4c:	2b30      	cmp	r3, #48	; 0x30
 800aa4e:	d0f8      	beq.n	800aa42 <_dtoa_r+0x5fa>
 800aa50:	9700      	str	r7, [sp, #0]
 800aa52:	e049      	b.n	800aae8 <_dtoa_r+0x6a0>
 800aa54:	4b05      	ldr	r3, [pc, #20]	; (800aa6c <_dtoa_r+0x624>)
 800aa56:	f7f5 fdef 	bl	8000638 <__aeabi_dmul>
 800aa5a:	4680      	mov	r8, r0
 800aa5c:	4689      	mov	r9, r1
 800aa5e:	e7bd      	b.n	800a9dc <_dtoa_r+0x594>
 800aa60:	0800de10 	.word	0x0800de10
 800aa64:	0800dde8 	.word	0x0800dde8
 800aa68:	3ff00000 	.word	0x3ff00000
 800aa6c:	40240000 	.word	0x40240000
 800aa70:	401c0000 	.word	0x401c0000
 800aa74:	40140000 	.word	0x40140000
 800aa78:	3fe00000 	.word	0x3fe00000
 800aa7c:	9d01      	ldr	r5, [sp, #4]
 800aa7e:	4656      	mov	r6, sl
 800aa80:	465f      	mov	r7, fp
 800aa82:	4642      	mov	r2, r8
 800aa84:	464b      	mov	r3, r9
 800aa86:	4630      	mov	r0, r6
 800aa88:	4639      	mov	r1, r7
 800aa8a:	f7f5 feff 	bl	800088c <__aeabi_ddiv>
 800aa8e:	f7f6 f883 	bl	8000b98 <__aeabi_d2iz>
 800aa92:	4682      	mov	sl, r0
 800aa94:	f7f5 fd66 	bl	8000564 <__aeabi_i2d>
 800aa98:	4642      	mov	r2, r8
 800aa9a:	464b      	mov	r3, r9
 800aa9c:	f7f5 fdcc 	bl	8000638 <__aeabi_dmul>
 800aaa0:	4602      	mov	r2, r0
 800aaa2:	460b      	mov	r3, r1
 800aaa4:	4630      	mov	r0, r6
 800aaa6:	4639      	mov	r1, r7
 800aaa8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800aaac:	f7f5 fc0c 	bl	80002c8 <__aeabi_dsub>
 800aab0:	f805 6b01 	strb.w	r6, [r5], #1
 800aab4:	9e01      	ldr	r6, [sp, #4]
 800aab6:	9f03      	ldr	r7, [sp, #12]
 800aab8:	1bae      	subs	r6, r5, r6
 800aaba:	42b7      	cmp	r7, r6
 800aabc:	4602      	mov	r2, r0
 800aabe:	460b      	mov	r3, r1
 800aac0:	d135      	bne.n	800ab2e <_dtoa_r+0x6e6>
 800aac2:	f7f5 fc03 	bl	80002cc <__adddf3>
 800aac6:	4642      	mov	r2, r8
 800aac8:	464b      	mov	r3, r9
 800aaca:	4606      	mov	r6, r0
 800aacc:	460f      	mov	r7, r1
 800aace:	f7f6 f843 	bl	8000b58 <__aeabi_dcmpgt>
 800aad2:	b9d0      	cbnz	r0, 800ab0a <_dtoa_r+0x6c2>
 800aad4:	4642      	mov	r2, r8
 800aad6:	464b      	mov	r3, r9
 800aad8:	4630      	mov	r0, r6
 800aada:	4639      	mov	r1, r7
 800aadc:	f7f6 f814 	bl	8000b08 <__aeabi_dcmpeq>
 800aae0:	b110      	cbz	r0, 800aae8 <_dtoa_r+0x6a0>
 800aae2:	f01a 0f01 	tst.w	sl, #1
 800aae6:	d110      	bne.n	800ab0a <_dtoa_r+0x6c2>
 800aae8:	4620      	mov	r0, r4
 800aaea:	ee18 1a10 	vmov	r1, s16
 800aaee:	f000 fe79 	bl	800b7e4 <_Bfree>
 800aaf2:	2300      	movs	r3, #0
 800aaf4:	9800      	ldr	r0, [sp, #0]
 800aaf6:	702b      	strb	r3, [r5, #0]
 800aaf8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800aafa:	3001      	adds	r0, #1
 800aafc:	6018      	str	r0, [r3, #0]
 800aafe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	f43f acf1 	beq.w	800a4e8 <_dtoa_r+0xa0>
 800ab06:	601d      	str	r5, [r3, #0]
 800ab08:	e4ee      	b.n	800a4e8 <_dtoa_r+0xa0>
 800ab0a:	9f00      	ldr	r7, [sp, #0]
 800ab0c:	462b      	mov	r3, r5
 800ab0e:	461d      	mov	r5, r3
 800ab10:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ab14:	2a39      	cmp	r2, #57	; 0x39
 800ab16:	d106      	bne.n	800ab26 <_dtoa_r+0x6de>
 800ab18:	9a01      	ldr	r2, [sp, #4]
 800ab1a:	429a      	cmp	r2, r3
 800ab1c:	d1f7      	bne.n	800ab0e <_dtoa_r+0x6c6>
 800ab1e:	9901      	ldr	r1, [sp, #4]
 800ab20:	2230      	movs	r2, #48	; 0x30
 800ab22:	3701      	adds	r7, #1
 800ab24:	700a      	strb	r2, [r1, #0]
 800ab26:	781a      	ldrb	r2, [r3, #0]
 800ab28:	3201      	adds	r2, #1
 800ab2a:	701a      	strb	r2, [r3, #0]
 800ab2c:	e790      	b.n	800aa50 <_dtoa_r+0x608>
 800ab2e:	4ba6      	ldr	r3, [pc, #664]	; (800adc8 <_dtoa_r+0x980>)
 800ab30:	2200      	movs	r2, #0
 800ab32:	f7f5 fd81 	bl	8000638 <__aeabi_dmul>
 800ab36:	2200      	movs	r2, #0
 800ab38:	2300      	movs	r3, #0
 800ab3a:	4606      	mov	r6, r0
 800ab3c:	460f      	mov	r7, r1
 800ab3e:	f7f5 ffe3 	bl	8000b08 <__aeabi_dcmpeq>
 800ab42:	2800      	cmp	r0, #0
 800ab44:	d09d      	beq.n	800aa82 <_dtoa_r+0x63a>
 800ab46:	e7cf      	b.n	800aae8 <_dtoa_r+0x6a0>
 800ab48:	9a08      	ldr	r2, [sp, #32]
 800ab4a:	2a00      	cmp	r2, #0
 800ab4c:	f000 80d7 	beq.w	800acfe <_dtoa_r+0x8b6>
 800ab50:	9a06      	ldr	r2, [sp, #24]
 800ab52:	2a01      	cmp	r2, #1
 800ab54:	f300 80ba 	bgt.w	800accc <_dtoa_r+0x884>
 800ab58:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ab5a:	2a00      	cmp	r2, #0
 800ab5c:	f000 80b2 	beq.w	800acc4 <_dtoa_r+0x87c>
 800ab60:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ab64:	9e07      	ldr	r6, [sp, #28]
 800ab66:	9d04      	ldr	r5, [sp, #16]
 800ab68:	9a04      	ldr	r2, [sp, #16]
 800ab6a:	441a      	add	r2, r3
 800ab6c:	9204      	str	r2, [sp, #16]
 800ab6e:	9a05      	ldr	r2, [sp, #20]
 800ab70:	2101      	movs	r1, #1
 800ab72:	441a      	add	r2, r3
 800ab74:	4620      	mov	r0, r4
 800ab76:	9205      	str	r2, [sp, #20]
 800ab78:	f000 ff36 	bl	800b9e8 <__i2b>
 800ab7c:	4607      	mov	r7, r0
 800ab7e:	2d00      	cmp	r5, #0
 800ab80:	dd0c      	ble.n	800ab9c <_dtoa_r+0x754>
 800ab82:	9b05      	ldr	r3, [sp, #20]
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	dd09      	ble.n	800ab9c <_dtoa_r+0x754>
 800ab88:	42ab      	cmp	r3, r5
 800ab8a:	9a04      	ldr	r2, [sp, #16]
 800ab8c:	bfa8      	it	ge
 800ab8e:	462b      	movge	r3, r5
 800ab90:	1ad2      	subs	r2, r2, r3
 800ab92:	9204      	str	r2, [sp, #16]
 800ab94:	9a05      	ldr	r2, [sp, #20]
 800ab96:	1aed      	subs	r5, r5, r3
 800ab98:	1ad3      	subs	r3, r2, r3
 800ab9a:	9305      	str	r3, [sp, #20]
 800ab9c:	9b07      	ldr	r3, [sp, #28]
 800ab9e:	b31b      	cbz	r3, 800abe8 <_dtoa_r+0x7a0>
 800aba0:	9b08      	ldr	r3, [sp, #32]
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	f000 80af 	beq.w	800ad06 <_dtoa_r+0x8be>
 800aba8:	2e00      	cmp	r6, #0
 800abaa:	dd13      	ble.n	800abd4 <_dtoa_r+0x78c>
 800abac:	4639      	mov	r1, r7
 800abae:	4632      	mov	r2, r6
 800abb0:	4620      	mov	r0, r4
 800abb2:	f000 ffd9 	bl	800bb68 <__pow5mult>
 800abb6:	ee18 2a10 	vmov	r2, s16
 800abba:	4601      	mov	r1, r0
 800abbc:	4607      	mov	r7, r0
 800abbe:	4620      	mov	r0, r4
 800abc0:	f000 ff28 	bl	800ba14 <__multiply>
 800abc4:	ee18 1a10 	vmov	r1, s16
 800abc8:	4680      	mov	r8, r0
 800abca:	4620      	mov	r0, r4
 800abcc:	f000 fe0a 	bl	800b7e4 <_Bfree>
 800abd0:	ee08 8a10 	vmov	s16, r8
 800abd4:	9b07      	ldr	r3, [sp, #28]
 800abd6:	1b9a      	subs	r2, r3, r6
 800abd8:	d006      	beq.n	800abe8 <_dtoa_r+0x7a0>
 800abda:	ee18 1a10 	vmov	r1, s16
 800abde:	4620      	mov	r0, r4
 800abe0:	f000 ffc2 	bl	800bb68 <__pow5mult>
 800abe4:	ee08 0a10 	vmov	s16, r0
 800abe8:	2101      	movs	r1, #1
 800abea:	4620      	mov	r0, r4
 800abec:	f000 fefc 	bl	800b9e8 <__i2b>
 800abf0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	4606      	mov	r6, r0
 800abf6:	f340 8088 	ble.w	800ad0a <_dtoa_r+0x8c2>
 800abfa:	461a      	mov	r2, r3
 800abfc:	4601      	mov	r1, r0
 800abfe:	4620      	mov	r0, r4
 800ac00:	f000 ffb2 	bl	800bb68 <__pow5mult>
 800ac04:	9b06      	ldr	r3, [sp, #24]
 800ac06:	2b01      	cmp	r3, #1
 800ac08:	4606      	mov	r6, r0
 800ac0a:	f340 8081 	ble.w	800ad10 <_dtoa_r+0x8c8>
 800ac0e:	f04f 0800 	mov.w	r8, #0
 800ac12:	6933      	ldr	r3, [r6, #16]
 800ac14:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800ac18:	6918      	ldr	r0, [r3, #16]
 800ac1a:	f000 fe95 	bl	800b948 <__hi0bits>
 800ac1e:	f1c0 0020 	rsb	r0, r0, #32
 800ac22:	9b05      	ldr	r3, [sp, #20]
 800ac24:	4418      	add	r0, r3
 800ac26:	f010 001f 	ands.w	r0, r0, #31
 800ac2a:	f000 8092 	beq.w	800ad52 <_dtoa_r+0x90a>
 800ac2e:	f1c0 0320 	rsb	r3, r0, #32
 800ac32:	2b04      	cmp	r3, #4
 800ac34:	f340 808a 	ble.w	800ad4c <_dtoa_r+0x904>
 800ac38:	f1c0 001c 	rsb	r0, r0, #28
 800ac3c:	9b04      	ldr	r3, [sp, #16]
 800ac3e:	4403      	add	r3, r0
 800ac40:	9304      	str	r3, [sp, #16]
 800ac42:	9b05      	ldr	r3, [sp, #20]
 800ac44:	4403      	add	r3, r0
 800ac46:	4405      	add	r5, r0
 800ac48:	9305      	str	r3, [sp, #20]
 800ac4a:	9b04      	ldr	r3, [sp, #16]
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	dd07      	ble.n	800ac60 <_dtoa_r+0x818>
 800ac50:	ee18 1a10 	vmov	r1, s16
 800ac54:	461a      	mov	r2, r3
 800ac56:	4620      	mov	r0, r4
 800ac58:	f000 ffe0 	bl	800bc1c <__lshift>
 800ac5c:	ee08 0a10 	vmov	s16, r0
 800ac60:	9b05      	ldr	r3, [sp, #20]
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	dd05      	ble.n	800ac72 <_dtoa_r+0x82a>
 800ac66:	4631      	mov	r1, r6
 800ac68:	461a      	mov	r2, r3
 800ac6a:	4620      	mov	r0, r4
 800ac6c:	f000 ffd6 	bl	800bc1c <__lshift>
 800ac70:	4606      	mov	r6, r0
 800ac72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d06e      	beq.n	800ad56 <_dtoa_r+0x90e>
 800ac78:	ee18 0a10 	vmov	r0, s16
 800ac7c:	4631      	mov	r1, r6
 800ac7e:	f001 f83d 	bl	800bcfc <__mcmp>
 800ac82:	2800      	cmp	r0, #0
 800ac84:	da67      	bge.n	800ad56 <_dtoa_r+0x90e>
 800ac86:	9b00      	ldr	r3, [sp, #0]
 800ac88:	3b01      	subs	r3, #1
 800ac8a:	ee18 1a10 	vmov	r1, s16
 800ac8e:	9300      	str	r3, [sp, #0]
 800ac90:	220a      	movs	r2, #10
 800ac92:	2300      	movs	r3, #0
 800ac94:	4620      	mov	r0, r4
 800ac96:	f000 fdc7 	bl	800b828 <__multadd>
 800ac9a:	9b08      	ldr	r3, [sp, #32]
 800ac9c:	ee08 0a10 	vmov	s16, r0
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	f000 81b1 	beq.w	800b008 <_dtoa_r+0xbc0>
 800aca6:	2300      	movs	r3, #0
 800aca8:	4639      	mov	r1, r7
 800acaa:	220a      	movs	r2, #10
 800acac:	4620      	mov	r0, r4
 800acae:	f000 fdbb 	bl	800b828 <__multadd>
 800acb2:	9b02      	ldr	r3, [sp, #8]
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	4607      	mov	r7, r0
 800acb8:	f300 808e 	bgt.w	800add8 <_dtoa_r+0x990>
 800acbc:	9b06      	ldr	r3, [sp, #24]
 800acbe:	2b02      	cmp	r3, #2
 800acc0:	dc51      	bgt.n	800ad66 <_dtoa_r+0x91e>
 800acc2:	e089      	b.n	800add8 <_dtoa_r+0x990>
 800acc4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800acc6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800acca:	e74b      	b.n	800ab64 <_dtoa_r+0x71c>
 800accc:	9b03      	ldr	r3, [sp, #12]
 800acce:	1e5e      	subs	r6, r3, #1
 800acd0:	9b07      	ldr	r3, [sp, #28]
 800acd2:	42b3      	cmp	r3, r6
 800acd4:	bfbf      	itttt	lt
 800acd6:	9b07      	ldrlt	r3, [sp, #28]
 800acd8:	9607      	strlt	r6, [sp, #28]
 800acda:	1af2      	sublt	r2, r6, r3
 800acdc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800acde:	bfb6      	itet	lt
 800ace0:	189b      	addlt	r3, r3, r2
 800ace2:	1b9e      	subge	r6, r3, r6
 800ace4:	930a      	strlt	r3, [sp, #40]	; 0x28
 800ace6:	9b03      	ldr	r3, [sp, #12]
 800ace8:	bfb8      	it	lt
 800acea:	2600      	movlt	r6, #0
 800acec:	2b00      	cmp	r3, #0
 800acee:	bfb7      	itett	lt
 800acf0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800acf4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800acf8:	1a9d      	sublt	r5, r3, r2
 800acfa:	2300      	movlt	r3, #0
 800acfc:	e734      	b.n	800ab68 <_dtoa_r+0x720>
 800acfe:	9e07      	ldr	r6, [sp, #28]
 800ad00:	9d04      	ldr	r5, [sp, #16]
 800ad02:	9f08      	ldr	r7, [sp, #32]
 800ad04:	e73b      	b.n	800ab7e <_dtoa_r+0x736>
 800ad06:	9a07      	ldr	r2, [sp, #28]
 800ad08:	e767      	b.n	800abda <_dtoa_r+0x792>
 800ad0a:	9b06      	ldr	r3, [sp, #24]
 800ad0c:	2b01      	cmp	r3, #1
 800ad0e:	dc18      	bgt.n	800ad42 <_dtoa_r+0x8fa>
 800ad10:	f1ba 0f00 	cmp.w	sl, #0
 800ad14:	d115      	bne.n	800ad42 <_dtoa_r+0x8fa>
 800ad16:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ad1a:	b993      	cbnz	r3, 800ad42 <_dtoa_r+0x8fa>
 800ad1c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ad20:	0d1b      	lsrs	r3, r3, #20
 800ad22:	051b      	lsls	r3, r3, #20
 800ad24:	b183      	cbz	r3, 800ad48 <_dtoa_r+0x900>
 800ad26:	9b04      	ldr	r3, [sp, #16]
 800ad28:	3301      	adds	r3, #1
 800ad2a:	9304      	str	r3, [sp, #16]
 800ad2c:	9b05      	ldr	r3, [sp, #20]
 800ad2e:	3301      	adds	r3, #1
 800ad30:	9305      	str	r3, [sp, #20]
 800ad32:	f04f 0801 	mov.w	r8, #1
 800ad36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	f47f af6a 	bne.w	800ac12 <_dtoa_r+0x7ca>
 800ad3e:	2001      	movs	r0, #1
 800ad40:	e76f      	b.n	800ac22 <_dtoa_r+0x7da>
 800ad42:	f04f 0800 	mov.w	r8, #0
 800ad46:	e7f6      	b.n	800ad36 <_dtoa_r+0x8ee>
 800ad48:	4698      	mov	r8, r3
 800ad4a:	e7f4      	b.n	800ad36 <_dtoa_r+0x8ee>
 800ad4c:	f43f af7d 	beq.w	800ac4a <_dtoa_r+0x802>
 800ad50:	4618      	mov	r0, r3
 800ad52:	301c      	adds	r0, #28
 800ad54:	e772      	b.n	800ac3c <_dtoa_r+0x7f4>
 800ad56:	9b03      	ldr	r3, [sp, #12]
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	dc37      	bgt.n	800adcc <_dtoa_r+0x984>
 800ad5c:	9b06      	ldr	r3, [sp, #24]
 800ad5e:	2b02      	cmp	r3, #2
 800ad60:	dd34      	ble.n	800adcc <_dtoa_r+0x984>
 800ad62:	9b03      	ldr	r3, [sp, #12]
 800ad64:	9302      	str	r3, [sp, #8]
 800ad66:	9b02      	ldr	r3, [sp, #8]
 800ad68:	b96b      	cbnz	r3, 800ad86 <_dtoa_r+0x93e>
 800ad6a:	4631      	mov	r1, r6
 800ad6c:	2205      	movs	r2, #5
 800ad6e:	4620      	mov	r0, r4
 800ad70:	f000 fd5a 	bl	800b828 <__multadd>
 800ad74:	4601      	mov	r1, r0
 800ad76:	4606      	mov	r6, r0
 800ad78:	ee18 0a10 	vmov	r0, s16
 800ad7c:	f000 ffbe 	bl	800bcfc <__mcmp>
 800ad80:	2800      	cmp	r0, #0
 800ad82:	f73f adbb 	bgt.w	800a8fc <_dtoa_r+0x4b4>
 800ad86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad88:	9d01      	ldr	r5, [sp, #4]
 800ad8a:	43db      	mvns	r3, r3
 800ad8c:	9300      	str	r3, [sp, #0]
 800ad8e:	f04f 0800 	mov.w	r8, #0
 800ad92:	4631      	mov	r1, r6
 800ad94:	4620      	mov	r0, r4
 800ad96:	f000 fd25 	bl	800b7e4 <_Bfree>
 800ad9a:	2f00      	cmp	r7, #0
 800ad9c:	f43f aea4 	beq.w	800aae8 <_dtoa_r+0x6a0>
 800ada0:	f1b8 0f00 	cmp.w	r8, #0
 800ada4:	d005      	beq.n	800adb2 <_dtoa_r+0x96a>
 800ada6:	45b8      	cmp	r8, r7
 800ada8:	d003      	beq.n	800adb2 <_dtoa_r+0x96a>
 800adaa:	4641      	mov	r1, r8
 800adac:	4620      	mov	r0, r4
 800adae:	f000 fd19 	bl	800b7e4 <_Bfree>
 800adb2:	4639      	mov	r1, r7
 800adb4:	4620      	mov	r0, r4
 800adb6:	f000 fd15 	bl	800b7e4 <_Bfree>
 800adba:	e695      	b.n	800aae8 <_dtoa_r+0x6a0>
 800adbc:	2600      	movs	r6, #0
 800adbe:	4637      	mov	r7, r6
 800adc0:	e7e1      	b.n	800ad86 <_dtoa_r+0x93e>
 800adc2:	9700      	str	r7, [sp, #0]
 800adc4:	4637      	mov	r7, r6
 800adc6:	e599      	b.n	800a8fc <_dtoa_r+0x4b4>
 800adc8:	40240000 	.word	0x40240000
 800adcc:	9b08      	ldr	r3, [sp, #32]
 800adce:	2b00      	cmp	r3, #0
 800add0:	f000 80ca 	beq.w	800af68 <_dtoa_r+0xb20>
 800add4:	9b03      	ldr	r3, [sp, #12]
 800add6:	9302      	str	r3, [sp, #8]
 800add8:	2d00      	cmp	r5, #0
 800adda:	dd05      	ble.n	800ade8 <_dtoa_r+0x9a0>
 800addc:	4639      	mov	r1, r7
 800adde:	462a      	mov	r2, r5
 800ade0:	4620      	mov	r0, r4
 800ade2:	f000 ff1b 	bl	800bc1c <__lshift>
 800ade6:	4607      	mov	r7, r0
 800ade8:	f1b8 0f00 	cmp.w	r8, #0
 800adec:	d05b      	beq.n	800aea6 <_dtoa_r+0xa5e>
 800adee:	6879      	ldr	r1, [r7, #4]
 800adf0:	4620      	mov	r0, r4
 800adf2:	f000 fcb7 	bl	800b764 <_Balloc>
 800adf6:	4605      	mov	r5, r0
 800adf8:	b928      	cbnz	r0, 800ae06 <_dtoa_r+0x9be>
 800adfa:	4b87      	ldr	r3, [pc, #540]	; (800b018 <_dtoa_r+0xbd0>)
 800adfc:	4602      	mov	r2, r0
 800adfe:	f240 21ea 	movw	r1, #746	; 0x2ea
 800ae02:	f7ff bb3b 	b.w	800a47c <_dtoa_r+0x34>
 800ae06:	693a      	ldr	r2, [r7, #16]
 800ae08:	3202      	adds	r2, #2
 800ae0a:	0092      	lsls	r2, r2, #2
 800ae0c:	f107 010c 	add.w	r1, r7, #12
 800ae10:	300c      	adds	r0, #12
 800ae12:	f7fd fc81 	bl	8008718 <memcpy>
 800ae16:	2201      	movs	r2, #1
 800ae18:	4629      	mov	r1, r5
 800ae1a:	4620      	mov	r0, r4
 800ae1c:	f000 fefe 	bl	800bc1c <__lshift>
 800ae20:	9b01      	ldr	r3, [sp, #4]
 800ae22:	f103 0901 	add.w	r9, r3, #1
 800ae26:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800ae2a:	4413      	add	r3, r2
 800ae2c:	9305      	str	r3, [sp, #20]
 800ae2e:	f00a 0301 	and.w	r3, sl, #1
 800ae32:	46b8      	mov	r8, r7
 800ae34:	9304      	str	r3, [sp, #16]
 800ae36:	4607      	mov	r7, r0
 800ae38:	4631      	mov	r1, r6
 800ae3a:	ee18 0a10 	vmov	r0, s16
 800ae3e:	f7ff fa75 	bl	800a32c <quorem>
 800ae42:	4641      	mov	r1, r8
 800ae44:	9002      	str	r0, [sp, #8]
 800ae46:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ae4a:	ee18 0a10 	vmov	r0, s16
 800ae4e:	f000 ff55 	bl	800bcfc <__mcmp>
 800ae52:	463a      	mov	r2, r7
 800ae54:	9003      	str	r0, [sp, #12]
 800ae56:	4631      	mov	r1, r6
 800ae58:	4620      	mov	r0, r4
 800ae5a:	f000 ff6b 	bl	800bd34 <__mdiff>
 800ae5e:	68c2      	ldr	r2, [r0, #12]
 800ae60:	f109 3bff 	add.w	fp, r9, #4294967295
 800ae64:	4605      	mov	r5, r0
 800ae66:	bb02      	cbnz	r2, 800aeaa <_dtoa_r+0xa62>
 800ae68:	4601      	mov	r1, r0
 800ae6a:	ee18 0a10 	vmov	r0, s16
 800ae6e:	f000 ff45 	bl	800bcfc <__mcmp>
 800ae72:	4602      	mov	r2, r0
 800ae74:	4629      	mov	r1, r5
 800ae76:	4620      	mov	r0, r4
 800ae78:	9207      	str	r2, [sp, #28]
 800ae7a:	f000 fcb3 	bl	800b7e4 <_Bfree>
 800ae7e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800ae82:	ea43 0102 	orr.w	r1, r3, r2
 800ae86:	9b04      	ldr	r3, [sp, #16]
 800ae88:	430b      	orrs	r3, r1
 800ae8a:	464d      	mov	r5, r9
 800ae8c:	d10f      	bne.n	800aeae <_dtoa_r+0xa66>
 800ae8e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ae92:	d02a      	beq.n	800aeea <_dtoa_r+0xaa2>
 800ae94:	9b03      	ldr	r3, [sp, #12]
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	dd02      	ble.n	800aea0 <_dtoa_r+0xa58>
 800ae9a:	9b02      	ldr	r3, [sp, #8]
 800ae9c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800aea0:	f88b a000 	strb.w	sl, [fp]
 800aea4:	e775      	b.n	800ad92 <_dtoa_r+0x94a>
 800aea6:	4638      	mov	r0, r7
 800aea8:	e7ba      	b.n	800ae20 <_dtoa_r+0x9d8>
 800aeaa:	2201      	movs	r2, #1
 800aeac:	e7e2      	b.n	800ae74 <_dtoa_r+0xa2c>
 800aeae:	9b03      	ldr	r3, [sp, #12]
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	db04      	blt.n	800aebe <_dtoa_r+0xa76>
 800aeb4:	9906      	ldr	r1, [sp, #24]
 800aeb6:	430b      	orrs	r3, r1
 800aeb8:	9904      	ldr	r1, [sp, #16]
 800aeba:	430b      	orrs	r3, r1
 800aebc:	d122      	bne.n	800af04 <_dtoa_r+0xabc>
 800aebe:	2a00      	cmp	r2, #0
 800aec0:	ddee      	ble.n	800aea0 <_dtoa_r+0xa58>
 800aec2:	ee18 1a10 	vmov	r1, s16
 800aec6:	2201      	movs	r2, #1
 800aec8:	4620      	mov	r0, r4
 800aeca:	f000 fea7 	bl	800bc1c <__lshift>
 800aece:	4631      	mov	r1, r6
 800aed0:	ee08 0a10 	vmov	s16, r0
 800aed4:	f000 ff12 	bl	800bcfc <__mcmp>
 800aed8:	2800      	cmp	r0, #0
 800aeda:	dc03      	bgt.n	800aee4 <_dtoa_r+0xa9c>
 800aedc:	d1e0      	bne.n	800aea0 <_dtoa_r+0xa58>
 800aede:	f01a 0f01 	tst.w	sl, #1
 800aee2:	d0dd      	beq.n	800aea0 <_dtoa_r+0xa58>
 800aee4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800aee8:	d1d7      	bne.n	800ae9a <_dtoa_r+0xa52>
 800aeea:	2339      	movs	r3, #57	; 0x39
 800aeec:	f88b 3000 	strb.w	r3, [fp]
 800aef0:	462b      	mov	r3, r5
 800aef2:	461d      	mov	r5, r3
 800aef4:	3b01      	subs	r3, #1
 800aef6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800aefa:	2a39      	cmp	r2, #57	; 0x39
 800aefc:	d071      	beq.n	800afe2 <_dtoa_r+0xb9a>
 800aefe:	3201      	adds	r2, #1
 800af00:	701a      	strb	r2, [r3, #0]
 800af02:	e746      	b.n	800ad92 <_dtoa_r+0x94a>
 800af04:	2a00      	cmp	r2, #0
 800af06:	dd07      	ble.n	800af18 <_dtoa_r+0xad0>
 800af08:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800af0c:	d0ed      	beq.n	800aeea <_dtoa_r+0xaa2>
 800af0e:	f10a 0301 	add.w	r3, sl, #1
 800af12:	f88b 3000 	strb.w	r3, [fp]
 800af16:	e73c      	b.n	800ad92 <_dtoa_r+0x94a>
 800af18:	9b05      	ldr	r3, [sp, #20]
 800af1a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800af1e:	4599      	cmp	r9, r3
 800af20:	d047      	beq.n	800afb2 <_dtoa_r+0xb6a>
 800af22:	ee18 1a10 	vmov	r1, s16
 800af26:	2300      	movs	r3, #0
 800af28:	220a      	movs	r2, #10
 800af2a:	4620      	mov	r0, r4
 800af2c:	f000 fc7c 	bl	800b828 <__multadd>
 800af30:	45b8      	cmp	r8, r7
 800af32:	ee08 0a10 	vmov	s16, r0
 800af36:	f04f 0300 	mov.w	r3, #0
 800af3a:	f04f 020a 	mov.w	r2, #10
 800af3e:	4641      	mov	r1, r8
 800af40:	4620      	mov	r0, r4
 800af42:	d106      	bne.n	800af52 <_dtoa_r+0xb0a>
 800af44:	f000 fc70 	bl	800b828 <__multadd>
 800af48:	4680      	mov	r8, r0
 800af4a:	4607      	mov	r7, r0
 800af4c:	f109 0901 	add.w	r9, r9, #1
 800af50:	e772      	b.n	800ae38 <_dtoa_r+0x9f0>
 800af52:	f000 fc69 	bl	800b828 <__multadd>
 800af56:	4639      	mov	r1, r7
 800af58:	4680      	mov	r8, r0
 800af5a:	2300      	movs	r3, #0
 800af5c:	220a      	movs	r2, #10
 800af5e:	4620      	mov	r0, r4
 800af60:	f000 fc62 	bl	800b828 <__multadd>
 800af64:	4607      	mov	r7, r0
 800af66:	e7f1      	b.n	800af4c <_dtoa_r+0xb04>
 800af68:	9b03      	ldr	r3, [sp, #12]
 800af6a:	9302      	str	r3, [sp, #8]
 800af6c:	9d01      	ldr	r5, [sp, #4]
 800af6e:	ee18 0a10 	vmov	r0, s16
 800af72:	4631      	mov	r1, r6
 800af74:	f7ff f9da 	bl	800a32c <quorem>
 800af78:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800af7c:	9b01      	ldr	r3, [sp, #4]
 800af7e:	f805 ab01 	strb.w	sl, [r5], #1
 800af82:	1aea      	subs	r2, r5, r3
 800af84:	9b02      	ldr	r3, [sp, #8]
 800af86:	4293      	cmp	r3, r2
 800af88:	dd09      	ble.n	800af9e <_dtoa_r+0xb56>
 800af8a:	ee18 1a10 	vmov	r1, s16
 800af8e:	2300      	movs	r3, #0
 800af90:	220a      	movs	r2, #10
 800af92:	4620      	mov	r0, r4
 800af94:	f000 fc48 	bl	800b828 <__multadd>
 800af98:	ee08 0a10 	vmov	s16, r0
 800af9c:	e7e7      	b.n	800af6e <_dtoa_r+0xb26>
 800af9e:	9b02      	ldr	r3, [sp, #8]
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	bfc8      	it	gt
 800afa4:	461d      	movgt	r5, r3
 800afa6:	9b01      	ldr	r3, [sp, #4]
 800afa8:	bfd8      	it	le
 800afaa:	2501      	movle	r5, #1
 800afac:	441d      	add	r5, r3
 800afae:	f04f 0800 	mov.w	r8, #0
 800afb2:	ee18 1a10 	vmov	r1, s16
 800afb6:	2201      	movs	r2, #1
 800afb8:	4620      	mov	r0, r4
 800afba:	f000 fe2f 	bl	800bc1c <__lshift>
 800afbe:	4631      	mov	r1, r6
 800afc0:	ee08 0a10 	vmov	s16, r0
 800afc4:	f000 fe9a 	bl	800bcfc <__mcmp>
 800afc8:	2800      	cmp	r0, #0
 800afca:	dc91      	bgt.n	800aef0 <_dtoa_r+0xaa8>
 800afcc:	d102      	bne.n	800afd4 <_dtoa_r+0xb8c>
 800afce:	f01a 0f01 	tst.w	sl, #1
 800afd2:	d18d      	bne.n	800aef0 <_dtoa_r+0xaa8>
 800afd4:	462b      	mov	r3, r5
 800afd6:	461d      	mov	r5, r3
 800afd8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800afdc:	2a30      	cmp	r2, #48	; 0x30
 800afde:	d0fa      	beq.n	800afd6 <_dtoa_r+0xb8e>
 800afe0:	e6d7      	b.n	800ad92 <_dtoa_r+0x94a>
 800afe2:	9a01      	ldr	r2, [sp, #4]
 800afe4:	429a      	cmp	r2, r3
 800afe6:	d184      	bne.n	800aef2 <_dtoa_r+0xaaa>
 800afe8:	9b00      	ldr	r3, [sp, #0]
 800afea:	3301      	adds	r3, #1
 800afec:	9300      	str	r3, [sp, #0]
 800afee:	2331      	movs	r3, #49	; 0x31
 800aff0:	7013      	strb	r3, [r2, #0]
 800aff2:	e6ce      	b.n	800ad92 <_dtoa_r+0x94a>
 800aff4:	4b09      	ldr	r3, [pc, #36]	; (800b01c <_dtoa_r+0xbd4>)
 800aff6:	f7ff ba95 	b.w	800a524 <_dtoa_r+0xdc>
 800affa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800affc:	2b00      	cmp	r3, #0
 800affe:	f47f aa6e 	bne.w	800a4de <_dtoa_r+0x96>
 800b002:	4b07      	ldr	r3, [pc, #28]	; (800b020 <_dtoa_r+0xbd8>)
 800b004:	f7ff ba8e 	b.w	800a524 <_dtoa_r+0xdc>
 800b008:	9b02      	ldr	r3, [sp, #8]
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	dcae      	bgt.n	800af6c <_dtoa_r+0xb24>
 800b00e:	9b06      	ldr	r3, [sp, #24]
 800b010:	2b02      	cmp	r3, #2
 800b012:	f73f aea8 	bgt.w	800ad66 <_dtoa_r+0x91e>
 800b016:	e7a9      	b.n	800af6c <_dtoa_r+0xb24>
 800b018:	0800dd00 	.word	0x0800dd00
 800b01c:	0800def9 	.word	0x0800def9
 800b020:	0800dc81 	.word	0x0800dc81

0800b024 <rshift>:
 800b024:	6903      	ldr	r3, [r0, #16]
 800b026:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b02a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b02e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b032:	f100 0414 	add.w	r4, r0, #20
 800b036:	dd45      	ble.n	800b0c4 <rshift+0xa0>
 800b038:	f011 011f 	ands.w	r1, r1, #31
 800b03c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b040:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b044:	d10c      	bne.n	800b060 <rshift+0x3c>
 800b046:	f100 0710 	add.w	r7, r0, #16
 800b04a:	4629      	mov	r1, r5
 800b04c:	42b1      	cmp	r1, r6
 800b04e:	d334      	bcc.n	800b0ba <rshift+0x96>
 800b050:	1a9b      	subs	r3, r3, r2
 800b052:	009b      	lsls	r3, r3, #2
 800b054:	1eea      	subs	r2, r5, #3
 800b056:	4296      	cmp	r6, r2
 800b058:	bf38      	it	cc
 800b05a:	2300      	movcc	r3, #0
 800b05c:	4423      	add	r3, r4
 800b05e:	e015      	b.n	800b08c <rshift+0x68>
 800b060:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b064:	f1c1 0820 	rsb	r8, r1, #32
 800b068:	40cf      	lsrs	r7, r1
 800b06a:	f105 0e04 	add.w	lr, r5, #4
 800b06e:	46a1      	mov	r9, r4
 800b070:	4576      	cmp	r6, lr
 800b072:	46f4      	mov	ip, lr
 800b074:	d815      	bhi.n	800b0a2 <rshift+0x7e>
 800b076:	1a9a      	subs	r2, r3, r2
 800b078:	0092      	lsls	r2, r2, #2
 800b07a:	3a04      	subs	r2, #4
 800b07c:	3501      	adds	r5, #1
 800b07e:	42ae      	cmp	r6, r5
 800b080:	bf38      	it	cc
 800b082:	2200      	movcc	r2, #0
 800b084:	18a3      	adds	r3, r4, r2
 800b086:	50a7      	str	r7, [r4, r2]
 800b088:	b107      	cbz	r7, 800b08c <rshift+0x68>
 800b08a:	3304      	adds	r3, #4
 800b08c:	1b1a      	subs	r2, r3, r4
 800b08e:	42a3      	cmp	r3, r4
 800b090:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b094:	bf08      	it	eq
 800b096:	2300      	moveq	r3, #0
 800b098:	6102      	str	r2, [r0, #16]
 800b09a:	bf08      	it	eq
 800b09c:	6143      	streq	r3, [r0, #20]
 800b09e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b0a2:	f8dc c000 	ldr.w	ip, [ip]
 800b0a6:	fa0c fc08 	lsl.w	ip, ip, r8
 800b0aa:	ea4c 0707 	orr.w	r7, ip, r7
 800b0ae:	f849 7b04 	str.w	r7, [r9], #4
 800b0b2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b0b6:	40cf      	lsrs	r7, r1
 800b0b8:	e7da      	b.n	800b070 <rshift+0x4c>
 800b0ba:	f851 cb04 	ldr.w	ip, [r1], #4
 800b0be:	f847 cf04 	str.w	ip, [r7, #4]!
 800b0c2:	e7c3      	b.n	800b04c <rshift+0x28>
 800b0c4:	4623      	mov	r3, r4
 800b0c6:	e7e1      	b.n	800b08c <rshift+0x68>

0800b0c8 <__hexdig_fun>:
 800b0c8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800b0cc:	2b09      	cmp	r3, #9
 800b0ce:	d802      	bhi.n	800b0d6 <__hexdig_fun+0xe>
 800b0d0:	3820      	subs	r0, #32
 800b0d2:	b2c0      	uxtb	r0, r0
 800b0d4:	4770      	bx	lr
 800b0d6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800b0da:	2b05      	cmp	r3, #5
 800b0dc:	d801      	bhi.n	800b0e2 <__hexdig_fun+0x1a>
 800b0de:	3847      	subs	r0, #71	; 0x47
 800b0e0:	e7f7      	b.n	800b0d2 <__hexdig_fun+0xa>
 800b0e2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800b0e6:	2b05      	cmp	r3, #5
 800b0e8:	d801      	bhi.n	800b0ee <__hexdig_fun+0x26>
 800b0ea:	3827      	subs	r0, #39	; 0x27
 800b0ec:	e7f1      	b.n	800b0d2 <__hexdig_fun+0xa>
 800b0ee:	2000      	movs	r0, #0
 800b0f0:	4770      	bx	lr
	...

0800b0f4 <__gethex>:
 800b0f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0f8:	ed2d 8b02 	vpush	{d8}
 800b0fc:	b089      	sub	sp, #36	; 0x24
 800b0fe:	ee08 0a10 	vmov	s16, r0
 800b102:	9304      	str	r3, [sp, #16]
 800b104:	4bb4      	ldr	r3, [pc, #720]	; (800b3d8 <__gethex+0x2e4>)
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	9301      	str	r3, [sp, #4]
 800b10a:	4618      	mov	r0, r3
 800b10c:	468b      	mov	fp, r1
 800b10e:	4690      	mov	r8, r2
 800b110:	f7f5 f87e 	bl	8000210 <strlen>
 800b114:	9b01      	ldr	r3, [sp, #4]
 800b116:	f8db 2000 	ldr.w	r2, [fp]
 800b11a:	4403      	add	r3, r0
 800b11c:	4682      	mov	sl, r0
 800b11e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800b122:	9305      	str	r3, [sp, #20]
 800b124:	1c93      	adds	r3, r2, #2
 800b126:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800b12a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800b12e:	32fe      	adds	r2, #254	; 0xfe
 800b130:	18d1      	adds	r1, r2, r3
 800b132:	461f      	mov	r7, r3
 800b134:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b138:	9100      	str	r1, [sp, #0]
 800b13a:	2830      	cmp	r0, #48	; 0x30
 800b13c:	d0f8      	beq.n	800b130 <__gethex+0x3c>
 800b13e:	f7ff ffc3 	bl	800b0c8 <__hexdig_fun>
 800b142:	4604      	mov	r4, r0
 800b144:	2800      	cmp	r0, #0
 800b146:	d13a      	bne.n	800b1be <__gethex+0xca>
 800b148:	9901      	ldr	r1, [sp, #4]
 800b14a:	4652      	mov	r2, sl
 800b14c:	4638      	mov	r0, r7
 800b14e:	f7fe fa0a 	bl	8009566 <strncmp>
 800b152:	4605      	mov	r5, r0
 800b154:	2800      	cmp	r0, #0
 800b156:	d168      	bne.n	800b22a <__gethex+0x136>
 800b158:	f817 000a 	ldrb.w	r0, [r7, sl]
 800b15c:	eb07 060a 	add.w	r6, r7, sl
 800b160:	f7ff ffb2 	bl	800b0c8 <__hexdig_fun>
 800b164:	2800      	cmp	r0, #0
 800b166:	d062      	beq.n	800b22e <__gethex+0x13a>
 800b168:	4633      	mov	r3, r6
 800b16a:	7818      	ldrb	r0, [r3, #0]
 800b16c:	2830      	cmp	r0, #48	; 0x30
 800b16e:	461f      	mov	r7, r3
 800b170:	f103 0301 	add.w	r3, r3, #1
 800b174:	d0f9      	beq.n	800b16a <__gethex+0x76>
 800b176:	f7ff ffa7 	bl	800b0c8 <__hexdig_fun>
 800b17a:	2301      	movs	r3, #1
 800b17c:	fab0 f480 	clz	r4, r0
 800b180:	0964      	lsrs	r4, r4, #5
 800b182:	4635      	mov	r5, r6
 800b184:	9300      	str	r3, [sp, #0]
 800b186:	463a      	mov	r2, r7
 800b188:	4616      	mov	r6, r2
 800b18a:	3201      	adds	r2, #1
 800b18c:	7830      	ldrb	r0, [r6, #0]
 800b18e:	f7ff ff9b 	bl	800b0c8 <__hexdig_fun>
 800b192:	2800      	cmp	r0, #0
 800b194:	d1f8      	bne.n	800b188 <__gethex+0x94>
 800b196:	9901      	ldr	r1, [sp, #4]
 800b198:	4652      	mov	r2, sl
 800b19a:	4630      	mov	r0, r6
 800b19c:	f7fe f9e3 	bl	8009566 <strncmp>
 800b1a0:	b980      	cbnz	r0, 800b1c4 <__gethex+0xd0>
 800b1a2:	b94d      	cbnz	r5, 800b1b8 <__gethex+0xc4>
 800b1a4:	eb06 050a 	add.w	r5, r6, sl
 800b1a8:	462a      	mov	r2, r5
 800b1aa:	4616      	mov	r6, r2
 800b1ac:	3201      	adds	r2, #1
 800b1ae:	7830      	ldrb	r0, [r6, #0]
 800b1b0:	f7ff ff8a 	bl	800b0c8 <__hexdig_fun>
 800b1b4:	2800      	cmp	r0, #0
 800b1b6:	d1f8      	bne.n	800b1aa <__gethex+0xb6>
 800b1b8:	1bad      	subs	r5, r5, r6
 800b1ba:	00ad      	lsls	r5, r5, #2
 800b1bc:	e004      	b.n	800b1c8 <__gethex+0xd4>
 800b1be:	2400      	movs	r4, #0
 800b1c0:	4625      	mov	r5, r4
 800b1c2:	e7e0      	b.n	800b186 <__gethex+0x92>
 800b1c4:	2d00      	cmp	r5, #0
 800b1c6:	d1f7      	bne.n	800b1b8 <__gethex+0xc4>
 800b1c8:	7833      	ldrb	r3, [r6, #0]
 800b1ca:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b1ce:	2b50      	cmp	r3, #80	; 0x50
 800b1d0:	d13b      	bne.n	800b24a <__gethex+0x156>
 800b1d2:	7873      	ldrb	r3, [r6, #1]
 800b1d4:	2b2b      	cmp	r3, #43	; 0x2b
 800b1d6:	d02c      	beq.n	800b232 <__gethex+0x13e>
 800b1d8:	2b2d      	cmp	r3, #45	; 0x2d
 800b1da:	d02e      	beq.n	800b23a <__gethex+0x146>
 800b1dc:	1c71      	adds	r1, r6, #1
 800b1de:	f04f 0900 	mov.w	r9, #0
 800b1e2:	7808      	ldrb	r0, [r1, #0]
 800b1e4:	f7ff ff70 	bl	800b0c8 <__hexdig_fun>
 800b1e8:	1e43      	subs	r3, r0, #1
 800b1ea:	b2db      	uxtb	r3, r3
 800b1ec:	2b18      	cmp	r3, #24
 800b1ee:	d82c      	bhi.n	800b24a <__gethex+0x156>
 800b1f0:	f1a0 0210 	sub.w	r2, r0, #16
 800b1f4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b1f8:	f7ff ff66 	bl	800b0c8 <__hexdig_fun>
 800b1fc:	1e43      	subs	r3, r0, #1
 800b1fe:	b2db      	uxtb	r3, r3
 800b200:	2b18      	cmp	r3, #24
 800b202:	d91d      	bls.n	800b240 <__gethex+0x14c>
 800b204:	f1b9 0f00 	cmp.w	r9, #0
 800b208:	d000      	beq.n	800b20c <__gethex+0x118>
 800b20a:	4252      	negs	r2, r2
 800b20c:	4415      	add	r5, r2
 800b20e:	f8cb 1000 	str.w	r1, [fp]
 800b212:	b1e4      	cbz	r4, 800b24e <__gethex+0x15a>
 800b214:	9b00      	ldr	r3, [sp, #0]
 800b216:	2b00      	cmp	r3, #0
 800b218:	bf14      	ite	ne
 800b21a:	2700      	movne	r7, #0
 800b21c:	2706      	moveq	r7, #6
 800b21e:	4638      	mov	r0, r7
 800b220:	b009      	add	sp, #36	; 0x24
 800b222:	ecbd 8b02 	vpop	{d8}
 800b226:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b22a:	463e      	mov	r6, r7
 800b22c:	4625      	mov	r5, r4
 800b22e:	2401      	movs	r4, #1
 800b230:	e7ca      	b.n	800b1c8 <__gethex+0xd4>
 800b232:	f04f 0900 	mov.w	r9, #0
 800b236:	1cb1      	adds	r1, r6, #2
 800b238:	e7d3      	b.n	800b1e2 <__gethex+0xee>
 800b23a:	f04f 0901 	mov.w	r9, #1
 800b23e:	e7fa      	b.n	800b236 <__gethex+0x142>
 800b240:	230a      	movs	r3, #10
 800b242:	fb03 0202 	mla	r2, r3, r2, r0
 800b246:	3a10      	subs	r2, #16
 800b248:	e7d4      	b.n	800b1f4 <__gethex+0x100>
 800b24a:	4631      	mov	r1, r6
 800b24c:	e7df      	b.n	800b20e <__gethex+0x11a>
 800b24e:	1bf3      	subs	r3, r6, r7
 800b250:	3b01      	subs	r3, #1
 800b252:	4621      	mov	r1, r4
 800b254:	2b07      	cmp	r3, #7
 800b256:	dc0b      	bgt.n	800b270 <__gethex+0x17c>
 800b258:	ee18 0a10 	vmov	r0, s16
 800b25c:	f000 fa82 	bl	800b764 <_Balloc>
 800b260:	4604      	mov	r4, r0
 800b262:	b940      	cbnz	r0, 800b276 <__gethex+0x182>
 800b264:	4b5d      	ldr	r3, [pc, #372]	; (800b3dc <__gethex+0x2e8>)
 800b266:	4602      	mov	r2, r0
 800b268:	21de      	movs	r1, #222	; 0xde
 800b26a:	485d      	ldr	r0, [pc, #372]	; (800b3e0 <__gethex+0x2ec>)
 800b26c:	f001 fdd0 	bl	800ce10 <__assert_func>
 800b270:	3101      	adds	r1, #1
 800b272:	105b      	asrs	r3, r3, #1
 800b274:	e7ee      	b.n	800b254 <__gethex+0x160>
 800b276:	f100 0914 	add.w	r9, r0, #20
 800b27a:	f04f 0b00 	mov.w	fp, #0
 800b27e:	f1ca 0301 	rsb	r3, sl, #1
 800b282:	f8cd 9008 	str.w	r9, [sp, #8]
 800b286:	f8cd b000 	str.w	fp, [sp]
 800b28a:	9306      	str	r3, [sp, #24]
 800b28c:	42b7      	cmp	r7, r6
 800b28e:	d340      	bcc.n	800b312 <__gethex+0x21e>
 800b290:	9802      	ldr	r0, [sp, #8]
 800b292:	9b00      	ldr	r3, [sp, #0]
 800b294:	f840 3b04 	str.w	r3, [r0], #4
 800b298:	eba0 0009 	sub.w	r0, r0, r9
 800b29c:	1080      	asrs	r0, r0, #2
 800b29e:	0146      	lsls	r6, r0, #5
 800b2a0:	6120      	str	r0, [r4, #16]
 800b2a2:	4618      	mov	r0, r3
 800b2a4:	f000 fb50 	bl	800b948 <__hi0bits>
 800b2a8:	1a30      	subs	r0, r6, r0
 800b2aa:	f8d8 6000 	ldr.w	r6, [r8]
 800b2ae:	42b0      	cmp	r0, r6
 800b2b0:	dd63      	ble.n	800b37a <__gethex+0x286>
 800b2b2:	1b87      	subs	r7, r0, r6
 800b2b4:	4639      	mov	r1, r7
 800b2b6:	4620      	mov	r0, r4
 800b2b8:	f000 fef4 	bl	800c0a4 <__any_on>
 800b2bc:	4682      	mov	sl, r0
 800b2be:	b1a8      	cbz	r0, 800b2ec <__gethex+0x1f8>
 800b2c0:	1e7b      	subs	r3, r7, #1
 800b2c2:	1159      	asrs	r1, r3, #5
 800b2c4:	f003 021f 	and.w	r2, r3, #31
 800b2c8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800b2cc:	f04f 0a01 	mov.w	sl, #1
 800b2d0:	fa0a f202 	lsl.w	r2, sl, r2
 800b2d4:	420a      	tst	r2, r1
 800b2d6:	d009      	beq.n	800b2ec <__gethex+0x1f8>
 800b2d8:	4553      	cmp	r3, sl
 800b2da:	dd05      	ble.n	800b2e8 <__gethex+0x1f4>
 800b2dc:	1eb9      	subs	r1, r7, #2
 800b2de:	4620      	mov	r0, r4
 800b2e0:	f000 fee0 	bl	800c0a4 <__any_on>
 800b2e4:	2800      	cmp	r0, #0
 800b2e6:	d145      	bne.n	800b374 <__gethex+0x280>
 800b2e8:	f04f 0a02 	mov.w	sl, #2
 800b2ec:	4639      	mov	r1, r7
 800b2ee:	4620      	mov	r0, r4
 800b2f0:	f7ff fe98 	bl	800b024 <rshift>
 800b2f4:	443d      	add	r5, r7
 800b2f6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b2fa:	42ab      	cmp	r3, r5
 800b2fc:	da4c      	bge.n	800b398 <__gethex+0x2a4>
 800b2fe:	ee18 0a10 	vmov	r0, s16
 800b302:	4621      	mov	r1, r4
 800b304:	f000 fa6e 	bl	800b7e4 <_Bfree>
 800b308:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b30a:	2300      	movs	r3, #0
 800b30c:	6013      	str	r3, [r2, #0]
 800b30e:	27a3      	movs	r7, #163	; 0xa3
 800b310:	e785      	b.n	800b21e <__gethex+0x12a>
 800b312:	1e73      	subs	r3, r6, #1
 800b314:	9a05      	ldr	r2, [sp, #20]
 800b316:	9303      	str	r3, [sp, #12]
 800b318:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b31c:	4293      	cmp	r3, r2
 800b31e:	d019      	beq.n	800b354 <__gethex+0x260>
 800b320:	f1bb 0f20 	cmp.w	fp, #32
 800b324:	d107      	bne.n	800b336 <__gethex+0x242>
 800b326:	9b02      	ldr	r3, [sp, #8]
 800b328:	9a00      	ldr	r2, [sp, #0]
 800b32a:	f843 2b04 	str.w	r2, [r3], #4
 800b32e:	9302      	str	r3, [sp, #8]
 800b330:	2300      	movs	r3, #0
 800b332:	9300      	str	r3, [sp, #0]
 800b334:	469b      	mov	fp, r3
 800b336:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800b33a:	f7ff fec5 	bl	800b0c8 <__hexdig_fun>
 800b33e:	9b00      	ldr	r3, [sp, #0]
 800b340:	f000 000f 	and.w	r0, r0, #15
 800b344:	fa00 f00b 	lsl.w	r0, r0, fp
 800b348:	4303      	orrs	r3, r0
 800b34a:	9300      	str	r3, [sp, #0]
 800b34c:	f10b 0b04 	add.w	fp, fp, #4
 800b350:	9b03      	ldr	r3, [sp, #12]
 800b352:	e00d      	b.n	800b370 <__gethex+0x27c>
 800b354:	9b03      	ldr	r3, [sp, #12]
 800b356:	9a06      	ldr	r2, [sp, #24]
 800b358:	4413      	add	r3, r2
 800b35a:	42bb      	cmp	r3, r7
 800b35c:	d3e0      	bcc.n	800b320 <__gethex+0x22c>
 800b35e:	4618      	mov	r0, r3
 800b360:	9901      	ldr	r1, [sp, #4]
 800b362:	9307      	str	r3, [sp, #28]
 800b364:	4652      	mov	r2, sl
 800b366:	f7fe f8fe 	bl	8009566 <strncmp>
 800b36a:	9b07      	ldr	r3, [sp, #28]
 800b36c:	2800      	cmp	r0, #0
 800b36e:	d1d7      	bne.n	800b320 <__gethex+0x22c>
 800b370:	461e      	mov	r6, r3
 800b372:	e78b      	b.n	800b28c <__gethex+0x198>
 800b374:	f04f 0a03 	mov.w	sl, #3
 800b378:	e7b8      	b.n	800b2ec <__gethex+0x1f8>
 800b37a:	da0a      	bge.n	800b392 <__gethex+0x29e>
 800b37c:	1a37      	subs	r7, r6, r0
 800b37e:	4621      	mov	r1, r4
 800b380:	ee18 0a10 	vmov	r0, s16
 800b384:	463a      	mov	r2, r7
 800b386:	f000 fc49 	bl	800bc1c <__lshift>
 800b38a:	1bed      	subs	r5, r5, r7
 800b38c:	4604      	mov	r4, r0
 800b38e:	f100 0914 	add.w	r9, r0, #20
 800b392:	f04f 0a00 	mov.w	sl, #0
 800b396:	e7ae      	b.n	800b2f6 <__gethex+0x202>
 800b398:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800b39c:	42a8      	cmp	r0, r5
 800b39e:	dd72      	ble.n	800b486 <__gethex+0x392>
 800b3a0:	1b45      	subs	r5, r0, r5
 800b3a2:	42ae      	cmp	r6, r5
 800b3a4:	dc36      	bgt.n	800b414 <__gethex+0x320>
 800b3a6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b3aa:	2b02      	cmp	r3, #2
 800b3ac:	d02a      	beq.n	800b404 <__gethex+0x310>
 800b3ae:	2b03      	cmp	r3, #3
 800b3b0:	d02c      	beq.n	800b40c <__gethex+0x318>
 800b3b2:	2b01      	cmp	r3, #1
 800b3b4:	d11c      	bne.n	800b3f0 <__gethex+0x2fc>
 800b3b6:	42ae      	cmp	r6, r5
 800b3b8:	d11a      	bne.n	800b3f0 <__gethex+0x2fc>
 800b3ba:	2e01      	cmp	r6, #1
 800b3bc:	d112      	bne.n	800b3e4 <__gethex+0x2f0>
 800b3be:	9a04      	ldr	r2, [sp, #16]
 800b3c0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b3c4:	6013      	str	r3, [r2, #0]
 800b3c6:	2301      	movs	r3, #1
 800b3c8:	6123      	str	r3, [r4, #16]
 800b3ca:	f8c9 3000 	str.w	r3, [r9]
 800b3ce:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b3d0:	2762      	movs	r7, #98	; 0x62
 800b3d2:	601c      	str	r4, [r3, #0]
 800b3d4:	e723      	b.n	800b21e <__gethex+0x12a>
 800b3d6:	bf00      	nop
 800b3d8:	0800dd78 	.word	0x0800dd78
 800b3dc:	0800dd00 	.word	0x0800dd00
 800b3e0:	0800dd11 	.word	0x0800dd11
 800b3e4:	1e71      	subs	r1, r6, #1
 800b3e6:	4620      	mov	r0, r4
 800b3e8:	f000 fe5c 	bl	800c0a4 <__any_on>
 800b3ec:	2800      	cmp	r0, #0
 800b3ee:	d1e6      	bne.n	800b3be <__gethex+0x2ca>
 800b3f0:	ee18 0a10 	vmov	r0, s16
 800b3f4:	4621      	mov	r1, r4
 800b3f6:	f000 f9f5 	bl	800b7e4 <_Bfree>
 800b3fa:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b3fc:	2300      	movs	r3, #0
 800b3fe:	6013      	str	r3, [r2, #0]
 800b400:	2750      	movs	r7, #80	; 0x50
 800b402:	e70c      	b.n	800b21e <__gethex+0x12a>
 800b404:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b406:	2b00      	cmp	r3, #0
 800b408:	d1f2      	bne.n	800b3f0 <__gethex+0x2fc>
 800b40a:	e7d8      	b.n	800b3be <__gethex+0x2ca>
 800b40c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d1d5      	bne.n	800b3be <__gethex+0x2ca>
 800b412:	e7ed      	b.n	800b3f0 <__gethex+0x2fc>
 800b414:	1e6f      	subs	r7, r5, #1
 800b416:	f1ba 0f00 	cmp.w	sl, #0
 800b41a:	d131      	bne.n	800b480 <__gethex+0x38c>
 800b41c:	b127      	cbz	r7, 800b428 <__gethex+0x334>
 800b41e:	4639      	mov	r1, r7
 800b420:	4620      	mov	r0, r4
 800b422:	f000 fe3f 	bl	800c0a4 <__any_on>
 800b426:	4682      	mov	sl, r0
 800b428:	117b      	asrs	r3, r7, #5
 800b42a:	2101      	movs	r1, #1
 800b42c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800b430:	f007 071f 	and.w	r7, r7, #31
 800b434:	fa01 f707 	lsl.w	r7, r1, r7
 800b438:	421f      	tst	r7, r3
 800b43a:	4629      	mov	r1, r5
 800b43c:	4620      	mov	r0, r4
 800b43e:	bf18      	it	ne
 800b440:	f04a 0a02 	orrne.w	sl, sl, #2
 800b444:	1b76      	subs	r6, r6, r5
 800b446:	f7ff fded 	bl	800b024 <rshift>
 800b44a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b44e:	2702      	movs	r7, #2
 800b450:	f1ba 0f00 	cmp.w	sl, #0
 800b454:	d048      	beq.n	800b4e8 <__gethex+0x3f4>
 800b456:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b45a:	2b02      	cmp	r3, #2
 800b45c:	d015      	beq.n	800b48a <__gethex+0x396>
 800b45e:	2b03      	cmp	r3, #3
 800b460:	d017      	beq.n	800b492 <__gethex+0x39e>
 800b462:	2b01      	cmp	r3, #1
 800b464:	d109      	bne.n	800b47a <__gethex+0x386>
 800b466:	f01a 0f02 	tst.w	sl, #2
 800b46a:	d006      	beq.n	800b47a <__gethex+0x386>
 800b46c:	f8d9 0000 	ldr.w	r0, [r9]
 800b470:	ea4a 0a00 	orr.w	sl, sl, r0
 800b474:	f01a 0f01 	tst.w	sl, #1
 800b478:	d10e      	bne.n	800b498 <__gethex+0x3a4>
 800b47a:	f047 0710 	orr.w	r7, r7, #16
 800b47e:	e033      	b.n	800b4e8 <__gethex+0x3f4>
 800b480:	f04f 0a01 	mov.w	sl, #1
 800b484:	e7d0      	b.n	800b428 <__gethex+0x334>
 800b486:	2701      	movs	r7, #1
 800b488:	e7e2      	b.n	800b450 <__gethex+0x35c>
 800b48a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b48c:	f1c3 0301 	rsb	r3, r3, #1
 800b490:	9315      	str	r3, [sp, #84]	; 0x54
 800b492:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b494:	2b00      	cmp	r3, #0
 800b496:	d0f0      	beq.n	800b47a <__gethex+0x386>
 800b498:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b49c:	f104 0314 	add.w	r3, r4, #20
 800b4a0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b4a4:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b4a8:	f04f 0c00 	mov.w	ip, #0
 800b4ac:	4618      	mov	r0, r3
 800b4ae:	f853 2b04 	ldr.w	r2, [r3], #4
 800b4b2:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b4b6:	d01c      	beq.n	800b4f2 <__gethex+0x3fe>
 800b4b8:	3201      	adds	r2, #1
 800b4ba:	6002      	str	r2, [r0, #0]
 800b4bc:	2f02      	cmp	r7, #2
 800b4be:	f104 0314 	add.w	r3, r4, #20
 800b4c2:	d13f      	bne.n	800b544 <__gethex+0x450>
 800b4c4:	f8d8 2000 	ldr.w	r2, [r8]
 800b4c8:	3a01      	subs	r2, #1
 800b4ca:	42b2      	cmp	r2, r6
 800b4cc:	d10a      	bne.n	800b4e4 <__gethex+0x3f0>
 800b4ce:	1171      	asrs	r1, r6, #5
 800b4d0:	2201      	movs	r2, #1
 800b4d2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b4d6:	f006 061f 	and.w	r6, r6, #31
 800b4da:	fa02 f606 	lsl.w	r6, r2, r6
 800b4de:	421e      	tst	r6, r3
 800b4e0:	bf18      	it	ne
 800b4e2:	4617      	movne	r7, r2
 800b4e4:	f047 0720 	orr.w	r7, r7, #32
 800b4e8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b4ea:	601c      	str	r4, [r3, #0]
 800b4ec:	9b04      	ldr	r3, [sp, #16]
 800b4ee:	601d      	str	r5, [r3, #0]
 800b4f0:	e695      	b.n	800b21e <__gethex+0x12a>
 800b4f2:	4299      	cmp	r1, r3
 800b4f4:	f843 cc04 	str.w	ip, [r3, #-4]
 800b4f8:	d8d8      	bhi.n	800b4ac <__gethex+0x3b8>
 800b4fa:	68a3      	ldr	r3, [r4, #8]
 800b4fc:	459b      	cmp	fp, r3
 800b4fe:	db19      	blt.n	800b534 <__gethex+0x440>
 800b500:	6861      	ldr	r1, [r4, #4]
 800b502:	ee18 0a10 	vmov	r0, s16
 800b506:	3101      	adds	r1, #1
 800b508:	f000 f92c 	bl	800b764 <_Balloc>
 800b50c:	4681      	mov	r9, r0
 800b50e:	b918      	cbnz	r0, 800b518 <__gethex+0x424>
 800b510:	4b1a      	ldr	r3, [pc, #104]	; (800b57c <__gethex+0x488>)
 800b512:	4602      	mov	r2, r0
 800b514:	2184      	movs	r1, #132	; 0x84
 800b516:	e6a8      	b.n	800b26a <__gethex+0x176>
 800b518:	6922      	ldr	r2, [r4, #16]
 800b51a:	3202      	adds	r2, #2
 800b51c:	f104 010c 	add.w	r1, r4, #12
 800b520:	0092      	lsls	r2, r2, #2
 800b522:	300c      	adds	r0, #12
 800b524:	f7fd f8f8 	bl	8008718 <memcpy>
 800b528:	4621      	mov	r1, r4
 800b52a:	ee18 0a10 	vmov	r0, s16
 800b52e:	f000 f959 	bl	800b7e4 <_Bfree>
 800b532:	464c      	mov	r4, r9
 800b534:	6923      	ldr	r3, [r4, #16]
 800b536:	1c5a      	adds	r2, r3, #1
 800b538:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b53c:	6122      	str	r2, [r4, #16]
 800b53e:	2201      	movs	r2, #1
 800b540:	615a      	str	r2, [r3, #20]
 800b542:	e7bb      	b.n	800b4bc <__gethex+0x3c8>
 800b544:	6922      	ldr	r2, [r4, #16]
 800b546:	455a      	cmp	r2, fp
 800b548:	dd0b      	ble.n	800b562 <__gethex+0x46e>
 800b54a:	2101      	movs	r1, #1
 800b54c:	4620      	mov	r0, r4
 800b54e:	f7ff fd69 	bl	800b024 <rshift>
 800b552:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b556:	3501      	adds	r5, #1
 800b558:	42ab      	cmp	r3, r5
 800b55a:	f6ff aed0 	blt.w	800b2fe <__gethex+0x20a>
 800b55e:	2701      	movs	r7, #1
 800b560:	e7c0      	b.n	800b4e4 <__gethex+0x3f0>
 800b562:	f016 061f 	ands.w	r6, r6, #31
 800b566:	d0fa      	beq.n	800b55e <__gethex+0x46a>
 800b568:	4453      	add	r3, sl
 800b56a:	f1c6 0620 	rsb	r6, r6, #32
 800b56e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b572:	f000 f9e9 	bl	800b948 <__hi0bits>
 800b576:	42b0      	cmp	r0, r6
 800b578:	dbe7      	blt.n	800b54a <__gethex+0x456>
 800b57a:	e7f0      	b.n	800b55e <__gethex+0x46a>
 800b57c:	0800dd00 	.word	0x0800dd00

0800b580 <L_shift>:
 800b580:	f1c2 0208 	rsb	r2, r2, #8
 800b584:	0092      	lsls	r2, r2, #2
 800b586:	b570      	push	{r4, r5, r6, lr}
 800b588:	f1c2 0620 	rsb	r6, r2, #32
 800b58c:	6843      	ldr	r3, [r0, #4]
 800b58e:	6804      	ldr	r4, [r0, #0]
 800b590:	fa03 f506 	lsl.w	r5, r3, r6
 800b594:	432c      	orrs	r4, r5
 800b596:	40d3      	lsrs	r3, r2
 800b598:	6004      	str	r4, [r0, #0]
 800b59a:	f840 3f04 	str.w	r3, [r0, #4]!
 800b59e:	4288      	cmp	r0, r1
 800b5a0:	d3f4      	bcc.n	800b58c <L_shift+0xc>
 800b5a2:	bd70      	pop	{r4, r5, r6, pc}

0800b5a4 <__match>:
 800b5a4:	b530      	push	{r4, r5, lr}
 800b5a6:	6803      	ldr	r3, [r0, #0]
 800b5a8:	3301      	adds	r3, #1
 800b5aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b5ae:	b914      	cbnz	r4, 800b5b6 <__match+0x12>
 800b5b0:	6003      	str	r3, [r0, #0]
 800b5b2:	2001      	movs	r0, #1
 800b5b4:	bd30      	pop	{r4, r5, pc}
 800b5b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b5ba:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b5be:	2d19      	cmp	r5, #25
 800b5c0:	bf98      	it	ls
 800b5c2:	3220      	addls	r2, #32
 800b5c4:	42a2      	cmp	r2, r4
 800b5c6:	d0f0      	beq.n	800b5aa <__match+0x6>
 800b5c8:	2000      	movs	r0, #0
 800b5ca:	e7f3      	b.n	800b5b4 <__match+0x10>

0800b5cc <__hexnan>:
 800b5cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5d0:	680b      	ldr	r3, [r1, #0]
 800b5d2:	115e      	asrs	r6, r3, #5
 800b5d4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b5d8:	f013 031f 	ands.w	r3, r3, #31
 800b5dc:	b087      	sub	sp, #28
 800b5de:	bf18      	it	ne
 800b5e0:	3604      	addne	r6, #4
 800b5e2:	2500      	movs	r5, #0
 800b5e4:	1f37      	subs	r7, r6, #4
 800b5e6:	4690      	mov	r8, r2
 800b5e8:	6802      	ldr	r2, [r0, #0]
 800b5ea:	9301      	str	r3, [sp, #4]
 800b5ec:	4682      	mov	sl, r0
 800b5ee:	f846 5c04 	str.w	r5, [r6, #-4]
 800b5f2:	46b9      	mov	r9, r7
 800b5f4:	463c      	mov	r4, r7
 800b5f6:	9502      	str	r5, [sp, #8]
 800b5f8:	46ab      	mov	fp, r5
 800b5fa:	7851      	ldrb	r1, [r2, #1]
 800b5fc:	1c53      	adds	r3, r2, #1
 800b5fe:	9303      	str	r3, [sp, #12]
 800b600:	b341      	cbz	r1, 800b654 <__hexnan+0x88>
 800b602:	4608      	mov	r0, r1
 800b604:	9205      	str	r2, [sp, #20]
 800b606:	9104      	str	r1, [sp, #16]
 800b608:	f7ff fd5e 	bl	800b0c8 <__hexdig_fun>
 800b60c:	2800      	cmp	r0, #0
 800b60e:	d14f      	bne.n	800b6b0 <__hexnan+0xe4>
 800b610:	9904      	ldr	r1, [sp, #16]
 800b612:	9a05      	ldr	r2, [sp, #20]
 800b614:	2920      	cmp	r1, #32
 800b616:	d818      	bhi.n	800b64a <__hexnan+0x7e>
 800b618:	9b02      	ldr	r3, [sp, #8]
 800b61a:	459b      	cmp	fp, r3
 800b61c:	dd13      	ble.n	800b646 <__hexnan+0x7a>
 800b61e:	454c      	cmp	r4, r9
 800b620:	d206      	bcs.n	800b630 <__hexnan+0x64>
 800b622:	2d07      	cmp	r5, #7
 800b624:	dc04      	bgt.n	800b630 <__hexnan+0x64>
 800b626:	462a      	mov	r2, r5
 800b628:	4649      	mov	r1, r9
 800b62a:	4620      	mov	r0, r4
 800b62c:	f7ff ffa8 	bl	800b580 <L_shift>
 800b630:	4544      	cmp	r4, r8
 800b632:	d950      	bls.n	800b6d6 <__hexnan+0x10a>
 800b634:	2300      	movs	r3, #0
 800b636:	f1a4 0904 	sub.w	r9, r4, #4
 800b63a:	f844 3c04 	str.w	r3, [r4, #-4]
 800b63e:	f8cd b008 	str.w	fp, [sp, #8]
 800b642:	464c      	mov	r4, r9
 800b644:	461d      	mov	r5, r3
 800b646:	9a03      	ldr	r2, [sp, #12]
 800b648:	e7d7      	b.n	800b5fa <__hexnan+0x2e>
 800b64a:	2929      	cmp	r1, #41	; 0x29
 800b64c:	d156      	bne.n	800b6fc <__hexnan+0x130>
 800b64e:	3202      	adds	r2, #2
 800b650:	f8ca 2000 	str.w	r2, [sl]
 800b654:	f1bb 0f00 	cmp.w	fp, #0
 800b658:	d050      	beq.n	800b6fc <__hexnan+0x130>
 800b65a:	454c      	cmp	r4, r9
 800b65c:	d206      	bcs.n	800b66c <__hexnan+0xa0>
 800b65e:	2d07      	cmp	r5, #7
 800b660:	dc04      	bgt.n	800b66c <__hexnan+0xa0>
 800b662:	462a      	mov	r2, r5
 800b664:	4649      	mov	r1, r9
 800b666:	4620      	mov	r0, r4
 800b668:	f7ff ff8a 	bl	800b580 <L_shift>
 800b66c:	4544      	cmp	r4, r8
 800b66e:	d934      	bls.n	800b6da <__hexnan+0x10e>
 800b670:	f1a8 0204 	sub.w	r2, r8, #4
 800b674:	4623      	mov	r3, r4
 800b676:	f853 1b04 	ldr.w	r1, [r3], #4
 800b67a:	f842 1f04 	str.w	r1, [r2, #4]!
 800b67e:	429f      	cmp	r7, r3
 800b680:	d2f9      	bcs.n	800b676 <__hexnan+0xaa>
 800b682:	1b3b      	subs	r3, r7, r4
 800b684:	f023 0303 	bic.w	r3, r3, #3
 800b688:	3304      	adds	r3, #4
 800b68a:	3401      	adds	r4, #1
 800b68c:	3e03      	subs	r6, #3
 800b68e:	42b4      	cmp	r4, r6
 800b690:	bf88      	it	hi
 800b692:	2304      	movhi	r3, #4
 800b694:	4443      	add	r3, r8
 800b696:	2200      	movs	r2, #0
 800b698:	f843 2b04 	str.w	r2, [r3], #4
 800b69c:	429f      	cmp	r7, r3
 800b69e:	d2fb      	bcs.n	800b698 <__hexnan+0xcc>
 800b6a0:	683b      	ldr	r3, [r7, #0]
 800b6a2:	b91b      	cbnz	r3, 800b6ac <__hexnan+0xe0>
 800b6a4:	4547      	cmp	r7, r8
 800b6a6:	d127      	bne.n	800b6f8 <__hexnan+0x12c>
 800b6a8:	2301      	movs	r3, #1
 800b6aa:	603b      	str	r3, [r7, #0]
 800b6ac:	2005      	movs	r0, #5
 800b6ae:	e026      	b.n	800b6fe <__hexnan+0x132>
 800b6b0:	3501      	adds	r5, #1
 800b6b2:	2d08      	cmp	r5, #8
 800b6b4:	f10b 0b01 	add.w	fp, fp, #1
 800b6b8:	dd06      	ble.n	800b6c8 <__hexnan+0xfc>
 800b6ba:	4544      	cmp	r4, r8
 800b6bc:	d9c3      	bls.n	800b646 <__hexnan+0x7a>
 800b6be:	2300      	movs	r3, #0
 800b6c0:	f844 3c04 	str.w	r3, [r4, #-4]
 800b6c4:	2501      	movs	r5, #1
 800b6c6:	3c04      	subs	r4, #4
 800b6c8:	6822      	ldr	r2, [r4, #0]
 800b6ca:	f000 000f 	and.w	r0, r0, #15
 800b6ce:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800b6d2:	6022      	str	r2, [r4, #0]
 800b6d4:	e7b7      	b.n	800b646 <__hexnan+0x7a>
 800b6d6:	2508      	movs	r5, #8
 800b6d8:	e7b5      	b.n	800b646 <__hexnan+0x7a>
 800b6da:	9b01      	ldr	r3, [sp, #4]
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d0df      	beq.n	800b6a0 <__hexnan+0xd4>
 800b6e0:	f04f 32ff 	mov.w	r2, #4294967295
 800b6e4:	f1c3 0320 	rsb	r3, r3, #32
 800b6e8:	fa22 f303 	lsr.w	r3, r2, r3
 800b6ec:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b6f0:	401a      	ands	r2, r3
 800b6f2:	f846 2c04 	str.w	r2, [r6, #-4]
 800b6f6:	e7d3      	b.n	800b6a0 <__hexnan+0xd4>
 800b6f8:	3f04      	subs	r7, #4
 800b6fa:	e7d1      	b.n	800b6a0 <__hexnan+0xd4>
 800b6fc:	2004      	movs	r0, #4
 800b6fe:	b007      	add	sp, #28
 800b700:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b704 <_localeconv_r>:
 800b704:	4800      	ldr	r0, [pc, #0]	; (800b708 <_localeconv_r+0x4>)
 800b706:	4770      	bx	lr
 800b708:	20000164 	.word	0x20000164

0800b70c <_lseek_r>:
 800b70c:	b538      	push	{r3, r4, r5, lr}
 800b70e:	4d07      	ldr	r5, [pc, #28]	; (800b72c <_lseek_r+0x20>)
 800b710:	4604      	mov	r4, r0
 800b712:	4608      	mov	r0, r1
 800b714:	4611      	mov	r1, r2
 800b716:	2200      	movs	r2, #0
 800b718:	602a      	str	r2, [r5, #0]
 800b71a:	461a      	mov	r2, r3
 800b71c:	f7f6 f982 	bl	8001a24 <_lseek>
 800b720:	1c43      	adds	r3, r0, #1
 800b722:	d102      	bne.n	800b72a <_lseek_r+0x1e>
 800b724:	682b      	ldr	r3, [r5, #0]
 800b726:	b103      	cbz	r3, 800b72a <_lseek_r+0x1e>
 800b728:	6023      	str	r3, [r4, #0]
 800b72a:	bd38      	pop	{r3, r4, r5, pc}
 800b72c:	20000448 	.word	0x20000448

0800b730 <malloc>:
 800b730:	4b02      	ldr	r3, [pc, #8]	; (800b73c <malloc+0xc>)
 800b732:	4601      	mov	r1, r0
 800b734:	6818      	ldr	r0, [r3, #0]
 800b736:	f000 bd59 	b.w	800c1ec <_malloc_r>
 800b73a:	bf00      	nop
 800b73c:	2000000c 	.word	0x2000000c

0800b740 <__ascii_mbtowc>:
 800b740:	b082      	sub	sp, #8
 800b742:	b901      	cbnz	r1, 800b746 <__ascii_mbtowc+0x6>
 800b744:	a901      	add	r1, sp, #4
 800b746:	b142      	cbz	r2, 800b75a <__ascii_mbtowc+0x1a>
 800b748:	b14b      	cbz	r3, 800b75e <__ascii_mbtowc+0x1e>
 800b74a:	7813      	ldrb	r3, [r2, #0]
 800b74c:	600b      	str	r3, [r1, #0]
 800b74e:	7812      	ldrb	r2, [r2, #0]
 800b750:	1e10      	subs	r0, r2, #0
 800b752:	bf18      	it	ne
 800b754:	2001      	movne	r0, #1
 800b756:	b002      	add	sp, #8
 800b758:	4770      	bx	lr
 800b75a:	4610      	mov	r0, r2
 800b75c:	e7fb      	b.n	800b756 <__ascii_mbtowc+0x16>
 800b75e:	f06f 0001 	mvn.w	r0, #1
 800b762:	e7f8      	b.n	800b756 <__ascii_mbtowc+0x16>

0800b764 <_Balloc>:
 800b764:	b570      	push	{r4, r5, r6, lr}
 800b766:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b768:	4604      	mov	r4, r0
 800b76a:	460d      	mov	r5, r1
 800b76c:	b976      	cbnz	r6, 800b78c <_Balloc+0x28>
 800b76e:	2010      	movs	r0, #16
 800b770:	f7ff ffde 	bl	800b730 <malloc>
 800b774:	4602      	mov	r2, r0
 800b776:	6260      	str	r0, [r4, #36]	; 0x24
 800b778:	b920      	cbnz	r0, 800b784 <_Balloc+0x20>
 800b77a:	4b18      	ldr	r3, [pc, #96]	; (800b7dc <_Balloc+0x78>)
 800b77c:	4818      	ldr	r0, [pc, #96]	; (800b7e0 <_Balloc+0x7c>)
 800b77e:	2166      	movs	r1, #102	; 0x66
 800b780:	f001 fb46 	bl	800ce10 <__assert_func>
 800b784:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b788:	6006      	str	r6, [r0, #0]
 800b78a:	60c6      	str	r6, [r0, #12]
 800b78c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b78e:	68f3      	ldr	r3, [r6, #12]
 800b790:	b183      	cbz	r3, 800b7b4 <_Balloc+0x50>
 800b792:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b794:	68db      	ldr	r3, [r3, #12]
 800b796:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b79a:	b9b8      	cbnz	r0, 800b7cc <_Balloc+0x68>
 800b79c:	2101      	movs	r1, #1
 800b79e:	fa01 f605 	lsl.w	r6, r1, r5
 800b7a2:	1d72      	adds	r2, r6, #5
 800b7a4:	0092      	lsls	r2, r2, #2
 800b7a6:	4620      	mov	r0, r4
 800b7a8:	f000 fc9d 	bl	800c0e6 <_calloc_r>
 800b7ac:	b160      	cbz	r0, 800b7c8 <_Balloc+0x64>
 800b7ae:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b7b2:	e00e      	b.n	800b7d2 <_Balloc+0x6e>
 800b7b4:	2221      	movs	r2, #33	; 0x21
 800b7b6:	2104      	movs	r1, #4
 800b7b8:	4620      	mov	r0, r4
 800b7ba:	f000 fc94 	bl	800c0e6 <_calloc_r>
 800b7be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b7c0:	60f0      	str	r0, [r6, #12]
 800b7c2:	68db      	ldr	r3, [r3, #12]
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d1e4      	bne.n	800b792 <_Balloc+0x2e>
 800b7c8:	2000      	movs	r0, #0
 800b7ca:	bd70      	pop	{r4, r5, r6, pc}
 800b7cc:	6802      	ldr	r2, [r0, #0]
 800b7ce:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b7d2:	2300      	movs	r3, #0
 800b7d4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b7d8:	e7f7      	b.n	800b7ca <_Balloc+0x66>
 800b7da:	bf00      	nop
 800b7dc:	0800dc8e 	.word	0x0800dc8e
 800b7e0:	0800dd8c 	.word	0x0800dd8c

0800b7e4 <_Bfree>:
 800b7e4:	b570      	push	{r4, r5, r6, lr}
 800b7e6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b7e8:	4605      	mov	r5, r0
 800b7ea:	460c      	mov	r4, r1
 800b7ec:	b976      	cbnz	r6, 800b80c <_Bfree+0x28>
 800b7ee:	2010      	movs	r0, #16
 800b7f0:	f7ff ff9e 	bl	800b730 <malloc>
 800b7f4:	4602      	mov	r2, r0
 800b7f6:	6268      	str	r0, [r5, #36]	; 0x24
 800b7f8:	b920      	cbnz	r0, 800b804 <_Bfree+0x20>
 800b7fa:	4b09      	ldr	r3, [pc, #36]	; (800b820 <_Bfree+0x3c>)
 800b7fc:	4809      	ldr	r0, [pc, #36]	; (800b824 <_Bfree+0x40>)
 800b7fe:	218a      	movs	r1, #138	; 0x8a
 800b800:	f001 fb06 	bl	800ce10 <__assert_func>
 800b804:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b808:	6006      	str	r6, [r0, #0]
 800b80a:	60c6      	str	r6, [r0, #12]
 800b80c:	b13c      	cbz	r4, 800b81e <_Bfree+0x3a>
 800b80e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b810:	6862      	ldr	r2, [r4, #4]
 800b812:	68db      	ldr	r3, [r3, #12]
 800b814:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b818:	6021      	str	r1, [r4, #0]
 800b81a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b81e:	bd70      	pop	{r4, r5, r6, pc}
 800b820:	0800dc8e 	.word	0x0800dc8e
 800b824:	0800dd8c 	.word	0x0800dd8c

0800b828 <__multadd>:
 800b828:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b82c:	690d      	ldr	r5, [r1, #16]
 800b82e:	4607      	mov	r7, r0
 800b830:	460c      	mov	r4, r1
 800b832:	461e      	mov	r6, r3
 800b834:	f101 0c14 	add.w	ip, r1, #20
 800b838:	2000      	movs	r0, #0
 800b83a:	f8dc 3000 	ldr.w	r3, [ip]
 800b83e:	b299      	uxth	r1, r3
 800b840:	fb02 6101 	mla	r1, r2, r1, r6
 800b844:	0c1e      	lsrs	r6, r3, #16
 800b846:	0c0b      	lsrs	r3, r1, #16
 800b848:	fb02 3306 	mla	r3, r2, r6, r3
 800b84c:	b289      	uxth	r1, r1
 800b84e:	3001      	adds	r0, #1
 800b850:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b854:	4285      	cmp	r5, r0
 800b856:	f84c 1b04 	str.w	r1, [ip], #4
 800b85a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b85e:	dcec      	bgt.n	800b83a <__multadd+0x12>
 800b860:	b30e      	cbz	r6, 800b8a6 <__multadd+0x7e>
 800b862:	68a3      	ldr	r3, [r4, #8]
 800b864:	42ab      	cmp	r3, r5
 800b866:	dc19      	bgt.n	800b89c <__multadd+0x74>
 800b868:	6861      	ldr	r1, [r4, #4]
 800b86a:	4638      	mov	r0, r7
 800b86c:	3101      	adds	r1, #1
 800b86e:	f7ff ff79 	bl	800b764 <_Balloc>
 800b872:	4680      	mov	r8, r0
 800b874:	b928      	cbnz	r0, 800b882 <__multadd+0x5a>
 800b876:	4602      	mov	r2, r0
 800b878:	4b0c      	ldr	r3, [pc, #48]	; (800b8ac <__multadd+0x84>)
 800b87a:	480d      	ldr	r0, [pc, #52]	; (800b8b0 <__multadd+0x88>)
 800b87c:	21b5      	movs	r1, #181	; 0xb5
 800b87e:	f001 fac7 	bl	800ce10 <__assert_func>
 800b882:	6922      	ldr	r2, [r4, #16]
 800b884:	3202      	adds	r2, #2
 800b886:	f104 010c 	add.w	r1, r4, #12
 800b88a:	0092      	lsls	r2, r2, #2
 800b88c:	300c      	adds	r0, #12
 800b88e:	f7fc ff43 	bl	8008718 <memcpy>
 800b892:	4621      	mov	r1, r4
 800b894:	4638      	mov	r0, r7
 800b896:	f7ff ffa5 	bl	800b7e4 <_Bfree>
 800b89a:	4644      	mov	r4, r8
 800b89c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b8a0:	3501      	adds	r5, #1
 800b8a2:	615e      	str	r6, [r3, #20]
 800b8a4:	6125      	str	r5, [r4, #16]
 800b8a6:	4620      	mov	r0, r4
 800b8a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b8ac:	0800dd00 	.word	0x0800dd00
 800b8b0:	0800dd8c 	.word	0x0800dd8c

0800b8b4 <__s2b>:
 800b8b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b8b8:	460c      	mov	r4, r1
 800b8ba:	4615      	mov	r5, r2
 800b8bc:	461f      	mov	r7, r3
 800b8be:	2209      	movs	r2, #9
 800b8c0:	3308      	adds	r3, #8
 800b8c2:	4606      	mov	r6, r0
 800b8c4:	fb93 f3f2 	sdiv	r3, r3, r2
 800b8c8:	2100      	movs	r1, #0
 800b8ca:	2201      	movs	r2, #1
 800b8cc:	429a      	cmp	r2, r3
 800b8ce:	db09      	blt.n	800b8e4 <__s2b+0x30>
 800b8d0:	4630      	mov	r0, r6
 800b8d2:	f7ff ff47 	bl	800b764 <_Balloc>
 800b8d6:	b940      	cbnz	r0, 800b8ea <__s2b+0x36>
 800b8d8:	4602      	mov	r2, r0
 800b8da:	4b19      	ldr	r3, [pc, #100]	; (800b940 <__s2b+0x8c>)
 800b8dc:	4819      	ldr	r0, [pc, #100]	; (800b944 <__s2b+0x90>)
 800b8de:	21ce      	movs	r1, #206	; 0xce
 800b8e0:	f001 fa96 	bl	800ce10 <__assert_func>
 800b8e4:	0052      	lsls	r2, r2, #1
 800b8e6:	3101      	adds	r1, #1
 800b8e8:	e7f0      	b.n	800b8cc <__s2b+0x18>
 800b8ea:	9b08      	ldr	r3, [sp, #32]
 800b8ec:	6143      	str	r3, [r0, #20]
 800b8ee:	2d09      	cmp	r5, #9
 800b8f0:	f04f 0301 	mov.w	r3, #1
 800b8f4:	6103      	str	r3, [r0, #16]
 800b8f6:	dd16      	ble.n	800b926 <__s2b+0x72>
 800b8f8:	f104 0909 	add.w	r9, r4, #9
 800b8fc:	46c8      	mov	r8, r9
 800b8fe:	442c      	add	r4, r5
 800b900:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b904:	4601      	mov	r1, r0
 800b906:	3b30      	subs	r3, #48	; 0x30
 800b908:	220a      	movs	r2, #10
 800b90a:	4630      	mov	r0, r6
 800b90c:	f7ff ff8c 	bl	800b828 <__multadd>
 800b910:	45a0      	cmp	r8, r4
 800b912:	d1f5      	bne.n	800b900 <__s2b+0x4c>
 800b914:	f1a5 0408 	sub.w	r4, r5, #8
 800b918:	444c      	add	r4, r9
 800b91a:	1b2d      	subs	r5, r5, r4
 800b91c:	1963      	adds	r3, r4, r5
 800b91e:	42bb      	cmp	r3, r7
 800b920:	db04      	blt.n	800b92c <__s2b+0x78>
 800b922:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b926:	340a      	adds	r4, #10
 800b928:	2509      	movs	r5, #9
 800b92a:	e7f6      	b.n	800b91a <__s2b+0x66>
 800b92c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b930:	4601      	mov	r1, r0
 800b932:	3b30      	subs	r3, #48	; 0x30
 800b934:	220a      	movs	r2, #10
 800b936:	4630      	mov	r0, r6
 800b938:	f7ff ff76 	bl	800b828 <__multadd>
 800b93c:	e7ee      	b.n	800b91c <__s2b+0x68>
 800b93e:	bf00      	nop
 800b940:	0800dd00 	.word	0x0800dd00
 800b944:	0800dd8c 	.word	0x0800dd8c

0800b948 <__hi0bits>:
 800b948:	0c03      	lsrs	r3, r0, #16
 800b94a:	041b      	lsls	r3, r3, #16
 800b94c:	b9d3      	cbnz	r3, 800b984 <__hi0bits+0x3c>
 800b94e:	0400      	lsls	r0, r0, #16
 800b950:	2310      	movs	r3, #16
 800b952:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b956:	bf04      	itt	eq
 800b958:	0200      	lsleq	r0, r0, #8
 800b95a:	3308      	addeq	r3, #8
 800b95c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b960:	bf04      	itt	eq
 800b962:	0100      	lsleq	r0, r0, #4
 800b964:	3304      	addeq	r3, #4
 800b966:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b96a:	bf04      	itt	eq
 800b96c:	0080      	lsleq	r0, r0, #2
 800b96e:	3302      	addeq	r3, #2
 800b970:	2800      	cmp	r0, #0
 800b972:	db05      	blt.n	800b980 <__hi0bits+0x38>
 800b974:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b978:	f103 0301 	add.w	r3, r3, #1
 800b97c:	bf08      	it	eq
 800b97e:	2320      	moveq	r3, #32
 800b980:	4618      	mov	r0, r3
 800b982:	4770      	bx	lr
 800b984:	2300      	movs	r3, #0
 800b986:	e7e4      	b.n	800b952 <__hi0bits+0xa>

0800b988 <__lo0bits>:
 800b988:	6803      	ldr	r3, [r0, #0]
 800b98a:	f013 0207 	ands.w	r2, r3, #7
 800b98e:	4601      	mov	r1, r0
 800b990:	d00b      	beq.n	800b9aa <__lo0bits+0x22>
 800b992:	07da      	lsls	r2, r3, #31
 800b994:	d423      	bmi.n	800b9de <__lo0bits+0x56>
 800b996:	0798      	lsls	r0, r3, #30
 800b998:	bf49      	itett	mi
 800b99a:	085b      	lsrmi	r3, r3, #1
 800b99c:	089b      	lsrpl	r3, r3, #2
 800b99e:	2001      	movmi	r0, #1
 800b9a0:	600b      	strmi	r3, [r1, #0]
 800b9a2:	bf5c      	itt	pl
 800b9a4:	600b      	strpl	r3, [r1, #0]
 800b9a6:	2002      	movpl	r0, #2
 800b9a8:	4770      	bx	lr
 800b9aa:	b298      	uxth	r0, r3
 800b9ac:	b9a8      	cbnz	r0, 800b9da <__lo0bits+0x52>
 800b9ae:	0c1b      	lsrs	r3, r3, #16
 800b9b0:	2010      	movs	r0, #16
 800b9b2:	b2da      	uxtb	r2, r3
 800b9b4:	b90a      	cbnz	r2, 800b9ba <__lo0bits+0x32>
 800b9b6:	3008      	adds	r0, #8
 800b9b8:	0a1b      	lsrs	r3, r3, #8
 800b9ba:	071a      	lsls	r2, r3, #28
 800b9bc:	bf04      	itt	eq
 800b9be:	091b      	lsreq	r3, r3, #4
 800b9c0:	3004      	addeq	r0, #4
 800b9c2:	079a      	lsls	r2, r3, #30
 800b9c4:	bf04      	itt	eq
 800b9c6:	089b      	lsreq	r3, r3, #2
 800b9c8:	3002      	addeq	r0, #2
 800b9ca:	07da      	lsls	r2, r3, #31
 800b9cc:	d403      	bmi.n	800b9d6 <__lo0bits+0x4e>
 800b9ce:	085b      	lsrs	r3, r3, #1
 800b9d0:	f100 0001 	add.w	r0, r0, #1
 800b9d4:	d005      	beq.n	800b9e2 <__lo0bits+0x5a>
 800b9d6:	600b      	str	r3, [r1, #0]
 800b9d8:	4770      	bx	lr
 800b9da:	4610      	mov	r0, r2
 800b9dc:	e7e9      	b.n	800b9b2 <__lo0bits+0x2a>
 800b9de:	2000      	movs	r0, #0
 800b9e0:	4770      	bx	lr
 800b9e2:	2020      	movs	r0, #32
 800b9e4:	4770      	bx	lr
	...

0800b9e8 <__i2b>:
 800b9e8:	b510      	push	{r4, lr}
 800b9ea:	460c      	mov	r4, r1
 800b9ec:	2101      	movs	r1, #1
 800b9ee:	f7ff feb9 	bl	800b764 <_Balloc>
 800b9f2:	4602      	mov	r2, r0
 800b9f4:	b928      	cbnz	r0, 800ba02 <__i2b+0x1a>
 800b9f6:	4b05      	ldr	r3, [pc, #20]	; (800ba0c <__i2b+0x24>)
 800b9f8:	4805      	ldr	r0, [pc, #20]	; (800ba10 <__i2b+0x28>)
 800b9fa:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b9fe:	f001 fa07 	bl	800ce10 <__assert_func>
 800ba02:	2301      	movs	r3, #1
 800ba04:	6144      	str	r4, [r0, #20]
 800ba06:	6103      	str	r3, [r0, #16]
 800ba08:	bd10      	pop	{r4, pc}
 800ba0a:	bf00      	nop
 800ba0c:	0800dd00 	.word	0x0800dd00
 800ba10:	0800dd8c 	.word	0x0800dd8c

0800ba14 <__multiply>:
 800ba14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba18:	4691      	mov	r9, r2
 800ba1a:	690a      	ldr	r2, [r1, #16]
 800ba1c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ba20:	429a      	cmp	r2, r3
 800ba22:	bfb8      	it	lt
 800ba24:	460b      	movlt	r3, r1
 800ba26:	460c      	mov	r4, r1
 800ba28:	bfbc      	itt	lt
 800ba2a:	464c      	movlt	r4, r9
 800ba2c:	4699      	movlt	r9, r3
 800ba2e:	6927      	ldr	r7, [r4, #16]
 800ba30:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ba34:	68a3      	ldr	r3, [r4, #8]
 800ba36:	6861      	ldr	r1, [r4, #4]
 800ba38:	eb07 060a 	add.w	r6, r7, sl
 800ba3c:	42b3      	cmp	r3, r6
 800ba3e:	b085      	sub	sp, #20
 800ba40:	bfb8      	it	lt
 800ba42:	3101      	addlt	r1, #1
 800ba44:	f7ff fe8e 	bl	800b764 <_Balloc>
 800ba48:	b930      	cbnz	r0, 800ba58 <__multiply+0x44>
 800ba4a:	4602      	mov	r2, r0
 800ba4c:	4b44      	ldr	r3, [pc, #272]	; (800bb60 <__multiply+0x14c>)
 800ba4e:	4845      	ldr	r0, [pc, #276]	; (800bb64 <__multiply+0x150>)
 800ba50:	f240 115d 	movw	r1, #349	; 0x15d
 800ba54:	f001 f9dc 	bl	800ce10 <__assert_func>
 800ba58:	f100 0514 	add.w	r5, r0, #20
 800ba5c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ba60:	462b      	mov	r3, r5
 800ba62:	2200      	movs	r2, #0
 800ba64:	4543      	cmp	r3, r8
 800ba66:	d321      	bcc.n	800baac <__multiply+0x98>
 800ba68:	f104 0314 	add.w	r3, r4, #20
 800ba6c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800ba70:	f109 0314 	add.w	r3, r9, #20
 800ba74:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800ba78:	9202      	str	r2, [sp, #8]
 800ba7a:	1b3a      	subs	r2, r7, r4
 800ba7c:	3a15      	subs	r2, #21
 800ba7e:	f022 0203 	bic.w	r2, r2, #3
 800ba82:	3204      	adds	r2, #4
 800ba84:	f104 0115 	add.w	r1, r4, #21
 800ba88:	428f      	cmp	r7, r1
 800ba8a:	bf38      	it	cc
 800ba8c:	2204      	movcc	r2, #4
 800ba8e:	9201      	str	r2, [sp, #4]
 800ba90:	9a02      	ldr	r2, [sp, #8]
 800ba92:	9303      	str	r3, [sp, #12]
 800ba94:	429a      	cmp	r2, r3
 800ba96:	d80c      	bhi.n	800bab2 <__multiply+0x9e>
 800ba98:	2e00      	cmp	r6, #0
 800ba9a:	dd03      	ble.n	800baa4 <__multiply+0x90>
 800ba9c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d05a      	beq.n	800bb5a <__multiply+0x146>
 800baa4:	6106      	str	r6, [r0, #16]
 800baa6:	b005      	add	sp, #20
 800baa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800baac:	f843 2b04 	str.w	r2, [r3], #4
 800bab0:	e7d8      	b.n	800ba64 <__multiply+0x50>
 800bab2:	f8b3 a000 	ldrh.w	sl, [r3]
 800bab6:	f1ba 0f00 	cmp.w	sl, #0
 800baba:	d024      	beq.n	800bb06 <__multiply+0xf2>
 800babc:	f104 0e14 	add.w	lr, r4, #20
 800bac0:	46a9      	mov	r9, r5
 800bac2:	f04f 0c00 	mov.w	ip, #0
 800bac6:	f85e 2b04 	ldr.w	r2, [lr], #4
 800baca:	f8d9 1000 	ldr.w	r1, [r9]
 800bace:	fa1f fb82 	uxth.w	fp, r2
 800bad2:	b289      	uxth	r1, r1
 800bad4:	fb0a 110b 	mla	r1, sl, fp, r1
 800bad8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800badc:	f8d9 2000 	ldr.w	r2, [r9]
 800bae0:	4461      	add	r1, ip
 800bae2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bae6:	fb0a c20b 	mla	r2, sl, fp, ip
 800baea:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800baee:	b289      	uxth	r1, r1
 800baf0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800baf4:	4577      	cmp	r7, lr
 800baf6:	f849 1b04 	str.w	r1, [r9], #4
 800bafa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bafe:	d8e2      	bhi.n	800bac6 <__multiply+0xb2>
 800bb00:	9a01      	ldr	r2, [sp, #4]
 800bb02:	f845 c002 	str.w	ip, [r5, r2]
 800bb06:	9a03      	ldr	r2, [sp, #12]
 800bb08:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800bb0c:	3304      	adds	r3, #4
 800bb0e:	f1b9 0f00 	cmp.w	r9, #0
 800bb12:	d020      	beq.n	800bb56 <__multiply+0x142>
 800bb14:	6829      	ldr	r1, [r5, #0]
 800bb16:	f104 0c14 	add.w	ip, r4, #20
 800bb1a:	46ae      	mov	lr, r5
 800bb1c:	f04f 0a00 	mov.w	sl, #0
 800bb20:	f8bc b000 	ldrh.w	fp, [ip]
 800bb24:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800bb28:	fb09 220b 	mla	r2, r9, fp, r2
 800bb2c:	4492      	add	sl, r2
 800bb2e:	b289      	uxth	r1, r1
 800bb30:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800bb34:	f84e 1b04 	str.w	r1, [lr], #4
 800bb38:	f85c 2b04 	ldr.w	r2, [ip], #4
 800bb3c:	f8be 1000 	ldrh.w	r1, [lr]
 800bb40:	0c12      	lsrs	r2, r2, #16
 800bb42:	fb09 1102 	mla	r1, r9, r2, r1
 800bb46:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800bb4a:	4567      	cmp	r7, ip
 800bb4c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800bb50:	d8e6      	bhi.n	800bb20 <__multiply+0x10c>
 800bb52:	9a01      	ldr	r2, [sp, #4]
 800bb54:	50a9      	str	r1, [r5, r2]
 800bb56:	3504      	adds	r5, #4
 800bb58:	e79a      	b.n	800ba90 <__multiply+0x7c>
 800bb5a:	3e01      	subs	r6, #1
 800bb5c:	e79c      	b.n	800ba98 <__multiply+0x84>
 800bb5e:	bf00      	nop
 800bb60:	0800dd00 	.word	0x0800dd00
 800bb64:	0800dd8c 	.word	0x0800dd8c

0800bb68 <__pow5mult>:
 800bb68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bb6c:	4615      	mov	r5, r2
 800bb6e:	f012 0203 	ands.w	r2, r2, #3
 800bb72:	4606      	mov	r6, r0
 800bb74:	460f      	mov	r7, r1
 800bb76:	d007      	beq.n	800bb88 <__pow5mult+0x20>
 800bb78:	4c25      	ldr	r4, [pc, #148]	; (800bc10 <__pow5mult+0xa8>)
 800bb7a:	3a01      	subs	r2, #1
 800bb7c:	2300      	movs	r3, #0
 800bb7e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bb82:	f7ff fe51 	bl	800b828 <__multadd>
 800bb86:	4607      	mov	r7, r0
 800bb88:	10ad      	asrs	r5, r5, #2
 800bb8a:	d03d      	beq.n	800bc08 <__pow5mult+0xa0>
 800bb8c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800bb8e:	b97c      	cbnz	r4, 800bbb0 <__pow5mult+0x48>
 800bb90:	2010      	movs	r0, #16
 800bb92:	f7ff fdcd 	bl	800b730 <malloc>
 800bb96:	4602      	mov	r2, r0
 800bb98:	6270      	str	r0, [r6, #36]	; 0x24
 800bb9a:	b928      	cbnz	r0, 800bba8 <__pow5mult+0x40>
 800bb9c:	4b1d      	ldr	r3, [pc, #116]	; (800bc14 <__pow5mult+0xac>)
 800bb9e:	481e      	ldr	r0, [pc, #120]	; (800bc18 <__pow5mult+0xb0>)
 800bba0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800bba4:	f001 f934 	bl	800ce10 <__assert_func>
 800bba8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bbac:	6004      	str	r4, [r0, #0]
 800bbae:	60c4      	str	r4, [r0, #12]
 800bbb0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800bbb4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bbb8:	b94c      	cbnz	r4, 800bbce <__pow5mult+0x66>
 800bbba:	f240 2171 	movw	r1, #625	; 0x271
 800bbbe:	4630      	mov	r0, r6
 800bbc0:	f7ff ff12 	bl	800b9e8 <__i2b>
 800bbc4:	2300      	movs	r3, #0
 800bbc6:	f8c8 0008 	str.w	r0, [r8, #8]
 800bbca:	4604      	mov	r4, r0
 800bbcc:	6003      	str	r3, [r0, #0]
 800bbce:	f04f 0900 	mov.w	r9, #0
 800bbd2:	07eb      	lsls	r3, r5, #31
 800bbd4:	d50a      	bpl.n	800bbec <__pow5mult+0x84>
 800bbd6:	4639      	mov	r1, r7
 800bbd8:	4622      	mov	r2, r4
 800bbda:	4630      	mov	r0, r6
 800bbdc:	f7ff ff1a 	bl	800ba14 <__multiply>
 800bbe0:	4639      	mov	r1, r7
 800bbe2:	4680      	mov	r8, r0
 800bbe4:	4630      	mov	r0, r6
 800bbe6:	f7ff fdfd 	bl	800b7e4 <_Bfree>
 800bbea:	4647      	mov	r7, r8
 800bbec:	106d      	asrs	r5, r5, #1
 800bbee:	d00b      	beq.n	800bc08 <__pow5mult+0xa0>
 800bbf0:	6820      	ldr	r0, [r4, #0]
 800bbf2:	b938      	cbnz	r0, 800bc04 <__pow5mult+0x9c>
 800bbf4:	4622      	mov	r2, r4
 800bbf6:	4621      	mov	r1, r4
 800bbf8:	4630      	mov	r0, r6
 800bbfa:	f7ff ff0b 	bl	800ba14 <__multiply>
 800bbfe:	6020      	str	r0, [r4, #0]
 800bc00:	f8c0 9000 	str.w	r9, [r0]
 800bc04:	4604      	mov	r4, r0
 800bc06:	e7e4      	b.n	800bbd2 <__pow5mult+0x6a>
 800bc08:	4638      	mov	r0, r7
 800bc0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bc0e:	bf00      	nop
 800bc10:	0800ded8 	.word	0x0800ded8
 800bc14:	0800dc8e 	.word	0x0800dc8e
 800bc18:	0800dd8c 	.word	0x0800dd8c

0800bc1c <__lshift>:
 800bc1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc20:	460c      	mov	r4, r1
 800bc22:	6849      	ldr	r1, [r1, #4]
 800bc24:	6923      	ldr	r3, [r4, #16]
 800bc26:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bc2a:	68a3      	ldr	r3, [r4, #8]
 800bc2c:	4607      	mov	r7, r0
 800bc2e:	4691      	mov	r9, r2
 800bc30:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bc34:	f108 0601 	add.w	r6, r8, #1
 800bc38:	42b3      	cmp	r3, r6
 800bc3a:	db0b      	blt.n	800bc54 <__lshift+0x38>
 800bc3c:	4638      	mov	r0, r7
 800bc3e:	f7ff fd91 	bl	800b764 <_Balloc>
 800bc42:	4605      	mov	r5, r0
 800bc44:	b948      	cbnz	r0, 800bc5a <__lshift+0x3e>
 800bc46:	4602      	mov	r2, r0
 800bc48:	4b2a      	ldr	r3, [pc, #168]	; (800bcf4 <__lshift+0xd8>)
 800bc4a:	482b      	ldr	r0, [pc, #172]	; (800bcf8 <__lshift+0xdc>)
 800bc4c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800bc50:	f001 f8de 	bl	800ce10 <__assert_func>
 800bc54:	3101      	adds	r1, #1
 800bc56:	005b      	lsls	r3, r3, #1
 800bc58:	e7ee      	b.n	800bc38 <__lshift+0x1c>
 800bc5a:	2300      	movs	r3, #0
 800bc5c:	f100 0114 	add.w	r1, r0, #20
 800bc60:	f100 0210 	add.w	r2, r0, #16
 800bc64:	4618      	mov	r0, r3
 800bc66:	4553      	cmp	r3, sl
 800bc68:	db37      	blt.n	800bcda <__lshift+0xbe>
 800bc6a:	6920      	ldr	r0, [r4, #16]
 800bc6c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bc70:	f104 0314 	add.w	r3, r4, #20
 800bc74:	f019 091f 	ands.w	r9, r9, #31
 800bc78:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bc7c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800bc80:	d02f      	beq.n	800bce2 <__lshift+0xc6>
 800bc82:	f1c9 0e20 	rsb	lr, r9, #32
 800bc86:	468a      	mov	sl, r1
 800bc88:	f04f 0c00 	mov.w	ip, #0
 800bc8c:	681a      	ldr	r2, [r3, #0]
 800bc8e:	fa02 f209 	lsl.w	r2, r2, r9
 800bc92:	ea42 020c 	orr.w	r2, r2, ip
 800bc96:	f84a 2b04 	str.w	r2, [sl], #4
 800bc9a:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc9e:	4298      	cmp	r0, r3
 800bca0:	fa22 fc0e 	lsr.w	ip, r2, lr
 800bca4:	d8f2      	bhi.n	800bc8c <__lshift+0x70>
 800bca6:	1b03      	subs	r3, r0, r4
 800bca8:	3b15      	subs	r3, #21
 800bcaa:	f023 0303 	bic.w	r3, r3, #3
 800bcae:	3304      	adds	r3, #4
 800bcb0:	f104 0215 	add.w	r2, r4, #21
 800bcb4:	4290      	cmp	r0, r2
 800bcb6:	bf38      	it	cc
 800bcb8:	2304      	movcc	r3, #4
 800bcba:	f841 c003 	str.w	ip, [r1, r3]
 800bcbe:	f1bc 0f00 	cmp.w	ip, #0
 800bcc2:	d001      	beq.n	800bcc8 <__lshift+0xac>
 800bcc4:	f108 0602 	add.w	r6, r8, #2
 800bcc8:	3e01      	subs	r6, #1
 800bcca:	4638      	mov	r0, r7
 800bccc:	612e      	str	r6, [r5, #16]
 800bcce:	4621      	mov	r1, r4
 800bcd0:	f7ff fd88 	bl	800b7e4 <_Bfree>
 800bcd4:	4628      	mov	r0, r5
 800bcd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bcda:	f842 0f04 	str.w	r0, [r2, #4]!
 800bcde:	3301      	adds	r3, #1
 800bce0:	e7c1      	b.n	800bc66 <__lshift+0x4a>
 800bce2:	3904      	subs	r1, #4
 800bce4:	f853 2b04 	ldr.w	r2, [r3], #4
 800bce8:	f841 2f04 	str.w	r2, [r1, #4]!
 800bcec:	4298      	cmp	r0, r3
 800bcee:	d8f9      	bhi.n	800bce4 <__lshift+0xc8>
 800bcf0:	e7ea      	b.n	800bcc8 <__lshift+0xac>
 800bcf2:	bf00      	nop
 800bcf4:	0800dd00 	.word	0x0800dd00
 800bcf8:	0800dd8c 	.word	0x0800dd8c

0800bcfc <__mcmp>:
 800bcfc:	b530      	push	{r4, r5, lr}
 800bcfe:	6902      	ldr	r2, [r0, #16]
 800bd00:	690c      	ldr	r4, [r1, #16]
 800bd02:	1b12      	subs	r2, r2, r4
 800bd04:	d10e      	bne.n	800bd24 <__mcmp+0x28>
 800bd06:	f100 0314 	add.w	r3, r0, #20
 800bd0a:	3114      	adds	r1, #20
 800bd0c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800bd10:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800bd14:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800bd18:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800bd1c:	42a5      	cmp	r5, r4
 800bd1e:	d003      	beq.n	800bd28 <__mcmp+0x2c>
 800bd20:	d305      	bcc.n	800bd2e <__mcmp+0x32>
 800bd22:	2201      	movs	r2, #1
 800bd24:	4610      	mov	r0, r2
 800bd26:	bd30      	pop	{r4, r5, pc}
 800bd28:	4283      	cmp	r3, r0
 800bd2a:	d3f3      	bcc.n	800bd14 <__mcmp+0x18>
 800bd2c:	e7fa      	b.n	800bd24 <__mcmp+0x28>
 800bd2e:	f04f 32ff 	mov.w	r2, #4294967295
 800bd32:	e7f7      	b.n	800bd24 <__mcmp+0x28>

0800bd34 <__mdiff>:
 800bd34:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd38:	460c      	mov	r4, r1
 800bd3a:	4606      	mov	r6, r0
 800bd3c:	4611      	mov	r1, r2
 800bd3e:	4620      	mov	r0, r4
 800bd40:	4690      	mov	r8, r2
 800bd42:	f7ff ffdb 	bl	800bcfc <__mcmp>
 800bd46:	1e05      	subs	r5, r0, #0
 800bd48:	d110      	bne.n	800bd6c <__mdiff+0x38>
 800bd4a:	4629      	mov	r1, r5
 800bd4c:	4630      	mov	r0, r6
 800bd4e:	f7ff fd09 	bl	800b764 <_Balloc>
 800bd52:	b930      	cbnz	r0, 800bd62 <__mdiff+0x2e>
 800bd54:	4b3a      	ldr	r3, [pc, #232]	; (800be40 <__mdiff+0x10c>)
 800bd56:	4602      	mov	r2, r0
 800bd58:	f240 2132 	movw	r1, #562	; 0x232
 800bd5c:	4839      	ldr	r0, [pc, #228]	; (800be44 <__mdiff+0x110>)
 800bd5e:	f001 f857 	bl	800ce10 <__assert_func>
 800bd62:	2301      	movs	r3, #1
 800bd64:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bd68:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd6c:	bfa4      	itt	ge
 800bd6e:	4643      	movge	r3, r8
 800bd70:	46a0      	movge	r8, r4
 800bd72:	4630      	mov	r0, r6
 800bd74:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800bd78:	bfa6      	itte	ge
 800bd7a:	461c      	movge	r4, r3
 800bd7c:	2500      	movge	r5, #0
 800bd7e:	2501      	movlt	r5, #1
 800bd80:	f7ff fcf0 	bl	800b764 <_Balloc>
 800bd84:	b920      	cbnz	r0, 800bd90 <__mdiff+0x5c>
 800bd86:	4b2e      	ldr	r3, [pc, #184]	; (800be40 <__mdiff+0x10c>)
 800bd88:	4602      	mov	r2, r0
 800bd8a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800bd8e:	e7e5      	b.n	800bd5c <__mdiff+0x28>
 800bd90:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800bd94:	6926      	ldr	r6, [r4, #16]
 800bd96:	60c5      	str	r5, [r0, #12]
 800bd98:	f104 0914 	add.w	r9, r4, #20
 800bd9c:	f108 0514 	add.w	r5, r8, #20
 800bda0:	f100 0e14 	add.w	lr, r0, #20
 800bda4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800bda8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800bdac:	f108 0210 	add.w	r2, r8, #16
 800bdb0:	46f2      	mov	sl, lr
 800bdb2:	2100      	movs	r1, #0
 800bdb4:	f859 3b04 	ldr.w	r3, [r9], #4
 800bdb8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800bdbc:	fa1f f883 	uxth.w	r8, r3
 800bdc0:	fa11 f18b 	uxtah	r1, r1, fp
 800bdc4:	0c1b      	lsrs	r3, r3, #16
 800bdc6:	eba1 0808 	sub.w	r8, r1, r8
 800bdca:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800bdce:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800bdd2:	fa1f f888 	uxth.w	r8, r8
 800bdd6:	1419      	asrs	r1, r3, #16
 800bdd8:	454e      	cmp	r6, r9
 800bdda:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800bdde:	f84a 3b04 	str.w	r3, [sl], #4
 800bde2:	d8e7      	bhi.n	800bdb4 <__mdiff+0x80>
 800bde4:	1b33      	subs	r3, r6, r4
 800bde6:	3b15      	subs	r3, #21
 800bde8:	f023 0303 	bic.w	r3, r3, #3
 800bdec:	3304      	adds	r3, #4
 800bdee:	3415      	adds	r4, #21
 800bdf0:	42a6      	cmp	r6, r4
 800bdf2:	bf38      	it	cc
 800bdf4:	2304      	movcc	r3, #4
 800bdf6:	441d      	add	r5, r3
 800bdf8:	4473      	add	r3, lr
 800bdfa:	469e      	mov	lr, r3
 800bdfc:	462e      	mov	r6, r5
 800bdfe:	4566      	cmp	r6, ip
 800be00:	d30e      	bcc.n	800be20 <__mdiff+0xec>
 800be02:	f10c 0203 	add.w	r2, ip, #3
 800be06:	1b52      	subs	r2, r2, r5
 800be08:	f022 0203 	bic.w	r2, r2, #3
 800be0c:	3d03      	subs	r5, #3
 800be0e:	45ac      	cmp	ip, r5
 800be10:	bf38      	it	cc
 800be12:	2200      	movcc	r2, #0
 800be14:	441a      	add	r2, r3
 800be16:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800be1a:	b17b      	cbz	r3, 800be3c <__mdiff+0x108>
 800be1c:	6107      	str	r7, [r0, #16]
 800be1e:	e7a3      	b.n	800bd68 <__mdiff+0x34>
 800be20:	f856 8b04 	ldr.w	r8, [r6], #4
 800be24:	fa11 f288 	uxtah	r2, r1, r8
 800be28:	1414      	asrs	r4, r2, #16
 800be2a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800be2e:	b292      	uxth	r2, r2
 800be30:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800be34:	f84e 2b04 	str.w	r2, [lr], #4
 800be38:	1421      	asrs	r1, r4, #16
 800be3a:	e7e0      	b.n	800bdfe <__mdiff+0xca>
 800be3c:	3f01      	subs	r7, #1
 800be3e:	e7ea      	b.n	800be16 <__mdiff+0xe2>
 800be40:	0800dd00 	.word	0x0800dd00
 800be44:	0800dd8c 	.word	0x0800dd8c

0800be48 <__ulp>:
 800be48:	b082      	sub	sp, #8
 800be4a:	ed8d 0b00 	vstr	d0, [sp]
 800be4e:	9b01      	ldr	r3, [sp, #4]
 800be50:	4912      	ldr	r1, [pc, #72]	; (800be9c <__ulp+0x54>)
 800be52:	4019      	ands	r1, r3
 800be54:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800be58:	2900      	cmp	r1, #0
 800be5a:	dd05      	ble.n	800be68 <__ulp+0x20>
 800be5c:	2200      	movs	r2, #0
 800be5e:	460b      	mov	r3, r1
 800be60:	ec43 2b10 	vmov	d0, r2, r3
 800be64:	b002      	add	sp, #8
 800be66:	4770      	bx	lr
 800be68:	4249      	negs	r1, r1
 800be6a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800be6e:	ea4f 5021 	mov.w	r0, r1, asr #20
 800be72:	f04f 0200 	mov.w	r2, #0
 800be76:	f04f 0300 	mov.w	r3, #0
 800be7a:	da04      	bge.n	800be86 <__ulp+0x3e>
 800be7c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800be80:	fa41 f300 	asr.w	r3, r1, r0
 800be84:	e7ec      	b.n	800be60 <__ulp+0x18>
 800be86:	f1a0 0114 	sub.w	r1, r0, #20
 800be8a:	291e      	cmp	r1, #30
 800be8c:	bfda      	itte	le
 800be8e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800be92:	fa20 f101 	lsrle.w	r1, r0, r1
 800be96:	2101      	movgt	r1, #1
 800be98:	460a      	mov	r2, r1
 800be9a:	e7e1      	b.n	800be60 <__ulp+0x18>
 800be9c:	7ff00000 	.word	0x7ff00000

0800bea0 <__b2d>:
 800bea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bea2:	6905      	ldr	r5, [r0, #16]
 800bea4:	f100 0714 	add.w	r7, r0, #20
 800bea8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800beac:	1f2e      	subs	r6, r5, #4
 800beae:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800beb2:	4620      	mov	r0, r4
 800beb4:	f7ff fd48 	bl	800b948 <__hi0bits>
 800beb8:	f1c0 0320 	rsb	r3, r0, #32
 800bebc:	280a      	cmp	r0, #10
 800bebe:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800bf3c <__b2d+0x9c>
 800bec2:	600b      	str	r3, [r1, #0]
 800bec4:	dc14      	bgt.n	800bef0 <__b2d+0x50>
 800bec6:	f1c0 0e0b 	rsb	lr, r0, #11
 800beca:	fa24 f10e 	lsr.w	r1, r4, lr
 800bece:	42b7      	cmp	r7, r6
 800bed0:	ea41 030c 	orr.w	r3, r1, ip
 800bed4:	bf34      	ite	cc
 800bed6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800beda:	2100      	movcs	r1, #0
 800bedc:	3015      	adds	r0, #21
 800bede:	fa04 f000 	lsl.w	r0, r4, r0
 800bee2:	fa21 f10e 	lsr.w	r1, r1, lr
 800bee6:	ea40 0201 	orr.w	r2, r0, r1
 800beea:	ec43 2b10 	vmov	d0, r2, r3
 800beee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bef0:	42b7      	cmp	r7, r6
 800bef2:	bf3a      	itte	cc
 800bef4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800bef8:	f1a5 0608 	subcc.w	r6, r5, #8
 800befc:	2100      	movcs	r1, #0
 800befe:	380b      	subs	r0, #11
 800bf00:	d017      	beq.n	800bf32 <__b2d+0x92>
 800bf02:	f1c0 0c20 	rsb	ip, r0, #32
 800bf06:	fa04 f500 	lsl.w	r5, r4, r0
 800bf0a:	42be      	cmp	r6, r7
 800bf0c:	fa21 f40c 	lsr.w	r4, r1, ip
 800bf10:	ea45 0504 	orr.w	r5, r5, r4
 800bf14:	bf8c      	ite	hi
 800bf16:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800bf1a:	2400      	movls	r4, #0
 800bf1c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800bf20:	fa01 f000 	lsl.w	r0, r1, r0
 800bf24:	fa24 f40c 	lsr.w	r4, r4, ip
 800bf28:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800bf2c:	ea40 0204 	orr.w	r2, r0, r4
 800bf30:	e7db      	b.n	800beea <__b2d+0x4a>
 800bf32:	ea44 030c 	orr.w	r3, r4, ip
 800bf36:	460a      	mov	r2, r1
 800bf38:	e7d7      	b.n	800beea <__b2d+0x4a>
 800bf3a:	bf00      	nop
 800bf3c:	3ff00000 	.word	0x3ff00000

0800bf40 <__d2b>:
 800bf40:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bf44:	4689      	mov	r9, r1
 800bf46:	2101      	movs	r1, #1
 800bf48:	ec57 6b10 	vmov	r6, r7, d0
 800bf4c:	4690      	mov	r8, r2
 800bf4e:	f7ff fc09 	bl	800b764 <_Balloc>
 800bf52:	4604      	mov	r4, r0
 800bf54:	b930      	cbnz	r0, 800bf64 <__d2b+0x24>
 800bf56:	4602      	mov	r2, r0
 800bf58:	4b25      	ldr	r3, [pc, #148]	; (800bff0 <__d2b+0xb0>)
 800bf5a:	4826      	ldr	r0, [pc, #152]	; (800bff4 <__d2b+0xb4>)
 800bf5c:	f240 310a 	movw	r1, #778	; 0x30a
 800bf60:	f000 ff56 	bl	800ce10 <__assert_func>
 800bf64:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800bf68:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800bf6c:	bb35      	cbnz	r5, 800bfbc <__d2b+0x7c>
 800bf6e:	2e00      	cmp	r6, #0
 800bf70:	9301      	str	r3, [sp, #4]
 800bf72:	d028      	beq.n	800bfc6 <__d2b+0x86>
 800bf74:	4668      	mov	r0, sp
 800bf76:	9600      	str	r6, [sp, #0]
 800bf78:	f7ff fd06 	bl	800b988 <__lo0bits>
 800bf7c:	9900      	ldr	r1, [sp, #0]
 800bf7e:	b300      	cbz	r0, 800bfc2 <__d2b+0x82>
 800bf80:	9a01      	ldr	r2, [sp, #4]
 800bf82:	f1c0 0320 	rsb	r3, r0, #32
 800bf86:	fa02 f303 	lsl.w	r3, r2, r3
 800bf8a:	430b      	orrs	r3, r1
 800bf8c:	40c2      	lsrs	r2, r0
 800bf8e:	6163      	str	r3, [r4, #20]
 800bf90:	9201      	str	r2, [sp, #4]
 800bf92:	9b01      	ldr	r3, [sp, #4]
 800bf94:	61a3      	str	r3, [r4, #24]
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	bf14      	ite	ne
 800bf9a:	2202      	movne	r2, #2
 800bf9c:	2201      	moveq	r2, #1
 800bf9e:	6122      	str	r2, [r4, #16]
 800bfa0:	b1d5      	cbz	r5, 800bfd8 <__d2b+0x98>
 800bfa2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800bfa6:	4405      	add	r5, r0
 800bfa8:	f8c9 5000 	str.w	r5, [r9]
 800bfac:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800bfb0:	f8c8 0000 	str.w	r0, [r8]
 800bfb4:	4620      	mov	r0, r4
 800bfb6:	b003      	add	sp, #12
 800bfb8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bfbc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bfc0:	e7d5      	b.n	800bf6e <__d2b+0x2e>
 800bfc2:	6161      	str	r1, [r4, #20]
 800bfc4:	e7e5      	b.n	800bf92 <__d2b+0x52>
 800bfc6:	a801      	add	r0, sp, #4
 800bfc8:	f7ff fcde 	bl	800b988 <__lo0bits>
 800bfcc:	9b01      	ldr	r3, [sp, #4]
 800bfce:	6163      	str	r3, [r4, #20]
 800bfd0:	2201      	movs	r2, #1
 800bfd2:	6122      	str	r2, [r4, #16]
 800bfd4:	3020      	adds	r0, #32
 800bfd6:	e7e3      	b.n	800bfa0 <__d2b+0x60>
 800bfd8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bfdc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800bfe0:	f8c9 0000 	str.w	r0, [r9]
 800bfe4:	6918      	ldr	r0, [r3, #16]
 800bfe6:	f7ff fcaf 	bl	800b948 <__hi0bits>
 800bfea:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bfee:	e7df      	b.n	800bfb0 <__d2b+0x70>
 800bff0:	0800dd00 	.word	0x0800dd00
 800bff4:	0800dd8c 	.word	0x0800dd8c

0800bff8 <__ratio>:
 800bff8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bffc:	4688      	mov	r8, r1
 800bffe:	4669      	mov	r1, sp
 800c000:	4681      	mov	r9, r0
 800c002:	f7ff ff4d 	bl	800bea0 <__b2d>
 800c006:	a901      	add	r1, sp, #4
 800c008:	4640      	mov	r0, r8
 800c00a:	ec55 4b10 	vmov	r4, r5, d0
 800c00e:	f7ff ff47 	bl	800bea0 <__b2d>
 800c012:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c016:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800c01a:	eba3 0c02 	sub.w	ip, r3, r2
 800c01e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c022:	1a9b      	subs	r3, r3, r2
 800c024:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800c028:	ec51 0b10 	vmov	r0, r1, d0
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	bfd6      	itet	le
 800c030:	460a      	movle	r2, r1
 800c032:	462a      	movgt	r2, r5
 800c034:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c038:	468b      	mov	fp, r1
 800c03a:	462f      	mov	r7, r5
 800c03c:	bfd4      	ite	le
 800c03e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800c042:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c046:	4620      	mov	r0, r4
 800c048:	ee10 2a10 	vmov	r2, s0
 800c04c:	465b      	mov	r3, fp
 800c04e:	4639      	mov	r1, r7
 800c050:	f7f4 fc1c 	bl	800088c <__aeabi_ddiv>
 800c054:	ec41 0b10 	vmov	d0, r0, r1
 800c058:	b003      	add	sp, #12
 800c05a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c05e <__copybits>:
 800c05e:	3901      	subs	r1, #1
 800c060:	b570      	push	{r4, r5, r6, lr}
 800c062:	1149      	asrs	r1, r1, #5
 800c064:	6914      	ldr	r4, [r2, #16]
 800c066:	3101      	adds	r1, #1
 800c068:	f102 0314 	add.w	r3, r2, #20
 800c06c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c070:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c074:	1f05      	subs	r5, r0, #4
 800c076:	42a3      	cmp	r3, r4
 800c078:	d30c      	bcc.n	800c094 <__copybits+0x36>
 800c07a:	1aa3      	subs	r3, r4, r2
 800c07c:	3b11      	subs	r3, #17
 800c07e:	f023 0303 	bic.w	r3, r3, #3
 800c082:	3211      	adds	r2, #17
 800c084:	42a2      	cmp	r2, r4
 800c086:	bf88      	it	hi
 800c088:	2300      	movhi	r3, #0
 800c08a:	4418      	add	r0, r3
 800c08c:	2300      	movs	r3, #0
 800c08e:	4288      	cmp	r0, r1
 800c090:	d305      	bcc.n	800c09e <__copybits+0x40>
 800c092:	bd70      	pop	{r4, r5, r6, pc}
 800c094:	f853 6b04 	ldr.w	r6, [r3], #4
 800c098:	f845 6f04 	str.w	r6, [r5, #4]!
 800c09c:	e7eb      	b.n	800c076 <__copybits+0x18>
 800c09e:	f840 3b04 	str.w	r3, [r0], #4
 800c0a2:	e7f4      	b.n	800c08e <__copybits+0x30>

0800c0a4 <__any_on>:
 800c0a4:	f100 0214 	add.w	r2, r0, #20
 800c0a8:	6900      	ldr	r0, [r0, #16]
 800c0aa:	114b      	asrs	r3, r1, #5
 800c0ac:	4298      	cmp	r0, r3
 800c0ae:	b510      	push	{r4, lr}
 800c0b0:	db11      	blt.n	800c0d6 <__any_on+0x32>
 800c0b2:	dd0a      	ble.n	800c0ca <__any_on+0x26>
 800c0b4:	f011 011f 	ands.w	r1, r1, #31
 800c0b8:	d007      	beq.n	800c0ca <__any_on+0x26>
 800c0ba:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c0be:	fa24 f001 	lsr.w	r0, r4, r1
 800c0c2:	fa00 f101 	lsl.w	r1, r0, r1
 800c0c6:	428c      	cmp	r4, r1
 800c0c8:	d10b      	bne.n	800c0e2 <__any_on+0x3e>
 800c0ca:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c0ce:	4293      	cmp	r3, r2
 800c0d0:	d803      	bhi.n	800c0da <__any_on+0x36>
 800c0d2:	2000      	movs	r0, #0
 800c0d4:	bd10      	pop	{r4, pc}
 800c0d6:	4603      	mov	r3, r0
 800c0d8:	e7f7      	b.n	800c0ca <__any_on+0x26>
 800c0da:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c0de:	2900      	cmp	r1, #0
 800c0e0:	d0f5      	beq.n	800c0ce <__any_on+0x2a>
 800c0e2:	2001      	movs	r0, #1
 800c0e4:	e7f6      	b.n	800c0d4 <__any_on+0x30>

0800c0e6 <_calloc_r>:
 800c0e6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c0e8:	fba1 2402 	umull	r2, r4, r1, r2
 800c0ec:	b94c      	cbnz	r4, 800c102 <_calloc_r+0x1c>
 800c0ee:	4611      	mov	r1, r2
 800c0f0:	9201      	str	r2, [sp, #4]
 800c0f2:	f000 f87b 	bl	800c1ec <_malloc_r>
 800c0f6:	9a01      	ldr	r2, [sp, #4]
 800c0f8:	4605      	mov	r5, r0
 800c0fa:	b930      	cbnz	r0, 800c10a <_calloc_r+0x24>
 800c0fc:	4628      	mov	r0, r5
 800c0fe:	b003      	add	sp, #12
 800c100:	bd30      	pop	{r4, r5, pc}
 800c102:	220c      	movs	r2, #12
 800c104:	6002      	str	r2, [r0, #0]
 800c106:	2500      	movs	r5, #0
 800c108:	e7f8      	b.n	800c0fc <_calloc_r+0x16>
 800c10a:	4621      	mov	r1, r4
 800c10c:	f7fc fb12 	bl	8008734 <memset>
 800c110:	e7f4      	b.n	800c0fc <_calloc_r+0x16>
	...

0800c114 <_free_r>:
 800c114:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c116:	2900      	cmp	r1, #0
 800c118:	d044      	beq.n	800c1a4 <_free_r+0x90>
 800c11a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c11e:	9001      	str	r0, [sp, #4]
 800c120:	2b00      	cmp	r3, #0
 800c122:	f1a1 0404 	sub.w	r4, r1, #4
 800c126:	bfb8      	it	lt
 800c128:	18e4      	addlt	r4, r4, r3
 800c12a:	f001 f875 	bl	800d218 <__malloc_lock>
 800c12e:	4a1e      	ldr	r2, [pc, #120]	; (800c1a8 <_free_r+0x94>)
 800c130:	9801      	ldr	r0, [sp, #4]
 800c132:	6813      	ldr	r3, [r2, #0]
 800c134:	b933      	cbnz	r3, 800c144 <_free_r+0x30>
 800c136:	6063      	str	r3, [r4, #4]
 800c138:	6014      	str	r4, [r2, #0]
 800c13a:	b003      	add	sp, #12
 800c13c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c140:	f001 b870 	b.w	800d224 <__malloc_unlock>
 800c144:	42a3      	cmp	r3, r4
 800c146:	d908      	bls.n	800c15a <_free_r+0x46>
 800c148:	6825      	ldr	r5, [r4, #0]
 800c14a:	1961      	adds	r1, r4, r5
 800c14c:	428b      	cmp	r3, r1
 800c14e:	bf01      	itttt	eq
 800c150:	6819      	ldreq	r1, [r3, #0]
 800c152:	685b      	ldreq	r3, [r3, #4]
 800c154:	1949      	addeq	r1, r1, r5
 800c156:	6021      	streq	r1, [r4, #0]
 800c158:	e7ed      	b.n	800c136 <_free_r+0x22>
 800c15a:	461a      	mov	r2, r3
 800c15c:	685b      	ldr	r3, [r3, #4]
 800c15e:	b10b      	cbz	r3, 800c164 <_free_r+0x50>
 800c160:	42a3      	cmp	r3, r4
 800c162:	d9fa      	bls.n	800c15a <_free_r+0x46>
 800c164:	6811      	ldr	r1, [r2, #0]
 800c166:	1855      	adds	r5, r2, r1
 800c168:	42a5      	cmp	r5, r4
 800c16a:	d10b      	bne.n	800c184 <_free_r+0x70>
 800c16c:	6824      	ldr	r4, [r4, #0]
 800c16e:	4421      	add	r1, r4
 800c170:	1854      	adds	r4, r2, r1
 800c172:	42a3      	cmp	r3, r4
 800c174:	6011      	str	r1, [r2, #0]
 800c176:	d1e0      	bne.n	800c13a <_free_r+0x26>
 800c178:	681c      	ldr	r4, [r3, #0]
 800c17a:	685b      	ldr	r3, [r3, #4]
 800c17c:	6053      	str	r3, [r2, #4]
 800c17e:	4421      	add	r1, r4
 800c180:	6011      	str	r1, [r2, #0]
 800c182:	e7da      	b.n	800c13a <_free_r+0x26>
 800c184:	d902      	bls.n	800c18c <_free_r+0x78>
 800c186:	230c      	movs	r3, #12
 800c188:	6003      	str	r3, [r0, #0]
 800c18a:	e7d6      	b.n	800c13a <_free_r+0x26>
 800c18c:	6825      	ldr	r5, [r4, #0]
 800c18e:	1961      	adds	r1, r4, r5
 800c190:	428b      	cmp	r3, r1
 800c192:	bf04      	itt	eq
 800c194:	6819      	ldreq	r1, [r3, #0]
 800c196:	685b      	ldreq	r3, [r3, #4]
 800c198:	6063      	str	r3, [r4, #4]
 800c19a:	bf04      	itt	eq
 800c19c:	1949      	addeq	r1, r1, r5
 800c19e:	6021      	streq	r1, [r4, #0]
 800c1a0:	6054      	str	r4, [r2, #4]
 800c1a2:	e7ca      	b.n	800c13a <_free_r+0x26>
 800c1a4:	b003      	add	sp, #12
 800c1a6:	bd30      	pop	{r4, r5, pc}
 800c1a8:	20000440 	.word	0x20000440

0800c1ac <sbrk_aligned>:
 800c1ac:	b570      	push	{r4, r5, r6, lr}
 800c1ae:	4e0e      	ldr	r6, [pc, #56]	; (800c1e8 <sbrk_aligned+0x3c>)
 800c1b0:	460c      	mov	r4, r1
 800c1b2:	6831      	ldr	r1, [r6, #0]
 800c1b4:	4605      	mov	r5, r0
 800c1b6:	b911      	cbnz	r1, 800c1be <sbrk_aligned+0x12>
 800c1b8:	f000 fd26 	bl	800cc08 <_sbrk_r>
 800c1bc:	6030      	str	r0, [r6, #0]
 800c1be:	4621      	mov	r1, r4
 800c1c0:	4628      	mov	r0, r5
 800c1c2:	f000 fd21 	bl	800cc08 <_sbrk_r>
 800c1c6:	1c43      	adds	r3, r0, #1
 800c1c8:	d00a      	beq.n	800c1e0 <sbrk_aligned+0x34>
 800c1ca:	1cc4      	adds	r4, r0, #3
 800c1cc:	f024 0403 	bic.w	r4, r4, #3
 800c1d0:	42a0      	cmp	r0, r4
 800c1d2:	d007      	beq.n	800c1e4 <sbrk_aligned+0x38>
 800c1d4:	1a21      	subs	r1, r4, r0
 800c1d6:	4628      	mov	r0, r5
 800c1d8:	f000 fd16 	bl	800cc08 <_sbrk_r>
 800c1dc:	3001      	adds	r0, #1
 800c1de:	d101      	bne.n	800c1e4 <sbrk_aligned+0x38>
 800c1e0:	f04f 34ff 	mov.w	r4, #4294967295
 800c1e4:	4620      	mov	r0, r4
 800c1e6:	bd70      	pop	{r4, r5, r6, pc}
 800c1e8:	20000444 	.word	0x20000444

0800c1ec <_malloc_r>:
 800c1ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c1f0:	1ccd      	adds	r5, r1, #3
 800c1f2:	f025 0503 	bic.w	r5, r5, #3
 800c1f6:	3508      	adds	r5, #8
 800c1f8:	2d0c      	cmp	r5, #12
 800c1fa:	bf38      	it	cc
 800c1fc:	250c      	movcc	r5, #12
 800c1fe:	2d00      	cmp	r5, #0
 800c200:	4607      	mov	r7, r0
 800c202:	db01      	blt.n	800c208 <_malloc_r+0x1c>
 800c204:	42a9      	cmp	r1, r5
 800c206:	d905      	bls.n	800c214 <_malloc_r+0x28>
 800c208:	230c      	movs	r3, #12
 800c20a:	603b      	str	r3, [r7, #0]
 800c20c:	2600      	movs	r6, #0
 800c20e:	4630      	mov	r0, r6
 800c210:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c214:	4e2e      	ldr	r6, [pc, #184]	; (800c2d0 <_malloc_r+0xe4>)
 800c216:	f000 ffff 	bl	800d218 <__malloc_lock>
 800c21a:	6833      	ldr	r3, [r6, #0]
 800c21c:	461c      	mov	r4, r3
 800c21e:	bb34      	cbnz	r4, 800c26e <_malloc_r+0x82>
 800c220:	4629      	mov	r1, r5
 800c222:	4638      	mov	r0, r7
 800c224:	f7ff ffc2 	bl	800c1ac <sbrk_aligned>
 800c228:	1c43      	adds	r3, r0, #1
 800c22a:	4604      	mov	r4, r0
 800c22c:	d14d      	bne.n	800c2ca <_malloc_r+0xde>
 800c22e:	6834      	ldr	r4, [r6, #0]
 800c230:	4626      	mov	r6, r4
 800c232:	2e00      	cmp	r6, #0
 800c234:	d140      	bne.n	800c2b8 <_malloc_r+0xcc>
 800c236:	6823      	ldr	r3, [r4, #0]
 800c238:	4631      	mov	r1, r6
 800c23a:	4638      	mov	r0, r7
 800c23c:	eb04 0803 	add.w	r8, r4, r3
 800c240:	f000 fce2 	bl	800cc08 <_sbrk_r>
 800c244:	4580      	cmp	r8, r0
 800c246:	d13a      	bne.n	800c2be <_malloc_r+0xd2>
 800c248:	6821      	ldr	r1, [r4, #0]
 800c24a:	3503      	adds	r5, #3
 800c24c:	1a6d      	subs	r5, r5, r1
 800c24e:	f025 0503 	bic.w	r5, r5, #3
 800c252:	3508      	adds	r5, #8
 800c254:	2d0c      	cmp	r5, #12
 800c256:	bf38      	it	cc
 800c258:	250c      	movcc	r5, #12
 800c25a:	4629      	mov	r1, r5
 800c25c:	4638      	mov	r0, r7
 800c25e:	f7ff ffa5 	bl	800c1ac <sbrk_aligned>
 800c262:	3001      	adds	r0, #1
 800c264:	d02b      	beq.n	800c2be <_malloc_r+0xd2>
 800c266:	6823      	ldr	r3, [r4, #0]
 800c268:	442b      	add	r3, r5
 800c26a:	6023      	str	r3, [r4, #0]
 800c26c:	e00e      	b.n	800c28c <_malloc_r+0xa0>
 800c26e:	6822      	ldr	r2, [r4, #0]
 800c270:	1b52      	subs	r2, r2, r5
 800c272:	d41e      	bmi.n	800c2b2 <_malloc_r+0xc6>
 800c274:	2a0b      	cmp	r2, #11
 800c276:	d916      	bls.n	800c2a6 <_malloc_r+0xba>
 800c278:	1961      	adds	r1, r4, r5
 800c27a:	42a3      	cmp	r3, r4
 800c27c:	6025      	str	r5, [r4, #0]
 800c27e:	bf18      	it	ne
 800c280:	6059      	strne	r1, [r3, #4]
 800c282:	6863      	ldr	r3, [r4, #4]
 800c284:	bf08      	it	eq
 800c286:	6031      	streq	r1, [r6, #0]
 800c288:	5162      	str	r2, [r4, r5]
 800c28a:	604b      	str	r3, [r1, #4]
 800c28c:	4638      	mov	r0, r7
 800c28e:	f104 060b 	add.w	r6, r4, #11
 800c292:	f000 ffc7 	bl	800d224 <__malloc_unlock>
 800c296:	f026 0607 	bic.w	r6, r6, #7
 800c29a:	1d23      	adds	r3, r4, #4
 800c29c:	1af2      	subs	r2, r6, r3
 800c29e:	d0b6      	beq.n	800c20e <_malloc_r+0x22>
 800c2a0:	1b9b      	subs	r3, r3, r6
 800c2a2:	50a3      	str	r3, [r4, r2]
 800c2a4:	e7b3      	b.n	800c20e <_malloc_r+0x22>
 800c2a6:	6862      	ldr	r2, [r4, #4]
 800c2a8:	42a3      	cmp	r3, r4
 800c2aa:	bf0c      	ite	eq
 800c2ac:	6032      	streq	r2, [r6, #0]
 800c2ae:	605a      	strne	r2, [r3, #4]
 800c2b0:	e7ec      	b.n	800c28c <_malloc_r+0xa0>
 800c2b2:	4623      	mov	r3, r4
 800c2b4:	6864      	ldr	r4, [r4, #4]
 800c2b6:	e7b2      	b.n	800c21e <_malloc_r+0x32>
 800c2b8:	4634      	mov	r4, r6
 800c2ba:	6876      	ldr	r6, [r6, #4]
 800c2bc:	e7b9      	b.n	800c232 <_malloc_r+0x46>
 800c2be:	230c      	movs	r3, #12
 800c2c0:	603b      	str	r3, [r7, #0]
 800c2c2:	4638      	mov	r0, r7
 800c2c4:	f000 ffae 	bl	800d224 <__malloc_unlock>
 800c2c8:	e7a1      	b.n	800c20e <_malloc_r+0x22>
 800c2ca:	6025      	str	r5, [r4, #0]
 800c2cc:	e7de      	b.n	800c28c <_malloc_r+0xa0>
 800c2ce:	bf00      	nop
 800c2d0:	20000440 	.word	0x20000440

0800c2d4 <__ssputs_r>:
 800c2d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c2d8:	688e      	ldr	r6, [r1, #8]
 800c2da:	429e      	cmp	r6, r3
 800c2dc:	4682      	mov	sl, r0
 800c2de:	460c      	mov	r4, r1
 800c2e0:	4690      	mov	r8, r2
 800c2e2:	461f      	mov	r7, r3
 800c2e4:	d838      	bhi.n	800c358 <__ssputs_r+0x84>
 800c2e6:	898a      	ldrh	r2, [r1, #12]
 800c2e8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c2ec:	d032      	beq.n	800c354 <__ssputs_r+0x80>
 800c2ee:	6825      	ldr	r5, [r4, #0]
 800c2f0:	6909      	ldr	r1, [r1, #16]
 800c2f2:	eba5 0901 	sub.w	r9, r5, r1
 800c2f6:	6965      	ldr	r5, [r4, #20]
 800c2f8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c2fc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c300:	3301      	adds	r3, #1
 800c302:	444b      	add	r3, r9
 800c304:	106d      	asrs	r5, r5, #1
 800c306:	429d      	cmp	r5, r3
 800c308:	bf38      	it	cc
 800c30a:	461d      	movcc	r5, r3
 800c30c:	0553      	lsls	r3, r2, #21
 800c30e:	d531      	bpl.n	800c374 <__ssputs_r+0xa0>
 800c310:	4629      	mov	r1, r5
 800c312:	f7ff ff6b 	bl	800c1ec <_malloc_r>
 800c316:	4606      	mov	r6, r0
 800c318:	b950      	cbnz	r0, 800c330 <__ssputs_r+0x5c>
 800c31a:	230c      	movs	r3, #12
 800c31c:	f8ca 3000 	str.w	r3, [sl]
 800c320:	89a3      	ldrh	r3, [r4, #12]
 800c322:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c326:	81a3      	strh	r3, [r4, #12]
 800c328:	f04f 30ff 	mov.w	r0, #4294967295
 800c32c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c330:	6921      	ldr	r1, [r4, #16]
 800c332:	464a      	mov	r2, r9
 800c334:	f7fc f9f0 	bl	8008718 <memcpy>
 800c338:	89a3      	ldrh	r3, [r4, #12]
 800c33a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c33e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c342:	81a3      	strh	r3, [r4, #12]
 800c344:	6126      	str	r6, [r4, #16]
 800c346:	6165      	str	r5, [r4, #20]
 800c348:	444e      	add	r6, r9
 800c34a:	eba5 0509 	sub.w	r5, r5, r9
 800c34e:	6026      	str	r6, [r4, #0]
 800c350:	60a5      	str	r5, [r4, #8]
 800c352:	463e      	mov	r6, r7
 800c354:	42be      	cmp	r6, r7
 800c356:	d900      	bls.n	800c35a <__ssputs_r+0x86>
 800c358:	463e      	mov	r6, r7
 800c35a:	6820      	ldr	r0, [r4, #0]
 800c35c:	4632      	mov	r2, r6
 800c35e:	4641      	mov	r1, r8
 800c360:	f000 ff40 	bl	800d1e4 <memmove>
 800c364:	68a3      	ldr	r3, [r4, #8]
 800c366:	1b9b      	subs	r3, r3, r6
 800c368:	60a3      	str	r3, [r4, #8]
 800c36a:	6823      	ldr	r3, [r4, #0]
 800c36c:	4433      	add	r3, r6
 800c36e:	6023      	str	r3, [r4, #0]
 800c370:	2000      	movs	r0, #0
 800c372:	e7db      	b.n	800c32c <__ssputs_r+0x58>
 800c374:	462a      	mov	r2, r5
 800c376:	f000 ff5b 	bl	800d230 <_realloc_r>
 800c37a:	4606      	mov	r6, r0
 800c37c:	2800      	cmp	r0, #0
 800c37e:	d1e1      	bne.n	800c344 <__ssputs_r+0x70>
 800c380:	6921      	ldr	r1, [r4, #16]
 800c382:	4650      	mov	r0, sl
 800c384:	f7ff fec6 	bl	800c114 <_free_r>
 800c388:	e7c7      	b.n	800c31a <__ssputs_r+0x46>
	...

0800c38c <_svfiprintf_r>:
 800c38c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c390:	4698      	mov	r8, r3
 800c392:	898b      	ldrh	r3, [r1, #12]
 800c394:	061b      	lsls	r3, r3, #24
 800c396:	b09d      	sub	sp, #116	; 0x74
 800c398:	4607      	mov	r7, r0
 800c39a:	460d      	mov	r5, r1
 800c39c:	4614      	mov	r4, r2
 800c39e:	d50e      	bpl.n	800c3be <_svfiprintf_r+0x32>
 800c3a0:	690b      	ldr	r3, [r1, #16]
 800c3a2:	b963      	cbnz	r3, 800c3be <_svfiprintf_r+0x32>
 800c3a4:	2140      	movs	r1, #64	; 0x40
 800c3a6:	f7ff ff21 	bl	800c1ec <_malloc_r>
 800c3aa:	6028      	str	r0, [r5, #0]
 800c3ac:	6128      	str	r0, [r5, #16]
 800c3ae:	b920      	cbnz	r0, 800c3ba <_svfiprintf_r+0x2e>
 800c3b0:	230c      	movs	r3, #12
 800c3b2:	603b      	str	r3, [r7, #0]
 800c3b4:	f04f 30ff 	mov.w	r0, #4294967295
 800c3b8:	e0d1      	b.n	800c55e <_svfiprintf_r+0x1d2>
 800c3ba:	2340      	movs	r3, #64	; 0x40
 800c3bc:	616b      	str	r3, [r5, #20]
 800c3be:	2300      	movs	r3, #0
 800c3c0:	9309      	str	r3, [sp, #36]	; 0x24
 800c3c2:	2320      	movs	r3, #32
 800c3c4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c3c8:	f8cd 800c 	str.w	r8, [sp, #12]
 800c3cc:	2330      	movs	r3, #48	; 0x30
 800c3ce:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c578 <_svfiprintf_r+0x1ec>
 800c3d2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c3d6:	f04f 0901 	mov.w	r9, #1
 800c3da:	4623      	mov	r3, r4
 800c3dc:	469a      	mov	sl, r3
 800c3de:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c3e2:	b10a      	cbz	r2, 800c3e8 <_svfiprintf_r+0x5c>
 800c3e4:	2a25      	cmp	r2, #37	; 0x25
 800c3e6:	d1f9      	bne.n	800c3dc <_svfiprintf_r+0x50>
 800c3e8:	ebba 0b04 	subs.w	fp, sl, r4
 800c3ec:	d00b      	beq.n	800c406 <_svfiprintf_r+0x7a>
 800c3ee:	465b      	mov	r3, fp
 800c3f0:	4622      	mov	r2, r4
 800c3f2:	4629      	mov	r1, r5
 800c3f4:	4638      	mov	r0, r7
 800c3f6:	f7ff ff6d 	bl	800c2d4 <__ssputs_r>
 800c3fa:	3001      	adds	r0, #1
 800c3fc:	f000 80aa 	beq.w	800c554 <_svfiprintf_r+0x1c8>
 800c400:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c402:	445a      	add	r2, fp
 800c404:	9209      	str	r2, [sp, #36]	; 0x24
 800c406:	f89a 3000 	ldrb.w	r3, [sl]
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	f000 80a2 	beq.w	800c554 <_svfiprintf_r+0x1c8>
 800c410:	2300      	movs	r3, #0
 800c412:	f04f 32ff 	mov.w	r2, #4294967295
 800c416:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c41a:	f10a 0a01 	add.w	sl, sl, #1
 800c41e:	9304      	str	r3, [sp, #16]
 800c420:	9307      	str	r3, [sp, #28]
 800c422:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c426:	931a      	str	r3, [sp, #104]	; 0x68
 800c428:	4654      	mov	r4, sl
 800c42a:	2205      	movs	r2, #5
 800c42c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c430:	4851      	ldr	r0, [pc, #324]	; (800c578 <_svfiprintf_r+0x1ec>)
 800c432:	f7f3 fef5 	bl	8000220 <memchr>
 800c436:	9a04      	ldr	r2, [sp, #16]
 800c438:	b9d8      	cbnz	r0, 800c472 <_svfiprintf_r+0xe6>
 800c43a:	06d0      	lsls	r0, r2, #27
 800c43c:	bf44      	itt	mi
 800c43e:	2320      	movmi	r3, #32
 800c440:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c444:	0711      	lsls	r1, r2, #28
 800c446:	bf44      	itt	mi
 800c448:	232b      	movmi	r3, #43	; 0x2b
 800c44a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c44e:	f89a 3000 	ldrb.w	r3, [sl]
 800c452:	2b2a      	cmp	r3, #42	; 0x2a
 800c454:	d015      	beq.n	800c482 <_svfiprintf_r+0xf6>
 800c456:	9a07      	ldr	r2, [sp, #28]
 800c458:	4654      	mov	r4, sl
 800c45a:	2000      	movs	r0, #0
 800c45c:	f04f 0c0a 	mov.w	ip, #10
 800c460:	4621      	mov	r1, r4
 800c462:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c466:	3b30      	subs	r3, #48	; 0x30
 800c468:	2b09      	cmp	r3, #9
 800c46a:	d94e      	bls.n	800c50a <_svfiprintf_r+0x17e>
 800c46c:	b1b0      	cbz	r0, 800c49c <_svfiprintf_r+0x110>
 800c46e:	9207      	str	r2, [sp, #28]
 800c470:	e014      	b.n	800c49c <_svfiprintf_r+0x110>
 800c472:	eba0 0308 	sub.w	r3, r0, r8
 800c476:	fa09 f303 	lsl.w	r3, r9, r3
 800c47a:	4313      	orrs	r3, r2
 800c47c:	9304      	str	r3, [sp, #16]
 800c47e:	46a2      	mov	sl, r4
 800c480:	e7d2      	b.n	800c428 <_svfiprintf_r+0x9c>
 800c482:	9b03      	ldr	r3, [sp, #12]
 800c484:	1d19      	adds	r1, r3, #4
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	9103      	str	r1, [sp, #12]
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	bfbb      	ittet	lt
 800c48e:	425b      	neglt	r3, r3
 800c490:	f042 0202 	orrlt.w	r2, r2, #2
 800c494:	9307      	strge	r3, [sp, #28]
 800c496:	9307      	strlt	r3, [sp, #28]
 800c498:	bfb8      	it	lt
 800c49a:	9204      	strlt	r2, [sp, #16]
 800c49c:	7823      	ldrb	r3, [r4, #0]
 800c49e:	2b2e      	cmp	r3, #46	; 0x2e
 800c4a0:	d10c      	bne.n	800c4bc <_svfiprintf_r+0x130>
 800c4a2:	7863      	ldrb	r3, [r4, #1]
 800c4a4:	2b2a      	cmp	r3, #42	; 0x2a
 800c4a6:	d135      	bne.n	800c514 <_svfiprintf_r+0x188>
 800c4a8:	9b03      	ldr	r3, [sp, #12]
 800c4aa:	1d1a      	adds	r2, r3, #4
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	9203      	str	r2, [sp, #12]
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	bfb8      	it	lt
 800c4b4:	f04f 33ff 	movlt.w	r3, #4294967295
 800c4b8:	3402      	adds	r4, #2
 800c4ba:	9305      	str	r3, [sp, #20]
 800c4bc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c588 <_svfiprintf_r+0x1fc>
 800c4c0:	7821      	ldrb	r1, [r4, #0]
 800c4c2:	2203      	movs	r2, #3
 800c4c4:	4650      	mov	r0, sl
 800c4c6:	f7f3 feab 	bl	8000220 <memchr>
 800c4ca:	b140      	cbz	r0, 800c4de <_svfiprintf_r+0x152>
 800c4cc:	2340      	movs	r3, #64	; 0x40
 800c4ce:	eba0 000a 	sub.w	r0, r0, sl
 800c4d2:	fa03 f000 	lsl.w	r0, r3, r0
 800c4d6:	9b04      	ldr	r3, [sp, #16]
 800c4d8:	4303      	orrs	r3, r0
 800c4da:	3401      	adds	r4, #1
 800c4dc:	9304      	str	r3, [sp, #16]
 800c4de:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c4e2:	4826      	ldr	r0, [pc, #152]	; (800c57c <_svfiprintf_r+0x1f0>)
 800c4e4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c4e8:	2206      	movs	r2, #6
 800c4ea:	f7f3 fe99 	bl	8000220 <memchr>
 800c4ee:	2800      	cmp	r0, #0
 800c4f0:	d038      	beq.n	800c564 <_svfiprintf_r+0x1d8>
 800c4f2:	4b23      	ldr	r3, [pc, #140]	; (800c580 <_svfiprintf_r+0x1f4>)
 800c4f4:	bb1b      	cbnz	r3, 800c53e <_svfiprintf_r+0x1b2>
 800c4f6:	9b03      	ldr	r3, [sp, #12]
 800c4f8:	3307      	adds	r3, #7
 800c4fa:	f023 0307 	bic.w	r3, r3, #7
 800c4fe:	3308      	adds	r3, #8
 800c500:	9303      	str	r3, [sp, #12]
 800c502:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c504:	4433      	add	r3, r6
 800c506:	9309      	str	r3, [sp, #36]	; 0x24
 800c508:	e767      	b.n	800c3da <_svfiprintf_r+0x4e>
 800c50a:	fb0c 3202 	mla	r2, ip, r2, r3
 800c50e:	460c      	mov	r4, r1
 800c510:	2001      	movs	r0, #1
 800c512:	e7a5      	b.n	800c460 <_svfiprintf_r+0xd4>
 800c514:	2300      	movs	r3, #0
 800c516:	3401      	adds	r4, #1
 800c518:	9305      	str	r3, [sp, #20]
 800c51a:	4619      	mov	r1, r3
 800c51c:	f04f 0c0a 	mov.w	ip, #10
 800c520:	4620      	mov	r0, r4
 800c522:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c526:	3a30      	subs	r2, #48	; 0x30
 800c528:	2a09      	cmp	r2, #9
 800c52a:	d903      	bls.n	800c534 <_svfiprintf_r+0x1a8>
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d0c5      	beq.n	800c4bc <_svfiprintf_r+0x130>
 800c530:	9105      	str	r1, [sp, #20]
 800c532:	e7c3      	b.n	800c4bc <_svfiprintf_r+0x130>
 800c534:	fb0c 2101 	mla	r1, ip, r1, r2
 800c538:	4604      	mov	r4, r0
 800c53a:	2301      	movs	r3, #1
 800c53c:	e7f0      	b.n	800c520 <_svfiprintf_r+0x194>
 800c53e:	ab03      	add	r3, sp, #12
 800c540:	9300      	str	r3, [sp, #0]
 800c542:	462a      	mov	r2, r5
 800c544:	4b0f      	ldr	r3, [pc, #60]	; (800c584 <_svfiprintf_r+0x1f8>)
 800c546:	a904      	add	r1, sp, #16
 800c548:	4638      	mov	r0, r7
 800c54a:	f7fc f99b 	bl	8008884 <_printf_float>
 800c54e:	1c42      	adds	r2, r0, #1
 800c550:	4606      	mov	r6, r0
 800c552:	d1d6      	bne.n	800c502 <_svfiprintf_r+0x176>
 800c554:	89ab      	ldrh	r3, [r5, #12]
 800c556:	065b      	lsls	r3, r3, #25
 800c558:	f53f af2c 	bmi.w	800c3b4 <_svfiprintf_r+0x28>
 800c55c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c55e:	b01d      	add	sp, #116	; 0x74
 800c560:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c564:	ab03      	add	r3, sp, #12
 800c566:	9300      	str	r3, [sp, #0]
 800c568:	462a      	mov	r2, r5
 800c56a:	4b06      	ldr	r3, [pc, #24]	; (800c584 <_svfiprintf_r+0x1f8>)
 800c56c:	a904      	add	r1, sp, #16
 800c56e:	4638      	mov	r0, r7
 800c570:	f7fc fc2c 	bl	8008dcc <_printf_i>
 800c574:	e7eb      	b.n	800c54e <_svfiprintf_r+0x1c2>
 800c576:	bf00      	nop
 800c578:	0800dee4 	.word	0x0800dee4
 800c57c:	0800deee 	.word	0x0800deee
 800c580:	08008885 	.word	0x08008885
 800c584:	0800c2d5 	.word	0x0800c2d5
 800c588:	0800deea 	.word	0x0800deea

0800c58c <_sungetc_r>:
 800c58c:	b538      	push	{r3, r4, r5, lr}
 800c58e:	1c4b      	adds	r3, r1, #1
 800c590:	4614      	mov	r4, r2
 800c592:	d103      	bne.n	800c59c <_sungetc_r+0x10>
 800c594:	f04f 35ff 	mov.w	r5, #4294967295
 800c598:	4628      	mov	r0, r5
 800c59a:	bd38      	pop	{r3, r4, r5, pc}
 800c59c:	8993      	ldrh	r3, [r2, #12]
 800c59e:	f023 0320 	bic.w	r3, r3, #32
 800c5a2:	8193      	strh	r3, [r2, #12]
 800c5a4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c5a6:	6852      	ldr	r2, [r2, #4]
 800c5a8:	b2cd      	uxtb	r5, r1
 800c5aa:	b18b      	cbz	r3, 800c5d0 <_sungetc_r+0x44>
 800c5ac:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800c5ae:	4293      	cmp	r3, r2
 800c5b0:	dd08      	ble.n	800c5c4 <_sungetc_r+0x38>
 800c5b2:	6823      	ldr	r3, [r4, #0]
 800c5b4:	1e5a      	subs	r2, r3, #1
 800c5b6:	6022      	str	r2, [r4, #0]
 800c5b8:	f803 5c01 	strb.w	r5, [r3, #-1]
 800c5bc:	6863      	ldr	r3, [r4, #4]
 800c5be:	3301      	adds	r3, #1
 800c5c0:	6063      	str	r3, [r4, #4]
 800c5c2:	e7e9      	b.n	800c598 <_sungetc_r+0xc>
 800c5c4:	4621      	mov	r1, r4
 800c5c6:	f000 fbdb 	bl	800cd80 <__submore>
 800c5ca:	2800      	cmp	r0, #0
 800c5cc:	d0f1      	beq.n	800c5b2 <_sungetc_r+0x26>
 800c5ce:	e7e1      	b.n	800c594 <_sungetc_r+0x8>
 800c5d0:	6921      	ldr	r1, [r4, #16]
 800c5d2:	6823      	ldr	r3, [r4, #0]
 800c5d4:	b151      	cbz	r1, 800c5ec <_sungetc_r+0x60>
 800c5d6:	4299      	cmp	r1, r3
 800c5d8:	d208      	bcs.n	800c5ec <_sungetc_r+0x60>
 800c5da:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800c5de:	42a9      	cmp	r1, r5
 800c5e0:	d104      	bne.n	800c5ec <_sungetc_r+0x60>
 800c5e2:	3b01      	subs	r3, #1
 800c5e4:	3201      	adds	r2, #1
 800c5e6:	6023      	str	r3, [r4, #0]
 800c5e8:	6062      	str	r2, [r4, #4]
 800c5ea:	e7d5      	b.n	800c598 <_sungetc_r+0xc>
 800c5ec:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800c5f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c5f4:	6363      	str	r3, [r4, #52]	; 0x34
 800c5f6:	2303      	movs	r3, #3
 800c5f8:	63a3      	str	r3, [r4, #56]	; 0x38
 800c5fa:	4623      	mov	r3, r4
 800c5fc:	f803 5f46 	strb.w	r5, [r3, #70]!
 800c600:	6023      	str	r3, [r4, #0]
 800c602:	2301      	movs	r3, #1
 800c604:	e7dc      	b.n	800c5c0 <_sungetc_r+0x34>

0800c606 <__ssrefill_r>:
 800c606:	b510      	push	{r4, lr}
 800c608:	460c      	mov	r4, r1
 800c60a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800c60c:	b169      	cbz	r1, 800c62a <__ssrefill_r+0x24>
 800c60e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c612:	4299      	cmp	r1, r3
 800c614:	d001      	beq.n	800c61a <__ssrefill_r+0x14>
 800c616:	f7ff fd7d 	bl	800c114 <_free_r>
 800c61a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c61c:	6063      	str	r3, [r4, #4]
 800c61e:	2000      	movs	r0, #0
 800c620:	6360      	str	r0, [r4, #52]	; 0x34
 800c622:	b113      	cbz	r3, 800c62a <__ssrefill_r+0x24>
 800c624:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800c626:	6023      	str	r3, [r4, #0]
 800c628:	bd10      	pop	{r4, pc}
 800c62a:	6923      	ldr	r3, [r4, #16]
 800c62c:	6023      	str	r3, [r4, #0]
 800c62e:	2300      	movs	r3, #0
 800c630:	6063      	str	r3, [r4, #4]
 800c632:	89a3      	ldrh	r3, [r4, #12]
 800c634:	f043 0320 	orr.w	r3, r3, #32
 800c638:	81a3      	strh	r3, [r4, #12]
 800c63a:	f04f 30ff 	mov.w	r0, #4294967295
 800c63e:	e7f3      	b.n	800c628 <__ssrefill_r+0x22>

0800c640 <__ssvfiscanf_r>:
 800c640:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c644:	460c      	mov	r4, r1
 800c646:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800c64a:	2100      	movs	r1, #0
 800c64c:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800c650:	49a6      	ldr	r1, [pc, #664]	; (800c8ec <__ssvfiscanf_r+0x2ac>)
 800c652:	91a0      	str	r1, [sp, #640]	; 0x280
 800c654:	f10d 0804 	add.w	r8, sp, #4
 800c658:	49a5      	ldr	r1, [pc, #660]	; (800c8f0 <__ssvfiscanf_r+0x2b0>)
 800c65a:	4fa6      	ldr	r7, [pc, #664]	; (800c8f4 <__ssvfiscanf_r+0x2b4>)
 800c65c:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800c8f8 <__ssvfiscanf_r+0x2b8>
 800c660:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800c664:	4606      	mov	r6, r0
 800c666:	91a1      	str	r1, [sp, #644]	; 0x284
 800c668:	9300      	str	r3, [sp, #0]
 800c66a:	7813      	ldrb	r3, [r2, #0]
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	f000 815a 	beq.w	800c926 <__ssvfiscanf_r+0x2e6>
 800c672:	5dd9      	ldrb	r1, [r3, r7]
 800c674:	f011 0108 	ands.w	r1, r1, #8
 800c678:	f102 0501 	add.w	r5, r2, #1
 800c67c:	d019      	beq.n	800c6b2 <__ssvfiscanf_r+0x72>
 800c67e:	6863      	ldr	r3, [r4, #4]
 800c680:	2b00      	cmp	r3, #0
 800c682:	dd0f      	ble.n	800c6a4 <__ssvfiscanf_r+0x64>
 800c684:	6823      	ldr	r3, [r4, #0]
 800c686:	781a      	ldrb	r2, [r3, #0]
 800c688:	5cba      	ldrb	r2, [r7, r2]
 800c68a:	0712      	lsls	r2, r2, #28
 800c68c:	d401      	bmi.n	800c692 <__ssvfiscanf_r+0x52>
 800c68e:	462a      	mov	r2, r5
 800c690:	e7eb      	b.n	800c66a <__ssvfiscanf_r+0x2a>
 800c692:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c694:	3201      	adds	r2, #1
 800c696:	9245      	str	r2, [sp, #276]	; 0x114
 800c698:	6862      	ldr	r2, [r4, #4]
 800c69a:	3301      	adds	r3, #1
 800c69c:	3a01      	subs	r2, #1
 800c69e:	6062      	str	r2, [r4, #4]
 800c6a0:	6023      	str	r3, [r4, #0]
 800c6a2:	e7ec      	b.n	800c67e <__ssvfiscanf_r+0x3e>
 800c6a4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c6a6:	4621      	mov	r1, r4
 800c6a8:	4630      	mov	r0, r6
 800c6aa:	4798      	blx	r3
 800c6ac:	2800      	cmp	r0, #0
 800c6ae:	d0e9      	beq.n	800c684 <__ssvfiscanf_r+0x44>
 800c6b0:	e7ed      	b.n	800c68e <__ssvfiscanf_r+0x4e>
 800c6b2:	2b25      	cmp	r3, #37	; 0x25
 800c6b4:	d012      	beq.n	800c6dc <__ssvfiscanf_r+0x9c>
 800c6b6:	469a      	mov	sl, r3
 800c6b8:	6863      	ldr	r3, [r4, #4]
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	f340 8091 	ble.w	800c7e2 <__ssvfiscanf_r+0x1a2>
 800c6c0:	6822      	ldr	r2, [r4, #0]
 800c6c2:	7813      	ldrb	r3, [r2, #0]
 800c6c4:	4553      	cmp	r3, sl
 800c6c6:	f040 812e 	bne.w	800c926 <__ssvfiscanf_r+0x2e6>
 800c6ca:	6863      	ldr	r3, [r4, #4]
 800c6cc:	3b01      	subs	r3, #1
 800c6ce:	6063      	str	r3, [r4, #4]
 800c6d0:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800c6d2:	3201      	adds	r2, #1
 800c6d4:	3301      	adds	r3, #1
 800c6d6:	6022      	str	r2, [r4, #0]
 800c6d8:	9345      	str	r3, [sp, #276]	; 0x114
 800c6da:	e7d8      	b.n	800c68e <__ssvfiscanf_r+0x4e>
 800c6dc:	9141      	str	r1, [sp, #260]	; 0x104
 800c6de:	9143      	str	r1, [sp, #268]	; 0x10c
 800c6e0:	7853      	ldrb	r3, [r2, #1]
 800c6e2:	2b2a      	cmp	r3, #42	; 0x2a
 800c6e4:	bf02      	ittt	eq
 800c6e6:	2310      	moveq	r3, #16
 800c6e8:	1c95      	addeq	r5, r2, #2
 800c6ea:	9341      	streq	r3, [sp, #260]	; 0x104
 800c6ec:	220a      	movs	r2, #10
 800c6ee:	46aa      	mov	sl, r5
 800c6f0:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800c6f4:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800c6f8:	2b09      	cmp	r3, #9
 800c6fa:	d91d      	bls.n	800c738 <__ssvfiscanf_r+0xf8>
 800c6fc:	487e      	ldr	r0, [pc, #504]	; (800c8f8 <__ssvfiscanf_r+0x2b8>)
 800c6fe:	2203      	movs	r2, #3
 800c700:	f7f3 fd8e 	bl	8000220 <memchr>
 800c704:	b140      	cbz	r0, 800c718 <__ssvfiscanf_r+0xd8>
 800c706:	2301      	movs	r3, #1
 800c708:	eba0 0009 	sub.w	r0, r0, r9
 800c70c:	fa03 f000 	lsl.w	r0, r3, r0
 800c710:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c712:	4318      	orrs	r0, r3
 800c714:	9041      	str	r0, [sp, #260]	; 0x104
 800c716:	4655      	mov	r5, sl
 800c718:	f815 3b01 	ldrb.w	r3, [r5], #1
 800c71c:	2b78      	cmp	r3, #120	; 0x78
 800c71e:	d806      	bhi.n	800c72e <__ssvfiscanf_r+0xee>
 800c720:	2b57      	cmp	r3, #87	; 0x57
 800c722:	d810      	bhi.n	800c746 <__ssvfiscanf_r+0x106>
 800c724:	2b25      	cmp	r3, #37	; 0x25
 800c726:	d0c6      	beq.n	800c6b6 <__ssvfiscanf_r+0x76>
 800c728:	d856      	bhi.n	800c7d8 <__ssvfiscanf_r+0x198>
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d064      	beq.n	800c7f8 <__ssvfiscanf_r+0x1b8>
 800c72e:	2303      	movs	r3, #3
 800c730:	9347      	str	r3, [sp, #284]	; 0x11c
 800c732:	230a      	movs	r3, #10
 800c734:	9342      	str	r3, [sp, #264]	; 0x108
 800c736:	e071      	b.n	800c81c <__ssvfiscanf_r+0x1dc>
 800c738:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800c73a:	fb02 1103 	mla	r1, r2, r3, r1
 800c73e:	3930      	subs	r1, #48	; 0x30
 800c740:	9143      	str	r1, [sp, #268]	; 0x10c
 800c742:	4655      	mov	r5, sl
 800c744:	e7d3      	b.n	800c6ee <__ssvfiscanf_r+0xae>
 800c746:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800c74a:	2a20      	cmp	r2, #32
 800c74c:	d8ef      	bhi.n	800c72e <__ssvfiscanf_r+0xee>
 800c74e:	a101      	add	r1, pc, #4	; (adr r1, 800c754 <__ssvfiscanf_r+0x114>)
 800c750:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800c754:	0800c807 	.word	0x0800c807
 800c758:	0800c72f 	.word	0x0800c72f
 800c75c:	0800c72f 	.word	0x0800c72f
 800c760:	0800c865 	.word	0x0800c865
 800c764:	0800c72f 	.word	0x0800c72f
 800c768:	0800c72f 	.word	0x0800c72f
 800c76c:	0800c72f 	.word	0x0800c72f
 800c770:	0800c72f 	.word	0x0800c72f
 800c774:	0800c72f 	.word	0x0800c72f
 800c778:	0800c72f 	.word	0x0800c72f
 800c77c:	0800c72f 	.word	0x0800c72f
 800c780:	0800c87b 	.word	0x0800c87b
 800c784:	0800c851 	.word	0x0800c851
 800c788:	0800c7df 	.word	0x0800c7df
 800c78c:	0800c7df 	.word	0x0800c7df
 800c790:	0800c7df 	.word	0x0800c7df
 800c794:	0800c72f 	.word	0x0800c72f
 800c798:	0800c855 	.word	0x0800c855
 800c79c:	0800c72f 	.word	0x0800c72f
 800c7a0:	0800c72f 	.word	0x0800c72f
 800c7a4:	0800c72f 	.word	0x0800c72f
 800c7a8:	0800c72f 	.word	0x0800c72f
 800c7ac:	0800c88b 	.word	0x0800c88b
 800c7b0:	0800c85d 	.word	0x0800c85d
 800c7b4:	0800c7ff 	.word	0x0800c7ff
 800c7b8:	0800c72f 	.word	0x0800c72f
 800c7bc:	0800c72f 	.word	0x0800c72f
 800c7c0:	0800c887 	.word	0x0800c887
 800c7c4:	0800c72f 	.word	0x0800c72f
 800c7c8:	0800c851 	.word	0x0800c851
 800c7cc:	0800c72f 	.word	0x0800c72f
 800c7d0:	0800c72f 	.word	0x0800c72f
 800c7d4:	0800c807 	.word	0x0800c807
 800c7d8:	3b45      	subs	r3, #69	; 0x45
 800c7da:	2b02      	cmp	r3, #2
 800c7dc:	d8a7      	bhi.n	800c72e <__ssvfiscanf_r+0xee>
 800c7de:	2305      	movs	r3, #5
 800c7e0:	e01b      	b.n	800c81a <__ssvfiscanf_r+0x1da>
 800c7e2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c7e4:	4621      	mov	r1, r4
 800c7e6:	4630      	mov	r0, r6
 800c7e8:	4798      	blx	r3
 800c7ea:	2800      	cmp	r0, #0
 800c7ec:	f43f af68 	beq.w	800c6c0 <__ssvfiscanf_r+0x80>
 800c7f0:	9844      	ldr	r0, [sp, #272]	; 0x110
 800c7f2:	2800      	cmp	r0, #0
 800c7f4:	f040 808d 	bne.w	800c912 <__ssvfiscanf_r+0x2d2>
 800c7f8:	f04f 30ff 	mov.w	r0, #4294967295
 800c7fc:	e08f      	b.n	800c91e <__ssvfiscanf_r+0x2de>
 800c7fe:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800c800:	f042 0220 	orr.w	r2, r2, #32
 800c804:	9241      	str	r2, [sp, #260]	; 0x104
 800c806:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800c808:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c80c:	9241      	str	r2, [sp, #260]	; 0x104
 800c80e:	2210      	movs	r2, #16
 800c810:	2b6f      	cmp	r3, #111	; 0x6f
 800c812:	9242      	str	r2, [sp, #264]	; 0x108
 800c814:	bf34      	ite	cc
 800c816:	2303      	movcc	r3, #3
 800c818:	2304      	movcs	r3, #4
 800c81a:	9347      	str	r3, [sp, #284]	; 0x11c
 800c81c:	6863      	ldr	r3, [r4, #4]
 800c81e:	2b00      	cmp	r3, #0
 800c820:	dd42      	ble.n	800c8a8 <__ssvfiscanf_r+0x268>
 800c822:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c824:	0659      	lsls	r1, r3, #25
 800c826:	d404      	bmi.n	800c832 <__ssvfiscanf_r+0x1f2>
 800c828:	6823      	ldr	r3, [r4, #0]
 800c82a:	781a      	ldrb	r2, [r3, #0]
 800c82c:	5cba      	ldrb	r2, [r7, r2]
 800c82e:	0712      	lsls	r2, r2, #28
 800c830:	d441      	bmi.n	800c8b6 <__ssvfiscanf_r+0x276>
 800c832:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800c834:	2b02      	cmp	r3, #2
 800c836:	dc50      	bgt.n	800c8da <__ssvfiscanf_r+0x29a>
 800c838:	466b      	mov	r3, sp
 800c83a:	4622      	mov	r2, r4
 800c83c:	a941      	add	r1, sp, #260	; 0x104
 800c83e:	4630      	mov	r0, r6
 800c840:	f000 f876 	bl	800c930 <_scanf_chars>
 800c844:	2801      	cmp	r0, #1
 800c846:	d06e      	beq.n	800c926 <__ssvfiscanf_r+0x2e6>
 800c848:	2802      	cmp	r0, #2
 800c84a:	f47f af20 	bne.w	800c68e <__ssvfiscanf_r+0x4e>
 800c84e:	e7cf      	b.n	800c7f0 <__ssvfiscanf_r+0x1b0>
 800c850:	220a      	movs	r2, #10
 800c852:	e7dd      	b.n	800c810 <__ssvfiscanf_r+0x1d0>
 800c854:	2300      	movs	r3, #0
 800c856:	9342      	str	r3, [sp, #264]	; 0x108
 800c858:	2303      	movs	r3, #3
 800c85a:	e7de      	b.n	800c81a <__ssvfiscanf_r+0x1da>
 800c85c:	2308      	movs	r3, #8
 800c85e:	9342      	str	r3, [sp, #264]	; 0x108
 800c860:	2304      	movs	r3, #4
 800c862:	e7da      	b.n	800c81a <__ssvfiscanf_r+0x1da>
 800c864:	4629      	mov	r1, r5
 800c866:	4640      	mov	r0, r8
 800c868:	f000 f9de 	bl	800cc28 <__sccl>
 800c86c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c86e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c872:	9341      	str	r3, [sp, #260]	; 0x104
 800c874:	4605      	mov	r5, r0
 800c876:	2301      	movs	r3, #1
 800c878:	e7cf      	b.n	800c81a <__ssvfiscanf_r+0x1da>
 800c87a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c87c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c880:	9341      	str	r3, [sp, #260]	; 0x104
 800c882:	2300      	movs	r3, #0
 800c884:	e7c9      	b.n	800c81a <__ssvfiscanf_r+0x1da>
 800c886:	2302      	movs	r3, #2
 800c888:	e7c7      	b.n	800c81a <__ssvfiscanf_r+0x1da>
 800c88a:	9841      	ldr	r0, [sp, #260]	; 0x104
 800c88c:	06c3      	lsls	r3, r0, #27
 800c88e:	f53f aefe 	bmi.w	800c68e <__ssvfiscanf_r+0x4e>
 800c892:	9b00      	ldr	r3, [sp, #0]
 800c894:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c896:	1d19      	adds	r1, r3, #4
 800c898:	9100      	str	r1, [sp, #0]
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	f010 0f01 	tst.w	r0, #1
 800c8a0:	bf14      	ite	ne
 800c8a2:	801a      	strhne	r2, [r3, #0]
 800c8a4:	601a      	streq	r2, [r3, #0]
 800c8a6:	e6f2      	b.n	800c68e <__ssvfiscanf_r+0x4e>
 800c8a8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c8aa:	4621      	mov	r1, r4
 800c8ac:	4630      	mov	r0, r6
 800c8ae:	4798      	blx	r3
 800c8b0:	2800      	cmp	r0, #0
 800c8b2:	d0b6      	beq.n	800c822 <__ssvfiscanf_r+0x1e2>
 800c8b4:	e79c      	b.n	800c7f0 <__ssvfiscanf_r+0x1b0>
 800c8b6:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c8b8:	3201      	adds	r2, #1
 800c8ba:	9245      	str	r2, [sp, #276]	; 0x114
 800c8bc:	6862      	ldr	r2, [r4, #4]
 800c8be:	3a01      	subs	r2, #1
 800c8c0:	2a00      	cmp	r2, #0
 800c8c2:	6062      	str	r2, [r4, #4]
 800c8c4:	dd02      	ble.n	800c8cc <__ssvfiscanf_r+0x28c>
 800c8c6:	3301      	adds	r3, #1
 800c8c8:	6023      	str	r3, [r4, #0]
 800c8ca:	e7ad      	b.n	800c828 <__ssvfiscanf_r+0x1e8>
 800c8cc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c8ce:	4621      	mov	r1, r4
 800c8d0:	4630      	mov	r0, r6
 800c8d2:	4798      	blx	r3
 800c8d4:	2800      	cmp	r0, #0
 800c8d6:	d0a7      	beq.n	800c828 <__ssvfiscanf_r+0x1e8>
 800c8d8:	e78a      	b.n	800c7f0 <__ssvfiscanf_r+0x1b0>
 800c8da:	2b04      	cmp	r3, #4
 800c8dc:	dc0e      	bgt.n	800c8fc <__ssvfiscanf_r+0x2bc>
 800c8de:	466b      	mov	r3, sp
 800c8e0:	4622      	mov	r2, r4
 800c8e2:	a941      	add	r1, sp, #260	; 0x104
 800c8e4:	4630      	mov	r0, r6
 800c8e6:	f000 f87d 	bl	800c9e4 <_scanf_i>
 800c8ea:	e7ab      	b.n	800c844 <__ssvfiscanf_r+0x204>
 800c8ec:	0800c58d 	.word	0x0800c58d
 800c8f0:	0800c607 	.word	0x0800c607
 800c8f4:	0800db81 	.word	0x0800db81
 800c8f8:	0800deea 	.word	0x0800deea
 800c8fc:	4b0b      	ldr	r3, [pc, #44]	; (800c92c <__ssvfiscanf_r+0x2ec>)
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	f43f aec5 	beq.w	800c68e <__ssvfiscanf_r+0x4e>
 800c904:	466b      	mov	r3, sp
 800c906:	4622      	mov	r2, r4
 800c908:	a941      	add	r1, sp, #260	; 0x104
 800c90a:	4630      	mov	r0, r6
 800c90c:	f7fc fb84 	bl	8009018 <_scanf_float>
 800c910:	e798      	b.n	800c844 <__ssvfiscanf_r+0x204>
 800c912:	89a3      	ldrh	r3, [r4, #12]
 800c914:	f013 0f40 	tst.w	r3, #64	; 0x40
 800c918:	bf18      	it	ne
 800c91a:	f04f 30ff 	movne.w	r0, #4294967295
 800c91e:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800c922:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c926:	9844      	ldr	r0, [sp, #272]	; 0x110
 800c928:	e7f9      	b.n	800c91e <__ssvfiscanf_r+0x2de>
 800c92a:	bf00      	nop
 800c92c:	08009019 	.word	0x08009019

0800c930 <_scanf_chars>:
 800c930:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c934:	4615      	mov	r5, r2
 800c936:	688a      	ldr	r2, [r1, #8]
 800c938:	4680      	mov	r8, r0
 800c93a:	460c      	mov	r4, r1
 800c93c:	b932      	cbnz	r2, 800c94c <_scanf_chars+0x1c>
 800c93e:	698a      	ldr	r2, [r1, #24]
 800c940:	2a00      	cmp	r2, #0
 800c942:	bf0c      	ite	eq
 800c944:	2201      	moveq	r2, #1
 800c946:	f04f 32ff 	movne.w	r2, #4294967295
 800c94a:	608a      	str	r2, [r1, #8]
 800c94c:	6822      	ldr	r2, [r4, #0]
 800c94e:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800c9e0 <_scanf_chars+0xb0>
 800c952:	06d1      	lsls	r1, r2, #27
 800c954:	bf5f      	itttt	pl
 800c956:	681a      	ldrpl	r2, [r3, #0]
 800c958:	1d11      	addpl	r1, r2, #4
 800c95a:	6019      	strpl	r1, [r3, #0]
 800c95c:	6816      	ldrpl	r6, [r2, #0]
 800c95e:	2700      	movs	r7, #0
 800c960:	69a0      	ldr	r0, [r4, #24]
 800c962:	b188      	cbz	r0, 800c988 <_scanf_chars+0x58>
 800c964:	2801      	cmp	r0, #1
 800c966:	d107      	bne.n	800c978 <_scanf_chars+0x48>
 800c968:	682a      	ldr	r2, [r5, #0]
 800c96a:	7811      	ldrb	r1, [r2, #0]
 800c96c:	6962      	ldr	r2, [r4, #20]
 800c96e:	5c52      	ldrb	r2, [r2, r1]
 800c970:	b952      	cbnz	r2, 800c988 <_scanf_chars+0x58>
 800c972:	2f00      	cmp	r7, #0
 800c974:	d031      	beq.n	800c9da <_scanf_chars+0xaa>
 800c976:	e022      	b.n	800c9be <_scanf_chars+0x8e>
 800c978:	2802      	cmp	r0, #2
 800c97a:	d120      	bne.n	800c9be <_scanf_chars+0x8e>
 800c97c:	682b      	ldr	r3, [r5, #0]
 800c97e:	781b      	ldrb	r3, [r3, #0]
 800c980:	f813 3009 	ldrb.w	r3, [r3, r9]
 800c984:	071b      	lsls	r3, r3, #28
 800c986:	d41a      	bmi.n	800c9be <_scanf_chars+0x8e>
 800c988:	6823      	ldr	r3, [r4, #0]
 800c98a:	06da      	lsls	r2, r3, #27
 800c98c:	bf5e      	ittt	pl
 800c98e:	682b      	ldrpl	r3, [r5, #0]
 800c990:	781b      	ldrbpl	r3, [r3, #0]
 800c992:	f806 3b01 	strbpl.w	r3, [r6], #1
 800c996:	682a      	ldr	r2, [r5, #0]
 800c998:	686b      	ldr	r3, [r5, #4]
 800c99a:	3201      	adds	r2, #1
 800c99c:	602a      	str	r2, [r5, #0]
 800c99e:	68a2      	ldr	r2, [r4, #8]
 800c9a0:	3b01      	subs	r3, #1
 800c9a2:	3a01      	subs	r2, #1
 800c9a4:	606b      	str	r3, [r5, #4]
 800c9a6:	3701      	adds	r7, #1
 800c9a8:	60a2      	str	r2, [r4, #8]
 800c9aa:	b142      	cbz	r2, 800c9be <_scanf_chars+0x8e>
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	dcd7      	bgt.n	800c960 <_scanf_chars+0x30>
 800c9b0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c9b4:	4629      	mov	r1, r5
 800c9b6:	4640      	mov	r0, r8
 800c9b8:	4798      	blx	r3
 800c9ba:	2800      	cmp	r0, #0
 800c9bc:	d0d0      	beq.n	800c960 <_scanf_chars+0x30>
 800c9be:	6823      	ldr	r3, [r4, #0]
 800c9c0:	f013 0310 	ands.w	r3, r3, #16
 800c9c4:	d105      	bne.n	800c9d2 <_scanf_chars+0xa2>
 800c9c6:	68e2      	ldr	r2, [r4, #12]
 800c9c8:	3201      	adds	r2, #1
 800c9ca:	60e2      	str	r2, [r4, #12]
 800c9cc:	69a2      	ldr	r2, [r4, #24]
 800c9ce:	b102      	cbz	r2, 800c9d2 <_scanf_chars+0xa2>
 800c9d0:	7033      	strb	r3, [r6, #0]
 800c9d2:	6923      	ldr	r3, [r4, #16]
 800c9d4:	443b      	add	r3, r7
 800c9d6:	6123      	str	r3, [r4, #16]
 800c9d8:	2000      	movs	r0, #0
 800c9da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c9de:	bf00      	nop
 800c9e0:	0800db81 	.word	0x0800db81

0800c9e4 <_scanf_i>:
 800c9e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9e8:	4698      	mov	r8, r3
 800c9ea:	4b76      	ldr	r3, [pc, #472]	; (800cbc4 <_scanf_i+0x1e0>)
 800c9ec:	460c      	mov	r4, r1
 800c9ee:	4682      	mov	sl, r0
 800c9f0:	4616      	mov	r6, r2
 800c9f2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c9f6:	b087      	sub	sp, #28
 800c9f8:	ab03      	add	r3, sp, #12
 800c9fa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c9fe:	4b72      	ldr	r3, [pc, #456]	; (800cbc8 <_scanf_i+0x1e4>)
 800ca00:	69a1      	ldr	r1, [r4, #24]
 800ca02:	4a72      	ldr	r2, [pc, #456]	; (800cbcc <_scanf_i+0x1e8>)
 800ca04:	2903      	cmp	r1, #3
 800ca06:	bf18      	it	ne
 800ca08:	461a      	movne	r2, r3
 800ca0a:	68a3      	ldr	r3, [r4, #8]
 800ca0c:	9201      	str	r2, [sp, #4]
 800ca0e:	1e5a      	subs	r2, r3, #1
 800ca10:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800ca14:	bf88      	it	hi
 800ca16:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800ca1a:	4627      	mov	r7, r4
 800ca1c:	bf82      	ittt	hi
 800ca1e:	eb03 0905 	addhi.w	r9, r3, r5
 800ca22:	f240 135d 	movwhi	r3, #349	; 0x15d
 800ca26:	60a3      	strhi	r3, [r4, #8]
 800ca28:	f857 3b1c 	ldr.w	r3, [r7], #28
 800ca2c:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800ca30:	bf98      	it	ls
 800ca32:	f04f 0900 	movls.w	r9, #0
 800ca36:	6023      	str	r3, [r4, #0]
 800ca38:	463d      	mov	r5, r7
 800ca3a:	f04f 0b00 	mov.w	fp, #0
 800ca3e:	6831      	ldr	r1, [r6, #0]
 800ca40:	ab03      	add	r3, sp, #12
 800ca42:	7809      	ldrb	r1, [r1, #0]
 800ca44:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800ca48:	2202      	movs	r2, #2
 800ca4a:	f7f3 fbe9 	bl	8000220 <memchr>
 800ca4e:	b328      	cbz	r0, 800ca9c <_scanf_i+0xb8>
 800ca50:	f1bb 0f01 	cmp.w	fp, #1
 800ca54:	d159      	bne.n	800cb0a <_scanf_i+0x126>
 800ca56:	6862      	ldr	r2, [r4, #4]
 800ca58:	b92a      	cbnz	r2, 800ca66 <_scanf_i+0x82>
 800ca5a:	6822      	ldr	r2, [r4, #0]
 800ca5c:	2308      	movs	r3, #8
 800ca5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ca62:	6063      	str	r3, [r4, #4]
 800ca64:	6022      	str	r2, [r4, #0]
 800ca66:	6822      	ldr	r2, [r4, #0]
 800ca68:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800ca6c:	6022      	str	r2, [r4, #0]
 800ca6e:	68a2      	ldr	r2, [r4, #8]
 800ca70:	1e51      	subs	r1, r2, #1
 800ca72:	60a1      	str	r1, [r4, #8]
 800ca74:	b192      	cbz	r2, 800ca9c <_scanf_i+0xb8>
 800ca76:	6832      	ldr	r2, [r6, #0]
 800ca78:	1c51      	adds	r1, r2, #1
 800ca7a:	6031      	str	r1, [r6, #0]
 800ca7c:	7812      	ldrb	r2, [r2, #0]
 800ca7e:	f805 2b01 	strb.w	r2, [r5], #1
 800ca82:	6872      	ldr	r2, [r6, #4]
 800ca84:	3a01      	subs	r2, #1
 800ca86:	2a00      	cmp	r2, #0
 800ca88:	6072      	str	r2, [r6, #4]
 800ca8a:	dc07      	bgt.n	800ca9c <_scanf_i+0xb8>
 800ca8c:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800ca90:	4631      	mov	r1, r6
 800ca92:	4650      	mov	r0, sl
 800ca94:	4790      	blx	r2
 800ca96:	2800      	cmp	r0, #0
 800ca98:	f040 8085 	bne.w	800cba6 <_scanf_i+0x1c2>
 800ca9c:	f10b 0b01 	add.w	fp, fp, #1
 800caa0:	f1bb 0f03 	cmp.w	fp, #3
 800caa4:	d1cb      	bne.n	800ca3e <_scanf_i+0x5a>
 800caa6:	6863      	ldr	r3, [r4, #4]
 800caa8:	b90b      	cbnz	r3, 800caae <_scanf_i+0xca>
 800caaa:	230a      	movs	r3, #10
 800caac:	6063      	str	r3, [r4, #4]
 800caae:	6863      	ldr	r3, [r4, #4]
 800cab0:	4947      	ldr	r1, [pc, #284]	; (800cbd0 <_scanf_i+0x1ec>)
 800cab2:	6960      	ldr	r0, [r4, #20]
 800cab4:	1ac9      	subs	r1, r1, r3
 800cab6:	f000 f8b7 	bl	800cc28 <__sccl>
 800caba:	f04f 0b00 	mov.w	fp, #0
 800cabe:	68a3      	ldr	r3, [r4, #8]
 800cac0:	6822      	ldr	r2, [r4, #0]
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	d03d      	beq.n	800cb42 <_scanf_i+0x15e>
 800cac6:	6831      	ldr	r1, [r6, #0]
 800cac8:	6960      	ldr	r0, [r4, #20]
 800caca:	f891 c000 	ldrb.w	ip, [r1]
 800cace:	f810 000c 	ldrb.w	r0, [r0, ip]
 800cad2:	2800      	cmp	r0, #0
 800cad4:	d035      	beq.n	800cb42 <_scanf_i+0x15e>
 800cad6:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800cada:	d124      	bne.n	800cb26 <_scanf_i+0x142>
 800cadc:	0510      	lsls	r0, r2, #20
 800cade:	d522      	bpl.n	800cb26 <_scanf_i+0x142>
 800cae0:	f10b 0b01 	add.w	fp, fp, #1
 800cae4:	f1b9 0f00 	cmp.w	r9, #0
 800cae8:	d003      	beq.n	800caf2 <_scanf_i+0x10e>
 800caea:	3301      	adds	r3, #1
 800caec:	f109 39ff 	add.w	r9, r9, #4294967295
 800caf0:	60a3      	str	r3, [r4, #8]
 800caf2:	6873      	ldr	r3, [r6, #4]
 800caf4:	3b01      	subs	r3, #1
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	6073      	str	r3, [r6, #4]
 800cafa:	dd1b      	ble.n	800cb34 <_scanf_i+0x150>
 800cafc:	6833      	ldr	r3, [r6, #0]
 800cafe:	3301      	adds	r3, #1
 800cb00:	6033      	str	r3, [r6, #0]
 800cb02:	68a3      	ldr	r3, [r4, #8]
 800cb04:	3b01      	subs	r3, #1
 800cb06:	60a3      	str	r3, [r4, #8]
 800cb08:	e7d9      	b.n	800cabe <_scanf_i+0xda>
 800cb0a:	f1bb 0f02 	cmp.w	fp, #2
 800cb0e:	d1ae      	bne.n	800ca6e <_scanf_i+0x8a>
 800cb10:	6822      	ldr	r2, [r4, #0]
 800cb12:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800cb16:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800cb1a:	d1bf      	bne.n	800ca9c <_scanf_i+0xb8>
 800cb1c:	2310      	movs	r3, #16
 800cb1e:	6063      	str	r3, [r4, #4]
 800cb20:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800cb24:	e7a2      	b.n	800ca6c <_scanf_i+0x88>
 800cb26:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800cb2a:	6022      	str	r2, [r4, #0]
 800cb2c:	780b      	ldrb	r3, [r1, #0]
 800cb2e:	f805 3b01 	strb.w	r3, [r5], #1
 800cb32:	e7de      	b.n	800caf2 <_scanf_i+0x10e>
 800cb34:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800cb38:	4631      	mov	r1, r6
 800cb3a:	4650      	mov	r0, sl
 800cb3c:	4798      	blx	r3
 800cb3e:	2800      	cmp	r0, #0
 800cb40:	d0df      	beq.n	800cb02 <_scanf_i+0x11e>
 800cb42:	6823      	ldr	r3, [r4, #0]
 800cb44:	05db      	lsls	r3, r3, #23
 800cb46:	d50d      	bpl.n	800cb64 <_scanf_i+0x180>
 800cb48:	42bd      	cmp	r5, r7
 800cb4a:	d909      	bls.n	800cb60 <_scanf_i+0x17c>
 800cb4c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800cb50:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800cb54:	4632      	mov	r2, r6
 800cb56:	4650      	mov	r0, sl
 800cb58:	4798      	blx	r3
 800cb5a:	f105 39ff 	add.w	r9, r5, #4294967295
 800cb5e:	464d      	mov	r5, r9
 800cb60:	42bd      	cmp	r5, r7
 800cb62:	d02d      	beq.n	800cbc0 <_scanf_i+0x1dc>
 800cb64:	6822      	ldr	r2, [r4, #0]
 800cb66:	f012 0210 	ands.w	r2, r2, #16
 800cb6a:	d113      	bne.n	800cb94 <_scanf_i+0x1b0>
 800cb6c:	702a      	strb	r2, [r5, #0]
 800cb6e:	6863      	ldr	r3, [r4, #4]
 800cb70:	9e01      	ldr	r6, [sp, #4]
 800cb72:	4639      	mov	r1, r7
 800cb74:	4650      	mov	r0, sl
 800cb76:	47b0      	blx	r6
 800cb78:	6821      	ldr	r1, [r4, #0]
 800cb7a:	f8d8 3000 	ldr.w	r3, [r8]
 800cb7e:	f011 0f20 	tst.w	r1, #32
 800cb82:	d013      	beq.n	800cbac <_scanf_i+0x1c8>
 800cb84:	1d1a      	adds	r2, r3, #4
 800cb86:	f8c8 2000 	str.w	r2, [r8]
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	6018      	str	r0, [r3, #0]
 800cb8e:	68e3      	ldr	r3, [r4, #12]
 800cb90:	3301      	adds	r3, #1
 800cb92:	60e3      	str	r3, [r4, #12]
 800cb94:	1bed      	subs	r5, r5, r7
 800cb96:	44ab      	add	fp, r5
 800cb98:	6925      	ldr	r5, [r4, #16]
 800cb9a:	445d      	add	r5, fp
 800cb9c:	6125      	str	r5, [r4, #16]
 800cb9e:	2000      	movs	r0, #0
 800cba0:	b007      	add	sp, #28
 800cba2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cba6:	f04f 0b00 	mov.w	fp, #0
 800cbaa:	e7ca      	b.n	800cb42 <_scanf_i+0x15e>
 800cbac:	1d1a      	adds	r2, r3, #4
 800cbae:	f8c8 2000 	str.w	r2, [r8]
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	f011 0f01 	tst.w	r1, #1
 800cbb8:	bf14      	ite	ne
 800cbba:	8018      	strhne	r0, [r3, #0]
 800cbbc:	6018      	streq	r0, [r3, #0]
 800cbbe:	e7e6      	b.n	800cb8e <_scanf_i+0x1aa>
 800cbc0:	2001      	movs	r0, #1
 800cbc2:	e7ed      	b.n	800cba0 <_scanf_i+0x1bc>
 800cbc4:	0800dad0 	.word	0x0800dad0
 800cbc8:	0800cd7d 	.word	0x0800cd7d
 800cbcc:	0800a2e5 	.word	0x0800a2e5
 800cbd0:	0800df0e 	.word	0x0800df0e

0800cbd4 <_read_r>:
 800cbd4:	b538      	push	{r3, r4, r5, lr}
 800cbd6:	4d07      	ldr	r5, [pc, #28]	; (800cbf4 <_read_r+0x20>)
 800cbd8:	4604      	mov	r4, r0
 800cbda:	4608      	mov	r0, r1
 800cbdc:	4611      	mov	r1, r2
 800cbde:	2200      	movs	r2, #0
 800cbe0:	602a      	str	r2, [r5, #0]
 800cbe2:	461a      	mov	r2, r3
 800cbe4:	f7f4 febe 	bl	8001964 <_read>
 800cbe8:	1c43      	adds	r3, r0, #1
 800cbea:	d102      	bne.n	800cbf2 <_read_r+0x1e>
 800cbec:	682b      	ldr	r3, [r5, #0]
 800cbee:	b103      	cbz	r3, 800cbf2 <_read_r+0x1e>
 800cbf0:	6023      	str	r3, [r4, #0]
 800cbf2:	bd38      	pop	{r3, r4, r5, pc}
 800cbf4:	20000448 	.word	0x20000448

0800cbf8 <nan>:
 800cbf8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800cc00 <nan+0x8>
 800cbfc:	4770      	bx	lr
 800cbfe:	bf00      	nop
 800cc00:	00000000 	.word	0x00000000
 800cc04:	7ff80000 	.word	0x7ff80000

0800cc08 <_sbrk_r>:
 800cc08:	b538      	push	{r3, r4, r5, lr}
 800cc0a:	4d06      	ldr	r5, [pc, #24]	; (800cc24 <_sbrk_r+0x1c>)
 800cc0c:	2300      	movs	r3, #0
 800cc0e:	4604      	mov	r4, r0
 800cc10:	4608      	mov	r0, r1
 800cc12:	602b      	str	r3, [r5, #0]
 800cc14:	f7f4 ff14 	bl	8001a40 <_sbrk>
 800cc18:	1c43      	adds	r3, r0, #1
 800cc1a:	d102      	bne.n	800cc22 <_sbrk_r+0x1a>
 800cc1c:	682b      	ldr	r3, [r5, #0]
 800cc1e:	b103      	cbz	r3, 800cc22 <_sbrk_r+0x1a>
 800cc20:	6023      	str	r3, [r4, #0]
 800cc22:	bd38      	pop	{r3, r4, r5, pc}
 800cc24:	20000448 	.word	0x20000448

0800cc28 <__sccl>:
 800cc28:	b570      	push	{r4, r5, r6, lr}
 800cc2a:	780b      	ldrb	r3, [r1, #0]
 800cc2c:	4604      	mov	r4, r0
 800cc2e:	2b5e      	cmp	r3, #94	; 0x5e
 800cc30:	bf0b      	itete	eq
 800cc32:	784b      	ldrbeq	r3, [r1, #1]
 800cc34:	1c48      	addne	r0, r1, #1
 800cc36:	1c88      	addeq	r0, r1, #2
 800cc38:	2200      	movne	r2, #0
 800cc3a:	bf08      	it	eq
 800cc3c:	2201      	moveq	r2, #1
 800cc3e:	1e61      	subs	r1, r4, #1
 800cc40:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800cc44:	f801 2f01 	strb.w	r2, [r1, #1]!
 800cc48:	42a9      	cmp	r1, r5
 800cc4a:	d1fb      	bne.n	800cc44 <__sccl+0x1c>
 800cc4c:	b90b      	cbnz	r3, 800cc52 <__sccl+0x2a>
 800cc4e:	3801      	subs	r0, #1
 800cc50:	bd70      	pop	{r4, r5, r6, pc}
 800cc52:	f082 0201 	eor.w	r2, r2, #1
 800cc56:	54e2      	strb	r2, [r4, r3]
 800cc58:	4605      	mov	r5, r0
 800cc5a:	4628      	mov	r0, r5
 800cc5c:	f810 1b01 	ldrb.w	r1, [r0], #1
 800cc60:	292d      	cmp	r1, #45	; 0x2d
 800cc62:	d006      	beq.n	800cc72 <__sccl+0x4a>
 800cc64:	295d      	cmp	r1, #93	; 0x5d
 800cc66:	d0f3      	beq.n	800cc50 <__sccl+0x28>
 800cc68:	b909      	cbnz	r1, 800cc6e <__sccl+0x46>
 800cc6a:	4628      	mov	r0, r5
 800cc6c:	e7f0      	b.n	800cc50 <__sccl+0x28>
 800cc6e:	460b      	mov	r3, r1
 800cc70:	e7f1      	b.n	800cc56 <__sccl+0x2e>
 800cc72:	786e      	ldrb	r6, [r5, #1]
 800cc74:	2e5d      	cmp	r6, #93	; 0x5d
 800cc76:	d0fa      	beq.n	800cc6e <__sccl+0x46>
 800cc78:	42b3      	cmp	r3, r6
 800cc7a:	dcf8      	bgt.n	800cc6e <__sccl+0x46>
 800cc7c:	3502      	adds	r5, #2
 800cc7e:	4619      	mov	r1, r3
 800cc80:	3101      	adds	r1, #1
 800cc82:	428e      	cmp	r6, r1
 800cc84:	5462      	strb	r2, [r4, r1]
 800cc86:	dcfb      	bgt.n	800cc80 <__sccl+0x58>
 800cc88:	1af1      	subs	r1, r6, r3
 800cc8a:	3901      	subs	r1, #1
 800cc8c:	1c58      	adds	r0, r3, #1
 800cc8e:	42b3      	cmp	r3, r6
 800cc90:	bfa8      	it	ge
 800cc92:	2100      	movge	r1, #0
 800cc94:	1843      	adds	r3, r0, r1
 800cc96:	e7e0      	b.n	800cc5a <__sccl+0x32>

0800cc98 <_strtoul_l.constprop.0>:
 800cc98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cc9c:	4f36      	ldr	r7, [pc, #216]	; (800cd78 <_strtoul_l.constprop.0+0xe0>)
 800cc9e:	4686      	mov	lr, r0
 800cca0:	460d      	mov	r5, r1
 800cca2:	4628      	mov	r0, r5
 800cca4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cca8:	5de6      	ldrb	r6, [r4, r7]
 800ccaa:	f016 0608 	ands.w	r6, r6, #8
 800ccae:	d1f8      	bne.n	800cca2 <_strtoul_l.constprop.0+0xa>
 800ccb0:	2c2d      	cmp	r4, #45	; 0x2d
 800ccb2:	d12f      	bne.n	800cd14 <_strtoul_l.constprop.0+0x7c>
 800ccb4:	782c      	ldrb	r4, [r5, #0]
 800ccb6:	2601      	movs	r6, #1
 800ccb8:	1c85      	adds	r5, r0, #2
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d057      	beq.n	800cd6e <_strtoul_l.constprop.0+0xd6>
 800ccbe:	2b10      	cmp	r3, #16
 800ccc0:	d109      	bne.n	800ccd6 <_strtoul_l.constprop.0+0x3e>
 800ccc2:	2c30      	cmp	r4, #48	; 0x30
 800ccc4:	d107      	bne.n	800ccd6 <_strtoul_l.constprop.0+0x3e>
 800ccc6:	7828      	ldrb	r0, [r5, #0]
 800ccc8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800cccc:	2858      	cmp	r0, #88	; 0x58
 800ccce:	d149      	bne.n	800cd64 <_strtoul_l.constprop.0+0xcc>
 800ccd0:	786c      	ldrb	r4, [r5, #1]
 800ccd2:	2310      	movs	r3, #16
 800ccd4:	3502      	adds	r5, #2
 800ccd6:	f04f 38ff 	mov.w	r8, #4294967295
 800ccda:	2700      	movs	r7, #0
 800ccdc:	fbb8 f8f3 	udiv	r8, r8, r3
 800cce0:	fb03 f908 	mul.w	r9, r3, r8
 800cce4:	ea6f 0909 	mvn.w	r9, r9
 800cce8:	4638      	mov	r0, r7
 800ccea:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800ccee:	f1bc 0f09 	cmp.w	ip, #9
 800ccf2:	d814      	bhi.n	800cd1e <_strtoul_l.constprop.0+0x86>
 800ccf4:	4664      	mov	r4, ip
 800ccf6:	42a3      	cmp	r3, r4
 800ccf8:	dd22      	ble.n	800cd40 <_strtoul_l.constprop.0+0xa8>
 800ccfa:	2f00      	cmp	r7, #0
 800ccfc:	db1d      	blt.n	800cd3a <_strtoul_l.constprop.0+0xa2>
 800ccfe:	4580      	cmp	r8, r0
 800cd00:	d31b      	bcc.n	800cd3a <_strtoul_l.constprop.0+0xa2>
 800cd02:	d101      	bne.n	800cd08 <_strtoul_l.constprop.0+0x70>
 800cd04:	45a1      	cmp	r9, r4
 800cd06:	db18      	blt.n	800cd3a <_strtoul_l.constprop.0+0xa2>
 800cd08:	fb00 4003 	mla	r0, r0, r3, r4
 800cd0c:	2701      	movs	r7, #1
 800cd0e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cd12:	e7ea      	b.n	800ccea <_strtoul_l.constprop.0+0x52>
 800cd14:	2c2b      	cmp	r4, #43	; 0x2b
 800cd16:	bf04      	itt	eq
 800cd18:	782c      	ldrbeq	r4, [r5, #0]
 800cd1a:	1c85      	addeq	r5, r0, #2
 800cd1c:	e7cd      	b.n	800ccba <_strtoul_l.constprop.0+0x22>
 800cd1e:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800cd22:	f1bc 0f19 	cmp.w	ip, #25
 800cd26:	d801      	bhi.n	800cd2c <_strtoul_l.constprop.0+0x94>
 800cd28:	3c37      	subs	r4, #55	; 0x37
 800cd2a:	e7e4      	b.n	800ccf6 <_strtoul_l.constprop.0+0x5e>
 800cd2c:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800cd30:	f1bc 0f19 	cmp.w	ip, #25
 800cd34:	d804      	bhi.n	800cd40 <_strtoul_l.constprop.0+0xa8>
 800cd36:	3c57      	subs	r4, #87	; 0x57
 800cd38:	e7dd      	b.n	800ccf6 <_strtoul_l.constprop.0+0x5e>
 800cd3a:	f04f 37ff 	mov.w	r7, #4294967295
 800cd3e:	e7e6      	b.n	800cd0e <_strtoul_l.constprop.0+0x76>
 800cd40:	2f00      	cmp	r7, #0
 800cd42:	da07      	bge.n	800cd54 <_strtoul_l.constprop.0+0xbc>
 800cd44:	2322      	movs	r3, #34	; 0x22
 800cd46:	f8ce 3000 	str.w	r3, [lr]
 800cd4a:	f04f 30ff 	mov.w	r0, #4294967295
 800cd4e:	b932      	cbnz	r2, 800cd5e <_strtoul_l.constprop.0+0xc6>
 800cd50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cd54:	b106      	cbz	r6, 800cd58 <_strtoul_l.constprop.0+0xc0>
 800cd56:	4240      	negs	r0, r0
 800cd58:	2a00      	cmp	r2, #0
 800cd5a:	d0f9      	beq.n	800cd50 <_strtoul_l.constprop.0+0xb8>
 800cd5c:	b107      	cbz	r7, 800cd60 <_strtoul_l.constprop.0+0xc8>
 800cd5e:	1e69      	subs	r1, r5, #1
 800cd60:	6011      	str	r1, [r2, #0]
 800cd62:	e7f5      	b.n	800cd50 <_strtoul_l.constprop.0+0xb8>
 800cd64:	2430      	movs	r4, #48	; 0x30
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d1b5      	bne.n	800ccd6 <_strtoul_l.constprop.0+0x3e>
 800cd6a:	2308      	movs	r3, #8
 800cd6c:	e7b3      	b.n	800ccd6 <_strtoul_l.constprop.0+0x3e>
 800cd6e:	2c30      	cmp	r4, #48	; 0x30
 800cd70:	d0a9      	beq.n	800ccc6 <_strtoul_l.constprop.0+0x2e>
 800cd72:	230a      	movs	r3, #10
 800cd74:	e7af      	b.n	800ccd6 <_strtoul_l.constprop.0+0x3e>
 800cd76:	bf00      	nop
 800cd78:	0800db81 	.word	0x0800db81

0800cd7c <_strtoul_r>:
 800cd7c:	f7ff bf8c 	b.w	800cc98 <_strtoul_l.constprop.0>

0800cd80 <__submore>:
 800cd80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd84:	460c      	mov	r4, r1
 800cd86:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800cd88:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cd8c:	4299      	cmp	r1, r3
 800cd8e:	d11d      	bne.n	800cdcc <__submore+0x4c>
 800cd90:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800cd94:	f7ff fa2a 	bl	800c1ec <_malloc_r>
 800cd98:	b918      	cbnz	r0, 800cda2 <__submore+0x22>
 800cd9a:	f04f 30ff 	mov.w	r0, #4294967295
 800cd9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cda2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cda6:	63a3      	str	r3, [r4, #56]	; 0x38
 800cda8:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800cdac:	6360      	str	r0, [r4, #52]	; 0x34
 800cdae:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800cdb2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800cdb6:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800cdba:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800cdbe:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800cdc2:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800cdc6:	6020      	str	r0, [r4, #0]
 800cdc8:	2000      	movs	r0, #0
 800cdca:	e7e8      	b.n	800cd9e <__submore+0x1e>
 800cdcc:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800cdce:	0077      	lsls	r7, r6, #1
 800cdd0:	463a      	mov	r2, r7
 800cdd2:	f000 fa2d 	bl	800d230 <_realloc_r>
 800cdd6:	4605      	mov	r5, r0
 800cdd8:	2800      	cmp	r0, #0
 800cdda:	d0de      	beq.n	800cd9a <__submore+0x1a>
 800cddc:	eb00 0806 	add.w	r8, r0, r6
 800cde0:	4601      	mov	r1, r0
 800cde2:	4632      	mov	r2, r6
 800cde4:	4640      	mov	r0, r8
 800cde6:	f7fb fc97 	bl	8008718 <memcpy>
 800cdea:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800cdee:	f8c4 8000 	str.w	r8, [r4]
 800cdf2:	e7e9      	b.n	800cdc8 <__submore+0x48>

0800cdf4 <__ascii_wctomb>:
 800cdf4:	b149      	cbz	r1, 800ce0a <__ascii_wctomb+0x16>
 800cdf6:	2aff      	cmp	r2, #255	; 0xff
 800cdf8:	bf85      	ittet	hi
 800cdfa:	238a      	movhi	r3, #138	; 0x8a
 800cdfc:	6003      	strhi	r3, [r0, #0]
 800cdfe:	700a      	strbls	r2, [r1, #0]
 800ce00:	f04f 30ff 	movhi.w	r0, #4294967295
 800ce04:	bf98      	it	ls
 800ce06:	2001      	movls	r0, #1
 800ce08:	4770      	bx	lr
 800ce0a:	4608      	mov	r0, r1
 800ce0c:	4770      	bx	lr
	...

0800ce10 <__assert_func>:
 800ce10:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ce12:	4614      	mov	r4, r2
 800ce14:	461a      	mov	r2, r3
 800ce16:	4b09      	ldr	r3, [pc, #36]	; (800ce3c <__assert_func+0x2c>)
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	4605      	mov	r5, r0
 800ce1c:	68d8      	ldr	r0, [r3, #12]
 800ce1e:	b14c      	cbz	r4, 800ce34 <__assert_func+0x24>
 800ce20:	4b07      	ldr	r3, [pc, #28]	; (800ce40 <__assert_func+0x30>)
 800ce22:	9100      	str	r1, [sp, #0]
 800ce24:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ce28:	4906      	ldr	r1, [pc, #24]	; (800ce44 <__assert_func+0x34>)
 800ce2a:	462b      	mov	r3, r5
 800ce2c:	f000 f9a6 	bl	800d17c <fiprintf>
 800ce30:	f000 fc46 	bl	800d6c0 <abort>
 800ce34:	4b04      	ldr	r3, [pc, #16]	; (800ce48 <__assert_func+0x38>)
 800ce36:	461c      	mov	r4, r3
 800ce38:	e7f3      	b.n	800ce22 <__assert_func+0x12>
 800ce3a:	bf00      	nop
 800ce3c:	2000000c 	.word	0x2000000c
 800ce40:	0800df10 	.word	0x0800df10
 800ce44:	0800df1d 	.word	0x0800df1d
 800ce48:	0800df4b 	.word	0x0800df4b

0800ce4c <__sflush_r>:
 800ce4c:	898a      	ldrh	r2, [r1, #12]
 800ce4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce52:	4605      	mov	r5, r0
 800ce54:	0710      	lsls	r0, r2, #28
 800ce56:	460c      	mov	r4, r1
 800ce58:	d458      	bmi.n	800cf0c <__sflush_r+0xc0>
 800ce5a:	684b      	ldr	r3, [r1, #4]
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	dc05      	bgt.n	800ce6c <__sflush_r+0x20>
 800ce60:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	dc02      	bgt.n	800ce6c <__sflush_r+0x20>
 800ce66:	2000      	movs	r0, #0
 800ce68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce6c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ce6e:	2e00      	cmp	r6, #0
 800ce70:	d0f9      	beq.n	800ce66 <__sflush_r+0x1a>
 800ce72:	2300      	movs	r3, #0
 800ce74:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ce78:	682f      	ldr	r7, [r5, #0]
 800ce7a:	602b      	str	r3, [r5, #0]
 800ce7c:	d032      	beq.n	800cee4 <__sflush_r+0x98>
 800ce7e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ce80:	89a3      	ldrh	r3, [r4, #12]
 800ce82:	075a      	lsls	r2, r3, #29
 800ce84:	d505      	bpl.n	800ce92 <__sflush_r+0x46>
 800ce86:	6863      	ldr	r3, [r4, #4]
 800ce88:	1ac0      	subs	r0, r0, r3
 800ce8a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ce8c:	b10b      	cbz	r3, 800ce92 <__sflush_r+0x46>
 800ce8e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ce90:	1ac0      	subs	r0, r0, r3
 800ce92:	2300      	movs	r3, #0
 800ce94:	4602      	mov	r2, r0
 800ce96:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ce98:	6a21      	ldr	r1, [r4, #32]
 800ce9a:	4628      	mov	r0, r5
 800ce9c:	47b0      	blx	r6
 800ce9e:	1c43      	adds	r3, r0, #1
 800cea0:	89a3      	ldrh	r3, [r4, #12]
 800cea2:	d106      	bne.n	800ceb2 <__sflush_r+0x66>
 800cea4:	6829      	ldr	r1, [r5, #0]
 800cea6:	291d      	cmp	r1, #29
 800cea8:	d82c      	bhi.n	800cf04 <__sflush_r+0xb8>
 800ceaa:	4a2a      	ldr	r2, [pc, #168]	; (800cf54 <__sflush_r+0x108>)
 800ceac:	40ca      	lsrs	r2, r1
 800ceae:	07d6      	lsls	r6, r2, #31
 800ceb0:	d528      	bpl.n	800cf04 <__sflush_r+0xb8>
 800ceb2:	2200      	movs	r2, #0
 800ceb4:	6062      	str	r2, [r4, #4]
 800ceb6:	04d9      	lsls	r1, r3, #19
 800ceb8:	6922      	ldr	r2, [r4, #16]
 800ceba:	6022      	str	r2, [r4, #0]
 800cebc:	d504      	bpl.n	800cec8 <__sflush_r+0x7c>
 800cebe:	1c42      	adds	r2, r0, #1
 800cec0:	d101      	bne.n	800cec6 <__sflush_r+0x7a>
 800cec2:	682b      	ldr	r3, [r5, #0]
 800cec4:	b903      	cbnz	r3, 800cec8 <__sflush_r+0x7c>
 800cec6:	6560      	str	r0, [r4, #84]	; 0x54
 800cec8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ceca:	602f      	str	r7, [r5, #0]
 800cecc:	2900      	cmp	r1, #0
 800cece:	d0ca      	beq.n	800ce66 <__sflush_r+0x1a>
 800ced0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ced4:	4299      	cmp	r1, r3
 800ced6:	d002      	beq.n	800cede <__sflush_r+0x92>
 800ced8:	4628      	mov	r0, r5
 800ceda:	f7ff f91b 	bl	800c114 <_free_r>
 800cede:	2000      	movs	r0, #0
 800cee0:	6360      	str	r0, [r4, #52]	; 0x34
 800cee2:	e7c1      	b.n	800ce68 <__sflush_r+0x1c>
 800cee4:	6a21      	ldr	r1, [r4, #32]
 800cee6:	2301      	movs	r3, #1
 800cee8:	4628      	mov	r0, r5
 800ceea:	47b0      	blx	r6
 800ceec:	1c41      	adds	r1, r0, #1
 800ceee:	d1c7      	bne.n	800ce80 <__sflush_r+0x34>
 800cef0:	682b      	ldr	r3, [r5, #0]
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d0c4      	beq.n	800ce80 <__sflush_r+0x34>
 800cef6:	2b1d      	cmp	r3, #29
 800cef8:	d001      	beq.n	800cefe <__sflush_r+0xb2>
 800cefa:	2b16      	cmp	r3, #22
 800cefc:	d101      	bne.n	800cf02 <__sflush_r+0xb6>
 800cefe:	602f      	str	r7, [r5, #0]
 800cf00:	e7b1      	b.n	800ce66 <__sflush_r+0x1a>
 800cf02:	89a3      	ldrh	r3, [r4, #12]
 800cf04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cf08:	81a3      	strh	r3, [r4, #12]
 800cf0a:	e7ad      	b.n	800ce68 <__sflush_r+0x1c>
 800cf0c:	690f      	ldr	r7, [r1, #16]
 800cf0e:	2f00      	cmp	r7, #0
 800cf10:	d0a9      	beq.n	800ce66 <__sflush_r+0x1a>
 800cf12:	0793      	lsls	r3, r2, #30
 800cf14:	680e      	ldr	r6, [r1, #0]
 800cf16:	bf08      	it	eq
 800cf18:	694b      	ldreq	r3, [r1, #20]
 800cf1a:	600f      	str	r7, [r1, #0]
 800cf1c:	bf18      	it	ne
 800cf1e:	2300      	movne	r3, #0
 800cf20:	eba6 0807 	sub.w	r8, r6, r7
 800cf24:	608b      	str	r3, [r1, #8]
 800cf26:	f1b8 0f00 	cmp.w	r8, #0
 800cf2a:	dd9c      	ble.n	800ce66 <__sflush_r+0x1a>
 800cf2c:	6a21      	ldr	r1, [r4, #32]
 800cf2e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cf30:	4643      	mov	r3, r8
 800cf32:	463a      	mov	r2, r7
 800cf34:	4628      	mov	r0, r5
 800cf36:	47b0      	blx	r6
 800cf38:	2800      	cmp	r0, #0
 800cf3a:	dc06      	bgt.n	800cf4a <__sflush_r+0xfe>
 800cf3c:	89a3      	ldrh	r3, [r4, #12]
 800cf3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cf42:	81a3      	strh	r3, [r4, #12]
 800cf44:	f04f 30ff 	mov.w	r0, #4294967295
 800cf48:	e78e      	b.n	800ce68 <__sflush_r+0x1c>
 800cf4a:	4407      	add	r7, r0
 800cf4c:	eba8 0800 	sub.w	r8, r8, r0
 800cf50:	e7e9      	b.n	800cf26 <__sflush_r+0xda>
 800cf52:	bf00      	nop
 800cf54:	20400001 	.word	0x20400001

0800cf58 <_fflush_r>:
 800cf58:	b538      	push	{r3, r4, r5, lr}
 800cf5a:	690b      	ldr	r3, [r1, #16]
 800cf5c:	4605      	mov	r5, r0
 800cf5e:	460c      	mov	r4, r1
 800cf60:	b913      	cbnz	r3, 800cf68 <_fflush_r+0x10>
 800cf62:	2500      	movs	r5, #0
 800cf64:	4628      	mov	r0, r5
 800cf66:	bd38      	pop	{r3, r4, r5, pc}
 800cf68:	b118      	cbz	r0, 800cf72 <_fflush_r+0x1a>
 800cf6a:	6983      	ldr	r3, [r0, #24]
 800cf6c:	b90b      	cbnz	r3, 800cf72 <_fflush_r+0x1a>
 800cf6e:	f000 f887 	bl	800d080 <__sinit>
 800cf72:	4b14      	ldr	r3, [pc, #80]	; (800cfc4 <_fflush_r+0x6c>)
 800cf74:	429c      	cmp	r4, r3
 800cf76:	d11b      	bne.n	800cfb0 <_fflush_r+0x58>
 800cf78:	686c      	ldr	r4, [r5, #4]
 800cf7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	d0ef      	beq.n	800cf62 <_fflush_r+0xa>
 800cf82:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cf84:	07d0      	lsls	r0, r2, #31
 800cf86:	d404      	bmi.n	800cf92 <_fflush_r+0x3a>
 800cf88:	0599      	lsls	r1, r3, #22
 800cf8a:	d402      	bmi.n	800cf92 <_fflush_r+0x3a>
 800cf8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cf8e:	f000 f927 	bl	800d1e0 <__retarget_lock_acquire_recursive>
 800cf92:	4628      	mov	r0, r5
 800cf94:	4621      	mov	r1, r4
 800cf96:	f7ff ff59 	bl	800ce4c <__sflush_r>
 800cf9a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cf9c:	07da      	lsls	r2, r3, #31
 800cf9e:	4605      	mov	r5, r0
 800cfa0:	d4e0      	bmi.n	800cf64 <_fflush_r+0xc>
 800cfa2:	89a3      	ldrh	r3, [r4, #12]
 800cfa4:	059b      	lsls	r3, r3, #22
 800cfa6:	d4dd      	bmi.n	800cf64 <_fflush_r+0xc>
 800cfa8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cfaa:	f000 f91a 	bl	800d1e2 <__retarget_lock_release_recursive>
 800cfae:	e7d9      	b.n	800cf64 <_fflush_r+0xc>
 800cfb0:	4b05      	ldr	r3, [pc, #20]	; (800cfc8 <_fflush_r+0x70>)
 800cfb2:	429c      	cmp	r4, r3
 800cfb4:	d101      	bne.n	800cfba <_fflush_r+0x62>
 800cfb6:	68ac      	ldr	r4, [r5, #8]
 800cfb8:	e7df      	b.n	800cf7a <_fflush_r+0x22>
 800cfba:	4b04      	ldr	r3, [pc, #16]	; (800cfcc <_fflush_r+0x74>)
 800cfbc:	429c      	cmp	r4, r3
 800cfbe:	bf08      	it	eq
 800cfc0:	68ec      	ldreq	r4, [r5, #12]
 800cfc2:	e7da      	b.n	800cf7a <_fflush_r+0x22>
 800cfc4:	0800df6c 	.word	0x0800df6c
 800cfc8:	0800df8c 	.word	0x0800df8c
 800cfcc:	0800df4c 	.word	0x0800df4c

0800cfd0 <std>:
 800cfd0:	2300      	movs	r3, #0
 800cfd2:	b510      	push	{r4, lr}
 800cfd4:	4604      	mov	r4, r0
 800cfd6:	e9c0 3300 	strd	r3, r3, [r0]
 800cfda:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cfde:	6083      	str	r3, [r0, #8]
 800cfe0:	8181      	strh	r1, [r0, #12]
 800cfe2:	6643      	str	r3, [r0, #100]	; 0x64
 800cfe4:	81c2      	strh	r2, [r0, #14]
 800cfe6:	6183      	str	r3, [r0, #24]
 800cfe8:	4619      	mov	r1, r3
 800cfea:	2208      	movs	r2, #8
 800cfec:	305c      	adds	r0, #92	; 0x5c
 800cfee:	f7fb fba1 	bl	8008734 <memset>
 800cff2:	4b05      	ldr	r3, [pc, #20]	; (800d008 <std+0x38>)
 800cff4:	6263      	str	r3, [r4, #36]	; 0x24
 800cff6:	4b05      	ldr	r3, [pc, #20]	; (800d00c <std+0x3c>)
 800cff8:	62a3      	str	r3, [r4, #40]	; 0x28
 800cffa:	4b05      	ldr	r3, [pc, #20]	; (800d010 <std+0x40>)
 800cffc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cffe:	4b05      	ldr	r3, [pc, #20]	; (800d014 <std+0x44>)
 800d000:	6224      	str	r4, [r4, #32]
 800d002:	6323      	str	r3, [r4, #48]	; 0x30
 800d004:	bd10      	pop	{r4, pc}
 800d006:	bf00      	nop
 800d008:	080094dd 	.word	0x080094dd
 800d00c:	08009503 	.word	0x08009503
 800d010:	0800953b 	.word	0x0800953b
 800d014:	0800955f 	.word	0x0800955f

0800d018 <_cleanup_r>:
 800d018:	4901      	ldr	r1, [pc, #4]	; (800d020 <_cleanup_r+0x8>)
 800d01a:	f000 b8c1 	b.w	800d1a0 <_fwalk_reent>
 800d01e:	bf00      	nop
 800d020:	0800cf59 	.word	0x0800cf59

0800d024 <__sfmoreglue>:
 800d024:	b570      	push	{r4, r5, r6, lr}
 800d026:	2268      	movs	r2, #104	; 0x68
 800d028:	1e4d      	subs	r5, r1, #1
 800d02a:	4355      	muls	r5, r2
 800d02c:	460e      	mov	r6, r1
 800d02e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d032:	f7ff f8db 	bl	800c1ec <_malloc_r>
 800d036:	4604      	mov	r4, r0
 800d038:	b140      	cbz	r0, 800d04c <__sfmoreglue+0x28>
 800d03a:	2100      	movs	r1, #0
 800d03c:	e9c0 1600 	strd	r1, r6, [r0]
 800d040:	300c      	adds	r0, #12
 800d042:	60a0      	str	r0, [r4, #8]
 800d044:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d048:	f7fb fb74 	bl	8008734 <memset>
 800d04c:	4620      	mov	r0, r4
 800d04e:	bd70      	pop	{r4, r5, r6, pc}

0800d050 <__sfp_lock_acquire>:
 800d050:	4801      	ldr	r0, [pc, #4]	; (800d058 <__sfp_lock_acquire+0x8>)
 800d052:	f000 b8c5 	b.w	800d1e0 <__retarget_lock_acquire_recursive>
 800d056:	bf00      	nop
 800d058:	2000044d 	.word	0x2000044d

0800d05c <__sfp_lock_release>:
 800d05c:	4801      	ldr	r0, [pc, #4]	; (800d064 <__sfp_lock_release+0x8>)
 800d05e:	f000 b8c0 	b.w	800d1e2 <__retarget_lock_release_recursive>
 800d062:	bf00      	nop
 800d064:	2000044d 	.word	0x2000044d

0800d068 <__sinit_lock_acquire>:
 800d068:	4801      	ldr	r0, [pc, #4]	; (800d070 <__sinit_lock_acquire+0x8>)
 800d06a:	f000 b8b9 	b.w	800d1e0 <__retarget_lock_acquire_recursive>
 800d06e:	bf00      	nop
 800d070:	2000044e 	.word	0x2000044e

0800d074 <__sinit_lock_release>:
 800d074:	4801      	ldr	r0, [pc, #4]	; (800d07c <__sinit_lock_release+0x8>)
 800d076:	f000 b8b4 	b.w	800d1e2 <__retarget_lock_release_recursive>
 800d07a:	bf00      	nop
 800d07c:	2000044e 	.word	0x2000044e

0800d080 <__sinit>:
 800d080:	b510      	push	{r4, lr}
 800d082:	4604      	mov	r4, r0
 800d084:	f7ff fff0 	bl	800d068 <__sinit_lock_acquire>
 800d088:	69a3      	ldr	r3, [r4, #24]
 800d08a:	b11b      	cbz	r3, 800d094 <__sinit+0x14>
 800d08c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d090:	f7ff bff0 	b.w	800d074 <__sinit_lock_release>
 800d094:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d098:	6523      	str	r3, [r4, #80]	; 0x50
 800d09a:	4b13      	ldr	r3, [pc, #76]	; (800d0e8 <__sinit+0x68>)
 800d09c:	4a13      	ldr	r2, [pc, #76]	; (800d0ec <__sinit+0x6c>)
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	62a2      	str	r2, [r4, #40]	; 0x28
 800d0a2:	42a3      	cmp	r3, r4
 800d0a4:	bf04      	itt	eq
 800d0a6:	2301      	moveq	r3, #1
 800d0a8:	61a3      	streq	r3, [r4, #24]
 800d0aa:	4620      	mov	r0, r4
 800d0ac:	f000 f820 	bl	800d0f0 <__sfp>
 800d0b0:	6060      	str	r0, [r4, #4]
 800d0b2:	4620      	mov	r0, r4
 800d0b4:	f000 f81c 	bl	800d0f0 <__sfp>
 800d0b8:	60a0      	str	r0, [r4, #8]
 800d0ba:	4620      	mov	r0, r4
 800d0bc:	f000 f818 	bl	800d0f0 <__sfp>
 800d0c0:	2200      	movs	r2, #0
 800d0c2:	60e0      	str	r0, [r4, #12]
 800d0c4:	2104      	movs	r1, #4
 800d0c6:	6860      	ldr	r0, [r4, #4]
 800d0c8:	f7ff ff82 	bl	800cfd0 <std>
 800d0cc:	68a0      	ldr	r0, [r4, #8]
 800d0ce:	2201      	movs	r2, #1
 800d0d0:	2109      	movs	r1, #9
 800d0d2:	f7ff ff7d 	bl	800cfd0 <std>
 800d0d6:	68e0      	ldr	r0, [r4, #12]
 800d0d8:	2202      	movs	r2, #2
 800d0da:	2112      	movs	r1, #18
 800d0dc:	f7ff ff78 	bl	800cfd0 <std>
 800d0e0:	2301      	movs	r3, #1
 800d0e2:	61a3      	str	r3, [r4, #24]
 800d0e4:	e7d2      	b.n	800d08c <__sinit+0xc>
 800d0e6:	bf00      	nop
 800d0e8:	0800daf4 	.word	0x0800daf4
 800d0ec:	0800d019 	.word	0x0800d019

0800d0f0 <__sfp>:
 800d0f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0f2:	4607      	mov	r7, r0
 800d0f4:	f7ff ffac 	bl	800d050 <__sfp_lock_acquire>
 800d0f8:	4b1e      	ldr	r3, [pc, #120]	; (800d174 <__sfp+0x84>)
 800d0fa:	681e      	ldr	r6, [r3, #0]
 800d0fc:	69b3      	ldr	r3, [r6, #24]
 800d0fe:	b913      	cbnz	r3, 800d106 <__sfp+0x16>
 800d100:	4630      	mov	r0, r6
 800d102:	f7ff ffbd 	bl	800d080 <__sinit>
 800d106:	3648      	adds	r6, #72	; 0x48
 800d108:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d10c:	3b01      	subs	r3, #1
 800d10e:	d503      	bpl.n	800d118 <__sfp+0x28>
 800d110:	6833      	ldr	r3, [r6, #0]
 800d112:	b30b      	cbz	r3, 800d158 <__sfp+0x68>
 800d114:	6836      	ldr	r6, [r6, #0]
 800d116:	e7f7      	b.n	800d108 <__sfp+0x18>
 800d118:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d11c:	b9d5      	cbnz	r5, 800d154 <__sfp+0x64>
 800d11e:	4b16      	ldr	r3, [pc, #88]	; (800d178 <__sfp+0x88>)
 800d120:	60e3      	str	r3, [r4, #12]
 800d122:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d126:	6665      	str	r5, [r4, #100]	; 0x64
 800d128:	f000 f859 	bl	800d1de <__retarget_lock_init_recursive>
 800d12c:	f7ff ff96 	bl	800d05c <__sfp_lock_release>
 800d130:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d134:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d138:	6025      	str	r5, [r4, #0]
 800d13a:	61a5      	str	r5, [r4, #24]
 800d13c:	2208      	movs	r2, #8
 800d13e:	4629      	mov	r1, r5
 800d140:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d144:	f7fb faf6 	bl	8008734 <memset>
 800d148:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d14c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d150:	4620      	mov	r0, r4
 800d152:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d154:	3468      	adds	r4, #104	; 0x68
 800d156:	e7d9      	b.n	800d10c <__sfp+0x1c>
 800d158:	2104      	movs	r1, #4
 800d15a:	4638      	mov	r0, r7
 800d15c:	f7ff ff62 	bl	800d024 <__sfmoreglue>
 800d160:	4604      	mov	r4, r0
 800d162:	6030      	str	r0, [r6, #0]
 800d164:	2800      	cmp	r0, #0
 800d166:	d1d5      	bne.n	800d114 <__sfp+0x24>
 800d168:	f7ff ff78 	bl	800d05c <__sfp_lock_release>
 800d16c:	230c      	movs	r3, #12
 800d16e:	603b      	str	r3, [r7, #0]
 800d170:	e7ee      	b.n	800d150 <__sfp+0x60>
 800d172:	bf00      	nop
 800d174:	0800daf4 	.word	0x0800daf4
 800d178:	ffff0001 	.word	0xffff0001

0800d17c <fiprintf>:
 800d17c:	b40e      	push	{r1, r2, r3}
 800d17e:	b503      	push	{r0, r1, lr}
 800d180:	4601      	mov	r1, r0
 800d182:	ab03      	add	r3, sp, #12
 800d184:	4805      	ldr	r0, [pc, #20]	; (800d19c <fiprintf+0x20>)
 800d186:	f853 2b04 	ldr.w	r2, [r3], #4
 800d18a:	6800      	ldr	r0, [r0, #0]
 800d18c:	9301      	str	r3, [sp, #4]
 800d18e:	f000 f8a7 	bl	800d2e0 <_vfiprintf_r>
 800d192:	b002      	add	sp, #8
 800d194:	f85d eb04 	ldr.w	lr, [sp], #4
 800d198:	b003      	add	sp, #12
 800d19a:	4770      	bx	lr
 800d19c:	2000000c 	.word	0x2000000c

0800d1a0 <_fwalk_reent>:
 800d1a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d1a4:	4606      	mov	r6, r0
 800d1a6:	4688      	mov	r8, r1
 800d1a8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d1ac:	2700      	movs	r7, #0
 800d1ae:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d1b2:	f1b9 0901 	subs.w	r9, r9, #1
 800d1b6:	d505      	bpl.n	800d1c4 <_fwalk_reent+0x24>
 800d1b8:	6824      	ldr	r4, [r4, #0]
 800d1ba:	2c00      	cmp	r4, #0
 800d1bc:	d1f7      	bne.n	800d1ae <_fwalk_reent+0xe>
 800d1be:	4638      	mov	r0, r7
 800d1c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d1c4:	89ab      	ldrh	r3, [r5, #12]
 800d1c6:	2b01      	cmp	r3, #1
 800d1c8:	d907      	bls.n	800d1da <_fwalk_reent+0x3a>
 800d1ca:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d1ce:	3301      	adds	r3, #1
 800d1d0:	d003      	beq.n	800d1da <_fwalk_reent+0x3a>
 800d1d2:	4629      	mov	r1, r5
 800d1d4:	4630      	mov	r0, r6
 800d1d6:	47c0      	blx	r8
 800d1d8:	4307      	orrs	r7, r0
 800d1da:	3568      	adds	r5, #104	; 0x68
 800d1dc:	e7e9      	b.n	800d1b2 <_fwalk_reent+0x12>

0800d1de <__retarget_lock_init_recursive>:
 800d1de:	4770      	bx	lr

0800d1e0 <__retarget_lock_acquire_recursive>:
 800d1e0:	4770      	bx	lr

0800d1e2 <__retarget_lock_release_recursive>:
 800d1e2:	4770      	bx	lr

0800d1e4 <memmove>:
 800d1e4:	4288      	cmp	r0, r1
 800d1e6:	b510      	push	{r4, lr}
 800d1e8:	eb01 0402 	add.w	r4, r1, r2
 800d1ec:	d902      	bls.n	800d1f4 <memmove+0x10>
 800d1ee:	4284      	cmp	r4, r0
 800d1f0:	4623      	mov	r3, r4
 800d1f2:	d807      	bhi.n	800d204 <memmove+0x20>
 800d1f4:	1e43      	subs	r3, r0, #1
 800d1f6:	42a1      	cmp	r1, r4
 800d1f8:	d008      	beq.n	800d20c <memmove+0x28>
 800d1fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d1fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d202:	e7f8      	b.n	800d1f6 <memmove+0x12>
 800d204:	4402      	add	r2, r0
 800d206:	4601      	mov	r1, r0
 800d208:	428a      	cmp	r2, r1
 800d20a:	d100      	bne.n	800d20e <memmove+0x2a>
 800d20c:	bd10      	pop	{r4, pc}
 800d20e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d212:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d216:	e7f7      	b.n	800d208 <memmove+0x24>

0800d218 <__malloc_lock>:
 800d218:	4801      	ldr	r0, [pc, #4]	; (800d220 <__malloc_lock+0x8>)
 800d21a:	f7ff bfe1 	b.w	800d1e0 <__retarget_lock_acquire_recursive>
 800d21e:	bf00      	nop
 800d220:	2000044c 	.word	0x2000044c

0800d224 <__malloc_unlock>:
 800d224:	4801      	ldr	r0, [pc, #4]	; (800d22c <__malloc_unlock+0x8>)
 800d226:	f7ff bfdc 	b.w	800d1e2 <__retarget_lock_release_recursive>
 800d22a:	bf00      	nop
 800d22c:	2000044c 	.word	0x2000044c

0800d230 <_realloc_r>:
 800d230:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d234:	4680      	mov	r8, r0
 800d236:	4614      	mov	r4, r2
 800d238:	460e      	mov	r6, r1
 800d23a:	b921      	cbnz	r1, 800d246 <_realloc_r+0x16>
 800d23c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d240:	4611      	mov	r1, r2
 800d242:	f7fe bfd3 	b.w	800c1ec <_malloc_r>
 800d246:	b92a      	cbnz	r2, 800d254 <_realloc_r+0x24>
 800d248:	f7fe ff64 	bl	800c114 <_free_r>
 800d24c:	4625      	mov	r5, r4
 800d24e:	4628      	mov	r0, r5
 800d250:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d254:	f000 faa0 	bl	800d798 <_malloc_usable_size_r>
 800d258:	4284      	cmp	r4, r0
 800d25a:	4607      	mov	r7, r0
 800d25c:	d802      	bhi.n	800d264 <_realloc_r+0x34>
 800d25e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d262:	d812      	bhi.n	800d28a <_realloc_r+0x5a>
 800d264:	4621      	mov	r1, r4
 800d266:	4640      	mov	r0, r8
 800d268:	f7fe ffc0 	bl	800c1ec <_malloc_r>
 800d26c:	4605      	mov	r5, r0
 800d26e:	2800      	cmp	r0, #0
 800d270:	d0ed      	beq.n	800d24e <_realloc_r+0x1e>
 800d272:	42bc      	cmp	r4, r7
 800d274:	4622      	mov	r2, r4
 800d276:	4631      	mov	r1, r6
 800d278:	bf28      	it	cs
 800d27a:	463a      	movcs	r2, r7
 800d27c:	f7fb fa4c 	bl	8008718 <memcpy>
 800d280:	4631      	mov	r1, r6
 800d282:	4640      	mov	r0, r8
 800d284:	f7fe ff46 	bl	800c114 <_free_r>
 800d288:	e7e1      	b.n	800d24e <_realloc_r+0x1e>
 800d28a:	4635      	mov	r5, r6
 800d28c:	e7df      	b.n	800d24e <_realloc_r+0x1e>

0800d28e <__sfputc_r>:
 800d28e:	6893      	ldr	r3, [r2, #8]
 800d290:	3b01      	subs	r3, #1
 800d292:	2b00      	cmp	r3, #0
 800d294:	b410      	push	{r4}
 800d296:	6093      	str	r3, [r2, #8]
 800d298:	da08      	bge.n	800d2ac <__sfputc_r+0x1e>
 800d29a:	6994      	ldr	r4, [r2, #24]
 800d29c:	42a3      	cmp	r3, r4
 800d29e:	db01      	blt.n	800d2a4 <__sfputc_r+0x16>
 800d2a0:	290a      	cmp	r1, #10
 800d2a2:	d103      	bne.n	800d2ac <__sfputc_r+0x1e>
 800d2a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d2a8:	f000 b94a 	b.w	800d540 <__swbuf_r>
 800d2ac:	6813      	ldr	r3, [r2, #0]
 800d2ae:	1c58      	adds	r0, r3, #1
 800d2b0:	6010      	str	r0, [r2, #0]
 800d2b2:	7019      	strb	r1, [r3, #0]
 800d2b4:	4608      	mov	r0, r1
 800d2b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d2ba:	4770      	bx	lr

0800d2bc <__sfputs_r>:
 800d2bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d2be:	4606      	mov	r6, r0
 800d2c0:	460f      	mov	r7, r1
 800d2c2:	4614      	mov	r4, r2
 800d2c4:	18d5      	adds	r5, r2, r3
 800d2c6:	42ac      	cmp	r4, r5
 800d2c8:	d101      	bne.n	800d2ce <__sfputs_r+0x12>
 800d2ca:	2000      	movs	r0, #0
 800d2cc:	e007      	b.n	800d2de <__sfputs_r+0x22>
 800d2ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d2d2:	463a      	mov	r2, r7
 800d2d4:	4630      	mov	r0, r6
 800d2d6:	f7ff ffda 	bl	800d28e <__sfputc_r>
 800d2da:	1c43      	adds	r3, r0, #1
 800d2dc:	d1f3      	bne.n	800d2c6 <__sfputs_r+0xa>
 800d2de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d2e0 <_vfiprintf_r>:
 800d2e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2e4:	460d      	mov	r5, r1
 800d2e6:	b09d      	sub	sp, #116	; 0x74
 800d2e8:	4614      	mov	r4, r2
 800d2ea:	4698      	mov	r8, r3
 800d2ec:	4606      	mov	r6, r0
 800d2ee:	b118      	cbz	r0, 800d2f8 <_vfiprintf_r+0x18>
 800d2f0:	6983      	ldr	r3, [r0, #24]
 800d2f2:	b90b      	cbnz	r3, 800d2f8 <_vfiprintf_r+0x18>
 800d2f4:	f7ff fec4 	bl	800d080 <__sinit>
 800d2f8:	4b89      	ldr	r3, [pc, #548]	; (800d520 <_vfiprintf_r+0x240>)
 800d2fa:	429d      	cmp	r5, r3
 800d2fc:	d11b      	bne.n	800d336 <_vfiprintf_r+0x56>
 800d2fe:	6875      	ldr	r5, [r6, #4]
 800d300:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d302:	07d9      	lsls	r1, r3, #31
 800d304:	d405      	bmi.n	800d312 <_vfiprintf_r+0x32>
 800d306:	89ab      	ldrh	r3, [r5, #12]
 800d308:	059a      	lsls	r2, r3, #22
 800d30a:	d402      	bmi.n	800d312 <_vfiprintf_r+0x32>
 800d30c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d30e:	f7ff ff67 	bl	800d1e0 <__retarget_lock_acquire_recursive>
 800d312:	89ab      	ldrh	r3, [r5, #12]
 800d314:	071b      	lsls	r3, r3, #28
 800d316:	d501      	bpl.n	800d31c <_vfiprintf_r+0x3c>
 800d318:	692b      	ldr	r3, [r5, #16]
 800d31a:	b9eb      	cbnz	r3, 800d358 <_vfiprintf_r+0x78>
 800d31c:	4629      	mov	r1, r5
 800d31e:	4630      	mov	r0, r6
 800d320:	f000 f960 	bl	800d5e4 <__swsetup_r>
 800d324:	b1c0      	cbz	r0, 800d358 <_vfiprintf_r+0x78>
 800d326:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d328:	07dc      	lsls	r4, r3, #31
 800d32a:	d50e      	bpl.n	800d34a <_vfiprintf_r+0x6a>
 800d32c:	f04f 30ff 	mov.w	r0, #4294967295
 800d330:	b01d      	add	sp, #116	; 0x74
 800d332:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d336:	4b7b      	ldr	r3, [pc, #492]	; (800d524 <_vfiprintf_r+0x244>)
 800d338:	429d      	cmp	r5, r3
 800d33a:	d101      	bne.n	800d340 <_vfiprintf_r+0x60>
 800d33c:	68b5      	ldr	r5, [r6, #8]
 800d33e:	e7df      	b.n	800d300 <_vfiprintf_r+0x20>
 800d340:	4b79      	ldr	r3, [pc, #484]	; (800d528 <_vfiprintf_r+0x248>)
 800d342:	429d      	cmp	r5, r3
 800d344:	bf08      	it	eq
 800d346:	68f5      	ldreq	r5, [r6, #12]
 800d348:	e7da      	b.n	800d300 <_vfiprintf_r+0x20>
 800d34a:	89ab      	ldrh	r3, [r5, #12]
 800d34c:	0598      	lsls	r0, r3, #22
 800d34e:	d4ed      	bmi.n	800d32c <_vfiprintf_r+0x4c>
 800d350:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d352:	f7ff ff46 	bl	800d1e2 <__retarget_lock_release_recursive>
 800d356:	e7e9      	b.n	800d32c <_vfiprintf_r+0x4c>
 800d358:	2300      	movs	r3, #0
 800d35a:	9309      	str	r3, [sp, #36]	; 0x24
 800d35c:	2320      	movs	r3, #32
 800d35e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d362:	f8cd 800c 	str.w	r8, [sp, #12]
 800d366:	2330      	movs	r3, #48	; 0x30
 800d368:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d52c <_vfiprintf_r+0x24c>
 800d36c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d370:	f04f 0901 	mov.w	r9, #1
 800d374:	4623      	mov	r3, r4
 800d376:	469a      	mov	sl, r3
 800d378:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d37c:	b10a      	cbz	r2, 800d382 <_vfiprintf_r+0xa2>
 800d37e:	2a25      	cmp	r2, #37	; 0x25
 800d380:	d1f9      	bne.n	800d376 <_vfiprintf_r+0x96>
 800d382:	ebba 0b04 	subs.w	fp, sl, r4
 800d386:	d00b      	beq.n	800d3a0 <_vfiprintf_r+0xc0>
 800d388:	465b      	mov	r3, fp
 800d38a:	4622      	mov	r2, r4
 800d38c:	4629      	mov	r1, r5
 800d38e:	4630      	mov	r0, r6
 800d390:	f7ff ff94 	bl	800d2bc <__sfputs_r>
 800d394:	3001      	adds	r0, #1
 800d396:	f000 80aa 	beq.w	800d4ee <_vfiprintf_r+0x20e>
 800d39a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d39c:	445a      	add	r2, fp
 800d39e:	9209      	str	r2, [sp, #36]	; 0x24
 800d3a0:	f89a 3000 	ldrb.w	r3, [sl]
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	f000 80a2 	beq.w	800d4ee <_vfiprintf_r+0x20e>
 800d3aa:	2300      	movs	r3, #0
 800d3ac:	f04f 32ff 	mov.w	r2, #4294967295
 800d3b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d3b4:	f10a 0a01 	add.w	sl, sl, #1
 800d3b8:	9304      	str	r3, [sp, #16]
 800d3ba:	9307      	str	r3, [sp, #28]
 800d3bc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d3c0:	931a      	str	r3, [sp, #104]	; 0x68
 800d3c2:	4654      	mov	r4, sl
 800d3c4:	2205      	movs	r2, #5
 800d3c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d3ca:	4858      	ldr	r0, [pc, #352]	; (800d52c <_vfiprintf_r+0x24c>)
 800d3cc:	f7f2 ff28 	bl	8000220 <memchr>
 800d3d0:	9a04      	ldr	r2, [sp, #16]
 800d3d2:	b9d8      	cbnz	r0, 800d40c <_vfiprintf_r+0x12c>
 800d3d4:	06d1      	lsls	r1, r2, #27
 800d3d6:	bf44      	itt	mi
 800d3d8:	2320      	movmi	r3, #32
 800d3da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d3de:	0713      	lsls	r3, r2, #28
 800d3e0:	bf44      	itt	mi
 800d3e2:	232b      	movmi	r3, #43	; 0x2b
 800d3e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d3e8:	f89a 3000 	ldrb.w	r3, [sl]
 800d3ec:	2b2a      	cmp	r3, #42	; 0x2a
 800d3ee:	d015      	beq.n	800d41c <_vfiprintf_r+0x13c>
 800d3f0:	9a07      	ldr	r2, [sp, #28]
 800d3f2:	4654      	mov	r4, sl
 800d3f4:	2000      	movs	r0, #0
 800d3f6:	f04f 0c0a 	mov.w	ip, #10
 800d3fa:	4621      	mov	r1, r4
 800d3fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d400:	3b30      	subs	r3, #48	; 0x30
 800d402:	2b09      	cmp	r3, #9
 800d404:	d94e      	bls.n	800d4a4 <_vfiprintf_r+0x1c4>
 800d406:	b1b0      	cbz	r0, 800d436 <_vfiprintf_r+0x156>
 800d408:	9207      	str	r2, [sp, #28]
 800d40a:	e014      	b.n	800d436 <_vfiprintf_r+0x156>
 800d40c:	eba0 0308 	sub.w	r3, r0, r8
 800d410:	fa09 f303 	lsl.w	r3, r9, r3
 800d414:	4313      	orrs	r3, r2
 800d416:	9304      	str	r3, [sp, #16]
 800d418:	46a2      	mov	sl, r4
 800d41a:	e7d2      	b.n	800d3c2 <_vfiprintf_r+0xe2>
 800d41c:	9b03      	ldr	r3, [sp, #12]
 800d41e:	1d19      	adds	r1, r3, #4
 800d420:	681b      	ldr	r3, [r3, #0]
 800d422:	9103      	str	r1, [sp, #12]
 800d424:	2b00      	cmp	r3, #0
 800d426:	bfbb      	ittet	lt
 800d428:	425b      	neglt	r3, r3
 800d42a:	f042 0202 	orrlt.w	r2, r2, #2
 800d42e:	9307      	strge	r3, [sp, #28]
 800d430:	9307      	strlt	r3, [sp, #28]
 800d432:	bfb8      	it	lt
 800d434:	9204      	strlt	r2, [sp, #16]
 800d436:	7823      	ldrb	r3, [r4, #0]
 800d438:	2b2e      	cmp	r3, #46	; 0x2e
 800d43a:	d10c      	bne.n	800d456 <_vfiprintf_r+0x176>
 800d43c:	7863      	ldrb	r3, [r4, #1]
 800d43e:	2b2a      	cmp	r3, #42	; 0x2a
 800d440:	d135      	bne.n	800d4ae <_vfiprintf_r+0x1ce>
 800d442:	9b03      	ldr	r3, [sp, #12]
 800d444:	1d1a      	adds	r2, r3, #4
 800d446:	681b      	ldr	r3, [r3, #0]
 800d448:	9203      	str	r2, [sp, #12]
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	bfb8      	it	lt
 800d44e:	f04f 33ff 	movlt.w	r3, #4294967295
 800d452:	3402      	adds	r4, #2
 800d454:	9305      	str	r3, [sp, #20]
 800d456:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d53c <_vfiprintf_r+0x25c>
 800d45a:	7821      	ldrb	r1, [r4, #0]
 800d45c:	2203      	movs	r2, #3
 800d45e:	4650      	mov	r0, sl
 800d460:	f7f2 fede 	bl	8000220 <memchr>
 800d464:	b140      	cbz	r0, 800d478 <_vfiprintf_r+0x198>
 800d466:	2340      	movs	r3, #64	; 0x40
 800d468:	eba0 000a 	sub.w	r0, r0, sl
 800d46c:	fa03 f000 	lsl.w	r0, r3, r0
 800d470:	9b04      	ldr	r3, [sp, #16]
 800d472:	4303      	orrs	r3, r0
 800d474:	3401      	adds	r4, #1
 800d476:	9304      	str	r3, [sp, #16]
 800d478:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d47c:	482c      	ldr	r0, [pc, #176]	; (800d530 <_vfiprintf_r+0x250>)
 800d47e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d482:	2206      	movs	r2, #6
 800d484:	f7f2 fecc 	bl	8000220 <memchr>
 800d488:	2800      	cmp	r0, #0
 800d48a:	d03f      	beq.n	800d50c <_vfiprintf_r+0x22c>
 800d48c:	4b29      	ldr	r3, [pc, #164]	; (800d534 <_vfiprintf_r+0x254>)
 800d48e:	bb1b      	cbnz	r3, 800d4d8 <_vfiprintf_r+0x1f8>
 800d490:	9b03      	ldr	r3, [sp, #12]
 800d492:	3307      	adds	r3, #7
 800d494:	f023 0307 	bic.w	r3, r3, #7
 800d498:	3308      	adds	r3, #8
 800d49a:	9303      	str	r3, [sp, #12]
 800d49c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d49e:	443b      	add	r3, r7
 800d4a0:	9309      	str	r3, [sp, #36]	; 0x24
 800d4a2:	e767      	b.n	800d374 <_vfiprintf_r+0x94>
 800d4a4:	fb0c 3202 	mla	r2, ip, r2, r3
 800d4a8:	460c      	mov	r4, r1
 800d4aa:	2001      	movs	r0, #1
 800d4ac:	e7a5      	b.n	800d3fa <_vfiprintf_r+0x11a>
 800d4ae:	2300      	movs	r3, #0
 800d4b0:	3401      	adds	r4, #1
 800d4b2:	9305      	str	r3, [sp, #20]
 800d4b4:	4619      	mov	r1, r3
 800d4b6:	f04f 0c0a 	mov.w	ip, #10
 800d4ba:	4620      	mov	r0, r4
 800d4bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d4c0:	3a30      	subs	r2, #48	; 0x30
 800d4c2:	2a09      	cmp	r2, #9
 800d4c4:	d903      	bls.n	800d4ce <_vfiprintf_r+0x1ee>
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d0c5      	beq.n	800d456 <_vfiprintf_r+0x176>
 800d4ca:	9105      	str	r1, [sp, #20]
 800d4cc:	e7c3      	b.n	800d456 <_vfiprintf_r+0x176>
 800d4ce:	fb0c 2101 	mla	r1, ip, r1, r2
 800d4d2:	4604      	mov	r4, r0
 800d4d4:	2301      	movs	r3, #1
 800d4d6:	e7f0      	b.n	800d4ba <_vfiprintf_r+0x1da>
 800d4d8:	ab03      	add	r3, sp, #12
 800d4da:	9300      	str	r3, [sp, #0]
 800d4dc:	462a      	mov	r2, r5
 800d4de:	4b16      	ldr	r3, [pc, #88]	; (800d538 <_vfiprintf_r+0x258>)
 800d4e0:	a904      	add	r1, sp, #16
 800d4e2:	4630      	mov	r0, r6
 800d4e4:	f7fb f9ce 	bl	8008884 <_printf_float>
 800d4e8:	4607      	mov	r7, r0
 800d4ea:	1c78      	adds	r0, r7, #1
 800d4ec:	d1d6      	bne.n	800d49c <_vfiprintf_r+0x1bc>
 800d4ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d4f0:	07d9      	lsls	r1, r3, #31
 800d4f2:	d405      	bmi.n	800d500 <_vfiprintf_r+0x220>
 800d4f4:	89ab      	ldrh	r3, [r5, #12]
 800d4f6:	059a      	lsls	r2, r3, #22
 800d4f8:	d402      	bmi.n	800d500 <_vfiprintf_r+0x220>
 800d4fa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d4fc:	f7ff fe71 	bl	800d1e2 <__retarget_lock_release_recursive>
 800d500:	89ab      	ldrh	r3, [r5, #12]
 800d502:	065b      	lsls	r3, r3, #25
 800d504:	f53f af12 	bmi.w	800d32c <_vfiprintf_r+0x4c>
 800d508:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d50a:	e711      	b.n	800d330 <_vfiprintf_r+0x50>
 800d50c:	ab03      	add	r3, sp, #12
 800d50e:	9300      	str	r3, [sp, #0]
 800d510:	462a      	mov	r2, r5
 800d512:	4b09      	ldr	r3, [pc, #36]	; (800d538 <_vfiprintf_r+0x258>)
 800d514:	a904      	add	r1, sp, #16
 800d516:	4630      	mov	r0, r6
 800d518:	f7fb fc58 	bl	8008dcc <_printf_i>
 800d51c:	e7e4      	b.n	800d4e8 <_vfiprintf_r+0x208>
 800d51e:	bf00      	nop
 800d520:	0800df6c 	.word	0x0800df6c
 800d524:	0800df8c 	.word	0x0800df8c
 800d528:	0800df4c 	.word	0x0800df4c
 800d52c:	0800dee4 	.word	0x0800dee4
 800d530:	0800deee 	.word	0x0800deee
 800d534:	08008885 	.word	0x08008885
 800d538:	0800d2bd 	.word	0x0800d2bd
 800d53c:	0800deea 	.word	0x0800deea

0800d540 <__swbuf_r>:
 800d540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d542:	460e      	mov	r6, r1
 800d544:	4614      	mov	r4, r2
 800d546:	4605      	mov	r5, r0
 800d548:	b118      	cbz	r0, 800d552 <__swbuf_r+0x12>
 800d54a:	6983      	ldr	r3, [r0, #24]
 800d54c:	b90b      	cbnz	r3, 800d552 <__swbuf_r+0x12>
 800d54e:	f7ff fd97 	bl	800d080 <__sinit>
 800d552:	4b21      	ldr	r3, [pc, #132]	; (800d5d8 <__swbuf_r+0x98>)
 800d554:	429c      	cmp	r4, r3
 800d556:	d12b      	bne.n	800d5b0 <__swbuf_r+0x70>
 800d558:	686c      	ldr	r4, [r5, #4]
 800d55a:	69a3      	ldr	r3, [r4, #24]
 800d55c:	60a3      	str	r3, [r4, #8]
 800d55e:	89a3      	ldrh	r3, [r4, #12]
 800d560:	071a      	lsls	r2, r3, #28
 800d562:	d52f      	bpl.n	800d5c4 <__swbuf_r+0x84>
 800d564:	6923      	ldr	r3, [r4, #16]
 800d566:	b36b      	cbz	r3, 800d5c4 <__swbuf_r+0x84>
 800d568:	6923      	ldr	r3, [r4, #16]
 800d56a:	6820      	ldr	r0, [r4, #0]
 800d56c:	1ac0      	subs	r0, r0, r3
 800d56e:	6963      	ldr	r3, [r4, #20]
 800d570:	b2f6      	uxtb	r6, r6
 800d572:	4283      	cmp	r3, r0
 800d574:	4637      	mov	r7, r6
 800d576:	dc04      	bgt.n	800d582 <__swbuf_r+0x42>
 800d578:	4621      	mov	r1, r4
 800d57a:	4628      	mov	r0, r5
 800d57c:	f7ff fcec 	bl	800cf58 <_fflush_r>
 800d580:	bb30      	cbnz	r0, 800d5d0 <__swbuf_r+0x90>
 800d582:	68a3      	ldr	r3, [r4, #8]
 800d584:	3b01      	subs	r3, #1
 800d586:	60a3      	str	r3, [r4, #8]
 800d588:	6823      	ldr	r3, [r4, #0]
 800d58a:	1c5a      	adds	r2, r3, #1
 800d58c:	6022      	str	r2, [r4, #0]
 800d58e:	701e      	strb	r6, [r3, #0]
 800d590:	6963      	ldr	r3, [r4, #20]
 800d592:	3001      	adds	r0, #1
 800d594:	4283      	cmp	r3, r0
 800d596:	d004      	beq.n	800d5a2 <__swbuf_r+0x62>
 800d598:	89a3      	ldrh	r3, [r4, #12]
 800d59a:	07db      	lsls	r3, r3, #31
 800d59c:	d506      	bpl.n	800d5ac <__swbuf_r+0x6c>
 800d59e:	2e0a      	cmp	r6, #10
 800d5a0:	d104      	bne.n	800d5ac <__swbuf_r+0x6c>
 800d5a2:	4621      	mov	r1, r4
 800d5a4:	4628      	mov	r0, r5
 800d5a6:	f7ff fcd7 	bl	800cf58 <_fflush_r>
 800d5aa:	b988      	cbnz	r0, 800d5d0 <__swbuf_r+0x90>
 800d5ac:	4638      	mov	r0, r7
 800d5ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d5b0:	4b0a      	ldr	r3, [pc, #40]	; (800d5dc <__swbuf_r+0x9c>)
 800d5b2:	429c      	cmp	r4, r3
 800d5b4:	d101      	bne.n	800d5ba <__swbuf_r+0x7a>
 800d5b6:	68ac      	ldr	r4, [r5, #8]
 800d5b8:	e7cf      	b.n	800d55a <__swbuf_r+0x1a>
 800d5ba:	4b09      	ldr	r3, [pc, #36]	; (800d5e0 <__swbuf_r+0xa0>)
 800d5bc:	429c      	cmp	r4, r3
 800d5be:	bf08      	it	eq
 800d5c0:	68ec      	ldreq	r4, [r5, #12]
 800d5c2:	e7ca      	b.n	800d55a <__swbuf_r+0x1a>
 800d5c4:	4621      	mov	r1, r4
 800d5c6:	4628      	mov	r0, r5
 800d5c8:	f000 f80c 	bl	800d5e4 <__swsetup_r>
 800d5cc:	2800      	cmp	r0, #0
 800d5ce:	d0cb      	beq.n	800d568 <__swbuf_r+0x28>
 800d5d0:	f04f 37ff 	mov.w	r7, #4294967295
 800d5d4:	e7ea      	b.n	800d5ac <__swbuf_r+0x6c>
 800d5d6:	bf00      	nop
 800d5d8:	0800df6c 	.word	0x0800df6c
 800d5dc:	0800df8c 	.word	0x0800df8c
 800d5e0:	0800df4c 	.word	0x0800df4c

0800d5e4 <__swsetup_r>:
 800d5e4:	4b32      	ldr	r3, [pc, #200]	; (800d6b0 <__swsetup_r+0xcc>)
 800d5e6:	b570      	push	{r4, r5, r6, lr}
 800d5e8:	681d      	ldr	r5, [r3, #0]
 800d5ea:	4606      	mov	r6, r0
 800d5ec:	460c      	mov	r4, r1
 800d5ee:	b125      	cbz	r5, 800d5fa <__swsetup_r+0x16>
 800d5f0:	69ab      	ldr	r3, [r5, #24]
 800d5f2:	b913      	cbnz	r3, 800d5fa <__swsetup_r+0x16>
 800d5f4:	4628      	mov	r0, r5
 800d5f6:	f7ff fd43 	bl	800d080 <__sinit>
 800d5fa:	4b2e      	ldr	r3, [pc, #184]	; (800d6b4 <__swsetup_r+0xd0>)
 800d5fc:	429c      	cmp	r4, r3
 800d5fe:	d10f      	bne.n	800d620 <__swsetup_r+0x3c>
 800d600:	686c      	ldr	r4, [r5, #4]
 800d602:	89a3      	ldrh	r3, [r4, #12]
 800d604:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d608:	0719      	lsls	r1, r3, #28
 800d60a:	d42c      	bmi.n	800d666 <__swsetup_r+0x82>
 800d60c:	06dd      	lsls	r5, r3, #27
 800d60e:	d411      	bmi.n	800d634 <__swsetup_r+0x50>
 800d610:	2309      	movs	r3, #9
 800d612:	6033      	str	r3, [r6, #0]
 800d614:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d618:	81a3      	strh	r3, [r4, #12]
 800d61a:	f04f 30ff 	mov.w	r0, #4294967295
 800d61e:	e03e      	b.n	800d69e <__swsetup_r+0xba>
 800d620:	4b25      	ldr	r3, [pc, #148]	; (800d6b8 <__swsetup_r+0xd4>)
 800d622:	429c      	cmp	r4, r3
 800d624:	d101      	bne.n	800d62a <__swsetup_r+0x46>
 800d626:	68ac      	ldr	r4, [r5, #8]
 800d628:	e7eb      	b.n	800d602 <__swsetup_r+0x1e>
 800d62a:	4b24      	ldr	r3, [pc, #144]	; (800d6bc <__swsetup_r+0xd8>)
 800d62c:	429c      	cmp	r4, r3
 800d62e:	bf08      	it	eq
 800d630:	68ec      	ldreq	r4, [r5, #12]
 800d632:	e7e6      	b.n	800d602 <__swsetup_r+0x1e>
 800d634:	0758      	lsls	r0, r3, #29
 800d636:	d512      	bpl.n	800d65e <__swsetup_r+0x7a>
 800d638:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d63a:	b141      	cbz	r1, 800d64e <__swsetup_r+0x6a>
 800d63c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d640:	4299      	cmp	r1, r3
 800d642:	d002      	beq.n	800d64a <__swsetup_r+0x66>
 800d644:	4630      	mov	r0, r6
 800d646:	f7fe fd65 	bl	800c114 <_free_r>
 800d64a:	2300      	movs	r3, #0
 800d64c:	6363      	str	r3, [r4, #52]	; 0x34
 800d64e:	89a3      	ldrh	r3, [r4, #12]
 800d650:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d654:	81a3      	strh	r3, [r4, #12]
 800d656:	2300      	movs	r3, #0
 800d658:	6063      	str	r3, [r4, #4]
 800d65a:	6923      	ldr	r3, [r4, #16]
 800d65c:	6023      	str	r3, [r4, #0]
 800d65e:	89a3      	ldrh	r3, [r4, #12]
 800d660:	f043 0308 	orr.w	r3, r3, #8
 800d664:	81a3      	strh	r3, [r4, #12]
 800d666:	6923      	ldr	r3, [r4, #16]
 800d668:	b94b      	cbnz	r3, 800d67e <__swsetup_r+0x9a>
 800d66a:	89a3      	ldrh	r3, [r4, #12]
 800d66c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d670:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d674:	d003      	beq.n	800d67e <__swsetup_r+0x9a>
 800d676:	4621      	mov	r1, r4
 800d678:	4630      	mov	r0, r6
 800d67a:	f000 f84d 	bl	800d718 <__smakebuf_r>
 800d67e:	89a0      	ldrh	r0, [r4, #12]
 800d680:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d684:	f010 0301 	ands.w	r3, r0, #1
 800d688:	d00a      	beq.n	800d6a0 <__swsetup_r+0xbc>
 800d68a:	2300      	movs	r3, #0
 800d68c:	60a3      	str	r3, [r4, #8]
 800d68e:	6963      	ldr	r3, [r4, #20]
 800d690:	425b      	negs	r3, r3
 800d692:	61a3      	str	r3, [r4, #24]
 800d694:	6923      	ldr	r3, [r4, #16]
 800d696:	b943      	cbnz	r3, 800d6aa <__swsetup_r+0xc6>
 800d698:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d69c:	d1ba      	bne.n	800d614 <__swsetup_r+0x30>
 800d69e:	bd70      	pop	{r4, r5, r6, pc}
 800d6a0:	0781      	lsls	r1, r0, #30
 800d6a2:	bf58      	it	pl
 800d6a4:	6963      	ldrpl	r3, [r4, #20]
 800d6a6:	60a3      	str	r3, [r4, #8]
 800d6a8:	e7f4      	b.n	800d694 <__swsetup_r+0xb0>
 800d6aa:	2000      	movs	r0, #0
 800d6ac:	e7f7      	b.n	800d69e <__swsetup_r+0xba>
 800d6ae:	bf00      	nop
 800d6b0:	2000000c 	.word	0x2000000c
 800d6b4:	0800df6c 	.word	0x0800df6c
 800d6b8:	0800df8c 	.word	0x0800df8c
 800d6bc:	0800df4c 	.word	0x0800df4c

0800d6c0 <abort>:
 800d6c0:	b508      	push	{r3, lr}
 800d6c2:	2006      	movs	r0, #6
 800d6c4:	f000 f898 	bl	800d7f8 <raise>
 800d6c8:	2001      	movs	r0, #1
 800d6ca:	f7f4 f941 	bl	8001950 <_exit>

0800d6ce <__swhatbuf_r>:
 800d6ce:	b570      	push	{r4, r5, r6, lr}
 800d6d0:	460e      	mov	r6, r1
 800d6d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d6d6:	2900      	cmp	r1, #0
 800d6d8:	b096      	sub	sp, #88	; 0x58
 800d6da:	4614      	mov	r4, r2
 800d6dc:	461d      	mov	r5, r3
 800d6de:	da08      	bge.n	800d6f2 <__swhatbuf_r+0x24>
 800d6e0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d6e4:	2200      	movs	r2, #0
 800d6e6:	602a      	str	r2, [r5, #0]
 800d6e8:	061a      	lsls	r2, r3, #24
 800d6ea:	d410      	bmi.n	800d70e <__swhatbuf_r+0x40>
 800d6ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d6f0:	e00e      	b.n	800d710 <__swhatbuf_r+0x42>
 800d6f2:	466a      	mov	r2, sp
 800d6f4:	f000 f89c 	bl	800d830 <_fstat_r>
 800d6f8:	2800      	cmp	r0, #0
 800d6fa:	dbf1      	blt.n	800d6e0 <__swhatbuf_r+0x12>
 800d6fc:	9a01      	ldr	r2, [sp, #4]
 800d6fe:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d702:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d706:	425a      	negs	r2, r3
 800d708:	415a      	adcs	r2, r3
 800d70a:	602a      	str	r2, [r5, #0]
 800d70c:	e7ee      	b.n	800d6ec <__swhatbuf_r+0x1e>
 800d70e:	2340      	movs	r3, #64	; 0x40
 800d710:	2000      	movs	r0, #0
 800d712:	6023      	str	r3, [r4, #0]
 800d714:	b016      	add	sp, #88	; 0x58
 800d716:	bd70      	pop	{r4, r5, r6, pc}

0800d718 <__smakebuf_r>:
 800d718:	898b      	ldrh	r3, [r1, #12]
 800d71a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d71c:	079d      	lsls	r5, r3, #30
 800d71e:	4606      	mov	r6, r0
 800d720:	460c      	mov	r4, r1
 800d722:	d507      	bpl.n	800d734 <__smakebuf_r+0x1c>
 800d724:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d728:	6023      	str	r3, [r4, #0]
 800d72a:	6123      	str	r3, [r4, #16]
 800d72c:	2301      	movs	r3, #1
 800d72e:	6163      	str	r3, [r4, #20]
 800d730:	b002      	add	sp, #8
 800d732:	bd70      	pop	{r4, r5, r6, pc}
 800d734:	ab01      	add	r3, sp, #4
 800d736:	466a      	mov	r2, sp
 800d738:	f7ff ffc9 	bl	800d6ce <__swhatbuf_r>
 800d73c:	9900      	ldr	r1, [sp, #0]
 800d73e:	4605      	mov	r5, r0
 800d740:	4630      	mov	r0, r6
 800d742:	f7fe fd53 	bl	800c1ec <_malloc_r>
 800d746:	b948      	cbnz	r0, 800d75c <__smakebuf_r+0x44>
 800d748:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d74c:	059a      	lsls	r2, r3, #22
 800d74e:	d4ef      	bmi.n	800d730 <__smakebuf_r+0x18>
 800d750:	f023 0303 	bic.w	r3, r3, #3
 800d754:	f043 0302 	orr.w	r3, r3, #2
 800d758:	81a3      	strh	r3, [r4, #12]
 800d75a:	e7e3      	b.n	800d724 <__smakebuf_r+0xc>
 800d75c:	4b0d      	ldr	r3, [pc, #52]	; (800d794 <__smakebuf_r+0x7c>)
 800d75e:	62b3      	str	r3, [r6, #40]	; 0x28
 800d760:	89a3      	ldrh	r3, [r4, #12]
 800d762:	6020      	str	r0, [r4, #0]
 800d764:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d768:	81a3      	strh	r3, [r4, #12]
 800d76a:	9b00      	ldr	r3, [sp, #0]
 800d76c:	6163      	str	r3, [r4, #20]
 800d76e:	9b01      	ldr	r3, [sp, #4]
 800d770:	6120      	str	r0, [r4, #16]
 800d772:	b15b      	cbz	r3, 800d78c <__smakebuf_r+0x74>
 800d774:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d778:	4630      	mov	r0, r6
 800d77a:	f000 f86b 	bl	800d854 <_isatty_r>
 800d77e:	b128      	cbz	r0, 800d78c <__smakebuf_r+0x74>
 800d780:	89a3      	ldrh	r3, [r4, #12]
 800d782:	f023 0303 	bic.w	r3, r3, #3
 800d786:	f043 0301 	orr.w	r3, r3, #1
 800d78a:	81a3      	strh	r3, [r4, #12]
 800d78c:	89a0      	ldrh	r0, [r4, #12]
 800d78e:	4305      	orrs	r5, r0
 800d790:	81a5      	strh	r5, [r4, #12]
 800d792:	e7cd      	b.n	800d730 <__smakebuf_r+0x18>
 800d794:	0800d019 	.word	0x0800d019

0800d798 <_malloc_usable_size_r>:
 800d798:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d79c:	1f18      	subs	r0, r3, #4
 800d79e:	2b00      	cmp	r3, #0
 800d7a0:	bfbc      	itt	lt
 800d7a2:	580b      	ldrlt	r3, [r1, r0]
 800d7a4:	18c0      	addlt	r0, r0, r3
 800d7a6:	4770      	bx	lr

0800d7a8 <_raise_r>:
 800d7a8:	291f      	cmp	r1, #31
 800d7aa:	b538      	push	{r3, r4, r5, lr}
 800d7ac:	4604      	mov	r4, r0
 800d7ae:	460d      	mov	r5, r1
 800d7b0:	d904      	bls.n	800d7bc <_raise_r+0x14>
 800d7b2:	2316      	movs	r3, #22
 800d7b4:	6003      	str	r3, [r0, #0]
 800d7b6:	f04f 30ff 	mov.w	r0, #4294967295
 800d7ba:	bd38      	pop	{r3, r4, r5, pc}
 800d7bc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d7be:	b112      	cbz	r2, 800d7c6 <_raise_r+0x1e>
 800d7c0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d7c4:	b94b      	cbnz	r3, 800d7da <_raise_r+0x32>
 800d7c6:	4620      	mov	r0, r4
 800d7c8:	f000 f830 	bl	800d82c <_getpid_r>
 800d7cc:	462a      	mov	r2, r5
 800d7ce:	4601      	mov	r1, r0
 800d7d0:	4620      	mov	r0, r4
 800d7d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d7d6:	f000 b817 	b.w	800d808 <_kill_r>
 800d7da:	2b01      	cmp	r3, #1
 800d7dc:	d00a      	beq.n	800d7f4 <_raise_r+0x4c>
 800d7de:	1c59      	adds	r1, r3, #1
 800d7e0:	d103      	bne.n	800d7ea <_raise_r+0x42>
 800d7e2:	2316      	movs	r3, #22
 800d7e4:	6003      	str	r3, [r0, #0]
 800d7e6:	2001      	movs	r0, #1
 800d7e8:	e7e7      	b.n	800d7ba <_raise_r+0x12>
 800d7ea:	2400      	movs	r4, #0
 800d7ec:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d7f0:	4628      	mov	r0, r5
 800d7f2:	4798      	blx	r3
 800d7f4:	2000      	movs	r0, #0
 800d7f6:	e7e0      	b.n	800d7ba <_raise_r+0x12>

0800d7f8 <raise>:
 800d7f8:	4b02      	ldr	r3, [pc, #8]	; (800d804 <raise+0xc>)
 800d7fa:	4601      	mov	r1, r0
 800d7fc:	6818      	ldr	r0, [r3, #0]
 800d7fe:	f7ff bfd3 	b.w	800d7a8 <_raise_r>
 800d802:	bf00      	nop
 800d804:	2000000c 	.word	0x2000000c

0800d808 <_kill_r>:
 800d808:	b538      	push	{r3, r4, r5, lr}
 800d80a:	4d07      	ldr	r5, [pc, #28]	; (800d828 <_kill_r+0x20>)
 800d80c:	2300      	movs	r3, #0
 800d80e:	4604      	mov	r4, r0
 800d810:	4608      	mov	r0, r1
 800d812:	4611      	mov	r1, r2
 800d814:	602b      	str	r3, [r5, #0]
 800d816:	f7f4 f88b 	bl	8001930 <_kill>
 800d81a:	1c43      	adds	r3, r0, #1
 800d81c:	d102      	bne.n	800d824 <_kill_r+0x1c>
 800d81e:	682b      	ldr	r3, [r5, #0]
 800d820:	b103      	cbz	r3, 800d824 <_kill_r+0x1c>
 800d822:	6023      	str	r3, [r4, #0]
 800d824:	bd38      	pop	{r3, r4, r5, pc}
 800d826:	bf00      	nop
 800d828:	20000448 	.word	0x20000448

0800d82c <_getpid_r>:
 800d82c:	f7f4 b878 	b.w	8001920 <_getpid>

0800d830 <_fstat_r>:
 800d830:	b538      	push	{r3, r4, r5, lr}
 800d832:	4d07      	ldr	r5, [pc, #28]	; (800d850 <_fstat_r+0x20>)
 800d834:	2300      	movs	r3, #0
 800d836:	4604      	mov	r4, r0
 800d838:	4608      	mov	r0, r1
 800d83a:	4611      	mov	r1, r2
 800d83c:	602b      	str	r3, [r5, #0]
 800d83e:	f7f4 f8d6 	bl	80019ee <_fstat>
 800d842:	1c43      	adds	r3, r0, #1
 800d844:	d102      	bne.n	800d84c <_fstat_r+0x1c>
 800d846:	682b      	ldr	r3, [r5, #0]
 800d848:	b103      	cbz	r3, 800d84c <_fstat_r+0x1c>
 800d84a:	6023      	str	r3, [r4, #0]
 800d84c:	bd38      	pop	{r3, r4, r5, pc}
 800d84e:	bf00      	nop
 800d850:	20000448 	.word	0x20000448

0800d854 <_isatty_r>:
 800d854:	b538      	push	{r3, r4, r5, lr}
 800d856:	4d06      	ldr	r5, [pc, #24]	; (800d870 <_isatty_r+0x1c>)
 800d858:	2300      	movs	r3, #0
 800d85a:	4604      	mov	r4, r0
 800d85c:	4608      	mov	r0, r1
 800d85e:	602b      	str	r3, [r5, #0]
 800d860:	f7f4 f8d5 	bl	8001a0e <_isatty>
 800d864:	1c43      	adds	r3, r0, #1
 800d866:	d102      	bne.n	800d86e <_isatty_r+0x1a>
 800d868:	682b      	ldr	r3, [r5, #0]
 800d86a:	b103      	cbz	r3, 800d86e <_isatty_r+0x1a>
 800d86c:	6023      	str	r3, [r4, #0]
 800d86e:	bd38      	pop	{r3, r4, r5, pc}
 800d870:	20000448 	.word	0x20000448

0800d874 <_init>:
 800d874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d876:	bf00      	nop
 800d878:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d87a:	bc08      	pop	{r3}
 800d87c:	469e      	mov	lr, r3
 800d87e:	4770      	bx	lr

0800d880 <_fini>:
 800d880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d882:	bf00      	nop
 800d884:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d886:	bc08      	pop	{r3}
 800d888:	469e      	mov	lr, r3
 800d88a:	4770      	bx	lr
