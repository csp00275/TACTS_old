
TACTS_testbed.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001601c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c10  080161f0  080161f0  000261f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016e00  08016e00  00030560  2**0
                  CONTENTS
  4 .ARM          00000008  08016e00  08016e00  00026e00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016e08  08016e08  00030560  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016e08  08016e08  00026e08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08016e0c  08016e0c  00026e0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000560  20000000  08016e10  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00009c3c  20000560  08017370  00030560  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000a19c  08017370  0003a19c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030560  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022f12  00000000  00000000  00030590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000040fe  00000000  00000000  000534a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001838  00000000  00000000  000575a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001670  00000000  00000000  00058dd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a7c0  00000000  00000000  0005a448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000247a3  00000000  00000000  00084c08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fa268  00000000  00000000  000a93ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001a3613  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008058  00000000  00000000  001a3664  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000560 	.word	0x20000560
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080161d4 	.word	0x080161d4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000564 	.word	0x20000564
 800020c:	080161d4 	.word	0x080161d4

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	; 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_d2uiz>:
 8000c08:	004a      	lsls	r2, r1, #1
 8000c0a:	d211      	bcs.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c10:	d211      	bcs.n	8000c36 <__aeabi_d2uiz+0x2e>
 8000c12:	d50d      	bpl.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c1c:	d40e      	bmi.n	8000c3c <__aeabi_d2uiz+0x34>
 8000c1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c2a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c2e:	4770      	bx	lr
 8000c30:	f04f 0000 	mov.w	r0, #0
 8000c34:	4770      	bx	lr
 8000c36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c3a:	d102      	bne.n	8000c42 <__aeabi_d2uiz+0x3a>
 8000c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c40:	4770      	bx	lr
 8000c42:	f04f 0000 	mov.w	r0, #0
 8000c46:	4770      	bx	lr

08000c48 <__aeabi_d2f>:
 8000c48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c4c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c50:	bf24      	itt	cs
 8000c52:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c56:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c5a:	d90d      	bls.n	8000c78 <__aeabi_d2f+0x30>
 8000c5c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c60:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c64:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c68:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c6c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c70:	bf08      	it	eq
 8000c72:	f020 0001 	biceq.w	r0, r0, #1
 8000c76:	4770      	bx	lr
 8000c78:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c7c:	d121      	bne.n	8000cc2 <__aeabi_d2f+0x7a>
 8000c7e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c82:	bfbc      	itt	lt
 8000c84:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c88:	4770      	bxlt	lr
 8000c8a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c8e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c92:	f1c2 0218 	rsb	r2, r2, #24
 8000c96:	f1c2 0c20 	rsb	ip, r2, #32
 8000c9a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c9e:	fa20 f002 	lsr.w	r0, r0, r2
 8000ca2:	bf18      	it	ne
 8000ca4:	f040 0001 	orrne.w	r0, r0, #1
 8000ca8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cb0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cb4:	ea40 000c 	orr.w	r0, r0, ip
 8000cb8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cbc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cc0:	e7cc      	b.n	8000c5c <__aeabi_d2f+0x14>
 8000cc2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cc6:	d107      	bne.n	8000cd8 <__aeabi_d2f+0x90>
 8000cc8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ccc:	bf1e      	ittt	ne
 8000cce:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cd2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cd6:	4770      	bxne	lr
 8000cd8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cdc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ce0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_uldivmod>:
 8000ce8:	b953      	cbnz	r3, 8000d00 <__aeabi_uldivmod+0x18>
 8000cea:	b94a      	cbnz	r2, 8000d00 <__aeabi_uldivmod+0x18>
 8000cec:	2900      	cmp	r1, #0
 8000cee:	bf08      	it	eq
 8000cf0:	2800      	cmpeq	r0, #0
 8000cf2:	bf1c      	itt	ne
 8000cf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cfc:	f000 b9aa 	b.w	8001054 <__aeabi_idiv0>
 8000d00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d08:	f000 f83c 	bl	8000d84 <__udivmoddi4>
 8000d0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d14:	b004      	add	sp, #16
 8000d16:	4770      	bx	lr

08000d18 <__aeabi_d2lz>:
 8000d18:	b538      	push	{r3, r4, r5, lr}
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	4604      	mov	r4, r0
 8000d20:	460d      	mov	r5, r1
 8000d22:	f7ff ff0b 	bl	8000b3c <__aeabi_dcmplt>
 8000d26:	b928      	cbnz	r0, 8000d34 <__aeabi_d2lz+0x1c>
 8000d28:	4620      	mov	r0, r4
 8000d2a:	4629      	mov	r1, r5
 8000d2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d30:	f000 b80a 	b.w	8000d48 <__aeabi_d2ulz>
 8000d34:	4620      	mov	r0, r4
 8000d36:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d3a:	f000 f805 	bl	8000d48 <__aeabi_d2ulz>
 8000d3e:	4240      	negs	r0, r0
 8000d40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d44:	bd38      	pop	{r3, r4, r5, pc}
 8000d46:	bf00      	nop

08000d48 <__aeabi_d2ulz>:
 8000d48:	b5d0      	push	{r4, r6, r7, lr}
 8000d4a:	4b0c      	ldr	r3, [pc, #48]	; (8000d7c <__aeabi_d2ulz+0x34>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	4606      	mov	r6, r0
 8000d50:	460f      	mov	r7, r1
 8000d52:	f7ff fc81 	bl	8000658 <__aeabi_dmul>
 8000d56:	f7ff ff57 	bl	8000c08 <__aeabi_d2uiz>
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	f7ff fc02 	bl	8000564 <__aeabi_ui2d>
 8000d60:	4b07      	ldr	r3, [pc, #28]	; (8000d80 <__aeabi_d2ulz+0x38>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	f7ff fc78 	bl	8000658 <__aeabi_dmul>
 8000d68:	4602      	mov	r2, r0
 8000d6a:	460b      	mov	r3, r1
 8000d6c:	4630      	mov	r0, r6
 8000d6e:	4639      	mov	r1, r7
 8000d70:	f7ff faba 	bl	80002e8 <__aeabi_dsub>
 8000d74:	f7ff ff48 	bl	8000c08 <__aeabi_d2uiz>
 8000d78:	4621      	mov	r1, r4
 8000d7a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d7c:	3df00000 	.word	0x3df00000
 8000d80:	41f00000 	.word	0x41f00000

08000d84 <__udivmoddi4>:
 8000d84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d88:	9d08      	ldr	r5, [sp, #32]
 8000d8a:	4604      	mov	r4, r0
 8000d8c:	468e      	mov	lr, r1
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d14d      	bne.n	8000e2e <__udivmoddi4+0xaa>
 8000d92:	428a      	cmp	r2, r1
 8000d94:	4694      	mov	ip, r2
 8000d96:	d969      	bls.n	8000e6c <__udivmoddi4+0xe8>
 8000d98:	fab2 f282 	clz	r2, r2
 8000d9c:	b152      	cbz	r2, 8000db4 <__udivmoddi4+0x30>
 8000d9e:	fa01 f302 	lsl.w	r3, r1, r2
 8000da2:	f1c2 0120 	rsb	r1, r2, #32
 8000da6:	fa20 f101 	lsr.w	r1, r0, r1
 8000daa:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dae:	ea41 0e03 	orr.w	lr, r1, r3
 8000db2:	4094      	lsls	r4, r2
 8000db4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000db8:	0c21      	lsrs	r1, r4, #16
 8000dba:	fbbe f6f8 	udiv	r6, lr, r8
 8000dbe:	fa1f f78c 	uxth.w	r7, ip
 8000dc2:	fb08 e316 	mls	r3, r8, r6, lr
 8000dc6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000dca:	fb06 f107 	mul.w	r1, r6, r7
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	d90a      	bls.n	8000de8 <__udivmoddi4+0x64>
 8000dd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dda:	f080 811f 	bcs.w	800101c <__udivmoddi4+0x298>
 8000dde:	4299      	cmp	r1, r3
 8000de0:	f240 811c 	bls.w	800101c <__udivmoddi4+0x298>
 8000de4:	3e02      	subs	r6, #2
 8000de6:	4463      	add	r3, ip
 8000de8:	1a5b      	subs	r3, r3, r1
 8000dea:	b2a4      	uxth	r4, r4
 8000dec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000df0:	fb08 3310 	mls	r3, r8, r0, r3
 8000df4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000df8:	fb00 f707 	mul.w	r7, r0, r7
 8000dfc:	42a7      	cmp	r7, r4
 8000dfe:	d90a      	bls.n	8000e16 <__udivmoddi4+0x92>
 8000e00:	eb1c 0404 	adds.w	r4, ip, r4
 8000e04:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e08:	f080 810a 	bcs.w	8001020 <__udivmoddi4+0x29c>
 8000e0c:	42a7      	cmp	r7, r4
 8000e0e:	f240 8107 	bls.w	8001020 <__udivmoddi4+0x29c>
 8000e12:	4464      	add	r4, ip
 8000e14:	3802      	subs	r0, #2
 8000e16:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e1a:	1be4      	subs	r4, r4, r7
 8000e1c:	2600      	movs	r6, #0
 8000e1e:	b11d      	cbz	r5, 8000e28 <__udivmoddi4+0xa4>
 8000e20:	40d4      	lsrs	r4, r2
 8000e22:	2300      	movs	r3, #0
 8000e24:	e9c5 4300 	strd	r4, r3, [r5]
 8000e28:	4631      	mov	r1, r6
 8000e2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d909      	bls.n	8000e46 <__udivmoddi4+0xc2>
 8000e32:	2d00      	cmp	r5, #0
 8000e34:	f000 80ef 	beq.w	8001016 <__udivmoddi4+0x292>
 8000e38:	2600      	movs	r6, #0
 8000e3a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e3e:	4630      	mov	r0, r6
 8000e40:	4631      	mov	r1, r6
 8000e42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e46:	fab3 f683 	clz	r6, r3
 8000e4a:	2e00      	cmp	r6, #0
 8000e4c:	d14a      	bne.n	8000ee4 <__udivmoddi4+0x160>
 8000e4e:	428b      	cmp	r3, r1
 8000e50:	d302      	bcc.n	8000e58 <__udivmoddi4+0xd4>
 8000e52:	4282      	cmp	r2, r0
 8000e54:	f200 80f9 	bhi.w	800104a <__udivmoddi4+0x2c6>
 8000e58:	1a84      	subs	r4, r0, r2
 8000e5a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e5e:	2001      	movs	r0, #1
 8000e60:	469e      	mov	lr, r3
 8000e62:	2d00      	cmp	r5, #0
 8000e64:	d0e0      	beq.n	8000e28 <__udivmoddi4+0xa4>
 8000e66:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e6a:	e7dd      	b.n	8000e28 <__udivmoddi4+0xa4>
 8000e6c:	b902      	cbnz	r2, 8000e70 <__udivmoddi4+0xec>
 8000e6e:	deff      	udf	#255	; 0xff
 8000e70:	fab2 f282 	clz	r2, r2
 8000e74:	2a00      	cmp	r2, #0
 8000e76:	f040 8092 	bne.w	8000f9e <__udivmoddi4+0x21a>
 8000e7a:	eba1 010c 	sub.w	r1, r1, ip
 8000e7e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e82:	fa1f fe8c 	uxth.w	lr, ip
 8000e86:	2601      	movs	r6, #1
 8000e88:	0c20      	lsrs	r0, r4, #16
 8000e8a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e8e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e92:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e96:	fb0e f003 	mul.w	r0, lr, r3
 8000e9a:	4288      	cmp	r0, r1
 8000e9c:	d908      	bls.n	8000eb0 <__udivmoddi4+0x12c>
 8000e9e:	eb1c 0101 	adds.w	r1, ip, r1
 8000ea2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ea6:	d202      	bcs.n	8000eae <__udivmoddi4+0x12a>
 8000ea8:	4288      	cmp	r0, r1
 8000eaa:	f200 80cb 	bhi.w	8001044 <__udivmoddi4+0x2c0>
 8000eae:	4643      	mov	r3, r8
 8000eb0:	1a09      	subs	r1, r1, r0
 8000eb2:	b2a4      	uxth	r4, r4
 8000eb4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000eb8:	fb07 1110 	mls	r1, r7, r0, r1
 8000ebc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ec0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ec4:	45a6      	cmp	lr, r4
 8000ec6:	d908      	bls.n	8000eda <__udivmoddi4+0x156>
 8000ec8:	eb1c 0404 	adds.w	r4, ip, r4
 8000ecc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ed0:	d202      	bcs.n	8000ed8 <__udivmoddi4+0x154>
 8000ed2:	45a6      	cmp	lr, r4
 8000ed4:	f200 80bb 	bhi.w	800104e <__udivmoddi4+0x2ca>
 8000ed8:	4608      	mov	r0, r1
 8000eda:	eba4 040e 	sub.w	r4, r4, lr
 8000ede:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ee2:	e79c      	b.n	8000e1e <__udivmoddi4+0x9a>
 8000ee4:	f1c6 0720 	rsb	r7, r6, #32
 8000ee8:	40b3      	lsls	r3, r6
 8000eea:	fa22 fc07 	lsr.w	ip, r2, r7
 8000eee:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ef2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ef6:	fa01 f306 	lsl.w	r3, r1, r6
 8000efa:	431c      	orrs	r4, r3
 8000efc:	40f9      	lsrs	r1, r7
 8000efe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f02:	fa00 f306 	lsl.w	r3, r0, r6
 8000f06:	fbb1 f8f9 	udiv	r8, r1, r9
 8000f0a:	0c20      	lsrs	r0, r4, #16
 8000f0c:	fa1f fe8c 	uxth.w	lr, ip
 8000f10:	fb09 1118 	mls	r1, r9, r8, r1
 8000f14:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f18:	fb08 f00e 	mul.w	r0, r8, lr
 8000f1c:	4288      	cmp	r0, r1
 8000f1e:	fa02 f206 	lsl.w	r2, r2, r6
 8000f22:	d90b      	bls.n	8000f3c <__udivmoddi4+0x1b8>
 8000f24:	eb1c 0101 	adds.w	r1, ip, r1
 8000f28:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f2c:	f080 8088 	bcs.w	8001040 <__udivmoddi4+0x2bc>
 8000f30:	4288      	cmp	r0, r1
 8000f32:	f240 8085 	bls.w	8001040 <__udivmoddi4+0x2bc>
 8000f36:	f1a8 0802 	sub.w	r8, r8, #2
 8000f3a:	4461      	add	r1, ip
 8000f3c:	1a09      	subs	r1, r1, r0
 8000f3e:	b2a4      	uxth	r4, r4
 8000f40:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f44:	fb09 1110 	mls	r1, r9, r0, r1
 8000f48:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f4c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f50:	458e      	cmp	lr, r1
 8000f52:	d908      	bls.n	8000f66 <__udivmoddi4+0x1e2>
 8000f54:	eb1c 0101 	adds.w	r1, ip, r1
 8000f58:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f5c:	d26c      	bcs.n	8001038 <__udivmoddi4+0x2b4>
 8000f5e:	458e      	cmp	lr, r1
 8000f60:	d96a      	bls.n	8001038 <__udivmoddi4+0x2b4>
 8000f62:	3802      	subs	r0, #2
 8000f64:	4461      	add	r1, ip
 8000f66:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f6a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f6e:	eba1 010e 	sub.w	r1, r1, lr
 8000f72:	42a1      	cmp	r1, r4
 8000f74:	46c8      	mov	r8, r9
 8000f76:	46a6      	mov	lr, r4
 8000f78:	d356      	bcc.n	8001028 <__udivmoddi4+0x2a4>
 8000f7a:	d053      	beq.n	8001024 <__udivmoddi4+0x2a0>
 8000f7c:	b15d      	cbz	r5, 8000f96 <__udivmoddi4+0x212>
 8000f7e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f82:	eb61 010e 	sbc.w	r1, r1, lr
 8000f86:	fa01 f707 	lsl.w	r7, r1, r7
 8000f8a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f8e:	40f1      	lsrs	r1, r6
 8000f90:	431f      	orrs	r7, r3
 8000f92:	e9c5 7100 	strd	r7, r1, [r5]
 8000f96:	2600      	movs	r6, #0
 8000f98:	4631      	mov	r1, r6
 8000f9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f9e:	f1c2 0320 	rsb	r3, r2, #32
 8000fa2:	40d8      	lsrs	r0, r3
 8000fa4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000fa8:	fa21 f303 	lsr.w	r3, r1, r3
 8000fac:	4091      	lsls	r1, r2
 8000fae:	4301      	orrs	r1, r0
 8000fb0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fb4:	fa1f fe8c 	uxth.w	lr, ip
 8000fb8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000fbc:	fb07 3610 	mls	r6, r7, r0, r3
 8000fc0:	0c0b      	lsrs	r3, r1, #16
 8000fc2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fc6:	fb00 f60e 	mul.w	r6, r0, lr
 8000fca:	429e      	cmp	r6, r3
 8000fcc:	fa04 f402 	lsl.w	r4, r4, r2
 8000fd0:	d908      	bls.n	8000fe4 <__udivmoddi4+0x260>
 8000fd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fd6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fda:	d22f      	bcs.n	800103c <__udivmoddi4+0x2b8>
 8000fdc:	429e      	cmp	r6, r3
 8000fde:	d92d      	bls.n	800103c <__udivmoddi4+0x2b8>
 8000fe0:	3802      	subs	r0, #2
 8000fe2:	4463      	add	r3, ip
 8000fe4:	1b9b      	subs	r3, r3, r6
 8000fe6:	b289      	uxth	r1, r1
 8000fe8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fec:	fb07 3316 	mls	r3, r7, r6, r3
 8000ff0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ff4:	fb06 f30e 	mul.w	r3, r6, lr
 8000ff8:	428b      	cmp	r3, r1
 8000ffa:	d908      	bls.n	800100e <__udivmoddi4+0x28a>
 8000ffc:	eb1c 0101 	adds.w	r1, ip, r1
 8001000:	f106 38ff 	add.w	r8, r6, #4294967295
 8001004:	d216      	bcs.n	8001034 <__udivmoddi4+0x2b0>
 8001006:	428b      	cmp	r3, r1
 8001008:	d914      	bls.n	8001034 <__udivmoddi4+0x2b0>
 800100a:	3e02      	subs	r6, #2
 800100c:	4461      	add	r1, ip
 800100e:	1ac9      	subs	r1, r1, r3
 8001010:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001014:	e738      	b.n	8000e88 <__udivmoddi4+0x104>
 8001016:	462e      	mov	r6, r5
 8001018:	4628      	mov	r0, r5
 800101a:	e705      	b.n	8000e28 <__udivmoddi4+0xa4>
 800101c:	4606      	mov	r6, r0
 800101e:	e6e3      	b.n	8000de8 <__udivmoddi4+0x64>
 8001020:	4618      	mov	r0, r3
 8001022:	e6f8      	b.n	8000e16 <__udivmoddi4+0x92>
 8001024:	454b      	cmp	r3, r9
 8001026:	d2a9      	bcs.n	8000f7c <__udivmoddi4+0x1f8>
 8001028:	ebb9 0802 	subs.w	r8, r9, r2
 800102c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001030:	3801      	subs	r0, #1
 8001032:	e7a3      	b.n	8000f7c <__udivmoddi4+0x1f8>
 8001034:	4646      	mov	r6, r8
 8001036:	e7ea      	b.n	800100e <__udivmoddi4+0x28a>
 8001038:	4620      	mov	r0, r4
 800103a:	e794      	b.n	8000f66 <__udivmoddi4+0x1e2>
 800103c:	4640      	mov	r0, r8
 800103e:	e7d1      	b.n	8000fe4 <__udivmoddi4+0x260>
 8001040:	46d0      	mov	r8, sl
 8001042:	e77b      	b.n	8000f3c <__udivmoddi4+0x1b8>
 8001044:	3b02      	subs	r3, #2
 8001046:	4461      	add	r1, ip
 8001048:	e732      	b.n	8000eb0 <__udivmoddi4+0x12c>
 800104a:	4630      	mov	r0, r6
 800104c:	e709      	b.n	8000e62 <__udivmoddi4+0xde>
 800104e:	4464      	add	r4, ip
 8001050:	3802      	subs	r0, #2
 8001052:	e742      	b.n	8000eda <__udivmoddi4+0x156>

08001054 <__aeabi_idiv0>:
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop

08001058 <CalculateStats>:
float sensorStdDevs[NUM_SENSOR] = {0};
int readingCount[NUM_SENSOR] = {0};

#define throwSomenumber 20

void CalculateStats(int sensorIndex) {
 8001058:	b5b0      	push	{r4, r5, r7, lr}
 800105a:	b088      	sub	sp, #32
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
    float sum = 0;
 8001060:	f04f 0300 	mov.w	r3, #0
 8001064:	61fb      	str	r3, [r7, #28]
    float mean = 0;
 8001066:	f04f 0300 	mov.w	r3, #0
 800106a:	60fb      	str	r3, [r7, #12]
    float stdDevSum = 0;
 800106c:	f04f 0300 	mov.w	r3, #0
 8001070:	61bb      	str	r3, [r7, #24]
    int count = readingCount[sensorIndex];
 8001072:	4a49      	ldr	r2, [pc, #292]	; (8001198 <CalculateStats+0x140>)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800107a:	60bb      	str	r3, [r7, #8]

    // 평균 계산
    for (int i = 0; i < count; i++) { sum += sensorValues[sensorIndex][i];}
 800107c:	2300      	movs	r3, #0
 800107e:	617b      	str	r3, [r7, #20]
 8001080:	e014      	b.n	80010ac <CalculateStats+0x54>
 8001082:	4946      	ldr	r1, [pc, #280]	; (800119c <CalculateStats+0x144>)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800108a:	fb03 f202 	mul.w	r2, r3, r2
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	4413      	add	r3, r2
 8001092:	009b      	lsls	r3, r3, #2
 8001094:	440b      	add	r3, r1
 8001096:	edd3 7a00 	vldr	s15, [r3]
 800109a:	ed97 7a07 	vldr	s14, [r7, #28]
 800109e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010a2:	edc7 7a07 	vstr	s15, [r7, #28]
 80010a6:	697b      	ldr	r3, [r7, #20]
 80010a8:	3301      	adds	r3, #1
 80010aa:	617b      	str	r3, [r7, #20]
 80010ac:	697a      	ldr	r2, [r7, #20]
 80010ae:	68bb      	ldr	r3, [r7, #8]
 80010b0:	429a      	cmp	r2, r3
 80010b2:	dbe6      	blt.n	8001082 <CalculateStats+0x2a>
    mean = sum / count;
 80010b4:	68bb      	ldr	r3, [r7, #8]
 80010b6:	ee07 3a90 	vmov	s15, r3
 80010ba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010be:	edd7 6a07 	vldr	s13, [r7, #28]
 80010c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80010c6:	edc7 7a03 	vstr	s15, [r7, #12]
    sensorAverages[sensorIndex] = mean;
 80010ca:	4a35      	ldr	r2, [pc, #212]	; (80011a0 <CalculateStats+0x148>)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	009b      	lsls	r3, r3, #2
 80010d0:	4413      	add	r3, r2
 80010d2:	68fa      	ldr	r2, [r7, #12]
 80010d4:	601a      	str	r2, [r3, #0]
    // 표준편차 계산
    for (int i = 0; i < count; i++) { stdDevSum += pow(sensorValues[sensorIndex][i] - mean, 2);}
 80010d6:	2300      	movs	r3, #0
 80010d8:	613b      	str	r3, [r7, #16]
 80010da:	e031      	b.n	8001140 <CalculateStats+0xe8>
 80010dc:	492f      	ldr	r1, [pc, #188]	; (800119c <CalculateStats+0x144>)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80010e4:	fb03 f202 	mul.w	r2, r3, r2
 80010e8:	693b      	ldr	r3, [r7, #16]
 80010ea:	4413      	add	r3, r2
 80010ec:	009b      	lsls	r3, r3, #2
 80010ee:	440b      	add	r3, r1
 80010f0:	ed93 7a00 	vldr	s14, [r3]
 80010f4:	edd7 7a03 	vldr	s15, [r7, #12]
 80010f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010fc:	ee17 0a90 	vmov	r0, s15
 8001100:	f7ff fa52 	bl	80005a8 <__aeabi_f2d>
 8001104:	4602      	mov	r2, r0
 8001106:	460b      	mov	r3, r1
 8001108:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8001190 <CalculateStats+0x138>
 800110c:	ec43 2b10 	vmov	d0, r2, r3
 8001110:	f014 f91a 	bl	8015348 <pow>
 8001114:	ec55 4b10 	vmov	r4, r5, d0
 8001118:	69b8      	ldr	r0, [r7, #24]
 800111a:	f7ff fa45 	bl	80005a8 <__aeabi_f2d>
 800111e:	4602      	mov	r2, r0
 8001120:	460b      	mov	r3, r1
 8001122:	4620      	mov	r0, r4
 8001124:	4629      	mov	r1, r5
 8001126:	f7ff f8e1 	bl	80002ec <__adddf3>
 800112a:	4602      	mov	r2, r0
 800112c:	460b      	mov	r3, r1
 800112e:	4610      	mov	r0, r2
 8001130:	4619      	mov	r1, r3
 8001132:	f7ff fd89 	bl	8000c48 <__aeabi_d2f>
 8001136:	4603      	mov	r3, r0
 8001138:	61bb      	str	r3, [r7, #24]
 800113a:	693b      	ldr	r3, [r7, #16]
 800113c:	3301      	adds	r3, #1
 800113e:	613b      	str	r3, [r7, #16]
 8001140:	693a      	ldr	r2, [r7, #16]
 8001142:	68bb      	ldr	r3, [r7, #8]
 8001144:	429a      	cmp	r2, r3
 8001146:	dbc9      	blt.n	80010dc <CalculateStats+0x84>
    sensorStdDevs[sensorIndex] = sqrt(stdDevSum / count);
 8001148:	68bb      	ldr	r3, [r7, #8]
 800114a:	ee07 3a90 	vmov	s15, r3
 800114e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001152:	ed97 7a06 	vldr	s14, [r7, #24]
 8001156:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800115a:	ee16 0a90 	vmov	r0, s13
 800115e:	f7ff fa23 	bl	80005a8 <__aeabi_f2d>
 8001162:	4602      	mov	r2, r0
 8001164:	460b      	mov	r3, r1
 8001166:	ec43 2b10 	vmov	d0, r2, r3
 800116a:	f014 f95d 	bl	8015428 <sqrt>
 800116e:	ec53 2b10 	vmov	r2, r3, d0
 8001172:	4610      	mov	r0, r2
 8001174:	4619      	mov	r1, r3
 8001176:	f7ff fd67 	bl	8000c48 <__aeabi_d2f>
 800117a:	4602      	mov	r2, r0
 800117c:	4909      	ldr	r1, [pc, #36]	; (80011a4 <CalculateStats+0x14c>)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	009b      	lsls	r3, r3, #2
 8001182:	440b      	add	r3, r1
 8001184:	601a      	str	r2, [r3, #0]
}
 8001186:	bf00      	nop
 8001188:	3720      	adds	r7, #32
 800118a:	46bd      	mov	sp, r7
 800118c:	bdb0      	pop	{r4, r5, r7, pc}
 800118e:	bf00      	nop
 8001190:	00000000 	.word	0x00000000
 8001194:	40000000 	.word	0x40000000
 8001198:	200076bc 	.word	0x200076bc
 800119c:	2000057c 	.word	0x2000057c
 80011a0:	200075fc 	.word	0x200075fc
 80011a4:	2000765c 	.word	0x2000765c

080011a8 <TransmitStats>:

// 평균과 표준편차를 UART로 전송하는 함수
void TransmitStats() {
 80011a8:	b5b0      	push	{r4, r5, r7, lr}
 80011aa:	b0a6      	sub	sp, #152	; 0x98
 80011ac:	af04      	add	r7, sp, #16
    char msg[128];
    for (int i = 0; i < NUM_SENSOR; i++) {
 80011ae:	2300      	movs	r3, #0
 80011b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80011b4:	e033      	b.n	800121e <TransmitStats+0x76>
        CalculateStats(i); // 통계 계산
 80011b6:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 80011ba:	f7ff ff4d 	bl	8001058 <CalculateStats>
        sprintf(msg, "Sensor %d - Avg: %.2f, StdDev: %.2f\r\n", i, sensorAverages[i], sensorStdDevs[i]);
 80011be:	4a1c      	ldr	r2, [pc, #112]	; (8001230 <TransmitStats+0x88>)
 80011c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80011c4:	009b      	lsls	r3, r3, #2
 80011c6:	4413      	add	r3, r2
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4618      	mov	r0, r3
 80011cc:	f7ff f9ec 	bl	80005a8 <__aeabi_f2d>
 80011d0:	4604      	mov	r4, r0
 80011d2:	460d      	mov	r5, r1
 80011d4:	4a17      	ldr	r2, [pc, #92]	; (8001234 <TransmitStats+0x8c>)
 80011d6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80011da:	009b      	lsls	r3, r3, #2
 80011dc:	4413      	add	r3, r2
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4618      	mov	r0, r3
 80011e2:	f7ff f9e1 	bl	80005a8 <__aeabi_f2d>
 80011e6:	4602      	mov	r2, r0
 80011e8:	460b      	mov	r3, r1
 80011ea:	1d38      	adds	r0, r7, #4
 80011ec:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80011f0:	e9cd 4500 	strd	r4, r5, [sp]
 80011f4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80011f8:	490f      	ldr	r1, [pc, #60]	; (8001238 <TransmitStats+0x90>)
 80011fa:	f00f fe25 	bl	8010e48 <siprintf>
        HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), 100);
 80011fe:	1d3b      	adds	r3, r7, #4
 8001200:	4618      	mov	r0, r3
 8001202:	f7ff f80f 	bl	8000224 <strlen>
 8001206:	4603      	mov	r3, r0
 8001208:	b29a      	uxth	r2, r3
 800120a:	1d39      	adds	r1, r7, #4
 800120c:	2364      	movs	r3, #100	; 0x64
 800120e:	480b      	ldr	r0, [pc, #44]	; (800123c <TransmitStats+0x94>)
 8001210:	f008 fcb0 	bl	8009b74 <HAL_UART_Transmit>
    for (int i = 0; i < NUM_SENSOR; i++) {
 8001214:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001218:	3301      	adds	r3, #1
 800121a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800121e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001222:	2b17      	cmp	r3, #23
 8001224:	ddc7      	ble.n	80011b6 <TransmitStats+0xe>
    }
}
 8001226:	bf00      	nop
 8001228:	bf00      	nop
 800122a:	3788      	adds	r7, #136	; 0x88
 800122c:	46bd      	mov	sp, r7
 800122e:	bdb0      	pop	{r4, r5, r7, pc}
 8001230:	200075fc 	.word	0x200075fc
 8001234:	2000765c 	.word	0x2000765c
 8001238:	080161f0 	.word	0x080161f0
 800123c:	20007a74 	.word	0x20007a74

08001240 <ResetSensorData>:

void ResetSensorData() {
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
    // 모든 센서 값과 읽기 횟수를 0으로 설정
    for (int i = 0; i < NUM_SENSOR; i++) {
 8001246:	2300      	movs	r3, #0
 8001248:	607b      	str	r3, [r7, #4]
 800124a:	e014      	b.n	8001276 <ResetSensorData+0x36>
        memset(sensorValues[i], 0, sizeof(sensorValues[i]));
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8001252:	fb02 f303 	mul.w	r3, r2, r3
 8001256:	4a0c      	ldr	r2, [pc, #48]	; (8001288 <ResetSensorData+0x48>)
 8001258:	4413      	add	r3, r2
 800125a:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800125e:	2100      	movs	r1, #0
 8001260:	4618      	mov	r0, r3
 8001262:	f00e ff69 	bl	8010138 <memset>
        readingCount[i] = 0;
 8001266:	4a09      	ldr	r2, [pc, #36]	; (800128c <ResetSensorData+0x4c>)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	2100      	movs	r1, #0
 800126c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (int i = 0; i < NUM_SENSOR; i++) {
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	3301      	adds	r3, #1
 8001274:	607b      	str	r3, [r7, #4]
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2b17      	cmp	r3, #23
 800127a:	dde7      	ble.n	800124c <ResetSensorData+0xc>
    }
}
 800127c:	bf00      	nop
 800127e:	bf00      	nop
 8001280:	3708      	adds	r7, #8
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	2000057c 	.word	0x2000057c
 800128c:	200076bc 	.word	0x200076bc

08001290 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b08a      	sub	sp, #40	; 0x28
 8001294:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001296:	f107 0314 	add.w	r3, r7, #20
 800129a:	2200      	movs	r2, #0
 800129c:	601a      	str	r2, [r3, #0]
 800129e:	605a      	str	r2, [r3, #4]
 80012a0:	609a      	str	r2, [r3, #8]
 80012a2:	60da      	str	r2, [r3, #12]
 80012a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012a6:	4b51      	ldr	r3, [pc, #324]	; (80013ec <MX_GPIO_Init+0x15c>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012aa:	4a50      	ldr	r2, [pc, #320]	; (80013ec <MX_GPIO_Init+0x15c>)
 80012ac:	f043 0302 	orr.w	r3, r3, #2
 80012b0:	6313      	str	r3, [r2, #48]	; 0x30
 80012b2:	4b4e      	ldr	r3, [pc, #312]	; (80013ec <MX_GPIO_Init+0x15c>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b6:	f003 0302 	and.w	r3, r3, #2
 80012ba:	613b      	str	r3, [r7, #16]
 80012bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012be:	4b4b      	ldr	r3, [pc, #300]	; (80013ec <MX_GPIO_Init+0x15c>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c2:	4a4a      	ldr	r2, [pc, #296]	; (80013ec <MX_GPIO_Init+0x15c>)
 80012c4:	f043 0301 	orr.w	r3, r3, #1
 80012c8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ca:	4b48      	ldr	r3, [pc, #288]	; (80013ec <MX_GPIO_Init+0x15c>)
 80012cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ce:	f003 0301 	and.w	r3, r3, #1
 80012d2:	60fb      	str	r3, [r7, #12]
 80012d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80012d6:	4b45      	ldr	r3, [pc, #276]	; (80013ec <MX_GPIO_Init+0x15c>)
 80012d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012da:	4a44      	ldr	r2, [pc, #272]	; (80013ec <MX_GPIO_Init+0x15c>)
 80012dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012e0:	6313      	str	r3, [r2, #48]	; 0x30
 80012e2:	4b42      	ldr	r3, [pc, #264]	; (80013ec <MX_GPIO_Init+0x15c>)
 80012e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012ea:	60bb      	str	r3, [r7, #8]
 80012ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012ee:	4b3f      	ldr	r3, [pc, #252]	; (80013ec <MX_GPIO_Init+0x15c>)
 80012f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f2:	4a3e      	ldr	r2, [pc, #248]	; (80013ec <MX_GPIO_Init+0x15c>)
 80012f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012f8:	6313      	str	r3, [r2, #48]	; 0x30
 80012fa:	4b3c      	ldr	r3, [pc, #240]	; (80013ec <MX_GPIO_Init+0x15c>)
 80012fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001302:	607b      	str	r3, [r7, #4]
 8001304:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001306:	4b39      	ldr	r3, [pc, #228]	; (80013ec <MX_GPIO_Init+0x15c>)
 8001308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130a:	4a38      	ldr	r2, [pc, #224]	; (80013ec <MX_GPIO_Init+0x15c>)
 800130c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001310:	6313      	str	r3, [r2, #48]	; 0x30
 8001312:	4b36      	ldr	r3, [pc, #216]	; (80013ec <MX_GPIO_Init+0x15c>)
 8001314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001316:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800131a:	603b      	str	r3, [r7, #0]
 800131c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 800131e:	2200      	movs	r2, #0
 8001320:	2110      	movs	r1, #16
 8001322:	4833      	ldr	r0, [pc, #204]	; (80013f0 <MX_GPIO_Init+0x160>)
 8001324:	f002 ff84 	bl	8004230 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0, GPIO_PIN_RESET);
 8001328:	2200      	movs	r2, #0
 800132a:	210f      	movs	r1, #15
 800132c:	4831      	ldr	r0, [pc, #196]	; (80013f4 <MX_GPIO_Init+0x164>)
 800132e:	f002 ff7f 	bl	8004230 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7|GPIO_PIN_6, GPIO_PIN_RESET);
 8001332:	2200      	movs	r2, #0
 8001334:	21c0      	movs	r1, #192	; 0xc0
 8001336:	4830      	ldr	r0, [pc, #192]	; (80013f8 <MX_GPIO_Init+0x168>)
 8001338:	f002 ff7a 	bl	8004230 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800133c:	2310      	movs	r3, #16
 800133e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001340:	2301      	movs	r3, #1
 8001342:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001344:	2300      	movs	r3, #0
 8001346:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001348:	2300      	movs	r3, #0
 800134a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800134c:	f107 0314 	add.w	r3, r7, #20
 8001350:	4619      	mov	r1, r3
 8001352:	4827      	ldr	r0, [pc, #156]	; (80013f0 <MX_GPIO_Init+0x160>)
 8001354:	f002 fbdc 	bl	8003b10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PI3 PI2 PI1 PI0 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0;
 8001358:	230f      	movs	r3, #15
 800135a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800135c:	2301      	movs	r3, #1
 800135e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001360:	2300      	movs	r3, #0
 8001362:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001364:	2300      	movs	r3, #0
 8001366:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001368:	f107 0314 	add.w	r3, r7, #20
 800136c:	4619      	mov	r1, r3
 800136e:	4821      	ldr	r0, [pc, #132]	; (80013f4 <MX_GPIO_Init+0x164>)
 8001370:	f002 fbce 	bl	8003b10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001374:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001378:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800137a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800137e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001380:	2301      	movs	r3, #1
 8001382:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001384:	f107 0314 	add.w	r3, r7, #20
 8001388:	4619      	mov	r1, r3
 800138a:	481c      	ldr	r0, [pc, #112]	; (80013fc <MX_GPIO_Init+0x16c>)
 800138c:	f002 fbc0 	bl	8003b10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG7 PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8001390:	23c0      	movs	r3, #192	; 0xc0
 8001392:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001394:	2301      	movs	r3, #1
 8001396:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001398:	2300      	movs	r3, #0
 800139a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800139c:	2300      	movs	r3, #0
 800139e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80013a0:	f107 0314 	add.w	r3, r7, #20
 80013a4:	4619      	mov	r1, r3
 80013a6:	4814      	ldr	r0, [pc, #80]	; (80013f8 <MX_GPIO_Init+0x168>)
 80013a8:	f002 fbb2 	bl	8003b10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80013ac:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80013b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013b2:	2300      	movs	r3, #0
 80013b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b6:	2300      	movs	r3, #0
 80013b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013ba:	f107 0314 	add.w	r3, r7, #20
 80013be:	4619      	mov	r1, r3
 80013c0:	480b      	ldr	r0, [pc, #44]	; (80013f0 <MX_GPIO_Init+0x160>)
 80013c2:	f002 fba5 	bl	8003b10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80013c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80013ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013cc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80013d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013d2:	2301      	movs	r3, #1
 80013d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013d6:	f107 0314 	add.w	r3, r7, #20
 80013da:	4619      	mov	r1, r3
 80013dc:	4804      	ldr	r0, [pc, #16]	; (80013f0 <MX_GPIO_Init+0x160>)
 80013de:	f002 fb97 	bl	8003b10 <HAL_GPIO_Init>

}
 80013e2:	bf00      	nop
 80013e4:	3728      	adds	r7, #40	; 0x28
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	40023800 	.word	0x40023800
 80013f0:	40020400 	.word	0x40020400
 80013f4:	40022000 	.word	0x40022000
 80013f8:	40021800 	.word	0x40021800
 80013fc:	40020000 	.word	0x40020000

08001400 <HX711_Init>:
float loadcell_bias = 10002;
float Hx711Data = 0;


void HX711_Init(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	af00      	add	r7, sp, #0
  // Set the SCK pin to low
  HAL_GPIO_WritePin(HX711_SCK_GPIO_Port, HX711_SCK_Pin, GPIO_PIN_RESET);
 8001404:	2200      	movs	r2, #0
 8001406:	2102      	movs	r1, #2
 8001408:	4802      	ldr	r0, [pc, #8]	; (8001414 <HX711_Init+0x14>)
 800140a:	f002 ff11 	bl	8004230 <HAL_GPIO_WritePin>
}
 800140e:	bf00      	nop
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	40022000 	.word	0x40022000

08001418 <Read_HX711>:

int32_t Read_HX711(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
  int32_t data = 0;
 800141e:	2300      	movs	r3, #0
 8001420:	607b      	str	r3, [r7, #4]

  // Wait until the DT pin goes low
  while (HAL_GPIO_ReadPin(HX711_DT_GPIO_Port, HX711_DT_Pin) == GPIO_PIN_SET);
 8001422:	bf00      	nop
 8001424:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001428:	4820      	ldr	r0, [pc, #128]	; (80014ac <Read_HX711+0x94>)
 800142a:	f002 fee1 	bl	80041f0 <HAL_GPIO_ReadPin>
 800142e:	4603      	mov	r3, r0
 8001430:	2b01      	cmp	r3, #1
 8001432:	d0f7      	beq.n	8001424 <Read_HX711+0xc>

  // Read the 24-bit data
  for (int i = 0; i < 24; i++)
 8001434:	2300      	movs	r3, #0
 8001436:	603b      	str	r3, [r7, #0]
 8001438:	e020      	b.n	800147c <Read_HX711+0x64>
  {
    // Generate a clock pulse on SCK pin
    HAL_GPIO_WritePin(HX711_SCK_GPIO_Port, HX711_SCK_Pin, GPIO_PIN_SET);
 800143a:	2201      	movs	r2, #1
 800143c:	2102      	movs	r1, #2
 800143e:	481c      	ldr	r0, [pc, #112]	; (80014b0 <Read_HX711+0x98>)
 8001440:	f002 fef6 	bl	8004230 <HAL_GPIO_WritePin>
    DelayMicroseconds(1);
 8001444:	2001      	movs	r0, #1
 8001446:	f000 f867 	bl	8001518 <DelayMicroseconds>
    data = (data << 1);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	005b      	lsls	r3, r3, #1
 800144e:	607b      	str	r3, [r7, #4]
    if (HAL_GPIO_ReadPin(HX711_DT_GPIO_Port, HX711_DT_Pin) == GPIO_PIN_SET)
 8001450:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001454:	4815      	ldr	r0, [pc, #84]	; (80014ac <Read_HX711+0x94>)
 8001456:	f002 fecb 	bl	80041f0 <HAL_GPIO_ReadPin>
 800145a:	4603      	mov	r3, r0
 800145c:	2b01      	cmp	r3, #1
 800145e:	d102      	bne.n	8001466 <Read_HX711+0x4e>
    {
      data++;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	3301      	adds	r3, #1
 8001464:	607b      	str	r3, [r7, #4]
    }
    HAL_GPIO_WritePin(HX711_SCK_GPIO_Port, HX711_SCK_Pin, GPIO_PIN_RESET);
 8001466:	2200      	movs	r2, #0
 8001468:	2102      	movs	r1, #2
 800146a:	4811      	ldr	r0, [pc, #68]	; (80014b0 <Read_HX711+0x98>)
 800146c:	f002 fee0 	bl	8004230 <HAL_GPIO_WritePin>
    DelayMicroseconds(1);
 8001470:	2001      	movs	r0, #1
 8001472:	f000 f851 	bl	8001518 <DelayMicroseconds>
  for (int i = 0; i < 24; i++)
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	3301      	adds	r3, #1
 800147a:	603b      	str	r3, [r7, #0]
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	2b17      	cmp	r3, #23
 8001480:	dddb      	ble.n	800143a <Read_HX711+0x22>
  }

  // Generate an additional 25th pulse to set the HX711 back to idle mode
  HAL_GPIO_WritePin(HX711_SCK_GPIO_Port, HX711_SCK_Pin, GPIO_PIN_SET);
 8001482:	2201      	movs	r2, #1
 8001484:	2102      	movs	r1, #2
 8001486:	480a      	ldr	r0, [pc, #40]	; (80014b0 <Read_HX711+0x98>)
 8001488:	f002 fed2 	bl	8004230 <HAL_GPIO_WritePin>
  DelayMicroseconds(1);
 800148c:	2001      	movs	r0, #1
 800148e:	f000 f843 	bl	8001518 <DelayMicroseconds>
  HAL_GPIO_WritePin(HX711_SCK_GPIO_Port, HX711_SCK_Pin, GPIO_PIN_RESET);
 8001492:	2200      	movs	r2, #0
 8001494:	2102      	movs	r1, #2
 8001496:	4806      	ldr	r0, [pc, #24]	; (80014b0 <Read_HX711+0x98>)
 8001498:	f002 feca 	bl	8004230 <HAL_GPIO_WritePin>
  DelayMicroseconds(1);
 800149c:	2001      	movs	r0, #1
 800149e:	f000 f83b 	bl	8001518 <DelayMicroseconds>


  // Return the 24-bit data
  return data;
 80014a2:	687b      	ldr	r3, [r7, #4]
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	3708      	adds	r7, #8
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	40020400 	.word	0x40020400
 80014b0:	40022000 	.word	0x40022000

080014b4 <UART_SendWeight_g>:

void UART_SendWeight_g(float rawData,float loadcell_slope,float loadcell_bias)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b08e      	sub	sp, #56	; 0x38
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	ed87 0a03 	vstr	s0, [r7, #12]
 80014be:	edc7 0a02 	vstr	s1, [r7, #8]
 80014c2:	ed87 1a01 	vstr	s2, [r7, #4]
  float weight = loadcell_slope * rawData  + loadcell_bias;
 80014c6:	ed97 7a02 	vldr	s14, [r7, #8]
 80014ca:	edd7 7a03 	vldr	s15, [r7, #12]
 80014ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014d2:	ed97 7a01 	vldr	s14, [r7, #4]
 80014d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014da:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
  char buffer[32];
  int data = sprintf(buffer, "%.2f", weight);
 80014de:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80014e0:	f7ff f862 	bl	80005a8 <__aeabi_f2d>
 80014e4:	4602      	mov	r2, r0
 80014e6:	460b      	mov	r3, r1
 80014e8:	f107 0010 	add.w	r0, r7, #16
 80014ec:	4908      	ldr	r1, [pc, #32]	; (8001510 <UART_SendWeight_g+0x5c>)
 80014ee:	f00f fcab 	bl	8010e48 <siprintf>
 80014f2:	6338      	str	r0, [r7, #48]	; 0x30
  // Send the buffer content via UART
#if 0
  int len = sprintf(buffer, "Weight(g):");
  HAL_UART_Transmit(&huart1, (uint8_t *)buffer, len, 1000);
#endif
  HAL_UART_Transmit(&huart1, (uint8_t *)buffer, data, 1000);
 80014f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014f6:	b29a      	uxth	r2, r3
 80014f8:	f107 0110 	add.w	r1, r7, #16
 80014fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001500:	4804      	ldr	r0, [pc, #16]	; (8001514 <UART_SendWeight_g+0x60>)
 8001502:	f008 fb37 	bl	8009b74 <HAL_UART_Transmit>
}
 8001506:	bf00      	nop
 8001508:	3738      	adds	r7, #56	; 0x38
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	08016218 	.word	0x08016218
 8001514:	20007a74 	.word	0x20007a74

08001518 <DelayMicroseconds>:

  // Send the buffer content via UART
  HAL_UART_Transmit(&huart1, (uint8_t *)buffer, len, 1000);
}
void DelayMicroseconds(uint32_t microseconds)
{
 8001518:	b480      	push	{r7}
 800151a:	b085      	sub	sp, #20
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  uint32_t ticks = microseconds;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	60fb      	str	r3, [r7, #12]
  while (ticks--)
 8001524:	e000      	b.n	8001528 <DelayMicroseconds+0x10>
  {
    __NOP();
 8001526:	bf00      	nop
  while (ticks--)
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	1e5a      	subs	r2, r3, #1
 800152c:	60fa      	str	r2, [r7, #12]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d1f9      	bne.n	8001526 <DelayMicroseconds+0xe>
  }
}
 8001532:	bf00      	nop
 8001534:	bf00      	nop
 8001536:	3714      	adds	r7, #20
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr

08001540 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001544:	4b1b      	ldr	r3, [pc, #108]	; (80015b4 <MX_I2C1_Init+0x74>)
 8001546:	4a1c      	ldr	r2, [pc, #112]	; (80015b8 <MX_I2C1_Init+0x78>)
 8001548:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x6000030D;
 800154a:	4b1a      	ldr	r3, [pc, #104]	; (80015b4 <MX_I2C1_Init+0x74>)
 800154c:	4a1b      	ldr	r2, [pc, #108]	; (80015bc <MX_I2C1_Init+0x7c>)
 800154e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001550:	4b18      	ldr	r3, [pc, #96]	; (80015b4 <MX_I2C1_Init+0x74>)
 8001552:	2200      	movs	r2, #0
 8001554:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001556:	4b17      	ldr	r3, [pc, #92]	; (80015b4 <MX_I2C1_Init+0x74>)
 8001558:	2201      	movs	r2, #1
 800155a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800155c:	4b15      	ldr	r3, [pc, #84]	; (80015b4 <MX_I2C1_Init+0x74>)
 800155e:	2200      	movs	r2, #0
 8001560:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001562:	4b14      	ldr	r3, [pc, #80]	; (80015b4 <MX_I2C1_Init+0x74>)
 8001564:	2200      	movs	r2, #0
 8001566:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001568:	4b12      	ldr	r3, [pc, #72]	; (80015b4 <MX_I2C1_Init+0x74>)
 800156a:	2200      	movs	r2, #0
 800156c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800156e:	4b11      	ldr	r3, [pc, #68]	; (80015b4 <MX_I2C1_Init+0x74>)
 8001570:	2200      	movs	r2, #0
 8001572:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001574:	4b0f      	ldr	r3, [pc, #60]	; (80015b4 <MX_I2C1_Init+0x74>)
 8001576:	2200      	movs	r2, #0
 8001578:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800157a:	480e      	ldr	r0, [pc, #56]	; (80015b4 <MX_I2C1_Init+0x74>)
 800157c:	f002 fea8 	bl	80042d0 <HAL_I2C_Init>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001586:	f001 fa7b 	bl	8002a80 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800158a:	2100      	movs	r1, #0
 800158c:	4809      	ldr	r0, [pc, #36]	; (80015b4 <MX_I2C1_Init+0x74>)
 800158e:	f004 f9d5 	bl	800593c <HAL_I2CEx_ConfigAnalogFilter>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d001      	beq.n	800159c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001598:	f001 fa72 	bl	8002a80 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800159c:	2100      	movs	r1, #0
 800159e:	4805      	ldr	r0, [pc, #20]	; (80015b4 <MX_I2C1_Init+0x74>)
 80015a0:	f004 fa42 	bl	8005a28 <HAL_I2CEx_ConfigDigitalFilter>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80015aa:	f001 fa69 	bl	8002a80 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015ae:	bf00      	nop
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	20007720 	.word	0x20007720
 80015b8:	40005400 	.word	0x40005400
 80015bc:	6000030d 	.word	0x6000030d

080015c0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b0aa      	sub	sp, #168	; 0xa8
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80015cc:	2200      	movs	r2, #0
 80015ce:	601a      	str	r2, [r3, #0]
 80015d0:	605a      	str	r2, [r3, #4]
 80015d2:	609a      	str	r2, [r3, #8]
 80015d4:	60da      	str	r2, [r3, #12]
 80015d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015d8:	f107 0310 	add.w	r3, r7, #16
 80015dc:	2284      	movs	r2, #132	; 0x84
 80015de:	2100      	movs	r1, #0
 80015e0:	4618      	mov	r0, r3
 80015e2:	f00e fda9 	bl	8010138 <memset>
  if(i2cHandle->Instance==I2C1)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4a22      	ldr	r2, [pc, #136]	; (8001674 <HAL_I2C_MspInit+0xb4>)
 80015ec:	4293      	cmp	r3, r2
 80015ee:	d13c      	bne.n	800166a <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80015f0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80015f4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80015f6:	2300      	movs	r3, #0
 80015f8:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015fa:	f107 0310 	add.w	r3, r7, #16
 80015fe:	4618      	mov	r0, r3
 8001600:	f005 f8d2 	bl	80067a8 <HAL_RCCEx_PeriphCLKConfig>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800160a:	f001 fa39 	bl	8002a80 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800160e:	4b1a      	ldr	r3, [pc, #104]	; (8001678 <HAL_I2C_MspInit+0xb8>)
 8001610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001612:	4a19      	ldr	r2, [pc, #100]	; (8001678 <HAL_I2C_MspInit+0xb8>)
 8001614:	f043 0302 	orr.w	r3, r3, #2
 8001618:	6313      	str	r3, [r2, #48]	; 0x30
 800161a:	4b17      	ldr	r3, [pc, #92]	; (8001678 <HAL_I2C_MspInit+0xb8>)
 800161c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161e:	f003 0302 	and.w	r3, r3, #2
 8001622:	60fb      	str	r3, [r7, #12]
 8001624:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001626:	f44f 7340 	mov.w	r3, #768	; 0x300
 800162a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800162e:	2312      	movs	r3, #18
 8001630:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001634:	2300      	movs	r3, #0
 8001636:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800163a:	2303      	movs	r3, #3
 800163c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001640:	2304      	movs	r3, #4
 8001642:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001646:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800164a:	4619      	mov	r1, r3
 800164c:	480b      	ldr	r0, [pc, #44]	; (800167c <HAL_I2C_MspInit+0xbc>)
 800164e:	f002 fa5f 	bl	8003b10 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001652:	4b09      	ldr	r3, [pc, #36]	; (8001678 <HAL_I2C_MspInit+0xb8>)
 8001654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001656:	4a08      	ldr	r2, [pc, #32]	; (8001678 <HAL_I2C_MspInit+0xb8>)
 8001658:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800165c:	6413      	str	r3, [r2, #64]	; 0x40
 800165e:	4b06      	ldr	r3, [pc, #24]	; (8001678 <HAL_I2C_MspInit+0xb8>)
 8001660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001662:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001666:	60bb      	str	r3, [r7, #8]
 8001668:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800166a:	bf00      	nop
 800166c:	37a8      	adds	r7, #168	; 0xa8
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	40005400 	.word	0x40005400
 8001678:	40023800 	.word	0x40023800
 800167c:	40020400 	.word	0x40020400

08001680 <Kalman_Init>:
KalmanFilter filters[NUM_SENSOR];
float Q = 0.001f; // Process noise covariance
float R = 0.03f;   // Measurement noise covariance
float P = 0.001f;

void Kalman_Init(KalmanFilter *kf, float Q, float R, float P, float initial_value) {
 8001680:	b480      	push	{r7}
 8001682:	b087      	sub	sp, #28
 8001684:	af00      	add	r7, sp, #0
 8001686:	6178      	str	r0, [r7, #20]
 8001688:	ed87 0a04 	vstr	s0, [r7, #16]
 800168c:	edc7 0a03 	vstr	s1, [r7, #12]
 8001690:	ed87 1a02 	vstr	s2, [r7, #8]
 8001694:	edc7 1a01 	vstr	s3, [r7, #4]
    kf->Q = Q;
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	693a      	ldr	r2, [r7, #16]
 800169c:	601a      	str	r2, [r3, #0]
    kf->R = R;
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	68fa      	ldr	r2, [r7, #12]
 80016a2:	605a      	str	r2, [r3, #4]
    kf->P = P;
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	68ba      	ldr	r2, [r7, #8]
 80016a8:	609a      	str	r2, [r3, #8]
    kf->X = initial_value;
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	687a      	ldr	r2, [r7, #4]
 80016ae:	60da      	str	r2, [r3, #12]
}
 80016b0:	bf00      	nop
 80016b2:	371c      	adds	r7, #28
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr

080016bc <Kalman_Estimate>:

float Kalman_Estimate(KalmanFilter *kf, float measurement) {
 80016bc:	b480      	push	{r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
 80016c4:	ed87 0a00 	vstr	s0, [r7]
    // Prediction step: Update the error covariance 'P'
    // This is adding process noise to our uncertainty in the estimated state.
    kf->P = kf->P + kf->Q;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	ed93 7a02 	vldr	s14, [r3, #8]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	edd3 7a00 	vldr	s15, [r3]
 80016d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	edc3 7a02 	vstr	s15, [r3, #8]

    // Update step: Compute the Kalman Gain 'K'
    // Kalman Gain balances the ratio between the prediction and the new measurement
    kf->K = kf->P / (kf->P + kf->R);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	edd3 6a02 	vldr	s13, [r3, #8]
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	ed93 7a02 	vldr	s14, [r3, #8]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	edd3 7a01 	vldr	s15, [r3, #4]
 80016f0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80016f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	edc3 7a04 	vstr	s15, [r3, #16]

    // Update step: Update the state estimate 'X'
    // Here we adjust our state estimate based on the new measurement,
    // scaling the "innovation" by the Kalman Gain
    kf->X = kf->X + kf->K * (measurement - kf->X);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	ed93 7a03 	vldr	s14, [r3, #12]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	edd3 6a04 	vldr	s13, [r3, #16]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	edd3 7a03 	vldr	s15, [r3, #12]
 8001710:	ed97 6a00 	vldr	s12, [r7]
 8001714:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001718:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800171c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	edc3 7a03 	vstr	s15, [r3, #12]

    // Update step: Update the error covariance 'P'
    // We've used our observation, so we adjust our uncertainty accordingly
    kf->P = (1 - kf->K) * kf->P;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	edd3 7a04 	vldr	s15, [r3, #16]
 800172c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001730:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	edd3 7a02 	vldr	s15, [r3, #8]
 800173a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	edc3 7a02 	vstr	s15, [r3, #8]

    // Return the updated state estimate
    return kf->X;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	68db      	ldr	r3, [r3, #12]
 8001748:	ee07 3a90 	vmov	s15, r3
}
 800174c:	eeb0 0a67 	vmov.f32	s0, s15
 8001750:	370c      	adds	r7, #12
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
	...

0800175c <ProcessCommand>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void ProcessCommand(uint8_t *commandBuffer)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b084      	sub	sp, #16
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
    char *command = strtok((char*)commandBuffer, " "); // Command separation
 8001764:	4949      	ldr	r1, [pc, #292]	; (800188c <ProcessCommand+0x130>)
 8001766:	6878      	ldr	r0, [r7, #4]
 8001768:	f010 fa32 	bl	8011bd0 <strtok>
 800176c:	60f8      	str	r0, [r7, #12]
    // 'strtok'는 다음 호출 때 NULL을 사용하여 이전 문자열에서 계속 토큰을 추출
    char *argument = strtok(NULL, " "); // argument seperation
 800176e:	4947      	ldr	r1, [pc, #284]	; (800188c <ProcessCommand+0x130>)
 8001770:	2000      	movs	r0, #0
 8001772:	f010 fa2d 	bl	8011bd0 <strtok>
 8001776:	60b8      	str	r0, [r7, #8]

    if (strcmp((char*)command, "echo") == 0) {HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "echo\n"), 100);}
 8001778:	4945      	ldr	r1, [pc, #276]	; (8001890 <ProcessCommand+0x134>)
 800177a:	68f8      	ldr	r0, [r7, #12]
 800177c:	f7fe fd48 	bl	8000210 <strcmp>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d10b      	bne.n	800179e <ProcessCommand+0x42>
 8001786:	4943      	ldr	r1, [pc, #268]	; (8001894 <ProcessCommand+0x138>)
 8001788:	4843      	ldr	r0, [pc, #268]	; (8001898 <ProcessCommand+0x13c>)
 800178a:	f00f fb5d 	bl	8010e48 <siprintf>
 800178e:	4603      	mov	r3, r0
 8001790:	b29a      	uxth	r2, r3
 8001792:	2364      	movs	r3, #100	; 0x64
 8001794:	4940      	ldr	r1, [pc, #256]	; (8001898 <ProcessCommand+0x13c>)
 8001796:	4841      	ldr	r0, [pc, #260]	; (800189c <ProcessCommand+0x140>)
 8001798:	f008 f9ec 	bl	8009b74 <HAL_UART_Transmit>
    else if (strcmp((char*)command, "setsensor") == 0) {SetSensorCommand();}
    else if (strcmp((char*)command, "auto") == 0) {AutoCommand();}
    else if (strcmp((char*)command, "3") == 0) {CalibrationCommand();}
    else if (strcmp((char*)command, "4") == 0) {CalibrationCommand();}
    else {HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "Please insert correct command\n"), 100);}
}
 800179c:	e071      	b.n	8001882 <ProcessCommand+0x126>
    else if (strcmp((char*)command, "rev") == 0) {RevCommand(argument);}
 800179e:	4940      	ldr	r1, [pc, #256]	; (80018a0 <ProcessCommand+0x144>)
 80017a0:	68f8      	ldr	r0, [r7, #12]
 80017a2:	f7fe fd35 	bl	8000210 <strcmp>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d103      	bne.n	80017b4 <ProcessCommand+0x58>
 80017ac:	68b8      	ldr	r0, [r7, #8]
 80017ae:	f000 f88d 	bl	80018cc <RevCommand>
}
 80017b2:	e066      	b.n	8001882 <ProcessCommand+0x126>
    else if (strcmp((char*)command, "lin") == 0) {LinCommand(argument);}
 80017b4:	493b      	ldr	r1, [pc, #236]	; (80018a4 <ProcessCommand+0x148>)
 80017b6:	68f8      	ldr	r0, [r7, #12]
 80017b8:	f7fe fd2a 	bl	8000210 <strcmp>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d103      	bne.n	80017ca <ProcessCommand+0x6e>
 80017c2:	68b8      	ldr	r0, [r7, #8]
 80017c4:	f000 f8ce 	bl	8001964 <LinCommand>
}
 80017c8:	e05b      	b.n	8001882 <ProcessCommand+0x126>
    else if (strcmp((char*)command, "servo") == 0) {ServoCommand(argument);}
 80017ca:	4937      	ldr	r1, [pc, #220]	; (80018a8 <ProcessCommand+0x14c>)
 80017cc:	68f8      	ldr	r0, [r7, #12]
 80017ce:	f7fe fd1f 	bl	8000210 <strcmp>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d103      	bne.n	80017e0 <ProcessCommand+0x84>
 80017d8:	68b8      	ldr	r0, [r7, #8]
 80017da:	f000 f911 	bl	8001a00 <ServoCommand>
}
 80017de:	e050      	b.n	8001882 <ProcessCommand+0x126>
    else if (strcmp((char*)command, "sensor") == 0) {SensorCommand();}
 80017e0:	4932      	ldr	r1, [pc, #200]	; (80018ac <ProcessCommand+0x150>)
 80017e2:	68f8      	ldr	r0, [r7, #12]
 80017e4:	f7fe fd14 	bl	8000210 <strcmp>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d102      	bne.n	80017f4 <ProcessCommand+0x98>
 80017ee:	f000 f96b 	bl	8001ac8 <SensorCommand>
}
 80017f2:	e046      	b.n	8001882 <ProcessCommand+0x126>
    else if (strcmp((char*)command, "cali") == 0) {CalibrationCommand();}
 80017f4:	492e      	ldr	r1, [pc, #184]	; (80018b0 <ProcessCommand+0x154>)
 80017f6:	68f8      	ldr	r0, [r7, #12]
 80017f8:	f7fe fd0a 	bl	8000210 <strcmp>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d102      	bne.n	8001808 <ProcessCommand+0xac>
 8001802:	f000 fedd 	bl	80025c0 <CalibrationCommand>
}
 8001806:	e03c      	b.n	8001882 <ProcessCommand+0x126>
    else if (strcmp((char*)command, "ini") == 0) {InitializaionCalibrationCommand();}
 8001808:	492a      	ldr	r1, [pc, #168]	; (80018b4 <ProcessCommand+0x158>)
 800180a:	68f8      	ldr	r0, [r7, #12]
 800180c:	f7fe fd00 	bl	8000210 <strcmp>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d102      	bne.n	800181c <ProcessCommand+0xc0>
 8001816:	f000 fc83 	bl	8002120 <InitializaionCalibrationCommand>
}
 800181a:	e032      	b.n	8001882 <ProcessCommand+0x126>
    else if (strcmp((char*)command, "setsensor") == 0) {SetSensorCommand();}
 800181c:	4926      	ldr	r1, [pc, #152]	; (80018b8 <ProcessCommand+0x15c>)
 800181e:	68f8      	ldr	r0, [r7, #12]
 8001820:	f7fe fcf6 	bl	8000210 <strcmp>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d102      	bne.n	8001830 <ProcessCommand+0xd4>
 800182a:	f000 fed1 	bl	80025d0 <SetSensorCommand>
}
 800182e:	e028      	b.n	8001882 <ProcessCommand+0x126>
    else if (strcmp((char*)command, "auto") == 0) {AutoCommand();}
 8001830:	4922      	ldr	r1, [pc, #136]	; (80018bc <ProcessCommand+0x160>)
 8001832:	68f8      	ldr	r0, [r7, #12]
 8001834:	f7fe fcec 	bl	8000210 <strcmp>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d102      	bne.n	8001844 <ProcessCommand+0xe8>
 800183e:	f000 fa73 	bl	8001d28 <AutoCommand>
}
 8001842:	e01e      	b.n	8001882 <ProcessCommand+0x126>
    else if (strcmp((char*)command, "3") == 0) {CalibrationCommand();}
 8001844:	491e      	ldr	r1, [pc, #120]	; (80018c0 <ProcessCommand+0x164>)
 8001846:	68f8      	ldr	r0, [r7, #12]
 8001848:	f7fe fce2 	bl	8000210 <strcmp>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d102      	bne.n	8001858 <ProcessCommand+0xfc>
 8001852:	f000 feb5 	bl	80025c0 <CalibrationCommand>
}
 8001856:	e014      	b.n	8001882 <ProcessCommand+0x126>
    else if (strcmp((char*)command, "4") == 0) {CalibrationCommand();}
 8001858:	491a      	ldr	r1, [pc, #104]	; (80018c4 <ProcessCommand+0x168>)
 800185a:	68f8      	ldr	r0, [r7, #12]
 800185c:	f7fe fcd8 	bl	8000210 <strcmp>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d102      	bne.n	800186c <ProcessCommand+0x110>
 8001866:	f000 feab 	bl	80025c0 <CalibrationCommand>
}
 800186a:	e00a      	b.n	8001882 <ProcessCommand+0x126>
    else {HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "Please insert correct command\n"), 100);}
 800186c:	4916      	ldr	r1, [pc, #88]	; (80018c8 <ProcessCommand+0x16c>)
 800186e:	480a      	ldr	r0, [pc, #40]	; (8001898 <ProcessCommand+0x13c>)
 8001870:	f00f faea 	bl	8010e48 <siprintf>
 8001874:	4603      	mov	r3, r0
 8001876:	b29a      	uxth	r2, r3
 8001878:	2364      	movs	r3, #100	; 0x64
 800187a:	4907      	ldr	r1, [pc, #28]	; (8001898 <ProcessCommand+0x13c>)
 800187c:	4807      	ldr	r0, [pc, #28]	; (800189c <ProcessCommand+0x140>)
 800187e:	f008 f979 	bl	8009b74 <HAL_UART_Transmit>
}
 8001882:	bf00      	nop
 8001884:	3710      	adds	r7, #16
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	08016234 	.word	0x08016234
 8001890:	08016238 	.word	0x08016238
 8001894:	08016240 	.word	0x08016240
 8001898:	200079f0 	.word	0x200079f0
 800189c:	20007a74 	.word	0x20007a74
 80018a0:	08016248 	.word	0x08016248
 80018a4:	0801624c 	.word	0x0801624c
 80018a8:	08016250 	.word	0x08016250
 80018ac:	08016258 	.word	0x08016258
 80018b0:	08016260 	.word	0x08016260
 80018b4:	08016268 	.word	0x08016268
 80018b8:	0801626c 	.word	0x0801626c
 80018bc:	08016278 	.word	0x08016278
 80018c0:	08016280 	.word	0x08016280
 80018c4:	08016284 	.word	0x08016284
 80018c8:	08016288 	.word	0x08016288

080018cc <RevCommand>:

void RevCommand(char *arg){
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b084      	sub	sp, #16
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
    int step_rev_angle;
    if(sscanf(arg, "%d", &step_rev_angle) == 1){
 80018d4:	f107 030c 	add.w	r3, r7, #12
 80018d8:	461a      	mov	r2, r3
 80018da:	491c      	ldr	r1, [pc, #112]	; (800194c <RevCommand+0x80>)
 80018dc:	6878      	ldr	r0, [r7, #4]
 80018de:	f00f fad3 	bl	8010e88 <siscanf>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b01      	cmp	r3, #1
 80018e6:	d11e      	bne.n	8001926 <RevCommand+0x5a>
		HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%d deg revolution Start \n\r",step_rev_angle), 100);
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	461a      	mov	r2, r3
 80018ec:	4918      	ldr	r1, [pc, #96]	; (8001950 <RevCommand+0x84>)
 80018ee:	4819      	ldr	r0, [pc, #100]	; (8001954 <RevCommand+0x88>)
 80018f0:	f00f faaa 	bl	8010e48 <siprintf>
 80018f4:	4603      	mov	r3, r0
 80018f6:	b29a      	uxth	r2, r3
 80018f8:	2364      	movs	r3, #100	; 0x64
 80018fa:	4916      	ldr	r1, [pc, #88]	; (8001954 <RevCommand+0x88>)
 80018fc:	4816      	ldr	r0, [pc, #88]	; (8001958 <RevCommand+0x8c>)
 80018fe:	f008 f939 	bl	8009b74 <HAL_UART_Transmit>
        stepRev(step_rev_angle);
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	4618      	mov	r0, r3
 8001906:	f001 f8cb 	bl	8002aa0 <stepRev>
		HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%d deg revolution End \n\r",step_rev_angle), 100);
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	461a      	mov	r2, r3
 800190e:	4913      	ldr	r1, [pc, #76]	; (800195c <RevCommand+0x90>)
 8001910:	4810      	ldr	r0, [pc, #64]	; (8001954 <RevCommand+0x88>)
 8001912:	f00f fa99 	bl	8010e48 <siprintf>
 8001916:	4603      	mov	r3, r0
 8001918:	b29a      	uxth	r2, r3
 800191a:	2364      	movs	r3, #100	; 0x64
 800191c:	490d      	ldr	r1, [pc, #52]	; (8001954 <RevCommand+0x88>)
 800191e:	480e      	ldr	r0, [pc, #56]	; (8001958 <RevCommand+0x8c>)
 8001920:	f008 f928 	bl	8009b74 <HAL_UART_Transmit>
 8001924:	e00a      	b.n	800193c <RevCommand+0x70>
    }else{
    	HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "invalid data\r\n"), 100);
 8001926:	490e      	ldr	r1, [pc, #56]	; (8001960 <RevCommand+0x94>)
 8001928:	480a      	ldr	r0, [pc, #40]	; (8001954 <RevCommand+0x88>)
 800192a:	f00f fa8d 	bl	8010e48 <siprintf>
 800192e:	4603      	mov	r3, r0
 8001930:	b29a      	uxth	r2, r3
 8001932:	2364      	movs	r3, #100	; 0x64
 8001934:	4907      	ldr	r1, [pc, #28]	; (8001954 <RevCommand+0x88>)
 8001936:	4808      	ldr	r0, [pc, #32]	; (8001958 <RevCommand+0x8c>)
 8001938:	f008 f91c 	bl	8009b74 <HAL_UART_Transmit>
    }
    HAL_Delay(1000); // Delay for 1 second
 800193c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001940:	f001 fee2 	bl	8003708 <HAL_Delay>
}
 8001944:	bf00      	nop
 8001946:	3710      	adds	r7, #16
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	080162a8 	.word	0x080162a8
 8001950:	080162ac 	.word	0x080162ac
 8001954:	200079f0 	.word	0x200079f0
 8001958:	20007a74 	.word	0x20007a74
 800195c:	080162c8 	.word	0x080162c8
 8001960:	080162e4 	.word	0x080162e4

08001964 <LinCommand>:

void LinCommand(char *arg){
 8001964:	b580      	push	{r7, lr}
 8001966:	b084      	sub	sp, #16
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
    int step_lin_dist = 0;
 800196c:	2300      	movs	r3, #0
 800196e:	60fb      	str	r3, [r7, #12]
    if (sscanf(arg, "%d", &step_lin_dist) == 1) {
 8001970:	f107 030c 	add.w	r3, r7, #12
 8001974:	461a      	mov	r2, r3
 8001976:	491c      	ldr	r1, [pc, #112]	; (80019e8 <LinCommand+0x84>)
 8001978:	6878      	ldr	r0, [r7, #4]
 800197a:	f00f fa85 	bl	8010e88 <siscanf>
 800197e:	4603      	mov	r3, r0
 8001980:	2b01      	cmp	r3, #1
 8001982:	d11e      	bne.n	80019c2 <LinCommand+0x5e>
		HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%d mm lin Still moving \n\r",step_lin_dist), 100);
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	461a      	mov	r2, r3
 8001988:	4918      	ldr	r1, [pc, #96]	; (80019ec <LinCommand+0x88>)
 800198a:	4819      	ldr	r0, [pc, #100]	; (80019f0 <LinCommand+0x8c>)
 800198c:	f00f fa5c 	bl	8010e48 <siprintf>
 8001990:	4603      	mov	r3, r0
 8001992:	b29a      	uxth	r2, r3
 8001994:	2364      	movs	r3, #100	; 0x64
 8001996:	4916      	ldr	r1, [pc, #88]	; (80019f0 <LinCommand+0x8c>)
 8001998:	4816      	ldr	r0, [pc, #88]	; (80019f4 <LinCommand+0x90>)
 800199a:	f008 f8eb 	bl	8009b74 <HAL_UART_Transmit>
        stepLin(step_lin_dist);
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	4618      	mov	r0, r3
 80019a2:	f001 f8e7 	bl	8002b74 <stepLin>
        HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%d mm lin End\n\r", step_lin_dist), 100);
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	461a      	mov	r2, r3
 80019aa:	4913      	ldr	r1, [pc, #76]	; (80019f8 <LinCommand+0x94>)
 80019ac:	4810      	ldr	r0, [pc, #64]	; (80019f0 <LinCommand+0x8c>)
 80019ae:	f00f fa4b 	bl	8010e48 <siprintf>
 80019b2:	4603      	mov	r3, r0
 80019b4:	b29a      	uxth	r2, r3
 80019b6:	2364      	movs	r3, #100	; 0x64
 80019b8:	490d      	ldr	r1, [pc, #52]	; (80019f0 <LinCommand+0x8c>)
 80019ba:	480e      	ldr	r0, [pc, #56]	; (80019f4 <LinCommand+0x90>)
 80019bc:	f008 f8da 	bl	8009b74 <HAL_UART_Transmit>
 80019c0:	e00a      	b.n	80019d8 <LinCommand+0x74>
    } else {
        HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "invalid data\r\n"), 100);
 80019c2:	490e      	ldr	r1, [pc, #56]	; (80019fc <LinCommand+0x98>)
 80019c4:	480a      	ldr	r0, [pc, #40]	; (80019f0 <LinCommand+0x8c>)
 80019c6:	f00f fa3f 	bl	8010e48 <siprintf>
 80019ca:	4603      	mov	r3, r0
 80019cc:	b29a      	uxth	r2, r3
 80019ce:	2364      	movs	r3, #100	; 0x64
 80019d0:	4907      	ldr	r1, [pc, #28]	; (80019f0 <LinCommand+0x8c>)
 80019d2:	4808      	ldr	r0, [pc, #32]	; (80019f4 <LinCommand+0x90>)
 80019d4:	f008 f8ce 	bl	8009b74 <HAL_UART_Transmit>
    }
    HAL_Delay(1000); // Delay for 1 second
 80019d8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80019dc:	f001 fe94 	bl	8003708 <HAL_Delay>
}
 80019e0:	bf00      	nop
 80019e2:	3710      	adds	r7, #16
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	080162a8 	.word	0x080162a8
 80019ec:	080162f4 	.word	0x080162f4
 80019f0:	200079f0 	.word	0x200079f0
 80019f4:	20007a74 	.word	0x20007a74
 80019f8:	08016310 	.word	0x08016310
 80019fc:	080162e4 	.word	0x080162e4

08001a00 <ServoCommand>:

void ServoCommand(char *arg){
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b084      	sub	sp, #16
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
    float servo_angle_val = 0;
 8001a08:	f04f 0300 	mov.w	r3, #0
 8001a0c:	60fb      	str	r3, [r7, #12]
    if(sscanf(arg, "%f", &servo_angle_val) == 1) {
 8001a0e:	f107 030c 	add.w	r3, r7, #12
 8001a12:	461a      	mov	r2, r3
 8001a14:	4925      	ldr	r1, [pc, #148]	; (8001aac <ServoCommand+0xac>)
 8001a16:	6878      	ldr	r0, [r7, #4]
 8001a18:	f00f fa36 	bl	8010e88 <siscanf>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b01      	cmp	r3, #1
 8001a20:	d135      	bne.n	8001a8e <ServoCommand+0x8e>
    	HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%.2f servo Still moving \n\r", servo_angle_val), 100);
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	4618      	mov	r0, r3
 8001a26:	f7fe fdbf 	bl	80005a8 <__aeabi_f2d>
 8001a2a:	4602      	mov	r2, r0
 8001a2c:	460b      	mov	r3, r1
 8001a2e:	4920      	ldr	r1, [pc, #128]	; (8001ab0 <ServoCommand+0xb0>)
 8001a30:	4820      	ldr	r0, [pc, #128]	; (8001ab4 <ServoCommand+0xb4>)
 8001a32:	f00f fa09 	bl	8010e48 <siprintf>
 8001a36:	4603      	mov	r3, r0
 8001a38:	b29a      	uxth	r2, r3
 8001a3a:	2364      	movs	r3, #100	; 0x64
 8001a3c:	491d      	ldr	r1, [pc, #116]	; (8001ab4 <ServoCommand+0xb4>)
 8001a3e:	481e      	ldr	r0, [pc, #120]	; (8001ab8 <ServoCommand+0xb8>)
 8001a40:	f008 f898 	bl	8009b74 <HAL_UART_Transmit>
    	servo_angle(&htim2, TIM_CHANNEL_1, servo_angle_val);
 8001a44:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a48:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a4c:	ee17 2a90 	vmov	r2, s15
 8001a50:	2100      	movs	r1, #0
 8001a52:	481a      	ldr	r0, [pc, #104]	; (8001abc <ServoCommand+0xbc>)
 8001a54:	f001 f928 	bl	8002ca8 <servo_angle>
    	HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%.2f servo End \n\r", servo_angle_val), 100);
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f7fe fda4 	bl	80005a8 <__aeabi_f2d>
 8001a60:	4602      	mov	r2, r0
 8001a62:	460b      	mov	r3, r1
 8001a64:	4916      	ldr	r1, [pc, #88]	; (8001ac0 <ServoCommand+0xc0>)
 8001a66:	4813      	ldr	r0, [pc, #76]	; (8001ab4 <ServoCommand+0xb4>)
 8001a68:	f00f f9ee 	bl	8010e48 <siprintf>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	b29a      	uxth	r2, r3
 8001a70:	2364      	movs	r3, #100	; 0x64
 8001a72:	4910      	ldr	r1, [pc, #64]	; (8001ab4 <ServoCommand+0xb4>)
 8001a74:	4810      	ldr	r0, [pc, #64]	; (8001ab8 <ServoCommand+0xb8>)
 8001a76:	f008 f87d 	bl	8009b74 <HAL_UART_Transmit>
        HAL_Delay(2000); // Delay for 2 seconds
 8001a7a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001a7e:	f001 fe43 	bl	8003708 <HAL_Delay>
        servo_angle(&htim2, TIM_CHANNEL_1, 0); // return to servo origin
 8001a82:	2200      	movs	r2, #0
 8001a84:	2100      	movs	r1, #0
 8001a86:	480d      	ldr	r0, [pc, #52]	; (8001abc <ServoCommand+0xbc>)
 8001a88:	f001 f90e 	bl	8002ca8 <servo_angle>
    }else{
        HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "invalid data\r\n"), 100);
    }
}
 8001a8c:	e00a      	b.n	8001aa4 <ServoCommand+0xa4>
        HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "invalid data\r\n"), 100);
 8001a8e:	490d      	ldr	r1, [pc, #52]	; (8001ac4 <ServoCommand+0xc4>)
 8001a90:	4808      	ldr	r0, [pc, #32]	; (8001ab4 <ServoCommand+0xb4>)
 8001a92:	f00f f9d9 	bl	8010e48 <siprintf>
 8001a96:	4603      	mov	r3, r0
 8001a98:	b29a      	uxth	r2, r3
 8001a9a:	2364      	movs	r3, #100	; 0x64
 8001a9c:	4905      	ldr	r1, [pc, #20]	; (8001ab4 <ServoCommand+0xb4>)
 8001a9e:	4806      	ldr	r0, [pc, #24]	; (8001ab8 <ServoCommand+0xb8>)
 8001aa0:	f008 f868 	bl	8009b74 <HAL_UART_Transmit>
}
 8001aa4:	bf00      	nop
 8001aa6:	3710      	adds	r7, #16
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	08016320 	.word	0x08016320
 8001ab0:	08016324 	.word	0x08016324
 8001ab4:	200079f0 	.word	0x200079f0
 8001ab8:	20007a74 	.word	0x20007a74
 8001abc:	20007958 	.word	0x20007958
 8001ac0:	08016340 	.word	0x08016340
 8001ac4:	080162e4 	.word	0x080162e4

08001ac8 <SensorCommand>:

void SensorCommand(){
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b088      	sub	sp, #32
 8001acc:	af00      	add	r7, sp, #0

	ResetAllDevices();
 8001ace:	f001 fd15 	bl	80034fc <ResetAllDevices>
    HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "sensor test\r\n"), 100);
 8001ad2:	4983      	ldr	r1, [pc, #524]	; (8001ce0 <SensorCommand+0x218>)
 8001ad4:	4883      	ldr	r0, [pc, #524]	; (8001ce4 <SensorCommand+0x21c>)
 8001ad6:	f00f f9b7 	bl	8010e48 <siprintf>
 8001ada:	4603      	mov	r3, r0
 8001adc:	b29a      	uxth	r2, r3
 8001ade:	2364      	movs	r3, #100	; 0x64
 8001ae0:	4980      	ldr	r1, [pc, #512]	; (8001ce4 <SensorCommand+0x21c>)
 8001ae2:	4881      	ldr	r0, [pc, #516]	; (8001ce8 <SensorCommand+0x220>)
 8001ae4:	f008 f846 	bl	8009b74 <HAL_UART_Transmit>
    uint32_t startTime, endTime, diffTime;
    for(int count =0; count < NUM_READINGS; count++){
 8001ae8:	2300      	movs	r3, #0
 8001aea:	61fb      	str	r3, [r7, #28]
 8001aec:	e0eb      	b.n	8001cc6 <SensorCommand+0x1fe>
    	uint8_t sensorCount = 0;
 8001aee:	2300      	movs	r3, #0
 8001af0:	76fb      	strb	r3, [r7, #27]
    	startTime = HAL_GetTick();
 8001af2:	f001 fdfd 	bl	80036f0 <HAL_GetTick>
 8001af6:	6138      	str	r0, [r7, #16]
		for (int i = 0; i < NUM_SENSOR; i++) {
 8001af8:	2300      	movs	r3, #0
 8001afa:	617b      	str	r3, [r7, #20]
 8001afc:	e09d      	b.n	8001c3a <SensorCommand+0x172>
			uint8_t q = i / 12;
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	4a7a      	ldr	r2, [pc, #488]	; (8001cec <SensorCommand+0x224>)
 8001b02:	fb82 1203 	smull	r1, r2, r2, r3
 8001b06:	1052      	asrs	r2, r2, #1
 8001b08:	17db      	asrs	r3, r3, #31
 8001b0a:	1ad3      	subs	r3, r2, r3
 8001b0c:	71fb      	strb	r3, [r7, #7]
			uint8_t r = i % 12;
 8001b0e:	697a      	ldr	r2, [r7, #20]
 8001b10:	4b76      	ldr	r3, [pc, #472]	; (8001cec <SensorCommand+0x224>)
 8001b12:	fb83 1302 	smull	r1, r3, r3, r2
 8001b16:	1059      	asrs	r1, r3, #1
 8001b18:	17d3      	asrs	r3, r2, #31
 8001b1a:	1ac9      	subs	r1, r1, r3
 8001b1c:	460b      	mov	r3, r1
 8001b1e:	005b      	lsls	r3, r3, #1
 8001b20:	440b      	add	r3, r1
 8001b22:	009b      	lsls	r3, r3, #2
 8001b24:	1ad1      	subs	r1, r2, r3
 8001b26:	460b      	mov	r3, r1
 8001b28:	71bb      	strb	r3, [r7, #6]
			uint8_t active_device = q * 2 + (r >= 8 ? 1 : 0);
 8001b2a:	79fb      	ldrb	r3, [r7, #7]
 8001b2c:	005b      	lsls	r3, r3, #1
 8001b2e:	b2db      	uxtb	r3, r3
 8001b30:	79ba      	ldrb	r2, [r7, #6]
 8001b32:	2a07      	cmp	r2, #7
 8001b34:	bf8c      	ite	hi
 8001b36:	2201      	movhi	r2, #1
 8001b38:	2200      	movls	r2, #0
 8001b3a:	b2d2      	uxtb	r2, r2
 8001b3c:	4413      	add	r3, r2
 8001b3e:	717b      	strb	r3, [r7, #5]
			uint8_t channel = (r >= 8) ? r - 8 : r;
 8001b40:	79bb      	ldrb	r3, [r7, #6]
 8001b42:	2b07      	cmp	r3, #7
 8001b44:	d903      	bls.n	8001b4e <SensorCommand+0x86>
 8001b46:	79bb      	ldrb	r3, [r7, #6]
 8001b48:	3b08      	subs	r3, #8
 8001b4a:	b2db      	uxtb	r3, r3
 8001b4c:	e000      	b.n	8001b50 <SensorCommand+0x88>
 8001b4e:	79bb      	ldrb	r3, [r7, #6]
 8001b50:	713b      	strb	r3, [r7, #4]
			ResetDevicesExcept(active_device);
 8001b52:	797b      	ldrb	r3, [r7, #5]
 8001b54:	4618      	mov	r0, r3
 8001b56:	f001 fcfd 	bl	8003554 <ResetDevicesExcept>
			setActiveTcaChannel(active_device, channel);
 8001b5a:	793a      	ldrb	r2, [r7, #4]
 8001b5c:	797b      	ldrb	r3, [r7, #5]
 8001b5e:	4611      	mov	r1, r2
 8001b60:	4618      	mov	r0, r3
 8001b62:	f001 fd29 	bl	80035b8 <setActiveTcaChannel>
			Dev = &vl53l0x_s[i];
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001b6c:	fb02 f303 	mul.w	r3, r2, r3
 8001b70:	4a5f      	ldr	r2, [pc, #380]	; (8001cf0 <SensorCommand+0x228>)
 8001b72:	4413      	add	r3, r2
 8001b74:	4a5f      	ldr	r2, [pc, #380]	; (8001cf4 <SensorCommand+0x22c>)
 8001b76:	6013      	str	r3, [r2, #0]
			VL53L0X_PerformContinuousRangingMeasurement(Dev, &RangingData); // 1500us
 8001b78:	4b5e      	ldr	r3, [pc, #376]	; (8001cf4 <SensorCommand+0x22c>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	495e      	ldr	r1, [pc, #376]	; (8001cf8 <SensorCommand+0x230>)
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f00a ff0c 	bl	800c99c <VL53L0X_PerformContinuousRangingMeasurement>
			if (RangingData.RangeStatus == 0) {
 8001b84:	4b5c      	ldr	r3, [pc, #368]	; (8001cf8 <SensorCommand+0x230>)
 8001b86:	7e1b      	ldrb	r3, [r3, #24]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d144      	bne.n	8001c16 <SensorCommand+0x14e>
			  if (RangingData.RangeMilliMeter < 80) {
 8001b8c:	4b5a      	ldr	r3, [pc, #360]	; (8001cf8 <SensorCommand+0x230>)
 8001b8e:	891b      	ldrh	r3, [r3, #8]
 8001b90:	2b4f      	cmp	r3, #79	; 0x4f
 8001b92:	d84f      	bhi.n	8001c34 <SensorCommand+0x16c>
				  float filteredValue = Kalman_Estimate(&filters[i], RangingData.RangeMilliMeter);
 8001b94:	697a      	ldr	r2, [r7, #20]
 8001b96:	4613      	mov	r3, r2
 8001b98:	009b      	lsls	r3, r3, #2
 8001b9a:	4413      	add	r3, r2
 8001b9c:	009b      	lsls	r3, r3, #2
 8001b9e:	4a57      	ldr	r2, [pc, #348]	; (8001cfc <SensorCommand+0x234>)
 8001ba0:	4413      	add	r3, r2
 8001ba2:	4a55      	ldr	r2, [pc, #340]	; (8001cf8 <SensorCommand+0x230>)
 8001ba4:	8912      	ldrh	r2, [r2, #8]
 8001ba6:	ee07 2a90 	vmov	s15, r2
 8001baa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001bae:	eeb0 0a67 	vmov.f32	s0, s15
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f7ff fd82 	bl	80016bc <Kalman_Estimate>
 8001bb8:	ed87 0a00 	vstr	s0, [r7]
				  HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%.1f ", filteredValue), 500);
 8001bbc:	6838      	ldr	r0, [r7, #0]
 8001bbe:	f7fe fcf3 	bl	80005a8 <__aeabi_f2d>
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	460b      	mov	r3, r1
 8001bc6:	494e      	ldr	r1, [pc, #312]	; (8001d00 <SensorCommand+0x238>)
 8001bc8:	4846      	ldr	r0, [pc, #280]	; (8001ce4 <SensorCommand+0x21c>)
 8001bca:	f00f f93d 	bl	8010e48 <siprintf>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	b29a      	uxth	r2, r3
 8001bd2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001bd6:	4943      	ldr	r1, [pc, #268]	; (8001ce4 <SensorCommand+0x21c>)
 8001bd8:	4843      	ldr	r0, [pc, #268]	; (8001ce8 <SensorCommand+0x220>)
 8001bda:	f007 ffcb 	bl	8009b74 <HAL_UART_Transmit>
				  sensorValues[i][readingCount[i]] = filteredValue;
 8001bde:	4a49      	ldr	r2, [pc, #292]	; (8001d04 <SensorCommand+0x23c>)
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001be6:	4948      	ldr	r1, [pc, #288]	; (8001d08 <SensorCommand+0x240>)
 8001be8:	697a      	ldr	r2, [r7, #20]
 8001bea:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001bee:	fb00 f202 	mul.w	r2, r0, r2
 8001bf2:	4413      	add	r3, r2
 8001bf4:	009b      	lsls	r3, r3, #2
 8001bf6:	440b      	add	r3, r1
 8001bf8:	683a      	ldr	r2, [r7, #0]
 8001bfa:	601a      	str	r2, [r3, #0]
				  readingCount[i]++;
 8001bfc:	4a41      	ldr	r2, [pc, #260]	; (8001d04 <SensorCommand+0x23c>)
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c04:	1c5a      	adds	r2, r3, #1
 8001c06:	493f      	ldr	r1, [pc, #252]	; (8001d04 <SensorCommand+0x23c>)
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				  sensorCount++;
 8001c0e:	7efb      	ldrb	r3, [r7, #27]
 8001c10:	3301      	adds	r3, #1
 8001c12:	76fb      	strb	r3, [r7, #27]
 8001c14:	e00e      	b.n	8001c34 <SensorCommand+0x16c>
			  }
			}else{
				  HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%d ", RangingData.RangeStatus), 500);
 8001c16:	4b38      	ldr	r3, [pc, #224]	; (8001cf8 <SensorCommand+0x230>)
 8001c18:	7e1b      	ldrb	r3, [r3, #24]
 8001c1a:	461a      	mov	r2, r3
 8001c1c:	493b      	ldr	r1, [pc, #236]	; (8001d0c <SensorCommand+0x244>)
 8001c1e:	4831      	ldr	r0, [pc, #196]	; (8001ce4 <SensorCommand+0x21c>)
 8001c20:	f00f f912 	bl	8010e48 <siprintf>
 8001c24:	4603      	mov	r3, r0
 8001c26:	b29a      	uxth	r2, r3
 8001c28:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001c2c:	492d      	ldr	r1, [pc, #180]	; (8001ce4 <SensorCommand+0x21c>)
 8001c2e:	482e      	ldr	r0, [pc, #184]	; (8001ce8 <SensorCommand+0x220>)
 8001c30:	f007 ffa0 	bl	8009b74 <HAL_UART_Transmit>
		for (int i = 0; i < NUM_SENSOR; i++) {
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	3301      	adds	r3, #1
 8001c38:	617b      	str	r3, [r7, #20]
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	2b17      	cmp	r3, #23
 8001c3e:	f77f af5e 	ble.w	8001afe <SensorCommand+0x36>
				  // 1 : Sigma Fail | 2 : Signal Fail | 3 : Min Range Fail | 4 : Phase Fail | 5 : Hardware Fail | 255 : No update
			  }
		}
		endTime = HAL_GetTick();
 8001c42:	f001 fd55 	bl	80036f0 <HAL_GetTick>
 8001c46:	60f8      	str	r0, [r7, #12]
		diffTime = endTime - startTime;
 8001c48:	68fa      	ldr	r2, [r7, #12]
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	1ad3      	subs	r3, r2, r3
 8001c4e:	60bb      	str	r3, [r7, #8]
		HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%lu ms ", diffTime), 100);
 8001c50:	68ba      	ldr	r2, [r7, #8]
 8001c52:	492f      	ldr	r1, [pc, #188]	; (8001d10 <SensorCommand+0x248>)
 8001c54:	4823      	ldr	r0, [pc, #140]	; (8001ce4 <SensorCommand+0x21c>)
 8001c56:	f00f f8f7 	bl	8010e48 <siprintf>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	b29a      	uxth	r2, r3
 8001c5e:	2364      	movs	r3, #100	; 0x64
 8001c60:	4920      	ldr	r1, [pc, #128]	; (8001ce4 <SensorCommand+0x21c>)
 8001c62:	4821      	ldr	r0, [pc, #132]	; (8001ce8 <SensorCommand+0x220>)
 8001c64:	f007 ff86 	bl	8009b74 <HAL_UART_Transmit>

		Hx711Data = Read_HX711();
 8001c68:	f7ff fbd6 	bl	8001418 <Read_HX711>
 8001c6c:	ee07 0a90 	vmov	s15, r0
 8001c70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c74:	4b27      	ldr	r3, [pc, #156]	; (8001d14 <SensorCommand+0x24c>)
 8001c76:	edc3 7a00 	vstr	s15, [r3]
		UART_SendWeight_g(Hx711Data,-1/1600.00f,10002); // Send the weight data over UART
 8001c7a:	4b26      	ldr	r3, [pc, #152]	; (8001d14 <SensorCommand+0x24c>)
 8001c7c:	edd3 7a00 	vldr	s15, [r3]
 8001c80:	ed9f 1a25 	vldr	s2, [pc, #148]	; 8001d18 <SensorCommand+0x250>
 8001c84:	eddf 0a25 	vldr	s1, [pc, #148]	; 8001d1c <SensorCommand+0x254>
 8001c88:	eeb0 0a67 	vmov.f32	s0, s15
 8001c8c:	f7ff fc12 	bl	80014b4 <UART_SendWeight_g>
		HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, " %d", sensorCount), 100);
 8001c90:	7efb      	ldrb	r3, [r7, #27]
 8001c92:	461a      	mov	r2, r3
 8001c94:	4922      	ldr	r1, [pc, #136]	; (8001d20 <SensorCommand+0x258>)
 8001c96:	4813      	ldr	r0, [pc, #76]	; (8001ce4 <SensorCommand+0x21c>)
 8001c98:	f00f f8d6 	bl	8010e48 <siprintf>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	b29a      	uxth	r2, r3
 8001ca0:	2364      	movs	r3, #100	; 0x64
 8001ca2:	4910      	ldr	r1, [pc, #64]	; (8001ce4 <SensorCommand+0x21c>)
 8001ca4:	4810      	ldr	r0, [pc, #64]	; (8001ce8 <SensorCommand+0x220>)
 8001ca6:	f007 ff65 	bl	8009b74 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "\n"), 100);
 8001caa:	491e      	ldr	r1, [pc, #120]	; (8001d24 <SensorCommand+0x25c>)
 8001cac:	480d      	ldr	r0, [pc, #52]	; (8001ce4 <SensorCommand+0x21c>)
 8001cae:	f00f f8cb 	bl	8010e48 <siprintf>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	b29a      	uxth	r2, r3
 8001cb6:	2364      	movs	r3, #100	; 0x64
 8001cb8:	490a      	ldr	r1, [pc, #40]	; (8001ce4 <SensorCommand+0x21c>)
 8001cba:	480b      	ldr	r0, [pc, #44]	; (8001ce8 <SensorCommand+0x220>)
 8001cbc:	f007 ff5a 	bl	8009b74 <HAL_UART_Transmit>
    for(int count =0; count < NUM_READINGS; count++){
 8001cc0:	69fb      	ldr	r3, [r7, #28]
 8001cc2:	3301      	adds	r3, #1
 8001cc4:	61fb      	str	r3, [r7, #28]
 8001cc6:	69fb      	ldr	r3, [r7, #28]
 8001cc8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001ccc:	f6ff af0f 	blt.w	8001aee <SensorCommand+0x26>

    }
    TransmitStats();
 8001cd0:	f7ff fa6a 	bl	80011a8 <TransmitStats>
    ResetSensorData();
 8001cd4:	f7ff fab4 	bl	8001240 <ResetSensorData>

}
 8001cd8:	bf00      	nop
 8001cda:	3720      	adds	r7, #32
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	08016354 	.word	0x08016354
 8001ce4:	200079f0 	.word	0x200079f0
 8001ce8:	20007a74 	.word	0x20007a74
 8001cec:	2aaaaaab 	.word	0x2aaaaaab
 8001cf0:	20007bc0 	.word	0x20007bc0
 8001cf4:	2000a140 	.word	0x2000a140
 8001cf8:	20007ba4 	.word	0x20007ba4
 8001cfc:	20007774 	.word	0x20007774
 8001d00:	08016364 	.word	0x08016364
 8001d04:	200076bc 	.word	0x200076bc
 8001d08:	2000057c 	.word	0x2000057c
 8001d0c:	0801636c 	.word	0x0801636c
 8001d10:	08016370 	.word	0x08016370
 8001d14:	2000771c 	.word	0x2000771c
 8001d18:	461c4800 	.word	0x461c4800
 8001d1c:	ba23d70a 	.word	0xba23d70a
 8001d20:	08016378 	.word	0x08016378
 8001d24:	0801637c 	.word	0x0801637c

08001d28 <AutoCommand>:

void AutoCommand(){
 8001d28:	b5b0      	push	{r4, r5, r7, lr}
 8001d2a:	b08e      	sub	sp, #56	; 0x38
 8001d2c:	af02      	add	r7, sp, #8


    HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "Auto Command \r\n"), 100);
 8001d2e:	499f      	ldr	r1, [pc, #636]	; (8001fac <AutoCommand+0x284>)
 8001d30:	489f      	ldr	r0, [pc, #636]	; (8001fb0 <AutoCommand+0x288>)
 8001d32:	f00f f889 	bl	8010e48 <siprintf>
 8001d36:	4603      	mov	r3, r0
 8001d38:	b29a      	uxth	r2, r3
 8001d3a:	2364      	movs	r3, #100	; 0x64
 8001d3c:	499c      	ldr	r1, [pc, #624]	; (8001fb0 <AutoCommand+0x288>)
 8001d3e:	489d      	ldr	r0, [pc, #628]	; (8001fb4 <AutoCommand+0x28c>)
 8001d40:	f007 ff18 	bl	8009b74 <HAL_UART_Transmit>


	ResetAllDevices();
 8001d44:	f001 fbda 	bl	80034fc <ResetAllDevices>
    for(int count =0; count < 100; count++){
 8001d48:	2300      	movs	r3, #0
 8001d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d4c:	e08c      	b.n	8001e68 <AutoCommand+0x140>
		for (int i = 0; i < NUM_SENSOR; i++) {
 8001d4e:	2300      	movs	r3, #0
 8001d50:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d52:	e082      	b.n	8001e5a <AutoCommand+0x132>
			uint8_t q = i / 12;
 8001d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d56:	4a98      	ldr	r2, [pc, #608]	; (8001fb8 <AutoCommand+0x290>)
 8001d58:	fb82 1203 	smull	r1, r2, r2, r3
 8001d5c:	1052      	asrs	r2, r2, #1
 8001d5e:	17db      	asrs	r3, r3, #31
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	72fb      	strb	r3, [r7, #11]
			uint8_t r = i % 12;
 8001d64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001d66:	4b94      	ldr	r3, [pc, #592]	; (8001fb8 <AutoCommand+0x290>)
 8001d68:	fb83 1302 	smull	r1, r3, r3, r2
 8001d6c:	1059      	asrs	r1, r3, #1
 8001d6e:	17d3      	asrs	r3, r2, #31
 8001d70:	1ac9      	subs	r1, r1, r3
 8001d72:	460b      	mov	r3, r1
 8001d74:	005b      	lsls	r3, r3, #1
 8001d76:	440b      	add	r3, r1
 8001d78:	009b      	lsls	r3, r3, #2
 8001d7a:	1ad1      	subs	r1, r2, r3
 8001d7c:	460b      	mov	r3, r1
 8001d7e:	72bb      	strb	r3, [r7, #10]
			uint8_t active_device = q * 2 + (r >= 8 ? 1 : 0);
 8001d80:	7afb      	ldrb	r3, [r7, #11]
 8001d82:	005b      	lsls	r3, r3, #1
 8001d84:	b2db      	uxtb	r3, r3
 8001d86:	7aba      	ldrb	r2, [r7, #10]
 8001d88:	2a07      	cmp	r2, #7
 8001d8a:	bf8c      	ite	hi
 8001d8c:	2201      	movhi	r2, #1
 8001d8e:	2200      	movls	r2, #0
 8001d90:	b2d2      	uxtb	r2, r2
 8001d92:	4413      	add	r3, r2
 8001d94:	727b      	strb	r3, [r7, #9]
			uint8_t channel = (r >= 8) ? r - 8 : r;
 8001d96:	7abb      	ldrb	r3, [r7, #10]
 8001d98:	2b07      	cmp	r3, #7
 8001d9a:	d903      	bls.n	8001da4 <AutoCommand+0x7c>
 8001d9c:	7abb      	ldrb	r3, [r7, #10]
 8001d9e:	3b08      	subs	r3, #8
 8001da0:	b2db      	uxtb	r3, r3
 8001da2:	e000      	b.n	8001da6 <AutoCommand+0x7e>
 8001da4:	7abb      	ldrb	r3, [r7, #10]
 8001da6:	723b      	strb	r3, [r7, #8]
			ResetDevicesExcept(active_device);
 8001da8:	7a7b      	ldrb	r3, [r7, #9]
 8001daa:	4618      	mov	r0, r3
 8001dac:	f001 fbd2 	bl	8003554 <ResetDevicesExcept>
			setActiveTcaChannel(active_device, channel);
 8001db0:	7a3a      	ldrb	r2, [r7, #8]
 8001db2:	7a7b      	ldrb	r3, [r7, #9]
 8001db4:	4611      	mov	r1, r2
 8001db6:	4618      	mov	r0, r3
 8001db8:	f001 fbfe 	bl	80035b8 <setActiveTcaChannel>
			Dev = &vl53l0x_s[i];
 8001dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dbe:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001dc2:	fb02 f303 	mul.w	r3, r2, r3
 8001dc6:	4a7d      	ldr	r2, [pc, #500]	; (8001fbc <AutoCommand+0x294>)
 8001dc8:	4413      	add	r3, r2
 8001dca:	4a7d      	ldr	r2, [pc, #500]	; (8001fc0 <AutoCommand+0x298>)
 8001dcc:	6013      	str	r3, [r2, #0]
			VL53L0X_PerformContinuousRangingMeasurement(Dev, &RangingData); // 1500us
 8001dce:	4b7c      	ldr	r3, [pc, #496]	; (8001fc0 <AutoCommand+0x298>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	497c      	ldr	r1, [pc, #496]	; (8001fc4 <AutoCommand+0x29c>)
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f00a fde1 	bl	800c99c <VL53L0X_PerformContinuousRangingMeasurement>
			if (RangingData.RangeStatus == 0) {
 8001dda:	4b7a      	ldr	r3, [pc, #488]	; (8001fc4 <AutoCommand+0x29c>)
 8001ddc:	7e1b      	ldrb	r3, [r3, #24]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d129      	bne.n	8001e36 <AutoCommand+0x10e>
			  if (RangingData.RangeMilliMeter < 80) {
 8001de2:	4b78      	ldr	r3, [pc, #480]	; (8001fc4 <AutoCommand+0x29c>)
 8001de4:	891b      	ldrh	r3, [r3, #8]
 8001de6:	2b4f      	cmp	r3, #79	; 0x4f
 8001de8:	d834      	bhi.n	8001e54 <AutoCommand+0x12c>
				  float filteredValue = Kalman_Estimate(&filters[i], RangingData.RangeMilliMeter);
 8001dea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001dec:	4613      	mov	r3, r2
 8001dee:	009b      	lsls	r3, r3, #2
 8001df0:	4413      	add	r3, r2
 8001df2:	009b      	lsls	r3, r3, #2
 8001df4:	4a74      	ldr	r2, [pc, #464]	; (8001fc8 <AutoCommand+0x2a0>)
 8001df6:	4413      	add	r3, r2
 8001df8:	4a72      	ldr	r2, [pc, #456]	; (8001fc4 <AutoCommand+0x29c>)
 8001dfa:	8912      	ldrh	r2, [r2, #8]
 8001dfc:	ee07 2a90 	vmov	s15, r2
 8001e00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e04:	eeb0 0a67 	vmov.f32	s0, s15
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f7ff fc57 	bl	80016bc <Kalman_Estimate>
 8001e0e:	ed87 0a01 	vstr	s0, [r7, #4]
				  HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%.1f ", filteredValue), 500);
 8001e12:	6878      	ldr	r0, [r7, #4]
 8001e14:	f7fe fbc8 	bl	80005a8 <__aeabi_f2d>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	460b      	mov	r3, r1
 8001e1c:	496b      	ldr	r1, [pc, #428]	; (8001fcc <AutoCommand+0x2a4>)
 8001e1e:	4864      	ldr	r0, [pc, #400]	; (8001fb0 <AutoCommand+0x288>)
 8001e20:	f00f f812 	bl	8010e48 <siprintf>
 8001e24:	4603      	mov	r3, r0
 8001e26:	b29a      	uxth	r2, r3
 8001e28:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001e2c:	4960      	ldr	r1, [pc, #384]	; (8001fb0 <AutoCommand+0x288>)
 8001e2e:	4861      	ldr	r0, [pc, #388]	; (8001fb4 <AutoCommand+0x28c>)
 8001e30:	f007 fea0 	bl	8009b74 <HAL_UART_Transmit>
 8001e34:	e00e      	b.n	8001e54 <AutoCommand+0x12c>
			  }
			}else{
				  HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%d ", RangingData.RangeStatus), 500);
 8001e36:	4b63      	ldr	r3, [pc, #396]	; (8001fc4 <AutoCommand+0x29c>)
 8001e38:	7e1b      	ldrb	r3, [r3, #24]
 8001e3a:	461a      	mov	r2, r3
 8001e3c:	4964      	ldr	r1, [pc, #400]	; (8001fd0 <AutoCommand+0x2a8>)
 8001e3e:	485c      	ldr	r0, [pc, #368]	; (8001fb0 <AutoCommand+0x288>)
 8001e40:	f00f f802 	bl	8010e48 <siprintf>
 8001e44:	4603      	mov	r3, r0
 8001e46:	b29a      	uxth	r2, r3
 8001e48:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001e4c:	4958      	ldr	r1, [pc, #352]	; (8001fb0 <AutoCommand+0x288>)
 8001e4e:	4859      	ldr	r0, [pc, #356]	; (8001fb4 <AutoCommand+0x28c>)
 8001e50:	f007 fe90 	bl	8009b74 <HAL_UART_Transmit>
		for (int i = 0; i < NUM_SENSOR; i++) {
 8001e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e56:	3301      	adds	r3, #1
 8001e58:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e5c:	2b17      	cmp	r3, #23
 8001e5e:	f77f af79 	ble.w	8001d54 <AutoCommand+0x2c>
    for(int count =0; count < 100; count++){
 8001e62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e64:	3301      	adds	r3, #1
 8001e66:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e6a:	2b63      	cmp	r3, #99	; 0x63
 8001e6c:	f77f af6f 	ble.w	8001d4e <AutoCommand+0x26>
    }




	HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "autoMode\r\n"), 100);
 8001e70:	4958      	ldr	r1, [pc, #352]	; (8001fd4 <AutoCommand+0x2ac>)
 8001e72:	484f      	ldr	r0, [pc, #316]	; (8001fb0 <AutoCommand+0x288>)
 8001e74:	f00e ffe8 	bl	8010e48 <siprintf>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	b29a      	uxth	r2, r3
 8001e7c:	2364      	movs	r3, #100	; 0x64
 8001e7e:	494c      	ldr	r1, [pc, #304]	; (8001fb0 <AutoCommand+0x288>)
 8001e80:	484c      	ldr	r0, [pc, #304]	; (8001fb4 <AutoCommand+0x28c>)
 8001e82:	f007 fe77 	bl	8009b74 <HAL_UART_Transmit>
	ResetAllDevices();
 8001e86:	f001 fb39 	bl	80034fc <ResetAllDevices>

	servo_angle(&htim2, TIM_CHANNEL_1, 1); // poking
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	2100      	movs	r1, #0
 8001e8e:	4852      	ldr	r0, [pc, #328]	; (8001fd8 <AutoCommand+0x2b0>)
 8001e90:	f000 ff0a 	bl	8002ca8 <servo_angle>
  	 for(int lin = 8; lin < 21; lin ++){
 8001e94:	2308      	movs	r3, #8
 8001e96:	627b      	str	r3, [r7, #36]	; 0x24
 8001e98:	e11f      	b.n	80020da <AutoCommand+0x3b2>
		 for(int rev = 0; rev < 18; rev++){
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	623b      	str	r3, [r7, #32]
 8001e9e:	e10a      	b.n	80020b6 <AutoCommand+0x38e>
			 for(int r = 0; r < 8; r++){
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	61fb      	str	r3, [r7, #28]
 8001ea4:	e0fd      	b.n	80020a2 <AutoCommand+0x37a>
				 servo_angle(&htim2, TIM_CHANNEL_1, r+2); // poking
 8001ea6:	69fb      	ldr	r3, [r7, #28]
 8001ea8:	3302      	adds	r3, #2
 8001eaa:	461a      	mov	r2, r3
 8001eac:	2100      	movs	r1, #0
 8001eae:	484a      	ldr	r0, [pc, #296]	; (8001fd8 <AutoCommand+0x2b0>)
 8001eb0:	f000 fefa 	bl	8002ca8 <servo_angle>
				 HAL_Delay(500);
 8001eb4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001eb8:	f001 fc26 	bl	8003708 <HAL_Delay>
				 for(int count = 0; count < 40; count++){
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	61bb      	str	r3, [r7, #24]
 8001ec0:	e0db      	b.n	800207a <AutoCommand+0x352>
					  for (int i = 0; i < NUM_SENSOR; i++) {
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	617b      	str	r3, [r7, #20]
 8001ec6:	e09b      	b.n	8002000 <AutoCommand+0x2d8>
						uint8_t q = i / 12;
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	4a3b      	ldr	r2, [pc, #236]	; (8001fb8 <AutoCommand+0x290>)
 8001ecc:	fb82 1203 	smull	r1, r2, r2, r3
 8001ed0:	1052      	asrs	r2, r2, #1
 8001ed2:	17db      	asrs	r3, r3, #31
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	74fb      	strb	r3, [r7, #19]
						uint8_t r = i % 12;
 8001ed8:	697a      	ldr	r2, [r7, #20]
 8001eda:	4b37      	ldr	r3, [pc, #220]	; (8001fb8 <AutoCommand+0x290>)
 8001edc:	fb83 1302 	smull	r1, r3, r3, r2
 8001ee0:	1059      	asrs	r1, r3, #1
 8001ee2:	17d3      	asrs	r3, r2, #31
 8001ee4:	1ac9      	subs	r1, r1, r3
 8001ee6:	460b      	mov	r3, r1
 8001ee8:	005b      	lsls	r3, r3, #1
 8001eea:	440b      	add	r3, r1
 8001eec:	009b      	lsls	r3, r3, #2
 8001eee:	1ad1      	subs	r1, r2, r3
 8001ef0:	460b      	mov	r3, r1
 8001ef2:	74bb      	strb	r3, [r7, #18]
						uint8_t active_device = q * 2 + (r >= 8 ? 1 : 0);
 8001ef4:	7cfb      	ldrb	r3, [r7, #19]
 8001ef6:	005b      	lsls	r3, r3, #1
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	7cba      	ldrb	r2, [r7, #18]
 8001efc:	2a07      	cmp	r2, #7
 8001efe:	bf8c      	ite	hi
 8001f00:	2201      	movhi	r2, #1
 8001f02:	2200      	movls	r2, #0
 8001f04:	b2d2      	uxtb	r2, r2
 8001f06:	4413      	add	r3, r2
 8001f08:	747b      	strb	r3, [r7, #17]
						uint8_t channel = (r >= 8) ? r - 8 : r;
 8001f0a:	7cbb      	ldrb	r3, [r7, #18]
 8001f0c:	2b07      	cmp	r3, #7
 8001f0e:	d903      	bls.n	8001f18 <AutoCommand+0x1f0>
 8001f10:	7cbb      	ldrb	r3, [r7, #18]
 8001f12:	3b08      	subs	r3, #8
 8001f14:	b2db      	uxtb	r3, r3
 8001f16:	e000      	b.n	8001f1a <AutoCommand+0x1f2>
 8001f18:	7cbb      	ldrb	r3, [r7, #18]
 8001f1a:	743b      	strb	r3, [r7, #16]
						ResetDevicesExcept(active_device);
 8001f1c:	7c7b      	ldrb	r3, [r7, #17]
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f001 fb18 	bl	8003554 <ResetDevicesExcept>
				        setActiveTcaChannel(active_device,channel);
 8001f24:	7c3a      	ldrb	r2, [r7, #16]
 8001f26:	7c7b      	ldrb	r3, [r7, #17]
 8001f28:	4611      	mov	r1, r2
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f001 fb44 	bl	80035b8 <setActiveTcaChannel>
						Dev = &vl53l0x_s[i];
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001f36:	fb02 f303 	mul.w	r3, r2, r3
 8001f3a:	4a20      	ldr	r2, [pc, #128]	; (8001fbc <AutoCommand+0x294>)
 8001f3c:	4413      	add	r3, r2
 8001f3e:	4a20      	ldr	r2, [pc, #128]	; (8001fc0 <AutoCommand+0x298>)
 8001f40:	6013      	str	r3, [r2, #0]
						VL53L0X_PerformContinuousRangingMeasurement(Dev, &RangingData); // 1500us
 8001f42:	4b1f      	ldr	r3, [pc, #124]	; (8001fc0 <AutoCommand+0x298>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	491f      	ldr	r1, [pc, #124]	; (8001fc4 <AutoCommand+0x29c>)
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f00a fd27 	bl	800c99c <VL53L0X_PerformContinuousRangingMeasurement>
						if (RangingData.RangeStatus == 0) {
 8001f4e:	4b1d      	ldr	r3, [pc, #116]	; (8001fc4 <AutoCommand+0x29c>)
 8001f50:	7e1b      	ldrb	r3, [r3, #24]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d142      	bne.n	8001fdc <AutoCommand+0x2b4>
						  if (RangingData.RangeMilliMeter < 80) {
 8001f56:	4b1b      	ldr	r3, [pc, #108]	; (8001fc4 <AutoCommand+0x29c>)
 8001f58:	891b      	ldrh	r3, [r3, #8]
 8001f5a:	2b4f      	cmp	r3, #79	; 0x4f
 8001f5c:	d84d      	bhi.n	8001ffa <AutoCommand+0x2d2>
							  float filteredValue = Kalman_Estimate(&filters[i], RangingData.RangeMilliMeter);
 8001f5e:	697a      	ldr	r2, [r7, #20]
 8001f60:	4613      	mov	r3, r2
 8001f62:	009b      	lsls	r3, r3, #2
 8001f64:	4413      	add	r3, r2
 8001f66:	009b      	lsls	r3, r3, #2
 8001f68:	4a17      	ldr	r2, [pc, #92]	; (8001fc8 <AutoCommand+0x2a0>)
 8001f6a:	4413      	add	r3, r2
 8001f6c:	4a15      	ldr	r2, [pc, #84]	; (8001fc4 <AutoCommand+0x29c>)
 8001f6e:	8912      	ldrh	r2, [r2, #8]
 8001f70:	ee07 2a90 	vmov	s15, r2
 8001f74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f78:	eeb0 0a67 	vmov.f32	s0, s15
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f7ff fb9d 	bl	80016bc <Kalman_Estimate>
 8001f82:	ed87 0a03 	vstr	s0, [r7, #12]
							  HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%.1f ", filteredValue), 500);
 8001f86:	68f8      	ldr	r0, [r7, #12]
 8001f88:	f7fe fb0e 	bl	80005a8 <__aeabi_f2d>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	460b      	mov	r3, r1
 8001f90:	490e      	ldr	r1, [pc, #56]	; (8001fcc <AutoCommand+0x2a4>)
 8001f92:	4807      	ldr	r0, [pc, #28]	; (8001fb0 <AutoCommand+0x288>)
 8001f94:	f00e ff58 	bl	8010e48 <siprintf>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	b29a      	uxth	r2, r3
 8001f9c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001fa0:	4903      	ldr	r1, [pc, #12]	; (8001fb0 <AutoCommand+0x288>)
 8001fa2:	4804      	ldr	r0, [pc, #16]	; (8001fb4 <AutoCommand+0x28c>)
 8001fa4:	f007 fde6 	bl	8009b74 <HAL_UART_Transmit>
 8001fa8:	e027      	b.n	8001ffa <AutoCommand+0x2d2>
 8001faa:	bf00      	nop
 8001fac:	08016380 	.word	0x08016380
 8001fb0:	200079f0 	.word	0x200079f0
 8001fb4:	20007a74 	.word	0x20007a74
 8001fb8:	2aaaaaab 	.word	0x2aaaaaab
 8001fbc:	20007bc0 	.word	0x20007bc0
 8001fc0:	2000a140 	.word	0x2000a140
 8001fc4:	20007ba4 	.word	0x20007ba4
 8001fc8:	20007774 	.word	0x20007774
 8001fcc:	08016364 	.word	0x08016364
 8001fd0:	0801636c 	.word	0x0801636c
 8001fd4:	08016390 	.word	0x08016390
 8001fd8:	20007958 	.word	0x20007958
						  }
						}else{
							  HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%d ", RangingData.RangeStatus), 500);
 8001fdc:	4b46      	ldr	r3, [pc, #280]	; (80020f8 <AutoCommand+0x3d0>)
 8001fde:	7e1b      	ldrb	r3, [r3, #24]
 8001fe0:	461a      	mov	r2, r3
 8001fe2:	4946      	ldr	r1, [pc, #280]	; (80020fc <AutoCommand+0x3d4>)
 8001fe4:	4846      	ldr	r0, [pc, #280]	; (8002100 <AutoCommand+0x3d8>)
 8001fe6:	f00e ff2f 	bl	8010e48 <siprintf>
 8001fea:	4603      	mov	r3, r0
 8001fec:	b29a      	uxth	r2, r3
 8001fee:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001ff2:	4943      	ldr	r1, [pc, #268]	; (8002100 <AutoCommand+0x3d8>)
 8001ff4:	4843      	ldr	r0, [pc, #268]	; (8002104 <AutoCommand+0x3dc>)
 8001ff6:	f007 fdbd 	bl	8009b74 <HAL_UART_Transmit>
					  for (int i = 0; i < NUM_SENSOR; i++) {
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	3301      	adds	r3, #1
 8001ffe:	617b      	str	r3, [r7, #20]
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	2b17      	cmp	r3, #23
 8002004:	f77f af60 	ble.w	8001ec8 <AutoCommand+0x1a0>
							  // 1 : Sigma Fail | 2 : Signal Fail | 3 : Min Range Fail | 4 : Phase Fail | 5 : Hardware Fail | 255 : No update
						  }
					  }

				  Hx711Data = Read_HX711();
 8002008:	f7ff fa06 	bl	8001418 <Read_HX711>
 800200c:	ee07 0a90 	vmov	s15, r0
 8002010:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002014:	4b3c      	ldr	r3, [pc, #240]	; (8002108 <AutoCommand+0x3e0>)
 8002016:	edc3 7a00 	vstr	s15, [r3]
				  UART_SendWeight_g(Hx711Data,-1/1600.00f,10002); // Send the weight data over UART
 800201a:	4b3b      	ldr	r3, [pc, #236]	; (8002108 <AutoCommand+0x3e0>)
 800201c:	edd3 7a00 	vldr	s15, [r3]
 8002020:	ed9f 1a3a 	vldr	s2, [pc, #232]	; 800210c <AutoCommand+0x3e4>
 8002024:	eddf 0a3a 	vldr	s1, [pc, #232]	; 8002110 <AutoCommand+0x3e8>
 8002028:	eeb0 0a67 	vmov.f32	s0, s15
 800202c:	f7ff fa42 	bl	80014b4 <UART_SendWeight_g>
				  HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, " %d %d %.2f\n", 8*lin, 20*rev, r*0.8), 500);
 8002030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002032:	00dc      	lsls	r4, r3, #3
 8002034:	6a3a      	ldr	r2, [r7, #32]
 8002036:	4613      	mov	r3, r2
 8002038:	009b      	lsls	r3, r3, #2
 800203a:	4413      	add	r3, r2
 800203c:	009b      	lsls	r3, r3, #2
 800203e:	461d      	mov	r5, r3
 8002040:	69f8      	ldr	r0, [r7, #28]
 8002042:	f7fe fa9f 	bl	8000584 <__aeabi_i2d>
 8002046:	a32a      	add	r3, pc, #168	; (adr r3, 80020f0 <AutoCommand+0x3c8>)
 8002048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800204c:	f7fe fb04 	bl	8000658 <__aeabi_dmul>
 8002050:	4602      	mov	r2, r0
 8002052:	460b      	mov	r3, r1
 8002054:	e9cd 2300 	strd	r2, r3, [sp]
 8002058:	462b      	mov	r3, r5
 800205a:	4622      	mov	r2, r4
 800205c:	492d      	ldr	r1, [pc, #180]	; (8002114 <AutoCommand+0x3ec>)
 800205e:	4828      	ldr	r0, [pc, #160]	; (8002100 <AutoCommand+0x3d8>)
 8002060:	f00e fef2 	bl	8010e48 <siprintf>
 8002064:	4603      	mov	r3, r0
 8002066:	b29a      	uxth	r2, r3
 8002068:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800206c:	4924      	ldr	r1, [pc, #144]	; (8002100 <AutoCommand+0x3d8>)
 800206e:	4825      	ldr	r0, [pc, #148]	; (8002104 <AutoCommand+0x3dc>)
 8002070:	f007 fd80 	bl	8009b74 <HAL_UART_Transmit>
				 for(int count = 0; count < 40; count++){
 8002074:	69bb      	ldr	r3, [r7, #24]
 8002076:	3301      	adds	r3, #1
 8002078:	61bb      	str	r3, [r7, #24]
 800207a:	69bb      	ldr	r3, [r7, #24]
 800207c:	2b27      	cmp	r3, #39	; 0x27
 800207e:	f77f af20 	ble.w	8001ec2 <AutoCommand+0x19a>
				 }
			 HAL_Delay(500);
 8002082:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002086:	f001 fb3f 	bl	8003708 <HAL_Delay>
			 servo_angle(&htim2, TIM_CHANNEL_1, 0); // turn to origin
 800208a:	2200      	movs	r2, #0
 800208c:	2100      	movs	r1, #0
 800208e:	4822      	ldr	r0, [pc, #136]	; (8002118 <AutoCommand+0x3f0>)
 8002090:	f000 fe0a 	bl	8002ca8 <servo_angle>
			 HAL_Delay(500);
 8002094:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002098:	f001 fb36 	bl	8003708 <HAL_Delay>
			 for(int r = 0; r < 8; r++){
 800209c:	69fb      	ldr	r3, [r7, #28]
 800209e:	3301      	adds	r3, #1
 80020a0:	61fb      	str	r3, [r7, #28]
 80020a2:	69fb      	ldr	r3, [r7, #28]
 80020a4:	2b07      	cmp	r3, #7
 80020a6:	f77f aefe 	ble.w	8001ea6 <AutoCommand+0x17e>
			 }
			 stepRev(20); // revolution
 80020aa:	2014      	movs	r0, #20
 80020ac:	f000 fcf8 	bl	8002aa0 <stepRev>
		 for(int rev = 0; rev < 18; rev++){
 80020b0:	6a3b      	ldr	r3, [r7, #32]
 80020b2:	3301      	adds	r3, #1
 80020b4:	623b      	str	r3, [r7, #32]
 80020b6:	6a3b      	ldr	r3, [r7, #32]
 80020b8:	2b11      	cmp	r3, #17
 80020ba:	f77f aef1 	ble.w	8001ea0 <AutoCommand+0x178>
		 }
		 HAL_Delay(500);
 80020be:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80020c2:	f001 fb21 	bl	8003708 <HAL_Delay>
		 stepRev(-360);
 80020c6:	4815      	ldr	r0, [pc, #84]	; (800211c <AutoCommand+0x3f4>)
 80020c8:	f000 fcea 	bl	8002aa0 <stepRev>
		 stepLin(-8); // moving horizontal
 80020cc:	f06f 0007 	mvn.w	r0, #7
 80020d0:	f000 fd50 	bl	8002b74 <stepLin>
  	 for(int lin = 8; lin < 21; lin ++){
 80020d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d6:	3301      	adds	r3, #1
 80020d8:	627b      	str	r3, [r7, #36]	; 0x24
 80020da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020dc:	2b14      	cmp	r3, #20
 80020de:	f77f aedc 	ble.w	8001e9a <AutoCommand+0x172>
  	 }
}
 80020e2:	bf00      	nop
 80020e4:	bf00      	nop
 80020e6:	3730      	adds	r7, #48	; 0x30
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bdb0      	pop	{r4, r5, r7, pc}
 80020ec:	f3af 8000 	nop.w
 80020f0:	9999999a 	.word	0x9999999a
 80020f4:	3fe99999 	.word	0x3fe99999
 80020f8:	20007ba4 	.word	0x20007ba4
 80020fc:	0801636c 	.word	0x0801636c
 8002100:	200079f0 	.word	0x200079f0
 8002104:	20007a74 	.word	0x20007a74
 8002108:	2000771c 	.word	0x2000771c
 800210c:	461c4800 	.word	0x461c4800
 8002110:	ba23d70a 	.word	0xba23d70a
 8002114:	0801639c 	.word	0x0801639c
 8002118:	20007958 	.word	0x20007958
 800211c:	fffffe98 	.word	0xfffffe98

08002120 <InitializaionCalibrationCommand>:

void InitializaionCalibrationCommand()
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b086      	sub	sp, #24
 8002124:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "InitializationCommand\n\r"), 100);
 8002126:	49b3      	ldr	r1, [pc, #716]	; (80023f4 <InitializaionCalibrationCommand+0x2d4>)
 8002128:	48b3      	ldr	r0, [pc, #716]	; (80023f8 <InitializaionCalibrationCommand+0x2d8>)
 800212a:	f00e fe8d 	bl	8010e48 <siprintf>
 800212e:	4603      	mov	r3, r0
 8002130:	b29a      	uxth	r2, r3
 8002132:	2364      	movs	r3, #100	; 0x64
 8002134:	49b0      	ldr	r1, [pc, #704]	; (80023f8 <InitializaionCalibrationCommand+0x2d8>)
 8002136:	48b1      	ldr	r0, [pc, #708]	; (80023fc <InitializaionCalibrationCommand+0x2dc>)
 8002138:	f007 fd1c 	bl	8009b74 <HAL_UART_Transmit>

	ResetAllDevices();
 800213c:	f001 f9de 	bl	80034fc <ResetAllDevices>
  	for (int i = 0; i < NUM_SENSOR; i++) {
 8002140:	2300      	movs	r3, #0
 8002142:	617b      	str	r3, [r7, #20]
 8002144:	e10b      	b.n	800235e <InitializaionCalibrationCommand+0x23e>
  	    uint8_t q = i / 12;
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	4aad      	ldr	r2, [pc, #692]	; (8002400 <InitializaionCalibrationCommand+0x2e0>)
 800214a:	fb82 1203 	smull	r1, r2, r2, r3
 800214e:	1052      	asrs	r2, r2, #1
 8002150:	17db      	asrs	r3, r3, #31
 8002152:	1ad3      	subs	r3, r2, r3
 8002154:	70fb      	strb	r3, [r7, #3]
  	    uint8_t r = i % 12;
 8002156:	697a      	ldr	r2, [r7, #20]
 8002158:	4ba9      	ldr	r3, [pc, #676]	; (8002400 <InitializaionCalibrationCommand+0x2e0>)
 800215a:	fb83 1302 	smull	r1, r3, r3, r2
 800215e:	1059      	asrs	r1, r3, #1
 8002160:	17d3      	asrs	r3, r2, #31
 8002162:	1ac9      	subs	r1, r1, r3
 8002164:	460b      	mov	r3, r1
 8002166:	005b      	lsls	r3, r3, #1
 8002168:	440b      	add	r3, r1
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	1ad1      	subs	r1, r2, r3
 800216e:	460b      	mov	r3, r1
 8002170:	70bb      	strb	r3, [r7, #2]
  	    uint8_t active_device = q * 2 + (r >= 8 ? 1 : 0);
 8002172:	78fb      	ldrb	r3, [r7, #3]
 8002174:	005b      	lsls	r3, r3, #1
 8002176:	b2db      	uxtb	r3, r3
 8002178:	78ba      	ldrb	r2, [r7, #2]
 800217a:	2a07      	cmp	r2, #7
 800217c:	bf8c      	ite	hi
 800217e:	2201      	movhi	r2, #1
 8002180:	2200      	movls	r2, #0
 8002182:	b2d2      	uxtb	r2, r2
 8002184:	4413      	add	r3, r2
 8002186:	707b      	strb	r3, [r7, #1]
  	    uint8_t channel = (r >= 8) ? r - 8 : r;
 8002188:	78bb      	ldrb	r3, [r7, #2]
 800218a:	2b07      	cmp	r3, #7
 800218c:	d903      	bls.n	8002196 <InitializaionCalibrationCommand+0x76>
 800218e:	78bb      	ldrb	r3, [r7, #2]
 8002190:	3b08      	subs	r3, #8
 8002192:	b2db      	uxtb	r3, r3
 8002194:	e000      	b.n	8002198 <InitializaionCalibrationCommand+0x78>
 8002196:	78bb      	ldrb	r3, [r7, #2]
 8002198:	703b      	strb	r3, [r7, #0]

        ResetDevicesExcept(active_device);
 800219a:	787b      	ldrb	r3, [r7, #1]
 800219c:	4618      	mov	r0, r3
 800219e:	f001 f9d9 	bl	8003554 <ResetDevicesExcept>
        setActiveTcaChannel(active_device,channel);
 80021a2:	783a      	ldrb	r2, [r7, #0]
 80021a4:	787b      	ldrb	r3, [r7, #1]
 80021a6:	4611      	mov	r1, r2
 80021a8:	4618      	mov	r0, r3
 80021aa:	f001 fa05 	bl	80035b8 <setActiveTcaChannel>

  		Dev = &vl53l0x_s[i];
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80021b4:	fb02 f303 	mul.w	r3, r2, r3
 80021b8:	4a92      	ldr	r2, [pc, #584]	; (8002404 <InitializaionCalibrationCommand+0x2e4>)
 80021ba:	4413      	add	r3, r2
 80021bc:	4a92      	ldr	r2, [pc, #584]	; (8002408 <InitializaionCalibrationCommand+0x2e8>)
 80021be:	6013      	str	r3, [r2, #0]
  		Dev->I2cHandle = &hi2c1;
 80021c0:	4b91      	ldr	r3, [pc, #580]	; (8002408 <InitializaionCalibrationCommand+0x2e8>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a91      	ldr	r2, [pc, #580]	; (800240c <InitializaionCalibrationCommand+0x2ec>)
 80021c6:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  		Dev->I2cDevAddr = VL53L0X_ADDR;
 80021ca:	4b8f      	ldr	r3, [pc, #572]	; (8002408 <InitializaionCalibrationCommand+0x2e8>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	2252      	movs	r2, #82	; 0x52
 80021d0:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160

  		VL53L0X_WaitDeviceBooted( Dev );
 80021d4:	4b8c      	ldr	r3, [pc, #560]	; (8002408 <InitializaionCalibrationCommand+0x2e8>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4618      	mov	r0, r3
 80021da:	f009 f9ed 	bl	800b5b8 <VL53L0X_WaitDeviceBooted>
  		VL53L0X_DataInit( Dev );
 80021de:	4b8a      	ldr	r3, [pc, #552]	; (8002408 <InitializaionCalibrationCommand+0x2e8>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4618      	mov	r0, r3
 80021e4:	f008 ff02 	bl	800afec <VL53L0X_DataInit>
  		VL53L0X_StaticInit( Dev );
 80021e8:	4b87      	ldr	r3, [pc, #540]	; (8002408 <InitializaionCalibrationCommand+0x2e8>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4618      	mov	r0, r3
 80021ee:	f009 f861 	bl	800b2b4 <VL53L0X_StaticInit>
  		VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_CONTINUOUS_RANGING);
 80021f2:	4b85      	ldr	r3, [pc, #532]	; (8002408 <InitializaionCalibrationCommand+0x2e8>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	2101      	movs	r1, #1
 80021f8:	4618      	mov	r0, r3
 80021fa:	f009 fa7b 	bl	800b6f4 <VL53L0X_SetDeviceMode>

  		VL53L0X_PerformRefSpadManagement( Dev, &refSpadCount[i], &isApertureSpads[i]);
 80021fe:	4b82      	ldr	r3, [pc, #520]	; (8002408 <InitializaionCalibrationCommand+0x2e8>)
 8002200:	6818      	ldr	r0, [r3, #0]
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	009b      	lsls	r3, r3, #2
 8002206:	4a82      	ldr	r2, [pc, #520]	; (8002410 <InitializaionCalibrationCommand+0x2f0>)
 8002208:	1899      	adds	r1, r3, r2
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	4a81      	ldr	r2, [pc, #516]	; (8002414 <InitializaionCalibrationCommand+0x2f4>)
 800220e:	4413      	add	r3, r2
 8002210:	461a      	mov	r2, r3
 8002212:	f00a fbae 	bl	800c972 <VL53L0X_PerformRefSpadManagement>
  		VL53L0X_PerformRefCalibration( Dev, &VhvSettings[i], &PhaseCal[i]);
 8002216:	4b7c      	ldr	r3, [pc, #496]	; (8002408 <InitializaionCalibrationCommand+0x2e8>)
 8002218:	6818      	ldr	r0, [r3, #0]
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	4a7e      	ldr	r2, [pc, #504]	; (8002418 <InitializaionCalibrationCommand+0x2f8>)
 800221e:	1899      	adds	r1, r3, r2
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	4a7e      	ldr	r2, [pc, #504]	; (800241c <InitializaionCalibrationCommand+0x2fc>)
 8002224:	4413      	add	r3, r2
 8002226:	461a      	mov	r2, r3
 8002228:	f009 fefe 	bl	800c028 <VL53L0X_PerformRefCalibration>

  		refSpadCountHost[i] = refSpadCount[i];
 800222c:	4a78      	ldr	r2, [pc, #480]	; (8002410 <InitializaionCalibrationCommand+0x2f0>)
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002234:	497a      	ldr	r1, [pc, #488]	; (8002420 <InitializaionCalibrationCommand+0x300>)
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  		isApertureSpadsHost[i] = isApertureSpads[i];
 800223c:	4a75      	ldr	r2, [pc, #468]	; (8002414 <InitializaionCalibrationCommand+0x2f4>)
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	4413      	add	r3, r2
 8002242:	7819      	ldrb	r1, [r3, #0]
 8002244:	4a77      	ldr	r2, [pc, #476]	; (8002424 <InitializaionCalibrationCommand+0x304>)
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	4413      	add	r3, r2
 800224a:	460a      	mov	r2, r1
 800224c:	701a      	strb	r2, [r3, #0]
  		VhvSettingsHost[i] = VhvSettings[i];
 800224e:	4a72      	ldr	r2, [pc, #456]	; (8002418 <InitializaionCalibrationCommand+0x2f8>)
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	4413      	add	r3, r2
 8002254:	7819      	ldrb	r1, [r3, #0]
 8002256:	4a74      	ldr	r2, [pc, #464]	; (8002428 <InitializaionCalibrationCommand+0x308>)
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	4413      	add	r3, r2
 800225c:	460a      	mov	r2, r1
 800225e:	701a      	strb	r2, [r3, #0]
  		PhaseCalHost[i] = PhaseCal[i];
 8002260:	4a6e      	ldr	r2, [pc, #440]	; (800241c <InitializaionCalibrationCommand+0x2fc>)
 8002262:	697b      	ldr	r3, [r7, #20]
 8002264:	4413      	add	r3, r2
 8002266:	7819      	ldrb	r1, [r3, #0]
 8002268:	4a70      	ldr	r2, [pc, #448]	; (800242c <InitializaionCalibrationCommand+0x30c>)
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	4413      	add	r3, r2
 800226e:	460a      	mov	r2, r1
 8002270:	701a      	strb	r2, [r3, #0]

  		VL53L0X_SetLimitCheckEnable( Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, 1);
 8002272:	4b65      	ldr	r3, [pc, #404]	; (8002408 <InitializaionCalibrationCommand+0x2e8>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	2201      	movs	r2, #1
 8002278:	2100      	movs	r1, #0
 800227a:	4618      	mov	r0, r3
 800227c:	f009 fcce 	bl	800bc1c <VL53L0X_SetLimitCheckEnable>
  		VL53L0X_SetLimitCheckEnable( Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, 1);
 8002280:	4b61      	ldr	r3, [pc, #388]	; (8002408 <InitializaionCalibrationCommand+0x2e8>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	2201      	movs	r2, #1
 8002286:	2101      	movs	r1, #1
 8002288:	4618      	mov	r0, r3
 800228a:	f009 fcc7 	bl	800bc1c <VL53L0X_SetLimitCheckEnable>
  		VL53L0X_SetLimitCheckValue( Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, (FixPoint1616_t)(0.1*65536));
 800228e:	4b5e      	ldr	r3, [pc, #376]	; (8002408 <InitializaionCalibrationCommand+0x2e8>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f641 1299 	movw	r2, #6553	; 0x1999
 8002296:	2101      	movs	r1, #1
 8002298:	4618      	mov	r0, r3
 800229a:	f009 fd6f 	bl	800bd7c <VL53L0X_SetLimitCheckValue>
  		VL53L0X_SetLimitCheckValue( Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, (FixPoint1616_t)(60*65536));
 800229e:	4b5a      	ldr	r3, [pc, #360]	; (8002408 <InitializaionCalibrationCommand+0x2e8>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80022a6:	2100      	movs	r1, #0
 80022a8:	4618      	mov	r0, r3
 80022aa:	f009 fd67 	bl	800bd7c <VL53L0X_SetLimitCheckValue>
  		VL53L0X_SetMeasurementTimingBudgetMicroSeconds( Dev, 33000);
 80022ae:	4b56      	ldr	r3, [pc, #344]	; (8002408 <InitializaionCalibrationCommand+0x2e8>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f248 01e8 	movw	r1, #33000	; 0x80e8
 80022b6:	4618      	mov	r0, r3
 80022b8:	f009 fa7a 	bl	800b7b0 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
  		VL53L0X_SetVcselPulsePeriod( Dev, VL53L0X_VCSEL_PERIOD_PRE_RANGE, 18);
 80022bc:	4b52      	ldr	r3, [pc, #328]	; (8002408 <InitializaionCalibrationCommand+0x2e8>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	2212      	movs	r2, #18
 80022c2:	2100      	movs	r1, #0
 80022c4:	4618      	mov	r0, r3
 80022c6:	f009 fa99 	bl	800b7fc <VL53L0X_SetVcselPulsePeriod>
  		VL53L0X_SetVcselPulsePeriod( Dev, VL53L0X_VCSEL_PERIOD_FINAL_RANGE, 14);
 80022ca:	4b4f      	ldr	r3, [pc, #316]	; (8002408 <InitializaionCalibrationCommand+0x2e8>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	220e      	movs	r2, #14
 80022d0:	2101      	movs	r1, #1
 80022d2:	4618      	mov	r0, r3
 80022d4:	f009 fa92 	bl	800b7fc <VL53L0X_SetVcselPulsePeriod>

		Kalman_Init(&filters[i], Q, R, P, 0);  // Q, R, P, 초기값
 80022d8:	697a      	ldr	r2, [r7, #20]
 80022da:	4613      	mov	r3, r2
 80022dc:	009b      	lsls	r3, r3, #2
 80022de:	4413      	add	r3, r2
 80022e0:	009b      	lsls	r3, r3, #2
 80022e2:	4a53      	ldr	r2, [pc, #332]	; (8002430 <InitializaionCalibrationCommand+0x310>)
 80022e4:	4413      	add	r3, r2
 80022e6:	4a53      	ldr	r2, [pc, #332]	; (8002434 <InitializaionCalibrationCommand+0x314>)
 80022e8:	edd2 7a00 	vldr	s15, [r2]
 80022ec:	4a52      	ldr	r2, [pc, #328]	; (8002438 <InitializaionCalibrationCommand+0x318>)
 80022ee:	ed92 7a00 	vldr	s14, [r2]
 80022f2:	4a52      	ldr	r2, [pc, #328]	; (800243c <InitializaionCalibrationCommand+0x31c>)
 80022f4:	edd2 6a00 	vldr	s13, [r2]
 80022f8:	eddf 1a51 	vldr	s3, [pc, #324]	; 8002440 <InitializaionCalibrationCommand+0x320>
 80022fc:	eeb0 1a66 	vmov.f32	s2, s13
 8002300:	eef0 0a47 	vmov.f32	s1, s14
 8002304:	eeb0 0a67 	vmov.f32	s0, s15
 8002308:	4618      	mov	r0, r3
 800230a:	f7ff f9b9 	bl	8001680 <Kalman_Init>

 		HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%02d ",i), 100);
 800230e:	697a      	ldr	r2, [r7, #20]
 8002310:	494c      	ldr	r1, [pc, #304]	; (8002444 <InitializaionCalibrationCommand+0x324>)
 8002312:	4839      	ldr	r0, [pc, #228]	; (80023f8 <InitializaionCalibrationCommand+0x2d8>)
 8002314:	f00e fd98 	bl	8010e48 <siprintf>
 8002318:	4603      	mov	r3, r0
 800231a:	b29a      	uxth	r2, r3
 800231c:	2364      	movs	r3, #100	; 0x64
 800231e:	4936      	ldr	r1, [pc, #216]	; (80023f8 <InitializaionCalibrationCommand+0x2d8>)
 8002320:	4836      	ldr	r0, [pc, #216]	; (80023fc <InitializaionCalibrationCommand+0x2dc>)
 8002322:	f007 fc27 	bl	8009b74 <HAL_UART_Transmit>
 		if(i%12 ==11){HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "\n\r"), 100);}
 8002326:	6979      	ldr	r1, [r7, #20]
 8002328:	4b35      	ldr	r3, [pc, #212]	; (8002400 <InitializaionCalibrationCommand+0x2e0>)
 800232a:	fb83 2301 	smull	r2, r3, r3, r1
 800232e:	105a      	asrs	r2, r3, #1
 8002330:	17cb      	asrs	r3, r1, #31
 8002332:	1ad2      	subs	r2, r2, r3
 8002334:	4613      	mov	r3, r2
 8002336:	005b      	lsls	r3, r3, #1
 8002338:	4413      	add	r3, r2
 800233a:	009b      	lsls	r3, r3, #2
 800233c:	1aca      	subs	r2, r1, r3
 800233e:	2a0b      	cmp	r2, #11
 8002340:	d10a      	bne.n	8002358 <InitializaionCalibrationCommand+0x238>
 8002342:	4941      	ldr	r1, [pc, #260]	; (8002448 <InitializaionCalibrationCommand+0x328>)
 8002344:	482c      	ldr	r0, [pc, #176]	; (80023f8 <InitializaionCalibrationCommand+0x2d8>)
 8002346:	f00e fd7f 	bl	8010e48 <siprintf>
 800234a:	4603      	mov	r3, r0
 800234c:	b29a      	uxth	r2, r3
 800234e:	2364      	movs	r3, #100	; 0x64
 8002350:	4929      	ldr	r1, [pc, #164]	; (80023f8 <InitializaionCalibrationCommand+0x2d8>)
 8002352:	482a      	ldr	r0, [pc, #168]	; (80023fc <InitializaionCalibrationCommand+0x2dc>)
 8002354:	f007 fc0e 	bl	8009b74 <HAL_UART_Transmit>
  	for (int i = 0; i < NUM_SENSOR; i++) {
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	3301      	adds	r3, #1
 800235c:	617b      	str	r3, [r7, #20]
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	2b17      	cmp	r3, #23
 8002362:	f77f aef0 	ble.w	8002146 <InitializaionCalibrationCommand+0x26>
  	}


	HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "uint32_t refSpadCountHost[NUM_SENSOR]={"), 100);
 8002366:	4939      	ldr	r1, [pc, #228]	; (800244c <InitializaionCalibrationCommand+0x32c>)
 8002368:	4823      	ldr	r0, [pc, #140]	; (80023f8 <InitializaionCalibrationCommand+0x2d8>)
 800236a:	f00e fd6d 	bl	8010e48 <siprintf>
 800236e:	4603      	mov	r3, r0
 8002370:	b29a      	uxth	r2, r3
 8002372:	2364      	movs	r3, #100	; 0x64
 8002374:	4920      	ldr	r1, [pc, #128]	; (80023f8 <InitializaionCalibrationCommand+0x2d8>)
 8002376:	4821      	ldr	r0, [pc, #132]	; (80023fc <InitializaionCalibrationCommand+0x2dc>)
 8002378:	f007 fbfc 	bl	8009b74 <HAL_UART_Transmit>
	for (int i = 0; i < NUM_SENSOR; i++){
 800237c:	2300      	movs	r3, #0
 800237e:	613b      	str	r3, [r7, #16]
 8002380:	e026      	b.n	80023d0 <InitializaionCalibrationCommand+0x2b0>
		if(i < NUM_SENSOR - 1){
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	2b16      	cmp	r3, #22
 8002386:	dc10      	bgt.n	80023aa <InitializaionCalibrationCommand+0x28a>
			HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%lu,",refSpadCount[i]), 100);
 8002388:	4a21      	ldr	r2, [pc, #132]	; (8002410 <InitializaionCalibrationCommand+0x2f0>)
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002390:	461a      	mov	r2, r3
 8002392:	492f      	ldr	r1, [pc, #188]	; (8002450 <InitializaionCalibrationCommand+0x330>)
 8002394:	4818      	ldr	r0, [pc, #96]	; (80023f8 <InitializaionCalibrationCommand+0x2d8>)
 8002396:	f00e fd57 	bl	8010e48 <siprintf>
 800239a:	4603      	mov	r3, r0
 800239c:	b29a      	uxth	r2, r3
 800239e:	2364      	movs	r3, #100	; 0x64
 80023a0:	4915      	ldr	r1, [pc, #84]	; (80023f8 <InitializaionCalibrationCommand+0x2d8>)
 80023a2:	4816      	ldr	r0, [pc, #88]	; (80023fc <InitializaionCalibrationCommand+0x2dc>)
 80023a4:	f007 fbe6 	bl	8009b74 <HAL_UART_Transmit>
 80023a8:	e00f      	b.n	80023ca <InitializaionCalibrationCommand+0x2aa>
		} else {
			HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%lu};\n",refSpadCount[i]), 100);
 80023aa:	4a19      	ldr	r2, [pc, #100]	; (8002410 <InitializaionCalibrationCommand+0x2f0>)
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023b2:	461a      	mov	r2, r3
 80023b4:	4927      	ldr	r1, [pc, #156]	; (8002454 <InitializaionCalibrationCommand+0x334>)
 80023b6:	4810      	ldr	r0, [pc, #64]	; (80023f8 <InitializaionCalibrationCommand+0x2d8>)
 80023b8:	f00e fd46 	bl	8010e48 <siprintf>
 80023bc:	4603      	mov	r3, r0
 80023be:	b29a      	uxth	r2, r3
 80023c0:	2364      	movs	r3, #100	; 0x64
 80023c2:	490d      	ldr	r1, [pc, #52]	; (80023f8 <InitializaionCalibrationCommand+0x2d8>)
 80023c4:	480d      	ldr	r0, [pc, #52]	; (80023fc <InitializaionCalibrationCommand+0x2dc>)
 80023c6:	f007 fbd5 	bl	8009b74 <HAL_UART_Transmit>
	for (int i = 0; i < NUM_SENSOR; i++){
 80023ca:	693b      	ldr	r3, [r7, #16]
 80023cc:	3301      	adds	r3, #1
 80023ce:	613b      	str	r3, [r7, #16]
 80023d0:	693b      	ldr	r3, [r7, #16]
 80023d2:	2b17      	cmp	r3, #23
 80023d4:	ddd5      	ble.n	8002382 <InitializaionCalibrationCommand+0x262>
		}
	}

	HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "uint8_t isApertureSpadsHost[NUM_SENSOR]={"), 100);
 80023d6:	4920      	ldr	r1, [pc, #128]	; (8002458 <InitializaionCalibrationCommand+0x338>)
 80023d8:	4807      	ldr	r0, [pc, #28]	; (80023f8 <InitializaionCalibrationCommand+0x2d8>)
 80023da:	f00e fd35 	bl	8010e48 <siprintf>
 80023de:	4603      	mov	r3, r0
 80023e0:	b29a      	uxth	r2, r3
 80023e2:	2364      	movs	r3, #100	; 0x64
 80023e4:	4904      	ldr	r1, [pc, #16]	; (80023f8 <InitializaionCalibrationCommand+0x2d8>)
 80023e6:	4805      	ldr	r0, [pc, #20]	; (80023fc <InitializaionCalibrationCommand+0x2dc>)
 80023e8:	f007 fbc4 	bl	8009b74 <HAL_UART_Transmit>
	for (int i = 0; i < NUM_SENSOR; i++){
 80023ec:	2300      	movs	r3, #0
 80023ee:	60fb      	str	r3, [r7, #12]
 80023f0:	e05b      	b.n	80024aa <InitializaionCalibrationCommand+0x38a>
 80023f2:	bf00      	nop
 80023f4:	080163ac 	.word	0x080163ac
 80023f8:	200079f0 	.word	0x200079f0
 80023fc:	20007a74 	.word	0x20007a74
 8002400:	2aaaaaab 	.word	0x2aaaaaab
 8002404:	20007bc0 	.word	0x20007bc0
 8002408:	2000a140 	.word	0x2000a140
 800240c:	20007720 	.word	0x20007720
 8002410:	20007afc 	.word	0x20007afc
 8002414:	20007b5c 	.word	0x20007b5c
 8002418:	20007b74 	.word	0x20007b74
 800241c:	20007b8c 	.word	0x20007b8c
 8002420:	20000010 	.word	0x20000010
 8002424:	20000070 	.word	0x20000070
 8002428:	20000088 	.word	0x20000088
 800242c:	200000a0 	.word	0x200000a0
 8002430:	20007774 	.word	0x20007774
 8002434:	20000000 	.word	0x20000000
 8002438:	20000004 	.word	0x20000004
 800243c:	20000008 	.word	0x20000008
 8002440:	00000000 	.word	0x00000000
 8002444:	080163c4 	.word	0x080163c4
 8002448:	080163cc 	.word	0x080163cc
 800244c:	080163d0 	.word	0x080163d0
 8002450:	080163f8 	.word	0x080163f8
 8002454:	08016400 	.word	0x08016400
 8002458:	08016408 	.word	0x08016408
		if(i < NUM_SENSOR - 1){
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	2b16      	cmp	r3, #22
 8002460:	dc10      	bgt.n	8002484 <InitializaionCalibrationCommand+0x364>
			HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%d,",isApertureSpads[i]), 100);
 8002462:	4a4e      	ldr	r2, [pc, #312]	; (800259c <InitializaionCalibrationCommand+0x47c>)
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	4413      	add	r3, r2
 8002468:	781b      	ldrb	r3, [r3, #0]
 800246a:	461a      	mov	r2, r3
 800246c:	494c      	ldr	r1, [pc, #304]	; (80025a0 <InitializaionCalibrationCommand+0x480>)
 800246e:	484d      	ldr	r0, [pc, #308]	; (80025a4 <InitializaionCalibrationCommand+0x484>)
 8002470:	f00e fcea 	bl	8010e48 <siprintf>
 8002474:	4603      	mov	r3, r0
 8002476:	b29a      	uxth	r2, r3
 8002478:	2364      	movs	r3, #100	; 0x64
 800247a:	494a      	ldr	r1, [pc, #296]	; (80025a4 <InitializaionCalibrationCommand+0x484>)
 800247c:	484a      	ldr	r0, [pc, #296]	; (80025a8 <InitializaionCalibrationCommand+0x488>)
 800247e:	f007 fb79 	bl	8009b74 <HAL_UART_Transmit>
 8002482:	e00f      	b.n	80024a4 <InitializaionCalibrationCommand+0x384>
		} else {
			HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%d};\n",isApertureSpads[i]), 100);
 8002484:	4a45      	ldr	r2, [pc, #276]	; (800259c <InitializaionCalibrationCommand+0x47c>)
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	4413      	add	r3, r2
 800248a:	781b      	ldrb	r3, [r3, #0]
 800248c:	461a      	mov	r2, r3
 800248e:	4947      	ldr	r1, [pc, #284]	; (80025ac <InitializaionCalibrationCommand+0x48c>)
 8002490:	4844      	ldr	r0, [pc, #272]	; (80025a4 <InitializaionCalibrationCommand+0x484>)
 8002492:	f00e fcd9 	bl	8010e48 <siprintf>
 8002496:	4603      	mov	r3, r0
 8002498:	b29a      	uxth	r2, r3
 800249a:	2364      	movs	r3, #100	; 0x64
 800249c:	4941      	ldr	r1, [pc, #260]	; (80025a4 <InitializaionCalibrationCommand+0x484>)
 800249e:	4842      	ldr	r0, [pc, #264]	; (80025a8 <InitializaionCalibrationCommand+0x488>)
 80024a0:	f007 fb68 	bl	8009b74 <HAL_UART_Transmit>
	for (int i = 0; i < NUM_SENSOR; i++){
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	3301      	adds	r3, #1
 80024a8:	60fb      	str	r3, [r7, #12]
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	2b17      	cmp	r3, #23
 80024ae:	ddd5      	ble.n	800245c <InitializaionCalibrationCommand+0x33c>
		}
	}

	HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "uint8_t VhvSettingsHost[NUM_SENSOR]={"), 100);
 80024b0:	493f      	ldr	r1, [pc, #252]	; (80025b0 <InitializaionCalibrationCommand+0x490>)
 80024b2:	483c      	ldr	r0, [pc, #240]	; (80025a4 <InitializaionCalibrationCommand+0x484>)
 80024b4:	f00e fcc8 	bl	8010e48 <siprintf>
 80024b8:	4603      	mov	r3, r0
 80024ba:	b29a      	uxth	r2, r3
 80024bc:	2364      	movs	r3, #100	; 0x64
 80024be:	4939      	ldr	r1, [pc, #228]	; (80025a4 <InitializaionCalibrationCommand+0x484>)
 80024c0:	4839      	ldr	r0, [pc, #228]	; (80025a8 <InitializaionCalibrationCommand+0x488>)
 80024c2:	f007 fb57 	bl	8009b74 <HAL_UART_Transmit>
	for (int i = 0; i < NUM_SENSOR; i++){
 80024c6:	2300      	movs	r3, #0
 80024c8:	60bb      	str	r3, [r7, #8]
 80024ca:	e026      	b.n	800251a <InitializaionCalibrationCommand+0x3fa>
		if(i < NUM_SENSOR - 1){
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	2b16      	cmp	r3, #22
 80024d0:	dc10      	bgt.n	80024f4 <InitializaionCalibrationCommand+0x3d4>
			HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%d,",VhvSettings[i]), 100);
 80024d2:	4a38      	ldr	r2, [pc, #224]	; (80025b4 <InitializaionCalibrationCommand+0x494>)
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	4413      	add	r3, r2
 80024d8:	781b      	ldrb	r3, [r3, #0]
 80024da:	461a      	mov	r2, r3
 80024dc:	4930      	ldr	r1, [pc, #192]	; (80025a0 <InitializaionCalibrationCommand+0x480>)
 80024de:	4831      	ldr	r0, [pc, #196]	; (80025a4 <InitializaionCalibrationCommand+0x484>)
 80024e0:	f00e fcb2 	bl	8010e48 <siprintf>
 80024e4:	4603      	mov	r3, r0
 80024e6:	b29a      	uxth	r2, r3
 80024e8:	2364      	movs	r3, #100	; 0x64
 80024ea:	492e      	ldr	r1, [pc, #184]	; (80025a4 <InitializaionCalibrationCommand+0x484>)
 80024ec:	482e      	ldr	r0, [pc, #184]	; (80025a8 <InitializaionCalibrationCommand+0x488>)
 80024ee:	f007 fb41 	bl	8009b74 <HAL_UART_Transmit>
 80024f2:	e00f      	b.n	8002514 <InitializaionCalibrationCommand+0x3f4>
		} else {
			HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%d};\n",VhvSettings[i]), 100);
 80024f4:	4a2f      	ldr	r2, [pc, #188]	; (80025b4 <InitializaionCalibrationCommand+0x494>)
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	4413      	add	r3, r2
 80024fa:	781b      	ldrb	r3, [r3, #0]
 80024fc:	461a      	mov	r2, r3
 80024fe:	492b      	ldr	r1, [pc, #172]	; (80025ac <InitializaionCalibrationCommand+0x48c>)
 8002500:	4828      	ldr	r0, [pc, #160]	; (80025a4 <InitializaionCalibrationCommand+0x484>)
 8002502:	f00e fca1 	bl	8010e48 <siprintf>
 8002506:	4603      	mov	r3, r0
 8002508:	b29a      	uxth	r2, r3
 800250a:	2364      	movs	r3, #100	; 0x64
 800250c:	4925      	ldr	r1, [pc, #148]	; (80025a4 <InitializaionCalibrationCommand+0x484>)
 800250e:	4826      	ldr	r0, [pc, #152]	; (80025a8 <InitializaionCalibrationCommand+0x488>)
 8002510:	f007 fb30 	bl	8009b74 <HAL_UART_Transmit>
	for (int i = 0; i < NUM_SENSOR; i++){
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	3301      	adds	r3, #1
 8002518:	60bb      	str	r3, [r7, #8]
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	2b17      	cmp	r3, #23
 800251e:	ddd5      	ble.n	80024cc <InitializaionCalibrationCommand+0x3ac>
		}
	}

	HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "uint8_t PhaseCalHost[NUM_SENSOR]={"), 100);
 8002520:	4925      	ldr	r1, [pc, #148]	; (80025b8 <InitializaionCalibrationCommand+0x498>)
 8002522:	4820      	ldr	r0, [pc, #128]	; (80025a4 <InitializaionCalibrationCommand+0x484>)
 8002524:	f00e fc90 	bl	8010e48 <siprintf>
 8002528:	4603      	mov	r3, r0
 800252a:	b29a      	uxth	r2, r3
 800252c:	2364      	movs	r3, #100	; 0x64
 800252e:	491d      	ldr	r1, [pc, #116]	; (80025a4 <InitializaionCalibrationCommand+0x484>)
 8002530:	481d      	ldr	r0, [pc, #116]	; (80025a8 <InitializaionCalibrationCommand+0x488>)
 8002532:	f007 fb1f 	bl	8009b74 <HAL_UART_Transmit>
	for (int i = 0; i < NUM_SENSOR; i++){
 8002536:	2300      	movs	r3, #0
 8002538:	607b      	str	r3, [r7, #4]
 800253a:	e026      	b.n	800258a <InitializaionCalibrationCommand+0x46a>
		if(i < NUM_SENSOR - 1){
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2b16      	cmp	r3, #22
 8002540:	dc10      	bgt.n	8002564 <InitializaionCalibrationCommand+0x444>
			HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%d,",PhaseCal[i]), 100);
 8002542:	4a1e      	ldr	r2, [pc, #120]	; (80025bc <InitializaionCalibrationCommand+0x49c>)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	4413      	add	r3, r2
 8002548:	781b      	ldrb	r3, [r3, #0]
 800254a:	461a      	mov	r2, r3
 800254c:	4914      	ldr	r1, [pc, #80]	; (80025a0 <InitializaionCalibrationCommand+0x480>)
 800254e:	4815      	ldr	r0, [pc, #84]	; (80025a4 <InitializaionCalibrationCommand+0x484>)
 8002550:	f00e fc7a 	bl	8010e48 <siprintf>
 8002554:	4603      	mov	r3, r0
 8002556:	b29a      	uxth	r2, r3
 8002558:	2364      	movs	r3, #100	; 0x64
 800255a:	4912      	ldr	r1, [pc, #72]	; (80025a4 <InitializaionCalibrationCommand+0x484>)
 800255c:	4812      	ldr	r0, [pc, #72]	; (80025a8 <InitializaionCalibrationCommand+0x488>)
 800255e:	f007 fb09 	bl	8009b74 <HAL_UART_Transmit>
 8002562:	e00f      	b.n	8002584 <InitializaionCalibrationCommand+0x464>
		} else {
			HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%d};\n",PhaseCal[i]), 100);
 8002564:	4a15      	ldr	r2, [pc, #84]	; (80025bc <InitializaionCalibrationCommand+0x49c>)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	4413      	add	r3, r2
 800256a:	781b      	ldrb	r3, [r3, #0]
 800256c:	461a      	mov	r2, r3
 800256e:	490f      	ldr	r1, [pc, #60]	; (80025ac <InitializaionCalibrationCommand+0x48c>)
 8002570:	480c      	ldr	r0, [pc, #48]	; (80025a4 <InitializaionCalibrationCommand+0x484>)
 8002572:	f00e fc69 	bl	8010e48 <siprintf>
 8002576:	4603      	mov	r3, r0
 8002578:	b29a      	uxth	r2, r3
 800257a:	2364      	movs	r3, #100	; 0x64
 800257c:	4909      	ldr	r1, [pc, #36]	; (80025a4 <InitializaionCalibrationCommand+0x484>)
 800257e:	480a      	ldr	r0, [pc, #40]	; (80025a8 <InitializaionCalibrationCommand+0x488>)
 8002580:	f007 faf8 	bl	8009b74 <HAL_UART_Transmit>
	for (int i = 0; i < NUM_SENSOR; i++){
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	3301      	adds	r3, #1
 8002588:	607b      	str	r3, [r7, #4]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2b17      	cmp	r3, #23
 800258e:	ddd5      	ble.n	800253c <InitializaionCalibrationCommand+0x41c>
		}
	}


}
 8002590:	bf00      	nop
 8002592:	bf00      	nop
 8002594:	3718      	adds	r7, #24
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	20007b5c 	.word	0x20007b5c
 80025a0:	08016434 	.word	0x08016434
 80025a4:	200079f0 	.word	0x200079f0
 80025a8:	20007a74 	.word	0x20007a74
 80025ac:	08016438 	.word	0x08016438
 80025b0:	08016440 	.word	0x08016440
 80025b4:	20007b74 	.word	0x20007b74
 80025b8:	08016468 	.word	0x08016468
 80025bc:	20007b8c 	.word	0x20007b8c

080025c0 <CalibrationCommand>:

void CalibrationCommand() {
 80025c0:	b480      	push	{r7}
 80025c2:	af00      	add	r7, sp, #0
}
 80025c4:	bf00      	nop
 80025c6:	46bd      	mov	sp, r7
 80025c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025cc:	4770      	bx	lr
	...

080025d0 <SetSensorCommand>:
void AvgStdCommand() {
}
void SetSensorCommand(){
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b082      	sub	sp, #8
 80025d4:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "SetCommand\n\r"), 100);
 80025d6:	49a2      	ldr	r1, [pc, #648]	; (8002860 <SetSensorCommand+0x290>)
 80025d8:	48a2      	ldr	r0, [pc, #648]	; (8002864 <SetSensorCommand+0x294>)
 80025da:	f00e fc35 	bl	8010e48 <siprintf>
 80025de:	4603      	mov	r3, r0
 80025e0:	b29a      	uxth	r2, r3
 80025e2:	2364      	movs	r3, #100	; 0x64
 80025e4:	499f      	ldr	r1, [pc, #636]	; (8002864 <SetSensorCommand+0x294>)
 80025e6:	48a0      	ldr	r0, [pc, #640]	; (8002868 <SetSensorCommand+0x298>)
 80025e8:	f007 fac4 	bl	8009b74 <HAL_UART_Transmit>

	ResetAllDevices();
 80025ec:	f000 ff86 	bl	80034fc <ResetAllDevices>
  	for (int i = 0; i < NUM_SENSOR; i++) {
 80025f0:	2300      	movs	r3, #0
 80025f2:	607b      	str	r3, [r7, #4]
 80025f4:	e12b      	b.n	800284e <SetSensorCommand+0x27e>
  	    uint8_t q = i / 12;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	4a9c      	ldr	r2, [pc, #624]	; (800286c <SetSensorCommand+0x29c>)
 80025fa:	fb82 1203 	smull	r1, r2, r2, r3
 80025fe:	1052      	asrs	r2, r2, #1
 8002600:	17db      	asrs	r3, r3, #31
 8002602:	1ad3      	subs	r3, r2, r3
 8002604:	70fb      	strb	r3, [r7, #3]
  	    uint8_t r = i % 12;
 8002606:	687a      	ldr	r2, [r7, #4]
 8002608:	4b98      	ldr	r3, [pc, #608]	; (800286c <SetSensorCommand+0x29c>)
 800260a:	fb83 1302 	smull	r1, r3, r3, r2
 800260e:	1059      	asrs	r1, r3, #1
 8002610:	17d3      	asrs	r3, r2, #31
 8002612:	1ac9      	subs	r1, r1, r3
 8002614:	460b      	mov	r3, r1
 8002616:	005b      	lsls	r3, r3, #1
 8002618:	440b      	add	r3, r1
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	1ad1      	subs	r1, r2, r3
 800261e:	460b      	mov	r3, r1
 8002620:	70bb      	strb	r3, [r7, #2]
  	    uint8_t active_device = q * 2 + (r >= 8 ? 1 : 0);
 8002622:	78fb      	ldrb	r3, [r7, #3]
 8002624:	005b      	lsls	r3, r3, #1
 8002626:	b2db      	uxtb	r3, r3
 8002628:	78ba      	ldrb	r2, [r7, #2]
 800262a:	2a07      	cmp	r2, #7
 800262c:	bf8c      	ite	hi
 800262e:	2201      	movhi	r2, #1
 8002630:	2200      	movls	r2, #0
 8002632:	b2d2      	uxtb	r2, r2
 8002634:	4413      	add	r3, r2
 8002636:	707b      	strb	r3, [r7, #1]
  	    uint8_t channel = (r >= 8) ? r - 8 : r;
 8002638:	78bb      	ldrb	r3, [r7, #2]
 800263a:	2b07      	cmp	r3, #7
 800263c:	d903      	bls.n	8002646 <SetSensorCommand+0x76>
 800263e:	78bb      	ldrb	r3, [r7, #2]
 8002640:	3b08      	subs	r3, #8
 8002642:	b2db      	uxtb	r3, r3
 8002644:	e000      	b.n	8002648 <SetSensorCommand+0x78>
 8002646:	78bb      	ldrb	r3, [r7, #2]
 8002648:	703b      	strb	r3, [r7, #0]

        ResetDevicesExcept(active_device);
 800264a:	787b      	ldrb	r3, [r7, #1]
 800264c:	4618      	mov	r0, r3
 800264e:	f000 ff81 	bl	8003554 <ResetDevicesExcept>
        setActiveTcaChannel(active_device,channel);
 8002652:	783a      	ldrb	r2, [r7, #0]
 8002654:	787b      	ldrb	r3, [r7, #1]
 8002656:	4611      	mov	r1, r2
 8002658:	4618      	mov	r0, r3
 800265a:	f000 ffad 	bl	80035b8 <setActiveTcaChannel>

  		Dev = &vl53l0x_s[i];
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002664:	fb02 f303 	mul.w	r3, r2, r3
 8002668:	4a81      	ldr	r2, [pc, #516]	; (8002870 <SetSensorCommand+0x2a0>)
 800266a:	4413      	add	r3, r2
 800266c:	4a81      	ldr	r2, [pc, #516]	; (8002874 <SetSensorCommand+0x2a4>)
 800266e:	6013      	str	r3, [r2, #0]
  		Dev->I2cHandle = &hi2c1;
 8002670:	4b80      	ldr	r3, [pc, #512]	; (8002874 <SetSensorCommand+0x2a4>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a80      	ldr	r2, [pc, #512]	; (8002878 <SetSensorCommand+0x2a8>)
 8002676:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  		Dev->I2cDevAddr = VL53L0X_ADDR;
 800267a:	4b7e      	ldr	r3, [pc, #504]	; (8002874 <SetSensorCommand+0x2a4>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	2252      	movs	r2, #82	; 0x52
 8002680:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160

  		VL53L0X_WaitDeviceBooted( Dev );
 8002684:	4b7b      	ldr	r3, [pc, #492]	; (8002874 <SetSensorCommand+0x2a4>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4618      	mov	r0, r3
 800268a:	f008 ff95 	bl	800b5b8 <VL53L0X_WaitDeviceBooted>
  		VL53L0X_DataInit( Dev );
 800268e:	4b79      	ldr	r3, [pc, #484]	; (8002874 <SetSensorCommand+0x2a4>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4618      	mov	r0, r3
 8002694:	f008 fcaa 	bl	800afec <VL53L0X_DataInit>
  		VL53L0X_StaticInit( Dev );
 8002698:	4b76      	ldr	r3, [pc, #472]	; (8002874 <SetSensorCommand+0x2a4>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4618      	mov	r0, r3
 800269e:	f008 fe09 	bl	800b2b4 <VL53L0X_StaticInit>
  		VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_CONTINUOUS_RANGING);
 80026a2:	4b74      	ldr	r3, [pc, #464]	; (8002874 <SetSensorCommand+0x2a4>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	2101      	movs	r1, #1
 80026a8:	4618      	mov	r0, r3
 80026aa:	f009 f823 	bl	800b6f4 <VL53L0X_SetDeviceMode>

		VL53L0X_SetReferenceSpads(Dev, refSpadCountHost[i], isApertureSpadsHost[i]);
 80026ae:	4b71      	ldr	r3, [pc, #452]	; (8002874 <SetSensorCommand+0x2a4>)
 80026b0:	6818      	ldr	r0, [r3, #0]
 80026b2:	4a72      	ldr	r2, [pc, #456]	; (800287c <SetSensorCommand+0x2ac>)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80026ba:	4a71      	ldr	r2, [pc, #452]	; (8002880 <SetSensorCommand+0x2b0>)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	4413      	add	r3, r2
 80026c0:	781b      	ldrb	r3, [r3, #0]
 80026c2:	461a      	mov	r2, r3
 80026c4:	f00a f93e 	bl	800c944 <VL53L0X_SetReferenceSpads>
  		VL53L0X_SetRefCalibration(Dev, VhvSettingsHost[i], PhaseCalHost[i]);
 80026c8:	4b6a      	ldr	r3, [pc, #424]	; (8002874 <SetSensorCommand+0x2a4>)
 80026ca:	6818      	ldr	r0, [r3, #0]
 80026cc:	4a6d      	ldr	r2, [pc, #436]	; (8002884 <SetSensorCommand+0x2b4>)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	4413      	add	r3, r2
 80026d2:	7819      	ldrb	r1, [r3, #0]
 80026d4:	4a6c      	ldr	r2, [pc, #432]	; (8002888 <SetSensorCommand+0x2b8>)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	4413      	add	r3, r2
 80026da:	781b      	ldrb	r3, [r3, #0]
 80026dc:	461a      	mov	r2, r3
 80026de:	f009 fa85 	bl	800bbec <VL53L0X_SetRefCalibration>


  		VL53L0X_SetLimitCheckEnable(Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, 1);
 80026e2:	4b64      	ldr	r3, [pc, #400]	; (8002874 <SetSensorCommand+0x2a4>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	2201      	movs	r2, #1
 80026e8:	2100      	movs	r1, #0
 80026ea:	4618      	mov	r0, r3
 80026ec:	f009 fa96 	bl	800bc1c <VL53L0X_SetLimitCheckEnable>
  		VL53L0X_SetLimitCheckEnable(Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, 1);
 80026f0:	4b60      	ldr	r3, [pc, #384]	; (8002874 <SetSensorCommand+0x2a4>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	2201      	movs	r2, #1
 80026f6:	2101      	movs	r1, #1
 80026f8:	4618      	mov	r0, r3
 80026fa:	f009 fa8f 	bl	800bc1c <VL53L0X_SetLimitCheckEnable>
  		VL53L0X_SetLimitCheckValue(Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, (FixPoint1616_t)(0.1*65536));
 80026fe:	4b5d      	ldr	r3, [pc, #372]	; (8002874 <SetSensorCommand+0x2a4>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f641 1299 	movw	r2, #6553	; 0x1999
 8002706:	2101      	movs	r1, #1
 8002708:	4618      	mov	r0, r3
 800270a:	f009 fb37 	bl	800bd7c <VL53L0X_SetLimitCheckValue>
  		VL53L0X_SetLimitCheckValue(Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, (FixPoint1616_t)(60*65536));
 800270e:	4b59      	ldr	r3, [pc, #356]	; (8002874 <SetSensorCommand+0x2a4>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002716:	2100      	movs	r1, #0
 8002718:	4618      	mov	r0, r3
 800271a:	f009 fb2f 	bl	800bd7c <VL53L0X_SetLimitCheckValue>
  		VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev, 33000);
 800271e:	4b55      	ldr	r3, [pc, #340]	; (8002874 <SetSensorCommand+0x2a4>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f248 01e8 	movw	r1, #33000	; 0x80e8
 8002726:	4618      	mov	r0, r3
 8002728:	f009 f842 	bl	800b7b0 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
  		VL53L0X_SetVcselPulsePeriod(Dev, VL53L0X_VCSEL_PERIOD_PRE_RANGE, 18);
 800272c:	4b51      	ldr	r3, [pc, #324]	; (8002874 <SetSensorCommand+0x2a4>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	2212      	movs	r2, #18
 8002732:	2100      	movs	r1, #0
 8002734:	4618      	mov	r0, r3
 8002736:	f009 f861 	bl	800b7fc <VL53L0X_SetVcselPulsePeriod>
  		VL53L0X_SetVcselPulsePeriod(Dev, VL53L0X_VCSEL_PERIOD_FINAL_RANGE, 14);
 800273a:	4b4e      	ldr	r3, [pc, #312]	; (8002874 <SetSensorCommand+0x2a4>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	220e      	movs	r2, #14
 8002740:	2101      	movs	r1, #1
 8002742:	4618      	mov	r0, r3
 8002744:	f009 f85a 	bl	800b7fc <VL53L0X_SetVcselPulsePeriod>

		Kalman_Init(&filters[i], Q, R, P, 0);  // Q, R, P, 초기값
 8002748:	687a      	ldr	r2, [r7, #4]
 800274a:	4613      	mov	r3, r2
 800274c:	009b      	lsls	r3, r3, #2
 800274e:	4413      	add	r3, r2
 8002750:	009b      	lsls	r3, r3, #2
 8002752:	4a4e      	ldr	r2, [pc, #312]	; (800288c <SetSensorCommand+0x2bc>)
 8002754:	4413      	add	r3, r2
 8002756:	4a4e      	ldr	r2, [pc, #312]	; (8002890 <SetSensorCommand+0x2c0>)
 8002758:	edd2 7a00 	vldr	s15, [r2]
 800275c:	4a4d      	ldr	r2, [pc, #308]	; (8002894 <SetSensorCommand+0x2c4>)
 800275e:	ed92 7a00 	vldr	s14, [r2]
 8002762:	4a4d      	ldr	r2, [pc, #308]	; (8002898 <SetSensorCommand+0x2c8>)
 8002764:	edd2 6a00 	vldr	s13, [r2]
 8002768:	eddf 1a4c 	vldr	s3, [pc, #304]	; 800289c <SetSensorCommand+0x2cc>
 800276c:	eeb0 1a66 	vmov.f32	s2, s13
 8002770:	eef0 0a47 	vmov.f32	s1, s14
 8002774:	eeb0 0a67 	vmov.f32	s0, s15
 8002778:	4618      	mov	r0, r3
 800277a:	f7fe ff81 	bl	8001680 <Kalman_Init>

 		HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%02d:(",i), 100);
 800277e:	687a      	ldr	r2, [r7, #4]
 8002780:	4947      	ldr	r1, [pc, #284]	; (80028a0 <SetSensorCommand+0x2d0>)
 8002782:	4838      	ldr	r0, [pc, #224]	; (8002864 <SetSensorCommand+0x294>)
 8002784:	f00e fb60 	bl	8010e48 <siprintf>
 8002788:	4603      	mov	r3, r0
 800278a:	b29a      	uxth	r2, r3
 800278c:	2364      	movs	r3, #100	; 0x64
 800278e:	4935      	ldr	r1, [pc, #212]	; (8002864 <SetSensorCommand+0x294>)
 8002790:	4835      	ldr	r0, [pc, #212]	; (8002868 <SetSensorCommand+0x298>)
 8002792:	f007 f9ef 	bl	8009b74 <HAL_UART_Transmit>
 		HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%02lu ",refSpadCountHost[i]), 100);
 8002796:	4a39      	ldr	r2, [pc, #228]	; (800287c <SetSensorCommand+0x2ac>)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800279e:	461a      	mov	r2, r3
 80027a0:	4940      	ldr	r1, [pc, #256]	; (80028a4 <SetSensorCommand+0x2d4>)
 80027a2:	4830      	ldr	r0, [pc, #192]	; (8002864 <SetSensorCommand+0x294>)
 80027a4:	f00e fb50 	bl	8010e48 <siprintf>
 80027a8:	4603      	mov	r3, r0
 80027aa:	b29a      	uxth	r2, r3
 80027ac:	2364      	movs	r3, #100	; 0x64
 80027ae:	492d      	ldr	r1, [pc, #180]	; (8002864 <SetSensorCommand+0x294>)
 80027b0:	482d      	ldr	r0, [pc, #180]	; (8002868 <SetSensorCommand+0x298>)
 80027b2:	f007 f9df 	bl	8009b74 <HAL_UART_Transmit>
 		HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%02d ",isApertureSpadsHost[i]), 100);
 80027b6:	4a32      	ldr	r2, [pc, #200]	; (8002880 <SetSensorCommand+0x2b0>)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	4413      	add	r3, r2
 80027bc:	781b      	ldrb	r3, [r3, #0]
 80027be:	461a      	mov	r2, r3
 80027c0:	4939      	ldr	r1, [pc, #228]	; (80028a8 <SetSensorCommand+0x2d8>)
 80027c2:	4828      	ldr	r0, [pc, #160]	; (8002864 <SetSensorCommand+0x294>)
 80027c4:	f00e fb40 	bl	8010e48 <siprintf>
 80027c8:	4603      	mov	r3, r0
 80027ca:	b29a      	uxth	r2, r3
 80027cc:	2364      	movs	r3, #100	; 0x64
 80027ce:	4925      	ldr	r1, [pc, #148]	; (8002864 <SetSensorCommand+0x294>)
 80027d0:	4825      	ldr	r0, [pc, #148]	; (8002868 <SetSensorCommand+0x298>)
 80027d2:	f007 f9cf 	bl	8009b74 <HAL_UART_Transmit>
 		HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%02d ",VhvSettingsHost[i]), 100);
 80027d6:	4a2b      	ldr	r2, [pc, #172]	; (8002884 <SetSensorCommand+0x2b4>)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	4413      	add	r3, r2
 80027dc:	781b      	ldrb	r3, [r3, #0]
 80027de:	461a      	mov	r2, r3
 80027e0:	4931      	ldr	r1, [pc, #196]	; (80028a8 <SetSensorCommand+0x2d8>)
 80027e2:	4820      	ldr	r0, [pc, #128]	; (8002864 <SetSensorCommand+0x294>)
 80027e4:	f00e fb30 	bl	8010e48 <siprintf>
 80027e8:	4603      	mov	r3, r0
 80027ea:	b29a      	uxth	r2, r3
 80027ec:	2364      	movs	r3, #100	; 0x64
 80027ee:	491d      	ldr	r1, [pc, #116]	; (8002864 <SetSensorCommand+0x294>)
 80027f0:	481d      	ldr	r0, [pc, #116]	; (8002868 <SetSensorCommand+0x298>)
 80027f2:	f007 f9bf 	bl	8009b74 <HAL_UART_Transmit>
 		HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%02d) ",PhaseCalHost[i]), 100);
 80027f6:	4a24      	ldr	r2, [pc, #144]	; (8002888 <SetSensorCommand+0x2b8>)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	4413      	add	r3, r2
 80027fc:	781b      	ldrb	r3, [r3, #0]
 80027fe:	461a      	mov	r2, r3
 8002800:	492a      	ldr	r1, [pc, #168]	; (80028ac <SetSensorCommand+0x2dc>)
 8002802:	4818      	ldr	r0, [pc, #96]	; (8002864 <SetSensorCommand+0x294>)
 8002804:	f00e fb20 	bl	8010e48 <siprintf>
 8002808:	4603      	mov	r3, r0
 800280a:	b29a      	uxth	r2, r3
 800280c:	2364      	movs	r3, #100	; 0x64
 800280e:	4915      	ldr	r1, [pc, #84]	; (8002864 <SetSensorCommand+0x294>)
 8002810:	4815      	ldr	r0, [pc, #84]	; (8002868 <SetSensorCommand+0x298>)
 8002812:	f007 f9af 	bl	8009b74 <HAL_UART_Transmit>
 		if(i%12 ==11){HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "\n\r"), 100);}
 8002816:	6879      	ldr	r1, [r7, #4]
 8002818:	4b14      	ldr	r3, [pc, #80]	; (800286c <SetSensorCommand+0x29c>)
 800281a:	fb83 2301 	smull	r2, r3, r3, r1
 800281e:	105a      	asrs	r2, r3, #1
 8002820:	17cb      	asrs	r3, r1, #31
 8002822:	1ad2      	subs	r2, r2, r3
 8002824:	4613      	mov	r3, r2
 8002826:	005b      	lsls	r3, r3, #1
 8002828:	4413      	add	r3, r2
 800282a:	009b      	lsls	r3, r3, #2
 800282c:	1aca      	subs	r2, r1, r3
 800282e:	2a0b      	cmp	r2, #11
 8002830:	d10a      	bne.n	8002848 <SetSensorCommand+0x278>
 8002832:	491f      	ldr	r1, [pc, #124]	; (80028b0 <SetSensorCommand+0x2e0>)
 8002834:	480b      	ldr	r0, [pc, #44]	; (8002864 <SetSensorCommand+0x294>)
 8002836:	f00e fb07 	bl	8010e48 <siprintf>
 800283a:	4603      	mov	r3, r0
 800283c:	b29a      	uxth	r2, r3
 800283e:	2364      	movs	r3, #100	; 0x64
 8002840:	4908      	ldr	r1, [pc, #32]	; (8002864 <SetSensorCommand+0x294>)
 8002842:	4809      	ldr	r0, [pc, #36]	; (8002868 <SetSensorCommand+0x298>)
 8002844:	f007 f996 	bl	8009b74 <HAL_UART_Transmit>
  	for (int i = 0; i < NUM_SENSOR; i++) {
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	3301      	adds	r3, #1
 800284c:	607b      	str	r3, [r7, #4]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2b17      	cmp	r3, #23
 8002852:	f77f aed0 	ble.w	80025f6 <SetSensorCommand+0x26>

  	}
}
 8002856:	bf00      	nop
 8002858:	bf00      	nop
 800285a:	3708      	adds	r7, #8
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}
 8002860:	0801648c 	.word	0x0801648c
 8002864:	200079f0 	.word	0x200079f0
 8002868:	20007a74 	.word	0x20007a74
 800286c:	2aaaaaab 	.word	0x2aaaaaab
 8002870:	20007bc0 	.word	0x20007bc0
 8002874:	2000a140 	.word	0x2000a140
 8002878:	20007720 	.word	0x20007720
 800287c:	20000010 	.word	0x20000010
 8002880:	20000070 	.word	0x20000070
 8002884:	20000088 	.word	0x20000088
 8002888:	200000a0 	.word	0x200000a0
 800288c:	20007774 	.word	0x20007774
 8002890:	20000000 	.word	0x20000000
 8002894:	20000004 	.word	0x20000004
 8002898:	20000008 	.word	0x20000008
 800289c:	00000000 	.word	0x00000000
 80028a0:	0801649c 	.word	0x0801649c
 80028a4:	080164a4 	.word	0x080164a4
 80028a8:	080163c4 	.word	0x080163c4
 80028ac:	080164ac 	.word	0x080164ac
 80028b0:	080163cc 	.word	0x080163cc

080028b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80028b8:	f000 fec9 	bl	800364e <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80028bc:	f000 f836 	bl	800292c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80028c0:	f7fe fce6 	bl	8001290 <MX_GPIO_Init>
  MX_I2C1_Init();
 80028c4:	f7fe fe3c 	bl	8001540 <MX_I2C1_Init>
  MX_TIM7_Init();
 80028c8:	f000 fc0e 	bl	80030e8 <MX_TIM7_Init>
  MX_USART1_UART_Init();
 80028cc:	f000 fcaa 	bl	8003224 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80028d0:	f000 fb94 	bl	8002ffc <MX_TIM2_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80028d4:	f000 f898 	bl	8002a08 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 80028d8:	2100      	movs	r1, #0
 80028da:	480f      	ldr	r0, [pc, #60]	; (8002918 <main+0x64>)
 80028dc:	f005 f992 	bl	8007c04 <HAL_TIM_PWM_Start>

  // Initialize the HX711
  HX711_Init();
 80028e0:	f7fe fd8e 	bl	8001400 <HX711_Init>

  /* UART interrupt initialization */
  HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "JH TACTS test\n\r"), 100);
 80028e4:	490d      	ldr	r1, [pc, #52]	; (800291c <main+0x68>)
 80028e6:	480e      	ldr	r0, [pc, #56]	; (8002920 <main+0x6c>)
 80028e8:	f00e faae 	bl	8010e48 <siprintf>
 80028ec:	4603      	mov	r3, r0
 80028ee:	b29a      	uxth	r2, r3
 80028f0:	2364      	movs	r3, #100	; 0x64
 80028f2:	490b      	ldr	r1, [pc, #44]	; (8002920 <main+0x6c>)
 80028f4:	480b      	ldr	r0, [pc, #44]	; (8002924 <main+0x70>)
 80028f6:	f007 f93d 	bl	8009b74 <HAL_UART_Transmit>
  startMsg();
 80028fa:	f000 fd7b 	bl	80033f4 <startMsg>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  if(ReceiveUartMessage(&huart1, rxMsg, sizeof(rxMsg)) == HAL_OK)
 80028fe:	2241      	movs	r2, #65	; 0x41
 8002900:	4909      	ldr	r1, [pc, #36]	; (8002928 <main+0x74>)
 8002902:	4808      	ldr	r0, [pc, #32]	; (8002924 <main+0x70>)
 8002904:	f000 fd40 	bl	8003388 <ReceiveUartMessage>
 8002908:	4603      	mov	r3, r0
 800290a:	2b00      	cmp	r3, #0
 800290c:	d1f7      	bne.n	80028fe <main+0x4a>
	  {
	      ProcessCommand(rxMsg);
 800290e:	4806      	ldr	r0, [pc, #24]	; (8002928 <main+0x74>)
 8002910:	f7fe ff24 	bl	800175c <ProcessCommand>
	  if(ReceiveUartMessage(&huart1, rxMsg, sizeof(rxMsg)) == HAL_OK)
 8002914:	e7f3      	b.n	80028fe <main+0x4a>
 8002916:	bf00      	nop
 8002918:	20007958 	.word	0x20007958
 800291c:	080164b4 	.word	0x080164b4
 8002920:	200079f0 	.word	0x200079f0
 8002924:	20007a74 	.word	0x20007a74
 8002928:	20007a30 	.word	0x20007a30

0800292c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b094      	sub	sp, #80	; 0x50
 8002930:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002932:	f107 0320 	add.w	r3, r7, #32
 8002936:	2230      	movs	r2, #48	; 0x30
 8002938:	2100      	movs	r1, #0
 800293a:	4618      	mov	r0, r3
 800293c:	f00d fbfc 	bl	8010138 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002940:	f107 030c 	add.w	r3, r7, #12
 8002944:	2200      	movs	r2, #0
 8002946:	601a      	str	r2, [r3, #0]
 8002948:	605a      	str	r2, [r3, #4]
 800294a:	609a      	str	r2, [r3, #8]
 800294c:	60da      	str	r2, [r3, #12]
 800294e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002950:	4b2b      	ldr	r3, [pc, #172]	; (8002a00 <SystemClock_Config+0xd4>)
 8002952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002954:	4a2a      	ldr	r2, [pc, #168]	; (8002a00 <SystemClock_Config+0xd4>)
 8002956:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800295a:	6413      	str	r3, [r2, #64]	; 0x40
 800295c:	4b28      	ldr	r3, [pc, #160]	; (8002a00 <SystemClock_Config+0xd4>)
 800295e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002960:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002964:	60bb      	str	r3, [r7, #8]
 8002966:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002968:	4b26      	ldr	r3, [pc, #152]	; (8002a04 <SystemClock_Config+0xd8>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a25      	ldr	r2, [pc, #148]	; (8002a04 <SystemClock_Config+0xd8>)
 800296e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002972:	6013      	str	r3, [r2, #0]
 8002974:	4b23      	ldr	r3, [pc, #140]	; (8002a04 <SystemClock_Config+0xd8>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800297c:	607b      	str	r3, [r7, #4]
 800297e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002980:	2301      	movs	r3, #1
 8002982:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002984:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002988:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800298a:	2302      	movs	r3, #2
 800298c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800298e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002992:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8002994:	2319      	movs	r3, #25
 8002996:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 432;
 8002998:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 800299c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800299e:	2302      	movs	r3, #2
 80029a0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80029a2:	2302      	movs	r3, #2
 80029a4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80029a6:	f107 0320 	add.w	r3, r7, #32
 80029aa:	4618      	mov	r0, r3
 80029ac:	f003 f900 	bl	8005bb0 <HAL_RCC_OscConfig>
 80029b0:	4603      	mov	r3, r0
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d001      	beq.n	80029ba <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80029b6:	f000 f863 	bl	8002a80 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80029ba:	f003 f8a9 	bl	8005b10 <HAL_PWREx_EnableOverDrive>
 80029be:	4603      	mov	r3, r0
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d001      	beq.n	80029c8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80029c4:	f000 f85c 	bl	8002a80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80029c8:	230f      	movs	r3, #15
 80029ca:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80029cc:	2302      	movs	r3, #2
 80029ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80029d0:	2300      	movs	r3, #0
 80029d2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80029d4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80029d8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80029da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029de:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80029e0:	f107 030c 	add.w	r3, r7, #12
 80029e4:	2107      	movs	r1, #7
 80029e6:	4618      	mov	r0, r3
 80029e8:	f003 fc3c 	bl	8006264 <HAL_RCC_ClockConfig>
 80029ec:	4603      	mov	r3, r0
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d001      	beq.n	80029f6 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80029f2:	f000 f845 	bl	8002a80 <Error_Handler>
  }
}
 80029f6:	bf00      	nop
 80029f8:	3750      	adds	r7, #80	; 0x50
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop
 8002a00:	40023800 	.word	0x40023800
 8002a04:	40007000 	.word	0x40007000

08002a08 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	af00      	add	r7, sp, #0
  /* USART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	2100      	movs	r1, #0
 8002a10:	2025      	movs	r0, #37	; 0x25
 8002a12:	f000 ff8d 	bl	8003930 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002a16:	2025      	movs	r0, #37	; 0x25
 8002a18:	f000 ffb6 	bl	8003988 <HAL_NVIC_EnableIRQ>
  /* I2C1_ER_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	2100      	movs	r1, #0
 8002a20:	2020      	movs	r0, #32
 8002a22:	f000 ff85 	bl	8003930 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8002a26:	2020      	movs	r0, #32
 8002a28:	f000 ffae 	bl	8003988 <HAL_NVIC_EnableIRQ>
  /* I2C1_EV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	2100      	movs	r1, #0
 8002a30:	201f      	movs	r0, #31
 8002a32:	f000 ff7d 	bl	8003930 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002a36:	201f      	movs	r0, #31
 8002a38:	f000 ffa6 	bl	8003988 <HAL_NVIC_EnableIRQ>
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	2100      	movs	r1, #0
 8002a40:	2028      	movs	r0, #40	; 0x28
 8002a42:	f000 ff75 	bl	8003930 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002a46:	2028      	movs	r0, #40	; 0x28
 8002a48:	f000 ff9e 	bl	8003988 <HAL_NVIC_EnableIRQ>
  /* EXTI9_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	2100      	movs	r1, #0
 8002a50:	2017      	movs	r0, #23
 8002a52:	f000 ff6d 	bl	8003930 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002a56:	2017      	movs	r0, #23
 8002a58:	f000 ff96 	bl	8003988 <HAL_NVIC_EnableIRQ>
  /* TIM7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	2100      	movs	r1, #0
 8002a60:	2037      	movs	r0, #55	; 0x37
 8002a62:	f000 ff65 	bl	8003930 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002a66:	2037      	movs	r0, #55	; 0x37
 8002a68:	f000 ff8e 	bl	8003988 <HAL_NVIC_EnableIRQ>
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	2100      	movs	r1, #0
 8002a70:	201c      	movs	r0, #28
 8002a72:	f000 ff5d 	bl	8003930 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002a76:	201c      	movs	r0, #28
 8002a78:	f000 ff86 	bl	8003988 <HAL_NVIC_EnableIRQ>
}
 8002a7c:	bf00      	nop
 8002a7e:	bd80      	pop	{r7, pc}

08002a80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a80:	b480      	push	{r7}
 8002a82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002a84:	b672      	cpsid	i
}
 8002a86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002a88:	e7fe      	b.n	8002a88 <Error_Handler+0x8>

08002a8a <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8002a8a:	b480      	push	{r7}
 8002a8c:	b083      	sub	sp, #12
 8002a8e:	af00      	add	r7, sp, #0
 8002a90:	6078      	str	r0, [r7, #4]
 8002a92:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8002a94:	bf00      	nop
 8002a96:	370c      	adds	r7, #12
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9e:	4770      	bx	lr

08002aa0 <stepRev>:
#include "tim.h"

#define PULSE 200
#define GEAR 139

void stepRev(int ANG) {
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b086      	sub	sp, #24
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
	// ENA D2 PG7 GPIOG GPIO_PIN_6
	// CLK D3 PB4 GPIOB GPIO_PIN_4
	// DIR D4 PG7 GPIOG GPIO_PIN_7


  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);  // ENA
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	2140      	movs	r1, #64	; 0x40
 8002aac:	482e      	ldr	r0, [pc, #184]	; (8002b68 <stepRev+0xc8>)
 8002aae:	f001 fbbf 	bl	8004230 <HAL_GPIO_WritePin>

  if (ANG != 0) {
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d04e      	beq.n	8002b56 <stepRev+0xb6>
    int direction = (ANG > 0) ? 1 : -1;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	dd01      	ble.n	8002ac2 <stepRev+0x22>
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e001      	b.n	8002ac6 <stepRev+0x26>
 8002ac2:	f04f 33ff 	mov.w	r3, #4294967295
 8002ac6:	613b      	str	r3, [r7, #16]
    ANG *= direction;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	693a      	ldr	r2, [r7, #16]
 8002acc:	fb02 f303 	mul.w	r3, r2, r3
 8002ad0:	607b      	str	r3, [r7, #4]
    HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7, direction == 1 ? GPIO_PIN_SET : GPIO_PIN_RESET); // DIR
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	2b01      	cmp	r3, #1
 8002ad6:	bf0c      	ite	eq
 8002ad8:	2301      	moveq	r3, #1
 8002ada:	2300      	movne	r3, #0
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	461a      	mov	r2, r3
 8002ae0:	2180      	movs	r1, #128	; 0x80
 8002ae2:	4821      	ldr	r0, [pc, #132]	; (8002b68 <stepRev+0xc8>)
 8002ae4:	f001 fba4 	bl	8004230 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET); // ENA
 8002ae8:	2200      	movs	r2, #0
 8002aea:	2140      	movs	r1, #64	; 0x40
 8002aec:	481e      	ldr	r0, [pc, #120]	; (8002b68 <stepRev+0xc8>)
 8002aee:	f001 fb9f 	bl	8004230 <HAL_GPIO_WritePin>
    uint32_t steps = PULSE * GEAR * ANG / 360.0;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	f646 4298 	movw	r2, #27800	; 0x6c98
 8002af8:	fb02 f303 	mul.w	r3, r2, r3
 8002afc:	4618      	mov	r0, r3
 8002afe:	f7fd fd41 	bl	8000584 <__aeabi_i2d>
 8002b02:	f04f 0200 	mov.w	r2, #0
 8002b06:	4b19      	ldr	r3, [pc, #100]	; (8002b6c <stepRev+0xcc>)
 8002b08:	f7fd fed0 	bl	80008ac <__aeabi_ddiv>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	460b      	mov	r3, r1
 8002b10:	4610      	mov	r0, r2
 8002b12:	4619      	mov	r1, r3
 8002b14:	f7fe f878 	bl	8000c08 <__aeabi_d2uiz>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	60fb      	str	r3, [r7, #12]
    uint32_t pulse_delay_ms_ = 1; // 6rpm
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	60bb      	str	r3, [r7, #8]

    for (int i = 0; i < steps; i++) {
 8002b20:	2300      	movs	r3, #0
 8002b22:	617b      	str	r3, [r7, #20]
 8002b24:	e012      	b.n	8002b4c <stepRev+0xac>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET); //CLK
 8002b26:	2201      	movs	r2, #1
 8002b28:	2110      	movs	r1, #16
 8002b2a:	4811      	ldr	r0, [pc, #68]	; (8002b70 <stepRev+0xd0>)
 8002b2c:	f001 fb80 	bl	8004230 <HAL_GPIO_WritePin>
      HAL_Delay(pulse_delay_ms_);
 8002b30:	68b8      	ldr	r0, [r7, #8]
 8002b32:	f000 fde9 	bl	8003708 <HAL_Delay>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET); //CLK
 8002b36:	2200      	movs	r2, #0
 8002b38:	2110      	movs	r1, #16
 8002b3a:	480d      	ldr	r0, [pc, #52]	; (8002b70 <stepRev+0xd0>)
 8002b3c:	f001 fb78 	bl	8004230 <HAL_GPIO_WritePin>
      HAL_Delay(pulse_delay_ms_);
 8002b40:	68b8      	ldr	r0, [r7, #8]
 8002b42:	f000 fde1 	bl	8003708 <HAL_Delay>
    for (int i = 0; i < steps; i++) {
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	3301      	adds	r3, #1
 8002b4a:	617b      	str	r3, [r7, #20]
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	68fa      	ldr	r2, [r7, #12]
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d8e8      	bhi.n	8002b26 <stepRev+0x86>
  }
  else {
    HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET); // ENA
  }

}
 8002b54:	e004      	b.n	8002b60 <stepRev+0xc0>
    HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET); // ENA
 8002b56:	2200      	movs	r2, #0
 8002b58:	2140      	movs	r1, #64	; 0x40
 8002b5a:	4803      	ldr	r0, [pc, #12]	; (8002b68 <stepRev+0xc8>)
 8002b5c:	f001 fb68 	bl	8004230 <HAL_GPIO_WritePin>
}
 8002b60:	bf00      	nop
 8002b62:	3718      	adds	r7, #24
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}
 8002b68:	40021800 	.word	0x40021800
 8002b6c:	40768000 	.word	0x40768000
 8002b70:	40020400 	.word	0x40020400

08002b74 <stepLin>:

void stepLin(int DIST) {
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b088      	sub	sp, #32
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]

	// ENA D5 PI0 GPIOI GPIO_PIN_0
	// CLK D8 PI2 GPIOI GPIO_PIN_2
	// DIR D7 PI3 GPIOI GPIO_PIN_3

	float ANG = DIST * 360.0 / 8; // 1 rev -> 8 mm
 8002b7c:	6878      	ldr	r0, [r7, #4]
 8002b7e:	f7fd fd01 	bl	8000584 <__aeabi_i2d>
 8002b82:	f04f 0200 	mov.w	r2, #0
 8002b86:	4b44      	ldr	r3, [pc, #272]	; (8002c98 <stepLin+0x124>)
 8002b88:	f7fd fd66 	bl	8000658 <__aeabi_dmul>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	460b      	mov	r3, r1
 8002b90:	4610      	mov	r0, r2
 8002b92:	4619      	mov	r1, r3
 8002b94:	f04f 0200 	mov.w	r2, #0
 8002b98:	4b40      	ldr	r3, [pc, #256]	; (8002c9c <stepLin+0x128>)
 8002b9a:	f7fd fe87 	bl	80008ac <__aeabi_ddiv>
 8002b9e:	4602      	mov	r2, r0
 8002ba0:	460b      	mov	r3, r1
 8002ba2:	4610      	mov	r0, r2
 8002ba4:	4619      	mov	r1, r3
 8002ba6:	f7fe f84f 	bl	8000c48 <__aeabi_d2f>
 8002baa:	4603      	mov	r3, r0
 8002bac:	61bb      	str	r3, [r7, #24]


  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0, GPIO_PIN_SET);  // ENA
 8002bae:	2201      	movs	r2, #1
 8002bb0:	2101      	movs	r1, #1
 8002bb2:	483b      	ldr	r0, [pc, #236]	; (8002ca0 <stepLin+0x12c>)
 8002bb4:	f001 fb3c 	bl	8004230 <HAL_GPIO_WritePin>

  if (ANG != 0) {
 8002bb8:	edd7 7a06 	vldr	s15, [r7, #24]
 8002bbc:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002bc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bc4:	d05a      	beq.n	8002c7c <stepLin+0x108>
    int direction = (ANG > 0) ? 1 : -1;
 8002bc6:	edd7 7a06 	vldr	s15, [r7, #24]
 8002bca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002bce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bd2:	dd01      	ble.n	8002bd8 <stepLin+0x64>
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	e001      	b.n	8002bdc <stepLin+0x68>
 8002bd8:	f04f 33ff 	mov.w	r3, #4294967295
 8002bdc:	617b      	str	r3, [r7, #20]
    ANG *= direction;
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	ee07 3a90 	vmov	s15, r3
 8002be4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002be8:	ed97 7a06 	vldr	s14, [r7, #24]
 8002bec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bf0:	edc7 7a06 	vstr	s15, [r7, #24]
    HAL_GPIO_WritePin(GPIOI, GPIO_PIN_3, direction == 1 ? GPIO_PIN_SET : GPIO_PIN_RESET); // DIR
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	2b01      	cmp	r3, #1
 8002bf8:	bf0c      	ite	eq
 8002bfa:	2301      	moveq	r3, #1
 8002bfc:	2300      	movne	r3, #0
 8002bfe:	b2db      	uxtb	r3, r3
 8002c00:	461a      	mov	r2, r3
 8002c02:	2108      	movs	r1, #8
 8002c04:	4826      	ldr	r0, [pc, #152]	; (8002ca0 <stepLin+0x12c>)
 8002c06:	f001 fb13 	bl	8004230 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0, GPIO_PIN_RESET);  // ENA
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	2101      	movs	r1, #1
 8002c0e:	4824      	ldr	r0, [pc, #144]	; (8002ca0 <stepLin+0x12c>)
 8002c10:	f001 fb0e 	bl	8004230 <HAL_GPIO_WritePin>
    uint32_t steps = PULSE * ANG / 360.0;
 8002c14:	edd7 7a06 	vldr	s15, [r7, #24]
 8002c18:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8002ca4 <stepLin+0x130>
 8002c1c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c20:	ee17 0a90 	vmov	r0, s15
 8002c24:	f7fd fcc0 	bl	80005a8 <__aeabi_f2d>
 8002c28:	f04f 0200 	mov.w	r2, #0
 8002c2c:	4b1a      	ldr	r3, [pc, #104]	; (8002c98 <stepLin+0x124>)
 8002c2e:	f7fd fe3d 	bl	80008ac <__aeabi_ddiv>
 8002c32:	4602      	mov	r2, r0
 8002c34:	460b      	mov	r3, r1
 8002c36:	4610      	mov	r0, r2
 8002c38:	4619      	mov	r1, r3
 8002c3a:	f7fd ffe5 	bl	8000c08 <__aeabi_d2uiz>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	613b      	str	r3, [r7, #16]
    uint32_t pulse_delay_ms_ = 1; // 6rpm
 8002c42:	2301      	movs	r3, #1
 8002c44:	60fb      	str	r3, [r7, #12]

    for (int i = 0; i < steps; i++) {
 8002c46:	2300      	movs	r3, #0
 8002c48:	61fb      	str	r3, [r7, #28]
 8002c4a:	e012      	b.n	8002c72 <stepLin+0xfe>
      HAL_GPIO_WritePin(GPIOI, GPIO_PIN_2, GPIO_PIN_SET); // CLK
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	2104      	movs	r1, #4
 8002c50:	4813      	ldr	r0, [pc, #76]	; (8002ca0 <stepLin+0x12c>)
 8002c52:	f001 faed 	bl	8004230 <HAL_GPIO_WritePin>
      HAL_Delay(pulse_delay_ms_);
 8002c56:	68f8      	ldr	r0, [r7, #12]
 8002c58:	f000 fd56 	bl	8003708 <HAL_Delay>
      HAL_GPIO_WritePin(GPIOI, GPIO_PIN_2, GPIO_PIN_RESET); // CLK
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	2104      	movs	r1, #4
 8002c60:	480f      	ldr	r0, [pc, #60]	; (8002ca0 <stepLin+0x12c>)
 8002c62:	f001 fae5 	bl	8004230 <HAL_GPIO_WritePin>
      HAL_Delay(pulse_delay_ms_);
 8002c66:	68f8      	ldr	r0, [r7, #12]
 8002c68:	f000 fd4e 	bl	8003708 <HAL_Delay>
    for (int i = 0; i < steps; i++) {
 8002c6c:	69fb      	ldr	r3, [r7, #28]
 8002c6e:	3301      	adds	r3, #1
 8002c70:	61fb      	str	r3, [r7, #28]
 8002c72:	69fb      	ldr	r3, [r7, #28]
 8002c74:	693a      	ldr	r2, [r7, #16]
 8002c76:	429a      	cmp	r2, r3
 8002c78:	d8e8      	bhi.n	8002c4c <stepLin+0xd8>
 8002c7a:	e004      	b.n	8002c86 <stepLin+0x112>
    }
  }
  else {
    HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0, GPIO_PIN_RESET);  // ENA
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	2101      	movs	r1, #1
 8002c80:	4807      	ldr	r0, [pc, #28]	; (8002ca0 <stepLin+0x12c>)
 8002c82:	f001 fad5 	bl	8004230 <HAL_GPIO_WritePin>
  }

  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0, GPIO_PIN_SET);  // ENA
 8002c86:	2201      	movs	r2, #1
 8002c88:	2101      	movs	r1, #1
 8002c8a:	4805      	ldr	r0, [pc, #20]	; (8002ca0 <stepLin+0x12c>)
 8002c8c:	f001 fad0 	bl	8004230 <HAL_GPIO_WritePin>

}
 8002c90:	bf00      	nop
 8002c92:	3720      	adds	r7, #32
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}
 8002c98:	40768000 	.word	0x40768000
 8002c9c:	40200000 	.word	0x40200000
 8002ca0:	40022000 	.word	0x40022000
 8002ca4:	43480000 	.word	0x43480000

08002ca8 <servo_angle>:

void servo_angle(TIM_HandleTypeDef *htim, uint32_t channel, int step) {
 8002ca8:	b480      	push	{r7}
 8002caa:	b087      	sub	sp, #28
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	60f8      	str	r0, [r7, #12]
 8002cb0:	60b9      	str	r1, [r7, #8]
 8002cb2:	607a      	str	r2, [r7, #4]

	// 1 step is 0.8 mm
    if (step > 17)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2b11      	cmp	r3, #17
 8002cb8:	dd01      	ble.n	8002cbe <servo_angle+0x16>
    	step = 17; // 최대 각도 제한
 8002cba:	2311      	movs	r3, #17
 8002cbc:	607b      	str	r3, [r7, #4]

    int pulse_width = 21-step; // 듀티 사이클 계산 (0도에서 180도까지)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	f1c3 0315 	rsb	r3, r3, #21
 8002cc4:	617b      	str	r3, [r7, #20]
    __HAL_TIM_SET_COMPARE(htim, channel, pulse_width); // 듀티 사이클 변경
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d104      	bne.n	8002cd6 <servo_angle+0x2e>
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	697a      	ldr	r2, [r7, #20]
 8002cd2:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002cd4:	e023      	b.n	8002d1e <servo_angle+0x76>
    __HAL_TIM_SET_COMPARE(htim, channel, pulse_width); // 듀티 사이클 변경
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	2b04      	cmp	r3, #4
 8002cda:	d104      	bne.n	8002ce6 <servo_angle+0x3e>
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002ce4:	e01b      	b.n	8002d1e <servo_angle+0x76>
    __HAL_TIM_SET_COMPARE(htim, channel, pulse_width); // 듀티 사이클 변경
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	2b08      	cmp	r3, #8
 8002cea:	d104      	bne.n	8002cf6 <servo_angle+0x4e>
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8002cf4:	e013      	b.n	8002d1e <servo_angle+0x76>
    __HAL_TIM_SET_COMPARE(htim, channel, pulse_width); // 듀티 사이클 변경
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	2b0c      	cmp	r3, #12
 8002cfa:	d104      	bne.n	8002d06 <servo_angle+0x5e>
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681a      	ldr	r2, [r3, #0]
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	6413      	str	r3, [r2, #64]	; 0x40
}
 8002d04:	e00b      	b.n	8002d1e <servo_angle+0x76>
    __HAL_TIM_SET_COMPARE(htim, channel, pulse_width); // 듀티 사이클 변경
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	2b10      	cmp	r3, #16
 8002d0a:	d104      	bne.n	8002d16 <servo_angle+0x6e>
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681a      	ldr	r2, [r3, #0]
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	6593      	str	r3, [r2, #88]	; 0x58
}
 8002d14:	e003      	b.n	8002d1e <servo_angle+0x76>
    __HAL_TIM_SET_COMPARE(htim, channel, pulse_width); // 듀티 사이클 변경
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681a      	ldr	r2, [r3, #0]
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 8002d1e:	bf00      	nop
 8002d20:	371c      	adds	r7, #28
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr
	...

08002d2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b083      	sub	sp, #12
 8002d30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002d32:	4b0f      	ldr	r3, [pc, #60]	; (8002d70 <HAL_MspInit+0x44>)
 8002d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d36:	4a0e      	ldr	r2, [pc, #56]	; (8002d70 <HAL_MspInit+0x44>)
 8002d38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d3c:	6413      	str	r3, [r2, #64]	; 0x40
 8002d3e:	4b0c      	ldr	r3, [pc, #48]	; (8002d70 <HAL_MspInit+0x44>)
 8002d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d46:	607b      	str	r3, [r7, #4]
 8002d48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d4a:	4b09      	ldr	r3, [pc, #36]	; (8002d70 <HAL_MspInit+0x44>)
 8002d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d4e:	4a08      	ldr	r2, [pc, #32]	; (8002d70 <HAL_MspInit+0x44>)
 8002d50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d54:	6453      	str	r3, [r2, #68]	; 0x44
 8002d56:	4b06      	ldr	r3, [pc, #24]	; (8002d70 <HAL_MspInit+0x44>)
 8002d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d5e:	603b      	str	r3, [r7, #0]
 8002d60:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d62:	bf00      	nop
 8002d64:	370c      	adds	r7, #12
 8002d66:	46bd      	mov	sp, r7
 8002d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6c:	4770      	bx	lr
 8002d6e:	bf00      	nop
 8002d70:	40023800 	.word	0x40023800

08002d74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d74:	b480      	push	{r7}
 8002d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002d78:	e7fe      	b.n	8002d78 <NMI_Handler+0x4>

08002d7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d7a:	b480      	push	{r7}
 8002d7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d7e:	e7fe      	b.n	8002d7e <HardFault_Handler+0x4>

08002d80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d80:	b480      	push	{r7}
 8002d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d84:	e7fe      	b.n	8002d84 <MemManage_Handler+0x4>

08002d86 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d86:	b480      	push	{r7}
 8002d88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d8a:	e7fe      	b.n	8002d8a <BusFault_Handler+0x4>

08002d8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d90:	e7fe      	b.n	8002d90 <UsageFault_Handler+0x4>

08002d92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d92:	b480      	push	{r7}
 8002d94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d96:	bf00      	nop
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9e:	4770      	bx	lr

08002da0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002da0:	b480      	push	{r7}
 8002da2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002da4:	bf00      	nop
 8002da6:	46bd      	mov	sp, r7
 8002da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dac:	4770      	bx	lr

08002dae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002dae:	b480      	push	{r7}
 8002db0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002db2:	bf00      	nop
 8002db4:	46bd      	mov	sp, r7
 8002db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dba:	4770      	bx	lr

08002dbc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002dc0:	f000 fc82 	bl	80036c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002dc4:	bf00      	nop
 8002dc6:	bd80      	pop	{r7, pc}

08002dc8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8002dcc:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002dd0:	f001 fa5a 	bl	8004288 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002dd4:	bf00      	nop
 8002dd6:	bd80      	pop	{r7, pc}

08002dd8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002ddc:	4802      	ldr	r0, [pc, #8]	; (8002de8 <TIM2_IRQHandler+0x10>)
 8002dde:	f005 f8db 	bl	8007f98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002de2:	bf00      	nop
 8002de4:	bd80      	pop	{r7, pc}
 8002de6:	bf00      	nop
 8002de8:	20007958 	.word	0x20007958

08002dec <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002df0:	4802      	ldr	r0, [pc, #8]	; (8002dfc <I2C1_EV_IRQHandler+0x10>)
 8002df2:	f001 fd79 	bl	80048e8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002df6:	bf00      	nop
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	bf00      	nop
 8002dfc:	20007720 	.word	0x20007720

08002e00 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002e04:	4802      	ldr	r0, [pc, #8]	; (8002e10 <I2C1_ER_IRQHandler+0x10>)
 8002e06:	f001 fd89 	bl	800491c <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8002e0a:	bf00      	nop
 8002e0c:	bd80      	pop	{r7, pc}
 8002e0e:	bf00      	nop
 8002e10:	20007720 	.word	0x20007720

08002e14 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002e18:	4802      	ldr	r0, [pc, #8]	; (8002e24 <USART1_IRQHandler+0x10>)
 8002e1a:	f006 fff3 	bl	8009e04 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002e1e:	bf00      	nop
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	bf00      	nop
 8002e24:	20007a74 	.word	0x20007a74

08002e28 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8002e2c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002e30:	f001 fa2a 	bl	8004288 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002e34:	bf00      	nop
 8002e36:	bd80      	pop	{r7, pc}

08002e38 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002e3c:	4802      	ldr	r0, [pc, #8]	; (8002e48 <TIM7_IRQHandler+0x10>)
 8002e3e:	f005 f8ab 	bl	8007f98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002e42:	bf00      	nop
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	bf00      	nop
 8002e48:	200079a4 	.word	0x200079a4

08002e4c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	af00      	add	r7, sp, #0
  return 1;
 8002e50:	2301      	movs	r3, #1
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	46bd      	mov	sp, r7
 8002e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5a:	4770      	bx	lr

08002e5c <_kill>:

int _kill(int pid, int sig)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b082      	sub	sp, #8
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
 8002e64:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002e66:	f00d f92f 	bl	80100c8 <__errno>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	2216      	movs	r2, #22
 8002e6e:	601a      	str	r2, [r3, #0]
  return -1;
 8002e70:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	3708      	adds	r7, #8
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}

08002e7c <_exit>:

void _exit (int status)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b082      	sub	sp, #8
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002e84:	f04f 31ff 	mov.w	r1, #4294967295
 8002e88:	6878      	ldr	r0, [r7, #4]
 8002e8a:	f7ff ffe7 	bl	8002e5c <_kill>
  while (1) {}    /* Make sure we hang here */
 8002e8e:	e7fe      	b.n	8002e8e <_exit+0x12>

08002e90 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b086      	sub	sp, #24
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	60f8      	str	r0, [r7, #12]
 8002e98:	60b9      	str	r1, [r7, #8]
 8002e9a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	617b      	str	r3, [r7, #20]
 8002ea0:	e00a      	b.n	8002eb8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002ea2:	f3af 8000 	nop.w
 8002ea6:	4601      	mov	r1, r0
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	1c5a      	adds	r2, r3, #1
 8002eac:	60ba      	str	r2, [r7, #8]
 8002eae:	b2ca      	uxtb	r2, r1
 8002eb0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	3301      	adds	r3, #1
 8002eb6:	617b      	str	r3, [r7, #20]
 8002eb8:	697a      	ldr	r2, [r7, #20]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	dbf0      	blt.n	8002ea2 <_read+0x12>
  }

  return len;
 8002ec0:	687b      	ldr	r3, [r7, #4]
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	3718      	adds	r7, #24
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}

08002eca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002eca:	b580      	push	{r7, lr}
 8002ecc:	b086      	sub	sp, #24
 8002ece:	af00      	add	r7, sp, #0
 8002ed0:	60f8      	str	r0, [r7, #12]
 8002ed2:	60b9      	str	r1, [r7, #8]
 8002ed4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	617b      	str	r3, [r7, #20]
 8002eda:	e009      	b.n	8002ef0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	1c5a      	adds	r2, r3, #1
 8002ee0:	60ba      	str	r2, [r7, #8]
 8002ee2:	781b      	ldrb	r3, [r3, #0]
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	3301      	adds	r3, #1
 8002eee:	617b      	str	r3, [r7, #20]
 8002ef0:	697a      	ldr	r2, [r7, #20]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	dbf1      	blt.n	8002edc <_write+0x12>
  }
  return len;
 8002ef8:	687b      	ldr	r3, [r7, #4]
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3718      	adds	r7, #24
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}

08002f02 <_close>:

int _close(int file)
{
 8002f02:	b480      	push	{r7}
 8002f04:	b083      	sub	sp, #12
 8002f06:	af00      	add	r7, sp, #0
 8002f08:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002f0a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	370c      	adds	r7, #12
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr

08002f1a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002f1a:	b480      	push	{r7}
 8002f1c:	b083      	sub	sp, #12
 8002f1e:	af00      	add	r7, sp, #0
 8002f20:	6078      	str	r0, [r7, #4]
 8002f22:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002f2a:	605a      	str	r2, [r3, #4]
  return 0;
 8002f2c:	2300      	movs	r3, #0
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	370c      	adds	r7, #12
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr

08002f3a <_isatty>:

int _isatty(int file)
{
 8002f3a:	b480      	push	{r7}
 8002f3c:	b083      	sub	sp, #12
 8002f3e:	af00      	add	r7, sp, #0
 8002f40:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002f42:	2301      	movs	r3, #1
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	370c      	adds	r7, #12
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4e:	4770      	bx	lr

08002f50 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b085      	sub	sp, #20
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	60f8      	str	r0, [r7, #12]
 8002f58:	60b9      	str	r1, [r7, #8]
 8002f5a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002f5c:	2300      	movs	r3, #0
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	3714      	adds	r7, #20
 8002f62:	46bd      	mov	sp, r7
 8002f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f68:	4770      	bx	lr
	...

08002f6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b086      	sub	sp, #24
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002f74:	4a14      	ldr	r2, [pc, #80]	; (8002fc8 <_sbrk+0x5c>)
 8002f76:	4b15      	ldr	r3, [pc, #84]	; (8002fcc <_sbrk+0x60>)
 8002f78:	1ad3      	subs	r3, r2, r3
 8002f7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002f80:	4b13      	ldr	r3, [pc, #76]	; (8002fd0 <_sbrk+0x64>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d102      	bne.n	8002f8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002f88:	4b11      	ldr	r3, [pc, #68]	; (8002fd0 <_sbrk+0x64>)
 8002f8a:	4a12      	ldr	r2, [pc, #72]	; (8002fd4 <_sbrk+0x68>)
 8002f8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002f8e:	4b10      	ldr	r3, [pc, #64]	; (8002fd0 <_sbrk+0x64>)
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	4413      	add	r3, r2
 8002f96:	693a      	ldr	r2, [r7, #16]
 8002f98:	429a      	cmp	r2, r3
 8002f9a:	d207      	bcs.n	8002fac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002f9c:	f00d f894 	bl	80100c8 <__errno>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	220c      	movs	r2, #12
 8002fa4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002fa6:	f04f 33ff 	mov.w	r3, #4294967295
 8002faa:	e009      	b.n	8002fc0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002fac:	4b08      	ldr	r3, [pc, #32]	; (8002fd0 <_sbrk+0x64>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002fb2:	4b07      	ldr	r3, [pc, #28]	; (8002fd0 <_sbrk+0x64>)
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	4413      	add	r3, r2
 8002fba:	4a05      	ldr	r2, [pc, #20]	; (8002fd0 <_sbrk+0x64>)
 8002fbc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	3718      	adds	r7, #24
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}
 8002fc8:	20050000 	.word	0x20050000
 8002fcc:	00000400 	.word	0x00000400
 8002fd0:	20007954 	.word	0x20007954
 8002fd4:	2000a1a0 	.word	0x2000a1a0

08002fd8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002fdc:	4b06      	ldr	r3, [pc, #24]	; (8002ff8 <SystemInit+0x20>)
 8002fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fe2:	4a05      	ldr	r2, [pc, #20]	; (8002ff8 <SystemInit+0x20>)
 8002fe4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002fe8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002fec:	bf00      	nop
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff4:	4770      	bx	lr
 8002ff6:	bf00      	nop
 8002ff8:	e000ed00 	.word	0xe000ed00

08002ffc <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim7;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b08e      	sub	sp, #56	; 0x38
 8003000:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003002:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003006:	2200      	movs	r2, #0
 8003008:	601a      	str	r2, [r3, #0]
 800300a:	605a      	str	r2, [r3, #4]
 800300c:	609a      	str	r2, [r3, #8]
 800300e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003010:	f107 031c 	add.w	r3, r7, #28
 8003014:	2200      	movs	r2, #0
 8003016:	601a      	str	r2, [r3, #0]
 8003018:	605a      	str	r2, [r3, #4]
 800301a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800301c:	463b      	mov	r3, r7
 800301e:	2200      	movs	r2, #0
 8003020:	601a      	str	r2, [r3, #0]
 8003022:	605a      	str	r2, [r3, #4]
 8003024:	609a      	str	r2, [r3, #8]
 8003026:	60da      	str	r2, [r3, #12]
 8003028:	611a      	str	r2, [r3, #16]
 800302a:	615a      	str	r2, [r3, #20]
 800302c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800302e:	4b2d      	ldr	r3, [pc, #180]	; (80030e4 <MX_TIM2_Init+0xe8>)
 8003030:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003034:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10800-1;
 8003036:	4b2b      	ldr	r3, [pc, #172]	; (80030e4 <MX_TIM2_Init+0xe8>)
 8003038:	f642 222f 	movw	r2, #10799	; 0x2a2f
 800303c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800303e:	4b29      	ldr	r3, [pc, #164]	; (80030e4 <MX_TIM2_Init+0xe8>)
 8003040:	2200      	movs	r2, #0
 8003042:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 50-1;
 8003044:	4b27      	ldr	r3, [pc, #156]	; (80030e4 <MX_TIM2_Init+0xe8>)
 8003046:	2231      	movs	r2, #49	; 0x31
 8003048:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800304a:	4b26      	ldr	r3, [pc, #152]	; (80030e4 <MX_TIM2_Init+0xe8>)
 800304c:	2200      	movs	r2, #0
 800304e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003050:	4b24      	ldr	r3, [pc, #144]	; (80030e4 <MX_TIM2_Init+0xe8>)
 8003052:	2200      	movs	r2, #0
 8003054:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003056:	4823      	ldr	r0, [pc, #140]	; (80030e4 <MX_TIM2_Init+0xe8>)
 8003058:	f004 fb8a 	bl	8007770 <HAL_TIM_Base_Init>
 800305c:	4603      	mov	r3, r0
 800305e:	2b00      	cmp	r3, #0
 8003060:	d001      	beq.n	8003066 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8003062:	f7ff fd0d 	bl	8002a80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003066:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800306a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800306c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003070:	4619      	mov	r1, r3
 8003072:	481c      	ldr	r0, [pc, #112]	; (80030e4 <MX_TIM2_Init+0xe8>)
 8003074:	f005 fb18 	bl	80086a8 <HAL_TIM_ConfigClockSource>
 8003078:	4603      	mov	r3, r0
 800307a:	2b00      	cmp	r3, #0
 800307c:	d001      	beq.n	8003082 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800307e:	f7ff fcff 	bl	8002a80 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003082:	4818      	ldr	r0, [pc, #96]	; (80030e4 <MX_TIM2_Init+0xe8>)
 8003084:	f004 fc94 	bl	80079b0 <HAL_TIM_PWM_Init>
 8003088:	4603      	mov	r3, r0
 800308a:	2b00      	cmp	r3, #0
 800308c:	d001      	beq.n	8003092 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800308e:	f7ff fcf7 	bl	8002a80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003092:	2300      	movs	r3, #0
 8003094:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003096:	2300      	movs	r3, #0
 8003098:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800309a:	f107 031c 	add.w	r3, r7, #28
 800309e:	4619      	mov	r1, r3
 80030a0:	4810      	ldr	r0, [pc, #64]	; (80030e4 <MX_TIM2_Init+0xe8>)
 80030a2:	f006 fb31 	bl	8009708 <HAL_TIMEx_MasterConfigSynchronization>
 80030a6:	4603      	mov	r3, r0
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d001      	beq.n	80030b0 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80030ac:	f7ff fce8 	bl	8002a80 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80030b0:	2360      	movs	r3, #96	; 0x60
 80030b2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80030b4:	2300      	movs	r3, #0
 80030b6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80030b8:	2300      	movs	r3, #0
 80030ba:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80030bc:	2300      	movs	r3, #0
 80030be:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80030c0:	463b      	mov	r3, r7
 80030c2:	2200      	movs	r2, #0
 80030c4:	4619      	mov	r1, r3
 80030c6:	4807      	ldr	r0, [pc, #28]	; (80030e4 <MX_TIM2_Init+0xe8>)
 80030c8:	f005 f886 	bl	80081d8 <HAL_TIM_PWM_ConfigChannel>
 80030cc:	4603      	mov	r3, r0
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d001      	beq.n	80030d6 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80030d2:	f7ff fcd5 	bl	8002a80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80030d6:	4803      	ldr	r0, [pc, #12]	; (80030e4 <MX_TIM2_Init+0xe8>)
 80030d8:	f000 f86e 	bl	80031b8 <HAL_TIM_MspPostInit>

}
 80030dc:	bf00      	nop
 80030de:	3738      	adds	r7, #56	; 0x38
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}
 80030e4:	20007958 	.word	0x20007958

080030e8 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b084      	sub	sp, #16
 80030ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80030ee:	1d3b      	adds	r3, r7, #4
 80030f0:	2200      	movs	r2, #0
 80030f2:	601a      	str	r2, [r3, #0]
 80030f4:	605a      	str	r2, [r3, #4]
 80030f6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80030f8:	4b14      	ldr	r3, [pc, #80]	; (800314c <MX_TIM7_Init+0x64>)
 80030fa:	4a15      	ldr	r2, [pc, #84]	; (8003150 <MX_TIM7_Init+0x68>)
 80030fc:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 10800-1;
 80030fe:	4b13      	ldr	r3, [pc, #76]	; (800314c <MX_TIM7_Init+0x64>)
 8003100:	f642 222f 	movw	r2, #10799	; 0x2a2f
 8003104:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003106:	4b11      	ldr	r3, [pc, #68]	; (800314c <MX_TIM7_Init+0x64>)
 8003108:	2200      	movs	r2, #0
 800310a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 50-1;
 800310c:	4b0f      	ldr	r3, [pc, #60]	; (800314c <MX_TIM7_Init+0x64>)
 800310e:	2231      	movs	r2, #49	; 0x31
 8003110:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003112:	4b0e      	ldr	r3, [pc, #56]	; (800314c <MX_TIM7_Init+0x64>)
 8003114:	2200      	movs	r2, #0
 8003116:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8003118:	480c      	ldr	r0, [pc, #48]	; (800314c <MX_TIM7_Init+0x64>)
 800311a:	f004 fb29 	bl	8007770 <HAL_TIM_Base_Init>
 800311e:	4603      	mov	r3, r0
 8003120:	2b00      	cmp	r3, #0
 8003122:	d001      	beq.n	8003128 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8003124:	f7ff fcac 	bl	8002a80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003128:	2300      	movs	r3, #0
 800312a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800312c:	2300      	movs	r3, #0
 800312e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8003130:	1d3b      	adds	r3, r7, #4
 8003132:	4619      	mov	r1, r3
 8003134:	4805      	ldr	r0, [pc, #20]	; (800314c <MX_TIM7_Init+0x64>)
 8003136:	f006 fae7 	bl	8009708 <HAL_TIMEx_MasterConfigSynchronization>
 800313a:	4603      	mov	r3, r0
 800313c:	2b00      	cmp	r3, #0
 800313e:	d001      	beq.n	8003144 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8003140:	f7ff fc9e 	bl	8002a80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8003144:	bf00      	nop
 8003146:	3710      	adds	r7, #16
 8003148:	46bd      	mov	sp, r7
 800314a:	bd80      	pop	{r7, pc}
 800314c:	200079a4 	.word	0x200079a4
 8003150:	40001400 	.word	0x40001400

08003154 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003154:	b480      	push	{r7}
 8003156:	b085      	sub	sp, #20
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003164:	d10c      	bne.n	8003180 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003166:	4b12      	ldr	r3, [pc, #72]	; (80031b0 <HAL_TIM_Base_MspInit+0x5c>)
 8003168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800316a:	4a11      	ldr	r2, [pc, #68]	; (80031b0 <HAL_TIM_Base_MspInit+0x5c>)
 800316c:	f043 0301 	orr.w	r3, r3, #1
 8003170:	6413      	str	r3, [r2, #64]	; 0x40
 8003172:	4b0f      	ldr	r3, [pc, #60]	; (80031b0 <HAL_TIM_Base_MspInit+0x5c>)
 8003174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003176:	f003 0301 	and.w	r3, r3, #1
 800317a:	60fb      	str	r3, [r7, #12]
 800317c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM7_CLK_ENABLE();
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 800317e:	e010      	b.n	80031a2 <HAL_TIM_Base_MspInit+0x4e>
  else if(tim_baseHandle->Instance==TIM7)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a0b      	ldr	r2, [pc, #44]	; (80031b4 <HAL_TIM_Base_MspInit+0x60>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d10b      	bne.n	80031a2 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800318a:	4b09      	ldr	r3, [pc, #36]	; (80031b0 <HAL_TIM_Base_MspInit+0x5c>)
 800318c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800318e:	4a08      	ldr	r2, [pc, #32]	; (80031b0 <HAL_TIM_Base_MspInit+0x5c>)
 8003190:	f043 0320 	orr.w	r3, r3, #32
 8003194:	6413      	str	r3, [r2, #64]	; 0x40
 8003196:	4b06      	ldr	r3, [pc, #24]	; (80031b0 <HAL_TIM_Base_MspInit+0x5c>)
 8003198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319a:	f003 0320 	and.w	r3, r3, #32
 800319e:	60bb      	str	r3, [r7, #8]
 80031a0:	68bb      	ldr	r3, [r7, #8]
}
 80031a2:	bf00      	nop
 80031a4:	3714      	adds	r7, #20
 80031a6:	46bd      	mov	sp, r7
 80031a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ac:	4770      	bx	lr
 80031ae:	bf00      	nop
 80031b0:	40023800 	.word	0x40023800
 80031b4:	40001400 	.word	0x40001400

080031b8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b088      	sub	sp, #32
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031c0:	f107 030c 	add.w	r3, r7, #12
 80031c4:	2200      	movs	r2, #0
 80031c6:	601a      	str	r2, [r3, #0]
 80031c8:	605a      	str	r2, [r3, #4]
 80031ca:	609a      	str	r2, [r3, #8]
 80031cc:	60da      	str	r2, [r3, #12]
 80031ce:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031d8:	d11c      	bne.n	8003214 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031da:	4b10      	ldr	r3, [pc, #64]	; (800321c <HAL_TIM_MspPostInit+0x64>)
 80031dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031de:	4a0f      	ldr	r2, [pc, #60]	; (800321c <HAL_TIM_MspPostInit+0x64>)
 80031e0:	f043 0301 	orr.w	r3, r3, #1
 80031e4:	6313      	str	r3, [r2, #48]	; 0x30
 80031e6:	4b0d      	ldr	r3, [pc, #52]	; (800321c <HAL_TIM_MspPostInit+0x64>)
 80031e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ea:	f003 0301 	and.w	r3, r3, #1
 80031ee:	60bb      	str	r3, [r7, #8]
 80031f0:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80031f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80031f6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031f8:	2302      	movs	r3, #2
 80031fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031fc:	2300      	movs	r3, #0
 80031fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003200:	2300      	movs	r3, #0
 8003202:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003204:	2301      	movs	r3, #1
 8003206:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003208:	f107 030c 	add.w	r3, r7, #12
 800320c:	4619      	mov	r1, r3
 800320e:	4804      	ldr	r0, [pc, #16]	; (8003220 <HAL_TIM_MspPostInit+0x68>)
 8003210:	f000 fc7e 	bl	8003b10 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8003214:	bf00      	nop
 8003216:	3720      	adds	r7, #32
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}
 800321c:	40023800 	.word	0x40023800
 8003220:	40020000 	.word	0x40020000

08003224 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003228:	4b14      	ldr	r3, [pc, #80]	; (800327c <MX_USART1_UART_Init+0x58>)
 800322a:	4a15      	ldr	r2, [pc, #84]	; (8003280 <MX_USART1_UART_Init+0x5c>)
 800322c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800322e:	4b13      	ldr	r3, [pc, #76]	; (800327c <MX_USART1_UART_Init+0x58>)
 8003230:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003234:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003236:	4b11      	ldr	r3, [pc, #68]	; (800327c <MX_USART1_UART_Init+0x58>)
 8003238:	2200      	movs	r2, #0
 800323a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800323c:	4b0f      	ldr	r3, [pc, #60]	; (800327c <MX_USART1_UART_Init+0x58>)
 800323e:	2200      	movs	r2, #0
 8003240:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003242:	4b0e      	ldr	r3, [pc, #56]	; (800327c <MX_USART1_UART_Init+0x58>)
 8003244:	2200      	movs	r2, #0
 8003246:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003248:	4b0c      	ldr	r3, [pc, #48]	; (800327c <MX_USART1_UART_Init+0x58>)
 800324a:	220c      	movs	r2, #12
 800324c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800324e:	4b0b      	ldr	r3, [pc, #44]	; (800327c <MX_USART1_UART_Init+0x58>)
 8003250:	2200      	movs	r2, #0
 8003252:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003254:	4b09      	ldr	r3, [pc, #36]	; (800327c <MX_USART1_UART_Init+0x58>)
 8003256:	2200      	movs	r2, #0
 8003258:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800325a:	4b08      	ldr	r3, [pc, #32]	; (800327c <MX_USART1_UART_Init+0x58>)
 800325c:	2200      	movs	r2, #0
 800325e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003260:	4b06      	ldr	r3, [pc, #24]	; (800327c <MX_USART1_UART_Init+0x58>)
 8003262:	2200      	movs	r2, #0
 8003264:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003266:	4805      	ldr	r0, [pc, #20]	; (800327c <MX_USART1_UART_Init+0x58>)
 8003268:	f006 fbc4 	bl	80099f4 <HAL_UART_Init>
 800326c:	4603      	mov	r3, r0
 800326e:	2b00      	cmp	r3, #0
 8003270:	d001      	beq.n	8003276 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8003272:	f7ff fc05 	bl	8002a80 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003276:	bf00      	nop
 8003278:	bd80      	pop	{r7, pc}
 800327a:	bf00      	nop
 800327c:	20007a74 	.word	0x20007a74
 8003280:	40011000 	.word	0x40011000

08003284 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b0ac      	sub	sp, #176	; 0xb0
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800328c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003290:	2200      	movs	r2, #0
 8003292:	601a      	str	r2, [r3, #0]
 8003294:	605a      	str	r2, [r3, #4]
 8003296:	609a      	str	r2, [r3, #8]
 8003298:	60da      	str	r2, [r3, #12]
 800329a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800329c:	f107 0318 	add.w	r3, r7, #24
 80032a0:	2284      	movs	r2, #132	; 0x84
 80032a2:	2100      	movs	r1, #0
 80032a4:	4618      	mov	r0, r3
 80032a6:	f00c ff47 	bl	8010138 <memset>
  if(uartHandle->Instance==USART1)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a32      	ldr	r2, [pc, #200]	; (8003378 <HAL_UART_MspInit+0xf4>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d15c      	bne.n	800336e <HAL_UART_MspInit+0xea>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80032b4:	2340      	movs	r3, #64	; 0x40
 80032b6:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80032b8:	2300      	movs	r3, #0
 80032ba:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80032bc:	f107 0318 	add.w	r3, r7, #24
 80032c0:	4618      	mov	r0, r3
 80032c2:	f003 fa71 	bl	80067a8 <HAL_RCCEx_PeriphCLKConfig>
 80032c6:	4603      	mov	r3, r0
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d001      	beq.n	80032d0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80032cc:	f7ff fbd8 	bl	8002a80 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80032d0:	4b2a      	ldr	r3, [pc, #168]	; (800337c <HAL_UART_MspInit+0xf8>)
 80032d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032d4:	4a29      	ldr	r2, [pc, #164]	; (800337c <HAL_UART_MspInit+0xf8>)
 80032d6:	f043 0310 	orr.w	r3, r3, #16
 80032da:	6453      	str	r3, [r2, #68]	; 0x44
 80032dc:	4b27      	ldr	r3, [pc, #156]	; (800337c <HAL_UART_MspInit+0xf8>)
 80032de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032e0:	f003 0310 	and.w	r3, r3, #16
 80032e4:	617b      	str	r3, [r7, #20]
 80032e6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032e8:	4b24      	ldr	r3, [pc, #144]	; (800337c <HAL_UART_MspInit+0xf8>)
 80032ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ec:	4a23      	ldr	r2, [pc, #140]	; (800337c <HAL_UART_MspInit+0xf8>)
 80032ee:	f043 0302 	orr.w	r3, r3, #2
 80032f2:	6313      	str	r3, [r2, #48]	; 0x30
 80032f4:	4b21      	ldr	r3, [pc, #132]	; (800337c <HAL_UART_MspInit+0xf8>)
 80032f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f8:	f003 0302 	and.w	r3, r3, #2
 80032fc:	613b      	str	r3, [r7, #16]
 80032fe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003300:	4b1e      	ldr	r3, [pc, #120]	; (800337c <HAL_UART_MspInit+0xf8>)
 8003302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003304:	4a1d      	ldr	r2, [pc, #116]	; (800337c <HAL_UART_MspInit+0xf8>)
 8003306:	f043 0301 	orr.w	r3, r3, #1
 800330a:	6313      	str	r3, [r2, #48]	; 0x30
 800330c:	4b1b      	ldr	r3, [pc, #108]	; (800337c <HAL_UART_MspInit+0xf8>)
 800330e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003310:	f003 0301 	and.w	r3, r3, #1
 8003314:	60fb      	str	r3, [r7, #12]
 8003316:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003318:	2380      	movs	r3, #128	; 0x80
 800331a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800331e:	2302      	movs	r3, #2
 8003320:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003324:	2300      	movs	r3, #0
 8003326:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800332a:	2303      	movs	r3, #3
 800332c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003330:	2307      	movs	r3, #7
 8003332:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003336:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800333a:	4619      	mov	r1, r3
 800333c:	4810      	ldr	r0, [pc, #64]	; (8003380 <HAL_UART_MspInit+0xfc>)
 800333e:	f000 fbe7 	bl	8003b10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003342:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003346:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800334a:	2302      	movs	r3, #2
 800334c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003350:	2300      	movs	r3, #0
 8003352:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003356:	2303      	movs	r3, #3
 8003358:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800335c:	2307      	movs	r3, #7
 800335e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003362:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003366:	4619      	mov	r1, r3
 8003368:	4806      	ldr	r0, [pc, #24]	; (8003384 <HAL_UART_MspInit+0x100>)
 800336a:	f000 fbd1 	bl	8003b10 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800336e:	bf00      	nop
 8003370:	37b0      	adds	r7, #176	; 0xb0
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}
 8003376:	bf00      	nop
 8003378:	40011000 	.word	0x40011000
 800337c:	40023800 	.word	0x40023800
 8003380:	40020400 	.word	0x40020400
 8003384:	40020000 	.word	0x40020000

08003388 <ReceiveUartMessage>:
}

/* USER CODE BEGIN 1 */

HAL_StatusTypeDef ReceiveUartMessage(UART_HandleTypeDef *huart, uint8_t *buffer, uint16_t size)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b086      	sub	sp, #24
 800338c:	af00      	add	r7, sp, #0
 800338e:	60f8      	str	r0, [r7, #12]
 8003390:	60b9      	str	r1, [r7, #8]
 8003392:	4613      	mov	r3, r2
 8003394:	80fb      	strh	r3, [r7, #6]
    uint8_t receivedByte;
    uint16_t rxBufferIndex = 0;
 8003396:	2300      	movs	r3, #0
 8003398:	82fb      	strh	r3, [r7, #22]
    while(1)
    {
        if(HAL_UART_Receive(huart, &receivedByte, 1, 1000) == HAL_OK)
 800339a:	f107 0115 	add.w	r1, r7, #21
 800339e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80033a2:	2201      	movs	r2, #1
 80033a4:	68f8      	ldr	r0, [r7, #12]
 80033a6:	f006 fc68 	bl	8009c7a <HAL_UART_Receive>
 80033aa:	4603      	mov	r3, r0
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d1f4      	bne.n	800339a <ReceiveUartMessage+0x12>
        {
            if(receivedByte == '\n') // 종료 문자 감지
 80033b0:	7d7b      	ldrb	r3, [r7, #21]
 80033b2:	2b0a      	cmp	r3, #10
 80033b4:	d106      	bne.n	80033c4 <ReceiveUartMessage+0x3c>
            {
                buffer[rxBufferIndex] = '\0'; // 문자열의 끝을 표시
 80033b6:	8afb      	ldrh	r3, [r7, #22]
 80033b8:	68ba      	ldr	r2, [r7, #8]
 80033ba:	4413      	add	r3, r2
 80033bc:	2200      	movs	r2, #0
 80033be:	701a      	strb	r2, [r3, #0]
                return HAL_OK;
 80033c0:	2300      	movs	r3, #0
 80033c2:	e012      	b.n	80033ea <ReceiveUartMessage+0x62>
            }
            else
            {
                buffer[rxBufferIndex] = receivedByte; // 문자 저장
 80033c4:	8afb      	ldrh	r3, [r7, #22]
 80033c6:	68ba      	ldr	r2, [r7, #8]
 80033c8:	4413      	add	r3, r2
 80033ca:	7d7a      	ldrb	r2, [r7, #21]
 80033cc:	701a      	strb	r2, [r3, #0]
                rxBufferIndex++;
 80033ce:	8afb      	ldrh	r3, [r7, #22]
 80033d0:	3301      	adds	r3, #1
 80033d2:	82fb      	strh	r3, [r7, #22]
                if(rxBufferIndex >= size) // 버퍼 초과 방지
 80033d4:	8afa      	ldrh	r2, [r7, #22]
 80033d6:	88fb      	ldrh	r3, [r7, #6]
 80033d8:	429a      	cmp	r2, r3
 80033da:	d3de      	bcc.n	800339a <ReceiveUartMessage+0x12>
                {
                    buffer[rxBufferIndex - 1] = '\0'; // 문자열의 끝을 표시
 80033dc:	8afb      	ldrh	r3, [r7, #22]
 80033de:	3b01      	subs	r3, #1
 80033e0:	68ba      	ldr	r2, [r7, #8]
 80033e2:	4413      	add	r3, r2
 80033e4:	2200      	movs	r2, #0
 80033e6:	701a      	strb	r2, [r3, #0]
                    return HAL_ERROR;
 80033e8:	2301      	movs	r3, #1
                }
            }
        }
    }
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	3718      	adds	r7, #24
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}
	...

080033f4 <startMsg>:

void startMsg(){
 80033f4:	b580      	push	{r7, lr}
 80033f6:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "--------------------------------------------------------------\n"), 100);
 80033f8:	4937      	ldr	r1, [pc, #220]	; (80034d8 <startMsg+0xe4>)
 80033fa:	4838      	ldr	r0, [pc, #224]	; (80034dc <startMsg+0xe8>)
 80033fc:	f00d fd24 	bl	8010e48 <siprintf>
 8003400:	4603      	mov	r3, r0
 8003402:	b29a      	uxth	r2, r3
 8003404:	2364      	movs	r3, #100	; 0x64
 8003406:	4935      	ldr	r1, [pc, #212]	; (80034dc <startMsg+0xe8>)
 8003408:	4835      	ldr	r0, [pc, #212]	; (80034e0 <startMsg+0xec>)
 800340a:	f006 fbb3 	bl	8009b74 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "--------------------------------------------------------------\n"), 100);
 800340e:	4932      	ldr	r1, [pc, #200]	; (80034d8 <startMsg+0xe4>)
 8003410:	4832      	ldr	r0, [pc, #200]	; (80034dc <startMsg+0xe8>)
 8003412:	f00d fd19 	bl	8010e48 <siprintf>
 8003416:	4603      	mov	r3, r0
 8003418:	b29a      	uxth	r2, r3
 800341a:	2364      	movs	r3, #100	; 0x64
 800341c:	492f      	ldr	r1, [pc, #188]	; (80034dc <startMsg+0xe8>)
 800341e:	4830      	ldr	r0, [pc, #192]	; (80034e0 <startMsg+0xec>)
 8003420:	f006 fba8 	bl	8009b74 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "----- Auto Data Logging Device for TACTS made by JaeHyeong----\n"), 100);
 8003424:	492f      	ldr	r1, [pc, #188]	; (80034e4 <startMsg+0xf0>)
 8003426:	482d      	ldr	r0, [pc, #180]	; (80034dc <startMsg+0xe8>)
 8003428:	f00d fd0e 	bl	8010e48 <siprintf>
 800342c:	4603      	mov	r3, r0
 800342e:	b29a      	uxth	r2, r3
 8003430:	2364      	movs	r3, #100	; 0x64
 8003432:	492a      	ldr	r1, [pc, #168]	; (80034dc <startMsg+0xe8>)
 8003434:	482a      	ldr	r0, [pc, #168]	; (80034e0 <startMsg+0xec>)
 8003436:	f006 fb9d 	bl	8009b74 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "-----------rev XX : Rotaing Revolution Motor (Deg)------------\n"), 100);
 800343a:	492b      	ldr	r1, [pc, #172]	; (80034e8 <startMsg+0xf4>)
 800343c:	4827      	ldr	r0, [pc, #156]	; (80034dc <startMsg+0xe8>)
 800343e:	f00d fd03 	bl	8010e48 <siprintf>
 8003442:	4603      	mov	r3, r0
 8003444:	b29a      	uxth	r2, r3
 8003446:	2364      	movs	r3, #100	; 0x64
 8003448:	4924      	ldr	r1, [pc, #144]	; (80034dc <startMsg+0xe8>)
 800344a:	4825      	ldr	r0, [pc, #148]	; (80034e0 <startMsg+0xec>)
 800344c:	f006 fb92 	bl	8009b74 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "-----------lin XX : Moving Linear Motor (mm)------------------\n"), 100);
 8003450:	4926      	ldr	r1, [pc, #152]	; (80034ec <startMsg+0xf8>)
 8003452:	4822      	ldr	r0, [pc, #136]	; (80034dc <startMsg+0xe8>)
 8003454:	f00d fcf8 	bl	8010e48 <siprintf>
 8003458:	4603      	mov	r3, r0
 800345a:	b29a      	uxth	r2, r3
 800345c:	2364      	movs	r3, #100	; 0x64
 800345e:	491f      	ldr	r1, [pc, #124]	; (80034dc <startMsg+0xe8>)
 8003460:	481f      	ldr	r0, [pc, #124]	; (80034e0 <startMsg+0xec>)
 8003462:	f006 fb87 	bl	8009b74 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "-----------servo XX : Poking XX * 0.8 (mm)--------------------\n"), 100);
 8003466:	4922      	ldr	r1, [pc, #136]	; (80034f0 <startMsg+0xfc>)
 8003468:	481c      	ldr	r0, [pc, #112]	; (80034dc <startMsg+0xe8>)
 800346a:	f00d fced 	bl	8010e48 <siprintf>
 800346e:	4603      	mov	r3, r0
 8003470:	b29a      	uxth	r2, r3
 8003472:	2364      	movs	r3, #100	; 0x64
 8003474:	4919      	ldr	r1, [pc, #100]	; (80034dc <startMsg+0xe8>)
 8003476:	481a      	ldr	r0, [pc, #104]	; (80034e0 <startMsg+0xec>)
 8003478:	f006 fb7c 	bl	8009b74 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "-----------auto : Poking point and data logging---------------\n"), 100);
 800347c:	491d      	ldr	r1, [pc, #116]	; (80034f4 <startMsg+0x100>)
 800347e:	4817      	ldr	r0, [pc, #92]	; (80034dc <startMsg+0xe8>)
 8003480:	f00d fce2 	bl	8010e48 <siprintf>
 8003484:	4603      	mov	r3, r0
 8003486:	b29a      	uxth	r2, r3
 8003488:	2364      	movs	r3, #100	; 0x64
 800348a:	4914      	ldr	r1, [pc, #80]	; (80034dc <startMsg+0xe8>)
 800348c:	4814      	ldr	r0, [pc, #80]	; (80034e0 <startMsg+0xec>)
 800348e:	f006 fb71 	bl	8009b74 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "-------------------------testbed_axial------------------------\n"), 100);
 8003492:	4919      	ldr	r1, [pc, #100]	; (80034f8 <startMsg+0x104>)
 8003494:	4811      	ldr	r0, [pc, #68]	; (80034dc <startMsg+0xe8>)
 8003496:	f00d fcd7 	bl	8010e48 <siprintf>
 800349a:	4603      	mov	r3, r0
 800349c:	b29a      	uxth	r2, r3
 800349e:	2364      	movs	r3, #100	; 0x64
 80034a0:	490e      	ldr	r1, [pc, #56]	; (80034dc <startMsg+0xe8>)
 80034a2:	480f      	ldr	r0, [pc, #60]	; (80034e0 <startMsg+0xec>)
 80034a4:	f006 fb66 	bl	8009b74 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "--------------------------------------------------------------\n"), 100);
 80034a8:	490b      	ldr	r1, [pc, #44]	; (80034d8 <startMsg+0xe4>)
 80034aa:	480c      	ldr	r0, [pc, #48]	; (80034dc <startMsg+0xe8>)
 80034ac:	f00d fccc 	bl	8010e48 <siprintf>
 80034b0:	4603      	mov	r3, r0
 80034b2:	b29a      	uxth	r2, r3
 80034b4:	2364      	movs	r3, #100	; 0x64
 80034b6:	4909      	ldr	r1, [pc, #36]	; (80034dc <startMsg+0xe8>)
 80034b8:	4809      	ldr	r0, [pc, #36]	; (80034e0 <startMsg+0xec>)
 80034ba:	f006 fb5b 	bl	8009b74 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "--------------------------------------------------------------\n"), 100);
 80034be:	4906      	ldr	r1, [pc, #24]	; (80034d8 <startMsg+0xe4>)
 80034c0:	4806      	ldr	r0, [pc, #24]	; (80034dc <startMsg+0xe8>)
 80034c2:	f00d fcc1 	bl	8010e48 <siprintf>
 80034c6:	4603      	mov	r3, r0
 80034c8:	b29a      	uxth	r2, r3
 80034ca:	2364      	movs	r3, #100	; 0x64
 80034cc:	4903      	ldr	r1, [pc, #12]	; (80034dc <startMsg+0xe8>)
 80034ce:	4804      	ldr	r0, [pc, #16]	; (80034e0 <startMsg+0xec>)
 80034d0:	f006 fb50 	bl	8009b74 <HAL_UART_Transmit>
}
 80034d4:	bf00      	nop
 80034d6:	bd80      	pop	{r7, pc}
 80034d8:	080164c4 	.word	0x080164c4
 80034dc:	200079f0 	.word	0x200079f0
 80034e0:	20007a74 	.word	0x20007a74
 80034e4:	08016504 	.word	0x08016504
 80034e8:	08016544 	.word	0x08016544
 80034ec:	08016584 	.word	0x08016584
 80034f0:	080165c4 	.word	0x080165c4
 80034f4:	08016604 	.word	0x08016604
 80034f8:	08016644 	.word	0x08016644

080034fc <ResetAllDevices>:
#elif NUM_SENSOR == 48
  uint8_t tca_addr[8] = {0x70,0x71,0x72,0x73,0x74,0x75,0x76,0x77};  // 4 line
  uint8_t tcaLength = 8;
#endif

void ResetAllDevices() {
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b084      	sub	sp, #16
 8003500:	af02      	add	r7, sp, #8
  for (int j = 0; j < tcaLength; ++j) {
 8003502:	2300      	movs	r3, #0
 8003504:	607b      	str	r3, [r7, #4]
 8003506:	e011      	b.n	800352c <ResetAllDevices+0x30>
	  HAL_I2C_Master_Transmit(&hi2c1, tca_addr[j] << 1, &tca_ch_reset, 1, 1000);
 8003508:	4a0e      	ldr	r2, [pc, #56]	; (8003544 <ResetAllDevices+0x48>)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	4413      	add	r3, r2
 800350e:	781b      	ldrb	r3, [r3, #0]
 8003510:	b29b      	uxth	r3, r3
 8003512:	005b      	lsls	r3, r3, #1
 8003514:	b299      	uxth	r1, r3
 8003516:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800351a:	9300      	str	r3, [sp, #0]
 800351c:	2301      	movs	r3, #1
 800351e:	4a0a      	ldr	r2, [pc, #40]	; (8003548 <ResetAllDevices+0x4c>)
 8003520:	480a      	ldr	r0, [pc, #40]	; (800354c <ResetAllDevices+0x50>)
 8003522:	f000 fff7 	bl	8004514 <HAL_I2C_Master_Transmit>
  for (int j = 0; j < tcaLength; ++j) {
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	3301      	adds	r3, #1
 800352a:	607b      	str	r3, [r7, #4]
 800352c:	4b08      	ldr	r3, [pc, #32]	; (8003550 <ResetAllDevices+0x54>)
 800352e:	781b      	ldrb	r3, [r3, #0]
 8003530:	461a      	mov	r2, r3
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	4293      	cmp	r3, r2
 8003536:	dbe7      	blt.n	8003508 <ResetAllDevices+0xc>
  }
}
 8003538:	bf00      	nop
 800353a:	bf00      	nop
 800353c:	3708      	adds	r7, #8
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}
 8003542:	bf00      	nop
 8003544:	200000c0 	.word	0x200000c0
 8003548:	2000a144 	.word	0x2000a144
 800354c:	20007720 	.word	0x20007720
 8003550:	200000c4 	.word	0x200000c4

08003554 <ResetDevicesExcept>:

void ResetDevicesExcept(uint8_t active_device) {
 8003554:	b580      	push	{r7, lr}
 8003556:	b086      	sub	sp, #24
 8003558:	af02      	add	r7, sp, #8
 800355a:	4603      	mov	r3, r0
 800355c:	71fb      	strb	r3, [r7, #7]
    for (int j = 0; j < tcaLength; ++j) {
 800355e:	2300      	movs	r3, #0
 8003560:	60fb      	str	r3, [r7, #12]
 8003562:	e015      	b.n	8003590 <ResetDevicesExcept+0x3c>
        if (j != active_device) {
 8003564:	79fb      	ldrb	r3, [r7, #7]
 8003566:	68fa      	ldr	r2, [r7, #12]
 8003568:	429a      	cmp	r2, r3
 800356a:	d00e      	beq.n	800358a <ResetDevicesExcept+0x36>
            HAL_I2C_Master_Transmit(&hi2c1, tca_addr[j] << 1, &tca_ch_reset, 1, 1000);
 800356c:	4a0e      	ldr	r2, [pc, #56]	; (80035a8 <ResetDevicesExcept+0x54>)
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	4413      	add	r3, r2
 8003572:	781b      	ldrb	r3, [r3, #0]
 8003574:	b29b      	uxth	r3, r3
 8003576:	005b      	lsls	r3, r3, #1
 8003578:	b299      	uxth	r1, r3
 800357a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800357e:	9300      	str	r3, [sp, #0]
 8003580:	2301      	movs	r3, #1
 8003582:	4a0a      	ldr	r2, [pc, #40]	; (80035ac <ResetDevicesExcept+0x58>)
 8003584:	480a      	ldr	r0, [pc, #40]	; (80035b0 <ResetDevicesExcept+0x5c>)
 8003586:	f000 ffc5 	bl	8004514 <HAL_I2C_Master_Transmit>
    for (int j = 0; j < tcaLength; ++j) {
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	3301      	adds	r3, #1
 800358e:	60fb      	str	r3, [r7, #12]
 8003590:	4b08      	ldr	r3, [pc, #32]	; (80035b4 <ResetDevicesExcept+0x60>)
 8003592:	781b      	ldrb	r3, [r3, #0]
 8003594:	461a      	mov	r2, r3
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	4293      	cmp	r3, r2
 800359a:	dbe3      	blt.n	8003564 <ResetDevicesExcept+0x10>
        }
    }
}
 800359c:	bf00      	nop
 800359e:	bf00      	nop
 80035a0:	3710      	adds	r7, #16
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}
 80035a6:	bf00      	nop
 80035a8:	200000c0 	.word	0x200000c0
 80035ac:	2000a144 	.word	0x2000a144
 80035b0:	20007720 	.word	0x20007720
 80035b4:	200000c4 	.word	0x200000c4

080035b8 <setActiveTcaChannel>:

void setActiveTcaChannel(uint8_t active_device, uint8_t channel){
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b084      	sub	sp, #16
 80035bc:	af02      	add	r7, sp, #8
 80035be:	4603      	mov	r3, r0
 80035c0:	460a      	mov	r2, r1
 80035c2:	71fb      	strb	r3, [r7, #7]
 80035c4:	4613      	mov	r3, r2
 80035c6:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Master_Transmit(&hi2c1, tca_addr[active_device] << 1, &tca_ch[channel], 1, 1000);
 80035c8:	79fb      	ldrb	r3, [r7, #7]
 80035ca:	4a09      	ldr	r2, [pc, #36]	; (80035f0 <setActiveTcaChannel+0x38>)
 80035cc:	5cd3      	ldrb	r3, [r2, r3]
 80035ce:	b29b      	uxth	r3, r3
 80035d0:	005b      	lsls	r3, r3, #1
 80035d2:	b299      	uxth	r1, r3
 80035d4:	79bb      	ldrb	r3, [r7, #6]
 80035d6:	4a07      	ldr	r2, [pc, #28]	; (80035f4 <setActiveTcaChannel+0x3c>)
 80035d8:	441a      	add	r2, r3
 80035da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80035de:	9300      	str	r3, [sp, #0]
 80035e0:	2301      	movs	r3, #1
 80035e2:	4805      	ldr	r0, [pc, #20]	; (80035f8 <setActiveTcaChannel+0x40>)
 80035e4:	f000 ff96 	bl	8004514 <HAL_I2C_Master_Transmit>
}
 80035e8:	bf00      	nop
 80035ea:	3708      	adds	r7, #8
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}
 80035f0:	200000c0 	.word	0x200000c0
 80035f4:	200000b8 	.word	0x200000b8
 80035f8:	20007720 	.word	0x20007720

080035fc <Reset_Handler>:
 80035fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003634 <LoopFillZerobss+0x12>
 8003600:	480d      	ldr	r0, [pc, #52]	; (8003638 <LoopFillZerobss+0x16>)
 8003602:	490e      	ldr	r1, [pc, #56]	; (800363c <LoopFillZerobss+0x1a>)
 8003604:	4a0e      	ldr	r2, [pc, #56]	; (8003640 <LoopFillZerobss+0x1e>)
 8003606:	2300      	movs	r3, #0
 8003608:	e002      	b.n	8003610 <LoopCopyDataInit>

0800360a <CopyDataInit>:
 800360a:	58d4      	ldr	r4, [r2, r3]
 800360c:	50c4      	str	r4, [r0, r3]
 800360e:	3304      	adds	r3, #4

08003610 <LoopCopyDataInit>:
 8003610:	18c4      	adds	r4, r0, r3
 8003612:	428c      	cmp	r4, r1
 8003614:	d3f9      	bcc.n	800360a <CopyDataInit>
 8003616:	4a0b      	ldr	r2, [pc, #44]	; (8003644 <LoopFillZerobss+0x22>)
 8003618:	4c0b      	ldr	r4, [pc, #44]	; (8003648 <LoopFillZerobss+0x26>)
 800361a:	2300      	movs	r3, #0
 800361c:	e001      	b.n	8003622 <LoopFillZerobss>

0800361e <FillZerobss>:
 800361e:	6013      	str	r3, [r2, #0]
 8003620:	3204      	adds	r2, #4

08003622 <LoopFillZerobss>:
 8003622:	42a2      	cmp	r2, r4
 8003624:	d3fb      	bcc.n	800361e <FillZerobss>
 8003626:	f7ff fcd7 	bl	8002fd8 <SystemInit>
 800362a:	f00c fd53 	bl	80100d4 <__libc_init_array>
 800362e:	f7ff f941 	bl	80028b4 <main>
 8003632:	4770      	bx	lr
 8003634:	20050000 	.word	0x20050000
 8003638:	20000000 	.word	0x20000000
 800363c:	20000560 	.word	0x20000560
 8003640:	08016e10 	.word	0x08016e10
 8003644:	20000560 	.word	0x20000560
 8003648:	2000a19c 	.word	0x2000a19c

0800364c <ADC_IRQHandler>:
 800364c:	e7fe      	b.n	800364c <ADC_IRQHandler>

0800364e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800364e:	b580      	push	{r7, lr}
 8003650:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003652:	2003      	movs	r0, #3
 8003654:	f000 f94c 	bl	80038f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003658:	200f      	movs	r0, #15
 800365a:	f000 f805 	bl	8003668 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800365e:	f7ff fb65 	bl	8002d2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003662:	2300      	movs	r3, #0
}
 8003664:	4618      	mov	r0, r3
 8003666:	bd80      	pop	{r7, pc}

08003668 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b082      	sub	sp, #8
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003670:	4b12      	ldr	r3, [pc, #72]	; (80036bc <HAL_InitTick+0x54>)
 8003672:	681a      	ldr	r2, [r3, #0]
 8003674:	4b12      	ldr	r3, [pc, #72]	; (80036c0 <HAL_InitTick+0x58>)
 8003676:	781b      	ldrb	r3, [r3, #0]
 8003678:	4619      	mov	r1, r3
 800367a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800367e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003682:	fbb2 f3f3 	udiv	r3, r2, r3
 8003686:	4618      	mov	r0, r3
 8003688:	f000 f996 	bl	80039b8 <HAL_SYSTICK_Config>
 800368c:	4603      	mov	r3, r0
 800368e:	2b00      	cmp	r3, #0
 8003690:	d001      	beq.n	8003696 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	e00e      	b.n	80036b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2b0f      	cmp	r3, #15
 800369a:	d80a      	bhi.n	80036b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800369c:	2200      	movs	r2, #0
 800369e:	6879      	ldr	r1, [r7, #4]
 80036a0:	f04f 30ff 	mov.w	r0, #4294967295
 80036a4:	f000 f944 	bl	8003930 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80036a8:	4a06      	ldr	r2, [pc, #24]	; (80036c4 <HAL_InitTick+0x5c>)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80036ae:	2300      	movs	r3, #0
 80036b0:	e000      	b.n	80036b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	3708      	adds	r7, #8
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}
 80036bc:	2000000c 	.word	0x2000000c
 80036c0:	200000cc 	.word	0x200000cc
 80036c4:	200000c8 	.word	0x200000c8

080036c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80036c8:	b480      	push	{r7}
 80036ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80036cc:	4b06      	ldr	r3, [pc, #24]	; (80036e8 <HAL_IncTick+0x20>)
 80036ce:	781b      	ldrb	r3, [r3, #0]
 80036d0:	461a      	mov	r2, r3
 80036d2:	4b06      	ldr	r3, [pc, #24]	; (80036ec <HAL_IncTick+0x24>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4413      	add	r3, r2
 80036d8:	4a04      	ldr	r2, [pc, #16]	; (80036ec <HAL_IncTick+0x24>)
 80036da:	6013      	str	r3, [r2, #0]
}
 80036dc:	bf00      	nop
 80036de:	46bd      	mov	sp, r7
 80036e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e4:	4770      	bx	lr
 80036e6:	bf00      	nop
 80036e8:	200000cc 	.word	0x200000cc
 80036ec:	2000a148 	.word	0x2000a148

080036f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80036f0:	b480      	push	{r7}
 80036f2:	af00      	add	r7, sp, #0
  return uwTick;
 80036f4:	4b03      	ldr	r3, [pc, #12]	; (8003704 <HAL_GetTick+0x14>)
 80036f6:	681b      	ldr	r3, [r3, #0]
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr
 8003702:	bf00      	nop
 8003704:	2000a148 	.word	0x2000a148

08003708 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b084      	sub	sp, #16
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003710:	f7ff ffee 	bl	80036f0 <HAL_GetTick>
 8003714:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003720:	d005      	beq.n	800372e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003722:	4b0a      	ldr	r3, [pc, #40]	; (800374c <HAL_Delay+0x44>)
 8003724:	781b      	ldrb	r3, [r3, #0]
 8003726:	461a      	mov	r2, r3
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	4413      	add	r3, r2
 800372c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800372e:	bf00      	nop
 8003730:	f7ff ffde 	bl	80036f0 <HAL_GetTick>
 8003734:	4602      	mov	r2, r0
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	1ad3      	subs	r3, r2, r3
 800373a:	68fa      	ldr	r2, [r7, #12]
 800373c:	429a      	cmp	r2, r3
 800373e:	d8f7      	bhi.n	8003730 <HAL_Delay+0x28>
  {
  }
}
 8003740:	bf00      	nop
 8003742:	bf00      	nop
 8003744:	3710      	adds	r7, #16
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}
 800374a:	bf00      	nop
 800374c:	200000cc 	.word	0x200000cc

08003750 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003750:	b480      	push	{r7}
 8003752:	b085      	sub	sp, #20
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	f003 0307 	and.w	r3, r3, #7
 800375e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003760:	4b0b      	ldr	r3, [pc, #44]	; (8003790 <__NVIC_SetPriorityGrouping+0x40>)
 8003762:	68db      	ldr	r3, [r3, #12]
 8003764:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003766:	68ba      	ldr	r2, [r7, #8]
 8003768:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800376c:	4013      	ands	r3, r2
 800376e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003778:	4b06      	ldr	r3, [pc, #24]	; (8003794 <__NVIC_SetPriorityGrouping+0x44>)
 800377a:	4313      	orrs	r3, r2
 800377c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800377e:	4a04      	ldr	r2, [pc, #16]	; (8003790 <__NVIC_SetPriorityGrouping+0x40>)
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	60d3      	str	r3, [r2, #12]
}
 8003784:	bf00      	nop
 8003786:	3714      	adds	r7, #20
 8003788:	46bd      	mov	sp, r7
 800378a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378e:	4770      	bx	lr
 8003790:	e000ed00 	.word	0xe000ed00
 8003794:	05fa0000 	.word	0x05fa0000

08003798 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003798:	b480      	push	{r7}
 800379a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800379c:	4b04      	ldr	r3, [pc, #16]	; (80037b0 <__NVIC_GetPriorityGrouping+0x18>)
 800379e:	68db      	ldr	r3, [r3, #12]
 80037a0:	0a1b      	lsrs	r3, r3, #8
 80037a2:	f003 0307 	and.w	r3, r3, #7
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	46bd      	mov	sp, r7
 80037aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ae:	4770      	bx	lr
 80037b0:	e000ed00 	.word	0xe000ed00

080037b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b083      	sub	sp, #12
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	4603      	mov	r3, r0
 80037bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	db0b      	blt.n	80037de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80037c6:	79fb      	ldrb	r3, [r7, #7]
 80037c8:	f003 021f 	and.w	r2, r3, #31
 80037cc:	4907      	ldr	r1, [pc, #28]	; (80037ec <__NVIC_EnableIRQ+0x38>)
 80037ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037d2:	095b      	lsrs	r3, r3, #5
 80037d4:	2001      	movs	r0, #1
 80037d6:	fa00 f202 	lsl.w	r2, r0, r2
 80037da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80037de:	bf00      	nop
 80037e0:	370c      	adds	r7, #12
 80037e2:	46bd      	mov	sp, r7
 80037e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e8:	4770      	bx	lr
 80037ea:	bf00      	nop
 80037ec:	e000e100 	.word	0xe000e100

080037f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b083      	sub	sp, #12
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	4603      	mov	r3, r0
 80037f8:	6039      	str	r1, [r7, #0]
 80037fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003800:	2b00      	cmp	r3, #0
 8003802:	db0a      	blt.n	800381a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	b2da      	uxtb	r2, r3
 8003808:	490c      	ldr	r1, [pc, #48]	; (800383c <__NVIC_SetPriority+0x4c>)
 800380a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800380e:	0112      	lsls	r2, r2, #4
 8003810:	b2d2      	uxtb	r2, r2
 8003812:	440b      	add	r3, r1
 8003814:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003818:	e00a      	b.n	8003830 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	b2da      	uxtb	r2, r3
 800381e:	4908      	ldr	r1, [pc, #32]	; (8003840 <__NVIC_SetPriority+0x50>)
 8003820:	79fb      	ldrb	r3, [r7, #7]
 8003822:	f003 030f 	and.w	r3, r3, #15
 8003826:	3b04      	subs	r3, #4
 8003828:	0112      	lsls	r2, r2, #4
 800382a:	b2d2      	uxtb	r2, r2
 800382c:	440b      	add	r3, r1
 800382e:	761a      	strb	r2, [r3, #24]
}
 8003830:	bf00      	nop
 8003832:	370c      	adds	r7, #12
 8003834:	46bd      	mov	sp, r7
 8003836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383a:	4770      	bx	lr
 800383c:	e000e100 	.word	0xe000e100
 8003840:	e000ed00 	.word	0xe000ed00

08003844 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003844:	b480      	push	{r7}
 8003846:	b089      	sub	sp, #36	; 0x24
 8003848:	af00      	add	r7, sp, #0
 800384a:	60f8      	str	r0, [r7, #12]
 800384c:	60b9      	str	r1, [r7, #8]
 800384e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	f003 0307 	and.w	r3, r3, #7
 8003856:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003858:	69fb      	ldr	r3, [r7, #28]
 800385a:	f1c3 0307 	rsb	r3, r3, #7
 800385e:	2b04      	cmp	r3, #4
 8003860:	bf28      	it	cs
 8003862:	2304      	movcs	r3, #4
 8003864:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003866:	69fb      	ldr	r3, [r7, #28]
 8003868:	3304      	adds	r3, #4
 800386a:	2b06      	cmp	r3, #6
 800386c:	d902      	bls.n	8003874 <NVIC_EncodePriority+0x30>
 800386e:	69fb      	ldr	r3, [r7, #28]
 8003870:	3b03      	subs	r3, #3
 8003872:	e000      	b.n	8003876 <NVIC_EncodePriority+0x32>
 8003874:	2300      	movs	r3, #0
 8003876:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003878:	f04f 32ff 	mov.w	r2, #4294967295
 800387c:	69bb      	ldr	r3, [r7, #24]
 800387e:	fa02 f303 	lsl.w	r3, r2, r3
 8003882:	43da      	mvns	r2, r3
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	401a      	ands	r2, r3
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800388c:	f04f 31ff 	mov.w	r1, #4294967295
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	fa01 f303 	lsl.w	r3, r1, r3
 8003896:	43d9      	mvns	r1, r3
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800389c:	4313      	orrs	r3, r2
         );
}
 800389e:	4618      	mov	r0, r3
 80038a0:	3724      	adds	r7, #36	; 0x24
 80038a2:	46bd      	mov	sp, r7
 80038a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a8:	4770      	bx	lr
	...

080038ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b082      	sub	sp, #8
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	3b01      	subs	r3, #1
 80038b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80038bc:	d301      	bcc.n	80038c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80038be:	2301      	movs	r3, #1
 80038c0:	e00f      	b.n	80038e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80038c2:	4a0a      	ldr	r2, [pc, #40]	; (80038ec <SysTick_Config+0x40>)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	3b01      	subs	r3, #1
 80038c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80038ca:	210f      	movs	r1, #15
 80038cc:	f04f 30ff 	mov.w	r0, #4294967295
 80038d0:	f7ff ff8e 	bl	80037f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80038d4:	4b05      	ldr	r3, [pc, #20]	; (80038ec <SysTick_Config+0x40>)
 80038d6:	2200      	movs	r2, #0
 80038d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80038da:	4b04      	ldr	r3, [pc, #16]	; (80038ec <SysTick_Config+0x40>)
 80038dc:	2207      	movs	r2, #7
 80038de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80038e0:	2300      	movs	r3, #0
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	3708      	adds	r7, #8
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}
 80038ea:	bf00      	nop
 80038ec:	e000e010 	.word	0xe000e010

080038f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b082      	sub	sp, #8
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2b07      	cmp	r3, #7
 80038fc:	d00f      	beq.n	800391e <HAL_NVIC_SetPriorityGrouping+0x2e>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2b06      	cmp	r3, #6
 8003902:	d00c      	beq.n	800391e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2b05      	cmp	r3, #5
 8003908:	d009      	beq.n	800391e <HAL_NVIC_SetPriorityGrouping+0x2e>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2b04      	cmp	r3, #4
 800390e:	d006      	beq.n	800391e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2b03      	cmp	r3, #3
 8003914:	d003      	beq.n	800391e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003916:	2191      	movs	r1, #145	; 0x91
 8003918:	4804      	ldr	r0, [pc, #16]	; (800392c <HAL_NVIC_SetPriorityGrouping+0x3c>)
 800391a:	f7ff f8b6 	bl	8002a8a <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800391e:	6878      	ldr	r0, [r7, #4]
 8003920:	f7ff ff16 	bl	8003750 <__NVIC_SetPriorityGrouping>
}
 8003924:	bf00      	nop
 8003926:	3708      	adds	r7, #8
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}
 800392c:	08016684 	.word	0x08016684

08003930 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003930:	b580      	push	{r7, lr}
 8003932:	b086      	sub	sp, #24
 8003934:	af00      	add	r7, sp, #0
 8003936:	4603      	mov	r3, r0
 8003938:	60b9      	str	r1, [r7, #8]
 800393a:	607a      	str	r2, [r7, #4]
 800393c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800393e:	2300      	movs	r3, #0
 8003940:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2b0f      	cmp	r3, #15
 8003946:	d903      	bls.n	8003950 <HAL_NVIC_SetPriority+0x20>
 8003948:	21a9      	movs	r1, #169	; 0xa9
 800394a:	480e      	ldr	r0, [pc, #56]	; (8003984 <HAL_NVIC_SetPriority+0x54>)
 800394c:	f7ff f89d 	bl	8002a8a <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	2b0f      	cmp	r3, #15
 8003954:	d903      	bls.n	800395e <HAL_NVIC_SetPriority+0x2e>
 8003956:	21aa      	movs	r1, #170	; 0xaa
 8003958:	480a      	ldr	r0, [pc, #40]	; (8003984 <HAL_NVIC_SetPriority+0x54>)
 800395a:	f7ff f896 	bl	8002a8a <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800395e:	f7ff ff1b 	bl	8003798 <__NVIC_GetPriorityGrouping>
 8003962:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003964:	687a      	ldr	r2, [r7, #4]
 8003966:	68b9      	ldr	r1, [r7, #8]
 8003968:	6978      	ldr	r0, [r7, #20]
 800396a:	f7ff ff6b 	bl	8003844 <NVIC_EncodePriority>
 800396e:	4602      	mov	r2, r0
 8003970:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003974:	4611      	mov	r1, r2
 8003976:	4618      	mov	r0, r3
 8003978:	f7ff ff3a 	bl	80037f0 <__NVIC_SetPriority>
}
 800397c:	bf00      	nop
 800397e:	3718      	adds	r7, #24
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}
 8003984:	08016684 	.word	0x08016684

08003988 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b082      	sub	sp, #8
 800398c:	af00      	add	r7, sp, #0
 800398e:	4603      	mov	r3, r0
 8003990:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8003992:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003996:	2b00      	cmp	r3, #0
 8003998:	da03      	bge.n	80039a2 <HAL_NVIC_EnableIRQ+0x1a>
 800399a:	21bd      	movs	r1, #189	; 0xbd
 800399c:	4805      	ldr	r0, [pc, #20]	; (80039b4 <HAL_NVIC_EnableIRQ+0x2c>)
 800399e:	f7ff f874 	bl	8002a8a <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80039a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039a6:	4618      	mov	r0, r3
 80039a8:	f7ff ff04 	bl	80037b4 <__NVIC_EnableIRQ>
}
 80039ac:	bf00      	nop
 80039ae:	3708      	adds	r7, #8
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd80      	pop	{r7, pc}
 80039b4:	08016684 	.word	0x08016684

080039b8 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b082      	sub	sp, #8
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80039c0:	6878      	ldr	r0, [r7, #4]
 80039c2:	f7ff ff73 	bl	80038ac <SysTick_Config>
 80039c6:	4603      	mov	r3, r0
}
 80039c8:	4618      	mov	r0, r3
 80039ca:	3708      	adds	r7, #8
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bd80      	pop	{r7, pc}

080039d0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b084      	sub	sp, #16
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039dc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80039de:	f7ff fe87 	bl	80036f0 <HAL_GetTick>
 80039e2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80039ea:	b2db      	uxtb	r3, r3
 80039ec:	2b02      	cmp	r3, #2
 80039ee:	d008      	beq.n	8003a02 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2280      	movs	r2, #128	; 0x80
 80039f4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2200      	movs	r2, #0
 80039fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	e052      	b.n	8003aa8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f022 0216 	bic.w	r2, r2, #22
 8003a10:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	695a      	ldr	r2, [r3, #20]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a20:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d103      	bne.n	8003a32 <HAL_DMA_Abort+0x62>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d007      	beq.n	8003a42 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	681a      	ldr	r2, [r3, #0]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f022 0208 	bic.w	r2, r2, #8
 8003a40:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	681a      	ldr	r2, [r3, #0]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f022 0201 	bic.w	r2, r2, #1
 8003a50:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a52:	e013      	b.n	8003a7c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003a54:	f7ff fe4c 	bl	80036f0 <HAL_GetTick>
 8003a58:	4602      	mov	r2, r0
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	1ad3      	subs	r3, r2, r3
 8003a5e:	2b05      	cmp	r3, #5
 8003a60:	d90c      	bls.n	8003a7c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2220      	movs	r2, #32
 8003a66:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2203      	movs	r2, #3
 8003a6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2200      	movs	r2, #0
 8003a74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8003a78:	2303      	movs	r3, #3
 8003a7a:	e015      	b.n	8003aa8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f003 0301 	and.w	r3, r3, #1
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d1e4      	bne.n	8003a54 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a8e:	223f      	movs	r2, #63	; 0x3f
 8003a90:	409a      	lsls	r2, r3
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2201      	movs	r2, #1
 8003a9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8003aa6:	2300      	movs	r3, #0
}
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	3710      	adds	r7, #16
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bd80      	pop	{r7, pc}

08003ab0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b083      	sub	sp, #12
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003abe:	b2db      	uxtb	r3, r3
 8003ac0:	2b02      	cmp	r3, #2
 8003ac2:	d004      	beq.n	8003ace <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2280      	movs	r2, #128	; 0x80
 8003ac8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	e00c      	b.n	8003ae8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2205      	movs	r2, #5
 8003ad2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	681a      	ldr	r2, [r3, #0]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f022 0201 	bic.w	r2, r2, #1
 8003ae4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003ae6:	2300      	movs	r3, #0
}
 8003ae8:	4618      	mov	r0, r3
 8003aea:	370c      	adds	r7, #12
 8003aec:	46bd      	mov	sp, r7
 8003aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af2:	4770      	bx	lr

08003af4 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003af4:	b480      	push	{r7}
 8003af6:	b083      	sub	sp, #12
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b02:	b2db      	uxtb	r3, r3
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	370c      	adds	r7, #12
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0e:	4770      	bx	lr

08003b10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b088      	sub	sp, #32
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
 8003b18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003b22:	2300      	movs	r3, #0
 8003b24:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003b26:	2300      	movs	r3, #0
 8003b28:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	4a3a      	ldr	r2, [pc, #232]	; (8003c18 <HAL_GPIO_Init+0x108>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d02b      	beq.n	8003b8a <HAL_GPIO_Init+0x7a>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	4a39      	ldr	r2, [pc, #228]	; (8003c1c <HAL_GPIO_Init+0x10c>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d027      	beq.n	8003b8a <HAL_GPIO_Init+0x7a>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	4a38      	ldr	r2, [pc, #224]	; (8003c20 <HAL_GPIO_Init+0x110>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d023      	beq.n	8003b8a <HAL_GPIO_Init+0x7a>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	4a37      	ldr	r2, [pc, #220]	; (8003c24 <HAL_GPIO_Init+0x114>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d01f      	beq.n	8003b8a <HAL_GPIO_Init+0x7a>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	4a36      	ldr	r2, [pc, #216]	; (8003c28 <HAL_GPIO_Init+0x118>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d01b      	beq.n	8003b8a <HAL_GPIO_Init+0x7a>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	4a35      	ldr	r2, [pc, #212]	; (8003c2c <HAL_GPIO_Init+0x11c>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d017      	beq.n	8003b8a <HAL_GPIO_Init+0x7a>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	4a34      	ldr	r2, [pc, #208]	; (8003c30 <HAL_GPIO_Init+0x120>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d013      	beq.n	8003b8a <HAL_GPIO_Init+0x7a>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	4a33      	ldr	r2, [pc, #204]	; (8003c34 <HAL_GPIO_Init+0x124>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d00f      	beq.n	8003b8a <HAL_GPIO_Init+0x7a>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	4a32      	ldr	r2, [pc, #200]	; (8003c38 <HAL_GPIO_Init+0x128>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d00b      	beq.n	8003b8a <HAL_GPIO_Init+0x7a>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	4a31      	ldr	r2, [pc, #196]	; (8003c3c <HAL_GPIO_Init+0x12c>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d007      	beq.n	8003b8a <HAL_GPIO_Init+0x7a>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	4a30      	ldr	r2, [pc, #192]	; (8003c40 <HAL_GPIO_Init+0x130>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d003      	beq.n	8003b8a <HAL_GPIO_Init+0x7a>
 8003b82:	21aa      	movs	r1, #170	; 0xaa
 8003b84:	482f      	ldr	r0, [pc, #188]	; (8003c44 <HAL_GPIO_Init+0x134>)
 8003b86:	f7fe ff80 	bl	8002a8a <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	b29b      	uxth	r3, r3
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d103      	bne.n	8003b9c <HAL_GPIO_Init+0x8c>
 8003b94:	21ab      	movs	r1, #171	; 0xab
 8003b96:	482b      	ldr	r0, [pc, #172]	; (8003c44 <HAL_GPIO_Init+0x134>)
 8003b98:	f7fe ff77 	bl	8002a8a <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d035      	beq.n	8003c10 <HAL_GPIO_Init+0x100>
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	2b01      	cmp	r3, #1
 8003baa:	d031      	beq.n	8003c10 <HAL_GPIO_Init+0x100>
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	2b11      	cmp	r3, #17
 8003bb2:	d02d      	beq.n	8003c10 <HAL_GPIO_Init+0x100>
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	2b02      	cmp	r3, #2
 8003bba:	d029      	beq.n	8003c10 <HAL_GPIO_Init+0x100>
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	2b12      	cmp	r3, #18
 8003bc2:	d025      	beq.n	8003c10 <HAL_GPIO_Init+0x100>
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8003bcc:	d020      	beq.n	8003c10 <HAL_GPIO_Init+0x100>
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8003bd6:	d01b      	beq.n	8003c10 <HAL_GPIO_Init+0x100>
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 8003be0:	d016      	beq.n	8003c10 <HAL_GPIO_Init+0x100>
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 8003bea:	d011      	beq.n	8003c10 <HAL_GPIO_Init+0x100>
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 8003bf4:	d00c      	beq.n	8003c10 <HAL_GPIO_Init+0x100>
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 8003bfe:	d007      	beq.n	8003c10 <HAL_GPIO_Init+0x100>
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	2b03      	cmp	r3, #3
 8003c06:	d003      	beq.n	8003c10 <HAL_GPIO_Init+0x100>
 8003c08:	21ac      	movs	r1, #172	; 0xac
 8003c0a:	480e      	ldr	r0, [pc, #56]	; (8003c44 <HAL_GPIO_Init+0x134>)
 8003c0c:	f7fe ff3d 	bl	8002a8a <assert_failed>

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003c10:	2300      	movs	r3, #0
 8003c12:	61fb      	str	r3, [r7, #28]
 8003c14:	e2c7      	b.n	80041a6 <HAL_GPIO_Init+0x696>
 8003c16:	bf00      	nop
 8003c18:	40020000 	.word	0x40020000
 8003c1c:	40020400 	.word	0x40020400
 8003c20:	40020800 	.word	0x40020800
 8003c24:	40020c00 	.word	0x40020c00
 8003c28:	40021000 	.word	0x40021000
 8003c2c:	40021400 	.word	0x40021400
 8003c30:	40021800 	.word	0x40021800
 8003c34:	40021c00 	.word	0x40021c00
 8003c38:	40022000 	.word	0x40022000
 8003c3c:	40022400 	.word	0x40022400
 8003c40:	40022800 	.word	0x40022800
 8003c44:	080166c0 	.word	0x080166c0
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003c48:	2201      	movs	r2, #1
 8003c4a:	69fb      	ldr	r3, [r7, #28]
 8003c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c50:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	697a      	ldr	r2, [r7, #20]
 8003c58:	4013      	ands	r3, r2
 8003c5a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003c5c:	693a      	ldr	r2, [r7, #16]
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	429a      	cmp	r2, r3
 8003c62:	f040 829d 	bne.w	80041a0 <HAL_GPIO_Init+0x690>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	f003 0303 	and.w	r3, r3, #3
 8003c6e:	2b01      	cmp	r3, #1
 8003c70:	d005      	beq.n	8003c7e <HAL_GPIO_Init+0x16e>
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	f003 0303 	and.w	r3, r3, #3
 8003c7a:	2b02      	cmp	r3, #2
 8003c7c:	d144      	bne.n	8003d08 <HAL_GPIO_Init+0x1f8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	68db      	ldr	r3, [r3, #12]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d00f      	beq.n	8003ca6 <HAL_GPIO_Init+0x196>
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	68db      	ldr	r3, [r3, #12]
 8003c8a:	2b01      	cmp	r3, #1
 8003c8c:	d00b      	beq.n	8003ca6 <HAL_GPIO_Init+0x196>
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	68db      	ldr	r3, [r3, #12]
 8003c92:	2b02      	cmp	r3, #2
 8003c94:	d007      	beq.n	8003ca6 <HAL_GPIO_Init+0x196>
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	68db      	ldr	r3, [r3, #12]
 8003c9a:	2b03      	cmp	r3, #3
 8003c9c:	d003      	beq.n	8003ca6 <HAL_GPIO_Init+0x196>
 8003c9e:	21bd      	movs	r1, #189	; 0xbd
 8003ca0:	4831      	ldr	r0, [pc, #196]	; (8003d68 <HAL_GPIO_Init+0x258>)
 8003ca2:	f7fe fef2 	bl	8002a8a <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003cac:	69fb      	ldr	r3, [r7, #28]
 8003cae:	005b      	lsls	r3, r3, #1
 8003cb0:	2203      	movs	r2, #3
 8003cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb6:	43db      	mvns	r3, r3
 8003cb8:	69ba      	ldr	r2, [r7, #24]
 8003cba:	4013      	ands	r3, r2
 8003cbc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	68da      	ldr	r2, [r3, #12]
 8003cc2:	69fb      	ldr	r3, [r7, #28]
 8003cc4:	005b      	lsls	r3, r3, #1
 8003cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cca:	69ba      	ldr	r2, [r7, #24]
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	69ba      	ldr	r2, [r7, #24]
 8003cd4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003cdc:	2201      	movs	r2, #1
 8003cde:	69fb      	ldr	r3, [r7, #28]
 8003ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce4:	43db      	mvns	r3, r3
 8003ce6:	69ba      	ldr	r2, [r7, #24]
 8003ce8:	4013      	ands	r3, r2
 8003cea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	091b      	lsrs	r3, r3, #4
 8003cf2:	f003 0201 	and.w	r2, r3, #1
 8003cf6:	69fb      	ldr	r3, [r7, #28]
 8003cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cfc:	69ba      	ldr	r2, [r7, #24]
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	69ba      	ldr	r2, [r7, #24]
 8003d06:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	f003 0303 	and.w	r3, r3, #3
 8003d10:	2b03      	cmp	r3, #3
 8003d12:	d02b      	beq.n	8003d6c <HAL_GPIO_Init+0x25c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d00b      	beq.n	8003d34 <HAL_GPIO_Init+0x224>
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	2b01      	cmp	r3, #1
 8003d22:	d007      	beq.n	8003d34 <HAL_GPIO_Init+0x224>
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	689b      	ldr	r3, [r3, #8]
 8003d28:	2b02      	cmp	r3, #2
 8003d2a:	d003      	beq.n	8003d34 <HAL_GPIO_Init+0x224>
 8003d2c:	21ce      	movs	r1, #206	; 0xce
 8003d2e:	480e      	ldr	r0, [pc, #56]	; (8003d68 <HAL_GPIO_Init+0x258>)
 8003d30:	f7fe feab 	bl	8002a8a <assert_failed>

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	68db      	ldr	r3, [r3, #12]
 8003d38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003d3a:	69fb      	ldr	r3, [r7, #28]
 8003d3c:	005b      	lsls	r3, r3, #1
 8003d3e:	2203      	movs	r2, #3
 8003d40:	fa02 f303 	lsl.w	r3, r2, r3
 8003d44:	43db      	mvns	r3, r3
 8003d46:	69ba      	ldr	r2, [r7, #24]
 8003d48:	4013      	ands	r3, r2
 8003d4a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	689a      	ldr	r2, [r3, #8]
 8003d50:	69fb      	ldr	r3, [r7, #28]
 8003d52:	005b      	lsls	r3, r3, #1
 8003d54:	fa02 f303 	lsl.w	r3, r2, r3
 8003d58:	69ba      	ldr	r2, [r7, #24]
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	69ba      	ldr	r2, [r7, #24]
 8003d62:	60da      	str	r2, [r3, #12]
 8003d64:	e002      	b.n	8003d6c <HAL_GPIO_Init+0x25c>
 8003d66:	bf00      	nop
 8003d68:	080166c0 	.word	0x080166c0
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	f003 0303 	and.w	r3, r3, #3
 8003d74:	2b02      	cmp	r3, #2
 8003d76:	f040 8134 	bne.w	8003fe2 <HAL_GPIO_Init+0x4d2>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	691b      	ldr	r3, [r3, #16]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	f000 810b 	beq.w	8003f9a <HAL_GPIO_Init+0x48a>
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	691b      	ldr	r3, [r3, #16]
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	f000 8106 	beq.w	8003f9a <HAL_GPIO_Init+0x48a>
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	691b      	ldr	r3, [r3, #16]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	f000 8101 	beq.w	8003f9a <HAL_GPIO_Init+0x48a>
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	691b      	ldr	r3, [r3, #16]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	f000 80fc 	beq.w	8003f9a <HAL_GPIO_Init+0x48a>
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	691b      	ldr	r3, [r3, #16]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	f000 80f7 	beq.w	8003f9a <HAL_GPIO_Init+0x48a>
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	691b      	ldr	r3, [r3, #16]
 8003db0:	2b01      	cmp	r3, #1
 8003db2:	f000 80f2 	beq.w	8003f9a <HAL_GPIO_Init+0x48a>
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	691b      	ldr	r3, [r3, #16]
 8003dba:	2b02      	cmp	r3, #2
 8003dbc:	f000 80ed 	beq.w	8003f9a <HAL_GPIO_Init+0x48a>
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	691b      	ldr	r3, [r3, #16]
 8003dc4:	2b02      	cmp	r3, #2
 8003dc6:	f000 80e8 	beq.w	8003f9a <HAL_GPIO_Init+0x48a>
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	691b      	ldr	r3, [r3, #16]
 8003dce:	2b02      	cmp	r3, #2
 8003dd0:	f000 80e3 	beq.w	8003f9a <HAL_GPIO_Init+0x48a>
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	691b      	ldr	r3, [r3, #16]
 8003dd8:	2b03      	cmp	r3, #3
 8003dda:	f000 80de 	beq.w	8003f9a <HAL_GPIO_Init+0x48a>
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	691b      	ldr	r3, [r3, #16]
 8003de2:	2b03      	cmp	r3, #3
 8003de4:	f000 80d9 	beq.w	8003f9a <HAL_GPIO_Init+0x48a>
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	691b      	ldr	r3, [r3, #16]
 8003dec:	2b03      	cmp	r3, #3
 8003dee:	f000 80d4 	beq.w	8003f9a <HAL_GPIO_Init+0x48a>
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	691b      	ldr	r3, [r3, #16]
 8003df6:	2b03      	cmp	r3, #3
 8003df8:	f000 80cf 	beq.w	8003f9a <HAL_GPIO_Init+0x48a>
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	691b      	ldr	r3, [r3, #16]
 8003e00:	2b03      	cmp	r3, #3
 8003e02:	f000 80ca 	beq.w	8003f9a <HAL_GPIO_Init+0x48a>
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	691b      	ldr	r3, [r3, #16]
 8003e0a:	2b03      	cmp	r3, #3
 8003e0c:	f000 80c5 	beq.w	8003f9a <HAL_GPIO_Init+0x48a>
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	691b      	ldr	r3, [r3, #16]
 8003e14:	2b04      	cmp	r3, #4
 8003e16:	f000 80c0 	beq.w	8003f9a <HAL_GPIO_Init+0x48a>
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	691b      	ldr	r3, [r3, #16]
 8003e1e:	2b04      	cmp	r3, #4
 8003e20:	f000 80bb 	beq.w	8003f9a <HAL_GPIO_Init+0x48a>
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	691b      	ldr	r3, [r3, #16]
 8003e28:	2b04      	cmp	r3, #4
 8003e2a:	f000 80b6 	beq.w	8003f9a <HAL_GPIO_Init+0x48a>
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	691b      	ldr	r3, [r3, #16]
 8003e32:	2b04      	cmp	r3, #4
 8003e34:	f000 80b1 	beq.w	8003f9a <HAL_GPIO_Init+0x48a>
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	691b      	ldr	r3, [r3, #16]
 8003e3c:	2b04      	cmp	r3, #4
 8003e3e:	f000 80ac 	beq.w	8003f9a <HAL_GPIO_Init+0x48a>
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	691b      	ldr	r3, [r3, #16]
 8003e46:	2b05      	cmp	r3, #5
 8003e48:	f000 80a7 	beq.w	8003f9a <HAL_GPIO_Init+0x48a>
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	691b      	ldr	r3, [r3, #16]
 8003e50:	2b05      	cmp	r3, #5
 8003e52:	f000 80a2 	beq.w	8003f9a <HAL_GPIO_Init+0x48a>
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	691b      	ldr	r3, [r3, #16]
 8003e5a:	2b05      	cmp	r3, #5
 8003e5c:	f000 809d 	beq.w	8003f9a <HAL_GPIO_Init+0x48a>
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	691b      	ldr	r3, [r3, #16]
 8003e64:	2b05      	cmp	r3, #5
 8003e66:	f000 8098 	beq.w	8003f9a <HAL_GPIO_Init+0x48a>
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	691b      	ldr	r3, [r3, #16]
 8003e6e:	2b05      	cmp	r3, #5
 8003e70:	f000 8093 	beq.w	8003f9a <HAL_GPIO_Init+0x48a>
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	691b      	ldr	r3, [r3, #16]
 8003e78:	2b05      	cmp	r3, #5
 8003e7a:	f000 808e 	beq.w	8003f9a <HAL_GPIO_Init+0x48a>
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	691b      	ldr	r3, [r3, #16]
 8003e82:	2b06      	cmp	r3, #6
 8003e84:	f000 8089 	beq.w	8003f9a <HAL_GPIO_Init+0x48a>
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	691b      	ldr	r3, [r3, #16]
 8003e8c:	2b06      	cmp	r3, #6
 8003e8e:	f000 8084 	beq.w	8003f9a <HAL_GPIO_Init+0x48a>
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	691b      	ldr	r3, [r3, #16]
 8003e96:	2b07      	cmp	r3, #7
 8003e98:	d07f      	beq.n	8003f9a <HAL_GPIO_Init+0x48a>
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	691b      	ldr	r3, [r3, #16]
 8003e9e:	2b07      	cmp	r3, #7
 8003ea0:	d07b      	beq.n	8003f9a <HAL_GPIO_Init+0x48a>
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	691b      	ldr	r3, [r3, #16]
 8003ea6:	2b07      	cmp	r3, #7
 8003ea8:	d077      	beq.n	8003f9a <HAL_GPIO_Init+0x48a>
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	691b      	ldr	r3, [r3, #16]
 8003eae:	2b07      	cmp	r3, #7
 8003eb0:	d073      	beq.n	8003f9a <HAL_GPIO_Init+0x48a>
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	691b      	ldr	r3, [r3, #16]
 8003eb6:	2b07      	cmp	r3, #7
 8003eb8:	d06f      	beq.n	8003f9a <HAL_GPIO_Init+0x48a>
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	691b      	ldr	r3, [r3, #16]
 8003ebe:	2b07      	cmp	r3, #7
 8003ec0:	d06b      	beq.n	8003f9a <HAL_GPIO_Init+0x48a>
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	691b      	ldr	r3, [r3, #16]
 8003ec6:	2b07      	cmp	r3, #7
 8003ec8:	d067      	beq.n	8003f9a <HAL_GPIO_Init+0x48a>
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	691b      	ldr	r3, [r3, #16]
 8003ece:	2b08      	cmp	r3, #8
 8003ed0:	d063      	beq.n	8003f9a <HAL_GPIO_Init+0x48a>
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	691b      	ldr	r3, [r3, #16]
 8003ed6:	2b08      	cmp	r3, #8
 8003ed8:	d05f      	beq.n	8003f9a <HAL_GPIO_Init+0x48a>
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	691b      	ldr	r3, [r3, #16]
 8003ede:	2b08      	cmp	r3, #8
 8003ee0:	d05b      	beq.n	8003f9a <HAL_GPIO_Init+0x48a>
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	691b      	ldr	r3, [r3, #16]
 8003ee6:	2b08      	cmp	r3, #8
 8003ee8:	d057      	beq.n	8003f9a <HAL_GPIO_Init+0x48a>
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	691b      	ldr	r3, [r3, #16]
 8003eee:	2b08      	cmp	r3, #8
 8003ef0:	d053      	beq.n	8003f9a <HAL_GPIO_Init+0x48a>
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	691b      	ldr	r3, [r3, #16]
 8003ef6:	2b08      	cmp	r3, #8
 8003ef8:	d04f      	beq.n	8003f9a <HAL_GPIO_Init+0x48a>
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	691b      	ldr	r3, [r3, #16]
 8003efe:	2b08      	cmp	r3, #8
 8003f00:	d04b      	beq.n	8003f9a <HAL_GPIO_Init+0x48a>
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	691b      	ldr	r3, [r3, #16]
 8003f06:	2b09      	cmp	r3, #9
 8003f08:	d047      	beq.n	8003f9a <HAL_GPIO_Init+0x48a>
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	691b      	ldr	r3, [r3, #16]
 8003f0e:	2b09      	cmp	r3, #9
 8003f10:	d043      	beq.n	8003f9a <HAL_GPIO_Init+0x48a>
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	691b      	ldr	r3, [r3, #16]
 8003f16:	2b09      	cmp	r3, #9
 8003f18:	d03f      	beq.n	8003f9a <HAL_GPIO_Init+0x48a>
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	691b      	ldr	r3, [r3, #16]
 8003f1e:	2b09      	cmp	r3, #9
 8003f20:	d03b      	beq.n	8003f9a <HAL_GPIO_Init+0x48a>
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	691b      	ldr	r3, [r3, #16]
 8003f26:	2b09      	cmp	r3, #9
 8003f28:	d037      	beq.n	8003f9a <HAL_GPIO_Init+0x48a>
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	691b      	ldr	r3, [r3, #16]
 8003f2e:	2b09      	cmp	r3, #9
 8003f30:	d033      	beq.n	8003f9a <HAL_GPIO_Init+0x48a>
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	691b      	ldr	r3, [r3, #16]
 8003f36:	2b09      	cmp	r3, #9
 8003f38:	d02f      	beq.n	8003f9a <HAL_GPIO_Init+0x48a>
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	691b      	ldr	r3, [r3, #16]
 8003f3e:	2b0a      	cmp	r3, #10
 8003f40:	d02b      	beq.n	8003f9a <HAL_GPIO_Init+0x48a>
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	691b      	ldr	r3, [r3, #16]
 8003f46:	2b0a      	cmp	r3, #10
 8003f48:	d027      	beq.n	8003f9a <HAL_GPIO_Init+0x48a>
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	691b      	ldr	r3, [r3, #16]
 8003f4e:	2b0a      	cmp	r3, #10
 8003f50:	d023      	beq.n	8003f9a <HAL_GPIO_Init+0x48a>
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	691b      	ldr	r3, [r3, #16]
 8003f56:	2b0a      	cmp	r3, #10
 8003f58:	d01f      	beq.n	8003f9a <HAL_GPIO_Init+0x48a>
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	691b      	ldr	r3, [r3, #16]
 8003f5e:	2b0b      	cmp	r3, #11
 8003f60:	d01b      	beq.n	8003f9a <HAL_GPIO_Init+0x48a>
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	691b      	ldr	r3, [r3, #16]
 8003f66:	2b0c      	cmp	r3, #12
 8003f68:	d017      	beq.n	8003f9a <HAL_GPIO_Init+0x48a>
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	691b      	ldr	r3, [r3, #16]
 8003f6e:	2b0c      	cmp	r3, #12
 8003f70:	d013      	beq.n	8003f9a <HAL_GPIO_Init+0x48a>
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	691b      	ldr	r3, [r3, #16]
 8003f76:	2b0c      	cmp	r3, #12
 8003f78:	d00f      	beq.n	8003f9a <HAL_GPIO_Init+0x48a>
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	691b      	ldr	r3, [r3, #16]
 8003f7e:	2b0f      	cmp	r3, #15
 8003f80:	d00b      	beq.n	8003f9a <HAL_GPIO_Init+0x48a>
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	691b      	ldr	r3, [r3, #16]
 8003f86:	2b0d      	cmp	r3, #13
 8003f88:	d007      	beq.n	8003f9a <HAL_GPIO_Init+0x48a>
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	691b      	ldr	r3, [r3, #16]
 8003f8e:	2b0e      	cmp	r3, #14
 8003f90:	d003      	beq.n	8003f9a <HAL_GPIO_Init+0x48a>
 8003f92:	21db      	movs	r1, #219	; 0xdb
 8003f94:	4888      	ldr	r0, [pc, #544]	; (80041b8 <HAL_GPIO_Init+0x6a8>)
 8003f96:	f7fe fd78 	bl	8002a8a <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003f9a:	69fb      	ldr	r3, [r7, #28]
 8003f9c:	08da      	lsrs	r2, r3, #3
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	3208      	adds	r2, #8
 8003fa2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003fa6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003fa8:	69fb      	ldr	r3, [r7, #28]
 8003faa:	f003 0307 	and.w	r3, r3, #7
 8003fae:	009b      	lsls	r3, r3, #2
 8003fb0:	220f      	movs	r2, #15
 8003fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb6:	43db      	mvns	r3, r3
 8003fb8:	69ba      	ldr	r2, [r7, #24]
 8003fba:	4013      	ands	r3, r2
 8003fbc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	691a      	ldr	r2, [r3, #16]
 8003fc2:	69fb      	ldr	r3, [r7, #28]
 8003fc4:	f003 0307 	and.w	r3, r3, #7
 8003fc8:	009b      	lsls	r3, r3, #2
 8003fca:	fa02 f303 	lsl.w	r3, r2, r3
 8003fce:	69ba      	ldr	r2, [r7, #24]
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003fd4:	69fb      	ldr	r3, [r7, #28]
 8003fd6:	08da      	lsrs	r2, r3, #3
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	3208      	adds	r2, #8
 8003fdc:	69b9      	ldr	r1, [r7, #24]
 8003fde:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003fe8:	69fb      	ldr	r3, [r7, #28]
 8003fea:	005b      	lsls	r3, r3, #1
 8003fec:	2203      	movs	r2, #3
 8003fee:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff2:	43db      	mvns	r3, r3
 8003ff4:	69ba      	ldr	r2, [r7, #24]
 8003ff6:	4013      	ands	r3, r2
 8003ff8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	f003 0203 	and.w	r2, r3, #3
 8004002:	69fb      	ldr	r3, [r7, #28]
 8004004:	005b      	lsls	r3, r3, #1
 8004006:	fa02 f303 	lsl.w	r3, r2, r3
 800400a:	69ba      	ldr	r2, [r7, #24]
 800400c:	4313      	orrs	r3, r2
 800400e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	69ba      	ldr	r2, [r7, #24]
 8004014:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800401e:	2b00      	cmp	r3, #0
 8004020:	f000 80be 	beq.w	80041a0 <HAL_GPIO_Init+0x690>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004024:	4b65      	ldr	r3, [pc, #404]	; (80041bc <HAL_GPIO_Init+0x6ac>)
 8004026:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004028:	4a64      	ldr	r2, [pc, #400]	; (80041bc <HAL_GPIO_Init+0x6ac>)
 800402a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800402e:	6453      	str	r3, [r2, #68]	; 0x44
 8004030:	4b62      	ldr	r3, [pc, #392]	; (80041bc <HAL_GPIO_Init+0x6ac>)
 8004032:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004034:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004038:	60fb      	str	r3, [r7, #12]
 800403a:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800403c:	4a60      	ldr	r2, [pc, #384]	; (80041c0 <HAL_GPIO_Init+0x6b0>)
 800403e:	69fb      	ldr	r3, [r7, #28]
 8004040:	089b      	lsrs	r3, r3, #2
 8004042:	3302      	adds	r3, #2
 8004044:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004048:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800404a:	69fb      	ldr	r3, [r7, #28]
 800404c:	f003 0303 	and.w	r3, r3, #3
 8004050:	009b      	lsls	r3, r3, #2
 8004052:	220f      	movs	r2, #15
 8004054:	fa02 f303 	lsl.w	r3, r2, r3
 8004058:	43db      	mvns	r3, r3
 800405a:	69ba      	ldr	r2, [r7, #24]
 800405c:	4013      	ands	r3, r2
 800405e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	4a58      	ldr	r2, [pc, #352]	; (80041c4 <HAL_GPIO_Init+0x6b4>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d037      	beq.n	80040d8 <HAL_GPIO_Init+0x5c8>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	4a57      	ldr	r2, [pc, #348]	; (80041c8 <HAL_GPIO_Init+0x6b8>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d031      	beq.n	80040d4 <HAL_GPIO_Init+0x5c4>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	4a56      	ldr	r2, [pc, #344]	; (80041cc <HAL_GPIO_Init+0x6bc>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d02b      	beq.n	80040d0 <HAL_GPIO_Init+0x5c0>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	4a55      	ldr	r2, [pc, #340]	; (80041d0 <HAL_GPIO_Init+0x6c0>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d025      	beq.n	80040cc <HAL_GPIO_Init+0x5bc>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	4a54      	ldr	r2, [pc, #336]	; (80041d4 <HAL_GPIO_Init+0x6c4>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d01f      	beq.n	80040c8 <HAL_GPIO_Init+0x5b8>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	4a53      	ldr	r2, [pc, #332]	; (80041d8 <HAL_GPIO_Init+0x6c8>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d019      	beq.n	80040c4 <HAL_GPIO_Init+0x5b4>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	4a52      	ldr	r2, [pc, #328]	; (80041dc <HAL_GPIO_Init+0x6cc>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d013      	beq.n	80040c0 <HAL_GPIO_Init+0x5b0>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	4a51      	ldr	r2, [pc, #324]	; (80041e0 <HAL_GPIO_Init+0x6d0>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d00d      	beq.n	80040bc <HAL_GPIO_Init+0x5ac>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	4a50      	ldr	r2, [pc, #320]	; (80041e4 <HAL_GPIO_Init+0x6d4>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d007      	beq.n	80040b8 <HAL_GPIO_Init+0x5a8>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	4a4f      	ldr	r2, [pc, #316]	; (80041e8 <HAL_GPIO_Init+0x6d8>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d101      	bne.n	80040b4 <HAL_GPIO_Init+0x5a4>
 80040b0:	2309      	movs	r3, #9
 80040b2:	e012      	b.n	80040da <HAL_GPIO_Init+0x5ca>
 80040b4:	230a      	movs	r3, #10
 80040b6:	e010      	b.n	80040da <HAL_GPIO_Init+0x5ca>
 80040b8:	2308      	movs	r3, #8
 80040ba:	e00e      	b.n	80040da <HAL_GPIO_Init+0x5ca>
 80040bc:	2307      	movs	r3, #7
 80040be:	e00c      	b.n	80040da <HAL_GPIO_Init+0x5ca>
 80040c0:	2306      	movs	r3, #6
 80040c2:	e00a      	b.n	80040da <HAL_GPIO_Init+0x5ca>
 80040c4:	2305      	movs	r3, #5
 80040c6:	e008      	b.n	80040da <HAL_GPIO_Init+0x5ca>
 80040c8:	2304      	movs	r3, #4
 80040ca:	e006      	b.n	80040da <HAL_GPIO_Init+0x5ca>
 80040cc:	2303      	movs	r3, #3
 80040ce:	e004      	b.n	80040da <HAL_GPIO_Init+0x5ca>
 80040d0:	2302      	movs	r3, #2
 80040d2:	e002      	b.n	80040da <HAL_GPIO_Init+0x5ca>
 80040d4:	2301      	movs	r3, #1
 80040d6:	e000      	b.n	80040da <HAL_GPIO_Init+0x5ca>
 80040d8:	2300      	movs	r3, #0
 80040da:	69fa      	ldr	r2, [r7, #28]
 80040dc:	f002 0203 	and.w	r2, r2, #3
 80040e0:	0092      	lsls	r2, r2, #2
 80040e2:	4093      	lsls	r3, r2
 80040e4:	69ba      	ldr	r2, [r7, #24]
 80040e6:	4313      	orrs	r3, r2
 80040e8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80040ea:	4935      	ldr	r1, [pc, #212]	; (80041c0 <HAL_GPIO_Init+0x6b0>)
 80040ec:	69fb      	ldr	r3, [r7, #28]
 80040ee:	089b      	lsrs	r3, r3, #2
 80040f0:	3302      	adds	r3, #2
 80040f2:	69ba      	ldr	r2, [r7, #24]
 80040f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80040f8:	4b3c      	ldr	r3, [pc, #240]	; (80041ec <HAL_GPIO_Init+0x6dc>)
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	43db      	mvns	r3, r3
 8004102:	69ba      	ldr	r2, [r7, #24]
 8004104:	4013      	ands	r3, r2
 8004106:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004110:	2b00      	cmp	r3, #0
 8004112:	d003      	beq.n	800411c <HAL_GPIO_Init+0x60c>
        {
          temp |= iocurrent;
 8004114:	69ba      	ldr	r2, [r7, #24]
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	4313      	orrs	r3, r2
 800411a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800411c:	4a33      	ldr	r2, [pc, #204]	; (80041ec <HAL_GPIO_Init+0x6dc>)
 800411e:	69bb      	ldr	r3, [r7, #24]
 8004120:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004122:	4b32      	ldr	r3, [pc, #200]	; (80041ec <HAL_GPIO_Init+0x6dc>)
 8004124:	68db      	ldr	r3, [r3, #12]
 8004126:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	43db      	mvns	r3, r3
 800412c:	69ba      	ldr	r2, [r7, #24]
 800412e:	4013      	ands	r3, r2
 8004130:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800413a:	2b00      	cmp	r3, #0
 800413c:	d003      	beq.n	8004146 <HAL_GPIO_Init+0x636>
        {
          temp |= iocurrent;
 800413e:	69ba      	ldr	r2, [r7, #24]
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	4313      	orrs	r3, r2
 8004144:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004146:	4a29      	ldr	r2, [pc, #164]	; (80041ec <HAL_GPIO_Init+0x6dc>)
 8004148:	69bb      	ldr	r3, [r7, #24]
 800414a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800414c:	4b27      	ldr	r3, [pc, #156]	; (80041ec <HAL_GPIO_Init+0x6dc>)
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	43db      	mvns	r3, r3
 8004156:	69ba      	ldr	r2, [r7, #24]
 8004158:	4013      	ands	r3, r2
 800415a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004164:	2b00      	cmp	r3, #0
 8004166:	d003      	beq.n	8004170 <HAL_GPIO_Init+0x660>
        {
          temp |= iocurrent;
 8004168:	69ba      	ldr	r2, [r7, #24]
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	4313      	orrs	r3, r2
 800416e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004170:	4a1e      	ldr	r2, [pc, #120]	; (80041ec <HAL_GPIO_Init+0x6dc>)
 8004172:	69bb      	ldr	r3, [r7, #24]
 8004174:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004176:	4b1d      	ldr	r3, [pc, #116]	; (80041ec <HAL_GPIO_Init+0x6dc>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	43db      	mvns	r3, r3
 8004180:	69ba      	ldr	r2, [r7, #24]
 8004182:	4013      	ands	r3, r2
 8004184:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800418e:	2b00      	cmp	r3, #0
 8004190:	d003      	beq.n	800419a <HAL_GPIO_Init+0x68a>
        {
          temp |= iocurrent;
 8004192:	69ba      	ldr	r2, [r7, #24]
 8004194:	693b      	ldr	r3, [r7, #16]
 8004196:	4313      	orrs	r3, r2
 8004198:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800419a:	4a14      	ldr	r2, [pc, #80]	; (80041ec <HAL_GPIO_Init+0x6dc>)
 800419c:	69bb      	ldr	r3, [r7, #24]
 800419e:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80041a0:	69fb      	ldr	r3, [r7, #28]
 80041a2:	3301      	adds	r3, #1
 80041a4:	61fb      	str	r3, [r7, #28]
 80041a6:	69fb      	ldr	r3, [r7, #28]
 80041a8:	2b0f      	cmp	r3, #15
 80041aa:	f67f ad4d 	bls.w	8003c48 <HAL_GPIO_Init+0x138>
      }
    }
  }
}
 80041ae:	bf00      	nop
 80041b0:	bf00      	nop
 80041b2:	3720      	adds	r7, #32
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}
 80041b8:	080166c0 	.word	0x080166c0
 80041bc:	40023800 	.word	0x40023800
 80041c0:	40013800 	.word	0x40013800
 80041c4:	40020000 	.word	0x40020000
 80041c8:	40020400 	.word	0x40020400
 80041cc:	40020800 	.word	0x40020800
 80041d0:	40020c00 	.word	0x40020c00
 80041d4:	40021000 	.word	0x40021000
 80041d8:	40021400 	.word	0x40021400
 80041dc:	40021800 	.word	0x40021800
 80041e0:	40021c00 	.word	0x40021c00
 80041e4:	40022000 	.word	0x40022000
 80041e8:	40022400 	.word	0x40022400
 80041ec:	40013c00 	.word	0x40013c00

080041f0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b084      	sub	sp, #16
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
 80041f8:	460b      	mov	r3, r1
 80041fa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80041fc:	887b      	ldrh	r3, [r7, #2]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d104      	bne.n	800420c <HAL_GPIO_ReadPin+0x1c>
 8004202:	f240 1177 	movw	r1, #375	; 0x177
 8004206:	4809      	ldr	r0, [pc, #36]	; (800422c <HAL_GPIO_ReadPin+0x3c>)
 8004208:	f7fe fc3f 	bl	8002a8a <assert_failed>

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	691a      	ldr	r2, [r3, #16]
 8004210:	887b      	ldrh	r3, [r7, #2]
 8004212:	4013      	ands	r3, r2
 8004214:	2b00      	cmp	r3, #0
 8004216:	d002      	beq.n	800421e <HAL_GPIO_ReadPin+0x2e>
  {
    bitstatus = GPIO_PIN_SET;
 8004218:	2301      	movs	r3, #1
 800421a:	73fb      	strb	r3, [r7, #15]
 800421c:	e001      	b.n	8004222 <HAL_GPIO_ReadPin+0x32>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800421e:	2300      	movs	r3, #0
 8004220:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004222:	7bfb      	ldrb	r3, [r7, #15]
}
 8004224:	4618      	mov	r0, r3
 8004226:	3710      	adds	r7, #16
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}
 800422c:	080166c0 	.word	0x080166c0

08004230 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b082      	sub	sp, #8
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
 8004238:	460b      	mov	r3, r1
 800423a:	807b      	strh	r3, [r7, #2]
 800423c:	4613      	mov	r3, r2
 800423e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8004240:	887b      	ldrh	r3, [r7, #2]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d104      	bne.n	8004250 <HAL_GPIO_WritePin+0x20>
 8004246:	f240 1197 	movw	r1, #407	; 0x197
 800424a:	480e      	ldr	r0, [pc, #56]	; (8004284 <HAL_GPIO_WritePin+0x54>)
 800424c:	f7fe fc1d 	bl	8002a8a <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8004250:	787b      	ldrb	r3, [r7, #1]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d007      	beq.n	8004266 <HAL_GPIO_WritePin+0x36>
 8004256:	787b      	ldrb	r3, [r7, #1]
 8004258:	2b01      	cmp	r3, #1
 800425a:	d004      	beq.n	8004266 <HAL_GPIO_WritePin+0x36>
 800425c:	f44f 71cc 	mov.w	r1, #408	; 0x198
 8004260:	4808      	ldr	r0, [pc, #32]	; (8004284 <HAL_GPIO_WritePin+0x54>)
 8004262:	f7fe fc12 	bl	8002a8a <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8004266:	787b      	ldrb	r3, [r7, #1]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d003      	beq.n	8004274 <HAL_GPIO_WritePin+0x44>
  {
    GPIOx->BSRR = GPIO_Pin;
 800426c:	887a      	ldrh	r2, [r7, #2]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004272:	e003      	b.n	800427c <HAL_GPIO_WritePin+0x4c>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004274:	887b      	ldrh	r3, [r7, #2]
 8004276:	041a      	lsls	r2, r3, #16
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	619a      	str	r2, [r3, #24]
}
 800427c:	bf00      	nop
 800427e:	3708      	adds	r7, #8
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}
 8004284:	080166c0 	.word	0x080166c0

08004288 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b082      	sub	sp, #8
 800428c:	af00      	add	r7, sp, #0
 800428e:	4603      	mov	r3, r0
 8004290:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004292:	4b08      	ldr	r3, [pc, #32]	; (80042b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004294:	695a      	ldr	r2, [r3, #20]
 8004296:	88fb      	ldrh	r3, [r7, #6]
 8004298:	4013      	ands	r3, r2
 800429a:	2b00      	cmp	r3, #0
 800429c:	d006      	beq.n	80042ac <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800429e:	4a05      	ldr	r2, [pc, #20]	; (80042b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80042a0:	88fb      	ldrh	r3, [r7, #6]
 80042a2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80042a4:	88fb      	ldrh	r3, [r7, #6]
 80042a6:	4618      	mov	r0, r3
 80042a8:	f000 f806 	bl	80042b8 <HAL_GPIO_EXTI_Callback>
  }
}
 80042ac:	bf00      	nop
 80042ae:	3708      	adds	r7, #8
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}
 80042b4:	40013c00 	.word	0x40013c00

080042b8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b083      	sub	sp, #12
 80042bc:	af00      	add	r7, sp, #0
 80042be:	4603      	mov	r3, r0
 80042c0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80042c2:	bf00      	nop
 80042c4:	370c      	adds	r7, #12
 80042c6:	46bd      	mov	sp, r7
 80042c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042cc:	4770      	bx	lr
	...

080042d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b082      	sub	sp, #8
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d101      	bne.n	80042e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80042de:	2301      	movs	r3, #1
 80042e0:	e107      	b.n	80044f2 <HAL_I2C_Init+0x222>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a85      	ldr	r2, [pc, #532]	; (80044fc <HAL_I2C_Init+0x22c>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d013      	beq.n	8004314 <HAL_I2C_Init+0x44>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a83      	ldr	r2, [pc, #524]	; (8004500 <HAL_I2C_Init+0x230>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d00e      	beq.n	8004314 <HAL_I2C_Init+0x44>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a82      	ldr	r2, [pc, #520]	; (8004504 <HAL_I2C_Init+0x234>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d009      	beq.n	8004314 <HAL_I2C_Init+0x44>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a80      	ldr	r2, [pc, #512]	; (8004508 <HAL_I2C_Init+0x238>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d004      	beq.n	8004314 <HAL_I2C_Init+0x44>
 800430a:	f240 2119 	movw	r1, #537	; 0x219
 800430e:	487f      	ldr	r0, [pc, #508]	; (800450c <HAL_I2C_Init+0x23c>)
 8004310:	f7fe fbbb 	bl	8002a8a <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	689b      	ldr	r3, [r3, #8]
 8004318:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800431c:	d304      	bcc.n	8004328 <HAL_I2C_Init+0x58>
 800431e:	f240 211a 	movw	r1, #538	; 0x21a
 8004322:	487a      	ldr	r0, [pc, #488]	; (800450c <HAL_I2C_Init+0x23c>)
 8004324:	f7fe fbb1 	bl	8002a8a <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	68db      	ldr	r3, [r3, #12]
 800432c:	2b01      	cmp	r3, #1
 800432e:	d008      	beq.n	8004342 <HAL_I2C_Init+0x72>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	68db      	ldr	r3, [r3, #12]
 8004334:	2b02      	cmp	r3, #2
 8004336:	d004      	beq.n	8004342 <HAL_I2C_Init+0x72>
 8004338:	f240 211b 	movw	r1, #539	; 0x21b
 800433c:	4873      	ldr	r0, [pc, #460]	; (800450c <HAL_I2C_Init+0x23c>)
 800433e:	f7fe fba4 	bl	8002a8a <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	691b      	ldr	r3, [r3, #16]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d009      	beq.n	800435e <HAL_I2C_Init+0x8e>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	691b      	ldr	r3, [r3, #16]
 800434e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004352:	d004      	beq.n	800435e <HAL_I2C_Init+0x8e>
 8004354:	f44f 7107 	mov.w	r1, #540	; 0x21c
 8004358:	486c      	ldr	r0, [pc, #432]	; (800450c <HAL_I2C_Init+0x23c>)
 800435a:	f7fe fb96 	bl	8002a8a <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	695b      	ldr	r3, [r3, #20]
 8004362:	2bff      	cmp	r3, #255	; 0xff
 8004364:	d904      	bls.n	8004370 <HAL_I2C_Init+0xa0>
 8004366:	f240 211d 	movw	r1, #541	; 0x21d
 800436a:	4868      	ldr	r0, [pc, #416]	; (800450c <HAL_I2C_Init+0x23c>)
 800436c:	f7fe fb8d 	bl	8002a8a <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	699b      	ldr	r3, [r3, #24]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d020      	beq.n	80043ba <HAL_I2C_Init+0xea>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	699b      	ldr	r3, [r3, #24]
 800437c:	2b01      	cmp	r3, #1
 800437e:	d01c      	beq.n	80043ba <HAL_I2C_Init+0xea>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	699b      	ldr	r3, [r3, #24]
 8004384:	2b02      	cmp	r3, #2
 8004386:	d018      	beq.n	80043ba <HAL_I2C_Init+0xea>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	699b      	ldr	r3, [r3, #24]
 800438c:	2b03      	cmp	r3, #3
 800438e:	d014      	beq.n	80043ba <HAL_I2C_Init+0xea>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	699b      	ldr	r3, [r3, #24]
 8004394:	2b04      	cmp	r3, #4
 8004396:	d010      	beq.n	80043ba <HAL_I2C_Init+0xea>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	699b      	ldr	r3, [r3, #24]
 800439c:	2b05      	cmp	r3, #5
 800439e:	d00c      	beq.n	80043ba <HAL_I2C_Init+0xea>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	699b      	ldr	r3, [r3, #24]
 80043a4:	2b06      	cmp	r3, #6
 80043a6:	d008      	beq.n	80043ba <HAL_I2C_Init+0xea>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	699b      	ldr	r3, [r3, #24]
 80043ac:	2b07      	cmp	r3, #7
 80043ae:	d004      	beq.n	80043ba <HAL_I2C_Init+0xea>
 80043b0:	f240 211e 	movw	r1, #542	; 0x21e
 80043b4:	4855      	ldr	r0, [pc, #340]	; (800450c <HAL_I2C_Init+0x23c>)
 80043b6:	f7fe fb68 	bl	8002a8a <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	69db      	ldr	r3, [r3, #28]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d009      	beq.n	80043d6 <HAL_I2C_Init+0x106>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	69db      	ldr	r3, [r3, #28]
 80043c6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80043ca:	d004      	beq.n	80043d6 <HAL_I2C_Init+0x106>
 80043cc:	f240 211f 	movw	r1, #543	; 0x21f
 80043d0:	484e      	ldr	r0, [pc, #312]	; (800450c <HAL_I2C_Init+0x23c>)
 80043d2:	f7fe fb5a 	bl	8002a8a <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6a1b      	ldr	r3, [r3, #32]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d009      	beq.n	80043f2 <HAL_I2C_Init+0x122>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6a1b      	ldr	r3, [r3, #32]
 80043e2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80043e6:	d004      	beq.n	80043f2 <HAL_I2C_Init+0x122>
 80043e8:	f44f 7108 	mov.w	r1, #544	; 0x220
 80043ec:	4847      	ldr	r0, [pc, #284]	; (800450c <HAL_I2C_Init+0x23c>)
 80043ee:	f7fe fb4c 	bl	8002a8a <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80043f8:	b2db      	uxtb	r3, r3
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d106      	bne.n	800440c <HAL_I2C_Init+0x13c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2200      	movs	r2, #0
 8004402:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	f7fd f8da 	bl	80015c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2224      	movs	r2, #36	; 0x24
 8004410:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	681a      	ldr	r2, [r3, #0]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f022 0201 	bic.w	r2, r2, #1
 8004422:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	685a      	ldr	r2, [r3, #4]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004430:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	689a      	ldr	r2, [r3, #8]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004440:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	68db      	ldr	r3, [r3, #12]
 8004446:	2b01      	cmp	r3, #1
 8004448:	d107      	bne.n	800445a <HAL_I2C_Init+0x18a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	689a      	ldr	r2, [r3, #8]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004456:	609a      	str	r2, [r3, #8]
 8004458:	e006      	b.n	8004468 <HAL_I2C_Init+0x198>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	689a      	ldr	r2, [r3, #8]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004466:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	68db      	ldr	r3, [r3, #12]
 800446c:	2b02      	cmp	r3, #2
 800446e:	d104      	bne.n	800447a <HAL_I2C_Init+0x1aa>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004478:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	6859      	ldr	r1, [r3, #4]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681a      	ldr	r2, [r3, #0]
 8004484:	4b22      	ldr	r3, [pc, #136]	; (8004510 <HAL_I2C_Init+0x240>)
 8004486:	430b      	orrs	r3, r1
 8004488:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	68da      	ldr	r2, [r3, #12]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004498:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	691a      	ldr	r2, [r3, #16]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	695b      	ldr	r3, [r3, #20]
 80044a2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	699b      	ldr	r3, [r3, #24]
 80044aa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	430a      	orrs	r2, r1
 80044b2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	69d9      	ldr	r1, [r3, #28]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6a1a      	ldr	r2, [r3, #32]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	430a      	orrs	r2, r1
 80044c2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	681a      	ldr	r2, [r3, #0]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f042 0201 	orr.w	r2, r2, #1
 80044d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2200      	movs	r2, #0
 80044d8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2220      	movs	r2, #32
 80044de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2200      	movs	r2, #0
 80044e6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2200      	movs	r2, #0
 80044ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80044f0:	2300      	movs	r3, #0
}
 80044f2:	4618      	mov	r0, r3
 80044f4:	3708      	adds	r7, #8
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}
 80044fa:	bf00      	nop
 80044fc:	40005400 	.word	0x40005400
 8004500:	40005800 	.word	0x40005800
 8004504:	40005c00 	.word	0x40005c00
 8004508:	40006000 	.word	0x40006000
 800450c:	080166fc 	.word	0x080166fc
 8004510:	02008000 	.word	0x02008000

08004514 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b088      	sub	sp, #32
 8004518:	af02      	add	r7, sp, #8
 800451a:	60f8      	str	r0, [r7, #12]
 800451c:	607a      	str	r2, [r7, #4]
 800451e:	461a      	mov	r2, r3
 8004520:	460b      	mov	r3, r1
 8004522:	817b      	strh	r3, [r7, #10]
 8004524:	4613      	mov	r3, r2
 8004526:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800452e:	b2db      	uxtb	r3, r3
 8004530:	2b20      	cmp	r3, #32
 8004532:	f040 80da 	bne.w	80046ea <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800453c:	2b01      	cmp	r3, #1
 800453e:	d101      	bne.n	8004544 <HAL_I2C_Master_Transmit+0x30>
 8004540:	2302      	movs	r3, #2
 8004542:	e0d3      	b.n	80046ec <HAL_I2C_Master_Transmit+0x1d8>
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	2201      	movs	r2, #1
 8004548:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800454c:	f7ff f8d0 	bl	80036f0 <HAL_GetTick>
 8004550:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	9300      	str	r3, [sp, #0]
 8004556:	2319      	movs	r3, #25
 8004558:	2201      	movs	r2, #1
 800455a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800455e:	68f8      	ldr	r0, [r7, #12]
 8004560:	f000 fefb 	bl	800535a <I2C_WaitOnFlagUntilTimeout>
 8004564:	4603      	mov	r3, r0
 8004566:	2b00      	cmp	r3, #0
 8004568:	d001      	beq.n	800456e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	e0be      	b.n	80046ec <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	2221      	movs	r2, #33	; 0x21
 8004572:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	2210      	movs	r2, #16
 800457a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	2200      	movs	r2, #0
 8004582:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	687a      	ldr	r2, [r7, #4]
 8004588:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	893a      	ldrh	r2, [r7, #8]
 800458e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	2200      	movs	r2, #0
 8004594:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800459a:	b29b      	uxth	r3, r3
 800459c:	2bff      	cmp	r3, #255	; 0xff
 800459e:	d90e      	bls.n	80045be <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	22ff      	movs	r2, #255	; 0xff
 80045a4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045aa:	b2da      	uxtb	r2, r3
 80045ac:	8979      	ldrh	r1, [r7, #10]
 80045ae:	4b51      	ldr	r3, [pc, #324]	; (80046f4 <HAL_I2C_Master_Transmit+0x1e0>)
 80045b0:	9300      	str	r3, [sp, #0]
 80045b2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80045b6:	68f8      	ldr	r0, [r7, #12]
 80045b8:	f001 f8e6 	bl	8005788 <I2C_TransferConfig>
 80045bc:	e06c      	b.n	8004698 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045c2:	b29a      	uxth	r2, r3
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045cc:	b2da      	uxtb	r2, r3
 80045ce:	8979      	ldrh	r1, [r7, #10]
 80045d0:	4b48      	ldr	r3, [pc, #288]	; (80046f4 <HAL_I2C_Master_Transmit+0x1e0>)
 80045d2:	9300      	str	r3, [sp, #0]
 80045d4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80045d8:	68f8      	ldr	r0, [r7, #12]
 80045da:	f001 f8d5 	bl	8005788 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80045de:	e05b      	b.n	8004698 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045e0:	697a      	ldr	r2, [r7, #20]
 80045e2:	6a39      	ldr	r1, [r7, #32]
 80045e4:	68f8      	ldr	r0, [r7, #12]
 80045e6:	f000 fef8 	bl	80053da <I2C_WaitOnTXISFlagUntilTimeout>
 80045ea:	4603      	mov	r3, r0
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d001      	beq.n	80045f4 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80045f0:	2301      	movs	r3, #1
 80045f2:	e07b      	b.n	80046ec <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f8:	781a      	ldrb	r2, [r3, #0]
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004604:	1c5a      	adds	r2, r3, #1
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800460e:	b29b      	uxth	r3, r3
 8004610:	3b01      	subs	r3, #1
 8004612:	b29a      	uxth	r2, r3
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800461c:	3b01      	subs	r3, #1
 800461e:	b29a      	uxth	r2, r3
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004628:	b29b      	uxth	r3, r3
 800462a:	2b00      	cmp	r3, #0
 800462c:	d034      	beq.n	8004698 <HAL_I2C_Master_Transmit+0x184>
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004632:	2b00      	cmp	r3, #0
 8004634:	d130      	bne.n	8004698 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	9300      	str	r3, [sp, #0]
 800463a:	6a3b      	ldr	r3, [r7, #32]
 800463c:	2200      	movs	r2, #0
 800463e:	2180      	movs	r1, #128	; 0x80
 8004640:	68f8      	ldr	r0, [r7, #12]
 8004642:	f000 fe8a 	bl	800535a <I2C_WaitOnFlagUntilTimeout>
 8004646:	4603      	mov	r3, r0
 8004648:	2b00      	cmp	r3, #0
 800464a:	d001      	beq.n	8004650 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800464c:	2301      	movs	r3, #1
 800464e:	e04d      	b.n	80046ec <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004654:	b29b      	uxth	r3, r3
 8004656:	2bff      	cmp	r3, #255	; 0xff
 8004658:	d90e      	bls.n	8004678 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	22ff      	movs	r2, #255	; 0xff
 800465e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004664:	b2da      	uxtb	r2, r3
 8004666:	8979      	ldrh	r1, [r7, #10]
 8004668:	2300      	movs	r3, #0
 800466a:	9300      	str	r3, [sp, #0]
 800466c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004670:	68f8      	ldr	r0, [r7, #12]
 8004672:	f001 f889 	bl	8005788 <I2C_TransferConfig>
 8004676:	e00f      	b.n	8004698 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800467c:	b29a      	uxth	r2, r3
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004686:	b2da      	uxtb	r2, r3
 8004688:	8979      	ldrh	r1, [r7, #10]
 800468a:	2300      	movs	r3, #0
 800468c:	9300      	str	r3, [sp, #0]
 800468e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004692:	68f8      	ldr	r0, [r7, #12]
 8004694:	f001 f878 	bl	8005788 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800469c:	b29b      	uxth	r3, r3
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d19e      	bne.n	80045e0 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046a2:	697a      	ldr	r2, [r7, #20]
 80046a4:	6a39      	ldr	r1, [r7, #32]
 80046a6:	68f8      	ldr	r0, [r7, #12]
 80046a8:	f000 fed7 	bl	800545a <I2C_WaitOnSTOPFlagUntilTimeout>
 80046ac:	4603      	mov	r3, r0
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d001      	beq.n	80046b6 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80046b2:	2301      	movs	r3, #1
 80046b4:	e01a      	b.n	80046ec <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	2220      	movs	r2, #32
 80046bc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	6859      	ldr	r1, [r3, #4]
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681a      	ldr	r2, [r3, #0]
 80046c8:	4b0b      	ldr	r3, [pc, #44]	; (80046f8 <HAL_I2C_Master_Transmit+0x1e4>)
 80046ca:	400b      	ands	r3, r1
 80046cc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	2220      	movs	r2, #32
 80046d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	2200      	movs	r2, #0
 80046da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	2200      	movs	r2, #0
 80046e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80046e6:	2300      	movs	r3, #0
 80046e8:	e000      	b.n	80046ec <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80046ea:	2302      	movs	r3, #2
  }
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	3718      	adds	r7, #24
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd80      	pop	{r7, pc}
 80046f4:	80002000 	.word	0x80002000
 80046f8:	fe00e800 	.word	0xfe00e800

080046fc <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b088      	sub	sp, #32
 8004700:	af02      	add	r7, sp, #8
 8004702:	60f8      	str	r0, [r7, #12]
 8004704:	607a      	str	r2, [r7, #4]
 8004706:	461a      	mov	r2, r3
 8004708:	460b      	mov	r3, r1
 800470a:	817b      	strh	r3, [r7, #10]
 800470c:	4613      	mov	r3, r2
 800470e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004716:	b2db      	uxtb	r3, r3
 8004718:	2b20      	cmp	r3, #32
 800471a:	f040 80db 	bne.w	80048d4 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004724:	2b01      	cmp	r3, #1
 8004726:	d101      	bne.n	800472c <HAL_I2C_Master_Receive+0x30>
 8004728:	2302      	movs	r3, #2
 800472a:	e0d4      	b.n	80048d6 <HAL_I2C_Master_Receive+0x1da>
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	2201      	movs	r2, #1
 8004730:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004734:	f7fe ffdc 	bl	80036f0 <HAL_GetTick>
 8004738:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	9300      	str	r3, [sp, #0]
 800473e:	2319      	movs	r3, #25
 8004740:	2201      	movs	r2, #1
 8004742:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004746:	68f8      	ldr	r0, [r7, #12]
 8004748:	f000 fe07 	bl	800535a <I2C_WaitOnFlagUntilTimeout>
 800474c:	4603      	mov	r3, r0
 800474e:	2b00      	cmp	r3, #0
 8004750:	d001      	beq.n	8004756 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8004752:	2301      	movs	r3, #1
 8004754:	e0bf      	b.n	80048d6 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	2222      	movs	r2, #34	; 0x22
 800475a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	2210      	movs	r2, #16
 8004762:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2200      	movs	r2, #0
 800476a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	687a      	ldr	r2, [r7, #4]
 8004770:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	893a      	ldrh	r2, [r7, #8]
 8004776:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	2200      	movs	r2, #0
 800477c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004782:	b29b      	uxth	r3, r3
 8004784:	2bff      	cmp	r3, #255	; 0xff
 8004786:	d90e      	bls.n	80047a6 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	22ff      	movs	r2, #255	; 0xff
 800478c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004792:	b2da      	uxtb	r2, r3
 8004794:	8979      	ldrh	r1, [r7, #10]
 8004796:	4b52      	ldr	r3, [pc, #328]	; (80048e0 <HAL_I2C_Master_Receive+0x1e4>)
 8004798:	9300      	str	r3, [sp, #0]
 800479a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800479e:	68f8      	ldr	r0, [r7, #12]
 80047a0:	f000 fff2 	bl	8005788 <I2C_TransferConfig>
 80047a4:	e06d      	b.n	8004882 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047aa:	b29a      	uxth	r2, r3
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047b4:	b2da      	uxtb	r2, r3
 80047b6:	8979      	ldrh	r1, [r7, #10]
 80047b8:	4b49      	ldr	r3, [pc, #292]	; (80048e0 <HAL_I2C_Master_Receive+0x1e4>)
 80047ba:	9300      	str	r3, [sp, #0]
 80047bc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80047c0:	68f8      	ldr	r0, [r7, #12]
 80047c2:	f000 ffe1 	bl	8005788 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80047c6:	e05c      	b.n	8004882 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80047c8:	697a      	ldr	r2, [r7, #20]
 80047ca:	6a39      	ldr	r1, [r7, #32]
 80047cc:	68f8      	ldr	r0, [r7, #12]
 80047ce:	f000 fe81 	bl	80054d4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80047d2:	4603      	mov	r3, r0
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d001      	beq.n	80047dc <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80047d8:	2301      	movs	r3, #1
 80047da:	e07c      	b.n	80048d6 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e6:	b2d2      	uxtb	r2, r2
 80047e8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ee:	1c5a      	adds	r2, r3, #1
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047f8:	3b01      	subs	r3, #1
 80047fa:	b29a      	uxth	r2, r3
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004804:	b29b      	uxth	r3, r3
 8004806:	3b01      	subs	r3, #1
 8004808:	b29a      	uxth	r2, r3
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004812:	b29b      	uxth	r3, r3
 8004814:	2b00      	cmp	r3, #0
 8004816:	d034      	beq.n	8004882 <HAL_I2C_Master_Receive+0x186>
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800481c:	2b00      	cmp	r3, #0
 800481e:	d130      	bne.n	8004882 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	9300      	str	r3, [sp, #0]
 8004824:	6a3b      	ldr	r3, [r7, #32]
 8004826:	2200      	movs	r2, #0
 8004828:	2180      	movs	r1, #128	; 0x80
 800482a:	68f8      	ldr	r0, [r7, #12]
 800482c:	f000 fd95 	bl	800535a <I2C_WaitOnFlagUntilTimeout>
 8004830:	4603      	mov	r3, r0
 8004832:	2b00      	cmp	r3, #0
 8004834:	d001      	beq.n	800483a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8004836:	2301      	movs	r3, #1
 8004838:	e04d      	b.n	80048d6 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800483e:	b29b      	uxth	r3, r3
 8004840:	2bff      	cmp	r3, #255	; 0xff
 8004842:	d90e      	bls.n	8004862 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	22ff      	movs	r2, #255	; 0xff
 8004848:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800484e:	b2da      	uxtb	r2, r3
 8004850:	8979      	ldrh	r1, [r7, #10]
 8004852:	2300      	movs	r3, #0
 8004854:	9300      	str	r3, [sp, #0]
 8004856:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800485a:	68f8      	ldr	r0, [r7, #12]
 800485c:	f000 ff94 	bl	8005788 <I2C_TransferConfig>
 8004860:	e00f      	b.n	8004882 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004866:	b29a      	uxth	r2, r3
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004870:	b2da      	uxtb	r2, r3
 8004872:	8979      	ldrh	r1, [r7, #10]
 8004874:	2300      	movs	r3, #0
 8004876:	9300      	str	r3, [sp, #0]
 8004878:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800487c:	68f8      	ldr	r0, [r7, #12]
 800487e:	f000 ff83 	bl	8005788 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004886:	b29b      	uxth	r3, r3
 8004888:	2b00      	cmp	r3, #0
 800488a:	d19d      	bne.n	80047c8 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800488c:	697a      	ldr	r2, [r7, #20]
 800488e:	6a39      	ldr	r1, [r7, #32]
 8004890:	68f8      	ldr	r0, [r7, #12]
 8004892:	f000 fde2 	bl	800545a <I2C_WaitOnSTOPFlagUntilTimeout>
 8004896:	4603      	mov	r3, r0
 8004898:	2b00      	cmp	r3, #0
 800489a:	d001      	beq.n	80048a0 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800489c:	2301      	movs	r3, #1
 800489e:	e01a      	b.n	80048d6 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	2220      	movs	r2, #32
 80048a6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	6859      	ldr	r1, [r3, #4]
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681a      	ldr	r2, [r3, #0]
 80048b2:	4b0c      	ldr	r3, [pc, #48]	; (80048e4 <HAL_I2C_Master_Receive+0x1e8>)
 80048b4:	400b      	ands	r3, r1
 80048b6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	2220      	movs	r2, #32
 80048bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	2200      	movs	r2, #0
 80048c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	2200      	movs	r2, #0
 80048cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80048d0:	2300      	movs	r3, #0
 80048d2:	e000      	b.n	80048d6 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80048d4:	2302      	movs	r3, #2
  }
}
 80048d6:	4618      	mov	r0, r3
 80048d8:	3718      	adds	r7, #24
 80048da:	46bd      	mov	sp, r7
 80048dc:	bd80      	pop	{r7, pc}
 80048de:	bf00      	nop
 80048e0:	80002400 	.word	0x80002400
 80048e4:	fe00e800 	.word	0xfe00e800

080048e8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b084      	sub	sp, #16
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	699b      	ldr	r3, [r3, #24]
 80048f6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004904:	2b00      	cmp	r3, #0
 8004906:	d005      	beq.n	8004914 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800490c:	68ba      	ldr	r2, [r7, #8]
 800490e:	68f9      	ldr	r1, [r7, #12]
 8004910:	6878      	ldr	r0, [r7, #4]
 8004912:	4798      	blx	r3
  }
}
 8004914:	bf00      	nop
 8004916:	3710      	adds	r7, #16
 8004918:	46bd      	mov	sp, r7
 800491a:	bd80      	pop	{r7, pc}

0800491c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b086      	sub	sp, #24
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	699b      	ldr	r3, [r3, #24]
 800492a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	0a1b      	lsrs	r3, r3, #8
 8004938:	f003 0301 	and.w	r3, r3, #1
 800493c:	2b00      	cmp	r3, #0
 800493e:	d010      	beq.n	8004962 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004940:	693b      	ldr	r3, [r7, #16]
 8004942:	09db      	lsrs	r3, r3, #7
 8004944:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8004948:	2b00      	cmp	r3, #0
 800494a:	d00a      	beq.n	8004962 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004950:	f043 0201 	orr.w	r2, r3, #1
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004960:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	0a9b      	lsrs	r3, r3, #10
 8004966:	f003 0301 	and.w	r3, r3, #1
 800496a:	2b00      	cmp	r3, #0
 800496c:	d010      	beq.n	8004990 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800496e:	693b      	ldr	r3, [r7, #16]
 8004970:	09db      	lsrs	r3, r3, #7
 8004972:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8004976:	2b00      	cmp	r3, #0
 8004978:	d00a      	beq.n	8004990 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800497e:	f043 0208 	orr.w	r2, r3, #8
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800498e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	0a5b      	lsrs	r3, r3, #9
 8004994:	f003 0301 	and.w	r3, r3, #1
 8004998:	2b00      	cmp	r3, #0
 800499a:	d010      	beq.n	80049be <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800499c:	693b      	ldr	r3, [r7, #16]
 800499e:	09db      	lsrs	r3, r3, #7
 80049a0:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d00a      	beq.n	80049be <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049ac:	f043 0202 	orr.w	r2, r3, #2
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80049bc:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049c2:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	f003 030b 	and.w	r3, r3, #11
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d003      	beq.n	80049d6 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 80049ce:	68f9      	ldr	r1, [r7, #12]
 80049d0:	6878      	ldr	r0, [r7, #4]
 80049d2:	f000 fb89 	bl	80050e8 <I2C_ITError>
  }
}
 80049d6:	bf00      	nop
 80049d8:	3718      	adds	r7, #24
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd80      	pop	{r7, pc}

080049de <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80049de:	b480      	push	{r7}
 80049e0:	b083      	sub	sp, #12
 80049e2:	af00      	add	r7, sp, #0
 80049e4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80049e6:	bf00      	nop
 80049e8:	370c      	adds	r7, #12
 80049ea:	46bd      	mov	sp, r7
 80049ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f0:	4770      	bx	lr

080049f2 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80049f2:	b480      	push	{r7}
 80049f4:	b083      	sub	sp, #12
 80049f6:	af00      	add	r7, sp, #0
 80049f8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80049fa:	bf00      	nop
 80049fc:	370c      	adds	r7, #12
 80049fe:	46bd      	mov	sp, r7
 8004a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a04:	4770      	bx	lr

08004a06 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004a06:	b480      	push	{r7}
 8004a08:	b083      	sub	sp, #12
 8004a0a:	af00      	add	r7, sp, #0
 8004a0c:	6078      	str	r0, [r7, #4]
 8004a0e:	460b      	mov	r3, r1
 8004a10:	70fb      	strb	r3, [r7, #3]
 8004a12:	4613      	mov	r3, r2
 8004a14:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004a16:	bf00      	nop
 8004a18:	370c      	adds	r7, #12
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a20:	4770      	bx	lr

08004a22 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004a22:	b480      	push	{r7}
 8004a24:	b083      	sub	sp, #12
 8004a26:	af00      	add	r7, sp, #0
 8004a28:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8004a2a:	bf00      	nop
 8004a2c:	370c      	adds	r7, #12
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a34:	4770      	bx	lr

08004a36 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004a36:	b480      	push	{r7}
 8004a38:	b083      	sub	sp, #12
 8004a3a:	af00      	add	r7, sp, #0
 8004a3c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004a3e:	bf00      	nop
 8004a40:	370c      	adds	r7, #12
 8004a42:	46bd      	mov	sp, r7
 8004a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a48:	4770      	bx	lr

08004a4a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004a4a:	b480      	push	{r7}
 8004a4c:	b083      	sub	sp, #12
 8004a4e:	af00      	add	r7, sp, #0
 8004a50:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004a52:	bf00      	nop
 8004a54:	370c      	adds	r7, #12
 8004a56:	46bd      	mov	sp, r7
 8004a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5c:	4770      	bx	lr

08004a5e <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8004a5e:	b580      	push	{r7, lr}
 8004a60:	b086      	sub	sp, #24
 8004a62:	af00      	add	r7, sp, #0
 8004a64:	60f8      	str	r0, [r7, #12]
 8004a66:	60b9      	str	r1, [r7, #8]
 8004a68:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a6e:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004a7a:	2b01      	cmp	r3, #1
 8004a7c:	d101      	bne.n	8004a82 <I2C_Slave_ISR_IT+0x24>
 8004a7e:	2302      	movs	r3, #2
 8004a80:	e0ec      	b.n	8004c5c <I2C_Slave_ISR_IT+0x1fe>
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	2201      	movs	r2, #1
 8004a86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	095b      	lsrs	r3, r3, #5
 8004a8e:	f003 0301 	and.w	r3, r3, #1
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d009      	beq.n	8004aaa <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	095b      	lsrs	r3, r3, #5
 8004a9a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d003      	beq.n	8004aaa <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8004aa2:	6939      	ldr	r1, [r7, #16]
 8004aa4:	68f8      	ldr	r0, [r7, #12]
 8004aa6:	f000 f9bf 	bl	8004e28 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004aaa:	693b      	ldr	r3, [r7, #16]
 8004aac:	091b      	lsrs	r3, r3, #4
 8004aae:	f003 0301 	and.w	r3, r3, #1
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d04d      	beq.n	8004b52 <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	091b      	lsrs	r3, r3, #4
 8004aba:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d047      	beq.n	8004b52 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ac6:	b29b      	uxth	r3, r3
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d128      	bne.n	8004b1e <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ad2:	b2db      	uxtb	r3, r3
 8004ad4:	2b28      	cmp	r3, #40	; 0x28
 8004ad6:	d108      	bne.n	8004aea <I2C_Slave_ISR_IT+0x8c>
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004ade:	d104      	bne.n	8004aea <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8004ae0:	6939      	ldr	r1, [r7, #16]
 8004ae2:	68f8      	ldr	r0, [r7, #12]
 8004ae4:	f000 faaa 	bl	800503c <I2C_ITListenCplt>
 8004ae8:	e032      	b.n	8004b50 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004af0:	b2db      	uxtb	r3, r3
 8004af2:	2b29      	cmp	r3, #41	; 0x29
 8004af4:	d10e      	bne.n	8004b14 <I2C_Slave_ISR_IT+0xb6>
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004afc:	d00a      	beq.n	8004b14 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	2210      	movs	r2, #16
 8004b04:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8004b06:	68f8      	ldr	r0, [r7, #12]
 8004b08:	f000 fbe5 	bl	80052d6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004b0c:	68f8      	ldr	r0, [r7, #12]
 8004b0e:	f000 f92d 	bl	8004d6c <I2C_ITSlaveSeqCplt>
 8004b12:	e01d      	b.n	8004b50 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	2210      	movs	r2, #16
 8004b1a:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8004b1c:	e096      	b.n	8004c4c <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	2210      	movs	r2, #16
 8004b24:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b2a:	f043 0204 	orr.w	r2, r3, #4
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d004      	beq.n	8004b42 <I2C_Slave_ISR_IT+0xe4>
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004b3e:	f040 8085 	bne.w	8004c4c <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b46:	4619      	mov	r1, r3
 8004b48:	68f8      	ldr	r0, [r7, #12]
 8004b4a:	f000 facd 	bl	80050e8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8004b4e:	e07d      	b.n	8004c4c <I2C_Slave_ISR_IT+0x1ee>
 8004b50:	e07c      	b.n	8004c4c <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8004b52:	693b      	ldr	r3, [r7, #16]
 8004b54:	089b      	lsrs	r3, r3, #2
 8004b56:	f003 0301 	and.w	r3, r3, #1
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d030      	beq.n	8004bc0 <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	089b      	lsrs	r3, r3, #2
 8004b62:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d02a      	beq.n	8004bc0 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b6e:	b29b      	uxth	r3, r3
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d018      	beq.n	8004ba6 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b7e:	b2d2      	uxtb	r2, r2
 8004b80:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b86:	1c5a      	adds	r2, r3, #1
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b90:	3b01      	subs	r3, #1
 8004b92:	b29a      	uxth	r2, r3
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b9c:	b29b      	uxth	r3, r3
 8004b9e:	3b01      	subs	r3, #1
 8004ba0:	b29a      	uxth	r2, r3
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004baa:	b29b      	uxth	r3, r3
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d14f      	bne.n	8004c50 <I2C_Slave_ISR_IT+0x1f2>
 8004bb0:	697b      	ldr	r3, [r7, #20]
 8004bb2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004bb6:	d04b      	beq.n	8004c50 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8004bb8:	68f8      	ldr	r0, [r7, #12]
 8004bba:	f000 f8d7 	bl	8004d6c <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8004bbe:	e047      	b.n	8004c50 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004bc0:	693b      	ldr	r3, [r7, #16]
 8004bc2:	08db      	lsrs	r3, r3, #3
 8004bc4:	f003 0301 	and.w	r3, r3, #1
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d00a      	beq.n	8004be2 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	08db      	lsrs	r3, r3, #3
 8004bd0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d004      	beq.n	8004be2 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8004bd8:	6939      	ldr	r1, [r7, #16]
 8004bda:	68f8      	ldr	r0, [r7, #12]
 8004bdc:	f000 f842 	bl	8004c64 <I2C_ITAddrCplt>
 8004be0:	e037      	b.n	8004c52 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004be2:	693b      	ldr	r3, [r7, #16]
 8004be4:	085b      	lsrs	r3, r3, #1
 8004be6:	f003 0301 	and.w	r3, r3, #1
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d031      	beq.n	8004c52 <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	085b      	lsrs	r3, r3, #1
 8004bf2:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d02b      	beq.n	8004c52 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bfe:	b29b      	uxth	r3, r3
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d018      	beq.n	8004c36 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c08:	781a      	ldrb	r2, [r3, #0]
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c14:	1c5a      	adds	r2, r3, #1
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c1e:	b29b      	uxth	r3, r3
 8004c20:	3b01      	subs	r3, #1
 8004c22:	b29a      	uxth	r2, r3
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c2c:	3b01      	subs	r3, #1
 8004c2e:	b29a      	uxth	r2, r3
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	851a      	strh	r2, [r3, #40]	; 0x28
 8004c34:	e00d      	b.n	8004c52 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004c3c:	d002      	beq.n	8004c44 <I2C_Slave_ISR_IT+0x1e6>
 8004c3e:	697b      	ldr	r3, [r7, #20]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d106      	bne.n	8004c52 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004c44:	68f8      	ldr	r0, [r7, #12]
 8004c46:	f000 f891 	bl	8004d6c <I2C_ITSlaveSeqCplt>
 8004c4a:	e002      	b.n	8004c52 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8004c4c:	bf00      	nop
 8004c4e:	e000      	b.n	8004c52 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8004c50:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	2200      	movs	r2, #0
 8004c56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004c5a:	2300      	movs	r3, #0
}
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	3718      	adds	r7, #24
 8004c60:	46bd      	mov	sp, r7
 8004c62:	bd80      	pop	{r7, pc}

08004c64 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b084      	sub	sp, #16
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
 8004c6c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c74:	b2db      	uxtb	r3, r3
 8004c76:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004c7a:	2b28      	cmp	r3, #40	; 0x28
 8004c7c:	d16a      	bne.n	8004d54 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	699b      	ldr	r3, [r3, #24]
 8004c84:	0c1b      	lsrs	r3, r3, #16
 8004c86:	b2db      	uxtb	r3, r3
 8004c88:	f003 0301 	and.w	r3, r3, #1
 8004c8c:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	699b      	ldr	r3, [r3, #24]
 8004c94:	0c1b      	lsrs	r3, r3, #16
 8004c96:	b29b      	uxth	r3, r3
 8004c98:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8004c9c:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	689b      	ldr	r3, [r3, #8]
 8004ca4:	b29b      	uxth	r3, r3
 8004ca6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004caa:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	68db      	ldr	r3, [r3, #12]
 8004cb2:	b29b      	uxth	r3, r3
 8004cb4:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8004cb8:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	68db      	ldr	r3, [r3, #12]
 8004cbe:	2b02      	cmp	r3, #2
 8004cc0:	d138      	bne.n	8004d34 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8004cc2:	897b      	ldrh	r3, [r7, #10]
 8004cc4:	09db      	lsrs	r3, r3, #7
 8004cc6:	b29a      	uxth	r2, r3
 8004cc8:	89bb      	ldrh	r3, [r7, #12]
 8004cca:	4053      	eors	r3, r2
 8004ccc:	b29b      	uxth	r3, r3
 8004cce:	f003 0306 	and.w	r3, r3, #6
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d11c      	bne.n	8004d10 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8004cd6:	897b      	ldrh	r3, [r7, #10]
 8004cd8:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cde:	1c5a      	adds	r2, r3, #1
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ce8:	2b02      	cmp	r3, #2
 8004cea:	d13b      	bne.n	8004d64 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	2208      	movs	r2, #8
 8004cf8:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004d02:	89ba      	ldrh	r2, [r7, #12]
 8004d04:	7bfb      	ldrb	r3, [r7, #15]
 8004d06:	4619      	mov	r1, r3
 8004d08:	6878      	ldr	r0, [r7, #4]
 8004d0a:	f7ff fe7c 	bl	8004a06 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004d0e:	e029      	b.n	8004d64 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8004d10:	893b      	ldrh	r3, [r7, #8]
 8004d12:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004d14:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004d18:	6878      	ldr	r0, [r7, #4]
 8004d1a:	f000 fdb1 	bl	8005880 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2200      	movs	r2, #0
 8004d22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004d26:	89ba      	ldrh	r2, [r7, #12]
 8004d28:	7bfb      	ldrb	r3, [r7, #15]
 8004d2a:	4619      	mov	r1, r3
 8004d2c:	6878      	ldr	r0, [r7, #4]
 8004d2e:	f7ff fe6a 	bl	8004a06 <HAL_I2C_AddrCallback>
}
 8004d32:	e017      	b.n	8004d64 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004d34:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004d38:	6878      	ldr	r0, [r7, #4]
 8004d3a:	f000 fda1 	bl	8005880 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2200      	movs	r2, #0
 8004d42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004d46:	89ba      	ldrh	r2, [r7, #12]
 8004d48:	7bfb      	ldrb	r3, [r7, #15]
 8004d4a:	4619      	mov	r1, r3
 8004d4c:	6878      	ldr	r0, [r7, #4]
 8004d4e:	f7ff fe5a 	bl	8004a06 <HAL_I2C_AddrCallback>
}
 8004d52:	e007      	b.n	8004d64 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	2208      	movs	r2, #8
 8004d5a:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8004d64:	bf00      	nop
 8004d66:	3710      	adds	r7, #16
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	bd80      	pop	{r7, pc}

08004d6c <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b084      	sub	sp, #16
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	0b9b      	lsrs	r3, r3, #14
 8004d88:	f003 0301 	and.w	r3, r3, #1
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d008      	beq.n	8004da2 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	681a      	ldr	r2, [r3, #0]
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004d9e:	601a      	str	r2, [r3, #0]
 8004da0:	e00d      	b.n	8004dbe <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	0bdb      	lsrs	r3, r3, #15
 8004da6:	f003 0301 	and.w	r3, r3, #1
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d007      	beq.n	8004dbe <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	681a      	ldr	r2, [r3, #0]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004dbc:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004dc4:	b2db      	uxtb	r3, r3
 8004dc6:	2b29      	cmp	r3, #41	; 0x29
 8004dc8:	d112      	bne.n	8004df0 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2228      	movs	r2, #40	; 0x28
 8004dce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2221      	movs	r2, #33	; 0x21
 8004dd6:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004dd8:	2101      	movs	r1, #1
 8004dda:	6878      	ldr	r0, [r7, #4]
 8004ddc:	f000 fd50 	bl	8005880 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2200      	movs	r2, #0
 8004de4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004de8:	6878      	ldr	r0, [r7, #4]
 8004dea:	f7ff fdf8 	bl	80049de <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004dee:	e017      	b.n	8004e20 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004df6:	b2db      	uxtb	r3, r3
 8004df8:	2b2a      	cmp	r3, #42	; 0x2a
 8004dfa:	d111      	bne.n	8004e20 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2228      	movs	r2, #40	; 0x28
 8004e00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2222      	movs	r2, #34	; 0x22
 8004e08:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004e0a:	2102      	movs	r1, #2
 8004e0c:	6878      	ldr	r0, [r7, #4]
 8004e0e:	f000 fd37 	bl	8005880 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2200      	movs	r2, #0
 8004e16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	f7ff fde9 	bl	80049f2 <HAL_I2C_SlaveRxCpltCallback>
}
 8004e20:	bf00      	nop
 8004e22:	3710      	adds	r7, #16
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bd80      	pop	{r7, pc}

08004e28 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b086      	sub	sp, #24
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
 8004e30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e44:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	2220      	movs	r2, #32
 8004e4c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004e4e:	7bfb      	ldrb	r3, [r7, #15]
 8004e50:	2b21      	cmp	r3, #33	; 0x21
 8004e52:	d002      	beq.n	8004e5a <I2C_ITSlaveCplt+0x32>
 8004e54:	7bfb      	ldrb	r3, [r7, #15]
 8004e56:	2b29      	cmp	r3, #41	; 0x29
 8004e58:	d108      	bne.n	8004e6c <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8004e5a:	f248 0101 	movw	r1, #32769	; 0x8001
 8004e5e:	6878      	ldr	r0, [r7, #4]
 8004e60:	f000 fd0e 	bl	8005880 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2221      	movs	r2, #33	; 0x21
 8004e68:	631a      	str	r2, [r3, #48]	; 0x30
 8004e6a:	e00d      	b.n	8004e88 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004e6c:	7bfb      	ldrb	r3, [r7, #15]
 8004e6e:	2b22      	cmp	r3, #34	; 0x22
 8004e70:	d002      	beq.n	8004e78 <I2C_ITSlaveCplt+0x50>
 8004e72:	7bfb      	ldrb	r3, [r7, #15]
 8004e74:	2b2a      	cmp	r3, #42	; 0x2a
 8004e76:	d107      	bne.n	8004e88 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8004e78:	f248 0102 	movw	r1, #32770	; 0x8002
 8004e7c:	6878      	ldr	r0, [r7, #4]
 8004e7e:	f000 fcff 	bl	8005880 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2222      	movs	r2, #34	; 0x22
 8004e86:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	685a      	ldr	r2, [r3, #4]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004e96:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	6859      	ldr	r1, [r3, #4]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681a      	ldr	r2, [r3, #0]
 8004ea2:	4b64      	ldr	r3, [pc, #400]	; (8005034 <I2C_ITSlaveCplt+0x20c>)
 8004ea4:	400b      	ands	r3, r1
 8004ea6:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8004ea8:	6878      	ldr	r0, [r7, #4]
 8004eaa:	f000 fa14 	bl	80052d6 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004eae:	693b      	ldr	r3, [r7, #16]
 8004eb0:	0b9b      	lsrs	r3, r3, #14
 8004eb2:	f003 0301 	and.w	r3, r3, #1
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d013      	beq.n	8004ee2 <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	681a      	ldr	r2, [r3, #0]
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004ec8:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d020      	beq.n	8004f14 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	b29a      	uxth	r2, r3
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004ee0:	e018      	b.n	8004f14 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004ee2:	693b      	ldr	r3, [r7, #16]
 8004ee4:	0bdb      	lsrs	r3, r3, #15
 8004ee6:	f003 0301 	and.w	r3, r3, #1
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d012      	beq.n	8004f14 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	681a      	ldr	r2, [r3, #0]
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004efc:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d006      	beq.n	8004f14 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	b29a      	uxth	r2, r3
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8004f14:	697b      	ldr	r3, [r7, #20]
 8004f16:	089b      	lsrs	r3, r3, #2
 8004f18:	f003 0301 	and.w	r3, r3, #1
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d020      	beq.n	8004f62 <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	f023 0304 	bic.w	r3, r3, #4
 8004f26:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f32:	b2d2      	uxtb	r2, r2
 8004f34:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f3a:	1c5a      	adds	r2, r3, #1
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d00c      	beq.n	8004f62 <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f4c:	3b01      	subs	r3, #1
 8004f4e:	b29a      	uxth	r2, r3
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f58:	b29b      	uxth	r3, r3
 8004f5a:	3b01      	subs	r3, #1
 8004f5c:	b29a      	uxth	r2, r3
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f66:	b29b      	uxth	r3, r3
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d005      	beq.n	8004f78 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f70:	f043 0204 	orr.w	r2, r3, #4
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2200      	movs	r2, #0
 8004f84:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d010      	beq.n	8004fb0 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f92:	4619      	mov	r1, r3
 8004f94:	6878      	ldr	r0, [r7, #4]
 8004f96:	f000 f8a7 	bl	80050e8 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004fa0:	b2db      	uxtb	r3, r3
 8004fa2:	2b28      	cmp	r3, #40	; 0x28
 8004fa4:	d141      	bne.n	800502a <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8004fa6:	6979      	ldr	r1, [r7, #20]
 8004fa8:	6878      	ldr	r0, [r7, #4]
 8004faa:	f000 f847 	bl	800503c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004fae:	e03c      	b.n	800502a <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fb4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004fb8:	d014      	beq.n	8004fe4 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 8004fba:	6878      	ldr	r0, [r7, #4]
 8004fbc:	f7ff fed6 	bl	8004d6c <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	4a1d      	ldr	r2, [pc, #116]	; (8005038 <I2C_ITSlaveCplt+0x210>)
 8004fc4:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2220      	movs	r2, #32
 8004fca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8004fdc:	6878      	ldr	r0, [r7, #4]
 8004fde:	f7ff fd20 	bl	8004a22 <HAL_I2C_ListenCpltCallback>
}
 8004fe2:	e022      	b.n	800502a <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004fea:	b2db      	uxtb	r3, r3
 8004fec:	2b22      	cmp	r3, #34	; 0x22
 8004fee:	d10e      	bne.n	800500e <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2220      	movs	r2, #32
 8004ff4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2200      	movs	r2, #0
 8005002:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	f7ff fcf3 	bl	80049f2 <HAL_I2C_SlaveRxCpltCallback>
}
 800500c:	e00d      	b.n	800502a <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2220      	movs	r2, #32
 8005012:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2200      	movs	r2, #0
 800501a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2200      	movs	r2, #0
 8005020:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005024:	6878      	ldr	r0, [r7, #4]
 8005026:	f7ff fcda 	bl	80049de <HAL_I2C_SlaveTxCpltCallback>
}
 800502a:	bf00      	nop
 800502c:	3718      	adds	r7, #24
 800502e:	46bd      	mov	sp, r7
 8005030:	bd80      	pop	{r7, pc}
 8005032:	bf00      	nop
 8005034:	fe00e800 	.word	0xfe00e800
 8005038:	ffff0000 	.word	0xffff0000

0800503c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b082      	sub	sp, #8
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
 8005044:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	4a26      	ldr	r2, [pc, #152]	; (80050e4 <I2C_ITListenCplt+0xa8>)
 800504a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2200      	movs	r2, #0
 8005050:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2220      	movs	r2, #32
 8005056:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2200      	movs	r2, #0
 800505e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2200      	movs	r2, #0
 8005066:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	089b      	lsrs	r3, r3, #2
 800506c:	f003 0301 	and.w	r3, r3, #1
 8005070:	2b00      	cmp	r3, #0
 8005072:	d022      	beq.n	80050ba <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800507e:	b2d2      	uxtb	r2, r2
 8005080:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005086:	1c5a      	adds	r2, r3, #1
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005090:	2b00      	cmp	r3, #0
 8005092:	d012      	beq.n	80050ba <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005098:	3b01      	subs	r3, #1
 800509a:	b29a      	uxth	r2, r3
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050a4:	b29b      	uxth	r3, r3
 80050a6:	3b01      	subs	r3, #1
 80050a8:	b29a      	uxth	r2, r3
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050b2:	f043 0204 	orr.w	r2, r3, #4
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80050ba:	f248 0103 	movw	r1, #32771	; 0x8003
 80050be:	6878      	ldr	r0, [r7, #4]
 80050c0:	f000 fbde 	bl	8005880 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	2210      	movs	r2, #16
 80050ca:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2200      	movs	r2, #0
 80050d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80050d4:	6878      	ldr	r0, [r7, #4]
 80050d6:	f7ff fca4 	bl	8004a22 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80050da:	bf00      	nop
 80050dc:	3708      	adds	r7, #8
 80050de:	46bd      	mov	sp, r7
 80050e0:	bd80      	pop	{r7, pc}
 80050e2:	bf00      	nop
 80050e4:	ffff0000 	.word	0xffff0000

080050e8 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b084      	sub	sp, #16
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
 80050f0:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80050f8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2200      	movs	r2, #0
 80050fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	4a5d      	ldr	r2, [pc, #372]	; (800527c <I2C_ITError+0x194>)
 8005106:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2200      	movs	r2, #0
 800510c:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	431a      	orrs	r2, r3
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800511a:	7bfb      	ldrb	r3, [r7, #15]
 800511c:	2b28      	cmp	r3, #40	; 0x28
 800511e:	d005      	beq.n	800512c <I2C_ITError+0x44>
 8005120:	7bfb      	ldrb	r3, [r7, #15]
 8005122:	2b29      	cmp	r3, #41	; 0x29
 8005124:	d002      	beq.n	800512c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8005126:	7bfb      	ldrb	r3, [r7, #15]
 8005128:	2b2a      	cmp	r3, #42	; 0x2a
 800512a:	d10b      	bne.n	8005144 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800512c:	2103      	movs	r1, #3
 800512e:	6878      	ldr	r0, [r7, #4]
 8005130:	f000 fba6 	bl	8005880 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2228      	movs	r2, #40	; 0x28
 8005138:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	4a50      	ldr	r2, [pc, #320]	; (8005280 <I2C_ITError+0x198>)
 8005140:	635a      	str	r2, [r3, #52]	; 0x34
 8005142:	e011      	b.n	8005168 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005144:	f248 0103 	movw	r1, #32771	; 0x8003
 8005148:	6878      	ldr	r0, [r7, #4]
 800514a:	f000 fb99 	bl	8005880 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005154:	b2db      	uxtb	r3, r3
 8005156:	2b60      	cmp	r3, #96	; 0x60
 8005158:	d003      	beq.n	8005162 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2220      	movs	r2, #32
 800515e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2200      	movs	r2, #0
 8005166:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800516c:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005172:	2b00      	cmp	r3, #0
 8005174:	d039      	beq.n	80051ea <I2C_ITError+0x102>
 8005176:	68bb      	ldr	r3, [r7, #8]
 8005178:	2b11      	cmp	r3, #17
 800517a:	d002      	beq.n	8005182 <I2C_ITError+0x9a>
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	2b21      	cmp	r3, #33	; 0x21
 8005180:	d133      	bne.n	80051ea <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800518c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005190:	d107      	bne.n	80051a2 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	681a      	ldr	r2, [r3, #0]
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80051a0:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051a6:	4618      	mov	r0, r3
 80051a8:	f7fe fca4 	bl	8003af4 <HAL_DMA_GetState>
 80051ac:	4603      	mov	r3, r0
 80051ae:	2b01      	cmp	r3, #1
 80051b0:	d017      	beq.n	80051e2 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051b6:	4a33      	ldr	r2, [pc, #204]	; (8005284 <I2C_ITError+0x19c>)
 80051b8:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2200      	movs	r2, #0
 80051be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051c6:	4618      	mov	r0, r3
 80051c8:	f7fe fc72 	bl	8003ab0 <HAL_DMA_Abort_IT>
 80051cc:	4603      	mov	r3, r0
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d04d      	beq.n	800526e <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051d8:	687a      	ldr	r2, [r7, #4]
 80051da:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80051dc:	4610      	mov	r0, r2
 80051de:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80051e0:	e045      	b.n	800526e <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80051e2:	6878      	ldr	r0, [r7, #4]
 80051e4:	f000 f850 	bl	8005288 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80051e8:	e041      	b.n	800526e <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d039      	beq.n	8005266 <I2C_ITError+0x17e>
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	2b12      	cmp	r3, #18
 80051f6:	d002      	beq.n	80051fe <I2C_ITError+0x116>
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	2b22      	cmp	r3, #34	; 0x22
 80051fc:	d133      	bne.n	8005266 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005208:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800520c:	d107      	bne.n	800521e <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	681a      	ldr	r2, [r3, #0]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800521c:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005222:	4618      	mov	r0, r3
 8005224:	f7fe fc66 	bl	8003af4 <HAL_DMA_GetState>
 8005228:	4603      	mov	r3, r0
 800522a:	2b01      	cmp	r3, #1
 800522c:	d017      	beq.n	800525e <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005232:	4a14      	ldr	r2, [pc, #80]	; (8005284 <I2C_ITError+0x19c>)
 8005234:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2200      	movs	r2, #0
 800523a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005242:	4618      	mov	r0, r3
 8005244:	f7fe fc34 	bl	8003ab0 <HAL_DMA_Abort_IT>
 8005248:	4603      	mov	r3, r0
 800524a:	2b00      	cmp	r3, #0
 800524c:	d011      	beq.n	8005272 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005252:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005254:	687a      	ldr	r2, [r7, #4]
 8005256:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005258:	4610      	mov	r0, r2
 800525a:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800525c:	e009      	b.n	8005272 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800525e:	6878      	ldr	r0, [r7, #4]
 8005260:	f000 f812 	bl	8005288 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005264:	e005      	b.n	8005272 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8005266:	6878      	ldr	r0, [r7, #4]
 8005268:	f000 f80e 	bl	8005288 <I2C_TreatErrorCallback>
  }
}
 800526c:	e002      	b.n	8005274 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800526e:	bf00      	nop
 8005270:	e000      	b.n	8005274 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005272:	bf00      	nop
}
 8005274:	bf00      	nop
 8005276:	3710      	adds	r7, #16
 8005278:	46bd      	mov	sp, r7
 800527a:	bd80      	pop	{r7, pc}
 800527c:	ffff0000 	.word	0xffff0000
 8005280:	08004a5f 	.word	0x08004a5f
 8005284:	0800531f 	.word	0x0800531f

08005288 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b082      	sub	sp, #8
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005296:	b2db      	uxtb	r3, r3
 8005298:	2b60      	cmp	r3, #96	; 0x60
 800529a:	d10e      	bne.n	80052ba <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2220      	movs	r2, #32
 80052a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2200      	movs	r2, #0
 80052a8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2200      	movs	r2, #0
 80052ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80052b2:	6878      	ldr	r0, [r7, #4]
 80052b4:	f7ff fbc9 	bl	8004a4a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80052b8:	e009      	b.n	80052ce <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2200      	movs	r2, #0
 80052be:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2200      	movs	r2, #0
 80052c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80052c8:	6878      	ldr	r0, [r7, #4]
 80052ca:	f7ff fbb4 	bl	8004a36 <HAL_I2C_ErrorCallback>
}
 80052ce:	bf00      	nop
 80052d0:	3708      	adds	r7, #8
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}

080052d6 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80052d6:	b480      	push	{r7}
 80052d8:	b083      	sub	sp, #12
 80052da:	af00      	add	r7, sp, #0
 80052dc:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	699b      	ldr	r3, [r3, #24]
 80052e4:	f003 0302 	and.w	r3, r3, #2
 80052e8:	2b02      	cmp	r3, #2
 80052ea:	d103      	bne.n	80052f4 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	2200      	movs	r2, #0
 80052f2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	699b      	ldr	r3, [r3, #24]
 80052fa:	f003 0301 	and.w	r3, r3, #1
 80052fe:	2b01      	cmp	r3, #1
 8005300:	d007      	beq.n	8005312 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	699a      	ldr	r2, [r3, #24]
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f042 0201 	orr.w	r2, r2, #1
 8005310:	619a      	str	r2, [r3, #24]
  }
}
 8005312:	bf00      	nop
 8005314:	370c      	adds	r7, #12
 8005316:	46bd      	mov	sp, r7
 8005318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531c:	4770      	bx	lr

0800531e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800531e:	b580      	push	{r7, lr}
 8005320:	b084      	sub	sp, #16
 8005322:	af00      	add	r7, sp, #0
 8005324:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800532a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005330:	2b00      	cmp	r3, #0
 8005332:	d003      	beq.n	800533c <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005338:	2200      	movs	r2, #0
 800533a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005340:	2b00      	cmp	r3, #0
 8005342:	d003      	beq.n	800534c <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005348:	2200      	movs	r2, #0
 800534a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 800534c:	68f8      	ldr	r0, [r7, #12]
 800534e:	f7ff ff9b 	bl	8005288 <I2C_TreatErrorCallback>
}
 8005352:	bf00      	nop
 8005354:	3710      	adds	r7, #16
 8005356:	46bd      	mov	sp, r7
 8005358:	bd80      	pop	{r7, pc}

0800535a <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800535a:	b580      	push	{r7, lr}
 800535c:	b084      	sub	sp, #16
 800535e:	af00      	add	r7, sp, #0
 8005360:	60f8      	str	r0, [r7, #12]
 8005362:	60b9      	str	r1, [r7, #8]
 8005364:	603b      	str	r3, [r7, #0]
 8005366:	4613      	mov	r3, r2
 8005368:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800536a:	e022      	b.n	80053b2 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005372:	d01e      	beq.n	80053b2 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005374:	f7fe f9bc 	bl	80036f0 <HAL_GetTick>
 8005378:	4602      	mov	r2, r0
 800537a:	69bb      	ldr	r3, [r7, #24]
 800537c:	1ad3      	subs	r3, r2, r3
 800537e:	683a      	ldr	r2, [r7, #0]
 8005380:	429a      	cmp	r2, r3
 8005382:	d302      	bcc.n	800538a <I2C_WaitOnFlagUntilTimeout+0x30>
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d113      	bne.n	80053b2 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800538e:	f043 0220 	orr.w	r2, r3, #32
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	2220      	movs	r2, #32
 800539a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	2200      	movs	r2, #0
 80053a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	2200      	movs	r2, #0
 80053aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80053ae:	2301      	movs	r3, #1
 80053b0:	e00f      	b.n	80053d2 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	699a      	ldr	r2, [r3, #24]
 80053b8:	68bb      	ldr	r3, [r7, #8]
 80053ba:	4013      	ands	r3, r2
 80053bc:	68ba      	ldr	r2, [r7, #8]
 80053be:	429a      	cmp	r2, r3
 80053c0:	bf0c      	ite	eq
 80053c2:	2301      	moveq	r3, #1
 80053c4:	2300      	movne	r3, #0
 80053c6:	b2db      	uxtb	r3, r3
 80053c8:	461a      	mov	r2, r3
 80053ca:	79fb      	ldrb	r3, [r7, #7]
 80053cc:	429a      	cmp	r2, r3
 80053ce:	d0cd      	beq.n	800536c <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80053d0:	2300      	movs	r3, #0
}
 80053d2:	4618      	mov	r0, r3
 80053d4:	3710      	adds	r7, #16
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bd80      	pop	{r7, pc}

080053da <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80053da:	b580      	push	{r7, lr}
 80053dc:	b084      	sub	sp, #16
 80053de:	af00      	add	r7, sp, #0
 80053e0:	60f8      	str	r0, [r7, #12]
 80053e2:	60b9      	str	r1, [r7, #8]
 80053e4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80053e6:	e02c      	b.n	8005442 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80053e8:	687a      	ldr	r2, [r7, #4]
 80053ea:	68b9      	ldr	r1, [r7, #8]
 80053ec:	68f8      	ldr	r0, [r7, #12]
 80053ee:	f000 f8eb 	bl	80055c8 <I2C_IsErrorOccurred>
 80053f2:	4603      	mov	r3, r0
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d001      	beq.n	80053fc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80053f8:	2301      	movs	r3, #1
 80053fa:	e02a      	b.n	8005452 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005402:	d01e      	beq.n	8005442 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005404:	f7fe f974 	bl	80036f0 <HAL_GetTick>
 8005408:	4602      	mov	r2, r0
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	1ad3      	subs	r3, r2, r3
 800540e:	68ba      	ldr	r2, [r7, #8]
 8005410:	429a      	cmp	r2, r3
 8005412:	d302      	bcc.n	800541a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d113      	bne.n	8005442 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800541e:	f043 0220 	orr.w	r2, r3, #32
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	2220      	movs	r2, #32
 800542a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	2200      	movs	r2, #0
 8005432:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	2200      	movs	r2, #0
 800543a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800543e:	2301      	movs	r3, #1
 8005440:	e007      	b.n	8005452 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	699b      	ldr	r3, [r3, #24]
 8005448:	f003 0302 	and.w	r3, r3, #2
 800544c:	2b02      	cmp	r3, #2
 800544e:	d1cb      	bne.n	80053e8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005450:	2300      	movs	r3, #0
}
 8005452:	4618      	mov	r0, r3
 8005454:	3710      	adds	r7, #16
 8005456:	46bd      	mov	sp, r7
 8005458:	bd80      	pop	{r7, pc}

0800545a <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800545a:	b580      	push	{r7, lr}
 800545c:	b084      	sub	sp, #16
 800545e:	af00      	add	r7, sp, #0
 8005460:	60f8      	str	r0, [r7, #12]
 8005462:	60b9      	str	r1, [r7, #8]
 8005464:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005466:	e028      	b.n	80054ba <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005468:	687a      	ldr	r2, [r7, #4]
 800546a:	68b9      	ldr	r1, [r7, #8]
 800546c:	68f8      	ldr	r0, [r7, #12]
 800546e:	f000 f8ab 	bl	80055c8 <I2C_IsErrorOccurred>
 8005472:	4603      	mov	r3, r0
 8005474:	2b00      	cmp	r3, #0
 8005476:	d001      	beq.n	800547c <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005478:	2301      	movs	r3, #1
 800547a:	e026      	b.n	80054ca <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800547c:	f7fe f938 	bl	80036f0 <HAL_GetTick>
 8005480:	4602      	mov	r2, r0
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	1ad3      	subs	r3, r2, r3
 8005486:	68ba      	ldr	r2, [r7, #8]
 8005488:	429a      	cmp	r2, r3
 800548a:	d302      	bcc.n	8005492 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d113      	bne.n	80054ba <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005496:	f043 0220 	orr.w	r2, r3, #32
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	2220      	movs	r2, #32
 80054a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	2200      	movs	r2, #0
 80054aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	2200      	movs	r2, #0
 80054b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80054b6:	2301      	movs	r3, #1
 80054b8:	e007      	b.n	80054ca <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	699b      	ldr	r3, [r3, #24]
 80054c0:	f003 0320 	and.w	r3, r3, #32
 80054c4:	2b20      	cmp	r3, #32
 80054c6:	d1cf      	bne.n	8005468 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80054c8:	2300      	movs	r3, #0
}
 80054ca:	4618      	mov	r0, r3
 80054cc:	3710      	adds	r7, #16
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bd80      	pop	{r7, pc}
	...

080054d4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b084      	sub	sp, #16
 80054d8:	af00      	add	r7, sp, #0
 80054da:	60f8      	str	r0, [r7, #12]
 80054dc:	60b9      	str	r1, [r7, #8]
 80054de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80054e0:	e064      	b.n	80055ac <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80054e2:	687a      	ldr	r2, [r7, #4]
 80054e4:	68b9      	ldr	r1, [r7, #8]
 80054e6:	68f8      	ldr	r0, [r7, #12]
 80054e8:	f000 f86e 	bl	80055c8 <I2C_IsErrorOccurred>
 80054ec:	4603      	mov	r3, r0
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d001      	beq.n	80054f6 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80054f2:	2301      	movs	r3, #1
 80054f4:	e062      	b.n	80055bc <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	699b      	ldr	r3, [r3, #24]
 80054fc:	f003 0320 	and.w	r3, r3, #32
 8005500:	2b20      	cmp	r3, #32
 8005502:	d138      	bne.n	8005576 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	699b      	ldr	r3, [r3, #24]
 800550a:	f003 0304 	and.w	r3, r3, #4
 800550e:	2b04      	cmp	r3, #4
 8005510:	d105      	bne.n	800551e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005516:	2b00      	cmp	r3, #0
 8005518:	d001      	beq.n	800551e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800551a:	2300      	movs	r3, #0
 800551c:	e04e      	b.n	80055bc <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	699b      	ldr	r3, [r3, #24]
 8005524:	f003 0310 	and.w	r3, r3, #16
 8005528:	2b10      	cmp	r3, #16
 800552a:	d107      	bne.n	800553c <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	2210      	movs	r2, #16
 8005532:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	2204      	movs	r2, #4
 8005538:	645a      	str	r2, [r3, #68]	; 0x44
 800553a:	e002      	b.n	8005542 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	2200      	movs	r2, #0
 8005540:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	2220      	movs	r2, #32
 8005548:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	6859      	ldr	r1, [r3, #4]
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681a      	ldr	r2, [r3, #0]
 8005554:	4b1b      	ldr	r3, [pc, #108]	; (80055c4 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8005556:	400b      	ands	r3, r1
 8005558:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	2220      	movs	r2, #32
 800555e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	2200      	movs	r2, #0
 8005566:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	2200      	movs	r2, #0
 800556e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005572:	2301      	movs	r3, #1
 8005574:	e022      	b.n	80055bc <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005576:	f7fe f8bb 	bl	80036f0 <HAL_GetTick>
 800557a:	4602      	mov	r2, r0
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	1ad3      	subs	r3, r2, r3
 8005580:	68ba      	ldr	r2, [r7, #8]
 8005582:	429a      	cmp	r2, r3
 8005584:	d302      	bcc.n	800558c <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d10f      	bne.n	80055ac <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005590:	f043 0220 	orr.w	r2, r3, #32
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	2220      	movs	r2, #32
 800559c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	2200      	movs	r2, #0
 80055a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80055a8:	2301      	movs	r3, #1
 80055aa:	e007      	b.n	80055bc <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	699b      	ldr	r3, [r3, #24]
 80055b2:	f003 0304 	and.w	r3, r3, #4
 80055b6:	2b04      	cmp	r3, #4
 80055b8:	d193      	bne.n	80054e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80055ba:	2300      	movs	r3, #0
}
 80055bc:	4618      	mov	r0, r3
 80055be:	3710      	adds	r7, #16
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bd80      	pop	{r7, pc}
 80055c4:	fe00e800 	.word	0xfe00e800

080055c8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b08a      	sub	sp, #40	; 0x28
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	60f8      	str	r0, [r7, #12]
 80055d0:	60b9      	str	r1, [r7, #8]
 80055d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80055d4:	2300      	movs	r3, #0
 80055d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	699b      	ldr	r3, [r3, #24]
 80055e0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80055e2:	2300      	movs	r3, #0
 80055e4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80055ea:	69bb      	ldr	r3, [r7, #24]
 80055ec:	f003 0310 	and.w	r3, r3, #16
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d068      	beq.n	80056c6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	2210      	movs	r2, #16
 80055fa:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80055fc:	e049      	b.n	8005692 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005604:	d045      	beq.n	8005692 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005606:	f7fe f873 	bl	80036f0 <HAL_GetTick>
 800560a:	4602      	mov	r2, r0
 800560c:	69fb      	ldr	r3, [r7, #28]
 800560e:	1ad3      	subs	r3, r2, r3
 8005610:	68ba      	ldr	r2, [r7, #8]
 8005612:	429a      	cmp	r2, r3
 8005614:	d302      	bcc.n	800561c <I2C_IsErrorOccurred+0x54>
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d13a      	bne.n	8005692 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	685b      	ldr	r3, [r3, #4]
 8005622:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005626:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800562e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	699b      	ldr	r3, [r3, #24]
 8005636:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800563a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800563e:	d121      	bne.n	8005684 <I2C_IsErrorOccurred+0xbc>
 8005640:	697b      	ldr	r3, [r7, #20]
 8005642:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005646:	d01d      	beq.n	8005684 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005648:	7cfb      	ldrb	r3, [r7, #19]
 800564a:	2b20      	cmp	r3, #32
 800564c:	d01a      	beq.n	8005684 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	685a      	ldr	r2, [r3, #4]
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800565c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800565e:	f7fe f847 	bl	80036f0 <HAL_GetTick>
 8005662:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005664:	e00e      	b.n	8005684 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005666:	f7fe f843 	bl	80036f0 <HAL_GetTick>
 800566a:	4602      	mov	r2, r0
 800566c:	69fb      	ldr	r3, [r7, #28]
 800566e:	1ad3      	subs	r3, r2, r3
 8005670:	2b19      	cmp	r3, #25
 8005672:	d907      	bls.n	8005684 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8005674:	6a3b      	ldr	r3, [r7, #32]
 8005676:	f043 0320 	orr.w	r3, r3, #32
 800567a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800567c:	2301      	movs	r3, #1
 800567e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8005682:	e006      	b.n	8005692 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	699b      	ldr	r3, [r3, #24]
 800568a:	f003 0320 	and.w	r3, r3, #32
 800568e:	2b20      	cmp	r3, #32
 8005690:	d1e9      	bne.n	8005666 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	699b      	ldr	r3, [r3, #24]
 8005698:	f003 0320 	and.w	r3, r3, #32
 800569c:	2b20      	cmp	r3, #32
 800569e:	d003      	beq.n	80056a8 <I2C_IsErrorOccurred+0xe0>
 80056a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d0aa      	beq.n	80055fe <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80056a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d103      	bne.n	80056b8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	2220      	movs	r2, #32
 80056b6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80056b8:	6a3b      	ldr	r3, [r7, #32]
 80056ba:	f043 0304 	orr.w	r3, r3, #4
 80056be:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80056c0:	2301      	movs	r3, #1
 80056c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	699b      	ldr	r3, [r3, #24]
 80056cc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80056ce:	69bb      	ldr	r3, [r7, #24]
 80056d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d00b      	beq.n	80056f0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80056d8:	6a3b      	ldr	r3, [r7, #32]
 80056da:	f043 0301 	orr.w	r3, r3, #1
 80056de:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80056e8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80056ea:	2301      	movs	r3, #1
 80056ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80056f0:	69bb      	ldr	r3, [r7, #24]
 80056f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d00b      	beq.n	8005712 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80056fa:	6a3b      	ldr	r3, [r7, #32]
 80056fc:	f043 0308 	orr.w	r3, r3, #8
 8005700:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800570a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800570c:	2301      	movs	r3, #1
 800570e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005712:	69bb      	ldr	r3, [r7, #24]
 8005714:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005718:	2b00      	cmp	r3, #0
 800571a:	d00b      	beq.n	8005734 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800571c:	6a3b      	ldr	r3, [r7, #32]
 800571e:	f043 0302 	orr.w	r3, r3, #2
 8005722:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f44f 7200 	mov.w	r2, #512	; 0x200
 800572c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800572e:	2301      	movs	r3, #1
 8005730:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8005734:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005738:	2b00      	cmp	r3, #0
 800573a:	d01c      	beq.n	8005776 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800573c:	68f8      	ldr	r0, [r7, #12]
 800573e:	f7ff fdca 	bl	80052d6 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	6859      	ldr	r1, [r3, #4]
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681a      	ldr	r2, [r3, #0]
 800574c:	4b0d      	ldr	r3, [pc, #52]	; (8005784 <I2C_IsErrorOccurred+0x1bc>)
 800574e:	400b      	ands	r3, r1
 8005750:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005756:	6a3b      	ldr	r3, [r7, #32]
 8005758:	431a      	orrs	r2, r3
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	2220      	movs	r2, #32
 8005762:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	2200      	movs	r2, #0
 800576a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	2200      	movs	r2, #0
 8005772:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8005776:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800577a:	4618      	mov	r0, r3
 800577c:	3728      	adds	r7, #40	; 0x28
 800577e:	46bd      	mov	sp, r7
 8005780:	bd80      	pop	{r7, pc}
 8005782:	bf00      	nop
 8005784:	fe00e800 	.word	0xfe00e800

08005788 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b086      	sub	sp, #24
 800578c:	af00      	add	r7, sp, #0
 800578e:	60f8      	str	r0, [r7, #12]
 8005790:	607b      	str	r3, [r7, #4]
 8005792:	460b      	mov	r3, r1
 8005794:	817b      	strh	r3, [r7, #10]
 8005796:	4613      	mov	r3, r2
 8005798:	727b      	strb	r3, [r7, #9]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4a2f      	ldr	r2, [pc, #188]	; (800585c <I2C_TransferConfig+0xd4>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d013      	beq.n	80057cc <I2C_TransferConfig+0x44>
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	4a2d      	ldr	r2, [pc, #180]	; (8005860 <I2C_TransferConfig+0xd8>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d00e      	beq.n	80057cc <I2C_TransferConfig+0x44>
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	4a2c      	ldr	r2, [pc, #176]	; (8005864 <I2C_TransferConfig+0xdc>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d009      	beq.n	80057cc <I2C_TransferConfig+0x44>
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4a2a      	ldr	r2, [pc, #168]	; (8005868 <I2C_TransferConfig+0xe0>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d004      	beq.n	80057cc <I2C_TransferConfig+0x44>
 80057c2:	f641 3147 	movw	r1, #6983	; 0x1b47
 80057c6:	4829      	ldr	r0, [pc, #164]	; (800586c <I2C_TransferConfig+0xe4>)
 80057c8:	f7fd f95f 	bl	8002a8a <assert_failed>
  assert_param(IS_TRANSFER_MODE(Mode));
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80057d2:	d00b      	beq.n	80057ec <I2C_TransferConfig+0x64>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80057da:	d007      	beq.n	80057ec <I2C_TransferConfig+0x64>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d004      	beq.n	80057ec <I2C_TransferConfig+0x64>
 80057e2:	f641 3148 	movw	r1, #6984	; 0x1b48
 80057e6:	4821      	ldr	r0, [pc, #132]	; (800586c <I2C_TransferConfig+0xe4>)
 80057e8:	f7fd f94f 	bl	8002a8a <assert_failed>
  assert_param(IS_TRANSFER_REQUEST(Request));
 80057ec:	6a3b      	ldr	r3, [r7, #32]
 80057ee:	4a20      	ldr	r2, [pc, #128]	; (8005870 <I2C_TransferConfig+0xe8>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d00f      	beq.n	8005814 <I2C_TransferConfig+0x8c>
 80057f4:	6a3b      	ldr	r3, [r7, #32]
 80057f6:	4a1f      	ldr	r2, [pc, #124]	; (8005874 <I2C_TransferConfig+0xec>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d00b      	beq.n	8005814 <I2C_TransferConfig+0x8c>
 80057fc:	6a3b      	ldr	r3, [r7, #32]
 80057fe:	4a1e      	ldr	r2, [pc, #120]	; (8005878 <I2C_TransferConfig+0xf0>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d007      	beq.n	8005814 <I2C_TransferConfig+0x8c>
 8005804:	6a3b      	ldr	r3, [r7, #32]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d004      	beq.n	8005814 <I2C_TransferConfig+0x8c>
 800580a:	f641 3149 	movw	r1, #6985	; 0x1b49
 800580e:	4817      	ldr	r0, [pc, #92]	; (800586c <I2C_TransferConfig+0xe4>)
 8005810:	f7fd f93b 	bl	8002a8a <assert_failed>

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005814:	897b      	ldrh	r3, [r7, #10]
 8005816:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800581a:	7a7b      	ldrb	r3, [r7, #9]
 800581c:	041b      	lsls	r3, r3, #16
 800581e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005822:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005828:	6a3b      	ldr	r3, [r7, #32]
 800582a:	4313      	orrs	r3, r2
 800582c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005830:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	685a      	ldr	r2, [r3, #4]
 8005838:	6a3b      	ldr	r3, [r7, #32]
 800583a:	0d5b      	lsrs	r3, r3, #21
 800583c:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005840:	4b0e      	ldr	r3, [pc, #56]	; (800587c <I2C_TransferConfig+0xf4>)
 8005842:	430b      	orrs	r3, r1
 8005844:	43db      	mvns	r3, r3
 8005846:	ea02 0103 	and.w	r1, r2, r3
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	697a      	ldr	r2, [r7, #20]
 8005850:	430a      	orrs	r2, r1
 8005852:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005854:	bf00      	nop
 8005856:	3718      	adds	r7, #24
 8005858:	46bd      	mov	sp, r7
 800585a:	bd80      	pop	{r7, pc}
 800585c:	40005400 	.word	0x40005400
 8005860:	40005800 	.word	0x40005800
 8005864:	40005c00 	.word	0x40005c00
 8005868:	40006000 	.word	0x40006000
 800586c:	080166fc 	.word	0x080166fc
 8005870:	80004000 	.word	0x80004000
 8005874:	80002400 	.word	0x80002400
 8005878:	80002000 	.word	0x80002000
 800587c:	03ff63ff 	.word	0x03ff63ff

08005880 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8005880:	b480      	push	{r7}
 8005882:	b085      	sub	sp, #20
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
 8005888:	460b      	mov	r3, r1
 800588a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800588c:	2300      	movs	r3, #0
 800588e:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005890:	887b      	ldrh	r3, [r7, #2]
 8005892:	f003 0301 	and.w	r3, r3, #1
 8005896:	2b00      	cmp	r3, #0
 8005898:	d00f      	beq.n	80058ba <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 80058a0:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80058a8:	b2db      	uxtb	r3, r3
 80058aa:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80058ae:	2b28      	cmp	r3, #40	; 0x28
 80058b0:	d003      	beq.n	80058ba <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80058b8:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80058ba:	887b      	ldrh	r3, [r7, #2]
 80058bc:	f003 0302 	and.w	r3, r3, #2
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d00f      	beq.n	80058e4 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 80058ca:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80058d2:	b2db      	uxtb	r3, r3
 80058d4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80058d8:	2b28      	cmp	r3, #40	; 0x28
 80058da:	d003      	beq.n	80058e4 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80058e2:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80058e4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	da03      	bge.n	80058f4 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80058f2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80058f4:	887b      	ldrh	r3, [r7, #2]
 80058f6:	2b10      	cmp	r3, #16
 80058f8:	d103      	bne.n	8005902 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8005900:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005902:	887b      	ldrh	r3, [r7, #2]
 8005904:	2b20      	cmp	r3, #32
 8005906:	d103      	bne.n	8005910 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	f043 0320 	orr.w	r3, r3, #32
 800590e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8005910:	887b      	ldrh	r3, [r7, #2]
 8005912:	2b40      	cmp	r3, #64	; 0x40
 8005914:	d103      	bne.n	800591e <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800591c:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	6819      	ldr	r1, [r3, #0]
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	43da      	mvns	r2, r3
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	400a      	ands	r2, r1
 800592e:	601a      	str	r2, [r3, #0]
}
 8005930:	bf00      	nop
 8005932:	3714      	adds	r7, #20
 8005934:	46bd      	mov	sp, r7
 8005936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593a:	4770      	bx	lr

0800593c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b082      	sub	sp, #8
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
 8005944:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4a32      	ldr	r2, [pc, #200]	; (8005a14 <HAL_I2CEx_ConfigAnalogFilter+0xd8>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d012      	beq.n	8005976 <HAL_I2CEx_ConfigAnalogFilter+0x3a>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a30      	ldr	r2, [pc, #192]	; (8005a18 <HAL_I2CEx_ConfigAnalogFilter+0xdc>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d00d      	beq.n	8005976 <HAL_I2CEx_ConfigAnalogFilter+0x3a>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4a2f      	ldr	r2, [pc, #188]	; (8005a1c <HAL_I2CEx_ConfigAnalogFilter+0xe0>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d008      	beq.n	8005976 <HAL_I2CEx_ConfigAnalogFilter+0x3a>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4a2d      	ldr	r2, [pc, #180]	; (8005a20 <HAL_I2CEx_ConfigAnalogFilter+0xe4>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d003      	beq.n	8005976 <HAL_I2CEx_ConfigAnalogFilter+0x3a>
 800596e:	215e      	movs	r1, #94	; 0x5e
 8005970:	482c      	ldr	r0, [pc, #176]	; (8005a24 <HAL_I2CEx_ConfigAnalogFilter+0xe8>)
 8005972:	f7fd f88a 	bl	8002a8a <assert_failed>
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d007      	beq.n	800598c <HAL_I2CEx_ConfigAnalogFilter+0x50>
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005982:	d003      	beq.n	800598c <HAL_I2CEx_ConfigAnalogFilter+0x50>
 8005984:	215f      	movs	r1, #95	; 0x5f
 8005986:	4827      	ldr	r0, [pc, #156]	; (8005a24 <HAL_I2CEx_ConfigAnalogFilter+0xe8>)
 8005988:	f7fd f87f 	bl	8002a8a <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005992:	b2db      	uxtb	r3, r3
 8005994:	2b20      	cmp	r3, #32
 8005996:	d138      	bne.n	8005a0a <HAL_I2CEx_ConfigAnalogFilter+0xce>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800599e:	2b01      	cmp	r3, #1
 80059a0:	d101      	bne.n	80059a6 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
 80059a2:	2302      	movs	r3, #2
 80059a4:	e032      	b.n	8005a0c <HAL_I2CEx_ConfigAnalogFilter+0xd0>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2201      	movs	r2, #1
 80059aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2224      	movs	r2, #36	; 0x24
 80059b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	681a      	ldr	r2, [r3, #0]
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f022 0201 	bic.w	r2, r2, #1
 80059c4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	681a      	ldr	r2, [r3, #0]
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80059d4:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	6819      	ldr	r1, [r3, #0]
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	683a      	ldr	r2, [r7, #0]
 80059e2:	430a      	orrs	r2, r1
 80059e4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	681a      	ldr	r2, [r3, #0]
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f042 0201 	orr.w	r2, r2, #1
 80059f4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2220      	movs	r2, #32
 80059fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2200      	movs	r2, #0
 8005a02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005a06:	2300      	movs	r3, #0
 8005a08:	e000      	b.n	8005a0c <HAL_I2CEx_ConfigAnalogFilter+0xd0>
  }
  else
  {
    return HAL_BUSY;
 8005a0a:	2302      	movs	r3, #2
  }
}
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	3708      	adds	r7, #8
 8005a10:	46bd      	mov	sp, r7
 8005a12:	bd80      	pop	{r7, pc}
 8005a14:	40005400 	.word	0x40005400
 8005a18:	40005800 	.word	0x40005800
 8005a1c:	40005c00 	.word	0x40005c00
 8005a20:	40006000 	.word	0x40006000
 8005a24:	08016734 	.word	0x08016734

08005a28 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b084      	sub	sp, #16
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
 8005a30:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg;

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4a31      	ldr	r2, [pc, #196]	; (8005afc <HAL_I2CEx_ConfigDigitalFilter+0xd4>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d012      	beq.n	8005a62 <HAL_I2CEx_ConfigDigitalFilter+0x3a>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4a2f      	ldr	r2, [pc, #188]	; (8005b00 <HAL_I2CEx_ConfigDigitalFilter+0xd8>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d00d      	beq.n	8005a62 <HAL_I2CEx_ConfigDigitalFilter+0x3a>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4a2e      	ldr	r2, [pc, #184]	; (8005b04 <HAL_I2CEx_ConfigDigitalFilter+0xdc>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d008      	beq.n	8005a62 <HAL_I2CEx_ConfigDigitalFilter+0x3a>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4a2c      	ldr	r2, [pc, #176]	; (8005b08 <HAL_I2CEx_ConfigDigitalFilter+0xe0>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d003      	beq.n	8005a62 <HAL_I2CEx_ConfigDigitalFilter+0x3a>
 8005a5a:	218c      	movs	r1, #140	; 0x8c
 8005a5c:	482b      	ldr	r0, [pc, #172]	; (8005b0c <HAL_I2CEx_ConfigDigitalFilter+0xe4>)
 8005a5e:	f7fd f814 	bl	8002a8a <assert_failed>
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	2b0f      	cmp	r3, #15
 8005a66:	d903      	bls.n	8005a70 <HAL_I2CEx_ConfigDigitalFilter+0x48>
 8005a68:	218d      	movs	r1, #141	; 0x8d
 8005a6a:	4828      	ldr	r0, [pc, #160]	; (8005b0c <HAL_I2CEx_ConfigDigitalFilter+0xe4>)
 8005a6c:	f7fd f80d 	bl	8002a8a <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a76:	b2db      	uxtb	r3, r3
 8005a78:	2b20      	cmp	r3, #32
 8005a7a:	d139      	bne.n	8005af0 <HAL_I2CEx_ConfigDigitalFilter+0xc8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005a82:	2b01      	cmp	r3, #1
 8005a84:	d101      	bne.n	8005a8a <HAL_I2CEx_ConfigDigitalFilter+0x62>
 8005a86:	2302      	movs	r3, #2
 8005a88:	e033      	b.n	8005af2 <HAL_I2CEx_ConfigDigitalFilter+0xca>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2201      	movs	r2, #1
 8005a8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2224      	movs	r2, #36	; 0x24
 8005a96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	681a      	ldr	r2, [r3, #0]
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f022 0201 	bic.w	r2, r2, #1
 8005aa8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005ab8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	021b      	lsls	r3, r3, #8
 8005abe:	68fa      	ldr	r2, [r7, #12]
 8005ac0:	4313      	orrs	r3, r2
 8005ac2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	68fa      	ldr	r2, [r7, #12]
 8005aca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	681a      	ldr	r2, [r3, #0]
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f042 0201 	orr.w	r2, r2, #1
 8005ada:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2220      	movs	r2, #32
 8005ae0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005aec:	2300      	movs	r3, #0
 8005aee:	e000      	b.n	8005af2 <HAL_I2CEx_ConfigDigitalFilter+0xca>
  }
  else
  {
    return HAL_BUSY;
 8005af0:	2302      	movs	r3, #2
  }
}
 8005af2:	4618      	mov	r0, r3
 8005af4:	3710      	adds	r7, #16
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bd80      	pop	{r7, pc}
 8005afa:	bf00      	nop
 8005afc:	40005400 	.word	0x40005400
 8005b00:	40005800 	.word	0x40005800
 8005b04:	40005c00 	.word	0x40005c00
 8005b08:	40006000 	.word	0x40006000
 8005b0c:	08016734 	.word	0x08016734

08005b10 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b082      	sub	sp, #8
 8005b14:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8005b16:	2300      	movs	r3, #0
 8005b18:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8005b1a:	4b23      	ldr	r3, [pc, #140]	; (8005ba8 <HAL_PWREx_EnableOverDrive+0x98>)
 8005b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b1e:	4a22      	ldr	r2, [pc, #136]	; (8005ba8 <HAL_PWREx_EnableOverDrive+0x98>)
 8005b20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b24:	6413      	str	r3, [r2, #64]	; 0x40
 8005b26:	4b20      	ldr	r3, [pc, #128]	; (8005ba8 <HAL_PWREx_EnableOverDrive+0x98>)
 8005b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b2e:	603b      	str	r3, [r7, #0]
 8005b30:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005b32:	4b1e      	ldr	r3, [pc, #120]	; (8005bac <HAL_PWREx_EnableOverDrive+0x9c>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	4a1d      	ldr	r2, [pc, #116]	; (8005bac <HAL_PWREx_EnableOverDrive+0x9c>)
 8005b38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b3c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005b3e:	f7fd fdd7 	bl	80036f0 <HAL_GetTick>
 8005b42:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005b44:	e009      	b.n	8005b5a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005b46:	f7fd fdd3 	bl	80036f0 <HAL_GetTick>
 8005b4a:	4602      	mov	r2, r0
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	1ad3      	subs	r3, r2, r3
 8005b50:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005b54:	d901      	bls.n	8005b5a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8005b56:	2303      	movs	r3, #3
 8005b58:	e022      	b.n	8005ba0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005b5a:	4b14      	ldr	r3, [pc, #80]	; (8005bac <HAL_PWREx_EnableOverDrive+0x9c>)
 8005b5c:	685b      	ldr	r3, [r3, #4]
 8005b5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b66:	d1ee      	bne.n	8005b46 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005b68:	4b10      	ldr	r3, [pc, #64]	; (8005bac <HAL_PWREx_EnableOverDrive+0x9c>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4a0f      	ldr	r2, [pc, #60]	; (8005bac <HAL_PWREx_EnableOverDrive+0x9c>)
 8005b6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b72:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005b74:	f7fd fdbc 	bl	80036f0 <HAL_GetTick>
 8005b78:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005b7a:	e009      	b.n	8005b90 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005b7c:	f7fd fdb8 	bl	80036f0 <HAL_GetTick>
 8005b80:	4602      	mov	r2, r0
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	1ad3      	subs	r3, r2, r3
 8005b86:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005b8a:	d901      	bls.n	8005b90 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8005b8c:	2303      	movs	r3, #3
 8005b8e:	e007      	b.n	8005ba0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005b90:	4b06      	ldr	r3, [pc, #24]	; (8005bac <HAL_PWREx_EnableOverDrive+0x9c>)
 8005b92:	685b      	ldr	r3, [r3, #4]
 8005b94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b98:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005b9c:	d1ee      	bne.n	8005b7c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8005b9e:	2300      	movs	r3, #0
}
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	3708      	adds	r7, #8
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	bd80      	pop	{r7, pc}
 8005ba8:	40023800 	.word	0x40023800
 8005bac:	40007000 	.word	0x40007000

08005bb0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b086      	sub	sp, #24
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8005bb8:	2300      	movs	r3, #0
 8005bba:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d101      	bne.n	8005bc6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	e345      	b.n	8006252 <HAL_RCC_OscConfig+0x6a2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	2b0f      	cmp	r3, #15
 8005bcc:	d904      	bls.n	8005bd8 <HAL_RCC_OscConfig+0x28>
 8005bce:	f240 1163 	movw	r1, #355	; 0x163
 8005bd2:	4892      	ldr	r0, [pc, #584]	; (8005e1c <HAL_RCC_OscConfig+0x26c>)
 8005bd4:	f7fc ff59 	bl	8002a8a <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f003 0301 	and.w	r3, r3, #1
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	f000 809a 	beq.w	8005d1a <HAL_RCC_OscConfig+0x16a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	685b      	ldr	r3, [r3, #4]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d00e      	beq.n	8005c0c <HAL_RCC_OscConfig+0x5c>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	685b      	ldr	r3, [r3, #4]
 8005bf2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005bf6:	d009      	beq.n	8005c0c <HAL_RCC_OscConfig+0x5c>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	685b      	ldr	r3, [r3, #4]
 8005bfc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005c00:	d004      	beq.n	8005c0c <HAL_RCC_OscConfig+0x5c>
 8005c02:	f240 1169 	movw	r1, #361	; 0x169
 8005c06:	4885      	ldr	r0, [pc, #532]	; (8005e1c <HAL_RCC_OscConfig+0x26c>)
 8005c08:	f7fc ff3f 	bl	8002a8a <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005c0c:	4b84      	ldr	r3, [pc, #528]	; (8005e20 <HAL_RCC_OscConfig+0x270>)
 8005c0e:	689b      	ldr	r3, [r3, #8]
 8005c10:	f003 030c 	and.w	r3, r3, #12
 8005c14:	2b04      	cmp	r3, #4
 8005c16:	d00c      	beq.n	8005c32 <HAL_RCC_OscConfig+0x82>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005c18:	4b81      	ldr	r3, [pc, #516]	; (8005e20 <HAL_RCC_OscConfig+0x270>)
 8005c1a:	689b      	ldr	r3, [r3, #8]
 8005c1c:	f003 030c 	and.w	r3, r3, #12
 8005c20:	2b08      	cmp	r3, #8
 8005c22:	d112      	bne.n	8005c4a <HAL_RCC_OscConfig+0x9a>
 8005c24:	4b7e      	ldr	r3, [pc, #504]	; (8005e20 <HAL_RCC_OscConfig+0x270>)
 8005c26:	685b      	ldr	r3, [r3, #4]
 8005c28:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c2c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005c30:	d10b      	bne.n	8005c4a <HAL_RCC_OscConfig+0x9a>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c32:	4b7b      	ldr	r3, [pc, #492]	; (8005e20 <HAL_RCC_OscConfig+0x270>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d06c      	beq.n	8005d18 <HAL_RCC_OscConfig+0x168>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	685b      	ldr	r3, [r3, #4]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d168      	bne.n	8005d18 <HAL_RCC_OscConfig+0x168>
      {
        return HAL_ERROR;
 8005c46:	2301      	movs	r3, #1
 8005c48:	e303      	b.n	8006252 <HAL_RCC_OscConfig+0x6a2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	685b      	ldr	r3, [r3, #4]
 8005c4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c52:	d106      	bne.n	8005c62 <HAL_RCC_OscConfig+0xb2>
 8005c54:	4b72      	ldr	r3, [pc, #456]	; (8005e20 <HAL_RCC_OscConfig+0x270>)
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4a71      	ldr	r2, [pc, #452]	; (8005e20 <HAL_RCC_OscConfig+0x270>)
 8005c5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c5e:	6013      	str	r3, [r2, #0]
 8005c60:	e02e      	b.n	8005cc0 <HAL_RCC_OscConfig+0x110>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	685b      	ldr	r3, [r3, #4]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d10c      	bne.n	8005c84 <HAL_RCC_OscConfig+0xd4>
 8005c6a:	4b6d      	ldr	r3, [pc, #436]	; (8005e20 <HAL_RCC_OscConfig+0x270>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	4a6c      	ldr	r2, [pc, #432]	; (8005e20 <HAL_RCC_OscConfig+0x270>)
 8005c70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c74:	6013      	str	r3, [r2, #0]
 8005c76:	4b6a      	ldr	r3, [pc, #424]	; (8005e20 <HAL_RCC_OscConfig+0x270>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	4a69      	ldr	r2, [pc, #420]	; (8005e20 <HAL_RCC_OscConfig+0x270>)
 8005c7c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005c80:	6013      	str	r3, [r2, #0]
 8005c82:	e01d      	b.n	8005cc0 <HAL_RCC_OscConfig+0x110>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	685b      	ldr	r3, [r3, #4]
 8005c88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005c8c:	d10c      	bne.n	8005ca8 <HAL_RCC_OscConfig+0xf8>
 8005c8e:	4b64      	ldr	r3, [pc, #400]	; (8005e20 <HAL_RCC_OscConfig+0x270>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	4a63      	ldr	r2, [pc, #396]	; (8005e20 <HAL_RCC_OscConfig+0x270>)
 8005c94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005c98:	6013      	str	r3, [r2, #0]
 8005c9a:	4b61      	ldr	r3, [pc, #388]	; (8005e20 <HAL_RCC_OscConfig+0x270>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4a60      	ldr	r2, [pc, #384]	; (8005e20 <HAL_RCC_OscConfig+0x270>)
 8005ca0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ca4:	6013      	str	r3, [r2, #0]
 8005ca6:	e00b      	b.n	8005cc0 <HAL_RCC_OscConfig+0x110>
 8005ca8:	4b5d      	ldr	r3, [pc, #372]	; (8005e20 <HAL_RCC_OscConfig+0x270>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4a5c      	ldr	r2, [pc, #368]	; (8005e20 <HAL_RCC_OscConfig+0x270>)
 8005cae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005cb2:	6013      	str	r3, [r2, #0]
 8005cb4:	4b5a      	ldr	r3, [pc, #360]	; (8005e20 <HAL_RCC_OscConfig+0x270>)
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	4a59      	ldr	r2, [pc, #356]	; (8005e20 <HAL_RCC_OscConfig+0x270>)
 8005cba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005cbe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	685b      	ldr	r3, [r3, #4]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d013      	beq.n	8005cf0 <HAL_RCC_OscConfig+0x140>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cc8:	f7fd fd12 	bl	80036f0 <HAL_GetTick>
 8005ccc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005cce:	e008      	b.n	8005ce2 <HAL_RCC_OscConfig+0x132>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005cd0:	f7fd fd0e 	bl	80036f0 <HAL_GetTick>
 8005cd4:	4602      	mov	r2, r0
 8005cd6:	693b      	ldr	r3, [r7, #16]
 8005cd8:	1ad3      	subs	r3, r2, r3
 8005cda:	2b64      	cmp	r3, #100	; 0x64
 8005cdc:	d901      	bls.n	8005ce2 <HAL_RCC_OscConfig+0x132>
          {
            return HAL_TIMEOUT;
 8005cde:	2303      	movs	r3, #3
 8005ce0:	e2b7      	b.n	8006252 <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ce2:	4b4f      	ldr	r3, [pc, #316]	; (8005e20 <HAL_RCC_OscConfig+0x270>)
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d0f0      	beq.n	8005cd0 <HAL_RCC_OscConfig+0x120>
 8005cee:	e014      	b.n	8005d1a <HAL_RCC_OscConfig+0x16a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cf0:	f7fd fcfe 	bl	80036f0 <HAL_GetTick>
 8005cf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005cf6:	e008      	b.n	8005d0a <HAL_RCC_OscConfig+0x15a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005cf8:	f7fd fcfa 	bl	80036f0 <HAL_GetTick>
 8005cfc:	4602      	mov	r2, r0
 8005cfe:	693b      	ldr	r3, [r7, #16]
 8005d00:	1ad3      	subs	r3, r2, r3
 8005d02:	2b64      	cmp	r3, #100	; 0x64
 8005d04:	d901      	bls.n	8005d0a <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8005d06:	2303      	movs	r3, #3
 8005d08:	e2a3      	b.n	8006252 <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d0a:	4b45      	ldr	r3, [pc, #276]	; (8005e20 <HAL_RCC_OscConfig+0x270>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d1f0      	bne.n	8005cf8 <HAL_RCC_OscConfig+0x148>
 8005d16:	e000      	b.n	8005d1a <HAL_RCC_OscConfig+0x16a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f003 0302 	and.w	r3, r3, #2
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	f000 8084 	beq.w	8005e30 <HAL_RCC_OscConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	68db      	ldr	r3, [r3, #12]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d008      	beq.n	8005d42 <HAL_RCC_OscConfig+0x192>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	68db      	ldr	r3, [r3, #12]
 8005d34:	2b01      	cmp	r3, #1
 8005d36:	d004      	beq.n	8005d42 <HAL_RCC_OscConfig+0x192>
 8005d38:	f240 119b 	movw	r1, #411	; 0x19b
 8005d3c:	4837      	ldr	r0, [pc, #220]	; (8005e1c <HAL_RCC_OscConfig+0x26c>)
 8005d3e:	f7fc fea4 	bl	8002a8a <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	691b      	ldr	r3, [r3, #16]
 8005d46:	2b1f      	cmp	r3, #31
 8005d48:	d904      	bls.n	8005d54 <HAL_RCC_OscConfig+0x1a4>
 8005d4a:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 8005d4e:	4833      	ldr	r0, [pc, #204]	; (8005e1c <HAL_RCC_OscConfig+0x26c>)
 8005d50:	f7fc fe9b 	bl	8002a8a <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005d54:	4b32      	ldr	r3, [pc, #200]	; (8005e20 <HAL_RCC_OscConfig+0x270>)
 8005d56:	689b      	ldr	r3, [r3, #8]
 8005d58:	f003 030c 	and.w	r3, r3, #12
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d00b      	beq.n	8005d78 <HAL_RCC_OscConfig+0x1c8>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005d60:	4b2f      	ldr	r3, [pc, #188]	; (8005e20 <HAL_RCC_OscConfig+0x270>)
 8005d62:	689b      	ldr	r3, [r3, #8]
 8005d64:	f003 030c 	and.w	r3, r3, #12
 8005d68:	2b08      	cmp	r3, #8
 8005d6a:	d11c      	bne.n	8005da6 <HAL_RCC_OscConfig+0x1f6>
 8005d6c:	4b2c      	ldr	r3, [pc, #176]	; (8005e20 <HAL_RCC_OscConfig+0x270>)
 8005d6e:	685b      	ldr	r3, [r3, #4]
 8005d70:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d116      	bne.n	8005da6 <HAL_RCC_OscConfig+0x1f6>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d78:	4b29      	ldr	r3, [pc, #164]	; (8005e20 <HAL_RCC_OscConfig+0x270>)
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f003 0302 	and.w	r3, r3, #2
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d005      	beq.n	8005d90 <HAL_RCC_OscConfig+0x1e0>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	68db      	ldr	r3, [r3, #12]
 8005d88:	2b01      	cmp	r3, #1
 8005d8a:	d001      	beq.n	8005d90 <HAL_RCC_OscConfig+0x1e0>
      {
        return HAL_ERROR;
 8005d8c:	2301      	movs	r3, #1
 8005d8e:	e260      	b.n	8006252 <HAL_RCC_OscConfig+0x6a2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d90:	4b23      	ldr	r3, [pc, #140]	; (8005e20 <HAL_RCC_OscConfig+0x270>)
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	691b      	ldr	r3, [r3, #16]
 8005d9c:	00db      	lsls	r3, r3, #3
 8005d9e:	4920      	ldr	r1, [pc, #128]	; (8005e20 <HAL_RCC_OscConfig+0x270>)
 8005da0:	4313      	orrs	r3, r2
 8005da2:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005da4:	e044      	b.n	8005e30 <HAL_RCC_OscConfig+0x280>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	68db      	ldr	r3, [r3, #12]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d023      	beq.n	8005df6 <HAL_RCC_OscConfig+0x246>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005dae:	4b1c      	ldr	r3, [pc, #112]	; (8005e20 <HAL_RCC_OscConfig+0x270>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	4a1b      	ldr	r2, [pc, #108]	; (8005e20 <HAL_RCC_OscConfig+0x270>)
 8005db4:	f043 0301 	orr.w	r3, r3, #1
 8005db8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dba:	f7fd fc99 	bl	80036f0 <HAL_GetTick>
 8005dbe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005dc0:	e008      	b.n	8005dd4 <HAL_RCC_OscConfig+0x224>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005dc2:	f7fd fc95 	bl	80036f0 <HAL_GetTick>
 8005dc6:	4602      	mov	r2, r0
 8005dc8:	693b      	ldr	r3, [r7, #16]
 8005dca:	1ad3      	subs	r3, r2, r3
 8005dcc:	2b02      	cmp	r3, #2
 8005dce:	d901      	bls.n	8005dd4 <HAL_RCC_OscConfig+0x224>
          {
            return HAL_TIMEOUT;
 8005dd0:	2303      	movs	r3, #3
 8005dd2:	e23e      	b.n	8006252 <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005dd4:	4b12      	ldr	r3, [pc, #72]	; (8005e20 <HAL_RCC_OscConfig+0x270>)
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f003 0302 	and.w	r3, r3, #2
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d0f0      	beq.n	8005dc2 <HAL_RCC_OscConfig+0x212>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005de0:	4b0f      	ldr	r3, [pc, #60]	; (8005e20 <HAL_RCC_OscConfig+0x270>)
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	691b      	ldr	r3, [r3, #16]
 8005dec:	00db      	lsls	r3, r3, #3
 8005dee:	490c      	ldr	r1, [pc, #48]	; (8005e20 <HAL_RCC_OscConfig+0x270>)
 8005df0:	4313      	orrs	r3, r2
 8005df2:	600b      	str	r3, [r1, #0]
 8005df4:	e01c      	b.n	8005e30 <HAL_RCC_OscConfig+0x280>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005df6:	4b0a      	ldr	r3, [pc, #40]	; (8005e20 <HAL_RCC_OscConfig+0x270>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	4a09      	ldr	r2, [pc, #36]	; (8005e20 <HAL_RCC_OscConfig+0x270>)
 8005dfc:	f023 0301 	bic.w	r3, r3, #1
 8005e00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e02:	f7fd fc75 	bl	80036f0 <HAL_GetTick>
 8005e06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e08:	e00c      	b.n	8005e24 <HAL_RCC_OscConfig+0x274>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005e0a:	f7fd fc71 	bl	80036f0 <HAL_GetTick>
 8005e0e:	4602      	mov	r2, r0
 8005e10:	693b      	ldr	r3, [r7, #16]
 8005e12:	1ad3      	subs	r3, r2, r3
 8005e14:	2b02      	cmp	r3, #2
 8005e16:	d905      	bls.n	8005e24 <HAL_RCC_OscConfig+0x274>
          {
            return HAL_TIMEOUT;
 8005e18:	2303      	movs	r3, #3
 8005e1a:	e21a      	b.n	8006252 <HAL_RCC_OscConfig+0x6a2>
 8005e1c:	08016770 	.word	0x08016770
 8005e20:	40023800 	.word	0x40023800
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e24:	4b7e      	ldr	r3, [pc, #504]	; (8006020 <HAL_RCC_OscConfig+0x470>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f003 0302 	and.w	r3, r3, #2
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d1ec      	bne.n	8005e0a <HAL_RCC_OscConfig+0x25a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f003 0308 	and.w	r3, r3, #8
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d043      	beq.n	8005ec4 <HAL_RCC_OscConfig+0x314>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	695b      	ldr	r3, [r3, #20]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d008      	beq.n	8005e56 <HAL_RCC_OscConfig+0x2a6>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	695b      	ldr	r3, [r3, #20]
 8005e48:	2b01      	cmp	r3, #1
 8005e4a:	d004      	beq.n	8005e56 <HAL_RCC_OscConfig+0x2a6>
 8005e4c:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 8005e50:	4874      	ldr	r0, [pc, #464]	; (8006024 <HAL_RCC_OscConfig+0x474>)
 8005e52:	f7fc fe1a 	bl	8002a8a <assert_failed>

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	695b      	ldr	r3, [r3, #20]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d019      	beq.n	8005e92 <HAL_RCC_OscConfig+0x2e2>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005e5e:	4b70      	ldr	r3, [pc, #448]	; (8006020 <HAL_RCC_OscConfig+0x470>)
 8005e60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e62:	4a6f      	ldr	r2, [pc, #444]	; (8006020 <HAL_RCC_OscConfig+0x470>)
 8005e64:	f043 0301 	orr.w	r3, r3, #1
 8005e68:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e6a:	f7fd fc41 	bl	80036f0 <HAL_GetTick>
 8005e6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e70:	e008      	b.n	8005e84 <HAL_RCC_OscConfig+0x2d4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005e72:	f7fd fc3d 	bl	80036f0 <HAL_GetTick>
 8005e76:	4602      	mov	r2, r0
 8005e78:	693b      	ldr	r3, [r7, #16]
 8005e7a:	1ad3      	subs	r3, r2, r3
 8005e7c:	2b02      	cmp	r3, #2
 8005e7e:	d901      	bls.n	8005e84 <HAL_RCC_OscConfig+0x2d4>
        {
          return HAL_TIMEOUT;
 8005e80:	2303      	movs	r3, #3
 8005e82:	e1e6      	b.n	8006252 <HAL_RCC_OscConfig+0x6a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e84:	4b66      	ldr	r3, [pc, #408]	; (8006020 <HAL_RCC_OscConfig+0x470>)
 8005e86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e88:	f003 0302 	and.w	r3, r3, #2
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d0f0      	beq.n	8005e72 <HAL_RCC_OscConfig+0x2c2>
 8005e90:	e018      	b.n	8005ec4 <HAL_RCC_OscConfig+0x314>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005e92:	4b63      	ldr	r3, [pc, #396]	; (8006020 <HAL_RCC_OscConfig+0x470>)
 8005e94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e96:	4a62      	ldr	r2, [pc, #392]	; (8006020 <HAL_RCC_OscConfig+0x470>)
 8005e98:	f023 0301 	bic.w	r3, r3, #1
 8005e9c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e9e:	f7fd fc27 	bl	80036f0 <HAL_GetTick>
 8005ea2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ea4:	e008      	b.n	8005eb8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005ea6:	f7fd fc23 	bl	80036f0 <HAL_GetTick>
 8005eaa:	4602      	mov	r2, r0
 8005eac:	693b      	ldr	r3, [r7, #16]
 8005eae:	1ad3      	subs	r3, r2, r3
 8005eb0:	2b02      	cmp	r3, #2
 8005eb2:	d901      	bls.n	8005eb8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005eb4:	2303      	movs	r3, #3
 8005eb6:	e1cc      	b.n	8006252 <HAL_RCC_OscConfig+0x6a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005eb8:	4b59      	ldr	r3, [pc, #356]	; (8006020 <HAL_RCC_OscConfig+0x470>)
 8005eba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ebc:	f003 0302 	and.w	r3, r3, #2
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d1f0      	bne.n	8005ea6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f003 0304 	and.w	r3, r3, #4
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	f000 80bc 	beq.w	800604a <HAL_RCC_OscConfig+0x49a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	689b      	ldr	r3, [r3, #8]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d00c      	beq.n	8005ef4 <HAL_RCC_OscConfig+0x344>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	689b      	ldr	r3, [r3, #8]
 8005ede:	2b01      	cmp	r3, #1
 8005ee0:	d008      	beq.n	8005ef4 <HAL_RCC_OscConfig+0x344>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	689b      	ldr	r3, [r3, #8]
 8005ee6:	2b05      	cmp	r3, #5
 8005ee8:	d004      	beq.n	8005ef4 <HAL_RCC_OscConfig+0x344>
 8005eea:	f240 2106 	movw	r1, #518	; 0x206
 8005eee:	484d      	ldr	r0, [pc, #308]	; (8006024 <HAL_RCC_OscConfig+0x474>)
 8005ef0:	f7fc fdcb 	bl	8002a8a <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005ef4:	4b4a      	ldr	r3, [pc, #296]	; (8006020 <HAL_RCC_OscConfig+0x470>)
 8005ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ef8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d10d      	bne.n	8005f1c <HAL_RCC_OscConfig+0x36c>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f00:	4b47      	ldr	r3, [pc, #284]	; (8006020 <HAL_RCC_OscConfig+0x470>)
 8005f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f04:	4a46      	ldr	r2, [pc, #280]	; (8006020 <HAL_RCC_OscConfig+0x470>)
 8005f06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f0a:	6413      	str	r3, [r2, #64]	; 0x40
 8005f0c:	4b44      	ldr	r3, [pc, #272]	; (8006020 <HAL_RCC_OscConfig+0x470>)
 8005f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f14:	60bb      	str	r3, [r7, #8]
 8005f16:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005f18:	2301      	movs	r3, #1
 8005f1a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005f1c:	4b42      	ldr	r3, [pc, #264]	; (8006028 <HAL_RCC_OscConfig+0x478>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d118      	bne.n	8005f5a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8005f28:	4b3f      	ldr	r3, [pc, #252]	; (8006028 <HAL_RCC_OscConfig+0x478>)
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	4a3e      	ldr	r2, [pc, #248]	; (8006028 <HAL_RCC_OscConfig+0x478>)
 8005f2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f32:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005f34:	f7fd fbdc 	bl	80036f0 <HAL_GetTick>
 8005f38:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005f3a:	e008      	b.n	8005f4e <HAL_RCC_OscConfig+0x39e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f3c:	f7fd fbd8 	bl	80036f0 <HAL_GetTick>
 8005f40:	4602      	mov	r2, r0
 8005f42:	693b      	ldr	r3, [r7, #16]
 8005f44:	1ad3      	subs	r3, r2, r3
 8005f46:	2b64      	cmp	r3, #100	; 0x64
 8005f48:	d901      	bls.n	8005f4e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005f4a:	2303      	movs	r3, #3
 8005f4c:	e181      	b.n	8006252 <HAL_RCC_OscConfig+0x6a2>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005f4e:	4b36      	ldr	r3, [pc, #216]	; (8006028 <HAL_RCC_OscConfig+0x478>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d0f0      	beq.n	8005f3c <HAL_RCC_OscConfig+0x38c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	689b      	ldr	r3, [r3, #8]
 8005f5e:	2b01      	cmp	r3, #1
 8005f60:	d106      	bne.n	8005f70 <HAL_RCC_OscConfig+0x3c0>
 8005f62:	4b2f      	ldr	r3, [pc, #188]	; (8006020 <HAL_RCC_OscConfig+0x470>)
 8005f64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f66:	4a2e      	ldr	r2, [pc, #184]	; (8006020 <HAL_RCC_OscConfig+0x470>)
 8005f68:	f043 0301 	orr.w	r3, r3, #1
 8005f6c:	6713      	str	r3, [r2, #112]	; 0x70
 8005f6e:	e02d      	b.n	8005fcc <HAL_RCC_OscConfig+0x41c>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	689b      	ldr	r3, [r3, #8]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d10c      	bne.n	8005f92 <HAL_RCC_OscConfig+0x3e2>
 8005f78:	4b29      	ldr	r3, [pc, #164]	; (8006020 <HAL_RCC_OscConfig+0x470>)
 8005f7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f7c:	4a28      	ldr	r2, [pc, #160]	; (8006020 <HAL_RCC_OscConfig+0x470>)
 8005f7e:	f023 0301 	bic.w	r3, r3, #1
 8005f82:	6713      	str	r3, [r2, #112]	; 0x70
 8005f84:	4b26      	ldr	r3, [pc, #152]	; (8006020 <HAL_RCC_OscConfig+0x470>)
 8005f86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f88:	4a25      	ldr	r2, [pc, #148]	; (8006020 <HAL_RCC_OscConfig+0x470>)
 8005f8a:	f023 0304 	bic.w	r3, r3, #4
 8005f8e:	6713      	str	r3, [r2, #112]	; 0x70
 8005f90:	e01c      	b.n	8005fcc <HAL_RCC_OscConfig+0x41c>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	689b      	ldr	r3, [r3, #8]
 8005f96:	2b05      	cmp	r3, #5
 8005f98:	d10c      	bne.n	8005fb4 <HAL_RCC_OscConfig+0x404>
 8005f9a:	4b21      	ldr	r3, [pc, #132]	; (8006020 <HAL_RCC_OscConfig+0x470>)
 8005f9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f9e:	4a20      	ldr	r2, [pc, #128]	; (8006020 <HAL_RCC_OscConfig+0x470>)
 8005fa0:	f043 0304 	orr.w	r3, r3, #4
 8005fa4:	6713      	str	r3, [r2, #112]	; 0x70
 8005fa6:	4b1e      	ldr	r3, [pc, #120]	; (8006020 <HAL_RCC_OscConfig+0x470>)
 8005fa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005faa:	4a1d      	ldr	r2, [pc, #116]	; (8006020 <HAL_RCC_OscConfig+0x470>)
 8005fac:	f043 0301 	orr.w	r3, r3, #1
 8005fb0:	6713      	str	r3, [r2, #112]	; 0x70
 8005fb2:	e00b      	b.n	8005fcc <HAL_RCC_OscConfig+0x41c>
 8005fb4:	4b1a      	ldr	r3, [pc, #104]	; (8006020 <HAL_RCC_OscConfig+0x470>)
 8005fb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fb8:	4a19      	ldr	r2, [pc, #100]	; (8006020 <HAL_RCC_OscConfig+0x470>)
 8005fba:	f023 0301 	bic.w	r3, r3, #1
 8005fbe:	6713      	str	r3, [r2, #112]	; 0x70
 8005fc0:	4b17      	ldr	r3, [pc, #92]	; (8006020 <HAL_RCC_OscConfig+0x470>)
 8005fc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fc4:	4a16      	ldr	r2, [pc, #88]	; (8006020 <HAL_RCC_OscConfig+0x470>)
 8005fc6:	f023 0304 	bic.w	r3, r3, #4
 8005fca:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	689b      	ldr	r3, [r3, #8]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d015      	beq.n	8006000 <HAL_RCC_OscConfig+0x450>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fd4:	f7fd fb8c 	bl	80036f0 <HAL_GetTick>
 8005fd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005fda:	e00a      	b.n	8005ff2 <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005fdc:	f7fd fb88 	bl	80036f0 <HAL_GetTick>
 8005fe0:	4602      	mov	r2, r0
 8005fe2:	693b      	ldr	r3, [r7, #16]
 8005fe4:	1ad3      	subs	r3, r2, r3
 8005fe6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d901      	bls.n	8005ff2 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8005fee:	2303      	movs	r3, #3
 8005ff0:	e12f      	b.n	8006252 <HAL_RCC_OscConfig+0x6a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ff2:	4b0b      	ldr	r3, [pc, #44]	; (8006020 <HAL_RCC_OscConfig+0x470>)
 8005ff4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ff6:	f003 0302 	and.w	r3, r3, #2
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d0ee      	beq.n	8005fdc <HAL_RCC_OscConfig+0x42c>
 8005ffe:	e01b      	b.n	8006038 <HAL_RCC_OscConfig+0x488>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006000:	f7fd fb76 	bl	80036f0 <HAL_GetTick>
 8006004:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006006:	e011      	b.n	800602c <HAL_RCC_OscConfig+0x47c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006008:	f7fd fb72 	bl	80036f0 <HAL_GetTick>
 800600c:	4602      	mov	r2, r0
 800600e:	693b      	ldr	r3, [r7, #16]
 8006010:	1ad3      	subs	r3, r2, r3
 8006012:	f241 3288 	movw	r2, #5000	; 0x1388
 8006016:	4293      	cmp	r3, r2
 8006018:	d908      	bls.n	800602c <HAL_RCC_OscConfig+0x47c>
        {
          return HAL_TIMEOUT;
 800601a:	2303      	movs	r3, #3
 800601c:	e119      	b.n	8006252 <HAL_RCC_OscConfig+0x6a2>
 800601e:	bf00      	nop
 8006020:	40023800 	.word	0x40023800
 8006024:	08016770 	.word	0x08016770
 8006028:	40007000 	.word	0x40007000
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800602c:	4b8b      	ldr	r3, [pc, #556]	; (800625c <HAL_RCC_OscConfig+0x6ac>)
 800602e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006030:	f003 0302 	and.w	r3, r3, #2
 8006034:	2b00      	cmp	r3, #0
 8006036:	d1e7      	bne.n	8006008 <HAL_RCC_OscConfig+0x458>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006038:	7dfb      	ldrb	r3, [r7, #23]
 800603a:	2b01      	cmp	r3, #1
 800603c:	d105      	bne.n	800604a <HAL_RCC_OscConfig+0x49a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800603e:	4b87      	ldr	r3, [pc, #540]	; (800625c <HAL_RCC_OscConfig+0x6ac>)
 8006040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006042:	4a86      	ldr	r2, [pc, #536]	; (800625c <HAL_RCC_OscConfig+0x6ac>)
 8006044:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006048:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	699b      	ldr	r3, [r3, #24]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d00c      	beq.n	800606c <HAL_RCC_OscConfig+0x4bc>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	699b      	ldr	r3, [r3, #24]
 8006056:	2b01      	cmp	r3, #1
 8006058:	d008      	beq.n	800606c <HAL_RCC_OscConfig+0x4bc>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	699b      	ldr	r3, [r3, #24]
 800605e:	2b02      	cmp	r3, #2
 8006060:	d004      	beq.n	800606c <HAL_RCC_OscConfig+0x4bc>
 8006062:	f240 214a 	movw	r1, #586	; 0x24a
 8006066:	487e      	ldr	r0, [pc, #504]	; (8006260 <HAL_RCC_OscConfig+0x6b0>)
 8006068:	f7fc fd0f 	bl	8002a8a <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	699b      	ldr	r3, [r3, #24]
 8006070:	2b00      	cmp	r3, #0
 8006072:	f000 80ed 	beq.w	8006250 <HAL_RCC_OscConfig+0x6a0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006076:	4b79      	ldr	r3, [pc, #484]	; (800625c <HAL_RCC_OscConfig+0x6ac>)
 8006078:	689b      	ldr	r3, [r3, #8]
 800607a:	f003 030c 	and.w	r3, r3, #12
 800607e:	2b08      	cmp	r3, #8
 8006080:	f000 80b4 	beq.w	80061ec <HAL_RCC_OscConfig+0x63c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	699b      	ldr	r3, [r3, #24]
 8006088:	2b02      	cmp	r3, #2
 800608a:	f040 8095 	bne.w	80061b8 <HAL_RCC_OscConfig+0x608>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	69db      	ldr	r3, [r3, #28]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d009      	beq.n	80060aa <HAL_RCC_OscConfig+0x4fa>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	69db      	ldr	r3, [r3, #28]
 800609a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800609e:	d004      	beq.n	80060aa <HAL_RCC_OscConfig+0x4fa>
 80060a0:	f240 2153 	movw	r1, #595	; 0x253
 80060a4:	486e      	ldr	r0, [pc, #440]	; (8006260 <HAL_RCC_OscConfig+0x6b0>)
 80060a6:	f7fc fcf0 	bl	8002a8a <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6a1b      	ldr	r3, [r3, #32]
 80060ae:	2b01      	cmp	r3, #1
 80060b0:	d903      	bls.n	80060ba <HAL_RCC_OscConfig+0x50a>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6a1b      	ldr	r3, [r3, #32]
 80060b6:	2b3f      	cmp	r3, #63	; 0x3f
 80060b8:	d904      	bls.n	80060c4 <HAL_RCC_OscConfig+0x514>
 80060ba:	f44f 7115 	mov.w	r1, #596	; 0x254
 80060be:	4868      	ldr	r0, [pc, #416]	; (8006260 <HAL_RCC_OscConfig+0x6b0>)
 80060c0:	f7fc fce3 	bl	8002a8a <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060c8:	2b31      	cmp	r3, #49	; 0x31
 80060ca:	d904      	bls.n	80060d6 <HAL_RCC_OscConfig+0x526>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060d0:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 80060d4:	d904      	bls.n	80060e0 <HAL_RCC_OscConfig+0x530>
 80060d6:	f240 2155 	movw	r1, #597	; 0x255
 80060da:	4861      	ldr	r0, [pc, #388]	; (8006260 <HAL_RCC_OscConfig+0x6b0>)
 80060dc:	f7fc fcd5 	bl	8002a8a <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060e4:	2b02      	cmp	r3, #2
 80060e6:	d010      	beq.n	800610a <HAL_RCC_OscConfig+0x55a>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060ec:	2b04      	cmp	r3, #4
 80060ee:	d00c      	beq.n	800610a <HAL_RCC_OscConfig+0x55a>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060f4:	2b06      	cmp	r3, #6
 80060f6:	d008      	beq.n	800610a <HAL_RCC_OscConfig+0x55a>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060fc:	2b08      	cmp	r3, #8
 80060fe:	d004      	beq.n	800610a <HAL_RCC_OscConfig+0x55a>
 8006100:	f240 2156 	movw	r1, #598	; 0x256
 8006104:	4856      	ldr	r0, [pc, #344]	; (8006260 <HAL_RCC_OscConfig+0x6b0>)
 8006106:	f7fc fcc0 	bl	8002a8a <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800610e:	2b01      	cmp	r3, #1
 8006110:	d903      	bls.n	800611a <HAL_RCC_OscConfig+0x56a>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006116:	2b0f      	cmp	r3, #15
 8006118:	d904      	bls.n	8006124 <HAL_RCC_OscConfig+0x574>
 800611a:	f240 2157 	movw	r1, #599	; 0x257
 800611e:	4850      	ldr	r0, [pc, #320]	; (8006260 <HAL_RCC_OscConfig+0x6b0>)
 8006120:	f7fc fcb3 	bl	8002a8a <assert_failed>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006124:	4b4d      	ldr	r3, [pc, #308]	; (800625c <HAL_RCC_OscConfig+0x6ac>)
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	4a4c      	ldr	r2, [pc, #304]	; (800625c <HAL_RCC_OscConfig+0x6ac>)
 800612a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800612e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006130:	f7fd fade 	bl	80036f0 <HAL_GetTick>
 8006134:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006136:	e008      	b.n	800614a <HAL_RCC_OscConfig+0x59a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006138:	f7fd fada 	bl	80036f0 <HAL_GetTick>
 800613c:	4602      	mov	r2, r0
 800613e:	693b      	ldr	r3, [r7, #16]
 8006140:	1ad3      	subs	r3, r2, r3
 8006142:	2b02      	cmp	r3, #2
 8006144:	d901      	bls.n	800614a <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8006146:	2303      	movs	r3, #3
 8006148:	e083      	b.n	8006252 <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800614a:	4b44      	ldr	r3, [pc, #272]	; (800625c <HAL_RCC_OscConfig+0x6ac>)
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006152:	2b00      	cmp	r3, #0
 8006154:	d1f0      	bne.n	8006138 <HAL_RCC_OscConfig+0x588>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	69da      	ldr	r2, [r3, #28]
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6a1b      	ldr	r3, [r3, #32]
 800615e:	431a      	orrs	r2, r3
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006164:	019b      	lsls	r3, r3, #6
 8006166:	431a      	orrs	r2, r3
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800616c:	085b      	lsrs	r3, r3, #1
 800616e:	3b01      	subs	r3, #1
 8006170:	041b      	lsls	r3, r3, #16
 8006172:	431a      	orrs	r2, r3
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006178:	061b      	lsls	r3, r3, #24
 800617a:	4313      	orrs	r3, r2
 800617c:	4a37      	ldr	r2, [pc, #220]	; (800625c <HAL_RCC_OscConfig+0x6ac>)
 800617e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006182:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006184:	4b35      	ldr	r3, [pc, #212]	; (800625c <HAL_RCC_OscConfig+0x6ac>)
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	4a34      	ldr	r2, [pc, #208]	; (800625c <HAL_RCC_OscConfig+0x6ac>)
 800618a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800618e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006190:	f7fd faae 	bl	80036f0 <HAL_GetTick>
 8006194:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006196:	e008      	b.n	80061aa <HAL_RCC_OscConfig+0x5fa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006198:	f7fd faaa 	bl	80036f0 <HAL_GetTick>
 800619c:	4602      	mov	r2, r0
 800619e:	693b      	ldr	r3, [r7, #16]
 80061a0:	1ad3      	subs	r3, r2, r3
 80061a2:	2b02      	cmp	r3, #2
 80061a4:	d901      	bls.n	80061aa <HAL_RCC_OscConfig+0x5fa>
          {
            return HAL_TIMEOUT;
 80061a6:	2303      	movs	r3, #3
 80061a8:	e053      	b.n	8006252 <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80061aa:	4b2c      	ldr	r3, [pc, #176]	; (800625c <HAL_RCC_OscConfig+0x6ac>)
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d0f0      	beq.n	8006198 <HAL_RCC_OscConfig+0x5e8>
 80061b6:	e04b      	b.n	8006250 <HAL_RCC_OscConfig+0x6a0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80061b8:	4b28      	ldr	r3, [pc, #160]	; (800625c <HAL_RCC_OscConfig+0x6ac>)
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	4a27      	ldr	r2, [pc, #156]	; (800625c <HAL_RCC_OscConfig+0x6ac>)
 80061be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80061c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061c4:	f7fd fa94 	bl	80036f0 <HAL_GetTick>
 80061c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061ca:	e008      	b.n	80061de <HAL_RCC_OscConfig+0x62e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80061cc:	f7fd fa90 	bl	80036f0 <HAL_GetTick>
 80061d0:	4602      	mov	r2, r0
 80061d2:	693b      	ldr	r3, [r7, #16]
 80061d4:	1ad3      	subs	r3, r2, r3
 80061d6:	2b02      	cmp	r3, #2
 80061d8:	d901      	bls.n	80061de <HAL_RCC_OscConfig+0x62e>
          {
            return HAL_TIMEOUT;
 80061da:	2303      	movs	r3, #3
 80061dc:	e039      	b.n	8006252 <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061de:	4b1f      	ldr	r3, [pc, #124]	; (800625c <HAL_RCC_OscConfig+0x6ac>)
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d1f0      	bne.n	80061cc <HAL_RCC_OscConfig+0x61c>
 80061ea:	e031      	b.n	8006250 <HAL_RCC_OscConfig+0x6a0>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80061ec:	4b1b      	ldr	r3, [pc, #108]	; (800625c <HAL_RCC_OscConfig+0x6ac>)
 80061ee:	685b      	ldr	r3, [r3, #4]
 80061f0:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	699b      	ldr	r3, [r3, #24]
 80061f6:	2b01      	cmp	r3, #1
 80061f8:	d028      	beq.n	800624c <HAL_RCC_OscConfig+0x69c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006204:	429a      	cmp	r2, r3
 8006206:	d121      	bne.n	800624c <HAL_RCC_OscConfig+0x69c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006212:	429a      	cmp	r2, r3
 8006214:	d11a      	bne.n	800624c <HAL_RCC_OscConfig+0x69c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006216:	68fa      	ldr	r2, [r7, #12]
 8006218:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800621c:	4013      	ands	r3, r2
 800621e:	687a      	ldr	r2, [r7, #4]
 8006220:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006222:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006224:	4293      	cmp	r3, r2
 8006226:	d111      	bne.n	800624c <HAL_RCC_OscConfig+0x69c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006232:	085b      	lsrs	r3, r3, #1
 8006234:	3b01      	subs	r3, #1
 8006236:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006238:	429a      	cmp	r2, r3
 800623a:	d107      	bne.n	800624c <HAL_RCC_OscConfig+0x69c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006246:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006248:	429a      	cmp	r2, r3
 800624a:	d001      	beq.n	8006250 <HAL_RCC_OscConfig+0x6a0>
#endif
      {
        return HAL_ERROR;
 800624c:	2301      	movs	r3, #1
 800624e:	e000      	b.n	8006252 <HAL_RCC_OscConfig+0x6a2>
      }
    }
  }
  return HAL_OK;
 8006250:	2300      	movs	r3, #0
}
 8006252:	4618      	mov	r0, r3
 8006254:	3718      	adds	r7, #24
 8006256:	46bd      	mov	sp, r7
 8006258:	bd80      	pop	{r7, pc}
 800625a:	bf00      	nop
 800625c:	40023800 	.word	0x40023800
 8006260:	08016770 	.word	0x08016770

08006264 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b084      	sub	sp, #16
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
 800626c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800626e:	2300      	movs	r3, #0
 8006270:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d101      	bne.n	800627c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006278:	2301      	movs	r3, #1
 800627a:	e18c      	b.n	8006596 <HAL_RCC_ClockConfig+0x332>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d003      	beq.n	800628c <HAL_RCC_ClockConfig+0x28>
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	2b0f      	cmp	r3, #15
 800628a:	d904      	bls.n	8006296 <HAL_RCC_ClockConfig+0x32>
 800628c:	f240 21dd 	movw	r1, #733	; 0x2dd
 8006290:	4887      	ldr	r0, [pc, #540]	; (80064b0 <HAL_RCC_ClockConfig+0x24c>)
 8006292:	f7fc fbfa 	bl	8002a8a <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d031      	beq.n	8006300 <HAL_RCC_ClockConfig+0x9c>
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	2b01      	cmp	r3, #1
 80062a0:	d02e      	beq.n	8006300 <HAL_RCC_ClockConfig+0x9c>
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	2b02      	cmp	r3, #2
 80062a6:	d02b      	beq.n	8006300 <HAL_RCC_ClockConfig+0x9c>
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	2b03      	cmp	r3, #3
 80062ac:	d028      	beq.n	8006300 <HAL_RCC_ClockConfig+0x9c>
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	2b04      	cmp	r3, #4
 80062b2:	d025      	beq.n	8006300 <HAL_RCC_ClockConfig+0x9c>
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	2b05      	cmp	r3, #5
 80062b8:	d022      	beq.n	8006300 <HAL_RCC_ClockConfig+0x9c>
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	2b06      	cmp	r3, #6
 80062be:	d01f      	beq.n	8006300 <HAL_RCC_ClockConfig+0x9c>
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	2b07      	cmp	r3, #7
 80062c4:	d01c      	beq.n	8006300 <HAL_RCC_ClockConfig+0x9c>
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	2b08      	cmp	r3, #8
 80062ca:	d019      	beq.n	8006300 <HAL_RCC_ClockConfig+0x9c>
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	2b09      	cmp	r3, #9
 80062d0:	d016      	beq.n	8006300 <HAL_RCC_ClockConfig+0x9c>
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	2b0a      	cmp	r3, #10
 80062d6:	d013      	beq.n	8006300 <HAL_RCC_ClockConfig+0x9c>
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	2b0b      	cmp	r3, #11
 80062dc:	d010      	beq.n	8006300 <HAL_RCC_ClockConfig+0x9c>
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	2b0c      	cmp	r3, #12
 80062e2:	d00d      	beq.n	8006300 <HAL_RCC_ClockConfig+0x9c>
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	2b0d      	cmp	r3, #13
 80062e8:	d00a      	beq.n	8006300 <HAL_RCC_ClockConfig+0x9c>
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	2b0e      	cmp	r3, #14
 80062ee:	d007      	beq.n	8006300 <HAL_RCC_ClockConfig+0x9c>
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	2b0f      	cmp	r3, #15
 80062f4:	d004      	beq.n	8006300 <HAL_RCC_ClockConfig+0x9c>
 80062f6:	f240 21de 	movw	r1, #734	; 0x2de
 80062fa:	486d      	ldr	r0, [pc, #436]	; (80064b0 <HAL_RCC_ClockConfig+0x24c>)
 80062fc:	f7fc fbc5 	bl	8002a8a <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006300:	4b6c      	ldr	r3, [pc, #432]	; (80064b4 <HAL_RCC_ClockConfig+0x250>)
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f003 030f 	and.w	r3, r3, #15
 8006308:	683a      	ldr	r2, [r7, #0]
 800630a:	429a      	cmp	r2, r3
 800630c:	d910      	bls.n	8006330 <HAL_RCC_ClockConfig+0xcc>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800630e:	4b69      	ldr	r3, [pc, #420]	; (80064b4 <HAL_RCC_ClockConfig+0x250>)
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f023 020f 	bic.w	r2, r3, #15
 8006316:	4967      	ldr	r1, [pc, #412]	; (80064b4 <HAL_RCC_ClockConfig+0x250>)
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	4313      	orrs	r3, r2
 800631c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800631e:	4b65      	ldr	r3, [pc, #404]	; (80064b4 <HAL_RCC_ClockConfig+0x250>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f003 030f 	and.w	r3, r3, #15
 8006326:	683a      	ldr	r2, [r7, #0]
 8006328:	429a      	cmp	r2, r3
 800632a:	d001      	beq.n	8006330 <HAL_RCC_ClockConfig+0xcc>
    {
      return HAL_ERROR;
 800632c:	2301      	movs	r3, #1
 800632e:	e132      	b.n	8006596 <HAL_RCC_ClockConfig+0x332>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f003 0302 	and.w	r3, r3, #2
 8006338:	2b00      	cmp	r3, #0
 800633a:	d049      	beq.n	80063d0 <HAL_RCC_ClockConfig+0x16c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f003 0304 	and.w	r3, r3, #4
 8006344:	2b00      	cmp	r3, #0
 8006346:	d005      	beq.n	8006354 <HAL_RCC_ClockConfig+0xf0>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006348:	4b5b      	ldr	r3, [pc, #364]	; (80064b8 <HAL_RCC_ClockConfig+0x254>)
 800634a:	689b      	ldr	r3, [r3, #8]
 800634c:	4a5a      	ldr	r2, [pc, #360]	; (80064b8 <HAL_RCC_ClockConfig+0x254>)
 800634e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006352:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f003 0308 	and.w	r3, r3, #8
 800635c:	2b00      	cmp	r3, #0
 800635e:	d005      	beq.n	800636c <HAL_RCC_ClockConfig+0x108>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006360:	4b55      	ldr	r3, [pc, #340]	; (80064b8 <HAL_RCC_ClockConfig+0x254>)
 8006362:	689b      	ldr	r3, [r3, #8]
 8006364:	4a54      	ldr	r2, [pc, #336]	; (80064b8 <HAL_RCC_ClockConfig+0x254>)
 8006366:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800636a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	689b      	ldr	r3, [r3, #8]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d024      	beq.n	80063be <HAL_RCC_ClockConfig+0x15a>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	689b      	ldr	r3, [r3, #8]
 8006378:	2b80      	cmp	r3, #128	; 0x80
 800637a:	d020      	beq.n	80063be <HAL_RCC_ClockConfig+0x15a>
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	689b      	ldr	r3, [r3, #8]
 8006380:	2b90      	cmp	r3, #144	; 0x90
 8006382:	d01c      	beq.n	80063be <HAL_RCC_ClockConfig+0x15a>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	689b      	ldr	r3, [r3, #8]
 8006388:	2ba0      	cmp	r3, #160	; 0xa0
 800638a:	d018      	beq.n	80063be <HAL_RCC_ClockConfig+0x15a>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	689b      	ldr	r3, [r3, #8]
 8006390:	2bb0      	cmp	r3, #176	; 0xb0
 8006392:	d014      	beq.n	80063be <HAL_RCC_ClockConfig+0x15a>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	689b      	ldr	r3, [r3, #8]
 8006398:	2bc0      	cmp	r3, #192	; 0xc0
 800639a:	d010      	beq.n	80063be <HAL_RCC_ClockConfig+0x15a>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	689b      	ldr	r3, [r3, #8]
 80063a0:	2bd0      	cmp	r3, #208	; 0xd0
 80063a2:	d00c      	beq.n	80063be <HAL_RCC_ClockConfig+0x15a>
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	689b      	ldr	r3, [r3, #8]
 80063a8:	2be0      	cmp	r3, #224	; 0xe0
 80063aa:	d008      	beq.n	80063be <HAL_RCC_ClockConfig+0x15a>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	689b      	ldr	r3, [r3, #8]
 80063b0:	2bf0      	cmp	r3, #240	; 0xf0
 80063b2:	d004      	beq.n	80063be <HAL_RCC_ClockConfig+0x15a>
 80063b4:	f240 3102 	movw	r1, #770	; 0x302
 80063b8:	483d      	ldr	r0, [pc, #244]	; (80064b0 <HAL_RCC_ClockConfig+0x24c>)
 80063ba:	f7fc fb66 	bl	8002a8a <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80063be:	4b3e      	ldr	r3, [pc, #248]	; (80064b8 <HAL_RCC_ClockConfig+0x254>)
 80063c0:	689b      	ldr	r3, [r3, #8]
 80063c2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	689b      	ldr	r3, [r3, #8]
 80063ca:	493b      	ldr	r1, [pc, #236]	; (80064b8 <HAL_RCC_ClockConfig+0x254>)
 80063cc:	4313      	orrs	r3, r2
 80063ce:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f003 0301 	and.w	r3, r3, #1
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d051      	beq.n	8006480 <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	685b      	ldr	r3, [r3, #4]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d00c      	beq.n	80063fe <HAL_RCC_ClockConfig+0x19a>
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	685b      	ldr	r3, [r3, #4]
 80063e8:	2b01      	cmp	r3, #1
 80063ea:	d008      	beq.n	80063fe <HAL_RCC_ClockConfig+0x19a>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	685b      	ldr	r3, [r3, #4]
 80063f0:	2b02      	cmp	r3, #2
 80063f2:	d004      	beq.n	80063fe <HAL_RCC_ClockConfig+0x19a>
 80063f4:	f240 3109 	movw	r1, #777	; 0x309
 80063f8:	482d      	ldr	r0, [pc, #180]	; (80064b0 <HAL_RCC_ClockConfig+0x24c>)
 80063fa:	f7fc fb46 	bl	8002a8a <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	685b      	ldr	r3, [r3, #4]
 8006402:	2b01      	cmp	r3, #1
 8006404:	d107      	bne.n	8006416 <HAL_RCC_ClockConfig+0x1b2>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006406:	4b2c      	ldr	r3, [pc, #176]	; (80064b8 <HAL_RCC_ClockConfig+0x254>)
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800640e:	2b00      	cmp	r3, #0
 8006410:	d115      	bne.n	800643e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006412:	2301      	movs	r3, #1
 8006414:	e0bf      	b.n	8006596 <HAL_RCC_ClockConfig+0x332>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	685b      	ldr	r3, [r3, #4]
 800641a:	2b02      	cmp	r3, #2
 800641c:	d107      	bne.n	800642e <HAL_RCC_ClockConfig+0x1ca>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800641e:	4b26      	ldr	r3, [pc, #152]	; (80064b8 <HAL_RCC_ClockConfig+0x254>)
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006426:	2b00      	cmp	r3, #0
 8006428:	d109      	bne.n	800643e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800642a:	2301      	movs	r3, #1
 800642c:	e0b3      	b.n	8006596 <HAL_RCC_ClockConfig+0x332>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800642e:	4b22      	ldr	r3, [pc, #136]	; (80064b8 <HAL_RCC_ClockConfig+0x254>)
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f003 0302 	and.w	r3, r3, #2
 8006436:	2b00      	cmp	r3, #0
 8006438:	d101      	bne.n	800643e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800643a:	2301      	movs	r3, #1
 800643c:	e0ab      	b.n	8006596 <HAL_RCC_ClockConfig+0x332>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800643e:	4b1e      	ldr	r3, [pc, #120]	; (80064b8 <HAL_RCC_ClockConfig+0x254>)
 8006440:	689b      	ldr	r3, [r3, #8]
 8006442:	f023 0203 	bic.w	r2, r3, #3
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	685b      	ldr	r3, [r3, #4]
 800644a:	491b      	ldr	r1, [pc, #108]	; (80064b8 <HAL_RCC_ClockConfig+0x254>)
 800644c:	4313      	orrs	r3, r2
 800644e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006450:	f7fd f94e 	bl	80036f0 <HAL_GetTick>
 8006454:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006456:	e00a      	b.n	800646e <HAL_RCC_ClockConfig+0x20a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006458:	f7fd f94a 	bl	80036f0 <HAL_GetTick>
 800645c:	4602      	mov	r2, r0
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	1ad3      	subs	r3, r2, r3
 8006462:	f241 3288 	movw	r2, #5000	; 0x1388
 8006466:	4293      	cmp	r3, r2
 8006468:	d901      	bls.n	800646e <HAL_RCC_ClockConfig+0x20a>
      {
        return HAL_TIMEOUT;
 800646a:	2303      	movs	r3, #3
 800646c:	e093      	b.n	8006596 <HAL_RCC_ClockConfig+0x332>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800646e:	4b12      	ldr	r3, [pc, #72]	; (80064b8 <HAL_RCC_ClockConfig+0x254>)
 8006470:	689b      	ldr	r3, [r3, #8]
 8006472:	f003 020c 	and.w	r2, r3, #12
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	685b      	ldr	r3, [r3, #4]
 800647a:	009b      	lsls	r3, r3, #2
 800647c:	429a      	cmp	r2, r3
 800647e:	d1eb      	bne.n	8006458 <HAL_RCC_ClockConfig+0x1f4>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006480:	4b0c      	ldr	r3, [pc, #48]	; (80064b4 <HAL_RCC_ClockConfig+0x250>)
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f003 030f 	and.w	r3, r3, #15
 8006488:	683a      	ldr	r2, [r7, #0]
 800648a:	429a      	cmp	r2, r3
 800648c:	d216      	bcs.n	80064bc <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800648e:	4b09      	ldr	r3, [pc, #36]	; (80064b4 <HAL_RCC_ClockConfig+0x250>)
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f023 020f 	bic.w	r2, r3, #15
 8006496:	4907      	ldr	r1, [pc, #28]	; (80064b4 <HAL_RCC_ClockConfig+0x250>)
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	4313      	orrs	r3, r2
 800649c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800649e:	4b05      	ldr	r3, [pc, #20]	; (80064b4 <HAL_RCC_ClockConfig+0x250>)
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f003 030f 	and.w	r3, r3, #15
 80064a6:	683a      	ldr	r2, [r7, #0]
 80064a8:	429a      	cmp	r2, r3
 80064aa:	d007      	beq.n	80064bc <HAL_RCC_ClockConfig+0x258>
    {
      return HAL_ERROR;
 80064ac:	2301      	movs	r3, #1
 80064ae:	e072      	b.n	8006596 <HAL_RCC_ClockConfig+0x332>
 80064b0:	08016770 	.word	0x08016770
 80064b4:	40023c00 	.word	0x40023c00
 80064b8:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f003 0304 	and.w	r3, r3, #4
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d025      	beq.n	8006514 <HAL_RCC_ClockConfig+0x2b0>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	68db      	ldr	r3, [r3, #12]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d018      	beq.n	8006502 <HAL_RCC_ClockConfig+0x29e>
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	68db      	ldr	r3, [r3, #12]
 80064d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064d8:	d013      	beq.n	8006502 <HAL_RCC_ClockConfig+0x29e>
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	68db      	ldr	r3, [r3, #12]
 80064de:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80064e2:	d00e      	beq.n	8006502 <HAL_RCC_ClockConfig+0x29e>
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	68db      	ldr	r3, [r3, #12]
 80064e8:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80064ec:	d009      	beq.n	8006502 <HAL_RCC_ClockConfig+0x29e>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	68db      	ldr	r3, [r3, #12]
 80064f2:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 80064f6:	d004      	beq.n	8006502 <HAL_RCC_ClockConfig+0x29e>
 80064f8:	f240 3146 	movw	r1, #838	; 0x346
 80064fc:	4828      	ldr	r0, [pc, #160]	; (80065a0 <HAL_RCC_ClockConfig+0x33c>)
 80064fe:	f7fc fac4 	bl	8002a8a <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006502:	4b28      	ldr	r3, [pc, #160]	; (80065a4 <HAL_RCC_ClockConfig+0x340>)
 8006504:	689b      	ldr	r3, [r3, #8]
 8006506:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	68db      	ldr	r3, [r3, #12]
 800650e:	4925      	ldr	r1, [pc, #148]	; (80065a4 <HAL_RCC_ClockConfig+0x340>)
 8006510:	4313      	orrs	r3, r2
 8006512:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f003 0308 	and.w	r3, r3, #8
 800651c:	2b00      	cmp	r3, #0
 800651e:	d026      	beq.n	800656e <HAL_RCC_ClockConfig+0x30a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	691b      	ldr	r3, [r3, #16]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d018      	beq.n	800655a <HAL_RCC_ClockConfig+0x2f6>
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	691b      	ldr	r3, [r3, #16]
 800652c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006530:	d013      	beq.n	800655a <HAL_RCC_ClockConfig+0x2f6>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	691b      	ldr	r3, [r3, #16]
 8006536:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800653a:	d00e      	beq.n	800655a <HAL_RCC_ClockConfig+0x2f6>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	691b      	ldr	r3, [r3, #16]
 8006540:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8006544:	d009      	beq.n	800655a <HAL_RCC_ClockConfig+0x2f6>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	691b      	ldr	r3, [r3, #16]
 800654a:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 800654e:	d004      	beq.n	800655a <HAL_RCC_ClockConfig+0x2f6>
 8006550:	f240 314d 	movw	r1, #845	; 0x34d
 8006554:	4812      	ldr	r0, [pc, #72]	; (80065a0 <HAL_RCC_ClockConfig+0x33c>)
 8006556:	f7fc fa98 	bl	8002a8a <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800655a:	4b12      	ldr	r3, [pc, #72]	; (80065a4 <HAL_RCC_ClockConfig+0x340>)
 800655c:	689b      	ldr	r3, [r3, #8]
 800655e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	691b      	ldr	r3, [r3, #16]
 8006566:	00db      	lsls	r3, r3, #3
 8006568:	490e      	ldr	r1, [pc, #56]	; (80065a4 <HAL_RCC_ClockConfig+0x340>)
 800656a:	4313      	orrs	r3, r2
 800656c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800656e:	f000 f821 	bl	80065b4 <HAL_RCC_GetSysClockFreq>
 8006572:	4602      	mov	r2, r0
 8006574:	4b0b      	ldr	r3, [pc, #44]	; (80065a4 <HAL_RCC_ClockConfig+0x340>)
 8006576:	689b      	ldr	r3, [r3, #8]
 8006578:	091b      	lsrs	r3, r3, #4
 800657a:	f003 030f 	and.w	r3, r3, #15
 800657e:	490a      	ldr	r1, [pc, #40]	; (80065a8 <HAL_RCC_ClockConfig+0x344>)
 8006580:	5ccb      	ldrb	r3, [r1, r3]
 8006582:	fa22 f303 	lsr.w	r3, r2, r3
 8006586:	4a09      	ldr	r2, [pc, #36]	; (80065ac <HAL_RCC_ClockConfig+0x348>)
 8006588:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800658a:	4b09      	ldr	r3, [pc, #36]	; (80065b0 <HAL_RCC_ClockConfig+0x34c>)
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4618      	mov	r0, r3
 8006590:	f7fd f86a 	bl	8003668 <HAL_InitTick>

  return HAL_OK;
 8006594:	2300      	movs	r3, #0
}
 8006596:	4618      	mov	r0, r3
 8006598:	3710      	adds	r7, #16
 800659a:	46bd      	mov	sp, r7
 800659c:	bd80      	pop	{r7, pc}
 800659e:	bf00      	nop
 80065a0:	08016770 	.word	0x08016770
 80065a4:	40023800 	.word	0x40023800
 80065a8:	080168a0 	.word	0x080168a0
 80065ac:	2000000c 	.word	0x2000000c
 80065b0:	200000c8 	.word	0x200000c8

080065b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80065b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80065b8:	b090      	sub	sp, #64	; 0x40
 80065ba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80065bc:	2300      	movs	r3, #0
 80065be:	637b      	str	r3, [r7, #52]	; 0x34
 80065c0:	2300      	movs	r3, #0
 80065c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80065c4:	2300      	movs	r3, #0
 80065c6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 80065c8:	2300      	movs	r3, #0
 80065ca:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80065cc:	4b59      	ldr	r3, [pc, #356]	; (8006734 <HAL_RCC_GetSysClockFreq+0x180>)
 80065ce:	689b      	ldr	r3, [r3, #8]
 80065d0:	f003 030c 	and.w	r3, r3, #12
 80065d4:	2b08      	cmp	r3, #8
 80065d6:	d00d      	beq.n	80065f4 <HAL_RCC_GetSysClockFreq+0x40>
 80065d8:	2b08      	cmp	r3, #8
 80065da:	f200 80a1 	bhi.w	8006720 <HAL_RCC_GetSysClockFreq+0x16c>
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d002      	beq.n	80065e8 <HAL_RCC_GetSysClockFreq+0x34>
 80065e2:	2b04      	cmp	r3, #4
 80065e4:	d003      	beq.n	80065ee <HAL_RCC_GetSysClockFreq+0x3a>
 80065e6:	e09b      	b.n	8006720 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80065e8:	4b53      	ldr	r3, [pc, #332]	; (8006738 <HAL_RCC_GetSysClockFreq+0x184>)
 80065ea:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80065ec:	e09b      	b.n	8006726 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80065ee:	4b53      	ldr	r3, [pc, #332]	; (800673c <HAL_RCC_GetSysClockFreq+0x188>)
 80065f0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80065f2:	e098      	b.n	8006726 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80065f4:	4b4f      	ldr	r3, [pc, #316]	; (8006734 <HAL_RCC_GetSysClockFreq+0x180>)
 80065f6:	685b      	ldr	r3, [r3, #4]
 80065f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80065fc:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80065fe:	4b4d      	ldr	r3, [pc, #308]	; (8006734 <HAL_RCC_GetSysClockFreq+0x180>)
 8006600:	685b      	ldr	r3, [r3, #4]
 8006602:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006606:	2b00      	cmp	r3, #0
 8006608:	d028      	beq.n	800665c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800660a:	4b4a      	ldr	r3, [pc, #296]	; (8006734 <HAL_RCC_GetSysClockFreq+0x180>)
 800660c:	685b      	ldr	r3, [r3, #4]
 800660e:	099b      	lsrs	r3, r3, #6
 8006610:	2200      	movs	r2, #0
 8006612:	623b      	str	r3, [r7, #32]
 8006614:	627a      	str	r2, [r7, #36]	; 0x24
 8006616:	6a3b      	ldr	r3, [r7, #32]
 8006618:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800661c:	2100      	movs	r1, #0
 800661e:	4b47      	ldr	r3, [pc, #284]	; (800673c <HAL_RCC_GetSysClockFreq+0x188>)
 8006620:	fb03 f201 	mul.w	r2, r3, r1
 8006624:	2300      	movs	r3, #0
 8006626:	fb00 f303 	mul.w	r3, r0, r3
 800662a:	4413      	add	r3, r2
 800662c:	4a43      	ldr	r2, [pc, #268]	; (800673c <HAL_RCC_GetSysClockFreq+0x188>)
 800662e:	fba0 1202 	umull	r1, r2, r0, r2
 8006632:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006634:	460a      	mov	r2, r1
 8006636:	62ba      	str	r2, [r7, #40]	; 0x28
 8006638:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800663a:	4413      	add	r3, r2
 800663c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800663e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006640:	2200      	movs	r2, #0
 8006642:	61bb      	str	r3, [r7, #24]
 8006644:	61fa      	str	r2, [r7, #28]
 8006646:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800664a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800664e:	f7fa fb4b 	bl	8000ce8 <__aeabi_uldivmod>
 8006652:	4602      	mov	r2, r0
 8006654:	460b      	mov	r3, r1
 8006656:	4613      	mov	r3, r2
 8006658:	63fb      	str	r3, [r7, #60]	; 0x3c
 800665a:	e053      	b.n	8006704 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800665c:	4b35      	ldr	r3, [pc, #212]	; (8006734 <HAL_RCC_GetSysClockFreq+0x180>)
 800665e:	685b      	ldr	r3, [r3, #4]
 8006660:	099b      	lsrs	r3, r3, #6
 8006662:	2200      	movs	r2, #0
 8006664:	613b      	str	r3, [r7, #16]
 8006666:	617a      	str	r2, [r7, #20]
 8006668:	693b      	ldr	r3, [r7, #16]
 800666a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800666e:	f04f 0b00 	mov.w	fp, #0
 8006672:	4652      	mov	r2, sl
 8006674:	465b      	mov	r3, fp
 8006676:	f04f 0000 	mov.w	r0, #0
 800667a:	f04f 0100 	mov.w	r1, #0
 800667e:	0159      	lsls	r1, r3, #5
 8006680:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006684:	0150      	lsls	r0, r2, #5
 8006686:	4602      	mov	r2, r0
 8006688:	460b      	mov	r3, r1
 800668a:	ebb2 080a 	subs.w	r8, r2, sl
 800668e:	eb63 090b 	sbc.w	r9, r3, fp
 8006692:	f04f 0200 	mov.w	r2, #0
 8006696:	f04f 0300 	mov.w	r3, #0
 800669a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800669e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80066a2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80066a6:	ebb2 0408 	subs.w	r4, r2, r8
 80066aa:	eb63 0509 	sbc.w	r5, r3, r9
 80066ae:	f04f 0200 	mov.w	r2, #0
 80066b2:	f04f 0300 	mov.w	r3, #0
 80066b6:	00eb      	lsls	r3, r5, #3
 80066b8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80066bc:	00e2      	lsls	r2, r4, #3
 80066be:	4614      	mov	r4, r2
 80066c0:	461d      	mov	r5, r3
 80066c2:	eb14 030a 	adds.w	r3, r4, sl
 80066c6:	603b      	str	r3, [r7, #0]
 80066c8:	eb45 030b 	adc.w	r3, r5, fp
 80066cc:	607b      	str	r3, [r7, #4]
 80066ce:	f04f 0200 	mov.w	r2, #0
 80066d2:	f04f 0300 	mov.w	r3, #0
 80066d6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80066da:	4629      	mov	r1, r5
 80066dc:	028b      	lsls	r3, r1, #10
 80066de:	4621      	mov	r1, r4
 80066e0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80066e4:	4621      	mov	r1, r4
 80066e6:	028a      	lsls	r2, r1, #10
 80066e8:	4610      	mov	r0, r2
 80066ea:	4619      	mov	r1, r3
 80066ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066ee:	2200      	movs	r2, #0
 80066f0:	60bb      	str	r3, [r7, #8]
 80066f2:	60fa      	str	r2, [r7, #12]
 80066f4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80066f8:	f7fa faf6 	bl	8000ce8 <__aeabi_uldivmod>
 80066fc:	4602      	mov	r2, r0
 80066fe:	460b      	mov	r3, r1
 8006700:	4613      	mov	r3, r2
 8006702:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8006704:	4b0b      	ldr	r3, [pc, #44]	; (8006734 <HAL_RCC_GetSysClockFreq+0x180>)
 8006706:	685b      	ldr	r3, [r3, #4]
 8006708:	0c1b      	lsrs	r3, r3, #16
 800670a:	f003 0303 	and.w	r3, r3, #3
 800670e:	3301      	adds	r3, #1
 8006710:	005b      	lsls	r3, r3, #1
 8006712:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8006714:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006718:	fbb2 f3f3 	udiv	r3, r2, r3
 800671c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800671e:	e002      	b.n	8006726 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006720:	4b05      	ldr	r3, [pc, #20]	; (8006738 <HAL_RCC_GetSysClockFreq+0x184>)
 8006722:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006724:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8006728:	4618      	mov	r0, r3
 800672a:	3740      	adds	r7, #64	; 0x40
 800672c:	46bd      	mov	sp, r7
 800672e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006732:	bf00      	nop
 8006734:	40023800 	.word	0x40023800
 8006738:	00f42400 	.word	0x00f42400
 800673c:	017d7840 	.word	0x017d7840

08006740 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006740:	b480      	push	{r7}
 8006742:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006744:	4b03      	ldr	r3, [pc, #12]	; (8006754 <HAL_RCC_GetHCLKFreq+0x14>)
 8006746:	681b      	ldr	r3, [r3, #0]
}
 8006748:	4618      	mov	r0, r3
 800674a:	46bd      	mov	sp, r7
 800674c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006750:	4770      	bx	lr
 8006752:	bf00      	nop
 8006754:	2000000c 	.word	0x2000000c

08006758 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800675c:	f7ff fff0 	bl	8006740 <HAL_RCC_GetHCLKFreq>
 8006760:	4602      	mov	r2, r0
 8006762:	4b05      	ldr	r3, [pc, #20]	; (8006778 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006764:	689b      	ldr	r3, [r3, #8]
 8006766:	0a9b      	lsrs	r3, r3, #10
 8006768:	f003 0307 	and.w	r3, r3, #7
 800676c:	4903      	ldr	r1, [pc, #12]	; (800677c <HAL_RCC_GetPCLK1Freq+0x24>)
 800676e:	5ccb      	ldrb	r3, [r1, r3]
 8006770:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006774:	4618      	mov	r0, r3
 8006776:	bd80      	pop	{r7, pc}
 8006778:	40023800 	.word	0x40023800
 800677c:	080168b0 	.word	0x080168b0

08006780 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006780:	b580      	push	{r7, lr}
 8006782:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006784:	f7ff ffdc 	bl	8006740 <HAL_RCC_GetHCLKFreq>
 8006788:	4602      	mov	r2, r0
 800678a:	4b05      	ldr	r3, [pc, #20]	; (80067a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800678c:	689b      	ldr	r3, [r3, #8]
 800678e:	0b5b      	lsrs	r3, r3, #13
 8006790:	f003 0307 	and.w	r3, r3, #7
 8006794:	4903      	ldr	r1, [pc, #12]	; (80067a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006796:	5ccb      	ldrb	r3, [r1, r3]
 8006798:	fa22 f303 	lsr.w	r3, r2, r3
}
 800679c:	4618      	mov	r0, r3
 800679e:	bd80      	pop	{r7, pc}
 80067a0:	40023800 	.word	0x40023800
 80067a4:	080168b0 	.word	0x080168b0

080067a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b088      	sub	sp, #32
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80067b0:	2300      	movs	r3, #0
 80067b2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80067b4:	2300      	movs	r3, #0
 80067b6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80067b8:	2300      	movs	r3, #0
 80067ba:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80067bc:	2300      	movs	r3, #0
 80067be:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80067c0:	2300      	movs	r3, #0
 80067c2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f003 0301 	and.w	r3, r3, #1
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	f040 8089 	bne.w	80068e4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f003 0308 	and.w	r3, r3, #8
 80067da:	2b00      	cmp	r3, #0
 80067dc:	f040 8082 	bne.w	80068e4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f003 0310 	and.w	r3, r3, #16
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d17b      	bne.n	80068e4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d175      	bne.n	80068e4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006800:	2b00      	cmp	r3, #0
 8006802:	d16f      	bne.n	80068e4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800680c:	2b00      	cmp	r3, #0
 800680e:	d169      	bne.n	80068e4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006818:	2b00      	cmp	r3, #0
 800681a:	d163      	bne.n	80068e4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006824:	2b00      	cmp	r3, #0
 8006826:	d15d      	bne.n	80068e4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006830:	2b00      	cmp	r3, #0
 8006832:	d157      	bne.n	80068e4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800683c:	2b00      	cmp	r3, #0
 800683e:	d151      	bne.n	80068e4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006848:	2b00      	cmp	r3, #0
 800684a:	d14b      	bne.n	80068e4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006854:	2b00      	cmp	r3, #0
 8006856:	d145      	bne.n	80068e4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006860:	2b00      	cmp	r3, #0
 8006862:	d13f      	bne.n	80068e4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800686c:	2b00      	cmp	r3, #0
 800686e:	d139      	bne.n	80068e4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006878:	2b00      	cmp	r3, #0
 800687a:	d133      	bne.n	80068e4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006884:	2b00      	cmp	r3, #0
 8006886:	d12d      	bne.n	80068e4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006890:	2b00      	cmp	r3, #0
 8006892:	d127      	bne.n	80068e4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800689c:	2b00      	cmp	r3, #0
 800689e:	d121      	bne.n	80068e4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d11b      	bne.n	80068e4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d115      	bne.n	80068e4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d10f      	bne.n	80068e4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d109      	bne.n	80068e4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f003 0320 	and.w	r3, r3, #32
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d103      	bne.n	80068e4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80068dc:	2172      	movs	r1, #114	; 0x72
 80068de:	4895      	ldr	r0, [pc, #596]	; (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 80068e0:	f7fc f8d3 	bl	8002a8a <assert_failed>

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f003 0301 	and.w	r3, r3, #1
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d01f      	beq.n	8006930 <HAL_RCCEx_PeriphCLKConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d008      	beq.n	800690a <HAL_RCCEx_PeriphCLKConfig+0x162>
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068fc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006900:	d003      	beq.n	800690a <HAL_RCCEx_PeriphCLKConfig+0x162>
 8006902:	2178      	movs	r1, #120	; 0x78
 8006904:	488b      	ldr	r0, [pc, #556]	; (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8006906:	f7fc f8c0 	bl	8002a8a <assert_failed>

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800690a:	4b8b      	ldr	r3, [pc, #556]	; (8006b38 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 800690c:	689b      	ldr	r3, [r3, #8]
 800690e:	4a8a      	ldr	r2, [pc, #552]	; (8006b38 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8006910:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006914:	6093      	str	r3, [r2, #8]
 8006916:	4b88      	ldr	r3, [pc, #544]	; (8006b38 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8006918:	689a      	ldr	r2, [r3, #8]
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800691e:	4986      	ldr	r1, [pc, #536]	; (8006b38 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8006920:	4313      	orrs	r3, r2
 8006922:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006928:	2b00      	cmp	r3, #0
 800692a:	d101      	bne.n	8006930 <HAL_RCCEx_PeriphCLKConfig+0x188>
    {
      plli2sused = 1;
 800692c:	2301      	movs	r3, #1
 800692e:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006938:	2b00      	cmp	r3, #0
 800693a:	d029      	beq.n	8006990 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006940:	2b00      	cmp	r3, #0
 8006942:	d00d      	beq.n	8006960 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006948:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800694c:	d008      	beq.n	8006960 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006952:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006956:	d003      	beq.n	8006960 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8006958:	2188      	movs	r1, #136	; 0x88
 800695a:	4876      	ldr	r0, [pc, #472]	; (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 800695c:	f7fc f895 	bl	8002a8a <assert_failed>

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006960:	4b75      	ldr	r3, [pc, #468]	; (8006b38 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8006962:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006966:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800696e:	4972      	ldr	r1, [pc, #456]	; (8006b38 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8006970:	4313      	orrs	r3, r2
 8006972:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800697a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800697e:	d101      	bne.n	8006984 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      plli2sused = 1;
 8006980:	2301      	movs	r3, #1
 8006982:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006988:	2b00      	cmp	r3, #0
 800698a:	d101      	bne.n	8006990 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
    {
      pllsaiused = 1;
 800698c:	2301      	movs	r3, #1
 800698e:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006998:	2b00      	cmp	r3, #0
 800699a:	d029      	beq.n	80069f0 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d00d      	beq.n	80069c0 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80069ac:	d008      	beq.n	80069c0 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069b2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80069b6:	d003      	beq.n	80069c0 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80069b8:	219c      	movs	r1, #156	; 0x9c
 80069ba:	485e      	ldr	r0, [pc, #376]	; (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 80069bc:	f7fc f865 	bl	8002a8a <assert_failed>

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80069c0:	4b5d      	ldr	r3, [pc, #372]	; (8006b38 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80069c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80069c6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069ce:	495a      	ldr	r1, [pc, #360]	; (8006b38 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80069d0:	4313      	orrs	r3, r2
 80069d2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80069de:	d101      	bne.n	80069e4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      plli2sused = 1;
 80069e0:	2301      	movs	r3, #1
 80069e2:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d101      	bne.n	80069f0 <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      pllsaiused = 1;
 80069ec:	2301      	movs	r3, #1
 80069ee:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d001      	beq.n	8006a00 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
      plli2sused = 1;
 80069fc:	2301      	movs	r3, #1
 80069fe:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f003 0320 	and.w	r3, r3, #32
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	f000 8186 	beq.w	8006d1a <HAL_RCCEx_PeriphCLKConfig+0x572>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a16:	f000 80e4 	beq.w	8006be2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a22:	f000 80de 	beq.w	8006be2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a2a:	4a44      	ldr	r2, [pc, #272]	; (8006b3c <HAL_RCCEx_PeriphCLKConfig+0x394>)
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	f000 80d8 	beq.w	8006be2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a36:	4a42      	ldr	r2, [pc, #264]	; (8006b40 <HAL_RCCEx_PeriphCLKConfig+0x398>)
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	f000 80d2 	beq.w	8006be2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a42:	4a40      	ldr	r2, [pc, #256]	; (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8006a44:	4293      	cmp	r3, r2
 8006a46:	f000 80cc 	beq.w	8006be2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a4e:	4a3e      	ldr	r2, [pc, #248]	; (8006b48 <HAL_RCCEx_PeriphCLKConfig+0x3a0>)
 8006a50:	4293      	cmp	r3, r2
 8006a52:	f000 80c6 	beq.w	8006be2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a5a:	4a3c      	ldr	r2, [pc, #240]	; (8006b4c <HAL_RCCEx_PeriphCLKConfig+0x3a4>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	f000 80c0 	beq.w	8006be2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a66:	4a3a      	ldr	r2, [pc, #232]	; (8006b50 <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	f000 80ba 	beq.w	8006be2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a72:	4a38      	ldr	r2, [pc, #224]	; (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x3ac>)
 8006a74:	4293      	cmp	r3, r2
 8006a76:	f000 80b4 	beq.w	8006be2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a7e:	4a36      	ldr	r2, [pc, #216]	; (8006b58 <HAL_RCCEx_PeriphCLKConfig+0x3b0>)
 8006a80:	4293      	cmp	r3, r2
 8006a82:	f000 80ae 	beq.w	8006be2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a8a:	4a34      	ldr	r2, [pc, #208]	; (8006b5c <HAL_RCCEx_PeriphCLKConfig+0x3b4>)
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	f000 80a8 	beq.w	8006be2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a96:	4a32      	ldr	r2, [pc, #200]	; (8006b60 <HAL_RCCEx_PeriphCLKConfig+0x3b8>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	f000 80a2 	beq.w	8006be2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aa2:	4a30      	ldr	r2, [pc, #192]	; (8006b64 <HAL_RCCEx_PeriphCLKConfig+0x3bc>)
 8006aa4:	4293      	cmp	r3, r2
 8006aa6:	f000 809c 	beq.w	8006be2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aae:	4a2e      	ldr	r2, [pc, #184]	; (8006b68 <HAL_RCCEx_PeriphCLKConfig+0x3c0>)
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	f000 8096 	beq.w	8006be2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aba:	4a2c      	ldr	r2, [pc, #176]	; (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x3c4>)
 8006abc:	4293      	cmp	r3, r2
 8006abe:	f000 8090 	beq.w	8006be2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ac6:	4a2a      	ldr	r2, [pc, #168]	; (8006b70 <HAL_RCCEx_PeriphCLKConfig+0x3c8>)
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	f000 808a 	beq.w	8006be2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ad2:	4a28      	ldr	r2, [pc, #160]	; (8006b74 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	f000 8084 	beq.w	8006be2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ade:	4a26      	ldr	r2, [pc, #152]	; (8006b78 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d07e      	beq.n	8006be2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ae8:	4a24      	ldr	r2, [pc, #144]	; (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8006aea:	4293      	cmp	r3, r2
 8006aec:	d079      	beq.n	8006be2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006af2:	4a23      	ldr	r2, [pc, #140]	; (8006b80 <HAL_RCCEx_PeriphCLKConfig+0x3d8>)
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d074      	beq.n	8006be2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006afc:	4a21      	ldr	r2, [pc, #132]	; (8006b84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d06f      	beq.n	8006be2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b06:	4a20      	ldr	r2, [pc, #128]	; (8006b88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d06a      	beq.n	8006be2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b10:	4a1e      	ldr	r2, [pc, #120]	; (8006b8c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d065      	beq.n	8006be2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b1a:	4a1d      	ldr	r2, [pc, #116]	; (8006b90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d060      	beq.n	8006be2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b24:	4a1b      	ldr	r2, [pc, #108]	; (8006b94 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d05b      	beq.n	8006be2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b2e:	4a1a      	ldr	r2, [pc, #104]	; (8006b98 <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 8006b30:	4293      	cmp	r3, r2
 8006b32:	e033      	b.n	8006b9c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8006b34:	080167a8 	.word	0x080167a8
 8006b38:	40023800 	.word	0x40023800
 8006b3c:	00020300 	.word	0x00020300
 8006b40:	00030300 	.word	0x00030300
 8006b44:	00040300 	.word	0x00040300
 8006b48:	00050300 	.word	0x00050300
 8006b4c:	00060300 	.word	0x00060300
 8006b50:	00070300 	.word	0x00070300
 8006b54:	00080300 	.word	0x00080300
 8006b58:	00090300 	.word	0x00090300
 8006b5c:	000a0300 	.word	0x000a0300
 8006b60:	000b0300 	.word	0x000b0300
 8006b64:	000c0300 	.word	0x000c0300
 8006b68:	000d0300 	.word	0x000d0300
 8006b6c:	000e0300 	.word	0x000e0300
 8006b70:	000f0300 	.word	0x000f0300
 8006b74:	00100300 	.word	0x00100300
 8006b78:	00110300 	.word	0x00110300
 8006b7c:	00120300 	.word	0x00120300
 8006b80:	00130300 	.word	0x00130300
 8006b84:	00140300 	.word	0x00140300
 8006b88:	00150300 	.word	0x00150300
 8006b8c:	00160300 	.word	0x00160300
 8006b90:	00170300 	.word	0x00170300
 8006b94:	00180300 	.word	0x00180300
 8006b98:	00190300 	.word	0x00190300
 8006b9c:	d021      	beq.n	8006be2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ba2:	4a4c      	ldr	r2, [pc, #304]	; (8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x52c>)
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d01c      	beq.n	8006be2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bac:	4a4a      	ldr	r2, [pc, #296]	; (8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d017      	beq.n	8006be2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bb6:	4a49      	ldr	r2, [pc, #292]	; (8006cdc <HAL_RCCEx_PeriphCLKConfig+0x534>)
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d012      	beq.n	8006be2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bc0:	4a47      	ldr	r2, [pc, #284]	; (8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	d00d      	beq.n	8006be2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bca:	4a46      	ldr	r2, [pc, #280]	; (8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	d008      	beq.n	8006be2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bd4:	4a44      	ldr	r2, [pc, #272]	; (8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	d003      	beq.n	8006be2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006bda:	21b7      	movs	r1, #183	; 0xb7
 8006bdc:	4843      	ldr	r0, [pc, #268]	; (8006cec <HAL_RCCEx_PeriphCLKConfig+0x544>)
 8006bde:	f7fb ff54 	bl	8002a8a <assert_failed>

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006be2:	4b43      	ldr	r3, [pc, #268]	; (8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006be6:	4a42      	ldr	r2, [pc, #264]	; (8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006be8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006bec:	6413      	str	r3, [r2, #64]	; 0x40
 8006bee:	4b40      	ldr	r3, [pc, #256]	; (8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006bf6:	60bb      	str	r3, [r7, #8]
 8006bf8:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006bfa:	4b3e      	ldr	r3, [pc, #248]	; (8006cf4 <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	4a3d      	ldr	r2, [pc, #244]	; (8006cf4 <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 8006c00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c04:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006c06:	f7fc fd73 	bl	80036f0 <HAL_GetTick>
 8006c0a:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006c0c:	e009      	b.n	8006c22 <HAL_RCCEx_PeriphCLKConfig+0x47a>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c0e:	f7fc fd6f 	bl	80036f0 <HAL_GetTick>
 8006c12:	4602      	mov	r2, r0
 8006c14:	697b      	ldr	r3, [r7, #20]
 8006c16:	1ad3      	subs	r3, r2, r3
 8006c18:	2b64      	cmp	r3, #100	; 0x64
 8006c1a:	d902      	bls.n	8006c22 <HAL_RCCEx_PeriphCLKConfig+0x47a>
      {
        return HAL_TIMEOUT;
 8006c1c:	2303      	movs	r3, #3
 8006c1e:	f000 bd9f 	b.w	8007760 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006c22:	4b34      	ldr	r3, [pc, #208]	; (8006cf4 <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d0ef      	beq.n	8006c0e <HAL_RCCEx_PeriphCLKConfig+0x466>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006c2e:	4b30      	ldr	r3, [pc, #192]	; (8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006c30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c36:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006c38:	693b      	ldr	r3, [r7, #16]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d036      	beq.n	8006cac <HAL_RCCEx_PeriphCLKConfig+0x504>
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c46:	693a      	ldr	r2, [r7, #16]
 8006c48:	429a      	cmp	r2, r3
 8006c4a:	d02f      	beq.n	8006cac <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006c4c:	4b28      	ldr	r3, [pc, #160]	; (8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006c4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c54:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006c56:	4b26      	ldr	r3, [pc, #152]	; (8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006c58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c5a:	4a25      	ldr	r2, [pc, #148]	; (8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006c5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c60:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006c62:	4b23      	ldr	r3, [pc, #140]	; (8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006c64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c66:	4a22      	ldr	r2, [pc, #136]	; (8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006c68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c6c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8006c6e:	4a20      	ldr	r2, [pc, #128]	; (8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006c70:	693b      	ldr	r3, [r7, #16]
 8006c72:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006c74:	4b1e      	ldr	r3, [pc, #120]	; (8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006c76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c78:	f003 0301 	and.w	r3, r3, #1
 8006c7c:	2b01      	cmp	r3, #1
 8006c7e:	d115      	bne.n	8006cac <HAL_RCCEx_PeriphCLKConfig+0x504>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c80:	f7fc fd36 	bl	80036f0 <HAL_GetTick>
 8006c84:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c86:	e00b      	b.n	8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006c88:	f7fc fd32 	bl	80036f0 <HAL_GetTick>
 8006c8c:	4602      	mov	r2, r0
 8006c8e:	697b      	ldr	r3, [r7, #20]
 8006c90:	1ad3      	subs	r3, r2, r3
 8006c92:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c96:	4293      	cmp	r3, r2
 8006c98:	d902      	bls.n	8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8006c9a:	2303      	movs	r3, #3
 8006c9c:	f000 bd60 	b.w	8007760 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ca0:	4b13      	ldr	r3, [pc, #76]	; (8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006ca2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ca4:	f003 0302 	and.w	r3, r3, #2
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d0ed      	beq.n	8006c88 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cb0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006cb4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006cb8:	d120      	bne.n	8006cfc <HAL_RCCEx_PeriphCLKConfig+0x554>
 8006cba:	4b0d      	ldr	r3, [pc, #52]	; (8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006cbc:	689b      	ldr	r3, [r3, #8]
 8006cbe:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006cc6:	4b0c      	ldr	r3, [pc, #48]	; (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8006cc8:	400b      	ands	r3, r1
 8006cca:	4909      	ldr	r1, [pc, #36]	; (8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006ccc:	4313      	orrs	r3, r2
 8006cce:	608b      	str	r3, [r1, #8]
 8006cd0:	e01a      	b.n	8006d08 <HAL_RCCEx_PeriphCLKConfig+0x560>
 8006cd2:	bf00      	nop
 8006cd4:	001a0300 	.word	0x001a0300
 8006cd8:	001b0300 	.word	0x001b0300
 8006cdc:	001c0300 	.word	0x001c0300
 8006ce0:	001d0300 	.word	0x001d0300
 8006ce4:	001e0300 	.word	0x001e0300
 8006ce8:	001f0300 	.word	0x001f0300
 8006cec:	080167a8 	.word	0x080167a8
 8006cf0:	40023800 	.word	0x40023800
 8006cf4:	40007000 	.word	0x40007000
 8006cf8:	0ffffcff 	.word	0x0ffffcff
 8006cfc:	4b9a      	ldr	r3, [pc, #616]	; (8006f68 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8006cfe:	689b      	ldr	r3, [r3, #8]
 8006d00:	4a99      	ldr	r2, [pc, #612]	; (8006f68 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8006d02:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006d06:	6093      	str	r3, [r2, #8]
 8006d08:	4b97      	ldr	r3, [pc, #604]	; (8006f68 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8006d0a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006d14:	4994      	ldr	r1, [pc, #592]	; (8006f68 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8006d16:	4313      	orrs	r3, r2
 8006d18:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f003 0310 	and.w	r3, r3, #16
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d01d      	beq.n	8006d62 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d008      	beq.n	8006d40 <HAL_RCCEx_PeriphCLKConfig+0x598>
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d32:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006d36:	d003      	beq.n	8006d40 <HAL_RCCEx_PeriphCLKConfig+0x598>
 8006d38:	21f1      	movs	r1, #241	; 0xf1
 8006d3a:	488c      	ldr	r0, [pc, #560]	; (8006f6c <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8006d3c:	f7fb fea5 	bl	8002a8a <assert_failed>

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006d40:	4b89      	ldr	r3, [pc, #548]	; (8006f68 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8006d42:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d46:	4a88      	ldr	r2, [pc, #544]	; (8006f68 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8006d48:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006d4c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006d50:	4b85      	ldr	r3, [pc, #532]	; (8006f68 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8006d52:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d5a:	4983      	ldr	r1, [pc, #524]	; (8006f68 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8006d5c:	4313      	orrs	r3, r2
 8006d5e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d01c      	beq.n	8006da8 <HAL_RCCEx_PeriphCLKConfig+0x600>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d00d      	beq.n	8006d92 <HAL_RCCEx_PeriphCLKConfig+0x5ea>
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d7e:	d008      	beq.n	8006d92 <HAL_RCCEx_PeriphCLKConfig+0x5ea>
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d84:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d88:	d003      	beq.n	8006d92 <HAL_RCCEx_PeriphCLKConfig+0x5ea>
 8006d8a:	21fb      	movs	r1, #251	; 0xfb
 8006d8c:	4877      	ldr	r0, [pc, #476]	; (8006f6c <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8006d8e:	f7fb fe7c 	bl	8002a8a <assert_failed>

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006d92:	4b75      	ldr	r3, [pc, #468]	; (8006f68 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8006d94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d98:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006da0:	4971      	ldr	r1, [pc, #452]	; (8006f68 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8006da2:	4313      	orrs	r3, r2
 8006da4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d01d      	beq.n	8006df0 <HAL_RCCEx_PeriphCLKConfig+0x648>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d00e      	beq.n	8006dda <HAL_RCCEx_PeriphCLKConfig+0x632>
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006dc0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006dc4:	d009      	beq.n	8006dda <HAL_RCCEx_PeriphCLKConfig+0x632>
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006dca:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006dce:	d004      	beq.n	8006dda <HAL_RCCEx_PeriphCLKConfig+0x632>
 8006dd0:	f240 1105 	movw	r1, #261	; 0x105
 8006dd4:	4865      	ldr	r0, [pc, #404]	; (8006f6c <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8006dd6:	f7fb fe58 	bl	8002a8a <assert_failed>

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006dda:	4b63      	ldr	r3, [pc, #396]	; (8006f68 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8006ddc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006de0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006de8:	495f      	ldr	r1, [pc, #380]	; (8006f68 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8006dea:	4313      	orrs	r3, r2
 8006dec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d01d      	beq.n	8006e38 <HAL_RCCEx_PeriphCLKConfig+0x690>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d00e      	beq.n	8006e22 <HAL_RCCEx_PeriphCLKConfig+0x67a>
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e08:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e0c:	d009      	beq.n	8006e22 <HAL_RCCEx_PeriphCLKConfig+0x67a>
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e12:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006e16:	d004      	beq.n	8006e22 <HAL_RCCEx_PeriphCLKConfig+0x67a>
 8006e18:	f240 110f 	movw	r1, #271	; 0x10f
 8006e1c:	4853      	ldr	r0, [pc, #332]	; (8006f6c <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8006e1e:	f7fb fe34 	bl	8002a8a <assert_failed>

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006e22:	4b51      	ldr	r3, [pc, #324]	; (8006f68 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8006e24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e28:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e30:	494d      	ldr	r1, [pc, #308]	; (8006f68 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8006e32:	4313      	orrs	r3, r2
 8006e34:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d01d      	beq.n	8006e80 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d00e      	beq.n	8006e6a <HAL_RCCEx_PeriphCLKConfig+0x6c2>
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e50:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006e54:	d009      	beq.n	8006e6a <HAL_RCCEx_PeriphCLKConfig+0x6c2>
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e5a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006e5e:	d004      	beq.n	8006e6a <HAL_RCCEx_PeriphCLKConfig+0x6c2>
 8006e60:	f240 1119 	movw	r1, #281	; 0x119
 8006e64:	4841      	ldr	r0, [pc, #260]	; (8006f6c <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8006e66:	f7fb fe10 	bl	8002a8a <assert_failed>

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006e6a:	4b3f      	ldr	r3, [pc, #252]	; (8006f68 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8006e6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e70:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e78:	493b      	ldr	r1, [pc, #236]	; (8006f68 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8006e7a:	4313      	orrs	r3, r2
 8006e7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d01f      	beq.n	8006ecc <HAL_RCCEx_PeriphCLKConfig+0x724>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d010      	beq.n	8006eb6 <HAL_RCCEx_PeriphCLKConfig+0x70e>
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e98:	2b01      	cmp	r3, #1
 8006e9a:	d00c      	beq.n	8006eb6 <HAL_RCCEx_PeriphCLKConfig+0x70e>
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ea0:	2b03      	cmp	r3, #3
 8006ea2:	d008      	beq.n	8006eb6 <HAL_RCCEx_PeriphCLKConfig+0x70e>
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ea8:	2b02      	cmp	r3, #2
 8006eaa:	d004      	beq.n	8006eb6 <HAL_RCCEx_PeriphCLKConfig+0x70e>
 8006eac:	f240 1123 	movw	r1, #291	; 0x123
 8006eb0:	482e      	ldr	r0, [pc, #184]	; (8006f6c <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8006eb2:	f7fb fdea 	bl	8002a8a <assert_failed>

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006eb6:	4b2c      	ldr	r3, [pc, #176]	; (8006f68 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8006eb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ebc:	f023 0203 	bic.w	r2, r3, #3
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ec4:	4928      	ldr	r1, [pc, #160]	; (8006f68 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8006ec6:	4313      	orrs	r3, r2
 8006ec8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d01f      	beq.n	8006f18 <HAL_RCCEx_PeriphCLKConfig+0x770>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d010      	beq.n	8006f02 <HAL_RCCEx_PeriphCLKConfig+0x75a>
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ee4:	2b04      	cmp	r3, #4
 8006ee6:	d00c      	beq.n	8006f02 <HAL_RCCEx_PeriphCLKConfig+0x75a>
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006eec:	2b0c      	cmp	r3, #12
 8006eee:	d008      	beq.n	8006f02 <HAL_RCCEx_PeriphCLKConfig+0x75a>
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ef4:	2b08      	cmp	r3, #8
 8006ef6:	d004      	beq.n	8006f02 <HAL_RCCEx_PeriphCLKConfig+0x75a>
 8006ef8:	f240 112d 	movw	r1, #301	; 0x12d
 8006efc:	481b      	ldr	r0, [pc, #108]	; (8006f6c <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8006efe:	f7fb fdc4 	bl	8002a8a <assert_failed>

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006f02:	4b19      	ldr	r3, [pc, #100]	; (8006f68 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8006f04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f08:	f023 020c 	bic.w	r2, r3, #12
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f10:	4915      	ldr	r1, [pc, #84]	; (8006f68 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8006f12:	4313      	orrs	r3, r2
 8006f14:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d025      	beq.n	8006f70 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d010      	beq.n	8006f4e <HAL_RCCEx_PeriphCLKConfig+0x7a6>
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f30:	2b10      	cmp	r3, #16
 8006f32:	d00c      	beq.n	8006f4e <HAL_RCCEx_PeriphCLKConfig+0x7a6>
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f38:	2b30      	cmp	r3, #48	; 0x30
 8006f3a:	d008      	beq.n	8006f4e <HAL_RCCEx_PeriphCLKConfig+0x7a6>
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f40:	2b20      	cmp	r3, #32
 8006f42:	d004      	beq.n	8006f4e <HAL_RCCEx_PeriphCLKConfig+0x7a6>
 8006f44:	f240 1137 	movw	r1, #311	; 0x137
 8006f48:	4808      	ldr	r0, [pc, #32]	; (8006f6c <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8006f4a:	f7fb fd9e 	bl	8002a8a <assert_failed>

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006f4e:	4b06      	ldr	r3, [pc, #24]	; (8006f68 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8006f50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f54:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f5c:	4902      	ldr	r1, [pc, #8]	; (8006f68 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8006f5e:	4313      	orrs	r3, r2
 8006f60:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006f64:	e004      	b.n	8006f70 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
 8006f66:	bf00      	nop
 8006f68:	40023800 	.word	0x40023800
 8006f6c:	080167a8 	.word	0x080167a8
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d01f      	beq.n	8006fbc <HAL_RCCEx_PeriphCLKConfig+0x814>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d010      	beq.n	8006fa6 <HAL_RCCEx_PeriphCLKConfig+0x7fe>
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f88:	2b40      	cmp	r3, #64	; 0x40
 8006f8a:	d00c      	beq.n	8006fa6 <HAL_RCCEx_PeriphCLKConfig+0x7fe>
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f90:	2bc0      	cmp	r3, #192	; 0xc0
 8006f92:	d008      	beq.n	8006fa6 <HAL_RCCEx_PeriphCLKConfig+0x7fe>
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f98:	2b80      	cmp	r3, #128	; 0x80
 8006f9a:	d004      	beq.n	8006fa6 <HAL_RCCEx_PeriphCLKConfig+0x7fe>
 8006f9c:	f240 1141 	movw	r1, #321	; 0x141
 8006fa0:	48a0      	ldr	r0, [pc, #640]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8006fa2:	f7fb fd72 	bl	8002a8a <assert_failed>

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006fa6:	4ba0      	ldr	r3, [pc, #640]	; (8007228 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8006fa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fac:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fb4:	499c      	ldr	r1, [pc, #624]	; (8007228 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8006fb6:	4313      	orrs	r3, r2
 8006fb8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d022      	beq.n	800700e <HAL_RCCEx_PeriphCLKConfig+0x866>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d013      	beq.n	8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x850>
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fd4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006fd8:	d00e      	beq.n	8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x850>
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fde:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006fe2:	d009      	beq.n	8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x850>
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fe8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006fec:	d004      	beq.n	8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x850>
 8006fee:	f240 114b 	movw	r1, #331	; 0x14b
 8006ff2:	488c      	ldr	r0, [pc, #560]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8006ff4:	f7fb fd49 	bl	8002a8a <assert_failed>

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006ff8:	4b8b      	ldr	r3, [pc, #556]	; (8007228 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8006ffa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ffe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007006:	4988      	ldr	r1, [pc, #544]	; (8007228 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8007008:	4313      	orrs	r3, r2
 800700a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007016:	2b00      	cmp	r3, #0
 8007018:	d022      	beq.n	8007060 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800701e:	2b00      	cmp	r3, #0
 8007020:	d013      	beq.n	800704a <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007026:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800702a:	d00e      	beq.n	800704a <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007030:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007034:	d009      	beq.n	800704a <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800703a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800703e:	d004      	beq.n	800704a <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 8007040:	f240 1155 	movw	r1, #341	; 0x155
 8007044:	4877      	ldr	r0, [pc, #476]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8007046:	f7fb fd20 	bl	8002a8a <assert_failed>

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800704a:	4b77      	ldr	r3, [pc, #476]	; (8007228 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 800704c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007050:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007058:	4973      	ldr	r1, [pc, #460]	; (8007228 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 800705a:	4313      	orrs	r3, r2
 800705c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007068:	2b00      	cmp	r3, #0
 800706a:	d022      	beq.n	80070b2 <HAL_RCCEx_PeriphCLKConfig+0x90a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007070:	2b00      	cmp	r3, #0
 8007072:	d013      	beq.n	800709c <HAL_RCCEx_PeriphCLKConfig+0x8f4>
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007078:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800707c:	d00e      	beq.n	800709c <HAL_RCCEx_PeriphCLKConfig+0x8f4>
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007082:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007086:	d009      	beq.n	800709c <HAL_RCCEx_PeriphCLKConfig+0x8f4>
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800708c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007090:	d004      	beq.n	800709c <HAL_RCCEx_PeriphCLKConfig+0x8f4>
 8007092:	f240 115f 	movw	r1, #351	; 0x15f
 8007096:	4863      	ldr	r0, [pc, #396]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8007098:	f7fb fcf7 	bl	8002a8a <assert_failed>

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800709c:	4b62      	ldr	r3, [pc, #392]	; (8007228 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 800709e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070a2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070aa:	495f      	ldr	r1, [pc, #380]	; (8007228 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 80070ac:	4313      	orrs	r3, r2
 80070ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d022      	beq.n	8007104 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d013      	beq.n	80070ee <HAL_RCCEx_PeriphCLKConfig+0x946>
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070ca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80070ce:	d00e      	beq.n	80070ee <HAL_RCCEx_PeriphCLKConfig+0x946>
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070d4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80070d8:	d009      	beq.n	80070ee <HAL_RCCEx_PeriphCLKConfig+0x946>
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80070e2:	d004      	beq.n	80070ee <HAL_RCCEx_PeriphCLKConfig+0x946>
 80070e4:	f240 1169 	movw	r1, #361	; 0x169
 80070e8:	484e      	ldr	r0, [pc, #312]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 80070ea:	f7fb fcce 	bl	8002a8a <assert_failed>

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80070ee:	4b4e      	ldr	r3, [pc, #312]	; (8007228 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 80070f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070f4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070fc:	494a      	ldr	r1, [pc, #296]	; (8007228 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 80070fe:	4313      	orrs	r3, r2
 8007100:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800710c:	2b00      	cmp	r3, #0
 800710e:	d018      	beq.n	8007142 <HAL_RCCEx_PeriphCLKConfig+0x99a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007114:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007118:	d008      	beq.n	800712c <HAL_RCCEx_PeriphCLKConfig+0x984>
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800711e:	2b00      	cmp	r3, #0
 8007120:	d004      	beq.n	800712c <HAL_RCCEx_PeriphCLKConfig+0x984>
 8007122:	f240 1173 	movw	r1, #371	; 0x173
 8007126:	483f      	ldr	r0, [pc, #252]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8007128:	f7fb fcaf 	bl	8002a8a <assert_failed>

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800712c:	4b3e      	ldr	r3, [pc, #248]	; (8007228 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 800712e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007132:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800713a:	493b      	ldr	r1, [pc, #236]	; (8007228 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 800713c:	4313      	orrs	r3, r2
 800713e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800714a:	2b00      	cmp	r3, #0
 800714c:	d01f      	beq.n	800718e <HAL_RCCEx_PeriphCLKConfig+0x9e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007152:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007156:	d008      	beq.n	800716a <HAL_RCCEx_PeriphCLKConfig+0x9c2>
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800715c:	2b00      	cmp	r3, #0
 800715e:	d004      	beq.n	800716a <HAL_RCCEx_PeriphCLKConfig+0x9c2>
 8007160:	f240 117d 	movw	r1, #381	; 0x17d
 8007164:	482f      	ldr	r0, [pc, #188]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8007166:	f7fb fc90 	bl	8002a8a <assert_failed>

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800716a:	4b2f      	ldr	r3, [pc, #188]	; (8007228 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 800716c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007170:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007178:	492b      	ldr	r1, [pc, #172]	; (8007228 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 800717a:	4313      	orrs	r3, r2
 800717c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007184:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007188:	d101      	bne.n	800718e <HAL_RCCEx_PeriphCLKConfig+0x9e6>
    {
      pllsaiused = 1;
 800718a:	2301      	movs	r3, #1
 800718c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f003 0308 	and.w	r3, r3, #8
 8007196:	2b00      	cmp	r3, #0
 8007198:	d001      	beq.n	800719e <HAL_RCCEx_PeriphCLKConfig+0x9f6>
  {
    pllsaiused = 1;
 800719a:	2301      	movs	r3, #1
 800719c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d022      	beq.n	80071f0 <HAL_RCCEx_PeriphCLKConfig+0xa48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d013      	beq.n	80071da <HAL_RCCEx_PeriphCLKConfig+0xa32>
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80071b6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80071ba:	d00e      	beq.n	80071da <HAL_RCCEx_PeriphCLKConfig+0xa32>
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80071c0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80071c4:	d009      	beq.n	80071da <HAL_RCCEx_PeriphCLKConfig+0xa32>
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80071ca:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80071ce:	d004      	beq.n	80071da <HAL_RCCEx_PeriphCLKConfig+0xa32>
 80071d0:	f240 1195 	movw	r1, #405	; 0x195
 80071d4:	4813      	ldr	r0, [pc, #76]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 80071d6:	f7fb fc58 	bl	8002a8a <assert_failed>

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80071da:	4b13      	ldr	r3, [pc, #76]	; (8007228 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 80071dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071e0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80071e8:	490f      	ldr	r1, [pc, #60]	; (8007228 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 80071ea:	4313      	orrs	r3, r2
 80071ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d020      	beq.n	800723e <HAL_RCCEx_PeriphCLKConfig+0xa96>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007202:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007206:	d009      	beq.n	800721c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800720e:	2b00      	cmp	r3, #0
 8007210:	d004      	beq.n	800721c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8007212:	f240 119f 	movw	r1, #415	; 0x19f
 8007216:	4803      	ldr	r0, [pc, #12]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8007218:	f7fb fc37 	bl	8002a8a <assert_failed>

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800721c:	4b02      	ldr	r3, [pc, #8]	; (8007228 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 800721e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007222:	e003      	b.n	800722c <HAL_RCCEx_PeriphCLKConfig+0xa84>
 8007224:	080167a8 	.word	0x080167a8
 8007228:	40023800 	.word	0x40023800
 800722c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007236:	4910      	ldr	r1, [pc, #64]	; (8007278 <HAL_RCCEx_PeriphCLKConfig+0xad0>)
 8007238:	4313      	orrs	r3, r2
 800723a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800723e:	69fb      	ldr	r3, [r7, #28]
 8007240:	2b01      	cmp	r3, #1
 8007242:	d006      	beq.n	8007252 <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800724c:	2b00      	cmp	r3, #0
 800724e:	f000 8155 	beq.w	80074fc <HAL_RCCEx_PeriphCLKConfig+0xd54>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007252:	4b09      	ldr	r3, [pc, #36]	; (8007278 <HAL_RCCEx_PeriphCLKConfig+0xad0>)
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	4a08      	ldr	r2, [pc, #32]	; (8007278 <HAL_RCCEx_PeriphCLKConfig+0xad0>)
 8007258:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800725c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800725e:	f7fc fa47 	bl	80036f0 <HAL_GetTick>
 8007262:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007264:	e00a      	b.n	800727c <HAL_RCCEx_PeriphCLKConfig+0xad4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007266:	f7fc fa43 	bl	80036f0 <HAL_GetTick>
 800726a:	4602      	mov	r2, r0
 800726c:	697b      	ldr	r3, [r7, #20]
 800726e:	1ad3      	subs	r3, r2, r3
 8007270:	2b64      	cmp	r3, #100	; 0x64
 8007272:	d903      	bls.n	800727c <HAL_RCCEx_PeriphCLKConfig+0xad4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007274:	2303      	movs	r3, #3
 8007276:	e273      	b.n	8007760 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
 8007278:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800727c:	4b9a      	ldr	r3, [pc, #616]	; (80074e8 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007284:	2b00      	cmp	r3, #0
 8007286:	d1ee      	bne.n	8007266 <HAL_RCCEx_PeriphCLKConfig+0xabe>
      }
    }

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	685b      	ldr	r3, [r3, #4]
 800728c:	2b31      	cmp	r3, #49	; 0x31
 800728e:	d904      	bls.n	800729a <HAL_RCCEx_PeriphCLKConfig+0xaf2>
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	685b      	ldr	r3, [r3, #4]
 8007294:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8007298:	d904      	bls.n	80072a4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
 800729a:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 800729e:	4893      	ldr	r0, [pc, #588]	; (80074ec <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 80072a0:	f7fb fbf3 	bl	8002a8a <assert_failed>

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f003 0301 	and.w	r3, r3, #1
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d02e      	beq.n	800730e <HAL_RCCEx_PeriphCLKConfig+0xb66>
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d12a      	bne.n	800730e <HAL_RCCEx_PeriphCLKConfig+0xb66>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	689b      	ldr	r3, [r3, #8]
 80072bc:	2b01      	cmp	r3, #1
 80072be:	d903      	bls.n	80072c8 <HAL_RCCEx_PeriphCLKConfig+0xb20>
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	689b      	ldr	r3, [r3, #8]
 80072c4:	2b07      	cmp	r3, #7
 80072c6:	d904      	bls.n	80072d2 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 80072c8:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 80072cc:	4887      	ldr	r0, [pc, #540]	; (80074ec <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 80072ce:	f7fb fbdc 	bl	8002a8a <assert_failed>

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80072d2:	4b85      	ldr	r3, [pc, #532]	; (80074e8 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 80072d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80072d8:	0c1b      	lsrs	r3, r3, #16
 80072da:	f003 0303 	and.w	r3, r3, #3
 80072de:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80072e0:	4b81      	ldr	r3, [pc, #516]	; (80074e8 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 80072e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80072e6:	0e1b      	lsrs	r3, r3, #24
 80072e8:	f003 030f 	and.w	r3, r3, #15
 80072ec:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	685b      	ldr	r3, [r3, #4]
 80072f2:	019a      	lsls	r2, r3, #6
 80072f4:	693b      	ldr	r3, [r7, #16]
 80072f6:	041b      	lsls	r3, r3, #16
 80072f8:	431a      	orrs	r2, r3
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	061b      	lsls	r3, r3, #24
 80072fe:	431a      	orrs	r2, r3
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	689b      	ldr	r3, [r3, #8]
 8007304:	071b      	lsls	r3, r3, #28
 8007306:	4978      	ldr	r1, [pc, #480]	; (80074e8 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8007308:	4313      	orrs	r3, r2
 800730a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007316:	2b00      	cmp	r3, #0
 8007318:	d004      	beq.n	8007324 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800731e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007322:	d00a      	beq.n	800733a <HAL_RCCEx_PeriphCLKConfig+0xb92>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800732c:	2b00      	cmp	r3, #0
 800732e:	d048      	beq.n	80073c2 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007334:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007338:	d143      	bne.n	80073c2 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {
      /* Check for PLLI2S Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	68db      	ldr	r3, [r3, #12]
 800733e:	2b01      	cmp	r3, #1
 8007340:	d903      	bls.n	800734a <HAL_RCCEx_PeriphCLKConfig+0xba2>
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	68db      	ldr	r3, [r3, #12]
 8007346:	2b0f      	cmp	r3, #15
 8007348:	d904      	bls.n	8007354 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800734a:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
 800734e:	4867      	ldr	r0, [pc, #412]	; (80074ec <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 8007350:	f7fb fb9b 	bl	8002a8a <assert_failed>
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007358:	2b00      	cmp	r3, #0
 800735a:	d003      	beq.n	8007364 <HAL_RCCEx_PeriphCLKConfig+0xbbc>
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007360:	2b20      	cmp	r3, #32
 8007362:	d904      	bls.n	800736e <HAL_RCCEx_PeriphCLKConfig+0xbc6>
 8007364:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
 8007368:	4860      	ldr	r0, [pc, #384]	; (80074ec <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 800736a:	f7fb fb8e 	bl	8002a8a <assert_failed>

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800736e:	4b5e      	ldr	r3, [pc, #376]	; (80074e8 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8007370:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007374:	0c1b      	lsrs	r3, r3, #16
 8007376:	f003 0303 	and.w	r3, r3, #3
 800737a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800737c:	4b5a      	ldr	r3, [pc, #360]	; (80074e8 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 800737e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007382:	0f1b      	lsrs	r3, r3, #28
 8007384:	f003 0307 	and.w	r3, r3, #7
 8007388:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	685b      	ldr	r3, [r3, #4]
 800738e:	019a      	lsls	r2, r3, #6
 8007390:	693b      	ldr	r3, [r7, #16]
 8007392:	041b      	lsls	r3, r3, #16
 8007394:	431a      	orrs	r2, r3
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	68db      	ldr	r3, [r3, #12]
 800739a:	061b      	lsls	r3, r3, #24
 800739c:	431a      	orrs	r2, r3
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	071b      	lsls	r3, r3, #28
 80073a2:	4951      	ldr	r1, [pc, #324]	; (80074e8 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 80073a4:	4313      	orrs	r3, r2
 80073a6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80073aa:	4b4f      	ldr	r3, [pc, #316]	; (80074e8 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 80073ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80073b0:	f023 021f 	bic.w	r2, r3, #31
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073b8:	3b01      	subs	r3, #1
 80073ba:	494b      	ldr	r1, [pc, #300]	; (80074e8 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 80073bc:	4313      	orrs	r3, r2
 80073be:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d032      	beq.n	8007434 <HAL_RCCEx_PeriphCLKConfig+0xc8c>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	691b      	ldr	r3, [r3, #16]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d010      	beq.n	80073f8 <HAL_RCCEx_PeriphCLKConfig+0xc50>
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	691b      	ldr	r3, [r3, #16]
 80073da:	2b01      	cmp	r3, #1
 80073dc:	d00c      	beq.n	80073f8 <HAL_RCCEx_PeriphCLKConfig+0xc50>
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	691b      	ldr	r3, [r3, #16]
 80073e2:	2b02      	cmp	r3, #2
 80073e4:	d008      	beq.n	80073f8 <HAL_RCCEx_PeriphCLKConfig+0xc50>
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	691b      	ldr	r3, [r3, #16]
 80073ea:	2b03      	cmp	r3, #3
 80073ec:	d004      	beq.n	80073f8 <HAL_RCCEx_PeriphCLKConfig+0xc50>
 80073ee:	f240 2105 	movw	r1, #517	; 0x205
 80073f2:	483e      	ldr	r0, [pc, #248]	; (80074ec <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 80073f4:	f7fb fb49 	bl	8002a8a <assert_failed>

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80073f8:	4b3b      	ldr	r3, [pc, #236]	; (80074e8 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 80073fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80073fe:	0e1b      	lsrs	r3, r3, #24
 8007400:	f003 030f 	and.w	r3, r3, #15
 8007404:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007406:	4b38      	ldr	r3, [pc, #224]	; (80074e8 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8007408:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800740c:	0f1b      	lsrs	r3, r3, #28
 800740e:	f003 0307 	and.w	r3, r3, #7
 8007412:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	685b      	ldr	r3, [r3, #4]
 8007418:	019a      	lsls	r2, r3, #6
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	691b      	ldr	r3, [r3, #16]
 800741e:	041b      	lsls	r3, r3, #16
 8007420:	431a      	orrs	r2, r3
 8007422:	693b      	ldr	r3, [r7, #16]
 8007424:	061b      	lsls	r3, r3, #24
 8007426:	431a      	orrs	r2, r3
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	071b      	lsls	r3, r3, #28
 800742c:	492e      	ldr	r1, [pc, #184]	; (80074e8 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 800742e:	4313      	orrs	r3, r2
 8007430:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800743c:	2b00      	cmp	r3, #0
 800743e:	d040      	beq.n	80074c2 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	691b      	ldr	r3, [r3, #16]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d010      	beq.n	800746a <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	691b      	ldr	r3, [r3, #16]
 800744c:	2b01      	cmp	r3, #1
 800744e:	d00c      	beq.n	800746a <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	691b      	ldr	r3, [r3, #16]
 8007454:	2b02      	cmp	r3, #2
 8007456:	d008      	beq.n	800746a <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	691b      	ldr	r3, [r3, #16]
 800745c:	2b03      	cmp	r3, #3
 800745e:	d004      	beq.n	800746a <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 8007460:	f44f 7105 	mov.w	r1, #532	; 0x214
 8007464:	4821      	ldr	r0, [pc, #132]	; (80074ec <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 8007466:	f7fb fb10 	bl	8002a8a <assert_failed>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	689b      	ldr	r3, [r3, #8]
 800746e:	2b01      	cmp	r3, #1
 8007470:	d903      	bls.n	800747a <HAL_RCCEx_PeriphCLKConfig+0xcd2>
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	689b      	ldr	r3, [r3, #8]
 8007476:	2b07      	cmp	r3, #7
 8007478:	d904      	bls.n	8007484 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 800747a:	f240 2115 	movw	r1, #533	; 0x215
 800747e:	481b      	ldr	r0, [pc, #108]	; (80074ec <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 8007480:	f7fb fb03 	bl	8002a8a <assert_failed>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	68db      	ldr	r3, [r3, #12]
 8007488:	2b01      	cmp	r3, #1
 800748a:	d903      	bls.n	8007494 <HAL_RCCEx_PeriphCLKConfig+0xcec>
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	68db      	ldr	r3, [r3, #12]
 8007490:	2b0f      	cmp	r3, #15
 8007492:	d904      	bls.n	800749e <HAL_RCCEx_PeriphCLKConfig+0xcf6>
 8007494:	f240 2116 	movw	r1, #534	; 0x216
 8007498:	4814      	ldr	r0, [pc, #80]	; (80074ec <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 800749a:	f7fb faf6 	bl	8002a8a <assert_failed>

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	685b      	ldr	r3, [r3, #4]
 80074a2:	019a      	lsls	r2, r3, #6
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	691b      	ldr	r3, [r3, #16]
 80074a8:	041b      	lsls	r3, r3, #16
 80074aa:	431a      	orrs	r2, r3
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	68db      	ldr	r3, [r3, #12]
 80074b0:	061b      	lsls	r3, r3, #24
 80074b2:	431a      	orrs	r2, r3
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	689b      	ldr	r3, [r3, #8]
 80074b8:	071b      	lsls	r3, r3, #28
 80074ba:	490b      	ldr	r1, [pc, #44]	; (80074e8 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 80074bc:	4313      	orrs	r3, r2
 80074be:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80074c2:	4b09      	ldr	r3, [pc, #36]	; (80074e8 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	4a08      	ldr	r2, [pc, #32]	; (80074e8 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 80074c8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80074cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80074ce:	f7fc f90f 	bl	80036f0 <HAL_GetTick>
 80074d2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80074d4:	e00c      	b.n	80074f0 <HAL_RCCEx_PeriphCLKConfig+0xd48>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80074d6:	f7fc f90b 	bl	80036f0 <HAL_GetTick>
 80074da:	4602      	mov	r2, r0
 80074dc:	697b      	ldr	r3, [r7, #20]
 80074de:	1ad3      	subs	r3, r2, r3
 80074e0:	2b64      	cmp	r3, #100	; 0x64
 80074e2:	d905      	bls.n	80074f0 <HAL_RCCEx_PeriphCLKConfig+0xd48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80074e4:	2303      	movs	r3, #3
 80074e6:	e13b      	b.n	8007760 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
 80074e8:	40023800 	.word	0x40023800
 80074ec:	080167a8 	.word	0x080167a8
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80074f0:	4b9d      	ldr	r3, [pc, #628]	; (8007768 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d0ec      	beq.n	80074d6 <HAL_RCCEx_PeriphCLKConfig+0xd2e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80074fc:	69bb      	ldr	r3, [r7, #24]
 80074fe:	2b01      	cmp	r3, #1
 8007500:	f040 812d 	bne.w	800775e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007504:	4b98      	ldr	r3, [pc, #608]	; (8007768 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	4a97      	ldr	r2, [pc, #604]	; (8007768 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 800750a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800750e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007510:	f7fc f8ee 	bl	80036f0 <HAL_GetTick>
 8007514:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007516:	e008      	b.n	800752a <HAL_RCCEx_PeriphCLKConfig+0xd82>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007518:	f7fc f8ea 	bl	80036f0 <HAL_GetTick>
 800751c:	4602      	mov	r2, r0
 800751e:	697b      	ldr	r3, [r7, #20]
 8007520:	1ad3      	subs	r3, r2, r3
 8007522:	2b64      	cmp	r3, #100	; 0x64
 8007524:	d901      	bls.n	800752a <HAL_RCCEx_PeriphCLKConfig+0xd82>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007526:	2303      	movs	r3, #3
 8007528:	e11a      	b.n	8007760 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800752a:	4b8f      	ldr	r3, [pc, #572]	; (8007768 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007532:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007536:	d0ef      	beq.n	8007518 <HAL_RCCEx_PeriphCLKConfig+0xd70>
      }
    }

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	695b      	ldr	r3, [r3, #20]
 800753c:	2b31      	cmp	r3, #49	; 0x31
 800753e:	d904      	bls.n	800754a <HAL_RCCEx_PeriphCLKConfig+0xda2>
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	695b      	ldr	r3, [r3, #20]
 8007544:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8007548:	d904      	bls.n	8007554 <HAL_RCCEx_PeriphCLKConfig+0xdac>
 800754a:	f44f 7111 	mov.w	r1, #580	; 0x244
 800754e:	4887      	ldr	r0, [pc, #540]	; (800776c <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 8007550:	f7fb fa9b 	bl	8002a8a <assert_failed>

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800755c:	2b00      	cmp	r3, #0
 800755e:	d003      	beq.n	8007568 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007564:	2b00      	cmp	r3, #0
 8007566:	d009      	beq.n	800757c <HAL_RCCEx_PeriphCLKConfig+0xdd4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007570:	2b00      	cmp	r3, #0
 8007572:	d048      	beq.n	8007606 <HAL_RCCEx_PeriphCLKConfig+0xe5e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007578:	2b00      	cmp	r3, #0
 800757a:	d144      	bne.n	8007606 <HAL_RCCEx_PeriphCLKConfig+0xe5e>
    {
      /* check for PLLSAIQ Parameter */
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	699b      	ldr	r3, [r3, #24]
 8007580:	2b01      	cmp	r3, #1
 8007582:	d903      	bls.n	800758c <HAL_RCCEx_PeriphCLKConfig+0xde4>
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	699b      	ldr	r3, [r3, #24]
 8007588:	2b0f      	cmp	r3, #15
 800758a:	d904      	bls.n	8007596 <HAL_RCCEx_PeriphCLKConfig+0xdee>
 800758c:	f240 214b 	movw	r1, #587	; 0x24b
 8007590:	4876      	ldr	r0, [pc, #472]	; (800776c <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 8007592:	f7fb fa7a 	bl	8002a8a <assert_failed>
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800759a:	2b00      	cmp	r3, #0
 800759c:	d003      	beq.n	80075a6 <HAL_RCCEx_PeriphCLKConfig+0xdfe>
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075a2:	2b20      	cmp	r3, #32
 80075a4:	d904      	bls.n	80075b0 <HAL_RCCEx_PeriphCLKConfig+0xe08>
 80075a6:	f240 214d 	movw	r1, #589	; 0x24d
 80075aa:	4870      	ldr	r0, [pc, #448]	; (800776c <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 80075ac:	f7fb fa6d 	bl	8002a8a <assert_failed>

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80075b0:	4b6d      	ldr	r3, [pc, #436]	; (8007768 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 80075b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075b6:	0c1b      	lsrs	r3, r3, #16
 80075b8:	f003 0303 	and.w	r3, r3, #3
 80075bc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80075be:	4b6a      	ldr	r3, [pc, #424]	; (8007768 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 80075c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075c4:	0f1b      	lsrs	r3, r3, #28
 80075c6:	f003 0307 	and.w	r3, r3, #7
 80075ca:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	695b      	ldr	r3, [r3, #20]
 80075d0:	019a      	lsls	r2, r3, #6
 80075d2:	693b      	ldr	r3, [r7, #16]
 80075d4:	041b      	lsls	r3, r3, #16
 80075d6:	431a      	orrs	r2, r3
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	699b      	ldr	r3, [r3, #24]
 80075dc:	061b      	lsls	r3, r3, #24
 80075de:	431a      	orrs	r2, r3
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	071b      	lsls	r3, r3, #28
 80075e4:	4960      	ldr	r1, [pc, #384]	; (8007768 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 80075e6:	4313      	orrs	r3, r2
 80075e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80075ec:	4b5e      	ldr	r3, [pc, #376]	; (8007768 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 80075ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80075f2:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075fa:	3b01      	subs	r3, #1
 80075fc:	021b      	lsls	r3, r3, #8
 80075fe:	495a      	ldr	r1, [pc, #360]	; (8007768 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8007600:	4313      	orrs	r3, r2
 8007602:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800760e:	2b00      	cmp	r3, #0
 8007610:	d037      	beq.n	8007682 <HAL_RCCEx_PeriphCLKConfig+0xeda>
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007616:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800761a:	d132      	bne.n	8007682 <HAL_RCCEx_PeriphCLKConfig+0xeda>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	6a1b      	ldr	r3, [r3, #32]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d010      	beq.n	8007646 <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	6a1b      	ldr	r3, [r3, #32]
 8007628:	2b01      	cmp	r3, #1
 800762a:	d00c      	beq.n	8007646 <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	6a1b      	ldr	r3, [r3, #32]
 8007630:	2b02      	cmp	r3, #2
 8007632:	d008      	beq.n	8007646 <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	6a1b      	ldr	r3, [r3, #32]
 8007638:	2b03      	cmp	r3, #3
 800763a:	d004      	beq.n	8007646 <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 800763c:	f44f 7118 	mov.w	r1, #608	; 0x260
 8007640:	484a      	ldr	r0, [pc, #296]	; (800776c <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 8007642:	f7fb fa22 	bl	8002a8a <assert_failed>
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007646:	4b48      	ldr	r3, [pc, #288]	; (8007768 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8007648:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800764c:	0e1b      	lsrs	r3, r3, #24
 800764e:	f003 030f 	and.w	r3, r3, #15
 8007652:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007654:	4b44      	ldr	r3, [pc, #272]	; (8007768 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8007656:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800765a:	0f1b      	lsrs	r3, r3, #28
 800765c:	f003 0307 	and.w	r3, r3, #7
 8007660:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	695b      	ldr	r3, [r3, #20]
 8007666:	019a      	lsls	r2, r3, #6
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	6a1b      	ldr	r3, [r3, #32]
 800766c:	041b      	lsls	r3, r3, #16
 800766e:	431a      	orrs	r2, r3
 8007670:	693b      	ldr	r3, [r7, #16]
 8007672:	061b      	lsls	r3, r3, #24
 8007674:	431a      	orrs	r2, r3
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	071b      	lsls	r3, r3, #28
 800767a:	493b      	ldr	r1, [pc, #236]	; (8007768 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 800767c:	4313      	orrs	r3, r2
 800767e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f003 0308 	and.w	r3, r3, #8
 800768a:	2b00      	cmp	r3, #0
 800768c:	d04d      	beq.n	800772a <HAL_RCCEx_PeriphCLKConfig+0xf82>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	69db      	ldr	r3, [r3, #28]
 8007692:	2b01      	cmp	r3, #1
 8007694:	d903      	bls.n	800769e <HAL_RCCEx_PeriphCLKConfig+0xef6>
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	69db      	ldr	r3, [r3, #28]
 800769a:	2b07      	cmp	r3, #7
 800769c:	d904      	bls.n	80076a8 <HAL_RCCEx_PeriphCLKConfig+0xf00>
 800769e:	f240 216f 	movw	r1, #623	; 0x26f
 80076a2:	4832      	ldr	r0, [pc, #200]	; (800776c <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 80076a4:	f7fb f9f1 	bl	8002a8a <assert_failed>
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d013      	beq.n	80076d8 <HAL_RCCEx_PeriphCLKConfig+0xf30>
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80076b8:	d00e      	beq.n	80076d8 <HAL_RCCEx_PeriphCLKConfig+0xf30>
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076be:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80076c2:	d009      	beq.n	80076d8 <HAL_RCCEx_PeriphCLKConfig+0xf30>
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076c8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80076cc:	d004      	beq.n	80076d8 <HAL_RCCEx_PeriphCLKConfig+0xf30>
 80076ce:	f44f 711c 	mov.w	r1, #624	; 0x270
 80076d2:	4826      	ldr	r0, [pc, #152]	; (800776c <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 80076d4:	f7fb f9d9 	bl	8002a8a <assert_failed>

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80076d8:	4b23      	ldr	r3, [pc, #140]	; (8007768 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 80076da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076de:	0e1b      	lsrs	r3, r3, #24
 80076e0:	f003 030f 	and.w	r3, r3, #15
 80076e4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80076e6:	4b20      	ldr	r3, [pc, #128]	; (8007768 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 80076e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076ec:	0c1b      	lsrs	r3, r3, #16
 80076ee:	f003 0303 	and.w	r3, r3, #3
 80076f2:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	695b      	ldr	r3, [r3, #20]
 80076f8:	019a      	lsls	r2, r3, #6
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	041b      	lsls	r3, r3, #16
 80076fe:	431a      	orrs	r2, r3
 8007700:	693b      	ldr	r3, [r7, #16]
 8007702:	061b      	lsls	r3, r3, #24
 8007704:	431a      	orrs	r2, r3
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	69db      	ldr	r3, [r3, #28]
 800770a:	071b      	lsls	r3, r3, #28
 800770c:	4916      	ldr	r1, [pc, #88]	; (8007768 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 800770e:	4313      	orrs	r3, r2
 8007710:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8007714:	4b14      	ldr	r3, [pc, #80]	; (8007768 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8007716:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800771a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007722:	4911      	ldr	r1, [pc, #68]	; (8007768 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8007724:	4313      	orrs	r3, r2
 8007726:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800772a:	4b0f      	ldr	r3, [pc, #60]	; (8007768 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	4a0e      	ldr	r2, [pc, #56]	; (8007768 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8007730:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007734:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007736:	f7fb ffdb 	bl	80036f0 <HAL_GetTick>
 800773a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800773c:	e008      	b.n	8007750 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800773e:	f7fb ffd7 	bl	80036f0 <HAL_GetTick>
 8007742:	4602      	mov	r2, r0
 8007744:	697b      	ldr	r3, [r7, #20]
 8007746:	1ad3      	subs	r3, r2, r3
 8007748:	2b64      	cmp	r3, #100	; 0x64
 800774a:	d901      	bls.n	8007750 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800774c:	2303      	movs	r3, #3
 800774e:	e007      	b.n	8007760 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007750:	4b05      	ldr	r3, [pc, #20]	; (8007768 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007758:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800775c:	d1ef      	bne.n	800773e <HAL_RCCEx_PeriphCLKConfig+0xf96>
      }
    }
  }
  return HAL_OK;
 800775e:	2300      	movs	r3, #0
}
 8007760:	4618      	mov	r0, r3
 8007762:	3720      	adds	r7, #32
 8007764:	46bd      	mov	sp, r7
 8007766:	bd80      	pop	{r7, pc}
 8007768:	40023800 	.word	0x40023800
 800776c:	080167a8 	.word	0x080167a8

08007770 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b082      	sub	sp, #8
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d101      	bne.n	8007782 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800777e:	2301      	movs	r3, #1
 8007780:	e0f5      	b.n	800796e <HAL_TIM_Base_Init+0x1fe>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	4a7c      	ldr	r2, [pc, #496]	; (8007978 <HAL_TIM_Base_Init+0x208>)
 8007788:	4293      	cmp	r3, r2
 800778a:	d045      	beq.n	8007818 <HAL_TIM_Base_Init+0xa8>
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007794:	d040      	beq.n	8007818 <HAL_TIM_Base_Init+0xa8>
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	4a78      	ldr	r2, [pc, #480]	; (800797c <HAL_TIM_Base_Init+0x20c>)
 800779c:	4293      	cmp	r3, r2
 800779e:	d03b      	beq.n	8007818 <HAL_TIM_Base_Init+0xa8>
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	4a76      	ldr	r2, [pc, #472]	; (8007980 <HAL_TIM_Base_Init+0x210>)
 80077a6:	4293      	cmp	r3, r2
 80077a8:	d036      	beq.n	8007818 <HAL_TIM_Base_Init+0xa8>
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	4a75      	ldr	r2, [pc, #468]	; (8007984 <HAL_TIM_Base_Init+0x214>)
 80077b0:	4293      	cmp	r3, r2
 80077b2:	d031      	beq.n	8007818 <HAL_TIM_Base_Init+0xa8>
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	4a73      	ldr	r2, [pc, #460]	; (8007988 <HAL_TIM_Base_Init+0x218>)
 80077ba:	4293      	cmp	r3, r2
 80077bc:	d02c      	beq.n	8007818 <HAL_TIM_Base_Init+0xa8>
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	4a72      	ldr	r2, [pc, #456]	; (800798c <HAL_TIM_Base_Init+0x21c>)
 80077c4:	4293      	cmp	r3, r2
 80077c6:	d027      	beq.n	8007818 <HAL_TIM_Base_Init+0xa8>
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	4a70      	ldr	r2, [pc, #448]	; (8007990 <HAL_TIM_Base_Init+0x220>)
 80077ce:	4293      	cmp	r3, r2
 80077d0:	d022      	beq.n	8007818 <HAL_TIM_Base_Init+0xa8>
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	4a6f      	ldr	r2, [pc, #444]	; (8007994 <HAL_TIM_Base_Init+0x224>)
 80077d8:	4293      	cmp	r3, r2
 80077da:	d01d      	beq.n	8007818 <HAL_TIM_Base_Init+0xa8>
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	4a6d      	ldr	r2, [pc, #436]	; (8007998 <HAL_TIM_Base_Init+0x228>)
 80077e2:	4293      	cmp	r3, r2
 80077e4:	d018      	beq.n	8007818 <HAL_TIM_Base_Init+0xa8>
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	4a6c      	ldr	r2, [pc, #432]	; (800799c <HAL_TIM_Base_Init+0x22c>)
 80077ec:	4293      	cmp	r3, r2
 80077ee:	d013      	beq.n	8007818 <HAL_TIM_Base_Init+0xa8>
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	4a6a      	ldr	r2, [pc, #424]	; (80079a0 <HAL_TIM_Base_Init+0x230>)
 80077f6:	4293      	cmp	r3, r2
 80077f8:	d00e      	beq.n	8007818 <HAL_TIM_Base_Init+0xa8>
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	4a69      	ldr	r2, [pc, #420]	; (80079a4 <HAL_TIM_Base_Init+0x234>)
 8007800:	4293      	cmp	r3, r2
 8007802:	d009      	beq.n	8007818 <HAL_TIM_Base_Init+0xa8>
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	4a67      	ldr	r2, [pc, #412]	; (80079a8 <HAL_TIM_Base_Init+0x238>)
 800780a:	4293      	cmp	r3, r2
 800780c:	d004      	beq.n	8007818 <HAL_TIM_Base_Init+0xa8>
 800780e:	f44f 718b 	mov.w	r1, #278	; 0x116
 8007812:	4866      	ldr	r0, [pc, #408]	; (80079ac <HAL_TIM_Base_Init+0x23c>)
 8007814:	f7fb f939 	bl	8002a8a <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	689b      	ldr	r3, [r3, #8]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d014      	beq.n	800784a <HAL_TIM_Base_Init+0xda>
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	689b      	ldr	r3, [r3, #8]
 8007824:	2b10      	cmp	r3, #16
 8007826:	d010      	beq.n	800784a <HAL_TIM_Base_Init+0xda>
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	689b      	ldr	r3, [r3, #8]
 800782c:	2b20      	cmp	r3, #32
 800782e:	d00c      	beq.n	800784a <HAL_TIM_Base_Init+0xda>
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	689b      	ldr	r3, [r3, #8]
 8007834:	2b40      	cmp	r3, #64	; 0x40
 8007836:	d008      	beq.n	800784a <HAL_TIM_Base_Init+0xda>
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	689b      	ldr	r3, [r3, #8]
 800783c:	2b60      	cmp	r3, #96	; 0x60
 800783e:	d004      	beq.n	800784a <HAL_TIM_Base_Init+0xda>
 8007840:	f240 1117 	movw	r1, #279	; 0x117
 8007844:	4859      	ldr	r0, [pc, #356]	; (80079ac <HAL_TIM_Base_Init+0x23c>)
 8007846:	f7fb f920 	bl	8002a8a <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	691b      	ldr	r3, [r3, #16]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d00e      	beq.n	8007870 <HAL_TIM_Base_Init+0x100>
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	691b      	ldr	r3, [r3, #16]
 8007856:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800785a:	d009      	beq.n	8007870 <HAL_TIM_Base_Init+0x100>
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	691b      	ldr	r3, [r3, #16]
 8007860:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007864:	d004      	beq.n	8007870 <HAL_TIM_Base_Init+0x100>
 8007866:	f44f 718c 	mov.w	r1, #280	; 0x118
 800786a:	4850      	ldr	r0, [pc, #320]	; (80079ac <HAL_TIM_Base_Init+0x23c>)
 800786c:	f7fb f90d 	bl	8002a8a <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007878:	d004      	beq.n	8007884 <HAL_TIM_Base_Init+0x114>
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	4a41      	ldr	r2, [pc, #260]	; (8007984 <HAL_TIM_Base_Init+0x214>)
 8007880:	4293      	cmp	r3, r2
 8007882:	d107      	bne.n	8007894 <HAL_TIM_Base_Init+0x124>
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	68db      	ldr	r3, [r3, #12]
 8007888:	2b00      	cmp	r3, #0
 800788a:	bf14      	ite	ne
 800788c:	2301      	movne	r3, #1
 800788e:	2300      	moveq	r3, #0
 8007890:	b2db      	uxtb	r3, r3
 8007892:	e00e      	b.n	80078b2 <HAL_TIM_Base_Init+0x142>
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	68db      	ldr	r3, [r3, #12]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d006      	beq.n	80078aa <HAL_TIM_Base_Init+0x13a>
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	68db      	ldr	r3, [r3, #12]
 80078a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80078a4:	d201      	bcs.n	80078aa <HAL_TIM_Base_Init+0x13a>
 80078a6:	2301      	movs	r3, #1
 80078a8:	e000      	b.n	80078ac <HAL_TIM_Base_Init+0x13c>
 80078aa:	2300      	movs	r3, #0
 80078ac:	f003 0301 	and.w	r3, r3, #1
 80078b0:	b2db      	uxtb	r3, r3
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d104      	bne.n	80078c0 <HAL_TIM_Base_Init+0x150>
 80078b6:	f240 1119 	movw	r1, #281	; 0x119
 80078ba:	483c      	ldr	r0, [pc, #240]	; (80079ac <HAL_TIM_Base_Init+0x23c>)
 80078bc:	f7fb f8e5 	bl	8002a8a <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	699b      	ldr	r3, [r3, #24]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d008      	beq.n	80078da <HAL_TIM_Base_Init+0x16a>
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	699b      	ldr	r3, [r3, #24]
 80078cc:	2b80      	cmp	r3, #128	; 0x80
 80078ce:	d004      	beq.n	80078da <HAL_TIM_Base_Init+0x16a>
 80078d0:	f44f 718d 	mov.w	r1, #282	; 0x11a
 80078d4:	4835      	ldr	r0, [pc, #212]	; (80079ac <HAL_TIM_Base_Init+0x23c>)
 80078d6:	f7fb f8d8 	bl	8002a8a <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078e0:	b2db      	uxtb	r3, r3
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d106      	bne.n	80078f4 <HAL_TIM_Base_Init+0x184>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	2200      	movs	r2, #0
 80078ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80078ee:	6878      	ldr	r0, [r7, #4]
 80078f0:	f7fb fc30 	bl	8003154 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2202      	movs	r2, #2
 80078f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681a      	ldr	r2, [r3, #0]
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	3304      	adds	r3, #4
 8007904:	4619      	mov	r1, r3
 8007906:	4610      	mov	r0, r2
 8007908:	f001 fa52 	bl	8008db0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2201      	movs	r2, #1
 8007910:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2201      	movs	r2, #1
 8007918:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2201      	movs	r2, #1
 8007920:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	2201      	movs	r2, #1
 8007928:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2201      	movs	r2, #1
 8007930:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2201      	movs	r2, #1
 8007938:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2201      	movs	r2, #1
 8007940:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2201      	movs	r2, #1
 8007948:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2201      	movs	r2, #1
 8007950:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2201      	movs	r2, #1
 8007958:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2201      	movs	r2, #1
 8007960:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2201      	movs	r2, #1
 8007968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800796c:	2300      	movs	r3, #0
}
 800796e:	4618      	mov	r0, r3
 8007970:	3708      	adds	r7, #8
 8007972:	46bd      	mov	sp, r7
 8007974:	bd80      	pop	{r7, pc}
 8007976:	bf00      	nop
 8007978:	40010000 	.word	0x40010000
 800797c:	40000400 	.word	0x40000400
 8007980:	40000800 	.word	0x40000800
 8007984:	40000c00 	.word	0x40000c00
 8007988:	40001000 	.word	0x40001000
 800798c:	40001400 	.word	0x40001400
 8007990:	40010400 	.word	0x40010400
 8007994:	40014000 	.word	0x40014000
 8007998:	40014400 	.word	0x40014400
 800799c:	40014800 	.word	0x40014800
 80079a0:	40001800 	.word	0x40001800
 80079a4:	40001c00 	.word	0x40001c00
 80079a8:	40002000 	.word	0x40002000
 80079ac:	080167e4 	.word	0x080167e4

080079b0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80079b0:	b580      	push	{r7, lr}
 80079b2:	b082      	sub	sp, #8
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d101      	bne.n	80079c2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80079be:	2301      	movs	r3, #1
 80079c0:	e0f5      	b.n	8007bae <HAL_TIM_PWM_Init+0x1fe>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	4a7c      	ldr	r2, [pc, #496]	; (8007bb8 <HAL_TIM_PWM_Init+0x208>)
 80079c8:	4293      	cmp	r3, r2
 80079ca:	d045      	beq.n	8007a58 <HAL_TIM_PWM_Init+0xa8>
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079d4:	d040      	beq.n	8007a58 <HAL_TIM_PWM_Init+0xa8>
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	4a78      	ldr	r2, [pc, #480]	; (8007bbc <HAL_TIM_PWM_Init+0x20c>)
 80079dc:	4293      	cmp	r3, r2
 80079de:	d03b      	beq.n	8007a58 <HAL_TIM_PWM_Init+0xa8>
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	4a76      	ldr	r2, [pc, #472]	; (8007bc0 <HAL_TIM_PWM_Init+0x210>)
 80079e6:	4293      	cmp	r3, r2
 80079e8:	d036      	beq.n	8007a58 <HAL_TIM_PWM_Init+0xa8>
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	4a75      	ldr	r2, [pc, #468]	; (8007bc4 <HAL_TIM_PWM_Init+0x214>)
 80079f0:	4293      	cmp	r3, r2
 80079f2:	d031      	beq.n	8007a58 <HAL_TIM_PWM_Init+0xa8>
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	4a73      	ldr	r2, [pc, #460]	; (8007bc8 <HAL_TIM_PWM_Init+0x218>)
 80079fa:	4293      	cmp	r3, r2
 80079fc:	d02c      	beq.n	8007a58 <HAL_TIM_PWM_Init+0xa8>
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	4a72      	ldr	r2, [pc, #456]	; (8007bcc <HAL_TIM_PWM_Init+0x21c>)
 8007a04:	4293      	cmp	r3, r2
 8007a06:	d027      	beq.n	8007a58 <HAL_TIM_PWM_Init+0xa8>
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	4a70      	ldr	r2, [pc, #448]	; (8007bd0 <HAL_TIM_PWM_Init+0x220>)
 8007a0e:	4293      	cmp	r3, r2
 8007a10:	d022      	beq.n	8007a58 <HAL_TIM_PWM_Init+0xa8>
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	4a6f      	ldr	r2, [pc, #444]	; (8007bd4 <HAL_TIM_PWM_Init+0x224>)
 8007a18:	4293      	cmp	r3, r2
 8007a1a:	d01d      	beq.n	8007a58 <HAL_TIM_PWM_Init+0xa8>
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	4a6d      	ldr	r2, [pc, #436]	; (8007bd8 <HAL_TIM_PWM_Init+0x228>)
 8007a22:	4293      	cmp	r3, r2
 8007a24:	d018      	beq.n	8007a58 <HAL_TIM_PWM_Init+0xa8>
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	4a6c      	ldr	r2, [pc, #432]	; (8007bdc <HAL_TIM_PWM_Init+0x22c>)
 8007a2c:	4293      	cmp	r3, r2
 8007a2e:	d013      	beq.n	8007a58 <HAL_TIM_PWM_Init+0xa8>
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	4a6a      	ldr	r2, [pc, #424]	; (8007be0 <HAL_TIM_PWM_Init+0x230>)
 8007a36:	4293      	cmp	r3, r2
 8007a38:	d00e      	beq.n	8007a58 <HAL_TIM_PWM_Init+0xa8>
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	4a69      	ldr	r2, [pc, #420]	; (8007be4 <HAL_TIM_PWM_Init+0x234>)
 8007a40:	4293      	cmp	r3, r2
 8007a42:	d009      	beq.n	8007a58 <HAL_TIM_PWM_Init+0xa8>
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	4a67      	ldr	r2, [pc, #412]	; (8007be8 <HAL_TIM_PWM_Init+0x238>)
 8007a4a:	4293      	cmp	r3, r2
 8007a4c:	d004      	beq.n	8007a58 <HAL_TIM_PWM_Init+0xa8>
 8007a4e:	f240 5133 	movw	r1, #1331	; 0x533
 8007a52:	4866      	ldr	r0, [pc, #408]	; (8007bec <HAL_TIM_PWM_Init+0x23c>)
 8007a54:	f7fb f819 	bl	8002a8a <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	689b      	ldr	r3, [r3, #8]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d014      	beq.n	8007a8a <HAL_TIM_PWM_Init+0xda>
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	689b      	ldr	r3, [r3, #8]
 8007a64:	2b10      	cmp	r3, #16
 8007a66:	d010      	beq.n	8007a8a <HAL_TIM_PWM_Init+0xda>
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	689b      	ldr	r3, [r3, #8]
 8007a6c:	2b20      	cmp	r3, #32
 8007a6e:	d00c      	beq.n	8007a8a <HAL_TIM_PWM_Init+0xda>
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	689b      	ldr	r3, [r3, #8]
 8007a74:	2b40      	cmp	r3, #64	; 0x40
 8007a76:	d008      	beq.n	8007a8a <HAL_TIM_PWM_Init+0xda>
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	689b      	ldr	r3, [r3, #8]
 8007a7c:	2b60      	cmp	r3, #96	; 0x60
 8007a7e:	d004      	beq.n	8007a8a <HAL_TIM_PWM_Init+0xda>
 8007a80:	f240 5134 	movw	r1, #1332	; 0x534
 8007a84:	4859      	ldr	r0, [pc, #356]	; (8007bec <HAL_TIM_PWM_Init+0x23c>)
 8007a86:	f7fb f800 	bl	8002a8a <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	691b      	ldr	r3, [r3, #16]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d00e      	beq.n	8007ab0 <HAL_TIM_PWM_Init+0x100>
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	691b      	ldr	r3, [r3, #16]
 8007a96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a9a:	d009      	beq.n	8007ab0 <HAL_TIM_PWM_Init+0x100>
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	691b      	ldr	r3, [r3, #16]
 8007aa0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007aa4:	d004      	beq.n	8007ab0 <HAL_TIM_PWM_Init+0x100>
 8007aa6:	f240 5135 	movw	r1, #1333	; 0x535
 8007aaa:	4850      	ldr	r0, [pc, #320]	; (8007bec <HAL_TIM_PWM_Init+0x23c>)
 8007aac:	f7fa ffed 	bl	8002a8a <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ab8:	d004      	beq.n	8007ac4 <HAL_TIM_PWM_Init+0x114>
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	4a41      	ldr	r2, [pc, #260]	; (8007bc4 <HAL_TIM_PWM_Init+0x214>)
 8007ac0:	4293      	cmp	r3, r2
 8007ac2:	d107      	bne.n	8007ad4 <HAL_TIM_PWM_Init+0x124>
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	68db      	ldr	r3, [r3, #12]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	bf14      	ite	ne
 8007acc:	2301      	movne	r3, #1
 8007ace:	2300      	moveq	r3, #0
 8007ad0:	b2db      	uxtb	r3, r3
 8007ad2:	e00e      	b.n	8007af2 <HAL_TIM_PWM_Init+0x142>
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	68db      	ldr	r3, [r3, #12]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d006      	beq.n	8007aea <HAL_TIM_PWM_Init+0x13a>
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	68db      	ldr	r3, [r3, #12]
 8007ae0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ae4:	d201      	bcs.n	8007aea <HAL_TIM_PWM_Init+0x13a>
 8007ae6:	2301      	movs	r3, #1
 8007ae8:	e000      	b.n	8007aec <HAL_TIM_PWM_Init+0x13c>
 8007aea:	2300      	movs	r3, #0
 8007aec:	f003 0301 	and.w	r3, r3, #1
 8007af0:	b2db      	uxtb	r3, r3
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d104      	bne.n	8007b00 <HAL_TIM_PWM_Init+0x150>
 8007af6:	f240 5136 	movw	r1, #1334	; 0x536
 8007afa:	483c      	ldr	r0, [pc, #240]	; (8007bec <HAL_TIM_PWM_Init+0x23c>)
 8007afc:	f7fa ffc5 	bl	8002a8a <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	699b      	ldr	r3, [r3, #24]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d008      	beq.n	8007b1a <HAL_TIM_PWM_Init+0x16a>
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	699b      	ldr	r3, [r3, #24]
 8007b0c:	2b80      	cmp	r3, #128	; 0x80
 8007b0e:	d004      	beq.n	8007b1a <HAL_TIM_PWM_Init+0x16a>
 8007b10:	f240 5137 	movw	r1, #1335	; 0x537
 8007b14:	4835      	ldr	r0, [pc, #212]	; (8007bec <HAL_TIM_PWM_Init+0x23c>)
 8007b16:	f7fa ffb8 	bl	8002a8a <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b20:	b2db      	uxtb	r3, r3
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d106      	bne.n	8007b34 <HAL_TIM_PWM_Init+0x184>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	2200      	movs	r2, #0
 8007b2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007b2e:	6878      	ldr	r0, [r7, #4]
 8007b30:	f000 f85e 	bl	8007bf0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2202      	movs	r2, #2
 8007b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681a      	ldr	r2, [r3, #0]
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	3304      	adds	r3, #4
 8007b44:	4619      	mov	r1, r3
 8007b46:	4610      	mov	r0, r2
 8007b48:	f001 f932 	bl	8008db0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2201      	movs	r2, #1
 8007b50:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2201      	movs	r2, #1
 8007b58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2201      	movs	r2, #1
 8007b60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	2201      	movs	r2, #1
 8007b68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2201      	movs	r2, #1
 8007b70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2201      	movs	r2, #1
 8007b78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2201      	movs	r2, #1
 8007b80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2201      	movs	r2, #1
 8007b88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2201      	movs	r2, #1
 8007b90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2201      	movs	r2, #1
 8007b98:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2201      	movs	r2, #1
 8007ba0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2201      	movs	r2, #1
 8007ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007bac:	2300      	movs	r3, #0
}
 8007bae:	4618      	mov	r0, r3
 8007bb0:	3708      	adds	r7, #8
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	bd80      	pop	{r7, pc}
 8007bb6:	bf00      	nop
 8007bb8:	40010000 	.word	0x40010000
 8007bbc:	40000400 	.word	0x40000400
 8007bc0:	40000800 	.word	0x40000800
 8007bc4:	40000c00 	.word	0x40000c00
 8007bc8:	40001000 	.word	0x40001000
 8007bcc:	40001400 	.word	0x40001400
 8007bd0:	40010400 	.word	0x40010400
 8007bd4:	40014000 	.word	0x40014000
 8007bd8:	40014400 	.word	0x40014400
 8007bdc:	40014800 	.word	0x40014800
 8007be0:	40001800 	.word	0x40001800
 8007be4:	40001c00 	.word	0x40001c00
 8007be8:	40002000 	.word	0x40002000
 8007bec:	080167e4 	.word	0x080167e4

08007bf0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007bf0:	b480      	push	{r7}
 8007bf2:	b083      	sub	sp, #12
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007bf8:	bf00      	nop
 8007bfa:	370c      	adds	r7, #12
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c02:	4770      	bx	lr

08007c04 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b084      	sub	sp, #16
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
 8007c0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	4a89      	ldr	r2, [pc, #548]	; (8007e38 <HAL_TIM_PWM_Start+0x234>)
 8007c14:	4293      	cmp	r3, r2
 8007c16:	d117      	bne.n	8007c48 <HAL_TIM_PWM_Start+0x44>
 8007c18:	683b      	ldr	r3, [r7, #0]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	f000 80ae 	beq.w	8007d7c <HAL_TIM_PWM_Start+0x178>
 8007c20:	683b      	ldr	r3, [r7, #0]
 8007c22:	2b04      	cmp	r3, #4
 8007c24:	f000 80aa 	beq.w	8007d7c <HAL_TIM_PWM_Start+0x178>
 8007c28:	683b      	ldr	r3, [r7, #0]
 8007c2a:	2b08      	cmp	r3, #8
 8007c2c:	f000 80a6 	beq.w	8007d7c <HAL_TIM_PWM_Start+0x178>
 8007c30:	683b      	ldr	r3, [r7, #0]
 8007c32:	2b0c      	cmp	r3, #12
 8007c34:	f000 80a2 	beq.w	8007d7c <HAL_TIM_PWM_Start+0x178>
 8007c38:	683b      	ldr	r3, [r7, #0]
 8007c3a:	2b10      	cmp	r3, #16
 8007c3c:	f000 809e 	beq.w	8007d7c <HAL_TIM_PWM_Start+0x178>
 8007c40:	683b      	ldr	r3, [r7, #0]
 8007c42:	2b14      	cmp	r3, #20
 8007c44:	f000 809a 	beq.w	8007d7c <HAL_TIM_PWM_Start+0x178>
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c50:	d10f      	bne.n	8007c72 <HAL_TIM_PWM_Start+0x6e>
 8007c52:	683b      	ldr	r3, [r7, #0]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	f000 8091 	beq.w	8007d7c <HAL_TIM_PWM_Start+0x178>
 8007c5a:	683b      	ldr	r3, [r7, #0]
 8007c5c:	2b04      	cmp	r3, #4
 8007c5e:	f000 808d 	beq.w	8007d7c <HAL_TIM_PWM_Start+0x178>
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	2b08      	cmp	r3, #8
 8007c66:	f000 8089 	beq.w	8007d7c <HAL_TIM_PWM_Start+0x178>
 8007c6a:	683b      	ldr	r3, [r7, #0]
 8007c6c:	2b0c      	cmp	r3, #12
 8007c6e:	f000 8085 	beq.w	8007d7c <HAL_TIM_PWM_Start+0x178>
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	4a71      	ldr	r2, [pc, #452]	; (8007e3c <HAL_TIM_PWM_Start+0x238>)
 8007c78:	4293      	cmp	r3, r2
 8007c7a:	d10b      	bne.n	8007c94 <HAL_TIM_PWM_Start+0x90>
 8007c7c:	683b      	ldr	r3, [r7, #0]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d07c      	beq.n	8007d7c <HAL_TIM_PWM_Start+0x178>
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	2b04      	cmp	r3, #4
 8007c86:	d079      	beq.n	8007d7c <HAL_TIM_PWM_Start+0x178>
 8007c88:	683b      	ldr	r3, [r7, #0]
 8007c8a:	2b08      	cmp	r3, #8
 8007c8c:	d076      	beq.n	8007d7c <HAL_TIM_PWM_Start+0x178>
 8007c8e:	683b      	ldr	r3, [r7, #0]
 8007c90:	2b0c      	cmp	r3, #12
 8007c92:	d073      	beq.n	8007d7c <HAL_TIM_PWM_Start+0x178>
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	4a69      	ldr	r2, [pc, #420]	; (8007e40 <HAL_TIM_PWM_Start+0x23c>)
 8007c9a:	4293      	cmp	r3, r2
 8007c9c:	d10b      	bne.n	8007cb6 <HAL_TIM_PWM_Start+0xb2>
 8007c9e:	683b      	ldr	r3, [r7, #0]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d06b      	beq.n	8007d7c <HAL_TIM_PWM_Start+0x178>
 8007ca4:	683b      	ldr	r3, [r7, #0]
 8007ca6:	2b04      	cmp	r3, #4
 8007ca8:	d068      	beq.n	8007d7c <HAL_TIM_PWM_Start+0x178>
 8007caa:	683b      	ldr	r3, [r7, #0]
 8007cac:	2b08      	cmp	r3, #8
 8007cae:	d065      	beq.n	8007d7c <HAL_TIM_PWM_Start+0x178>
 8007cb0:	683b      	ldr	r3, [r7, #0]
 8007cb2:	2b0c      	cmp	r3, #12
 8007cb4:	d062      	beq.n	8007d7c <HAL_TIM_PWM_Start+0x178>
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	4a62      	ldr	r2, [pc, #392]	; (8007e44 <HAL_TIM_PWM_Start+0x240>)
 8007cbc:	4293      	cmp	r3, r2
 8007cbe:	d10b      	bne.n	8007cd8 <HAL_TIM_PWM_Start+0xd4>
 8007cc0:	683b      	ldr	r3, [r7, #0]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d05a      	beq.n	8007d7c <HAL_TIM_PWM_Start+0x178>
 8007cc6:	683b      	ldr	r3, [r7, #0]
 8007cc8:	2b04      	cmp	r3, #4
 8007cca:	d057      	beq.n	8007d7c <HAL_TIM_PWM_Start+0x178>
 8007ccc:	683b      	ldr	r3, [r7, #0]
 8007cce:	2b08      	cmp	r3, #8
 8007cd0:	d054      	beq.n	8007d7c <HAL_TIM_PWM_Start+0x178>
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	2b0c      	cmp	r3, #12
 8007cd6:	d051      	beq.n	8007d7c <HAL_TIM_PWM_Start+0x178>
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	4a5a      	ldr	r2, [pc, #360]	; (8007e48 <HAL_TIM_PWM_Start+0x244>)
 8007cde:	4293      	cmp	r3, r2
 8007ce0:	d111      	bne.n	8007d06 <HAL_TIM_PWM_Start+0x102>
 8007ce2:	683b      	ldr	r3, [r7, #0]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d049      	beq.n	8007d7c <HAL_TIM_PWM_Start+0x178>
 8007ce8:	683b      	ldr	r3, [r7, #0]
 8007cea:	2b04      	cmp	r3, #4
 8007cec:	d046      	beq.n	8007d7c <HAL_TIM_PWM_Start+0x178>
 8007cee:	683b      	ldr	r3, [r7, #0]
 8007cf0:	2b08      	cmp	r3, #8
 8007cf2:	d043      	beq.n	8007d7c <HAL_TIM_PWM_Start+0x178>
 8007cf4:	683b      	ldr	r3, [r7, #0]
 8007cf6:	2b0c      	cmp	r3, #12
 8007cf8:	d040      	beq.n	8007d7c <HAL_TIM_PWM_Start+0x178>
 8007cfa:	683b      	ldr	r3, [r7, #0]
 8007cfc:	2b10      	cmp	r3, #16
 8007cfe:	d03d      	beq.n	8007d7c <HAL_TIM_PWM_Start+0x178>
 8007d00:	683b      	ldr	r3, [r7, #0]
 8007d02:	2b14      	cmp	r3, #20
 8007d04:	d03a      	beq.n	8007d7c <HAL_TIM_PWM_Start+0x178>
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	4a50      	ldr	r2, [pc, #320]	; (8007e4c <HAL_TIM_PWM_Start+0x248>)
 8007d0c:	4293      	cmp	r3, r2
 8007d0e:	d105      	bne.n	8007d1c <HAL_TIM_PWM_Start+0x118>
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d032      	beq.n	8007d7c <HAL_TIM_PWM_Start+0x178>
 8007d16:	683b      	ldr	r3, [r7, #0]
 8007d18:	2b04      	cmp	r3, #4
 8007d1a:	d02f      	beq.n	8007d7c <HAL_TIM_PWM_Start+0x178>
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	4a4b      	ldr	r2, [pc, #300]	; (8007e50 <HAL_TIM_PWM_Start+0x24c>)
 8007d22:	4293      	cmp	r3, r2
 8007d24:	d102      	bne.n	8007d2c <HAL_TIM_PWM_Start+0x128>
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d027      	beq.n	8007d7c <HAL_TIM_PWM_Start+0x178>
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	4a48      	ldr	r2, [pc, #288]	; (8007e54 <HAL_TIM_PWM_Start+0x250>)
 8007d32:	4293      	cmp	r3, r2
 8007d34:	d102      	bne.n	8007d3c <HAL_TIM_PWM_Start+0x138>
 8007d36:	683b      	ldr	r3, [r7, #0]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d01f      	beq.n	8007d7c <HAL_TIM_PWM_Start+0x178>
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	4a45      	ldr	r2, [pc, #276]	; (8007e58 <HAL_TIM_PWM_Start+0x254>)
 8007d42:	4293      	cmp	r3, r2
 8007d44:	d105      	bne.n	8007d52 <HAL_TIM_PWM_Start+0x14e>
 8007d46:	683b      	ldr	r3, [r7, #0]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d017      	beq.n	8007d7c <HAL_TIM_PWM_Start+0x178>
 8007d4c:	683b      	ldr	r3, [r7, #0]
 8007d4e:	2b04      	cmp	r3, #4
 8007d50:	d014      	beq.n	8007d7c <HAL_TIM_PWM_Start+0x178>
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	4a41      	ldr	r2, [pc, #260]	; (8007e5c <HAL_TIM_PWM_Start+0x258>)
 8007d58:	4293      	cmp	r3, r2
 8007d5a:	d102      	bne.n	8007d62 <HAL_TIM_PWM_Start+0x15e>
 8007d5c:	683b      	ldr	r3, [r7, #0]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d00c      	beq.n	8007d7c <HAL_TIM_PWM_Start+0x178>
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	4a3e      	ldr	r2, [pc, #248]	; (8007e60 <HAL_TIM_PWM_Start+0x25c>)
 8007d68:	4293      	cmp	r3, r2
 8007d6a:	d102      	bne.n	8007d72 <HAL_TIM_PWM_Start+0x16e>
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d004      	beq.n	8007d7c <HAL_TIM_PWM_Start+0x178>
 8007d72:	f240 51bc 	movw	r1, #1468	; 0x5bc
 8007d76:	483b      	ldr	r0, [pc, #236]	; (8007e64 <HAL_TIM_PWM_Start+0x260>)
 8007d78:	f7fa fe87 	bl	8002a8a <assert_failed>

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d109      	bne.n	8007d96 <HAL_TIM_PWM_Start+0x192>
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007d88:	b2db      	uxtb	r3, r3
 8007d8a:	2b01      	cmp	r3, #1
 8007d8c:	bf14      	ite	ne
 8007d8e:	2301      	movne	r3, #1
 8007d90:	2300      	moveq	r3, #0
 8007d92:	b2db      	uxtb	r3, r3
 8007d94:	e03c      	b.n	8007e10 <HAL_TIM_PWM_Start+0x20c>
 8007d96:	683b      	ldr	r3, [r7, #0]
 8007d98:	2b04      	cmp	r3, #4
 8007d9a:	d109      	bne.n	8007db0 <HAL_TIM_PWM_Start+0x1ac>
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007da2:	b2db      	uxtb	r3, r3
 8007da4:	2b01      	cmp	r3, #1
 8007da6:	bf14      	ite	ne
 8007da8:	2301      	movne	r3, #1
 8007daa:	2300      	moveq	r3, #0
 8007dac:	b2db      	uxtb	r3, r3
 8007dae:	e02f      	b.n	8007e10 <HAL_TIM_PWM_Start+0x20c>
 8007db0:	683b      	ldr	r3, [r7, #0]
 8007db2:	2b08      	cmp	r3, #8
 8007db4:	d109      	bne.n	8007dca <HAL_TIM_PWM_Start+0x1c6>
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007dbc:	b2db      	uxtb	r3, r3
 8007dbe:	2b01      	cmp	r3, #1
 8007dc0:	bf14      	ite	ne
 8007dc2:	2301      	movne	r3, #1
 8007dc4:	2300      	moveq	r3, #0
 8007dc6:	b2db      	uxtb	r3, r3
 8007dc8:	e022      	b.n	8007e10 <HAL_TIM_PWM_Start+0x20c>
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	2b0c      	cmp	r3, #12
 8007dce:	d109      	bne.n	8007de4 <HAL_TIM_PWM_Start+0x1e0>
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007dd6:	b2db      	uxtb	r3, r3
 8007dd8:	2b01      	cmp	r3, #1
 8007dda:	bf14      	ite	ne
 8007ddc:	2301      	movne	r3, #1
 8007dde:	2300      	moveq	r3, #0
 8007de0:	b2db      	uxtb	r3, r3
 8007de2:	e015      	b.n	8007e10 <HAL_TIM_PWM_Start+0x20c>
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	2b10      	cmp	r3, #16
 8007de8:	d109      	bne.n	8007dfe <HAL_TIM_PWM_Start+0x1fa>
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007df0:	b2db      	uxtb	r3, r3
 8007df2:	2b01      	cmp	r3, #1
 8007df4:	bf14      	ite	ne
 8007df6:	2301      	movne	r3, #1
 8007df8:	2300      	moveq	r3, #0
 8007dfa:	b2db      	uxtb	r3, r3
 8007dfc:	e008      	b.n	8007e10 <HAL_TIM_PWM_Start+0x20c>
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007e04:	b2db      	uxtb	r3, r3
 8007e06:	2b01      	cmp	r3, #1
 8007e08:	bf14      	ite	ne
 8007e0a:	2301      	movne	r3, #1
 8007e0c:	2300      	moveq	r3, #0
 8007e0e:	b2db      	uxtb	r3, r3
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d001      	beq.n	8007e18 <HAL_TIM_PWM_Start+0x214>
  {
    return HAL_ERROR;
 8007e14:	2301      	movs	r3, #1
 8007e16:	e0aa      	b.n	8007f6e <HAL_TIM_PWM_Start+0x36a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007e18:	683b      	ldr	r3, [r7, #0]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d104      	bne.n	8007e28 <HAL_TIM_PWM_Start+0x224>
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2202      	movs	r2, #2
 8007e22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007e26:	e03b      	b.n	8007ea0 <HAL_TIM_PWM_Start+0x29c>
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	2b04      	cmp	r3, #4
 8007e2c:	d11c      	bne.n	8007e68 <HAL_TIM_PWM_Start+0x264>
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	2202      	movs	r2, #2
 8007e32:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007e36:	e033      	b.n	8007ea0 <HAL_TIM_PWM_Start+0x29c>
 8007e38:	40010000 	.word	0x40010000
 8007e3c:	40000400 	.word	0x40000400
 8007e40:	40000800 	.word	0x40000800
 8007e44:	40000c00 	.word	0x40000c00
 8007e48:	40010400 	.word	0x40010400
 8007e4c:	40014000 	.word	0x40014000
 8007e50:	40014400 	.word	0x40014400
 8007e54:	40014800 	.word	0x40014800
 8007e58:	40001800 	.word	0x40001800
 8007e5c:	40001c00 	.word	0x40001c00
 8007e60:	40002000 	.word	0x40002000
 8007e64:	080167e4 	.word	0x080167e4
 8007e68:	683b      	ldr	r3, [r7, #0]
 8007e6a:	2b08      	cmp	r3, #8
 8007e6c:	d104      	bne.n	8007e78 <HAL_TIM_PWM_Start+0x274>
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	2202      	movs	r2, #2
 8007e72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007e76:	e013      	b.n	8007ea0 <HAL_TIM_PWM_Start+0x29c>
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	2b0c      	cmp	r3, #12
 8007e7c:	d104      	bne.n	8007e88 <HAL_TIM_PWM_Start+0x284>
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	2202      	movs	r2, #2
 8007e82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007e86:	e00b      	b.n	8007ea0 <HAL_TIM_PWM_Start+0x29c>
 8007e88:	683b      	ldr	r3, [r7, #0]
 8007e8a:	2b10      	cmp	r3, #16
 8007e8c:	d104      	bne.n	8007e98 <HAL_TIM_PWM_Start+0x294>
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	2202      	movs	r2, #2
 8007e92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007e96:	e003      	b.n	8007ea0 <HAL_TIM_PWM_Start+0x29c>
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2202      	movs	r2, #2
 8007e9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	2201      	movs	r2, #1
 8007ea6:	6839      	ldr	r1, [r7, #0]
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	f001 fba3 	bl	80095f4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	4a31      	ldr	r2, [pc, #196]	; (8007f78 <HAL_TIM_PWM_Start+0x374>)
 8007eb4:	4293      	cmp	r3, r2
 8007eb6:	d004      	beq.n	8007ec2 <HAL_TIM_PWM_Start+0x2be>
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	4a2f      	ldr	r2, [pc, #188]	; (8007f7c <HAL_TIM_PWM_Start+0x378>)
 8007ebe:	4293      	cmp	r3, r2
 8007ec0:	d101      	bne.n	8007ec6 <HAL_TIM_PWM_Start+0x2c2>
 8007ec2:	2301      	movs	r3, #1
 8007ec4:	e000      	b.n	8007ec8 <HAL_TIM_PWM_Start+0x2c4>
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d007      	beq.n	8007edc <HAL_TIM_PWM_Start+0x2d8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007eda:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	4a25      	ldr	r2, [pc, #148]	; (8007f78 <HAL_TIM_PWM_Start+0x374>)
 8007ee2:	4293      	cmp	r3, r2
 8007ee4:	d022      	beq.n	8007f2c <HAL_TIM_PWM_Start+0x328>
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007eee:	d01d      	beq.n	8007f2c <HAL_TIM_PWM_Start+0x328>
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	4a22      	ldr	r2, [pc, #136]	; (8007f80 <HAL_TIM_PWM_Start+0x37c>)
 8007ef6:	4293      	cmp	r3, r2
 8007ef8:	d018      	beq.n	8007f2c <HAL_TIM_PWM_Start+0x328>
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	4a21      	ldr	r2, [pc, #132]	; (8007f84 <HAL_TIM_PWM_Start+0x380>)
 8007f00:	4293      	cmp	r3, r2
 8007f02:	d013      	beq.n	8007f2c <HAL_TIM_PWM_Start+0x328>
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	4a1f      	ldr	r2, [pc, #124]	; (8007f88 <HAL_TIM_PWM_Start+0x384>)
 8007f0a:	4293      	cmp	r3, r2
 8007f0c:	d00e      	beq.n	8007f2c <HAL_TIM_PWM_Start+0x328>
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	4a1a      	ldr	r2, [pc, #104]	; (8007f7c <HAL_TIM_PWM_Start+0x378>)
 8007f14:	4293      	cmp	r3, r2
 8007f16:	d009      	beq.n	8007f2c <HAL_TIM_PWM_Start+0x328>
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	4a1b      	ldr	r2, [pc, #108]	; (8007f8c <HAL_TIM_PWM_Start+0x388>)
 8007f1e:	4293      	cmp	r3, r2
 8007f20:	d004      	beq.n	8007f2c <HAL_TIM_PWM_Start+0x328>
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	4a1a      	ldr	r2, [pc, #104]	; (8007f90 <HAL_TIM_PWM_Start+0x38c>)
 8007f28:	4293      	cmp	r3, r2
 8007f2a:	d115      	bne.n	8007f58 <HAL_TIM_PWM_Start+0x354>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	689a      	ldr	r2, [r3, #8]
 8007f32:	4b18      	ldr	r3, [pc, #96]	; (8007f94 <HAL_TIM_PWM_Start+0x390>)
 8007f34:	4013      	ands	r3, r2
 8007f36:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	2b06      	cmp	r3, #6
 8007f3c:	d015      	beq.n	8007f6a <HAL_TIM_PWM_Start+0x366>
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f44:	d011      	beq.n	8007f6a <HAL_TIM_PWM_Start+0x366>
    {
      __HAL_TIM_ENABLE(htim);
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	681a      	ldr	r2, [r3, #0]
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	f042 0201 	orr.w	r2, r2, #1
 8007f54:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f56:	e008      	b.n	8007f6a <HAL_TIM_PWM_Start+0x366>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	681a      	ldr	r2, [r3, #0]
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	f042 0201 	orr.w	r2, r2, #1
 8007f66:	601a      	str	r2, [r3, #0]
 8007f68:	e000      	b.n	8007f6c <HAL_TIM_PWM_Start+0x368>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f6a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007f6c:	2300      	movs	r3, #0
}
 8007f6e:	4618      	mov	r0, r3
 8007f70:	3710      	adds	r7, #16
 8007f72:	46bd      	mov	sp, r7
 8007f74:	bd80      	pop	{r7, pc}
 8007f76:	bf00      	nop
 8007f78:	40010000 	.word	0x40010000
 8007f7c:	40010400 	.word	0x40010400
 8007f80:	40000400 	.word	0x40000400
 8007f84:	40000800 	.word	0x40000800
 8007f88:	40000c00 	.word	0x40000c00
 8007f8c:	40014000 	.word	0x40014000
 8007f90:	40001800 	.word	0x40001800
 8007f94:	00010007 	.word	0x00010007

08007f98 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b082      	sub	sp, #8
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	691b      	ldr	r3, [r3, #16]
 8007fa6:	f003 0302 	and.w	r3, r3, #2
 8007faa:	2b02      	cmp	r3, #2
 8007fac:	d122      	bne.n	8007ff4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	68db      	ldr	r3, [r3, #12]
 8007fb4:	f003 0302 	and.w	r3, r3, #2
 8007fb8:	2b02      	cmp	r3, #2
 8007fba:	d11b      	bne.n	8007ff4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	f06f 0202 	mvn.w	r2, #2
 8007fc4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	2201      	movs	r2, #1
 8007fca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	699b      	ldr	r3, [r3, #24]
 8007fd2:	f003 0303 	and.w	r3, r3, #3
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d003      	beq.n	8007fe2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007fda:	6878      	ldr	r0, [r7, #4]
 8007fdc:	f000 feca 	bl	8008d74 <HAL_TIM_IC_CaptureCallback>
 8007fe0:	e005      	b.n	8007fee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007fe2:	6878      	ldr	r0, [r7, #4]
 8007fe4:	f000 febc 	bl	8008d60 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007fe8:	6878      	ldr	r0, [r7, #4]
 8007fea:	f000 fecd 	bl	8008d88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	2200      	movs	r2, #0
 8007ff2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	691b      	ldr	r3, [r3, #16]
 8007ffa:	f003 0304 	and.w	r3, r3, #4
 8007ffe:	2b04      	cmp	r3, #4
 8008000:	d122      	bne.n	8008048 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	68db      	ldr	r3, [r3, #12]
 8008008:	f003 0304 	and.w	r3, r3, #4
 800800c:	2b04      	cmp	r3, #4
 800800e:	d11b      	bne.n	8008048 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	f06f 0204 	mvn.w	r2, #4
 8008018:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	2202      	movs	r2, #2
 800801e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	699b      	ldr	r3, [r3, #24]
 8008026:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800802a:	2b00      	cmp	r3, #0
 800802c:	d003      	beq.n	8008036 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800802e:	6878      	ldr	r0, [r7, #4]
 8008030:	f000 fea0 	bl	8008d74 <HAL_TIM_IC_CaptureCallback>
 8008034:	e005      	b.n	8008042 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008036:	6878      	ldr	r0, [r7, #4]
 8008038:	f000 fe92 	bl	8008d60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800803c:	6878      	ldr	r0, [r7, #4]
 800803e:	f000 fea3 	bl	8008d88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	2200      	movs	r2, #0
 8008046:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	691b      	ldr	r3, [r3, #16]
 800804e:	f003 0308 	and.w	r3, r3, #8
 8008052:	2b08      	cmp	r3, #8
 8008054:	d122      	bne.n	800809c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	68db      	ldr	r3, [r3, #12]
 800805c:	f003 0308 	and.w	r3, r3, #8
 8008060:	2b08      	cmp	r3, #8
 8008062:	d11b      	bne.n	800809c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	f06f 0208 	mvn.w	r2, #8
 800806c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	2204      	movs	r2, #4
 8008072:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	69db      	ldr	r3, [r3, #28]
 800807a:	f003 0303 	and.w	r3, r3, #3
 800807e:	2b00      	cmp	r3, #0
 8008080:	d003      	beq.n	800808a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008082:	6878      	ldr	r0, [r7, #4]
 8008084:	f000 fe76 	bl	8008d74 <HAL_TIM_IC_CaptureCallback>
 8008088:	e005      	b.n	8008096 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800808a:	6878      	ldr	r0, [r7, #4]
 800808c:	f000 fe68 	bl	8008d60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008090:	6878      	ldr	r0, [r7, #4]
 8008092:	f000 fe79 	bl	8008d88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	2200      	movs	r2, #0
 800809a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	691b      	ldr	r3, [r3, #16]
 80080a2:	f003 0310 	and.w	r3, r3, #16
 80080a6:	2b10      	cmp	r3, #16
 80080a8:	d122      	bne.n	80080f0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	68db      	ldr	r3, [r3, #12]
 80080b0:	f003 0310 	and.w	r3, r3, #16
 80080b4:	2b10      	cmp	r3, #16
 80080b6:	d11b      	bne.n	80080f0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	f06f 0210 	mvn.w	r2, #16
 80080c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	2208      	movs	r2, #8
 80080c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	69db      	ldr	r3, [r3, #28]
 80080ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d003      	beq.n	80080de <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80080d6:	6878      	ldr	r0, [r7, #4]
 80080d8:	f000 fe4c 	bl	8008d74 <HAL_TIM_IC_CaptureCallback>
 80080dc:	e005      	b.n	80080ea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80080de:	6878      	ldr	r0, [r7, #4]
 80080e0:	f000 fe3e 	bl	8008d60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80080e4:	6878      	ldr	r0, [r7, #4]
 80080e6:	f000 fe4f 	bl	8008d88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	2200      	movs	r2, #0
 80080ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	691b      	ldr	r3, [r3, #16]
 80080f6:	f003 0301 	and.w	r3, r3, #1
 80080fa:	2b01      	cmp	r3, #1
 80080fc:	d10e      	bne.n	800811c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	68db      	ldr	r3, [r3, #12]
 8008104:	f003 0301 	and.w	r3, r3, #1
 8008108:	2b01      	cmp	r3, #1
 800810a:	d107      	bne.n	800811c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	f06f 0201 	mvn.w	r2, #1
 8008114:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008116:	6878      	ldr	r0, [r7, #4]
 8008118:	f000 fe18 	bl	8008d4c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	691b      	ldr	r3, [r3, #16]
 8008122:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008126:	2b80      	cmp	r3, #128	; 0x80
 8008128:	d10e      	bne.n	8008148 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	68db      	ldr	r3, [r3, #12]
 8008130:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008134:	2b80      	cmp	r3, #128	; 0x80
 8008136:	d107      	bne.n	8008148 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008140:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008142:	6878      	ldr	r0, [r7, #4]
 8008144:	f001 fc42 	bl	80099cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	691b      	ldr	r3, [r3, #16]
 800814e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008152:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008156:	d10e      	bne.n	8008176 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	68db      	ldr	r3, [r3, #12]
 800815e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008162:	2b80      	cmp	r3, #128	; 0x80
 8008164:	d107      	bne.n	8008176 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800816e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008170:	6878      	ldr	r0, [r7, #4]
 8008172:	f001 fc35 	bl	80099e0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	691b      	ldr	r3, [r3, #16]
 800817c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008180:	2b40      	cmp	r3, #64	; 0x40
 8008182:	d10e      	bne.n	80081a2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	68db      	ldr	r3, [r3, #12]
 800818a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800818e:	2b40      	cmp	r3, #64	; 0x40
 8008190:	d107      	bne.n	80081a2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800819a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800819c:	6878      	ldr	r0, [r7, #4]
 800819e:	f000 fdfd 	bl	8008d9c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	691b      	ldr	r3, [r3, #16]
 80081a8:	f003 0320 	and.w	r3, r3, #32
 80081ac:	2b20      	cmp	r3, #32
 80081ae:	d10e      	bne.n	80081ce <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	68db      	ldr	r3, [r3, #12]
 80081b6:	f003 0320 	and.w	r3, r3, #32
 80081ba:	2b20      	cmp	r3, #32
 80081bc:	d107      	bne.n	80081ce <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	f06f 0220 	mvn.w	r2, #32
 80081c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80081c8:	6878      	ldr	r0, [r7, #4]
 80081ca:	f001 fbf5 	bl	80099b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80081ce:	bf00      	nop
 80081d0:	3708      	adds	r7, #8
 80081d2:	46bd      	mov	sp, r7
 80081d4:	bd80      	pop	{r7, pc}
	...

080081d8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80081d8:	b580      	push	{r7, lr}
 80081da:	b086      	sub	sp, #24
 80081dc:	af00      	add	r7, sp, #0
 80081de:	60f8      	str	r0, [r7, #12]
 80081e0:	60b9      	str	r1, [r7, #8]
 80081e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80081e4:	2300      	movs	r3, #0
 80081e6:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d016      	beq.n	800821c <HAL_TIM_PWM_ConfigChannel+0x44>
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	2b04      	cmp	r3, #4
 80081f2:	d013      	beq.n	800821c <HAL_TIM_PWM_ConfigChannel+0x44>
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2b08      	cmp	r3, #8
 80081f8:	d010      	beq.n	800821c <HAL_TIM_PWM_ConfigChannel+0x44>
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	2b0c      	cmp	r3, #12
 80081fe:	d00d      	beq.n	800821c <HAL_TIM_PWM_ConfigChannel+0x44>
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2b10      	cmp	r3, #16
 8008204:	d00a      	beq.n	800821c <HAL_TIM_PWM_ConfigChannel+0x44>
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	2b14      	cmp	r3, #20
 800820a:	d007      	beq.n	800821c <HAL_TIM_PWM_ConfigChannel+0x44>
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2b3c      	cmp	r3, #60	; 0x3c
 8008210:	d004      	beq.n	800821c <HAL_TIM_PWM_ConfigChannel+0x44>
 8008212:	f241 01af 	movw	r1, #4271	; 0x10af
 8008216:	4895      	ldr	r0, [pc, #596]	; (800846c <HAL_TIM_PWM_ConfigChannel+0x294>)
 8008218:	f7fa fc37 	bl	8002a8a <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 800821c:	68bb      	ldr	r3, [r7, #8]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	2b60      	cmp	r3, #96	; 0x60
 8008222:	d01c      	beq.n	800825e <HAL_TIM_PWM_ConfigChannel+0x86>
 8008224:	68bb      	ldr	r3, [r7, #8]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	2b70      	cmp	r3, #112	; 0x70
 800822a:	d018      	beq.n	800825e <HAL_TIM_PWM_ConfigChannel+0x86>
 800822c:	68bb      	ldr	r3, [r7, #8]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	4a8f      	ldr	r2, [pc, #572]	; (8008470 <HAL_TIM_PWM_ConfigChannel+0x298>)
 8008232:	4293      	cmp	r3, r2
 8008234:	d013      	beq.n	800825e <HAL_TIM_PWM_ConfigChannel+0x86>
 8008236:	68bb      	ldr	r3, [r7, #8]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	4a8e      	ldr	r2, [pc, #568]	; (8008474 <HAL_TIM_PWM_ConfigChannel+0x29c>)
 800823c:	4293      	cmp	r3, r2
 800823e:	d00e      	beq.n	800825e <HAL_TIM_PWM_ConfigChannel+0x86>
 8008240:	68bb      	ldr	r3, [r7, #8]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	4a8c      	ldr	r2, [pc, #560]	; (8008478 <HAL_TIM_PWM_ConfigChannel+0x2a0>)
 8008246:	4293      	cmp	r3, r2
 8008248:	d009      	beq.n	800825e <HAL_TIM_PWM_ConfigChannel+0x86>
 800824a:	68bb      	ldr	r3, [r7, #8]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	4a8b      	ldr	r2, [pc, #556]	; (800847c <HAL_TIM_PWM_ConfigChannel+0x2a4>)
 8008250:	4293      	cmp	r3, r2
 8008252:	d004      	beq.n	800825e <HAL_TIM_PWM_ConfigChannel+0x86>
 8008254:	f241 01b0 	movw	r1, #4272	; 0x10b0
 8008258:	4884      	ldr	r0, [pc, #528]	; (800846c <HAL_TIM_PWM_ConfigChannel+0x294>)
 800825a:	f7fa fc16 	bl	8002a8a <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 800825e:	68bb      	ldr	r3, [r7, #8]
 8008260:	689b      	ldr	r3, [r3, #8]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d008      	beq.n	8008278 <HAL_TIM_PWM_ConfigChannel+0xa0>
 8008266:	68bb      	ldr	r3, [r7, #8]
 8008268:	689b      	ldr	r3, [r3, #8]
 800826a:	2b02      	cmp	r3, #2
 800826c:	d004      	beq.n	8008278 <HAL_TIM_PWM_ConfigChannel+0xa0>
 800826e:	f241 01b1 	movw	r1, #4273	; 0x10b1
 8008272:	487e      	ldr	r0, [pc, #504]	; (800846c <HAL_TIM_PWM_ConfigChannel+0x294>)
 8008274:	f7fa fc09 	bl	8002a8a <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 8008278:	68bb      	ldr	r3, [r7, #8]
 800827a:	691b      	ldr	r3, [r3, #16]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d008      	beq.n	8008292 <HAL_TIM_PWM_ConfigChannel+0xba>
 8008280:	68bb      	ldr	r3, [r7, #8]
 8008282:	691b      	ldr	r3, [r3, #16]
 8008284:	2b04      	cmp	r3, #4
 8008286:	d004      	beq.n	8008292 <HAL_TIM_PWM_ConfigChannel+0xba>
 8008288:	f241 01b2 	movw	r1, #4274	; 0x10b2
 800828c:	4877      	ldr	r0, [pc, #476]	; (800846c <HAL_TIM_PWM_ConfigChannel+0x294>)
 800828e:	f7fa fbfc 	bl	8002a8a <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008298:	2b01      	cmp	r3, #1
 800829a:	d101      	bne.n	80082a0 <HAL_TIM_PWM_ConfigChannel+0xc8>
 800829c:	2302      	movs	r3, #2
 800829e:	e1f3      	b.n	8008688 <HAL_TIM_PWM_ConfigChannel+0x4b0>
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	2201      	movs	r2, #1
 80082a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2b14      	cmp	r3, #20
 80082ac:	f200 81e4 	bhi.w	8008678 <HAL_TIM_PWM_ConfigChannel+0x4a0>
 80082b0:	a201      	add	r2, pc, #4	; (adr r2, 80082b8 <HAL_TIM_PWM_ConfigChannel+0xe0>)
 80082b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082b6:	bf00      	nop
 80082b8:	0800830d 	.word	0x0800830d
 80082bc:	08008679 	.word	0x08008679
 80082c0:	08008679 	.word	0x08008679
 80082c4:	08008679 	.word	0x08008679
 80082c8:	080083cf 	.word	0x080083cf
 80082cc:	08008679 	.word	0x08008679
 80082d0:	08008679 	.word	0x08008679
 80082d4:	08008679 	.word	0x08008679
 80082d8:	080084ad 	.word	0x080084ad
 80082dc:	08008679 	.word	0x08008679
 80082e0:	08008679 	.word	0x08008679
 80082e4:	08008679 	.word	0x08008679
 80082e8:	08008533 	.word	0x08008533
 80082ec:	08008679 	.word	0x08008679
 80082f0:	08008679 	.word	0x08008679
 80082f4:	08008679 	.word	0x08008679
 80082f8:	080085bb 	.word	0x080085bb
 80082fc:	08008679 	.word	0x08008679
 8008300:	08008679 	.word	0x08008679
 8008304:	08008679 	.word	0x08008679
 8008308:	08008619 	.word	0x08008619
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	4a5b      	ldr	r2, [pc, #364]	; (8008480 <HAL_TIM_PWM_ConfigChannel+0x2a8>)
 8008312:	4293      	cmp	r3, r2
 8008314:	d03b      	beq.n	800838e <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800831e:	d036      	beq.n	800838e <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	4a57      	ldr	r2, [pc, #348]	; (8008484 <HAL_TIM_PWM_ConfigChannel+0x2ac>)
 8008326:	4293      	cmp	r3, r2
 8008328:	d031      	beq.n	800838e <HAL_TIM_PWM_ConfigChannel+0x1b6>
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	4a56      	ldr	r2, [pc, #344]	; (8008488 <HAL_TIM_PWM_ConfigChannel+0x2b0>)
 8008330:	4293      	cmp	r3, r2
 8008332:	d02c      	beq.n	800838e <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	4a54      	ldr	r2, [pc, #336]	; (800848c <HAL_TIM_PWM_ConfigChannel+0x2b4>)
 800833a:	4293      	cmp	r3, r2
 800833c:	d027      	beq.n	800838e <HAL_TIM_PWM_ConfigChannel+0x1b6>
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	4a53      	ldr	r2, [pc, #332]	; (8008490 <HAL_TIM_PWM_ConfigChannel+0x2b8>)
 8008344:	4293      	cmp	r3, r2
 8008346:	d022      	beq.n	800838e <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	4a51      	ldr	r2, [pc, #324]	; (8008494 <HAL_TIM_PWM_ConfigChannel+0x2bc>)
 800834e:	4293      	cmp	r3, r2
 8008350:	d01d      	beq.n	800838e <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	4a50      	ldr	r2, [pc, #320]	; (8008498 <HAL_TIM_PWM_ConfigChannel+0x2c0>)
 8008358:	4293      	cmp	r3, r2
 800835a:	d018      	beq.n	800838e <HAL_TIM_PWM_ConfigChannel+0x1b6>
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	4a4e      	ldr	r2, [pc, #312]	; (800849c <HAL_TIM_PWM_ConfigChannel+0x2c4>)
 8008362:	4293      	cmp	r3, r2
 8008364:	d013      	beq.n	800838e <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	4a4d      	ldr	r2, [pc, #308]	; (80084a0 <HAL_TIM_PWM_ConfigChannel+0x2c8>)
 800836c:	4293      	cmp	r3, r2
 800836e:	d00e      	beq.n	800838e <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	4a4b      	ldr	r2, [pc, #300]	; (80084a4 <HAL_TIM_PWM_ConfigChannel+0x2cc>)
 8008376:	4293      	cmp	r3, r2
 8008378:	d009      	beq.n	800838e <HAL_TIM_PWM_ConfigChannel+0x1b6>
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	4a4a      	ldr	r2, [pc, #296]	; (80084a8 <HAL_TIM_PWM_ConfigChannel+0x2d0>)
 8008380:	4293      	cmp	r3, r2
 8008382:	d004      	beq.n	800838e <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8008384:	f241 01bc 	movw	r1, #4284	; 0x10bc
 8008388:	4838      	ldr	r0, [pc, #224]	; (800846c <HAL_TIM_PWM_ConfigChannel+0x294>)
 800838a:	f7fa fb7e 	bl	8002a8a <assert_failed>

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	68b9      	ldr	r1, [r7, #8]
 8008394:	4618      	mov	r0, r3
 8008396:	f000 fdab 	bl	8008ef0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	699a      	ldr	r2, [r3, #24]
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	f042 0208 	orr.w	r2, r2, #8
 80083a8:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	699a      	ldr	r2, [r3, #24]
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	f022 0204 	bic.w	r2, r2, #4
 80083b8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	6999      	ldr	r1, [r3, #24]
 80083c0:	68bb      	ldr	r3, [r7, #8]
 80083c2:	691a      	ldr	r2, [r3, #16]
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	430a      	orrs	r2, r1
 80083ca:	619a      	str	r2, [r3, #24]
      break;
 80083cc:	e157      	b.n	800867e <HAL_TIM_PWM_ConfigChannel+0x4a6>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	4a2b      	ldr	r2, [pc, #172]	; (8008480 <HAL_TIM_PWM_ConfigChannel+0x2a8>)
 80083d4:	4293      	cmp	r3, r2
 80083d6:	d027      	beq.n	8008428 <HAL_TIM_PWM_ConfigChannel+0x250>
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80083e0:	d022      	beq.n	8008428 <HAL_TIM_PWM_ConfigChannel+0x250>
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	4a27      	ldr	r2, [pc, #156]	; (8008484 <HAL_TIM_PWM_ConfigChannel+0x2ac>)
 80083e8:	4293      	cmp	r3, r2
 80083ea:	d01d      	beq.n	8008428 <HAL_TIM_PWM_ConfigChannel+0x250>
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	4a25      	ldr	r2, [pc, #148]	; (8008488 <HAL_TIM_PWM_ConfigChannel+0x2b0>)
 80083f2:	4293      	cmp	r3, r2
 80083f4:	d018      	beq.n	8008428 <HAL_TIM_PWM_ConfigChannel+0x250>
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	4a24      	ldr	r2, [pc, #144]	; (800848c <HAL_TIM_PWM_ConfigChannel+0x2b4>)
 80083fc:	4293      	cmp	r3, r2
 80083fe:	d013      	beq.n	8008428 <HAL_TIM_PWM_ConfigChannel+0x250>
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	4a22      	ldr	r2, [pc, #136]	; (8008490 <HAL_TIM_PWM_ConfigChannel+0x2b8>)
 8008406:	4293      	cmp	r3, r2
 8008408:	d00e      	beq.n	8008428 <HAL_TIM_PWM_ConfigChannel+0x250>
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	4a21      	ldr	r2, [pc, #132]	; (8008494 <HAL_TIM_PWM_ConfigChannel+0x2bc>)
 8008410:	4293      	cmp	r3, r2
 8008412:	d009      	beq.n	8008428 <HAL_TIM_PWM_ConfigChannel+0x250>
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	4a21      	ldr	r2, [pc, #132]	; (80084a0 <HAL_TIM_PWM_ConfigChannel+0x2c8>)
 800841a:	4293      	cmp	r3, r2
 800841c:	d004      	beq.n	8008428 <HAL_TIM_PWM_ConfigChannel+0x250>
 800841e:	f241 01cd 	movw	r1, #4301	; 0x10cd
 8008422:	4812      	ldr	r0, [pc, #72]	; (800846c <HAL_TIM_PWM_ConfigChannel+0x294>)
 8008424:	f7fa fb31 	bl	8002a8a <assert_failed>

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	68b9      	ldr	r1, [r7, #8]
 800842e:	4618      	mov	r0, r3
 8008430:	f000 fdfa 	bl	8009028 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	699a      	ldr	r2, [r3, #24]
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008442:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	699a      	ldr	r2, [r3, #24]
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008452:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	6999      	ldr	r1, [r3, #24]
 800845a:	68bb      	ldr	r3, [r7, #8]
 800845c:	691b      	ldr	r3, [r3, #16]
 800845e:	021a      	lsls	r2, r3, #8
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	430a      	orrs	r2, r1
 8008466:	619a      	str	r2, [r3, #24]
      break;
 8008468:	e109      	b.n	800867e <HAL_TIM_PWM_ConfigChannel+0x4a6>
 800846a:	bf00      	nop
 800846c:	080167e4 	.word	0x080167e4
 8008470:	00010040 	.word	0x00010040
 8008474:	00010050 	.word	0x00010050
 8008478:	00010060 	.word	0x00010060
 800847c:	00010070 	.word	0x00010070
 8008480:	40010000 	.word	0x40010000
 8008484:	40000400 	.word	0x40000400
 8008488:	40000800 	.word	0x40000800
 800848c:	40000c00 	.word	0x40000c00
 8008490:	40010400 	.word	0x40010400
 8008494:	40014000 	.word	0x40014000
 8008498:	40014400 	.word	0x40014400
 800849c:	40014800 	.word	0x40014800
 80084a0:	40001800 	.word	0x40001800
 80084a4:	40001c00 	.word	0x40001c00
 80084a8:	40002000 	.word	0x40002000
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	4a77      	ldr	r2, [pc, #476]	; (8008690 <HAL_TIM_PWM_ConfigChannel+0x4b8>)
 80084b2:	4293      	cmp	r3, r2
 80084b4:	d01d      	beq.n	80084f2 <HAL_TIM_PWM_ConfigChannel+0x31a>
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80084be:	d018      	beq.n	80084f2 <HAL_TIM_PWM_ConfigChannel+0x31a>
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	4a73      	ldr	r2, [pc, #460]	; (8008694 <HAL_TIM_PWM_ConfigChannel+0x4bc>)
 80084c6:	4293      	cmp	r3, r2
 80084c8:	d013      	beq.n	80084f2 <HAL_TIM_PWM_ConfigChannel+0x31a>
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	4a72      	ldr	r2, [pc, #456]	; (8008698 <HAL_TIM_PWM_ConfigChannel+0x4c0>)
 80084d0:	4293      	cmp	r3, r2
 80084d2:	d00e      	beq.n	80084f2 <HAL_TIM_PWM_ConfigChannel+0x31a>
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	4a70      	ldr	r2, [pc, #448]	; (800869c <HAL_TIM_PWM_ConfigChannel+0x4c4>)
 80084da:	4293      	cmp	r3, r2
 80084dc:	d009      	beq.n	80084f2 <HAL_TIM_PWM_ConfigChannel+0x31a>
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	4a6f      	ldr	r2, [pc, #444]	; (80086a0 <HAL_TIM_PWM_ConfigChannel+0x4c8>)
 80084e4:	4293      	cmp	r3, r2
 80084e6:	d004      	beq.n	80084f2 <HAL_TIM_PWM_ConfigChannel+0x31a>
 80084e8:	f241 01de 	movw	r1, #4318	; 0x10de
 80084ec:	486d      	ldr	r0, [pc, #436]	; (80086a4 <HAL_TIM_PWM_ConfigChannel+0x4cc>)
 80084ee:	f7fa facc 	bl	8002a8a <assert_failed>

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	68b9      	ldr	r1, [r7, #8]
 80084f8:	4618      	mov	r0, r3
 80084fa:	f000 fe35 	bl	8009168 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	69da      	ldr	r2, [r3, #28]
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	f042 0208 	orr.w	r2, r2, #8
 800850c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	69da      	ldr	r2, [r3, #28]
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	f022 0204 	bic.w	r2, r2, #4
 800851c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	69d9      	ldr	r1, [r3, #28]
 8008524:	68bb      	ldr	r3, [r7, #8]
 8008526:	691a      	ldr	r2, [r3, #16]
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	430a      	orrs	r2, r1
 800852e:	61da      	str	r2, [r3, #28]
      break;
 8008530:	e0a5      	b.n	800867e <HAL_TIM_PWM_ConfigChannel+0x4a6>
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	4a56      	ldr	r2, [pc, #344]	; (8008690 <HAL_TIM_PWM_ConfigChannel+0x4b8>)
 8008538:	4293      	cmp	r3, r2
 800853a:	d01d      	beq.n	8008578 <HAL_TIM_PWM_ConfigChannel+0x3a0>
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008544:	d018      	beq.n	8008578 <HAL_TIM_PWM_ConfigChannel+0x3a0>
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	4a52      	ldr	r2, [pc, #328]	; (8008694 <HAL_TIM_PWM_ConfigChannel+0x4bc>)
 800854c:	4293      	cmp	r3, r2
 800854e:	d013      	beq.n	8008578 <HAL_TIM_PWM_ConfigChannel+0x3a0>
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	4a50      	ldr	r2, [pc, #320]	; (8008698 <HAL_TIM_PWM_ConfigChannel+0x4c0>)
 8008556:	4293      	cmp	r3, r2
 8008558:	d00e      	beq.n	8008578 <HAL_TIM_PWM_ConfigChannel+0x3a0>
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	4a4f      	ldr	r2, [pc, #316]	; (800869c <HAL_TIM_PWM_ConfigChannel+0x4c4>)
 8008560:	4293      	cmp	r3, r2
 8008562:	d009      	beq.n	8008578 <HAL_TIM_PWM_ConfigChannel+0x3a0>
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	4a4d      	ldr	r2, [pc, #308]	; (80086a0 <HAL_TIM_PWM_ConfigChannel+0x4c8>)
 800856a:	4293      	cmp	r3, r2
 800856c:	d004      	beq.n	8008578 <HAL_TIM_PWM_ConfigChannel+0x3a0>
 800856e:	f241 01ef 	movw	r1, #4335	; 0x10ef
 8008572:	484c      	ldr	r0, [pc, #304]	; (80086a4 <HAL_TIM_PWM_ConfigChannel+0x4cc>)
 8008574:	f7fa fa89 	bl	8002a8a <assert_failed>

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	68b9      	ldr	r1, [r7, #8]
 800857e:	4618      	mov	r0, r3
 8008580:	f000 fe92 	bl	80092a8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	69da      	ldr	r2, [r3, #28]
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008592:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	69da      	ldr	r2, [r3, #28]
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80085a2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	69d9      	ldr	r1, [r3, #28]
 80085aa:	68bb      	ldr	r3, [r7, #8]
 80085ac:	691b      	ldr	r3, [r3, #16]
 80085ae:	021a      	lsls	r2, r3, #8
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	430a      	orrs	r2, r1
 80085b6:	61da      	str	r2, [r3, #28]
      break;
 80085b8:	e061      	b.n	800867e <HAL_TIM_PWM_ConfigChannel+0x4a6>
    }

    case TIM_CHANNEL_5:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	4a34      	ldr	r2, [pc, #208]	; (8008690 <HAL_TIM_PWM_ConfigChannel+0x4b8>)
 80085c0:	4293      	cmp	r3, r2
 80085c2:	d009      	beq.n	80085d8 <HAL_TIM_PWM_ConfigChannel+0x400>
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	4a35      	ldr	r2, [pc, #212]	; (80086a0 <HAL_TIM_PWM_ConfigChannel+0x4c8>)
 80085ca:	4293      	cmp	r3, r2
 80085cc:	d004      	beq.n	80085d8 <HAL_TIM_PWM_ConfigChannel+0x400>
 80085ce:	f44f 5188 	mov.w	r1, #4352	; 0x1100
 80085d2:	4834      	ldr	r0, [pc, #208]	; (80086a4 <HAL_TIM_PWM_ConfigChannel+0x4cc>)
 80085d4:	f7fa fa59 	bl	8002a8a <assert_failed>

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	68b9      	ldr	r1, [r7, #8]
 80085de:	4618      	mov	r0, r3
 80085e0:	f000 fec8 	bl	8009374 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	f042 0208 	orr.w	r2, r2, #8
 80085f2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	f022 0204 	bic.w	r2, r2, #4
 8008602:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800860a:	68bb      	ldr	r3, [r7, #8]
 800860c:	691a      	ldr	r2, [r3, #16]
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	430a      	orrs	r2, r1
 8008614:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008616:	e032      	b.n	800867e <HAL_TIM_PWM_ConfigChannel+0x4a6>
    }

    case TIM_CHANNEL_6:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	4a1c      	ldr	r2, [pc, #112]	; (8008690 <HAL_TIM_PWM_ConfigChannel+0x4b8>)
 800861e:	4293      	cmp	r3, r2
 8008620:	d009      	beq.n	8008636 <HAL_TIM_PWM_ConfigChannel+0x45e>
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	4a1e      	ldr	r2, [pc, #120]	; (80086a0 <HAL_TIM_PWM_ConfigChannel+0x4c8>)
 8008628:	4293      	cmp	r3, r2
 800862a:	d004      	beq.n	8008636 <HAL_TIM_PWM_ConfigChannel+0x45e>
 800862c:	f241 1111 	movw	r1, #4369	; 0x1111
 8008630:	481c      	ldr	r0, [pc, #112]	; (80086a4 <HAL_TIM_PWM_ConfigChannel+0x4cc>)
 8008632:	f7fa fa2a 	bl	8002a8a <assert_failed>

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	68b9      	ldr	r1, [r7, #8]
 800863c:	4618      	mov	r0, r3
 800863e:	f000 feeb 	bl	8009418 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008650:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008660:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008668:	68bb      	ldr	r3, [r7, #8]
 800866a:	691b      	ldr	r3, [r3, #16]
 800866c:	021a      	lsls	r2, r3, #8
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	430a      	orrs	r2, r1
 8008674:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008676:	e002      	b.n	800867e <HAL_TIM_PWM_ConfigChannel+0x4a6>
    }

    default:
      status = HAL_ERROR;
 8008678:	2301      	movs	r3, #1
 800867a:	75fb      	strb	r3, [r7, #23]
      break;
 800867c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	2200      	movs	r2, #0
 8008682:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008686:	7dfb      	ldrb	r3, [r7, #23]
}
 8008688:	4618      	mov	r0, r3
 800868a:	3718      	adds	r7, #24
 800868c:	46bd      	mov	sp, r7
 800868e:	bd80      	pop	{r7, pc}
 8008690:	40010000 	.word	0x40010000
 8008694:	40000400 	.word	0x40000400
 8008698:	40000800 	.word	0x40000800
 800869c:	40000c00 	.word	0x40000c00
 80086a0:	40010400 	.word	0x40010400
 80086a4:	080167e4 	.word	0x080167e4

080086a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80086a8:	b580      	push	{r7, lr}
 80086aa:	b084      	sub	sp, #16
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]
 80086b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80086b2:	2300      	movs	r3, #0
 80086b4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80086bc:	2b01      	cmp	r3, #1
 80086be:	d101      	bne.n	80086c4 <HAL_TIM_ConfigClockSource+0x1c>
 80086c0:	2302      	movs	r3, #2
 80086c2:	e332      	b.n	8008d2a <HAL_TIM_ConfigClockSource+0x682>
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	2201      	movs	r2, #1
 80086c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	2202      	movs	r2, #2
 80086d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 80086d4:	683b      	ldr	r3, [r7, #0]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80086dc:	d029      	beq.n	8008732 <HAL_TIM_ConfigClockSource+0x8a>
 80086de:	683b      	ldr	r3, [r7, #0]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	2b70      	cmp	r3, #112	; 0x70
 80086e4:	d025      	beq.n	8008732 <HAL_TIM_ConfigClockSource+0x8a>
 80086e6:	683b      	ldr	r3, [r7, #0]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80086ee:	d020      	beq.n	8008732 <HAL_TIM_ConfigClockSource+0x8a>
 80086f0:	683b      	ldr	r3, [r7, #0]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	2b40      	cmp	r3, #64	; 0x40
 80086f6:	d01c      	beq.n	8008732 <HAL_TIM_ConfigClockSource+0x8a>
 80086f8:	683b      	ldr	r3, [r7, #0]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	2b50      	cmp	r3, #80	; 0x50
 80086fe:	d018      	beq.n	8008732 <HAL_TIM_ConfigClockSource+0x8a>
 8008700:	683b      	ldr	r3, [r7, #0]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	2b60      	cmp	r3, #96	; 0x60
 8008706:	d014      	beq.n	8008732 <HAL_TIM_ConfigClockSource+0x8a>
 8008708:	683b      	ldr	r3, [r7, #0]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	2b00      	cmp	r3, #0
 800870e:	d010      	beq.n	8008732 <HAL_TIM_ConfigClockSource+0x8a>
 8008710:	683b      	ldr	r3, [r7, #0]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	2b10      	cmp	r3, #16
 8008716:	d00c      	beq.n	8008732 <HAL_TIM_ConfigClockSource+0x8a>
 8008718:	683b      	ldr	r3, [r7, #0]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	2b20      	cmp	r3, #32
 800871e:	d008      	beq.n	8008732 <HAL_TIM_ConfigClockSource+0x8a>
 8008720:	683b      	ldr	r3, [r7, #0]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	2b30      	cmp	r3, #48	; 0x30
 8008726:	d004      	beq.n	8008732 <HAL_TIM_ConfigClockSource+0x8a>
 8008728:	f241 514c 	movw	r1, #5452	; 0x154c
 800872c:	4893      	ldr	r0, [pc, #588]	; (800897c <HAL_TIM_ConfigClockSource+0x2d4>)
 800872e:	f7fa f9ac 	bl	8002a8a <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	689b      	ldr	r3, [r3, #8]
 8008738:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800873a:	68ba      	ldr	r2, [r7, #8]
 800873c:	4b90      	ldr	r3, [pc, #576]	; (8008980 <HAL_TIM_ConfigClockSource+0x2d8>)
 800873e:	4013      	ands	r3, r2
 8008740:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008742:	68bb      	ldr	r3, [r7, #8]
 8008744:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008748:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	68ba      	ldr	r2, [r7, #8]
 8008750:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008752:	683b      	ldr	r3, [r7, #0]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800875a:	f000 812d 	beq.w	80089b8 <HAL_TIM_ConfigClockSource+0x310>
 800875e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008762:	f200 82d5 	bhi.w	8008d10 <HAL_TIM_ConfigClockSource+0x668>
 8008766:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800876a:	d02e      	beq.n	80087ca <HAL_TIM_ConfigClockSource+0x122>
 800876c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008770:	f200 82ce 	bhi.w	8008d10 <HAL_TIM_ConfigClockSource+0x668>
 8008774:	2b70      	cmp	r3, #112	; 0x70
 8008776:	f000 8082 	beq.w	800887e <HAL_TIM_ConfigClockSource+0x1d6>
 800877a:	2b70      	cmp	r3, #112	; 0x70
 800877c:	f200 82c8 	bhi.w	8008d10 <HAL_TIM_ConfigClockSource+0x668>
 8008780:	2b60      	cmp	r3, #96	; 0x60
 8008782:	f000 81e0 	beq.w	8008b46 <HAL_TIM_ConfigClockSource+0x49e>
 8008786:	2b60      	cmp	r3, #96	; 0x60
 8008788:	f200 82c2 	bhi.w	8008d10 <HAL_TIM_ConfigClockSource+0x668>
 800878c:	2b50      	cmp	r3, #80	; 0x50
 800878e:	f000 8184 	beq.w	8008a9a <HAL_TIM_ConfigClockSource+0x3f2>
 8008792:	2b50      	cmp	r3, #80	; 0x50
 8008794:	f200 82bc 	bhi.w	8008d10 <HAL_TIM_ConfigClockSource+0x668>
 8008798:	2b40      	cmp	r3, #64	; 0x40
 800879a:	f000 8237 	beq.w	8008c0c <HAL_TIM_ConfigClockSource+0x564>
 800879e:	2b40      	cmp	r3, #64	; 0x40
 80087a0:	f200 82b6 	bhi.w	8008d10 <HAL_TIM_ConfigClockSource+0x668>
 80087a4:	2b30      	cmp	r3, #48	; 0x30
 80087a6:	f000 8287 	beq.w	8008cb8 <HAL_TIM_ConfigClockSource+0x610>
 80087aa:	2b30      	cmp	r3, #48	; 0x30
 80087ac:	f200 82b0 	bhi.w	8008d10 <HAL_TIM_ConfigClockSource+0x668>
 80087b0:	2b20      	cmp	r3, #32
 80087b2:	f000 8281 	beq.w	8008cb8 <HAL_TIM_ConfigClockSource+0x610>
 80087b6:	2b20      	cmp	r3, #32
 80087b8:	f200 82aa 	bhi.w	8008d10 <HAL_TIM_ConfigClockSource+0x668>
 80087bc:	2b00      	cmp	r3, #0
 80087be:	f000 827b 	beq.w	8008cb8 <HAL_TIM_ConfigClockSource+0x610>
 80087c2:	2b10      	cmp	r3, #16
 80087c4:	f000 8278 	beq.w	8008cb8 <HAL_TIM_ConfigClockSource+0x610>
 80087c8:	e2a2      	b.n	8008d10 <HAL_TIM_ConfigClockSource+0x668>
  {
    case TIM_CLOCKSOURCE_INTERNAL:
    {
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	4a6d      	ldr	r2, [pc, #436]	; (8008984 <HAL_TIM_ConfigClockSource+0x2dc>)
 80087d0:	4293      	cmp	r3, r2
 80087d2:	f000 82a0 	beq.w	8008d16 <HAL_TIM_ConfigClockSource+0x66e>
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087de:	f000 829a 	beq.w	8008d16 <HAL_TIM_ConfigClockSource+0x66e>
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	4a68      	ldr	r2, [pc, #416]	; (8008988 <HAL_TIM_ConfigClockSource+0x2e0>)
 80087e8:	4293      	cmp	r3, r2
 80087ea:	f000 8294 	beq.w	8008d16 <HAL_TIM_ConfigClockSource+0x66e>
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	4a66      	ldr	r2, [pc, #408]	; (800898c <HAL_TIM_ConfigClockSource+0x2e4>)
 80087f4:	4293      	cmp	r3, r2
 80087f6:	f000 828e 	beq.w	8008d16 <HAL_TIM_ConfigClockSource+0x66e>
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	4a64      	ldr	r2, [pc, #400]	; (8008990 <HAL_TIM_ConfigClockSource+0x2e8>)
 8008800:	4293      	cmp	r3, r2
 8008802:	f000 8288 	beq.w	8008d16 <HAL_TIM_ConfigClockSource+0x66e>
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	4a62      	ldr	r2, [pc, #392]	; (8008994 <HAL_TIM_ConfigClockSource+0x2ec>)
 800880c:	4293      	cmp	r3, r2
 800880e:	f000 8282 	beq.w	8008d16 <HAL_TIM_ConfigClockSource+0x66e>
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	4a60      	ldr	r2, [pc, #384]	; (8008998 <HAL_TIM_ConfigClockSource+0x2f0>)
 8008818:	4293      	cmp	r3, r2
 800881a:	f000 827c 	beq.w	8008d16 <HAL_TIM_ConfigClockSource+0x66e>
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	4a5e      	ldr	r2, [pc, #376]	; (800899c <HAL_TIM_ConfigClockSource+0x2f4>)
 8008824:	4293      	cmp	r3, r2
 8008826:	f000 8276 	beq.w	8008d16 <HAL_TIM_ConfigClockSource+0x66e>
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	4a5c      	ldr	r2, [pc, #368]	; (80089a0 <HAL_TIM_ConfigClockSource+0x2f8>)
 8008830:	4293      	cmp	r3, r2
 8008832:	f000 8270 	beq.w	8008d16 <HAL_TIM_ConfigClockSource+0x66e>
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	4a5a      	ldr	r2, [pc, #360]	; (80089a4 <HAL_TIM_ConfigClockSource+0x2fc>)
 800883c:	4293      	cmp	r3, r2
 800883e:	f000 826a 	beq.w	8008d16 <HAL_TIM_ConfigClockSource+0x66e>
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	4a58      	ldr	r2, [pc, #352]	; (80089a8 <HAL_TIM_ConfigClockSource+0x300>)
 8008848:	4293      	cmp	r3, r2
 800884a:	f000 8264 	beq.w	8008d16 <HAL_TIM_ConfigClockSource+0x66e>
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	4a56      	ldr	r2, [pc, #344]	; (80089ac <HAL_TIM_ConfigClockSource+0x304>)
 8008854:	4293      	cmp	r3, r2
 8008856:	f000 825e 	beq.w	8008d16 <HAL_TIM_ConfigClockSource+0x66e>
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	4a54      	ldr	r2, [pc, #336]	; (80089b0 <HAL_TIM_ConfigClockSource+0x308>)
 8008860:	4293      	cmp	r3, r2
 8008862:	f000 8258 	beq.w	8008d16 <HAL_TIM_ConfigClockSource+0x66e>
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	4a52      	ldr	r2, [pc, #328]	; (80089b4 <HAL_TIM_ConfigClockSource+0x30c>)
 800886c:	4293      	cmp	r3, r2
 800886e:	f000 8252 	beq.w	8008d16 <HAL_TIM_ConfigClockSource+0x66e>
 8008872:	f241 5158 	movw	r1, #5464	; 0x1558
 8008876:	4841      	ldr	r0, [pc, #260]	; (800897c <HAL_TIM_ConfigClockSource+0x2d4>)
 8008878:	f7fa f907 	bl	8002a8a <assert_failed>
      break;
 800887c:	e24b      	b.n	8008d16 <HAL_TIM_ConfigClockSource+0x66e>
    }

    case TIM_CLOCKSOURCE_ETRMODE1:
    {
      /* Check whether or not the timer instance supports external trigger input mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	4a40      	ldr	r2, [pc, #256]	; (8008984 <HAL_TIM_ConfigClockSource+0x2dc>)
 8008884:	4293      	cmp	r3, r2
 8008886:	d027      	beq.n	80088d8 <HAL_TIM_ConfigClockSource+0x230>
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008890:	d022      	beq.n	80088d8 <HAL_TIM_ConfigClockSource+0x230>
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	4a3c      	ldr	r2, [pc, #240]	; (8008988 <HAL_TIM_ConfigClockSource+0x2e0>)
 8008898:	4293      	cmp	r3, r2
 800889a:	d01d      	beq.n	80088d8 <HAL_TIM_ConfigClockSource+0x230>
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	4a3a      	ldr	r2, [pc, #232]	; (800898c <HAL_TIM_ConfigClockSource+0x2e4>)
 80088a2:	4293      	cmp	r3, r2
 80088a4:	d018      	beq.n	80088d8 <HAL_TIM_ConfigClockSource+0x230>
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	4a39      	ldr	r2, [pc, #228]	; (8008990 <HAL_TIM_ConfigClockSource+0x2e8>)
 80088ac:	4293      	cmp	r3, r2
 80088ae:	d013      	beq.n	80088d8 <HAL_TIM_ConfigClockSource+0x230>
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	4a39      	ldr	r2, [pc, #228]	; (800899c <HAL_TIM_ConfigClockSource+0x2f4>)
 80088b6:	4293      	cmp	r3, r2
 80088b8:	d00e      	beq.n	80088d8 <HAL_TIM_ConfigClockSource+0x230>
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	4a38      	ldr	r2, [pc, #224]	; (80089a0 <HAL_TIM_ConfigClockSource+0x2f8>)
 80088c0:	4293      	cmp	r3, r2
 80088c2:	d009      	beq.n	80088d8 <HAL_TIM_ConfigClockSource+0x230>
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	4a38      	ldr	r2, [pc, #224]	; (80089ac <HAL_TIM_ConfigClockSource+0x304>)
 80088ca:	4293      	cmp	r3, r2
 80088cc:	d004      	beq.n	80088d8 <HAL_TIM_ConfigClockSource+0x230>
 80088ce:	f241 515f 	movw	r1, #5471	; 0x155f
 80088d2:	482a      	ldr	r0, [pc, #168]	; (800897c <HAL_TIM_ConfigClockSource+0x2d4>)
 80088d4:	f7fa f8d9 	bl	8002a8a <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 80088d8:	683b      	ldr	r3, [r7, #0]
 80088da:	689b      	ldr	r3, [r3, #8]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d013      	beq.n	8008908 <HAL_TIM_ConfigClockSource+0x260>
 80088e0:	683b      	ldr	r3, [r7, #0]
 80088e2:	689b      	ldr	r3, [r3, #8]
 80088e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80088e8:	d00e      	beq.n	8008908 <HAL_TIM_ConfigClockSource+0x260>
 80088ea:	683b      	ldr	r3, [r7, #0]
 80088ec:	689b      	ldr	r3, [r3, #8]
 80088ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80088f2:	d009      	beq.n	8008908 <HAL_TIM_ConfigClockSource+0x260>
 80088f4:	683b      	ldr	r3, [r7, #0]
 80088f6:	689b      	ldr	r3, [r3, #8]
 80088f8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80088fc:	d004      	beq.n	8008908 <HAL_TIM_ConfigClockSource+0x260>
 80088fe:	f241 5162 	movw	r1, #5474	; 0x1562
 8008902:	481e      	ldr	r0, [pc, #120]	; (800897c <HAL_TIM_ConfigClockSource+0x2d4>)
 8008904:	f7fa f8c1 	bl	8002a8a <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8008908:	683b      	ldr	r3, [r7, #0]
 800890a:	685b      	ldr	r3, [r3, #4]
 800890c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008910:	d014      	beq.n	800893c <HAL_TIM_ConfigClockSource+0x294>
 8008912:	683b      	ldr	r3, [r7, #0]
 8008914:	685b      	ldr	r3, [r3, #4]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d010      	beq.n	800893c <HAL_TIM_ConfigClockSource+0x294>
 800891a:	683b      	ldr	r3, [r7, #0]
 800891c:	685b      	ldr	r3, [r3, #4]
 800891e:	2b00      	cmp	r3, #0
 8008920:	d00c      	beq.n	800893c <HAL_TIM_ConfigClockSource+0x294>
 8008922:	683b      	ldr	r3, [r7, #0]
 8008924:	685b      	ldr	r3, [r3, #4]
 8008926:	2b02      	cmp	r3, #2
 8008928:	d008      	beq.n	800893c <HAL_TIM_ConfigClockSource+0x294>
 800892a:	683b      	ldr	r3, [r7, #0]
 800892c:	685b      	ldr	r3, [r3, #4]
 800892e:	2b0a      	cmp	r3, #10
 8008930:	d004      	beq.n	800893c <HAL_TIM_ConfigClockSource+0x294>
 8008932:	f241 5163 	movw	r1, #5475	; 0x1563
 8008936:	4811      	ldr	r0, [pc, #68]	; (800897c <HAL_TIM_ConfigClockSource+0x2d4>)
 8008938:	f7fa f8a7 	bl	8002a8a <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800893c:	683b      	ldr	r3, [r7, #0]
 800893e:	68db      	ldr	r3, [r3, #12]
 8008940:	2b0f      	cmp	r3, #15
 8008942:	d904      	bls.n	800894e <HAL_TIM_ConfigClockSource+0x2a6>
 8008944:	f241 5164 	movw	r1, #5476	; 0x1564
 8008948:	480c      	ldr	r0, [pc, #48]	; (800897c <HAL_TIM_ConfigClockSource+0x2d4>)
 800894a:	f7fa f89e 	bl	8002a8a <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	6818      	ldr	r0, [r3, #0]
 8008952:	683b      	ldr	r3, [r7, #0]
 8008954:	6899      	ldr	r1, [r3, #8]
 8008956:	683b      	ldr	r3, [r7, #0]
 8008958:	685a      	ldr	r2, [r3, #4]
 800895a:	683b      	ldr	r3, [r7, #0]
 800895c:	68db      	ldr	r3, [r3, #12]
 800895e:	f000 fe29 	bl	80095b4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	689b      	ldr	r3, [r3, #8]
 8008968:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800896a:	68bb      	ldr	r3, [r7, #8]
 800896c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008970:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	68ba      	ldr	r2, [r7, #8]
 8008978:	609a      	str	r2, [r3, #8]
      break;
 800897a:	e1cd      	b.n	8008d18 <HAL_TIM_ConfigClockSource+0x670>
 800897c:	080167e4 	.word	0x080167e4
 8008980:	fffeff88 	.word	0xfffeff88
 8008984:	40010000 	.word	0x40010000
 8008988:	40000400 	.word	0x40000400
 800898c:	40000800 	.word	0x40000800
 8008990:	40000c00 	.word	0x40000c00
 8008994:	40001000 	.word	0x40001000
 8008998:	40001400 	.word	0x40001400
 800899c:	40010400 	.word	0x40010400
 80089a0:	40014000 	.word	0x40014000
 80089a4:	40014400 	.word	0x40014400
 80089a8:	40014800 	.word	0x40014800
 80089ac:	40001800 	.word	0x40001800
 80089b0:	40001c00 	.word	0x40001c00
 80089b4:	40002000 	.word	0x40002000
    }

    case TIM_CLOCKSOURCE_ETRMODE2:
    {
      /* Check whether or not the timer instance supports external trigger input mode 2 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	4a8d      	ldr	r2, [pc, #564]	; (8008bf4 <HAL_TIM_ConfigClockSource+0x54c>)
 80089be:	4293      	cmp	r3, r2
 80089c0:	d01d      	beq.n	80089fe <HAL_TIM_ConfigClockSource+0x356>
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80089ca:	d018      	beq.n	80089fe <HAL_TIM_ConfigClockSource+0x356>
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	4a89      	ldr	r2, [pc, #548]	; (8008bf8 <HAL_TIM_ConfigClockSource+0x550>)
 80089d2:	4293      	cmp	r3, r2
 80089d4:	d013      	beq.n	80089fe <HAL_TIM_ConfigClockSource+0x356>
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	4a88      	ldr	r2, [pc, #544]	; (8008bfc <HAL_TIM_ConfigClockSource+0x554>)
 80089dc:	4293      	cmp	r3, r2
 80089de:	d00e      	beq.n	80089fe <HAL_TIM_ConfigClockSource+0x356>
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	4a86      	ldr	r2, [pc, #536]	; (8008c00 <HAL_TIM_ConfigClockSource+0x558>)
 80089e6:	4293      	cmp	r3, r2
 80089e8:	d009      	beq.n	80089fe <HAL_TIM_ConfigClockSource+0x356>
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	4a85      	ldr	r2, [pc, #532]	; (8008c04 <HAL_TIM_ConfigClockSource+0x55c>)
 80089f0:	4293      	cmp	r3, r2
 80089f2:	d004      	beq.n	80089fe <HAL_TIM_ConfigClockSource+0x356>
 80089f4:	f241 5177 	movw	r1, #5495	; 0x1577
 80089f8:	4883      	ldr	r0, [pc, #524]	; (8008c08 <HAL_TIM_ConfigClockSource+0x560>)
 80089fa:	f7fa f846 	bl	8002a8a <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 80089fe:	683b      	ldr	r3, [r7, #0]
 8008a00:	689b      	ldr	r3, [r3, #8]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d013      	beq.n	8008a2e <HAL_TIM_ConfigClockSource+0x386>
 8008a06:	683b      	ldr	r3, [r7, #0]
 8008a08:	689b      	ldr	r3, [r3, #8]
 8008a0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a0e:	d00e      	beq.n	8008a2e <HAL_TIM_ConfigClockSource+0x386>
 8008a10:	683b      	ldr	r3, [r7, #0]
 8008a12:	689b      	ldr	r3, [r3, #8]
 8008a14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008a18:	d009      	beq.n	8008a2e <HAL_TIM_ConfigClockSource+0x386>
 8008a1a:	683b      	ldr	r3, [r7, #0]
 8008a1c:	689b      	ldr	r3, [r3, #8]
 8008a1e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008a22:	d004      	beq.n	8008a2e <HAL_TIM_ConfigClockSource+0x386>
 8008a24:	f241 517a 	movw	r1, #5498	; 0x157a
 8008a28:	4877      	ldr	r0, [pc, #476]	; (8008c08 <HAL_TIM_ConfigClockSource+0x560>)
 8008a2a:	f7fa f82e 	bl	8002a8a <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8008a2e:	683b      	ldr	r3, [r7, #0]
 8008a30:	685b      	ldr	r3, [r3, #4]
 8008a32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008a36:	d014      	beq.n	8008a62 <HAL_TIM_ConfigClockSource+0x3ba>
 8008a38:	683b      	ldr	r3, [r7, #0]
 8008a3a:	685b      	ldr	r3, [r3, #4]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d010      	beq.n	8008a62 <HAL_TIM_ConfigClockSource+0x3ba>
 8008a40:	683b      	ldr	r3, [r7, #0]
 8008a42:	685b      	ldr	r3, [r3, #4]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d00c      	beq.n	8008a62 <HAL_TIM_ConfigClockSource+0x3ba>
 8008a48:	683b      	ldr	r3, [r7, #0]
 8008a4a:	685b      	ldr	r3, [r3, #4]
 8008a4c:	2b02      	cmp	r3, #2
 8008a4e:	d008      	beq.n	8008a62 <HAL_TIM_ConfigClockSource+0x3ba>
 8008a50:	683b      	ldr	r3, [r7, #0]
 8008a52:	685b      	ldr	r3, [r3, #4]
 8008a54:	2b0a      	cmp	r3, #10
 8008a56:	d004      	beq.n	8008a62 <HAL_TIM_ConfigClockSource+0x3ba>
 8008a58:	f241 517b 	movw	r1, #5499	; 0x157b
 8008a5c:	486a      	ldr	r0, [pc, #424]	; (8008c08 <HAL_TIM_ConfigClockSource+0x560>)
 8008a5e:	f7fa f814 	bl	8002a8a <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8008a62:	683b      	ldr	r3, [r7, #0]
 8008a64:	68db      	ldr	r3, [r3, #12]
 8008a66:	2b0f      	cmp	r3, #15
 8008a68:	d904      	bls.n	8008a74 <HAL_TIM_ConfigClockSource+0x3cc>
 8008a6a:	f241 517c 	movw	r1, #5500	; 0x157c
 8008a6e:	4866      	ldr	r0, [pc, #408]	; (8008c08 <HAL_TIM_ConfigClockSource+0x560>)
 8008a70:	f7fa f80b 	bl	8002a8a <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	6818      	ldr	r0, [r3, #0]
 8008a78:	683b      	ldr	r3, [r7, #0]
 8008a7a:	6899      	ldr	r1, [r3, #8]
 8008a7c:	683b      	ldr	r3, [r7, #0]
 8008a7e:	685a      	ldr	r2, [r3, #4]
 8008a80:	683b      	ldr	r3, [r7, #0]
 8008a82:	68db      	ldr	r3, [r3, #12]
 8008a84:	f000 fd96 	bl	80095b4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	689a      	ldr	r2, [r3, #8]
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008a96:	609a      	str	r2, [r3, #8]
      break;
 8008a98:	e13e      	b.n	8008d18 <HAL_TIM_ConfigClockSource+0x670>
    }

    case TIM_CLOCKSOURCE_TI1:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	4a55      	ldr	r2, [pc, #340]	; (8008bf4 <HAL_TIM_ConfigClockSource+0x54c>)
 8008aa0:	4293      	cmp	r3, r2
 8008aa2:	d01d      	beq.n	8008ae0 <HAL_TIM_ConfigClockSource+0x438>
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008aac:	d018      	beq.n	8008ae0 <HAL_TIM_ConfigClockSource+0x438>
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	4a51      	ldr	r2, [pc, #324]	; (8008bf8 <HAL_TIM_ConfigClockSource+0x550>)
 8008ab4:	4293      	cmp	r3, r2
 8008ab6:	d013      	beq.n	8008ae0 <HAL_TIM_ConfigClockSource+0x438>
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	4a4f      	ldr	r2, [pc, #316]	; (8008bfc <HAL_TIM_ConfigClockSource+0x554>)
 8008abe:	4293      	cmp	r3, r2
 8008ac0:	d00e      	beq.n	8008ae0 <HAL_TIM_ConfigClockSource+0x438>
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	4a4e      	ldr	r2, [pc, #312]	; (8008c00 <HAL_TIM_ConfigClockSource+0x558>)
 8008ac8:	4293      	cmp	r3, r2
 8008aca:	d009      	beq.n	8008ae0 <HAL_TIM_ConfigClockSource+0x438>
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	4a4c      	ldr	r2, [pc, #304]	; (8008c04 <HAL_TIM_ConfigClockSource+0x55c>)
 8008ad2:	4293      	cmp	r3, r2
 8008ad4:	d004      	beq.n	8008ae0 <HAL_TIM_ConfigClockSource+0x438>
 8008ad6:	f241 518b 	movw	r1, #5515	; 0x158b
 8008ada:	484b      	ldr	r0, [pc, #300]	; (8008c08 <HAL_TIM_ConfigClockSource+0x560>)
 8008adc:	f7f9 ffd5 	bl	8002a8a <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8008ae0:	683b      	ldr	r3, [r7, #0]
 8008ae2:	685b      	ldr	r3, [r3, #4]
 8008ae4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008ae8:	d014      	beq.n	8008b14 <HAL_TIM_ConfigClockSource+0x46c>
 8008aea:	683b      	ldr	r3, [r7, #0]
 8008aec:	685b      	ldr	r3, [r3, #4]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d010      	beq.n	8008b14 <HAL_TIM_ConfigClockSource+0x46c>
 8008af2:	683b      	ldr	r3, [r7, #0]
 8008af4:	685b      	ldr	r3, [r3, #4]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d00c      	beq.n	8008b14 <HAL_TIM_ConfigClockSource+0x46c>
 8008afa:	683b      	ldr	r3, [r7, #0]
 8008afc:	685b      	ldr	r3, [r3, #4]
 8008afe:	2b02      	cmp	r3, #2
 8008b00:	d008      	beq.n	8008b14 <HAL_TIM_ConfigClockSource+0x46c>
 8008b02:	683b      	ldr	r3, [r7, #0]
 8008b04:	685b      	ldr	r3, [r3, #4]
 8008b06:	2b0a      	cmp	r3, #10
 8008b08:	d004      	beq.n	8008b14 <HAL_TIM_ConfigClockSource+0x46c>
 8008b0a:	f241 518e 	movw	r1, #5518	; 0x158e
 8008b0e:	483e      	ldr	r0, [pc, #248]	; (8008c08 <HAL_TIM_ConfigClockSource+0x560>)
 8008b10:	f7f9 ffbb 	bl	8002a8a <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8008b14:	683b      	ldr	r3, [r7, #0]
 8008b16:	68db      	ldr	r3, [r3, #12]
 8008b18:	2b0f      	cmp	r3, #15
 8008b1a:	d904      	bls.n	8008b26 <HAL_TIM_ConfigClockSource+0x47e>
 8008b1c:	f241 518f 	movw	r1, #5519	; 0x158f
 8008b20:	4839      	ldr	r0, [pc, #228]	; (8008c08 <HAL_TIM_ConfigClockSource+0x560>)
 8008b22:	f7f9 ffb2 	bl	8002a8a <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	6818      	ldr	r0, [r3, #0]
 8008b2a:	683b      	ldr	r3, [r7, #0]
 8008b2c:	6859      	ldr	r1, [r3, #4]
 8008b2e:	683b      	ldr	r3, [r7, #0]
 8008b30:	68db      	ldr	r3, [r3, #12]
 8008b32:	461a      	mov	r2, r3
 8008b34:	f000 fcc4 	bl	80094c0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	2150      	movs	r1, #80	; 0x50
 8008b3e:	4618      	mov	r0, r3
 8008b40:	f000 fd1d 	bl	800957e <TIM_ITRx_SetConfig>
      break;
 8008b44:	e0e8      	b.n	8008d18 <HAL_TIM_ConfigClockSource+0x670>
    }

    case TIM_CLOCKSOURCE_TI2:
    {
      /* Check whether or not the timer instance supports external clock mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	4a2a      	ldr	r2, [pc, #168]	; (8008bf4 <HAL_TIM_ConfigClockSource+0x54c>)
 8008b4c:	4293      	cmp	r3, r2
 8008b4e:	d01d      	beq.n	8008b8c <HAL_TIM_ConfigClockSource+0x4e4>
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b58:	d018      	beq.n	8008b8c <HAL_TIM_ConfigClockSource+0x4e4>
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	4a26      	ldr	r2, [pc, #152]	; (8008bf8 <HAL_TIM_ConfigClockSource+0x550>)
 8008b60:	4293      	cmp	r3, r2
 8008b62:	d013      	beq.n	8008b8c <HAL_TIM_ConfigClockSource+0x4e4>
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	4a24      	ldr	r2, [pc, #144]	; (8008bfc <HAL_TIM_ConfigClockSource+0x554>)
 8008b6a:	4293      	cmp	r3, r2
 8008b6c:	d00e      	beq.n	8008b8c <HAL_TIM_ConfigClockSource+0x4e4>
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	4a23      	ldr	r2, [pc, #140]	; (8008c00 <HAL_TIM_ConfigClockSource+0x558>)
 8008b74:	4293      	cmp	r3, r2
 8008b76:	d009      	beq.n	8008b8c <HAL_TIM_ConfigClockSource+0x4e4>
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	4a21      	ldr	r2, [pc, #132]	; (8008c04 <HAL_TIM_ConfigClockSource+0x55c>)
 8008b7e:	4293      	cmp	r3, r2
 8008b80:	d004      	beq.n	8008b8c <HAL_TIM_ConfigClockSource+0x4e4>
 8008b82:	f241 519b 	movw	r1, #5531	; 0x159b
 8008b86:	4820      	ldr	r0, [pc, #128]	; (8008c08 <HAL_TIM_ConfigClockSource+0x560>)
 8008b88:	f7f9 ff7f 	bl	8002a8a <assert_failed>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8008b8c:	683b      	ldr	r3, [r7, #0]
 8008b8e:	685b      	ldr	r3, [r3, #4]
 8008b90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008b94:	d014      	beq.n	8008bc0 <HAL_TIM_ConfigClockSource+0x518>
 8008b96:	683b      	ldr	r3, [r7, #0]
 8008b98:	685b      	ldr	r3, [r3, #4]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d010      	beq.n	8008bc0 <HAL_TIM_ConfigClockSource+0x518>
 8008b9e:	683b      	ldr	r3, [r7, #0]
 8008ba0:	685b      	ldr	r3, [r3, #4]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d00c      	beq.n	8008bc0 <HAL_TIM_ConfigClockSource+0x518>
 8008ba6:	683b      	ldr	r3, [r7, #0]
 8008ba8:	685b      	ldr	r3, [r3, #4]
 8008baa:	2b02      	cmp	r3, #2
 8008bac:	d008      	beq.n	8008bc0 <HAL_TIM_ConfigClockSource+0x518>
 8008bae:	683b      	ldr	r3, [r7, #0]
 8008bb0:	685b      	ldr	r3, [r3, #4]
 8008bb2:	2b0a      	cmp	r3, #10
 8008bb4:	d004      	beq.n	8008bc0 <HAL_TIM_ConfigClockSource+0x518>
 8008bb6:	f241 519e 	movw	r1, #5534	; 0x159e
 8008bba:	4813      	ldr	r0, [pc, #76]	; (8008c08 <HAL_TIM_ConfigClockSource+0x560>)
 8008bbc:	f7f9 ff65 	bl	8002a8a <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8008bc0:	683b      	ldr	r3, [r7, #0]
 8008bc2:	68db      	ldr	r3, [r3, #12]
 8008bc4:	2b0f      	cmp	r3, #15
 8008bc6:	d904      	bls.n	8008bd2 <HAL_TIM_ConfigClockSource+0x52a>
 8008bc8:	f241 519f 	movw	r1, #5535	; 0x159f
 8008bcc:	480e      	ldr	r0, [pc, #56]	; (8008c08 <HAL_TIM_ConfigClockSource+0x560>)
 8008bce:	f7f9 ff5c 	bl	8002a8a <assert_failed>

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	6818      	ldr	r0, [r3, #0]
 8008bd6:	683b      	ldr	r3, [r7, #0]
 8008bd8:	6859      	ldr	r1, [r3, #4]
 8008bda:	683b      	ldr	r3, [r7, #0]
 8008bdc:	68db      	ldr	r3, [r3, #12]
 8008bde:	461a      	mov	r2, r3
 8008be0:	f000 fc9d 	bl	800951e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	2160      	movs	r1, #96	; 0x60
 8008bea:	4618      	mov	r0, r3
 8008bec:	f000 fcc7 	bl	800957e <TIM_ITRx_SetConfig>
      break;
 8008bf0:	e092      	b.n	8008d18 <HAL_TIM_ConfigClockSource+0x670>
 8008bf2:	bf00      	nop
 8008bf4:	40010000 	.word	0x40010000
 8008bf8:	40000400 	.word	0x40000400
 8008bfc:	40000800 	.word	0x40000800
 8008c00:	40000c00 	.word	0x40000c00
 8008c04:	40010400 	.word	0x40010400
 8008c08:	080167e4 	.word	0x080167e4
    }

    case TIM_CLOCKSOURCE_TI1ED:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	4a48      	ldr	r2, [pc, #288]	; (8008d34 <HAL_TIM_ConfigClockSource+0x68c>)
 8008c12:	4293      	cmp	r3, r2
 8008c14:	d01d      	beq.n	8008c52 <HAL_TIM_ConfigClockSource+0x5aa>
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c1e:	d018      	beq.n	8008c52 <HAL_TIM_ConfigClockSource+0x5aa>
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	4a44      	ldr	r2, [pc, #272]	; (8008d38 <HAL_TIM_ConfigClockSource+0x690>)
 8008c26:	4293      	cmp	r3, r2
 8008c28:	d013      	beq.n	8008c52 <HAL_TIM_ConfigClockSource+0x5aa>
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	4a43      	ldr	r2, [pc, #268]	; (8008d3c <HAL_TIM_ConfigClockSource+0x694>)
 8008c30:	4293      	cmp	r3, r2
 8008c32:	d00e      	beq.n	8008c52 <HAL_TIM_ConfigClockSource+0x5aa>
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	4a41      	ldr	r2, [pc, #260]	; (8008d40 <HAL_TIM_ConfigClockSource+0x698>)
 8008c3a:	4293      	cmp	r3, r2
 8008c3c:	d009      	beq.n	8008c52 <HAL_TIM_ConfigClockSource+0x5aa>
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	4a40      	ldr	r2, [pc, #256]	; (8008d44 <HAL_TIM_ConfigClockSource+0x69c>)
 8008c44:	4293      	cmp	r3, r2
 8008c46:	d004      	beq.n	8008c52 <HAL_TIM_ConfigClockSource+0x5aa>
 8008c48:	f241 51ab 	movw	r1, #5547	; 0x15ab
 8008c4c:	483e      	ldr	r0, [pc, #248]	; (8008d48 <HAL_TIM_ConfigClockSource+0x6a0>)
 8008c4e:	f7f9 ff1c 	bl	8002a8a <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8008c52:	683b      	ldr	r3, [r7, #0]
 8008c54:	685b      	ldr	r3, [r3, #4]
 8008c56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008c5a:	d014      	beq.n	8008c86 <HAL_TIM_ConfigClockSource+0x5de>
 8008c5c:	683b      	ldr	r3, [r7, #0]
 8008c5e:	685b      	ldr	r3, [r3, #4]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d010      	beq.n	8008c86 <HAL_TIM_ConfigClockSource+0x5de>
 8008c64:	683b      	ldr	r3, [r7, #0]
 8008c66:	685b      	ldr	r3, [r3, #4]
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d00c      	beq.n	8008c86 <HAL_TIM_ConfigClockSource+0x5de>
 8008c6c:	683b      	ldr	r3, [r7, #0]
 8008c6e:	685b      	ldr	r3, [r3, #4]
 8008c70:	2b02      	cmp	r3, #2
 8008c72:	d008      	beq.n	8008c86 <HAL_TIM_ConfigClockSource+0x5de>
 8008c74:	683b      	ldr	r3, [r7, #0]
 8008c76:	685b      	ldr	r3, [r3, #4]
 8008c78:	2b0a      	cmp	r3, #10
 8008c7a:	d004      	beq.n	8008c86 <HAL_TIM_ConfigClockSource+0x5de>
 8008c7c:	f241 51ae 	movw	r1, #5550	; 0x15ae
 8008c80:	4831      	ldr	r0, [pc, #196]	; (8008d48 <HAL_TIM_ConfigClockSource+0x6a0>)
 8008c82:	f7f9 ff02 	bl	8002a8a <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8008c86:	683b      	ldr	r3, [r7, #0]
 8008c88:	68db      	ldr	r3, [r3, #12]
 8008c8a:	2b0f      	cmp	r3, #15
 8008c8c:	d904      	bls.n	8008c98 <HAL_TIM_ConfigClockSource+0x5f0>
 8008c8e:	f241 51af 	movw	r1, #5551	; 0x15af
 8008c92:	482d      	ldr	r0, [pc, #180]	; (8008d48 <HAL_TIM_ConfigClockSource+0x6a0>)
 8008c94:	f7f9 fef9 	bl	8002a8a <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	6818      	ldr	r0, [r3, #0]
 8008c9c:	683b      	ldr	r3, [r7, #0]
 8008c9e:	6859      	ldr	r1, [r3, #4]
 8008ca0:	683b      	ldr	r3, [r7, #0]
 8008ca2:	68db      	ldr	r3, [r3, #12]
 8008ca4:	461a      	mov	r2, r3
 8008ca6:	f000 fc0b 	bl	80094c0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	2140      	movs	r1, #64	; 0x40
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	f000 fc64 	bl	800957e <TIM_ITRx_SetConfig>
      break;
 8008cb6:	e02f      	b.n	8008d18 <HAL_TIM_ConfigClockSource+0x670>
    case TIM_CLOCKSOURCE_ITR1:
    case TIM_CLOCKSOURCE_ITR2:
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	4a1d      	ldr	r2, [pc, #116]	; (8008d34 <HAL_TIM_ConfigClockSource+0x68c>)
 8008cbe:	4293      	cmp	r3, r2
 8008cc0:	d01d      	beq.n	8008cfe <HAL_TIM_ConfigClockSource+0x656>
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008cca:	d018      	beq.n	8008cfe <HAL_TIM_ConfigClockSource+0x656>
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	4a19      	ldr	r2, [pc, #100]	; (8008d38 <HAL_TIM_ConfigClockSource+0x690>)
 8008cd2:	4293      	cmp	r3, r2
 8008cd4:	d013      	beq.n	8008cfe <HAL_TIM_ConfigClockSource+0x656>
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	4a18      	ldr	r2, [pc, #96]	; (8008d3c <HAL_TIM_ConfigClockSource+0x694>)
 8008cdc:	4293      	cmp	r3, r2
 8008cde:	d00e      	beq.n	8008cfe <HAL_TIM_ConfigClockSource+0x656>
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	4a16      	ldr	r2, [pc, #88]	; (8008d40 <HAL_TIM_ConfigClockSource+0x698>)
 8008ce6:	4293      	cmp	r3, r2
 8008ce8:	d009      	beq.n	8008cfe <HAL_TIM_ConfigClockSource+0x656>
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	4a15      	ldr	r2, [pc, #84]	; (8008d44 <HAL_TIM_ConfigClockSource+0x69c>)
 8008cf0:	4293      	cmp	r3, r2
 8008cf2:	d004      	beq.n	8008cfe <HAL_TIM_ConfigClockSource+0x656>
 8008cf4:	f241 51be 	movw	r1, #5566	; 0x15be
 8008cf8:	4813      	ldr	r0, [pc, #76]	; (8008d48 <HAL_TIM_ConfigClockSource+0x6a0>)
 8008cfa:	f7f9 fec6 	bl	8002a8a <assert_failed>

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681a      	ldr	r2, [r3, #0]
 8008d02:	683b      	ldr	r3, [r7, #0]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	4619      	mov	r1, r3
 8008d08:	4610      	mov	r0, r2
 8008d0a:	f000 fc38 	bl	800957e <TIM_ITRx_SetConfig>
      break;
 8008d0e:	e003      	b.n	8008d18 <HAL_TIM_ConfigClockSource+0x670>
    }

    default:
      status = HAL_ERROR;
 8008d10:	2301      	movs	r3, #1
 8008d12:	73fb      	strb	r3, [r7, #15]
      break;
 8008d14:	e000      	b.n	8008d18 <HAL_TIM_ConfigClockSource+0x670>
      break;
 8008d16:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	2201      	movs	r2, #1
 8008d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	2200      	movs	r2, #0
 8008d24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008d28:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	3710      	adds	r7, #16
 8008d2e:	46bd      	mov	sp, r7
 8008d30:	bd80      	pop	{r7, pc}
 8008d32:	bf00      	nop
 8008d34:	40010000 	.word	0x40010000
 8008d38:	40000400 	.word	0x40000400
 8008d3c:	40000800 	.word	0x40000800
 8008d40:	40000c00 	.word	0x40000c00
 8008d44:	40010400 	.word	0x40010400
 8008d48:	080167e4 	.word	0x080167e4

08008d4c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008d4c:	b480      	push	{r7}
 8008d4e:	b083      	sub	sp, #12
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008d54:	bf00      	nop
 8008d56:	370c      	adds	r7, #12
 8008d58:	46bd      	mov	sp, r7
 8008d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5e:	4770      	bx	lr

08008d60 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008d60:	b480      	push	{r7}
 8008d62:	b083      	sub	sp, #12
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008d68:	bf00      	nop
 8008d6a:	370c      	adds	r7, #12
 8008d6c:	46bd      	mov	sp, r7
 8008d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d72:	4770      	bx	lr

08008d74 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008d74:	b480      	push	{r7}
 8008d76:	b083      	sub	sp, #12
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008d7c:	bf00      	nop
 8008d7e:	370c      	adds	r7, #12
 8008d80:	46bd      	mov	sp, r7
 8008d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d86:	4770      	bx	lr

08008d88 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008d88:	b480      	push	{r7}
 8008d8a:	b083      	sub	sp, #12
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008d90:	bf00      	nop
 8008d92:	370c      	adds	r7, #12
 8008d94:	46bd      	mov	sp, r7
 8008d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9a:	4770      	bx	lr

08008d9c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008d9c:	b480      	push	{r7}
 8008d9e:	b083      	sub	sp, #12
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008da4:	bf00      	nop
 8008da6:	370c      	adds	r7, #12
 8008da8:	46bd      	mov	sp, r7
 8008daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dae:	4770      	bx	lr

08008db0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008db0:	b480      	push	{r7}
 8008db2:	b085      	sub	sp, #20
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]
 8008db8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	4a40      	ldr	r2, [pc, #256]	; (8008ec4 <TIM_Base_SetConfig+0x114>)
 8008dc4:	4293      	cmp	r3, r2
 8008dc6:	d013      	beq.n	8008df0 <TIM_Base_SetConfig+0x40>
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008dce:	d00f      	beq.n	8008df0 <TIM_Base_SetConfig+0x40>
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	4a3d      	ldr	r2, [pc, #244]	; (8008ec8 <TIM_Base_SetConfig+0x118>)
 8008dd4:	4293      	cmp	r3, r2
 8008dd6:	d00b      	beq.n	8008df0 <TIM_Base_SetConfig+0x40>
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	4a3c      	ldr	r2, [pc, #240]	; (8008ecc <TIM_Base_SetConfig+0x11c>)
 8008ddc:	4293      	cmp	r3, r2
 8008dde:	d007      	beq.n	8008df0 <TIM_Base_SetConfig+0x40>
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	4a3b      	ldr	r2, [pc, #236]	; (8008ed0 <TIM_Base_SetConfig+0x120>)
 8008de4:	4293      	cmp	r3, r2
 8008de6:	d003      	beq.n	8008df0 <TIM_Base_SetConfig+0x40>
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	4a3a      	ldr	r2, [pc, #232]	; (8008ed4 <TIM_Base_SetConfig+0x124>)
 8008dec:	4293      	cmp	r3, r2
 8008dee:	d108      	bne.n	8008e02 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008df6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008df8:	683b      	ldr	r3, [r7, #0]
 8008dfa:	685b      	ldr	r3, [r3, #4]
 8008dfc:	68fa      	ldr	r2, [r7, #12]
 8008dfe:	4313      	orrs	r3, r2
 8008e00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	4a2f      	ldr	r2, [pc, #188]	; (8008ec4 <TIM_Base_SetConfig+0x114>)
 8008e06:	4293      	cmp	r3, r2
 8008e08:	d02b      	beq.n	8008e62 <TIM_Base_SetConfig+0xb2>
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e10:	d027      	beq.n	8008e62 <TIM_Base_SetConfig+0xb2>
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	4a2c      	ldr	r2, [pc, #176]	; (8008ec8 <TIM_Base_SetConfig+0x118>)
 8008e16:	4293      	cmp	r3, r2
 8008e18:	d023      	beq.n	8008e62 <TIM_Base_SetConfig+0xb2>
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	4a2b      	ldr	r2, [pc, #172]	; (8008ecc <TIM_Base_SetConfig+0x11c>)
 8008e1e:	4293      	cmp	r3, r2
 8008e20:	d01f      	beq.n	8008e62 <TIM_Base_SetConfig+0xb2>
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	4a2a      	ldr	r2, [pc, #168]	; (8008ed0 <TIM_Base_SetConfig+0x120>)
 8008e26:	4293      	cmp	r3, r2
 8008e28:	d01b      	beq.n	8008e62 <TIM_Base_SetConfig+0xb2>
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	4a29      	ldr	r2, [pc, #164]	; (8008ed4 <TIM_Base_SetConfig+0x124>)
 8008e2e:	4293      	cmp	r3, r2
 8008e30:	d017      	beq.n	8008e62 <TIM_Base_SetConfig+0xb2>
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	4a28      	ldr	r2, [pc, #160]	; (8008ed8 <TIM_Base_SetConfig+0x128>)
 8008e36:	4293      	cmp	r3, r2
 8008e38:	d013      	beq.n	8008e62 <TIM_Base_SetConfig+0xb2>
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	4a27      	ldr	r2, [pc, #156]	; (8008edc <TIM_Base_SetConfig+0x12c>)
 8008e3e:	4293      	cmp	r3, r2
 8008e40:	d00f      	beq.n	8008e62 <TIM_Base_SetConfig+0xb2>
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	4a26      	ldr	r2, [pc, #152]	; (8008ee0 <TIM_Base_SetConfig+0x130>)
 8008e46:	4293      	cmp	r3, r2
 8008e48:	d00b      	beq.n	8008e62 <TIM_Base_SetConfig+0xb2>
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	4a25      	ldr	r2, [pc, #148]	; (8008ee4 <TIM_Base_SetConfig+0x134>)
 8008e4e:	4293      	cmp	r3, r2
 8008e50:	d007      	beq.n	8008e62 <TIM_Base_SetConfig+0xb2>
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	4a24      	ldr	r2, [pc, #144]	; (8008ee8 <TIM_Base_SetConfig+0x138>)
 8008e56:	4293      	cmp	r3, r2
 8008e58:	d003      	beq.n	8008e62 <TIM_Base_SetConfig+0xb2>
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	4a23      	ldr	r2, [pc, #140]	; (8008eec <TIM_Base_SetConfig+0x13c>)
 8008e5e:	4293      	cmp	r3, r2
 8008e60:	d108      	bne.n	8008e74 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008e68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008e6a:	683b      	ldr	r3, [r7, #0]
 8008e6c:	68db      	ldr	r3, [r3, #12]
 8008e6e:	68fa      	ldr	r2, [r7, #12]
 8008e70:	4313      	orrs	r3, r2
 8008e72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008e7a:	683b      	ldr	r3, [r7, #0]
 8008e7c:	695b      	ldr	r3, [r3, #20]
 8008e7e:	4313      	orrs	r3, r2
 8008e80:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	68fa      	ldr	r2, [r7, #12]
 8008e86:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008e88:	683b      	ldr	r3, [r7, #0]
 8008e8a:	689a      	ldr	r2, [r3, #8]
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008e90:	683b      	ldr	r3, [r7, #0]
 8008e92:	681a      	ldr	r2, [r3, #0]
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	4a0a      	ldr	r2, [pc, #40]	; (8008ec4 <TIM_Base_SetConfig+0x114>)
 8008e9c:	4293      	cmp	r3, r2
 8008e9e:	d003      	beq.n	8008ea8 <TIM_Base_SetConfig+0xf8>
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	4a0c      	ldr	r2, [pc, #48]	; (8008ed4 <TIM_Base_SetConfig+0x124>)
 8008ea4:	4293      	cmp	r3, r2
 8008ea6:	d103      	bne.n	8008eb0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008ea8:	683b      	ldr	r3, [r7, #0]
 8008eaa:	691a      	ldr	r2, [r3, #16]
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	2201      	movs	r2, #1
 8008eb4:	615a      	str	r2, [r3, #20]
}
 8008eb6:	bf00      	nop
 8008eb8:	3714      	adds	r7, #20
 8008eba:	46bd      	mov	sp, r7
 8008ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec0:	4770      	bx	lr
 8008ec2:	bf00      	nop
 8008ec4:	40010000 	.word	0x40010000
 8008ec8:	40000400 	.word	0x40000400
 8008ecc:	40000800 	.word	0x40000800
 8008ed0:	40000c00 	.word	0x40000c00
 8008ed4:	40010400 	.word	0x40010400
 8008ed8:	40014000 	.word	0x40014000
 8008edc:	40014400 	.word	0x40014400
 8008ee0:	40014800 	.word	0x40014800
 8008ee4:	40001800 	.word	0x40001800
 8008ee8:	40001c00 	.word	0x40001c00
 8008eec:	40002000 	.word	0x40002000

08008ef0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008ef0:	b580      	push	{r7, lr}
 8008ef2:	b086      	sub	sp, #24
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	6078      	str	r0, [r7, #4]
 8008ef8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	6a1b      	ldr	r3, [r3, #32]
 8008efe:	f023 0201 	bic.w	r2, r3, #1
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	6a1b      	ldr	r3, [r3, #32]
 8008f0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	685b      	ldr	r3, [r3, #4]
 8008f10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	699b      	ldr	r3, [r3, #24]
 8008f16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008f18:	68fa      	ldr	r2, [r7, #12]
 8008f1a:	4b3f      	ldr	r3, [pc, #252]	; (8009018 <TIM_OC1_SetConfig+0x128>)
 8008f1c:	4013      	ands	r3, r2
 8008f1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	f023 0303 	bic.w	r3, r3, #3
 8008f26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008f28:	683b      	ldr	r3, [r7, #0]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	68fa      	ldr	r2, [r7, #12]
 8008f2e:	4313      	orrs	r3, r2
 8008f30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008f32:	697b      	ldr	r3, [r7, #20]
 8008f34:	f023 0302 	bic.w	r3, r3, #2
 8008f38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008f3a:	683b      	ldr	r3, [r7, #0]
 8008f3c:	689b      	ldr	r3, [r3, #8]
 8008f3e:	697a      	ldr	r2, [r7, #20]
 8008f40:	4313      	orrs	r3, r2
 8008f42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	4a35      	ldr	r2, [pc, #212]	; (800901c <TIM_OC1_SetConfig+0x12c>)
 8008f48:	4293      	cmp	r3, r2
 8008f4a:	d003      	beq.n	8008f54 <TIM_OC1_SetConfig+0x64>
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	4a34      	ldr	r2, [pc, #208]	; (8009020 <TIM_OC1_SetConfig+0x130>)
 8008f50:	4293      	cmp	r3, r2
 8008f52:	d119      	bne.n	8008f88 <TIM_OC1_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8008f54:	683b      	ldr	r3, [r7, #0]
 8008f56:	68db      	ldr	r3, [r3, #12]
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d008      	beq.n	8008f6e <TIM_OC1_SetConfig+0x7e>
 8008f5c:	683b      	ldr	r3, [r7, #0]
 8008f5e:	68db      	ldr	r3, [r3, #12]
 8008f60:	2b08      	cmp	r3, #8
 8008f62:	d004      	beq.n	8008f6e <TIM_OC1_SetConfig+0x7e>
 8008f64:	f641 3167 	movw	r1, #7015	; 0x1b67
 8008f68:	482e      	ldr	r0, [pc, #184]	; (8009024 <TIM_OC1_SetConfig+0x134>)
 8008f6a:	f7f9 fd8e 	bl	8002a8a <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008f6e:	697b      	ldr	r3, [r7, #20]
 8008f70:	f023 0308 	bic.w	r3, r3, #8
 8008f74:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008f76:	683b      	ldr	r3, [r7, #0]
 8008f78:	68db      	ldr	r3, [r3, #12]
 8008f7a:	697a      	ldr	r2, [r7, #20]
 8008f7c:	4313      	orrs	r3, r2
 8008f7e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008f80:	697b      	ldr	r3, [r7, #20]
 8008f82:	f023 0304 	bic.w	r3, r3, #4
 8008f86:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	4a24      	ldr	r2, [pc, #144]	; (800901c <TIM_OC1_SetConfig+0x12c>)
 8008f8c:	4293      	cmp	r3, r2
 8008f8e:	d003      	beq.n	8008f98 <TIM_OC1_SetConfig+0xa8>
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	4a23      	ldr	r2, [pc, #140]	; (8009020 <TIM_OC1_SetConfig+0x130>)
 8008f94:	4293      	cmp	r3, r2
 8008f96:	d12d      	bne.n	8008ff4 <TIM_OC1_SetConfig+0x104>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8008f98:	683b      	ldr	r3, [r7, #0]
 8008f9a:	699b      	ldr	r3, [r3, #24]
 8008f9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008fa0:	d008      	beq.n	8008fb4 <TIM_OC1_SetConfig+0xc4>
 8008fa2:	683b      	ldr	r3, [r7, #0]
 8008fa4:	699b      	ldr	r3, [r3, #24]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d004      	beq.n	8008fb4 <TIM_OC1_SetConfig+0xc4>
 8008faa:	f641 3174 	movw	r1, #7028	; 0x1b74
 8008fae:	481d      	ldr	r0, [pc, #116]	; (8009024 <TIM_OC1_SetConfig+0x134>)
 8008fb0:	f7f9 fd6b 	bl	8002a8a <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8008fb4:	683b      	ldr	r3, [r7, #0]
 8008fb6:	695b      	ldr	r3, [r3, #20]
 8008fb8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008fbc:	d008      	beq.n	8008fd0 <TIM_OC1_SetConfig+0xe0>
 8008fbe:	683b      	ldr	r3, [r7, #0]
 8008fc0:	695b      	ldr	r3, [r3, #20]
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d004      	beq.n	8008fd0 <TIM_OC1_SetConfig+0xe0>
 8008fc6:	f641 3175 	movw	r1, #7029	; 0x1b75
 8008fca:	4816      	ldr	r0, [pc, #88]	; (8009024 <TIM_OC1_SetConfig+0x134>)
 8008fcc:	f7f9 fd5d 	bl	8002a8a <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008fd0:	693b      	ldr	r3, [r7, #16]
 8008fd2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008fd6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008fd8:	693b      	ldr	r3, [r7, #16]
 8008fda:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008fde:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008fe0:	683b      	ldr	r3, [r7, #0]
 8008fe2:	695b      	ldr	r3, [r3, #20]
 8008fe4:	693a      	ldr	r2, [r7, #16]
 8008fe6:	4313      	orrs	r3, r2
 8008fe8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008fea:	683b      	ldr	r3, [r7, #0]
 8008fec:	699b      	ldr	r3, [r3, #24]
 8008fee:	693a      	ldr	r2, [r7, #16]
 8008ff0:	4313      	orrs	r3, r2
 8008ff2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	693a      	ldr	r2, [r7, #16]
 8008ff8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	68fa      	ldr	r2, [r7, #12]
 8008ffe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009000:	683b      	ldr	r3, [r7, #0]
 8009002:	685a      	ldr	r2, [r3, #4]
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	697a      	ldr	r2, [r7, #20]
 800900c:	621a      	str	r2, [r3, #32]
}
 800900e:	bf00      	nop
 8009010:	3718      	adds	r7, #24
 8009012:	46bd      	mov	sp, r7
 8009014:	bd80      	pop	{r7, pc}
 8009016:	bf00      	nop
 8009018:	fffeff8f 	.word	0xfffeff8f
 800901c:	40010000 	.word	0x40010000
 8009020:	40010400 	.word	0x40010400
 8009024:	080167e4 	.word	0x080167e4

08009028 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009028:	b580      	push	{r7, lr}
 800902a:	b086      	sub	sp, #24
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
 8009030:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	6a1b      	ldr	r3, [r3, #32]
 8009036:	f023 0210 	bic.w	r2, r3, #16
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	6a1b      	ldr	r3, [r3, #32]
 8009042:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	685b      	ldr	r3, [r3, #4]
 8009048:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	699b      	ldr	r3, [r3, #24]
 800904e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009050:	68fa      	ldr	r2, [r7, #12]
 8009052:	4b41      	ldr	r3, [pc, #260]	; (8009158 <TIM_OC2_SetConfig+0x130>)
 8009054:	4013      	ands	r3, r2
 8009056:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800905e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009060:	683b      	ldr	r3, [r7, #0]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	021b      	lsls	r3, r3, #8
 8009066:	68fa      	ldr	r2, [r7, #12]
 8009068:	4313      	orrs	r3, r2
 800906a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800906c:	697b      	ldr	r3, [r7, #20]
 800906e:	f023 0320 	bic.w	r3, r3, #32
 8009072:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009074:	683b      	ldr	r3, [r7, #0]
 8009076:	689b      	ldr	r3, [r3, #8]
 8009078:	011b      	lsls	r3, r3, #4
 800907a:	697a      	ldr	r2, [r7, #20]
 800907c:	4313      	orrs	r3, r2
 800907e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	4a36      	ldr	r2, [pc, #216]	; (800915c <TIM_OC2_SetConfig+0x134>)
 8009084:	4293      	cmp	r3, r2
 8009086:	d003      	beq.n	8009090 <TIM_OC2_SetConfig+0x68>
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	4a35      	ldr	r2, [pc, #212]	; (8009160 <TIM_OC2_SetConfig+0x138>)
 800908c:	4293      	cmp	r3, r2
 800908e:	d11a      	bne.n	80090c6 <TIM_OC2_SetConfig+0x9e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8009090:	683b      	ldr	r3, [r7, #0]
 8009092:	68db      	ldr	r3, [r3, #12]
 8009094:	2b00      	cmp	r3, #0
 8009096:	d008      	beq.n	80090aa <TIM_OC2_SetConfig+0x82>
 8009098:	683b      	ldr	r3, [r7, #0]
 800909a:	68db      	ldr	r3, [r3, #12]
 800909c:	2b08      	cmp	r3, #8
 800909e:	d004      	beq.n	80090aa <TIM_OC2_SetConfig+0x82>
 80090a0:	f641 31b2 	movw	r1, #7090	; 0x1bb2
 80090a4:	482f      	ldr	r0, [pc, #188]	; (8009164 <TIM_OC2_SetConfig+0x13c>)
 80090a6:	f7f9 fcf0 	bl	8002a8a <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80090aa:	697b      	ldr	r3, [r7, #20]
 80090ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80090b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80090b2:	683b      	ldr	r3, [r7, #0]
 80090b4:	68db      	ldr	r3, [r3, #12]
 80090b6:	011b      	lsls	r3, r3, #4
 80090b8:	697a      	ldr	r2, [r7, #20]
 80090ba:	4313      	orrs	r3, r2
 80090bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80090be:	697b      	ldr	r3, [r7, #20]
 80090c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80090c4:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	4a24      	ldr	r2, [pc, #144]	; (800915c <TIM_OC2_SetConfig+0x134>)
 80090ca:	4293      	cmp	r3, r2
 80090cc:	d003      	beq.n	80090d6 <TIM_OC2_SetConfig+0xae>
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	4a23      	ldr	r2, [pc, #140]	; (8009160 <TIM_OC2_SetConfig+0x138>)
 80090d2:	4293      	cmp	r3, r2
 80090d4:	d12f      	bne.n	8009136 <TIM_OC2_SetConfig+0x10e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 80090d6:	683b      	ldr	r3, [r7, #0]
 80090d8:	699b      	ldr	r3, [r3, #24]
 80090da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80090de:	d008      	beq.n	80090f2 <TIM_OC2_SetConfig+0xca>
 80090e0:	683b      	ldr	r3, [r7, #0]
 80090e2:	699b      	ldr	r3, [r3, #24]
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d004      	beq.n	80090f2 <TIM_OC2_SetConfig+0xca>
 80090e8:	f44f 51de 	mov.w	r1, #7104	; 0x1bc0
 80090ec:	481d      	ldr	r0, [pc, #116]	; (8009164 <TIM_OC2_SetConfig+0x13c>)
 80090ee:	f7f9 fccc 	bl	8002a8a <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 80090f2:	683b      	ldr	r3, [r7, #0]
 80090f4:	695b      	ldr	r3, [r3, #20]
 80090f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80090fa:	d008      	beq.n	800910e <TIM_OC2_SetConfig+0xe6>
 80090fc:	683b      	ldr	r3, [r7, #0]
 80090fe:	695b      	ldr	r3, [r3, #20]
 8009100:	2b00      	cmp	r3, #0
 8009102:	d004      	beq.n	800910e <TIM_OC2_SetConfig+0xe6>
 8009104:	f641 31c1 	movw	r1, #7105	; 0x1bc1
 8009108:	4816      	ldr	r0, [pc, #88]	; (8009164 <TIM_OC2_SetConfig+0x13c>)
 800910a:	f7f9 fcbe 	bl	8002a8a <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800910e:	693b      	ldr	r3, [r7, #16]
 8009110:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009114:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009116:	693b      	ldr	r3, [r7, #16]
 8009118:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800911c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800911e:	683b      	ldr	r3, [r7, #0]
 8009120:	695b      	ldr	r3, [r3, #20]
 8009122:	009b      	lsls	r3, r3, #2
 8009124:	693a      	ldr	r2, [r7, #16]
 8009126:	4313      	orrs	r3, r2
 8009128:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800912a:	683b      	ldr	r3, [r7, #0]
 800912c:	699b      	ldr	r3, [r3, #24]
 800912e:	009b      	lsls	r3, r3, #2
 8009130:	693a      	ldr	r2, [r7, #16]
 8009132:	4313      	orrs	r3, r2
 8009134:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	693a      	ldr	r2, [r7, #16]
 800913a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	68fa      	ldr	r2, [r7, #12]
 8009140:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009142:	683b      	ldr	r3, [r7, #0]
 8009144:	685a      	ldr	r2, [r3, #4]
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	697a      	ldr	r2, [r7, #20]
 800914e:	621a      	str	r2, [r3, #32]
}
 8009150:	bf00      	nop
 8009152:	3718      	adds	r7, #24
 8009154:	46bd      	mov	sp, r7
 8009156:	bd80      	pop	{r7, pc}
 8009158:	feff8fff 	.word	0xfeff8fff
 800915c:	40010000 	.word	0x40010000
 8009160:	40010400 	.word	0x40010400
 8009164:	080167e4 	.word	0x080167e4

08009168 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009168:	b580      	push	{r7, lr}
 800916a:	b086      	sub	sp, #24
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
 8009170:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	6a1b      	ldr	r3, [r3, #32]
 8009176:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	6a1b      	ldr	r3, [r3, #32]
 8009182:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	685b      	ldr	r3, [r3, #4]
 8009188:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	69db      	ldr	r3, [r3, #28]
 800918e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009190:	68fa      	ldr	r2, [r7, #12]
 8009192:	4b41      	ldr	r3, [pc, #260]	; (8009298 <TIM_OC3_SetConfig+0x130>)
 8009194:	4013      	ands	r3, r2
 8009196:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	f023 0303 	bic.w	r3, r3, #3
 800919e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80091a0:	683b      	ldr	r3, [r7, #0]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	68fa      	ldr	r2, [r7, #12]
 80091a6:	4313      	orrs	r3, r2
 80091a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80091aa:	697b      	ldr	r3, [r7, #20]
 80091ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80091b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80091b2:	683b      	ldr	r3, [r7, #0]
 80091b4:	689b      	ldr	r3, [r3, #8]
 80091b6:	021b      	lsls	r3, r3, #8
 80091b8:	697a      	ldr	r2, [r7, #20]
 80091ba:	4313      	orrs	r3, r2
 80091bc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	4a36      	ldr	r2, [pc, #216]	; (800929c <TIM_OC3_SetConfig+0x134>)
 80091c2:	4293      	cmp	r3, r2
 80091c4:	d003      	beq.n	80091ce <TIM_OC3_SetConfig+0x66>
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	4a35      	ldr	r2, [pc, #212]	; (80092a0 <TIM_OC3_SetConfig+0x138>)
 80091ca:	4293      	cmp	r3, r2
 80091cc:	d11a      	bne.n	8009204 <TIM_OC3_SetConfig+0x9c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 80091ce:	683b      	ldr	r3, [r7, #0]
 80091d0:	68db      	ldr	r3, [r3, #12]
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d008      	beq.n	80091e8 <TIM_OC3_SetConfig+0x80>
 80091d6:	683b      	ldr	r3, [r7, #0]
 80091d8:	68db      	ldr	r3, [r3, #12]
 80091da:	2b08      	cmp	r3, #8
 80091dc:	d004      	beq.n	80091e8 <TIM_OC3_SetConfig+0x80>
 80091de:	f641 31fd 	movw	r1, #7165	; 0x1bfd
 80091e2:	4830      	ldr	r0, [pc, #192]	; (80092a4 <TIM_OC3_SetConfig+0x13c>)
 80091e4:	f7f9 fc51 	bl	8002a8a <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80091e8:	697b      	ldr	r3, [r7, #20]
 80091ea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80091ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80091f0:	683b      	ldr	r3, [r7, #0]
 80091f2:	68db      	ldr	r3, [r3, #12]
 80091f4:	021b      	lsls	r3, r3, #8
 80091f6:	697a      	ldr	r2, [r7, #20]
 80091f8:	4313      	orrs	r3, r2
 80091fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80091fc:	697b      	ldr	r3, [r7, #20]
 80091fe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009202:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	4a25      	ldr	r2, [pc, #148]	; (800929c <TIM_OC3_SetConfig+0x134>)
 8009208:	4293      	cmp	r3, r2
 800920a:	d003      	beq.n	8009214 <TIM_OC3_SetConfig+0xac>
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	4a24      	ldr	r2, [pc, #144]	; (80092a0 <TIM_OC3_SetConfig+0x138>)
 8009210:	4293      	cmp	r3, r2
 8009212:	d12f      	bne.n	8009274 <TIM_OC3_SetConfig+0x10c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8009214:	683b      	ldr	r3, [r7, #0]
 8009216:	699b      	ldr	r3, [r3, #24]
 8009218:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800921c:	d008      	beq.n	8009230 <TIM_OC3_SetConfig+0xc8>
 800921e:	683b      	ldr	r3, [r7, #0]
 8009220:	699b      	ldr	r3, [r3, #24]
 8009222:	2b00      	cmp	r3, #0
 8009224:	d004      	beq.n	8009230 <TIM_OC3_SetConfig+0xc8>
 8009226:	f641 410a 	movw	r1, #7178	; 0x1c0a
 800922a:	481e      	ldr	r0, [pc, #120]	; (80092a4 <TIM_OC3_SetConfig+0x13c>)
 800922c:	f7f9 fc2d 	bl	8002a8a <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8009230:	683b      	ldr	r3, [r7, #0]
 8009232:	695b      	ldr	r3, [r3, #20]
 8009234:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009238:	d008      	beq.n	800924c <TIM_OC3_SetConfig+0xe4>
 800923a:	683b      	ldr	r3, [r7, #0]
 800923c:	695b      	ldr	r3, [r3, #20]
 800923e:	2b00      	cmp	r3, #0
 8009240:	d004      	beq.n	800924c <TIM_OC3_SetConfig+0xe4>
 8009242:	f641 410b 	movw	r1, #7179	; 0x1c0b
 8009246:	4817      	ldr	r0, [pc, #92]	; (80092a4 <TIM_OC3_SetConfig+0x13c>)
 8009248:	f7f9 fc1f 	bl	8002a8a <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800924c:	693b      	ldr	r3, [r7, #16]
 800924e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009252:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009254:	693b      	ldr	r3, [r7, #16]
 8009256:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800925a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800925c:	683b      	ldr	r3, [r7, #0]
 800925e:	695b      	ldr	r3, [r3, #20]
 8009260:	011b      	lsls	r3, r3, #4
 8009262:	693a      	ldr	r2, [r7, #16]
 8009264:	4313      	orrs	r3, r2
 8009266:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009268:	683b      	ldr	r3, [r7, #0]
 800926a:	699b      	ldr	r3, [r3, #24]
 800926c:	011b      	lsls	r3, r3, #4
 800926e:	693a      	ldr	r2, [r7, #16]
 8009270:	4313      	orrs	r3, r2
 8009272:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	693a      	ldr	r2, [r7, #16]
 8009278:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	68fa      	ldr	r2, [r7, #12]
 800927e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009280:	683b      	ldr	r3, [r7, #0]
 8009282:	685a      	ldr	r2, [r3, #4]
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	697a      	ldr	r2, [r7, #20]
 800928c:	621a      	str	r2, [r3, #32]
}
 800928e:	bf00      	nop
 8009290:	3718      	adds	r7, #24
 8009292:	46bd      	mov	sp, r7
 8009294:	bd80      	pop	{r7, pc}
 8009296:	bf00      	nop
 8009298:	fffeff8f 	.word	0xfffeff8f
 800929c:	40010000 	.word	0x40010000
 80092a0:	40010400 	.word	0x40010400
 80092a4:	080167e4 	.word	0x080167e4

080092a8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80092a8:	b580      	push	{r7, lr}
 80092aa:	b086      	sub	sp, #24
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	6078      	str	r0, [r7, #4]
 80092b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	6a1b      	ldr	r3, [r3, #32]
 80092b6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	6a1b      	ldr	r3, [r3, #32]
 80092c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	685b      	ldr	r3, [r3, #4]
 80092c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	69db      	ldr	r3, [r3, #28]
 80092ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80092d0:	68fa      	ldr	r2, [r7, #12]
 80092d2:	4b24      	ldr	r3, [pc, #144]	; (8009364 <TIM_OC4_SetConfig+0xbc>)
 80092d4:	4013      	ands	r3, r2
 80092d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80092de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80092e0:	683b      	ldr	r3, [r7, #0]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	021b      	lsls	r3, r3, #8
 80092e6:	68fa      	ldr	r2, [r7, #12]
 80092e8:	4313      	orrs	r3, r2
 80092ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80092ec:	693b      	ldr	r3, [r7, #16]
 80092ee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80092f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80092f4:	683b      	ldr	r3, [r7, #0]
 80092f6:	689b      	ldr	r3, [r3, #8]
 80092f8:	031b      	lsls	r3, r3, #12
 80092fa:	693a      	ldr	r2, [r7, #16]
 80092fc:	4313      	orrs	r3, r2
 80092fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	4a19      	ldr	r2, [pc, #100]	; (8009368 <TIM_OC4_SetConfig+0xc0>)
 8009304:	4293      	cmp	r3, r2
 8009306:	d003      	beq.n	8009310 <TIM_OC4_SetConfig+0x68>
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	4a18      	ldr	r2, [pc, #96]	; (800936c <TIM_OC4_SetConfig+0xc4>)
 800930c:	4293      	cmp	r3, r2
 800930e:	d117      	bne.n	8009340 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8009310:	683b      	ldr	r3, [r7, #0]
 8009312:	695b      	ldr	r3, [r3, #20]
 8009314:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009318:	d008      	beq.n	800932c <TIM_OC4_SetConfig+0x84>
 800931a:	683b      	ldr	r3, [r7, #0]
 800931c:	695b      	ldr	r3, [r3, #20]
 800931e:	2b00      	cmp	r3, #0
 8009320:	d004      	beq.n	800932c <TIM_OC4_SetConfig+0x84>
 8009322:	f641 4149 	movw	r1, #7241	; 0x1c49
 8009326:	4812      	ldr	r0, [pc, #72]	; (8009370 <TIM_OC4_SetConfig+0xc8>)
 8009328:	f7f9 fbaf 	bl	8002a8a <assert_failed>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800932c:	697b      	ldr	r3, [r7, #20]
 800932e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009332:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009334:	683b      	ldr	r3, [r7, #0]
 8009336:	695b      	ldr	r3, [r3, #20]
 8009338:	019b      	lsls	r3, r3, #6
 800933a:	697a      	ldr	r2, [r7, #20]
 800933c:	4313      	orrs	r3, r2
 800933e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	697a      	ldr	r2, [r7, #20]
 8009344:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	68fa      	ldr	r2, [r7, #12]
 800934a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800934c:	683b      	ldr	r3, [r7, #0]
 800934e:	685a      	ldr	r2, [r3, #4]
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	693a      	ldr	r2, [r7, #16]
 8009358:	621a      	str	r2, [r3, #32]
}
 800935a:	bf00      	nop
 800935c:	3718      	adds	r7, #24
 800935e:	46bd      	mov	sp, r7
 8009360:	bd80      	pop	{r7, pc}
 8009362:	bf00      	nop
 8009364:	feff8fff 	.word	0xfeff8fff
 8009368:	40010000 	.word	0x40010000
 800936c:	40010400 	.word	0x40010400
 8009370:	080167e4 	.word	0x080167e4

08009374 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009374:	b480      	push	{r7}
 8009376:	b087      	sub	sp, #28
 8009378:	af00      	add	r7, sp, #0
 800937a:	6078      	str	r0, [r7, #4]
 800937c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	6a1b      	ldr	r3, [r3, #32]
 8009382:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	6a1b      	ldr	r3, [r3, #32]
 800938e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	685b      	ldr	r3, [r3, #4]
 8009394:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800939a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800939c:	68fa      	ldr	r2, [r7, #12]
 800939e:	4b1b      	ldr	r3, [pc, #108]	; (800940c <TIM_OC5_SetConfig+0x98>)
 80093a0:	4013      	ands	r3, r2
 80093a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80093a4:	683b      	ldr	r3, [r7, #0]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	68fa      	ldr	r2, [r7, #12]
 80093aa:	4313      	orrs	r3, r2
 80093ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80093ae:	693b      	ldr	r3, [r7, #16]
 80093b0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80093b4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80093b6:	683b      	ldr	r3, [r7, #0]
 80093b8:	689b      	ldr	r3, [r3, #8]
 80093ba:	041b      	lsls	r3, r3, #16
 80093bc:	693a      	ldr	r2, [r7, #16]
 80093be:	4313      	orrs	r3, r2
 80093c0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	4a12      	ldr	r2, [pc, #72]	; (8009410 <TIM_OC5_SetConfig+0x9c>)
 80093c6:	4293      	cmp	r3, r2
 80093c8:	d003      	beq.n	80093d2 <TIM_OC5_SetConfig+0x5e>
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	4a11      	ldr	r2, [pc, #68]	; (8009414 <TIM_OC5_SetConfig+0xa0>)
 80093ce:	4293      	cmp	r3, r2
 80093d0:	d109      	bne.n	80093e6 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80093d2:	697b      	ldr	r3, [r7, #20]
 80093d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80093d8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80093da:	683b      	ldr	r3, [r7, #0]
 80093dc:	695b      	ldr	r3, [r3, #20]
 80093de:	021b      	lsls	r3, r3, #8
 80093e0:	697a      	ldr	r2, [r7, #20]
 80093e2:	4313      	orrs	r3, r2
 80093e4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	697a      	ldr	r2, [r7, #20]
 80093ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	68fa      	ldr	r2, [r7, #12]
 80093f0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80093f2:	683b      	ldr	r3, [r7, #0]
 80093f4:	685a      	ldr	r2, [r3, #4]
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	693a      	ldr	r2, [r7, #16]
 80093fe:	621a      	str	r2, [r3, #32]
}
 8009400:	bf00      	nop
 8009402:	371c      	adds	r7, #28
 8009404:	46bd      	mov	sp, r7
 8009406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940a:	4770      	bx	lr
 800940c:	fffeff8f 	.word	0xfffeff8f
 8009410:	40010000 	.word	0x40010000
 8009414:	40010400 	.word	0x40010400

08009418 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009418:	b480      	push	{r7}
 800941a:	b087      	sub	sp, #28
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
 8009420:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	6a1b      	ldr	r3, [r3, #32]
 8009426:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	6a1b      	ldr	r3, [r3, #32]
 8009432:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	685b      	ldr	r3, [r3, #4]
 8009438:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800943e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009440:	68fa      	ldr	r2, [r7, #12]
 8009442:	4b1c      	ldr	r3, [pc, #112]	; (80094b4 <TIM_OC6_SetConfig+0x9c>)
 8009444:	4013      	ands	r3, r2
 8009446:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009448:	683b      	ldr	r3, [r7, #0]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	021b      	lsls	r3, r3, #8
 800944e:	68fa      	ldr	r2, [r7, #12]
 8009450:	4313      	orrs	r3, r2
 8009452:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009454:	693b      	ldr	r3, [r7, #16]
 8009456:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800945a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800945c:	683b      	ldr	r3, [r7, #0]
 800945e:	689b      	ldr	r3, [r3, #8]
 8009460:	051b      	lsls	r3, r3, #20
 8009462:	693a      	ldr	r2, [r7, #16]
 8009464:	4313      	orrs	r3, r2
 8009466:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	4a13      	ldr	r2, [pc, #76]	; (80094b8 <TIM_OC6_SetConfig+0xa0>)
 800946c:	4293      	cmp	r3, r2
 800946e:	d003      	beq.n	8009478 <TIM_OC6_SetConfig+0x60>
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	4a12      	ldr	r2, [pc, #72]	; (80094bc <TIM_OC6_SetConfig+0xa4>)
 8009474:	4293      	cmp	r3, r2
 8009476:	d109      	bne.n	800948c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009478:	697b      	ldr	r3, [r7, #20]
 800947a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800947e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009480:	683b      	ldr	r3, [r7, #0]
 8009482:	695b      	ldr	r3, [r3, #20]
 8009484:	029b      	lsls	r3, r3, #10
 8009486:	697a      	ldr	r2, [r7, #20]
 8009488:	4313      	orrs	r3, r2
 800948a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	697a      	ldr	r2, [r7, #20]
 8009490:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	68fa      	ldr	r2, [r7, #12]
 8009496:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009498:	683b      	ldr	r3, [r7, #0]
 800949a:	685a      	ldr	r2, [r3, #4]
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	693a      	ldr	r2, [r7, #16]
 80094a4:	621a      	str	r2, [r3, #32]
}
 80094a6:	bf00      	nop
 80094a8:	371c      	adds	r7, #28
 80094aa:	46bd      	mov	sp, r7
 80094ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b0:	4770      	bx	lr
 80094b2:	bf00      	nop
 80094b4:	feff8fff 	.word	0xfeff8fff
 80094b8:	40010000 	.word	0x40010000
 80094bc:	40010400 	.word	0x40010400

080094c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80094c0:	b480      	push	{r7}
 80094c2:	b087      	sub	sp, #28
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	60f8      	str	r0, [r7, #12]
 80094c8:	60b9      	str	r1, [r7, #8]
 80094ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	6a1b      	ldr	r3, [r3, #32]
 80094d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	6a1b      	ldr	r3, [r3, #32]
 80094d6:	f023 0201 	bic.w	r2, r3, #1
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	699b      	ldr	r3, [r3, #24]
 80094e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80094e4:	693b      	ldr	r3, [r7, #16]
 80094e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80094ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	011b      	lsls	r3, r3, #4
 80094f0:	693a      	ldr	r2, [r7, #16]
 80094f2:	4313      	orrs	r3, r2
 80094f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80094f6:	697b      	ldr	r3, [r7, #20]
 80094f8:	f023 030a 	bic.w	r3, r3, #10
 80094fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80094fe:	697a      	ldr	r2, [r7, #20]
 8009500:	68bb      	ldr	r3, [r7, #8]
 8009502:	4313      	orrs	r3, r2
 8009504:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	693a      	ldr	r2, [r7, #16]
 800950a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	697a      	ldr	r2, [r7, #20]
 8009510:	621a      	str	r2, [r3, #32]
}
 8009512:	bf00      	nop
 8009514:	371c      	adds	r7, #28
 8009516:	46bd      	mov	sp, r7
 8009518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951c:	4770      	bx	lr

0800951e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800951e:	b480      	push	{r7}
 8009520:	b087      	sub	sp, #28
 8009522:	af00      	add	r7, sp, #0
 8009524:	60f8      	str	r0, [r7, #12]
 8009526:	60b9      	str	r1, [r7, #8]
 8009528:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	6a1b      	ldr	r3, [r3, #32]
 800952e:	f023 0210 	bic.w	r2, r3, #16
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	699b      	ldr	r3, [r3, #24]
 800953a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	6a1b      	ldr	r3, [r3, #32]
 8009540:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009542:	697b      	ldr	r3, [r7, #20]
 8009544:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009548:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	031b      	lsls	r3, r3, #12
 800954e:	697a      	ldr	r2, [r7, #20]
 8009550:	4313      	orrs	r3, r2
 8009552:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009554:	693b      	ldr	r3, [r7, #16]
 8009556:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800955a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800955c:	68bb      	ldr	r3, [r7, #8]
 800955e:	011b      	lsls	r3, r3, #4
 8009560:	693a      	ldr	r2, [r7, #16]
 8009562:	4313      	orrs	r3, r2
 8009564:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	697a      	ldr	r2, [r7, #20]
 800956a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	693a      	ldr	r2, [r7, #16]
 8009570:	621a      	str	r2, [r3, #32]
}
 8009572:	bf00      	nop
 8009574:	371c      	adds	r7, #28
 8009576:	46bd      	mov	sp, r7
 8009578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800957c:	4770      	bx	lr

0800957e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800957e:	b480      	push	{r7}
 8009580:	b085      	sub	sp, #20
 8009582:	af00      	add	r7, sp, #0
 8009584:	6078      	str	r0, [r7, #4]
 8009586:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	689b      	ldr	r3, [r3, #8]
 800958c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009594:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009596:	683a      	ldr	r2, [r7, #0]
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	4313      	orrs	r3, r2
 800959c:	f043 0307 	orr.w	r3, r3, #7
 80095a0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	68fa      	ldr	r2, [r7, #12]
 80095a6:	609a      	str	r2, [r3, #8]
}
 80095a8:	bf00      	nop
 80095aa:	3714      	adds	r7, #20
 80095ac:	46bd      	mov	sp, r7
 80095ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b2:	4770      	bx	lr

080095b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80095b4:	b480      	push	{r7}
 80095b6:	b087      	sub	sp, #28
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	60f8      	str	r0, [r7, #12]
 80095bc:	60b9      	str	r1, [r7, #8]
 80095be:	607a      	str	r2, [r7, #4]
 80095c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	689b      	ldr	r3, [r3, #8]
 80095c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80095c8:	697b      	ldr	r3, [r7, #20]
 80095ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80095ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80095d0:	683b      	ldr	r3, [r7, #0]
 80095d2:	021a      	lsls	r2, r3, #8
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	431a      	orrs	r2, r3
 80095d8:	68bb      	ldr	r3, [r7, #8]
 80095da:	4313      	orrs	r3, r2
 80095dc:	697a      	ldr	r2, [r7, #20]
 80095de:	4313      	orrs	r3, r2
 80095e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	697a      	ldr	r2, [r7, #20]
 80095e6:	609a      	str	r2, [r3, #8]
}
 80095e8:	bf00      	nop
 80095ea:	371c      	adds	r7, #28
 80095ec:	46bd      	mov	sp, r7
 80095ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f2:	4770      	bx	lr

080095f4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80095f4:	b580      	push	{r7, lr}
 80095f6:	b086      	sub	sp, #24
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	60f8      	str	r0, [r7, #12]
 80095fc:	60b9      	str	r1, [r7, #8]
 80095fe:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	4a35      	ldr	r2, [pc, #212]	; (80096d8 <TIM_CCxChannelCmd+0xe4>)
 8009604:	4293      	cmp	r3, r2
 8009606:	d030      	beq.n	800966a <TIM_CCxChannelCmd+0x76>
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800960e:	d02c      	beq.n	800966a <TIM_CCxChannelCmd+0x76>
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	4a32      	ldr	r2, [pc, #200]	; (80096dc <TIM_CCxChannelCmd+0xe8>)
 8009614:	4293      	cmp	r3, r2
 8009616:	d028      	beq.n	800966a <TIM_CCxChannelCmd+0x76>
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	4a31      	ldr	r2, [pc, #196]	; (80096e0 <TIM_CCxChannelCmd+0xec>)
 800961c:	4293      	cmp	r3, r2
 800961e:	d024      	beq.n	800966a <TIM_CCxChannelCmd+0x76>
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	4a30      	ldr	r2, [pc, #192]	; (80096e4 <TIM_CCxChannelCmd+0xf0>)
 8009624:	4293      	cmp	r3, r2
 8009626:	d020      	beq.n	800966a <TIM_CCxChannelCmd+0x76>
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	4a2f      	ldr	r2, [pc, #188]	; (80096e8 <TIM_CCxChannelCmd+0xf4>)
 800962c:	4293      	cmp	r3, r2
 800962e:	d01c      	beq.n	800966a <TIM_CCxChannelCmd+0x76>
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	4a2e      	ldr	r2, [pc, #184]	; (80096ec <TIM_CCxChannelCmd+0xf8>)
 8009634:	4293      	cmp	r3, r2
 8009636:	d018      	beq.n	800966a <TIM_CCxChannelCmd+0x76>
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	4a2d      	ldr	r2, [pc, #180]	; (80096f0 <TIM_CCxChannelCmd+0xfc>)
 800963c:	4293      	cmp	r3, r2
 800963e:	d014      	beq.n	800966a <TIM_CCxChannelCmd+0x76>
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	4a2c      	ldr	r2, [pc, #176]	; (80096f4 <TIM_CCxChannelCmd+0x100>)
 8009644:	4293      	cmp	r3, r2
 8009646:	d010      	beq.n	800966a <TIM_CCxChannelCmd+0x76>
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	4a2b      	ldr	r2, [pc, #172]	; (80096f8 <TIM_CCxChannelCmd+0x104>)
 800964c:	4293      	cmp	r3, r2
 800964e:	d00c      	beq.n	800966a <TIM_CCxChannelCmd+0x76>
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	4a2a      	ldr	r2, [pc, #168]	; (80096fc <TIM_CCxChannelCmd+0x108>)
 8009654:	4293      	cmp	r3, r2
 8009656:	d008      	beq.n	800966a <TIM_CCxChannelCmd+0x76>
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	4a29      	ldr	r2, [pc, #164]	; (8009700 <TIM_CCxChannelCmd+0x10c>)
 800965c:	4293      	cmp	r3, r2
 800965e:	d004      	beq.n	800966a <TIM_CCxChannelCmd+0x76>
 8009660:	f641 61a1 	movw	r1, #7841	; 0x1ea1
 8009664:	4827      	ldr	r0, [pc, #156]	; (8009704 <TIM_CCxChannelCmd+0x110>)
 8009666:	f7f9 fa10 	bl	8002a8a <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 800966a:	68bb      	ldr	r3, [r7, #8]
 800966c:	2b00      	cmp	r3, #0
 800966e:	d016      	beq.n	800969e <TIM_CCxChannelCmd+0xaa>
 8009670:	68bb      	ldr	r3, [r7, #8]
 8009672:	2b04      	cmp	r3, #4
 8009674:	d013      	beq.n	800969e <TIM_CCxChannelCmd+0xaa>
 8009676:	68bb      	ldr	r3, [r7, #8]
 8009678:	2b08      	cmp	r3, #8
 800967a:	d010      	beq.n	800969e <TIM_CCxChannelCmd+0xaa>
 800967c:	68bb      	ldr	r3, [r7, #8]
 800967e:	2b0c      	cmp	r3, #12
 8009680:	d00d      	beq.n	800969e <TIM_CCxChannelCmd+0xaa>
 8009682:	68bb      	ldr	r3, [r7, #8]
 8009684:	2b10      	cmp	r3, #16
 8009686:	d00a      	beq.n	800969e <TIM_CCxChannelCmd+0xaa>
 8009688:	68bb      	ldr	r3, [r7, #8]
 800968a:	2b14      	cmp	r3, #20
 800968c:	d007      	beq.n	800969e <TIM_CCxChannelCmd+0xaa>
 800968e:	68bb      	ldr	r3, [r7, #8]
 8009690:	2b3c      	cmp	r3, #60	; 0x3c
 8009692:	d004      	beq.n	800969e <TIM_CCxChannelCmd+0xaa>
 8009694:	f641 61a2 	movw	r1, #7842	; 0x1ea2
 8009698:	481a      	ldr	r0, [pc, #104]	; (8009704 <TIM_CCxChannelCmd+0x110>)
 800969a:	f7f9 f9f6 	bl	8002a8a <assert_failed>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800969e:	68bb      	ldr	r3, [r7, #8]
 80096a0:	f003 031f 	and.w	r3, r3, #31
 80096a4:	2201      	movs	r2, #1
 80096a6:	fa02 f303 	lsl.w	r3, r2, r3
 80096aa:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	6a1a      	ldr	r2, [r3, #32]
 80096b0:	697b      	ldr	r3, [r7, #20]
 80096b2:	43db      	mvns	r3, r3
 80096b4:	401a      	ands	r2, r3
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	6a1a      	ldr	r2, [r3, #32]
 80096be:	68bb      	ldr	r3, [r7, #8]
 80096c0:	f003 031f 	and.w	r3, r3, #31
 80096c4:	6879      	ldr	r1, [r7, #4]
 80096c6:	fa01 f303 	lsl.w	r3, r1, r3
 80096ca:	431a      	orrs	r2, r3
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	621a      	str	r2, [r3, #32]
}
 80096d0:	bf00      	nop
 80096d2:	3718      	adds	r7, #24
 80096d4:	46bd      	mov	sp, r7
 80096d6:	bd80      	pop	{r7, pc}
 80096d8:	40010000 	.word	0x40010000
 80096dc:	40000400 	.word	0x40000400
 80096e0:	40000800 	.word	0x40000800
 80096e4:	40000c00 	.word	0x40000c00
 80096e8:	40010400 	.word	0x40010400
 80096ec:	40014000 	.word	0x40014000
 80096f0:	40014400 	.word	0x40014400
 80096f4:	40014800 	.word	0x40014800
 80096f8:	40001800 	.word	0x40001800
 80096fc:	40001c00 	.word	0x40001c00
 8009700:	40002000 	.word	0x40002000
 8009704:	080167e4 	.word	0x080167e4

08009708 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009708:	b580      	push	{r7, lr}
 800970a:	b084      	sub	sp, #16
 800970c:	af00      	add	r7, sp, #0
 800970e:	6078      	str	r0, [r7, #4]
 8009710:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	4a32      	ldr	r2, [pc, #200]	; (80097e0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8009718:	4293      	cmp	r3, r2
 800971a:	d027      	beq.n	800976c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009724:	d022      	beq.n	800976c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	4a2e      	ldr	r2, [pc, #184]	; (80097e4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800972c:	4293      	cmp	r3, r2
 800972e:	d01d      	beq.n	800976c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	4a2c      	ldr	r2, [pc, #176]	; (80097e8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009736:	4293      	cmp	r3, r2
 8009738:	d018      	beq.n	800976c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	4a2b      	ldr	r2, [pc, #172]	; (80097ec <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8009740:	4293      	cmp	r3, r2
 8009742:	d013      	beq.n	800976c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	4a29      	ldr	r2, [pc, #164]	; (80097f0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800974a:	4293      	cmp	r3, r2
 800974c:	d00e      	beq.n	800976c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	4a28      	ldr	r2, [pc, #160]	; (80097f4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009754:	4293      	cmp	r3, r2
 8009756:	d009      	beq.n	800976c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	4a26      	ldr	r2, [pc, #152]	; (80097f8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800975e:	4293      	cmp	r3, r2
 8009760:	d004      	beq.n	800976c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8009762:	f240 71b6 	movw	r1, #1974	; 0x7b6
 8009766:	4825      	ldr	r0, [pc, #148]	; (80097fc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009768:	f7f9 f98f 	bl	8002a8a <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 800976c:	683b      	ldr	r3, [r7, #0]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	2b00      	cmp	r3, #0
 8009772:	d020      	beq.n	80097b6 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8009774:	683b      	ldr	r3, [r7, #0]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	2b10      	cmp	r3, #16
 800977a:	d01c      	beq.n	80097b6 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800977c:	683b      	ldr	r3, [r7, #0]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	2b20      	cmp	r3, #32
 8009782:	d018      	beq.n	80097b6 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8009784:	683b      	ldr	r3, [r7, #0]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	2b30      	cmp	r3, #48	; 0x30
 800978a:	d014      	beq.n	80097b6 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800978c:	683b      	ldr	r3, [r7, #0]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	2b40      	cmp	r3, #64	; 0x40
 8009792:	d010      	beq.n	80097b6 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8009794:	683b      	ldr	r3, [r7, #0]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	2b50      	cmp	r3, #80	; 0x50
 800979a:	d00c      	beq.n	80097b6 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800979c:	683b      	ldr	r3, [r7, #0]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	2b60      	cmp	r3, #96	; 0x60
 80097a2:	d008      	beq.n	80097b6 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80097a4:	683b      	ldr	r3, [r7, #0]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	2b70      	cmp	r3, #112	; 0x70
 80097aa:	d004      	beq.n	80097b6 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80097ac:	f240 71b7 	movw	r1, #1975	; 0x7b7
 80097b0:	4812      	ldr	r0, [pc, #72]	; (80097fc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80097b2:	f7f9 f96a 	bl	8002a8a <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 80097b6:	683b      	ldr	r3, [r7, #0]
 80097b8:	689b      	ldr	r3, [r3, #8]
 80097ba:	2b80      	cmp	r3, #128	; 0x80
 80097bc:	d008      	beq.n	80097d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80097be:	683b      	ldr	r3, [r7, #0]
 80097c0:	689b      	ldr	r3, [r3, #8]
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d004      	beq.n	80097d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80097c6:	f44f 61f7 	mov.w	r1, #1976	; 0x7b8
 80097ca:	480c      	ldr	r0, [pc, #48]	; (80097fc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80097cc:	f7f9 f95d 	bl	8002a8a <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80097d6:	2b01      	cmp	r3, #1
 80097d8:	d112      	bne.n	8009800 <HAL_TIMEx_MasterConfigSynchronization+0xf8>
 80097da:	2302      	movs	r3, #2
 80097dc:	e0d7      	b.n	800998e <HAL_TIMEx_MasterConfigSynchronization+0x286>
 80097de:	bf00      	nop
 80097e0:	40010000 	.word	0x40010000
 80097e4:	40000400 	.word	0x40000400
 80097e8:	40000800 	.word	0x40000800
 80097ec:	40000c00 	.word	0x40000c00
 80097f0:	40001000 	.word	0x40001000
 80097f4:	40001400 	.word	0x40001400
 80097f8:	40010400 	.word	0x40010400
 80097fc:	0801681c 	.word	0x0801681c
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	2201      	movs	r2, #1
 8009804:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	2202      	movs	r2, #2
 800980c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	685b      	ldr	r3, [r3, #4]
 8009816:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	689b      	ldr	r3, [r3, #8]
 800981e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	4a5c      	ldr	r2, [pc, #368]	; (8009998 <HAL_TIMEx_MasterConfigSynchronization+0x290>)
 8009826:	4293      	cmp	r3, r2
 8009828:	d004      	beq.n	8009834 <HAL_TIMEx_MasterConfigSynchronization+0x12c>
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	4a5b      	ldr	r2, [pc, #364]	; (800999c <HAL_TIMEx_MasterConfigSynchronization+0x294>)
 8009830:	4293      	cmp	r3, r2
 8009832:	d161      	bne.n	80098f8 <HAL_TIMEx_MasterConfigSynchronization+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
 8009834:	683b      	ldr	r3, [r7, #0]
 8009836:	685b      	ldr	r3, [r3, #4]
 8009838:	2b00      	cmp	r3, #0
 800983a:	d054      	beq.n	80098e6 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 800983c:	683b      	ldr	r3, [r7, #0]
 800983e:	685b      	ldr	r3, [r3, #4]
 8009840:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009844:	d04f      	beq.n	80098e6 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8009846:	683b      	ldr	r3, [r7, #0]
 8009848:	685b      	ldr	r3, [r3, #4]
 800984a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800984e:	d04a      	beq.n	80098e6 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8009850:	683b      	ldr	r3, [r7, #0]
 8009852:	685b      	ldr	r3, [r3, #4]
 8009854:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009858:	d045      	beq.n	80098e6 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 800985a:	683b      	ldr	r3, [r7, #0]
 800985c:	685b      	ldr	r3, [r3, #4]
 800985e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009862:	d040      	beq.n	80098e6 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8009864:	683b      	ldr	r3, [r7, #0]
 8009866:	685b      	ldr	r3, [r3, #4]
 8009868:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 800986c:	d03b      	beq.n	80098e6 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 800986e:	683b      	ldr	r3, [r7, #0]
 8009870:	685b      	ldr	r3, [r3, #4]
 8009872:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009876:	d036      	beq.n	80098e6 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8009878:	683b      	ldr	r3, [r7, #0]
 800987a:	685b      	ldr	r3, [r3, #4]
 800987c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009880:	d031      	beq.n	80098e6 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8009882:	683b      	ldr	r3, [r7, #0]
 8009884:	685b      	ldr	r3, [r3, #4]
 8009886:	f5b3 0fe0 	cmp.w	r3, #7340032	; 0x700000
 800988a:	d02c      	beq.n	80098e6 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 800988c:	683b      	ldr	r3, [r7, #0]
 800988e:	685b      	ldr	r3, [r3, #4]
 8009890:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009894:	d027      	beq.n	80098e6 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8009896:	683b      	ldr	r3, [r7, #0]
 8009898:	685b      	ldr	r3, [r3, #4]
 800989a:	f5b3 0f10 	cmp.w	r3, #9437184	; 0x900000
 800989e:	d022      	beq.n	80098e6 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 80098a0:	683b      	ldr	r3, [r7, #0]
 80098a2:	685b      	ldr	r3, [r3, #4]
 80098a4:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80098a8:	d01d      	beq.n	80098e6 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 80098aa:	683b      	ldr	r3, [r7, #0]
 80098ac:	685b      	ldr	r3, [r3, #4]
 80098ae:	f5b3 0f30 	cmp.w	r3, #11534336	; 0xb00000
 80098b2:	d018      	beq.n	80098e6 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 80098b4:	683b      	ldr	r3, [r7, #0]
 80098b6:	685b      	ldr	r3, [r3, #4]
 80098b8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80098bc:	d013      	beq.n	80098e6 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 80098be:	683b      	ldr	r3, [r7, #0]
 80098c0:	685b      	ldr	r3, [r3, #4]
 80098c2:	f5b3 0f50 	cmp.w	r3, #13631488	; 0xd00000
 80098c6:	d00e      	beq.n	80098e6 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 80098c8:	683b      	ldr	r3, [r7, #0]
 80098ca:	685b      	ldr	r3, [r3, #4]
 80098cc:	f5b3 0f60 	cmp.w	r3, #14680064	; 0xe00000
 80098d0:	d009      	beq.n	80098e6 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 80098d2:	683b      	ldr	r3, [r7, #0]
 80098d4:	685b      	ldr	r3, [r3, #4]
 80098d6:	f5b3 0f70 	cmp.w	r3, #15728640	; 0xf00000
 80098da:	d004      	beq.n	80098e6 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 80098dc:	f240 71ca 	movw	r1, #1994	; 0x7ca
 80098e0:	482f      	ldr	r0, [pc, #188]	; (80099a0 <HAL_TIMEx_MasterConfigSynchronization+0x298>)
 80098e2:	f7f9 f8d2 	bl	8002a8a <assert_failed>

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80098ec:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80098ee:	683b      	ldr	r3, [r7, #0]
 80098f0:	685b      	ldr	r3, [r3, #4]
 80098f2:	68fa      	ldr	r2, [r7, #12]
 80098f4:	4313      	orrs	r3, r2
 80098f6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80098fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009900:	683b      	ldr	r3, [r7, #0]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	68fa      	ldr	r2, [r7, #12]
 8009906:	4313      	orrs	r3, r2
 8009908:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	68fa      	ldr	r2, [r7, #12]
 8009910:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	4a20      	ldr	r2, [pc, #128]	; (8009998 <HAL_TIMEx_MasterConfigSynchronization+0x290>)
 8009918:	4293      	cmp	r3, r2
 800991a:	d022      	beq.n	8009962 <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009924:	d01d      	beq.n	8009962 <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	4a1e      	ldr	r2, [pc, #120]	; (80099a4 <HAL_TIMEx_MasterConfigSynchronization+0x29c>)
 800992c:	4293      	cmp	r3, r2
 800992e:	d018      	beq.n	8009962 <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	4a1c      	ldr	r2, [pc, #112]	; (80099a8 <HAL_TIMEx_MasterConfigSynchronization+0x2a0>)
 8009936:	4293      	cmp	r3, r2
 8009938:	d013      	beq.n	8009962 <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	4a1b      	ldr	r2, [pc, #108]	; (80099ac <HAL_TIMEx_MasterConfigSynchronization+0x2a4>)
 8009940:	4293      	cmp	r3, r2
 8009942:	d00e      	beq.n	8009962 <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	4a14      	ldr	r2, [pc, #80]	; (800999c <HAL_TIMEx_MasterConfigSynchronization+0x294>)
 800994a:	4293      	cmp	r3, r2
 800994c:	d009      	beq.n	8009962 <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	4a17      	ldr	r2, [pc, #92]	; (80099b0 <HAL_TIMEx_MasterConfigSynchronization+0x2a8>)
 8009954:	4293      	cmp	r3, r2
 8009956:	d004      	beq.n	8009962 <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	4a15      	ldr	r2, [pc, #84]	; (80099b4 <HAL_TIMEx_MasterConfigSynchronization+0x2ac>)
 800995e:	4293      	cmp	r3, r2
 8009960:	d10c      	bne.n	800997c <HAL_TIMEx_MasterConfigSynchronization+0x274>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009962:	68bb      	ldr	r3, [r7, #8]
 8009964:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009968:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800996a:	683b      	ldr	r3, [r7, #0]
 800996c:	689b      	ldr	r3, [r3, #8]
 800996e:	68ba      	ldr	r2, [r7, #8]
 8009970:	4313      	orrs	r3, r2
 8009972:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	68ba      	ldr	r2, [r7, #8]
 800997a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	2201      	movs	r2, #1
 8009980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	2200      	movs	r2, #0
 8009988:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800998c:	2300      	movs	r3, #0
}
 800998e:	4618      	mov	r0, r3
 8009990:	3710      	adds	r7, #16
 8009992:	46bd      	mov	sp, r7
 8009994:	bd80      	pop	{r7, pc}
 8009996:	bf00      	nop
 8009998:	40010000 	.word	0x40010000
 800999c:	40010400 	.word	0x40010400
 80099a0:	0801681c 	.word	0x0801681c
 80099a4:	40000400 	.word	0x40000400
 80099a8:	40000800 	.word	0x40000800
 80099ac:	40000c00 	.word	0x40000c00
 80099b0:	40014000 	.word	0x40014000
 80099b4:	40001800 	.word	0x40001800

080099b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80099b8:	b480      	push	{r7}
 80099ba:	b083      	sub	sp, #12
 80099bc:	af00      	add	r7, sp, #0
 80099be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80099c0:	bf00      	nop
 80099c2:	370c      	adds	r7, #12
 80099c4:	46bd      	mov	sp, r7
 80099c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ca:	4770      	bx	lr

080099cc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80099cc:	b480      	push	{r7}
 80099ce:	b083      	sub	sp, #12
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80099d4:	bf00      	nop
 80099d6:	370c      	adds	r7, #12
 80099d8:	46bd      	mov	sp, r7
 80099da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099de:	4770      	bx	lr

080099e0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80099e0:	b480      	push	{r7}
 80099e2:	b083      	sub	sp, #12
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80099e8:	bf00      	nop
 80099ea:	370c      	adds	r7, #12
 80099ec:	46bd      	mov	sp, r7
 80099ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f2:	4770      	bx	lr

080099f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80099f4:	b580      	push	{r7, lr}
 80099f6:	b082      	sub	sp, #8
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d101      	bne.n	8009a06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009a02:	2301      	movs	r3, #1
 8009a04:	e09f      	b.n	8009b46 <HAL_UART_Init+0x152>
  }

  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	699b      	ldr	r3, [r3, #24]
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d02d      	beq.n	8009a6a <HAL_UART_Init+0x76>
  {
    /* Check the parameters */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	4a4f      	ldr	r2, [pc, #316]	; (8009b50 <HAL_UART_Init+0x15c>)
 8009a14:	4293      	cmp	r3, r2
 8009a16:	d055      	beq.n	8009ac4 <HAL_UART_Init+0xd0>
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	4a4d      	ldr	r2, [pc, #308]	; (8009b54 <HAL_UART_Init+0x160>)
 8009a1e:	4293      	cmp	r3, r2
 8009a20:	d050      	beq.n	8009ac4 <HAL_UART_Init+0xd0>
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	4a4c      	ldr	r2, [pc, #304]	; (8009b58 <HAL_UART_Init+0x164>)
 8009a28:	4293      	cmp	r3, r2
 8009a2a:	d04b      	beq.n	8009ac4 <HAL_UART_Init+0xd0>
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	4a4a      	ldr	r2, [pc, #296]	; (8009b5c <HAL_UART_Init+0x168>)
 8009a32:	4293      	cmp	r3, r2
 8009a34:	d046      	beq.n	8009ac4 <HAL_UART_Init+0xd0>
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	4a49      	ldr	r2, [pc, #292]	; (8009b60 <HAL_UART_Init+0x16c>)
 8009a3c:	4293      	cmp	r3, r2
 8009a3e:	d041      	beq.n	8009ac4 <HAL_UART_Init+0xd0>
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	4a47      	ldr	r2, [pc, #284]	; (8009b64 <HAL_UART_Init+0x170>)
 8009a46:	4293      	cmp	r3, r2
 8009a48:	d03c      	beq.n	8009ac4 <HAL_UART_Init+0xd0>
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	4a46      	ldr	r2, [pc, #280]	; (8009b68 <HAL_UART_Init+0x174>)
 8009a50:	4293      	cmp	r3, r2
 8009a52:	d037      	beq.n	8009ac4 <HAL_UART_Init+0xd0>
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	4a44      	ldr	r2, [pc, #272]	; (8009b6c <HAL_UART_Init+0x178>)
 8009a5a:	4293      	cmp	r3, r2
 8009a5c:	d032      	beq.n	8009ac4 <HAL_UART_Init+0xd0>
 8009a5e:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8009a62:	4843      	ldr	r0, [pc, #268]	; (8009b70 <HAL_UART_Init+0x17c>)
 8009a64:	f7f9 f811 	bl	8002a8a <assert_failed>
 8009a68:	e02c      	b.n	8009ac4 <HAL_UART_Init+0xd0>
  }
  else
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	4a38      	ldr	r2, [pc, #224]	; (8009b50 <HAL_UART_Init+0x15c>)
 8009a70:	4293      	cmp	r3, r2
 8009a72:	d027      	beq.n	8009ac4 <HAL_UART_Init+0xd0>
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	4a36      	ldr	r2, [pc, #216]	; (8009b54 <HAL_UART_Init+0x160>)
 8009a7a:	4293      	cmp	r3, r2
 8009a7c:	d022      	beq.n	8009ac4 <HAL_UART_Init+0xd0>
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	4a35      	ldr	r2, [pc, #212]	; (8009b58 <HAL_UART_Init+0x164>)
 8009a84:	4293      	cmp	r3, r2
 8009a86:	d01d      	beq.n	8009ac4 <HAL_UART_Init+0xd0>
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	4a33      	ldr	r2, [pc, #204]	; (8009b5c <HAL_UART_Init+0x168>)
 8009a8e:	4293      	cmp	r3, r2
 8009a90:	d018      	beq.n	8009ac4 <HAL_UART_Init+0xd0>
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	4a32      	ldr	r2, [pc, #200]	; (8009b60 <HAL_UART_Init+0x16c>)
 8009a98:	4293      	cmp	r3, r2
 8009a9a:	d013      	beq.n	8009ac4 <HAL_UART_Init+0xd0>
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	4a30      	ldr	r2, [pc, #192]	; (8009b64 <HAL_UART_Init+0x170>)
 8009aa2:	4293      	cmp	r3, r2
 8009aa4:	d00e      	beq.n	8009ac4 <HAL_UART_Init+0xd0>
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	4a2f      	ldr	r2, [pc, #188]	; (8009b68 <HAL_UART_Init+0x174>)
 8009aac:	4293      	cmp	r3, r2
 8009aae:	d009      	beq.n	8009ac4 <HAL_UART_Init+0xd0>
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	4a2d      	ldr	r2, [pc, #180]	; (8009b6c <HAL_UART_Init+0x178>)
 8009ab6:	4293      	cmp	r3, r2
 8009ab8:	d004      	beq.n	8009ac4 <HAL_UART_Init+0xd0>
 8009aba:	f240 1131 	movw	r1, #305	; 0x131
 8009abe:	482c      	ldr	r0, [pc, #176]	; (8009b70 <HAL_UART_Init+0x17c>)
 8009ac0:	f7f8 ffe3 	bl	8002a8a <assert_failed>
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d106      	bne.n	8009ada <HAL_UART_Init+0xe6>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	2200      	movs	r2, #0
 8009ad0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009ad4:	6878      	ldr	r0, [r7, #4]
 8009ad6:	f7f9 fbd5 	bl	8003284 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	2224      	movs	r2, #36	; 0x24
 8009ade:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	681a      	ldr	r2, [r3, #0]
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	f022 0201 	bic.w	r2, r2, #1
 8009aee:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009af0:	6878      	ldr	r0, [r7, #4]
 8009af2:	f000 fc79 	bl	800a3e8 <UART_SetConfig>
 8009af6:	4603      	mov	r3, r0
 8009af8:	2b01      	cmp	r3, #1
 8009afa:	d101      	bne.n	8009b00 <HAL_UART_Init+0x10c>
  {
    return HAL_ERROR;
 8009afc:	2301      	movs	r3, #1
 8009afe:	e022      	b.n	8009b46 <HAL_UART_Init+0x152>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d002      	beq.n	8009b0e <HAL_UART_Init+0x11a>
  {
    UART_AdvFeatureConfig(huart);
 8009b08:	6878      	ldr	r0, [r7, #4]
 8009b0a:	f000 ff63 	bl	800a9d4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	685a      	ldr	r2, [r3, #4]
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009b1c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	689a      	ldr	r2, [r3, #8]
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009b2c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	681a      	ldr	r2, [r3, #0]
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	f042 0201 	orr.w	r2, r2, #1
 8009b3c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009b3e:	6878      	ldr	r0, [r7, #4]
 8009b40:	f001 f8a0 	bl	800ac84 <UART_CheckIdleState>
 8009b44:	4603      	mov	r3, r0
}
 8009b46:	4618      	mov	r0, r3
 8009b48:	3708      	adds	r7, #8
 8009b4a:	46bd      	mov	sp, r7
 8009b4c:	bd80      	pop	{r7, pc}
 8009b4e:	bf00      	nop
 8009b50:	40011000 	.word	0x40011000
 8009b54:	40004400 	.word	0x40004400
 8009b58:	40004800 	.word	0x40004800
 8009b5c:	40004c00 	.word	0x40004c00
 8009b60:	40005000 	.word	0x40005000
 8009b64:	40011400 	.word	0x40011400
 8009b68:	40007800 	.word	0x40007800
 8009b6c:	40007c00 	.word	0x40007c00
 8009b70:	08016858 	.word	0x08016858

08009b74 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009b74:	b580      	push	{r7, lr}
 8009b76:	b08a      	sub	sp, #40	; 0x28
 8009b78:	af02      	add	r7, sp, #8
 8009b7a:	60f8      	str	r0, [r7, #12]
 8009b7c:	60b9      	str	r1, [r7, #8]
 8009b7e:	603b      	str	r3, [r7, #0]
 8009b80:	4613      	mov	r3, r2
 8009b82:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009b88:	2b20      	cmp	r3, #32
 8009b8a:	d171      	bne.n	8009c70 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8009b8c:	68bb      	ldr	r3, [r7, #8]
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d002      	beq.n	8009b98 <HAL_UART_Transmit+0x24>
 8009b92:	88fb      	ldrh	r3, [r7, #6]
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d101      	bne.n	8009b9c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8009b98:	2301      	movs	r3, #1
 8009b9a:	e06a      	b.n	8009c72 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	2200      	movs	r2, #0
 8009ba0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	2221      	movs	r2, #33	; 0x21
 8009ba8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009baa:	f7f9 fda1 	bl	80036f0 <HAL_GetTick>
 8009bae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	88fa      	ldrh	r2, [r7, #6]
 8009bb4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	88fa      	ldrh	r2, [r7, #6]
 8009bbc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	689b      	ldr	r3, [r3, #8]
 8009bc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009bc8:	d108      	bne.n	8009bdc <HAL_UART_Transmit+0x68>
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	691b      	ldr	r3, [r3, #16]
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d104      	bne.n	8009bdc <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8009bd2:	2300      	movs	r3, #0
 8009bd4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009bd6:	68bb      	ldr	r3, [r7, #8]
 8009bd8:	61bb      	str	r3, [r7, #24]
 8009bda:	e003      	b.n	8009be4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8009bdc:	68bb      	ldr	r3, [r7, #8]
 8009bde:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009be0:	2300      	movs	r3, #0
 8009be2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009be4:	e02c      	b.n	8009c40 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009be6:	683b      	ldr	r3, [r7, #0]
 8009be8:	9300      	str	r3, [sp, #0]
 8009bea:	697b      	ldr	r3, [r7, #20]
 8009bec:	2200      	movs	r2, #0
 8009bee:	2180      	movs	r1, #128	; 0x80
 8009bf0:	68f8      	ldr	r0, [r7, #12]
 8009bf2:	f001 f87e 	bl	800acf2 <UART_WaitOnFlagUntilTimeout>
 8009bf6:	4603      	mov	r3, r0
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d001      	beq.n	8009c00 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8009bfc:	2303      	movs	r3, #3
 8009bfe:	e038      	b.n	8009c72 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8009c00:	69fb      	ldr	r3, [r7, #28]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d10b      	bne.n	8009c1e <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009c06:	69bb      	ldr	r3, [r7, #24]
 8009c08:	881b      	ldrh	r3, [r3, #0]
 8009c0a:	461a      	mov	r2, r3
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009c14:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8009c16:	69bb      	ldr	r3, [r7, #24]
 8009c18:	3302      	adds	r3, #2
 8009c1a:	61bb      	str	r3, [r7, #24]
 8009c1c:	e007      	b.n	8009c2e <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009c1e:	69fb      	ldr	r3, [r7, #28]
 8009c20:	781a      	ldrb	r2, [r3, #0]
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8009c28:	69fb      	ldr	r3, [r7, #28]
 8009c2a:	3301      	adds	r3, #1
 8009c2c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009c34:	b29b      	uxth	r3, r3
 8009c36:	3b01      	subs	r3, #1
 8009c38:	b29a      	uxth	r2, r3
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009c46:	b29b      	uxth	r3, r3
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d1cc      	bne.n	8009be6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009c4c:	683b      	ldr	r3, [r7, #0]
 8009c4e:	9300      	str	r3, [sp, #0]
 8009c50:	697b      	ldr	r3, [r7, #20]
 8009c52:	2200      	movs	r2, #0
 8009c54:	2140      	movs	r1, #64	; 0x40
 8009c56:	68f8      	ldr	r0, [r7, #12]
 8009c58:	f001 f84b 	bl	800acf2 <UART_WaitOnFlagUntilTimeout>
 8009c5c:	4603      	mov	r3, r0
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d001      	beq.n	8009c66 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8009c62:	2303      	movs	r3, #3
 8009c64:	e005      	b.n	8009c72 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	2220      	movs	r2, #32
 8009c6a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8009c6c:	2300      	movs	r3, #0
 8009c6e:	e000      	b.n	8009c72 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8009c70:	2302      	movs	r3, #2
  }
}
 8009c72:	4618      	mov	r0, r3
 8009c74:	3720      	adds	r7, #32
 8009c76:	46bd      	mov	sp, r7
 8009c78:	bd80      	pop	{r7, pc}

08009c7a <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009c7a:	b580      	push	{r7, lr}
 8009c7c:	b08a      	sub	sp, #40	; 0x28
 8009c7e:	af02      	add	r7, sp, #8
 8009c80:	60f8      	str	r0, [r7, #12]
 8009c82:	60b9      	str	r1, [r7, #8]
 8009c84:	603b      	str	r3, [r7, #0]
 8009c86:	4613      	mov	r3, r2
 8009c88:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009c90:	2b20      	cmp	r3, #32
 8009c92:	f040 80b1 	bne.w	8009df8 <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 8009c96:	68bb      	ldr	r3, [r7, #8]
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d002      	beq.n	8009ca2 <HAL_UART_Receive+0x28>
 8009c9c:	88fb      	ldrh	r3, [r7, #6]
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d101      	bne.n	8009ca6 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8009ca2:	2301      	movs	r3, #1
 8009ca4:	e0a9      	b.n	8009dfa <HAL_UART_Receive+0x180>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	2200      	movs	r2, #0
 8009caa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	2222      	movs	r2, #34	; 0x22
 8009cb2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	2200      	movs	r2, #0
 8009cba:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009cbc:	f7f9 fd18 	bl	80036f0 <HAL_GetTick>
 8009cc0:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	88fa      	ldrh	r2, [r7, #6]
 8009cc6:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	88fa      	ldrh	r2, [r7, #6]
 8009cce:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	689b      	ldr	r3, [r3, #8]
 8009cd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009cda:	d10e      	bne.n	8009cfa <HAL_UART_Receive+0x80>
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	691b      	ldr	r3, [r3, #16]
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d105      	bne.n	8009cf0 <HAL_UART_Receive+0x76>
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	f240 12ff 	movw	r2, #511	; 0x1ff
 8009cea:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009cee:	e02d      	b.n	8009d4c <HAL_UART_Receive+0xd2>
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	22ff      	movs	r2, #255	; 0xff
 8009cf4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009cf8:	e028      	b.n	8009d4c <HAL_UART_Receive+0xd2>
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	689b      	ldr	r3, [r3, #8]
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d10d      	bne.n	8009d1e <HAL_UART_Receive+0xa4>
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	691b      	ldr	r3, [r3, #16]
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d104      	bne.n	8009d14 <HAL_UART_Receive+0x9a>
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	22ff      	movs	r2, #255	; 0xff
 8009d0e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009d12:	e01b      	b.n	8009d4c <HAL_UART_Receive+0xd2>
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	227f      	movs	r2, #127	; 0x7f
 8009d18:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009d1c:	e016      	b.n	8009d4c <HAL_UART_Receive+0xd2>
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	689b      	ldr	r3, [r3, #8]
 8009d22:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009d26:	d10d      	bne.n	8009d44 <HAL_UART_Receive+0xca>
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	691b      	ldr	r3, [r3, #16]
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d104      	bne.n	8009d3a <HAL_UART_Receive+0xc0>
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	227f      	movs	r2, #127	; 0x7f
 8009d34:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009d38:	e008      	b.n	8009d4c <HAL_UART_Receive+0xd2>
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	223f      	movs	r2, #63	; 0x3f
 8009d3e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009d42:	e003      	b.n	8009d4c <HAL_UART_Receive+0xd2>
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	2200      	movs	r2, #0
 8009d48:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009d52:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	689b      	ldr	r3, [r3, #8]
 8009d58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009d5c:	d108      	bne.n	8009d70 <HAL_UART_Receive+0xf6>
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	691b      	ldr	r3, [r3, #16]
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d104      	bne.n	8009d70 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8009d66:	2300      	movs	r3, #0
 8009d68:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009d6a:	68bb      	ldr	r3, [r7, #8]
 8009d6c:	61bb      	str	r3, [r7, #24]
 8009d6e:	e003      	b.n	8009d78 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8009d70:	68bb      	ldr	r3, [r7, #8]
 8009d72:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009d74:	2300      	movs	r3, #0
 8009d76:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8009d78:	e032      	b.n	8009de0 <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8009d7a:	683b      	ldr	r3, [r7, #0]
 8009d7c:	9300      	str	r3, [sp, #0]
 8009d7e:	697b      	ldr	r3, [r7, #20]
 8009d80:	2200      	movs	r2, #0
 8009d82:	2120      	movs	r1, #32
 8009d84:	68f8      	ldr	r0, [r7, #12]
 8009d86:	f000 ffb4 	bl	800acf2 <UART_WaitOnFlagUntilTimeout>
 8009d8a:	4603      	mov	r3, r0
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d001      	beq.n	8009d94 <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 8009d90:	2303      	movs	r3, #3
 8009d92:	e032      	b.n	8009dfa <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 8009d94:	69fb      	ldr	r3, [r7, #28]
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d10c      	bne.n	8009db4 <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009da0:	b29a      	uxth	r2, r3
 8009da2:	8a7b      	ldrh	r3, [r7, #18]
 8009da4:	4013      	ands	r3, r2
 8009da6:	b29a      	uxth	r2, r3
 8009da8:	69bb      	ldr	r3, [r7, #24]
 8009daa:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8009dac:	69bb      	ldr	r3, [r7, #24]
 8009dae:	3302      	adds	r3, #2
 8009db0:	61bb      	str	r3, [r7, #24]
 8009db2:	e00c      	b.n	8009dce <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dba:	b2da      	uxtb	r2, r3
 8009dbc:	8a7b      	ldrh	r3, [r7, #18]
 8009dbe:	b2db      	uxtb	r3, r3
 8009dc0:	4013      	ands	r3, r2
 8009dc2:	b2da      	uxtb	r2, r3
 8009dc4:	69fb      	ldr	r3, [r7, #28]
 8009dc6:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8009dc8:	69fb      	ldr	r3, [r7, #28]
 8009dca:	3301      	adds	r3, #1
 8009dcc:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009dd4:	b29b      	uxth	r3, r3
 8009dd6:	3b01      	subs	r3, #1
 8009dd8:	b29a      	uxth	r2, r3
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009de6:	b29b      	uxth	r3, r3
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d1c6      	bne.n	8009d7a <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	2220      	movs	r2, #32
 8009df0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8009df4:	2300      	movs	r3, #0
 8009df6:	e000      	b.n	8009dfa <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 8009df8:	2302      	movs	r3, #2
  }
}
 8009dfa:	4618      	mov	r0, r3
 8009dfc:	3720      	adds	r7, #32
 8009dfe:	46bd      	mov	sp, r7
 8009e00:	bd80      	pop	{r7, pc}
	...

08009e04 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009e04:	b580      	push	{r7, lr}
 8009e06:	b0ba      	sub	sp, #232	; 0xe8
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	69db      	ldr	r3, [r3, #28]
 8009e12:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	689b      	ldr	r3, [r3, #8]
 8009e26:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009e2a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8009e2e:	f640 030f 	movw	r3, #2063	; 0x80f
 8009e32:	4013      	ands	r3, r2
 8009e34:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8009e38:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d115      	bne.n	8009e6c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8009e40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e44:	f003 0320 	and.w	r3, r3, #32
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d00f      	beq.n	8009e6c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009e4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009e50:	f003 0320 	and.w	r3, r3, #32
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d009      	beq.n	8009e6c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	f000 8297 	beq.w	800a390 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009e66:	6878      	ldr	r0, [r7, #4]
 8009e68:	4798      	blx	r3
      }
      return;
 8009e6a:	e291      	b.n	800a390 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009e6c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	f000 8117 	beq.w	800a0a4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8009e76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009e7a:	f003 0301 	and.w	r3, r3, #1
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d106      	bne.n	8009e90 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8009e82:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8009e86:	4b85      	ldr	r3, [pc, #532]	; (800a09c <HAL_UART_IRQHandler+0x298>)
 8009e88:	4013      	ands	r3, r2
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	f000 810a 	beq.w	800a0a4 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009e90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e94:	f003 0301 	and.w	r3, r3, #1
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d011      	beq.n	8009ec0 <HAL_UART_IRQHandler+0xbc>
 8009e9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009ea0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d00b      	beq.n	8009ec0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	2201      	movs	r2, #1
 8009eae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009eb6:	f043 0201 	orr.w	r2, r3, #1
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009ec0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009ec4:	f003 0302 	and.w	r3, r3, #2
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d011      	beq.n	8009ef0 <HAL_UART_IRQHandler+0xec>
 8009ecc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009ed0:	f003 0301 	and.w	r3, r3, #1
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d00b      	beq.n	8009ef0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	2202      	movs	r2, #2
 8009ede:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009ee6:	f043 0204 	orr.w	r2, r3, #4
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009ef0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009ef4:	f003 0304 	and.w	r3, r3, #4
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d011      	beq.n	8009f20 <HAL_UART_IRQHandler+0x11c>
 8009efc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009f00:	f003 0301 	and.w	r3, r3, #1
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d00b      	beq.n	8009f20 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	2204      	movs	r2, #4
 8009f0e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009f16:	f043 0202 	orr.w	r2, r3, #2
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009f20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009f24:	f003 0308 	and.w	r3, r3, #8
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d017      	beq.n	8009f5c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009f2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009f30:	f003 0320 	and.w	r3, r3, #32
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d105      	bne.n	8009f44 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8009f38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009f3c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d00b      	beq.n	8009f5c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	2208      	movs	r2, #8
 8009f4a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009f52:	f043 0208 	orr.w	r2, r3, #8
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009f5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009f60:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d012      	beq.n	8009f8e <HAL_UART_IRQHandler+0x18a>
 8009f68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009f6c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d00c      	beq.n	8009f8e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009f7c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009f84:	f043 0220 	orr.w	r2, r3, #32
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	f000 81fd 	beq.w	800a394 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8009f9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009f9e:	f003 0320 	and.w	r3, r3, #32
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d00d      	beq.n	8009fc2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009fa6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009faa:	f003 0320 	and.w	r3, r3, #32
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d007      	beq.n	8009fc2 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d003      	beq.n	8009fc2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009fbe:	6878      	ldr	r0, [r7, #4]
 8009fc0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009fc8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	689b      	ldr	r3, [r3, #8]
 8009fd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009fd6:	2b40      	cmp	r3, #64	; 0x40
 8009fd8:	d005      	beq.n	8009fe6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009fda:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009fde:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d04f      	beq.n	800a086 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009fe6:	6878      	ldr	r0, [r7, #4]
 8009fe8:	f000 ff49 	bl	800ae7e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	689b      	ldr	r3, [r3, #8]
 8009ff2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ff6:	2b40      	cmp	r3, #64	; 0x40
 8009ff8:	d141      	bne.n	800a07e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	3308      	adds	r3, #8
 800a000:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a004:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a008:	e853 3f00 	ldrex	r3, [r3]
 800a00c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800a010:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a014:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a018:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	3308      	adds	r3, #8
 800a022:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a026:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a02a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a02e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a032:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a036:	e841 2300 	strex	r3, r2, [r1]
 800a03a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800a03e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a042:	2b00      	cmp	r3, #0
 800a044:	d1d9      	bne.n	8009ffa <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d013      	beq.n	800a076 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a052:	4a13      	ldr	r2, [pc, #76]	; (800a0a0 <HAL_UART_IRQHandler+0x29c>)
 800a054:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a05a:	4618      	mov	r0, r3
 800a05c:	f7f9 fd28 	bl	8003ab0 <HAL_DMA_Abort_IT>
 800a060:	4603      	mov	r3, r0
 800a062:	2b00      	cmp	r3, #0
 800a064:	d017      	beq.n	800a096 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a06a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a06c:	687a      	ldr	r2, [r7, #4]
 800a06e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800a070:	4610      	mov	r0, r2
 800a072:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a074:	e00f      	b.n	800a096 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a076:	6878      	ldr	r0, [r7, #4]
 800a078:	f000 f9a0 	bl	800a3bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a07c:	e00b      	b.n	800a096 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a07e:	6878      	ldr	r0, [r7, #4]
 800a080:	f000 f99c 	bl	800a3bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a084:	e007      	b.n	800a096 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a086:	6878      	ldr	r0, [r7, #4]
 800a088:	f000 f998 	bl	800a3bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	2200      	movs	r2, #0
 800a090:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 800a094:	e17e      	b.n	800a394 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a096:	bf00      	nop
    return;
 800a098:	e17c      	b.n	800a394 <HAL_UART_IRQHandler+0x590>
 800a09a:	bf00      	nop
 800a09c:	04000120 	.word	0x04000120
 800a0a0:	0800af47 	.word	0x0800af47

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a0a8:	2b01      	cmp	r3, #1
 800a0aa:	f040 814c 	bne.w	800a346 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a0ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a0b2:	f003 0310 	and.w	r3, r3, #16
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	f000 8145 	beq.w	800a346 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a0bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a0c0:	f003 0310 	and.w	r3, r3, #16
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	f000 813e 	beq.w	800a346 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	2210      	movs	r2, #16
 800a0d0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	689b      	ldr	r3, [r3, #8]
 800a0d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0dc:	2b40      	cmp	r3, #64	; 0x40
 800a0de:	f040 80b6 	bne.w	800a24e <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	685b      	ldr	r3, [r3, #4]
 800a0ea:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a0ee:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	f000 8150 	beq.w	800a398 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a0fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a102:	429a      	cmp	r2, r3
 800a104:	f080 8148 	bcs.w	800a398 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a10e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a116:	69db      	ldr	r3, [r3, #28]
 800a118:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a11c:	f000 8086 	beq.w	800a22c <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a128:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a12c:	e853 3f00 	ldrex	r3, [r3]
 800a130:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a134:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a138:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a13c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	461a      	mov	r2, r3
 800a146:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a14a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a14e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a152:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a156:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a15a:	e841 2300 	strex	r3, r2, [r1]
 800a15e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a162:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a166:	2b00      	cmp	r3, #0
 800a168:	d1da      	bne.n	800a120 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	3308      	adds	r3, #8
 800a170:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a172:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a174:	e853 3f00 	ldrex	r3, [r3]
 800a178:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a17a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a17c:	f023 0301 	bic.w	r3, r3, #1
 800a180:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	3308      	adds	r3, #8
 800a18a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a18e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a192:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a194:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a196:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a19a:	e841 2300 	strex	r3, r2, [r1]
 800a19e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a1a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d1e1      	bne.n	800a16a <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	3308      	adds	r3, #8
 800a1ac:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a1b0:	e853 3f00 	ldrex	r3, [r3]
 800a1b4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a1b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a1b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a1bc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	3308      	adds	r3, #8
 800a1c6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a1ca:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a1cc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1ce:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a1d0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a1d2:	e841 2300 	strex	r3, r2, [r1]
 800a1d6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a1d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d1e3      	bne.n	800a1a6 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	2220      	movs	r2, #32
 800a1e2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	2200      	movs	r2, #0
 800a1ea:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a1f4:	e853 3f00 	ldrex	r3, [r3]
 800a1f8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a1fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a1fc:	f023 0310 	bic.w	r3, r3, #16
 800a200:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	461a      	mov	r2, r3
 800a20a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a20e:	65bb      	str	r3, [r7, #88]	; 0x58
 800a210:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a212:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a214:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a216:	e841 2300 	strex	r3, r2, [r1]
 800a21a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a21c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d1e4      	bne.n	800a1ec <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a226:	4618      	mov	r0, r3
 800a228:	f7f9 fbd2 	bl	80039d0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	2202      	movs	r2, #2
 800a230:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a23e:	b29b      	uxth	r3, r3
 800a240:	1ad3      	subs	r3, r2, r3
 800a242:	b29b      	uxth	r3, r3
 800a244:	4619      	mov	r1, r3
 800a246:	6878      	ldr	r0, [r7, #4]
 800a248:	f000 f8c2 	bl	800a3d0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a24c:	e0a4      	b.n	800a398 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a25a:	b29b      	uxth	r3, r3
 800a25c:	1ad3      	subs	r3, r2, r3
 800a25e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a268:	b29b      	uxth	r3, r3
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	f000 8096 	beq.w	800a39c <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 800a270:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a274:	2b00      	cmp	r3, #0
 800a276:	f000 8091 	beq.w	800a39c <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a282:	e853 3f00 	ldrex	r3, [r3]
 800a286:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a288:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a28a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a28e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	461a      	mov	r2, r3
 800a298:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a29c:	647b      	str	r3, [r7, #68]	; 0x44
 800a29e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2a0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a2a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a2a4:	e841 2300 	strex	r3, r2, [r1]
 800a2a8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a2aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d1e4      	bne.n	800a27a <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	3308      	adds	r3, #8
 800a2b6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2ba:	e853 3f00 	ldrex	r3, [r3]
 800a2be:	623b      	str	r3, [r7, #32]
   return(result);
 800a2c0:	6a3b      	ldr	r3, [r7, #32]
 800a2c2:	f023 0301 	bic.w	r3, r3, #1
 800a2c6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	3308      	adds	r3, #8
 800a2d0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a2d4:	633a      	str	r2, [r7, #48]	; 0x30
 800a2d6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2d8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a2da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a2dc:	e841 2300 	strex	r3, r2, [r1]
 800a2e0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a2e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d1e3      	bne.n	800a2b0 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	2220      	movs	r2, #32
 800a2ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	2200      	movs	r2, #0
 800a2f4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	2200      	movs	r2, #0
 800a2fa:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a302:	693b      	ldr	r3, [r7, #16]
 800a304:	e853 3f00 	ldrex	r3, [r3]
 800a308:	60fb      	str	r3, [r7, #12]
   return(result);
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	f023 0310 	bic.w	r3, r3, #16
 800a310:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	461a      	mov	r2, r3
 800a31a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a31e:	61fb      	str	r3, [r7, #28]
 800a320:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a322:	69b9      	ldr	r1, [r7, #24]
 800a324:	69fa      	ldr	r2, [r7, #28]
 800a326:	e841 2300 	strex	r3, r2, [r1]
 800a32a:	617b      	str	r3, [r7, #20]
   return(result);
 800a32c:	697b      	ldr	r3, [r7, #20]
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d1e4      	bne.n	800a2fc <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	2202      	movs	r2, #2
 800a336:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a338:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a33c:	4619      	mov	r1, r3
 800a33e:	6878      	ldr	r0, [r7, #4]
 800a340:	f000 f846 	bl	800a3d0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a344:	e02a      	b.n	800a39c <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800a346:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a34a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d00e      	beq.n	800a370 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800a352:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a356:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d008      	beq.n	800a370 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a362:	2b00      	cmp	r3, #0
 800a364:	d01c      	beq.n	800a3a0 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a36a:	6878      	ldr	r0, [r7, #4]
 800a36c:	4798      	blx	r3
    }
    return;
 800a36e:	e017      	b.n	800a3a0 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a370:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a374:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d012      	beq.n	800a3a2 <HAL_UART_IRQHandler+0x59e>
 800a37c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a380:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a384:	2b00      	cmp	r3, #0
 800a386:	d00c      	beq.n	800a3a2 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 800a388:	6878      	ldr	r0, [r7, #4]
 800a38a:	f000 fdf2 	bl	800af72 <UART_EndTransmit_IT>
    return;
 800a38e:	e008      	b.n	800a3a2 <HAL_UART_IRQHandler+0x59e>
      return;
 800a390:	bf00      	nop
 800a392:	e006      	b.n	800a3a2 <HAL_UART_IRQHandler+0x59e>
    return;
 800a394:	bf00      	nop
 800a396:	e004      	b.n	800a3a2 <HAL_UART_IRQHandler+0x59e>
      return;
 800a398:	bf00      	nop
 800a39a:	e002      	b.n	800a3a2 <HAL_UART_IRQHandler+0x59e>
      return;
 800a39c:	bf00      	nop
 800a39e:	e000      	b.n	800a3a2 <HAL_UART_IRQHandler+0x59e>
    return;
 800a3a0:	bf00      	nop
  }

}
 800a3a2:	37e8      	adds	r7, #232	; 0xe8
 800a3a4:	46bd      	mov	sp, r7
 800a3a6:	bd80      	pop	{r7, pc}

0800a3a8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a3a8:	b480      	push	{r7}
 800a3aa:	b083      	sub	sp, #12
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a3b0:	bf00      	nop
 800a3b2:	370c      	adds	r7, #12
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ba:	4770      	bx	lr

0800a3bc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a3bc:	b480      	push	{r7}
 800a3be:	b083      	sub	sp, #12
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a3c4:	bf00      	nop
 800a3c6:	370c      	adds	r7, #12
 800a3c8:	46bd      	mov	sp, r7
 800a3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ce:	4770      	bx	lr

0800a3d0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a3d0:	b480      	push	{r7}
 800a3d2:	b083      	sub	sp, #12
 800a3d4:	af00      	add	r7, sp, #0
 800a3d6:	6078      	str	r0, [r7, #4]
 800a3d8:	460b      	mov	r3, r1
 800a3da:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a3dc:	bf00      	nop
 800a3de:	370c      	adds	r7, #12
 800a3e0:	46bd      	mov	sp, r7
 800a3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e6:	4770      	bx	lr

0800a3e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a3e8:	b580      	push	{r7, lr}
 800a3ea:	b088      	sub	sp, #32
 800a3ec:	af00      	add	r7, sp, #0
 800a3ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a3f0:	2300      	movs	r3, #0
 800a3f2:	77bb      	strb	r3, [r7, #30]
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	685b      	ldr	r3, [r3, #4]
 800a3f8:	4aa0      	ldr	r2, [pc, #640]	; (800a67c <UART_SetConfig+0x294>)
 800a3fa:	4293      	cmp	r3, r2
 800a3fc:	d904      	bls.n	800a408 <UART_SetConfig+0x20>
 800a3fe:	f640 315d 	movw	r1, #2909	; 0xb5d
 800a402:	489f      	ldr	r0, [pc, #636]	; (800a680 <UART_SetConfig+0x298>)
 800a404:	f7f8 fb41 	bl	8002a8a <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	689b      	ldr	r3, [r3, #8]
 800a40c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a410:	d00d      	beq.n	800a42e <UART_SetConfig+0x46>
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	689b      	ldr	r3, [r3, #8]
 800a416:	2b00      	cmp	r3, #0
 800a418:	d009      	beq.n	800a42e <UART_SetConfig+0x46>
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	689b      	ldr	r3, [r3, #8]
 800a41e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a422:	d004      	beq.n	800a42e <UART_SetConfig+0x46>
 800a424:	f640 315e 	movw	r1, #2910	; 0xb5e
 800a428:	4895      	ldr	r0, [pc, #596]	; (800a680 <UART_SetConfig+0x298>)
 800a42a:	f7f8 fb2e 	bl	8002a8a <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	68db      	ldr	r3, [r3, #12]
 800a432:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a436:	d012      	beq.n	800a45e <UART_SetConfig+0x76>
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	68db      	ldr	r3, [r3, #12]
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d00e      	beq.n	800a45e <UART_SetConfig+0x76>
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	68db      	ldr	r3, [r3, #12]
 800a444:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a448:	d009      	beq.n	800a45e <UART_SetConfig+0x76>
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	68db      	ldr	r3, [r3, #12]
 800a44e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a452:	d004      	beq.n	800a45e <UART_SetConfig+0x76>
 800a454:	f640 315f 	movw	r1, #2911	; 0xb5f
 800a458:	4889      	ldr	r0, [pc, #548]	; (800a680 <UART_SetConfig+0x298>)
 800a45a:	f7f8 fb16 	bl	8002a8a <assert_failed>
  assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	6a1b      	ldr	r3, [r3, #32]
 800a462:	2b00      	cmp	r3, #0
 800a464:	d009      	beq.n	800a47a <UART_SetConfig+0x92>
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	6a1b      	ldr	r3, [r3, #32]
 800a46a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a46e:	d004      	beq.n	800a47a <UART_SetConfig+0x92>
 800a470:	f44f 6136 	mov.w	r1, #2912	; 0xb60
 800a474:	4882      	ldr	r0, [pc, #520]	; (800a680 <UART_SetConfig+0x298>)
 800a476:	f7f8 fb08 	bl	8002a8a <assert_failed>

  assert_param(IS_UART_PARITY(huart->Init.Parity));
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	691b      	ldr	r3, [r3, #16]
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d00e      	beq.n	800a4a0 <UART_SetConfig+0xb8>
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	691b      	ldr	r3, [r3, #16]
 800a486:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a48a:	d009      	beq.n	800a4a0 <UART_SetConfig+0xb8>
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	691b      	ldr	r3, [r3, #16]
 800a490:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800a494:	d004      	beq.n	800a4a0 <UART_SetConfig+0xb8>
 800a496:	f640 3162 	movw	r1, #2914	; 0xb62
 800a49a:	4879      	ldr	r0, [pc, #484]	; (800a680 <UART_SetConfig+0x298>)
 800a49c:	f7f8 faf5 	bl	8002a8a <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	695b      	ldr	r3, [r3, #20]
 800a4a4:	f023 030c 	bic.w	r3, r3, #12
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d103      	bne.n	800a4b4 <UART_SetConfig+0xcc>
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	695b      	ldr	r3, [r3, #20]
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d104      	bne.n	800a4be <UART_SetConfig+0xd6>
 800a4b4:	f640 3163 	movw	r1, #2915	; 0xb63
 800a4b8:	4871      	ldr	r0, [pc, #452]	; (800a680 <UART_SetConfig+0x298>)
 800a4ba:	f7f8 fae6 	bl	8002a8a <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	699b      	ldr	r3, [r3, #24]
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d013      	beq.n	800a4ee <UART_SetConfig+0x106>
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	699b      	ldr	r3, [r3, #24]
 800a4ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a4ce:	d00e      	beq.n	800a4ee <UART_SetConfig+0x106>
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	699b      	ldr	r3, [r3, #24]
 800a4d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a4d8:	d009      	beq.n	800a4ee <UART_SetConfig+0x106>
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	699b      	ldr	r3, [r3, #24]
 800a4de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a4e2:	d004      	beq.n	800a4ee <UART_SetConfig+0x106>
 800a4e4:	f640 3164 	movw	r1, #2916	; 0xb64
 800a4e8:	4865      	ldr	r0, [pc, #404]	; (800a680 <UART_SetConfig+0x298>)
 800a4ea:	f7f8 face 	bl	8002a8a <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	69db      	ldr	r3, [r3, #28]
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d009      	beq.n	800a50a <UART_SetConfig+0x122>
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	69db      	ldr	r3, [r3, #28]
 800a4fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a4fe:	d004      	beq.n	800a50a <UART_SetConfig+0x122>
 800a500:	f640 3165 	movw	r1, #2917	; 0xb65
 800a504:	485e      	ldr	r0, [pc, #376]	; (800a680 <UART_SetConfig+0x298>)
 800a506:	f7f8 fac0 	bl	8002a8a <assert_failed>
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	689a      	ldr	r2, [r3, #8]
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	691b      	ldr	r3, [r3, #16]
 800a512:	431a      	orrs	r2, r3
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	695b      	ldr	r3, [r3, #20]
 800a518:	431a      	orrs	r2, r3
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	69db      	ldr	r3, [r3, #28]
 800a51e:	4313      	orrs	r3, r2
 800a520:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	681a      	ldr	r2, [r3, #0]
 800a528:	4b56      	ldr	r3, [pc, #344]	; (800a684 <UART_SetConfig+0x29c>)
 800a52a:	4013      	ands	r3, r2
 800a52c:	687a      	ldr	r2, [r7, #4]
 800a52e:	6812      	ldr	r2, [r2, #0]
 800a530:	6979      	ldr	r1, [r7, #20]
 800a532:	430b      	orrs	r3, r1
 800a534:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	685b      	ldr	r3, [r3, #4]
 800a53c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	68da      	ldr	r2, [r3, #12]
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	430a      	orrs	r2, r1
 800a54a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	699b      	ldr	r3, [r3, #24]
 800a550:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	6a1b      	ldr	r3, [r3, #32]
 800a556:	697a      	ldr	r2, [r7, #20]
 800a558:	4313      	orrs	r3, r2
 800a55a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	689b      	ldr	r3, [r3, #8]
 800a562:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	697a      	ldr	r2, [r7, #20]
 800a56c:	430a      	orrs	r2, r1
 800a56e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	4a44      	ldr	r2, [pc, #272]	; (800a688 <UART_SetConfig+0x2a0>)
 800a576:	4293      	cmp	r3, r2
 800a578:	d121      	bne.n	800a5be <UART_SetConfig+0x1d6>
 800a57a:	4b44      	ldr	r3, [pc, #272]	; (800a68c <UART_SetConfig+0x2a4>)
 800a57c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a580:	f003 0303 	and.w	r3, r3, #3
 800a584:	2b03      	cmp	r3, #3
 800a586:	d817      	bhi.n	800a5b8 <UART_SetConfig+0x1d0>
 800a588:	a201      	add	r2, pc, #4	; (adr r2, 800a590 <UART_SetConfig+0x1a8>)
 800a58a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a58e:	bf00      	nop
 800a590:	0800a5a1 	.word	0x0800a5a1
 800a594:	0800a5ad 	.word	0x0800a5ad
 800a598:	0800a5a7 	.word	0x0800a5a7
 800a59c:	0800a5b3 	.word	0x0800a5b3
 800a5a0:	2301      	movs	r3, #1
 800a5a2:	77fb      	strb	r3, [r7, #31]
 800a5a4:	e14c      	b.n	800a840 <UART_SetConfig+0x458>
 800a5a6:	2302      	movs	r3, #2
 800a5a8:	77fb      	strb	r3, [r7, #31]
 800a5aa:	e149      	b.n	800a840 <UART_SetConfig+0x458>
 800a5ac:	2304      	movs	r3, #4
 800a5ae:	77fb      	strb	r3, [r7, #31]
 800a5b0:	e146      	b.n	800a840 <UART_SetConfig+0x458>
 800a5b2:	2308      	movs	r3, #8
 800a5b4:	77fb      	strb	r3, [r7, #31]
 800a5b6:	e143      	b.n	800a840 <UART_SetConfig+0x458>
 800a5b8:	2310      	movs	r3, #16
 800a5ba:	77fb      	strb	r3, [r7, #31]
 800a5bc:	e140      	b.n	800a840 <UART_SetConfig+0x458>
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	4a33      	ldr	r2, [pc, #204]	; (800a690 <UART_SetConfig+0x2a8>)
 800a5c4:	4293      	cmp	r3, r2
 800a5c6:	d132      	bne.n	800a62e <UART_SetConfig+0x246>
 800a5c8:	4b30      	ldr	r3, [pc, #192]	; (800a68c <UART_SetConfig+0x2a4>)
 800a5ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a5ce:	f003 030c 	and.w	r3, r3, #12
 800a5d2:	2b0c      	cmp	r3, #12
 800a5d4:	d828      	bhi.n	800a628 <UART_SetConfig+0x240>
 800a5d6:	a201      	add	r2, pc, #4	; (adr r2, 800a5dc <UART_SetConfig+0x1f4>)
 800a5d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5dc:	0800a611 	.word	0x0800a611
 800a5e0:	0800a629 	.word	0x0800a629
 800a5e4:	0800a629 	.word	0x0800a629
 800a5e8:	0800a629 	.word	0x0800a629
 800a5ec:	0800a61d 	.word	0x0800a61d
 800a5f0:	0800a629 	.word	0x0800a629
 800a5f4:	0800a629 	.word	0x0800a629
 800a5f8:	0800a629 	.word	0x0800a629
 800a5fc:	0800a617 	.word	0x0800a617
 800a600:	0800a629 	.word	0x0800a629
 800a604:	0800a629 	.word	0x0800a629
 800a608:	0800a629 	.word	0x0800a629
 800a60c:	0800a623 	.word	0x0800a623
 800a610:	2300      	movs	r3, #0
 800a612:	77fb      	strb	r3, [r7, #31]
 800a614:	e114      	b.n	800a840 <UART_SetConfig+0x458>
 800a616:	2302      	movs	r3, #2
 800a618:	77fb      	strb	r3, [r7, #31]
 800a61a:	e111      	b.n	800a840 <UART_SetConfig+0x458>
 800a61c:	2304      	movs	r3, #4
 800a61e:	77fb      	strb	r3, [r7, #31]
 800a620:	e10e      	b.n	800a840 <UART_SetConfig+0x458>
 800a622:	2308      	movs	r3, #8
 800a624:	77fb      	strb	r3, [r7, #31]
 800a626:	e10b      	b.n	800a840 <UART_SetConfig+0x458>
 800a628:	2310      	movs	r3, #16
 800a62a:	77fb      	strb	r3, [r7, #31]
 800a62c:	e108      	b.n	800a840 <UART_SetConfig+0x458>
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	4a18      	ldr	r2, [pc, #96]	; (800a694 <UART_SetConfig+0x2ac>)
 800a634:	4293      	cmp	r3, r2
 800a636:	d12f      	bne.n	800a698 <UART_SetConfig+0x2b0>
 800a638:	4b14      	ldr	r3, [pc, #80]	; (800a68c <UART_SetConfig+0x2a4>)
 800a63a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a63e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a642:	2b30      	cmp	r3, #48	; 0x30
 800a644:	d013      	beq.n	800a66e <UART_SetConfig+0x286>
 800a646:	2b30      	cmp	r3, #48	; 0x30
 800a648:	d814      	bhi.n	800a674 <UART_SetConfig+0x28c>
 800a64a:	2b20      	cmp	r3, #32
 800a64c:	d009      	beq.n	800a662 <UART_SetConfig+0x27a>
 800a64e:	2b20      	cmp	r3, #32
 800a650:	d810      	bhi.n	800a674 <UART_SetConfig+0x28c>
 800a652:	2b00      	cmp	r3, #0
 800a654:	d002      	beq.n	800a65c <UART_SetConfig+0x274>
 800a656:	2b10      	cmp	r3, #16
 800a658:	d006      	beq.n	800a668 <UART_SetConfig+0x280>
 800a65a:	e00b      	b.n	800a674 <UART_SetConfig+0x28c>
 800a65c:	2300      	movs	r3, #0
 800a65e:	77fb      	strb	r3, [r7, #31]
 800a660:	e0ee      	b.n	800a840 <UART_SetConfig+0x458>
 800a662:	2302      	movs	r3, #2
 800a664:	77fb      	strb	r3, [r7, #31]
 800a666:	e0eb      	b.n	800a840 <UART_SetConfig+0x458>
 800a668:	2304      	movs	r3, #4
 800a66a:	77fb      	strb	r3, [r7, #31]
 800a66c:	e0e8      	b.n	800a840 <UART_SetConfig+0x458>
 800a66e:	2308      	movs	r3, #8
 800a670:	77fb      	strb	r3, [r7, #31]
 800a672:	e0e5      	b.n	800a840 <UART_SetConfig+0x458>
 800a674:	2310      	movs	r3, #16
 800a676:	77fb      	strb	r3, [r7, #31]
 800a678:	e0e2      	b.n	800a840 <UART_SetConfig+0x458>
 800a67a:	bf00      	nop
 800a67c:	019bfcc0 	.word	0x019bfcc0
 800a680:	08016858 	.word	0x08016858
 800a684:	efff69f3 	.word	0xefff69f3
 800a688:	40011000 	.word	0x40011000
 800a68c:	40023800 	.word	0x40023800
 800a690:	40004400 	.word	0x40004400
 800a694:	40004800 	.word	0x40004800
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	4aa5      	ldr	r2, [pc, #660]	; (800a934 <UART_SetConfig+0x54c>)
 800a69e:	4293      	cmp	r3, r2
 800a6a0:	d120      	bne.n	800a6e4 <UART_SetConfig+0x2fc>
 800a6a2:	4ba5      	ldr	r3, [pc, #660]	; (800a938 <UART_SetConfig+0x550>)
 800a6a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a6a8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a6ac:	2bc0      	cmp	r3, #192	; 0xc0
 800a6ae:	d013      	beq.n	800a6d8 <UART_SetConfig+0x2f0>
 800a6b0:	2bc0      	cmp	r3, #192	; 0xc0
 800a6b2:	d814      	bhi.n	800a6de <UART_SetConfig+0x2f6>
 800a6b4:	2b80      	cmp	r3, #128	; 0x80
 800a6b6:	d009      	beq.n	800a6cc <UART_SetConfig+0x2e4>
 800a6b8:	2b80      	cmp	r3, #128	; 0x80
 800a6ba:	d810      	bhi.n	800a6de <UART_SetConfig+0x2f6>
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d002      	beq.n	800a6c6 <UART_SetConfig+0x2de>
 800a6c0:	2b40      	cmp	r3, #64	; 0x40
 800a6c2:	d006      	beq.n	800a6d2 <UART_SetConfig+0x2ea>
 800a6c4:	e00b      	b.n	800a6de <UART_SetConfig+0x2f6>
 800a6c6:	2300      	movs	r3, #0
 800a6c8:	77fb      	strb	r3, [r7, #31]
 800a6ca:	e0b9      	b.n	800a840 <UART_SetConfig+0x458>
 800a6cc:	2302      	movs	r3, #2
 800a6ce:	77fb      	strb	r3, [r7, #31]
 800a6d0:	e0b6      	b.n	800a840 <UART_SetConfig+0x458>
 800a6d2:	2304      	movs	r3, #4
 800a6d4:	77fb      	strb	r3, [r7, #31]
 800a6d6:	e0b3      	b.n	800a840 <UART_SetConfig+0x458>
 800a6d8:	2308      	movs	r3, #8
 800a6da:	77fb      	strb	r3, [r7, #31]
 800a6dc:	e0b0      	b.n	800a840 <UART_SetConfig+0x458>
 800a6de:	2310      	movs	r3, #16
 800a6e0:	77fb      	strb	r3, [r7, #31]
 800a6e2:	e0ad      	b.n	800a840 <UART_SetConfig+0x458>
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	4a94      	ldr	r2, [pc, #592]	; (800a93c <UART_SetConfig+0x554>)
 800a6ea:	4293      	cmp	r3, r2
 800a6ec:	d125      	bne.n	800a73a <UART_SetConfig+0x352>
 800a6ee:	4b92      	ldr	r3, [pc, #584]	; (800a938 <UART_SetConfig+0x550>)
 800a6f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a6f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a6f8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a6fc:	d017      	beq.n	800a72e <UART_SetConfig+0x346>
 800a6fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a702:	d817      	bhi.n	800a734 <UART_SetConfig+0x34c>
 800a704:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a708:	d00b      	beq.n	800a722 <UART_SetConfig+0x33a>
 800a70a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a70e:	d811      	bhi.n	800a734 <UART_SetConfig+0x34c>
 800a710:	2b00      	cmp	r3, #0
 800a712:	d003      	beq.n	800a71c <UART_SetConfig+0x334>
 800a714:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a718:	d006      	beq.n	800a728 <UART_SetConfig+0x340>
 800a71a:	e00b      	b.n	800a734 <UART_SetConfig+0x34c>
 800a71c:	2300      	movs	r3, #0
 800a71e:	77fb      	strb	r3, [r7, #31]
 800a720:	e08e      	b.n	800a840 <UART_SetConfig+0x458>
 800a722:	2302      	movs	r3, #2
 800a724:	77fb      	strb	r3, [r7, #31]
 800a726:	e08b      	b.n	800a840 <UART_SetConfig+0x458>
 800a728:	2304      	movs	r3, #4
 800a72a:	77fb      	strb	r3, [r7, #31]
 800a72c:	e088      	b.n	800a840 <UART_SetConfig+0x458>
 800a72e:	2308      	movs	r3, #8
 800a730:	77fb      	strb	r3, [r7, #31]
 800a732:	e085      	b.n	800a840 <UART_SetConfig+0x458>
 800a734:	2310      	movs	r3, #16
 800a736:	77fb      	strb	r3, [r7, #31]
 800a738:	e082      	b.n	800a840 <UART_SetConfig+0x458>
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	4a80      	ldr	r2, [pc, #512]	; (800a940 <UART_SetConfig+0x558>)
 800a740:	4293      	cmp	r3, r2
 800a742:	d125      	bne.n	800a790 <UART_SetConfig+0x3a8>
 800a744:	4b7c      	ldr	r3, [pc, #496]	; (800a938 <UART_SetConfig+0x550>)
 800a746:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a74a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a74e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a752:	d017      	beq.n	800a784 <UART_SetConfig+0x39c>
 800a754:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a758:	d817      	bhi.n	800a78a <UART_SetConfig+0x3a2>
 800a75a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a75e:	d00b      	beq.n	800a778 <UART_SetConfig+0x390>
 800a760:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a764:	d811      	bhi.n	800a78a <UART_SetConfig+0x3a2>
 800a766:	2b00      	cmp	r3, #0
 800a768:	d003      	beq.n	800a772 <UART_SetConfig+0x38a>
 800a76a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a76e:	d006      	beq.n	800a77e <UART_SetConfig+0x396>
 800a770:	e00b      	b.n	800a78a <UART_SetConfig+0x3a2>
 800a772:	2301      	movs	r3, #1
 800a774:	77fb      	strb	r3, [r7, #31]
 800a776:	e063      	b.n	800a840 <UART_SetConfig+0x458>
 800a778:	2302      	movs	r3, #2
 800a77a:	77fb      	strb	r3, [r7, #31]
 800a77c:	e060      	b.n	800a840 <UART_SetConfig+0x458>
 800a77e:	2304      	movs	r3, #4
 800a780:	77fb      	strb	r3, [r7, #31]
 800a782:	e05d      	b.n	800a840 <UART_SetConfig+0x458>
 800a784:	2308      	movs	r3, #8
 800a786:	77fb      	strb	r3, [r7, #31]
 800a788:	e05a      	b.n	800a840 <UART_SetConfig+0x458>
 800a78a:	2310      	movs	r3, #16
 800a78c:	77fb      	strb	r3, [r7, #31]
 800a78e:	e057      	b.n	800a840 <UART_SetConfig+0x458>
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	4a6b      	ldr	r2, [pc, #428]	; (800a944 <UART_SetConfig+0x55c>)
 800a796:	4293      	cmp	r3, r2
 800a798:	d125      	bne.n	800a7e6 <UART_SetConfig+0x3fe>
 800a79a:	4b67      	ldr	r3, [pc, #412]	; (800a938 <UART_SetConfig+0x550>)
 800a79c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a7a0:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800a7a4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a7a8:	d017      	beq.n	800a7da <UART_SetConfig+0x3f2>
 800a7aa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a7ae:	d817      	bhi.n	800a7e0 <UART_SetConfig+0x3f8>
 800a7b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a7b4:	d00b      	beq.n	800a7ce <UART_SetConfig+0x3e6>
 800a7b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a7ba:	d811      	bhi.n	800a7e0 <UART_SetConfig+0x3f8>
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d003      	beq.n	800a7c8 <UART_SetConfig+0x3e0>
 800a7c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a7c4:	d006      	beq.n	800a7d4 <UART_SetConfig+0x3ec>
 800a7c6:	e00b      	b.n	800a7e0 <UART_SetConfig+0x3f8>
 800a7c8:	2300      	movs	r3, #0
 800a7ca:	77fb      	strb	r3, [r7, #31]
 800a7cc:	e038      	b.n	800a840 <UART_SetConfig+0x458>
 800a7ce:	2302      	movs	r3, #2
 800a7d0:	77fb      	strb	r3, [r7, #31]
 800a7d2:	e035      	b.n	800a840 <UART_SetConfig+0x458>
 800a7d4:	2304      	movs	r3, #4
 800a7d6:	77fb      	strb	r3, [r7, #31]
 800a7d8:	e032      	b.n	800a840 <UART_SetConfig+0x458>
 800a7da:	2308      	movs	r3, #8
 800a7dc:	77fb      	strb	r3, [r7, #31]
 800a7de:	e02f      	b.n	800a840 <UART_SetConfig+0x458>
 800a7e0:	2310      	movs	r3, #16
 800a7e2:	77fb      	strb	r3, [r7, #31]
 800a7e4:	e02c      	b.n	800a840 <UART_SetConfig+0x458>
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	4a57      	ldr	r2, [pc, #348]	; (800a948 <UART_SetConfig+0x560>)
 800a7ec:	4293      	cmp	r3, r2
 800a7ee:	d125      	bne.n	800a83c <UART_SetConfig+0x454>
 800a7f0:	4b51      	ldr	r3, [pc, #324]	; (800a938 <UART_SetConfig+0x550>)
 800a7f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a7f6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800a7fa:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800a7fe:	d017      	beq.n	800a830 <UART_SetConfig+0x448>
 800a800:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800a804:	d817      	bhi.n	800a836 <UART_SetConfig+0x44e>
 800a806:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a80a:	d00b      	beq.n	800a824 <UART_SetConfig+0x43c>
 800a80c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a810:	d811      	bhi.n	800a836 <UART_SetConfig+0x44e>
 800a812:	2b00      	cmp	r3, #0
 800a814:	d003      	beq.n	800a81e <UART_SetConfig+0x436>
 800a816:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a81a:	d006      	beq.n	800a82a <UART_SetConfig+0x442>
 800a81c:	e00b      	b.n	800a836 <UART_SetConfig+0x44e>
 800a81e:	2300      	movs	r3, #0
 800a820:	77fb      	strb	r3, [r7, #31]
 800a822:	e00d      	b.n	800a840 <UART_SetConfig+0x458>
 800a824:	2302      	movs	r3, #2
 800a826:	77fb      	strb	r3, [r7, #31]
 800a828:	e00a      	b.n	800a840 <UART_SetConfig+0x458>
 800a82a:	2304      	movs	r3, #4
 800a82c:	77fb      	strb	r3, [r7, #31]
 800a82e:	e007      	b.n	800a840 <UART_SetConfig+0x458>
 800a830:	2308      	movs	r3, #8
 800a832:	77fb      	strb	r3, [r7, #31]
 800a834:	e004      	b.n	800a840 <UART_SetConfig+0x458>
 800a836:	2310      	movs	r3, #16
 800a838:	77fb      	strb	r3, [r7, #31]
 800a83a:	e001      	b.n	800a840 <UART_SetConfig+0x458>
 800a83c:	2310      	movs	r3, #16
 800a83e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	69db      	ldr	r3, [r3, #28]
 800a844:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a848:	d15c      	bne.n	800a904 <UART_SetConfig+0x51c>
  {
    switch (clocksource)
 800a84a:	7ffb      	ldrb	r3, [r7, #31]
 800a84c:	2b08      	cmp	r3, #8
 800a84e:	d828      	bhi.n	800a8a2 <UART_SetConfig+0x4ba>
 800a850:	a201      	add	r2, pc, #4	; (adr r2, 800a858 <UART_SetConfig+0x470>)
 800a852:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a856:	bf00      	nop
 800a858:	0800a87d 	.word	0x0800a87d
 800a85c:	0800a885 	.word	0x0800a885
 800a860:	0800a88d 	.word	0x0800a88d
 800a864:	0800a8a3 	.word	0x0800a8a3
 800a868:	0800a893 	.word	0x0800a893
 800a86c:	0800a8a3 	.word	0x0800a8a3
 800a870:	0800a8a3 	.word	0x0800a8a3
 800a874:	0800a8a3 	.word	0x0800a8a3
 800a878:	0800a89b 	.word	0x0800a89b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a87c:	f7fb ff6c 	bl	8006758 <HAL_RCC_GetPCLK1Freq>
 800a880:	61b8      	str	r0, [r7, #24]
        break;
 800a882:	e013      	b.n	800a8ac <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a884:	f7fb ff7c 	bl	8006780 <HAL_RCC_GetPCLK2Freq>
 800a888:	61b8      	str	r0, [r7, #24]
        break;
 800a88a:	e00f      	b.n	800a8ac <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a88c:	4b2f      	ldr	r3, [pc, #188]	; (800a94c <UART_SetConfig+0x564>)
 800a88e:	61bb      	str	r3, [r7, #24]
        break;
 800a890:	e00c      	b.n	800a8ac <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a892:	f7fb fe8f 	bl	80065b4 <HAL_RCC_GetSysClockFreq>
 800a896:	61b8      	str	r0, [r7, #24]
        break;
 800a898:	e008      	b.n	800a8ac <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a89a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a89e:	61bb      	str	r3, [r7, #24]
        break;
 800a8a0:	e004      	b.n	800a8ac <UART_SetConfig+0x4c4>
      default:
        pclk = 0U;
 800a8a2:	2300      	movs	r3, #0
 800a8a4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a8a6:	2301      	movs	r3, #1
 800a8a8:	77bb      	strb	r3, [r7, #30]
        break;
 800a8aa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a8ac:	69bb      	ldr	r3, [r7, #24]
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	f000 8082 	beq.w	800a9b8 <UART_SetConfig+0x5d0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a8b4:	69bb      	ldr	r3, [r7, #24]
 800a8b6:	005a      	lsls	r2, r3, #1
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	685b      	ldr	r3, [r3, #4]
 800a8bc:	085b      	lsrs	r3, r3, #1
 800a8be:	441a      	add	r2, r3
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	685b      	ldr	r3, [r3, #4]
 800a8c4:	fbb2 f3f3 	udiv	r3, r2, r3
 800a8c8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a8ca:	693b      	ldr	r3, [r7, #16]
 800a8cc:	2b0f      	cmp	r3, #15
 800a8ce:	d916      	bls.n	800a8fe <UART_SetConfig+0x516>
 800a8d0:	693b      	ldr	r3, [r7, #16]
 800a8d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a8d6:	d212      	bcs.n	800a8fe <UART_SetConfig+0x516>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a8d8:	693b      	ldr	r3, [r7, #16]
 800a8da:	b29b      	uxth	r3, r3
 800a8dc:	f023 030f 	bic.w	r3, r3, #15
 800a8e0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a8e2:	693b      	ldr	r3, [r7, #16]
 800a8e4:	085b      	lsrs	r3, r3, #1
 800a8e6:	b29b      	uxth	r3, r3
 800a8e8:	f003 0307 	and.w	r3, r3, #7
 800a8ec:	b29a      	uxth	r2, r3
 800a8ee:	89fb      	ldrh	r3, [r7, #14]
 800a8f0:	4313      	orrs	r3, r2
 800a8f2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	89fa      	ldrh	r2, [r7, #14]
 800a8fa:	60da      	str	r2, [r3, #12]
 800a8fc:	e05c      	b.n	800a9b8 <UART_SetConfig+0x5d0>
      }
      else
      {
        ret = HAL_ERROR;
 800a8fe:	2301      	movs	r3, #1
 800a900:	77bb      	strb	r3, [r7, #30]
 800a902:	e059      	b.n	800a9b8 <UART_SetConfig+0x5d0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a904:	7ffb      	ldrb	r3, [r7, #31]
 800a906:	2b08      	cmp	r3, #8
 800a908:	d835      	bhi.n	800a976 <UART_SetConfig+0x58e>
 800a90a:	a201      	add	r2, pc, #4	; (adr r2, 800a910 <UART_SetConfig+0x528>)
 800a90c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a910:	0800a951 	.word	0x0800a951
 800a914:	0800a959 	.word	0x0800a959
 800a918:	0800a961 	.word	0x0800a961
 800a91c:	0800a977 	.word	0x0800a977
 800a920:	0800a967 	.word	0x0800a967
 800a924:	0800a977 	.word	0x0800a977
 800a928:	0800a977 	.word	0x0800a977
 800a92c:	0800a977 	.word	0x0800a977
 800a930:	0800a96f 	.word	0x0800a96f
 800a934:	40004c00 	.word	0x40004c00
 800a938:	40023800 	.word	0x40023800
 800a93c:	40005000 	.word	0x40005000
 800a940:	40011400 	.word	0x40011400
 800a944:	40007800 	.word	0x40007800
 800a948:	40007c00 	.word	0x40007c00
 800a94c:	00f42400 	.word	0x00f42400
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a950:	f7fb ff02 	bl	8006758 <HAL_RCC_GetPCLK1Freq>
 800a954:	61b8      	str	r0, [r7, #24]
        break;
 800a956:	e013      	b.n	800a980 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a958:	f7fb ff12 	bl	8006780 <HAL_RCC_GetPCLK2Freq>
 800a95c:	61b8      	str	r0, [r7, #24]
        break;
 800a95e:	e00f      	b.n	800a980 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a960:	4b1b      	ldr	r3, [pc, #108]	; (800a9d0 <UART_SetConfig+0x5e8>)
 800a962:	61bb      	str	r3, [r7, #24]
        break;
 800a964:	e00c      	b.n	800a980 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a966:	f7fb fe25 	bl	80065b4 <HAL_RCC_GetSysClockFreq>
 800a96a:	61b8      	str	r0, [r7, #24]
        break;
 800a96c:	e008      	b.n	800a980 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a96e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a972:	61bb      	str	r3, [r7, #24]
        break;
 800a974:	e004      	b.n	800a980 <UART_SetConfig+0x598>
      default:
        pclk = 0U;
 800a976:	2300      	movs	r3, #0
 800a978:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a97a:	2301      	movs	r3, #1
 800a97c:	77bb      	strb	r3, [r7, #30]
        break;
 800a97e:	bf00      	nop
    }

    if (pclk != 0U)
 800a980:	69bb      	ldr	r3, [r7, #24]
 800a982:	2b00      	cmp	r3, #0
 800a984:	d018      	beq.n	800a9b8 <UART_SetConfig+0x5d0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	685b      	ldr	r3, [r3, #4]
 800a98a:	085a      	lsrs	r2, r3, #1
 800a98c:	69bb      	ldr	r3, [r7, #24]
 800a98e:	441a      	add	r2, r3
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	685b      	ldr	r3, [r3, #4]
 800a994:	fbb2 f3f3 	udiv	r3, r2, r3
 800a998:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a99a:	693b      	ldr	r3, [r7, #16]
 800a99c:	2b0f      	cmp	r3, #15
 800a99e:	d909      	bls.n	800a9b4 <UART_SetConfig+0x5cc>
 800a9a0:	693b      	ldr	r3, [r7, #16]
 800a9a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a9a6:	d205      	bcs.n	800a9b4 <UART_SetConfig+0x5cc>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a9a8:	693b      	ldr	r3, [r7, #16]
 800a9aa:	b29a      	uxth	r2, r3
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	60da      	str	r2, [r3, #12]
 800a9b2:	e001      	b.n	800a9b8 <UART_SetConfig+0x5d0>
      }
      else
      {
        ret = HAL_ERROR;
 800a9b4:	2301      	movs	r3, #1
 800a9b6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	2200      	movs	r2, #0
 800a9bc:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	2200      	movs	r2, #0
 800a9c2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800a9c4:	7fbb      	ldrb	r3, [r7, #30]
}
 800a9c6:	4618      	mov	r0, r3
 800a9c8:	3720      	adds	r7, #32
 800a9ca:	46bd      	mov	sp, r7
 800a9cc:	bd80      	pop	{r7, pc}
 800a9ce:	bf00      	nop
 800a9d0:	00f42400 	.word	0x00f42400

0800a9d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a9d4:	b580      	push	{r7, lr}
 800a9d6:	b082      	sub	sp, #8
 800a9d8:	af00      	add	r7, sp, #0
 800a9da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9e0:	2bff      	cmp	r3, #255	; 0xff
 800a9e2:	d904      	bls.n	800a9ee <UART_AdvFeatureConfig+0x1a>
 800a9e4:	f640 31e6 	movw	r1, #3046	; 0xbe6
 800a9e8:	488e      	ldr	r0, [pc, #568]	; (800ac24 <UART_AdvFeatureConfig+0x250>)
 800a9ea:	f7f8 f84e 	bl	8002a8a <assert_failed>

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9f2:	f003 0301 	and.w	r3, r3, #1
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d018      	beq.n	800aa2c <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d009      	beq.n	800aa16 <UART_AdvFeatureConfig+0x42>
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa06:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aa0a:	d004      	beq.n	800aa16 <UART_AdvFeatureConfig+0x42>
 800aa0c:	f640 31eb 	movw	r1, #3051	; 0xbeb
 800aa10:	4884      	ldr	r0, [pc, #528]	; (800ac24 <UART_AdvFeatureConfig+0x250>)
 800aa12:	f7f8 f83a 	bl	8002a8a <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	685b      	ldr	r3, [r3, #4]
 800aa1c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	430a      	orrs	r2, r1
 800aa2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa30:	f003 0302 	and.w	r3, r3, #2
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d018      	beq.n	800aa6a <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d009      	beq.n	800aa54 <UART_AdvFeatureConfig+0x80>
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aa48:	d004      	beq.n	800aa54 <UART_AdvFeatureConfig+0x80>
 800aa4a:	f640 31f2 	movw	r1, #3058	; 0xbf2
 800aa4e:	4875      	ldr	r0, [pc, #468]	; (800ac24 <UART_AdvFeatureConfig+0x250>)
 800aa50:	f7f8 f81b 	bl	8002a8a <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	685b      	ldr	r3, [r3, #4]
 800aa5a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	430a      	orrs	r2, r1
 800aa68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa6e:	f003 0304 	and.w	r3, r3, #4
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d018      	beq.n	800aaa8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d009      	beq.n	800aa92 <UART_AdvFeatureConfig+0xbe>
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa82:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800aa86:	d004      	beq.n	800aa92 <UART_AdvFeatureConfig+0xbe>
 800aa88:	f640 31f9 	movw	r1, #3065	; 0xbf9
 800aa8c:	4865      	ldr	r0, [pc, #404]	; (800ac24 <UART_AdvFeatureConfig+0x250>)
 800aa8e:	f7f7 fffc 	bl	8002a8a <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	685b      	ldr	r3, [r3, #4]
 800aa98:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	430a      	orrs	r2, r1
 800aaa6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aaac:	f003 0308 	and.w	r3, r3, #8
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d018      	beq.n	800aae6 <UART_AdvFeatureConfig+0x112>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d009      	beq.n	800aad0 <UART_AdvFeatureConfig+0xfc>
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aac0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aac4:	d004      	beq.n	800aad0 <UART_AdvFeatureConfig+0xfc>
 800aac6:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 800aaca:	4856      	ldr	r0, [pc, #344]	; (800ac24 <UART_AdvFeatureConfig+0x250>)
 800aacc:	f7f7 ffdd 	bl	8002a8a <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	685b      	ldr	r3, [r3, #4]
 800aad6:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	430a      	orrs	r2, r1
 800aae4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aaea:	f003 0310 	and.w	r3, r3, #16
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d018      	beq.n	800ab24 <UART_AdvFeatureConfig+0x150>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d009      	beq.n	800ab0e <UART_AdvFeatureConfig+0x13a>
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aafe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ab02:	d004      	beq.n	800ab0e <UART_AdvFeatureConfig+0x13a>
 800ab04:	f640 4107 	movw	r1, #3079	; 0xc07
 800ab08:	4846      	ldr	r0, [pc, #280]	; (800ac24 <UART_AdvFeatureConfig+0x250>)
 800ab0a:	f7f7 ffbe 	bl	8002a8a <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	689b      	ldr	r3, [r3, #8]
 800ab14:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	430a      	orrs	r2, r1
 800ab22:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab28:	f003 0320 	and.w	r3, r3, #32
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d018      	beq.n	800ab62 <UART_AdvFeatureConfig+0x18e>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d009      	beq.n	800ab4c <UART_AdvFeatureConfig+0x178>
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ab40:	d004      	beq.n	800ab4c <UART_AdvFeatureConfig+0x178>
 800ab42:	f640 410e 	movw	r1, #3086	; 0xc0e
 800ab46:	4837      	ldr	r0, [pc, #220]	; (800ac24 <UART_AdvFeatureConfig+0x250>)
 800ab48:	f7f7 ff9f 	bl	8002a8a <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	689b      	ldr	r3, [r3, #8]
 800ab52:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	430a      	orrs	r2, r1
 800ab60:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d064      	beq.n	800ac38 <UART_AdvFeatureConfig+0x264>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	4a2d      	ldr	r2, [pc, #180]	; (800ac28 <UART_AdvFeatureConfig+0x254>)
 800ab74:	4293      	cmp	r3, r2
 800ab76:	d013      	beq.n	800aba0 <UART_AdvFeatureConfig+0x1cc>
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	4a2b      	ldr	r2, [pc, #172]	; (800ac2c <UART_AdvFeatureConfig+0x258>)
 800ab7e:	4293      	cmp	r3, r2
 800ab80:	d00e      	beq.n	800aba0 <UART_AdvFeatureConfig+0x1cc>
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	4a2a      	ldr	r2, [pc, #168]	; (800ac30 <UART_AdvFeatureConfig+0x25c>)
 800ab88:	4293      	cmp	r3, r2
 800ab8a:	d009      	beq.n	800aba0 <UART_AdvFeatureConfig+0x1cc>
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	4a28      	ldr	r2, [pc, #160]	; (800ac34 <UART_AdvFeatureConfig+0x260>)
 800ab92:	4293      	cmp	r3, r2
 800ab94:	d004      	beq.n	800aba0 <UART_AdvFeatureConfig+0x1cc>
 800ab96:	f640 4115 	movw	r1, #3093	; 0xc15
 800ab9a:	4822      	ldr	r0, [pc, #136]	; (800ac24 <UART_AdvFeatureConfig+0x250>)
 800ab9c:	f7f7 ff75 	bl	8002a8a <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d009      	beq.n	800abbc <UART_AdvFeatureConfig+0x1e8>
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800abb0:	d004      	beq.n	800abbc <UART_AdvFeatureConfig+0x1e8>
 800abb2:	f640 4116 	movw	r1, #3094	; 0xc16
 800abb6:	481b      	ldr	r0, [pc, #108]	; (800ac24 <UART_AdvFeatureConfig+0x250>)
 800abb8:	f7f7 ff67 	bl	8002a8a <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	685b      	ldr	r3, [r3, #4]
 800abc2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	430a      	orrs	r2, r1
 800abd0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abd6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800abda:	d12d      	bne.n	800ac38 <UART_AdvFeatureConfig+0x264>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d013      	beq.n	800ac0c <UART_AdvFeatureConfig+0x238>
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800abe8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800abec:	d00e      	beq.n	800ac0c <UART_AdvFeatureConfig+0x238>
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800abf2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800abf6:	d009      	beq.n	800ac0c <UART_AdvFeatureConfig+0x238>
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800abfc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800ac00:	d004      	beq.n	800ac0c <UART_AdvFeatureConfig+0x238>
 800ac02:	f640 411b 	movw	r1, #3099	; 0xc1b
 800ac06:	4807      	ldr	r0, [pc, #28]	; (800ac24 <UART_AdvFeatureConfig+0x250>)
 800ac08:	f7f7 ff3f 	bl	8002a8a <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	685b      	ldr	r3, [r3, #4]
 800ac12:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	430a      	orrs	r2, r1
 800ac20:	605a      	str	r2, [r3, #4]
 800ac22:	e009      	b.n	800ac38 <UART_AdvFeatureConfig+0x264>
 800ac24:	08016858 	.word	0x08016858
 800ac28:	40011000 	.word	0x40011000
 800ac2c:	40004400 	.word	0x40004400
 800ac30:	40004800 	.word	0x40004800
 800ac34:	40011400 	.word	0x40011400
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d018      	beq.n	800ac76 <UART_AdvFeatureConfig+0x2a2>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d009      	beq.n	800ac60 <UART_AdvFeatureConfig+0x28c>
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ac50:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800ac54:	d004      	beq.n	800ac60 <UART_AdvFeatureConfig+0x28c>
 800ac56:	f640 4123 	movw	r1, #3107	; 0xc23
 800ac5a:	4809      	ldr	r0, [pc, #36]	; (800ac80 <UART_AdvFeatureConfig+0x2ac>)
 800ac5c:	f7f7 ff15 	bl	8002a8a <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	685b      	ldr	r3, [r3, #4]
 800ac66:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	430a      	orrs	r2, r1
 800ac74:	605a      	str	r2, [r3, #4]
  }
}
 800ac76:	bf00      	nop
 800ac78:	3708      	adds	r7, #8
 800ac7a:	46bd      	mov	sp, r7
 800ac7c:	bd80      	pop	{r7, pc}
 800ac7e:	bf00      	nop
 800ac80:	08016858 	.word	0x08016858

0800ac84 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ac84:	b580      	push	{r7, lr}
 800ac86:	b086      	sub	sp, #24
 800ac88:	af02      	add	r7, sp, #8
 800ac8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	2200      	movs	r2, #0
 800ac90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ac94:	f7f8 fd2c 	bl	80036f0 <HAL_GetTick>
 800ac98:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	f003 0308 	and.w	r3, r3, #8
 800aca4:	2b08      	cmp	r3, #8
 800aca6:	d10e      	bne.n	800acc6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800aca8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800acac:	9300      	str	r3, [sp, #0]
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	2200      	movs	r2, #0
 800acb2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800acb6:	6878      	ldr	r0, [r7, #4]
 800acb8:	f000 f81b 	bl	800acf2 <UART_WaitOnFlagUntilTimeout>
 800acbc:	4603      	mov	r3, r0
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d001      	beq.n	800acc6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800acc2:	2303      	movs	r3, #3
 800acc4:	e011      	b.n	800acea <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	2220      	movs	r2, #32
 800acca:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	2220      	movs	r2, #32
 800acd0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	2200      	movs	r2, #0
 800acd8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	2200      	movs	r2, #0
 800acde:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	2200      	movs	r2, #0
 800ace4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800ace8:	2300      	movs	r3, #0
}
 800acea:	4618      	mov	r0, r3
 800acec:	3710      	adds	r7, #16
 800acee:	46bd      	mov	sp, r7
 800acf0:	bd80      	pop	{r7, pc}

0800acf2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800acf2:	b580      	push	{r7, lr}
 800acf4:	b09c      	sub	sp, #112	; 0x70
 800acf6:	af00      	add	r7, sp, #0
 800acf8:	60f8      	str	r0, [r7, #12]
 800acfa:	60b9      	str	r1, [r7, #8]
 800acfc:	603b      	str	r3, [r7, #0]
 800acfe:	4613      	mov	r3, r2
 800ad00:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ad02:	e0a7      	b.n	800ae54 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ad04:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ad06:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad0a:	f000 80a3 	beq.w	800ae54 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ad0e:	f7f8 fcef 	bl	80036f0 <HAL_GetTick>
 800ad12:	4602      	mov	r2, r0
 800ad14:	683b      	ldr	r3, [r7, #0]
 800ad16:	1ad3      	subs	r3, r2, r3
 800ad18:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800ad1a:	429a      	cmp	r2, r3
 800ad1c:	d302      	bcc.n	800ad24 <UART_WaitOnFlagUntilTimeout+0x32>
 800ad1e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d13f      	bne.n	800ada4 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ad2c:	e853 3f00 	ldrex	r3, [r3]
 800ad30:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800ad32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ad34:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ad38:	667b      	str	r3, [r7, #100]	; 0x64
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	461a      	mov	r2, r3
 800ad40:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ad42:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ad44:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad46:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ad48:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ad4a:	e841 2300 	strex	r3, r2, [r1]
 800ad4e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800ad50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d1e6      	bne.n	800ad24 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	3308      	adds	r3, #8
 800ad5c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad60:	e853 3f00 	ldrex	r3, [r3]
 800ad64:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ad66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad68:	f023 0301 	bic.w	r3, r3, #1
 800ad6c:	663b      	str	r3, [r7, #96]	; 0x60
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	3308      	adds	r3, #8
 800ad74:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ad76:	64ba      	str	r2, [r7, #72]	; 0x48
 800ad78:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad7a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ad7c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ad7e:	e841 2300 	strex	r3, r2, [r1]
 800ad82:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800ad84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d1e5      	bne.n	800ad56 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	2220      	movs	r2, #32
 800ad8e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	2220      	movs	r2, #32
 800ad94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	2200      	movs	r2, #0
 800ad9c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800ada0:	2303      	movs	r3, #3
 800ada2:	e068      	b.n	800ae76 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	f003 0304 	and.w	r3, r3, #4
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d050      	beq.n	800ae54 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	69db      	ldr	r3, [r3, #28]
 800adb8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800adbc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800adc0:	d148      	bne.n	800ae54 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800adca:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800add2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800add4:	e853 3f00 	ldrex	r3, [r3]
 800add8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800adda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800addc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ade0:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	461a      	mov	r2, r3
 800ade8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800adea:	637b      	str	r3, [r7, #52]	; 0x34
 800adec:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adee:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800adf0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800adf2:	e841 2300 	strex	r3, r2, [r1]
 800adf6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800adf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d1e6      	bne.n	800adcc <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	3308      	adds	r3, #8
 800ae04:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae06:	697b      	ldr	r3, [r7, #20]
 800ae08:	e853 3f00 	ldrex	r3, [r3]
 800ae0c:	613b      	str	r3, [r7, #16]
   return(result);
 800ae0e:	693b      	ldr	r3, [r7, #16]
 800ae10:	f023 0301 	bic.w	r3, r3, #1
 800ae14:	66bb      	str	r3, [r7, #104]	; 0x68
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	3308      	adds	r3, #8
 800ae1c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ae1e:	623a      	str	r2, [r7, #32]
 800ae20:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae22:	69f9      	ldr	r1, [r7, #28]
 800ae24:	6a3a      	ldr	r2, [r7, #32]
 800ae26:	e841 2300 	strex	r3, r2, [r1]
 800ae2a:	61bb      	str	r3, [r7, #24]
   return(result);
 800ae2c:	69bb      	ldr	r3, [r7, #24]
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d1e5      	bne.n	800adfe <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	2220      	movs	r2, #32
 800ae36:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	2220      	movs	r2, #32
 800ae3c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	2220      	movs	r2, #32
 800ae44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	2200      	movs	r2, #0
 800ae4c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800ae50:	2303      	movs	r3, #3
 800ae52:	e010      	b.n	800ae76 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	69da      	ldr	r2, [r3, #28]
 800ae5a:	68bb      	ldr	r3, [r7, #8]
 800ae5c:	4013      	ands	r3, r2
 800ae5e:	68ba      	ldr	r2, [r7, #8]
 800ae60:	429a      	cmp	r2, r3
 800ae62:	bf0c      	ite	eq
 800ae64:	2301      	moveq	r3, #1
 800ae66:	2300      	movne	r3, #0
 800ae68:	b2db      	uxtb	r3, r3
 800ae6a:	461a      	mov	r2, r3
 800ae6c:	79fb      	ldrb	r3, [r7, #7]
 800ae6e:	429a      	cmp	r2, r3
 800ae70:	f43f af48 	beq.w	800ad04 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ae74:	2300      	movs	r3, #0
}
 800ae76:	4618      	mov	r0, r3
 800ae78:	3770      	adds	r7, #112	; 0x70
 800ae7a:	46bd      	mov	sp, r7
 800ae7c:	bd80      	pop	{r7, pc}

0800ae7e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ae7e:	b480      	push	{r7}
 800ae80:	b095      	sub	sp, #84	; 0x54
 800ae82:	af00      	add	r7, sp, #0
 800ae84:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae8e:	e853 3f00 	ldrex	r3, [r3]
 800ae92:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ae94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae96:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ae9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	461a      	mov	r2, r3
 800aea2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aea4:	643b      	str	r3, [r7, #64]	; 0x40
 800aea6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aea8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800aeaa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800aeac:	e841 2300 	strex	r3, r2, [r1]
 800aeb0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800aeb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d1e6      	bne.n	800ae86 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	3308      	adds	r3, #8
 800aebe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aec0:	6a3b      	ldr	r3, [r7, #32]
 800aec2:	e853 3f00 	ldrex	r3, [r3]
 800aec6:	61fb      	str	r3, [r7, #28]
   return(result);
 800aec8:	69fb      	ldr	r3, [r7, #28]
 800aeca:	f023 0301 	bic.w	r3, r3, #1
 800aece:	64bb      	str	r3, [r7, #72]	; 0x48
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	3308      	adds	r3, #8
 800aed6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800aed8:	62fa      	str	r2, [r7, #44]	; 0x2c
 800aeda:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aedc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800aede:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aee0:	e841 2300 	strex	r3, r2, [r1]
 800aee4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800aee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d1e5      	bne.n	800aeb8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aef0:	2b01      	cmp	r3, #1
 800aef2:	d118      	bne.n	800af26 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	e853 3f00 	ldrex	r3, [r3]
 800af00:	60bb      	str	r3, [r7, #8]
   return(result);
 800af02:	68bb      	ldr	r3, [r7, #8]
 800af04:	f023 0310 	bic.w	r3, r3, #16
 800af08:	647b      	str	r3, [r7, #68]	; 0x44
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	461a      	mov	r2, r3
 800af10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800af12:	61bb      	str	r3, [r7, #24]
 800af14:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af16:	6979      	ldr	r1, [r7, #20]
 800af18:	69ba      	ldr	r2, [r7, #24]
 800af1a:	e841 2300 	strex	r3, r2, [r1]
 800af1e:	613b      	str	r3, [r7, #16]
   return(result);
 800af20:	693b      	ldr	r3, [r7, #16]
 800af22:	2b00      	cmp	r3, #0
 800af24:	d1e6      	bne.n	800aef4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	2220      	movs	r2, #32
 800af2a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	2200      	movs	r2, #0
 800af32:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	2200      	movs	r2, #0
 800af38:	669a      	str	r2, [r3, #104]	; 0x68
}
 800af3a:	bf00      	nop
 800af3c:	3754      	adds	r7, #84	; 0x54
 800af3e:	46bd      	mov	sp, r7
 800af40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af44:	4770      	bx	lr

0800af46 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800af46:	b580      	push	{r7, lr}
 800af48:	b084      	sub	sp, #16
 800af4a:	af00      	add	r7, sp, #0
 800af4c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af52:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	2200      	movs	r2, #0
 800af58:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	2200      	movs	r2, #0
 800af60:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800af64:	68f8      	ldr	r0, [r7, #12]
 800af66:	f7ff fa29 	bl	800a3bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800af6a:	bf00      	nop
 800af6c:	3710      	adds	r7, #16
 800af6e:	46bd      	mov	sp, r7
 800af70:	bd80      	pop	{r7, pc}

0800af72 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800af72:	b580      	push	{r7, lr}
 800af74:	b088      	sub	sp, #32
 800af76:	af00      	add	r7, sp, #0
 800af78:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	e853 3f00 	ldrex	r3, [r3]
 800af86:	60bb      	str	r3, [r7, #8]
   return(result);
 800af88:	68bb      	ldr	r3, [r7, #8]
 800af8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800af8e:	61fb      	str	r3, [r7, #28]
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	461a      	mov	r2, r3
 800af96:	69fb      	ldr	r3, [r7, #28]
 800af98:	61bb      	str	r3, [r7, #24]
 800af9a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af9c:	6979      	ldr	r1, [r7, #20]
 800af9e:	69ba      	ldr	r2, [r7, #24]
 800afa0:	e841 2300 	strex	r3, r2, [r1]
 800afa4:	613b      	str	r3, [r7, #16]
   return(result);
 800afa6:	693b      	ldr	r3, [r7, #16]
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d1e6      	bne.n	800af7a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	2220      	movs	r2, #32
 800afb0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	2200      	movs	r2, #0
 800afb6:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800afb8:	6878      	ldr	r0, [r7, #4]
 800afba:	f7ff f9f5 	bl	800a3a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800afbe:	bf00      	nop
 800afc0:	3720      	adds	r7, #32
 800afc2:	46bd      	mov	sp, r7
 800afc4:	bd80      	pop	{r7, pc}

0800afc6 <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 800afc6:	b580      	push	{r7, lr}
 800afc8:	b084      	sub	sp, #16
 800afca:	af00      	add	r7, sp, #0
 800afcc:	6078      	str	r0, [r7, #4]
 800afce:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800afd0:	2300      	movs	r3, #0
 800afd2:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 800afd4:	6839      	ldr	r1, [r7, #0]
 800afd6:	6878      	ldr	r0, [r7, #4]
 800afd8:	f001 fd10 	bl	800c9fc <VL53L0X_get_offset_calibration_data_micro_meter>
 800afdc:	4603      	mov	r3, r0
 800afde:	73fb      	strb	r3, [r7, #15]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
 800afe0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800afe4:	4618      	mov	r0, r3
 800afe6:	3710      	adds	r7, #16
 800afe8:	46bd      	mov	sp, r7
 800afea:	bd80      	pop	{r7, pc}

0800afec <VL53L0X_DataInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 800afec:	b5b0      	push	{r4, r5, r7, lr}
 800afee:	b096      	sub	sp, #88	; 0x58
 800aff0:	af00      	add	r7, sp, #0
 800aff2:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800aff4:	2300      	movs	r3, #0
 800aff6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 800affa:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800affe:	2b00      	cmp	r3, #0
 800b000:	d107      	bne.n	800b012 <VL53L0X_DataInit+0x26>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 800b002:	2200      	movs	r2, #0
 800b004:	2188      	movs	r1, #136	; 0x88
 800b006:	6878      	ldr	r0, [r7, #4]
 800b008:	f004 ff2e 	bl	800fe68 <VL53L0X_WrByte>
 800b00c:	4603      	mov	r3, r0
 800b00e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	2200      	movs	r2, #0
 800b016:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b020:	f8a3 2152 	strh.w	r2, [r3, #338]	; 0x152

	/* Dmax default Parameter */
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800b02a:	f8a3 2154 	strh.w	r2, [r3, #340]	; 0x154
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	4a9e      	ldr	r2, [pc, #632]	; (800b2ac <VL53L0X_DataInit+0x2c0>)
 800b032:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
		(FixPoint1616_t)((0x00016B85))); /* 1.42 No Cover Glass*/

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	4a9d      	ldr	r2, [pc, #628]	; (800b2b0 <VL53L0X_DataInit+0x2c4>)
 800b03a:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	2200      	movs	r2, #0
 800b042:	621a      	str	r2, [r3, #32]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 800b044:	f107 0310 	add.w	r3, r7, #16
 800b048:	4619      	mov	r1, r3
 800b04a:	6878      	ldr	r0, [r7, #4]
 800b04c:	f000 fac2 	bl	800b5d4 <VL53L0X_GetDeviceParameters>
 800b050:	4603      	mov	r3, r0
 800b052:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (Status == VL53L0X_ERROR_NONE) {
 800b056:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d112      	bne.n	800b084 <VL53L0X_DataInit+0x98>
		/* initialize PAL values */
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 800b05e:	2300      	movs	r3, #0
 800b060:	743b      	strb	r3, [r7, #16]
		CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 800b062:	2300      	movs	r3, #0
 800b064:	747b      	strb	r3, [r7, #17]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	f103 0410 	add.w	r4, r3, #16
 800b06c:	f107 0510 	add.w	r5, r7, #16
 800b070:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b072:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b074:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b076:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b078:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b07a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b07c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800b080:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	2264      	movs	r2, #100	; 0x64
 800b088:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	f44f 7261 	mov.w	r2, #900	; 0x384
 800b092:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800b09c:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800b0a6:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	2201      	movs	r2, #1
 800b0ae:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150

	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800b0b2:	2201      	movs	r2, #1
 800b0b4:	2180      	movs	r1, #128	; 0x80
 800b0b6:	6878      	ldr	r0, [r7, #4]
 800b0b8:	f004 fed6 	bl	800fe68 <VL53L0X_WrByte>
 800b0bc:	4603      	mov	r3, r0
 800b0be:	461a      	mov	r2, r3
 800b0c0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b0c4:	4313      	orrs	r3, r2
 800b0c6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800b0ca:	2201      	movs	r2, #1
 800b0cc:	21ff      	movs	r1, #255	; 0xff
 800b0ce:	6878      	ldr	r0, [r7, #4]
 800b0d0:	f004 feca 	bl	800fe68 <VL53L0X_WrByte>
 800b0d4:	4603      	mov	r3, r0
 800b0d6:	461a      	mov	r2, r3
 800b0d8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b0dc:	4313      	orrs	r3, r2
 800b0de:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800b0e2:	2200      	movs	r2, #0
 800b0e4:	2100      	movs	r1, #0
 800b0e6:	6878      	ldr	r0, [r7, #4]
 800b0e8:	f004 febe 	bl	800fe68 <VL53L0X_WrByte>
 800b0ec:	4603      	mov	r3, r0
 800b0ee:	461a      	mov	r2, r3
 800b0f0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b0f4:	4313      	orrs	r3, r2
 800b0f6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 800b0fa:	f107 030f 	add.w	r3, r7, #15
 800b0fe:	461a      	mov	r2, r3
 800b100:	2191      	movs	r1, #145	; 0x91
 800b102:	6878      	ldr	r0, [r7, #4]
 800b104:	f004 ff32 	bl	800ff6c <VL53L0X_RdByte>
 800b108:	4603      	mov	r3, r0
 800b10a:	461a      	mov	r2, r3
 800b10c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b110:	4313      	orrs	r3, r2
 800b112:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	PALDevDataSet(Dev, StopVariable, StopVariable);
 800b116:	7bfa      	ldrb	r2, [r7, #15]
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800b11e:	2201      	movs	r2, #1
 800b120:	2100      	movs	r1, #0
 800b122:	6878      	ldr	r0, [r7, #4]
 800b124:	f004 fea0 	bl	800fe68 <VL53L0X_WrByte>
 800b128:	4603      	mov	r3, r0
 800b12a:	461a      	mov	r2, r3
 800b12c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b130:	4313      	orrs	r3, r2
 800b132:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800b136:	2200      	movs	r2, #0
 800b138:	21ff      	movs	r1, #255	; 0xff
 800b13a:	6878      	ldr	r0, [r7, #4]
 800b13c:	f004 fe94 	bl	800fe68 <VL53L0X_WrByte>
 800b140:	4603      	mov	r3, r0
 800b142:	461a      	mov	r2, r3
 800b144:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b148:	4313      	orrs	r3, r2
 800b14a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800b14e:	2200      	movs	r2, #0
 800b150:	2180      	movs	r1, #128	; 0x80
 800b152:	6878      	ldr	r0, [r7, #4]
 800b154:	f004 fe88 	bl	800fe68 <VL53L0X_WrByte>
 800b158:	4603      	mov	r3, r0
 800b15a:	461a      	mov	r2, r3
 800b15c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b160:	4313      	orrs	r3, r2
 800b162:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800b166:	2300      	movs	r3, #0
 800b168:	653b      	str	r3, [r7, #80]	; 0x50
 800b16a:	e014      	b.n	800b196 <VL53L0X_DataInit+0x1aa>
		if (Status == VL53L0X_ERROR_NONE)
 800b16c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b170:	2b00      	cmp	r3, #0
 800b172:	d114      	bne.n	800b19e <VL53L0X_DataInit+0x1b2>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 800b174:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b176:	b29b      	uxth	r3, r3
 800b178:	2201      	movs	r2, #1
 800b17a:	4619      	mov	r1, r3
 800b17c:	6878      	ldr	r0, [r7, #4]
 800b17e:	f000 fd4d 	bl	800bc1c <VL53L0X_SetLimitCheckEnable>
 800b182:	4603      	mov	r3, r0
 800b184:	461a      	mov	r2, r3
 800b186:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b18a:	4313      	orrs	r3, r2
 800b18c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800b190:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b192:	3301      	adds	r3, #1
 800b194:	653b      	str	r3, [r7, #80]	; 0x50
 800b196:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b198:	2b05      	cmp	r3, #5
 800b19a:	dde7      	ble.n	800b16c <VL53L0X_DataInit+0x180>
 800b19c:	e000      	b.n	800b1a0 <VL53L0X_DataInit+0x1b4>
		else
			break;
 800b19e:	bf00      	nop

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 800b1a0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d107      	bne.n	800b1b8 <VL53L0X_DataInit+0x1cc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 800b1a8:	2200      	movs	r2, #0
 800b1aa:	2102      	movs	r1, #2
 800b1ac:	6878      	ldr	r0, [r7, #4]
 800b1ae:	f000 fd35 	bl	800bc1c <VL53L0X_SetLimitCheckEnable>
 800b1b2:	4603      	mov	r3, r0
 800b1b4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 800b1b8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d107      	bne.n	800b1d0 <VL53L0X_DataInit+0x1e4>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 800b1c0:	2200      	movs	r2, #0
 800b1c2:	2103      	movs	r1, #3
 800b1c4:	6878      	ldr	r0, [r7, #4]
 800b1c6:	f000 fd29 	bl	800bc1c <VL53L0X_SetLimitCheckEnable>
 800b1ca:	4603      	mov	r3, r0
 800b1cc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 800b1d0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d107      	bne.n	800b1e8 <VL53L0X_DataInit+0x1fc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 800b1d8:	2200      	movs	r2, #0
 800b1da:	2104      	movs	r1, #4
 800b1dc:	6878      	ldr	r0, [r7, #4]
 800b1de:	f000 fd1d 	bl	800bc1c <VL53L0X_SetLimitCheckEnable>
 800b1e2:	4603      	mov	r3, r0
 800b1e4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 800b1e8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d107      	bne.n	800b200 <VL53L0X_DataInit+0x214>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 800b1f0:	2200      	movs	r2, #0
 800b1f2:	2105      	movs	r1, #5
 800b1f4:	6878      	ldr	r0, [r7, #4]
 800b1f6:	f000 fd11 	bl	800bc1c <VL53L0X_SetLimitCheckEnable>
 800b1fa:	4603      	mov	r3, r0
 800b1fc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 800b200:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b204:	2b00      	cmp	r3, #0
 800b206:	d108      	bne.n	800b21a <VL53L0X_DataInit+0x22e>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800b208:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 800b20c:	2100      	movs	r1, #0
 800b20e:	6878      	ldr	r0, [r7, #4]
 800b210:	f000 fdb4 	bl	800bd7c <VL53L0X_SetLimitCheckValue>
 800b214:	4603      	mov	r3, r0
 800b216:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800b21a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d108      	bne.n	800b234 <VL53L0X_DataInit+0x248>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800b222:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800b226:	2101      	movs	r1, #1
 800b228:	6878      	ldr	r0, [r7, #4]
 800b22a:	f000 fda7 	bl	800bd7c <VL53L0X_SetLimitCheckValue>
 800b22e:	4603      	mov	r3, r0
 800b230:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800b234:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d108      	bne.n	800b24e <VL53L0X_DataInit+0x262>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800b23c:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 800b240:	2102      	movs	r1, #2
 800b242:	6878      	ldr	r0, [r7, #4]
 800b244:	f000 fd9a 	bl	800bd7c <VL53L0X_SetLimitCheckValue>
 800b248:	4603      	mov	r3, r0
 800b24a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800b24e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b252:	2b00      	cmp	r3, #0
 800b254:	d107      	bne.n	800b266 <VL53L0X_DataInit+0x27a>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800b256:	2200      	movs	r2, #0
 800b258:	2103      	movs	r1, #3
 800b25a:	6878      	ldr	r0, [r7, #4]
 800b25c:	f000 fd8e 	bl	800bd7c <VL53L0X_SetLimitCheckValue>
 800b260:	4603      	mov	r3, r0
 800b262:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800b266:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d10f      	bne.n	800b28e <VL53L0X_DataInit+0x2a2>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	22ff      	movs	r2, #255	; 0xff
 800b272:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800b276:	22ff      	movs	r2, #255	; 0xff
 800b278:	2101      	movs	r1, #1
 800b27a:	6878      	ldr	r0, [r7, #4]
 800b27c:	f004 fdf4 	bl	800fe68 <VL53L0X_WrByte>
 800b280:	4603      	mov	r3, r0
 800b282:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	2201      	movs	r2, #1
 800b28a:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
	}

	if (Status == VL53L0X_ERROR_NONE)
 800b28e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b292:	2b00      	cmp	r3, #0
 800b294:	d103      	bne.n	800b29e <VL53L0X_DataInit+0x2b2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	2200      	movs	r2, #0
 800b29a:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115


	LOG_FUNCTION_END(Status);
	return Status;
 800b29e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 800b2a2:	4618      	mov	r0, r3
 800b2a4:	3758      	adds	r7, #88	; 0x58
 800b2a6:	46bd      	mov	sp, r7
 800b2a8:	bdb0      	pop	{r4, r5, r7, pc}
 800b2aa:	bf00      	nop
 800b2ac:	00016b85 	.word	0x00016b85
 800b2b0:	000970a4 	.word	0x000970a4

0800b2b4 <VL53L0X_StaticInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev)
{
 800b2b4:	b5b0      	push	{r4, r5, r7, lr}
 800b2b6:	b09e      	sub	sp, #120	; 0x78
 800b2b8:	af02      	add	r7, sp, #8
 800b2ba:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b2bc:	2300      	movs	r3, #0
 800b2be:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 800b2c2:	f107 031c 	add.w	r3, r7, #28
 800b2c6:	2240      	movs	r2, #64	; 0x40
 800b2c8:	2100      	movs	r1, #0
 800b2ca:	4618      	mov	r0, r3
 800b2cc:	f004 ff34 	bl	8010138 <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 800b2d0:	2300      	movs	r3, #0
 800b2d2:	837b      	strh	r3, [r7, #26]
	uint8_t tempbyte = 0;
 800b2d4:	2300      	movs	r3, #0
 800b2d6:	767b      	strb	r3, [r7, #25]
	uint8_t UseInternalTuningSettings = 0;
 800b2d8:	2300      	movs	r3, #0
 800b2da:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint32_t count = 0;
 800b2de:	2300      	movs	r3, #0
 800b2e0:	663b      	str	r3, [r7, #96]	; 0x60
	uint8_t isApertureSpads = 0;
 800b2e2:	2300      	movs	r3, #0
 800b2e4:	763b      	strb	r3, [r7, #24]
	uint32_t refSpadCount = 0;
 800b2e6:	2300      	movs	r3, #0
 800b2e8:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 800b2ea:	2300      	movs	r3, #0
 800b2ec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t vcselPulsePeriodPCLK;
	uint32_t seqTimeoutMicroSecs;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 1);
 800b2f0:	2101      	movs	r1, #1
 800b2f2:	6878      	ldr	r0, [r7, #4]
 800b2f4:	f002 fafc 	bl	800d8f0 <VL53L0X_get_info_from_device>
 800b2f8:	4603      	mov	r3, r0
 800b2fa:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 800b304:	663b      	str	r3, [r7, #96]	; 0x60
		ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 800b30c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		ReferenceSpadType);

	/* NVM value invalid */
	if ((ApertureSpads > 1) ||
 800b310:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b314:	2b01      	cmp	r3, #1
 800b316:	d80d      	bhi.n	800b334 <VL53L0X_StaticInit+0x80>
 800b318:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b31c:	2b01      	cmp	r3, #1
 800b31e:	d102      	bne.n	800b326 <VL53L0X_StaticInit+0x72>
		((ApertureSpads == 1) && (count > 32)) ||
 800b320:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b322:	2b20      	cmp	r3, #32
 800b324:	d806      	bhi.n	800b334 <VL53L0X_StaticInit+0x80>
 800b326:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d10e      	bne.n	800b34c <VL53L0X_StaticInit+0x98>
		((ApertureSpads == 0) && (count > 12)))
 800b32e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b330:	2b0c      	cmp	r3, #12
 800b332:	d90b      	bls.n	800b34c <VL53L0X_StaticInit+0x98>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 800b334:	f107 0218 	add.w	r2, r7, #24
 800b338:	f107 0314 	add.w	r3, r7, #20
 800b33c:	4619      	mov	r1, r3
 800b33e:	6878      	ldr	r0, [r7, #4]
 800b340:	f001 fd58 	bl	800cdf4 <VL53L0X_perform_ref_spad_management>
 800b344:	4603      	mov	r3, r0
 800b346:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800b34a:	e009      	b.n	800b360 <VL53L0X_StaticInit+0xac>
			&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 800b34c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b350:	461a      	mov	r2, r3
 800b352:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800b354:	6878      	ldr	r0, [r7, #4]
 800b356:	f001 ff59 	bl	800d20c <VL53L0X_set_reference_spads>
 800b35a:	4603      	mov	r3, r0
 800b35c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 800b360:	4b94      	ldr	r3, [pc, #592]	; (800b5b4 <VL53L0X_StaticInit+0x300>)
 800b362:	66bb      	str	r3, [r7, #104]	; 0x68

	if (Status == VL53L0X_ERROR_NONE) {
 800b364:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d10f      	bne.n	800b38c <VL53L0X_StaticInit+0xd8>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 800b372:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 800b376:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d104      	bne.n	800b388 <VL53L0X_StaticInit+0xd4>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 800b384:	66bb      	str	r3, [r7, #104]	; 0x68
 800b386:	e001      	b.n	800b38c <VL53L0X_StaticInit+0xd8>
				pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 800b388:	4b8a      	ldr	r3, [pc, #552]	; (800b5b4 <VL53L0X_StaticInit+0x300>)
 800b38a:	66bb      	str	r3, [r7, #104]	; 0x68

	}

	if (Status == VL53L0X_ERROR_NONE)
 800b38c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b390:	2b00      	cmp	r3, #0
 800b392:	d106      	bne.n	800b3a2 <VL53L0X_StaticInit+0xee>
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 800b394:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b396:	6878      	ldr	r0, [r7, #4]
 800b398:	f003 fe50 	bl	800f03c <VL53L0X_load_tuning_settings>
 800b39c:	4603      	mov	r3, r0
 800b39e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 800b3a2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d10a      	bne.n	800b3c0 <VL53L0X_StaticInit+0x10c>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 800b3aa:	2300      	movs	r3, #0
 800b3ac:	9300      	str	r3, [sp, #0]
 800b3ae:	2304      	movs	r3, #4
 800b3b0:	2200      	movs	r2, #0
 800b3b2:	2100      	movs	r1, #0
 800b3b4:	6878      	ldr	r0, [r7, #4]
 800b3b6:	f001 f909 	bl	800c5cc <VL53L0X_SetGpioConfig>
 800b3ba:	4603      	mov	r3, r0
 800b3bc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800b3c0:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d121      	bne.n	800b40c <VL53L0X_StaticInit+0x158>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800b3c8:	2201      	movs	r2, #1
 800b3ca:	21ff      	movs	r1, #255	; 0xff
 800b3cc:	6878      	ldr	r0, [r7, #4]
 800b3ce:	f004 fd4b 	bl	800fe68 <VL53L0X_WrByte>
 800b3d2:	4603      	mov	r3, r0
 800b3d4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 800b3d8:	f107 031a 	add.w	r3, r7, #26
 800b3dc:	461a      	mov	r2, r3
 800b3de:	2184      	movs	r1, #132	; 0x84
 800b3e0:	6878      	ldr	r0, [r7, #4]
 800b3e2:	f004 fded 	bl	800ffc0 <VL53L0X_RdWord>
 800b3e6:	4603      	mov	r3, r0
 800b3e8:	461a      	mov	r2, r3
 800b3ea:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800b3ee:	4313      	orrs	r3, r2
 800b3f0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800b3f4:	2200      	movs	r2, #0
 800b3f6:	21ff      	movs	r1, #255	; 0xff
 800b3f8:	6878      	ldr	r0, [r7, #4]
 800b3fa:	f004 fd35 	bl	800fe68 <VL53L0X_WrByte>
 800b3fe:	4603      	mov	r3, r0
 800b400:	461a      	mov	r2, r3
 800b402:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800b406:	4313      	orrs	r3, r2
 800b408:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800b40c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b410:	2b00      	cmp	r3, #0
 800b412:	d105      	bne.n	800b420 <VL53L0X_StaticInit+0x16c>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 800b414:	8b7b      	ldrh	r3, [r7, #26]
 800b416:	011b      	lsls	r3, r3, #4
 800b418:	461a      	mov	r2, r3
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
			VL53L0X_FIXPOINT412TOFIXPOINT1616(tempword));
	}

	/* After static init, some device parameters may be changed,
	 * so update them */
	if (Status == VL53L0X_ERROR_NONE)
 800b420:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b424:	2b00      	cmp	r3, #0
 800b426:	d108      	bne.n	800b43a <VL53L0X_StaticInit+0x186>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 800b428:	f107 031c 	add.w	r3, r7, #28
 800b42c:	4619      	mov	r1, r3
 800b42e:	6878      	ldr	r0, [r7, #4]
 800b430:	f000 f8d0 	bl	800b5d4 <VL53L0X_GetDeviceParameters>
 800b434:	4603      	mov	r3, r0
 800b436:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	if (Status == VL53L0X_ERROR_NONE) {
 800b43a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d110      	bne.n	800b464 <VL53L0X_StaticInit+0x1b0>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 800b442:	f107 0319 	add.w	r3, r7, #25
 800b446:	4619      	mov	r1, r3
 800b448:	6878      	ldr	r0, [r7, #4]
 800b44a:	f000 f992 	bl	800b772 <VL53L0X_GetFractionEnable>
 800b44e:	4603      	mov	r3, r0
 800b450:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (Status == VL53L0X_ERROR_NONE)
 800b454:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d103      	bne.n	800b464 <VL53L0X_StaticInit+0x1b0>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 800b45c:	7e7a      	ldrb	r2, [r7, #25]
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131

	}

	if (Status == VL53L0X_ERROR_NONE)
 800b464:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d10e      	bne.n	800b48a <VL53L0X_StaticInit+0x1d6>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	f103 0410 	add.w	r4, r3, #16
 800b472:	f107 051c 	add.w	r5, r7, #28
 800b476:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b478:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b47a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b47c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b47e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b480:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b482:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800b486:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 800b48a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d111      	bne.n	800b4b6 <VL53L0X_StaticInit+0x202>
		Status = VL53L0X_RdByte(Dev,
 800b492:	f107 0319 	add.w	r3, r7, #25
 800b496:	461a      	mov	r2, r3
 800b498:	2101      	movs	r1, #1
 800b49a:	6878      	ldr	r0, [r7, #4]
 800b49c:	f004 fd66 	bl	800ff6c <VL53L0X_RdByte>
 800b4a0:	4603      	mov	r3, r0
 800b4a2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 800b4a6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d103      	bne.n	800b4b6 <VL53L0X_StaticInit+0x202>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 800b4ae:	7e7a      	ldrb	r2, [r7, #25]
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 800b4b6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d107      	bne.n	800b4ce <VL53L0X_StaticInit+0x21a>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 800b4be:	2200      	movs	r2, #0
 800b4c0:	2100      	movs	r1, #0
 800b4c2:	6878      	ldr	r0, [r7, #4]
 800b4c4:	f000 f9ca 	bl	800b85c <VL53L0X_SetSequenceStepEnable>
 800b4c8:	4603      	mov	r3, r0
 800b4ca:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					VL53L0X_SEQUENCESTEP_TCC, 0);


	if (Status == VL53L0X_ERROR_NONE)
 800b4ce:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d107      	bne.n	800b4e6 <VL53L0X_StaticInit+0x232>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 800b4d6:	2200      	movs	r2, #0
 800b4d8:	2102      	movs	r1, #2
 800b4da:	6878      	ldr	r0, [r7, #4]
 800b4dc:	f000 f9be 	bl	800b85c <VL53L0X_SetSequenceStepEnable>
 800b4e0:	4603      	mov	r3, r0
 800b4e2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_SEQUENCESTEP_MSRC, 0);


	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 800b4e6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d103      	bne.n	800b4f6 <VL53L0X_StaticInit+0x242>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	2203      	movs	r2, #3
 800b4f2:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132



	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 800b4f6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d109      	bne.n	800b512 <VL53L0X_StaticInit+0x25e>
		Status = VL53L0X_GetVcselPulsePeriod(
 800b4fe:	f107 0313 	add.w	r3, r7, #19
 800b502:	461a      	mov	r2, r3
 800b504:	2100      	movs	r1, #0
 800b506:	6878      	ldr	r0, [r7, #4]
 800b508:	f000 f990 	bl	800b82c <VL53L0X_GetVcselPulsePeriod>
 800b50c:	4603      	mov	r3, r0
 800b50e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_PRE_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800b512:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b516:	2b00      	cmp	r3, #0
 800b518:	d103      	bne.n	800b522 <VL53L0X_StaticInit+0x26e>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800b51a:	7cfa      	ldrb	r2, [r7, #19]
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				PreRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 800b522:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b526:	2b00      	cmp	r3, #0
 800b528:	d109      	bne.n	800b53e <VL53L0X_StaticInit+0x28a>
		Status = VL53L0X_GetVcselPulsePeriod(
 800b52a:	f107 0313 	add.w	r3, r7, #19
 800b52e:	461a      	mov	r2, r3
 800b530:	2101      	movs	r1, #1
 800b532:	6878      	ldr	r0, [r7, #4]
 800b534:	f000 f97a 	bl	800b82c <VL53L0X_GetVcselPulsePeriod>
 800b538:	4603      	mov	r3, r0
 800b53a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800b53e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b542:	2b00      	cmp	r3, #0
 800b544:	d103      	bne.n	800b54e <VL53L0X_StaticInit+0x29a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800b546:	7cfa      	ldrb	r2, [r7, #19]
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				FinalRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 800b54e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b552:	2b00      	cmp	r3, #0
 800b554:	d109      	bne.n	800b56a <VL53L0X_StaticInit+0x2b6>
		Status = get_sequence_step_timeout(
 800b556:	f107 030c 	add.w	r3, r7, #12
 800b55a:	461a      	mov	r2, r3
 800b55c:	2103      	movs	r1, #3
 800b55e:	6878      	ldr	r0, [r7, #4]
 800b560:	f002 ff48 	bl	800e3f4 <get_sequence_step_timeout>
 800b564:	4603      	mov	r3, r0
 800b566:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_PRE_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800b56a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d103      	bne.n	800b57a <VL53L0X_StaticInit+0x2c6>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 800b572:	68fa      	ldr	r2, [r7, #12]
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
			PreRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 800b57a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d109      	bne.n	800b596 <VL53L0X_StaticInit+0x2e2>
		Status = get_sequence_step_timeout(
 800b582:	f107 030c 	add.w	r3, r7, #12
 800b586:	461a      	mov	r2, r3
 800b588:	2104      	movs	r1, #4
 800b58a:	6878      	ldr	r0, [r7, #4]
 800b58c:	f002 ff32 	bl	800e3f4 <get_sequence_step_timeout>
 800b590:	4603      	mov	r3, r0
 800b592:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800b596:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d103      	bne.n	800b5a6 <VL53L0X_StaticInit+0x2f2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 800b59e:	68fa      	ldr	r2, [r7, #12]
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
			FinalRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b5a6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 800b5aa:	4618      	mov	r0, r3
 800b5ac:	3770      	adds	r7, #112	; 0x70
 800b5ae:	46bd      	mov	sp, r7
 800b5b0:	bdb0      	pop	{r4, r5, r7, pc}
 800b5b2:	bf00      	nop
 800b5b4:	200000d0 	.word	0x200000d0

0800b5b8 <VL53L0X_WaitDeviceBooted>:

VL53L0X_Error VL53L0X_WaitDeviceBooted(VL53L0X_DEV Dev)
{
 800b5b8:	b480      	push	{r7}
 800b5ba:	b085      	sub	sp, #20
 800b5bc:	af00      	add	r7, sp, #0
 800b5be:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NOT_IMPLEMENTED;
 800b5c0:	239d      	movs	r3, #157	; 0x9d
 800b5c2:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	/* not implemented on VL53L0X */

	LOG_FUNCTION_END(Status);
	return Status;
 800b5c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b5c8:	4618      	mov	r0, r3
 800b5ca:	3714      	adds	r7, #20
 800b5cc:	46bd      	mov	sp, r7
 800b5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d2:	4770      	bx	lr

0800b5d4 <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 800b5d4:	b580      	push	{r7, lr}
 800b5d6:	b084      	sub	sp, #16
 800b5d8:	af00      	add	r7, sp, #0
 800b5da:	6078      	str	r0, [r7, #4]
 800b5dc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b5de:	2300      	movs	r3, #0
 800b5e0:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 800b5e2:	683b      	ldr	r3, [r7, #0]
 800b5e4:	4619      	mov	r1, r3
 800b5e6:	6878      	ldr	r0, [r7, #4]
 800b5e8:	f000 f8b0 	bl	800b74c <VL53L0X_GetDeviceMode>
 800b5ec:	4603      	mov	r3, r0
 800b5ee:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800b5f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d107      	bne.n	800b608 <VL53L0X_GetDeviceParameters+0x34>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 800b5f8:	683b      	ldr	r3, [r7, #0]
 800b5fa:	3308      	adds	r3, #8
 800b5fc:	4619      	mov	r1, r3
 800b5fe:	6878      	ldr	r0, [r7, #4]
 800b600:	f000 fa78 	bl	800baf4 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 800b604:	4603      	mov	r3, r0
 800b606:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 800b608:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d102      	bne.n	800b616 <VL53L0X_GetDeviceParameters+0x42>
		pDeviceParameters->XTalkCompensationEnable = 0;
 800b610:	683b      	ldr	r3, [r7, #0]
 800b612:	2200      	movs	r2, #0
 800b614:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 800b616:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d107      	bne.n	800b62e <VL53L0X_GetDeviceParameters+0x5a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 800b61e:	683b      	ldr	r3, [r7, #0]
 800b620:	3310      	adds	r3, #16
 800b622:	4619      	mov	r1, r3
 800b624:	6878      	ldr	r0, [r7, #4]
 800b626:	f000 faae 	bl	800bb86 <VL53L0X_GetXTalkCompensationRateMegaCps>
 800b62a:	4603      	mov	r3, r0
 800b62c:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 800b62e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b632:	2b00      	cmp	r3, #0
 800b634:	d107      	bne.n	800b646 <VL53L0X_GetDeviceParameters+0x72>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 800b636:	683b      	ldr	r3, [r7, #0]
 800b638:	3314      	adds	r3, #20
 800b63a:	4619      	mov	r1, r3
 800b63c:	6878      	ldr	r0, [r7, #4]
 800b63e:	f7ff fcc2 	bl	800afc6 <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 800b642:	4603      	mov	r3, r0
 800b644:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 800b646:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d134      	bne.n	800b6b8 <VL53L0X_GetDeviceParameters+0xe4>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800b64e:	2300      	movs	r3, #0
 800b650:	60bb      	str	r3, [r7, #8]
 800b652:	e02a      	b.n	800b6aa <VL53L0X_GetDeviceParameters+0xd6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 800b654:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d12a      	bne.n	800b6b2 <VL53L0X_GetDeviceParameters+0xde>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 800b65c:	68bb      	ldr	r3, [r7, #8]
 800b65e:	b299      	uxth	r1, r3
 800b660:	68bb      	ldr	r3, [r7, #8]
 800b662:	3308      	adds	r3, #8
 800b664:	009b      	lsls	r3, r3, #2
 800b666:	683a      	ldr	r2, [r7, #0]
 800b668:	4413      	add	r3, r2
 800b66a:	3304      	adds	r3, #4
 800b66c:	461a      	mov	r2, r3
 800b66e:	6878      	ldr	r0, [r7, #4]
 800b670:	f000 fbe6 	bl	800be40 <VL53L0X_GetLimitCheckValue>
 800b674:	4603      	mov	r3, r0
 800b676:	461a      	mov	r2, r3
 800b678:	7bfb      	ldrb	r3, [r7, #15]
 800b67a:	4313      	orrs	r3, r2
 800b67c:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 800b67e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b682:	2b00      	cmp	r3, #0
 800b684:	d117      	bne.n	800b6b6 <VL53L0X_GetDeviceParameters+0xe2>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 800b686:	68bb      	ldr	r3, [r7, #8]
 800b688:	b299      	uxth	r1, r3
 800b68a:	68bb      	ldr	r3, [r7, #8]
 800b68c:	3318      	adds	r3, #24
 800b68e:	683a      	ldr	r2, [r7, #0]
 800b690:	4413      	add	r3, r2
 800b692:	461a      	mov	r2, r3
 800b694:	6878      	ldr	r0, [r7, #4]
 800b696:	f000 fb4d 	bl	800bd34 <VL53L0X_GetLimitCheckEnable>
 800b69a:	4603      	mov	r3, r0
 800b69c:	461a      	mov	r2, r3
 800b69e:	7bfb      	ldrb	r3, [r7, #15]
 800b6a0:	4313      	orrs	r3, r2
 800b6a2:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800b6a4:	68bb      	ldr	r3, [r7, #8]
 800b6a6:	3301      	adds	r3, #1
 800b6a8:	60bb      	str	r3, [r7, #8]
 800b6aa:	68bb      	ldr	r3, [r7, #8]
 800b6ac:	2b05      	cmp	r3, #5
 800b6ae:	ddd1      	ble.n	800b654 <VL53L0X_GetDeviceParameters+0x80>
 800b6b0:	e002      	b.n	800b6b8 <VL53L0X_GetDeviceParameters+0xe4>
				break;
 800b6b2:	bf00      	nop
 800b6b4:	e000      	b.n	800b6b8 <VL53L0X_GetDeviceParameters+0xe4>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 800b6b6:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800b6b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d107      	bne.n	800b6d0 <VL53L0X_GetDeviceParameters+0xfc>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 800b6c0:	683b      	ldr	r3, [r7, #0]
 800b6c2:	333c      	adds	r3, #60	; 0x3c
 800b6c4:	4619      	mov	r1, r3
 800b6c6:	6878      	ldr	r0, [r7, #4]
 800b6c8:	f000 fc48 	bl	800bf5c <VL53L0X_GetWrapAroundCheckEnable>
 800b6cc:	4603      	mov	r3, r0
 800b6ce:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 800b6d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d107      	bne.n	800b6e8 <VL53L0X_GetDeviceParameters+0x114>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 800b6d8:	683b      	ldr	r3, [r7, #0]
 800b6da:	3304      	adds	r3, #4
 800b6dc:	4619      	mov	r1, r3
 800b6de:	6878      	ldr	r0, [r7, #4]
 800b6e0:	f000 f879 	bl	800b7d6 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 800b6e4:	4603      	mov	r3, r0
 800b6e6:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b6e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b6ec:	4618      	mov	r0, r3
 800b6ee:	3710      	adds	r7, #16
 800b6f0:	46bd      	mov	sp, r7
 800b6f2:	bd80      	pop	{r7, pc}

0800b6f4 <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode)
{
 800b6f4:	b480      	push	{r7}
 800b6f6:	b085      	sub	sp, #20
 800b6f8:	af00      	add	r7, sp, #0
 800b6fa:	6078      	str	r0, [r7, #4]
 800b6fc:	460b      	mov	r3, r1
 800b6fe:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b700:	2300      	movs	r3, #0
 800b702:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 800b704:	78fb      	ldrb	r3, [r7, #3]
 800b706:	2b15      	cmp	r3, #21
 800b708:	bf8c      	ite	hi
 800b70a:	2201      	movhi	r2, #1
 800b70c:	2200      	movls	r2, #0
 800b70e:	b2d2      	uxtb	r2, r2
 800b710:	2a00      	cmp	r2, #0
 800b712:	d10e      	bne.n	800b732 <VL53L0X_SetDeviceMode+0x3e>
 800b714:	2201      	movs	r2, #1
 800b716:	409a      	lsls	r2, r3
 800b718:	4b0b      	ldr	r3, [pc, #44]	; (800b748 <VL53L0X_SetDeviceMode+0x54>)
 800b71a:	4013      	ands	r3, r2
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	bf14      	ite	ne
 800b720:	2301      	movne	r3, #1
 800b722:	2300      	moveq	r3, #0
 800b724:	b2db      	uxtb	r3, r3
 800b726:	2b00      	cmp	r3, #0
 800b728:	d003      	beq.n	800b732 <VL53L0X_SetDeviceMode+0x3e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	78fa      	ldrb	r2, [r7, #3]
 800b72e:	741a      	strb	r2, [r3, #16]
		break;
 800b730:	e001      	b.n	800b736 <VL53L0X_SetDeviceMode+0x42>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 800b732:	23f8      	movs	r3, #248	; 0xf8
 800b734:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b736:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b73a:	4618      	mov	r0, r3
 800b73c:	3714      	adds	r7, #20
 800b73e:	46bd      	mov	sp, r7
 800b740:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b744:	4770      	bx	lr
 800b746:	bf00      	nop
 800b748:	0030000b 	.word	0x0030000b

0800b74c <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 800b74c:	b480      	push	{r7}
 800b74e:	b085      	sub	sp, #20
 800b750:	af00      	add	r7, sp, #0
 800b752:	6078      	str	r0, [r7, #4]
 800b754:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b756:	2300      	movs	r3, #0
 800b758:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	7c1a      	ldrb	r2, [r3, #16]
 800b75e:	683b      	ldr	r3, [r7, #0]
 800b760:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800b762:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b766:	4618      	mov	r0, r3
 800b768:	3714      	adds	r7, #20
 800b76a:	46bd      	mov	sp, r7
 800b76c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b770:	4770      	bx	lr

0800b772 <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 800b772:	b580      	push	{r7, lr}
 800b774:	b084      	sub	sp, #16
 800b776:	af00      	add	r7, sp, #0
 800b778:	6078      	str	r0, [r7, #4]
 800b77a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b77c:	2300      	movs	r3, #0
 800b77e:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 800b780:	683a      	ldr	r2, [r7, #0]
 800b782:	2109      	movs	r1, #9
 800b784:	6878      	ldr	r0, [r7, #4]
 800b786:	f004 fbf1 	bl	800ff6c <VL53L0X_RdByte>
 800b78a:	4603      	mov	r3, r0
 800b78c:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800b78e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b792:	2b00      	cmp	r3, #0
 800b794:	d106      	bne.n	800b7a4 <VL53L0X_GetFractionEnable+0x32>
		*pEnabled = (*pEnabled & 1);
 800b796:	683b      	ldr	r3, [r7, #0]
 800b798:	781b      	ldrb	r3, [r3, #0]
 800b79a:	f003 0301 	and.w	r3, r3, #1
 800b79e:	b2da      	uxtb	r2, r3
 800b7a0:	683b      	ldr	r3, [r7, #0]
 800b7a2:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800b7a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b7a8:	4618      	mov	r0, r3
 800b7aa:	3710      	adds	r7, #16
 800b7ac:	46bd      	mov	sp, r7
 800b7ae:	bd80      	pop	{r7, pc}

0800b7b0 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 800b7b0:	b580      	push	{r7, lr}
 800b7b2:	b084      	sub	sp, #16
 800b7b4:	af00      	add	r7, sp, #0
 800b7b6:	6078      	str	r0, [r7, #4]
 800b7b8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b7ba:	2300      	movs	r3, #0
 800b7bc:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 800b7be:	6839      	ldr	r1, [r7, #0]
 800b7c0:	6878      	ldr	r0, [r7, #4]
 800b7c2:	f003 faaa 	bl	800ed1a <VL53L0X_set_measurement_timing_budget_micro_seconds>
 800b7c6:	4603      	mov	r3, r0
 800b7c8:	73fb      	strb	r3, [r7, #15]
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);

	return Status;
 800b7ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b7ce:	4618      	mov	r0, r3
 800b7d0:	3710      	adds	r7, #16
 800b7d2:	46bd      	mov	sp, r7
 800b7d4:	bd80      	pop	{r7, pc}

0800b7d6 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800b7d6:	b580      	push	{r7, lr}
 800b7d8:	b084      	sub	sp, #16
 800b7da:	af00      	add	r7, sp, #0
 800b7dc:	6078      	str	r0, [r7, #4]
 800b7de:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b7e0:	2300      	movs	r3, #0
 800b7e2:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 800b7e4:	6839      	ldr	r1, [r7, #0]
 800b7e6:	6878      	ldr	r0, [r7, #4]
 800b7e8:	f003 fb77 	bl	800eeda <VL53L0X_get_measurement_timing_budget_micro_seconds>
 800b7ec:	4603      	mov	r3, r0
 800b7ee:	73fb      	strb	r3, [r7, #15]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 800b7f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b7f4:	4618      	mov	r0, r3
 800b7f6:	3710      	adds	r7, #16
 800b7f8:	46bd      	mov	sp, r7
 800b7fa:	bd80      	pop	{r7, pc}

0800b7fc <VL53L0X_SetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_SetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 800b7fc:	b580      	push	{r7, lr}
 800b7fe:	b084      	sub	sp, #16
 800b800:	af00      	add	r7, sp, #0
 800b802:	6078      	str	r0, [r7, #4]
 800b804:	460b      	mov	r3, r1
 800b806:	70fb      	strb	r3, [r7, #3]
 800b808:	4613      	mov	r3, r2
 800b80a:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b80c:	2300      	movs	r3, #0
 800b80e:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_vcsel_pulse_period(Dev, VcselPeriodType,
 800b810:	78ba      	ldrb	r2, [r7, #2]
 800b812:	78fb      	ldrb	r3, [r7, #3]
 800b814:	4619      	mov	r1, r3
 800b816:	6878      	ldr	r0, [r7, #4]
 800b818:	f002 ffbf 	bl	800e79a <VL53L0X_set_vcsel_pulse_period>
 800b81c:	4603      	mov	r3, r0
 800b81e:	73fb      	strb	r3, [r7, #15]
		VCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 800b820:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b824:	4618      	mov	r0, r3
 800b826:	3710      	adds	r7, #16
 800b828:	46bd      	mov	sp, r7
 800b82a:	bd80      	pop	{r7, pc}

0800b82c <VL53L0X_GetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 800b82c:	b580      	push	{r7, lr}
 800b82e:	b086      	sub	sp, #24
 800b830:	af00      	add	r7, sp, #0
 800b832:	60f8      	str	r0, [r7, #12]
 800b834:	460b      	mov	r3, r1
 800b836:	607a      	str	r2, [r7, #4]
 800b838:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b83a:	2300      	movs	r3, #0
 800b83c:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 800b83e:	7afb      	ldrb	r3, [r7, #11]
 800b840:	687a      	ldr	r2, [r7, #4]
 800b842:	4619      	mov	r1, r3
 800b844:	68f8      	ldr	r0, [r7, #12]
 800b846:	f003 fa31 	bl	800ecac <VL53L0X_get_vcsel_pulse_period>
 800b84a:	4603      	mov	r3, r0
 800b84c:	75fb      	strb	r3, [r7, #23]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 800b84e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b852:	4618      	mov	r0, r3
 800b854:	3718      	adds	r7, #24
 800b856:	46bd      	mov	sp, r7
 800b858:	bd80      	pop	{r7, pc}
	...

0800b85c <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 800b85c:	b580      	push	{r7, lr}
 800b85e:	b086      	sub	sp, #24
 800b860:	af00      	add	r7, sp, #0
 800b862:	6078      	str	r0, [r7, #4]
 800b864:	460b      	mov	r3, r1
 800b866:	70fb      	strb	r3, [r7, #3]
 800b868:	4613      	mov	r3, r2
 800b86a:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b86c:	2300      	movs	r3, #0
 800b86e:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800b870:	2300      	movs	r3, #0
 800b872:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfigNew = 0;
 800b874:	2300      	movs	r3, #0
 800b876:	75bb      	strb	r3, [r7, #22]
	uint32_t MeasurementTimingBudgetMicroSeconds;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800b878:	f107 030f 	add.w	r3, r7, #15
 800b87c:	461a      	mov	r2, r3
 800b87e:	2101      	movs	r1, #1
 800b880:	6878      	ldr	r0, [r7, #4]
 800b882:	f004 fb73 	bl	800ff6c <VL53L0X_RdByte>
 800b886:	4603      	mov	r3, r0
 800b888:	75fb      	strb	r3, [r7, #23]
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 800b88a:	7bfb      	ldrb	r3, [r7, #15]
 800b88c:	75bb      	strb	r3, [r7, #22]

	if (Status == VL53L0X_ERROR_NONE) {
 800b88e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b892:	2b00      	cmp	r3, #0
 800b894:	d15a      	bne.n	800b94c <VL53L0X_SetSequenceStepEnable+0xf0>
		if (SequenceStepEnabled == 1) {
 800b896:	78bb      	ldrb	r3, [r7, #2]
 800b898:	2b01      	cmp	r3, #1
 800b89a:	d12b      	bne.n	800b8f4 <VL53L0X_SetSequenceStepEnable+0x98>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 800b89c:	78fb      	ldrb	r3, [r7, #3]
 800b89e:	2b04      	cmp	r3, #4
 800b8a0:	d825      	bhi.n	800b8ee <VL53L0X_SetSequenceStepEnable+0x92>
 800b8a2:	a201      	add	r2, pc, #4	; (adr r2, 800b8a8 <VL53L0X_SetSequenceStepEnable+0x4c>)
 800b8a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8a8:	0800b8bd 	.word	0x0800b8bd
 800b8ac:	0800b8c7 	.word	0x0800b8c7
 800b8b0:	0800b8d1 	.word	0x0800b8d1
 800b8b4:	0800b8db 	.word	0x0800b8db
 800b8b8:	0800b8e5 	.word	0x0800b8e5
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 800b8bc:	7dbb      	ldrb	r3, [r7, #22]
 800b8be:	f043 0310 	orr.w	r3, r3, #16
 800b8c2:	75bb      	strb	r3, [r7, #22]
				break;
 800b8c4:	e043      	b.n	800b94e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 800b8c6:	7dbb      	ldrb	r3, [r7, #22]
 800b8c8:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 800b8cc:	75bb      	strb	r3, [r7, #22]
				break;
 800b8ce:	e03e      	b.n	800b94e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 800b8d0:	7dbb      	ldrb	r3, [r7, #22]
 800b8d2:	f043 0304 	orr.w	r3, r3, #4
 800b8d6:	75bb      	strb	r3, [r7, #22]
				break;
 800b8d8:	e039      	b.n	800b94e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 800b8da:	7dbb      	ldrb	r3, [r7, #22]
 800b8dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b8e0:	75bb      	strb	r3, [r7, #22]
				break;
 800b8e2:	e034      	b.n	800b94e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 800b8e4:	7dbb      	ldrb	r3, [r7, #22]
 800b8e6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b8ea:	75bb      	strb	r3, [r7, #22]
				break;
 800b8ec:	e02f      	b.n	800b94e <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800b8ee:	23fc      	movs	r3, #252	; 0xfc
 800b8f0:	75fb      	strb	r3, [r7, #23]
 800b8f2:	e02c      	b.n	800b94e <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 800b8f4:	78fb      	ldrb	r3, [r7, #3]
 800b8f6:	2b04      	cmp	r3, #4
 800b8f8:	d825      	bhi.n	800b946 <VL53L0X_SetSequenceStepEnable+0xea>
 800b8fa:	a201      	add	r2, pc, #4	; (adr r2, 800b900 <VL53L0X_SetSequenceStepEnable+0xa4>)
 800b8fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b900:	0800b915 	.word	0x0800b915
 800b904:	0800b91f 	.word	0x0800b91f
 800b908:	0800b929 	.word	0x0800b929
 800b90c:	0800b933 	.word	0x0800b933
 800b910:	0800b93d 	.word	0x0800b93d
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 800b914:	7dbb      	ldrb	r3, [r7, #22]
 800b916:	f023 0310 	bic.w	r3, r3, #16
 800b91a:	75bb      	strb	r3, [r7, #22]
				break;
 800b91c:	e017      	b.n	800b94e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 800b91e:	7dbb      	ldrb	r3, [r7, #22]
 800b920:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 800b924:	75bb      	strb	r3, [r7, #22]
				break;
 800b926:	e012      	b.n	800b94e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 800b928:	7dbb      	ldrb	r3, [r7, #22]
 800b92a:	f023 0304 	bic.w	r3, r3, #4
 800b92e:	75bb      	strb	r3, [r7, #22]
				break;
 800b930:	e00d      	b.n	800b94e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 800b932:	7dbb      	ldrb	r3, [r7, #22]
 800b934:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b938:	75bb      	strb	r3, [r7, #22]
				break;
 800b93a:	e008      	b.n	800b94e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 800b93c:	7dbb      	ldrb	r3, [r7, #22]
 800b93e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b942:	75bb      	strb	r3, [r7, #22]
				break;
 800b944:	e003      	b.n	800b94e <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800b946:	23fc      	movs	r3, #252	; 0xfc
 800b948:	75fb      	strb	r3, [r7, #23]
 800b94a:	e000      	b.n	800b94e <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		}
 800b94c:	bf00      	nop
	}

	if (SequenceConfigNew != SequenceConfig) {
 800b94e:	7bfb      	ldrb	r3, [r7, #15]
 800b950:	7dba      	ldrb	r2, [r7, #22]
 800b952:	429a      	cmp	r2, r3
 800b954:	d01e      	beq.n	800b994 <VL53L0X_SetSequenceStepEnable+0x138>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 800b956:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d107      	bne.n	800b96e <VL53L0X_SetSequenceStepEnable+0x112>
			Status = VL53L0X_WrByte(Dev,
 800b95e:	7dbb      	ldrb	r3, [r7, #22]
 800b960:	461a      	mov	r2, r3
 800b962:	2101      	movs	r1, #1
 800b964:	6878      	ldr	r0, [r7, #4]
 800b966:	f004 fa7f 	bl	800fe68 <VL53L0X_WrByte>
 800b96a:	4603      	mov	r3, r0
 800b96c:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 800b96e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b972:	2b00      	cmp	r3, #0
 800b974:	d103      	bne.n	800b97e <VL53L0X_SetSequenceStepEnable+0x122>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	7dba      	ldrb	r2, [r7, #22]
 800b97a:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130


		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 800b97e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b982:	2b00      	cmp	r3, #0
 800b984:	d106      	bne.n	800b994 <VL53L0X_SetSequenceStepEnable+0x138>
			VL53L0X_GETPARAMETERFIELD(Dev,
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	695b      	ldr	r3, [r3, #20]
 800b98a:	613b      	str	r3, [r7, #16]
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 800b98c:	6939      	ldr	r1, [r7, #16]
 800b98e:	6878      	ldr	r0, [r7, #4]
 800b990:	f7ff ff0e 	bl	800b7b0 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		}
	}

	LOG_FUNCTION_END(Status);

	return Status;
 800b994:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b998:	4618      	mov	r0, r3
 800b99a:	3718      	adds	r7, #24
 800b99c:	46bd      	mov	sp, r7
 800b99e:	bd80      	pop	{r7, pc}

0800b9a0 <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 800b9a0:	b480      	push	{r7}
 800b9a2:	b087      	sub	sp, #28
 800b9a4:	af00      	add	r7, sp, #0
 800b9a6:	60f8      	str	r0, [r7, #12]
 800b9a8:	607b      	str	r3, [r7, #4]
 800b9aa:	460b      	mov	r3, r1
 800b9ac:	72fb      	strb	r3, [r7, #11]
 800b9ae:	4613      	mov	r3, r2
 800b9b0:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b9b2:	2300      	movs	r3, #0
 800b9b4:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	2200      	movs	r2, #0
 800b9ba:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 800b9bc:	7afb      	ldrb	r3, [r7, #11]
 800b9be:	2b04      	cmp	r3, #4
 800b9c0:	d836      	bhi.n	800ba30 <sequence_step_enabled+0x90>
 800b9c2:	a201      	add	r2, pc, #4	; (adr r2, 800b9c8 <sequence_step_enabled+0x28>)
 800b9c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9c8:	0800b9dd 	.word	0x0800b9dd
 800b9cc:	0800b9ef 	.word	0x0800b9ef
 800b9d0:	0800ba01 	.word	0x0800ba01
 800b9d4:	0800ba13 	.word	0x0800ba13
 800b9d8:	0800ba25 	.word	0x0800ba25
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 800b9dc:	7abb      	ldrb	r3, [r7, #10]
 800b9de:	111b      	asrs	r3, r3, #4
 800b9e0:	b2db      	uxtb	r3, r3
 800b9e2:	f003 0301 	and.w	r3, r3, #1
 800b9e6:	b2da      	uxtb	r2, r3
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	701a      	strb	r2, [r3, #0]
		break;
 800b9ec:	e022      	b.n	800ba34 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 800b9ee:	7abb      	ldrb	r3, [r7, #10]
 800b9f0:	10db      	asrs	r3, r3, #3
 800b9f2:	b2db      	uxtb	r3, r3
 800b9f4:	f003 0301 	and.w	r3, r3, #1
 800b9f8:	b2da      	uxtb	r2, r3
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	701a      	strb	r2, [r3, #0]
		break;
 800b9fe:	e019      	b.n	800ba34 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 800ba00:	7abb      	ldrb	r3, [r7, #10]
 800ba02:	109b      	asrs	r3, r3, #2
 800ba04:	b2db      	uxtb	r3, r3
 800ba06:	f003 0301 	and.w	r3, r3, #1
 800ba0a:	b2da      	uxtb	r2, r3
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	701a      	strb	r2, [r3, #0]
		break;
 800ba10:	e010      	b.n	800ba34 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 800ba12:	7abb      	ldrb	r3, [r7, #10]
 800ba14:	119b      	asrs	r3, r3, #6
 800ba16:	b2db      	uxtb	r3, r3
 800ba18:	f003 0301 	and.w	r3, r3, #1
 800ba1c:	b2da      	uxtb	r2, r3
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	701a      	strb	r2, [r3, #0]
		break;
 800ba22:	e007      	b.n	800ba34 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 800ba24:	7abb      	ldrb	r3, [r7, #10]
 800ba26:	09db      	lsrs	r3, r3, #7
 800ba28:	b2da      	uxtb	r2, r3
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	701a      	strb	r2, [r3, #0]
		break;
 800ba2e:	e001      	b.n	800ba34 <sequence_step_enabled+0x94>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ba30:	23fc      	movs	r3, #252	; 0xfc
 800ba32:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800ba34:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ba38:	4618      	mov	r0, r3
 800ba3a:	371c      	adds	r7, #28
 800ba3c:	46bd      	mov	sp, r7
 800ba3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba42:	4770      	bx	lr

0800ba44 <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 800ba44:	b580      	push	{r7, lr}
 800ba46:	b084      	sub	sp, #16
 800ba48:	af00      	add	r7, sp, #0
 800ba4a:	6078      	str	r0, [r7, #4]
 800ba4c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ba4e:	2300      	movs	r3, #0
 800ba50:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 800ba52:	2300      	movs	r3, #0
 800ba54:	73bb      	strb	r3, [r7, #14]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800ba56:	f107 030e 	add.w	r3, r7, #14
 800ba5a:	461a      	mov	r2, r3
 800ba5c:	2101      	movs	r1, #1
 800ba5e:	6878      	ldr	r0, [r7, #4]
 800ba60:	f004 fa84 	bl	800ff6c <VL53L0X_RdByte>
 800ba64:	4603      	mov	r3, r0
 800ba66:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 800ba68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d107      	bne.n	800ba80 <VL53L0X_GetSequenceStepEnables+0x3c>
		Status = sequence_step_enabled(Dev,
 800ba70:	7bba      	ldrb	r2, [r7, #14]
 800ba72:	683b      	ldr	r3, [r7, #0]
 800ba74:	2100      	movs	r1, #0
 800ba76:	6878      	ldr	r0, [r7, #4]
 800ba78:	f7ff ff92 	bl	800b9a0 <sequence_step_enabled>
 800ba7c:	4603      	mov	r3, r0
 800ba7e:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800ba80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d108      	bne.n	800ba9a <VL53L0X_GetSequenceStepEnables+0x56>
		Status = sequence_step_enabled(Dev,
 800ba88:	7bba      	ldrb	r2, [r7, #14]
 800ba8a:	683b      	ldr	r3, [r7, #0]
 800ba8c:	3302      	adds	r3, #2
 800ba8e:	2101      	movs	r1, #1
 800ba90:	6878      	ldr	r0, [r7, #4]
 800ba92:	f7ff ff85 	bl	800b9a0 <sequence_step_enabled>
 800ba96:	4603      	mov	r3, r0
 800ba98:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800ba9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d108      	bne.n	800bab4 <VL53L0X_GetSequenceStepEnables+0x70>
		Status = sequence_step_enabled(Dev,
 800baa2:	7bba      	ldrb	r2, [r7, #14]
 800baa4:	683b      	ldr	r3, [r7, #0]
 800baa6:	3301      	adds	r3, #1
 800baa8:	2102      	movs	r1, #2
 800baaa:	6878      	ldr	r0, [r7, #4]
 800baac:	f7ff ff78 	bl	800b9a0 <sequence_step_enabled>
 800bab0:	4603      	mov	r3, r0
 800bab2:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800bab4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d108      	bne.n	800bace <VL53L0X_GetSequenceStepEnables+0x8a>
		Status = sequence_step_enabled(Dev,
 800babc:	7bba      	ldrb	r2, [r7, #14]
 800babe:	683b      	ldr	r3, [r7, #0]
 800bac0:	3303      	adds	r3, #3
 800bac2:	2103      	movs	r1, #3
 800bac4:	6878      	ldr	r0, [r7, #4]
 800bac6:	f7ff ff6b 	bl	800b9a0 <sequence_step_enabled>
 800baca:	4603      	mov	r3, r0
 800bacc:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800bace:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d108      	bne.n	800bae8 <VL53L0X_GetSequenceStepEnables+0xa4>
		Status = sequence_step_enabled(Dev,
 800bad6:	7bba      	ldrb	r2, [r7, #14]
 800bad8:	683b      	ldr	r3, [r7, #0]
 800bada:	3304      	adds	r3, #4
 800badc:	2104      	movs	r1, #4
 800bade:	6878      	ldr	r0, [r7, #4]
 800bae0:	f7ff ff5e 	bl	800b9a0 <sequence_step_enabled>
 800bae4:	4603      	mov	r3, r0
 800bae6:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800bae8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800baec:	4618      	mov	r0, r3
 800baee:	3710      	adds	r7, #16
 800baf0:	46bd      	mov	sp, r7
 800baf2:	bd80      	pop	{r7, pc}

0800baf4 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 800baf4:	b580      	push	{r7, lr}
 800baf6:	b084      	sub	sp, #16
 800baf8:	af00      	add	r7, sp, #0
 800bafa:	6078      	str	r0, [r7, #4]
 800bafc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bafe:	2300      	movs	r3, #0
 800bb00:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 800bb02:	f107 030c 	add.w	r3, r7, #12
 800bb06:	461a      	mov	r2, r3
 800bb08:	21f8      	movs	r1, #248	; 0xf8
 800bb0a:	6878      	ldr	r0, [r7, #4]
 800bb0c:	f004 fa58 	bl	800ffc0 <VL53L0X_RdWord>
 800bb10:	4603      	mov	r3, r0
 800bb12:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 800bb14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d108      	bne.n	800bb2e <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
		Status = VL53L0X_RdDWord(Dev,
 800bb1c:	f107 0308 	add.w	r3, r7, #8
 800bb20:	461a      	mov	r2, r3
 800bb22:	2104      	movs	r1, #4
 800bb24:	6878      	ldr	r0, [r7, #4]
 800bb26:	f004 fa83 	bl	8010030 <VL53L0X_RdDWord>
 800bb2a:	4603      	mov	r3, r0
 800bb2c:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800bb2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d10c      	bne.n	800bb50 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
		if (osc_calibrate_val != 0) {
 800bb36:	89bb      	ldrh	r3, [r7, #12]
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d005      	beq.n	800bb48 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 800bb3c:	68bb      	ldr	r3, [r7, #8]
 800bb3e:	89ba      	ldrh	r2, [r7, #12]
 800bb40:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 800bb44:	683b      	ldr	r3, [r7, #0]
 800bb46:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 800bb48:	683b      	ldr	r3, [r7, #0]
 800bb4a:	681a      	ldr	r2, [r3, #0]
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800bb50:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bb54:	4618      	mov	r0, r3
 800bb56:	3710      	adds	r7, #16
 800bb58:	46bd      	mov	sp, r7
 800bb5a:	bd80      	pop	{r7, pc}

0800bb5c <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 800bb5c:	b480      	push	{r7}
 800bb5e:	b085      	sub	sp, #20
 800bb60:	af00      	add	r7, sp, #0
 800bb62:	6078      	str	r0, [r7, #4]
 800bb64:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bb66:	2300      	movs	r3, #0
 800bb68:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	7f1b      	ldrb	r3, [r3, #28]
 800bb6e:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 800bb70:	683b      	ldr	r3, [r7, #0]
 800bb72:	7bba      	ldrb	r2, [r7, #14]
 800bb74:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800bb76:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bb7a:	4618      	mov	r0, r3
 800bb7c:	3714      	adds	r7, #20
 800bb7e:	46bd      	mov	sp, r7
 800bb80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb84:	4770      	bx	lr

0800bb86 <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 800bb86:	b580      	push	{r7, lr}
 800bb88:	b086      	sub	sp, #24
 800bb8a:	af00      	add	r7, sp, #0
 800bb8c:	6078      	str	r0, [r7, #4]
 800bb8e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bb90:	2300      	movs	r3, #0
 800bb92:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 800bb94:	f107 030e 	add.w	r3, r7, #14
 800bb98:	461a      	mov	r2, r3
 800bb9a:	2120      	movs	r1, #32
 800bb9c:	6878      	ldr	r0, [r7, #4]
 800bb9e:	f004 fa0f 	bl	800ffc0 <VL53L0X_RdWord>
 800bba2:	4603      	mov	r3, r0
 800bba4:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 800bba6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d118      	bne.n	800bbe0 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		if (Value == 0) {
 800bbae:	89fb      	ldrh	r3, [r7, #14]
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d109      	bne.n	800bbc8 <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	6a1b      	ldr	r3, [r3, #32]
 800bbb8:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 800bbba:	683b      	ldr	r3, [r7, #0]
 800bbbc:	693a      	ldr	r2, [r7, #16]
 800bbbe:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	2200      	movs	r2, #0
 800bbc4:	771a      	strb	r2, [r3, #28]
 800bbc6:	e00b      	b.n	800bbe0 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 800bbc8:	89fb      	ldrh	r3, [r7, #14]
 800bbca:	00db      	lsls	r3, r3, #3
 800bbcc:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 800bbce:	683b      	ldr	r3, [r7, #0]
 800bbd0:	693a      	ldr	r2, [r7, #16]
 800bbd2:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	693a      	ldr	r2, [r7, #16]
 800bbd8:	621a      	str	r2, [r3, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	2201      	movs	r2, #1
 800bbde:	771a      	strb	r2, [r3, #28]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800bbe0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bbe4:	4618      	mov	r0, r3
 800bbe6:	3718      	adds	r7, #24
 800bbe8:	46bd      	mov	sp, r7
 800bbea:	bd80      	pop	{r7, pc}

0800bbec <VL53L0X_SetRefCalibration>:

VL53L0X_Error VL53L0X_SetRefCalibration(VL53L0X_DEV Dev, uint8_t VhvSettings,
	uint8_t PhaseCal)
{
 800bbec:	b580      	push	{r7, lr}
 800bbee:	b084      	sub	sp, #16
 800bbf0:	af00      	add	r7, sp, #0
 800bbf2:	6078      	str	r0, [r7, #4]
 800bbf4:	460b      	mov	r3, r1
 800bbf6:	70fb      	strb	r3, [r7, #3]
 800bbf8:	4613      	mov	r3, r2
 800bbfa:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bbfc:	2300      	movs	r3, #0
 800bbfe:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_ref_calibration(Dev, VhvSettings, PhaseCal);
 800bc00:	78ba      	ldrb	r2, [r7, #2]
 800bc02:	78fb      	ldrb	r3, [r7, #3]
 800bc04:	4619      	mov	r1, r3
 800bc06:	6878      	ldr	r0, [r7, #4]
 800bc08:	f001 fd82 	bl	800d710 <VL53L0X_set_ref_calibration>
 800bc0c:	4603      	mov	r3, r0
 800bc0e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 800bc10:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bc14:	4618      	mov	r0, r3
 800bc16:	3710      	adds	r7, #16
 800bc18:	46bd      	mov	sp, r7
 800bc1a:	bd80      	pop	{r7, pc}

0800bc1c <VL53L0X_SetLimitCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 800bc1c:	b580      	push	{r7, lr}
 800bc1e:	b086      	sub	sp, #24
 800bc20:	af00      	add	r7, sp, #0
 800bc22:	6078      	str	r0, [r7, #4]
 800bc24:	460b      	mov	r3, r1
 800bc26:	807b      	strh	r3, [r7, #2]
 800bc28:	4613      	mov	r3, r2
 800bc2a:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bc2c:	2300      	movs	r3, #0
 800bc2e:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 800bc30:	2300      	movs	r3, #0
 800bc32:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 800bc34:	2300      	movs	r3, #0
 800bc36:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 800bc38:	2300      	movs	r3, #0
 800bc3a:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 800bc3c:	887b      	ldrh	r3, [r7, #2]
 800bc3e:	2b05      	cmp	r3, #5
 800bc40:	d902      	bls.n	800bc48 <VL53L0X_SetLimitCheckEnable+0x2c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800bc42:	23fc      	movs	r3, #252	; 0xfc
 800bc44:	75fb      	strb	r3, [r7, #23]
 800bc46:	e05b      	b.n	800bd00 <VL53L0X_SetLimitCheckEnable+0xe4>
	} else {
		if (LimitCheckEnable == 0) {
 800bc48:	787b      	ldrb	r3, [r7, #1]
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d106      	bne.n	800bc5c <VL53L0X_SetLimitCheckEnable+0x40>
			TempFix1616 = 0;
 800bc4e:	2300      	movs	r3, #0
 800bc50:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 800bc52:	2300      	movs	r3, #0
 800bc54:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 800bc56:	2301      	movs	r3, #1
 800bc58:	73bb      	strb	r3, [r7, #14]
 800bc5a:	e00a      	b.n	800bc72 <VL53L0X_SetLimitCheckEnable+0x56>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800bc5c:	887b      	ldrh	r3, [r7, #2]
 800bc5e:	687a      	ldr	r2, [r7, #4]
 800bc60:	330c      	adds	r3, #12
 800bc62:	009b      	lsls	r3, r3, #2
 800bc64:	4413      	add	r3, r2
 800bc66:	685b      	ldr	r3, [r3, #4]
 800bc68:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 800bc6a:	2300      	movs	r3, #0
 800bc6c:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 800bc6e:	2301      	movs	r3, #1
 800bc70:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 800bc72:	887b      	ldrh	r3, [r7, #2]
 800bc74:	2b05      	cmp	r3, #5
 800bc76:	d841      	bhi.n	800bcfc <VL53L0X_SetLimitCheckEnable+0xe0>
 800bc78:	a201      	add	r2, pc, #4	; (adr r2, 800bc80 <VL53L0X_SetLimitCheckEnable+0x64>)
 800bc7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc7e:	bf00      	nop
 800bc80:	0800bc99 	.word	0x0800bc99
 800bc84:	0800bca3 	.word	0x0800bca3
 800bc88:	0800bcb9 	.word	0x0800bcb9
 800bc8c:	0800bcc3 	.word	0x0800bcc3
 800bc90:	0800bccd 	.word	0x0800bccd
 800bc94:	0800bce5 	.word	0x0800bce5

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	7bfa      	ldrb	r2, [r7, #15]
 800bc9c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 800bca0:	e02e      	b.n	800bd00 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 800bca2:	693b      	ldr	r3, [r7, #16]
 800bca4:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 800bca6:	b29b      	uxth	r3, r3
 800bca8:	461a      	mov	r2, r3
 800bcaa:	2144      	movs	r1, #68	; 0x44
 800bcac:	6878      	ldr	r0, [r7, #4]
 800bcae:	f004 f8ff 	bl	800feb0 <VL53L0X_WrWord>
 800bcb2:	4603      	mov	r3, r0
 800bcb4:	75fb      	strb	r3, [r7, #23]

			break;
 800bcb6:	e023      	b.n	800bd00 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	7bfa      	ldrb	r2, [r7, #15]
 800bcbc:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 800bcc0:	e01e      	b.n	800bd00 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	7bfa      	ldrb	r2, [r7, #15]
 800bcc6:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 800bcca:	e019      	b.n	800bd00 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 800bccc:	7bbb      	ldrb	r3, [r7, #14]
 800bcce:	005b      	lsls	r3, r3, #1
 800bcd0:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 800bcd2:	7b7b      	ldrb	r3, [r7, #13]
 800bcd4:	22fe      	movs	r2, #254	; 0xfe
 800bcd6:	2160      	movs	r1, #96	; 0x60
 800bcd8:	6878      	ldr	r0, [r7, #4]
 800bcda:	f004 f913 	bl	800ff04 <VL53L0X_UpdateByte>
 800bcde:	4603      	mov	r3, r0
 800bce0:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 800bce2:	e00d      	b.n	800bd00 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 800bce4:	7bbb      	ldrb	r3, [r7, #14]
 800bce6:	011b      	lsls	r3, r3, #4
 800bce8:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 800bcea:	7b7b      	ldrb	r3, [r7, #13]
 800bcec:	22ef      	movs	r2, #239	; 0xef
 800bcee:	2160      	movs	r1, #96	; 0x60
 800bcf0:	6878      	ldr	r0, [r7, #4]
 800bcf2:	f004 f907 	bl	800ff04 <VL53L0X_UpdateByte>
 800bcf6:	4603      	mov	r3, r0
 800bcf8:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 800bcfa:	e001      	b.n	800bd00 <VL53L0X_SetLimitCheckEnable+0xe4>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800bcfc:	23fc      	movs	r3, #252	; 0xfc
 800bcfe:	75fb      	strb	r3, [r7, #23]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 800bd00:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d10f      	bne.n	800bd28 <VL53L0X_SetLimitCheckEnable+0x10c>
		if (LimitCheckEnable == 0) {
 800bd08:	787b      	ldrb	r3, [r7, #1]
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d106      	bne.n	800bd1c <VL53L0X_SetLimitCheckEnable+0x100>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800bd0e:	887b      	ldrh	r3, [r7, #2]
 800bd10:	687a      	ldr	r2, [r7, #4]
 800bd12:	4413      	add	r3, r2
 800bd14:	2200      	movs	r2, #0
 800bd16:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800bd1a:	e005      	b.n	800bd28 <VL53L0X_SetLimitCheckEnable+0x10c>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800bd1c:	887b      	ldrh	r3, [r7, #2]
 800bd1e:	687a      	ldr	r2, [r7, #4]
 800bd20:	4413      	add	r3, r2
 800bd22:	2201      	movs	r2, #1
 800bd24:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800bd28:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bd2c:	4618      	mov	r0, r3
 800bd2e:	3718      	adds	r7, #24
 800bd30:	46bd      	mov	sp, r7
 800bd32:	bd80      	pop	{r7, pc}

0800bd34 <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 800bd34:	b480      	push	{r7}
 800bd36:	b087      	sub	sp, #28
 800bd38:	af00      	add	r7, sp, #0
 800bd3a:	60f8      	str	r0, [r7, #12]
 800bd3c:	460b      	mov	r3, r1
 800bd3e:	607a      	str	r2, [r7, #4]
 800bd40:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bd42:	2300      	movs	r3, #0
 800bd44:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 800bd46:	897b      	ldrh	r3, [r7, #10]
 800bd48:	2b05      	cmp	r3, #5
 800bd4a:	d905      	bls.n	800bd58 <VL53L0X_GetLimitCheckEnable+0x24>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800bd4c:	23fc      	movs	r3, #252	; 0xfc
 800bd4e:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	2200      	movs	r2, #0
 800bd54:	701a      	strb	r2, [r3, #0]
 800bd56:	e008      	b.n	800bd6a <VL53L0X_GetLimitCheckEnable+0x36>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800bd58:	897b      	ldrh	r3, [r7, #10]
 800bd5a:	68fa      	ldr	r2, [r7, #12]
 800bd5c:	4413      	add	r3, r2
 800bd5e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bd62:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	7dba      	ldrb	r2, [r7, #22]
 800bd68:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800bd6a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bd6e:	4618      	mov	r0, r3
 800bd70:	371c      	adds	r7, #28
 800bd72:	46bd      	mov	sp, r7
 800bd74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd78:	4770      	bx	lr
	...

0800bd7c <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 800bd7c:	b580      	push	{r7, lr}
 800bd7e:	b086      	sub	sp, #24
 800bd80:	af00      	add	r7, sp, #0
 800bd82:	60f8      	str	r0, [r7, #12]
 800bd84:	460b      	mov	r3, r1
 800bd86:	607a      	str	r2, [r7, #4]
 800bd88:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bd8a:	2300      	movs	r3, #0
 800bd8c:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 800bd8e:	897b      	ldrh	r3, [r7, #10]
 800bd90:	68fa      	ldr	r2, [r7, #12]
 800bd92:	4413      	add	r3, r2
 800bd94:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bd98:	75bb      	strb	r3, [r7, #22]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 800bd9a:	7dbb      	ldrb	r3, [r7, #22]
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d107      	bne.n	800bdb0 <VL53L0X_SetLimitCheckValue+0x34>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800bda0:	897b      	ldrh	r3, [r7, #10]
 800bda2:	68fa      	ldr	r2, [r7, #12]
 800bda4:	330c      	adds	r3, #12
 800bda6:	009b      	lsls	r3, r3, #2
 800bda8:	4413      	add	r3, r2
 800bdaa:	687a      	ldr	r2, [r7, #4]
 800bdac:	605a      	str	r2, [r3, #4]
 800bdae:	e040      	b.n	800be32 <VL53L0X_SetLimitCheckValue+0xb6>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 800bdb0:	897b      	ldrh	r3, [r7, #10]
 800bdb2:	2b05      	cmp	r3, #5
 800bdb4:	d830      	bhi.n	800be18 <VL53L0X_SetLimitCheckValue+0x9c>
 800bdb6:	a201      	add	r2, pc, #4	; (adr r2, 800bdbc <VL53L0X_SetLimitCheckValue+0x40>)
 800bdb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdbc:	0800bdd5 	.word	0x0800bdd5
 800bdc0:	0800bddd 	.word	0x0800bddd
 800bdc4:	0800bdf3 	.word	0x0800bdf3
 800bdc8:	0800bdfb 	.word	0x0800bdfb
 800bdcc:	0800be03 	.word	0x0800be03
 800bdd0:	0800be03 	.word	0x0800be03

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	687a      	ldr	r2, [r7, #4]
 800bdd8:	635a      	str	r2, [r3, #52]	; 0x34
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 800bdda:	e01f      	b.n	800be1c <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 800bde0:	b29b      	uxth	r3, r3
 800bde2:	461a      	mov	r2, r3
 800bde4:	2144      	movs	r1, #68	; 0x44
 800bde6:	68f8      	ldr	r0, [r7, #12]
 800bde8:	f004 f862 	bl	800feb0 <VL53L0X_WrWord>
 800bdec:	4603      	mov	r3, r0
 800bdee:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 800bdf0:	e014      	b.n	800be1c <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	687a      	ldr	r2, [r7, #4]
 800bdf6:	63da      	str	r2, [r3, #60]	; 0x3c
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 800bdf8:	e010      	b.n	800be1c <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	687a      	ldr	r2, [r7, #4]
 800bdfe:	641a      	str	r2, [r3, #64]	; 0x40
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 800be00:	e00c      	b.n	800be1c <VL53L0X_SetLimitCheckValue+0xa0>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 800be06:	b29b      	uxth	r3, r3
 800be08:	461a      	mov	r2, r3
 800be0a:	2164      	movs	r1, #100	; 0x64
 800be0c:	68f8      	ldr	r0, [r7, #12]
 800be0e:	f004 f84f 	bl	800feb0 <VL53L0X_WrWord>
 800be12:	4603      	mov	r3, r0
 800be14:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 800be16:	e001      	b.n	800be1c <VL53L0X_SetLimitCheckValue+0xa0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800be18:	23fc      	movs	r3, #252	; 0xfc
 800be1a:	75fb      	strb	r3, [r7, #23]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 800be1c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800be20:	2b00      	cmp	r3, #0
 800be22:	d106      	bne.n	800be32 <VL53L0X_SetLimitCheckValue+0xb6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800be24:	897b      	ldrh	r3, [r7, #10]
 800be26:	68fa      	ldr	r2, [r7, #12]
 800be28:	330c      	adds	r3, #12
 800be2a:	009b      	lsls	r3, r3, #2
 800be2c:	4413      	add	r3, r2
 800be2e:	687a      	ldr	r2, [r7, #4]
 800be30:	605a      	str	r2, [r3, #4]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800be32:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800be36:	4618      	mov	r0, r3
 800be38:	3718      	adds	r7, #24
 800be3a:	46bd      	mov	sp, r7
 800be3c:	bd80      	pop	{r7, pc}
 800be3e:	bf00      	nop

0800be40 <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 800be40:	b580      	push	{r7, lr}
 800be42:	b088      	sub	sp, #32
 800be44:	af00      	add	r7, sp, #0
 800be46:	60f8      	str	r0, [r7, #12]
 800be48:	460b      	mov	r3, r1
 800be4a:	607a      	str	r2, [r7, #4]
 800be4c:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800be4e:	2300      	movs	r3, #0
 800be50:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 800be52:	2300      	movs	r3, #0
 800be54:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 800be56:	897b      	ldrh	r3, [r7, #10]
 800be58:	2b05      	cmp	r3, #5
 800be5a:	d847      	bhi.n	800beec <VL53L0X_GetLimitCheckValue+0xac>
 800be5c:	a201      	add	r2, pc, #4	; (adr r2, 800be64 <VL53L0X_GetLimitCheckValue+0x24>)
 800be5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be62:	bf00      	nop
 800be64:	0800be7d 	.word	0x0800be7d
 800be68:	0800be89 	.word	0x0800be89
 800be6c:	0800beaf 	.word	0x0800beaf
 800be70:	0800bebb 	.word	0x0800bebb
 800be74:	0800bec7 	.word	0x0800bec7
 800be78:	0800bec7 	.word	0x0800bec7

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be80:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 800be82:	2300      	movs	r3, #0
 800be84:	77bb      	strb	r3, [r7, #30]
		break;
 800be86:	e033      	b.n	800bef0 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 800be88:	f107 0316 	add.w	r3, r7, #22
 800be8c:	461a      	mov	r2, r3
 800be8e:	2144      	movs	r1, #68	; 0x44
 800be90:	68f8      	ldr	r0, [r7, #12]
 800be92:	f004 f895 	bl	800ffc0 <VL53L0X_RdWord>
 800be96:	4603      	mov	r3, r0
 800be98:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 800be9a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d102      	bne.n	800bea8 <VL53L0X_GetLimitCheckValue+0x68>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 800bea2:	8afb      	ldrh	r3, [r7, #22]
 800bea4:	025b      	lsls	r3, r3, #9
 800bea6:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 800bea8:	2301      	movs	r3, #1
 800beaa:	77bb      	strb	r3, [r7, #30]
		break;
 800beac:	e020      	b.n	800bef0 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800beb2:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 800beb4:	2300      	movs	r3, #0
 800beb6:	77bb      	strb	r3, [r7, #30]
		break;
 800beb8:	e01a      	b.n	800bef0 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bebe:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, TempFix1616);
		EnableZeroValue = 0;
 800bec0:	2300      	movs	r3, #0
 800bec2:	77bb      	strb	r3, [r7, #30]
		break;
 800bec4:	e014      	b.n	800bef0 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 800bec6:	f107 0316 	add.w	r3, r7, #22
 800beca:	461a      	mov	r2, r3
 800becc:	2164      	movs	r1, #100	; 0x64
 800bece:	68f8      	ldr	r0, [r7, #12]
 800bed0:	f004 f876 	bl	800ffc0 <VL53L0X_RdWord>
 800bed4:	4603      	mov	r3, r0
 800bed6:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 800bed8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d102      	bne.n	800bee6 <VL53L0X_GetLimitCheckValue+0xa6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 800bee0:	8afb      	ldrh	r3, [r7, #22]
 800bee2:	025b      	lsls	r3, r3, #9
 800bee4:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 800bee6:	2300      	movs	r3, #0
 800bee8:	77bb      	strb	r3, [r7, #30]
		break;
 800beea:	e001      	b.n	800bef0 <VL53L0X_GetLimitCheckValue+0xb0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800beec:	23fc      	movs	r3, #252	; 0xfc
 800beee:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 800bef0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d12a      	bne.n	800bf4e <VL53L0X_GetLimitCheckValue+0x10e>

		if (EnableZeroValue == 1) {
 800bef8:	7fbb      	ldrb	r3, [r7, #30]
 800befa:	2b01      	cmp	r3, #1
 800befc:	d124      	bne.n	800bf48 <VL53L0X_GetLimitCheckValue+0x108>

			if (TempFix1616 == 0) {
 800befe:	69bb      	ldr	r3, [r7, #24]
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d110      	bne.n	800bf26 <VL53L0X_GetLimitCheckValue+0xe6>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 800bf04:	897b      	ldrh	r3, [r7, #10]
 800bf06:	68fa      	ldr	r2, [r7, #12]
 800bf08:	330c      	adds	r3, #12
 800bf0a:	009b      	lsls	r3, r3, #2
 800bf0c:	4413      	add	r3, r2
 800bf0e:	685b      	ldr	r3, [r3, #4]
 800bf10:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	69ba      	ldr	r2, [r7, #24]
 800bf16:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 800bf18:	897b      	ldrh	r3, [r7, #10]
 800bf1a:	68fa      	ldr	r2, [r7, #12]
 800bf1c:	4413      	add	r3, r2
 800bf1e:	2200      	movs	r2, #0
 800bf20:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800bf24:	e013      	b.n	800bf4e <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	69ba      	ldr	r2, [r7, #24]
 800bf2a:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 800bf2c:	897b      	ldrh	r3, [r7, #10]
 800bf2e:	68fa      	ldr	r2, [r7, #12]
 800bf30:	330c      	adds	r3, #12
 800bf32:	009b      	lsls	r3, r3, #2
 800bf34:	4413      	add	r3, r2
 800bf36:	69ba      	ldr	r2, [r7, #24]
 800bf38:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 800bf3a:	897b      	ldrh	r3, [r7, #10]
 800bf3c:	68fa      	ldr	r2, [r7, #12]
 800bf3e:	4413      	add	r3, r2
 800bf40:	2201      	movs	r2, #1
 800bf42:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800bf46:	e002      	b.n	800bf4e <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	69ba      	ldr	r2, [r7, #24]
 800bf4c:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800bf4e:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 800bf52:	4618      	mov	r0, r3
 800bf54:	3720      	adds	r7, #32
 800bf56:	46bd      	mov	sp, r7
 800bf58:	bd80      	pop	{r7, pc}
 800bf5a:	bf00      	nop

0800bf5c <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 800bf5c:	b580      	push	{r7, lr}
 800bf5e:	b084      	sub	sp, #16
 800bf60:	af00      	add	r7, sp, #0
 800bf62:	6078      	str	r0, [r7, #4]
 800bf64:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bf66:	2300      	movs	r3, #0
 800bf68:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 800bf6a:	f107 030e 	add.w	r3, r7, #14
 800bf6e:	461a      	mov	r2, r3
 800bf70:	2101      	movs	r1, #1
 800bf72:	6878      	ldr	r0, [r7, #4]
 800bf74:	f003 fffa 	bl	800ff6c <VL53L0X_RdByte>
 800bf78:	4603      	mov	r3, r0
 800bf7a:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 800bf7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d10e      	bne.n	800bfa2 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		PALDevDataSet(Dev, SequenceConfig, data);
 800bf84:	7bba      	ldrb	r2, [r7, #14]
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		if (data & (0x01 << 7))
 800bf8c:	7bbb      	ldrb	r3, [r7, #14]
 800bf8e:	b25b      	sxtb	r3, r3
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	da03      	bge.n	800bf9c <VL53L0X_GetWrapAroundCheckEnable+0x40>
			*pWrapAroundCheckEnable = 0x01;
 800bf94:	683b      	ldr	r3, [r7, #0]
 800bf96:	2201      	movs	r2, #1
 800bf98:	701a      	strb	r2, [r3, #0]
 800bf9a:	e002      	b.n	800bfa2 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		else
			*pWrapAroundCheckEnable = 0x00;
 800bf9c:	683b      	ldr	r3, [r7, #0]
 800bf9e:	2200      	movs	r2, #0
 800bfa0:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800bfa2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d104      	bne.n	800bfb4 <VL53L0X_GetWrapAroundCheckEnable+0x58>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 800bfaa:	683b      	ldr	r3, [r7, #0]
 800bfac:	781a      	ldrb	r2, [r3, #0]
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800bfb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bfb8:	4618      	mov	r0, r3
 800bfba:	3710      	adds	r7, #16
 800bfbc:	46bd      	mov	sp, r7
 800bfbe:	bd80      	pop	{r7, pc}

0800bfc0 <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 800bfc0:	b580      	push	{r7, lr}
 800bfc2:	b084      	sub	sp, #16
 800bfc4:	af00      	add	r7, sp, #0
 800bfc6:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bfc8:	2300      	movs	r3, #0
 800bfca:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 800bfcc:	f107 030e 	add.w	r3, r7, #14
 800bfd0:	4619      	mov	r1, r3
 800bfd2:	6878      	ldr	r0, [r7, #4]
 800bfd4:	f7ff fbba 	bl	800b74c <VL53L0X_GetDeviceMode>
 800bfd8:	4603      	mov	r3, r0
 800bfda:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 800bfdc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d107      	bne.n	800bff4 <VL53L0X_PerformSingleMeasurement+0x34>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 800bfe4:	7bbb      	ldrb	r3, [r7, #14]
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d104      	bne.n	800bff4 <VL53L0X_PerformSingleMeasurement+0x34>
		Status = VL53L0X_StartMeasurement(Dev);
 800bfea:	6878      	ldr	r0, [r7, #4]
 800bfec:	f000 f898 	bl	800c120 <VL53L0X_StartMeasurement>
 800bff0:	4603      	mov	r3, r0
 800bff2:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 800bff4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d104      	bne.n	800c006 <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 800bffc:	6878      	ldr	r0, [r7, #4]
 800bffe:	f001 fbaa 	bl	800d756 <VL53L0X_measurement_poll_for_completion>
 800c002:	4603      	mov	r3, r0
 800c004:	73fb      	strb	r3, [r7, #15]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 800c006:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d106      	bne.n	800c01c <VL53L0X_PerformSingleMeasurement+0x5c>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 800c00e:	7bbb      	ldrb	r3, [r7, #14]
 800c010:	2b00      	cmp	r3, #0
 800c012:	d103      	bne.n	800c01c <VL53L0X_PerformSingleMeasurement+0x5c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	2203      	movs	r2, #3
 800c018:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132


	LOG_FUNCTION_END(Status);
	return Status;
 800c01c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c020:	4618      	mov	r0, r3
 800c022:	3710      	adds	r7, #16
 800c024:	46bd      	mov	sp, r7
 800c026:	bd80      	pop	{r7, pc}

0800c028 <VL53L0X_PerformRefCalibration>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev, uint8_t *pVhvSettings,
	uint8_t *pPhaseCal)
{
 800c028:	b580      	push	{r7, lr}
 800c02a:	b086      	sub	sp, #24
 800c02c:	af00      	add	r7, sp, #0
 800c02e:	60f8      	str	r0, [r7, #12]
 800c030:	60b9      	str	r1, [r7, #8]
 800c032:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c034:	2300      	movs	r3, #0
 800c036:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 800c038:	2301      	movs	r3, #1
 800c03a:	687a      	ldr	r2, [r7, #4]
 800c03c:	68b9      	ldr	r1, [r7, #8]
 800c03e:	68f8      	ldr	r0, [r7, #12]
 800c040:	f001 fb29 	bl	800d696 <VL53L0X_perform_ref_calibration>
 800c044:	4603      	mov	r3, r0
 800c046:	75fb      	strb	r3, [r7, #23]
		pPhaseCal, 1);

	LOG_FUNCTION_END(Status);
	return Status;
 800c048:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c04c:	4618      	mov	r0, r3
 800c04e:	3718      	adds	r7, #24
 800c050:	46bd      	mov	sp, r7
 800c052:	bd80      	pop	{r7, pc}

0800c054 <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 800c054:	b580      	push	{r7, lr}
 800c056:	b086      	sub	sp, #24
 800c058:	af00      	add	r7, sp, #0
 800c05a:	6078      	str	r0, [r7, #4]
 800c05c:	460b      	mov	r3, r1
 800c05e:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c060:	2300      	movs	r3, #0
 800c062:	75fb      	strb	r3, [r7, #23]

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 800c06a:	75bb      	strb	r3, [r7, #22]
		Pin0GpioFunctionality);

	if ((InterruptConfig ==
 800c06c:	7dbb      	ldrb	r3, [r7, #22]
 800c06e:	2b01      	cmp	r3, #1
 800c070:	d005      	beq.n	800c07e <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW) ||
 800c072:	7dbb      	ldrb	r3, [r7, #22]
 800c074:	2b02      	cmp	r3, #2
 800c076:	d002      	beq.n	800c07e <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 800c078:	7dbb      	ldrb	r3, [r7, #22]
 800c07a:	2b03      	cmp	r3, #3
 800c07c:	d147      	bne.n	800c10e <VL53L0X_CheckAndLoadInterruptSettings+0xba>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT)) {

		Status = VL53L0X_GetInterruptThresholds(Dev,
 800c07e:	f107 030c 	add.w	r3, r7, #12
 800c082:	f107 0210 	add.w	r2, r7, #16
 800c086:	2101      	movs	r1, #1
 800c088:	6878      	ldr	r0, [r7, #4]
 800c08a:	f000 fbc3 	bl	800c814 <VL53L0X_GetInterruptThresholds>
 800c08e:	4603      	mov	r3, r0
 800c090:	75fb      	strb	r3, [r7, #23]
			VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
			&ThresholdLow, &ThresholdHigh);

		if (((ThresholdLow > 255*65536) ||
 800c092:	693b      	ldr	r3, [r7, #16]
 800c094:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 800c098:	d803      	bhi.n	800c0a2 <VL53L0X_CheckAndLoadInterruptSettings+0x4e>
			(ThresholdHigh > 255*65536)) &&
 800c09a:	68fb      	ldr	r3, [r7, #12]
		if (((ThresholdLow > 255*65536) ||
 800c09c:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 800c0a0:	d935      	bls.n	800c10e <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(ThresholdHigh > 255*65536)) &&
 800c0a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d131      	bne.n	800c10e <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 800c0aa:	78fb      	ldrb	r3, [r7, #3]
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d006      	beq.n	800c0be <VL53L0X_CheckAndLoadInterruptSettings+0x6a>
				Status = VL53L0X_load_tuning_settings(Dev,
 800c0b0:	491a      	ldr	r1, [pc, #104]	; (800c11c <VL53L0X_CheckAndLoadInterruptSettings+0xc8>)
 800c0b2:	6878      	ldr	r0, [r7, #4]
 800c0b4:	f002 ffc2 	bl	800f03c <VL53L0X_load_tuning_settings>
 800c0b8:	4603      	mov	r3, r0
 800c0ba:	75fb      	strb	r3, [r7, #23]
 800c0bc:	e027      	b.n	800c10e <VL53L0X_CheckAndLoadInterruptSettings+0xba>
					InterruptThresholdSettings);
			} else {
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 800c0be:	2204      	movs	r2, #4
 800c0c0:	21ff      	movs	r1, #255	; 0xff
 800c0c2:	6878      	ldr	r0, [r7, #4]
 800c0c4:	f003 fed0 	bl	800fe68 <VL53L0X_WrByte>
 800c0c8:	4603      	mov	r3, r0
 800c0ca:	461a      	mov	r2, r3
 800c0cc:	7dfb      	ldrb	r3, [r7, #23]
 800c0ce:	4313      	orrs	r3, r2
 800c0d0:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 800c0d2:	2200      	movs	r2, #0
 800c0d4:	2170      	movs	r1, #112	; 0x70
 800c0d6:	6878      	ldr	r0, [r7, #4]
 800c0d8:	f003 fec6 	bl	800fe68 <VL53L0X_WrByte>
 800c0dc:	4603      	mov	r3, r0
 800c0de:	461a      	mov	r2, r3
 800c0e0:	7dfb      	ldrb	r3, [r7, #23]
 800c0e2:	4313      	orrs	r3, r2
 800c0e4:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800c0e6:	2200      	movs	r2, #0
 800c0e8:	21ff      	movs	r1, #255	; 0xff
 800c0ea:	6878      	ldr	r0, [r7, #4]
 800c0ec:	f003 febc 	bl	800fe68 <VL53L0X_WrByte>
 800c0f0:	4603      	mov	r3, r0
 800c0f2:	461a      	mov	r2, r3
 800c0f4:	7dfb      	ldrb	r3, [r7, #23]
 800c0f6:	4313      	orrs	r3, r2
 800c0f8:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800c0fa:	2200      	movs	r2, #0
 800c0fc:	2180      	movs	r1, #128	; 0x80
 800c0fe:	6878      	ldr	r0, [r7, #4]
 800c100:	f003 feb2 	bl	800fe68 <VL53L0X_WrByte>
 800c104:	4603      	mov	r3, r0
 800c106:	461a      	mov	r2, r3
 800c108:	7dfb      	ldrb	r3, [r7, #23]
 800c10a:	4313      	orrs	r3, r2
 800c10c:	75fb      	strb	r3, [r7, #23]
		}


	}

	return Status;
 800c10e:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 800c112:	4618      	mov	r0, r3
 800c114:	3718      	adds	r7, #24
 800c116:	46bd      	mov	sp, r7
 800c118:	bd80      	pop	{r7, pc}
 800c11a:	bf00      	nop
 800c11c:	200001c4 	.word	0x200001c4

0800c120 <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 800c120:	b580      	push	{r7, lr}
 800c122:	b086      	sub	sp, #24
 800c124:	af00      	add	r7, sp, #0
 800c126:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c128:	2300      	movs	r3, #0
 800c12a:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 800c12c:	2301      	movs	r3, #1
 800c12e:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 800c130:	f107 030e 	add.w	r3, r7, #14
 800c134:	4619      	mov	r1, r3
 800c136:	6878      	ldr	r0, [r7, #4]
 800c138:	f7ff fb08 	bl	800b74c <VL53L0X_GetDeviceMode>

	Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 800c13c:	2201      	movs	r2, #1
 800c13e:	2180      	movs	r1, #128	; 0x80
 800c140:	6878      	ldr	r0, [r7, #4]
 800c142:	f003 fe91 	bl	800fe68 <VL53L0X_WrByte>
 800c146:	4603      	mov	r3, r0
 800c148:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800c14a:	2201      	movs	r2, #1
 800c14c:	21ff      	movs	r1, #255	; 0xff
 800c14e:	6878      	ldr	r0, [r7, #4]
 800c150:	f003 fe8a 	bl	800fe68 <VL53L0X_WrByte>
 800c154:	4603      	mov	r3, r0
 800c156:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 800c158:	2200      	movs	r2, #0
 800c15a:	2100      	movs	r1, #0
 800c15c:	6878      	ldr	r0, [r7, #4]
 800c15e:	f003 fe83 	bl	800fe68 <VL53L0X_WrByte>
 800c162:	4603      	mov	r3, r0
 800c164:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x91, PALDevDataGet(Dev, StopVariable));
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 800c16c:	461a      	mov	r2, r3
 800c16e:	2191      	movs	r1, #145	; 0x91
 800c170:	6878      	ldr	r0, [r7, #4]
 800c172:	f003 fe79 	bl	800fe68 <VL53L0X_WrByte>
 800c176:	4603      	mov	r3, r0
 800c178:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 800c17a:	2201      	movs	r2, #1
 800c17c:	2100      	movs	r1, #0
 800c17e:	6878      	ldr	r0, [r7, #4]
 800c180:	f003 fe72 	bl	800fe68 <VL53L0X_WrByte>
 800c184:	4603      	mov	r3, r0
 800c186:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800c188:	2200      	movs	r2, #0
 800c18a:	21ff      	movs	r1, #255	; 0xff
 800c18c:	6878      	ldr	r0, [r7, #4]
 800c18e:	f003 fe6b 	bl	800fe68 <VL53L0X_WrByte>
 800c192:	4603      	mov	r3, r0
 800c194:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 800c196:	2200      	movs	r2, #0
 800c198:	2180      	movs	r1, #128	; 0x80
 800c19a:	6878      	ldr	r0, [r7, #4]
 800c19c:	f003 fe64 	bl	800fe68 <VL53L0X_WrByte>
 800c1a0:	4603      	mov	r3, r0
 800c1a2:	75fb      	strb	r3, [r7, #23]

	switch (DeviceMode) {
 800c1a4:	7bbb      	ldrb	r3, [r7, #14]
 800c1a6:	2b03      	cmp	r3, #3
 800c1a8:	d054      	beq.n	800c254 <VL53L0X_StartMeasurement+0x134>
 800c1aa:	2b03      	cmp	r3, #3
 800c1ac:	dc6c      	bgt.n	800c288 <VL53L0X_StartMeasurement+0x168>
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d002      	beq.n	800c1b8 <VL53L0X_StartMeasurement+0x98>
 800c1b2:	2b01      	cmp	r3, #1
 800c1b4:	d034      	beq.n	800c220 <VL53L0X_StartMeasurement+0x100>
 800c1b6:	e067      	b.n	800c288 <VL53L0X_StartMeasurement+0x168>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 800c1b8:	2201      	movs	r2, #1
 800c1ba:	2100      	movs	r1, #0
 800c1bc:	6878      	ldr	r0, [r7, #4]
 800c1be:	f003 fe53 	bl	800fe68 <VL53L0X_WrByte>
 800c1c2:	4603      	mov	r3, r0
 800c1c4:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 800c1c6:	7bfb      	ldrb	r3, [r7, #15]
 800c1c8:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 800c1ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d15d      	bne.n	800c28e <VL53L0X_StartMeasurement+0x16e>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 800c1d2:	2300      	movs	r3, #0
 800c1d4:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 800c1d6:	693b      	ldr	r3, [r7, #16]
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d008      	beq.n	800c1ee <VL53L0X_StartMeasurement+0xce>
					Status = VL53L0X_RdByte(Dev,
 800c1dc:	f107 030d 	add.w	r3, r7, #13
 800c1e0:	461a      	mov	r2, r3
 800c1e2:	2100      	movs	r1, #0
 800c1e4:	6878      	ldr	r0, [r7, #4]
 800c1e6:	f003 fec1 	bl	800ff6c <VL53L0X_RdByte>
 800c1ea:	4603      	mov	r3, r0
 800c1ec:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 800c1ee:	693b      	ldr	r3, [r7, #16]
 800c1f0:	3301      	adds	r3, #1
 800c1f2:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 800c1f4:	7b7a      	ldrb	r2, [r7, #13]
 800c1f6:	7bfb      	ldrb	r3, [r7, #15]
 800c1f8:	4013      	ands	r3, r2
 800c1fa:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 800c1fc:	7bfa      	ldrb	r2, [r7, #15]
 800c1fe:	429a      	cmp	r2, r3
 800c200:	d107      	bne.n	800c212 <VL53L0X_StartMeasurement+0xf2>
				&& (Status == VL53L0X_ERROR_NONE)
 800c202:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c206:	2b00      	cmp	r3, #0
 800c208:	d103      	bne.n	800c212 <VL53L0X_StartMeasurement+0xf2>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 800c20a:	693b      	ldr	r3, [r7, #16]
 800c20c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800c210:	d3e1      	bcc.n	800c1d6 <VL53L0X_StartMeasurement+0xb6>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 800c212:	693b      	ldr	r3, [r7, #16]
 800c214:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800c218:	d339      	bcc.n	800c28e <VL53L0X_StartMeasurement+0x16e>
				Status = VL53L0X_ERROR_TIME_OUT;
 800c21a:	23f9      	movs	r3, #249	; 0xf9
 800c21c:	75fb      	strb	r3, [r7, #23]

		}

		break;
 800c21e:	e036      	b.n	800c28e <VL53L0X_StartMeasurement+0x16e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 800c220:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c224:	2b00      	cmp	r3, #0
 800c226:	d105      	bne.n	800c234 <VL53L0X_StartMeasurement+0x114>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 800c228:	2101      	movs	r1, #1
 800c22a:	6878      	ldr	r0, [r7, #4]
 800c22c:	f7ff ff12 	bl	800c054 <VL53L0X_CheckAndLoadInterruptSettings>
 800c230:	4603      	mov	r3, r0
 800c232:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 800c234:	2202      	movs	r2, #2
 800c236:	2100      	movs	r1, #0
 800c238:	6878      	ldr	r0, [r7, #4]
 800c23a:	f003 fe15 	bl	800fe68 <VL53L0X_WrByte>
 800c23e:	4603      	mov	r3, r0
 800c240:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 800c242:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c246:	2b00      	cmp	r3, #0
 800c248:	d123      	bne.n	800c292 <VL53L0X_StartMeasurement+0x172>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	2204      	movs	r2, #4
 800c24e:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 800c252:	e01e      	b.n	800c292 <VL53L0X_StartMeasurement+0x172>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 800c254:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d105      	bne.n	800c268 <VL53L0X_StartMeasurement+0x148>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 800c25c:	2101      	movs	r1, #1
 800c25e:	6878      	ldr	r0, [r7, #4]
 800c260:	f7ff fef8 	bl	800c054 <VL53L0X_CheckAndLoadInterruptSettings>
 800c264:	4603      	mov	r3, r0
 800c266:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 800c268:	2204      	movs	r2, #4
 800c26a:	2100      	movs	r1, #0
 800c26c:	6878      	ldr	r0, [r7, #4]
 800c26e:	f003 fdfb 	bl	800fe68 <VL53L0X_WrByte>
 800c272:	4603      	mov	r3, r0
 800c274:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 800c276:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d10b      	bne.n	800c296 <VL53L0X_StartMeasurement+0x176>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	2204      	movs	r2, #4
 800c282:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 800c286:	e006      	b.n	800c296 <VL53L0X_StartMeasurement+0x176>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 800c288:	23f8      	movs	r3, #248	; 0xf8
 800c28a:	75fb      	strb	r3, [r7, #23]
 800c28c:	e004      	b.n	800c298 <VL53L0X_StartMeasurement+0x178>
		break;
 800c28e:	bf00      	nop
 800c290:	e002      	b.n	800c298 <VL53L0X_StartMeasurement+0x178>
		break;
 800c292:	bf00      	nop
 800c294:	e000      	b.n	800c298 <VL53L0X_StartMeasurement+0x178>
		break;
 800c296:	bf00      	nop
	}


	LOG_FUNCTION_END(Status);
	return Status;
 800c298:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c29c:	4618      	mov	r0, r3
 800c29e:	3718      	adds	r7, #24
 800c2a0:	46bd      	mov	sp, r7
 800c2a2:	bd80      	pop	{r7, pc}

0800c2a4 <VL53L0X_GetMeasurementDataReady>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 800c2a4:	b580      	push	{r7, lr}
 800c2a6:	b084      	sub	sp, #16
 800c2a8:	af00      	add	r7, sp, #0
 800c2aa:	6078      	str	r0, [r7, #4]
 800c2ac:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c2ae:	2300      	movs	r3, #0
 800c2b0:	73fb      	strb	r3, [r7, #15]
	uint8_t SysRangeStatusRegister;
	uint8_t InterruptConfig;
	uint32_t InterruptMask;
	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 800c2b8:	73bb      	strb	r3, [r7, #14]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 800c2ba:	7bbb      	ldrb	r3, [r7, #14]
 800c2bc:	2b04      	cmp	r3, #4
 800c2be:	d112      	bne.n	800c2e6 <VL53L0X_GetMeasurementDataReady+0x42>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 800c2c0:	f107 0308 	add.w	r3, r7, #8
 800c2c4:	4619      	mov	r1, r3
 800c2c6:	6878      	ldr	r0, [r7, #4]
 800c2c8:	f000 fb1a 	bl	800c900 <VL53L0X_GetInterruptMaskStatus>
 800c2cc:	4603      	mov	r3, r0
 800c2ce:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 800c2d0:	68bb      	ldr	r3, [r7, #8]
 800c2d2:	2b04      	cmp	r3, #4
 800c2d4:	d103      	bne.n	800c2de <VL53L0X_GetMeasurementDataReady+0x3a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 800c2d6:	683b      	ldr	r3, [r7, #0]
 800c2d8:	2201      	movs	r2, #1
 800c2da:	701a      	strb	r2, [r3, #0]
 800c2dc:	e01c      	b.n	800c318 <VL53L0X_GetMeasurementDataReady+0x74>
		else
			*pMeasurementDataReady = 0;
 800c2de:	683b      	ldr	r3, [r7, #0]
 800c2e0:	2200      	movs	r2, #0
 800c2e2:	701a      	strb	r2, [r3, #0]
 800c2e4:	e018      	b.n	800c318 <VL53L0X_GetMeasurementDataReady+0x74>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 800c2e6:	f107 030d 	add.w	r3, r7, #13
 800c2ea:	461a      	mov	r2, r3
 800c2ec:	2114      	movs	r1, #20
 800c2ee:	6878      	ldr	r0, [r7, #4]
 800c2f0:	f003 fe3c 	bl	800ff6c <VL53L0X_RdByte>
 800c2f4:	4603      	mov	r3, r0
 800c2f6:	73fb      	strb	r3, [r7, #15]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 800c2f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d10b      	bne.n	800c318 <VL53L0X_GetMeasurementDataReady+0x74>
			if (SysRangeStatusRegister & 0x01)
 800c300:	7b7b      	ldrb	r3, [r7, #13]
 800c302:	f003 0301 	and.w	r3, r3, #1
 800c306:	2b00      	cmp	r3, #0
 800c308:	d003      	beq.n	800c312 <VL53L0X_GetMeasurementDataReady+0x6e>
				*pMeasurementDataReady = 1;
 800c30a:	683b      	ldr	r3, [r7, #0]
 800c30c:	2201      	movs	r2, #1
 800c30e:	701a      	strb	r2, [r3, #0]
 800c310:	e002      	b.n	800c318 <VL53L0X_GetMeasurementDataReady+0x74>
			else
				*pMeasurementDataReady = 0;
 800c312:	683b      	ldr	r3, [r7, #0]
 800c314:	2200      	movs	r2, #0
 800c316:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800c318:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c31c:	4618      	mov	r0, r3
 800c31e:	3710      	adds	r7, #16
 800c320:	46bd      	mov	sp, r7
 800c322:	bd80      	pop	{r7, pc}

0800c324 <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 800c324:	b5b0      	push	{r4, r5, r7, lr}
 800c326:	b096      	sub	sp, #88	; 0x58
 800c328:	af02      	add	r7, sp, #8
 800c32a:	6078      	str	r0, [r7, #4]
 800c32c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c32e:	2300      	movs	r3, #0
 800c330:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 800c334:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800c338:	230c      	movs	r3, #12
 800c33a:	2114      	movs	r1, #20
 800c33c:	6878      	ldr	r0, [r7, #4]
 800c33e:	f003 fd67 	bl	800fe10 <VL53L0X_ReadMulti>
 800c342:	4603      	mov	r3, r0
 800c344:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 800c348:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	f040 80d1 	bne.w	800c4f4 <VL53L0X_GetRangingMeasurementData+0x1d0>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 800c352:	683b      	ldr	r3, [r7, #0]
 800c354:	2200      	movs	r2, #0
 800c356:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 800c358:	683b      	ldr	r3, [r7, #0]
 800c35a:	2200      	movs	r2, #0
 800c35c:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 800c35e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800c362:	b29b      	uxth	r3, r3
 800c364:	021b      	lsls	r3, r3, #8
 800c366:	b29a      	uxth	r2, r3
 800c368:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c36c:	b29b      	uxth	r3, r3
 800c36e:	4413      	add	r3, r2
 800c370:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 800c374:	683b      	ldr	r3, [r7, #0]
 800c376:	2200      	movs	r2, #0
 800c378:	605a      	str	r2, [r3, #4]

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 800c37a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800c37e:	b29b      	uxth	r3, r3
 800c380:	021b      	lsls	r3, r3, #8
 800c382:	b29a      	uxth	r2, r3
 800c384:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c388:	b29b      	uxth	r3, r3
 800c38a:	4413      	add	r3, r2
 800c38c:	b29b      	uxth	r3, r3
 800c38e:	025b      	lsls	r3, r3, #9
 800c390:	647b      	str	r3, [r7, #68]	; 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 800c392:	683b      	ldr	r3, [r7, #0]
 800c394:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c396:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 800c398:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800c39c:	b29b      	uxth	r3, r3
 800c39e:	021b      	lsls	r3, r3, #8
 800c3a0:	b29a      	uxth	r2, r3
 800c3a2:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800c3a6:	b29b      	uxth	r3, r3
 800c3a8:	4413      	add	r3, r2
 800c3aa:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 800c3ae:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800c3b2:	025b      	lsls	r3, r3, #9
 800c3b4:	461a      	mov	r2, r3
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 800c3b6:	683b      	ldr	r3, [r7, #0]
 800c3b8:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 800c3ba:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800c3be:	b29b      	uxth	r3, r3
 800c3c0:	021b      	lsls	r3, r3, #8
 800c3c2:	b29a      	uxth	r2, r3
 800c3c4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c3c8:	b29b      	uxth	r3, r3
 800c3ca:	4413      	add	r3, r2
 800c3cc:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 800c3d0:	683b      	ldr	r3, [r7, #0]
 800c3d2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800c3d6:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 800c3d8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c3dc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	f8b3 3152 	ldrh.w	r3, [r3, #338]	; 0x152
 800c3e6:	87bb      	strh	r3, [r7, #60]	; 0x3c
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 800c3ee:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 800c3f2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800c3f4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c3f8:	d046      	beq.n	800c488 <VL53L0X_GetRangingMeasurementData+0x164>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 800c3fa:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800c3fc:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 800c400:	fb02 f303 	mul.w	r3, r2, r3
 800c404:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800c408:	4a57      	ldr	r2, [pc, #348]	; (800c568 <VL53L0X_GetRangingMeasurementData+0x244>)
 800c40a:	fb82 1203 	smull	r1, r2, r2, r3
 800c40e:	1192      	asrs	r2, r2, #6
 800c410:	17db      	asrs	r3, r3, #31
 800c412:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 800c414:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	6a1b      	ldr	r3, [r3, #32]
 800c41c:	873b      	strh	r3, [r7, #56]	; 0x38
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	7f1b      	ldrb	r3, [r3, #28]
 800c422:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 800c426:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d02c      	beq.n	800c488 <VL53L0X_GetRangingMeasurementData+0x164>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 800c42e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800c430:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800c434:	fb02 f303 	mul.w	r3, r2, r3
 800c438:	121a      	asrs	r2, r3, #8
					<= 0) {
 800c43a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
				if ((SignalRate
 800c43c:	429a      	cmp	r2, r3
 800c43e:	d10d      	bne.n	800c45c <VL53L0X_GetRangingMeasurementData+0x138>
					if (RangeFractionalEnable)
 800c440:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800c444:	2b00      	cmp	r3, #0
 800c446:	d004      	beq.n	800c452 <VL53L0X_GetRangingMeasurementData+0x12e>
						XtalkRangeMilliMeter = 8888;
 800c448:	f242 23b8 	movw	r3, #8888	; 0x22b8
 800c44c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800c450:	e016      	b.n	800c480 <VL53L0X_GetRangingMeasurementData+0x15c>
					else
						XtalkRangeMilliMeter = 8888
 800c452:	f648 23e0 	movw	r3, #35552	; 0x8ae0
 800c456:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800c45a:	e011      	b.n	800c480 <VL53L0X_GetRangingMeasurementData+0x15c>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 800c45c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800c460:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c462:	fb03 f202 	mul.w	r2, r3, r2
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 800c466:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800c468:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 800c46c:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 800c470:	121b      	asrs	r3, r3, #8
 800c472:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 800c474:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c476:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 800c478:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 800c47c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 800c480:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800c484:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			}

		}

		if (RangeFractionalEnable) {
 800c488:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d00d      	beq.n	800c4ac <VL53L0X_GetRangingMeasurementData+0x188>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 800c490:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800c494:	089b      	lsrs	r3, r3, #2
 800c496:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 800c498:	683b      	ldr	r3, [r7, #0]
 800c49a:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 800c49c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800c4a0:	b2db      	uxtb	r3, r3
 800c4a2:	019b      	lsls	r3, r3, #6
 800c4a4:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 800c4a6:	683b      	ldr	r3, [r7, #0]
 800c4a8:	75da      	strb	r2, [r3, #23]
 800c4aa:	e006      	b.n	800c4ba <VL53L0X_GetRangingMeasurementData+0x196>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 800c4ac:	683b      	ldr	r3, [r7, #0]
 800c4ae:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 800c4b2:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 800c4b4:	683b      	ldr	r3, [r7, #0]
 800c4b6:	2200      	movs	r2, #0
 800c4b8:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 800c4ba:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800c4be:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 800c4c2:	f107 0336 	add.w	r3, r7, #54	; 0x36
 800c4c6:	9301      	str	r3, [sp, #4]
 800c4c8:	683b      	ldr	r3, [r7, #0]
 800c4ca:	9300      	str	r3, [sp, #0]
 800c4cc:	4613      	mov	r3, r2
 800c4ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c4d0:	6878      	ldr	r0, [r7, #4]
 800c4d2:	f003 fa51 	bl	800f978 <VL53L0X_get_pal_range_status>
 800c4d6:	4603      	mov	r3, r0
 800c4d8:	461a      	mov	r2, r3
 800c4da:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c4de:	4313      	orrs	r3, r2
 800c4e0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 800c4e4:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d103      	bne.n	800c4f4 <VL53L0X_GetRangingMeasurementData+0x1d0>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 800c4ec:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800c4f0:	683b      	ldr	r3, [r7, #0]
 800c4f2:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 800c4f4:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d12f      	bne.n	800c55c <VL53L0X_GetRangingMeasurementData+0x238>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	f107 040c 	add.w	r4, r7, #12
 800c502:	f103 0550 	add.w	r5, r3, #80	; 0x50
 800c506:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c508:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c50a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800c50e:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 800c512:	683b      	ldr	r3, [r7, #0]
 800c514:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 800c516:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 800c518:	683b      	ldr	r3, [r7, #0]
 800c51a:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 800c51c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 800c520:	683b      	ldr	r3, [r7, #0]
 800c522:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 800c524:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 800c526:	683b      	ldr	r3, [r7, #0]
 800c528:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 800c52a:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 800c52c:	683b      	ldr	r3, [r7, #0]
 800c52e:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 800c530:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 800c532:	683b      	ldr	r3, [r7, #0]
 800c534:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 800c536:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 800c538:	683b      	ldr	r3, [r7, #0]
 800c53a:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 800c53c:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 800c53e:	683b      	ldr	r3, [r7, #0]
 800c540:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 800c542:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	f103 0450 	add.w	r4, r3, #80	; 0x50
 800c54c:	f107 050c 	add.w	r5, r7, #12
 800c550:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c552:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c554:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800c558:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800c55c:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 800c560:	4618      	mov	r0, r3
 800c562:	3750      	adds	r7, #80	; 0x50
 800c564:	46bd      	mov	sp, r7
 800c566:	bdb0      	pop	{r4, r5, r7, pc}
 800c568:	10624dd3 	.word	0x10624dd3

0800c56c <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 800c56c:	b580      	push	{r7, lr}
 800c56e:	b084      	sub	sp, #16
 800c570:	af00      	add	r7, sp, #0
 800c572:	6078      	str	r0, [r7, #4]
 800c574:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c576:	2300      	movs	r3, #0
 800c578:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* This function will do a complete single ranging
	 * Here we fix the mode! */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 800c57a:	2100      	movs	r1, #0
 800c57c:	6878      	ldr	r0, [r7, #4]
 800c57e:	f7ff f8b9 	bl	800b6f4 <VL53L0X_SetDeviceMode>
 800c582:	4603      	mov	r3, r0
 800c584:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800c586:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d104      	bne.n	800c598 <VL53L0X_PerformSingleRangingMeasurement+0x2c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 800c58e:	6878      	ldr	r0, [r7, #4]
 800c590:	f7ff fd16 	bl	800bfc0 <VL53L0X_PerformSingleMeasurement>
 800c594:	4603      	mov	r3, r0
 800c596:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 800c598:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d105      	bne.n	800c5ac <VL53L0X_PerformSingleRangingMeasurement+0x40>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 800c5a0:	6839      	ldr	r1, [r7, #0]
 800c5a2:	6878      	ldr	r0, [r7, #4]
 800c5a4:	f7ff febe 	bl	800c324 <VL53L0X_GetRangingMeasurementData>
 800c5a8:	4603      	mov	r3, r0
 800c5aa:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 800c5ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d105      	bne.n	800c5c0 <VL53L0X_PerformSingleRangingMeasurement+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800c5b4:	2100      	movs	r1, #0
 800c5b6:	6878      	ldr	r0, [r7, #4]
 800c5b8:	f000 f962 	bl	800c880 <VL53L0X_ClearInterruptMask>
 800c5bc:	4603      	mov	r3, r0
 800c5be:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(Status);
	return Status;
 800c5c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c5c4:	4618      	mov	r0, r3
 800c5c6:	3710      	adds	r7, #16
 800c5c8:	46bd      	mov	sp, r7
 800c5ca:	bd80      	pop	{r7, pc}

0800c5cc <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
	VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
	VL53L0X_InterruptPolarity Polarity)
{
 800c5cc:	b580      	push	{r7, lr}
 800c5ce:	b084      	sub	sp, #16
 800c5d0:	af00      	add	r7, sp, #0
 800c5d2:	6078      	str	r0, [r7, #4]
 800c5d4:	4608      	mov	r0, r1
 800c5d6:	4611      	mov	r1, r2
 800c5d8:	461a      	mov	r2, r3
 800c5da:	4603      	mov	r3, r0
 800c5dc:	70fb      	strb	r3, [r7, #3]
 800c5de:	460b      	mov	r3, r1
 800c5e0:	70bb      	strb	r3, [r7, #2]
 800c5e2:	4613      	mov	r3, r2
 800c5e4:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c5e6:	2300      	movs	r3, #0
 800c5e8:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	if (Pin != 0) {
 800c5ea:	78fb      	ldrb	r3, [r7, #3]
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d002      	beq.n	800c5f6 <VL53L0X_SetGpioConfig+0x2a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 800c5f0:	23f6      	movs	r3, #246	; 0xf6
 800c5f2:	73fb      	strb	r3, [r7, #15]
 800c5f4:	e107      	b.n	800c806 <VL53L0X_SetGpioConfig+0x23a>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 800c5f6:	78bb      	ldrb	r3, [r7, #2]
 800c5f8:	2b14      	cmp	r3, #20
 800c5fa:	d110      	bne.n	800c61e <VL53L0X_SetGpioConfig+0x52>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 800c5fc:	7e3b      	ldrb	r3, [r7, #24]
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d102      	bne.n	800c608 <VL53L0X_SetGpioConfig+0x3c>
			data = 0x10;
 800c602:	2310      	movs	r3, #16
 800c604:	73bb      	strb	r3, [r7, #14]
 800c606:	e001      	b.n	800c60c <VL53L0X_SetGpioConfig+0x40>
		else
			data = 1;
 800c608:	2301      	movs	r3, #1
 800c60a:	73bb      	strb	r3, [r7, #14]

		Status = VL53L0X_WrByte(Dev,
 800c60c:	7bbb      	ldrb	r3, [r7, #14]
 800c60e:	461a      	mov	r2, r3
 800c610:	2184      	movs	r1, #132	; 0x84
 800c612:	6878      	ldr	r0, [r7, #4]
 800c614:	f003 fc28 	bl	800fe68 <VL53L0X_WrByte>
 800c618:	4603      	mov	r3, r0
 800c61a:	73fb      	strb	r3, [r7, #15]
 800c61c:	e0f3      	b.n	800c806 <VL53L0X_SetGpioConfig+0x23a>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 800c61e:	78bb      	ldrb	r3, [r7, #2]
 800c620:	2b15      	cmp	r3, #21
 800c622:	f040 8097 	bne.w	800c754 <VL53L0X_SetGpioConfig+0x188>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800c626:	2201      	movs	r2, #1
 800c628:	21ff      	movs	r1, #255	; 0xff
 800c62a:	6878      	ldr	r0, [r7, #4]
 800c62c:	f003 fc1c 	bl	800fe68 <VL53L0X_WrByte>
 800c630:	4603      	mov	r3, r0
 800c632:	461a      	mov	r2, r3
 800c634:	7bfb      	ldrb	r3, [r7, #15]
 800c636:	4313      	orrs	r3, r2
 800c638:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800c63a:	2200      	movs	r2, #0
 800c63c:	2100      	movs	r1, #0
 800c63e:	6878      	ldr	r0, [r7, #4]
 800c640:	f003 fc12 	bl	800fe68 <VL53L0X_WrByte>
 800c644:	4603      	mov	r3, r0
 800c646:	461a      	mov	r2, r3
 800c648:	7bfb      	ldrb	r3, [r7, #15]
 800c64a:	4313      	orrs	r3, r2
 800c64c:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800c64e:	2200      	movs	r2, #0
 800c650:	21ff      	movs	r1, #255	; 0xff
 800c652:	6878      	ldr	r0, [r7, #4]
 800c654:	f003 fc08 	bl	800fe68 <VL53L0X_WrByte>
 800c658:	4603      	mov	r3, r0
 800c65a:	461a      	mov	r2, r3
 800c65c:	7bfb      	ldrb	r3, [r7, #15]
 800c65e:	4313      	orrs	r3, r2
 800c660:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800c662:	2201      	movs	r2, #1
 800c664:	2180      	movs	r1, #128	; 0x80
 800c666:	6878      	ldr	r0, [r7, #4]
 800c668:	f003 fbfe 	bl	800fe68 <VL53L0X_WrByte>
 800c66c:	4603      	mov	r3, r0
 800c66e:	461a      	mov	r2, r3
 800c670:	7bfb      	ldrb	r3, [r7, #15]
 800c672:	4313      	orrs	r3, r2
 800c674:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 800c676:	2202      	movs	r2, #2
 800c678:	2185      	movs	r1, #133	; 0x85
 800c67a:	6878      	ldr	r0, [r7, #4]
 800c67c:	f003 fbf4 	bl	800fe68 <VL53L0X_WrByte>
 800c680:	4603      	mov	r3, r0
 800c682:	461a      	mov	r2, r3
 800c684:	7bfb      	ldrb	r3, [r7, #15]
 800c686:	4313      	orrs	r3, r2
 800c688:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 800c68a:	2204      	movs	r2, #4
 800c68c:	21ff      	movs	r1, #255	; 0xff
 800c68e:	6878      	ldr	r0, [r7, #4]
 800c690:	f003 fbea 	bl	800fe68 <VL53L0X_WrByte>
 800c694:	4603      	mov	r3, r0
 800c696:	461a      	mov	r2, r3
 800c698:	7bfb      	ldrb	r3, [r7, #15]
 800c69a:	4313      	orrs	r3, r2
 800c69c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 800c69e:	2200      	movs	r2, #0
 800c6a0:	21cd      	movs	r1, #205	; 0xcd
 800c6a2:	6878      	ldr	r0, [r7, #4]
 800c6a4:	f003 fbe0 	bl	800fe68 <VL53L0X_WrByte>
 800c6a8:	4603      	mov	r3, r0
 800c6aa:	461a      	mov	r2, r3
 800c6ac:	7bfb      	ldrb	r3, [r7, #15]
 800c6ae:	4313      	orrs	r3, r2
 800c6b0:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 800c6b2:	2211      	movs	r2, #17
 800c6b4:	21cc      	movs	r1, #204	; 0xcc
 800c6b6:	6878      	ldr	r0, [r7, #4]
 800c6b8:	f003 fbd6 	bl	800fe68 <VL53L0X_WrByte>
 800c6bc:	4603      	mov	r3, r0
 800c6be:	461a      	mov	r2, r3
 800c6c0:	7bfb      	ldrb	r3, [r7, #15]
 800c6c2:	4313      	orrs	r3, r2
 800c6c4:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 800c6c6:	2207      	movs	r2, #7
 800c6c8:	21ff      	movs	r1, #255	; 0xff
 800c6ca:	6878      	ldr	r0, [r7, #4]
 800c6cc:	f003 fbcc 	bl	800fe68 <VL53L0X_WrByte>
 800c6d0:	4603      	mov	r3, r0
 800c6d2:	461a      	mov	r2, r3
 800c6d4:	7bfb      	ldrb	r3, [r7, #15]
 800c6d6:	4313      	orrs	r3, r2
 800c6d8:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 800c6da:	2200      	movs	r2, #0
 800c6dc:	21be      	movs	r1, #190	; 0xbe
 800c6de:	6878      	ldr	r0, [r7, #4]
 800c6e0:	f003 fbc2 	bl	800fe68 <VL53L0X_WrByte>
 800c6e4:	4603      	mov	r3, r0
 800c6e6:	461a      	mov	r2, r3
 800c6e8:	7bfb      	ldrb	r3, [r7, #15]
 800c6ea:	4313      	orrs	r3, r2
 800c6ec:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 800c6ee:	2206      	movs	r2, #6
 800c6f0:	21ff      	movs	r1, #255	; 0xff
 800c6f2:	6878      	ldr	r0, [r7, #4]
 800c6f4:	f003 fbb8 	bl	800fe68 <VL53L0X_WrByte>
 800c6f8:	4603      	mov	r3, r0
 800c6fa:	461a      	mov	r2, r3
 800c6fc:	7bfb      	ldrb	r3, [r7, #15]
 800c6fe:	4313      	orrs	r3, r2
 800c700:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 800c702:	2209      	movs	r2, #9
 800c704:	21cc      	movs	r1, #204	; 0xcc
 800c706:	6878      	ldr	r0, [r7, #4]
 800c708:	f003 fbae 	bl	800fe68 <VL53L0X_WrByte>
 800c70c:	4603      	mov	r3, r0
 800c70e:	461a      	mov	r2, r3
 800c710:	7bfb      	ldrb	r3, [r7, #15]
 800c712:	4313      	orrs	r3, r2
 800c714:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800c716:	2200      	movs	r2, #0
 800c718:	21ff      	movs	r1, #255	; 0xff
 800c71a:	6878      	ldr	r0, [r7, #4]
 800c71c:	f003 fba4 	bl	800fe68 <VL53L0X_WrByte>
 800c720:	4603      	mov	r3, r0
 800c722:	461a      	mov	r2, r3
 800c724:	7bfb      	ldrb	r3, [r7, #15]
 800c726:	4313      	orrs	r3, r2
 800c728:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800c72a:	2201      	movs	r2, #1
 800c72c:	21ff      	movs	r1, #255	; 0xff
 800c72e:	6878      	ldr	r0, [r7, #4]
 800c730:	f003 fb9a 	bl	800fe68 <VL53L0X_WrByte>
 800c734:	4603      	mov	r3, r0
 800c736:	461a      	mov	r2, r3
 800c738:	7bfb      	ldrb	r3, [r7, #15]
 800c73a:	4313      	orrs	r3, r2
 800c73c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800c73e:	2200      	movs	r2, #0
 800c740:	2100      	movs	r1, #0
 800c742:	6878      	ldr	r0, [r7, #4]
 800c744:	f003 fb90 	bl	800fe68 <VL53L0X_WrByte>
 800c748:	4603      	mov	r3, r0
 800c74a:	461a      	mov	r2, r3
 800c74c:	7bfb      	ldrb	r3, [r7, #15]
 800c74e:	4313      	orrs	r3, r2
 800c750:	73fb      	strb	r3, [r7, #15]
 800c752:	e058      	b.n	800c806 <VL53L0X_SetGpioConfig+0x23a>

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
 800c754:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d121      	bne.n	800c7a0 <VL53L0X_SetGpioConfig+0x1d4>
			switch (Functionality) {
 800c75c:	787b      	ldrb	r3, [r7, #1]
 800c75e:	2b04      	cmp	r3, #4
 800c760:	d81b      	bhi.n	800c79a <VL53L0X_SetGpioConfig+0x1ce>
 800c762:	a201      	add	r2, pc, #4	; (adr r2, 800c768 <VL53L0X_SetGpioConfig+0x19c>)
 800c764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c768:	0800c77d 	.word	0x0800c77d
 800c76c:	0800c783 	.word	0x0800c783
 800c770:	0800c789 	.word	0x0800c789
 800c774:	0800c78f 	.word	0x0800c78f
 800c778:	0800c795 	.word	0x0800c795
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 800c77c:	2300      	movs	r3, #0
 800c77e:	73bb      	strb	r3, [r7, #14]
				break;
 800c780:	e00f      	b.n	800c7a2 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 800c782:	2301      	movs	r3, #1
 800c784:	73bb      	strb	r3, [r7, #14]
				break;
 800c786:	e00c      	b.n	800c7a2 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 800c788:	2302      	movs	r3, #2
 800c78a:	73bb      	strb	r3, [r7, #14]
				break;
 800c78c:	e009      	b.n	800c7a2 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 800c78e:	2303      	movs	r3, #3
 800c790:	73bb      	strb	r3, [r7, #14]
				break;
 800c792:	e006      	b.n	800c7a2 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 800c794:	2304      	movs	r3, #4
 800c796:	73bb      	strb	r3, [r7, #14]
				break;
 800c798:	e003      	b.n	800c7a2 <VL53L0X_SetGpioConfig+0x1d6>
			default:
				Status =
 800c79a:	23f5      	movs	r3, #245	; 0xf5
 800c79c:	73fb      	strb	r3, [r7, #15]
 800c79e:	e000      	b.n	800c7a2 <VL53L0X_SetGpioConfig+0x1d6>
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}
 800c7a0:	bf00      	nop

		if (Status == VL53L0X_ERROR_NONE)
 800c7a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d107      	bne.n	800c7ba <VL53L0X_SetGpioConfig+0x1ee>
			Status = VL53L0X_WrByte(Dev,
 800c7aa:	7bbb      	ldrb	r3, [r7, #14]
 800c7ac:	461a      	mov	r2, r3
 800c7ae:	210a      	movs	r1, #10
 800c7b0:	6878      	ldr	r0, [r7, #4]
 800c7b2:	f003 fb59 	bl	800fe68 <VL53L0X_WrByte>
 800c7b6:	4603      	mov	r3, r0
 800c7b8:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 800c7ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d10f      	bne.n	800c7e2 <VL53L0X_SetGpioConfig+0x216>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 800c7c2:	7e3b      	ldrb	r3, [r7, #24]
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d102      	bne.n	800c7ce <VL53L0X_SetGpioConfig+0x202>
				data = 0;
 800c7c8:	2300      	movs	r3, #0
 800c7ca:	73bb      	strb	r3, [r7, #14]
 800c7cc:	e001      	b.n	800c7d2 <VL53L0X_SetGpioConfig+0x206>
			else
				data = (uint8_t)(1 << 4);
 800c7ce:	2310      	movs	r3, #16
 800c7d0:	73bb      	strb	r3, [r7, #14]

			Status = VL53L0X_UpdateByte(Dev,
 800c7d2:	7bbb      	ldrb	r3, [r7, #14]
 800c7d4:	22ef      	movs	r2, #239	; 0xef
 800c7d6:	2184      	movs	r1, #132	; 0x84
 800c7d8:	6878      	ldr	r0, [r7, #4]
 800c7da:	f003 fb93 	bl	800ff04 <VL53L0X_UpdateByte>
 800c7de:	4603      	mov	r3, r0
 800c7e0:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 800c7e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d103      	bne.n	800c7f2 <VL53L0X_SetGpioConfig+0x226>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	787a      	ldrb	r2, [r7, #1]
 800c7ee:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
				Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 800c7f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d105      	bne.n	800c806 <VL53L0X_SetGpioConfig+0x23a>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800c7fa:	2100      	movs	r1, #0
 800c7fc:	6878      	ldr	r0, [r7, #4]
 800c7fe:	f000 f83f 	bl	800c880 <VL53L0X_ClearInterruptMask>
 800c802:	4603      	mov	r3, r0
 800c804:	73fb      	strb	r3, [r7, #15]

	}

	LOG_FUNCTION_END(Status);
	return Status;
 800c806:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c80a:	4618      	mov	r0, r3
 800c80c:	3710      	adds	r7, #16
 800c80e:	46bd      	mov	sp, r7
 800c810:	bd80      	pop	{r7, pc}
 800c812:	bf00      	nop

0800c814 <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 800c814:	b580      	push	{r7, lr}
 800c816:	b086      	sub	sp, #24
 800c818:	af00      	add	r7, sp, #0
 800c81a:	60f8      	str	r0, [r7, #12]
 800c81c:	607a      	str	r2, [r7, #4]
 800c81e:	603b      	str	r3, [r7, #0]
 800c820:	460b      	mov	r3, r1
 800c822:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c824:	2300      	movs	r3, #0
 800c826:	75fb      	strb	r3, [r7, #23]
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 800c828:	f107 0314 	add.w	r3, r7, #20
 800c82c:	461a      	mov	r2, r3
 800c82e:	210e      	movs	r1, #14
 800c830:	68f8      	ldr	r0, [r7, #12]
 800c832:	f003 fbc5 	bl	800ffc0 <VL53L0X_RdWord>
 800c836:	4603      	mov	r3, r0
 800c838:	75fb      	strb	r3, [r7, #23]
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 800c83a:	8abb      	ldrh	r3, [r7, #20]
 800c83c:	045b      	lsls	r3, r3, #17
 800c83e:	461a      	mov	r2, r3
 800c840:	4b0e      	ldr	r3, [pc, #56]	; (800c87c <VL53L0X_GetInterruptThresholds+0x68>)
 800c842:	4013      	ands	r3, r2
 800c844:	687a      	ldr	r2, [r7, #4]
 800c846:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 800c848:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d10f      	bne.n	800c870 <VL53L0X_GetInterruptThresholds+0x5c>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 800c850:	f107 0314 	add.w	r3, r7, #20
 800c854:	461a      	mov	r2, r3
 800c856:	210c      	movs	r1, #12
 800c858:	68f8      	ldr	r0, [r7, #12]
 800c85a:	f003 fbb1 	bl	800ffc0 <VL53L0X_RdWord>
 800c85e:	4603      	mov	r3, r0
 800c860:	75fb      	strb	r3, [r7, #23]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 800c862:	8abb      	ldrh	r3, [r7, #20]
 800c864:	045b      	lsls	r3, r3, #17
 800c866:	461a      	mov	r2, r3
 800c868:	4b04      	ldr	r3, [pc, #16]	; (800c87c <VL53L0X_GetInterruptThresholds+0x68>)
 800c86a:	4013      	ands	r3, r2
		*pThresholdHigh =
 800c86c:	683a      	ldr	r2, [r7, #0]
 800c86e:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800c870:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c874:	4618      	mov	r0, r3
 800c876:	3718      	adds	r7, #24
 800c878:	46bd      	mov	sp, r7
 800c87a:	bd80      	pop	{r7, pc}
 800c87c:	1ffe0000 	.word	0x1ffe0000

0800c880 <VL53L0X_ClearInterruptMask>:
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 800c880:	b580      	push	{r7, lr}
 800c882:	b084      	sub	sp, #16
 800c884:	af00      	add	r7, sp, #0
 800c886:	6078      	str	r0, [r7, #4]
 800c888:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c88a:	2300      	movs	r3, #0
 800c88c:	73fb      	strb	r3, [r7, #15]
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 800c88e:	2300      	movs	r3, #0
 800c890:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 800c892:	2201      	movs	r2, #1
 800c894:	210b      	movs	r1, #11
 800c896:	6878      	ldr	r0, [r7, #4]
 800c898:	f003 fae6 	bl	800fe68 <VL53L0X_WrByte>
 800c89c:	4603      	mov	r3, r0
 800c89e:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 800c8a0:	2200      	movs	r2, #0
 800c8a2:	210b      	movs	r1, #11
 800c8a4:	6878      	ldr	r0, [r7, #4]
 800c8a6:	f003 fadf 	bl	800fe68 <VL53L0X_WrByte>
 800c8aa:	4603      	mov	r3, r0
 800c8ac:	461a      	mov	r2, r3
 800c8ae:	7bfb      	ldrb	r3, [r7, #15]
 800c8b0:	4313      	orrs	r3, r2
 800c8b2:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 800c8b4:	f107 030d 	add.w	r3, r7, #13
 800c8b8:	461a      	mov	r2, r3
 800c8ba:	2113      	movs	r1, #19
 800c8bc:	6878      	ldr	r0, [r7, #4]
 800c8be:	f003 fb55 	bl	800ff6c <VL53L0X_RdByte>
 800c8c2:	4603      	mov	r3, r0
 800c8c4:	461a      	mov	r2, r3
 800c8c6:	7bfb      	ldrb	r3, [r7, #15]
 800c8c8:	4313      	orrs	r3, r2
 800c8ca:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 800c8cc:	7bbb      	ldrb	r3, [r7, #14]
 800c8ce:	3301      	adds	r3, #1
 800c8d0:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 800c8d2:	7b7b      	ldrb	r3, [r7, #13]
 800c8d4:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d006      	beq.n	800c8ea <VL53L0X_ClearInterruptMask+0x6a>
			&& (LoopCount < 3)
 800c8dc:	7bbb      	ldrb	r3, [r7, #14]
 800c8de:	2b02      	cmp	r3, #2
 800c8e0:	d803      	bhi.n	800c8ea <VL53L0X_ClearInterruptMask+0x6a>
			&& (Status == VL53L0X_ERROR_NONE));
 800c8e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d0d3      	beq.n	800c892 <VL53L0X_ClearInterruptMask+0x12>


	if (LoopCount >= 3)
 800c8ea:	7bbb      	ldrb	r3, [r7, #14]
 800c8ec:	2b02      	cmp	r3, #2
 800c8ee:	d901      	bls.n	800c8f4 <VL53L0X_ClearInterruptMask+0x74>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 800c8f0:	23f4      	movs	r3, #244	; 0xf4
 800c8f2:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 800c8f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c8f8:	4618      	mov	r0, r3
 800c8fa:	3710      	adds	r7, #16
 800c8fc:	46bd      	mov	sp, r7
 800c8fe:	bd80      	pop	{r7, pc}

0800c900 <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 800c900:	b580      	push	{r7, lr}
 800c902:	b084      	sub	sp, #16
 800c904:	af00      	add	r7, sp, #0
 800c906:	6078      	str	r0, [r7, #4]
 800c908:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c90a:	2300      	movs	r3, #0
 800c90c:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 800c90e:	f107 030e 	add.w	r3, r7, #14
 800c912:	461a      	mov	r2, r3
 800c914:	2113      	movs	r1, #19
 800c916:	6878      	ldr	r0, [r7, #4]
 800c918:	f003 fb28 	bl	800ff6c <VL53L0X_RdByte>
 800c91c:	4603      	mov	r3, r0
 800c91e:	73fb      	strb	r3, [r7, #15]
	*pInterruptMaskStatus = Byte & 0x07;
 800c920:	7bbb      	ldrb	r3, [r7, #14]
 800c922:	f003 0207 	and.w	r2, r3, #7
 800c926:	683b      	ldr	r3, [r7, #0]
 800c928:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 800c92a:	7bbb      	ldrb	r3, [r7, #14]
 800c92c:	f003 0318 	and.w	r3, r3, #24
 800c930:	2b00      	cmp	r3, #0
 800c932:	d001      	beq.n	800c938 <VL53L0X_GetInterruptMaskStatus+0x38>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 800c934:	23fa      	movs	r3, #250	; 0xfa
 800c936:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 800c938:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c93c:	4618      	mov	r0, r3
 800c93e:	3710      	adds	r7, #16
 800c940:	46bd      	mov	sp, r7
 800c942:	bd80      	pop	{r7, pc}

0800c944 <VL53L0X_SetReferenceSpads>:
 * Internal functions
 *****************************************************************************/

VL53L0X_Error VL53L0X_SetReferenceSpads(VL53L0X_DEV Dev, uint32_t count,
	uint8_t isApertureSpads)
{
 800c944:	b580      	push	{r7, lr}
 800c946:	b086      	sub	sp, #24
 800c948:	af00      	add	r7, sp, #0
 800c94a:	60f8      	str	r0, [r7, #12]
 800c94c:	60b9      	str	r1, [r7, #8]
 800c94e:	4613      	mov	r3, r2
 800c950:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c952:	2300      	movs	r3, #0
 800c954:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_reference_spads(Dev, count, isApertureSpads);
 800c956:	79fb      	ldrb	r3, [r7, #7]
 800c958:	461a      	mov	r2, r3
 800c95a:	68b9      	ldr	r1, [r7, #8]
 800c95c:	68f8      	ldr	r0, [r7, #12]
 800c95e:	f000 fc55 	bl	800d20c <VL53L0X_set_reference_spads>
 800c962:	4603      	mov	r3, r0
 800c964:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);

	return Status;
 800c966:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c96a:	4618      	mov	r0, r3
 800c96c:	3718      	adds	r7, #24
 800c96e:	46bd      	mov	sp, r7
 800c970:	bd80      	pop	{r7, pc}

0800c972 <VL53L0X_PerformRefSpadManagement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
 800c972:	b580      	push	{r7, lr}
 800c974:	b086      	sub	sp, #24
 800c976:	af00      	add	r7, sp, #0
 800c978:	60f8      	str	r0, [r7, #12]
 800c97a:	60b9      	str	r1, [r7, #8]
 800c97c:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c97e:	2300      	movs	r3, #0
 800c980:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 800c982:	687a      	ldr	r2, [r7, #4]
 800c984:	68b9      	ldr	r1, [r7, #8]
 800c986:	68f8      	ldr	r0, [r7, #12]
 800c988:	f000 fa34 	bl	800cdf4 <VL53L0X_perform_ref_spad_management>
 800c98c:	4603      	mov	r3, r0
 800c98e:	75fb      	strb	r3, [r7, #23]
		isApertureSpads);

	LOG_FUNCTION_END(Status);

	return Status;
 800c990:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c994:	4618      	mov	r0, r3
 800c996:	3718      	adds	r7, #24
 800c998:	46bd      	mov	sp, r7
 800c99a:	bd80      	pop	{r7, pc}

0800c99c <VL53L0X_PerformContinuousRangingMeasurement>:


VL53L0X_Error VL53L0X_PerformContinuousRangingMeasurement(VL53L0X_Dev_t *device, VL53L0X_RangingMeasurementData_t *ranging_data) {
 800c99c:	b580      	push	{r7, lr}
 800c99e:	b084      	sub	sp, #16
 800c9a0:	af00      	add	r7, sp, #0
 800c9a2:	6078      	str	r0, [r7, #4]
 800c9a4:	6039      	str	r1, [r7, #0]
    VL53L0X_Error status;

    // Set the device to high accuracy mode
    status = VL53L0X_SetDeviceMode(device, VL53L0X_DEVICEMODE_CONTINUOUS_RANGING);
 800c9a6:	2101      	movs	r1, #1
 800c9a8:	6878      	ldr	r0, [r7, #4]
 800c9aa:	f7fe fea3 	bl	800b6f4 <VL53L0X_SetDeviceMode>
 800c9ae:	4603      	mov	r3, r0
 800c9b0:	73fb      	strb	r3, [r7, #15]
    if (status != VL53L0X_ERROR_NONE) {
 800c9b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d002      	beq.n	800c9c0 <VL53L0X_PerformContinuousRangingMeasurement+0x24>
        return status;
 800c9ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c9be:	e019      	b.n	800c9f4 <VL53L0X_PerformContinuousRangingMeasurement+0x58>
    }

    // Start continuous ranging measurement
    status = VL53L0X_StartMeasurement(device);
 800c9c0:	6878      	ldr	r0, [r7, #4]
 800c9c2:	f7ff fbad 	bl	800c120 <VL53L0X_StartMeasurement>
 800c9c6:	4603      	mov	r3, r0
 800c9c8:	73fb      	strb	r3, [r7, #15]
    if (status != VL53L0X_ERROR_NONE) {
 800c9ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d002      	beq.n	800c9d8 <VL53L0X_PerformContinuousRangingMeasurement+0x3c>
        return status;
 800c9d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c9d6:	e00d      	b.n	800c9f4 <VL53L0X_PerformContinuousRangingMeasurement+0x58>
    }

    // Get ranging measurement data
    status = VL53L0X_GetRangingMeasurementData(device, ranging_data);
 800c9d8:	6839      	ldr	r1, [r7, #0]
 800c9da:	6878      	ldr	r0, [r7, #4]
 800c9dc:	f7ff fca2 	bl	800c324 <VL53L0X_GetRangingMeasurementData>
 800c9e0:	4603      	mov	r3, r0
 800c9e2:	73fb      	strb	r3, [r7, #15]
    if (status != VL53L0X_ERROR_NONE) {
 800c9e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d002      	beq.n	800c9f2 <VL53L0X_PerformContinuousRangingMeasurement+0x56>
        return status;
 800c9ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c9f0:	e000      	b.n	800c9f4 <VL53L0X_PerformContinuousRangingMeasurement+0x58>
    }

    return VL53L0X_ERROR_NONE;
 800c9f2:	2300      	movs	r3, #0
}
 800c9f4:	4618      	mov	r0, r3
 800c9f6:	3710      	adds	r7, #16
 800c9f8:	46bd      	mov	sp, r7
 800c9fa:	bd80      	pop	{r7, pc}

0800c9fc <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 800c9fc:	b580      	push	{r7, lr}
 800c9fe:	b084      	sub	sp, #16
 800ca00:	af00      	add	r7, sp, #0
 800ca02:	6078      	str	r0, [r7, #4]
 800ca04:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ca06:	2300      	movs	r3, #0
 800ca08:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 800ca0a:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800ca0e:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 800ca10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ca14:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 800ca16:	f107 0308 	add.w	r3, r7, #8
 800ca1a:	461a      	mov	r2, r3
 800ca1c:	2128      	movs	r1, #40	; 0x28
 800ca1e:	6878      	ldr	r0, [r7, #4]
 800ca20:	f003 face 	bl	800ffc0 <VL53L0X_RdWord>
 800ca24:	4603      	mov	r3, r0
 800ca26:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 800ca28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d11e      	bne.n	800ca6e <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 800ca30:	893b      	ldrh	r3, [r7, #8]
 800ca32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ca36:	b29b      	uxth	r3, r3
 800ca38:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 800ca3a:	893b      	ldrh	r3, [r7, #8]
 800ca3c:	461a      	mov	r2, r3
 800ca3e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800ca42:	429a      	cmp	r2, r3
 800ca44:	dd0b      	ble.n	800ca5e <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 800ca46:	893a      	ldrh	r2, [r7, #8]
 800ca48:	897b      	ldrh	r3, [r7, #10]
 800ca4a:	1ad3      	subs	r3, r2, r3
 800ca4c:	b29b      	uxth	r3, r3
 800ca4e:	b21b      	sxth	r3, r3
 800ca50:	461a      	mov	r2, r3
					* 250;
 800ca52:	23fa      	movs	r3, #250	; 0xfa
 800ca54:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 800ca58:	683b      	ldr	r3, [r7, #0]
 800ca5a:	601a      	str	r2, [r3, #0]
 800ca5c:	e007      	b.n	800ca6e <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 800ca5e:	893b      	ldrh	r3, [r7, #8]
 800ca60:	b21b      	sxth	r3, r3
 800ca62:	461a      	mov	r2, r3
 800ca64:	23fa      	movs	r3, #250	; 0xfa
 800ca66:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 800ca6a:	683b      	ldr	r3, [r7, #0]
 800ca6c:	601a      	str	r2, [r3, #0]

	}

	return Status;
 800ca6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ca72:	4618      	mov	r0, r3
 800ca74:	3710      	adds	r7, #16
 800ca76:	46bd      	mov	sp, r7
 800ca78:	bd80      	pop	{r7, pc}

0800ca7a <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 800ca7a:	b480      	push	{r7}
 800ca7c:	b08b      	sub	sp, #44	; 0x2c
 800ca7e:	af00      	add	r7, sp, #0
 800ca80:	60f8      	str	r0, [r7, #12]
 800ca82:	60b9      	str	r1, [r7, #8]
 800ca84:	607a      	str	r2, [r7, #4]
 800ca86:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 800ca88:	2308      	movs	r3, #8
 800ca8a:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 800ca8c:	2300      	movs	r3, #0
 800ca8e:	77bb      	strb	r3, [r7, #30]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 800ca90:	683b      	ldr	r3, [r7, #0]
 800ca92:	f04f 32ff 	mov.w	r2, #4294967295
 800ca96:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 800ca98:	687a      	ldr	r2, [r7, #4]
 800ca9a:	69bb      	ldr	r3, [r7, #24]
 800ca9c:	fbb2 f3f3 	udiv	r3, r2, r3
 800caa0:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	69ba      	ldr	r2, [r7, #24]
 800caa6:	fbb3 f2f2 	udiv	r2, r3, r2
 800caaa:	69b9      	ldr	r1, [r7, #24]
 800caac:	fb01 f202 	mul.w	r2, r1, r2
 800cab0:	1a9b      	subs	r3, r3, r2
 800cab2:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 800cab4:	697b      	ldr	r3, [r7, #20]
 800cab6:	627b      	str	r3, [r7, #36]	; 0x24
 800cab8:	e030      	b.n	800cb1c <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 800caba:	2300      	movs	r3, #0
 800cabc:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 800cabe:	68fa      	ldr	r2, [r7, #12]
 800cac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cac2:	4413      	add	r3, r2
 800cac4:	781b      	ldrb	r3, [r3, #0]
 800cac6:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 800cac8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800caca:	697b      	ldr	r3, [r7, #20]
 800cacc:	429a      	cmp	r2, r3
 800cace:	d11e      	bne.n	800cb0e <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating */
			dataByte >>= fineOffset;
 800cad0:	7ffa      	ldrb	r2, [r7, #31]
 800cad2:	693b      	ldr	r3, [r7, #16]
 800cad4:	fa42 f303 	asr.w	r3, r2, r3
 800cad8:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 800cada:	693b      	ldr	r3, [r7, #16]
 800cadc:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 800cade:	e016      	b.n	800cb0e <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 800cae0:	7ffb      	ldrb	r3, [r7, #31]
 800cae2:	f003 0301 	and.w	r3, r3, #1
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d00b      	beq.n	800cb02 <get_next_good_spad+0x88>
				success = 1;
 800caea:	2301      	movs	r3, #1
 800caec:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 800caee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caf0:	69ba      	ldr	r2, [r7, #24]
 800caf2:	fb03 f202 	mul.w	r2, r3, r2
 800caf6:	6a3b      	ldr	r3, [r7, #32]
 800caf8:	4413      	add	r3, r2
 800cafa:	461a      	mov	r2, r3
 800cafc:	683b      	ldr	r3, [r7, #0]
 800cafe:	601a      	str	r2, [r3, #0]
				break;
 800cb00:	e009      	b.n	800cb16 <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 800cb02:	7ffb      	ldrb	r3, [r7, #31]
 800cb04:	085b      	lsrs	r3, r3, #1
 800cb06:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 800cb08:	6a3b      	ldr	r3, [r7, #32]
 800cb0a:	3301      	adds	r3, #1
 800cb0c:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 800cb0e:	6a3a      	ldr	r2, [r7, #32]
 800cb10:	69bb      	ldr	r3, [r7, #24]
 800cb12:	429a      	cmp	r2, r3
 800cb14:	d3e4      	bcc.n	800cae0 <get_next_good_spad+0x66>
				coarseIndex++) {
 800cb16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb18:	3301      	adds	r3, #1
 800cb1a:	627b      	str	r3, [r7, #36]	; 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 800cb1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cb1e:	68bb      	ldr	r3, [r7, #8]
 800cb20:	429a      	cmp	r2, r3
 800cb22:	d202      	bcs.n	800cb2a <get_next_good_spad+0xb0>
 800cb24:	7fbb      	ldrb	r3, [r7, #30]
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d0c7      	beq.n	800caba <get_next_good_spad+0x40>
		}
	}
}
 800cb2a:	bf00      	nop
 800cb2c:	372c      	adds	r7, #44	; 0x2c
 800cb2e:	46bd      	mov	sp, r7
 800cb30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb34:	4770      	bx	lr
	...

0800cb38 <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 800cb38:	b480      	push	{r7}
 800cb3a:	b085      	sub	sp, #20
 800cb3c:	af00      	add	r7, sp, #0
 800cb3e:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 800cb40:	2301      	movs	r3, #1
 800cb42:	73fb      	strb	r3, [r7, #15]
	quadrant = spadIndex >> 6;
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	099b      	lsrs	r3, r3, #6
 800cb48:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 800cb4a:	4a07      	ldr	r2, [pc, #28]	; (800cb68 <is_aperture+0x30>)
 800cb4c:	68bb      	ldr	r3, [r7, #8]
 800cb4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d101      	bne.n	800cb5a <is_aperture+0x22>
		isAperture = 0;
 800cb56:	2300      	movs	r3, #0
 800cb58:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 800cb5a:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb5c:	4618      	mov	r0, r3
 800cb5e:	3714      	adds	r7, #20
 800cb60:	46bd      	mov	sp, r7
 800cb62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb66:	4770      	bx	lr
 800cb68:	2000037c 	.word	0x2000037c

0800cb6c <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 800cb6c:	b480      	push	{r7}
 800cb6e:	b089      	sub	sp, #36	; 0x24
 800cb70:	af00      	add	r7, sp, #0
 800cb72:	60f8      	str	r0, [r7, #12]
 800cb74:	60b9      	str	r1, [r7, #8]
 800cb76:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800cb78:	2300      	movs	r3, #0
 800cb7a:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 800cb7c:	2308      	movs	r3, #8
 800cb7e:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 800cb80:	687a      	ldr	r2, [r7, #4]
 800cb82:	69bb      	ldr	r3, [r7, #24]
 800cb84:	fbb2 f3f3 	udiv	r3, r2, r3
 800cb88:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	69ba      	ldr	r2, [r7, #24]
 800cb8e:	fbb3 f2f2 	udiv	r2, r3, r2
 800cb92:	69b9      	ldr	r1, [r7, #24]
 800cb94:	fb01 f202 	mul.w	r2, r1, r2
 800cb98:	1a9b      	subs	r3, r3, r2
 800cb9a:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 800cb9c:	697a      	ldr	r2, [r7, #20]
 800cb9e:	68bb      	ldr	r3, [r7, #8]
 800cba0:	429a      	cmp	r2, r3
 800cba2:	d302      	bcc.n	800cbaa <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 800cba4:	23ce      	movs	r3, #206	; 0xce
 800cba6:	77fb      	strb	r3, [r7, #31]
 800cba8:	e010      	b.n	800cbcc <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 800cbaa:	68fa      	ldr	r2, [r7, #12]
 800cbac:	697b      	ldr	r3, [r7, #20]
 800cbae:	4413      	add	r3, r2
 800cbb0:	781b      	ldrb	r3, [r3, #0]
 800cbb2:	b25a      	sxtb	r2, r3
 800cbb4:	2101      	movs	r1, #1
 800cbb6:	693b      	ldr	r3, [r7, #16]
 800cbb8:	fa01 f303 	lsl.w	r3, r1, r3
 800cbbc:	b25b      	sxtb	r3, r3
 800cbbe:	4313      	orrs	r3, r2
 800cbc0:	b259      	sxtb	r1, r3
 800cbc2:	68fa      	ldr	r2, [r7, #12]
 800cbc4:	697b      	ldr	r3, [r7, #20]
 800cbc6:	4413      	add	r3, r2
 800cbc8:	b2ca      	uxtb	r2, r1
 800cbca:	701a      	strb	r2, [r3, #0]

	return status;
 800cbcc:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800cbd0:	4618      	mov	r0, r3
 800cbd2:	3724      	adds	r7, #36	; 0x24
 800cbd4:	46bd      	mov	sp, r7
 800cbd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbda:	4770      	bx	lr

0800cbdc <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 800cbdc:	b580      	push	{r7, lr}
 800cbde:	b084      	sub	sp, #16
 800cbe0:	af00      	add	r7, sp, #0
 800cbe2:	6078      	str	r0, [r7, #4]
 800cbe4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 800cbe6:	2306      	movs	r3, #6
 800cbe8:	683a      	ldr	r2, [r7, #0]
 800cbea:	21b0      	movs	r1, #176	; 0xb0
 800cbec:	6878      	ldr	r0, [r7, #4]
 800cbee:	f003 f8df 	bl	800fdb0 <VL53L0X_WriteMulti>
 800cbf2:	4603      	mov	r3, r0
 800cbf4:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 800cbf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800cbfa:	4618      	mov	r0, r3
 800cbfc:	3710      	adds	r7, #16
 800cbfe:	46bd      	mov	sp, r7
 800cc00:	bd80      	pop	{r7, pc}

0800cc02 <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 800cc02:	b580      	push	{r7, lr}
 800cc04:	b084      	sub	sp, #16
 800cc06:	af00      	add	r7, sp, #0
 800cc08:	6078      	str	r0, [r7, #4]
 800cc0a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 800cc0c:	2306      	movs	r3, #6
 800cc0e:	683a      	ldr	r2, [r7, #0]
 800cc10:	21b0      	movs	r1, #176	; 0xb0
 800cc12:	6878      	ldr	r0, [r7, #4]
 800cc14:	f003 f8fc 	bl	800fe10 <VL53L0X_ReadMulti>
 800cc18:	4603      	mov	r3, r0
 800cc1a:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 800cc1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800cc20:	4618      	mov	r0, r3
 800cc22:	3710      	adds	r7, #16
 800cc24:	46bd      	mov	sp, r7
 800cc26:	bd80      	pop	{r7, pc}

0800cc28 <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 800cc28:	b580      	push	{r7, lr}
 800cc2a:	b08c      	sub	sp, #48	; 0x30
 800cc2c:	af00      	add	r7, sp, #0
 800cc2e:	60f8      	str	r0, [r7, #12]
 800cc30:	607a      	str	r2, [r7, #4]
 800cc32:	603b      	str	r3, [r7, #0]
 800cc34:	460b      	mov	r3, r1
 800cc36:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800cc38:	2300      	movs	r3, #0
 800cc3a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 800cc3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cc40:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 800cc42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cc44:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 800cc46:	2300      	movs	r3, #0
 800cc48:	62bb      	str	r3, [r7, #40]	; 0x28
 800cc4a:	e02b      	b.n	800cca4 <enable_ref_spads+0x7c>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 800cc4c:	f107 031c 	add.w	r3, r7, #28
 800cc50:	6a3a      	ldr	r2, [r7, #32]
 800cc52:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800cc54:	6878      	ldr	r0, [r7, #4]
 800cc56:	f7ff ff10 	bl	800ca7a <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 800cc5a:	69fb      	ldr	r3, [r7, #28]
 800cc5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc60:	d103      	bne.n	800cc6a <enable_ref_spads+0x42>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 800cc62:	23ce      	movs	r3, #206	; 0xce
 800cc64:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 800cc68:	e020      	b.n	800ccac <enable_ref_spads+0x84>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 800cc6a:	69fb      	ldr	r3, [r7, #28]
 800cc6c:	461a      	mov	r2, r3
 800cc6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc70:	4413      	add	r3, r2
 800cc72:	4618      	mov	r0, r3
 800cc74:	f7ff ff60 	bl	800cb38 <is_aperture>
 800cc78:	4603      	mov	r3, r0
 800cc7a:	461a      	mov	r2, r3
 800cc7c:	7afb      	ldrb	r3, [r7, #11]
 800cc7e:	4293      	cmp	r3, r2
 800cc80:	d003      	beq.n	800cc8a <enable_ref_spads+0x62>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 800cc82:	23ce      	movs	r3, #206	; 0xce
 800cc84:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 800cc88:	e010      	b.n	800ccac <enable_ref_spads+0x84>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 800cc8a:	69fb      	ldr	r3, [r7, #28]
 800cc8c:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 800cc8e:	6a3a      	ldr	r2, [r7, #32]
 800cc90:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800cc92:	6838      	ldr	r0, [r7, #0]
 800cc94:	f7ff ff6a 	bl	800cb6c <enable_spad_bit>
		currentSpad++;
 800cc98:	6a3b      	ldr	r3, [r7, #32]
 800cc9a:	3301      	adds	r3, #1
 800cc9c:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 800cc9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cca0:	3301      	adds	r3, #1
 800cca2:	62bb      	str	r3, [r7, #40]	; 0x28
 800cca4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cca6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cca8:	429a      	cmp	r2, r3
 800ccaa:	d3cf      	bcc.n	800cc4c <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 800ccac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ccae:	6a3a      	ldr	r2, [r7, #32]
 800ccb0:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 800ccb2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d106      	bne.n	800ccc8 <enable_ref_spads+0xa0>
		status = set_ref_spad_map(Dev, spadArray);
 800ccba:	6839      	ldr	r1, [r7, #0]
 800ccbc:	68f8      	ldr	r0, [r7, #12]
 800ccbe:	f7ff ff8d 	bl	800cbdc <set_ref_spad_map>
 800ccc2:	4603      	mov	r3, r0
 800ccc4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 800ccc8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d121      	bne.n	800cd14 <enable_ref_spads+0xec>
		status = get_ref_spad_map(Dev, checkSpadArray);
 800ccd0:	f107 0314 	add.w	r3, r7, #20
 800ccd4:	4619      	mov	r1, r3
 800ccd6:	68f8      	ldr	r0, [r7, #12]
 800ccd8:	f7ff ff93 	bl	800cc02 <get_ref_spad_map>
 800ccdc:	4603      	mov	r3, r0
 800ccde:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		i = 0;
 800cce2:	2300      	movs	r3, #0
 800cce4:	627b      	str	r3, [r7, #36]	; 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 800cce6:	e011      	b.n	800cd0c <enable_ref_spads+0xe4>
			if (spadArray[i] != checkSpadArray[i]) {
 800cce8:	683a      	ldr	r2, [r7, #0]
 800ccea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccec:	4413      	add	r3, r2
 800ccee:	781a      	ldrb	r2, [r3, #0]
 800ccf0:	f107 0114 	add.w	r1, r7, #20
 800ccf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccf6:	440b      	add	r3, r1
 800ccf8:	781b      	ldrb	r3, [r3, #0]
 800ccfa:	429a      	cmp	r2, r3
 800ccfc:	d003      	beq.n	800cd06 <enable_ref_spads+0xde>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 800ccfe:	23ce      	movs	r3, #206	; 0xce
 800cd00:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 800cd04:	e006      	b.n	800cd14 <enable_ref_spads+0xec>
			}
			i++;
 800cd06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd08:	3301      	adds	r3, #1
 800cd0a:	627b      	str	r3, [r7, #36]	; 0x24
		while (i < size) {
 800cd0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cd0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd10:	429a      	cmp	r2, r3
 800cd12:	d3e9      	bcc.n	800cce8 <enable_ref_spads+0xc0>
		}
	}
	return status;
 800cd14:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800cd18:	4618      	mov	r0, r3
 800cd1a:	3730      	adds	r7, #48	; 0x30
 800cd1c:	46bd      	mov	sp, r7
 800cd1e:	bd80      	pop	{r7, pc}

0800cd20 <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 800cd20:	b580      	push	{r7, lr}
 800cd22:	b08a      	sub	sp, #40	; 0x28
 800cd24:	af00      	add	r7, sp, #0
 800cd26:	6078      	str	r0, [r7, #4]
 800cd28:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800cd2a:	2300      	movs	r3, #0
 800cd2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 800cd30:	2300      	movs	r3, #0
 800cd32:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800cd3c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 800cd40:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d107      	bne.n	800cd58 <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 800cd48:	22c0      	movs	r2, #192	; 0xc0
 800cd4a:	2101      	movs	r1, #1
 800cd4c:	6878      	ldr	r0, [r7, #4]
 800cd4e:	f003 f88b 	bl	800fe68 <VL53L0X_WrByte>
 800cd52:	4603      	mov	r3, r0
 800cd54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 800cd58:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d108      	bne.n	800cd72 <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 800cd60:	f107 0308 	add.w	r3, r7, #8
 800cd64:	4619      	mov	r1, r3
 800cd66:	6878      	ldr	r0, [r7, #4]
 800cd68:	f7ff fc00 	bl	800c56c <VL53L0X_PerformSingleRangingMeasurement>
 800cd6c:	4603      	mov	r3, r0
 800cd6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 800cd72:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d107      	bne.n	800cd8a <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800cd7a:	2201      	movs	r2, #1
 800cd7c:	21ff      	movs	r1, #255	; 0xff
 800cd7e:	6878      	ldr	r0, [r7, #4]
 800cd80:	f003 f872 	bl	800fe68 <VL53L0X_WrByte>
 800cd84:	4603      	mov	r3, r0
 800cd86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE)
 800cd8a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d107      	bne.n	800cda2 <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 800cd92:	683a      	ldr	r2, [r7, #0]
 800cd94:	21b6      	movs	r1, #182	; 0xb6
 800cd96:	6878      	ldr	r0, [r7, #4]
 800cd98:	f003 f912 	bl	800ffc0 <VL53L0X_RdWord>
 800cd9c:	4603      	mov	r3, r0
 800cd9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 800cda2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d107      	bne.n	800cdba <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800cdaa:	2200      	movs	r2, #0
 800cdac:	21ff      	movs	r1, #255	; 0xff
 800cdae:	6878      	ldr	r0, [r7, #4]
 800cdb0:	f003 f85a 	bl	800fe68 <VL53L0X_WrByte>
 800cdb4:	4603      	mov	r3, r0
 800cdb6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE) {
 800cdba:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d112      	bne.n	800cde8 <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800cdc2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cdc6:	461a      	mov	r2, r3
 800cdc8:	2101      	movs	r1, #1
 800cdca:	6878      	ldr	r0, [r7, #4]
 800cdcc:	f003 f84c 	bl	800fe68 <VL53L0X_WrByte>
 800cdd0:	4603      	mov	r3, r0
 800cdd2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 800cdd6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	d104      	bne.n	800cde8 <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800cde4:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
	}

	return status;
 800cde8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800cdec:	4618      	mov	r0, r3
 800cdee:	3728      	adds	r7, #40	; 0x28
 800cdf0:	46bd      	mov	sp, r7
 800cdf2:	bd80      	pop	{r7, pc}

0800cdf4 <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 800cdf4:	b590      	push	{r4, r7, lr}
 800cdf6:	b09d      	sub	sp, #116	; 0x74
 800cdf8:	af06      	add	r7, sp, #24
 800cdfa:	60f8      	str	r0, [r7, #12]
 800cdfc:	60b9      	str	r1, [r7, #8]
 800cdfe:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ce00:	2300      	movs	r3, #0
 800ce02:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 800ce06:	23b4      	movs	r3, #180	; 0xb4
 800ce08:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	uint32_t minimumSpadCount = 3;
 800ce0c:	2303      	movs	r3, #3
 800ce0e:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t maxSpadCount = 44;
 800ce10:	232c      	movs	r3, #44	; 0x2c
 800ce12:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t currentSpadIndex = 0;
 800ce14:	2300      	movs	r3, #0
 800ce16:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t lastSpadIndex = 0;
 800ce18:	2300      	movs	r3, #0
 800ce1a:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 800ce1c:	2300      	movs	r3, #0
 800ce1e:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 800ce20:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 800ce24:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 800ce26:	2300      	movs	r3, #0
 800ce28:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t index = 0;
 800ce2a:	2300      	movs	r3, #0
 800ce2c:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t spadArraySize = 6;
 800ce2e:	2306      	movs	r3, #6
 800ce30:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t signalRateDiff = 0;
 800ce32:	2300      	movs	r3, #0
 800ce34:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t lastSignalRateDiff = 0;
 800ce36:	2300      	movs	r3, #0
 800ce38:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t complete = 0;
 800ce3a:	2300      	movs	r3, #0
 800ce3c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t VhvSettings = 0;
 800ce40:	2300      	movs	r3, #0
 800ce42:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 800ce44:	2300      	movs	r3, #0
 800ce46:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 800ce48:	2300      	movs	r3, #0
 800ce4a:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t	 isApertureSpads_int = 0;
 800ce4c:	2300      	movs	r3, #0
 800ce4e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 800ce52:	68fb      	ldr	r3, [r7, #12]
 800ce54:	f8b3 313c 	ldrh.w	r3, [r3, #316]	; 0x13c
 800ce58:	85fb      	strh	r3, [r7, #46]	; 0x2e
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 800ce5a:	2300      	movs	r3, #0
 800ce5c:	64bb      	str	r3, [r7, #72]	; 0x48
 800ce5e:	e009      	b.n	800ce74 <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800ce60:	68fa      	ldr	r2, [r7, #12]
 800ce62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ce64:	4413      	add	r3, r2
 800ce66:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800ce6a:	2200      	movs	r2, #0
 800ce6c:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 800ce6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ce70:	3301      	adds	r3, #1
 800ce72:	64bb      	str	r3, [r7, #72]	; 0x48
 800ce74:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ce76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce78:	429a      	cmp	r2, r3
 800ce7a:	d3f1      	bcc.n	800ce60 <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800ce7c:	2201      	movs	r2, #1
 800ce7e:	21ff      	movs	r1, #255	; 0xff
 800ce80:	68f8      	ldr	r0, [r7, #12]
 800ce82:	f002 fff1 	bl	800fe68 <VL53L0X_WrByte>
 800ce86:	4603      	mov	r3, r0
 800ce88:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 800ce8c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	d107      	bne.n	800cea4 <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 800ce94:	2200      	movs	r2, #0
 800ce96:	214f      	movs	r1, #79	; 0x4f
 800ce98:	68f8      	ldr	r0, [r7, #12]
 800ce9a:	f002 ffe5 	bl	800fe68 <VL53L0X_WrByte>
 800ce9e:	4603      	mov	r3, r0
 800cea0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 800cea4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d107      	bne.n	800cebc <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 800ceac:	222c      	movs	r2, #44	; 0x2c
 800ceae:	214e      	movs	r1, #78	; 0x4e
 800ceb0:	68f8      	ldr	r0, [r7, #12]
 800ceb2:	f002 ffd9 	bl	800fe68 <VL53L0X_WrByte>
 800ceb6:	4603      	mov	r3, r0
 800ceb8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 800cebc:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d107      	bne.n	800ced4 <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800cec4:	2200      	movs	r2, #0
 800cec6:	21ff      	movs	r1, #255	; 0xff
 800cec8:	68f8      	ldr	r0, [r7, #12]
 800ceca:	f002 ffcd 	bl	800fe68 <VL53L0X_WrByte>
 800cece:	4603      	mov	r3, r0
 800ced0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 800ced4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d109      	bne.n	800cef0 <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 800cedc:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800cee0:	461a      	mov	r2, r3
 800cee2:	21b6      	movs	r1, #182	; 0xb6
 800cee4:	68f8      	ldr	r0, [r7, #12]
 800cee6:	f002 ffbf 	bl	800fe68 <VL53L0X_WrByte>
 800ceea:	4603      	mov	r3, r0
 800ceec:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 800cef0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d107      	bne.n	800cf08 <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 800cef8:	2200      	movs	r2, #0
 800cefa:	2180      	movs	r1, #128	; 0x80
 800cefc:	68f8      	ldr	r0, [r7, #12]
 800cefe:	f002 ffb3 	bl	800fe68 <VL53L0X_WrByte>
 800cf02:	4603      	mov	r3, r0
 800cf04:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 800cf08:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d10a      	bne.n	800cf26 <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 800cf10:	f107 0210 	add.w	r2, r7, #16
 800cf14:	f107 0111 	add.w	r1, r7, #17
 800cf18:	2300      	movs	r3, #0
 800cf1a:	68f8      	ldr	r0, [r7, #12]
 800cf1c:	f000 fbbb 	bl	800d696 <VL53L0X_perform_ref_calibration>
 800cf20:	4603      	mov	r3, r0
 800cf22:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 800cf26:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	d121      	bne.n	800cf72 <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 800cf2e:	2300      	movs	r3, #0
 800cf30:	653b      	str	r3, [r7, #80]	; 0x50
		lastSpadIndex = currentSpadIndex;
 800cf32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cf34:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 800cf36:	2300      	movs	r3, #0
 800cf38:	64fb      	str	r3, [r7, #76]	; 0x4c
		Status = enable_ref_spads(Dev,
 800cf3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cf3c:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 800cf3e:	68fb      	ldr	r3, [r7, #12]
 800cf40:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 800cf44:	68fb      	ldr	r3, [r7, #12]
 800cf46:	f503 7492 	add.w	r4, r3, #292	; 0x124
		Status = enable_ref_spads(Dev,
 800cf4a:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800cf4e:	f107 0218 	add.w	r2, r7, #24
 800cf52:	9204      	str	r2, [sp, #16]
 800cf54:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cf56:	9203      	str	r2, [sp, #12]
 800cf58:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800cf5a:	9202      	str	r2, [sp, #8]
 800cf5c:	9301      	str	r3, [sp, #4]
 800cf5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf60:	9300      	str	r3, [sp, #0]
 800cf62:	4623      	mov	r3, r4
 800cf64:	4602      	mov	r2, r0
 800cf66:	68f8      	ldr	r0, [r7, #12]
 800cf68:	f7ff fe5e 	bl	800cc28 <enable_ref_spads>
 800cf6c:	4603      	mov	r3, r0
 800cf6e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800cf72:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d174      	bne.n	800d064 <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 800cf7a:	69bb      	ldr	r3, [r7, #24]
 800cf7c:	653b      	str	r3, [r7, #80]	; 0x50

		Status = perform_ref_signal_measurement(Dev,
 800cf7e:	f107 0312 	add.w	r3, r7, #18
 800cf82:	4619      	mov	r1, r3
 800cf84:	68f8      	ldr	r0, [r7, #12]
 800cf86:	f7ff fecb 	bl	800cd20 <perform_ref_signal_measurement>
 800cf8a:	4603      	mov	r3, r0
 800cf8c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 800cf90:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d161      	bne.n	800d05c <VL53L0X_perform_ref_spad_management+0x268>
			(peakSignalRateRef > targetRefRate)) {
 800cf98:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 800cf9a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800cf9c:	429a      	cmp	r2, r3
 800cf9e:	d25d      	bcs.n	800d05c <VL53L0X_perform_ref_spad_management+0x268>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs */

			for (index = 0; index < spadArraySize; index++)
 800cfa0:	2300      	movs	r3, #0
 800cfa2:	64bb      	str	r3, [r7, #72]	; 0x48
 800cfa4:	e009      	b.n	800cfba <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800cfa6:	68fa      	ldr	r2, [r7, #12]
 800cfa8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cfaa:	4413      	add	r3, r2
 800cfac:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800cfb0:	2200      	movs	r2, #0
 800cfb2:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 800cfb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cfb6:	3301      	adds	r3, #1
 800cfb8:	64bb      	str	r3, [r7, #72]	; 0x48
 800cfba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cfbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfbe:	429a      	cmp	r2, r3
 800cfc0:	d3f1      	bcc.n	800cfa6 <VL53L0X_perform_ref_spad_management+0x1b2>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 800cfc2:	e002      	b.n	800cfca <VL53L0X_perform_ref_spad_management+0x1d6>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 800cfc4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cfc6:	3301      	adds	r3, #1
 800cfc8:	653b      	str	r3, [r7, #80]	; 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 800cfca:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 800cfce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cfd0:	4413      	add	r3, r2
 800cfd2:	4618      	mov	r0, r3
 800cfd4:	f7ff fdb0 	bl	800cb38 <is_aperture>
 800cfd8:	4603      	mov	r3, r0
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	d103      	bne.n	800cfe6 <VL53L0X_perform_ref_spad_management+0x1f2>
				== 0) && (currentSpadIndex < maxSpadCount)) {
 800cfde:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800cfe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfe2:	429a      	cmp	r2, r3
 800cfe4:	d3ee      	bcc.n	800cfc4 <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 800cfe6:	2301      	movs	r3, #1
 800cfe8:	64fb      	str	r3, [r7, #76]	; 0x4c

			Status = enable_ref_spads(Dev,
 800cfea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cfec:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 800cfee:	68fb      	ldr	r3, [r7, #12]
 800cff0:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 800cff4:	68fb      	ldr	r3, [r7, #12]
 800cff6:	f503 7492 	add.w	r4, r3, #292	; 0x124
			Status = enable_ref_spads(Dev,
 800cffa:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800cffe:	f107 0218 	add.w	r2, r7, #24
 800d002:	9204      	str	r2, [sp, #16]
 800d004:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d006:	9203      	str	r2, [sp, #12]
 800d008:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d00a:	9202      	str	r2, [sp, #8]
 800d00c:	9301      	str	r3, [sp, #4]
 800d00e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d010:	9300      	str	r3, [sp, #0]
 800d012:	4623      	mov	r3, r4
 800d014:	4602      	mov	r2, r0
 800d016:	68f8      	ldr	r0, [r7, #12]
 800d018:	f7ff fe06 	bl	800cc28 <enable_ref_spads>
 800d01c:	4603      	mov	r3, r0
 800d01e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 800d022:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800d026:	2b00      	cmp	r3, #0
 800d028:	d11b      	bne.n	800d062 <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 800d02a:	69bb      	ldr	r3, [r7, #24]
 800d02c:	653b      	str	r3, [r7, #80]	; 0x50
				Status = perform_ref_signal_measurement(Dev,
 800d02e:	f107 0312 	add.w	r3, r7, #18
 800d032:	4619      	mov	r1, r3
 800d034:	68f8      	ldr	r0, [r7, #12]
 800d036:	f7ff fe73 	bl	800cd20 <perform_ref_signal_measurement>
 800d03a:	4603      	mov	r3, r0
 800d03c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 800d040:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800d044:	2b00      	cmp	r3, #0
 800d046:	d10c      	bne.n	800d062 <VL53L0X_perform_ref_spad_management+0x26e>
					(peakSignalRateRef > targetRefRate)) {
 800d048:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 800d04a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d04c:	429a      	cmp	r2, r3
 800d04e:	d208      	bcs.n	800d062 <VL53L0X_perform_ref_spad_management+0x26e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 800d050:	2301      	movs	r3, #1
 800d052:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					refSpadCount_int = minimumSpadCount;
 800d056:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d058:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 800d05a:	e002      	b.n	800d062 <VL53L0X_perform_ref_spad_management+0x26e>
				}
			}
		} else {
			needAptSpads = 0;
 800d05c:	2300      	movs	r3, #0
 800d05e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d060:	e000      	b.n	800d064 <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 800d062:	bf00      	nop
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 800d064:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800d068:	2b00      	cmp	r3, #0
 800d06a:	f040 80af 	bne.w	800d1cc <VL53L0X_perform_ref_spad_management+0x3d8>
		(peakSignalRateRef < targetRefRate)) {
 800d06e:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 800d070:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d072:	429a      	cmp	r2, r3
 800d074:	f240 80aa 	bls.w	800d1cc <VL53L0X_perform_ref_spad_management+0x3d8>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 800d078:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d07a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		refSpadCount_int	= minimumSpadCount;
 800d07e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d080:	63fb      	str	r3, [r7, #60]	; 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 800d082:	68fb      	ldr	r3, [r7, #12]
 800d084:	f503 7192 	add.w	r1, r3, #292	; 0x124
 800d088:	f107 031c 	add.w	r3, r7, #28
 800d08c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d08e:	4618      	mov	r0, r3
 800d090:	f003 f844 	bl	801011c <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 800d094:	8a7b      	ldrh	r3, [r7, #18]
 800d096:	461a      	mov	r2, r3
 800d098:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d09a:	1ad3      	subs	r3, r2, r3
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	bfb8      	it	lt
 800d0a0:	425b      	neglt	r3, r3
 800d0a2:	647b      	str	r3, [r7, #68]	; 0x44
			targetRefRate);
		complete = 0;
 800d0a4:	2300      	movs	r3, #0
 800d0a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

		while (!complete) {
 800d0aa:	e086      	b.n	800d1ba <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 800d0ac:	68fb      	ldr	r3, [r7, #12]
 800d0ae:	f503 7095 	add.w	r0, r3, #298	; 0x12a
			get_next_good_spad(
 800d0b2:	f107 0314 	add.w	r3, r7, #20
 800d0b6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d0b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d0ba:	f7ff fcde 	bl	800ca7a <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 800d0be:	697b      	ldr	r3, [r7, #20]
 800d0c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d0c4:	d103      	bne.n	800d0ce <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 800d0c6:	23ce      	movs	r3, #206	; 0xce
 800d0c8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 800d0cc:	e07e      	b.n	800d1cc <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 800d0ce:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800d0d2:	697a      	ldr	r2, [r7, #20]
 800d0d4:	4413      	add	r3, r2
 800d0d6:	4618      	mov	r0, r3
 800d0d8:	f7ff fd2e 	bl	800cb38 <is_aperture>
 800d0dc:	4603      	mov	r3, r0
 800d0de:	461a      	mov	r2, r3
 800d0e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d0e2:	4293      	cmp	r3, r2
 800d0e4:	d003      	beq.n	800d0ee <VL53L0X_perform_ref_spad_management+0x2fa>
					needAptSpads) {
				/* At this point we have enabled the maximum
				 * number of Aperture spads.
				 */
				complete = 1;
 800d0e6:	2301      	movs	r3, #1
 800d0e8:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
				break;
 800d0ec:	e06e      	b.n	800d1cc <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 800d0ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d0f0:	3301      	adds	r3, #1
 800d0f2:	63fb      	str	r3, [r7, #60]	; 0x3c

			currentSpadIndex = nextGoodSpad;
 800d0f4:	697b      	ldr	r3, [r7, #20]
 800d0f6:	653b      	str	r3, [r7, #80]	; 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 800d0f8:	68fb      	ldr	r3, [r7, #12]
 800d0fa:	f503 7392 	add.w	r3, r3, #292	; 0x124
			Status = enable_spad_bit(
 800d0fe:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d100:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d102:	4618      	mov	r0, r3
 800d104:	f7ff fd32 	bl	800cb6c <enable_spad_bit>
 800d108:	4603      	mov	r3, r0
 800d10a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 800d10e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800d112:	2b00      	cmp	r3, #0
 800d114:	d10c      	bne.n	800d130 <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 800d116:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d118:	3301      	adds	r3, #1
 800d11a:	653b      	str	r3, [r7, #80]	; 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement. */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	f503 7392 	add.w	r3, r3, #292	; 0x124
				Status = set_ref_spad_map(Dev,
 800d122:	4619      	mov	r1, r3
 800d124:	68f8      	ldr	r0, [r7, #12]
 800d126:	f7ff fd59 	bl	800cbdc <set_ref_spad_map>
 800d12a:	4603      	mov	r3, r0
 800d12c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 800d130:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800d134:	2b00      	cmp	r3, #0
 800d136:	d146      	bne.n	800d1c6 <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 800d138:	f107 0312 	add.w	r3, r7, #18
 800d13c:	4619      	mov	r1, r3
 800d13e:	68f8      	ldr	r0, [r7, #12]
 800d140:	f7ff fdee 	bl	800cd20 <perform_ref_signal_measurement>
 800d144:	4603      	mov	r3, r0
 800d146:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 800d14a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800d14e:	2b00      	cmp	r3, #0
 800d150:	d13b      	bne.n	800d1ca <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 800d152:	8a7b      	ldrh	r3, [r7, #18]
 800d154:	461a      	mov	r2, r3
 800d156:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d158:	1ad3      	subs	r3, r2, r3
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	bfb8      	it	lt
 800d15e:	425b      	neglt	r3, r3
 800d160:	627b      	str	r3, [r7, #36]	; 0x24

			if (peakSignalRateRef > targetRefRate) {
 800d162:	8a7b      	ldrh	r3, [r7, #18]
 800d164:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d166:	429a      	cmp	r2, r3
 800d168:	d21c      	bcs.n	800d1a4 <VL53L0X_perform_ref_spad_management+0x3b0>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 800d16a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d16c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d16e:	429a      	cmp	r2, r3
 800d170:	d914      	bls.n	800d19c <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this. */
					Status = set_ref_spad_map(Dev,
 800d172:	f107 031c 	add.w	r3, r7, #28
 800d176:	4619      	mov	r1, r3
 800d178:	68f8      	ldr	r0, [r7, #12]
 800d17a:	f7ff fd2f 	bl	800cbdc <set_ref_spad_map>
 800d17e:	4603      	mov	r3, r0
 800d180:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 800d184:	68fb      	ldr	r3, [r7, #12]
 800d186:	f503 7392 	add.w	r3, r3, #292	; 0x124
					memcpy(
 800d18a:	f107 011c 	add.w	r1, r7, #28
 800d18e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d190:	4618      	mov	r0, r3
 800d192:	f002 ffc3 	bl	801011c <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 800d196:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d198:	3b01      	subs	r3, #1
 800d19a:	63fb      	str	r3, [r7, #60]	; 0x3c
				}
				complete = 1;
 800d19c:	2301      	movs	r3, #1
 800d19e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d1a2:	e00a      	b.n	800d1ba <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 800d1a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1a6:	647b      	str	r3, [r7, #68]	; 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 800d1a8:	68fb      	ldr	r3, [r7, #12]
 800d1aa:	f503 7192 	add.w	r1, r3, #292	; 0x124
				memcpy(lastSpadArray,
 800d1ae:	f107 031c 	add.w	r3, r7, #28
 800d1b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d1b4:	4618      	mov	r0, r3
 800d1b6:	f002 ffb1 	bl	801011c <memcpy>
		while (!complete) {
 800d1ba:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	f43f af74 	beq.w	800d0ac <VL53L0X_perform_ref_spad_management+0x2b8>
 800d1c4:	e002      	b.n	800d1cc <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 800d1c6:	bf00      	nop
 800d1c8:	e000      	b.n	800d1cc <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 800d1ca:	bf00      	nop
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800d1cc:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d115      	bne.n	800d200 <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 800d1d4:	68bb      	ldr	r3, [r7, #8]
 800d1d6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d1d8:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 800d1e0:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 800d1e2:	68fb      	ldr	r3, [r7, #12]
 800d1e4:	2201      	movs	r2, #1
 800d1e6:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800d1ea:	68bb      	ldr	r3, [r7, #8]
 800d1ec:	681b      	ldr	r3, [r3, #0]
 800d1ee:	b2da      	uxtb	r2, r3
 800d1f0:	68fb      	ldr	r3, [r7, #12]
 800d1f2:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	781a      	ldrb	r2, [r3, #0]
 800d1fa:	68fb      	ldr	r3, [r7, #12]
 800d1fc:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 800d200:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 800d204:	4618      	mov	r0, r3
 800d206:	375c      	adds	r7, #92	; 0x5c
 800d208:	46bd      	mov	sp, r7
 800d20a:	bd90      	pop	{r4, r7, pc}

0800d20c <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 800d20c:	b590      	push	{r4, r7, lr}
 800d20e:	b093      	sub	sp, #76	; 0x4c
 800d210:	af06      	add	r7, sp, #24
 800d212:	60f8      	str	r0, [r7, #12]
 800d214:	60b9      	str	r1, [r7, #8]
 800d216:	4613      	mov	r3, r2
 800d218:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d21a:	2300      	movs	r3, #0
 800d21c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t currentSpadIndex = 0;
 800d220:	2300      	movs	r3, #0
 800d222:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t startSelect = 0xB4;
 800d224:	23b4      	movs	r3, #180	; 0xb4
 800d226:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t spadArraySize = 6;
 800d22a:	2306      	movs	r3, #6
 800d22c:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 800d22e:	232c      	movs	r3, #44	; 0x2c
 800d230:	61bb      	str	r3, [r7, #24]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800d232:	2201      	movs	r2, #1
 800d234:	21ff      	movs	r1, #255	; 0xff
 800d236:	68f8      	ldr	r0, [r7, #12]
 800d238:	f002 fe16 	bl	800fe68 <VL53L0X_WrByte>
 800d23c:	4603      	mov	r3, r0
 800d23e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 800d242:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800d246:	2b00      	cmp	r3, #0
 800d248:	d107      	bne.n	800d25a <VL53L0X_set_reference_spads+0x4e>
		Status = VL53L0X_WrByte(Dev,
 800d24a:	2200      	movs	r2, #0
 800d24c:	214f      	movs	r1, #79	; 0x4f
 800d24e:	68f8      	ldr	r0, [r7, #12]
 800d250:	f002 fe0a 	bl	800fe68 <VL53L0X_WrByte>
 800d254:	4603      	mov	r3, r0
 800d256:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 800d25a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d107      	bne.n	800d272 <VL53L0X_set_reference_spads+0x66>
		Status = VL53L0X_WrByte(Dev,
 800d262:	222c      	movs	r2, #44	; 0x2c
 800d264:	214e      	movs	r1, #78	; 0x4e
 800d266:	68f8      	ldr	r0, [r7, #12]
 800d268:	f002 fdfe 	bl	800fe68 <VL53L0X_WrByte>
 800d26c:	4603      	mov	r3, r0
 800d26e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 800d272:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800d276:	2b00      	cmp	r3, #0
 800d278:	d107      	bne.n	800d28a <VL53L0X_set_reference_spads+0x7e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800d27a:	2200      	movs	r2, #0
 800d27c:	21ff      	movs	r1, #255	; 0xff
 800d27e:	68f8      	ldr	r0, [r7, #12]
 800d280:	f002 fdf2 	bl	800fe68 <VL53L0X_WrByte>
 800d284:	4603      	mov	r3, r0
 800d286:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 800d28a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800d28e:	2b00      	cmp	r3, #0
 800d290:	d109      	bne.n	800d2a6 <VL53L0X_set_reference_spads+0x9a>
		Status = VL53L0X_WrByte(Dev,
 800d292:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d296:	461a      	mov	r2, r3
 800d298:	21b6      	movs	r1, #182	; 0xb6
 800d29a:	68f8      	ldr	r0, [r7, #12]
 800d29c:	f002 fde4 	bl	800fe68 <VL53L0X_WrByte>
 800d2a0:	4603      	mov	r3, r0
 800d2a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
 800d2a6:	2300      	movs	r3, #0
 800d2a8:	627b      	str	r3, [r7, #36]	; 0x24
 800d2aa:	e009      	b.n	800d2c0 <VL53L0X_set_reference_spads+0xb4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800d2ac:	68fa      	ldr	r2, [r7, #12]
 800d2ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2b0:	4413      	add	r3, r2
 800d2b2:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800d2b6:	2200      	movs	r2, #0
 800d2b8:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 800d2ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2bc:	3301      	adds	r3, #1
 800d2be:	627b      	str	r3, [r7, #36]	; 0x24
 800d2c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d2c2:	69fb      	ldr	r3, [r7, #28]
 800d2c4:	429a      	cmp	r2, r3
 800d2c6:	d3f1      	bcc.n	800d2ac <VL53L0X_set_reference_spads+0xa0>

	if (isApertureSpads) {
 800d2c8:	79fb      	ldrb	r3, [r7, #7]
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d011      	beq.n	800d2f2 <VL53L0X_set_reference_spads+0xe6>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 800d2ce:	e002      	b.n	800d2d6 <VL53L0X_set_reference_spads+0xca>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 800d2d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2d2:	3301      	adds	r3, #1
 800d2d4:	62bb      	str	r3, [r7, #40]	; 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 800d2d6:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800d2da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2dc:	4413      	add	r3, r2
 800d2de:	4618      	mov	r0, r3
 800d2e0:	f7ff fc2a 	bl	800cb38 <is_aperture>
 800d2e4:	4603      	mov	r3, r0
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d103      	bne.n	800d2f2 <VL53L0X_set_reference_spads+0xe6>
 800d2ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d2ec:	69bb      	ldr	r3, [r7, #24]
 800d2ee:	429a      	cmp	r2, r3
 800d2f0:	d3ee      	bcc.n	800d2d0 <VL53L0X_set_reference_spads+0xc4>
		}
	}
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 800d2f2:	68fb      	ldr	r3, [r7, #12]
 800d2f4:	f503 7095 	add.w	r0, r3, #298	; 0x12a
				Dev->Data.SpadData.RefSpadEnables,
 800d2f8:	68fb      	ldr	r3, [r7, #12]
 800d2fa:	f503 7492 	add.w	r4, r3, #292	; 0x124
	Status = enable_ref_spads(Dev,
 800d2fe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d302:	79f9      	ldrb	r1, [r7, #7]
 800d304:	f107 0214 	add.w	r2, r7, #20
 800d308:	9204      	str	r2, [sp, #16]
 800d30a:	68ba      	ldr	r2, [r7, #8]
 800d30c:	9203      	str	r2, [sp, #12]
 800d30e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d310:	9202      	str	r2, [sp, #8]
 800d312:	9301      	str	r3, [sp, #4]
 800d314:	69fb      	ldr	r3, [r7, #28]
 800d316:	9300      	str	r3, [sp, #0]
 800d318:	4623      	mov	r3, r4
 800d31a:	4602      	mov	r2, r0
 800d31c:	68f8      	ldr	r0, [r7, #12]
 800d31e:	f7ff fc83 	bl	800cc28 <enable_ref_spads>
 800d322:	4603      	mov	r3, r0
 800d324:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 800d328:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	d10c      	bne.n	800d34a <VL53L0X_set_reference_spads+0x13e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 800d330:	68fb      	ldr	r3, [r7, #12]
 800d332:	2201      	movs	r2, #1
 800d334:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800d338:	68bb      	ldr	r3, [r7, #8]
 800d33a:	b2da      	uxtb	r2, r3
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800d342:	68fb      	ldr	r3, [r7, #12]
 800d344:	79fa      	ldrb	r2, [r7, #7]
 800d346:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
 800d34a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800d34e:	4618      	mov	r0, r3
 800d350:	3734      	adds	r7, #52	; 0x34
 800d352:	46bd      	mov	sp, r7
 800d354:	bd90      	pop	{r4, r7, pc}

0800d356 <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 800d356:	b580      	push	{r7, lr}
 800d358:	b084      	sub	sp, #16
 800d35a:	af00      	add	r7, sp, #0
 800d35c:	6078      	str	r0, [r7, #4]
 800d35e:	460b      	mov	r3, r1
 800d360:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d362:	2300      	movs	r3, #0
 800d364:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800d366:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	d10a      	bne.n	800d384 <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 800d36e:	78fb      	ldrb	r3, [r7, #3]
 800d370:	f043 0301 	orr.w	r3, r3, #1
 800d374:	b2db      	uxtb	r3, r3
 800d376:	461a      	mov	r2, r3
 800d378:	2100      	movs	r1, #0
 800d37a:	6878      	ldr	r0, [r7, #4]
 800d37c:	f002 fd74 	bl	800fe68 <VL53L0X_WrByte>
 800d380:	4603      	mov	r3, r0
 800d382:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 800d384:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d388:	2b00      	cmp	r3, #0
 800d38a:	d104      	bne.n	800d396 <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 800d38c:	6878      	ldr	r0, [r7, #4]
 800d38e:	f000 f9e2 	bl	800d756 <VL53L0X_measurement_poll_for_completion>
 800d392:	4603      	mov	r3, r0
 800d394:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800d396:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	d105      	bne.n	800d3aa <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800d39e:	2100      	movs	r1, #0
 800d3a0:	6878      	ldr	r0, [r7, #4]
 800d3a2:	f7ff fa6d 	bl	800c880 <VL53L0X_ClearInterruptMask>
 800d3a6:	4603      	mov	r3, r0
 800d3a8:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800d3aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d106      	bne.n	800d3c0 <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 800d3b2:	2200      	movs	r2, #0
 800d3b4:	2100      	movs	r1, #0
 800d3b6:	6878      	ldr	r0, [r7, #4]
 800d3b8:	f002 fd56 	bl	800fe68 <VL53L0X_WrByte>
 800d3bc:	4603      	mov	r3, r0
 800d3be:	73fb      	strb	r3, [r7, #15]

	return Status;
 800d3c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d3c4:	4618      	mov	r0, r3
 800d3c6:	3710      	adds	r7, #16
 800d3c8:	46bd      	mov	sp, r7
 800d3ca:	bd80      	pop	{r7, pc}

0800d3cc <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 800d3cc:	b580      	push	{r7, lr}
 800d3ce:	b084      	sub	sp, #16
 800d3d0:	af00      	add	r7, sp, #0
 800d3d2:	6078      	str	r0, [r7, #4]
 800d3d4:	4608      	mov	r0, r1
 800d3d6:	4611      	mov	r1, r2
 800d3d8:	461a      	mov	r2, r3
 800d3da:	4603      	mov	r3, r0
 800d3dc:	70fb      	strb	r3, [r7, #3]
 800d3de:	460b      	mov	r3, r1
 800d3e0:	70bb      	strb	r3, [r7, #2]
 800d3e2:	4613      	mov	r3, r2
 800d3e4:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d3e6:	2300      	movs	r3, #0
 800d3e8:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 800d3ea:	2300      	movs	r3, #0
 800d3ec:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800d3ee:	2201      	movs	r2, #1
 800d3f0:	21ff      	movs	r1, #255	; 0xff
 800d3f2:	6878      	ldr	r0, [r7, #4]
 800d3f4:	f002 fd38 	bl	800fe68 <VL53L0X_WrByte>
 800d3f8:	4603      	mov	r3, r0
 800d3fa:	461a      	mov	r2, r3
 800d3fc:	7bfb      	ldrb	r3, [r7, #15]
 800d3fe:	4313      	orrs	r3, r2
 800d400:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800d402:	2200      	movs	r2, #0
 800d404:	2100      	movs	r1, #0
 800d406:	6878      	ldr	r0, [r7, #4]
 800d408:	f002 fd2e 	bl	800fe68 <VL53L0X_WrByte>
 800d40c:	4603      	mov	r3, r0
 800d40e:	461a      	mov	r2, r3
 800d410:	7bfb      	ldrb	r3, [r7, #15]
 800d412:	4313      	orrs	r3, r2
 800d414:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800d416:	2200      	movs	r2, #0
 800d418:	21ff      	movs	r1, #255	; 0xff
 800d41a:	6878      	ldr	r0, [r7, #4]
 800d41c:	f002 fd24 	bl	800fe68 <VL53L0X_WrByte>
 800d420:	4603      	mov	r3, r0
 800d422:	461a      	mov	r2, r3
 800d424:	7bfb      	ldrb	r3, [r7, #15]
 800d426:	4313      	orrs	r3, r2
 800d428:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 800d42a:	78fb      	ldrb	r3, [r7, #3]
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d01e      	beq.n	800d46e <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 800d430:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d434:	2b00      	cmp	r3, #0
 800d436:	d009      	beq.n	800d44c <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 800d438:	69ba      	ldr	r2, [r7, #24]
 800d43a:	21cb      	movs	r1, #203	; 0xcb
 800d43c:	6878      	ldr	r0, [r7, #4]
 800d43e:	f002 fd95 	bl	800ff6c <VL53L0X_RdByte>
 800d442:	4603      	mov	r3, r0
 800d444:	461a      	mov	r2, r3
 800d446:	7bfb      	ldrb	r3, [r7, #15]
 800d448:	4313      	orrs	r3, r2
 800d44a:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 800d44c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d450:	2b00      	cmp	r3, #0
 800d452:	d02a      	beq.n	800d4aa <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 800d454:	f107 030e 	add.w	r3, r7, #14
 800d458:	461a      	mov	r2, r3
 800d45a:	21ee      	movs	r1, #238	; 0xee
 800d45c:	6878      	ldr	r0, [r7, #4]
 800d45e:	f002 fd85 	bl	800ff6c <VL53L0X_RdByte>
 800d462:	4603      	mov	r3, r0
 800d464:	461a      	mov	r2, r3
 800d466:	7bfb      	ldrb	r3, [r7, #15]
 800d468:	4313      	orrs	r3, r2
 800d46a:	73fb      	strb	r3, [r7, #15]
 800d46c:	e01d      	b.n	800d4aa <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 800d46e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d472:	2b00      	cmp	r3, #0
 800d474:	d00a      	beq.n	800d48c <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 800d476:	78bb      	ldrb	r3, [r7, #2]
 800d478:	461a      	mov	r2, r3
 800d47a:	21cb      	movs	r1, #203	; 0xcb
 800d47c:	6878      	ldr	r0, [r7, #4]
 800d47e:	f002 fcf3 	bl	800fe68 <VL53L0X_WrByte>
 800d482:	4603      	mov	r3, r0
 800d484:	461a      	mov	r2, r3
 800d486:	7bfb      	ldrb	r3, [r7, #15]
 800d488:	4313      	orrs	r3, r2
 800d48a:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 800d48c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d490:	2b00      	cmp	r3, #0
 800d492:	d00a      	beq.n	800d4aa <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 800d494:	787b      	ldrb	r3, [r7, #1]
 800d496:	2280      	movs	r2, #128	; 0x80
 800d498:	21ee      	movs	r1, #238	; 0xee
 800d49a:	6878      	ldr	r0, [r7, #4]
 800d49c:	f002 fd32 	bl	800ff04 <VL53L0X_UpdateByte>
 800d4a0:	4603      	mov	r3, r0
 800d4a2:	461a      	mov	r2, r3
 800d4a4:	7bfb      	ldrb	r3, [r7, #15]
 800d4a6:	4313      	orrs	r3, r2
 800d4a8:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800d4aa:	2201      	movs	r2, #1
 800d4ac:	21ff      	movs	r1, #255	; 0xff
 800d4ae:	6878      	ldr	r0, [r7, #4]
 800d4b0:	f002 fcda 	bl	800fe68 <VL53L0X_WrByte>
 800d4b4:	4603      	mov	r3, r0
 800d4b6:	461a      	mov	r2, r3
 800d4b8:	7bfb      	ldrb	r3, [r7, #15]
 800d4ba:	4313      	orrs	r3, r2
 800d4bc:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800d4be:	2201      	movs	r2, #1
 800d4c0:	2100      	movs	r1, #0
 800d4c2:	6878      	ldr	r0, [r7, #4]
 800d4c4:	f002 fcd0 	bl	800fe68 <VL53L0X_WrByte>
 800d4c8:	4603      	mov	r3, r0
 800d4ca:	461a      	mov	r2, r3
 800d4cc:	7bfb      	ldrb	r3, [r7, #15]
 800d4ce:	4313      	orrs	r3, r2
 800d4d0:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800d4d2:	2200      	movs	r2, #0
 800d4d4:	21ff      	movs	r1, #255	; 0xff
 800d4d6:	6878      	ldr	r0, [r7, #4]
 800d4d8:	f002 fcc6 	bl	800fe68 <VL53L0X_WrByte>
 800d4dc:	4603      	mov	r3, r0
 800d4de:	461a      	mov	r2, r3
 800d4e0:	7bfb      	ldrb	r3, [r7, #15]
 800d4e2:	4313      	orrs	r3, r2
 800d4e4:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 800d4e6:	7bbb      	ldrb	r3, [r7, #14]
 800d4e8:	f023 0310 	bic.w	r3, r3, #16
 800d4ec:	b2da      	uxtb	r2, r3
 800d4ee:	69fb      	ldr	r3, [r7, #28]
 800d4f0:	701a      	strb	r2, [r3, #0]

	return Status;
 800d4f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d4f6:	4618      	mov	r0, r3
 800d4f8:	3710      	adds	r7, #16
 800d4fa:	46bd      	mov	sp, r7
 800d4fc:	bd80      	pop	{r7, pc}

0800d4fe <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 800d4fe:	b580      	push	{r7, lr}
 800d500:	b08a      	sub	sp, #40	; 0x28
 800d502:	af04      	add	r7, sp, #16
 800d504:	60f8      	str	r0, [r7, #12]
 800d506:	60b9      	str	r1, [r7, #8]
 800d508:	4611      	mov	r1, r2
 800d50a:	461a      	mov	r2, r3
 800d50c:	460b      	mov	r3, r1
 800d50e:	71fb      	strb	r3, [r7, #7]
 800d510:	4613      	mov	r3, r2
 800d512:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d514:	2300      	movs	r3, #0
 800d516:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800d518:	2300      	movs	r3, #0
 800d51a:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 800d51c:	2300      	movs	r3, #0
 800d51e:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 800d520:	2300      	movs	r3, #0
 800d522:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 800d524:	2300      	movs	r3, #0
 800d526:	74fb      	strb	r3, [r7, #19]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 800d528:	79bb      	ldrb	r3, [r7, #6]
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	d003      	beq.n	800d536 <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800d52e:	68fb      	ldr	r3, [r7, #12]
 800d530:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800d534:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 800d536:	2201      	movs	r2, #1
 800d538:	2101      	movs	r1, #1
 800d53a:	68f8      	ldr	r0, [r7, #12]
 800d53c:	f002 fc94 	bl	800fe68 <VL53L0X_WrByte>
 800d540:	4603      	mov	r3, r0
 800d542:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 800d544:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d105      	bne.n	800d558 <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 800d54c:	2140      	movs	r1, #64	; 0x40
 800d54e:	68f8      	ldr	r0, [r7, #12]
 800d550:	f7ff ff01 	bl	800d356 <VL53L0X_perform_single_ref_calibration>
 800d554:	4603      	mov	r3, r0
 800d556:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 800d558:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	d115      	bne.n	800d58c <VL53L0X_perform_vhv_calibration+0x8e>
 800d560:	79fb      	ldrb	r3, [r7, #7]
 800d562:	2b01      	cmp	r3, #1
 800d564:	d112      	bne.n	800d58c <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 800d566:	7d39      	ldrb	r1, [r7, #20]
 800d568:	7d7a      	ldrb	r2, [r7, #21]
 800d56a:	2300      	movs	r3, #0
 800d56c:	9303      	str	r3, [sp, #12]
 800d56e:	2301      	movs	r3, #1
 800d570:	9302      	str	r3, [sp, #8]
 800d572:	f107 0313 	add.w	r3, r7, #19
 800d576:	9301      	str	r3, [sp, #4]
 800d578:	68bb      	ldr	r3, [r7, #8]
 800d57a:	9300      	str	r3, [sp, #0]
 800d57c:	460b      	mov	r3, r1
 800d57e:	2101      	movs	r1, #1
 800d580:	68f8      	ldr	r0, [r7, #12]
 800d582:	f7ff ff23 	bl	800d3cc <VL53L0X_ref_calibration_io>
 800d586:	4603      	mov	r3, r0
 800d588:	75fb      	strb	r3, [r7, #23]
 800d58a:	e002      	b.n	800d592 <VL53L0X_perform_vhv_calibration+0x94>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 800d58c:	68bb      	ldr	r3, [r7, #8]
 800d58e:	2200      	movs	r2, #0
 800d590:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 800d592:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d596:	2b00      	cmp	r3, #0
 800d598:	d112      	bne.n	800d5c0 <VL53L0X_perform_vhv_calibration+0xc2>
 800d59a:	79bb      	ldrb	r3, [r7, #6]
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d00f      	beq.n	800d5c0 <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800d5a0:	7dbb      	ldrb	r3, [r7, #22]
 800d5a2:	461a      	mov	r2, r3
 800d5a4:	2101      	movs	r1, #1
 800d5a6:	68f8      	ldr	r0, [r7, #12]
 800d5a8:	f002 fc5e 	bl	800fe68 <VL53L0X_WrByte>
 800d5ac:	4603      	mov	r3, r0
 800d5ae:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800d5b0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d103      	bne.n	800d5c0 <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800d5b8:	68fb      	ldr	r3, [r7, #12]
 800d5ba:	7dba      	ldrb	r2, [r7, #22]
 800d5bc:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 800d5c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d5c4:	4618      	mov	r0, r3
 800d5c6:	3718      	adds	r7, #24
 800d5c8:	46bd      	mov	sp, r7
 800d5ca:	bd80      	pop	{r7, pc}

0800d5cc <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 800d5cc:	b580      	push	{r7, lr}
 800d5ce:	b08a      	sub	sp, #40	; 0x28
 800d5d0:	af04      	add	r7, sp, #16
 800d5d2:	60f8      	str	r0, [r7, #12]
 800d5d4:	60b9      	str	r1, [r7, #8]
 800d5d6:	4611      	mov	r1, r2
 800d5d8:	461a      	mov	r2, r3
 800d5da:	460b      	mov	r3, r1
 800d5dc:	71fb      	strb	r3, [r7, #7]
 800d5de:	4613      	mov	r3, r2
 800d5e0:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d5e2:	2300      	movs	r3, #0
 800d5e4:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800d5e6:	2300      	movs	r3, #0
 800d5e8:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 800d5ea:	2300      	movs	r3, #0
 800d5ec:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 800d5ee:	2300      	movs	r3, #0
 800d5f0:	753b      	strb	r3, [r7, #20]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 800d5f2:	79bb      	ldrb	r3, [r7, #6]
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	d003      	beq.n	800d600 <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800d5f8:	68fb      	ldr	r3, [r7, #12]
 800d5fa:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800d5fe:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 800d600:	2202      	movs	r2, #2
 800d602:	2101      	movs	r1, #1
 800d604:	68f8      	ldr	r0, [r7, #12]
 800d606:	f002 fc2f 	bl	800fe68 <VL53L0X_WrByte>
 800d60a:	4603      	mov	r3, r0
 800d60c:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 800d60e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d612:	2b00      	cmp	r3, #0
 800d614:	d105      	bne.n	800d622 <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 800d616:	2100      	movs	r1, #0
 800d618:	68f8      	ldr	r0, [r7, #12]
 800d61a:	f7ff fe9c 	bl	800d356 <VL53L0X_perform_single_ref_calibration>
 800d61e:	4603      	mov	r3, r0
 800d620:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 800d622:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d626:	2b00      	cmp	r3, #0
 800d628:	d115      	bne.n	800d656 <VL53L0X_perform_phase_calibration+0x8a>
 800d62a:	79fb      	ldrb	r3, [r7, #7]
 800d62c:	2b01      	cmp	r3, #1
 800d62e:	d112      	bne.n	800d656 <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 800d630:	7d39      	ldrb	r1, [r7, #20]
 800d632:	7d7a      	ldrb	r2, [r7, #21]
 800d634:	2301      	movs	r3, #1
 800d636:	9303      	str	r3, [sp, #12]
 800d638:	2300      	movs	r3, #0
 800d63a:	9302      	str	r3, [sp, #8]
 800d63c:	68bb      	ldr	r3, [r7, #8]
 800d63e:	9301      	str	r3, [sp, #4]
 800d640:	f107 0313 	add.w	r3, r7, #19
 800d644:	9300      	str	r3, [sp, #0]
 800d646:	460b      	mov	r3, r1
 800d648:	2101      	movs	r1, #1
 800d64a:	68f8      	ldr	r0, [r7, #12]
 800d64c:	f7ff febe 	bl	800d3cc <VL53L0X_ref_calibration_io>
 800d650:	4603      	mov	r3, r0
 800d652:	75fb      	strb	r3, [r7, #23]
 800d654:	e002      	b.n	800d65c <VL53L0X_perform_phase_calibration+0x90>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 800d656:	68bb      	ldr	r3, [r7, #8]
 800d658:	2200      	movs	r2, #0
 800d65a:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 800d65c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d660:	2b00      	cmp	r3, #0
 800d662:	d112      	bne.n	800d68a <VL53L0X_perform_phase_calibration+0xbe>
 800d664:	79bb      	ldrb	r3, [r7, #6]
 800d666:	2b00      	cmp	r3, #0
 800d668:	d00f      	beq.n	800d68a <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800d66a:	7dbb      	ldrb	r3, [r7, #22]
 800d66c:	461a      	mov	r2, r3
 800d66e:	2101      	movs	r1, #1
 800d670:	68f8      	ldr	r0, [r7, #12]
 800d672:	f002 fbf9 	bl	800fe68 <VL53L0X_WrByte>
 800d676:	4603      	mov	r3, r0
 800d678:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800d67a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d103      	bne.n	800d68a <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800d682:	68fb      	ldr	r3, [r7, #12]
 800d684:	7dba      	ldrb	r2, [r7, #22]
 800d686:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 800d68a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d68e:	4618      	mov	r0, r3
 800d690:	3718      	adds	r7, #24
 800d692:	46bd      	mov	sp, r7
 800d694:	bd80      	pop	{r7, pc}

0800d696 <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 800d696:	b580      	push	{r7, lr}
 800d698:	b086      	sub	sp, #24
 800d69a:	af00      	add	r7, sp, #0
 800d69c:	60f8      	str	r0, [r7, #12]
 800d69e:	60b9      	str	r1, [r7, #8]
 800d6a0:	607a      	str	r2, [r7, #4]
 800d6a2:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d6a4:	2300      	movs	r3, #0
 800d6a6:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800d6a8:	2300      	movs	r3, #0
 800d6aa:	75bb      	strb	r3, [r7, #22]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800d6ac:	68fb      	ldr	r3, [r7, #12]
 800d6ae:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800d6b2:	75bb      	strb	r3, [r7, #22]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 800d6b4:	78fa      	ldrb	r2, [r7, #3]
 800d6b6:	2300      	movs	r3, #0
 800d6b8:	68b9      	ldr	r1, [r7, #8]
 800d6ba:	68f8      	ldr	r0, [r7, #12]
 800d6bc:	f7ff ff1f 	bl	800d4fe <VL53L0X_perform_vhv_calibration>
 800d6c0:	4603      	mov	r3, r0
 800d6c2:	75fb      	strb	r3, [r7, #23]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 800d6c4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d107      	bne.n	800d6dc <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 800d6cc:	78fa      	ldrb	r2, [r7, #3]
 800d6ce:	2300      	movs	r3, #0
 800d6d0:	6879      	ldr	r1, [r7, #4]
 800d6d2:	68f8      	ldr	r0, [r7, #12]
 800d6d4:	f7ff ff7a 	bl	800d5cc <VL53L0X_perform_phase_calibration>
 800d6d8:	4603      	mov	r3, r0
 800d6da:	75fb      	strb	r3, [r7, #23]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 800d6dc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d10f      	bne.n	800d704 <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800d6e4:	7dbb      	ldrb	r3, [r7, #22]
 800d6e6:	461a      	mov	r2, r3
 800d6e8:	2101      	movs	r1, #1
 800d6ea:	68f8      	ldr	r0, [r7, #12]
 800d6ec:	f002 fbbc 	bl	800fe68 <VL53L0X_WrByte>
 800d6f0:	4603      	mov	r3, r0
 800d6f2:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800d6f4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d6f8:	2b00      	cmp	r3, #0
 800d6fa:	d103      	bne.n	800d704 <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800d6fc:	68fb      	ldr	r3, [r7, #12]
 800d6fe:	7dba      	ldrb	r2, [r7, #22]
 800d700:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 800d704:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d708:	4618      	mov	r0, r3
 800d70a:	3718      	adds	r7, #24
 800d70c:	46bd      	mov	sp, r7
 800d70e:	bd80      	pop	{r7, pc}

0800d710 <VL53L0X_set_ref_calibration>:

VL53L0X_Error VL53L0X_set_ref_calibration(VL53L0X_DEV Dev,
		uint8_t VhvSettings, uint8_t PhaseCal)
{
 800d710:	b580      	push	{r7, lr}
 800d712:	b088      	sub	sp, #32
 800d714:	af04      	add	r7, sp, #16
 800d716:	6078      	str	r0, [r7, #4]
 800d718:	460b      	mov	r3, r1
 800d71a:	70fb      	strb	r3, [r7, #3]
 800d71c:	4613      	mov	r3, r2
 800d71e:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d720:	2300      	movs	r3, #0
 800d722:	73fb      	strb	r3, [r7, #15]
	uint8_t pVhvSettings;
	uint8_t pPhaseCal;

	Status = VL53L0X_ref_calibration_io(Dev, 0,
 800d724:	78b9      	ldrb	r1, [r7, #2]
 800d726:	78fa      	ldrb	r2, [r7, #3]
 800d728:	2301      	movs	r3, #1
 800d72a:	9303      	str	r3, [sp, #12]
 800d72c:	2301      	movs	r3, #1
 800d72e:	9302      	str	r3, [sp, #8]
 800d730:	f107 030d 	add.w	r3, r7, #13
 800d734:	9301      	str	r3, [sp, #4]
 800d736:	f107 030e 	add.w	r3, r7, #14
 800d73a:	9300      	str	r3, [sp, #0]
 800d73c:	460b      	mov	r3, r1
 800d73e:	2100      	movs	r1, #0
 800d740:	6878      	ldr	r0, [r7, #4]
 800d742:	f7ff fe43 	bl	800d3cc <VL53L0X_ref_calibration_io>
 800d746:	4603      	mov	r3, r0
 800d748:	73fb      	strb	r3, [r7, #15]
		VhvSettings, PhaseCal,
		&pVhvSettings, &pPhaseCal,
		1, 1);

	return Status;
 800d74a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d74e:	4618      	mov	r0, r3
 800d750:	3710      	adds	r7, #16
 800d752:	46bd      	mov	sp, r7
 800d754:	bd80      	pop	{r7, pc}

0800d756 <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 800d756:	b580      	push	{r7, lr}
 800d758:	b086      	sub	sp, #24
 800d75a:	af00      	add	r7, sp, #0
 800d75c:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d75e:	2300      	movs	r3, #0
 800d760:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 800d762:	2300      	movs	r3, #0
 800d764:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	LoopNb = 0;
 800d766:	2300      	movs	r3, #0
 800d768:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 800d76a:	f107 030f 	add.w	r3, r7, #15
 800d76e:	4619      	mov	r1, r3
 800d770:	6878      	ldr	r0, [r7, #4]
 800d772:	f7fe fd97 	bl	800c2a4 <VL53L0X_GetMeasurementDataReady>
 800d776:	4603      	mov	r3, r0
 800d778:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 800d77a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d77e:	2b00      	cmp	r3, #0
 800d780:	d110      	bne.n	800d7a4 <VL53L0X_measurement_poll_for_completion+0x4e>
			break; /* the error is set */

		if (NewDataReady == 1)
 800d782:	7bfb      	ldrb	r3, [r7, #15]
 800d784:	2b01      	cmp	r3, #1
 800d786:	d00f      	beq.n	800d7a8 <VL53L0X_measurement_poll_for_completion+0x52>
			break; /* done note that status == 0 */

		LoopNb++;
 800d788:	693b      	ldr	r3, [r7, #16]
 800d78a:	3301      	adds	r3, #1
 800d78c:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 800d78e:	693b      	ldr	r3, [r7, #16]
 800d790:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800d794:	d302      	bcc.n	800d79c <VL53L0X_measurement_poll_for_completion+0x46>
			Status = VL53L0X_ERROR_TIME_OUT;
 800d796:	23f9      	movs	r3, #249	; 0xf9
 800d798:	75fb      	strb	r3, [r7, #23]
			break;
 800d79a:	e006      	b.n	800d7aa <VL53L0X_measurement_poll_for_completion+0x54>
		}

		VL53L0X_PollingDelay(Dev);
 800d79c:	6878      	ldr	r0, [r7, #4]
 800d79e:	f002 fc83 	bl	80100a8 <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 800d7a2:	e7e2      	b.n	800d76a <VL53L0X_measurement_poll_for_completion+0x14>
			break; /* the error is set */
 800d7a4:	bf00      	nop
 800d7a6:	e000      	b.n	800d7aa <VL53L0X_measurement_poll_for_completion+0x54>
			break; /* done note that status == 0 */
 800d7a8:	bf00      	nop
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
 800d7aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d7ae:	4618      	mov	r0, r3
 800d7b0:	3718      	adds	r7, #24
 800d7b2:	46bd      	mov	sp, r7
 800d7b4:	bd80      	pop	{r7, pc}

0800d7b6 <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 800d7b6:	b480      	push	{r7}
 800d7b8:	b085      	sub	sp, #20
 800d7ba:	af00      	add	r7, sp, #0
 800d7bc:	4603      	mov	r3, r0
 800d7be:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 800d7c0:	2300      	movs	r3, #0
 800d7c2:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 800d7c4:	79fb      	ldrb	r3, [r7, #7]
 800d7c6:	3301      	adds	r3, #1
 800d7c8:	b2db      	uxtb	r3, r3
 800d7ca:	005b      	lsls	r3, r3, #1
 800d7cc:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 800d7ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800d7d0:	4618      	mov	r0, r3
 800d7d2:	3714      	adds	r7, #20
 800d7d4:	46bd      	mov	sp, r7
 800d7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7da:	4770      	bx	lr

0800d7dc <VL53L0X_encode_vcsel_period>:

uint8_t VL53L0X_encode_vcsel_period(uint8_t vcsel_period_pclks)
{
 800d7dc:	b480      	push	{r7}
 800d7de:	b085      	sub	sp, #20
 800d7e0:	af00      	add	r7, sp, #0
 800d7e2:	4603      	mov	r3, r0
 800d7e4:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real period
	 * in PLL clocks
	 */

	uint8_t vcsel_period_reg = 0;
 800d7e6:	2300      	movs	r3, #0
 800d7e8:	73fb      	strb	r3, [r7, #15]

	vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;
 800d7ea:	79fb      	ldrb	r3, [r7, #7]
 800d7ec:	085b      	lsrs	r3, r3, #1
 800d7ee:	b2db      	uxtb	r3, r3
 800d7f0:	3b01      	subs	r3, #1
 800d7f2:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_reg;
 800d7f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d7f6:	4618      	mov	r0, r3
 800d7f8:	3714      	adds	r7, #20
 800d7fa:	46bd      	mov	sp, r7
 800d7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d800:	4770      	bx	lr

0800d802 <VL53L0X_isqrt>:


uint32_t VL53L0X_isqrt(uint32_t num)
{
 800d802:	b480      	push	{r7}
 800d804:	b085      	sub	sp, #20
 800d806:	af00      	add	r7, sp, #0
 800d808:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 800d80a:	2300      	movs	r3, #0
 800d80c:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 800d80e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d812:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 800d814:	e002      	b.n	800d81c <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 800d816:	68bb      	ldr	r3, [r7, #8]
 800d818:	089b      	lsrs	r3, r3, #2
 800d81a:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 800d81c:	68ba      	ldr	r2, [r7, #8]
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	429a      	cmp	r2, r3
 800d822:	d8f8      	bhi.n	800d816 <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 800d824:	e017      	b.n	800d856 <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 800d826:	68fa      	ldr	r2, [r7, #12]
 800d828:	68bb      	ldr	r3, [r7, #8]
 800d82a:	4413      	add	r3, r2
 800d82c:	687a      	ldr	r2, [r7, #4]
 800d82e:	429a      	cmp	r2, r3
 800d830:	d30b      	bcc.n	800d84a <VL53L0X_isqrt+0x48>
			num -= res + bit;
 800d832:	68fa      	ldr	r2, [r7, #12]
 800d834:	68bb      	ldr	r3, [r7, #8]
 800d836:	4413      	add	r3, r2
 800d838:	687a      	ldr	r2, [r7, #4]
 800d83a:	1ad3      	subs	r3, r2, r3
 800d83c:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 800d83e:	68fb      	ldr	r3, [r7, #12]
 800d840:	085b      	lsrs	r3, r3, #1
 800d842:	68ba      	ldr	r2, [r7, #8]
 800d844:	4413      	add	r3, r2
 800d846:	60fb      	str	r3, [r7, #12]
 800d848:	e002      	b.n	800d850 <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 800d84a:	68fb      	ldr	r3, [r7, #12]
 800d84c:	085b      	lsrs	r3, r3, #1
 800d84e:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 800d850:	68bb      	ldr	r3, [r7, #8]
 800d852:	089b      	lsrs	r3, r3, #2
 800d854:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 800d856:	68bb      	ldr	r3, [r7, #8]
 800d858:	2b00      	cmp	r3, #0
 800d85a:	d1e4      	bne.n	800d826 <VL53L0X_isqrt+0x24>
	}

	return res;
 800d85c:	68fb      	ldr	r3, [r7, #12]
}
 800d85e:	4618      	mov	r0, r3
 800d860:	3714      	adds	r7, #20
 800d862:	46bd      	mov	sp, r7
 800d864:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d868:	4770      	bx	lr

0800d86a <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 800d86a:	b580      	push	{r7, lr}
 800d86c:	b086      	sub	sp, #24
 800d86e:	af00      	add	r7, sp, #0
 800d870:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d872:	2300      	movs	r3, #0
 800d874:	75fb      	strb	r3, [r7, #23]
	uint8_t strobe;
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 800d876:	2200      	movs	r2, #0
 800d878:	2183      	movs	r1, #131	; 0x83
 800d87a:	6878      	ldr	r0, [r7, #4]
 800d87c:	f002 faf4 	bl	800fe68 <VL53L0X_WrByte>
 800d880:	4603      	mov	r3, r0
 800d882:	461a      	mov	r2, r3
 800d884:	7dfb      	ldrb	r3, [r7, #23]
 800d886:	4313      	orrs	r3, r2
 800d888:	75fb      	strb	r3, [r7, #23]

	/* polling
	 * use timeout to avoid deadlock*/
	if (Status == VL53L0X_ERROR_NONE) {
 800d88a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d88e:	2b00      	cmp	r3, #0
 800d890:	d11e      	bne.n	800d8d0 <VL53L0X_device_read_strobe+0x66>
		LoopNb = 0;
 800d892:	2300      	movs	r3, #0
 800d894:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 800d896:	f107 030f 	add.w	r3, r7, #15
 800d89a:	461a      	mov	r2, r3
 800d89c:	2183      	movs	r1, #131	; 0x83
 800d89e:	6878      	ldr	r0, [r7, #4]
 800d8a0:	f002 fb64 	bl	800ff6c <VL53L0X_RdByte>
 800d8a4:	4603      	mov	r3, r0
 800d8a6:	75fb      	strb	r3, [r7, #23]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 800d8a8:	7bfb      	ldrb	r3, [r7, #15]
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d10a      	bne.n	800d8c4 <VL53L0X_device_read_strobe+0x5a>
 800d8ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	d106      	bne.n	800d8c4 <VL53L0X_device_read_strobe+0x5a>
					break;

			LoopNb = LoopNb + 1;
 800d8b6:	693b      	ldr	r3, [r7, #16]
 800d8b8:	3301      	adds	r3, #1
 800d8ba:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 800d8bc:	693b      	ldr	r3, [r7, #16]
 800d8be:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800d8c2:	d3e8      	bcc.n	800d896 <VL53L0X_device_read_strobe+0x2c>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 800d8c4:	693b      	ldr	r3, [r7, #16]
 800d8c6:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800d8ca:	d301      	bcc.n	800d8d0 <VL53L0X_device_read_strobe+0x66>
			Status = VL53L0X_ERROR_TIME_OUT;
 800d8cc:	23f9      	movs	r3, #249	; 0xf9
 800d8ce:	75fb      	strb	r3, [r7, #23]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 800d8d0:	2201      	movs	r2, #1
 800d8d2:	2183      	movs	r1, #131	; 0x83
 800d8d4:	6878      	ldr	r0, [r7, #4]
 800d8d6:	f002 fac7 	bl	800fe68 <VL53L0X_WrByte>
 800d8da:	4603      	mov	r3, r0
 800d8dc:	461a      	mov	r2, r3
 800d8de:	7dfb      	ldrb	r3, [r7, #23]
 800d8e0:	4313      	orrs	r3, r2
 800d8e2:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
	return Status;
 800d8e4:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 800d8e8:	4618      	mov	r0, r3
 800d8ea:	3718      	adds	r7, #24
 800d8ec:	46bd      	mov	sp, r7
 800d8ee:	bd80      	pop	{r7, pc}

0800d8f0 <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 800d8f0:	b580      	push	{r7, lr}
 800d8f2:	b098      	sub	sp, #96	; 0x60
 800d8f4:	af00      	add	r7, sp, #0
 800d8f6:	6078      	str	r0, [r7, #4]
 800d8f8:	460b      	mov	r3, r1
 800d8fa:	70fb      	strb	r3, [r7, #3]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d8fc:	2300      	movs	r3, #0
 800d8fe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 800d902:	2300      	movs	r3, #0
 800d904:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t ReferenceSpadType = 0;
 800d908:	2300      	movs	r3, #0
 800d90a:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	uint32_t PartUIDUpper = 0;
 800d90e:	2300      	movs	r3, #0
 800d910:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PartUIDLower = 0;
 800d912:	2300      	movs	r3, #0
 800d914:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t OffsetFixed1104_mm = 0;
 800d916:	2300      	movs	r3, #0
 800d918:	64bb      	str	r3, [r7, #72]	; 0x48
	int16_t OffsetMicroMeters = 0;
 800d91a:	2300      	movs	r3, #0
 800d91c:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 800d920:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800d924:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 800d926:	2300      	movs	r3, #0
 800d928:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 800d92a:	2300      	movs	r3, #0
 800d92c:	653b      	str	r3, [r7, #80]	; 0x50
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 800d92e:	2300      	movs	r3, #0
 800d930:	643b      	str	r3, [r7, #64]	; 0x40
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800d938:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done*/
	if (ReadDataFromDeviceDone != 7) {
 800d93c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d940:	2b07      	cmp	r3, #7
 800d942:	f000 8408 	beq.w	800e156 <VL53L0X_get_info_from_device+0x866>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800d946:	2201      	movs	r2, #1
 800d948:	2180      	movs	r1, #128	; 0x80
 800d94a:	6878      	ldr	r0, [r7, #4]
 800d94c:	f002 fa8c 	bl	800fe68 <VL53L0X_WrByte>
 800d950:	4603      	mov	r3, r0
 800d952:	461a      	mov	r2, r3
 800d954:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d958:	4313      	orrs	r3, r2
 800d95a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800d95e:	2201      	movs	r2, #1
 800d960:	21ff      	movs	r1, #255	; 0xff
 800d962:	6878      	ldr	r0, [r7, #4]
 800d964:	f002 fa80 	bl	800fe68 <VL53L0X_WrByte>
 800d968:	4603      	mov	r3, r0
 800d96a:	461a      	mov	r2, r3
 800d96c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d970:	4313      	orrs	r3, r2
 800d972:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800d976:	2200      	movs	r2, #0
 800d978:	2100      	movs	r1, #0
 800d97a:	6878      	ldr	r0, [r7, #4]
 800d97c:	f002 fa74 	bl	800fe68 <VL53L0X_WrByte>
 800d980:	4603      	mov	r3, r0
 800d982:	461a      	mov	r2, r3
 800d984:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d988:	4313      	orrs	r3, r2
 800d98a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 800d98e:	2206      	movs	r2, #6
 800d990:	21ff      	movs	r1, #255	; 0xff
 800d992:	6878      	ldr	r0, [r7, #4]
 800d994:	f002 fa68 	bl	800fe68 <VL53L0X_WrByte>
 800d998:	4603      	mov	r3, r0
 800d99a:	461a      	mov	r2, r3
 800d99c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d9a0:	4313      	orrs	r3, r2
 800d9a2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 800d9a6:	f107 0337 	add.w	r3, r7, #55	; 0x37
 800d9aa:	461a      	mov	r2, r3
 800d9ac:	2183      	movs	r1, #131	; 0x83
 800d9ae:	6878      	ldr	r0, [r7, #4]
 800d9b0:	f002 fadc 	bl	800ff6c <VL53L0X_RdByte>
 800d9b4:	4603      	mov	r3, r0
 800d9b6:	461a      	mov	r2, r3
 800d9b8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d9bc:	4313      	orrs	r3, r2
 800d9be:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 800d9c2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d9c6:	f043 0304 	orr.w	r3, r3, #4
 800d9ca:	b2db      	uxtb	r3, r3
 800d9cc:	461a      	mov	r2, r3
 800d9ce:	2183      	movs	r1, #131	; 0x83
 800d9d0:	6878      	ldr	r0, [r7, #4]
 800d9d2:	f002 fa49 	bl	800fe68 <VL53L0X_WrByte>
 800d9d6:	4603      	mov	r3, r0
 800d9d8:	461a      	mov	r2, r3
 800d9da:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d9de:	4313      	orrs	r3, r2
 800d9e0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 800d9e4:	2207      	movs	r2, #7
 800d9e6:	21ff      	movs	r1, #255	; 0xff
 800d9e8:	6878      	ldr	r0, [r7, #4]
 800d9ea:	f002 fa3d 	bl	800fe68 <VL53L0X_WrByte>
 800d9ee:	4603      	mov	r3, r0
 800d9f0:	461a      	mov	r2, r3
 800d9f2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d9f6:	4313      	orrs	r3, r2
 800d9f8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 800d9fc:	2201      	movs	r2, #1
 800d9fe:	2181      	movs	r1, #129	; 0x81
 800da00:	6878      	ldr	r0, [r7, #4]
 800da02:	f002 fa31 	bl	800fe68 <VL53L0X_WrByte>
 800da06:	4603      	mov	r3, r0
 800da08:	461a      	mov	r2, r3
 800da0a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800da0e:	4313      	orrs	r3, r2
 800da10:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_PollingDelay(Dev);
 800da14:	6878      	ldr	r0, [r7, #4]
 800da16:	f002 fb47 	bl	80100a8 <VL53L0X_PollingDelay>
 800da1a:	4603      	mov	r3, r0
 800da1c:	461a      	mov	r2, r3
 800da1e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800da22:	4313      	orrs	r3, r2
 800da24:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800da28:	2201      	movs	r2, #1
 800da2a:	2180      	movs	r1, #128	; 0x80
 800da2c:	6878      	ldr	r0, [r7, #4]
 800da2e:	f002 fa1b 	bl	800fe68 <VL53L0X_WrByte>
 800da32:	4603      	mov	r3, r0
 800da34:	461a      	mov	r2, r3
 800da36:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800da3a:	4313      	orrs	r3, r2
 800da3c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		if (((option & 1) == 1) &&
 800da40:	78fb      	ldrb	r3, [r7, #3]
 800da42:	f003 0301 	and.w	r3, r3, #1
 800da46:	2b00      	cmp	r3, #0
 800da48:	f000 8098 	beq.w	800db7c <VL53L0X_get_info_from_device+0x28c>
			((ReadDataFromDeviceDone & 1) == 0)) {
 800da4c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800da50:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 800da54:	2b00      	cmp	r3, #0
 800da56:	f040 8091 	bne.w	800db7c <VL53L0X_get_info_from_device+0x28c>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 800da5a:	226b      	movs	r2, #107	; 0x6b
 800da5c:	2194      	movs	r1, #148	; 0x94
 800da5e:	6878      	ldr	r0, [r7, #4]
 800da60:	f002 fa02 	bl	800fe68 <VL53L0X_WrByte>
 800da64:	4603      	mov	r3, r0
 800da66:	461a      	mov	r2, r3
 800da68:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800da6c:	4313      	orrs	r3, r2
 800da6e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800da72:	6878      	ldr	r0, [r7, #4]
 800da74:	f7ff fef9 	bl	800d86a <VL53L0X_device_read_strobe>
 800da78:	4603      	mov	r3, r0
 800da7a:	461a      	mov	r2, r3
 800da7c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800da80:	4313      	orrs	r3, r2
 800da82:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800da86:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800da8a:	461a      	mov	r2, r3
 800da8c:	2190      	movs	r1, #144	; 0x90
 800da8e:	6878      	ldr	r0, [r7, #4]
 800da90:	f002 face 	bl	8010030 <VL53L0X_RdDWord>
 800da94:	4603      	mov	r3, r0
 800da96:	461a      	mov	r2, r3
 800da98:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800da9c:	4313      	orrs	r3, r2
 800da9e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 800daa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800daa4:	0a1b      	lsrs	r3, r3, #8
 800daa6:	b2db      	uxtb	r3, r3
 800daa8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800daac:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 800dab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dab2:	0bdb      	lsrs	r3, r3, #15
 800dab4:	b2db      	uxtb	r3, r3
 800dab6:	f003 0301 	and.w	r3, r3, #1
 800daba:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 800dabe:	2224      	movs	r2, #36	; 0x24
 800dac0:	2194      	movs	r1, #148	; 0x94
 800dac2:	6878      	ldr	r0, [r7, #4]
 800dac4:	f002 f9d0 	bl	800fe68 <VL53L0X_WrByte>
 800dac8:	4603      	mov	r3, r0
 800daca:	461a      	mov	r2, r3
 800dacc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dad0:	4313      	orrs	r3, r2
 800dad2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800dad6:	6878      	ldr	r0, [r7, #4]
 800dad8:	f7ff fec7 	bl	800d86a <VL53L0X_device_read_strobe>
 800dadc:	4603      	mov	r3, r0
 800dade:	461a      	mov	r2, r3
 800dae0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dae4:	4313      	orrs	r3, r2
 800dae6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800daea:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800daee:	461a      	mov	r2, r3
 800daf0:	2190      	movs	r1, #144	; 0x90
 800daf2:	6878      	ldr	r0, [r7, #4]
 800daf4:	f002 fa9c 	bl	8010030 <VL53L0X_RdDWord>
 800daf8:	4603      	mov	r3, r0
 800dafa:	461a      	mov	r2, r3
 800dafc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800db00:	4313      	orrs	r3, r2
 800db02:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 800db06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db08:	0e1b      	lsrs	r3, r3, #24
 800db0a:	b2db      	uxtb	r3, r3
 800db0c:	723b      	strb	r3, [r7, #8]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 800db0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db10:	0c1b      	lsrs	r3, r3, #16
 800db12:	b2db      	uxtb	r3, r3
 800db14:	727b      	strb	r3, [r7, #9]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 800db16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db18:	0a1b      	lsrs	r3, r3, #8
 800db1a:	b2db      	uxtb	r3, r3
 800db1c:	72bb      	strb	r3, [r7, #10]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 800db1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db20:	b2db      	uxtb	r3, r3
 800db22:	72fb      	strb	r3, [r7, #11]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 800db24:	2225      	movs	r2, #37	; 0x25
 800db26:	2194      	movs	r1, #148	; 0x94
 800db28:	6878      	ldr	r0, [r7, #4]
 800db2a:	f002 f99d 	bl	800fe68 <VL53L0X_WrByte>
 800db2e:	4603      	mov	r3, r0
 800db30:	461a      	mov	r2, r3
 800db32:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800db36:	4313      	orrs	r3, r2
 800db38:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800db3c:	6878      	ldr	r0, [r7, #4]
 800db3e:	f7ff fe94 	bl	800d86a <VL53L0X_device_read_strobe>
 800db42:	4603      	mov	r3, r0
 800db44:	461a      	mov	r2, r3
 800db46:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800db4a:	4313      	orrs	r3, r2
 800db4c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800db50:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800db54:	461a      	mov	r2, r3
 800db56:	2190      	movs	r1, #144	; 0x90
 800db58:	6878      	ldr	r0, [r7, #4]
 800db5a:	f002 fa69 	bl	8010030 <VL53L0X_RdDWord>
 800db5e:	4603      	mov	r3, r0
 800db60:	461a      	mov	r2, r3
 800db62:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800db66:	4313      	orrs	r3, r2
 800db68:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 800db6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db6e:	0e1b      	lsrs	r3, r3, #24
 800db70:	b2db      	uxtb	r3, r3
 800db72:	733b      	strb	r3, [r7, #12]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 800db74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db76:	0c1b      	lsrs	r3, r3, #16
 800db78:	b2db      	uxtb	r3, r3
 800db7a:	737b      	strb	r3, [r7, #13]
				& 0xff);
		}

		if (((option & 2) == 2) &&
 800db7c:	78fb      	ldrb	r3, [r7, #3]
 800db7e:	f003 0302 	and.w	r3, r3, #2
 800db82:	2b00      	cmp	r3, #0
 800db84:	f000 8189 	beq.w	800de9a <VL53L0X_get_info_from_device+0x5aa>
			((ReadDataFromDeviceDone & 2) == 0)) {
 800db88:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800db8c:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 800db90:	2b00      	cmp	r3, #0
 800db92:	f040 8182 	bne.w	800de9a <VL53L0X_get_info_from_device+0x5aa>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 800db96:	2202      	movs	r2, #2
 800db98:	2194      	movs	r1, #148	; 0x94
 800db9a:	6878      	ldr	r0, [r7, #4]
 800db9c:	f002 f964 	bl	800fe68 <VL53L0X_WrByte>
 800dba0:	4603      	mov	r3, r0
 800dba2:	461a      	mov	r2, r3
 800dba4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dba8:	4313      	orrs	r3, r2
 800dbaa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800dbae:	6878      	ldr	r0, [r7, #4]
 800dbb0:	f7ff fe5b 	bl	800d86a <VL53L0X_device_read_strobe>
 800dbb4:	4603      	mov	r3, r0
 800dbb6:	461a      	mov	r2, r3
 800dbb8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dbbc:	4313      	orrs	r3, r2
 800dbbe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 800dbc2:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 800dbc6:	461a      	mov	r2, r3
 800dbc8:	2190      	movs	r1, #144	; 0x90
 800dbca:	6878      	ldr	r0, [r7, #4]
 800dbcc:	f002 f9ce 	bl	800ff6c <VL53L0X_RdByte>
 800dbd0:	4603      	mov	r3, r0
 800dbd2:	461a      	mov	r2, r3
 800dbd4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dbd8:	4313      	orrs	r3, r2
 800dbda:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 800dbde:	227b      	movs	r2, #123	; 0x7b
 800dbe0:	2194      	movs	r1, #148	; 0x94
 800dbe2:	6878      	ldr	r0, [r7, #4]
 800dbe4:	f002 f940 	bl	800fe68 <VL53L0X_WrByte>
 800dbe8:	4603      	mov	r3, r0
 800dbea:	461a      	mov	r2, r3
 800dbec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dbf0:	4313      	orrs	r3, r2
 800dbf2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800dbf6:	6878      	ldr	r0, [r7, #4]
 800dbf8:	f7ff fe37 	bl	800d86a <VL53L0X_device_read_strobe>
 800dbfc:	4603      	mov	r3, r0
 800dbfe:	461a      	mov	r2, r3
 800dc00:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dc04:	4313      	orrs	r3, r2
 800dc06:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 800dc0a:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 800dc0e:	461a      	mov	r2, r3
 800dc10:	2190      	movs	r1, #144	; 0x90
 800dc12:	6878      	ldr	r0, [r7, #4]
 800dc14:	f002 f9aa 	bl	800ff6c <VL53L0X_RdByte>
 800dc18:	4603      	mov	r3, r0
 800dc1a:	461a      	mov	r2, r3
 800dc1c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dc20:	4313      	orrs	r3, r2
 800dc22:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 800dc26:	2277      	movs	r2, #119	; 0x77
 800dc28:	2194      	movs	r1, #148	; 0x94
 800dc2a:	6878      	ldr	r0, [r7, #4]
 800dc2c:	f002 f91c 	bl	800fe68 <VL53L0X_WrByte>
 800dc30:	4603      	mov	r3, r0
 800dc32:	461a      	mov	r2, r3
 800dc34:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dc38:	4313      	orrs	r3, r2
 800dc3a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800dc3e:	6878      	ldr	r0, [r7, #4]
 800dc40:	f7ff fe13 	bl	800d86a <VL53L0X_device_read_strobe>
 800dc44:	4603      	mov	r3, r0
 800dc46:	461a      	mov	r2, r3
 800dc48:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dc4c:	4313      	orrs	r3, r2
 800dc4e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800dc52:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800dc56:	461a      	mov	r2, r3
 800dc58:	2190      	movs	r1, #144	; 0x90
 800dc5a:	6878      	ldr	r0, [r7, #4]
 800dc5c:	f002 f9e8 	bl	8010030 <VL53L0X_RdDWord>
 800dc60:	4603      	mov	r3, r0
 800dc62:	461a      	mov	r2, r3
 800dc64:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dc68:	4313      	orrs	r3, r2
 800dc6a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 800dc6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc70:	0e5b      	lsrs	r3, r3, #25
 800dc72:	b2db      	uxtb	r3, r3
 800dc74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dc78:	b2db      	uxtb	r3, r3
 800dc7a:	743b      	strb	r3, [r7, #16]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 800dc7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc7e:	0c9b      	lsrs	r3, r3, #18
 800dc80:	b2db      	uxtb	r3, r3
 800dc82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dc86:	b2db      	uxtb	r3, r3
 800dc88:	747b      	strb	r3, [r7, #17]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 800dc8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc8c:	0adb      	lsrs	r3, r3, #11
 800dc8e:	b2db      	uxtb	r3, r3
 800dc90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dc94:	b2db      	uxtb	r3, r3
 800dc96:	74bb      	strb	r3, [r7, #18]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 800dc98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc9a:	091b      	lsrs	r3, r3, #4
 800dc9c:	b2db      	uxtb	r3, r3
 800dc9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dca2:	b2db      	uxtb	r3, r3
 800dca4:	74fb      	strb	r3, [r7, #19]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 800dca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dca8:	b2db      	uxtb	r3, r3
 800dcaa:	00db      	lsls	r3, r3, #3
 800dcac:	b2db      	uxtb	r3, r3
 800dcae:	f003 0378 	and.w	r3, r3, #120	; 0x78
 800dcb2:	b2db      	uxtb	r3, r3
 800dcb4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 800dcb8:	2278      	movs	r2, #120	; 0x78
 800dcba:	2194      	movs	r1, #148	; 0x94
 800dcbc:	6878      	ldr	r0, [r7, #4]
 800dcbe:	f002 f8d3 	bl	800fe68 <VL53L0X_WrByte>
 800dcc2:	4603      	mov	r3, r0
 800dcc4:	461a      	mov	r2, r3
 800dcc6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dcca:	4313      	orrs	r3, r2
 800dccc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800dcd0:	6878      	ldr	r0, [r7, #4]
 800dcd2:	f7ff fdca 	bl	800d86a <VL53L0X_device_read_strobe>
 800dcd6:	4603      	mov	r3, r0
 800dcd8:	461a      	mov	r2, r3
 800dcda:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dcde:	4313      	orrs	r3, r2
 800dce0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800dce4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800dce8:	461a      	mov	r2, r3
 800dcea:	2190      	movs	r1, #144	; 0x90
 800dcec:	6878      	ldr	r0, [r7, #4]
 800dcee:	f002 f99f 	bl	8010030 <VL53L0X_RdDWord>
 800dcf2:	4603      	mov	r3, r0
 800dcf4:	461a      	mov	r2, r3
 800dcf6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dcfa:	4313      	orrs	r3, r2
 800dcfc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 800dd00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd02:	0f5b      	lsrs	r3, r3, #29
 800dd04:	b2db      	uxtb	r3, r3
 800dd06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dd0a:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 800dd0c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800dd10:	4413      	add	r3, r2
 800dd12:	b2db      	uxtb	r3, r3
 800dd14:	753b      	strb	r3, [r7, #20]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 800dd16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd18:	0d9b      	lsrs	r3, r3, #22
 800dd1a:	b2db      	uxtb	r3, r3
 800dd1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dd20:	b2db      	uxtb	r3, r3
 800dd22:	757b      	strb	r3, [r7, #21]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 800dd24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd26:	0bdb      	lsrs	r3, r3, #15
 800dd28:	b2db      	uxtb	r3, r3
 800dd2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dd2e:	b2db      	uxtb	r3, r3
 800dd30:	75bb      	strb	r3, [r7, #22]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 800dd32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd34:	0a1b      	lsrs	r3, r3, #8
 800dd36:	b2db      	uxtb	r3, r3
 800dd38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dd3c:	b2db      	uxtb	r3, r3
 800dd3e:	75fb      	strb	r3, [r7, #23]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 800dd40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd42:	085b      	lsrs	r3, r3, #1
 800dd44:	b2db      	uxtb	r3, r3
 800dd46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dd4a:	b2db      	uxtb	r3, r3
 800dd4c:	763b      	strb	r3, [r7, #24]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 800dd4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd50:	b2db      	uxtb	r3, r3
 800dd52:	019b      	lsls	r3, r3, #6
 800dd54:	b2db      	uxtb	r3, r3
 800dd56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dd5a:	b2db      	uxtb	r3, r3
 800dd5c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 800dd60:	2279      	movs	r2, #121	; 0x79
 800dd62:	2194      	movs	r1, #148	; 0x94
 800dd64:	6878      	ldr	r0, [r7, #4]
 800dd66:	f002 f87f 	bl	800fe68 <VL53L0X_WrByte>
 800dd6a:	4603      	mov	r3, r0
 800dd6c:	461a      	mov	r2, r3
 800dd6e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dd72:	4313      	orrs	r3, r2
 800dd74:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 800dd78:	6878      	ldr	r0, [r7, #4]
 800dd7a:	f7ff fd76 	bl	800d86a <VL53L0X_device_read_strobe>
 800dd7e:	4603      	mov	r3, r0
 800dd80:	461a      	mov	r2, r3
 800dd82:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dd86:	4313      	orrs	r3, r2
 800dd88:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800dd8c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800dd90:	461a      	mov	r2, r3
 800dd92:	2190      	movs	r1, #144	; 0x90
 800dd94:	6878      	ldr	r0, [r7, #4]
 800dd96:	f002 f94b 	bl	8010030 <VL53L0X_RdDWord>
 800dd9a:	4603      	mov	r3, r0
 800dd9c:	461a      	mov	r2, r3
 800dd9e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dda2:	4313      	orrs	r3, r2
 800dda4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 800dda8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddaa:	0e9b      	lsrs	r3, r3, #26
 800ddac:	b2db      	uxtb	r3, r3
 800ddae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ddb2:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 800ddb4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ddb8:	4413      	add	r3, r2
 800ddba:	b2db      	uxtb	r3, r3
 800ddbc:	767b      	strb	r3, [r7, #25]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 800ddbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddc0:	0cdb      	lsrs	r3, r3, #19
 800ddc2:	b2db      	uxtb	r3, r3
 800ddc4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ddc8:	b2db      	uxtb	r3, r3
 800ddca:	76bb      	strb	r3, [r7, #26]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 800ddcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddce:	0b1b      	lsrs	r3, r3, #12
 800ddd0:	b2db      	uxtb	r3, r3
 800ddd2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ddd6:	b2db      	uxtb	r3, r3
 800ddd8:	76fb      	strb	r3, [r7, #27]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 800ddda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dddc:	095b      	lsrs	r3, r3, #5
 800ddde:	b2db      	uxtb	r3, r3
 800dde0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dde4:	b2db      	uxtb	r3, r3
 800dde6:	773b      	strb	r3, [r7, #28]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 800dde8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddea:	b2db      	uxtb	r3, r3
 800ddec:	009b      	lsls	r3, r3, #2
 800ddee:	b2db      	uxtb	r3, r3
 800ddf0:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 800ddf4:	b2db      	uxtb	r3, r3
 800ddf6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 800ddfa:	227a      	movs	r2, #122	; 0x7a
 800ddfc:	2194      	movs	r1, #148	; 0x94
 800ddfe:	6878      	ldr	r0, [r7, #4]
 800de00:	f002 f832 	bl	800fe68 <VL53L0X_WrByte>
 800de04:	4603      	mov	r3, r0
 800de06:	461a      	mov	r2, r3
 800de08:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800de0c:	4313      	orrs	r3, r2
 800de0e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 800de12:	6878      	ldr	r0, [r7, #4]
 800de14:	f7ff fd29 	bl	800d86a <VL53L0X_device_read_strobe>
 800de18:	4603      	mov	r3, r0
 800de1a:	461a      	mov	r2, r3
 800de1c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800de20:	4313      	orrs	r3, r2
 800de22:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800de26:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800de2a:	461a      	mov	r2, r3
 800de2c:	2190      	movs	r1, #144	; 0x90
 800de2e:	6878      	ldr	r0, [r7, #4]
 800de30:	f002 f8fe 	bl	8010030 <VL53L0X_RdDWord>
 800de34:	4603      	mov	r3, r0
 800de36:	461a      	mov	r2, r3
 800de38:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800de3c:	4313      	orrs	r3, r2
 800de3e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 800de42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de44:	0f9b      	lsrs	r3, r3, #30
 800de46:	b2db      	uxtb	r3, r3
 800de48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800de4c:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 800de4e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800de52:	4413      	add	r3, r2
 800de54:	b2db      	uxtb	r3, r3
 800de56:	777b      	strb	r3, [r7, #29]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 800de58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de5a:	0ddb      	lsrs	r3, r3, #23
 800de5c:	b2db      	uxtb	r3, r3
 800de5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800de62:	b2db      	uxtb	r3, r3
 800de64:	77bb      	strb	r3, [r7, #30]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 800de66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de68:	0c1b      	lsrs	r3, r3, #16
 800de6a:	b2db      	uxtb	r3, r3
 800de6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800de70:	b2db      	uxtb	r3, r3
 800de72:	77fb      	strb	r3, [r7, #31]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 800de74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de76:	0a5b      	lsrs	r3, r3, #9
 800de78:	b2db      	uxtb	r3, r3
 800de7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800de7e:	b2db      	uxtb	r3, r3
 800de80:	f887 3020 	strb.w	r3, [r7, #32]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 800de84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de86:	089b      	lsrs	r3, r3, #2
 800de88:	b2db      	uxtb	r3, r3
 800de8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800de8e:	b2db      	uxtb	r3, r3
 800de90:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			ProductId[18] = '\0';
 800de94:	2300      	movs	r3, #0
 800de96:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		}

		if (((option & 4) == 4) &&
 800de9a:	78fb      	ldrb	r3, [r7, #3]
 800de9c:	f003 0304 	and.w	r3, r3, #4
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	f000 80f1 	beq.w	800e088 <VL53L0X_get_info_from_device+0x798>
			((ReadDataFromDeviceDone & 4) == 0)) {
 800dea6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800deaa:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 800deae:	2b00      	cmp	r3, #0
 800deb0:	f040 80ea 	bne.w	800e088 <VL53L0X_get_info_from_device+0x798>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 800deb4:	227b      	movs	r2, #123	; 0x7b
 800deb6:	2194      	movs	r1, #148	; 0x94
 800deb8:	6878      	ldr	r0, [r7, #4]
 800deba:	f001 ffd5 	bl	800fe68 <VL53L0X_WrByte>
 800debe:	4603      	mov	r3, r0
 800dec0:	461a      	mov	r2, r3
 800dec2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dec6:	4313      	orrs	r3, r2
 800dec8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800decc:	6878      	ldr	r0, [r7, #4]
 800dece:	f7ff fccc 	bl	800d86a <VL53L0X_device_read_strobe>
 800ded2:	4603      	mov	r3, r0
 800ded4:	461a      	mov	r2, r3
 800ded6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800deda:	4313      	orrs	r3, r2
 800dedc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 800dee0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800dee4:	461a      	mov	r2, r3
 800dee6:	2190      	movs	r1, #144	; 0x90
 800dee8:	6878      	ldr	r0, [r7, #4]
 800deea:	f002 f8a1 	bl	8010030 <VL53L0X_RdDWord>
 800deee:	4603      	mov	r3, r0
 800def0:	461a      	mov	r2, r3
 800def2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800def6:	4313      	orrs	r3, r2
 800def8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 800defc:	227c      	movs	r2, #124	; 0x7c
 800defe:	2194      	movs	r1, #148	; 0x94
 800df00:	6878      	ldr	r0, [r7, #4]
 800df02:	f001 ffb1 	bl	800fe68 <VL53L0X_WrByte>
 800df06:	4603      	mov	r3, r0
 800df08:	461a      	mov	r2, r3
 800df0a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800df0e:	4313      	orrs	r3, r2
 800df10:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800df14:	6878      	ldr	r0, [r7, #4]
 800df16:	f7ff fca8 	bl	800d86a <VL53L0X_device_read_strobe>
 800df1a:	4603      	mov	r3, r0
 800df1c:	461a      	mov	r2, r3
 800df1e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800df22:	4313      	orrs	r3, r2
 800df24:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 800df28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800df2c:	461a      	mov	r2, r3
 800df2e:	2190      	movs	r1, #144	; 0x90
 800df30:	6878      	ldr	r0, [r7, #4]
 800df32:	f002 f87d 	bl	8010030 <VL53L0X_RdDWord>
 800df36:	4603      	mov	r3, r0
 800df38:	461a      	mov	r2, r3
 800df3a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800df3e:	4313      	orrs	r3, r2
 800df40:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 800df44:	2273      	movs	r2, #115	; 0x73
 800df46:	2194      	movs	r1, #148	; 0x94
 800df48:	6878      	ldr	r0, [r7, #4]
 800df4a:	f001 ff8d 	bl	800fe68 <VL53L0X_WrByte>
 800df4e:	4603      	mov	r3, r0
 800df50:	461a      	mov	r2, r3
 800df52:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800df56:	4313      	orrs	r3, r2
 800df58:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800df5c:	6878      	ldr	r0, [r7, #4]
 800df5e:	f7ff fc84 	bl	800d86a <VL53L0X_device_read_strobe>
 800df62:	4603      	mov	r3, r0
 800df64:	461a      	mov	r2, r3
 800df66:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800df6a:	4313      	orrs	r3, r2
 800df6c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800df70:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800df74:	461a      	mov	r2, r3
 800df76:	2190      	movs	r1, #144	; 0x90
 800df78:	6878      	ldr	r0, [r7, #4]
 800df7a:	f002 f859 	bl	8010030 <VL53L0X_RdDWord>
 800df7e:	4603      	mov	r3, r0
 800df80:	461a      	mov	r2, r3
 800df82:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800df86:	4313      	orrs	r3, r2
 800df88:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x0000000ff) << 8;
 800df8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df8e:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 800df90:	b29b      	uxth	r3, r3
 800df92:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 800df94:	2274      	movs	r2, #116	; 0x74
 800df96:	2194      	movs	r1, #148	; 0x94
 800df98:	6878      	ldr	r0, [r7, #4]
 800df9a:	f001 ff65 	bl	800fe68 <VL53L0X_WrByte>
 800df9e:	4603      	mov	r3, r0
 800dfa0:	461a      	mov	r2, r3
 800dfa2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dfa6:	4313      	orrs	r3, r2
 800dfa8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800dfac:	6878      	ldr	r0, [r7, #4]
 800dfae:	f7ff fc5c 	bl	800d86a <VL53L0X_device_read_strobe>
 800dfb2:	4603      	mov	r3, r0
 800dfb4:	461a      	mov	r2, r3
 800dfb6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dfba:	4313      	orrs	r3, r2
 800dfbc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800dfc0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800dfc4:	461a      	mov	r2, r3
 800dfc6:	2190      	movs	r1, #144	; 0x90
 800dfc8:	6878      	ldr	r0, [r7, #4]
 800dfca:	f002 f831 	bl	8010030 <VL53L0X_RdDWord>
 800dfce:	4603      	mov	r3, r0
 800dfd0:	461a      	mov	r2, r3
 800dfd2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dfd6:	4313      	orrs	r3, r2
 800dfd8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 800dfdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfde:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 800dfe0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800dfe2:	4313      	orrs	r3, r2
 800dfe4:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 800dfe6:	2275      	movs	r2, #117	; 0x75
 800dfe8:	2194      	movs	r1, #148	; 0x94
 800dfea:	6878      	ldr	r0, [r7, #4]
 800dfec:	f001 ff3c 	bl	800fe68 <VL53L0X_WrByte>
 800dff0:	4603      	mov	r3, r0
 800dff2:	461a      	mov	r2, r3
 800dff4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dff8:	4313      	orrs	r3, r2
 800dffa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800dffe:	6878      	ldr	r0, [r7, #4]
 800e000:	f7ff fc33 	bl	800d86a <VL53L0X_device_read_strobe>
 800e004:	4603      	mov	r3, r0
 800e006:	461a      	mov	r2, r3
 800e008:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e00c:	4313      	orrs	r3, r2
 800e00e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800e012:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800e016:	461a      	mov	r2, r3
 800e018:	2190      	movs	r1, #144	; 0x90
 800e01a:	6878      	ldr	r0, [r7, #4]
 800e01c:	f002 f808 	bl	8010030 <VL53L0X_RdDWord>
 800e020:	4603      	mov	r3, r0
 800e022:	461a      	mov	r2, r3
 800e024:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e028:	4313      	orrs	r3, r2
 800e02a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
							<< 8;
 800e02e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e030:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
 800e032:	b29b      	uxth	r3, r3
 800e034:	657b      	str	r3, [r7, #84]	; 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 800e036:	2276      	movs	r2, #118	; 0x76
 800e038:	2194      	movs	r1, #148	; 0x94
 800e03a:	6878      	ldr	r0, [r7, #4]
 800e03c:	f001 ff14 	bl	800fe68 <VL53L0X_WrByte>
 800e040:	4603      	mov	r3, r0
 800e042:	461a      	mov	r2, r3
 800e044:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e048:	4313      	orrs	r3, r2
 800e04a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800e04e:	6878      	ldr	r0, [r7, #4]
 800e050:	f7ff fc0b 	bl	800d86a <VL53L0X_device_read_strobe>
 800e054:	4603      	mov	r3, r0
 800e056:	461a      	mov	r2, r3
 800e058:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e05c:	4313      	orrs	r3, r2
 800e05e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800e062:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800e066:	461a      	mov	r2, r3
 800e068:	2190      	movs	r1, #144	; 0x90
 800e06a:	6878      	ldr	r0, [r7, #4]
 800e06c:	f001 ffe0 	bl	8010030 <VL53L0X_RdDWord>
 800e070:	4603      	mov	r3, r0
 800e072:	461a      	mov	r2, r3
 800e074:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e078:	4313      	orrs	r3, r2
 800e07a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 800e07e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e080:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 800e082:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e084:	4313      	orrs	r3, r2
 800e086:	657b      	str	r3, [r7, #84]	; 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 800e088:	2200      	movs	r2, #0
 800e08a:	2181      	movs	r1, #129	; 0x81
 800e08c:	6878      	ldr	r0, [r7, #4]
 800e08e:	f001 feeb 	bl	800fe68 <VL53L0X_WrByte>
 800e092:	4603      	mov	r3, r0
 800e094:	461a      	mov	r2, r3
 800e096:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e09a:	4313      	orrs	r3, r2
 800e09c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 800e0a0:	2206      	movs	r2, #6
 800e0a2:	21ff      	movs	r1, #255	; 0xff
 800e0a4:	6878      	ldr	r0, [r7, #4]
 800e0a6:	f001 fedf 	bl	800fe68 <VL53L0X_WrByte>
 800e0aa:	4603      	mov	r3, r0
 800e0ac:	461a      	mov	r2, r3
 800e0ae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e0b2:	4313      	orrs	r3, r2
 800e0b4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 800e0b8:	f107 0337 	add.w	r3, r7, #55	; 0x37
 800e0bc:	461a      	mov	r2, r3
 800e0be:	2183      	movs	r1, #131	; 0x83
 800e0c0:	6878      	ldr	r0, [r7, #4]
 800e0c2:	f001 ff53 	bl	800ff6c <VL53L0X_RdByte>
 800e0c6:	4603      	mov	r3, r0
 800e0c8:	461a      	mov	r2, r3
 800e0ca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e0ce:	4313      	orrs	r3, r2
 800e0d0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 800e0d4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e0d8:	f023 0304 	bic.w	r3, r3, #4
 800e0dc:	b2db      	uxtb	r3, r3
 800e0de:	461a      	mov	r2, r3
 800e0e0:	2183      	movs	r1, #131	; 0x83
 800e0e2:	6878      	ldr	r0, [r7, #4]
 800e0e4:	f001 fec0 	bl	800fe68 <VL53L0X_WrByte>
 800e0e8:	4603      	mov	r3, r0
 800e0ea:	461a      	mov	r2, r3
 800e0ec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e0f0:	4313      	orrs	r3, r2
 800e0f2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800e0f6:	2201      	movs	r2, #1
 800e0f8:	21ff      	movs	r1, #255	; 0xff
 800e0fa:	6878      	ldr	r0, [r7, #4]
 800e0fc:	f001 feb4 	bl	800fe68 <VL53L0X_WrByte>
 800e100:	4603      	mov	r3, r0
 800e102:	461a      	mov	r2, r3
 800e104:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e108:	4313      	orrs	r3, r2
 800e10a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800e10e:	2201      	movs	r2, #1
 800e110:	2100      	movs	r1, #0
 800e112:	6878      	ldr	r0, [r7, #4]
 800e114:	f001 fea8 	bl	800fe68 <VL53L0X_WrByte>
 800e118:	4603      	mov	r3, r0
 800e11a:	461a      	mov	r2, r3
 800e11c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e120:	4313      	orrs	r3, r2
 800e122:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800e126:	2200      	movs	r2, #0
 800e128:	21ff      	movs	r1, #255	; 0xff
 800e12a:	6878      	ldr	r0, [r7, #4]
 800e12c:	f001 fe9c 	bl	800fe68 <VL53L0X_WrByte>
 800e130:	4603      	mov	r3, r0
 800e132:	461a      	mov	r2, r3
 800e134:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e138:	4313      	orrs	r3, r2
 800e13a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800e13e:	2200      	movs	r2, #0
 800e140:	2180      	movs	r1, #128	; 0x80
 800e142:	6878      	ldr	r0, [r7, #4]
 800e144:	f001 fe90 	bl	800fe68 <VL53L0X_WrByte>
 800e148:	4603      	mov	r3, r0
 800e14a:	461a      	mov	r2, r3
 800e14c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e150:	4313      	orrs	r3, r2
 800e152:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 800e156:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	f040 808f 	bne.w	800e27e <VL53L0X_get_info_from_device+0x98e>
 800e160:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800e164:	2b07      	cmp	r3, #7
 800e166:	f000 808a 	beq.w	800e27e <VL53L0X_get_info_from_device+0x98e>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 800e16a:	78fb      	ldrb	r3, [r7, #3]
 800e16c:	f003 0301 	and.w	r3, r3, #1
 800e170:	2b00      	cmp	r3, #0
 800e172:	d024      	beq.n	800e1be <VL53L0X_get_info_from_device+0x8ce>
			((ReadDataFromDeviceDone & 1) == 0)) {
 800e174:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800e178:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	d11e      	bne.n	800e1be <VL53L0X_get_info_from_device+0x8ce>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 800e186:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 800e190:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 800e194:	2300      	movs	r3, #0
 800e196:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e198:	e00e      	b.n	800e1b8 <VL53L0X_get_info_from_device+0x8c8>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 800e19a:	f107 0208 	add.w	r2, r7, #8
 800e19e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e1a0:	4413      	add	r3, r2
 800e1a2:	7819      	ldrb	r1, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 800e1a4:	687a      	ldr	r2, [r7, #4]
 800e1a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e1a8:	4413      	add	r3, r2
 800e1aa:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 800e1ae:	460a      	mov	r2, r1
 800e1b0:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 800e1b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e1b4:	3301      	adds	r3, #1
 800e1b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e1b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e1ba:	2b05      	cmp	r3, #5
 800e1bc:	dded      	ble.n	800e19a <VL53L0X_get_info_from_device+0x8aa>
			}
		}

		if (((option & 2) == 2) &&
 800e1be:	78fb      	ldrb	r3, [r7, #3]
 800e1c0:	f003 0302 	and.w	r3, r3, #2
 800e1c4:	2b00      	cmp	r3, #0
 800e1c6:	d018      	beq.n	800e1fa <VL53L0X_get_info_from_device+0x90a>
			((ReadDataFromDeviceDone & 2) == 0)) {
 800e1c8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800e1cc:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 800e1d0:	2b00      	cmp	r3, #0
 800e1d2:	d112      	bne.n	800e1fa <VL53L0X_get_info_from_device+0x90a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800e1d4:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800e1de:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	33f3      	adds	r3, #243	; 0xf3
 800e1ec:	63bb      	str	r3, [r7, #56]	; 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 800e1ee:	f107 0310 	add.w	r3, r7, #16
 800e1f2:	4619      	mov	r1, r3
 800e1f4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e1f6:	f002 feb8 	bl	8010f6a <strcpy>

		}

		if (((option & 4) == 4) &&
 800e1fa:	78fb      	ldrb	r3, [r7, #3]
 800e1fc:	f003 0304 	and.w	r3, r3, #4
 800e200:	2b00      	cmp	r3, #0
 800e202:	d030      	beq.n	800e266 <VL53L0X_get_info_from_device+0x976>
			((ReadDataFromDeviceDone & 4) == 0)) {
 800e204:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800e208:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	d12a      	bne.n	800e266 <VL53L0X_get_info_from_device+0x976>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800e210:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800e218:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 800e220:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e222:	025b      	lsls	r3, r3, #9
 800e224:	643b      	str	r3, [r7, #64]	; 0x40
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e22a:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 800e22e:	2300      	movs	r3, #0
 800e230:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			if (DistMeasFixed1104_400_mm != 0) {
 800e234:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e236:	2b00      	cmp	r3, #0
 800e238:	d011      	beq.n	800e25e <VL53L0X_get_info_from_device+0x96e>
					OffsetFixed1104_mm =
 800e23a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e23c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e23e:	1ad3      	subs	r3, r2, r3
 800e240:	64bb      	str	r3, [r7, #72]	; 0x48
						DistMeasFixed1104_400_mm -
						DistMeasTgtFixed1104_mm;
					OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 800e242:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e244:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e248:	fb02 f303 	mul.w	r3, r2, r3
 800e24c:	091b      	lsrs	r3, r3, #4
					OffsetMicroMeters = (OffsetFixed1104_mm
 800e24e:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
					OffsetMicroMeters *= -1;
 800e252:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800e256:	425b      	negs	r3, r3
 800e258:	b29b      	uxth	r3, r3
 800e25a:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			}

			PALDevDataSet(Dev,
 800e25e:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	60da      	str	r2, [r3, #12]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 800e266:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800e26a:	78fb      	ldrb	r3, [r7, #3]
 800e26c:	4313      	orrs	r3, r2
 800e26e:	b2db      	uxtb	r3, r3
 800e270:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 800e274:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800e27e:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 800e282:	4618      	mov	r0, r3
 800e284:	3760      	adds	r7, #96	; 0x60
 800e286:	46bd      	mov	sp, r7
 800e288:	bd80      	pop	{r7, pc}

0800e28a <VL53L0X_calc_macro_period_ps>:


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev, uint8_t vcsel_period_pclks)
{
 800e28a:	b480      	push	{r7}
 800e28c:	b087      	sub	sp, #28
 800e28e:	af00      	add	r7, sp, #0
 800e290:	6078      	str	r0, [r7, #4]
 800e292:	460b      	mov	r3, r1
 800e294:	70fb      	strb	r3, [r7, #3]
	LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	   therefore set fixed value
	*/
	PLL_period_ps = 1655;
 800e296:	f240 6277 	movw	r2, #1655	; 0x677
 800e29a:	f04f 0300 	mov.w	r3, #0
 800e29e:	e9c7 2304 	strd	r2, r3, [r7, #16]

	macro_period_vclks = 2304;
 800e2a2:	f44f 6310 	mov.w	r3, #2304	; 0x900
 800e2a6:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 800e2a8:	78fb      	ldrb	r3, [r7, #3]
 800e2aa:	68fa      	ldr	r2, [r7, #12]
 800e2ac:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 800e2b0:	693a      	ldr	r2, [r7, #16]
 800e2b2:	fb02 f303 	mul.w	r3, r2, r3
 800e2b6:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 800e2b8:	68bb      	ldr	r3, [r7, #8]
}
 800e2ba:	4618      	mov	r0, r3
 800e2bc:	371c      	adds	r7, #28
 800e2be:	46bd      	mov	sp, r7
 800e2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2c4:	4770      	bx	lr

0800e2c6 <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 800e2c6:	b480      	push	{r7}
 800e2c8:	b087      	sub	sp, #28
 800e2ca:	af00      	add	r7, sp, #0
 800e2cc:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 800e2ce:	2300      	movs	r3, #0
 800e2d0:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 800e2d2:	2300      	movs	r3, #0
 800e2d4:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 800e2d6:	2300      	movs	r3, #0
 800e2d8:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	d017      	beq.n	800e310 <VL53L0X_encode_timeout+0x4a>
		ls_byte = timeout_macro_clks - 1;
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	3b01      	subs	r3, #1
 800e2e4:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 800e2e6:	e005      	b.n	800e2f4 <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 800e2e8:	693b      	ldr	r3, [r7, #16]
 800e2ea:	085b      	lsrs	r3, r3, #1
 800e2ec:	613b      	str	r3, [r7, #16]
			ms_byte++;
 800e2ee:	89fb      	ldrh	r3, [r7, #14]
 800e2f0:	3301      	adds	r3, #1
 800e2f2:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 800e2f4:	693b      	ldr	r3, [r7, #16]
 800e2f6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	d1f4      	bne.n	800e2e8 <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 800e2fe:	89fb      	ldrh	r3, [r7, #14]
 800e300:	021b      	lsls	r3, r3, #8
 800e302:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 800e304:	693b      	ldr	r3, [r7, #16]
 800e306:	b29b      	uxth	r3, r3
 800e308:	b2db      	uxtb	r3, r3
 800e30a:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 800e30c:	4413      	add	r3, r2
 800e30e:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 800e310:	8afb      	ldrh	r3, [r7, #22]

}
 800e312:	4618      	mov	r0, r3
 800e314:	371c      	adds	r7, #28
 800e316:	46bd      	mov	sp, r7
 800e318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e31c:	4770      	bx	lr

0800e31e <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 800e31e:	b480      	push	{r7}
 800e320:	b085      	sub	sp, #20
 800e322:	af00      	add	r7, sp, #0
 800e324:	4603      	mov	r3, r0
 800e326:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 800e328:	2300      	movs	r3, #0
 800e32a:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800e32c:	88fb      	ldrh	r3, [r7, #6]
 800e32e:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 800e330:	88fa      	ldrh	r2, [r7, #6]
 800e332:	0a12      	lsrs	r2, r2, #8
 800e334:	b292      	uxth	r2, r2
 800e336:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800e338:	3301      	adds	r3, #1
 800e33a:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 800e33c:	68fb      	ldr	r3, [r7, #12]
}
 800e33e:	4618      	mov	r0, r3
 800e340:	3714      	adds	r7, #20
 800e342:	46bd      	mov	sp, r7
 800e344:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e348:	4770      	bx	lr
	...

0800e34c <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 800e34c:	b580      	push	{r7, lr}
 800e34e:	b088      	sub	sp, #32
 800e350:	af00      	add	r7, sp, #0
 800e352:	60f8      	str	r0, [r7, #12]
 800e354:	60b9      	str	r1, [r7, #8]
 800e356:	4613      	mov	r3, r2
 800e358:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 800e35a:	2300      	movs	r3, #0
 800e35c:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 800e35e:	79fb      	ldrb	r3, [r7, #7]
 800e360:	4619      	mov	r1, r3
 800e362:	68f8      	ldr	r0, [r7, #12]
 800e364:	f7ff ff91 	bl	800e28a <VL53L0X_calc_macro_period_ps>
 800e368:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 800e36a:	69bb      	ldr	r3, [r7, #24]
 800e36c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800e370:	4a0a      	ldr	r2, [pc, #40]	; (800e39c <VL53L0X_calc_timeout_mclks+0x50>)
 800e372:	fba2 2303 	umull	r2, r3, r2, r3
 800e376:	099b      	lsrs	r3, r3, #6
 800e378:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 800e37a:	68bb      	ldr	r3, [r7, #8]
 800e37c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e380:	fb03 f202 	mul.w	r2, r3, r2
		+ (macro_period_ns / 2)) / macro_period_ns);
 800e384:	697b      	ldr	r3, [r7, #20]
 800e386:	085b      	lsrs	r3, r3, #1
 800e388:	441a      	add	r2, r3
	timeout_period_mclks =
 800e38a:	697b      	ldr	r3, [r7, #20]
 800e38c:	fbb2 f3f3 	udiv	r3, r2, r3
 800e390:	61fb      	str	r3, [r7, #28]

    return timeout_period_mclks;
 800e392:	69fb      	ldr	r3, [r7, #28]
}
 800e394:	4618      	mov	r0, r3
 800e396:	3720      	adds	r7, #32
 800e398:	46bd      	mov	sp, r7
 800e39a:	bd80      	pop	{r7, pc}
 800e39c:	10624dd3 	.word	0x10624dd3

0800e3a0 <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 800e3a0:	b580      	push	{r7, lr}
 800e3a2:	b086      	sub	sp, #24
 800e3a4:	af00      	add	r7, sp, #0
 800e3a6:	6078      	str	r0, [r7, #4]
 800e3a8:	460b      	mov	r3, r1
 800e3aa:	807b      	strh	r3, [r7, #2]
 800e3ac:	4613      	mov	r3, r2
 800e3ae:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 800e3b0:	2300      	movs	r3, #0
 800e3b2:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 800e3b4:	787b      	ldrb	r3, [r7, #1]
 800e3b6:	4619      	mov	r1, r3
 800e3b8:	6878      	ldr	r0, [r7, #4]
 800e3ba:	f7ff ff66 	bl	800e28a <VL53L0X_calc_macro_period_ps>
 800e3be:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 800e3c0:	693b      	ldr	r3, [r7, #16]
 800e3c2:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800e3c6:	4a0a      	ldr	r2, [pc, #40]	; (800e3f0 <VL53L0X_calc_timeout_us+0x50>)
 800e3c8:	fba2 2303 	umull	r2, r3, r2, r3
 800e3cc:	099b      	lsrs	r3, r3, #6
 800e3ce:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 800e3d0:	887b      	ldrh	r3, [r7, #2]
 800e3d2:	68fa      	ldr	r2, [r7, #12]
 800e3d4:	fb02 f303 	mul.w	r3, r2, r3
 800e3d8:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
	actual_timeout_period_us =
 800e3dc:	4a04      	ldr	r2, [pc, #16]	; (800e3f0 <VL53L0X_calc_timeout_us+0x50>)
 800e3de:	fba2 2303 	umull	r2, r3, r2, r3
 800e3e2:	099b      	lsrs	r3, r3, #6
 800e3e4:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 800e3e6:	697b      	ldr	r3, [r7, #20]
}
 800e3e8:	4618      	mov	r0, r3
 800e3ea:	3718      	adds	r7, #24
 800e3ec:	46bd      	mov	sp, r7
 800e3ee:	bd80      	pop	{r7, pc}
 800e3f0:	10624dd3 	.word	0x10624dd3

0800e3f4 <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 800e3f4:	b580      	push	{r7, lr}
 800e3f6:	b08c      	sub	sp, #48	; 0x30
 800e3f8:	af00      	add	r7, sp, #0
 800e3fa:	60f8      	str	r0, [r7, #12]
 800e3fc:	460b      	mov	r3, r1
 800e3fe:	607a      	str	r2, [r7, #4]
 800e400:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800e402:	2300      	movs	r3, #0
 800e404:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 800e408:	2300      	movs	r3, #0
 800e40a:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 800e40e:	2300      	movs	r3, #0
 800e410:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 800e412:	2300      	movs	r3, #0
 800e414:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 800e416:	2300      	movs	r3, #0
 800e418:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800e41a:	7afb      	ldrb	r3, [r7, #11]
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	d005      	beq.n	800e42c <get_sequence_step_timeout+0x38>
 800e420:	7afb      	ldrb	r3, [r7, #11]
 800e422:	2b01      	cmp	r3, #1
 800e424:	d002      	beq.n	800e42c <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 800e426:	7afb      	ldrb	r3, [r7, #11]
 800e428:	2b02      	cmp	r3, #2
 800e42a:	d128      	bne.n	800e47e <get_sequence_step_timeout+0x8a>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800e42c:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800e430:	461a      	mov	r2, r3
 800e432:	2100      	movs	r1, #0
 800e434:	68f8      	ldr	r0, [r7, #12]
 800e436:	f7fd f9f9 	bl	800b82c <VL53L0X_GetVcselPulsePeriod>
 800e43a:	4603      	mov	r3, r0
 800e43c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 800e440:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800e444:	2b00      	cmp	r3, #0
 800e446:	d109      	bne.n	800e45c <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 800e448:	f107 0320 	add.w	r3, r7, #32
 800e44c:	461a      	mov	r2, r3
 800e44e:	2146      	movs	r1, #70	; 0x46
 800e450:	68f8      	ldr	r0, [r7, #12]
 800e452:	f001 fd8b 	bl	800ff6c <VL53L0X_RdByte>
 800e456:	4603      	mov	r3, r0
 800e458:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 800e45c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e460:	b29b      	uxth	r3, r3
 800e462:	4618      	mov	r0, r3
 800e464:	f7ff ff5b 	bl	800e31e <VL53L0X_decode_timeout>
 800e468:	4603      	mov	r3, r0
 800e46a:	847b      	strh	r3, [r7, #34]	; 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800e46c:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800e470:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e472:	4619      	mov	r1, r3
 800e474:	68f8      	ldr	r0, [r7, #12]
 800e476:	f7ff ff93 	bl	800e3a0 <VL53L0X_calc_timeout_us>
 800e47a:	62b8      	str	r0, [r7, #40]	; 0x28
 800e47c:	e092      	b.n	800e5a4 <get_sequence_step_timeout+0x1b0>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800e47e:	7afb      	ldrb	r3, [r7, #11]
 800e480:	2b03      	cmp	r3, #3
 800e482:	d135      	bne.n	800e4f0 <get_sequence_step_timeout+0xfc>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800e484:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800e488:	461a      	mov	r2, r3
 800e48a:	2100      	movs	r1, #0
 800e48c:	68f8      	ldr	r0, [r7, #12]
 800e48e:	f7fd f9cd 	bl	800b82c <VL53L0X_GetVcselPulsePeriod>
 800e492:	4603      	mov	r3, r0
 800e494:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 800e498:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	f040 8081 	bne.w	800e5a4 <get_sequence_step_timeout+0x1b0>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800e4a2:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800e4a6:	461a      	mov	r2, r3
 800e4a8:	2100      	movs	r1, #0
 800e4aa:	68f8      	ldr	r0, [r7, #12]
 800e4ac:	f7fd f9be 	bl	800b82c <VL53L0X_GetVcselPulsePeriod>
 800e4b0:	4603      	mov	r3, r0
 800e4b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 800e4b6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800e4ba:	2b00      	cmp	r3, #0
 800e4bc:	d109      	bne.n	800e4d2 <get_sequence_step_timeout+0xde>
				Status = VL53L0X_RdWord(Dev,
 800e4be:	f107 031e 	add.w	r3, r7, #30
 800e4c2:	461a      	mov	r2, r3
 800e4c4:	2151      	movs	r1, #81	; 0x51
 800e4c6:	68f8      	ldr	r0, [r7, #12]
 800e4c8:	f001 fd7a 	bl	800ffc0 <VL53L0X_RdWord>
 800e4cc:	4603      	mov	r3, r0
 800e4ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 800e4d2:	8bfb      	ldrh	r3, [r7, #30]
 800e4d4:	4618      	mov	r0, r3
 800e4d6:	f7ff ff22 	bl	800e31e <VL53L0X_decode_timeout>
 800e4da:	4603      	mov	r3, r0
 800e4dc:	84fb      	strh	r3, [r7, #38]	; 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800e4de:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800e4e2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e4e4:	4619      	mov	r1, r3
 800e4e6:	68f8      	ldr	r0, [r7, #12]
 800e4e8:	f7ff ff5a 	bl	800e3a0 <VL53L0X_calc_timeout_us>
 800e4ec:	62b8      	str	r0, [r7, #40]	; 0x28
 800e4ee:	e059      	b.n	800e5a4 <get_sequence_step_timeout+0x1b0>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 800e4f0:	7afb      	ldrb	r3, [r7, #11]
 800e4f2:	2b04      	cmp	r3, #4
 800e4f4:	d156      	bne.n	800e5a4 <get_sequence_step_timeout+0x1b0>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800e4f6:	f107 0314 	add.w	r3, r7, #20
 800e4fa:	4619      	mov	r1, r3
 800e4fc:	68f8      	ldr	r0, [r7, #12]
 800e4fe:	f7fd faa1 	bl	800ba44 <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 800e502:	2300      	movs	r3, #0
 800e504:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 800e506:	7dfb      	ldrb	r3, [r7, #23]
 800e508:	2b00      	cmp	r3, #0
 800e50a:	d01d      	beq.n	800e548 <get_sequence_step_timeout+0x154>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800e50c:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800e510:	461a      	mov	r2, r3
 800e512:	2100      	movs	r1, #0
 800e514:	68f8      	ldr	r0, [r7, #12]
 800e516:	f7fd f989 	bl	800b82c <VL53L0X_GetVcselPulsePeriod>
 800e51a:	4603      	mov	r3, r0
 800e51c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_VCSEL_PERIOD_PRE_RANGE,
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS) */
			if (Status == VL53L0X_ERROR_NONE) {
 800e520:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800e524:	2b00      	cmp	r3, #0
 800e526:	d10f      	bne.n	800e548 <get_sequence_step_timeout+0x154>
				Status = VL53L0X_RdWord(Dev,
 800e528:	f107 031e 	add.w	r3, r7, #30
 800e52c:	461a      	mov	r2, r3
 800e52e:	2151      	movs	r1, #81	; 0x51
 800e530:	68f8      	ldr	r0, [r7, #12]
 800e532:	f001 fd45 	bl	800ffc0 <VL53L0X_RdWord>
 800e536:	4603      	mov	r3, r0
 800e538:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 800e53c:	8bfb      	ldrh	r3, [r7, #30]
 800e53e:	4618      	mov	r0, r3
 800e540:	f7ff feed 	bl	800e31e <VL53L0X_decode_timeout>
 800e544:	4603      	mov	r3, r0
 800e546:	84fb      	strh	r3, [r7, #38]	; 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 800e548:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	d109      	bne.n	800e564 <get_sequence_step_timeout+0x170>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800e550:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800e554:	461a      	mov	r2, r3
 800e556:	2101      	movs	r1, #1
 800e558:	68f8      	ldr	r0, [r7, #12]
 800e55a:	f7fd f967 	bl	800b82c <VL53L0X_GetVcselPulsePeriod>
 800e55e:	4603      	mov	r3, r0
 800e560:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 800e564:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800e568:	2b00      	cmp	r3, #0
 800e56a:	d10f      	bne.n	800e58c <get_sequence_step_timeout+0x198>
			Status = VL53L0X_RdWord(Dev,
 800e56c:	f107 031c 	add.w	r3, r7, #28
 800e570:	461a      	mov	r2, r3
 800e572:	2171      	movs	r1, #113	; 0x71
 800e574:	68f8      	ldr	r0, [r7, #12]
 800e576:	f001 fd23 	bl	800ffc0 <VL53L0X_RdWord>
 800e57a:	4603      	mov	r3, r0
 800e57c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 800e580:	8bbb      	ldrh	r3, [r7, #28]
 800e582:	4618      	mov	r0, r3
 800e584:	f7ff fecb 	bl	800e31e <VL53L0X_decode_timeout>
 800e588:	4603      	mov	r3, r0
 800e58a:	84bb      	strh	r3, [r7, #36]	; 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 800e58c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e58e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e590:	1ad3      	subs	r3, r2, r3
 800e592:	84bb      	strh	r3, [r7, #36]	; 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800e594:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800e598:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e59a:	4619      	mov	r1, r3
 800e59c:	68f8      	ldr	r0, [r7, #12]
 800e59e:	f7ff feff 	bl	800e3a0 <VL53L0X_calc_timeout_us>
 800e5a2:	62b8      	str	r0, [r7, #40]	; 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e5a8:	601a      	str	r2, [r3, #0]

	return Status;
 800e5aa:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800e5ae:	4618      	mov	r0, r3
 800e5b0:	3730      	adds	r7, #48	; 0x30
 800e5b2:	46bd      	mov	sp, r7
 800e5b4:	bd80      	pop	{r7, pc}

0800e5b6 <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 800e5b6:	b580      	push	{r7, lr}
 800e5b8:	b08a      	sub	sp, #40	; 0x28
 800e5ba:	af00      	add	r7, sp, #0
 800e5bc:	60f8      	str	r0, [r7, #12]
 800e5be:	460b      	mov	r3, r1
 800e5c0:	607a      	str	r2, [r7, #4]
 800e5c2:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800e5c4:	2300      	movs	r3, #0
 800e5c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t MsrcRangeTimeOutMClks;
	uint32_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800e5ca:	7afb      	ldrb	r3, [r7, #11]
 800e5cc:	2b00      	cmp	r3, #0
 800e5ce:	d005      	beq.n	800e5dc <set_sequence_step_timeout+0x26>
 800e5d0:	7afb      	ldrb	r3, [r7, #11]
 800e5d2:	2b01      	cmp	r3, #1
 800e5d4:	d002      	beq.n	800e5dc <set_sequence_step_timeout+0x26>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 800e5d6:	7afb      	ldrb	r3, [r7, #11]
 800e5d8:	2b02      	cmp	r3, #2
 800e5da:	d138      	bne.n	800e64e <set_sequence_step_timeout+0x98>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800e5dc:	f107 031b 	add.w	r3, r7, #27
 800e5e0:	461a      	mov	r2, r3
 800e5e2:	2100      	movs	r1, #0
 800e5e4:	68f8      	ldr	r0, [r7, #12]
 800e5e6:	f7fd f921 	bl	800b82c <VL53L0X_GetVcselPulsePeriod>
 800e5ea:	4603      	mov	r3, r0
 800e5ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 800e5f0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	d11a      	bne.n	800e62e <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 800e5f8:	7efb      	ldrb	r3, [r7, #27]
 800e5fa:	461a      	mov	r2, r3
 800e5fc:	6879      	ldr	r1, [r7, #4]
 800e5fe:	68f8      	ldr	r0, [r7, #12]
 800e600:	f7ff fea4 	bl	800e34c <VL53L0X_calc_timeout_mclks>
 800e604:	4603      	mov	r3, r0
 800e606:	83bb      	strh	r3, [r7, #28]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 800e608:	8bbb      	ldrh	r3, [r7, #28]
 800e60a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e60e:	d903      	bls.n	800e618 <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 800e610:	23ff      	movs	r3, #255	; 0xff
 800e612:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e616:	e004      	b.n	800e622 <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 800e618:	8bbb      	ldrh	r3, [r7, #28]
 800e61a:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 800e61c:	3b01      	subs	r3, #1
 800e61e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800e622:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e626:	b29a      	uxth	r2, r3
 800e628:	68fb      	ldr	r3, [r7, #12]
 800e62a:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 800e62e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e632:	2b00      	cmp	r3, #0
 800e634:	f040 80ab 	bne.w	800e78e <set_sequence_step_timeout+0x1d8>
			Status = VL53L0X_WrByte(Dev,
 800e638:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e63c:	461a      	mov	r2, r3
 800e63e:	2146      	movs	r1, #70	; 0x46
 800e640:	68f8      	ldr	r0, [r7, #12]
 800e642:	f001 fc11 	bl	800fe68 <VL53L0X_WrByte>
 800e646:	4603      	mov	r3, r0
 800e648:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 800e64c:	e09f      	b.n	800e78e <set_sequence_step_timeout+0x1d8>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800e64e:	7afb      	ldrb	r3, [r7, #11]
 800e650:	2b03      	cmp	r3, #3
 800e652:	d135      	bne.n	800e6c0 <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 800e654:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e658:	2b00      	cmp	r3, #0
 800e65a:	d11b      	bne.n	800e694 <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800e65c:	f107 031b 	add.w	r3, r7, #27
 800e660:	461a      	mov	r2, r3
 800e662:	2100      	movs	r1, #0
 800e664:	68f8      	ldr	r0, [r7, #12]
 800e666:	f7fd f8e1 	bl	800b82c <VL53L0X_GetVcselPulsePeriod>
 800e66a:	4603      	mov	r3, r0
 800e66c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 800e670:	7efb      	ldrb	r3, [r7, #27]
 800e672:	461a      	mov	r2, r3
 800e674:	6879      	ldr	r1, [r7, #4]
 800e676:	68f8      	ldr	r0, [r7, #12]
 800e678:	f7ff fe68 	bl	800e34c <VL53L0X_calc_timeout_mclks>
 800e67c:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 800e67e:	84bb      	strh	r3, [r7, #36]	; 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 800e680:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e682:	4618      	mov	r0, r3
 800e684:	f7ff fe1f 	bl	800e2c6 <VL53L0X_encode_timeout>
 800e688:	4603      	mov	r3, r0
 800e68a:	833b      	strh	r3, [r7, #24]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800e68c:	8b3a      	ldrh	r2, [r7, #24]
 800e68e:	68fb      	ldr	r3, [r7, #12]
 800e690:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800e694:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e698:	2b00      	cmp	r3, #0
 800e69a:	d108      	bne.n	800e6ae <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 800e69c:	8b3b      	ldrh	r3, [r7, #24]
 800e69e:	461a      	mov	r2, r3
 800e6a0:	2151      	movs	r1, #81	; 0x51
 800e6a2:	68f8      	ldr	r0, [r7, #12]
 800e6a4:	f001 fc04 	bl	800feb0 <VL53L0X_WrWord>
 800e6a8:	4603      	mov	r3, r0
 800e6aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800e6ae:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e6b2:	2b00      	cmp	r3, #0
 800e6b4:	d16b      	bne.n	800e78e <set_sequence_step_timeout+0x1d8>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 800e6b6:	68fb      	ldr	r3, [r7, #12]
 800e6b8:	687a      	ldr	r2, [r7, #4]
 800e6ba:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 800e6be:	e066      	b.n	800e78e <set_sequence_step_timeout+0x1d8>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 800e6c0:	7afb      	ldrb	r3, [r7, #11]
 800e6c2:	2b04      	cmp	r3, #4
 800e6c4:	d160      	bne.n	800e788 <set_sequence_step_timeout+0x1d2>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 800e6c6:	f107 0310 	add.w	r3, r7, #16
 800e6ca:	4619      	mov	r1, r3
 800e6cc:	68f8      	ldr	r0, [r7, #12]
 800e6ce:	f7fd f9b9 	bl	800ba44 <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 800e6d2:	2300      	movs	r3, #0
 800e6d4:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 800e6d6:	7cfb      	ldrb	r3, [r7, #19]
 800e6d8:	2b00      	cmp	r3, #0
 800e6da:	d01d      	beq.n	800e718 <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800e6dc:	f107 031b 	add.w	r3, r7, #27
 800e6e0:	461a      	mov	r2, r3
 800e6e2:	2100      	movs	r1, #0
 800e6e4:	68f8      	ldr	r0, [r7, #12]
 800e6e6:	f7fd f8a1 	bl	800b82c <VL53L0X_GetVcselPulsePeriod>
 800e6ea:	4603      	mov	r3, r0
 800e6ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS) */
				if (Status == VL53L0X_ERROR_NONE) {
 800e6f0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e6f4:	2b00      	cmp	r3, #0
 800e6f6:	d10f      	bne.n	800e718 <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 800e6f8:	f107 0318 	add.w	r3, r7, #24
 800e6fc:	461a      	mov	r2, r3
 800e6fe:	2151      	movs	r1, #81	; 0x51
 800e700:	68f8      	ldr	r0, [r7, #12]
 800e702:	f001 fc5d 	bl	800ffc0 <VL53L0X_RdWord>
 800e706:	4603      	mov	r3, r0
 800e708:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 800e70c:	8b3b      	ldrh	r3, [r7, #24]
 800e70e:	4618      	mov	r0, r3
 800e710:	f7ff fe05 	bl	800e31e <VL53L0X_decode_timeout>
 800e714:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 800e716:	84bb      	strh	r3, [r7, #36]	; 0x24
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 800e718:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	d109      	bne.n	800e734 <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800e720:	f107 031b 	add.w	r3, r7, #27
 800e724:	461a      	mov	r2, r3
 800e726:	2101      	movs	r1, #1
 800e728:	68f8      	ldr	r0, [r7, #12]
 800e72a:	f7fd f87f 	bl	800b82c <VL53L0X_GetVcselPulsePeriod>
 800e72e:	4603      	mov	r3, r0
 800e730:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
						&CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 800e734:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e738:	2b00      	cmp	r3, #0
 800e73a:	d128      	bne.n	800e78e <set_sequence_step_timeout+0x1d8>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 800e73c:	7efb      	ldrb	r3, [r7, #27]
 800e73e:	461a      	mov	r2, r3
 800e740:	6879      	ldr	r1, [r7, #4]
 800e742:	68f8      	ldr	r0, [r7, #12]
 800e744:	f7ff fe02 	bl	800e34c <VL53L0X_calc_timeout_mclks>
 800e748:	6238      	str	r0, [r7, #32]
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 800e74a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e74c:	6a3a      	ldr	r2, [r7, #32]
 800e74e:	4413      	add	r3, r2
 800e750:	623b      	str	r3, [r7, #32]

				FinalRangeEncodedTimeOut =
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);
 800e752:	6a38      	ldr	r0, [r7, #32]
 800e754:	f7ff fdb7 	bl	800e2c6 <VL53L0X_encode_timeout>
 800e758:	4603      	mov	r3, r0
 800e75a:	83fb      	strh	r3, [r7, #30]

				if (Status == VL53L0X_ERROR_NONE) {
 800e75c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e760:	2b00      	cmp	r3, #0
 800e762:	d108      	bne.n	800e776 <set_sequence_step_timeout+0x1c0>
					Status = VL53L0X_WrWord(Dev, 0x71,
 800e764:	8bfb      	ldrh	r3, [r7, #30]
 800e766:	461a      	mov	r2, r3
 800e768:	2171      	movs	r1, #113	; 0x71
 800e76a:	68f8      	ldr	r0, [r7, #12]
 800e76c:	f001 fba0 	bl	800feb0 <VL53L0X_WrWord>
 800e770:	4603      	mov	r3, r0
 800e772:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 800e776:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	d107      	bne.n	800e78e <set_sequence_step_timeout+0x1d8>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 800e77e:	68fb      	ldr	r3, [r7, #12]
 800e780:	687a      	ldr	r2, [r7, #4]
 800e782:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 800e786:	e002      	b.n	800e78e <set_sequence_step_timeout+0x1d8>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800e788:	23fc      	movs	r3, #252	; 0xfc
 800e78a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	}
	return Status;
 800e78e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800e792:	4618      	mov	r0, r3
 800e794:	3728      	adds	r7, #40	; 0x28
 800e796:	46bd      	mov	sp, r7
 800e798:	bd80      	pop	{r7, pc}

0800e79a <VL53L0X_set_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_set_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 800e79a:	b580      	push	{r7, lr}
 800e79c:	b08a      	sub	sp, #40	; 0x28
 800e79e:	af00      	add	r7, sp, #0
 800e7a0:	6078      	str	r0, [r7, #4]
 800e7a2:	460b      	mov	r3, r1
 800e7a4:	70fb      	strb	r3, [r7, #3]
 800e7a6:	4613      	mov	r3, r2
 800e7a8:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800e7aa:	2300      	movs	r3, #0
 800e7ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t vcsel_period_reg;
	uint8_t MinPreVcselPeriodPCLK = 12;
 800e7b0:	230c      	movs	r3, #12
 800e7b2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t MaxPreVcselPeriodPCLK = 18;
 800e7b6:	2312      	movs	r3, #18
 800e7b8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t MinFinalVcselPeriodPCLK = 8;
 800e7bc:	2308      	movs	r3, #8
 800e7be:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t MaxFinalVcselPeriodPCLK = 14;
 800e7c2:	230e      	movs	r3, #14
 800e7c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t MeasurementTimingBudgetMicroSeconds;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t PreRangeTimeoutMicroSeconds;
	uint32_t MsrcTimeoutMicroSeconds;
	uint8_t PhaseCalInt = 0;
 800e7c8:	2300      	movs	r3, #0
 800e7ca:	73fb      	strb	r3, [r7, #15]

	/* Check if valid clock period requested */

	if ((VCSELPulsePeriodPCLK % 2) != 0) {
 800e7cc:	78bb      	ldrb	r3, [r7, #2]
 800e7ce:	f003 0301 	and.w	r3, r3, #1
 800e7d2:	b2db      	uxtb	r3, r3
 800e7d4:	2b00      	cmp	r3, #0
 800e7d6:	d003      	beq.n	800e7e0 <VL53L0X_set_vcsel_pulse_period+0x46>
		/* Value must be an even number */
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800e7d8:	23fc      	movs	r3, #252	; 0xfc
 800e7da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e7de:	e020      	b.n	800e822 <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE &&
 800e7e0:	78fb      	ldrb	r3, [r7, #3]
 800e7e2:	2b00      	cmp	r3, #0
 800e7e4:	d10d      	bne.n	800e802 <VL53L0X_set_vcsel_pulse_period+0x68>
 800e7e6:	78ba      	ldrb	r2, [r7, #2]
 800e7e8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e7ec:	429a      	cmp	r2, r3
 800e7ee:	d304      	bcc.n	800e7fa <VL53L0X_set_vcsel_pulse_period+0x60>
		(VCSELPulsePeriodPCLK < MinPreVcselPeriodPCLK ||
 800e7f0:	78ba      	ldrb	r2, [r7, #2]
 800e7f2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800e7f6:	429a      	cmp	r2, r3
 800e7f8:	d903      	bls.n	800e802 <VL53L0X_set_vcsel_pulse_period+0x68>
		VCSELPulsePeriodPCLK > MaxPreVcselPeriodPCLK)) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800e7fa:	23fc      	movs	r3, #252	; 0xfc
 800e7fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e800:	e00f      	b.n	800e822 <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE &&
 800e802:	78fb      	ldrb	r3, [r7, #3]
 800e804:	2b01      	cmp	r3, #1
 800e806:	d10c      	bne.n	800e822 <VL53L0X_set_vcsel_pulse_period+0x88>
 800e808:	78ba      	ldrb	r2, [r7, #2]
 800e80a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e80e:	429a      	cmp	r2, r3
 800e810:	d304      	bcc.n	800e81c <VL53L0X_set_vcsel_pulse_period+0x82>
		(VCSELPulsePeriodPCLK < MinFinalVcselPeriodPCLK ||
 800e812:	78ba      	ldrb	r2, [r7, #2]
 800e814:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e818:	429a      	cmp	r2, r3
 800e81a:	d902      	bls.n	800e822 <VL53L0X_set_vcsel_pulse_period+0x88>
		 VCSELPulsePeriodPCLK > MaxFinalVcselPeriodPCLK)) {

		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800e81c:	23fc      	movs	r3, #252	; 0xfc
 800e81e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Apply specific settings for the requested clock period */

	if (Status != VL53L0X_ERROR_NONE)
 800e822:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e826:	2b00      	cmp	r3, #0
 800e828:	d002      	beq.n	800e830 <VL53L0X_set_vcsel_pulse_period+0x96>
		return Status;
 800e82a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e82e:	e239      	b.n	800eca4 <VL53L0X_set_vcsel_pulse_period+0x50a>


	if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE) {
 800e830:	78fb      	ldrb	r3, [r7, #3]
 800e832:	2b00      	cmp	r3, #0
 800e834:	d150      	bne.n	800e8d8 <VL53L0X_set_vcsel_pulse_period+0x13e>

		/* Set phase check limits */
		if (VCSELPulsePeriodPCLK == 12) {
 800e836:	78bb      	ldrb	r3, [r7, #2]
 800e838:	2b0c      	cmp	r3, #12
 800e83a:	d110      	bne.n	800e85e <VL53L0X_set_vcsel_pulse_period+0xc4>

			Status = VL53L0X_WrByte(Dev,
 800e83c:	2218      	movs	r2, #24
 800e83e:	2157      	movs	r1, #87	; 0x57
 800e840:	6878      	ldr	r0, [r7, #4]
 800e842:	f001 fb11 	bl	800fe68 <VL53L0X_WrByte>
 800e846:	4603      	mov	r3, r0
 800e848:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x18);
			Status = VL53L0X_WrByte(Dev,
 800e84c:	2208      	movs	r2, #8
 800e84e:	2156      	movs	r1, #86	; 0x56
 800e850:	6878      	ldr	r0, [r7, #4]
 800e852:	f001 fb09 	bl	800fe68 <VL53L0X_WrByte>
 800e856:	4603      	mov	r3, r0
 800e858:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e85c:	e17f      	b.n	800eb5e <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 14) {
 800e85e:	78bb      	ldrb	r3, [r7, #2]
 800e860:	2b0e      	cmp	r3, #14
 800e862:	d110      	bne.n	800e886 <VL53L0X_set_vcsel_pulse_period+0xec>

			Status = VL53L0X_WrByte(Dev,
 800e864:	2230      	movs	r2, #48	; 0x30
 800e866:	2157      	movs	r1, #87	; 0x57
 800e868:	6878      	ldr	r0, [r7, #4]
 800e86a:	f001 fafd 	bl	800fe68 <VL53L0X_WrByte>
 800e86e:	4603      	mov	r3, r0
 800e870:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x30);
			Status = VL53L0X_WrByte(Dev,
 800e874:	2208      	movs	r2, #8
 800e876:	2156      	movs	r1, #86	; 0x56
 800e878:	6878      	ldr	r0, [r7, #4]
 800e87a:	f001 faf5 	bl	800fe68 <VL53L0X_WrByte>
 800e87e:	4603      	mov	r3, r0
 800e880:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e884:	e16b      	b.n	800eb5e <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 16) {
 800e886:	78bb      	ldrb	r3, [r7, #2]
 800e888:	2b10      	cmp	r3, #16
 800e88a:	d110      	bne.n	800e8ae <VL53L0X_set_vcsel_pulse_period+0x114>

			Status = VL53L0X_WrByte(Dev,
 800e88c:	2240      	movs	r2, #64	; 0x40
 800e88e:	2157      	movs	r1, #87	; 0x57
 800e890:	6878      	ldr	r0, [r7, #4]
 800e892:	f001 fae9 	bl	800fe68 <VL53L0X_WrByte>
 800e896:	4603      	mov	r3, r0
 800e898:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x40);
			Status = VL53L0X_WrByte(Dev,
 800e89c:	2208      	movs	r2, #8
 800e89e:	2156      	movs	r1, #86	; 0x56
 800e8a0:	6878      	ldr	r0, [r7, #4]
 800e8a2:	f001 fae1 	bl	800fe68 <VL53L0X_WrByte>
 800e8a6:	4603      	mov	r3, r0
 800e8a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e8ac:	e157      	b.n	800eb5e <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 18) {
 800e8ae:	78bb      	ldrb	r3, [r7, #2]
 800e8b0:	2b12      	cmp	r3, #18
 800e8b2:	f040 8154 	bne.w	800eb5e <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 800e8b6:	2250      	movs	r2, #80	; 0x50
 800e8b8:	2157      	movs	r1, #87	; 0x57
 800e8ba:	6878      	ldr	r0, [r7, #4]
 800e8bc:	f001 fad4 	bl	800fe68 <VL53L0X_WrByte>
 800e8c0:	4603      	mov	r3, r0
 800e8c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x50);
			Status = VL53L0X_WrByte(Dev,
 800e8c6:	2208      	movs	r2, #8
 800e8c8:	2156      	movs	r1, #86	; 0x56
 800e8ca:	6878      	ldr	r0, [r7, #4]
 800e8cc:	f001 facc 	bl	800fe68 <VL53L0X_WrByte>
 800e8d0:	4603      	mov	r3, r0
 800e8d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e8d6:	e142      	b.n	800eb5e <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		}
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE) {
 800e8d8:	78fb      	ldrb	r3, [r7, #3]
 800e8da:	2b01      	cmp	r3, #1
 800e8dc:	f040 813f 	bne.w	800eb5e <VL53L0X_set_vcsel_pulse_period+0x3c4>

		if (VCSELPulsePeriodPCLK == 8) {
 800e8e0:	78bb      	ldrb	r3, [r7, #2]
 800e8e2:	2b08      	cmp	r3, #8
 800e8e4:	d14c      	bne.n	800e980 <VL53L0X_set_vcsel_pulse_period+0x1e6>

			Status = VL53L0X_WrByte(Dev,
 800e8e6:	2210      	movs	r2, #16
 800e8e8:	2148      	movs	r1, #72	; 0x48
 800e8ea:	6878      	ldr	r0, [r7, #4]
 800e8ec:	f001 fabc 	bl	800fe68 <VL53L0X_WrByte>
 800e8f0:	4603      	mov	r3, r0
 800e8f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x10);
			Status = VL53L0X_WrByte(Dev,
 800e8f6:	2208      	movs	r2, #8
 800e8f8:	2147      	movs	r1, #71	; 0x47
 800e8fa:	6878      	ldr	r0, [r7, #4]
 800e8fc:	f001 fab4 	bl	800fe68 <VL53L0X_WrByte>
 800e900:	4603      	mov	r3, r0
 800e902:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800e906:	2202      	movs	r2, #2
 800e908:	2132      	movs	r1, #50	; 0x32
 800e90a:	6878      	ldr	r0, [r7, #4]
 800e90c:	f001 faac 	bl	800fe68 <VL53L0X_WrByte>
 800e910:	4603      	mov	r3, r0
 800e912:	461a      	mov	r2, r3
 800e914:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e918:	4313      	orrs	r3, r2
 800e91a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x02);
			Status |= VL53L0X_WrByte(Dev,
 800e91e:	220c      	movs	r2, #12
 800e920:	2130      	movs	r1, #48	; 0x30
 800e922:	6878      	ldr	r0, [r7, #4]
 800e924:	f001 faa0 	bl	800fe68 <VL53L0X_WrByte>
 800e928:	4603      	mov	r3, r0
 800e92a:	461a      	mov	r2, r3
 800e92c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e930:	4313      	orrs	r3, r2
 800e932:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x0C);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800e936:	2201      	movs	r2, #1
 800e938:	21ff      	movs	r1, #255	; 0xff
 800e93a:	6878      	ldr	r0, [r7, #4]
 800e93c:	f001 fa94 	bl	800fe68 <VL53L0X_WrByte>
 800e940:	4603      	mov	r3, r0
 800e942:	461a      	mov	r2, r3
 800e944:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e948:	4313      	orrs	r3, r2
 800e94a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800e94e:	2230      	movs	r2, #48	; 0x30
 800e950:	2130      	movs	r1, #48	; 0x30
 800e952:	6878      	ldr	r0, [r7, #4]
 800e954:	f001 fa88 	bl	800fe68 <VL53L0X_WrByte>
 800e958:	4603      	mov	r3, r0
 800e95a:	461a      	mov	r2, r3
 800e95c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e960:	4313      	orrs	r3, r2
 800e962:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x30);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800e966:	2200      	movs	r2, #0
 800e968:	21ff      	movs	r1, #255	; 0xff
 800e96a:	6878      	ldr	r0, [r7, #4]
 800e96c:	f001 fa7c 	bl	800fe68 <VL53L0X_WrByte>
 800e970:	4603      	mov	r3, r0
 800e972:	461a      	mov	r2, r3
 800e974:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e978:	4313      	orrs	r3, r2
 800e97a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e97e:	e0ee      	b.n	800eb5e <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 10) {
 800e980:	78bb      	ldrb	r3, [r7, #2]
 800e982:	2b0a      	cmp	r3, #10
 800e984:	d14c      	bne.n	800ea20 <VL53L0X_set_vcsel_pulse_period+0x286>

			Status = VL53L0X_WrByte(Dev,
 800e986:	2228      	movs	r2, #40	; 0x28
 800e988:	2148      	movs	r1, #72	; 0x48
 800e98a:	6878      	ldr	r0, [r7, #4]
 800e98c:	f001 fa6c 	bl	800fe68 <VL53L0X_WrByte>
 800e990:	4603      	mov	r3, r0
 800e992:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x28);
			Status = VL53L0X_WrByte(Dev,
 800e996:	2208      	movs	r2, #8
 800e998:	2147      	movs	r1, #71	; 0x47
 800e99a:	6878      	ldr	r0, [r7, #4]
 800e99c:	f001 fa64 	bl	800fe68 <VL53L0X_WrByte>
 800e9a0:	4603      	mov	r3, r0
 800e9a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800e9a6:	2203      	movs	r2, #3
 800e9a8:	2132      	movs	r1, #50	; 0x32
 800e9aa:	6878      	ldr	r0, [r7, #4]
 800e9ac:	f001 fa5c 	bl	800fe68 <VL53L0X_WrByte>
 800e9b0:	4603      	mov	r3, r0
 800e9b2:	461a      	mov	r2, r3
 800e9b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e9b8:	4313      	orrs	r3, r2
 800e9ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800e9be:	2209      	movs	r2, #9
 800e9c0:	2130      	movs	r1, #48	; 0x30
 800e9c2:	6878      	ldr	r0, [r7, #4]
 800e9c4:	f001 fa50 	bl	800fe68 <VL53L0X_WrByte>
 800e9c8:	4603      	mov	r3, r0
 800e9ca:	461a      	mov	r2, r3
 800e9cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e9d0:	4313      	orrs	r3, r2
 800e9d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x09);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800e9d6:	2201      	movs	r2, #1
 800e9d8:	21ff      	movs	r1, #255	; 0xff
 800e9da:	6878      	ldr	r0, [r7, #4]
 800e9dc:	f001 fa44 	bl	800fe68 <VL53L0X_WrByte>
 800e9e0:	4603      	mov	r3, r0
 800e9e2:	461a      	mov	r2, r3
 800e9e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e9e8:	4313      	orrs	r3, r2
 800e9ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800e9ee:	2220      	movs	r2, #32
 800e9f0:	2130      	movs	r1, #48	; 0x30
 800e9f2:	6878      	ldr	r0, [r7, #4]
 800e9f4:	f001 fa38 	bl	800fe68 <VL53L0X_WrByte>
 800e9f8:	4603      	mov	r3, r0
 800e9fa:	461a      	mov	r2, r3
 800e9fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ea00:	4313      	orrs	r3, r2
 800ea02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800ea06:	2200      	movs	r2, #0
 800ea08:	21ff      	movs	r1, #255	; 0xff
 800ea0a:	6878      	ldr	r0, [r7, #4]
 800ea0c:	f001 fa2c 	bl	800fe68 <VL53L0X_WrByte>
 800ea10:	4603      	mov	r3, r0
 800ea12:	461a      	mov	r2, r3
 800ea14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ea18:	4313      	orrs	r3, r2
 800ea1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ea1e:	e09e      	b.n	800eb5e <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 12) {
 800ea20:	78bb      	ldrb	r3, [r7, #2]
 800ea22:	2b0c      	cmp	r3, #12
 800ea24:	d14c      	bne.n	800eac0 <VL53L0X_set_vcsel_pulse_period+0x326>

			Status = VL53L0X_WrByte(Dev,
 800ea26:	2238      	movs	r2, #56	; 0x38
 800ea28:	2148      	movs	r1, #72	; 0x48
 800ea2a:	6878      	ldr	r0, [r7, #4]
 800ea2c:	f001 fa1c 	bl	800fe68 <VL53L0X_WrByte>
 800ea30:	4603      	mov	r3, r0
 800ea32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x38);
			Status = VL53L0X_WrByte(Dev,
 800ea36:	2208      	movs	r2, #8
 800ea38:	2147      	movs	r1, #71	; 0x47
 800ea3a:	6878      	ldr	r0, [r7, #4]
 800ea3c:	f001 fa14 	bl	800fe68 <VL53L0X_WrByte>
 800ea40:	4603      	mov	r3, r0
 800ea42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800ea46:	2203      	movs	r2, #3
 800ea48:	2132      	movs	r1, #50	; 0x32
 800ea4a:	6878      	ldr	r0, [r7, #4]
 800ea4c:	f001 fa0c 	bl	800fe68 <VL53L0X_WrByte>
 800ea50:	4603      	mov	r3, r0
 800ea52:	461a      	mov	r2, r3
 800ea54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ea58:	4313      	orrs	r3, r2
 800ea5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800ea5e:	2208      	movs	r2, #8
 800ea60:	2130      	movs	r1, #48	; 0x30
 800ea62:	6878      	ldr	r0, [r7, #4]
 800ea64:	f001 fa00 	bl	800fe68 <VL53L0X_WrByte>
 800ea68:	4603      	mov	r3, r0
 800ea6a:	461a      	mov	r2, r3
 800ea6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ea70:	4313      	orrs	r3, r2
 800ea72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x08);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800ea76:	2201      	movs	r2, #1
 800ea78:	21ff      	movs	r1, #255	; 0xff
 800ea7a:	6878      	ldr	r0, [r7, #4]
 800ea7c:	f001 f9f4 	bl	800fe68 <VL53L0X_WrByte>
 800ea80:	4603      	mov	r3, r0
 800ea82:	461a      	mov	r2, r3
 800ea84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ea88:	4313      	orrs	r3, r2
 800ea8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800ea8e:	2220      	movs	r2, #32
 800ea90:	2130      	movs	r1, #48	; 0x30
 800ea92:	6878      	ldr	r0, [r7, #4]
 800ea94:	f001 f9e8 	bl	800fe68 <VL53L0X_WrByte>
 800ea98:	4603      	mov	r3, r0
 800ea9a:	461a      	mov	r2, r3
 800ea9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eaa0:	4313      	orrs	r3, r2
 800eaa2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800eaa6:	2200      	movs	r2, #0
 800eaa8:	21ff      	movs	r1, #255	; 0xff
 800eaaa:	6878      	ldr	r0, [r7, #4]
 800eaac:	f001 f9dc 	bl	800fe68 <VL53L0X_WrByte>
 800eab0:	4603      	mov	r3, r0
 800eab2:	461a      	mov	r2, r3
 800eab4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eab8:	4313      	orrs	r3, r2
 800eaba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800eabe:	e04e      	b.n	800eb5e <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 14) {
 800eac0:	78bb      	ldrb	r3, [r7, #2]
 800eac2:	2b0e      	cmp	r3, #14
 800eac4:	d14b      	bne.n	800eb5e <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 800eac6:	2248      	movs	r2, #72	; 0x48
 800eac8:	2148      	movs	r1, #72	; 0x48
 800eaca:	6878      	ldr	r0, [r7, #4]
 800eacc:	f001 f9cc 	bl	800fe68 <VL53L0X_WrByte>
 800ead0:	4603      	mov	r3, r0
 800ead2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x048);
			Status = VL53L0X_WrByte(Dev,
 800ead6:	2208      	movs	r2, #8
 800ead8:	2147      	movs	r1, #71	; 0x47
 800eada:	6878      	ldr	r0, [r7, #4]
 800eadc:	f001 f9c4 	bl	800fe68 <VL53L0X_WrByte>
 800eae0:	4603      	mov	r3, r0
 800eae2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800eae6:	2203      	movs	r2, #3
 800eae8:	2132      	movs	r1, #50	; 0x32
 800eaea:	6878      	ldr	r0, [r7, #4]
 800eaec:	f001 f9bc 	bl	800fe68 <VL53L0X_WrByte>
 800eaf0:	4603      	mov	r3, r0
 800eaf2:	461a      	mov	r2, r3
 800eaf4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eaf8:	4313      	orrs	r3, r2
 800eafa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800eafe:	2207      	movs	r2, #7
 800eb00:	2130      	movs	r1, #48	; 0x30
 800eb02:	6878      	ldr	r0, [r7, #4]
 800eb04:	f001 f9b0 	bl	800fe68 <VL53L0X_WrByte>
 800eb08:	4603      	mov	r3, r0
 800eb0a:	461a      	mov	r2, r3
 800eb0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eb10:	4313      	orrs	r3, r2
 800eb12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x07);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800eb16:	2201      	movs	r2, #1
 800eb18:	21ff      	movs	r1, #255	; 0xff
 800eb1a:	6878      	ldr	r0, [r7, #4]
 800eb1c:	f001 f9a4 	bl	800fe68 <VL53L0X_WrByte>
 800eb20:	4603      	mov	r3, r0
 800eb22:	461a      	mov	r2, r3
 800eb24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eb28:	4313      	orrs	r3, r2
 800eb2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800eb2e:	2220      	movs	r2, #32
 800eb30:	2130      	movs	r1, #48	; 0x30
 800eb32:	6878      	ldr	r0, [r7, #4]
 800eb34:	f001 f998 	bl	800fe68 <VL53L0X_WrByte>
 800eb38:	4603      	mov	r3, r0
 800eb3a:	461a      	mov	r2, r3
 800eb3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eb40:	4313      	orrs	r3, r2
 800eb42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800eb46:	2200      	movs	r2, #0
 800eb48:	21ff      	movs	r1, #255	; 0xff
 800eb4a:	6878      	ldr	r0, [r7, #4]
 800eb4c:	f001 f98c 	bl	800fe68 <VL53L0X_WrByte>
 800eb50:	4603      	mov	r3, r0
 800eb52:	461a      	mov	r2, r3
 800eb54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eb58:	4313      	orrs	r3, r2
 800eb5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}


	/* Re-calculate and apply timeouts, in macro periods */

	if (Status == VL53L0X_ERROR_NONE) {
 800eb5e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800eb62:	2b00      	cmp	r3, #0
 800eb64:	d17f      	bne.n	800ec66 <VL53L0X_set_vcsel_pulse_period+0x4cc>
		vcsel_period_reg = VL53L0X_encode_vcsel_period((uint8_t)
 800eb66:	78bb      	ldrb	r3, [r7, #2]
 800eb68:	4618      	mov	r0, r3
 800eb6a:	f7fe fe37 	bl	800d7dc <VL53L0X_encode_vcsel_period>
 800eb6e:	4603      	mov	r3, r0
 800eb70:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		* using the new VCSEL period.
		*
		* For the MSRC timeout, the same applies - this timeout being
		* dependant on the pre-range vcsel period.
		*/
		switch (VcselPeriodType) {
 800eb74:	78fb      	ldrb	r3, [r7, #3]
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	d002      	beq.n	800eb80 <VL53L0X_set_vcsel_pulse_period+0x3e6>
 800eb7a:	2b01      	cmp	r3, #1
 800eb7c:	d045      	beq.n	800ec0a <VL53L0X_set_vcsel_pulse_period+0x470>
 800eb7e:	e06e      	b.n	800ec5e <VL53L0X_set_vcsel_pulse_period+0x4c4>
		case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
			Status = get_sequence_step_timeout(Dev,
 800eb80:	f107 0314 	add.w	r3, r7, #20
 800eb84:	461a      	mov	r2, r3
 800eb86:	2103      	movs	r1, #3
 800eb88:	6878      	ldr	r0, [r7, #4]
 800eb8a:	f7ff fc33 	bl	800e3f4 <get_sequence_step_timeout>
 800eb8e:	4603      	mov	r3, r0
 800eb90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800eb94:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	d109      	bne.n	800ebb0 <VL53L0X_set_vcsel_pulse_period+0x416>
				Status = get_sequence_step_timeout(Dev,
 800eb9c:	f107 0310 	add.w	r3, r7, #16
 800eba0:	461a      	mov	r2, r3
 800eba2:	2102      	movs	r1, #2
 800eba4:	6878      	ldr	r0, [r7, #4]
 800eba6:	f7ff fc25 	bl	800e3f4 <get_sequence_step_timeout>
 800ebaa:	4603      	mov	r3, r0
 800ebac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					&MsrcTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800ebb0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	d109      	bne.n	800ebcc <VL53L0X_set_vcsel_pulse_period+0x432>
				Status = VL53L0X_WrByte(Dev,
 800ebb8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800ebbc:	461a      	mov	r2, r3
 800ebbe:	2150      	movs	r1, #80	; 0x50
 800ebc0:	6878      	ldr	r0, [r7, #4]
 800ebc2:	f001 f951 	bl	800fe68 <VL53L0X_WrByte>
 800ebc6:	4603      	mov	r3, r0
 800ebc8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 800ebcc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ebd0:	2b00      	cmp	r3, #0
 800ebd2:	d108      	bne.n	800ebe6 <VL53L0X_set_vcsel_pulse_period+0x44c>
				Status = set_sequence_step_timeout(Dev,
 800ebd4:	697b      	ldr	r3, [r7, #20]
 800ebd6:	461a      	mov	r2, r3
 800ebd8:	2103      	movs	r1, #3
 800ebda:	6878      	ldr	r0, [r7, #4]
 800ebdc:	f7ff fceb 	bl	800e5b6 <set_sequence_step_timeout>
 800ebe0:	4603      	mov	r3, r0
 800ebe2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_PRE_RANGE,
					PreRangeTimeoutMicroSeconds);


			if (Status == VL53L0X_ERROR_NONE)
 800ebe6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ebea:	2b00      	cmp	r3, #0
 800ebec:	d108      	bne.n	800ec00 <VL53L0X_set_vcsel_pulse_period+0x466>
				Status = set_sequence_step_timeout(Dev,
 800ebee:	693b      	ldr	r3, [r7, #16]
 800ebf0:	461a      	mov	r2, r3
 800ebf2:	2102      	movs	r1, #2
 800ebf4:	6878      	ldr	r0, [r7, #4]
 800ebf6:	f7ff fcde 	bl	800e5b6 <set_sequence_step_timeout>
 800ebfa:	4603      	mov	r3, r0
 800ebfc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					MsrcTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	78ba      	ldrb	r2, [r7, #2]
 800ec04:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				Dev,
				PreRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 800ec08:	e02e      	b.n	800ec68 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
			Status = get_sequence_step_timeout(Dev,
 800ec0a:	f107 0318 	add.w	r3, r7, #24
 800ec0e:	461a      	mov	r2, r3
 800ec10:	2104      	movs	r1, #4
 800ec12:	6878      	ldr	r0, [r7, #4]
 800ec14:	f7ff fbee 	bl	800e3f4 <get_sequence_step_timeout>
 800ec18:	4603      	mov	r3, r0
 800ec1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_FINAL_RANGE,
				&FinalRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800ec1e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ec22:	2b00      	cmp	r3, #0
 800ec24:	d109      	bne.n	800ec3a <VL53L0X_set_vcsel_pulse_period+0x4a0>
				Status = VL53L0X_WrByte(Dev,
 800ec26:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800ec2a:	461a      	mov	r2, r3
 800ec2c:	2170      	movs	r1, #112	; 0x70
 800ec2e:	6878      	ldr	r0, [r7, #4]
 800ec30:	f001 f91a 	bl	800fe68 <VL53L0X_WrByte>
 800ec34:	4603      	mov	r3, r0
 800ec36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 800ec3a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ec3e:	2b00      	cmp	r3, #0
 800ec40:	d108      	bne.n	800ec54 <VL53L0X_set_vcsel_pulse_period+0x4ba>
				Status = set_sequence_step_timeout(Dev,
 800ec42:	69bb      	ldr	r3, [r7, #24]
 800ec44:	461a      	mov	r2, r3
 800ec46:	2104      	movs	r1, #4
 800ec48:	6878      	ldr	r0, [r7, #4]
 800ec4a:	f7ff fcb4 	bl	800e5b6 <set_sequence_step_timeout>
 800ec4e:	4603      	mov	r3, r0
 800ec50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					FinalRangeTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	78ba      	ldrb	r2, [r7, #2]
 800ec58:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				Dev,
				FinalRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 800ec5c:	e004      	b.n	800ec68 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ec5e:	23fc      	movs	r3, #252	; 0xfc
 800ec60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ec64:	e000      	b.n	800ec68 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		}
	}
 800ec66:	bf00      	nop

	/* Finally, the timing budget must be re-applied */
	if (Status == VL53L0X_ERROR_NONE) {
 800ec68:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ec6c:	2b00      	cmp	r3, #0
 800ec6e:	d109      	bne.n	800ec84 <VL53L0X_set_vcsel_pulse_period+0x4ea>
		VL53L0X_GETPARAMETERFIELD(Dev,
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	695b      	ldr	r3, [r3, #20]
 800ec74:	61fb      	str	r3, [r7, #28]
			MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);

		Status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 800ec76:	69f9      	ldr	r1, [r7, #28]
 800ec78:	6878      	ldr	r0, [r7, #4]
 800ec7a:	f7fc fd99 	bl	800b7b0 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 800ec7e:	4603      	mov	r3, r0
 800ec80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Perform the phase calibration. This is needed after changing on
	 * vcsel period.
	 * get_data_enable = 0, restore_config = 1 */
	if (Status == VL53L0X_ERROR_NONE)
 800ec84:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ec88:	2b00      	cmp	r3, #0
 800ec8a:	d109      	bne.n	800eca0 <VL53L0X_set_vcsel_pulse_period+0x506>
		Status = VL53L0X_perform_phase_calibration(
 800ec8c:	f107 010f 	add.w	r1, r7, #15
 800ec90:	2301      	movs	r3, #1
 800ec92:	2200      	movs	r2, #0
 800ec94:	6878      	ldr	r0, [r7, #4]
 800ec96:	f7fe fc99 	bl	800d5cc <VL53L0X_perform_phase_calibration>
 800ec9a:	4603      	mov	r3, r0
 800ec9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Dev, &PhaseCalInt, 0, 1);

	return Status;
 800eca0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800eca4:	4618      	mov	r0, r3
 800eca6:	3728      	adds	r7, #40	; 0x28
 800eca8:	46bd      	mov	sp, r7
 800ecaa:	bd80      	pop	{r7, pc}

0800ecac <VL53L0X_get_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 800ecac:	b580      	push	{r7, lr}
 800ecae:	b086      	sub	sp, #24
 800ecb0:	af00      	add	r7, sp, #0
 800ecb2:	60f8      	str	r0, [r7, #12]
 800ecb4:	460b      	mov	r3, r1
 800ecb6:	607a      	str	r2, [r7, #4]
 800ecb8:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ecba:	2300      	movs	r3, #0
 800ecbc:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 800ecbe:	7afb      	ldrb	r3, [r7, #11]
 800ecc0:	2b00      	cmp	r3, #0
 800ecc2:	d002      	beq.n	800ecca <VL53L0X_get_vcsel_pulse_period+0x1e>
 800ecc4:	2b01      	cmp	r3, #1
 800ecc6:	d00a      	beq.n	800ecde <VL53L0X_get_vcsel_pulse_period+0x32>
 800ecc8:	e013      	b.n	800ecf2 <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800ecca:	f107 0316 	add.w	r3, r7, #22
 800ecce:	461a      	mov	r2, r3
 800ecd0:	2150      	movs	r1, #80	; 0x50
 800ecd2:	68f8      	ldr	r0, [r7, #12]
 800ecd4:	f001 f94a 	bl	800ff6c <VL53L0X_RdByte>
 800ecd8:	4603      	mov	r3, r0
 800ecda:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800ecdc:	e00b      	b.n	800ecf6 <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800ecde:	f107 0316 	add.w	r3, r7, #22
 800ece2:	461a      	mov	r2, r3
 800ece4:	2170      	movs	r1, #112	; 0x70
 800ece6:	68f8      	ldr	r0, [r7, #12]
 800ece8:	f001 f940 	bl	800ff6c <VL53L0X_RdByte>
 800ecec:	4603      	mov	r3, r0
 800ecee:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800ecf0:	e001      	b.n	800ecf6 <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ecf2:	23fc      	movs	r3, #252	; 0xfc
 800ecf4:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 800ecf6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ecfa:	2b00      	cmp	r3, #0
 800ecfc:	d107      	bne.n	800ed0e <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 800ecfe:	7dbb      	ldrb	r3, [r7, #22]
 800ed00:	4618      	mov	r0, r3
 800ed02:	f7fe fd58 	bl	800d7b6 <VL53L0X_decode_vcsel_period>
 800ed06:	4603      	mov	r3, r0
 800ed08:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	701a      	strb	r2, [r3, #0]

	return Status;
 800ed0e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ed12:	4618      	mov	r0, r3
 800ed14:	3718      	adds	r7, #24
 800ed16:	46bd      	mov	sp, r7
 800ed18:	bd80      	pop	{r7, pc}

0800ed1a <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 800ed1a:	b580      	push	{r7, lr}
 800ed1c:	b092      	sub	sp, #72	; 0x48
 800ed1e:	af00      	add	r7, sp, #0
 800ed20:	6078      	str	r0, [r7, #4]
 800ed22:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ed24:	2300      	movs	r3, #0
 800ed26:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800ed2a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800ed2e:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800ed30:	f240 7376 	movw	r3, #1910	; 0x776
 800ed34:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t EndOverheadMicroSeconds		= 960;
 800ed36:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800ed3a:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800ed3c:	f44f 7325 	mov.w	r3, #660	; 0x294
 800ed40:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t TccOverheadMicroSeconds		= 590;
 800ed42:	f240 234e 	movw	r3, #590	; 0x24e
 800ed46:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t DssOverheadMicroSeconds		= 690;
 800ed48:	f240 23b2 	movw	r3, #690	; 0x2b2
 800ed4c:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800ed4e:	f44f 7325 	mov.w	r3, #660	; 0x294
 800ed52:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800ed54:	f240 2326 	movw	r3, #550	; 0x226
 800ed58:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800ed5a:	2300      	movs	r3, #0
 800ed5c:	60fb      	str	r3, [r7, #12]
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
 800ed5e:	f644 6320 	movw	r3, #20000	; 0x4e20
 800ed62:	623b      	str	r3, [r7, #32]
	uint32_t SubTimeout = 0;
 800ed64:	2300      	movs	r3, #0
 800ed66:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
 800ed68:	683a      	ldr	r2, [r7, #0]
 800ed6a:	6a3b      	ldr	r3, [r7, #32]
 800ed6c:	429a      	cmp	r2, r3
 800ed6e:	d205      	bcs.n	800ed7c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x62>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ed70:	23fc      	movs	r3, #252	; 0xfc
 800ed72:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		return Status;
 800ed76:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800ed7a:	e0aa      	b.n	800eed2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 800ed7c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ed7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed80:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 800ed82:	683a      	ldr	r2, [r7, #0]
 800ed84:	1ad3      	subs	r3, r2, r3
 800ed86:	643b      	str	r3, [r7, #64]	; 0x40

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800ed88:	f107 0314 	add.w	r3, r7, #20
 800ed8c:	4619      	mov	r1, r3
 800ed8e:	6878      	ldr	r0, [r7, #4]
 800ed90:	f7fc fe58 	bl	800ba44 <VL53L0X_GetSequenceStepEnables>
 800ed94:	4603      	mov	r3, r0
 800ed96:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	if (Status == VL53L0X_ERROR_NONE &&
 800ed9a:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800ed9e:	2b00      	cmp	r3, #0
 800eda0:	d15b      	bne.n	800ee5a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
		(SchedulerSequenceSteps.TccOn  ||
 800eda2:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 800eda4:	2b00      	cmp	r3, #0
 800eda6:	d105      	bne.n	800edb4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.MsrcOn ||
 800eda8:	7d7b      	ldrb	r3, [r7, #21]
		(SchedulerSequenceSteps.TccOn  ||
 800edaa:	2b00      	cmp	r3, #0
 800edac:	d102      	bne.n	800edb4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.DssOn)) {
 800edae:	7dbb      	ldrb	r3, [r7, #22]
		SchedulerSequenceSteps.MsrcOn ||
 800edb0:	2b00      	cmp	r3, #0
 800edb2:	d052      	beq.n	800ee5a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 800edb4:	f107 0310 	add.w	r3, r7, #16
 800edb8:	461a      	mov	r2, r3
 800edba:	2102      	movs	r1, #2
 800edbc:	6878      	ldr	r0, [r7, #4]
 800edbe:	f7ff fb19 	bl	800e3f4 <get_sequence_step_timeout>
 800edc2:	4603      	mov	r3, r0
 800edc4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					&MsrcDccTccTimeoutMicroSeconds);

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled. */

		if (Status != VL53L0X_ERROR_NONE)
 800edc8:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800edcc:	2b00      	cmp	r3, #0
 800edce:	d002      	beq.n	800edd6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbc>
			return Status;
 800edd0:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800edd4:	e07d      	b.n	800eed2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 800edd6:	7d3b      	ldrb	r3, [r7, #20]
 800edd8:	2b00      	cmp	r3, #0
 800edda:	d00f      	beq.n	800edfc <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 800eddc:	693b      	ldr	r3, [r7, #16]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 800edde:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ede0:	4413      	add	r3, r2
 800ede2:	61fb      	str	r3, [r7, #28]

			if (SubTimeout <
 800ede4:	69fa      	ldr	r2, [r7, #28]
 800ede6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ede8:	429a      	cmp	r2, r3
 800edea:	d204      	bcs.n	800edf6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xdc>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 800edec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800edee:	69fb      	ldr	r3, [r7, #28]
 800edf0:	1ad3      	subs	r3, r2, r3
 800edf2:	643b      	str	r3, [r7, #64]	; 0x40
 800edf4:	e002      	b.n	800edfc <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800edf6:	23fc      	movs	r3, #252	; 0xfc
 800edf8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 800edfc:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	d002      	beq.n	800ee0a <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf0>
			LOG_FUNCTION_END(Status);
			return Status;
 800ee04:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800ee08:	e063      	b.n	800eed2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 800ee0a:	7dbb      	ldrb	r3, [r7, #22]
 800ee0c:	2b00      	cmp	r3, #0
 800ee0e:	d011      	beq.n	800ee34 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x11a>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 800ee10:	693a      	ldr	r2, [r7, #16]
 800ee12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee14:	4413      	add	r3, r2
 800ee16:	005b      	lsls	r3, r3, #1
 800ee18:	61fb      	str	r3, [r7, #28]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800ee1a:	69fa      	ldr	r2, [r7, #28]
 800ee1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ee1e:	429a      	cmp	r2, r3
 800ee20:	d204      	bcs.n	800ee2c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x112>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800ee22:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ee24:	69fb      	ldr	r3, [r7, #28]
 800ee26:	1ad3      	subs	r3, r2, r3
 800ee28:	643b      	str	r3, [r7, #64]	; 0x40
 800ee2a:	e016      	b.n	800ee5a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ee2c:	23fc      	movs	r3, #252	; 0xfc
 800ee2e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800ee32:	e012      	b.n	800ee5a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 800ee34:	7d7b      	ldrb	r3, [r7, #21]
 800ee36:	2b00      	cmp	r3, #0
 800ee38:	d00f      	beq.n	800ee5a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 800ee3a:	693b      	ldr	r3, [r7, #16]
 800ee3c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ee3e:	4413      	add	r3, r2
 800ee40:	61fb      	str	r3, [r7, #28]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800ee42:	69fa      	ldr	r2, [r7, #28]
 800ee44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ee46:	429a      	cmp	r2, r3
 800ee48:	d204      	bcs.n	800ee54 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x13a>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800ee4a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ee4c:	69fb      	ldr	r3, [r7, #28]
 800ee4e:	1ad3      	subs	r3, r2, r3
 800ee50:	643b      	str	r3, [r7, #64]	; 0x40
 800ee52:	e002      	b.n	800ee5a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ee54:	23fc      	movs	r3, #252	; 0xfc
 800ee56:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 800ee5a:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800ee5e:	2b00      	cmp	r3, #0
 800ee60:	d002      	beq.n	800ee68 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x14e>
		LOG_FUNCTION_END(Status);
		return Status;
 800ee62:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800ee66:	e034      	b.n	800eed2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 800ee68:	7dfb      	ldrb	r3, [r7, #23]
 800ee6a:	2b00      	cmp	r3, #0
 800ee6c:	d019      	beq.n	800eea2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 800ee6e:	f107 030c 	add.w	r3, r7, #12
 800ee72:	461a      	mov	r2, r3
 800ee74:	2103      	movs	r1, #3
 800ee76:	6878      	ldr	r0, [r7, #4]
 800ee78:	f7ff fabc 	bl	800e3f4 <get_sequence_step_timeout>
 800ee7c:	4603      	mov	r3, r0
 800ee7e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 800ee82:	68fb      	ldr	r3, [r7, #12]
 800ee84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ee86:	4413      	add	r3, r2
 800ee88:	61fb      	str	r3, [r7, #28]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800ee8a:	69fa      	ldr	r2, [r7, #28]
 800ee8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ee8e:	429a      	cmp	r2, r3
 800ee90:	d204      	bcs.n	800ee9c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x182>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 800ee92:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ee94:	69fb      	ldr	r3, [r7, #28]
 800ee96:	1ad3      	subs	r3, r2, r3
 800ee98:	643b      	str	r3, [r7, #64]	; 0x40
 800ee9a:	e002      	b.n	800eea2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ee9c:	23fc      	movs	r3, #252	; 0xfc
 800ee9e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 800eea2:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800eea6:	2b00      	cmp	r3, #0
 800eea8:	d111      	bne.n	800eece <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>
		SchedulerSequenceSteps.FinalRangeOn) {
 800eeaa:	7e3b      	ldrb	r3, [r7, #24]
	if (Status == VL53L0X_ERROR_NONE &&
 800eeac:	2b00      	cmp	r3, #0
 800eeae:	d00e      	beq.n	800eece <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>

		FinalRangeTimingBudgetMicroSeconds -=
 800eeb0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800eeb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eeb4:	1ad3      	subs	r3, r2, r3
 800eeb6:	643b      	str	r3, [r7, #64]	; 0x40
		 * budget and the sum of all other timeouts within the sequence.
		 * If there is no room for the final range timeout, then an error
		 * will be set. Otherwise the remaining time will be applied to
		 * the final range.
		 */
		Status = set_sequence_step_timeout(Dev,
 800eeb8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800eeba:	2104      	movs	r1, #4
 800eebc:	6878      	ldr	r0, [r7, #4]
 800eebe:	f7ff fb7a 	bl	800e5b6 <set_sequence_step_timeout>
 800eec2:	4603      	mov	r3, r0
 800eec4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	683a      	ldr	r2, [r7, #0]
 800eecc:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);

	return Status;
 800eece:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 800eed2:	4618      	mov	r0, r3
 800eed4:	3748      	adds	r7, #72	; 0x48
 800eed6:	46bd      	mov	sp, r7
 800eed8:	bd80      	pop	{r7, pc}

0800eeda <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800eeda:	b580      	push	{r7, lr}
 800eedc:	b090      	sub	sp, #64	; 0x40
 800eede:	af00      	add	r7, sp, #0
 800eee0:	6078      	str	r0, [r7, #4]
 800eee2:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800eee4:	2300      	movs	r3, #0
 800eee6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800eeea:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800eeee:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800eef0:	f240 7376 	movw	r3, #1910	; 0x776
 800eef4:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 800eef6:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800eefa:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800eefc:	f44f 7325 	mov.w	r3, #660	; 0x294
 800ef00:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 800ef02:	f240 234e 	movw	r3, #590	; 0x24e
 800ef06:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 800ef08:	f240 23b2 	movw	r3, #690	; 0x2b2
 800ef0c:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800ef0e:	f44f 7325 	mov.w	r3, #660	; 0x294
 800ef12:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800ef14:	f240 2326 	movw	r3, #550	; 0x226
 800ef18:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800ef1a:	2300      	movs	r3, #0
 800ef1c:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 800ef1e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ef20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ef22:	441a      	add	r2, r3
 800ef24:	683b      	ldr	r3, [r7, #0]
 800ef26:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800ef28:	f107 0318 	add.w	r3, r7, #24
 800ef2c:	4619      	mov	r1, r3
 800ef2e:	6878      	ldr	r0, [r7, #4]
 800ef30:	f7fc fd88 	bl	800ba44 <VL53L0X_GetSequenceStepEnables>
 800ef34:	4603      	mov	r3, r0
 800ef36:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 800ef3a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ef3e:	2b00      	cmp	r3, #0
 800ef40:	d002      	beq.n	800ef48 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
		LOG_FUNCTION_END(Status);
		return Status;
 800ef42:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ef46:	e075      	b.n	800f034 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 800ef48:	7e3b      	ldrb	r3, [r7, #24]
 800ef4a:	2b00      	cmp	r3, #0
 800ef4c:	d105      	bne.n	800ef5a <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 800ef4e:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 800ef50:	2b00      	cmp	r3, #0
 800ef52:	d102      	bne.n	800ef5a <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn) {
 800ef54:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 800ef56:	2b00      	cmp	r3, #0
 800ef58:	d030      	beq.n	800efbc <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

		Status = get_sequence_step_timeout(Dev,
 800ef5a:	f107 0310 	add.w	r3, r7, #16
 800ef5e:	461a      	mov	r2, r3
 800ef60:	2102      	movs	r1, #2
 800ef62:	6878      	ldr	r0, [r7, #4]
 800ef64:	f7ff fa46 	bl	800e3f4 <get_sequence_step_timeout>
 800ef68:	4603      	mov	r3, r0
 800ef6a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 800ef6e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ef72:	2b00      	cmp	r3, #0
 800ef74:	d122      	bne.n	800efbc <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
			if (SchedulerSequenceSteps.TccOn) {
 800ef76:	7e3b      	ldrb	r3, [r7, #24]
 800ef78:	2b00      	cmp	r3, #0
 800ef7a:	d007      	beq.n	800ef8c <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800ef7c:	683b      	ldr	r3, [r7, #0]
 800ef7e:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800ef80:	6939      	ldr	r1, [r7, #16]
 800ef82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef84:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800ef86:	441a      	add	r2, r3
 800ef88:	683b      	ldr	r3, [r7, #0]
 800ef8a:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 800ef8c:	7ebb      	ldrb	r3, [r7, #26]
 800ef8e:	2b00      	cmp	r3, #0
 800ef90:	d009      	beq.n	800efa6 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
				*pMeasurementTimingBudgetMicroSeconds +=
 800ef92:	683b      	ldr	r3, [r7, #0]
 800ef94:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 800ef96:	6939      	ldr	r1, [r7, #16]
 800ef98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef9a:	440b      	add	r3, r1
 800ef9c:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 800ef9e:	441a      	add	r2, r3
 800efa0:	683b      	ldr	r3, [r7, #0]
 800efa2:	601a      	str	r2, [r3, #0]
 800efa4:	e00a      	b.n	800efbc <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 800efa6:	7e7b      	ldrb	r3, [r7, #25]
 800efa8:	2b00      	cmp	r3, #0
 800efaa:	d007      	beq.n	800efbc <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800efac:	683b      	ldr	r3, [r7, #0]
 800efae:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800efb0:	6939      	ldr	r1, [r7, #16]
 800efb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efb4:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800efb6:	441a      	add	r2, r3
 800efb8:	683b      	ldr	r3, [r7, #0]
 800efba:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800efbc:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800efc0:	2b00      	cmp	r3, #0
 800efc2:	d114      	bne.n	800efee <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
		if (SchedulerSequenceSteps.PreRangeOn) {
 800efc4:	7efb      	ldrb	r3, [r7, #27]
 800efc6:	2b00      	cmp	r3, #0
 800efc8:	d011      	beq.n	800efee <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
			Status = get_sequence_step_timeout(Dev,
 800efca:	f107 030c 	add.w	r3, r7, #12
 800efce:	461a      	mov	r2, r3
 800efd0:	2103      	movs	r1, #3
 800efd2:	6878      	ldr	r0, [r7, #4]
 800efd4:	f7ff fa0e 	bl	800e3f4 <get_sequence_step_timeout>
 800efd8:	4603      	mov	r3, r0
 800efda:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800efde:	683b      	ldr	r3, [r7, #0]
 800efe0:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 800efe2:	68f9      	ldr	r1, [r7, #12]
 800efe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efe6:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800efe8:	441a      	add	r2, r3
 800efea:	683b      	ldr	r3, [r7, #0]
 800efec:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800efee:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800eff2:	2b00      	cmp	r3, #0
 800eff4:	d114      	bne.n	800f020 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 800eff6:	7f3b      	ldrb	r3, [r7, #28]
 800eff8:	2b00      	cmp	r3, #0
 800effa:	d011      	beq.n	800f020 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
			Status = get_sequence_step_timeout(Dev,
 800effc:	f107 0314 	add.w	r3, r7, #20
 800f000:	461a      	mov	r2, r3
 800f002:	2104      	movs	r1, #4
 800f004:	6878      	ldr	r0, [r7, #4]
 800f006:	f7ff f9f5 	bl	800e3f4 <get_sequence_step_timeout>
 800f00a:	4603      	mov	r3, r0
 800f00c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800f010:	683b      	ldr	r3, [r7, #0]
 800f012:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 800f014:	6979      	ldr	r1, [r7, #20]
 800f016:	6a3b      	ldr	r3, [r7, #32]
 800f018:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800f01a:	441a      	add	r2, r3
 800f01c:	683b      	ldr	r3, [r7, #0]
 800f01e:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800f020:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800f024:	2b00      	cmp	r3, #0
 800f026:	d103      	bne.n	800f030 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
		VL53L0X_SETPARAMETERFIELD(Dev,
 800f028:	683b      	ldr	r3, [r7, #0]
 800f02a:	681a      	ldr	r2, [r3, #0]
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800f030:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800f034:	4618      	mov	r0, r3
 800f036:	3740      	adds	r7, #64	; 0x40
 800f038:	46bd      	mov	sp, r7
 800f03a:	bd80      	pop	{r7, pc}

0800f03c <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 800f03c:	b580      	push	{r7, lr}
 800f03e:	b088      	sub	sp, #32
 800f040:	af00      	add	r7, sp, #0
 800f042:	6078      	str	r0, [r7, #4]
 800f044:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800f046:	2300      	movs	r3, #0
 800f048:	77fb      	strb	r3, [r7, #31]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 800f04a:	2300      	movs	r3, #0
 800f04c:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800f04e:	e0c6      	b.n	800f1de <VL53L0X_load_tuning_settings+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 800f050:	697b      	ldr	r3, [r7, #20]
 800f052:	683a      	ldr	r2, [r7, #0]
 800f054:	4413      	add	r3, r2
 800f056:	781b      	ldrb	r3, [r3, #0]
 800f058:	74fb      	strb	r3, [r7, #19]
		Index++;
 800f05a:	697b      	ldr	r3, [r7, #20]
 800f05c:	3301      	adds	r3, #1
 800f05e:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 800f060:	7cfb      	ldrb	r3, [r7, #19]
 800f062:	2bff      	cmp	r3, #255	; 0xff
 800f064:	f040 808d 	bne.w	800f182 <VL53L0X_load_tuning_settings+0x146>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 800f068:	697b      	ldr	r3, [r7, #20]
 800f06a:	683a      	ldr	r2, [r7, #0]
 800f06c:	4413      	add	r3, r2
 800f06e:	781b      	ldrb	r3, [r3, #0]
 800f070:	747b      	strb	r3, [r7, #17]
			Index++;
 800f072:	697b      	ldr	r3, [r7, #20]
 800f074:	3301      	adds	r3, #1
 800f076:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 800f078:	7c7b      	ldrb	r3, [r7, #17]
 800f07a:	2b03      	cmp	r3, #3
 800f07c:	d87e      	bhi.n	800f17c <VL53L0X_load_tuning_settings+0x140>
 800f07e:	a201      	add	r2, pc, #4	; (adr r2, 800f084 <VL53L0X_load_tuning_settings+0x48>)
 800f080:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f084:	0800f095 	.word	0x0800f095
 800f088:	0800f0cf 	.word	0x0800f0cf
 800f08c:	0800f109 	.word	0x0800f109
 800f090:	0800f143 	.word	0x0800f143
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800f094:	697b      	ldr	r3, [r7, #20]
 800f096:	683a      	ldr	r2, [r7, #0]
 800f098:	4413      	add	r3, r2
 800f09a:	781b      	ldrb	r3, [r3, #0]
 800f09c:	743b      	strb	r3, [r7, #16]
				Index++;
 800f09e:	697b      	ldr	r3, [r7, #20]
 800f0a0:	3301      	adds	r3, #1
 800f0a2:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800f0a4:	697b      	ldr	r3, [r7, #20]
 800f0a6:	683a      	ldr	r2, [r7, #0]
 800f0a8:	4413      	add	r3, r2
 800f0aa:	781b      	ldrb	r3, [r3, #0]
 800f0ac:	73fb      	strb	r3, [r7, #15]
				Index++;
 800f0ae:	697b      	ldr	r3, [r7, #20]
 800f0b0:	3301      	adds	r3, #1
 800f0b2:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800f0b4:	7c3b      	ldrb	r3, [r7, #16]
 800f0b6:	b29b      	uxth	r3, r3
 800f0b8:	021b      	lsls	r3, r3, #8
 800f0ba:	b29a      	uxth	r2, r3
 800f0bc:	7bfb      	ldrb	r3, [r7, #15]
 800f0be:	b29b      	uxth	r3, r3
 800f0c0:	4413      	add	r3, r2
 800f0c2:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	89ba      	ldrh	r2, [r7, #12]
 800f0c8:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
				break;
 800f0cc:	e087      	b.n	800f1de <VL53L0X_load_tuning_settings+0x1a2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800f0ce:	697b      	ldr	r3, [r7, #20]
 800f0d0:	683a      	ldr	r2, [r7, #0]
 800f0d2:	4413      	add	r3, r2
 800f0d4:	781b      	ldrb	r3, [r3, #0]
 800f0d6:	743b      	strb	r3, [r7, #16]
				Index++;
 800f0d8:	697b      	ldr	r3, [r7, #20]
 800f0da:	3301      	adds	r3, #1
 800f0dc:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800f0de:	697b      	ldr	r3, [r7, #20]
 800f0e0:	683a      	ldr	r2, [r7, #0]
 800f0e2:	4413      	add	r3, r2
 800f0e4:	781b      	ldrb	r3, [r3, #0]
 800f0e6:	73fb      	strb	r3, [r7, #15]
				Index++;
 800f0e8:	697b      	ldr	r3, [r7, #20]
 800f0ea:	3301      	adds	r3, #1
 800f0ec:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800f0ee:	7c3b      	ldrb	r3, [r7, #16]
 800f0f0:	b29b      	uxth	r3, r3
 800f0f2:	021b      	lsls	r3, r3, #8
 800f0f4:	b29a      	uxth	r2, r3
 800f0f6:	7bfb      	ldrb	r3, [r7, #15]
 800f0f8:	b29b      	uxth	r3, r3
 800f0fa:	4413      	add	r3, r2
 800f0fc:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	89ba      	ldrh	r2, [r7, #12]
 800f102:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
					Temp16);
				break;
 800f106:	e06a      	b.n	800f1de <VL53L0X_load_tuning_settings+0x1a2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800f108:	697b      	ldr	r3, [r7, #20]
 800f10a:	683a      	ldr	r2, [r7, #0]
 800f10c:	4413      	add	r3, r2
 800f10e:	781b      	ldrb	r3, [r3, #0]
 800f110:	743b      	strb	r3, [r7, #16]
				Index++;
 800f112:	697b      	ldr	r3, [r7, #20]
 800f114:	3301      	adds	r3, #1
 800f116:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800f118:	697b      	ldr	r3, [r7, #20]
 800f11a:	683a      	ldr	r2, [r7, #0]
 800f11c:	4413      	add	r3, r2
 800f11e:	781b      	ldrb	r3, [r3, #0]
 800f120:	73fb      	strb	r3, [r7, #15]
				Index++;
 800f122:	697b      	ldr	r3, [r7, #20]
 800f124:	3301      	adds	r3, #1
 800f126:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800f128:	7c3b      	ldrb	r3, [r7, #16]
 800f12a:	b29b      	uxth	r3, r3
 800f12c:	021b      	lsls	r3, r3, #8
 800f12e:	b29a      	uxth	r2, r3
 800f130:	7bfb      	ldrb	r3, [r7, #15]
 800f132:	b29b      	uxth	r3, r3
 800f134:	4413      	add	r3, r2
 800f136:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	89ba      	ldrh	r2, [r7, #12]
 800f13c:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
				break;
 800f140:	e04d      	b.n	800f1de <VL53L0X_load_tuning_settings+0x1a2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800f142:	697b      	ldr	r3, [r7, #20]
 800f144:	683a      	ldr	r2, [r7, #0]
 800f146:	4413      	add	r3, r2
 800f148:	781b      	ldrb	r3, [r3, #0]
 800f14a:	743b      	strb	r3, [r7, #16]
				Index++;
 800f14c:	697b      	ldr	r3, [r7, #20]
 800f14e:	3301      	adds	r3, #1
 800f150:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800f152:	697b      	ldr	r3, [r7, #20]
 800f154:	683a      	ldr	r2, [r7, #0]
 800f156:	4413      	add	r3, r2
 800f158:	781b      	ldrb	r3, [r3, #0]
 800f15a:	73fb      	strb	r3, [r7, #15]
				Index++;
 800f15c:	697b      	ldr	r3, [r7, #20]
 800f15e:	3301      	adds	r3, #1
 800f160:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800f162:	7c3b      	ldrb	r3, [r7, #16]
 800f164:	b29b      	uxth	r3, r3
 800f166:	021b      	lsls	r3, r3, #8
 800f168:	b29a      	uxth	r2, r3
 800f16a:	7bfb      	ldrb	r3, [r7, #15]
 800f16c:	b29b      	uxth	r3, r3
 800f16e:	4413      	add	r3, r2
 800f170:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	89ba      	ldrh	r2, [r7, #12]
 800f176:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c
				break;
 800f17a:	e030      	b.n	800f1de <VL53L0X_load_tuning_settings+0x1a2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800f17c:	23fc      	movs	r3, #252	; 0xfc
 800f17e:	77fb      	strb	r3, [r7, #31]
 800f180:	e02d      	b.n	800f1de <VL53L0X_load_tuning_settings+0x1a2>
			}

		} else if (NumberOfWrites <= 4) {
 800f182:	7cfb      	ldrb	r3, [r7, #19]
 800f184:	2b04      	cmp	r3, #4
 800f186:	d828      	bhi.n	800f1da <VL53L0X_load_tuning_settings+0x19e>
			Address = *(pTuningSettingBuffer + Index);
 800f188:	697b      	ldr	r3, [r7, #20]
 800f18a:	683a      	ldr	r2, [r7, #0]
 800f18c:	4413      	add	r3, r2
 800f18e:	781b      	ldrb	r3, [r3, #0]
 800f190:	74bb      	strb	r3, [r7, #18]
			Index++;
 800f192:	697b      	ldr	r3, [r7, #20]
 800f194:	3301      	adds	r3, #1
 800f196:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 800f198:	2300      	movs	r3, #0
 800f19a:	61bb      	str	r3, [r7, #24]
 800f19c:	e00f      	b.n	800f1be <VL53L0X_load_tuning_settings+0x182>
				localBuffer[i] = *(pTuningSettingBuffer +
 800f19e:	697b      	ldr	r3, [r7, #20]
 800f1a0:	683a      	ldr	r2, [r7, #0]
 800f1a2:	4413      	add	r3, r2
 800f1a4:	7819      	ldrb	r1, [r3, #0]
 800f1a6:	f107 0208 	add.w	r2, r7, #8
 800f1aa:	69bb      	ldr	r3, [r7, #24]
 800f1ac:	4413      	add	r3, r2
 800f1ae:	460a      	mov	r2, r1
 800f1b0:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 800f1b2:	697b      	ldr	r3, [r7, #20]
 800f1b4:	3301      	adds	r3, #1
 800f1b6:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 800f1b8:	69bb      	ldr	r3, [r7, #24]
 800f1ba:	3301      	adds	r3, #1
 800f1bc:	61bb      	str	r3, [r7, #24]
 800f1be:	7cfb      	ldrb	r3, [r7, #19]
 800f1c0:	69ba      	ldr	r2, [r7, #24]
 800f1c2:	429a      	cmp	r2, r3
 800f1c4:	dbeb      	blt.n	800f19e <VL53L0X_load_tuning_settings+0x162>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 800f1c6:	7cfb      	ldrb	r3, [r7, #19]
 800f1c8:	f107 0208 	add.w	r2, r7, #8
 800f1cc:	7cb9      	ldrb	r1, [r7, #18]
 800f1ce:	6878      	ldr	r0, [r7, #4]
 800f1d0:	f000 fdee 	bl	800fdb0 <VL53L0X_WriteMulti>
 800f1d4:	4603      	mov	r3, r0
 800f1d6:	77fb      	strb	r3, [r7, #31]
 800f1d8:	e001      	b.n	800f1de <VL53L0X_load_tuning_settings+0x1a2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800f1da:	23fc      	movs	r3, #252	; 0xfc
 800f1dc:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800f1de:	697b      	ldr	r3, [r7, #20]
 800f1e0:	683a      	ldr	r2, [r7, #0]
 800f1e2:	4413      	add	r3, r2
 800f1e4:	781b      	ldrb	r3, [r3, #0]
 800f1e6:	2b00      	cmp	r3, #0
 800f1e8:	d004      	beq.n	800f1f4 <VL53L0X_load_tuning_settings+0x1b8>
 800f1ea:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800f1ee:	2b00      	cmp	r3, #0
 800f1f0:	f43f af2e 	beq.w	800f050 <VL53L0X_load_tuning_settings+0x14>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800f1f4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800f1f8:	4618      	mov	r0, r3
 800f1fa:	3720      	adds	r7, #32
 800f1fc:	46bd      	mov	sp, r7
 800f1fe:	bd80      	pop	{r7, pc}

0800f200 <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 800f200:	b580      	push	{r7, lr}
 800f202:	b088      	sub	sp, #32
 800f204:	af00      	add	r7, sp, #0
 800f206:	60f8      	str	r0, [r7, #12]
 800f208:	60b9      	str	r1, [r7, #8]
 800f20a:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800f20c:	2300      	movs	r3, #0
 800f20e:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	2200      	movs	r2, #0
 800f214:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 800f216:	f107 0313 	add.w	r3, r7, #19
 800f21a:	4619      	mov	r1, r3
 800f21c:	68f8      	ldr	r0, [r7, #12]
 800f21e:	f7fc fc9d 	bl	800bb5c <VL53L0X_GetXTalkCompensationEnable>
 800f222:	4603      	mov	r3, r0
 800f224:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 800f226:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800f22a:	2b00      	cmp	r3, #0
 800f22c:	d111      	bne.n	800f252 <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 800f22e:	7cfb      	ldrb	r3, [r7, #19]
 800f230:	2b00      	cmp	r3, #0
 800f232:	d00e      	beq.n	800f252 <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 800f234:	68fb      	ldr	r3, [r7, #12]
 800f236:	6a1b      	ldr	r3, [r3, #32]
 800f238:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 800f23a:	68bb      	ldr	r3, [r7, #8]
 800f23c:	8a9b      	ldrh	r3, [r3, #20]
 800f23e:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 800f240:	69bb      	ldr	r3, [r7, #24]
 800f242:	fb02 f303 	mul.w	r3, r2, r3
 800f246:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 800f248:	697b      	ldr	r3, [r7, #20]
 800f24a:	3380      	adds	r3, #128	; 0x80
 800f24c:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 800f252:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800f256:	4618      	mov	r0, r3
 800f258:	3720      	adds	r7, #32
 800f25a:	46bd      	mov	sp, r7
 800f25c:	bd80      	pop	{r7, pc}

0800f25e <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 800f25e:	b580      	push	{r7, lr}
 800f260:	b086      	sub	sp, #24
 800f262:	af00      	add	r7, sp, #0
 800f264:	60f8      	str	r0, [r7, #12]
 800f266:	60b9      	str	r1, [r7, #8]
 800f268:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800f26a:	2300      	movs	r3, #0
 800f26c:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 800f26e:	68bb      	ldr	r3, [r7, #8]
 800f270:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 800f276:	f107 0310 	add.w	r3, r7, #16
 800f27a:	461a      	mov	r2, r3
 800f27c:	68b9      	ldr	r1, [r7, #8]
 800f27e:	68f8      	ldr	r0, [r7, #12]
 800f280:	f7ff ffbe 	bl	800f200 <VL53L0X_get_total_xtalk_rate>
 800f284:	4603      	mov	r3, r0
 800f286:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 800f288:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f28c:	2b00      	cmp	r3, #0
 800f28e:	d105      	bne.n	800f29c <VL53L0X_get_total_signal_rate+0x3e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	681a      	ldr	r2, [r3, #0]
 800f294:	693b      	ldr	r3, [r7, #16]
 800f296:	441a      	add	r2, r3
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	601a      	str	r2, [r3, #0]

	return Status;
 800f29c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f2a0:	4618      	mov	r0, r3
 800f2a2:	3718      	adds	r7, #24
 800f2a4:	46bd      	mov	sp, r7
 800f2a6:	bd80      	pop	{r7, pc}

0800f2a8 <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 800f2a8:	b580      	push	{r7, lr}
 800f2aa:	b09a      	sub	sp, #104	; 0x68
 800f2ac:	af00      	add	r7, sp, #0
 800f2ae:	60f8      	str	r0, [r7, #12]
 800f2b0:	60b9      	str	r1, [r7, #8]
 800f2b2:	607a      	str	r2, [r7, #4]
 800f2b4:	603b      	str	r3, [r7, #0]
	const uint32_t cSigmaLimit		= 18;
 800f2b6:	2312      	movs	r3, #18
 800f2b8:	657b      	str	r3, [r7, #84]	; 0x54
	const FixPoint1616_t cSignalLimit	= 0x4000; /* 0.25 */
 800f2ba:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800f2be:	653b      	str	r3, [r7, #80]	; 0x50
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 800f2c0:	2342      	movs	r3, #66	; 0x42
 800f2c2:	64fb      	str	r3, [r7, #76]	; 0x4c
	const uint32_t cAmbEffWidthSigmaEst_ns = 6;
 800f2c4:	2306      	movs	r3, #6
 800f2c6:	64bb      	str	r3, [r7, #72]	; 0x48
	const uint32_t cAmbEffWidthDMax_ns	   = 7;
 800f2c8:	2307      	movs	r3, #7
 800f2ca:	647b      	str	r3, [r7, #68]	; 0x44
	FixPoint1616_t dmaxAmbient;
	FixPoint1616_t dmaxDarkTmp;
	FixPoint1616_t sigmaEstP2Tmp;
	uint32_t signalRateTemp_mcps;

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800f2cc:	2300      	movs	r3, #0
 800f2ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
		PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
 800f2d2:	68fb      	ldr	r3, [r7, #12]
 800f2d4:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
	dmaxCalRange_mm =
 800f2d8:	63fb      	str	r3, [r7, #60]	; 0x3c

	dmaxCalSignalRateRtn_mcps =
 800f2da:	68fb      	ldr	r3, [r7, #12]
 800f2dc:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800f2e0:	63bb      	str	r3, [r7, #56]	; 0x38
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 800f2e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f2e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f2e6:	fb02 f303 	mul.w	r3, r2, r3
 800f2ea:	637b      	str	r3, [r7, #52]	; 0x34

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 800f2ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f2ee:	3380      	adds	r3, #128	; 0x80
 800f2f0:	0a1b      	lsrs	r3, r3, #8
 800f2f2:	637b      	str	r3, [r7, #52]	; 0x34
	SignalAt0mm *= dmaxCalRange_mm;
 800f2f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f2f6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f2f8:	fb02 f303 	mul.w	r3, r2, r3
 800f2fc:	637b      	str	r3, [r7, #52]	; 0x34

	minSignalNeeded_p1 = 0;
 800f2fe:	2300      	movs	r3, #0
 800f300:	667b      	str	r3, [r7, #100]	; 0x64
	if (totalCorrSignalRate_mcps > 0) {
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	2b00      	cmp	r3, #0
 800f306:	d01a      	beq.n	800f33e <VL53L0X_calc_dmax+0x96>

		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;
 800f308:	68bb      	ldr	r3, [r7, #8]
 800f30a:	029b      	lsls	r3, r3, #10
 800f30c:	633b      	str	r3, [r7, #48]	; 0x30

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
			(totalCorrSignalRate_mcps/2);
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	085b      	lsrs	r3, r3, #1
		minSignalNeeded_p1 = signalRateTemp_mcps +
 800f312:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f314:	4413      	add	r3, r2
 800f316:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 800f318:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	fbb2 f3f3 	udiv	r3, r2, r3
 800f320:	667b      	str	r3, [r7, #100]	; 0x64

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 800f322:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800f324:	4613      	mov	r3, r2
 800f326:	005b      	lsls	r3, r3, #1
 800f328:	4413      	add	r3, r2
 800f32a:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 800f32c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f32e:	fb03 f303 	mul.w	r3, r3, r3
 800f332:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 800f334:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f336:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800f33a:	0c1b      	lsrs	r3, r3, #16
 800f33c:	667b      	str	r3, [r7, #100]	; 0x64
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 800f33e:	683b      	ldr	r3, [r7, #0]
 800f340:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800f342:	fb02 f303 	mul.w	r3, r2, r3
 800f346:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* FixPoint1616 >> 16 =	 uint32 */
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 800f348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f34a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800f34e:	0c1b      	lsrs	r3, r3, #16
 800f350:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* uint32 * uint32	=  uint32 */
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 800f352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f354:	fb03 f303 	mul.w	r3, r3, r3
 800f358:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 800f35a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f35c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800f360:	0c1b      	lsrs	r3, r3, #16
 800f362:	62bb      	str	r3, [r7, #40]	; 0x28
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 800f364:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f366:	085a      	lsrs	r2, r3, #1
 800f368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f36a:	441a      	add	r2, r3
 800f36c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f36e:	fbb2 f3f3 	udiv	r3, r2, r3
 800f372:	62bb      	str	r3, [r7, #40]	; 0x28
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 800f374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f376:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f378:	fb02 f303 	mul.w	r3, r2, r3
 800f37c:	62bb      	str	r3, [r7, #40]	; 0x28

	if (sigmaEstP2Tmp > 0xffff) {
 800f37e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f380:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f384:	d302      	bcc.n	800f38c <VL53L0X_calc_dmax+0xe4>
		minSignalNeeded_p3 = 0xfff00000;
 800f386:	4b54      	ldr	r3, [pc, #336]	; (800f4d8 <VL53L0X_calc_dmax+0x230>)
 800f388:	663b      	str	r3, [r7, #96]	; 0x60
 800f38a:	e015      	b.n	800f3b8 <VL53L0X_calc_dmax+0x110>

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 800f38c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f38e:	085a      	lsrs	r2, r3, #1
 800f390:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f392:	441a      	add	r2, r3
 800f394:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f396:	fbb2 f3f3 	udiv	r3, r2, r3
 800f39a:	677b      	str	r3, [r7, #116]	; 0x74
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 800f39c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f39e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f3a0:	fb02 f303 	mul.w	r3, r2, r3
 800f3a4:	677b      	str	r3, [r7, #116]	; 0x74

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 800f3a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f3a8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800f3ac:	0c1b      	lsrs	r3, r3, #16
 800f3ae:	663b      	str	r3, [r7, #96]	; 0x60

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 800f3b0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f3b2:	fb03 f303 	mul.w	r3, r3, r3
 800f3b6:	663b      	str	r3, [r7, #96]	; 0x60

	}

	/* FixPoint1814 / uint32 = FixPoint1814 */
	sigmaLimitTmp = ((cSigmaLimit << 14) + 500) / 1000;
 800f3b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f3ba:	039b      	lsls	r3, r3, #14
 800f3bc:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800f3c0:	4a46      	ldr	r2, [pc, #280]	; (800f4dc <VL53L0X_calc_dmax+0x234>)
 800f3c2:	fba2 2303 	umull	r2, r3, r2, r3
 800f3c6:	099b      	lsrs	r3, r3, #6
 800f3c8:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1814 * FixPoint1814 = FixPoint3628 := FixPoint0428 */
	sigmaLimitTmp *= sigmaLimitTmp;
 800f3ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3cc:	fb03 f303 	mul.w	r3, r3, r3
 800f3d0:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
	sigmaEstSqTmp = cSigmaEstRef * cSigmaEstRef;
 800f3d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f3d4:	fb03 f303 	mul.w	r3, r3, r3
 800f3d8:	623b      	str	r3, [r7, #32]

	/* FixPoint3232 >> 4 = FixPoint0428 */
	sigmaEstSqTmp = (sigmaEstSqTmp + 0x08) >> 4;
 800f3da:	6a3b      	ldr	r3, [r7, #32]
 800f3dc:	3308      	adds	r3, #8
 800f3de:	091b      	lsrs	r3, r3, #4
 800f3e0:	623b      	str	r3, [r7, #32]

	/* FixPoint0428 - FixPoint0428	= FixPoint0428 */
	sigmaLimitTmp -=  sigmaEstSqTmp;
 800f3e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f3e4:	6a3b      	ldr	r3, [r7, #32]
 800f3e6:	1ad3      	subs	r3, r2, r3
 800f3e8:	627b      	str	r3, [r7, #36]	; 0x24

	/* uint32_t * FixPoint0428 = FixPoint0428 */
	minSignalNeeded_p4 = 4 * 12 * sigmaLimitTmp;
 800f3ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f3ec:	4613      	mov	r3, r2
 800f3ee:	005b      	lsls	r3, r3, #1
 800f3f0:	4413      	add	r3, r2
 800f3f2:	011b      	lsls	r3, r3, #4
 800f3f4:	61fb      	str	r3, [r7, #28]

	/* FixPoint0428 >> 14 = FixPoint1814 */
	minSignalNeeded_p4 = (minSignalNeeded_p4 + 0x2000) >> 14;
 800f3f6:	69fb      	ldr	r3, [r7, #28]
 800f3f8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800f3fc:	0b9b      	lsrs	r3, r3, #14
 800f3fe:	61fb      	str	r3, [r7, #28]

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);
 800f400:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f402:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f404:	4413      	add	r3, r2
 800f406:	61bb      	str	r3, [r7, #24]

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
 800f408:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f40a:	085b      	lsrs	r3, r3, #1
 800f40c:	69ba      	ldr	r2, [r7, #24]
 800f40e:	4413      	add	r3, r2
 800f410:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= peakVcselDuration_us;
 800f412:	69ba      	ldr	r2, [r7, #24]
 800f414:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f416:	fbb2 f3f3 	udiv	r3, r2, r3
 800f41a:	61bb      	str	r3, [r7, #24]

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
 800f41c:	69bb      	ldr	r3, [r7, #24]
 800f41e:	039b      	lsls	r3, r3, #14
 800f420:	61bb      	str	r3, [r7, #24]

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
 800f422:	69fb      	ldr	r3, [r7, #28]
 800f424:	085b      	lsrs	r3, r3, #1
 800f426:	69ba      	ldr	r2, [r7, #24]
 800f428:	4413      	add	r3, r2
 800f42a:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= minSignalNeeded_p4;
 800f42c:	69ba      	ldr	r2, [r7, #24]
 800f42e:	69fb      	ldr	r3, [r7, #28]
 800f430:	fbb2 f3f3 	udiv	r3, r2, r3
 800f434:	61bb      	str	r3, [r7, #24]

	/* FixPoint3200 * FixPoint2804 := FixPoint2804*/
	minSignalNeeded *= minSignalNeeded_p1;
 800f436:	69bb      	ldr	r3, [r7, #24]
 800f438:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800f43a:	fb02 f303 	mul.w	r3, r2, r3
 800f43e:	61bb      	str	r3, [r7, #24]
	 * and 10E-22 on the denominator.
	 * We do this because 32bit fix point calculation can't
	 * handle the larger and smaller elements of this equation,
	 * i.e. speed of light and pulse widths.
	 */
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800f440:	69bb      	ldr	r3, [r7, #24]
 800f442:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800f446:	4a25      	ldr	r2, [pc, #148]	; (800f4dc <VL53L0X_calc_dmax+0x234>)
 800f448:	fba2 2303 	umull	r2, r3, r2, r3
 800f44c:	099b      	lsrs	r3, r3, #6
 800f44e:	61bb      	str	r3, [r7, #24]
	minSignalNeeded <<= 4;
 800f450:	69bb      	ldr	r3, [r7, #24]
 800f452:	011b      	lsls	r3, r3, #4
 800f454:	61bb      	str	r3, [r7, #24]

	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800f456:	69bb      	ldr	r3, [r7, #24]
 800f458:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800f45c:	4a1f      	ldr	r2, [pc, #124]	; (800f4dc <VL53L0X_calc_dmax+0x234>)
 800f45e:	fba2 2303 	umull	r2, r3, r2, r3
 800f462:	099b      	lsrs	r3, r3, #6
 800f464:	61bb      	str	r3, [r7, #24]

	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;
 800f466:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f468:	3380      	adds	r3, #128	; 0x80
 800f46a:	0a1b      	lsrs	r3, r3, #8
 800f46c:	617b      	str	r3, [r7, #20]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
 800f46e:	697b      	ldr	r3, [r7, #20]
 800f470:	2b00      	cmp	r3, #0
 800f472:	d008      	beq.n	800f486 <VL53L0X_calc_dmax+0x1de>
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 800f474:	697b      	ldr	r3, [r7, #20]
 800f476:	085a      	lsrs	r2, r3, #1
 800f478:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f47a:	441a      	add	r2, r3
 800f47c:	697b      	ldr	r3, [r7, #20]
 800f47e:	fbb2 f3f3 	udiv	r3, r2, r3
 800f482:	65bb      	str	r3, [r7, #88]	; 0x58
 800f484:	e001      	b.n	800f48a <VL53L0X_calc_dmax+0x1e2>
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;
 800f486:	2300      	movs	r3, #0
 800f488:	65bb      	str	r3, [r7, #88]	; 0x58

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 800f48a:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800f48c:	f7fe f9b9 	bl	800d802 <VL53L0X_isqrt>
 800f490:	6138      	str	r0, [r7, #16]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 800f492:	69bb      	ldr	r3, [r7, #24]
 800f494:	2b00      	cmp	r3, #0
 800f496:	d008      	beq.n	800f4aa <VL53L0X_calc_dmax+0x202>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 800f498:	69bb      	ldr	r3, [r7, #24]
 800f49a:	085a      	lsrs	r2, r3, #1
 800f49c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f49e:	441a      	add	r2, r3
 800f4a0:	69bb      	ldr	r3, [r7, #24]
 800f4a2:	fbb2 f3f3 	udiv	r3, r2, r3
 800f4a6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f4a8:	e001      	b.n	800f4ae <VL53L0X_calc_dmax+0x206>
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
 800f4aa:	2300      	movs	r3, #0
 800f4ac:	65fb      	str	r3, [r7, #92]	; 0x5c

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 800f4ae:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800f4b0:	f7fe f9a7 	bl	800d802 <VL53L0X_isqrt>
 800f4b4:	65f8      	str	r0, [r7, #92]	; 0x5c

	*pdmax_mm = dmaxDark;
 800f4b6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f4b8:	693a      	ldr	r2, [r7, #16]
 800f4ba:	601a      	str	r2, [r3, #0]
	if (dmaxDark > dmaxAmbient)
 800f4bc:	693a      	ldr	r2, [r7, #16]
 800f4be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f4c0:	429a      	cmp	r2, r3
 800f4c2:	d902      	bls.n	800f4ca <VL53L0X_calc_dmax+0x222>
		*pdmax_mm = dmaxAmbient;
 800f4c4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f4c6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f4c8:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);

	return Status;
 800f4ca:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
}
 800f4ce:	4618      	mov	r0, r3
 800f4d0:	3768      	adds	r7, #104	; 0x68
 800f4d2:	46bd      	mov	sp, r7
 800f4d4:	bd80      	pop	{r7, pc}
 800f4d6:	bf00      	nop
 800f4d8:	fff00000 	.word	0xfff00000
 800f4dc:	10624dd3 	.word	0x10624dd3

0800f4e0 <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 800f4e0:	b580      	push	{r7, lr}
 800f4e2:	b0b4      	sub	sp, #208	; 0xd0
 800f4e4:	af04      	add	r7, sp, #16
 800f4e6:	60f8      	str	r0, [r7, #12]
 800f4e8:	60b9      	str	r1, [r7, #8]
 800f4ea:	607a      	str	r2, [r7, #4]
 800f4ec:	603b      	str	r3, [r7, #0]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 800f4ee:	f44f 7348 	mov.w	r3, #800	; 0x320
 800f4f2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 800f4f6:	f44f 7316 	mov.w	r3, #600	; 0x258
 800f4fa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	const FixPoint1616_t cDfltFinalRangeIntegrationTimeMilliSecs	= 0x00190000; /* 25ms */
 800f4fe:	f44f 13c8 	mov.w	r3, #1638400	; 0x190000
 800f502:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 800f506:	f241 235c 	movw	r3, #4700	; 0x125c
 800f50a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 800f50e:	4b9e      	ldr	r3, [pc, #632]	; (800f788 <VL53L0X_calc_sigma_estimate+0x2a8>)
 800f510:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 800f514:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800f518:	67fb      	str	r3, [r7, #124]	; 0x7c
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 800f51a:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 800f51e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f522:	fbb2 f3f3 	udiv	r3, r2, r3
 800f526:	67bb      	str	r3, [r7, #120]	; 0x78
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 800f528:	4b98      	ldr	r3, [pc, #608]	; (800f78c <VL53L0X_calc_sigma_estimate+0x2ac>)
 800f52a:	677b      	str	r3, [r7, #116]	; 0x74
	const uint32_t c16BitRoundingParam		= 0x00008000;
 800f52c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f530:	673b      	str	r3, [r7, #112]	; 0x70
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 800f532:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 800f536:	66fb      	str	r3, [r7, #108]	; 0x6c
	const uint32_t cPllPeriod_ps			= 1655;
 800f538:	f240 6377 	movw	r3, #1655	; 0x677
 800f53c:	66bb      	str	r3, [r7, #104]	; 0x68
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800f53e:	2300      	movs	r3, #0
 800f540:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	 * Estimates the range sigma
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 800f544:	68fb      	ldr	r3, [r7, #12]
 800f546:	6a1b      	ldr	r3, [r3, #32]
 800f548:	617b      	str	r3, [r7, #20]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 800f54a:	68bb      	ldr	r3, [r7, #8]
 800f54c:	691b      	ldr	r3, [r3, #16]
 800f54e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800f552:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 800f556:	0c1b      	lsrs	r3, r3, #16
 800f558:	667b      	str	r3, [r7, #100]	; 0x64

	correctedSignalRate_mcps =
 800f55a:	68bb      	ldr	r3, [r7, #8]
 800f55c:	68db      	ldr	r3, [r3, #12]
 800f55e:	663b      	str	r3, [r7, #96]	; 0x60
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 800f560:	f107 0310 	add.w	r3, r7, #16
 800f564:	461a      	mov	r2, r3
 800f566:	68b9      	ldr	r1, [r7, #8]
 800f568:	68f8      	ldr	r0, [r7, #12]
 800f56a:	f7ff fe78 	bl	800f25e <VL53L0X_get_total_signal_rate>
 800f56e:	4603      	mov	r3, r0
 800f570:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 800f574:	f107 0314 	add.w	r3, r7, #20
 800f578:	461a      	mov	r2, r3
 800f57a:	68b9      	ldr	r1, [r7, #8]
 800f57c:	68f8      	ldr	r0, [r7, #12]
 800f57e:	f7ff fe3f 	bl	800f200 <VL53L0X_get_total_xtalk_rate>
 800f582:	4603      	mov	r3, r0
 800f584:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 800f588:	693b      	ldr	r3, [r7, #16]
 800f58a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800f58e:	fb02 f303 	mul.w	r3, r2, r3
 800f592:	65fb      	str	r3, [r7, #92]	; 0x5c
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 800f594:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f596:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800f59a:	0c1b      	lsrs	r3, r3, #16
 800f59c:	65fb      	str	r3, [r7, #92]	; 0x5c

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 800f59e:	697b      	ldr	r3, [r7, #20]
 800f5a0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800f5a4:	fb02 f303 	mul.w	r3, r2, r3
 800f5a8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 800f5ac:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800f5b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f5b2:	429a      	cmp	r2, r3
 800f5b4:	d902      	bls.n	800f5bc <VL53L0X_calc_sigma_estimate+0xdc>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 800f5b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f5b8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (Status == VL53L0X_ERROR_NONE) {
 800f5bc:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800f5c0:	2b00      	cmp	r3, #0
 800f5c2:	d168      	bne.n	800f696 <VL53L0X_calc_sigma_estimate+0x1b6>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800f5c4:	68fb      	ldr	r3, [r7, #12]
 800f5c6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800f5ca:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800f5ce:	68fb      	ldr	r3, [r7, #12]
 800f5d0:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 800f5d4:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800f5d8:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800f5dc:	461a      	mov	r2, r3
 800f5de:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800f5e2:	68f8      	ldr	r0, [r7, #12]
 800f5e4:	f7fe feb2 	bl	800e34c <VL53L0X_calc_timeout_mclks>
 800f5e8:	6578      	str	r0, [r7, #84]	; 0x54
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800f5ea:	68fb      	ldr	r3, [r7, #12]
 800f5ec:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800f5f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800f5f4:	68fb      	ldr	r3, [r7, #12]
 800f5f6:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 800f5fa:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800f5fe:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800f602:	461a      	mov	r2, r3
 800f604:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 800f608:	68f8      	ldr	r0, [r7, #12]
 800f60a:	f7fe fe9f 	bl	800e34c <VL53L0X_calc_timeout_mclks>
 800f60e:	64f8      	str	r0, [r7, #76]	; 0x4c
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 800f610:	2303      	movs	r3, #3
 800f612:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		if (finalRangeVcselPCLKS == 8)
 800f616:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800f61a:	2b08      	cmp	r3, #8
 800f61c:	d102      	bne.n	800f624 <VL53L0X_calc_sigma_estimate+0x144>
			vcselWidth = 2;
 800f61e:	2302      	movs	r3, #2
 800f620:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 800f624:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f626:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f628:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 800f62a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800f62e:	fb02 f303 	mul.w	r3, r2, r3
 800f632:	02db      	lsls	r3, r3, #11
 800f634:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800f638:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f63c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800f640:	4a53      	ldr	r2, [pc, #332]	; (800f790 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800f642:	fba2 2303 	umull	r2, r3, r2, r3
 800f646:	099b      	lsrs	r3, r3, #6
 800f648:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us *= cPllPeriod_ps;
 800f64c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f650:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800f652:	fb02 f303 	mul.w	r3, r2, r3
 800f656:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800f65a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f65e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800f662:	4a4b      	ldr	r2, [pc, #300]	; (800f790 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800f664:	fba2 2303 	umull	r2, r3, r2, r3
 800f668:	099b      	lsrs	r3, r3, #6
 800f66a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 800f66e:	693b      	ldr	r3, [r7, #16]
 800f670:	3380      	adds	r3, #128	; 0x80
 800f672:	0a1b      	lsrs	r3, r3, #8
 800f674:	613b      	str	r3, [r7, #16]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 800f676:	693a      	ldr	r2, [r7, #16]
 800f678:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f67c:	fb02 f303 	mul.w	r3, r2, r3
 800f680:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 800f684:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800f688:	3380      	adds	r3, #128	; 0x80
 800f68a:	0a1b      	lsrs	r3, r3, #8
 800f68c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 800f690:	693b      	ldr	r3, [r7, #16]
 800f692:	021b      	lsls	r3, r3, #8
 800f694:	613b      	str	r3, [r7, #16]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 800f696:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800f69a:	2b00      	cmp	r3, #0
 800f69c:	d002      	beq.n	800f6a4 <VL53L0X_calc_sigma_estimate+0x1c4>
		LOG_FUNCTION_END(Status);
		return Status;
 800f69e:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800f6a2:	e15e      	b.n	800f962 <VL53L0X_calc_sigma_estimate+0x482>
	}

	if (peakSignalRate_kcps == 0) {
 800f6a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f6a6:	2b00      	cmp	r3, #0
 800f6a8:	d10c      	bne.n	800f6c4 <VL53L0X_calc_sigma_estimate+0x1e4>
		*pSigmaEstimate = cSigmaEstMax;
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800f6b0:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 800f6b2:	68fb      	ldr	r3, [r7, #12]
 800f6b4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800f6b8:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		*pDmax_mm = 0;
 800f6bc:	683b      	ldr	r3, [r7, #0]
 800f6be:	2200      	movs	r2, #0
 800f6c0:	601a      	str	r2, [r3, #0]
 800f6c2:	e14c      	b.n	800f95e <VL53L0X_calc_sigma_estimate+0x47e>
	} else {
		if (vcselTotalEventsRtn < 1)
 800f6c4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800f6c8:	2b00      	cmp	r3, #0
 800f6ca:	d102      	bne.n	800f6d2 <VL53L0X_calc_sigma_estimate+0x1f2>
			vcselTotalEventsRtn = 1;
 800f6cc:	2301      	movs	r3, #1
 800f6ce:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 800f6d2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f6d6:	64bb      	str	r3, [r7, #72]	; 0x48

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 800f6d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f6da:	041a      	lsls	r2, r3, #16
 800f6dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f6de:	fbb2 f3f3 	udiv	r3, r2, r3
 800f6e2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 800f6e6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800f6ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f6ec:	429a      	cmp	r2, r3
 800f6ee:	d902      	bls.n	800f6f6 <VL53L0X_calc_sigma_estimate+0x216>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 800f6f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f6f2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 800f6f6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800f6fa:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800f6fe:	fb02 f303 	mul.w	r3, r2, r3
 800f702:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 800f706:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800f70a:	4613      	mov	r3, r2
 800f70c:	005b      	lsls	r3, r3, #1
 800f70e:	4413      	add	r3, r2
 800f710:	009b      	lsls	r3, r3, #2
 800f712:	4618      	mov	r0, r3
 800f714:	f7fe f875 	bl	800d802 <VL53L0X_isqrt>
 800f718:	4603      	mov	r3, r0
 800f71a:	005b      	lsls	r3, r3, #1
 800f71c:	647b      	str	r3, [r7, #68]	; 0x44

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 800f71e:	68bb      	ldr	r3, [r7, #8]
 800f720:	891b      	ldrh	r3, [r3, #8]
 800f722:	461a      	mov	r2, r3
 800f724:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f726:	fb02 f303 	mul.w	r3, r2, r3
 800f72a:	643b      	str	r3, [r7, #64]	; 0x40
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800f72c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f72e:	041a      	lsls	r2, r3, #16
			2 * xTalkCompRate_kcps) + 500)/1000;
 800f730:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800f734:	005b      	lsls	r3, r3, #1
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800f736:	1ad3      	subs	r3, r2, r3
			2 * xTalkCompRate_kcps) + 500)/1000;
 800f738:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800f73c:	4a14      	ldr	r2, [pc, #80]	; (800f790 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800f73e:	fba2 2303 	umull	r2, r3, r2, r3
 800f742:	099b      	lsrs	r3, r3, #6
 800f744:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* vcselRate + xtalkCompRate */
		diff2_mcps = ((peakSignalRate_kcps << 16) + 500)/1000;
 800f746:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f748:	041b      	lsls	r3, r3, #16
 800f74a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800f74e:	4a10      	ldr	r2, [pc, #64]	; (800f790 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800f750:	fba2 2303 	umull	r2, r3, r2, r3
 800f754:	099b      	lsrs	r3, r3, #6
 800f756:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Shift by 8 bits to increase resolution prior to the
		 * division */
		diff1_mcps <<= 8;
 800f758:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f75a:	021b      	lsls	r3, r3, #8
 800f75c:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 800f75e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f762:	fbb2 f3f3 	udiv	r3, r2, r3
 800f766:	2b00      	cmp	r3, #0
 800f768:	bfb8      	it	lt
 800f76a:	425b      	neglt	r3, r3
 800f76c:	637b      	str	r3, [r7, #52]	; 0x34

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 800f76e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f770:	021b      	lsls	r3, r3, #8
 800f772:	637b      	str	r3, [r7, #52]	; 0x34

		if(pRangingMeasurementData->RangeStatus != 0){
 800f774:	68bb      	ldr	r3, [r7, #8]
 800f776:	7e1b      	ldrb	r3, [r3, #24]
 800f778:	2b00      	cmp	r3, #0
 800f77a:	d00b      	beq.n	800f794 <VL53L0X_calc_sigma_estimate+0x2b4>
			pwMult = 1 << 16;
 800f77c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800f780:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800f784:	e033      	b.n	800f7ee <VL53L0X_calc_sigma_estimate+0x30e>
 800f786:	bf00      	nop
 800f788:	028f87ae 	.word	0x028f87ae
 800f78c:	0006999a 	.word	0x0006999a
 800f790:	10624dd3 	.word	0x10624dd3
		} else {
			/* FixPoint1616/uint32 = FixPoint1616 */
			pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 800f794:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f796:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800f79a:	fbb2 f3f3 	udiv	r3, r2, r3
 800f79e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * FixPoint1616 * FixPoint1616 = FixPoint3232, however both
			 * values are small enough such that32 bits will not be
			 * exceeded.
			 */
			pwMult *= ((1 << 16) - xTalkCorrection);
 800f7a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f7a4:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 800f7a8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f7ac:	fb02 f303 	mul.w	r3, r2, r3
 800f7b0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3232 >> 16) = FixPoint1616 */
			pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 800f7b4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800f7b8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f7ba:	4413      	add	r3, r2
 800f7bc:	0c1b      	lsrs	r3, r3, #16
 800f7be:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
			pwMult += (1 << 16);
 800f7c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f7c6:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800f7ca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * At this point the value will be 1.xx, therefore if we square
			 * the value this will exceed 32 bits. To address this perform
			 * a single shift to the right before the multiplication.
			 */
			pwMult >>= 1;
 800f7ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f7d2:	085b      	lsrs	r3, r3, #1
 800f7d4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
			pwMult = pwMult * pwMult;
 800f7d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f7dc:	fb03 f303 	mul.w	r3, r3, r3
 800f7e0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3430 >> 14) = Fix1616 */
			pwMult >>= 14;
 800f7e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f7e8:	0b9b      	lsrs	r3, r3, #14
 800f7ea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		}

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 800f7ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f7f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f7f4:	fb02 f303 	mul.w	r3, r2, r3
 800f7f8:	633b      	str	r3, [r7, #48]	; 0x30

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 800f7fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7fc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800f800:	0c1b      	lsrs	r3, r3, #16
 800f802:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 800f804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f806:	fb03 f303 	mul.w	r3, r3, r3
 800f80a:	633b      	str	r3, [r7, #48]	; 0x30

		sqr2 = sigmaEstimateP2;
 800f80c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800f810:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 800f812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f814:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800f818:	0c1b      	lsrs	r3, r3, #16
 800f81a:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 800f81c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f81e:	fb03 f303 	mul.w	r3, r3, r3
 800f822:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 800f824:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f828:	4413      	add	r3, r2
 800f82a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 800f82c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f82e:	f7fd ffe8 	bl	800d802 <VL53L0X_isqrt>
 800f832:	6278      	str	r0, [r7, #36]	; 0x24

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 800f834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f836:	041b      	lsls	r3, r3, #16
 800f838:	627b      	str	r3, [r7, #36]	; 0x24
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 800f83a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f83c:	3332      	adds	r3, #50	; 0x32
 800f83e:	4a4b      	ldr	r2, [pc, #300]	; (800f96c <VL53L0X_calc_sigma_estimate+0x48c>)
 800f840:	fba2 2303 	umull	r2, r3, r2, r3
 800f844:	095a      	lsrs	r2, r3, #5
 800f846:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f848:	fbb2 f3f3 	udiv	r3, r2, r3
 800f84c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 800f850:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800f854:	f640 32b5 	movw	r2, #2997	; 0xbb5
 800f858:	fb02 f303 	mul.w	r3, r2, r3
 800f85c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 800f860:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800f864:	f241 3388 	movw	r3, #5000	; 0x1388
 800f868:	4413      	add	r3, r2
 800f86a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		sigmaEstRtn		 /= 10000;
 800f86e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800f872:	4a3f      	ldr	r2, [pc, #252]	; (800f970 <VL53L0X_calc_sigma_estimate+0x490>)
 800f874:	fba2 2303 	umull	r2, r3, r2, r3
 800f878:	0b5b      	lsrs	r3, r3, #13
 800f87a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 800f87e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800f882:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f884:	429a      	cmp	r2, r3
 800f886:	d902      	bls.n	800f88e <VL53L0X_calc_sigma_estimate+0x3ae>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstRtn = cSigmaEstRtnMax;
 800f888:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f88a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}
		finalRangeIntegrationTimeMilliSecs =
			(finalRangeTimeoutMicroSecs + preRangeTimeoutMicroSecs + 500)/1000;
 800f88e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800f892:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800f896:	4413      	add	r3, r2
 800f898:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		finalRangeIntegrationTimeMilliSecs =
 800f89c:	4a35      	ldr	r2, [pc, #212]	; (800f974 <VL53L0X_calc_sigma_estimate+0x494>)
 800f89e:	fba2 2303 	umull	r2, r3, r2, r3
 800f8a2:	099b      	lsrs	r3, r3, #6
 800f8a4:	623b      	str	r3, [r7, #32]
		/* sigmaEstRef = 1mm * 25ms/final range integration time (inc pre-range)
		 * sqrt(FixPoint1616/int) = FixPoint2408)
		 */
		sigmaEstRef =
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
				finalRangeIntegrationTimeMilliSecs/2)/
 800f8a6:	6a3b      	ldr	r3, [r7, #32]
 800f8a8:	085a      	lsrs	r2, r3, #1
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
 800f8aa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f8ae:	441a      	add	r2, r3
 800f8b0:	6a3b      	ldr	r3, [r7, #32]
 800f8b2:	fbb2 f3f3 	udiv	r3, r2, r3
 800f8b6:	4618      	mov	r0, r3
 800f8b8:	f7fd ffa3 	bl	800d802 <VL53L0X_isqrt>
 800f8bc:	61f8      	str	r0, [r7, #28]
				finalRangeIntegrationTimeMilliSecs);

		/* FixPoint2408 << 8 = FixPoint1616 */
		sigmaEstRef <<= 8;
 800f8be:	69fb      	ldr	r3, [r7, #28]
 800f8c0:	021b      	lsls	r3, r3, #8
 800f8c2:	61fb      	str	r3, [r7, #28]
		sigmaEstRef = (sigmaEstRef + 500)/1000;
 800f8c4:	69fb      	ldr	r3, [r7, #28]
 800f8c6:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800f8ca:	4a2a      	ldr	r2, [pc, #168]	; (800f974 <VL53L0X_calc_sigma_estimate+0x494>)
 800f8cc:	fba2 2303 	umull	r2, r3, r2, r3
 800f8d0:	099b      	lsrs	r3, r3, #6
 800f8d2:	61fb      	str	r3, [r7, #28]

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 800f8d4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800f8d8:	fb03 f303 	mul.w	r3, r3, r3
 800f8dc:	633b      	str	r3, [r7, #48]	; 0x30
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = sigmaEstRef * sigmaEstRef;
 800f8de:	69fb      	ldr	r3, [r7, #28]
 800f8e0:	fb03 f303 	mul.w	r3, r3, r3
 800f8e4:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 800f8e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f8e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8ea:	4413      	add	r3, r2
 800f8ec:	4618      	mov	r0, r3
 800f8ee:	f7fd ff88 	bl	800d802 <VL53L0X_isqrt>
 800f8f2:	61b8      	str	r0, [r7, #24]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 800f8f4:	69bb      	ldr	r3, [r7, #24]
 800f8f6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800f8fa:	fb02 f303 	mul.w	r3, r2, r3
 800f8fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 800f902:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f904:	2b00      	cmp	r3, #0
 800f906:	d009      	beq.n	800f91c <VL53L0X_calc_sigma_estimate+0x43c>
 800f908:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800f90c:	2b00      	cmp	r3, #0
 800f90e:	d005      	beq.n	800f91c <VL53L0X_calc_sigma_estimate+0x43c>
 800f910:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800f914:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f918:	429a      	cmp	r2, r3
 800f91a:	d903      	bls.n	800f924 <VL53L0X_calc_sigma_estimate+0x444>
				(sigmaEstimate > cSigmaEstMax)) {
				sigmaEstimate = cSigmaEstMax;
 800f91c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f920:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800f92a:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	681a      	ldr	r2, [r3, #0]
 800f930:	68fb      	ldr	r3, [r7, #12]
 800f932:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		Status = VL53L0X_calc_dmax(
 800f936:	6939      	ldr	r1, [r7, #16]
 800f938:	683b      	ldr	r3, [r7, #0]
 800f93a:	9303      	str	r3, [sp, #12]
 800f93c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f940:	9302      	str	r3, [sp, #8]
 800f942:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800f946:	9301      	str	r3, [sp, #4]
 800f948:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f94a:	9300      	str	r3, [sp, #0]
 800f94c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f950:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f952:	68f8      	ldr	r0, [r7, #12]
 800f954:	f7ff fca8 	bl	800f2a8 <VL53L0X_calc_dmax>
 800f958:	4603      	mov	r3, r0
 800f95a:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			peakVcselDuration_us,
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800f95e:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
}
 800f962:	4618      	mov	r0, r3
 800f964:	37c0      	adds	r7, #192	; 0xc0
 800f966:	46bd      	mov	sp, r7
 800f968:	bd80      	pop	{r7, pc}
 800f96a:	bf00      	nop
 800f96c:	51eb851f 	.word	0x51eb851f
 800f970:	d1b71759 	.word	0xd1b71759
 800f974:	10624dd3 	.word	0x10624dd3

0800f978 <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 800f978:	b580      	push	{r7, lr}
 800f97a:	b090      	sub	sp, #64	; 0x40
 800f97c:	af00      	add	r7, sp, #0
 800f97e:	60f8      	str	r0, [r7, #12]
 800f980:	607a      	str	r2, [r7, #4]
 800f982:	461a      	mov	r2, r3
 800f984:	460b      	mov	r3, r1
 800f986:	72fb      	strb	r3, [r7, #11]
 800f988:	4613      	mov	r3, r2
 800f98a:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800f98c:	2300      	movs	r3, #0
 800f98e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 800f992:	2300      	movs	r3, #0
 800f994:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint8_t SignalRefClipflag = 0;
 800f998:	2300      	movs	r3, #0
 800f99a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 800f99e:	2300      	movs	r3, #0
 800f9a0:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 800f9a4:	2300      	movs	r3, #0
 800f9a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 800f9aa:	2300      	movs	r3, #0
 800f9ac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 800f9b0:	2300      	movs	r3, #0
 800f9b2:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 800f9b6:	2300      	movs	r3, #0
 800f9b8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 800f9bc:	2300      	movs	r3, #0
 800f9be:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint16_t tmpWord = 0;
 800f9c2:	2300      	movs	r3, #0
 800f9c4:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 800f9c6:	2300      	movs	r3, #0
 800f9c8:	613b      	str	r3, [r7, #16]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 800f9ca:	7afb      	ldrb	r3, [r7, #11]
 800f9cc:	10db      	asrs	r3, r3, #3
 800f9ce:	b2db      	uxtb	r3, r3
 800f9d0:	f003 030f 	and.w	r3, r3, #15
 800f9d4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	if (DeviceRangeStatusInternal == 0 ||
 800f9d8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800f9dc:	2b00      	cmp	r3, #0
 800f9de:	d017      	beq.n	800fa10 <VL53L0X_get_pal_range_status+0x98>
 800f9e0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800f9e4:	2b05      	cmp	r3, #5
 800f9e6:	d013      	beq.n	800fa10 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 5 ||
 800f9e8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800f9ec:	2b07      	cmp	r3, #7
 800f9ee:	d00f      	beq.n	800fa10 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 7 ||
 800f9f0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800f9f4:	2b0c      	cmp	r3, #12
 800f9f6:	d00b      	beq.n	800fa10 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 12 ||
 800f9f8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800f9fc:	2b0d      	cmp	r3, #13
 800f9fe:	d007      	beq.n	800fa10 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 13 ||
 800fa00:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800fa04:	2b0e      	cmp	r3, #14
 800fa06:	d003      	beq.n	800fa10 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 14 ||
 800fa08:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800fa0c:	2b0f      	cmp	r3, #15
 800fa0e:	d103      	bne.n	800fa18 <VL53L0X_get_pal_range_status+0xa0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 800fa10:	2301      	movs	r3, #1
 800fa12:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800fa16:	e002      	b.n	800fa1e <VL53L0X_get_pal_range_status+0xa6>
	} else {
		NoneFlag = 0;
 800fa18:	2300      	movs	r3, #0
 800fa1a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800fa1e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800fa22:	2b00      	cmp	r3, #0
 800fa24:	d109      	bne.n	800fa3a <VL53L0X_get_pal_range_status+0xc2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800fa26:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800fa2a:	461a      	mov	r2, r3
 800fa2c:	2100      	movs	r1, #0
 800fa2e:	68f8      	ldr	r0, [r7, #12]
 800fa30:	f7fc f980 	bl	800bd34 <VL53L0X_GetLimitCheckEnable>
 800fa34:	4603      	mov	r3, r0
 800fa36:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 800fa3a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800fa3e:	2b00      	cmp	r3, #0
 800fa40:	d02e      	beq.n	800faa0 <VL53L0X_get_pal_range_status+0x128>
 800fa42:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800fa46:	2b00      	cmp	r3, #0
 800fa48:	d12a      	bne.n	800faa0 <VL53L0X_get_pal_range_status+0x128>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 800fa4a:	f107 0310 	add.w	r3, r7, #16
 800fa4e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800fa52:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800fa54:	68f8      	ldr	r0, [r7, #12]
 800fa56:	f7ff fd43 	bl	800f4e0 <VL53L0X_calc_sigma_estimate>
 800fa5a:	4603      	mov	r3, r0
 800fa5c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 800fa60:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800fa64:	2b00      	cmp	r3, #0
 800fa66:	d103      	bne.n	800fa70 <VL53L0X_get_pal_range_status+0xf8>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 800fa68:	693b      	ldr	r3, [r7, #16]
 800fa6a:	b29a      	uxth	r2, r3
 800fa6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fa6e:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 800fa70:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800fa74:	2b00      	cmp	r3, #0
 800fa76:	d113      	bne.n	800faa0 <VL53L0X_get_pal_range_status+0x128>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 800fa78:	f107 0320 	add.w	r3, r7, #32
 800fa7c:	461a      	mov	r2, r3
 800fa7e:	2100      	movs	r1, #0
 800fa80:	68f8      	ldr	r0, [r7, #12]
 800fa82:	f7fc f9dd 	bl	800be40 <VL53L0X_GetLimitCheckValue>
 800fa86:	4603      	mov	r3, r0
 800fa88:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 800fa8c:	6a3b      	ldr	r3, [r7, #32]
 800fa8e:	2b00      	cmp	r3, #0
 800fa90:	d006      	beq.n	800faa0 <VL53L0X_get_pal_range_status+0x128>
				(SigmaEstimate > SigmaLimitValue))
 800fa92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fa94:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 800fa96:	429a      	cmp	r2, r3
 800fa98:	d902      	bls.n	800faa0 <VL53L0X_get_pal_range_status+0x128>
					/* Limit Fail */
					SigmaLimitflag = 1;
 800fa9a:	2301      	movs	r3, #1
 800fa9c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800faa0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800faa4:	2b00      	cmp	r3, #0
 800faa6:	d109      	bne.n	800fabc <VL53L0X_get_pal_range_status+0x144>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800faa8:	f107 0329 	add.w	r3, r7, #41	; 0x29
 800faac:	461a      	mov	r2, r3
 800faae:	2102      	movs	r1, #2
 800fab0:	68f8      	ldr	r0, [r7, #12]
 800fab2:	f7fc f93f 	bl	800bd34 <VL53L0X_GetLimitCheckEnable>
 800fab6:	4603      	mov	r3, r0
 800fab8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 800fabc:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800fac0:	2b00      	cmp	r3, #0
 800fac2:	d044      	beq.n	800fb4e <VL53L0X_get_pal_range_status+0x1d6>
 800fac4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800fac8:	2b00      	cmp	r3, #0
 800faca:	d140      	bne.n	800fb4e <VL53L0X_get_pal_range_status+0x1d6>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800facc:	f107 031c 	add.w	r3, r7, #28
 800fad0:	461a      	mov	r2, r3
 800fad2:	2102      	movs	r1, #2
 800fad4:	68f8      	ldr	r0, [r7, #12]
 800fad6:	f7fc f9b3 	bl	800be40 <VL53L0X_GetLimitCheckValue>
 800fada:	4603      	mov	r3, r0
 800fadc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		/* Read LastSignalRefMcps from device */
		if (Status == VL53L0X_ERROR_NONE)
 800fae0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800fae4:	2b00      	cmp	r3, #0
 800fae6:	d107      	bne.n	800faf8 <VL53L0X_get_pal_range_status+0x180>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800fae8:	2201      	movs	r2, #1
 800faea:	21ff      	movs	r1, #255	; 0xff
 800faec:	68f8      	ldr	r0, [r7, #12]
 800faee:	f000 f9bb 	bl	800fe68 <VL53L0X_WrByte>
 800faf2:	4603      	mov	r3, r0
 800faf4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		if (Status == VL53L0X_ERROR_NONE)
 800faf8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800fafc:	2b00      	cmp	r3, #0
 800fafe:	d109      	bne.n	800fb14 <VL53L0X_get_pal_range_status+0x19c>
			Status = VL53L0X_RdWord(Dev,
 800fb00:	f107 0316 	add.w	r3, r7, #22
 800fb04:	461a      	mov	r2, r3
 800fb06:	21b6      	movs	r1, #182	; 0xb6
 800fb08:	68f8      	ldr	r0, [r7, #12]
 800fb0a:	f000 fa59 	bl	800ffc0 <VL53L0X_RdWord>
 800fb0e:	4603      	mov	r3, r0
 800fb10:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
				&tmpWord);

		if (Status == VL53L0X_ERROR_NONE)
 800fb14:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800fb18:	2b00      	cmp	r3, #0
 800fb1a:	d107      	bne.n	800fb2c <VL53L0X_get_pal_range_status+0x1b4>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800fb1c:	2200      	movs	r2, #0
 800fb1e:	21ff      	movs	r1, #255	; 0xff
 800fb20:	68f8      	ldr	r0, [r7, #12]
 800fb22:	f000 f9a1 	bl	800fe68 <VL53L0X_WrByte>
 800fb26:	4603      	mov	r3, r0
 800fb28:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 800fb2c:	8afb      	ldrh	r3, [r7, #22]
 800fb2e:	025b      	lsls	r3, r3, #9
 800fb30:	62fb      	str	r3, [r7, #44]	; 0x2c
		PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 800fb32:	68fb      	ldr	r3, [r7, #12]
 800fb34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fb36:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148

		if ((SignalRefClipValue > 0) &&
 800fb3a:	69fb      	ldr	r3, [r7, #28]
 800fb3c:	2b00      	cmp	r3, #0
 800fb3e:	d006      	beq.n	800fb4e <VL53L0X_get_pal_range_status+0x1d6>
				(LastSignalRefMcps > SignalRefClipValue)) {
 800fb40:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 800fb42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fb44:	429a      	cmp	r2, r3
 800fb46:	d902      	bls.n	800fb4e <VL53L0X_get_pal_range_status+0x1d6>
			/* Limit Fail */
			SignalRefClipflag = 1;
 800fb48:	2301      	movs	r3, #1
 800fb4a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800fb4e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800fb52:	2b00      	cmp	r3, #0
 800fb54:	d109      	bne.n	800fb6a <VL53L0X_get_pal_range_status+0x1f2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800fb56:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800fb5a:	461a      	mov	r2, r3
 800fb5c:	2103      	movs	r1, #3
 800fb5e:	68f8      	ldr	r0, [r7, #12]
 800fb60:	f7fc f8e8 	bl	800bd34 <VL53L0X_GetLimitCheckEnable>
 800fb64:	4603      	mov	r3, r0
 800fb66:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 800fb6a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800fb6e:	2b00      	cmp	r3, #0
 800fb70:	d023      	beq.n	800fbba <VL53L0X_get_pal_range_status+0x242>
 800fb72:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800fb76:	2b00      	cmp	r3, #0
 800fb78:	d11f      	bne.n	800fbba <VL53L0X_get_pal_range_status+0x242>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 800fb7a:	893b      	ldrh	r3, [r7, #8]
 800fb7c:	2b00      	cmp	r3, #0
 800fb7e:	d102      	bne.n	800fb86 <VL53L0X_get_pal_range_status+0x20e>
			SignalRatePerSpad = 0;
 800fb80:	2300      	movs	r3, #0
 800fb82:	637b      	str	r3, [r7, #52]	; 0x34
 800fb84:	e005      	b.n	800fb92 <VL53L0X_get_pal_range_status+0x21a>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	021a      	lsls	r2, r3, #8
 800fb8a:	893b      	ldrh	r3, [r7, #8]
 800fb8c:	fbb2 f3f3 	udiv	r3, r2, r3
 800fb90:	637b      	str	r3, [r7, #52]	; 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800fb92:	f107 0318 	add.w	r3, r7, #24
 800fb96:	461a      	mov	r2, r3
 800fb98:	2103      	movs	r1, #3
 800fb9a:	68f8      	ldr	r0, [r7, #12]
 800fb9c:	f7fc f950 	bl	800be40 <VL53L0X_GetLimitCheckValue>
 800fba0:	4603      	mov	r3, r0
 800fba2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 800fba6:	69bb      	ldr	r3, [r7, #24]
 800fba8:	2b00      	cmp	r3, #0
 800fbaa:	d006      	beq.n	800fbba <VL53L0X_get_pal_range_status+0x242>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 800fbac:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 800fbae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fbb0:	429a      	cmp	r2, r3
 800fbb2:	d202      	bcs.n	800fbba <VL53L0X_get_pal_range_status+0x242>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 800fbb4:	2301      	movs	r3, #1
 800fbb6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800fbba:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800fbbe:	2b00      	cmp	r3, #0
 800fbc0:	d14a      	bne.n	800fc58 <VL53L0X_get_pal_range_status+0x2e0>
		if (NoneFlag == 1) {
 800fbc2:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800fbc6:	2b01      	cmp	r3, #1
 800fbc8:	d103      	bne.n	800fbd2 <VL53L0X_get_pal_range_status+0x25a>
			*pPalRangeStatus = 255;	 /* NONE */
 800fbca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fbcc:	22ff      	movs	r2, #255	; 0xff
 800fbce:	701a      	strb	r2, [r3, #0]
 800fbd0:	e042      	b.n	800fc58 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 1 ||
 800fbd2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800fbd6:	2b01      	cmp	r3, #1
 800fbd8:	d007      	beq.n	800fbea <VL53L0X_get_pal_range_status+0x272>
 800fbda:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800fbde:	2b02      	cmp	r3, #2
 800fbe0:	d003      	beq.n	800fbea <VL53L0X_get_pal_range_status+0x272>
					DeviceRangeStatusInternal == 2 ||
 800fbe2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800fbe6:	2b03      	cmp	r3, #3
 800fbe8:	d103      	bne.n	800fbf2 <VL53L0X_get_pal_range_status+0x27a>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 800fbea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fbec:	2205      	movs	r2, #5
 800fbee:	701a      	strb	r2, [r3, #0]
 800fbf0:	e032      	b.n	800fc58 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 6 ||
 800fbf2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800fbf6:	2b06      	cmp	r3, #6
 800fbf8:	d003      	beq.n	800fc02 <VL53L0X_get_pal_range_status+0x28a>
 800fbfa:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800fbfe:	2b09      	cmp	r3, #9
 800fc00:	d103      	bne.n	800fc0a <VL53L0X_get_pal_range_status+0x292>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 800fc02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fc04:	2204      	movs	r2, #4
 800fc06:	701a      	strb	r2, [r3, #0]
 800fc08:	e026      	b.n	800fc58 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 8 ||
 800fc0a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800fc0e:	2b08      	cmp	r3, #8
 800fc10:	d007      	beq.n	800fc22 <VL53L0X_get_pal_range_status+0x2aa>
 800fc12:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800fc16:	2b0a      	cmp	r3, #10
 800fc18:	d003      	beq.n	800fc22 <VL53L0X_get_pal_range_status+0x2aa>
					DeviceRangeStatusInternal == 10 ||
 800fc1a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800fc1e:	2b01      	cmp	r3, #1
 800fc20:	d103      	bne.n	800fc2a <VL53L0X_get_pal_range_status+0x2b2>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 800fc22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fc24:	2203      	movs	r2, #3
 800fc26:	701a      	strb	r2, [r3, #0]
 800fc28:	e016      	b.n	800fc58 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 4 ||
 800fc2a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800fc2e:	2b04      	cmp	r3, #4
 800fc30:	d003      	beq.n	800fc3a <VL53L0X_get_pal_range_status+0x2c2>
 800fc32:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800fc36:	2b01      	cmp	r3, #1
 800fc38:	d103      	bne.n	800fc42 <VL53L0X_get_pal_range_status+0x2ca>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 800fc3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fc3c:	2202      	movs	r2, #2
 800fc3e:	701a      	strb	r2, [r3, #0]
 800fc40:	e00a      	b.n	800fc58 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (SigmaLimitflag == 1) {
 800fc42:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800fc46:	2b01      	cmp	r3, #1
 800fc48:	d103      	bne.n	800fc52 <VL53L0X_get_pal_range_status+0x2da>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 800fc4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fc4c:	2201      	movs	r2, #1
 800fc4e:	701a      	strb	r2, [r3, #0]
 800fc50:	e002      	b.n	800fc58 <VL53L0X_get_pal_range_status+0x2e0>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 800fc52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fc54:	2200      	movs	r2, #0
 800fc56:	701a      	strb	r2, [r3, #0]
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 800fc58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fc5a:	781b      	ldrb	r3, [r3, #0]
 800fc5c:	2b00      	cmp	r3, #0
 800fc5e:	d102      	bne.n	800fc66 <VL53L0X_get_pal_range_status+0x2ee>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 800fc60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fc62:	2200      	movs	r2, #0
 800fc64:	815a      	strh	r2, [r3, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800fc66:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 800fc6a:	461a      	mov	r2, r3
 800fc6c:	2101      	movs	r1, #1
 800fc6e:	68f8      	ldr	r0, [r7, #12]
 800fc70:	f7fc f860 	bl	800bd34 <VL53L0X_GetLimitCheckEnable>
 800fc74:	4603      	mov	r3, r0
 800fc76:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 800fc7a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800fc7e:	2b00      	cmp	r3, #0
 800fc80:	d14f      	bne.n	800fd22 <VL53L0X_get_pal_range_status+0x3aa>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 800fc82:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800fc86:	2b00      	cmp	r3, #0
 800fc88:	d003      	beq.n	800fc92 <VL53L0X_get_pal_range_status+0x31a>
 800fc8a:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800fc8e:	2b01      	cmp	r3, #1
 800fc90:	d103      	bne.n	800fc9a <VL53L0X_get_pal_range_status+0x322>
			Temp8 = 1;
 800fc92:	2301      	movs	r3, #1
 800fc94:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fc98:	e002      	b.n	800fca0 <VL53L0X_get_pal_range_status+0x328>
		else
			Temp8 = 0;
 800fc9a:	2300      	movs	r3, #0
 800fc9c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800fca0:	68fb      	ldr	r3, [r7, #12]
 800fca2:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800fca6:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 800fcaa:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800fcae:	2b04      	cmp	r3, #4
 800fcb0:	d003      	beq.n	800fcba <VL53L0X_get_pal_range_status+0x342>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 800fcb2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 800fcb6:	2b00      	cmp	r3, #0
 800fcb8:	d103      	bne.n	800fcc2 <VL53L0X_get_pal_range_status+0x34a>
			Temp8 = 1;
 800fcba:	2301      	movs	r3, #1
 800fcbc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fcc0:	e002      	b.n	800fcc8 <VL53L0X_get_pal_range_status+0x350>
		else
			Temp8 = 0;
 800fcc2:	2300      	movs	r3, #0
 800fcc4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800fcc8:	68fb      	ldr	r3, [r7, #12]
 800fcca:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800fcce:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 800fcd2:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800fcd6:	2b00      	cmp	r3, #0
 800fcd8:	d003      	beq.n	800fce2 <VL53L0X_get_pal_range_status+0x36a>
 800fcda:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800fcde:	2b01      	cmp	r3, #1
 800fce0:	d103      	bne.n	800fcea <VL53L0X_get_pal_range_status+0x372>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 800fce2:	2301      	movs	r3, #1
 800fce4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fce8:	e002      	b.n	800fcf0 <VL53L0X_get_pal_range_status+0x378>
		else
			Temp8 = 0;
 800fcea:	2300      	movs	r3, #0
 800fcec:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800fcf0:	68fb      	ldr	r3, [r7, #12]
 800fcf2:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800fcf6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 800fcfa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800fcfe:	2b00      	cmp	r3, #0
 800fd00:	d003      	beq.n	800fd0a <VL53L0X_get_pal_range_status+0x392>
 800fd02:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800fd06:	2b01      	cmp	r3, #1
 800fd08:	d103      	bne.n	800fd12 <VL53L0X_get_pal_range_status+0x39a>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 800fd0a:	2301      	movs	r3, #1
 800fd0c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fd10:	e002      	b.n	800fd18 <VL53L0X_get_pal_range_status+0x3a0>
		else
			Temp8 = 0;
 800fd12:	2300      	movs	r3, #0
 800fd14:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800fd18:	68fb      	ldr	r3, [r7, #12]
 800fd1a:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800fd1e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800fd22:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f

}
 800fd26:	4618      	mov	r0, r3
 800fd28:	3740      	adds	r7, #64	; 0x40
 800fd2a:	46bd      	mov	sp, r7
 800fd2c:	bd80      	pop	{r7, pc}

0800fd2e <_I2CWrite>:
#endif


uint8_t _I2CBuffer[64];

int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800fd2e:	b580      	push	{r7, lr}
 800fd30:	b088      	sub	sp, #32
 800fd32:	af02      	add	r7, sp, #8
 800fd34:	60f8      	str	r0, [r7, #12]
 800fd36:	60b9      	str	r1, [r7, #8]
 800fd38:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	330a      	adds	r3, #10
 800fd3e:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 800fd40:	68fb      	ldr	r3, [r7, #12]
 800fd42:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 800fd46:	68fb      	ldr	r3, [r7, #12]
 800fd48:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800fd4c:	b299      	uxth	r1, r3
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	b29a      	uxth	r2, r3
 800fd52:	697b      	ldr	r3, [r7, #20]
 800fd54:	9300      	str	r3, [sp, #0]
 800fd56:	4613      	mov	r3, r2
 800fd58:	68ba      	ldr	r2, [r7, #8]
 800fd5a:	f7f4 fbdb 	bl	8004514 <HAL_I2C_Master_Transmit>
 800fd5e:	4603      	mov	r3, r0
 800fd60:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800fd62:	693b      	ldr	r3, [r7, #16]
}
 800fd64:	4618      	mov	r0, r3
 800fd66:	3718      	adds	r7, #24
 800fd68:	46bd      	mov	sp, r7
 800fd6a:	bd80      	pop	{r7, pc}

0800fd6c <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800fd6c:	b580      	push	{r7, lr}
 800fd6e:	b088      	sub	sp, #32
 800fd70:	af02      	add	r7, sp, #8
 800fd72:	60f8      	str	r0, [r7, #12]
 800fd74:	60b9      	str	r1, [r7, #8]
 800fd76:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	330a      	adds	r3, #10
 800fd7c:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 800fd7e:	68fb      	ldr	r3, [r7, #12]
 800fd80:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 800fd84:	68fb      	ldr	r3, [r7, #12]
 800fd86:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800fd8a:	f043 0301 	orr.w	r3, r3, #1
 800fd8e:	b2db      	uxtb	r3, r3
 800fd90:	b299      	uxth	r1, r3
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	b29a      	uxth	r2, r3
 800fd96:	697b      	ldr	r3, [r7, #20]
 800fd98:	9300      	str	r3, [sp, #0]
 800fd9a:	4613      	mov	r3, r2
 800fd9c:	68ba      	ldr	r2, [r7, #8]
 800fd9e:	f7f4 fcad 	bl	80046fc <HAL_I2C_Master_Receive>
 800fda2:	4603      	mov	r3, r0
 800fda4:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800fda6:	693b      	ldr	r3, [r7, #16]
}
 800fda8:	4618      	mov	r0, r3
 800fdaa:	3718      	adds	r7, #24
 800fdac:	46bd      	mov	sp, r7
 800fdae:	bd80      	pop	{r7, pc}

0800fdb0 <VL53L0X_WriteMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800fdb0:	b580      	push	{r7, lr}
 800fdb2:	b086      	sub	sp, #24
 800fdb4:	af00      	add	r7, sp, #0
 800fdb6:	60f8      	str	r0, [r7, #12]
 800fdb8:	607a      	str	r2, [r7, #4]
 800fdba:	603b      	str	r3, [r7, #0]
 800fdbc:	460b      	mov	r3, r1
 800fdbe:	72fb      	strb	r3, [r7, #11]
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800fdc0:	2300      	movs	r3, #0
 800fdc2:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 800fdc4:	683b      	ldr	r3, [r7, #0]
 800fdc6:	2b3f      	cmp	r3, #63	; 0x3f
 800fdc8:	d902      	bls.n	800fdd0 <VL53L0X_WriteMulti+0x20>
        return VL53L0X_ERROR_INVALID_PARAMS;
 800fdca:	f06f 0303 	mvn.w	r3, #3
 800fdce:	e016      	b.n	800fdfe <VL53L0X_WriteMulti+0x4e>
    }
    _I2CBuffer[0] = index;
 800fdd0:	4a0d      	ldr	r2, [pc, #52]	; (800fe08 <VL53L0X_WriteMulti+0x58>)
 800fdd2:	7afb      	ldrb	r3, [r7, #11]
 800fdd4:	7013      	strb	r3, [r2, #0]
    memcpy(&_I2CBuffer[1], pdata, count);
 800fdd6:	683a      	ldr	r2, [r7, #0]
 800fdd8:	6879      	ldr	r1, [r7, #4]
 800fdda:	480c      	ldr	r0, [pc, #48]	; (800fe0c <VL53L0X_WriteMulti+0x5c>)
 800fddc:	f000 f99e 	bl	801011c <memcpy>
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 800fde0:	683b      	ldr	r3, [r7, #0]
 800fde2:	3301      	adds	r3, #1
 800fde4:	461a      	mov	r2, r3
 800fde6:	4908      	ldr	r1, [pc, #32]	; (800fe08 <VL53L0X_WriteMulti+0x58>)
 800fde8:	68f8      	ldr	r0, [r7, #12]
 800fdea:	f7ff ffa0 	bl	800fd2e <_I2CWrite>
 800fdee:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800fdf0:	693b      	ldr	r3, [r7, #16]
 800fdf2:	2b00      	cmp	r3, #0
 800fdf4:	d001      	beq.n	800fdfa <VL53L0X_WriteMulti+0x4a>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800fdf6:	23ec      	movs	r3, #236	; 0xec
 800fdf8:	75fb      	strb	r3, [r7, #23]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800fdfa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fdfe:	4618      	mov	r0, r3
 800fe00:	3718      	adds	r7, #24
 800fe02:	46bd      	mov	sp, r7
 800fe04:	bd80      	pop	{r7, pc}
 800fe06:	bf00      	nop
 800fe08:	2000a14c 	.word	0x2000a14c
 800fe0c:	2000a14d 	.word	0x2000a14d

0800fe10 <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800fe10:	b580      	push	{r7, lr}
 800fe12:	b086      	sub	sp, #24
 800fe14:	af00      	add	r7, sp, #0
 800fe16:	60f8      	str	r0, [r7, #12]
 800fe18:	607a      	str	r2, [r7, #4]
 800fe1a:	603b      	str	r3, [r7, #0]
 800fe1c:	460b      	mov	r3, r1
 800fe1e:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800fe20:	2300      	movs	r3, #0
 800fe22:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800fe24:	f107 030b 	add.w	r3, r7, #11
 800fe28:	2201      	movs	r2, #1
 800fe2a:	4619      	mov	r1, r3
 800fe2c:	68f8      	ldr	r0, [r7, #12]
 800fe2e:	f7ff ff7e 	bl	800fd2e <_I2CWrite>
 800fe32:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800fe34:	693b      	ldr	r3, [r7, #16]
 800fe36:	2b00      	cmp	r3, #0
 800fe38:	d002      	beq.n	800fe40 <VL53L0X_ReadMulti+0x30>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800fe3a:	23ec      	movs	r3, #236	; 0xec
 800fe3c:	75fb      	strb	r3, [r7, #23]
        goto done;
 800fe3e:	e00c      	b.n	800fe5a <VL53L0X_ReadMulti+0x4a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 800fe40:	683a      	ldr	r2, [r7, #0]
 800fe42:	6879      	ldr	r1, [r7, #4]
 800fe44:	68f8      	ldr	r0, [r7, #12]
 800fe46:	f7ff ff91 	bl	800fd6c <_I2CRead>
 800fe4a:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800fe4c:	693b      	ldr	r3, [r7, #16]
 800fe4e:	2b00      	cmp	r3, #0
 800fe50:	d002      	beq.n	800fe58 <VL53L0X_ReadMulti+0x48>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800fe52:	23ec      	movs	r3, #236	; 0xec
 800fe54:	75fb      	strb	r3, [r7, #23]
 800fe56:	e000      	b.n	800fe5a <VL53L0X_ReadMulti+0x4a>
    }
done:
 800fe58:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 800fe5a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fe5e:	4618      	mov	r0, r3
 800fe60:	3718      	adds	r7, #24
 800fe62:	46bd      	mov	sp, r7
 800fe64:	bd80      	pop	{r7, pc}
	...

0800fe68 <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 800fe68:	b580      	push	{r7, lr}
 800fe6a:	b084      	sub	sp, #16
 800fe6c:	af00      	add	r7, sp, #0
 800fe6e:	6078      	str	r0, [r7, #4]
 800fe70:	460b      	mov	r3, r1
 800fe72:	70fb      	strb	r3, [r7, #3]
 800fe74:	4613      	mov	r3, r2
 800fe76:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800fe78:	2300      	movs	r3, #0
 800fe7a:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800fe7c:	4a0b      	ldr	r2, [pc, #44]	; (800feac <VL53L0X_WrByte+0x44>)
 800fe7e:	78fb      	ldrb	r3, [r7, #3]
 800fe80:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data;
 800fe82:	4a0a      	ldr	r2, [pc, #40]	; (800feac <VL53L0X_WrByte+0x44>)
 800fe84:	78bb      	ldrb	r3, [r7, #2]
 800fe86:	7053      	strb	r3, [r2, #1]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800fe88:	2202      	movs	r2, #2
 800fe8a:	4908      	ldr	r1, [pc, #32]	; (800feac <VL53L0X_WrByte+0x44>)
 800fe8c:	6878      	ldr	r0, [r7, #4]
 800fe8e:	f7ff ff4e 	bl	800fd2e <_I2CWrite>
 800fe92:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800fe94:	68bb      	ldr	r3, [r7, #8]
 800fe96:	2b00      	cmp	r3, #0
 800fe98:	d001      	beq.n	800fe9e <VL53L0X_WrByte+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800fe9a:	23ec      	movs	r3, #236	; 0xec
 800fe9c:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800fe9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800fea2:	4618      	mov	r0, r3
 800fea4:	3710      	adds	r7, #16
 800fea6:	46bd      	mov	sp, r7
 800fea8:	bd80      	pop	{r7, pc}
 800feaa:	bf00      	nop
 800feac:	2000a14c 	.word	0x2000a14c

0800feb0 <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 800feb0:	b580      	push	{r7, lr}
 800feb2:	b084      	sub	sp, #16
 800feb4:	af00      	add	r7, sp, #0
 800feb6:	6078      	str	r0, [r7, #4]
 800feb8:	460b      	mov	r3, r1
 800feba:	70fb      	strb	r3, [r7, #3]
 800febc:	4613      	mov	r3, r2
 800febe:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800fec0:	2300      	movs	r3, #0
 800fec2:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800fec4:	4a0e      	ldr	r2, [pc, #56]	; (800ff00 <VL53L0X_WrWord+0x50>)
 800fec6:	78fb      	ldrb	r3, [r7, #3]
 800fec8:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data >> 8;
 800feca:	883b      	ldrh	r3, [r7, #0]
 800fecc:	0a1b      	lsrs	r3, r3, #8
 800fece:	b29b      	uxth	r3, r3
 800fed0:	b2da      	uxtb	r2, r3
 800fed2:	4b0b      	ldr	r3, [pc, #44]	; (800ff00 <VL53L0X_WrWord+0x50>)
 800fed4:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 800fed6:	883b      	ldrh	r3, [r7, #0]
 800fed8:	b2da      	uxtb	r2, r3
 800feda:	4b09      	ldr	r3, [pc, #36]	; (800ff00 <VL53L0X_WrWord+0x50>)
 800fedc:	709a      	strb	r2, [r3, #2]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 800fede:	2203      	movs	r2, #3
 800fee0:	4907      	ldr	r1, [pc, #28]	; (800ff00 <VL53L0X_WrWord+0x50>)
 800fee2:	6878      	ldr	r0, [r7, #4]
 800fee4:	f7ff ff23 	bl	800fd2e <_I2CWrite>
 800fee8:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800feea:	68bb      	ldr	r3, [r7, #8]
 800feec:	2b00      	cmp	r3, #0
 800feee:	d001      	beq.n	800fef4 <VL53L0X_WrWord+0x44>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800fef0:	23ec      	movs	r3, #236	; 0xec
 800fef2:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800fef4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800fef8:	4618      	mov	r0, r3
 800fefa:	3710      	adds	r7, #16
 800fefc:	46bd      	mov	sp, r7
 800fefe:	bd80      	pop	{r7, pc}
 800ff00:	2000a14c 	.word	0x2000a14c

0800ff04 <VL53L0X_UpdateByte>:
    }
    VL53L0X_PutI2cBus();
    return Status;
}

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 800ff04:	b580      	push	{r7, lr}
 800ff06:	b084      	sub	sp, #16
 800ff08:	af00      	add	r7, sp, #0
 800ff0a:	6078      	str	r0, [r7, #4]
 800ff0c:	4608      	mov	r0, r1
 800ff0e:	4611      	mov	r1, r2
 800ff10:	461a      	mov	r2, r3
 800ff12:	4603      	mov	r3, r0
 800ff14:	70fb      	strb	r3, [r7, #3]
 800ff16:	460b      	mov	r3, r1
 800ff18:	70bb      	strb	r3, [r7, #2]
 800ff1a:	4613      	mov	r3, r2
 800ff1c:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ff1e:	2300      	movs	r3, #0
 800ff20:	73fb      	strb	r3, [r7, #15]
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 800ff22:	f107 020e 	add.w	r2, r7, #14
 800ff26:	78fb      	ldrb	r3, [r7, #3]
 800ff28:	4619      	mov	r1, r3
 800ff2a:	6878      	ldr	r0, [r7, #4]
 800ff2c:	f000 f81e 	bl	800ff6c <VL53L0X_RdByte>
 800ff30:	4603      	mov	r3, r0
 800ff32:	73fb      	strb	r3, [r7, #15]
    if (Status) {
 800ff34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ff38:	2b00      	cmp	r3, #0
 800ff3a:	d110      	bne.n	800ff5e <VL53L0X_UpdateByte+0x5a>
        goto done;
    }
    data = (data & AndData) | OrData;
 800ff3c:	7bba      	ldrb	r2, [r7, #14]
 800ff3e:	78bb      	ldrb	r3, [r7, #2]
 800ff40:	4013      	ands	r3, r2
 800ff42:	b2da      	uxtb	r2, r3
 800ff44:	787b      	ldrb	r3, [r7, #1]
 800ff46:	4313      	orrs	r3, r2
 800ff48:	b2db      	uxtb	r3, r3
 800ff4a:	73bb      	strb	r3, [r7, #14]
    Status = VL53L0X_WrByte(Dev, index, data);
 800ff4c:	7bba      	ldrb	r2, [r7, #14]
 800ff4e:	78fb      	ldrb	r3, [r7, #3]
 800ff50:	4619      	mov	r1, r3
 800ff52:	6878      	ldr	r0, [r7, #4]
 800ff54:	f7ff ff88 	bl	800fe68 <VL53L0X_WrByte>
 800ff58:	4603      	mov	r3, r0
 800ff5a:	73fb      	strb	r3, [r7, #15]
 800ff5c:	e000      	b.n	800ff60 <VL53L0X_UpdateByte+0x5c>
        goto done;
 800ff5e:	bf00      	nop
done:
    return Status;
 800ff60:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ff64:	4618      	mov	r0, r3
 800ff66:	3710      	adds	r7, #16
 800ff68:	46bd      	mov	sp, r7
 800ff6a:	bd80      	pop	{r7, pc}

0800ff6c <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 800ff6c:	b580      	push	{r7, lr}
 800ff6e:	b086      	sub	sp, #24
 800ff70:	af00      	add	r7, sp, #0
 800ff72:	60f8      	str	r0, [r7, #12]
 800ff74:	460b      	mov	r3, r1
 800ff76:	607a      	str	r2, [r7, #4]
 800ff78:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ff7a:	2300      	movs	r3, #0
 800ff7c:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800ff7e:	f107 030b 	add.w	r3, r7, #11
 800ff82:	2201      	movs	r2, #1
 800ff84:	4619      	mov	r1, r3
 800ff86:	68f8      	ldr	r0, [r7, #12]
 800ff88:	f7ff fed1 	bl	800fd2e <_I2CWrite>
 800ff8c:	6138      	str	r0, [r7, #16]
    if( status_int ){
 800ff8e:	693b      	ldr	r3, [r7, #16]
 800ff90:	2b00      	cmp	r3, #0
 800ff92:	d002      	beq.n	800ff9a <VL53L0X_RdByte+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ff94:	23ec      	movs	r3, #236	; 0xec
 800ff96:	75fb      	strb	r3, [r7, #23]
        goto done;
 800ff98:	e00c      	b.n	800ffb4 <VL53L0X_RdByte+0x48>
    }
    status_int = _I2CRead(Dev, data, 1);
 800ff9a:	2201      	movs	r2, #1
 800ff9c:	6879      	ldr	r1, [r7, #4]
 800ff9e:	68f8      	ldr	r0, [r7, #12]
 800ffa0:	f7ff fee4 	bl	800fd6c <_I2CRead>
 800ffa4:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800ffa6:	693b      	ldr	r3, [r7, #16]
 800ffa8:	2b00      	cmp	r3, #0
 800ffaa:	d002      	beq.n	800ffb2 <VL53L0X_RdByte+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ffac:	23ec      	movs	r3, #236	; 0xec
 800ffae:	75fb      	strb	r3, [r7, #23]
 800ffb0:	e000      	b.n	800ffb4 <VL53L0X_RdByte+0x48>
    }
done:
 800ffb2:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 800ffb4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ffb8:	4618      	mov	r0, r3
 800ffba:	3718      	adds	r7, #24
 800ffbc:	46bd      	mov	sp, r7
 800ffbe:	bd80      	pop	{r7, pc}

0800ffc0 <VL53L0X_RdWord>:

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 800ffc0:	b580      	push	{r7, lr}
 800ffc2:	b086      	sub	sp, #24
 800ffc4:	af00      	add	r7, sp, #0
 800ffc6:	60f8      	str	r0, [r7, #12]
 800ffc8:	460b      	mov	r3, r1
 800ffca:	607a      	str	r2, [r7, #4]
 800ffcc:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ffce:	2300      	movs	r3, #0
 800ffd0:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800ffd2:	f107 030b 	add.w	r3, r7, #11
 800ffd6:	2201      	movs	r2, #1
 800ffd8:	4619      	mov	r1, r3
 800ffda:	68f8      	ldr	r0, [r7, #12]
 800ffdc:	f7ff fea7 	bl	800fd2e <_I2CWrite>
 800ffe0:	6138      	str	r0, [r7, #16]

    if( status_int ){
 800ffe2:	693b      	ldr	r3, [r7, #16]
 800ffe4:	2b00      	cmp	r3, #0
 800ffe6:	d002      	beq.n	800ffee <VL53L0X_RdWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ffe8:	23ec      	movs	r3, #236	; 0xec
 800ffea:	75fb      	strb	r3, [r7, #23]
        goto done;
 800ffec:	e017      	b.n	801001e <VL53L0X_RdWord+0x5e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 800ffee:	2202      	movs	r2, #2
 800fff0:	490e      	ldr	r1, [pc, #56]	; (801002c <VL53L0X_RdWord+0x6c>)
 800fff2:	68f8      	ldr	r0, [r7, #12]
 800fff4:	f7ff feba 	bl	800fd6c <_I2CRead>
 800fff8:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800fffa:	693b      	ldr	r3, [r7, #16]
 800fffc:	2b00      	cmp	r3, #0
 800fffe:	d002      	beq.n	8010006 <VL53L0X_RdWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8010000:	23ec      	movs	r3, #236	; 0xec
 8010002:	75fb      	strb	r3, [r7, #23]
        goto done;
 8010004:	e00b      	b.n	801001e <VL53L0X_RdWord+0x5e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 8010006:	4b09      	ldr	r3, [pc, #36]	; (801002c <VL53L0X_RdWord+0x6c>)
 8010008:	781b      	ldrb	r3, [r3, #0]
 801000a:	b29b      	uxth	r3, r3
 801000c:	021b      	lsls	r3, r3, #8
 801000e:	b29a      	uxth	r2, r3
 8010010:	4b06      	ldr	r3, [pc, #24]	; (801002c <VL53L0X_RdWord+0x6c>)
 8010012:	785b      	ldrb	r3, [r3, #1]
 8010014:	b29b      	uxth	r3, r3
 8010016:	4413      	add	r3, r2
 8010018:	b29a      	uxth	r2, r3
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	801a      	strh	r2, [r3, #0]
done:
    VL53L0X_PutI2cBus();
    return Status;
 801001e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010022:	4618      	mov	r0, r3
 8010024:	3718      	adds	r7, #24
 8010026:	46bd      	mov	sp, r7
 8010028:	bd80      	pop	{r7, pc}
 801002a:	bf00      	nop
 801002c:	2000a14c 	.word	0x2000a14c

08010030 <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 8010030:	b580      	push	{r7, lr}
 8010032:	b086      	sub	sp, #24
 8010034:	af00      	add	r7, sp, #0
 8010036:	60f8      	str	r0, [r7, #12]
 8010038:	460b      	mov	r3, r1
 801003a:	607a      	str	r2, [r7, #4]
 801003c:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 801003e:	2300      	movs	r3, #0
 8010040:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8010042:	f107 030b 	add.w	r3, r7, #11
 8010046:	2201      	movs	r2, #1
 8010048:	4619      	mov	r1, r3
 801004a:	68f8      	ldr	r0, [r7, #12]
 801004c:	f7ff fe6f 	bl	800fd2e <_I2CWrite>
 8010050:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8010052:	693b      	ldr	r3, [r7, #16]
 8010054:	2b00      	cmp	r3, #0
 8010056:	d002      	beq.n	801005e <VL53L0X_RdDWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8010058:	23ec      	movs	r3, #236	; 0xec
 801005a:	75fb      	strb	r3, [r7, #23]
        goto done;
 801005c:	e01b      	b.n	8010096 <VL53L0X_RdDWord+0x66>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 801005e:	2204      	movs	r2, #4
 8010060:	4910      	ldr	r1, [pc, #64]	; (80100a4 <VL53L0X_RdDWord+0x74>)
 8010062:	68f8      	ldr	r0, [r7, #12]
 8010064:	f7ff fe82 	bl	800fd6c <_I2CRead>
 8010068:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 801006a:	693b      	ldr	r3, [r7, #16]
 801006c:	2b00      	cmp	r3, #0
 801006e:	d002      	beq.n	8010076 <VL53L0X_RdDWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8010070:	23ec      	movs	r3, #236	; 0xec
 8010072:	75fb      	strb	r3, [r7, #23]
        goto done;
 8010074:	e00f      	b.n	8010096 <VL53L0X_RdDWord+0x66>
    }

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 8010076:	4b0b      	ldr	r3, [pc, #44]	; (80100a4 <VL53L0X_RdDWord+0x74>)
 8010078:	781b      	ldrb	r3, [r3, #0]
 801007a:	061a      	lsls	r2, r3, #24
 801007c:	4b09      	ldr	r3, [pc, #36]	; (80100a4 <VL53L0X_RdDWord+0x74>)
 801007e:	785b      	ldrb	r3, [r3, #1]
 8010080:	041b      	lsls	r3, r3, #16
 8010082:	441a      	add	r2, r3
 8010084:	4b07      	ldr	r3, [pc, #28]	; (80100a4 <VL53L0X_RdDWord+0x74>)
 8010086:	789b      	ldrb	r3, [r3, #2]
 8010088:	021b      	lsls	r3, r3, #8
 801008a:	4413      	add	r3, r2
 801008c:	4a05      	ldr	r2, [pc, #20]	; (80100a4 <VL53L0X_RdDWord+0x74>)
 801008e:	78d2      	ldrb	r2, [r2, #3]
 8010090:	441a      	add	r2, r3
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	601a      	str	r2, [r3, #0]

done:
    VL53L0X_PutI2cBus();
    return Status;
 8010096:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801009a:	4618      	mov	r0, r3
 801009c:	3718      	adds	r7, #24
 801009e:	46bd      	mov	sp, r7
 80100a0:	bd80      	pop	{r7, pc}
 80100a2:	bf00      	nop
 80100a4:	2000a14c 	.word	0x2000a14c

080100a8 <VL53L0X_PollingDelay>:

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 80100a8:	b580      	push	{r7, lr}
 80100aa:	b084      	sub	sp, #16
 80100ac:	af00      	add	r7, sp, #0
 80100ae:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 80100b0:	2300      	movs	r3, #0
 80100b2:	73fb      	strb	r3, [r7, #15]

    // do nothing
    VL53L0X_OsDelay();
 80100b4:	2002      	movs	r0, #2
 80100b6:	f7f3 fb27 	bl	8003708 <HAL_Delay>
    return status;
 80100ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80100be:	4618      	mov	r0, r3
 80100c0:	3710      	adds	r7, #16
 80100c2:	46bd      	mov	sp, r7
 80100c4:	bd80      	pop	{r7, pc}
	...

080100c8 <__errno>:
 80100c8:	4b01      	ldr	r3, [pc, #4]	; (80100d0 <__errno+0x8>)
 80100ca:	6818      	ldr	r0, [r3, #0]
 80100cc:	4770      	bx	lr
 80100ce:	bf00      	nop
 80100d0:	2000038c 	.word	0x2000038c

080100d4 <__libc_init_array>:
 80100d4:	b570      	push	{r4, r5, r6, lr}
 80100d6:	4d0d      	ldr	r5, [pc, #52]	; (801010c <__libc_init_array+0x38>)
 80100d8:	4c0d      	ldr	r4, [pc, #52]	; (8010110 <__libc_init_array+0x3c>)
 80100da:	1b64      	subs	r4, r4, r5
 80100dc:	10a4      	asrs	r4, r4, #2
 80100de:	2600      	movs	r6, #0
 80100e0:	42a6      	cmp	r6, r4
 80100e2:	d109      	bne.n	80100f8 <__libc_init_array+0x24>
 80100e4:	4d0b      	ldr	r5, [pc, #44]	; (8010114 <__libc_init_array+0x40>)
 80100e6:	4c0c      	ldr	r4, [pc, #48]	; (8010118 <__libc_init_array+0x44>)
 80100e8:	f006 f874 	bl	80161d4 <_init>
 80100ec:	1b64      	subs	r4, r4, r5
 80100ee:	10a4      	asrs	r4, r4, #2
 80100f0:	2600      	movs	r6, #0
 80100f2:	42a6      	cmp	r6, r4
 80100f4:	d105      	bne.n	8010102 <__libc_init_array+0x2e>
 80100f6:	bd70      	pop	{r4, r5, r6, pc}
 80100f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80100fc:	4798      	blx	r3
 80100fe:	3601      	adds	r6, #1
 8010100:	e7ee      	b.n	80100e0 <__libc_init_array+0xc>
 8010102:	f855 3b04 	ldr.w	r3, [r5], #4
 8010106:	4798      	blx	r3
 8010108:	3601      	adds	r6, #1
 801010a:	e7f2      	b.n	80100f2 <__libc_init_array+0x1e>
 801010c:	08016e08 	.word	0x08016e08
 8010110:	08016e08 	.word	0x08016e08
 8010114:	08016e08 	.word	0x08016e08
 8010118:	08016e0c 	.word	0x08016e0c

0801011c <memcpy>:
 801011c:	440a      	add	r2, r1
 801011e:	4291      	cmp	r1, r2
 8010120:	f100 33ff 	add.w	r3, r0, #4294967295
 8010124:	d100      	bne.n	8010128 <memcpy+0xc>
 8010126:	4770      	bx	lr
 8010128:	b510      	push	{r4, lr}
 801012a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801012e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010132:	4291      	cmp	r1, r2
 8010134:	d1f9      	bne.n	801012a <memcpy+0xe>
 8010136:	bd10      	pop	{r4, pc}

08010138 <memset>:
 8010138:	4402      	add	r2, r0
 801013a:	4603      	mov	r3, r0
 801013c:	4293      	cmp	r3, r2
 801013e:	d100      	bne.n	8010142 <memset+0xa>
 8010140:	4770      	bx	lr
 8010142:	f803 1b01 	strb.w	r1, [r3], #1
 8010146:	e7f9      	b.n	801013c <memset+0x4>

08010148 <__cvt>:
 8010148:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801014c:	ec55 4b10 	vmov	r4, r5, d0
 8010150:	2d00      	cmp	r5, #0
 8010152:	460e      	mov	r6, r1
 8010154:	4619      	mov	r1, r3
 8010156:	462b      	mov	r3, r5
 8010158:	bfbb      	ittet	lt
 801015a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801015e:	461d      	movlt	r5, r3
 8010160:	2300      	movge	r3, #0
 8010162:	232d      	movlt	r3, #45	; 0x2d
 8010164:	700b      	strb	r3, [r1, #0]
 8010166:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010168:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801016c:	4691      	mov	r9, r2
 801016e:	f023 0820 	bic.w	r8, r3, #32
 8010172:	bfbc      	itt	lt
 8010174:	4622      	movlt	r2, r4
 8010176:	4614      	movlt	r4, r2
 8010178:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801017c:	d005      	beq.n	801018a <__cvt+0x42>
 801017e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8010182:	d100      	bne.n	8010186 <__cvt+0x3e>
 8010184:	3601      	adds	r6, #1
 8010186:	2102      	movs	r1, #2
 8010188:	e000      	b.n	801018c <__cvt+0x44>
 801018a:	2103      	movs	r1, #3
 801018c:	ab03      	add	r3, sp, #12
 801018e:	9301      	str	r3, [sp, #4]
 8010190:	ab02      	add	r3, sp, #8
 8010192:	9300      	str	r3, [sp, #0]
 8010194:	ec45 4b10 	vmov	d0, r4, r5
 8010198:	4653      	mov	r3, sl
 801019a:	4632      	mov	r2, r6
 801019c:	f001 fec4 	bl	8011f28 <_dtoa_r>
 80101a0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80101a4:	4607      	mov	r7, r0
 80101a6:	d102      	bne.n	80101ae <__cvt+0x66>
 80101a8:	f019 0f01 	tst.w	r9, #1
 80101ac:	d022      	beq.n	80101f4 <__cvt+0xac>
 80101ae:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80101b2:	eb07 0906 	add.w	r9, r7, r6
 80101b6:	d110      	bne.n	80101da <__cvt+0x92>
 80101b8:	783b      	ldrb	r3, [r7, #0]
 80101ba:	2b30      	cmp	r3, #48	; 0x30
 80101bc:	d10a      	bne.n	80101d4 <__cvt+0x8c>
 80101be:	2200      	movs	r2, #0
 80101c0:	2300      	movs	r3, #0
 80101c2:	4620      	mov	r0, r4
 80101c4:	4629      	mov	r1, r5
 80101c6:	f7f0 fcaf 	bl	8000b28 <__aeabi_dcmpeq>
 80101ca:	b918      	cbnz	r0, 80101d4 <__cvt+0x8c>
 80101cc:	f1c6 0601 	rsb	r6, r6, #1
 80101d0:	f8ca 6000 	str.w	r6, [sl]
 80101d4:	f8da 3000 	ldr.w	r3, [sl]
 80101d8:	4499      	add	r9, r3
 80101da:	2200      	movs	r2, #0
 80101dc:	2300      	movs	r3, #0
 80101de:	4620      	mov	r0, r4
 80101e0:	4629      	mov	r1, r5
 80101e2:	f7f0 fca1 	bl	8000b28 <__aeabi_dcmpeq>
 80101e6:	b108      	cbz	r0, 80101ec <__cvt+0xa4>
 80101e8:	f8cd 900c 	str.w	r9, [sp, #12]
 80101ec:	2230      	movs	r2, #48	; 0x30
 80101ee:	9b03      	ldr	r3, [sp, #12]
 80101f0:	454b      	cmp	r3, r9
 80101f2:	d307      	bcc.n	8010204 <__cvt+0xbc>
 80101f4:	9b03      	ldr	r3, [sp, #12]
 80101f6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80101f8:	1bdb      	subs	r3, r3, r7
 80101fa:	4638      	mov	r0, r7
 80101fc:	6013      	str	r3, [r2, #0]
 80101fe:	b004      	add	sp, #16
 8010200:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010204:	1c59      	adds	r1, r3, #1
 8010206:	9103      	str	r1, [sp, #12]
 8010208:	701a      	strb	r2, [r3, #0]
 801020a:	e7f0      	b.n	80101ee <__cvt+0xa6>

0801020c <__exponent>:
 801020c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801020e:	4603      	mov	r3, r0
 8010210:	2900      	cmp	r1, #0
 8010212:	bfb8      	it	lt
 8010214:	4249      	neglt	r1, r1
 8010216:	f803 2b02 	strb.w	r2, [r3], #2
 801021a:	bfb4      	ite	lt
 801021c:	222d      	movlt	r2, #45	; 0x2d
 801021e:	222b      	movge	r2, #43	; 0x2b
 8010220:	2909      	cmp	r1, #9
 8010222:	7042      	strb	r2, [r0, #1]
 8010224:	dd2a      	ble.n	801027c <__exponent+0x70>
 8010226:	f10d 0407 	add.w	r4, sp, #7
 801022a:	46a4      	mov	ip, r4
 801022c:	270a      	movs	r7, #10
 801022e:	46a6      	mov	lr, r4
 8010230:	460a      	mov	r2, r1
 8010232:	fb91 f6f7 	sdiv	r6, r1, r7
 8010236:	fb07 1516 	mls	r5, r7, r6, r1
 801023a:	3530      	adds	r5, #48	; 0x30
 801023c:	2a63      	cmp	r2, #99	; 0x63
 801023e:	f104 34ff 	add.w	r4, r4, #4294967295
 8010242:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8010246:	4631      	mov	r1, r6
 8010248:	dcf1      	bgt.n	801022e <__exponent+0x22>
 801024a:	3130      	adds	r1, #48	; 0x30
 801024c:	f1ae 0502 	sub.w	r5, lr, #2
 8010250:	f804 1c01 	strb.w	r1, [r4, #-1]
 8010254:	1c44      	adds	r4, r0, #1
 8010256:	4629      	mov	r1, r5
 8010258:	4561      	cmp	r1, ip
 801025a:	d30a      	bcc.n	8010272 <__exponent+0x66>
 801025c:	f10d 0209 	add.w	r2, sp, #9
 8010260:	eba2 020e 	sub.w	r2, r2, lr
 8010264:	4565      	cmp	r5, ip
 8010266:	bf88      	it	hi
 8010268:	2200      	movhi	r2, #0
 801026a:	4413      	add	r3, r2
 801026c:	1a18      	subs	r0, r3, r0
 801026e:	b003      	add	sp, #12
 8010270:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010272:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010276:	f804 2f01 	strb.w	r2, [r4, #1]!
 801027a:	e7ed      	b.n	8010258 <__exponent+0x4c>
 801027c:	2330      	movs	r3, #48	; 0x30
 801027e:	3130      	adds	r1, #48	; 0x30
 8010280:	7083      	strb	r3, [r0, #2]
 8010282:	70c1      	strb	r1, [r0, #3]
 8010284:	1d03      	adds	r3, r0, #4
 8010286:	e7f1      	b.n	801026c <__exponent+0x60>

08010288 <_printf_float>:
 8010288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801028c:	ed2d 8b02 	vpush	{d8}
 8010290:	b08d      	sub	sp, #52	; 0x34
 8010292:	460c      	mov	r4, r1
 8010294:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8010298:	4616      	mov	r6, r2
 801029a:	461f      	mov	r7, r3
 801029c:	4605      	mov	r5, r0
 801029e:	f002 ffb3 	bl	8013208 <_localeconv_r>
 80102a2:	f8d0 a000 	ldr.w	sl, [r0]
 80102a6:	4650      	mov	r0, sl
 80102a8:	f7ef ffbc 	bl	8000224 <strlen>
 80102ac:	2300      	movs	r3, #0
 80102ae:	930a      	str	r3, [sp, #40]	; 0x28
 80102b0:	6823      	ldr	r3, [r4, #0]
 80102b2:	9305      	str	r3, [sp, #20]
 80102b4:	f8d8 3000 	ldr.w	r3, [r8]
 80102b8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80102bc:	3307      	adds	r3, #7
 80102be:	f023 0307 	bic.w	r3, r3, #7
 80102c2:	f103 0208 	add.w	r2, r3, #8
 80102c6:	f8c8 2000 	str.w	r2, [r8]
 80102ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102ce:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80102d2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80102d6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80102da:	9307      	str	r3, [sp, #28]
 80102dc:	f8cd 8018 	str.w	r8, [sp, #24]
 80102e0:	ee08 0a10 	vmov	s16, r0
 80102e4:	4b9f      	ldr	r3, [pc, #636]	; (8010564 <_printf_float+0x2dc>)
 80102e6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80102ea:	f04f 32ff 	mov.w	r2, #4294967295
 80102ee:	f7f0 fc4d 	bl	8000b8c <__aeabi_dcmpun>
 80102f2:	bb88      	cbnz	r0, 8010358 <_printf_float+0xd0>
 80102f4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80102f8:	4b9a      	ldr	r3, [pc, #616]	; (8010564 <_printf_float+0x2dc>)
 80102fa:	f04f 32ff 	mov.w	r2, #4294967295
 80102fe:	f7f0 fc27 	bl	8000b50 <__aeabi_dcmple>
 8010302:	bb48      	cbnz	r0, 8010358 <_printf_float+0xd0>
 8010304:	2200      	movs	r2, #0
 8010306:	2300      	movs	r3, #0
 8010308:	4640      	mov	r0, r8
 801030a:	4649      	mov	r1, r9
 801030c:	f7f0 fc16 	bl	8000b3c <__aeabi_dcmplt>
 8010310:	b110      	cbz	r0, 8010318 <_printf_float+0x90>
 8010312:	232d      	movs	r3, #45	; 0x2d
 8010314:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010318:	4b93      	ldr	r3, [pc, #588]	; (8010568 <_printf_float+0x2e0>)
 801031a:	4894      	ldr	r0, [pc, #592]	; (801056c <_printf_float+0x2e4>)
 801031c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8010320:	bf94      	ite	ls
 8010322:	4698      	movls	r8, r3
 8010324:	4680      	movhi	r8, r0
 8010326:	2303      	movs	r3, #3
 8010328:	6123      	str	r3, [r4, #16]
 801032a:	9b05      	ldr	r3, [sp, #20]
 801032c:	f023 0204 	bic.w	r2, r3, #4
 8010330:	6022      	str	r2, [r4, #0]
 8010332:	f04f 0900 	mov.w	r9, #0
 8010336:	9700      	str	r7, [sp, #0]
 8010338:	4633      	mov	r3, r6
 801033a:	aa0b      	add	r2, sp, #44	; 0x2c
 801033c:	4621      	mov	r1, r4
 801033e:	4628      	mov	r0, r5
 8010340:	f000 f9d8 	bl	80106f4 <_printf_common>
 8010344:	3001      	adds	r0, #1
 8010346:	f040 8090 	bne.w	801046a <_printf_float+0x1e2>
 801034a:	f04f 30ff 	mov.w	r0, #4294967295
 801034e:	b00d      	add	sp, #52	; 0x34
 8010350:	ecbd 8b02 	vpop	{d8}
 8010354:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010358:	4642      	mov	r2, r8
 801035a:	464b      	mov	r3, r9
 801035c:	4640      	mov	r0, r8
 801035e:	4649      	mov	r1, r9
 8010360:	f7f0 fc14 	bl	8000b8c <__aeabi_dcmpun>
 8010364:	b140      	cbz	r0, 8010378 <_printf_float+0xf0>
 8010366:	464b      	mov	r3, r9
 8010368:	2b00      	cmp	r3, #0
 801036a:	bfbc      	itt	lt
 801036c:	232d      	movlt	r3, #45	; 0x2d
 801036e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8010372:	487f      	ldr	r0, [pc, #508]	; (8010570 <_printf_float+0x2e8>)
 8010374:	4b7f      	ldr	r3, [pc, #508]	; (8010574 <_printf_float+0x2ec>)
 8010376:	e7d1      	b.n	801031c <_printf_float+0x94>
 8010378:	6863      	ldr	r3, [r4, #4]
 801037a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801037e:	9206      	str	r2, [sp, #24]
 8010380:	1c5a      	adds	r2, r3, #1
 8010382:	d13f      	bne.n	8010404 <_printf_float+0x17c>
 8010384:	2306      	movs	r3, #6
 8010386:	6063      	str	r3, [r4, #4]
 8010388:	9b05      	ldr	r3, [sp, #20]
 801038a:	6861      	ldr	r1, [r4, #4]
 801038c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8010390:	2300      	movs	r3, #0
 8010392:	9303      	str	r3, [sp, #12]
 8010394:	ab0a      	add	r3, sp, #40	; 0x28
 8010396:	e9cd b301 	strd	fp, r3, [sp, #4]
 801039a:	ab09      	add	r3, sp, #36	; 0x24
 801039c:	ec49 8b10 	vmov	d0, r8, r9
 80103a0:	9300      	str	r3, [sp, #0]
 80103a2:	6022      	str	r2, [r4, #0]
 80103a4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80103a8:	4628      	mov	r0, r5
 80103aa:	f7ff fecd 	bl	8010148 <__cvt>
 80103ae:	9b06      	ldr	r3, [sp, #24]
 80103b0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80103b2:	2b47      	cmp	r3, #71	; 0x47
 80103b4:	4680      	mov	r8, r0
 80103b6:	d108      	bne.n	80103ca <_printf_float+0x142>
 80103b8:	1cc8      	adds	r0, r1, #3
 80103ba:	db02      	blt.n	80103c2 <_printf_float+0x13a>
 80103bc:	6863      	ldr	r3, [r4, #4]
 80103be:	4299      	cmp	r1, r3
 80103c0:	dd41      	ble.n	8010446 <_printf_float+0x1be>
 80103c2:	f1ab 0b02 	sub.w	fp, fp, #2
 80103c6:	fa5f fb8b 	uxtb.w	fp, fp
 80103ca:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80103ce:	d820      	bhi.n	8010412 <_printf_float+0x18a>
 80103d0:	3901      	subs	r1, #1
 80103d2:	465a      	mov	r2, fp
 80103d4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80103d8:	9109      	str	r1, [sp, #36]	; 0x24
 80103da:	f7ff ff17 	bl	801020c <__exponent>
 80103de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80103e0:	1813      	adds	r3, r2, r0
 80103e2:	2a01      	cmp	r2, #1
 80103e4:	4681      	mov	r9, r0
 80103e6:	6123      	str	r3, [r4, #16]
 80103e8:	dc02      	bgt.n	80103f0 <_printf_float+0x168>
 80103ea:	6822      	ldr	r2, [r4, #0]
 80103ec:	07d2      	lsls	r2, r2, #31
 80103ee:	d501      	bpl.n	80103f4 <_printf_float+0x16c>
 80103f0:	3301      	adds	r3, #1
 80103f2:	6123      	str	r3, [r4, #16]
 80103f4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80103f8:	2b00      	cmp	r3, #0
 80103fa:	d09c      	beq.n	8010336 <_printf_float+0xae>
 80103fc:	232d      	movs	r3, #45	; 0x2d
 80103fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010402:	e798      	b.n	8010336 <_printf_float+0xae>
 8010404:	9a06      	ldr	r2, [sp, #24]
 8010406:	2a47      	cmp	r2, #71	; 0x47
 8010408:	d1be      	bne.n	8010388 <_printf_float+0x100>
 801040a:	2b00      	cmp	r3, #0
 801040c:	d1bc      	bne.n	8010388 <_printf_float+0x100>
 801040e:	2301      	movs	r3, #1
 8010410:	e7b9      	b.n	8010386 <_printf_float+0xfe>
 8010412:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8010416:	d118      	bne.n	801044a <_printf_float+0x1c2>
 8010418:	2900      	cmp	r1, #0
 801041a:	6863      	ldr	r3, [r4, #4]
 801041c:	dd0b      	ble.n	8010436 <_printf_float+0x1ae>
 801041e:	6121      	str	r1, [r4, #16]
 8010420:	b913      	cbnz	r3, 8010428 <_printf_float+0x1a0>
 8010422:	6822      	ldr	r2, [r4, #0]
 8010424:	07d0      	lsls	r0, r2, #31
 8010426:	d502      	bpl.n	801042e <_printf_float+0x1a6>
 8010428:	3301      	adds	r3, #1
 801042a:	440b      	add	r3, r1
 801042c:	6123      	str	r3, [r4, #16]
 801042e:	65a1      	str	r1, [r4, #88]	; 0x58
 8010430:	f04f 0900 	mov.w	r9, #0
 8010434:	e7de      	b.n	80103f4 <_printf_float+0x16c>
 8010436:	b913      	cbnz	r3, 801043e <_printf_float+0x1b6>
 8010438:	6822      	ldr	r2, [r4, #0]
 801043a:	07d2      	lsls	r2, r2, #31
 801043c:	d501      	bpl.n	8010442 <_printf_float+0x1ba>
 801043e:	3302      	adds	r3, #2
 8010440:	e7f4      	b.n	801042c <_printf_float+0x1a4>
 8010442:	2301      	movs	r3, #1
 8010444:	e7f2      	b.n	801042c <_printf_float+0x1a4>
 8010446:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801044a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801044c:	4299      	cmp	r1, r3
 801044e:	db05      	blt.n	801045c <_printf_float+0x1d4>
 8010450:	6823      	ldr	r3, [r4, #0]
 8010452:	6121      	str	r1, [r4, #16]
 8010454:	07d8      	lsls	r0, r3, #31
 8010456:	d5ea      	bpl.n	801042e <_printf_float+0x1a6>
 8010458:	1c4b      	adds	r3, r1, #1
 801045a:	e7e7      	b.n	801042c <_printf_float+0x1a4>
 801045c:	2900      	cmp	r1, #0
 801045e:	bfd4      	ite	le
 8010460:	f1c1 0202 	rsble	r2, r1, #2
 8010464:	2201      	movgt	r2, #1
 8010466:	4413      	add	r3, r2
 8010468:	e7e0      	b.n	801042c <_printf_float+0x1a4>
 801046a:	6823      	ldr	r3, [r4, #0]
 801046c:	055a      	lsls	r2, r3, #21
 801046e:	d407      	bmi.n	8010480 <_printf_float+0x1f8>
 8010470:	6923      	ldr	r3, [r4, #16]
 8010472:	4642      	mov	r2, r8
 8010474:	4631      	mov	r1, r6
 8010476:	4628      	mov	r0, r5
 8010478:	47b8      	blx	r7
 801047a:	3001      	adds	r0, #1
 801047c:	d12c      	bne.n	80104d8 <_printf_float+0x250>
 801047e:	e764      	b.n	801034a <_printf_float+0xc2>
 8010480:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8010484:	f240 80e0 	bls.w	8010648 <_printf_float+0x3c0>
 8010488:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801048c:	2200      	movs	r2, #0
 801048e:	2300      	movs	r3, #0
 8010490:	f7f0 fb4a 	bl	8000b28 <__aeabi_dcmpeq>
 8010494:	2800      	cmp	r0, #0
 8010496:	d034      	beq.n	8010502 <_printf_float+0x27a>
 8010498:	4a37      	ldr	r2, [pc, #220]	; (8010578 <_printf_float+0x2f0>)
 801049a:	2301      	movs	r3, #1
 801049c:	4631      	mov	r1, r6
 801049e:	4628      	mov	r0, r5
 80104a0:	47b8      	blx	r7
 80104a2:	3001      	adds	r0, #1
 80104a4:	f43f af51 	beq.w	801034a <_printf_float+0xc2>
 80104a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80104ac:	429a      	cmp	r2, r3
 80104ae:	db02      	blt.n	80104b6 <_printf_float+0x22e>
 80104b0:	6823      	ldr	r3, [r4, #0]
 80104b2:	07d8      	lsls	r0, r3, #31
 80104b4:	d510      	bpl.n	80104d8 <_printf_float+0x250>
 80104b6:	ee18 3a10 	vmov	r3, s16
 80104ba:	4652      	mov	r2, sl
 80104bc:	4631      	mov	r1, r6
 80104be:	4628      	mov	r0, r5
 80104c0:	47b8      	blx	r7
 80104c2:	3001      	adds	r0, #1
 80104c4:	f43f af41 	beq.w	801034a <_printf_float+0xc2>
 80104c8:	f04f 0800 	mov.w	r8, #0
 80104cc:	f104 091a 	add.w	r9, r4, #26
 80104d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80104d2:	3b01      	subs	r3, #1
 80104d4:	4543      	cmp	r3, r8
 80104d6:	dc09      	bgt.n	80104ec <_printf_float+0x264>
 80104d8:	6823      	ldr	r3, [r4, #0]
 80104da:	079b      	lsls	r3, r3, #30
 80104dc:	f100 8105 	bmi.w	80106ea <_printf_float+0x462>
 80104e0:	68e0      	ldr	r0, [r4, #12]
 80104e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80104e4:	4298      	cmp	r0, r3
 80104e6:	bfb8      	it	lt
 80104e8:	4618      	movlt	r0, r3
 80104ea:	e730      	b.n	801034e <_printf_float+0xc6>
 80104ec:	2301      	movs	r3, #1
 80104ee:	464a      	mov	r2, r9
 80104f0:	4631      	mov	r1, r6
 80104f2:	4628      	mov	r0, r5
 80104f4:	47b8      	blx	r7
 80104f6:	3001      	adds	r0, #1
 80104f8:	f43f af27 	beq.w	801034a <_printf_float+0xc2>
 80104fc:	f108 0801 	add.w	r8, r8, #1
 8010500:	e7e6      	b.n	80104d0 <_printf_float+0x248>
 8010502:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010504:	2b00      	cmp	r3, #0
 8010506:	dc39      	bgt.n	801057c <_printf_float+0x2f4>
 8010508:	4a1b      	ldr	r2, [pc, #108]	; (8010578 <_printf_float+0x2f0>)
 801050a:	2301      	movs	r3, #1
 801050c:	4631      	mov	r1, r6
 801050e:	4628      	mov	r0, r5
 8010510:	47b8      	blx	r7
 8010512:	3001      	adds	r0, #1
 8010514:	f43f af19 	beq.w	801034a <_printf_float+0xc2>
 8010518:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801051c:	4313      	orrs	r3, r2
 801051e:	d102      	bne.n	8010526 <_printf_float+0x29e>
 8010520:	6823      	ldr	r3, [r4, #0]
 8010522:	07d9      	lsls	r1, r3, #31
 8010524:	d5d8      	bpl.n	80104d8 <_printf_float+0x250>
 8010526:	ee18 3a10 	vmov	r3, s16
 801052a:	4652      	mov	r2, sl
 801052c:	4631      	mov	r1, r6
 801052e:	4628      	mov	r0, r5
 8010530:	47b8      	blx	r7
 8010532:	3001      	adds	r0, #1
 8010534:	f43f af09 	beq.w	801034a <_printf_float+0xc2>
 8010538:	f04f 0900 	mov.w	r9, #0
 801053c:	f104 0a1a 	add.w	sl, r4, #26
 8010540:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010542:	425b      	negs	r3, r3
 8010544:	454b      	cmp	r3, r9
 8010546:	dc01      	bgt.n	801054c <_printf_float+0x2c4>
 8010548:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801054a:	e792      	b.n	8010472 <_printf_float+0x1ea>
 801054c:	2301      	movs	r3, #1
 801054e:	4652      	mov	r2, sl
 8010550:	4631      	mov	r1, r6
 8010552:	4628      	mov	r0, r5
 8010554:	47b8      	blx	r7
 8010556:	3001      	adds	r0, #1
 8010558:	f43f aef7 	beq.w	801034a <_printf_float+0xc2>
 801055c:	f109 0901 	add.w	r9, r9, #1
 8010560:	e7ee      	b.n	8010540 <_printf_float+0x2b8>
 8010562:	bf00      	nop
 8010564:	7fefffff 	.word	0x7fefffff
 8010568:	080168bc 	.word	0x080168bc
 801056c:	080168c0 	.word	0x080168c0
 8010570:	080168c8 	.word	0x080168c8
 8010574:	080168c4 	.word	0x080168c4
 8010578:	08016d59 	.word	0x08016d59
 801057c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801057e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010580:	429a      	cmp	r2, r3
 8010582:	bfa8      	it	ge
 8010584:	461a      	movge	r2, r3
 8010586:	2a00      	cmp	r2, #0
 8010588:	4691      	mov	r9, r2
 801058a:	dc37      	bgt.n	80105fc <_printf_float+0x374>
 801058c:	f04f 0b00 	mov.w	fp, #0
 8010590:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010594:	f104 021a 	add.w	r2, r4, #26
 8010598:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801059a:	9305      	str	r3, [sp, #20]
 801059c:	eba3 0309 	sub.w	r3, r3, r9
 80105a0:	455b      	cmp	r3, fp
 80105a2:	dc33      	bgt.n	801060c <_printf_float+0x384>
 80105a4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80105a8:	429a      	cmp	r2, r3
 80105aa:	db3b      	blt.n	8010624 <_printf_float+0x39c>
 80105ac:	6823      	ldr	r3, [r4, #0]
 80105ae:	07da      	lsls	r2, r3, #31
 80105b0:	d438      	bmi.n	8010624 <_printf_float+0x39c>
 80105b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80105b4:	9a05      	ldr	r2, [sp, #20]
 80105b6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80105b8:	1a9a      	subs	r2, r3, r2
 80105ba:	eba3 0901 	sub.w	r9, r3, r1
 80105be:	4591      	cmp	r9, r2
 80105c0:	bfa8      	it	ge
 80105c2:	4691      	movge	r9, r2
 80105c4:	f1b9 0f00 	cmp.w	r9, #0
 80105c8:	dc35      	bgt.n	8010636 <_printf_float+0x3ae>
 80105ca:	f04f 0800 	mov.w	r8, #0
 80105ce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80105d2:	f104 0a1a 	add.w	sl, r4, #26
 80105d6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80105da:	1a9b      	subs	r3, r3, r2
 80105dc:	eba3 0309 	sub.w	r3, r3, r9
 80105e0:	4543      	cmp	r3, r8
 80105e2:	f77f af79 	ble.w	80104d8 <_printf_float+0x250>
 80105e6:	2301      	movs	r3, #1
 80105e8:	4652      	mov	r2, sl
 80105ea:	4631      	mov	r1, r6
 80105ec:	4628      	mov	r0, r5
 80105ee:	47b8      	blx	r7
 80105f0:	3001      	adds	r0, #1
 80105f2:	f43f aeaa 	beq.w	801034a <_printf_float+0xc2>
 80105f6:	f108 0801 	add.w	r8, r8, #1
 80105fa:	e7ec      	b.n	80105d6 <_printf_float+0x34e>
 80105fc:	4613      	mov	r3, r2
 80105fe:	4631      	mov	r1, r6
 8010600:	4642      	mov	r2, r8
 8010602:	4628      	mov	r0, r5
 8010604:	47b8      	blx	r7
 8010606:	3001      	adds	r0, #1
 8010608:	d1c0      	bne.n	801058c <_printf_float+0x304>
 801060a:	e69e      	b.n	801034a <_printf_float+0xc2>
 801060c:	2301      	movs	r3, #1
 801060e:	4631      	mov	r1, r6
 8010610:	4628      	mov	r0, r5
 8010612:	9205      	str	r2, [sp, #20]
 8010614:	47b8      	blx	r7
 8010616:	3001      	adds	r0, #1
 8010618:	f43f ae97 	beq.w	801034a <_printf_float+0xc2>
 801061c:	9a05      	ldr	r2, [sp, #20]
 801061e:	f10b 0b01 	add.w	fp, fp, #1
 8010622:	e7b9      	b.n	8010598 <_printf_float+0x310>
 8010624:	ee18 3a10 	vmov	r3, s16
 8010628:	4652      	mov	r2, sl
 801062a:	4631      	mov	r1, r6
 801062c:	4628      	mov	r0, r5
 801062e:	47b8      	blx	r7
 8010630:	3001      	adds	r0, #1
 8010632:	d1be      	bne.n	80105b2 <_printf_float+0x32a>
 8010634:	e689      	b.n	801034a <_printf_float+0xc2>
 8010636:	9a05      	ldr	r2, [sp, #20]
 8010638:	464b      	mov	r3, r9
 801063a:	4442      	add	r2, r8
 801063c:	4631      	mov	r1, r6
 801063e:	4628      	mov	r0, r5
 8010640:	47b8      	blx	r7
 8010642:	3001      	adds	r0, #1
 8010644:	d1c1      	bne.n	80105ca <_printf_float+0x342>
 8010646:	e680      	b.n	801034a <_printf_float+0xc2>
 8010648:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801064a:	2a01      	cmp	r2, #1
 801064c:	dc01      	bgt.n	8010652 <_printf_float+0x3ca>
 801064e:	07db      	lsls	r3, r3, #31
 8010650:	d538      	bpl.n	80106c4 <_printf_float+0x43c>
 8010652:	2301      	movs	r3, #1
 8010654:	4642      	mov	r2, r8
 8010656:	4631      	mov	r1, r6
 8010658:	4628      	mov	r0, r5
 801065a:	47b8      	blx	r7
 801065c:	3001      	adds	r0, #1
 801065e:	f43f ae74 	beq.w	801034a <_printf_float+0xc2>
 8010662:	ee18 3a10 	vmov	r3, s16
 8010666:	4652      	mov	r2, sl
 8010668:	4631      	mov	r1, r6
 801066a:	4628      	mov	r0, r5
 801066c:	47b8      	blx	r7
 801066e:	3001      	adds	r0, #1
 8010670:	f43f ae6b 	beq.w	801034a <_printf_float+0xc2>
 8010674:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010678:	2200      	movs	r2, #0
 801067a:	2300      	movs	r3, #0
 801067c:	f7f0 fa54 	bl	8000b28 <__aeabi_dcmpeq>
 8010680:	b9d8      	cbnz	r0, 80106ba <_printf_float+0x432>
 8010682:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010684:	f108 0201 	add.w	r2, r8, #1
 8010688:	3b01      	subs	r3, #1
 801068a:	4631      	mov	r1, r6
 801068c:	4628      	mov	r0, r5
 801068e:	47b8      	blx	r7
 8010690:	3001      	adds	r0, #1
 8010692:	d10e      	bne.n	80106b2 <_printf_float+0x42a>
 8010694:	e659      	b.n	801034a <_printf_float+0xc2>
 8010696:	2301      	movs	r3, #1
 8010698:	4652      	mov	r2, sl
 801069a:	4631      	mov	r1, r6
 801069c:	4628      	mov	r0, r5
 801069e:	47b8      	blx	r7
 80106a0:	3001      	adds	r0, #1
 80106a2:	f43f ae52 	beq.w	801034a <_printf_float+0xc2>
 80106a6:	f108 0801 	add.w	r8, r8, #1
 80106aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80106ac:	3b01      	subs	r3, #1
 80106ae:	4543      	cmp	r3, r8
 80106b0:	dcf1      	bgt.n	8010696 <_printf_float+0x40e>
 80106b2:	464b      	mov	r3, r9
 80106b4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80106b8:	e6dc      	b.n	8010474 <_printf_float+0x1ec>
 80106ba:	f04f 0800 	mov.w	r8, #0
 80106be:	f104 0a1a 	add.w	sl, r4, #26
 80106c2:	e7f2      	b.n	80106aa <_printf_float+0x422>
 80106c4:	2301      	movs	r3, #1
 80106c6:	4642      	mov	r2, r8
 80106c8:	e7df      	b.n	801068a <_printf_float+0x402>
 80106ca:	2301      	movs	r3, #1
 80106cc:	464a      	mov	r2, r9
 80106ce:	4631      	mov	r1, r6
 80106d0:	4628      	mov	r0, r5
 80106d2:	47b8      	blx	r7
 80106d4:	3001      	adds	r0, #1
 80106d6:	f43f ae38 	beq.w	801034a <_printf_float+0xc2>
 80106da:	f108 0801 	add.w	r8, r8, #1
 80106de:	68e3      	ldr	r3, [r4, #12]
 80106e0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80106e2:	1a5b      	subs	r3, r3, r1
 80106e4:	4543      	cmp	r3, r8
 80106e6:	dcf0      	bgt.n	80106ca <_printf_float+0x442>
 80106e8:	e6fa      	b.n	80104e0 <_printf_float+0x258>
 80106ea:	f04f 0800 	mov.w	r8, #0
 80106ee:	f104 0919 	add.w	r9, r4, #25
 80106f2:	e7f4      	b.n	80106de <_printf_float+0x456>

080106f4 <_printf_common>:
 80106f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80106f8:	4616      	mov	r6, r2
 80106fa:	4699      	mov	r9, r3
 80106fc:	688a      	ldr	r2, [r1, #8]
 80106fe:	690b      	ldr	r3, [r1, #16]
 8010700:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010704:	4293      	cmp	r3, r2
 8010706:	bfb8      	it	lt
 8010708:	4613      	movlt	r3, r2
 801070a:	6033      	str	r3, [r6, #0]
 801070c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010710:	4607      	mov	r7, r0
 8010712:	460c      	mov	r4, r1
 8010714:	b10a      	cbz	r2, 801071a <_printf_common+0x26>
 8010716:	3301      	adds	r3, #1
 8010718:	6033      	str	r3, [r6, #0]
 801071a:	6823      	ldr	r3, [r4, #0]
 801071c:	0699      	lsls	r1, r3, #26
 801071e:	bf42      	ittt	mi
 8010720:	6833      	ldrmi	r3, [r6, #0]
 8010722:	3302      	addmi	r3, #2
 8010724:	6033      	strmi	r3, [r6, #0]
 8010726:	6825      	ldr	r5, [r4, #0]
 8010728:	f015 0506 	ands.w	r5, r5, #6
 801072c:	d106      	bne.n	801073c <_printf_common+0x48>
 801072e:	f104 0a19 	add.w	sl, r4, #25
 8010732:	68e3      	ldr	r3, [r4, #12]
 8010734:	6832      	ldr	r2, [r6, #0]
 8010736:	1a9b      	subs	r3, r3, r2
 8010738:	42ab      	cmp	r3, r5
 801073a:	dc26      	bgt.n	801078a <_printf_common+0x96>
 801073c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010740:	1e13      	subs	r3, r2, #0
 8010742:	6822      	ldr	r2, [r4, #0]
 8010744:	bf18      	it	ne
 8010746:	2301      	movne	r3, #1
 8010748:	0692      	lsls	r2, r2, #26
 801074a:	d42b      	bmi.n	80107a4 <_printf_common+0xb0>
 801074c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010750:	4649      	mov	r1, r9
 8010752:	4638      	mov	r0, r7
 8010754:	47c0      	blx	r8
 8010756:	3001      	adds	r0, #1
 8010758:	d01e      	beq.n	8010798 <_printf_common+0xa4>
 801075a:	6823      	ldr	r3, [r4, #0]
 801075c:	68e5      	ldr	r5, [r4, #12]
 801075e:	6832      	ldr	r2, [r6, #0]
 8010760:	f003 0306 	and.w	r3, r3, #6
 8010764:	2b04      	cmp	r3, #4
 8010766:	bf08      	it	eq
 8010768:	1aad      	subeq	r5, r5, r2
 801076a:	68a3      	ldr	r3, [r4, #8]
 801076c:	6922      	ldr	r2, [r4, #16]
 801076e:	bf0c      	ite	eq
 8010770:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010774:	2500      	movne	r5, #0
 8010776:	4293      	cmp	r3, r2
 8010778:	bfc4      	itt	gt
 801077a:	1a9b      	subgt	r3, r3, r2
 801077c:	18ed      	addgt	r5, r5, r3
 801077e:	2600      	movs	r6, #0
 8010780:	341a      	adds	r4, #26
 8010782:	42b5      	cmp	r5, r6
 8010784:	d11a      	bne.n	80107bc <_printf_common+0xc8>
 8010786:	2000      	movs	r0, #0
 8010788:	e008      	b.n	801079c <_printf_common+0xa8>
 801078a:	2301      	movs	r3, #1
 801078c:	4652      	mov	r2, sl
 801078e:	4649      	mov	r1, r9
 8010790:	4638      	mov	r0, r7
 8010792:	47c0      	blx	r8
 8010794:	3001      	adds	r0, #1
 8010796:	d103      	bne.n	80107a0 <_printf_common+0xac>
 8010798:	f04f 30ff 	mov.w	r0, #4294967295
 801079c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80107a0:	3501      	adds	r5, #1
 80107a2:	e7c6      	b.n	8010732 <_printf_common+0x3e>
 80107a4:	18e1      	adds	r1, r4, r3
 80107a6:	1c5a      	adds	r2, r3, #1
 80107a8:	2030      	movs	r0, #48	; 0x30
 80107aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80107ae:	4422      	add	r2, r4
 80107b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80107b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80107b8:	3302      	adds	r3, #2
 80107ba:	e7c7      	b.n	801074c <_printf_common+0x58>
 80107bc:	2301      	movs	r3, #1
 80107be:	4622      	mov	r2, r4
 80107c0:	4649      	mov	r1, r9
 80107c2:	4638      	mov	r0, r7
 80107c4:	47c0      	blx	r8
 80107c6:	3001      	adds	r0, #1
 80107c8:	d0e6      	beq.n	8010798 <_printf_common+0xa4>
 80107ca:	3601      	adds	r6, #1
 80107cc:	e7d9      	b.n	8010782 <_printf_common+0x8e>
	...

080107d0 <_printf_i>:
 80107d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80107d4:	7e0f      	ldrb	r7, [r1, #24]
 80107d6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80107d8:	2f78      	cmp	r7, #120	; 0x78
 80107da:	4691      	mov	r9, r2
 80107dc:	4680      	mov	r8, r0
 80107de:	460c      	mov	r4, r1
 80107e0:	469a      	mov	sl, r3
 80107e2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80107e6:	d807      	bhi.n	80107f8 <_printf_i+0x28>
 80107e8:	2f62      	cmp	r7, #98	; 0x62
 80107ea:	d80a      	bhi.n	8010802 <_printf_i+0x32>
 80107ec:	2f00      	cmp	r7, #0
 80107ee:	f000 80d8 	beq.w	80109a2 <_printf_i+0x1d2>
 80107f2:	2f58      	cmp	r7, #88	; 0x58
 80107f4:	f000 80a3 	beq.w	801093e <_printf_i+0x16e>
 80107f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80107fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010800:	e03a      	b.n	8010878 <_printf_i+0xa8>
 8010802:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8010806:	2b15      	cmp	r3, #21
 8010808:	d8f6      	bhi.n	80107f8 <_printf_i+0x28>
 801080a:	a101      	add	r1, pc, #4	; (adr r1, 8010810 <_printf_i+0x40>)
 801080c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010810:	08010869 	.word	0x08010869
 8010814:	0801087d 	.word	0x0801087d
 8010818:	080107f9 	.word	0x080107f9
 801081c:	080107f9 	.word	0x080107f9
 8010820:	080107f9 	.word	0x080107f9
 8010824:	080107f9 	.word	0x080107f9
 8010828:	0801087d 	.word	0x0801087d
 801082c:	080107f9 	.word	0x080107f9
 8010830:	080107f9 	.word	0x080107f9
 8010834:	080107f9 	.word	0x080107f9
 8010838:	080107f9 	.word	0x080107f9
 801083c:	08010989 	.word	0x08010989
 8010840:	080108ad 	.word	0x080108ad
 8010844:	0801096b 	.word	0x0801096b
 8010848:	080107f9 	.word	0x080107f9
 801084c:	080107f9 	.word	0x080107f9
 8010850:	080109ab 	.word	0x080109ab
 8010854:	080107f9 	.word	0x080107f9
 8010858:	080108ad 	.word	0x080108ad
 801085c:	080107f9 	.word	0x080107f9
 8010860:	080107f9 	.word	0x080107f9
 8010864:	08010973 	.word	0x08010973
 8010868:	682b      	ldr	r3, [r5, #0]
 801086a:	1d1a      	adds	r2, r3, #4
 801086c:	681b      	ldr	r3, [r3, #0]
 801086e:	602a      	str	r2, [r5, #0]
 8010870:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010874:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010878:	2301      	movs	r3, #1
 801087a:	e0a3      	b.n	80109c4 <_printf_i+0x1f4>
 801087c:	6820      	ldr	r0, [r4, #0]
 801087e:	6829      	ldr	r1, [r5, #0]
 8010880:	0606      	lsls	r6, r0, #24
 8010882:	f101 0304 	add.w	r3, r1, #4
 8010886:	d50a      	bpl.n	801089e <_printf_i+0xce>
 8010888:	680e      	ldr	r6, [r1, #0]
 801088a:	602b      	str	r3, [r5, #0]
 801088c:	2e00      	cmp	r6, #0
 801088e:	da03      	bge.n	8010898 <_printf_i+0xc8>
 8010890:	232d      	movs	r3, #45	; 0x2d
 8010892:	4276      	negs	r6, r6
 8010894:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010898:	485e      	ldr	r0, [pc, #376]	; (8010a14 <_printf_i+0x244>)
 801089a:	230a      	movs	r3, #10
 801089c:	e019      	b.n	80108d2 <_printf_i+0x102>
 801089e:	680e      	ldr	r6, [r1, #0]
 80108a0:	602b      	str	r3, [r5, #0]
 80108a2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80108a6:	bf18      	it	ne
 80108a8:	b236      	sxthne	r6, r6
 80108aa:	e7ef      	b.n	801088c <_printf_i+0xbc>
 80108ac:	682b      	ldr	r3, [r5, #0]
 80108ae:	6820      	ldr	r0, [r4, #0]
 80108b0:	1d19      	adds	r1, r3, #4
 80108b2:	6029      	str	r1, [r5, #0]
 80108b4:	0601      	lsls	r1, r0, #24
 80108b6:	d501      	bpl.n	80108bc <_printf_i+0xec>
 80108b8:	681e      	ldr	r6, [r3, #0]
 80108ba:	e002      	b.n	80108c2 <_printf_i+0xf2>
 80108bc:	0646      	lsls	r6, r0, #25
 80108be:	d5fb      	bpl.n	80108b8 <_printf_i+0xe8>
 80108c0:	881e      	ldrh	r6, [r3, #0]
 80108c2:	4854      	ldr	r0, [pc, #336]	; (8010a14 <_printf_i+0x244>)
 80108c4:	2f6f      	cmp	r7, #111	; 0x6f
 80108c6:	bf0c      	ite	eq
 80108c8:	2308      	moveq	r3, #8
 80108ca:	230a      	movne	r3, #10
 80108cc:	2100      	movs	r1, #0
 80108ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80108d2:	6865      	ldr	r5, [r4, #4]
 80108d4:	60a5      	str	r5, [r4, #8]
 80108d6:	2d00      	cmp	r5, #0
 80108d8:	bfa2      	ittt	ge
 80108da:	6821      	ldrge	r1, [r4, #0]
 80108dc:	f021 0104 	bicge.w	r1, r1, #4
 80108e0:	6021      	strge	r1, [r4, #0]
 80108e2:	b90e      	cbnz	r6, 80108e8 <_printf_i+0x118>
 80108e4:	2d00      	cmp	r5, #0
 80108e6:	d04d      	beq.n	8010984 <_printf_i+0x1b4>
 80108e8:	4615      	mov	r5, r2
 80108ea:	fbb6 f1f3 	udiv	r1, r6, r3
 80108ee:	fb03 6711 	mls	r7, r3, r1, r6
 80108f2:	5dc7      	ldrb	r7, [r0, r7]
 80108f4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80108f8:	4637      	mov	r7, r6
 80108fa:	42bb      	cmp	r3, r7
 80108fc:	460e      	mov	r6, r1
 80108fe:	d9f4      	bls.n	80108ea <_printf_i+0x11a>
 8010900:	2b08      	cmp	r3, #8
 8010902:	d10b      	bne.n	801091c <_printf_i+0x14c>
 8010904:	6823      	ldr	r3, [r4, #0]
 8010906:	07de      	lsls	r6, r3, #31
 8010908:	d508      	bpl.n	801091c <_printf_i+0x14c>
 801090a:	6923      	ldr	r3, [r4, #16]
 801090c:	6861      	ldr	r1, [r4, #4]
 801090e:	4299      	cmp	r1, r3
 8010910:	bfde      	ittt	le
 8010912:	2330      	movle	r3, #48	; 0x30
 8010914:	f805 3c01 	strble.w	r3, [r5, #-1]
 8010918:	f105 35ff 	addle.w	r5, r5, #4294967295
 801091c:	1b52      	subs	r2, r2, r5
 801091e:	6122      	str	r2, [r4, #16]
 8010920:	f8cd a000 	str.w	sl, [sp]
 8010924:	464b      	mov	r3, r9
 8010926:	aa03      	add	r2, sp, #12
 8010928:	4621      	mov	r1, r4
 801092a:	4640      	mov	r0, r8
 801092c:	f7ff fee2 	bl	80106f4 <_printf_common>
 8010930:	3001      	adds	r0, #1
 8010932:	d14c      	bne.n	80109ce <_printf_i+0x1fe>
 8010934:	f04f 30ff 	mov.w	r0, #4294967295
 8010938:	b004      	add	sp, #16
 801093a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801093e:	4835      	ldr	r0, [pc, #212]	; (8010a14 <_printf_i+0x244>)
 8010940:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8010944:	6829      	ldr	r1, [r5, #0]
 8010946:	6823      	ldr	r3, [r4, #0]
 8010948:	f851 6b04 	ldr.w	r6, [r1], #4
 801094c:	6029      	str	r1, [r5, #0]
 801094e:	061d      	lsls	r5, r3, #24
 8010950:	d514      	bpl.n	801097c <_printf_i+0x1ac>
 8010952:	07df      	lsls	r7, r3, #31
 8010954:	bf44      	itt	mi
 8010956:	f043 0320 	orrmi.w	r3, r3, #32
 801095a:	6023      	strmi	r3, [r4, #0]
 801095c:	b91e      	cbnz	r6, 8010966 <_printf_i+0x196>
 801095e:	6823      	ldr	r3, [r4, #0]
 8010960:	f023 0320 	bic.w	r3, r3, #32
 8010964:	6023      	str	r3, [r4, #0]
 8010966:	2310      	movs	r3, #16
 8010968:	e7b0      	b.n	80108cc <_printf_i+0xfc>
 801096a:	6823      	ldr	r3, [r4, #0]
 801096c:	f043 0320 	orr.w	r3, r3, #32
 8010970:	6023      	str	r3, [r4, #0]
 8010972:	2378      	movs	r3, #120	; 0x78
 8010974:	4828      	ldr	r0, [pc, #160]	; (8010a18 <_printf_i+0x248>)
 8010976:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801097a:	e7e3      	b.n	8010944 <_printf_i+0x174>
 801097c:	0659      	lsls	r1, r3, #25
 801097e:	bf48      	it	mi
 8010980:	b2b6      	uxthmi	r6, r6
 8010982:	e7e6      	b.n	8010952 <_printf_i+0x182>
 8010984:	4615      	mov	r5, r2
 8010986:	e7bb      	b.n	8010900 <_printf_i+0x130>
 8010988:	682b      	ldr	r3, [r5, #0]
 801098a:	6826      	ldr	r6, [r4, #0]
 801098c:	6961      	ldr	r1, [r4, #20]
 801098e:	1d18      	adds	r0, r3, #4
 8010990:	6028      	str	r0, [r5, #0]
 8010992:	0635      	lsls	r5, r6, #24
 8010994:	681b      	ldr	r3, [r3, #0]
 8010996:	d501      	bpl.n	801099c <_printf_i+0x1cc>
 8010998:	6019      	str	r1, [r3, #0]
 801099a:	e002      	b.n	80109a2 <_printf_i+0x1d2>
 801099c:	0670      	lsls	r0, r6, #25
 801099e:	d5fb      	bpl.n	8010998 <_printf_i+0x1c8>
 80109a0:	8019      	strh	r1, [r3, #0]
 80109a2:	2300      	movs	r3, #0
 80109a4:	6123      	str	r3, [r4, #16]
 80109a6:	4615      	mov	r5, r2
 80109a8:	e7ba      	b.n	8010920 <_printf_i+0x150>
 80109aa:	682b      	ldr	r3, [r5, #0]
 80109ac:	1d1a      	adds	r2, r3, #4
 80109ae:	602a      	str	r2, [r5, #0]
 80109b0:	681d      	ldr	r5, [r3, #0]
 80109b2:	6862      	ldr	r2, [r4, #4]
 80109b4:	2100      	movs	r1, #0
 80109b6:	4628      	mov	r0, r5
 80109b8:	f7ef fc42 	bl	8000240 <memchr>
 80109bc:	b108      	cbz	r0, 80109c2 <_printf_i+0x1f2>
 80109be:	1b40      	subs	r0, r0, r5
 80109c0:	6060      	str	r0, [r4, #4]
 80109c2:	6863      	ldr	r3, [r4, #4]
 80109c4:	6123      	str	r3, [r4, #16]
 80109c6:	2300      	movs	r3, #0
 80109c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80109cc:	e7a8      	b.n	8010920 <_printf_i+0x150>
 80109ce:	6923      	ldr	r3, [r4, #16]
 80109d0:	462a      	mov	r2, r5
 80109d2:	4649      	mov	r1, r9
 80109d4:	4640      	mov	r0, r8
 80109d6:	47d0      	blx	sl
 80109d8:	3001      	adds	r0, #1
 80109da:	d0ab      	beq.n	8010934 <_printf_i+0x164>
 80109dc:	6823      	ldr	r3, [r4, #0]
 80109de:	079b      	lsls	r3, r3, #30
 80109e0:	d413      	bmi.n	8010a0a <_printf_i+0x23a>
 80109e2:	68e0      	ldr	r0, [r4, #12]
 80109e4:	9b03      	ldr	r3, [sp, #12]
 80109e6:	4298      	cmp	r0, r3
 80109e8:	bfb8      	it	lt
 80109ea:	4618      	movlt	r0, r3
 80109ec:	e7a4      	b.n	8010938 <_printf_i+0x168>
 80109ee:	2301      	movs	r3, #1
 80109f0:	4632      	mov	r2, r6
 80109f2:	4649      	mov	r1, r9
 80109f4:	4640      	mov	r0, r8
 80109f6:	47d0      	blx	sl
 80109f8:	3001      	adds	r0, #1
 80109fa:	d09b      	beq.n	8010934 <_printf_i+0x164>
 80109fc:	3501      	adds	r5, #1
 80109fe:	68e3      	ldr	r3, [r4, #12]
 8010a00:	9903      	ldr	r1, [sp, #12]
 8010a02:	1a5b      	subs	r3, r3, r1
 8010a04:	42ab      	cmp	r3, r5
 8010a06:	dcf2      	bgt.n	80109ee <_printf_i+0x21e>
 8010a08:	e7eb      	b.n	80109e2 <_printf_i+0x212>
 8010a0a:	2500      	movs	r5, #0
 8010a0c:	f104 0619 	add.w	r6, r4, #25
 8010a10:	e7f5      	b.n	80109fe <_printf_i+0x22e>
 8010a12:	bf00      	nop
 8010a14:	080168cc 	.word	0x080168cc
 8010a18:	080168dd 	.word	0x080168dd

08010a1c <_scanf_float>:
 8010a1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a20:	b087      	sub	sp, #28
 8010a22:	4617      	mov	r7, r2
 8010a24:	9303      	str	r3, [sp, #12]
 8010a26:	688b      	ldr	r3, [r1, #8]
 8010a28:	1e5a      	subs	r2, r3, #1
 8010a2a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8010a2e:	bf83      	ittte	hi
 8010a30:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8010a34:	195b      	addhi	r3, r3, r5
 8010a36:	9302      	strhi	r3, [sp, #8]
 8010a38:	2300      	movls	r3, #0
 8010a3a:	bf86      	itte	hi
 8010a3c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8010a40:	608b      	strhi	r3, [r1, #8]
 8010a42:	9302      	strls	r3, [sp, #8]
 8010a44:	680b      	ldr	r3, [r1, #0]
 8010a46:	468b      	mov	fp, r1
 8010a48:	2500      	movs	r5, #0
 8010a4a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8010a4e:	f84b 3b1c 	str.w	r3, [fp], #28
 8010a52:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8010a56:	4680      	mov	r8, r0
 8010a58:	460c      	mov	r4, r1
 8010a5a:	465e      	mov	r6, fp
 8010a5c:	46aa      	mov	sl, r5
 8010a5e:	46a9      	mov	r9, r5
 8010a60:	9501      	str	r5, [sp, #4]
 8010a62:	68a2      	ldr	r2, [r4, #8]
 8010a64:	b152      	cbz	r2, 8010a7c <_scanf_float+0x60>
 8010a66:	683b      	ldr	r3, [r7, #0]
 8010a68:	781b      	ldrb	r3, [r3, #0]
 8010a6a:	2b4e      	cmp	r3, #78	; 0x4e
 8010a6c:	d864      	bhi.n	8010b38 <_scanf_float+0x11c>
 8010a6e:	2b40      	cmp	r3, #64	; 0x40
 8010a70:	d83c      	bhi.n	8010aec <_scanf_float+0xd0>
 8010a72:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8010a76:	b2c8      	uxtb	r0, r1
 8010a78:	280e      	cmp	r0, #14
 8010a7a:	d93a      	bls.n	8010af2 <_scanf_float+0xd6>
 8010a7c:	f1b9 0f00 	cmp.w	r9, #0
 8010a80:	d003      	beq.n	8010a8a <_scanf_float+0x6e>
 8010a82:	6823      	ldr	r3, [r4, #0]
 8010a84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010a88:	6023      	str	r3, [r4, #0]
 8010a8a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010a8e:	f1ba 0f01 	cmp.w	sl, #1
 8010a92:	f200 8113 	bhi.w	8010cbc <_scanf_float+0x2a0>
 8010a96:	455e      	cmp	r6, fp
 8010a98:	f200 8105 	bhi.w	8010ca6 <_scanf_float+0x28a>
 8010a9c:	2501      	movs	r5, #1
 8010a9e:	4628      	mov	r0, r5
 8010aa0:	b007      	add	sp, #28
 8010aa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010aa6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8010aaa:	2a0d      	cmp	r2, #13
 8010aac:	d8e6      	bhi.n	8010a7c <_scanf_float+0x60>
 8010aae:	a101      	add	r1, pc, #4	; (adr r1, 8010ab4 <_scanf_float+0x98>)
 8010ab0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8010ab4:	08010bf3 	.word	0x08010bf3
 8010ab8:	08010a7d 	.word	0x08010a7d
 8010abc:	08010a7d 	.word	0x08010a7d
 8010ac0:	08010a7d 	.word	0x08010a7d
 8010ac4:	08010c53 	.word	0x08010c53
 8010ac8:	08010c2b 	.word	0x08010c2b
 8010acc:	08010a7d 	.word	0x08010a7d
 8010ad0:	08010a7d 	.word	0x08010a7d
 8010ad4:	08010c01 	.word	0x08010c01
 8010ad8:	08010a7d 	.word	0x08010a7d
 8010adc:	08010a7d 	.word	0x08010a7d
 8010ae0:	08010a7d 	.word	0x08010a7d
 8010ae4:	08010a7d 	.word	0x08010a7d
 8010ae8:	08010bb9 	.word	0x08010bb9
 8010aec:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8010af0:	e7db      	b.n	8010aaa <_scanf_float+0x8e>
 8010af2:	290e      	cmp	r1, #14
 8010af4:	d8c2      	bhi.n	8010a7c <_scanf_float+0x60>
 8010af6:	a001      	add	r0, pc, #4	; (adr r0, 8010afc <_scanf_float+0xe0>)
 8010af8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8010afc:	08010bab 	.word	0x08010bab
 8010b00:	08010a7d 	.word	0x08010a7d
 8010b04:	08010bab 	.word	0x08010bab
 8010b08:	08010c3f 	.word	0x08010c3f
 8010b0c:	08010a7d 	.word	0x08010a7d
 8010b10:	08010b59 	.word	0x08010b59
 8010b14:	08010b95 	.word	0x08010b95
 8010b18:	08010b95 	.word	0x08010b95
 8010b1c:	08010b95 	.word	0x08010b95
 8010b20:	08010b95 	.word	0x08010b95
 8010b24:	08010b95 	.word	0x08010b95
 8010b28:	08010b95 	.word	0x08010b95
 8010b2c:	08010b95 	.word	0x08010b95
 8010b30:	08010b95 	.word	0x08010b95
 8010b34:	08010b95 	.word	0x08010b95
 8010b38:	2b6e      	cmp	r3, #110	; 0x6e
 8010b3a:	d809      	bhi.n	8010b50 <_scanf_float+0x134>
 8010b3c:	2b60      	cmp	r3, #96	; 0x60
 8010b3e:	d8b2      	bhi.n	8010aa6 <_scanf_float+0x8a>
 8010b40:	2b54      	cmp	r3, #84	; 0x54
 8010b42:	d077      	beq.n	8010c34 <_scanf_float+0x218>
 8010b44:	2b59      	cmp	r3, #89	; 0x59
 8010b46:	d199      	bne.n	8010a7c <_scanf_float+0x60>
 8010b48:	2d07      	cmp	r5, #7
 8010b4a:	d197      	bne.n	8010a7c <_scanf_float+0x60>
 8010b4c:	2508      	movs	r5, #8
 8010b4e:	e029      	b.n	8010ba4 <_scanf_float+0x188>
 8010b50:	2b74      	cmp	r3, #116	; 0x74
 8010b52:	d06f      	beq.n	8010c34 <_scanf_float+0x218>
 8010b54:	2b79      	cmp	r3, #121	; 0x79
 8010b56:	e7f6      	b.n	8010b46 <_scanf_float+0x12a>
 8010b58:	6821      	ldr	r1, [r4, #0]
 8010b5a:	05c8      	lsls	r0, r1, #23
 8010b5c:	d51a      	bpl.n	8010b94 <_scanf_float+0x178>
 8010b5e:	9b02      	ldr	r3, [sp, #8]
 8010b60:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8010b64:	6021      	str	r1, [r4, #0]
 8010b66:	f109 0901 	add.w	r9, r9, #1
 8010b6a:	b11b      	cbz	r3, 8010b74 <_scanf_float+0x158>
 8010b6c:	3b01      	subs	r3, #1
 8010b6e:	3201      	adds	r2, #1
 8010b70:	9302      	str	r3, [sp, #8]
 8010b72:	60a2      	str	r2, [r4, #8]
 8010b74:	68a3      	ldr	r3, [r4, #8]
 8010b76:	3b01      	subs	r3, #1
 8010b78:	60a3      	str	r3, [r4, #8]
 8010b7a:	6923      	ldr	r3, [r4, #16]
 8010b7c:	3301      	adds	r3, #1
 8010b7e:	6123      	str	r3, [r4, #16]
 8010b80:	687b      	ldr	r3, [r7, #4]
 8010b82:	3b01      	subs	r3, #1
 8010b84:	2b00      	cmp	r3, #0
 8010b86:	607b      	str	r3, [r7, #4]
 8010b88:	f340 8084 	ble.w	8010c94 <_scanf_float+0x278>
 8010b8c:	683b      	ldr	r3, [r7, #0]
 8010b8e:	3301      	adds	r3, #1
 8010b90:	603b      	str	r3, [r7, #0]
 8010b92:	e766      	b.n	8010a62 <_scanf_float+0x46>
 8010b94:	eb1a 0f05 	cmn.w	sl, r5
 8010b98:	f47f af70 	bne.w	8010a7c <_scanf_float+0x60>
 8010b9c:	6822      	ldr	r2, [r4, #0]
 8010b9e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8010ba2:	6022      	str	r2, [r4, #0]
 8010ba4:	f806 3b01 	strb.w	r3, [r6], #1
 8010ba8:	e7e4      	b.n	8010b74 <_scanf_float+0x158>
 8010baa:	6822      	ldr	r2, [r4, #0]
 8010bac:	0610      	lsls	r0, r2, #24
 8010bae:	f57f af65 	bpl.w	8010a7c <_scanf_float+0x60>
 8010bb2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8010bb6:	e7f4      	b.n	8010ba2 <_scanf_float+0x186>
 8010bb8:	f1ba 0f00 	cmp.w	sl, #0
 8010bbc:	d10e      	bne.n	8010bdc <_scanf_float+0x1c0>
 8010bbe:	f1b9 0f00 	cmp.w	r9, #0
 8010bc2:	d10e      	bne.n	8010be2 <_scanf_float+0x1c6>
 8010bc4:	6822      	ldr	r2, [r4, #0]
 8010bc6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8010bca:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8010bce:	d108      	bne.n	8010be2 <_scanf_float+0x1c6>
 8010bd0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8010bd4:	6022      	str	r2, [r4, #0]
 8010bd6:	f04f 0a01 	mov.w	sl, #1
 8010bda:	e7e3      	b.n	8010ba4 <_scanf_float+0x188>
 8010bdc:	f1ba 0f02 	cmp.w	sl, #2
 8010be0:	d055      	beq.n	8010c8e <_scanf_float+0x272>
 8010be2:	2d01      	cmp	r5, #1
 8010be4:	d002      	beq.n	8010bec <_scanf_float+0x1d0>
 8010be6:	2d04      	cmp	r5, #4
 8010be8:	f47f af48 	bne.w	8010a7c <_scanf_float+0x60>
 8010bec:	3501      	adds	r5, #1
 8010bee:	b2ed      	uxtb	r5, r5
 8010bf0:	e7d8      	b.n	8010ba4 <_scanf_float+0x188>
 8010bf2:	f1ba 0f01 	cmp.w	sl, #1
 8010bf6:	f47f af41 	bne.w	8010a7c <_scanf_float+0x60>
 8010bfa:	f04f 0a02 	mov.w	sl, #2
 8010bfe:	e7d1      	b.n	8010ba4 <_scanf_float+0x188>
 8010c00:	b97d      	cbnz	r5, 8010c22 <_scanf_float+0x206>
 8010c02:	f1b9 0f00 	cmp.w	r9, #0
 8010c06:	f47f af3c 	bne.w	8010a82 <_scanf_float+0x66>
 8010c0a:	6822      	ldr	r2, [r4, #0]
 8010c0c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8010c10:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8010c14:	f47f af39 	bne.w	8010a8a <_scanf_float+0x6e>
 8010c18:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8010c1c:	6022      	str	r2, [r4, #0]
 8010c1e:	2501      	movs	r5, #1
 8010c20:	e7c0      	b.n	8010ba4 <_scanf_float+0x188>
 8010c22:	2d03      	cmp	r5, #3
 8010c24:	d0e2      	beq.n	8010bec <_scanf_float+0x1d0>
 8010c26:	2d05      	cmp	r5, #5
 8010c28:	e7de      	b.n	8010be8 <_scanf_float+0x1cc>
 8010c2a:	2d02      	cmp	r5, #2
 8010c2c:	f47f af26 	bne.w	8010a7c <_scanf_float+0x60>
 8010c30:	2503      	movs	r5, #3
 8010c32:	e7b7      	b.n	8010ba4 <_scanf_float+0x188>
 8010c34:	2d06      	cmp	r5, #6
 8010c36:	f47f af21 	bne.w	8010a7c <_scanf_float+0x60>
 8010c3a:	2507      	movs	r5, #7
 8010c3c:	e7b2      	b.n	8010ba4 <_scanf_float+0x188>
 8010c3e:	6822      	ldr	r2, [r4, #0]
 8010c40:	0591      	lsls	r1, r2, #22
 8010c42:	f57f af1b 	bpl.w	8010a7c <_scanf_float+0x60>
 8010c46:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8010c4a:	6022      	str	r2, [r4, #0]
 8010c4c:	f8cd 9004 	str.w	r9, [sp, #4]
 8010c50:	e7a8      	b.n	8010ba4 <_scanf_float+0x188>
 8010c52:	6822      	ldr	r2, [r4, #0]
 8010c54:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8010c58:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8010c5c:	d006      	beq.n	8010c6c <_scanf_float+0x250>
 8010c5e:	0550      	lsls	r0, r2, #21
 8010c60:	f57f af0c 	bpl.w	8010a7c <_scanf_float+0x60>
 8010c64:	f1b9 0f00 	cmp.w	r9, #0
 8010c68:	f43f af0f 	beq.w	8010a8a <_scanf_float+0x6e>
 8010c6c:	0591      	lsls	r1, r2, #22
 8010c6e:	bf58      	it	pl
 8010c70:	9901      	ldrpl	r1, [sp, #4]
 8010c72:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8010c76:	bf58      	it	pl
 8010c78:	eba9 0101 	subpl.w	r1, r9, r1
 8010c7c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8010c80:	bf58      	it	pl
 8010c82:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8010c86:	6022      	str	r2, [r4, #0]
 8010c88:	f04f 0900 	mov.w	r9, #0
 8010c8c:	e78a      	b.n	8010ba4 <_scanf_float+0x188>
 8010c8e:	f04f 0a03 	mov.w	sl, #3
 8010c92:	e787      	b.n	8010ba4 <_scanf_float+0x188>
 8010c94:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8010c98:	4639      	mov	r1, r7
 8010c9a:	4640      	mov	r0, r8
 8010c9c:	4798      	blx	r3
 8010c9e:	2800      	cmp	r0, #0
 8010ca0:	f43f aedf 	beq.w	8010a62 <_scanf_float+0x46>
 8010ca4:	e6ea      	b.n	8010a7c <_scanf_float+0x60>
 8010ca6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010caa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8010cae:	463a      	mov	r2, r7
 8010cb0:	4640      	mov	r0, r8
 8010cb2:	4798      	blx	r3
 8010cb4:	6923      	ldr	r3, [r4, #16]
 8010cb6:	3b01      	subs	r3, #1
 8010cb8:	6123      	str	r3, [r4, #16]
 8010cba:	e6ec      	b.n	8010a96 <_scanf_float+0x7a>
 8010cbc:	1e6b      	subs	r3, r5, #1
 8010cbe:	2b06      	cmp	r3, #6
 8010cc0:	d825      	bhi.n	8010d0e <_scanf_float+0x2f2>
 8010cc2:	2d02      	cmp	r5, #2
 8010cc4:	d836      	bhi.n	8010d34 <_scanf_float+0x318>
 8010cc6:	455e      	cmp	r6, fp
 8010cc8:	f67f aee8 	bls.w	8010a9c <_scanf_float+0x80>
 8010ccc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010cd0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8010cd4:	463a      	mov	r2, r7
 8010cd6:	4640      	mov	r0, r8
 8010cd8:	4798      	blx	r3
 8010cda:	6923      	ldr	r3, [r4, #16]
 8010cdc:	3b01      	subs	r3, #1
 8010cde:	6123      	str	r3, [r4, #16]
 8010ce0:	e7f1      	b.n	8010cc6 <_scanf_float+0x2aa>
 8010ce2:	9802      	ldr	r0, [sp, #8]
 8010ce4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010ce8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8010cec:	9002      	str	r0, [sp, #8]
 8010cee:	463a      	mov	r2, r7
 8010cf0:	4640      	mov	r0, r8
 8010cf2:	4798      	blx	r3
 8010cf4:	6923      	ldr	r3, [r4, #16]
 8010cf6:	3b01      	subs	r3, #1
 8010cf8:	6123      	str	r3, [r4, #16]
 8010cfa:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010cfe:	fa5f fa8a 	uxtb.w	sl, sl
 8010d02:	f1ba 0f02 	cmp.w	sl, #2
 8010d06:	d1ec      	bne.n	8010ce2 <_scanf_float+0x2c6>
 8010d08:	3d03      	subs	r5, #3
 8010d0a:	b2ed      	uxtb	r5, r5
 8010d0c:	1b76      	subs	r6, r6, r5
 8010d0e:	6823      	ldr	r3, [r4, #0]
 8010d10:	05da      	lsls	r2, r3, #23
 8010d12:	d52f      	bpl.n	8010d74 <_scanf_float+0x358>
 8010d14:	055b      	lsls	r3, r3, #21
 8010d16:	d510      	bpl.n	8010d3a <_scanf_float+0x31e>
 8010d18:	455e      	cmp	r6, fp
 8010d1a:	f67f aebf 	bls.w	8010a9c <_scanf_float+0x80>
 8010d1e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010d22:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8010d26:	463a      	mov	r2, r7
 8010d28:	4640      	mov	r0, r8
 8010d2a:	4798      	blx	r3
 8010d2c:	6923      	ldr	r3, [r4, #16]
 8010d2e:	3b01      	subs	r3, #1
 8010d30:	6123      	str	r3, [r4, #16]
 8010d32:	e7f1      	b.n	8010d18 <_scanf_float+0x2fc>
 8010d34:	46aa      	mov	sl, r5
 8010d36:	9602      	str	r6, [sp, #8]
 8010d38:	e7df      	b.n	8010cfa <_scanf_float+0x2de>
 8010d3a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8010d3e:	6923      	ldr	r3, [r4, #16]
 8010d40:	2965      	cmp	r1, #101	; 0x65
 8010d42:	f103 33ff 	add.w	r3, r3, #4294967295
 8010d46:	f106 35ff 	add.w	r5, r6, #4294967295
 8010d4a:	6123      	str	r3, [r4, #16]
 8010d4c:	d00c      	beq.n	8010d68 <_scanf_float+0x34c>
 8010d4e:	2945      	cmp	r1, #69	; 0x45
 8010d50:	d00a      	beq.n	8010d68 <_scanf_float+0x34c>
 8010d52:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010d56:	463a      	mov	r2, r7
 8010d58:	4640      	mov	r0, r8
 8010d5a:	4798      	blx	r3
 8010d5c:	6923      	ldr	r3, [r4, #16]
 8010d5e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8010d62:	3b01      	subs	r3, #1
 8010d64:	1eb5      	subs	r5, r6, #2
 8010d66:	6123      	str	r3, [r4, #16]
 8010d68:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010d6c:	463a      	mov	r2, r7
 8010d6e:	4640      	mov	r0, r8
 8010d70:	4798      	blx	r3
 8010d72:	462e      	mov	r6, r5
 8010d74:	6825      	ldr	r5, [r4, #0]
 8010d76:	f015 0510 	ands.w	r5, r5, #16
 8010d7a:	d159      	bne.n	8010e30 <_scanf_float+0x414>
 8010d7c:	7035      	strb	r5, [r6, #0]
 8010d7e:	6823      	ldr	r3, [r4, #0]
 8010d80:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8010d84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010d88:	d11b      	bne.n	8010dc2 <_scanf_float+0x3a6>
 8010d8a:	9b01      	ldr	r3, [sp, #4]
 8010d8c:	454b      	cmp	r3, r9
 8010d8e:	eba3 0209 	sub.w	r2, r3, r9
 8010d92:	d123      	bne.n	8010ddc <_scanf_float+0x3c0>
 8010d94:	2200      	movs	r2, #0
 8010d96:	4659      	mov	r1, fp
 8010d98:	4640      	mov	r0, r8
 8010d9a:	f000 ff13 	bl	8011bc4 <_strtod_r>
 8010d9e:	6822      	ldr	r2, [r4, #0]
 8010da0:	9b03      	ldr	r3, [sp, #12]
 8010da2:	f012 0f02 	tst.w	r2, #2
 8010da6:	ec57 6b10 	vmov	r6, r7, d0
 8010daa:	681b      	ldr	r3, [r3, #0]
 8010dac:	d021      	beq.n	8010df2 <_scanf_float+0x3d6>
 8010dae:	9903      	ldr	r1, [sp, #12]
 8010db0:	1d1a      	adds	r2, r3, #4
 8010db2:	600a      	str	r2, [r1, #0]
 8010db4:	681b      	ldr	r3, [r3, #0]
 8010db6:	e9c3 6700 	strd	r6, r7, [r3]
 8010dba:	68e3      	ldr	r3, [r4, #12]
 8010dbc:	3301      	adds	r3, #1
 8010dbe:	60e3      	str	r3, [r4, #12]
 8010dc0:	e66d      	b.n	8010a9e <_scanf_float+0x82>
 8010dc2:	9b04      	ldr	r3, [sp, #16]
 8010dc4:	2b00      	cmp	r3, #0
 8010dc6:	d0e5      	beq.n	8010d94 <_scanf_float+0x378>
 8010dc8:	9905      	ldr	r1, [sp, #20]
 8010dca:	230a      	movs	r3, #10
 8010dcc:	462a      	mov	r2, r5
 8010dce:	3101      	adds	r1, #1
 8010dd0:	4640      	mov	r0, r8
 8010dd2:	f000 ffdb 	bl	8011d8c <_strtol_r>
 8010dd6:	9b04      	ldr	r3, [sp, #16]
 8010dd8:	9e05      	ldr	r6, [sp, #20]
 8010dda:	1ac2      	subs	r2, r0, r3
 8010ddc:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8010de0:	429e      	cmp	r6, r3
 8010de2:	bf28      	it	cs
 8010de4:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8010de8:	4912      	ldr	r1, [pc, #72]	; (8010e34 <_scanf_float+0x418>)
 8010dea:	4630      	mov	r0, r6
 8010dec:	f000 f82c 	bl	8010e48 <siprintf>
 8010df0:	e7d0      	b.n	8010d94 <_scanf_float+0x378>
 8010df2:	9903      	ldr	r1, [sp, #12]
 8010df4:	f012 0f04 	tst.w	r2, #4
 8010df8:	f103 0204 	add.w	r2, r3, #4
 8010dfc:	600a      	str	r2, [r1, #0]
 8010dfe:	d1d9      	bne.n	8010db4 <_scanf_float+0x398>
 8010e00:	f8d3 8000 	ldr.w	r8, [r3]
 8010e04:	ee10 2a10 	vmov	r2, s0
 8010e08:	ee10 0a10 	vmov	r0, s0
 8010e0c:	463b      	mov	r3, r7
 8010e0e:	4639      	mov	r1, r7
 8010e10:	f7ef febc 	bl	8000b8c <__aeabi_dcmpun>
 8010e14:	b128      	cbz	r0, 8010e22 <_scanf_float+0x406>
 8010e16:	4808      	ldr	r0, [pc, #32]	; (8010e38 <_scanf_float+0x41c>)
 8010e18:	f000 f810 	bl	8010e3c <nanf>
 8010e1c:	ed88 0a00 	vstr	s0, [r8]
 8010e20:	e7cb      	b.n	8010dba <_scanf_float+0x39e>
 8010e22:	4630      	mov	r0, r6
 8010e24:	4639      	mov	r1, r7
 8010e26:	f7ef ff0f 	bl	8000c48 <__aeabi_d2f>
 8010e2a:	f8c8 0000 	str.w	r0, [r8]
 8010e2e:	e7c4      	b.n	8010dba <_scanf_float+0x39e>
 8010e30:	2500      	movs	r5, #0
 8010e32:	e634      	b.n	8010a9e <_scanf_float+0x82>
 8010e34:	080168ee 	.word	0x080168ee
 8010e38:	080169f7 	.word	0x080169f7

08010e3c <nanf>:
 8010e3c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8010e44 <nanf+0x8>
 8010e40:	4770      	bx	lr
 8010e42:	bf00      	nop
 8010e44:	7fc00000 	.word	0x7fc00000

08010e48 <siprintf>:
 8010e48:	b40e      	push	{r1, r2, r3}
 8010e4a:	b500      	push	{lr}
 8010e4c:	b09c      	sub	sp, #112	; 0x70
 8010e4e:	ab1d      	add	r3, sp, #116	; 0x74
 8010e50:	9002      	str	r0, [sp, #8]
 8010e52:	9006      	str	r0, [sp, #24]
 8010e54:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010e58:	4809      	ldr	r0, [pc, #36]	; (8010e80 <siprintf+0x38>)
 8010e5a:	9107      	str	r1, [sp, #28]
 8010e5c:	9104      	str	r1, [sp, #16]
 8010e5e:	4909      	ldr	r1, [pc, #36]	; (8010e84 <siprintf+0x3c>)
 8010e60:	f853 2b04 	ldr.w	r2, [r3], #4
 8010e64:	9105      	str	r1, [sp, #20]
 8010e66:	6800      	ldr	r0, [r0, #0]
 8010e68:	9301      	str	r3, [sp, #4]
 8010e6a:	a902      	add	r1, sp, #8
 8010e6c:	f003 f810 	bl	8013e90 <_svfiprintf_r>
 8010e70:	9b02      	ldr	r3, [sp, #8]
 8010e72:	2200      	movs	r2, #0
 8010e74:	701a      	strb	r2, [r3, #0]
 8010e76:	b01c      	add	sp, #112	; 0x70
 8010e78:	f85d eb04 	ldr.w	lr, [sp], #4
 8010e7c:	b003      	add	sp, #12
 8010e7e:	4770      	bx	lr
 8010e80:	2000038c 	.word	0x2000038c
 8010e84:	ffff0208 	.word	0xffff0208

08010e88 <siscanf>:
 8010e88:	b40e      	push	{r1, r2, r3}
 8010e8a:	b510      	push	{r4, lr}
 8010e8c:	b09f      	sub	sp, #124	; 0x7c
 8010e8e:	ac21      	add	r4, sp, #132	; 0x84
 8010e90:	f44f 7101 	mov.w	r1, #516	; 0x204
 8010e94:	f854 2b04 	ldr.w	r2, [r4], #4
 8010e98:	9201      	str	r2, [sp, #4]
 8010e9a:	f8ad 101c 	strh.w	r1, [sp, #28]
 8010e9e:	9004      	str	r0, [sp, #16]
 8010ea0:	9008      	str	r0, [sp, #32]
 8010ea2:	f7ef f9bf 	bl	8000224 <strlen>
 8010ea6:	4b0c      	ldr	r3, [pc, #48]	; (8010ed8 <siscanf+0x50>)
 8010ea8:	9005      	str	r0, [sp, #20]
 8010eaa:	9009      	str	r0, [sp, #36]	; 0x24
 8010eac:	930d      	str	r3, [sp, #52]	; 0x34
 8010eae:	480b      	ldr	r0, [pc, #44]	; (8010edc <siscanf+0x54>)
 8010eb0:	9a01      	ldr	r2, [sp, #4]
 8010eb2:	6800      	ldr	r0, [r0, #0]
 8010eb4:	9403      	str	r4, [sp, #12]
 8010eb6:	2300      	movs	r3, #0
 8010eb8:	9311      	str	r3, [sp, #68]	; 0x44
 8010eba:	9316      	str	r3, [sp, #88]	; 0x58
 8010ebc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010ec0:	f8ad 301e 	strh.w	r3, [sp, #30]
 8010ec4:	a904      	add	r1, sp, #16
 8010ec6:	4623      	mov	r3, r4
 8010ec8:	f003 f93c 	bl	8014144 <__ssvfiscanf_r>
 8010ecc:	b01f      	add	sp, #124	; 0x7c
 8010ece:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010ed2:	b003      	add	sp, #12
 8010ed4:	4770      	bx	lr
 8010ed6:	bf00      	nop
 8010ed8:	08010f03 	.word	0x08010f03
 8010edc:	2000038c 	.word	0x2000038c

08010ee0 <__sread>:
 8010ee0:	b510      	push	{r4, lr}
 8010ee2:	460c      	mov	r4, r1
 8010ee4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010ee8:	f003 fd50 	bl	801498c <_read_r>
 8010eec:	2800      	cmp	r0, #0
 8010eee:	bfab      	itete	ge
 8010ef0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010ef2:	89a3      	ldrhlt	r3, [r4, #12]
 8010ef4:	181b      	addge	r3, r3, r0
 8010ef6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010efa:	bfac      	ite	ge
 8010efc:	6563      	strge	r3, [r4, #84]	; 0x54
 8010efe:	81a3      	strhlt	r3, [r4, #12]
 8010f00:	bd10      	pop	{r4, pc}

08010f02 <__seofread>:
 8010f02:	2000      	movs	r0, #0
 8010f04:	4770      	bx	lr

08010f06 <__swrite>:
 8010f06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010f0a:	461f      	mov	r7, r3
 8010f0c:	898b      	ldrh	r3, [r1, #12]
 8010f0e:	05db      	lsls	r3, r3, #23
 8010f10:	4605      	mov	r5, r0
 8010f12:	460c      	mov	r4, r1
 8010f14:	4616      	mov	r6, r2
 8010f16:	d505      	bpl.n	8010f24 <__swrite+0x1e>
 8010f18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010f1c:	2302      	movs	r3, #2
 8010f1e:	2200      	movs	r2, #0
 8010f20:	f002 f976 	bl	8013210 <_lseek_r>
 8010f24:	89a3      	ldrh	r3, [r4, #12]
 8010f26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010f2a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010f2e:	81a3      	strh	r3, [r4, #12]
 8010f30:	4632      	mov	r2, r6
 8010f32:	463b      	mov	r3, r7
 8010f34:	4628      	mov	r0, r5
 8010f36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010f3a:	f000 bf29 	b.w	8011d90 <_write_r>

08010f3e <__sseek>:
 8010f3e:	b510      	push	{r4, lr}
 8010f40:	460c      	mov	r4, r1
 8010f42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010f46:	f002 f963 	bl	8013210 <_lseek_r>
 8010f4a:	1c43      	adds	r3, r0, #1
 8010f4c:	89a3      	ldrh	r3, [r4, #12]
 8010f4e:	bf15      	itete	ne
 8010f50:	6560      	strne	r0, [r4, #84]	; 0x54
 8010f52:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010f56:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010f5a:	81a3      	strheq	r3, [r4, #12]
 8010f5c:	bf18      	it	ne
 8010f5e:	81a3      	strhne	r3, [r4, #12]
 8010f60:	bd10      	pop	{r4, pc}

08010f62 <__sclose>:
 8010f62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010f66:	f000 bf43 	b.w	8011df0 <_close_r>

08010f6a <strcpy>:
 8010f6a:	4603      	mov	r3, r0
 8010f6c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010f70:	f803 2b01 	strb.w	r2, [r3], #1
 8010f74:	2a00      	cmp	r2, #0
 8010f76:	d1f9      	bne.n	8010f6c <strcpy+0x2>
 8010f78:	4770      	bx	lr

08010f7a <sulp>:
 8010f7a:	b570      	push	{r4, r5, r6, lr}
 8010f7c:	4604      	mov	r4, r0
 8010f7e:	460d      	mov	r5, r1
 8010f80:	ec45 4b10 	vmov	d0, r4, r5
 8010f84:	4616      	mov	r6, r2
 8010f86:	f002 fce1 	bl	801394c <__ulp>
 8010f8a:	ec51 0b10 	vmov	r0, r1, d0
 8010f8e:	b17e      	cbz	r6, 8010fb0 <sulp+0x36>
 8010f90:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8010f94:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8010f98:	2b00      	cmp	r3, #0
 8010f9a:	dd09      	ble.n	8010fb0 <sulp+0x36>
 8010f9c:	051b      	lsls	r3, r3, #20
 8010f9e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8010fa2:	2400      	movs	r4, #0
 8010fa4:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8010fa8:	4622      	mov	r2, r4
 8010faa:	462b      	mov	r3, r5
 8010fac:	f7ef fb54 	bl	8000658 <__aeabi_dmul>
 8010fb0:	bd70      	pop	{r4, r5, r6, pc}
 8010fb2:	0000      	movs	r0, r0
 8010fb4:	0000      	movs	r0, r0
	...

08010fb8 <_strtod_l>:
 8010fb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010fbc:	ed2d 8b02 	vpush	{d8}
 8010fc0:	b09d      	sub	sp, #116	; 0x74
 8010fc2:	461f      	mov	r7, r3
 8010fc4:	2300      	movs	r3, #0
 8010fc6:	9318      	str	r3, [sp, #96]	; 0x60
 8010fc8:	4ba2      	ldr	r3, [pc, #648]	; (8011254 <_strtod_l+0x29c>)
 8010fca:	9213      	str	r2, [sp, #76]	; 0x4c
 8010fcc:	681b      	ldr	r3, [r3, #0]
 8010fce:	9305      	str	r3, [sp, #20]
 8010fd0:	4604      	mov	r4, r0
 8010fd2:	4618      	mov	r0, r3
 8010fd4:	4688      	mov	r8, r1
 8010fd6:	f7ef f925 	bl	8000224 <strlen>
 8010fda:	f04f 0a00 	mov.w	sl, #0
 8010fde:	4605      	mov	r5, r0
 8010fe0:	f04f 0b00 	mov.w	fp, #0
 8010fe4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8010fe8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010fea:	781a      	ldrb	r2, [r3, #0]
 8010fec:	2a2b      	cmp	r2, #43	; 0x2b
 8010fee:	d04e      	beq.n	801108e <_strtod_l+0xd6>
 8010ff0:	d83b      	bhi.n	801106a <_strtod_l+0xb2>
 8010ff2:	2a0d      	cmp	r2, #13
 8010ff4:	d834      	bhi.n	8011060 <_strtod_l+0xa8>
 8010ff6:	2a08      	cmp	r2, #8
 8010ff8:	d834      	bhi.n	8011064 <_strtod_l+0xac>
 8010ffa:	2a00      	cmp	r2, #0
 8010ffc:	d03e      	beq.n	801107c <_strtod_l+0xc4>
 8010ffe:	2300      	movs	r3, #0
 8011000:	930a      	str	r3, [sp, #40]	; 0x28
 8011002:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8011004:	7833      	ldrb	r3, [r6, #0]
 8011006:	2b30      	cmp	r3, #48	; 0x30
 8011008:	f040 80b0 	bne.w	801116c <_strtod_l+0x1b4>
 801100c:	7873      	ldrb	r3, [r6, #1]
 801100e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8011012:	2b58      	cmp	r3, #88	; 0x58
 8011014:	d168      	bne.n	80110e8 <_strtod_l+0x130>
 8011016:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011018:	9301      	str	r3, [sp, #4]
 801101a:	ab18      	add	r3, sp, #96	; 0x60
 801101c:	9702      	str	r7, [sp, #8]
 801101e:	9300      	str	r3, [sp, #0]
 8011020:	4a8d      	ldr	r2, [pc, #564]	; (8011258 <_strtod_l+0x2a0>)
 8011022:	ab19      	add	r3, sp, #100	; 0x64
 8011024:	a917      	add	r1, sp, #92	; 0x5c
 8011026:	4620      	mov	r0, r4
 8011028:	f001 fde6 	bl	8012bf8 <__gethex>
 801102c:	f010 0707 	ands.w	r7, r0, #7
 8011030:	4605      	mov	r5, r0
 8011032:	d005      	beq.n	8011040 <_strtod_l+0x88>
 8011034:	2f06      	cmp	r7, #6
 8011036:	d12c      	bne.n	8011092 <_strtod_l+0xda>
 8011038:	3601      	adds	r6, #1
 801103a:	2300      	movs	r3, #0
 801103c:	9617      	str	r6, [sp, #92]	; 0x5c
 801103e:	930a      	str	r3, [sp, #40]	; 0x28
 8011040:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8011042:	2b00      	cmp	r3, #0
 8011044:	f040 8590 	bne.w	8011b68 <_strtod_l+0xbb0>
 8011048:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801104a:	b1eb      	cbz	r3, 8011088 <_strtod_l+0xd0>
 801104c:	4652      	mov	r2, sl
 801104e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8011052:	ec43 2b10 	vmov	d0, r2, r3
 8011056:	b01d      	add	sp, #116	; 0x74
 8011058:	ecbd 8b02 	vpop	{d8}
 801105c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011060:	2a20      	cmp	r2, #32
 8011062:	d1cc      	bne.n	8010ffe <_strtod_l+0x46>
 8011064:	3301      	adds	r3, #1
 8011066:	9317      	str	r3, [sp, #92]	; 0x5c
 8011068:	e7be      	b.n	8010fe8 <_strtod_l+0x30>
 801106a:	2a2d      	cmp	r2, #45	; 0x2d
 801106c:	d1c7      	bne.n	8010ffe <_strtod_l+0x46>
 801106e:	2201      	movs	r2, #1
 8011070:	920a      	str	r2, [sp, #40]	; 0x28
 8011072:	1c5a      	adds	r2, r3, #1
 8011074:	9217      	str	r2, [sp, #92]	; 0x5c
 8011076:	785b      	ldrb	r3, [r3, #1]
 8011078:	2b00      	cmp	r3, #0
 801107a:	d1c2      	bne.n	8011002 <_strtod_l+0x4a>
 801107c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801107e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8011082:	2b00      	cmp	r3, #0
 8011084:	f040 856e 	bne.w	8011b64 <_strtod_l+0xbac>
 8011088:	4652      	mov	r2, sl
 801108a:	465b      	mov	r3, fp
 801108c:	e7e1      	b.n	8011052 <_strtod_l+0x9a>
 801108e:	2200      	movs	r2, #0
 8011090:	e7ee      	b.n	8011070 <_strtod_l+0xb8>
 8011092:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8011094:	b13a      	cbz	r2, 80110a6 <_strtod_l+0xee>
 8011096:	2135      	movs	r1, #53	; 0x35
 8011098:	a81a      	add	r0, sp, #104	; 0x68
 801109a:	f002 fd62 	bl	8013b62 <__copybits>
 801109e:	9918      	ldr	r1, [sp, #96]	; 0x60
 80110a0:	4620      	mov	r0, r4
 80110a2:	f002 f921 	bl	80132e8 <_Bfree>
 80110a6:	3f01      	subs	r7, #1
 80110a8:	2f04      	cmp	r7, #4
 80110aa:	d806      	bhi.n	80110ba <_strtod_l+0x102>
 80110ac:	e8df f007 	tbb	[pc, r7]
 80110b0:	1714030a 	.word	0x1714030a
 80110b4:	0a          	.byte	0x0a
 80110b5:	00          	.byte	0x00
 80110b6:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 80110ba:	0728      	lsls	r0, r5, #28
 80110bc:	d5c0      	bpl.n	8011040 <_strtod_l+0x88>
 80110be:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80110c2:	e7bd      	b.n	8011040 <_strtod_l+0x88>
 80110c4:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 80110c8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80110ca:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80110ce:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80110d2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80110d6:	e7f0      	b.n	80110ba <_strtod_l+0x102>
 80110d8:	f8df b180 	ldr.w	fp, [pc, #384]	; 801125c <_strtod_l+0x2a4>
 80110dc:	e7ed      	b.n	80110ba <_strtod_l+0x102>
 80110de:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80110e2:	f04f 3aff 	mov.w	sl, #4294967295
 80110e6:	e7e8      	b.n	80110ba <_strtod_l+0x102>
 80110e8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80110ea:	1c5a      	adds	r2, r3, #1
 80110ec:	9217      	str	r2, [sp, #92]	; 0x5c
 80110ee:	785b      	ldrb	r3, [r3, #1]
 80110f0:	2b30      	cmp	r3, #48	; 0x30
 80110f2:	d0f9      	beq.n	80110e8 <_strtod_l+0x130>
 80110f4:	2b00      	cmp	r3, #0
 80110f6:	d0a3      	beq.n	8011040 <_strtod_l+0x88>
 80110f8:	2301      	movs	r3, #1
 80110fa:	f04f 0900 	mov.w	r9, #0
 80110fe:	9304      	str	r3, [sp, #16]
 8011100:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011102:	9308      	str	r3, [sp, #32]
 8011104:	f8cd 901c 	str.w	r9, [sp, #28]
 8011108:	464f      	mov	r7, r9
 801110a:	220a      	movs	r2, #10
 801110c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801110e:	7806      	ldrb	r6, [r0, #0]
 8011110:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8011114:	b2d9      	uxtb	r1, r3
 8011116:	2909      	cmp	r1, #9
 8011118:	d92a      	bls.n	8011170 <_strtod_l+0x1b8>
 801111a:	9905      	ldr	r1, [sp, #20]
 801111c:	462a      	mov	r2, r5
 801111e:	f003 fc97 	bl	8014a50 <strncmp>
 8011122:	b398      	cbz	r0, 801118c <_strtod_l+0x1d4>
 8011124:	2000      	movs	r0, #0
 8011126:	4632      	mov	r2, r6
 8011128:	463d      	mov	r5, r7
 801112a:	9005      	str	r0, [sp, #20]
 801112c:	4603      	mov	r3, r0
 801112e:	2a65      	cmp	r2, #101	; 0x65
 8011130:	d001      	beq.n	8011136 <_strtod_l+0x17e>
 8011132:	2a45      	cmp	r2, #69	; 0x45
 8011134:	d118      	bne.n	8011168 <_strtod_l+0x1b0>
 8011136:	b91d      	cbnz	r5, 8011140 <_strtod_l+0x188>
 8011138:	9a04      	ldr	r2, [sp, #16]
 801113a:	4302      	orrs	r2, r0
 801113c:	d09e      	beq.n	801107c <_strtod_l+0xc4>
 801113e:	2500      	movs	r5, #0
 8011140:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8011144:	f108 0201 	add.w	r2, r8, #1
 8011148:	9217      	str	r2, [sp, #92]	; 0x5c
 801114a:	f898 2001 	ldrb.w	r2, [r8, #1]
 801114e:	2a2b      	cmp	r2, #43	; 0x2b
 8011150:	d075      	beq.n	801123e <_strtod_l+0x286>
 8011152:	2a2d      	cmp	r2, #45	; 0x2d
 8011154:	d07b      	beq.n	801124e <_strtod_l+0x296>
 8011156:	f04f 0c00 	mov.w	ip, #0
 801115a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 801115e:	2909      	cmp	r1, #9
 8011160:	f240 8082 	bls.w	8011268 <_strtod_l+0x2b0>
 8011164:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8011168:	2600      	movs	r6, #0
 801116a:	e09d      	b.n	80112a8 <_strtod_l+0x2f0>
 801116c:	2300      	movs	r3, #0
 801116e:	e7c4      	b.n	80110fa <_strtod_l+0x142>
 8011170:	2f08      	cmp	r7, #8
 8011172:	bfd8      	it	le
 8011174:	9907      	ldrle	r1, [sp, #28]
 8011176:	f100 0001 	add.w	r0, r0, #1
 801117a:	bfda      	itte	le
 801117c:	fb02 3301 	mlale	r3, r2, r1, r3
 8011180:	9307      	strle	r3, [sp, #28]
 8011182:	fb02 3909 	mlagt	r9, r2, r9, r3
 8011186:	3701      	adds	r7, #1
 8011188:	9017      	str	r0, [sp, #92]	; 0x5c
 801118a:	e7bf      	b.n	801110c <_strtod_l+0x154>
 801118c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801118e:	195a      	adds	r2, r3, r5
 8011190:	9217      	str	r2, [sp, #92]	; 0x5c
 8011192:	5d5a      	ldrb	r2, [r3, r5]
 8011194:	2f00      	cmp	r7, #0
 8011196:	d037      	beq.n	8011208 <_strtod_l+0x250>
 8011198:	9005      	str	r0, [sp, #20]
 801119a:	463d      	mov	r5, r7
 801119c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80111a0:	2b09      	cmp	r3, #9
 80111a2:	d912      	bls.n	80111ca <_strtod_l+0x212>
 80111a4:	2301      	movs	r3, #1
 80111a6:	e7c2      	b.n	801112e <_strtod_l+0x176>
 80111a8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80111aa:	1c5a      	adds	r2, r3, #1
 80111ac:	9217      	str	r2, [sp, #92]	; 0x5c
 80111ae:	785a      	ldrb	r2, [r3, #1]
 80111b0:	3001      	adds	r0, #1
 80111b2:	2a30      	cmp	r2, #48	; 0x30
 80111b4:	d0f8      	beq.n	80111a8 <_strtod_l+0x1f0>
 80111b6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80111ba:	2b08      	cmp	r3, #8
 80111bc:	f200 84d9 	bhi.w	8011b72 <_strtod_l+0xbba>
 80111c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80111c2:	9005      	str	r0, [sp, #20]
 80111c4:	2000      	movs	r0, #0
 80111c6:	9308      	str	r3, [sp, #32]
 80111c8:	4605      	mov	r5, r0
 80111ca:	3a30      	subs	r2, #48	; 0x30
 80111cc:	f100 0301 	add.w	r3, r0, #1
 80111d0:	d014      	beq.n	80111fc <_strtod_l+0x244>
 80111d2:	9905      	ldr	r1, [sp, #20]
 80111d4:	4419      	add	r1, r3
 80111d6:	9105      	str	r1, [sp, #20]
 80111d8:	462b      	mov	r3, r5
 80111da:	eb00 0e05 	add.w	lr, r0, r5
 80111de:	210a      	movs	r1, #10
 80111e0:	4573      	cmp	r3, lr
 80111e2:	d113      	bne.n	801120c <_strtod_l+0x254>
 80111e4:	182b      	adds	r3, r5, r0
 80111e6:	2b08      	cmp	r3, #8
 80111e8:	f105 0501 	add.w	r5, r5, #1
 80111ec:	4405      	add	r5, r0
 80111ee:	dc1c      	bgt.n	801122a <_strtod_l+0x272>
 80111f0:	9907      	ldr	r1, [sp, #28]
 80111f2:	230a      	movs	r3, #10
 80111f4:	fb03 2301 	mla	r3, r3, r1, r2
 80111f8:	9307      	str	r3, [sp, #28]
 80111fa:	2300      	movs	r3, #0
 80111fc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80111fe:	1c51      	adds	r1, r2, #1
 8011200:	9117      	str	r1, [sp, #92]	; 0x5c
 8011202:	7852      	ldrb	r2, [r2, #1]
 8011204:	4618      	mov	r0, r3
 8011206:	e7c9      	b.n	801119c <_strtod_l+0x1e4>
 8011208:	4638      	mov	r0, r7
 801120a:	e7d2      	b.n	80111b2 <_strtod_l+0x1fa>
 801120c:	2b08      	cmp	r3, #8
 801120e:	dc04      	bgt.n	801121a <_strtod_l+0x262>
 8011210:	9e07      	ldr	r6, [sp, #28]
 8011212:	434e      	muls	r6, r1
 8011214:	9607      	str	r6, [sp, #28]
 8011216:	3301      	adds	r3, #1
 8011218:	e7e2      	b.n	80111e0 <_strtod_l+0x228>
 801121a:	f103 0c01 	add.w	ip, r3, #1
 801121e:	f1bc 0f10 	cmp.w	ip, #16
 8011222:	bfd8      	it	le
 8011224:	fb01 f909 	mulle.w	r9, r1, r9
 8011228:	e7f5      	b.n	8011216 <_strtod_l+0x25e>
 801122a:	2d10      	cmp	r5, #16
 801122c:	bfdc      	itt	le
 801122e:	230a      	movle	r3, #10
 8011230:	fb03 2909 	mlale	r9, r3, r9, r2
 8011234:	e7e1      	b.n	80111fa <_strtod_l+0x242>
 8011236:	2300      	movs	r3, #0
 8011238:	9305      	str	r3, [sp, #20]
 801123a:	2301      	movs	r3, #1
 801123c:	e77c      	b.n	8011138 <_strtod_l+0x180>
 801123e:	f04f 0c00 	mov.w	ip, #0
 8011242:	f108 0202 	add.w	r2, r8, #2
 8011246:	9217      	str	r2, [sp, #92]	; 0x5c
 8011248:	f898 2002 	ldrb.w	r2, [r8, #2]
 801124c:	e785      	b.n	801115a <_strtod_l+0x1a2>
 801124e:	f04f 0c01 	mov.w	ip, #1
 8011252:	e7f6      	b.n	8011242 <_strtod_l+0x28a>
 8011254:	08016bd8 	.word	0x08016bd8
 8011258:	080168f4 	.word	0x080168f4
 801125c:	7ff00000 	.word	0x7ff00000
 8011260:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8011262:	1c51      	adds	r1, r2, #1
 8011264:	9117      	str	r1, [sp, #92]	; 0x5c
 8011266:	7852      	ldrb	r2, [r2, #1]
 8011268:	2a30      	cmp	r2, #48	; 0x30
 801126a:	d0f9      	beq.n	8011260 <_strtod_l+0x2a8>
 801126c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8011270:	2908      	cmp	r1, #8
 8011272:	f63f af79 	bhi.w	8011168 <_strtod_l+0x1b0>
 8011276:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 801127a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801127c:	9206      	str	r2, [sp, #24]
 801127e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8011280:	1c51      	adds	r1, r2, #1
 8011282:	9117      	str	r1, [sp, #92]	; 0x5c
 8011284:	7852      	ldrb	r2, [r2, #1]
 8011286:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 801128a:	2e09      	cmp	r6, #9
 801128c:	d937      	bls.n	80112fe <_strtod_l+0x346>
 801128e:	9e06      	ldr	r6, [sp, #24]
 8011290:	1b89      	subs	r1, r1, r6
 8011292:	2908      	cmp	r1, #8
 8011294:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8011298:	dc02      	bgt.n	80112a0 <_strtod_l+0x2e8>
 801129a:	4576      	cmp	r6, lr
 801129c:	bfa8      	it	ge
 801129e:	4676      	movge	r6, lr
 80112a0:	f1bc 0f00 	cmp.w	ip, #0
 80112a4:	d000      	beq.n	80112a8 <_strtod_l+0x2f0>
 80112a6:	4276      	negs	r6, r6
 80112a8:	2d00      	cmp	r5, #0
 80112aa:	d14d      	bne.n	8011348 <_strtod_l+0x390>
 80112ac:	9904      	ldr	r1, [sp, #16]
 80112ae:	4301      	orrs	r1, r0
 80112b0:	f47f aec6 	bne.w	8011040 <_strtod_l+0x88>
 80112b4:	2b00      	cmp	r3, #0
 80112b6:	f47f aee1 	bne.w	801107c <_strtod_l+0xc4>
 80112ba:	2a69      	cmp	r2, #105	; 0x69
 80112bc:	d027      	beq.n	801130e <_strtod_l+0x356>
 80112be:	dc24      	bgt.n	801130a <_strtod_l+0x352>
 80112c0:	2a49      	cmp	r2, #73	; 0x49
 80112c2:	d024      	beq.n	801130e <_strtod_l+0x356>
 80112c4:	2a4e      	cmp	r2, #78	; 0x4e
 80112c6:	f47f aed9 	bne.w	801107c <_strtod_l+0xc4>
 80112ca:	499f      	ldr	r1, [pc, #636]	; (8011548 <_strtod_l+0x590>)
 80112cc:	a817      	add	r0, sp, #92	; 0x5c
 80112ce:	f001 feeb 	bl	80130a8 <__match>
 80112d2:	2800      	cmp	r0, #0
 80112d4:	f43f aed2 	beq.w	801107c <_strtod_l+0xc4>
 80112d8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80112da:	781b      	ldrb	r3, [r3, #0]
 80112dc:	2b28      	cmp	r3, #40	; 0x28
 80112de:	d12d      	bne.n	801133c <_strtod_l+0x384>
 80112e0:	499a      	ldr	r1, [pc, #616]	; (801154c <_strtod_l+0x594>)
 80112e2:	aa1a      	add	r2, sp, #104	; 0x68
 80112e4:	a817      	add	r0, sp, #92	; 0x5c
 80112e6:	f001 fef3 	bl	80130d0 <__hexnan>
 80112ea:	2805      	cmp	r0, #5
 80112ec:	d126      	bne.n	801133c <_strtod_l+0x384>
 80112ee:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80112f0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 80112f4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80112f8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80112fc:	e6a0      	b.n	8011040 <_strtod_l+0x88>
 80112fe:	210a      	movs	r1, #10
 8011300:	fb01 2e0e 	mla	lr, r1, lr, r2
 8011304:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8011308:	e7b9      	b.n	801127e <_strtod_l+0x2c6>
 801130a:	2a6e      	cmp	r2, #110	; 0x6e
 801130c:	e7db      	b.n	80112c6 <_strtod_l+0x30e>
 801130e:	4990      	ldr	r1, [pc, #576]	; (8011550 <_strtod_l+0x598>)
 8011310:	a817      	add	r0, sp, #92	; 0x5c
 8011312:	f001 fec9 	bl	80130a8 <__match>
 8011316:	2800      	cmp	r0, #0
 8011318:	f43f aeb0 	beq.w	801107c <_strtod_l+0xc4>
 801131c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801131e:	498d      	ldr	r1, [pc, #564]	; (8011554 <_strtod_l+0x59c>)
 8011320:	3b01      	subs	r3, #1
 8011322:	a817      	add	r0, sp, #92	; 0x5c
 8011324:	9317      	str	r3, [sp, #92]	; 0x5c
 8011326:	f001 febf 	bl	80130a8 <__match>
 801132a:	b910      	cbnz	r0, 8011332 <_strtod_l+0x37a>
 801132c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801132e:	3301      	adds	r3, #1
 8011330:	9317      	str	r3, [sp, #92]	; 0x5c
 8011332:	f8df b230 	ldr.w	fp, [pc, #560]	; 8011564 <_strtod_l+0x5ac>
 8011336:	f04f 0a00 	mov.w	sl, #0
 801133a:	e681      	b.n	8011040 <_strtod_l+0x88>
 801133c:	4886      	ldr	r0, [pc, #536]	; (8011558 <_strtod_l+0x5a0>)
 801133e:	f003 fb37 	bl	80149b0 <nan>
 8011342:	ec5b ab10 	vmov	sl, fp, d0
 8011346:	e67b      	b.n	8011040 <_strtod_l+0x88>
 8011348:	9b05      	ldr	r3, [sp, #20]
 801134a:	9807      	ldr	r0, [sp, #28]
 801134c:	1af3      	subs	r3, r6, r3
 801134e:	2f00      	cmp	r7, #0
 8011350:	bf08      	it	eq
 8011352:	462f      	moveq	r7, r5
 8011354:	2d10      	cmp	r5, #16
 8011356:	9306      	str	r3, [sp, #24]
 8011358:	46a8      	mov	r8, r5
 801135a:	bfa8      	it	ge
 801135c:	f04f 0810 	movge.w	r8, #16
 8011360:	f7ef f900 	bl	8000564 <__aeabi_ui2d>
 8011364:	2d09      	cmp	r5, #9
 8011366:	4682      	mov	sl, r0
 8011368:	468b      	mov	fp, r1
 801136a:	dd13      	ble.n	8011394 <_strtod_l+0x3dc>
 801136c:	4b7b      	ldr	r3, [pc, #492]	; (801155c <_strtod_l+0x5a4>)
 801136e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8011372:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8011376:	f7ef f96f 	bl	8000658 <__aeabi_dmul>
 801137a:	4682      	mov	sl, r0
 801137c:	4648      	mov	r0, r9
 801137e:	468b      	mov	fp, r1
 8011380:	f7ef f8f0 	bl	8000564 <__aeabi_ui2d>
 8011384:	4602      	mov	r2, r0
 8011386:	460b      	mov	r3, r1
 8011388:	4650      	mov	r0, sl
 801138a:	4659      	mov	r1, fp
 801138c:	f7ee ffae 	bl	80002ec <__adddf3>
 8011390:	4682      	mov	sl, r0
 8011392:	468b      	mov	fp, r1
 8011394:	2d0f      	cmp	r5, #15
 8011396:	dc38      	bgt.n	801140a <_strtod_l+0x452>
 8011398:	9b06      	ldr	r3, [sp, #24]
 801139a:	2b00      	cmp	r3, #0
 801139c:	f43f ae50 	beq.w	8011040 <_strtod_l+0x88>
 80113a0:	dd24      	ble.n	80113ec <_strtod_l+0x434>
 80113a2:	2b16      	cmp	r3, #22
 80113a4:	dc0b      	bgt.n	80113be <_strtod_l+0x406>
 80113a6:	496d      	ldr	r1, [pc, #436]	; (801155c <_strtod_l+0x5a4>)
 80113a8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80113ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 80113b0:	4652      	mov	r2, sl
 80113b2:	465b      	mov	r3, fp
 80113b4:	f7ef f950 	bl	8000658 <__aeabi_dmul>
 80113b8:	4682      	mov	sl, r0
 80113ba:	468b      	mov	fp, r1
 80113bc:	e640      	b.n	8011040 <_strtod_l+0x88>
 80113be:	9a06      	ldr	r2, [sp, #24]
 80113c0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80113c4:	4293      	cmp	r3, r2
 80113c6:	db20      	blt.n	801140a <_strtod_l+0x452>
 80113c8:	4c64      	ldr	r4, [pc, #400]	; (801155c <_strtod_l+0x5a4>)
 80113ca:	f1c5 050f 	rsb	r5, r5, #15
 80113ce:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80113d2:	4652      	mov	r2, sl
 80113d4:	465b      	mov	r3, fp
 80113d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80113da:	f7ef f93d 	bl	8000658 <__aeabi_dmul>
 80113de:	9b06      	ldr	r3, [sp, #24]
 80113e0:	1b5d      	subs	r5, r3, r5
 80113e2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80113e6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80113ea:	e7e3      	b.n	80113b4 <_strtod_l+0x3fc>
 80113ec:	9b06      	ldr	r3, [sp, #24]
 80113ee:	3316      	adds	r3, #22
 80113f0:	db0b      	blt.n	801140a <_strtod_l+0x452>
 80113f2:	9b05      	ldr	r3, [sp, #20]
 80113f4:	1b9e      	subs	r6, r3, r6
 80113f6:	4b59      	ldr	r3, [pc, #356]	; (801155c <_strtod_l+0x5a4>)
 80113f8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 80113fc:	e9d6 2300 	ldrd	r2, r3, [r6]
 8011400:	4650      	mov	r0, sl
 8011402:	4659      	mov	r1, fp
 8011404:	f7ef fa52 	bl	80008ac <__aeabi_ddiv>
 8011408:	e7d6      	b.n	80113b8 <_strtod_l+0x400>
 801140a:	9b06      	ldr	r3, [sp, #24]
 801140c:	eba5 0808 	sub.w	r8, r5, r8
 8011410:	4498      	add	r8, r3
 8011412:	f1b8 0f00 	cmp.w	r8, #0
 8011416:	dd74      	ble.n	8011502 <_strtod_l+0x54a>
 8011418:	f018 030f 	ands.w	r3, r8, #15
 801141c:	d00a      	beq.n	8011434 <_strtod_l+0x47c>
 801141e:	494f      	ldr	r1, [pc, #316]	; (801155c <_strtod_l+0x5a4>)
 8011420:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8011424:	4652      	mov	r2, sl
 8011426:	465b      	mov	r3, fp
 8011428:	e9d1 0100 	ldrd	r0, r1, [r1]
 801142c:	f7ef f914 	bl	8000658 <__aeabi_dmul>
 8011430:	4682      	mov	sl, r0
 8011432:	468b      	mov	fp, r1
 8011434:	f038 080f 	bics.w	r8, r8, #15
 8011438:	d04f      	beq.n	80114da <_strtod_l+0x522>
 801143a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 801143e:	dd22      	ble.n	8011486 <_strtod_l+0x4ce>
 8011440:	2500      	movs	r5, #0
 8011442:	462e      	mov	r6, r5
 8011444:	9507      	str	r5, [sp, #28]
 8011446:	9505      	str	r5, [sp, #20]
 8011448:	2322      	movs	r3, #34	; 0x22
 801144a:	f8df b118 	ldr.w	fp, [pc, #280]	; 8011564 <_strtod_l+0x5ac>
 801144e:	6023      	str	r3, [r4, #0]
 8011450:	f04f 0a00 	mov.w	sl, #0
 8011454:	9b07      	ldr	r3, [sp, #28]
 8011456:	2b00      	cmp	r3, #0
 8011458:	f43f adf2 	beq.w	8011040 <_strtod_l+0x88>
 801145c:	9918      	ldr	r1, [sp, #96]	; 0x60
 801145e:	4620      	mov	r0, r4
 8011460:	f001 ff42 	bl	80132e8 <_Bfree>
 8011464:	9905      	ldr	r1, [sp, #20]
 8011466:	4620      	mov	r0, r4
 8011468:	f001 ff3e 	bl	80132e8 <_Bfree>
 801146c:	4631      	mov	r1, r6
 801146e:	4620      	mov	r0, r4
 8011470:	f001 ff3a 	bl	80132e8 <_Bfree>
 8011474:	9907      	ldr	r1, [sp, #28]
 8011476:	4620      	mov	r0, r4
 8011478:	f001 ff36 	bl	80132e8 <_Bfree>
 801147c:	4629      	mov	r1, r5
 801147e:	4620      	mov	r0, r4
 8011480:	f001 ff32 	bl	80132e8 <_Bfree>
 8011484:	e5dc      	b.n	8011040 <_strtod_l+0x88>
 8011486:	4b36      	ldr	r3, [pc, #216]	; (8011560 <_strtod_l+0x5a8>)
 8011488:	9304      	str	r3, [sp, #16]
 801148a:	2300      	movs	r3, #0
 801148c:	ea4f 1828 	mov.w	r8, r8, asr #4
 8011490:	4650      	mov	r0, sl
 8011492:	4659      	mov	r1, fp
 8011494:	4699      	mov	r9, r3
 8011496:	f1b8 0f01 	cmp.w	r8, #1
 801149a:	dc21      	bgt.n	80114e0 <_strtod_l+0x528>
 801149c:	b10b      	cbz	r3, 80114a2 <_strtod_l+0x4ea>
 801149e:	4682      	mov	sl, r0
 80114a0:	468b      	mov	fp, r1
 80114a2:	4b2f      	ldr	r3, [pc, #188]	; (8011560 <_strtod_l+0x5a8>)
 80114a4:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80114a8:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80114ac:	4652      	mov	r2, sl
 80114ae:	465b      	mov	r3, fp
 80114b0:	e9d9 0100 	ldrd	r0, r1, [r9]
 80114b4:	f7ef f8d0 	bl	8000658 <__aeabi_dmul>
 80114b8:	4b2a      	ldr	r3, [pc, #168]	; (8011564 <_strtod_l+0x5ac>)
 80114ba:	460a      	mov	r2, r1
 80114bc:	400b      	ands	r3, r1
 80114be:	492a      	ldr	r1, [pc, #168]	; (8011568 <_strtod_l+0x5b0>)
 80114c0:	428b      	cmp	r3, r1
 80114c2:	4682      	mov	sl, r0
 80114c4:	d8bc      	bhi.n	8011440 <_strtod_l+0x488>
 80114c6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80114ca:	428b      	cmp	r3, r1
 80114cc:	bf86      	itte	hi
 80114ce:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 801156c <_strtod_l+0x5b4>
 80114d2:	f04f 3aff 	movhi.w	sl, #4294967295
 80114d6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80114da:	2300      	movs	r3, #0
 80114dc:	9304      	str	r3, [sp, #16]
 80114de:	e084      	b.n	80115ea <_strtod_l+0x632>
 80114e0:	f018 0f01 	tst.w	r8, #1
 80114e4:	d005      	beq.n	80114f2 <_strtod_l+0x53a>
 80114e6:	9b04      	ldr	r3, [sp, #16]
 80114e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114ec:	f7ef f8b4 	bl	8000658 <__aeabi_dmul>
 80114f0:	2301      	movs	r3, #1
 80114f2:	9a04      	ldr	r2, [sp, #16]
 80114f4:	3208      	adds	r2, #8
 80114f6:	f109 0901 	add.w	r9, r9, #1
 80114fa:	ea4f 0868 	mov.w	r8, r8, asr #1
 80114fe:	9204      	str	r2, [sp, #16]
 8011500:	e7c9      	b.n	8011496 <_strtod_l+0x4de>
 8011502:	d0ea      	beq.n	80114da <_strtod_l+0x522>
 8011504:	f1c8 0800 	rsb	r8, r8, #0
 8011508:	f018 020f 	ands.w	r2, r8, #15
 801150c:	d00a      	beq.n	8011524 <_strtod_l+0x56c>
 801150e:	4b13      	ldr	r3, [pc, #76]	; (801155c <_strtod_l+0x5a4>)
 8011510:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011514:	4650      	mov	r0, sl
 8011516:	4659      	mov	r1, fp
 8011518:	e9d3 2300 	ldrd	r2, r3, [r3]
 801151c:	f7ef f9c6 	bl	80008ac <__aeabi_ddiv>
 8011520:	4682      	mov	sl, r0
 8011522:	468b      	mov	fp, r1
 8011524:	ea5f 1828 	movs.w	r8, r8, asr #4
 8011528:	d0d7      	beq.n	80114da <_strtod_l+0x522>
 801152a:	f1b8 0f1f 	cmp.w	r8, #31
 801152e:	dd1f      	ble.n	8011570 <_strtod_l+0x5b8>
 8011530:	2500      	movs	r5, #0
 8011532:	462e      	mov	r6, r5
 8011534:	9507      	str	r5, [sp, #28]
 8011536:	9505      	str	r5, [sp, #20]
 8011538:	2322      	movs	r3, #34	; 0x22
 801153a:	f04f 0a00 	mov.w	sl, #0
 801153e:	f04f 0b00 	mov.w	fp, #0
 8011542:	6023      	str	r3, [r4, #0]
 8011544:	e786      	b.n	8011454 <_strtod_l+0x49c>
 8011546:	bf00      	nop
 8011548:	080168c9 	.word	0x080168c9
 801154c:	08016908 	.word	0x08016908
 8011550:	080168c1 	.word	0x080168c1
 8011554:	08016afc 	.word	0x08016afc
 8011558:	080169f7 	.word	0x080169f7
 801155c:	08016c70 	.word	0x08016c70
 8011560:	08016c48 	.word	0x08016c48
 8011564:	7ff00000 	.word	0x7ff00000
 8011568:	7ca00000 	.word	0x7ca00000
 801156c:	7fefffff 	.word	0x7fefffff
 8011570:	f018 0310 	ands.w	r3, r8, #16
 8011574:	bf18      	it	ne
 8011576:	236a      	movne	r3, #106	; 0x6a
 8011578:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8011928 <_strtod_l+0x970>
 801157c:	9304      	str	r3, [sp, #16]
 801157e:	4650      	mov	r0, sl
 8011580:	4659      	mov	r1, fp
 8011582:	2300      	movs	r3, #0
 8011584:	f018 0f01 	tst.w	r8, #1
 8011588:	d004      	beq.n	8011594 <_strtod_l+0x5dc>
 801158a:	e9d9 2300 	ldrd	r2, r3, [r9]
 801158e:	f7ef f863 	bl	8000658 <__aeabi_dmul>
 8011592:	2301      	movs	r3, #1
 8011594:	ea5f 0868 	movs.w	r8, r8, asr #1
 8011598:	f109 0908 	add.w	r9, r9, #8
 801159c:	d1f2      	bne.n	8011584 <_strtod_l+0x5cc>
 801159e:	b10b      	cbz	r3, 80115a4 <_strtod_l+0x5ec>
 80115a0:	4682      	mov	sl, r0
 80115a2:	468b      	mov	fp, r1
 80115a4:	9b04      	ldr	r3, [sp, #16]
 80115a6:	b1c3      	cbz	r3, 80115da <_strtod_l+0x622>
 80115a8:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80115ac:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80115b0:	2b00      	cmp	r3, #0
 80115b2:	4659      	mov	r1, fp
 80115b4:	dd11      	ble.n	80115da <_strtod_l+0x622>
 80115b6:	2b1f      	cmp	r3, #31
 80115b8:	f340 8124 	ble.w	8011804 <_strtod_l+0x84c>
 80115bc:	2b34      	cmp	r3, #52	; 0x34
 80115be:	bfde      	ittt	le
 80115c0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80115c4:	f04f 33ff 	movle.w	r3, #4294967295
 80115c8:	fa03 f202 	lslle.w	r2, r3, r2
 80115cc:	f04f 0a00 	mov.w	sl, #0
 80115d0:	bfcc      	ite	gt
 80115d2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80115d6:	ea02 0b01 	andle.w	fp, r2, r1
 80115da:	2200      	movs	r2, #0
 80115dc:	2300      	movs	r3, #0
 80115de:	4650      	mov	r0, sl
 80115e0:	4659      	mov	r1, fp
 80115e2:	f7ef faa1 	bl	8000b28 <__aeabi_dcmpeq>
 80115e6:	2800      	cmp	r0, #0
 80115e8:	d1a2      	bne.n	8011530 <_strtod_l+0x578>
 80115ea:	9b07      	ldr	r3, [sp, #28]
 80115ec:	9300      	str	r3, [sp, #0]
 80115ee:	9908      	ldr	r1, [sp, #32]
 80115f0:	462b      	mov	r3, r5
 80115f2:	463a      	mov	r2, r7
 80115f4:	4620      	mov	r0, r4
 80115f6:	f001 fedf 	bl	80133b8 <__s2b>
 80115fa:	9007      	str	r0, [sp, #28]
 80115fc:	2800      	cmp	r0, #0
 80115fe:	f43f af1f 	beq.w	8011440 <_strtod_l+0x488>
 8011602:	9b05      	ldr	r3, [sp, #20]
 8011604:	1b9e      	subs	r6, r3, r6
 8011606:	9b06      	ldr	r3, [sp, #24]
 8011608:	2b00      	cmp	r3, #0
 801160a:	bfb4      	ite	lt
 801160c:	4633      	movlt	r3, r6
 801160e:	2300      	movge	r3, #0
 8011610:	930c      	str	r3, [sp, #48]	; 0x30
 8011612:	9b06      	ldr	r3, [sp, #24]
 8011614:	2500      	movs	r5, #0
 8011616:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801161a:	9312      	str	r3, [sp, #72]	; 0x48
 801161c:	462e      	mov	r6, r5
 801161e:	9b07      	ldr	r3, [sp, #28]
 8011620:	4620      	mov	r0, r4
 8011622:	6859      	ldr	r1, [r3, #4]
 8011624:	f001 fe20 	bl	8013268 <_Balloc>
 8011628:	9005      	str	r0, [sp, #20]
 801162a:	2800      	cmp	r0, #0
 801162c:	f43f af0c 	beq.w	8011448 <_strtod_l+0x490>
 8011630:	9b07      	ldr	r3, [sp, #28]
 8011632:	691a      	ldr	r2, [r3, #16]
 8011634:	3202      	adds	r2, #2
 8011636:	f103 010c 	add.w	r1, r3, #12
 801163a:	0092      	lsls	r2, r2, #2
 801163c:	300c      	adds	r0, #12
 801163e:	f7fe fd6d 	bl	801011c <memcpy>
 8011642:	ec4b ab10 	vmov	d0, sl, fp
 8011646:	aa1a      	add	r2, sp, #104	; 0x68
 8011648:	a919      	add	r1, sp, #100	; 0x64
 801164a:	4620      	mov	r0, r4
 801164c:	f002 f9fa 	bl	8013a44 <__d2b>
 8011650:	ec4b ab18 	vmov	d8, sl, fp
 8011654:	9018      	str	r0, [sp, #96]	; 0x60
 8011656:	2800      	cmp	r0, #0
 8011658:	f43f aef6 	beq.w	8011448 <_strtod_l+0x490>
 801165c:	2101      	movs	r1, #1
 801165e:	4620      	mov	r0, r4
 8011660:	f001 ff44 	bl	80134ec <__i2b>
 8011664:	4606      	mov	r6, r0
 8011666:	2800      	cmp	r0, #0
 8011668:	f43f aeee 	beq.w	8011448 <_strtod_l+0x490>
 801166c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801166e:	9904      	ldr	r1, [sp, #16]
 8011670:	2b00      	cmp	r3, #0
 8011672:	bfab      	itete	ge
 8011674:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8011676:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8011678:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 801167a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 801167e:	bfac      	ite	ge
 8011680:	eb03 0902 	addge.w	r9, r3, r2
 8011684:	1ad7      	sublt	r7, r2, r3
 8011686:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8011688:	eba3 0801 	sub.w	r8, r3, r1
 801168c:	4490      	add	r8, r2
 801168e:	4ba1      	ldr	r3, [pc, #644]	; (8011914 <_strtod_l+0x95c>)
 8011690:	f108 38ff 	add.w	r8, r8, #4294967295
 8011694:	4598      	cmp	r8, r3
 8011696:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801169a:	f280 80c7 	bge.w	801182c <_strtod_l+0x874>
 801169e:	eba3 0308 	sub.w	r3, r3, r8
 80116a2:	2b1f      	cmp	r3, #31
 80116a4:	eba2 0203 	sub.w	r2, r2, r3
 80116a8:	f04f 0101 	mov.w	r1, #1
 80116ac:	f300 80b1 	bgt.w	8011812 <_strtod_l+0x85a>
 80116b0:	fa01 f303 	lsl.w	r3, r1, r3
 80116b4:	930d      	str	r3, [sp, #52]	; 0x34
 80116b6:	2300      	movs	r3, #0
 80116b8:	9308      	str	r3, [sp, #32]
 80116ba:	eb09 0802 	add.w	r8, r9, r2
 80116be:	9b04      	ldr	r3, [sp, #16]
 80116c0:	45c1      	cmp	r9, r8
 80116c2:	4417      	add	r7, r2
 80116c4:	441f      	add	r7, r3
 80116c6:	464b      	mov	r3, r9
 80116c8:	bfa8      	it	ge
 80116ca:	4643      	movge	r3, r8
 80116cc:	42bb      	cmp	r3, r7
 80116ce:	bfa8      	it	ge
 80116d0:	463b      	movge	r3, r7
 80116d2:	2b00      	cmp	r3, #0
 80116d4:	bfc2      	ittt	gt
 80116d6:	eba8 0803 	subgt.w	r8, r8, r3
 80116da:	1aff      	subgt	r7, r7, r3
 80116dc:	eba9 0903 	subgt.w	r9, r9, r3
 80116e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80116e2:	2b00      	cmp	r3, #0
 80116e4:	dd17      	ble.n	8011716 <_strtod_l+0x75e>
 80116e6:	4631      	mov	r1, r6
 80116e8:	461a      	mov	r2, r3
 80116ea:	4620      	mov	r0, r4
 80116ec:	f001 ffbe 	bl	801366c <__pow5mult>
 80116f0:	4606      	mov	r6, r0
 80116f2:	2800      	cmp	r0, #0
 80116f4:	f43f aea8 	beq.w	8011448 <_strtod_l+0x490>
 80116f8:	4601      	mov	r1, r0
 80116fa:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80116fc:	4620      	mov	r0, r4
 80116fe:	f001 ff0b 	bl	8013518 <__multiply>
 8011702:	900b      	str	r0, [sp, #44]	; 0x2c
 8011704:	2800      	cmp	r0, #0
 8011706:	f43f ae9f 	beq.w	8011448 <_strtod_l+0x490>
 801170a:	9918      	ldr	r1, [sp, #96]	; 0x60
 801170c:	4620      	mov	r0, r4
 801170e:	f001 fdeb 	bl	80132e8 <_Bfree>
 8011712:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011714:	9318      	str	r3, [sp, #96]	; 0x60
 8011716:	f1b8 0f00 	cmp.w	r8, #0
 801171a:	f300 808c 	bgt.w	8011836 <_strtod_l+0x87e>
 801171e:	9b06      	ldr	r3, [sp, #24]
 8011720:	2b00      	cmp	r3, #0
 8011722:	dd08      	ble.n	8011736 <_strtod_l+0x77e>
 8011724:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8011726:	9905      	ldr	r1, [sp, #20]
 8011728:	4620      	mov	r0, r4
 801172a:	f001 ff9f 	bl	801366c <__pow5mult>
 801172e:	9005      	str	r0, [sp, #20]
 8011730:	2800      	cmp	r0, #0
 8011732:	f43f ae89 	beq.w	8011448 <_strtod_l+0x490>
 8011736:	2f00      	cmp	r7, #0
 8011738:	dd08      	ble.n	801174c <_strtod_l+0x794>
 801173a:	9905      	ldr	r1, [sp, #20]
 801173c:	463a      	mov	r2, r7
 801173e:	4620      	mov	r0, r4
 8011740:	f001 ffee 	bl	8013720 <__lshift>
 8011744:	9005      	str	r0, [sp, #20]
 8011746:	2800      	cmp	r0, #0
 8011748:	f43f ae7e 	beq.w	8011448 <_strtod_l+0x490>
 801174c:	f1b9 0f00 	cmp.w	r9, #0
 8011750:	dd08      	ble.n	8011764 <_strtod_l+0x7ac>
 8011752:	4631      	mov	r1, r6
 8011754:	464a      	mov	r2, r9
 8011756:	4620      	mov	r0, r4
 8011758:	f001 ffe2 	bl	8013720 <__lshift>
 801175c:	4606      	mov	r6, r0
 801175e:	2800      	cmp	r0, #0
 8011760:	f43f ae72 	beq.w	8011448 <_strtod_l+0x490>
 8011764:	9a05      	ldr	r2, [sp, #20]
 8011766:	9918      	ldr	r1, [sp, #96]	; 0x60
 8011768:	4620      	mov	r0, r4
 801176a:	f002 f865 	bl	8013838 <__mdiff>
 801176e:	4605      	mov	r5, r0
 8011770:	2800      	cmp	r0, #0
 8011772:	f43f ae69 	beq.w	8011448 <_strtod_l+0x490>
 8011776:	68c3      	ldr	r3, [r0, #12]
 8011778:	930b      	str	r3, [sp, #44]	; 0x2c
 801177a:	2300      	movs	r3, #0
 801177c:	60c3      	str	r3, [r0, #12]
 801177e:	4631      	mov	r1, r6
 8011780:	f002 f83e 	bl	8013800 <__mcmp>
 8011784:	2800      	cmp	r0, #0
 8011786:	da60      	bge.n	801184a <_strtod_l+0x892>
 8011788:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801178a:	ea53 030a 	orrs.w	r3, r3, sl
 801178e:	f040 8082 	bne.w	8011896 <_strtod_l+0x8de>
 8011792:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011796:	2b00      	cmp	r3, #0
 8011798:	d17d      	bne.n	8011896 <_strtod_l+0x8de>
 801179a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801179e:	0d1b      	lsrs	r3, r3, #20
 80117a0:	051b      	lsls	r3, r3, #20
 80117a2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80117a6:	d976      	bls.n	8011896 <_strtod_l+0x8de>
 80117a8:	696b      	ldr	r3, [r5, #20]
 80117aa:	b913      	cbnz	r3, 80117b2 <_strtod_l+0x7fa>
 80117ac:	692b      	ldr	r3, [r5, #16]
 80117ae:	2b01      	cmp	r3, #1
 80117b0:	dd71      	ble.n	8011896 <_strtod_l+0x8de>
 80117b2:	4629      	mov	r1, r5
 80117b4:	2201      	movs	r2, #1
 80117b6:	4620      	mov	r0, r4
 80117b8:	f001 ffb2 	bl	8013720 <__lshift>
 80117bc:	4631      	mov	r1, r6
 80117be:	4605      	mov	r5, r0
 80117c0:	f002 f81e 	bl	8013800 <__mcmp>
 80117c4:	2800      	cmp	r0, #0
 80117c6:	dd66      	ble.n	8011896 <_strtod_l+0x8de>
 80117c8:	9904      	ldr	r1, [sp, #16]
 80117ca:	4a53      	ldr	r2, [pc, #332]	; (8011918 <_strtod_l+0x960>)
 80117cc:	465b      	mov	r3, fp
 80117ce:	2900      	cmp	r1, #0
 80117d0:	f000 8081 	beq.w	80118d6 <_strtod_l+0x91e>
 80117d4:	ea02 010b 	and.w	r1, r2, fp
 80117d8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80117dc:	dc7b      	bgt.n	80118d6 <_strtod_l+0x91e>
 80117de:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80117e2:	f77f aea9 	ble.w	8011538 <_strtod_l+0x580>
 80117e6:	4b4d      	ldr	r3, [pc, #308]	; (801191c <_strtod_l+0x964>)
 80117e8:	4650      	mov	r0, sl
 80117ea:	4659      	mov	r1, fp
 80117ec:	2200      	movs	r2, #0
 80117ee:	f7ee ff33 	bl	8000658 <__aeabi_dmul>
 80117f2:	460b      	mov	r3, r1
 80117f4:	4303      	orrs	r3, r0
 80117f6:	bf08      	it	eq
 80117f8:	2322      	moveq	r3, #34	; 0x22
 80117fa:	4682      	mov	sl, r0
 80117fc:	468b      	mov	fp, r1
 80117fe:	bf08      	it	eq
 8011800:	6023      	streq	r3, [r4, #0]
 8011802:	e62b      	b.n	801145c <_strtod_l+0x4a4>
 8011804:	f04f 32ff 	mov.w	r2, #4294967295
 8011808:	fa02 f303 	lsl.w	r3, r2, r3
 801180c:	ea03 0a0a 	and.w	sl, r3, sl
 8011810:	e6e3      	b.n	80115da <_strtod_l+0x622>
 8011812:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8011816:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 801181a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 801181e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8011822:	fa01 f308 	lsl.w	r3, r1, r8
 8011826:	9308      	str	r3, [sp, #32]
 8011828:	910d      	str	r1, [sp, #52]	; 0x34
 801182a:	e746      	b.n	80116ba <_strtod_l+0x702>
 801182c:	2300      	movs	r3, #0
 801182e:	9308      	str	r3, [sp, #32]
 8011830:	2301      	movs	r3, #1
 8011832:	930d      	str	r3, [sp, #52]	; 0x34
 8011834:	e741      	b.n	80116ba <_strtod_l+0x702>
 8011836:	9918      	ldr	r1, [sp, #96]	; 0x60
 8011838:	4642      	mov	r2, r8
 801183a:	4620      	mov	r0, r4
 801183c:	f001 ff70 	bl	8013720 <__lshift>
 8011840:	9018      	str	r0, [sp, #96]	; 0x60
 8011842:	2800      	cmp	r0, #0
 8011844:	f47f af6b 	bne.w	801171e <_strtod_l+0x766>
 8011848:	e5fe      	b.n	8011448 <_strtod_l+0x490>
 801184a:	465f      	mov	r7, fp
 801184c:	d16e      	bne.n	801192c <_strtod_l+0x974>
 801184e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011850:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011854:	b342      	cbz	r2, 80118a8 <_strtod_l+0x8f0>
 8011856:	4a32      	ldr	r2, [pc, #200]	; (8011920 <_strtod_l+0x968>)
 8011858:	4293      	cmp	r3, r2
 801185a:	d128      	bne.n	80118ae <_strtod_l+0x8f6>
 801185c:	9b04      	ldr	r3, [sp, #16]
 801185e:	4651      	mov	r1, sl
 8011860:	b1eb      	cbz	r3, 801189e <_strtod_l+0x8e6>
 8011862:	4b2d      	ldr	r3, [pc, #180]	; (8011918 <_strtod_l+0x960>)
 8011864:	403b      	ands	r3, r7
 8011866:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801186a:	f04f 32ff 	mov.w	r2, #4294967295
 801186e:	d819      	bhi.n	80118a4 <_strtod_l+0x8ec>
 8011870:	0d1b      	lsrs	r3, r3, #20
 8011872:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8011876:	fa02 f303 	lsl.w	r3, r2, r3
 801187a:	4299      	cmp	r1, r3
 801187c:	d117      	bne.n	80118ae <_strtod_l+0x8f6>
 801187e:	4b29      	ldr	r3, [pc, #164]	; (8011924 <_strtod_l+0x96c>)
 8011880:	429f      	cmp	r7, r3
 8011882:	d102      	bne.n	801188a <_strtod_l+0x8d2>
 8011884:	3101      	adds	r1, #1
 8011886:	f43f addf 	beq.w	8011448 <_strtod_l+0x490>
 801188a:	4b23      	ldr	r3, [pc, #140]	; (8011918 <_strtod_l+0x960>)
 801188c:	403b      	ands	r3, r7
 801188e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8011892:	f04f 0a00 	mov.w	sl, #0
 8011896:	9b04      	ldr	r3, [sp, #16]
 8011898:	2b00      	cmp	r3, #0
 801189a:	d1a4      	bne.n	80117e6 <_strtod_l+0x82e>
 801189c:	e5de      	b.n	801145c <_strtod_l+0x4a4>
 801189e:	f04f 33ff 	mov.w	r3, #4294967295
 80118a2:	e7ea      	b.n	801187a <_strtod_l+0x8c2>
 80118a4:	4613      	mov	r3, r2
 80118a6:	e7e8      	b.n	801187a <_strtod_l+0x8c2>
 80118a8:	ea53 030a 	orrs.w	r3, r3, sl
 80118ac:	d08c      	beq.n	80117c8 <_strtod_l+0x810>
 80118ae:	9b08      	ldr	r3, [sp, #32]
 80118b0:	b1db      	cbz	r3, 80118ea <_strtod_l+0x932>
 80118b2:	423b      	tst	r3, r7
 80118b4:	d0ef      	beq.n	8011896 <_strtod_l+0x8de>
 80118b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80118b8:	9a04      	ldr	r2, [sp, #16]
 80118ba:	4650      	mov	r0, sl
 80118bc:	4659      	mov	r1, fp
 80118be:	b1c3      	cbz	r3, 80118f2 <_strtod_l+0x93a>
 80118c0:	f7ff fb5b 	bl	8010f7a <sulp>
 80118c4:	4602      	mov	r2, r0
 80118c6:	460b      	mov	r3, r1
 80118c8:	ec51 0b18 	vmov	r0, r1, d8
 80118cc:	f7ee fd0e 	bl	80002ec <__adddf3>
 80118d0:	4682      	mov	sl, r0
 80118d2:	468b      	mov	fp, r1
 80118d4:	e7df      	b.n	8011896 <_strtod_l+0x8de>
 80118d6:	4013      	ands	r3, r2
 80118d8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80118dc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80118e0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80118e4:	f04f 3aff 	mov.w	sl, #4294967295
 80118e8:	e7d5      	b.n	8011896 <_strtod_l+0x8de>
 80118ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80118ec:	ea13 0f0a 	tst.w	r3, sl
 80118f0:	e7e0      	b.n	80118b4 <_strtod_l+0x8fc>
 80118f2:	f7ff fb42 	bl	8010f7a <sulp>
 80118f6:	4602      	mov	r2, r0
 80118f8:	460b      	mov	r3, r1
 80118fa:	ec51 0b18 	vmov	r0, r1, d8
 80118fe:	f7ee fcf3 	bl	80002e8 <__aeabi_dsub>
 8011902:	2200      	movs	r2, #0
 8011904:	2300      	movs	r3, #0
 8011906:	4682      	mov	sl, r0
 8011908:	468b      	mov	fp, r1
 801190a:	f7ef f90d 	bl	8000b28 <__aeabi_dcmpeq>
 801190e:	2800      	cmp	r0, #0
 8011910:	d0c1      	beq.n	8011896 <_strtod_l+0x8de>
 8011912:	e611      	b.n	8011538 <_strtod_l+0x580>
 8011914:	fffffc02 	.word	0xfffffc02
 8011918:	7ff00000 	.word	0x7ff00000
 801191c:	39500000 	.word	0x39500000
 8011920:	000fffff 	.word	0x000fffff
 8011924:	7fefffff 	.word	0x7fefffff
 8011928:	08016920 	.word	0x08016920
 801192c:	4631      	mov	r1, r6
 801192e:	4628      	mov	r0, r5
 8011930:	f002 f8e4 	bl	8013afc <__ratio>
 8011934:	ec59 8b10 	vmov	r8, r9, d0
 8011938:	ee10 0a10 	vmov	r0, s0
 801193c:	2200      	movs	r2, #0
 801193e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8011942:	4649      	mov	r1, r9
 8011944:	f7ef f904 	bl	8000b50 <__aeabi_dcmple>
 8011948:	2800      	cmp	r0, #0
 801194a:	d07a      	beq.n	8011a42 <_strtod_l+0xa8a>
 801194c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801194e:	2b00      	cmp	r3, #0
 8011950:	d04a      	beq.n	80119e8 <_strtod_l+0xa30>
 8011952:	4b95      	ldr	r3, [pc, #596]	; (8011ba8 <_strtod_l+0xbf0>)
 8011954:	2200      	movs	r2, #0
 8011956:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801195a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8011ba8 <_strtod_l+0xbf0>
 801195e:	f04f 0800 	mov.w	r8, #0
 8011962:	4b92      	ldr	r3, [pc, #584]	; (8011bac <_strtod_l+0xbf4>)
 8011964:	403b      	ands	r3, r7
 8011966:	930d      	str	r3, [sp, #52]	; 0x34
 8011968:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801196a:	4b91      	ldr	r3, [pc, #580]	; (8011bb0 <_strtod_l+0xbf8>)
 801196c:	429a      	cmp	r2, r3
 801196e:	f040 80b0 	bne.w	8011ad2 <_strtod_l+0xb1a>
 8011972:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8011976:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 801197a:	ec4b ab10 	vmov	d0, sl, fp
 801197e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8011982:	f001 ffe3 	bl	801394c <__ulp>
 8011986:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801198a:	ec53 2b10 	vmov	r2, r3, d0
 801198e:	f7ee fe63 	bl	8000658 <__aeabi_dmul>
 8011992:	4652      	mov	r2, sl
 8011994:	465b      	mov	r3, fp
 8011996:	f7ee fca9 	bl	80002ec <__adddf3>
 801199a:	460b      	mov	r3, r1
 801199c:	4983      	ldr	r1, [pc, #524]	; (8011bac <_strtod_l+0xbf4>)
 801199e:	4a85      	ldr	r2, [pc, #532]	; (8011bb4 <_strtod_l+0xbfc>)
 80119a0:	4019      	ands	r1, r3
 80119a2:	4291      	cmp	r1, r2
 80119a4:	4682      	mov	sl, r0
 80119a6:	d960      	bls.n	8011a6a <_strtod_l+0xab2>
 80119a8:	ee18 3a90 	vmov	r3, s17
 80119ac:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80119b0:	4293      	cmp	r3, r2
 80119b2:	d104      	bne.n	80119be <_strtod_l+0xa06>
 80119b4:	ee18 3a10 	vmov	r3, s16
 80119b8:	3301      	adds	r3, #1
 80119ba:	f43f ad45 	beq.w	8011448 <_strtod_l+0x490>
 80119be:	f8df b200 	ldr.w	fp, [pc, #512]	; 8011bc0 <_strtod_l+0xc08>
 80119c2:	f04f 3aff 	mov.w	sl, #4294967295
 80119c6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80119c8:	4620      	mov	r0, r4
 80119ca:	f001 fc8d 	bl	80132e8 <_Bfree>
 80119ce:	9905      	ldr	r1, [sp, #20]
 80119d0:	4620      	mov	r0, r4
 80119d2:	f001 fc89 	bl	80132e8 <_Bfree>
 80119d6:	4631      	mov	r1, r6
 80119d8:	4620      	mov	r0, r4
 80119da:	f001 fc85 	bl	80132e8 <_Bfree>
 80119de:	4629      	mov	r1, r5
 80119e0:	4620      	mov	r0, r4
 80119e2:	f001 fc81 	bl	80132e8 <_Bfree>
 80119e6:	e61a      	b.n	801161e <_strtod_l+0x666>
 80119e8:	f1ba 0f00 	cmp.w	sl, #0
 80119ec:	d11b      	bne.n	8011a26 <_strtod_l+0xa6e>
 80119ee:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80119f2:	b9f3      	cbnz	r3, 8011a32 <_strtod_l+0xa7a>
 80119f4:	4b6c      	ldr	r3, [pc, #432]	; (8011ba8 <_strtod_l+0xbf0>)
 80119f6:	2200      	movs	r2, #0
 80119f8:	4640      	mov	r0, r8
 80119fa:	4649      	mov	r1, r9
 80119fc:	f7ef f89e 	bl	8000b3c <__aeabi_dcmplt>
 8011a00:	b9d0      	cbnz	r0, 8011a38 <_strtod_l+0xa80>
 8011a02:	4640      	mov	r0, r8
 8011a04:	4649      	mov	r1, r9
 8011a06:	4b6c      	ldr	r3, [pc, #432]	; (8011bb8 <_strtod_l+0xc00>)
 8011a08:	2200      	movs	r2, #0
 8011a0a:	f7ee fe25 	bl	8000658 <__aeabi_dmul>
 8011a0e:	4680      	mov	r8, r0
 8011a10:	4689      	mov	r9, r1
 8011a12:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8011a16:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8011a1a:	9315      	str	r3, [sp, #84]	; 0x54
 8011a1c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8011a20:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8011a24:	e79d      	b.n	8011962 <_strtod_l+0x9aa>
 8011a26:	f1ba 0f01 	cmp.w	sl, #1
 8011a2a:	d102      	bne.n	8011a32 <_strtod_l+0xa7a>
 8011a2c:	2f00      	cmp	r7, #0
 8011a2e:	f43f ad83 	beq.w	8011538 <_strtod_l+0x580>
 8011a32:	4b62      	ldr	r3, [pc, #392]	; (8011bbc <_strtod_l+0xc04>)
 8011a34:	2200      	movs	r2, #0
 8011a36:	e78e      	b.n	8011956 <_strtod_l+0x99e>
 8011a38:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8011bb8 <_strtod_l+0xc00>
 8011a3c:	f04f 0800 	mov.w	r8, #0
 8011a40:	e7e7      	b.n	8011a12 <_strtod_l+0xa5a>
 8011a42:	4b5d      	ldr	r3, [pc, #372]	; (8011bb8 <_strtod_l+0xc00>)
 8011a44:	4640      	mov	r0, r8
 8011a46:	4649      	mov	r1, r9
 8011a48:	2200      	movs	r2, #0
 8011a4a:	f7ee fe05 	bl	8000658 <__aeabi_dmul>
 8011a4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011a50:	4680      	mov	r8, r0
 8011a52:	4689      	mov	r9, r1
 8011a54:	b933      	cbnz	r3, 8011a64 <_strtod_l+0xaac>
 8011a56:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011a5a:	900e      	str	r0, [sp, #56]	; 0x38
 8011a5c:	930f      	str	r3, [sp, #60]	; 0x3c
 8011a5e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8011a62:	e7dd      	b.n	8011a20 <_strtod_l+0xa68>
 8011a64:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8011a68:	e7f9      	b.n	8011a5e <_strtod_l+0xaa6>
 8011a6a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8011a6e:	9b04      	ldr	r3, [sp, #16]
 8011a70:	2b00      	cmp	r3, #0
 8011a72:	d1a8      	bne.n	80119c6 <_strtod_l+0xa0e>
 8011a74:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8011a78:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011a7a:	0d1b      	lsrs	r3, r3, #20
 8011a7c:	051b      	lsls	r3, r3, #20
 8011a7e:	429a      	cmp	r2, r3
 8011a80:	d1a1      	bne.n	80119c6 <_strtod_l+0xa0e>
 8011a82:	4640      	mov	r0, r8
 8011a84:	4649      	mov	r1, r9
 8011a86:	f7ef f947 	bl	8000d18 <__aeabi_d2lz>
 8011a8a:	f7ee fdb7 	bl	80005fc <__aeabi_l2d>
 8011a8e:	4602      	mov	r2, r0
 8011a90:	460b      	mov	r3, r1
 8011a92:	4640      	mov	r0, r8
 8011a94:	4649      	mov	r1, r9
 8011a96:	f7ee fc27 	bl	80002e8 <__aeabi_dsub>
 8011a9a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011a9c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011aa0:	ea43 030a 	orr.w	r3, r3, sl
 8011aa4:	4313      	orrs	r3, r2
 8011aa6:	4680      	mov	r8, r0
 8011aa8:	4689      	mov	r9, r1
 8011aaa:	d055      	beq.n	8011b58 <_strtod_l+0xba0>
 8011aac:	a336      	add	r3, pc, #216	; (adr r3, 8011b88 <_strtod_l+0xbd0>)
 8011aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ab2:	f7ef f843 	bl	8000b3c <__aeabi_dcmplt>
 8011ab6:	2800      	cmp	r0, #0
 8011ab8:	f47f acd0 	bne.w	801145c <_strtod_l+0x4a4>
 8011abc:	a334      	add	r3, pc, #208	; (adr r3, 8011b90 <_strtod_l+0xbd8>)
 8011abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ac2:	4640      	mov	r0, r8
 8011ac4:	4649      	mov	r1, r9
 8011ac6:	f7ef f857 	bl	8000b78 <__aeabi_dcmpgt>
 8011aca:	2800      	cmp	r0, #0
 8011acc:	f43f af7b 	beq.w	80119c6 <_strtod_l+0xa0e>
 8011ad0:	e4c4      	b.n	801145c <_strtod_l+0x4a4>
 8011ad2:	9b04      	ldr	r3, [sp, #16]
 8011ad4:	b333      	cbz	r3, 8011b24 <_strtod_l+0xb6c>
 8011ad6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011ad8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8011adc:	d822      	bhi.n	8011b24 <_strtod_l+0xb6c>
 8011ade:	a32e      	add	r3, pc, #184	; (adr r3, 8011b98 <_strtod_l+0xbe0>)
 8011ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ae4:	4640      	mov	r0, r8
 8011ae6:	4649      	mov	r1, r9
 8011ae8:	f7ef f832 	bl	8000b50 <__aeabi_dcmple>
 8011aec:	b1a0      	cbz	r0, 8011b18 <_strtod_l+0xb60>
 8011aee:	4649      	mov	r1, r9
 8011af0:	4640      	mov	r0, r8
 8011af2:	f7ef f889 	bl	8000c08 <__aeabi_d2uiz>
 8011af6:	2801      	cmp	r0, #1
 8011af8:	bf38      	it	cc
 8011afa:	2001      	movcc	r0, #1
 8011afc:	f7ee fd32 	bl	8000564 <__aeabi_ui2d>
 8011b00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011b02:	4680      	mov	r8, r0
 8011b04:	4689      	mov	r9, r1
 8011b06:	bb23      	cbnz	r3, 8011b52 <_strtod_l+0xb9a>
 8011b08:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011b0c:	9010      	str	r0, [sp, #64]	; 0x40
 8011b0e:	9311      	str	r3, [sp, #68]	; 0x44
 8011b10:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8011b14:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8011b18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011b1a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011b1c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8011b20:	1a9b      	subs	r3, r3, r2
 8011b22:	9309      	str	r3, [sp, #36]	; 0x24
 8011b24:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8011b28:	eeb0 0a48 	vmov.f32	s0, s16
 8011b2c:	eef0 0a68 	vmov.f32	s1, s17
 8011b30:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8011b34:	f001 ff0a 	bl	801394c <__ulp>
 8011b38:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8011b3c:	ec53 2b10 	vmov	r2, r3, d0
 8011b40:	f7ee fd8a 	bl	8000658 <__aeabi_dmul>
 8011b44:	ec53 2b18 	vmov	r2, r3, d8
 8011b48:	f7ee fbd0 	bl	80002ec <__adddf3>
 8011b4c:	4682      	mov	sl, r0
 8011b4e:	468b      	mov	fp, r1
 8011b50:	e78d      	b.n	8011a6e <_strtod_l+0xab6>
 8011b52:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8011b56:	e7db      	b.n	8011b10 <_strtod_l+0xb58>
 8011b58:	a311      	add	r3, pc, #68	; (adr r3, 8011ba0 <_strtod_l+0xbe8>)
 8011b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b5e:	f7ee ffed 	bl	8000b3c <__aeabi_dcmplt>
 8011b62:	e7b2      	b.n	8011aca <_strtod_l+0xb12>
 8011b64:	2300      	movs	r3, #0
 8011b66:	930a      	str	r3, [sp, #40]	; 0x28
 8011b68:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8011b6a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011b6c:	6013      	str	r3, [r2, #0]
 8011b6e:	f7ff ba6b 	b.w	8011048 <_strtod_l+0x90>
 8011b72:	2a65      	cmp	r2, #101	; 0x65
 8011b74:	f43f ab5f 	beq.w	8011236 <_strtod_l+0x27e>
 8011b78:	2a45      	cmp	r2, #69	; 0x45
 8011b7a:	f43f ab5c 	beq.w	8011236 <_strtod_l+0x27e>
 8011b7e:	2301      	movs	r3, #1
 8011b80:	f7ff bb94 	b.w	80112ac <_strtod_l+0x2f4>
 8011b84:	f3af 8000 	nop.w
 8011b88:	94a03595 	.word	0x94a03595
 8011b8c:	3fdfffff 	.word	0x3fdfffff
 8011b90:	35afe535 	.word	0x35afe535
 8011b94:	3fe00000 	.word	0x3fe00000
 8011b98:	ffc00000 	.word	0xffc00000
 8011b9c:	41dfffff 	.word	0x41dfffff
 8011ba0:	94a03595 	.word	0x94a03595
 8011ba4:	3fcfffff 	.word	0x3fcfffff
 8011ba8:	3ff00000 	.word	0x3ff00000
 8011bac:	7ff00000 	.word	0x7ff00000
 8011bb0:	7fe00000 	.word	0x7fe00000
 8011bb4:	7c9fffff 	.word	0x7c9fffff
 8011bb8:	3fe00000 	.word	0x3fe00000
 8011bbc:	bff00000 	.word	0xbff00000
 8011bc0:	7fefffff 	.word	0x7fefffff

08011bc4 <_strtod_r>:
 8011bc4:	4b01      	ldr	r3, [pc, #4]	; (8011bcc <_strtod_r+0x8>)
 8011bc6:	f7ff b9f7 	b.w	8010fb8 <_strtod_l>
 8011bca:	bf00      	nop
 8011bcc:	200003f4 	.word	0x200003f4

08011bd0 <strtok>:
 8011bd0:	4b16      	ldr	r3, [pc, #88]	; (8011c2c <strtok+0x5c>)
 8011bd2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011bd4:	681e      	ldr	r6, [r3, #0]
 8011bd6:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8011bd8:	4605      	mov	r5, r0
 8011bda:	b9fc      	cbnz	r4, 8011c1c <strtok+0x4c>
 8011bdc:	2050      	movs	r0, #80	; 0x50
 8011bde:	9101      	str	r1, [sp, #4]
 8011be0:	f001 fb28 	bl	8013234 <malloc>
 8011be4:	9901      	ldr	r1, [sp, #4]
 8011be6:	65b0      	str	r0, [r6, #88]	; 0x58
 8011be8:	4602      	mov	r2, r0
 8011bea:	b920      	cbnz	r0, 8011bf6 <strtok+0x26>
 8011bec:	4b10      	ldr	r3, [pc, #64]	; (8011c30 <strtok+0x60>)
 8011bee:	4811      	ldr	r0, [pc, #68]	; (8011c34 <strtok+0x64>)
 8011bf0:	2157      	movs	r1, #87	; 0x57
 8011bf2:	f000 f8df 	bl	8011db4 <__assert_func>
 8011bf6:	e9c0 4400 	strd	r4, r4, [r0]
 8011bfa:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8011bfe:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8011c02:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8011c06:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8011c0a:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8011c0e:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8011c12:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8011c16:	6184      	str	r4, [r0, #24]
 8011c18:	7704      	strb	r4, [r0, #28]
 8011c1a:	6244      	str	r4, [r0, #36]	; 0x24
 8011c1c:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8011c1e:	2301      	movs	r3, #1
 8011c20:	4628      	mov	r0, r5
 8011c22:	b002      	add	sp, #8
 8011c24:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011c28:	f000 b806 	b.w	8011c38 <__strtok_r>
 8011c2c:	2000038c 	.word	0x2000038c
 8011c30:	08016948 	.word	0x08016948
 8011c34:	0801695f 	.word	0x0801695f

08011c38 <__strtok_r>:
 8011c38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011c3a:	b908      	cbnz	r0, 8011c40 <__strtok_r+0x8>
 8011c3c:	6810      	ldr	r0, [r2, #0]
 8011c3e:	b188      	cbz	r0, 8011c64 <__strtok_r+0x2c>
 8011c40:	4604      	mov	r4, r0
 8011c42:	4620      	mov	r0, r4
 8011c44:	f814 5b01 	ldrb.w	r5, [r4], #1
 8011c48:	460f      	mov	r7, r1
 8011c4a:	f817 6b01 	ldrb.w	r6, [r7], #1
 8011c4e:	b91e      	cbnz	r6, 8011c58 <__strtok_r+0x20>
 8011c50:	b965      	cbnz	r5, 8011c6c <__strtok_r+0x34>
 8011c52:	6015      	str	r5, [r2, #0]
 8011c54:	4628      	mov	r0, r5
 8011c56:	e005      	b.n	8011c64 <__strtok_r+0x2c>
 8011c58:	42b5      	cmp	r5, r6
 8011c5a:	d1f6      	bne.n	8011c4a <__strtok_r+0x12>
 8011c5c:	2b00      	cmp	r3, #0
 8011c5e:	d1f0      	bne.n	8011c42 <__strtok_r+0xa>
 8011c60:	6014      	str	r4, [r2, #0]
 8011c62:	7003      	strb	r3, [r0, #0]
 8011c64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011c66:	461c      	mov	r4, r3
 8011c68:	e00c      	b.n	8011c84 <__strtok_r+0x4c>
 8011c6a:	b915      	cbnz	r5, 8011c72 <__strtok_r+0x3a>
 8011c6c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8011c70:	460e      	mov	r6, r1
 8011c72:	f816 5b01 	ldrb.w	r5, [r6], #1
 8011c76:	42ab      	cmp	r3, r5
 8011c78:	d1f7      	bne.n	8011c6a <__strtok_r+0x32>
 8011c7a:	2b00      	cmp	r3, #0
 8011c7c:	d0f3      	beq.n	8011c66 <__strtok_r+0x2e>
 8011c7e:	2300      	movs	r3, #0
 8011c80:	f804 3c01 	strb.w	r3, [r4, #-1]
 8011c84:	6014      	str	r4, [r2, #0]
 8011c86:	e7ed      	b.n	8011c64 <__strtok_r+0x2c>

08011c88 <_strtol_l.constprop.0>:
 8011c88:	2b01      	cmp	r3, #1
 8011c8a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011c8e:	d001      	beq.n	8011c94 <_strtol_l.constprop.0+0xc>
 8011c90:	2b24      	cmp	r3, #36	; 0x24
 8011c92:	d906      	bls.n	8011ca2 <_strtol_l.constprop.0+0x1a>
 8011c94:	f7fe fa18 	bl	80100c8 <__errno>
 8011c98:	2316      	movs	r3, #22
 8011c9a:	6003      	str	r3, [r0, #0]
 8011c9c:	2000      	movs	r0, #0
 8011c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011ca2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8011d88 <_strtol_l.constprop.0+0x100>
 8011ca6:	460d      	mov	r5, r1
 8011ca8:	462e      	mov	r6, r5
 8011caa:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011cae:	f814 700c 	ldrb.w	r7, [r4, ip]
 8011cb2:	f017 0708 	ands.w	r7, r7, #8
 8011cb6:	d1f7      	bne.n	8011ca8 <_strtol_l.constprop.0+0x20>
 8011cb8:	2c2d      	cmp	r4, #45	; 0x2d
 8011cba:	d132      	bne.n	8011d22 <_strtol_l.constprop.0+0x9a>
 8011cbc:	782c      	ldrb	r4, [r5, #0]
 8011cbe:	2701      	movs	r7, #1
 8011cc0:	1cb5      	adds	r5, r6, #2
 8011cc2:	2b00      	cmp	r3, #0
 8011cc4:	d05b      	beq.n	8011d7e <_strtol_l.constprop.0+0xf6>
 8011cc6:	2b10      	cmp	r3, #16
 8011cc8:	d109      	bne.n	8011cde <_strtol_l.constprop.0+0x56>
 8011cca:	2c30      	cmp	r4, #48	; 0x30
 8011ccc:	d107      	bne.n	8011cde <_strtol_l.constprop.0+0x56>
 8011cce:	782c      	ldrb	r4, [r5, #0]
 8011cd0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8011cd4:	2c58      	cmp	r4, #88	; 0x58
 8011cd6:	d14d      	bne.n	8011d74 <_strtol_l.constprop.0+0xec>
 8011cd8:	786c      	ldrb	r4, [r5, #1]
 8011cda:	2310      	movs	r3, #16
 8011cdc:	3502      	adds	r5, #2
 8011cde:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8011ce2:	f108 38ff 	add.w	r8, r8, #4294967295
 8011ce6:	f04f 0c00 	mov.w	ip, #0
 8011cea:	fbb8 f9f3 	udiv	r9, r8, r3
 8011cee:	4666      	mov	r6, ip
 8011cf0:	fb03 8a19 	mls	sl, r3, r9, r8
 8011cf4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8011cf8:	f1be 0f09 	cmp.w	lr, #9
 8011cfc:	d816      	bhi.n	8011d2c <_strtol_l.constprop.0+0xa4>
 8011cfe:	4674      	mov	r4, lr
 8011d00:	42a3      	cmp	r3, r4
 8011d02:	dd24      	ble.n	8011d4e <_strtol_l.constprop.0+0xc6>
 8011d04:	f1bc 0f00 	cmp.w	ip, #0
 8011d08:	db1e      	blt.n	8011d48 <_strtol_l.constprop.0+0xc0>
 8011d0a:	45b1      	cmp	r9, r6
 8011d0c:	d31c      	bcc.n	8011d48 <_strtol_l.constprop.0+0xc0>
 8011d0e:	d101      	bne.n	8011d14 <_strtol_l.constprop.0+0x8c>
 8011d10:	45a2      	cmp	sl, r4
 8011d12:	db19      	blt.n	8011d48 <_strtol_l.constprop.0+0xc0>
 8011d14:	fb06 4603 	mla	r6, r6, r3, r4
 8011d18:	f04f 0c01 	mov.w	ip, #1
 8011d1c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011d20:	e7e8      	b.n	8011cf4 <_strtol_l.constprop.0+0x6c>
 8011d22:	2c2b      	cmp	r4, #43	; 0x2b
 8011d24:	bf04      	itt	eq
 8011d26:	782c      	ldrbeq	r4, [r5, #0]
 8011d28:	1cb5      	addeq	r5, r6, #2
 8011d2a:	e7ca      	b.n	8011cc2 <_strtol_l.constprop.0+0x3a>
 8011d2c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8011d30:	f1be 0f19 	cmp.w	lr, #25
 8011d34:	d801      	bhi.n	8011d3a <_strtol_l.constprop.0+0xb2>
 8011d36:	3c37      	subs	r4, #55	; 0x37
 8011d38:	e7e2      	b.n	8011d00 <_strtol_l.constprop.0+0x78>
 8011d3a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8011d3e:	f1be 0f19 	cmp.w	lr, #25
 8011d42:	d804      	bhi.n	8011d4e <_strtol_l.constprop.0+0xc6>
 8011d44:	3c57      	subs	r4, #87	; 0x57
 8011d46:	e7db      	b.n	8011d00 <_strtol_l.constprop.0+0x78>
 8011d48:	f04f 3cff 	mov.w	ip, #4294967295
 8011d4c:	e7e6      	b.n	8011d1c <_strtol_l.constprop.0+0x94>
 8011d4e:	f1bc 0f00 	cmp.w	ip, #0
 8011d52:	da05      	bge.n	8011d60 <_strtol_l.constprop.0+0xd8>
 8011d54:	2322      	movs	r3, #34	; 0x22
 8011d56:	6003      	str	r3, [r0, #0]
 8011d58:	4646      	mov	r6, r8
 8011d5a:	b942      	cbnz	r2, 8011d6e <_strtol_l.constprop.0+0xe6>
 8011d5c:	4630      	mov	r0, r6
 8011d5e:	e79e      	b.n	8011c9e <_strtol_l.constprop.0+0x16>
 8011d60:	b107      	cbz	r7, 8011d64 <_strtol_l.constprop.0+0xdc>
 8011d62:	4276      	negs	r6, r6
 8011d64:	2a00      	cmp	r2, #0
 8011d66:	d0f9      	beq.n	8011d5c <_strtol_l.constprop.0+0xd4>
 8011d68:	f1bc 0f00 	cmp.w	ip, #0
 8011d6c:	d000      	beq.n	8011d70 <_strtol_l.constprop.0+0xe8>
 8011d6e:	1e69      	subs	r1, r5, #1
 8011d70:	6011      	str	r1, [r2, #0]
 8011d72:	e7f3      	b.n	8011d5c <_strtol_l.constprop.0+0xd4>
 8011d74:	2430      	movs	r4, #48	; 0x30
 8011d76:	2b00      	cmp	r3, #0
 8011d78:	d1b1      	bne.n	8011cde <_strtol_l.constprop.0+0x56>
 8011d7a:	2308      	movs	r3, #8
 8011d7c:	e7af      	b.n	8011cde <_strtol_l.constprop.0+0x56>
 8011d7e:	2c30      	cmp	r4, #48	; 0x30
 8011d80:	d0a5      	beq.n	8011cce <_strtol_l.constprop.0+0x46>
 8011d82:	230a      	movs	r3, #10
 8011d84:	e7ab      	b.n	8011cde <_strtol_l.constprop.0+0x56>
 8011d86:	bf00      	nop
 8011d88:	080169f9 	.word	0x080169f9

08011d8c <_strtol_r>:
 8011d8c:	f7ff bf7c 	b.w	8011c88 <_strtol_l.constprop.0>

08011d90 <_write_r>:
 8011d90:	b538      	push	{r3, r4, r5, lr}
 8011d92:	4d07      	ldr	r5, [pc, #28]	; (8011db0 <_write_r+0x20>)
 8011d94:	4604      	mov	r4, r0
 8011d96:	4608      	mov	r0, r1
 8011d98:	4611      	mov	r1, r2
 8011d9a:	2200      	movs	r2, #0
 8011d9c:	602a      	str	r2, [r5, #0]
 8011d9e:	461a      	mov	r2, r3
 8011da0:	f7f1 f893 	bl	8002eca <_write>
 8011da4:	1c43      	adds	r3, r0, #1
 8011da6:	d102      	bne.n	8011dae <_write_r+0x1e>
 8011da8:	682b      	ldr	r3, [r5, #0]
 8011daa:	b103      	cbz	r3, 8011dae <_write_r+0x1e>
 8011dac:	6023      	str	r3, [r4, #0]
 8011dae:	bd38      	pop	{r3, r4, r5, pc}
 8011db0:	2000a194 	.word	0x2000a194

08011db4 <__assert_func>:
 8011db4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011db6:	4614      	mov	r4, r2
 8011db8:	461a      	mov	r2, r3
 8011dba:	4b09      	ldr	r3, [pc, #36]	; (8011de0 <__assert_func+0x2c>)
 8011dbc:	681b      	ldr	r3, [r3, #0]
 8011dbe:	4605      	mov	r5, r0
 8011dc0:	68d8      	ldr	r0, [r3, #12]
 8011dc2:	b14c      	cbz	r4, 8011dd8 <__assert_func+0x24>
 8011dc4:	4b07      	ldr	r3, [pc, #28]	; (8011de4 <__assert_func+0x30>)
 8011dc6:	9100      	str	r1, [sp, #0]
 8011dc8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011dcc:	4906      	ldr	r1, [pc, #24]	; (8011de8 <__assert_func+0x34>)
 8011dce:	462b      	mov	r3, r5
 8011dd0:	f000 fe98 	bl	8012b04 <fiprintf>
 8011dd4:	f002 ffcc 	bl	8014d70 <abort>
 8011dd8:	4b04      	ldr	r3, [pc, #16]	; (8011dec <__assert_func+0x38>)
 8011dda:	461c      	mov	r4, r3
 8011ddc:	e7f3      	b.n	8011dc6 <__assert_func+0x12>
 8011dde:	bf00      	nop
 8011de0:	2000038c 	.word	0x2000038c
 8011de4:	080169bc 	.word	0x080169bc
 8011de8:	080169c9 	.word	0x080169c9
 8011dec:	080169f7 	.word	0x080169f7

08011df0 <_close_r>:
 8011df0:	b538      	push	{r3, r4, r5, lr}
 8011df2:	4d06      	ldr	r5, [pc, #24]	; (8011e0c <_close_r+0x1c>)
 8011df4:	2300      	movs	r3, #0
 8011df6:	4604      	mov	r4, r0
 8011df8:	4608      	mov	r0, r1
 8011dfa:	602b      	str	r3, [r5, #0]
 8011dfc:	f7f1 f881 	bl	8002f02 <_close>
 8011e00:	1c43      	adds	r3, r0, #1
 8011e02:	d102      	bne.n	8011e0a <_close_r+0x1a>
 8011e04:	682b      	ldr	r3, [r5, #0]
 8011e06:	b103      	cbz	r3, 8011e0a <_close_r+0x1a>
 8011e08:	6023      	str	r3, [r4, #0]
 8011e0a:	bd38      	pop	{r3, r4, r5, pc}
 8011e0c:	2000a194 	.word	0x2000a194

08011e10 <quorem>:
 8011e10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e14:	6903      	ldr	r3, [r0, #16]
 8011e16:	690c      	ldr	r4, [r1, #16]
 8011e18:	42a3      	cmp	r3, r4
 8011e1a:	4607      	mov	r7, r0
 8011e1c:	f2c0 8081 	blt.w	8011f22 <quorem+0x112>
 8011e20:	3c01      	subs	r4, #1
 8011e22:	f101 0814 	add.w	r8, r1, #20
 8011e26:	f100 0514 	add.w	r5, r0, #20
 8011e2a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011e2e:	9301      	str	r3, [sp, #4]
 8011e30:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8011e34:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011e38:	3301      	adds	r3, #1
 8011e3a:	429a      	cmp	r2, r3
 8011e3c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8011e40:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8011e44:	fbb2 f6f3 	udiv	r6, r2, r3
 8011e48:	d331      	bcc.n	8011eae <quorem+0x9e>
 8011e4a:	f04f 0e00 	mov.w	lr, #0
 8011e4e:	4640      	mov	r0, r8
 8011e50:	46ac      	mov	ip, r5
 8011e52:	46f2      	mov	sl, lr
 8011e54:	f850 2b04 	ldr.w	r2, [r0], #4
 8011e58:	b293      	uxth	r3, r2
 8011e5a:	fb06 e303 	mla	r3, r6, r3, lr
 8011e5e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8011e62:	b29b      	uxth	r3, r3
 8011e64:	ebaa 0303 	sub.w	r3, sl, r3
 8011e68:	f8dc a000 	ldr.w	sl, [ip]
 8011e6c:	0c12      	lsrs	r2, r2, #16
 8011e6e:	fa13 f38a 	uxtah	r3, r3, sl
 8011e72:	fb06 e202 	mla	r2, r6, r2, lr
 8011e76:	9300      	str	r3, [sp, #0]
 8011e78:	9b00      	ldr	r3, [sp, #0]
 8011e7a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8011e7e:	b292      	uxth	r2, r2
 8011e80:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8011e84:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011e88:	f8bd 3000 	ldrh.w	r3, [sp]
 8011e8c:	4581      	cmp	r9, r0
 8011e8e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011e92:	f84c 3b04 	str.w	r3, [ip], #4
 8011e96:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8011e9a:	d2db      	bcs.n	8011e54 <quorem+0x44>
 8011e9c:	f855 300b 	ldr.w	r3, [r5, fp]
 8011ea0:	b92b      	cbnz	r3, 8011eae <quorem+0x9e>
 8011ea2:	9b01      	ldr	r3, [sp, #4]
 8011ea4:	3b04      	subs	r3, #4
 8011ea6:	429d      	cmp	r5, r3
 8011ea8:	461a      	mov	r2, r3
 8011eaa:	d32e      	bcc.n	8011f0a <quorem+0xfa>
 8011eac:	613c      	str	r4, [r7, #16]
 8011eae:	4638      	mov	r0, r7
 8011eb0:	f001 fca6 	bl	8013800 <__mcmp>
 8011eb4:	2800      	cmp	r0, #0
 8011eb6:	db24      	blt.n	8011f02 <quorem+0xf2>
 8011eb8:	3601      	adds	r6, #1
 8011eba:	4628      	mov	r0, r5
 8011ebc:	f04f 0c00 	mov.w	ip, #0
 8011ec0:	f858 2b04 	ldr.w	r2, [r8], #4
 8011ec4:	f8d0 e000 	ldr.w	lr, [r0]
 8011ec8:	b293      	uxth	r3, r2
 8011eca:	ebac 0303 	sub.w	r3, ip, r3
 8011ece:	0c12      	lsrs	r2, r2, #16
 8011ed0:	fa13 f38e 	uxtah	r3, r3, lr
 8011ed4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8011ed8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011edc:	b29b      	uxth	r3, r3
 8011ede:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011ee2:	45c1      	cmp	r9, r8
 8011ee4:	f840 3b04 	str.w	r3, [r0], #4
 8011ee8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8011eec:	d2e8      	bcs.n	8011ec0 <quorem+0xb0>
 8011eee:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011ef2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011ef6:	b922      	cbnz	r2, 8011f02 <quorem+0xf2>
 8011ef8:	3b04      	subs	r3, #4
 8011efa:	429d      	cmp	r5, r3
 8011efc:	461a      	mov	r2, r3
 8011efe:	d30a      	bcc.n	8011f16 <quorem+0x106>
 8011f00:	613c      	str	r4, [r7, #16]
 8011f02:	4630      	mov	r0, r6
 8011f04:	b003      	add	sp, #12
 8011f06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f0a:	6812      	ldr	r2, [r2, #0]
 8011f0c:	3b04      	subs	r3, #4
 8011f0e:	2a00      	cmp	r2, #0
 8011f10:	d1cc      	bne.n	8011eac <quorem+0x9c>
 8011f12:	3c01      	subs	r4, #1
 8011f14:	e7c7      	b.n	8011ea6 <quorem+0x96>
 8011f16:	6812      	ldr	r2, [r2, #0]
 8011f18:	3b04      	subs	r3, #4
 8011f1a:	2a00      	cmp	r2, #0
 8011f1c:	d1f0      	bne.n	8011f00 <quorem+0xf0>
 8011f1e:	3c01      	subs	r4, #1
 8011f20:	e7eb      	b.n	8011efa <quorem+0xea>
 8011f22:	2000      	movs	r0, #0
 8011f24:	e7ee      	b.n	8011f04 <quorem+0xf4>
	...

08011f28 <_dtoa_r>:
 8011f28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f2c:	ed2d 8b04 	vpush	{d8-d9}
 8011f30:	ec57 6b10 	vmov	r6, r7, d0
 8011f34:	b093      	sub	sp, #76	; 0x4c
 8011f36:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8011f38:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8011f3c:	9106      	str	r1, [sp, #24]
 8011f3e:	ee10 aa10 	vmov	sl, s0
 8011f42:	4604      	mov	r4, r0
 8011f44:	9209      	str	r2, [sp, #36]	; 0x24
 8011f46:	930c      	str	r3, [sp, #48]	; 0x30
 8011f48:	46bb      	mov	fp, r7
 8011f4a:	b975      	cbnz	r5, 8011f6a <_dtoa_r+0x42>
 8011f4c:	2010      	movs	r0, #16
 8011f4e:	f001 f971 	bl	8013234 <malloc>
 8011f52:	4602      	mov	r2, r0
 8011f54:	6260      	str	r0, [r4, #36]	; 0x24
 8011f56:	b920      	cbnz	r0, 8011f62 <_dtoa_r+0x3a>
 8011f58:	4ba7      	ldr	r3, [pc, #668]	; (80121f8 <_dtoa_r+0x2d0>)
 8011f5a:	21ea      	movs	r1, #234	; 0xea
 8011f5c:	48a7      	ldr	r0, [pc, #668]	; (80121fc <_dtoa_r+0x2d4>)
 8011f5e:	f7ff ff29 	bl	8011db4 <__assert_func>
 8011f62:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8011f66:	6005      	str	r5, [r0, #0]
 8011f68:	60c5      	str	r5, [r0, #12]
 8011f6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011f6c:	6819      	ldr	r1, [r3, #0]
 8011f6e:	b151      	cbz	r1, 8011f86 <_dtoa_r+0x5e>
 8011f70:	685a      	ldr	r2, [r3, #4]
 8011f72:	604a      	str	r2, [r1, #4]
 8011f74:	2301      	movs	r3, #1
 8011f76:	4093      	lsls	r3, r2
 8011f78:	608b      	str	r3, [r1, #8]
 8011f7a:	4620      	mov	r0, r4
 8011f7c:	f001 f9b4 	bl	80132e8 <_Bfree>
 8011f80:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011f82:	2200      	movs	r2, #0
 8011f84:	601a      	str	r2, [r3, #0]
 8011f86:	1e3b      	subs	r3, r7, #0
 8011f88:	bfaa      	itet	ge
 8011f8a:	2300      	movge	r3, #0
 8011f8c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8011f90:	f8c8 3000 	strge.w	r3, [r8]
 8011f94:	4b9a      	ldr	r3, [pc, #616]	; (8012200 <_dtoa_r+0x2d8>)
 8011f96:	bfbc      	itt	lt
 8011f98:	2201      	movlt	r2, #1
 8011f9a:	f8c8 2000 	strlt.w	r2, [r8]
 8011f9e:	ea33 030b 	bics.w	r3, r3, fp
 8011fa2:	d11b      	bne.n	8011fdc <_dtoa_r+0xb4>
 8011fa4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011fa6:	f242 730f 	movw	r3, #9999	; 0x270f
 8011faa:	6013      	str	r3, [r2, #0]
 8011fac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011fb0:	4333      	orrs	r3, r6
 8011fb2:	f000 8592 	beq.w	8012ada <_dtoa_r+0xbb2>
 8011fb6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011fb8:	b963      	cbnz	r3, 8011fd4 <_dtoa_r+0xac>
 8011fba:	4b92      	ldr	r3, [pc, #584]	; (8012204 <_dtoa_r+0x2dc>)
 8011fbc:	e022      	b.n	8012004 <_dtoa_r+0xdc>
 8011fbe:	4b92      	ldr	r3, [pc, #584]	; (8012208 <_dtoa_r+0x2e0>)
 8011fc0:	9301      	str	r3, [sp, #4]
 8011fc2:	3308      	adds	r3, #8
 8011fc4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8011fc6:	6013      	str	r3, [r2, #0]
 8011fc8:	9801      	ldr	r0, [sp, #4]
 8011fca:	b013      	add	sp, #76	; 0x4c
 8011fcc:	ecbd 8b04 	vpop	{d8-d9}
 8011fd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011fd4:	4b8b      	ldr	r3, [pc, #556]	; (8012204 <_dtoa_r+0x2dc>)
 8011fd6:	9301      	str	r3, [sp, #4]
 8011fd8:	3303      	adds	r3, #3
 8011fda:	e7f3      	b.n	8011fc4 <_dtoa_r+0x9c>
 8011fdc:	2200      	movs	r2, #0
 8011fde:	2300      	movs	r3, #0
 8011fe0:	4650      	mov	r0, sl
 8011fe2:	4659      	mov	r1, fp
 8011fe4:	f7ee fda0 	bl	8000b28 <__aeabi_dcmpeq>
 8011fe8:	ec4b ab19 	vmov	d9, sl, fp
 8011fec:	4680      	mov	r8, r0
 8011fee:	b158      	cbz	r0, 8012008 <_dtoa_r+0xe0>
 8011ff0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011ff2:	2301      	movs	r3, #1
 8011ff4:	6013      	str	r3, [r2, #0]
 8011ff6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011ff8:	2b00      	cmp	r3, #0
 8011ffa:	f000 856b 	beq.w	8012ad4 <_dtoa_r+0xbac>
 8011ffe:	4883      	ldr	r0, [pc, #524]	; (801220c <_dtoa_r+0x2e4>)
 8012000:	6018      	str	r0, [r3, #0]
 8012002:	1e43      	subs	r3, r0, #1
 8012004:	9301      	str	r3, [sp, #4]
 8012006:	e7df      	b.n	8011fc8 <_dtoa_r+0xa0>
 8012008:	ec4b ab10 	vmov	d0, sl, fp
 801200c:	aa10      	add	r2, sp, #64	; 0x40
 801200e:	a911      	add	r1, sp, #68	; 0x44
 8012010:	4620      	mov	r0, r4
 8012012:	f001 fd17 	bl	8013a44 <__d2b>
 8012016:	f3cb 550a 	ubfx	r5, fp, #20, #11
 801201a:	ee08 0a10 	vmov	s16, r0
 801201e:	2d00      	cmp	r5, #0
 8012020:	f000 8084 	beq.w	801212c <_dtoa_r+0x204>
 8012024:	ee19 3a90 	vmov	r3, s19
 8012028:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801202c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8012030:	4656      	mov	r6, sl
 8012032:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8012036:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801203a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 801203e:	4b74      	ldr	r3, [pc, #464]	; (8012210 <_dtoa_r+0x2e8>)
 8012040:	2200      	movs	r2, #0
 8012042:	4630      	mov	r0, r6
 8012044:	4639      	mov	r1, r7
 8012046:	f7ee f94f 	bl	80002e8 <__aeabi_dsub>
 801204a:	a365      	add	r3, pc, #404	; (adr r3, 80121e0 <_dtoa_r+0x2b8>)
 801204c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012050:	f7ee fb02 	bl	8000658 <__aeabi_dmul>
 8012054:	a364      	add	r3, pc, #400	; (adr r3, 80121e8 <_dtoa_r+0x2c0>)
 8012056:	e9d3 2300 	ldrd	r2, r3, [r3]
 801205a:	f7ee f947 	bl	80002ec <__adddf3>
 801205e:	4606      	mov	r6, r0
 8012060:	4628      	mov	r0, r5
 8012062:	460f      	mov	r7, r1
 8012064:	f7ee fa8e 	bl	8000584 <__aeabi_i2d>
 8012068:	a361      	add	r3, pc, #388	; (adr r3, 80121f0 <_dtoa_r+0x2c8>)
 801206a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801206e:	f7ee faf3 	bl	8000658 <__aeabi_dmul>
 8012072:	4602      	mov	r2, r0
 8012074:	460b      	mov	r3, r1
 8012076:	4630      	mov	r0, r6
 8012078:	4639      	mov	r1, r7
 801207a:	f7ee f937 	bl	80002ec <__adddf3>
 801207e:	4606      	mov	r6, r0
 8012080:	460f      	mov	r7, r1
 8012082:	f7ee fd99 	bl	8000bb8 <__aeabi_d2iz>
 8012086:	2200      	movs	r2, #0
 8012088:	9000      	str	r0, [sp, #0]
 801208a:	2300      	movs	r3, #0
 801208c:	4630      	mov	r0, r6
 801208e:	4639      	mov	r1, r7
 8012090:	f7ee fd54 	bl	8000b3c <__aeabi_dcmplt>
 8012094:	b150      	cbz	r0, 80120ac <_dtoa_r+0x184>
 8012096:	9800      	ldr	r0, [sp, #0]
 8012098:	f7ee fa74 	bl	8000584 <__aeabi_i2d>
 801209c:	4632      	mov	r2, r6
 801209e:	463b      	mov	r3, r7
 80120a0:	f7ee fd42 	bl	8000b28 <__aeabi_dcmpeq>
 80120a4:	b910      	cbnz	r0, 80120ac <_dtoa_r+0x184>
 80120a6:	9b00      	ldr	r3, [sp, #0]
 80120a8:	3b01      	subs	r3, #1
 80120aa:	9300      	str	r3, [sp, #0]
 80120ac:	9b00      	ldr	r3, [sp, #0]
 80120ae:	2b16      	cmp	r3, #22
 80120b0:	d85a      	bhi.n	8012168 <_dtoa_r+0x240>
 80120b2:	9a00      	ldr	r2, [sp, #0]
 80120b4:	4b57      	ldr	r3, [pc, #348]	; (8012214 <_dtoa_r+0x2ec>)
 80120b6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80120ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120be:	ec51 0b19 	vmov	r0, r1, d9
 80120c2:	f7ee fd3b 	bl	8000b3c <__aeabi_dcmplt>
 80120c6:	2800      	cmp	r0, #0
 80120c8:	d050      	beq.n	801216c <_dtoa_r+0x244>
 80120ca:	9b00      	ldr	r3, [sp, #0]
 80120cc:	3b01      	subs	r3, #1
 80120ce:	9300      	str	r3, [sp, #0]
 80120d0:	2300      	movs	r3, #0
 80120d2:	930b      	str	r3, [sp, #44]	; 0x2c
 80120d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80120d6:	1b5d      	subs	r5, r3, r5
 80120d8:	1e6b      	subs	r3, r5, #1
 80120da:	9305      	str	r3, [sp, #20]
 80120dc:	bf45      	ittet	mi
 80120de:	f1c5 0301 	rsbmi	r3, r5, #1
 80120e2:	9304      	strmi	r3, [sp, #16]
 80120e4:	2300      	movpl	r3, #0
 80120e6:	2300      	movmi	r3, #0
 80120e8:	bf4c      	ite	mi
 80120ea:	9305      	strmi	r3, [sp, #20]
 80120ec:	9304      	strpl	r3, [sp, #16]
 80120ee:	9b00      	ldr	r3, [sp, #0]
 80120f0:	2b00      	cmp	r3, #0
 80120f2:	db3d      	blt.n	8012170 <_dtoa_r+0x248>
 80120f4:	9b05      	ldr	r3, [sp, #20]
 80120f6:	9a00      	ldr	r2, [sp, #0]
 80120f8:	920a      	str	r2, [sp, #40]	; 0x28
 80120fa:	4413      	add	r3, r2
 80120fc:	9305      	str	r3, [sp, #20]
 80120fe:	2300      	movs	r3, #0
 8012100:	9307      	str	r3, [sp, #28]
 8012102:	9b06      	ldr	r3, [sp, #24]
 8012104:	2b09      	cmp	r3, #9
 8012106:	f200 8089 	bhi.w	801221c <_dtoa_r+0x2f4>
 801210a:	2b05      	cmp	r3, #5
 801210c:	bfc4      	itt	gt
 801210e:	3b04      	subgt	r3, #4
 8012110:	9306      	strgt	r3, [sp, #24]
 8012112:	9b06      	ldr	r3, [sp, #24]
 8012114:	f1a3 0302 	sub.w	r3, r3, #2
 8012118:	bfcc      	ite	gt
 801211a:	2500      	movgt	r5, #0
 801211c:	2501      	movle	r5, #1
 801211e:	2b03      	cmp	r3, #3
 8012120:	f200 8087 	bhi.w	8012232 <_dtoa_r+0x30a>
 8012124:	e8df f003 	tbb	[pc, r3]
 8012128:	59383a2d 	.word	0x59383a2d
 801212c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8012130:	441d      	add	r5, r3
 8012132:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8012136:	2b20      	cmp	r3, #32
 8012138:	bfc1      	itttt	gt
 801213a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801213e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8012142:	fa0b f303 	lslgt.w	r3, fp, r3
 8012146:	fa26 f000 	lsrgt.w	r0, r6, r0
 801214a:	bfda      	itte	le
 801214c:	f1c3 0320 	rsble	r3, r3, #32
 8012150:	fa06 f003 	lslle.w	r0, r6, r3
 8012154:	4318      	orrgt	r0, r3
 8012156:	f7ee fa05 	bl	8000564 <__aeabi_ui2d>
 801215a:	2301      	movs	r3, #1
 801215c:	4606      	mov	r6, r0
 801215e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8012162:	3d01      	subs	r5, #1
 8012164:	930e      	str	r3, [sp, #56]	; 0x38
 8012166:	e76a      	b.n	801203e <_dtoa_r+0x116>
 8012168:	2301      	movs	r3, #1
 801216a:	e7b2      	b.n	80120d2 <_dtoa_r+0x1aa>
 801216c:	900b      	str	r0, [sp, #44]	; 0x2c
 801216e:	e7b1      	b.n	80120d4 <_dtoa_r+0x1ac>
 8012170:	9b04      	ldr	r3, [sp, #16]
 8012172:	9a00      	ldr	r2, [sp, #0]
 8012174:	1a9b      	subs	r3, r3, r2
 8012176:	9304      	str	r3, [sp, #16]
 8012178:	4253      	negs	r3, r2
 801217a:	9307      	str	r3, [sp, #28]
 801217c:	2300      	movs	r3, #0
 801217e:	930a      	str	r3, [sp, #40]	; 0x28
 8012180:	e7bf      	b.n	8012102 <_dtoa_r+0x1da>
 8012182:	2300      	movs	r3, #0
 8012184:	9308      	str	r3, [sp, #32]
 8012186:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012188:	2b00      	cmp	r3, #0
 801218a:	dc55      	bgt.n	8012238 <_dtoa_r+0x310>
 801218c:	2301      	movs	r3, #1
 801218e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8012192:	461a      	mov	r2, r3
 8012194:	9209      	str	r2, [sp, #36]	; 0x24
 8012196:	e00c      	b.n	80121b2 <_dtoa_r+0x28a>
 8012198:	2301      	movs	r3, #1
 801219a:	e7f3      	b.n	8012184 <_dtoa_r+0x25c>
 801219c:	2300      	movs	r3, #0
 801219e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80121a0:	9308      	str	r3, [sp, #32]
 80121a2:	9b00      	ldr	r3, [sp, #0]
 80121a4:	4413      	add	r3, r2
 80121a6:	9302      	str	r3, [sp, #8]
 80121a8:	3301      	adds	r3, #1
 80121aa:	2b01      	cmp	r3, #1
 80121ac:	9303      	str	r3, [sp, #12]
 80121ae:	bfb8      	it	lt
 80121b0:	2301      	movlt	r3, #1
 80121b2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80121b4:	2200      	movs	r2, #0
 80121b6:	6042      	str	r2, [r0, #4]
 80121b8:	2204      	movs	r2, #4
 80121ba:	f102 0614 	add.w	r6, r2, #20
 80121be:	429e      	cmp	r6, r3
 80121c0:	6841      	ldr	r1, [r0, #4]
 80121c2:	d93d      	bls.n	8012240 <_dtoa_r+0x318>
 80121c4:	4620      	mov	r0, r4
 80121c6:	f001 f84f 	bl	8013268 <_Balloc>
 80121ca:	9001      	str	r0, [sp, #4]
 80121cc:	2800      	cmp	r0, #0
 80121ce:	d13b      	bne.n	8012248 <_dtoa_r+0x320>
 80121d0:	4b11      	ldr	r3, [pc, #68]	; (8012218 <_dtoa_r+0x2f0>)
 80121d2:	4602      	mov	r2, r0
 80121d4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80121d8:	e6c0      	b.n	8011f5c <_dtoa_r+0x34>
 80121da:	2301      	movs	r3, #1
 80121dc:	e7df      	b.n	801219e <_dtoa_r+0x276>
 80121de:	bf00      	nop
 80121e0:	636f4361 	.word	0x636f4361
 80121e4:	3fd287a7 	.word	0x3fd287a7
 80121e8:	8b60c8b3 	.word	0x8b60c8b3
 80121ec:	3fc68a28 	.word	0x3fc68a28
 80121f0:	509f79fb 	.word	0x509f79fb
 80121f4:	3fd34413 	.word	0x3fd34413
 80121f8:	08016948 	.word	0x08016948
 80121fc:	08016b06 	.word	0x08016b06
 8012200:	7ff00000 	.word	0x7ff00000
 8012204:	08016b02 	.word	0x08016b02
 8012208:	08016af9 	.word	0x08016af9
 801220c:	08016d5a 	.word	0x08016d5a
 8012210:	3ff80000 	.word	0x3ff80000
 8012214:	08016c70 	.word	0x08016c70
 8012218:	08016b61 	.word	0x08016b61
 801221c:	2501      	movs	r5, #1
 801221e:	2300      	movs	r3, #0
 8012220:	9306      	str	r3, [sp, #24]
 8012222:	9508      	str	r5, [sp, #32]
 8012224:	f04f 33ff 	mov.w	r3, #4294967295
 8012228:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801222c:	2200      	movs	r2, #0
 801222e:	2312      	movs	r3, #18
 8012230:	e7b0      	b.n	8012194 <_dtoa_r+0x26c>
 8012232:	2301      	movs	r3, #1
 8012234:	9308      	str	r3, [sp, #32]
 8012236:	e7f5      	b.n	8012224 <_dtoa_r+0x2fc>
 8012238:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801223a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801223e:	e7b8      	b.n	80121b2 <_dtoa_r+0x28a>
 8012240:	3101      	adds	r1, #1
 8012242:	6041      	str	r1, [r0, #4]
 8012244:	0052      	lsls	r2, r2, #1
 8012246:	e7b8      	b.n	80121ba <_dtoa_r+0x292>
 8012248:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801224a:	9a01      	ldr	r2, [sp, #4]
 801224c:	601a      	str	r2, [r3, #0]
 801224e:	9b03      	ldr	r3, [sp, #12]
 8012250:	2b0e      	cmp	r3, #14
 8012252:	f200 809d 	bhi.w	8012390 <_dtoa_r+0x468>
 8012256:	2d00      	cmp	r5, #0
 8012258:	f000 809a 	beq.w	8012390 <_dtoa_r+0x468>
 801225c:	9b00      	ldr	r3, [sp, #0]
 801225e:	2b00      	cmp	r3, #0
 8012260:	dd32      	ble.n	80122c8 <_dtoa_r+0x3a0>
 8012262:	4ab7      	ldr	r2, [pc, #732]	; (8012540 <_dtoa_r+0x618>)
 8012264:	f003 030f 	and.w	r3, r3, #15
 8012268:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801226c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8012270:	9b00      	ldr	r3, [sp, #0]
 8012272:	05d8      	lsls	r0, r3, #23
 8012274:	ea4f 1723 	mov.w	r7, r3, asr #4
 8012278:	d516      	bpl.n	80122a8 <_dtoa_r+0x380>
 801227a:	4bb2      	ldr	r3, [pc, #712]	; (8012544 <_dtoa_r+0x61c>)
 801227c:	ec51 0b19 	vmov	r0, r1, d9
 8012280:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8012284:	f7ee fb12 	bl	80008ac <__aeabi_ddiv>
 8012288:	f007 070f 	and.w	r7, r7, #15
 801228c:	4682      	mov	sl, r0
 801228e:	468b      	mov	fp, r1
 8012290:	2503      	movs	r5, #3
 8012292:	4eac      	ldr	r6, [pc, #688]	; (8012544 <_dtoa_r+0x61c>)
 8012294:	b957      	cbnz	r7, 80122ac <_dtoa_r+0x384>
 8012296:	4642      	mov	r2, r8
 8012298:	464b      	mov	r3, r9
 801229a:	4650      	mov	r0, sl
 801229c:	4659      	mov	r1, fp
 801229e:	f7ee fb05 	bl	80008ac <__aeabi_ddiv>
 80122a2:	4682      	mov	sl, r0
 80122a4:	468b      	mov	fp, r1
 80122a6:	e028      	b.n	80122fa <_dtoa_r+0x3d2>
 80122a8:	2502      	movs	r5, #2
 80122aa:	e7f2      	b.n	8012292 <_dtoa_r+0x36a>
 80122ac:	07f9      	lsls	r1, r7, #31
 80122ae:	d508      	bpl.n	80122c2 <_dtoa_r+0x39a>
 80122b0:	4640      	mov	r0, r8
 80122b2:	4649      	mov	r1, r9
 80122b4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80122b8:	f7ee f9ce 	bl	8000658 <__aeabi_dmul>
 80122bc:	3501      	adds	r5, #1
 80122be:	4680      	mov	r8, r0
 80122c0:	4689      	mov	r9, r1
 80122c2:	107f      	asrs	r7, r7, #1
 80122c4:	3608      	adds	r6, #8
 80122c6:	e7e5      	b.n	8012294 <_dtoa_r+0x36c>
 80122c8:	f000 809b 	beq.w	8012402 <_dtoa_r+0x4da>
 80122cc:	9b00      	ldr	r3, [sp, #0]
 80122ce:	4f9d      	ldr	r7, [pc, #628]	; (8012544 <_dtoa_r+0x61c>)
 80122d0:	425e      	negs	r6, r3
 80122d2:	4b9b      	ldr	r3, [pc, #620]	; (8012540 <_dtoa_r+0x618>)
 80122d4:	f006 020f 	and.w	r2, r6, #15
 80122d8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80122dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122e0:	ec51 0b19 	vmov	r0, r1, d9
 80122e4:	f7ee f9b8 	bl	8000658 <__aeabi_dmul>
 80122e8:	1136      	asrs	r6, r6, #4
 80122ea:	4682      	mov	sl, r0
 80122ec:	468b      	mov	fp, r1
 80122ee:	2300      	movs	r3, #0
 80122f0:	2502      	movs	r5, #2
 80122f2:	2e00      	cmp	r6, #0
 80122f4:	d17a      	bne.n	80123ec <_dtoa_r+0x4c4>
 80122f6:	2b00      	cmp	r3, #0
 80122f8:	d1d3      	bne.n	80122a2 <_dtoa_r+0x37a>
 80122fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80122fc:	2b00      	cmp	r3, #0
 80122fe:	f000 8082 	beq.w	8012406 <_dtoa_r+0x4de>
 8012302:	4b91      	ldr	r3, [pc, #580]	; (8012548 <_dtoa_r+0x620>)
 8012304:	2200      	movs	r2, #0
 8012306:	4650      	mov	r0, sl
 8012308:	4659      	mov	r1, fp
 801230a:	f7ee fc17 	bl	8000b3c <__aeabi_dcmplt>
 801230e:	2800      	cmp	r0, #0
 8012310:	d079      	beq.n	8012406 <_dtoa_r+0x4de>
 8012312:	9b03      	ldr	r3, [sp, #12]
 8012314:	2b00      	cmp	r3, #0
 8012316:	d076      	beq.n	8012406 <_dtoa_r+0x4de>
 8012318:	9b02      	ldr	r3, [sp, #8]
 801231a:	2b00      	cmp	r3, #0
 801231c:	dd36      	ble.n	801238c <_dtoa_r+0x464>
 801231e:	9b00      	ldr	r3, [sp, #0]
 8012320:	4650      	mov	r0, sl
 8012322:	4659      	mov	r1, fp
 8012324:	1e5f      	subs	r7, r3, #1
 8012326:	2200      	movs	r2, #0
 8012328:	4b88      	ldr	r3, [pc, #544]	; (801254c <_dtoa_r+0x624>)
 801232a:	f7ee f995 	bl	8000658 <__aeabi_dmul>
 801232e:	9e02      	ldr	r6, [sp, #8]
 8012330:	4682      	mov	sl, r0
 8012332:	468b      	mov	fp, r1
 8012334:	3501      	adds	r5, #1
 8012336:	4628      	mov	r0, r5
 8012338:	f7ee f924 	bl	8000584 <__aeabi_i2d>
 801233c:	4652      	mov	r2, sl
 801233e:	465b      	mov	r3, fp
 8012340:	f7ee f98a 	bl	8000658 <__aeabi_dmul>
 8012344:	4b82      	ldr	r3, [pc, #520]	; (8012550 <_dtoa_r+0x628>)
 8012346:	2200      	movs	r2, #0
 8012348:	f7ed ffd0 	bl	80002ec <__adddf3>
 801234c:	46d0      	mov	r8, sl
 801234e:	46d9      	mov	r9, fp
 8012350:	4682      	mov	sl, r0
 8012352:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8012356:	2e00      	cmp	r6, #0
 8012358:	d158      	bne.n	801240c <_dtoa_r+0x4e4>
 801235a:	4b7e      	ldr	r3, [pc, #504]	; (8012554 <_dtoa_r+0x62c>)
 801235c:	2200      	movs	r2, #0
 801235e:	4640      	mov	r0, r8
 8012360:	4649      	mov	r1, r9
 8012362:	f7ed ffc1 	bl	80002e8 <__aeabi_dsub>
 8012366:	4652      	mov	r2, sl
 8012368:	465b      	mov	r3, fp
 801236a:	4680      	mov	r8, r0
 801236c:	4689      	mov	r9, r1
 801236e:	f7ee fc03 	bl	8000b78 <__aeabi_dcmpgt>
 8012372:	2800      	cmp	r0, #0
 8012374:	f040 8295 	bne.w	80128a2 <_dtoa_r+0x97a>
 8012378:	4652      	mov	r2, sl
 801237a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801237e:	4640      	mov	r0, r8
 8012380:	4649      	mov	r1, r9
 8012382:	f7ee fbdb 	bl	8000b3c <__aeabi_dcmplt>
 8012386:	2800      	cmp	r0, #0
 8012388:	f040 8289 	bne.w	801289e <_dtoa_r+0x976>
 801238c:	ec5b ab19 	vmov	sl, fp, d9
 8012390:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012392:	2b00      	cmp	r3, #0
 8012394:	f2c0 8148 	blt.w	8012628 <_dtoa_r+0x700>
 8012398:	9a00      	ldr	r2, [sp, #0]
 801239a:	2a0e      	cmp	r2, #14
 801239c:	f300 8144 	bgt.w	8012628 <_dtoa_r+0x700>
 80123a0:	4b67      	ldr	r3, [pc, #412]	; (8012540 <_dtoa_r+0x618>)
 80123a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80123a6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80123aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80123ac:	2b00      	cmp	r3, #0
 80123ae:	f280 80d5 	bge.w	801255c <_dtoa_r+0x634>
 80123b2:	9b03      	ldr	r3, [sp, #12]
 80123b4:	2b00      	cmp	r3, #0
 80123b6:	f300 80d1 	bgt.w	801255c <_dtoa_r+0x634>
 80123ba:	f040 826f 	bne.w	801289c <_dtoa_r+0x974>
 80123be:	4b65      	ldr	r3, [pc, #404]	; (8012554 <_dtoa_r+0x62c>)
 80123c0:	2200      	movs	r2, #0
 80123c2:	4640      	mov	r0, r8
 80123c4:	4649      	mov	r1, r9
 80123c6:	f7ee f947 	bl	8000658 <__aeabi_dmul>
 80123ca:	4652      	mov	r2, sl
 80123cc:	465b      	mov	r3, fp
 80123ce:	f7ee fbc9 	bl	8000b64 <__aeabi_dcmpge>
 80123d2:	9e03      	ldr	r6, [sp, #12]
 80123d4:	4637      	mov	r7, r6
 80123d6:	2800      	cmp	r0, #0
 80123d8:	f040 8245 	bne.w	8012866 <_dtoa_r+0x93e>
 80123dc:	9d01      	ldr	r5, [sp, #4]
 80123de:	2331      	movs	r3, #49	; 0x31
 80123e0:	f805 3b01 	strb.w	r3, [r5], #1
 80123e4:	9b00      	ldr	r3, [sp, #0]
 80123e6:	3301      	adds	r3, #1
 80123e8:	9300      	str	r3, [sp, #0]
 80123ea:	e240      	b.n	801286e <_dtoa_r+0x946>
 80123ec:	07f2      	lsls	r2, r6, #31
 80123ee:	d505      	bpl.n	80123fc <_dtoa_r+0x4d4>
 80123f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80123f4:	f7ee f930 	bl	8000658 <__aeabi_dmul>
 80123f8:	3501      	adds	r5, #1
 80123fa:	2301      	movs	r3, #1
 80123fc:	1076      	asrs	r6, r6, #1
 80123fe:	3708      	adds	r7, #8
 8012400:	e777      	b.n	80122f2 <_dtoa_r+0x3ca>
 8012402:	2502      	movs	r5, #2
 8012404:	e779      	b.n	80122fa <_dtoa_r+0x3d2>
 8012406:	9f00      	ldr	r7, [sp, #0]
 8012408:	9e03      	ldr	r6, [sp, #12]
 801240a:	e794      	b.n	8012336 <_dtoa_r+0x40e>
 801240c:	9901      	ldr	r1, [sp, #4]
 801240e:	4b4c      	ldr	r3, [pc, #304]	; (8012540 <_dtoa_r+0x618>)
 8012410:	4431      	add	r1, r6
 8012412:	910d      	str	r1, [sp, #52]	; 0x34
 8012414:	9908      	ldr	r1, [sp, #32]
 8012416:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801241a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801241e:	2900      	cmp	r1, #0
 8012420:	d043      	beq.n	80124aa <_dtoa_r+0x582>
 8012422:	494d      	ldr	r1, [pc, #308]	; (8012558 <_dtoa_r+0x630>)
 8012424:	2000      	movs	r0, #0
 8012426:	f7ee fa41 	bl	80008ac <__aeabi_ddiv>
 801242a:	4652      	mov	r2, sl
 801242c:	465b      	mov	r3, fp
 801242e:	f7ed ff5b 	bl	80002e8 <__aeabi_dsub>
 8012432:	9d01      	ldr	r5, [sp, #4]
 8012434:	4682      	mov	sl, r0
 8012436:	468b      	mov	fp, r1
 8012438:	4649      	mov	r1, r9
 801243a:	4640      	mov	r0, r8
 801243c:	f7ee fbbc 	bl	8000bb8 <__aeabi_d2iz>
 8012440:	4606      	mov	r6, r0
 8012442:	f7ee f89f 	bl	8000584 <__aeabi_i2d>
 8012446:	4602      	mov	r2, r0
 8012448:	460b      	mov	r3, r1
 801244a:	4640      	mov	r0, r8
 801244c:	4649      	mov	r1, r9
 801244e:	f7ed ff4b 	bl	80002e8 <__aeabi_dsub>
 8012452:	3630      	adds	r6, #48	; 0x30
 8012454:	f805 6b01 	strb.w	r6, [r5], #1
 8012458:	4652      	mov	r2, sl
 801245a:	465b      	mov	r3, fp
 801245c:	4680      	mov	r8, r0
 801245e:	4689      	mov	r9, r1
 8012460:	f7ee fb6c 	bl	8000b3c <__aeabi_dcmplt>
 8012464:	2800      	cmp	r0, #0
 8012466:	d163      	bne.n	8012530 <_dtoa_r+0x608>
 8012468:	4642      	mov	r2, r8
 801246a:	464b      	mov	r3, r9
 801246c:	4936      	ldr	r1, [pc, #216]	; (8012548 <_dtoa_r+0x620>)
 801246e:	2000      	movs	r0, #0
 8012470:	f7ed ff3a 	bl	80002e8 <__aeabi_dsub>
 8012474:	4652      	mov	r2, sl
 8012476:	465b      	mov	r3, fp
 8012478:	f7ee fb60 	bl	8000b3c <__aeabi_dcmplt>
 801247c:	2800      	cmp	r0, #0
 801247e:	f040 80b5 	bne.w	80125ec <_dtoa_r+0x6c4>
 8012482:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012484:	429d      	cmp	r5, r3
 8012486:	d081      	beq.n	801238c <_dtoa_r+0x464>
 8012488:	4b30      	ldr	r3, [pc, #192]	; (801254c <_dtoa_r+0x624>)
 801248a:	2200      	movs	r2, #0
 801248c:	4650      	mov	r0, sl
 801248e:	4659      	mov	r1, fp
 8012490:	f7ee f8e2 	bl	8000658 <__aeabi_dmul>
 8012494:	4b2d      	ldr	r3, [pc, #180]	; (801254c <_dtoa_r+0x624>)
 8012496:	4682      	mov	sl, r0
 8012498:	468b      	mov	fp, r1
 801249a:	4640      	mov	r0, r8
 801249c:	4649      	mov	r1, r9
 801249e:	2200      	movs	r2, #0
 80124a0:	f7ee f8da 	bl	8000658 <__aeabi_dmul>
 80124a4:	4680      	mov	r8, r0
 80124a6:	4689      	mov	r9, r1
 80124a8:	e7c6      	b.n	8012438 <_dtoa_r+0x510>
 80124aa:	4650      	mov	r0, sl
 80124ac:	4659      	mov	r1, fp
 80124ae:	f7ee f8d3 	bl	8000658 <__aeabi_dmul>
 80124b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80124b4:	9d01      	ldr	r5, [sp, #4]
 80124b6:	930f      	str	r3, [sp, #60]	; 0x3c
 80124b8:	4682      	mov	sl, r0
 80124ba:	468b      	mov	fp, r1
 80124bc:	4649      	mov	r1, r9
 80124be:	4640      	mov	r0, r8
 80124c0:	f7ee fb7a 	bl	8000bb8 <__aeabi_d2iz>
 80124c4:	4606      	mov	r6, r0
 80124c6:	f7ee f85d 	bl	8000584 <__aeabi_i2d>
 80124ca:	3630      	adds	r6, #48	; 0x30
 80124cc:	4602      	mov	r2, r0
 80124ce:	460b      	mov	r3, r1
 80124d0:	4640      	mov	r0, r8
 80124d2:	4649      	mov	r1, r9
 80124d4:	f7ed ff08 	bl	80002e8 <__aeabi_dsub>
 80124d8:	f805 6b01 	strb.w	r6, [r5], #1
 80124dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80124de:	429d      	cmp	r5, r3
 80124e0:	4680      	mov	r8, r0
 80124e2:	4689      	mov	r9, r1
 80124e4:	f04f 0200 	mov.w	r2, #0
 80124e8:	d124      	bne.n	8012534 <_dtoa_r+0x60c>
 80124ea:	4b1b      	ldr	r3, [pc, #108]	; (8012558 <_dtoa_r+0x630>)
 80124ec:	4650      	mov	r0, sl
 80124ee:	4659      	mov	r1, fp
 80124f0:	f7ed fefc 	bl	80002ec <__adddf3>
 80124f4:	4602      	mov	r2, r0
 80124f6:	460b      	mov	r3, r1
 80124f8:	4640      	mov	r0, r8
 80124fa:	4649      	mov	r1, r9
 80124fc:	f7ee fb3c 	bl	8000b78 <__aeabi_dcmpgt>
 8012500:	2800      	cmp	r0, #0
 8012502:	d173      	bne.n	80125ec <_dtoa_r+0x6c4>
 8012504:	4652      	mov	r2, sl
 8012506:	465b      	mov	r3, fp
 8012508:	4913      	ldr	r1, [pc, #76]	; (8012558 <_dtoa_r+0x630>)
 801250a:	2000      	movs	r0, #0
 801250c:	f7ed feec 	bl	80002e8 <__aeabi_dsub>
 8012510:	4602      	mov	r2, r0
 8012512:	460b      	mov	r3, r1
 8012514:	4640      	mov	r0, r8
 8012516:	4649      	mov	r1, r9
 8012518:	f7ee fb10 	bl	8000b3c <__aeabi_dcmplt>
 801251c:	2800      	cmp	r0, #0
 801251e:	f43f af35 	beq.w	801238c <_dtoa_r+0x464>
 8012522:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8012524:	1e6b      	subs	r3, r5, #1
 8012526:	930f      	str	r3, [sp, #60]	; 0x3c
 8012528:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801252c:	2b30      	cmp	r3, #48	; 0x30
 801252e:	d0f8      	beq.n	8012522 <_dtoa_r+0x5fa>
 8012530:	9700      	str	r7, [sp, #0]
 8012532:	e049      	b.n	80125c8 <_dtoa_r+0x6a0>
 8012534:	4b05      	ldr	r3, [pc, #20]	; (801254c <_dtoa_r+0x624>)
 8012536:	f7ee f88f 	bl	8000658 <__aeabi_dmul>
 801253a:	4680      	mov	r8, r0
 801253c:	4689      	mov	r9, r1
 801253e:	e7bd      	b.n	80124bc <_dtoa_r+0x594>
 8012540:	08016c70 	.word	0x08016c70
 8012544:	08016c48 	.word	0x08016c48
 8012548:	3ff00000 	.word	0x3ff00000
 801254c:	40240000 	.word	0x40240000
 8012550:	401c0000 	.word	0x401c0000
 8012554:	40140000 	.word	0x40140000
 8012558:	3fe00000 	.word	0x3fe00000
 801255c:	9d01      	ldr	r5, [sp, #4]
 801255e:	4656      	mov	r6, sl
 8012560:	465f      	mov	r7, fp
 8012562:	4642      	mov	r2, r8
 8012564:	464b      	mov	r3, r9
 8012566:	4630      	mov	r0, r6
 8012568:	4639      	mov	r1, r7
 801256a:	f7ee f99f 	bl	80008ac <__aeabi_ddiv>
 801256e:	f7ee fb23 	bl	8000bb8 <__aeabi_d2iz>
 8012572:	4682      	mov	sl, r0
 8012574:	f7ee f806 	bl	8000584 <__aeabi_i2d>
 8012578:	4642      	mov	r2, r8
 801257a:	464b      	mov	r3, r9
 801257c:	f7ee f86c 	bl	8000658 <__aeabi_dmul>
 8012580:	4602      	mov	r2, r0
 8012582:	460b      	mov	r3, r1
 8012584:	4630      	mov	r0, r6
 8012586:	4639      	mov	r1, r7
 8012588:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 801258c:	f7ed feac 	bl	80002e8 <__aeabi_dsub>
 8012590:	f805 6b01 	strb.w	r6, [r5], #1
 8012594:	9e01      	ldr	r6, [sp, #4]
 8012596:	9f03      	ldr	r7, [sp, #12]
 8012598:	1bae      	subs	r6, r5, r6
 801259a:	42b7      	cmp	r7, r6
 801259c:	4602      	mov	r2, r0
 801259e:	460b      	mov	r3, r1
 80125a0:	d135      	bne.n	801260e <_dtoa_r+0x6e6>
 80125a2:	f7ed fea3 	bl	80002ec <__adddf3>
 80125a6:	4642      	mov	r2, r8
 80125a8:	464b      	mov	r3, r9
 80125aa:	4606      	mov	r6, r0
 80125ac:	460f      	mov	r7, r1
 80125ae:	f7ee fae3 	bl	8000b78 <__aeabi_dcmpgt>
 80125b2:	b9d0      	cbnz	r0, 80125ea <_dtoa_r+0x6c2>
 80125b4:	4642      	mov	r2, r8
 80125b6:	464b      	mov	r3, r9
 80125b8:	4630      	mov	r0, r6
 80125ba:	4639      	mov	r1, r7
 80125bc:	f7ee fab4 	bl	8000b28 <__aeabi_dcmpeq>
 80125c0:	b110      	cbz	r0, 80125c8 <_dtoa_r+0x6a0>
 80125c2:	f01a 0f01 	tst.w	sl, #1
 80125c6:	d110      	bne.n	80125ea <_dtoa_r+0x6c2>
 80125c8:	4620      	mov	r0, r4
 80125ca:	ee18 1a10 	vmov	r1, s16
 80125ce:	f000 fe8b 	bl	80132e8 <_Bfree>
 80125d2:	2300      	movs	r3, #0
 80125d4:	9800      	ldr	r0, [sp, #0]
 80125d6:	702b      	strb	r3, [r5, #0]
 80125d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80125da:	3001      	adds	r0, #1
 80125dc:	6018      	str	r0, [r3, #0]
 80125de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80125e0:	2b00      	cmp	r3, #0
 80125e2:	f43f acf1 	beq.w	8011fc8 <_dtoa_r+0xa0>
 80125e6:	601d      	str	r5, [r3, #0]
 80125e8:	e4ee      	b.n	8011fc8 <_dtoa_r+0xa0>
 80125ea:	9f00      	ldr	r7, [sp, #0]
 80125ec:	462b      	mov	r3, r5
 80125ee:	461d      	mov	r5, r3
 80125f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80125f4:	2a39      	cmp	r2, #57	; 0x39
 80125f6:	d106      	bne.n	8012606 <_dtoa_r+0x6de>
 80125f8:	9a01      	ldr	r2, [sp, #4]
 80125fa:	429a      	cmp	r2, r3
 80125fc:	d1f7      	bne.n	80125ee <_dtoa_r+0x6c6>
 80125fe:	9901      	ldr	r1, [sp, #4]
 8012600:	2230      	movs	r2, #48	; 0x30
 8012602:	3701      	adds	r7, #1
 8012604:	700a      	strb	r2, [r1, #0]
 8012606:	781a      	ldrb	r2, [r3, #0]
 8012608:	3201      	adds	r2, #1
 801260a:	701a      	strb	r2, [r3, #0]
 801260c:	e790      	b.n	8012530 <_dtoa_r+0x608>
 801260e:	4ba6      	ldr	r3, [pc, #664]	; (80128a8 <_dtoa_r+0x980>)
 8012610:	2200      	movs	r2, #0
 8012612:	f7ee f821 	bl	8000658 <__aeabi_dmul>
 8012616:	2200      	movs	r2, #0
 8012618:	2300      	movs	r3, #0
 801261a:	4606      	mov	r6, r0
 801261c:	460f      	mov	r7, r1
 801261e:	f7ee fa83 	bl	8000b28 <__aeabi_dcmpeq>
 8012622:	2800      	cmp	r0, #0
 8012624:	d09d      	beq.n	8012562 <_dtoa_r+0x63a>
 8012626:	e7cf      	b.n	80125c8 <_dtoa_r+0x6a0>
 8012628:	9a08      	ldr	r2, [sp, #32]
 801262a:	2a00      	cmp	r2, #0
 801262c:	f000 80d7 	beq.w	80127de <_dtoa_r+0x8b6>
 8012630:	9a06      	ldr	r2, [sp, #24]
 8012632:	2a01      	cmp	r2, #1
 8012634:	f300 80ba 	bgt.w	80127ac <_dtoa_r+0x884>
 8012638:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801263a:	2a00      	cmp	r2, #0
 801263c:	f000 80b2 	beq.w	80127a4 <_dtoa_r+0x87c>
 8012640:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8012644:	9e07      	ldr	r6, [sp, #28]
 8012646:	9d04      	ldr	r5, [sp, #16]
 8012648:	9a04      	ldr	r2, [sp, #16]
 801264a:	441a      	add	r2, r3
 801264c:	9204      	str	r2, [sp, #16]
 801264e:	9a05      	ldr	r2, [sp, #20]
 8012650:	2101      	movs	r1, #1
 8012652:	441a      	add	r2, r3
 8012654:	4620      	mov	r0, r4
 8012656:	9205      	str	r2, [sp, #20]
 8012658:	f000 ff48 	bl	80134ec <__i2b>
 801265c:	4607      	mov	r7, r0
 801265e:	2d00      	cmp	r5, #0
 8012660:	dd0c      	ble.n	801267c <_dtoa_r+0x754>
 8012662:	9b05      	ldr	r3, [sp, #20]
 8012664:	2b00      	cmp	r3, #0
 8012666:	dd09      	ble.n	801267c <_dtoa_r+0x754>
 8012668:	42ab      	cmp	r3, r5
 801266a:	9a04      	ldr	r2, [sp, #16]
 801266c:	bfa8      	it	ge
 801266e:	462b      	movge	r3, r5
 8012670:	1ad2      	subs	r2, r2, r3
 8012672:	9204      	str	r2, [sp, #16]
 8012674:	9a05      	ldr	r2, [sp, #20]
 8012676:	1aed      	subs	r5, r5, r3
 8012678:	1ad3      	subs	r3, r2, r3
 801267a:	9305      	str	r3, [sp, #20]
 801267c:	9b07      	ldr	r3, [sp, #28]
 801267e:	b31b      	cbz	r3, 80126c8 <_dtoa_r+0x7a0>
 8012680:	9b08      	ldr	r3, [sp, #32]
 8012682:	2b00      	cmp	r3, #0
 8012684:	f000 80af 	beq.w	80127e6 <_dtoa_r+0x8be>
 8012688:	2e00      	cmp	r6, #0
 801268a:	dd13      	ble.n	80126b4 <_dtoa_r+0x78c>
 801268c:	4639      	mov	r1, r7
 801268e:	4632      	mov	r2, r6
 8012690:	4620      	mov	r0, r4
 8012692:	f000 ffeb 	bl	801366c <__pow5mult>
 8012696:	ee18 2a10 	vmov	r2, s16
 801269a:	4601      	mov	r1, r0
 801269c:	4607      	mov	r7, r0
 801269e:	4620      	mov	r0, r4
 80126a0:	f000 ff3a 	bl	8013518 <__multiply>
 80126a4:	ee18 1a10 	vmov	r1, s16
 80126a8:	4680      	mov	r8, r0
 80126aa:	4620      	mov	r0, r4
 80126ac:	f000 fe1c 	bl	80132e8 <_Bfree>
 80126b0:	ee08 8a10 	vmov	s16, r8
 80126b4:	9b07      	ldr	r3, [sp, #28]
 80126b6:	1b9a      	subs	r2, r3, r6
 80126b8:	d006      	beq.n	80126c8 <_dtoa_r+0x7a0>
 80126ba:	ee18 1a10 	vmov	r1, s16
 80126be:	4620      	mov	r0, r4
 80126c0:	f000 ffd4 	bl	801366c <__pow5mult>
 80126c4:	ee08 0a10 	vmov	s16, r0
 80126c8:	2101      	movs	r1, #1
 80126ca:	4620      	mov	r0, r4
 80126cc:	f000 ff0e 	bl	80134ec <__i2b>
 80126d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80126d2:	2b00      	cmp	r3, #0
 80126d4:	4606      	mov	r6, r0
 80126d6:	f340 8088 	ble.w	80127ea <_dtoa_r+0x8c2>
 80126da:	461a      	mov	r2, r3
 80126dc:	4601      	mov	r1, r0
 80126de:	4620      	mov	r0, r4
 80126e0:	f000 ffc4 	bl	801366c <__pow5mult>
 80126e4:	9b06      	ldr	r3, [sp, #24]
 80126e6:	2b01      	cmp	r3, #1
 80126e8:	4606      	mov	r6, r0
 80126ea:	f340 8081 	ble.w	80127f0 <_dtoa_r+0x8c8>
 80126ee:	f04f 0800 	mov.w	r8, #0
 80126f2:	6933      	ldr	r3, [r6, #16]
 80126f4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80126f8:	6918      	ldr	r0, [r3, #16]
 80126fa:	f000 fea7 	bl	801344c <__hi0bits>
 80126fe:	f1c0 0020 	rsb	r0, r0, #32
 8012702:	9b05      	ldr	r3, [sp, #20]
 8012704:	4418      	add	r0, r3
 8012706:	f010 001f 	ands.w	r0, r0, #31
 801270a:	f000 8092 	beq.w	8012832 <_dtoa_r+0x90a>
 801270e:	f1c0 0320 	rsb	r3, r0, #32
 8012712:	2b04      	cmp	r3, #4
 8012714:	f340 808a 	ble.w	801282c <_dtoa_r+0x904>
 8012718:	f1c0 001c 	rsb	r0, r0, #28
 801271c:	9b04      	ldr	r3, [sp, #16]
 801271e:	4403      	add	r3, r0
 8012720:	9304      	str	r3, [sp, #16]
 8012722:	9b05      	ldr	r3, [sp, #20]
 8012724:	4403      	add	r3, r0
 8012726:	4405      	add	r5, r0
 8012728:	9305      	str	r3, [sp, #20]
 801272a:	9b04      	ldr	r3, [sp, #16]
 801272c:	2b00      	cmp	r3, #0
 801272e:	dd07      	ble.n	8012740 <_dtoa_r+0x818>
 8012730:	ee18 1a10 	vmov	r1, s16
 8012734:	461a      	mov	r2, r3
 8012736:	4620      	mov	r0, r4
 8012738:	f000 fff2 	bl	8013720 <__lshift>
 801273c:	ee08 0a10 	vmov	s16, r0
 8012740:	9b05      	ldr	r3, [sp, #20]
 8012742:	2b00      	cmp	r3, #0
 8012744:	dd05      	ble.n	8012752 <_dtoa_r+0x82a>
 8012746:	4631      	mov	r1, r6
 8012748:	461a      	mov	r2, r3
 801274a:	4620      	mov	r0, r4
 801274c:	f000 ffe8 	bl	8013720 <__lshift>
 8012750:	4606      	mov	r6, r0
 8012752:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012754:	2b00      	cmp	r3, #0
 8012756:	d06e      	beq.n	8012836 <_dtoa_r+0x90e>
 8012758:	ee18 0a10 	vmov	r0, s16
 801275c:	4631      	mov	r1, r6
 801275e:	f001 f84f 	bl	8013800 <__mcmp>
 8012762:	2800      	cmp	r0, #0
 8012764:	da67      	bge.n	8012836 <_dtoa_r+0x90e>
 8012766:	9b00      	ldr	r3, [sp, #0]
 8012768:	3b01      	subs	r3, #1
 801276a:	ee18 1a10 	vmov	r1, s16
 801276e:	9300      	str	r3, [sp, #0]
 8012770:	220a      	movs	r2, #10
 8012772:	2300      	movs	r3, #0
 8012774:	4620      	mov	r0, r4
 8012776:	f000 fdd9 	bl	801332c <__multadd>
 801277a:	9b08      	ldr	r3, [sp, #32]
 801277c:	ee08 0a10 	vmov	s16, r0
 8012780:	2b00      	cmp	r3, #0
 8012782:	f000 81b1 	beq.w	8012ae8 <_dtoa_r+0xbc0>
 8012786:	2300      	movs	r3, #0
 8012788:	4639      	mov	r1, r7
 801278a:	220a      	movs	r2, #10
 801278c:	4620      	mov	r0, r4
 801278e:	f000 fdcd 	bl	801332c <__multadd>
 8012792:	9b02      	ldr	r3, [sp, #8]
 8012794:	2b00      	cmp	r3, #0
 8012796:	4607      	mov	r7, r0
 8012798:	f300 808e 	bgt.w	80128b8 <_dtoa_r+0x990>
 801279c:	9b06      	ldr	r3, [sp, #24]
 801279e:	2b02      	cmp	r3, #2
 80127a0:	dc51      	bgt.n	8012846 <_dtoa_r+0x91e>
 80127a2:	e089      	b.n	80128b8 <_dtoa_r+0x990>
 80127a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80127a6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80127aa:	e74b      	b.n	8012644 <_dtoa_r+0x71c>
 80127ac:	9b03      	ldr	r3, [sp, #12]
 80127ae:	1e5e      	subs	r6, r3, #1
 80127b0:	9b07      	ldr	r3, [sp, #28]
 80127b2:	42b3      	cmp	r3, r6
 80127b4:	bfbf      	itttt	lt
 80127b6:	9b07      	ldrlt	r3, [sp, #28]
 80127b8:	9607      	strlt	r6, [sp, #28]
 80127ba:	1af2      	sublt	r2, r6, r3
 80127bc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80127be:	bfb6      	itet	lt
 80127c0:	189b      	addlt	r3, r3, r2
 80127c2:	1b9e      	subge	r6, r3, r6
 80127c4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80127c6:	9b03      	ldr	r3, [sp, #12]
 80127c8:	bfb8      	it	lt
 80127ca:	2600      	movlt	r6, #0
 80127cc:	2b00      	cmp	r3, #0
 80127ce:	bfb7      	itett	lt
 80127d0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80127d4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80127d8:	1a9d      	sublt	r5, r3, r2
 80127da:	2300      	movlt	r3, #0
 80127dc:	e734      	b.n	8012648 <_dtoa_r+0x720>
 80127de:	9e07      	ldr	r6, [sp, #28]
 80127e0:	9d04      	ldr	r5, [sp, #16]
 80127e2:	9f08      	ldr	r7, [sp, #32]
 80127e4:	e73b      	b.n	801265e <_dtoa_r+0x736>
 80127e6:	9a07      	ldr	r2, [sp, #28]
 80127e8:	e767      	b.n	80126ba <_dtoa_r+0x792>
 80127ea:	9b06      	ldr	r3, [sp, #24]
 80127ec:	2b01      	cmp	r3, #1
 80127ee:	dc18      	bgt.n	8012822 <_dtoa_r+0x8fa>
 80127f0:	f1ba 0f00 	cmp.w	sl, #0
 80127f4:	d115      	bne.n	8012822 <_dtoa_r+0x8fa>
 80127f6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80127fa:	b993      	cbnz	r3, 8012822 <_dtoa_r+0x8fa>
 80127fc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8012800:	0d1b      	lsrs	r3, r3, #20
 8012802:	051b      	lsls	r3, r3, #20
 8012804:	b183      	cbz	r3, 8012828 <_dtoa_r+0x900>
 8012806:	9b04      	ldr	r3, [sp, #16]
 8012808:	3301      	adds	r3, #1
 801280a:	9304      	str	r3, [sp, #16]
 801280c:	9b05      	ldr	r3, [sp, #20]
 801280e:	3301      	adds	r3, #1
 8012810:	9305      	str	r3, [sp, #20]
 8012812:	f04f 0801 	mov.w	r8, #1
 8012816:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012818:	2b00      	cmp	r3, #0
 801281a:	f47f af6a 	bne.w	80126f2 <_dtoa_r+0x7ca>
 801281e:	2001      	movs	r0, #1
 8012820:	e76f      	b.n	8012702 <_dtoa_r+0x7da>
 8012822:	f04f 0800 	mov.w	r8, #0
 8012826:	e7f6      	b.n	8012816 <_dtoa_r+0x8ee>
 8012828:	4698      	mov	r8, r3
 801282a:	e7f4      	b.n	8012816 <_dtoa_r+0x8ee>
 801282c:	f43f af7d 	beq.w	801272a <_dtoa_r+0x802>
 8012830:	4618      	mov	r0, r3
 8012832:	301c      	adds	r0, #28
 8012834:	e772      	b.n	801271c <_dtoa_r+0x7f4>
 8012836:	9b03      	ldr	r3, [sp, #12]
 8012838:	2b00      	cmp	r3, #0
 801283a:	dc37      	bgt.n	80128ac <_dtoa_r+0x984>
 801283c:	9b06      	ldr	r3, [sp, #24]
 801283e:	2b02      	cmp	r3, #2
 8012840:	dd34      	ble.n	80128ac <_dtoa_r+0x984>
 8012842:	9b03      	ldr	r3, [sp, #12]
 8012844:	9302      	str	r3, [sp, #8]
 8012846:	9b02      	ldr	r3, [sp, #8]
 8012848:	b96b      	cbnz	r3, 8012866 <_dtoa_r+0x93e>
 801284a:	4631      	mov	r1, r6
 801284c:	2205      	movs	r2, #5
 801284e:	4620      	mov	r0, r4
 8012850:	f000 fd6c 	bl	801332c <__multadd>
 8012854:	4601      	mov	r1, r0
 8012856:	4606      	mov	r6, r0
 8012858:	ee18 0a10 	vmov	r0, s16
 801285c:	f000 ffd0 	bl	8013800 <__mcmp>
 8012860:	2800      	cmp	r0, #0
 8012862:	f73f adbb 	bgt.w	80123dc <_dtoa_r+0x4b4>
 8012866:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012868:	9d01      	ldr	r5, [sp, #4]
 801286a:	43db      	mvns	r3, r3
 801286c:	9300      	str	r3, [sp, #0]
 801286e:	f04f 0800 	mov.w	r8, #0
 8012872:	4631      	mov	r1, r6
 8012874:	4620      	mov	r0, r4
 8012876:	f000 fd37 	bl	80132e8 <_Bfree>
 801287a:	2f00      	cmp	r7, #0
 801287c:	f43f aea4 	beq.w	80125c8 <_dtoa_r+0x6a0>
 8012880:	f1b8 0f00 	cmp.w	r8, #0
 8012884:	d005      	beq.n	8012892 <_dtoa_r+0x96a>
 8012886:	45b8      	cmp	r8, r7
 8012888:	d003      	beq.n	8012892 <_dtoa_r+0x96a>
 801288a:	4641      	mov	r1, r8
 801288c:	4620      	mov	r0, r4
 801288e:	f000 fd2b 	bl	80132e8 <_Bfree>
 8012892:	4639      	mov	r1, r7
 8012894:	4620      	mov	r0, r4
 8012896:	f000 fd27 	bl	80132e8 <_Bfree>
 801289a:	e695      	b.n	80125c8 <_dtoa_r+0x6a0>
 801289c:	2600      	movs	r6, #0
 801289e:	4637      	mov	r7, r6
 80128a0:	e7e1      	b.n	8012866 <_dtoa_r+0x93e>
 80128a2:	9700      	str	r7, [sp, #0]
 80128a4:	4637      	mov	r7, r6
 80128a6:	e599      	b.n	80123dc <_dtoa_r+0x4b4>
 80128a8:	40240000 	.word	0x40240000
 80128ac:	9b08      	ldr	r3, [sp, #32]
 80128ae:	2b00      	cmp	r3, #0
 80128b0:	f000 80ca 	beq.w	8012a48 <_dtoa_r+0xb20>
 80128b4:	9b03      	ldr	r3, [sp, #12]
 80128b6:	9302      	str	r3, [sp, #8]
 80128b8:	2d00      	cmp	r5, #0
 80128ba:	dd05      	ble.n	80128c8 <_dtoa_r+0x9a0>
 80128bc:	4639      	mov	r1, r7
 80128be:	462a      	mov	r2, r5
 80128c0:	4620      	mov	r0, r4
 80128c2:	f000 ff2d 	bl	8013720 <__lshift>
 80128c6:	4607      	mov	r7, r0
 80128c8:	f1b8 0f00 	cmp.w	r8, #0
 80128cc:	d05b      	beq.n	8012986 <_dtoa_r+0xa5e>
 80128ce:	6879      	ldr	r1, [r7, #4]
 80128d0:	4620      	mov	r0, r4
 80128d2:	f000 fcc9 	bl	8013268 <_Balloc>
 80128d6:	4605      	mov	r5, r0
 80128d8:	b928      	cbnz	r0, 80128e6 <_dtoa_r+0x9be>
 80128da:	4b87      	ldr	r3, [pc, #540]	; (8012af8 <_dtoa_r+0xbd0>)
 80128dc:	4602      	mov	r2, r0
 80128de:	f240 21ea 	movw	r1, #746	; 0x2ea
 80128e2:	f7ff bb3b 	b.w	8011f5c <_dtoa_r+0x34>
 80128e6:	693a      	ldr	r2, [r7, #16]
 80128e8:	3202      	adds	r2, #2
 80128ea:	0092      	lsls	r2, r2, #2
 80128ec:	f107 010c 	add.w	r1, r7, #12
 80128f0:	300c      	adds	r0, #12
 80128f2:	f7fd fc13 	bl	801011c <memcpy>
 80128f6:	2201      	movs	r2, #1
 80128f8:	4629      	mov	r1, r5
 80128fa:	4620      	mov	r0, r4
 80128fc:	f000 ff10 	bl	8013720 <__lshift>
 8012900:	9b01      	ldr	r3, [sp, #4]
 8012902:	f103 0901 	add.w	r9, r3, #1
 8012906:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801290a:	4413      	add	r3, r2
 801290c:	9305      	str	r3, [sp, #20]
 801290e:	f00a 0301 	and.w	r3, sl, #1
 8012912:	46b8      	mov	r8, r7
 8012914:	9304      	str	r3, [sp, #16]
 8012916:	4607      	mov	r7, r0
 8012918:	4631      	mov	r1, r6
 801291a:	ee18 0a10 	vmov	r0, s16
 801291e:	f7ff fa77 	bl	8011e10 <quorem>
 8012922:	4641      	mov	r1, r8
 8012924:	9002      	str	r0, [sp, #8]
 8012926:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801292a:	ee18 0a10 	vmov	r0, s16
 801292e:	f000 ff67 	bl	8013800 <__mcmp>
 8012932:	463a      	mov	r2, r7
 8012934:	9003      	str	r0, [sp, #12]
 8012936:	4631      	mov	r1, r6
 8012938:	4620      	mov	r0, r4
 801293a:	f000 ff7d 	bl	8013838 <__mdiff>
 801293e:	68c2      	ldr	r2, [r0, #12]
 8012940:	f109 3bff 	add.w	fp, r9, #4294967295
 8012944:	4605      	mov	r5, r0
 8012946:	bb02      	cbnz	r2, 801298a <_dtoa_r+0xa62>
 8012948:	4601      	mov	r1, r0
 801294a:	ee18 0a10 	vmov	r0, s16
 801294e:	f000 ff57 	bl	8013800 <__mcmp>
 8012952:	4602      	mov	r2, r0
 8012954:	4629      	mov	r1, r5
 8012956:	4620      	mov	r0, r4
 8012958:	9207      	str	r2, [sp, #28]
 801295a:	f000 fcc5 	bl	80132e8 <_Bfree>
 801295e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8012962:	ea43 0102 	orr.w	r1, r3, r2
 8012966:	9b04      	ldr	r3, [sp, #16]
 8012968:	430b      	orrs	r3, r1
 801296a:	464d      	mov	r5, r9
 801296c:	d10f      	bne.n	801298e <_dtoa_r+0xa66>
 801296e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8012972:	d02a      	beq.n	80129ca <_dtoa_r+0xaa2>
 8012974:	9b03      	ldr	r3, [sp, #12]
 8012976:	2b00      	cmp	r3, #0
 8012978:	dd02      	ble.n	8012980 <_dtoa_r+0xa58>
 801297a:	9b02      	ldr	r3, [sp, #8]
 801297c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8012980:	f88b a000 	strb.w	sl, [fp]
 8012984:	e775      	b.n	8012872 <_dtoa_r+0x94a>
 8012986:	4638      	mov	r0, r7
 8012988:	e7ba      	b.n	8012900 <_dtoa_r+0x9d8>
 801298a:	2201      	movs	r2, #1
 801298c:	e7e2      	b.n	8012954 <_dtoa_r+0xa2c>
 801298e:	9b03      	ldr	r3, [sp, #12]
 8012990:	2b00      	cmp	r3, #0
 8012992:	db04      	blt.n	801299e <_dtoa_r+0xa76>
 8012994:	9906      	ldr	r1, [sp, #24]
 8012996:	430b      	orrs	r3, r1
 8012998:	9904      	ldr	r1, [sp, #16]
 801299a:	430b      	orrs	r3, r1
 801299c:	d122      	bne.n	80129e4 <_dtoa_r+0xabc>
 801299e:	2a00      	cmp	r2, #0
 80129a0:	ddee      	ble.n	8012980 <_dtoa_r+0xa58>
 80129a2:	ee18 1a10 	vmov	r1, s16
 80129a6:	2201      	movs	r2, #1
 80129a8:	4620      	mov	r0, r4
 80129aa:	f000 feb9 	bl	8013720 <__lshift>
 80129ae:	4631      	mov	r1, r6
 80129b0:	ee08 0a10 	vmov	s16, r0
 80129b4:	f000 ff24 	bl	8013800 <__mcmp>
 80129b8:	2800      	cmp	r0, #0
 80129ba:	dc03      	bgt.n	80129c4 <_dtoa_r+0xa9c>
 80129bc:	d1e0      	bne.n	8012980 <_dtoa_r+0xa58>
 80129be:	f01a 0f01 	tst.w	sl, #1
 80129c2:	d0dd      	beq.n	8012980 <_dtoa_r+0xa58>
 80129c4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80129c8:	d1d7      	bne.n	801297a <_dtoa_r+0xa52>
 80129ca:	2339      	movs	r3, #57	; 0x39
 80129cc:	f88b 3000 	strb.w	r3, [fp]
 80129d0:	462b      	mov	r3, r5
 80129d2:	461d      	mov	r5, r3
 80129d4:	3b01      	subs	r3, #1
 80129d6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80129da:	2a39      	cmp	r2, #57	; 0x39
 80129dc:	d071      	beq.n	8012ac2 <_dtoa_r+0xb9a>
 80129de:	3201      	adds	r2, #1
 80129e0:	701a      	strb	r2, [r3, #0]
 80129e2:	e746      	b.n	8012872 <_dtoa_r+0x94a>
 80129e4:	2a00      	cmp	r2, #0
 80129e6:	dd07      	ble.n	80129f8 <_dtoa_r+0xad0>
 80129e8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80129ec:	d0ed      	beq.n	80129ca <_dtoa_r+0xaa2>
 80129ee:	f10a 0301 	add.w	r3, sl, #1
 80129f2:	f88b 3000 	strb.w	r3, [fp]
 80129f6:	e73c      	b.n	8012872 <_dtoa_r+0x94a>
 80129f8:	9b05      	ldr	r3, [sp, #20]
 80129fa:	f809 ac01 	strb.w	sl, [r9, #-1]
 80129fe:	4599      	cmp	r9, r3
 8012a00:	d047      	beq.n	8012a92 <_dtoa_r+0xb6a>
 8012a02:	ee18 1a10 	vmov	r1, s16
 8012a06:	2300      	movs	r3, #0
 8012a08:	220a      	movs	r2, #10
 8012a0a:	4620      	mov	r0, r4
 8012a0c:	f000 fc8e 	bl	801332c <__multadd>
 8012a10:	45b8      	cmp	r8, r7
 8012a12:	ee08 0a10 	vmov	s16, r0
 8012a16:	f04f 0300 	mov.w	r3, #0
 8012a1a:	f04f 020a 	mov.w	r2, #10
 8012a1e:	4641      	mov	r1, r8
 8012a20:	4620      	mov	r0, r4
 8012a22:	d106      	bne.n	8012a32 <_dtoa_r+0xb0a>
 8012a24:	f000 fc82 	bl	801332c <__multadd>
 8012a28:	4680      	mov	r8, r0
 8012a2a:	4607      	mov	r7, r0
 8012a2c:	f109 0901 	add.w	r9, r9, #1
 8012a30:	e772      	b.n	8012918 <_dtoa_r+0x9f0>
 8012a32:	f000 fc7b 	bl	801332c <__multadd>
 8012a36:	4639      	mov	r1, r7
 8012a38:	4680      	mov	r8, r0
 8012a3a:	2300      	movs	r3, #0
 8012a3c:	220a      	movs	r2, #10
 8012a3e:	4620      	mov	r0, r4
 8012a40:	f000 fc74 	bl	801332c <__multadd>
 8012a44:	4607      	mov	r7, r0
 8012a46:	e7f1      	b.n	8012a2c <_dtoa_r+0xb04>
 8012a48:	9b03      	ldr	r3, [sp, #12]
 8012a4a:	9302      	str	r3, [sp, #8]
 8012a4c:	9d01      	ldr	r5, [sp, #4]
 8012a4e:	ee18 0a10 	vmov	r0, s16
 8012a52:	4631      	mov	r1, r6
 8012a54:	f7ff f9dc 	bl	8011e10 <quorem>
 8012a58:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8012a5c:	9b01      	ldr	r3, [sp, #4]
 8012a5e:	f805 ab01 	strb.w	sl, [r5], #1
 8012a62:	1aea      	subs	r2, r5, r3
 8012a64:	9b02      	ldr	r3, [sp, #8]
 8012a66:	4293      	cmp	r3, r2
 8012a68:	dd09      	ble.n	8012a7e <_dtoa_r+0xb56>
 8012a6a:	ee18 1a10 	vmov	r1, s16
 8012a6e:	2300      	movs	r3, #0
 8012a70:	220a      	movs	r2, #10
 8012a72:	4620      	mov	r0, r4
 8012a74:	f000 fc5a 	bl	801332c <__multadd>
 8012a78:	ee08 0a10 	vmov	s16, r0
 8012a7c:	e7e7      	b.n	8012a4e <_dtoa_r+0xb26>
 8012a7e:	9b02      	ldr	r3, [sp, #8]
 8012a80:	2b00      	cmp	r3, #0
 8012a82:	bfc8      	it	gt
 8012a84:	461d      	movgt	r5, r3
 8012a86:	9b01      	ldr	r3, [sp, #4]
 8012a88:	bfd8      	it	le
 8012a8a:	2501      	movle	r5, #1
 8012a8c:	441d      	add	r5, r3
 8012a8e:	f04f 0800 	mov.w	r8, #0
 8012a92:	ee18 1a10 	vmov	r1, s16
 8012a96:	2201      	movs	r2, #1
 8012a98:	4620      	mov	r0, r4
 8012a9a:	f000 fe41 	bl	8013720 <__lshift>
 8012a9e:	4631      	mov	r1, r6
 8012aa0:	ee08 0a10 	vmov	s16, r0
 8012aa4:	f000 feac 	bl	8013800 <__mcmp>
 8012aa8:	2800      	cmp	r0, #0
 8012aaa:	dc91      	bgt.n	80129d0 <_dtoa_r+0xaa8>
 8012aac:	d102      	bne.n	8012ab4 <_dtoa_r+0xb8c>
 8012aae:	f01a 0f01 	tst.w	sl, #1
 8012ab2:	d18d      	bne.n	80129d0 <_dtoa_r+0xaa8>
 8012ab4:	462b      	mov	r3, r5
 8012ab6:	461d      	mov	r5, r3
 8012ab8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012abc:	2a30      	cmp	r2, #48	; 0x30
 8012abe:	d0fa      	beq.n	8012ab6 <_dtoa_r+0xb8e>
 8012ac0:	e6d7      	b.n	8012872 <_dtoa_r+0x94a>
 8012ac2:	9a01      	ldr	r2, [sp, #4]
 8012ac4:	429a      	cmp	r2, r3
 8012ac6:	d184      	bne.n	80129d2 <_dtoa_r+0xaaa>
 8012ac8:	9b00      	ldr	r3, [sp, #0]
 8012aca:	3301      	adds	r3, #1
 8012acc:	9300      	str	r3, [sp, #0]
 8012ace:	2331      	movs	r3, #49	; 0x31
 8012ad0:	7013      	strb	r3, [r2, #0]
 8012ad2:	e6ce      	b.n	8012872 <_dtoa_r+0x94a>
 8012ad4:	4b09      	ldr	r3, [pc, #36]	; (8012afc <_dtoa_r+0xbd4>)
 8012ad6:	f7ff ba95 	b.w	8012004 <_dtoa_r+0xdc>
 8012ada:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012adc:	2b00      	cmp	r3, #0
 8012ade:	f47f aa6e 	bne.w	8011fbe <_dtoa_r+0x96>
 8012ae2:	4b07      	ldr	r3, [pc, #28]	; (8012b00 <_dtoa_r+0xbd8>)
 8012ae4:	f7ff ba8e 	b.w	8012004 <_dtoa_r+0xdc>
 8012ae8:	9b02      	ldr	r3, [sp, #8]
 8012aea:	2b00      	cmp	r3, #0
 8012aec:	dcae      	bgt.n	8012a4c <_dtoa_r+0xb24>
 8012aee:	9b06      	ldr	r3, [sp, #24]
 8012af0:	2b02      	cmp	r3, #2
 8012af2:	f73f aea8 	bgt.w	8012846 <_dtoa_r+0x91e>
 8012af6:	e7a9      	b.n	8012a4c <_dtoa_r+0xb24>
 8012af8:	08016b61 	.word	0x08016b61
 8012afc:	08016d59 	.word	0x08016d59
 8012b00:	08016af9 	.word	0x08016af9

08012b04 <fiprintf>:
 8012b04:	b40e      	push	{r1, r2, r3}
 8012b06:	b503      	push	{r0, r1, lr}
 8012b08:	4601      	mov	r1, r0
 8012b0a:	ab03      	add	r3, sp, #12
 8012b0c:	4805      	ldr	r0, [pc, #20]	; (8012b24 <fiprintf+0x20>)
 8012b0e:	f853 2b04 	ldr.w	r2, [r3], #4
 8012b12:	6800      	ldr	r0, [r0, #0]
 8012b14:	9301      	str	r3, [sp, #4]
 8012b16:	f001 fcb7 	bl	8014488 <_vfiprintf_r>
 8012b1a:	b002      	add	sp, #8
 8012b1c:	f85d eb04 	ldr.w	lr, [sp], #4
 8012b20:	b003      	add	sp, #12
 8012b22:	4770      	bx	lr
 8012b24:	2000038c 	.word	0x2000038c

08012b28 <rshift>:
 8012b28:	6903      	ldr	r3, [r0, #16]
 8012b2a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8012b2e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012b32:	ea4f 1261 	mov.w	r2, r1, asr #5
 8012b36:	f100 0414 	add.w	r4, r0, #20
 8012b3a:	dd45      	ble.n	8012bc8 <rshift+0xa0>
 8012b3c:	f011 011f 	ands.w	r1, r1, #31
 8012b40:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8012b44:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8012b48:	d10c      	bne.n	8012b64 <rshift+0x3c>
 8012b4a:	f100 0710 	add.w	r7, r0, #16
 8012b4e:	4629      	mov	r1, r5
 8012b50:	42b1      	cmp	r1, r6
 8012b52:	d334      	bcc.n	8012bbe <rshift+0x96>
 8012b54:	1a9b      	subs	r3, r3, r2
 8012b56:	009b      	lsls	r3, r3, #2
 8012b58:	1eea      	subs	r2, r5, #3
 8012b5a:	4296      	cmp	r6, r2
 8012b5c:	bf38      	it	cc
 8012b5e:	2300      	movcc	r3, #0
 8012b60:	4423      	add	r3, r4
 8012b62:	e015      	b.n	8012b90 <rshift+0x68>
 8012b64:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8012b68:	f1c1 0820 	rsb	r8, r1, #32
 8012b6c:	40cf      	lsrs	r7, r1
 8012b6e:	f105 0e04 	add.w	lr, r5, #4
 8012b72:	46a1      	mov	r9, r4
 8012b74:	4576      	cmp	r6, lr
 8012b76:	46f4      	mov	ip, lr
 8012b78:	d815      	bhi.n	8012ba6 <rshift+0x7e>
 8012b7a:	1a9a      	subs	r2, r3, r2
 8012b7c:	0092      	lsls	r2, r2, #2
 8012b7e:	3a04      	subs	r2, #4
 8012b80:	3501      	adds	r5, #1
 8012b82:	42ae      	cmp	r6, r5
 8012b84:	bf38      	it	cc
 8012b86:	2200      	movcc	r2, #0
 8012b88:	18a3      	adds	r3, r4, r2
 8012b8a:	50a7      	str	r7, [r4, r2]
 8012b8c:	b107      	cbz	r7, 8012b90 <rshift+0x68>
 8012b8e:	3304      	adds	r3, #4
 8012b90:	1b1a      	subs	r2, r3, r4
 8012b92:	42a3      	cmp	r3, r4
 8012b94:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8012b98:	bf08      	it	eq
 8012b9a:	2300      	moveq	r3, #0
 8012b9c:	6102      	str	r2, [r0, #16]
 8012b9e:	bf08      	it	eq
 8012ba0:	6143      	streq	r3, [r0, #20]
 8012ba2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012ba6:	f8dc c000 	ldr.w	ip, [ip]
 8012baa:	fa0c fc08 	lsl.w	ip, ip, r8
 8012bae:	ea4c 0707 	orr.w	r7, ip, r7
 8012bb2:	f849 7b04 	str.w	r7, [r9], #4
 8012bb6:	f85e 7b04 	ldr.w	r7, [lr], #4
 8012bba:	40cf      	lsrs	r7, r1
 8012bbc:	e7da      	b.n	8012b74 <rshift+0x4c>
 8012bbe:	f851 cb04 	ldr.w	ip, [r1], #4
 8012bc2:	f847 cf04 	str.w	ip, [r7, #4]!
 8012bc6:	e7c3      	b.n	8012b50 <rshift+0x28>
 8012bc8:	4623      	mov	r3, r4
 8012bca:	e7e1      	b.n	8012b90 <rshift+0x68>

08012bcc <__hexdig_fun>:
 8012bcc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8012bd0:	2b09      	cmp	r3, #9
 8012bd2:	d802      	bhi.n	8012bda <__hexdig_fun+0xe>
 8012bd4:	3820      	subs	r0, #32
 8012bd6:	b2c0      	uxtb	r0, r0
 8012bd8:	4770      	bx	lr
 8012bda:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8012bde:	2b05      	cmp	r3, #5
 8012be0:	d801      	bhi.n	8012be6 <__hexdig_fun+0x1a>
 8012be2:	3847      	subs	r0, #71	; 0x47
 8012be4:	e7f7      	b.n	8012bd6 <__hexdig_fun+0xa>
 8012be6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8012bea:	2b05      	cmp	r3, #5
 8012bec:	d801      	bhi.n	8012bf2 <__hexdig_fun+0x26>
 8012bee:	3827      	subs	r0, #39	; 0x27
 8012bf0:	e7f1      	b.n	8012bd6 <__hexdig_fun+0xa>
 8012bf2:	2000      	movs	r0, #0
 8012bf4:	4770      	bx	lr
	...

08012bf8 <__gethex>:
 8012bf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012bfc:	ed2d 8b02 	vpush	{d8}
 8012c00:	b089      	sub	sp, #36	; 0x24
 8012c02:	ee08 0a10 	vmov	s16, r0
 8012c06:	9304      	str	r3, [sp, #16]
 8012c08:	4bb4      	ldr	r3, [pc, #720]	; (8012edc <__gethex+0x2e4>)
 8012c0a:	681b      	ldr	r3, [r3, #0]
 8012c0c:	9301      	str	r3, [sp, #4]
 8012c0e:	4618      	mov	r0, r3
 8012c10:	468b      	mov	fp, r1
 8012c12:	4690      	mov	r8, r2
 8012c14:	f7ed fb06 	bl	8000224 <strlen>
 8012c18:	9b01      	ldr	r3, [sp, #4]
 8012c1a:	f8db 2000 	ldr.w	r2, [fp]
 8012c1e:	4403      	add	r3, r0
 8012c20:	4682      	mov	sl, r0
 8012c22:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8012c26:	9305      	str	r3, [sp, #20]
 8012c28:	1c93      	adds	r3, r2, #2
 8012c2a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8012c2e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8012c32:	32fe      	adds	r2, #254	; 0xfe
 8012c34:	18d1      	adds	r1, r2, r3
 8012c36:	461f      	mov	r7, r3
 8012c38:	f813 0b01 	ldrb.w	r0, [r3], #1
 8012c3c:	9100      	str	r1, [sp, #0]
 8012c3e:	2830      	cmp	r0, #48	; 0x30
 8012c40:	d0f8      	beq.n	8012c34 <__gethex+0x3c>
 8012c42:	f7ff ffc3 	bl	8012bcc <__hexdig_fun>
 8012c46:	4604      	mov	r4, r0
 8012c48:	2800      	cmp	r0, #0
 8012c4a:	d13a      	bne.n	8012cc2 <__gethex+0xca>
 8012c4c:	9901      	ldr	r1, [sp, #4]
 8012c4e:	4652      	mov	r2, sl
 8012c50:	4638      	mov	r0, r7
 8012c52:	f001 fefd 	bl	8014a50 <strncmp>
 8012c56:	4605      	mov	r5, r0
 8012c58:	2800      	cmp	r0, #0
 8012c5a:	d168      	bne.n	8012d2e <__gethex+0x136>
 8012c5c:	f817 000a 	ldrb.w	r0, [r7, sl]
 8012c60:	eb07 060a 	add.w	r6, r7, sl
 8012c64:	f7ff ffb2 	bl	8012bcc <__hexdig_fun>
 8012c68:	2800      	cmp	r0, #0
 8012c6a:	d062      	beq.n	8012d32 <__gethex+0x13a>
 8012c6c:	4633      	mov	r3, r6
 8012c6e:	7818      	ldrb	r0, [r3, #0]
 8012c70:	2830      	cmp	r0, #48	; 0x30
 8012c72:	461f      	mov	r7, r3
 8012c74:	f103 0301 	add.w	r3, r3, #1
 8012c78:	d0f9      	beq.n	8012c6e <__gethex+0x76>
 8012c7a:	f7ff ffa7 	bl	8012bcc <__hexdig_fun>
 8012c7e:	2301      	movs	r3, #1
 8012c80:	fab0 f480 	clz	r4, r0
 8012c84:	0964      	lsrs	r4, r4, #5
 8012c86:	4635      	mov	r5, r6
 8012c88:	9300      	str	r3, [sp, #0]
 8012c8a:	463a      	mov	r2, r7
 8012c8c:	4616      	mov	r6, r2
 8012c8e:	3201      	adds	r2, #1
 8012c90:	7830      	ldrb	r0, [r6, #0]
 8012c92:	f7ff ff9b 	bl	8012bcc <__hexdig_fun>
 8012c96:	2800      	cmp	r0, #0
 8012c98:	d1f8      	bne.n	8012c8c <__gethex+0x94>
 8012c9a:	9901      	ldr	r1, [sp, #4]
 8012c9c:	4652      	mov	r2, sl
 8012c9e:	4630      	mov	r0, r6
 8012ca0:	f001 fed6 	bl	8014a50 <strncmp>
 8012ca4:	b980      	cbnz	r0, 8012cc8 <__gethex+0xd0>
 8012ca6:	b94d      	cbnz	r5, 8012cbc <__gethex+0xc4>
 8012ca8:	eb06 050a 	add.w	r5, r6, sl
 8012cac:	462a      	mov	r2, r5
 8012cae:	4616      	mov	r6, r2
 8012cb0:	3201      	adds	r2, #1
 8012cb2:	7830      	ldrb	r0, [r6, #0]
 8012cb4:	f7ff ff8a 	bl	8012bcc <__hexdig_fun>
 8012cb8:	2800      	cmp	r0, #0
 8012cba:	d1f8      	bne.n	8012cae <__gethex+0xb6>
 8012cbc:	1bad      	subs	r5, r5, r6
 8012cbe:	00ad      	lsls	r5, r5, #2
 8012cc0:	e004      	b.n	8012ccc <__gethex+0xd4>
 8012cc2:	2400      	movs	r4, #0
 8012cc4:	4625      	mov	r5, r4
 8012cc6:	e7e0      	b.n	8012c8a <__gethex+0x92>
 8012cc8:	2d00      	cmp	r5, #0
 8012cca:	d1f7      	bne.n	8012cbc <__gethex+0xc4>
 8012ccc:	7833      	ldrb	r3, [r6, #0]
 8012cce:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8012cd2:	2b50      	cmp	r3, #80	; 0x50
 8012cd4:	d13b      	bne.n	8012d4e <__gethex+0x156>
 8012cd6:	7873      	ldrb	r3, [r6, #1]
 8012cd8:	2b2b      	cmp	r3, #43	; 0x2b
 8012cda:	d02c      	beq.n	8012d36 <__gethex+0x13e>
 8012cdc:	2b2d      	cmp	r3, #45	; 0x2d
 8012cde:	d02e      	beq.n	8012d3e <__gethex+0x146>
 8012ce0:	1c71      	adds	r1, r6, #1
 8012ce2:	f04f 0900 	mov.w	r9, #0
 8012ce6:	7808      	ldrb	r0, [r1, #0]
 8012ce8:	f7ff ff70 	bl	8012bcc <__hexdig_fun>
 8012cec:	1e43      	subs	r3, r0, #1
 8012cee:	b2db      	uxtb	r3, r3
 8012cf0:	2b18      	cmp	r3, #24
 8012cf2:	d82c      	bhi.n	8012d4e <__gethex+0x156>
 8012cf4:	f1a0 0210 	sub.w	r2, r0, #16
 8012cf8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8012cfc:	f7ff ff66 	bl	8012bcc <__hexdig_fun>
 8012d00:	1e43      	subs	r3, r0, #1
 8012d02:	b2db      	uxtb	r3, r3
 8012d04:	2b18      	cmp	r3, #24
 8012d06:	d91d      	bls.n	8012d44 <__gethex+0x14c>
 8012d08:	f1b9 0f00 	cmp.w	r9, #0
 8012d0c:	d000      	beq.n	8012d10 <__gethex+0x118>
 8012d0e:	4252      	negs	r2, r2
 8012d10:	4415      	add	r5, r2
 8012d12:	f8cb 1000 	str.w	r1, [fp]
 8012d16:	b1e4      	cbz	r4, 8012d52 <__gethex+0x15a>
 8012d18:	9b00      	ldr	r3, [sp, #0]
 8012d1a:	2b00      	cmp	r3, #0
 8012d1c:	bf14      	ite	ne
 8012d1e:	2700      	movne	r7, #0
 8012d20:	2706      	moveq	r7, #6
 8012d22:	4638      	mov	r0, r7
 8012d24:	b009      	add	sp, #36	; 0x24
 8012d26:	ecbd 8b02 	vpop	{d8}
 8012d2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d2e:	463e      	mov	r6, r7
 8012d30:	4625      	mov	r5, r4
 8012d32:	2401      	movs	r4, #1
 8012d34:	e7ca      	b.n	8012ccc <__gethex+0xd4>
 8012d36:	f04f 0900 	mov.w	r9, #0
 8012d3a:	1cb1      	adds	r1, r6, #2
 8012d3c:	e7d3      	b.n	8012ce6 <__gethex+0xee>
 8012d3e:	f04f 0901 	mov.w	r9, #1
 8012d42:	e7fa      	b.n	8012d3a <__gethex+0x142>
 8012d44:	230a      	movs	r3, #10
 8012d46:	fb03 0202 	mla	r2, r3, r2, r0
 8012d4a:	3a10      	subs	r2, #16
 8012d4c:	e7d4      	b.n	8012cf8 <__gethex+0x100>
 8012d4e:	4631      	mov	r1, r6
 8012d50:	e7df      	b.n	8012d12 <__gethex+0x11a>
 8012d52:	1bf3      	subs	r3, r6, r7
 8012d54:	3b01      	subs	r3, #1
 8012d56:	4621      	mov	r1, r4
 8012d58:	2b07      	cmp	r3, #7
 8012d5a:	dc0b      	bgt.n	8012d74 <__gethex+0x17c>
 8012d5c:	ee18 0a10 	vmov	r0, s16
 8012d60:	f000 fa82 	bl	8013268 <_Balloc>
 8012d64:	4604      	mov	r4, r0
 8012d66:	b940      	cbnz	r0, 8012d7a <__gethex+0x182>
 8012d68:	4b5d      	ldr	r3, [pc, #372]	; (8012ee0 <__gethex+0x2e8>)
 8012d6a:	4602      	mov	r2, r0
 8012d6c:	21de      	movs	r1, #222	; 0xde
 8012d6e:	485d      	ldr	r0, [pc, #372]	; (8012ee4 <__gethex+0x2ec>)
 8012d70:	f7ff f820 	bl	8011db4 <__assert_func>
 8012d74:	3101      	adds	r1, #1
 8012d76:	105b      	asrs	r3, r3, #1
 8012d78:	e7ee      	b.n	8012d58 <__gethex+0x160>
 8012d7a:	f100 0914 	add.w	r9, r0, #20
 8012d7e:	f04f 0b00 	mov.w	fp, #0
 8012d82:	f1ca 0301 	rsb	r3, sl, #1
 8012d86:	f8cd 9008 	str.w	r9, [sp, #8]
 8012d8a:	f8cd b000 	str.w	fp, [sp]
 8012d8e:	9306      	str	r3, [sp, #24]
 8012d90:	42b7      	cmp	r7, r6
 8012d92:	d340      	bcc.n	8012e16 <__gethex+0x21e>
 8012d94:	9802      	ldr	r0, [sp, #8]
 8012d96:	9b00      	ldr	r3, [sp, #0]
 8012d98:	f840 3b04 	str.w	r3, [r0], #4
 8012d9c:	eba0 0009 	sub.w	r0, r0, r9
 8012da0:	1080      	asrs	r0, r0, #2
 8012da2:	0146      	lsls	r6, r0, #5
 8012da4:	6120      	str	r0, [r4, #16]
 8012da6:	4618      	mov	r0, r3
 8012da8:	f000 fb50 	bl	801344c <__hi0bits>
 8012dac:	1a30      	subs	r0, r6, r0
 8012dae:	f8d8 6000 	ldr.w	r6, [r8]
 8012db2:	42b0      	cmp	r0, r6
 8012db4:	dd63      	ble.n	8012e7e <__gethex+0x286>
 8012db6:	1b87      	subs	r7, r0, r6
 8012db8:	4639      	mov	r1, r7
 8012dba:	4620      	mov	r0, r4
 8012dbc:	f000 fef4 	bl	8013ba8 <__any_on>
 8012dc0:	4682      	mov	sl, r0
 8012dc2:	b1a8      	cbz	r0, 8012df0 <__gethex+0x1f8>
 8012dc4:	1e7b      	subs	r3, r7, #1
 8012dc6:	1159      	asrs	r1, r3, #5
 8012dc8:	f003 021f 	and.w	r2, r3, #31
 8012dcc:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8012dd0:	f04f 0a01 	mov.w	sl, #1
 8012dd4:	fa0a f202 	lsl.w	r2, sl, r2
 8012dd8:	420a      	tst	r2, r1
 8012dda:	d009      	beq.n	8012df0 <__gethex+0x1f8>
 8012ddc:	4553      	cmp	r3, sl
 8012dde:	dd05      	ble.n	8012dec <__gethex+0x1f4>
 8012de0:	1eb9      	subs	r1, r7, #2
 8012de2:	4620      	mov	r0, r4
 8012de4:	f000 fee0 	bl	8013ba8 <__any_on>
 8012de8:	2800      	cmp	r0, #0
 8012dea:	d145      	bne.n	8012e78 <__gethex+0x280>
 8012dec:	f04f 0a02 	mov.w	sl, #2
 8012df0:	4639      	mov	r1, r7
 8012df2:	4620      	mov	r0, r4
 8012df4:	f7ff fe98 	bl	8012b28 <rshift>
 8012df8:	443d      	add	r5, r7
 8012dfa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8012dfe:	42ab      	cmp	r3, r5
 8012e00:	da4c      	bge.n	8012e9c <__gethex+0x2a4>
 8012e02:	ee18 0a10 	vmov	r0, s16
 8012e06:	4621      	mov	r1, r4
 8012e08:	f000 fa6e 	bl	80132e8 <_Bfree>
 8012e0c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8012e0e:	2300      	movs	r3, #0
 8012e10:	6013      	str	r3, [r2, #0]
 8012e12:	27a3      	movs	r7, #163	; 0xa3
 8012e14:	e785      	b.n	8012d22 <__gethex+0x12a>
 8012e16:	1e73      	subs	r3, r6, #1
 8012e18:	9a05      	ldr	r2, [sp, #20]
 8012e1a:	9303      	str	r3, [sp, #12]
 8012e1c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8012e20:	4293      	cmp	r3, r2
 8012e22:	d019      	beq.n	8012e58 <__gethex+0x260>
 8012e24:	f1bb 0f20 	cmp.w	fp, #32
 8012e28:	d107      	bne.n	8012e3a <__gethex+0x242>
 8012e2a:	9b02      	ldr	r3, [sp, #8]
 8012e2c:	9a00      	ldr	r2, [sp, #0]
 8012e2e:	f843 2b04 	str.w	r2, [r3], #4
 8012e32:	9302      	str	r3, [sp, #8]
 8012e34:	2300      	movs	r3, #0
 8012e36:	9300      	str	r3, [sp, #0]
 8012e38:	469b      	mov	fp, r3
 8012e3a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8012e3e:	f7ff fec5 	bl	8012bcc <__hexdig_fun>
 8012e42:	9b00      	ldr	r3, [sp, #0]
 8012e44:	f000 000f 	and.w	r0, r0, #15
 8012e48:	fa00 f00b 	lsl.w	r0, r0, fp
 8012e4c:	4303      	orrs	r3, r0
 8012e4e:	9300      	str	r3, [sp, #0]
 8012e50:	f10b 0b04 	add.w	fp, fp, #4
 8012e54:	9b03      	ldr	r3, [sp, #12]
 8012e56:	e00d      	b.n	8012e74 <__gethex+0x27c>
 8012e58:	9b03      	ldr	r3, [sp, #12]
 8012e5a:	9a06      	ldr	r2, [sp, #24]
 8012e5c:	4413      	add	r3, r2
 8012e5e:	42bb      	cmp	r3, r7
 8012e60:	d3e0      	bcc.n	8012e24 <__gethex+0x22c>
 8012e62:	4618      	mov	r0, r3
 8012e64:	9901      	ldr	r1, [sp, #4]
 8012e66:	9307      	str	r3, [sp, #28]
 8012e68:	4652      	mov	r2, sl
 8012e6a:	f001 fdf1 	bl	8014a50 <strncmp>
 8012e6e:	9b07      	ldr	r3, [sp, #28]
 8012e70:	2800      	cmp	r0, #0
 8012e72:	d1d7      	bne.n	8012e24 <__gethex+0x22c>
 8012e74:	461e      	mov	r6, r3
 8012e76:	e78b      	b.n	8012d90 <__gethex+0x198>
 8012e78:	f04f 0a03 	mov.w	sl, #3
 8012e7c:	e7b8      	b.n	8012df0 <__gethex+0x1f8>
 8012e7e:	da0a      	bge.n	8012e96 <__gethex+0x29e>
 8012e80:	1a37      	subs	r7, r6, r0
 8012e82:	4621      	mov	r1, r4
 8012e84:	ee18 0a10 	vmov	r0, s16
 8012e88:	463a      	mov	r2, r7
 8012e8a:	f000 fc49 	bl	8013720 <__lshift>
 8012e8e:	1bed      	subs	r5, r5, r7
 8012e90:	4604      	mov	r4, r0
 8012e92:	f100 0914 	add.w	r9, r0, #20
 8012e96:	f04f 0a00 	mov.w	sl, #0
 8012e9a:	e7ae      	b.n	8012dfa <__gethex+0x202>
 8012e9c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8012ea0:	42a8      	cmp	r0, r5
 8012ea2:	dd72      	ble.n	8012f8a <__gethex+0x392>
 8012ea4:	1b45      	subs	r5, r0, r5
 8012ea6:	42ae      	cmp	r6, r5
 8012ea8:	dc36      	bgt.n	8012f18 <__gethex+0x320>
 8012eaa:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8012eae:	2b02      	cmp	r3, #2
 8012eb0:	d02a      	beq.n	8012f08 <__gethex+0x310>
 8012eb2:	2b03      	cmp	r3, #3
 8012eb4:	d02c      	beq.n	8012f10 <__gethex+0x318>
 8012eb6:	2b01      	cmp	r3, #1
 8012eb8:	d11c      	bne.n	8012ef4 <__gethex+0x2fc>
 8012eba:	42ae      	cmp	r6, r5
 8012ebc:	d11a      	bne.n	8012ef4 <__gethex+0x2fc>
 8012ebe:	2e01      	cmp	r6, #1
 8012ec0:	d112      	bne.n	8012ee8 <__gethex+0x2f0>
 8012ec2:	9a04      	ldr	r2, [sp, #16]
 8012ec4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8012ec8:	6013      	str	r3, [r2, #0]
 8012eca:	2301      	movs	r3, #1
 8012ecc:	6123      	str	r3, [r4, #16]
 8012ece:	f8c9 3000 	str.w	r3, [r9]
 8012ed2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012ed4:	2762      	movs	r7, #98	; 0x62
 8012ed6:	601c      	str	r4, [r3, #0]
 8012ed8:	e723      	b.n	8012d22 <__gethex+0x12a>
 8012eda:	bf00      	nop
 8012edc:	08016bd8 	.word	0x08016bd8
 8012ee0:	08016b61 	.word	0x08016b61
 8012ee4:	08016b72 	.word	0x08016b72
 8012ee8:	1e71      	subs	r1, r6, #1
 8012eea:	4620      	mov	r0, r4
 8012eec:	f000 fe5c 	bl	8013ba8 <__any_on>
 8012ef0:	2800      	cmp	r0, #0
 8012ef2:	d1e6      	bne.n	8012ec2 <__gethex+0x2ca>
 8012ef4:	ee18 0a10 	vmov	r0, s16
 8012ef8:	4621      	mov	r1, r4
 8012efa:	f000 f9f5 	bl	80132e8 <_Bfree>
 8012efe:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8012f00:	2300      	movs	r3, #0
 8012f02:	6013      	str	r3, [r2, #0]
 8012f04:	2750      	movs	r7, #80	; 0x50
 8012f06:	e70c      	b.n	8012d22 <__gethex+0x12a>
 8012f08:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012f0a:	2b00      	cmp	r3, #0
 8012f0c:	d1f2      	bne.n	8012ef4 <__gethex+0x2fc>
 8012f0e:	e7d8      	b.n	8012ec2 <__gethex+0x2ca>
 8012f10:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012f12:	2b00      	cmp	r3, #0
 8012f14:	d1d5      	bne.n	8012ec2 <__gethex+0x2ca>
 8012f16:	e7ed      	b.n	8012ef4 <__gethex+0x2fc>
 8012f18:	1e6f      	subs	r7, r5, #1
 8012f1a:	f1ba 0f00 	cmp.w	sl, #0
 8012f1e:	d131      	bne.n	8012f84 <__gethex+0x38c>
 8012f20:	b127      	cbz	r7, 8012f2c <__gethex+0x334>
 8012f22:	4639      	mov	r1, r7
 8012f24:	4620      	mov	r0, r4
 8012f26:	f000 fe3f 	bl	8013ba8 <__any_on>
 8012f2a:	4682      	mov	sl, r0
 8012f2c:	117b      	asrs	r3, r7, #5
 8012f2e:	2101      	movs	r1, #1
 8012f30:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8012f34:	f007 071f 	and.w	r7, r7, #31
 8012f38:	fa01 f707 	lsl.w	r7, r1, r7
 8012f3c:	421f      	tst	r7, r3
 8012f3e:	4629      	mov	r1, r5
 8012f40:	4620      	mov	r0, r4
 8012f42:	bf18      	it	ne
 8012f44:	f04a 0a02 	orrne.w	sl, sl, #2
 8012f48:	1b76      	subs	r6, r6, r5
 8012f4a:	f7ff fded 	bl	8012b28 <rshift>
 8012f4e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8012f52:	2702      	movs	r7, #2
 8012f54:	f1ba 0f00 	cmp.w	sl, #0
 8012f58:	d048      	beq.n	8012fec <__gethex+0x3f4>
 8012f5a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8012f5e:	2b02      	cmp	r3, #2
 8012f60:	d015      	beq.n	8012f8e <__gethex+0x396>
 8012f62:	2b03      	cmp	r3, #3
 8012f64:	d017      	beq.n	8012f96 <__gethex+0x39e>
 8012f66:	2b01      	cmp	r3, #1
 8012f68:	d109      	bne.n	8012f7e <__gethex+0x386>
 8012f6a:	f01a 0f02 	tst.w	sl, #2
 8012f6e:	d006      	beq.n	8012f7e <__gethex+0x386>
 8012f70:	f8d9 0000 	ldr.w	r0, [r9]
 8012f74:	ea4a 0a00 	orr.w	sl, sl, r0
 8012f78:	f01a 0f01 	tst.w	sl, #1
 8012f7c:	d10e      	bne.n	8012f9c <__gethex+0x3a4>
 8012f7e:	f047 0710 	orr.w	r7, r7, #16
 8012f82:	e033      	b.n	8012fec <__gethex+0x3f4>
 8012f84:	f04f 0a01 	mov.w	sl, #1
 8012f88:	e7d0      	b.n	8012f2c <__gethex+0x334>
 8012f8a:	2701      	movs	r7, #1
 8012f8c:	e7e2      	b.n	8012f54 <__gethex+0x35c>
 8012f8e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012f90:	f1c3 0301 	rsb	r3, r3, #1
 8012f94:	9315      	str	r3, [sp, #84]	; 0x54
 8012f96:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012f98:	2b00      	cmp	r3, #0
 8012f9a:	d0f0      	beq.n	8012f7e <__gethex+0x386>
 8012f9c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8012fa0:	f104 0314 	add.w	r3, r4, #20
 8012fa4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8012fa8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8012fac:	f04f 0c00 	mov.w	ip, #0
 8012fb0:	4618      	mov	r0, r3
 8012fb2:	f853 2b04 	ldr.w	r2, [r3], #4
 8012fb6:	f1b2 3fff 	cmp.w	r2, #4294967295
 8012fba:	d01c      	beq.n	8012ff6 <__gethex+0x3fe>
 8012fbc:	3201      	adds	r2, #1
 8012fbe:	6002      	str	r2, [r0, #0]
 8012fc0:	2f02      	cmp	r7, #2
 8012fc2:	f104 0314 	add.w	r3, r4, #20
 8012fc6:	d13f      	bne.n	8013048 <__gethex+0x450>
 8012fc8:	f8d8 2000 	ldr.w	r2, [r8]
 8012fcc:	3a01      	subs	r2, #1
 8012fce:	42b2      	cmp	r2, r6
 8012fd0:	d10a      	bne.n	8012fe8 <__gethex+0x3f0>
 8012fd2:	1171      	asrs	r1, r6, #5
 8012fd4:	2201      	movs	r2, #1
 8012fd6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8012fda:	f006 061f 	and.w	r6, r6, #31
 8012fde:	fa02 f606 	lsl.w	r6, r2, r6
 8012fe2:	421e      	tst	r6, r3
 8012fe4:	bf18      	it	ne
 8012fe6:	4617      	movne	r7, r2
 8012fe8:	f047 0720 	orr.w	r7, r7, #32
 8012fec:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012fee:	601c      	str	r4, [r3, #0]
 8012ff0:	9b04      	ldr	r3, [sp, #16]
 8012ff2:	601d      	str	r5, [r3, #0]
 8012ff4:	e695      	b.n	8012d22 <__gethex+0x12a>
 8012ff6:	4299      	cmp	r1, r3
 8012ff8:	f843 cc04 	str.w	ip, [r3, #-4]
 8012ffc:	d8d8      	bhi.n	8012fb0 <__gethex+0x3b8>
 8012ffe:	68a3      	ldr	r3, [r4, #8]
 8013000:	459b      	cmp	fp, r3
 8013002:	db19      	blt.n	8013038 <__gethex+0x440>
 8013004:	6861      	ldr	r1, [r4, #4]
 8013006:	ee18 0a10 	vmov	r0, s16
 801300a:	3101      	adds	r1, #1
 801300c:	f000 f92c 	bl	8013268 <_Balloc>
 8013010:	4681      	mov	r9, r0
 8013012:	b918      	cbnz	r0, 801301c <__gethex+0x424>
 8013014:	4b1a      	ldr	r3, [pc, #104]	; (8013080 <__gethex+0x488>)
 8013016:	4602      	mov	r2, r0
 8013018:	2184      	movs	r1, #132	; 0x84
 801301a:	e6a8      	b.n	8012d6e <__gethex+0x176>
 801301c:	6922      	ldr	r2, [r4, #16]
 801301e:	3202      	adds	r2, #2
 8013020:	f104 010c 	add.w	r1, r4, #12
 8013024:	0092      	lsls	r2, r2, #2
 8013026:	300c      	adds	r0, #12
 8013028:	f7fd f878 	bl	801011c <memcpy>
 801302c:	4621      	mov	r1, r4
 801302e:	ee18 0a10 	vmov	r0, s16
 8013032:	f000 f959 	bl	80132e8 <_Bfree>
 8013036:	464c      	mov	r4, r9
 8013038:	6923      	ldr	r3, [r4, #16]
 801303a:	1c5a      	adds	r2, r3, #1
 801303c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8013040:	6122      	str	r2, [r4, #16]
 8013042:	2201      	movs	r2, #1
 8013044:	615a      	str	r2, [r3, #20]
 8013046:	e7bb      	b.n	8012fc0 <__gethex+0x3c8>
 8013048:	6922      	ldr	r2, [r4, #16]
 801304a:	455a      	cmp	r2, fp
 801304c:	dd0b      	ble.n	8013066 <__gethex+0x46e>
 801304e:	2101      	movs	r1, #1
 8013050:	4620      	mov	r0, r4
 8013052:	f7ff fd69 	bl	8012b28 <rshift>
 8013056:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801305a:	3501      	adds	r5, #1
 801305c:	42ab      	cmp	r3, r5
 801305e:	f6ff aed0 	blt.w	8012e02 <__gethex+0x20a>
 8013062:	2701      	movs	r7, #1
 8013064:	e7c0      	b.n	8012fe8 <__gethex+0x3f0>
 8013066:	f016 061f 	ands.w	r6, r6, #31
 801306a:	d0fa      	beq.n	8013062 <__gethex+0x46a>
 801306c:	4453      	add	r3, sl
 801306e:	f1c6 0620 	rsb	r6, r6, #32
 8013072:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8013076:	f000 f9e9 	bl	801344c <__hi0bits>
 801307a:	42b0      	cmp	r0, r6
 801307c:	dbe7      	blt.n	801304e <__gethex+0x456>
 801307e:	e7f0      	b.n	8013062 <__gethex+0x46a>
 8013080:	08016b61 	.word	0x08016b61

08013084 <L_shift>:
 8013084:	f1c2 0208 	rsb	r2, r2, #8
 8013088:	0092      	lsls	r2, r2, #2
 801308a:	b570      	push	{r4, r5, r6, lr}
 801308c:	f1c2 0620 	rsb	r6, r2, #32
 8013090:	6843      	ldr	r3, [r0, #4]
 8013092:	6804      	ldr	r4, [r0, #0]
 8013094:	fa03 f506 	lsl.w	r5, r3, r6
 8013098:	432c      	orrs	r4, r5
 801309a:	40d3      	lsrs	r3, r2
 801309c:	6004      	str	r4, [r0, #0]
 801309e:	f840 3f04 	str.w	r3, [r0, #4]!
 80130a2:	4288      	cmp	r0, r1
 80130a4:	d3f4      	bcc.n	8013090 <L_shift+0xc>
 80130a6:	bd70      	pop	{r4, r5, r6, pc}

080130a8 <__match>:
 80130a8:	b530      	push	{r4, r5, lr}
 80130aa:	6803      	ldr	r3, [r0, #0]
 80130ac:	3301      	adds	r3, #1
 80130ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80130b2:	b914      	cbnz	r4, 80130ba <__match+0x12>
 80130b4:	6003      	str	r3, [r0, #0]
 80130b6:	2001      	movs	r0, #1
 80130b8:	bd30      	pop	{r4, r5, pc}
 80130ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80130be:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80130c2:	2d19      	cmp	r5, #25
 80130c4:	bf98      	it	ls
 80130c6:	3220      	addls	r2, #32
 80130c8:	42a2      	cmp	r2, r4
 80130ca:	d0f0      	beq.n	80130ae <__match+0x6>
 80130cc:	2000      	movs	r0, #0
 80130ce:	e7f3      	b.n	80130b8 <__match+0x10>

080130d0 <__hexnan>:
 80130d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80130d4:	680b      	ldr	r3, [r1, #0]
 80130d6:	115e      	asrs	r6, r3, #5
 80130d8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80130dc:	f013 031f 	ands.w	r3, r3, #31
 80130e0:	b087      	sub	sp, #28
 80130e2:	bf18      	it	ne
 80130e4:	3604      	addne	r6, #4
 80130e6:	2500      	movs	r5, #0
 80130e8:	1f37      	subs	r7, r6, #4
 80130ea:	4690      	mov	r8, r2
 80130ec:	6802      	ldr	r2, [r0, #0]
 80130ee:	9301      	str	r3, [sp, #4]
 80130f0:	4682      	mov	sl, r0
 80130f2:	f846 5c04 	str.w	r5, [r6, #-4]
 80130f6:	46b9      	mov	r9, r7
 80130f8:	463c      	mov	r4, r7
 80130fa:	9502      	str	r5, [sp, #8]
 80130fc:	46ab      	mov	fp, r5
 80130fe:	7851      	ldrb	r1, [r2, #1]
 8013100:	1c53      	adds	r3, r2, #1
 8013102:	9303      	str	r3, [sp, #12]
 8013104:	b341      	cbz	r1, 8013158 <__hexnan+0x88>
 8013106:	4608      	mov	r0, r1
 8013108:	9205      	str	r2, [sp, #20]
 801310a:	9104      	str	r1, [sp, #16]
 801310c:	f7ff fd5e 	bl	8012bcc <__hexdig_fun>
 8013110:	2800      	cmp	r0, #0
 8013112:	d14f      	bne.n	80131b4 <__hexnan+0xe4>
 8013114:	9904      	ldr	r1, [sp, #16]
 8013116:	9a05      	ldr	r2, [sp, #20]
 8013118:	2920      	cmp	r1, #32
 801311a:	d818      	bhi.n	801314e <__hexnan+0x7e>
 801311c:	9b02      	ldr	r3, [sp, #8]
 801311e:	459b      	cmp	fp, r3
 8013120:	dd13      	ble.n	801314a <__hexnan+0x7a>
 8013122:	454c      	cmp	r4, r9
 8013124:	d206      	bcs.n	8013134 <__hexnan+0x64>
 8013126:	2d07      	cmp	r5, #7
 8013128:	dc04      	bgt.n	8013134 <__hexnan+0x64>
 801312a:	462a      	mov	r2, r5
 801312c:	4649      	mov	r1, r9
 801312e:	4620      	mov	r0, r4
 8013130:	f7ff ffa8 	bl	8013084 <L_shift>
 8013134:	4544      	cmp	r4, r8
 8013136:	d950      	bls.n	80131da <__hexnan+0x10a>
 8013138:	2300      	movs	r3, #0
 801313a:	f1a4 0904 	sub.w	r9, r4, #4
 801313e:	f844 3c04 	str.w	r3, [r4, #-4]
 8013142:	f8cd b008 	str.w	fp, [sp, #8]
 8013146:	464c      	mov	r4, r9
 8013148:	461d      	mov	r5, r3
 801314a:	9a03      	ldr	r2, [sp, #12]
 801314c:	e7d7      	b.n	80130fe <__hexnan+0x2e>
 801314e:	2929      	cmp	r1, #41	; 0x29
 8013150:	d156      	bne.n	8013200 <__hexnan+0x130>
 8013152:	3202      	adds	r2, #2
 8013154:	f8ca 2000 	str.w	r2, [sl]
 8013158:	f1bb 0f00 	cmp.w	fp, #0
 801315c:	d050      	beq.n	8013200 <__hexnan+0x130>
 801315e:	454c      	cmp	r4, r9
 8013160:	d206      	bcs.n	8013170 <__hexnan+0xa0>
 8013162:	2d07      	cmp	r5, #7
 8013164:	dc04      	bgt.n	8013170 <__hexnan+0xa0>
 8013166:	462a      	mov	r2, r5
 8013168:	4649      	mov	r1, r9
 801316a:	4620      	mov	r0, r4
 801316c:	f7ff ff8a 	bl	8013084 <L_shift>
 8013170:	4544      	cmp	r4, r8
 8013172:	d934      	bls.n	80131de <__hexnan+0x10e>
 8013174:	f1a8 0204 	sub.w	r2, r8, #4
 8013178:	4623      	mov	r3, r4
 801317a:	f853 1b04 	ldr.w	r1, [r3], #4
 801317e:	f842 1f04 	str.w	r1, [r2, #4]!
 8013182:	429f      	cmp	r7, r3
 8013184:	d2f9      	bcs.n	801317a <__hexnan+0xaa>
 8013186:	1b3b      	subs	r3, r7, r4
 8013188:	f023 0303 	bic.w	r3, r3, #3
 801318c:	3304      	adds	r3, #4
 801318e:	3401      	adds	r4, #1
 8013190:	3e03      	subs	r6, #3
 8013192:	42b4      	cmp	r4, r6
 8013194:	bf88      	it	hi
 8013196:	2304      	movhi	r3, #4
 8013198:	4443      	add	r3, r8
 801319a:	2200      	movs	r2, #0
 801319c:	f843 2b04 	str.w	r2, [r3], #4
 80131a0:	429f      	cmp	r7, r3
 80131a2:	d2fb      	bcs.n	801319c <__hexnan+0xcc>
 80131a4:	683b      	ldr	r3, [r7, #0]
 80131a6:	b91b      	cbnz	r3, 80131b0 <__hexnan+0xe0>
 80131a8:	4547      	cmp	r7, r8
 80131aa:	d127      	bne.n	80131fc <__hexnan+0x12c>
 80131ac:	2301      	movs	r3, #1
 80131ae:	603b      	str	r3, [r7, #0]
 80131b0:	2005      	movs	r0, #5
 80131b2:	e026      	b.n	8013202 <__hexnan+0x132>
 80131b4:	3501      	adds	r5, #1
 80131b6:	2d08      	cmp	r5, #8
 80131b8:	f10b 0b01 	add.w	fp, fp, #1
 80131bc:	dd06      	ble.n	80131cc <__hexnan+0xfc>
 80131be:	4544      	cmp	r4, r8
 80131c0:	d9c3      	bls.n	801314a <__hexnan+0x7a>
 80131c2:	2300      	movs	r3, #0
 80131c4:	f844 3c04 	str.w	r3, [r4, #-4]
 80131c8:	2501      	movs	r5, #1
 80131ca:	3c04      	subs	r4, #4
 80131cc:	6822      	ldr	r2, [r4, #0]
 80131ce:	f000 000f 	and.w	r0, r0, #15
 80131d2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80131d6:	6022      	str	r2, [r4, #0]
 80131d8:	e7b7      	b.n	801314a <__hexnan+0x7a>
 80131da:	2508      	movs	r5, #8
 80131dc:	e7b5      	b.n	801314a <__hexnan+0x7a>
 80131de:	9b01      	ldr	r3, [sp, #4]
 80131e0:	2b00      	cmp	r3, #0
 80131e2:	d0df      	beq.n	80131a4 <__hexnan+0xd4>
 80131e4:	f04f 32ff 	mov.w	r2, #4294967295
 80131e8:	f1c3 0320 	rsb	r3, r3, #32
 80131ec:	fa22 f303 	lsr.w	r3, r2, r3
 80131f0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80131f4:	401a      	ands	r2, r3
 80131f6:	f846 2c04 	str.w	r2, [r6, #-4]
 80131fa:	e7d3      	b.n	80131a4 <__hexnan+0xd4>
 80131fc:	3f04      	subs	r7, #4
 80131fe:	e7d1      	b.n	80131a4 <__hexnan+0xd4>
 8013200:	2004      	movs	r0, #4
 8013202:	b007      	add	sp, #28
 8013204:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013208 <_localeconv_r>:
 8013208:	4800      	ldr	r0, [pc, #0]	; (801320c <_localeconv_r+0x4>)
 801320a:	4770      	bx	lr
 801320c:	200004e4 	.word	0x200004e4

08013210 <_lseek_r>:
 8013210:	b538      	push	{r3, r4, r5, lr}
 8013212:	4d07      	ldr	r5, [pc, #28]	; (8013230 <_lseek_r+0x20>)
 8013214:	4604      	mov	r4, r0
 8013216:	4608      	mov	r0, r1
 8013218:	4611      	mov	r1, r2
 801321a:	2200      	movs	r2, #0
 801321c:	602a      	str	r2, [r5, #0]
 801321e:	461a      	mov	r2, r3
 8013220:	f7ef fe96 	bl	8002f50 <_lseek>
 8013224:	1c43      	adds	r3, r0, #1
 8013226:	d102      	bne.n	801322e <_lseek_r+0x1e>
 8013228:	682b      	ldr	r3, [r5, #0]
 801322a:	b103      	cbz	r3, 801322e <_lseek_r+0x1e>
 801322c:	6023      	str	r3, [r4, #0]
 801322e:	bd38      	pop	{r3, r4, r5, pc}
 8013230:	2000a194 	.word	0x2000a194

08013234 <malloc>:
 8013234:	4b02      	ldr	r3, [pc, #8]	; (8013240 <malloc+0xc>)
 8013236:	4601      	mov	r1, r0
 8013238:	6818      	ldr	r0, [r3, #0]
 801323a:	f000 bd59 	b.w	8013cf0 <_malloc_r>
 801323e:	bf00      	nop
 8013240:	2000038c 	.word	0x2000038c

08013244 <__ascii_mbtowc>:
 8013244:	b082      	sub	sp, #8
 8013246:	b901      	cbnz	r1, 801324a <__ascii_mbtowc+0x6>
 8013248:	a901      	add	r1, sp, #4
 801324a:	b142      	cbz	r2, 801325e <__ascii_mbtowc+0x1a>
 801324c:	b14b      	cbz	r3, 8013262 <__ascii_mbtowc+0x1e>
 801324e:	7813      	ldrb	r3, [r2, #0]
 8013250:	600b      	str	r3, [r1, #0]
 8013252:	7812      	ldrb	r2, [r2, #0]
 8013254:	1e10      	subs	r0, r2, #0
 8013256:	bf18      	it	ne
 8013258:	2001      	movne	r0, #1
 801325a:	b002      	add	sp, #8
 801325c:	4770      	bx	lr
 801325e:	4610      	mov	r0, r2
 8013260:	e7fb      	b.n	801325a <__ascii_mbtowc+0x16>
 8013262:	f06f 0001 	mvn.w	r0, #1
 8013266:	e7f8      	b.n	801325a <__ascii_mbtowc+0x16>

08013268 <_Balloc>:
 8013268:	b570      	push	{r4, r5, r6, lr}
 801326a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801326c:	4604      	mov	r4, r0
 801326e:	460d      	mov	r5, r1
 8013270:	b976      	cbnz	r6, 8013290 <_Balloc+0x28>
 8013272:	2010      	movs	r0, #16
 8013274:	f7ff ffde 	bl	8013234 <malloc>
 8013278:	4602      	mov	r2, r0
 801327a:	6260      	str	r0, [r4, #36]	; 0x24
 801327c:	b920      	cbnz	r0, 8013288 <_Balloc+0x20>
 801327e:	4b18      	ldr	r3, [pc, #96]	; (80132e0 <_Balloc+0x78>)
 8013280:	4818      	ldr	r0, [pc, #96]	; (80132e4 <_Balloc+0x7c>)
 8013282:	2166      	movs	r1, #102	; 0x66
 8013284:	f7fe fd96 	bl	8011db4 <__assert_func>
 8013288:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801328c:	6006      	str	r6, [r0, #0]
 801328e:	60c6      	str	r6, [r0, #12]
 8013290:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8013292:	68f3      	ldr	r3, [r6, #12]
 8013294:	b183      	cbz	r3, 80132b8 <_Balloc+0x50>
 8013296:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013298:	68db      	ldr	r3, [r3, #12]
 801329a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801329e:	b9b8      	cbnz	r0, 80132d0 <_Balloc+0x68>
 80132a0:	2101      	movs	r1, #1
 80132a2:	fa01 f605 	lsl.w	r6, r1, r5
 80132a6:	1d72      	adds	r2, r6, #5
 80132a8:	0092      	lsls	r2, r2, #2
 80132aa:	4620      	mov	r0, r4
 80132ac:	f000 fc9d 	bl	8013bea <_calloc_r>
 80132b0:	b160      	cbz	r0, 80132cc <_Balloc+0x64>
 80132b2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80132b6:	e00e      	b.n	80132d6 <_Balloc+0x6e>
 80132b8:	2221      	movs	r2, #33	; 0x21
 80132ba:	2104      	movs	r1, #4
 80132bc:	4620      	mov	r0, r4
 80132be:	f000 fc94 	bl	8013bea <_calloc_r>
 80132c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80132c4:	60f0      	str	r0, [r6, #12]
 80132c6:	68db      	ldr	r3, [r3, #12]
 80132c8:	2b00      	cmp	r3, #0
 80132ca:	d1e4      	bne.n	8013296 <_Balloc+0x2e>
 80132cc:	2000      	movs	r0, #0
 80132ce:	bd70      	pop	{r4, r5, r6, pc}
 80132d0:	6802      	ldr	r2, [r0, #0]
 80132d2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80132d6:	2300      	movs	r3, #0
 80132d8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80132dc:	e7f7      	b.n	80132ce <_Balloc+0x66>
 80132de:	bf00      	nop
 80132e0:	08016948 	.word	0x08016948
 80132e4:	08016bec 	.word	0x08016bec

080132e8 <_Bfree>:
 80132e8:	b570      	push	{r4, r5, r6, lr}
 80132ea:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80132ec:	4605      	mov	r5, r0
 80132ee:	460c      	mov	r4, r1
 80132f0:	b976      	cbnz	r6, 8013310 <_Bfree+0x28>
 80132f2:	2010      	movs	r0, #16
 80132f4:	f7ff ff9e 	bl	8013234 <malloc>
 80132f8:	4602      	mov	r2, r0
 80132fa:	6268      	str	r0, [r5, #36]	; 0x24
 80132fc:	b920      	cbnz	r0, 8013308 <_Bfree+0x20>
 80132fe:	4b09      	ldr	r3, [pc, #36]	; (8013324 <_Bfree+0x3c>)
 8013300:	4809      	ldr	r0, [pc, #36]	; (8013328 <_Bfree+0x40>)
 8013302:	218a      	movs	r1, #138	; 0x8a
 8013304:	f7fe fd56 	bl	8011db4 <__assert_func>
 8013308:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801330c:	6006      	str	r6, [r0, #0]
 801330e:	60c6      	str	r6, [r0, #12]
 8013310:	b13c      	cbz	r4, 8013322 <_Bfree+0x3a>
 8013312:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8013314:	6862      	ldr	r2, [r4, #4]
 8013316:	68db      	ldr	r3, [r3, #12]
 8013318:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801331c:	6021      	str	r1, [r4, #0]
 801331e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8013322:	bd70      	pop	{r4, r5, r6, pc}
 8013324:	08016948 	.word	0x08016948
 8013328:	08016bec 	.word	0x08016bec

0801332c <__multadd>:
 801332c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013330:	690d      	ldr	r5, [r1, #16]
 8013332:	4607      	mov	r7, r0
 8013334:	460c      	mov	r4, r1
 8013336:	461e      	mov	r6, r3
 8013338:	f101 0c14 	add.w	ip, r1, #20
 801333c:	2000      	movs	r0, #0
 801333e:	f8dc 3000 	ldr.w	r3, [ip]
 8013342:	b299      	uxth	r1, r3
 8013344:	fb02 6101 	mla	r1, r2, r1, r6
 8013348:	0c1e      	lsrs	r6, r3, #16
 801334a:	0c0b      	lsrs	r3, r1, #16
 801334c:	fb02 3306 	mla	r3, r2, r6, r3
 8013350:	b289      	uxth	r1, r1
 8013352:	3001      	adds	r0, #1
 8013354:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8013358:	4285      	cmp	r5, r0
 801335a:	f84c 1b04 	str.w	r1, [ip], #4
 801335e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8013362:	dcec      	bgt.n	801333e <__multadd+0x12>
 8013364:	b30e      	cbz	r6, 80133aa <__multadd+0x7e>
 8013366:	68a3      	ldr	r3, [r4, #8]
 8013368:	42ab      	cmp	r3, r5
 801336a:	dc19      	bgt.n	80133a0 <__multadd+0x74>
 801336c:	6861      	ldr	r1, [r4, #4]
 801336e:	4638      	mov	r0, r7
 8013370:	3101      	adds	r1, #1
 8013372:	f7ff ff79 	bl	8013268 <_Balloc>
 8013376:	4680      	mov	r8, r0
 8013378:	b928      	cbnz	r0, 8013386 <__multadd+0x5a>
 801337a:	4602      	mov	r2, r0
 801337c:	4b0c      	ldr	r3, [pc, #48]	; (80133b0 <__multadd+0x84>)
 801337e:	480d      	ldr	r0, [pc, #52]	; (80133b4 <__multadd+0x88>)
 8013380:	21b5      	movs	r1, #181	; 0xb5
 8013382:	f7fe fd17 	bl	8011db4 <__assert_func>
 8013386:	6922      	ldr	r2, [r4, #16]
 8013388:	3202      	adds	r2, #2
 801338a:	f104 010c 	add.w	r1, r4, #12
 801338e:	0092      	lsls	r2, r2, #2
 8013390:	300c      	adds	r0, #12
 8013392:	f7fc fec3 	bl	801011c <memcpy>
 8013396:	4621      	mov	r1, r4
 8013398:	4638      	mov	r0, r7
 801339a:	f7ff ffa5 	bl	80132e8 <_Bfree>
 801339e:	4644      	mov	r4, r8
 80133a0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80133a4:	3501      	adds	r5, #1
 80133a6:	615e      	str	r6, [r3, #20]
 80133a8:	6125      	str	r5, [r4, #16]
 80133aa:	4620      	mov	r0, r4
 80133ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80133b0:	08016b61 	.word	0x08016b61
 80133b4:	08016bec 	.word	0x08016bec

080133b8 <__s2b>:
 80133b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80133bc:	460c      	mov	r4, r1
 80133be:	4615      	mov	r5, r2
 80133c0:	461f      	mov	r7, r3
 80133c2:	2209      	movs	r2, #9
 80133c4:	3308      	adds	r3, #8
 80133c6:	4606      	mov	r6, r0
 80133c8:	fb93 f3f2 	sdiv	r3, r3, r2
 80133cc:	2100      	movs	r1, #0
 80133ce:	2201      	movs	r2, #1
 80133d0:	429a      	cmp	r2, r3
 80133d2:	db09      	blt.n	80133e8 <__s2b+0x30>
 80133d4:	4630      	mov	r0, r6
 80133d6:	f7ff ff47 	bl	8013268 <_Balloc>
 80133da:	b940      	cbnz	r0, 80133ee <__s2b+0x36>
 80133dc:	4602      	mov	r2, r0
 80133de:	4b19      	ldr	r3, [pc, #100]	; (8013444 <__s2b+0x8c>)
 80133e0:	4819      	ldr	r0, [pc, #100]	; (8013448 <__s2b+0x90>)
 80133e2:	21ce      	movs	r1, #206	; 0xce
 80133e4:	f7fe fce6 	bl	8011db4 <__assert_func>
 80133e8:	0052      	lsls	r2, r2, #1
 80133ea:	3101      	adds	r1, #1
 80133ec:	e7f0      	b.n	80133d0 <__s2b+0x18>
 80133ee:	9b08      	ldr	r3, [sp, #32]
 80133f0:	6143      	str	r3, [r0, #20]
 80133f2:	2d09      	cmp	r5, #9
 80133f4:	f04f 0301 	mov.w	r3, #1
 80133f8:	6103      	str	r3, [r0, #16]
 80133fa:	dd16      	ble.n	801342a <__s2b+0x72>
 80133fc:	f104 0909 	add.w	r9, r4, #9
 8013400:	46c8      	mov	r8, r9
 8013402:	442c      	add	r4, r5
 8013404:	f818 3b01 	ldrb.w	r3, [r8], #1
 8013408:	4601      	mov	r1, r0
 801340a:	3b30      	subs	r3, #48	; 0x30
 801340c:	220a      	movs	r2, #10
 801340e:	4630      	mov	r0, r6
 8013410:	f7ff ff8c 	bl	801332c <__multadd>
 8013414:	45a0      	cmp	r8, r4
 8013416:	d1f5      	bne.n	8013404 <__s2b+0x4c>
 8013418:	f1a5 0408 	sub.w	r4, r5, #8
 801341c:	444c      	add	r4, r9
 801341e:	1b2d      	subs	r5, r5, r4
 8013420:	1963      	adds	r3, r4, r5
 8013422:	42bb      	cmp	r3, r7
 8013424:	db04      	blt.n	8013430 <__s2b+0x78>
 8013426:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801342a:	340a      	adds	r4, #10
 801342c:	2509      	movs	r5, #9
 801342e:	e7f6      	b.n	801341e <__s2b+0x66>
 8013430:	f814 3b01 	ldrb.w	r3, [r4], #1
 8013434:	4601      	mov	r1, r0
 8013436:	3b30      	subs	r3, #48	; 0x30
 8013438:	220a      	movs	r2, #10
 801343a:	4630      	mov	r0, r6
 801343c:	f7ff ff76 	bl	801332c <__multadd>
 8013440:	e7ee      	b.n	8013420 <__s2b+0x68>
 8013442:	bf00      	nop
 8013444:	08016b61 	.word	0x08016b61
 8013448:	08016bec 	.word	0x08016bec

0801344c <__hi0bits>:
 801344c:	0c03      	lsrs	r3, r0, #16
 801344e:	041b      	lsls	r3, r3, #16
 8013450:	b9d3      	cbnz	r3, 8013488 <__hi0bits+0x3c>
 8013452:	0400      	lsls	r0, r0, #16
 8013454:	2310      	movs	r3, #16
 8013456:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801345a:	bf04      	itt	eq
 801345c:	0200      	lsleq	r0, r0, #8
 801345e:	3308      	addeq	r3, #8
 8013460:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8013464:	bf04      	itt	eq
 8013466:	0100      	lsleq	r0, r0, #4
 8013468:	3304      	addeq	r3, #4
 801346a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801346e:	bf04      	itt	eq
 8013470:	0080      	lsleq	r0, r0, #2
 8013472:	3302      	addeq	r3, #2
 8013474:	2800      	cmp	r0, #0
 8013476:	db05      	blt.n	8013484 <__hi0bits+0x38>
 8013478:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801347c:	f103 0301 	add.w	r3, r3, #1
 8013480:	bf08      	it	eq
 8013482:	2320      	moveq	r3, #32
 8013484:	4618      	mov	r0, r3
 8013486:	4770      	bx	lr
 8013488:	2300      	movs	r3, #0
 801348a:	e7e4      	b.n	8013456 <__hi0bits+0xa>

0801348c <__lo0bits>:
 801348c:	6803      	ldr	r3, [r0, #0]
 801348e:	f013 0207 	ands.w	r2, r3, #7
 8013492:	4601      	mov	r1, r0
 8013494:	d00b      	beq.n	80134ae <__lo0bits+0x22>
 8013496:	07da      	lsls	r2, r3, #31
 8013498:	d423      	bmi.n	80134e2 <__lo0bits+0x56>
 801349a:	0798      	lsls	r0, r3, #30
 801349c:	bf49      	itett	mi
 801349e:	085b      	lsrmi	r3, r3, #1
 80134a0:	089b      	lsrpl	r3, r3, #2
 80134a2:	2001      	movmi	r0, #1
 80134a4:	600b      	strmi	r3, [r1, #0]
 80134a6:	bf5c      	itt	pl
 80134a8:	600b      	strpl	r3, [r1, #0]
 80134aa:	2002      	movpl	r0, #2
 80134ac:	4770      	bx	lr
 80134ae:	b298      	uxth	r0, r3
 80134b0:	b9a8      	cbnz	r0, 80134de <__lo0bits+0x52>
 80134b2:	0c1b      	lsrs	r3, r3, #16
 80134b4:	2010      	movs	r0, #16
 80134b6:	b2da      	uxtb	r2, r3
 80134b8:	b90a      	cbnz	r2, 80134be <__lo0bits+0x32>
 80134ba:	3008      	adds	r0, #8
 80134bc:	0a1b      	lsrs	r3, r3, #8
 80134be:	071a      	lsls	r2, r3, #28
 80134c0:	bf04      	itt	eq
 80134c2:	091b      	lsreq	r3, r3, #4
 80134c4:	3004      	addeq	r0, #4
 80134c6:	079a      	lsls	r2, r3, #30
 80134c8:	bf04      	itt	eq
 80134ca:	089b      	lsreq	r3, r3, #2
 80134cc:	3002      	addeq	r0, #2
 80134ce:	07da      	lsls	r2, r3, #31
 80134d0:	d403      	bmi.n	80134da <__lo0bits+0x4e>
 80134d2:	085b      	lsrs	r3, r3, #1
 80134d4:	f100 0001 	add.w	r0, r0, #1
 80134d8:	d005      	beq.n	80134e6 <__lo0bits+0x5a>
 80134da:	600b      	str	r3, [r1, #0]
 80134dc:	4770      	bx	lr
 80134de:	4610      	mov	r0, r2
 80134e0:	e7e9      	b.n	80134b6 <__lo0bits+0x2a>
 80134e2:	2000      	movs	r0, #0
 80134e4:	4770      	bx	lr
 80134e6:	2020      	movs	r0, #32
 80134e8:	4770      	bx	lr
	...

080134ec <__i2b>:
 80134ec:	b510      	push	{r4, lr}
 80134ee:	460c      	mov	r4, r1
 80134f0:	2101      	movs	r1, #1
 80134f2:	f7ff feb9 	bl	8013268 <_Balloc>
 80134f6:	4602      	mov	r2, r0
 80134f8:	b928      	cbnz	r0, 8013506 <__i2b+0x1a>
 80134fa:	4b05      	ldr	r3, [pc, #20]	; (8013510 <__i2b+0x24>)
 80134fc:	4805      	ldr	r0, [pc, #20]	; (8013514 <__i2b+0x28>)
 80134fe:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8013502:	f7fe fc57 	bl	8011db4 <__assert_func>
 8013506:	2301      	movs	r3, #1
 8013508:	6144      	str	r4, [r0, #20]
 801350a:	6103      	str	r3, [r0, #16]
 801350c:	bd10      	pop	{r4, pc}
 801350e:	bf00      	nop
 8013510:	08016b61 	.word	0x08016b61
 8013514:	08016bec 	.word	0x08016bec

08013518 <__multiply>:
 8013518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801351c:	4691      	mov	r9, r2
 801351e:	690a      	ldr	r2, [r1, #16]
 8013520:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8013524:	429a      	cmp	r2, r3
 8013526:	bfb8      	it	lt
 8013528:	460b      	movlt	r3, r1
 801352a:	460c      	mov	r4, r1
 801352c:	bfbc      	itt	lt
 801352e:	464c      	movlt	r4, r9
 8013530:	4699      	movlt	r9, r3
 8013532:	6927      	ldr	r7, [r4, #16]
 8013534:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8013538:	68a3      	ldr	r3, [r4, #8]
 801353a:	6861      	ldr	r1, [r4, #4]
 801353c:	eb07 060a 	add.w	r6, r7, sl
 8013540:	42b3      	cmp	r3, r6
 8013542:	b085      	sub	sp, #20
 8013544:	bfb8      	it	lt
 8013546:	3101      	addlt	r1, #1
 8013548:	f7ff fe8e 	bl	8013268 <_Balloc>
 801354c:	b930      	cbnz	r0, 801355c <__multiply+0x44>
 801354e:	4602      	mov	r2, r0
 8013550:	4b44      	ldr	r3, [pc, #272]	; (8013664 <__multiply+0x14c>)
 8013552:	4845      	ldr	r0, [pc, #276]	; (8013668 <__multiply+0x150>)
 8013554:	f240 115d 	movw	r1, #349	; 0x15d
 8013558:	f7fe fc2c 	bl	8011db4 <__assert_func>
 801355c:	f100 0514 	add.w	r5, r0, #20
 8013560:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8013564:	462b      	mov	r3, r5
 8013566:	2200      	movs	r2, #0
 8013568:	4543      	cmp	r3, r8
 801356a:	d321      	bcc.n	80135b0 <__multiply+0x98>
 801356c:	f104 0314 	add.w	r3, r4, #20
 8013570:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8013574:	f109 0314 	add.w	r3, r9, #20
 8013578:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801357c:	9202      	str	r2, [sp, #8]
 801357e:	1b3a      	subs	r2, r7, r4
 8013580:	3a15      	subs	r2, #21
 8013582:	f022 0203 	bic.w	r2, r2, #3
 8013586:	3204      	adds	r2, #4
 8013588:	f104 0115 	add.w	r1, r4, #21
 801358c:	428f      	cmp	r7, r1
 801358e:	bf38      	it	cc
 8013590:	2204      	movcc	r2, #4
 8013592:	9201      	str	r2, [sp, #4]
 8013594:	9a02      	ldr	r2, [sp, #8]
 8013596:	9303      	str	r3, [sp, #12]
 8013598:	429a      	cmp	r2, r3
 801359a:	d80c      	bhi.n	80135b6 <__multiply+0x9e>
 801359c:	2e00      	cmp	r6, #0
 801359e:	dd03      	ble.n	80135a8 <__multiply+0x90>
 80135a0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80135a4:	2b00      	cmp	r3, #0
 80135a6:	d05a      	beq.n	801365e <__multiply+0x146>
 80135a8:	6106      	str	r6, [r0, #16]
 80135aa:	b005      	add	sp, #20
 80135ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80135b0:	f843 2b04 	str.w	r2, [r3], #4
 80135b4:	e7d8      	b.n	8013568 <__multiply+0x50>
 80135b6:	f8b3 a000 	ldrh.w	sl, [r3]
 80135ba:	f1ba 0f00 	cmp.w	sl, #0
 80135be:	d024      	beq.n	801360a <__multiply+0xf2>
 80135c0:	f104 0e14 	add.w	lr, r4, #20
 80135c4:	46a9      	mov	r9, r5
 80135c6:	f04f 0c00 	mov.w	ip, #0
 80135ca:	f85e 2b04 	ldr.w	r2, [lr], #4
 80135ce:	f8d9 1000 	ldr.w	r1, [r9]
 80135d2:	fa1f fb82 	uxth.w	fp, r2
 80135d6:	b289      	uxth	r1, r1
 80135d8:	fb0a 110b 	mla	r1, sl, fp, r1
 80135dc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80135e0:	f8d9 2000 	ldr.w	r2, [r9]
 80135e4:	4461      	add	r1, ip
 80135e6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80135ea:	fb0a c20b 	mla	r2, sl, fp, ip
 80135ee:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80135f2:	b289      	uxth	r1, r1
 80135f4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80135f8:	4577      	cmp	r7, lr
 80135fa:	f849 1b04 	str.w	r1, [r9], #4
 80135fe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8013602:	d8e2      	bhi.n	80135ca <__multiply+0xb2>
 8013604:	9a01      	ldr	r2, [sp, #4]
 8013606:	f845 c002 	str.w	ip, [r5, r2]
 801360a:	9a03      	ldr	r2, [sp, #12]
 801360c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8013610:	3304      	adds	r3, #4
 8013612:	f1b9 0f00 	cmp.w	r9, #0
 8013616:	d020      	beq.n	801365a <__multiply+0x142>
 8013618:	6829      	ldr	r1, [r5, #0]
 801361a:	f104 0c14 	add.w	ip, r4, #20
 801361e:	46ae      	mov	lr, r5
 8013620:	f04f 0a00 	mov.w	sl, #0
 8013624:	f8bc b000 	ldrh.w	fp, [ip]
 8013628:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801362c:	fb09 220b 	mla	r2, r9, fp, r2
 8013630:	4492      	add	sl, r2
 8013632:	b289      	uxth	r1, r1
 8013634:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8013638:	f84e 1b04 	str.w	r1, [lr], #4
 801363c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8013640:	f8be 1000 	ldrh.w	r1, [lr]
 8013644:	0c12      	lsrs	r2, r2, #16
 8013646:	fb09 1102 	mla	r1, r9, r2, r1
 801364a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 801364e:	4567      	cmp	r7, ip
 8013650:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8013654:	d8e6      	bhi.n	8013624 <__multiply+0x10c>
 8013656:	9a01      	ldr	r2, [sp, #4]
 8013658:	50a9      	str	r1, [r5, r2]
 801365a:	3504      	adds	r5, #4
 801365c:	e79a      	b.n	8013594 <__multiply+0x7c>
 801365e:	3e01      	subs	r6, #1
 8013660:	e79c      	b.n	801359c <__multiply+0x84>
 8013662:	bf00      	nop
 8013664:	08016b61 	.word	0x08016b61
 8013668:	08016bec 	.word	0x08016bec

0801366c <__pow5mult>:
 801366c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013670:	4615      	mov	r5, r2
 8013672:	f012 0203 	ands.w	r2, r2, #3
 8013676:	4606      	mov	r6, r0
 8013678:	460f      	mov	r7, r1
 801367a:	d007      	beq.n	801368c <__pow5mult+0x20>
 801367c:	4c25      	ldr	r4, [pc, #148]	; (8013714 <__pow5mult+0xa8>)
 801367e:	3a01      	subs	r2, #1
 8013680:	2300      	movs	r3, #0
 8013682:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8013686:	f7ff fe51 	bl	801332c <__multadd>
 801368a:	4607      	mov	r7, r0
 801368c:	10ad      	asrs	r5, r5, #2
 801368e:	d03d      	beq.n	801370c <__pow5mult+0xa0>
 8013690:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8013692:	b97c      	cbnz	r4, 80136b4 <__pow5mult+0x48>
 8013694:	2010      	movs	r0, #16
 8013696:	f7ff fdcd 	bl	8013234 <malloc>
 801369a:	4602      	mov	r2, r0
 801369c:	6270      	str	r0, [r6, #36]	; 0x24
 801369e:	b928      	cbnz	r0, 80136ac <__pow5mult+0x40>
 80136a0:	4b1d      	ldr	r3, [pc, #116]	; (8013718 <__pow5mult+0xac>)
 80136a2:	481e      	ldr	r0, [pc, #120]	; (801371c <__pow5mult+0xb0>)
 80136a4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80136a8:	f7fe fb84 	bl	8011db4 <__assert_func>
 80136ac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80136b0:	6004      	str	r4, [r0, #0]
 80136b2:	60c4      	str	r4, [r0, #12]
 80136b4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80136b8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80136bc:	b94c      	cbnz	r4, 80136d2 <__pow5mult+0x66>
 80136be:	f240 2171 	movw	r1, #625	; 0x271
 80136c2:	4630      	mov	r0, r6
 80136c4:	f7ff ff12 	bl	80134ec <__i2b>
 80136c8:	2300      	movs	r3, #0
 80136ca:	f8c8 0008 	str.w	r0, [r8, #8]
 80136ce:	4604      	mov	r4, r0
 80136d0:	6003      	str	r3, [r0, #0]
 80136d2:	f04f 0900 	mov.w	r9, #0
 80136d6:	07eb      	lsls	r3, r5, #31
 80136d8:	d50a      	bpl.n	80136f0 <__pow5mult+0x84>
 80136da:	4639      	mov	r1, r7
 80136dc:	4622      	mov	r2, r4
 80136de:	4630      	mov	r0, r6
 80136e0:	f7ff ff1a 	bl	8013518 <__multiply>
 80136e4:	4639      	mov	r1, r7
 80136e6:	4680      	mov	r8, r0
 80136e8:	4630      	mov	r0, r6
 80136ea:	f7ff fdfd 	bl	80132e8 <_Bfree>
 80136ee:	4647      	mov	r7, r8
 80136f0:	106d      	asrs	r5, r5, #1
 80136f2:	d00b      	beq.n	801370c <__pow5mult+0xa0>
 80136f4:	6820      	ldr	r0, [r4, #0]
 80136f6:	b938      	cbnz	r0, 8013708 <__pow5mult+0x9c>
 80136f8:	4622      	mov	r2, r4
 80136fa:	4621      	mov	r1, r4
 80136fc:	4630      	mov	r0, r6
 80136fe:	f7ff ff0b 	bl	8013518 <__multiply>
 8013702:	6020      	str	r0, [r4, #0]
 8013704:	f8c0 9000 	str.w	r9, [r0]
 8013708:	4604      	mov	r4, r0
 801370a:	e7e4      	b.n	80136d6 <__pow5mult+0x6a>
 801370c:	4638      	mov	r0, r7
 801370e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013712:	bf00      	nop
 8013714:	08016d38 	.word	0x08016d38
 8013718:	08016948 	.word	0x08016948
 801371c:	08016bec 	.word	0x08016bec

08013720 <__lshift>:
 8013720:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013724:	460c      	mov	r4, r1
 8013726:	6849      	ldr	r1, [r1, #4]
 8013728:	6923      	ldr	r3, [r4, #16]
 801372a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801372e:	68a3      	ldr	r3, [r4, #8]
 8013730:	4607      	mov	r7, r0
 8013732:	4691      	mov	r9, r2
 8013734:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8013738:	f108 0601 	add.w	r6, r8, #1
 801373c:	42b3      	cmp	r3, r6
 801373e:	db0b      	blt.n	8013758 <__lshift+0x38>
 8013740:	4638      	mov	r0, r7
 8013742:	f7ff fd91 	bl	8013268 <_Balloc>
 8013746:	4605      	mov	r5, r0
 8013748:	b948      	cbnz	r0, 801375e <__lshift+0x3e>
 801374a:	4602      	mov	r2, r0
 801374c:	4b2a      	ldr	r3, [pc, #168]	; (80137f8 <__lshift+0xd8>)
 801374e:	482b      	ldr	r0, [pc, #172]	; (80137fc <__lshift+0xdc>)
 8013750:	f240 11d9 	movw	r1, #473	; 0x1d9
 8013754:	f7fe fb2e 	bl	8011db4 <__assert_func>
 8013758:	3101      	adds	r1, #1
 801375a:	005b      	lsls	r3, r3, #1
 801375c:	e7ee      	b.n	801373c <__lshift+0x1c>
 801375e:	2300      	movs	r3, #0
 8013760:	f100 0114 	add.w	r1, r0, #20
 8013764:	f100 0210 	add.w	r2, r0, #16
 8013768:	4618      	mov	r0, r3
 801376a:	4553      	cmp	r3, sl
 801376c:	db37      	blt.n	80137de <__lshift+0xbe>
 801376e:	6920      	ldr	r0, [r4, #16]
 8013770:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013774:	f104 0314 	add.w	r3, r4, #20
 8013778:	f019 091f 	ands.w	r9, r9, #31
 801377c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013780:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8013784:	d02f      	beq.n	80137e6 <__lshift+0xc6>
 8013786:	f1c9 0e20 	rsb	lr, r9, #32
 801378a:	468a      	mov	sl, r1
 801378c:	f04f 0c00 	mov.w	ip, #0
 8013790:	681a      	ldr	r2, [r3, #0]
 8013792:	fa02 f209 	lsl.w	r2, r2, r9
 8013796:	ea42 020c 	orr.w	r2, r2, ip
 801379a:	f84a 2b04 	str.w	r2, [sl], #4
 801379e:	f853 2b04 	ldr.w	r2, [r3], #4
 80137a2:	4298      	cmp	r0, r3
 80137a4:	fa22 fc0e 	lsr.w	ip, r2, lr
 80137a8:	d8f2      	bhi.n	8013790 <__lshift+0x70>
 80137aa:	1b03      	subs	r3, r0, r4
 80137ac:	3b15      	subs	r3, #21
 80137ae:	f023 0303 	bic.w	r3, r3, #3
 80137b2:	3304      	adds	r3, #4
 80137b4:	f104 0215 	add.w	r2, r4, #21
 80137b8:	4290      	cmp	r0, r2
 80137ba:	bf38      	it	cc
 80137bc:	2304      	movcc	r3, #4
 80137be:	f841 c003 	str.w	ip, [r1, r3]
 80137c2:	f1bc 0f00 	cmp.w	ip, #0
 80137c6:	d001      	beq.n	80137cc <__lshift+0xac>
 80137c8:	f108 0602 	add.w	r6, r8, #2
 80137cc:	3e01      	subs	r6, #1
 80137ce:	4638      	mov	r0, r7
 80137d0:	612e      	str	r6, [r5, #16]
 80137d2:	4621      	mov	r1, r4
 80137d4:	f7ff fd88 	bl	80132e8 <_Bfree>
 80137d8:	4628      	mov	r0, r5
 80137da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80137de:	f842 0f04 	str.w	r0, [r2, #4]!
 80137e2:	3301      	adds	r3, #1
 80137e4:	e7c1      	b.n	801376a <__lshift+0x4a>
 80137e6:	3904      	subs	r1, #4
 80137e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80137ec:	f841 2f04 	str.w	r2, [r1, #4]!
 80137f0:	4298      	cmp	r0, r3
 80137f2:	d8f9      	bhi.n	80137e8 <__lshift+0xc8>
 80137f4:	e7ea      	b.n	80137cc <__lshift+0xac>
 80137f6:	bf00      	nop
 80137f8:	08016b61 	.word	0x08016b61
 80137fc:	08016bec 	.word	0x08016bec

08013800 <__mcmp>:
 8013800:	b530      	push	{r4, r5, lr}
 8013802:	6902      	ldr	r2, [r0, #16]
 8013804:	690c      	ldr	r4, [r1, #16]
 8013806:	1b12      	subs	r2, r2, r4
 8013808:	d10e      	bne.n	8013828 <__mcmp+0x28>
 801380a:	f100 0314 	add.w	r3, r0, #20
 801380e:	3114      	adds	r1, #20
 8013810:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8013814:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8013818:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801381c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8013820:	42a5      	cmp	r5, r4
 8013822:	d003      	beq.n	801382c <__mcmp+0x2c>
 8013824:	d305      	bcc.n	8013832 <__mcmp+0x32>
 8013826:	2201      	movs	r2, #1
 8013828:	4610      	mov	r0, r2
 801382a:	bd30      	pop	{r4, r5, pc}
 801382c:	4283      	cmp	r3, r0
 801382e:	d3f3      	bcc.n	8013818 <__mcmp+0x18>
 8013830:	e7fa      	b.n	8013828 <__mcmp+0x28>
 8013832:	f04f 32ff 	mov.w	r2, #4294967295
 8013836:	e7f7      	b.n	8013828 <__mcmp+0x28>

08013838 <__mdiff>:
 8013838:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801383c:	460c      	mov	r4, r1
 801383e:	4606      	mov	r6, r0
 8013840:	4611      	mov	r1, r2
 8013842:	4620      	mov	r0, r4
 8013844:	4690      	mov	r8, r2
 8013846:	f7ff ffdb 	bl	8013800 <__mcmp>
 801384a:	1e05      	subs	r5, r0, #0
 801384c:	d110      	bne.n	8013870 <__mdiff+0x38>
 801384e:	4629      	mov	r1, r5
 8013850:	4630      	mov	r0, r6
 8013852:	f7ff fd09 	bl	8013268 <_Balloc>
 8013856:	b930      	cbnz	r0, 8013866 <__mdiff+0x2e>
 8013858:	4b3a      	ldr	r3, [pc, #232]	; (8013944 <__mdiff+0x10c>)
 801385a:	4602      	mov	r2, r0
 801385c:	f240 2132 	movw	r1, #562	; 0x232
 8013860:	4839      	ldr	r0, [pc, #228]	; (8013948 <__mdiff+0x110>)
 8013862:	f7fe faa7 	bl	8011db4 <__assert_func>
 8013866:	2301      	movs	r3, #1
 8013868:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801386c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013870:	bfa4      	itt	ge
 8013872:	4643      	movge	r3, r8
 8013874:	46a0      	movge	r8, r4
 8013876:	4630      	mov	r0, r6
 8013878:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801387c:	bfa6      	itte	ge
 801387e:	461c      	movge	r4, r3
 8013880:	2500      	movge	r5, #0
 8013882:	2501      	movlt	r5, #1
 8013884:	f7ff fcf0 	bl	8013268 <_Balloc>
 8013888:	b920      	cbnz	r0, 8013894 <__mdiff+0x5c>
 801388a:	4b2e      	ldr	r3, [pc, #184]	; (8013944 <__mdiff+0x10c>)
 801388c:	4602      	mov	r2, r0
 801388e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8013892:	e7e5      	b.n	8013860 <__mdiff+0x28>
 8013894:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8013898:	6926      	ldr	r6, [r4, #16]
 801389a:	60c5      	str	r5, [r0, #12]
 801389c:	f104 0914 	add.w	r9, r4, #20
 80138a0:	f108 0514 	add.w	r5, r8, #20
 80138a4:	f100 0e14 	add.w	lr, r0, #20
 80138a8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80138ac:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80138b0:	f108 0210 	add.w	r2, r8, #16
 80138b4:	46f2      	mov	sl, lr
 80138b6:	2100      	movs	r1, #0
 80138b8:	f859 3b04 	ldr.w	r3, [r9], #4
 80138bc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80138c0:	fa1f f883 	uxth.w	r8, r3
 80138c4:	fa11 f18b 	uxtah	r1, r1, fp
 80138c8:	0c1b      	lsrs	r3, r3, #16
 80138ca:	eba1 0808 	sub.w	r8, r1, r8
 80138ce:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80138d2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80138d6:	fa1f f888 	uxth.w	r8, r8
 80138da:	1419      	asrs	r1, r3, #16
 80138dc:	454e      	cmp	r6, r9
 80138de:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80138e2:	f84a 3b04 	str.w	r3, [sl], #4
 80138e6:	d8e7      	bhi.n	80138b8 <__mdiff+0x80>
 80138e8:	1b33      	subs	r3, r6, r4
 80138ea:	3b15      	subs	r3, #21
 80138ec:	f023 0303 	bic.w	r3, r3, #3
 80138f0:	3304      	adds	r3, #4
 80138f2:	3415      	adds	r4, #21
 80138f4:	42a6      	cmp	r6, r4
 80138f6:	bf38      	it	cc
 80138f8:	2304      	movcc	r3, #4
 80138fa:	441d      	add	r5, r3
 80138fc:	4473      	add	r3, lr
 80138fe:	469e      	mov	lr, r3
 8013900:	462e      	mov	r6, r5
 8013902:	4566      	cmp	r6, ip
 8013904:	d30e      	bcc.n	8013924 <__mdiff+0xec>
 8013906:	f10c 0203 	add.w	r2, ip, #3
 801390a:	1b52      	subs	r2, r2, r5
 801390c:	f022 0203 	bic.w	r2, r2, #3
 8013910:	3d03      	subs	r5, #3
 8013912:	45ac      	cmp	ip, r5
 8013914:	bf38      	it	cc
 8013916:	2200      	movcc	r2, #0
 8013918:	441a      	add	r2, r3
 801391a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801391e:	b17b      	cbz	r3, 8013940 <__mdiff+0x108>
 8013920:	6107      	str	r7, [r0, #16]
 8013922:	e7a3      	b.n	801386c <__mdiff+0x34>
 8013924:	f856 8b04 	ldr.w	r8, [r6], #4
 8013928:	fa11 f288 	uxtah	r2, r1, r8
 801392c:	1414      	asrs	r4, r2, #16
 801392e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8013932:	b292      	uxth	r2, r2
 8013934:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8013938:	f84e 2b04 	str.w	r2, [lr], #4
 801393c:	1421      	asrs	r1, r4, #16
 801393e:	e7e0      	b.n	8013902 <__mdiff+0xca>
 8013940:	3f01      	subs	r7, #1
 8013942:	e7ea      	b.n	801391a <__mdiff+0xe2>
 8013944:	08016b61 	.word	0x08016b61
 8013948:	08016bec 	.word	0x08016bec

0801394c <__ulp>:
 801394c:	b082      	sub	sp, #8
 801394e:	ed8d 0b00 	vstr	d0, [sp]
 8013952:	9b01      	ldr	r3, [sp, #4]
 8013954:	4912      	ldr	r1, [pc, #72]	; (80139a0 <__ulp+0x54>)
 8013956:	4019      	ands	r1, r3
 8013958:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 801395c:	2900      	cmp	r1, #0
 801395e:	dd05      	ble.n	801396c <__ulp+0x20>
 8013960:	2200      	movs	r2, #0
 8013962:	460b      	mov	r3, r1
 8013964:	ec43 2b10 	vmov	d0, r2, r3
 8013968:	b002      	add	sp, #8
 801396a:	4770      	bx	lr
 801396c:	4249      	negs	r1, r1
 801396e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8013972:	ea4f 5021 	mov.w	r0, r1, asr #20
 8013976:	f04f 0200 	mov.w	r2, #0
 801397a:	f04f 0300 	mov.w	r3, #0
 801397e:	da04      	bge.n	801398a <__ulp+0x3e>
 8013980:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8013984:	fa41 f300 	asr.w	r3, r1, r0
 8013988:	e7ec      	b.n	8013964 <__ulp+0x18>
 801398a:	f1a0 0114 	sub.w	r1, r0, #20
 801398e:	291e      	cmp	r1, #30
 8013990:	bfda      	itte	le
 8013992:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8013996:	fa20 f101 	lsrle.w	r1, r0, r1
 801399a:	2101      	movgt	r1, #1
 801399c:	460a      	mov	r2, r1
 801399e:	e7e1      	b.n	8013964 <__ulp+0x18>
 80139a0:	7ff00000 	.word	0x7ff00000

080139a4 <__b2d>:
 80139a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80139a6:	6905      	ldr	r5, [r0, #16]
 80139a8:	f100 0714 	add.w	r7, r0, #20
 80139ac:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80139b0:	1f2e      	subs	r6, r5, #4
 80139b2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80139b6:	4620      	mov	r0, r4
 80139b8:	f7ff fd48 	bl	801344c <__hi0bits>
 80139bc:	f1c0 0320 	rsb	r3, r0, #32
 80139c0:	280a      	cmp	r0, #10
 80139c2:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8013a40 <__b2d+0x9c>
 80139c6:	600b      	str	r3, [r1, #0]
 80139c8:	dc14      	bgt.n	80139f4 <__b2d+0x50>
 80139ca:	f1c0 0e0b 	rsb	lr, r0, #11
 80139ce:	fa24 f10e 	lsr.w	r1, r4, lr
 80139d2:	42b7      	cmp	r7, r6
 80139d4:	ea41 030c 	orr.w	r3, r1, ip
 80139d8:	bf34      	ite	cc
 80139da:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80139de:	2100      	movcs	r1, #0
 80139e0:	3015      	adds	r0, #21
 80139e2:	fa04 f000 	lsl.w	r0, r4, r0
 80139e6:	fa21 f10e 	lsr.w	r1, r1, lr
 80139ea:	ea40 0201 	orr.w	r2, r0, r1
 80139ee:	ec43 2b10 	vmov	d0, r2, r3
 80139f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80139f4:	42b7      	cmp	r7, r6
 80139f6:	bf3a      	itte	cc
 80139f8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80139fc:	f1a5 0608 	subcc.w	r6, r5, #8
 8013a00:	2100      	movcs	r1, #0
 8013a02:	380b      	subs	r0, #11
 8013a04:	d017      	beq.n	8013a36 <__b2d+0x92>
 8013a06:	f1c0 0c20 	rsb	ip, r0, #32
 8013a0a:	fa04 f500 	lsl.w	r5, r4, r0
 8013a0e:	42be      	cmp	r6, r7
 8013a10:	fa21 f40c 	lsr.w	r4, r1, ip
 8013a14:	ea45 0504 	orr.w	r5, r5, r4
 8013a18:	bf8c      	ite	hi
 8013a1a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8013a1e:	2400      	movls	r4, #0
 8013a20:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8013a24:	fa01 f000 	lsl.w	r0, r1, r0
 8013a28:	fa24 f40c 	lsr.w	r4, r4, ip
 8013a2c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8013a30:	ea40 0204 	orr.w	r2, r0, r4
 8013a34:	e7db      	b.n	80139ee <__b2d+0x4a>
 8013a36:	ea44 030c 	orr.w	r3, r4, ip
 8013a3a:	460a      	mov	r2, r1
 8013a3c:	e7d7      	b.n	80139ee <__b2d+0x4a>
 8013a3e:	bf00      	nop
 8013a40:	3ff00000 	.word	0x3ff00000

08013a44 <__d2b>:
 8013a44:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8013a48:	4689      	mov	r9, r1
 8013a4a:	2101      	movs	r1, #1
 8013a4c:	ec57 6b10 	vmov	r6, r7, d0
 8013a50:	4690      	mov	r8, r2
 8013a52:	f7ff fc09 	bl	8013268 <_Balloc>
 8013a56:	4604      	mov	r4, r0
 8013a58:	b930      	cbnz	r0, 8013a68 <__d2b+0x24>
 8013a5a:	4602      	mov	r2, r0
 8013a5c:	4b25      	ldr	r3, [pc, #148]	; (8013af4 <__d2b+0xb0>)
 8013a5e:	4826      	ldr	r0, [pc, #152]	; (8013af8 <__d2b+0xb4>)
 8013a60:	f240 310a 	movw	r1, #778	; 0x30a
 8013a64:	f7fe f9a6 	bl	8011db4 <__assert_func>
 8013a68:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8013a6c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8013a70:	bb35      	cbnz	r5, 8013ac0 <__d2b+0x7c>
 8013a72:	2e00      	cmp	r6, #0
 8013a74:	9301      	str	r3, [sp, #4]
 8013a76:	d028      	beq.n	8013aca <__d2b+0x86>
 8013a78:	4668      	mov	r0, sp
 8013a7a:	9600      	str	r6, [sp, #0]
 8013a7c:	f7ff fd06 	bl	801348c <__lo0bits>
 8013a80:	9900      	ldr	r1, [sp, #0]
 8013a82:	b300      	cbz	r0, 8013ac6 <__d2b+0x82>
 8013a84:	9a01      	ldr	r2, [sp, #4]
 8013a86:	f1c0 0320 	rsb	r3, r0, #32
 8013a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8013a8e:	430b      	orrs	r3, r1
 8013a90:	40c2      	lsrs	r2, r0
 8013a92:	6163      	str	r3, [r4, #20]
 8013a94:	9201      	str	r2, [sp, #4]
 8013a96:	9b01      	ldr	r3, [sp, #4]
 8013a98:	61a3      	str	r3, [r4, #24]
 8013a9a:	2b00      	cmp	r3, #0
 8013a9c:	bf14      	ite	ne
 8013a9e:	2202      	movne	r2, #2
 8013aa0:	2201      	moveq	r2, #1
 8013aa2:	6122      	str	r2, [r4, #16]
 8013aa4:	b1d5      	cbz	r5, 8013adc <__d2b+0x98>
 8013aa6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8013aaa:	4405      	add	r5, r0
 8013aac:	f8c9 5000 	str.w	r5, [r9]
 8013ab0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8013ab4:	f8c8 0000 	str.w	r0, [r8]
 8013ab8:	4620      	mov	r0, r4
 8013aba:	b003      	add	sp, #12
 8013abc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013ac0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8013ac4:	e7d5      	b.n	8013a72 <__d2b+0x2e>
 8013ac6:	6161      	str	r1, [r4, #20]
 8013ac8:	e7e5      	b.n	8013a96 <__d2b+0x52>
 8013aca:	a801      	add	r0, sp, #4
 8013acc:	f7ff fcde 	bl	801348c <__lo0bits>
 8013ad0:	9b01      	ldr	r3, [sp, #4]
 8013ad2:	6163      	str	r3, [r4, #20]
 8013ad4:	2201      	movs	r2, #1
 8013ad6:	6122      	str	r2, [r4, #16]
 8013ad8:	3020      	adds	r0, #32
 8013ada:	e7e3      	b.n	8013aa4 <__d2b+0x60>
 8013adc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8013ae0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8013ae4:	f8c9 0000 	str.w	r0, [r9]
 8013ae8:	6918      	ldr	r0, [r3, #16]
 8013aea:	f7ff fcaf 	bl	801344c <__hi0bits>
 8013aee:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8013af2:	e7df      	b.n	8013ab4 <__d2b+0x70>
 8013af4:	08016b61 	.word	0x08016b61
 8013af8:	08016bec 	.word	0x08016bec

08013afc <__ratio>:
 8013afc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b00:	4688      	mov	r8, r1
 8013b02:	4669      	mov	r1, sp
 8013b04:	4681      	mov	r9, r0
 8013b06:	f7ff ff4d 	bl	80139a4 <__b2d>
 8013b0a:	a901      	add	r1, sp, #4
 8013b0c:	4640      	mov	r0, r8
 8013b0e:	ec55 4b10 	vmov	r4, r5, d0
 8013b12:	f7ff ff47 	bl	80139a4 <__b2d>
 8013b16:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8013b1a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8013b1e:	eba3 0c02 	sub.w	ip, r3, r2
 8013b22:	e9dd 3200 	ldrd	r3, r2, [sp]
 8013b26:	1a9b      	subs	r3, r3, r2
 8013b28:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8013b2c:	ec51 0b10 	vmov	r0, r1, d0
 8013b30:	2b00      	cmp	r3, #0
 8013b32:	bfd6      	itet	le
 8013b34:	460a      	movle	r2, r1
 8013b36:	462a      	movgt	r2, r5
 8013b38:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8013b3c:	468b      	mov	fp, r1
 8013b3e:	462f      	mov	r7, r5
 8013b40:	bfd4      	ite	le
 8013b42:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8013b46:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8013b4a:	4620      	mov	r0, r4
 8013b4c:	ee10 2a10 	vmov	r2, s0
 8013b50:	465b      	mov	r3, fp
 8013b52:	4639      	mov	r1, r7
 8013b54:	f7ec feaa 	bl	80008ac <__aeabi_ddiv>
 8013b58:	ec41 0b10 	vmov	d0, r0, r1
 8013b5c:	b003      	add	sp, #12
 8013b5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013b62 <__copybits>:
 8013b62:	3901      	subs	r1, #1
 8013b64:	b570      	push	{r4, r5, r6, lr}
 8013b66:	1149      	asrs	r1, r1, #5
 8013b68:	6914      	ldr	r4, [r2, #16]
 8013b6a:	3101      	adds	r1, #1
 8013b6c:	f102 0314 	add.w	r3, r2, #20
 8013b70:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8013b74:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8013b78:	1f05      	subs	r5, r0, #4
 8013b7a:	42a3      	cmp	r3, r4
 8013b7c:	d30c      	bcc.n	8013b98 <__copybits+0x36>
 8013b7e:	1aa3      	subs	r3, r4, r2
 8013b80:	3b11      	subs	r3, #17
 8013b82:	f023 0303 	bic.w	r3, r3, #3
 8013b86:	3211      	adds	r2, #17
 8013b88:	42a2      	cmp	r2, r4
 8013b8a:	bf88      	it	hi
 8013b8c:	2300      	movhi	r3, #0
 8013b8e:	4418      	add	r0, r3
 8013b90:	2300      	movs	r3, #0
 8013b92:	4288      	cmp	r0, r1
 8013b94:	d305      	bcc.n	8013ba2 <__copybits+0x40>
 8013b96:	bd70      	pop	{r4, r5, r6, pc}
 8013b98:	f853 6b04 	ldr.w	r6, [r3], #4
 8013b9c:	f845 6f04 	str.w	r6, [r5, #4]!
 8013ba0:	e7eb      	b.n	8013b7a <__copybits+0x18>
 8013ba2:	f840 3b04 	str.w	r3, [r0], #4
 8013ba6:	e7f4      	b.n	8013b92 <__copybits+0x30>

08013ba8 <__any_on>:
 8013ba8:	f100 0214 	add.w	r2, r0, #20
 8013bac:	6900      	ldr	r0, [r0, #16]
 8013bae:	114b      	asrs	r3, r1, #5
 8013bb0:	4298      	cmp	r0, r3
 8013bb2:	b510      	push	{r4, lr}
 8013bb4:	db11      	blt.n	8013bda <__any_on+0x32>
 8013bb6:	dd0a      	ble.n	8013bce <__any_on+0x26>
 8013bb8:	f011 011f 	ands.w	r1, r1, #31
 8013bbc:	d007      	beq.n	8013bce <__any_on+0x26>
 8013bbe:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8013bc2:	fa24 f001 	lsr.w	r0, r4, r1
 8013bc6:	fa00 f101 	lsl.w	r1, r0, r1
 8013bca:	428c      	cmp	r4, r1
 8013bcc:	d10b      	bne.n	8013be6 <__any_on+0x3e>
 8013bce:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8013bd2:	4293      	cmp	r3, r2
 8013bd4:	d803      	bhi.n	8013bde <__any_on+0x36>
 8013bd6:	2000      	movs	r0, #0
 8013bd8:	bd10      	pop	{r4, pc}
 8013bda:	4603      	mov	r3, r0
 8013bdc:	e7f7      	b.n	8013bce <__any_on+0x26>
 8013bde:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8013be2:	2900      	cmp	r1, #0
 8013be4:	d0f5      	beq.n	8013bd2 <__any_on+0x2a>
 8013be6:	2001      	movs	r0, #1
 8013be8:	e7f6      	b.n	8013bd8 <__any_on+0x30>

08013bea <_calloc_r>:
 8013bea:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013bec:	fba1 2402 	umull	r2, r4, r1, r2
 8013bf0:	b94c      	cbnz	r4, 8013c06 <_calloc_r+0x1c>
 8013bf2:	4611      	mov	r1, r2
 8013bf4:	9201      	str	r2, [sp, #4]
 8013bf6:	f000 f87b 	bl	8013cf0 <_malloc_r>
 8013bfa:	9a01      	ldr	r2, [sp, #4]
 8013bfc:	4605      	mov	r5, r0
 8013bfe:	b930      	cbnz	r0, 8013c0e <_calloc_r+0x24>
 8013c00:	4628      	mov	r0, r5
 8013c02:	b003      	add	sp, #12
 8013c04:	bd30      	pop	{r4, r5, pc}
 8013c06:	220c      	movs	r2, #12
 8013c08:	6002      	str	r2, [r0, #0]
 8013c0a:	2500      	movs	r5, #0
 8013c0c:	e7f8      	b.n	8013c00 <_calloc_r+0x16>
 8013c0e:	4621      	mov	r1, r4
 8013c10:	f7fc fa92 	bl	8010138 <memset>
 8013c14:	e7f4      	b.n	8013c00 <_calloc_r+0x16>
	...

08013c18 <_free_r>:
 8013c18:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013c1a:	2900      	cmp	r1, #0
 8013c1c:	d044      	beq.n	8013ca8 <_free_r+0x90>
 8013c1e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013c22:	9001      	str	r0, [sp, #4]
 8013c24:	2b00      	cmp	r3, #0
 8013c26:	f1a1 0404 	sub.w	r4, r1, #4
 8013c2a:	bfb8      	it	lt
 8013c2c:	18e4      	addlt	r4, r4, r3
 8013c2e:	f001 fae1 	bl	80151f4 <__malloc_lock>
 8013c32:	4a1e      	ldr	r2, [pc, #120]	; (8013cac <_free_r+0x94>)
 8013c34:	9801      	ldr	r0, [sp, #4]
 8013c36:	6813      	ldr	r3, [r2, #0]
 8013c38:	b933      	cbnz	r3, 8013c48 <_free_r+0x30>
 8013c3a:	6063      	str	r3, [r4, #4]
 8013c3c:	6014      	str	r4, [r2, #0]
 8013c3e:	b003      	add	sp, #12
 8013c40:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013c44:	f001 badc 	b.w	8015200 <__malloc_unlock>
 8013c48:	42a3      	cmp	r3, r4
 8013c4a:	d908      	bls.n	8013c5e <_free_r+0x46>
 8013c4c:	6825      	ldr	r5, [r4, #0]
 8013c4e:	1961      	adds	r1, r4, r5
 8013c50:	428b      	cmp	r3, r1
 8013c52:	bf01      	itttt	eq
 8013c54:	6819      	ldreq	r1, [r3, #0]
 8013c56:	685b      	ldreq	r3, [r3, #4]
 8013c58:	1949      	addeq	r1, r1, r5
 8013c5a:	6021      	streq	r1, [r4, #0]
 8013c5c:	e7ed      	b.n	8013c3a <_free_r+0x22>
 8013c5e:	461a      	mov	r2, r3
 8013c60:	685b      	ldr	r3, [r3, #4]
 8013c62:	b10b      	cbz	r3, 8013c68 <_free_r+0x50>
 8013c64:	42a3      	cmp	r3, r4
 8013c66:	d9fa      	bls.n	8013c5e <_free_r+0x46>
 8013c68:	6811      	ldr	r1, [r2, #0]
 8013c6a:	1855      	adds	r5, r2, r1
 8013c6c:	42a5      	cmp	r5, r4
 8013c6e:	d10b      	bne.n	8013c88 <_free_r+0x70>
 8013c70:	6824      	ldr	r4, [r4, #0]
 8013c72:	4421      	add	r1, r4
 8013c74:	1854      	adds	r4, r2, r1
 8013c76:	42a3      	cmp	r3, r4
 8013c78:	6011      	str	r1, [r2, #0]
 8013c7a:	d1e0      	bne.n	8013c3e <_free_r+0x26>
 8013c7c:	681c      	ldr	r4, [r3, #0]
 8013c7e:	685b      	ldr	r3, [r3, #4]
 8013c80:	6053      	str	r3, [r2, #4]
 8013c82:	4421      	add	r1, r4
 8013c84:	6011      	str	r1, [r2, #0]
 8013c86:	e7da      	b.n	8013c3e <_free_r+0x26>
 8013c88:	d902      	bls.n	8013c90 <_free_r+0x78>
 8013c8a:	230c      	movs	r3, #12
 8013c8c:	6003      	str	r3, [r0, #0]
 8013c8e:	e7d6      	b.n	8013c3e <_free_r+0x26>
 8013c90:	6825      	ldr	r5, [r4, #0]
 8013c92:	1961      	adds	r1, r4, r5
 8013c94:	428b      	cmp	r3, r1
 8013c96:	bf04      	itt	eq
 8013c98:	6819      	ldreq	r1, [r3, #0]
 8013c9a:	685b      	ldreq	r3, [r3, #4]
 8013c9c:	6063      	str	r3, [r4, #4]
 8013c9e:	bf04      	itt	eq
 8013ca0:	1949      	addeq	r1, r1, r5
 8013ca2:	6021      	streq	r1, [r4, #0]
 8013ca4:	6054      	str	r4, [r2, #4]
 8013ca6:	e7ca      	b.n	8013c3e <_free_r+0x26>
 8013ca8:	b003      	add	sp, #12
 8013caa:	bd30      	pop	{r4, r5, pc}
 8013cac:	2000a18c 	.word	0x2000a18c

08013cb0 <sbrk_aligned>:
 8013cb0:	b570      	push	{r4, r5, r6, lr}
 8013cb2:	4e0e      	ldr	r6, [pc, #56]	; (8013cec <sbrk_aligned+0x3c>)
 8013cb4:	460c      	mov	r4, r1
 8013cb6:	6831      	ldr	r1, [r6, #0]
 8013cb8:	4605      	mov	r5, r0
 8013cba:	b911      	cbnz	r1, 8013cc2 <sbrk_aligned+0x12>
 8013cbc:	f000 fe80 	bl	80149c0 <_sbrk_r>
 8013cc0:	6030      	str	r0, [r6, #0]
 8013cc2:	4621      	mov	r1, r4
 8013cc4:	4628      	mov	r0, r5
 8013cc6:	f000 fe7b 	bl	80149c0 <_sbrk_r>
 8013cca:	1c43      	adds	r3, r0, #1
 8013ccc:	d00a      	beq.n	8013ce4 <sbrk_aligned+0x34>
 8013cce:	1cc4      	adds	r4, r0, #3
 8013cd0:	f024 0403 	bic.w	r4, r4, #3
 8013cd4:	42a0      	cmp	r0, r4
 8013cd6:	d007      	beq.n	8013ce8 <sbrk_aligned+0x38>
 8013cd8:	1a21      	subs	r1, r4, r0
 8013cda:	4628      	mov	r0, r5
 8013cdc:	f000 fe70 	bl	80149c0 <_sbrk_r>
 8013ce0:	3001      	adds	r0, #1
 8013ce2:	d101      	bne.n	8013ce8 <sbrk_aligned+0x38>
 8013ce4:	f04f 34ff 	mov.w	r4, #4294967295
 8013ce8:	4620      	mov	r0, r4
 8013cea:	bd70      	pop	{r4, r5, r6, pc}
 8013cec:	2000a190 	.word	0x2000a190

08013cf0 <_malloc_r>:
 8013cf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013cf4:	1ccd      	adds	r5, r1, #3
 8013cf6:	f025 0503 	bic.w	r5, r5, #3
 8013cfa:	3508      	adds	r5, #8
 8013cfc:	2d0c      	cmp	r5, #12
 8013cfe:	bf38      	it	cc
 8013d00:	250c      	movcc	r5, #12
 8013d02:	2d00      	cmp	r5, #0
 8013d04:	4607      	mov	r7, r0
 8013d06:	db01      	blt.n	8013d0c <_malloc_r+0x1c>
 8013d08:	42a9      	cmp	r1, r5
 8013d0a:	d905      	bls.n	8013d18 <_malloc_r+0x28>
 8013d0c:	230c      	movs	r3, #12
 8013d0e:	603b      	str	r3, [r7, #0]
 8013d10:	2600      	movs	r6, #0
 8013d12:	4630      	mov	r0, r6
 8013d14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013d18:	4e2e      	ldr	r6, [pc, #184]	; (8013dd4 <_malloc_r+0xe4>)
 8013d1a:	f001 fa6b 	bl	80151f4 <__malloc_lock>
 8013d1e:	6833      	ldr	r3, [r6, #0]
 8013d20:	461c      	mov	r4, r3
 8013d22:	bb34      	cbnz	r4, 8013d72 <_malloc_r+0x82>
 8013d24:	4629      	mov	r1, r5
 8013d26:	4638      	mov	r0, r7
 8013d28:	f7ff ffc2 	bl	8013cb0 <sbrk_aligned>
 8013d2c:	1c43      	adds	r3, r0, #1
 8013d2e:	4604      	mov	r4, r0
 8013d30:	d14d      	bne.n	8013dce <_malloc_r+0xde>
 8013d32:	6834      	ldr	r4, [r6, #0]
 8013d34:	4626      	mov	r6, r4
 8013d36:	2e00      	cmp	r6, #0
 8013d38:	d140      	bne.n	8013dbc <_malloc_r+0xcc>
 8013d3a:	6823      	ldr	r3, [r4, #0]
 8013d3c:	4631      	mov	r1, r6
 8013d3e:	4638      	mov	r0, r7
 8013d40:	eb04 0803 	add.w	r8, r4, r3
 8013d44:	f000 fe3c 	bl	80149c0 <_sbrk_r>
 8013d48:	4580      	cmp	r8, r0
 8013d4a:	d13a      	bne.n	8013dc2 <_malloc_r+0xd2>
 8013d4c:	6821      	ldr	r1, [r4, #0]
 8013d4e:	3503      	adds	r5, #3
 8013d50:	1a6d      	subs	r5, r5, r1
 8013d52:	f025 0503 	bic.w	r5, r5, #3
 8013d56:	3508      	adds	r5, #8
 8013d58:	2d0c      	cmp	r5, #12
 8013d5a:	bf38      	it	cc
 8013d5c:	250c      	movcc	r5, #12
 8013d5e:	4629      	mov	r1, r5
 8013d60:	4638      	mov	r0, r7
 8013d62:	f7ff ffa5 	bl	8013cb0 <sbrk_aligned>
 8013d66:	3001      	adds	r0, #1
 8013d68:	d02b      	beq.n	8013dc2 <_malloc_r+0xd2>
 8013d6a:	6823      	ldr	r3, [r4, #0]
 8013d6c:	442b      	add	r3, r5
 8013d6e:	6023      	str	r3, [r4, #0]
 8013d70:	e00e      	b.n	8013d90 <_malloc_r+0xa0>
 8013d72:	6822      	ldr	r2, [r4, #0]
 8013d74:	1b52      	subs	r2, r2, r5
 8013d76:	d41e      	bmi.n	8013db6 <_malloc_r+0xc6>
 8013d78:	2a0b      	cmp	r2, #11
 8013d7a:	d916      	bls.n	8013daa <_malloc_r+0xba>
 8013d7c:	1961      	adds	r1, r4, r5
 8013d7e:	42a3      	cmp	r3, r4
 8013d80:	6025      	str	r5, [r4, #0]
 8013d82:	bf18      	it	ne
 8013d84:	6059      	strne	r1, [r3, #4]
 8013d86:	6863      	ldr	r3, [r4, #4]
 8013d88:	bf08      	it	eq
 8013d8a:	6031      	streq	r1, [r6, #0]
 8013d8c:	5162      	str	r2, [r4, r5]
 8013d8e:	604b      	str	r3, [r1, #4]
 8013d90:	4638      	mov	r0, r7
 8013d92:	f104 060b 	add.w	r6, r4, #11
 8013d96:	f001 fa33 	bl	8015200 <__malloc_unlock>
 8013d9a:	f026 0607 	bic.w	r6, r6, #7
 8013d9e:	1d23      	adds	r3, r4, #4
 8013da0:	1af2      	subs	r2, r6, r3
 8013da2:	d0b6      	beq.n	8013d12 <_malloc_r+0x22>
 8013da4:	1b9b      	subs	r3, r3, r6
 8013da6:	50a3      	str	r3, [r4, r2]
 8013da8:	e7b3      	b.n	8013d12 <_malloc_r+0x22>
 8013daa:	6862      	ldr	r2, [r4, #4]
 8013dac:	42a3      	cmp	r3, r4
 8013dae:	bf0c      	ite	eq
 8013db0:	6032      	streq	r2, [r6, #0]
 8013db2:	605a      	strne	r2, [r3, #4]
 8013db4:	e7ec      	b.n	8013d90 <_malloc_r+0xa0>
 8013db6:	4623      	mov	r3, r4
 8013db8:	6864      	ldr	r4, [r4, #4]
 8013dba:	e7b2      	b.n	8013d22 <_malloc_r+0x32>
 8013dbc:	4634      	mov	r4, r6
 8013dbe:	6876      	ldr	r6, [r6, #4]
 8013dc0:	e7b9      	b.n	8013d36 <_malloc_r+0x46>
 8013dc2:	230c      	movs	r3, #12
 8013dc4:	603b      	str	r3, [r7, #0]
 8013dc6:	4638      	mov	r0, r7
 8013dc8:	f001 fa1a 	bl	8015200 <__malloc_unlock>
 8013dcc:	e7a1      	b.n	8013d12 <_malloc_r+0x22>
 8013dce:	6025      	str	r5, [r4, #0]
 8013dd0:	e7de      	b.n	8013d90 <_malloc_r+0xa0>
 8013dd2:	bf00      	nop
 8013dd4:	2000a18c 	.word	0x2000a18c

08013dd8 <__ssputs_r>:
 8013dd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013ddc:	688e      	ldr	r6, [r1, #8]
 8013dde:	429e      	cmp	r6, r3
 8013de0:	4682      	mov	sl, r0
 8013de2:	460c      	mov	r4, r1
 8013de4:	4690      	mov	r8, r2
 8013de6:	461f      	mov	r7, r3
 8013de8:	d838      	bhi.n	8013e5c <__ssputs_r+0x84>
 8013dea:	898a      	ldrh	r2, [r1, #12]
 8013dec:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8013df0:	d032      	beq.n	8013e58 <__ssputs_r+0x80>
 8013df2:	6825      	ldr	r5, [r4, #0]
 8013df4:	6909      	ldr	r1, [r1, #16]
 8013df6:	eba5 0901 	sub.w	r9, r5, r1
 8013dfa:	6965      	ldr	r5, [r4, #20]
 8013dfc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013e00:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8013e04:	3301      	adds	r3, #1
 8013e06:	444b      	add	r3, r9
 8013e08:	106d      	asrs	r5, r5, #1
 8013e0a:	429d      	cmp	r5, r3
 8013e0c:	bf38      	it	cc
 8013e0e:	461d      	movcc	r5, r3
 8013e10:	0553      	lsls	r3, r2, #21
 8013e12:	d531      	bpl.n	8013e78 <__ssputs_r+0xa0>
 8013e14:	4629      	mov	r1, r5
 8013e16:	f7ff ff6b 	bl	8013cf0 <_malloc_r>
 8013e1a:	4606      	mov	r6, r0
 8013e1c:	b950      	cbnz	r0, 8013e34 <__ssputs_r+0x5c>
 8013e1e:	230c      	movs	r3, #12
 8013e20:	f8ca 3000 	str.w	r3, [sl]
 8013e24:	89a3      	ldrh	r3, [r4, #12]
 8013e26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013e2a:	81a3      	strh	r3, [r4, #12]
 8013e2c:	f04f 30ff 	mov.w	r0, #4294967295
 8013e30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013e34:	6921      	ldr	r1, [r4, #16]
 8013e36:	464a      	mov	r2, r9
 8013e38:	f7fc f970 	bl	801011c <memcpy>
 8013e3c:	89a3      	ldrh	r3, [r4, #12]
 8013e3e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8013e42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013e46:	81a3      	strh	r3, [r4, #12]
 8013e48:	6126      	str	r6, [r4, #16]
 8013e4a:	6165      	str	r5, [r4, #20]
 8013e4c:	444e      	add	r6, r9
 8013e4e:	eba5 0509 	sub.w	r5, r5, r9
 8013e52:	6026      	str	r6, [r4, #0]
 8013e54:	60a5      	str	r5, [r4, #8]
 8013e56:	463e      	mov	r6, r7
 8013e58:	42be      	cmp	r6, r7
 8013e5a:	d900      	bls.n	8013e5e <__ssputs_r+0x86>
 8013e5c:	463e      	mov	r6, r7
 8013e5e:	6820      	ldr	r0, [r4, #0]
 8013e60:	4632      	mov	r2, r6
 8013e62:	4641      	mov	r1, r8
 8013e64:	f001 f9ac 	bl	80151c0 <memmove>
 8013e68:	68a3      	ldr	r3, [r4, #8]
 8013e6a:	1b9b      	subs	r3, r3, r6
 8013e6c:	60a3      	str	r3, [r4, #8]
 8013e6e:	6823      	ldr	r3, [r4, #0]
 8013e70:	4433      	add	r3, r6
 8013e72:	6023      	str	r3, [r4, #0]
 8013e74:	2000      	movs	r0, #0
 8013e76:	e7db      	b.n	8013e30 <__ssputs_r+0x58>
 8013e78:	462a      	mov	r2, r5
 8013e7a:	f001 f9c7 	bl	801520c <_realloc_r>
 8013e7e:	4606      	mov	r6, r0
 8013e80:	2800      	cmp	r0, #0
 8013e82:	d1e1      	bne.n	8013e48 <__ssputs_r+0x70>
 8013e84:	6921      	ldr	r1, [r4, #16]
 8013e86:	4650      	mov	r0, sl
 8013e88:	f7ff fec6 	bl	8013c18 <_free_r>
 8013e8c:	e7c7      	b.n	8013e1e <__ssputs_r+0x46>
	...

08013e90 <_svfiprintf_r>:
 8013e90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013e94:	4698      	mov	r8, r3
 8013e96:	898b      	ldrh	r3, [r1, #12]
 8013e98:	061b      	lsls	r3, r3, #24
 8013e9a:	b09d      	sub	sp, #116	; 0x74
 8013e9c:	4607      	mov	r7, r0
 8013e9e:	460d      	mov	r5, r1
 8013ea0:	4614      	mov	r4, r2
 8013ea2:	d50e      	bpl.n	8013ec2 <_svfiprintf_r+0x32>
 8013ea4:	690b      	ldr	r3, [r1, #16]
 8013ea6:	b963      	cbnz	r3, 8013ec2 <_svfiprintf_r+0x32>
 8013ea8:	2140      	movs	r1, #64	; 0x40
 8013eaa:	f7ff ff21 	bl	8013cf0 <_malloc_r>
 8013eae:	6028      	str	r0, [r5, #0]
 8013eb0:	6128      	str	r0, [r5, #16]
 8013eb2:	b920      	cbnz	r0, 8013ebe <_svfiprintf_r+0x2e>
 8013eb4:	230c      	movs	r3, #12
 8013eb6:	603b      	str	r3, [r7, #0]
 8013eb8:	f04f 30ff 	mov.w	r0, #4294967295
 8013ebc:	e0d1      	b.n	8014062 <_svfiprintf_r+0x1d2>
 8013ebe:	2340      	movs	r3, #64	; 0x40
 8013ec0:	616b      	str	r3, [r5, #20]
 8013ec2:	2300      	movs	r3, #0
 8013ec4:	9309      	str	r3, [sp, #36]	; 0x24
 8013ec6:	2320      	movs	r3, #32
 8013ec8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013ecc:	f8cd 800c 	str.w	r8, [sp, #12]
 8013ed0:	2330      	movs	r3, #48	; 0x30
 8013ed2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801407c <_svfiprintf_r+0x1ec>
 8013ed6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013eda:	f04f 0901 	mov.w	r9, #1
 8013ede:	4623      	mov	r3, r4
 8013ee0:	469a      	mov	sl, r3
 8013ee2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013ee6:	b10a      	cbz	r2, 8013eec <_svfiprintf_r+0x5c>
 8013ee8:	2a25      	cmp	r2, #37	; 0x25
 8013eea:	d1f9      	bne.n	8013ee0 <_svfiprintf_r+0x50>
 8013eec:	ebba 0b04 	subs.w	fp, sl, r4
 8013ef0:	d00b      	beq.n	8013f0a <_svfiprintf_r+0x7a>
 8013ef2:	465b      	mov	r3, fp
 8013ef4:	4622      	mov	r2, r4
 8013ef6:	4629      	mov	r1, r5
 8013ef8:	4638      	mov	r0, r7
 8013efa:	f7ff ff6d 	bl	8013dd8 <__ssputs_r>
 8013efe:	3001      	adds	r0, #1
 8013f00:	f000 80aa 	beq.w	8014058 <_svfiprintf_r+0x1c8>
 8013f04:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013f06:	445a      	add	r2, fp
 8013f08:	9209      	str	r2, [sp, #36]	; 0x24
 8013f0a:	f89a 3000 	ldrb.w	r3, [sl]
 8013f0e:	2b00      	cmp	r3, #0
 8013f10:	f000 80a2 	beq.w	8014058 <_svfiprintf_r+0x1c8>
 8013f14:	2300      	movs	r3, #0
 8013f16:	f04f 32ff 	mov.w	r2, #4294967295
 8013f1a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013f1e:	f10a 0a01 	add.w	sl, sl, #1
 8013f22:	9304      	str	r3, [sp, #16]
 8013f24:	9307      	str	r3, [sp, #28]
 8013f26:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013f2a:	931a      	str	r3, [sp, #104]	; 0x68
 8013f2c:	4654      	mov	r4, sl
 8013f2e:	2205      	movs	r2, #5
 8013f30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013f34:	4851      	ldr	r0, [pc, #324]	; (801407c <_svfiprintf_r+0x1ec>)
 8013f36:	f7ec f983 	bl	8000240 <memchr>
 8013f3a:	9a04      	ldr	r2, [sp, #16]
 8013f3c:	b9d8      	cbnz	r0, 8013f76 <_svfiprintf_r+0xe6>
 8013f3e:	06d0      	lsls	r0, r2, #27
 8013f40:	bf44      	itt	mi
 8013f42:	2320      	movmi	r3, #32
 8013f44:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013f48:	0711      	lsls	r1, r2, #28
 8013f4a:	bf44      	itt	mi
 8013f4c:	232b      	movmi	r3, #43	; 0x2b
 8013f4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013f52:	f89a 3000 	ldrb.w	r3, [sl]
 8013f56:	2b2a      	cmp	r3, #42	; 0x2a
 8013f58:	d015      	beq.n	8013f86 <_svfiprintf_r+0xf6>
 8013f5a:	9a07      	ldr	r2, [sp, #28]
 8013f5c:	4654      	mov	r4, sl
 8013f5e:	2000      	movs	r0, #0
 8013f60:	f04f 0c0a 	mov.w	ip, #10
 8013f64:	4621      	mov	r1, r4
 8013f66:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013f6a:	3b30      	subs	r3, #48	; 0x30
 8013f6c:	2b09      	cmp	r3, #9
 8013f6e:	d94e      	bls.n	801400e <_svfiprintf_r+0x17e>
 8013f70:	b1b0      	cbz	r0, 8013fa0 <_svfiprintf_r+0x110>
 8013f72:	9207      	str	r2, [sp, #28]
 8013f74:	e014      	b.n	8013fa0 <_svfiprintf_r+0x110>
 8013f76:	eba0 0308 	sub.w	r3, r0, r8
 8013f7a:	fa09 f303 	lsl.w	r3, r9, r3
 8013f7e:	4313      	orrs	r3, r2
 8013f80:	9304      	str	r3, [sp, #16]
 8013f82:	46a2      	mov	sl, r4
 8013f84:	e7d2      	b.n	8013f2c <_svfiprintf_r+0x9c>
 8013f86:	9b03      	ldr	r3, [sp, #12]
 8013f88:	1d19      	adds	r1, r3, #4
 8013f8a:	681b      	ldr	r3, [r3, #0]
 8013f8c:	9103      	str	r1, [sp, #12]
 8013f8e:	2b00      	cmp	r3, #0
 8013f90:	bfbb      	ittet	lt
 8013f92:	425b      	neglt	r3, r3
 8013f94:	f042 0202 	orrlt.w	r2, r2, #2
 8013f98:	9307      	strge	r3, [sp, #28]
 8013f9a:	9307      	strlt	r3, [sp, #28]
 8013f9c:	bfb8      	it	lt
 8013f9e:	9204      	strlt	r2, [sp, #16]
 8013fa0:	7823      	ldrb	r3, [r4, #0]
 8013fa2:	2b2e      	cmp	r3, #46	; 0x2e
 8013fa4:	d10c      	bne.n	8013fc0 <_svfiprintf_r+0x130>
 8013fa6:	7863      	ldrb	r3, [r4, #1]
 8013fa8:	2b2a      	cmp	r3, #42	; 0x2a
 8013faa:	d135      	bne.n	8014018 <_svfiprintf_r+0x188>
 8013fac:	9b03      	ldr	r3, [sp, #12]
 8013fae:	1d1a      	adds	r2, r3, #4
 8013fb0:	681b      	ldr	r3, [r3, #0]
 8013fb2:	9203      	str	r2, [sp, #12]
 8013fb4:	2b00      	cmp	r3, #0
 8013fb6:	bfb8      	it	lt
 8013fb8:	f04f 33ff 	movlt.w	r3, #4294967295
 8013fbc:	3402      	adds	r4, #2
 8013fbe:	9305      	str	r3, [sp, #20]
 8013fc0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801408c <_svfiprintf_r+0x1fc>
 8013fc4:	7821      	ldrb	r1, [r4, #0]
 8013fc6:	2203      	movs	r2, #3
 8013fc8:	4650      	mov	r0, sl
 8013fca:	f7ec f939 	bl	8000240 <memchr>
 8013fce:	b140      	cbz	r0, 8013fe2 <_svfiprintf_r+0x152>
 8013fd0:	2340      	movs	r3, #64	; 0x40
 8013fd2:	eba0 000a 	sub.w	r0, r0, sl
 8013fd6:	fa03 f000 	lsl.w	r0, r3, r0
 8013fda:	9b04      	ldr	r3, [sp, #16]
 8013fdc:	4303      	orrs	r3, r0
 8013fde:	3401      	adds	r4, #1
 8013fe0:	9304      	str	r3, [sp, #16]
 8013fe2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013fe6:	4826      	ldr	r0, [pc, #152]	; (8014080 <_svfiprintf_r+0x1f0>)
 8013fe8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013fec:	2206      	movs	r2, #6
 8013fee:	f7ec f927 	bl	8000240 <memchr>
 8013ff2:	2800      	cmp	r0, #0
 8013ff4:	d038      	beq.n	8014068 <_svfiprintf_r+0x1d8>
 8013ff6:	4b23      	ldr	r3, [pc, #140]	; (8014084 <_svfiprintf_r+0x1f4>)
 8013ff8:	bb1b      	cbnz	r3, 8014042 <_svfiprintf_r+0x1b2>
 8013ffa:	9b03      	ldr	r3, [sp, #12]
 8013ffc:	3307      	adds	r3, #7
 8013ffe:	f023 0307 	bic.w	r3, r3, #7
 8014002:	3308      	adds	r3, #8
 8014004:	9303      	str	r3, [sp, #12]
 8014006:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014008:	4433      	add	r3, r6
 801400a:	9309      	str	r3, [sp, #36]	; 0x24
 801400c:	e767      	b.n	8013ede <_svfiprintf_r+0x4e>
 801400e:	fb0c 3202 	mla	r2, ip, r2, r3
 8014012:	460c      	mov	r4, r1
 8014014:	2001      	movs	r0, #1
 8014016:	e7a5      	b.n	8013f64 <_svfiprintf_r+0xd4>
 8014018:	2300      	movs	r3, #0
 801401a:	3401      	adds	r4, #1
 801401c:	9305      	str	r3, [sp, #20]
 801401e:	4619      	mov	r1, r3
 8014020:	f04f 0c0a 	mov.w	ip, #10
 8014024:	4620      	mov	r0, r4
 8014026:	f810 2b01 	ldrb.w	r2, [r0], #1
 801402a:	3a30      	subs	r2, #48	; 0x30
 801402c:	2a09      	cmp	r2, #9
 801402e:	d903      	bls.n	8014038 <_svfiprintf_r+0x1a8>
 8014030:	2b00      	cmp	r3, #0
 8014032:	d0c5      	beq.n	8013fc0 <_svfiprintf_r+0x130>
 8014034:	9105      	str	r1, [sp, #20]
 8014036:	e7c3      	b.n	8013fc0 <_svfiprintf_r+0x130>
 8014038:	fb0c 2101 	mla	r1, ip, r1, r2
 801403c:	4604      	mov	r4, r0
 801403e:	2301      	movs	r3, #1
 8014040:	e7f0      	b.n	8014024 <_svfiprintf_r+0x194>
 8014042:	ab03      	add	r3, sp, #12
 8014044:	9300      	str	r3, [sp, #0]
 8014046:	462a      	mov	r2, r5
 8014048:	4b0f      	ldr	r3, [pc, #60]	; (8014088 <_svfiprintf_r+0x1f8>)
 801404a:	a904      	add	r1, sp, #16
 801404c:	4638      	mov	r0, r7
 801404e:	f7fc f91b 	bl	8010288 <_printf_float>
 8014052:	1c42      	adds	r2, r0, #1
 8014054:	4606      	mov	r6, r0
 8014056:	d1d6      	bne.n	8014006 <_svfiprintf_r+0x176>
 8014058:	89ab      	ldrh	r3, [r5, #12]
 801405a:	065b      	lsls	r3, r3, #25
 801405c:	f53f af2c 	bmi.w	8013eb8 <_svfiprintf_r+0x28>
 8014060:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014062:	b01d      	add	sp, #116	; 0x74
 8014064:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014068:	ab03      	add	r3, sp, #12
 801406a:	9300      	str	r3, [sp, #0]
 801406c:	462a      	mov	r2, r5
 801406e:	4b06      	ldr	r3, [pc, #24]	; (8014088 <_svfiprintf_r+0x1f8>)
 8014070:	a904      	add	r1, sp, #16
 8014072:	4638      	mov	r0, r7
 8014074:	f7fc fbac 	bl	80107d0 <_printf_i>
 8014078:	e7eb      	b.n	8014052 <_svfiprintf_r+0x1c2>
 801407a:	bf00      	nop
 801407c:	08016d44 	.word	0x08016d44
 8014080:	08016d4e 	.word	0x08016d4e
 8014084:	08010289 	.word	0x08010289
 8014088:	08013dd9 	.word	0x08013dd9
 801408c:	08016d4a 	.word	0x08016d4a

08014090 <_sungetc_r>:
 8014090:	b538      	push	{r3, r4, r5, lr}
 8014092:	1c4b      	adds	r3, r1, #1
 8014094:	4614      	mov	r4, r2
 8014096:	d103      	bne.n	80140a0 <_sungetc_r+0x10>
 8014098:	f04f 35ff 	mov.w	r5, #4294967295
 801409c:	4628      	mov	r0, r5
 801409e:	bd38      	pop	{r3, r4, r5, pc}
 80140a0:	8993      	ldrh	r3, [r2, #12]
 80140a2:	f023 0320 	bic.w	r3, r3, #32
 80140a6:	8193      	strh	r3, [r2, #12]
 80140a8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80140aa:	6852      	ldr	r2, [r2, #4]
 80140ac:	b2cd      	uxtb	r5, r1
 80140ae:	b18b      	cbz	r3, 80140d4 <_sungetc_r+0x44>
 80140b0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80140b2:	4293      	cmp	r3, r2
 80140b4:	dd08      	ble.n	80140c8 <_sungetc_r+0x38>
 80140b6:	6823      	ldr	r3, [r4, #0]
 80140b8:	1e5a      	subs	r2, r3, #1
 80140ba:	6022      	str	r2, [r4, #0]
 80140bc:	f803 5c01 	strb.w	r5, [r3, #-1]
 80140c0:	6863      	ldr	r3, [r4, #4]
 80140c2:	3301      	adds	r3, #1
 80140c4:	6063      	str	r3, [r4, #4]
 80140c6:	e7e9      	b.n	801409c <_sungetc_r+0xc>
 80140c8:	4621      	mov	r1, r4
 80140ca:	f000 fd49 	bl	8014b60 <__submore>
 80140ce:	2800      	cmp	r0, #0
 80140d0:	d0f1      	beq.n	80140b6 <_sungetc_r+0x26>
 80140d2:	e7e1      	b.n	8014098 <_sungetc_r+0x8>
 80140d4:	6921      	ldr	r1, [r4, #16]
 80140d6:	6823      	ldr	r3, [r4, #0]
 80140d8:	b151      	cbz	r1, 80140f0 <_sungetc_r+0x60>
 80140da:	4299      	cmp	r1, r3
 80140dc:	d208      	bcs.n	80140f0 <_sungetc_r+0x60>
 80140de:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80140e2:	42a9      	cmp	r1, r5
 80140e4:	d104      	bne.n	80140f0 <_sungetc_r+0x60>
 80140e6:	3b01      	subs	r3, #1
 80140e8:	3201      	adds	r2, #1
 80140ea:	6023      	str	r3, [r4, #0]
 80140ec:	6062      	str	r2, [r4, #4]
 80140ee:	e7d5      	b.n	801409c <_sungetc_r+0xc>
 80140f0:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80140f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80140f8:	6363      	str	r3, [r4, #52]	; 0x34
 80140fa:	2303      	movs	r3, #3
 80140fc:	63a3      	str	r3, [r4, #56]	; 0x38
 80140fe:	4623      	mov	r3, r4
 8014100:	f803 5f46 	strb.w	r5, [r3, #70]!
 8014104:	6023      	str	r3, [r4, #0]
 8014106:	2301      	movs	r3, #1
 8014108:	e7dc      	b.n	80140c4 <_sungetc_r+0x34>

0801410a <__ssrefill_r>:
 801410a:	b510      	push	{r4, lr}
 801410c:	460c      	mov	r4, r1
 801410e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8014110:	b169      	cbz	r1, 801412e <__ssrefill_r+0x24>
 8014112:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014116:	4299      	cmp	r1, r3
 8014118:	d001      	beq.n	801411e <__ssrefill_r+0x14>
 801411a:	f7ff fd7d 	bl	8013c18 <_free_r>
 801411e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8014120:	6063      	str	r3, [r4, #4]
 8014122:	2000      	movs	r0, #0
 8014124:	6360      	str	r0, [r4, #52]	; 0x34
 8014126:	b113      	cbz	r3, 801412e <__ssrefill_r+0x24>
 8014128:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801412a:	6023      	str	r3, [r4, #0]
 801412c:	bd10      	pop	{r4, pc}
 801412e:	6923      	ldr	r3, [r4, #16]
 8014130:	6023      	str	r3, [r4, #0]
 8014132:	2300      	movs	r3, #0
 8014134:	6063      	str	r3, [r4, #4]
 8014136:	89a3      	ldrh	r3, [r4, #12]
 8014138:	f043 0320 	orr.w	r3, r3, #32
 801413c:	81a3      	strh	r3, [r4, #12]
 801413e:	f04f 30ff 	mov.w	r0, #4294967295
 8014142:	e7f3      	b.n	801412c <__ssrefill_r+0x22>

08014144 <__ssvfiscanf_r>:
 8014144:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014148:	460c      	mov	r4, r1
 801414a:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 801414e:	2100      	movs	r1, #0
 8014150:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8014154:	49a6      	ldr	r1, [pc, #664]	; (80143f0 <__ssvfiscanf_r+0x2ac>)
 8014156:	91a0      	str	r1, [sp, #640]	; 0x280
 8014158:	f10d 0804 	add.w	r8, sp, #4
 801415c:	49a5      	ldr	r1, [pc, #660]	; (80143f4 <__ssvfiscanf_r+0x2b0>)
 801415e:	4fa6      	ldr	r7, [pc, #664]	; (80143f8 <__ssvfiscanf_r+0x2b4>)
 8014160:	f8df 9298 	ldr.w	r9, [pc, #664]	; 80143fc <__ssvfiscanf_r+0x2b8>
 8014164:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8014168:	4606      	mov	r6, r0
 801416a:	91a1      	str	r1, [sp, #644]	; 0x284
 801416c:	9300      	str	r3, [sp, #0]
 801416e:	7813      	ldrb	r3, [r2, #0]
 8014170:	2b00      	cmp	r3, #0
 8014172:	f000 815a 	beq.w	801442a <__ssvfiscanf_r+0x2e6>
 8014176:	5dd9      	ldrb	r1, [r3, r7]
 8014178:	f011 0108 	ands.w	r1, r1, #8
 801417c:	f102 0501 	add.w	r5, r2, #1
 8014180:	d019      	beq.n	80141b6 <__ssvfiscanf_r+0x72>
 8014182:	6863      	ldr	r3, [r4, #4]
 8014184:	2b00      	cmp	r3, #0
 8014186:	dd0f      	ble.n	80141a8 <__ssvfiscanf_r+0x64>
 8014188:	6823      	ldr	r3, [r4, #0]
 801418a:	781a      	ldrb	r2, [r3, #0]
 801418c:	5cba      	ldrb	r2, [r7, r2]
 801418e:	0712      	lsls	r2, r2, #28
 8014190:	d401      	bmi.n	8014196 <__ssvfiscanf_r+0x52>
 8014192:	462a      	mov	r2, r5
 8014194:	e7eb      	b.n	801416e <__ssvfiscanf_r+0x2a>
 8014196:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8014198:	3201      	adds	r2, #1
 801419a:	9245      	str	r2, [sp, #276]	; 0x114
 801419c:	6862      	ldr	r2, [r4, #4]
 801419e:	3301      	adds	r3, #1
 80141a0:	3a01      	subs	r2, #1
 80141a2:	6062      	str	r2, [r4, #4]
 80141a4:	6023      	str	r3, [r4, #0]
 80141a6:	e7ec      	b.n	8014182 <__ssvfiscanf_r+0x3e>
 80141a8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80141aa:	4621      	mov	r1, r4
 80141ac:	4630      	mov	r0, r6
 80141ae:	4798      	blx	r3
 80141b0:	2800      	cmp	r0, #0
 80141b2:	d0e9      	beq.n	8014188 <__ssvfiscanf_r+0x44>
 80141b4:	e7ed      	b.n	8014192 <__ssvfiscanf_r+0x4e>
 80141b6:	2b25      	cmp	r3, #37	; 0x25
 80141b8:	d012      	beq.n	80141e0 <__ssvfiscanf_r+0x9c>
 80141ba:	469a      	mov	sl, r3
 80141bc:	6863      	ldr	r3, [r4, #4]
 80141be:	2b00      	cmp	r3, #0
 80141c0:	f340 8091 	ble.w	80142e6 <__ssvfiscanf_r+0x1a2>
 80141c4:	6822      	ldr	r2, [r4, #0]
 80141c6:	7813      	ldrb	r3, [r2, #0]
 80141c8:	4553      	cmp	r3, sl
 80141ca:	f040 812e 	bne.w	801442a <__ssvfiscanf_r+0x2e6>
 80141ce:	6863      	ldr	r3, [r4, #4]
 80141d0:	3b01      	subs	r3, #1
 80141d2:	6063      	str	r3, [r4, #4]
 80141d4:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80141d6:	3201      	adds	r2, #1
 80141d8:	3301      	adds	r3, #1
 80141da:	6022      	str	r2, [r4, #0]
 80141dc:	9345      	str	r3, [sp, #276]	; 0x114
 80141de:	e7d8      	b.n	8014192 <__ssvfiscanf_r+0x4e>
 80141e0:	9141      	str	r1, [sp, #260]	; 0x104
 80141e2:	9143      	str	r1, [sp, #268]	; 0x10c
 80141e4:	7853      	ldrb	r3, [r2, #1]
 80141e6:	2b2a      	cmp	r3, #42	; 0x2a
 80141e8:	bf02      	ittt	eq
 80141ea:	2310      	moveq	r3, #16
 80141ec:	1c95      	addeq	r5, r2, #2
 80141ee:	9341      	streq	r3, [sp, #260]	; 0x104
 80141f0:	220a      	movs	r2, #10
 80141f2:	46aa      	mov	sl, r5
 80141f4:	f81a 1b01 	ldrb.w	r1, [sl], #1
 80141f8:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80141fc:	2b09      	cmp	r3, #9
 80141fe:	d91d      	bls.n	801423c <__ssvfiscanf_r+0xf8>
 8014200:	487e      	ldr	r0, [pc, #504]	; (80143fc <__ssvfiscanf_r+0x2b8>)
 8014202:	2203      	movs	r2, #3
 8014204:	f7ec f81c 	bl	8000240 <memchr>
 8014208:	b140      	cbz	r0, 801421c <__ssvfiscanf_r+0xd8>
 801420a:	2301      	movs	r3, #1
 801420c:	eba0 0009 	sub.w	r0, r0, r9
 8014210:	fa03 f000 	lsl.w	r0, r3, r0
 8014214:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8014216:	4318      	orrs	r0, r3
 8014218:	9041      	str	r0, [sp, #260]	; 0x104
 801421a:	4655      	mov	r5, sl
 801421c:	f815 3b01 	ldrb.w	r3, [r5], #1
 8014220:	2b78      	cmp	r3, #120	; 0x78
 8014222:	d806      	bhi.n	8014232 <__ssvfiscanf_r+0xee>
 8014224:	2b57      	cmp	r3, #87	; 0x57
 8014226:	d810      	bhi.n	801424a <__ssvfiscanf_r+0x106>
 8014228:	2b25      	cmp	r3, #37	; 0x25
 801422a:	d0c6      	beq.n	80141ba <__ssvfiscanf_r+0x76>
 801422c:	d856      	bhi.n	80142dc <__ssvfiscanf_r+0x198>
 801422e:	2b00      	cmp	r3, #0
 8014230:	d064      	beq.n	80142fc <__ssvfiscanf_r+0x1b8>
 8014232:	2303      	movs	r3, #3
 8014234:	9347      	str	r3, [sp, #284]	; 0x11c
 8014236:	230a      	movs	r3, #10
 8014238:	9342      	str	r3, [sp, #264]	; 0x108
 801423a:	e071      	b.n	8014320 <__ssvfiscanf_r+0x1dc>
 801423c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 801423e:	fb02 1103 	mla	r1, r2, r3, r1
 8014242:	3930      	subs	r1, #48	; 0x30
 8014244:	9143      	str	r1, [sp, #268]	; 0x10c
 8014246:	4655      	mov	r5, sl
 8014248:	e7d3      	b.n	80141f2 <__ssvfiscanf_r+0xae>
 801424a:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 801424e:	2a20      	cmp	r2, #32
 8014250:	d8ef      	bhi.n	8014232 <__ssvfiscanf_r+0xee>
 8014252:	a101      	add	r1, pc, #4	; (adr r1, 8014258 <__ssvfiscanf_r+0x114>)
 8014254:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8014258:	0801430b 	.word	0x0801430b
 801425c:	08014233 	.word	0x08014233
 8014260:	08014233 	.word	0x08014233
 8014264:	08014369 	.word	0x08014369
 8014268:	08014233 	.word	0x08014233
 801426c:	08014233 	.word	0x08014233
 8014270:	08014233 	.word	0x08014233
 8014274:	08014233 	.word	0x08014233
 8014278:	08014233 	.word	0x08014233
 801427c:	08014233 	.word	0x08014233
 8014280:	08014233 	.word	0x08014233
 8014284:	0801437f 	.word	0x0801437f
 8014288:	08014355 	.word	0x08014355
 801428c:	080142e3 	.word	0x080142e3
 8014290:	080142e3 	.word	0x080142e3
 8014294:	080142e3 	.word	0x080142e3
 8014298:	08014233 	.word	0x08014233
 801429c:	08014359 	.word	0x08014359
 80142a0:	08014233 	.word	0x08014233
 80142a4:	08014233 	.word	0x08014233
 80142a8:	08014233 	.word	0x08014233
 80142ac:	08014233 	.word	0x08014233
 80142b0:	0801438f 	.word	0x0801438f
 80142b4:	08014361 	.word	0x08014361
 80142b8:	08014303 	.word	0x08014303
 80142bc:	08014233 	.word	0x08014233
 80142c0:	08014233 	.word	0x08014233
 80142c4:	0801438b 	.word	0x0801438b
 80142c8:	08014233 	.word	0x08014233
 80142cc:	08014355 	.word	0x08014355
 80142d0:	08014233 	.word	0x08014233
 80142d4:	08014233 	.word	0x08014233
 80142d8:	0801430b 	.word	0x0801430b
 80142dc:	3b45      	subs	r3, #69	; 0x45
 80142de:	2b02      	cmp	r3, #2
 80142e0:	d8a7      	bhi.n	8014232 <__ssvfiscanf_r+0xee>
 80142e2:	2305      	movs	r3, #5
 80142e4:	e01b      	b.n	801431e <__ssvfiscanf_r+0x1da>
 80142e6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80142e8:	4621      	mov	r1, r4
 80142ea:	4630      	mov	r0, r6
 80142ec:	4798      	blx	r3
 80142ee:	2800      	cmp	r0, #0
 80142f0:	f43f af68 	beq.w	80141c4 <__ssvfiscanf_r+0x80>
 80142f4:	9844      	ldr	r0, [sp, #272]	; 0x110
 80142f6:	2800      	cmp	r0, #0
 80142f8:	f040 808d 	bne.w	8014416 <__ssvfiscanf_r+0x2d2>
 80142fc:	f04f 30ff 	mov.w	r0, #4294967295
 8014300:	e08f      	b.n	8014422 <__ssvfiscanf_r+0x2de>
 8014302:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8014304:	f042 0220 	orr.w	r2, r2, #32
 8014308:	9241      	str	r2, [sp, #260]	; 0x104
 801430a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801430c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8014310:	9241      	str	r2, [sp, #260]	; 0x104
 8014312:	2210      	movs	r2, #16
 8014314:	2b6f      	cmp	r3, #111	; 0x6f
 8014316:	9242      	str	r2, [sp, #264]	; 0x108
 8014318:	bf34      	ite	cc
 801431a:	2303      	movcc	r3, #3
 801431c:	2304      	movcs	r3, #4
 801431e:	9347      	str	r3, [sp, #284]	; 0x11c
 8014320:	6863      	ldr	r3, [r4, #4]
 8014322:	2b00      	cmp	r3, #0
 8014324:	dd42      	ble.n	80143ac <__ssvfiscanf_r+0x268>
 8014326:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8014328:	0659      	lsls	r1, r3, #25
 801432a:	d404      	bmi.n	8014336 <__ssvfiscanf_r+0x1f2>
 801432c:	6823      	ldr	r3, [r4, #0]
 801432e:	781a      	ldrb	r2, [r3, #0]
 8014330:	5cba      	ldrb	r2, [r7, r2]
 8014332:	0712      	lsls	r2, r2, #28
 8014334:	d441      	bmi.n	80143ba <__ssvfiscanf_r+0x276>
 8014336:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8014338:	2b02      	cmp	r3, #2
 801433a:	dc50      	bgt.n	80143de <__ssvfiscanf_r+0x29a>
 801433c:	466b      	mov	r3, sp
 801433e:	4622      	mov	r2, r4
 8014340:	a941      	add	r1, sp, #260	; 0x104
 8014342:	4630      	mov	r0, r6
 8014344:	f000 f9d0 	bl	80146e8 <_scanf_chars>
 8014348:	2801      	cmp	r0, #1
 801434a:	d06e      	beq.n	801442a <__ssvfiscanf_r+0x2e6>
 801434c:	2802      	cmp	r0, #2
 801434e:	f47f af20 	bne.w	8014192 <__ssvfiscanf_r+0x4e>
 8014352:	e7cf      	b.n	80142f4 <__ssvfiscanf_r+0x1b0>
 8014354:	220a      	movs	r2, #10
 8014356:	e7dd      	b.n	8014314 <__ssvfiscanf_r+0x1d0>
 8014358:	2300      	movs	r3, #0
 801435a:	9342      	str	r3, [sp, #264]	; 0x108
 801435c:	2303      	movs	r3, #3
 801435e:	e7de      	b.n	801431e <__ssvfiscanf_r+0x1da>
 8014360:	2308      	movs	r3, #8
 8014362:	9342      	str	r3, [sp, #264]	; 0x108
 8014364:	2304      	movs	r3, #4
 8014366:	e7da      	b.n	801431e <__ssvfiscanf_r+0x1da>
 8014368:	4629      	mov	r1, r5
 801436a:	4640      	mov	r0, r8
 801436c:	f000 fb38 	bl	80149e0 <__sccl>
 8014370:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8014372:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014376:	9341      	str	r3, [sp, #260]	; 0x104
 8014378:	4605      	mov	r5, r0
 801437a:	2301      	movs	r3, #1
 801437c:	e7cf      	b.n	801431e <__ssvfiscanf_r+0x1da>
 801437e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8014380:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014384:	9341      	str	r3, [sp, #260]	; 0x104
 8014386:	2300      	movs	r3, #0
 8014388:	e7c9      	b.n	801431e <__ssvfiscanf_r+0x1da>
 801438a:	2302      	movs	r3, #2
 801438c:	e7c7      	b.n	801431e <__ssvfiscanf_r+0x1da>
 801438e:	9841      	ldr	r0, [sp, #260]	; 0x104
 8014390:	06c3      	lsls	r3, r0, #27
 8014392:	f53f aefe 	bmi.w	8014192 <__ssvfiscanf_r+0x4e>
 8014396:	9b00      	ldr	r3, [sp, #0]
 8014398:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801439a:	1d19      	adds	r1, r3, #4
 801439c:	9100      	str	r1, [sp, #0]
 801439e:	681b      	ldr	r3, [r3, #0]
 80143a0:	f010 0f01 	tst.w	r0, #1
 80143a4:	bf14      	ite	ne
 80143a6:	801a      	strhne	r2, [r3, #0]
 80143a8:	601a      	streq	r2, [r3, #0]
 80143aa:	e6f2      	b.n	8014192 <__ssvfiscanf_r+0x4e>
 80143ac:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80143ae:	4621      	mov	r1, r4
 80143b0:	4630      	mov	r0, r6
 80143b2:	4798      	blx	r3
 80143b4:	2800      	cmp	r0, #0
 80143b6:	d0b6      	beq.n	8014326 <__ssvfiscanf_r+0x1e2>
 80143b8:	e79c      	b.n	80142f4 <__ssvfiscanf_r+0x1b0>
 80143ba:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80143bc:	3201      	adds	r2, #1
 80143be:	9245      	str	r2, [sp, #276]	; 0x114
 80143c0:	6862      	ldr	r2, [r4, #4]
 80143c2:	3a01      	subs	r2, #1
 80143c4:	2a00      	cmp	r2, #0
 80143c6:	6062      	str	r2, [r4, #4]
 80143c8:	dd02      	ble.n	80143d0 <__ssvfiscanf_r+0x28c>
 80143ca:	3301      	adds	r3, #1
 80143cc:	6023      	str	r3, [r4, #0]
 80143ce:	e7ad      	b.n	801432c <__ssvfiscanf_r+0x1e8>
 80143d0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80143d2:	4621      	mov	r1, r4
 80143d4:	4630      	mov	r0, r6
 80143d6:	4798      	blx	r3
 80143d8:	2800      	cmp	r0, #0
 80143da:	d0a7      	beq.n	801432c <__ssvfiscanf_r+0x1e8>
 80143dc:	e78a      	b.n	80142f4 <__ssvfiscanf_r+0x1b0>
 80143de:	2b04      	cmp	r3, #4
 80143e0:	dc0e      	bgt.n	8014400 <__ssvfiscanf_r+0x2bc>
 80143e2:	466b      	mov	r3, sp
 80143e4:	4622      	mov	r2, r4
 80143e6:	a941      	add	r1, sp, #260	; 0x104
 80143e8:	4630      	mov	r0, r6
 80143ea:	f000 f9d7 	bl	801479c <_scanf_i>
 80143ee:	e7ab      	b.n	8014348 <__ssvfiscanf_r+0x204>
 80143f0:	08014091 	.word	0x08014091
 80143f4:	0801410b 	.word	0x0801410b
 80143f8:	080169f9 	.word	0x080169f9
 80143fc:	08016d4a 	.word	0x08016d4a
 8014400:	4b0b      	ldr	r3, [pc, #44]	; (8014430 <__ssvfiscanf_r+0x2ec>)
 8014402:	2b00      	cmp	r3, #0
 8014404:	f43f aec5 	beq.w	8014192 <__ssvfiscanf_r+0x4e>
 8014408:	466b      	mov	r3, sp
 801440a:	4622      	mov	r2, r4
 801440c:	a941      	add	r1, sp, #260	; 0x104
 801440e:	4630      	mov	r0, r6
 8014410:	f7fc fb04 	bl	8010a1c <_scanf_float>
 8014414:	e798      	b.n	8014348 <__ssvfiscanf_r+0x204>
 8014416:	89a3      	ldrh	r3, [r4, #12]
 8014418:	f013 0f40 	tst.w	r3, #64	; 0x40
 801441c:	bf18      	it	ne
 801441e:	f04f 30ff 	movne.w	r0, #4294967295
 8014422:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8014426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801442a:	9844      	ldr	r0, [sp, #272]	; 0x110
 801442c:	e7f9      	b.n	8014422 <__ssvfiscanf_r+0x2de>
 801442e:	bf00      	nop
 8014430:	08010a1d 	.word	0x08010a1d

08014434 <__sfputc_r>:
 8014434:	6893      	ldr	r3, [r2, #8]
 8014436:	3b01      	subs	r3, #1
 8014438:	2b00      	cmp	r3, #0
 801443a:	b410      	push	{r4}
 801443c:	6093      	str	r3, [r2, #8]
 801443e:	da08      	bge.n	8014452 <__sfputc_r+0x1e>
 8014440:	6994      	ldr	r4, [r2, #24]
 8014442:	42a3      	cmp	r3, r4
 8014444:	db01      	blt.n	801444a <__sfputc_r+0x16>
 8014446:	290a      	cmp	r1, #10
 8014448:	d103      	bne.n	8014452 <__sfputc_r+0x1e>
 801444a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801444e:	f000 bbc1 	b.w	8014bd4 <__swbuf_r>
 8014452:	6813      	ldr	r3, [r2, #0]
 8014454:	1c58      	adds	r0, r3, #1
 8014456:	6010      	str	r0, [r2, #0]
 8014458:	7019      	strb	r1, [r3, #0]
 801445a:	4608      	mov	r0, r1
 801445c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014460:	4770      	bx	lr

08014462 <__sfputs_r>:
 8014462:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014464:	4606      	mov	r6, r0
 8014466:	460f      	mov	r7, r1
 8014468:	4614      	mov	r4, r2
 801446a:	18d5      	adds	r5, r2, r3
 801446c:	42ac      	cmp	r4, r5
 801446e:	d101      	bne.n	8014474 <__sfputs_r+0x12>
 8014470:	2000      	movs	r0, #0
 8014472:	e007      	b.n	8014484 <__sfputs_r+0x22>
 8014474:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014478:	463a      	mov	r2, r7
 801447a:	4630      	mov	r0, r6
 801447c:	f7ff ffda 	bl	8014434 <__sfputc_r>
 8014480:	1c43      	adds	r3, r0, #1
 8014482:	d1f3      	bne.n	801446c <__sfputs_r+0xa>
 8014484:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014488 <_vfiprintf_r>:
 8014488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801448c:	460d      	mov	r5, r1
 801448e:	b09d      	sub	sp, #116	; 0x74
 8014490:	4614      	mov	r4, r2
 8014492:	4698      	mov	r8, r3
 8014494:	4606      	mov	r6, r0
 8014496:	b118      	cbz	r0, 80144a0 <_vfiprintf_r+0x18>
 8014498:	6983      	ldr	r3, [r0, #24]
 801449a:	b90b      	cbnz	r3, 80144a0 <_vfiprintf_r+0x18>
 801449c:	f000 fd8a 	bl	8014fb4 <__sinit>
 80144a0:	4b89      	ldr	r3, [pc, #548]	; (80146c8 <_vfiprintf_r+0x240>)
 80144a2:	429d      	cmp	r5, r3
 80144a4:	d11b      	bne.n	80144de <_vfiprintf_r+0x56>
 80144a6:	6875      	ldr	r5, [r6, #4]
 80144a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80144aa:	07d9      	lsls	r1, r3, #31
 80144ac:	d405      	bmi.n	80144ba <_vfiprintf_r+0x32>
 80144ae:	89ab      	ldrh	r3, [r5, #12]
 80144b0:	059a      	lsls	r2, r3, #22
 80144b2:	d402      	bmi.n	80144ba <_vfiprintf_r+0x32>
 80144b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80144b6:	f000 fe1b 	bl	80150f0 <__retarget_lock_acquire_recursive>
 80144ba:	89ab      	ldrh	r3, [r5, #12]
 80144bc:	071b      	lsls	r3, r3, #28
 80144be:	d501      	bpl.n	80144c4 <_vfiprintf_r+0x3c>
 80144c0:	692b      	ldr	r3, [r5, #16]
 80144c2:	b9eb      	cbnz	r3, 8014500 <_vfiprintf_r+0x78>
 80144c4:	4629      	mov	r1, r5
 80144c6:	4630      	mov	r0, r6
 80144c8:	f000 fbe4 	bl	8014c94 <__swsetup_r>
 80144cc:	b1c0      	cbz	r0, 8014500 <_vfiprintf_r+0x78>
 80144ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80144d0:	07dc      	lsls	r4, r3, #31
 80144d2:	d50e      	bpl.n	80144f2 <_vfiprintf_r+0x6a>
 80144d4:	f04f 30ff 	mov.w	r0, #4294967295
 80144d8:	b01d      	add	sp, #116	; 0x74
 80144da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80144de:	4b7b      	ldr	r3, [pc, #492]	; (80146cc <_vfiprintf_r+0x244>)
 80144e0:	429d      	cmp	r5, r3
 80144e2:	d101      	bne.n	80144e8 <_vfiprintf_r+0x60>
 80144e4:	68b5      	ldr	r5, [r6, #8]
 80144e6:	e7df      	b.n	80144a8 <_vfiprintf_r+0x20>
 80144e8:	4b79      	ldr	r3, [pc, #484]	; (80146d0 <_vfiprintf_r+0x248>)
 80144ea:	429d      	cmp	r5, r3
 80144ec:	bf08      	it	eq
 80144ee:	68f5      	ldreq	r5, [r6, #12]
 80144f0:	e7da      	b.n	80144a8 <_vfiprintf_r+0x20>
 80144f2:	89ab      	ldrh	r3, [r5, #12]
 80144f4:	0598      	lsls	r0, r3, #22
 80144f6:	d4ed      	bmi.n	80144d4 <_vfiprintf_r+0x4c>
 80144f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80144fa:	f000 fdfa 	bl	80150f2 <__retarget_lock_release_recursive>
 80144fe:	e7e9      	b.n	80144d4 <_vfiprintf_r+0x4c>
 8014500:	2300      	movs	r3, #0
 8014502:	9309      	str	r3, [sp, #36]	; 0x24
 8014504:	2320      	movs	r3, #32
 8014506:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801450a:	f8cd 800c 	str.w	r8, [sp, #12]
 801450e:	2330      	movs	r3, #48	; 0x30
 8014510:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80146d4 <_vfiprintf_r+0x24c>
 8014514:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014518:	f04f 0901 	mov.w	r9, #1
 801451c:	4623      	mov	r3, r4
 801451e:	469a      	mov	sl, r3
 8014520:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014524:	b10a      	cbz	r2, 801452a <_vfiprintf_r+0xa2>
 8014526:	2a25      	cmp	r2, #37	; 0x25
 8014528:	d1f9      	bne.n	801451e <_vfiprintf_r+0x96>
 801452a:	ebba 0b04 	subs.w	fp, sl, r4
 801452e:	d00b      	beq.n	8014548 <_vfiprintf_r+0xc0>
 8014530:	465b      	mov	r3, fp
 8014532:	4622      	mov	r2, r4
 8014534:	4629      	mov	r1, r5
 8014536:	4630      	mov	r0, r6
 8014538:	f7ff ff93 	bl	8014462 <__sfputs_r>
 801453c:	3001      	adds	r0, #1
 801453e:	f000 80aa 	beq.w	8014696 <_vfiprintf_r+0x20e>
 8014542:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014544:	445a      	add	r2, fp
 8014546:	9209      	str	r2, [sp, #36]	; 0x24
 8014548:	f89a 3000 	ldrb.w	r3, [sl]
 801454c:	2b00      	cmp	r3, #0
 801454e:	f000 80a2 	beq.w	8014696 <_vfiprintf_r+0x20e>
 8014552:	2300      	movs	r3, #0
 8014554:	f04f 32ff 	mov.w	r2, #4294967295
 8014558:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801455c:	f10a 0a01 	add.w	sl, sl, #1
 8014560:	9304      	str	r3, [sp, #16]
 8014562:	9307      	str	r3, [sp, #28]
 8014564:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014568:	931a      	str	r3, [sp, #104]	; 0x68
 801456a:	4654      	mov	r4, sl
 801456c:	2205      	movs	r2, #5
 801456e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014572:	4858      	ldr	r0, [pc, #352]	; (80146d4 <_vfiprintf_r+0x24c>)
 8014574:	f7eb fe64 	bl	8000240 <memchr>
 8014578:	9a04      	ldr	r2, [sp, #16]
 801457a:	b9d8      	cbnz	r0, 80145b4 <_vfiprintf_r+0x12c>
 801457c:	06d1      	lsls	r1, r2, #27
 801457e:	bf44      	itt	mi
 8014580:	2320      	movmi	r3, #32
 8014582:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014586:	0713      	lsls	r3, r2, #28
 8014588:	bf44      	itt	mi
 801458a:	232b      	movmi	r3, #43	; 0x2b
 801458c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014590:	f89a 3000 	ldrb.w	r3, [sl]
 8014594:	2b2a      	cmp	r3, #42	; 0x2a
 8014596:	d015      	beq.n	80145c4 <_vfiprintf_r+0x13c>
 8014598:	9a07      	ldr	r2, [sp, #28]
 801459a:	4654      	mov	r4, sl
 801459c:	2000      	movs	r0, #0
 801459e:	f04f 0c0a 	mov.w	ip, #10
 80145a2:	4621      	mov	r1, r4
 80145a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80145a8:	3b30      	subs	r3, #48	; 0x30
 80145aa:	2b09      	cmp	r3, #9
 80145ac:	d94e      	bls.n	801464c <_vfiprintf_r+0x1c4>
 80145ae:	b1b0      	cbz	r0, 80145de <_vfiprintf_r+0x156>
 80145b0:	9207      	str	r2, [sp, #28]
 80145b2:	e014      	b.n	80145de <_vfiprintf_r+0x156>
 80145b4:	eba0 0308 	sub.w	r3, r0, r8
 80145b8:	fa09 f303 	lsl.w	r3, r9, r3
 80145bc:	4313      	orrs	r3, r2
 80145be:	9304      	str	r3, [sp, #16]
 80145c0:	46a2      	mov	sl, r4
 80145c2:	e7d2      	b.n	801456a <_vfiprintf_r+0xe2>
 80145c4:	9b03      	ldr	r3, [sp, #12]
 80145c6:	1d19      	adds	r1, r3, #4
 80145c8:	681b      	ldr	r3, [r3, #0]
 80145ca:	9103      	str	r1, [sp, #12]
 80145cc:	2b00      	cmp	r3, #0
 80145ce:	bfbb      	ittet	lt
 80145d0:	425b      	neglt	r3, r3
 80145d2:	f042 0202 	orrlt.w	r2, r2, #2
 80145d6:	9307      	strge	r3, [sp, #28]
 80145d8:	9307      	strlt	r3, [sp, #28]
 80145da:	bfb8      	it	lt
 80145dc:	9204      	strlt	r2, [sp, #16]
 80145de:	7823      	ldrb	r3, [r4, #0]
 80145e0:	2b2e      	cmp	r3, #46	; 0x2e
 80145e2:	d10c      	bne.n	80145fe <_vfiprintf_r+0x176>
 80145e4:	7863      	ldrb	r3, [r4, #1]
 80145e6:	2b2a      	cmp	r3, #42	; 0x2a
 80145e8:	d135      	bne.n	8014656 <_vfiprintf_r+0x1ce>
 80145ea:	9b03      	ldr	r3, [sp, #12]
 80145ec:	1d1a      	adds	r2, r3, #4
 80145ee:	681b      	ldr	r3, [r3, #0]
 80145f0:	9203      	str	r2, [sp, #12]
 80145f2:	2b00      	cmp	r3, #0
 80145f4:	bfb8      	it	lt
 80145f6:	f04f 33ff 	movlt.w	r3, #4294967295
 80145fa:	3402      	adds	r4, #2
 80145fc:	9305      	str	r3, [sp, #20]
 80145fe:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80146e4 <_vfiprintf_r+0x25c>
 8014602:	7821      	ldrb	r1, [r4, #0]
 8014604:	2203      	movs	r2, #3
 8014606:	4650      	mov	r0, sl
 8014608:	f7eb fe1a 	bl	8000240 <memchr>
 801460c:	b140      	cbz	r0, 8014620 <_vfiprintf_r+0x198>
 801460e:	2340      	movs	r3, #64	; 0x40
 8014610:	eba0 000a 	sub.w	r0, r0, sl
 8014614:	fa03 f000 	lsl.w	r0, r3, r0
 8014618:	9b04      	ldr	r3, [sp, #16]
 801461a:	4303      	orrs	r3, r0
 801461c:	3401      	adds	r4, #1
 801461e:	9304      	str	r3, [sp, #16]
 8014620:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014624:	482c      	ldr	r0, [pc, #176]	; (80146d8 <_vfiprintf_r+0x250>)
 8014626:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801462a:	2206      	movs	r2, #6
 801462c:	f7eb fe08 	bl	8000240 <memchr>
 8014630:	2800      	cmp	r0, #0
 8014632:	d03f      	beq.n	80146b4 <_vfiprintf_r+0x22c>
 8014634:	4b29      	ldr	r3, [pc, #164]	; (80146dc <_vfiprintf_r+0x254>)
 8014636:	bb1b      	cbnz	r3, 8014680 <_vfiprintf_r+0x1f8>
 8014638:	9b03      	ldr	r3, [sp, #12]
 801463a:	3307      	adds	r3, #7
 801463c:	f023 0307 	bic.w	r3, r3, #7
 8014640:	3308      	adds	r3, #8
 8014642:	9303      	str	r3, [sp, #12]
 8014644:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014646:	443b      	add	r3, r7
 8014648:	9309      	str	r3, [sp, #36]	; 0x24
 801464a:	e767      	b.n	801451c <_vfiprintf_r+0x94>
 801464c:	fb0c 3202 	mla	r2, ip, r2, r3
 8014650:	460c      	mov	r4, r1
 8014652:	2001      	movs	r0, #1
 8014654:	e7a5      	b.n	80145a2 <_vfiprintf_r+0x11a>
 8014656:	2300      	movs	r3, #0
 8014658:	3401      	adds	r4, #1
 801465a:	9305      	str	r3, [sp, #20]
 801465c:	4619      	mov	r1, r3
 801465e:	f04f 0c0a 	mov.w	ip, #10
 8014662:	4620      	mov	r0, r4
 8014664:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014668:	3a30      	subs	r2, #48	; 0x30
 801466a:	2a09      	cmp	r2, #9
 801466c:	d903      	bls.n	8014676 <_vfiprintf_r+0x1ee>
 801466e:	2b00      	cmp	r3, #0
 8014670:	d0c5      	beq.n	80145fe <_vfiprintf_r+0x176>
 8014672:	9105      	str	r1, [sp, #20]
 8014674:	e7c3      	b.n	80145fe <_vfiprintf_r+0x176>
 8014676:	fb0c 2101 	mla	r1, ip, r1, r2
 801467a:	4604      	mov	r4, r0
 801467c:	2301      	movs	r3, #1
 801467e:	e7f0      	b.n	8014662 <_vfiprintf_r+0x1da>
 8014680:	ab03      	add	r3, sp, #12
 8014682:	9300      	str	r3, [sp, #0]
 8014684:	462a      	mov	r2, r5
 8014686:	4b16      	ldr	r3, [pc, #88]	; (80146e0 <_vfiprintf_r+0x258>)
 8014688:	a904      	add	r1, sp, #16
 801468a:	4630      	mov	r0, r6
 801468c:	f7fb fdfc 	bl	8010288 <_printf_float>
 8014690:	4607      	mov	r7, r0
 8014692:	1c78      	adds	r0, r7, #1
 8014694:	d1d6      	bne.n	8014644 <_vfiprintf_r+0x1bc>
 8014696:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014698:	07d9      	lsls	r1, r3, #31
 801469a:	d405      	bmi.n	80146a8 <_vfiprintf_r+0x220>
 801469c:	89ab      	ldrh	r3, [r5, #12]
 801469e:	059a      	lsls	r2, r3, #22
 80146a0:	d402      	bmi.n	80146a8 <_vfiprintf_r+0x220>
 80146a2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80146a4:	f000 fd25 	bl	80150f2 <__retarget_lock_release_recursive>
 80146a8:	89ab      	ldrh	r3, [r5, #12]
 80146aa:	065b      	lsls	r3, r3, #25
 80146ac:	f53f af12 	bmi.w	80144d4 <_vfiprintf_r+0x4c>
 80146b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80146b2:	e711      	b.n	80144d8 <_vfiprintf_r+0x50>
 80146b4:	ab03      	add	r3, sp, #12
 80146b6:	9300      	str	r3, [sp, #0]
 80146b8:	462a      	mov	r2, r5
 80146ba:	4b09      	ldr	r3, [pc, #36]	; (80146e0 <_vfiprintf_r+0x258>)
 80146bc:	a904      	add	r1, sp, #16
 80146be:	4630      	mov	r0, r6
 80146c0:	f7fc f886 	bl	80107d0 <_printf_i>
 80146c4:	e7e4      	b.n	8014690 <_vfiprintf_r+0x208>
 80146c6:	bf00      	nop
 80146c8:	08016d90 	.word	0x08016d90
 80146cc:	08016db0 	.word	0x08016db0
 80146d0:	08016d70 	.word	0x08016d70
 80146d4:	08016d44 	.word	0x08016d44
 80146d8:	08016d4e 	.word	0x08016d4e
 80146dc:	08010289 	.word	0x08010289
 80146e0:	08014463 	.word	0x08014463
 80146e4:	08016d4a 	.word	0x08016d4a

080146e8 <_scanf_chars>:
 80146e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80146ec:	4615      	mov	r5, r2
 80146ee:	688a      	ldr	r2, [r1, #8]
 80146f0:	4680      	mov	r8, r0
 80146f2:	460c      	mov	r4, r1
 80146f4:	b932      	cbnz	r2, 8014704 <_scanf_chars+0x1c>
 80146f6:	698a      	ldr	r2, [r1, #24]
 80146f8:	2a00      	cmp	r2, #0
 80146fa:	bf0c      	ite	eq
 80146fc:	2201      	moveq	r2, #1
 80146fe:	f04f 32ff 	movne.w	r2, #4294967295
 8014702:	608a      	str	r2, [r1, #8]
 8014704:	6822      	ldr	r2, [r4, #0]
 8014706:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8014798 <_scanf_chars+0xb0>
 801470a:	06d1      	lsls	r1, r2, #27
 801470c:	bf5f      	itttt	pl
 801470e:	681a      	ldrpl	r2, [r3, #0]
 8014710:	1d11      	addpl	r1, r2, #4
 8014712:	6019      	strpl	r1, [r3, #0]
 8014714:	6816      	ldrpl	r6, [r2, #0]
 8014716:	2700      	movs	r7, #0
 8014718:	69a0      	ldr	r0, [r4, #24]
 801471a:	b188      	cbz	r0, 8014740 <_scanf_chars+0x58>
 801471c:	2801      	cmp	r0, #1
 801471e:	d107      	bne.n	8014730 <_scanf_chars+0x48>
 8014720:	682a      	ldr	r2, [r5, #0]
 8014722:	7811      	ldrb	r1, [r2, #0]
 8014724:	6962      	ldr	r2, [r4, #20]
 8014726:	5c52      	ldrb	r2, [r2, r1]
 8014728:	b952      	cbnz	r2, 8014740 <_scanf_chars+0x58>
 801472a:	2f00      	cmp	r7, #0
 801472c:	d031      	beq.n	8014792 <_scanf_chars+0xaa>
 801472e:	e022      	b.n	8014776 <_scanf_chars+0x8e>
 8014730:	2802      	cmp	r0, #2
 8014732:	d120      	bne.n	8014776 <_scanf_chars+0x8e>
 8014734:	682b      	ldr	r3, [r5, #0]
 8014736:	781b      	ldrb	r3, [r3, #0]
 8014738:	f813 3009 	ldrb.w	r3, [r3, r9]
 801473c:	071b      	lsls	r3, r3, #28
 801473e:	d41a      	bmi.n	8014776 <_scanf_chars+0x8e>
 8014740:	6823      	ldr	r3, [r4, #0]
 8014742:	06da      	lsls	r2, r3, #27
 8014744:	bf5e      	ittt	pl
 8014746:	682b      	ldrpl	r3, [r5, #0]
 8014748:	781b      	ldrbpl	r3, [r3, #0]
 801474a:	f806 3b01 	strbpl.w	r3, [r6], #1
 801474e:	682a      	ldr	r2, [r5, #0]
 8014750:	686b      	ldr	r3, [r5, #4]
 8014752:	3201      	adds	r2, #1
 8014754:	602a      	str	r2, [r5, #0]
 8014756:	68a2      	ldr	r2, [r4, #8]
 8014758:	3b01      	subs	r3, #1
 801475a:	3a01      	subs	r2, #1
 801475c:	606b      	str	r3, [r5, #4]
 801475e:	3701      	adds	r7, #1
 8014760:	60a2      	str	r2, [r4, #8]
 8014762:	b142      	cbz	r2, 8014776 <_scanf_chars+0x8e>
 8014764:	2b00      	cmp	r3, #0
 8014766:	dcd7      	bgt.n	8014718 <_scanf_chars+0x30>
 8014768:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801476c:	4629      	mov	r1, r5
 801476e:	4640      	mov	r0, r8
 8014770:	4798      	blx	r3
 8014772:	2800      	cmp	r0, #0
 8014774:	d0d0      	beq.n	8014718 <_scanf_chars+0x30>
 8014776:	6823      	ldr	r3, [r4, #0]
 8014778:	f013 0310 	ands.w	r3, r3, #16
 801477c:	d105      	bne.n	801478a <_scanf_chars+0xa2>
 801477e:	68e2      	ldr	r2, [r4, #12]
 8014780:	3201      	adds	r2, #1
 8014782:	60e2      	str	r2, [r4, #12]
 8014784:	69a2      	ldr	r2, [r4, #24]
 8014786:	b102      	cbz	r2, 801478a <_scanf_chars+0xa2>
 8014788:	7033      	strb	r3, [r6, #0]
 801478a:	6923      	ldr	r3, [r4, #16]
 801478c:	443b      	add	r3, r7
 801478e:	6123      	str	r3, [r4, #16]
 8014790:	2000      	movs	r0, #0
 8014792:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014796:	bf00      	nop
 8014798:	080169f9 	.word	0x080169f9

0801479c <_scanf_i>:
 801479c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80147a0:	4698      	mov	r8, r3
 80147a2:	4b76      	ldr	r3, [pc, #472]	; (801497c <_scanf_i+0x1e0>)
 80147a4:	460c      	mov	r4, r1
 80147a6:	4682      	mov	sl, r0
 80147a8:	4616      	mov	r6, r2
 80147aa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80147ae:	b087      	sub	sp, #28
 80147b0:	ab03      	add	r3, sp, #12
 80147b2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80147b6:	4b72      	ldr	r3, [pc, #456]	; (8014980 <_scanf_i+0x1e4>)
 80147b8:	69a1      	ldr	r1, [r4, #24]
 80147ba:	4a72      	ldr	r2, [pc, #456]	; (8014984 <_scanf_i+0x1e8>)
 80147bc:	2903      	cmp	r1, #3
 80147be:	bf18      	it	ne
 80147c0:	461a      	movne	r2, r3
 80147c2:	68a3      	ldr	r3, [r4, #8]
 80147c4:	9201      	str	r2, [sp, #4]
 80147c6:	1e5a      	subs	r2, r3, #1
 80147c8:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80147cc:	bf88      	it	hi
 80147ce:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80147d2:	4627      	mov	r7, r4
 80147d4:	bf82      	ittt	hi
 80147d6:	eb03 0905 	addhi.w	r9, r3, r5
 80147da:	f240 135d 	movwhi	r3, #349	; 0x15d
 80147de:	60a3      	strhi	r3, [r4, #8]
 80147e0:	f857 3b1c 	ldr.w	r3, [r7], #28
 80147e4:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80147e8:	bf98      	it	ls
 80147ea:	f04f 0900 	movls.w	r9, #0
 80147ee:	6023      	str	r3, [r4, #0]
 80147f0:	463d      	mov	r5, r7
 80147f2:	f04f 0b00 	mov.w	fp, #0
 80147f6:	6831      	ldr	r1, [r6, #0]
 80147f8:	ab03      	add	r3, sp, #12
 80147fa:	7809      	ldrb	r1, [r1, #0]
 80147fc:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8014800:	2202      	movs	r2, #2
 8014802:	f7eb fd1d 	bl	8000240 <memchr>
 8014806:	b328      	cbz	r0, 8014854 <_scanf_i+0xb8>
 8014808:	f1bb 0f01 	cmp.w	fp, #1
 801480c:	d159      	bne.n	80148c2 <_scanf_i+0x126>
 801480e:	6862      	ldr	r2, [r4, #4]
 8014810:	b92a      	cbnz	r2, 801481e <_scanf_i+0x82>
 8014812:	6822      	ldr	r2, [r4, #0]
 8014814:	2308      	movs	r3, #8
 8014816:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801481a:	6063      	str	r3, [r4, #4]
 801481c:	6022      	str	r2, [r4, #0]
 801481e:	6822      	ldr	r2, [r4, #0]
 8014820:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8014824:	6022      	str	r2, [r4, #0]
 8014826:	68a2      	ldr	r2, [r4, #8]
 8014828:	1e51      	subs	r1, r2, #1
 801482a:	60a1      	str	r1, [r4, #8]
 801482c:	b192      	cbz	r2, 8014854 <_scanf_i+0xb8>
 801482e:	6832      	ldr	r2, [r6, #0]
 8014830:	1c51      	adds	r1, r2, #1
 8014832:	6031      	str	r1, [r6, #0]
 8014834:	7812      	ldrb	r2, [r2, #0]
 8014836:	f805 2b01 	strb.w	r2, [r5], #1
 801483a:	6872      	ldr	r2, [r6, #4]
 801483c:	3a01      	subs	r2, #1
 801483e:	2a00      	cmp	r2, #0
 8014840:	6072      	str	r2, [r6, #4]
 8014842:	dc07      	bgt.n	8014854 <_scanf_i+0xb8>
 8014844:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8014848:	4631      	mov	r1, r6
 801484a:	4650      	mov	r0, sl
 801484c:	4790      	blx	r2
 801484e:	2800      	cmp	r0, #0
 8014850:	f040 8085 	bne.w	801495e <_scanf_i+0x1c2>
 8014854:	f10b 0b01 	add.w	fp, fp, #1
 8014858:	f1bb 0f03 	cmp.w	fp, #3
 801485c:	d1cb      	bne.n	80147f6 <_scanf_i+0x5a>
 801485e:	6863      	ldr	r3, [r4, #4]
 8014860:	b90b      	cbnz	r3, 8014866 <_scanf_i+0xca>
 8014862:	230a      	movs	r3, #10
 8014864:	6063      	str	r3, [r4, #4]
 8014866:	6863      	ldr	r3, [r4, #4]
 8014868:	4947      	ldr	r1, [pc, #284]	; (8014988 <_scanf_i+0x1ec>)
 801486a:	6960      	ldr	r0, [r4, #20]
 801486c:	1ac9      	subs	r1, r1, r3
 801486e:	f000 f8b7 	bl	80149e0 <__sccl>
 8014872:	f04f 0b00 	mov.w	fp, #0
 8014876:	68a3      	ldr	r3, [r4, #8]
 8014878:	6822      	ldr	r2, [r4, #0]
 801487a:	2b00      	cmp	r3, #0
 801487c:	d03d      	beq.n	80148fa <_scanf_i+0x15e>
 801487e:	6831      	ldr	r1, [r6, #0]
 8014880:	6960      	ldr	r0, [r4, #20]
 8014882:	f891 c000 	ldrb.w	ip, [r1]
 8014886:	f810 000c 	ldrb.w	r0, [r0, ip]
 801488a:	2800      	cmp	r0, #0
 801488c:	d035      	beq.n	80148fa <_scanf_i+0x15e>
 801488e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8014892:	d124      	bne.n	80148de <_scanf_i+0x142>
 8014894:	0510      	lsls	r0, r2, #20
 8014896:	d522      	bpl.n	80148de <_scanf_i+0x142>
 8014898:	f10b 0b01 	add.w	fp, fp, #1
 801489c:	f1b9 0f00 	cmp.w	r9, #0
 80148a0:	d003      	beq.n	80148aa <_scanf_i+0x10e>
 80148a2:	3301      	adds	r3, #1
 80148a4:	f109 39ff 	add.w	r9, r9, #4294967295
 80148a8:	60a3      	str	r3, [r4, #8]
 80148aa:	6873      	ldr	r3, [r6, #4]
 80148ac:	3b01      	subs	r3, #1
 80148ae:	2b00      	cmp	r3, #0
 80148b0:	6073      	str	r3, [r6, #4]
 80148b2:	dd1b      	ble.n	80148ec <_scanf_i+0x150>
 80148b4:	6833      	ldr	r3, [r6, #0]
 80148b6:	3301      	adds	r3, #1
 80148b8:	6033      	str	r3, [r6, #0]
 80148ba:	68a3      	ldr	r3, [r4, #8]
 80148bc:	3b01      	subs	r3, #1
 80148be:	60a3      	str	r3, [r4, #8]
 80148c0:	e7d9      	b.n	8014876 <_scanf_i+0xda>
 80148c2:	f1bb 0f02 	cmp.w	fp, #2
 80148c6:	d1ae      	bne.n	8014826 <_scanf_i+0x8a>
 80148c8:	6822      	ldr	r2, [r4, #0]
 80148ca:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80148ce:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80148d2:	d1bf      	bne.n	8014854 <_scanf_i+0xb8>
 80148d4:	2310      	movs	r3, #16
 80148d6:	6063      	str	r3, [r4, #4]
 80148d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80148dc:	e7a2      	b.n	8014824 <_scanf_i+0x88>
 80148de:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80148e2:	6022      	str	r2, [r4, #0]
 80148e4:	780b      	ldrb	r3, [r1, #0]
 80148e6:	f805 3b01 	strb.w	r3, [r5], #1
 80148ea:	e7de      	b.n	80148aa <_scanf_i+0x10e>
 80148ec:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80148f0:	4631      	mov	r1, r6
 80148f2:	4650      	mov	r0, sl
 80148f4:	4798      	blx	r3
 80148f6:	2800      	cmp	r0, #0
 80148f8:	d0df      	beq.n	80148ba <_scanf_i+0x11e>
 80148fa:	6823      	ldr	r3, [r4, #0]
 80148fc:	05db      	lsls	r3, r3, #23
 80148fe:	d50d      	bpl.n	801491c <_scanf_i+0x180>
 8014900:	42bd      	cmp	r5, r7
 8014902:	d909      	bls.n	8014918 <_scanf_i+0x17c>
 8014904:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8014908:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801490c:	4632      	mov	r2, r6
 801490e:	4650      	mov	r0, sl
 8014910:	4798      	blx	r3
 8014912:	f105 39ff 	add.w	r9, r5, #4294967295
 8014916:	464d      	mov	r5, r9
 8014918:	42bd      	cmp	r5, r7
 801491a:	d02d      	beq.n	8014978 <_scanf_i+0x1dc>
 801491c:	6822      	ldr	r2, [r4, #0]
 801491e:	f012 0210 	ands.w	r2, r2, #16
 8014922:	d113      	bne.n	801494c <_scanf_i+0x1b0>
 8014924:	702a      	strb	r2, [r5, #0]
 8014926:	6863      	ldr	r3, [r4, #4]
 8014928:	9e01      	ldr	r6, [sp, #4]
 801492a:	4639      	mov	r1, r7
 801492c:	4650      	mov	r0, sl
 801492e:	47b0      	blx	r6
 8014930:	6821      	ldr	r1, [r4, #0]
 8014932:	f8d8 3000 	ldr.w	r3, [r8]
 8014936:	f011 0f20 	tst.w	r1, #32
 801493a:	d013      	beq.n	8014964 <_scanf_i+0x1c8>
 801493c:	1d1a      	adds	r2, r3, #4
 801493e:	f8c8 2000 	str.w	r2, [r8]
 8014942:	681b      	ldr	r3, [r3, #0]
 8014944:	6018      	str	r0, [r3, #0]
 8014946:	68e3      	ldr	r3, [r4, #12]
 8014948:	3301      	adds	r3, #1
 801494a:	60e3      	str	r3, [r4, #12]
 801494c:	1bed      	subs	r5, r5, r7
 801494e:	44ab      	add	fp, r5
 8014950:	6925      	ldr	r5, [r4, #16]
 8014952:	445d      	add	r5, fp
 8014954:	6125      	str	r5, [r4, #16]
 8014956:	2000      	movs	r0, #0
 8014958:	b007      	add	sp, #28
 801495a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801495e:	f04f 0b00 	mov.w	fp, #0
 8014962:	e7ca      	b.n	80148fa <_scanf_i+0x15e>
 8014964:	1d1a      	adds	r2, r3, #4
 8014966:	f8c8 2000 	str.w	r2, [r8]
 801496a:	681b      	ldr	r3, [r3, #0]
 801496c:	f011 0f01 	tst.w	r1, #1
 8014970:	bf14      	ite	ne
 8014972:	8018      	strhne	r0, [r3, #0]
 8014974:	6018      	streq	r0, [r3, #0]
 8014976:	e7e6      	b.n	8014946 <_scanf_i+0x1aa>
 8014978:	2001      	movs	r0, #1
 801497a:	e7ed      	b.n	8014958 <_scanf_i+0x1bc>
 801497c:	08016894 	.word	0x08016894
 8014980:	08014b5d 	.word	0x08014b5d
 8014984:	08011d8d 	.word	0x08011d8d
 8014988:	08016d6e 	.word	0x08016d6e

0801498c <_read_r>:
 801498c:	b538      	push	{r3, r4, r5, lr}
 801498e:	4d07      	ldr	r5, [pc, #28]	; (80149ac <_read_r+0x20>)
 8014990:	4604      	mov	r4, r0
 8014992:	4608      	mov	r0, r1
 8014994:	4611      	mov	r1, r2
 8014996:	2200      	movs	r2, #0
 8014998:	602a      	str	r2, [r5, #0]
 801499a:	461a      	mov	r2, r3
 801499c:	f7ee fa78 	bl	8002e90 <_read>
 80149a0:	1c43      	adds	r3, r0, #1
 80149a2:	d102      	bne.n	80149aa <_read_r+0x1e>
 80149a4:	682b      	ldr	r3, [r5, #0]
 80149a6:	b103      	cbz	r3, 80149aa <_read_r+0x1e>
 80149a8:	6023      	str	r3, [r4, #0]
 80149aa:	bd38      	pop	{r3, r4, r5, pc}
 80149ac:	2000a194 	.word	0x2000a194

080149b0 <nan>:
 80149b0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80149b8 <nan+0x8>
 80149b4:	4770      	bx	lr
 80149b6:	bf00      	nop
 80149b8:	00000000 	.word	0x00000000
 80149bc:	7ff80000 	.word	0x7ff80000

080149c0 <_sbrk_r>:
 80149c0:	b538      	push	{r3, r4, r5, lr}
 80149c2:	4d06      	ldr	r5, [pc, #24]	; (80149dc <_sbrk_r+0x1c>)
 80149c4:	2300      	movs	r3, #0
 80149c6:	4604      	mov	r4, r0
 80149c8:	4608      	mov	r0, r1
 80149ca:	602b      	str	r3, [r5, #0]
 80149cc:	f7ee face 	bl	8002f6c <_sbrk>
 80149d0:	1c43      	adds	r3, r0, #1
 80149d2:	d102      	bne.n	80149da <_sbrk_r+0x1a>
 80149d4:	682b      	ldr	r3, [r5, #0]
 80149d6:	b103      	cbz	r3, 80149da <_sbrk_r+0x1a>
 80149d8:	6023      	str	r3, [r4, #0]
 80149da:	bd38      	pop	{r3, r4, r5, pc}
 80149dc:	2000a194 	.word	0x2000a194

080149e0 <__sccl>:
 80149e0:	b570      	push	{r4, r5, r6, lr}
 80149e2:	780b      	ldrb	r3, [r1, #0]
 80149e4:	4604      	mov	r4, r0
 80149e6:	2b5e      	cmp	r3, #94	; 0x5e
 80149e8:	bf0b      	itete	eq
 80149ea:	784b      	ldrbeq	r3, [r1, #1]
 80149ec:	1c48      	addne	r0, r1, #1
 80149ee:	1c88      	addeq	r0, r1, #2
 80149f0:	2200      	movne	r2, #0
 80149f2:	bf08      	it	eq
 80149f4:	2201      	moveq	r2, #1
 80149f6:	1e61      	subs	r1, r4, #1
 80149f8:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 80149fc:	f801 2f01 	strb.w	r2, [r1, #1]!
 8014a00:	42a9      	cmp	r1, r5
 8014a02:	d1fb      	bne.n	80149fc <__sccl+0x1c>
 8014a04:	b90b      	cbnz	r3, 8014a0a <__sccl+0x2a>
 8014a06:	3801      	subs	r0, #1
 8014a08:	bd70      	pop	{r4, r5, r6, pc}
 8014a0a:	f082 0201 	eor.w	r2, r2, #1
 8014a0e:	54e2      	strb	r2, [r4, r3]
 8014a10:	4605      	mov	r5, r0
 8014a12:	4628      	mov	r0, r5
 8014a14:	f810 1b01 	ldrb.w	r1, [r0], #1
 8014a18:	292d      	cmp	r1, #45	; 0x2d
 8014a1a:	d006      	beq.n	8014a2a <__sccl+0x4a>
 8014a1c:	295d      	cmp	r1, #93	; 0x5d
 8014a1e:	d0f3      	beq.n	8014a08 <__sccl+0x28>
 8014a20:	b909      	cbnz	r1, 8014a26 <__sccl+0x46>
 8014a22:	4628      	mov	r0, r5
 8014a24:	e7f0      	b.n	8014a08 <__sccl+0x28>
 8014a26:	460b      	mov	r3, r1
 8014a28:	e7f1      	b.n	8014a0e <__sccl+0x2e>
 8014a2a:	786e      	ldrb	r6, [r5, #1]
 8014a2c:	2e5d      	cmp	r6, #93	; 0x5d
 8014a2e:	d0fa      	beq.n	8014a26 <__sccl+0x46>
 8014a30:	42b3      	cmp	r3, r6
 8014a32:	dcf8      	bgt.n	8014a26 <__sccl+0x46>
 8014a34:	3502      	adds	r5, #2
 8014a36:	4619      	mov	r1, r3
 8014a38:	3101      	adds	r1, #1
 8014a3a:	428e      	cmp	r6, r1
 8014a3c:	5462      	strb	r2, [r4, r1]
 8014a3e:	dcfb      	bgt.n	8014a38 <__sccl+0x58>
 8014a40:	1af1      	subs	r1, r6, r3
 8014a42:	3901      	subs	r1, #1
 8014a44:	1c58      	adds	r0, r3, #1
 8014a46:	42b3      	cmp	r3, r6
 8014a48:	bfa8      	it	ge
 8014a4a:	2100      	movge	r1, #0
 8014a4c:	1843      	adds	r3, r0, r1
 8014a4e:	e7e0      	b.n	8014a12 <__sccl+0x32>

08014a50 <strncmp>:
 8014a50:	b510      	push	{r4, lr}
 8014a52:	b17a      	cbz	r2, 8014a74 <strncmp+0x24>
 8014a54:	4603      	mov	r3, r0
 8014a56:	3901      	subs	r1, #1
 8014a58:	1884      	adds	r4, r0, r2
 8014a5a:	f813 0b01 	ldrb.w	r0, [r3], #1
 8014a5e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8014a62:	4290      	cmp	r0, r2
 8014a64:	d101      	bne.n	8014a6a <strncmp+0x1a>
 8014a66:	42a3      	cmp	r3, r4
 8014a68:	d101      	bne.n	8014a6e <strncmp+0x1e>
 8014a6a:	1a80      	subs	r0, r0, r2
 8014a6c:	bd10      	pop	{r4, pc}
 8014a6e:	2800      	cmp	r0, #0
 8014a70:	d1f3      	bne.n	8014a5a <strncmp+0xa>
 8014a72:	e7fa      	b.n	8014a6a <strncmp+0x1a>
 8014a74:	4610      	mov	r0, r2
 8014a76:	e7f9      	b.n	8014a6c <strncmp+0x1c>

08014a78 <_strtoul_l.constprop.0>:
 8014a78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014a7c:	4f36      	ldr	r7, [pc, #216]	; (8014b58 <_strtoul_l.constprop.0+0xe0>)
 8014a7e:	4686      	mov	lr, r0
 8014a80:	460d      	mov	r5, r1
 8014a82:	4628      	mov	r0, r5
 8014a84:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014a88:	5de6      	ldrb	r6, [r4, r7]
 8014a8a:	f016 0608 	ands.w	r6, r6, #8
 8014a8e:	d1f8      	bne.n	8014a82 <_strtoul_l.constprop.0+0xa>
 8014a90:	2c2d      	cmp	r4, #45	; 0x2d
 8014a92:	d12f      	bne.n	8014af4 <_strtoul_l.constprop.0+0x7c>
 8014a94:	782c      	ldrb	r4, [r5, #0]
 8014a96:	2601      	movs	r6, #1
 8014a98:	1c85      	adds	r5, r0, #2
 8014a9a:	2b00      	cmp	r3, #0
 8014a9c:	d057      	beq.n	8014b4e <_strtoul_l.constprop.0+0xd6>
 8014a9e:	2b10      	cmp	r3, #16
 8014aa0:	d109      	bne.n	8014ab6 <_strtoul_l.constprop.0+0x3e>
 8014aa2:	2c30      	cmp	r4, #48	; 0x30
 8014aa4:	d107      	bne.n	8014ab6 <_strtoul_l.constprop.0+0x3e>
 8014aa6:	7828      	ldrb	r0, [r5, #0]
 8014aa8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8014aac:	2858      	cmp	r0, #88	; 0x58
 8014aae:	d149      	bne.n	8014b44 <_strtoul_l.constprop.0+0xcc>
 8014ab0:	786c      	ldrb	r4, [r5, #1]
 8014ab2:	2310      	movs	r3, #16
 8014ab4:	3502      	adds	r5, #2
 8014ab6:	f04f 38ff 	mov.w	r8, #4294967295
 8014aba:	2700      	movs	r7, #0
 8014abc:	fbb8 f8f3 	udiv	r8, r8, r3
 8014ac0:	fb03 f908 	mul.w	r9, r3, r8
 8014ac4:	ea6f 0909 	mvn.w	r9, r9
 8014ac8:	4638      	mov	r0, r7
 8014aca:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8014ace:	f1bc 0f09 	cmp.w	ip, #9
 8014ad2:	d814      	bhi.n	8014afe <_strtoul_l.constprop.0+0x86>
 8014ad4:	4664      	mov	r4, ip
 8014ad6:	42a3      	cmp	r3, r4
 8014ad8:	dd22      	ble.n	8014b20 <_strtoul_l.constprop.0+0xa8>
 8014ada:	2f00      	cmp	r7, #0
 8014adc:	db1d      	blt.n	8014b1a <_strtoul_l.constprop.0+0xa2>
 8014ade:	4580      	cmp	r8, r0
 8014ae0:	d31b      	bcc.n	8014b1a <_strtoul_l.constprop.0+0xa2>
 8014ae2:	d101      	bne.n	8014ae8 <_strtoul_l.constprop.0+0x70>
 8014ae4:	45a1      	cmp	r9, r4
 8014ae6:	db18      	blt.n	8014b1a <_strtoul_l.constprop.0+0xa2>
 8014ae8:	fb00 4003 	mla	r0, r0, r3, r4
 8014aec:	2701      	movs	r7, #1
 8014aee:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014af2:	e7ea      	b.n	8014aca <_strtoul_l.constprop.0+0x52>
 8014af4:	2c2b      	cmp	r4, #43	; 0x2b
 8014af6:	bf04      	itt	eq
 8014af8:	782c      	ldrbeq	r4, [r5, #0]
 8014afa:	1c85      	addeq	r5, r0, #2
 8014afc:	e7cd      	b.n	8014a9a <_strtoul_l.constprop.0+0x22>
 8014afe:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8014b02:	f1bc 0f19 	cmp.w	ip, #25
 8014b06:	d801      	bhi.n	8014b0c <_strtoul_l.constprop.0+0x94>
 8014b08:	3c37      	subs	r4, #55	; 0x37
 8014b0a:	e7e4      	b.n	8014ad6 <_strtoul_l.constprop.0+0x5e>
 8014b0c:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8014b10:	f1bc 0f19 	cmp.w	ip, #25
 8014b14:	d804      	bhi.n	8014b20 <_strtoul_l.constprop.0+0xa8>
 8014b16:	3c57      	subs	r4, #87	; 0x57
 8014b18:	e7dd      	b.n	8014ad6 <_strtoul_l.constprop.0+0x5e>
 8014b1a:	f04f 37ff 	mov.w	r7, #4294967295
 8014b1e:	e7e6      	b.n	8014aee <_strtoul_l.constprop.0+0x76>
 8014b20:	2f00      	cmp	r7, #0
 8014b22:	da07      	bge.n	8014b34 <_strtoul_l.constprop.0+0xbc>
 8014b24:	2322      	movs	r3, #34	; 0x22
 8014b26:	f8ce 3000 	str.w	r3, [lr]
 8014b2a:	f04f 30ff 	mov.w	r0, #4294967295
 8014b2e:	b932      	cbnz	r2, 8014b3e <_strtoul_l.constprop.0+0xc6>
 8014b30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014b34:	b106      	cbz	r6, 8014b38 <_strtoul_l.constprop.0+0xc0>
 8014b36:	4240      	negs	r0, r0
 8014b38:	2a00      	cmp	r2, #0
 8014b3a:	d0f9      	beq.n	8014b30 <_strtoul_l.constprop.0+0xb8>
 8014b3c:	b107      	cbz	r7, 8014b40 <_strtoul_l.constprop.0+0xc8>
 8014b3e:	1e69      	subs	r1, r5, #1
 8014b40:	6011      	str	r1, [r2, #0]
 8014b42:	e7f5      	b.n	8014b30 <_strtoul_l.constprop.0+0xb8>
 8014b44:	2430      	movs	r4, #48	; 0x30
 8014b46:	2b00      	cmp	r3, #0
 8014b48:	d1b5      	bne.n	8014ab6 <_strtoul_l.constprop.0+0x3e>
 8014b4a:	2308      	movs	r3, #8
 8014b4c:	e7b3      	b.n	8014ab6 <_strtoul_l.constprop.0+0x3e>
 8014b4e:	2c30      	cmp	r4, #48	; 0x30
 8014b50:	d0a9      	beq.n	8014aa6 <_strtoul_l.constprop.0+0x2e>
 8014b52:	230a      	movs	r3, #10
 8014b54:	e7af      	b.n	8014ab6 <_strtoul_l.constprop.0+0x3e>
 8014b56:	bf00      	nop
 8014b58:	080169f9 	.word	0x080169f9

08014b5c <_strtoul_r>:
 8014b5c:	f7ff bf8c 	b.w	8014a78 <_strtoul_l.constprop.0>

08014b60 <__submore>:
 8014b60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014b64:	460c      	mov	r4, r1
 8014b66:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8014b68:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014b6c:	4299      	cmp	r1, r3
 8014b6e:	d11d      	bne.n	8014bac <__submore+0x4c>
 8014b70:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8014b74:	f7ff f8bc 	bl	8013cf0 <_malloc_r>
 8014b78:	b918      	cbnz	r0, 8014b82 <__submore+0x22>
 8014b7a:	f04f 30ff 	mov.w	r0, #4294967295
 8014b7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014b82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014b86:	63a3      	str	r3, [r4, #56]	; 0x38
 8014b88:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8014b8c:	6360      	str	r0, [r4, #52]	; 0x34
 8014b8e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8014b92:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8014b96:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8014b9a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8014b9e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8014ba2:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8014ba6:	6020      	str	r0, [r4, #0]
 8014ba8:	2000      	movs	r0, #0
 8014baa:	e7e8      	b.n	8014b7e <__submore+0x1e>
 8014bac:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8014bae:	0077      	lsls	r7, r6, #1
 8014bb0:	463a      	mov	r2, r7
 8014bb2:	f000 fb2b 	bl	801520c <_realloc_r>
 8014bb6:	4605      	mov	r5, r0
 8014bb8:	2800      	cmp	r0, #0
 8014bba:	d0de      	beq.n	8014b7a <__submore+0x1a>
 8014bbc:	eb00 0806 	add.w	r8, r0, r6
 8014bc0:	4601      	mov	r1, r0
 8014bc2:	4632      	mov	r2, r6
 8014bc4:	4640      	mov	r0, r8
 8014bc6:	f7fb faa9 	bl	801011c <memcpy>
 8014bca:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8014bce:	f8c4 8000 	str.w	r8, [r4]
 8014bd2:	e7e9      	b.n	8014ba8 <__submore+0x48>

08014bd4 <__swbuf_r>:
 8014bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014bd6:	460e      	mov	r6, r1
 8014bd8:	4614      	mov	r4, r2
 8014bda:	4605      	mov	r5, r0
 8014bdc:	b118      	cbz	r0, 8014be6 <__swbuf_r+0x12>
 8014bde:	6983      	ldr	r3, [r0, #24]
 8014be0:	b90b      	cbnz	r3, 8014be6 <__swbuf_r+0x12>
 8014be2:	f000 f9e7 	bl	8014fb4 <__sinit>
 8014be6:	4b21      	ldr	r3, [pc, #132]	; (8014c6c <__swbuf_r+0x98>)
 8014be8:	429c      	cmp	r4, r3
 8014bea:	d12b      	bne.n	8014c44 <__swbuf_r+0x70>
 8014bec:	686c      	ldr	r4, [r5, #4]
 8014bee:	69a3      	ldr	r3, [r4, #24]
 8014bf0:	60a3      	str	r3, [r4, #8]
 8014bf2:	89a3      	ldrh	r3, [r4, #12]
 8014bf4:	071a      	lsls	r2, r3, #28
 8014bf6:	d52f      	bpl.n	8014c58 <__swbuf_r+0x84>
 8014bf8:	6923      	ldr	r3, [r4, #16]
 8014bfa:	b36b      	cbz	r3, 8014c58 <__swbuf_r+0x84>
 8014bfc:	6923      	ldr	r3, [r4, #16]
 8014bfe:	6820      	ldr	r0, [r4, #0]
 8014c00:	1ac0      	subs	r0, r0, r3
 8014c02:	6963      	ldr	r3, [r4, #20]
 8014c04:	b2f6      	uxtb	r6, r6
 8014c06:	4283      	cmp	r3, r0
 8014c08:	4637      	mov	r7, r6
 8014c0a:	dc04      	bgt.n	8014c16 <__swbuf_r+0x42>
 8014c0c:	4621      	mov	r1, r4
 8014c0e:	4628      	mov	r0, r5
 8014c10:	f000 f93c 	bl	8014e8c <_fflush_r>
 8014c14:	bb30      	cbnz	r0, 8014c64 <__swbuf_r+0x90>
 8014c16:	68a3      	ldr	r3, [r4, #8]
 8014c18:	3b01      	subs	r3, #1
 8014c1a:	60a3      	str	r3, [r4, #8]
 8014c1c:	6823      	ldr	r3, [r4, #0]
 8014c1e:	1c5a      	adds	r2, r3, #1
 8014c20:	6022      	str	r2, [r4, #0]
 8014c22:	701e      	strb	r6, [r3, #0]
 8014c24:	6963      	ldr	r3, [r4, #20]
 8014c26:	3001      	adds	r0, #1
 8014c28:	4283      	cmp	r3, r0
 8014c2a:	d004      	beq.n	8014c36 <__swbuf_r+0x62>
 8014c2c:	89a3      	ldrh	r3, [r4, #12]
 8014c2e:	07db      	lsls	r3, r3, #31
 8014c30:	d506      	bpl.n	8014c40 <__swbuf_r+0x6c>
 8014c32:	2e0a      	cmp	r6, #10
 8014c34:	d104      	bne.n	8014c40 <__swbuf_r+0x6c>
 8014c36:	4621      	mov	r1, r4
 8014c38:	4628      	mov	r0, r5
 8014c3a:	f000 f927 	bl	8014e8c <_fflush_r>
 8014c3e:	b988      	cbnz	r0, 8014c64 <__swbuf_r+0x90>
 8014c40:	4638      	mov	r0, r7
 8014c42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014c44:	4b0a      	ldr	r3, [pc, #40]	; (8014c70 <__swbuf_r+0x9c>)
 8014c46:	429c      	cmp	r4, r3
 8014c48:	d101      	bne.n	8014c4e <__swbuf_r+0x7a>
 8014c4a:	68ac      	ldr	r4, [r5, #8]
 8014c4c:	e7cf      	b.n	8014bee <__swbuf_r+0x1a>
 8014c4e:	4b09      	ldr	r3, [pc, #36]	; (8014c74 <__swbuf_r+0xa0>)
 8014c50:	429c      	cmp	r4, r3
 8014c52:	bf08      	it	eq
 8014c54:	68ec      	ldreq	r4, [r5, #12]
 8014c56:	e7ca      	b.n	8014bee <__swbuf_r+0x1a>
 8014c58:	4621      	mov	r1, r4
 8014c5a:	4628      	mov	r0, r5
 8014c5c:	f000 f81a 	bl	8014c94 <__swsetup_r>
 8014c60:	2800      	cmp	r0, #0
 8014c62:	d0cb      	beq.n	8014bfc <__swbuf_r+0x28>
 8014c64:	f04f 37ff 	mov.w	r7, #4294967295
 8014c68:	e7ea      	b.n	8014c40 <__swbuf_r+0x6c>
 8014c6a:	bf00      	nop
 8014c6c:	08016d90 	.word	0x08016d90
 8014c70:	08016db0 	.word	0x08016db0
 8014c74:	08016d70 	.word	0x08016d70

08014c78 <__ascii_wctomb>:
 8014c78:	b149      	cbz	r1, 8014c8e <__ascii_wctomb+0x16>
 8014c7a:	2aff      	cmp	r2, #255	; 0xff
 8014c7c:	bf85      	ittet	hi
 8014c7e:	238a      	movhi	r3, #138	; 0x8a
 8014c80:	6003      	strhi	r3, [r0, #0]
 8014c82:	700a      	strbls	r2, [r1, #0]
 8014c84:	f04f 30ff 	movhi.w	r0, #4294967295
 8014c88:	bf98      	it	ls
 8014c8a:	2001      	movls	r0, #1
 8014c8c:	4770      	bx	lr
 8014c8e:	4608      	mov	r0, r1
 8014c90:	4770      	bx	lr
	...

08014c94 <__swsetup_r>:
 8014c94:	4b32      	ldr	r3, [pc, #200]	; (8014d60 <__swsetup_r+0xcc>)
 8014c96:	b570      	push	{r4, r5, r6, lr}
 8014c98:	681d      	ldr	r5, [r3, #0]
 8014c9a:	4606      	mov	r6, r0
 8014c9c:	460c      	mov	r4, r1
 8014c9e:	b125      	cbz	r5, 8014caa <__swsetup_r+0x16>
 8014ca0:	69ab      	ldr	r3, [r5, #24]
 8014ca2:	b913      	cbnz	r3, 8014caa <__swsetup_r+0x16>
 8014ca4:	4628      	mov	r0, r5
 8014ca6:	f000 f985 	bl	8014fb4 <__sinit>
 8014caa:	4b2e      	ldr	r3, [pc, #184]	; (8014d64 <__swsetup_r+0xd0>)
 8014cac:	429c      	cmp	r4, r3
 8014cae:	d10f      	bne.n	8014cd0 <__swsetup_r+0x3c>
 8014cb0:	686c      	ldr	r4, [r5, #4]
 8014cb2:	89a3      	ldrh	r3, [r4, #12]
 8014cb4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014cb8:	0719      	lsls	r1, r3, #28
 8014cba:	d42c      	bmi.n	8014d16 <__swsetup_r+0x82>
 8014cbc:	06dd      	lsls	r5, r3, #27
 8014cbe:	d411      	bmi.n	8014ce4 <__swsetup_r+0x50>
 8014cc0:	2309      	movs	r3, #9
 8014cc2:	6033      	str	r3, [r6, #0]
 8014cc4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8014cc8:	81a3      	strh	r3, [r4, #12]
 8014cca:	f04f 30ff 	mov.w	r0, #4294967295
 8014cce:	e03e      	b.n	8014d4e <__swsetup_r+0xba>
 8014cd0:	4b25      	ldr	r3, [pc, #148]	; (8014d68 <__swsetup_r+0xd4>)
 8014cd2:	429c      	cmp	r4, r3
 8014cd4:	d101      	bne.n	8014cda <__swsetup_r+0x46>
 8014cd6:	68ac      	ldr	r4, [r5, #8]
 8014cd8:	e7eb      	b.n	8014cb2 <__swsetup_r+0x1e>
 8014cda:	4b24      	ldr	r3, [pc, #144]	; (8014d6c <__swsetup_r+0xd8>)
 8014cdc:	429c      	cmp	r4, r3
 8014cde:	bf08      	it	eq
 8014ce0:	68ec      	ldreq	r4, [r5, #12]
 8014ce2:	e7e6      	b.n	8014cb2 <__swsetup_r+0x1e>
 8014ce4:	0758      	lsls	r0, r3, #29
 8014ce6:	d512      	bpl.n	8014d0e <__swsetup_r+0x7a>
 8014ce8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014cea:	b141      	cbz	r1, 8014cfe <__swsetup_r+0x6a>
 8014cec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014cf0:	4299      	cmp	r1, r3
 8014cf2:	d002      	beq.n	8014cfa <__swsetup_r+0x66>
 8014cf4:	4630      	mov	r0, r6
 8014cf6:	f7fe ff8f 	bl	8013c18 <_free_r>
 8014cfa:	2300      	movs	r3, #0
 8014cfc:	6363      	str	r3, [r4, #52]	; 0x34
 8014cfe:	89a3      	ldrh	r3, [r4, #12]
 8014d00:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8014d04:	81a3      	strh	r3, [r4, #12]
 8014d06:	2300      	movs	r3, #0
 8014d08:	6063      	str	r3, [r4, #4]
 8014d0a:	6923      	ldr	r3, [r4, #16]
 8014d0c:	6023      	str	r3, [r4, #0]
 8014d0e:	89a3      	ldrh	r3, [r4, #12]
 8014d10:	f043 0308 	orr.w	r3, r3, #8
 8014d14:	81a3      	strh	r3, [r4, #12]
 8014d16:	6923      	ldr	r3, [r4, #16]
 8014d18:	b94b      	cbnz	r3, 8014d2e <__swsetup_r+0x9a>
 8014d1a:	89a3      	ldrh	r3, [r4, #12]
 8014d1c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8014d20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014d24:	d003      	beq.n	8014d2e <__swsetup_r+0x9a>
 8014d26:	4621      	mov	r1, r4
 8014d28:	4630      	mov	r0, r6
 8014d2a:	f000 fa09 	bl	8015140 <__smakebuf_r>
 8014d2e:	89a0      	ldrh	r0, [r4, #12]
 8014d30:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014d34:	f010 0301 	ands.w	r3, r0, #1
 8014d38:	d00a      	beq.n	8014d50 <__swsetup_r+0xbc>
 8014d3a:	2300      	movs	r3, #0
 8014d3c:	60a3      	str	r3, [r4, #8]
 8014d3e:	6963      	ldr	r3, [r4, #20]
 8014d40:	425b      	negs	r3, r3
 8014d42:	61a3      	str	r3, [r4, #24]
 8014d44:	6923      	ldr	r3, [r4, #16]
 8014d46:	b943      	cbnz	r3, 8014d5a <__swsetup_r+0xc6>
 8014d48:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8014d4c:	d1ba      	bne.n	8014cc4 <__swsetup_r+0x30>
 8014d4e:	bd70      	pop	{r4, r5, r6, pc}
 8014d50:	0781      	lsls	r1, r0, #30
 8014d52:	bf58      	it	pl
 8014d54:	6963      	ldrpl	r3, [r4, #20]
 8014d56:	60a3      	str	r3, [r4, #8]
 8014d58:	e7f4      	b.n	8014d44 <__swsetup_r+0xb0>
 8014d5a:	2000      	movs	r0, #0
 8014d5c:	e7f7      	b.n	8014d4e <__swsetup_r+0xba>
 8014d5e:	bf00      	nop
 8014d60:	2000038c 	.word	0x2000038c
 8014d64:	08016d90 	.word	0x08016d90
 8014d68:	08016db0 	.word	0x08016db0
 8014d6c:	08016d70 	.word	0x08016d70

08014d70 <abort>:
 8014d70:	b508      	push	{r3, lr}
 8014d72:	2006      	movs	r0, #6
 8014d74:	f000 faa2 	bl	80152bc <raise>
 8014d78:	2001      	movs	r0, #1
 8014d7a:	f7ee f87f 	bl	8002e7c <_exit>
	...

08014d80 <__sflush_r>:
 8014d80:	898a      	ldrh	r2, [r1, #12]
 8014d82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014d86:	4605      	mov	r5, r0
 8014d88:	0710      	lsls	r0, r2, #28
 8014d8a:	460c      	mov	r4, r1
 8014d8c:	d458      	bmi.n	8014e40 <__sflush_r+0xc0>
 8014d8e:	684b      	ldr	r3, [r1, #4]
 8014d90:	2b00      	cmp	r3, #0
 8014d92:	dc05      	bgt.n	8014da0 <__sflush_r+0x20>
 8014d94:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8014d96:	2b00      	cmp	r3, #0
 8014d98:	dc02      	bgt.n	8014da0 <__sflush_r+0x20>
 8014d9a:	2000      	movs	r0, #0
 8014d9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014da0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014da2:	2e00      	cmp	r6, #0
 8014da4:	d0f9      	beq.n	8014d9a <__sflush_r+0x1a>
 8014da6:	2300      	movs	r3, #0
 8014da8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8014dac:	682f      	ldr	r7, [r5, #0]
 8014dae:	602b      	str	r3, [r5, #0]
 8014db0:	d032      	beq.n	8014e18 <__sflush_r+0x98>
 8014db2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8014db4:	89a3      	ldrh	r3, [r4, #12]
 8014db6:	075a      	lsls	r2, r3, #29
 8014db8:	d505      	bpl.n	8014dc6 <__sflush_r+0x46>
 8014dba:	6863      	ldr	r3, [r4, #4]
 8014dbc:	1ac0      	subs	r0, r0, r3
 8014dbe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014dc0:	b10b      	cbz	r3, 8014dc6 <__sflush_r+0x46>
 8014dc2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8014dc4:	1ac0      	subs	r0, r0, r3
 8014dc6:	2300      	movs	r3, #0
 8014dc8:	4602      	mov	r2, r0
 8014dca:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014dcc:	6a21      	ldr	r1, [r4, #32]
 8014dce:	4628      	mov	r0, r5
 8014dd0:	47b0      	blx	r6
 8014dd2:	1c43      	adds	r3, r0, #1
 8014dd4:	89a3      	ldrh	r3, [r4, #12]
 8014dd6:	d106      	bne.n	8014de6 <__sflush_r+0x66>
 8014dd8:	6829      	ldr	r1, [r5, #0]
 8014dda:	291d      	cmp	r1, #29
 8014ddc:	d82c      	bhi.n	8014e38 <__sflush_r+0xb8>
 8014dde:	4a2a      	ldr	r2, [pc, #168]	; (8014e88 <__sflush_r+0x108>)
 8014de0:	40ca      	lsrs	r2, r1
 8014de2:	07d6      	lsls	r6, r2, #31
 8014de4:	d528      	bpl.n	8014e38 <__sflush_r+0xb8>
 8014de6:	2200      	movs	r2, #0
 8014de8:	6062      	str	r2, [r4, #4]
 8014dea:	04d9      	lsls	r1, r3, #19
 8014dec:	6922      	ldr	r2, [r4, #16]
 8014dee:	6022      	str	r2, [r4, #0]
 8014df0:	d504      	bpl.n	8014dfc <__sflush_r+0x7c>
 8014df2:	1c42      	adds	r2, r0, #1
 8014df4:	d101      	bne.n	8014dfa <__sflush_r+0x7a>
 8014df6:	682b      	ldr	r3, [r5, #0]
 8014df8:	b903      	cbnz	r3, 8014dfc <__sflush_r+0x7c>
 8014dfa:	6560      	str	r0, [r4, #84]	; 0x54
 8014dfc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014dfe:	602f      	str	r7, [r5, #0]
 8014e00:	2900      	cmp	r1, #0
 8014e02:	d0ca      	beq.n	8014d9a <__sflush_r+0x1a>
 8014e04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014e08:	4299      	cmp	r1, r3
 8014e0a:	d002      	beq.n	8014e12 <__sflush_r+0x92>
 8014e0c:	4628      	mov	r0, r5
 8014e0e:	f7fe ff03 	bl	8013c18 <_free_r>
 8014e12:	2000      	movs	r0, #0
 8014e14:	6360      	str	r0, [r4, #52]	; 0x34
 8014e16:	e7c1      	b.n	8014d9c <__sflush_r+0x1c>
 8014e18:	6a21      	ldr	r1, [r4, #32]
 8014e1a:	2301      	movs	r3, #1
 8014e1c:	4628      	mov	r0, r5
 8014e1e:	47b0      	blx	r6
 8014e20:	1c41      	adds	r1, r0, #1
 8014e22:	d1c7      	bne.n	8014db4 <__sflush_r+0x34>
 8014e24:	682b      	ldr	r3, [r5, #0]
 8014e26:	2b00      	cmp	r3, #0
 8014e28:	d0c4      	beq.n	8014db4 <__sflush_r+0x34>
 8014e2a:	2b1d      	cmp	r3, #29
 8014e2c:	d001      	beq.n	8014e32 <__sflush_r+0xb2>
 8014e2e:	2b16      	cmp	r3, #22
 8014e30:	d101      	bne.n	8014e36 <__sflush_r+0xb6>
 8014e32:	602f      	str	r7, [r5, #0]
 8014e34:	e7b1      	b.n	8014d9a <__sflush_r+0x1a>
 8014e36:	89a3      	ldrh	r3, [r4, #12]
 8014e38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014e3c:	81a3      	strh	r3, [r4, #12]
 8014e3e:	e7ad      	b.n	8014d9c <__sflush_r+0x1c>
 8014e40:	690f      	ldr	r7, [r1, #16]
 8014e42:	2f00      	cmp	r7, #0
 8014e44:	d0a9      	beq.n	8014d9a <__sflush_r+0x1a>
 8014e46:	0793      	lsls	r3, r2, #30
 8014e48:	680e      	ldr	r6, [r1, #0]
 8014e4a:	bf08      	it	eq
 8014e4c:	694b      	ldreq	r3, [r1, #20]
 8014e4e:	600f      	str	r7, [r1, #0]
 8014e50:	bf18      	it	ne
 8014e52:	2300      	movne	r3, #0
 8014e54:	eba6 0807 	sub.w	r8, r6, r7
 8014e58:	608b      	str	r3, [r1, #8]
 8014e5a:	f1b8 0f00 	cmp.w	r8, #0
 8014e5e:	dd9c      	ble.n	8014d9a <__sflush_r+0x1a>
 8014e60:	6a21      	ldr	r1, [r4, #32]
 8014e62:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8014e64:	4643      	mov	r3, r8
 8014e66:	463a      	mov	r2, r7
 8014e68:	4628      	mov	r0, r5
 8014e6a:	47b0      	blx	r6
 8014e6c:	2800      	cmp	r0, #0
 8014e6e:	dc06      	bgt.n	8014e7e <__sflush_r+0xfe>
 8014e70:	89a3      	ldrh	r3, [r4, #12]
 8014e72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014e76:	81a3      	strh	r3, [r4, #12]
 8014e78:	f04f 30ff 	mov.w	r0, #4294967295
 8014e7c:	e78e      	b.n	8014d9c <__sflush_r+0x1c>
 8014e7e:	4407      	add	r7, r0
 8014e80:	eba8 0800 	sub.w	r8, r8, r0
 8014e84:	e7e9      	b.n	8014e5a <__sflush_r+0xda>
 8014e86:	bf00      	nop
 8014e88:	20400001 	.word	0x20400001

08014e8c <_fflush_r>:
 8014e8c:	b538      	push	{r3, r4, r5, lr}
 8014e8e:	690b      	ldr	r3, [r1, #16]
 8014e90:	4605      	mov	r5, r0
 8014e92:	460c      	mov	r4, r1
 8014e94:	b913      	cbnz	r3, 8014e9c <_fflush_r+0x10>
 8014e96:	2500      	movs	r5, #0
 8014e98:	4628      	mov	r0, r5
 8014e9a:	bd38      	pop	{r3, r4, r5, pc}
 8014e9c:	b118      	cbz	r0, 8014ea6 <_fflush_r+0x1a>
 8014e9e:	6983      	ldr	r3, [r0, #24]
 8014ea0:	b90b      	cbnz	r3, 8014ea6 <_fflush_r+0x1a>
 8014ea2:	f000 f887 	bl	8014fb4 <__sinit>
 8014ea6:	4b14      	ldr	r3, [pc, #80]	; (8014ef8 <_fflush_r+0x6c>)
 8014ea8:	429c      	cmp	r4, r3
 8014eaa:	d11b      	bne.n	8014ee4 <_fflush_r+0x58>
 8014eac:	686c      	ldr	r4, [r5, #4]
 8014eae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014eb2:	2b00      	cmp	r3, #0
 8014eb4:	d0ef      	beq.n	8014e96 <_fflush_r+0xa>
 8014eb6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8014eb8:	07d0      	lsls	r0, r2, #31
 8014eba:	d404      	bmi.n	8014ec6 <_fflush_r+0x3a>
 8014ebc:	0599      	lsls	r1, r3, #22
 8014ebe:	d402      	bmi.n	8014ec6 <_fflush_r+0x3a>
 8014ec0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014ec2:	f000 f915 	bl	80150f0 <__retarget_lock_acquire_recursive>
 8014ec6:	4628      	mov	r0, r5
 8014ec8:	4621      	mov	r1, r4
 8014eca:	f7ff ff59 	bl	8014d80 <__sflush_r>
 8014ece:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014ed0:	07da      	lsls	r2, r3, #31
 8014ed2:	4605      	mov	r5, r0
 8014ed4:	d4e0      	bmi.n	8014e98 <_fflush_r+0xc>
 8014ed6:	89a3      	ldrh	r3, [r4, #12]
 8014ed8:	059b      	lsls	r3, r3, #22
 8014eda:	d4dd      	bmi.n	8014e98 <_fflush_r+0xc>
 8014edc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014ede:	f000 f908 	bl	80150f2 <__retarget_lock_release_recursive>
 8014ee2:	e7d9      	b.n	8014e98 <_fflush_r+0xc>
 8014ee4:	4b05      	ldr	r3, [pc, #20]	; (8014efc <_fflush_r+0x70>)
 8014ee6:	429c      	cmp	r4, r3
 8014ee8:	d101      	bne.n	8014eee <_fflush_r+0x62>
 8014eea:	68ac      	ldr	r4, [r5, #8]
 8014eec:	e7df      	b.n	8014eae <_fflush_r+0x22>
 8014eee:	4b04      	ldr	r3, [pc, #16]	; (8014f00 <_fflush_r+0x74>)
 8014ef0:	429c      	cmp	r4, r3
 8014ef2:	bf08      	it	eq
 8014ef4:	68ec      	ldreq	r4, [r5, #12]
 8014ef6:	e7da      	b.n	8014eae <_fflush_r+0x22>
 8014ef8:	08016d90 	.word	0x08016d90
 8014efc:	08016db0 	.word	0x08016db0
 8014f00:	08016d70 	.word	0x08016d70

08014f04 <std>:
 8014f04:	2300      	movs	r3, #0
 8014f06:	b510      	push	{r4, lr}
 8014f08:	4604      	mov	r4, r0
 8014f0a:	e9c0 3300 	strd	r3, r3, [r0]
 8014f0e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8014f12:	6083      	str	r3, [r0, #8]
 8014f14:	8181      	strh	r1, [r0, #12]
 8014f16:	6643      	str	r3, [r0, #100]	; 0x64
 8014f18:	81c2      	strh	r2, [r0, #14]
 8014f1a:	6183      	str	r3, [r0, #24]
 8014f1c:	4619      	mov	r1, r3
 8014f1e:	2208      	movs	r2, #8
 8014f20:	305c      	adds	r0, #92	; 0x5c
 8014f22:	f7fb f909 	bl	8010138 <memset>
 8014f26:	4b05      	ldr	r3, [pc, #20]	; (8014f3c <std+0x38>)
 8014f28:	6263      	str	r3, [r4, #36]	; 0x24
 8014f2a:	4b05      	ldr	r3, [pc, #20]	; (8014f40 <std+0x3c>)
 8014f2c:	62a3      	str	r3, [r4, #40]	; 0x28
 8014f2e:	4b05      	ldr	r3, [pc, #20]	; (8014f44 <std+0x40>)
 8014f30:	62e3      	str	r3, [r4, #44]	; 0x2c
 8014f32:	4b05      	ldr	r3, [pc, #20]	; (8014f48 <std+0x44>)
 8014f34:	6224      	str	r4, [r4, #32]
 8014f36:	6323      	str	r3, [r4, #48]	; 0x30
 8014f38:	bd10      	pop	{r4, pc}
 8014f3a:	bf00      	nop
 8014f3c:	08010ee1 	.word	0x08010ee1
 8014f40:	08010f07 	.word	0x08010f07
 8014f44:	08010f3f 	.word	0x08010f3f
 8014f48:	08010f63 	.word	0x08010f63

08014f4c <_cleanup_r>:
 8014f4c:	4901      	ldr	r1, [pc, #4]	; (8014f54 <_cleanup_r+0x8>)
 8014f4e:	f000 b8af 	b.w	80150b0 <_fwalk_reent>
 8014f52:	bf00      	nop
 8014f54:	08014e8d 	.word	0x08014e8d

08014f58 <__sfmoreglue>:
 8014f58:	b570      	push	{r4, r5, r6, lr}
 8014f5a:	2268      	movs	r2, #104	; 0x68
 8014f5c:	1e4d      	subs	r5, r1, #1
 8014f5e:	4355      	muls	r5, r2
 8014f60:	460e      	mov	r6, r1
 8014f62:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8014f66:	f7fe fec3 	bl	8013cf0 <_malloc_r>
 8014f6a:	4604      	mov	r4, r0
 8014f6c:	b140      	cbz	r0, 8014f80 <__sfmoreglue+0x28>
 8014f6e:	2100      	movs	r1, #0
 8014f70:	e9c0 1600 	strd	r1, r6, [r0]
 8014f74:	300c      	adds	r0, #12
 8014f76:	60a0      	str	r0, [r4, #8]
 8014f78:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8014f7c:	f7fb f8dc 	bl	8010138 <memset>
 8014f80:	4620      	mov	r0, r4
 8014f82:	bd70      	pop	{r4, r5, r6, pc}

08014f84 <__sfp_lock_acquire>:
 8014f84:	4801      	ldr	r0, [pc, #4]	; (8014f8c <__sfp_lock_acquire+0x8>)
 8014f86:	f000 b8b3 	b.w	80150f0 <__retarget_lock_acquire_recursive>
 8014f8a:	bf00      	nop
 8014f8c:	2000a199 	.word	0x2000a199

08014f90 <__sfp_lock_release>:
 8014f90:	4801      	ldr	r0, [pc, #4]	; (8014f98 <__sfp_lock_release+0x8>)
 8014f92:	f000 b8ae 	b.w	80150f2 <__retarget_lock_release_recursive>
 8014f96:	bf00      	nop
 8014f98:	2000a199 	.word	0x2000a199

08014f9c <__sinit_lock_acquire>:
 8014f9c:	4801      	ldr	r0, [pc, #4]	; (8014fa4 <__sinit_lock_acquire+0x8>)
 8014f9e:	f000 b8a7 	b.w	80150f0 <__retarget_lock_acquire_recursive>
 8014fa2:	bf00      	nop
 8014fa4:	2000a19a 	.word	0x2000a19a

08014fa8 <__sinit_lock_release>:
 8014fa8:	4801      	ldr	r0, [pc, #4]	; (8014fb0 <__sinit_lock_release+0x8>)
 8014faa:	f000 b8a2 	b.w	80150f2 <__retarget_lock_release_recursive>
 8014fae:	bf00      	nop
 8014fb0:	2000a19a 	.word	0x2000a19a

08014fb4 <__sinit>:
 8014fb4:	b510      	push	{r4, lr}
 8014fb6:	4604      	mov	r4, r0
 8014fb8:	f7ff fff0 	bl	8014f9c <__sinit_lock_acquire>
 8014fbc:	69a3      	ldr	r3, [r4, #24]
 8014fbe:	b11b      	cbz	r3, 8014fc8 <__sinit+0x14>
 8014fc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014fc4:	f7ff bff0 	b.w	8014fa8 <__sinit_lock_release>
 8014fc8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8014fcc:	6523      	str	r3, [r4, #80]	; 0x50
 8014fce:	4b13      	ldr	r3, [pc, #76]	; (801501c <__sinit+0x68>)
 8014fd0:	4a13      	ldr	r2, [pc, #76]	; (8015020 <__sinit+0x6c>)
 8014fd2:	681b      	ldr	r3, [r3, #0]
 8014fd4:	62a2      	str	r2, [r4, #40]	; 0x28
 8014fd6:	42a3      	cmp	r3, r4
 8014fd8:	bf04      	itt	eq
 8014fda:	2301      	moveq	r3, #1
 8014fdc:	61a3      	streq	r3, [r4, #24]
 8014fde:	4620      	mov	r0, r4
 8014fe0:	f000 f820 	bl	8015024 <__sfp>
 8014fe4:	6060      	str	r0, [r4, #4]
 8014fe6:	4620      	mov	r0, r4
 8014fe8:	f000 f81c 	bl	8015024 <__sfp>
 8014fec:	60a0      	str	r0, [r4, #8]
 8014fee:	4620      	mov	r0, r4
 8014ff0:	f000 f818 	bl	8015024 <__sfp>
 8014ff4:	2200      	movs	r2, #0
 8014ff6:	60e0      	str	r0, [r4, #12]
 8014ff8:	2104      	movs	r1, #4
 8014ffa:	6860      	ldr	r0, [r4, #4]
 8014ffc:	f7ff ff82 	bl	8014f04 <std>
 8015000:	68a0      	ldr	r0, [r4, #8]
 8015002:	2201      	movs	r2, #1
 8015004:	2109      	movs	r1, #9
 8015006:	f7ff ff7d 	bl	8014f04 <std>
 801500a:	68e0      	ldr	r0, [r4, #12]
 801500c:	2202      	movs	r2, #2
 801500e:	2112      	movs	r1, #18
 8015010:	f7ff ff78 	bl	8014f04 <std>
 8015014:	2301      	movs	r3, #1
 8015016:	61a3      	str	r3, [r4, #24]
 8015018:	e7d2      	b.n	8014fc0 <__sinit+0xc>
 801501a:	bf00      	nop
 801501c:	080168b8 	.word	0x080168b8
 8015020:	08014f4d 	.word	0x08014f4d

08015024 <__sfp>:
 8015024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015026:	4607      	mov	r7, r0
 8015028:	f7ff ffac 	bl	8014f84 <__sfp_lock_acquire>
 801502c:	4b1e      	ldr	r3, [pc, #120]	; (80150a8 <__sfp+0x84>)
 801502e:	681e      	ldr	r6, [r3, #0]
 8015030:	69b3      	ldr	r3, [r6, #24]
 8015032:	b913      	cbnz	r3, 801503a <__sfp+0x16>
 8015034:	4630      	mov	r0, r6
 8015036:	f7ff ffbd 	bl	8014fb4 <__sinit>
 801503a:	3648      	adds	r6, #72	; 0x48
 801503c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8015040:	3b01      	subs	r3, #1
 8015042:	d503      	bpl.n	801504c <__sfp+0x28>
 8015044:	6833      	ldr	r3, [r6, #0]
 8015046:	b30b      	cbz	r3, 801508c <__sfp+0x68>
 8015048:	6836      	ldr	r6, [r6, #0]
 801504a:	e7f7      	b.n	801503c <__sfp+0x18>
 801504c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8015050:	b9d5      	cbnz	r5, 8015088 <__sfp+0x64>
 8015052:	4b16      	ldr	r3, [pc, #88]	; (80150ac <__sfp+0x88>)
 8015054:	60e3      	str	r3, [r4, #12]
 8015056:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801505a:	6665      	str	r5, [r4, #100]	; 0x64
 801505c:	f000 f847 	bl	80150ee <__retarget_lock_init_recursive>
 8015060:	f7ff ff96 	bl	8014f90 <__sfp_lock_release>
 8015064:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8015068:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801506c:	6025      	str	r5, [r4, #0]
 801506e:	61a5      	str	r5, [r4, #24]
 8015070:	2208      	movs	r2, #8
 8015072:	4629      	mov	r1, r5
 8015074:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8015078:	f7fb f85e 	bl	8010138 <memset>
 801507c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8015080:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8015084:	4620      	mov	r0, r4
 8015086:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015088:	3468      	adds	r4, #104	; 0x68
 801508a:	e7d9      	b.n	8015040 <__sfp+0x1c>
 801508c:	2104      	movs	r1, #4
 801508e:	4638      	mov	r0, r7
 8015090:	f7ff ff62 	bl	8014f58 <__sfmoreglue>
 8015094:	4604      	mov	r4, r0
 8015096:	6030      	str	r0, [r6, #0]
 8015098:	2800      	cmp	r0, #0
 801509a:	d1d5      	bne.n	8015048 <__sfp+0x24>
 801509c:	f7ff ff78 	bl	8014f90 <__sfp_lock_release>
 80150a0:	230c      	movs	r3, #12
 80150a2:	603b      	str	r3, [r7, #0]
 80150a4:	e7ee      	b.n	8015084 <__sfp+0x60>
 80150a6:	bf00      	nop
 80150a8:	080168b8 	.word	0x080168b8
 80150ac:	ffff0001 	.word	0xffff0001

080150b0 <_fwalk_reent>:
 80150b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80150b4:	4606      	mov	r6, r0
 80150b6:	4688      	mov	r8, r1
 80150b8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80150bc:	2700      	movs	r7, #0
 80150be:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80150c2:	f1b9 0901 	subs.w	r9, r9, #1
 80150c6:	d505      	bpl.n	80150d4 <_fwalk_reent+0x24>
 80150c8:	6824      	ldr	r4, [r4, #0]
 80150ca:	2c00      	cmp	r4, #0
 80150cc:	d1f7      	bne.n	80150be <_fwalk_reent+0xe>
 80150ce:	4638      	mov	r0, r7
 80150d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80150d4:	89ab      	ldrh	r3, [r5, #12]
 80150d6:	2b01      	cmp	r3, #1
 80150d8:	d907      	bls.n	80150ea <_fwalk_reent+0x3a>
 80150da:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80150de:	3301      	adds	r3, #1
 80150e0:	d003      	beq.n	80150ea <_fwalk_reent+0x3a>
 80150e2:	4629      	mov	r1, r5
 80150e4:	4630      	mov	r0, r6
 80150e6:	47c0      	blx	r8
 80150e8:	4307      	orrs	r7, r0
 80150ea:	3568      	adds	r5, #104	; 0x68
 80150ec:	e7e9      	b.n	80150c2 <_fwalk_reent+0x12>

080150ee <__retarget_lock_init_recursive>:
 80150ee:	4770      	bx	lr

080150f0 <__retarget_lock_acquire_recursive>:
 80150f0:	4770      	bx	lr

080150f2 <__retarget_lock_release_recursive>:
 80150f2:	4770      	bx	lr

080150f4 <__swhatbuf_r>:
 80150f4:	b570      	push	{r4, r5, r6, lr}
 80150f6:	460e      	mov	r6, r1
 80150f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80150fc:	2900      	cmp	r1, #0
 80150fe:	b096      	sub	sp, #88	; 0x58
 8015100:	4614      	mov	r4, r2
 8015102:	461d      	mov	r5, r3
 8015104:	da08      	bge.n	8015118 <__swhatbuf_r+0x24>
 8015106:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801510a:	2200      	movs	r2, #0
 801510c:	602a      	str	r2, [r5, #0]
 801510e:	061a      	lsls	r2, r3, #24
 8015110:	d410      	bmi.n	8015134 <__swhatbuf_r+0x40>
 8015112:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015116:	e00e      	b.n	8015136 <__swhatbuf_r+0x42>
 8015118:	466a      	mov	r2, sp
 801511a:	f000 f8eb 	bl	80152f4 <_fstat_r>
 801511e:	2800      	cmp	r0, #0
 8015120:	dbf1      	blt.n	8015106 <__swhatbuf_r+0x12>
 8015122:	9a01      	ldr	r2, [sp, #4]
 8015124:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8015128:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801512c:	425a      	negs	r2, r3
 801512e:	415a      	adcs	r2, r3
 8015130:	602a      	str	r2, [r5, #0]
 8015132:	e7ee      	b.n	8015112 <__swhatbuf_r+0x1e>
 8015134:	2340      	movs	r3, #64	; 0x40
 8015136:	2000      	movs	r0, #0
 8015138:	6023      	str	r3, [r4, #0]
 801513a:	b016      	add	sp, #88	; 0x58
 801513c:	bd70      	pop	{r4, r5, r6, pc}
	...

08015140 <__smakebuf_r>:
 8015140:	898b      	ldrh	r3, [r1, #12]
 8015142:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015144:	079d      	lsls	r5, r3, #30
 8015146:	4606      	mov	r6, r0
 8015148:	460c      	mov	r4, r1
 801514a:	d507      	bpl.n	801515c <__smakebuf_r+0x1c>
 801514c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8015150:	6023      	str	r3, [r4, #0]
 8015152:	6123      	str	r3, [r4, #16]
 8015154:	2301      	movs	r3, #1
 8015156:	6163      	str	r3, [r4, #20]
 8015158:	b002      	add	sp, #8
 801515a:	bd70      	pop	{r4, r5, r6, pc}
 801515c:	ab01      	add	r3, sp, #4
 801515e:	466a      	mov	r2, sp
 8015160:	f7ff ffc8 	bl	80150f4 <__swhatbuf_r>
 8015164:	9900      	ldr	r1, [sp, #0]
 8015166:	4605      	mov	r5, r0
 8015168:	4630      	mov	r0, r6
 801516a:	f7fe fdc1 	bl	8013cf0 <_malloc_r>
 801516e:	b948      	cbnz	r0, 8015184 <__smakebuf_r+0x44>
 8015170:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015174:	059a      	lsls	r2, r3, #22
 8015176:	d4ef      	bmi.n	8015158 <__smakebuf_r+0x18>
 8015178:	f023 0303 	bic.w	r3, r3, #3
 801517c:	f043 0302 	orr.w	r3, r3, #2
 8015180:	81a3      	strh	r3, [r4, #12]
 8015182:	e7e3      	b.n	801514c <__smakebuf_r+0xc>
 8015184:	4b0d      	ldr	r3, [pc, #52]	; (80151bc <__smakebuf_r+0x7c>)
 8015186:	62b3      	str	r3, [r6, #40]	; 0x28
 8015188:	89a3      	ldrh	r3, [r4, #12]
 801518a:	6020      	str	r0, [r4, #0]
 801518c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015190:	81a3      	strh	r3, [r4, #12]
 8015192:	9b00      	ldr	r3, [sp, #0]
 8015194:	6163      	str	r3, [r4, #20]
 8015196:	9b01      	ldr	r3, [sp, #4]
 8015198:	6120      	str	r0, [r4, #16]
 801519a:	b15b      	cbz	r3, 80151b4 <__smakebuf_r+0x74>
 801519c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80151a0:	4630      	mov	r0, r6
 80151a2:	f000 f8b9 	bl	8015318 <_isatty_r>
 80151a6:	b128      	cbz	r0, 80151b4 <__smakebuf_r+0x74>
 80151a8:	89a3      	ldrh	r3, [r4, #12]
 80151aa:	f023 0303 	bic.w	r3, r3, #3
 80151ae:	f043 0301 	orr.w	r3, r3, #1
 80151b2:	81a3      	strh	r3, [r4, #12]
 80151b4:	89a0      	ldrh	r0, [r4, #12]
 80151b6:	4305      	orrs	r5, r0
 80151b8:	81a5      	strh	r5, [r4, #12]
 80151ba:	e7cd      	b.n	8015158 <__smakebuf_r+0x18>
 80151bc:	08014f4d 	.word	0x08014f4d

080151c0 <memmove>:
 80151c0:	4288      	cmp	r0, r1
 80151c2:	b510      	push	{r4, lr}
 80151c4:	eb01 0402 	add.w	r4, r1, r2
 80151c8:	d902      	bls.n	80151d0 <memmove+0x10>
 80151ca:	4284      	cmp	r4, r0
 80151cc:	4623      	mov	r3, r4
 80151ce:	d807      	bhi.n	80151e0 <memmove+0x20>
 80151d0:	1e43      	subs	r3, r0, #1
 80151d2:	42a1      	cmp	r1, r4
 80151d4:	d008      	beq.n	80151e8 <memmove+0x28>
 80151d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80151da:	f803 2f01 	strb.w	r2, [r3, #1]!
 80151de:	e7f8      	b.n	80151d2 <memmove+0x12>
 80151e0:	4402      	add	r2, r0
 80151e2:	4601      	mov	r1, r0
 80151e4:	428a      	cmp	r2, r1
 80151e6:	d100      	bne.n	80151ea <memmove+0x2a>
 80151e8:	bd10      	pop	{r4, pc}
 80151ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80151ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80151f2:	e7f7      	b.n	80151e4 <memmove+0x24>

080151f4 <__malloc_lock>:
 80151f4:	4801      	ldr	r0, [pc, #4]	; (80151fc <__malloc_lock+0x8>)
 80151f6:	f7ff bf7b 	b.w	80150f0 <__retarget_lock_acquire_recursive>
 80151fa:	bf00      	nop
 80151fc:	2000a198 	.word	0x2000a198

08015200 <__malloc_unlock>:
 8015200:	4801      	ldr	r0, [pc, #4]	; (8015208 <__malloc_unlock+0x8>)
 8015202:	f7ff bf76 	b.w	80150f2 <__retarget_lock_release_recursive>
 8015206:	bf00      	nop
 8015208:	2000a198 	.word	0x2000a198

0801520c <_realloc_r>:
 801520c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015210:	4680      	mov	r8, r0
 8015212:	4614      	mov	r4, r2
 8015214:	460e      	mov	r6, r1
 8015216:	b921      	cbnz	r1, 8015222 <_realloc_r+0x16>
 8015218:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801521c:	4611      	mov	r1, r2
 801521e:	f7fe bd67 	b.w	8013cf0 <_malloc_r>
 8015222:	b92a      	cbnz	r2, 8015230 <_realloc_r+0x24>
 8015224:	f7fe fcf8 	bl	8013c18 <_free_r>
 8015228:	4625      	mov	r5, r4
 801522a:	4628      	mov	r0, r5
 801522c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015230:	f000 f882 	bl	8015338 <_malloc_usable_size_r>
 8015234:	4284      	cmp	r4, r0
 8015236:	4607      	mov	r7, r0
 8015238:	d802      	bhi.n	8015240 <_realloc_r+0x34>
 801523a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801523e:	d812      	bhi.n	8015266 <_realloc_r+0x5a>
 8015240:	4621      	mov	r1, r4
 8015242:	4640      	mov	r0, r8
 8015244:	f7fe fd54 	bl	8013cf0 <_malloc_r>
 8015248:	4605      	mov	r5, r0
 801524a:	2800      	cmp	r0, #0
 801524c:	d0ed      	beq.n	801522a <_realloc_r+0x1e>
 801524e:	42bc      	cmp	r4, r7
 8015250:	4622      	mov	r2, r4
 8015252:	4631      	mov	r1, r6
 8015254:	bf28      	it	cs
 8015256:	463a      	movcs	r2, r7
 8015258:	f7fa ff60 	bl	801011c <memcpy>
 801525c:	4631      	mov	r1, r6
 801525e:	4640      	mov	r0, r8
 8015260:	f7fe fcda 	bl	8013c18 <_free_r>
 8015264:	e7e1      	b.n	801522a <_realloc_r+0x1e>
 8015266:	4635      	mov	r5, r6
 8015268:	e7df      	b.n	801522a <_realloc_r+0x1e>

0801526a <_raise_r>:
 801526a:	291f      	cmp	r1, #31
 801526c:	b538      	push	{r3, r4, r5, lr}
 801526e:	4604      	mov	r4, r0
 8015270:	460d      	mov	r5, r1
 8015272:	d904      	bls.n	801527e <_raise_r+0x14>
 8015274:	2316      	movs	r3, #22
 8015276:	6003      	str	r3, [r0, #0]
 8015278:	f04f 30ff 	mov.w	r0, #4294967295
 801527c:	bd38      	pop	{r3, r4, r5, pc}
 801527e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8015280:	b112      	cbz	r2, 8015288 <_raise_r+0x1e>
 8015282:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8015286:	b94b      	cbnz	r3, 801529c <_raise_r+0x32>
 8015288:	4620      	mov	r0, r4
 801528a:	f000 f831 	bl	80152f0 <_getpid_r>
 801528e:	462a      	mov	r2, r5
 8015290:	4601      	mov	r1, r0
 8015292:	4620      	mov	r0, r4
 8015294:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015298:	f000 b818 	b.w	80152cc <_kill_r>
 801529c:	2b01      	cmp	r3, #1
 801529e:	d00a      	beq.n	80152b6 <_raise_r+0x4c>
 80152a0:	1c59      	adds	r1, r3, #1
 80152a2:	d103      	bne.n	80152ac <_raise_r+0x42>
 80152a4:	2316      	movs	r3, #22
 80152a6:	6003      	str	r3, [r0, #0]
 80152a8:	2001      	movs	r0, #1
 80152aa:	e7e7      	b.n	801527c <_raise_r+0x12>
 80152ac:	2400      	movs	r4, #0
 80152ae:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80152b2:	4628      	mov	r0, r5
 80152b4:	4798      	blx	r3
 80152b6:	2000      	movs	r0, #0
 80152b8:	e7e0      	b.n	801527c <_raise_r+0x12>
	...

080152bc <raise>:
 80152bc:	4b02      	ldr	r3, [pc, #8]	; (80152c8 <raise+0xc>)
 80152be:	4601      	mov	r1, r0
 80152c0:	6818      	ldr	r0, [r3, #0]
 80152c2:	f7ff bfd2 	b.w	801526a <_raise_r>
 80152c6:	bf00      	nop
 80152c8:	2000038c 	.word	0x2000038c

080152cc <_kill_r>:
 80152cc:	b538      	push	{r3, r4, r5, lr}
 80152ce:	4d07      	ldr	r5, [pc, #28]	; (80152ec <_kill_r+0x20>)
 80152d0:	2300      	movs	r3, #0
 80152d2:	4604      	mov	r4, r0
 80152d4:	4608      	mov	r0, r1
 80152d6:	4611      	mov	r1, r2
 80152d8:	602b      	str	r3, [r5, #0]
 80152da:	f7ed fdbf 	bl	8002e5c <_kill>
 80152de:	1c43      	adds	r3, r0, #1
 80152e0:	d102      	bne.n	80152e8 <_kill_r+0x1c>
 80152e2:	682b      	ldr	r3, [r5, #0]
 80152e4:	b103      	cbz	r3, 80152e8 <_kill_r+0x1c>
 80152e6:	6023      	str	r3, [r4, #0]
 80152e8:	bd38      	pop	{r3, r4, r5, pc}
 80152ea:	bf00      	nop
 80152ec:	2000a194 	.word	0x2000a194

080152f0 <_getpid_r>:
 80152f0:	f7ed bdac 	b.w	8002e4c <_getpid>

080152f4 <_fstat_r>:
 80152f4:	b538      	push	{r3, r4, r5, lr}
 80152f6:	4d07      	ldr	r5, [pc, #28]	; (8015314 <_fstat_r+0x20>)
 80152f8:	2300      	movs	r3, #0
 80152fa:	4604      	mov	r4, r0
 80152fc:	4608      	mov	r0, r1
 80152fe:	4611      	mov	r1, r2
 8015300:	602b      	str	r3, [r5, #0]
 8015302:	f7ed fe0a 	bl	8002f1a <_fstat>
 8015306:	1c43      	adds	r3, r0, #1
 8015308:	d102      	bne.n	8015310 <_fstat_r+0x1c>
 801530a:	682b      	ldr	r3, [r5, #0]
 801530c:	b103      	cbz	r3, 8015310 <_fstat_r+0x1c>
 801530e:	6023      	str	r3, [r4, #0]
 8015310:	bd38      	pop	{r3, r4, r5, pc}
 8015312:	bf00      	nop
 8015314:	2000a194 	.word	0x2000a194

08015318 <_isatty_r>:
 8015318:	b538      	push	{r3, r4, r5, lr}
 801531a:	4d06      	ldr	r5, [pc, #24]	; (8015334 <_isatty_r+0x1c>)
 801531c:	2300      	movs	r3, #0
 801531e:	4604      	mov	r4, r0
 8015320:	4608      	mov	r0, r1
 8015322:	602b      	str	r3, [r5, #0]
 8015324:	f7ed fe09 	bl	8002f3a <_isatty>
 8015328:	1c43      	adds	r3, r0, #1
 801532a:	d102      	bne.n	8015332 <_isatty_r+0x1a>
 801532c:	682b      	ldr	r3, [r5, #0]
 801532e:	b103      	cbz	r3, 8015332 <_isatty_r+0x1a>
 8015330:	6023      	str	r3, [r4, #0]
 8015332:	bd38      	pop	{r3, r4, r5, pc}
 8015334:	2000a194 	.word	0x2000a194

08015338 <_malloc_usable_size_r>:
 8015338:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801533c:	1f18      	subs	r0, r3, #4
 801533e:	2b00      	cmp	r3, #0
 8015340:	bfbc      	itt	lt
 8015342:	580b      	ldrlt	r3, [r1, r0]
 8015344:	18c0      	addlt	r0, r0, r3
 8015346:	4770      	bx	lr

08015348 <pow>:
 8015348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801534a:	ed2d 8b02 	vpush	{d8}
 801534e:	eeb0 8a40 	vmov.f32	s16, s0
 8015352:	eef0 8a60 	vmov.f32	s17, s1
 8015356:	ec55 4b11 	vmov	r4, r5, d1
 801535a:	f000 f891 	bl	8015480 <__ieee754_pow>
 801535e:	4622      	mov	r2, r4
 8015360:	462b      	mov	r3, r5
 8015362:	4620      	mov	r0, r4
 8015364:	4629      	mov	r1, r5
 8015366:	ec57 6b10 	vmov	r6, r7, d0
 801536a:	f7eb fc0f 	bl	8000b8c <__aeabi_dcmpun>
 801536e:	2800      	cmp	r0, #0
 8015370:	d13b      	bne.n	80153ea <pow+0xa2>
 8015372:	ec51 0b18 	vmov	r0, r1, d8
 8015376:	2200      	movs	r2, #0
 8015378:	2300      	movs	r3, #0
 801537a:	f7eb fbd5 	bl	8000b28 <__aeabi_dcmpeq>
 801537e:	b1b8      	cbz	r0, 80153b0 <pow+0x68>
 8015380:	2200      	movs	r2, #0
 8015382:	2300      	movs	r3, #0
 8015384:	4620      	mov	r0, r4
 8015386:	4629      	mov	r1, r5
 8015388:	f7eb fbce 	bl	8000b28 <__aeabi_dcmpeq>
 801538c:	2800      	cmp	r0, #0
 801538e:	d146      	bne.n	801541e <pow+0xd6>
 8015390:	ec45 4b10 	vmov	d0, r4, r5
 8015394:	f000 fe8d 	bl	80160b2 <finite>
 8015398:	b338      	cbz	r0, 80153ea <pow+0xa2>
 801539a:	2200      	movs	r2, #0
 801539c:	2300      	movs	r3, #0
 801539e:	4620      	mov	r0, r4
 80153a0:	4629      	mov	r1, r5
 80153a2:	f7eb fbcb 	bl	8000b3c <__aeabi_dcmplt>
 80153a6:	b300      	cbz	r0, 80153ea <pow+0xa2>
 80153a8:	f7fa fe8e 	bl	80100c8 <__errno>
 80153ac:	2322      	movs	r3, #34	; 0x22
 80153ae:	e01b      	b.n	80153e8 <pow+0xa0>
 80153b0:	ec47 6b10 	vmov	d0, r6, r7
 80153b4:	f000 fe7d 	bl	80160b2 <finite>
 80153b8:	b9e0      	cbnz	r0, 80153f4 <pow+0xac>
 80153ba:	eeb0 0a48 	vmov.f32	s0, s16
 80153be:	eef0 0a68 	vmov.f32	s1, s17
 80153c2:	f000 fe76 	bl	80160b2 <finite>
 80153c6:	b1a8      	cbz	r0, 80153f4 <pow+0xac>
 80153c8:	ec45 4b10 	vmov	d0, r4, r5
 80153cc:	f000 fe71 	bl	80160b2 <finite>
 80153d0:	b180      	cbz	r0, 80153f4 <pow+0xac>
 80153d2:	4632      	mov	r2, r6
 80153d4:	463b      	mov	r3, r7
 80153d6:	4630      	mov	r0, r6
 80153d8:	4639      	mov	r1, r7
 80153da:	f7eb fbd7 	bl	8000b8c <__aeabi_dcmpun>
 80153de:	2800      	cmp	r0, #0
 80153e0:	d0e2      	beq.n	80153a8 <pow+0x60>
 80153e2:	f7fa fe71 	bl	80100c8 <__errno>
 80153e6:	2321      	movs	r3, #33	; 0x21
 80153e8:	6003      	str	r3, [r0, #0]
 80153ea:	ecbd 8b02 	vpop	{d8}
 80153ee:	ec47 6b10 	vmov	d0, r6, r7
 80153f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80153f4:	2200      	movs	r2, #0
 80153f6:	2300      	movs	r3, #0
 80153f8:	4630      	mov	r0, r6
 80153fa:	4639      	mov	r1, r7
 80153fc:	f7eb fb94 	bl	8000b28 <__aeabi_dcmpeq>
 8015400:	2800      	cmp	r0, #0
 8015402:	d0f2      	beq.n	80153ea <pow+0xa2>
 8015404:	eeb0 0a48 	vmov.f32	s0, s16
 8015408:	eef0 0a68 	vmov.f32	s1, s17
 801540c:	f000 fe51 	bl	80160b2 <finite>
 8015410:	2800      	cmp	r0, #0
 8015412:	d0ea      	beq.n	80153ea <pow+0xa2>
 8015414:	ec45 4b10 	vmov	d0, r4, r5
 8015418:	f000 fe4b 	bl	80160b2 <finite>
 801541c:	e7c3      	b.n	80153a6 <pow+0x5e>
 801541e:	4f01      	ldr	r7, [pc, #4]	; (8015424 <pow+0xdc>)
 8015420:	2600      	movs	r6, #0
 8015422:	e7e2      	b.n	80153ea <pow+0xa2>
 8015424:	3ff00000 	.word	0x3ff00000

08015428 <sqrt>:
 8015428:	b538      	push	{r3, r4, r5, lr}
 801542a:	ed2d 8b02 	vpush	{d8}
 801542e:	ec55 4b10 	vmov	r4, r5, d0
 8015432:	f000 fd53 	bl	8015edc <__ieee754_sqrt>
 8015436:	4622      	mov	r2, r4
 8015438:	462b      	mov	r3, r5
 801543a:	4620      	mov	r0, r4
 801543c:	4629      	mov	r1, r5
 801543e:	eeb0 8a40 	vmov.f32	s16, s0
 8015442:	eef0 8a60 	vmov.f32	s17, s1
 8015446:	f7eb fba1 	bl	8000b8c <__aeabi_dcmpun>
 801544a:	b990      	cbnz	r0, 8015472 <sqrt+0x4a>
 801544c:	2200      	movs	r2, #0
 801544e:	2300      	movs	r3, #0
 8015450:	4620      	mov	r0, r4
 8015452:	4629      	mov	r1, r5
 8015454:	f7eb fb72 	bl	8000b3c <__aeabi_dcmplt>
 8015458:	b158      	cbz	r0, 8015472 <sqrt+0x4a>
 801545a:	f7fa fe35 	bl	80100c8 <__errno>
 801545e:	2321      	movs	r3, #33	; 0x21
 8015460:	6003      	str	r3, [r0, #0]
 8015462:	2200      	movs	r2, #0
 8015464:	2300      	movs	r3, #0
 8015466:	4610      	mov	r0, r2
 8015468:	4619      	mov	r1, r3
 801546a:	f7eb fa1f 	bl	80008ac <__aeabi_ddiv>
 801546e:	ec41 0b18 	vmov	d8, r0, r1
 8015472:	eeb0 0a48 	vmov.f32	s0, s16
 8015476:	eef0 0a68 	vmov.f32	s1, s17
 801547a:	ecbd 8b02 	vpop	{d8}
 801547e:	bd38      	pop	{r3, r4, r5, pc}

08015480 <__ieee754_pow>:
 8015480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015484:	ed2d 8b06 	vpush	{d8-d10}
 8015488:	b089      	sub	sp, #36	; 0x24
 801548a:	ed8d 1b00 	vstr	d1, [sp]
 801548e:	e9dd 2900 	ldrd	r2, r9, [sp]
 8015492:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8015496:	ea58 0102 	orrs.w	r1, r8, r2
 801549a:	ec57 6b10 	vmov	r6, r7, d0
 801549e:	d115      	bne.n	80154cc <__ieee754_pow+0x4c>
 80154a0:	19b3      	adds	r3, r6, r6
 80154a2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 80154a6:	4152      	adcs	r2, r2
 80154a8:	4299      	cmp	r1, r3
 80154aa:	4b89      	ldr	r3, [pc, #548]	; (80156d0 <__ieee754_pow+0x250>)
 80154ac:	4193      	sbcs	r3, r2
 80154ae:	f080 84d2 	bcs.w	8015e56 <__ieee754_pow+0x9d6>
 80154b2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80154b6:	4630      	mov	r0, r6
 80154b8:	4639      	mov	r1, r7
 80154ba:	f7ea ff17 	bl	80002ec <__adddf3>
 80154be:	ec41 0b10 	vmov	d0, r0, r1
 80154c2:	b009      	add	sp, #36	; 0x24
 80154c4:	ecbd 8b06 	vpop	{d8-d10}
 80154c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80154cc:	4b81      	ldr	r3, [pc, #516]	; (80156d4 <__ieee754_pow+0x254>)
 80154ce:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80154d2:	429c      	cmp	r4, r3
 80154d4:	ee10 aa10 	vmov	sl, s0
 80154d8:	463d      	mov	r5, r7
 80154da:	dc06      	bgt.n	80154ea <__ieee754_pow+0x6a>
 80154dc:	d101      	bne.n	80154e2 <__ieee754_pow+0x62>
 80154de:	2e00      	cmp	r6, #0
 80154e0:	d1e7      	bne.n	80154b2 <__ieee754_pow+0x32>
 80154e2:	4598      	cmp	r8, r3
 80154e4:	dc01      	bgt.n	80154ea <__ieee754_pow+0x6a>
 80154e6:	d10f      	bne.n	8015508 <__ieee754_pow+0x88>
 80154e8:	b172      	cbz	r2, 8015508 <__ieee754_pow+0x88>
 80154ea:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 80154ee:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 80154f2:	ea55 050a 	orrs.w	r5, r5, sl
 80154f6:	d1dc      	bne.n	80154b2 <__ieee754_pow+0x32>
 80154f8:	e9dd 3200 	ldrd	r3, r2, [sp]
 80154fc:	18db      	adds	r3, r3, r3
 80154fe:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8015502:	4152      	adcs	r2, r2
 8015504:	429d      	cmp	r5, r3
 8015506:	e7d0      	b.n	80154aa <__ieee754_pow+0x2a>
 8015508:	2d00      	cmp	r5, #0
 801550a:	da3b      	bge.n	8015584 <__ieee754_pow+0x104>
 801550c:	4b72      	ldr	r3, [pc, #456]	; (80156d8 <__ieee754_pow+0x258>)
 801550e:	4598      	cmp	r8, r3
 8015510:	dc51      	bgt.n	80155b6 <__ieee754_pow+0x136>
 8015512:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8015516:	4598      	cmp	r8, r3
 8015518:	f340 84ac 	ble.w	8015e74 <__ieee754_pow+0x9f4>
 801551c:	ea4f 5328 	mov.w	r3, r8, asr #20
 8015520:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8015524:	2b14      	cmp	r3, #20
 8015526:	dd0f      	ble.n	8015548 <__ieee754_pow+0xc8>
 8015528:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 801552c:	fa22 f103 	lsr.w	r1, r2, r3
 8015530:	fa01 f303 	lsl.w	r3, r1, r3
 8015534:	4293      	cmp	r3, r2
 8015536:	f040 849d 	bne.w	8015e74 <__ieee754_pow+0x9f4>
 801553a:	f001 0101 	and.w	r1, r1, #1
 801553e:	f1c1 0302 	rsb	r3, r1, #2
 8015542:	9304      	str	r3, [sp, #16]
 8015544:	b182      	cbz	r2, 8015568 <__ieee754_pow+0xe8>
 8015546:	e05f      	b.n	8015608 <__ieee754_pow+0x188>
 8015548:	2a00      	cmp	r2, #0
 801554a:	d15b      	bne.n	8015604 <__ieee754_pow+0x184>
 801554c:	f1c3 0314 	rsb	r3, r3, #20
 8015550:	fa48 f103 	asr.w	r1, r8, r3
 8015554:	fa01 f303 	lsl.w	r3, r1, r3
 8015558:	4543      	cmp	r3, r8
 801555a:	f040 8488 	bne.w	8015e6e <__ieee754_pow+0x9ee>
 801555e:	f001 0101 	and.w	r1, r1, #1
 8015562:	f1c1 0302 	rsb	r3, r1, #2
 8015566:	9304      	str	r3, [sp, #16]
 8015568:	4b5c      	ldr	r3, [pc, #368]	; (80156dc <__ieee754_pow+0x25c>)
 801556a:	4598      	cmp	r8, r3
 801556c:	d132      	bne.n	80155d4 <__ieee754_pow+0x154>
 801556e:	f1b9 0f00 	cmp.w	r9, #0
 8015572:	f280 8478 	bge.w	8015e66 <__ieee754_pow+0x9e6>
 8015576:	4959      	ldr	r1, [pc, #356]	; (80156dc <__ieee754_pow+0x25c>)
 8015578:	4632      	mov	r2, r6
 801557a:	463b      	mov	r3, r7
 801557c:	2000      	movs	r0, #0
 801557e:	f7eb f995 	bl	80008ac <__aeabi_ddiv>
 8015582:	e79c      	b.n	80154be <__ieee754_pow+0x3e>
 8015584:	2300      	movs	r3, #0
 8015586:	9304      	str	r3, [sp, #16]
 8015588:	2a00      	cmp	r2, #0
 801558a:	d13d      	bne.n	8015608 <__ieee754_pow+0x188>
 801558c:	4b51      	ldr	r3, [pc, #324]	; (80156d4 <__ieee754_pow+0x254>)
 801558e:	4598      	cmp	r8, r3
 8015590:	d1ea      	bne.n	8015568 <__ieee754_pow+0xe8>
 8015592:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8015596:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801559a:	ea53 030a 	orrs.w	r3, r3, sl
 801559e:	f000 845a 	beq.w	8015e56 <__ieee754_pow+0x9d6>
 80155a2:	4b4f      	ldr	r3, [pc, #316]	; (80156e0 <__ieee754_pow+0x260>)
 80155a4:	429c      	cmp	r4, r3
 80155a6:	dd08      	ble.n	80155ba <__ieee754_pow+0x13a>
 80155a8:	f1b9 0f00 	cmp.w	r9, #0
 80155ac:	f2c0 8457 	blt.w	8015e5e <__ieee754_pow+0x9de>
 80155b0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80155b4:	e783      	b.n	80154be <__ieee754_pow+0x3e>
 80155b6:	2302      	movs	r3, #2
 80155b8:	e7e5      	b.n	8015586 <__ieee754_pow+0x106>
 80155ba:	f1b9 0f00 	cmp.w	r9, #0
 80155be:	f04f 0000 	mov.w	r0, #0
 80155c2:	f04f 0100 	mov.w	r1, #0
 80155c6:	f6bf af7a 	bge.w	80154be <__ieee754_pow+0x3e>
 80155ca:	e9dd 0300 	ldrd	r0, r3, [sp]
 80155ce:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80155d2:	e774      	b.n	80154be <__ieee754_pow+0x3e>
 80155d4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80155d8:	d106      	bne.n	80155e8 <__ieee754_pow+0x168>
 80155da:	4632      	mov	r2, r6
 80155dc:	463b      	mov	r3, r7
 80155de:	4630      	mov	r0, r6
 80155e0:	4639      	mov	r1, r7
 80155e2:	f7eb f839 	bl	8000658 <__aeabi_dmul>
 80155e6:	e76a      	b.n	80154be <__ieee754_pow+0x3e>
 80155e8:	4b3e      	ldr	r3, [pc, #248]	; (80156e4 <__ieee754_pow+0x264>)
 80155ea:	4599      	cmp	r9, r3
 80155ec:	d10c      	bne.n	8015608 <__ieee754_pow+0x188>
 80155ee:	2d00      	cmp	r5, #0
 80155f0:	db0a      	blt.n	8015608 <__ieee754_pow+0x188>
 80155f2:	ec47 6b10 	vmov	d0, r6, r7
 80155f6:	b009      	add	sp, #36	; 0x24
 80155f8:	ecbd 8b06 	vpop	{d8-d10}
 80155fc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015600:	f000 bc6c 	b.w	8015edc <__ieee754_sqrt>
 8015604:	2300      	movs	r3, #0
 8015606:	9304      	str	r3, [sp, #16]
 8015608:	ec47 6b10 	vmov	d0, r6, r7
 801560c:	f000 fd48 	bl	80160a0 <fabs>
 8015610:	ec51 0b10 	vmov	r0, r1, d0
 8015614:	f1ba 0f00 	cmp.w	sl, #0
 8015618:	d129      	bne.n	801566e <__ieee754_pow+0x1ee>
 801561a:	b124      	cbz	r4, 8015626 <__ieee754_pow+0x1a6>
 801561c:	4b2f      	ldr	r3, [pc, #188]	; (80156dc <__ieee754_pow+0x25c>)
 801561e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8015622:	429a      	cmp	r2, r3
 8015624:	d123      	bne.n	801566e <__ieee754_pow+0x1ee>
 8015626:	f1b9 0f00 	cmp.w	r9, #0
 801562a:	da05      	bge.n	8015638 <__ieee754_pow+0x1b8>
 801562c:	4602      	mov	r2, r0
 801562e:	460b      	mov	r3, r1
 8015630:	2000      	movs	r0, #0
 8015632:	492a      	ldr	r1, [pc, #168]	; (80156dc <__ieee754_pow+0x25c>)
 8015634:	f7eb f93a 	bl	80008ac <__aeabi_ddiv>
 8015638:	2d00      	cmp	r5, #0
 801563a:	f6bf af40 	bge.w	80154be <__ieee754_pow+0x3e>
 801563e:	9b04      	ldr	r3, [sp, #16]
 8015640:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8015644:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8015648:	4323      	orrs	r3, r4
 801564a:	d108      	bne.n	801565e <__ieee754_pow+0x1de>
 801564c:	4602      	mov	r2, r0
 801564e:	460b      	mov	r3, r1
 8015650:	4610      	mov	r0, r2
 8015652:	4619      	mov	r1, r3
 8015654:	f7ea fe48 	bl	80002e8 <__aeabi_dsub>
 8015658:	4602      	mov	r2, r0
 801565a:	460b      	mov	r3, r1
 801565c:	e78f      	b.n	801557e <__ieee754_pow+0xfe>
 801565e:	9b04      	ldr	r3, [sp, #16]
 8015660:	2b01      	cmp	r3, #1
 8015662:	f47f af2c 	bne.w	80154be <__ieee754_pow+0x3e>
 8015666:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801566a:	4619      	mov	r1, r3
 801566c:	e727      	b.n	80154be <__ieee754_pow+0x3e>
 801566e:	0feb      	lsrs	r3, r5, #31
 8015670:	3b01      	subs	r3, #1
 8015672:	9306      	str	r3, [sp, #24]
 8015674:	9a06      	ldr	r2, [sp, #24]
 8015676:	9b04      	ldr	r3, [sp, #16]
 8015678:	4313      	orrs	r3, r2
 801567a:	d102      	bne.n	8015682 <__ieee754_pow+0x202>
 801567c:	4632      	mov	r2, r6
 801567e:	463b      	mov	r3, r7
 8015680:	e7e6      	b.n	8015650 <__ieee754_pow+0x1d0>
 8015682:	4b19      	ldr	r3, [pc, #100]	; (80156e8 <__ieee754_pow+0x268>)
 8015684:	4598      	cmp	r8, r3
 8015686:	f340 80fb 	ble.w	8015880 <__ieee754_pow+0x400>
 801568a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 801568e:	4598      	cmp	r8, r3
 8015690:	4b13      	ldr	r3, [pc, #76]	; (80156e0 <__ieee754_pow+0x260>)
 8015692:	dd0c      	ble.n	80156ae <__ieee754_pow+0x22e>
 8015694:	429c      	cmp	r4, r3
 8015696:	dc0f      	bgt.n	80156b8 <__ieee754_pow+0x238>
 8015698:	f1b9 0f00 	cmp.w	r9, #0
 801569c:	da0f      	bge.n	80156be <__ieee754_pow+0x23e>
 801569e:	2000      	movs	r0, #0
 80156a0:	b009      	add	sp, #36	; 0x24
 80156a2:	ecbd 8b06 	vpop	{d8-d10}
 80156a6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80156aa:	f000 bcf0 	b.w	801608e <__math_oflow>
 80156ae:	429c      	cmp	r4, r3
 80156b0:	dbf2      	blt.n	8015698 <__ieee754_pow+0x218>
 80156b2:	4b0a      	ldr	r3, [pc, #40]	; (80156dc <__ieee754_pow+0x25c>)
 80156b4:	429c      	cmp	r4, r3
 80156b6:	dd19      	ble.n	80156ec <__ieee754_pow+0x26c>
 80156b8:	f1b9 0f00 	cmp.w	r9, #0
 80156bc:	dcef      	bgt.n	801569e <__ieee754_pow+0x21e>
 80156be:	2000      	movs	r0, #0
 80156c0:	b009      	add	sp, #36	; 0x24
 80156c2:	ecbd 8b06 	vpop	{d8-d10}
 80156c6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80156ca:	f000 bcd7 	b.w	801607c <__math_uflow>
 80156ce:	bf00      	nop
 80156d0:	fff00000 	.word	0xfff00000
 80156d4:	7ff00000 	.word	0x7ff00000
 80156d8:	433fffff 	.word	0x433fffff
 80156dc:	3ff00000 	.word	0x3ff00000
 80156e0:	3fefffff 	.word	0x3fefffff
 80156e4:	3fe00000 	.word	0x3fe00000
 80156e8:	41e00000 	.word	0x41e00000
 80156ec:	4b60      	ldr	r3, [pc, #384]	; (8015870 <__ieee754_pow+0x3f0>)
 80156ee:	2200      	movs	r2, #0
 80156f0:	f7ea fdfa 	bl	80002e8 <__aeabi_dsub>
 80156f4:	a354      	add	r3, pc, #336	; (adr r3, 8015848 <__ieee754_pow+0x3c8>)
 80156f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80156fa:	4604      	mov	r4, r0
 80156fc:	460d      	mov	r5, r1
 80156fe:	f7ea ffab 	bl	8000658 <__aeabi_dmul>
 8015702:	a353      	add	r3, pc, #332	; (adr r3, 8015850 <__ieee754_pow+0x3d0>)
 8015704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015708:	4606      	mov	r6, r0
 801570a:	460f      	mov	r7, r1
 801570c:	4620      	mov	r0, r4
 801570e:	4629      	mov	r1, r5
 8015710:	f7ea ffa2 	bl	8000658 <__aeabi_dmul>
 8015714:	4b57      	ldr	r3, [pc, #348]	; (8015874 <__ieee754_pow+0x3f4>)
 8015716:	4682      	mov	sl, r0
 8015718:	468b      	mov	fp, r1
 801571a:	2200      	movs	r2, #0
 801571c:	4620      	mov	r0, r4
 801571e:	4629      	mov	r1, r5
 8015720:	f7ea ff9a 	bl	8000658 <__aeabi_dmul>
 8015724:	4602      	mov	r2, r0
 8015726:	460b      	mov	r3, r1
 8015728:	a14b      	add	r1, pc, #300	; (adr r1, 8015858 <__ieee754_pow+0x3d8>)
 801572a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801572e:	f7ea fddb 	bl	80002e8 <__aeabi_dsub>
 8015732:	4622      	mov	r2, r4
 8015734:	462b      	mov	r3, r5
 8015736:	f7ea ff8f 	bl	8000658 <__aeabi_dmul>
 801573a:	4602      	mov	r2, r0
 801573c:	460b      	mov	r3, r1
 801573e:	2000      	movs	r0, #0
 8015740:	494d      	ldr	r1, [pc, #308]	; (8015878 <__ieee754_pow+0x3f8>)
 8015742:	f7ea fdd1 	bl	80002e8 <__aeabi_dsub>
 8015746:	4622      	mov	r2, r4
 8015748:	4680      	mov	r8, r0
 801574a:	4689      	mov	r9, r1
 801574c:	462b      	mov	r3, r5
 801574e:	4620      	mov	r0, r4
 8015750:	4629      	mov	r1, r5
 8015752:	f7ea ff81 	bl	8000658 <__aeabi_dmul>
 8015756:	4602      	mov	r2, r0
 8015758:	460b      	mov	r3, r1
 801575a:	4640      	mov	r0, r8
 801575c:	4649      	mov	r1, r9
 801575e:	f7ea ff7b 	bl	8000658 <__aeabi_dmul>
 8015762:	a33f      	add	r3, pc, #252	; (adr r3, 8015860 <__ieee754_pow+0x3e0>)
 8015764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015768:	f7ea ff76 	bl	8000658 <__aeabi_dmul>
 801576c:	4602      	mov	r2, r0
 801576e:	460b      	mov	r3, r1
 8015770:	4650      	mov	r0, sl
 8015772:	4659      	mov	r1, fp
 8015774:	f7ea fdb8 	bl	80002e8 <__aeabi_dsub>
 8015778:	4602      	mov	r2, r0
 801577a:	460b      	mov	r3, r1
 801577c:	4680      	mov	r8, r0
 801577e:	4689      	mov	r9, r1
 8015780:	4630      	mov	r0, r6
 8015782:	4639      	mov	r1, r7
 8015784:	f7ea fdb2 	bl	80002ec <__adddf3>
 8015788:	2000      	movs	r0, #0
 801578a:	4632      	mov	r2, r6
 801578c:	463b      	mov	r3, r7
 801578e:	4604      	mov	r4, r0
 8015790:	460d      	mov	r5, r1
 8015792:	f7ea fda9 	bl	80002e8 <__aeabi_dsub>
 8015796:	4602      	mov	r2, r0
 8015798:	460b      	mov	r3, r1
 801579a:	4640      	mov	r0, r8
 801579c:	4649      	mov	r1, r9
 801579e:	f7ea fda3 	bl	80002e8 <__aeabi_dsub>
 80157a2:	9b04      	ldr	r3, [sp, #16]
 80157a4:	9a06      	ldr	r2, [sp, #24]
 80157a6:	3b01      	subs	r3, #1
 80157a8:	4313      	orrs	r3, r2
 80157aa:	4682      	mov	sl, r0
 80157ac:	468b      	mov	fp, r1
 80157ae:	f040 81e7 	bne.w	8015b80 <__ieee754_pow+0x700>
 80157b2:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8015868 <__ieee754_pow+0x3e8>
 80157b6:	eeb0 8a47 	vmov.f32	s16, s14
 80157ba:	eef0 8a67 	vmov.f32	s17, s15
 80157be:	e9dd 6700 	ldrd	r6, r7, [sp]
 80157c2:	2600      	movs	r6, #0
 80157c4:	4632      	mov	r2, r6
 80157c6:	463b      	mov	r3, r7
 80157c8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80157cc:	f7ea fd8c 	bl	80002e8 <__aeabi_dsub>
 80157d0:	4622      	mov	r2, r4
 80157d2:	462b      	mov	r3, r5
 80157d4:	f7ea ff40 	bl	8000658 <__aeabi_dmul>
 80157d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80157dc:	4680      	mov	r8, r0
 80157de:	4689      	mov	r9, r1
 80157e0:	4650      	mov	r0, sl
 80157e2:	4659      	mov	r1, fp
 80157e4:	f7ea ff38 	bl	8000658 <__aeabi_dmul>
 80157e8:	4602      	mov	r2, r0
 80157ea:	460b      	mov	r3, r1
 80157ec:	4640      	mov	r0, r8
 80157ee:	4649      	mov	r1, r9
 80157f0:	f7ea fd7c 	bl	80002ec <__adddf3>
 80157f4:	4632      	mov	r2, r6
 80157f6:	463b      	mov	r3, r7
 80157f8:	4680      	mov	r8, r0
 80157fa:	4689      	mov	r9, r1
 80157fc:	4620      	mov	r0, r4
 80157fe:	4629      	mov	r1, r5
 8015800:	f7ea ff2a 	bl	8000658 <__aeabi_dmul>
 8015804:	460b      	mov	r3, r1
 8015806:	4604      	mov	r4, r0
 8015808:	460d      	mov	r5, r1
 801580a:	4602      	mov	r2, r0
 801580c:	4649      	mov	r1, r9
 801580e:	4640      	mov	r0, r8
 8015810:	f7ea fd6c 	bl	80002ec <__adddf3>
 8015814:	4b19      	ldr	r3, [pc, #100]	; (801587c <__ieee754_pow+0x3fc>)
 8015816:	4299      	cmp	r1, r3
 8015818:	ec45 4b19 	vmov	d9, r4, r5
 801581c:	4606      	mov	r6, r0
 801581e:	460f      	mov	r7, r1
 8015820:	468b      	mov	fp, r1
 8015822:	f340 82f1 	ble.w	8015e08 <__ieee754_pow+0x988>
 8015826:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 801582a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 801582e:	4303      	orrs	r3, r0
 8015830:	f000 81e4 	beq.w	8015bfc <__ieee754_pow+0x77c>
 8015834:	ec51 0b18 	vmov	r0, r1, d8
 8015838:	2200      	movs	r2, #0
 801583a:	2300      	movs	r3, #0
 801583c:	f7eb f97e 	bl	8000b3c <__aeabi_dcmplt>
 8015840:	3800      	subs	r0, #0
 8015842:	bf18      	it	ne
 8015844:	2001      	movne	r0, #1
 8015846:	e72b      	b.n	80156a0 <__ieee754_pow+0x220>
 8015848:	60000000 	.word	0x60000000
 801584c:	3ff71547 	.word	0x3ff71547
 8015850:	f85ddf44 	.word	0xf85ddf44
 8015854:	3e54ae0b 	.word	0x3e54ae0b
 8015858:	55555555 	.word	0x55555555
 801585c:	3fd55555 	.word	0x3fd55555
 8015860:	652b82fe 	.word	0x652b82fe
 8015864:	3ff71547 	.word	0x3ff71547
 8015868:	00000000 	.word	0x00000000
 801586c:	bff00000 	.word	0xbff00000
 8015870:	3ff00000 	.word	0x3ff00000
 8015874:	3fd00000 	.word	0x3fd00000
 8015878:	3fe00000 	.word	0x3fe00000
 801587c:	408fffff 	.word	0x408fffff
 8015880:	4bd5      	ldr	r3, [pc, #852]	; (8015bd8 <__ieee754_pow+0x758>)
 8015882:	402b      	ands	r3, r5
 8015884:	2200      	movs	r2, #0
 8015886:	b92b      	cbnz	r3, 8015894 <__ieee754_pow+0x414>
 8015888:	4bd4      	ldr	r3, [pc, #848]	; (8015bdc <__ieee754_pow+0x75c>)
 801588a:	f7ea fee5 	bl	8000658 <__aeabi_dmul>
 801588e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8015892:	460c      	mov	r4, r1
 8015894:	1523      	asrs	r3, r4, #20
 8015896:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801589a:	4413      	add	r3, r2
 801589c:	9305      	str	r3, [sp, #20]
 801589e:	4bd0      	ldr	r3, [pc, #832]	; (8015be0 <__ieee754_pow+0x760>)
 80158a0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80158a4:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80158a8:	429c      	cmp	r4, r3
 80158aa:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80158ae:	dd08      	ble.n	80158c2 <__ieee754_pow+0x442>
 80158b0:	4bcc      	ldr	r3, [pc, #816]	; (8015be4 <__ieee754_pow+0x764>)
 80158b2:	429c      	cmp	r4, r3
 80158b4:	f340 8162 	ble.w	8015b7c <__ieee754_pow+0x6fc>
 80158b8:	9b05      	ldr	r3, [sp, #20]
 80158ba:	3301      	adds	r3, #1
 80158bc:	9305      	str	r3, [sp, #20]
 80158be:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80158c2:	2400      	movs	r4, #0
 80158c4:	00e3      	lsls	r3, r4, #3
 80158c6:	9307      	str	r3, [sp, #28]
 80158c8:	4bc7      	ldr	r3, [pc, #796]	; (8015be8 <__ieee754_pow+0x768>)
 80158ca:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80158ce:	ed93 7b00 	vldr	d7, [r3]
 80158d2:	4629      	mov	r1, r5
 80158d4:	ec53 2b17 	vmov	r2, r3, d7
 80158d8:	eeb0 9a47 	vmov.f32	s18, s14
 80158dc:	eef0 9a67 	vmov.f32	s19, s15
 80158e0:	4682      	mov	sl, r0
 80158e2:	f7ea fd01 	bl	80002e8 <__aeabi_dsub>
 80158e6:	4652      	mov	r2, sl
 80158e8:	4606      	mov	r6, r0
 80158ea:	460f      	mov	r7, r1
 80158ec:	462b      	mov	r3, r5
 80158ee:	ec51 0b19 	vmov	r0, r1, d9
 80158f2:	f7ea fcfb 	bl	80002ec <__adddf3>
 80158f6:	4602      	mov	r2, r0
 80158f8:	460b      	mov	r3, r1
 80158fa:	2000      	movs	r0, #0
 80158fc:	49bb      	ldr	r1, [pc, #748]	; (8015bec <__ieee754_pow+0x76c>)
 80158fe:	f7ea ffd5 	bl	80008ac <__aeabi_ddiv>
 8015902:	ec41 0b1a 	vmov	d10, r0, r1
 8015906:	4602      	mov	r2, r0
 8015908:	460b      	mov	r3, r1
 801590a:	4630      	mov	r0, r6
 801590c:	4639      	mov	r1, r7
 801590e:	f7ea fea3 	bl	8000658 <__aeabi_dmul>
 8015912:	2300      	movs	r3, #0
 8015914:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015918:	9302      	str	r3, [sp, #8]
 801591a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801591e:	46ab      	mov	fp, r5
 8015920:	106d      	asrs	r5, r5, #1
 8015922:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8015926:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 801592a:	ec41 0b18 	vmov	d8, r0, r1
 801592e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8015932:	2200      	movs	r2, #0
 8015934:	4640      	mov	r0, r8
 8015936:	4649      	mov	r1, r9
 8015938:	4614      	mov	r4, r2
 801593a:	461d      	mov	r5, r3
 801593c:	f7ea fe8c 	bl	8000658 <__aeabi_dmul>
 8015940:	4602      	mov	r2, r0
 8015942:	460b      	mov	r3, r1
 8015944:	4630      	mov	r0, r6
 8015946:	4639      	mov	r1, r7
 8015948:	f7ea fcce 	bl	80002e8 <__aeabi_dsub>
 801594c:	ec53 2b19 	vmov	r2, r3, d9
 8015950:	4606      	mov	r6, r0
 8015952:	460f      	mov	r7, r1
 8015954:	4620      	mov	r0, r4
 8015956:	4629      	mov	r1, r5
 8015958:	f7ea fcc6 	bl	80002e8 <__aeabi_dsub>
 801595c:	4602      	mov	r2, r0
 801595e:	460b      	mov	r3, r1
 8015960:	4650      	mov	r0, sl
 8015962:	4659      	mov	r1, fp
 8015964:	f7ea fcc0 	bl	80002e8 <__aeabi_dsub>
 8015968:	4642      	mov	r2, r8
 801596a:	464b      	mov	r3, r9
 801596c:	f7ea fe74 	bl	8000658 <__aeabi_dmul>
 8015970:	4602      	mov	r2, r0
 8015972:	460b      	mov	r3, r1
 8015974:	4630      	mov	r0, r6
 8015976:	4639      	mov	r1, r7
 8015978:	f7ea fcb6 	bl	80002e8 <__aeabi_dsub>
 801597c:	ec53 2b1a 	vmov	r2, r3, d10
 8015980:	f7ea fe6a 	bl	8000658 <__aeabi_dmul>
 8015984:	ec53 2b18 	vmov	r2, r3, d8
 8015988:	ec41 0b19 	vmov	d9, r0, r1
 801598c:	ec51 0b18 	vmov	r0, r1, d8
 8015990:	f7ea fe62 	bl	8000658 <__aeabi_dmul>
 8015994:	a37c      	add	r3, pc, #496	; (adr r3, 8015b88 <__ieee754_pow+0x708>)
 8015996:	e9d3 2300 	ldrd	r2, r3, [r3]
 801599a:	4604      	mov	r4, r0
 801599c:	460d      	mov	r5, r1
 801599e:	f7ea fe5b 	bl	8000658 <__aeabi_dmul>
 80159a2:	a37b      	add	r3, pc, #492	; (adr r3, 8015b90 <__ieee754_pow+0x710>)
 80159a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80159a8:	f7ea fca0 	bl	80002ec <__adddf3>
 80159ac:	4622      	mov	r2, r4
 80159ae:	462b      	mov	r3, r5
 80159b0:	f7ea fe52 	bl	8000658 <__aeabi_dmul>
 80159b4:	a378      	add	r3, pc, #480	; (adr r3, 8015b98 <__ieee754_pow+0x718>)
 80159b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80159ba:	f7ea fc97 	bl	80002ec <__adddf3>
 80159be:	4622      	mov	r2, r4
 80159c0:	462b      	mov	r3, r5
 80159c2:	f7ea fe49 	bl	8000658 <__aeabi_dmul>
 80159c6:	a376      	add	r3, pc, #472	; (adr r3, 8015ba0 <__ieee754_pow+0x720>)
 80159c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80159cc:	f7ea fc8e 	bl	80002ec <__adddf3>
 80159d0:	4622      	mov	r2, r4
 80159d2:	462b      	mov	r3, r5
 80159d4:	f7ea fe40 	bl	8000658 <__aeabi_dmul>
 80159d8:	a373      	add	r3, pc, #460	; (adr r3, 8015ba8 <__ieee754_pow+0x728>)
 80159da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80159de:	f7ea fc85 	bl	80002ec <__adddf3>
 80159e2:	4622      	mov	r2, r4
 80159e4:	462b      	mov	r3, r5
 80159e6:	f7ea fe37 	bl	8000658 <__aeabi_dmul>
 80159ea:	a371      	add	r3, pc, #452	; (adr r3, 8015bb0 <__ieee754_pow+0x730>)
 80159ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80159f0:	f7ea fc7c 	bl	80002ec <__adddf3>
 80159f4:	4622      	mov	r2, r4
 80159f6:	4606      	mov	r6, r0
 80159f8:	460f      	mov	r7, r1
 80159fa:	462b      	mov	r3, r5
 80159fc:	4620      	mov	r0, r4
 80159fe:	4629      	mov	r1, r5
 8015a00:	f7ea fe2a 	bl	8000658 <__aeabi_dmul>
 8015a04:	4602      	mov	r2, r0
 8015a06:	460b      	mov	r3, r1
 8015a08:	4630      	mov	r0, r6
 8015a0a:	4639      	mov	r1, r7
 8015a0c:	f7ea fe24 	bl	8000658 <__aeabi_dmul>
 8015a10:	4642      	mov	r2, r8
 8015a12:	4604      	mov	r4, r0
 8015a14:	460d      	mov	r5, r1
 8015a16:	464b      	mov	r3, r9
 8015a18:	ec51 0b18 	vmov	r0, r1, d8
 8015a1c:	f7ea fc66 	bl	80002ec <__adddf3>
 8015a20:	ec53 2b19 	vmov	r2, r3, d9
 8015a24:	f7ea fe18 	bl	8000658 <__aeabi_dmul>
 8015a28:	4622      	mov	r2, r4
 8015a2a:	462b      	mov	r3, r5
 8015a2c:	f7ea fc5e 	bl	80002ec <__adddf3>
 8015a30:	4642      	mov	r2, r8
 8015a32:	4682      	mov	sl, r0
 8015a34:	468b      	mov	fp, r1
 8015a36:	464b      	mov	r3, r9
 8015a38:	4640      	mov	r0, r8
 8015a3a:	4649      	mov	r1, r9
 8015a3c:	f7ea fe0c 	bl	8000658 <__aeabi_dmul>
 8015a40:	4b6b      	ldr	r3, [pc, #428]	; (8015bf0 <__ieee754_pow+0x770>)
 8015a42:	2200      	movs	r2, #0
 8015a44:	4606      	mov	r6, r0
 8015a46:	460f      	mov	r7, r1
 8015a48:	f7ea fc50 	bl	80002ec <__adddf3>
 8015a4c:	4652      	mov	r2, sl
 8015a4e:	465b      	mov	r3, fp
 8015a50:	f7ea fc4c 	bl	80002ec <__adddf3>
 8015a54:	2000      	movs	r0, #0
 8015a56:	4604      	mov	r4, r0
 8015a58:	460d      	mov	r5, r1
 8015a5a:	4602      	mov	r2, r0
 8015a5c:	460b      	mov	r3, r1
 8015a5e:	4640      	mov	r0, r8
 8015a60:	4649      	mov	r1, r9
 8015a62:	f7ea fdf9 	bl	8000658 <__aeabi_dmul>
 8015a66:	4b62      	ldr	r3, [pc, #392]	; (8015bf0 <__ieee754_pow+0x770>)
 8015a68:	4680      	mov	r8, r0
 8015a6a:	4689      	mov	r9, r1
 8015a6c:	2200      	movs	r2, #0
 8015a6e:	4620      	mov	r0, r4
 8015a70:	4629      	mov	r1, r5
 8015a72:	f7ea fc39 	bl	80002e8 <__aeabi_dsub>
 8015a76:	4632      	mov	r2, r6
 8015a78:	463b      	mov	r3, r7
 8015a7a:	f7ea fc35 	bl	80002e8 <__aeabi_dsub>
 8015a7e:	4602      	mov	r2, r0
 8015a80:	460b      	mov	r3, r1
 8015a82:	4650      	mov	r0, sl
 8015a84:	4659      	mov	r1, fp
 8015a86:	f7ea fc2f 	bl	80002e8 <__aeabi_dsub>
 8015a8a:	ec53 2b18 	vmov	r2, r3, d8
 8015a8e:	f7ea fde3 	bl	8000658 <__aeabi_dmul>
 8015a92:	4622      	mov	r2, r4
 8015a94:	4606      	mov	r6, r0
 8015a96:	460f      	mov	r7, r1
 8015a98:	462b      	mov	r3, r5
 8015a9a:	ec51 0b19 	vmov	r0, r1, d9
 8015a9e:	f7ea fddb 	bl	8000658 <__aeabi_dmul>
 8015aa2:	4602      	mov	r2, r0
 8015aa4:	460b      	mov	r3, r1
 8015aa6:	4630      	mov	r0, r6
 8015aa8:	4639      	mov	r1, r7
 8015aaa:	f7ea fc1f 	bl	80002ec <__adddf3>
 8015aae:	4606      	mov	r6, r0
 8015ab0:	460f      	mov	r7, r1
 8015ab2:	4602      	mov	r2, r0
 8015ab4:	460b      	mov	r3, r1
 8015ab6:	4640      	mov	r0, r8
 8015ab8:	4649      	mov	r1, r9
 8015aba:	f7ea fc17 	bl	80002ec <__adddf3>
 8015abe:	a33e      	add	r3, pc, #248	; (adr r3, 8015bb8 <__ieee754_pow+0x738>)
 8015ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015ac4:	2000      	movs	r0, #0
 8015ac6:	4604      	mov	r4, r0
 8015ac8:	460d      	mov	r5, r1
 8015aca:	f7ea fdc5 	bl	8000658 <__aeabi_dmul>
 8015ace:	4642      	mov	r2, r8
 8015ad0:	ec41 0b18 	vmov	d8, r0, r1
 8015ad4:	464b      	mov	r3, r9
 8015ad6:	4620      	mov	r0, r4
 8015ad8:	4629      	mov	r1, r5
 8015ada:	f7ea fc05 	bl	80002e8 <__aeabi_dsub>
 8015ade:	4602      	mov	r2, r0
 8015ae0:	460b      	mov	r3, r1
 8015ae2:	4630      	mov	r0, r6
 8015ae4:	4639      	mov	r1, r7
 8015ae6:	f7ea fbff 	bl	80002e8 <__aeabi_dsub>
 8015aea:	a335      	add	r3, pc, #212	; (adr r3, 8015bc0 <__ieee754_pow+0x740>)
 8015aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015af0:	f7ea fdb2 	bl	8000658 <__aeabi_dmul>
 8015af4:	a334      	add	r3, pc, #208	; (adr r3, 8015bc8 <__ieee754_pow+0x748>)
 8015af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015afa:	4606      	mov	r6, r0
 8015afc:	460f      	mov	r7, r1
 8015afe:	4620      	mov	r0, r4
 8015b00:	4629      	mov	r1, r5
 8015b02:	f7ea fda9 	bl	8000658 <__aeabi_dmul>
 8015b06:	4602      	mov	r2, r0
 8015b08:	460b      	mov	r3, r1
 8015b0a:	4630      	mov	r0, r6
 8015b0c:	4639      	mov	r1, r7
 8015b0e:	f7ea fbed 	bl	80002ec <__adddf3>
 8015b12:	9a07      	ldr	r2, [sp, #28]
 8015b14:	4b37      	ldr	r3, [pc, #220]	; (8015bf4 <__ieee754_pow+0x774>)
 8015b16:	4413      	add	r3, r2
 8015b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b1c:	f7ea fbe6 	bl	80002ec <__adddf3>
 8015b20:	4682      	mov	sl, r0
 8015b22:	9805      	ldr	r0, [sp, #20]
 8015b24:	468b      	mov	fp, r1
 8015b26:	f7ea fd2d 	bl	8000584 <__aeabi_i2d>
 8015b2a:	9a07      	ldr	r2, [sp, #28]
 8015b2c:	4b32      	ldr	r3, [pc, #200]	; (8015bf8 <__ieee754_pow+0x778>)
 8015b2e:	4413      	add	r3, r2
 8015b30:	e9d3 8900 	ldrd	r8, r9, [r3]
 8015b34:	4606      	mov	r6, r0
 8015b36:	460f      	mov	r7, r1
 8015b38:	4652      	mov	r2, sl
 8015b3a:	465b      	mov	r3, fp
 8015b3c:	ec51 0b18 	vmov	r0, r1, d8
 8015b40:	f7ea fbd4 	bl	80002ec <__adddf3>
 8015b44:	4642      	mov	r2, r8
 8015b46:	464b      	mov	r3, r9
 8015b48:	f7ea fbd0 	bl	80002ec <__adddf3>
 8015b4c:	4632      	mov	r2, r6
 8015b4e:	463b      	mov	r3, r7
 8015b50:	f7ea fbcc 	bl	80002ec <__adddf3>
 8015b54:	2000      	movs	r0, #0
 8015b56:	4632      	mov	r2, r6
 8015b58:	463b      	mov	r3, r7
 8015b5a:	4604      	mov	r4, r0
 8015b5c:	460d      	mov	r5, r1
 8015b5e:	f7ea fbc3 	bl	80002e8 <__aeabi_dsub>
 8015b62:	4642      	mov	r2, r8
 8015b64:	464b      	mov	r3, r9
 8015b66:	f7ea fbbf 	bl	80002e8 <__aeabi_dsub>
 8015b6a:	ec53 2b18 	vmov	r2, r3, d8
 8015b6e:	f7ea fbbb 	bl	80002e8 <__aeabi_dsub>
 8015b72:	4602      	mov	r2, r0
 8015b74:	460b      	mov	r3, r1
 8015b76:	4650      	mov	r0, sl
 8015b78:	4659      	mov	r1, fp
 8015b7a:	e610      	b.n	801579e <__ieee754_pow+0x31e>
 8015b7c:	2401      	movs	r4, #1
 8015b7e:	e6a1      	b.n	80158c4 <__ieee754_pow+0x444>
 8015b80:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8015bd0 <__ieee754_pow+0x750>
 8015b84:	e617      	b.n	80157b6 <__ieee754_pow+0x336>
 8015b86:	bf00      	nop
 8015b88:	4a454eef 	.word	0x4a454eef
 8015b8c:	3fca7e28 	.word	0x3fca7e28
 8015b90:	93c9db65 	.word	0x93c9db65
 8015b94:	3fcd864a 	.word	0x3fcd864a
 8015b98:	a91d4101 	.word	0xa91d4101
 8015b9c:	3fd17460 	.word	0x3fd17460
 8015ba0:	518f264d 	.word	0x518f264d
 8015ba4:	3fd55555 	.word	0x3fd55555
 8015ba8:	db6fabff 	.word	0xdb6fabff
 8015bac:	3fdb6db6 	.word	0x3fdb6db6
 8015bb0:	33333303 	.word	0x33333303
 8015bb4:	3fe33333 	.word	0x3fe33333
 8015bb8:	e0000000 	.word	0xe0000000
 8015bbc:	3feec709 	.word	0x3feec709
 8015bc0:	dc3a03fd 	.word	0xdc3a03fd
 8015bc4:	3feec709 	.word	0x3feec709
 8015bc8:	145b01f5 	.word	0x145b01f5
 8015bcc:	be3e2fe0 	.word	0xbe3e2fe0
 8015bd0:	00000000 	.word	0x00000000
 8015bd4:	3ff00000 	.word	0x3ff00000
 8015bd8:	7ff00000 	.word	0x7ff00000
 8015bdc:	43400000 	.word	0x43400000
 8015be0:	0003988e 	.word	0x0003988e
 8015be4:	000bb679 	.word	0x000bb679
 8015be8:	08016dd0 	.word	0x08016dd0
 8015bec:	3ff00000 	.word	0x3ff00000
 8015bf0:	40080000 	.word	0x40080000
 8015bf4:	08016df0 	.word	0x08016df0
 8015bf8:	08016de0 	.word	0x08016de0
 8015bfc:	a3b5      	add	r3, pc, #724	; (adr r3, 8015ed4 <__ieee754_pow+0xa54>)
 8015bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c02:	4640      	mov	r0, r8
 8015c04:	4649      	mov	r1, r9
 8015c06:	f7ea fb71 	bl	80002ec <__adddf3>
 8015c0a:	4622      	mov	r2, r4
 8015c0c:	ec41 0b1a 	vmov	d10, r0, r1
 8015c10:	462b      	mov	r3, r5
 8015c12:	4630      	mov	r0, r6
 8015c14:	4639      	mov	r1, r7
 8015c16:	f7ea fb67 	bl	80002e8 <__aeabi_dsub>
 8015c1a:	4602      	mov	r2, r0
 8015c1c:	460b      	mov	r3, r1
 8015c1e:	ec51 0b1a 	vmov	r0, r1, d10
 8015c22:	f7ea ffa9 	bl	8000b78 <__aeabi_dcmpgt>
 8015c26:	2800      	cmp	r0, #0
 8015c28:	f47f ae04 	bne.w	8015834 <__ieee754_pow+0x3b4>
 8015c2c:	4aa4      	ldr	r2, [pc, #656]	; (8015ec0 <__ieee754_pow+0xa40>)
 8015c2e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8015c32:	4293      	cmp	r3, r2
 8015c34:	f340 8108 	ble.w	8015e48 <__ieee754_pow+0x9c8>
 8015c38:	151b      	asrs	r3, r3, #20
 8015c3a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8015c3e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8015c42:	fa4a f303 	asr.w	r3, sl, r3
 8015c46:	445b      	add	r3, fp
 8015c48:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8015c4c:	4e9d      	ldr	r6, [pc, #628]	; (8015ec4 <__ieee754_pow+0xa44>)
 8015c4e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8015c52:	4116      	asrs	r6, r2
 8015c54:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8015c58:	2000      	movs	r0, #0
 8015c5a:	ea23 0106 	bic.w	r1, r3, r6
 8015c5e:	f1c2 0214 	rsb	r2, r2, #20
 8015c62:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8015c66:	fa4a fa02 	asr.w	sl, sl, r2
 8015c6a:	f1bb 0f00 	cmp.w	fp, #0
 8015c6e:	4602      	mov	r2, r0
 8015c70:	460b      	mov	r3, r1
 8015c72:	4620      	mov	r0, r4
 8015c74:	4629      	mov	r1, r5
 8015c76:	bfb8      	it	lt
 8015c78:	f1ca 0a00 	rsblt	sl, sl, #0
 8015c7c:	f7ea fb34 	bl	80002e8 <__aeabi_dsub>
 8015c80:	ec41 0b19 	vmov	d9, r0, r1
 8015c84:	4642      	mov	r2, r8
 8015c86:	464b      	mov	r3, r9
 8015c88:	ec51 0b19 	vmov	r0, r1, d9
 8015c8c:	f7ea fb2e 	bl	80002ec <__adddf3>
 8015c90:	a37b      	add	r3, pc, #492	; (adr r3, 8015e80 <__ieee754_pow+0xa00>)
 8015c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c96:	2000      	movs	r0, #0
 8015c98:	4604      	mov	r4, r0
 8015c9a:	460d      	mov	r5, r1
 8015c9c:	f7ea fcdc 	bl	8000658 <__aeabi_dmul>
 8015ca0:	ec53 2b19 	vmov	r2, r3, d9
 8015ca4:	4606      	mov	r6, r0
 8015ca6:	460f      	mov	r7, r1
 8015ca8:	4620      	mov	r0, r4
 8015caa:	4629      	mov	r1, r5
 8015cac:	f7ea fb1c 	bl	80002e8 <__aeabi_dsub>
 8015cb0:	4602      	mov	r2, r0
 8015cb2:	460b      	mov	r3, r1
 8015cb4:	4640      	mov	r0, r8
 8015cb6:	4649      	mov	r1, r9
 8015cb8:	f7ea fb16 	bl	80002e8 <__aeabi_dsub>
 8015cbc:	a372      	add	r3, pc, #456	; (adr r3, 8015e88 <__ieee754_pow+0xa08>)
 8015cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015cc2:	f7ea fcc9 	bl	8000658 <__aeabi_dmul>
 8015cc6:	a372      	add	r3, pc, #456	; (adr r3, 8015e90 <__ieee754_pow+0xa10>)
 8015cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015ccc:	4680      	mov	r8, r0
 8015cce:	4689      	mov	r9, r1
 8015cd0:	4620      	mov	r0, r4
 8015cd2:	4629      	mov	r1, r5
 8015cd4:	f7ea fcc0 	bl	8000658 <__aeabi_dmul>
 8015cd8:	4602      	mov	r2, r0
 8015cda:	460b      	mov	r3, r1
 8015cdc:	4640      	mov	r0, r8
 8015cde:	4649      	mov	r1, r9
 8015ce0:	f7ea fb04 	bl	80002ec <__adddf3>
 8015ce4:	4604      	mov	r4, r0
 8015ce6:	460d      	mov	r5, r1
 8015ce8:	4602      	mov	r2, r0
 8015cea:	460b      	mov	r3, r1
 8015cec:	4630      	mov	r0, r6
 8015cee:	4639      	mov	r1, r7
 8015cf0:	f7ea fafc 	bl	80002ec <__adddf3>
 8015cf4:	4632      	mov	r2, r6
 8015cf6:	463b      	mov	r3, r7
 8015cf8:	4680      	mov	r8, r0
 8015cfa:	4689      	mov	r9, r1
 8015cfc:	f7ea faf4 	bl	80002e8 <__aeabi_dsub>
 8015d00:	4602      	mov	r2, r0
 8015d02:	460b      	mov	r3, r1
 8015d04:	4620      	mov	r0, r4
 8015d06:	4629      	mov	r1, r5
 8015d08:	f7ea faee 	bl	80002e8 <__aeabi_dsub>
 8015d0c:	4642      	mov	r2, r8
 8015d0e:	4606      	mov	r6, r0
 8015d10:	460f      	mov	r7, r1
 8015d12:	464b      	mov	r3, r9
 8015d14:	4640      	mov	r0, r8
 8015d16:	4649      	mov	r1, r9
 8015d18:	f7ea fc9e 	bl	8000658 <__aeabi_dmul>
 8015d1c:	a35e      	add	r3, pc, #376	; (adr r3, 8015e98 <__ieee754_pow+0xa18>)
 8015d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015d22:	4604      	mov	r4, r0
 8015d24:	460d      	mov	r5, r1
 8015d26:	f7ea fc97 	bl	8000658 <__aeabi_dmul>
 8015d2a:	a35d      	add	r3, pc, #372	; (adr r3, 8015ea0 <__ieee754_pow+0xa20>)
 8015d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015d30:	f7ea fada 	bl	80002e8 <__aeabi_dsub>
 8015d34:	4622      	mov	r2, r4
 8015d36:	462b      	mov	r3, r5
 8015d38:	f7ea fc8e 	bl	8000658 <__aeabi_dmul>
 8015d3c:	a35a      	add	r3, pc, #360	; (adr r3, 8015ea8 <__ieee754_pow+0xa28>)
 8015d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015d42:	f7ea fad3 	bl	80002ec <__adddf3>
 8015d46:	4622      	mov	r2, r4
 8015d48:	462b      	mov	r3, r5
 8015d4a:	f7ea fc85 	bl	8000658 <__aeabi_dmul>
 8015d4e:	a358      	add	r3, pc, #352	; (adr r3, 8015eb0 <__ieee754_pow+0xa30>)
 8015d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015d54:	f7ea fac8 	bl	80002e8 <__aeabi_dsub>
 8015d58:	4622      	mov	r2, r4
 8015d5a:	462b      	mov	r3, r5
 8015d5c:	f7ea fc7c 	bl	8000658 <__aeabi_dmul>
 8015d60:	a355      	add	r3, pc, #340	; (adr r3, 8015eb8 <__ieee754_pow+0xa38>)
 8015d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015d66:	f7ea fac1 	bl	80002ec <__adddf3>
 8015d6a:	4622      	mov	r2, r4
 8015d6c:	462b      	mov	r3, r5
 8015d6e:	f7ea fc73 	bl	8000658 <__aeabi_dmul>
 8015d72:	4602      	mov	r2, r0
 8015d74:	460b      	mov	r3, r1
 8015d76:	4640      	mov	r0, r8
 8015d78:	4649      	mov	r1, r9
 8015d7a:	f7ea fab5 	bl	80002e8 <__aeabi_dsub>
 8015d7e:	4604      	mov	r4, r0
 8015d80:	460d      	mov	r5, r1
 8015d82:	4602      	mov	r2, r0
 8015d84:	460b      	mov	r3, r1
 8015d86:	4640      	mov	r0, r8
 8015d88:	4649      	mov	r1, r9
 8015d8a:	f7ea fc65 	bl	8000658 <__aeabi_dmul>
 8015d8e:	2200      	movs	r2, #0
 8015d90:	ec41 0b19 	vmov	d9, r0, r1
 8015d94:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8015d98:	4620      	mov	r0, r4
 8015d9a:	4629      	mov	r1, r5
 8015d9c:	f7ea faa4 	bl	80002e8 <__aeabi_dsub>
 8015da0:	4602      	mov	r2, r0
 8015da2:	460b      	mov	r3, r1
 8015da4:	ec51 0b19 	vmov	r0, r1, d9
 8015da8:	f7ea fd80 	bl	80008ac <__aeabi_ddiv>
 8015dac:	4632      	mov	r2, r6
 8015dae:	4604      	mov	r4, r0
 8015db0:	460d      	mov	r5, r1
 8015db2:	463b      	mov	r3, r7
 8015db4:	4640      	mov	r0, r8
 8015db6:	4649      	mov	r1, r9
 8015db8:	f7ea fc4e 	bl	8000658 <__aeabi_dmul>
 8015dbc:	4632      	mov	r2, r6
 8015dbe:	463b      	mov	r3, r7
 8015dc0:	f7ea fa94 	bl	80002ec <__adddf3>
 8015dc4:	4602      	mov	r2, r0
 8015dc6:	460b      	mov	r3, r1
 8015dc8:	4620      	mov	r0, r4
 8015dca:	4629      	mov	r1, r5
 8015dcc:	f7ea fa8c 	bl	80002e8 <__aeabi_dsub>
 8015dd0:	4642      	mov	r2, r8
 8015dd2:	464b      	mov	r3, r9
 8015dd4:	f7ea fa88 	bl	80002e8 <__aeabi_dsub>
 8015dd8:	460b      	mov	r3, r1
 8015dda:	4602      	mov	r2, r0
 8015ddc:	493a      	ldr	r1, [pc, #232]	; (8015ec8 <__ieee754_pow+0xa48>)
 8015dde:	2000      	movs	r0, #0
 8015de0:	f7ea fa82 	bl	80002e8 <__aeabi_dsub>
 8015de4:	ec41 0b10 	vmov	d0, r0, r1
 8015de8:	ee10 3a90 	vmov	r3, s1
 8015dec:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8015df0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8015df4:	da2b      	bge.n	8015e4e <__ieee754_pow+0x9ce>
 8015df6:	4650      	mov	r0, sl
 8015df8:	f000 f966 	bl	80160c8 <scalbn>
 8015dfc:	ec51 0b10 	vmov	r0, r1, d0
 8015e00:	ec53 2b18 	vmov	r2, r3, d8
 8015e04:	f7ff bbed 	b.w	80155e2 <__ieee754_pow+0x162>
 8015e08:	4b30      	ldr	r3, [pc, #192]	; (8015ecc <__ieee754_pow+0xa4c>)
 8015e0a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8015e0e:	429e      	cmp	r6, r3
 8015e10:	f77f af0c 	ble.w	8015c2c <__ieee754_pow+0x7ac>
 8015e14:	4b2e      	ldr	r3, [pc, #184]	; (8015ed0 <__ieee754_pow+0xa50>)
 8015e16:	440b      	add	r3, r1
 8015e18:	4303      	orrs	r3, r0
 8015e1a:	d009      	beq.n	8015e30 <__ieee754_pow+0x9b0>
 8015e1c:	ec51 0b18 	vmov	r0, r1, d8
 8015e20:	2200      	movs	r2, #0
 8015e22:	2300      	movs	r3, #0
 8015e24:	f7ea fe8a 	bl	8000b3c <__aeabi_dcmplt>
 8015e28:	3800      	subs	r0, #0
 8015e2a:	bf18      	it	ne
 8015e2c:	2001      	movne	r0, #1
 8015e2e:	e447      	b.n	80156c0 <__ieee754_pow+0x240>
 8015e30:	4622      	mov	r2, r4
 8015e32:	462b      	mov	r3, r5
 8015e34:	f7ea fa58 	bl	80002e8 <__aeabi_dsub>
 8015e38:	4642      	mov	r2, r8
 8015e3a:	464b      	mov	r3, r9
 8015e3c:	f7ea fe92 	bl	8000b64 <__aeabi_dcmpge>
 8015e40:	2800      	cmp	r0, #0
 8015e42:	f43f aef3 	beq.w	8015c2c <__ieee754_pow+0x7ac>
 8015e46:	e7e9      	b.n	8015e1c <__ieee754_pow+0x99c>
 8015e48:	f04f 0a00 	mov.w	sl, #0
 8015e4c:	e71a      	b.n	8015c84 <__ieee754_pow+0x804>
 8015e4e:	ec51 0b10 	vmov	r0, r1, d0
 8015e52:	4619      	mov	r1, r3
 8015e54:	e7d4      	b.n	8015e00 <__ieee754_pow+0x980>
 8015e56:	491c      	ldr	r1, [pc, #112]	; (8015ec8 <__ieee754_pow+0xa48>)
 8015e58:	2000      	movs	r0, #0
 8015e5a:	f7ff bb30 	b.w	80154be <__ieee754_pow+0x3e>
 8015e5e:	2000      	movs	r0, #0
 8015e60:	2100      	movs	r1, #0
 8015e62:	f7ff bb2c 	b.w	80154be <__ieee754_pow+0x3e>
 8015e66:	4630      	mov	r0, r6
 8015e68:	4639      	mov	r1, r7
 8015e6a:	f7ff bb28 	b.w	80154be <__ieee754_pow+0x3e>
 8015e6e:	9204      	str	r2, [sp, #16]
 8015e70:	f7ff bb7a 	b.w	8015568 <__ieee754_pow+0xe8>
 8015e74:	2300      	movs	r3, #0
 8015e76:	f7ff bb64 	b.w	8015542 <__ieee754_pow+0xc2>
 8015e7a:	bf00      	nop
 8015e7c:	f3af 8000 	nop.w
 8015e80:	00000000 	.word	0x00000000
 8015e84:	3fe62e43 	.word	0x3fe62e43
 8015e88:	fefa39ef 	.word	0xfefa39ef
 8015e8c:	3fe62e42 	.word	0x3fe62e42
 8015e90:	0ca86c39 	.word	0x0ca86c39
 8015e94:	be205c61 	.word	0xbe205c61
 8015e98:	72bea4d0 	.word	0x72bea4d0
 8015e9c:	3e663769 	.word	0x3e663769
 8015ea0:	c5d26bf1 	.word	0xc5d26bf1
 8015ea4:	3ebbbd41 	.word	0x3ebbbd41
 8015ea8:	af25de2c 	.word	0xaf25de2c
 8015eac:	3f11566a 	.word	0x3f11566a
 8015eb0:	16bebd93 	.word	0x16bebd93
 8015eb4:	3f66c16c 	.word	0x3f66c16c
 8015eb8:	5555553e 	.word	0x5555553e
 8015ebc:	3fc55555 	.word	0x3fc55555
 8015ec0:	3fe00000 	.word	0x3fe00000
 8015ec4:	000fffff 	.word	0x000fffff
 8015ec8:	3ff00000 	.word	0x3ff00000
 8015ecc:	4090cbff 	.word	0x4090cbff
 8015ed0:	3f6f3400 	.word	0x3f6f3400
 8015ed4:	652b82fe 	.word	0x652b82fe
 8015ed8:	3c971547 	.word	0x3c971547

08015edc <__ieee754_sqrt>:
 8015edc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015ee0:	ec55 4b10 	vmov	r4, r5, d0
 8015ee4:	4e55      	ldr	r6, [pc, #340]	; (801603c <__ieee754_sqrt+0x160>)
 8015ee6:	43ae      	bics	r6, r5
 8015ee8:	ee10 0a10 	vmov	r0, s0
 8015eec:	ee10 3a10 	vmov	r3, s0
 8015ef0:	462a      	mov	r2, r5
 8015ef2:	4629      	mov	r1, r5
 8015ef4:	d110      	bne.n	8015f18 <__ieee754_sqrt+0x3c>
 8015ef6:	ee10 2a10 	vmov	r2, s0
 8015efa:	462b      	mov	r3, r5
 8015efc:	f7ea fbac 	bl	8000658 <__aeabi_dmul>
 8015f00:	4602      	mov	r2, r0
 8015f02:	460b      	mov	r3, r1
 8015f04:	4620      	mov	r0, r4
 8015f06:	4629      	mov	r1, r5
 8015f08:	f7ea f9f0 	bl	80002ec <__adddf3>
 8015f0c:	4604      	mov	r4, r0
 8015f0e:	460d      	mov	r5, r1
 8015f10:	ec45 4b10 	vmov	d0, r4, r5
 8015f14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015f18:	2d00      	cmp	r5, #0
 8015f1a:	dc10      	bgt.n	8015f3e <__ieee754_sqrt+0x62>
 8015f1c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8015f20:	4330      	orrs	r0, r6
 8015f22:	d0f5      	beq.n	8015f10 <__ieee754_sqrt+0x34>
 8015f24:	b15d      	cbz	r5, 8015f3e <__ieee754_sqrt+0x62>
 8015f26:	ee10 2a10 	vmov	r2, s0
 8015f2a:	462b      	mov	r3, r5
 8015f2c:	ee10 0a10 	vmov	r0, s0
 8015f30:	f7ea f9da 	bl	80002e8 <__aeabi_dsub>
 8015f34:	4602      	mov	r2, r0
 8015f36:	460b      	mov	r3, r1
 8015f38:	f7ea fcb8 	bl	80008ac <__aeabi_ddiv>
 8015f3c:	e7e6      	b.n	8015f0c <__ieee754_sqrt+0x30>
 8015f3e:	1512      	asrs	r2, r2, #20
 8015f40:	d074      	beq.n	801602c <__ieee754_sqrt+0x150>
 8015f42:	07d4      	lsls	r4, r2, #31
 8015f44:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8015f48:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8015f4c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8015f50:	bf5e      	ittt	pl
 8015f52:	0fda      	lsrpl	r2, r3, #31
 8015f54:	005b      	lslpl	r3, r3, #1
 8015f56:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8015f5a:	2400      	movs	r4, #0
 8015f5c:	0fda      	lsrs	r2, r3, #31
 8015f5e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8015f62:	107f      	asrs	r7, r7, #1
 8015f64:	005b      	lsls	r3, r3, #1
 8015f66:	2516      	movs	r5, #22
 8015f68:	4620      	mov	r0, r4
 8015f6a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8015f6e:	1886      	adds	r6, r0, r2
 8015f70:	428e      	cmp	r6, r1
 8015f72:	bfde      	ittt	le
 8015f74:	1b89      	suble	r1, r1, r6
 8015f76:	18b0      	addle	r0, r6, r2
 8015f78:	18a4      	addle	r4, r4, r2
 8015f7a:	0049      	lsls	r1, r1, #1
 8015f7c:	3d01      	subs	r5, #1
 8015f7e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8015f82:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8015f86:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8015f8a:	d1f0      	bne.n	8015f6e <__ieee754_sqrt+0x92>
 8015f8c:	462a      	mov	r2, r5
 8015f8e:	f04f 0e20 	mov.w	lr, #32
 8015f92:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8015f96:	4281      	cmp	r1, r0
 8015f98:	eb06 0c05 	add.w	ip, r6, r5
 8015f9c:	dc02      	bgt.n	8015fa4 <__ieee754_sqrt+0xc8>
 8015f9e:	d113      	bne.n	8015fc8 <__ieee754_sqrt+0xec>
 8015fa0:	459c      	cmp	ip, r3
 8015fa2:	d811      	bhi.n	8015fc8 <__ieee754_sqrt+0xec>
 8015fa4:	f1bc 0f00 	cmp.w	ip, #0
 8015fa8:	eb0c 0506 	add.w	r5, ip, r6
 8015fac:	da43      	bge.n	8016036 <__ieee754_sqrt+0x15a>
 8015fae:	2d00      	cmp	r5, #0
 8015fb0:	db41      	blt.n	8016036 <__ieee754_sqrt+0x15a>
 8015fb2:	f100 0801 	add.w	r8, r0, #1
 8015fb6:	1a09      	subs	r1, r1, r0
 8015fb8:	459c      	cmp	ip, r3
 8015fba:	bf88      	it	hi
 8015fbc:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8015fc0:	eba3 030c 	sub.w	r3, r3, ip
 8015fc4:	4432      	add	r2, r6
 8015fc6:	4640      	mov	r0, r8
 8015fc8:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8015fcc:	f1be 0e01 	subs.w	lr, lr, #1
 8015fd0:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8015fd4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8015fd8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8015fdc:	d1db      	bne.n	8015f96 <__ieee754_sqrt+0xba>
 8015fde:	430b      	orrs	r3, r1
 8015fe0:	d006      	beq.n	8015ff0 <__ieee754_sqrt+0x114>
 8015fe2:	1c50      	adds	r0, r2, #1
 8015fe4:	bf13      	iteet	ne
 8015fe6:	3201      	addne	r2, #1
 8015fe8:	3401      	addeq	r4, #1
 8015fea:	4672      	moveq	r2, lr
 8015fec:	f022 0201 	bicne.w	r2, r2, #1
 8015ff0:	1063      	asrs	r3, r4, #1
 8015ff2:	0852      	lsrs	r2, r2, #1
 8015ff4:	07e1      	lsls	r1, r4, #31
 8015ff6:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8015ffa:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8015ffe:	bf48      	it	mi
 8016000:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8016004:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8016008:	4614      	mov	r4, r2
 801600a:	e781      	b.n	8015f10 <__ieee754_sqrt+0x34>
 801600c:	0ad9      	lsrs	r1, r3, #11
 801600e:	3815      	subs	r0, #21
 8016010:	055b      	lsls	r3, r3, #21
 8016012:	2900      	cmp	r1, #0
 8016014:	d0fa      	beq.n	801600c <__ieee754_sqrt+0x130>
 8016016:	02cd      	lsls	r5, r1, #11
 8016018:	d50a      	bpl.n	8016030 <__ieee754_sqrt+0x154>
 801601a:	f1c2 0420 	rsb	r4, r2, #32
 801601e:	fa23 f404 	lsr.w	r4, r3, r4
 8016022:	1e55      	subs	r5, r2, #1
 8016024:	4093      	lsls	r3, r2
 8016026:	4321      	orrs	r1, r4
 8016028:	1b42      	subs	r2, r0, r5
 801602a:	e78a      	b.n	8015f42 <__ieee754_sqrt+0x66>
 801602c:	4610      	mov	r0, r2
 801602e:	e7f0      	b.n	8016012 <__ieee754_sqrt+0x136>
 8016030:	0049      	lsls	r1, r1, #1
 8016032:	3201      	adds	r2, #1
 8016034:	e7ef      	b.n	8016016 <__ieee754_sqrt+0x13a>
 8016036:	4680      	mov	r8, r0
 8016038:	e7bd      	b.n	8015fb6 <__ieee754_sqrt+0xda>
 801603a:	bf00      	nop
 801603c:	7ff00000 	.word	0x7ff00000

08016040 <with_errno>:
 8016040:	b570      	push	{r4, r5, r6, lr}
 8016042:	4604      	mov	r4, r0
 8016044:	460d      	mov	r5, r1
 8016046:	4616      	mov	r6, r2
 8016048:	f7fa f83e 	bl	80100c8 <__errno>
 801604c:	4629      	mov	r1, r5
 801604e:	6006      	str	r6, [r0, #0]
 8016050:	4620      	mov	r0, r4
 8016052:	bd70      	pop	{r4, r5, r6, pc}

08016054 <xflow>:
 8016054:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016056:	4614      	mov	r4, r2
 8016058:	461d      	mov	r5, r3
 801605a:	b108      	cbz	r0, 8016060 <xflow+0xc>
 801605c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8016060:	e9cd 2300 	strd	r2, r3, [sp]
 8016064:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016068:	4620      	mov	r0, r4
 801606a:	4629      	mov	r1, r5
 801606c:	f7ea faf4 	bl	8000658 <__aeabi_dmul>
 8016070:	2222      	movs	r2, #34	; 0x22
 8016072:	b003      	add	sp, #12
 8016074:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016078:	f7ff bfe2 	b.w	8016040 <with_errno>

0801607c <__math_uflow>:
 801607c:	b508      	push	{r3, lr}
 801607e:	2200      	movs	r2, #0
 8016080:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8016084:	f7ff ffe6 	bl	8016054 <xflow>
 8016088:	ec41 0b10 	vmov	d0, r0, r1
 801608c:	bd08      	pop	{r3, pc}

0801608e <__math_oflow>:
 801608e:	b508      	push	{r3, lr}
 8016090:	2200      	movs	r2, #0
 8016092:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8016096:	f7ff ffdd 	bl	8016054 <xflow>
 801609a:	ec41 0b10 	vmov	d0, r0, r1
 801609e:	bd08      	pop	{r3, pc}

080160a0 <fabs>:
 80160a0:	ec51 0b10 	vmov	r0, r1, d0
 80160a4:	ee10 2a10 	vmov	r2, s0
 80160a8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80160ac:	ec43 2b10 	vmov	d0, r2, r3
 80160b0:	4770      	bx	lr

080160b2 <finite>:
 80160b2:	b082      	sub	sp, #8
 80160b4:	ed8d 0b00 	vstr	d0, [sp]
 80160b8:	9801      	ldr	r0, [sp, #4]
 80160ba:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80160be:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80160c2:	0fc0      	lsrs	r0, r0, #31
 80160c4:	b002      	add	sp, #8
 80160c6:	4770      	bx	lr

080160c8 <scalbn>:
 80160c8:	b570      	push	{r4, r5, r6, lr}
 80160ca:	ec55 4b10 	vmov	r4, r5, d0
 80160ce:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80160d2:	4606      	mov	r6, r0
 80160d4:	462b      	mov	r3, r5
 80160d6:	b99a      	cbnz	r2, 8016100 <scalbn+0x38>
 80160d8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80160dc:	4323      	orrs	r3, r4
 80160de:	d036      	beq.n	801614e <scalbn+0x86>
 80160e0:	4b39      	ldr	r3, [pc, #228]	; (80161c8 <scalbn+0x100>)
 80160e2:	4629      	mov	r1, r5
 80160e4:	ee10 0a10 	vmov	r0, s0
 80160e8:	2200      	movs	r2, #0
 80160ea:	f7ea fab5 	bl	8000658 <__aeabi_dmul>
 80160ee:	4b37      	ldr	r3, [pc, #220]	; (80161cc <scalbn+0x104>)
 80160f0:	429e      	cmp	r6, r3
 80160f2:	4604      	mov	r4, r0
 80160f4:	460d      	mov	r5, r1
 80160f6:	da10      	bge.n	801611a <scalbn+0x52>
 80160f8:	a32b      	add	r3, pc, #172	; (adr r3, 80161a8 <scalbn+0xe0>)
 80160fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80160fe:	e03a      	b.n	8016176 <scalbn+0xae>
 8016100:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8016104:	428a      	cmp	r2, r1
 8016106:	d10c      	bne.n	8016122 <scalbn+0x5a>
 8016108:	ee10 2a10 	vmov	r2, s0
 801610c:	4620      	mov	r0, r4
 801610e:	4629      	mov	r1, r5
 8016110:	f7ea f8ec 	bl	80002ec <__adddf3>
 8016114:	4604      	mov	r4, r0
 8016116:	460d      	mov	r5, r1
 8016118:	e019      	b.n	801614e <scalbn+0x86>
 801611a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801611e:	460b      	mov	r3, r1
 8016120:	3a36      	subs	r2, #54	; 0x36
 8016122:	4432      	add	r2, r6
 8016124:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8016128:	428a      	cmp	r2, r1
 801612a:	dd08      	ble.n	801613e <scalbn+0x76>
 801612c:	2d00      	cmp	r5, #0
 801612e:	a120      	add	r1, pc, #128	; (adr r1, 80161b0 <scalbn+0xe8>)
 8016130:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016134:	da1c      	bge.n	8016170 <scalbn+0xa8>
 8016136:	a120      	add	r1, pc, #128	; (adr r1, 80161b8 <scalbn+0xf0>)
 8016138:	e9d1 0100 	ldrd	r0, r1, [r1]
 801613c:	e018      	b.n	8016170 <scalbn+0xa8>
 801613e:	2a00      	cmp	r2, #0
 8016140:	dd08      	ble.n	8016154 <scalbn+0x8c>
 8016142:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8016146:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801614a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801614e:	ec45 4b10 	vmov	d0, r4, r5
 8016152:	bd70      	pop	{r4, r5, r6, pc}
 8016154:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8016158:	da19      	bge.n	801618e <scalbn+0xc6>
 801615a:	f24c 3350 	movw	r3, #50000	; 0xc350
 801615e:	429e      	cmp	r6, r3
 8016160:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8016164:	dd0a      	ble.n	801617c <scalbn+0xb4>
 8016166:	a112      	add	r1, pc, #72	; (adr r1, 80161b0 <scalbn+0xe8>)
 8016168:	e9d1 0100 	ldrd	r0, r1, [r1]
 801616c:	2b00      	cmp	r3, #0
 801616e:	d1e2      	bne.n	8016136 <scalbn+0x6e>
 8016170:	a30f      	add	r3, pc, #60	; (adr r3, 80161b0 <scalbn+0xe8>)
 8016172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016176:	f7ea fa6f 	bl	8000658 <__aeabi_dmul>
 801617a:	e7cb      	b.n	8016114 <scalbn+0x4c>
 801617c:	a10a      	add	r1, pc, #40	; (adr r1, 80161a8 <scalbn+0xe0>)
 801617e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016182:	2b00      	cmp	r3, #0
 8016184:	d0b8      	beq.n	80160f8 <scalbn+0x30>
 8016186:	a10e      	add	r1, pc, #56	; (adr r1, 80161c0 <scalbn+0xf8>)
 8016188:	e9d1 0100 	ldrd	r0, r1, [r1]
 801618c:	e7b4      	b.n	80160f8 <scalbn+0x30>
 801618e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8016192:	3236      	adds	r2, #54	; 0x36
 8016194:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8016198:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801619c:	4620      	mov	r0, r4
 801619e:	4b0c      	ldr	r3, [pc, #48]	; (80161d0 <scalbn+0x108>)
 80161a0:	2200      	movs	r2, #0
 80161a2:	e7e8      	b.n	8016176 <scalbn+0xae>
 80161a4:	f3af 8000 	nop.w
 80161a8:	c2f8f359 	.word	0xc2f8f359
 80161ac:	01a56e1f 	.word	0x01a56e1f
 80161b0:	8800759c 	.word	0x8800759c
 80161b4:	7e37e43c 	.word	0x7e37e43c
 80161b8:	8800759c 	.word	0x8800759c
 80161bc:	fe37e43c 	.word	0xfe37e43c
 80161c0:	c2f8f359 	.word	0xc2f8f359
 80161c4:	81a56e1f 	.word	0x81a56e1f
 80161c8:	43500000 	.word	0x43500000
 80161cc:	ffff3cb0 	.word	0xffff3cb0
 80161d0:	3c900000 	.word	0x3c900000

080161d4 <_init>:
 80161d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80161d6:	bf00      	nop
 80161d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80161da:	bc08      	pop	{r3}
 80161dc:	469e      	mov	lr, r3
 80161de:	4770      	bx	lr

080161e0 <_fini>:
 80161e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80161e2:	bf00      	nop
 80161e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80161e6:	bc08      	pop	{r3}
 80161e8:	469e      	mov	lr, r3
 80161ea:	4770      	bx	lr
