
TACTS_testbed.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000091b4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000061c  08009388  08009388  00019388  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080099a4  080099a4  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  080099a4  080099a4  000199a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080099ac  080099ac  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080099ac  080099ac  000199ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080099b0  080099b0  000199b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080099b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a0  200001dc  08009b90  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000037c  08009b90  0002037c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015384  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002cfe  00000000  00000000  00035590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001170  00000000  00000000  00038290  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001028  00000000  00000000  00039400  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000282cb  00000000  00000000  0003a428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b41d  00000000  00000000  000626f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f61ec  00000000  00000000  0007db10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00173cfc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a38  00000000  00000000  00173d4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001dc 	.word	0x200001dc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800936c 	.word	0x0800936c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e0 	.word	0x200001e0
 800020c:	0800936c 	.word	0x0800936c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b974 	b.w	8000fc8 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f806 	bl	8000cf8 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__udivmoddi4>:
 8000cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cfc:	9d08      	ldr	r5, [sp, #32]
 8000cfe:	4604      	mov	r4, r0
 8000d00:	468e      	mov	lr, r1
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d14d      	bne.n	8000da2 <__udivmoddi4+0xaa>
 8000d06:	428a      	cmp	r2, r1
 8000d08:	4694      	mov	ip, r2
 8000d0a:	d969      	bls.n	8000de0 <__udivmoddi4+0xe8>
 8000d0c:	fab2 f282 	clz	r2, r2
 8000d10:	b152      	cbz	r2, 8000d28 <__udivmoddi4+0x30>
 8000d12:	fa01 f302 	lsl.w	r3, r1, r2
 8000d16:	f1c2 0120 	rsb	r1, r2, #32
 8000d1a:	fa20 f101 	lsr.w	r1, r0, r1
 8000d1e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d22:	ea41 0e03 	orr.w	lr, r1, r3
 8000d26:	4094      	lsls	r4, r2
 8000d28:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d2c:	0c21      	lsrs	r1, r4, #16
 8000d2e:	fbbe f6f8 	udiv	r6, lr, r8
 8000d32:	fa1f f78c 	uxth.w	r7, ip
 8000d36:	fb08 e316 	mls	r3, r8, r6, lr
 8000d3a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d3e:	fb06 f107 	mul.w	r1, r6, r7
 8000d42:	4299      	cmp	r1, r3
 8000d44:	d90a      	bls.n	8000d5c <__udivmoddi4+0x64>
 8000d46:	eb1c 0303 	adds.w	r3, ip, r3
 8000d4a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d4e:	f080 811f 	bcs.w	8000f90 <__udivmoddi4+0x298>
 8000d52:	4299      	cmp	r1, r3
 8000d54:	f240 811c 	bls.w	8000f90 <__udivmoddi4+0x298>
 8000d58:	3e02      	subs	r6, #2
 8000d5a:	4463      	add	r3, ip
 8000d5c:	1a5b      	subs	r3, r3, r1
 8000d5e:	b2a4      	uxth	r4, r4
 8000d60:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d64:	fb08 3310 	mls	r3, r8, r0, r3
 8000d68:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d6c:	fb00 f707 	mul.w	r7, r0, r7
 8000d70:	42a7      	cmp	r7, r4
 8000d72:	d90a      	bls.n	8000d8a <__udivmoddi4+0x92>
 8000d74:	eb1c 0404 	adds.w	r4, ip, r4
 8000d78:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d7c:	f080 810a 	bcs.w	8000f94 <__udivmoddi4+0x29c>
 8000d80:	42a7      	cmp	r7, r4
 8000d82:	f240 8107 	bls.w	8000f94 <__udivmoddi4+0x29c>
 8000d86:	4464      	add	r4, ip
 8000d88:	3802      	subs	r0, #2
 8000d8a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d8e:	1be4      	subs	r4, r4, r7
 8000d90:	2600      	movs	r6, #0
 8000d92:	b11d      	cbz	r5, 8000d9c <__udivmoddi4+0xa4>
 8000d94:	40d4      	lsrs	r4, r2
 8000d96:	2300      	movs	r3, #0
 8000d98:	e9c5 4300 	strd	r4, r3, [r5]
 8000d9c:	4631      	mov	r1, r6
 8000d9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da2:	428b      	cmp	r3, r1
 8000da4:	d909      	bls.n	8000dba <__udivmoddi4+0xc2>
 8000da6:	2d00      	cmp	r5, #0
 8000da8:	f000 80ef 	beq.w	8000f8a <__udivmoddi4+0x292>
 8000dac:	2600      	movs	r6, #0
 8000dae:	e9c5 0100 	strd	r0, r1, [r5]
 8000db2:	4630      	mov	r0, r6
 8000db4:	4631      	mov	r1, r6
 8000db6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dba:	fab3 f683 	clz	r6, r3
 8000dbe:	2e00      	cmp	r6, #0
 8000dc0:	d14a      	bne.n	8000e58 <__udivmoddi4+0x160>
 8000dc2:	428b      	cmp	r3, r1
 8000dc4:	d302      	bcc.n	8000dcc <__udivmoddi4+0xd4>
 8000dc6:	4282      	cmp	r2, r0
 8000dc8:	f200 80f9 	bhi.w	8000fbe <__udivmoddi4+0x2c6>
 8000dcc:	1a84      	subs	r4, r0, r2
 8000dce:	eb61 0303 	sbc.w	r3, r1, r3
 8000dd2:	2001      	movs	r0, #1
 8000dd4:	469e      	mov	lr, r3
 8000dd6:	2d00      	cmp	r5, #0
 8000dd8:	d0e0      	beq.n	8000d9c <__udivmoddi4+0xa4>
 8000dda:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dde:	e7dd      	b.n	8000d9c <__udivmoddi4+0xa4>
 8000de0:	b902      	cbnz	r2, 8000de4 <__udivmoddi4+0xec>
 8000de2:	deff      	udf	#255	; 0xff
 8000de4:	fab2 f282 	clz	r2, r2
 8000de8:	2a00      	cmp	r2, #0
 8000dea:	f040 8092 	bne.w	8000f12 <__udivmoddi4+0x21a>
 8000dee:	eba1 010c 	sub.w	r1, r1, ip
 8000df2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000df6:	fa1f fe8c 	uxth.w	lr, ip
 8000dfa:	2601      	movs	r6, #1
 8000dfc:	0c20      	lsrs	r0, r4, #16
 8000dfe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e02:	fb07 1113 	mls	r1, r7, r3, r1
 8000e06:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e0a:	fb0e f003 	mul.w	r0, lr, r3
 8000e0e:	4288      	cmp	r0, r1
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x12c>
 8000e12:	eb1c 0101 	adds.w	r1, ip, r1
 8000e16:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e1a:	d202      	bcs.n	8000e22 <__udivmoddi4+0x12a>
 8000e1c:	4288      	cmp	r0, r1
 8000e1e:	f200 80cb 	bhi.w	8000fb8 <__udivmoddi4+0x2c0>
 8000e22:	4643      	mov	r3, r8
 8000e24:	1a09      	subs	r1, r1, r0
 8000e26:	b2a4      	uxth	r4, r4
 8000e28:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e2c:	fb07 1110 	mls	r1, r7, r0, r1
 8000e30:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e34:	fb0e fe00 	mul.w	lr, lr, r0
 8000e38:	45a6      	cmp	lr, r4
 8000e3a:	d908      	bls.n	8000e4e <__udivmoddi4+0x156>
 8000e3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e40:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e44:	d202      	bcs.n	8000e4c <__udivmoddi4+0x154>
 8000e46:	45a6      	cmp	lr, r4
 8000e48:	f200 80bb 	bhi.w	8000fc2 <__udivmoddi4+0x2ca>
 8000e4c:	4608      	mov	r0, r1
 8000e4e:	eba4 040e 	sub.w	r4, r4, lr
 8000e52:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e56:	e79c      	b.n	8000d92 <__udivmoddi4+0x9a>
 8000e58:	f1c6 0720 	rsb	r7, r6, #32
 8000e5c:	40b3      	lsls	r3, r6
 8000e5e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e62:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e66:	fa20 f407 	lsr.w	r4, r0, r7
 8000e6a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e6e:	431c      	orrs	r4, r3
 8000e70:	40f9      	lsrs	r1, r7
 8000e72:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e76:	fa00 f306 	lsl.w	r3, r0, r6
 8000e7a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e7e:	0c20      	lsrs	r0, r4, #16
 8000e80:	fa1f fe8c 	uxth.w	lr, ip
 8000e84:	fb09 1118 	mls	r1, r9, r8, r1
 8000e88:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e8c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e90:	4288      	cmp	r0, r1
 8000e92:	fa02 f206 	lsl.w	r2, r2, r6
 8000e96:	d90b      	bls.n	8000eb0 <__udivmoddi4+0x1b8>
 8000e98:	eb1c 0101 	adds.w	r1, ip, r1
 8000e9c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ea0:	f080 8088 	bcs.w	8000fb4 <__udivmoddi4+0x2bc>
 8000ea4:	4288      	cmp	r0, r1
 8000ea6:	f240 8085 	bls.w	8000fb4 <__udivmoddi4+0x2bc>
 8000eaa:	f1a8 0802 	sub.w	r8, r8, #2
 8000eae:	4461      	add	r1, ip
 8000eb0:	1a09      	subs	r1, r1, r0
 8000eb2:	b2a4      	uxth	r4, r4
 8000eb4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000eb8:	fb09 1110 	mls	r1, r9, r0, r1
 8000ebc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000ec0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ec4:	458e      	cmp	lr, r1
 8000ec6:	d908      	bls.n	8000eda <__udivmoddi4+0x1e2>
 8000ec8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ecc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ed0:	d26c      	bcs.n	8000fac <__udivmoddi4+0x2b4>
 8000ed2:	458e      	cmp	lr, r1
 8000ed4:	d96a      	bls.n	8000fac <__udivmoddi4+0x2b4>
 8000ed6:	3802      	subs	r0, #2
 8000ed8:	4461      	add	r1, ip
 8000eda:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ede:	fba0 9402 	umull	r9, r4, r0, r2
 8000ee2:	eba1 010e 	sub.w	r1, r1, lr
 8000ee6:	42a1      	cmp	r1, r4
 8000ee8:	46c8      	mov	r8, r9
 8000eea:	46a6      	mov	lr, r4
 8000eec:	d356      	bcc.n	8000f9c <__udivmoddi4+0x2a4>
 8000eee:	d053      	beq.n	8000f98 <__udivmoddi4+0x2a0>
 8000ef0:	b15d      	cbz	r5, 8000f0a <__udivmoddi4+0x212>
 8000ef2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ef6:	eb61 010e 	sbc.w	r1, r1, lr
 8000efa:	fa01 f707 	lsl.w	r7, r1, r7
 8000efe:	fa22 f306 	lsr.w	r3, r2, r6
 8000f02:	40f1      	lsrs	r1, r6
 8000f04:	431f      	orrs	r7, r3
 8000f06:	e9c5 7100 	strd	r7, r1, [r5]
 8000f0a:	2600      	movs	r6, #0
 8000f0c:	4631      	mov	r1, r6
 8000f0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f12:	f1c2 0320 	rsb	r3, r2, #32
 8000f16:	40d8      	lsrs	r0, r3
 8000f18:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f1c:	fa21 f303 	lsr.w	r3, r1, r3
 8000f20:	4091      	lsls	r1, r2
 8000f22:	4301      	orrs	r1, r0
 8000f24:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f28:	fa1f fe8c 	uxth.w	lr, ip
 8000f2c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f30:	fb07 3610 	mls	r6, r7, r0, r3
 8000f34:	0c0b      	lsrs	r3, r1, #16
 8000f36:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f3a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f3e:	429e      	cmp	r6, r3
 8000f40:	fa04 f402 	lsl.w	r4, r4, r2
 8000f44:	d908      	bls.n	8000f58 <__udivmoddi4+0x260>
 8000f46:	eb1c 0303 	adds.w	r3, ip, r3
 8000f4a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f4e:	d22f      	bcs.n	8000fb0 <__udivmoddi4+0x2b8>
 8000f50:	429e      	cmp	r6, r3
 8000f52:	d92d      	bls.n	8000fb0 <__udivmoddi4+0x2b8>
 8000f54:	3802      	subs	r0, #2
 8000f56:	4463      	add	r3, ip
 8000f58:	1b9b      	subs	r3, r3, r6
 8000f5a:	b289      	uxth	r1, r1
 8000f5c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f60:	fb07 3316 	mls	r3, r7, r6, r3
 8000f64:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f68:	fb06 f30e 	mul.w	r3, r6, lr
 8000f6c:	428b      	cmp	r3, r1
 8000f6e:	d908      	bls.n	8000f82 <__udivmoddi4+0x28a>
 8000f70:	eb1c 0101 	adds.w	r1, ip, r1
 8000f74:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f78:	d216      	bcs.n	8000fa8 <__udivmoddi4+0x2b0>
 8000f7a:	428b      	cmp	r3, r1
 8000f7c:	d914      	bls.n	8000fa8 <__udivmoddi4+0x2b0>
 8000f7e:	3e02      	subs	r6, #2
 8000f80:	4461      	add	r1, ip
 8000f82:	1ac9      	subs	r1, r1, r3
 8000f84:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f88:	e738      	b.n	8000dfc <__udivmoddi4+0x104>
 8000f8a:	462e      	mov	r6, r5
 8000f8c:	4628      	mov	r0, r5
 8000f8e:	e705      	b.n	8000d9c <__udivmoddi4+0xa4>
 8000f90:	4606      	mov	r6, r0
 8000f92:	e6e3      	b.n	8000d5c <__udivmoddi4+0x64>
 8000f94:	4618      	mov	r0, r3
 8000f96:	e6f8      	b.n	8000d8a <__udivmoddi4+0x92>
 8000f98:	454b      	cmp	r3, r9
 8000f9a:	d2a9      	bcs.n	8000ef0 <__udivmoddi4+0x1f8>
 8000f9c:	ebb9 0802 	subs.w	r8, r9, r2
 8000fa0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fa4:	3801      	subs	r0, #1
 8000fa6:	e7a3      	b.n	8000ef0 <__udivmoddi4+0x1f8>
 8000fa8:	4646      	mov	r6, r8
 8000faa:	e7ea      	b.n	8000f82 <__udivmoddi4+0x28a>
 8000fac:	4620      	mov	r0, r4
 8000fae:	e794      	b.n	8000eda <__udivmoddi4+0x1e2>
 8000fb0:	4640      	mov	r0, r8
 8000fb2:	e7d1      	b.n	8000f58 <__udivmoddi4+0x260>
 8000fb4:	46d0      	mov	r8, sl
 8000fb6:	e77b      	b.n	8000eb0 <__udivmoddi4+0x1b8>
 8000fb8:	3b02      	subs	r3, #2
 8000fba:	4461      	add	r1, ip
 8000fbc:	e732      	b.n	8000e24 <__udivmoddi4+0x12c>
 8000fbe:	4630      	mov	r0, r6
 8000fc0:	e709      	b.n	8000dd6 <__udivmoddi4+0xde>
 8000fc2:	4464      	add	r4, ip
 8000fc4:	3802      	subs	r0, #2
 8000fc6:	e742      	b.n	8000e4e <__udivmoddi4+0x156>

08000fc8 <__aeabi_idiv0>:
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop

08000fcc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b08a      	sub	sp, #40	; 0x28
 8000fd0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd2:	f107 0314 	add.w	r3, r7, #20
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	601a      	str	r2, [r3, #0]
 8000fda:	605a      	str	r2, [r3, #4]
 8000fdc:	609a      	str	r2, [r3, #8]
 8000fde:	60da      	str	r2, [r3, #12]
 8000fe0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fe2:	4b5f      	ldr	r3, [pc, #380]	; (8001160 <MX_GPIO_Init+0x194>)
 8000fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe6:	4a5e      	ldr	r2, [pc, #376]	; (8001160 <MX_GPIO_Init+0x194>)
 8000fe8:	f043 0302 	orr.w	r3, r3, #2
 8000fec:	6313      	str	r3, [r2, #48]	; 0x30
 8000fee:	4b5c      	ldr	r3, [pc, #368]	; (8001160 <MX_GPIO_Init+0x194>)
 8000ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff2:	f003 0302 	and.w	r3, r3, #2
 8000ff6:	613b      	str	r3, [r7, #16]
 8000ff8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ffa:	4b59      	ldr	r3, [pc, #356]	; (8001160 <MX_GPIO_Init+0x194>)
 8000ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffe:	4a58      	ldr	r2, [pc, #352]	; (8001160 <MX_GPIO_Init+0x194>)
 8001000:	f043 0301 	orr.w	r3, r3, #1
 8001004:	6313      	str	r3, [r2, #48]	; 0x30
 8001006:	4b56      	ldr	r3, [pc, #344]	; (8001160 <MX_GPIO_Init+0x194>)
 8001008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100a:	f003 0301 	and.w	r3, r3, #1
 800100e:	60fb      	str	r3, [r7, #12]
 8001010:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001012:	4b53      	ldr	r3, [pc, #332]	; (8001160 <MX_GPIO_Init+0x194>)
 8001014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001016:	4a52      	ldr	r2, [pc, #328]	; (8001160 <MX_GPIO_Init+0x194>)
 8001018:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800101c:	6313      	str	r3, [r2, #48]	; 0x30
 800101e:	4b50      	ldr	r3, [pc, #320]	; (8001160 <MX_GPIO_Init+0x194>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001022:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001026:	60bb      	str	r3, [r7, #8]
 8001028:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800102a:	4b4d      	ldr	r3, [pc, #308]	; (8001160 <MX_GPIO_Init+0x194>)
 800102c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102e:	4a4c      	ldr	r2, [pc, #304]	; (8001160 <MX_GPIO_Init+0x194>)
 8001030:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001034:	6313      	str	r3, [r2, #48]	; 0x30
 8001036:	4b4a      	ldr	r3, [pc, #296]	; (8001160 <MX_GPIO_Init+0x194>)
 8001038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800103e:	607b      	str	r3, [r7, #4]
 8001040:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001042:	4b47      	ldr	r3, [pc, #284]	; (8001160 <MX_GPIO_Init+0x194>)
 8001044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001046:	4a46      	ldr	r2, [pc, #280]	; (8001160 <MX_GPIO_Init+0x194>)
 8001048:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800104c:	6313      	str	r3, [r2, #48]	; 0x30
 800104e:	4b44      	ldr	r3, [pc, #272]	; (8001160 <MX_GPIO_Init+0x194>)
 8001050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001052:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001056:	603b      	str	r3, [r7, #0]
 8001058:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 800105a:	2200      	movs	r2, #0
 800105c:	2110      	movs	r1, #16
 800105e:	4841      	ldr	r0, [pc, #260]	; (8001164 <MX_GPIO_Init+0x198>)
 8001060:	f001 fb58 	bl	8002714 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_3|GPIO_PIN_1|GPIO_PIN_0, GPIO_PIN_RESET);
 8001064:	2200      	movs	r2, #0
 8001066:	210b      	movs	r1, #11
 8001068:	483f      	ldr	r0, [pc, #252]	; (8001168 <MX_GPIO_Init+0x19c>)
 800106a:	f001 fb53 	bl	8002714 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7|GPIO_PIN_6, GPIO_PIN_RESET);
 800106e:	2200      	movs	r2, #0
 8001070:	21c0      	movs	r1, #192	; 0xc0
 8001072:	483e      	ldr	r0, [pc, #248]	; (800116c <MX_GPIO_Init+0x1a0>)
 8001074:	f001 fb4e 	bl	8002714 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_6, GPIO_PIN_RESET);
 8001078:	2200      	movs	r2, #0
 800107a:	2140      	movs	r1, #64	; 0x40
 800107c:	483c      	ldr	r0, [pc, #240]	; (8001170 <MX_GPIO_Init+0x1a4>)
 800107e:	f001 fb49 	bl	8002714 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001082:	2310      	movs	r3, #16
 8001084:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001086:	2301      	movs	r3, #1
 8001088:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108a:	2300      	movs	r3, #0
 800108c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800108e:	2300      	movs	r3, #0
 8001090:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001092:	f107 0314 	add.w	r3, r7, #20
 8001096:	4619      	mov	r1, r3
 8001098:	4832      	ldr	r0, [pc, #200]	; (8001164 <MX_GPIO_Init+0x198>)
 800109a:	f000 ffcb 	bl	8002034 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800109e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80010a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010a4:	2300      	movs	r3, #0
 80010a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a8:	2300      	movs	r3, #0
 80010aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ac:	f107 0314 	add.w	r3, r7, #20
 80010b0:	4619      	mov	r1, r3
 80010b2:	4830      	ldr	r0, [pc, #192]	; (8001174 <MX_GPIO_Init+0x1a8>)
 80010b4:	f000 ffbe 	bl	8002034 <HAL_GPIO_Init>

  /*Configure GPIO pins : PI3 PI0 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_0;
 80010b8:	2309      	movs	r3, #9
 80010ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010bc:	2301      	movs	r3, #1
 80010be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c0:	2300      	movs	r3, #0
 80010c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c4:	2300      	movs	r3, #0
 80010c6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80010c8:	f107 0314 	add.w	r3, r7, #20
 80010cc:	4619      	mov	r1, r3
 80010ce:	4826      	ldr	r0, [pc, #152]	; (8001168 <MX_GPIO_Init+0x19c>)
 80010d0:	f000 ffb0 	bl	8002034 <HAL_GPIO_Init>

  /*Configure GPIO pin : PI2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80010d4:	2304      	movs	r3, #4
 80010d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010d8:	2300      	movs	r3, #0
 80010da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010dc:	2300      	movs	r3, #0
 80010de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80010e0:	f107 0314 	add.w	r3, r7, #20
 80010e4:	4619      	mov	r1, r3
 80010e6:	4820      	ldr	r0, [pc, #128]	; (8001168 <MX_GPIO_Init+0x19c>)
 80010e8:	f000 ffa4 	bl	8002034 <HAL_GPIO_Init>

  /*Configure GPIO pin : PI1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80010ec:	2302      	movs	r3, #2
 80010ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010f0:	2301      	movs	r3, #1
 80010f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f4:	2300      	movs	r3, #0
 80010f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80010f8:	2301      	movs	r3, #1
 80010fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80010fc:	f107 0314 	add.w	r3, r7, #20
 8001100:	4619      	mov	r1, r3
 8001102:	4819      	ldr	r0, [pc, #100]	; (8001168 <MX_GPIO_Init+0x19c>)
 8001104:	f000 ff96 	bl	8002034 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG7 PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8001108:	23c0      	movs	r3, #192	; 0xc0
 800110a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800110c:	2301      	movs	r3, #1
 800110e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001110:	2300      	movs	r3, #0
 8001112:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001114:	2300      	movs	r3, #0
 8001116:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001118:	f107 0314 	add.w	r3, r7, #20
 800111c:	4619      	mov	r1, r3
 800111e:	4813      	ldr	r0, [pc, #76]	; (800116c <MX_GPIO_Init+0x1a0>)
 8001120:	f000 ff88 	bl	8002034 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001124:	2301      	movs	r3, #1
 8001126:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001128:	2303      	movs	r3, #3
 800112a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112c:	2300      	movs	r3, #0
 800112e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001130:	f107 0314 	add.w	r3, r7, #20
 8001134:	4619      	mov	r1, r3
 8001136:	480f      	ldr	r0, [pc, #60]	; (8001174 <MX_GPIO_Init+0x1a8>)
 8001138:	f000 ff7c 	bl	8002034 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800113c:	2340      	movs	r3, #64	; 0x40
 800113e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001140:	2301      	movs	r3, #1
 8001142:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001144:	2300      	movs	r3, #0
 8001146:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001148:	2300      	movs	r3, #0
 800114a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800114c:	f107 0314 	add.w	r3, r7, #20
 8001150:	4619      	mov	r1, r3
 8001152:	4807      	ldr	r0, [pc, #28]	; (8001170 <MX_GPIO_Init+0x1a4>)
 8001154:	f000 ff6e 	bl	8002034 <HAL_GPIO_Init>

}
 8001158:	bf00      	nop
 800115a:	3728      	adds	r7, #40	; 0x28
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	40023800 	.word	0x40023800
 8001164:	40020400 	.word	0x40020400
 8001168:	40022000 	.word	0x40022000
 800116c:	40021800 	.word	0x40021800
 8001170:	40021c00 	.word	0x40021c00
 8001174:	40020000 	.word	0x40020000

08001178 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800117c:	4b1b      	ldr	r3, [pc, #108]	; (80011ec <MX_I2C1_Init+0x74>)
 800117e:	4a1c      	ldr	r2, [pc, #112]	; (80011f0 <MX_I2C1_Init+0x78>)
 8001180:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x6000030D;
 8001182:	4b1a      	ldr	r3, [pc, #104]	; (80011ec <MX_I2C1_Init+0x74>)
 8001184:	4a1b      	ldr	r2, [pc, #108]	; (80011f4 <MX_I2C1_Init+0x7c>)
 8001186:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001188:	4b18      	ldr	r3, [pc, #96]	; (80011ec <MX_I2C1_Init+0x74>)
 800118a:	2200      	movs	r2, #0
 800118c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800118e:	4b17      	ldr	r3, [pc, #92]	; (80011ec <MX_I2C1_Init+0x74>)
 8001190:	2201      	movs	r2, #1
 8001192:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001194:	4b15      	ldr	r3, [pc, #84]	; (80011ec <MX_I2C1_Init+0x74>)
 8001196:	2200      	movs	r2, #0
 8001198:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800119a:	4b14      	ldr	r3, [pc, #80]	; (80011ec <MX_I2C1_Init+0x74>)
 800119c:	2200      	movs	r2, #0
 800119e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80011a0:	4b12      	ldr	r3, [pc, #72]	; (80011ec <MX_I2C1_Init+0x74>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011a6:	4b11      	ldr	r3, [pc, #68]	; (80011ec <MX_I2C1_Init+0x74>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011ac:	4b0f      	ldr	r3, [pc, #60]	; (80011ec <MX_I2C1_Init+0x74>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011b2:	480e      	ldr	r0, [pc, #56]	; (80011ec <MX_I2C1_Init+0x74>)
 80011b4:	f001 fada 	bl	800276c <HAL_I2C_Init>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80011be:	f000 f95d 	bl	800147c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80011c2:	2100      	movs	r1, #0
 80011c4:	4809      	ldr	r0, [pc, #36]	; (80011ec <MX_I2C1_Init+0x74>)
 80011c6:	f001 fbf3 	bl	80029b0 <HAL_I2CEx_ConfigAnalogFilter>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80011d0:	f000 f954 	bl	800147c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80011d4:	2100      	movs	r1, #0
 80011d6:	4805      	ldr	r0, [pc, #20]	; (80011ec <MX_I2C1_Init+0x74>)
 80011d8:	f001 fc60 	bl	8002a9c <HAL_I2CEx_ConfigDigitalFilter>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80011e2:	f000 f94b 	bl	800147c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011e6:	bf00      	nop
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	200001f8 	.word	0x200001f8
 80011f0:	40005400 	.word	0x40005400
 80011f4:	6000030d 	.word	0x6000030d

080011f8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b0aa      	sub	sp, #168	; 0xa8
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001200:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001204:	2200      	movs	r2, #0
 8001206:	601a      	str	r2, [r3, #0]
 8001208:	605a      	str	r2, [r3, #4]
 800120a:	609a      	str	r2, [r3, #8]
 800120c:	60da      	str	r2, [r3, #12]
 800120e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001210:	f107 0310 	add.w	r3, r7, #16
 8001214:	2284      	movs	r2, #132	; 0x84
 8001216:	2100      	movs	r1, #0
 8001218:	4618      	mov	r0, r3
 800121a:	f005 f9c9 	bl	80065b0 <memset>
  if(i2cHandle->Instance==I2C1)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4a22      	ldr	r2, [pc, #136]	; (80012ac <HAL_I2C_MspInit+0xb4>)
 8001224:	4293      	cmp	r3, r2
 8001226:	d13c      	bne.n	80012a2 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001228:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800122c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800122e:	2300      	movs	r3, #0
 8001230:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001232:	f107 0310 	add.w	r3, r7, #16
 8001236:	4618      	mov	r0, r3
 8001238:	f002 faf0 	bl	800381c <HAL_RCCEx_PeriphCLKConfig>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001242:	f000 f91b 	bl	800147c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001246:	4b1a      	ldr	r3, [pc, #104]	; (80012b0 <HAL_I2C_MspInit+0xb8>)
 8001248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124a:	4a19      	ldr	r2, [pc, #100]	; (80012b0 <HAL_I2C_MspInit+0xb8>)
 800124c:	f043 0302 	orr.w	r3, r3, #2
 8001250:	6313      	str	r3, [r2, #48]	; 0x30
 8001252:	4b17      	ldr	r3, [pc, #92]	; (80012b0 <HAL_I2C_MspInit+0xb8>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001256:	f003 0302 	and.w	r3, r3, #2
 800125a:	60fb      	str	r3, [r7, #12]
 800125c:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800125e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001262:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001266:	2312      	movs	r3, #18
 8001268:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126c:	2300      	movs	r3, #0
 800126e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001272:	2303      	movs	r3, #3
 8001274:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001278:	2304      	movs	r3, #4
 800127a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800127e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001282:	4619      	mov	r1, r3
 8001284:	480b      	ldr	r0, [pc, #44]	; (80012b4 <HAL_I2C_MspInit+0xbc>)
 8001286:	f000 fed5 	bl	8002034 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800128a:	4b09      	ldr	r3, [pc, #36]	; (80012b0 <HAL_I2C_MspInit+0xb8>)
 800128c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128e:	4a08      	ldr	r2, [pc, #32]	; (80012b0 <HAL_I2C_MspInit+0xb8>)
 8001290:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001294:	6413      	str	r3, [r2, #64]	; 0x40
 8001296:	4b06      	ldr	r3, [pc, #24]	; (80012b0 <HAL_I2C_MspInit+0xb8>)
 8001298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800129a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800129e:	60bb      	str	r3, [r7, #8]
 80012a0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80012a2:	bf00      	nop
 80012a4:	37a8      	adds	r7, #168	; 0xa8
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	40005400 	.word	0x40005400
 80012b0:	40023800 	.word	0x40023800
 80012b4:	40020400 	.word	0x40020400

080012b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012be:	f000 fc66 	bl	8001b8e <HAL_Init>
*/

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012c2:	f000 f861 	bl	8001388 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012c6:	f7ff fe81 	bl	8000fcc <MX_GPIO_Init>
  MX_I2C1_Init();
 80012ca:	f7ff ff55 	bl	8001178 <MX_I2C1_Init>
  MX_TIM7_Init();
 80012ce:	f000 fb25 	bl	800191c <MX_TIM7_Init>
  MX_USART1_UART_Init();
 80012d2:	f000 fb79 	bl	80019c8 <MX_USART1_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80012d6:	f000 f8c5 	bl	8001464 <MX_NVIC_Init>




  /* UART interrupt initialization */
  MessageLen = sprintf((char*)Message, "JH VL53L0X test\n\r");
 80012da:	4926      	ldr	r1, [pc, #152]	; (8001374 <main+0xbc>)
 80012dc:	4826      	ldr	r0, [pc, #152]	; (8001378 <main+0xc0>)
 80012de:	f005 fdd9 	bl	8006e94 <siprintf>
 80012e2:	4603      	mov	r3, r0
 80012e4:	b2da      	uxtb	r2, r3
 80012e6:	4b25      	ldr	r3, [pc, #148]	; (800137c <main+0xc4>)
 80012e8:	701a      	strb	r2, [r3, #0]

  HAL_UART_Transmit(&huart1, Message, MessageLen, 100);
 80012ea:	4b24      	ldr	r3, [pc, #144]	; (800137c <main+0xc4>)
 80012ec:	781b      	ldrb	r3, [r3, #0]
 80012ee:	b29a      	uxth	r2, r3
 80012f0:	2364      	movs	r3, #100	; 0x64
 80012f2:	4921      	ldr	r1, [pc, #132]	; (8001378 <main+0xc0>)
 80012f4:	4822      	ldr	r0, [pc, #136]	; (8001380 <main+0xc8>)
 80012f6:	f003 ffbd 	bl	8005274 <HAL_UART_Transmit>
//		HAL_UART_Transmit(&huart1, Message, MessageLen, 1000);
 *
 *
 */

	for(int i = 0; i<10;i++){
 80012fa:	2300      	movs	r3, #0
 80012fc:	607b      	str	r3, [r7, #4]
 80012fe:	e017      	b.n	8001330 <main+0x78>
	stepRev(36);
 8001300:	2024      	movs	r0, #36	; 0x24
 8001302:	f000 f8cb 	bl	800149c <stepRev>

	MessageLen = sprintf((char*)Message, "%d \n",i);
 8001306:	687a      	ldr	r2, [r7, #4]
 8001308:	491e      	ldr	r1, [pc, #120]	; (8001384 <main+0xcc>)
 800130a:	481b      	ldr	r0, [pc, #108]	; (8001378 <main+0xc0>)
 800130c:	f005 fdc2 	bl	8006e94 <siprintf>
 8001310:	4603      	mov	r3, r0
 8001312:	b2da      	uxtb	r2, r3
 8001314:	4b19      	ldr	r3, [pc, #100]	; (800137c <main+0xc4>)
 8001316:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, Message, MessageLen, 1000);
 8001318:	4b18      	ldr	r3, [pc, #96]	; (800137c <main+0xc4>)
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	b29a      	uxth	r2, r3
 800131e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001322:	4915      	ldr	r1, [pc, #84]	; (8001378 <main+0xc0>)
 8001324:	4816      	ldr	r0, [pc, #88]	; (8001380 <main+0xc8>)
 8001326:	f003 ffa5 	bl	8005274 <HAL_UART_Transmit>
	for(int i = 0; i<10;i++){
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	3301      	adds	r3, #1
 800132e:	607b      	str	r3, [r7, #4]
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2b09      	cmp	r3, #9
 8001334:	dde4      	ble.n	8001300 <main+0x48>
	}
	for(int i = 10; i<11;i++){
 8001336:	230a      	movs	r3, #10
 8001338:	603b      	str	r3, [r7, #0]
 800133a:	e017      	b.n	800136c <main+0xb4>
		stepLin(10);
 800133c:	200a      	movs	r0, #10
 800133e:	f000 f917 	bl	8001570 <stepLin>

		MessageLen = sprintf((char*)Message, "%d \n",i);
 8001342:	683a      	ldr	r2, [r7, #0]
 8001344:	490f      	ldr	r1, [pc, #60]	; (8001384 <main+0xcc>)
 8001346:	480c      	ldr	r0, [pc, #48]	; (8001378 <main+0xc0>)
 8001348:	f005 fda4 	bl	8006e94 <siprintf>
 800134c:	4603      	mov	r3, r0
 800134e:	b2da      	uxtb	r2, r3
 8001350:	4b0a      	ldr	r3, [pc, #40]	; (800137c <main+0xc4>)
 8001352:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart1, Message, MessageLen, 1000);
 8001354:	4b09      	ldr	r3, [pc, #36]	; (800137c <main+0xc4>)
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	b29a      	uxth	r2, r3
 800135a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800135e:	4906      	ldr	r1, [pc, #24]	; (8001378 <main+0xc0>)
 8001360:	4807      	ldr	r0, [pc, #28]	; (8001380 <main+0xc8>)
 8001362:	f003 ff87 	bl	8005274 <HAL_UART_Transmit>
	for(int i = 10; i<11;i++){
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	3301      	adds	r3, #1
 800136a:	603b      	str	r3, [r7, #0]
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	2b0a      	cmp	r3, #10
 8001370:	dde4      	ble.n	800133c <main+0x84>
	for(int i = 0; i<10;i++){
 8001372:	e7c2      	b.n	80012fa <main+0x42>
 8001374:	08009388 	.word	0x08009388
 8001378:	2000024c 	.word	0x2000024c
 800137c:	2000028c 	.word	0x2000028c
 8001380:	200002e0 	.word	0x200002e0
 8001384:	0800939c 	.word	0x0800939c

08001388 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b094      	sub	sp, #80	; 0x50
 800138c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800138e:	f107 0320 	add.w	r3, r7, #32
 8001392:	2230      	movs	r2, #48	; 0x30
 8001394:	2100      	movs	r1, #0
 8001396:	4618      	mov	r0, r3
 8001398:	f005 f90a 	bl	80065b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800139c:	f107 030c 	add.w	r3, r7, #12
 80013a0:	2200      	movs	r2, #0
 80013a2:	601a      	str	r2, [r3, #0]
 80013a4:	605a      	str	r2, [r3, #4]
 80013a6:	609a      	str	r2, [r3, #8]
 80013a8:	60da      	str	r2, [r3, #12]
 80013aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013ac:	4b2b      	ldr	r3, [pc, #172]	; (800145c <SystemClock_Config+0xd4>)
 80013ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b0:	4a2a      	ldr	r2, [pc, #168]	; (800145c <SystemClock_Config+0xd4>)
 80013b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013b6:	6413      	str	r3, [r2, #64]	; 0x40
 80013b8:	4b28      	ldr	r3, [pc, #160]	; (800145c <SystemClock_Config+0xd4>)
 80013ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013c0:	60bb      	str	r3, [r7, #8]
 80013c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013c4:	4b26      	ldr	r3, [pc, #152]	; (8001460 <SystemClock_Config+0xd8>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a25      	ldr	r2, [pc, #148]	; (8001460 <SystemClock_Config+0xd8>)
 80013ca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80013ce:	6013      	str	r3, [r2, #0]
 80013d0:	4b23      	ldr	r3, [pc, #140]	; (8001460 <SystemClock_Config+0xd8>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80013d8:	607b      	str	r3, [r7, #4]
 80013da:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013dc:	2301      	movs	r3, #1
 80013de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013e4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013e6:	2302      	movs	r3, #2
 80013e8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013ea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80013ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80013f0:	2319      	movs	r3, #25
 80013f2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 432;
 80013f4:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 80013f8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013fa:	2302      	movs	r3, #2
 80013fc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80013fe:	2302      	movs	r3, #2
 8001400:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001402:	f107 0320 	add.w	r3, r7, #32
 8001406:	4618      	mov	r0, r3
 8001408:	f001 fc0c 	bl	8002c24 <HAL_RCC_OscConfig>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001412:	f000 f833 	bl	800147c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001416:	f001 fbb5 	bl	8002b84 <HAL_PWREx_EnableOverDrive>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001420:	f000 f82c 	bl	800147c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001424:	230f      	movs	r3, #15
 8001426:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001428:	2302      	movs	r3, #2
 800142a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800142c:	2300      	movs	r3, #0
 800142e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001430:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001434:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001436:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800143a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800143c:	f107 030c 	add.w	r3, r7, #12
 8001440:	2107      	movs	r1, #7
 8001442:	4618      	mov	r0, r3
 8001444:	f001 ff48 	bl	80032d8 <HAL_RCC_ClockConfig>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <SystemClock_Config+0xca>
  {
    Error_Handler();
 800144e:	f000 f815 	bl	800147c <Error_Handler>
  }
}
 8001452:	bf00      	nop
 8001454:	3750      	adds	r7, #80	; 0x50
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	40023800 	.word	0x40023800
 8001460:	40007000 	.word	0x40007000

08001464 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0
  /* TIM7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001468:	2200      	movs	r2, #0
 800146a:	2100      	movs	r1, #0
 800146c:	2037      	movs	r0, #55	; 0x37
 800146e:	f000 fcff 	bl	8001e70 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001472:	2037      	movs	r0, #55	; 0x37
 8001474:	f000 fd28 	bl	8001ec8 <HAL_NVIC_EnableIRQ>
}
 8001478:	bf00      	nop
 800147a:	bd80      	pop	{r7, pc}

0800147c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001480:	b672      	cpsid	i
}
 8001482:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001484:	e7fe      	b.n	8001484 <Error_Handler+0x8>

08001486 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8001486:	b480      	push	{r7}
 8001488:	b083      	sub	sp, #12
 800148a:	af00      	add	r7, sp, #0
 800148c:	6078      	str	r0, [r7, #4]
 800148e:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8001490:	bf00      	nop
 8001492:	370c      	adds	r7, #12
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr

0800149c <stepRev>:
#include "motor.h"
#include "gpio.h"

#define PULSE 200

void stepRev(int ANG) {
 800149c:	b580      	push	{r7, lr}
 800149e:	b086      	sub	sp, #24
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
	// ENA D2 PG7 GPIOG GPIO_PIN_6
	// CLK D3 PB4 GPIOB GPIO_PIN_4
	// DIR D4 PG7 GPIOG GPIO_PIN_7


  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);  // ENA
 80014a4:	2200      	movs	r2, #0
 80014a6:	2140      	movs	r1, #64	; 0x40
 80014a8:	482e      	ldr	r0, [pc, #184]	; (8001564 <stepRev+0xc8>)
 80014aa:	f001 f933 	bl	8002714 <HAL_GPIO_WritePin>

  if (ANG != 0) {
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d04d      	beq.n	8001550 <stepRev+0xb4>
    int direction = (ANG > 0) ? 1 : -1;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	dd01      	ble.n	80014be <stepRev+0x22>
 80014ba:	2301      	movs	r3, #1
 80014bc:	e001      	b.n	80014c2 <stepRev+0x26>
 80014be:	f04f 33ff 	mov.w	r3, #4294967295
 80014c2:	613b      	str	r3, [r7, #16]
    ANG *= direction;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	693a      	ldr	r2, [r7, #16]
 80014c8:	fb02 f303 	mul.w	r3, r2, r3
 80014cc:	607b      	str	r3, [r7, #4]
    HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7, direction == 1 ? GPIO_PIN_SET : GPIO_PIN_RESET); // DIR
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	2b01      	cmp	r3, #1
 80014d2:	bf0c      	ite	eq
 80014d4:	2301      	moveq	r3, #1
 80014d6:	2300      	movne	r3, #0
 80014d8:	b2db      	uxtb	r3, r3
 80014da:	461a      	mov	r2, r3
 80014dc:	2180      	movs	r1, #128	; 0x80
 80014de:	4821      	ldr	r0, [pc, #132]	; (8001564 <stepRev+0xc8>)
 80014e0:	f001 f918 	bl	8002714 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET); // ENA
 80014e4:	2200      	movs	r2, #0
 80014e6:	2140      	movs	r1, #64	; 0x40
 80014e8:	481e      	ldr	r0, [pc, #120]	; (8001564 <stepRev+0xc8>)
 80014ea:	f001 f913 	bl	8002714 <HAL_GPIO_WritePin>
    uint32_t steps = PULSE * ANG / 360.0;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	22c8      	movs	r2, #200	; 0xc8
 80014f2:	fb02 f303 	mul.w	r3, r2, r3
 80014f6:	4618      	mov	r0, r3
 80014f8:	f7ff f834 	bl	8000564 <__aeabi_i2d>
 80014fc:	f04f 0200 	mov.w	r2, #0
 8001500:	4b19      	ldr	r3, [pc, #100]	; (8001568 <stepRev+0xcc>)
 8001502:	f7ff f9c3 	bl	800088c <__aeabi_ddiv>
 8001506:	4602      	mov	r2, r0
 8001508:	460b      	mov	r3, r1
 800150a:	4610      	mov	r0, r2
 800150c:	4619      	mov	r1, r3
 800150e:	f7ff fb6b 	bl	8000be8 <__aeabi_d2uiz>
 8001512:	4603      	mov	r3, r0
 8001514:	60fb      	str	r3, [r7, #12]
    uint32_t pulse_delay_ms_ = 5; // 6rpm
 8001516:	2305      	movs	r3, #5
 8001518:	60bb      	str	r3, [r7, #8]

    for (int i = 0; i < steps; i++) {
 800151a:	2300      	movs	r3, #0
 800151c:	617b      	str	r3, [r7, #20]
 800151e:	e012      	b.n	8001546 <stepRev+0xaa>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET); //CLK
 8001520:	2201      	movs	r2, #1
 8001522:	2110      	movs	r1, #16
 8001524:	4811      	ldr	r0, [pc, #68]	; (800156c <stepRev+0xd0>)
 8001526:	f001 f8f5 	bl	8002714 <HAL_GPIO_WritePin>
      HAL_Delay(pulse_delay_ms_);
 800152a:	68b8      	ldr	r0, [r7, #8]
 800152c:	f000 fb8c 	bl	8001c48 <HAL_Delay>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET); //CLK
 8001530:	2200      	movs	r2, #0
 8001532:	2110      	movs	r1, #16
 8001534:	480d      	ldr	r0, [pc, #52]	; (800156c <stepRev+0xd0>)
 8001536:	f001 f8ed 	bl	8002714 <HAL_GPIO_WritePin>
      HAL_Delay(pulse_delay_ms_);
 800153a:	68b8      	ldr	r0, [r7, #8]
 800153c:	f000 fb84 	bl	8001c48 <HAL_Delay>
    for (int i = 0; i < steps; i++) {
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	3301      	adds	r3, #1
 8001544:	617b      	str	r3, [r7, #20]
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	68fa      	ldr	r2, [r7, #12]
 800154a:	429a      	cmp	r2, r3
 800154c:	d8e8      	bhi.n	8001520 <stepRev+0x84>
  }
  else {
    HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET); // ENA
  }

}
 800154e:	e004      	b.n	800155a <stepRev+0xbe>
    HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET); // ENA
 8001550:	2200      	movs	r2, #0
 8001552:	2140      	movs	r1, #64	; 0x40
 8001554:	4803      	ldr	r0, [pc, #12]	; (8001564 <stepRev+0xc8>)
 8001556:	f001 f8dd 	bl	8002714 <HAL_GPIO_WritePin>
}
 800155a:	bf00      	nop
 800155c:	3718      	adds	r7, #24
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	40021800 	.word	0x40021800
 8001568:	40768000 	.word	0x40768000
 800156c:	40020400 	.word	0x40020400

08001570 <stepLin>:

void stepLin(int DIST) {
 8001570:	b580      	push	{r7, lr}
 8001572:	b088      	sub	sp, #32
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]

	// ENA D5 PI0 GPIOI GPIO_PIN_0
	// CLK D6 PH6 GPIOH GPIO_PIN_6
	// DIR D7 PI3 GPIOI GPIO_PIN_3

	float ANG = DIST * 360.0 / 8; // 1 rev -> 8 mm
 8001578:	6878      	ldr	r0, [r7, #4]
 800157a:	f7fe fff3 	bl	8000564 <__aeabi_i2d>
 800157e:	f04f 0200 	mov.w	r2, #0
 8001582:	4b44      	ldr	r3, [pc, #272]	; (8001694 <stepLin+0x124>)
 8001584:	f7ff f858 	bl	8000638 <__aeabi_dmul>
 8001588:	4602      	mov	r2, r0
 800158a:	460b      	mov	r3, r1
 800158c:	4610      	mov	r0, r2
 800158e:	4619      	mov	r1, r3
 8001590:	f04f 0200 	mov.w	r2, #0
 8001594:	4b40      	ldr	r3, [pc, #256]	; (8001698 <stepLin+0x128>)
 8001596:	f7ff f979 	bl	800088c <__aeabi_ddiv>
 800159a:	4602      	mov	r2, r0
 800159c:	460b      	mov	r3, r1
 800159e:	4610      	mov	r0, r2
 80015a0:	4619      	mov	r1, r3
 80015a2:	f7ff fb41 	bl	8000c28 <__aeabi_d2f>
 80015a6:	4603      	mov	r3, r0
 80015a8:	61bb      	str	r3, [r7, #24]


  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0, GPIO_PIN_SET);  // ENA
 80015aa:	2201      	movs	r2, #1
 80015ac:	2101      	movs	r1, #1
 80015ae:	483b      	ldr	r0, [pc, #236]	; (800169c <stepLin+0x12c>)
 80015b0:	f001 f8b0 	bl	8002714 <HAL_GPIO_WritePin>

  if (ANG != 0) {
 80015b4:	edd7 7a06 	vldr	s15, [r7, #24]
 80015b8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80015bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015c0:	d05a      	beq.n	8001678 <stepLin+0x108>
    int direction = (ANG > 0) ? 1 : -1;
 80015c2:	edd7 7a06 	vldr	s15, [r7, #24]
 80015c6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80015ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015ce:	dd01      	ble.n	80015d4 <stepLin+0x64>
 80015d0:	2301      	movs	r3, #1
 80015d2:	e001      	b.n	80015d8 <stepLin+0x68>
 80015d4:	f04f 33ff 	mov.w	r3, #4294967295
 80015d8:	617b      	str	r3, [r7, #20]
    ANG *= direction;
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	ee07 3a90 	vmov	s15, r3
 80015e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015e4:	ed97 7a06 	vldr	s14, [r7, #24]
 80015e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015ec:	edc7 7a06 	vstr	s15, [r7, #24]
    HAL_GPIO_WritePin(GPIOI, GPIO_PIN_3, direction == 1 ? GPIO_PIN_SET : GPIO_PIN_RESET); // DIR
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	2b01      	cmp	r3, #1
 80015f4:	bf0c      	ite	eq
 80015f6:	2301      	moveq	r3, #1
 80015f8:	2300      	movne	r3, #0
 80015fa:	b2db      	uxtb	r3, r3
 80015fc:	461a      	mov	r2, r3
 80015fe:	2108      	movs	r1, #8
 8001600:	4826      	ldr	r0, [pc, #152]	; (800169c <stepLin+0x12c>)
 8001602:	f001 f887 	bl	8002714 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0, GPIO_PIN_RESET);  // ENA
 8001606:	2200      	movs	r2, #0
 8001608:	2101      	movs	r1, #1
 800160a:	4824      	ldr	r0, [pc, #144]	; (800169c <stepLin+0x12c>)
 800160c:	f001 f882 	bl	8002714 <HAL_GPIO_WritePin>
    uint32_t steps = PULSE * ANG / 360.0;
 8001610:	edd7 7a06 	vldr	s15, [r7, #24]
 8001614:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80016a0 <stepLin+0x130>
 8001618:	ee67 7a87 	vmul.f32	s15, s15, s14
 800161c:	ee17 0a90 	vmov	r0, s15
 8001620:	f7fe ffb2 	bl	8000588 <__aeabi_f2d>
 8001624:	f04f 0200 	mov.w	r2, #0
 8001628:	4b1a      	ldr	r3, [pc, #104]	; (8001694 <stepLin+0x124>)
 800162a:	f7ff f92f 	bl	800088c <__aeabi_ddiv>
 800162e:	4602      	mov	r2, r0
 8001630:	460b      	mov	r3, r1
 8001632:	4610      	mov	r0, r2
 8001634:	4619      	mov	r1, r3
 8001636:	f7ff fad7 	bl	8000be8 <__aeabi_d2uiz>
 800163a:	4603      	mov	r3, r0
 800163c:	613b      	str	r3, [r7, #16]
    uint32_t pulse_delay_ms_ = 1; // 6rpm
 800163e:	2301      	movs	r3, #1
 8001640:	60fb      	str	r3, [r7, #12]

    for (int i = 0; i < steps; i++) {
 8001642:	2300      	movs	r3, #0
 8001644:	61fb      	str	r3, [r7, #28]
 8001646:	e012      	b.n	800166e <stepLin+0xfe>
      HAL_GPIO_WritePin(GPIOH, GPIO_PIN_6, GPIO_PIN_SET); // CLK
 8001648:	2201      	movs	r2, #1
 800164a:	2140      	movs	r1, #64	; 0x40
 800164c:	4815      	ldr	r0, [pc, #84]	; (80016a4 <stepLin+0x134>)
 800164e:	f001 f861 	bl	8002714 <HAL_GPIO_WritePin>
      HAL_Delay(pulse_delay_ms_);
 8001652:	68f8      	ldr	r0, [r7, #12]
 8001654:	f000 faf8 	bl	8001c48 <HAL_Delay>
      HAL_GPIO_WritePin(GPIOH, GPIO_PIN_6, GPIO_PIN_RESET); // CLK
 8001658:	2200      	movs	r2, #0
 800165a:	2140      	movs	r1, #64	; 0x40
 800165c:	4811      	ldr	r0, [pc, #68]	; (80016a4 <stepLin+0x134>)
 800165e:	f001 f859 	bl	8002714 <HAL_GPIO_WritePin>
      HAL_Delay(pulse_delay_ms_);
 8001662:	68f8      	ldr	r0, [r7, #12]
 8001664:	f000 faf0 	bl	8001c48 <HAL_Delay>
    for (int i = 0; i < steps; i++) {
 8001668:	69fb      	ldr	r3, [r7, #28]
 800166a:	3301      	adds	r3, #1
 800166c:	61fb      	str	r3, [r7, #28]
 800166e:	69fb      	ldr	r3, [r7, #28]
 8001670:	693a      	ldr	r2, [r7, #16]
 8001672:	429a      	cmp	r2, r3
 8001674:	d8e8      	bhi.n	8001648 <stepLin+0xd8>
 8001676:	e004      	b.n	8001682 <stepLin+0x112>
    }
  }
  else {
    HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0, GPIO_PIN_RESET);  // ENA
 8001678:	2200      	movs	r2, #0
 800167a:	2101      	movs	r1, #1
 800167c:	4807      	ldr	r0, [pc, #28]	; (800169c <stepLin+0x12c>)
 800167e:	f001 f849 	bl	8002714 <HAL_GPIO_WritePin>
  }

  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0, GPIO_PIN_SET);  // ENA
 8001682:	2201      	movs	r2, #1
 8001684:	2101      	movs	r1, #1
 8001686:	4805      	ldr	r0, [pc, #20]	; (800169c <stepLin+0x12c>)
 8001688:	f001 f844 	bl	8002714 <HAL_GPIO_WritePin>

}
 800168c:	bf00      	nop
 800168e:	3720      	adds	r7, #32
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	40768000 	.word	0x40768000
 8001698:	40200000 	.word	0x40200000
 800169c:	40022000 	.word	0x40022000
 80016a0:	43480000 	.word	0x43480000
 80016a4:	40021c00 	.word	0x40021c00

080016a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b083      	sub	sp, #12
 80016ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80016ae:	4b0f      	ldr	r3, [pc, #60]	; (80016ec <HAL_MspInit+0x44>)
 80016b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b2:	4a0e      	ldr	r2, [pc, #56]	; (80016ec <HAL_MspInit+0x44>)
 80016b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016b8:	6413      	str	r3, [r2, #64]	; 0x40
 80016ba:	4b0c      	ldr	r3, [pc, #48]	; (80016ec <HAL_MspInit+0x44>)
 80016bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016c2:	607b      	str	r3, [r7, #4]
 80016c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016c6:	4b09      	ldr	r3, [pc, #36]	; (80016ec <HAL_MspInit+0x44>)
 80016c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ca:	4a08      	ldr	r2, [pc, #32]	; (80016ec <HAL_MspInit+0x44>)
 80016cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016d0:	6453      	str	r3, [r2, #68]	; 0x44
 80016d2:	4b06      	ldr	r3, [pc, #24]	; (80016ec <HAL_MspInit+0x44>)
 80016d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016da:	603b      	str	r3, [r7, #0]
 80016dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016de:	bf00      	nop
 80016e0:	370c      	adds	r7, #12
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr
 80016ea:	bf00      	nop
 80016ec:	40023800 	.word	0x40023800

080016f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016f4:	e7fe      	b.n	80016f4 <NMI_Handler+0x4>

080016f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016f6:	b480      	push	{r7}
 80016f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016fa:	e7fe      	b.n	80016fa <HardFault_Handler+0x4>

080016fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001700:	e7fe      	b.n	8001700 <MemManage_Handler+0x4>

08001702 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001702:	b480      	push	{r7}
 8001704:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001706:	e7fe      	b.n	8001706 <BusFault_Handler+0x4>

08001708 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800170c:	e7fe      	b.n	800170c <UsageFault_Handler+0x4>

0800170e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800170e:	b480      	push	{r7}
 8001710:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001712:	bf00      	nop
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr

0800171c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001720:	bf00      	nop
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr

0800172a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800172a:	b480      	push	{r7}
 800172c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800172e:	bf00      	nop
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr

08001738 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800173c:	f000 fa64 	bl	8001c08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001740:	bf00      	nop
 8001742:	bd80      	pop	{r7, pc}

08001744 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001748:	4802      	ldr	r0, [pc, #8]	; (8001754 <USART1_IRQHandler+0x10>)
 800174a:	f003 fe17 	bl	800537c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800174e:	bf00      	nop
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	200002e0 	.word	0x200002e0

08001758 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800175c:	4802      	ldr	r0, [pc, #8]	; (8001768 <TIM7_IRQHandler+0x10>)
 800175e:	f003 f961 	bl	8004a24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001762:	bf00      	nop
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	20000294 	.word	0x20000294

0800176c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  return 1;
 8001770:	2301      	movs	r3, #1
}
 8001772:	4618      	mov	r0, r3
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr

0800177c <_kill>:

int _kill(int pid, int sig)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b082      	sub	sp, #8
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
 8001784:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001786:	f004 fedb 	bl	8006540 <__errno>
 800178a:	4603      	mov	r3, r0
 800178c:	2216      	movs	r2, #22
 800178e:	601a      	str	r2, [r3, #0]
  return -1;
 8001790:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001794:	4618      	mov	r0, r3
 8001796:	3708      	adds	r7, #8
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}

0800179c <_exit>:

void _exit (int status)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80017a4:	f04f 31ff 	mov.w	r1, #4294967295
 80017a8:	6878      	ldr	r0, [r7, #4]
 80017aa:	f7ff ffe7 	bl	800177c <_kill>
  while (1) {}    /* Make sure we hang here */
 80017ae:	e7fe      	b.n	80017ae <_exit+0x12>

080017b0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b086      	sub	sp, #24
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	60f8      	str	r0, [r7, #12]
 80017b8:	60b9      	str	r1, [r7, #8]
 80017ba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017bc:	2300      	movs	r3, #0
 80017be:	617b      	str	r3, [r7, #20]
 80017c0:	e00a      	b.n	80017d8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80017c2:	f3af 8000 	nop.w
 80017c6:	4601      	mov	r1, r0
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	1c5a      	adds	r2, r3, #1
 80017cc:	60ba      	str	r2, [r7, #8]
 80017ce:	b2ca      	uxtb	r2, r1
 80017d0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	3301      	adds	r3, #1
 80017d6:	617b      	str	r3, [r7, #20]
 80017d8:	697a      	ldr	r2, [r7, #20]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	429a      	cmp	r2, r3
 80017de:	dbf0      	blt.n	80017c2 <_read+0x12>
  }

  return len;
 80017e0:	687b      	ldr	r3, [r7, #4]
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	3718      	adds	r7, #24
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}

080017ea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80017ea:	b580      	push	{r7, lr}
 80017ec:	b086      	sub	sp, #24
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	60f8      	str	r0, [r7, #12]
 80017f2:	60b9      	str	r1, [r7, #8]
 80017f4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017f6:	2300      	movs	r3, #0
 80017f8:	617b      	str	r3, [r7, #20]
 80017fa:	e009      	b.n	8001810 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80017fc:	68bb      	ldr	r3, [r7, #8]
 80017fe:	1c5a      	adds	r2, r3, #1
 8001800:	60ba      	str	r2, [r7, #8]
 8001802:	781b      	ldrb	r3, [r3, #0]
 8001804:	4618      	mov	r0, r3
 8001806:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	3301      	adds	r3, #1
 800180e:	617b      	str	r3, [r7, #20]
 8001810:	697a      	ldr	r2, [r7, #20]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	429a      	cmp	r2, r3
 8001816:	dbf1      	blt.n	80017fc <_write+0x12>
  }
  return len;
 8001818:	687b      	ldr	r3, [r7, #4]
}
 800181a:	4618      	mov	r0, r3
 800181c:	3718      	adds	r7, #24
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}

08001822 <_close>:

int _close(int file)
{
 8001822:	b480      	push	{r7}
 8001824:	b083      	sub	sp, #12
 8001826:	af00      	add	r7, sp, #0
 8001828:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800182a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800182e:	4618      	mov	r0, r3
 8001830:	370c      	adds	r7, #12
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr

0800183a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800183a:	b480      	push	{r7}
 800183c:	b083      	sub	sp, #12
 800183e:	af00      	add	r7, sp, #0
 8001840:	6078      	str	r0, [r7, #4]
 8001842:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800184a:	605a      	str	r2, [r3, #4]
  return 0;
 800184c:	2300      	movs	r3, #0
}
 800184e:	4618      	mov	r0, r3
 8001850:	370c      	adds	r7, #12
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr

0800185a <_isatty>:

int _isatty(int file)
{
 800185a:	b480      	push	{r7}
 800185c:	b083      	sub	sp, #12
 800185e:	af00      	add	r7, sp, #0
 8001860:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001862:	2301      	movs	r3, #1
}
 8001864:	4618      	mov	r0, r3
 8001866:	370c      	adds	r7, #12
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr

08001870 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001870:	b480      	push	{r7}
 8001872:	b085      	sub	sp, #20
 8001874:	af00      	add	r7, sp, #0
 8001876:	60f8      	str	r0, [r7, #12]
 8001878:	60b9      	str	r1, [r7, #8]
 800187a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800187c:	2300      	movs	r3, #0
}
 800187e:	4618      	mov	r0, r3
 8001880:	3714      	adds	r7, #20
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr
	...

0800188c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b086      	sub	sp, #24
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001894:	4a14      	ldr	r2, [pc, #80]	; (80018e8 <_sbrk+0x5c>)
 8001896:	4b15      	ldr	r3, [pc, #84]	; (80018ec <_sbrk+0x60>)
 8001898:	1ad3      	subs	r3, r2, r3
 800189a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018a0:	4b13      	ldr	r3, [pc, #76]	; (80018f0 <_sbrk+0x64>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d102      	bne.n	80018ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018a8:	4b11      	ldr	r3, [pc, #68]	; (80018f0 <_sbrk+0x64>)
 80018aa:	4a12      	ldr	r2, [pc, #72]	; (80018f4 <_sbrk+0x68>)
 80018ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018ae:	4b10      	ldr	r3, [pc, #64]	; (80018f0 <_sbrk+0x64>)
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	4413      	add	r3, r2
 80018b6:	693a      	ldr	r2, [r7, #16]
 80018b8:	429a      	cmp	r2, r3
 80018ba:	d207      	bcs.n	80018cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018bc:	f004 fe40 	bl	8006540 <__errno>
 80018c0:	4603      	mov	r3, r0
 80018c2:	220c      	movs	r2, #12
 80018c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018c6:	f04f 33ff 	mov.w	r3, #4294967295
 80018ca:	e009      	b.n	80018e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018cc:	4b08      	ldr	r3, [pc, #32]	; (80018f0 <_sbrk+0x64>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018d2:	4b07      	ldr	r3, [pc, #28]	; (80018f0 <_sbrk+0x64>)
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	4413      	add	r3, r2
 80018da:	4a05      	ldr	r2, [pc, #20]	; (80018f0 <_sbrk+0x64>)
 80018dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018de:	68fb      	ldr	r3, [r7, #12]
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	3718      	adds	r7, #24
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	20050000 	.word	0x20050000
 80018ec:	00000400 	.word	0x00000400
 80018f0:	20000290 	.word	0x20000290
 80018f4:	20000380 	.word	0x20000380

080018f8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018fc:	4b06      	ldr	r3, [pc, #24]	; (8001918 <SystemInit+0x20>)
 80018fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001902:	4a05      	ldr	r2, [pc, #20]	; (8001918 <SystemInit+0x20>)
 8001904:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001908:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800190c:	bf00      	nop
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr
 8001916:	bf00      	nop
 8001918:	e000ed00 	.word	0xe000ed00

0800191c <MX_TIM7_Init>:

TIM_HandleTypeDef htim7;

/* TIM7 init function */
void MX_TIM7_Init(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b084      	sub	sp, #16
 8001920:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001922:	1d3b      	adds	r3, r7, #4
 8001924:	2200      	movs	r2, #0
 8001926:	601a      	str	r2, [r3, #0]
 8001928:	605a      	str	r2, [r3, #4]
 800192a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800192c:	4b14      	ldr	r3, [pc, #80]	; (8001980 <MX_TIM7_Init+0x64>)
 800192e:	4a15      	ldr	r2, [pc, #84]	; (8001984 <MX_TIM7_Init+0x68>)
 8001930:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 10800-1;
 8001932:	4b13      	ldr	r3, [pc, #76]	; (8001980 <MX_TIM7_Init+0x64>)
 8001934:	f642 222f 	movw	r2, #10799	; 0x2a2f
 8001938:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800193a:	4b11      	ldr	r3, [pc, #68]	; (8001980 <MX_TIM7_Init+0x64>)
 800193c:	2200      	movs	r2, #0
 800193e:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 100-1;
 8001940:	4b0f      	ldr	r3, [pc, #60]	; (8001980 <MX_TIM7_Init+0x64>)
 8001942:	2263      	movs	r2, #99	; 0x63
 8001944:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001946:	4b0e      	ldr	r3, [pc, #56]	; (8001980 <MX_TIM7_Init+0x64>)
 8001948:	2200      	movs	r2, #0
 800194a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800194c:	480c      	ldr	r0, [pc, #48]	; (8001980 <MX_TIM7_Init+0x64>)
 800194e:	f002 ff49 	bl	80047e4 <HAL_TIM_Base_Init>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	d001      	beq.n	800195c <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8001958:	f7ff fd90 	bl	800147c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800195c:	2300      	movs	r3, #0
 800195e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001960:	2300      	movs	r3, #0
 8001962:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001964:	1d3b      	adds	r3, r7, #4
 8001966:	4619      	mov	r1, r3
 8001968:	4805      	ldr	r0, [pc, #20]	; (8001980 <MX_TIM7_Init+0x64>)
 800196a:	f003 fa4d 	bl	8004e08 <HAL_TIMEx_MasterConfigSynchronization>
 800196e:	4603      	mov	r3, r0
 8001970:	2b00      	cmp	r3, #0
 8001972:	d001      	beq.n	8001978 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8001974:	f7ff fd82 	bl	800147c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001978:	bf00      	nop
 800197a:	3710      	adds	r7, #16
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}
 8001980:	20000294 	.word	0x20000294
 8001984:	40001400 	.word	0x40001400

08001988 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001988:	b480      	push	{r7}
 800198a:	b085      	sub	sp, #20
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a0a      	ldr	r2, [pc, #40]	; (80019c0 <HAL_TIM_Base_MspInit+0x38>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d10b      	bne.n	80019b2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 800199a:	4b0a      	ldr	r3, [pc, #40]	; (80019c4 <HAL_TIM_Base_MspInit+0x3c>)
 800199c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800199e:	4a09      	ldr	r2, [pc, #36]	; (80019c4 <HAL_TIM_Base_MspInit+0x3c>)
 80019a0:	f043 0320 	orr.w	r3, r3, #32
 80019a4:	6413      	str	r3, [r2, #64]	; 0x40
 80019a6:	4b07      	ldr	r3, [pc, #28]	; (80019c4 <HAL_TIM_Base_MspInit+0x3c>)
 80019a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019aa:	f003 0320 	and.w	r3, r3, #32
 80019ae:	60fb      	str	r3, [r7, #12]
 80019b0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 80019b2:	bf00      	nop
 80019b4:	3714      	adds	r7, #20
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr
 80019be:	bf00      	nop
 80019c0:	40001400 	.word	0x40001400
 80019c4:	40023800 	.word	0x40023800

080019c8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80019cc:	4b14      	ldr	r3, [pc, #80]	; (8001a20 <MX_USART1_UART_Init+0x58>)
 80019ce:	4a15      	ldr	r2, [pc, #84]	; (8001a24 <MX_USART1_UART_Init+0x5c>)
 80019d0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80019d2:	4b13      	ldr	r3, [pc, #76]	; (8001a20 <MX_USART1_UART_Init+0x58>)
 80019d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80019d8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80019da:	4b11      	ldr	r3, [pc, #68]	; (8001a20 <MX_USART1_UART_Init+0x58>)
 80019dc:	2200      	movs	r2, #0
 80019de:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80019e0:	4b0f      	ldr	r3, [pc, #60]	; (8001a20 <MX_USART1_UART_Init+0x58>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80019e6:	4b0e      	ldr	r3, [pc, #56]	; (8001a20 <MX_USART1_UART_Init+0x58>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80019ec:	4b0c      	ldr	r3, [pc, #48]	; (8001a20 <MX_USART1_UART_Init+0x58>)
 80019ee:	220c      	movs	r2, #12
 80019f0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019f2:	4b0b      	ldr	r3, [pc, #44]	; (8001a20 <MX_USART1_UART_Init+0x58>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80019f8:	4b09      	ldr	r3, [pc, #36]	; (8001a20 <MX_USART1_UART_Init+0x58>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019fe:	4b08      	ldr	r3, [pc, #32]	; (8001a20 <MX_USART1_UART_Init+0x58>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a04:	4b06      	ldr	r3, [pc, #24]	; (8001a20 <MX_USART1_UART_Init+0x58>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001a0a:	4805      	ldr	r0, [pc, #20]	; (8001a20 <MX_USART1_UART_Init+0x58>)
 8001a0c:	f003 fb72 	bl	80050f4 <HAL_UART_Init>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d001      	beq.n	8001a1a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001a16:	f7ff fd31 	bl	800147c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001a1a:	bf00      	nop
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	200002e0 	.word	0x200002e0
 8001a24:	40011000 	.word	0x40011000

08001a28 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b0ac      	sub	sp, #176	; 0xb0
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a30:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001a34:	2200      	movs	r2, #0
 8001a36:	601a      	str	r2, [r3, #0]
 8001a38:	605a      	str	r2, [r3, #4]
 8001a3a:	609a      	str	r2, [r3, #8]
 8001a3c:	60da      	str	r2, [r3, #12]
 8001a3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a40:	f107 0318 	add.w	r3, r7, #24
 8001a44:	2284      	movs	r2, #132	; 0x84
 8001a46:	2100      	movs	r1, #0
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f004 fdb1 	bl	80065b0 <memset>
  if(uartHandle->Instance==USART1)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4a36      	ldr	r2, [pc, #216]	; (8001b2c <HAL_UART_MspInit+0x104>)
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d164      	bne.n	8001b22 <HAL_UART_MspInit+0xfa>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001a58:	2340      	movs	r3, #64	; 0x40
 8001a5a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a60:	f107 0318 	add.w	r3, r7, #24
 8001a64:	4618      	mov	r0, r3
 8001a66:	f001 fed9 	bl	800381c <HAL_RCCEx_PeriphCLKConfig>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d001      	beq.n	8001a74 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001a70:	f7ff fd04 	bl	800147c <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a74:	4b2e      	ldr	r3, [pc, #184]	; (8001b30 <HAL_UART_MspInit+0x108>)
 8001a76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a78:	4a2d      	ldr	r2, [pc, #180]	; (8001b30 <HAL_UART_MspInit+0x108>)
 8001a7a:	f043 0310 	orr.w	r3, r3, #16
 8001a7e:	6453      	str	r3, [r2, #68]	; 0x44
 8001a80:	4b2b      	ldr	r3, [pc, #172]	; (8001b30 <HAL_UART_MspInit+0x108>)
 8001a82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a84:	f003 0310 	and.w	r3, r3, #16
 8001a88:	617b      	str	r3, [r7, #20]
 8001a8a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a8c:	4b28      	ldr	r3, [pc, #160]	; (8001b30 <HAL_UART_MspInit+0x108>)
 8001a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a90:	4a27      	ldr	r2, [pc, #156]	; (8001b30 <HAL_UART_MspInit+0x108>)
 8001a92:	f043 0302 	orr.w	r3, r3, #2
 8001a96:	6313      	str	r3, [r2, #48]	; 0x30
 8001a98:	4b25      	ldr	r3, [pc, #148]	; (8001b30 <HAL_UART_MspInit+0x108>)
 8001a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9c:	f003 0302 	and.w	r3, r3, #2
 8001aa0:	613b      	str	r3, [r7, #16]
 8001aa2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aa4:	4b22      	ldr	r3, [pc, #136]	; (8001b30 <HAL_UART_MspInit+0x108>)
 8001aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa8:	4a21      	ldr	r2, [pc, #132]	; (8001b30 <HAL_UART_MspInit+0x108>)
 8001aaa:	f043 0301 	orr.w	r3, r3, #1
 8001aae:	6313      	str	r3, [r2, #48]	; 0x30
 8001ab0:	4b1f      	ldr	r3, [pc, #124]	; (8001b30 <HAL_UART_MspInit+0x108>)
 8001ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab4:	f003 0301 	and.w	r3, r3, #1
 8001ab8:	60fb      	str	r3, [r7, #12]
 8001aba:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001abc:	2380      	movs	r3, #128	; 0x80
 8001abe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ac2:	2302      	movs	r3, #2
 8001ac4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ace:	2303      	movs	r3, #3
 8001ad0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001ad4:	2307      	movs	r3, #7
 8001ad6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ada:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001ade:	4619      	mov	r1, r3
 8001ae0:	4814      	ldr	r0, [pc, #80]	; (8001b34 <HAL_UART_MspInit+0x10c>)
 8001ae2:	f000 faa7 	bl	8002034 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001ae6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001aea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aee:	2302      	movs	r3, #2
 8001af0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af4:	2300      	movs	r3, #0
 8001af6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001afa:	2303      	movs	r3, #3
 8001afc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001b00:	2307      	movs	r3, #7
 8001b02:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b06:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	480a      	ldr	r0, [pc, #40]	; (8001b38 <HAL_UART_MspInit+0x110>)
 8001b0e:	f000 fa91 	bl	8002034 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001b12:	2200      	movs	r2, #0
 8001b14:	2100      	movs	r1, #0
 8001b16:	2025      	movs	r0, #37	; 0x25
 8001b18:	f000 f9aa 	bl	8001e70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001b1c:	2025      	movs	r0, #37	; 0x25
 8001b1e:	f000 f9d3 	bl	8001ec8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001b22:	bf00      	nop
 8001b24:	37b0      	adds	r7, #176	; 0xb0
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	40011000 	.word	0x40011000
 8001b30:	40023800 	.word	0x40023800
 8001b34:	40020400 	.word	0x40020400
 8001b38:	40020000 	.word	0x40020000

08001b3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001b3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b74 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b40:	480d      	ldr	r0, [pc, #52]	; (8001b78 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b42:	490e      	ldr	r1, [pc, #56]	; (8001b7c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001b44:	4a0e      	ldr	r2, [pc, #56]	; (8001b80 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b48:	e002      	b.n	8001b50 <LoopCopyDataInit>

08001b4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b4e:	3304      	adds	r3, #4

08001b50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b54:	d3f9      	bcc.n	8001b4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b56:	4a0b      	ldr	r2, [pc, #44]	; (8001b84 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001b58:	4c0b      	ldr	r4, [pc, #44]	; (8001b88 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001b5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b5c:	e001      	b.n	8001b62 <LoopFillZerobss>

08001b5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b60:	3204      	adds	r2, #4

08001b62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b64:	d3fb      	bcc.n	8001b5e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001b66:	f7ff fec7 	bl	80018f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b6a:	f004 fcef 	bl	800654c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b6e:	f7ff fba3 	bl	80012b8 <main>
  bx  lr    
 8001b72:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b74:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001b78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b7c:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001b80:	080099b4 	.word	0x080099b4
  ldr r2, =_sbss
 8001b84:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001b88:	2000037c 	.word	0x2000037c

08001b8c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b8c:	e7fe      	b.n	8001b8c <ADC_IRQHandler>

08001b8e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b8e:	b580      	push	{r7, lr}
 8001b90:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b92:	2003      	movs	r0, #3
 8001b94:	f000 f94c 	bl	8001e30 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b98:	200f      	movs	r0, #15
 8001b9a:	f000 f805 	bl	8001ba8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b9e:	f7ff fd83 	bl	80016a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ba2:	2300      	movs	r3, #0
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	bd80      	pop	{r7, pc}

08001ba8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bb0:	4b12      	ldr	r3, [pc, #72]	; (8001bfc <HAL_InitTick+0x54>)
 8001bb2:	681a      	ldr	r2, [r3, #0]
 8001bb4:	4b12      	ldr	r3, [pc, #72]	; (8001c00 <HAL_InitTick+0x58>)
 8001bb6:	781b      	ldrb	r3, [r3, #0]
 8001bb8:	4619      	mov	r1, r3
 8001bba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bbe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f000 f996 	bl	8001ef8 <HAL_SYSTICK_Config>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d001      	beq.n	8001bd6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e00e      	b.n	8001bf4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2b0f      	cmp	r3, #15
 8001bda:	d80a      	bhi.n	8001bf2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bdc:	2200      	movs	r2, #0
 8001bde:	6879      	ldr	r1, [r7, #4]
 8001be0:	f04f 30ff 	mov.w	r0, #4294967295
 8001be4:	f000 f944 	bl	8001e70 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001be8:	4a06      	ldr	r2, [pc, #24]	; (8001c04 <HAL_InitTick+0x5c>)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	e000      	b.n	8001bf4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	3708      	adds	r7, #8
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	20000000 	.word	0x20000000
 8001c00:	20000008 	.word	0x20000008
 8001c04:	20000004 	.word	0x20000004

08001c08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c0c:	4b06      	ldr	r3, [pc, #24]	; (8001c28 <HAL_IncTick+0x20>)
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	461a      	mov	r2, r3
 8001c12:	4b06      	ldr	r3, [pc, #24]	; (8001c2c <HAL_IncTick+0x24>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4413      	add	r3, r2
 8001c18:	4a04      	ldr	r2, [pc, #16]	; (8001c2c <HAL_IncTick+0x24>)
 8001c1a:	6013      	str	r3, [r2, #0]
}
 8001c1c:	bf00      	nop
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr
 8001c26:	bf00      	nop
 8001c28:	20000008 	.word	0x20000008
 8001c2c:	20000368 	.word	0x20000368

08001c30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0
  return uwTick;
 8001c34:	4b03      	ldr	r3, [pc, #12]	; (8001c44 <HAL_GetTick+0x14>)
 8001c36:	681b      	ldr	r3, [r3, #0]
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr
 8001c42:	bf00      	nop
 8001c44:	20000368 	.word	0x20000368

08001c48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b084      	sub	sp, #16
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c50:	f7ff ffee 	bl	8001c30 <HAL_GetTick>
 8001c54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c60:	d005      	beq.n	8001c6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c62:	4b0a      	ldr	r3, [pc, #40]	; (8001c8c <HAL_Delay+0x44>)
 8001c64:	781b      	ldrb	r3, [r3, #0]
 8001c66:	461a      	mov	r2, r3
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	4413      	add	r3, r2
 8001c6c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c6e:	bf00      	nop
 8001c70:	f7ff ffde 	bl	8001c30 <HAL_GetTick>
 8001c74:	4602      	mov	r2, r0
 8001c76:	68bb      	ldr	r3, [r7, #8]
 8001c78:	1ad3      	subs	r3, r2, r3
 8001c7a:	68fa      	ldr	r2, [r7, #12]
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	d8f7      	bhi.n	8001c70 <HAL_Delay+0x28>
  {
  }
}
 8001c80:	bf00      	nop
 8001c82:	bf00      	nop
 8001c84:	3710      	adds	r7, #16
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	20000008 	.word	0x20000008

08001c90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b085      	sub	sp, #20
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	f003 0307 	and.w	r3, r3, #7
 8001c9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ca0:	4b0b      	ldr	r3, [pc, #44]	; (8001cd0 <__NVIC_SetPriorityGrouping+0x40>)
 8001ca2:	68db      	ldr	r3, [r3, #12]
 8001ca4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ca6:	68ba      	ldr	r2, [r7, #8]
 8001ca8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cac:	4013      	ands	r3, r2
 8001cae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001cb8:	4b06      	ldr	r3, [pc, #24]	; (8001cd4 <__NVIC_SetPriorityGrouping+0x44>)
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cbe:	4a04      	ldr	r2, [pc, #16]	; (8001cd0 <__NVIC_SetPriorityGrouping+0x40>)
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	60d3      	str	r3, [r2, #12]
}
 8001cc4:	bf00      	nop
 8001cc6:	3714      	adds	r7, #20
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr
 8001cd0:	e000ed00 	.word	0xe000ed00
 8001cd4:	05fa0000 	.word	0x05fa0000

08001cd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cdc:	4b04      	ldr	r3, [pc, #16]	; (8001cf0 <__NVIC_GetPriorityGrouping+0x18>)
 8001cde:	68db      	ldr	r3, [r3, #12]
 8001ce0:	0a1b      	lsrs	r3, r3, #8
 8001ce2:	f003 0307 	and.w	r3, r3, #7
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cee:	4770      	bx	lr
 8001cf0:	e000ed00 	.word	0xe000ed00

08001cf4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b083      	sub	sp, #12
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	db0b      	blt.n	8001d1e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d06:	79fb      	ldrb	r3, [r7, #7]
 8001d08:	f003 021f 	and.w	r2, r3, #31
 8001d0c:	4907      	ldr	r1, [pc, #28]	; (8001d2c <__NVIC_EnableIRQ+0x38>)
 8001d0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d12:	095b      	lsrs	r3, r3, #5
 8001d14:	2001      	movs	r0, #1
 8001d16:	fa00 f202 	lsl.w	r2, r0, r2
 8001d1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d1e:	bf00      	nop
 8001d20:	370c      	adds	r7, #12
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr
 8001d2a:	bf00      	nop
 8001d2c:	e000e100 	.word	0xe000e100

08001d30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b083      	sub	sp, #12
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	4603      	mov	r3, r0
 8001d38:	6039      	str	r1, [r7, #0]
 8001d3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	db0a      	blt.n	8001d5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	b2da      	uxtb	r2, r3
 8001d48:	490c      	ldr	r1, [pc, #48]	; (8001d7c <__NVIC_SetPriority+0x4c>)
 8001d4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d4e:	0112      	lsls	r2, r2, #4
 8001d50:	b2d2      	uxtb	r2, r2
 8001d52:	440b      	add	r3, r1
 8001d54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d58:	e00a      	b.n	8001d70 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	b2da      	uxtb	r2, r3
 8001d5e:	4908      	ldr	r1, [pc, #32]	; (8001d80 <__NVIC_SetPriority+0x50>)
 8001d60:	79fb      	ldrb	r3, [r7, #7]
 8001d62:	f003 030f 	and.w	r3, r3, #15
 8001d66:	3b04      	subs	r3, #4
 8001d68:	0112      	lsls	r2, r2, #4
 8001d6a:	b2d2      	uxtb	r2, r2
 8001d6c:	440b      	add	r3, r1
 8001d6e:	761a      	strb	r2, [r3, #24]
}
 8001d70:	bf00      	nop
 8001d72:	370c      	adds	r7, #12
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr
 8001d7c:	e000e100 	.word	0xe000e100
 8001d80:	e000ed00 	.word	0xe000ed00

08001d84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b089      	sub	sp, #36	; 0x24
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	60f8      	str	r0, [r7, #12]
 8001d8c:	60b9      	str	r1, [r7, #8]
 8001d8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	f003 0307 	and.w	r3, r3, #7
 8001d96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d98:	69fb      	ldr	r3, [r7, #28]
 8001d9a:	f1c3 0307 	rsb	r3, r3, #7
 8001d9e:	2b04      	cmp	r3, #4
 8001da0:	bf28      	it	cs
 8001da2:	2304      	movcs	r3, #4
 8001da4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001da6:	69fb      	ldr	r3, [r7, #28]
 8001da8:	3304      	adds	r3, #4
 8001daa:	2b06      	cmp	r3, #6
 8001dac:	d902      	bls.n	8001db4 <NVIC_EncodePriority+0x30>
 8001dae:	69fb      	ldr	r3, [r7, #28]
 8001db0:	3b03      	subs	r3, #3
 8001db2:	e000      	b.n	8001db6 <NVIC_EncodePriority+0x32>
 8001db4:	2300      	movs	r3, #0
 8001db6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001db8:	f04f 32ff 	mov.w	r2, #4294967295
 8001dbc:	69bb      	ldr	r3, [r7, #24]
 8001dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc2:	43da      	mvns	r2, r3
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	401a      	ands	r2, r3
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001dcc:	f04f 31ff 	mov.w	r1, #4294967295
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	fa01 f303 	lsl.w	r3, r1, r3
 8001dd6:	43d9      	mvns	r1, r3
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ddc:	4313      	orrs	r3, r2
         );
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	3724      	adds	r7, #36	; 0x24
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr
	...

08001dec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b082      	sub	sp, #8
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	3b01      	subs	r3, #1
 8001df8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001dfc:	d301      	bcc.n	8001e02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e00f      	b.n	8001e22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e02:	4a0a      	ldr	r2, [pc, #40]	; (8001e2c <SysTick_Config+0x40>)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	3b01      	subs	r3, #1
 8001e08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e0a:	210f      	movs	r1, #15
 8001e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e10:	f7ff ff8e 	bl	8001d30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e14:	4b05      	ldr	r3, [pc, #20]	; (8001e2c <SysTick_Config+0x40>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e1a:	4b04      	ldr	r3, [pc, #16]	; (8001e2c <SysTick_Config+0x40>)
 8001e1c:	2207      	movs	r2, #7
 8001e1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e20:	2300      	movs	r3, #0
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	3708      	adds	r7, #8
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	e000e010 	.word	0xe000e010

08001e30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b082      	sub	sp, #8
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2b07      	cmp	r3, #7
 8001e3c:	d00f      	beq.n	8001e5e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2b06      	cmp	r3, #6
 8001e42:	d00c      	beq.n	8001e5e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2b05      	cmp	r3, #5
 8001e48:	d009      	beq.n	8001e5e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2b04      	cmp	r3, #4
 8001e4e:	d006      	beq.n	8001e5e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2b03      	cmp	r3, #3
 8001e54:	d003      	beq.n	8001e5e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001e56:	2191      	movs	r1, #145	; 0x91
 8001e58:	4804      	ldr	r0, [pc, #16]	; (8001e6c <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8001e5a:	f7ff fb14 	bl	8001486 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e5e:	6878      	ldr	r0, [r7, #4]
 8001e60:	f7ff ff16 	bl	8001c90 <__NVIC_SetPriorityGrouping>
}
 8001e64:	bf00      	nop
 8001e66:	3708      	adds	r7, #8
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	080093a4 	.word	0x080093a4

08001e70 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b086      	sub	sp, #24
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	4603      	mov	r3, r0
 8001e78:	60b9      	str	r1, [r7, #8]
 8001e7a:	607a      	str	r2, [r7, #4]
 8001e7c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2b0f      	cmp	r3, #15
 8001e86:	d903      	bls.n	8001e90 <HAL_NVIC_SetPriority+0x20>
 8001e88:	21a9      	movs	r1, #169	; 0xa9
 8001e8a:	480e      	ldr	r0, [pc, #56]	; (8001ec4 <HAL_NVIC_SetPriority+0x54>)
 8001e8c:	f7ff fafb 	bl	8001486 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	2b0f      	cmp	r3, #15
 8001e94:	d903      	bls.n	8001e9e <HAL_NVIC_SetPriority+0x2e>
 8001e96:	21aa      	movs	r1, #170	; 0xaa
 8001e98:	480a      	ldr	r0, [pc, #40]	; (8001ec4 <HAL_NVIC_SetPriority+0x54>)
 8001e9a:	f7ff faf4 	bl	8001486 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e9e:	f7ff ff1b 	bl	8001cd8 <__NVIC_GetPriorityGrouping>
 8001ea2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ea4:	687a      	ldr	r2, [r7, #4]
 8001ea6:	68b9      	ldr	r1, [r7, #8]
 8001ea8:	6978      	ldr	r0, [r7, #20]
 8001eaa:	f7ff ff6b 	bl	8001d84 <NVIC_EncodePriority>
 8001eae:	4602      	mov	r2, r0
 8001eb0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001eb4:	4611      	mov	r1, r2
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f7ff ff3a 	bl	8001d30 <__NVIC_SetPriority>
}
 8001ebc:	bf00      	nop
 8001ebe:	3718      	adds	r7, #24
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	080093a4 	.word	0x080093a4

08001ec8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b082      	sub	sp, #8
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	4603      	mov	r3, r0
 8001ed0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8001ed2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	da03      	bge.n	8001ee2 <HAL_NVIC_EnableIRQ+0x1a>
 8001eda:	21bd      	movs	r1, #189	; 0xbd
 8001edc:	4805      	ldr	r0, [pc, #20]	; (8001ef4 <HAL_NVIC_EnableIRQ+0x2c>)
 8001ede:	f7ff fad2 	bl	8001486 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f7ff ff04 	bl	8001cf4 <__NVIC_EnableIRQ>
}
 8001eec:	bf00      	nop
 8001eee:	3708      	adds	r7, #8
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	080093a4 	.word	0x080093a4

08001ef8 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f00:	6878      	ldr	r0, [r7, #4]
 8001f02:	f7ff ff73 	bl	8001dec <SysTick_Config>
 8001f06:	4603      	mov	r3, r0
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	3708      	adds	r7, #8
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}

08001f10 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b084      	sub	sp, #16
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f1c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001f1e:	f7ff fe87 	bl	8001c30 <HAL_GetTick>
 8001f22:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f2a:	b2db      	uxtb	r3, r3
 8001f2c:	2b02      	cmp	r3, #2
 8001f2e:	d008      	beq.n	8001f42 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2280      	movs	r2, #128	; 0x80
 8001f34:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e052      	b.n	8001fe8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f022 0216 	bic.w	r2, r2, #22
 8001f50:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	695a      	ldr	r2, [r3, #20]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f60:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d103      	bne.n	8001f72 <HAL_DMA_Abort+0x62>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d007      	beq.n	8001f82 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f022 0208 	bic.w	r2, r2, #8
 8001f80:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	681a      	ldr	r2, [r3, #0]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f022 0201 	bic.w	r2, r2, #1
 8001f90:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f92:	e013      	b.n	8001fbc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f94:	f7ff fe4c 	bl	8001c30 <HAL_GetTick>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	68bb      	ldr	r3, [r7, #8]
 8001f9c:	1ad3      	subs	r3, r2, r3
 8001f9e:	2b05      	cmp	r3, #5
 8001fa0:	d90c      	bls.n	8001fbc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2220      	movs	r2, #32
 8001fa6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2203      	movs	r2, #3
 8001fac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8001fb8:	2303      	movs	r3, #3
 8001fba:	e015      	b.n	8001fe8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f003 0301 	and.w	r3, r3, #1
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d1e4      	bne.n	8001f94 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fce:	223f      	movs	r2, #63	; 0x3f
 8001fd0:	409a      	lsls	r2, r3
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2201      	movs	r2, #1
 8001fda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8001fe6:	2300      	movs	r3, #0
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	3710      	adds	r7, #16
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}

08001ff0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b083      	sub	sp, #12
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ffe:	b2db      	uxtb	r3, r3
 8002000:	2b02      	cmp	r3, #2
 8002002:	d004      	beq.n	800200e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2280      	movs	r2, #128	; 0x80
 8002008:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	e00c      	b.n	8002028 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2205      	movs	r2, #5
 8002012:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f022 0201 	bic.w	r2, r2, #1
 8002024:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002026:	2300      	movs	r3, #0
}
 8002028:	4618      	mov	r0, r3
 800202a:	370c      	adds	r7, #12
 800202c:	46bd      	mov	sp, r7
 800202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002032:	4770      	bx	lr

08002034 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b088      	sub	sp, #32
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
 800203c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800203e:	2300      	movs	r3, #0
 8002040:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002042:	2300      	movs	r3, #0
 8002044:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002046:	2300      	movs	r3, #0
 8002048:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800204a:	2300      	movs	r3, #0
 800204c:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4a3a      	ldr	r2, [pc, #232]	; (800213c <HAL_GPIO_Init+0x108>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d02b      	beq.n	80020ae <HAL_GPIO_Init+0x7a>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4a39      	ldr	r2, [pc, #228]	; (8002140 <HAL_GPIO_Init+0x10c>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d027      	beq.n	80020ae <HAL_GPIO_Init+0x7a>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4a38      	ldr	r2, [pc, #224]	; (8002144 <HAL_GPIO_Init+0x110>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d023      	beq.n	80020ae <HAL_GPIO_Init+0x7a>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4a37      	ldr	r2, [pc, #220]	; (8002148 <HAL_GPIO_Init+0x114>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d01f      	beq.n	80020ae <HAL_GPIO_Init+0x7a>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	4a36      	ldr	r2, [pc, #216]	; (800214c <HAL_GPIO_Init+0x118>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d01b      	beq.n	80020ae <HAL_GPIO_Init+0x7a>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4a35      	ldr	r2, [pc, #212]	; (8002150 <HAL_GPIO_Init+0x11c>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d017      	beq.n	80020ae <HAL_GPIO_Init+0x7a>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4a34      	ldr	r2, [pc, #208]	; (8002154 <HAL_GPIO_Init+0x120>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d013      	beq.n	80020ae <HAL_GPIO_Init+0x7a>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4a33      	ldr	r2, [pc, #204]	; (8002158 <HAL_GPIO_Init+0x124>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d00f      	beq.n	80020ae <HAL_GPIO_Init+0x7a>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4a32      	ldr	r2, [pc, #200]	; (800215c <HAL_GPIO_Init+0x128>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d00b      	beq.n	80020ae <HAL_GPIO_Init+0x7a>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4a31      	ldr	r2, [pc, #196]	; (8002160 <HAL_GPIO_Init+0x12c>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d007      	beq.n	80020ae <HAL_GPIO_Init+0x7a>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4a30      	ldr	r2, [pc, #192]	; (8002164 <HAL_GPIO_Init+0x130>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d003      	beq.n	80020ae <HAL_GPIO_Init+0x7a>
 80020a6:	21aa      	movs	r1, #170	; 0xaa
 80020a8:	482f      	ldr	r0, [pc, #188]	; (8002168 <HAL_GPIO_Init+0x134>)
 80020aa:	f7ff f9ec 	bl	8001486 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	b29b      	uxth	r3, r3
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d103      	bne.n	80020c0 <HAL_GPIO_Init+0x8c>
 80020b8:	21ab      	movs	r1, #171	; 0xab
 80020ba:	482b      	ldr	r0, [pc, #172]	; (8002168 <HAL_GPIO_Init+0x134>)
 80020bc:	f7ff f9e3 	bl	8001486 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d035      	beq.n	8002134 <HAL_GPIO_Init+0x100>
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	2b01      	cmp	r3, #1
 80020ce:	d031      	beq.n	8002134 <HAL_GPIO_Init+0x100>
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	2b11      	cmp	r3, #17
 80020d6:	d02d      	beq.n	8002134 <HAL_GPIO_Init+0x100>
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	2b02      	cmp	r3, #2
 80020de:	d029      	beq.n	8002134 <HAL_GPIO_Init+0x100>
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	2b12      	cmp	r3, #18
 80020e6:	d025      	beq.n	8002134 <HAL_GPIO_Init+0x100>
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 80020f0:	d020      	beq.n	8002134 <HAL_GPIO_Init+0x100>
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 80020fa:	d01b      	beq.n	8002134 <HAL_GPIO_Init+0x100>
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 8002104:	d016      	beq.n	8002134 <HAL_GPIO_Init+0x100>
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 800210e:	d011      	beq.n	8002134 <HAL_GPIO_Init+0x100>
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 8002118:	d00c      	beq.n	8002134 <HAL_GPIO_Init+0x100>
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 8002122:	d007      	beq.n	8002134 <HAL_GPIO_Init+0x100>
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	2b03      	cmp	r3, #3
 800212a:	d003      	beq.n	8002134 <HAL_GPIO_Init+0x100>
 800212c:	21ac      	movs	r1, #172	; 0xac
 800212e:	480e      	ldr	r0, [pc, #56]	; (8002168 <HAL_GPIO_Init+0x134>)
 8002130:	f7ff f9a9 	bl	8001486 <assert_failed>

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002134:	2300      	movs	r3, #0
 8002136:	61fb      	str	r3, [r7, #28]
 8002138:	e2c7      	b.n	80026ca <HAL_GPIO_Init+0x696>
 800213a:	bf00      	nop
 800213c:	40020000 	.word	0x40020000
 8002140:	40020400 	.word	0x40020400
 8002144:	40020800 	.word	0x40020800
 8002148:	40020c00 	.word	0x40020c00
 800214c:	40021000 	.word	0x40021000
 8002150:	40021400 	.word	0x40021400
 8002154:	40021800 	.word	0x40021800
 8002158:	40021c00 	.word	0x40021c00
 800215c:	40022000 	.word	0x40022000
 8002160:	40022400 	.word	0x40022400
 8002164:	40022800 	.word	0x40022800
 8002168:	080093e0 	.word	0x080093e0
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800216c:	2201      	movs	r2, #1
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	fa02 f303 	lsl.w	r3, r2, r3
 8002174:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	697a      	ldr	r2, [r7, #20]
 800217c:	4013      	ands	r3, r2
 800217e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002180:	693a      	ldr	r2, [r7, #16]
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	429a      	cmp	r2, r3
 8002186:	f040 829d 	bne.w	80026c4 <HAL_GPIO_Init+0x690>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	f003 0303 	and.w	r3, r3, #3
 8002192:	2b01      	cmp	r3, #1
 8002194:	d005      	beq.n	80021a2 <HAL_GPIO_Init+0x16e>
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	f003 0303 	and.w	r3, r3, #3
 800219e:	2b02      	cmp	r3, #2
 80021a0:	d144      	bne.n	800222c <HAL_GPIO_Init+0x1f8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	68db      	ldr	r3, [r3, #12]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d00f      	beq.n	80021ca <HAL_GPIO_Init+0x196>
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	68db      	ldr	r3, [r3, #12]
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d00b      	beq.n	80021ca <HAL_GPIO_Init+0x196>
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	68db      	ldr	r3, [r3, #12]
 80021b6:	2b02      	cmp	r3, #2
 80021b8:	d007      	beq.n	80021ca <HAL_GPIO_Init+0x196>
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	68db      	ldr	r3, [r3, #12]
 80021be:	2b03      	cmp	r3, #3
 80021c0:	d003      	beq.n	80021ca <HAL_GPIO_Init+0x196>
 80021c2:	21bd      	movs	r1, #189	; 0xbd
 80021c4:	4831      	ldr	r0, [pc, #196]	; (800228c <HAL_GPIO_Init+0x258>)
 80021c6:	f7ff f95e 	bl	8001486 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80021d0:	69fb      	ldr	r3, [r7, #28]
 80021d2:	005b      	lsls	r3, r3, #1
 80021d4:	2203      	movs	r2, #3
 80021d6:	fa02 f303 	lsl.w	r3, r2, r3
 80021da:	43db      	mvns	r3, r3
 80021dc:	69ba      	ldr	r2, [r7, #24]
 80021de:	4013      	ands	r3, r2
 80021e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	68da      	ldr	r2, [r3, #12]
 80021e6:	69fb      	ldr	r3, [r7, #28]
 80021e8:	005b      	lsls	r3, r3, #1
 80021ea:	fa02 f303 	lsl.w	r3, r2, r3
 80021ee:	69ba      	ldr	r2, [r7, #24]
 80021f0:	4313      	orrs	r3, r2
 80021f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	69ba      	ldr	r2, [r7, #24]
 80021f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002200:	2201      	movs	r2, #1
 8002202:	69fb      	ldr	r3, [r7, #28]
 8002204:	fa02 f303 	lsl.w	r3, r2, r3
 8002208:	43db      	mvns	r3, r3
 800220a:	69ba      	ldr	r2, [r7, #24]
 800220c:	4013      	ands	r3, r2
 800220e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	091b      	lsrs	r3, r3, #4
 8002216:	f003 0201 	and.w	r2, r3, #1
 800221a:	69fb      	ldr	r3, [r7, #28]
 800221c:	fa02 f303 	lsl.w	r3, r2, r3
 8002220:	69ba      	ldr	r2, [r7, #24]
 8002222:	4313      	orrs	r3, r2
 8002224:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	69ba      	ldr	r2, [r7, #24]
 800222a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	f003 0303 	and.w	r3, r3, #3
 8002234:	2b03      	cmp	r3, #3
 8002236:	d02b      	beq.n	8002290 <HAL_GPIO_Init+0x25c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d00b      	beq.n	8002258 <HAL_GPIO_Init+0x224>
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	2b01      	cmp	r3, #1
 8002246:	d007      	beq.n	8002258 <HAL_GPIO_Init+0x224>
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	2b02      	cmp	r3, #2
 800224e:	d003      	beq.n	8002258 <HAL_GPIO_Init+0x224>
 8002250:	21ce      	movs	r1, #206	; 0xce
 8002252:	480e      	ldr	r0, [pc, #56]	; (800228c <HAL_GPIO_Init+0x258>)
 8002254:	f7ff f917 	bl	8001486 <assert_failed>

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	68db      	ldr	r3, [r3, #12]
 800225c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800225e:	69fb      	ldr	r3, [r7, #28]
 8002260:	005b      	lsls	r3, r3, #1
 8002262:	2203      	movs	r2, #3
 8002264:	fa02 f303 	lsl.w	r3, r2, r3
 8002268:	43db      	mvns	r3, r3
 800226a:	69ba      	ldr	r2, [r7, #24]
 800226c:	4013      	ands	r3, r2
 800226e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	689a      	ldr	r2, [r3, #8]
 8002274:	69fb      	ldr	r3, [r7, #28]
 8002276:	005b      	lsls	r3, r3, #1
 8002278:	fa02 f303 	lsl.w	r3, r2, r3
 800227c:	69ba      	ldr	r2, [r7, #24]
 800227e:	4313      	orrs	r3, r2
 8002280:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	69ba      	ldr	r2, [r7, #24]
 8002286:	60da      	str	r2, [r3, #12]
 8002288:	e002      	b.n	8002290 <HAL_GPIO_Init+0x25c>
 800228a:	bf00      	nop
 800228c:	080093e0 	.word	0x080093e0
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	f003 0303 	and.w	r3, r3, #3
 8002298:	2b02      	cmp	r3, #2
 800229a:	f040 8134 	bne.w	8002506 <HAL_GPIO_Init+0x4d2>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	691b      	ldr	r3, [r3, #16]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	f000 810b 	beq.w	80024be <HAL_GPIO_Init+0x48a>
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	691b      	ldr	r3, [r3, #16]
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	f000 8106 	beq.w	80024be <HAL_GPIO_Init+0x48a>
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	691b      	ldr	r3, [r3, #16]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	f000 8101 	beq.w	80024be <HAL_GPIO_Init+0x48a>
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	691b      	ldr	r3, [r3, #16]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	f000 80fc 	beq.w	80024be <HAL_GPIO_Init+0x48a>
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	691b      	ldr	r3, [r3, #16]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	f000 80f7 	beq.w	80024be <HAL_GPIO_Init+0x48a>
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	691b      	ldr	r3, [r3, #16]
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	f000 80f2 	beq.w	80024be <HAL_GPIO_Init+0x48a>
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	691b      	ldr	r3, [r3, #16]
 80022de:	2b02      	cmp	r3, #2
 80022e0:	f000 80ed 	beq.w	80024be <HAL_GPIO_Init+0x48a>
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	691b      	ldr	r3, [r3, #16]
 80022e8:	2b02      	cmp	r3, #2
 80022ea:	f000 80e8 	beq.w	80024be <HAL_GPIO_Init+0x48a>
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	691b      	ldr	r3, [r3, #16]
 80022f2:	2b02      	cmp	r3, #2
 80022f4:	f000 80e3 	beq.w	80024be <HAL_GPIO_Init+0x48a>
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	691b      	ldr	r3, [r3, #16]
 80022fc:	2b03      	cmp	r3, #3
 80022fe:	f000 80de 	beq.w	80024be <HAL_GPIO_Init+0x48a>
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	691b      	ldr	r3, [r3, #16]
 8002306:	2b03      	cmp	r3, #3
 8002308:	f000 80d9 	beq.w	80024be <HAL_GPIO_Init+0x48a>
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	691b      	ldr	r3, [r3, #16]
 8002310:	2b03      	cmp	r3, #3
 8002312:	f000 80d4 	beq.w	80024be <HAL_GPIO_Init+0x48a>
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	691b      	ldr	r3, [r3, #16]
 800231a:	2b03      	cmp	r3, #3
 800231c:	f000 80cf 	beq.w	80024be <HAL_GPIO_Init+0x48a>
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	691b      	ldr	r3, [r3, #16]
 8002324:	2b03      	cmp	r3, #3
 8002326:	f000 80ca 	beq.w	80024be <HAL_GPIO_Init+0x48a>
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	691b      	ldr	r3, [r3, #16]
 800232e:	2b03      	cmp	r3, #3
 8002330:	f000 80c5 	beq.w	80024be <HAL_GPIO_Init+0x48a>
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	691b      	ldr	r3, [r3, #16]
 8002338:	2b04      	cmp	r3, #4
 800233a:	f000 80c0 	beq.w	80024be <HAL_GPIO_Init+0x48a>
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	691b      	ldr	r3, [r3, #16]
 8002342:	2b04      	cmp	r3, #4
 8002344:	f000 80bb 	beq.w	80024be <HAL_GPIO_Init+0x48a>
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	691b      	ldr	r3, [r3, #16]
 800234c:	2b04      	cmp	r3, #4
 800234e:	f000 80b6 	beq.w	80024be <HAL_GPIO_Init+0x48a>
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	691b      	ldr	r3, [r3, #16]
 8002356:	2b04      	cmp	r3, #4
 8002358:	f000 80b1 	beq.w	80024be <HAL_GPIO_Init+0x48a>
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	691b      	ldr	r3, [r3, #16]
 8002360:	2b04      	cmp	r3, #4
 8002362:	f000 80ac 	beq.w	80024be <HAL_GPIO_Init+0x48a>
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	691b      	ldr	r3, [r3, #16]
 800236a:	2b05      	cmp	r3, #5
 800236c:	f000 80a7 	beq.w	80024be <HAL_GPIO_Init+0x48a>
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	691b      	ldr	r3, [r3, #16]
 8002374:	2b05      	cmp	r3, #5
 8002376:	f000 80a2 	beq.w	80024be <HAL_GPIO_Init+0x48a>
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	691b      	ldr	r3, [r3, #16]
 800237e:	2b05      	cmp	r3, #5
 8002380:	f000 809d 	beq.w	80024be <HAL_GPIO_Init+0x48a>
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	691b      	ldr	r3, [r3, #16]
 8002388:	2b05      	cmp	r3, #5
 800238a:	f000 8098 	beq.w	80024be <HAL_GPIO_Init+0x48a>
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	691b      	ldr	r3, [r3, #16]
 8002392:	2b05      	cmp	r3, #5
 8002394:	f000 8093 	beq.w	80024be <HAL_GPIO_Init+0x48a>
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	691b      	ldr	r3, [r3, #16]
 800239c:	2b05      	cmp	r3, #5
 800239e:	f000 808e 	beq.w	80024be <HAL_GPIO_Init+0x48a>
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	691b      	ldr	r3, [r3, #16]
 80023a6:	2b06      	cmp	r3, #6
 80023a8:	f000 8089 	beq.w	80024be <HAL_GPIO_Init+0x48a>
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	691b      	ldr	r3, [r3, #16]
 80023b0:	2b06      	cmp	r3, #6
 80023b2:	f000 8084 	beq.w	80024be <HAL_GPIO_Init+0x48a>
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	691b      	ldr	r3, [r3, #16]
 80023ba:	2b07      	cmp	r3, #7
 80023bc:	d07f      	beq.n	80024be <HAL_GPIO_Init+0x48a>
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	691b      	ldr	r3, [r3, #16]
 80023c2:	2b07      	cmp	r3, #7
 80023c4:	d07b      	beq.n	80024be <HAL_GPIO_Init+0x48a>
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	691b      	ldr	r3, [r3, #16]
 80023ca:	2b07      	cmp	r3, #7
 80023cc:	d077      	beq.n	80024be <HAL_GPIO_Init+0x48a>
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	691b      	ldr	r3, [r3, #16]
 80023d2:	2b07      	cmp	r3, #7
 80023d4:	d073      	beq.n	80024be <HAL_GPIO_Init+0x48a>
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	691b      	ldr	r3, [r3, #16]
 80023da:	2b07      	cmp	r3, #7
 80023dc:	d06f      	beq.n	80024be <HAL_GPIO_Init+0x48a>
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	691b      	ldr	r3, [r3, #16]
 80023e2:	2b07      	cmp	r3, #7
 80023e4:	d06b      	beq.n	80024be <HAL_GPIO_Init+0x48a>
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	691b      	ldr	r3, [r3, #16]
 80023ea:	2b07      	cmp	r3, #7
 80023ec:	d067      	beq.n	80024be <HAL_GPIO_Init+0x48a>
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	691b      	ldr	r3, [r3, #16]
 80023f2:	2b08      	cmp	r3, #8
 80023f4:	d063      	beq.n	80024be <HAL_GPIO_Init+0x48a>
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	691b      	ldr	r3, [r3, #16]
 80023fa:	2b08      	cmp	r3, #8
 80023fc:	d05f      	beq.n	80024be <HAL_GPIO_Init+0x48a>
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	691b      	ldr	r3, [r3, #16]
 8002402:	2b08      	cmp	r3, #8
 8002404:	d05b      	beq.n	80024be <HAL_GPIO_Init+0x48a>
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	691b      	ldr	r3, [r3, #16]
 800240a:	2b08      	cmp	r3, #8
 800240c:	d057      	beq.n	80024be <HAL_GPIO_Init+0x48a>
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	691b      	ldr	r3, [r3, #16]
 8002412:	2b08      	cmp	r3, #8
 8002414:	d053      	beq.n	80024be <HAL_GPIO_Init+0x48a>
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	691b      	ldr	r3, [r3, #16]
 800241a:	2b08      	cmp	r3, #8
 800241c:	d04f      	beq.n	80024be <HAL_GPIO_Init+0x48a>
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	691b      	ldr	r3, [r3, #16]
 8002422:	2b08      	cmp	r3, #8
 8002424:	d04b      	beq.n	80024be <HAL_GPIO_Init+0x48a>
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	691b      	ldr	r3, [r3, #16]
 800242a:	2b09      	cmp	r3, #9
 800242c:	d047      	beq.n	80024be <HAL_GPIO_Init+0x48a>
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	691b      	ldr	r3, [r3, #16]
 8002432:	2b09      	cmp	r3, #9
 8002434:	d043      	beq.n	80024be <HAL_GPIO_Init+0x48a>
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	691b      	ldr	r3, [r3, #16]
 800243a:	2b09      	cmp	r3, #9
 800243c:	d03f      	beq.n	80024be <HAL_GPIO_Init+0x48a>
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	691b      	ldr	r3, [r3, #16]
 8002442:	2b09      	cmp	r3, #9
 8002444:	d03b      	beq.n	80024be <HAL_GPIO_Init+0x48a>
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	691b      	ldr	r3, [r3, #16]
 800244a:	2b09      	cmp	r3, #9
 800244c:	d037      	beq.n	80024be <HAL_GPIO_Init+0x48a>
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	691b      	ldr	r3, [r3, #16]
 8002452:	2b09      	cmp	r3, #9
 8002454:	d033      	beq.n	80024be <HAL_GPIO_Init+0x48a>
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	691b      	ldr	r3, [r3, #16]
 800245a:	2b09      	cmp	r3, #9
 800245c:	d02f      	beq.n	80024be <HAL_GPIO_Init+0x48a>
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	691b      	ldr	r3, [r3, #16]
 8002462:	2b0a      	cmp	r3, #10
 8002464:	d02b      	beq.n	80024be <HAL_GPIO_Init+0x48a>
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	691b      	ldr	r3, [r3, #16]
 800246a:	2b0a      	cmp	r3, #10
 800246c:	d027      	beq.n	80024be <HAL_GPIO_Init+0x48a>
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	691b      	ldr	r3, [r3, #16]
 8002472:	2b0a      	cmp	r3, #10
 8002474:	d023      	beq.n	80024be <HAL_GPIO_Init+0x48a>
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	691b      	ldr	r3, [r3, #16]
 800247a:	2b0a      	cmp	r3, #10
 800247c:	d01f      	beq.n	80024be <HAL_GPIO_Init+0x48a>
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	691b      	ldr	r3, [r3, #16]
 8002482:	2b0b      	cmp	r3, #11
 8002484:	d01b      	beq.n	80024be <HAL_GPIO_Init+0x48a>
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	691b      	ldr	r3, [r3, #16]
 800248a:	2b0c      	cmp	r3, #12
 800248c:	d017      	beq.n	80024be <HAL_GPIO_Init+0x48a>
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	691b      	ldr	r3, [r3, #16]
 8002492:	2b0c      	cmp	r3, #12
 8002494:	d013      	beq.n	80024be <HAL_GPIO_Init+0x48a>
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	691b      	ldr	r3, [r3, #16]
 800249a:	2b0c      	cmp	r3, #12
 800249c:	d00f      	beq.n	80024be <HAL_GPIO_Init+0x48a>
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	691b      	ldr	r3, [r3, #16]
 80024a2:	2b0f      	cmp	r3, #15
 80024a4:	d00b      	beq.n	80024be <HAL_GPIO_Init+0x48a>
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	691b      	ldr	r3, [r3, #16]
 80024aa:	2b0d      	cmp	r3, #13
 80024ac:	d007      	beq.n	80024be <HAL_GPIO_Init+0x48a>
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	691b      	ldr	r3, [r3, #16]
 80024b2:	2b0e      	cmp	r3, #14
 80024b4:	d003      	beq.n	80024be <HAL_GPIO_Init+0x48a>
 80024b6:	21db      	movs	r1, #219	; 0xdb
 80024b8:	4888      	ldr	r0, [pc, #544]	; (80026dc <HAL_GPIO_Init+0x6a8>)
 80024ba:	f7fe ffe4 	bl	8001486 <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80024be:	69fb      	ldr	r3, [r7, #28]
 80024c0:	08da      	lsrs	r2, r3, #3
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	3208      	adds	r2, #8
 80024c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80024cc:	69fb      	ldr	r3, [r7, #28]
 80024ce:	f003 0307 	and.w	r3, r3, #7
 80024d2:	009b      	lsls	r3, r3, #2
 80024d4:	220f      	movs	r2, #15
 80024d6:	fa02 f303 	lsl.w	r3, r2, r3
 80024da:	43db      	mvns	r3, r3
 80024dc:	69ba      	ldr	r2, [r7, #24]
 80024de:	4013      	ands	r3, r2
 80024e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	691a      	ldr	r2, [r3, #16]
 80024e6:	69fb      	ldr	r3, [r7, #28]
 80024e8:	f003 0307 	and.w	r3, r3, #7
 80024ec:	009b      	lsls	r3, r3, #2
 80024ee:	fa02 f303 	lsl.w	r3, r2, r3
 80024f2:	69ba      	ldr	r2, [r7, #24]
 80024f4:	4313      	orrs	r3, r2
 80024f6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80024f8:	69fb      	ldr	r3, [r7, #28]
 80024fa:	08da      	lsrs	r2, r3, #3
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	3208      	adds	r2, #8
 8002500:	69b9      	ldr	r1, [r7, #24]
 8002502:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800250c:	69fb      	ldr	r3, [r7, #28]
 800250e:	005b      	lsls	r3, r3, #1
 8002510:	2203      	movs	r2, #3
 8002512:	fa02 f303 	lsl.w	r3, r2, r3
 8002516:	43db      	mvns	r3, r3
 8002518:	69ba      	ldr	r2, [r7, #24]
 800251a:	4013      	ands	r3, r2
 800251c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	f003 0203 	and.w	r2, r3, #3
 8002526:	69fb      	ldr	r3, [r7, #28]
 8002528:	005b      	lsls	r3, r3, #1
 800252a:	fa02 f303 	lsl.w	r3, r2, r3
 800252e:	69ba      	ldr	r2, [r7, #24]
 8002530:	4313      	orrs	r3, r2
 8002532:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	69ba      	ldr	r2, [r7, #24]
 8002538:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002542:	2b00      	cmp	r3, #0
 8002544:	f000 80be 	beq.w	80026c4 <HAL_GPIO_Init+0x690>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002548:	4b65      	ldr	r3, [pc, #404]	; (80026e0 <HAL_GPIO_Init+0x6ac>)
 800254a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800254c:	4a64      	ldr	r2, [pc, #400]	; (80026e0 <HAL_GPIO_Init+0x6ac>)
 800254e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002552:	6453      	str	r3, [r2, #68]	; 0x44
 8002554:	4b62      	ldr	r3, [pc, #392]	; (80026e0 <HAL_GPIO_Init+0x6ac>)
 8002556:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002558:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800255c:	60fb      	str	r3, [r7, #12]
 800255e:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002560:	4a60      	ldr	r2, [pc, #384]	; (80026e4 <HAL_GPIO_Init+0x6b0>)
 8002562:	69fb      	ldr	r3, [r7, #28]
 8002564:	089b      	lsrs	r3, r3, #2
 8002566:	3302      	adds	r3, #2
 8002568:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800256c:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	f003 0303 	and.w	r3, r3, #3
 8002574:	009b      	lsls	r3, r3, #2
 8002576:	220f      	movs	r2, #15
 8002578:	fa02 f303 	lsl.w	r3, r2, r3
 800257c:	43db      	mvns	r3, r3
 800257e:	69ba      	ldr	r2, [r7, #24]
 8002580:	4013      	ands	r3, r2
 8002582:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	4a58      	ldr	r2, [pc, #352]	; (80026e8 <HAL_GPIO_Init+0x6b4>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d037      	beq.n	80025fc <HAL_GPIO_Init+0x5c8>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	4a57      	ldr	r2, [pc, #348]	; (80026ec <HAL_GPIO_Init+0x6b8>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d031      	beq.n	80025f8 <HAL_GPIO_Init+0x5c4>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	4a56      	ldr	r2, [pc, #344]	; (80026f0 <HAL_GPIO_Init+0x6bc>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d02b      	beq.n	80025f4 <HAL_GPIO_Init+0x5c0>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	4a55      	ldr	r2, [pc, #340]	; (80026f4 <HAL_GPIO_Init+0x6c0>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d025      	beq.n	80025f0 <HAL_GPIO_Init+0x5bc>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	4a54      	ldr	r2, [pc, #336]	; (80026f8 <HAL_GPIO_Init+0x6c4>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d01f      	beq.n	80025ec <HAL_GPIO_Init+0x5b8>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	4a53      	ldr	r2, [pc, #332]	; (80026fc <HAL_GPIO_Init+0x6c8>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d019      	beq.n	80025e8 <HAL_GPIO_Init+0x5b4>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	4a52      	ldr	r2, [pc, #328]	; (8002700 <HAL_GPIO_Init+0x6cc>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d013      	beq.n	80025e4 <HAL_GPIO_Init+0x5b0>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	4a51      	ldr	r2, [pc, #324]	; (8002704 <HAL_GPIO_Init+0x6d0>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d00d      	beq.n	80025e0 <HAL_GPIO_Init+0x5ac>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	4a50      	ldr	r2, [pc, #320]	; (8002708 <HAL_GPIO_Init+0x6d4>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d007      	beq.n	80025dc <HAL_GPIO_Init+0x5a8>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	4a4f      	ldr	r2, [pc, #316]	; (800270c <HAL_GPIO_Init+0x6d8>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d101      	bne.n	80025d8 <HAL_GPIO_Init+0x5a4>
 80025d4:	2309      	movs	r3, #9
 80025d6:	e012      	b.n	80025fe <HAL_GPIO_Init+0x5ca>
 80025d8:	230a      	movs	r3, #10
 80025da:	e010      	b.n	80025fe <HAL_GPIO_Init+0x5ca>
 80025dc:	2308      	movs	r3, #8
 80025de:	e00e      	b.n	80025fe <HAL_GPIO_Init+0x5ca>
 80025e0:	2307      	movs	r3, #7
 80025e2:	e00c      	b.n	80025fe <HAL_GPIO_Init+0x5ca>
 80025e4:	2306      	movs	r3, #6
 80025e6:	e00a      	b.n	80025fe <HAL_GPIO_Init+0x5ca>
 80025e8:	2305      	movs	r3, #5
 80025ea:	e008      	b.n	80025fe <HAL_GPIO_Init+0x5ca>
 80025ec:	2304      	movs	r3, #4
 80025ee:	e006      	b.n	80025fe <HAL_GPIO_Init+0x5ca>
 80025f0:	2303      	movs	r3, #3
 80025f2:	e004      	b.n	80025fe <HAL_GPIO_Init+0x5ca>
 80025f4:	2302      	movs	r3, #2
 80025f6:	e002      	b.n	80025fe <HAL_GPIO_Init+0x5ca>
 80025f8:	2301      	movs	r3, #1
 80025fa:	e000      	b.n	80025fe <HAL_GPIO_Init+0x5ca>
 80025fc:	2300      	movs	r3, #0
 80025fe:	69fa      	ldr	r2, [r7, #28]
 8002600:	f002 0203 	and.w	r2, r2, #3
 8002604:	0092      	lsls	r2, r2, #2
 8002606:	4093      	lsls	r3, r2
 8002608:	69ba      	ldr	r2, [r7, #24]
 800260a:	4313      	orrs	r3, r2
 800260c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800260e:	4935      	ldr	r1, [pc, #212]	; (80026e4 <HAL_GPIO_Init+0x6b0>)
 8002610:	69fb      	ldr	r3, [r7, #28]
 8002612:	089b      	lsrs	r3, r3, #2
 8002614:	3302      	adds	r3, #2
 8002616:	69ba      	ldr	r2, [r7, #24]
 8002618:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800261c:	4b3c      	ldr	r3, [pc, #240]	; (8002710 <HAL_GPIO_Init+0x6dc>)
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	43db      	mvns	r3, r3
 8002626:	69ba      	ldr	r2, [r7, #24]
 8002628:	4013      	ands	r3, r2
 800262a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002634:	2b00      	cmp	r3, #0
 8002636:	d003      	beq.n	8002640 <HAL_GPIO_Init+0x60c>
        {
          temp |= iocurrent;
 8002638:	69ba      	ldr	r2, [r7, #24]
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	4313      	orrs	r3, r2
 800263e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002640:	4a33      	ldr	r2, [pc, #204]	; (8002710 <HAL_GPIO_Init+0x6dc>)
 8002642:	69bb      	ldr	r3, [r7, #24]
 8002644:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002646:	4b32      	ldr	r3, [pc, #200]	; (8002710 <HAL_GPIO_Init+0x6dc>)
 8002648:	68db      	ldr	r3, [r3, #12]
 800264a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	43db      	mvns	r3, r3
 8002650:	69ba      	ldr	r2, [r7, #24]
 8002652:	4013      	ands	r3, r2
 8002654:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800265e:	2b00      	cmp	r3, #0
 8002660:	d003      	beq.n	800266a <HAL_GPIO_Init+0x636>
        {
          temp |= iocurrent;
 8002662:	69ba      	ldr	r2, [r7, #24]
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	4313      	orrs	r3, r2
 8002668:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800266a:	4a29      	ldr	r2, [pc, #164]	; (8002710 <HAL_GPIO_Init+0x6dc>)
 800266c:	69bb      	ldr	r3, [r7, #24]
 800266e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002670:	4b27      	ldr	r3, [pc, #156]	; (8002710 <HAL_GPIO_Init+0x6dc>)
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	43db      	mvns	r3, r3
 800267a:	69ba      	ldr	r2, [r7, #24]
 800267c:	4013      	ands	r3, r2
 800267e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002688:	2b00      	cmp	r3, #0
 800268a:	d003      	beq.n	8002694 <HAL_GPIO_Init+0x660>
        {
          temp |= iocurrent;
 800268c:	69ba      	ldr	r2, [r7, #24]
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	4313      	orrs	r3, r2
 8002692:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002694:	4a1e      	ldr	r2, [pc, #120]	; (8002710 <HAL_GPIO_Init+0x6dc>)
 8002696:	69bb      	ldr	r3, [r7, #24]
 8002698:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800269a:	4b1d      	ldr	r3, [pc, #116]	; (8002710 <HAL_GPIO_Init+0x6dc>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	43db      	mvns	r3, r3
 80026a4:	69ba      	ldr	r2, [r7, #24]
 80026a6:	4013      	ands	r3, r2
 80026a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d003      	beq.n	80026be <HAL_GPIO_Init+0x68a>
        {
          temp |= iocurrent;
 80026b6:	69ba      	ldr	r2, [r7, #24]
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	4313      	orrs	r3, r2
 80026bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80026be:	4a14      	ldr	r2, [pc, #80]	; (8002710 <HAL_GPIO_Init+0x6dc>)
 80026c0:	69bb      	ldr	r3, [r7, #24]
 80026c2:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80026c4:	69fb      	ldr	r3, [r7, #28]
 80026c6:	3301      	adds	r3, #1
 80026c8:	61fb      	str	r3, [r7, #28]
 80026ca:	69fb      	ldr	r3, [r7, #28]
 80026cc:	2b0f      	cmp	r3, #15
 80026ce:	f67f ad4d 	bls.w	800216c <HAL_GPIO_Init+0x138>
      }
    }
  }
}
 80026d2:	bf00      	nop
 80026d4:	bf00      	nop
 80026d6:	3720      	adds	r7, #32
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}
 80026dc:	080093e0 	.word	0x080093e0
 80026e0:	40023800 	.word	0x40023800
 80026e4:	40013800 	.word	0x40013800
 80026e8:	40020000 	.word	0x40020000
 80026ec:	40020400 	.word	0x40020400
 80026f0:	40020800 	.word	0x40020800
 80026f4:	40020c00 	.word	0x40020c00
 80026f8:	40021000 	.word	0x40021000
 80026fc:	40021400 	.word	0x40021400
 8002700:	40021800 	.word	0x40021800
 8002704:	40021c00 	.word	0x40021c00
 8002708:	40022000 	.word	0x40022000
 800270c:	40022400 	.word	0x40022400
 8002710:	40013c00 	.word	0x40013c00

08002714 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b082      	sub	sp, #8
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
 800271c:	460b      	mov	r3, r1
 800271e:	807b      	strh	r3, [r7, #2]
 8002720:	4613      	mov	r3, r2
 8002722:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8002724:	887b      	ldrh	r3, [r7, #2]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d104      	bne.n	8002734 <HAL_GPIO_WritePin+0x20>
 800272a:	f240 1197 	movw	r1, #407	; 0x197
 800272e:	480e      	ldr	r0, [pc, #56]	; (8002768 <HAL_GPIO_WritePin+0x54>)
 8002730:	f7fe fea9 	bl	8001486 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8002734:	787b      	ldrb	r3, [r7, #1]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d007      	beq.n	800274a <HAL_GPIO_WritePin+0x36>
 800273a:	787b      	ldrb	r3, [r7, #1]
 800273c:	2b01      	cmp	r3, #1
 800273e:	d004      	beq.n	800274a <HAL_GPIO_WritePin+0x36>
 8002740:	f44f 71cc 	mov.w	r1, #408	; 0x198
 8002744:	4808      	ldr	r0, [pc, #32]	; (8002768 <HAL_GPIO_WritePin+0x54>)
 8002746:	f7fe fe9e 	bl	8001486 <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 800274a:	787b      	ldrb	r3, [r7, #1]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d003      	beq.n	8002758 <HAL_GPIO_WritePin+0x44>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002750:	887a      	ldrh	r2, [r7, #2]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002756:	e003      	b.n	8002760 <HAL_GPIO_WritePin+0x4c>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002758:	887b      	ldrh	r3, [r7, #2]
 800275a:	041a      	lsls	r2, r3, #16
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	619a      	str	r2, [r3, #24]
}
 8002760:	bf00      	nop
 8002762:	3708      	adds	r7, #8
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}
 8002768:	080093e0 	.word	0x080093e0

0800276c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b082      	sub	sp, #8
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d101      	bne.n	800277e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e107      	b.n	800298e <HAL_I2C_Init+0x222>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a85      	ldr	r2, [pc, #532]	; (8002998 <HAL_I2C_Init+0x22c>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d013      	beq.n	80027b0 <HAL_I2C_Init+0x44>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a83      	ldr	r2, [pc, #524]	; (800299c <HAL_I2C_Init+0x230>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d00e      	beq.n	80027b0 <HAL_I2C_Init+0x44>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a82      	ldr	r2, [pc, #520]	; (80029a0 <HAL_I2C_Init+0x234>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d009      	beq.n	80027b0 <HAL_I2C_Init+0x44>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a80      	ldr	r2, [pc, #512]	; (80029a4 <HAL_I2C_Init+0x238>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d004      	beq.n	80027b0 <HAL_I2C_Init+0x44>
 80027a6:	f240 2119 	movw	r1, #537	; 0x219
 80027aa:	487f      	ldr	r0, [pc, #508]	; (80029a8 <HAL_I2C_Init+0x23c>)
 80027ac:	f7fe fe6b 	bl	8001486 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027b8:	d304      	bcc.n	80027c4 <HAL_I2C_Init+0x58>
 80027ba:	f240 211a 	movw	r1, #538	; 0x21a
 80027be:	487a      	ldr	r0, [pc, #488]	; (80029a8 <HAL_I2C_Init+0x23c>)
 80027c0:	f7fe fe61 	bl	8001486 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	68db      	ldr	r3, [r3, #12]
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	d008      	beq.n	80027de <HAL_I2C_Init+0x72>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	68db      	ldr	r3, [r3, #12]
 80027d0:	2b02      	cmp	r3, #2
 80027d2:	d004      	beq.n	80027de <HAL_I2C_Init+0x72>
 80027d4:	f240 211b 	movw	r1, #539	; 0x21b
 80027d8:	4873      	ldr	r0, [pc, #460]	; (80029a8 <HAL_I2C_Init+0x23c>)
 80027da:	f7fe fe54 	bl	8001486 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	691b      	ldr	r3, [r3, #16]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d009      	beq.n	80027fa <HAL_I2C_Init+0x8e>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	691b      	ldr	r3, [r3, #16]
 80027ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80027ee:	d004      	beq.n	80027fa <HAL_I2C_Init+0x8e>
 80027f0:	f44f 7107 	mov.w	r1, #540	; 0x21c
 80027f4:	486c      	ldr	r0, [pc, #432]	; (80029a8 <HAL_I2C_Init+0x23c>)
 80027f6:	f7fe fe46 	bl	8001486 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	695b      	ldr	r3, [r3, #20]
 80027fe:	2bff      	cmp	r3, #255	; 0xff
 8002800:	d904      	bls.n	800280c <HAL_I2C_Init+0xa0>
 8002802:	f240 211d 	movw	r1, #541	; 0x21d
 8002806:	4868      	ldr	r0, [pc, #416]	; (80029a8 <HAL_I2C_Init+0x23c>)
 8002808:	f7fe fe3d 	bl	8001486 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	699b      	ldr	r3, [r3, #24]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d020      	beq.n	8002856 <HAL_I2C_Init+0xea>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	699b      	ldr	r3, [r3, #24]
 8002818:	2b01      	cmp	r3, #1
 800281a:	d01c      	beq.n	8002856 <HAL_I2C_Init+0xea>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	699b      	ldr	r3, [r3, #24]
 8002820:	2b02      	cmp	r3, #2
 8002822:	d018      	beq.n	8002856 <HAL_I2C_Init+0xea>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	699b      	ldr	r3, [r3, #24]
 8002828:	2b03      	cmp	r3, #3
 800282a:	d014      	beq.n	8002856 <HAL_I2C_Init+0xea>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	699b      	ldr	r3, [r3, #24]
 8002830:	2b04      	cmp	r3, #4
 8002832:	d010      	beq.n	8002856 <HAL_I2C_Init+0xea>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	699b      	ldr	r3, [r3, #24]
 8002838:	2b05      	cmp	r3, #5
 800283a:	d00c      	beq.n	8002856 <HAL_I2C_Init+0xea>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	699b      	ldr	r3, [r3, #24]
 8002840:	2b06      	cmp	r3, #6
 8002842:	d008      	beq.n	8002856 <HAL_I2C_Init+0xea>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	699b      	ldr	r3, [r3, #24]
 8002848:	2b07      	cmp	r3, #7
 800284a:	d004      	beq.n	8002856 <HAL_I2C_Init+0xea>
 800284c:	f240 211e 	movw	r1, #542	; 0x21e
 8002850:	4855      	ldr	r0, [pc, #340]	; (80029a8 <HAL_I2C_Init+0x23c>)
 8002852:	f7fe fe18 	bl	8001486 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	69db      	ldr	r3, [r3, #28]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d009      	beq.n	8002872 <HAL_I2C_Init+0x106>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	69db      	ldr	r3, [r3, #28]
 8002862:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002866:	d004      	beq.n	8002872 <HAL_I2C_Init+0x106>
 8002868:	f240 211f 	movw	r1, #543	; 0x21f
 800286c:	484e      	ldr	r0, [pc, #312]	; (80029a8 <HAL_I2C_Init+0x23c>)
 800286e:	f7fe fe0a 	bl	8001486 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6a1b      	ldr	r3, [r3, #32]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d009      	beq.n	800288e <HAL_I2C_Init+0x122>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6a1b      	ldr	r3, [r3, #32]
 800287e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002882:	d004      	beq.n	800288e <HAL_I2C_Init+0x122>
 8002884:	f44f 7108 	mov.w	r1, #544	; 0x220
 8002888:	4847      	ldr	r0, [pc, #284]	; (80029a8 <HAL_I2C_Init+0x23c>)
 800288a:	f7fe fdfc 	bl	8001486 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002894:	b2db      	uxtb	r3, r3
 8002896:	2b00      	cmp	r3, #0
 8002898:	d106      	bne.n	80028a8 <HAL_I2C_Init+0x13c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2200      	movs	r2, #0
 800289e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f7fe fca8 	bl	80011f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2224      	movs	r2, #36	; 0x24
 80028ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f022 0201 	bic.w	r2, r2, #1
 80028be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	685a      	ldr	r2, [r3, #4]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80028cc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	689a      	ldr	r2, [r3, #8]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80028dc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	68db      	ldr	r3, [r3, #12]
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	d107      	bne.n	80028f6 <HAL_I2C_Init+0x18a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	689a      	ldr	r2, [r3, #8]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80028f2:	609a      	str	r2, [r3, #8]
 80028f4:	e006      	b.n	8002904 <HAL_I2C_Init+0x198>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	689a      	ldr	r2, [r3, #8]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002902:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	2b02      	cmp	r3, #2
 800290a:	d104      	bne.n	8002916 <HAL_I2C_Init+0x1aa>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002914:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	6859      	ldr	r1, [r3, #4]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	4b22      	ldr	r3, [pc, #136]	; (80029ac <HAL_I2C_Init+0x240>)
 8002922:	430b      	orrs	r3, r1
 8002924:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	68da      	ldr	r2, [r3, #12]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002934:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	691a      	ldr	r2, [r3, #16]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	695b      	ldr	r3, [r3, #20]
 800293e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	699b      	ldr	r3, [r3, #24]
 8002946:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	430a      	orrs	r2, r1
 800294e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	69d9      	ldr	r1, [r3, #28]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6a1a      	ldr	r2, [r3, #32]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	430a      	orrs	r2, r1
 800295e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f042 0201 	orr.w	r2, r2, #1
 800296e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2200      	movs	r2, #0
 8002974:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2220      	movs	r2, #32
 800297a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2200      	movs	r2, #0
 8002982:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2200      	movs	r2, #0
 8002988:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800298c:	2300      	movs	r3, #0
}
 800298e:	4618      	mov	r0, r3
 8002990:	3708      	adds	r7, #8
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}
 8002996:	bf00      	nop
 8002998:	40005400 	.word	0x40005400
 800299c:	40005800 	.word	0x40005800
 80029a0:	40005c00 	.word	0x40005c00
 80029a4:	40006000 	.word	0x40006000
 80029a8:	0800941c 	.word	0x0800941c
 80029ac:	02008000 	.word	0x02008000

080029b0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b082      	sub	sp, #8
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
 80029b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a32      	ldr	r2, [pc, #200]	; (8002a88 <HAL_I2CEx_ConfigAnalogFilter+0xd8>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d012      	beq.n	80029ea <HAL_I2CEx_ConfigAnalogFilter+0x3a>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a30      	ldr	r2, [pc, #192]	; (8002a8c <HAL_I2CEx_ConfigAnalogFilter+0xdc>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d00d      	beq.n	80029ea <HAL_I2CEx_ConfigAnalogFilter+0x3a>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a2f      	ldr	r2, [pc, #188]	; (8002a90 <HAL_I2CEx_ConfigAnalogFilter+0xe0>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d008      	beq.n	80029ea <HAL_I2CEx_ConfigAnalogFilter+0x3a>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a2d      	ldr	r2, [pc, #180]	; (8002a94 <HAL_I2CEx_ConfigAnalogFilter+0xe4>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d003      	beq.n	80029ea <HAL_I2CEx_ConfigAnalogFilter+0x3a>
 80029e2:	215e      	movs	r1, #94	; 0x5e
 80029e4:	482c      	ldr	r0, [pc, #176]	; (8002a98 <HAL_I2CEx_ConfigAnalogFilter+0xe8>)
 80029e6:	f7fe fd4e 	bl	8001486 <assert_failed>
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d007      	beq.n	8002a00 <HAL_I2CEx_ConfigAnalogFilter+0x50>
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029f6:	d003      	beq.n	8002a00 <HAL_I2CEx_ConfigAnalogFilter+0x50>
 80029f8:	215f      	movs	r1, #95	; 0x5f
 80029fa:	4827      	ldr	r0, [pc, #156]	; (8002a98 <HAL_I2CEx_ConfigAnalogFilter+0xe8>)
 80029fc:	f7fe fd43 	bl	8001486 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a06:	b2db      	uxtb	r3, r3
 8002a08:	2b20      	cmp	r3, #32
 8002a0a:	d138      	bne.n	8002a7e <HAL_I2CEx_ConfigAnalogFilter+0xce>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	d101      	bne.n	8002a1a <HAL_I2CEx_ConfigAnalogFilter+0x6a>
 8002a16:	2302      	movs	r3, #2
 8002a18:	e032      	b.n	8002a80 <HAL_I2CEx_ConfigAnalogFilter+0xd0>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2224      	movs	r2, #36	; 0x24
 8002a26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	681a      	ldr	r2, [r3, #0]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f022 0201 	bic.w	r2, r2, #1
 8002a38:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002a48:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	6819      	ldr	r1, [r3, #0]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	683a      	ldr	r2, [r7, #0]
 8002a56:	430a      	orrs	r2, r1
 8002a58:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f042 0201 	orr.w	r2, r2, #1
 8002a68:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2220      	movs	r2, #32
 8002a6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2200      	movs	r2, #0
 8002a76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	e000      	b.n	8002a80 <HAL_I2CEx_ConfigAnalogFilter+0xd0>
  }
  else
  {
    return HAL_BUSY;
 8002a7e:	2302      	movs	r3, #2
  }
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	3708      	adds	r7, #8
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}
 8002a88:	40005400 	.word	0x40005400
 8002a8c:	40005800 	.word	0x40005800
 8002a90:	40005c00 	.word	0x40005c00
 8002a94:	40006000 	.word	0x40006000
 8002a98:	08009454 	.word	0x08009454

08002a9c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b084      	sub	sp, #16
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
 8002aa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg;

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a31      	ldr	r2, [pc, #196]	; (8002b70 <HAL_I2CEx_ConfigDigitalFilter+0xd4>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d012      	beq.n	8002ad6 <HAL_I2CEx_ConfigDigitalFilter+0x3a>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a2f      	ldr	r2, [pc, #188]	; (8002b74 <HAL_I2CEx_ConfigDigitalFilter+0xd8>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d00d      	beq.n	8002ad6 <HAL_I2CEx_ConfigDigitalFilter+0x3a>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a2e      	ldr	r2, [pc, #184]	; (8002b78 <HAL_I2CEx_ConfigDigitalFilter+0xdc>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d008      	beq.n	8002ad6 <HAL_I2CEx_ConfigDigitalFilter+0x3a>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a2c      	ldr	r2, [pc, #176]	; (8002b7c <HAL_I2CEx_ConfigDigitalFilter+0xe0>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d003      	beq.n	8002ad6 <HAL_I2CEx_ConfigDigitalFilter+0x3a>
 8002ace:	218c      	movs	r1, #140	; 0x8c
 8002ad0:	482b      	ldr	r0, [pc, #172]	; (8002b80 <HAL_I2CEx_ConfigDigitalFilter+0xe4>)
 8002ad2:	f7fe fcd8 	bl	8001486 <assert_failed>
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	2b0f      	cmp	r3, #15
 8002ada:	d903      	bls.n	8002ae4 <HAL_I2CEx_ConfigDigitalFilter+0x48>
 8002adc:	218d      	movs	r1, #141	; 0x8d
 8002ade:	4828      	ldr	r0, [pc, #160]	; (8002b80 <HAL_I2CEx_ConfigDigitalFilter+0xe4>)
 8002ae0:	f7fe fcd1 	bl	8001486 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002aea:	b2db      	uxtb	r3, r3
 8002aec:	2b20      	cmp	r3, #32
 8002aee:	d139      	bne.n	8002b64 <HAL_I2CEx_ConfigDigitalFilter+0xc8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d101      	bne.n	8002afe <HAL_I2CEx_ConfigDigitalFilter+0x62>
 8002afa:	2302      	movs	r3, #2
 8002afc:	e033      	b.n	8002b66 <HAL_I2CEx_ConfigDigitalFilter+0xca>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2201      	movs	r2, #1
 8002b02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2224      	movs	r2, #36	; 0x24
 8002b0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f022 0201 	bic.w	r2, r2, #1
 8002b1c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002b2c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	021b      	lsls	r3, r3, #8
 8002b32:	68fa      	ldr	r2, [r7, #12]
 8002b34:	4313      	orrs	r3, r2
 8002b36:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	68fa      	ldr	r2, [r7, #12]
 8002b3e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f042 0201 	orr.w	r2, r2, #1
 8002b4e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2220      	movs	r2, #32
 8002b54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002b60:	2300      	movs	r3, #0
 8002b62:	e000      	b.n	8002b66 <HAL_I2CEx_ConfigDigitalFilter+0xca>
  }
  else
  {
    return HAL_BUSY;
 8002b64:	2302      	movs	r3, #2
  }
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	3710      	adds	r7, #16
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	40005400 	.word	0x40005400
 8002b74:	40005800 	.word	0x40005800
 8002b78:	40005c00 	.word	0x40005c00
 8002b7c:	40006000 	.word	0x40006000
 8002b80:	08009454 	.word	0x08009454

08002b84 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b082      	sub	sp, #8
 8002b88:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002b8e:	4b23      	ldr	r3, [pc, #140]	; (8002c1c <HAL_PWREx_EnableOverDrive+0x98>)
 8002b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b92:	4a22      	ldr	r2, [pc, #136]	; (8002c1c <HAL_PWREx_EnableOverDrive+0x98>)
 8002b94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b98:	6413      	str	r3, [r2, #64]	; 0x40
 8002b9a:	4b20      	ldr	r3, [pc, #128]	; (8002c1c <HAL_PWREx_EnableOverDrive+0x98>)
 8002b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ba2:	603b      	str	r3, [r7, #0]
 8002ba4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002ba6:	4b1e      	ldr	r3, [pc, #120]	; (8002c20 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a1d      	ldr	r2, [pc, #116]	; (8002c20 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002bac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bb0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002bb2:	f7ff f83d 	bl	8001c30 <HAL_GetTick>
 8002bb6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002bb8:	e009      	b.n	8002bce <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002bba:	f7ff f839 	bl	8001c30 <HAL_GetTick>
 8002bbe:	4602      	mov	r2, r0
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	1ad3      	subs	r3, r2, r3
 8002bc4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002bc8:	d901      	bls.n	8002bce <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002bca:	2303      	movs	r3, #3
 8002bcc:	e022      	b.n	8002c14 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002bce:	4b14      	ldr	r3, [pc, #80]	; (8002c20 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bda:	d1ee      	bne.n	8002bba <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002bdc:	4b10      	ldr	r3, [pc, #64]	; (8002c20 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a0f      	ldr	r2, [pc, #60]	; (8002c20 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002be2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002be6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002be8:	f7ff f822 	bl	8001c30 <HAL_GetTick>
 8002bec:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002bee:	e009      	b.n	8002c04 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002bf0:	f7ff f81e 	bl	8001c30 <HAL_GetTick>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	1ad3      	subs	r3, r2, r3
 8002bfa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002bfe:	d901      	bls.n	8002c04 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002c00:	2303      	movs	r3, #3
 8002c02:	e007      	b.n	8002c14 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002c04:	4b06      	ldr	r3, [pc, #24]	; (8002c20 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c0c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002c10:	d1ee      	bne.n	8002bf0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002c12:	2300      	movs	r3, #0
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	3708      	adds	r7, #8
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}
 8002c1c:	40023800 	.word	0x40023800
 8002c20:	40007000 	.word	0x40007000

08002c24 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b086      	sub	sp, #24
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d101      	bne.n	8002c3a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	e345      	b.n	80032c6 <HAL_RCC_OscConfig+0x6a2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	2b0f      	cmp	r3, #15
 8002c40:	d904      	bls.n	8002c4c <HAL_RCC_OscConfig+0x28>
 8002c42:	f240 1163 	movw	r1, #355	; 0x163
 8002c46:	4892      	ldr	r0, [pc, #584]	; (8002e90 <HAL_RCC_OscConfig+0x26c>)
 8002c48:	f7fe fc1d 	bl	8001486 <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f003 0301 	and.w	r3, r3, #1
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	f000 809a 	beq.w	8002d8e <HAL_RCC_OscConfig+0x16a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d00e      	beq.n	8002c80 <HAL_RCC_OscConfig+0x5c>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c6a:	d009      	beq.n	8002c80 <HAL_RCC_OscConfig+0x5c>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c74:	d004      	beq.n	8002c80 <HAL_RCC_OscConfig+0x5c>
 8002c76:	f240 1169 	movw	r1, #361	; 0x169
 8002c7a:	4885      	ldr	r0, [pc, #532]	; (8002e90 <HAL_RCC_OscConfig+0x26c>)
 8002c7c:	f7fe fc03 	bl	8001486 <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c80:	4b84      	ldr	r3, [pc, #528]	; (8002e94 <HAL_RCC_OscConfig+0x270>)
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	f003 030c 	and.w	r3, r3, #12
 8002c88:	2b04      	cmp	r3, #4
 8002c8a:	d00c      	beq.n	8002ca6 <HAL_RCC_OscConfig+0x82>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c8c:	4b81      	ldr	r3, [pc, #516]	; (8002e94 <HAL_RCC_OscConfig+0x270>)
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	f003 030c 	and.w	r3, r3, #12
 8002c94:	2b08      	cmp	r3, #8
 8002c96:	d112      	bne.n	8002cbe <HAL_RCC_OscConfig+0x9a>
 8002c98:	4b7e      	ldr	r3, [pc, #504]	; (8002e94 <HAL_RCC_OscConfig+0x270>)
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ca0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ca4:	d10b      	bne.n	8002cbe <HAL_RCC_OscConfig+0x9a>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ca6:	4b7b      	ldr	r3, [pc, #492]	; (8002e94 <HAL_RCC_OscConfig+0x270>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d06c      	beq.n	8002d8c <HAL_RCC_OscConfig+0x168>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d168      	bne.n	8002d8c <HAL_RCC_OscConfig+0x168>
      {
        return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e303      	b.n	80032c6 <HAL_RCC_OscConfig+0x6a2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cc6:	d106      	bne.n	8002cd6 <HAL_RCC_OscConfig+0xb2>
 8002cc8:	4b72      	ldr	r3, [pc, #456]	; (8002e94 <HAL_RCC_OscConfig+0x270>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a71      	ldr	r2, [pc, #452]	; (8002e94 <HAL_RCC_OscConfig+0x270>)
 8002cce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cd2:	6013      	str	r3, [r2, #0]
 8002cd4:	e02e      	b.n	8002d34 <HAL_RCC_OscConfig+0x110>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d10c      	bne.n	8002cf8 <HAL_RCC_OscConfig+0xd4>
 8002cde:	4b6d      	ldr	r3, [pc, #436]	; (8002e94 <HAL_RCC_OscConfig+0x270>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a6c      	ldr	r2, [pc, #432]	; (8002e94 <HAL_RCC_OscConfig+0x270>)
 8002ce4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ce8:	6013      	str	r3, [r2, #0]
 8002cea:	4b6a      	ldr	r3, [pc, #424]	; (8002e94 <HAL_RCC_OscConfig+0x270>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a69      	ldr	r2, [pc, #420]	; (8002e94 <HAL_RCC_OscConfig+0x270>)
 8002cf0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cf4:	6013      	str	r3, [r2, #0]
 8002cf6:	e01d      	b.n	8002d34 <HAL_RCC_OscConfig+0x110>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d00:	d10c      	bne.n	8002d1c <HAL_RCC_OscConfig+0xf8>
 8002d02:	4b64      	ldr	r3, [pc, #400]	; (8002e94 <HAL_RCC_OscConfig+0x270>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a63      	ldr	r2, [pc, #396]	; (8002e94 <HAL_RCC_OscConfig+0x270>)
 8002d08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d0c:	6013      	str	r3, [r2, #0]
 8002d0e:	4b61      	ldr	r3, [pc, #388]	; (8002e94 <HAL_RCC_OscConfig+0x270>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a60      	ldr	r2, [pc, #384]	; (8002e94 <HAL_RCC_OscConfig+0x270>)
 8002d14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d18:	6013      	str	r3, [r2, #0]
 8002d1a:	e00b      	b.n	8002d34 <HAL_RCC_OscConfig+0x110>
 8002d1c:	4b5d      	ldr	r3, [pc, #372]	; (8002e94 <HAL_RCC_OscConfig+0x270>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a5c      	ldr	r2, [pc, #368]	; (8002e94 <HAL_RCC_OscConfig+0x270>)
 8002d22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d26:	6013      	str	r3, [r2, #0]
 8002d28:	4b5a      	ldr	r3, [pc, #360]	; (8002e94 <HAL_RCC_OscConfig+0x270>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a59      	ldr	r2, [pc, #356]	; (8002e94 <HAL_RCC_OscConfig+0x270>)
 8002d2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d013      	beq.n	8002d64 <HAL_RCC_OscConfig+0x140>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d3c:	f7fe ff78 	bl	8001c30 <HAL_GetTick>
 8002d40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d42:	e008      	b.n	8002d56 <HAL_RCC_OscConfig+0x132>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d44:	f7fe ff74 	bl	8001c30 <HAL_GetTick>
 8002d48:	4602      	mov	r2, r0
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	1ad3      	subs	r3, r2, r3
 8002d4e:	2b64      	cmp	r3, #100	; 0x64
 8002d50:	d901      	bls.n	8002d56 <HAL_RCC_OscConfig+0x132>
          {
            return HAL_TIMEOUT;
 8002d52:	2303      	movs	r3, #3
 8002d54:	e2b7      	b.n	80032c6 <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d56:	4b4f      	ldr	r3, [pc, #316]	; (8002e94 <HAL_RCC_OscConfig+0x270>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d0f0      	beq.n	8002d44 <HAL_RCC_OscConfig+0x120>
 8002d62:	e014      	b.n	8002d8e <HAL_RCC_OscConfig+0x16a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d64:	f7fe ff64 	bl	8001c30 <HAL_GetTick>
 8002d68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d6a:	e008      	b.n	8002d7e <HAL_RCC_OscConfig+0x15a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d6c:	f7fe ff60 	bl	8001c30 <HAL_GetTick>
 8002d70:	4602      	mov	r2, r0
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	1ad3      	subs	r3, r2, r3
 8002d76:	2b64      	cmp	r3, #100	; 0x64
 8002d78:	d901      	bls.n	8002d7e <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8002d7a:	2303      	movs	r3, #3
 8002d7c:	e2a3      	b.n	80032c6 <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d7e:	4b45      	ldr	r3, [pc, #276]	; (8002e94 <HAL_RCC_OscConfig+0x270>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d1f0      	bne.n	8002d6c <HAL_RCC_OscConfig+0x148>
 8002d8a:	e000      	b.n	8002d8e <HAL_RCC_OscConfig+0x16a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 0302 	and.w	r3, r3, #2
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	f000 8084 	beq.w	8002ea4 <HAL_RCC_OscConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	68db      	ldr	r3, [r3, #12]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d008      	beq.n	8002db6 <HAL_RCC_OscConfig+0x192>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	68db      	ldr	r3, [r3, #12]
 8002da8:	2b01      	cmp	r3, #1
 8002daa:	d004      	beq.n	8002db6 <HAL_RCC_OscConfig+0x192>
 8002dac:	f240 119b 	movw	r1, #411	; 0x19b
 8002db0:	4837      	ldr	r0, [pc, #220]	; (8002e90 <HAL_RCC_OscConfig+0x26c>)
 8002db2:	f7fe fb68 	bl	8001486 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	691b      	ldr	r3, [r3, #16]
 8002dba:	2b1f      	cmp	r3, #31
 8002dbc:	d904      	bls.n	8002dc8 <HAL_RCC_OscConfig+0x1a4>
 8002dbe:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 8002dc2:	4833      	ldr	r0, [pc, #204]	; (8002e90 <HAL_RCC_OscConfig+0x26c>)
 8002dc4:	f7fe fb5f 	bl	8001486 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002dc8:	4b32      	ldr	r3, [pc, #200]	; (8002e94 <HAL_RCC_OscConfig+0x270>)
 8002dca:	689b      	ldr	r3, [r3, #8]
 8002dcc:	f003 030c 	and.w	r3, r3, #12
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d00b      	beq.n	8002dec <HAL_RCC_OscConfig+0x1c8>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dd4:	4b2f      	ldr	r3, [pc, #188]	; (8002e94 <HAL_RCC_OscConfig+0x270>)
 8002dd6:	689b      	ldr	r3, [r3, #8]
 8002dd8:	f003 030c 	and.w	r3, r3, #12
 8002ddc:	2b08      	cmp	r3, #8
 8002dde:	d11c      	bne.n	8002e1a <HAL_RCC_OscConfig+0x1f6>
 8002de0:	4b2c      	ldr	r3, [pc, #176]	; (8002e94 <HAL_RCC_OscConfig+0x270>)
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d116      	bne.n	8002e1a <HAL_RCC_OscConfig+0x1f6>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dec:	4b29      	ldr	r3, [pc, #164]	; (8002e94 <HAL_RCC_OscConfig+0x270>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f003 0302 	and.w	r3, r3, #2
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d005      	beq.n	8002e04 <HAL_RCC_OscConfig+0x1e0>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	68db      	ldr	r3, [r3, #12]
 8002dfc:	2b01      	cmp	r3, #1
 8002dfe:	d001      	beq.n	8002e04 <HAL_RCC_OscConfig+0x1e0>
      {
        return HAL_ERROR;
 8002e00:	2301      	movs	r3, #1
 8002e02:	e260      	b.n	80032c6 <HAL_RCC_OscConfig+0x6a2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e04:	4b23      	ldr	r3, [pc, #140]	; (8002e94 <HAL_RCC_OscConfig+0x270>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	691b      	ldr	r3, [r3, #16]
 8002e10:	00db      	lsls	r3, r3, #3
 8002e12:	4920      	ldr	r1, [pc, #128]	; (8002e94 <HAL_RCC_OscConfig+0x270>)
 8002e14:	4313      	orrs	r3, r2
 8002e16:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e18:	e044      	b.n	8002ea4 <HAL_RCC_OscConfig+0x280>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	68db      	ldr	r3, [r3, #12]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d023      	beq.n	8002e6a <HAL_RCC_OscConfig+0x246>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e22:	4b1c      	ldr	r3, [pc, #112]	; (8002e94 <HAL_RCC_OscConfig+0x270>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a1b      	ldr	r2, [pc, #108]	; (8002e94 <HAL_RCC_OscConfig+0x270>)
 8002e28:	f043 0301 	orr.w	r3, r3, #1
 8002e2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e2e:	f7fe feff 	bl	8001c30 <HAL_GetTick>
 8002e32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e34:	e008      	b.n	8002e48 <HAL_RCC_OscConfig+0x224>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e36:	f7fe fefb 	bl	8001c30 <HAL_GetTick>
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	1ad3      	subs	r3, r2, r3
 8002e40:	2b02      	cmp	r3, #2
 8002e42:	d901      	bls.n	8002e48 <HAL_RCC_OscConfig+0x224>
          {
            return HAL_TIMEOUT;
 8002e44:	2303      	movs	r3, #3
 8002e46:	e23e      	b.n	80032c6 <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e48:	4b12      	ldr	r3, [pc, #72]	; (8002e94 <HAL_RCC_OscConfig+0x270>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f003 0302 	and.w	r3, r3, #2
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d0f0      	beq.n	8002e36 <HAL_RCC_OscConfig+0x212>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e54:	4b0f      	ldr	r3, [pc, #60]	; (8002e94 <HAL_RCC_OscConfig+0x270>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	691b      	ldr	r3, [r3, #16]
 8002e60:	00db      	lsls	r3, r3, #3
 8002e62:	490c      	ldr	r1, [pc, #48]	; (8002e94 <HAL_RCC_OscConfig+0x270>)
 8002e64:	4313      	orrs	r3, r2
 8002e66:	600b      	str	r3, [r1, #0]
 8002e68:	e01c      	b.n	8002ea4 <HAL_RCC_OscConfig+0x280>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e6a:	4b0a      	ldr	r3, [pc, #40]	; (8002e94 <HAL_RCC_OscConfig+0x270>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a09      	ldr	r2, [pc, #36]	; (8002e94 <HAL_RCC_OscConfig+0x270>)
 8002e70:	f023 0301 	bic.w	r3, r3, #1
 8002e74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e76:	f7fe fedb 	bl	8001c30 <HAL_GetTick>
 8002e7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e7c:	e00c      	b.n	8002e98 <HAL_RCC_OscConfig+0x274>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e7e:	f7fe fed7 	bl	8001c30 <HAL_GetTick>
 8002e82:	4602      	mov	r2, r0
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	1ad3      	subs	r3, r2, r3
 8002e88:	2b02      	cmp	r3, #2
 8002e8a:	d905      	bls.n	8002e98 <HAL_RCC_OscConfig+0x274>
          {
            return HAL_TIMEOUT;
 8002e8c:	2303      	movs	r3, #3
 8002e8e:	e21a      	b.n	80032c6 <HAL_RCC_OscConfig+0x6a2>
 8002e90:	08009490 	.word	0x08009490
 8002e94:	40023800 	.word	0x40023800
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e98:	4b7e      	ldr	r3, [pc, #504]	; (8003094 <HAL_RCC_OscConfig+0x470>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f003 0302 	and.w	r3, r3, #2
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d1ec      	bne.n	8002e7e <HAL_RCC_OscConfig+0x25a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f003 0308 	and.w	r3, r3, #8
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d043      	beq.n	8002f38 <HAL_RCC_OscConfig+0x314>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	695b      	ldr	r3, [r3, #20]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d008      	beq.n	8002eca <HAL_RCC_OscConfig+0x2a6>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	695b      	ldr	r3, [r3, #20]
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	d004      	beq.n	8002eca <HAL_RCC_OscConfig+0x2a6>
 8002ec0:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 8002ec4:	4874      	ldr	r0, [pc, #464]	; (8003098 <HAL_RCC_OscConfig+0x474>)
 8002ec6:	f7fe fade 	bl	8001486 <assert_failed>

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	695b      	ldr	r3, [r3, #20]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d019      	beq.n	8002f06 <HAL_RCC_OscConfig+0x2e2>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ed2:	4b70      	ldr	r3, [pc, #448]	; (8003094 <HAL_RCC_OscConfig+0x470>)
 8002ed4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ed6:	4a6f      	ldr	r2, [pc, #444]	; (8003094 <HAL_RCC_OscConfig+0x470>)
 8002ed8:	f043 0301 	orr.w	r3, r3, #1
 8002edc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ede:	f7fe fea7 	bl	8001c30 <HAL_GetTick>
 8002ee2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ee4:	e008      	b.n	8002ef8 <HAL_RCC_OscConfig+0x2d4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ee6:	f7fe fea3 	bl	8001c30 <HAL_GetTick>
 8002eea:	4602      	mov	r2, r0
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	1ad3      	subs	r3, r2, r3
 8002ef0:	2b02      	cmp	r3, #2
 8002ef2:	d901      	bls.n	8002ef8 <HAL_RCC_OscConfig+0x2d4>
        {
          return HAL_TIMEOUT;
 8002ef4:	2303      	movs	r3, #3
 8002ef6:	e1e6      	b.n	80032c6 <HAL_RCC_OscConfig+0x6a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ef8:	4b66      	ldr	r3, [pc, #408]	; (8003094 <HAL_RCC_OscConfig+0x470>)
 8002efa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002efc:	f003 0302 	and.w	r3, r3, #2
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d0f0      	beq.n	8002ee6 <HAL_RCC_OscConfig+0x2c2>
 8002f04:	e018      	b.n	8002f38 <HAL_RCC_OscConfig+0x314>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f06:	4b63      	ldr	r3, [pc, #396]	; (8003094 <HAL_RCC_OscConfig+0x470>)
 8002f08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f0a:	4a62      	ldr	r2, [pc, #392]	; (8003094 <HAL_RCC_OscConfig+0x470>)
 8002f0c:	f023 0301 	bic.w	r3, r3, #1
 8002f10:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f12:	f7fe fe8d 	bl	8001c30 <HAL_GetTick>
 8002f16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f18:	e008      	b.n	8002f2c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f1a:	f7fe fe89 	bl	8001c30 <HAL_GetTick>
 8002f1e:	4602      	mov	r2, r0
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	1ad3      	subs	r3, r2, r3
 8002f24:	2b02      	cmp	r3, #2
 8002f26:	d901      	bls.n	8002f2c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002f28:	2303      	movs	r3, #3
 8002f2a:	e1cc      	b.n	80032c6 <HAL_RCC_OscConfig+0x6a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f2c:	4b59      	ldr	r3, [pc, #356]	; (8003094 <HAL_RCC_OscConfig+0x470>)
 8002f2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f30:	f003 0302 	and.w	r3, r3, #2
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d1f0      	bne.n	8002f1a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 0304 	and.w	r3, r3, #4
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	f000 80bc 	beq.w	80030be <HAL_RCC_OscConfig+0x49a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d00c      	beq.n	8002f68 <HAL_RCC_OscConfig+0x344>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d008      	beq.n	8002f68 <HAL_RCC_OscConfig+0x344>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	2b05      	cmp	r3, #5
 8002f5c:	d004      	beq.n	8002f68 <HAL_RCC_OscConfig+0x344>
 8002f5e:	f240 2106 	movw	r1, #518	; 0x206
 8002f62:	484d      	ldr	r0, [pc, #308]	; (8003098 <HAL_RCC_OscConfig+0x474>)
 8002f64:	f7fe fa8f 	bl	8001486 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f68:	4b4a      	ldr	r3, [pc, #296]	; (8003094 <HAL_RCC_OscConfig+0x470>)
 8002f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d10d      	bne.n	8002f90 <HAL_RCC_OscConfig+0x36c>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f74:	4b47      	ldr	r3, [pc, #284]	; (8003094 <HAL_RCC_OscConfig+0x470>)
 8002f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f78:	4a46      	ldr	r2, [pc, #280]	; (8003094 <HAL_RCC_OscConfig+0x470>)
 8002f7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f7e:	6413      	str	r3, [r2, #64]	; 0x40
 8002f80:	4b44      	ldr	r3, [pc, #272]	; (8003094 <HAL_RCC_OscConfig+0x470>)
 8002f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f88:	60bb      	str	r3, [r7, #8]
 8002f8a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f90:	4b42      	ldr	r3, [pc, #264]	; (800309c <HAL_RCC_OscConfig+0x478>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d118      	bne.n	8002fce <HAL_RCC_OscConfig+0x3aa>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002f9c:	4b3f      	ldr	r3, [pc, #252]	; (800309c <HAL_RCC_OscConfig+0x478>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a3e      	ldr	r2, [pc, #248]	; (800309c <HAL_RCC_OscConfig+0x478>)
 8002fa2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fa6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fa8:	f7fe fe42 	bl	8001c30 <HAL_GetTick>
 8002fac:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002fae:	e008      	b.n	8002fc2 <HAL_RCC_OscConfig+0x39e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fb0:	f7fe fe3e 	bl	8001c30 <HAL_GetTick>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	1ad3      	subs	r3, r2, r3
 8002fba:	2b64      	cmp	r3, #100	; 0x64
 8002fbc:	d901      	bls.n	8002fc2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002fbe:	2303      	movs	r3, #3
 8002fc0:	e181      	b.n	80032c6 <HAL_RCC_OscConfig+0x6a2>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002fc2:	4b36      	ldr	r3, [pc, #216]	; (800309c <HAL_RCC_OscConfig+0x478>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d0f0      	beq.n	8002fb0 <HAL_RCC_OscConfig+0x38c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	2b01      	cmp	r3, #1
 8002fd4:	d106      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x3c0>
 8002fd6:	4b2f      	ldr	r3, [pc, #188]	; (8003094 <HAL_RCC_OscConfig+0x470>)
 8002fd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fda:	4a2e      	ldr	r2, [pc, #184]	; (8003094 <HAL_RCC_OscConfig+0x470>)
 8002fdc:	f043 0301 	orr.w	r3, r3, #1
 8002fe0:	6713      	str	r3, [r2, #112]	; 0x70
 8002fe2:	e02d      	b.n	8003040 <HAL_RCC_OscConfig+0x41c>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d10c      	bne.n	8003006 <HAL_RCC_OscConfig+0x3e2>
 8002fec:	4b29      	ldr	r3, [pc, #164]	; (8003094 <HAL_RCC_OscConfig+0x470>)
 8002fee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ff0:	4a28      	ldr	r2, [pc, #160]	; (8003094 <HAL_RCC_OscConfig+0x470>)
 8002ff2:	f023 0301 	bic.w	r3, r3, #1
 8002ff6:	6713      	str	r3, [r2, #112]	; 0x70
 8002ff8:	4b26      	ldr	r3, [pc, #152]	; (8003094 <HAL_RCC_OscConfig+0x470>)
 8002ffa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ffc:	4a25      	ldr	r2, [pc, #148]	; (8003094 <HAL_RCC_OscConfig+0x470>)
 8002ffe:	f023 0304 	bic.w	r3, r3, #4
 8003002:	6713      	str	r3, [r2, #112]	; 0x70
 8003004:	e01c      	b.n	8003040 <HAL_RCC_OscConfig+0x41c>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	2b05      	cmp	r3, #5
 800300c:	d10c      	bne.n	8003028 <HAL_RCC_OscConfig+0x404>
 800300e:	4b21      	ldr	r3, [pc, #132]	; (8003094 <HAL_RCC_OscConfig+0x470>)
 8003010:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003012:	4a20      	ldr	r2, [pc, #128]	; (8003094 <HAL_RCC_OscConfig+0x470>)
 8003014:	f043 0304 	orr.w	r3, r3, #4
 8003018:	6713      	str	r3, [r2, #112]	; 0x70
 800301a:	4b1e      	ldr	r3, [pc, #120]	; (8003094 <HAL_RCC_OscConfig+0x470>)
 800301c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800301e:	4a1d      	ldr	r2, [pc, #116]	; (8003094 <HAL_RCC_OscConfig+0x470>)
 8003020:	f043 0301 	orr.w	r3, r3, #1
 8003024:	6713      	str	r3, [r2, #112]	; 0x70
 8003026:	e00b      	b.n	8003040 <HAL_RCC_OscConfig+0x41c>
 8003028:	4b1a      	ldr	r3, [pc, #104]	; (8003094 <HAL_RCC_OscConfig+0x470>)
 800302a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800302c:	4a19      	ldr	r2, [pc, #100]	; (8003094 <HAL_RCC_OscConfig+0x470>)
 800302e:	f023 0301 	bic.w	r3, r3, #1
 8003032:	6713      	str	r3, [r2, #112]	; 0x70
 8003034:	4b17      	ldr	r3, [pc, #92]	; (8003094 <HAL_RCC_OscConfig+0x470>)
 8003036:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003038:	4a16      	ldr	r2, [pc, #88]	; (8003094 <HAL_RCC_OscConfig+0x470>)
 800303a:	f023 0304 	bic.w	r3, r3, #4
 800303e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d015      	beq.n	8003074 <HAL_RCC_OscConfig+0x450>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003048:	f7fe fdf2 	bl	8001c30 <HAL_GetTick>
 800304c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800304e:	e00a      	b.n	8003066 <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003050:	f7fe fdee 	bl	8001c30 <HAL_GetTick>
 8003054:	4602      	mov	r2, r0
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	1ad3      	subs	r3, r2, r3
 800305a:	f241 3288 	movw	r2, #5000	; 0x1388
 800305e:	4293      	cmp	r3, r2
 8003060:	d901      	bls.n	8003066 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8003062:	2303      	movs	r3, #3
 8003064:	e12f      	b.n	80032c6 <HAL_RCC_OscConfig+0x6a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003066:	4b0b      	ldr	r3, [pc, #44]	; (8003094 <HAL_RCC_OscConfig+0x470>)
 8003068:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800306a:	f003 0302 	and.w	r3, r3, #2
 800306e:	2b00      	cmp	r3, #0
 8003070:	d0ee      	beq.n	8003050 <HAL_RCC_OscConfig+0x42c>
 8003072:	e01b      	b.n	80030ac <HAL_RCC_OscConfig+0x488>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003074:	f7fe fddc 	bl	8001c30 <HAL_GetTick>
 8003078:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800307a:	e011      	b.n	80030a0 <HAL_RCC_OscConfig+0x47c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800307c:	f7fe fdd8 	bl	8001c30 <HAL_GetTick>
 8003080:	4602      	mov	r2, r0
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	1ad3      	subs	r3, r2, r3
 8003086:	f241 3288 	movw	r2, #5000	; 0x1388
 800308a:	4293      	cmp	r3, r2
 800308c:	d908      	bls.n	80030a0 <HAL_RCC_OscConfig+0x47c>
        {
          return HAL_TIMEOUT;
 800308e:	2303      	movs	r3, #3
 8003090:	e119      	b.n	80032c6 <HAL_RCC_OscConfig+0x6a2>
 8003092:	bf00      	nop
 8003094:	40023800 	.word	0x40023800
 8003098:	08009490 	.word	0x08009490
 800309c:	40007000 	.word	0x40007000
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030a0:	4b8b      	ldr	r3, [pc, #556]	; (80032d0 <HAL_RCC_OscConfig+0x6ac>)
 80030a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030a4:	f003 0302 	and.w	r3, r3, #2
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d1e7      	bne.n	800307c <HAL_RCC_OscConfig+0x458>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80030ac:	7dfb      	ldrb	r3, [r7, #23]
 80030ae:	2b01      	cmp	r3, #1
 80030b0:	d105      	bne.n	80030be <HAL_RCC_OscConfig+0x49a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030b2:	4b87      	ldr	r3, [pc, #540]	; (80032d0 <HAL_RCC_OscConfig+0x6ac>)
 80030b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b6:	4a86      	ldr	r2, [pc, #536]	; (80032d0 <HAL_RCC_OscConfig+0x6ac>)
 80030b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030bc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	699b      	ldr	r3, [r3, #24]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d00c      	beq.n	80030e0 <HAL_RCC_OscConfig+0x4bc>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	699b      	ldr	r3, [r3, #24]
 80030ca:	2b01      	cmp	r3, #1
 80030cc:	d008      	beq.n	80030e0 <HAL_RCC_OscConfig+0x4bc>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	699b      	ldr	r3, [r3, #24]
 80030d2:	2b02      	cmp	r3, #2
 80030d4:	d004      	beq.n	80030e0 <HAL_RCC_OscConfig+0x4bc>
 80030d6:	f240 214a 	movw	r1, #586	; 0x24a
 80030da:	487e      	ldr	r0, [pc, #504]	; (80032d4 <HAL_RCC_OscConfig+0x6b0>)
 80030dc:	f7fe f9d3 	bl	8001486 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	699b      	ldr	r3, [r3, #24]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	f000 80ed 	beq.w	80032c4 <HAL_RCC_OscConfig+0x6a0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80030ea:	4b79      	ldr	r3, [pc, #484]	; (80032d0 <HAL_RCC_OscConfig+0x6ac>)
 80030ec:	689b      	ldr	r3, [r3, #8]
 80030ee:	f003 030c 	and.w	r3, r3, #12
 80030f2:	2b08      	cmp	r3, #8
 80030f4:	f000 80b4 	beq.w	8003260 <HAL_RCC_OscConfig+0x63c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	699b      	ldr	r3, [r3, #24]
 80030fc:	2b02      	cmp	r3, #2
 80030fe:	f040 8095 	bne.w	800322c <HAL_RCC_OscConfig+0x608>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	69db      	ldr	r3, [r3, #28]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d009      	beq.n	800311e <HAL_RCC_OscConfig+0x4fa>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	69db      	ldr	r3, [r3, #28]
 800310e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003112:	d004      	beq.n	800311e <HAL_RCC_OscConfig+0x4fa>
 8003114:	f240 2153 	movw	r1, #595	; 0x253
 8003118:	486e      	ldr	r0, [pc, #440]	; (80032d4 <HAL_RCC_OscConfig+0x6b0>)
 800311a:	f7fe f9b4 	bl	8001486 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6a1b      	ldr	r3, [r3, #32]
 8003122:	2b01      	cmp	r3, #1
 8003124:	d903      	bls.n	800312e <HAL_RCC_OscConfig+0x50a>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6a1b      	ldr	r3, [r3, #32]
 800312a:	2b3f      	cmp	r3, #63	; 0x3f
 800312c:	d904      	bls.n	8003138 <HAL_RCC_OscConfig+0x514>
 800312e:	f44f 7115 	mov.w	r1, #596	; 0x254
 8003132:	4868      	ldr	r0, [pc, #416]	; (80032d4 <HAL_RCC_OscConfig+0x6b0>)
 8003134:	f7fe f9a7 	bl	8001486 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800313c:	2b31      	cmp	r3, #49	; 0x31
 800313e:	d904      	bls.n	800314a <HAL_RCC_OscConfig+0x526>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003144:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8003148:	d904      	bls.n	8003154 <HAL_RCC_OscConfig+0x530>
 800314a:	f240 2155 	movw	r1, #597	; 0x255
 800314e:	4861      	ldr	r0, [pc, #388]	; (80032d4 <HAL_RCC_OscConfig+0x6b0>)
 8003150:	f7fe f999 	bl	8001486 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003158:	2b02      	cmp	r3, #2
 800315a:	d010      	beq.n	800317e <HAL_RCC_OscConfig+0x55a>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003160:	2b04      	cmp	r3, #4
 8003162:	d00c      	beq.n	800317e <HAL_RCC_OscConfig+0x55a>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003168:	2b06      	cmp	r3, #6
 800316a:	d008      	beq.n	800317e <HAL_RCC_OscConfig+0x55a>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003170:	2b08      	cmp	r3, #8
 8003172:	d004      	beq.n	800317e <HAL_RCC_OscConfig+0x55a>
 8003174:	f240 2156 	movw	r1, #598	; 0x256
 8003178:	4856      	ldr	r0, [pc, #344]	; (80032d4 <HAL_RCC_OscConfig+0x6b0>)
 800317a:	f7fe f984 	bl	8001486 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003182:	2b01      	cmp	r3, #1
 8003184:	d903      	bls.n	800318e <HAL_RCC_OscConfig+0x56a>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800318a:	2b0f      	cmp	r3, #15
 800318c:	d904      	bls.n	8003198 <HAL_RCC_OscConfig+0x574>
 800318e:	f240 2157 	movw	r1, #599	; 0x257
 8003192:	4850      	ldr	r0, [pc, #320]	; (80032d4 <HAL_RCC_OscConfig+0x6b0>)
 8003194:	f7fe f977 	bl	8001486 <assert_failed>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003198:	4b4d      	ldr	r3, [pc, #308]	; (80032d0 <HAL_RCC_OscConfig+0x6ac>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a4c      	ldr	r2, [pc, #304]	; (80032d0 <HAL_RCC_OscConfig+0x6ac>)
 800319e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80031a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031a4:	f7fe fd44 	bl	8001c30 <HAL_GetTick>
 80031a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031aa:	e008      	b.n	80031be <HAL_RCC_OscConfig+0x59a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031ac:	f7fe fd40 	bl	8001c30 <HAL_GetTick>
 80031b0:	4602      	mov	r2, r0
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	1ad3      	subs	r3, r2, r3
 80031b6:	2b02      	cmp	r3, #2
 80031b8:	d901      	bls.n	80031be <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80031ba:	2303      	movs	r3, #3
 80031bc:	e083      	b.n	80032c6 <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031be:	4b44      	ldr	r3, [pc, #272]	; (80032d0 <HAL_RCC_OscConfig+0x6ac>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d1f0      	bne.n	80031ac <HAL_RCC_OscConfig+0x588>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	69da      	ldr	r2, [r3, #28]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6a1b      	ldr	r3, [r3, #32]
 80031d2:	431a      	orrs	r2, r3
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d8:	019b      	lsls	r3, r3, #6
 80031da:	431a      	orrs	r2, r3
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031e0:	085b      	lsrs	r3, r3, #1
 80031e2:	3b01      	subs	r3, #1
 80031e4:	041b      	lsls	r3, r3, #16
 80031e6:	431a      	orrs	r2, r3
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ec:	061b      	lsls	r3, r3, #24
 80031ee:	4313      	orrs	r3, r2
 80031f0:	4a37      	ldr	r2, [pc, #220]	; (80032d0 <HAL_RCC_OscConfig+0x6ac>)
 80031f2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80031f6:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031f8:	4b35      	ldr	r3, [pc, #212]	; (80032d0 <HAL_RCC_OscConfig+0x6ac>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a34      	ldr	r2, [pc, #208]	; (80032d0 <HAL_RCC_OscConfig+0x6ac>)
 80031fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003202:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003204:	f7fe fd14 	bl	8001c30 <HAL_GetTick>
 8003208:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800320a:	e008      	b.n	800321e <HAL_RCC_OscConfig+0x5fa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800320c:	f7fe fd10 	bl	8001c30 <HAL_GetTick>
 8003210:	4602      	mov	r2, r0
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	1ad3      	subs	r3, r2, r3
 8003216:	2b02      	cmp	r3, #2
 8003218:	d901      	bls.n	800321e <HAL_RCC_OscConfig+0x5fa>
          {
            return HAL_TIMEOUT;
 800321a:	2303      	movs	r3, #3
 800321c:	e053      	b.n	80032c6 <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800321e:	4b2c      	ldr	r3, [pc, #176]	; (80032d0 <HAL_RCC_OscConfig+0x6ac>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003226:	2b00      	cmp	r3, #0
 8003228:	d0f0      	beq.n	800320c <HAL_RCC_OscConfig+0x5e8>
 800322a:	e04b      	b.n	80032c4 <HAL_RCC_OscConfig+0x6a0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800322c:	4b28      	ldr	r3, [pc, #160]	; (80032d0 <HAL_RCC_OscConfig+0x6ac>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a27      	ldr	r2, [pc, #156]	; (80032d0 <HAL_RCC_OscConfig+0x6ac>)
 8003232:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003236:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003238:	f7fe fcfa 	bl	8001c30 <HAL_GetTick>
 800323c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800323e:	e008      	b.n	8003252 <HAL_RCC_OscConfig+0x62e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003240:	f7fe fcf6 	bl	8001c30 <HAL_GetTick>
 8003244:	4602      	mov	r2, r0
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	1ad3      	subs	r3, r2, r3
 800324a:	2b02      	cmp	r3, #2
 800324c:	d901      	bls.n	8003252 <HAL_RCC_OscConfig+0x62e>
          {
            return HAL_TIMEOUT;
 800324e:	2303      	movs	r3, #3
 8003250:	e039      	b.n	80032c6 <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003252:	4b1f      	ldr	r3, [pc, #124]	; (80032d0 <HAL_RCC_OscConfig+0x6ac>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800325a:	2b00      	cmp	r3, #0
 800325c:	d1f0      	bne.n	8003240 <HAL_RCC_OscConfig+0x61c>
 800325e:	e031      	b.n	80032c4 <HAL_RCC_OscConfig+0x6a0>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003260:	4b1b      	ldr	r3, [pc, #108]	; (80032d0 <HAL_RCC_OscConfig+0x6ac>)
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	699b      	ldr	r3, [r3, #24]
 800326a:	2b01      	cmp	r3, #1
 800326c:	d028      	beq.n	80032c0 <HAL_RCC_OscConfig+0x69c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003278:	429a      	cmp	r2, r3
 800327a:	d121      	bne.n	80032c0 <HAL_RCC_OscConfig+0x69c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003286:	429a      	cmp	r2, r3
 8003288:	d11a      	bne.n	80032c0 <HAL_RCC_OscConfig+0x69c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800328a:	68fa      	ldr	r2, [r7, #12]
 800328c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003290:	4013      	ands	r3, r2
 8003292:	687a      	ldr	r2, [r7, #4]
 8003294:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003296:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003298:	4293      	cmp	r3, r2
 800329a:	d111      	bne.n	80032c0 <HAL_RCC_OscConfig+0x69c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032a6:	085b      	lsrs	r3, r3, #1
 80032a8:	3b01      	subs	r3, #1
 80032aa:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80032ac:	429a      	cmp	r2, r3
 80032ae:	d107      	bne.n	80032c0 <HAL_RCC_OscConfig+0x69c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ba:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80032bc:	429a      	cmp	r2, r3
 80032be:	d001      	beq.n	80032c4 <HAL_RCC_OscConfig+0x6a0>
#endif
      {
        return HAL_ERROR;
 80032c0:	2301      	movs	r3, #1
 80032c2:	e000      	b.n	80032c6 <HAL_RCC_OscConfig+0x6a2>
      }
    }
  }
  return HAL_OK;
 80032c4:	2300      	movs	r3, #0
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	3718      	adds	r7, #24
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}
 80032ce:	bf00      	nop
 80032d0:	40023800 	.word	0x40023800
 80032d4:	08009490 	.word	0x08009490

080032d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b084      	sub	sp, #16
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
 80032e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80032e2:	2300      	movs	r3, #0
 80032e4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d101      	bne.n	80032f0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80032ec:	2301      	movs	r3, #1
 80032ee:	e18c      	b.n	800360a <HAL_RCC_ClockConfig+0x332>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d003      	beq.n	8003300 <HAL_RCC_ClockConfig+0x28>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	2b0f      	cmp	r3, #15
 80032fe:	d904      	bls.n	800330a <HAL_RCC_ClockConfig+0x32>
 8003300:	f240 21dd 	movw	r1, #733	; 0x2dd
 8003304:	4887      	ldr	r0, [pc, #540]	; (8003524 <HAL_RCC_ClockConfig+0x24c>)
 8003306:	f7fe f8be 	bl	8001486 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d031      	beq.n	8003374 <HAL_RCC_ClockConfig+0x9c>
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	2b01      	cmp	r3, #1
 8003314:	d02e      	beq.n	8003374 <HAL_RCC_ClockConfig+0x9c>
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	2b02      	cmp	r3, #2
 800331a:	d02b      	beq.n	8003374 <HAL_RCC_ClockConfig+0x9c>
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	2b03      	cmp	r3, #3
 8003320:	d028      	beq.n	8003374 <HAL_RCC_ClockConfig+0x9c>
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	2b04      	cmp	r3, #4
 8003326:	d025      	beq.n	8003374 <HAL_RCC_ClockConfig+0x9c>
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	2b05      	cmp	r3, #5
 800332c:	d022      	beq.n	8003374 <HAL_RCC_ClockConfig+0x9c>
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	2b06      	cmp	r3, #6
 8003332:	d01f      	beq.n	8003374 <HAL_RCC_ClockConfig+0x9c>
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	2b07      	cmp	r3, #7
 8003338:	d01c      	beq.n	8003374 <HAL_RCC_ClockConfig+0x9c>
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	2b08      	cmp	r3, #8
 800333e:	d019      	beq.n	8003374 <HAL_RCC_ClockConfig+0x9c>
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	2b09      	cmp	r3, #9
 8003344:	d016      	beq.n	8003374 <HAL_RCC_ClockConfig+0x9c>
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	2b0a      	cmp	r3, #10
 800334a:	d013      	beq.n	8003374 <HAL_RCC_ClockConfig+0x9c>
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	2b0b      	cmp	r3, #11
 8003350:	d010      	beq.n	8003374 <HAL_RCC_ClockConfig+0x9c>
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	2b0c      	cmp	r3, #12
 8003356:	d00d      	beq.n	8003374 <HAL_RCC_ClockConfig+0x9c>
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	2b0d      	cmp	r3, #13
 800335c:	d00a      	beq.n	8003374 <HAL_RCC_ClockConfig+0x9c>
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	2b0e      	cmp	r3, #14
 8003362:	d007      	beq.n	8003374 <HAL_RCC_ClockConfig+0x9c>
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	2b0f      	cmp	r3, #15
 8003368:	d004      	beq.n	8003374 <HAL_RCC_ClockConfig+0x9c>
 800336a:	f240 21de 	movw	r1, #734	; 0x2de
 800336e:	486d      	ldr	r0, [pc, #436]	; (8003524 <HAL_RCC_ClockConfig+0x24c>)
 8003370:	f7fe f889 	bl	8001486 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003374:	4b6c      	ldr	r3, [pc, #432]	; (8003528 <HAL_RCC_ClockConfig+0x250>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f003 030f 	and.w	r3, r3, #15
 800337c:	683a      	ldr	r2, [r7, #0]
 800337e:	429a      	cmp	r2, r3
 8003380:	d910      	bls.n	80033a4 <HAL_RCC_ClockConfig+0xcc>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003382:	4b69      	ldr	r3, [pc, #420]	; (8003528 <HAL_RCC_ClockConfig+0x250>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f023 020f 	bic.w	r2, r3, #15
 800338a:	4967      	ldr	r1, [pc, #412]	; (8003528 <HAL_RCC_ClockConfig+0x250>)
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	4313      	orrs	r3, r2
 8003390:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003392:	4b65      	ldr	r3, [pc, #404]	; (8003528 <HAL_RCC_ClockConfig+0x250>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f003 030f 	and.w	r3, r3, #15
 800339a:	683a      	ldr	r2, [r7, #0]
 800339c:	429a      	cmp	r2, r3
 800339e:	d001      	beq.n	80033a4 <HAL_RCC_ClockConfig+0xcc>
    {
      return HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	e132      	b.n	800360a <HAL_RCC_ClockConfig+0x332>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f003 0302 	and.w	r3, r3, #2
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d049      	beq.n	8003444 <HAL_RCC_ClockConfig+0x16c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f003 0304 	and.w	r3, r3, #4
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d005      	beq.n	80033c8 <HAL_RCC_ClockConfig+0xf0>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80033bc:	4b5b      	ldr	r3, [pc, #364]	; (800352c <HAL_RCC_ClockConfig+0x254>)
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	4a5a      	ldr	r2, [pc, #360]	; (800352c <HAL_RCC_ClockConfig+0x254>)
 80033c2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80033c6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f003 0308 	and.w	r3, r3, #8
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d005      	beq.n	80033e0 <HAL_RCC_ClockConfig+0x108>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80033d4:	4b55      	ldr	r3, [pc, #340]	; (800352c <HAL_RCC_ClockConfig+0x254>)
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	4a54      	ldr	r2, [pc, #336]	; (800352c <HAL_RCC_ClockConfig+0x254>)
 80033da:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80033de:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d024      	beq.n	8003432 <HAL_RCC_ClockConfig+0x15a>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	2b80      	cmp	r3, #128	; 0x80
 80033ee:	d020      	beq.n	8003432 <HAL_RCC_ClockConfig+0x15a>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	2b90      	cmp	r3, #144	; 0x90
 80033f6:	d01c      	beq.n	8003432 <HAL_RCC_ClockConfig+0x15a>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	2ba0      	cmp	r3, #160	; 0xa0
 80033fe:	d018      	beq.n	8003432 <HAL_RCC_ClockConfig+0x15a>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	2bb0      	cmp	r3, #176	; 0xb0
 8003406:	d014      	beq.n	8003432 <HAL_RCC_ClockConfig+0x15a>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	2bc0      	cmp	r3, #192	; 0xc0
 800340e:	d010      	beq.n	8003432 <HAL_RCC_ClockConfig+0x15a>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	2bd0      	cmp	r3, #208	; 0xd0
 8003416:	d00c      	beq.n	8003432 <HAL_RCC_ClockConfig+0x15a>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	2be0      	cmp	r3, #224	; 0xe0
 800341e:	d008      	beq.n	8003432 <HAL_RCC_ClockConfig+0x15a>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	2bf0      	cmp	r3, #240	; 0xf0
 8003426:	d004      	beq.n	8003432 <HAL_RCC_ClockConfig+0x15a>
 8003428:	f240 3102 	movw	r1, #770	; 0x302
 800342c:	483d      	ldr	r0, [pc, #244]	; (8003524 <HAL_RCC_ClockConfig+0x24c>)
 800342e:	f7fe f82a 	bl	8001486 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003432:	4b3e      	ldr	r3, [pc, #248]	; (800352c <HAL_RCC_ClockConfig+0x254>)
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	493b      	ldr	r1, [pc, #236]	; (800352c <HAL_RCC_ClockConfig+0x254>)
 8003440:	4313      	orrs	r3, r2
 8003442:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f003 0301 	and.w	r3, r3, #1
 800344c:	2b00      	cmp	r3, #0
 800344e:	d051      	beq.n	80034f4 <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d00c      	beq.n	8003472 <HAL_RCC_ClockConfig+0x19a>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	2b01      	cmp	r3, #1
 800345e:	d008      	beq.n	8003472 <HAL_RCC_ClockConfig+0x19a>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	2b02      	cmp	r3, #2
 8003466:	d004      	beq.n	8003472 <HAL_RCC_ClockConfig+0x19a>
 8003468:	f240 3109 	movw	r1, #777	; 0x309
 800346c:	482d      	ldr	r0, [pc, #180]	; (8003524 <HAL_RCC_ClockConfig+0x24c>)
 800346e:	f7fe f80a 	bl	8001486 <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	2b01      	cmp	r3, #1
 8003478:	d107      	bne.n	800348a <HAL_RCC_ClockConfig+0x1b2>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800347a:	4b2c      	ldr	r3, [pc, #176]	; (800352c <HAL_RCC_ClockConfig+0x254>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003482:	2b00      	cmp	r3, #0
 8003484:	d115      	bne.n	80034b2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	e0bf      	b.n	800360a <HAL_RCC_ClockConfig+0x332>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	2b02      	cmp	r3, #2
 8003490:	d107      	bne.n	80034a2 <HAL_RCC_ClockConfig+0x1ca>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003492:	4b26      	ldr	r3, [pc, #152]	; (800352c <HAL_RCC_ClockConfig+0x254>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800349a:	2b00      	cmp	r3, #0
 800349c:	d109      	bne.n	80034b2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	e0b3      	b.n	800360a <HAL_RCC_ClockConfig+0x332>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034a2:	4b22      	ldr	r3, [pc, #136]	; (800352c <HAL_RCC_ClockConfig+0x254>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 0302 	and.w	r3, r3, #2
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d101      	bne.n	80034b2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	e0ab      	b.n	800360a <HAL_RCC_ClockConfig+0x332>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034b2:	4b1e      	ldr	r3, [pc, #120]	; (800352c <HAL_RCC_ClockConfig+0x254>)
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	f023 0203 	bic.w	r2, r3, #3
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	491b      	ldr	r1, [pc, #108]	; (800352c <HAL_RCC_ClockConfig+0x254>)
 80034c0:	4313      	orrs	r3, r2
 80034c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034c4:	f7fe fbb4 	bl	8001c30 <HAL_GetTick>
 80034c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034ca:	e00a      	b.n	80034e2 <HAL_RCC_ClockConfig+0x20a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034cc:	f7fe fbb0 	bl	8001c30 <HAL_GetTick>
 80034d0:	4602      	mov	r2, r0
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	1ad3      	subs	r3, r2, r3
 80034d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80034da:	4293      	cmp	r3, r2
 80034dc:	d901      	bls.n	80034e2 <HAL_RCC_ClockConfig+0x20a>
      {
        return HAL_TIMEOUT;
 80034de:	2303      	movs	r3, #3
 80034e0:	e093      	b.n	800360a <HAL_RCC_ClockConfig+0x332>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034e2:	4b12      	ldr	r3, [pc, #72]	; (800352c <HAL_RCC_ClockConfig+0x254>)
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	f003 020c 	and.w	r2, r3, #12
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	009b      	lsls	r3, r3, #2
 80034f0:	429a      	cmp	r2, r3
 80034f2:	d1eb      	bne.n	80034cc <HAL_RCC_ClockConfig+0x1f4>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80034f4:	4b0c      	ldr	r3, [pc, #48]	; (8003528 <HAL_RCC_ClockConfig+0x250>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 030f 	and.w	r3, r3, #15
 80034fc:	683a      	ldr	r2, [r7, #0]
 80034fe:	429a      	cmp	r2, r3
 8003500:	d216      	bcs.n	8003530 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003502:	4b09      	ldr	r3, [pc, #36]	; (8003528 <HAL_RCC_ClockConfig+0x250>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f023 020f 	bic.w	r2, r3, #15
 800350a:	4907      	ldr	r1, [pc, #28]	; (8003528 <HAL_RCC_ClockConfig+0x250>)
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	4313      	orrs	r3, r2
 8003510:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003512:	4b05      	ldr	r3, [pc, #20]	; (8003528 <HAL_RCC_ClockConfig+0x250>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f003 030f 	and.w	r3, r3, #15
 800351a:	683a      	ldr	r2, [r7, #0]
 800351c:	429a      	cmp	r2, r3
 800351e:	d007      	beq.n	8003530 <HAL_RCC_ClockConfig+0x258>
    {
      return HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	e072      	b.n	800360a <HAL_RCC_ClockConfig+0x332>
 8003524:	08009490 	.word	0x08009490
 8003528:	40023c00 	.word	0x40023c00
 800352c:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f003 0304 	and.w	r3, r3, #4
 8003538:	2b00      	cmp	r3, #0
 800353a:	d025      	beq.n	8003588 <HAL_RCC_ClockConfig+0x2b0>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	68db      	ldr	r3, [r3, #12]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d018      	beq.n	8003576 <HAL_RCC_ClockConfig+0x29e>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	68db      	ldr	r3, [r3, #12]
 8003548:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800354c:	d013      	beq.n	8003576 <HAL_RCC_ClockConfig+0x29e>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	68db      	ldr	r3, [r3, #12]
 8003552:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003556:	d00e      	beq.n	8003576 <HAL_RCC_ClockConfig+0x29e>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	68db      	ldr	r3, [r3, #12]
 800355c:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8003560:	d009      	beq.n	8003576 <HAL_RCC_ClockConfig+0x29e>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	68db      	ldr	r3, [r3, #12]
 8003566:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 800356a:	d004      	beq.n	8003576 <HAL_RCC_ClockConfig+0x29e>
 800356c:	f240 3146 	movw	r1, #838	; 0x346
 8003570:	4828      	ldr	r0, [pc, #160]	; (8003614 <HAL_RCC_ClockConfig+0x33c>)
 8003572:	f7fd ff88 	bl	8001486 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003576:	4b28      	ldr	r3, [pc, #160]	; (8003618 <HAL_RCC_ClockConfig+0x340>)
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	68db      	ldr	r3, [r3, #12]
 8003582:	4925      	ldr	r1, [pc, #148]	; (8003618 <HAL_RCC_ClockConfig+0x340>)
 8003584:	4313      	orrs	r3, r2
 8003586:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f003 0308 	and.w	r3, r3, #8
 8003590:	2b00      	cmp	r3, #0
 8003592:	d026      	beq.n	80035e2 <HAL_RCC_ClockConfig+0x30a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	691b      	ldr	r3, [r3, #16]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d018      	beq.n	80035ce <HAL_RCC_ClockConfig+0x2f6>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	691b      	ldr	r3, [r3, #16]
 80035a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035a4:	d013      	beq.n	80035ce <HAL_RCC_ClockConfig+0x2f6>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	691b      	ldr	r3, [r3, #16]
 80035aa:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80035ae:	d00e      	beq.n	80035ce <HAL_RCC_ClockConfig+0x2f6>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	691b      	ldr	r3, [r3, #16]
 80035b4:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80035b8:	d009      	beq.n	80035ce <HAL_RCC_ClockConfig+0x2f6>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	691b      	ldr	r3, [r3, #16]
 80035be:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 80035c2:	d004      	beq.n	80035ce <HAL_RCC_ClockConfig+0x2f6>
 80035c4:	f240 314d 	movw	r1, #845	; 0x34d
 80035c8:	4812      	ldr	r0, [pc, #72]	; (8003614 <HAL_RCC_ClockConfig+0x33c>)
 80035ca:	f7fd ff5c 	bl	8001486 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80035ce:	4b12      	ldr	r3, [pc, #72]	; (8003618 <HAL_RCC_ClockConfig+0x340>)
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	691b      	ldr	r3, [r3, #16]
 80035da:	00db      	lsls	r3, r3, #3
 80035dc:	490e      	ldr	r1, [pc, #56]	; (8003618 <HAL_RCC_ClockConfig+0x340>)
 80035de:	4313      	orrs	r3, r2
 80035e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80035e2:	f000 f821 	bl	8003628 <HAL_RCC_GetSysClockFreq>
 80035e6:	4602      	mov	r2, r0
 80035e8:	4b0b      	ldr	r3, [pc, #44]	; (8003618 <HAL_RCC_ClockConfig+0x340>)
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	091b      	lsrs	r3, r3, #4
 80035ee:	f003 030f 	and.w	r3, r3, #15
 80035f2:	490a      	ldr	r1, [pc, #40]	; (800361c <HAL_RCC_ClockConfig+0x344>)
 80035f4:	5ccb      	ldrb	r3, [r1, r3]
 80035f6:	fa22 f303 	lsr.w	r3, r2, r3
 80035fa:	4a09      	ldr	r2, [pc, #36]	; (8003620 <HAL_RCC_ClockConfig+0x348>)
 80035fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80035fe:	4b09      	ldr	r3, [pc, #36]	; (8003624 <HAL_RCC_ClockConfig+0x34c>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4618      	mov	r0, r3
 8003604:	f7fe fad0 	bl	8001ba8 <HAL_InitTick>

  return HAL_OK;
 8003608:	2300      	movs	r3, #0
}
 800360a:	4618      	mov	r0, r3
 800360c:	3710      	adds	r7, #16
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}
 8003612:	bf00      	nop
 8003614:	08009490 	.word	0x08009490
 8003618:	40023800 	.word	0x40023800
 800361c:	080095b4 	.word	0x080095b4
 8003620:	20000000 	.word	0x20000000
 8003624:	20000004 	.word	0x20000004

08003628 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003628:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800362c:	b090      	sub	sp, #64	; 0x40
 800362e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003630:	2300      	movs	r3, #0
 8003632:	637b      	str	r3, [r7, #52]	; 0x34
 8003634:	2300      	movs	r3, #0
 8003636:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003638:	2300      	movs	r3, #0
 800363a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 800363c:	2300      	movs	r3, #0
 800363e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003640:	4b59      	ldr	r3, [pc, #356]	; (80037a8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	f003 030c 	and.w	r3, r3, #12
 8003648:	2b08      	cmp	r3, #8
 800364a:	d00d      	beq.n	8003668 <HAL_RCC_GetSysClockFreq+0x40>
 800364c:	2b08      	cmp	r3, #8
 800364e:	f200 80a1 	bhi.w	8003794 <HAL_RCC_GetSysClockFreq+0x16c>
 8003652:	2b00      	cmp	r3, #0
 8003654:	d002      	beq.n	800365c <HAL_RCC_GetSysClockFreq+0x34>
 8003656:	2b04      	cmp	r3, #4
 8003658:	d003      	beq.n	8003662 <HAL_RCC_GetSysClockFreq+0x3a>
 800365a:	e09b      	b.n	8003794 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800365c:	4b53      	ldr	r3, [pc, #332]	; (80037ac <HAL_RCC_GetSysClockFreq+0x184>)
 800365e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003660:	e09b      	b.n	800379a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003662:	4b53      	ldr	r3, [pc, #332]	; (80037b0 <HAL_RCC_GetSysClockFreq+0x188>)
 8003664:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003666:	e098      	b.n	800379a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003668:	4b4f      	ldr	r3, [pc, #316]	; (80037a8 <HAL_RCC_GetSysClockFreq+0x180>)
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003670:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003672:	4b4d      	ldr	r3, [pc, #308]	; (80037a8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800367a:	2b00      	cmp	r3, #0
 800367c:	d028      	beq.n	80036d0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800367e:	4b4a      	ldr	r3, [pc, #296]	; (80037a8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	099b      	lsrs	r3, r3, #6
 8003684:	2200      	movs	r2, #0
 8003686:	623b      	str	r3, [r7, #32]
 8003688:	627a      	str	r2, [r7, #36]	; 0x24
 800368a:	6a3b      	ldr	r3, [r7, #32]
 800368c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003690:	2100      	movs	r1, #0
 8003692:	4b47      	ldr	r3, [pc, #284]	; (80037b0 <HAL_RCC_GetSysClockFreq+0x188>)
 8003694:	fb03 f201 	mul.w	r2, r3, r1
 8003698:	2300      	movs	r3, #0
 800369a:	fb00 f303 	mul.w	r3, r0, r3
 800369e:	4413      	add	r3, r2
 80036a0:	4a43      	ldr	r2, [pc, #268]	; (80037b0 <HAL_RCC_GetSysClockFreq+0x188>)
 80036a2:	fba0 1202 	umull	r1, r2, r0, r2
 80036a6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80036a8:	460a      	mov	r2, r1
 80036aa:	62ba      	str	r2, [r7, #40]	; 0x28
 80036ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036ae:	4413      	add	r3, r2
 80036b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036b4:	2200      	movs	r2, #0
 80036b6:	61bb      	str	r3, [r7, #24]
 80036b8:	61fa      	str	r2, [r7, #28]
 80036ba:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80036be:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80036c2:	f7fd fb01 	bl	8000cc8 <__aeabi_uldivmod>
 80036c6:	4602      	mov	r2, r0
 80036c8:	460b      	mov	r3, r1
 80036ca:	4613      	mov	r3, r2
 80036cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036ce:	e053      	b.n	8003778 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036d0:	4b35      	ldr	r3, [pc, #212]	; (80037a8 <HAL_RCC_GetSysClockFreq+0x180>)
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	099b      	lsrs	r3, r3, #6
 80036d6:	2200      	movs	r2, #0
 80036d8:	613b      	str	r3, [r7, #16]
 80036da:	617a      	str	r2, [r7, #20]
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80036e2:	f04f 0b00 	mov.w	fp, #0
 80036e6:	4652      	mov	r2, sl
 80036e8:	465b      	mov	r3, fp
 80036ea:	f04f 0000 	mov.w	r0, #0
 80036ee:	f04f 0100 	mov.w	r1, #0
 80036f2:	0159      	lsls	r1, r3, #5
 80036f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80036f8:	0150      	lsls	r0, r2, #5
 80036fa:	4602      	mov	r2, r0
 80036fc:	460b      	mov	r3, r1
 80036fe:	ebb2 080a 	subs.w	r8, r2, sl
 8003702:	eb63 090b 	sbc.w	r9, r3, fp
 8003706:	f04f 0200 	mov.w	r2, #0
 800370a:	f04f 0300 	mov.w	r3, #0
 800370e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003712:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003716:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800371a:	ebb2 0408 	subs.w	r4, r2, r8
 800371e:	eb63 0509 	sbc.w	r5, r3, r9
 8003722:	f04f 0200 	mov.w	r2, #0
 8003726:	f04f 0300 	mov.w	r3, #0
 800372a:	00eb      	lsls	r3, r5, #3
 800372c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003730:	00e2      	lsls	r2, r4, #3
 8003732:	4614      	mov	r4, r2
 8003734:	461d      	mov	r5, r3
 8003736:	eb14 030a 	adds.w	r3, r4, sl
 800373a:	603b      	str	r3, [r7, #0]
 800373c:	eb45 030b 	adc.w	r3, r5, fp
 8003740:	607b      	str	r3, [r7, #4]
 8003742:	f04f 0200 	mov.w	r2, #0
 8003746:	f04f 0300 	mov.w	r3, #0
 800374a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800374e:	4629      	mov	r1, r5
 8003750:	028b      	lsls	r3, r1, #10
 8003752:	4621      	mov	r1, r4
 8003754:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003758:	4621      	mov	r1, r4
 800375a:	028a      	lsls	r2, r1, #10
 800375c:	4610      	mov	r0, r2
 800375e:	4619      	mov	r1, r3
 8003760:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003762:	2200      	movs	r2, #0
 8003764:	60bb      	str	r3, [r7, #8]
 8003766:	60fa      	str	r2, [r7, #12]
 8003768:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800376c:	f7fd faac 	bl	8000cc8 <__aeabi_uldivmod>
 8003770:	4602      	mov	r2, r0
 8003772:	460b      	mov	r3, r1
 8003774:	4613      	mov	r3, r2
 8003776:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003778:	4b0b      	ldr	r3, [pc, #44]	; (80037a8 <HAL_RCC_GetSysClockFreq+0x180>)
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	0c1b      	lsrs	r3, r3, #16
 800377e:	f003 0303 	and.w	r3, r3, #3
 8003782:	3301      	adds	r3, #1
 8003784:	005b      	lsls	r3, r3, #1
 8003786:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8003788:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800378a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800378c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003790:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003792:	e002      	b.n	800379a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003794:	4b05      	ldr	r3, [pc, #20]	; (80037ac <HAL_RCC_GetSysClockFreq+0x184>)
 8003796:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003798:	bf00      	nop
    }
  }
  return sysclockfreq;
 800379a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800379c:	4618      	mov	r0, r3
 800379e:	3740      	adds	r7, #64	; 0x40
 80037a0:	46bd      	mov	sp, r7
 80037a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80037a6:	bf00      	nop
 80037a8:	40023800 	.word	0x40023800
 80037ac:	00f42400 	.word	0x00f42400
 80037b0:	017d7840 	.word	0x017d7840

080037b4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037b4:	b480      	push	{r7}
 80037b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037b8:	4b03      	ldr	r3, [pc, #12]	; (80037c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80037ba:	681b      	ldr	r3, [r3, #0]
}
 80037bc:	4618      	mov	r0, r3
 80037be:	46bd      	mov	sp, r7
 80037c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c4:	4770      	bx	lr
 80037c6:	bf00      	nop
 80037c8:	20000000 	.word	0x20000000

080037cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80037d0:	f7ff fff0 	bl	80037b4 <HAL_RCC_GetHCLKFreq>
 80037d4:	4602      	mov	r2, r0
 80037d6:	4b05      	ldr	r3, [pc, #20]	; (80037ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	0a9b      	lsrs	r3, r3, #10
 80037dc:	f003 0307 	and.w	r3, r3, #7
 80037e0:	4903      	ldr	r1, [pc, #12]	; (80037f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80037e2:	5ccb      	ldrb	r3, [r1, r3]
 80037e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	bd80      	pop	{r7, pc}
 80037ec:	40023800 	.word	0x40023800
 80037f0:	080095c4 	.word	0x080095c4

080037f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80037f8:	f7ff ffdc 	bl	80037b4 <HAL_RCC_GetHCLKFreq>
 80037fc:	4602      	mov	r2, r0
 80037fe:	4b05      	ldr	r3, [pc, #20]	; (8003814 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	0b5b      	lsrs	r3, r3, #13
 8003804:	f003 0307 	and.w	r3, r3, #7
 8003808:	4903      	ldr	r1, [pc, #12]	; (8003818 <HAL_RCC_GetPCLK2Freq+0x24>)
 800380a:	5ccb      	ldrb	r3, [r1, r3]
 800380c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003810:	4618      	mov	r0, r3
 8003812:	bd80      	pop	{r7, pc}
 8003814:	40023800 	.word	0x40023800
 8003818:	080095c4 	.word	0x080095c4

0800381c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b088      	sub	sp, #32
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003824:	2300      	movs	r3, #0
 8003826:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003828:	2300      	movs	r3, #0
 800382a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800382c:	2300      	movs	r3, #0
 800382e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003830:	2300      	movs	r3, #0
 8003832:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003834:	2300      	movs	r3, #0
 8003836:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f003 0301 	and.w	r3, r3, #1
 8003840:	2b00      	cmp	r3, #0
 8003842:	f040 8089 	bne.w	8003958 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f003 0308 	and.w	r3, r3, #8
 800384e:	2b00      	cmp	r3, #0
 8003850:	f040 8082 	bne.w	8003958 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f003 0310 	and.w	r3, r3, #16
 800385c:	2b00      	cmp	r3, #0
 800385e:	d17b      	bne.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003868:	2b00      	cmp	r3, #0
 800386a:	d175      	bne.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003874:	2b00      	cmp	r3, #0
 8003876:	d16f      	bne.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003880:	2b00      	cmp	r3, #0
 8003882:	d169      	bne.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800388c:	2b00      	cmp	r3, #0
 800388e:	d163      	bne.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003898:	2b00      	cmp	r3, #0
 800389a:	d15d      	bne.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d157      	bne.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d151      	bne.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d14b      	bne.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d145      	bne.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d13f      	bne.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d139      	bne.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d133      	bne.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d12d      	bne.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003904:	2b00      	cmp	r3, #0
 8003906:	d127      	bne.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003910:	2b00      	cmp	r3, #0
 8003912:	d121      	bne.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800391c:	2b00      	cmp	r3, #0
 800391e:	d11b      	bne.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003928:	2b00      	cmp	r3, #0
 800392a:	d115      	bne.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003934:	2b00      	cmp	r3, #0
 8003936:	d10f      	bne.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003940:	2b00      	cmp	r3, #0
 8003942:	d109      	bne.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f003 0320 	and.w	r3, r3, #32
 800394c:	2b00      	cmp	r3, #0
 800394e:	d103      	bne.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003950:	2172      	movs	r1, #114	; 0x72
 8003952:	4895      	ldr	r0, [pc, #596]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8003954:	f7fd fd97 	bl	8001486 <assert_failed>

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f003 0301 	and.w	r3, r3, #1
 8003960:	2b00      	cmp	r3, #0
 8003962:	d01f      	beq.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003968:	2b00      	cmp	r3, #0
 800396a:	d008      	beq.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x162>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003970:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003974:	d003      	beq.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x162>
 8003976:	2178      	movs	r1, #120	; 0x78
 8003978:	488b      	ldr	r0, [pc, #556]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 800397a:	f7fd fd84 	bl	8001486 <assert_failed>

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800397e:	4b8b      	ldr	r3, [pc, #556]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	4a8a      	ldr	r2, [pc, #552]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8003984:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003988:	6093      	str	r3, [r2, #8]
 800398a:	4b88      	ldr	r3, [pc, #544]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x390>)
 800398c:	689a      	ldr	r2, [r3, #8]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003992:	4986      	ldr	r1, [pc, #536]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8003994:	4313      	orrs	r3, r2
 8003996:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800399c:	2b00      	cmp	r3, #0
 800399e:	d101      	bne.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x188>
    {
      plli2sused = 1;
 80039a0:	2301      	movs	r3, #1
 80039a2:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d029      	beq.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d00d      	beq.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80039c0:	d008      	beq.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039c6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80039ca:	d003      	beq.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80039cc:	2188      	movs	r1, #136	; 0x88
 80039ce:	4876      	ldr	r0, [pc, #472]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 80039d0:	f7fd fd59 	bl	8001486 <assert_failed>

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80039d4:	4b75      	ldr	r3, [pc, #468]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80039d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80039da:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039e2:	4972      	ldr	r1, [pc, #456]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80039e4:	4313      	orrs	r3, r2
 80039e6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80039f2:	d101      	bne.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      plli2sused = 1;
 80039f4:	2301      	movs	r3, #1
 80039f6:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d101      	bne.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
    {
      pllsaiused = 1;
 8003a00:	2301      	movs	r3, #1
 8003a02:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d029      	beq.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d00d      	beq.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a1c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a20:	d008      	beq.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a26:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003a2a:	d003      	beq.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8003a2c:	219c      	movs	r1, #156	; 0x9c
 8003a2e:	485e      	ldr	r0, [pc, #376]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8003a30:	f7fd fd29 	bl	8001486 <assert_failed>

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003a34:	4b5d      	ldr	r3, [pc, #372]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8003a36:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a3a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a42:	495a      	ldr	r1, [pc, #360]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8003a44:	4313      	orrs	r3, r2
 8003a46:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a4e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a52:	d101      	bne.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      plli2sused = 1;
 8003a54:	2301      	movs	r3, #1
 8003a56:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d101      	bne.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      pllsaiused = 1;
 8003a60:	2301      	movs	r3, #1
 8003a62:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d001      	beq.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
      plli2sused = 1;
 8003a70:	2301      	movs	r3, #1
 8003a72:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f003 0320 	and.w	r3, r3, #32
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	f000 8186 	beq.w	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x572>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a8a:	f000 80e4 	beq.w	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a96:	f000 80de 	beq.w	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a9e:	4a44      	ldr	r2, [pc, #272]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x394>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	f000 80d8 	beq.w	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aaa:	4a42      	ldr	r2, [pc, #264]	; (8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x398>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	f000 80d2 	beq.w	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ab6:	4a40      	ldr	r2, [pc, #256]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	f000 80cc 	beq.w	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ac2:	4a3e      	ldr	r2, [pc, #248]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x3a0>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	f000 80c6 	beq.w	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ace:	4a3c      	ldr	r2, [pc, #240]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	f000 80c0 	beq.w	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ada:	4a3a      	ldr	r2, [pc, #232]	; (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	f000 80ba 	beq.w	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ae6:	4a38      	ldr	r2, [pc, #224]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	f000 80b4 	beq.w	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003af2:	4a36      	ldr	r2, [pc, #216]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x3b0>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	f000 80ae 	beq.w	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003afe:	4a34      	ldr	r2, [pc, #208]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x3b4>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	f000 80a8 	beq.w	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b0a:	4a32      	ldr	r2, [pc, #200]	; (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	f000 80a2 	beq.w	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b16:	4a30      	ldr	r2, [pc, #192]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x3bc>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	f000 809c 	beq.w	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b22:	4a2e      	ldr	r2, [pc, #184]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x3c0>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	f000 8096 	beq.w	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b2e:	4a2c      	ldr	r2, [pc, #176]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x3c4>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	f000 8090 	beq.w	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b3a:	4a2a      	ldr	r2, [pc, #168]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x3c8>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	f000 808a 	beq.w	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b46:	4a28      	ldr	r2, [pc, #160]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	f000 8084 	beq.w	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b52:	4a26      	ldr	r2, [pc, #152]	; (8003bec <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d07e      	beq.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b5c:	4a24      	ldr	r2, [pc, #144]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d079      	beq.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b66:	4a23      	ldr	r2, [pc, #140]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x3d8>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d074      	beq.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b70:	4a21      	ldr	r2, [pc, #132]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d06f      	beq.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b7a:	4a20      	ldr	r2, [pc, #128]	; (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d06a      	beq.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b84:	4a1e      	ldr	r2, [pc, #120]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d065      	beq.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b8e:	4a1d      	ldr	r2, [pc, #116]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d060      	beq.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b98:	4a1b      	ldr	r2, [pc, #108]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d05b      	beq.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ba2:	4a1a      	ldr	r2, [pc, #104]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	e033      	b.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8003ba8:	080094c8 	.word	0x080094c8
 8003bac:	40023800 	.word	0x40023800
 8003bb0:	00020300 	.word	0x00020300
 8003bb4:	00030300 	.word	0x00030300
 8003bb8:	00040300 	.word	0x00040300
 8003bbc:	00050300 	.word	0x00050300
 8003bc0:	00060300 	.word	0x00060300
 8003bc4:	00070300 	.word	0x00070300
 8003bc8:	00080300 	.word	0x00080300
 8003bcc:	00090300 	.word	0x00090300
 8003bd0:	000a0300 	.word	0x000a0300
 8003bd4:	000b0300 	.word	0x000b0300
 8003bd8:	000c0300 	.word	0x000c0300
 8003bdc:	000d0300 	.word	0x000d0300
 8003be0:	000e0300 	.word	0x000e0300
 8003be4:	000f0300 	.word	0x000f0300
 8003be8:	00100300 	.word	0x00100300
 8003bec:	00110300 	.word	0x00110300
 8003bf0:	00120300 	.word	0x00120300
 8003bf4:	00130300 	.word	0x00130300
 8003bf8:	00140300 	.word	0x00140300
 8003bfc:	00150300 	.word	0x00150300
 8003c00:	00160300 	.word	0x00160300
 8003c04:	00170300 	.word	0x00170300
 8003c08:	00180300 	.word	0x00180300
 8003c0c:	00190300 	.word	0x00190300
 8003c10:	d021      	beq.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c16:	4a4c      	ldr	r2, [pc, #304]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x52c>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d01c      	beq.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c20:	4a4a      	ldr	r2, [pc, #296]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x530>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d017      	beq.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c2a:	4a49      	ldr	r2, [pc, #292]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x534>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d012      	beq.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c34:	4a47      	ldr	r2, [pc, #284]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d00d      	beq.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c3e:	4a46      	ldr	r2, [pc, #280]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d008      	beq.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c48:	4a44      	ldr	r2, [pc, #272]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d003      	beq.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8003c4e:	21b7      	movs	r1, #183	; 0xb7
 8003c50:	4843      	ldr	r0, [pc, #268]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x544>)
 8003c52:	f7fd fc18 	bl	8001486 <assert_failed>

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003c56:	4b43      	ldr	r3, [pc, #268]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c5a:	4a42      	ldr	r2, [pc, #264]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003c5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c60:	6413      	str	r3, [r2, #64]	; 0x40
 8003c62:	4b40      	ldr	r3, [pc, #256]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c6a:	60bb      	str	r3, [r7, #8]
 8003c6c:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003c6e:	4b3e      	ldr	r3, [pc, #248]	; (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a3d      	ldr	r2, [pc, #244]	; (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 8003c74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c78:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c7a:	f7fd ffd9 	bl	8001c30 <HAL_GetTick>
 8003c7e:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003c80:	e009      	b.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x47a>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c82:	f7fd ffd5 	bl	8001c30 <HAL_GetTick>
 8003c86:	4602      	mov	r2, r0
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	1ad3      	subs	r3, r2, r3
 8003c8c:	2b64      	cmp	r3, #100	; 0x64
 8003c8e:	d902      	bls.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x47a>
      {
        return HAL_TIMEOUT;
 8003c90:	2303      	movs	r3, #3
 8003c92:	f000 bd9f 	b.w	80047d4 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003c96:	4b34      	ldr	r3, [pc, #208]	; (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d0ef      	beq.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x466>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003ca2:	4b30      	ldr	r3, [pc, #192]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003ca4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ca6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003caa:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d036      	beq.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cba:	693a      	ldr	r2, [r7, #16]
 8003cbc:	429a      	cmp	r2, r3
 8003cbe:	d02f      	beq.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003cc0:	4b28      	ldr	r3, [pc, #160]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003cc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cc8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003cca:	4b26      	ldr	r3, [pc, #152]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003ccc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cce:	4a25      	ldr	r2, [pc, #148]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003cd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cd4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003cd6:	4b23      	ldr	r3, [pc, #140]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003cd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cda:	4a22      	ldr	r2, [pc, #136]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003cdc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ce0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003ce2:	4a20      	ldr	r2, [pc, #128]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003ce8:	4b1e      	ldr	r3, [pc, #120]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003cea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cec:	f003 0301 	and.w	r3, r3, #1
 8003cf0:	2b01      	cmp	r3, #1
 8003cf2:	d115      	bne.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x504>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cf4:	f7fd ff9c 	bl	8001c30 <HAL_GetTick>
 8003cf8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cfa:	e00b      	b.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cfc:	f7fd ff98 	bl	8001c30 <HAL_GetTick>
 8003d00:	4602      	mov	r2, r0
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	1ad3      	subs	r3, r2, r3
 8003d06:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d902      	bls.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8003d0e:	2303      	movs	r3, #3
 8003d10:	f000 bd60 	b.w	80047d4 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d14:	4b13      	ldr	r3, [pc, #76]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003d16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d18:	f003 0302 	and.w	r3, r3, #2
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d0ed      	beq.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d24:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d28:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d2c:	d120      	bne.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0x554>
 8003d2e:	4b0d      	ldr	r3, [pc, #52]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003d30:	689b      	ldr	r3, [r3, #8]
 8003d32:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003d3a:	4b0c      	ldr	r3, [pc, #48]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8003d3c:	400b      	ands	r3, r1
 8003d3e:	4909      	ldr	r1, [pc, #36]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003d40:	4313      	orrs	r3, r2
 8003d42:	608b      	str	r3, [r1, #8]
 8003d44:	e01a      	b.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x560>
 8003d46:	bf00      	nop
 8003d48:	001a0300 	.word	0x001a0300
 8003d4c:	001b0300 	.word	0x001b0300
 8003d50:	001c0300 	.word	0x001c0300
 8003d54:	001d0300 	.word	0x001d0300
 8003d58:	001e0300 	.word	0x001e0300
 8003d5c:	001f0300 	.word	0x001f0300
 8003d60:	080094c8 	.word	0x080094c8
 8003d64:	40023800 	.word	0x40023800
 8003d68:	40007000 	.word	0x40007000
 8003d6c:	0ffffcff 	.word	0x0ffffcff
 8003d70:	4b9a      	ldr	r3, [pc, #616]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	4a99      	ldr	r2, [pc, #612]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8003d76:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003d7a:	6093      	str	r3, [r2, #8]
 8003d7c:	4b97      	ldr	r3, [pc, #604]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8003d7e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d88:	4994      	ldr	r1, [pc, #592]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f003 0310 	and.w	r3, r3, #16
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d01d      	beq.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d008      	beq.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x598>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003da6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003daa:	d003      	beq.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x598>
 8003dac:	21f1      	movs	r1, #241	; 0xf1
 8003dae:	488c      	ldr	r0, [pc, #560]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8003db0:	f7fd fb69 	bl	8001486 <assert_failed>

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003db4:	4b89      	ldr	r3, [pc, #548]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8003db6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003dba:	4a88      	ldr	r2, [pc, #544]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8003dbc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003dc0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003dc4:	4b85      	ldr	r3, [pc, #532]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8003dc6:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dce:	4983      	ldr	r1, [pc, #524]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d01c      	beq.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x600>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d00d      	beq.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x5ea>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003dee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003df2:	d008      	beq.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x5ea>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003df8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003dfc:	d003      	beq.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x5ea>
 8003dfe:	21fb      	movs	r1, #251	; 0xfb
 8003e00:	4877      	ldr	r0, [pc, #476]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8003e02:	f7fd fb40 	bl	8001486 <assert_failed>

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003e06:	4b75      	ldr	r3, [pc, #468]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8003e08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e0c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e14:	4971      	ldr	r1, [pc, #452]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8003e16:	4313      	orrs	r3, r2
 8003e18:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d01d      	beq.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x648>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d00e      	beq.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x632>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e34:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003e38:	d009      	beq.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x632>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e3e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003e42:	d004      	beq.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x632>
 8003e44:	f240 1105 	movw	r1, #261	; 0x105
 8003e48:	4865      	ldr	r0, [pc, #404]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8003e4a:	f7fd fb1c 	bl	8001486 <assert_failed>

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003e4e:	4b63      	ldr	r3, [pc, #396]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8003e50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e54:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e5c:	495f      	ldr	r1, [pc, #380]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d01d      	beq.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x690>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d00e      	beq.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x67a>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e7c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e80:	d009      	beq.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x67a>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e86:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003e8a:	d004      	beq.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x67a>
 8003e8c:	f240 110f 	movw	r1, #271	; 0x10f
 8003e90:	4853      	ldr	r0, [pc, #332]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8003e92:	f7fd faf8 	bl	8001486 <assert_failed>

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003e96:	4b51      	ldr	r3, [pc, #324]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8003e98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e9c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ea4:	494d      	ldr	r1, [pc, #308]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d01d      	beq.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d00e      	beq.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0x6c2>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ec4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ec8:	d009      	beq.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0x6c2>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ece:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003ed2:	d004      	beq.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0x6c2>
 8003ed4:	f240 1119 	movw	r1, #281	; 0x119
 8003ed8:	4841      	ldr	r0, [pc, #260]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8003eda:	f7fd fad4 	bl	8001486 <assert_failed>

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003ede:	4b3f      	ldr	r3, [pc, #252]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8003ee0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ee4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eec:	493b      	ldr	r1, [pc, #236]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d01f      	beq.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x724>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d010      	beq.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x70e>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f0c:	2b01      	cmp	r3, #1
 8003f0e:	d00c      	beq.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x70e>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f14:	2b03      	cmp	r3, #3
 8003f16:	d008      	beq.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x70e>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f1c:	2b02      	cmp	r3, #2
 8003f1e:	d004      	beq.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x70e>
 8003f20:	f240 1123 	movw	r1, #291	; 0x123
 8003f24:	482e      	ldr	r0, [pc, #184]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8003f26:	f7fd faae 	bl	8001486 <assert_failed>

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003f2a:	4b2c      	ldr	r3, [pc, #176]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8003f2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f30:	f023 0203 	bic.w	r2, r3, #3
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f38:	4928      	ldr	r1, [pc, #160]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d01f      	beq.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x770>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d010      	beq.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x75a>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f58:	2b04      	cmp	r3, #4
 8003f5a:	d00c      	beq.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x75a>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f60:	2b0c      	cmp	r3, #12
 8003f62:	d008      	beq.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x75a>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f68:	2b08      	cmp	r3, #8
 8003f6a:	d004      	beq.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x75a>
 8003f6c:	f240 112d 	movw	r1, #301	; 0x12d
 8003f70:	481b      	ldr	r0, [pc, #108]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8003f72:	f7fd fa88 	bl	8001486 <assert_failed>

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003f76:	4b19      	ldr	r3, [pc, #100]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8003f78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f7c:	f023 020c 	bic.w	r2, r3, #12
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f84:	4915      	ldr	r1, [pc, #84]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8003f86:	4313      	orrs	r3, r2
 8003f88:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d025      	beq.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d010      	beq.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fa4:	2b10      	cmp	r3, #16
 8003fa6:	d00c      	beq.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fac:	2b30      	cmp	r3, #48	; 0x30
 8003fae:	d008      	beq.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fb4:	2b20      	cmp	r3, #32
 8003fb6:	d004      	beq.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
 8003fb8:	f240 1137 	movw	r1, #311	; 0x137
 8003fbc:	4808      	ldr	r0, [pc, #32]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8003fbe:	f7fd fa62 	bl	8001486 <assert_failed>

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003fc2:	4b06      	ldr	r3, [pc, #24]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8003fc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fc8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fd0:	4902      	ldr	r1, [pc, #8]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003fd8:	e004      	b.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
 8003fda:	bf00      	nop
 8003fdc:	40023800 	.word	0x40023800
 8003fe0:	080094c8 	.word	0x080094c8
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d01f      	beq.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0x814>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d010      	beq.n	800401a <HAL_RCCEx_PeriphCLKConfig+0x7fe>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ffc:	2b40      	cmp	r3, #64	; 0x40
 8003ffe:	d00c      	beq.n	800401a <HAL_RCCEx_PeriphCLKConfig+0x7fe>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004004:	2bc0      	cmp	r3, #192	; 0xc0
 8004006:	d008      	beq.n	800401a <HAL_RCCEx_PeriphCLKConfig+0x7fe>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800400c:	2b80      	cmp	r3, #128	; 0x80
 800400e:	d004      	beq.n	800401a <HAL_RCCEx_PeriphCLKConfig+0x7fe>
 8004010:	f240 1141 	movw	r1, #321	; 0x141
 8004014:	48a0      	ldr	r0, [pc, #640]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8004016:	f7fd fa36 	bl	8001486 <assert_failed>

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800401a:	4ba0      	ldr	r3, [pc, #640]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 800401c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004020:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004028:	499c      	ldr	r1, [pc, #624]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 800402a:	4313      	orrs	r3, r2
 800402c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004038:	2b00      	cmp	r3, #0
 800403a:	d022      	beq.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x866>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004040:	2b00      	cmp	r3, #0
 8004042:	d013      	beq.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x850>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004048:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800404c:	d00e      	beq.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x850>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004052:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004056:	d009      	beq.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x850>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800405c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004060:	d004      	beq.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x850>
 8004062:	f240 114b 	movw	r1, #331	; 0x14b
 8004066:	488c      	ldr	r0, [pc, #560]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8004068:	f7fd fa0d 	bl	8001486 <assert_failed>

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800406c:	4b8b      	ldr	r3, [pc, #556]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 800406e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004072:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800407a:	4988      	ldr	r1, [pc, #544]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 800407c:	4313      	orrs	r3, r2
 800407e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800408a:	2b00      	cmp	r3, #0
 800408c:	d022      	beq.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004092:	2b00      	cmp	r3, #0
 8004094:	d013      	beq.n	80040be <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800409a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800409e:	d00e      	beq.n	80040be <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040a4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80040a8:	d009      	beq.n	80040be <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040b2:	d004      	beq.n	80040be <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 80040b4:	f240 1155 	movw	r1, #341	; 0x155
 80040b8:	4877      	ldr	r0, [pc, #476]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 80040ba:	f7fd f9e4 	bl	8001486 <assert_failed>

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80040be:	4b77      	ldr	r3, [pc, #476]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 80040c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040c4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040cc:	4973      	ldr	r1, [pc, #460]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 80040ce:	4313      	orrs	r3, r2
 80040d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d022      	beq.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x90a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d013      	beq.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040f0:	d00e      	beq.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040f6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80040fa:	d009      	beq.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004100:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004104:	d004      	beq.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
 8004106:	f240 115f 	movw	r1, #351	; 0x15f
 800410a:	4863      	ldr	r0, [pc, #396]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 800410c:	f7fd f9bb 	bl	8001486 <assert_failed>

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004110:	4b62      	ldr	r3, [pc, #392]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8004112:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004116:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800411e:	495f      	ldr	r1, [pc, #380]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8004120:	4313      	orrs	r3, r2
 8004122:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800412e:	2b00      	cmp	r3, #0
 8004130:	d022      	beq.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004136:	2b00      	cmp	r3, #0
 8004138:	d013      	beq.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0x946>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800413e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004142:	d00e      	beq.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0x946>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004148:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800414c:	d009      	beq.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0x946>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004152:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004156:	d004      	beq.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0x946>
 8004158:	f240 1169 	movw	r1, #361	; 0x169
 800415c:	484e      	ldr	r0, [pc, #312]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 800415e:	f7fd f992 	bl	8001486 <assert_failed>

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004162:	4b4e      	ldr	r3, [pc, #312]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8004164:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004168:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004170:	494a      	ldr	r1, [pc, #296]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8004172:	4313      	orrs	r3, r2
 8004174:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004180:	2b00      	cmp	r3, #0
 8004182:	d018      	beq.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0x99a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004188:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800418c:	d008      	beq.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x984>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004192:	2b00      	cmp	r3, #0
 8004194:	d004      	beq.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8004196:	f240 1173 	movw	r1, #371	; 0x173
 800419a:	483f      	ldr	r0, [pc, #252]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 800419c:	f7fd f973 	bl	8001486 <assert_failed>

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80041a0:	4b3e      	ldr	r3, [pc, #248]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 80041a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041a6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80041ae:	493b      	ldr	r1, [pc, #236]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 80041b0:	4313      	orrs	r3, r2
 80041b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d01f      	beq.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0x9e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80041c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80041ca:	d008      	beq.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x9c2>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d004      	beq.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x9c2>
 80041d4:	f240 117d 	movw	r1, #381	; 0x17d
 80041d8:	482f      	ldr	r0, [pc, #188]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 80041da:	f7fd f954 	bl	8001486 <assert_failed>

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80041de:	4b2f      	ldr	r3, [pc, #188]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 80041e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041e4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80041ec:	492b      	ldr	r1, [pc, #172]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 80041ee:	4313      	orrs	r3, r2
 80041f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80041f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80041fc:	d101      	bne.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0x9e6>
    {
      pllsaiused = 1;
 80041fe:	2301      	movs	r3, #1
 8004200:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f003 0308 	and.w	r3, r3, #8
 800420a:	2b00      	cmp	r3, #0
 800420c:	d001      	beq.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0x9f6>
  {
    pllsaiused = 1;
 800420e:	2301      	movs	r3, #1
 8004210:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800421a:	2b00      	cmp	r3, #0
 800421c:	d022      	beq.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0xa48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004222:	2b00      	cmp	r3, #0
 8004224:	d013      	beq.n	800424e <HAL_RCCEx_PeriphCLKConfig+0xa32>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800422a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800422e:	d00e      	beq.n	800424e <HAL_RCCEx_PeriphCLKConfig+0xa32>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004234:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004238:	d009      	beq.n	800424e <HAL_RCCEx_PeriphCLKConfig+0xa32>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800423e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004242:	d004      	beq.n	800424e <HAL_RCCEx_PeriphCLKConfig+0xa32>
 8004244:	f240 1195 	movw	r1, #405	; 0x195
 8004248:	4813      	ldr	r0, [pc, #76]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 800424a:	f7fd f91c 	bl	8001486 <assert_failed>

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800424e:	4b13      	ldr	r3, [pc, #76]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8004250:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004254:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800425c:	490f      	ldr	r1, [pc, #60]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 800425e:	4313      	orrs	r3, r2
 8004260:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800426c:	2b00      	cmp	r3, #0
 800426e:	d020      	beq.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0xa96>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004276:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800427a:	d009      	beq.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004282:	2b00      	cmp	r3, #0
 8004284:	d004      	beq.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8004286:	f240 119f 	movw	r1, #415	; 0x19f
 800428a:	4803      	ldr	r0, [pc, #12]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 800428c:	f7fd f8fb 	bl	8001486 <assert_failed>

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004290:	4b02      	ldr	r3, [pc, #8]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8004292:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004296:	e003      	b.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
 8004298:	080094c8 	.word	0x080094c8
 800429c:	40023800 	.word	0x40023800
 80042a0:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80042aa:	4910      	ldr	r1, [pc, #64]	; (80042ec <HAL_RCCEx_PeriphCLKConfig+0xad0>)
 80042ac:	4313      	orrs	r3, r2
 80042ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80042b2:	69fb      	ldr	r3, [r7, #28]
 80042b4:	2b01      	cmp	r3, #1
 80042b6:	d006      	beq.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	f000 8155 	beq.w	8004570 <HAL_RCCEx_PeriphCLKConfig+0xd54>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80042c6:	4b09      	ldr	r3, [pc, #36]	; (80042ec <HAL_RCCEx_PeriphCLKConfig+0xad0>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a08      	ldr	r2, [pc, #32]	; (80042ec <HAL_RCCEx_PeriphCLKConfig+0xad0>)
 80042cc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80042d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042d2:	f7fd fcad 	bl	8001c30 <HAL_GetTick>
 80042d6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80042d8:	e00a      	b.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0xad4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80042da:	f7fd fca9 	bl	8001c30 <HAL_GetTick>
 80042de:	4602      	mov	r2, r0
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	1ad3      	subs	r3, r2, r3
 80042e4:	2b64      	cmp	r3, #100	; 0x64
 80042e6:	d903      	bls.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0xad4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80042e8:	2303      	movs	r3, #3
 80042ea:	e273      	b.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
 80042ec:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80042f0:	4b9a      	ldr	r3, [pc, #616]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d1ee      	bne.n	80042da <HAL_RCCEx_PeriphCLKConfig+0xabe>
      }
    }

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	2b31      	cmp	r3, #49	; 0x31
 8004302:	d904      	bls.n	800430e <HAL_RCCEx_PeriphCLKConfig+0xaf2>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 800430c:	d904      	bls.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0xafc>
 800430e:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 8004312:	4893      	ldr	r0, [pc, #588]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 8004314:	f7fd f8b7 	bl	8001486 <assert_failed>

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f003 0301 	and.w	r3, r3, #1
 8004320:	2b00      	cmp	r3, #0
 8004322:	d02e      	beq.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0xb66>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004328:	2b00      	cmp	r3, #0
 800432a:	d12a      	bne.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0xb66>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	689b      	ldr	r3, [r3, #8]
 8004330:	2b01      	cmp	r3, #1
 8004332:	d903      	bls.n	800433c <HAL_RCCEx_PeriphCLKConfig+0xb20>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	689b      	ldr	r3, [r3, #8]
 8004338:	2b07      	cmp	r3, #7
 800433a:	d904      	bls.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 800433c:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8004340:	4887      	ldr	r0, [pc, #540]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 8004342:	f7fd f8a0 	bl	8001486 <assert_failed>

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004346:	4b85      	ldr	r3, [pc, #532]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8004348:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800434c:	0c1b      	lsrs	r3, r3, #16
 800434e:	f003 0303 	and.w	r3, r3, #3
 8004352:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004354:	4b81      	ldr	r3, [pc, #516]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8004356:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800435a:	0e1b      	lsrs	r3, r3, #24
 800435c:	f003 030f 	and.w	r3, r3, #15
 8004360:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	019a      	lsls	r2, r3, #6
 8004368:	693b      	ldr	r3, [r7, #16]
 800436a:	041b      	lsls	r3, r3, #16
 800436c:	431a      	orrs	r2, r3
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	061b      	lsls	r3, r3, #24
 8004372:	431a      	orrs	r2, r3
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	071b      	lsls	r3, r3, #28
 800437a:	4978      	ldr	r1, [pc, #480]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 800437c:	4313      	orrs	r3, r2
 800437e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800438a:	2b00      	cmp	r3, #0
 800438c:	d004      	beq.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004392:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004396:	d00a      	beq.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0xb92>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d048      	beq.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043ac:	d143      	bne.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {
      /* Check for PLLI2S Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	68db      	ldr	r3, [r3, #12]
 80043b2:	2b01      	cmp	r3, #1
 80043b4:	d903      	bls.n	80043be <HAL_RCCEx_PeriphCLKConfig+0xba2>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	68db      	ldr	r3, [r3, #12]
 80043ba:	2b0f      	cmp	r3, #15
 80043bc:	d904      	bls.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80043be:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
 80043c2:	4867      	ldr	r0, [pc, #412]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 80043c4:	f7fd f85f 	bl	8001486 <assert_failed>
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d003      	beq.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0xbbc>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d4:	2b20      	cmp	r3, #32
 80043d6:	d904      	bls.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0xbc6>
 80043d8:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
 80043dc:	4860      	ldr	r0, [pc, #384]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 80043de:	f7fd f852 	bl	8001486 <assert_failed>

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80043e2:	4b5e      	ldr	r3, [pc, #376]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 80043e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043e8:	0c1b      	lsrs	r3, r3, #16
 80043ea:	f003 0303 	and.w	r3, r3, #3
 80043ee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80043f0:	4b5a      	ldr	r3, [pc, #360]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 80043f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043f6:	0f1b      	lsrs	r3, r3, #28
 80043f8:	f003 0307 	and.w	r3, r3, #7
 80043fc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	019a      	lsls	r2, r3, #6
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	041b      	lsls	r3, r3, #16
 8004408:	431a      	orrs	r2, r3
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	68db      	ldr	r3, [r3, #12]
 800440e:	061b      	lsls	r3, r3, #24
 8004410:	431a      	orrs	r2, r3
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	071b      	lsls	r3, r3, #28
 8004416:	4951      	ldr	r1, [pc, #324]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8004418:	4313      	orrs	r3, r2
 800441a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800441e:	4b4f      	ldr	r3, [pc, #316]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8004420:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004424:	f023 021f 	bic.w	r2, r3, #31
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800442c:	3b01      	subs	r3, #1
 800442e:	494b      	ldr	r1, [pc, #300]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8004430:	4313      	orrs	r3, r2
 8004432:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800443e:	2b00      	cmp	r3, #0
 8004440:	d032      	beq.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0xc8c>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	691b      	ldr	r3, [r3, #16]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d010      	beq.n	800446c <HAL_RCCEx_PeriphCLKConfig+0xc50>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	691b      	ldr	r3, [r3, #16]
 800444e:	2b01      	cmp	r3, #1
 8004450:	d00c      	beq.n	800446c <HAL_RCCEx_PeriphCLKConfig+0xc50>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	691b      	ldr	r3, [r3, #16]
 8004456:	2b02      	cmp	r3, #2
 8004458:	d008      	beq.n	800446c <HAL_RCCEx_PeriphCLKConfig+0xc50>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	691b      	ldr	r3, [r3, #16]
 800445e:	2b03      	cmp	r3, #3
 8004460:	d004      	beq.n	800446c <HAL_RCCEx_PeriphCLKConfig+0xc50>
 8004462:	f240 2105 	movw	r1, #517	; 0x205
 8004466:	483e      	ldr	r0, [pc, #248]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 8004468:	f7fd f80d 	bl	8001486 <assert_failed>

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800446c:	4b3b      	ldr	r3, [pc, #236]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 800446e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004472:	0e1b      	lsrs	r3, r3, #24
 8004474:	f003 030f 	and.w	r3, r3, #15
 8004478:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800447a:	4b38      	ldr	r3, [pc, #224]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 800447c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004480:	0f1b      	lsrs	r3, r3, #28
 8004482:	f003 0307 	and.w	r3, r3, #7
 8004486:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	019a      	lsls	r2, r3, #6
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	691b      	ldr	r3, [r3, #16]
 8004492:	041b      	lsls	r3, r3, #16
 8004494:	431a      	orrs	r2, r3
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	061b      	lsls	r3, r3, #24
 800449a:	431a      	orrs	r2, r3
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	071b      	lsls	r3, r3, #28
 80044a0:	492e      	ldr	r1, [pc, #184]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 80044a2:	4313      	orrs	r3, r2
 80044a4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d040      	beq.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	691b      	ldr	r3, [r3, #16]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d010      	beq.n	80044de <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	691b      	ldr	r3, [r3, #16]
 80044c0:	2b01      	cmp	r3, #1
 80044c2:	d00c      	beq.n	80044de <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	691b      	ldr	r3, [r3, #16]
 80044c8:	2b02      	cmp	r3, #2
 80044ca:	d008      	beq.n	80044de <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	691b      	ldr	r3, [r3, #16]
 80044d0:	2b03      	cmp	r3, #3
 80044d2:	d004      	beq.n	80044de <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 80044d4:	f44f 7105 	mov.w	r1, #532	; 0x214
 80044d8:	4821      	ldr	r0, [pc, #132]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 80044da:	f7fc ffd4 	bl	8001486 <assert_failed>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	689b      	ldr	r3, [r3, #8]
 80044e2:	2b01      	cmp	r3, #1
 80044e4:	d903      	bls.n	80044ee <HAL_RCCEx_PeriphCLKConfig+0xcd2>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	689b      	ldr	r3, [r3, #8]
 80044ea:	2b07      	cmp	r3, #7
 80044ec:	d904      	bls.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 80044ee:	f240 2115 	movw	r1, #533	; 0x215
 80044f2:	481b      	ldr	r0, [pc, #108]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 80044f4:	f7fc ffc7 	bl	8001486 <assert_failed>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	68db      	ldr	r3, [r3, #12]
 80044fc:	2b01      	cmp	r3, #1
 80044fe:	d903      	bls.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0xcec>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	68db      	ldr	r3, [r3, #12]
 8004504:	2b0f      	cmp	r3, #15
 8004506:	d904      	bls.n	8004512 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
 8004508:	f240 2116 	movw	r1, #534	; 0x216
 800450c:	4814      	ldr	r0, [pc, #80]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 800450e:	f7fc ffba 	bl	8001486 <assert_failed>

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	019a      	lsls	r2, r3, #6
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	691b      	ldr	r3, [r3, #16]
 800451c:	041b      	lsls	r3, r3, #16
 800451e:	431a      	orrs	r2, r3
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	68db      	ldr	r3, [r3, #12]
 8004524:	061b      	lsls	r3, r3, #24
 8004526:	431a      	orrs	r2, r3
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	689b      	ldr	r3, [r3, #8]
 800452c:	071b      	lsls	r3, r3, #28
 800452e:	490b      	ldr	r1, [pc, #44]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8004530:	4313      	orrs	r3, r2
 8004532:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004536:	4b09      	ldr	r3, [pc, #36]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a08      	ldr	r2, [pc, #32]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 800453c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004540:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004542:	f7fd fb75 	bl	8001c30 <HAL_GetTick>
 8004546:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004548:	e00c      	b.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0xd48>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800454a:	f7fd fb71 	bl	8001c30 <HAL_GetTick>
 800454e:	4602      	mov	r2, r0
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	1ad3      	subs	r3, r2, r3
 8004554:	2b64      	cmp	r3, #100	; 0x64
 8004556:	d905      	bls.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0xd48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004558:	2303      	movs	r3, #3
 800455a:	e13b      	b.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
 800455c:	40023800 	.word	0x40023800
 8004560:	080094c8 	.word	0x080094c8
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004564:	4b9d      	ldr	r3, [pc, #628]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800456c:	2b00      	cmp	r3, #0
 800456e:	d0ec      	beq.n	800454a <HAL_RCCEx_PeriphCLKConfig+0xd2e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004570:	69bb      	ldr	r3, [r7, #24]
 8004572:	2b01      	cmp	r3, #1
 8004574:	f040 812d 	bne.w	80047d2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004578:	4b98      	ldr	r3, [pc, #608]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a97      	ldr	r2, [pc, #604]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 800457e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004582:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004584:	f7fd fb54 	bl	8001c30 <HAL_GetTick>
 8004588:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800458a:	e008      	b.n	800459e <HAL_RCCEx_PeriphCLKConfig+0xd82>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800458c:	f7fd fb50 	bl	8001c30 <HAL_GetTick>
 8004590:	4602      	mov	r2, r0
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	1ad3      	subs	r3, r2, r3
 8004596:	2b64      	cmp	r3, #100	; 0x64
 8004598:	d901      	bls.n	800459e <HAL_RCCEx_PeriphCLKConfig+0xd82>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800459a:	2303      	movs	r3, #3
 800459c:	e11a      	b.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800459e:	4b8f      	ldr	r3, [pc, #572]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80045a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80045aa:	d0ef      	beq.n	800458c <HAL_RCCEx_PeriphCLKConfig+0xd70>
      }
    }

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	695b      	ldr	r3, [r3, #20]
 80045b0:	2b31      	cmp	r3, #49	; 0x31
 80045b2:	d904      	bls.n	80045be <HAL_RCCEx_PeriphCLKConfig+0xda2>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	695b      	ldr	r3, [r3, #20]
 80045b8:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 80045bc:	d904      	bls.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0xdac>
 80045be:	f44f 7111 	mov.w	r1, #580	; 0x244
 80045c2:	4887      	ldr	r0, [pc, #540]	; (80047e0 <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 80045c4:	f7fc ff5f 	bl	8001486 <assert_failed>

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d003      	beq.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0xdc0>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d009      	beq.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0xdd4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d048      	beq.n	800467a <HAL_RCCEx_PeriphCLKConfig+0xe5e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d144      	bne.n	800467a <HAL_RCCEx_PeriphCLKConfig+0xe5e>
    {
      /* check for PLLSAIQ Parameter */
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	699b      	ldr	r3, [r3, #24]
 80045f4:	2b01      	cmp	r3, #1
 80045f6:	d903      	bls.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0xde4>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	699b      	ldr	r3, [r3, #24]
 80045fc:	2b0f      	cmp	r3, #15
 80045fe:	d904      	bls.n	800460a <HAL_RCCEx_PeriphCLKConfig+0xdee>
 8004600:	f240 214b 	movw	r1, #587	; 0x24b
 8004604:	4876      	ldr	r0, [pc, #472]	; (80047e0 <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 8004606:	f7fc ff3e 	bl	8001486 <assert_failed>
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800460e:	2b00      	cmp	r3, #0
 8004610:	d003      	beq.n	800461a <HAL_RCCEx_PeriphCLKConfig+0xdfe>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004616:	2b20      	cmp	r3, #32
 8004618:	d904      	bls.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0xe08>
 800461a:	f240 214d 	movw	r1, #589	; 0x24d
 800461e:	4870      	ldr	r0, [pc, #448]	; (80047e0 <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 8004620:	f7fc ff31 	bl	8001486 <assert_failed>

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004624:	4b6d      	ldr	r3, [pc, #436]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8004626:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800462a:	0c1b      	lsrs	r3, r3, #16
 800462c:	f003 0303 	and.w	r3, r3, #3
 8004630:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004632:	4b6a      	ldr	r3, [pc, #424]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8004634:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004638:	0f1b      	lsrs	r3, r3, #28
 800463a:	f003 0307 	and.w	r3, r3, #7
 800463e:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	695b      	ldr	r3, [r3, #20]
 8004644:	019a      	lsls	r2, r3, #6
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	041b      	lsls	r3, r3, #16
 800464a:	431a      	orrs	r2, r3
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	699b      	ldr	r3, [r3, #24]
 8004650:	061b      	lsls	r3, r3, #24
 8004652:	431a      	orrs	r2, r3
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	071b      	lsls	r3, r3, #28
 8004658:	4960      	ldr	r1, [pc, #384]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 800465a:	4313      	orrs	r3, r2
 800465c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004660:	4b5e      	ldr	r3, [pc, #376]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8004662:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004666:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800466e:	3b01      	subs	r3, #1
 8004670:	021b      	lsls	r3, r3, #8
 8004672:	495a      	ldr	r1, [pc, #360]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8004674:	4313      	orrs	r3, r2
 8004676:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004682:	2b00      	cmp	r3, #0
 8004684:	d037      	beq.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0xeda>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800468a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800468e:	d132      	bne.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0xeda>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6a1b      	ldr	r3, [r3, #32]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d010      	beq.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6a1b      	ldr	r3, [r3, #32]
 800469c:	2b01      	cmp	r3, #1
 800469e:	d00c      	beq.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6a1b      	ldr	r3, [r3, #32]
 80046a4:	2b02      	cmp	r3, #2
 80046a6:	d008      	beq.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6a1b      	ldr	r3, [r3, #32]
 80046ac:	2b03      	cmp	r3, #3
 80046ae:	d004      	beq.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 80046b0:	f44f 7118 	mov.w	r1, #608	; 0x260
 80046b4:	484a      	ldr	r0, [pc, #296]	; (80047e0 <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 80046b6:	f7fc fee6 	bl	8001486 <assert_failed>
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80046ba:	4b48      	ldr	r3, [pc, #288]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 80046bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046c0:	0e1b      	lsrs	r3, r3, #24
 80046c2:	f003 030f 	and.w	r3, r3, #15
 80046c6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80046c8:	4b44      	ldr	r3, [pc, #272]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 80046ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046ce:	0f1b      	lsrs	r3, r3, #28
 80046d0:	f003 0307 	and.w	r3, r3, #7
 80046d4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	695b      	ldr	r3, [r3, #20]
 80046da:	019a      	lsls	r2, r3, #6
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6a1b      	ldr	r3, [r3, #32]
 80046e0:	041b      	lsls	r3, r3, #16
 80046e2:	431a      	orrs	r2, r3
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	061b      	lsls	r3, r3, #24
 80046e8:	431a      	orrs	r2, r3
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	071b      	lsls	r3, r3, #28
 80046ee:	493b      	ldr	r1, [pc, #236]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 80046f0:	4313      	orrs	r3, r2
 80046f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f003 0308 	and.w	r3, r3, #8
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d04d      	beq.n	800479e <HAL_RCCEx_PeriphCLKConfig+0xf82>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	69db      	ldr	r3, [r3, #28]
 8004706:	2b01      	cmp	r3, #1
 8004708:	d903      	bls.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0xef6>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	69db      	ldr	r3, [r3, #28]
 800470e:	2b07      	cmp	r3, #7
 8004710:	d904      	bls.n	800471c <HAL_RCCEx_PeriphCLKConfig+0xf00>
 8004712:	f240 216f 	movw	r1, #623	; 0x26f
 8004716:	4832      	ldr	r0, [pc, #200]	; (80047e0 <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 8004718:	f7fc feb5 	bl	8001486 <assert_failed>
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004720:	2b00      	cmp	r3, #0
 8004722:	d013      	beq.n	800474c <HAL_RCCEx_PeriphCLKConfig+0xf30>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004728:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800472c:	d00e      	beq.n	800474c <HAL_RCCEx_PeriphCLKConfig+0xf30>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004732:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004736:	d009      	beq.n	800474c <HAL_RCCEx_PeriphCLKConfig+0xf30>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800473c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004740:	d004      	beq.n	800474c <HAL_RCCEx_PeriphCLKConfig+0xf30>
 8004742:	f44f 711c 	mov.w	r1, #624	; 0x270
 8004746:	4826      	ldr	r0, [pc, #152]	; (80047e0 <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 8004748:	f7fc fe9d 	bl	8001486 <assert_failed>

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800474c:	4b23      	ldr	r3, [pc, #140]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 800474e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004752:	0e1b      	lsrs	r3, r3, #24
 8004754:	f003 030f 	and.w	r3, r3, #15
 8004758:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800475a:	4b20      	ldr	r3, [pc, #128]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 800475c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004760:	0c1b      	lsrs	r3, r3, #16
 8004762:	f003 0303 	and.w	r3, r3, #3
 8004766:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	695b      	ldr	r3, [r3, #20]
 800476c:	019a      	lsls	r2, r3, #6
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	041b      	lsls	r3, r3, #16
 8004772:	431a      	orrs	r2, r3
 8004774:	693b      	ldr	r3, [r7, #16]
 8004776:	061b      	lsls	r3, r3, #24
 8004778:	431a      	orrs	r2, r3
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	69db      	ldr	r3, [r3, #28]
 800477e:	071b      	lsls	r3, r3, #28
 8004780:	4916      	ldr	r1, [pc, #88]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8004782:	4313      	orrs	r3, r2
 8004784:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004788:	4b14      	ldr	r3, [pc, #80]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 800478a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800478e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004796:	4911      	ldr	r1, [pc, #68]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8004798:	4313      	orrs	r3, r2
 800479a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800479e:	4b0f      	ldr	r3, [pc, #60]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a0e      	ldr	r2, [pc, #56]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 80047a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047aa:	f7fd fa41 	bl	8001c30 <HAL_GetTick>
 80047ae:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80047b0:	e008      	b.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80047b2:	f7fd fa3d 	bl	8001c30 <HAL_GetTick>
 80047b6:	4602      	mov	r2, r0
 80047b8:	697b      	ldr	r3, [r7, #20]
 80047ba:	1ad3      	subs	r3, r2, r3
 80047bc:	2b64      	cmp	r3, #100	; 0x64
 80047be:	d901      	bls.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80047c0:	2303      	movs	r3, #3
 80047c2:	e007      	b.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80047c4:	4b05      	ldr	r3, [pc, #20]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80047cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80047d0:	d1ef      	bne.n	80047b2 <HAL_RCCEx_PeriphCLKConfig+0xf96>
      }
    }
  }
  return HAL_OK;
 80047d2:	2300      	movs	r3, #0
}
 80047d4:	4618      	mov	r0, r3
 80047d6:	3720      	adds	r7, #32
 80047d8:	46bd      	mov	sp, r7
 80047da:	bd80      	pop	{r7, pc}
 80047dc:	40023800 	.word	0x40023800
 80047e0:	080094c8 	.word	0x080094c8

080047e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b082      	sub	sp, #8
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d101      	bne.n	80047f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80047f2:	2301      	movs	r3, #1
 80047f4:	e0f5      	b.n	80049e2 <HAL_TIM_Base_Init+0x1fe>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a7c      	ldr	r2, [pc, #496]	; (80049ec <HAL_TIM_Base_Init+0x208>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d045      	beq.n	800488c <HAL_TIM_Base_Init+0xa8>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004808:	d040      	beq.n	800488c <HAL_TIM_Base_Init+0xa8>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4a78      	ldr	r2, [pc, #480]	; (80049f0 <HAL_TIM_Base_Init+0x20c>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d03b      	beq.n	800488c <HAL_TIM_Base_Init+0xa8>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a76      	ldr	r2, [pc, #472]	; (80049f4 <HAL_TIM_Base_Init+0x210>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d036      	beq.n	800488c <HAL_TIM_Base_Init+0xa8>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a75      	ldr	r2, [pc, #468]	; (80049f8 <HAL_TIM_Base_Init+0x214>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d031      	beq.n	800488c <HAL_TIM_Base_Init+0xa8>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a73      	ldr	r2, [pc, #460]	; (80049fc <HAL_TIM_Base_Init+0x218>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d02c      	beq.n	800488c <HAL_TIM_Base_Init+0xa8>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a72      	ldr	r2, [pc, #456]	; (8004a00 <HAL_TIM_Base_Init+0x21c>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d027      	beq.n	800488c <HAL_TIM_Base_Init+0xa8>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a70      	ldr	r2, [pc, #448]	; (8004a04 <HAL_TIM_Base_Init+0x220>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d022      	beq.n	800488c <HAL_TIM_Base_Init+0xa8>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a6f      	ldr	r2, [pc, #444]	; (8004a08 <HAL_TIM_Base_Init+0x224>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d01d      	beq.n	800488c <HAL_TIM_Base_Init+0xa8>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a6d      	ldr	r2, [pc, #436]	; (8004a0c <HAL_TIM_Base_Init+0x228>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d018      	beq.n	800488c <HAL_TIM_Base_Init+0xa8>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a6c      	ldr	r2, [pc, #432]	; (8004a10 <HAL_TIM_Base_Init+0x22c>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d013      	beq.n	800488c <HAL_TIM_Base_Init+0xa8>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a6a      	ldr	r2, [pc, #424]	; (8004a14 <HAL_TIM_Base_Init+0x230>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d00e      	beq.n	800488c <HAL_TIM_Base_Init+0xa8>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a69      	ldr	r2, [pc, #420]	; (8004a18 <HAL_TIM_Base_Init+0x234>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d009      	beq.n	800488c <HAL_TIM_Base_Init+0xa8>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a67      	ldr	r2, [pc, #412]	; (8004a1c <HAL_TIM_Base_Init+0x238>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d004      	beq.n	800488c <HAL_TIM_Base_Init+0xa8>
 8004882:	f44f 718b 	mov.w	r1, #278	; 0x116
 8004886:	4866      	ldr	r0, [pc, #408]	; (8004a20 <HAL_TIM_Base_Init+0x23c>)
 8004888:	f7fc fdfd 	bl	8001486 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	689b      	ldr	r3, [r3, #8]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d014      	beq.n	80048be <HAL_TIM_Base_Init+0xda>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	689b      	ldr	r3, [r3, #8]
 8004898:	2b10      	cmp	r3, #16
 800489a:	d010      	beq.n	80048be <HAL_TIM_Base_Init+0xda>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	2b20      	cmp	r3, #32
 80048a2:	d00c      	beq.n	80048be <HAL_TIM_Base_Init+0xda>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	689b      	ldr	r3, [r3, #8]
 80048a8:	2b40      	cmp	r3, #64	; 0x40
 80048aa:	d008      	beq.n	80048be <HAL_TIM_Base_Init+0xda>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	689b      	ldr	r3, [r3, #8]
 80048b0:	2b60      	cmp	r3, #96	; 0x60
 80048b2:	d004      	beq.n	80048be <HAL_TIM_Base_Init+0xda>
 80048b4:	f240 1117 	movw	r1, #279	; 0x117
 80048b8:	4859      	ldr	r0, [pc, #356]	; (8004a20 <HAL_TIM_Base_Init+0x23c>)
 80048ba:	f7fc fde4 	bl	8001486 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	691b      	ldr	r3, [r3, #16]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d00e      	beq.n	80048e4 <HAL_TIM_Base_Init+0x100>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	691b      	ldr	r3, [r3, #16]
 80048ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048ce:	d009      	beq.n	80048e4 <HAL_TIM_Base_Init+0x100>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	691b      	ldr	r3, [r3, #16]
 80048d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048d8:	d004      	beq.n	80048e4 <HAL_TIM_Base_Init+0x100>
 80048da:	f44f 718c 	mov.w	r1, #280	; 0x118
 80048de:	4850      	ldr	r0, [pc, #320]	; (8004a20 <HAL_TIM_Base_Init+0x23c>)
 80048e0:	f7fc fdd1 	bl	8001486 <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048ec:	d004      	beq.n	80048f8 <HAL_TIM_Base_Init+0x114>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a41      	ldr	r2, [pc, #260]	; (80049f8 <HAL_TIM_Base_Init+0x214>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d107      	bne.n	8004908 <HAL_TIM_Base_Init+0x124>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	68db      	ldr	r3, [r3, #12]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	bf14      	ite	ne
 8004900:	2301      	movne	r3, #1
 8004902:	2300      	moveq	r3, #0
 8004904:	b2db      	uxtb	r3, r3
 8004906:	e00e      	b.n	8004926 <HAL_TIM_Base_Init+0x142>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	68db      	ldr	r3, [r3, #12]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d006      	beq.n	800491e <HAL_TIM_Base_Init+0x13a>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	68db      	ldr	r3, [r3, #12]
 8004914:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004918:	d201      	bcs.n	800491e <HAL_TIM_Base_Init+0x13a>
 800491a:	2301      	movs	r3, #1
 800491c:	e000      	b.n	8004920 <HAL_TIM_Base_Init+0x13c>
 800491e:	2300      	movs	r3, #0
 8004920:	f003 0301 	and.w	r3, r3, #1
 8004924:	b2db      	uxtb	r3, r3
 8004926:	2b00      	cmp	r3, #0
 8004928:	d104      	bne.n	8004934 <HAL_TIM_Base_Init+0x150>
 800492a:	f240 1119 	movw	r1, #281	; 0x119
 800492e:	483c      	ldr	r0, [pc, #240]	; (8004a20 <HAL_TIM_Base_Init+0x23c>)
 8004930:	f7fc fda9 	bl	8001486 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	699b      	ldr	r3, [r3, #24]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d008      	beq.n	800494e <HAL_TIM_Base_Init+0x16a>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	699b      	ldr	r3, [r3, #24]
 8004940:	2b80      	cmp	r3, #128	; 0x80
 8004942:	d004      	beq.n	800494e <HAL_TIM_Base_Init+0x16a>
 8004944:	f44f 718d 	mov.w	r1, #282	; 0x11a
 8004948:	4835      	ldr	r0, [pc, #212]	; (8004a20 <HAL_TIM_Base_Init+0x23c>)
 800494a:	f7fc fd9c 	bl	8001486 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004954:	b2db      	uxtb	r3, r3
 8004956:	2b00      	cmp	r3, #0
 8004958:	d106      	bne.n	8004968 <HAL_TIM_Base_Init+0x184>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2200      	movs	r2, #0
 800495e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004962:	6878      	ldr	r0, [r7, #4]
 8004964:	f7fd f810 	bl	8001988 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2202      	movs	r2, #2
 800496c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681a      	ldr	r2, [r3, #0]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	3304      	adds	r3, #4
 8004978:	4619      	mov	r1, r3
 800497a:	4610      	mov	r0, r2
 800497c:	f000 f9a4 	bl	8004cc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2201      	movs	r2, #1
 8004984:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2201      	movs	r2, #1
 800498c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2201      	movs	r2, #1
 8004994:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2201      	movs	r2, #1
 800499c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2201      	movs	r2, #1
 80049a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2201      	movs	r2, #1
 80049ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2201      	movs	r2, #1
 80049b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2201      	movs	r2, #1
 80049bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2201      	movs	r2, #1
 80049c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2201      	movs	r2, #1
 80049cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2201      	movs	r2, #1
 80049d4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2201      	movs	r2, #1
 80049dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80049e0:	2300      	movs	r3, #0
}
 80049e2:	4618      	mov	r0, r3
 80049e4:	3708      	adds	r7, #8
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bd80      	pop	{r7, pc}
 80049ea:	bf00      	nop
 80049ec:	40010000 	.word	0x40010000
 80049f0:	40000400 	.word	0x40000400
 80049f4:	40000800 	.word	0x40000800
 80049f8:	40000c00 	.word	0x40000c00
 80049fc:	40001000 	.word	0x40001000
 8004a00:	40001400 	.word	0x40001400
 8004a04:	40010400 	.word	0x40010400
 8004a08:	40014000 	.word	0x40014000
 8004a0c:	40014400 	.word	0x40014400
 8004a10:	40014800 	.word	0x40014800
 8004a14:	40001800 	.word	0x40001800
 8004a18:	40001c00 	.word	0x40001c00
 8004a1c:	40002000 	.word	0x40002000
 8004a20:	08009504 	.word	0x08009504

08004a24 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b082      	sub	sp, #8
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	691b      	ldr	r3, [r3, #16]
 8004a32:	f003 0302 	and.w	r3, r3, #2
 8004a36:	2b02      	cmp	r3, #2
 8004a38:	d122      	bne.n	8004a80 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	68db      	ldr	r3, [r3, #12]
 8004a40:	f003 0302 	and.w	r3, r3, #2
 8004a44:	2b02      	cmp	r3, #2
 8004a46:	d11b      	bne.n	8004a80 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f06f 0202 	mvn.w	r2, #2
 8004a50:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2201      	movs	r2, #1
 8004a56:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	699b      	ldr	r3, [r3, #24]
 8004a5e:	f003 0303 	and.w	r3, r3, #3
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d003      	beq.n	8004a6e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	f000 f90f 	bl	8004c8a <HAL_TIM_IC_CaptureCallback>
 8004a6c:	e005      	b.n	8004a7a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f000 f901 	bl	8004c76 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a74:	6878      	ldr	r0, [r7, #4]
 8004a76:	f000 f912 	bl	8004c9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	691b      	ldr	r3, [r3, #16]
 8004a86:	f003 0304 	and.w	r3, r3, #4
 8004a8a:	2b04      	cmp	r3, #4
 8004a8c:	d122      	bne.n	8004ad4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	68db      	ldr	r3, [r3, #12]
 8004a94:	f003 0304 	and.w	r3, r3, #4
 8004a98:	2b04      	cmp	r3, #4
 8004a9a:	d11b      	bne.n	8004ad4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f06f 0204 	mvn.w	r2, #4
 8004aa4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2202      	movs	r2, #2
 8004aaa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	699b      	ldr	r3, [r3, #24]
 8004ab2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d003      	beq.n	8004ac2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004aba:	6878      	ldr	r0, [r7, #4]
 8004abc:	f000 f8e5 	bl	8004c8a <HAL_TIM_IC_CaptureCallback>
 8004ac0:	e005      	b.n	8004ace <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f000 f8d7 	bl	8004c76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ac8:	6878      	ldr	r0, [r7, #4]
 8004aca:	f000 f8e8 	bl	8004c9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	691b      	ldr	r3, [r3, #16]
 8004ada:	f003 0308 	and.w	r3, r3, #8
 8004ade:	2b08      	cmp	r3, #8
 8004ae0:	d122      	bne.n	8004b28 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	68db      	ldr	r3, [r3, #12]
 8004ae8:	f003 0308 	and.w	r3, r3, #8
 8004aec:	2b08      	cmp	r3, #8
 8004aee:	d11b      	bne.n	8004b28 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f06f 0208 	mvn.w	r2, #8
 8004af8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2204      	movs	r2, #4
 8004afe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	69db      	ldr	r3, [r3, #28]
 8004b06:	f003 0303 	and.w	r3, r3, #3
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d003      	beq.n	8004b16 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b0e:	6878      	ldr	r0, [r7, #4]
 8004b10:	f000 f8bb 	bl	8004c8a <HAL_TIM_IC_CaptureCallback>
 8004b14:	e005      	b.n	8004b22 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b16:	6878      	ldr	r0, [r7, #4]
 8004b18:	f000 f8ad 	bl	8004c76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b1c:	6878      	ldr	r0, [r7, #4]
 8004b1e:	f000 f8be 	bl	8004c9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2200      	movs	r2, #0
 8004b26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	691b      	ldr	r3, [r3, #16]
 8004b2e:	f003 0310 	and.w	r3, r3, #16
 8004b32:	2b10      	cmp	r3, #16
 8004b34:	d122      	bne.n	8004b7c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	68db      	ldr	r3, [r3, #12]
 8004b3c:	f003 0310 	and.w	r3, r3, #16
 8004b40:	2b10      	cmp	r3, #16
 8004b42:	d11b      	bne.n	8004b7c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f06f 0210 	mvn.w	r2, #16
 8004b4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2208      	movs	r2, #8
 8004b52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	69db      	ldr	r3, [r3, #28]
 8004b5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d003      	beq.n	8004b6a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	f000 f891 	bl	8004c8a <HAL_TIM_IC_CaptureCallback>
 8004b68:	e005      	b.n	8004b76 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	f000 f883 	bl	8004c76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b70:	6878      	ldr	r0, [r7, #4]
 8004b72:	f000 f894 	bl	8004c9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	691b      	ldr	r3, [r3, #16]
 8004b82:	f003 0301 	and.w	r3, r3, #1
 8004b86:	2b01      	cmp	r3, #1
 8004b88:	d10e      	bne.n	8004ba8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	68db      	ldr	r3, [r3, #12]
 8004b90:	f003 0301 	and.w	r3, r3, #1
 8004b94:	2b01      	cmp	r3, #1
 8004b96:	d107      	bne.n	8004ba8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f06f 0201 	mvn.w	r2, #1
 8004ba0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004ba2:	6878      	ldr	r0, [r7, #4]
 8004ba4:	f000 f85d 	bl	8004c62 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	691b      	ldr	r3, [r3, #16]
 8004bae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bb2:	2b80      	cmp	r3, #128	; 0x80
 8004bb4:	d10e      	bne.n	8004bd4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	68db      	ldr	r3, [r3, #12]
 8004bbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bc0:	2b80      	cmp	r3, #128	; 0x80
 8004bc2:	d107      	bne.n	8004bd4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004bcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004bce:	6878      	ldr	r0, [r7, #4]
 8004bd0:	f000 fa7c 	bl	80050cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	691b      	ldr	r3, [r3, #16]
 8004bda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004be2:	d10e      	bne.n	8004c02 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	68db      	ldr	r3, [r3, #12]
 8004bea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bee:	2b80      	cmp	r3, #128	; 0x80
 8004bf0:	d107      	bne.n	8004c02 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004bfa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004bfc:	6878      	ldr	r0, [r7, #4]
 8004bfe:	f000 fa6f 	bl	80050e0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	691b      	ldr	r3, [r3, #16]
 8004c08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c0c:	2b40      	cmp	r3, #64	; 0x40
 8004c0e:	d10e      	bne.n	8004c2e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	68db      	ldr	r3, [r3, #12]
 8004c16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c1a:	2b40      	cmp	r3, #64	; 0x40
 8004c1c:	d107      	bne.n	8004c2e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004c26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004c28:	6878      	ldr	r0, [r7, #4]
 8004c2a:	f000 f842 	bl	8004cb2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	691b      	ldr	r3, [r3, #16]
 8004c34:	f003 0320 	and.w	r3, r3, #32
 8004c38:	2b20      	cmp	r3, #32
 8004c3a:	d10e      	bne.n	8004c5a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	68db      	ldr	r3, [r3, #12]
 8004c42:	f003 0320 	and.w	r3, r3, #32
 8004c46:	2b20      	cmp	r3, #32
 8004c48:	d107      	bne.n	8004c5a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f06f 0220 	mvn.w	r2, #32
 8004c52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004c54:	6878      	ldr	r0, [r7, #4]
 8004c56:	f000 fa2f 	bl	80050b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004c5a:	bf00      	nop
 8004c5c:	3708      	adds	r7, #8
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bd80      	pop	{r7, pc}

08004c62 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c62:	b480      	push	{r7}
 8004c64:	b083      	sub	sp, #12
 8004c66:	af00      	add	r7, sp, #0
 8004c68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004c6a:	bf00      	nop
 8004c6c:	370c      	adds	r7, #12
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c74:	4770      	bx	lr

08004c76 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c76:	b480      	push	{r7}
 8004c78:	b083      	sub	sp, #12
 8004c7a:	af00      	add	r7, sp, #0
 8004c7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004c7e:	bf00      	nop
 8004c80:	370c      	adds	r7, #12
 8004c82:	46bd      	mov	sp, r7
 8004c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c88:	4770      	bx	lr

08004c8a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004c8a:	b480      	push	{r7}
 8004c8c:	b083      	sub	sp, #12
 8004c8e:	af00      	add	r7, sp, #0
 8004c90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004c92:	bf00      	nop
 8004c94:	370c      	adds	r7, #12
 8004c96:	46bd      	mov	sp, r7
 8004c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9c:	4770      	bx	lr

08004c9e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004c9e:	b480      	push	{r7}
 8004ca0:	b083      	sub	sp, #12
 8004ca2:	af00      	add	r7, sp, #0
 8004ca4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004ca6:	bf00      	nop
 8004ca8:	370c      	adds	r7, #12
 8004caa:	46bd      	mov	sp, r7
 8004cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb0:	4770      	bx	lr

08004cb2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004cb2:	b480      	push	{r7}
 8004cb4:	b083      	sub	sp, #12
 8004cb6:	af00      	add	r7, sp, #0
 8004cb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004cba:	bf00      	nop
 8004cbc:	370c      	adds	r7, #12
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc4:	4770      	bx	lr
	...

08004cc8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b085      	sub	sp, #20
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
 8004cd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	4a40      	ldr	r2, [pc, #256]	; (8004ddc <TIM_Base_SetConfig+0x114>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d013      	beq.n	8004d08 <TIM_Base_SetConfig+0x40>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ce6:	d00f      	beq.n	8004d08 <TIM_Base_SetConfig+0x40>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	4a3d      	ldr	r2, [pc, #244]	; (8004de0 <TIM_Base_SetConfig+0x118>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d00b      	beq.n	8004d08 <TIM_Base_SetConfig+0x40>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	4a3c      	ldr	r2, [pc, #240]	; (8004de4 <TIM_Base_SetConfig+0x11c>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d007      	beq.n	8004d08 <TIM_Base_SetConfig+0x40>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	4a3b      	ldr	r2, [pc, #236]	; (8004de8 <TIM_Base_SetConfig+0x120>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d003      	beq.n	8004d08 <TIM_Base_SetConfig+0x40>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	4a3a      	ldr	r2, [pc, #232]	; (8004dec <TIM_Base_SetConfig+0x124>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d108      	bne.n	8004d1a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	68fa      	ldr	r2, [r7, #12]
 8004d16:	4313      	orrs	r3, r2
 8004d18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	4a2f      	ldr	r2, [pc, #188]	; (8004ddc <TIM_Base_SetConfig+0x114>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d02b      	beq.n	8004d7a <TIM_Base_SetConfig+0xb2>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d28:	d027      	beq.n	8004d7a <TIM_Base_SetConfig+0xb2>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	4a2c      	ldr	r2, [pc, #176]	; (8004de0 <TIM_Base_SetConfig+0x118>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d023      	beq.n	8004d7a <TIM_Base_SetConfig+0xb2>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	4a2b      	ldr	r2, [pc, #172]	; (8004de4 <TIM_Base_SetConfig+0x11c>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d01f      	beq.n	8004d7a <TIM_Base_SetConfig+0xb2>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	4a2a      	ldr	r2, [pc, #168]	; (8004de8 <TIM_Base_SetConfig+0x120>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d01b      	beq.n	8004d7a <TIM_Base_SetConfig+0xb2>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	4a29      	ldr	r2, [pc, #164]	; (8004dec <TIM_Base_SetConfig+0x124>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d017      	beq.n	8004d7a <TIM_Base_SetConfig+0xb2>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	4a28      	ldr	r2, [pc, #160]	; (8004df0 <TIM_Base_SetConfig+0x128>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d013      	beq.n	8004d7a <TIM_Base_SetConfig+0xb2>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	4a27      	ldr	r2, [pc, #156]	; (8004df4 <TIM_Base_SetConfig+0x12c>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d00f      	beq.n	8004d7a <TIM_Base_SetConfig+0xb2>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	4a26      	ldr	r2, [pc, #152]	; (8004df8 <TIM_Base_SetConfig+0x130>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d00b      	beq.n	8004d7a <TIM_Base_SetConfig+0xb2>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	4a25      	ldr	r2, [pc, #148]	; (8004dfc <TIM_Base_SetConfig+0x134>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d007      	beq.n	8004d7a <TIM_Base_SetConfig+0xb2>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	4a24      	ldr	r2, [pc, #144]	; (8004e00 <TIM_Base_SetConfig+0x138>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d003      	beq.n	8004d7a <TIM_Base_SetConfig+0xb2>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	4a23      	ldr	r2, [pc, #140]	; (8004e04 <TIM_Base_SetConfig+0x13c>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d108      	bne.n	8004d8c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	68db      	ldr	r3, [r3, #12]
 8004d86:	68fa      	ldr	r2, [r7, #12]
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	695b      	ldr	r3, [r3, #20]
 8004d96:	4313      	orrs	r3, r2
 8004d98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	68fa      	ldr	r2, [r7, #12]
 8004d9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	689a      	ldr	r2, [r3, #8]
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	681a      	ldr	r2, [r3, #0]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	4a0a      	ldr	r2, [pc, #40]	; (8004ddc <TIM_Base_SetConfig+0x114>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d003      	beq.n	8004dc0 <TIM_Base_SetConfig+0xf8>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	4a0c      	ldr	r2, [pc, #48]	; (8004dec <TIM_Base_SetConfig+0x124>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d103      	bne.n	8004dc8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	691a      	ldr	r2, [r3, #16]
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2201      	movs	r2, #1
 8004dcc:	615a      	str	r2, [r3, #20]
}
 8004dce:	bf00      	nop
 8004dd0:	3714      	adds	r7, #20
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd8:	4770      	bx	lr
 8004dda:	bf00      	nop
 8004ddc:	40010000 	.word	0x40010000
 8004de0:	40000400 	.word	0x40000400
 8004de4:	40000800 	.word	0x40000800
 8004de8:	40000c00 	.word	0x40000c00
 8004dec:	40010400 	.word	0x40010400
 8004df0:	40014000 	.word	0x40014000
 8004df4:	40014400 	.word	0x40014400
 8004df8:	40014800 	.word	0x40014800
 8004dfc:	40001800 	.word	0x40001800
 8004e00:	40001c00 	.word	0x40001c00
 8004e04:	40002000 	.word	0x40002000

08004e08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b084      	sub	sp, #16
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
 8004e10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4a32      	ldr	r2, [pc, #200]	; (8004ee0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d027      	beq.n	8004e6c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e24:	d022      	beq.n	8004e6c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a2e      	ldr	r2, [pc, #184]	; (8004ee4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d01d      	beq.n	8004e6c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4a2c      	ldr	r2, [pc, #176]	; (8004ee8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d018      	beq.n	8004e6c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4a2b      	ldr	r2, [pc, #172]	; (8004eec <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d013      	beq.n	8004e6c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a29      	ldr	r2, [pc, #164]	; (8004ef0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d00e      	beq.n	8004e6c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4a28      	ldr	r2, [pc, #160]	; (8004ef4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d009      	beq.n	8004e6c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4a26      	ldr	r2, [pc, #152]	; (8004ef8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d004      	beq.n	8004e6c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8004e62:	f240 71b6 	movw	r1, #1974	; 0x7b6
 8004e66:	4825      	ldr	r0, [pc, #148]	; (8004efc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004e68:	f7fc fb0d 	bl	8001486 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d020      	beq.n	8004eb6 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	2b10      	cmp	r3, #16
 8004e7a:	d01c      	beq.n	8004eb6 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	2b20      	cmp	r3, #32
 8004e82:	d018      	beq.n	8004eb6 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	2b30      	cmp	r3, #48	; 0x30
 8004e8a:	d014      	beq.n	8004eb6 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	2b40      	cmp	r3, #64	; 0x40
 8004e92:	d010      	beq.n	8004eb6 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	2b50      	cmp	r3, #80	; 0x50
 8004e9a:	d00c      	beq.n	8004eb6 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	2b60      	cmp	r3, #96	; 0x60
 8004ea2:	d008      	beq.n	8004eb6 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	2b70      	cmp	r3, #112	; 0x70
 8004eaa:	d004      	beq.n	8004eb6 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8004eac:	f240 71b7 	movw	r1, #1975	; 0x7b7
 8004eb0:	4812      	ldr	r0, [pc, #72]	; (8004efc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004eb2:	f7fc fae8 	bl	8001486 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	689b      	ldr	r3, [r3, #8]
 8004eba:	2b80      	cmp	r3, #128	; 0x80
 8004ebc:	d008      	beq.n	8004ed0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	689b      	ldr	r3, [r3, #8]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d004      	beq.n	8004ed0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004ec6:	f44f 61f7 	mov.w	r1, #1976	; 0x7b8
 8004eca:	480c      	ldr	r0, [pc, #48]	; (8004efc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004ecc:	f7fc fadb 	bl	8001486 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ed6:	2b01      	cmp	r3, #1
 8004ed8:	d112      	bne.n	8004f00 <HAL_TIMEx_MasterConfigSynchronization+0xf8>
 8004eda:	2302      	movs	r3, #2
 8004edc:	e0d7      	b.n	800508e <HAL_TIMEx_MasterConfigSynchronization+0x286>
 8004ede:	bf00      	nop
 8004ee0:	40010000 	.word	0x40010000
 8004ee4:	40000400 	.word	0x40000400
 8004ee8:	40000800 	.word	0x40000800
 8004eec:	40000c00 	.word	0x40000c00
 8004ef0:	40001000 	.word	0x40001000
 8004ef4:	40001400 	.word	0x40001400
 8004ef8:	40010400 	.word	0x40010400
 8004efc:	0800953c 	.word	0x0800953c
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2201      	movs	r2, #1
 8004f04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2202      	movs	r2, #2
 8004f0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	685b      	ldr	r3, [r3, #4]
 8004f16:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	689b      	ldr	r3, [r3, #8]
 8004f1e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4a5c      	ldr	r2, [pc, #368]	; (8005098 <HAL_TIMEx_MasterConfigSynchronization+0x290>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d004      	beq.n	8004f34 <HAL_TIMEx_MasterConfigSynchronization+0x12c>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4a5b      	ldr	r2, [pc, #364]	; (800509c <HAL_TIMEx_MasterConfigSynchronization+0x294>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d161      	bne.n	8004ff8 <HAL_TIMEx_MasterConfigSynchronization+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d054      	beq.n	8004fe6 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	685b      	ldr	r3, [r3, #4]
 8004f40:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f44:	d04f      	beq.n	8004fe6 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004f4e:	d04a      	beq.n	8004fe6 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004f58:	d045      	beq.n	8004fe6 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f62:	d040      	beq.n	8004fe6 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 8004f6c:	d03b      	beq.n	8004fe6 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004f76:	d036      	beq.n	8004fe6 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004f80:	d031      	beq.n	8004fe6 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	f5b3 0fe0 	cmp.w	r3, #7340032	; 0x700000
 8004f8a:	d02c      	beq.n	8004fe6 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004f94:	d027      	beq.n	8004fe6 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	f5b3 0f10 	cmp.w	r3, #9437184	; 0x900000
 8004f9e:	d022      	beq.n	8004fe6 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8004fa8:	d01d      	beq.n	8004fe6 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	f5b3 0f30 	cmp.w	r3, #11534336	; 0xb00000
 8004fb2:	d018      	beq.n	8004fe6 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004fbc:	d013      	beq.n	8004fe6 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	f5b3 0f50 	cmp.w	r3, #13631488	; 0xd00000
 8004fc6:	d00e      	beq.n	8004fe6 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	f5b3 0f60 	cmp.w	r3, #14680064	; 0xe00000
 8004fd0:	d009      	beq.n	8004fe6 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	f5b3 0f70 	cmp.w	r3, #15728640	; 0xf00000
 8004fda:	d004      	beq.n	8004fe6 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8004fdc:	f240 71ca 	movw	r1, #1994	; 0x7ca
 8004fe0:	482f      	ldr	r0, [pc, #188]	; (80050a0 <HAL_TIMEx_MasterConfigSynchronization+0x298>)
 8004fe2:	f7fc fa50 	bl	8001486 <assert_failed>

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004fec:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	68fa      	ldr	r2, [r7, #12]
 8004ff4:	4313      	orrs	r3, r2
 8004ff6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ffe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	68fa      	ldr	r2, [r7, #12]
 8005006:	4313      	orrs	r3, r2
 8005008:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	68fa      	ldr	r2, [r7, #12]
 8005010:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4a20      	ldr	r2, [pc, #128]	; (8005098 <HAL_TIMEx_MasterConfigSynchronization+0x290>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d022      	beq.n	8005062 <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005024:	d01d      	beq.n	8005062 <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4a1e      	ldr	r2, [pc, #120]	; (80050a4 <HAL_TIMEx_MasterConfigSynchronization+0x29c>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d018      	beq.n	8005062 <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a1c      	ldr	r2, [pc, #112]	; (80050a8 <HAL_TIMEx_MasterConfigSynchronization+0x2a0>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d013      	beq.n	8005062 <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a1b      	ldr	r2, [pc, #108]	; (80050ac <HAL_TIMEx_MasterConfigSynchronization+0x2a4>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d00e      	beq.n	8005062 <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a14      	ldr	r2, [pc, #80]	; (800509c <HAL_TIMEx_MasterConfigSynchronization+0x294>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d009      	beq.n	8005062 <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a17      	ldr	r2, [pc, #92]	; (80050b0 <HAL_TIMEx_MasterConfigSynchronization+0x2a8>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d004      	beq.n	8005062 <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a15      	ldr	r2, [pc, #84]	; (80050b4 <HAL_TIMEx_MasterConfigSynchronization+0x2ac>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d10c      	bne.n	800507c <HAL_TIMEx_MasterConfigSynchronization+0x274>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005068:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	689b      	ldr	r3, [r3, #8]
 800506e:	68ba      	ldr	r2, [r7, #8]
 8005070:	4313      	orrs	r3, r2
 8005072:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	68ba      	ldr	r2, [r7, #8]
 800507a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2201      	movs	r2, #1
 8005080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2200      	movs	r2, #0
 8005088:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800508c:	2300      	movs	r3, #0
}
 800508e:	4618      	mov	r0, r3
 8005090:	3710      	adds	r7, #16
 8005092:	46bd      	mov	sp, r7
 8005094:	bd80      	pop	{r7, pc}
 8005096:	bf00      	nop
 8005098:	40010000 	.word	0x40010000
 800509c:	40010400 	.word	0x40010400
 80050a0:	0800953c 	.word	0x0800953c
 80050a4:	40000400 	.word	0x40000400
 80050a8:	40000800 	.word	0x40000800
 80050ac:	40000c00 	.word	0x40000c00
 80050b0:	40014000 	.word	0x40014000
 80050b4:	40001800 	.word	0x40001800

080050b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80050b8:	b480      	push	{r7}
 80050ba:	b083      	sub	sp, #12
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80050c0:	bf00      	nop
 80050c2:	370c      	adds	r7, #12
 80050c4:	46bd      	mov	sp, r7
 80050c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ca:	4770      	bx	lr

080050cc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80050cc:	b480      	push	{r7}
 80050ce:	b083      	sub	sp, #12
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80050d4:	bf00      	nop
 80050d6:	370c      	adds	r7, #12
 80050d8:	46bd      	mov	sp, r7
 80050da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050de:	4770      	bx	lr

080050e0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80050e0:	b480      	push	{r7}
 80050e2:	b083      	sub	sp, #12
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80050e8:	bf00      	nop
 80050ea:	370c      	adds	r7, #12
 80050ec:	46bd      	mov	sp, r7
 80050ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f2:	4770      	bx	lr

080050f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b082      	sub	sp, #8
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d101      	bne.n	8005106 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005102:	2301      	movs	r3, #1
 8005104:	e09f      	b.n	8005246 <HAL_UART_Init+0x152>
  }

  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	699b      	ldr	r3, [r3, #24]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d02d      	beq.n	800516a <HAL_UART_Init+0x76>
  {
    /* Check the parameters */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a4f      	ldr	r2, [pc, #316]	; (8005250 <HAL_UART_Init+0x15c>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d055      	beq.n	80051c4 <HAL_UART_Init+0xd0>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4a4d      	ldr	r2, [pc, #308]	; (8005254 <HAL_UART_Init+0x160>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d050      	beq.n	80051c4 <HAL_UART_Init+0xd0>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4a4c      	ldr	r2, [pc, #304]	; (8005258 <HAL_UART_Init+0x164>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d04b      	beq.n	80051c4 <HAL_UART_Init+0xd0>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a4a      	ldr	r2, [pc, #296]	; (800525c <HAL_UART_Init+0x168>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d046      	beq.n	80051c4 <HAL_UART_Init+0xd0>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a49      	ldr	r2, [pc, #292]	; (8005260 <HAL_UART_Init+0x16c>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d041      	beq.n	80051c4 <HAL_UART_Init+0xd0>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a47      	ldr	r2, [pc, #284]	; (8005264 <HAL_UART_Init+0x170>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d03c      	beq.n	80051c4 <HAL_UART_Init+0xd0>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4a46      	ldr	r2, [pc, #280]	; (8005268 <HAL_UART_Init+0x174>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d037      	beq.n	80051c4 <HAL_UART_Init+0xd0>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a44      	ldr	r2, [pc, #272]	; (800526c <HAL_UART_Init+0x178>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d032      	beq.n	80051c4 <HAL_UART_Init+0xd0>
 800515e:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8005162:	4843      	ldr	r0, [pc, #268]	; (8005270 <HAL_UART_Init+0x17c>)
 8005164:	f7fc f98f 	bl	8001486 <assert_failed>
 8005168:	e02c      	b.n	80051c4 <HAL_UART_Init+0xd0>
  }
  else
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4a38      	ldr	r2, [pc, #224]	; (8005250 <HAL_UART_Init+0x15c>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d027      	beq.n	80051c4 <HAL_UART_Init+0xd0>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a36      	ldr	r2, [pc, #216]	; (8005254 <HAL_UART_Init+0x160>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d022      	beq.n	80051c4 <HAL_UART_Init+0xd0>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4a35      	ldr	r2, [pc, #212]	; (8005258 <HAL_UART_Init+0x164>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d01d      	beq.n	80051c4 <HAL_UART_Init+0xd0>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a33      	ldr	r2, [pc, #204]	; (800525c <HAL_UART_Init+0x168>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d018      	beq.n	80051c4 <HAL_UART_Init+0xd0>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4a32      	ldr	r2, [pc, #200]	; (8005260 <HAL_UART_Init+0x16c>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d013      	beq.n	80051c4 <HAL_UART_Init+0xd0>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a30      	ldr	r2, [pc, #192]	; (8005264 <HAL_UART_Init+0x170>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d00e      	beq.n	80051c4 <HAL_UART_Init+0xd0>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4a2f      	ldr	r2, [pc, #188]	; (8005268 <HAL_UART_Init+0x174>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d009      	beq.n	80051c4 <HAL_UART_Init+0xd0>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4a2d      	ldr	r2, [pc, #180]	; (800526c <HAL_UART_Init+0x178>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d004      	beq.n	80051c4 <HAL_UART_Init+0xd0>
 80051ba:	f240 1131 	movw	r1, #305	; 0x131
 80051be:	482c      	ldr	r0, [pc, #176]	; (8005270 <HAL_UART_Init+0x17c>)
 80051c0:	f7fc f961 	bl	8001486 <assert_failed>
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d106      	bne.n	80051da <HAL_UART_Init+0xe6>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2200      	movs	r2, #0
 80051d0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80051d4:	6878      	ldr	r0, [r7, #4]
 80051d6:	f7fc fc27 	bl	8001a28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2224      	movs	r2, #36	; 0x24
 80051de:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	681a      	ldr	r2, [r3, #0]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f022 0201 	bic.w	r2, r2, #1
 80051ee:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80051f0:	6878      	ldr	r0, [r7, #4]
 80051f2:	f000 fbb5 	bl	8005960 <UART_SetConfig>
 80051f6:	4603      	mov	r3, r0
 80051f8:	2b01      	cmp	r3, #1
 80051fa:	d101      	bne.n	8005200 <HAL_UART_Init+0x10c>
  {
    return HAL_ERROR;
 80051fc:	2301      	movs	r3, #1
 80051fe:	e022      	b.n	8005246 <HAL_UART_Init+0x152>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005204:	2b00      	cmp	r3, #0
 8005206:	d002      	beq.n	800520e <HAL_UART_Init+0x11a>
  {
    UART_AdvFeatureConfig(huart);
 8005208:	6878      	ldr	r0, [r7, #4]
 800520a:	f000 fe9f 	bl	8005f4c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	685a      	ldr	r2, [r3, #4]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800521c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	689a      	ldr	r2, [r3, #8]
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800522c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	681a      	ldr	r2, [r3, #0]
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f042 0201 	orr.w	r2, r2, #1
 800523c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800523e:	6878      	ldr	r0, [r7, #4]
 8005240:	f000 ffdc 	bl	80061fc <UART_CheckIdleState>
 8005244:	4603      	mov	r3, r0
}
 8005246:	4618      	mov	r0, r3
 8005248:	3708      	adds	r7, #8
 800524a:	46bd      	mov	sp, r7
 800524c:	bd80      	pop	{r7, pc}
 800524e:	bf00      	nop
 8005250:	40011000 	.word	0x40011000
 8005254:	40004400 	.word	0x40004400
 8005258:	40004800 	.word	0x40004800
 800525c:	40004c00 	.word	0x40004c00
 8005260:	40005000 	.word	0x40005000
 8005264:	40011400 	.word	0x40011400
 8005268:	40007800 	.word	0x40007800
 800526c:	40007c00 	.word	0x40007c00
 8005270:	08009578 	.word	0x08009578

08005274 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b08a      	sub	sp, #40	; 0x28
 8005278:	af02      	add	r7, sp, #8
 800527a:	60f8      	str	r0, [r7, #12]
 800527c:	60b9      	str	r1, [r7, #8]
 800527e:	603b      	str	r3, [r7, #0]
 8005280:	4613      	mov	r3, r2
 8005282:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005288:	2b20      	cmp	r3, #32
 800528a:	d171      	bne.n	8005370 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d002      	beq.n	8005298 <HAL_UART_Transmit+0x24>
 8005292:	88fb      	ldrh	r3, [r7, #6]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d101      	bne.n	800529c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005298:	2301      	movs	r3, #1
 800529a:	e06a      	b.n	8005372 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	2200      	movs	r2, #0
 80052a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	2221      	movs	r2, #33	; 0x21
 80052a8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80052aa:	f7fc fcc1 	bl	8001c30 <HAL_GetTick>
 80052ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	88fa      	ldrh	r2, [r7, #6]
 80052b4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	88fa      	ldrh	r2, [r7, #6]
 80052bc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	689b      	ldr	r3, [r3, #8]
 80052c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052c8:	d108      	bne.n	80052dc <HAL_UART_Transmit+0x68>
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	691b      	ldr	r3, [r3, #16]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d104      	bne.n	80052dc <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80052d2:	2300      	movs	r3, #0
 80052d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80052d6:	68bb      	ldr	r3, [r7, #8]
 80052d8:	61bb      	str	r3, [r7, #24]
 80052da:	e003      	b.n	80052e4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80052e0:	2300      	movs	r3, #0
 80052e2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80052e4:	e02c      	b.n	8005340 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	9300      	str	r3, [sp, #0]
 80052ea:	697b      	ldr	r3, [r7, #20]
 80052ec:	2200      	movs	r2, #0
 80052ee:	2180      	movs	r1, #128	; 0x80
 80052f0:	68f8      	ldr	r0, [r7, #12]
 80052f2:	f000 ffba 	bl	800626a <UART_WaitOnFlagUntilTimeout>
 80052f6:	4603      	mov	r3, r0
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d001      	beq.n	8005300 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 80052fc:	2303      	movs	r3, #3
 80052fe:	e038      	b.n	8005372 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8005300:	69fb      	ldr	r3, [r7, #28]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d10b      	bne.n	800531e <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005306:	69bb      	ldr	r3, [r7, #24]
 8005308:	881b      	ldrh	r3, [r3, #0]
 800530a:	461a      	mov	r2, r3
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005314:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005316:	69bb      	ldr	r3, [r7, #24]
 8005318:	3302      	adds	r3, #2
 800531a:	61bb      	str	r3, [r7, #24]
 800531c:	e007      	b.n	800532e <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800531e:	69fb      	ldr	r3, [r7, #28]
 8005320:	781a      	ldrb	r2, [r3, #0]
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005328:	69fb      	ldr	r3, [r7, #28]
 800532a:	3301      	adds	r3, #1
 800532c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005334:	b29b      	uxth	r3, r3
 8005336:	3b01      	subs	r3, #1
 8005338:	b29a      	uxth	r2, r3
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005346:	b29b      	uxth	r3, r3
 8005348:	2b00      	cmp	r3, #0
 800534a:	d1cc      	bne.n	80052e6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	9300      	str	r3, [sp, #0]
 8005350:	697b      	ldr	r3, [r7, #20]
 8005352:	2200      	movs	r2, #0
 8005354:	2140      	movs	r1, #64	; 0x40
 8005356:	68f8      	ldr	r0, [r7, #12]
 8005358:	f000 ff87 	bl	800626a <UART_WaitOnFlagUntilTimeout>
 800535c:	4603      	mov	r3, r0
 800535e:	2b00      	cmp	r3, #0
 8005360:	d001      	beq.n	8005366 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8005362:	2303      	movs	r3, #3
 8005364:	e005      	b.n	8005372 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	2220      	movs	r2, #32
 800536a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800536c:	2300      	movs	r3, #0
 800536e:	e000      	b.n	8005372 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8005370:	2302      	movs	r3, #2
  }
}
 8005372:	4618      	mov	r0, r3
 8005374:	3720      	adds	r7, #32
 8005376:	46bd      	mov	sp, r7
 8005378:	bd80      	pop	{r7, pc}
	...

0800537c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b0ba      	sub	sp, #232	; 0xe8
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	69db      	ldr	r3, [r3, #28]
 800538a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	689b      	ldr	r3, [r3, #8]
 800539e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80053a2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80053a6:	f640 030f 	movw	r3, #2063	; 0x80f
 80053aa:	4013      	ands	r3, r2
 80053ac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80053b0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d115      	bne.n	80053e4 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80053b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053bc:	f003 0320 	and.w	r3, r3, #32
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d00f      	beq.n	80053e4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80053c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053c8:	f003 0320 	and.w	r3, r3, #32
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d009      	beq.n	80053e4 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	f000 8297 	beq.w	8005908 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80053de:	6878      	ldr	r0, [r7, #4]
 80053e0:	4798      	blx	r3
      }
      return;
 80053e2:	e291      	b.n	8005908 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80053e4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	f000 8117 	beq.w	800561c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80053ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80053f2:	f003 0301 	and.w	r3, r3, #1
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d106      	bne.n	8005408 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80053fa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80053fe:	4b85      	ldr	r3, [pc, #532]	; (8005614 <HAL_UART_IRQHandler+0x298>)
 8005400:	4013      	ands	r3, r2
 8005402:	2b00      	cmp	r3, #0
 8005404:	f000 810a 	beq.w	800561c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005408:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800540c:	f003 0301 	and.w	r3, r3, #1
 8005410:	2b00      	cmp	r3, #0
 8005412:	d011      	beq.n	8005438 <HAL_UART_IRQHandler+0xbc>
 8005414:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005418:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800541c:	2b00      	cmp	r3, #0
 800541e:	d00b      	beq.n	8005438 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	2201      	movs	r2, #1
 8005426:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800542e:	f043 0201 	orr.w	r2, r3, #1
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005438:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800543c:	f003 0302 	and.w	r3, r3, #2
 8005440:	2b00      	cmp	r3, #0
 8005442:	d011      	beq.n	8005468 <HAL_UART_IRQHandler+0xec>
 8005444:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005448:	f003 0301 	and.w	r3, r3, #1
 800544c:	2b00      	cmp	r3, #0
 800544e:	d00b      	beq.n	8005468 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	2202      	movs	r2, #2
 8005456:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800545e:	f043 0204 	orr.w	r2, r3, #4
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005468:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800546c:	f003 0304 	and.w	r3, r3, #4
 8005470:	2b00      	cmp	r3, #0
 8005472:	d011      	beq.n	8005498 <HAL_UART_IRQHandler+0x11c>
 8005474:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005478:	f003 0301 	and.w	r3, r3, #1
 800547c:	2b00      	cmp	r3, #0
 800547e:	d00b      	beq.n	8005498 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	2204      	movs	r2, #4
 8005486:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800548e:	f043 0202 	orr.w	r2, r3, #2
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005498:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800549c:	f003 0308 	and.w	r3, r3, #8
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d017      	beq.n	80054d4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80054a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054a8:	f003 0320 	and.w	r3, r3, #32
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d105      	bne.n	80054bc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80054b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80054b4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d00b      	beq.n	80054d4 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	2208      	movs	r2, #8
 80054c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80054ca:	f043 0208 	orr.w	r2, r3, #8
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80054d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d012      	beq.n	8005506 <HAL_UART_IRQHandler+0x18a>
 80054e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054e4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d00c      	beq.n	8005506 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80054f4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80054fc:	f043 0220 	orr.w	r2, r3, #32
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800550c:	2b00      	cmp	r3, #0
 800550e:	f000 81fd 	beq.w	800590c <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005512:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005516:	f003 0320 	and.w	r3, r3, #32
 800551a:	2b00      	cmp	r3, #0
 800551c:	d00d      	beq.n	800553a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800551e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005522:	f003 0320 	and.w	r3, r3, #32
 8005526:	2b00      	cmp	r3, #0
 8005528:	d007      	beq.n	800553a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800552e:	2b00      	cmp	r3, #0
 8005530:	d003      	beq.n	800553a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005536:	6878      	ldr	r0, [r7, #4]
 8005538:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005540:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	689b      	ldr	r3, [r3, #8]
 800554a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800554e:	2b40      	cmp	r3, #64	; 0x40
 8005550:	d005      	beq.n	800555e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005552:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005556:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800555a:	2b00      	cmp	r3, #0
 800555c:	d04f      	beq.n	80055fe <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800555e:	6878      	ldr	r0, [r7, #4]
 8005560:	f000 ff49 	bl	80063f6 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	689b      	ldr	r3, [r3, #8]
 800556a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800556e:	2b40      	cmp	r3, #64	; 0x40
 8005570:	d141      	bne.n	80055f6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	3308      	adds	r3, #8
 8005578:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800557c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005580:	e853 3f00 	ldrex	r3, [r3]
 8005584:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005588:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800558c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005590:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	3308      	adds	r3, #8
 800559a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800559e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80055a2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055a6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80055aa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80055ae:	e841 2300 	strex	r3, r2, [r1]
 80055b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80055b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d1d9      	bne.n	8005572 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d013      	beq.n	80055ee <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055ca:	4a13      	ldr	r2, [pc, #76]	; (8005618 <HAL_UART_IRQHandler+0x29c>)
 80055cc:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055d2:	4618      	mov	r0, r3
 80055d4:	f7fc fd0c 	bl	8001ff0 <HAL_DMA_Abort_IT>
 80055d8:	4603      	mov	r3, r0
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d017      	beq.n	800560e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055e4:	687a      	ldr	r2, [r7, #4]
 80055e6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80055e8:	4610      	mov	r0, r2
 80055ea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055ec:	e00f      	b.n	800560e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80055ee:	6878      	ldr	r0, [r7, #4]
 80055f0:	f000 f9a0 	bl	8005934 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055f4:	e00b      	b.n	800560e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80055f6:	6878      	ldr	r0, [r7, #4]
 80055f8:	f000 f99c 	bl	8005934 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055fc:	e007      	b.n	800560e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80055fe:	6878      	ldr	r0, [r7, #4]
 8005600:	f000 f998 	bl	8005934 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2200      	movs	r2, #0
 8005608:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 800560c:	e17e      	b.n	800590c <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800560e:	bf00      	nop
    return;
 8005610:	e17c      	b.n	800590c <HAL_UART_IRQHandler+0x590>
 8005612:	bf00      	nop
 8005614:	04000120 	.word	0x04000120
 8005618:	080064bf 	.word	0x080064bf

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005620:	2b01      	cmp	r3, #1
 8005622:	f040 814c 	bne.w	80058be <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005626:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800562a:	f003 0310 	and.w	r3, r3, #16
 800562e:	2b00      	cmp	r3, #0
 8005630:	f000 8145 	beq.w	80058be <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005634:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005638:	f003 0310 	and.w	r3, r3, #16
 800563c:	2b00      	cmp	r3, #0
 800563e:	f000 813e 	beq.w	80058be <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	2210      	movs	r2, #16
 8005648:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	689b      	ldr	r3, [r3, #8]
 8005650:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005654:	2b40      	cmp	r3, #64	; 0x40
 8005656:	f040 80b6 	bne.w	80057c6 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	685b      	ldr	r3, [r3, #4]
 8005662:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005666:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800566a:	2b00      	cmp	r3, #0
 800566c:	f000 8150 	beq.w	8005910 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005676:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800567a:	429a      	cmp	r2, r3
 800567c:	f080 8148 	bcs.w	8005910 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005686:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800568e:	69db      	ldr	r3, [r3, #28]
 8005690:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005694:	f000 8086 	beq.w	80057a4 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80056a4:	e853 3f00 	ldrex	r3, [r3]
 80056a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80056ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80056b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80056b4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	461a      	mov	r2, r3
 80056be:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80056c2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80056c6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056ca:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80056ce:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80056d2:	e841 2300 	strex	r3, r2, [r1]
 80056d6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80056da:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d1da      	bne.n	8005698 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	3308      	adds	r3, #8
 80056e8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80056ec:	e853 3f00 	ldrex	r3, [r3]
 80056f0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80056f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80056f4:	f023 0301 	bic.w	r3, r3, #1
 80056f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	3308      	adds	r3, #8
 8005702:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005706:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800570a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800570c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800570e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005712:	e841 2300 	strex	r3, r2, [r1]
 8005716:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005718:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800571a:	2b00      	cmp	r3, #0
 800571c:	d1e1      	bne.n	80056e2 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	3308      	adds	r3, #8
 8005724:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005726:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005728:	e853 3f00 	ldrex	r3, [r3]
 800572c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800572e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005730:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005734:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	3308      	adds	r3, #8
 800573e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005742:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005744:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005746:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005748:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800574a:	e841 2300 	strex	r3, r2, [r1]
 800574e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005750:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005752:	2b00      	cmp	r3, #0
 8005754:	d1e3      	bne.n	800571e <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2220      	movs	r2, #32
 800575a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2200      	movs	r2, #0
 8005762:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800576a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800576c:	e853 3f00 	ldrex	r3, [r3]
 8005770:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005772:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005774:	f023 0310 	bic.w	r3, r3, #16
 8005778:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	461a      	mov	r2, r3
 8005782:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005786:	65bb      	str	r3, [r7, #88]	; 0x58
 8005788:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800578a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800578c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800578e:	e841 2300 	strex	r3, r2, [r1]
 8005792:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005794:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005796:	2b00      	cmp	r3, #0
 8005798:	d1e4      	bne.n	8005764 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800579e:	4618      	mov	r0, r3
 80057a0:	f7fc fbb6 	bl	8001f10 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2202      	movs	r2, #2
 80057a8:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80057b6:	b29b      	uxth	r3, r3
 80057b8:	1ad3      	subs	r3, r2, r3
 80057ba:	b29b      	uxth	r3, r3
 80057bc:	4619      	mov	r1, r3
 80057be:	6878      	ldr	r0, [r7, #4]
 80057c0:	f000 f8c2 	bl	8005948 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80057c4:	e0a4      	b.n	8005910 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80057d2:	b29b      	uxth	r3, r3
 80057d4:	1ad3      	subs	r3, r2, r3
 80057d6:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80057e0:	b29b      	uxth	r3, r3
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	f000 8096 	beq.w	8005914 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 80057e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	f000 8091 	beq.w	8005914 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057fa:	e853 3f00 	ldrex	r3, [r3]
 80057fe:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005800:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005802:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005806:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	461a      	mov	r2, r3
 8005810:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005814:	647b      	str	r3, [r7, #68]	; 0x44
 8005816:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005818:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800581a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800581c:	e841 2300 	strex	r3, r2, [r1]
 8005820:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005822:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005824:	2b00      	cmp	r3, #0
 8005826:	d1e4      	bne.n	80057f2 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	3308      	adds	r3, #8
 800582e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005832:	e853 3f00 	ldrex	r3, [r3]
 8005836:	623b      	str	r3, [r7, #32]
   return(result);
 8005838:	6a3b      	ldr	r3, [r7, #32]
 800583a:	f023 0301 	bic.w	r3, r3, #1
 800583e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	3308      	adds	r3, #8
 8005848:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800584c:	633a      	str	r2, [r7, #48]	; 0x30
 800584e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005850:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005852:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005854:	e841 2300 	strex	r3, r2, [r1]
 8005858:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800585a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800585c:	2b00      	cmp	r3, #0
 800585e:	d1e3      	bne.n	8005828 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2220      	movs	r2, #32
 8005864:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2200      	movs	r2, #0
 800586c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2200      	movs	r2, #0
 8005872:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	e853 3f00 	ldrex	r3, [r3]
 8005880:	60fb      	str	r3, [r7, #12]
   return(result);
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	f023 0310 	bic.w	r3, r3, #16
 8005888:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	461a      	mov	r2, r3
 8005892:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005896:	61fb      	str	r3, [r7, #28]
 8005898:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800589a:	69b9      	ldr	r1, [r7, #24]
 800589c:	69fa      	ldr	r2, [r7, #28]
 800589e:	e841 2300 	strex	r3, r2, [r1]
 80058a2:	617b      	str	r3, [r7, #20]
   return(result);
 80058a4:	697b      	ldr	r3, [r7, #20]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d1e4      	bne.n	8005874 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2202      	movs	r2, #2
 80058ae:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80058b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80058b4:	4619      	mov	r1, r3
 80058b6:	6878      	ldr	r0, [r7, #4]
 80058b8:	f000 f846 	bl	8005948 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80058bc:	e02a      	b.n	8005914 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80058be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d00e      	beq.n	80058e8 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80058ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d008      	beq.n	80058e8 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d01c      	beq.n	8005918 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80058e2:	6878      	ldr	r0, [r7, #4]
 80058e4:	4798      	blx	r3
    }
    return;
 80058e6:	e017      	b.n	8005918 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80058e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d012      	beq.n	800591a <HAL_UART_IRQHandler+0x59e>
 80058f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d00c      	beq.n	800591a <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8005900:	6878      	ldr	r0, [r7, #4]
 8005902:	f000 fdf2 	bl	80064ea <UART_EndTransmit_IT>
    return;
 8005906:	e008      	b.n	800591a <HAL_UART_IRQHandler+0x59e>
      return;
 8005908:	bf00      	nop
 800590a:	e006      	b.n	800591a <HAL_UART_IRQHandler+0x59e>
    return;
 800590c:	bf00      	nop
 800590e:	e004      	b.n	800591a <HAL_UART_IRQHandler+0x59e>
      return;
 8005910:	bf00      	nop
 8005912:	e002      	b.n	800591a <HAL_UART_IRQHandler+0x59e>
      return;
 8005914:	bf00      	nop
 8005916:	e000      	b.n	800591a <HAL_UART_IRQHandler+0x59e>
    return;
 8005918:	bf00      	nop
  }

}
 800591a:	37e8      	adds	r7, #232	; 0xe8
 800591c:	46bd      	mov	sp, r7
 800591e:	bd80      	pop	{r7, pc}

08005920 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005920:	b480      	push	{r7}
 8005922:	b083      	sub	sp, #12
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005928:	bf00      	nop
 800592a:	370c      	adds	r7, #12
 800592c:	46bd      	mov	sp, r7
 800592e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005932:	4770      	bx	lr

08005934 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005934:	b480      	push	{r7}
 8005936:	b083      	sub	sp, #12
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800593c:	bf00      	nop
 800593e:	370c      	adds	r7, #12
 8005940:	46bd      	mov	sp, r7
 8005942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005946:	4770      	bx	lr

08005948 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005948:	b480      	push	{r7}
 800594a:	b083      	sub	sp, #12
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
 8005950:	460b      	mov	r3, r1
 8005952:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005954:	bf00      	nop
 8005956:	370c      	adds	r7, #12
 8005958:	46bd      	mov	sp, r7
 800595a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595e:	4770      	bx	lr

08005960 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b088      	sub	sp, #32
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005968:	2300      	movs	r3, #0
 800596a:	77bb      	strb	r3, [r7, #30]
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	685b      	ldr	r3, [r3, #4]
 8005970:	4aa0      	ldr	r2, [pc, #640]	; (8005bf4 <UART_SetConfig+0x294>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d904      	bls.n	8005980 <UART_SetConfig+0x20>
 8005976:	f640 315d 	movw	r1, #2909	; 0xb5d
 800597a:	489f      	ldr	r0, [pc, #636]	; (8005bf8 <UART_SetConfig+0x298>)
 800597c:	f7fb fd83 	bl	8001486 <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	689b      	ldr	r3, [r3, #8]
 8005984:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005988:	d00d      	beq.n	80059a6 <UART_SetConfig+0x46>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	689b      	ldr	r3, [r3, #8]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d009      	beq.n	80059a6 <UART_SetConfig+0x46>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	689b      	ldr	r3, [r3, #8]
 8005996:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800599a:	d004      	beq.n	80059a6 <UART_SetConfig+0x46>
 800599c:	f640 315e 	movw	r1, #2910	; 0xb5e
 80059a0:	4895      	ldr	r0, [pc, #596]	; (8005bf8 <UART_SetConfig+0x298>)
 80059a2:	f7fb fd70 	bl	8001486 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	68db      	ldr	r3, [r3, #12]
 80059aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059ae:	d012      	beq.n	80059d6 <UART_SetConfig+0x76>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	68db      	ldr	r3, [r3, #12]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d00e      	beq.n	80059d6 <UART_SetConfig+0x76>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	68db      	ldr	r3, [r3, #12]
 80059bc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80059c0:	d009      	beq.n	80059d6 <UART_SetConfig+0x76>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	68db      	ldr	r3, [r3, #12]
 80059c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059ca:	d004      	beq.n	80059d6 <UART_SetConfig+0x76>
 80059cc:	f640 315f 	movw	r1, #2911	; 0xb5f
 80059d0:	4889      	ldr	r0, [pc, #548]	; (8005bf8 <UART_SetConfig+0x298>)
 80059d2:	f7fb fd58 	bl	8001486 <assert_failed>
  assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6a1b      	ldr	r3, [r3, #32]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d009      	beq.n	80059f2 <UART_SetConfig+0x92>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6a1b      	ldr	r3, [r3, #32]
 80059e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059e6:	d004      	beq.n	80059f2 <UART_SetConfig+0x92>
 80059e8:	f44f 6136 	mov.w	r1, #2912	; 0xb60
 80059ec:	4882      	ldr	r0, [pc, #520]	; (8005bf8 <UART_SetConfig+0x298>)
 80059ee:	f7fb fd4a 	bl	8001486 <assert_failed>

  assert_param(IS_UART_PARITY(huart->Init.Parity));
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	691b      	ldr	r3, [r3, #16]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d00e      	beq.n	8005a18 <UART_SetConfig+0xb8>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	691b      	ldr	r3, [r3, #16]
 80059fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a02:	d009      	beq.n	8005a18 <UART_SetConfig+0xb8>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	691b      	ldr	r3, [r3, #16]
 8005a08:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005a0c:	d004      	beq.n	8005a18 <UART_SetConfig+0xb8>
 8005a0e:	f640 3162 	movw	r1, #2914	; 0xb62
 8005a12:	4879      	ldr	r0, [pc, #484]	; (8005bf8 <UART_SetConfig+0x298>)
 8005a14:	f7fb fd37 	bl	8001486 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	695b      	ldr	r3, [r3, #20]
 8005a1c:	f023 030c 	bic.w	r3, r3, #12
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d103      	bne.n	8005a2c <UART_SetConfig+0xcc>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	695b      	ldr	r3, [r3, #20]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d104      	bne.n	8005a36 <UART_SetConfig+0xd6>
 8005a2c:	f640 3163 	movw	r1, #2915	; 0xb63
 8005a30:	4871      	ldr	r0, [pc, #452]	; (8005bf8 <UART_SetConfig+0x298>)
 8005a32:	f7fb fd28 	bl	8001486 <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	699b      	ldr	r3, [r3, #24]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d013      	beq.n	8005a66 <UART_SetConfig+0x106>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	699b      	ldr	r3, [r3, #24]
 8005a42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a46:	d00e      	beq.n	8005a66 <UART_SetConfig+0x106>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	699b      	ldr	r3, [r3, #24]
 8005a4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a50:	d009      	beq.n	8005a66 <UART_SetConfig+0x106>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	699b      	ldr	r3, [r3, #24]
 8005a56:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a5a:	d004      	beq.n	8005a66 <UART_SetConfig+0x106>
 8005a5c:	f640 3164 	movw	r1, #2916	; 0xb64
 8005a60:	4865      	ldr	r0, [pc, #404]	; (8005bf8 <UART_SetConfig+0x298>)
 8005a62:	f7fb fd10 	bl	8001486 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	69db      	ldr	r3, [r3, #28]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d009      	beq.n	8005a82 <UART_SetConfig+0x122>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	69db      	ldr	r3, [r3, #28]
 8005a72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a76:	d004      	beq.n	8005a82 <UART_SetConfig+0x122>
 8005a78:	f640 3165 	movw	r1, #2917	; 0xb65
 8005a7c:	485e      	ldr	r0, [pc, #376]	; (8005bf8 <UART_SetConfig+0x298>)
 8005a7e:	f7fb fd02 	bl	8001486 <assert_failed>
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	689a      	ldr	r2, [r3, #8]
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	691b      	ldr	r3, [r3, #16]
 8005a8a:	431a      	orrs	r2, r3
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	695b      	ldr	r3, [r3, #20]
 8005a90:	431a      	orrs	r2, r3
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	69db      	ldr	r3, [r3, #28]
 8005a96:	4313      	orrs	r3, r2
 8005a98:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	681a      	ldr	r2, [r3, #0]
 8005aa0:	4b56      	ldr	r3, [pc, #344]	; (8005bfc <UART_SetConfig+0x29c>)
 8005aa2:	4013      	ands	r3, r2
 8005aa4:	687a      	ldr	r2, [r7, #4]
 8005aa6:	6812      	ldr	r2, [r2, #0]
 8005aa8:	6979      	ldr	r1, [r7, #20]
 8005aaa:	430b      	orrs	r3, r1
 8005aac:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	685b      	ldr	r3, [r3, #4]
 8005ab4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	68da      	ldr	r2, [r3, #12]
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	430a      	orrs	r2, r1
 8005ac2:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	699b      	ldr	r3, [r3, #24]
 8005ac8:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6a1b      	ldr	r3, [r3, #32]
 8005ace:	697a      	ldr	r2, [r7, #20]
 8005ad0:	4313      	orrs	r3, r2
 8005ad2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	689b      	ldr	r3, [r3, #8]
 8005ada:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	697a      	ldr	r2, [r7, #20]
 8005ae4:	430a      	orrs	r2, r1
 8005ae6:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	4a44      	ldr	r2, [pc, #272]	; (8005c00 <UART_SetConfig+0x2a0>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d121      	bne.n	8005b36 <UART_SetConfig+0x1d6>
 8005af2:	4b44      	ldr	r3, [pc, #272]	; (8005c04 <UART_SetConfig+0x2a4>)
 8005af4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005af8:	f003 0303 	and.w	r3, r3, #3
 8005afc:	2b03      	cmp	r3, #3
 8005afe:	d817      	bhi.n	8005b30 <UART_SetConfig+0x1d0>
 8005b00:	a201      	add	r2, pc, #4	; (adr r2, 8005b08 <UART_SetConfig+0x1a8>)
 8005b02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b06:	bf00      	nop
 8005b08:	08005b19 	.word	0x08005b19
 8005b0c:	08005b25 	.word	0x08005b25
 8005b10:	08005b1f 	.word	0x08005b1f
 8005b14:	08005b2b 	.word	0x08005b2b
 8005b18:	2301      	movs	r3, #1
 8005b1a:	77fb      	strb	r3, [r7, #31]
 8005b1c:	e14c      	b.n	8005db8 <UART_SetConfig+0x458>
 8005b1e:	2302      	movs	r3, #2
 8005b20:	77fb      	strb	r3, [r7, #31]
 8005b22:	e149      	b.n	8005db8 <UART_SetConfig+0x458>
 8005b24:	2304      	movs	r3, #4
 8005b26:	77fb      	strb	r3, [r7, #31]
 8005b28:	e146      	b.n	8005db8 <UART_SetConfig+0x458>
 8005b2a:	2308      	movs	r3, #8
 8005b2c:	77fb      	strb	r3, [r7, #31]
 8005b2e:	e143      	b.n	8005db8 <UART_SetConfig+0x458>
 8005b30:	2310      	movs	r3, #16
 8005b32:	77fb      	strb	r3, [r7, #31]
 8005b34:	e140      	b.n	8005db8 <UART_SetConfig+0x458>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	4a33      	ldr	r2, [pc, #204]	; (8005c08 <UART_SetConfig+0x2a8>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d132      	bne.n	8005ba6 <UART_SetConfig+0x246>
 8005b40:	4b30      	ldr	r3, [pc, #192]	; (8005c04 <UART_SetConfig+0x2a4>)
 8005b42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b46:	f003 030c 	and.w	r3, r3, #12
 8005b4a:	2b0c      	cmp	r3, #12
 8005b4c:	d828      	bhi.n	8005ba0 <UART_SetConfig+0x240>
 8005b4e:	a201      	add	r2, pc, #4	; (adr r2, 8005b54 <UART_SetConfig+0x1f4>)
 8005b50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b54:	08005b89 	.word	0x08005b89
 8005b58:	08005ba1 	.word	0x08005ba1
 8005b5c:	08005ba1 	.word	0x08005ba1
 8005b60:	08005ba1 	.word	0x08005ba1
 8005b64:	08005b95 	.word	0x08005b95
 8005b68:	08005ba1 	.word	0x08005ba1
 8005b6c:	08005ba1 	.word	0x08005ba1
 8005b70:	08005ba1 	.word	0x08005ba1
 8005b74:	08005b8f 	.word	0x08005b8f
 8005b78:	08005ba1 	.word	0x08005ba1
 8005b7c:	08005ba1 	.word	0x08005ba1
 8005b80:	08005ba1 	.word	0x08005ba1
 8005b84:	08005b9b 	.word	0x08005b9b
 8005b88:	2300      	movs	r3, #0
 8005b8a:	77fb      	strb	r3, [r7, #31]
 8005b8c:	e114      	b.n	8005db8 <UART_SetConfig+0x458>
 8005b8e:	2302      	movs	r3, #2
 8005b90:	77fb      	strb	r3, [r7, #31]
 8005b92:	e111      	b.n	8005db8 <UART_SetConfig+0x458>
 8005b94:	2304      	movs	r3, #4
 8005b96:	77fb      	strb	r3, [r7, #31]
 8005b98:	e10e      	b.n	8005db8 <UART_SetConfig+0x458>
 8005b9a:	2308      	movs	r3, #8
 8005b9c:	77fb      	strb	r3, [r7, #31]
 8005b9e:	e10b      	b.n	8005db8 <UART_SetConfig+0x458>
 8005ba0:	2310      	movs	r3, #16
 8005ba2:	77fb      	strb	r3, [r7, #31]
 8005ba4:	e108      	b.n	8005db8 <UART_SetConfig+0x458>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4a18      	ldr	r2, [pc, #96]	; (8005c0c <UART_SetConfig+0x2ac>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d12f      	bne.n	8005c10 <UART_SetConfig+0x2b0>
 8005bb0:	4b14      	ldr	r3, [pc, #80]	; (8005c04 <UART_SetConfig+0x2a4>)
 8005bb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bb6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005bba:	2b30      	cmp	r3, #48	; 0x30
 8005bbc:	d013      	beq.n	8005be6 <UART_SetConfig+0x286>
 8005bbe:	2b30      	cmp	r3, #48	; 0x30
 8005bc0:	d814      	bhi.n	8005bec <UART_SetConfig+0x28c>
 8005bc2:	2b20      	cmp	r3, #32
 8005bc4:	d009      	beq.n	8005bda <UART_SetConfig+0x27a>
 8005bc6:	2b20      	cmp	r3, #32
 8005bc8:	d810      	bhi.n	8005bec <UART_SetConfig+0x28c>
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d002      	beq.n	8005bd4 <UART_SetConfig+0x274>
 8005bce:	2b10      	cmp	r3, #16
 8005bd0:	d006      	beq.n	8005be0 <UART_SetConfig+0x280>
 8005bd2:	e00b      	b.n	8005bec <UART_SetConfig+0x28c>
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	77fb      	strb	r3, [r7, #31]
 8005bd8:	e0ee      	b.n	8005db8 <UART_SetConfig+0x458>
 8005bda:	2302      	movs	r3, #2
 8005bdc:	77fb      	strb	r3, [r7, #31]
 8005bde:	e0eb      	b.n	8005db8 <UART_SetConfig+0x458>
 8005be0:	2304      	movs	r3, #4
 8005be2:	77fb      	strb	r3, [r7, #31]
 8005be4:	e0e8      	b.n	8005db8 <UART_SetConfig+0x458>
 8005be6:	2308      	movs	r3, #8
 8005be8:	77fb      	strb	r3, [r7, #31]
 8005bea:	e0e5      	b.n	8005db8 <UART_SetConfig+0x458>
 8005bec:	2310      	movs	r3, #16
 8005bee:	77fb      	strb	r3, [r7, #31]
 8005bf0:	e0e2      	b.n	8005db8 <UART_SetConfig+0x458>
 8005bf2:	bf00      	nop
 8005bf4:	019bfcc0 	.word	0x019bfcc0
 8005bf8:	08009578 	.word	0x08009578
 8005bfc:	efff69f3 	.word	0xefff69f3
 8005c00:	40011000 	.word	0x40011000
 8005c04:	40023800 	.word	0x40023800
 8005c08:	40004400 	.word	0x40004400
 8005c0c:	40004800 	.word	0x40004800
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	4aa5      	ldr	r2, [pc, #660]	; (8005eac <UART_SetConfig+0x54c>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d120      	bne.n	8005c5c <UART_SetConfig+0x2fc>
 8005c1a:	4ba5      	ldr	r3, [pc, #660]	; (8005eb0 <UART_SetConfig+0x550>)
 8005c1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c20:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005c24:	2bc0      	cmp	r3, #192	; 0xc0
 8005c26:	d013      	beq.n	8005c50 <UART_SetConfig+0x2f0>
 8005c28:	2bc0      	cmp	r3, #192	; 0xc0
 8005c2a:	d814      	bhi.n	8005c56 <UART_SetConfig+0x2f6>
 8005c2c:	2b80      	cmp	r3, #128	; 0x80
 8005c2e:	d009      	beq.n	8005c44 <UART_SetConfig+0x2e4>
 8005c30:	2b80      	cmp	r3, #128	; 0x80
 8005c32:	d810      	bhi.n	8005c56 <UART_SetConfig+0x2f6>
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d002      	beq.n	8005c3e <UART_SetConfig+0x2de>
 8005c38:	2b40      	cmp	r3, #64	; 0x40
 8005c3a:	d006      	beq.n	8005c4a <UART_SetConfig+0x2ea>
 8005c3c:	e00b      	b.n	8005c56 <UART_SetConfig+0x2f6>
 8005c3e:	2300      	movs	r3, #0
 8005c40:	77fb      	strb	r3, [r7, #31]
 8005c42:	e0b9      	b.n	8005db8 <UART_SetConfig+0x458>
 8005c44:	2302      	movs	r3, #2
 8005c46:	77fb      	strb	r3, [r7, #31]
 8005c48:	e0b6      	b.n	8005db8 <UART_SetConfig+0x458>
 8005c4a:	2304      	movs	r3, #4
 8005c4c:	77fb      	strb	r3, [r7, #31]
 8005c4e:	e0b3      	b.n	8005db8 <UART_SetConfig+0x458>
 8005c50:	2308      	movs	r3, #8
 8005c52:	77fb      	strb	r3, [r7, #31]
 8005c54:	e0b0      	b.n	8005db8 <UART_SetConfig+0x458>
 8005c56:	2310      	movs	r3, #16
 8005c58:	77fb      	strb	r3, [r7, #31]
 8005c5a:	e0ad      	b.n	8005db8 <UART_SetConfig+0x458>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4a94      	ldr	r2, [pc, #592]	; (8005eb4 <UART_SetConfig+0x554>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d125      	bne.n	8005cb2 <UART_SetConfig+0x352>
 8005c66:	4b92      	ldr	r3, [pc, #584]	; (8005eb0 <UART_SetConfig+0x550>)
 8005c68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c6c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c70:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c74:	d017      	beq.n	8005ca6 <UART_SetConfig+0x346>
 8005c76:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c7a:	d817      	bhi.n	8005cac <UART_SetConfig+0x34c>
 8005c7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c80:	d00b      	beq.n	8005c9a <UART_SetConfig+0x33a>
 8005c82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c86:	d811      	bhi.n	8005cac <UART_SetConfig+0x34c>
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d003      	beq.n	8005c94 <UART_SetConfig+0x334>
 8005c8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c90:	d006      	beq.n	8005ca0 <UART_SetConfig+0x340>
 8005c92:	e00b      	b.n	8005cac <UART_SetConfig+0x34c>
 8005c94:	2300      	movs	r3, #0
 8005c96:	77fb      	strb	r3, [r7, #31]
 8005c98:	e08e      	b.n	8005db8 <UART_SetConfig+0x458>
 8005c9a:	2302      	movs	r3, #2
 8005c9c:	77fb      	strb	r3, [r7, #31]
 8005c9e:	e08b      	b.n	8005db8 <UART_SetConfig+0x458>
 8005ca0:	2304      	movs	r3, #4
 8005ca2:	77fb      	strb	r3, [r7, #31]
 8005ca4:	e088      	b.n	8005db8 <UART_SetConfig+0x458>
 8005ca6:	2308      	movs	r3, #8
 8005ca8:	77fb      	strb	r3, [r7, #31]
 8005caa:	e085      	b.n	8005db8 <UART_SetConfig+0x458>
 8005cac:	2310      	movs	r3, #16
 8005cae:	77fb      	strb	r3, [r7, #31]
 8005cb0:	e082      	b.n	8005db8 <UART_SetConfig+0x458>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4a80      	ldr	r2, [pc, #512]	; (8005eb8 <UART_SetConfig+0x558>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d125      	bne.n	8005d08 <UART_SetConfig+0x3a8>
 8005cbc:	4b7c      	ldr	r3, [pc, #496]	; (8005eb0 <UART_SetConfig+0x550>)
 8005cbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cc2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005cc6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005cca:	d017      	beq.n	8005cfc <UART_SetConfig+0x39c>
 8005ccc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005cd0:	d817      	bhi.n	8005d02 <UART_SetConfig+0x3a2>
 8005cd2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005cd6:	d00b      	beq.n	8005cf0 <UART_SetConfig+0x390>
 8005cd8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005cdc:	d811      	bhi.n	8005d02 <UART_SetConfig+0x3a2>
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d003      	beq.n	8005cea <UART_SetConfig+0x38a>
 8005ce2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ce6:	d006      	beq.n	8005cf6 <UART_SetConfig+0x396>
 8005ce8:	e00b      	b.n	8005d02 <UART_SetConfig+0x3a2>
 8005cea:	2301      	movs	r3, #1
 8005cec:	77fb      	strb	r3, [r7, #31]
 8005cee:	e063      	b.n	8005db8 <UART_SetConfig+0x458>
 8005cf0:	2302      	movs	r3, #2
 8005cf2:	77fb      	strb	r3, [r7, #31]
 8005cf4:	e060      	b.n	8005db8 <UART_SetConfig+0x458>
 8005cf6:	2304      	movs	r3, #4
 8005cf8:	77fb      	strb	r3, [r7, #31]
 8005cfa:	e05d      	b.n	8005db8 <UART_SetConfig+0x458>
 8005cfc:	2308      	movs	r3, #8
 8005cfe:	77fb      	strb	r3, [r7, #31]
 8005d00:	e05a      	b.n	8005db8 <UART_SetConfig+0x458>
 8005d02:	2310      	movs	r3, #16
 8005d04:	77fb      	strb	r3, [r7, #31]
 8005d06:	e057      	b.n	8005db8 <UART_SetConfig+0x458>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	4a6b      	ldr	r2, [pc, #428]	; (8005ebc <UART_SetConfig+0x55c>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d125      	bne.n	8005d5e <UART_SetConfig+0x3fe>
 8005d12:	4b67      	ldr	r3, [pc, #412]	; (8005eb0 <UART_SetConfig+0x550>)
 8005d14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d18:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005d1c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005d20:	d017      	beq.n	8005d52 <UART_SetConfig+0x3f2>
 8005d22:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005d26:	d817      	bhi.n	8005d58 <UART_SetConfig+0x3f8>
 8005d28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d2c:	d00b      	beq.n	8005d46 <UART_SetConfig+0x3e6>
 8005d2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d32:	d811      	bhi.n	8005d58 <UART_SetConfig+0x3f8>
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d003      	beq.n	8005d40 <UART_SetConfig+0x3e0>
 8005d38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d3c:	d006      	beq.n	8005d4c <UART_SetConfig+0x3ec>
 8005d3e:	e00b      	b.n	8005d58 <UART_SetConfig+0x3f8>
 8005d40:	2300      	movs	r3, #0
 8005d42:	77fb      	strb	r3, [r7, #31]
 8005d44:	e038      	b.n	8005db8 <UART_SetConfig+0x458>
 8005d46:	2302      	movs	r3, #2
 8005d48:	77fb      	strb	r3, [r7, #31]
 8005d4a:	e035      	b.n	8005db8 <UART_SetConfig+0x458>
 8005d4c:	2304      	movs	r3, #4
 8005d4e:	77fb      	strb	r3, [r7, #31]
 8005d50:	e032      	b.n	8005db8 <UART_SetConfig+0x458>
 8005d52:	2308      	movs	r3, #8
 8005d54:	77fb      	strb	r3, [r7, #31]
 8005d56:	e02f      	b.n	8005db8 <UART_SetConfig+0x458>
 8005d58:	2310      	movs	r3, #16
 8005d5a:	77fb      	strb	r3, [r7, #31]
 8005d5c:	e02c      	b.n	8005db8 <UART_SetConfig+0x458>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	4a57      	ldr	r2, [pc, #348]	; (8005ec0 <UART_SetConfig+0x560>)
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d125      	bne.n	8005db4 <UART_SetConfig+0x454>
 8005d68:	4b51      	ldr	r3, [pc, #324]	; (8005eb0 <UART_SetConfig+0x550>)
 8005d6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d6e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005d72:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005d76:	d017      	beq.n	8005da8 <UART_SetConfig+0x448>
 8005d78:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005d7c:	d817      	bhi.n	8005dae <UART_SetConfig+0x44e>
 8005d7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d82:	d00b      	beq.n	8005d9c <UART_SetConfig+0x43c>
 8005d84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d88:	d811      	bhi.n	8005dae <UART_SetConfig+0x44e>
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d003      	beq.n	8005d96 <UART_SetConfig+0x436>
 8005d8e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005d92:	d006      	beq.n	8005da2 <UART_SetConfig+0x442>
 8005d94:	e00b      	b.n	8005dae <UART_SetConfig+0x44e>
 8005d96:	2300      	movs	r3, #0
 8005d98:	77fb      	strb	r3, [r7, #31]
 8005d9a:	e00d      	b.n	8005db8 <UART_SetConfig+0x458>
 8005d9c:	2302      	movs	r3, #2
 8005d9e:	77fb      	strb	r3, [r7, #31]
 8005da0:	e00a      	b.n	8005db8 <UART_SetConfig+0x458>
 8005da2:	2304      	movs	r3, #4
 8005da4:	77fb      	strb	r3, [r7, #31]
 8005da6:	e007      	b.n	8005db8 <UART_SetConfig+0x458>
 8005da8:	2308      	movs	r3, #8
 8005daa:	77fb      	strb	r3, [r7, #31]
 8005dac:	e004      	b.n	8005db8 <UART_SetConfig+0x458>
 8005dae:	2310      	movs	r3, #16
 8005db0:	77fb      	strb	r3, [r7, #31]
 8005db2:	e001      	b.n	8005db8 <UART_SetConfig+0x458>
 8005db4:	2310      	movs	r3, #16
 8005db6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	69db      	ldr	r3, [r3, #28]
 8005dbc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005dc0:	d15c      	bne.n	8005e7c <UART_SetConfig+0x51c>
  {
    switch (clocksource)
 8005dc2:	7ffb      	ldrb	r3, [r7, #31]
 8005dc4:	2b08      	cmp	r3, #8
 8005dc6:	d828      	bhi.n	8005e1a <UART_SetConfig+0x4ba>
 8005dc8:	a201      	add	r2, pc, #4	; (adr r2, 8005dd0 <UART_SetConfig+0x470>)
 8005dca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dce:	bf00      	nop
 8005dd0:	08005df5 	.word	0x08005df5
 8005dd4:	08005dfd 	.word	0x08005dfd
 8005dd8:	08005e05 	.word	0x08005e05
 8005ddc:	08005e1b 	.word	0x08005e1b
 8005de0:	08005e0b 	.word	0x08005e0b
 8005de4:	08005e1b 	.word	0x08005e1b
 8005de8:	08005e1b 	.word	0x08005e1b
 8005dec:	08005e1b 	.word	0x08005e1b
 8005df0:	08005e13 	.word	0x08005e13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005df4:	f7fd fcea 	bl	80037cc <HAL_RCC_GetPCLK1Freq>
 8005df8:	61b8      	str	r0, [r7, #24]
        break;
 8005dfa:	e013      	b.n	8005e24 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005dfc:	f7fd fcfa 	bl	80037f4 <HAL_RCC_GetPCLK2Freq>
 8005e00:	61b8      	str	r0, [r7, #24]
        break;
 8005e02:	e00f      	b.n	8005e24 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e04:	4b2f      	ldr	r3, [pc, #188]	; (8005ec4 <UART_SetConfig+0x564>)
 8005e06:	61bb      	str	r3, [r7, #24]
        break;
 8005e08:	e00c      	b.n	8005e24 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e0a:	f7fd fc0d 	bl	8003628 <HAL_RCC_GetSysClockFreq>
 8005e0e:	61b8      	str	r0, [r7, #24]
        break;
 8005e10:	e008      	b.n	8005e24 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e16:	61bb      	str	r3, [r7, #24]
        break;
 8005e18:	e004      	b.n	8005e24 <UART_SetConfig+0x4c4>
      default:
        pclk = 0U;
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005e1e:	2301      	movs	r3, #1
 8005e20:	77bb      	strb	r3, [r7, #30]
        break;
 8005e22:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005e24:	69bb      	ldr	r3, [r7, #24]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	f000 8082 	beq.w	8005f30 <UART_SetConfig+0x5d0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005e2c:	69bb      	ldr	r3, [r7, #24]
 8005e2e:	005a      	lsls	r2, r3, #1
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	685b      	ldr	r3, [r3, #4]
 8005e34:	085b      	lsrs	r3, r3, #1
 8005e36:	441a      	add	r2, r3
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	685b      	ldr	r3, [r3, #4]
 8005e3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e40:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e42:	693b      	ldr	r3, [r7, #16]
 8005e44:	2b0f      	cmp	r3, #15
 8005e46:	d916      	bls.n	8005e76 <UART_SetConfig+0x516>
 8005e48:	693b      	ldr	r3, [r7, #16]
 8005e4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e4e:	d212      	bcs.n	8005e76 <UART_SetConfig+0x516>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005e50:	693b      	ldr	r3, [r7, #16]
 8005e52:	b29b      	uxth	r3, r3
 8005e54:	f023 030f 	bic.w	r3, r3, #15
 8005e58:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005e5a:	693b      	ldr	r3, [r7, #16]
 8005e5c:	085b      	lsrs	r3, r3, #1
 8005e5e:	b29b      	uxth	r3, r3
 8005e60:	f003 0307 	and.w	r3, r3, #7
 8005e64:	b29a      	uxth	r2, r3
 8005e66:	89fb      	ldrh	r3, [r7, #14]
 8005e68:	4313      	orrs	r3, r2
 8005e6a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	89fa      	ldrh	r2, [r7, #14]
 8005e72:	60da      	str	r2, [r3, #12]
 8005e74:	e05c      	b.n	8005f30 <UART_SetConfig+0x5d0>
      }
      else
      {
        ret = HAL_ERROR;
 8005e76:	2301      	movs	r3, #1
 8005e78:	77bb      	strb	r3, [r7, #30]
 8005e7a:	e059      	b.n	8005f30 <UART_SetConfig+0x5d0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005e7c:	7ffb      	ldrb	r3, [r7, #31]
 8005e7e:	2b08      	cmp	r3, #8
 8005e80:	d835      	bhi.n	8005eee <UART_SetConfig+0x58e>
 8005e82:	a201      	add	r2, pc, #4	; (adr r2, 8005e88 <UART_SetConfig+0x528>)
 8005e84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e88:	08005ec9 	.word	0x08005ec9
 8005e8c:	08005ed1 	.word	0x08005ed1
 8005e90:	08005ed9 	.word	0x08005ed9
 8005e94:	08005eef 	.word	0x08005eef
 8005e98:	08005edf 	.word	0x08005edf
 8005e9c:	08005eef 	.word	0x08005eef
 8005ea0:	08005eef 	.word	0x08005eef
 8005ea4:	08005eef 	.word	0x08005eef
 8005ea8:	08005ee7 	.word	0x08005ee7
 8005eac:	40004c00 	.word	0x40004c00
 8005eb0:	40023800 	.word	0x40023800
 8005eb4:	40005000 	.word	0x40005000
 8005eb8:	40011400 	.word	0x40011400
 8005ebc:	40007800 	.word	0x40007800
 8005ec0:	40007c00 	.word	0x40007c00
 8005ec4:	00f42400 	.word	0x00f42400
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ec8:	f7fd fc80 	bl	80037cc <HAL_RCC_GetPCLK1Freq>
 8005ecc:	61b8      	str	r0, [r7, #24]
        break;
 8005ece:	e013      	b.n	8005ef8 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ed0:	f7fd fc90 	bl	80037f4 <HAL_RCC_GetPCLK2Freq>
 8005ed4:	61b8      	str	r0, [r7, #24]
        break;
 8005ed6:	e00f      	b.n	8005ef8 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ed8:	4b1b      	ldr	r3, [pc, #108]	; (8005f48 <UART_SetConfig+0x5e8>)
 8005eda:	61bb      	str	r3, [r7, #24]
        break;
 8005edc:	e00c      	b.n	8005ef8 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ede:	f7fd fba3 	bl	8003628 <HAL_RCC_GetSysClockFreq>
 8005ee2:	61b8      	str	r0, [r7, #24]
        break;
 8005ee4:	e008      	b.n	8005ef8 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ee6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005eea:	61bb      	str	r3, [r7, #24]
        break;
 8005eec:	e004      	b.n	8005ef8 <UART_SetConfig+0x598>
      default:
        pclk = 0U;
 8005eee:	2300      	movs	r3, #0
 8005ef0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	77bb      	strb	r3, [r7, #30]
        break;
 8005ef6:	bf00      	nop
    }

    if (pclk != 0U)
 8005ef8:	69bb      	ldr	r3, [r7, #24]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d018      	beq.n	8005f30 <UART_SetConfig+0x5d0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	085a      	lsrs	r2, r3, #1
 8005f04:	69bb      	ldr	r3, [r7, #24]
 8005f06:	441a      	add	r2, r3
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	685b      	ldr	r3, [r3, #4]
 8005f0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f10:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f12:	693b      	ldr	r3, [r7, #16]
 8005f14:	2b0f      	cmp	r3, #15
 8005f16:	d909      	bls.n	8005f2c <UART_SetConfig+0x5cc>
 8005f18:	693b      	ldr	r3, [r7, #16]
 8005f1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f1e:	d205      	bcs.n	8005f2c <UART_SetConfig+0x5cc>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005f20:	693b      	ldr	r3, [r7, #16]
 8005f22:	b29a      	uxth	r2, r3
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	60da      	str	r2, [r3, #12]
 8005f2a:	e001      	b.n	8005f30 <UART_SetConfig+0x5d0>
      }
      else
      {
        ret = HAL_ERROR;
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2200      	movs	r2, #0
 8005f34:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2200      	movs	r2, #0
 8005f3a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005f3c:	7fbb      	ldrb	r3, [r7, #30]
}
 8005f3e:	4618      	mov	r0, r3
 8005f40:	3720      	adds	r7, #32
 8005f42:	46bd      	mov	sp, r7
 8005f44:	bd80      	pop	{r7, pc}
 8005f46:	bf00      	nop
 8005f48:	00f42400 	.word	0x00f42400

08005f4c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b082      	sub	sp, #8
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f58:	2bff      	cmp	r3, #255	; 0xff
 8005f5a:	d904      	bls.n	8005f66 <UART_AdvFeatureConfig+0x1a>
 8005f5c:	f640 31e6 	movw	r1, #3046	; 0xbe6
 8005f60:	488e      	ldr	r0, [pc, #568]	; (800619c <UART_AdvFeatureConfig+0x250>)
 8005f62:	f7fb fa90 	bl	8001486 <assert_failed>

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f6a:	f003 0301 	and.w	r3, r3, #1
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d018      	beq.n	8005fa4 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d009      	beq.n	8005f8e <UART_AdvFeatureConfig+0x42>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f7e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005f82:	d004      	beq.n	8005f8e <UART_AdvFeatureConfig+0x42>
 8005f84:	f640 31eb 	movw	r1, #3051	; 0xbeb
 8005f88:	4884      	ldr	r0, [pc, #528]	; (800619c <UART_AdvFeatureConfig+0x250>)
 8005f8a:	f7fb fa7c 	bl	8001486 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	685b      	ldr	r3, [r3, #4]
 8005f94:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	430a      	orrs	r2, r1
 8005fa2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fa8:	f003 0302 	and.w	r3, r3, #2
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d018      	beq.n	8005fe2 <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d009      	beq.n	8005fcc <UART_AdvFeatureConfig+0x80>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fc0:	d004      	beq.n	8005fcc <UART_AdvFeatureConfig+0x80>
 8005fc2:	f640 31f2 	movw	r1, #3058	; 0xbf2
 8005fc6:	4875      	ldr	r0, [pc, #468]	; (800619c <UART_AdvFeatureConfig+0x250>)
 8005fc8:	f7fb fa5d 	bl	8001486 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	685b      	ldr	r3, [r3, #4]
 8005fd2:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	430a      	orrs	r2, r1
 8005fe0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fe6:	f003 0304 	and.w	r3, r3, #4
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d018      	beq.n	8006020 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d009      	beq.n	800600a <UART_AdvFeatureConfig+0xbe>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ffa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005ffe:	d004      	beq.n	800600a <UART_AdvFeatureConfig+0xbe>
 8006000:	f640 31f9 	movw	r1, #3065	; 0xbf9
 8006004:	4865      	ldr	r0, [pc, #404]	; (800619c <UART_AdvFeatureConfig+0x250>)
 8006006:	f7fb fa3e 	bl	8001486 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	685b      	ldr	r3, [r3, #4]
 8006010:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	430a      	orrs	r2, r1
 800601e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006024:	f003 0308 	and.w	r3, r3, #8
 8006028:	2b00      	cmp	r3, #0
 800602a:	d018      	beq.n	800605e <UART_AdvFeatureConfig+0x112>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006030:	2b00      	cmp	r3, #0
 8006032:	d009      	beq.n	8006048 <UART_AdvFeatureConfig+0xfc>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006038:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800603c:	d004      	beq.n	8006048 <UART_AdvFeatureConfig+0xfc>
 800603e:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8006042:	4856      	ldr	r0, [pc, #344]	; (800619c <UART_AdvFeatureConfig+0x250>)
 8006044:	f7fb fa1f 	bl	8001486 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	685b      	ldr	r3, [r3, #4]
 800604e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	430a      	orrs	r2, r1
 800605c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006062:	f003 0310 	and.w	r3, r3, #16
 8006066:	2b00      	cmp	r3, #0
 8006068:	d018      	beq.n	800609c <UART_AdvFeatureConfig+0x150>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800606e:	2b00      	cmp	r3, #0
 8006070:	d009      	beq.n	8006086 <UART_AdvFeatureConfig+0x13a>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006076:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800607a:	d004      	beq.n	8006086 <UART_AdvFeatureConfig+0x13a>
 800607c:	f640 4107 	movw	r1, #3079	; 0xc07
 8006080:	4846      	ldr	r0, [pc, #280]	; (800619c <UART_AdvFeatureConfig+0x250>)
 8006082:	f7fb fa00 	bl	8001486 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	689b      	ldr	r3, [r3, #8]
 800608c:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	430a      	orrs	r2, r1
 800609a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060a0:	f003 0320 	and.w	r3, r3, #32
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d018      	beq.n	80060da <UART_AdvFeatureConfig+0x18e>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d009      	beq.n	80060c4 <UART_AdvFeatureConfig+0x178>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060b8:	d004      	beq.n	80060c4 <UART_AdvFeatureConfig+0x178>
 80060ba:	f640 410e 	movw	r1, #3086	; 0xc0e
 80060be:	4837      	ldr	r0, [pc, #220]	; (800619c <UART_AdvFeatureConfig+0x250>)
 80060c0:	f7fb f9e1 	bl	8001486 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	689b      	ldr	r3, [r3, #8]
 80060ca:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	430a      	orrs	r2, r1
 80060d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d064      	beq.n	80061b0 <UART_AdvFeatureConfig+0x264>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4a2d      	ldr	r2, [pc, #180]	; (80061a0 <UART_AdvFeatureConfig+0x254>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d013      	beq.n	8006118 <UART_AdvFeatureConfig+0x1cc>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4a2b      	ldr	r2, [pc, #172]	; (80061a4 <UART_AdvFeatureConfig+0x258>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d00e      	beq.n	8006118 <UART_AdvFeatureConfig+0x1cc>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	4a2a      	ldr	r2, [pc, #168]	; (80061a8 <UART_AdvFeatureConfig+0x25c>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d009      	beq.n	8006118 <UART_AdvFeatureConfig+0x1cc>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4a28      	ldr	r2, [pc, #160]	; (80061ac <UART_AdvFeatureConfig+0x260>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d004      	beq.n	8006118 <UART_AdvFeatureConfig+0x1cc>
 800610e:	f640 4115 	movw	r1, #3093	; 0xc15
 8006112:	4822      	ldr	r0, [pc, #136]	; (800619c <UART_AdvFeatureConfig+0x250>)
 8006114:	f7fb f9b7 	bl	8001486 <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800611c:	2b00      	cmp	r3, #0
 800611e:	d009      	beq.n	8006134 <UART_AdvFeatureConfig+0x1e8>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006124:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006128:	d004      	beq.n	8006134 <UART_AdvFeatureConfig+0x1e8>
 800612a:	f640 4116 	movw	r1, #3094	; 0xc16
 800612e:	481b      	ldr	r0, [pc, #108]	; (800619c <UART_AdvFeatureConfig+0x250>)
 8006130:	f7fb f9a9 	bl	8001486 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	685b      	ldr	r3, [r3, #4]
 800613a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	430a      	orrs	r2, r1
 8006148:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800614e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006152:	d12d      	bne.n	80061b0 <UART_AdvFeatureConfig+0x264>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006158:	2b00      	cmp	r3, #0
 800615a:	d013      	beq.n	8006184 <UART_AdvFeatureConfig+0x238>
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006160:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006164:	d00e      	beq.n	8006184 <UART_AdvFeatureConfig+0x238>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800616a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800616e:	d009      	beq.n	8006184 <UART_AdvFeatureConfig+0x238>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006174:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006178:	d004      	beq.n	8006184 <UART_AdvFeatureConfig+0x238>
 800617a:	f640 411b 	movw	r1, #3099	; 0xc1b
 800617e:	4807      	ldr	r0, [pc, #28]	; (800619c <UART_AdvFeatureConfig+0x250>)
 8006180:	f7fb f981 	bl	8001486 <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	685b      	ldr	r3, [r3, #4]
 800618a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	430a      	orrs	r2, r1
 8006198:	605a      	str	r2, [r3, #4]
 800619a:	e009      	b.n	80061b0 <UART_AdvFeatureConfig+0x264>
 800619c:	08009578 	.word	0x08009578
 80061a0:	40011000 	.word	0x40011000
 80061a4:	40004400 	.word	0x40004400
 80061a8:	40004800 	.word	0x40004800
 80061ac:	40011400 	.word	0x40011400
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d018      	beq.n	80061ee <UART_AdvFeatureConfig+0x2a2>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d009      	beq.n	80061d8 <UART_AdvFeatureConfig+0x28c>
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061c8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80061cc:	d004      	beq.n	80061d8 <UART_AdvFeatureConfig+0x28c>
 80061ce:	f640 4123 	movw	r1, #3107	; 0xc23
 80061d2:	4809      	ldr	r0, [pc, #36]	; (80061f8 <UART_AdvFeatureConfig+0x2ac>)
 80061d4:	f7fb f957 	bl	8001486 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	685b      	ldr	r3, [r3, #4]
 80061de:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	430a      	orrs	r2, r1
 80061ec:	605a      	str	r2, [r3, #4]
  }
}
 80061ee:	bf00      	nop
 80061f0:	3708      	adds	r7, #8
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bd80      	pop	{r7, pc}
 80061f6:	bf00      	nop
 80061f8:	08009578 	.word	0x08009578

080061fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b086      	sub	sp, #24
 8006200:	af02      	add	r7, sp, #8
 8006202:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2200      	movs	r2, #0
 8006208:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800620c:	f7fb fd10 	bl	8001c30 <HAL_GetTick>
 8006210:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f003 0308 	and.w	r3, r3, #8
 800621c:	2b08      	cmp	r3, #8
 800621e:	d10e      	bne.n	800623e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006220:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006224:	9300      	str	r3, [sp, #0]
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	2200      	movs	r2, #0
 800622a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800622e:	6878      	ldr	r0, [r7, #4]
 8006230:	f000 f81b 	bl	800626a <UART_WaitOnFlagUntilTimeout>
 8006234:	4603      	mov	r3, r0
 8006236:	2b00      	cmp	r3, #0
 8006238:	d001      	beq.n	800623e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800623a:	2303      	movs	r3, #3
 800623c:	e011      	b.n	8006262 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2220      	movs	r2, #32
 8006242:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2220      	movs	r2, #32
 8006248:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2200      	movs	r2, #0
 8006250:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2200      	movs	r2, #0
 8006256:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2200      	movs	r2, #0
 800625c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006260:	2300      	movs	r3, #0
}
 8006262:	4618      	mov	r0, r3
 8006264:	3710      	adds	r7, #16
 8006266:	46bd      	mov	sp, r7
 8006268:	bd80      	pop	{r7, pc}

0800626a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800626a:	b580      	push	{r7, lr}
 800626c:	b09c      	sub	sp, #112	; 0x70
 800626e:	af00      	add	r7, sp, #0
 8006270:	60f8      	str	r0, [r7, #12]
 8006272:	60b9      	str	r1, [r7, #8]
 8006274:	603b      	str	r3, [r7, #0]
 8006276:	4613      	mov	r3, r2
 8006278:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800627a:	e0a7      	b.n	80063cc <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800627c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800627e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006282:	f000 80a3 	beq.w	80063cc <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006286:	f7fb fcd3 	bl	8001c30 <HAL_GetTick>
 800628a:	4602      	mov	r2, r0
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	1ad3      	subs	r3, r2, r3
 8006290:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006292:	429a      	cmp	r2, r3
 8006294:	d302      	bcc.n	800629c <UART_WaitOnFlagUntilTimeout+0x32>
 8006296:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006298:	2b00      	cmp	r3, #0
 800629a:	d13f      	bne.n	800631c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80062a4:	e853 3f00 	ldrex	r3, [r3]
 80062a8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80062aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062ac:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80062b0:	667b      	str	r3, [r7, #100]	; 0x64
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	461a      	mov	r2, r3
 80062b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80062ba:	65fb      	str	r3, [r7, #92]	; 0x5c
 80062bc:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062be:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80062c0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80062c2:	e841 2300 	strex	r3, r2, [r1]
 80062c6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80062c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d1e6      	bne.n	800629c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	3308      	adds	r3, #8
 80062d4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062d8:	e853 3f00 	ldrex	r3, [r3]
 80062dc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80062de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062e0:	f023 0301 	bic.w	r3, r3, #1
 80062e4:	663b      	str	r3, [r7, #96]	; 0x60
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	3308      	adds	r3, #8
 80062ec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80062ee:	64ba      	str	r2, [r7, #72]	; 0x48
 80062f0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062f2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80062f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80062f6:	e841 2300 	strex	r3, r2, [r1]
 80062fa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80062fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d1e5      	bne.n	80062ce <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	2220      	movs	r2, #32
 8006306:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	2220      	movs	r2, #32
 800630c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	2200      	movs	r2, #0
 8006314:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8006318:	2303      	movs	r3, #3
 800631a:	e068      	b.n	80063ee <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f003 0304 	and.w	r3, r3, #4
 8006326:	2b00      	cmp	r3, #0
 8006328:	d050      	beq.n	80063cc <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	69db      	ldr	r3, [r3, #28]
 8006330:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006334:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006338:	d148      	bne.n	80063cc <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006342:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800634a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800634c:	e853 3f00 	ldrex	r3, [r3]
 8006350:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006354:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006358:	66fb      	str	r3, [r7, #108]	; 0x6c
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	461a      	mov	r2, r3
 8006360:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006362:	637b      	str	r3, [r7, #52]	; 0x34
 8006364:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006366:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006368:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800636a:	e841 2300 	strex	r3, r2, [r1]
 800636e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006372:	2b00      	cmp	r3, #0
 8006374:	d1e6      	bne.n	8006344 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	3308      	adds	r3, #8
 800637c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800637e:	697b      	ldr	r3, [r7, #20]
 8006380:	e853 3f00 	ldrex	r3, [r3]
 8006384:	613b      	str	r3, [r7, #16]
   return(result);
 8006386:	693b      	ldr	r3, [r7, #16]
 8006388:	f023 0301 	bic.w	r3, r3, #1
 800638c:	66bb      	str	r3, [r7, #104]	; 0x68
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	3308      	adds	r3, #8
 8006394:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006396:	623a      	str	r2, [r7, #32]
 8006398:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800639a:	69f9      	ldr	r1, [r7, #28]
 800639c:	6a3a      	ldr	r2, [r7, #32]
 800639e:	e841 2300 	strex	r3, r2, [r1]
 80063a2:	61bb      	str	r3, [r7, #24]
   return(result);
 80063a4:	69bb      	ldr	r3, [r7, #24]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d1e5      	bne.n	8006376 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	2220      	movs	r2, #32
 80063ae:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	2220      	movs	r2, #32
 80063b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	2220      	movs	r2, #32
 80063bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	2200      	movs	r2, #0
 80063c4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80063c8:	2303      	movs	r3, #3
 80063ca:	e010      	b.n	80063ee <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	69da      	ldr	r2, [r3, #28]
 80063d2:	68bb      	ldr	r3, [r7, #8]
 80063d4:	4013      	ands	r3, r2
 80063d6:	68ba      	ldr	r2, [r7, #8]
 80063d8:	429a      	cmp	r2, r3
 80063da:	bf0c      	ite	eq
 80063dc:	2301      	moveq	r3, #1
 80063de:	2300      	movne	r3, #0
 80063e0:	b2db      	uxtb	r3, r3
 80063e2:	461a      	mov	r2, r3
 80063e4:	79fb      	ldrb	r3, [r7, #7]
 80063e6:	429a      	cmp	r2, r3
 80063e8:	f43f af48 	beq.w	800627c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80063ec:	2300      	movs	r3, #0
}
 80063ee:	4618      	mov	r0, r3
 80063f0:	3770      	adds	r7, #112	; 0x70
 80063f2:	46bd      	mov	sp, r7
 80063f4:	bd80      	pop	{r7, pc}

080063f6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80063f6:	b480      	push	{r7}
 80063f8:	b095      	sub	sp, #84	; 0x54
 80063fa:	af00      	add	r7, sp, #0
 80063fc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006404:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006406:	e853 3f00 	ldrex	r3, [r3]
 800640a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800640c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800640e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006412:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	461a      	mov	r2, r3
 800641a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800641c:	643b      	str	r3, [r7, #64]	; 0x40
 800641e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006420:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006422:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006424:	e841 2300 	strex	r3, r2, [r1]
 8006428:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800642a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800642c:	2b00      	cmp	r3, #0
 800642e:	d1e6      	bne.n	80063fe <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	3308      	adds	r3, #8
 8006436:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006438:	6a3b      	ldr	r3, [r7, #32]
 800643a:	e853 3f00 	ldrex	r3, [r3]
 800643e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006440:	69fb      	ldr	r3, [r7, #28]
 8006442:	f023 0301 	bic.w	r3, r3, #1
 8006446:	64bb      	str	r3, [r7, #72]	; 0x48
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	3308      	adds	r3, #8
 800644e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006450:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006452:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006454:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006456:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006458:	e841 2300 	strex	r3, r2, [r1]
 800645c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800645e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006460:	2b00      	cmp	r3, #0
 8006462:	d1e5      	bne.n	8006430 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006468:	2b01      	cmp	r3, #1
 800646a:	d118      	bne.n	800649e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	e853 3f00 	ldrex	r3, [r3]
 8006478:	60bb      	str	r3, [r7, #8]
   return(result);
 800647a:	68bb      	ldr	r3, [r7, #8]
 800647c:	f023 0310 	bic.w	r3, r3, #16
 8006480:	647b      	str	r3, [r7, #68]	; 0x44
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	461a      	mov	r2, r3
 8006488:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800648a:	61bb      	str	r3, [r7, #24]
 800648c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800648e:	6979      	ldr	r1, [r7, #20]
 8006490:	69ba      	ldr	r2, [r7, #24]
 8006492:	e841 2300 	strex	r3, r2, [r1]
 8006496:	613b      	str	r3, [r7, #16]
   return(result);
 8006498:	693b      	ldr	r3, [r7, #16]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d1e6      	bne.n	800646c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2220      	movs	r2, #32
 80064a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2200      	movs	r2, #0
 80064aa:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2200      	movs	r2, #0
 80064b0:	669a      	str	r2, [r3, #104]	; 0x68
}
 80064b2:	bf00      	nop
 80064b4:	3754      	adds	r7, #84	; 0x54
 80064b6:	46bd      	mov	sp, r7
 80064b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064bc:	4770      	bx	lr

080064be <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80064be:	b580      	push	{r7, lr}
 80064c0:	b084      	sub	sp, #16
 80064c2:	af00      	add	r7, sp, #0
 80064c4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064ca:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	2200      	movs	r2, #0
 80064d0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	2200      	movs	r2, #0
 80064d8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80064dc:	68f8      	ldr	r0, [r7, #12]
 80064de:	f7ff fa29 	bl	8005934 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80064e2:	bf00      	nop
 80064e4:	3710      	adds	r7, #16
 80064e6:	46bd      	mov	sp, r7
 80064e8:	bd80      	pop	{r7, pc}

080064ea <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80064ea:	b580      	push	{r7, lr}
 80064ec:	b088      	sub	sp, #32
 80064ee:	af00      	add	r7, sp, #0
 80064f0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	e853 3f00 	ldrex	r3, [r3]
 80064fe:	60bb      	str	r3, [r7, #8]
   return(result);
 8006500:	68bb      	ldr	r3, [r7, #8]
 8006502:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006506:	61fb      	str	r3, [r7, #28]
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	461a      	mov	r2, r3
 800650e:	69fb      	ldr	r3, [r7, #28]
 8006510:	61bb      	str	r3, [r7, #24]
 8006512:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006514:	6979      	ldr	r1, [r7, #20]
 8006516:	69ba      	ldr	r2, [r7, #24]
 8006518:	e841 2300 	strex	r3, r2, [r1]
 800651c:	613b      	str	r3, [r7, #16]
   return(result);
 800651e:	693b      	ldr	r3, [r7, #16]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d1e6      	bne.n	80064f2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2220      	movs	r2, #32
 8006528:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2200      	movs	r2, #0
 800652e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006530:	6878      	ldr	r0, [r7, #4]
 8006532:	f7ff f9f5 	bl	8005920 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006536:	bf00      	nop
 8006538:	3720      	adds	r7, #32
 800653a:	46bd      	mov	sp, r7
 800653c:	bd80      	pop	{r7, pc}
	...

08006540 <__errno>:
 8006540:	4b01      	ldr	r3, [pc, #4]	; (8006548 <__errno+0x8>)
 8006542:	6818      	ldr	r0, [r3, #0]
 8006544:	4770      	bx	lr
 8006546:	bf00      	nop
 8006548:	2000000c 	.word	0x2000000c

0800654c <__libc_init_array>:
 800654c:	b570      	push	{r4, r5, r6, lr}
 800654e:	4d0d      	ldr	r5, [pc, #52]	; (8006584 <__libc_init_array+0x38>)
 8006550:	4c0d      	ldr	r4, [pc, #52]	; (8006588 <__libc_init_array+0x3c>)
 8006552:	1b64      	subs	r4, r4, r5
 8006554:	10a4      	asrs	r4, r4, #2
 8006556:	2600      	movs	r6, #0
 8006558:	42a6      	cmp	r6, r4
 800655a:	d109      	bne.n	8006570 <__libc_init_array+0x24>
 800655c:	4d0b      	ldr	r5, [pc, #44]	; (800658c <__libc_init_array+0x40>)
 800655e:	4c0c      	ldr	r4, [pc, #48]	; (8006590 <__libc_init_array+0x44>)
 8006560:	f002 ff04 	bl	800936c <_init>
 8006564:	1b64      	subs	r4, r4, r5
 8006566:	10a4      	asrs	r4, r4, #2
 8006568:	2600      	movs	r6, #0
 800656a:	42a6      	cmp	r6, r4
 800656c:	d105      	bne.n	800657a <__libc_init_array+0x2e>
 800656e:	bd70      	pop	{r4, r5, r6, pc}
 8006570:	f855 3b04 	ldr.w	r3, [r5], #4
 8006574:	4798      	blx	r3
 8006576:	3601      	adds	r6, #1
 8006578:	e7ee      	b.n	8006558 <__libc_init_array+0xc>
 800657a:	f855 3b04 	ldr.w	r3, [r5], #4
 800657e:	4798      	blx	r3
 8006580:	3601      	adds	r6, #1
 8006582:	e7f2      	b.n	800656a <__libc_init_array+0x1e>
 8006584:	080099ac 	.word	0x080099ac
 8006588:	080099ac 	.word	0x080099ac
 800658c:	080099ac 	.word	0x080099ac
 8006590:	080099b0 	.word	0x080099b0

08006594 <memcpy>:
 8006594:	440a      	add	r2, r1
 8006596:	4291      	cmp	r1, r2
 8006598:	f100 33ff 	add.w	r3, r0, #4294967295
 800659c:	d100      	bne.n	80065a0 <memcpy+0xc>
 800659e:	4770      	bx	lr
 80065a0:	b510      	push	{r4, lr}
 80065a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80065a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80065aa:	4291      	cmp	r1, r2
 80065ac:	d1f9      	bne.n	80065a2 <memcpy+0xe>
 80065ae:	bd10      	pop	{r4, pc}

080065b0 <memset>:
 80065b0:	4402      	add	r2, r0
 80065b2:	4603      	mov	r3, r0
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d100      	bne.n	80065ba <memset+0xa>
 80065b8:	4770      	bx	lr
 80065ba:	f803 1b01 	strb.w	r1, [r3], #1
 80065be:	e7f9      	b.n	80065b4 <memset+0x4>

080065c0 <__cvt>:
 80065c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80065c4:	ec55 4b10 	vmov	r4, r5, d0
 80065c8:	2d00      	cmp	r5, #0
 80065ca:	460e      	mov	r6, r1
 80065cc:	4619      	mov	r1, r3
 80065ce:	462b      	mov	r3, r5
 80065d0:	bfbb      	ittet	lt
 80065d2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80065d6:	461d      	movlt	r5, r3
 80065d8:	2300      	movge	r3, #0
 80065da:	232d      	movlt	r3, #45	; 0x2d
 80065dc:	700b      	strb	r3, [r1, #0]
 80065de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80065e0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80065e4:	4691      	mov	r9, r2
 80065e6:	f023 0820 	bic.w	r8, r3, #32
 80065ea:	bfbc      	itt	lt
 80065ec:	4622      	movlt	r2, r4
 80065ee:	4614      	movlt	r4, r2
 80065f0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80065f4:	d005      	beq.n	8006602 <__cvt+0x42>
 80065f6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80065fa:	d100      	bne.n	80065fe <__cvt+0x3e>
 80065fc:	3601      	adds	r6, #1
 80065fe:	2102      	movs	r1, #2
 8006600:	e000      	b.n	8006604 <__cvt+0x44>
 8006602:	2103      	movs	r1, #3
 8006604:	ab03      	add	r3, sp, #12
 8006606:	9301      	str	r3, [sp, #4]
 8006608:	ab02      	add	r3, sp, #8
 800660a:	9300      	str	r3, [sp, #0]
 800660c:	ec45 4b10 	vmov	d0, r4, r5
 8006610:	4653      	mov	r3, sl
 8006612:	4632      	mov	r2, r6
 8006614:	f000 fcec 	bl	8006ff0 <_dtoa_r>
 8006618:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800661c:	4607      	mov	r7, r0
 800661e:	d102      	bne.n	8006626 <__cvt+0x66>
 8006620:	f019 0f01 	tst.w	r9, #1
 8006624:	d022      	beq.n	800666c <__cvt+0xac>
 8006626:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800662a:	eb07 0906 	add.w	r9, r7, r6
 800662e:	d110      	bne.n	8006652 <__cvt+0x92>
 8006630:	783b      	ldrb	r3, [r7, #0]
 8006632:	2b30      	cmp	r3, #48	; 0x30
 8006634:	d10a      	bne.n	800664c <__cvt+0x8c>
 8006636:	2200      	movs	r2, #0
 8006638:	2300      	movs	r3, #0
 800663a:	4620      	mov	r0, r4
 800663c:	4629      	mov	r1, r5
 800663e:	f7fa fa63 	bl	8000b08 <__aeabi_dcmpeq>
 8006642:	b918      	cbnz	r0, 800664c <__cvt+0x8c>
 8006644:	f1c6 0601 	rsb	r6, r6, #1
 8006648:	f8ca 6000 	str.w	r6, [sl]
 800664c:	f8da 3000 	ldr.w	r3, [sl]
 8006650:	4499      	add	r9, r3
 8006652:	2200      	movs	r2, #0
 8006654:	2300      	movs	r3, #0
 8006656:	4620      	mov	r0, r4
 8006658:	4629      	mov	r1, r5
 800665a:	f7fa fa55 	bl	8000b08 <__aeabi_dcmpeq>
 800665e:	b108      	cbz	r0, 8006664 <__cvt+0xa4>
 8006660:	f8cd 900c 	str.w	r9, [sp, #12]
 8006664:	2230      	movs	r2, #48	; 0x30
 8006666:	9b03      	ldr	r3, [sp, #12]
 8006668:	454b      	cmp	r3, r9
 800666a:	d307      	bcc.n	800667c <__cvt+0xbc>
 800666c:	9b03      	ldr	r3, [sp, #12]
 800666e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006670:	1bdb      	subs	r3, r3, r7
 8006672:	4638      	mov	r0, r7
 8006674:	6013      	str	r3, [r2, #0]
 8006676:	b004      	add	sp, #16
 8006678:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800667c:	1c59      	adds	r1, r3, #1
 800667e:	9103      	str	r1, [sp, #12]
 8006680:	701a      	strb	r2, [r3, #0]
 8006682:	e7f0      	b.n	8006666 <__cvt+0xa6>

08006684 <__exponent>:
 8006684:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006686:	4603      	mov	r3, r0
 8006688:	2900      	cmp	r1, #0
 800668a:	bfb8      	it	lt
 800668c:	4249      	neglt	r1, r1
 800668e:	f803 2b02 	strb.w	r2, [r3], #2
 8006692:	bfb4      	ite	lt
 8006694:	222d      	movlt	r2, #45	; 0x2d
 8006696:	222b      	movge	r2, #43	; 0x2b
 8006698:	2909      	cmp	r1, #9
 800669a:	7042      	strb	r2, [r0, #1]
 800669c:	dd2a      	ble.n	80066f4 <__exponent+0x70>
 800669e:	f10d 0407 	add.w	r4, sp, #7
 80066a2:	46a4      	mov	ip, r4
 80066a4:	270a      	movs	r7, #10
 80066a6:	46a6      	mov	lr, r4
 80066a8:	460a      	mov	r2, r1
 80066aa:	fb91 f6f7 	sdiv	r6, r1, r7
 80066ae:	fb07 1516 	mls	r5, r7, r6, r1
 80066b2:	3530      	adds	r5, #48	; 0x30
 80066b4:	2a63      	cmp	r2, #99	; 0x63
 80066b6:	f104 34ff 	add.w	r4, r4, #4294967295
 80066ba:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80066be:	4631      	mov	r1, r6
 80066c0:	dcf1      	bgt.n	80066a6 <__exponent+0x22>
 80066c2:	3130      	adds	r1, #48	; 0x30
 80066c4:	f1ae 0502 	sub.w	r5, lr, #2
 80066c8:	f804 1c01 	strb.w	r1, [r4, #-1]
 80066cc:	1c44      	adds	r4, r0, #1
 80066ce:	4629      	mov	r1, r5
 80066d0:	4561      	cmp	r1, ip
 80066d2:	d30a      	bcc.n	80066ea <__exponent+0x66>
 80066d4:	f10d 0209 	add.w	r2, sp, #9
 80066d8:	eba2 020e 	sub.w	r2, r2, lr
 80066dc:	4565      	cmp	r5, ip
 80066de:	bf88      	it	hi
 80066e0:	2200      	movhi	r2, #0
 80066e2:	4413      	add	r3, r2
 80066e4:	1a18      	subs	r0, r3, r0
 80066e6:	b003      	add	sp, #12
 80066e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80066ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80066ee:	f804 2f01 	strb.w	r2, [r4, #1]!
 80066f2:	e7ed      	b.n	80066d0 <__exponent+0x4c>
 80066f4:	2330      	movs	r3, #48	; 0x30
 80066f6:	3130      	adds	r1, #48	; 0x30
 80066f8:	7083      	strb	r3, [r0, #2]
 80066fa:	70c1      	strb	r1, [r0, #3]
 80066fc:	1d03      	adds	r3, r0, #4
 80066fe:	e7f1      	b.n	80066e4 <__exponent+0x60>

08006700 <_printf_float>:
 8006700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006704:	ed2d 8b02 	vpush	{d8}
 8006708:	b08d      	sub	sp, #52	; 0x34
 800670a:	460c      	mov	r4, r1
 800670c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006710:	4616      	mov	r6, r2
 8006712:	461f      	mov	r7, r3
 8006714:	4605      	mov	r5, r0
 8006716:	f001 fa59 	bl	8007bcc <_localeconv_r>
 800671a:	f8d0 a000 	ldr.w	sl, [r0]
 800671e:	4650      	mov	r0, sl
 8006720:	f7f9 fd76 	bl	8000210 <strlen>
 8006724:	2300      	movs	r3, #0
 8006726:	930a      	str	r3, [sp, #40]	; 0x28
 8006728:	6823      	ldr	r3, [r4, #0]
 800672a:	9305      	str	r3, [sp, #20]
 800672c:	f8d8 3000 	ldr.w	r3, [r8]
 8006730:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006734:	3307      	adds	r3, #7
 8006736:	f023 0307 	bic.w	r3, r3, #7
 800673a:	f103 0208 	add.w	r2, r3, #8
 800673e:	f8c8 2000 	str.w	r2, [r8]
 8006742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006746:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800674a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800674e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006752:	9307      	str	r3, [sp, #28]
 8006754:	f8cd 8018 	str.w	r8, [sp, #24]
 8006758:	ee08 0a10 	vmov	s16, r0
 800675c:	4b9f      	ldr	r3, [pc, #636]	; (80069dc <_printf_float+0x2dc>)
 800675e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006762:	f04f 32ff 	mov.w	r2, #4294967295
 8006766:	f7fa fa01 	bl	8000b6c <__aeabi_dcmpun>
 800676a:	bb88      	cbnz	r0, 80067d0 <_printf_float+0xd0>
 800676c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006770:	4b9a      	ldr	r3, [pc, #616]	; (80069dc <_printf_float+0x2dc>)
 8006772:	f04f 32ff 	mov.w	r2, #4294967295
 8006776:	f7fa f9db 	bl	8000b30 <__aeabi_dcmple>
 800677a:	bb48      	cbnz	r0, 80067d0 <_printf_float+0xd0>
 800677c:	2200      	movs	r2, #0
 800677e:	2300      	movs	r3, #0
 8006780:	4640      	mov	r0, r8
 8006782:	4649      	mov	r1, r9
 8006784:	f7fa f9ca 	bl	8000b1c <__aeabi_dcmplt>
 8006788:	b110      	cbz	r0, 8006790 <_printf_float+0x90>
 800678a:	232d      	movs	r3, #45	; 0x2d
 800678c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006790:	4b93      	ldr	r3, [pc, #588]	; (80069e0 <_printf_float+0x2e0>)
 8006792:	4894      	ldr	r0, [pc, #592]	; (80069e4 <_printf_float+0x2e4>)
 8006794:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006798:	bf94      	ite	ls
 800679a:	4698      	movls	r8, r3
 800679c:	4680      	movhi	r8, r0
 800679e:	2303      	movs	r3, #3
 80067a0:	6123      	str	r3, [r4, #16]
 80067a2:	9b05      	ldr	r3, [sp, #20]
 80067a4:	f023 0204 	bic.w	r2, r3, #4
 80067a8:	6022      	str	r2, [r4, #0]
 80067aa:	f04f 0900 	mov.w	r9, #0
 80067ae:	9700      	str	r7, [sp, #0]
 80067b0:	4633      	mov	r3, r6
 80067b2:	aa0b      	add	r2, sp, #44	; 0x2c
 80067b4:	4621      	mov	r1, r4
 80067b6:	4628      	mov	r0, r5
 80067b8:	f000 f9d8 	bl	8006b6c <_printf_common>
 80067bc:	3001      	adds	r0, #1
 80067be:	f040 8090 	bne.w	80068e2 <_printf_float+0x1e2>
 80067c2:	f04f 30ff 	mov.w	r0, #4294967295
 80067c6:	b00d      	add	sp, #52	; 0x34
 80067c8:	ecbd 8b02 	vpop	{d8}
 80067cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067d0:	4642      	mov	r2, r8
 80067d2:	464b      	mov	r3, r9
 80067d4:	4640      	mov	r0, r8
 80067d6:	4649      	mov	r1, r9
 80067d8:	f7fa f9c8 	bl	8000b6c <__aeabi_dcmpun>
 80067dc:	b140      	cbz	r0, 80067f0 <_printf_float+0xf0>
 80067de:	464b      	mov	r3, r9
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	bfbc      	itt	lt
 80067e4:	232d      	movlt	r3, #45	; 0x2d
 80067e6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80067ea:	487f      	ldr	r0, [pc, #508]	; (80069e8 <_printf_float+0x2e8>)
 80067ec:	4b7f      	ldr	r3, [pc, #508]	; (80069ec <_printf_float+0x2ec>)
 80067ee:	e7d1      	b.n	8006794 <_printf_float+0x94>
 80067f0:	6863      	ldr	r3, [r4, #4]
 80067f2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80067f6:	9206      	str	r2, [sp, #24]
 80067f8:	1c5a      	adds	r2, r3, #1
 80067fa:	d13f      	bne.n	800687c <_printf_float+0x17c>
 80067fc:	2306      	movs	r3, #6
 80067fe:	6063      	str	r3, [r4, #4]
 8006800:	9b05      	ldr	r3, [sp, #20]
 8006802:	6861      	ldr	r1, [r4, #4]
 8006804:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006808:	2300      	movs	r3, #0
 800680a:	9303      	str	r3, [sp, #12]
 800680c:	ab0a      	add	r3, sp, #40	; 0x28
 800680e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006812:	ab09      	add	r3, sp, #36	; 0x24
 8006814:	ec49 8b10 	vmov	d0, r8, r9
 8006818:	9300      	str	r3, [sp, #0]
 800681a:	6022      	str	r2, [r4, #0]
 800681c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006820:	4628      	mov	r0, r5
 8006822:	f7ff fecd 	bl	80065c0 <__cvt>
 8006826:	9b06      	ldr	r3, [sp, #24]
 8006828:	9909      	ldr	r1, [sp, #36]	; 0x24
 800682a:	2b47      	cmp	r3, #71	; 0x47
 800682c:	4680      	mov	r8, r0
 800682e:	d108      	bne.n	8006842 <_printf_float+0x142>
 8006830:	1cc8      	adds	r0, r1, #3
 8006832:	db02      	blt.n	800683a <_printf_float+0x13a>
 8006834:	6863      	ldr	r3, [r4, #4]
 8006836:	4299      	cmp	r1, r3
 8006838:	dd41      	ble.n	80068be <_printf_float+0x1be>
 800683a:	f1ab 0b02 	sub.w	fp, fp, #2
 800683e:	fa5f fb8b 	uxtb.w	fp, fp
 8006842:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006846:	d820      	bhi.n	800688a <_printf_float+0x18a>
 8006848:	3901      	subs	r1, #1
 800684a:	465a      	mov	r2, fp
 800684c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006850:	9109      	str	r1, [sp, #36]	; 0x24
 8006852:	f7ff ff17 	bl	8006684 <__exponent>
 8006856:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006858:	1813      	adds	r3, r2, r0
 800685a:	2a01      	cmp	r2, #1
 800685c:	4681      	mov	r9, r0
 800685e:	6123      	str	r3, [r4, #16]
 8006860:	dc02      	bgt.n	8006868 <_printf_float+0x168>
 8006862:	6822      	ldr	r2, [r4, #0]
 8006864:	07d2      	lsls	r2, r2, #31
 8006866:	d501      	bpl.n	800686c <_printf_float+0x16c>
 8006868:	3301      	adds	r3, #1
 800686a:	6123      	str	r3, [r4, #16]
 800686c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006870:	2b00      	cmp	r3, #0
 8006872:	d09c      	beq.n	80067ae <_printf_float+0xae>
 8006874:	232d      	movs	r3, #45	; 0x2d
 8006876:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800687a:	e798      	b.n	80067ae <_printf_float+0xae>
 800687c:	9a06      	ldr	r2, [sp, #24]
 800687e:	2a47      	cmp	r2, #71	; 0x47
 8006880:	d1be      	bne.n	8006800 <_printf_float+0x100>
 8006882:	2b00      	cmp	r3, #0
 8006884:	d1bc      	bne.n	8006800 <_printf_float+0x100>
 8006886:	2301      	movs	r3, #1
 8006888:	e7b9      	b.n	80067fe <_printf_float+0xfe>
 800688a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800688e:	d118      	bne.n	80068c2 <_printf_float+0x1c2>
 8006890:	2900      	cmp	r1, #0
 8006892:	6863      	ldr	r3, [r4, #4]
 8006894:	dd0b      	ble.n	80068ae <_printf_float+0x1ae>
 8006896:	6121      	str	r1, [r4, #16]
 8006898:	b913      	cbnz	r3, 80068a0 <_printf_float+0x1a0>
 800689a:	6822      	ldr	r2, [r4, #0]
 800689c:	07d0      	lsls	r0, r2, #31
 800689e:	d502      	bpl.n	80068a6 <_printf_float+0x1a6>
 80068a0:	3301      	adds	r3, #1
 80068a2:	440b      	add	r3, r1
 80068a4:	6123      	str	r3, [r4, #16]
 80068a6:	65a1      	str	r1, [r4, #88]	; 0x58
 80068a8:	f04f 0900 	mov.w	r9, #0
 80068ac:	e7de      	b.n	800686c <_printf_float+0x16c>
 80068ae:	b913      	cbnz	r3, 80068b6 <_printf_float+0x1b6>
 80068b0:	6822      	ldr	r2, [r4, #0]
 80068b2:	07d2      	lsls	r2, r2, #31
 80068b4:	d501      	bpl.n	80068ba <_printf_float+0x1ba>
 80068b6:	3302      	adds	r3, #2
 80068b8:	e7f4      	b.n	80068a4 <_printf_float+0x1a4>
 80068ba:	2301      	movs	r3, #1
 80068bc:	e7f2      	b.n	80068a4 <_printf_float+0x1a4>
 80068be:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80068c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068c4:	4299      	cmp	r1, r3
 80068c6:	db05      	blt.n	80068d4 <_printf_float+0x1d4>
 80068c8:	6823      	ldr	r3, [r4, #0]
 80068ca:	6121      	str	r1, [r4, #16]
 80068cc:	07d8      	lsls	r0, r3, #31
 80068ce:	d5ea      	bpl.n	80068a6 <_printf_float+0x1a6>
 80068d0:	1c4b      	adds	r3, r1, #1
 80068d2:	e7e7      	b.n	80068a4 <_printf_float+0x1a4>
 80068d4:	2900      	cmp	r1, #0
 80068d6:	bfd4      	ite	le
 80068d8:	f1c1 0202 	rsble	r2, r1, #2
 80068dc:	2201      	movgt	r2, #1
 80068de:	4413      	add	r3, r2
 80068e0:	e7e0      	b.n	80068a4 <_printf_float+0x1a4>
 80068e2:	6823      	ldr	r3, [r4, #0]
 80068e4:	055a      	lsls	r2, r3, #21
 80068e6:	d407      	bmi.n	80068f8 <_printf_float+0x1f8>
 80068e8:	6923      	ldr	r3, [r4, #16]
 80068ea:	4642      	mov	r2, r8
 80068ec:	4631      	mov	r1, r6
 80068ee:	4628      	mov	r0, r5
 80068f0:	47b8      	blx	r7
 80068f2:	3001      	adds	r0, #1
 80068f4:	d12c      	bne.n	8006950 <_printf_float+0x250>
 80068f6:	e764      	b.n	80067c2 <_printf_float+0xc2>
 80068f8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80068fc:	f240 80e0 	bls.w	8006ac0 <_printf_float+0x3c0>
 8006900:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006904:	2200      	movs	r2, #0
 8006906:	2300      	movs	r3, #0
 8006908:	f7fa f8fe 	bl	8000b08 <__aeabi_dcmpeq>
 800690c:	2800      	cmp	r0, #0
 800690e:	d034      	beq.n	800697a <_printf_float+0x27a>
 8006910:	4a37      	ldr	r2, [pc, #220]	; (80069f0 <_printf_float+0x2f0>)
 8006912:	2301      	movs	r3, #1
 8006914:	4631      	mov	r1, r6
 8006916:	4628      	mov	r0, r5
 8006918:	47b8      	blx	r7
 800691a:	3001      	adds	r0, #1
 800691c:	f43f af51 	beq.w	80067c2 <_printf_float+0xc2>
 8006920:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006924:	429a      	cmp	r2, r3
 8006926:	db02      	blt.n	800692e <_printf_float+0x22e>
 8006928:	6823      	ldr	r3, [r4, #0]
 800692a:	07d8      	lsls	r0, r3, #31
 800692c:	d510      	bpl.n	8006950 <_printf_float+0x250>
 800692e:	ee18 3a10 	vmov	r3, s16
 8006932:	4652      	mov	r2, sl
 8006934:	4631      	mov	r1, r6
 8006936:	4628      	mov	r0, r5
 8006938:	47b8      	blx	r7
 800693a:	3001      	adds	r0, #1
 800693c:	f43f af41 	beq.w	80067c2 <_printf_float+0xc2>
 8006940:	f04f 0800 	mov.w	r8, #0
 8006944:	f104 091a 	add.w	r9, r4, #26
 8006948:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800694a:	3b01      	subs	r3, #1
 800694c:	4543      	cmp	r3, r8
 800694e:	dc09      	bgt.n	8006964 <_printf_float+0x264>
 8006950:	6823      	ldr	r3, [r4, #0]
 8006952:	079b      	lsls	r3, r3, #30
 8006954:	f100 8105 	bmi.w	8006b62 <_printf_float+0x462>
 8006958:	68e0      	ldr	r0, [r4, #12]
 800695a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800695c:	4298      	cmp	r0, r3
 800695e:	bfb8      	it	lt
 8006960:	4618      	movlt	r0, r3
 8006962:	e730      	b.n	80067c6 <_printf_float+0xc6>
 8006964:	2301      	movs	r3, #1
 8006966:	464a      	mov	r2, r9
 8006968:	4631      	mov	r1, r6
 800696a:	4628      	mov	r0, r5
 800696c:	47b8      	blx	r7
 800696e:	3001      	adds	r0, #1
 8006970:	f43f af27 	beq.w	80067c2 <_printf_float+0xc2>
 8006974:	f108 0801 	add.w	r8, r8, #1
 8006978:	e7e6      	b.n	8006948 <_printf_float+0x248>
 800697a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800697c:	2b00      	cmp	r3, #0
 800697e:	dc39      	bgt.n	80069f4 <_printf_float+0x2f4>
 8006980:	4a1b      	ldr	r2, [pc, #108]	; (80069f0 <_printf_float+0x2f0>)
 8006982:	2301      	movs	r3, #1
 8006984:	4631      	mov	r1, r6
 8006986:	4628      	mov	r0, r5
 8006988:	47b8      	blx	r7
 800698a:	3001      	adds	r0, #1
 800698c:	f43f af19 	beq.w	80067c2 <_printf_float+0xc2>
 8006990:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006994:	4313      	orrs	r3, r2
 8006996:	d102      	bne.n	800699e <_printf_float+0x29e>
 8006998:	6823      	ldr	r3, [r4, #0]
 800699a:	07d9      	lsls	r1, r3, #31
 800699c:	d5d8      	bpl.n	8006950 <_printf_float+0x250>
 800699e:	ee18 3a10 	vmov	r3, s16
 80069a2:	4652      	mov	r2, sl
 80069a4:	4631      	mov	r1, r6
 80069a6:	4628      	mov	r0, r5
 80069a8:	47b8      	blx	r7
 80069aa:	3001      	adds	r0, #1
 80069ac:	f43f af09 	beq.w	80067c2 <_printf_float+0xc2>
 80069b0:	f04f 0900 	mov.w	r9, #0
 80069b4:	f104 0a1a 	add.w	sl, r4, #26
 80069b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069ba:	425b      	negs	r3, r3
 80069bc:	454b      	cmp	r3, r9
 80069be:	dc01      	bgt.n	80069c4 <_printf_float+0x2c4>
 80069c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069c2:	e792      	b.n	80068ea <_printf_float+0x1ea>
 80069c4:	2301      	movs	r3, #1
 80069c6:	4652      	mov	r2, sl
 80069c8:	4631      	mov	r1, r6
 80069ca:	4628      	mov	r0, r5
 80069cc:	47b8      	blx	r7
 80069ce:	3001      	adds	r0, #1
 80069d0:	f43f aef7 	beq.w	80067c2 <_printf_float+0xc2>
 80069d4:	f109 0901 	add.w	r9, r9, #1
 80069d8:	e7ee      	b.n	80069b8 <_printf_float+0x2b8>
 80069da:	bf00      	nop
 80069dc:	7fefffff 	.word	0x7fefffff
 80069e0:	080095d0 	.word	0x080095d0
 80069e4:	080095d4 	.word	0x080095d4
 80069e8:	080095dc 	.word	0x080095dc
 80069ec:	080095d8 	.word	0x080095d8
 80069f0:	080095e0 	.word	0x080095e0
 80069f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80069f6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80069f8:	429a      	cmp	r2, r3
 80069fa:	bfa8      	it	ge
 80069fc:	461a      	movge	r2, r3
 80069fe:	2a00      	cmp	r2, #0
 8006a00:	4691      	mov	r9, r2
 8006a02:	dc37      	bgt.n	8006a74 <_printf_float+0x374>
 8006a04:	f04f 0b00 	mov.w	fp, #0
 8006a08:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006a0c:	f104 021a 	add.w	r2, r4, #26
 8006a10:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006a12:	9305      	str	r3, [sp, #20]
 8006a14:	eba3 0309 	sub.w	r3, r3, r9
 8006a18:	455b      	cmp	r3, fp
 8006a1a:	dc33      	bgt.n	8006a84 <_printf_float+0x384>
 8006a1c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006a20:	429a      	cmp	r2, r3
 8006a22:	db3b      	blt.n	8006a9c <_printf_float+0x39c>
 8006a24:	6823      	ldr	r3, [r4, #0]
 8006a26:	07da      	lsls	r2, r3, #31
 8006a28:	d438      	bmi.n	8006a9c <_printf_float+0x39c>
 8006a2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a2c:	9a05      	ldr	r2, [sp, #20]
 8006a2e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006a30:	1a9a      	subs	r2, r3, r2
 8006a32:	eba3 0901 	sub.w	r9, r3, r1
 8006a36:	4591      	cmp	r9, r2
 8006a38:	bfa8      	it	ge
 8006a3a:	4691      	movge	r9, r2
 8006a3c:	f1b9 0f00 	cmp.w	r9, #0
 8006a40:	dc35      	bgt.n	8006aae <_printf_float+0x3ae>
 8006a42:	f04f 0800 	mov.w	r8, #0
 8006a46:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006a4a:	f104 0a1a 	add.w	sl, r4, #26
 8006a4e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006a52:	1a9b      	subs	r3, r3, r2
 8006a54:	eba3 0309 	sub.w	r3, r3, r9
 8006a58:	4543      	cmp	r3, r8
 8006a5a:	f77f af79 	ble.w	8006950 <_printf_float+0x250>
 8006a5e:	2301      	movs	r3, #1
 8006a60:	4652      	mov	r2, sl
 8006a62:	4631      	mov	r1, r6
 8006a64:	4628      	mov	r0, r5
 8006a66:	47b8      	blx	r7
 8006a68:	3001      	adds	r0, #1
 8006a6a:	f43f aeaa 	beq.w	80067c2 <_printf_float+0xc2>
 8006a6e:	f108 0801 	add.w	r8, r8, #1
 8006a72:	e7ec      	b.n	8006a4e <_printf_float+0x34e>
 8006a74:	4613      	mov	r3, r2
 8006a76:	4631      	mov	r1, r6
 8006a78:	4642      	mov	r2, r8
 8006a7a:	4628      	mov	r0, r5
 8006a7c:	47b8      	blx	r7
 8006a7e:	3001      	adds	r0, #1
 8006a80:	d1c0      	bne.n	8006a04 <_printf_float+0x304>
 8006a82:	e69e      	b.n	80067c2 <_printf_float+0xc2>
 8006a84:	2301      	movs	r3, #1
 8006a86:	4631      	mov	r1, r6
 8006a88:	4628      	mov	r0, r5
 8006a8a:	9205      	str	r2, [sp, #20]
 8006a8c:	47b8      	blx	r7
 8006a8e:	3001      	adds	r0, #1
 8006a90:	f43f ae97 	beq.w	80067c2 <_printf_float+0xc2>
 8006a94:	9a05      	ldr	r2, [sp, #20]
 8006a96:	f10b 0b01 	add.w	fp, fp, #1
 8006a9a:	e7b9      	b.n	8006a10 <_printf_float+0x310>
 8006a9c:	ee18 3a10 	vmov	r3, s16
 8006aa0:	4652      	mov	r2, sl
 8006aa2:	4631      	mov	r1, r6
 8006aa4:	4628      	mov	r0, r5
 8006aa6:	47b8      	blx	r7
 8006aa8:	3001      	adds	r0, #1
 8006aaa:	d1be      	bne.n	8006a2a <_printf_float+0x32a>
 8006aac:	e689      	b.n	80067c2 <_printf_float+0xc2>
 8006aae:	9a05      	ldr	r2, [sp, #20]
 8006ab0:	464b      	mov	r3, r9
 8006ab2:	4442      	add	r2, r8
 8006ab4:	4631      	mov	r1, r6
 8006ab6:	4628      	mov	r0, r5
 8006ab8:	47b8      	blx	r7
 8006aba:	3001      	adds	r0, #1
 8006abc:	d1c1      	bne.n	8006a42 <_printf_float+0x342>
 8006abe:	e680      	b.n	80067c2 <_printf_float+0xc2>
 8006ac0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006ac2:	2a01      	cmp	r2, #1
 8006ac4:	dc01      	bgt.n	8006aca <_printf_float+0x3ca>
 8006ac6:	07db      	lsls	r3, r3, #31
 8006ac8:	d538      	bpl.n	8006b3c <_printf_float+0x43c>
 8006aca:	2301      	movs	r3, #1
 8006acc:	4642      	mov	r2, r8
 8006ace:	4631      	mov	r1, r6
 8006ad0:	4628      	mov	r0, r5
 8006ad2:	47b8      	blx	r7
 8006ad4:	3001      	adds	r0, #1
 8006ad6:	f43f ae74 	beq.w	80067c2 <_printf_float+0xc2>
 8006ada:	ee18 3a10 	vmov	r3, s16
 8006ade:	4652      	mov	r2, sl
 8006ae0:	4631      	mov	r1, r6
 8006ae2:	4628      	mov	r0, r5
 8006ae4:	47b8      	blx	r7
 8006ae6:	3001      	adds	r0, #1
 8006ae8:	f43f ae6b 	beq.w	80067c2 <_printf_float+0xc2>
 8006aec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006af0:	2200      	movs	r2, #0
 8006af2:	2300      	movs	r3, #0
 8006af4:	f7fa f808 	bl	8000b08 <__aeabi_dcmpeq>
 8006af8:	b9d8      	cbnz	r0, 8006b32 <_printf_float+0x432>
 8006afa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006afc:	f108 0201 	add.w	r2, r8, #1
 8006b00:	3b01      	subs	r3, #1
 8006b02:	4631      	mov	r1, r6
 8006b04:	4628      	mov	r0, r5
 8006b06:	47b8      	blx	r7
 8006b08:	3001      	adds	r0, #1
 8006b0a:	d10e      	bne.n	8006b2a <_printf_float+0x42a>
 8006b0c:	e659      	b.n	80067c2 <_printf_float+0xc2>
 8006b0e:	2301      	movs	r3, #1
 8006b10:	4652      	mov	r2, sl
 8006b12:	4631      	mov	r1, r6
 8006b14:	4628      	mov	r0, r5
 8006b16:	47b8      	blx	r7
 8006b18:	3001      	adds	r0, #1
 8006b1a:	f43f ae52 	beq.w	80067c2 <_printf_float+0xc2>
 8006b1e:	f108 0801 	add.w	r8, r8, #1
 8006b22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b24:	3b01      	subs	r3, #1
 8006b26:	4543      	cmp	r3, r8
 8006b28:	dcf1      	bgt.n	8006b0e <_printf_float+0x40e>
 8006b2a:	464b      	mov	r3, r9
 8006b2c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006b30:	e6dc      	b.n	80068ec <_printf_float+0x1ec>
 8006b32:	f04f 0800 	mov.w	r8, #0
 8006b36:	f104 0a1a 	add.w	sl, r4, #26
 8006b3a:	e7f2      	b.n	8006b22 <_printf_float+0x422>
 8006b3c:	2301      	movs	r3, #1
 8006b3e:	4642      	mov	r2, r8
 8006b40:	e7df      	b.n	8006b02 <_printf_float+0x402>
 8006b42:	2301      	movs	r3, #1
 8006b44:	464a      	mov	r2, r9
 8006b46:	4631      	mov	r1, r6
 8006b48:	4628      	mov	r0, r5
 8006b4a:	47b8      	blx	r7
 8006b4c:	3001      	adds	r0, #1
 8006b4e:	f43f ae38 	beq.w	80067c2 <_printf_float+0xc2>
 8006b52:	f108 0801 	add.w	r8, r8, #1
 8006b56:	68e3      	ldr	r3, [r4, #12]
 8006b58:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006b5a:	1a5b      	subs	r3, r3, r1
 8006b5c:	4543      	cmp	r3, r8
 8006b5e:	dcf0      	bgt.n	8006b42 <_printf_float+0x442>
 8006b60:	e6fa      	b.n	8006958 <_printf_float+0x258>
 8006b62:	f04f 0800 	mov.w	r8, #0
 8006b66:	f104 0919 	add.w	r9, r4, #25
 8006b6a:	e7f4      	b.n	8006b56 <_printf_float+0x456>

08006b6c <_printf_common>:
 8006b6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b70:	4616      	mov	r6, r2
 8006b72:	4699      	mov	r9, r3
 8006b74:	688a      	ldr	r2, [r1, #8]
 8006b76:	690b      	ldr	r3, [r1, #16]
 8006b78:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	bfb8      	it	lt
 8006b80:	4613      	movlt	r3, r2
 8006b82:	6033      	str	r3, [r6, #0]
 8006b84:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006b88:	4607      	mov	r7, r0
 8006b8a:	460c      	mov	r4, r1
 8006b8c:	b10a      	cbz	r2, 8006b92 <_printf_common+0x26>
 8006b8e:	3301      	adds	r3, #1
 8006b90:	6033      	str	r3, [r6, #0]
 8006b92:	6823      	ldr	r3, [r4, #0]
 8006b94:	0699      	lsls	r1, r3, #26
 8006b96:	bf42      	ittt	mi
 8006b98:	6833      	ldrmi	r3, [r6, #0]
 8006b9a:	3302      	addmi	r3, #2
 8006b9c:	6033      	strmi	r3, [r6, #0]
 8006b9e:	6825      	ldr	r5, [r4, #0]
 8006ba0:	f015 0506 	ands.w	r5, r5, #6
 8006ba4:	d106      	bne.n	8006bb4 <_printf_common+0x48>
 8006ba6:	f104 0a19 	add.w	sl, r4, #25
 8006baa:	68e3      	ldr	r3, [r4, #12]
 8006bac:	6832      	ldr	r2, [r6, #0]
 8006bae:	1a9b      	subs	r3, r3, r2
 8006bb0:	42ab      	cmp	r3, r5
 8006bb2:	dc26      	bgt.n	8006c02 <_printf_common+0x96>
 8006bb4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006bb8:	1e13      	subs	r3, r2, #0
 8006bba:	6822      	ldr	r2, [r4, #0]
 8006bbc:	bf18      	it	ne
 8006bbe:	2301      	movne	r3, #1
 8006bc0:	0692      	lsls	r2, r2, #26
 8006bc2:	d42b      	bmi.n	8006c1c <_printf_common+0xb0>
 8006bc4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006bc8:	4649      	mov	r1, r9
 8006bca:	4638      	mov	r0, r7
 8006bcc:	47c0      	blx	r8
 8006bce:	3001      	adds	r0, #1
 8006bd0:	d01e      	beq.n	8006c10 <_printf_common+0xa4>
 8006bd2:	6823      	ldr	r3, [r4, #0]
 8006bd4:	68e5      	ldr	r5, [r4, #12]
 8006bd6:	6832      	ldr	r2, [r6, #0]
 8006bd8:	f003 0306 	and.w	r3, r3, #6
 8006bdc:	2b04      	cmp	r3, #4
 8006bde:	bf08      	it	eq
 8006be0:	1aad      	subeq	r5, r5, r2
 8006be2:	68a3      	ldr	r3, [r4, #8]
 8006be4:	6922      	ldr	r2, [r4, #16]
 8006be6:	bf0c      	ite	eq
 8006be8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006bec:	2500      	movne	r5, #0
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	bfc4      	itt	gt
 8006bf2:	1a9b      	subgt	r3, r3, r2
 8006bf4:	18ed      	addgt	r5, r5, r3
 8006bf6:	2600      	movs	r6, #0
 8006bf8:	341a      	adds	r4, #26
 8006bfa:	42b5      	cmp	r5, r6
 8006bfc:	d11a      	bne.n	8006c34 <_printf_common+0xc8>
 8006bfe:	2000      	movs	r0, #0
 8006c00:	e008      	b.n	8006c14 <_printf_common+0xa8>
 8006c02:	2301      	movs	r3, #1
 8006c04:	4652      	mov	r2, sl
 8006c06:	4649      	mov	r1, r9
 8006c08:	4638      	mov	r0, r7
 8006c0a:	47c0      	blx	r8
 8006c0c:	3001      	adds	r0, #1
 8006c0e:	d103      	bne.n	8006c18 <_printf_common+0xac>
 8006c10:	f04f 30ff 	mov.w	r0, #4294967295
 8006c14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c18:	3501      	adds	r5, #1
 8006c1a:	e7c6      	b.n	8006baa <_printf_common+0x3e>
 8006c1c:	18e1      	adds	r1, r4, r3
 8006c1e:	1c5a      	adds	r2, r3, #1
 8006c20:	2030      	movs	r0, #48	; 0x30
 8006c22:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006c26:	4422      	add	r2, r4
 8006c28:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006c2c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006c30:	3302      	adds	r3, #2
 8006c32:	e7c7      	b.n	8006bc4 <_printf_common+0x58>
 8006c34:	2301      	movs	r3, #1
 8006c36:	4622      	mov	r2, r4
 8006c38:	4649      	mov	r1, r9
 8006c3a:	4638      	mov	r0, r7
 8006c3c:	47c0      	blx	r8
 8006c3e:	3001      	adds	r0, #1
 8006c40:	d0e6      	beq.n	8006c10 <_printf_common+0xa4>
 8006c42:	3601      	adds	r6, #1
 8006c44:	e7d9      	b.n	8006bfa <_printf_common+0x8e>
	...

08006c48 <_printf_i>:
 8006c48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006c4c:	7e0f      	ldrb	r7, [r1, #24]
 8006c4e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006c50:	2f78      	cmp	r7, #120	; 0x78
 8006c52:	4691      	mov	r9, r2
 8006c54:	4680      	mov	r8, r0
 8006c56:	460c      	mov	r4, r1
 8006c58:	469a      	mov	sl, r3
 8006c5a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006c5e:	d807      	bhi.n	8006c70 <_printf_i+0x28>
 8006c60:	2f62      	cmp	r7, #98	; 0x62
 8006c62:	d80a      	bhi.n	8006c7a <_printf_i+0x32>
 8006c64:	2f00      	cmp	r7, #0
 8006c66:	f000 80d8 	beq.w	8006e1a <_printf_i+0x1d2>
 8006c6a:	2f58      	cmp	r7, #88	; 0x58
 8006c6c:	f000 80a3 	beq.w	8006db6 <_printf_i+0x16e>
 8006c70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006c74:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006c78:	e03a      	b.n	8006cf0 <_printf_i+0xa8>
 8006c7a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006c7e:	2b15      	cmp	r3, #21
 8006c80:	d8f6      	bhi.n	8006c70 <_printf_i+0x28>
 8006c82:	a101      	add	r1, pc, #4	; (adr r1, 8006c88 <_printf_i+0x40>)
 8006c84:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006c88:	08006ce1 	.word	0x08006ce1
 8006c8c:	08006cf5 	.word	0x08006cf5
 8006c90:	08006c71 	.word	0x08006c71
 8006c94:	08006c71 	.word	0x08006c71
 8006c98:	08006c71 	.word	0x08006c71
 8006c9c:	08006c71 	.word	0x08006c71
 8006ca0:	08006cf5 	.word	0x08006cf5
 8006ca4:	08006c71 	.word	0x08006c71
 8006ca8:	08006c71 	.word	0x08006c71
 8006cac:	08006c71 	.word	0x08006c71
 8006cb0:	08006c71 	.word	0x08006c71
 8006cb4:	08006e01 	.word	0x08006e01
 8006cb8:	08006d25 	.word	0x08006d25
 8006cbc:	08006de3 	.word	0x08006de3
 8006cc0:	08006c71 	.word	0x08006c71
 8006cc4:	08006c71 	.word	0x08006c71
 8006cc8:	08006e23 	.word	0x08006e23
 8006ccc:	08006c71 	.word	0x08006c71
 8006cd0:	08006d25 	.word	0x08006d25
 8006cd4:	08006c71 	.word	0x08006c71
 8006cd8:	08006c71 	.word	0x08006c71
 8006cdc:	08006deb 	.word	0x08006deb
 8006ce0:	682b      	ldr	r3, [r5, #0]
 8006ce2:	1d1a      	adds	r2, r3, #4
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	602a      	str	r2, [r5, #0]
 8006ce8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006cec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006cf0:	2301      	movs	r3, #1
 8006cf2:	e0a3      	b.n	8006e3c <_printf_i+0x1f4>
 8006cf4:	6820      	ldr	r0, [r4, #0]
 8006cf6:	6829      	ldr	r1, [r5, #0]
 8006cf8:	0606      	lsls	r6, r0, #24
 8006cfa:	f101 0304 	add.w	r3, r1, #4
 8006cfe:	d50a      	bpl.n	8006d16 <_printf_i+0xce>
 8006d00:	680e      	ldr	r6, [r1, #0]
 8006d02:	602b      	str	r3, [r5, #0]
 8006d04:	2e00      	cmp	r6, #0
 8006d06:	da03      	bge.n	8006d10 <_printf_i+0xc8>
 8006d08:	232d      	movs	r3, #45	; 0x2d
 8006d0a:	4276      	negs	r6, r6
 8006d0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d10:	485e      	ldr	r0, [pc, #376]	; (8006e8c <_printf_i+0x244>)
 8006d12:	230a      	movs	r3, #10
 8006d14:	e019      	b.n	8006d4a <_printf_i+0x102>
 8006d16:	680e      	ldr	r6, [r1, #0]
 8006d18:	602b      	str	r3, [r5, #0]
 8006d1a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006d1e:	bf18      	it	ne
 8006d20:	b236      	sxthne	r6, r6
 8006d22:	e7ef      	b.n	8006d04 <_printf_i+0xbc>
 8006d24:	682b      	ldr	r3, [r5, #0]
 8006d26:	6820      	ldr	r0, [r4, #0]
 8006d28:	1d19      	adds	r1, r3, #4
 8006d2a:	6029      	str	r1, [r5, #0]
 8006d2c:	0601      	lsls	r1, r0, #24
 8006d2e:	d501      	bpl.n	8006d34 <_printf_i+0xec>
 8006d30:	681e      	ldr	r6, [r3, #0]
 8006d32:	e002      	b.n	8006d3a <_printf_i+0xf2>
 8006d34:	0646      	lsls	r6, r0, #25
 8006d36:	d5fb      	bpl.n	8006d30 <_printf_i+0xe8>
 8006d38:	881e      	ldrh	r6, [r3, #0]
 8006d3a:	4854      	ldr	r0, [pc, #336]	; (8006e8c <_printf_i+0x244>)
 8006d3c:	2f6f      	cmp	r7, #111	; 0x6f
 8006d3e:	bf0c      	ite	eq
 8006d40:	2308      	moveq	r3, #8
 8006d42:	230a      	movne	r3, #10
 8006d44:	2100      	movs	r1, #0
 8006d46:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006d4a:	6865      	ldr	r5, [r4, #4]
 8006d4c:	60a5      	str	r5, [r4, #8]
 8006d4e:	2d00      	cmp	r5, #0
 8006d50:	bfa2      	ittt	ge
 8006d52:	6821      	ldrge	r1, [r4, #0]
 8006d54:	f021 0104 	bicge.w	r1, r1, #4
 8006d58:	6021      	strge	r1, [r4, #0]
 8006d5a:	b90e      	cbnz	r6, 8006d60 <_printf_i+0x118>
 8006d5c:	2d00      	cmp	r5, #0
 8006d5e:	d04d      	beq.n	8006dfc <_printf_i+0x1b4>
 8006d60:	4615      	mov	r5, r2
 8006d62:	fbb6 f1f3 	udiv	r1, r6, r3
 8006d66:	fb03 6711 	mls	r7, r3, r1, r6
 8006d6a:	5dc7      	ldrb	r7, [r0, r7]
 8006d6c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006d70:	4637      	mov	r7, r6
 8006d72:	42bb      	cmp	r3, r7
 8006d74:	460e      	mov	r6, r1
 8006d76:	d9f4      	bls.n	8006d62 <_printf_i+0x11a>
 8006d78:	2b08      	cmp	r3, #8
 8006d7a:	d10b      	bne.n	8006d94 <_printf_i+0x14c>
 8006d7c:	6823      	ldr	r3, [r4, #0]
 8006d7e:	07de      	lsls	r6, r3, #31
 8006d80:	d508      	bpl.n	8006d94 <_printf_i+0x14c>
 8006d82:	6923      	ldr	r3, [r4, #16]
 8006d84:	6861      	ldr	r1, [r4, #4]
 8006d86:	4299      	cmp	r1, r3
 8006d88:	bfde      	ittt	le
 8006d8a:	2330      	movle	r3, #48	; 0x30
 8006d8c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006d90:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006d94:	1b52      	subs	r2, r2, r5
 8006d96:	6122      	str	r2, [r4, #16]
 8006d98:	f8cd a000 	str.w	sl, [sp]
 8006d9c:	464b      	mov	r3, r9
 8006d9e:	aa03      	add	r2, sp, #12
 8006da0:	4621      	mov	r1, r4
 8006da2:	4640      	mov	r0, r8
 8006da4:	f7ff fee2 	bl	8006b6c <_printf_common>
 8006da8:	3001      	adds	r0, #1
 8006daa:	d14c      	bne.n	8006e46 <_printf_i+0x1fe>
 8006dac:	f04f 30ff 	mov.w	r0, #4294967295
 8006db0:	b004      	add	sp, #16
 8006db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006db6:	4835      	ldr	r0, [pc, #212]	; (8006e8c <_printf_i+0x244>)
 8006db8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006dbc:	6829      	ldr	r1, [r5, #0]
 8006dbe:	6823      	ldr	r3, [r4, #0]
 8006dc0:	f851 6b04 	ldr.w	r6, [r1], #4
 8006dc4:	6029      	str	r1, [r5, #0]
 8006dc6:	061d      	lsls	r5, r3, #24
 8006dc8:	d514      	bpl.n	8006df4 <_printf_i+0x1ac>
 8006dca:	07df      	lsls	r7, r3, #31
 8006dcc:	bf44      	itt	mi
 8006dce:	f043 0320 	orrmi.w	r3, r3, #32
 8006dd2:	6023      	strmi	r3, [r4, #0]
 8006dd4:	b91e      	cbnz	r6, 8006dde <_printf_i+0x196>
 8006dd6:	6823      	ldr	r3, [r4, #0]
 8006dd8:	f023 0320 	bic.w	r3, r3, #32
 8006ddc:	6023      	str	r3, [r4, #0]
 8006dde:	2310      	movs	r3, #16
 8006de0:	e7b0      	b.n	8006d44 <_printf_i+0xfc>
 8006de2:	6823      	ldr	r3, [r4, #0]
 8006de4:	f043 0320 	orr.w	r3, r3, #32
 8006de8:	6023      	str	r3, [r4, #0]
 8006dea:	2378      	movs	r3, #120	; 0x78
 8006dec:	4828      	ldr	r0, [pc, #160]	; (8006e90 <_printf_i+0x248>)
 8006dee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006df2:	e7e3      	b.n	8006dbc <_printf_i+0x174>
 8006df4:	0659      	lsls	r1, r3, #25
 8006df6:	bf48      	it	mi
 8006df8:	b2b6      	uxthmi	r6, r6
 8006dfa:	e7e6      	b.n	8006dca <_printf_i+0x182>
 8006dfc:	4615      	mov	r5, r2
 8006dfe:	e7bb      	b.n	8006d78 <_printf_i+0x130>
 8006e00:	682b      	ldr	r3, [r5, #0]
 8006e02:	6826      	ldr	r6, [r4, #0]
 8006e04:	6961      	ldr	r1, [r4, #20]
 8006e06:	1d18      	adds	r0, r3, #4
 8006e08:	6028      	str	r0, [r5, #0]
 8006e0a:	0635      	lsls	r5, r6, #24
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	d501      	bpl.n	8006e14 <_printf_i+0x1cc>
 8006e10:	6019      	str	r1, [r3, #0]
 8006e12:	e002      	b.n	8006e1a <_printf_i+0x1d2>
 8006e14:	0670      	lsls	r0, r6, #25
 8006e16:	d5fb      	bpl.n	8006e10 <_printf_i+0x1c8>
 8006e18:	8019      	strh	r1, [r3, #0]
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	6123      	str	r3, [r4, #16]
 8006e1e:	4615      	mov	r5, r2
 8006e20:	e7ba      	b.n	8006d98 <_printf_i+0x150>
 8006e22:	682b      	ldr	r3, [r5, #0]
 8006e24:	1d1a      	adds	r2, r3, #4
 8006e26:	602a      	str	r2, [r5, #0]
 8006e28:	681d      	ldr	r5, [r3, #0]
 8006e2a:	6862      	ldr	r2, [r4, #4]
 8006e2c:	2100      	movs	r1, #0
 8006e2e:	4628      	mov	r0, r5
 8006e30:	f7f9 f9f6 	bl	8000220 <memchr>
 8006e34:	b108      	cbz	r0, 8006e3a <_printf_i+0x1f2>
 8006e36:	1b40      	subs	r0, r0, r5
 8006e38:	6060      	str	r0, [r4, #4]
 8006e3a:	6863      	ldr	r3, [r4, #4]
 8006e3c:	6123      	str	r3, [r4, #16]
 8006e3e:	2300      	movs	r3, #0
 8006e40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e44:	e7a8      	b.n	8006d98 <_printf_i+0x150>
 8006e46:	6923      	ldr	r3, [r4, #16]
 8006e48:	462a      	mov	r2, r5
 8006e4a:	4649      	mov	r1, r9
 8006e4c:	4640      	mov	r0, r8
 8006e4e:	47d0      	blx	sl
 8006e50:	3001      	adds	r0, #1
 8006e52:	d0ab      	beq.n	8006dac <_printf_i+0x164>
 8006e54:	6823      	ldr	r3, [r4, #0]
 8006e56:	079b      	lsls	r3, r3, #30
 8006e58:	d413      	bmi.n	8006e82 <_printf_i+0x23a>
 8006e5a:	68e0      	ldr	r0, [r4, #12]
 8006e5c:	9b03      	ldr	r3, [sp, #12]
 8006e5e:	4298      	cmp	r0, r3
 8006e60:	bfb8      	it	lt
 8006e62:	4618      	movlt	r0, r3
 8006e64:	e7a4      	b.n	8006db0 <_printf_i+0x168>
 8006e66:	2301      	movs	r3, #1
 8006e68:	4632      	mov	r2, r6
 8006e6a:	4649      	mov	r1, r9
 8006e6c:	4640      	mov	r0, r8
 8006e6e:	47d0      	blx	sl
 8006e70:	3001      	adds	r0, #1
 8006e72:	d09b      	beq.n	8006dac <_printf_i+0x164>
 8006e74:	3501      	adds	r5, #1
 8006e76:	68e3      	ldr	r3, [r4, #12]
 8006e78:	9903      	ldr	r1, [sp, #12]
 8006e7a:	1a5b      	subs	r3, r3, r1
 8006e7c:	42ab      	cmp	r3, r5
 8006e7e:	dcf2      	bgt.n	8006e66 <_printf_i+0x21e>
 8006e80:	e7eb      	b.n	8006e5a <_printf_i+0x212>
 8006e82:	2500      	movs	r5, #0
 8006e84:	f104 0619 	add.w	r6, r4, #25
 8006e88:	e7f5      	b.n	8006e76 <_printf_i+0x22e>
 8006e8a:	bf00      	nop
 8006e8c:	080095e2 	.word	0x080095e2
 8006e90:	080095f3 	.word	0x080095f3

08006e94 <siprintf>:
 8006e94:	b40e      	push	{r1, r2, r3}
 8006e96:	b500      	push	{lr}
 8006e98:	b09c      	sub	sp, #112	; 0x70
 8006e9a:	ab1d      	add	r3, sp, #116	; 0x74
 8006e9c:	9002      	str	r0, [sp, #8]
 8006e9e:	9006      	str	r0, [sp, #24]
 8006ea0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006ea4:	4809      	ldr	r0, [pc, #36]	; (8006ecc <siprintf+0x38>)
 8006ea6:	9107      	str	r1, [sp, #28]
 8006ea8:	9104      	str	r1, [sp, #16]
 8006eaa:	4909      	ldr	r1, [pc, #36]	; (8006ed0 <siprintf+0x3c>)
 8006eac:	f853 2b04 	ldr.w	r2, [r3], #4
 8006eb0:	9105      	str	r1, [sp, #20]
 8006eb2:	6800      	ldr	r0, [r0, #0]
 8006eb4:	9301      	str	r3, [sp, #4]
 8006eb6:	a902      	add	r1, sp, #8
 8006eb8:	f001 fb6a 	bl	8008590 <_svfiprintf_r>
 8006ebc:	9b02      	ldr	r3, [sp, #8]
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	701a      	strb	r2, [r3, #0]
 8006ec2:	b01c      	add	sp, #112	; 0x70
 8006ec4:	f85d eb04 	ldr.w	lr, [sp], #4
 8006ec8:	b003      	add	sp, #12
 8006eca:	4770      	bx	lr
 8006ecc:	2000000c 	.word	0x2000000c
 8006ed0:	ffff0208 	.word	0xffff0208

08006ed4 <quorem>:
 8006ed4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ed8:	6903      	ldr	r3, [r0, #16]
 8006eda:	690c      	ldr	r4, [r1, #16]
 8006edc:	42a3      	cmp	r3, r4
 8006ede:	4607      	mov	r7, r0
 8006ee0:	f2c0 8081 	blt.w	8006fe6 <quorem+0x112>
 8006ee4:	3c01      	subs	r4, #1
 8006ee6:	f101 0814 	add.w	r8, r1, #20
 8006eea:	f100 0514 	add.w	r5, r0, #20
 8006eee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006ef2:	9301      	str	r3, [sp, #4]
 8006ef4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006ef8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006efc:	3301      	adds	r3, #1
 8006efe:	429a      	cmp	r2, r3
 8006f00:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006f04:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006f08:	fbb2 f6f3 	udiv	r6, r2, r3
 8006f0c:	d331      	bcc.n	8006f72 <quorem+0x9e>
 8006f0e:	f04f 0e00 	mov.w	lr, #0
 8006f12:	4640      	mov	r0, r8
 8006f14:	46ac      	mov	ip, r5
 8006f16:	46f2      	mov	sl, lr
 8006f18:	f850 2b04 	ldr.w	r2, [r0], #4
 8006f1c:	b293      	uxth	r3, r2
 8006f1e:	fb06 e303 	mla	r3, r6, r3, lr
 8006f22:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006f26:	b29b      	uxth	r3, r3
 8006f28:	ebaa 0303 	sub.w	r3, sl, r3
 8006f2c:	f8dc a000 	ldr.w	sl, [ip]
 8006f30:	0c12      	lsrs	r2, r2, #16
 8006f32:	fa13 f38a 	uxtah	r3, r3, sl
 8006f36:	fb06 e202 	mla	r2, r6, r2, lr
 8006f3a:	9300      	str	r3, [sp, #0]
 8006f3c:	9b00      	ldr	r3, [sp, #0]
 8006f3e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006f42:	b292      	uxth	r2, r2
 8006f44:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006f48:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006f4c:	f8bd 3000 	ldrh.w	r3, [sp]
 8006f50:	4581      	cmp	r9, r0
 8006f52:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006f56:	f84c 3b04 	str.w	r3, [ip], #4
 8006f5a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006f5e:	d2db      	bcs.n	8006f18 <quorem+0x44>
 8006f60:	f855 300b 	ldr.w	r3, [r5, fp]
 8006f64:	b92b      	cbnz	r3, 8006f72 <quorem+0x9e>
 8006f66:	9b01      	ldr	r3, [sp, #4]
 8006f68:	3b04      	subs	r3, #4
 8006f6a:	429d      	cmp	r5, r3
 8006f6c:	461a      	mov	r2, r3
 8006f6e:	d32e      	bcc.n	8006fce <quorem+0xfa>
 8006f70:	613c      	str	r4, [r7, #16]
 8006f72:	4638      	mov	r0, r7
 8006f74:	f001 f8b8 	bl	80080e8 <__mcmp>
 8006f78:	2800      	cmp	r0, #0
 8006f7a:	db24      	blt.n	8006fc6 <quorem+0xf2>
 8006f7c:	3601      	adds	r6, #1
 8006f7e:	4628      	mov	r0, r5
 8006f80:	f04f 0c00 	mov.w	ip, #0
 8006f84:	f858 2b04 	ldr.w	r2, [r8], #4
 8006f88:	f8d0 e000 	ldr.w	lr, [r0]
 8006f8c:	b293      	uxth	r3, r2
 8006f8e:	ebac 0303 	sub.w	r3, ip, r3
 8006f92:	0c12      	lsrs	r2, r2, #16
 8006f94:	fa13 f38e 	uxtah	r3, r3, lr
 8006f98:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006f9c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006fa0:	b29b      	uxth	r3, r3
 8006fa2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006fa6:	45c1      	cmp	r9, r8
 8006fa8:	f840 3b04 	str.w	r3, [r0], #4
 8006fac:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006fb0:	d2e8      	bcs.n	8006f84 <quorem+0xb0>
 8006fb2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006fb6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006fba:	b922      	cbnz	r2, 8006fc6 <quorem+0xf2>
 8006fbc:	3b04      	subs	r3, #4
 8006fbe:	429d      	cmp	r5, r3
 8006fc0:	461a      	mov	r2, r3
 8006fc2:	d30a      	bcc.n	8006fda <quorem+0x106>
 8006fc4:	613c      	str	r4, [r7, #16]
 8006fc6:	4630      	mov	r0, r6
 8006fc8:	b003      	add	sp, #12
 8006fca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fce:	6812      	ldr	r2, [r2, #0]
 8006fd0:	3b04      	subs	r3, #4
 8006fd2:	2a00      	cmp	r2, #0
 8006fd4:	d1cc      	bne.n	8006f70 <quorem+0x9c>
 8006fd6:	3c01      	subs	r4, #1
 8006fd8:	e7c7      	b.n	8006f6a <quorem+0x96>
 8006fda:	6812      	ldr	r2, [r2, #0]
 8006fdc:	3b04      	subs	r3, #4
 8006fde:	2a00      	cmp	r2, #0
 8006fe0:	d1f0      	bne.n	8006fc4 <quorem+0xf0>
 8006fe2:	3c01      	subs	r4, #1
 8006fe4:	e7eb      	b.n	8006fbe <quorem+0xea>
 8006fe6:	2000      	movs	r0, #0
 8006fe8:	e7ee      	b.n	8006fc8 <quorem+0xf4>
 8006fea:	0000      	movs	r0, r0
 8006fec:	0000      	movs	r0, r0
	...

08006ff0 <_dtoa_r>:
 8006ff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ff4:	ed2d 8b04 	vpush	{d8-d9}
 8006ff8:	ec57 6b10 	vmov	r6, r7, d0
 8006ffc:	b093      	sub	sp, #76	; 0x4c
 8006ffe:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007000:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007004:	9106      	str	r1, [sp, #24]
 8007006:	ee10 aa10 	vmov	sl, s0
 800700a:	4604      	mov	r4, r0
 800700c:	9209      	str	r2, [sp, #36]	; 0x24
 800700e:	930c      	str	r3, [sp, #48]	; 0x30
 8007010:	46bb      	mov	fp, r7
 8007012:	b975      	cbnz	r5, 8007032 <_dtoa_r+0x42>
 8007014:	2010      	movs	r0, #16
 8007016:	f000 fddd 	bl	8007bd4 <malloc>
 800701a:	4602      	mov	r2, r0
 800701c:	6260      	str	r0, [r4, #36]	; 0x24
 800701e:	b920      	cbnz	r0, 800702a <_dtoa_r+0x3a>
 8007020:	4ba7      	ldr	r3, [pc, #668]	; (80072c0 <_dtoa_r+0x2d0>)
 8007022:	21ea      	movs	r1, #234	; 0xea
 8007024:	48a7      	ldr	r0, [pc, #668]	; (80072c4 <_dtoa_r+0x2d4>)
 8007026:	f001 fbc3 	bl	80087b0 <__assert_func>
 800702a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800702e:	6005      	str	r5, [r0, #0]
 8007030:	60c5      	str	r5, [r0, #12]
 8007032:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007034:	6819      	ldr	r1, [r3, #0]
 8007036:	b151      	cbz	r1, 800704e <_dtoa_r+0x5e>
 8007038:	685a      	ldr	r2, [r3, #4]
 800703a:	604a      	str	r2, [r1, #4]
 800703c:	2301      	movs	r3, #1
 800703e:	4093      	lsls	r3, r2
 8007040:	608b      	str	r3, [r1, #8]
 8007042:	4620      	mov	r0, r4
 8007044:	f000 fe0e 	bl	8007c64 <_Bfree>
 8007048:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800704a:	2200      	movs	r2, #0
 800704c:	601a      	str	r2, [r3, #0]
 800704e:	1e3b      	subs	r3, r7, #0
 8007050:	bfaa      	itet	ge
 8007052:	2300      	movge	r3, #0
 8007054:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007058:	f8c8 3000 	strge.w	r3, [r8]
 800705c:	4b9a      	ldr	r3, [pc, #616]	; (80072c8 <_dtoa_r+0x2d8>)
 800705e:	bfbc      	itt	lt
 8007060:	2201      	movlt	r2, #1
 8007062:	f8c8 2000 	strlt.w	r2, [r8]
 8007066:	ea33 030b 	bics.w	r3, r3, fp
 800706a:	d11b      	bne.n	80070a4 <_dtoa_r+0xb4>
 800706c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800706e:	f242 730f 	movw	r3, #9999	; 0x270f
 8007072:	6013      	str	r3, [r2, #0]
 8007074:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007078:	4333      	orrs	r3, r6
 800707a:	f000 8592 	beq.w	8007ba2 <_dtoa_r+0xbb2>
 800707e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007080:	b963      	cbnz	r3, 800709c <_dtoa_r+0xac>
 8007082:	4b92      	ldr	r3, [pc, #584]	; (80072cc <_dtoa_r+0x2dc>)
 8007084:	e022      	b.n	80070cc <_dtoa_r+0xdc>
 8007086:	4b92      	ldr	r3, [pc, #584]	; (80072d0 <_dtoa_r+0x2e0>)
 8007088:	9301      	str	r3, [sp, #4]
 800708a:	3308      	adds	r3, #8
 800708c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800708e:	6013      	str	r3, [r2, #0]
 8007090:	9801      	ldr	r0, [sp, #4]
 8007092:	b013      	add	sp, #76	; 0x4c
 8007094:	ecbd 8b04 	vpop	{d8-d9}
 8007098:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800709c:	4b8b      	ldr	r3, [pc, #556]	; (80072cc <_dtoa_r+0x2dc>)
 800709e:	9301      	str	r3, [sp, #4]
 80070a0:	3303      	adds	r3, #3
 80070a2:	e7f3      	b.n	800708c <_dtoa_r+0x9c>
 80070a4:	2200      	movs	r2, #0
 80070a6:	2300      	movs	r3, #0
 80070a8:	4650      	mov	r0, sl
 80070aa:	4659      	mov	r1, fp
 80070ac:	f7f9 fd2c 	bl	8000b08 <__aeabi_dcmpeq>
 80070b0:	ec4b ab19 	vmov	d9, sl, fp
 80070b4:	4680      	mov	r8, r0
 80070b6:	b158      	cbz	r0, 80070d0 <_dtoa_r+0xe0>
 80070b8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80070ba:	2301      	movs	r3, #1
 80070bc:	6013      	str	r3, [r2, #0]
 80070be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	f000 856b 	beq.w	8007b9c <_dtoa_r+0xbac>
 80070c6:	4883      	ldr	r0, [pc, #524]	; (80072d4 <_dtoa_r+0x2e4>)
 80070c8:	6018      	str	r0, [r3, #0]
 80070ca:	1e43      	subs	r3, r0, #1
 80070cc:	9301      	str	r3, [sp, #4]
 80070ce:	e7df      	b.n	8007090 <_dtoa_r+0xa0>
 80070d0:	ec4b ab10 	vmov	d0, sl, fp
 80070d4:	aa10      	add	r2, sp, #64	; 0x40
 80070d6:	a911      	add	r1, sp, #68	; 0x44
 80070d8:	4620      	mov	r0, r4
 80070da:	f001 f8ab 	bl	8008234 <__d2b>
 80070de:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80070e2:	ee08 0a10 	vmov	s16, r0
 80070e6:	2d00      	cmp	r5, #0
 80070e8:	f000 8084 	beq.w	80071f4 <_dtoa_r+0x204>
 80070ec:	ee19 3a90 	vmov	r3, s19
 80070f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80070f4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80070f8:	4656      	mov	r6, sl
 80070fa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80070fe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007102:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8007106:	4b74      	ldr	r3, [pc, #464]	; (80072d8 <_dtoa_r+0x2e8>)
 8007108:	2200      	movs	r2, #0
 800710a:	4630      	mov	r0, r6
 800710c:	4639      	mov	r1, r7
 800710e:	f7f9 f8db 	bl	80002c8 <__aeabi_dsub>
 8007112:	a365      	add	r3, pc, #404	; (adr r3, 80072a8 <_dtoa_r+0x2b8>)
 8007114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007118:	f7f9 fa8e 	bl	8000638 <__aeabi_dmul>
 800711c:	a364      	add	r3, pc, #400	; (adr r3, 80072b0 <_dtoa_r+0x2c0>)
 800711e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007122:	f7f9 f8d3 	bl	80002cc <__adddf3>
 8007126:	4606      	mov	r6, r0
 8007128:	4628      	mov	r0, r5
 800712a:	460f      	mov	r7, r1
 800712c:	f7f9 fa1a 	bl	8000564 <__aeabi_i2d>
 8007130:	a361      	add	r3, pc, #388	; (adr r3, 80072b8 <_dtoa_r+0x2c8>)
 8007132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007136:	f7f9 fa7f 	bl	8000638 <__aeabi_dmul>
 800713a:	4602      	mov	r2, r0
 800713c:	460b      	mov	r3, r1
 800713e:	4630      	mov	r0, r6
 8007140:	4639      	mov	r1, r7
 8007142:	f7f9 f8c3 	bl	80002cc <__adddf3>
 8007146:	4606      	mov	r6, r0
 8007148:	460f      	mov	r7, r1
 800714a:	f7f9 fd25 	bl	8000b98 <__aeabi_d2iz>
 800714e:	2200      	movs	r2, #0
 8007150:	9000      	str	r0, [sp, #0]
 8007152:	2300      	movs	r3, #0
 8007154:	4630      	mov	r0, r6
 8007156:	4639      	mov	r1, r7
 8007158:	f7f9 fce0 	bl	8000b1c <__aeabi_dcmplt>
 800715c:	b150      	cbz	r0, 8007174 <_dtoa_r+0x184>
 800715e:	9800      	ldr	r0, [sp, #0]
 8007160:	f7f9 fa00 	bl	8000564 <__aeabi_i2d>
 8007164:	4632      	mov	r2, r6
 8007166:	463b      	mov	r3, r7
 8007168:	f7f9 fcce 	bl	8000b08 <__aeabi_dcmpeq>
 800716c:	b910      	cbnz	r0, 8007174 <_dtoa_r+0x184>
 800716e:	9b00      	ldr	r3, [sp, #0]
 8007170:	3b01      	subs	r3, #1
 8007172:	9300      	str	r3, [sp, #0]
 8007174:	9b00      	ldr	r3, [sp, #0]
 8007176:	2b16      	cmp	r3, #22
 8007178:	d85a      	bhi.n	8007230 <_dtoa_r+0x240>
 800717a:	9a00      	ldr	r2, [sp, #0]
 800717c:	4b57      	ldr	r3, [pc, #348]	; (80072dc <_dtoa_r+0x2ec>)
 800717e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007186:	ec51 0b19 	vmov	r0, r1, d9
 800718a:	f7f9 fcc7 	bl	8000b1c <__aeabi_dcmplt>
 800718e:	2800      	cmp	r0, #0
 8007190:	d050      	beq.n	8007234 <_dtoa_r+0x244>
 8007192:	9b00      	ldr	r3, [sp, #0]
 8007194:	3b01      	subs	r3, #1
 8007196:	9300      	str	r3, [sp, #0]
 8007198:	2300      	movs	r3, #0
 800719a:	930b      	str	r3, [sp, #44]	; 0x2c
 800719c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800719e:	1b5d      	subs	r5, r3, r5
 80071a0:	1e6b      	subs	r3, r5, #1
 80071a2:	9305      	str	r3, [sp, #20]
 80071a4:	bf45      	ittet	mi
 80071a6:	f1c5 0301 	rsbmi	r3, r5, #1
 80071aa:	9304      	strmi	r3, [sp, #16]
 80071ac:	2300      	movpl	r3, #0
 80071ae:	2300      	movmi	r3, #0
 80071b0:	bf4c      	ite	mi
 80071b2:	9305      	strmi	r3, [sp, #20]
 80071b4:	9304      	strpl	r3, [sp, #16]
 80071b6:	9b00      	ldr	r3, [sp, #0]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	db3d      	blt.n	8007238 <_dtoa_r+0x248>
 80071bc:	9b05      	ldr	r3, [sp, #20]
 80071be:	9a00      	ldr	r2, [sp, #0]
 80071c0:	920a      	str	r2, [sp, #40]	; 0x28
 80071c2:	4413      	add	r3, r2
 80071c4:	9305      	str	r3, [sp, #20]
 80071c6:	2300      	movs	r3, #0
 80071c8:	9307      	str	r3, [sp, #28]
 80071ca:	9b06      	ldr	r3, [sp, #24]
 80071cc:	2b09      	cmp	r3, #9
 80071ce:	f200 8089 	bhi.w	80072e4 <_dtoa_r+0x2f4>
 80071d2:	2b05      	cmp	r3, #5
 80071d4:	bfc4      	itt	gt
 80071d6:	3b04      	subgt	r3, #4
 80071d8:	9306      	strgt	r3, [sp, #24]
 80071da:	9b06      	ldr	r3, [sp, #24]
 80071dc:	f1a3 0302 	sub.w	r3, r3, #2
 80071e0:	bfcc      	ite	gt
 80071e2:	2500      	movgt	r5, #0
 80071e4:	2501      	movle	r5, #1
 80071e6:	2b03      	cmp	r3, #3
 80071e8:	f200 8087 	bhi.w	80072fa <_dtoa_r+0x30a>
 80071ec:	e8df f003 	tbb	[pc, r3]
 80071f0:	59383a2d 	.word	0x59383a2d
 80071f4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80071f8:	441d      	add	r5, r3
 80071fa:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80071fe:	2b20      	cmp	r3, #32
 8007200:	bfc1      	itttt	gt
 8007202:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007206:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800720a:	fa0b f303 	lslgt.w	r3, fp, r3
 800720e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007212:	bfda      	itte	le
 8007214:	f1c3 0320 	rsble	r3, r3, #32
 8007218:	fa06 f003 	lslle.w	r0, r6, r3
 800721c:	4318      	orrgt	r0, r3
 800721e:	f7f9 f991 	bl	8000544 <__aeabi_ui2d>
 8007222:	2301      	movs	r3, #1
 8007224:	4606      	mov	r6, r0
 8007226:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800722a:	3d01      	subs	r5, #1
 800722c:	930e      	str	r3, [sp, #56]	; 0x38
 800722e:	e76a      	b.n	8007106 <_dtoa_r+0x116>
 8007230:	2301      	movs	r3, #1
 8007232:	e7b2      	b.n	800719a <_dtoa_r+0x1aa>
 8007234:	900b      	str	r0, [sp, #44]	; 0x2c
 8007236:	e7b1      	b.n	800719c <_dtoa_r+0x1ac>
 8007238:	9b04      	ldr	r3, [sp, #16]
 800723a:	9a00      	ldr	r2, [sp, #0]
 800723c:	1a9b      	subs	r3, r3, r2
 800723e:	9304      	str	r3, [sp, #16]
 8007240:	4253      	negs	r3, r2
 8007242:	9307      	str	r3, [sp, #28]
 8007244:	2300      	movs	r3, #0
 8007246:	930a      	str	r3, [sp, #40]	; 0x28
 8007248:	e7bf      	b.n	80071ca <_dtoa_r+0x1da>
 800724a:	2300      	movs	r3, #0
 800724c:	9308      	str	r3, [sp, #32]
 800724e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007250:	2b00      	cmp	r3, #0
 8007252:	dc55      	bgt.n	8007300 <_dtoa_r+0x310>
 8007254:	2301      	movs	r3, #1
 8007256:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800725a:	461a      	mov	r2, r3
 800725c:	9209      	str	r2, [sp, #36]	; 0x24
 800725e:	e00c      	b.n	800727a <_dtoa_r+0x28a>
 8007260:	2301      	movs	r3, #1
 8007262:	e7f3      	b.n	800724c <_dtoa_r+0x25c>
 8007264:	2300      	movs	r3, #0
 8007266:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007268:	9308      	str	r3, [sp, #32]
 800726a:	9b00      	ldr	r3, [sp, #0]
 800726c:	4413      	add	r3, r2
 800726e:	9302      	str	r3, [sp, #8]
 8007270:	3301      	adds	r3, #1
 8007272:	2b01      	cmp	r3, #1
 8007274:	9303      	str	r3, [sp, #12]
 8007276:	bfb8      	it	lt
 8007278:	2301      	movlt	r3, #1
 800727a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800727c:	2200      	movs	r2, #0
 800727e:	6042      	str	r2, [r0, #4]
 8007280:	2204      	movs	r2, #4
 8007282:	f102 0614 	add.w	r6, r2, #20
 8007286:	429e      	cmp	r6, r3
 8007288:	6841      	ldr	r1, [r0, #4]
 800728a:	d93d      	bls.n	8007308 <_dtoa_r+0x318>
 800728c:	4620      	mov	r0, r4
 800728e:	f000 fca9 	bl	8007be4 <_Balloc>
 8007292:	9001      	str	r0, [sp, #4]
 8007294:	2800      	cmp	r0, #0
 8007296:	d13b      	bne.n	8007310 <_dtoa_r+0x320>
 8007298:	4b11      	ldr	r3, [pc, #68]	; (80072e0 <_dtoa_r+0x2f0>)
 800729a:	4602      	mov	r2, r0
 800729c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80072a0:	e6c0      	b.n	8007024 <_dtoa_r+0x34>
 80072a2:	2301      	movs	r3, #1
 80072a4:	e7df      	b.n	8007266 <_dtoa_r+0x276>
 80072a6:	bf00      	nop
 80072a8:	636f4361 	.word	0x636f4361
 80072ac:	3fd287a7 	.word	0x3fd287a7
 80072b0:	8b60c8b3 	.word	0x8b60c8b3
 80072b4:	3fc68a28 	.word	0x3fc68a28
 80072b8:	509f79fb 	.word	0x509f79fb
 80072bc:	3fd34413 	.word	0x3fd34413
 80072c0:	08009611 	.word	0x08009611
 80072c4:	08009628 	.word	0x08009628
 80072c8:	7ff00000 	.word	0x7ff00000
 80072cc:	0800960d 	.word	0x0800960d
 80072d0:	08009604 	.word	0x08009604
 80072d4:	080095e1 	.word	0x080095e1
 80072d8:	3ff80000 	.word	0x3ff80000
 80072dc:	08009718 	.word	0x08009718
 80072e0:	08009683 	.word	0x08009683
 80072e4:	2501      	movs	r5, #1
 80072e6:	2300      	movs	r3, #0
 80072e8:	9306      	str	r3, [sp, #24]
 80072ea:	9508      	str	r5, [sp, #32]
 80072ec:	f04f 33ff 	mov.w	r3, #4294967295
 80072f0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80072f4:	2200      	movs	r2, #0
 80072f6:	2312      	movs	r3, #18
 80072f8:	e7b0      	b.n	800725c <_dtoa_r+0x26c>
 80072fa:	2301      	movs	r3, #1
 80072fc:	9308      	str	r3, [sp, #32]
 80072fe:	e7f5      	b.n	80072ec <_dtoa_r+0x2fc>
 8007300:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007302:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007306:	e7b8      	b.n	800727a <_dtoa_r+0x28a>
 8007308:	3101      	adds	r1, #1
 800730a:	6041      	str	r1, [r0, #4]
 800730c:	0052      	lsls	r2, r2, #1
 800730e:	e7b8      	b.n	8007282 <_dtoa_r+0x292>
 8007310:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007312:	9a01      	ldr	r2, [sp, #4]
 8007314:	601a      	str	r2, [r3, #0]
 8007316:	9b03      	ldr	r3, [sp, #12]
 8007318:	2b0e      	cmp	r3, #14
 800731a:	f200 809d 	bhi.w	8007458 <_dtoa_r+0x468>
 800731e:	2d00      	cmp	r5, #0
 8007320:	f000 809a 	beq.w	8007458 <_dtoa_r+0x468>
 8007324:	9b00      	ldr	r3, [sp, #0]
 8007326:	2b00      	cmp	r3, #0
 8007328:	dd32      	ble.n	8007390 <_dtoa_r+0x3a0>
 800732a:	4ab7      	ldr	r2, [pc, #732]	; (8007608 <_dtoa_r+0x618>)
 800732c:	f003 030f 	and.w	r3, r3, #15
 8007330:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007334:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007338:	9b00      	ldr	r3, [sp, #0]
 800733a:	05d8      	lsls	r0, r3, #23
 800733c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8007340:	d516      	bpl.n	8007370 <_dtoa_r+0x380>
 8007342:	4bb2      	ldr	r3, [pc, #712]	; (800760c <_dtoa_r+0x61c>)
 8007344:	ec51 0b19 	vmov	r0, r1, d9
 8007348:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800734c:	f7f9 fa9e 	bl	800088c <__aeabi_ddiv>
 8007350:	f007 070f 	and.w	r7, r7, #15
 8007354:	4682      	mov	sl, r0
 8007356:	468b      	mov	fp, r1
 8007358:	2503      	movs	r5, #3
 800735a:	4eac      	ldr	r6, [pc, #688]	; (800760c <_dtoa_r+0x61c>)
 800735c:	b957      	cbnz	r7, 8007374 <_dtoa_r+0x384>
 800735e:	4642      	mov	r2, r8
 8007360:	464b      	mov	r3, r9
 8007362:	4650      	mov	r0, sl
 8007364:	4659      	mov	r1, fp
 8007366:	f7f9 fa91 	bl	800088c <__aeabi_ddiv>
 800736a:	4682      	mov	sl, r0
 800736c:	468b      	mov	fp, r1
 800736e:	e028      	b.n	80073c2 <_dtoa_r+0x3d2>
 8007370:	2502      	movs	r5, #2
 8007372:	e7f2      	b.n	800735a <_dtoa_r+0x36a>
 8007374:	07f9      	lsls	r1, r7, #31
 8007376:	d508      	bpl.n	800738a <_dtoa_r+0x39a>
 8007378:	4640      	mov	r0, r8
 800737a:	4649      	mov	r1, r9
 800737c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007380:	f7f9 f95a 	bl	8000638 <__aeabi_dmul>
 8007384:	3501      	adds	r5, #1
 8007386:	4680      	mov	r8, r0
 8007388:	4689      	mov	r9, r1
 800738a:	107f      	asrs	r7, r7, #1
 800738c:	3608      	adds	r6, #8
 800738e:	e7e5      	b.n	800735c <_dtoa_r+0x36c>
 8007390:	f000 809b 	beq.w	80074ca <_dtoa_r+0x4da>
 8007394:	9b00      	ldr	r3, [sp, #0]
 8007396:	4f9d      	ldr	r7, [pc, #628]	; (800760c <_dtoa_r+0x61c>)
 8007398:	425e      	negs	r6, r3
 800739a:	4b9b      	ldr	r3, [pc, #620]	; (8007608 <_dtoa_r+0x618>)
 800739c:	f006 020f 	and.w	r2, r6, #15
 80073a0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80073a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073a8:	ec51 0b19 	vmov	r0, r1, d9
 80073ac:	f7f9 f944 	bl	8000638 <__aeabi_dmul>
 80073b0:	1136      	asrs	r6, r6, #4
 80073b2:	4682      	mov	sl, r0
 80073b4:	468b      	mov	fp, r1
 80073b6:	2300      	movs	r3, #0
 80073b8:	2502      	movs	r5, #2
 80073ba:	2e00      	cmp	r6, #0
 80073bc:	d17a      	bne.n	80074b4 <_dtoa_r+0x4c4>
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d1d3      	bne.n	800736a <_dtoa_r+0x37a>
 80073c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	f000 8082 	beq.w	80074ce <_dtoa_r+0x4de>
 80073ca:	4b91      	ldr	r3, [pc, #580]	; (8007610 <_dtoa_r+0x620>)
 80073cc:	2200      	movs	r2, #0
 80073ce:	4650      	mov	r0, sl
 80073d0:	4659      	mov	r1, fp
 80073d2:	f7f9 fba3 	bl	8000b1c <__aeabi_dcmplt>
 80073d6:	2800      	cmp	r0, #0
 80073d8:	d079      	beq.n	80074ce <_dtoa_r+0x4de>
 80073da:	9b03      	ldr	r3, [sp, #12]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d076      	beq.n	80074ce <_dtoa_r+0x4de>
 80073e0:	9b02      	ldr	r3, [sp, #8]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	dd36      	ble.n	8007454 <_dtoa_r+0x464>
 80073e6:	9b00      	ldr	r3, [sp, #0]
 80073e8:	4650      	mov	r0, sl
 80073ea:	4659      	mov	r1, fp
 80073ec:	1e5f      	subs	r7, r3, #1
 80073ee:	2200      	movs	r2, #0
 80073f0:	4b88      	ldr	r3, [pc, #544]	; (8007614 <_dtoa_r+0x624>)
 80073f2:	f7f9 f921 	bl	8000638 <__aeabi_dmul>
 80073f6:	9e02      	ldr	r6, [sp, #8]
 80073f8:	4682      	mov	sl, r0
 80073fa:	468b      	mov	fp, r1
 80073fc:	3501      	adds	r5, #1
 80073fe:	4628      	mov	r0, r5
 8007400:	f7f9 f8b0 	bl	8000564 <__aeabi_i2d>
 8007404:	4652      	mov	r2, sl
 8007406:	465b      	mov	r3, fp
 8007408:	f7f9 f916 	bl	8000638 <__aeabi_dmul>
 800740c:	4b82      	ldr	r3, [pc, #520]	; (8007618 <_dtoa_r+0x628>)
 800740e:	2200      	movs	r2, #0
 8007410:	f7f8 ff5c 	bl	80002cc <__adddf3>
 8007414:	46d0      	mov	r8, sl
 8007416:	46d9      	mov	r9, fp
 8007418:	4682      	mov	sl, r0
 800741a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800741e:	2e00      	cmp	r6, #0
 8007420:	d158      	bne.n	80074d4 <_dtoa_r+0x4e4>
 8007422:	4b7e      	ldr	r3, [pc, #504]	; (800761c <_dtoa_r+0x62c>)
 8007424:	2200      	movs	r2, #0
 8007426:	4640      	mov	r0, r8
 8007428:	4649      	mov	r1, r9
 800742a:	f7f8 ff4d 	bl	80002c8 <__aeabi_dsub>
 800742e:	4652      	mov	r2, sl
 8007430:	465b      	mov	r3, fp
 8007432:	4680      	mov	r8, r0
 8007434:	4689      	mov	r9, r1
 8007436:	f7f9 fb8f 	bl	8000b58 <__aeabi_dcmpgt>
 800743a:	2800      	cmp	r0, #0
 800743c:	f040 8295 	bne.w	800796a <_dtoa_r+0x97a>
 8007440:	4652      	mov	r2, sl
 8007442:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007446:	4640      	mov	r0, r8
 8007448:	4649      	mov	r1, r9
 800744a:	f7f9 fb67 	bl	8000b1c <__aeabi_dcmplt>
 800744e:	2800      	cmp	r0, #0
 8007450:	f040 8289 	bne.w	8007966 <_dtoa_r+0x976>
 8007454:	ec5b ab19 	vmov	sl, fp, d9
 8007458:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800745a:	2b00      	cmp	r3, #0
 800745c:	f2c0 8148 	blt.w	80076f0 <_dtoa_r+0x700>
 8007460:	9a00      	ldr	r2, [sp, #0]
 8007462:	2a0e      	cmp	r2, #14
 8007464:	f300 8144 	bgt.w	80076f0 <_dtoa_r+0x700>
 8007468:	4b67      	ldr	r3, [pc, #412]	; (8007608 <_dtoa_r+0x618>)
 800746a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800746e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007472:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007474:	2b00      	cmp	r3, #0
 8007476:	f280 80d5 	bge.w	8007624 <_dtoa_r+0x634>
 800747a:	9b03      	ldr	r3, [sp, #12]
 800747c:	2b00      	cmp	r3, #0
 800747e:	f300 80d1 	bgt.w	8007624 <_dtoa_r+0x634>
 8007482:	f040 826f 	bne.w	8007964 <_dtoa_r+0x974>
 8007486:	4b65      	ldr	r3, [pc, #404]	; (800761c <_dtoa_r+0x62c>)
 8007488:	2200      	movs	r2, #0
 800748a:	4640      	mov	r0, r8
 800748c:	4649      	mov	r1, r9
 800748e:	f7f9 f8d3 	bl	8000638 <__aeabi_dmul>
 8007492:	4652      	mov	r2, sl
 8007494:	465b      	mov	r3, fp
 8007496:	f7f9 fb55 	bl	8000b44 <__aeabi_dcmpge>
 800749a:	9e03      	ldr	r6, [sp, #12]
 800749c:	4637      	mov	r7, r6
 800749e:	2800      	cmp	r0, #0
 80074a0:	f040 8245 	bne.w	800792e <_dtoa_r+0x93e>
 80074a4:	9d01      	ldr	r5, [sp, #4]
 80074a6:	2331      	movs	r3, #49	; 0x31
 80074a8:	f805 3b01 	strb.w	r3, [r5], #1
 80074ac:	9b00      	ldr	r3, [sp, #0]
 80074ae:	3301      	adds	r3, #1
 80074b0:	9300      	str	r3, [sp, #0]
 80074b2:	e240      	b.n	8007936 <_dtoa_r+0x946>
 80074b4:	07f2      	lsls	r2, r6, #31
 80074b6:	d505      	bpl.n	80074c4 <_dtoa_r+0x4d4>
 80074b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80074bc:	f7f9 f8bc 	bl	8000638 <__aeabi_dmul>
 80074c0:	3501      	adds	r5, #1
 80074c2:	2301      	movs	r3, #1
 80074c4:	1076      	asrs	r6, r6, #1
 80074c6:	3708      	adds	r7, #8
 80074c8:	e777      	b.n	80073ba <_dtoa_r+0x3ca>
 80074ca:	2502      	movs	r5, #2
 80074cc:	e779      	b.n	80073c2 <_dtoa_r+0x3d2>
 80074ce:	9f00      	ldr	r7, [sp, #0]
 80074d0:	9e03      	ldr	r6, [sp, #12]
 80074d2:	e794      	b.n	80073fe <_dtoa_r+0x40e>
 80074d4:	9901      	ldr	r1, [sp, #4]
 80074d6:	4b4c      	ldr	r3, [pc, #304]	; (8007608 <_dtoa_r+0x618>)
 80074d8:	4431      	add	r1, r6
 80074da:	910d      	str	r1, [sp, #52]	; 0x34
 80074dc:	9908      	ldr	r1, [sp, #32]
 80074de:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80074e2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80074e6:	2900      	cmp	r1, #0
 80074e8:	d043      	beq.n	8007572 <_dtoa_r+0x582>
 80074ea:	494d      	ldr	r1, [pc, #308]	; (8007620 <_dtoa_r+0x630>)
 80074ec:	2000      	movs	r0, #0
 80074ee:	f7f9 f9cd 	bl	800088c <__aeabi_ddiv>
 80074f2:	4652      	mov	r2, sl
 80074f4:	465b      	mov	r3, fp
 80074f6:	f7f8 fee7 	bl	80002c8 <__aeabi_dsub>
 80074fa:	9d01      	ldr	r5, [sp, #4]
 80074fc:	4682      	mov	sl, r0
 80074fe:	468b      	mov	fp, r1
 8007500:	4649      	mov	r1, r9
 8007502:	4640      	mov	r0, r8
 8007504:	f7f9 fb48 	bl	8000b98 <__aeabi_d2iz>
 8007508:	4606      	mov	r6, r0
 800750a:	f7f9 f82b 	bl	8000564 <__aeabi_i2d>
 800750e:	4602      	mov	r2, r0
 8007510:	460b      	mov	r3, r1
 8007512:	4640      	mov	r0, r8
 8007514:	4649      	mov	r1, r9
 8007516:	f7f8 fed7 	bl	80002c8 <__aeabi_dsub>
 800751a:	3630      	adds	r6, #48	; 0x30
 800751c:	f805 6b01 	strb.w	r6, [r5], #1
 8007520:	4652      	mov	r2, sl
 8007522:	465b      	mov	r3, fp
 8007524:	4680      	mov	r8, r0
 8007526:	4689      	mov	r9, r1
 8007528:	f7f9 faf8 	bl	8000b1c <__aeabi_dcmplt>
 800752c:	2800      	cmp	r0, #0
 800752e:	d163      	bne.n	80075f8 <_dtoa_r+0x608>
 8007530:	4642      	mov	r2, r8
 8007532:	464b      	mov	r3, r9
 8007534:	4936      	ldr	r1, [pc, #216]	; (8007610 <_dtoa_r+0x620>)
 8007536:	2000      	movs	r0, #0
 8007538:	f7f8 fec6 	bl	80002c8 <__aeabi_dsub>
 800753c:	4652      	mov	r2, sl
 800753e:	465b      	mov	r3, fp
 8007540:	f7f9 faec 	bl	8000b1c <__aeabi_dcmplt>
 8007544:	2800      	cmp	r0, #0
 8007546:	f040 80b5 	bne.w	80076b4 <_dtoa_r+0x6c4>
 800754a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800754c:	429d      	cmp	r5, r3
 800754e:	d081      	beq.n	8007454 <_dtoa_r+0x464>
 8007550:	4b30      	ldr	r3, [pc, #192]	; (8007614 <_dtoa_r+0x624>)
 8007552:	2200      	movs	r2, #0
 8007554:	4650      	mov	r0, sl
 8007556:	4659      	mov	r1, fp
 8007558:	f7f9 f86e 	bl	8000638 <__aeabi_dmul>
 800755c:	4b2d      	ldr	r3, [pc, #180]	; (8007614 <_dtoa_r+0x624>)
 800755e:	4682      	mov	sl, r0
 8007560:	468b      	mov	fp, r1
 8007562:	4640      	mov	r0, r8
 8007564:	4649      	mov	r1, r9
 8007566:	2200      	movs	r2, #0
 8007568:	f7f9 f866 	bl	8000638 <__aeabi_dmul>
 800756c:	4680      	mov	r8, r0
 800756e:	4689      	mov	r9, r1
 8007570:	e7c6      	b.n	8007500 <_dtoa_r+0x510>
 8007572:	4650      	mov	r0, sl
 8007574:	4659      	mov	r1, fp
 8007576:	f7f9 f85f 	bl	8000638 <__aeabi_dmul>
 800757a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800757c:	9d01      	ldr	r5, [sp, #4]
 800757e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007580:	4682      	mov	sl, r0
 8007582:	468b      	mov	fp, r1
 8007584:	4649      	mov	r1, r9
 8007586:	4640      	mov	r0, r8
 8007588:	f7f9 fb06 	bl	8000b98 <__aeabi_d2iz>
 800758c:	4606      	mov	r6, r0
 800758e:	f7f8 ffe9 	bl	8000564 <__aeabi_i2d>
 8007592:	3630      	adds	r6, #48	; 0x30
 8007594:	4602      	mov	r2, r0
 8007596:	460b      	mov	r3, r1
 8007598:	4640      	mov	r0, r8
 800759a:	4649      	mov	r1, r9
 800759c:	f7f8 fe94 	bl	80002c8 <__aeabi_dsub>
 80075a0:	f805 6b01 	strb.w	r6, [r5], #1
 80075a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80075a6:	429d      	cmp	r5, r3
 80075a8:	4680      	mov	r8, r0
 80075aa:	4689      	mov	r9, r1
 80075ac:	f04f 0200 	mov.w	r2, #0
 80075b0:	d124      	bne.n	80075fc <_dtoa_r+0x60c>
 80075b2:	4b1b      	ldr	r3, [pc, #108]	; (8007620 <_dtoa_r+0x630>)
 80075b4:	4650      	mov	r0, sl
 80075b6:	4659      	mov	r1, fp
 80075b8:	f7f8 fe88 	bl	80002cc <__adddf3>
 80075bc:	4602      	mov	r2, r0
 80075be:	460b      	mov	r3, r1
 80075c0:	4640      	mov	r0, r8
 80075c2:	4649      	mov	r1, r9
 80075c4:	f7f9 fac8 	bl	8000b58 <__aeabi_dcmpgt>
 80075c8:	2800      	cmp	r0, #0
 80075ca:	d173      	bne.n	80076b4 <_dtoa_r+0x6c4>
 80075cc:	4652      	mov	r2, sl
 80075ce:	465b      	mov	r3, fp
 80075d0:	4913      	ldr	r1, [pc, #76]	; (8007620 <_dtoa_r+0x630>)
 80075d2:	2000      	movs	r0, #0
 80075d4:	f7f8 fe78 	bl	80002c8 <__aeabi_dsub>
 80075d8:	4602      	mov	r2, r0
 80075da:	460b      	mov	r3, r1
 80075dc:	4640      	mov	r0, r8
 80075de:	4649      	mov	r1, r9
 80075e0:	f7f9 fa9c 	bl	8000b1c <__aeabi_dcmplt>
 80075e4:	2800      	cmp	r0, #0
 80075e6:	f43f af35 	beq.w	8007454 <_dtoa_r+0x464>
 80075ea:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80075ec:	1e6b      	subs	r3, r5, #1
 80075ee:	930f      	str	r3, [sp, #60]	; 0x3c
 80075f0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80075f4:	2b30      	cmp	r3, #48	; 0x30
 80075f6:	d0f8      	beq.n	80075ea <_dtoa_r+0x5fa>
 80075f8:	9700      	str	r7, [sp, #0]
 80075fa:	e049      	b.n	8007690 <_dtoa_r+0x6a0>
 80075fc:	4b05      	ldr	r3, [pc, #20]	; (8007614 <_dtoa_r+0x624>)
 80075fe:	f7f9 f81b 	bl	8000638 <__aeabi_dmul>
 8007602:	4680      	mov	r8, r0
 8007604:	4689      	mov	r9, r1
 8007606:	e7bd      	b.n	8007584 <_dtoa_r+0x594>
 8007608:	08009718 	.word	0x08009718
 800760c:	080096f0 	.word	0x080096f0
 8007610:	3ff00000 	.word	0x3ff00000
 8007614:	40240000 	.word	0x40240000
 8007618:	401c0000 	.word	0x401c0000
 800761c:	40140000 	.word	0x40140000
 8007620:	3fe00000 	.word	0x3fe00000
 8007624:	9d01      	ldr	r5, [sp, #4]
 8007626:	4656      	mov	r6, sl
 8007628:	465f      	mov	r7, fp
 800762a:	4642      	mov	r2, r8
 800762c:	464b      	mov	r3, r9
 800762e:	4630      	mov	r0, r6
 8007630:	4639      	mov	r1, r7
 8007632:	f7f9 f92b 	bl	800088c <__aeabi_ddiv>
 8007636:	f7f9 faaf 	bl	8000b98 <__aeabi_d2iz>
 800763a:	4682      	mov	sl, r0
 800763c:	f7f8 ff92 	bl	8000564 <__aeabi_i2d>
 8007640:	4642      	mov	r2, r8
 8007642:	464b      	mov	r3, r9
 8007644:	f7f8 fff8 	bl	8000638 <__aeabi_dmul>
 8007648:	4602      	mov	r2, r0
 800764a:	460b      	mov	r3, r1
 800764c:	4630      	mov	r0, r6
 800764e:	4639      	mov	r1, r7
 8007650:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8007654:	f7f8 fe38 	bl	80002c8 <__aeabi_dsub>
 8007658:	f805 6b01 	strb.w	r6, [r5], #1
 800765c:	9e01      	ldr	r6, [sp, #4]
 800765e:	9f03      	ldr	r7, [sp, #12]
 8007660:	1bae      	subs	r6, r5, r6
 8007662:	42b7      	cmp	r7, r6
 8007664:	4602      	mov	r2, r0
 8007666:	460b      	mov	r3, r1
 8007668:	d135      	bne.n	80076d6 <_dtoa_r+0x6e6>
 800766a:	f7f8 fe2f 	bl	80002cc <__adddf3>
 800766e:	4642      	mov	r2, r8
 8007670:	464b      	mov	r3, r9
 8007672:	4606      	mov	r6, r0
 8007674:	460f      	mov	r7, r1
 8007676:	f7f9 fa6f 	bl	8000b58 <__aeabi_dcmpgt>
 800767a:	b9d0      	cbnz	r0, 80076b2 <_dtoa_r+0x6c2>
 800767c:	4642      	mov	r2, r8
 800767e:	464b      	mov	r3, r9
 8007680:	4630      	mov	r0, r6
 8007682:	4639      	mov	r1, r7
 8007684:	f7f9 fa40 	bl	8000b08 <__aeabi_dcmpeq>
 8007688:	b110      	cbz	r0, 8007690 <_dtoa_r+0x6a0>
 800768a:	f01a 0f01 	tst.w	sl, #1
 800768e:	d110      	bne.n	80076b2 <_dtoa_r+0x6c2>
 8007690:	4620      	mov	r0, r4
 8007692:	ee18 1a10 	vmov	r1, s16
 8007696:	f000 fae5 	bl	8007c64 <_Bfree>
 800769a:	2300      	movs	r3, #0
 800769c:	9800      	ldr	r0, [sp, #0]
 800769e:	702b      	strb	r3, [r5, #0]
 80076a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80076a2:	3001      	adds	r0, #1
 80076a4:	6018      	str	r0, [r3, #0]
 80076a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	f43f acf1 	beq.w	8007090 <_dtoa_r+0xa0>
 80076ae:	601d      	str	r5, [r3, #0]
 80076b0:	e4ee      	b.n	8007090 <_dtoa_r+0xa0>
 80076b2:	9f00      	ldr	r7, [sp, #0]
 80076b4:	462b      	mov	r3, r5
 80076b6:	461d      	mov	r5, r3
 80076b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80076bc:	2a39      	cmp	r2, #57	; 0x39
 80076be:	d106      	bne.n	80076ce <_dtoa_r+0x6de>
 80076c0:	9a01      	ldr	r2, [sp, #4]
 80076c2:	429a      	cmp	r2, r3
 80076c4:	d1f7      	bne.n	80076b6 <_dtoa_r+0x6c6>
 80076c6:	9901      	ldr	r1, [sp, #4]
 80076c8:	2230      	movs	r2, #48	; 0x30
 80076ca:	3701      	adds	r7, #1
 80076cc:	700a      	strb	r2, [r1, #0]
 80076ce:	781a      	ldrb	r2, [r3, #0]
 80076d0:	3201      	adds	r2, #1
 80076d2:	701a      	strb	r2, [r3, #0]
 80076d4:	e790      	b.n	80075f8 <_dtoa_r+0x608>
 80076d6:	4ba6      	ldr	r3, [pc, #664]	; (8007970 <_dtoa_r+0x980>)
 80076d8:	2200      	movs	r2, #0
 80076da:	f7f8 ffad 	bl	8000638 <__aeabi_dmul>
 80076de:	2200      	movs	r2, #0
 80076e0:	2300      	movs	r3, #0
 80076e2:	4606      	mov	r6, r0
 80076e4:	460f      	mov	r7, r1
 80076e6:	f7f9 fa0f 	bl	8000b08 <__aeabi_dcmpeq>
 80076ea:	2800      	cmp	r0, #0
 80076ec:	d09d      	beq.n	800762a <_dtoa_r+0x63a>
 80076ee:	e7cf      	b.n	8007690 <_dtoa_r+0x6a0>
 80076f0:	9a08      	ldr	r2, [sp, #32]
 80076f2:	2a00      	cmp	r2, #0
 80076f4:	f000 80d7 	beq.w	80078a6 <_dtoa_r+0x8b6>
 80076f8:	9a06      	ldr	r2, [sp, #24]
 80076fa:	2a01      	cmp	r2, #1
 80076fc:	f300 80ba 	bgt.w	8007874 <_dtoa_r+0x884>
 8007700:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007702:	2a00      	cmp	r2, #0
 8007704:	f000 80b2 	beq.w	800786c <_dtoa_r+0x87c>
 8007708:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800770c:	9e07      	ldr	r6, [sp, #28]
 800770e:	9d04      	ldr	r5, [sp, #16]
 8007710:	9a04      	ldr	r2, [sp, #16]
 8007712:	441a      	add	r2, r3
 8007714:	9204      	str	r2, [sp, #16]
 8007716:	9a05      	ldr	r2, [sp, #20]
 8007718:	2101      	movs	r1, #1
 800771a:	441a      	add	r2, r3
 800771c:	4620      	mov	r0, r4
 800771e:	9205      	str	r2, [sp, #20]
 8007720:	f000 fb58 	bl	8007dd4 <__i2b>
 8007724:	4607      	mov	r7, r0
 8007726:	2d00      	cmp	r5, #0
 8007728:	dd0c      	ble.n	8007744 <_dtoa_r+0x754>
 800772a:	9b05      	ldr	r3, [sp, #20]
 800772c:	2b00      	cmp	r3, #0
 800772e:	dd09      	ble.n	8007744 <_dtoa_r+0x754>
 8007730:	42ab      	cmp	r3, r5
 8007732:	9a04      	ldr	r2, [sp, #16]
 8007734:	bfa8      	it	ge
 8007736:	462b      	movge	r3, r5
 8007738:	1ad2      	subs	r2, r2, r3
 800773a:	9204      	str	r2, [sp, #16]
 800773c:	9a05      	ldr	r2, [sp, #20]
 800773e:	1aed      	subs	r5, r5, r3
 8007740:	1ad3      	subs	r3, r2, r3
 8007742:	9305      	str	r3, [sp, #20]
 8007744:	9b07      	ldr	r3, [sp, #28]
 8007746:	b31b      	cbz	r3, 8007790 <_dtoa_r+0x7a0>
 8007748:	9b08      	ldr	r3, [sp, #32]
 800774a:	2b00      	cmp	r3, #0
 800774c:	f000 80af 	beq.w	80078ae <_dtoa_r+0x8be>
 8007750:	2e00      	cmp	r6, #0
 8007752:	dd13      	ble.n	800777c <_dtoa_r+0x78c>
 8007754:	4639      	mov	r1, r7
 8007756:	4632      	mov	r2, r6
 8007758:	4620      	mov	r0, r4
 800775a:	f000 fbfb 	bl	8007f54 <__pow5mult>
 800775e:	ee18 2a10 	vmov	r2, s16
 8007762:	4601      	mov	r1, r0
 8007764:	4607      	mov	r7, r0
 8007766:	4620      	mov	r0, r4
 8007768:	f000 fb4a 	bl	8007e00 <__multiply>
 800776c:	ee18 1a10 	vmov	r1, s16
 8007770:	4680      	mov	r8, r0
 8007772:	4620      	mov	r0, r4
 8007774:	f000 fa76 	bl	8007c64 <_Bfree>
 8007778:	ee08 8a10 	vmov	s16, r8
 800777c:	9b07      	ldr	r3, [sp, #28]
 800777e:	1b9a      	subs	r2, r3, r6
 8007780:	d006      	beq.n	8007790 <_dtoa_r+0x7a0>
 8007782:	ee18 1a10 	vmov	r1, s16
 8007786:	4620      	mov	r0, r4
 8007788:	f000 fbe4 	bl	8007f54 <__pow5mult>
 800778c:	ee08 0a10 	vmov	s16, r0
 8007790:	2101      	movs	r1, #1
 8007792:	4620      	mov	r0, r4
 8007794:	f000 fb1e 	bl	8007dd4 <__i2b>
 8007798:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800779a:	2b00      	cmp	r3, #0
 800779c:	4606      	mov	r6, r0
 800779e:	f340 8088 	ble.w	80078b2 <_dtoa_r+0x8c2>
 80077a2:	461a      	mov	r2, r3
 80077a4:	4601      	mov	r1, r0
 80077a6:	4620      	mov	r0, r4
 80077a8:	f000 fbd4 	bl	8007f54 <__pow5mult>
 80077ac:	9b06      	ldr	r3, [sp, #24]
 80077ae:	2b01      	cmp	r3, #1
 80077b0:	4606      	mov	r6, r0
 80077b2:	f340 8081 	ble.w	80078b8 <_dtoa_r+0x8c8>
 80077b6:	f04f 0800 	mov.w	r8, #0
 80077ba:	6933      	ldr	r3, [r6, #16]
 80077bc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80077c0:	6918      	ldr	r0, [r3, #16]
 80077c2:	f000 fab7 	bl	8007d34 <__hi0bits>
 80077c6:	f1c0 0020 	rsb	r0, r0, #32
 80077ca:	9b05      	ldr	r3, [sp, #20]
 80077cc:	4418      	add	r0, r3
 80077ce:	f010 001f 	ands.w	r0, r0, #31
 80077d2:	f000 8092 	beq.w	80078fa <_dtoa_r+0x90a>
 80077d6:	f1c0 0320 	rsb	r3, r0, #32
 80077da:	2b04      	cmp	r3, #4
 80077dc:	f340 808a 	ble.w	80078f4 <_dtoa_r+0x904>
 80077e0:	f1c0 001c 	rsb	r0, r0, #28
 80077e4:	9b04      	ldr	r3, [sp, #16]
 80077e6:	4403      	add	r3, r0
 80077e8:	9304      	str	r3, [sp, #16]
 80077ea:	9b05      	ldr	r3, [sp, #20]
 80077ec:	4403      	add	r3, r0
 80077ee:	4405      	add	r5, r0
 80077f0:	9305      	str	r3, [sp, #20]
 80077f2:	9b04      	ldr	r3, [sp, #16]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	dd07      	ble.n	8007808 <_dtoa_r+0x818>
 80077f8:	ee18 1a10 	vmov	r1, s16
 80077fc:	461a      	mov	r2, r3
 80077fe:	4620      	mov	r0, r4
 8007800:	f000 fc02 	bl	8008008 <__lshift>
 8007804:	ee08 0a10 	vmov	s16, r0
 8007808:	9b05      	ldr	r3, [sp, #20]
 800780a:	2b00      	cmp	r3, #0
 800780c:	dd05      	ble.n	800781a <_dtoa_r+0x82a>
 800780e:	4631      	mov	r1, r6
 8007810:	461a      	mov	r2, r3
 8007812:	4620      	mov	r0, r4
 8007814:	f000 fbf8 	bl	8008008 <__lshift>
 8007818:	4606      	mov	r6, r0
 800781a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800781c:	2b00      	cmp	r3, #0
 800781e:	d06e      	beq.n	80078fe <_dtoa_r+0x90e>
 8007820:	ee18 0a10 	vmov	r0, s16
 8007824:	4631      	mov	r1, r6
 8007826:	f000 fc5f 	bl	80080e8 <__mcmp>
 800782a:	2800      	cmp	r0, #0
 800782c:	da67      	bge.n	80078fe <_dtoa_r+0x90e>
 800782e:	9b00      	ldr	r3, [sp, #0]
 8007830:	3b01      	subs	r3, #1
 8007832:	ee18 1a10 	vmov	r1, s16
 8007836:	9300      	str	r3, [sp, #0]
 8007838:	220a      	movs	r2, #10
 800783a:	2300      	movs	r3, #0
 800783c:	4620      	mov	r0, r4
 800783e:	f000 fa33 	bl	8007ca8 <__multadd>
 8007842:	9b08      	ldr	r3, [sp, #32]
 8007844:	ee08 0a10 	vmov	s16, r0
 8007848:	2b00      	cmp	r3, #0
 800784a:	f000 81b1 	beq.w	8007bb0 <_dtoa_r+0xbc0>
 800784e:	2300      	movs	r3, #0
 8007850:	4639      	mov	r1, r7
 8007852:	220a      	movs	r2, #10
 8007854:	4620      	mov	r0, r4
 8007856:	f000 fa27 	bl	8007ca8 <__multadd>
 800785a:	9b02      	ldr	r3, [sp, #8]
 800785c:	2b00      	cmp	r3, #0
 800785e:	4607      	mov	r7, r0
 8007860:	f300 808e 	bgt.w	8007980 <_dtoa_r+0x990>
 8007864:	9b06      	ldr	r3, [sp, #24]
 8007866:	2b02      	cmp	r3, #2
 8007868:	dc51      	bgt.n	800790e <_dtoa_r+0x91e>
 800786a:	e089      	b.n	8007980 <_dtoa_r+0x990>
 800786c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800786e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007872:	e74b      	b.n	800770c <_dtoa_r+0x71c>
 8007874:	9b03      	ldr	r3, [sp, #12]
 8007876:	1e5e      	subs	r6, r3, #1
 8007878:	9b07      	ldr	r3, [sp, #28]
 800787a:	42b3      	cmp	r3, r6
 800787c:	bfbf      	itttt	lt
 800787e:	9b07      	ldrlt	r3, [sp, #28]
 8007880:	9607      	strlt	r6, [sp, #28]
 8007882:	1af2      	sublt	r2, r6, r3
 8007884:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007886:	bfb6      	itet	lt
 8007888:	189b      	addlt	r3, r3, r2
 800788a:	1b9e      	subge	r6, r3, r6
 800788c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800788e:	9b03      	ldr	r3, [sp, #12]
 8007890:	bfb8      	it	lt
 8007892:	2600      	movlt	r6, #0
 8007894:	2b00      	cmp	r3, #0
 8007896:	bfb7      	itett	lt
 8007898:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800789c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80078a0:	1a9d      	sublt	r5, r3, r2
 80078a2:	2300      	movlt	r3, #0
 80078a4:	e734      	b.n	8007710 <_dtoa_r+0x720>
 80078a6:	9e07      	ldr	r6, [sp, #28]
 80078a8:	9d04      	ldr	r5, [sp, #16]
 80078aa:	9f08      	ldr	r7, [sp, #32]
 80078ac:	e73b      	b.n	8007726 <_dtoa_r+0x736>
 80078ae:	9a07      	ldr	r2, [sp, #28]
 80078b0:	e767      	b.n	8007782 <_dtoa_r+0x792>
 80078b2:	9b06      	ldr	r3, [sp, #24]
 80078b4:	2b01      	cmp	r3, #1
 80078b6:	dc18      	bgt.n	80078ea <_dtoa_r+0x8fa>
 80078b8:	f1ba 0f00 	cmp.w	sl, #0
 80078bc:	d115      	bne.n	80078ea <_dtoa_r+0x8fa>
 80078be:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80078c2:	b993      	cbnz	r3, 80078ea <_dtoa_r+0x8fa>
 80078c4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80078c8:	0d1b      	lsrs	r3, r3, #20
 80078ca:	051b      	lsls	r3, r3, #20
 80078cc:	b183      	cbz	r3, 80078f0 <_dtoa_r+0x900>
 80078ce:	9b04      	ldr	r3, [sp, #16]
 80078d0:	3301      	adds	r3, #1
 80078d2:	9304      	str	r3, [sp, #16]
 80078d4:	9b05      	ldr	r3, [sp, #20]
 80078d6:	3301      	adds	r3, #1
 80078d8:	9305      	str	r3, [sp, #20]
 80078da:	f04f 0801 	mov.w	r8, #1
 80078de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	f47f af6a 	bne.w	80077ba <_dtoa_r+0x7ca>
 80078e6:	2001      	movs	r0, #1
 80078e8:	e76f      	b.n	80077ca <_dtoa_r+0x7da>
 80078ea:	f04f 0800 	mov.w	r8, #0
 80078ee:	e7f6      	b.n	80078de <_dtoa_r+0x8ee>
 80078f0:	4698      	mov	r8, r3
 80078f2:	e7f4      	b.n	80078de <_dtoa_r+0x8ee>
 80078f4:	f43f af7d 	beq.w	80077f2 <_dtoa_r+0x802>
 80078f8:	4618      	mov	r0, r3
 80078fa:	301c      	adds	r0, #28
 80078fc:	e772      	b.n	80077e4 <_dtoa_r+0x7f4>
 80078fe:	9b03      	ldr	r3, [sp, #12]
 8007900:	2b00      	cmp	r3, #0
 8007902:	dc37      	bgt.n	8007974 <_dtoa_r+0x984>
 8007904:	9b06      	ldr	r3, [sp, #24]
 8007906:	2b02      	cmp	r3, #2
 8007908:	dd34      	ble.n	8007974 <_dtoa_r+0x984>
 800790a:	9b03      	ldr	r3, [sp, #12]
 800790c:	9302      	str	r3, [sp, #8]
 800790e:	9b02      	ldr	r3, [sp, #8]
 8007910:	b96b      	cbnz	r3, 800792e <_dtoa_r+0x93e>
 8007912:	4631      	mov	r1, r6
 8007914:	2205      	movs	r2, #5
 8007916:	4620      	mov	r0, r4
 8007918:	f000 f9c6 	bl	8007ca8 <__multadd>
 800791c:	4601      	mov	r1, r0
 800791e:	4606      	mov	r6, r0
 8007920:	ee18 0a10 	vmov	r0, s16
 8007924:	f000 fbe0 	bl	80080e8 <__mcmp>
 8007928:	2800      	cmp	r0, #0
 800792a:	f73f adbb 	bgt.w	80074a4 <_dtoa_r+0x4b4>
 800792e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007930:	9d01      	ldr	r5, [sp, #4]
 8007932:	43db      	mvns	r3, r3
 8007934:	9300      	str	r3, [sp, #0]
 8007936:	f04f 0800 	mov.w	r8, #0
 800793a:	4631      	mov	r1, r6
 800793c:	4620      	mov	r0, r4
 800793e:	f000 f991 	bl	8007c64 <_Bfree>
 8007942:	2f00      	cmp	r7, #0
 8007944:	f43f aea4 	beq.w	8007690 <_dtoa_r+0x6a0>
 8007948:	f1b8 0f00 	cmp.w	r8, #0
 800794c:	d005      	beq.n	800795a <_dtoa_r+0x96a>
 800794e:	45b8      	cmp	r8, r7
 8007950:	d003      	beq.n	800795a <_dtoa_r+0x96a>
 8007952:	4641      	mov	r1, r8
 8007954:	4620      	mov	r0, r4
 8007956:	f000 f985 	bl	8007c64 <_Bfree>
 800795a:	4639      	mov	r1, r7
 800795c:	4620      	mov	r0, r4
 800795e:	f000 f981 	bl	8007c64 <_Bfree>
 8007962:	e695      	b.n	8007690 <_dtoa_r+0x6a0>
 8007964:	2600      	movs	r6, #0
 8007966:	4637      	mov	r7, r6
 8007968:	e7e1      	b.n	800792e <_dtoa_r+0x93e>
 800796a:	9700      	str	r7, [sp, #0]
 800796c:	4637      	mov	r7, r6
 800796e:	e599      	b.n	80074a4 <_dtoa_r+0x4b4>
 8007970:	40240000 	.word	0x40240000
 8007974:	9b08      	ldr	r3, [sp, #32]
 8007976:	2b00      	cmp	r3, #0
 8007978:	f000 80ca 	beq.w	8007b10 <_dtoa_r+0xb20>
 800797c:	9b03      	ldr	r3, [sp, #12]
 800797e:	9302      	str	r3, [sp, #8]
 8007980:	2d00      	cmp	r5, #0
 8007982:	dd05      	ble.n	8007990 <_dtoa_r+0x9a0>
 8007984:	4639      	mov	r1, r7
 8007986:	462a      	mov	r2, r5
 8007988:	4620      	mov	r0, r4
 800798a:	f000 fb3d 	bl	8008008 <__lshift>
 800798e:	4607      	mov	r7, r0
 8007990:	f1b8 0f00 	cmp.w	r8, #0
 8007994:	d05b      	beq.n	8007a4e <_dtoa_r+0xa5e>
 8007996:	6879      	ldr	r1, [r7, #4]
 8007998:	4620      	mov	r0, r4
 800799a:	f000 f923 	bl	8007be4 <_Balloc>
 800799e:	4605      	mov	r5, r0
 80079a0:	b928      	cbnz	r0, 80079ae <_dtoa_r+0x9be>
 80079a2:	4b87      	ldr	r3, [pc, #540]	; (8007bc0 <_dtoa_r+0xbd0>)
 80079a4:	4602      	mov	r2, r0
 80079a6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80079aa:	f7ff bb3b 	b.w	8007024 <_dtoa_r+0x34>
 80079ae:	693a      	ldr	r2, [r7, #16]
 80079b0:	3202      	adds	r2, #2
 80079b2:	0092      	lsls	r2, r2, #2
 80079b4:	f107 010c 	add.w	r1, r7, #12
 80079b8:	300c      	adds	r0, #12
 80079ba:	f7fe fdeb 	bl	8006594 <memcpy>
 80079be:	2201      	movs	r2, #1
 80079c0:	4629      	mov	r1, r5
 80079c2:	4620      	mov	r0, r4
 80079c4:	f000 fb20 	bl	8008008 <__lshift>
 80079c8:	9b01      	ldr	r3, [sp, #4]
 80079ca:	f103 0901 	add.w	r9, r3, #1
 80079ce:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80079d2:	4413      	add	r3, r2
 80079d4:	9305      	str	r3, [sp, #20]
 80079d6:	f00a 0301 	and.w	r3, sl, #1
 80079da:	46b8      	mov	r8, r7
 80079dc:	9304      	str	r3, [sp, #16]
 80079de:	4607      	mov	r7, r0
 80079e0:	4631      	mov	r1, r6
 80079e2:	ee18 0a10 	vmov	r0, s16
 80079e6:	f7ff fa75 	bl	8006ed4 <quorem>
 80079ea:	4641      	mov	r1, r8
 80079ec:	9002      	str	r0, [sp, #8]
 80079ee:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80079f2:	ee18 0a10 	vmov	r0, s16
 80079f6:	f000 fb77 	bl	80080e8 <__mcmp>
 80079fa:	463a      	mov	r2, r7
 80079fc:	9003      	str	r0, [sp, #12]
 80079fe:	4631      	mov	r1, r6
 8007a00:	4620      	mov	r0, r4
 8007a02:	f000 fb8d 	bl	8008120 <__mdiff>
 8007a06:	68c2      	ldr	r2, [r0, #12]
 8007a08:	f109 3bff 	add.w	fp, r9, #4294967295
 8007a0c:	4605      	mov	r5, r0
 8007a0e:	bb02      	cbnz	r2, 8007a52 <_dtoa_r+0xa62>
 8007a10:	4601      	mov	r1, r0
 8007a12:	ee18 0a10 	vmov	r0, s16
 8007a16:	f000 fb67 	bl	80080e8 <__mcmp>
 8007a1a:	4602      	mov	r2, r0
 8007a1c:	4629      	mov	r1, r5
 8007a1e:	4620      	mov	r0, r4
 8007a20:	9207      	str	r2, [sp, #28]
 8007a22:	f000 f91f 	bl	8007c64 <_Bfree>
 8007a26:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8007a2a:	ea43 0102 	orr.w	r1, r3, r2
 8007a2e:	9b04      	ldr	r3, [sp, #16]
 8007a30:	430b      	orrs	r3, r1
 8007a32:	464d      	mov	r5, r9
 8007a34:	d10f      	bne.n	8007a56 <_dtoa_r+0xa66>
 8007a36:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007a3a:	d02a      	beq.n	8007a92 <_dtoa_r+0xaa2>
 8007a3c:	9b03      	ldr	r3, [sp, #12]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	dd02      	ble.n	8007a48 <_dtoa_r+0xa58>
 8007a42:	9b02      	ldr	r3, [sp, #8]
 8007a44:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8007a48:	f88b a000 	strb.w	sl, [fp]
 8007a4c:	e775      	b.n	800793a <_dtoa_r+0x94a>
 8007a4e:	4638      	mov	r0, r7
 8007a50:	e7ba      	b.n	80079c8 <_dtoa_r+0x9d8>
 8007a52:	2201      	movs	r2, #1
 8007a54:	e7e2      	b.n	8007a1c <_dtoa_r+0xa2c>
 8007a56:	9b03      	ldr	r3, [sp, #12]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	db04      	blt.n	8007a66 <_dtoa_r+0xa76>
 8007a5c:	9906      	ldr	r1, [sp, #24]
 8007a5e:	430b      	orrs	r3, r1
 8007a60:	9904      	ldr	r1, [sp, #16]
 8007a62:	430b      	orrs	r3, r1
 8007a64:	d122      	bne.n	8007aac <_dtoa_r+0xabc>
 8007a66:	2a00      	cmp	r2, #0
 8007a68:	ddee      	ble.n	8007a48 <_dtoa_r+0xa58>
 8007a6a:	ee18 1a10 	vmov	r1, s16
 8007a6e:	2201      	movs	r2, #1
 8007a70:	4620      	mov	r0, r4
 8007a72:	f000 fac9 	bl	8008008 <__lshift>
 8007a76:	4631      	mov	r1, r6
 8007a78:	ee08 0a10 	vmov	s16, r0
 8007a7c:	f000 fb34 	bl	80080e8 <__mcmp>
 8007a80:	2800      	cmp	r0, #0
 8007a82:	dc03      	bgt.n	8007a8c <_dtoa_r+0xa9c>
 8007a84:	d1e0      	bne.n	8007a48 <_dtoa_r+0xa58>
 8007a86:	f01a 0f01 	tst.w	sl, #1
 8007a8a:	d0dd      	beq.n	8007a48 <_dtoa_r+0xa58>
 8007a8c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007a90:	d1d7      	bne.n	8007a42 <_dtoa_r+0xa52>
 8007a92:	2339      	movs	r3, #57	; 0x39
 8007a94:	f88b 3000 	strb.w	r3, [fp]
 8007a98:	462b      	mov	r3, r5
 8007a9a:	461d      	mov	r5, r3
 8007a9c:	3b01      	subs	r3, #1
 8007a9e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007aa2:	2a39      	cmp	r2, #57	; 0x39
 8007aa4:	d071      	beq.n	8007b8a <_dtoa_r+0xb9a>
 8007aa6:	3201      	adds	r2, #1
 8007aa8:	701a      	strb	r2, [r3, #0]
 8007aaa:	e746      	b.n	800793a <_dtoa_r+0x94a>
 8007aac:	2a00      	cmp	r2, #0
 8007aae:	dd07      	ble.n	8007ac0 <_dtoa_r+0xad0>
 8007ab0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007ab4:	d0ed      	beq.n	8007a92 <_dtoa_r+0xaa2>
 8007ab6:	f10a 0301 	add.w	r3, sl, #1
 8007aba:	f88b 3000 	strb.w	r3, [fp]
 8007abe:	e73c      	b.n	800793a <_dtoa_r+0x94a>
 8007ac0:	9b05      	ldr	r3, [sp, #20]
 8007ac2:	f809 ac01 	strb.w	sl, [r9, #-1]
 8007ac6:	4599      	cmp	r9, r3
 8007ac8:	d047      	beq.n	8007b5a <_dtoa_r+0xb6a>
 8007aca:	ee18 1a10 	vmov	r1, s16
 8007ace:	2300      	movs	r3, #0
 8007ad0:	220a      	movs	r2, #10
 8007ad2:	4620      	mov	r0, r4
 8007ad4:	f000 f8e8 	bl	8007ca8 <__multadd>
 8007ad8:	45b8      	cmp	r8, r7
 8007ada:	ee08 0a10 	vmov	s16, r0
 8007ade:	f04f 0300 	mov.w	r3, #0
 8007ae2:	f04f 020a 	mov.w	r2, #10
 8007ae6:	4641      	mov	r1, r8
 8007ae8:	4620      	mov	r0, r4
 8007aea:	d106      	bne.n	8007afa <_dtoa_r+0xb0a>
 8007aec:	f000 f8dc 	bl	8007ca8 <__multadd>
 8007af0:	4680      	mov	r8, r0
 8007af2:	4607      	mov	r7, r0
 8007af4:	f109 0901 	add.w	r9, r9, #1
 8007af8:	e772      	b.n	80079e0 <_dtoa_r+0x9f0>
 8007afa:	f000 f8d5 	bl	8007ca8 <__multadd>
 8007afe:	4639      	mov	r1, r7
 8007b00:	4680      	mov	r8, r0
 8007b02:	2300      	movs	r3, #0
 8007b04:	220a      	movs	r2, #10
 8007b06:	4620      	mov	r0, r4
 8007b08:	f000 f8ce 	bl	8007ca8 <__multadd>
 8007b0c:	4607      	mov	r7, r0
 8007b0e:	e7f1      	b.n	8007af4 <_dtoa_r+0xb04>
 8007b10:	9b03      	ldr	r3, [sp, #12]
 8007b12:	9302      	str	r3, [sp, #8]
 8007b14:	9d01      	ldr	r5, [sp, #4]
 8007b16:	ee18 0a10 	vmov	r0, s16
 8007b1a:	4631      	mov	r1, r6
 8007b1c:	f7ff f9da 	bl	8006ed4 <quorem>
 8007b20:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007b24:	9b01      	ldr	r3, [sp, #4]
 8007b26:	f805 ab01 	strb.w	sl, [r5], #1
 8007b2a:	1aea      	subs	r2, r5, r3
 8007b2c:	9b02      	ldr	r3, [sp, #8]
 8007b2e:	4293      	cmp	r3, r2
 8007b30:	dd09      	ble.n	8007b46 <_dtoa_r+0xb56>
 8007b32:	ee18 1a10 	vmov	r1, s16
 8007b36:	2300      	movs	r3, #0
 8007b38:	220a      	movs	r2, #10
 8007b3a:	4620      	mov	r0, r4
 8007b3c:	f000 f8b4 	bl	8007ca8 <__multadd>
 8007b40:	ee08 0a10 	vmov	s16, r0
 8007b44:	e7e7      	b.n	8007b16 <_dtoa_r+0xb26>
 8007b46:	9b02      	ldr	r3, [sp, #8]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	bfc8      	it	gt
 8007b4c:	461d      	movgt	r5, r3
 8007b4e:	9b01      	ldr	r3, [sp, #4]
 8007b50:	bfd8      	it	le
 8007b52:	2501      	movle	r5, #1
 8007b54:	441d      	add	r5, r3
 8007b56:	f04f 0800 	mov.w	r8, #0
 8007b5a:	ee18 1a10 	vmov	r1, s16
 8007b5e:	2201      	movs	r2, #1
 8007b60:	4620      	mov	r0, r4
 8007b62:	f000 fa51 	bl	8008008 <__lshift>
 8007b66:	4631      	mov	r1, r6
 8007b68:	ee08 0a10 	vmov	s16, r0
 8007b6c:	f000 fabc 	bl	80080e8 <__mcmp>
 8007b70:	2800      	cmp	r0, #0
 8007b72:	dc91      	bgt.n	8007a98 <_dtoa_r+0xaa8>
 8007b74:	d102      	bne.n	8007b7c <_dtoa_r+0xb8c>
 8007b76:	f01a 0f01 	tst.w	sl, #1
 8007b7a:	d18d      	bne.n	8007a98 <_dtoa_r+0xaa8>
 8007b7c:	462b      	mov	r3, r5
 8007b7e:	461d      	mov	r5, r3
 8007b80:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007b84:	2a30      	cmp	r2, #48	; 0x30
 8007b86:	d0fa      	beq.n	8007b7e <_dtoa_r+0xb8e>
 8007b88:	e6d7      	b.n	800793a <_dtoa_r+0x94a>
 8007b8a:	9a01      	ldr	r2, [sp, #4]
 8007b8c:	429a      	cmp	r2, r3
 8007b8e:	d184      	bne.n	8007a9a <_dtoa_r+0xaaa>
 8007b90:	9b00      	ldr	r3, [sp, #0]
 8007b92:	3301      	adds	r3, #1
 8007b94:	9300      	str	r3, [sp, #0]
 8007b96:	2331      	movs	r3, #49	; 0x31
 8007b98:	7013      	strb	r3, [r2, #0]
 8007b9a:	e6ce      	b.n	800793a <_dtoa_r+0x94a>
 8007b9c:	4b09      	ldr	r3, [pc, #36]	; (8007bc4 <_dtoa_r+0xbd4>)
 8007b9e:	f7ff ba95 	b.w	80070cc <_dtoa_r+0xdc>
 8007ba2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	f47f aa6e 	bne.w	8007086 <_dtoa_r+0x96>
 8007baa:	4b07      	ldr	r3, [pc, #28]	; (8007bc8 <_dtoa_r+0xbd8>)
 8007bac:	f7ff ba8e 	b.w	80070cc <_dtoa_r+0xdc>
 8007bb0:	9b02      	ldr	r3, [sp, #8]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	dcae      	bgt.n	8007b14 <_dtoa_r+0xb24>
 8007bb6:	9b06      	ldr	r3, [sp, #24]
 8007bb8:	2b02      	cmp	r3, #2
 8007bba:	f73f aea8 	bgt.w	800790e <_dtoa_r+0x91e>
 8007bbe:	e7a9      	b.n	8007b14 <_dtoa_r+0xb24>
 8007bc0:	08009683 	.word	0x08009683
 8007bc4:	080095e0 	.word	0x080095e0
 8007bc8:	08009604 	.word	0x08009604

08007bcc <_localeconv_r>:
 8007bcc:	4800      	ldr	r0, [pc, #0]	; (8007bd0 <_localeconv_r+0x4>)
 8007bce:	4770      	bx	lr
 8007bd0:	20000160 	.word	0x20000160

08007bd4 <malloc>:
 8007bd4:	4b02      	ldr	r3, [pc, #8]	; (8007be0 <malloc+0xc>)
 8007bd6:	4601      	mov	r1, r0
 8007bd8:	6818      	ldr	r0, [r3, #0]
 8007bda:	f000 bc09 	b.w	80083f0 <_malloc_r>
 8007bde:	bf00      	nop
 8007be0:	2000000c 	.word	0x2000000c

08007be4 <_Balloc>:
 8007be4:	b570      	push	{r4, r5, r6, lr}
 8007be6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007be8:	4604      	mov	r4, r0
 8007bea:	460d      	mov	r5, r1
 8007bec:	b976      	cbnz	r6, 8007c0c <_Balloc+0x28>
 8007bee:	2010      	movs	r0, #16
 8007bf0:	f7ff fff0 	bl	8007bd4 <malloc>
 8007bf4:	4602      	mov	r2, r0
 8007bf6:	6260      	str	r0, [r4, #36]	; 0x24
 8007bf8:	b920      	cbnz	r0, 8007c04 <_Balloc+0x20>
 8007bfa:	4b18      	ldr	r3, [pc, #96]	; (8007c5c <_Balloc+0x78>)
 8007bfc:	4818      	ldr	r0, [pc, #96]	; (8007c60 <_Balloc+0x7c>)
 8007bfe:	2166      	movs	r1, #102	; 0x66
 8007c00:	f000 fdd6 	bl	80087b0 <__assert_func>
 8007c04:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007c08:	6006      	str	r6, [r0, #0]
 8007c0a:	60c6      	str	r6, [r0, #12]
 8007c0c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007c0e:	68f3      	ldr	r3, [r6, #12]
 8007c10:	b183      	cbz	r3, 8007c34 <_Balloc+0x50>
 8007c12:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007c14:	68db      	ldr	r3, [r3, #12]
 8007c16:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007c1a:	b9b8      	cbnz	r0, 8007c4c <_Balloc+0x68>
 8007c1c:	2101      	movs	r1, #1
 8007c1e:	fa01 f605 	lsl.w	r6, r1, r5
 8007c22:	1d72      	adds	r2, r6, #5
 8007c24:	0092      	lsls	r2, r2, #2
 8007c26:	4620      	mov	r0, r4
 8007c28:	f000 fb60 	bl	80082ec <_calloc_r>
 8007c2c:	b160      	cbz	r0, 8007c48 <_Balloc+0x64>
 8007c2e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007c32:	e00e      	b.n	8007c52 <_Balloc+0x6e>
 8007c34:	2221      	movs	r2, #33	; 0x21
 8007c36:	2104      	movs	r1, #4
 8007c38:	4620      	mov	r0, r4
 8007c3a:	f000 fb57 	bl	80082ec <_calloc_r>
 8007c3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007c40:	60f0      	str	r0, [r6, #12]
 8007c42:	68db      	ldr	r3, [r3, #12]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d1e4      	bne.n	8007c12 <_Balloc+0x2e>
 8007c48:	2000      	movs	r0, #0
 8007c4a:	bd70      	pop	{r4, r5, r6, pc}
 8007c4c:	6802      	ldr	r2, [r0, #0]
 8007c4e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007c52:	2300      	movs	r3, #0
 8007c54:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007c58:	e7f7      	b.n	8007c4a <_Balloc+0x66>
 8007c5a:	bf00      	nop
 8007c5c:	08009611 	.word	0x08009611
 8007c60:	08009694 	.word	0x08009694

08007c64 <_Bfree>:
 8007c64:	b570      	push	{r4, r5, r6, lr}
 8007c66:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007c68:	4605      	mov	r5, r0
 8007c6a:	460c      	mov	r4, r1
 8007c6c:	b976      	cbnz	r6, 8007c8c <_Bfree+0x28>
 8007c6e:	2010      	movs	r0, #16
 8007c70:	f7ff ffb0 	bl	8007bd4 <malloc>
 8007c74:	4602      	mov	r2, r0
 8007c76:	6268      	str	r0, [r5, #36]	; 0x24
 8007c78:	b920      	cbnz	r0, 8007c84 <_Bfree+0x20>
 8007c7a:	4b09      	ldr	r3, [pc, #36]	; (8007ca0 <_Bfree+0x3c>)
 8007c7c:	4809      	ldr	r0, [pc, #36]	; (8007ca4 <_Bfree+0x40>)
 8007c7e:	218a      	movs	r1, #138	; 0x8a
 8007c80:	f000 fd96 	bl	80087b0 <__assert_func>
 8007c84:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007c88:	6006      	str	r6, [r0, #0]
 8007c8a:	60c6      	str	r6, [r0, #12]
 8007c8c:	b13c      	cbz	r4, 8007c9e <_Bfree+0x3a>
 8007c8e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007c90:	6862      	ldr	r2, [r4, #4]
 8007c92:	68db      	ldr	r3, [r3, #12]
 8007c94:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007c98:	6021      	str	r1, [r4, #0]
 8007c9a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007c9e:	bd70      	pop	{r4, r5, r6, pc}
 8007ca0:	08009611 	.word	0x08009611
 8007ca4:	08009694 	.word	0x08009694

08007ca8 <__multadd>:
 8007ca8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007cac:	690d      	ldr	r5, [r1, #16]
 8007cae:	4607      	mov	r7, r0
 8007cb0:	460c      	mov	r4, r1
 8007cb2:	461e      	mov	r6, r3
 8007cb4:	f101 0c14 	add.w	ip, r1, #20
 8007cb8:	2000      	movs	r0, #0
 8007cba:	f8dc 3000 	ldr.w	r3, [ip]
 8007cbe:	b299      	uxth	r1, r3
 8007cc0:	fb02 6101 	mla	r1, r2, r1, r6
 8007cc4:	0c1e      	lsrs	r6, r3, #16
 8007cc6:	0c0b      	lsrs	r3, r1, #16
 8007cc8:	fb02 3306 	mla	r3, r2, r6, r3
 8007ccc:	b289      	uxth	r1, r1
 8007cce:	3001      	adds	r0, #1
 8007cd0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007cd4:	4285      	cmp	r5, r0
 8007cd6:	f84c 1b04 	str.w	r1, [ip], #4
 8007cda:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007cde:	dcec      	bgt.n	8007cba <__multadd+0x12>
 8007ce0:	b30e      	cbz	r6, 8007d26 <__multadd+0x7e>
 8007ce2:	68a3      	ldr	r3, [r4, #8]
 8007ce4:	42ab      	cmp	r3, r5
 8007ce6:	dc19      	bgt.n	8007d1c <__multadd+0x74>
 8007ce8:	6861      	ldr	r1, [r4, #4]
 8007cea:	4638      	mov	r0, r7
 8007cec:	3101      	adds	r1, #1
 8007cee:	f7ff ff79 	bl	8007be4 <_Balloc>
 8007cf2:	4680      	mov	r8, r0
 8007cf4:	b928      	cbnz	r0, 8007d02 <__multadd+0x5a>
 8007cf6:	4602      	mov	r2, r0
 8007cf8:	4b0c      	ldr	r3, [pc, #48]	; (8007d2c <__multadd+0x84>)
 8007cfa:	480d      	ldr	r0, [pc, #52]	; (8007d30 <__multadd+0x88>)
 8007cfc:	21b5      	movs	r1, #181	; 0xb5
 8007cfe:	f000 fd57 	bl	80087b0 <__assert_func>
 8007d02:	6922      	ldr	r2, [r4, #16]
 8007d04:	3202      	adds	r2, #2
 8007d06:	f104 010c 	add.w	r1, r4, #12
 8007d0a:	0092      	lsls	r2, r2, #2
 8007d0c:	300c      	adds	r0, #12
 8007d0e:	f7fe fc41 	bl	8006594 <memcpy>
 8007d12:	4621      	mov	r1, r4
 8007d14:	4638      	mov	r0, r7
 8007d16:	f7ff ffa5 	bl	8007c64 <_Bfree>
 8007d1a:	4644      	mov	r4, r8
 8007d1c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007d20:	3501      	adds	r5, #1
 8007d22:	615e      	str	r6, [r3, #20]
 8007d24:	6125      	str	r5, [r4, #16]
 8007d26:	4620      	mov	r0, r4
 8007d28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d2c:	08009683 	.word	0x08009683
 8007d30:	08009694 	.word	0x08009694

08007d34 <__hi0bits>:
 8007d34:	0c03      	lsrs	r3, r0, #16
 8007d36:	041b      	lsls	r3, r3, #16
 8007d38:	b9d3      	cbnz	r3, 8007d70 <__hi0bits+0x3c>
 8007d3a:	0400      	lsls	r0, r0, #16
 8007d3c:	2310      	movs	r3, #16
 8007d3e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007d42:	bf04      	itt	eq
 8007d44:	0200      	lsleq	r0, r0, #8
 8007d46:	3308      	addeq	r3, #8
 8007d48:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007d4c:	bf04      	itt	eq
 8007d4e:	0100      	lsleq	r0, r0, #4
 8007d50:	3304      	addeq	r3, #4
 8007d52:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007d56:	bf04      	itt	eq
 8007d58:	0080      	lsleq	r0, r0, #2
 8007d5a:	3302      	addeq	r3, #2
 8007d5c:	2800      	cmp	r0, #0
 8007d5e:	db05      	blt.n	8007d6c <__hi0bits+0x38>
 8007d60:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007d64:	f103 0301 	add.w	r3, r3, #1
 8007d68:	bf08      	it	eq
 8007d6a:	2320      	moveq	r3, #32
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	4770      	bx	lr
 8007d70:	2300      	movs	r3, #0
 8007d72:	e7e4      	b.n	8007d3e <__hi0bits+0xa>

08007d74 <__lo0bits>:
 8007d74:	6803      	ldr	r3, [r0, #0]
 8007d76:	f013 0207 	ands.w	r2, r3, #7
 8007d7a:	4601      	mov	r1, r0
 8007d7c:	d00b      	beq.n	8007d96 <__lo0bits+0x22>
 8007d7e:	07da      	lsls	r2, r3, #31
 8007d80:	d423      	bmi.n	8007dca <__lo0bits+0x56>
 8007d82:	0798      	lsls	r0, r3, #30
 8007d84:	bf49      	itett	mi
 8007d86:	085b      	lsrmi	r3, r3, #1
 8007d88:	089b      	lsrpl	r3, r3, #2
 8007d8a:	2001      	movmi	r0, #1
 8007d8c:	600b      	strmi	r3, [r1, #0]
 8007d8e:	bf5c      	itt	pl
 8007d90:	600b      	strpl	r3, [r1, #0]
 8007d92:	2002      	movpl	r0, #2
 8007d94:	4770      	bx	lr
 8007d96:	b298      	uxth	r0, r3
 8007d98:	b9a8      	cbnz	r0, 8007dc6 <__lo0bits+0x52>
 8007d9a:	0c1b      	lsrs	r3, r3, #16
 8007d9c:	2010      	movs	r0, #16
 8007d9e:	b2da      	uxtb	r2, r3
 8007da0:	b90a      	cbnz	r2, 8007da6 <__lo0bits+0x32>
 8007da2:	3008      	adds	r0, #8
 8007da4:	0a1b      	lsrs	r3, r3, #8
 8007da6:	071a      	lsls	r2, r3, #28
 8007da8:	bf04      	itt	eq
 8007daa:	091b      	lsreq	r3, r3, #4
 8007dac:	3004      	addeq	r0, #4
 8007dae:	079a      	lsls	r2, r3, #30
 8007db0:	bf04      	itt	eq
 8007db2:	089b      	lsreq	r3, r3, #2
 8007db4:	3002      	addeq	r0, #2
 8007db6:	07da      	lsls	r2, r3, #31
 8007db8:	d403      	bmi.n	8007dc2 <__lo0bits+0x4e>
 8007dba:	085b      	lsrs	r3, r3, #1
 8007dbc:	f100 0001 	add.w	r0, r0, #1
 8007dc0:	d005      	beq.n	8007dce <__lo0bits+0x5a>
 8007dc2:	600b      	str	r3, [r1, #0]
 8007dc4:	4770      	bx	lr
 8007dc6:	4610      	mov	r0, r2
 8007dc8:	e7e9      	b.n	8007d9e <__lo0bits+0x2a>
 8007dca:	2000      	movs	r0, #0
 8007dcc:	4770      	bx	lr
 8007dce:	2020      	movs	r0, #32
 8007dd0:	4770      	bx	lr
	...

08007dd4 <__i2b>:
 8007dd4:	b510      	push	{r4, lr}
 8007dd6:	460c      	mov	r4, r1
 8007dd8:	2101      	movs	r1, #1
 8007dda:	f7ff ff03 	bl	8007be4 <_Balloc>
 8007dde:	4602      	mov	r2, r0
 8007de0:	b928      	cbnz	r0, 8007dee <__i2b+0x1a>
 8007de2:	4b05      	ldr	r3, [pc, #20]	; (8007df8 <__i2b+0x24>)
 8007de4:	4805      	ldr	r0, [pc, #20]	; (8007dfc <__i2b+0x28>)
 8007de6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007dea:	f000 fce1 	bl	80087b0 <__assert_func>
 8007dee:	2301      	movs	r3, #1
 8007df0:	6144      	str	r4, [r0, #20]
 8007df2:	6103      	str	r3, [r0, #16]
 8007df4:	bd10      	pop	{r4, pc}
 8007df6:	bf00      	nop
 8007df8:	08009683 	.word	0x08009683
 8007dfc:	08009694 	.word	0x08009694

08007e00 <__multiply>:
 8007e00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e04:	4691      	mov	r9, r2
 8007e06:	690a      	ldr	r2, [r1, #16]
 8007e08:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007e0c:	429a      	cmp	r2, r3
 8007e0e:	bfb8      	it	lt
 8007e10:	460b      	movlt	r3, r1
 8007e12:	460c      	mov	r4, r1
 8007e14:	bfbc      	itt	lt
 8007e16:	464c      	movlt	r4, r9
 8007e18:	4699      	movlt	r9, r3
 8007e1a:	6927      	ldr	r7, [r4, #16]
 8007e1c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007e20:	68a3      	ldr	r3, [r4, #8]
 8007e22:	6861      	ldr	r1, [r4, #4]
 8007e24:	eb07 060a 	add.w	r6, r7, sl
 8007e28:	42b3      	cmp	r3, r6
 8007e2a:	b085      	sub	sp, #20
 8007e2c:	bfb8      	it	lt
 8007e2e:	3101      	addlt	r1, #1
 8007e30:	f7ff fed8 	bl	8007be4 <_Balloc>
 8007e34:	b930      	cbnz	r0, 8007e44 <__multiply+0x44>
 8007e36:	4602      	mov	r2, r0
 8007e38:	4b44      	ldr	r3, [pc, #272]	; (8007f4c <__multiply+0x14c>)
 8007e3a:	4845      	ldr	r0, [pc, #276]	; (8007f50 <__multiply+0x150>)
 8007e3c:	f240 115d 	movw	r1, #349	; 0x15d
 8007e40:	f000 fcb6 	bl	80087b0 <__assert_func>
 8007e44:	f100 0514 	add.w	r5, r0, #20
 8007e48:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007e4c:	462b      	mov	r3, r5
 8007e4e:	2200      	movs	r2, #0
 8007e50:	4543      	cmp	r3, r8
 8007e52:	d321      	bcc.n	8007e98 <__multiply+0x98>
 8007e54:	f104 0314 	add.w	r3, r4, #20
 8007e58:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007e5c:	f109 0314 	add.w	r3, r9, #20
 8007e60:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007e64:	9202      	str	r2, [sp, #8]
 8007e66:	1b3a      	subs	r2, r7, r4
 8007e68:	3a15      	subs	r2, #21
 8007e6a:	f022 0203 	bic.w	r2, r2, #3
 8007e6e:	3204      	adds	r2, #4
 8007e70:	f104 0115 	add.w	r1, r4, #21
 8007e74:	428f      	cmp	r7, r1
 8007e76:	bf38      	it	cc
 8007e78:	2204      	movcc	r2, #4
 8007e7a:	9201      	str	r2, [sp, #4]
 8007e7c:	9a02      	ldr	r2, [sp, #8]
 8007e7e:	9303      	str	r3, [sp, #12]
 8007e80:	429a      	cmp	r2, r3
 8007e82:	d80c      	bhi.n	8007e9e <__multiply+0x9e>
 8007e84:	2e00      	cmp	r6, #0
 8007e86:	dd03      	ble.n	8007e90 <__multiply+0x90>
 8007e88:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d05a      	beq.n	8007f46 <__multiply+0x146>
 8007e90:	6106      	str	r6, [r0, #16]
 8007e92:	b005      	add	sp, #20
 8007e94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e98:	f843 2b04 	str.w	r2, [r3], #4
 8007e9c:	e7d8      	b.n	8007e50 <__multiply+0x50>
 8007e9e:	f8b3 a000 	ldrh.w	sl, [r3]
 8007ea2:	f1ba 0f00 	cmp.w	sl, #0
 8007ea6:	d024      	beq.n	8007ef2 <__multiply+0xf2>
 8007ea8:	f104 0e14 	add.w	lr, r4, #20
 8007eac:	46a9      	mov	r9, r5
 8007eae:	f04f 0c00 	mov.w	ip, #0
 8007eb2:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007eb6:	f8d9 1000 	ldr.w	r1, [r9]
 8007eba:	fa1f fb82 	uxth.w	fp, r2
 8007ebe:	b289      	uxth	r1, r1
 8007ec0:	fb0a 110b 	mla	r1, sl, fp, r1
 8007ec4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007ec8:	f8d9 2000 	ldr.w	r2, [r9]
 8007ecc:	4461      	add	r1, ip
 8007ece:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007ed2:	fb0a c20b 	mla	r2, sl, fp, ip
 8007ed6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007eda:	b289      	uxth	r1, r1
 8007edc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007ee0:	4577      	cmp	r7, lr
 8007ee2:	f849 1b04 	str.w	r1, [r9], #4
 8007ee6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007eea:	d8e2      	bhi.n	8007eb2 <__multiply+0xb2>
 8007eec:	9a01      	ldr	r2, [sp, #4]
 8007eee:	f845 c002 	str.w	ip, [r5, r2]
 8007ef2:	9a03      	ldr	r2, [sp, #12]
 8007ef4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007ef8:	3304      	adds	r3, #4
 8007efa:	f1b9 0f00 	cmp.w	r9, #0
 8007efe:	d020      	beq.n	8007f42 <__multiply+0x142>
 8007f00:	6829      	ldr	r1, [r5, #0]
 8007f02:	f104 0c14 	add.w	ip, r4, #20
 8007f06:	46ae      	mov	lr, r5
 8007f08:	f04f 0a00 	mov.w	sl, #0
 8007f0c:	f8bc b000 	ldrh.w	fp, [ip]
 8007f10:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007f14:	fb09 220b 	mla	r2, r9, fp, r2
 8007f18:	4492      	add	sl, r2
 8007f1a:	b289      	uxth	r1, r1
 8007f1c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007f20:	f84e 1b04 	str.w	r1, [lr], #4
 8007f24:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007f28:	f8be 1000 	ldrh.w	r1, [lr]
 8007f2c:	0c12      	lsrs	r2, r2, #16
 8007f2e:	fb09 1102 	mla	r1, r9, r2, r1
 8007f32:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007f36:	4567      	cmp	r7, ip
 8007f38:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007f3c:	d8e6      	bhi.n	8007f0c <__multiply+0x10c>
 8007f3e:	9a01      	ldr	r2, [sp, #4]
 8007f40:	50a9      	str	r1, [r5, r2]
 8007f42:	3504      	adds	r5, #4
 8007f44:	e79a      	b.n	8007e7c <__multiply+0x7c>
 8007f46:	3e01      	subs	r6, #1
 8007f48:	e79c      	b.n	8007e84 <__multiply+0x84>
 8007f4a:	bf00      	nop
 8007f4c:	08009683 	.word	0x08009683
 8007f50:	08009694 	.word	0x08009694

08007f54 <__pow5mult>:
 8007f54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f58:	4615      	mov	r5, r2
 8007f5a:	f012 0203 	ands.w	r2, r2, #3
 8007f5e:	4606      	mov	r6, r0
 8007f60:	460f      	mov	r7, r1
 8007f62:	d007      	beq.n	8007f74 <__pow5mult+0x20>
 8007f64:	4c25      	ldr	r4, [pc, #148]	; (8007ffc <__pow5mult+0xa8>)
 8007f66:	3a01      	subs	r2, #1
 8007f68:	2300      	movs	r3, #0
 8007f6a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007f6e:	f7ff fe9b 	bl	8007ca8 <__multadd>
 8007f72:	4607      	mov	r7, r0
 8007f74:	10ad      	asrs	r5, r5, #2
 8007f76:	d03d      	beq.n	8007ff4 <__pow5mult+0xa0>
 8007f78:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007f7a:	b97c      	cbnz	r4, 8007f9c <__pow5mult+0x48>
 8007f7c:	2010      	movs	r0, #16
 8007f7e:	f7ff fe29 	bl	8007bd4 <malloc>
 8007f82:	4602      	mov	r2, r0
 8007f84:	6270      	str	r0, [r6, #36]	; 0x24
 8007f86:	b928      	cbnz	r0, 8007f94 <__pow5mult+0x40>
 8007f88:	4b1d      	ldr	r3, [pc, #116]	; (8008000 <__pow5mult+0xac>)
 8007f8a:	481e      	ldr	r0, [pc, #120]	; (8008004 <__pow5mult+0xb0>)
 8007f8c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007f90:	f000 fc0e 	bl	80087b0 <__assert_func>
 8007f94:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007f98:	6004      	str	r4, [r0, #0]
 8007f9a:	60c4      	str	r4, [r0, #12]
 8007f9c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007fa0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007fa4:	b94c      	cbnz	r4, 8007fba <__pow5mult+0x66>
 8007fa6:	f240 2171 	movw	r1, #625	; 0x271
 8007faa:	4630      	mov	r0, r6
 8007fac:	f7ff ff12 	bl	8007dd4 <__i2b>
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	f8c8 0008 	str.w	r0, [r8, #8]
 8007fb6:	4604      	mov	r4, r0
 8007fb8:	6003      	str	r3, [r0, #0]
 8007fba:	f04f 0900 	mov.w	r9, #0
 8007fbe:	07eb      	lsls	r3, r5, #31
 8007fc0:	d50a      	bpl.n	8007fd8 <__pow5mult+0x84>
 8007fc2:	4639      	mov	r1, r7
 8007fc4:	4622      	mov	r2, r4
 8007fc6:	4630      	mov	r0, r6
 8007fc8:	f7ff ff1a 	bl	8007e00 <__multiply>
 8007fcc:	4639      	mov	r1, r7
 8007fce:	4680      	mov	r8, r0
 8007fd0:	4630      	mov	r0, r6
 8007fd2:	f7ff fe47 	bl	8007c64 <_Bfree>
 8007fd6:	4647      	mov	r7, r8
 8007fd8:	106d      	asrs	r5, r5, #1
 8007fda:	d00b      	beq.n	8007ff4 <__pow5mult+0xa0>
 8007fdc:	6820      	ldr	r0, [r4, #0]
 8007fde:	b938      	cbnz	r0, 8007ff0 <__pow5mult+0x9c>
 8007fe0:	4622      	mov	r2, r4
 8007fe2:	4621      	mov	r1, r4
 8007fe4:	4630      	mov	r0, r6
 8007fe6:	f7ff ff0b 	bl	8007e00 <__multiply>
 8007fea:	6020      	str	r0, [r4, #0]
 8007fec:	f8c0 9000 	str.w	r9, [r0]
 8007ff0:	4604      	mov	r4, r0
 8007ff2:	e7e4      	b.n	8007fbe <__pow5mult+0x6a>
 8007ff4:	4638      	mov	r0, r7
 8007ff6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ffa:	bf00      	nop
 8007ffc:	080097e0 	.word	0x080097e0
 8008000:	08009611 	.word	0x08009611
 8008004:	08009694 	.word	0x08009694

08008008 <__lshift>:
 8008008:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800800c:	460c      	mov	r4, r1
 800800e:	6849      	ldr	r1, [r1, #4]
 8008010:	6923      	ldr	r3, [r4, #16]
 8008012:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008016:	68a3      	ldr	r3, [r4, #8]
 8008018:	4607      	mov	r7, r0
 800801a:	4691      	mov	r9, r2
 800801c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008020:	f108 0601 	add.w	r6, r8, #1
 8008024:	42b3      	cmp	r3, r6
 8008026:	db0b      	blt.n	8008040 <__lshift+0x38>
 8008028:	4638      	mov	r0, r7
 800802a:	f7ff fddb 	bl	8007be4 <_Balloc>
 800802e:	4605      	mov	r5, r0
 8008030:	b948      	cbnz	r0, 8008046 <__lshift+0x3e>
 8008032:	4602      	mov	r2, r0
 8008034:	4b2a      	ldr	r3, [pc, #168]	; (80080e0 <__lshift+0xd8>)
 8008036:	482b      	ldr	r0, [pc, #172]	; (80080e4 <__lshift+0xdc>)
 8008038:	f240 11d9 	movw	r1, #473	; 0x1d9
 800803c:	f000 fbb8 	bl	80087b0 <__assert_func>
 8008040:	3101      	adds	r1, #1
 8008042:	005b      	lsls	r3, r3, #1
 8008044:	e7ee      	b.n	8008024 <__lshift+0x1c>
 8008046:	2300      	movs	r3, #0
 8008048:	f100 0114 	add.w	r1, r0, #20
 800804c:	f100 0210 	add.w	r2, r0, #16
 8008050:	4618      	mov	r0, r3
 8008052:	4553      	cmp	r3, sl
 8008054:	db37      	blt.n	80080c6 <__lshift+0xbe>
 8008056:	6920      	ldr	r0, [r4, #16]
 8008058:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800805c:	f104 0314 	add.w	r3, r4, #20
 8008060:	f019 091f 	ands.w	r9, r9, #31
 8008064:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008068:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800806c:	d02f      	beq.n	80080ce <__lshift+0xc6>
 800806e:	f1c9 0e20 	rsb	lr, r9, #32
 8008072:	468a      	mov	sl, r1
 8008074:	f04f 0c00 	mov.w	ip, #0
 8008078:	681a      	ldr	r2, [r3, #0]
 800807a:	fa02 f209 	lsl.w	r2, r2, r9
 800807e:	ea42 020c 	orr.w	r2, r2, ip
 8008082:	f84a 2b04 	str.w	r2, [sl], #4
 8008086:	f853 2b04 	ldr.w	r2, [r3], #4
 800808a:	4298      	cmp	r0, r3
 800808c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008090:	d8f2      	bhi.n	8008078 <__lshift+0x70>
 8008092:	1b03      	subs	r3, r0, r4
 8008094:	3b15      	subs	r3, #21
 8008096:	f023 0303 	bic.w	r3, r3, #3
 800809a:	3304      	adds	r3, #4
 800809c:	f104 0215 	add.w	r2, r4, #21
 80080a0:	4290      	cmp	r0, r2
 80080a2:	bf38      	it	cc
 80080a4:	2304      	movcc	r3, #4
 80080a6:	f841 c003 	str.w	ip, [r1, r3]
 80080aa:	f1bc 0f00 	cmp.w	ip, #0
 80080ae:	d001      	beq.n	80080b4 <__lshift+0xac>
 80080b0:	f108 0602 	add.w	r6, r8, #2
 80080b4:	3e01      	subs	r6, #1
 80080b6:	4638      	mov	r0, r7
 80080b8:	612e      	str	r6, [r5, #16]
 80080ba:	4621      	mov	r1, r4
 80080bc:	f7ff fdd2 	bl	8007c64 <_Bfree>
 80080c0:	4628      	mov	r0, r5
 80080c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080c6:	f842 0f04 	str.w	r0, [r2, #4]!
 80080ca:	3301      	adds	r3, #1
 80080cc:	e7c1      	b.n	8008052 <__lshift+0x4a>
 80080ce:	3904      	subs	r1, #4
 80080d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80080d4:	f841 2f04 	str.w	r2, [r1, #4]!
 80080d8:	4298      	cmp	r0, r3
 80080da:	d8f9      	bhi.n	80080d0 <__lshift+0xc8>
 80080dc:	e7ea      	b.n	80080b4 <__lshift+0xac>
 80080de:	bf00      	nop
 80080e0:	08009683 	.word	0x08009683
 80080e4:	08009694 	.word	0x08009694

080080e8 <__mcmp>:
 80080e8:	b530      	push	{r4, r5, lr}
 80080ea:	6902      	ldr	r2, [r0, #16]
 80080ec:	690c      	ldr	r4, [r1, #16]
 80080ee:	1b12      	subs	r2, r2, r4
 80080f0:	d10e      	bne.n	8008110 <__mcmp+0x28>
 80080f2:	f100 0314 	add.w	r3, r0, #20
 80080f6:	3114      	adds	r1, #20
 80080f8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80080fc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008100:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008104:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008108:	42a5      	cmp	r5, r4
 800810a:	d003      	beq.n	8008114 <__mcmp+0x2c>
 800810c:	d305      	bcc.n	800811a <__mcmp+0x32>
 800810e:	2201      	movs	r2, #1
 8008110:	4610      	mov	r0, r2
 8008112:	bd30      	pop	{r4, r5, pc}
 8008114:	4283      	cmp	r3, r0
 8008116:	d3f3      	bcc.n	8008100 <__mcmp+0x18>
 8008118:	e7fa      	b.n	8008110 <__mcmp+0x28>
 800811a:	f04f 32ff 	mov.w	r2, #4294967295
 800811e:	e7f7      	b.n	8008110 <__mcmp+0x28>

08008120 <__mdiff>:
 8008120:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008124:	460c      	mov	r4, r1
 8008126:	4606      	mov	r6, r0
 8008128:	4611      	mov	r1, r2
 800812a:	4620      	mov	r0, r4
 800812c:	4690      	mov	r8, r2
 800812e:	f7ff ffdb 	bl	80080e8 <__mcmp>
 8008132:	1e05      	subs	r5, r0, #0
 8008134:	d110      	bne.n	8008158 <__mdiff+0x38>
 8008136:	4629      	mov	r1, r5
 8008138:	4630      	mov	r0, r6
 800813a:	f7ff fd53 	bl	8007be4 <_Balloc>
 800813e:	b930      	cbnz	r0, 800814e <__mdiff+0x2e>
 8008140:	4b3a      	ldr	r3, [pc, #232]	; (800822c <__mdiff+0x10c>)
 8008142:	4602      	mov	r2, r0
 8008144:	f240 2132 	movw	r1, #562	; 0x232
 8008148:	4839      	ldr	r0, [pc, #228]	; (8008230 <__mdiff+0x110>)
 800814a:	f000 fb31 	bl	80087b0 <__assert_func>
 800814e:	2301      	movs	r3, #1
 8008150:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008154:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008158:	bfa4      	itt	ge
 800815a:	4643      	movge	r3, r8
 800815c:	46a0      	movge	r8, r4
 800815e:	4630      	mov	r0, r6
 8008160:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008164:	bfa6      	itte	ge
 8008166:	461c      	movge	r4, r3
 8008168:	2500      	movge	r5, #0
 800816a:	2501      	movlt	r5, #1
 800816c:	f7ff fd3a 	bl	8007be4 <_Balloc>
 8008170:	b920      	cbnz	r0, 800817c <__mdiff+0x5c>
 8008172:	4b2e      	ldr	r3, [pc, #184]	; (800822c <__mdiff+0x10c>)
 8008174:	4602      	mov	r2, r0
 8008176:	f44f 7110 	mov.w	r1, #576	; 0x240
 800817a:	e7e5      	b.n	8008148 <__mdiff+0x28>
 800817c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008180:	6926      	ldr	r6, [r4, #16]
 8008182:	60c5      	str	r5, [r0, #12]
 8008184:	f104 0914 	add.w	r9, r4, #20
 8008188:	f108 0514 	add.w	r5, r8, #20
 800818c:	f100 0e14 	add.w	lr, r0, #20
 8008190:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008194:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008198:	f108 0210 	add.w	r2, r8, #16
 800819c:	46f2      	mov	sl, lr
 800819e:	2100      	movs	r1, #0
 80081a0:	f859 3b04 	ldr.w	r3, [r9], #4
 80081a4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80081a8:	fa1f f883 	uxth.w	r8, r3
 80081ac:	fa11 f18b 	uxtah	r1, r1, fp
 80081b0:	0c1b      	lsrs	r3, r3, #16
 80081b2:	eba1 0808 	sub.w	r8, r1, r8
 80081b6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80081ba:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80081be:	fa1f f888 	uxth.w	r8, r8
 80081c2:	1419      	asrs	r1, r3, #16
 80081c4:	454e      	cmp	r6, r9
 80081c6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80081ca:	f84a 3b04 	str.w	r3, [sl], #4
 80081ce:	d8e7      	bhi.n	80081a0 <__mdiff+0x80>
 80081d0:	1b33      	subs	r3, r6, r4
 80081d2:	3b15      	subs	r3, #21
 80081d4:	f023 0303 	bic.w	r3, r3, #3
 80081d8:	3304      	adds	r3, #4
 80081da:	3415      	adds	r4, #21
 80081dc:	42a6      	cmp	r6, r4
 80081de:	bf38      	it	cc
 80081e0:	2304      	movcc	r3, #4
 80081e2:	441d      	add	r5, r3
 80081e4:	4473      	add	r3, lr
 80081e6:	469e      	mov	lr, r3
 80081e8:	462e      	mov	r6, r5
 80081ea:	4566      	cmp	r6, ip
 80081ec:	d30e      	bcc.n	800820c <__mdiff+0xec>
 80081ee:	f10c 0203 	add.w	r2, ip, #3
 80081f2:	1b52      	subs	r2, r2, r5
 80081f4:	f022 0203 	bic.w	r2, r2, #3
 80081f8:	3d03      	subs	r5, #3
 80081fa:	45ac      	cmp	ip, r5
 80081fc:	bf38      	it	cc
 80081fe:	2200      	movcc	r2, #0
 8008200:	441a      	add	r2, r3
 8008202:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008206:	b17b      	cbz	r3, 8008228 <__mdiff+0x108>
 8008208:	6107      	str	r7, [r0, #16]
 800820a:	e7a3      	b.n	8008154 <__mdiff+0x34>
 800820c:	f856 8b04 	ldr.w	r8, [r6], #4
 8008210:	fa11 f288 	uxtah	r2, r1, r8
 8008214:	1414      	asrs	r4, r2, #16
 8008216:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800821a:	b292      	uxth	r2, r2
 800821c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008220:	f84e 2b04 	str.w	r2, [lr], #4
 8008224:	1421      	asrs	r1, r4, #16
 8008226:	e7e0      	b.n	80081ea <__mdiff+0xca>
 8008228:	3f01      	subs	r7, #1
 800822a:	e7ea      	b.n	8008202 <__mdiff+0xe2>
 800822c:	08009683 	.word	0x08009683
 8008230:	08009694 	.word	0x08009694

08008234 <__d2b>:
 8008234:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008238:	4689      	mov	r9, r1
 800823a:	2101      	movs	r1, #1
 800823c:	ec57 6b10 	vmov	r6, r7, d0
 8008240:	4690      	mov	r8, r2
 8008242:	f7ff fccf 	bl	8007be4 <_Balloc>
 8008246:	4604      	mov	r4, r0
 8008248:	b930      	cbnz	r0, 8008258 <__d2b+0x24>
 800824a:	4602      	mov	r2, r0
 800824c:	4b25      	ldr	r3, [pc, #148]	; (80082e4 <__d2b+0xb0>)
 800824e:	4826      	ldr	r0, [pc, #152]	; (80082e8 <__d2b+0xb4>)
 8008250:	f240 310a 	movw	r1, #778	; 0x30a
 8008254:	f000 faac 	bl	80087b0 <__assert_func>
 8008258:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800825c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008260:	bb35      	cbnz	r5, 80082b0 <__d2b+0x7c>
 8008262:	2e00      	cmp	r6, #0
 8008264:	9301      	str	r3, [sp, #4]
 8008266:	d028      	beq.n	80082ba <__d2b+0x86>
 8008268:	4668      	mov	r0, sp
 800826a:	9600      	str	r6, [sp, #0]
 800826c:	f7ff fd82 	bl	8007d74 <__lo0bits>
 8008270:	9900      	ldr	r1, [sp, #0]
 8008272:	b300      	cbz	r0, 80082b6 <__d2b+0x82>
 8008274:	9a01      	ldr	r2, [sp, #4]
 8008276:	f1c0 0320 	rsb	r3, r0, #32
 800827a:	fa02 f303 	lsl.w	r3, r2, r3
 800827e:	430b      	orrs	r3, r1
 8008280:	40c2      	lsrs	r2, r0
 8008282:	6163      	str	r3, [r4, #20]
 8008284:	9201      	str	r2, [sp, #4]
 8008286:	9b01      	ldr	r3, [sp, #4]
 8008288:	61a3      	str	r3, [r4, #24]
 800828a:	2b00      	cmp	r3, #0
 800828c:	bf14      	ite	ne
 800828e:	2202      	movne	r2, #2
 8008290:	2201      	moveq	r2, #1
 8008292:	6122      	str	r2, [r4, #16]
 8008294:	b1d5      	cbz	r5, 80082cc <__d2b+0x98>
 8008296:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800829a:	4405      	add	r5, r0
 800829c:	f8c9 5000 	str.w	r5, [r9]
 80082a0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80082a4:	f8c8 0000 	str.w	r0, [r8]
 80082a8:	4620      	mov	r0, r4
 80082aa:	b003      	add	sp, #12
 80082ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80082b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80082b4:	e7d5      	b.n	8008262 <__d2b+0x2e>
 80082b6:	6161      	str	r1, [r4, #20]
 80082b8:	e7e5      	b.n	8008286 <__d2b+0x52>
 80082ba:	a801      	add	r0, sp, #4
 80082bc:	f7ff fd5a 	bl	8007d74 <__lo0bits>
 80082c0:	9b01      	ldr	r3, [sp, #4]
 80082c2:	6163      	str	r3, [r4, #20]
 80082c4:	2201      	movs	r2, #1
 80082c6:	6122      	str	r2, [r4, #16]
 80082c8:	3020      	adds	r0, #32
 80082ca:	e7e3      	b.n	8008294 <__d2b+0x60>
 80082cc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80082d0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80082d4:	f8c9 0000 	str.w	r0, [r9]
 80082d8:	6918      	ldr	r0, [r3, #16]
 80082da:	f7ff fd2b 	bl	8007d34 <__hi0bits>
 80082de:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80082e2:	e7df      	b.n	80082a4 <__d2b+0x70>
 80082e4:	08009683 	.word	0x08009683
 80082e8:	08009694 	.word	0x08009694

080082ec <_calloc_r>:
 80082ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80082ee:	fba1 2402 	umull	r2, r4, r1, r2
 80082f2:	b94c      	cbnz	r4, 8008308 <_calloc_r+0x1c>
 80082f4:	4611      	mov	r1, r2
 80082f6:	9201      	str	r2, [sp, #4]
 80082f8:	f000 f87a 	bl	80083f0 <_malloc_r>
 80082fc:	9a01      	ldr	r2, [sp, #4]
 80082fe:	4605      	mov	r5, r0
 8008300:	b930      	cbnz	r0, 8008310 <_calloc_r+0x24>
 8008302:	4628      	mov	r0, r5
 8008304:	b003      	add	sp, #12
 8008306:	bd30      	pop	{r4, r5, pc}
 8008308:	220c      	movs	r2, #12
 800830a:	6002      	str	r2, [r0, #0]
 800830c:	2500      	movs	r5, #0
 800830e:	e7f8      	b.n	8008302 <_calloc_r+0x16>
 8008310:	4621      	mov	r1, r4
 8008312:	f7fe f94d 	bl	80065b0 <memset>
 8008316:	e7f4      	b.n	8008302 <_calloc_r+0x16>

08008318 <_free_r>:
 8008318:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800831a:	2900      	cmp	r1, #0
 800831c:	d044      	beq.n	80083a8 <_free_r+0x90>
 800831e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008322:	9001      	str	r0, [sp, #4]
 8008324:	2b00      	cmp	r3, #0
 8008326:	f1a1 0404 	sub.w	r4, r1, #4
 800832a:	bfb8      	it	lt
 800832c:	18e4      	addlt	r4, r4, r3
 800832e:	f000 fa9b 	bl	8008868 <__malloc_lock>
 8008332:	4a1e      	ldr	r2, [pc, #120]	; (80083ac <_free_r+0x94>)
 8008334:	9801      	ldr	r0, [sp, #4]
 8008336:	6813      	ldr	r3, [r2, #0]
 8008338:	b933      	cbnz	r3, 8008348 <_free_r+0x30>
 800833a:	6063      	str	r3, [r4, #4]
 800833c:	6014      	str	r4, [r2, #0]
 800833e:	b003      	add	sp, #12
 8008340:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008344:	f000 ba96 	b.w	8008874 <__malloc_unlock>
 8008348:	42a3      	cmp	r3, r4
 800834a:	d908      	bls.n	800835e <_free_r+0x46>
 800834c:	6825      	ldr	r5, [r4, #0]
 800834e:	1961      	adds	r1, r4, r5
 8008350:	428b      	cmp	r3, r1
 8008352:	bf01      	itttt	eq
 8008354:	6819      	ldreq	r1, [r3, #0]
 8008356:	685b      	ldreq	r3, [r3, #4]
 8008358:	1949      	addeq	r1, r1, r5
 800835a:	6021      	streq	r1, [r4, #0]
 800835c:	e7ed      	b.n	800833a <_free_r+0x22>
 800835e:	461a      	mov	r2, r3
 8008360:	685b      	ldr	r3, [r3, #4]
 8008362:	b10b      	cbz	r3, 8008368 <_free_r+0x50>
 8008364:	42a3      	cmp	r3, r4
 8008366:	d9fa      	bls.n	800835e <_free_r+0x46>
 8008368:	6811      	ldr	r1, [r2, #0]
 800836a:	1855      	adds	r5, r2, r1
 800836c:	42a5      	cmp	r5, r4
 800836e:	d10b      	bne.n	8008388 <_free_r+0x70>
 8008370:	6824      	ldr	r4, [r4, #0]
 8008372:	4421      	add	r1, r4
 8008374:	1854      	adds	r4, r2, r1
 8008376:	42a3      	cmp	r3, r4
 8008378:	6011      	str	r1, [r2, #0]
 800837a:	d1e0      	bne.n	800833e <_free_r+0x26>
 800837c:	681c      	ldr	r4, [r3, #0]
 800837e:	685b      	ldr	r3, [r3, #4]
 8008380:	6053      	str	r3, [r2, #4]
 8008382:	4421      	add	r1, r4
 8008384:	6011      	str	r1, [r2, #0]
 8008386:	e7da      	b.n	800833e <_free_r+0x26>
 8008388:	d902      	bls.n	8008390 <_free_r+0x78>
 800838a:	230c      	movs	r3, #12
 800838c:	6003      	str	r3, [r0, #0]
 800838e:	e7d6      	b.n	800833e <_free_r+0x26>
 8008390:	6825      	ldr	r5, [r4, #0]
 8008392:	1961      	adds	r1, r4, r5
 8008394:	428b      	cmp	r3, r1
 8008396:	bf04      	itt	eq
 8008398:	6819      	ldreq	r1, [r3, #0]
 800839a:	685b      	ldreq	r3, [r3, #4]
 800839c:	6063      	str	r3, [r4, #4]
 800839e:	bf04      	itt	eq
 80083a0:	1949      	addeq	r1, r1, r5
 80083a2:	6021      	streq	r1, [r4, #0]
 80083a4:	6054      	str	r4, [r2, #4]
 80083a6:	e7ca      	b.n	800833e <_free_r+0x26>
 80083a8:	b003      	add	sp, #12
 80083aa:	bd30      	pop	{r4, r5, pc}
 80083ac:	2000036c 	.word	0x2000036c

080083b0 <sbrk_aligned>:
 80083b0:	b570      	push	{r4, r5, r6, lr}
 80083b2:	4e0e      	ldr	r6, [pc, #56]	; (80083ec <sbrk_aligned+0x3c>)
 80083b4:	460c      	mov	r4, r1
 80083b6:	6831      	ldr	r1, [r6, #0]
 80083b8:	4605      	mov	r5, r0
 80083ba:	b911      	cbnz	r1, 80083c2 <sbrk_aligned+0x12>
 80083bc:	f000 f9e8 	bl	8008790 <_sbrk_r>
 80083c0:	6030      	str	r0, [r6, #0]
 80083c2:	4621      	mov	r1, r4
 80083c4:	4628      	mov	r0, r5
 80083c6:	f000 f9e3 	bl	8008790 <_sbrk_r>
 80083ca:	1c43      	adds	r3, r0, #1
 80083cc:	d00a      	beq.n	80083e4 <sbrk_aligned+0x34>
 80083ce:	1cc4      	adds	r4, r0, #3
 80083d0:	f024 0403 	bic.w	r4, r4, #3
 80083d4:	42a0      	cmp	r0, r4
 80083d6:	d007      	beq.n	80083e8 <sbrk_aligned+0x38>
 80083d8:	1a21      	subs	r1, r4, r0
 80083da:	4628      	mov	r0, r5
 80083dc:	f000 f9d8 	bl	8008790 <_sbrk_r>
 80083e0:	3001      	adds	r0, #1
 80083e2:	d101      	bne.n	80083e8 <sbrk_aligned+0x38>
 80083e4:	f04f 34ff 	mov.w	r4, #4294967295
 80083e8:	4620      	mov	r0, r4
 80083ea:	bd70      	pop	{r4, r5, r6, pc}
 80083ec:	20000370 	.word	0x20000370

080083f0 <_malloc_r>:
 80083f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083f4:	1ccd      	adds	r5, r1, #3
 80083f6:	f025 0503 	bic.w	r5, r5, #3
 80083fa:	3508      	adds	r5, #8
 80083fc:	2d0c      	cmp	r5, #12
 80083fe:	bf38      	it	cc
 8008400:	250c      	movcc	r5, #12
 8008402:	2d00      	cmp	r5, #0
 8008404:	4607      	mov	r7, r0
 8008406:	db01      	blt.n	800840c <_malloc_r+0x1c>
 8008408:	42a9      	cmp	r1, r5
 800840a:	d905      	bls.n	8008418 <_malloc_r+0x28>
 800840c:	230c      	movs	r3, #12
 800840e:	603b      	str	r3, [r7, #0]
 8008410:	2600      	movs	r6, #0
 8008412:	4630      	mov	r0, r6
 8008414:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008418:	4e2e      	ldr	r6, [pc, #184]	; (80084d4 <_malloc_r+0xe4>)
 800841a:	f000 fa25 	bl	8008868 <__malloc_lock>
 800841e:	6833      	ldr	r3, [r6, #0]
 8008420:	461c      	mov	r4, r3
 8008422:	bb34      	cbnz	r4, 8008472 <_malloc_r+0x82>
 8008424:	4629      	mov	r1, r5
 8008426:	4638      	mov	r0, r7
 8008428:	f7ff ffc2 	bl	80083b0 <sbrk_aligned>
 800842c:	1c43      	adds	r3, r0, #1
 800842e:	4604      	mov	r4, r0
 8008430:	d14d      	bne.n	80084ce <_malloc_r+0xde>
 8008432:	6834      	ldr	r4, [r6, #0]
 8008434:	4626      	mov	r6, r4
 8008436:	2e00      	cmp	r6, #0
 8008438:	d140      	bne.n	80084bc <_malloc_r+0xcc>
 800843a:	6823      	ldr	r3, [r4, #0]
 800843c:	4631      	mov	r1, r6
 800843e:	4638      	mov	r0, r7
 8008440:	eb04 0803 	add.w	r8, r4, r3
 8008444:	f000 f9a4 	bl	8008790 <_sbrk_r>
 8008448:	4580      	cmp	r8, r0
 800844a:	d13a      	bne.n	80084c2 <_malloc_r+0xd2>
 800844c:	6821      	ldr	r1, [r4, #0]
 800844e:	3503      	adds	r5, #3
 8008450:	1a6d      	subs	r5, r5, r1
 8008452:	f025 0503 	bic.w	r5, r5, #3
 8008456:	3508      	adds	r5, #8
 8008458:	2d0c      	cmp	r5, #12
 800845a:	bf38      	it	cc
 800845c:	250c      	movcc	r5, #12
 800845e:	4629      	mov	r1, r5
 8008460:	4638      	mov	r0, r7
 8008462:	f7ff ffa5 	bl	80083b0 <sbrk_aligned>
 8008466:	3001      	adds	r0, #1
 8008468:	d02b      	beq.n	80084c2 <_malloc_r+0xd2>
 800846a:	6823      	ldr	r3, [r4, #0]
 800846c:	442b      	add	r3, r5
 800846e:	6023      	str	r3, [r4, #0]
 8008470:	e00e      	b.n	8008490 <_malloc_r+0xa0>
 8008472:	6822      	ldr	r2, [r4, #0]
 8008474:	1b52      	subs	r2, r2, r5
 8008476:	d41e      	bmi.n	80084b6 <_malloc_r+0xc6>
 8008478:	2a0b      	cmp	r2, #11
 800847a:	d916      	bls.n	80084aa <_malloc_r+0xba>
 800847c:	1961      	adds	r1, r4, r5
 800847e:	42a3      	cmp	r3, r4
 8008480:	6025      	str	r5, [r4, #0]
 8008482:	bf18      	it	ne
 8008484:	6059      	strne	r1, [r3, #4]
 8008486:	6863      	ldr	r3, [r4, #4]
 8008488:	bf08      	it	eq
 800848a:	6031      	streq	r1, [r6, #0]
 800848c:	5162      	str	r2, [r4, r5]
 800848e:	604b      	str	r3, [r1, #4]
 8008490:	4638      	mov	r0, r7
 8008492:	f104 060b 	add.w	r6, r4, #11
 8008496:	f000 f9ed 	bl	8008874 <__malloc_unlock>
 800849a:	f026 0607 	bic.w	r6, r6, #7
 800849e:	1d23      	adds	r3, r4, #4
 80084a0:	1af2      	subs	r2, r6, r3
 80084a2:	d0b6      	beq.n	8008412 <_malloc_r+0x22>
 80084a4:	1b9b      	subs	r3, r3, r6
 80084a6:	50a3      	str	r3, [r4, r2]
 80084a8:	e7b3      	b.n	8008412 <_malloc_r+0x22>
 80084aa:	6862      	ldr	r2, [r4, #4]
 80084ac:	42a3      	cmp	r3, r4
 80084ae:	bf0c      	ite	eq
 80084b0:	6032      	streq	r2, [r6, #0]
 80084b2:	605a      	strne	r2, [r3, #4]
 80084b4:	e7ec      	b.n	8008490 <_malloc_r+0xa0>
 80084b6:	4623      	mov	r3, r4
 80084b8:	6864      	ldr	r4, [r4, #4]
 80084ba:	e7b2      	b.n	8008422 <_malloc_r+0x32>
 80084bc:	4634      	mov	r4, r6
 80084be:	6876      	ldr	r6, [r6, #4]
 80084c0:	e7b9      	b.n	8008436 <_malloc_r+0x46>
 80084c2:	230c      	movs	r3, #12
 80084c4:	603b      	str	r3, [r7, #0]
 80084c6:	4638      	mov	r0, r7
 80084c8:	f000 f9d4 	bl	8008874 <__malloc_unlock>
 80084cc:	e7a1      	b.n	8008412 <_malloc_r+0x22>
 80084ce:	6025      	str	r5, [r4, #0]
 80084d0:	e7de      	b.n	8008490 <_malloc_r+0xa0>
 80084d2:	bf00      	nop
 80084d4:	2000036c 	.word	0x2000036c

080084d8 <__ssputs_r>:
 80084d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80084dc:	688e      	ldr	r6, [r1, #8]
 80084de:	429e      	cmp	r6, r3
 80084e0:	4682      	mov	sl, r0
 80084e2:	460c      	mov	r4, r1
 80084e4:	4690      	mov	r8, r2
 80084e6:	461f      	mov	r7, r3
 80084e8:	d838      	bhi.n	800855c <__ssputs_r+0x84>
 80084ea:	898a      	ldrh	r2, [r1, #12]
 80084ec:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80084f0:	d032      	beq.n	8008558 <__ssputs_r+0x80>
 80084f2:	6825      	ldr	r5, [r4, #0]
 80084f4:	6909      	ldr	r1, [r1, #16]
 80084f6:	eba5 0901 	sub.w	r9, r5, r1
 80084fa:	6965      	ldr	r5, [r4, #20]
 80084fc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008500:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008504:	3301      	adds	r3, #1
 8008506:	444b      	add	r3, r9
 8008508:	106d      	asrs	r5, r5, #1
 800850a:	429d      	cmp	r5, r3
 800850c:	bf38      	it	cc
 800850e:	461d      	movcc	r5, r3
 8008510:	0553      	lsls	r3, r2, #21
 8008512:	d531      	bpl.n	8008578 <__ssputs_r+0xa0>
 8008514:	4629      	mov	r1, r5
 8008516:	f7ff ff6b 	bl	80083f0 <_malloc_r>
 800851a:	4606      	mov	r6, r0
 800851c:	b950      	cbnz	r0, 8008534 <__ssputs_r+0x5c>
 800851e:	230c      	movs	r3, #12
 8008520:	f8ca 3000 	str.w	r3, [sl]
 8008524:	89a3      	ldrh	r3, [r4, #12]
 8008526:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800852a:	81a3      	strh	r3, [r4, #12]
 800852c:	f04f 30ff 	mov.w	r0, #4294967295
 8008530:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008534:	6921      	ldr	r1, [r4, #16]
 8008536:	464a      	mov	r2, r9
 8008538:	f7fe f82c 	bl	8006594 <memcpy>
 800853c:	89a3      	ldrh	r3, [r4, #12]
 800853e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008542:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008546:	81a3      	strh	r3, [r4, #12]
 8008548:	6126      	str	r6, [r4, #16]
 800854a:	6165      	str	r5, [r4, #20]
 800854c:	444e      	add	r6, r9
 800854e:	eba5 0509 	sub.w	r5, r5, r9
 8008552:	6026      	str	r6, [r4, #0]
 8008554:	60a5      	str	r5, [r4, #8]
 8008556:	463e      	mov	r6, r7
 8008558:	42be      	cmp	r6, r7
 800855a:	d900      	bls.n	800855e <__ssputs_r+0x86>
 800855c:	463e      	mov	r6, r7
 800855e:	6820      	ldr	r0, [r4, #0]
 8008560:	4632      	mov	r2, r6
 8008562:	4641      	mov	r1, r8
 8008564:	f000 f966 	bl	8008834 <memmove>
 8008568:	68a3      	ldr	r3, [r4, #8]
 800856a:	1b9b      	subs	r3, r3, r6
 800856c:	60a3      	str	r3, [r4, #8]
 800856e:	6823      	ldr	r3, [r4, #0]
 8008570:	4433      	add	r3, r6
 8008572:	6023      	str	r3, [r4, #0]
 8008574:	2000      	movs	r0, #0
 8008576:	e7db      	b.n	8008530 <__ssputs_r+0x58>
 8008578:	462a      	mov	r2, r5
 800857a:	f000 f981 	bl	8008880 <_realloc_r>
 800857e:	4606      	mov	r6, r0
 8008580:	2800      	cmp	r0, #0
 8008582:	d1e1      	bne.n	8008548 <__ssputs_r+0x70>
 8008584:	6921      	ldr	r1, [r4, #16]
 8008586:	4650      	mov	r0, sl
 8008588:	f7ff fec6 	bl	8008318 <_free_r>
 800858c:	e7c7      	b.n	800851e <__ssputs_r+0x46>
	...

08008590 <_svfiprintf_r>:
 8008590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008594:	4698      	mov	r8, r3
 8008596:	898b      	ldrh	r3, [r1, #12]
 8008598:	061b      	lsls	r3, r3, #24
 800859a:	b09d      	sub	sp, #116	; 0x74
 800859c:	4607      	mov	r7, r0
 800859e:	460d      	mov	r5, r1
 80085a0:	4614      	mov	r4, r2
 80085a2:	d50e      	bpl.n	80085c2 <_svfiprintf_r+0x32>
 80085a4:	690b      	ldr	r3, [r1, #16]
 80085a6:	b963      	cbnz	r3, 80085c2 <_svfiprintf_r+0x32>
 80085a8:	2140      	movs	r1, #64	; 0x40
 80085aa:	f7ff ff21 	bl	80083f0 <_malloc_r>
 80085ae:	6028      	str	r0, [r5, #0]
 80085b0:	6128      	str	r0, [r5, #16]
 80085b2:	b920      	cbnz	r0, 80085be <_svfiprintf_r+0x2e>
 80085b4:	230c      	movs	r3, #12
 80085b6:	603b      	str	r3, [r7, #0]
 80085b8:	f04f 30ff 	mov.w	r0, #4294967295
 80085bc:	e0d1      	b.n	8008762 <_svfiprintf_r+0x1d2>
 80085be:	2340      	movs	r3, #64	; 0x40
 80085c0:	616b      	str	r3, [r5, #20]
 80085c2:	2300      	movs	r3, #0
 80085c4:	9309      	str	r3, [sp, #36]	; 0x24
 80085c6:	2320      	movs	r3, #32
 80085c8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80085cc:	f8cd 800c 	str.w	r8, [sp, #12]
 80085d0:	2330      	movs	r3, #48	; 0x30
 80085d2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800877c <_svfiprintf_r+0x1ec>
 80085d6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80085da:	f04f 0901 	mov.w	r9, #1
 80085de:	4623      	mov	r3, r4
 80085e0:	469a      	mov	sl, r3
 80085e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80085e6:	b10a      	cbz	r2, 80085ec <_svfiprintf_r+0x5c>
 80085e8:	2a25      	cmp	r2, #37	; 0x25
 80085ea:	d1f9      	bne.n	80085e0 <_svfiprintf_r+0x50>
 80085ec:	ebba 0b04 	subs.w	fp, sl, r4
 80085f0:	d00b      	beq.n	800860a <_svfiprintf_r+0x7a>
 80085f2:	465b      	mov	r3, fp
 80085f4:	4622      	mov	r2, r4
 80085f6:	4629      	mov	r1, r5
 80085f8:	4638      	mov	r0, r7
 80085fa:	f7ff ff6d 	bl	80084d8 <__ssputs_r>
 80085fe:	3001      	adds	r0, #1
 8008600:	f000 80aa 	beq.w	8008758 <_svfiprintf_r+0x1c8>
 8008604:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008606:	445a      	add	r2, fp
 8008608:	9209      	str	r2, [sp, #36]	; 0x24
 800860a:	f89a 3000 	ldrb.w	r3, [sl]
 800860e:	2b00      	cmp	r3, #0
 8008610:	f000 80a2 	beq.w	8008758 <_svfiprintf_r+0x1c8>
 8008614:	2300      	movs	r3, #0
 8008616:	f04f 32ff 	mov.w	r2, #4294967295
 800861a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800861e:	f10a 0a01 	add.w	sl, sl, #1
 8008622:	9304      	str	r3, [sp, #16]
 8008624:	9307      	str	r3, [sp, #28]
 8008626:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800862a:	931a      	str	r3, [sp, #104]	; 0x68
 800862c:	4654      	mov	r4, sl
 800862e:	2205      	movs	r2, #5
 8008630:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008634:	4851      	ldr	r0, [pc, #324]	; (800877c <_svfiprintf_r+0x1ec>)
 8008636:	f7f7 fdf3 	bl	8000220 <memchr>
 800863a:	9a04      	ldr	r2, [sp, #16]
 800863c:	b9d8      	cbnz	r0, 8008676 <_svfiprintf_r+0xe6>
 800863e:	06d0      	lsls	r0, r2, #27
 8008640:	bf44      	itt	mi
 8008642:	2320      	movmi	r3, #32
 8008644:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008648:	0711      	lsls	r1, r2, #28
 800864a:	bf44      	itt	mi
 800864c:	232b      	movmi	r3, #43	; 0x2b
 800864e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008652:	f89a 3000 	ldrb.w	r3, [sl]
 8008656:	2b2a      	cmp	r3, #42	; 0x2a
 8008658:	d015      	beq.n	8008686 <_svfiprintf_r+0xf6>
 800865a:	9a07      	ldr	r2, [sp, #28]
 800865c:	4654      	mov	r4, sl
 800865e:	2000      	movs	r0, #0
 8008660:	f04f 0c0a 	mov.w	ip, #10
 8008664:	4621      	mov	r1, r4
 8008666:	f811 3b01 	ldrb.w	r3, [r1], #1
 800866a:	3b30      	subs	r3, #48	; 0x30
 800866c:	2b09      	cmp	r3, #9
 800866e:	d94e      	bls.n	800870e <_svfiprintf_r+0x17e>
 8008670:	b1b0      	cbz	r0, 80086a0 <_svfiprintf_r+0x110>
 8008672:	9207      	str	r2, [sp, #28]
 8008674:	e014      	b.n	80086a0 <_svfiprintf_r+0x110>
 8008676:	eba0 0308 	sub.w	r3, r0, r8
 800867a:	fa09 f303 	lsl.w	r3, r9, r3
 800867e:	4313      	orrs	r3, r2
 8008680:	9304      	str	r3, [sp, #16]
 8008682:	46a2      	mov	sl, r4
 8008684:	e7d2      	b.n	800862c <_svfiprintf_r+0x9c>
 8008686:	9b03      	ldr	r3, [sp, #12]
 8008688:	1d19      	adds	r1, r3, #4
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	9103      	str	r1, [sp, #12]
 800868e:	2b00      	cmp	r3, #0
 8008690:	bfbb      	ittet	lt
 8008692:	425b      	neglt	r3, r3
 8008694:	f042 0202 	orrlt.w	r2, r2, #2
 8008698:	9307      	strge	r3, [sp, #28]
 800869a:	9307      	strlt	r3, [sp, #28]
 800869c:	bfb8      	it	lt
 800869e:	9204      	strlt	r2, [sp, #16]
 80086a0:	7823      	ldrb	r3, [r4, #0]
 80086a2:	2b2e      	cmp	r3, #46	; 0x2e
 80086a4:	d10c      	bne.n	80086c0 <_svfiprintf_r+0x130>
 80086a6:	7863      	ldrb	r3, [r4, #1]
 80086a8:	2b2a      	cmp	r3, #42	; 0x2a
 80086aa:	d135      	bne.n	8008718 <_svfiprintf_r+0x188>
 80086ac:	9b03      	ldr	r3, [sp, #12]
 80086ae:	1d1a      	adds	r2, r3, #4
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	9203      	str	r2, [sp, #12]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	bfb8      	it	lt
 80086b8:	f04f 33ff 	movlt.w	r3, #4294967295
 80086bc:	3402      	adds	r4, #2
 80086be:	9305      	str	r3, [sp, #20]
 80086c0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800878c <_svfiprintf_r+0x1fc>
 80086c4:	7821      	ldrb	r1, [r4, #0]
 80086c6:	2203      	movs	r2, #3
 80086c8:	4650      	mov	r0, sl
 80086ca:	f7f7 fda9 	bl	8000220 <memchr>
 80086ce:	b140      	cbz	r0, 80086e2 <_svfiprintf_r+0x152>
 80086d0:	2340      	movs	r3, #64	; 0x40
 80086d2:	eba0 000a 	sub.w	r0, r0, sl
 80086d6:	fa03 f000 	lsl.w	r0, r3, r0
 80086da:	9b04      	ldr	r3, [sp, #16]
 80086dc:	4303      	orrs	r3, r0
 80086de:	3401      	adds	r4, #1
 80086e0:	9304      	str	r3, [sp, #16]
 80086e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086e6:	4826      	ldr	r0, [pc, #152]	; (8008780 <_svfiprintf_r+0x1f0>)
 80086e8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80086ec:	2206      	movs	r2, #6
 80086ee:	f7f7 fd97 	bl	8000220 <memchr>
 80086f2:	2800      	cmp	r0, #0
 80086f4:	d038      	beq.n	8008768 <_svfiprintf_r+0x1d8>
 80086f6:	4b23      	ldr	r3, [pc, #140]	; (8008784 <_svfiprintf_r+0x1f4>)
 80086f8:	bb1b      	cbnz	r3, 8008742 <_svfiprintf_r+0x1b2>
 80086fa:	9b03      	ldr	r3, [sp, #12]
 80086fc:	3307      	adds	r3, #7
 80086fe:	f023 0307 	bic.w	r3, r3, #7
 8008702:	3308      	adds	r3, #8
 8008704:	9303      	str	r3, [sp, #12]
 8008706:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008708:	4433      	add	r3, r6
 800870a:	9309      	str	r3, [sp, #36]	; 0x24
 800870c:	e767      	b.n	80085de <_svfiprintf_r+0x4e>
 800870e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008712:	460c      	mov	r4, r1
 8008714:	2001      	movs	r0, #1
 8008716:	e7a5      	b.n	8008664 <_svfiprintf_r+0xd4>
 8008718:	2300      	movs	r3, #0
 800871a:	3401      	adds	r4, #1
 800871c:	9305      	str	r3, [sp, #20]
 800871e:	4619      	mov	r1, r3
 8008720:	f04f 0c0a 	mov.w	ip, #10
 8008724:	4620      	mov	r0, r4
 8008726:	f810 2b01 	ldrb.w	r2, [r0], #1
 800872a:	3a30      	subs	r2, #48	; 0x30
 800872c:	2a09      	cmp	r2, #9
 800872e:	d903      	bls.n	8008738 <_svfiprintf_r+0x1a8>
 8008730:	2b00      	cmp	r3, #0
 8008732:	d0c5      	beq.n	80086c0 <_svfiprintf_r+0x130>
 8008734:	9105      	str	r1, [sp, #20]
 8008736:	e7c3      	b.n	80086c0 <_svfiprintf_r+0x130>
 8008738:	fb0c 2101 	mla	r1, ip, r1, r2
 800873c:	4604      	mov	r4, r0
 800873e:	2301      	movs	r3, #1
 8008740:	e7f0      	b.n	8008724 <_svfiprintf_r+0x194>
 8008742:	ab03      	add	r3, sp, #12
 8008744:	9300      	str	r3, [sp, #0]
 8008746:	462a      	mov	r2, r5
 8008748:	4b0f      	ldr	r3, [pc, #60]	; (8008788 <_svfiprintf_r+0x1f8>)
 800874a:	a904      	add	r1, sp, #16
 800874c:	4638      	mov	r0, r7
 800874e:	f7fd ffd7 	bl	8006700 <_printf_float>
 8008752:	1c42      	adds	r2, r0, #1
 8008754:	4606      	mov	r6, r0
 8008756:	d1d6      	bne.n	8008706 <_svfiprintf_r+0x176>
 8008758:	89ab      	ldrh	r3, [r5, #12]
 800875a:	065b      	lsls	r3, r3, #25
 800875c:	f53f af2c 	bmi.w	80085b8 <_svfiprintf_r+0x28>
 8008760:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008762:	b01d      	add	sp, #116	; 0x74
 8008764:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008768:	ab03      	add	r3, sp, #12
 800876a:	9300      	str	r3, [sp, #0]
 800876c:	462a      	mov	r2, r5
 800876e:	4b06      	ldr	r3, [pc, #24]	; (8008788 <_svfiprintf_r+0x1f8>)
 8008770:	a904      	add	r1, sp, #16
 8008772:	4638      	mov	r0, r7
 8008774:	f7fe fa68 	bl	8006c48 <_printf_i>
 8008778:	e7eb      	b.n	8008752 <_svfiprintf_r+0x1c2>
 800877a:	bf00      	nop
 800877c:	080097ec 	.word	0x080097ec
 8008780:	080097f6 	.word	0x080097f6
 8008784:	08006701 	.word	0x08006701
 8008788:	080084d9 	.word	0x080084d9
 800878c:	080097f2 	.word	0x080097f2

08008790 <_sbrk_r>:
 8008790:	b538      	push	{r3, r4, r5, lr}
 8008792:	4d06      	ldr	r5, [pc, #24]	; (80087ac <_sbrk_r+0x1c>)
 8008794:	2300      	movs	r3, #0
 8008796:	4604      	mov	r4, r0
 8008798:	4608      	mov	r0, r1
 800879a:	602b      	str	r3, [r5, #0]
 800879c:	f7f9 f876 	bl	800188c <_sbrk>
 80087a0:	1c43      	adds	r3, r0, #1
 80087a2:	d102      	bne.n	80087aa <_sbrk_r+0x1a>
 80087a4:	682b      	ldr	r3, [r5, #0]
 80087a6:	b103      	cbz	r3, 80087aa <_sbrk_r+0x1a>
 80087a8:	6023      	str	r3, [r4, #0]
 80087aa:	bd38      	pop	{r3, r4, r5, pc}
 80087ac:	20000374 	.word	0x20000374

080087b0 <__assert_func>:
 80087b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80087b2:	4614      	mov	r4, r2
 80087b4:	461a      	mov	r2, r3
 80087b6:	4b09      	ldr	r3, [pc, #36]	; (80087dc <__assert_func+0x2c>)
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	4605      	mov	r5, r0
 80087bc:	68d8      	ldr	r0, [r3, #12]
 80087be:	b14c      	cbz	r4, 80087d4 <__assert_func+0x24>
 80087c0:	4b07      	ldr	r3, [pc, #28]	; (80087e0 <__assert_func+0x30>)
 80087c2:	9100      	str	r1, [sp, #0]
 80087c4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80087c8:	4906      	ldr	r1, [pc, #24]	; (80087e4 <__assert_func+0x34>)
 80087ca:	462b      	mov	r3, r5
 80087cc:	f000 f80e 	bl	80087ec <fiprintf>
 80087d0:	f000 faac 	bl	8008d2c <abort>
 80087d4:	4b04      	ldr	r3, [pc, #16]	; (80087e8 <__assert_func+0x38>)
 80087d6:	461c      	mov	r4, r3
 80087d8:	e7f3      	b.n	80087c2 <__assert_func+0x12>
 80087da:	bf00      	nop
 80087dc:	2000000c 	.word	0x2000000c
 80087e0:	080097fd 	.word	0x080097fd
 80087e4:	0800980a 	.word	0x0800980a
 80087e8:	08009838 	.word	0x08009838

080087ec <fiprintf>:
 80087ec:	b40e      	push	{r1, r2, r3}
 80087ee:	b503      	push	{r0, r1, lr}
 80087f0:	4601      	mov	r1, r0
 80087f2:	ab03      	add	r3, sp, #12
 80087f4:	4805      	ldr	r0, [pc, #20]	; (800880c <fiprintf+0x20>)
 80087f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80087fa:	6800      	ldr	r0, [r0, #0]
 80087fc:	9301      	str	r3, [sp, #4]
 80087fe:	f000 f897 	bl	8008930 <_vfiprintf_r>
 8008802:	b002      	add	sp, #8
 8008804:	f85d eb04 	ldr.w	lr, [sp], #4
 8008808:	b003      	add	sp, #12
 800880a:	4770      	bx	lr
 800880c:	2000000c 	.word	0x2000000c

08008810 <__ascii_mbtowc>:
 8008810:	b082      	sub	sp, #8
 8008812:	b901      	cbnz	r1, 8008816 <__ascii_mbtowc+0x6>
 8008814:	a901      	add	r1, sp, #4
 8008816:	b142      	cbz	r2, 800882a <__ascii_mbtowc+0x1a>
 8008818:	b14b      	cbz	r3, 800882e <__ascii_mbtowc+0x1e>
 800881a:	7813      	ldrb	r3, [r2, #0]
 800881c:	600b      	str	r3, [r1, #0]
 800881e:	7812      	ldrb	r2, [r2, #0]
 8008820:	1e10      	subs	r0, r2, #0
 8008822:	bf18      	it	ne
 8008824:	2001      	movne	r0, #1
 8008826:	b002      	add	sp, #8
 8008828:	4770      	bx	lr
 800882a:	4610      	mov	r0, r2
 800882c:	e7fb      	b.n	8008826 <__ascii_mbtowc+0x16>
 800882e:	f06f 0001 	mvn.w	r0, #1
 8008832:	e7f8      	b.n	8008826 <__ascii_mbtowc+0x16>

08008834 <memmove>:
 8008834:	4288      	cmp	r0, r1
 8008836:	b510      	push	{r4, lr}
 8008838:	eb01 0402 	add.w	r4, r1, r2
 800883c:	d902      	bls.n	8008844 <memmove+0x10>
 800883e:	4284      	cmp	r4, r0
 8008840:	4623      	mov	r3, r4
 8008842:	d807      	bhi.n	8008854 <memmove+0x20>
 8008844:	1e43      	subs	r3, r0, #1
 8008846:	42a1      	cmp	r1, r4
 8008848:	d008      	beq.n	800885c <memmove+0x28>
 800884a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800884e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008852:	e7f8      	b.n	8008846 <memmove+0x12>
 8008854:	4402      	add	r2, r0
 8008856:	4601      	mov	r1, r0
 8008858:	428a      	cmp	r2, r1
 800885a:	d100      	bne.n	800885e <memmove+0x2a>
 800885c:	bd10      	pop	{r4, pc}
 800885e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008862:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008866:	e7f7      	b.n	8008858 <memmove+0x24>

08008868 <__malloc_lock>:
 8008868:	4801      	ldr	r0, [pc, #4]	; (8008870 <__malloc_lock+0x8>)
 800886a:	f000 bc1f 	b.w	80090ac <__retarget_lock_acquire_recursive>
 800886e:	bf00      	nop
 8008870:	20000378 	.word	0x20000378

08008874 <__malloc_unlock>:
 8008874:	4801      	ldr	r0, [pc, #4]	; (800887c <__malloc_unlock+0x8>)
 8008876:	f000 bc1a 	b.w	80090ae <__retarget_lock_release_recursive>
 800887a:	bf00      	nop
 800887c:	20000378 	.word	0x20000378

08008880 <_realloc_r>:
 8008880:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008884:	4680      	mov	r8, r0
 8008886:	4614      	mov	r4, r2
 8008888:	460e      	mov	r6, r1
 800888a:	b921      	cbnz	r1, 8008896 <_realloc_r+0x16>
 800888c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008890:	4611      	mov	r1, r2
 8008892:	f7ff bdad 	b.w	80083f0 <_malloc_r>
 8008896:	b92a      	cbnz	r2, 80088a4 <_realloc_r+0x24>
 8008898:	f7ff fd3e 	bl	8008318 <_free_r>
 800889c:	4625      	mov	r5, r4
 800889e:	4628      	mov	r0, r5
 80088a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80088a4:	f000 fc6a 	bl	800917c <_malloc_usable_size_r>
 80088a8:	4284      	cmp	r4, r0
 80088aa:	4607      	mov	r7, r0
 80088ac:	d802      	bhi.n	80088b4 <_realloc_r+0x34>
 80088ae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80088b2:	d812      	bhi.n	80088da <_realloc_r+0x5a>
 80088b4:	4621      	mov	r1, r4
 80088b6:	4640      	mov	r0, r8
 80088b8:	f7ff fd9a 	bl	80083f0 <_malloc_r>
 80088bc:	4605      	mov	r5, r0
 80088be:	2800      	cmp	r0, #0
 80088c0:	d0ed      	beq.n	800889e <_realloc_r+0x1e>
 80088c2:	42bc      	cmp	r4, r7
 80088c4:	4622      	mov	r2, r4
 80088c6:	4631      	mov	r1, r6
 80088c8:	bf28      	it	cs
 80088ca:	463a      	movcs	r2, r7
 80088cc:	f7fd fe62 	bl	8006594 <memcpy>
 80088d0:	4631      	mov	r1, r6
 80088d2:	4640      	mov	r0, r8
 80088d4:	f7ff fd20 	bl	8008318 <_free_r>
 80088d8:	e7e1      	b.n	800889e <_realloc_r+0x1e>
 80088da:	4635      	mov	r5, r6
 80088dc:	e7df      	b.n	800889e <_realloc_r+0x1e>

080088de <__sfputc_r>:
 80088de:	6893      	ldr	r3, [r2, #8]
 80088e0:	3b01      	subs	r3, #1
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	b410      	push	{r4}
 80088e6:	6093      	str	r3, [r2, #8]
 80088e8:	da08      	bge.n	80088fc <__sfputc_r+0x1e>
 80088ea:	6994      	ldr	r4, [r2, #24]
 80088ec:	42a3      	cmp	r3, r4
 80088ee:	db01      	blt.n	80088f4 <__sfputc_r+0x16>
 80088f0:	290a      	cmp	r1, #10
 80088f2:	d103      	bne.n	80088fc <__sfputc_r+0x1e>
 80088f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80088f8:	f000 b94a 	b.w	8008b90 <__swbuf_r>
 80088fc:	6813      	ldr	r3, [r2, #0]
 80088fe:	1c58      	adds	r0, r3, #1
 8008900:	6010      	str	r0, [r2, #0]
 8008902:	7019      	strb	r1, [r3, #0]
 8008904:	4608      	mov	r0, r1
 8008906:	f85d 4b04 	ldr.w	r4, [sp], #4
 800890a:	4770      	bx	lr

0800890c <__sfputs_r>:
 800890c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800890e:	4606      	mov	r6, r0
 8008910:	460f      	mov	r7, r1
 8008912:	4614      	mov	r4, r2
 8008914:	18d5      	adds	r5, r2, r3
 8008916:	42ac      	cmp	r4, r5
 8008918:	d101      	bne.n	800891e <__sfputs_r+0x12>
 800891a:	2000      	movs	r0, #0
 800891c:	e007      	b.n	800892e <__sfputs_r+0x22>
 800891e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008922:	463a      	mov	r2, r7
 8008924:	4630      	mov	r0, r6
 8008926:	f7ff ffda 	bl	80088de <__sfputc_r>
 800892a:	1c43      	adds	r3, r0, #1
 800892c:	d1f3      	bne.n	8008916 <__sfputs_r+0xa>
 800892e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008930 <_vfiprintf_r>:
 8008930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008934:	460d      	mov	r5, r1
 8008936:	b09d      	sub	sp, #116	; 0x74
 8008938:	4614      	mov	r4, r2
 800893a:	4698      	mov	r8, r3
 800893c:	4606      	mov	r6, r0
 800893e:	b118      	cbz	r0, 8008948 <_vfiprintf_r+0x18>
 8008940:	6983      	ldr	r3, [r0, #24]
 8008942:	b90b      	cbnz	r3, 8008948 <_vfiprintf_r+0x18>
 8008944:	f000 fb14 	bl	8008f70 <__sinit>
 8008948:	4b89      	ldr	r3, [pc, #548]	; (8008b70 <_vfiprintf_r+0x240>)
 800894a:	429d      	cmp	r5, r3
 800894c:	d11b      	bne.n	8008986 <_vfiprintf_r+0x56>
 800894e:	6875      	ldr	r5, [r6, #4]
 8008950:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008952:	07d9      	lsls	r1, r3, #31
 8008954:	d405      	bmi.n	8008962 <_vfiprintf_r+0x32>
 8008956:	89ab      	ldrh	r3, [r5, #12]
 8008958:	059a      	lsls	r2, r3, #22
 800895a:	d402      	bmi.n	8008962 <_vfiprintf_r+0x32>
 800895c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800895e:	f000 fba5 	bl	80090ac <__retarget_lock_acquire_recursive>
 8008962:	89ab      	ldrh	r3, [r5, #12]
 8008964:	071b      	lsls	r3, r3, #28
 8008966:	d501      	bpl.n	800896c <_vfiprintf_r+0x3c>
 8008968:	692b      	ldr	r3, [r5, #16]
 800896a:	b9eb      	cbnz	r3, 80089a8 <_vfiprintf_r+0x78>
 800896c:	4629      	mov	r1, r5
 800896e:	4630      	mov	r0, r6
 8008970:	f000 f96e 	bl	8008c50 <__swsetup_r>
 8008974:	b1c0      	cbz	r0, 80089a8 <_vfiprintf_r+0x78>
 8008976:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008978:	07dc      	lsls	r4, r3, #31
 800897a:	d50e      	bpl.n	800899a <_vfiprintf_r+0x6a>
 800897c:	f04f 30ff 	mov.w	r0, #4294967295
 8008980:	b01d      	add	sp, #116	; 0x74
 8008982:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008986:	4b7b      	ldr	r3, [pc, #492]	; (8008b74 <_vfiprintf_r+0x244>)
 8008988:	429d      	cmp	r5, r3
 800898a:	d101      	bne.n	8008990 <_vfiprintf_r+0x60>
 800898c:	68b5      	ldr	r5, [r6, #8]
 800898e:	e7df      	b.n	8008950 <_vfiprintf_r+0x20>
 8008990:	4b79      	ldr	r3, [pc, #484]	; (8008b78 <_vfiprintf_r+0x248>)
 8008992:	429d      	cmp	r5, r3
 8008994:	bf08      	it	eq
 8008996:	68f5      	ldreq	r5, [r6, #12]
 8008998:	e7da      	b.n	8008950 <_vfiprintf_r+0x20>
 800899a:	89ab      	ldrh	r3, [r5, #12]
 800899c:	0598      	lsls	r0, r3, #22
 800899e:	d4ed      	bmi.n	800897c <_vfiprintf_r+0x4c>
 80089a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80089a2:	f000 fb84 	bl	80090ae <__retarget_lock_release_recursive>
 80089a6:	e7e9      	b.n	800897c <_vfiprintf_r+0x4c>
 80089a8:	2300      	movs	r3, #0
 80089aa:	9309      	str	r3, [sp, #36]	; 0x24
 80089ac:	2320      	movs	r3, #32
 80089ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80089b2:	f8cd 800c 	str.w	r8, [sp, #12]
 80089b6:	2330      	movs	r3, #48	; 0x30
 80089b8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008b7c <_vfiprintf_r+0x24c>
 80089bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80089c0:	f04f 0901 	mov.w	r9, #1
 80089c4:	4623      	mov	r3, r4
 80089c6:	469a      	mov	sl, r3
 80089c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80089cc:	b10a      	cbz	r2, 80089d2 <_vfiprintf_r+0xa2>
 80089ce:	2a25      	cmp	r2, #37	; 0x25
 80089d0:	d1f9      	bne.n	80089c6 <_vfiprintf_r+0x96>
 80089d2:	ebba 0b04 	subs.w	fp, sl, r4
 80089d6:	d00b      	beq.n	80089f0 <_vfiprintf_r+0xc0>
 80089d8:	465b      	mov	r3, fp
 80089da:	4622      	mov	r2, r4
 80089dc:	4629      	mov	r1, r5
 80089de:	4630      	mov	r0, r6
 80089e0:	f7ff ff94 	bl	800890c <__sfputs_r>
 80089e4:	3001      	adds	r0, #1
 80089e6:	f000 80aa 	beq.w	8008b3e <_vfiprintf_r+0x20e>
 80089ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80089ec:	445a      	add	r2, fp
 80089ee:	9209      	str	r2, [sp, #36]	; 0x24
 80089f0:	f89a 3000 	ldrb.w	r3, [sl]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	f000 80a2 	beq.w	8008b3e <_vfiprintf_r+0x20e>
 80089fa:	2300      	movs	r3, #0
 80089fc:	f04f 32ff 	mov.w	r2, #4294967295
 8008a00:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008a04:	f10a 0a01 	add.w	sl, sl, #1
 8008a08:	9304      	str	r3, [sp, #16]
 8008a0a:	9307      	str	r3, [sp, #28]
 8008a0c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008a10:	931a      	str	r3, [sp, #104]	; 0x68
 8008a12:	4654      	mov	r4, sl
 8008a14:	2205      	movs	r2, #5
 8008a16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a1a:	4858      	ldr	r0, [pc, #352]	; (8008b7c <_vfiprintf_r+0x24c>)
 8008a1c:	f7f7 fc00 	bl	8000220 <memchr>
 8008a20:	9a04      	ldr	r2, [sp, #16]
 8008a22:	b9d8      	cbnz	r0, 8008a5c <_vfiprintf_r+0x12c>
 8008a24:	06d1      	lsls	r1, r2, #27
 8008a26:	bf44      	itt	mi
 8008a28:	2320      	movmi	r3, #32
 8008a2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008a2e:	0713      	lsls	r3, r2, #28
 8008a30:	bf44      	itt	mi
 8008a32:	232b      	movmi	r3, #43	; 0x2b
 8008a34:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008a38:	f89a 3000 	ldrb.w	r3, [sl]
 8008a3c:	2b2a      	cmp	r3, #42	; 0x2a
 8008a3e:	d015      	beq.n	8008a6c <_vfiprintf_r+0x13c>
 8008a40:	9a07      	ldr	r2, [sp, #28]
 8008a42:	4654      	mov	r4, sl
 8008a44:	2000      	movs	r0, #0
 8008a46:	f04f 0c0a 	mov.w	ip, #10
 8008a4a:	4621      	mov	r1, r4
 8008a4c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008a50:	3b30      	subs	r3, #48	; 0x30
 8008a52:	2b09      	cmp	r3, #9
 8008a54:	d94e      	bls.n	8008af4 <_vfiprintf_r+0x1c4>
 8008a56:	b1b0      	cbz	r0, 8008a86 <_vfiprintf_r+0x156>
 8008a58:	9207      	str	r2, [sp, #28]
 8008a5a:	e014      	b.n	8008a86 <_vfiprintf_r+0x156>
 8008a5c:	eba0 0308 	sub.w	r3, r0, r8
 8008a60:	fa09 f303 	lsl.w	r3, r9, r3
 8008a64:	4313      	orrs	r3, r2
 8008a66:	9304      	str	r3, [sp, #16]
 8008a68:	46a2      	mov	sl, r4
 8008a6a:	e7d2      	b.n	8008a12 <_vfiprintf_r+0xe2>
 8008a6c:	9b03      	ldr	r3, [sp, #12]
 8008a6e:	1d19      	adds	r1, r3, #4
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	9103      	str	r1, [sp, #12]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	bfbb      	ittet	lt
 8008a78:	425b      	neglt	r3, r3
 8008a7a:	f042 0202 	orrlt.w	r2, r2, #2
 8008a7e:	9307      	strge	r3, [sp, #28]
 8008a80:	9307      	strlt	r3, [sp, #28]
 8008a82:	bfb8      	it	lt
 8008a84:	9204      	strlt	r2, [sp, #16]
 8008a86:	7823      	ldrb	r3, [r4, #0]
 8008a88:	2b2e      	cmp	r3, #46	; 0x2e
 8008a8a:	d10c      	bne.n	8008aa6 <_vfiprintf_r+0x176>
 8008a8c:	7863      	ldrb	r3, [r4, #1]
 8008a8e:	2b2a      	cmp	r3, #42	; 0x2a
 8008a90:	d135      	bne.n	8008afe <_vfiprintf_r+0x1ce>
 8008a92:	9b03      	ldr	r3, [sp, #12]
 8008a94:	1d1a      	adds	r2, r3, #4
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	9203      	str	r2, [sp, #12]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	bfb8      	it	lt
 8008a9e:	f04f 33ff 	movlt.w	r3, #4294967295
 8008aa2:	3402      	adds	r4, #2
 8008aa4:	9305      	str	r3, [sp, #20]
 8008aa6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008b8c <_vfiprintf_r+0x25c>
 8008aaa:	7821      	ldrb	r1, [r4, #0]
 8008aac:	2203      	movs	r2, #3
 8008aae:	4650      	mov	r0, sl
 8008ab0:	f7f7 fbb6 	bl	8000220 <memchr>
 8008ab4:	b140      	cbz	r0, 8008ac8 <_vfiprintf_r+0x198>
 8008ab6:	2340      	movs	r3, #64	; 0x40
 8008ab8:	eba0 000a 	sub.w	r0, r0, sl
 8008abc:	fa03 f000 	lsl.w	r0, r3, r0
 8008ac0:	9b04      	ldr	r3, [sp, #16]
 8008ac2:	4303      	orrs	r3, r0
 8008ac4:	3401      	adds	r4, #1
 8008ac6:	9304      	str	r3, [sp, #16]
 8008ac8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008acc:	482c      	ldr	r0, [pc, #176]	; (8008b80 <_vfiprintf_r+0x250>)
 8008ace:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008ad2:	2206      	movs	r2, #6
 8008ad4:	f7f7 fba4 	bl	8000220 <memchr>
 8008ad8:	2800      	cmp	r0, #0
 8008ada:	d03f      	beq.n	8008b5c <_vfiprintf_r+0x22c>
 8008adc:	4b29      	ldr	r3, [pc, #164]	; (8008b84 <_vfiprintf_r+0x254>)
 8008ade:	bb1b      	cbnz	r3, 8008b28 <_vfiprintf_r+0x1f8>
 8008ae0:	9b03      	ldr	r3, [sp, #12]
 8008ae2:	3307      	adds	r3, #7
 8008ae4:	f023 0307 	bic.w	r3, r3, #7
 8008ae8:	3308      	adds	r3, #8
 8008aea:	9303      	str	r3, [sp, #12]
 8008aec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008aee:	443b      	add	r3, r7
 8008af0:	9309      	str	r3, [sp, #36]	; 0x24
 8008af2:	e767      	b.n	80089c4 <_vfiprintf_r+0x94>
 8008af4:	fb0c 3202 	mla	r2, ip, r2, r3
 8008af8:	460c      	mov	r4, r1
 8008afa:	2001      	movs	r0, #1
 8008afc:	e7a5      	b.n	8008a4a <_vfiprintf_r+0x11a>
 8008afe:	2300      	movs	r3, #0
 8008b00:	3401      	adds	r4, #1
 8008b02:	9305      	str	r3, [sp, #20]
 8008b04:	4619      	mov	r1, r3
 8008b06:	f04f 0c0a 	mov.w	ip, #10
 8008b0a:	4620      	mov	r0, r4
 8008b0c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008b10:	3a30      	subs	r2, #48	; 0x30
 8008b12:	2a09      	cmp	r2, #9
 8008b14:	d903      	bls.n	8008b1e <_vfiprintf_r+0x1ee>
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d0c5      	beq.n	8008aa6 <_vfiprintf_r+0x176>
 8008b1a:	9105      	str	r1, [sp, #20]
 8008b1c:	e7c3      	b.n	8008aa6 <_vfiprintf_r+0x176>
 8008b1e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008b22:	4604      	mov	r4, r0
 8008b24:	2301      	movs	r3, #1
 8008b26:	e7f0      	b.n	8008b0a <_vfiprintf_r+0x1da>
 8008b28:	ab03      	add	r3, sp, #12
 8008b2a:	9300      	str	r3, [sp, #0]
 8008b2c:	462a      	mov	r2, r5
 8008b2e:	4b16      	ldr	r3, [pc, #88]	; (8008b88 <_vfiprintf_r+0x258>)
 8008b30:	a904      	add	r1, sp, #16
 8008b32:	4630      	mov	r0, r6
 8008b34:	f7fd fde4 	bl	8006700 <_printf_float>
 8008b38:	4607      	mov	r7, r0
 8008b3a:	1c78      	adds	r0, r7, #1
 8008b3c:	d1d6      	bne.n	8008aec <_vfiprintf_r+0x1bc>
 8008b3e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008b40:	07d9      	lsls	r1, r3, #31
 8008b42:	d405      	bmi.n	8008b50 <_vfiprintf_r+0x220>
 8008b44:	89ab      	ldrh	r3, [r5, #12]
 8008b46:	059a      	lsls	r2, r3, #22
 8008b48:	d402      	bmi.n	8008b50 <_vfiprintf_r+0x220>
 8008b4a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008b4c:	f000 faaf 	bl	80090ae <__retarget_lock_release_recursive>
 8008b50:	89ab      	ldrh	r3, [r5, #12]
 8008b52:	065b      	lsls	r3, r3, #25
 8008b54:	f53f af12 	bmi.w	800897c <_vfiprintf_r+0x4c>
 8008b58:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008b5a:	e711      	b.n	8008980 <_vfiprintf_r+0x50>
 8008b5c:	ab03      	add	r3, sp, #12
 8008b5e:	9300      	str	r3, [sp, #0]
 8008b60:	462a      	mov	r2, r5
 8008b62:	4b09      	ldr	r3, [pc, #36]	; (8008b88 <_vfiprintf_r+0x258>)
 8008b64:	a904      	add	r1, sp, #16
 8008b66:	4630      	mov	r0, r6
 8008b68:	f7fe f86e 	bl	8006c48 <_printf_i>
 8008b6c:	e7e4      	b.n	8008b38 <_vfiprintf_r+0x208>
 8008b6e:	bf00      	nop
 8008b70:	08009964 	.word	0x08009964
 8008b74:	08009984 	.word	0x08009984
 8008b78:	08009944 	.word	0x08009944
 8008b7c:	080097ec 	.word	0x080097ec
 8008b80:	080097f6 	.word	0x080097f6
 8008b84:	08006701 	.word	0x08006701
 8008b88:	0800890d 	.word	0x0800890d
 8008b8c:	080097f2 	.word	0x080097f2

08008b90 <__swbuf_r>:
 8008b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b92:	460e      	mov	r6, r1
 8008b94:	4614      	mov	r4, r2
 8008b96:	4605      	mov	r5, r0
 8008b98:	b118      	cbz	r0, 8008ba2 <__swbuf_r+0x12>
 8008b9a:	6983      	ldr	r3, [r0, #24]
 8008b9c:	b90b      	cbnz	r3, 8008ba2 <__swbuf_r+0x12>
 8008b9e:	f000 f9e7 	bl	8008f70 <__sinit>
 8008ba2:	4b21      	ldr	r3, [pc, #132]	; (8008c28 <__swbuf_r+0x98>)
 8008ba4:	429c      	cmp	r4, r3
 8008ba6:	d12b      	bne.n	8008c00 <__swbuf_r+0x70>
 8008ba8:	686c      	ldr	r4, [r5, #4]
 8008baa:	69a3      	ldr	r3, [r4, #24]
 8008bac:	60a3      	str	r3, [r4, #8]
 8008bae:	89a3      	ldrh	r3, [r4, #12]
 8008bb0:	071a      	lsls	r2, r3, #28
 8008bb2:	d52f      	bpl.n	8008c14 <__swbuf_r+0x84>
 8008bb4:	6923      	ldr	r3, [r4, #16]
 8008bb6:	b36b      	cbz	r3, 8008c14 <__swbuf_r+0x84>
 8008bb8:	6923      	ldr	r3, [r4, #16]
 8008bba:	6820      	ldr	r0, [r4, #0]
 8008bbc:	1ac0      	subs	r0, r0, r3
 8008bbe:	6963      	ldr	r3, [r4, #20]
 8008bc0:	b2f6      	uxtb	r6, r6
 8008bc2:	4283      	cmp	r3, r0
 8008bc4:	4637      	mov	r7, r6
 8008bc6:	dc04      	bgt.n	8008bd2 <__swbuf_r+0x42>
 8008bc8:	4621      	mov	r1, r4
 8008bca:	4628      	mov	r0, r5
 8008bcc:	f000 f93c 	bl	8008e48 <_fflush_r>
 8008bd0:	bb30      	cbnz	r0, 8008c20 <__swbuf_r+0x90>
 8008bd2:	68a3      	ldr	r3, [r4, #8]
 8008bd4:	3b01      	subs	r3, #1
 8008bd6:	60a3      	str	r3, [r4, #8]
 8008bd8:	6823      	ldr	r3, [r4, #0]
 8008bda:	1c5a      	adds	r2, r3, #1
 8008bdc:	6022      	str	r2, [r4, #0]
 8008bde:	701e      	strb	r6, [r3, #0]
 8008be0:	6963      	ldr	r3, [r4, #20]
 8008be2:	3001      	adds	r0, #1
 8008be4:	4283      	cmp	r3, r0
 8008be6:	d004      	beq.n	8008bf2 <__swbuf_r+0x62>
 8008be8:	89a3      	ldrh	r3, [r4, #12]
 8008bea:	07db      	lsls	r3, r3, #31
 8008bec:	d506      	bpl.n	8008bfc <__swbuf_r+0x6c>
 8008bee:	2e0a      	cmp	r6, #10
 8008bf0:	d104      	bne.n	8008bfc <__swbuf_r+0x6c>
 8008bf2:	4621      	mov	r1, r4
 8008bf4:	4628      	mov	r0, r5
 8008bf6:	f000 f927 	bl	8008e48 <_fflush_r>
 8008bfa:	b988      	cbnz	r0, 8008c20 <__swbuf_r+0x90>
 8008bfc:	4638      	mov	r0, r7
 8008bfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c00:	4b0a      	ldr	r3, [pc, #40]	; (8008c2c <__swbuf_r+0x9c>)
 8008c02:	429c      	cmp	r4, r3
 8008c04:	d101      	bne.n	8008c0a <__swbuf_r+0x7a>
 8008c06:	68ac      	ldr	r4, [r5, #8]
 8008c08:	e7cf      	b.n	8008baa <__swbuf_r+0x1a>
 8008c0a:	4b09      	ldr	r3, [pc, #36]	; (8008c30 <__swbuf_r+0xa0>)
 8008c0c:	429c      	cmp	r4, r3
 8008c0e:	bf08      	it	eq
 8008c10:	68ec      	ldreq	r4, [r5, #12]
 8008c12:	e7ca      	b.n	8008baa <__swbuf_r+0x1a>
 8008c14:	4621      	mov	r1, r4
 8008c16:	4628      	mov	r0, r5
 8008c18:	f000 f81a 	bl	8008c50 <__swsetup_r>
 8008c1c:	2800      	cmp	r0, #0
 8008c1e:	d0cb      	beq.n	8008bb8 <__swbuf_r+0x28>
 8008c20:	f04f 37ff 	mov.w	r7, #4294967295
 8008c24:	e7ea      	b.n	8008bfc <__swbuf_r+0x6c>
 8008c26:	bf00      	nop
 8008c28:	08009964 	.word	0x08009964
 8008c2c:	08009984 	.word	0x08009984
 8008c30:	08009944 	.word	0x08009944

08008c34 <__ascii_wctomb>:
 8008c34:	b149      	cbz	r1, 8008c4a <__ascii_wctomb+0x16>
 8008c36:	2aff      	cmp	r2, #255	; 0xff
 8008c38:	bf85      	ittet	hi
 8008c3a:	238a      	movhi	r3, #138	; 0x8a
 8008c3c:	6003      	strhi	r3, [r0, #0]
 8008c3e:	700a      	strbls	r2, [r1, #0]
 8008c40:	f04f 30ff 	movhi.w	r0, #4294967295
 8008c44:	bf98      	it	ls
 8008c46:	2001      	movls	r0, #1
 8008c48:	4770      	bx	lr
 8008c4a:	4608      	mov	r0, r1
 8008c4c:	4770      	bx	lr
	...

08008c50 <__swsetup_r>:
 8008c50:	4b32      	ldr	r3, [pc, #200]	; (8008d1c <__swsetup_r+0xcc>)
 8008c52:	b570      	push	{r4, r5, r6, lr}
 8008c54:	681d      	ldr	r5, [r3, #0]
 8008c56:	4606      	mov	r6, r0
 8008c58:	460c      	mov	r4, r1
 8008c5a:	b125      	cbz	r5, 8008c66 <__swsetup_r+0x16>
 8008c5c:	69ab      	ldr	r3, [r5, #24]
 8008c5e:	b913      	cbnz	r3, 8008c66 <__swsetup_r+0x16>
 8008c60:	4628      	mov	r0, r5
 8008c62:	f000 f985 	bl	8008f70 <__sinit>
 8008c66:	4b2e      	ldr	r3, [pc, #184]	; (8008d20 <__swsetup_r+0xd0>)
 8008c68:	429c      	cmp	r4, r3
 8008c6a:	d10f      	bne.n	8008c8c <__swsetup_r+0x3c>
 8008c6c:	686c      	ldr	r4, [r5, #4]
 8008c6e:	89a3      	ldrh	r3, [r4, #12]
 8008c70:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008c74:	0719      	lsls	r1, r3, #28
 8008c76:	d42c      	bmi.n	8008cd2 <__swsetup_r+0x82>
 8008c78:	06dd      	lsls	r5, r3, #27
 8008c7a:	d411      	bmi.n	8008ca0 <__swsetup_r+0x50>
 8008c7c:	2309      	movs	r3, #9
 8008c7e:	6033      	str	r3, [r6, #0]
 8008c80:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008c84:	81a3      	strh	r3, [r4, #12]
 8008c86:	f04f 30ff 	mov.w	r0, #4294967295
 8008c8a:	e03e      	b.n	8008d0a <__swsetup_r+0xba>
 8008c8c:	4b25      	ldr	r3, [pc, #148]	; (8008d24 <__swsetup_r+0xd4>)
 8008c8e:	429c      	cmp	r4, r3
 8008c90:	d101      	bne.n	8008c96 <__swsetup_r+0x46>
 8008c92:	68ac      	ldr	r4, [r5, #8]
 8008c94:	e7eb      	b.n	8008c6e <__swsetup_r+0x1e>
 8008c96:	4b24      	ldr	r3, [pc, #144]	; (8008d28 <__swsetup_r+0xd8>)
 8008c98:	429c      	cmp	r4, r3
 8008c9a:	bf08      	it	eq
 8008c9c:	68ec      	ldreq	r4, [r5, #12]
 8008c9e:	e7e6      	b.n	8008c6e <__swsetup_r+0x1e>
 8008ca0:	0758      	lsls	r0, r3, #29
 8008ca2:	d512      	bpl.n	8008cca <__swsetup_r+0x7a>
 8008ca4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008ca6:	b141      	cbz	r1, 8008cba <__swsetup_r+0x6a>
 8008ca8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008cac:	4299      	cmp	r1, r3
 8008cae:	d002      	beq.n	8008cb6 <__swsetup_r+0x66>
 8008cb0:	4630      	mov	r0, r6
 8008cb2:	f7ff fb31 	bl	8008318 <_free_r>
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	6363      	str	r3, [r4, #52]	; 0x34
 8008cba:	89a3      	ldrh	r3, [r4, #12]
 8008cbc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008cc0:	81a3      	strh	r3, [r4, #12]
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	6063      	str	r3, [r4, #4]
 8008cc6:	6923      	ldr	r3, [r4, #16]
 8008cc8:	6023      	str	r3, [r4, #0]
 8008cca:	89a3      	ldrh	r3, [r4, #12]
 8008ccc:	f043 0308 	orr.w	r3, r3, #8
 8008cd0:	81a3      	strh	r3, [r4, #12]
 8008cd2:	6923      	ldr	r3, [r4, #16]
 8008cd4:	b94b      	cbnz	r3, 8008cea <__swsetup_r+0x9a>
 8008cd6:	89a3      	ldrh	r3, [r4, #12]
 8008cd8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008cdc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ce0:	d003      	beq.n	8008cea <__swsetup_r+0x9a>
 8008ce2:	4621      	mov	r1, r4
 8008ce4:	4630      	mov	r0, r6
 8008ce6:	f000 fa09 	bl	80090fc <__smakebuf_r>
 8008cea:	89a0      	ldrh	r0, [r4, #12]
 8008cec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008cf0:	f010 0301 	ands.w	r3, r0, #1
 8008cf4:	d00a      	beq.n	8008d0c <__swsetup_r+0xbc>
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	60a3      	str	r3, [r4, #8]
 8008cfa:	6963      	ldr	r3, [r4, #20]
 8008cfc:	425b      	negs	r3, r3
 8008cfe:	61a3      	str	r3, [r4, #24]
 8008d00:	6923      	ldr	r3, [r4, #16]
 8008d02:	b943      	cbnz	r3, 8008d16 <__swsetup_r+0xc6>
 8008d04:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008d08:	d1ba      	bne.n	8008c80 <__swsetup_r+0x30>
 8008d0a:	bd70      	pop	{r4, r5, r6, pc}
 8008d0c:	0781      	lsls	r1, r0, #30
 8008d0e:	bf58      	it	pl
 8008d10:	6963      	ldrpl	r3, [r4, #20]
 8008d12:	60a3      	str	r3, [r4, #8]
 8008d14:	e7f4      	b.n	8008d00 <__swsetup_r+0xb0>
 8008d16:	2000      	movs	r0, #0
 8008d18:	e7f7      	b.n	8008d0a <__swsetup_r+0xba>
 8008d1a:	bf00      	nop
 8008d1c:	2000000c 	.word	0x2000000c
 8008d20:	08009964 	.word	0x08009964
 8008d24:	08009984 	.word	0x08009984
 8008d28:	08009944 	.word	0x08009944

08008d2c <abort>:
 8008d2c:	b508      	push	{r3, lr}
 8008d2e:	2006      	movs	r0, #6
 8008d30:	f000 fa54 	bl	80091dc <raise>
 8008d34:	2001      	movs	r0, #1
 8008d36:	f7f8 fd31 	bl	800179c <_exit>
	...

08008d3c <__sflush_r>:
 8008d3c:	898a      	ldrh	r2, [r1, #12]
 8008d3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d42:	4605      	mov	r5, r0
 8008d44:	0710      	lsls	r0, r2, #28
 8008d46:	460c      	mov	r4, r1
 8008d48:	d458      	bmi.n	8008dfc <__sflush_r+0xc0>
 8008d4a:	684b      	ldr	r3, [r1, #4]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	dc05      	bgt.n	8008d5c <__sflush_r+0x20>
 8008d50:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	dc02      	bgt.n	8008d5c <__sflush_r+0x20>
 8008d56:	2000      	movs	r0, #0
 8008d58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d5c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008d5e:	2e00      	cmp	r6, #0
 8008d60:	d0f9      	beq.n	8008d56 <__sflush_r+0x1a>
 8008d62:	2300      	movs	r3, #0
 8008d64:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008d68:	682f      	ldr	r7, [r5, #0]
 8008d6a:	602b      	str	r3, [r5, #0]
 8008d6c:	d032      	beq.n	8008dd4 <__sflush_r+0x98>
 8008d6e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008d70:	89a3      	ldrh	r3, [r4, #12]
 8008d72:	075a      	lsls	r2, r3, #29
 8008d74:	d505      	bpl.n	8008d82 <__sflush_r+0x46>
 8008d76:	6863      	ldr	r3, [r4, #4]
 8008d78:	1ac0      	subs	r0, r0, r3
 8008d7a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008d7c:	b10b      	cbz	r3, 8008d82 <__sflush_r+0x46>
 8008d7e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008d80:	1ac0      	subs	r0, r0, r3
 8008d82:	2300      	movs	r3, #0
 8008d84:	4602      	mov	r2, r0
 8008d86:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008d88:	6a21      	ldr	r1, [r4, #32]
 8008d8a:	4628      	mov	r0, r5
 8008d8c:	47b0      	blx	r6
 8008d8e:	1c43      	adds	r3, r0, #1
 8008d90:	89a3      	ldrh	r3, [r4, #12]
 8008d92:	d106      	bne.n	8008da2 <__sflush_r+0x66>
 8008d94:	6829      	ldr	r1, [r5, #0]
 8008d96:	291d      	cmp	r1, #29
 8008d98:	d82c      	bhi.n	8008df4 <__sflush_r+0xb8>
 8008d9a:	4a2a      	ldr	r2, [pc, #168]	; (8008e44 <__sflush_r+0x108>)
 8008d9c:	40ca      	lsrs	r2, r1
 8008d9e:	07d6      	lsls	r6, r2, #31
 8008da0:	d528      	bpl.n	8008df4 <__sflush_r+0xb8>
 8008da2:	2200      	movs	r2, #0
 8008da4:	6062      	str	r2, [r4, #4]
 8008da6:	04d9      	lsls	r1, r3, #19
 8008da8:	6922      	ldr	r2, [r4, #16]
 8008daa:	6022      	str	r2, [r4, #0]
 8008dac:	d504      	bpl.n	8008db8 <__sflush_r+0x7c>
 8008dae:	1c42      	adds	r2, r0, #1
 8008db0:	d101      	bne.n	8008db6 <__sflush_r+0x7a>
 8008db2:	682b      	ldr	r3, [r5, #0]
 8008db4:	b903      	cbnz	r3, 8008db8 <__sflush_r+0x7c>
 8008db6:	6560      	str	r0, [r4, #84]	; 0x54
 8008db8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008dba:	602f      	str	r7, [r5, #0]
 8008dbc:	2900      	cmp	r1, #0
 8008dbe:	d0ca      	beq.n	8008d56 <__sflush_r+0x1a>
 8008dc0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008dc4:	4299      	cmp	r1, r3
 8008dc6:	d002      	beq.n	8008dce <__sflush_r+0x92>
 8008dc8:	4628      	mov	r0, r5
 8008dca:	f7ff faa5 	bl	8008318 <_free_r>
 8008dce:	2000      	movs	r0, #0
 8008dd0:	6360      	str	r0, [r4, #52]	; 0x34
 8008dd2:	e7c1      	b.n	8008d58 <__sflush_r+0x1c>
 8008dd4:	6a21      	ldr	r1, [r4, #32]
 8008dd6:	2301      	movs	r3, #1
 8008dd8:	4628      	mov	r0, r5
 8008dda:	47b0      	blx	r6
 8008ddc:	1c41      	adds	r1, r0, #1
 8008dde:	d1c7      	bne.n	8008d70 <__sflush_r+0x34>
 8008de0:	682b      	ldr	r3, [r5, #0]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d0c4      	beq.n	8008d70 <__sflush_r+0x34>
 8008de6:	2b1d      	cmp	r3, #29
 8008de8:	d001      	beq.n	8008dee <__sflush_r+0xb2>
 8008dea:	2b16      	cmp	r3, #22
 8008dec:	d101      	bne.n	8008df2 <__sflush_r+0xb6>
 8008dee:	602f      	str	r7, [r5, #0]
 8008df0:	e7b1      	b.n	8008d56 <__sflush_r+0x1a>
 8008df2:	89a3      	ldrh	r3, [r4, #12]
 8008df4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008df8:	81a3      	strh	r3, [r4, #12]
 8008dfa:	e7ad      	b.n	8008d58 <__sflush_r+0x1c>
 8008dfc:	690f      	ldr	r7, [r1, #16]
 8008dfe:	2f00      	cmp	r7, #0
 8008e00:	d0a9      	beq.n	8008d56 <__sflush_r+0x1a>
 8008e02:	0793      	lsls	r3, r2, #30
 8008e04:	680e      	ldr	r6, [r1, #0]
 8008e06:	bf08      	it	eq
 8008e08:	694b      	ldreq	r3, [r1, #20]
 8008e0a:	600f      	str	r7, [r1, #0]
 8008e0c:	bf18      	it	ne
 8008e0e:	2300      	movne	r3, #0
 8008e10:	eba6 0807 	sub.w	r8, r6, r7
 8008e14:	608b      	str	r3, [r1, #8]
 8008e16:	f1b8 0f00 	cmp.w	r8, #0
 8008e1a:	dd9c      	ble.n	8008d56 <__sflush_r+0x1a>
 8008e1c:	6a21      	ldr	r1, [r4, #32]
 8008e1e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008e20:	4643      	mov	r3, r8
 8008e22:	463a      	mov	r2, r7
 8008e24:	4628      	mov	r0, r5
 8008e26:	47b0      	blx	r6
 8008e28:	2800      	cmp	r0, #0
 8008e2a:	dc06      	bgt.n	8008e3a <__sflush_r+0xfe>
 8008e2c:	89a3      	ldrh	r3, [r4, #12]
 8008e2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e32:	81a3      	strh	r3, [r4, #12]
 8008e34:	f04f 30ff 	mov.w	r0, #4294967295
 8008e38:	e78e      	b.n	8008d58 <__sflush_r+0x1c>
 8008e3a:	4407      	add	r7, r0
 8008e3c:	eba8 0800 	sub.w	r8, r8, r0
 8008e40:	e7e9      	b.n	8008e16 <__sflush_r+0xda>
 8008e42:	bf00      	nop
 8008e44:	20400001 	.word	0x20400001

08008e48 <_fflush_r>:
 8008e48:	b538      	push	{r3, r4, r5, lr}
 8008e4a:	690b      	ldr	r3, [r1, #16]
 8008e4c:	4605      	mov	r5, r0
 8008e4e:	460c      	mov	r4, r1
 8008e50:	b913      	cbnz	r3, 8008e58 <_fflush_r+0x10>
 8008e52:	2500      	movs	r5, #0
 8008e54:	4628      	mov	r0, r5
 8008e56:	bd38      	pop	{r3, r4, r5, pc}
 8008e58:	b118      	cbz	r0, 8008e62 <_fflush_r+0x1a>
 8008e5a:	6983      	ldr	r3, [r0, #24]
 8008e5c:	b90b      	cbnz	r3, 8008e62 <_fflush_r+0x1a>
 8008e5e:	f000 f887 	bl	8008f70 <__sinit>
 8008e62:	4b14      	ldr	r3, [pc, #80]	; (8008eb4 <_fflush_r+0x6c>)
 8008e64:	429c      	cmp	r4, r3
 8008e66:	d11b      	bne.n	8008ea0 <_fflush_r+0x58>
 8008e68:	686c      	ldr	r4, [r5, #4]
 8008e6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d0ef      	beq.n	8008e52 <_fflush_r+0xa>
 8008e72:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008e74:	07d0      	lsls	r0, r2, #31
 8008e76:	d404      	bmi.n	8008e82 <_fflush_r+0x3a>
 8008e78:	0599      	lsls	r1, r3, #22
 8008e7a:	d402      	bmi.n	8008e82 <_fflush_r+0x3a>
 8008e7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008e7e:	f000 f915 	bl	80090ac <__retarget_lock_acquire_recursive>
 8008e82:	4628      	mov	r0, r5
 8008e84:	4621      	mov	r1, r4
 8008e86:	f7ff ff59 	bl	8008d3c <__sflush_r>
 8008e8a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008e8c:	07da      	lsls	r2, r3, #31
 8008e8e:	4605      	mov	r5, r0
 8008e90:	d4e0      	bmi.n	8008e54 <_fflush_r+0xc>
 8008e92:	89a3      	ldrh	r3, [r4, #12]
 8008e94:	059b      	lsls	r3, r3, #22
 8008e96:	d4dd      	bmi.n	8008e54 <_fflush_r+0xc>
 8008e98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008e9a:	f000 f908 	bl	80090ae <__retarget_lock_release_recursive>
 8008e9e:	e7d9      	b.n	8008e54 <_fflush_r+0xc>
 8008ea0:	4b05      	ldr	r3, [pc, #20]	; (8008eb8 <_fflush_r+0x70>)
 8008ea2:	429c      	cmp	r4, r3
 8008ea4:	d101      	bne.n	8008eaa <_fflush_r+0x62>
 8008ea6:	68ac      	ldr	r4, [r5, #8]
 8008ea8:	e7df      	b.n	8008e6a <_fflush_r+0x22>
 8008eaa:	4b04      	ldr	r3, [pc, #16]	; (8008ebc <_fflush_r+0x74>)
 8008eac:	429c      	cmp	r4, r3
 8008eae:	bf08      	it	eq
 8008eb0:	68ec      	ldreq	r4, [r5, #12]
 8008eb2:	e7da      	b.n	8008e6a <_fflush_r+0x22>
 8008eb4:	08009964 	.word	0x08009964
 8008eb8:	08009984 	.word	0x08009984
 8008ebc:	08009944 	.word	0x08009944

08008ec0 <std>:
 8008ec0:	2300      	movs	r3, #0
 8008ec2:	b510      	push	{r4, lr}
 8008ec4:	4604      	mov	r4, r0
 8008ec6:	e9c0 3300 	strd	r3, r3, [r0]
 8008eca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008ece:	6083      	str	r3, [r0, #8]
 8008ed0:	8181      	strh	r1, [r0, #12]
 8008ed2:	6643      	str	r3, [r0, #100]	; 0x64
 8008ed4:	81c2      	strh	r2, [r0, #14]
 8008ed6:	6183      	str	r3, [r0, #24]
 8008ed8:	4619      	mov	r1, r3
 8008eda:	2208      	movs	r2, #8
 8008edc:	305c      	adds	r0, #92	; 0x5c
 8008ede:	f7fd fb67 	bl	80065b0 <memset>
 8008ee2:	4b05      	ldr	r3, [pc, #20]	; (8008ef8 <std+0x38>)
 8008ee4:	6263      	str	r3, [r4, #36]	; 0x24
 8008ee6:	4b05      	ldr	r3, [pc, #20]	; (8008efc <std+0x3c>)
 8008ee8:	62a3      	str	r3, [r4, #40]	; 0x28
 8008eea:	4b05      	ldr	r3, [pc, #20]	; (8008f00 <std+0x40>)
 8008eec:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008eee:	4b05      	ldr	r3, [pc, #20]	; (8008f04 <std+0x44>)
 8008ef0:	6224      	str	r4, [r4, #32]
 8008ef2:	6323      	str	r3, [r4, #48]	; 0x30
 8008ef4:	bd10      	pop	{r4, pc}
 8008ef6:	bf00      	nop
 8008ef8:	08009215 	.word	0x08009215
 8008efc:	08009237 	.word	0x08009237
 8008f00:	0800926f 	.word	0x0800926f
 8008f04:	08009293 	.word	0x08009293

08008f08 <_cleanup_r>:
 8008f08:	4901      	ldr	r1, [pc, #4]	; (8008f10 <_cleanup_r+0x8>)
 8008f0a:	f000 b8af 	b.w	800906c <_fwalk_reent>
 8008f0e:	bf00      	nop
 8008f10:	08008e49 	.word	0x08008e49

08008f14 <__sfmoreglue>:
 8008f14:	b570      	push	{r4, r5, r6, lr}
 8008f16:	2268      	movs	r2, #104	; 0x68
 8008f18:	1e4d      	subs	r5, r1, #1
 8008f1a:	4355      	muls	r5, r2
 8008f1c:	460e      	mov	r6, r1
 8008f1e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008f22:	f7ff fa65 	bl	80083f0 <_malloc_r>
 8008f26:	4604      	mov	r4, r0
 8008f28:	b140      	cbz	r0, 8008f3c <__sfmoreglue+0x28>
 8008f2a:	2100      	movs	r1, #0
 8008f2c:	e9c0 1600 	strd	r1, r6, [r0]
 8008f30:	300c      	adds	r0, #12
 8008f32:	60a0      	str	r0, [r4, #8]
 8008f34:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008f38:	f7fd fb3a 	bl	80065b0 <memset>
 8008f3c:	4620      	mov	r0, r4
 8008f3e:	bd70      	pop	{r4, r5, r6, pc}

08008f40 <__sfp_lock_acquire>:
 8008f40:	4801      	ldr	r0, [pc, #4]	; (8008f48 <__sfp_lock_acquire+0x8>)
 8008f42:	f000 b8b3 	b.w	80090ac <__retarget_lock_acquire_recursive>
 8008f46:	bf00      	nop
 8008f48:	20000379 	.word	0x20000379

08008f4c <__sfp_lock_release>:
 8008f4c:	4801      	ldr	r0, [pc, #4]	; (8008f54 <__sfp_lock_release+0x8>)
 8008f4e:	f000 b8ae 	b.w	80090ae <__retarget_lock_release_recursive>
 8008f52:	bf00      	nop
 8008f54:	20000379 	.word	0x20000379

08008f58 <__sinit_lock_acquire>:
 8008f58:	4801      	ldr	r0, [pc, #4]	; (8008f60 <__sinit_lock_acquire+0x8>)
 8008f5a:	f000 b8a7 	b.w	80090ac <__retarget_lock_acquire_recursive>
 8008f5e:	bf00      	nop
 8008f60:	2000037a 	.word	0x2000037a

08008f64 <__sinit_lock_release>:
 8008f64:	4801      	ldr	r0, [pc, #4]	; (8008f6c <__sinit_lock_release+0x8>)
 8008f66:	f000 b8a2 	b.w	80090ae <__retarget_lock_release_recursive>
 8008f6a:	bf00      	nop
 8008f6c:	2000037a 	.word	0x2000037a

08008f70 <__sinit>:
 8008f70:	b510      	push	{r4, lr}
 8008f72:	4604      	mov	r4, r0
 8008f74:	f7ff fff0 	bl	8008f58 <__sinit_lock_acquire>
 8008f78:	69a3      	ldr	r3, [r4, #24]
 8008f7a:	b11b      	cbz	r3, 8008f84 <__sinit+0x14>
 8008f7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008f80:	f7ff bff0 	b.w	8008f64 <__sinit_lock_release>
 8008f84:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008f88:	6523      	str	r3, [r4, #80]	; 0x50
 8008f8a:	4b13      	ldr	r3, [pc, #76]	; (8008fd8 <__sinit+0x68>)
 8008f8c:	4a13      	ldr	r2, [pc, #76]	; (8008fdc <__sinit+0x6c>)
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	62a2      	str	r2, [r4, #40]	; 0x28
 8008f92:	42a3      	cmp	r3, r4
 8008f94:	bf04      	itt	eq
 8008f96:	2301      	moveq	r3, #1
 8008f98:	61a3      	streq	r3, [r4, #24]
 8008f9a:	4620      	mov	r0, r4
 8008f9c:	f000 f820 	bl	8008fe0 <__sfp>
 8008fa0:	6060      	str	r0, [r4, #4]
 8008fa2:	4620      	mov	r0, r4
 8008fa4:	f000 f81c 	bl	8008fe0 <__sfp>
 8008fa8:	60a0      	str	r0, [r4, #8]
 8008faa:	4620      	mov	r0, r4
 8008fac:	f000 f818 	bl	8008fe0 <__sfp>
 8008fb0:	2200      	movs	r2, #0
 8008fb2:	60e0      	str	r0, [r4, #12]
 8008fb4:	2104      	movs	r1, #4
 8008fb6:	6860      	ldr	r0, [r4, #4]
 8008fb8:	f7ff ff82 	bl	8008ec0 <std>
 8008fbc:	68a0      	ldr	r0, [r4, #8]
 8008fbe:	2201      	movs	r2, #1
 8008fc0:	2109      	movs	r1, #9
 8008fc2:	f7ff ff7d 	bl	8008ec0 <std>
 8008fc6:	68e0      	ldr	r0, [r4, #12]
 8008fc8:	2202      	movs	r2, #2
 8008fca:	2112      	movs	r1, #18
 8008fcc:	f7ff ff78 	bl	8008ec0 <std>
 8008fd0:	2301      	movs	r3, #1
 8008fd2:	61a3      	str	r3, [r4, #24]
 8008fd4:	e7d2      	b.n	8008f7c <__sinit+0xc>
 8008fd6:	bf00      	nop
 8008fd8:	080095cc 	.word	0x080095cc
 8008fdc:	08008f09 	.word	0x08008f09

08008fe0 <__sfp>:
 8008fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fe2:	4607      	mov	r7, r0
 8008fe4:	f7ff ffac 	bl	8008f40 <__sfp_lock_acquire>
 8008fe8:	4b1e      	ldr	r3, [pc, #120]	; (8009064 <__sfp+0x84>)
 8008fea:	681e      	ldr	r6, [r3, #0]
 8008fec:	69b3      	ldr	r3, [r6, #24]
 8008fee:	b913      	cbnz	r3, 8008ff6 <__sfp+0x16>
 8008ff0:	4630      	mov	r0, r6
 8008ff2:	f7ff ffbd 	bl	8008f70 <__sinit>
 8008ff6:	3648      	adds	r6, #72	; 0x48
 8008ff8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008ffc:	3b01      	subs	r3, #1
 8008ffe:	d503      	bpl.n	8009008 <__sfp+0x28>
 8009000:	6833      	ldr	r3, [r6, #0]
 8009002:	b30b      	cbz	r3, 8009048 <__sfp+0x68>
 8009004:	6836      	ldr	r6, [r6, #0]
 8009006:	e7f7      	b.n	8008ff8 <__sfp+0x18>
 8009008:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800900c:	b9d5      	cbnz	r5, 8009044 <__sfp+0x64>
 800900e:	4b16      	ldr	r3, [pc, #88]	; (8009068 <__sfp+0x88>)
 8009010:	60e3      	str	r3, [r4, #12]
 8009012:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009016:	6665      	str	r5, [r4, #100]	; 0x64
 8009018:	f000 f847 	bl	80090aa <__retarget_lock_init_recursive>
 800901c:	f7ff ff96 	bl	8008f4c <__sfp_lock_release>
 8009020:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009024:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009028:	6025      	str	r5, [r4, #0]
 800902a:	61a5      	str	r5, [r4, #24]
 800902c:	2208      	movs	r2, #8
 800902e:	4629      	mov	r1, r5
 8009030:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009034:	f7fd fabc 	bl	80065b0 <memset>
 8009038:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800903c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009040:	4620      	mov	r0, r4
 8009042:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009044:	3468      	adds	r4, #104	; 0x68
 8009046:	e7d9      	b.n	8008ffc <__sfp+0x1c>
 8009048:	2104      	movs	r1, #4
 800904a:	4638      	mov	r0, r7
 800904c:	f7ff ff62 	bl	8008f14 <__sfmoreglue>
 8009050:	4604      	mov	r4, r0
 8009052:	6030      	str	r0, [r6, #0]
 8009054:	2800      	cmp	r0, #0
 8009056:	d1d5      	bne.n	8009004 <__sfp+0x24>
 8009058:	f7ff ff78 	bl	8008f4c <__sfp_lock_release>
 800905c:	230c      	movs	r3, #12
 800905e:	603b      	str	r3, [r7, #0]
 8009060:	e7ee      	b.n	8009040 <__sfp+0x60>
 8009062:	bf00      	nop
 8009064:	080095cc 	.word	0x080095cc
 8009068:	ffff0001 	.word	0xffff0001

0800906c <_fwalk_reent>:
 800906c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009070:	4606      	mov	r6, r0
 8009072:	4688      	mov	r8, r1
 8009074:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009078:	2700      	movs	r7, #0
 800907a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800907e:	f1b9 0901 	subs.w	r9, r9, #1
 8009082:	d505      	bpl.n	8009090 <_fwalk_reent+0x24>
 8009084:	6824      	ldr	r4, [r4, #0]
 8009086:	2c00      	cmp	r4, #0
 8009088:	d1f7      	bne.n	800907a <_fwalk_reent+0xe>
 800908a:	4638      	mov	r0, r7
 800908c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009090:	89ab      	ldrh	r3, [r5, #12]
 8009092:	2b01      	cmp	r3, #1
 8009094:	d907      	bls.n	80090a6 <_fwalk_reent+0x3a>
 8009096:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800909a:	3301      	adds	r3, #1
 800909c:	d003      	beq.n	80090a6 <_fwalk_reent+0x3a>
 800909e:	4629      	mov	r1, r5
 80090a0:	4630      	mov	r0, r6
 80090a2:	47c0      	blx	r8
 80090a4:	4307      	orrs	r7, r0
 80090a6:	3568      	adds	r5, #104	; 0x68
 80090a8:	e7e9      	b.n	800907e <_fwalk_reent+0x12>

080090aa <__retarget_lock_init_recursive>:
 80090aa:	4770      	bx	lr

080090ac <__retarget_lock_acquire_recursive>:
 80090ac:	4770      	bx	lr

080090ae <__retarget_lock_release_recursive>:
 80090ae:	4770      	bx	lr

080090b0 <__swhatbuf_r>:
 80090b0:	b570      	push	{r4, r5, r6, lr}
 80090b2:	460e      	mov	r6, r1
 80090b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090b8:	2900      	cmp	r1, #0
 80090ba:	b096      	sub	sp, #88	; 0x58
 80090bc:	4614      	mov	r4, r2
 80090be:	461d      	mov	r5, r3
 80090c0:	da08      	bge.n	80090d4 <__swhatbuf_r+0x24>
 80090c2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80090c6:	2200      	movs	r2, #0
 80090c8:	602a      	str	r2, [r5, #0]
 80090ca:	061a      	lsls	r2, r3, #24
 80090cc:	d410      	bmi.n	80090f0 <__swhatbuf_r+0x40>
 80090ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80090d2:	e00e      	b.n	80090f2 <__swhatbuf_r+0x42>
 80090d4:	466a      	mov	r2, sp
 80090d6:	f000 f903 	bl	80092e0 <_fstat_r>
 80090da:	2800      	cmp	r0, #0
 80090dc:	dbf1      	blt.n	80090c2 <__swhatbuf_r+0x12>
 80090de:	9a01      	ldr	r2, [sp, #4]
 80090e0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80090e4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80090e8:	425a      	negs	r2, r3
 80090ea:	415a      	adcs	r2, r3
 80090ec:	602a      	str	r2, [r5, #0]
 80090ee:	e7ee      	b.n	80090ce <__swhatbuf_r+0x1e>
 80090f0:	2340      	movs	r3, #64	; 0x40
 80090f2:	2000      	movs	r0, #0
 80090f4:	6023      	str	r3, [r4, #0]
 80090f6:	b016      	add	sp, #88	; 0x58
 80090f8:	bd70      	pop	{r4, r5, r6, pc}
	...

080090fc <__smakebuf_r>:
 80090fc:	898b      	ldrh	r3, [r1, #12]
 80090fe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009100:	079d      	lsls	r5, r3, #30
 8009102:	4606      	mov	r6, r0
 8009104:	460c      	mov	r4, r1
 8009106:	d507      	bpl.n	8009118 <__smakebuf_r+0x1c>
 8009108:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800910c:	6023      	str	r3, [r4, #0]
 800910e:	6123      	str	r3, [r4, #16]
 8009110:	2301      	movs	r3, #1
 8009112:	6163      	str	r3, [r4, #20]
 8009114:	b002      	add	sp, #8
 8009116:	bd70      	pop	{r4, r5, r6, pc}
 8009118:	ab01      	add	r3, sp, #4
 800911a:	466a      	mov	r2, sp
 800911c:	f7ff ffc8 	bl	80090b0 <__swhatbuf_r>
 8009120:	9900      	ldr	r1, [sp, #0]
 8009122:	4605      	mov	r5, r0
 8009124:	4630      	mov	r0, r6
 8009126:	f7ff f963 	bl	80083f0 <_malloc_r>
 800912a:	b948      	cbnz	r0, 8009140 <__smakebuf_r+0x44>
 800912c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009130:	059a      	lsls	r2, r3, #22
 8009132:	d4ef      	bmi.n	8009114 <__smakebuf_r+0x18>
 8009134:	f023 0303 	bic.w	r3, r3, #3
 8009138:	f043 0302 	orr.w	r3, r3, #2
 800913c:	81a3      	strh	r3, [r4, #12]
 800913e:	e7e3      	b.n	8009108 <__smakebuf_r+0xc>
 8009140:	4b0d      	ldr	r3, [pc, #52]	; (8009178 <__smakebuf_r+0x7c>)
 8009142:	62b3      	str	r3, [r6, #40]	; 0x28
 8009144:	89a3      	ldrh	r3, [r4, #12]
 8009146:	6020      	str	r0, [r4, #0]
 8009148:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800914c:	81a3      	strh	r3, [r4, #12]
 800914e:	9b00      	ldr	r3, [sp, #0]
 8009150:	6163      	str	r3, [r4, #20]
 8009152:	9b01      	ldr	r3, [sp, #4]
 8009154:	6120      	str	r0, [r4, #16]
 8009156:	b15b      	cbz	r3, 8009170 <__smakebuf_r+0x74>
 8009158:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800915c:	4630      	mov	r0, r6
 800915e:	f000 f8d1 	bl	8009304 <_isatty_r>
 8009162:	b128      	cbz	r0, 8009170 <__smakebuf_r+0x74>
 8009164:	89a3      	ldrh	r3, [r4, #12]
 8009166:	f023 0303 	bic.w	r3, r3, #3
 800916a:	f043 0301 	orr.w	r3, r3, #1
 800916e:	81a3      	strh	r3, [r4, #12]
 8009170:	89a0      	ldrh	r0, [r4, #12]
 8009172:	4305      	orrs	r5, r0
 8009174:	81a5      	strh	r5, [r4, #12]
 8009176:	e7cd      	b.n	8009114 <__smakebuf_r+0x18>
 8009178:	08008f09 	.word	0x08008f09

0800917c <_malloc_usable_size_r>:
 800917c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009180:	1f18      	subs	r0, r3, #4
 8009182:	2b00      	cmp	r3, #0
 8009184:	bfbc      	itt	lt
 8009186:	580b      	ldrlt	r3, [r1, r0]
 8009188:	18c0      	addlt	r0, r0, r3
 800918a:	4770      	bx	lr

0800918c <_raise_r>:
 800918c:	291f      	cmp	r1, #31
 800918e:	b538      	push	{r3, r4, r5, lr}
 8009190:	4604      	mov	r4, r0
 8009192:	460d      	mov	r5, r1
 8009194:	d904      	bls.n	80091a0 <_raise_r+0x14>
 8009196:	2316      	movs	r3, #22
 8009198:	6003      	str	r3, [r0, #0]
 800919a:	f04f 30ff 	mov.w	r0, #4294967295
 800919e:	bd38      	pop	{r3, r4, r5, pc}
 80091a0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80091a2:	b112      	cbz	r2, 80091aa <_raise_r+0x1e>
 80091a4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80091a8:	b94b      	cbnz	r3, 80091be <_raise_r+0x32>
 80091aa:	4620      	mov	r0, r4
 80091ac:	f000 f830 	bl	8009210 <_getpid_r>
 80091b0:	462a      	mov	r2, r5
 80091b2:	4601      	mov	r1, r0
 80091b4:	4620      	mov	r0, r4
 80091b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80091ba:	f000 b817 	b.w	80091ec <_kill_r>
 80091be:	2b01      	cmp	r3, #1
 80091c0:	d00a      	beq.n	80091d8 <_raise_r+0x4c>
 80091c2:	1c59      	adds	r1, r3, #1
 80091c4:	d103      	bne.n	80091ce <_raise_r+0x42>
 80091c6:	2316      	movs	r3, #22
 80091c8:	6003      	str	r3, [r0, #0]
 80091ca:	2001      	movs	r0, #1
 80091cc:	e7e7      	b.n	800919e <_raise_r+0x12>
 80091ce:	2400      	movs	r4, #0
 80091d0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80091d4:	4628      	mov	r0, r5
 80091d6:	4798      	blx	r3
 80091d8:	2000      	movs	r0, #0
 80091da:	e7e0      	b.n	800919e <_raise_r+0x12>

080091dc <raise>:
 80091dc:	4b02      	ldr	r3, [pc, #8]	; (80091e8 <raise+0xc>)
 80091de:	4601      	mov	r1, r0
 80091e0:	6818      	ldr	r0, [r3, #0]
 80091e2:	f7ff bfd3 	b.w	800918c <_raise_r>
 80091e6:	bf00      	nop
 80091e8:	2000000c 	.word	0x2000000c

080091ec <_kill_r>:
 80091ec:	b538      	push	{r3, r4, r5, lr}
 80091ee:	4d07      	ldr	r5, [pc, #28]	; (800920c <_kill_r+0x20>)
 80091f0:	2300      	movs	r3, #0
 80091f2:	4604      	mov	r4, r0
 80091f4:	4608      	mov	r0, r1
 80091f6:	4611      	mov	r1, r2
 80091f8:	602b      	str	r3, [r5, #0]
 80091fa:	f7f8 fabf 	bl	800177c <_kill>
 80091fe:	1c43      	adds	r3, r0, #1
 8009200:	d102      	bne.n	8009208 <_kill_r+0x1c>
 8009202:	682b      	ldr	r3, [r5, #0]
 8009204:	b103      	cbz	r3, 8009208 <_kill_r+0x1c>
 8009206:	6023      	str	r3, [r4, #0]
 8009208:	bd38      	pop	{r3, r4, r5, pc}
 800920a:	bf00      	nop
 800920c:	20000374 	.word	0x20000374

08009210 <_getpid_r>:
 8009210:	f7f8 baac 	b.w	800176c <_getpid>

08009214 <__sread>:
 8009214:	b510      	push	{r4, lr}
 8009216:	460c      	mov	r4, r1
 8009218:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800921c:	f000 f894 	bl	8009348 <_read_r>
 8009220:	2800      	cmp	r0, #0
 8009222:	bfab      	itete	ge
 8009224:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009226:	89a3      	ldrhlt	r3, [r4, #12]
 8009228:	181b      	addge	r3, r3, r0
 800922a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800922e:	bfac      	ite	ge
 8009230:	6563      	strge	r3, [r4, #84]	; 0x54
 8009232:	81a3      	strhlt	r3, [r4, #12]
 8009234:	bd10      	pop	{r4, pc}

08009236 <__swrite>:
 8009236:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800923a:	461f      	mov	r7, r3
 800923c:	898b      	ldrh	r3, [r1, #12]
 800923e:	05db      	lsls	r3, r3, #23
 8009240:	4605      	mov	r5, r0
 8009242:	460c      	mov	r4, r1
 8009244:	4616      	mov	r6, r2
 8009246:	d505      	bpl.n	8009254 <__swrite+0x1e>
 8009248:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800924c:	2302      	movs	r3, #2
 800924e:	2200      	movs	r2, #0
 8009250:	f000 f868 	bl	8009324 <_lseek_r>
 8009254:	89a3      	ldrh	r3, [r4, #12]
 8009256:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800925a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800925e:	81a3      	strh	r3, [r4, #12]
 8009260:	4632      	mov	r2, r6
 8009262:	463b      	mov	r3, r7
 8009264:	4628      	mov	r0, r5
 8009266:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800926a:	f000 b817 	b.w	800929c <_write_r>

0800926e <__sseek>:
 800926e:	b510      	push	{r4, lr}
 8009270:	460c      	mov	r4, r1
 8009272:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009276:	f000 f855 	bl	8009324 <_lseek_r>
 800927a:	1c43      	adds	r3, r0, #1
 800927c:	89a3      	ldrh	r3, [r4, #12]
 800927e:	bf15      	itete	ne
 8009280:	6560      	strne	r0, [r4, #84]	; 0x54
 8009282:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009286:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800928a:	81a3      	strheq	r3, [r4, #12]
 800928c:	bf18      	it	ne
 800928e:	81a3      	strhne	r3, [r4, #12]
 8009290:	bd10      	pop	{r4, pc}

08009292 <__sclose>:
 8009292:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009296:	f000 b813 	b.w	80092c0 <_close_r>
	...

0800929c <_write_r>:
 800929c:	b538      	push	{r3, r4, r5, lr}
 800929e:	4d07      	ldr	r5, [pc, #28]	; (80092bc <_write_r+0x20>)
 80092a0:	4604      	mov	r4, r0
 80092a2:	4608      	mov	r0, r1
 80092a4:	4611      	mov	r1, r2
 80092a6:	2200      	movs	r2, #0
 80092a8:	602a      	str	r2, [r5, #0]
 80092aa:	461a      	mov	r2, r3
 80092ac:	f7f8 fa9d 	bl	80017ea <_write>
 80092b0:	1c43      	adds	r3, r0, #1
 80092b2:	d102      	bne.n	80092ba <_write_r+0x1e>
 80092b4:	682b      	ldr	r3, [r5, #0]
 80092b6:	b103      	cbz	r3, 80092ba <_write_r+0x1e>
 80092b8:	6023      	str	r3, [r4, #0]
 80092ba:	bd38      	pop	{r3, r4, r5, pc}
 80092bc:	20000374 	.word	0x20000374

080092c0 <_close_r>:
 80092c0:	b538      	push	{r3, r4, r5, lr}
 80092c2:	4d06      	ldr	r5, [pc, #24]	; (80092dc <_close_r+0x1c>)
 80092c4:	2300      	movs	r3, #0
 80092c6:	4604      	mov	r4, r0
 80092c8:	4608      	mov	r0, r1
 80092ca:	602b      	str	r3, [r5, #0]
 80092cc:	f7f8 faa9 	bl	8001822 <_close>
 80092d0:	1c43      	adds	r3, r0, #1
 80092d2:	d102      	bne.n	80092da <_close_r+0x1a>
 80092d4:	682b      	ldr	r3, [r5, #0]
 80092d6:	b103      	cbz	r3, 80092da <_close_r+0x1a>
 80092d8:	6023      	str	r3, [r4, #0]
 80092da:	bd38      	pop	{r3, r4, r5, pc}
 80092dc:	20000374 	.word	0x20000374

080092e0 <_fstat_r>:
 80092e0:	b538      	push	{r3, r4, r5, lr}
 80092e2:	4d07      	ldr	r5, [pc, #28]	; (8009300 <_fstat_r+0x20>)
 80092e4:	2300      	movs	r3, #0
 80092e6:	4604      	mov	r4, r0
 80092e8:	4608      	mov	r0, r1
 80092ea:	4611      	mov	r1, r2
 80092ec:	602b      	str	r3, [r5, #0]
 80092ee:	f7f8 faa4 	bl	800183a <_fstat>
 80092f2:	1c43      	adds	r3, r0, #1
 80092f4:	d102      	bne.n	80092fc <_fstat_r+0x1c>
 80092f6:	682b      	ldr	r3, [r5, #0]
 80092f8:	b103      	cbz	r3, 80092fc <_fstat_r+0x1c>
 80092fa:	6023      	str	r3, [r4, #0]
 80092fc:	bd38      	pop	{r3, r4, r5, pc}
 80092fe:	bf00      	nop
 8009300:	20000374 	.word	0x20000374

08009304 <_isatty_r>:
 8009304:	b538      	push	{r3, r4, r5, lr}
 8009306:	4d06      	ldr	r5, [pc, #24]	; (8009320 <_isatty_r+0x1c>)
 8009308:	2300      	movs	r3, #0
 800930a:	4604      	mov	r4, r0
 800930c:	4608      	mov	r0, r1
 800930e:	602b      	str	r3, [r5, #0]
 8009310:	f7f8 faa3 	bl	800185a <_isatty>
 8009314:	1c43      	adds	r3, r0, #1
 8009316:	d102      	bne.n	800931e <_isatty_r+0x1a>
 8009318:	682b      	ldr	r3, [r5, #0]
 800931a:	b103      	cbz	r3, 800931e <_isatty_r+0x1a>
 800931c:	6023      	str	r3, [r4, #0]
 800931e:	bd38      	pop	{r3, r4, r5, pc}
 8009320:	20000374 	.word	0x20000374

08009324 <_lseek_r>:
 8009324:	b538      	push	{r3, r4, r5, lr}
 8009326:	4d07      	ldr	r5, [pc, #28]	; (8009344 <_lseek_r+0x20>)
 8009328:	4604      	mov	r4, r0
 800932a:	4608      	mov	r0, r1
 800932c:	4611      	mov	r1, r2
 800932e:	2200      	movs	r2, #0
 8009330:	602a      	str	r2, [r5, #0]
 8009332:	461a      	mov	r2, r3
 8009334:	f7f8 fa9c 	bl	8001870 <_lseek>
 8009338:	1c43      	adds	r3, r0, #1
 800933a:	d102      	bne.n	8009342 <_lseek_r+0x1e>
 800933c:	682b      	ldr	r3, [r5, #0]
 800933e:	b103      	cbz	r3, 8009342 <_lseek_r+0x1e>
 8009340:	6023      	str	r3, [r4, #0]
 8009342:	bd38      	pop	{r3, r4, r5, pc}
 8009344:	20000374 	.word	0x20000374

08009348 <_read_r>:
 8009348:	b538      	push	{r3, r4, r5, lr}
 800934a:	4d07      	ldr	r5, [pc, #28]	; (8009368 <_read_r+0x20>)
 800934c:	4604      	mov	r4, r0
 800934e:	4608      	mov	r0, r1
 8009350:	4611      	mov	r1, r2
 8009352:	2200      	movs	r2, #0
 8009354:	602a      	str	r2, [r5, #0]
 8009356:	461a      	mov	r2, r3
 8009358:	f7f8 fa2a 	bl	80017b0 <_read>
 800935c:	1c43      	adds	r3, r0, #1
 800935e:	d102      	bne.n	8009366 <_read_r+0x1e>
 8009360:	682b      	ldr	r3, [r5, #0]
 8009362:	b103      	cbz	r3, 8009366 <_read_r+0x1e>
 8009364:	6023      	str	r3, [r4, #0]
 8009366:	bd38      	pop	{r3, r4, r5, pc}
 8009368:	20000374 	.word	0x20000374

0800936c <_init>:
 800936c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800936e:	bf00      	nop
 8009370:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009372:	bc08      	pop	{r3}
 8009374:	469e      	mov	lr, r3
 8009376:	4770      	bx	lr

08009378 <_fini>:
 8009378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800937a:	bf00      	nop
 800937c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800937e:	bc08      	pop	{r3}
 8009380:	469e      	mov	lr, r3
 8009382:	4770      	bx	lr
